0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;; cat /etc/sh.conf
0005   0000             ;; cat > test.txt
0006   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007   0000             
0008   0400             .org PROC_TEXT_ORG			; origin at 1024
0009   0400             
0010   0400             cmd_cat:
0011   0400 10 00 00    	mov a, 0
0012   0403 42 81 06    	mov [prog], a			; move tokennizer pointer to the beginning of the arguments area (address 0)
0013   0406 07 E2 04    	call get_token
0014   0409             
0015   0409 BC 84 06 07 	cmp byte[tok], TOK_ANGLE
0016   040D C6 3A 04    	je cmd_cat_write
0017   0410             cmd_cat_read:
0018   0410 07 68 06    	call putback
0019   0413 07 8B 04    	call get_path
0020   0416 3B 85 06    	mov d, tokstr
0021   0419 FD 4F 99 0B 	mov di, transient_area
0022   041D 19 14       	mov al, 20
0023   041F 05 04       	syscall sys_fileio				; read textfile into shell buffer
0024   0421 3B 99 0B    	mov d, transient_area
0025   0424 07 C4 09    	call puts					; print textfile to stdout
0026   0427 07 E2 04    	call get_token
0027   042A 1D 84 06    	mov al, [tok]
0028   042D B9 14       	cmp al, TOK_END
0029   042F C6 35 04    	je cmd_cat_end
0030   0432 0A 10 04    	jmp cmd_cat_read
0031   0435             cmd_cat_end:
0032   0435 07 68 06    	call putback
0033   0438 05 0B       	syscall sys_terminate_proc
0034   043A             cmd_cat_write:
0035   043A 07 E2 04    	call get_token
0036   043D FD 4D 85 06 	mov si, tokstr
0037   0441 FD 4F 9A 0B 	mov di, transient_area + 1
0038   0445 07 F1 07    	call strcpy				; copy filename
0039   0448 3B 99 0D    	mov d, transient_area + 512		; get text contents
0040   044B 07 20 09    	call gettxt
0041   044E 3B 99 0B    	mov d, transient_area
0042   0451 19 05       	mov al, 5
0043   0453 05 04       	syscall sys_fileio
0044   0455 05 0B       	syscall sys_terminate_proc
0045   0457             
0046   0457             
0047   0457             .include "token.asm"
0001+  0457             TOKTYP_IDENTIFIER	.equ 0
0002+  0457             TOKTYP_KEYWORD		.equ 1
0003+  0457             TOKTYP_DELIMITER	.equ 2
0004+  0457             TOKTYP_STRING		.equ 3
0005+  0457             TOKTYP_CHAR			.equ 4
0006+  0457             TOKTYP_NUMERIC		.equ 5
0007+  0457             TOKTYP_END			.equ 6
0008+  0457             
0009+  0457             TOK_NULL			.equ 0
0010+  0457             TOK_FSLASH			.equ 1
0011+  0457             TOK_TIMES 			.equ 2
0012+  0457             TOK_PLUS 			.equ 3
0013+  0457             TOK_MINUS 			.equ 4
0014+  0457             TOK_DOT				.equ 5
0015+  0457             TOK_SEMI			.equ 6
0016+  0457             TOK_ANGLE			.equ 7
0017+  0457             TOK_TILDE			.equ 8
0018+  0457             TOK_EQUAL			.equ 9
0019+  0457             TOK_COLON			.equ 10
0020+  0457             TOK_COMMA			.equ 11
0021+  0457             
0022+  0457             TOK_END				.equ 20
0023+  0457             
0024+  0457             
0025+  0457             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0457             ;; read a full command argment from shell input buffer
0027+  0457             ;; argument is written into tokstr
0028+  0457             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  0457             get_arg:
0030+  0457 D7          	push a
0031+  0458 E2          	push si
0032+  0459 E3          	push di
0033+  045A 19 00       	mov al, 0
0034+  045C 3D 85 06    	mov [tokstr], al			; nullify tokstr string
0035+  045F 14 81 06    	mov a, [prog]
0036+  0462 4D          	mov si, a
0037+  0463 FD 4F 85 06 	mov di, tokstr
0038+  0467             get_arg_skip_spaces:
0039+  0467 F6          	lodsb
0040+  0468 07 72 0B    	call isspace
0041+  046B C6 67 04    	je get_arg_skip_spaces
0042+  046E             get_arg_L0:
0043+  046E B9 3B       	cmp al, $3B				; check if is ';'
0044+  0470 C6 7D 04    	je get_arg_end
0045+  0473 B9 00       	cmp al, 0
0046+  0475 C6 7D 04    	je get_arg_end			; check if end of input
0047+  0478 F7          	stosb
0048+  0479 F6          	lodsb
0049+  047A 0A 6E 04    	jmp get_arg_L0
0050+  047D             get_arg_end:
0051+  047D 19 00       	mov al, 0
0052+  047F F7          	stosb
0053+  0480 D5 01 00    	sub si, 1
0054+  0483 4E          	mov a, si
0055+  0484 42 81 06    	mov [prog], a		; update pointer
0056+  0487 F0          	pop di
0057+  0488 EF          	pop si
0058+  0489 E4          	pop a
0059+  048A 09          	ret
0060+  048B             
0061+  048B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  048B             ;; read a path formation from shell input buffer
0063+  048B             ;; path is written into tokstr
0064+  048B             ;; /usr/bin
0065+  048B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  048B             get_path:
0067+  048B D7          	push a
0068+  048C E2          	push si
0069+  048D E3          	push di
0070+  048E 19 00       	mov al, 0
0071+  0490 3D 85 06    	mov [tokstr], al			; nullify tokstr string
0072+  0493 14 81 06    	mov a, [prog]
0073+  0496 4D          	mov si, a
0074+  0497 FD 4F 85 06 	mov di, tokstr
0075+  049B             get_path_skip_spaces:
0076+  049B F6          	lodsb
0077+  049C 07 72 0B    	call isspace
0078+  049F C6 9B 04    	je get_path_skip_spaces
0079+  04A2             get_path_is_pathchar:
0080+  04A2 F7          	stosb
0081+  04A3 F6          	lodsb
0082+  04A4 07 FC 0A    	call isalnum			;check if is alphanumeric
0083+  04A7 C6 A2 04    	je get_path_is_pathchar
0084+  04AA B9 2F       	cmp al, '/'				; check if is '/'
0085+  04AC C6 A2 04    	je get_path_is_pathchar
0086+  04AF 19 00       	mov al, 0
0087+  04B1 F7          	stosb
0088+  04B2 D5 01 00    	sub si, 1
0089+  04B5 4E          	mov a, si
0090+  04B6 42 81 06    	mov [prog], a		; update pointer
0091+  04B9             get_path_end:
0092+  04B9 F0          	pop di
0093+  04BA EF          	pop si
0094+  04BB E4          	pop a
0095+  04BC 09          	ret
0096+  04BD             
0097+  04BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  04BD             ;; read a line
0099+  04BD             ;; line is written into tokstr
0100+  04BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  04BD             get_line:
0102+  04BD D7          	push a
0103+  04BE E2          	push si
0104+  04BF E3          	push di
0105+  04C0 19 00       	mov al, 0
0106+  04C2 3D 85 06    	mov [tokstr], al			; nullify tokstr string
0107+  04C5 14 81 06    	mov a, [prog]
0108+  04C8 4D          	mov si, a
0109+  04C9 FD 4F 85 06 	mov di, tokstr
0110+  04CD             get_line_L0:
0111+  04CD F6          	lodsb
0112+  04CE B9 0A       	cmp al, $0A		; check for new line
0113+  04D0 C6 D7 04    	je get_line_exit
0114+  04D3 F7          	stosb
0115+  04D4 0A CD 04    	jmp get_line_L0
0116+  04D7             get_line_exit:
0117+  04D7 19 00       	mov al, 0
0118+  04D9 F7          	stosb
0119+  04DA 4E          	mov a, si
0120+  04DB 42 81 06    	mov [prog], a		; update pointer
0121+  04DE F0          	pop di
0122+  04DF EF          	pop si
0123+  04E0 E4          	pop a
0124+  04E1 09          	ret
0125+  04E2             
0126+  04E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  04E2             ;; token parser
0128+  04E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  04E2             get_token:
0130+  04E2 D7          	push a
0131+  04E3 DA          	push d
0132+  04E4 E2          	push si
0133+  04E5 E3          	push di
0134+  04E6 19 00       	mov al, 0
0135+  04E8 3D 85 06    	mov [tokstr], al			; nullify tokstr string
0136+  04EB 19 00       	mov al, TOK_NULL
0137+  04ED 3D 84 06    	mov [tok], al				; nullify token
0138+  04F0 14 81 06    	mov a, [prog]
0139+  04F3 4D          	mov si, a
0140+  04F4 FD 4F 85 06 	mov di, tokstr
0141+  04F8             get_tok_skip_spaces:
0142+  04F8 F6          	lodsb
0143+  04F9 07 72 0B    	call isspace
0144+  04FC C6 F8 04    	je get_tok_skip_spaces
0145+  04FF B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  0501 C6 E6 05    	je get_token_end
0147+  0504 B9 23       	cmp al, '#'			; comments!
0148+  0506 C6 14 06    	je get_tok_comment
0149+  0509 07 FC 0A    	call isalnum
0150+  050C C6 F3 05    	jz is_alphanumeric
0151+  050F             ; other token types
0152+  050F             get_token_slash:
0153+  050F B9 2F       	cmp al, '/'				; check if '/'
0154+  0511 C7 29 05    	jne get_token_minus
0155+  0514 F7          	stosb					; store '/' into token string
0156+  0515 19 00       	mov al, 0
0157+  0517 F7          	stosb					; terminate token string
0158+  0518 19 01       	mov al, TOK_FSLASH
0159+  051A 3D 84 06    	mov [tok], al			
0160+  051D 19 02       	mov al, TOKTYP_DELIMITER
0161+  051F 3D 83 06    	mov [toktyp], al
0162+  0522 4E          	mov a, si
0163+  0523 42 81 06    	mov [prog], a		; update pointer
0164+  0526 0A 0F 06    	jmp get_token_return
0165+  0529             get_token_minus:
0166+  0529 B9 2D       	cmp al, '-'				; check if '-'
0167+  052B C7 43 05    	jne get_token_comma
0168+  052E F7          	stosb					; store '-' into token string
0169+  052F 19 00       	mov al, 0
0170+  0531 F7          	stosb					; terminate token string
0171+  0532 19 04       	mov al, TOK_MINUS
0172+  0534 3D 84 06    	mov [tok], al			
0173+  0537 19 02       	mov al, TOKTYP_DELIMITER
0174+  0539 3D 83 06    	mov [toktyp], al
0175+  053C 4E          	mov a, si
0176+  053D 42 81 06    	mov [prog], a		; update pointer
0177+  0540 0A 0F 06    	jmp get_token_return
0178+  0543             get_token_comma:
0179+  0543 B9 2C       	cmp al, ','				; check if ','
0180+  0545 C7 5D 05    	jne get_token_semi
0181+  0548 F7          	stosb					; store ',' into token string
0182+  0549 19 00       	mov al, 0
0183+  054B F7          	stosb					; terminate token string
0184+  054C 19 0B       	mov al, TOK_COMMA
0185+  054E 3D 84 06    	mov [tok], al			
0186+  0551 19 02       	mov al, TOKTYP_DELIMITER
0187+  0553 3D 83 06    	mov [toktyp], al
0188+  0556 4E          	mov a, si
0189+  0557 42 81 06    	mov [prog], a		; update pointer
0190+  055A 0A 0F 06    	jmp get_token_return
0191+  055D             get_token_semi:
0192+  055D B9 3B       	cmp al, $3B				; check if ';'
0193+  055F C7 77 05    	jne get_token_colon
0194+  0562 F7          	stosb					; store ';' into token string
0195+  0563 19 00       	mov al, 0
0196+  0565 F7          	stosb					; terminate token string
0197+  0566 19 06       	mov al, TOK_SEMI
0198+  0568 3D 84 06    	mov [tok], al			
0199+  056B 19 02       	mov al, TOKTYP_DELIMITER
0200+  056D 3D 83 06    	mov [toktyp], al
0201+  0570 4E          	mov a, si
0202+  0571 42 81 06    	mov [prog], a		; update pointer
0203+  0574 0A 0F 06    	jmp get_token_return
0204+  0577             get_token_colon:
0205+  0577 B9 3A       	cmp al, $3A				; check if ':'
0206+  0579 C7 91 05    	jne get_token_angle
0207+  057C F7          	stosb					; store ':' into token string
0208+  057D 19 00       	mov al, 0
0209+  057F F7          	stosb					; terminate token string
0210+  0580 19 0A       	mov al, TOK_COLON
0211+  0582 3D 84 06    	mov [tok], al			
0212+  0585 19 02       	mov al, TOKTYP_DELIMITER
0213+  0587 3D 83 06    	mov [toktyp], al
0214+  058A 4E          	mov a, si
0215+  058B 42 81 06    	mov [prog], a		; update pointer
0216+  058E 0A 0F 06    	jmp get_token_return
0217+  0591             get_token_angle:
0218+  0591 B9 3E       	cmp al, $3E				; check if '>'
0219+  0593 C7 AB 05    	jne get_token_tilde
0220+  0596 F7          	stosb					; store '>' into token string
0221+  0597 19 00       	mov al, 0
0222+  0599 F7          	stosb					; terminate token string
0223+  059A 19 07       	mov al, TOK_ANGLE
0224+  059C 3D 84 06    	mov [tok], al			
0225+  059F 19 02       	mov al, TOKTYP_DELIMITER
0226+  05A1 3D 83 06    	mov [toktyp], al
0227+  05A4 4E          	mov a, si
0228+  05A5 42 81 06    	mov [prog], a		; update pointer
0229+  05A8 0A 0F 06    	jmp get_token_return
0230+  05AB             get_token_tilde:
0231+  05AB B9 7E       	cmp al, '~'				; check if '~'
0232+  05AD C7 C5 05    	jne get_token_equal
0233+  05B0 F7          	stosb					; store '~' into token string
0234+  05B1 19 00       	mov al, 0
0235+  05B3 F7          	stosb					; terminate token string
0236+  05B4 19 08       	mov al, TOK_TILDE
0237+  05B6 3D 84 06    	mov [tok], al			
0238+  05B9 19 02       	mov al, TOKTYP_DELIMITER
0239+  05BB 3D 83 06    	mov [toktyp], al
0240+  05BE 4E          	mov a, si
0241+  05BF 42 81 06    	mov [prog], a		; update pointer
0242+  05C2 0A 0F 06    	jmp get_token_return
0243+  05C5             get_token_equal:
0244+  05C5 B9 3D       	cmp al, '='				; check if '='
0245+  05C7 C7 DF 05    	jne get_token_skip
0246+  05CA F7          	stosb					; store '=' into token string
0247+  05CB 19 00       	mov al, 0
0248+  05CD F7          	stosb					; terminate token string
0249+  05CE 19 09       	mov al, TOK_EQUAL
0250+  05D0 3D 84 06    	mov [tok], al			
0251+  05D3 19 02       	mov al, TOKTYP_DELIMITER
0252+  05D5 3D 83 06    	mov [toktyp], al
0253+  05D8 4E          	mov a, si
0254+  05D9 42 81 06    	mov [prog], a		; update pointer
0255+  05DC 0A 0F 06    	jmp get_token_return
0256+  05DF             get_token_skip:
0257+  05DF 4E          	mov a, si
0258+  05E0 42 81 06    	mov [prog], a		; update pointer
0259+  05E3 0A 0F 06    	jmp get_token_return
0260+  05E6             get_token_end:				; end of file token
0261+  05E6 19 14       	mov al, TOK_END
0262+  05E8 3D 84 06    	mov [tok], al
0263+  05EB 19 06       	mov al, TOKTYP_END
0264+  05ED 3D 83 06    	mov [toktyp], al
0265+  05F0 0A 0F 06    	jmp get_token_return
0266+  05F3             is_alphanumeric:
0267+  05F3 F7          	stosb
0268+  05F4 F6          	lodsb
0269+  05F5 07 FC 0A    	call isalnum			;check if is alphanumeric
0270+  05F8 C6 F3 05    	jz is_alphanumeric
0271+  05FB B9 2E       	cmp al, $2E				; check if is '.'
0272+  05FD C6 F3 05    	je is_alphanumeric
0273+  0600 19 00       	mov al, 0
0274+  0602 F7          	stosb
0275+  0603 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  0605 3D 83 06    	mov [toktyp], al
0277+  0608 D5 01 00    	sub si, 1
0278+  060B 4E          	mov a, si
0279+  060C 42 81 06    	mov [prog], a		; update pointer
0280+  060F             get_token_return:
0281+  060F F0          	pop di
0282+  0610 EF          	pop si
0283+  0611 E7          	pop d
0284+  0612 E4          	pop a
0285+  0613 09          	ret
0286+  0614             get_tok_comment:
0287+  0614 F6          	lodsb
0288+  0615 B9 0A       	cmp al, $0A			; new line
0289+  0617 C7 14 06    	jne get_tok_comment
0290+  061A 0A F8 04    	jmp get_tok_skip_spaces
0291+  061D             
0292+  061D             
0293+  061D             get_number:
0294+  061D D7          	push a
0295+  061E DA          	push d
0296+  061F E2          	push si
0297+  0620 E3          	push di
0298+  0621 19 00       	mov al, 0
0299+  0623 3D 85 06    	mov [tokstr], al			; nullify tokstr string
0300+  0626 19 00       	mov al, TOK_NULL
0301+  0628 3D 84 06    	mov [tok], al				; nullify token
0302+  062B 14 81 06    	mov a, [prog]
0303+  062E 4D          	mov si, a
0304+  062F FD 4F 85 06 	mov di, tokstr
0305+  0633             get_number_skip_spaces:
0306+  0633 F6          	lodsb
0307+  0634 07 72 0B    	call isspace
0308+  0637 C6 33 06    	je get_number_skip_spaces
0309+  063A B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  063C C7 4C 06    	jne get_number_L0
0311+  063F 19 14       	mov al, TOK_END
0312+  0641 3D 84 06    	mov [tok], al
0313+  0644 19 06       	mov al, TOKTYP_END
0314+  0646 3D 83 06    	mov [toktyp], al
0315+  0649 0A 63 06    	jmp get_number_return
0316+  064C             get_number_L0:
0317+  064C F7          	stosb
0318+  064D F6          	lodsb
0319+  064E 07 06 0B    	call isdigit			;check if is numeric
0320+  0651 C6 4C 06    	jz get_number_L0
0321+  0654 19 00       	mov al, 0
0322+  0656 F7          	stosb
0323+  0657 19 05       	mov al, TOKTYP_NUMERIC
0324+  0659 3D 83 06    	mov [toktyp], al
0325+  065C D5 01 00    	sub si, 1
0326+  065F 4E          	mov a, si
0327+  0660 42 81 06    	mov [prog], a		; update pointer
0328+  0663             get_number_return:
0329+  0663 F0          	pop di
0330+  0664 EF          	pop si
0331+  0665 E7          	pop d
0332+  0666 E4          	pop a
0333+  0667 09          	ret
0334+  0668             
0335+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0668             ;; PUT BACK TOKEN
0337+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  0668             putback:
0339+  0668 D7          	push a
0340+  0669 E2          	push si
0341+  066A FD 4D 85 06 	mov si, tokstr	
0342+  066E             putback_loop:
0343+  066E F6          	lodsb
0344+  066F B9 00       	cmp al, 0
0345+  0671 C6 7E 06    	je putback_end
0346+  0674 14 81 06    	mov a, [prog]
0347+  0677 7D          	dec a
0348+  0678 42 81 06    	mov [prog], a			; update pointer
0349+  067B 0A 6E 06    	jmp putback_loop
0350+  067E             putback_end:
0351+  067E EF          	pop si
0352+  067F E4          	pop a
0353+  0680 09          	ret
0354+  0681             
0355+  0681             
0356+  0681             
0357+  0681             
0358+  0681 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  0683             
0360+  0683 00          toktyp: 	.db 0			; token type symbol
0361+  0684 00          tok:		.db 0			; current token symbol
0362+  0685 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  0689 00 00 00 00 
0362+  068D 00 00 00 00 
0362+  0691 00 00 00 00 
0362+  0695 00 00 00 00 
0362+  0699 00 00 00 00 
0362+  069D 00 00 00 00 
0362+  06A1 00 00 00 00 
0362+  06A5 00 00 00 00 
0362+  06A9 00 00 00 00 
0362+  06AD 00 00 00 00 
0362+  06B1 00 00 00 00 
0362+  06B5 00 00 00 00 
0362+  06B9 00 00 00 00 
0362+  06BD 00 00 00 00 
0362+  06C1 00 00 00 00 
0362+  06C5 00 00 00 00 
0362+  06C9 00 00 00 00 
0362+  06CD 00 00 00 00 
0362+  06D1 00 00 00 00 
0362+  06D5 00 00 00 00 
0362+  06D9 00 00 00 00 
0362+  06DD 00 00 00 00 
0362+  06E1 00 00 00 00 
0362+  06E5 00 00 00 00 
0362+  06E9 00 00 00 00 
0362+  06ED 00 00 00 00 
0362+  06F1 00 00 00 00 
0362+  06F5 00 00 00 00 
0362+  06F9 00 00 00 00 
0362+  06FD 00 00 00 00 
0362+  0701 00 00 00 00 
0362+  0705 00 00 00 00 
0362+  0709 00 00 00 00 
0362+  070D 00 00 00 00 
0362+  0711 00 00 00 00 
0362+  0715 00 00 00 00 
0362+  0719 00 00 00 00 
0362+  071D 00 00 00 00 
0362+  0721 00 00 00 00 
0362+  0725 00 00 00 00 
0362+  0729 00 00 00 00 
0362+  072D 00 00 00 00 
0362+  0731 00 00 00 00 
0362+  0735 00 00 00 00 
0362+  0739 00 00 00 00 
0362+  073D 00 00 00 00 
0362+  0741 00 00 00 00 
0362+  0745 00 00 00 00 
0362+  0749 00 00 00 00 
0362+  074D 00 00 00 00 
0362+  0751 00 00 00 00 
0362+  0755 00 00 00 00 
0362+  0759 00 00 00 00 
0362+  075D 00 00 00 00 
0362+  0761 00 00 00 00 
0362+  0765 00 00 00 00 
0362+  0769 00 00 00 00 
0362+  076D 00 00 00 00 
0362+  0771 00 00 00 00 
0362+  0775 00 00 00 00 
0362+  0779 00 00 00 00 
0362+  077D 00 00 00 00 
0362+  0781 00 00 00 00 
0048   0785             .include "stdio.asm"
0001+  0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0785             ; stdio.s
0003+  0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0785             .include "string.asm"
0001++ 0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0785             ; string.s
0003++ 0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0785             
0005++ 0785             
0006++ 0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0785             ; strrev
0008++ 0785             ; reverse a string
0009++ 0785             ; D = string address
0010++ 0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0785             ; 01234
0012++ 0785             strrev:
0013++ 0785 4B          	pusha
0014++ 0786 07 CC 07    	call strlen	; length in C
0015++ 0789 12          	mov a, c
0016++ 078A AF 01 00    	cmp a, 1
0017++ 078D D0 A7 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0790 7D          	dec a
0019++ 0791 FD 4E       	mov si, d	; beginning of string
0020++ 0793 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0795 59          	add d, a	; end of string
0022++ 0796 12          	mov a, c
0023++ 0797 FD 9B       	shr a		; divide by 2
0024++ 0799 39          	mov c, a	; C now counts the steps
0025++ 079A             strrev_L0:
0026++ 079A 32          	mov bl, [d]	; save load right-side char into BL
0027++ 079B F6          	lodsb		; load left-side char into AL; increase SI
0028++ 079C 3E          	mov [d], al	; store left char into right side
0029++ 079D 1B          	mov al, bl
0030++ 079E F7          	stosb		; store right-side char into left-side; increase DI
0031++ 079F 7E          	dec c
0032++ 07A0 7F          	dec d
0033++ 07A1 C2 00 00    	cmp c, 0
0034++ 07A4 C7 9A 07    	jne strrev_L0
0035++ 07A7             strrev_end:
0036++ 07A7 4C          	popa
0037++ 07A8 09          	ret
0038++ 07A9             	
0039++ 07A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 07A9             ; strchr
0041++ 07A9             ; search string in D for char in AL
0042++ 07A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 07A9             strchr:
0044++ 07A9             strchr_L0:
0045++ 07A9 32          	mov bl, [d]
0046++ 07AA C1 00       	cmp bl, 0
0047++ 07AC C6 B7 07    	je strchr_end
0048++ 07AF BA          	cmp al, bl
0049++ 07B0 C6 B7 07    	je strchr_end
0050++ 07B3 79          	inc d
0051++ 07B4 0A A9 07    	jmp strchr_L0
0052++ 07B7             strchr_end:
0053++ 07B7 1B          	mov al, bl
0054++ 07B8 09          	ret
0055++ 07B9             
0056++ 07B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 07B9             ; strstr
0058++ 07B9             ; find sub-string
0059++ 07B9             ; str1 in SI
0060++ 07B9             ; str2 in DI
0061++ 07B9             ; SI points to end of source string
0062++ 07B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 07B9             strstr:
0064++ 07B9 DB          	push al
0065++ 07BA DA          	push d
0066++ 07BB E3          	push di
0067++ 07BC             strstr_loop:
0068++ 07BC F3          	cmpsb					; compare a byte of the strings
0069++ 07BD C7 C8 07    	jne strstr_ret
0070++ 07C0 FC 00 00    	lea d, [di + 0]
0071++ 07C3 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 07C5 C7 BC 07    	jne strstr_loop				; equal chars but not at end
0073++ 07C8             strstr_ret:
0074++ 07C8 F0          	pop di
0075++ 07C9 E7          	pop d
0076++ 07CA E8          	pop al
0077++ 07CB 09          	ret
0078++ 07CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 07CC             ; length of null terminated string
0080++ 07CC             ; result in C
0081++ 07CC             ; pointer in D
0082++ 07CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 07CC             strlen:
0084++ 07CC DA          	push d
0085++ 07CD 38 00 00    	mov c, 0
0086++ 07D0             strlen_L1:
0087++ 07D0 BD 00       	cmp byte [d], 0
0088++ 07D2 C6 DA 07    	je strlen_ret
0089++ 07D5 79          	inc d
0090++ 07D6 78          	inc c
0091++ 07D7 0A D0 07    	jmp strlen_L1
0092++ 07DA             strlen_ret:
0093++ 07DA E7          	pop d
0094++ 07DB 09          	ret
0095++ 07DC             
0096++ 07DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07DC             ; STRCMP
0098++ 07DC             ; compare two strings
0099++ 07DC             ; str1 in SI
0100++ 07DC             ; str2 in DI
0101++ 07DC             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 07DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07DC             strcmp:
0104++ 07DC DB          	push al
0105++ 07DD DA          	push d
0106++ 07DE E3          	push di
0107++ 07DF E2          	push si
0108++ 07E0             strcmp_loop:
0109++ 07E0 F3          	cmpsb					; compare a byte of the strings
0110++ 07E1 C7 EC 07    	jne strcmp_ret
0111++ 07E4 FB FF FF    	lea d, [si +- 1]
0112++ 07E7 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07E9 C7 E0 07    	jne strcmp_loop				; equal chars but not at end
0114++ 07EC             strcmp_ret:
0115++ 07EC EF          	pop si
0116++ 07ED F0          	pop di
0117++ 07EE E7          	pop d
0118++ 07EF E8          	pop al
0119++ 07F0 09          	ret
0120++ 07F1             
0121++ 07F1             
0122++ 07F1             ; STRCPY
0123++ 07F1             ; copy null terminated string from SI to DI
0124++ 07F1             ; source in SI
0125++ 07F1             ; destination in DI
0126++ 07F1             strcpy:
0127++ 07F1 E2          	push si
0128++ 07F2 E3          	push di
0129++ 07F3 DB          	push al
0130++ 07F4             strcpy_L1:
0131++ 07F4 F6          	lodsb
0132++ 07F5 F7          	stosb
0133++ 07F6 B9 00       	cmp al, 0
0134++ 07F8 C7 F4 07    	jne strcpy_L1
0135++ 07FB             strcpy_end:
0136++ 07FB E8          	pop al
0137++ 07FC F0          	pop di
0138++ 07FD EF          	pop si
0139++ 07FE 09          	ret
0140++ 07FF             
0141++ 07FF             ; STRCAT
0142++ 07FF             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07FF             ; source in SI
0144++ 07FF             ; destination in DI
0145++ 07FF             strcat:
0146++ 07FF E2          	push si
0147++ 0800 E3          	push di
0148++ 0801 D7          	push a
0149++ 0802 DA          	push d
0150++ 0803 50          	mov a, di
0151++ 0804 3C          	mov d, a
0152++ 0805             strcat_goto_end_L1:
0153++ 0805 BD 00       	cmp byte[d], 0
0154++ 0807 C6 0E 08    	je strcat_start
0155++ 080A 79          	inc d
0156++ 080B 0A 05 08    	jmp strcat_goto_end_L1
0157++ 080E             strcat_start:
0158++ 080E FD 50       	mov di, d
0159++ 0810             strcat_L1:
0160++ 0810 F6          	lodsb
0161++ 0811 F7          	stosb
0162++ 0812 B9 00       	cmp al, 0
0163++ 0814 C7 10 08    	jne strcat_L1
0164++ 0817             strcat_end:
0165++ 0817 E7          	pop d
0166++ 0818 E4          	pop a
0167++ 0819 F0          	pop di
0168++ 081A EF          	pop si
0169++ 081B 09          	ret
0005+  081C             
0006+  081C 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0820 34 35 36 37 
0006+  0824 38 39 41 42 
0006+  0828 43 44 45 46 
0007+  082C             
0008+  082C 01 00       table_power:.dw 1
0009+  082E 0A 00       			.dw 10
0010+  0830 64 00       			.dw 100
0011+  0832 E8 03       			.dw 1000
0012+  0834 10 27       			.dw 10000
0013+  0836             
0014+  0836             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  0836             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  0836             ; ASCII in BL
0017+  0836             ; result in AL
0018+  0836             ; ascii for F = 0100 0110
0019+  0836             ; ascii for 9 = 0011 1001
0020+  0836             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  0836             hex_ascii_encode:
0022+  0836 1B          	mov al, bl
0023+  0837 93 40       	test al, $40				; test if letter or number
0024+  0839 C7 3F 08    	jnz hex_letter
0025+  083C 87 0F       	and al, $0F				; get number
0026+  083E 09          	ret
0027+  083F             hex_letter:
0028+  083F 87 0F       	and al, $0F				; get letter
0029+  0841 6A 09       	add al, 9
0030+  0843 09          	ret
0031+  0844             
0032+  0844             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  0844             ; ATOI
0034+  0844             ; 2 letter hex string in B
0035+  0844             ; 8bit integer returned in AL
0036+  0844             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  0844             atoi:
0038+  0844 D8          	push b
0039+  0845 07 36 08    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  0848 30          	mov bl, bh
0041+  0849 DB          	push al					; save a
0042+  084A 07 36 08    	call hex_ascii_encode
0043+  084D EA          	pop bl	
0044+  084E FD 9E 04    	shl al, 4
0045+  0851 8C          	or al, bl
0046+  0852 E5          	pop b
0047+  0853 09          	ret	
0048+  0854             
0049+  0854             
0050+  0854             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0854             ; printf
0052+  0854             ; no need for explanations!
0053+  0854             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  0854             printf:
0055+  0854 09          	ret
0056+  0855             
0057+  0855             
0058+  0855             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0855             ; scanf
0060+  0855             ; no need for explanations!
0061+  0855             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0855             scanf:
0063+  0855 09          	ret
0064+  0856             
0065+  0856             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0856             ; ITOA
0067+  0856             ; 8bit value in BL
0068+  0856             ; 2 byte ASCII result in A
0069+  0856             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  0856             itoa:
0071+  0856 DA          	push d
0072+  0857 D8          	push b
0073+  0858 A7 00       	mov bh, 0
0074+  085A FD A4 04    	shr bl, 4	
0075+  085D 74          	mov d, b
0076+  085E 1F 1C 08    	mov al, [d + s_hex_digits]
0077+  0861 23          	mov ah, al
0078+  0862             	
0079+  0862 E5          	pop b
0080+  0863 D8          	push b
0081+  0864 A7 00       	mov bh, 0
0082+  0866 FD 87 0F    	and bl, $0F
0083+  0869 74          	mov d, b
0084+  086A 1F 1C 08    	mov al, [d + s_hex_digits]
0085+  086D E5          	pop b
0086+  086E E7          	pop d
0087+  086F 09          	ret
0088+  0870             
0089+  0870             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0870             ; HEX STRING TO BINARY
0091+  0870             ; di = destination address
0092+  0870             ; si = source
0093+  0870             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0870             hex_to_int:
0095+  0870             hex_to_int_L1:
0096+  0870 F6          	lodsb					; load from [SI] to AL
0097+  0871 B9 00       	cmp al, 0				; check if ASCII 0
0098+  0873 C6 80 08    	jz hex_to_int_ret
0099+  0876 36          	mov bh, al
0100+  0877 F6          	lodsb
0101+  0878 2F          	mov bl, al
0102+  0879 07 44 08    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  087C F7          	stosb					; store AL to [DI]
0104+  087D 0A 70 08    	jmp hex_to_int_L1
0105+  0880             hex_to_int_ret:
0106+  0880 09          	ret		
0107+  0881             
0108+  0881             
0109+  0881             
0110+  0881             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0881             ; GETCHAR
0112+  0881             ; char in ah
0113+  0881             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0881             getchar:
0115+  0881 DB          	push al
0116+  0882             getchar_retry:
0117+  0882 FD 0C       	sti
0118+  0884 19 01       	mov al, 1
0119+  0886 05 03       	syscall sys_io			; receive in AH
0120+  0888 B9 00       	cmp al, 0			; check if any char was receive
0121+  088A C6 82 08    	je getchar_retry
0122+  088D E8          	pop al
0123+  088E 09          	ret
0124+  088F             
0125+  088F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  088F             ; PUTCHAR
0127+  088F             ; char in ah
0128+  088F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  088F             putchar:
0130+  088F D7          	push a
0131+  0890 19 00       	mov al, 0
0132+  0892 05 03       	syscall sys_io			; char in AH
0133+  0894 E4          	pop a
0134+  0895 09          	ret
0135+  0896             
0136+  0896             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  0896             ;; INPUT A STRING
0138+  0896             ;; terminates with null
0139+  0896             ;; pointer in D
0140+  0896             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0896             gets:
0142+  0896 D7          	push a
0143+  0897 DA          	push d
0144+  0898             gets_loop:
0145+  0898 FD 0C       	sti
0146+  089A 19 01       	mov al, 1
0147+  089C 05 03       	syscall sys_io			; receive in AH
0148+  089E B9 00       	cmp al, 0				; check error code (AL)
0149+  08A0 C6 98 08    	je gets_loop			; if no char received, retry
0150+  08A3             
0151+  08A3 76 1B       	cmp ah, 27
0152+  08A5 C6 C1 08    	je gets_telnet_escape
0153+  08A8 76 0A       	cmp ah, $0A				; LF
0154+  08AA C6 1A 09    	je gets_end
0155+  08AD 76 5C       	cmp ah, $5C				; '\\'
0156+  08AF C6 F1 08    	je gets_escape
0157+  08B2             	
0158+  08B2 76 08       	cmp ah, $08			; check for backspace
0159+  08B4 C6 BD 08    	je gets_backspace
0160+  08B7             
0161+  08B7 1A          	mov al, ah
0162+  08B8 3E          	mov [d], al
0163+  08B9 79          	inc d
0164+  08BA 0A 98 08    	jmp gets_loop
0165+  08BD             gets_backspace:
0166+  08BD 7F          	dec d
0167+  08BE 0A 98 08    	jmp gets_loop
0168+  08C1             gets_telnet_escape:
0169+  08C1 FD 0C       	sti
0170+  08C3 19 01       	mov al, 1
0171+  08C5 05 03       	syscall sys_io				; receive in AH without echo
0172+  08C7 B9 00       	cmp al, 0					; check error code (AL)
0173+  08C9 C6 C1 08    	je gets_telnet_escape		; if no char received, retry
0174+  08CC 76 5B       	cmp ah, '['
0175+  08CE C7 98 08    	jne gets_loop
0176+  08D1             gets_telnet_escape_phase2:
0177+  08D1 FD 0C       	sti
0178+  08D3 19 01       	mov al, 1
0179+  08D5 05 03       	syscall sys_io					; receive in AH without echo
0180+  08D7 B9 00       	cmp al, 0						; check error code (AL)
0181+  08D9 C6 D1 08    	je gets_telnet_escape_phase2	; if no char received, retry
0182+  08DC 76 44       	cmp ah, 'D'
0183+  08DE C6 E9 08    	je gets_left_arrow
0184+  08E1 76 43       	cmp ah, 'C'
0185+  08E3 C6 ED 08    	je gets_right_arrow
0186+  08E6 0A 98 08    	jmp gets_loop
0187+  08E9             gets_left_arrow:
0188+  08E9 7F          	dec d
0189+  08EA 0A 98 08    	jmp gets_loop
0190+  08ED             gets_right_arrow:
0191+  08ED 79          	inc d
0192+  08EE 0A 98 08    	jmp gets_loop
0193+  08F1             gets_escape:
0194+  08F1 FD 0C       	sti
0195+  08F3 19 01       	mov al, 1
0196+  08F5 05 03       	syscall sys_io			; receive in AH
0197+  08F7 B9 00       	cmp al, 0				; check error code (AL)
0198+  08F9 C6 F1 08    	je gets_escape			; if no char received, retry
0199+  08FC 76 6E       	cmp ah, 'n'
0200+  08FE C6 0C 09    	je gets_LF
0201+  0901 76 72       	cmp ah, 'r'
0202+  0903 C6 13 09    	je gets_CR
0203+  0906 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0204+  0907 3E          	mov [d], al
0205+  0908 79          	inc d
0206+  0909 0A 98 08    	jmp gets_loop
0207+  090C             gets_LF:
0208+  090C 19 0A       	mov al, $0A
0209+  090E 3E          	mov [d], al
0210+  090F 79          	inc d
0211+  0910 0A 98 08    	jmp gets_loop
0212+  0913             gets_CR:
0213+  0913 19 0D       	mov al, $0D
0214+  0915 3E          	mov [d], al
0215+  0916 79          	inc d
0216+  0917 0A 98 08    	jmp gets_loop
0217+  091A             gets_end:
0218+  091A 19 00       	mov al, 0
0219+  091C 3E          	mov [d], al				; terminate string
0220+  091D E7          	pop d
0221+  091E E4          	pop a
0222+  091F 09          	ret
0223+  0920             
0224+  0920             
0225+  0920             
0226+  0920             
0227+  0920             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0228+  0920             ;; INPUT TEXT
0229+  0920             ;; terminated with CTRL+D
0230+  0920             ;; pointer in D
0231+  0920             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0232+  0920             gettxt:
0233+  0920 D7          	push a
0234+  0921 DA          	push d
0235+  0922             gettxt_loop:
0236+  0922 19 01       	mov al, 1
0237+  0924 05 03       	syscall sys_io			; receive in AH
0238+  0926 B9 00       	cmp al, 0				; check error code (AL)
0239+  0928 C6 22 09    	je gettxt_loop		; if no char received, retry
0240+  092B 76 04       	cmp ah, 4			; EOT
0241+  092D C6 6B 09    	je gettxt_end
0242+  0930 76 08       	cmp ah, $08			; check for backspace
0243+  0932 C6 67 09    	je gettxt_backspace
0244+  0935 76 5C       	cmp ah, $5C				; '\\'
0245+  0937 C6 40 09    	je gettxt_escape
0246+  093A 1A          	mov al, ah
0247+  093B 3E          	mov [d], al
0248+  093C 79          	inc d
0249+  093D 0A 22 09    	jmp gettxt_loop
0250+  0940             gettxt_escape:
0251+  0940 19 01       	mov al, 1
0252+  0942 05 03       	syscall sys_io			; receive in AH
0253+  0944 B9 00       	cmp al, 0				; check error code (AL)
0254+  0946 C6 40 09    	je gettxt_escape		; if no char received, retry
0255+  0949 76 6E       	cmp ah, 'n'
0256+  094B C6 59 09    	je gettxt_LF
0257+  094E 76 72       	cmp ah, 'r'
0258+  0950 C6 60 09    	je gettxt_CR
0259+  0953 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0260+  0954 3E          	mov [d], al
0261+  0955 79          	inc d
0262+  0956 0A 22 09    	jmp gettxt_loop
0263+  0959             gettxt_LF:
0264+  0959 19 0A       	mov al, $0A
0265+  095B 3E          	mov [d], al
0266+  095C 79          	inc d
0267+  095D 0A 22 09    	jmp gettxt_loop
0268+  0960             gettxt_CR:
0269+  0960 19 0D       	mov al, $0D
0270+  0962 3E          	mov [d], al
0271+  0963 79          	inc d
0272+  0964 0A 22 09    	jmp gettxt_loop
0273+  0967             gettxt_backspace:
0274+  0967 7F          	dec d
0275+  0968 0A 22 09    	jmp gettxt_loop
0276+  096B             gettxt_end:
0277+  096B 19 00       	mov al, 0
0278+  096D 3E          	mov [d], al				; terminate string
0279+  096E E7          	pop d
0280+  096F E4          	pop a
0281+  0970 09          	ret
0282+  0971             
0283+  0971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0284+  0971             ; PRINT NEW LINE
0285+  0971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0971             printnl:
0287+  0971 D7          	push a
0288+  0972 10 00 0A    	mov a, $0A00
0289+  0975 05 03       	syscall sys_io
0290+  0977 10 00 0D    	mov a, $0D00
0291+  097A 05 03       	syscall sys_io
0292+  097C E4          	pop a
0293+  097D 09          	ret
0294+  097E             
0295+  097E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0296+  097E             ; strtoint
0297+  097E             ; 4 digit hex string number in d
0298+  097E             ; integer returned in A
0299+  097E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0300+  097E             strtointx:
0301+  097E D8          	push b
0302+  097F 32          	mov bl, [d]
0303+  0980 37          	mov bh, bl
0304+  0981 33 01 00    	mov bl, [d + 1]
0305+  0984 07 44 08    	call atoi				; convert to int in AL
0306+  0987 23          	mov ah, al				; move to AH
0307+  0988 33 02 00    	mov bl, [d + 2]
0308+  098B 37          	mov bh, bl
0309+  098C 33 03 00    	mov bl, [d + 3]
0310+  098F 07 44 08    	call atoi				; convert to int in AL
0311+  0992 E5          	pop b
0312+  0993 09          	ret
0313+  0994             
0314+  0994             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0315+  0994             ; strtoint
0316+  0994             ; 5 digit base10 string number in d
0317+  0994             ; integer returned in A
0318+  0994             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0319+  0994             strtoint:
0320+  0994 E2          	push si
0321+  0995 D8          	push b
0322+  0996 D9          	push c
0323+  0997 DA          	push d
0324+  0998 07 CC 07    	call strlen			; get string length in C
0325+  099B 7E          	dec c
0326+  099C FD 4E       	mov si, d
0327+  099E 12          	mov a, c
0328+  099F FD 99       	shl a
0329+  09A1 3B 2C 08    	mov d, table_power
0330+  09A4 59          	add d, a
0331+  09A5 38 00 00    	mov c, 0
0332+  09A8             strtoint_L0:
0333+  09A8 F6          	lodsb			; load ASCII to al
0334+  09A9 B9 00       	cmp al, 0
0335+  09AB C6 BE 09    	je strtoint_end
0336+  09AE 6F 30       	sub al, $30		; make into integer
0337+  09B0 22 00       	mov ah, 0
0338+  09B2 2A          	mov b, [d]
0339+  09B3 AC          	mul a, b			; result in B since it fits in 16bits
0340+  09B4 11          	mov a, b
0341+  09B5 28          	mov b, c
0342+  09B6 54          	add a, b
0343+  09B7 39          	mov c, a
0344+  09B8 63 02 00    	sub d, 2
0345+  09BB 0A A8 09    	jmp strtoint_L0
0346+  09BE             strtoint_end:
0347+  09BE 12          	mov a, c
0348+  09BF E7          	pop d
0349+  09C0 E6          	pop c
0350+  09C1 E5          	pop b
0351+  09C2 EF          	pop si
0352+  09C3 09          	ret
0353+  09C4             
0354+  09C4             
0355+  09C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  09C4             ; PRINT NULL TERMINATED STRING
0357+  09C4             ; pointer in D
0358+  09C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  09C4             puts:
0360+  09C4 D7          	push a
0361+  09C5 DA          	push d
0362+  09C6             puts_L1:
0363+  09C6 1E          	mov al, [d]
0364+  09C7 B9 00       	cmp al, 0
0365+  09C9 C6 D5 09    	jz puts_END
0366+  09CC 23          	mov ah, al
0367+  09CD 19 00       	mov al, 0
0368+  09CF 05 03       	syscall sys_io
0369+  09D1 79          	inc d
0370+  09D2 0A C6 09    	jmp puts_L1
0371+  09D5             puts_END:
0372+  09D5 E7          	pop d
0373+  09D6 E4          	pop a
0374+  09D7 09          	ret
0375+  09D8             
0376+  09D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0377+  09D8             ; PRINT N SIZE STRING
0378+  09D8             ; pointer in D
0379+  09D8             ; size in C
0380+  09D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0381+  09D8             putsn:
0382+  09D8 DB          	push al
0383+  09D9 DA          	push d
0384+  09DA D9          	push c
0385+  09DB             putsn_L0:
0386+  09DB 1E          	mov al, [d]
0387+  09DC 23          	mov ah, al
0388+  09DD 19 00       	mov al, 0
0389+  09DF 05 03       	syscall sys_io
0390+  09E1 79          	inc d
0391+  09E2 7E          	dec c	
0392+  09E3 C2 00 00    	cmp c, 0
0393+  09E6 C7 DB 09    	jne putsn_L0
0394+  09E9             putsn_end:
0395+  09E9 E6          	pop c
0396+  09EA E7          	pop d
0397+  09EB E8          	pop al
0398+  09EC 09          	ret
0399+  09ED             
0400+  09ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0401+  09ED             ; print 16bit decimal number
0402+  09ED             ; input number in A
0403+  09ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  09ED             print_u16d:
0405+  09ED D7          	push a
0406+  09EE D8          	push b
0407+  09EF 26 10 27    	mov b, 10000
0408+  09F2 AE          	div a, b			; get 10000 coeff.
0409+  09F3 07 19 0A    	call print_zero_or_space
0410+  09F6 11          	mov a, b
0411+  09F7 26 E8 03    	mov b, 1000
0412+  09FA AE          	div a, b			; get 10000 coeff.
0413+  09FB 07 19 0A    	call print_zero_or_space
0414+  09FE 11          	mov a, b
0415+  09FF 26 64 00    	mov b, 100
0416+  0A02 AE          	div a, b
0417+  0A03 07 19 0A    	call print_zero_or_space
0418+  0A06 11          	mov a, b
0419+  0A07 26 0A 00    	mov b, 10
0420+  0A0A AE          	div a, b
0421+  0A0B 07 19 0A    	call print_zero_or_space
0422+  0A0E 11          	mov a, b
0423+  0A0F 6A 30       	add al, $30
0424+  0A11 23          	mov ah, al
0425+  0A12 19 00       	mov al, 0
0426+  0A14 05 03       	syscall sys_io	; print coeff
0427+  0A16 E5          	pop b
0428+  0A17 E4          	pop a
0429+  0A18 09          	ret
0430+  0A19             
0431+  0A19             
0432+  0A19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  0A19             ; if A == 0, print space
0434+  0A19             ; else print A
0435+  0A19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0A19             print_zero_or_space:
0437+  0A19             	; cmp a, 0
0438+  0A19             	; jne print_number
0439+  0A19             	; mov ah, $20
0440+  0A19             	; call putchar
0441+  0A19             	; ret
0442+  0A19             print_number:
0443+  0A19 6A 30       	add al, $30
0444+  0A1B 23          	mov ah, al
0445+  0A1C 07 8F 08    	call putchar
0446+  0A1F 09          	ret
0447+  0A20             
0448+  0A20             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0A20             ; PRINT 16BIT HEX INTEGER
0450+  0A20             ; integer value in reg B
0451+  0A20             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0452+  0A20             print_u16x:
0453+  0A20 D7          	push a
0454+  0A21 D8          	push b
0455+  0A22 DD          	push bl
0456+  0A23 30          	mov bl, bh
0457+  0A24 07 56 08    	call itoa				; convert bh to char in A
0458+  0A27 2F          	mov bl, al				; save al
0459+  0A28 19 00       	mov al, 0
0460+  0A2A 05 03       	syscall sys_io				; display AH
0461+  0A2C 24          	mov ah, bl				; retrieve al
0462+  0A2D 19 00       	mov al, 0
0463+  0A2F 05 03       	syscall sys_io				; display AL
0464+  0A31             
0465+  0A31 EA          	pop bl
0466+  0A32 07 56 08    	call itoa				; convert bh to char in A
0467+  0A35 2F          	mov bl, al				; save al
0468+  0A36 19 00       	mov al, 0
0469+  0A38 05 03       	syscall sys_io				; display AH
0470+  0A3A 24          	mov ah, bl				; retrieve al
0471+  0A3B 19 00       	mov al, 0
0472+  0A3D 05 03       	syscall sys_io				; display AL
0473+  0A3F             
0474+  0A3F E5          	pop b
0475+  0A40 E4          	pop a
0476+  0A41 09          	ret
0477+  0A42             
0478+  0A42             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0A42             ; INPUT 16BIT HEX INTEGER
0480+  0A42             ; read 16bit integer into A
0481+  0A42             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0482+  0A42             scan_u16x:
0483+  0A42 F8 10 00    	enter 16
0484+  0A45 D8          	push b
0485+  0A46 DA          	push d
0486+  0A47             
0487+  0A47 FA F1 FF    	lea d, [bp + -15]
0488+  0A4A 07 96 08    	call gets				; get number
0489+  0A4D             
0490+  0A4D 32          	mov bl, [d]
0491+  0A4E 37          	mov bh, bl
0492+  0A4F 33 01 00    	mov bl, [d + 1]
0493+  0A52 07 44 08    	call atoi				; convert to int in AL
0494+  0A55 23          	mov ah, al				; move to AH
0495+  0A56             
0496+  0A56 33 02 00    	mov bl, [d + 2]
0497+  0A59 37          	mov bh, bl
0498+  0A5A 33 03 00    	mov bl, [d + 3]
0499+  0A5D 07 44 08    	call atoi				; convert to int in AL
0500+  0A60             
0501+  0A60 E7          	pop d
0502+  0A61 E5          	pop b
0503+  0A62 F9          	leave
0504+  0A63 09          	ret
0505+  0A64             
0506+  0A64             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0A64             ; PRINT 8bit HEX INTEGER
0508+  0A64             ; integer value in reg bl
0509+  0A64             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0510+  0A64             print_u8x:
0511+  0A64 D7          	push a
0512+  0A65 DD          	push bl
0513+  0A66             
0514+  0A66 07 56 08    	call itoa				; convert bl to char in A
0515+  0A69 2F          	mov bl, al				; save al
0516+  0A6A 19 00       	mov al, 0
0517+  0A6C 05 03       	syscall sys_io				; display AH
0518+  0A6E 24          	mov ah, bl				; retrieve al
0519+  0A6F 19 00       	mov al, 0
0520+  0A71 05 03       	syscall sys_io				; display AL
0521+  0A73             
0522+  0A73 EA          	pop bl
0523+  0A74 E4          	pop a
0524+  0A75 09          	ret
0525+  0A76             
0526+  0A76             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0A76             ; print 8bit decimal unsigned number
0528+  0A76             ; input number in AL
0529+  0A76             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0530+  0A76             print_u8d:
0531+  0A76 D7          	push a
0532+  0A77 D8          	push b
0533+  0A78             
0534+  0A78 22 00       	mov ah, 0
0535+  0A7A 26 64 00    	mov b, 100
0536+  0A7D AE          	div a, b
0537+  0A7E D8          	push b			; save remainder
0538+  0A7F B9 00       	cmp al, 0
0539+  0A81 C6 8B 0A    	je skip100
0540+  0A84 6A 30       	add al, $30
0541+  0A86 23          	mov ah, al
0542+  0A87 19 00       	mov al, 0
0543+  0A89 05 03       	syscall sys_io	; print coeff
0544+  0A8B             skip100:
0545+  0A8B E4          	pop a
0546+  0A8C 22 00       	mov ah, 0
0547+  0A8E 26 0A 00    	mov b, 10
0548+  0A91 AE          	div a, b
0549+  0A92 D8          	push b			; save remainder
0550+  0A93 B9 00       	cmp al, 0
0551+  0A95 C6 9F 0A    	je skip10
0552+  0A98 6A 30       	add al, $30
0553+  0A9A 23          	mov ah, al
0554+  0A9B 19 00       	mov al, 0
0555+  0A9D 05 03       	syscall sys_io	; print coeff
0556+  0A9F             skip10:
0557+  0A9F E4          	pop a
0558+  0AA0 1B          	mov al, bl
0559+  0AA1 6A 30       	add al, $30
0560+  0AA3 23          	mov ah, al
0561+  0AA4 19 00       	mov al, 0
0562+  0AA6 05 03       	syscall sys_io	; print coeff
0563+  0AA8 E5          	pop b
0564+  0AA9 E4          	pop a
0565+  0AAA 09          	ret
0566+  0AAB             
0567+  0AAB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0AAB             ; INPUT 8BIT HEX INTEGER
0569+  0AAB             ; read 8bit integer into AL
0570+  0AAB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  0AAB             scan_u8x:
0572+  0AAB F8 04 00    	enter 4
0573+  0AAE D8          	push b
0574+  0AAF DA          	push d
0575+  0AB0             
0576+  0AB0 FA FD FF    	lea d, [bp + -3]
0577+  0AB3 07 96 08    	call gets				; get number
0578+  0AB6             
0579+  0AB6 32          	mov bl, [d]
0580+  0AB7 37          	mov bh, bl
0581+  0AB8 33 01 00    	mov bl, [d + 1]
0582+  0ABB 07 44 08    	call atoi				; convert to int in AL
0583+  0ABE             
0584+  0ABE E7          	pop d
0585+  0ABF E5          	pop b
0586+  0AC0 F9          	leave
0587+  0AC1 09          	ret
0588+  0AC2             
0589+  0AC2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0590+  0AC2             ; input decimal number
0591+  0AC2             ; result in A
0592+  0AC2             ; 655'\0'
0593+  0AC2             ; low--------high
0594+  0AC2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0595+  0AC2             scan_u16d:
0596+  0AC2 F8 08 00    	enter 8
0597+  0AC5 E2          	push si
0598+  0AC6 D8          	push b
0599+  0AC7 D9          	push c
0600+  0AC8 DA          	push d
0601+  0AC9 FA F9 FF    	lea d, [bp +- 7]
0602+  0ACC 07 96 08    	call gets
0603+  0ACF 07 CC 07    	call strlen			; get string length in C
0604+  0AD2 7E          	dec c
0605+  0AD3 FD 4E       	mov si, d
0606+  0AD5 12          	mov a, c
0607+  0AD6 FD 99       	shl a
0608+  0AD8 3B 2C 08    	mov d, table_power
0609+  0ADB 59          	add d, a
0610+  0ADC 38 00 00    	mov c, 0
0611+  0ADF             mul_loop:
0612+  0ADF F6          	lodsb			; load ASCII to al
0613+  0AE0 B9 00       	cmp al, 0
0614+  0AE2 C6 F5 0A    	je mul_exit
0615+  0AE5 6F 30       	sub al, $30		; make into integer
0616+  0AE7 22 00       	mov ah, 0
0617+  0AE9 2A          	mov b, [d]
0618+  0AEA AC          	mul a, b			; result in B since it fits in 16bits
0619+  0AEB 11          	mov a, b
0620+  0AEC 28          	mov b, c
0621+  0AED 54          	add a, b
0622+  0AEE 39          	mov c, a
0623+  0AEF 63 02 00    	sub d, 2
0624+  0AF2 0A DF 0A    	jmp mul_loop
0625+  0AF5             mul_exit:
0626+  0AF5 12          	mov a, c
0627+  0AF6 E7          	pop d
0628+  0AF7 E6          	pop c
0629+  0AF8 E5          	pop b
0630+  0AF9 EF          	pop si
0631+  0AFA F9          	leave
0632+  0AFB 09          	ret
0049   0AFC             .include "ctype.asm"
0001+  0AFC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0AFC             ; ctype.s
0003+  0AFC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0AFC             
0005+  0AFC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0AFC             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0AFC             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0AFC             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0AFC             ;; characters are supported.
0010+  0AFC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0AFC             ;; isalnum 
0012+  0AFC             ;; isalpha 
0013+  0AFC             ;; islower 
0014+  0AFC             ;; isupper 
0015+  0AFC             ;; isdigit 
0016+  0AFC             ;; isxdigit
0017+  0AFC             ;; iscntrl 
0018+  0AFC             ;; isgraph 
0019+  0AFC             ;; isspace 
0020+  0AFC             ;; isblank 
0021+  0AFC             ;; isprint 
0022+  0AFC             ;; ispunct 
0023+  0AFC             ;; tolower 
0024+  0AFC             ;; toupper
0025+  0AFC             
0026+  0AFC             
0027+  0AFC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0AFC             ;; IS ALPHANUMERIC
0029+  0AFC             ;; sets ZF according with result
0030+  0AFC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0AFC             isalnum:
0032+  0AFC 07 19 0B    	call isalpha
0033+  0AFF C6 05 0B    	je isalnum_exit
0034+  0B02 07 06 0B    	call isdigit
0035+  0B05             isalnum_exit:
0036+  0B05 09          	ret	
0037+  0B06             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0B06             ;; IS DIGIT
0039+  0B06             ;; sets ZF according with result
0040+  0B06             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0B06             isdigit:
0042+  0B06 DB          	push al
0043+  0B07 B9 30       	cmp al, '0'
0044+  0B09 C8 15 0B    	jlu isdigit_false
0045+  0B0C B9 39       	cmp al, '9'
0046+  0B0E D1 15 0B    	jgu isdigit_false
0047+  0B11 87 00       	and al, 0	; set ZF
0048+  0B13 E8          	pop al
0049+  0B14 09          	ret
0050+  0B15             isdigit_false:
0051+  0B15 8B 01       	or al, 1	; clear ZF
0052+  0B17 E8          	pop al
0053+  0B18 09          	ret	
0054+  0B19             	
0055+  0B19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0B19             ;; IS ALPHA
0057+  0B19             ;; sets ZF according with result
0058+  0B19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0B19             isalpha:
0060+  0B19 DB          	push al
0061+  0B1A B9 5F       	cmp al, '_'
0062+  0B1C C6 3C 0B    	je isalpha_true
0063+  0B1F B9 2E       	cmp al, '.'
0064+  0B21 C6 3C 0B    	je isalpha_true
0065+  0B24 B9 41       	cmp al, 'A'
0066+  0B26 C8 38 0B    	jlu isalpha_false
0067+  0B29 B9 7A       	cmp al, 'z'
0068+  0B2B D1 38 0B    	jgu isalpha_false
0069+  0B2E B9 5A       	cmp al, 'Z'
0070+  0B30 D0 3C 0B    	jleu isalpha_true
0071+  0B33 B9 61       	cmp al, 'a'
0072+  0B35 C9 3C 0B    	jgeu isalpha_true
0073+  0B38             isalpha_false:
0074+  0B38 8B 01       	or al, 1	; clear ZF
0075+  0B3A E8          	pop al
0076+  0B3B 09          	ret
0077+  0B3C             isalpha_true:
0078+  0B3C 87 00       	and al, 0	; set ZF
0079+  0B3E E8          	pop al
0080+  0B3F 09          	ret
0081+  0B40             
0082+  0B40             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B40             ;; IS PATH-ALPHA
0084+  0B40             ;; sets ZF according with result
0085+  0B40             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B40             ispath:
0087+  0B40 DB          	push al
0088+  0B41 07 06 0B    	call isdigit
0089+  0B44 C6 6E 0B    	je ispath_true
0090+  0B47 B9 5F       	cmp al, '_'
0091+  0B49 C6 6E 0B    	je ispath_true
0092+  0B4C B9 2F       	cmp al, '/'
0093+  0B4E C6 6E 0B    	je ispath_true
0094+  0B51 B9 2E       	cmp al, '.'
0095+  0B53 C6 6E 0B    	je ispath_true
0096+  0B56 B9 41       	cmp al, 'A'
0097+  0B58 C8 6A 0B    	jlu ispath_false
0098+  0B5B B9 7A       	cmp al, 'z'
0099+  0B5D D1 6A 0B    	jgu ispath_false
0100+  0B60 B9 5A       	cmp al, 'Z'
0101+  0B62 D0 6E 0B    	jleu ispath_true
0102+  0B65 B9 61       	cmp al, 'a'
0103+  0B67 C9 6E 0B    	jgeu ispath_true
0104+  0B6A             ispath_false:
0105+  0B6A 8B 01       	or al, 1	; clear ZF
0106+  0B6C E8          	pop al
0107+  0B6D 09          	ret
0108+  0B6E             ispath_true:
0109+  0B6E 87 00       	and al, 0	; set ZF
0110+  0B70 E8          	pop al
0111+  0B71 09          	ret
0112+  0B72             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B72             ;; IS SPACE
0114+  0B72             ;; sets ZF according with result
0115+  0B72             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B72             isspace:
0117+  0B72 B9 20       	cmp al, $20		; ' '
0118+  0B74 C6 88 0B    	je isspace_exit
0119+  0B77 B9 09       	cmp al, $09		; '\t'
0120+  0B79 C6 88 0B    	je isspace_exit
0121+  0B7C B9 0A       	cmp al, $0A		; '\n'
0122+  0B7E C6 88 0B    	je isspace_exit
0123+  0B81 B9 0D       	cmp al, $0D		; '\r'
0124+  0B83 C6 88 0B    	je isspace_exit
0125+  0B86 B9 0B       	cmp al, $0B		; '\v'
0126+  0B88             isspace_exit:
0127+  0B88 09          	ret	
0128+  0B89             
0129+  0B89             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B89             ; TO LOWER
0131+  0B89             ; input in AL
0132+  0B89             ; output in AL
0133+  0B89             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B89             to_lower:
0135+  0B89 B9 5A       	cmp al, 'Z'
0136+  0B8B D1 90 0B    	jgu to_lower_ret
0137+  0B8E 6A 20       	add al, $20				; convert to lower case
0138+  0B90             to_lower_ret:
0139+  0B90 09          	ret
0140+  0B91             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B91             ; TO UPPER
0142+  0B91             ; input in AL
0143+  0B91             ; output in AL
0144+  0B91             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B91             to_upper:
0146+  0B91 B9 61       	cmp al, 'a'
0147+  0B93 C8 98 0B    	jlu to_upper_ret
0148+  0B96 6F 20       	sub al, $20			; convert to upper case
0149+  0B98             to_upper_ret:
0150+  0B98 09          	ret
0151+  0B99             
0050   0B99             
0051   0B99             
0052   0B99             transient_area:	
0053   0B99             
0054   0B99             .end
0055   0B99             
0056   0B99             
tasm: Number of errors = 0
