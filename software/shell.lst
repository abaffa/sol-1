0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0003   0000             ; SHELL
0004   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005   0000             
0006   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007   0000             ; SYSTEM CONSTANTS / EQUATIONS
0008   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0009   0000             STACK_BEGIN:	.equ $F7FF	; beginning of stack
0010   0000             
0011   0400             .org PROC_TEXT_ORG			; origin at 1024
0012   0400             
0013   0400             shell_main:	
0014   0400 FD 49 FF F7 	mov bp, STACK_BEGIN
0015   0404 FD 47 FF F7 	mov sp, STACK_BEGIN
0016   0408             
0017   0408 3B E9 08    	mov d, s_prompt_config
0018   040B 07 98 0D    	call puts
0019   040E             ; open config file
0020   040E             ; PATH=/usr/bin;
0021   040E             ; read PATH config entry
0022   040E 3B E3 08    	mov d, s_prompt_PATH
0023   0411 07 98 0D    	call puts
0024   0414 3B 9A 08    	mov d, s_etc_config				; '/etc/sh.conf'
0025   0417 FD 4D B8 08 	mov si, s_PATH					; config entry name is "PATH"
0026   041B FD 4F 0D 08 	mov di, PATH					; config value destination is the var that holds the PATH variable
0027   041F 07 E9 04    	call read_config	
0028   0422 3B 0D 08    	mov d, PATH
0029   0425 07 98 0D    	call puts
0030   0428             ; open config file
0031   0428             ; home = /usr/home/guest;
0032   0428             ; read home directory config entry
0033   0428 3B D2 08    	mov d, s_prompt_homedir
0034   042B 07 98 0D    	call puts
0035   042E 3B 9A 08    	mov d, s_etc_config				; '/etc/sh.conf'
0036   0431 FD 4D A7 08 	mov si, s_home					; config entry name is "home"
0037   0435 FD 4F 0D 07 	mov di, homedir					; config value destination is the var that holds the home directory path
0038   0439 07 E9 04    	call read_config	
0039   043C 3B 0D 07    	mov d, homedir
0040   043F 07 98 0D    	call puts
0041   0442             ; open config file
0042   0442             ; read manpage directory path
0043   0442 3B BD 08    	mov d, s_prompt_manpages
0044   0445 07 98 0D    	call puts
0045   0448 3B 9A 08    	mov d, s_etc_config				; '/etc/sh.conf'
0046   044B FD 4D B4 08 	mov si, s_man					; config entry name is "man"
0047   044F FD 4F 8D 07 	mov di, manpath				; config value destination is the var that holds the man pages directory path
0048   0453 07 E9 04    	call read_config
0049   0456 3B 8D 07    	mov d, manpath
0050   0459 07 98 0D    	call puts
0051   045C             
0052   045C 10 8D 08    	mov a, s_etc_profile
0053   045F 42 97 11    	mov [prog], a
0054   0462 07 32 05    	call cmd_ssh
0055   0465             
0056   0465             shell_L0:
0057   0465 3B 46 09    	mov d, s_sol1
0058   0468 07 98 0D    	call puts
0059   046B 19 12       	mov al, 18
0060   046D 05 04       	syscall sys_fileio				; print current path
0061   046F 3B 40 09    	mov d, s_hash
0062   0472 07 98 0D    	call puts
0063   0475 3B 50 09    	mov d, shell_input_buff
0064   0478 13          	mov a, d
0065   0479 42 97 11    	mov [prog], a			; reset tokenizer buffer pointer
0066   047C 07 65 0C    	call gets						; get command
0067   047F 07 85 04    	call cmd_parser
0068   0482 0A 65 04    	jmp shell_L0
0069   0485             
0070   0485             cmd_parser:
0071   0485 07 F8 0F    	call get_token					; get command into tokstr
0072   0488 FD 4F C8 06 	mov di, commands
0073   048C FD 10       	cla
0074   048E 42 52 0B    	mov [parser_index], a		; reset commands index
0075   0491             parser_L0:
0076   0491 FD 4D 9B 11 	mov si, tokstr
0077   0495 07 AB 0B    	call strcmp
0078   0498 C6 C0 04    	je parser_cmd_equal
0079   049B             parser_L0_L0:
0080   049B FC 00 00    	lea d, [di + 0]
0081   049E BD 00       	cmp byte[d], 0
0082   04A0 C6 A9 04    	je parser_L0_L0_exit			; run through the keyword until finding NULL
0083   04A3 D4 01 00    	add di, 1
0084   04A6 0A 9B 04    	jmp parser_L0_L0
0085   04A9             parser_L0_L0_exit:
0086   04A9 D4 01 00    	add di, 1				; then skip NULL byte at the end 
0087   04AC 14 52 0B    	mov a, [parser_index]
0088   04AF 53 02 00    	add a, 2
0089   04B2 42 52 0B    	mov [parser_index], a			; increase commands table index
0090   04B5 FC 00 00    	lea d, [di + 0]
0091   04B8 BD 00       	cmp byte[d], 0
0092   04BA C6 DF 04    	je parser_cmd_not_found
0093   04BD 0A 91 04    	jmp parser_L0
0094   04C0             parser_cmd_equal:
0095   04C0 10 00 0D    	mov a, $0D00
0096   04C3 05 03       	syscall sys_io				; print carriage return
0097   04C5 14 52 0B    	mov a, [parser_index]			; get the keyword pointer
0098   04C8 FD 07 FB 06 	call [a + keyword_ptrs]		; execute command
0099   04CC 10 00 0D    	mov a, $0D00
0100   04CF 05 03       	syscall sys_io				; print carriage return
0101   04D1             parser_retry:
0102   04D1 07 F8 0F    	call get_token
0103   04D4 BC 9A 11 06 	cmp byte[tok], TOK_SEMI
0104   04D8 C6 85 04    	je cmd_parser
0105   04DB 07 7E 11    	call putback
0106   04DE 09          	ret
0107   04DF             parser_cmd_not_found:
0108   04DF 07 7E 11    	call putback
0109   04E2 07 D9 05    	call cmd_exec			; execute as file/program
0110   04E5 0A D1 04    	jmp parser_retry		; check for more commands
0111   04E8 09          	ret
0112   04E9             
0113   04E9             ; inputs:
0114   04E9             ; D = filename ptr
0115   04E9             ; SI = entry name ptr
0116   04E9             ; DI = output value string ptr
0117   04E9             read_config:
0118   04E9 E3          	push di
0119   04EA E2          	push si
0120   04EB FD 4F 9B 15 	mov di, shell_transient_area
0121   04EF 19 14       	mov al, 20
0122   04F1 05 04       	syscall sys_fileio				; read entire config file
0123   04F3 10 9B 15    	mov a, shell_transient_area
0124   04F6 42 97 11    	mov [prog], a
0125   04F9 EF          	pop si
0126   04FA             read_config_L0:
0127   04FA 07 F8 0F    	call get_token
0128   04FD BC 9A 11 14 	cmp byte[tok], TOK_END
0129   0501 C6 2D 05    	je read_config_EOF
0130   0504 FD 4F 9B 11 	mov di, tokstr
0131   0508 07 AB 0B    	call strcmp
0132   050B C6 1B 05    	je read_config_found_entry
0133   050E             read_config_L0_L0:
0134   050E 07 F8 0F    	call get_token
0135   0511 BC 9A 11 06 	cmp byte[tok], TOK_SEMI
0136   0515 C6 FA 04    	je read_config_L0
0137   0518 0A 0E 05    	jmp read_config_L0_L0
0138   051B             read_config_found_entry:
0139   051B 07 F8 0F    	call get_token			; bypass '=' sign
0140   051E F0          	pop di
0141   051F 14 97 11    	mov a, [prog]
0142   0522 4D          	mov si, a
0143   0523             read_conf_L1:
0144   0523 F6          	lodsb
0145   0524 B9 3B       	cmp al, $3B				; ';'
0146   0526 C6 2E 05    	je read_config_EOF_2
0147   0529 F7          	stosb
0148   052A 0A 23 05    	jmp read_conf_L1
0149   052D             read_config_EOF:
0150   052D F0          	pop di
0151   052E             read_config_EOF_2:
0152   052E 19 00       	mov al, 0
0153   0530 F7          	stosb					; terminate value with NULL
0154   0531 09          	ret
0155   0532             
0156   0532             
0157   0532             cmd_ssh:
0158   0532 07 A1 0F    	call get_path
0159   0535 3B 9B 11    	mov d, tokstr
0160   0538 FD 4F 9B 15 	mov di, shell_transient_area
0161   053C 19 14       	mov al, 20
0162   053E 05 04       	syscall sys_fileio				; read textfile 
0163   0540             	
0164   0540 3B 9B 15    	mov d, shell_transient_area
0165   0543 13          	mov a, d
0166   0544 42 97 11    	mov [prog], a			; reset tokenizer buffer pointer
0167   0547 07 85 04    	call cmd_parser
0168   054A             
0169   054A 07 45 0D    	call printnl
0170   054D 09          	ret
0171   054E             	
0172   054E             ; ************************************************************
0173   054E             ; GET HEX FILE
0174   054E             ; di = destination address
0175   054E             ; return length in bytes in C
0176   054E             ; ************************************************************
0177   054E             load_hex:
0178   054E D2          	push bp
0179   054F 9B          	mov bp, sp
0180   0550 D7          	push a
0181   0551 D8          	push b
0182   0552 DA          	push d
0183   0553 E2          	push si
0184   0554 E3          	push di
0185   0555 52 00 60    	sub sp, $6000				; string data block
0186   0558 38 00 00    	mov c, 0
0187   055B             	
0188   055B 48          	mov a, sp
0189   055C 77          	inc a
0190   055D 3C          	mov d, a				; start of string data block
0191   055E 07 65 0C    	call gets				; get program string
0192   0561 4D          	mov si, a
0193   0562             load_hex_loop:
0194   0562 F6          	lodsb					; load from [SI] to AL
0195   0563 B9 00       	cmp al, 0				; check if ASCII 0
0196   0565 C6 73 05    	jz load_hex_ret
0197   0568 36          	mov bh, al
0198   0569 F6          	lodsb
0199   056A 2F          	mov bl, al
0200   056B 07 13 0C    	call atoi				; convert ASCII byte in B to int (to AL)
0201   056E F7          	stosb					; store AL to [DI]
0202   056F 78          	inc c
0203   0570 0A 62 05    	jmp load_hex_loop
0204   0573             load_hex_ret:
0205   0573 51 00 60    	add sp, $6000
0206   0576 F0          	pop di
0207   0577 EF          	pop si
0208   0578 E7          	pop d
0209   0579 E5          	pop b
0210   057A E4          	pop a
0211   057B 9C          	mov sp, bp
0212   057C F1          	pop bp
0213   057D 09          	ret
0214   057E             
0215   057E             cmd_setdate:
0216   057E 19 01       	mov al, 1			; set datetime
0217   0580 05 07       	syscall sys_datetime	
0218   0582 09          	ret	
0219   0583             	
0220   0583             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0221   0583             ;; FILE SYSTEM DATA
0222   0583             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0223   0583             ; infor for : IDE SERVICES INTERRUPT
0224   0583             ; al = option
0225   0583             ; IDE read/write sector
0226   0583             ; 512 bytes
0227   0583             ; user buffer pointer in D
0228   0583             ; AH = number of sectors
0229   0583             ; CB = LBA bytes 3..0	
0230   0583             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231   0583             ;; FILE SYSTEM DATA STRUCTURE
0232   0583             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0233   0583             ; for a directory we have the header first, followed by metadata
0234   0583             ; header 1 sector (512 bytes)
0235   0583             ; metadata 1 sector (512 bytes)
0236   0583             ; HEADER ENTRIES:
0237   0583             ; filename (64)
0238   0583             ; parent dir LBA (2) -  to be used for faster backwards navigation...
0239   0583             ;
0240   0583             ; metadata entries:
0241   0583             ; filename (24)
0242   0583             ; attributes (1)
0243   0583             ; LBA (2)
0244   0583             ; size (2)
0245   0583             ; day (1)
0246   0583             ; month (1)
0247   0583             ; year (1)
0248   0583             ; packet size = 32 bytes
0249   0583             ;
0250   0583             ; first directory on disk is the root directory '/'
0251   0583             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0252   0583             ;; FILE SYSTEM DISK FORMATTING
0253   0583             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0254   0583             ; writes FST_TOTAL_SECTORS + FS_NBR_FILES disk sectors  with 0's
0255   0583             ; this is the file system table formating
0256   0583             cmd_mkfs:
0257   0583 19 00       	mov al, 0
0258   0585 05 04       	syscall sys_fileio
0259   0587 09          	ret
0260   0588             
0261   0588             
0262   0588             
0263   0588             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0264   0588             ;; parse path
0265   0588             ;; 
0266   0588             ;;
0267   0588             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0268   0588             
0269   0588             
0270   0588             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0271   0588             ;; CD
0272   0588             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0273   0588             ; search for given directory inside current dir
0274   0588             ; if found, read its LBA, and switch directories
0275   0588             ; example:	cd /usr/bin; ls
0276   0588             ; 			cd /usr/bin;
0277   0588             ;			cd /usr/bin
0278   0588             cmd_cd:
0279   0588 07 F8 0F    	call get_token
0280   058B 1D 9A 11    	mov al, [tok]
0281   058E B9 14       	cmp al, TOK_END
0282   0590 C6 B6 05    	je cmd_cd_gotohome
0283   0593 B9 06       	cmp al, TOK_SEMI
0284   0595 C6 B6 05    	je cmd_cd_gotohome
0285   0598 B9 08       	cmp al, TOK_TILDE
0286   059A C6 B6 05    	je cmd_cd_gotohome
0287   059D 07 7E 11    	call putback
0288   05A0 07 A1 0F    	call get_path		; get the path for the cd command
0289   05A3             cmd_cd_syscall:
0290   05A3 3B 9B 11    	mov d, tokstr
0291   05A6 19 13       	mov al, 19
0292   05A8 05 04       	syscall sys_fileio	; get dirID in A
0293   05AA AF FF FF    	cmp a, $FFFF
0294   05AD C6 C7 05    	je cmd_cd_fail
0295   05B0 27          	mov b, a
0296   05B1 19 03       	mov al, 3
0297   05B3 05 04       	syscall sys_fileio	; set dir to B
0298   05B5 09          	ret
0299   05B6             cmd_cd_gotohome:
0300   05B6 07 7E 11    	call putback
0301   05B9 FD 4D 0D 07 	mov si, homedir
0302   05BD FD 4F 9B 11 	mov di, tokstr
0303   05C1 07 C0 0B    	call strcpy
0304   05C4 0A A3 05    	jmp cmd_cd_syscall
0305   05C7             cmd_cd_fail:
0306   05C7 09          	ret
0307   05C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0308   05C8             ;; pad string to 32 chars
0309   05C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0310   05C8             ; count in C
0311   05C8             padding:
0312   05C8 D7          	push a
0313   05C9 10 20 00    	mov a, 32
0314   05CC 28          	mov b, c
0315   05CD 60          	sub a, b
0316   05CE 39          	mov c, a
0317   05CF             padding_L1:
0318   05CF 22 20       	mov ah, $20
0319   05D1 07 5E 0C    	call putchar
0320   05D4 A9 CF 05    	loopc padding_L1
0321   05D7 E4          	pop a
0322   05D8 09          	ret
0323   05D9             ; file structure:
0324   05D9             ; 512 bytes header
0325   05D9             ; header used to tell whether the block is free
0326   05D9             
0327   05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0328   05D9             ;; EXEC/OPEN PROGRAM/FILE
0329   05D9             ;; 'filename' maps to '/usr/bin/filename'
0330   05D9             ;; './file' or '/a/directory/file' loads a file directly
0331   05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0332   05D9             cmd_exec:
0333   05D9 BC 9A 11 14 	cmp byte[tok], TOK_END
0334   05DD C6 63 06    	je cmd_exec_ret		; check for NULL input
0335   05E0 07 A1 0F    	call get_path		; get file path 
0336   05E3 14 97 11    	mov a, [prog]
0337   05E6 D7          	push a				; save argument pointer
0338   05E7 FD 4D 9B 11 	mov si, tokstr
0339   05EB FD 4F 9B 12 	mov di, temp_data1
0340   05EF 07 C0 0B    	call strcpy			; copy filename for later
0341   05F2 BC 9B 11 2F 	cmp byte[tokstr], '/'	; check first character of path
0342   05F6 C6 54 06    	je cmd_exec_abs
0343   05F9 BC 9B 11 2E 	cmp byte[tokstr], '.'	; check first character of path
0344   05FD C6 54 06    	je cmd_exec_abs
0345   0600 10 0D 08    	mov a, PATH
0346   0603 42 97 11    	mov [prog], a		; set token pointer to $PATH beginning
0347   0606             cmd_exec_L0:
0348   0606 07 A1 0F    	call get_path		; get a path option
0349   0609 FD 4D 9B 11 	mov si, tokstr
0350   060D FD 4F 9B 13 	mov di, temp_data
0351   0611 07 C0 0B    	call strcpy			; firstly, form address from one of the '$PATH' addresses
0352   0614 FD 4D 44 09 	mov si, s_fslash
0353   0618 FD 4F 9B 13 	mov di, temp_data
0354   061C 07 CE 0B    	call strcat			; add '/' in between $PATH component and filename
0355   061F FD 4D 9B 12 	mov si, temp_data1
0356   0623 FD 4F 9B 13 	mov di, temp_data
0357   0627 07 CE 0B    	call strcat			; now glue the given filename to the total path
0358   062A 3B 9B 13    	mov d, temp_data
0359   062D 19 15       	mov al, 21
0360   062F 05 04       	syscall sys_fileio	; now we check whether such a file exists. success code is given in A. if 0, file does not exist
0361   0631 AF 00 00    	cmp a, 0
0362   0634 C7 44 06    	jne cmd_exec_PATH_exists
0363   0637 07 F8 0F    	call get_token
0364   063A BC 9A 11 06 	cmp byte[tok], TOK_SEMI
0365   063E C6 54 06    	je cmd_exec_abs		; if file not found as $PATH/filename, then try to load it without using $PATH
0366   0641 0A 06 06    	jmp cmd_exec_L0		; if not ';' at the end, then token must be a separator. so try another path
0367   0644             cmd_exec_PATH_exists:
0368   0644 E4          	pop a				; retrieve token pointer which points to the arguments given
0369   0645 42 97 11    	mov [prog], a
0370   0648 07 6D 0F    	call get_arg		; if however, $PATH/filename was found, then we execute it
0371   064B 26 9B 11    	mov b, tokstr
0372   064E 3B 9B 13    	mov d, temp_data
0373   0651 05 05       	syscall sys_fork
0374   0653 09          	ret
0375   0654             cmd_exec_abs:	; execute as absolute path
0376   0654 E4          	pop a
0377   0655 42 97 11    	mov [prog], a
0378   0658 07 6D 0F    	call get_arg
0379   065B 26 9B 11    	mov b, tokstr
0380   065E 3B 9B 12    	mov d, temp_data1	;original filename
0381   0661 05 05       	syscall sys_fork
0382   0663             cmd_exec_ret:
0383   0663 09          	ret
0384   0664             
0385   0664             
0386   0664             cmd_shutdown:
0387   0664 19 01       	mov al, 1
0388   0666 05 02       	syscall sys_IDE
0389   0668 FF          	halt
0390   0669 09          	ret
0391   066A             
0392   066A             cmd_reboot:
0393   066A 3B 15 09    	mov d, s_rebooting
0394   066D 07 98 0D    	call puts
0395   0670 05 08       	syscall sys_reboot
0396   0672             
0397   0672             cmd_drtoggle:
0398   0672 0C          	lodstat
0399   0673 2F          	mov bl, al
0400   0674 FD 87 DF    	and bl, %11011111
0401   0677 87 20       	and al, %00100000
0402   0679 8F 20       	xor al, %00100000
0403   067B 8C          	or al, bl
0404   067C 0D          	stostat
0405   067D             	
0406   067D 09          	ret
0407   067E             
0408   067E             cmd_man:
0409   067E 3B 26 09    	mov d, s_telnet_clear
0410   0681 07 98 0D    	call puts
0411   0684 FD 4D 8D 07 	mov si, manpath
0412   0688 FD 4F 9B 13 	mov di, temp_data
0413   068C 07 C0 0B    	call strcpy				; complete path with command name
0414   068F FD 4D 44 09 	mov si, s_fslash
0415   0693 FD 4F 9B 13 	mov di, temp_data
0416   0697 07 CE 0B    	call strcat				; add '/' to the end
0417   069A 07 F8 0F    	call get_token
0418   069D FD 4D 9B 11 	mov si, tokstr
0419   06A1 FD 4F 9B 13 	mov di, temp_data
0420   06A5 07 CE 0B    	call strcat				; complete path with command name
0421   06A8 3B 9B 13    	mov d, temp_data
0422   06AB FD 4F 9B 15 	mov di, shell_transient_area
0423   06AF 19 14       	mov al, 20
0424   06B1 05 04       	syscall sys_fileio
0425   06B3 3B 9B 15    	mov d, shell_transient_area
0426   06B6 07 98 0D    	call puts
0427   06B9 07 45 0D    	call printnl
0428   06BC             cmd_man_fail:
0429   06BC 09          	ret
0430   06BD             
0431   06BD             cmd_fg:
0432   06BD 07 F8 0F    	call get_token
0433   06C0 1D 9B 11    	mov al, [tokstr]
0434   06C3 6F 30       	sub al, $30
0435   06C5 05 0A       	syscall sys_resumeproc
0436   06C7 09          	ret
0437   06C8             
0438   06C8 6D 6B 66 73 commands:		.db "mkfs", 0
0438   06CC 00 
0439   06CD 63 64 00    				.db "cd", 0
0440   06D0 73 64 61 74 				.db "sdate", 0
0440   06D4 65 00 
0441   06D6 72 65 62 6F 				.db "reboot", 0
0441   06DA 6F 74 00 
0442   06DD 73 68 75 74 				.db "shutdown", 0
0442   06E1 64 6F 77 6E 
0442   06E5 00 
0443   06E6 64 72 74 6F 				.db "drtoggle", 0
0443   06EA 67 67 6C 65 
0443   06EE 00 
0444   06EF 6D 61 6E 00 				.db "man", 0
0445   06F3 66 67 00    				.db "fg", 0
0446   06F6 73 73 68 00 				.db "ssh", 0
0447   06FA 00          				.db 0
0448   06FB             
0449   06FB 83 05       keyword_ptrs:	.dw cmd_mkfs
0450   06FD 88 05       				.dw cmd_cd
0451   06FF 7E 05       				.dw cmd_setdate
0452   0701 6A 06       				.dw cmd_reboot
0453   0703 64 06       				.dw cmd_shutdown
0454   0705 72 06       				.dw cmd_drtoggle
0455   0707 7E 06       				.dw cmd_man
0456   0709 BD 06       				.dw cmd_fg
0457   070B 32 05       				.dw cmd_ssh
0458   070D             
0459   070D 00 00 00 00 homedir:		.fill 128, 0
0459   0711 00 00 00 00 
0459   0715 00 00 00 00 
0459   0719 00 00 00 00 
0459   071D 00 00 00 00 
0459   0721 00 00 00 00 
0459   0725 00 00 00 00 
0459   0729 00 00 00 00 
0459   072D 00 00 00 00 
0459   0731 00 00 00 00 
0459   0735 00 00 00 00 
0459   0739 00 00 00 00 
0459   073D 00 00 00 00 
0459   0741 00 00 00 00 
0459   0745 00 00 00 00 
0459   0749 00 00 00 00 
0459   074D 00 00 00 00 
0459   0751 00 00 00 00 
0459   0755 00 00 00 00 
0459   0759 00 00 00 00 
0459   075D 00 00 00 00 
0459   0761 00 00 00 00 
0459   0765 00 00 00 00 
0459   0769 00 00 00 00 
0459   076D 00 00 00 00 
0459   0771 00 00 00 00 
0459   0775 00 00 00 00 
0459   0779 00 00 00 00 
0459   077D 00 00 00 00 
0459   0781 00 00 00 00 
0459   0785 00 00 00 00 
0459   0789 00 00 00 00 
0460   078D 00 00 00 00 manpath:		.fill 128, 0		; man path
0460   0791 00 00 00 00 
0460   0795 00 00 00 00 
0460   0799 00 00 00 00 
0460   079D 00 00 00 00 
0460   07A1 00 00 00 00 
0460   07A5 00 00 00 00 
0460   07A9 00 00 00 00 
0460   07AD 00 00 00 00 
0460   07B1 00 00 00 00 
0460   07B5 00 00 00 00 
0460   07B9 00 00 00 00 
0460   07BD 00 00 00 00 
0460   07C1 00 00 00 00 
0460   07C5 00 00 00 00 
0460   07C9 00 00 00 00 
0460   07CD 00 00 00 00 
0460   07D1 00 00 00 00 
0460   07D5 00 00 00 00 
0460   07D9 00 00 00 00 
0460   07DD 00 00 00 00 
0460   07E1 00 00 00 00 
0460   07E5 00 00 00 00 
0460   07E9 00 00 00 00 
0460   07ED 00 00 00 00 
0460   07F1 00 00 00 00 
0460   07F5 00 00 00 00 
0460   07F9 00 00 00 00 
0460   07FD 00 00 00 00 
0460   0801 00 00 00 00 
0460   0805 00 00 00 00 
0460   0809 00 00 00 00 
0461   080D 00 00 00 00 PATH:			.fill 128, 0		; $PATH environment variable (for now just one path)
0461   0811 00 00 00 00 
0461   0815 00 00 00 00 
0461   0819 00 00 00 00 
0461   081D 00 00 00 00 
0461   0821 00 00 00 00 
0461   0825 00 00 00 00 
0461   0829 00 00 00 00 
0461   082D 00 00 00 00 
0461   0831 00 00 00 00 
0461   0835 00 00 00 00 
0461   0839 00 00 00 00 
0461   083D 00 00 00 00 
0461   0841 00 00 00 00 
0461   0845 00 00 00 00 
0461   0849 00 00 00 00 
0461   084D 00 00 00 00 
0461   0851 00 00 00 00 
0461   0855 00 00 00 00 
0461   0859 00 00 00 00 
0461   085D 00 00 00 00 
0461   0861 00 00 00 00 
0461   0865 00 00 00 00 
0461   0869 00 00 00 00 
0461   086D 00 00 00 00 
0461   0871 00 00 00 00 
0461   0875 00 00 00 00 
0461   0879 00 00 00 00 
0461   087D 00 00 00 00 
0461   0881 00 00 00 00 
0461   0885 00 00 00 00 
0461   0889 00 00 00 00 
0462   088D             
0463   088D 2F 65 74 63 s_etc_profile:	.db "/etc/profile", 0
0463   0891 2F 70 72 6F 
0463   0895 66 69 6C 65 
0463   0899 00 
0464   089A 2F 65 74 63 s_etc_config:	.db "/etc/sh.conf", 0
0464   089E 2F 73 68 2E 
0464   08A2 63 6F 6E 66 
0464   08A6 00 
0465   08A7 68 6F 6D 65 s_home:			.db "home", 0
0465   08AB 00 
0466   08AC 77 65 6C 63 s_welcome:		.db "welcome", 0
0466   08B0 6F 6D 65 00 
0467   08B4 6D 61 6E 00 s_man:			.db "man", 0
0468   08B8 50 41 54 48 s_PATH:			.db "PATH", 0
0468   08BC 00 
0469   08BD             
0470   08BD 0A 6D 61 6E s_prompt_manpages:	.db "\nmanpages directory=", 0
0470   08C1 70 61 67 65 
0470   08C5 73 20 64 69 
0470   08C9 72 65 63 74 
0470   08CD 6F 72 79 3D 
0470   08D1 00 
0471   08D2 0A 68 6F 6D s_prompt_homedir:	.db "\nhome directory=", 0
0471   08D6 65 20 64 69 
0471   08DA 72 65 63 74 
0471   08DE 6F 72 79 3D 
0471   08E2 00 
0472   08E3 50 41 54 48 s_prompt_PATH:		.db "PATH=", 0
0472   08E7 3D 00 
0473   08E9 0A 72 65 61 s_prompt_config:	.db "\nreading \'/etc/sh.conf\' configuration file\n", 0
0473   08ED 64 69 6E 67 
0473   08F1 20 27 2F 65 
0473   08F5 74 63 2F 73 
0473   08F9 68 2E 63 6F 
0473   08FD 6E 66 27 20 
0473   0901 63 6F 6E 66 
0473   0905 69 67 75 72 
0473   0909 61 74 69 6F 
0473   090D 6E 20 66 69 
0473   0911 6C 65 0A 00 
0474   0915             
0475   0915 1B 5B 32 4A s_rebooting: 	.db 27, "[2J", 27, "[H", "rebooting", 0
0475   0919 1B 5B 48 72 
0475   091D 65 62 6F 6F 
0475   0921 74 69 6E 67 
0475   0925 00 
0476   0926 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0476   092A 1B 5B 48 00 
0477   092E 25 20 00    s_dataentry:	.db "% ", 0
0478   0931 0A 73 79 6E s_syntax_err:	.db "\nsyntax error\n", 0
0478   0935 74 61 78 20 
0478   0939 65 72 72 6F 
0478   093D 72 0A 00 
0479   0940 20 23 20 00 s_hash:			.db " # ", 0
0480   0944 2F 00       s_fslash:		.db "/", 0
0481   0946 53 6F 6C 61 s_sol1:			.db "Solarium:", 0
0481   094A 72 69 75 6D 
0481   094E 3A 00 
0482   0950             ; shell variables
0483   0950 00 00 00 00 shell_input_buff:	.fill 512, 0
0483   0954 00 00 00 00 
0483   0958 00 00 00 00 
0483   095C 00 00 00 00 
0483   0960 00 00 00 00 
0483   0964 00 00 00 00 
0483   0968 00 00 00 00 
0483   096C 00 00 00 00 
0483   0970 00 00 00 00 
0483   0974 00 00 00 00 
0483   0978 00 00 00 00 
0483   097C 00 00 00 00 
0483   0980 00 00 00 00 
0483   0984 00 00 00 00 
0483   0988 00 00 00 00 
0483   098C 00 00 00 00 
0483   0990 00 00 00 00 
0483   0994 00 00 00 00 
0483   0998 00 00 00 00 
0483   099C 00 00 00 00 
0483   09A0 00 00 00 00 
0483   09A4 00 00 00 00 
0483   09A8 00 00 00 00 
0483   09AC 00 00 00 00 
0483   09B0 00 00 00 00 
0483   09B4 00 00 00 00 
0483   09B8 00 00 00 00 
0483   09BC 00 00 00 00 
0483   09C0 00 00 00 00 
0483   09C4 00 00 00 00 
0483   09C8 00 00 00 00 
0483   09CC 00 00 00 00 
0483   09D0 00 00 00 00 
0483   09D4 00 00 00 00 
0483   09D8 00 00 00 00 
0483   09DC 00 00 00 00 
0483   09E0 00 00 00 00 
0483   09E4 00 00 00 00 
0483   09E8 00 00 00 00 
0483   09EC 00 00 00 00 
0483   09F0 00 00 00 00 
0483   09F4 00 00 00 00 
0483   09F8 00 00 00 00 
0483   09FC 00 00 00 00 
0483   0A00 00 00 00 00 
0483   0A04 00 00 00 00 
0483   0A08 00 00 00 00 
0483   0A0C 00 00 00 00 
0483   0A10 00 00 00 00 
0483   0A14 00 00 00 00 
0483   0A18 00 00 00 00 
0483   0A1C 00 00 00 00 
0483   0A20 00 00 00 00 
0483   0A24 00 00 00 00 
0483   0A28 00 00 00 00 
0483   0A2C 00 00 00 00 
0483   0A30 00 00 00 00 
0483   0A34 00 00 00 00 
0483   0A38 00 00 00 00 
0483   0A3C 00 00 00 00 
0483   0A40 00 00 00 00 
0483   0A44 00 00 00 00 
0483   0A48 00 00 00 00 
0483   0A4C 00 00 00 00 
0483   0A50 00 00 00 00 
0483   0A54 00 00 00 00 
0483   0A58 00 00 00 00 
0483   0A5C 00 00 00 00 
0483   0A60 00 00 00 00 
0483   0A64 00 00 00 00 
0483   0A68 00 00 00 00 
0483   0A6C 00 00 00 00 
0483   0A70 00 00 00 00 
0483   0A74 00 00 00 00 
0483   0A78 00 00 00 00 
0483   0A7C 00 00 00 00 
0483   0A80 00 00 00 00 
0483   0A84 00 00 00 00 
0483   0A88 00 00 00 00 
0483   0A8C 00 00 00 00 
0483   0A90 00 00 00 00 
0483   0A94 00 00 00 00 
0483   0A98 00 00 00 00 
0483   0A9C 00 00 00 00 
0483   0AA0 00 00 00 00 
0483   0AA4 00 00 00 00 
0483   0AA8 00 00 00 00 
0483   0AAC 00 00 00 00 
0483   0AB0 00 00 00 00 
0483   0AB4 00 00 00 00 
0483   0AB8 00 00 00 00 
0483   0ABC 00 00 00 00 
0483   0AC0 00 00 00 00 
0483   0AC4 00 00 00 00 
0483   0AC8 00 00 00 00 
0483   0ACC 00 00 00 00 
0483   0AD0 00 00 00 00 
0483   0AD4 00 00 00 00 
0483   0AD8 00 00 00 00 
0483   0ADC 00 00 00 00 
0483   0AE0 00 00 00 00 
0483   0AE4 00 00 00 00 
0483   0AE8 00 00 00 00 
0483   0AEC 00 00 00 00 
0483   0AF0 00 00 00 00 
0483   0AF4 00 00 00 00 
0483   0AF8 00 00 00 00 
0483   0AFC 00 00 00 00 
0483   0B00 00 00 00 00 
0483   0B04 00 00 00 00 
0483   0B08 00 00 00 00 
0483   0B0C 00 00 00 00 
0483   0B10 00 00 00 00 
0483   0B14 00 00 00 00 
0483   0B18 00 00 00 00 
0483   0B1C 00 00 00 00 
0483   0B20 00 00 00 00 
0483   0B24 00 00 00 00 
0483   0B28 00 00 00 00 
0483   0B2C 00 00 00 00 
0483   0B30 00 00 00 00 
0483   0B34 00 00 00 00 
0483   0B38 00 00 00 00 
0483   0B3C 00 00 00 00 
0483   0B40 00 00 00 00 
0483   0B44 00 00 00 00 
0483   0B48 00 00 00 00 
0483   0B4C 00 00 00 00 
0484   0B50 00 00       shell_buff_ptr:		.dw 0
0485   0B52 00 00       parser_index: 		.dw 0
0486   0B54             
0487   0B54             .include "stdio.asm"
0001+  0B54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0B54             ; stdio.s
0003+  0B54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0B54             .include "string.asm"
0001++ 0B54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0B54             ; string.s
0003++ 0B54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0B54             
0005++ 0B54             
0006++ 0B54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0B54             ; strrev
0008++ 0B54             ; reverse a string
0009++ 0B54             ; D = string address
0010++ 0B54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0B54             ; 01234
0012++ 0B54             strrev:
0013++ 0B54 4B          	pusha
0014++ 0B55 07 9B 0B    	call strlen	; length in C
0015++ 0B58 12          	mov a, c
0016++ 0B59 AF 01 00    	cmp a, 1
0017++ 0B5C D0 76 0B    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0B5F 7D          	dec a
0019++ 0B60 FD 4E       	mov si, d	; beginning of string
0020++ 0B62 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0B64 59          	add d, a	; end of string
0022++ 0B65 12          	mov a, c
0023++ 0B66 FD 9B       	shr a		; divide by 2
0024++ 0B68 39          	mov c, a	; C now counts the steps
0025++ 0B69             strrev_L0:
0026++ 0B69 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0B6A F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0B6B 3E          	mov [d], al	; store left char into right side
0029++ 0B6C 1B          	mov al, bl
0030++ 0B6D F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0B6E 7E          	dec c
0032++ 0B6F 7F          	dec d
0033++ 0B70 C2 00 00    	cmp c, 0
0034++ 0B73 C7 69 0B    	jne strrev_L0
0035++ 0B76             strrev_end:
0036++ 0B76 4C          	popa
0037++ 0B77 09          	ret
0038++ 0B78             	
0039++ 0B78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0B78             ; strchr
0041++ 0B78             ; search string in D for char in AL
0042++ 0B78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0B78             strchr:
0044++ 0B78             strchr_L0:
0045++ 0B78 32          	mov bl, [d]
0046++ 0B79 C1 00       	cmp bl, 0
0047++ 0B7B C6 86 0B    	je strchr_end
0048++ 0B7E BA          	cmp al, bl
0049++ 0B7F C6 86 0B    	je strchr_end
0050++ 0B82 79          	inc d
0051++ 0B83 0A 78 0B    	jmp strchr_L0
0052++ 0B86             strchr_end:
0053++ 0B86 1B          	mov al, bl
0054++ 0B87 09          	ret
0055++ 0B88             
0056++ 0B88             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0B88             ; strstr
0058++ 0B88             ; find sub-string
0059++ 0B88             ; str1 in SI
0060++ 0B88             ; str2 in DI
0061++ 0B88             ; SI points to end of source string
0062++ 0B88             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0B88             strstr:
0064++ 0B88 DB          	push al
0065++ 0B89 DA          	push d
0066++ 0B8A E3          	push di
0067++ 0B8B             strstr_loop:
0068++ 0B8B F3          	cmpsb					; compare a byte of the strings
0069++ 0B8C C7 97 0B    	jne strstr_ret
0070++ 0B8F FC 00 00    	lea d, [di + 0]
0071++ 0B92 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0B94 C7 8B 0B    	jne strstr_loop				; equal chars but not at end
0073++ 0B97             strstr_ret:
0074++ 0B97 F0          	pop di
0075++ 0B98 E7          	pop d
0076++ 0B99 E8          	pop al
0077++ 0B9A 09          	ret
0078++ 0B9B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0B9B             ; length of null terminated string
0080++ 0B9B             ; result in C
0081++ 0B9B             ; pointer in D
0082++ 0B9B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0B9B             strlen:
0084++ 0B9B DA          	push d
0085++ 0B9C 38 00 00    	mov c, 0
0086++ 0B9F             strlen_L1:
0087++ 0B9F BD 00       	cmp byte [d], 0
0088++ 0BA1 C6 A9 0B    	je strlen_ret
0089++ 0BA4 79          	inc d
0090++ 0BA5 78          	inc c
0091++ 0BA6 0A 9F 0B    	jmp strlen_L1
0092++ 0BA9             strlen_ret:
0093++ 0BA9 E7          	pop d
0094++ 0BAA 09          	ret
0095++ 0BAB             
0096++ 0BAB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0BAB             ; STRCMP
0098++ 0BAB             ; compare two strings
0099++ 0BAB             ; str1 in SI
0100++ 0BAB             ; str2 in DI
0101++ 0BAB             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0BAB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0BAB             strcmp:
0104++ 0BAB DB          	push al
0105++ 0BAC DA          	push d
0106++ 0BAD E3          	push di
0107++ 0BAE E2          	push si
0108++ 0BAF             strcmp_loop:
0109++ 0BAF F3          	cmpsb					; compare a byte of the strings
0110++ 0BB0 C7 BB 0B    	jne strcmp_ret
0111++ 0BB3 FB FF FF    	lea d, [si +- 1]
0112++ 0BB6 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0BB8 C7 AF 0B    	jne strcmp_loop				; equal chars but not at end
0114++ 0BBB             strcmp_ret:
0115++ 0BBB EF          	pop si
0116++ 0BBC F0          	pop di
0117++ 0BBD E7          	pop d
0118++ 0BBE E8          	pop al
0119++ 0BBF 09          	ret
0120++ 0BC0             
0121++ 0BC0             
0122++ 0BC0             ; STRCPY
0123++ 0BC0             ; copy null terminated string from SI to DI
0124++ 0BC0             ; source in SI
0125++ 0BC0             ; destination in DI
0126++ 0BC0             strcpy:
0127++ 0BC0 E2          	push si
0128++ 0BC1 E3          	push di
0129++ 0BC2 DB          	push al
0130++ 0BC3             strcpy_L1:
0131++ 0BC3 F6          	lodsb
0132++ 0BC4 F7          	stosb
0133++ 0BC5 B9 00       	cmp al, 0
0134++ 0BC7 C7 C3 0B    	jne strcpy_L1
0135++ 0BCA             strcpy_end:
0136++ 0BCA E8          	pop al
0137++ 0BCB F0          	pop di
0138++ 0BCC EF          	pop si
0139++ 0BCD 09          	ret
0140++ 0BCE             
0141++ 0BCE             ; STRCAT
0142++ 0BCE             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0BCE             ; source in SI
0144++ 0BCE             ; destination in DI
0145++ 0BCE             strcat:
0146++ 0BCE E2          	push si
0147++ 0BCF E3          	push di
0148++ 0BD0 D7          	push a
0149++ 0BD1 DA          	push d
0150++ 0BD2 50          	mov a, di
0151++ 0BD3 3C          	mov d, a
0152++ 0BD4             strcat_goto_end_L1:
0153++ 0BD4 BD 00       	cmp byte[d], 0
0154++ 0BD6 C6 DD 0B    	je strcat_start
0155++ 0BD9 79          	inc d
0156++ 0BDA 0A D4 0B    	jmp strcat_goto_end_L1
0157++ 0BDD             strcat_start:
0158++ 0BDD FD 50       	mov di, d
0159++ 0BDF             strcat_L1:
0160++ 0BDF F6          	lodsb
0161++ 0BE0 F7          	stosb
0162++ 0BE1 B9 00       	cmp al, 0
0163++ 0BE3 C7 DF 0B    	jne strcat_L1
0164++ 0BE6             strcat_end:
0165++ 0BE6 E7          	pop d
0166++ 0BE7 E4          	pop a
0167++ 0BE8 F0          	pop di
0168++ 0BE9 EF          	pop si
0169++ 0BEA 09          	ret
0005+  0BEB             
0006+  0BEB 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0BEF 34 35 36 37 
0006+  0BF3 38 39 41 42 
0006+  0BF7 43 44 45 46 
0007+  0BFB             
0008+  0BFB 01 00       table_power:.dw 1
0009+  0BFD 0A 00       			.dw 10
0010+  0BFF 64 00       			.dw 100
0011+  0C01 E8 03       			.dw 1000
0012+  0C03 10 27       			.dw 10000
0013+  0C05             
0014+  0C05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  0C05             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  0C05             ; ASCII in BL
0017+  0C05             ; result in AL
0018+  0C05             ; ascii for F = 0100 0110
0019+  0C05             ; ascii for 9 = 0011 1001
0020+  0C05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  0C05             hex_ascii_encode:
0022+  0C05 1B          	mov al, bl
0023+  0C06 93 40       	test al, $40				; test if letter or number
0024+  0C08 C7 0E 0C    	jnz hex_letter
0025+  0C0B 87 0F       	and al, $0F				; get number
0026+  0C0D 09          	ret
0027+  0C0E             hex_letter:
0028+  0C0E 87 0F       	and al, $0F				; get letter
0029+  0C10 6A 09       	add al, 9
0030+  0C12 09          	ret
0031+  0C13             
0032+  0C13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  0C13             ; ATOI
0034+  0C13             ; 2 letter hex string in B
0035+  0C13             ; 8bit integer returned in AL
0036+  0C13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  0C13             atoi:
0038+  0C13 D8          	push b
0039+  0C14 07 05 0C    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  0C17 30          	mov bl, bh
0041+  0C18 DB          	push al					; save a
0042+  0C19 07 05 0C    	call hex_ascii_encode
0043+  0C1C EA          	pop bl	
0044+  0C1D FD 9E 04    	shl al, 4
0045+  0C20 8C          	or al, bl
0046+  0C21 E5          	pop b
0047+  0C22 09          	ret	
0048+  0C23             
0049+  0C23             
0050+  0C23             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0C23             ; printf
0052+  0C23             ; no need for explanations!
0053+  0C23             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  0C23             printf:
0055+  0C23 09          	ret
0056+  0C24             
0057+  0C24             
0058+  0C24             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0C24             ; scanf
0060+  0C24             ; no need for explanations!
0061+  0C24             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0C24             scanf:
0063+  0C24 09          	ret
0064+  0C25             
0065+  0C25             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0C25             ; ITOA
0067+  0C25             ; 8bit value in BL
0068+  0C25             ; 2 byte ASCII result in A
0069+  0C25             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  0C25             itoa:
0071+  0C25 DA          	push d
0072+  0C26 D8          	push b
0073+  0C27 A7 00       	mov bh, 0
0074+  0C29 FD A4 04    	shr bl, 4	
0075+  0C2C 74          	mov d, b
0076+  0C2D 1F EB 0B    	mov al, [d + s_hex_digits]
0077+  0C30 23          	mov ah, al
0078+  0C31             	
0079+  0C31 E5          	pop b
0080+  0C32 D8          	push b
0081+  0C33 A7 00       	mov bh, 0
0082+  0C35 FD 87 0F    	and bl, $0F
0083+  0C38 74          	mov d, b
0084+  0C39 1F EB 0B    	mov al, [d + s_hex_digits]
0085+  0C3C E5          	pop b
0086+  0C3D E7          	pop d
0087+  0C3E 09          	ret
0088+  0C3F             
0089+  0C3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0C3F             ; HEX STRING TO BINARY
0091+  0C3F             ; di = destination address
0092+  0C3F             ; si = source
0093+  0C3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0C3F             hex_to_int:
0095+  0C3F             hex_to_int_L1:
0096+  0C3F F6          	lodsb					; load from [SI] to AL
0097+  0C40 B9 00       	cmp al, 0				; check if ASCII 0
0098+  0C42 C6 4F 0C    	jz hex_to_int_ret
0099+  0C45 36          	mov bh, al
0100+  0C46 F6          	lodsb
0101+  0C47 2F          	mov bl, al
0102+  0C48 07 13 0C    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0C4B F7          	stosb					; store AL to [DI]
0104+  0C4C 0A 3F 0C    	jmp hex_to_int_L1
0105+  0C4F             hex_to_int_ret:
0106+  0C4F 09          	ret		
0107+  0C50             
0108+  0C50             
0109+  0C50             
0110+  0C50             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0C50             ; GETCHAR
0112+  0C50             ; char in ah
0113+  0C50             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0C50             getchar:
0115+  0C50 DB          	push al
0116+  0C51             getchar_retry:
0117+  0C51 FD 0C       	sti
0118+  0C53 19 01       	mov al, 1
0119+  0C55 05 03       	syscall sys_io			; receive in AH
0120+  0C57 B9 00       	cmp al, 0			; check if any char was receive
0121+  0C59 C6 51 0C    	je getchar_retry
0122+  0C5C E8          	pop al
0123+  0C5D 09          	ret
0124+  0C5E             
0125+  0C5E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0C5E             ; PUTCHAR
0127+  0C5E             ; char in ah
0128+  0C5E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0C5E             putchar:
0130+  0C5E D7          	push a
0131+  0C5F 19 00       	mov al, 0
0132+  0C61 05 03       	syscall sys_io			; char in AH
0133+  0C63 E4          	pop a
0134+  0C64 09          	ret
0135+  0C65             
0136+  0C65             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  0C65             ;; INPUT A STRING
0138+  0C65             ;; terminates with null
0139+  0C65             ;; pointer in D
0140+  0C65             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0C65             gets:
0142+  0C65 D7          	push a
0143+  0C66 DA          	push d
0144+  0C67             gets_loop:
0145+  0C67 FD 0C       	sti
0146+  0C69 19 01       	mov al, 1
0147+  0C6B 05 03       	syscall sys_io			; receive in AH
0148+  0C6D B9 00       	cmp al, 0				; check error code (AL)
0149+  0C6F C6 67 0C    	je gets_loop			; if no char received, retry
0150+  0C72             
0151+  0C72 76 1B       	cmp ah, 27
0152+  0C74 C6 95 0C    	je gets_telnet_escape
0153+  0C77 76 0A       	cmp ah, $0A				; LF
0154+  0C79 C6 EE 0C    	je gets_end
0155+  0C7C 76 0D       	cmp ah, $0D				; CR
0156+  0C7E C6 EE 0C    	je gets_end
0157+  0C81 76 5C       	cmp ah, $5C				; '\\'
0158+  0C83 C6 C5 0C    	je gets_escape
0159+  0C86             	
0160+  0C86 76 08       	cmp ah, $08			; check for backspace
0161+  0C88 C6 91 0C    	je gets_backspace
0162+  0C8B             
0163+  0C8B 1A          	mov al, ah
0164+  0C8C 3E          	mov [d], al
0165+  0C8D 79          	inc d
0166+  0C8E 0A 67 0C    	jmp gets_loop
0167+  0C91             gets_backspace:
0168+  0C91 7F          	dec d
0169+  0C92 0A 67 0C    	jmp gets_loop
0170+  0C95             gets_telnet_escape:
0171+  0C95 FD 0C       	sti
0172+  0C97 19 01       	mov al, 1
0173+  0C99 05 03       	syscall sys_io				; receive in AH without echo
0174+  0C9B B9 00       	cmp al, 0					; check error code (AL)
0175+  0C9D C6 95 0C    	je gets_telnet_escape		; if no char received, retry
0176+  0CA0 76 5B       	cmp ah, '['
0177+  0CA2 C7 67 0C    	jne gets_loop
0178+  0CA5             gets_telnet_escape_phase2:
0179+  0CA5 FD 0C       	sti
0180+  0CA7 19 01       	mov al, 1
0181+  0CA9 05 03       	syscall sys_io					; receive in AH without echo
0182+  0CAB B9 00       	cmp al, 0						; check error code (AL)
0183+  0CAD C6 A5 0C    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  0CB0 76 44       	cmp ah, 'D'
0185+  0CB2 C6 BD 0C    	je gets_left_arrow
0186+  0CB5 76 43       	cmp ah, 'C'
0187+  0CB7 C6 C1 0C    	je gets_right_arrow
0188+  0CBA 0A 67 0C    	jmp gets_loop
0189+  0CBD             gets_left_arrow:
0190+  0CBD 7F          	dec d
0191+  0CBE 0A 67 0C    	jmp gets_loop
0192+  0CC1             gets_right_arrow:
0193+  0CC1 79          	inc d
0194+  0CC2 0A 67 0C    	jmp gets_loop
0195+  0CC5             gets_escape:
0196+  0CC5 FD 0C       	sti
0197+  0CC7 19 01       	mov al, 1
0198+  0CC9 05 03       	syscall sys_io			; receive in AH
0199+  0CCB B9 00       	cmp al, 0				; check error code (AL)
0200+  0CCD C6 C5 0C    	je gets_escape			; if no char received, retry
0201+  0CD0 76 6E       	cmp ah, 'n'
0202+  0CD2 C6 E0 0C    	je gets_LF
0203+  0CD5 76 72       	cmp ah, 'r'
0204+  0CD7 C6 E7 0C    	je gets_CR
0205+  0CDA 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  0CDB 3E          	mov [d], al
0207+  0CDC 79          	inc d
0208+  0CDD 0A 67 0C    	jmp gets_loop
0209+  0CE0             gets_LF:
0210+  0CE0 19 0A       	mov al, $0A
0211+  0CE2 3E          	mov [d], al
0212+  0CE3 79          	inc d
0213+  0CE4 0A 67 0C    	jmp gets_loop
0214+  0CE7             gets_CR:
0215+  0CE7 19 0D       	mov al, $0D
0216+  0CE9 3E          	mov [d], al
0217+  0CEA 79          	inc d
0218+  0CEB 0A 67 0C    	jmp gets_loop
0219+  0CEE             gets_end:
0220+  0CEE 19 00       	mov al, 0
0221+  0CF0 3E          	mov [d], al				; terminate string
0222+  0CF1 E7          	pop d
0223+  0CF2 E4          	pop a
0224+  0CF3 09          	ret
0225+  0CF4             
0226+  0CF4             
0227+  0CF4             
0228+  0CF4             
0229+  0CF4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  0CF4             ;; INPUT TEXT
0231+  0CF4             ;; terminated with CTRL+D
0232+  0CF4             ;; pointer in D
0233+  0CF4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  0CF4             gettxt:
0235+  0CF4 D7          	push a
0236+  0CF5 DA          	push d
0237+  0CF6             gettxt_loop:
0238+  0CF6 19 01       	mov al, 1
0239+  0CF8 05 03       	syscall sys_io			; receive in AH
0240+  0CFA B9 00       	cmp al, 0				; check error code (AL)
0241+  0CFC C6 F6 0C    	je gettxt_loop		; if no char received, retry
0242+  0CFF 76 04       	cmp ah, 4			; EOT
0243+  0D01 C6 3F 0D    	je gettxt_end
0244+  0D04 76 08       	cmp ah, $08			; check for backspace
0245+  0D06 C6 3B 0D    	je gettxt_backspace
0246+  0D09 76 5C       	cmp ah, $5C				; '\\'
0247+  0D0B C6 14 0D    	je gettxt_escape
0248+  0D0E 1A          	mov al, ah
0249+  0D0F 3E          	mov [d], al
0250+  0D10 79          	inc d
0251+  0D11 0A F6 0C    	jmp gettxt_loop
0252+  0D14             gettxt_escape:
0253+  0D14 19 01       	mov al, 1
0254+  0D16 05 03       	syscall sys_io			; receive in AH
0255+  0D18 B9 00       	cmp al, 0				; check error code (AL)
0256+  0D1A C6 14 0D    	je gettxt_escape		; if no char received, retry
0257+  0D1D 76 6E       	cmp ah, 'n'
0258+  0D1F C6 2D 0D    	je gettxt_LF
0259+  0D22 76 72       	cmp ah, 'r'
0260+  0D24 C6 34 0D    	je gettxt_CR
0261+  0D27 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  0D28 3E          	mov [d], al
0263+  0D29 79          	inc d
0264+  0D2A 0A F6 0C    	jmp gettxt_loop
0265+  0D2D             gettxt_LF:
0266+  0D2D 19 0A       	mov al, $0A
0267+  0D2F 3E          	mov [d], al
0268+  0D30 79          	inc d
0269+  0D31 0A F6 0C    	jmp gettxt_loop
0270+  0D34             gettxt_CR:
0271+  0D34 19 0D       	mov al, $0D
0272+  0D36 3E          	mov [d], al
0273+  0D37 79          	inc d
0274+  0D38 0A F6 0C    	jmp gettxt_loop
0275+  0D3B             gettxt_backspace:
0276+  0D3B 7F          	dec d
0277+  0D3C 0A F6 0C    	jmp gettxt_loop
0278+  0D3F             gettxt_end:
0279+  0D3F 19 00       	mov al, 0
0280+  0D41 3E          	mov [d], al				; terminate string
0281+  0D42 E7          	pop d
0282+  0D43 E4          	pop a
0283+  0D44 09          	ret
0284+  0D45             
0285+  0D45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0D45             ; PRINT NEW LINE
0287+  0D45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  0D45             printnl:
0289+  0D45 D7          	push a
0290+  0D46 10 00 0A    	mov a, $0A00
0291+  0D49 05 03       	syscall sys_io
0292+  0D4B 10 00 0D    	mov a, $0D00
0293+  0D4E 05 03       	syscall sys_io
0294+  0D50 E4          	pop a
0295+  0D51 09          	ret
0296+  0D52             
0297+  0D52             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  0D52             ; strtoint
0299+  0D52             ; 4 digit hex string number in d
0300+  0D52             ; integer returned in A
0301+  0D52             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  0D52             strtointx:
0303+  0D52 D8          	push b
0304+  0D53 32          	mov bl, [d]
0305+  0D54 37          	mov bh, bl
0306+  0D55 33 01 00    	mov bl, [d + 1]
0307+  0D58 07 13 0C    	call atoi				; convert to int in AL
0308+  0D5B 23          	mov ah, al				; move to AH
0309+  0D5C 33 02 00    	mov bl, [d + 2]
0310+  0D5F 37          	mov bh, bl
0311+  0D60 33 03 00    	mov bl, [d + 3]
0312+  0D63 07 13 0C    	call atoi				; convert to int in AL
0313+  0D66 E5          	pop b
0314+  0D67 09          	ret
0315+  0D68             
0316+  0D68             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  0D68             ; strtoint
0318+  0D68             ; 5 digit base10 string number in d
0319+  0D68             ; integer returned in A
0320+  0D68             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  0D68             strtoint:
0322+  0D68 E2          	push si
0323+  0D69 D8          	push b
0324+  0D6A D9          	push c
0325+  0D6B DA          	push d
0326+  0D6C 07 9B 0B    	call strlen			; get string length in C
0327+  0D6F 7E          	dec c
0328+  0D70 FD 4E       	mov si, d
0329+  0D72 12          	mov a, c
0330+  0D73 FD 99       	shl a
0331+  0D75 3B FB 0B    	mov d, table_power
0332+  0D78 59          	add d, a
0333+  0D79 38 00 00    	mov c, 0
0334+  0D7C             strtoint_L0:
0335+  0D7C F6          	lodsb			; load ASCII to al
0336+  0D7D B9 00       	cmp al, 0
0337+  0D7F C6 92 0D    	je strtoint_end
0338+  0D82 6F 30       	sub al, $30		; make into integer
0339+  0D84 22 00       	mov ah, 0
0340+  0D86 2A          	mov b, [d]
0341+  0D87 AC          	mul a, b			; result in B since it fits in 16bits
0342+  0D88 11          	mov a, b
0343+  0D89 28          	mov b, c
0344+  0D8A 54          	add a, b
0345+  0D8B 39          	mov c, a
0346+  0D8C 63 02 00    	sub d, 2
0347+  0D8F 0A 7C 0D    	jmp strtoint_L0
0348+  0D92             strtoint_end:
0349+  0D92 12          	mov a, c
0350+  0D93 E7          	pop d
0351+  0D94 E6          	pop c
0352+  0D95 E5          	pop b
0353+  0D96 EF          	pop si
0354+  0D97 09          	ret
0355+  0D98             
0356+  0D98             
0357+  0D98             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  0D98             ; PRINT NULL TERMINATED STRING
0359+  0D98             ; pointer in D
0360+  0D98             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  0D98             puts:
0362+  0D98 D7          	push a
0363+  0D99 DA          	push d
0364+  0D9A             puts_L1:
0365+  0D9A 1E          	mov al, [d]
0366+  0D9B B9 00       	cmp al, 0
0367+  0D9D C6 A9 0D    	jz puts_END
0368+  0DA0 23          	mov ah, al
0369+  0DA1 19 00       	mov al, 0
0370+  0DA3 05 03       	syscall sys_io
0371+  0DA5 79          	inc d
0372+  0DA6 0A 9A 0D    	jmp puts_L1
0373+  0DA9             puts_END:
0374+  0DA9 E7          	pop d
0375+  0DAA E4          	pop a
0376+  0DAB 09          	ret
0377+  0DAC             
0378+  0DAC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0DAC             ; PRINT N SIZE STRING
0380+  0DAC             ; pointer in D
0381+  0DAC             ; size in C
0382+  0DAC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  0DAC             putsn:
0384+  0DAC DB          	push al
0385+  0DAD DA          	push d
0386+  0DAE D9          	push c
0387+  0DAF             putsn_L0:
0388+  0DAF 1E          	mov al, [d]
0389+  0DB0 23          	mov ah, al
0390+  0DB1 19 00       	mov al, 0
0391+  0DB3 05 03       	syscall sys_io
0392+  0DB5 79          	inc d
0393+  0DB6 7E          	dec c	
0394+  0DB7 C2 00 00    	cmp c, 0
0395+  0DBA C7 AF 0D    	jne putsn_L0
0396+  0DBD             putsn_end:
0397+  0DBD E6          	pop c
0398+  0DBE E7          	pop d
0399+  0DBF E8          	pop al
0400+  0DC0 09          	ret
0401+  0DC1             
0402+  0DC1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  0DC1             ; print 16bit decimal number
0404+  0DC1             ; input number in A
0405+  0DC1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  0DC1             print_u16d:
0407+  0DC1 D7          	push a
0408+  0DC2 D8          	push b
0409+  0DC3 26 10 27    	mov b, 10000
0410+  0DC6 AE          	div a, b			; get 10000 coeff.
0411+  0DC7 07 ED 0D    	call print_number
0412+  0DCA 11          	mov a, b
0413+  0DCB 26 E8 03    	mov b, 1000
0414+  0DCE AE          	div a, b			; get 10000 coeff.
0415+  0DCF 07 ED 0D    	call print_number
0416+  0DD2 11          	mov a, b
0417+  0DD3 26 64 00    	mov b, 100
0418+  0DD6 AE          	div a, b
0419+  0DD7 07 ED 0D    	call print_number
0420+  0DDA 11          	mov a, b
0421+  0DDB 26 0A 00    	mov b, 10
0422+  0DDE AE          	div a, b
0423+  0DDF 07 ED 0D    	call print_number
0424+  0DE2 11          	mov a, b
0425+  0DE3 6A 30       	add al, $30
0426+  0DE5 23          	mov ah, al
0427+  0DE6 19 00       	mov al, 0
0428+  0DE8 05 03       	syscall sys_io	; print coeff
0429+  0DEA E5          	pop b
0430+  0DEB E4          	pop a
0431+  0DEC 09          	ret
0432+  0DED             
0433+  0DED             
0434+  0DED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  0DED             ; if A == 0, print space
0436+  0DED             ; else print A
0437+  0DED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  0DED             print_number:
0439+  0DED 6A 30       	add al, $30
0440+  0DEF 23          	mov ah, al
0441+  0DF0 07 5E 0C    	call putchar
0442+  0DF3 09          	ret
0443+  0DF4             
0444+  0DF4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  0DF4             ; PRINT 16BIT HEX INTEGER
0446+  0DF4             ; integer value in reg B
0447+  0DF4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  0DF4             print_u16x:
0449+  0DF4 D7          	push a
0450+  0DF5 D8          	push b
0451+  0DF6 DD          	push bl
0452+  0DF7 30          	mov bl, bh
0453+  0DF8 07 25 0C    	call itoa				; convert bh to char in A
0454+  0DFB 2F          	mov bl, al				; save al
0455+  0DFC 19 00       	mov al, 0
0456+  0DFE 05 03       	syscall sys_io				; display AH
0457+  0E00 24          	mov ah, bl				; retrieve al
0458+  0E01 19 00       	mov al, 0
0459+  0E03 05 03       	syscall sys_io				; display AL
0460+  0E05             
0461+  0E05 EA          	pop bl
0462+  0E06 07 25 0C    	call itoa				; convert bh to char in A
0463+  0E09 2F          	mov bl, al				; save al
0464+  0E0A 19 00       	mov al, 0
0465+  0E0C 05 03       	syscall sys_io				; display AH
0466+  0E0E 24          	mov ah, bl				; retrieve al
0467+  0E0F 19 00       	mov al, 0
0468+  0E11 05 03       	syscall sys_io				; display AL
0469+  0E13             
0470+  0E13 E5          	pop b
0471+  0E14 E4          	pop a
0472+  0E15 09          	ret
0473+  0E16             
0474+  0E16             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  0E16             ; INPUT 16BIT HEX INTEGER
0476+  0E16             ; read 16bit integer into A
0477+  0E16             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  0E16             scan_u16x:
0479+  0E16 F8 10 00    	enter 16
0480+  0E19 D8          	push b
0481+  0E1A DA          	push d
0482+  0E1B             
0483+  0E1B FA F1 FF    	lea d, [bp + -15]
0484+  0E1E 07 65 0C    	call gets				; get number
0485+  0E21             
0486+  0E21 32          	mov bl, [d]
0487+  0E22 37          	mov bh, bl
0488+  0E23 33 01 00    	mov bl, [d + 1]
0489+  0E26 07 13 0C    	call atoi				; convert to int in AL
0490+  0E29 23          	mov ah, al				; move to AH
0491+  0E2A             
0492+  0E2A 33 02 00    	mov bl, [d + 2]
0493+  0E2D 37          	mov bh, bl
0494+  0E2E 33 03 00    	mov bl, [d + 3]
0495+  0E31 07 13 0C    	call atoi				; convert to int in AL
0496+  0E34             
0497+  0E34 E7          	pop d
0498+  0E35 E5          	pop b
0499+  0E36 F9          	leave
0500+  0E37 09          	ret
0501+  0E38             
0502+  0E38             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  0E38             ; PRINT 8bit HEX INTEGER
0504+  0E38             ; integer value in reg bl
0505+  0E38             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  0E38             print_u8x:
0507+  0E38 D7          	push a
0508+  0E39 DD          	push bl
0509+  0E3A             
0510+  0E3A 07 25 0C    	call itoa				; convert bl to char in A
0511+  0E3D 2F          	mov bl, al				; save al
0512+  0E3E 19 00       	mov al, 0
0513+  0E40 05 03       	syscall sys_io				; display AH
0514+  0E42 24          	mov ah, bl				; retrieve al
0515+  0E43 19 00       	mov al, 0
0516+  0E45 05 03       	syscall sys_io				; display AL
0517+  0E47             
0518+  0E47 EA          	pop bl
0519+  0E48 E4          	pop a
0520+  0E49 09          	ret
0521+  0E4A             
0522+  0E4A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0E4A             ; print 8bit decimal unsigned number
0524+  0E4A             ; input number in AL
0525+  0E4A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0E4A             print_u8d:
0527+  0E4A D7          	push a
0528+  0E4B D8          	push b
0529+  0E4C             
0530+  0E4C 22 00       	mov ah, 0
0531+  0E4E 26 64 00    	mov b, 100
0532+  0E51 AE          	div a, b
0533+  0E52 D8          	push b			; save remainder
0534+  0E53 B9 00       	cmp al, 0
0535+  0E55 C6 5F 0E    	je skip100
0536+  0E58 6A 30       	add al, $30
0537+  0E5A 23          	mov ah, al
0538+  0E5B 19 00       	mov al, 0
0539+  0E5D 05 03       	syscall sys_io	; print coeff
0540+  0E5F             skip100:
0541+  0E5F E4          	pop a
0542+  0E60 22 00       	mov ah, 0
0543+  0E62 26 0A 00    	mov b, 10
0544+  0E65 AE          	div a, b
0545+  0E66 D8          	push b			; save remainder
0546+  0E67 B9 00       	cmp al, 0
0547+  0E69 C6 73 0E    	je skip10
0548+  0E6C 6A 30       	add al, $30
0549+  0E6E 23          	mov ah, al
0550+  0E6F 19 00       	mov al, 0
0551+  0E71 05 03       	syscall sys_io	; print coeff
0552+  0E73             skip10:
0553+  0E73 E4          	pop a
0554+  0E74 1B          	mov al, bl
0555+  0E75 6A 30       	add al, $30
0556+  0E77 23          	mov ah, al
0557+  0E78 19 00       	mov al, 0
0558+  0E7A 05 03       	syscall sys_io	; print coeff
0559+  0E7C E5          	pop b
0560+  0E7D E4          	pop a
0561+  0E7E 09          	ret
0562+  0E7F             
0563+  0E7F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  0E7F             ; INPUT 8BIT HEX INTEGER
0565+  0E7F             ; read 8bit integer into AL
0566+  0E7F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  0E7F             scan_u8x:
0568+  0E7F F8 04 00    	enter 4
0569+  0E82 D8          	push b
0570+  0E83 DA          	push d
0571+  0E84             
0572+  0E84 FA FD FF    	lea d, [bp + -3]
0573+  0E87 07 65 0C    	call gets				; get number
0574+  0E8A             
0575+  0E8A 32          	mov bl, [d]
0576+  0E8B 37          	mov bh, bl
0577+  0E8C 33 01 00    	mov bl, [d + 1]
0578+  0E8F 07 13 0C    	call atoi				; convert to int in AL
0579+  0E92             
0580+  0E92 E7          	pop d
0581+  0E93 E5          	pop b
0582+  0E94 F9          	leave
0583+  0E95 09          	ret
0584+  0E96             
0585+  0E96             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  0E96             ; input decimal number
0587+  0E96             ; result in A
0588+  0E96             ; 655'\0'
0589+  0E96             ; low--------high
0590+  0E96             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  0E96             scan_u16d:
0592+  0E96 F8 08 00    	enter 8
0593+  0E99 E2          	push si
0594+  0E9A D8          	push b
0595+  0E9B D9          	push c
0596+  0E9C DA          	push d
0597+  0E9D FA F9 FF    	lea d, [bp +- 7]
0598+  0EA0 07 65 0C    	call gets
0599+  0EA3 07 9B 0B    	call strlen			; get string length in C
0600+  0EA6 7E          	dec c
0601+  0EA7 FD 4E       	mov si, d
0602+  0EA9 12          	mov a, c
0603+  0EAA FD 99       	shl a
0604+  0EAC 3B FB 0B    	mov d, table_power
0605+  0EAF 59          	add d, a
0606+  0EB0 38 00 00    	mov c, 0
0607+  0EB3             mul_loop:
0608+  0EB3 F6          	lodsb			; load ASCII to al
0609+  0EB4 B9 00       	cmp al, 0
0610+  0EB6 C6 C9 0E    	je mul_exit
0611+  0EB9 6F 30       	sub al, $30		; make into integer
0612+  0EBB 22 00       	mov ah, 0
0613+  0EBD 2A          	mov b, [d]
0614+  0EBE AC          	mul a, b			; result in B since it fits in 16bits
0615+  0EBF 11          	mov a, b
0616+  0EC0 28          	mov b, c
0617+  0EC1 54          	add a, b
0618+  0EC2 39          	mov c, a
0619+  0EC3 63 02 00    	sub d, 2
0620+  0EC6 0A B3 0E    	jmp mul_loop
0621+  0EC9             mul_exit:
0622+  0EC9 12          	mov a, c
0623+  0ECA E7          	pop d
0624+  0ECB E6          	pop c
0625+  0ECC E5          	pop b
0626+  0ECD EF          	pop si
0627+  0ECE F9          	leave
0628+  0ECF 09          	ret
0488   0ED0             .include "ctype.asm"
0001+  0ED0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0ED0             ; ctype.s
0003+  0ED0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0ED0             
0005+  0ED0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0ED0             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0ED0             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0ED0             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0ED0             ;; characters are supported.
0010+  0ED0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0ED0             ;; isalnum 
0012+  0ED0             ;; isalpha 
0013+  0ED0             ;; islower 
0014+  0ED0             ;; isupper 
0015+  0ED0             ;; isdigit 
0016+  0ED0             ;; isxdigit
0017+  0ED0             ;; iscntrl 
0018+  0ED0             ;; isgraph 
0019+  0ED0             ;; isspace 
0020+  0ED0             ;; isblank 
0021+  0ED0             ;; isprint 
0022+  0ED0             ;; ispunct 
0023+  0ED0             ;; tolower 
0024+  0ED0             ;; toupper
0025+  0ED0             
0026+  0ED0             
0027+  0ED0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0ED0             ;; IS ALPHANUMERIC
0029+  0ED0             ;; sets ZF according with result
0030+  0ED0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0ED0             isalnum:
0032+  0ED0 07 ED 0E    	call isalpha
0033+  0ED3 C6 D9 0E    	je isalnum_exit
0034+  0ED6 07 DA 0E    	call isdigit
0035+  0ED9             isalnum_exit:
0036+  0ED9 09          	ret	
0037+  0EDA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0EDA             ;; IS DIGIT
0039+  0EDA             ;; sets ZF according with result
0040+  0EDA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0EDA             isdigit:
0042+  0EDA DB          	push al
0043+  0EDB B9 30       	cmp al, '0'
0044+  0EDD C8 E9 0E    	jlu isdigit_false
0045+  0EE0 B9 39       	cmp al, '9'
0046+  0EE2 D1 E9 0E    	jgu isdigit_false
0047+  0EE5 87 00       	and al, 0	; set ZF
0048+  0EE7 E8          	pop al
0049+  0EE8 09          	ret
0050+  0EE9             isdigit_false:
0051+  0EE9 8B 01       	or al, 1	; clear ZF
0052+  0EEB E8          	pop al
0053+  0EEC 09          	ret	
0054+  0EED             	
0055+  0EED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0EED             ;; IS ALPHA
0057+  0EED             ;; sets ZF according with result
0058+  0EED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0EED             isalpha:
0060+  0EED DB          	push al
0061+  0EEE B9 5F       	cmp al, '_'
0062+  0EF0 C6 10 0F    	je isalpha_true
0063+  0EF3 B9 2E       	cmp al, '.'
0064+  0EF5 C6 10 0F    	je isalpha_true
0065+  0EF8 B9 41       	cmp al, 'A'
0066+  0EFA C8 0C 0F    	jlu isalpha_false
0067+  0EFD B9 7A       	cmp al, 'z'
0068+  0EFF D1 0C 0F    	jgu isalpha_false
0069+  0F02 B9 5A       	cmp al, 'Z'
0070+  0F04 D0 10 0F    	jleu isalpha_true
0071+  0F07 B9 61       	cmp al, 'a'
0072+  0F09 C9 10 0F    	jgeu isalpha_true
0073+  0F0C             isalpha_false:
0074+  0F0C 8B 01       	or al, 1	; clear ZF
0075+  0F0E E8          	pop al
0076+  0F0F 09          	ret
0077+  0F10             isalpha_true:
0078+  0F10 87 00       	and al, 0	; set ZF
0079+  0F12 E8          	pop al
0080+  0F13 09          	ret
0081+  0F14             
0082+  0F14             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0F14             ;; IS PATH-ALPHA
0084+  0F14             ;; sets ZF according with result
0085+  0F14             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0F14             ispath:
0087+  0F14 DB          	push al
0088+  0F15 07 DA 0E    	call isdigit
0089+  0F18 C6 42 0F    	je ispath_true
0090+  0F1B B9 5F       	cmp al, '_'
0091+  0F1D C6 42 0F    	je ispath_true
0092+  0F20 B9 2F       	cmp al, '/'
0093+  0F22 C6 42 0F    	je ispath_true
0094+  0F25 B9 2E       	cmp al, '.'
0095+  0F27 C6 42 0F    	je ispath_true
0096+  0F2A B9 41       	cmp al, 'A'
0097+  0F2C C8 3E 0F    	jlu ispath_false
0098+  0F2F B9 7A       	cmp al, 'z'
0099+  0F31 D1 3E 0F    	jgu ispath_false
0100+  0F34 B9 5A       	cmp al, 'Z'
0101+  0F36 D0 42 0F    	jleu ispath_true
0102+  0F39 B9 61       	cmp al, 'a'
0103+  0F3B C9 42 0F    	jgeu ispath_true
0104+  0F3E             ispath_false:
0105+  0F3E 8B 01       	or al, 1	; clear ZF
0106+  0F40 E8          	pop al
0107+  0F41 09          	ret
0108+  0F42             ispath_true:
0109+  0F42 87 00       	and al, 0	; set ZF
0110+  0F44 E8          	pop al
0111+  0F45 09          	ret
0112+  0F46             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0F46             ;; IS SPACE
0114+  0F46             ;; sets ZF according with result
0115+  0F46             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0F46             isspace:
0117+  0F46 B9 20       	cmp al, $20		; ' '
0118+  0F48 C6 5C 0F    	je isspace_exit
0119+  0F4B B9 09       	cmp al, $09		; '\t'
0120+  0F4D C6 5C 0F    	je isspace_exit
0121+  0F50 B9 0A       	cmp al, $0A		; '\n'
0122+  0F52 C6 5C 0F    	je isspace_exit
0123+  0F55 B9 0D       	cmp al, $0D		; '\r'
0124+  0F57 C6 5C 0F    	je isspace_exit
0125+  0F5A B9 0B       	cmp al, $0B		; '\v'
0126+  0F5C             isspace_exit:
0127+  0F5C 09          	ret	
0128+  0F5D             
0129+  0F5D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0F5D             ; TO LOWER
0131+  0F5D             ; input in AL
0132+  0F5D             ; output in AL
0133+  0F5D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0F5D             to_lower:
0135+  0F5D B9 5A       	cmp al, 'Z'
0136+  0F5F D1 64 0F    	jgu to_lower_ret
0137+  0F62 6A 20       	add al, $20				; convert to lower case
0138+  0F64             to_lower_ret:
0139+  0F64 09          	ret
0140+  0F65             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0F65             ; TO UPPER
0142+  0F65             ; input in AL
0143+  0F65             ; output in AL
0144+  0F65             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0F65             to_upper:
0146+  0F65 B9 61       	cmp al, 'a'
0147+  0F67 C8 6C 0F    	jlu to_upper_ret
0148+  0F6A 6F 20       	sub al, $20			; convert to upper case
0149+  0F6C             to_upper_ret:
0150+  0F6C 09          	ret
0151+  0F6D             
0489   0F6D             .include "token.asm"
0001+  0F6D             TOKTYP_IDENTIFIER	.equ 0
0002+  0F6D             TOKTYP_KEYWORD		.equ 1
0003+  0F6D             TOKTYP_DELIMITER	.equ 2
0004+  0F6D             TOKTYP_STRING		.equ 3
0005+  0F6D             TOKTYP_CHAR			.equ 4
0006+  0F6D             TOKTYP_NUMERIC		.equ 5
0007+  0F6D             TOKTYP_END			.equ 6
0008+  0F6D             
0009+  0F6D             TOK_NULL			.equ 0
0010+  0F6D             TOK_FSLASH			.equ 1
0011+  0F6D             TOK_TIMES 			.equ 2
0012+  0F6D             TOK_PLUS 			.equ 3
0013+  0F6D             TOK_MINUS 			.equ 4
0014+  0F6D             TOK_DOT				.equ 5
0015+  0F6D             TOK_SEMI			.equ 6
0016+  0F6D             TOK_ANGLE			.equ 7
0017+  0F6D             TOK_TILDE			.equ 8
0018+  0F6D             TOK_EQUAL			.equ 9
0019+  0F6D             TOK_COLON			.equ 10
0020+  0F6D             TOK_COMMA			.equ 11
0021+  0F6D             
0022+  0F6D             TOK_END				.equ 20
0023+  0F6D             
0024+  0F6D             
0025+  0F6D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0F6D             ;; read a full command argment from shell input buffer
0027+  0F6D             ;; argument is written into tokstr
0028+  0F6D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  0F6D             get_arg:
0030+  0F6D D7          	push a
0031+  0F6E E2          	push si
0032+  0F6F E3          	push di
0033+  0F70 19 00       	mov al, 0
0034+  0F72 3D 9B 11    	mov [tokstr], al			; nullify tokstr string
0035+  0F75 14 97 11    	mov a, [prog]
0036+  0F78 4D          	mov si, a
0037+  0F79 FD 4F 9B 11 	mov di, tokstr
0038+  0F7D             get_arg_skip_spaces:
0039+  0F7D F6          	lodsb
0040+  0F7E 07 46 0F    	call isspace
0041+  0F81 C6 7D 0F    	je get_arg_skip_spaces
0042+  0F84             get_arg_L0:
0043+  0F84 B9 3B       	cmp al, $3B				; check if is ';'
0044+  0F86 C6 93 0F    	je get_arg_end
0045+  0F89 B9 00       	cmp al, 0
0046+  0F8B C6 93 0F    	je get_arg_end			; check if end of input
0047+  0F8E F7          	stosb
0048+  0F8F F6          	lodsb
0049+  0F90 0A 84 0F    	jmp get_arg_L0
0050+  0F93             get_arg_end:
0051+  0F93 19 00       	mov al, 0
0052+  0F95 F7          	stosb
0053+  0F96 D5 01 00    	sub si, 1
0054+  0F99 4E          	mov a, si
0055+  0F9A 42 97 11    	mov [prog], a		; update pointer
0056+  0F9D F0          	pop di
0057+  0F9E EF          	pop si
0058+  0F9F E4          	pop a
0059+  0FA0 09          	ret
0060+  0FA1             
0061+  0FA1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0FA1             ;; read a path formation from shell input buffer
0063+  0FA1             ;; path is written into tokstr
0064+  0FA1             ;; /usr/bin
0065+  0FA1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0FA1             get_path:
0067+  0FA1 D7          	push a
0068+  0FA2 E2          	push si
0069+  0FA3 E3          	push di
0070+  0FA4 19 00       	mov al, 0
0071+  0FA6 3D 9B 11    	mov [tokstr], al			; nullify tokstr string
0072+  0FA9 14 97 11    	mov a, [prog]
0073+  0FAC 4D          	mov si, a
0074+  0FAD FD 4F 9B 11 	mov di, tokstr
0075+  0FB1             get_path_skip_spaces:
0076+  0FB1 F6          	lodsb
0077+  0FB2 07 46 0F    	call isspace
0078+  0FB5 C6 B1 0F    	je get_path_skip_spaces
0079+  0FB8             get_path_is_pathchar:
0080+  0FB8 F7          	stosb
0081+  0FB9 F6          	lodsb
0082+  0FBA 07 D0 0E    	call isalnum			;check if is alphanumeric
0083+  0FBD C6 B8 0F    	je get_path_is_pathchar
0084+  0FC0 B9 2F       	cmp al, '/'				; check if is '/'
0085+  0FC2 C6 B8 0F    	je get_path_is_pathchar
0086+  0FC5 19 00       	mov al, 0
0087+  0FC7 F7          	stosb
0088+  0FC8 D5 01 00    	sub si, 1
0089+  0FCB 4E          	mov a, si
0090+  0FCC 42 97 11    	mov [prog], a		; update pointer
0091+  0FCF             get_path_end:
0092+  0FCF F0          	pop di
0093+  0FD0 EF          	pop si
0094+  0FD1 E4          	pop a
0095+  0FD2 09          	ret
0096+  0FD3             
0097+  0FD3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0FD3             ;; read a line
0099+  0FD3             ;; line is written into tokstr
0100+  0FD3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0FD3             get_line:
0102+  0FD3 D7          	push a
0103+  0FD4 E2          	push si
0104+  0FD5 E3          	push di
0105+  0FD6 19 00       	mov al, 0
0106+  0FD8 3D 9B 11    	mov [tokstr], al			; nullify tokstr string
0107+  0FDB 14 97 11    	mov a, [prog]
0108+  0FDE 4D          	mov si, a
0109+  0FDF FD 4F 9B 11 	mov di, tokstr
0110+  0FE3             get_line_L0:
0111+  0FE3 F6          	lodsb
0112+  0FE4 B9 0A       	cmp al, $0A		; check for new line
0113+  0FE6 C6 ED 0F    	je get_line_exit
0114+  0FE9 F7          	stosb
0115+  0FEA 0A E3 0F    	jmp get_line_L0
0116+  0FED             get_line_exit:
0117+  0FED 19 00       	mov al, 0
0118+  0FEF F7          	stosb
0119+  0FF0 4E          	mov a, si
0120+  0FF1 42 97 11    	mov [prog], a		; update pointer
0121+  0FF4 F0          	pop di
0122+  0FF5 EF          	pop si
0123+  0FF6 E4          	pop a
0124+  0FF7 09          	ret
0125+  0FF8             
0126+  0FF8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0FF8             ;; token parser
0128+  0FF8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0FF8             get_token:
0130+  0FF8 D7          	push a
0131+  0FF9 DA          	push d
0132+  0FFA E2          	push si
0133+  0FFB E3          	push di
0134+  0FFC 19 00       	mov al, 0
0135+  0FFE 3D 9B 11    	mov [tokstr], al			; nullify tokstr string
0136+  1001 19 00       	mov al, TOK_NULL
0137+  1003 3D 9A 11    	mov [tok], al				; nullify token
0138+  1006 14 97 11    	mov a, [prog]
0139+  1009 4D          	mov si, a
0140+  100A FD 4F 9B 11 	mov di, tokstr
0141+  100E             get_tok_skip_spaces:
0142+  100E F6          	lodsb
0143+  100F 07 46 0F    	call isspace
0144+  1012 C6 0E 10    	je get_tok_skip_spaces
0145+  1015 B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  1017 C6 FC 10    	je get_token_end
0147+  101A B9 23       	cmp al, '#'			; comments!
0148+  101C C6 2A 11    	je get_tok_comment
0149+  101F 07 D0 0E    	call isalnum
0150+  1022 C6 09 11    	jz is_alphanumeric
0151+  1025             ; other token types
0152+  1025             get_token_slash:
0153+  1025 B9 2F       	cmp al, '/'				; check if '/'
0154+  1027 C7 3F 10    	jne get_token_minus
0155+  102A F7          	stosb					; store '/' into token string
0156+  102B 19 00       	mov al, 0
0157+  102D F7          	stosb					; terminate token string
0158+  102E 19 01       	mov al, TOK_FSLASH
0159+  1030 3D 9A 11    	mov [tok], al			
0160+  1033 19 02       	mov al, TOKTYP_DELIMITER
0161+  1035 3D 99 11    	mov [toktyp], al
0162+  1038 4E          	mov a, si
0163+  1039 42 97 11    	mov [prog], a		; update pointer
0164+  103C 0A 25 11    	jmp get_token_return
0165+  103F             get_token_minus:
0166+  103F B9 2D       	cmp al, '-'				; check if '-'
0167+  1041 C7 59 10    	jne get_token_comma
0168+  1044 F7          	stosb					; store '-' into token string
0169+  1045 19 00       	mov al, 0
0170+  1047 F7          	stosb					; terminate token string
0171+  1048 19 04       	mov al, TOK_MINUS
0172+  104A 3D 9A 11    	mov [tok], al			
0173+  104D 19 02       	mov al, TOKTYP_DELIMITER
0174+  104F 3D 99 11    	mov [toktyp], al
0175+  1052 4E          	mov a, si
0176+  1053 42 97 11    	mov [prog], a		; update pointer
0177+  1056 0A 25 11    	jmp get_token_return
0178+  1059             get_token_comma:
0179+  1059 B9 2C       	cmp al, ','				; check if ','
0180+  105B C7 73 10    	jne get_token_semi
0181+  105E F7          	stosb					; store ',' into token string
0182+  105F 19 00       	mov al, 0
0183+  1061 F7          	stosb					; terminate token string
0184+  1062 19 0B       	mov al, TOK_COMMA
0185+  1064 3D 9A 11    	mov [tok], al			
0186+  1067 19 02       	mov al, TOKTYP_DELIMITER
0187+  1069 3D 99 11    	mov [toktyp], al
0188+  106C 4E          	mov a, si
0189+  106D 42 97 11    	mov [prog], a		; update pointer
0190+  1070 0A 25 11    	jmp get_token_return
0191+  1073             get_token_semi:
0192+  1073 B9 3B       	cmp al, $3B				; check if ';'
0193+  1075 C7 8D 10    	jne get_token_colon
0194+  1078 F7          	stosb					; store ';' into token string
0195+  1079 19 00       	mov al, 0
0196+  107B F7          	stosb					; terminate token string
0197+  107C 19 06       	mov al, TOK_SEMI
0198+  107E 3D 9A 11    	mov [tok], al			
0199+  1081 19 02       	mov al, TOKTYP_DELIMITER
0200+  1083 3D 99 11    	mov [toktyp], al
0201+  1086 4E          	mov a, si
0202+  1087 42 97 11    	mov [prog], a		; update pointer
0203+  108A 0A 25 11    	jmp get_token_return
0204+  108D             get_token_colon:
0205+  108D B9 3A       	cmp al, $3A				; check if ':'
0206+  108F C7 A7 10    	jne get_token_angle
0207+  1092 F7          	stosb					; store ':' into token string
0208+  1093 19 00       	mov al, 0
0209+  1095 F7          	stosb					; terminate token string
0210+  1096 19 0A       	mov al, TOK_COLON
0211+  1098 3D 9A 11    	mov [tok], al			
0212+  109B 19 02       	mov al, TOKTYP_DELIMITER
0213+  109D 3D 99 11    	mov [toktyp], al
0214+  10A0 4E          	mov a, si
0215+  10A1 42 97 11    	mov [prog], a		; update pointer
0216+  10A4 0A 25 11    	jmp get_token_return
0217+  10A7             get_token_angle:
0218+  10A7 B9 3E       	cmp al, $3E				; check if '>'
0219+  10A9 C7 C1 10    	jne get_token_tilde
0220+  10AC F7          	stosb					; store '>' into token string
0221+  10AD 19 00       	mov al, 0
0222+  10AF F7          	stosb					; terminate token string
0223+  10B0 19 07       	mov al, TOK_ANGLE
0224+  10B2 3D 9A 11    	mov [tok], al			
0225+  10B5 19 02       	mov al, TOKTYP_DELIMITER
0226+  10B7 3D 99 11    	mov [toktyp], al
0227+  10BA 4E          	mov a, si
0228+  10BB 42 97 11    	mov [prog], a		; update pointer
0229+  10BE 0A 25 11    	jmp get_token_return
0230+  10C1             get_token_tilde:
0231+  10C1 B9 7E       	cmp al, '~'				; check if '~'
0232+  10C3 C7 DB 10    	jne get_token_equal
0233+  10C6 F7          	stosb					; store '~' into token string
0234+  10C7 19 00       	mov al, 0
0235+  10C9 F7          	stosb					; terminate token string
0236+  10CA 19 08       	mov al, TOK_TILDE
0237+  10CC 3D 9A 11    	mov [tok], al			
0238+  10CF 19 02       	mov al, TOKTYP_DELIMITER
0239+  10D1 3D 99 11    	mov [toktyp], al
0240+  10D4 4E          	mov a, si
0241+  10D5 42 97 11    	mov [prog], a		; update pointer
0242+  10D8 0A 25 11    	jmp get_token_return
0243+  10DB             get_token_equal:
0244+  10DB B9 3D       	cmp al, '='				; check if '='
0245+  10DD C7 F5 10    	jne get_token_skip
0246+  10E0 F7          	stosb					; store '=' into token string
0247+  10E1 19 00       	mov al, 0
0248+  10E3 F7          	stosb					; terminate token string
0249+  10E4 19 09       	mov al, TOK_EQUAL
0250+  10E6 3D 9A 11    	mov [tok], al			
0251+  10E9 19 02       	mov al, TOKTYP_DELIMITER
0252+  10EB 3D 99 11    	mov [toktyp], al
0253+  10EE 4E          	mov a, si
0254+  10EF 42 97 11    	mov [prog], a		; update pointer
0255+  10F2 0A 25 11    	jmp get_token_return
0256+  10F5             get_token_skip:
0257+  10F5 4E          	mov a, si
0258+  10F6 42 97 11    	mov [prog], a		; update pointer
0259+  10F9 0A 25 11    	jmp get_token_return
0260+  10FC             get_token_end:				; end of file token
0261+  10FC 19 14       	mov al, TOK_END
0262+  10FE 3D 9A 11    	mov [tok], al
0263+  1101 19 06       	mov al, TOKTYP_END
0264+  1103 3D 99 11    	mov [toktyp], al
0265+  1106 0A 25 11    	jmp get_token_return
0266+  1109             is_alphanumeric:
0267+  1109 F7          	stosb
0268+  110A F6          	lodsb
0269+  110B 07 D0 0E    	call isalnum			;check if is alphanumeric
0270+  110E C6 09 11    	jz is_alphanumeric
0271+  1111 B9 2E       	cmp al, $2E				; check if is '.'
0272+  1113 C6 09 11    	je is_alphanumeric
0273+  1116 19 00       	mov al, 0
0274+  1118 F7          	stosb
0275+  1119 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  111B 3D 99 11    	mov [toktyp], al
0277+  111E D5 01 00    	sub si, 1
0278+  1121 4E          	mov a, si
0279+  1122 42 97 11    	mov [prog], a		; update pointer
0280+  1125             get_token_return:
0281+  1125 F0          	pop di
0282+  1126 EF          	pop si
0283+  1127 E7          	pop d
0284+  1128 E4          	pop a
0285+  1129 09          	ret
0286+  112A             get_tok_comment:
0287+  112A F6          	lodsb
0288+  112B B9 0A       	cmp al, $0A			; new line
0289+  112D C7 2A 11    	jne get_tok_comment
0290+  1130 0A 0E 10    	jmp get_tok_skip_spaces
0291+  1133             
0292+  1133             
0293+  1133             get_number:
0294+  1133 D7          	push a
0295+  1134 DA          	push d
0296+  1135 E2          	push si
0297+  1136 E3          	push di
0298+  1137 19 00       	mov al, 0
0299+  1139 3D 9B 11    	mov [tokstr], al			; nullify tokstr string
0300+  113C 19 00       	mov al, TOK_NULL
0301+  113E 3D 9A 11    	mov [tok], al				; nullify token
0302+  1141 14 97 11    	mov a, [prog]
0303+  1144 4D          	mov si, a
0304+  1145 FD 4F 9B 11 	mov di, tokstr
0305+  1149             get_number_skip_spaces:
0306+  1149 F6          	lodsb
0307+  114A 07 46 0F    	call isspace
0308+  114D C6 49 11    	je get_number_skip_spaces
0309+  1150 B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  1152 C7 62 11    	jne get_number_L0
0311+  1155 19 14       	mov al, TOK_END
0312+  1157 3D 9A 11    	mov [tok], al
0313+  115A 19 06       	mov al, TOKTYP_END
0314+  115C 3D 99 11    	mov [toktyp], al
0315+  115F 0A 79 11    	jmp get_number_return
0316+  1162             get_number_L0:
0317+  1162 F7          	stosb
0318+  1163 F6          	lodsb
0319+  1164 07 DA 0E    	call isdigit			;check if is numeric
0320+  1167 C6 62 11    	jz get_number_L0
0321+  116A 19 00       	mov al, 0
0322+  116C F7          	stosb
0323+  116D 19 05       	mov al, TOKTYP_NUMERIC
0324+  116F 3D 99 11    	mov [toktyp], al
0325+  1172 D5 01 00    	sub si, 1
0326+  1175 4E          	mov a, si
0327+  1176 42 97 11    	mov [prog], a		; update pointer
0328+  1179             get_number_return:
0329+  1179 F0          	pop di
0330+  117A EF          	pop si
0331+  117B E7          	pop d
0332+  117C E4          	pop a
0333+  117D 09          	ret
0334+  117E             
0335+  117E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  117E             ;; PUT BACK TOKEN
0337+  117E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  117E             putback:
0339+  117E D7          	push a
0340+  117F E2          	push si
0341+  1180 FD 4D 9B 11 	mov si, tokstr	
0342+  1184             putback_loop:
0343+  1184 F6          	lodsb
0344+  1185 B9 00       	cmp al, 0
0345+  1187 C6 94 11    	je putback_end
0346+  118A 14 97 11    	mov a, [prog]
0347+  118D 7D          	dec a
0348+  118E 42 97 11    	mov [prog], a			; update pointer
0349+  1191 0A 84 11    	jmp putback_loop
0350+  1194             putback_end:
0351+  1194 EF          	pop si
0352+  1195 E4          	pop a
0353+  1196 09          	ret
0354+  1197             
0355+  1197             
0356+  1197             
0357+  1197             
0358+  1197 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  1199             
0360+  1199 00          toktyp: 	.db 0			; token type symbol
0361+  119A 00          tok:		.db 0			; current token symbol
0362+  119B 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  119F 00 00 00 00 
0362+  11A3 00 00 00 00 
0362+  11A7 00 00 00 00 
0362+  11AB 00 00 00 00 
0362+  11AF 00 00 00 00 
0362+  11B3 00 00 00 00 
0362+  11B7 00 00 00 00 
0362+  11BB 00 00 00 00 
0362+  11BF 00 00 00 00 
0362+  11C3 00 00 00 00 
0362+  11C7 00 00 00 00 
0362+  11CB 00 00 00 00 
0362+  11CF 00 00 00 00 
0362+  11D3 00 00 00 00 
0362+  11D7 00 00 00 00 
0362+  11DB 00 00 00 00 
0362+  11DF 00 00 00 00 
0362+  11E3 00 00 00 00 
0362+  11E7 00 00 00 00 
0362+  11EB 00 00 00 00 
0362+  11EF 00 00 00 00 
0362+  11F3 00 00 00 00 
0362+  11F7 00 00 00 00 
0362+  11FB 00 00 00 00 
0362+  11FF 00 00 00 00 
0362+  1203 00 00 00 00 
0362+  1207 00 00 00 00 
0362+  120B 00 00 00 00 
0362+  120F 00 00 00 00 
0362+  1213 00 00 00 00 
0362+  1217 00 00 00 00 
0362+  121B 00 00 00 00 
0362+  121F 00 00 00 00 
0362+  1223 00 00 00 00 
0362+  1227 00 00 00 00 
0362+  122B 00 00 00 00 
0362+  122F 00 00 00 00 
0362+  1233 00 00 00 00 
0362+  1237 00 00 00 00 
0362+  123B 00 00 00 00 
0362+  123F 00 00 00 00 
0362+  1243 00 00 00 00 
0362+  1247 00 00 00 00 
0362+  124B 00 00 00 00 
0362+  124F 00 00 00 00 
0362+  1253 00 00 00 00 
0362+  1257 00 00 00 00 
0362+  125B 00 00 00 00 
0362+  125F 00 00 00 00 
0362+  1263 00 00 00 00 
0362+  1267 00 00 00 00 
0362+  126B 00 00 00 00 
0362+  126F 00 00 00 00 
0362+  1273 00 00 00 00 
0362+  1277 00 00 00 00 
0362+  127B 00 00 00 00 
0362+  127F 00 00 00 00 
0362+  1283 00 00 00 00 
0362+  1287 00 00 00 00 
0362+  128B 00 00 00 00 
0362+  128F 00 00 00 00 
0362+  1293 00 00 00 00 
0362+  1297 00 00 00 00 
0490   129B             
0491   129B 00 00 00 00 temp_data1:				.fill 256, 0
0491   129F 00 00 00 00 
0491   12A3 00 00 00 00 
0491   12A7 00 00 00 00 
0491   12AB 00 00 00 00 
0491   12AF 00 00 00 00 
0491   12B3 00 00 00 00 
0491   12B7 00 00 00 00 
0491   12BB 00 00 00 00 
0491   12BF 00 00 00 00 
0491   12C3 00 00 00 00 
0491   12C7 00 00 00 00 
0491   12CB 00 00 00 00 
0491   12CF 00 00 00 00 
0491   12D3 00 00 00 00 
0491   12D7 00 00 00 00 
0491   12DB 00 00 00 00 
0491   12DF 00 00 00 00 
0491   12E3 00 00 00 00 
0491   12E7 00 00 00 00 
0491   12EB 00 00 00 00 
0491   12EF 00 00 00 00 
0491   12F3 00 00 00 00 
0491   12F7 00 00 00 00 
0491   12FB 00 00 00 00 
0491   12FF 00 00 00 00 
0491   1303 00 00 00 00 
0491   1307 00 00 00 00 
0491   130B 00 00 00 00 
0491   130F 00 00 00 00 
0491   1313 00 00 00 00 
0491   1317 00 00 00 00 
0491   131B 00 00 00 00 
0491   131F 00 00 00 00 
0491   1323 00 00 00 00 
0491   1327 00 00 00 00 
0491   132B 00 00 00 00 
0491   132F 00 00 00 00 
0491   1333 00 00 00 00 
0491   1337 00 00 00 00 
0491   133B 00 00 00 00 
0491   133F 00 00 00 00 
0491   1343 00 00 00 00 
0491   1347 00 00 00 00 
0491   134B 00 00 00 00 
0491   134F 00 00 00 00 
0491   1353 00 00 00 00 
0491   1357 00 00 00 00 
0491   135B 00 00 00 00 
0491   135F 00 00 00 00 
0491   1363 00 00 00 00 
0491   1367 00 00 00 00 
0491   136B 00 00 00 00 
0491   136F 00 00 00 00 
0491   1373 00 00 00 00 
0491   1377 00 00 00 00 
0491   137B 00 00 00 00 
0491   137F 00 00 00 00 
0491   1383 00 00 00 00 
0491   1387 00 00 00 00 
0491   138B 00 00 00 00 
0491   138F 00 00 00 00 
0491   1393 00 00 00 00 
0491   1397 00 00 00 00 
0492   139B 00 00 00 00 temp_data:				.fill 512, 0
0492   139F 00 00 00 00 
0492   13A3 00 00 00 00 
0492   13A7 00 00 00 00 
0492   13AB 00 00 00 00 
0492   13AF 00 00 00 00 
0492   13B3 00 00 00 00 
0492   13B7 00 00 00 00 
0492   13BB 00 00 00 00 
0492   13BF 00 00 00 00 
0492   13C3 00 00 00 00 
0492   13C7 00 00 00 00 
0492   13CB 00 00 00 00 
0492   13CF 00 00 00 00 
0492   13D3 00 00 00 00 
0492   13D7 00 00 00 00 
0492   13DB 00 00 00 00 
0492   13DF 00 00 00 00 
0492   13E3 00 00 00 00 
0492   13E7 00 00 00 00 
0492   13EB 00 00 00 00 
0492   13EF 00 00 00 00 
0492   13F3 00 00 00 00 
0492   13F7 00 00 00 00 
0492   13FB 00 00 00 00 
0492   13FF 00 00 00 00 
0492   1403 00 00 00 00 
0492   1407 00 00 00 00 
0492   140B 00 00 00 00 
0492   140F 00 00 00 00 
0492   1413 00 00 00 00 
0492   1417 00 00 00 00 
0492   141B 00 00 00 00 
0492   141F 00 00 00 00 
0492   1423 00 00 00 00 
0492   1427 00 00 00 00 
0492   142B 00 00 00 00 
0492   142F 00 00 00 00 
0492   1433 00 00 00 00 
0492   1437 00 00 00 00 
0492   143B 00 00 00 00 
0492   143F 00 00 00 00 
0492   1443 00 00 00 00 
0492   1447 00 00 00 00 
0492   144B 00 00 00 00 
0492   144F 00 00 00 00 
0492   1453 00 00 00 00 
0492   1457 00 00 00 00 
0492   145B 00 00 00 00 
0492   145F 00 00 00 00 
0492   1463 00 00 00 00 
0492   1467 00 00 00 00 
0492   146B 00 00 00 00 
0492   146F 00 00 00 00 
0492   1473 00 00 00 00 
0492   1477 00 00 00 00 
0492   147B 00 00 00 00 
0492   147F 00 00 00 00 
0492   1483 00 00 00 00 
0492   1487 00 00 00 00 
0492   148B 00 00 00 00 
0492   148F 00 00 00 00 
0492   1493 00 00 00 00 
0492   1497 00 00 00 00 
0492   149B 00 00 00 00 
0492   149F 00 00 00 00 
0492   14A3 00 00 00 00 
0492   14A7 00 00 00 00 
0492   14AB 00 00 00 00 
0492   14AF 00 00 00 00 
0492   14B3 00 00 00 00 
0492   14B7 00 00 00 00 
0492   14BB 00 00 00 00 
0492   14BF 00 00 00 00 
0492   14C3 00 00 00 00 
0492   14C7 00 00 00 00 
0492   14CB 00 00 00 00 
0492   14CF 00 00 00 00 
0492   14D3 00 00 00 00 
0492   14D7 00 00 00 00 
0492   14DB 00 00 00 00 
0492   14DF 00 00 00 00 
0492   14E3 00 00 00 00 
0492   14E7 00 00 00 00 
0492   14EB 00 00 00 00 
0492   14EF 00 00 00 00 
0492   14F3 00 00 00 00 
0492   14F7 00 00 00 00 
0492   14FB 00 00 00 00 
0492   14FF 00 00 00 00 
0492   1503 00 00 00 00 
0492   1507 00 00 00 00 
0492   150B 00 00 00 00 
0492   150F 00 00 00 00 
0492   1513 00 00 00 00 
0492   1517 00 00 00 00 
0492   151B 00 00 00 00 
0492   151F 00 00 00 00 
0492   1523 00 00 00 00 
0492   1527 00 00 00 00 
0492   152B 00 00 00 00 
0492   152F 00 00 00 00 
0492   1533 00 00 00 00 
0492   1537 00 00 00 00 
0492   153B 00 00 00 00 
0492   153F 00 00 00 00 
0492   1543 00 00 00 00 
0492   1547 00 00 00 00 
0492   154B 00 00 00 00 
0492   154F 00 00 00 00 
0492   1553 00 00 00 00 
0492   1557 00 00 00 00 
0492   155B 00 00 00 00 
0492   155F 00 00 00 00 
0492   1563 00 00 00 00 
0492   1567 00 00 00 00 
0492   156B 00 00 00 00 
0492   156F 00 00 00 00 
0492   1573 00 00 00 00 
0492   1577 00 00 00 00 
0492   157B 00 00 00 00 
0492   157F 00 00 00 00 
0492   1583 00 00 00 00 
0492   1587 00 00 00 00 
0492   158B 00 00 00 00 
0492   158F 00 00 00 00 
0492   1593 00 00 00 00 
0492   1597 00 00 00 00 
0493   159B             shell_transient_area:	; shell transient data area
0494   159B             
0495   159B             .end
tasm: Number of errors = 0
