0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0400             .org PROC_TEXT_ORG			; origin at 1024
0004   0400             
0005   0400             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006   0400             ;; CREATE NEW DIRECTORY
0007   0400             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008   0400             ; search list for NULL name entry.
0009   0400             ; add new directory to list
0010   0400             cmd_mkdir:
0011   0400 10 00 00    	mov a, 0
0012   0403 42 49 06    	mov [prog], a
0013   0406             cmd_mkdir_L0:
0014   0406 07 AA 04    	call get_token
0015   0409 BC 4B 06 00 	cmp byte[toktyp], TOKTYP_IDENTIFIER
0016   040D C7 1A 04    	jne cmd_mkdir_end
0017   0410             ; execute mkdir command
0018   0410 3B 4D 06    	mov d, tokstr
0019   0413 19 02       	mov al, 2
0020   0415 05 04       	syscall sys_fileio
0021   0417 0A 06 04    	jmp cmd_mkdir_L0
0022   041A             cmd_mkdir_end:
0023   041A 07 30 06    	call putback		; if token was not an identifier, then put it back
0024   041D             
0025   041D 05 0B       	syscall sys_terminate_proc
0026   041F             
0027   041F             
0028   041F             .include "token.asm"
0001+  041F             TOKTYP_IDENTIFIER	.equ 0
0002+  041F             TOKTYP_KEYWORD		.equ 1
0003+  041F             TOKTYP_DELIMITER	.equ 2
0004+  041F             TOKTYP_STRING		.equ 3
0005+  041F             TOKTYP_CHAR			.equ 4
0006+  041F             TOKTYP_NUMERIC		.equ 5
0007+  041F             TOKTYP_END			.equ 6
0008+  041F             
0009+  041F             TOK_NULL			.equ 0
0010+  041F             TOK_FSLASH			.equ 1
0011+  041F             TOK_TIMES 			.equ 2
0012+  041F             TOK_PLUS 			.equ 3
0013+  041F             TOK_MINUS 			.equ 4
0014+  041F             TOK_DOT				.equ 5
0015+  041F             TOK_SEMI			.equ 6
0016+  041F             TOK_ANGLE			.equ 7
0017+  041F             TOK_TILDE			.equ 8
0018+  041F             TOK_EQUAL			.equ 9
0019+  041F             TOK_COLON			.equ 10
0020+  041F             TOK_COMMA			.equ 11
0021+  041F             
0022+  041F             TOK_END				.equ 20
0023+  041F             
0024+  041F             
0025+  041F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  041F             ;; read a full command argment from shell input buffer
0027+  041F             ;; argument is written into tokstr
0028+  041F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  041F             get_arg:
0030+  041F D7          	push a
0031+  0420 E2          	push si
0032+  0421 E3          	push di
0033+  0422 19 00       	mov al, 0
0034+  0424 3D 4D 06    	mov [tokstr], al			; nullify tokstr string
0035+  0427 14 49 06    	mov a, [prog]
0036+  042A 4D          	mov si, a
0037+  042B FD 4F 4D 06 	mov di, tokstr
0038+  042F             get_arg_skip_spaces:
0039+  042F F6          	lodsb
0040+  0430 07 3A 0B    	call isspace
0041+  0433 C6 2F 04    	je get_arg_skip_spaces
0042+  0436             get_arg_L0:
0043+  0436 B9 3B       	cmp al, $3B				; check if is ';'
0044+  0438 C6 45 04    	je get_arg_end
0045+  043B B9 00       	cmp al, 0
0046+  043D C6 45 04    	je get_arg_end			; check if end of input
0047+  0440 F7          	stosb
0048+  0441 F6          	lodsb
0049+  0442 0A 36 04    	jmp get_arg_L0
0050+  0445             get_arg_end:
0051+  0445 19 00       	mov al, 0
0052+  0447 F7          	stosb
0053+  0448 D5 01 00    	sub si, 1
0054+  044B 4E          	mov a, si
0055+  044C 42 49 06    	mov [prog], a		; update pointer
0056+  044F F0          	pop di
0057+  0450 EF          	pop si
0058+  0451 E4          	pop a
0059+  0452 09          	ret
0060+  0453             
0061+  0453             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0453             ;; read a path formation from shell input buffer
0063+  0453             ;; path is written into tokstr
0064+  0453             ;; /usr/bin
0065+  0453             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0453             get_path:
0067+  0453 D7          	push a
0068+  0454 E2          	push si
0069+  0455 E3          	push di
0070+  0456 19 00       	mov al, 0
0071+  0458 3D 4D 06    	mov [tokstr], al			; nullify tokstr string
0072+  045B 14 49 06    	mov a, [prog]
0073+  045E 4D          	mov si, a
0074+  045F FD 4F 4D 06 	mov di, tokstr
0075+  0463             get_path_skip_spaces:
0076+  0463 F6          	lodsb
0077+  0464 07 3A 0B    	call isspace
0078+  0467 C6 63 04    	je get_path_skip_spaces
0079+  046A             get_path_is_pathchar:
0080+  046A F7          	stosb
0081+  046B F6          	lodsb
0082+  046C 07 C4 0A    	call isalnum			;check if is alphanumeric
0083+  046F C6 6A 04    	je get_path_is_pathchar
0084+  0472 B9 2F       	cmp al, '/'				; check if is '/'
0085+  0474 C6 6A 04    	je get_path_is_pathchar
0086+  0477 19 00       	mov al, 0
0087+  0479 F7          	stosb
0088+  047A D5 01 00    	sub si, 1
0089+  047D 4E          	mov a, si
0090+  047E 42 49 06    	mov [prog], a		; update pointer
0091+  0481             get_path_end:
0092+  0481 F0          	pop di
0093+  0482 EF          	pop si
0094+  0483 E4          	pop a
0095+  0484 09          	ret
0096+  0485             
0097+  0485             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0485             ;; read a line
0099+  0485             ;; line is written into tokstr
0100+  0485             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0485             get_line:
0102+  0485 D7          	push a
0103+  0486 E2          	push si
0104+  0487 E3          	push di
0105+  0488 19 00       	mov al, 0
0106+  048A 3D 4D 06    	mov [tokstr], al			; nullify tokstr string
0107+  048D 14 49 06    	mov a, [prog]
0108+  0490 4D          	mov si, a
0109+  0491 FD 4F 4D 06 	mov di, tokstr
0110+  0495             get_line_L0:
0111+  0495 F6          	lodsb
0112+  0496 B9 0A       	cmp al, $0A		; check for new line
0113+  0498 C6 9F 04    	je get_line_exit
0114+  049B F7          	stosb
0115+  049C 0A 95 04    	jmp get_line_L0
0116+  049F             get_line_exit:
0117+  049F 19 00       	mov al, 0
0118+  04A1 F7          	stosb
0119+  04A2 4E          	mov a, si
0120+  04A3 42 49 06    	mov [prog], a		; update pointer
0121+  04A6 F0          	pop di
0122+  04A7 EF          	pop si
0123+  04A8 E4          	pop a
0124+  04A9 09          	ret
0125+  04AA             
0126+  04AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  04AA             ;; token parser
0128+  04AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  04AA             get_token:
0130+  04AA D7          	push a
0131+  04AB DA          	push d
0132+  04AC E2          	push si
0133+  04AD E3          	push di
0134+  04AE 19 00       	mov al, 0
0135+  04B0 3D 4D 06    	mov [tokstr], al			; nullify tokstr string
0136+  04B3 19 00       	mov al, TOK_NULL
0137+  04B5 3D 4C 06    	mov [tok], al				; nullify token
0138+  04B8 14 49 06    	mov a, [prog]
0139+  04BB 4D          	mov si, a
0140+  04BC FD 4F 4D 06 	mov di, tokstr
0141+  04C0             get_tok_skip_spaces:
0142+  04C0 F6          	lodsb
0143+  04C1 07 3A 0B    	call isspace
0144+  04C4 C6 C0 04    	je get_tok_skip_spaces
0145+  04C7 B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  04C9 C6 AE 05    	je get_token_end
0147+  04CC B9 23       	cmp al, '#'			; comments!
0148+  04CE C6 DC 05    	je get_tok_comment
0149+  04D1 07 C4 0A    	call isalnum
0150+  04D4 C6 BB 05    	jz is_alphanumeric
0151+  04D7             ; other token types
0152+  04D7             get_token_slash:
0153+  04D7 B9 2F       	cmp al, '/'				; check if '/'
0154+  04D9 C7 F1 04    	jne get_token_minus
0155+  04DC F7          	stosb					; store '/' into token string
0156+  04DD 19 00       	mov al, 0
0157+  04DF F7          	stosb					; terminate token string
0158+  04E0 19 01       	mov al, TOK_FSLASH
0159+  04E2 3D 4C 06    	mov [tok], al			
0160+  04E5 19 02       	mov al, TOKTYP_DELIMITER
0161+  04E7 3D 4B 06    	mov [toktyp], al
0162+  04EA 4E          	mov a, si
0163+  04EB 42 49 06    	mov [prog], a		; update pointer
0164+  04EE 0A D7 05    	jmp get_token_return
0165+  04F1             get_token_minus:
0166+  04F1 B9 2D       	cmp al, '-'				; check if '-'
0167+  04F3 C7 0B 05    	jne get_token_comma
0168+  04F6 F7          	stosb					; store '-' into token string
0169+  04F7 19 00       	mov al, 0
0170+  04F9 F7          	stosb					; terminate token string
0171+  04FA 19 04       	mov al, TOK_MINUS
0172+  04FC 3D 4C 06    	mov [tok], al			
0173+  04FF 19 02       	mov al, TOKTYP_DELIMITER
0174+  0501 3D 4B 06    	mov [toktyp], al
0175+  0504 4E          	mov a, si
0176+  0505 42 49 06    	mov [prog], a		; update pointer
0177+  0508 0A D7 05    	jmp get_token_return
0178+  050B             get_token_comma:
0179+  050B B9 2C       	cmp al, ','				; check if ','
0180+  050D C7 25 05    	jne get_token_semi
0181+  0510 F7          	stosb					; store ',' into token string
0182+  0511 19 00       	mov al, 0
0183+  0513 F7          	stosb					; terminate token string
0184+  0514 19 0B       	mov al, TOK_COMMA
0185+  0516 3D 4C 06    	mov [tok], al			
0186+  0519 19 02       	mov al, TOKTYP_DELIMITER
0187+  051B 3D 4B 06    	mov [toktyp], al
0188+  051E 4E          	mov a, si
0189+  051F 42 49 06    	mov [prog], a		; update pointer
0190+  0522 0A D7 05    	jmp get_token_return
0191+  0525             get_token_semi:
0192+  0525 B9 3B       	cmp al, $3B				; check if ';'
0193+  0527 C7 3F 05    	jne get_token_colon
0194+  052A F7          	stosb					; store ';' into token string
0195+  052B 19 00       	mov al, 0
0196+  052D F7          	stosb					; terminate token string
0197+  052E 19 06       	mov al, TOK_SEMI
0198+  0530 3D 4C 06    	mov [tok], al			
0199+  0533 19 02       	mov al, TOKTYP_DELIMITER
0200+  0535 3D 4B 06    	mov [toktyp], al
0201+  0538 4E          	mov a, si
0202+  0539 42 49 06    	mov [prog], a		; update pointer
0203+  053C 0A D7 05    	jmp get_token_return
0204+  053F             get_token_colon:
0205+  053F B9 3A       	cmp al, $3A				; check if ':'
0206+  0541 C7 59 05    	jne get_token_angle
0207+  0544 F7          	stosb					; store ':' into token string
0208+  0545 19 00       	mov al, 0
0209+  0547 F7          	stosb					; terminate token string
0210+  0548 19 0A       	mov al, TOK_COLON
0211+  054A 3D 4C 06    	mov [tok], al			
0212+  054D 19 02       	mov al, TOKTYP_DELIMITER
0213+  054F 3D 4B 06    	mov [toktyp], al
0214+  0552 4E          	mov a, si
0215+  0553 42 49 06    	mov [prog], a		; update pointer
0216+  0556 0A D7 05    	jmp get_token_return
0217+  0559             get_token_angle:
0218+  0559 B9 3E       	cmp al, $3E				; check if '>'
0219+  055B C7 73 05    	jne get_token_tilde
0220+  055E F7          	stosb					; store '>' into token string
0221+  055F 19 00       	mov al, 0
0222+  0561 F7          	stosb					; terminate token string
0223+  0562 19 07       	mov al, TOK_ANGLE
0224+  0564 3D 4C 06    	mov [tok], al			
0225+  0567 19 02       	mov al, TOKTYP_DELIMITER
0226+  0569 3D 4B 06    	mov [toktyp], al
0227+  056C 4E          	mov a, si
0228+  056D 42 49 06    	mov [prog], a		; update pointer
0229+  0570 0A D7 05    	jmp get_token_return
0230+  0573             get_token_tilde:
0231+  0573 B9 7E       	cmp al, '~'				; check if '~'
0232+  0575 C7 8D 05    	jne get_token_equal
0233+  0578 F7          	stosb					; store '~' into token string
0234+  0579 19 00       	mov al, 0
0235+  057B F7          	stosb					; terminate token string
0236+  057C 19 08       	mov al, TOK_TILDE
0237+  057E 3D 4C 06    	mov [tok], al			
0238+  0581 19 02       	mov al, TOKTYP_DELIMITER
0239+  0583 3D 4B 06    	mov [toktyp], al
0240+  0586 4E          	mov a, si
0241+  0587 42 49 06    	mov [prog], a		; update pointer
0242+  058A 0A D7 05    	jmp get_token_return
0243+  058D             get_token_equal:
0244+  058D B9 3D       	cmp al, '='				; check if '='
0245+  058F C7 A7 05    	jne get_token_skip
0246+  0592 F7          	stosb					; store '=' into token string
0247+  0593 19 00       	mov al, 0
0248+  0595 F7          	stosb					; terminate token string
0249+  0596 19 09       	mov al, TOK_EQUAL
0250+  0598 3D 4C 06    	mov [tok], al			
0251+  059B 19 02       	mov al, TOKTYP_DELIMITER
0252+  059D 3D 4B 06    	mov [toktyp], al
0253+  05A0 4E          	mov a, si
0254+  05A1 42 49 06    	mov [prog], a		; update pointer
0255+  05A4 0A D7 05    	jmp get_token_return
0256+  05A7             get_token_skip:
0257+  05A7 4E          	mov a, si
0258+  05A8 42 49 06    	mov [prog], a		; update pointer
0259+  05AB 0A D7 05    	jmp get_token_return
0260+  05AE             get_token_end:				; end of file token
0261+  05AE 19 14       	mov al, TOK_END
0262+  05B0 3D 4C 06    	mov [tok], al
0263+  05B3 19 06       	mov al, TOKTYP_END
0264+  05B5 3D 4B 06    	mov [toktyp], al
0265+  05B8 0A D7 05    	jmp get_token_return
0266+  05BB             is_alphanumeric:
0267+  05BB F7          	stosb
0268+  05BC F6          	lodsb
0269+  05BD 07 C4 0A    	call isalnum			;check if is alphanumeric
0270+  05C0 C6 BB 05    	jz is_alphanumeric
0271+  05C3 B9 2E       	cmp al, $2E				; check if is '.'
0272+  05C5 C6 BB 05    	je is_alphanumeric
0273+  05C8 19 00       	mov al, 0
0274+  05CA F7          	stosb
0275+  05CB 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  05CD 3D 4B 06    	mov [toktyp], al
0277+  05D0 D5 01 00    	sub si, 1
0278+  05D3 4E          	mov a, si
0279+  05D4 42 49 06    	mov [prog], a		; update pointer
0280+  05D7             get_token_return:
0281+  05D7 F0          	pop di
0282+  05D8 EF          	pop si
0283+  05D9 E7          	pop d
0284+  05DA E4          	pop a
0285+  05DB 09          	ret
0286+  05DC             get_tok_comment:
0287+  05DC F6          	lodsb
0288+  05DD B9 0A       	cmp al, $0A			; new line
0289+  05DF C7 DC 05    	jne get_tok_comment
0290+  05E2 0A C0 04    	jmp get_tok_skip_spaces
0291+  05E5             
0292+  05E5             
0293+  05E5             get_number:
0294+  05E5 D7          	push a
0295+  05E6 DA          	push d
0296+  05E7 E2          	push si
0297+  05E8 E3          	push di
0298+  05E9 19 00       	mov al, 0
0299+  05EB 3D 4D 06    	mov [tokstr], al			; nullify tokstr string
0300+  05EE 19 00       	mov al, TOK_NULL
0301+  05F0 3D 4C 06    	mov [tok], al				; nullify token
0302+  05F3 14 49 06    	mov a, [prog]
0303+  05F6 4D          	mov si, a
0304+  05F7 FD 4F 4D 06 	mov di, tokstr
0305+  05FB             get_number_skip_spaces:
0306+  05FB F6          	lodsb
0307+  05FC 07 3A 0B    	call isspace
0308+  05FF C6 FB 05    	je get_number_skip_spaces
0309+  0602 B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  0604 C7 14 06    	jne get_number_L0
0311+  0607 19 14       	mov al, TOK_END
0312+  0609 3D 4C 06    	mov [tok], al
0313+  060C 19 06       	mov al, TOKTYP_END
0314+  060E 3D 4B 06    	mov [toktyp], al
0315+  0611 0A 2B 06    	jmp get_number_return
0316+  0614             get_number_L0:
0317+  0614 F7          	stosb
0318+  0615 F6          	lodsb
0319+  0616 07 CE 0A    	call isdigit			;check if is numeric
0320+  0619 C6 14 06    	jz get_number_L0
0321+  061C 19 00       	mov al, 0
0322+  061E F7          	stosb
0323+  061F 19 05       	mov al, TOKTYP_NUMERIC
0324+  0621 3D 4B 06    	mov [toktyp], al
0325+  0624 D5 01 00    	sub si, 1
0326+  0627 4E          	mov a, si
0327+  0628 42 49 06    	mov [prog], a		; update pointer
0328+  062B             get_number_return:
0329+  062B F0          	pop di
0330+  062C EF          	pop si
0331+  062D E7          	pop d
0332+  062E E4          	pop a
0333+  062F 09          	ret
0334+  0630             
0335+  0630             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0630             ;; PUT BACK TOKEN
0337+  0630             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  0630             putback:
0339+  0630 D7          	push a
0340+  0631 E2          	push si
0341+  0632 FD 4D 4D 06 	mov si, tokstr	
0342+  0636             putback_loop:
0343+  0636 F6          	lodsb
0344+  0637 B9 00       	cmp al, 0
0345+  0639 C6 46 06    	je putback_end
0346+  063C 14 49 06    	mov a, [prog]
0347+  063F 7D          	dec a
0348+  0640 42 49 06    	mov [prog], a			; update pointer
0349+  0643 0A 36 06    	jmp putback_loop
0350+  0646             putback_end:
0351+  0646 EF          	pop si
0352+  0647 E4          	pop a
0353+  0648 09          	ret
0354+  0649             
0355+  0649             
0356+  0649             
0357+  0649             
0358+  0649 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  064B             
0360+  064B 00          toktyp: 	.db 0			; token type symbol
0361+  064C 00          tok:		.db 0			; current token symbol
0362+  064D 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  0651 00 00 00 00 
0362+  0655 00 00 00 00 
0362+  0659 00 00 00 00 
0362+  065D 00 00 00 00 
0362+  0661 00 00 00 00 
0362+  0665 00 00 00 00 
0362+  0669 00 00 00 00 
0362+  066D 00 00 00 00 
0362+  0671 00 00 00 00 
0362+  0675 00 00 00 00 
0362+  0679 00 00 00 00 
0362+  067D 00 00 00 00 
0362+  0681 00 00 00 00 
0362+  0685 00 00 00 00 
0362+  0689 00 00 00 00 
0362+  068D 00 00 00 00 
0362+  0691 00 00 00 00 
0362+  0695 00 00 00 00 
0362+  0699 00 00 00 00 
0362+  069D 00 00 00 00 
0362+  06A1 00 00 00 00 
0362+  06A5 00 00 00 00 
0362+  06A9 00 00 00 00 
0362+  06AD 00 00 00 00 
0362+  06B1 00 00 00 00 
0362+  06B5 00 00 00 00 
0362+  06B9 00 00 00 00 
0362+  06BD 00 00 00 00 
0362+  06C1 00 00 00 00 
0362+  06C5 00 00 00 00 
0362+  06C9 00 00 00 00 
0362+  06CD 00 00 00 00 
0362+  06D1 00 00 00 00 
0362+  06D5 00 00 00 00 
0362+  06D9 00 00 00 00 
0362+  06DD 00 00 00 00 
0362+  06E1 00 00 00 00 
0362+  06E5 00 00 00 00 
0362+  06E9 00 00 00 00 
0362+  06ED 00 00 00 00 
0362+  06F1 00 00 00 00 
0362+  06F5 00 00 00 00 
0362+  06F9 00 00 00 00 
0362+  06FD 00 00 00 00 
0362+  0701 00 00 00 00 
0362+  0705 00 00 00 00 
0362+  0709 00 00 00 00 
0362+  070D 00 00 00 00 
0362+  0711 00 00 00 00 
0362+  0715 00 00 00 00 
0362+  0719 00 00 00 00 
0362+  071D 00 00 00 00 
0362+  0721 00 00 00 00 
0362+  0725 00 00 00 00 
0362+  0729 00 00 00 00 
0362+  072D 00 00 00 00 
0362+  0731 00 00 00 00 
0362+  0735 00 00 00 00 
0362+  0739 00 00 00 00 
0362+  073D 00 00 00 00 
0362+  0741 00 00 00 00 
0362+  0745 00 00 00 00 
0362+  0749 00 00 00 00 
0029   074D             .include "stdio.asm"
0001+  074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  074D             ; stdio.s
0003+  074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  074D             .include "string.asm"
0001++ 074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 074D             ; string.s
0003++ 074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 074D             
0005++ 074D             
0006++ 074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 074D             ; strrev
0008++ 074D             ; reverse a string
0009++ 074D             ; D = string address
0010++ 074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 074D             ; 01234
0012++ 074D             strrev:
0013++ 074D 4B          	pusha
0014++ 074E 07 94 07    	call strlen	; length in C
0015++ 0751 12          	mov a, c
0016++ 0752 AF 01 00    	cmp a, 1
0017++ 0755 D0 6F 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0758 7D          	dec a
0019++ 0759 FD 4E       	mov si, d	; beginning of string
0020++ 075B FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 075D 59          	add d, a	; end of string
0022++ 075E 12          	mov a, c
0023++ 075F FD 9B       	shr a		; divide by 2
0024++ 0761 39          	mov c, a	; C now counts the steps
0025++ 0762             strrev_L0:
0026++ 0762 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0763 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0764 3E          	mov [d], al	; store left char into right side
0029++ 0765 1B          	mov al, bl
0030++ 0766 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0767 7E          	dec c
0032++ 0768 7F          	dec d
0033++ 0769 C2 00 00    	cmp c, 0
0034++ 076C C7 62 07    	jne strrev_L0
0035++ 076F             strrev_end:
0036++ 076F 4C          	popa
0037++ 0770 09          	ret
0038++ 0771             	
0039++ 0771             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0771             ; strchr
0041++ 0771             ; search string in D for char in AL
0042++ 0771             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0771             strchr:
0044++ 0771             strchr_L0:
0045++ 0771 32          	mov bl, [d]
0046++ 0772 C1 00       	cmp bl, 0
0047++ 0774 C6 7F 07    	je strchr_end
0048++ 0777 BA          	cmp al, bl
0049++ 0778 C6 7F 07    	je strchr_end
0050++ 077B 79          	inc d
0051++ 077C 0A 71 07    	jmp strchr_L0
0052++ 077F             strchr_end:
0053++ 077F 1B          	mov al, bl
0054++ 0780 09          	ret
0055++ 0781             
0056++ 0781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0781             ; strstr
0058++ 0781             ; find sub-string
0059++ 0781             ; str1 in SI
0060++ 0781             ; str2 in DI
0061++ 0781             ; SI points to end of source string
0062++ 0781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0781             strstr:
0064++ 0781 DB          	push al
0065++ 0782 DA          	push d
0066++ 0783 E3          	push di
0067++ 0784             strstr_loop:
0068++ 0784 F3          	cmpsb					; compare a byte of the strings
0069++ 0785 C7 90 07    	jne strstr_ret
0070++ 0788 FC 00 00    	lea d, [di + 0]
0071++ 078B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 078D C7 84 07    	jne strstr_loop				; equal chars but not at end
0073++ 0790             strstr_ret:
0074++ 0790 F0          	pop di
0075++ 0791 E7          	pop d
0076++ 0792 E8          	pop al
0077++ 0793 09          	ret
0078++ 0794             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0794             ; length of null terminated string
0080++ 0794             ; result in C
0081++ 0794             ; pointer in D
0082++ 0794             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0794             strlen:
0084++ 0794 DA          	push d
0085++ 0795 38 00 00    	mov c, 0
0086++ 0798             strlen_L1:
0087++ 0798 BD 00       	cmp byte [d], 0
0088++ 079A C6 A2 07    	je strlen_ret
0089++ 079D 79          	inc d
0090++ 079E 78          	inc c
0091++ 079F 0A 98 07    	jmp strlen_L1
0092++ 07A2             strlen_ret:
0093++ 07A2 E7          	pop d
0094++ 07A3 09          	ret
0095++ 07A4             
0096++ 07A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07A4             ; STRCMP
0098++ 07A4             ; compare two strings
0099++ 07A4             ; str1 in SI
0100++ 07A4             ; str2 in DI
0101++ 07A4             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 07A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07A4             strcmp:
0104++ 07A4 DB          	push al
0105++ 07A5 DA          	push d
0106++ 07A6 E3          	push di
0107++ 07A7 E2          	push si
0108++ 07A8             strcmp_loop:
0109++ 07A8 F3          	cmpsb					; compare a byte of the strings
0110++ 07A9 C7 B4 07    	jne strcmp_ret
0111++ 07AC FB FF FF    	lea d, [si +- 1]
0112++ 07AF BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07B1 C7 A8 07    	jne strcmp_loop				; equal chars but not at end
0114++ 07B4             strcmp_ret:
0115++ 07B4 EF          	pop si
0116++ 07B5 F0          	pop di
0117++ 07B6 E7          	pop d
0118++ 07B7 E8          	pop al
0119++ 07B8 09          	ret
0120++ 07B9             
0121++ 07B9             
0122++ 07B9             ; STRCPY
0123++ 07B9             ; copy null terminated string from SI to DI
0124++ 07B9             ; source in SI
0125++ 07B9             ; destination in DI
0126++ 07B9             strcpy:
0127++ 07B9 E2          	push si
0128++ 07BA E3          	push di
0129++ 07BB DB          	push al
0130++ 07BC             strcpy_L1:
0131++ 07BC F6          	lodsb
0132++ 07BD F7          	stosb
0133++ 07BE B9 00       	cmp al, 0
0134++ 07C0 C7 BC 07    	jne strcpy_L1
0135++ 07C3             strcpy_end:
0136++ 07C3 E8          	pop al
0137++ 07C4 F0          	pop di
0138++ 07C5 EF          	pop si
0139++ 07C6 09          	ret
0140++ 07C7             
0141++ 07C7             ; STRCAT
0142++ 07C7             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07C7             ; source in SI
0144++ 07C7             ; destination in DI
0145++ 07C7             strcat:
0146++ 07C7 E2          	push si
0147++ 07C8 E3          	push di
0148++ 07C9 D7          	push a
0149++ 07CA DA          	push d
0150++ 07CB 50          	mov a, di
0151++ 07CC 3C          	mov d, a
0152++ 07CD             strcat_goto_end_L1:
0153++ 07CD BD 00       	cmp byte[d], 0
0154++ 07CF C6 D6 07    	je strcat_start
0155++ 07D2 79          	inc d
0156++ 07D3 0A CD 07    	jmp strcat_goto_end_L1
0157++ 07D6             strcat_start:
0158++ 07D6 FD 50       	mov di, d
0159++ 07D8             strcat_L1:
0160++ 07D8 F6          	lodsb
0161++ 07D9 F7          	stosb
0162++ 07DA B9 00       	cmp al, 0
0163++ 07DC C7 D8 07    	jne strcat_L1
0164++ 07DF             strcat_end:
0165++ 07DF E7          	pop d
0166++ 07E0 E4          	pop a
0167++ 07E1 F0          	pop di
0168++ 07E2 EF          	pop si
0169++ 07E3 09          	ret
0005+  07E4             
0006+  07E4 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  07E8 34 35 36 37 
0006+  07EC 38 39 41 42 
0006+  07F0 43 44 45 46 
0007+  07F4             
0008+  07F4 01 00       table_power:.dw 1
0009+  07F6 0A 00       			.dw 10
0010+  07F8 64 00       			.dw 100
0011+  07FA E8 03       			.dw 1000
0012+  07FC 10 27       			.dw 10000
0013+  07FE             
0014+  07FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  07FE             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  07FE             ; ASCII in BL
0017+  07FE             ; result in AL
0018+  07FE             ; ascii for F = 0100 0110
0019+  07FE             ; ascii for 9 = 0011 1001
0020+  07FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  07FE             hex_ascii_encode:
0022+  07FE 1B          	mov al, bl
0023+  07FF 93 40       	test al, $40				; test if letter or number
0024+  0801 C7 07 08    	jnz hex_letter
0025+  0804 87 0F       	and al, $0F				; get number
0026+  0806 09          	ret
0027+  0807             hex_letter:
0028+  0807 87 0F       	and al, $0F				; get letter
0029+  0809 6A 09       	add al, 9
0030+  080B 09          	ret
0031+  080C             
0032+  080C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  080C             ; ATOI
0034+  080C             ; 2 letter hex string in B
0035+  080C             ; 8bit integer returned in AL
0036+  080C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  080C             atoi:
0038+  080C D8          	push b
0039+  080D 07 FE 07    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  0810 30          	mov bl, bh
0041+  0811 DB          	push al					; save a
0042+  0812 07 FE 07    	call hex_ascii_encode
0043+  0815 EA          	pop bl	
0044+  0816 FD 9E 04    	shl al, 4
0045+  0819 8C          	or al, bl
0046+  081A E5          	pop b
0047+  081B 09          	ret	
0048+  081C             
0049+  081C             
0050+  081C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  081C             ; printf
0052+  081C             ; no need for explanations!
0053+  081C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  081C             printf:
0055+  081C 09          	ret
0056+  081D             
0057+  081D             
0058+  081D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  081D             ; scanf
0060+  081D             ; no need for explanations!
0061+  081D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  081D             scanf:
0063+  081D 09          	ret
0064+  081E             
0065+  081E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  081E             ; ITOA
0067+  081E             ; 8bit value in BL
0068+  081E             ; 2 byte ASCII result in A
0069+  081E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  081E             itoa:
0071+  081E DA          	push d
0072+  081F D8          	push b
0073+  0820 A7 00       	mov bh, 0
0074+  0822 FD A4 04    	shr bl, 4	
0075+  0825 74          	mov d, b
0076+  0826 1F E4 07    	mov al, [d + s_hex_digits]
0077+  0829 23          	mov ah, al
0078+  082A             	
0079+  082A E5          	pop b
0080+  082B D8          	push b
0081+  082C A7 00       	mov bh, 0
0082+  082E FD 87 0F    	and bl, $0F
0083+  0831 74          	mov d, b
0084+  0832 1F E4 07    	mov al, [d + s_hex_digits]
0085+  0835 E5          	pop b
0086+  0836 E7          	pop d
0087+  0837 09          	ret
0088+  0838             
0089+  0838             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0838             ; HEX STRING TO BINARY
0091+  0838             ; di = destination address
0092+  0838             ; si = source
0093+  0838             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0838             hex_to_int:
0095+  0838             hex_to_int_L1:
0096+  0838 F6          	lodsb					; load from [SI] to AL
0097+  0839 B9 00       	cmp al, 0				; check if ASCII 0
0098+  083B C6 48 08    	jz hex_to_int_ret
0099+  083E 36          	mov bh, al
0100+  083F F6          	lodsb
0101+  0840 2F          	mov bl, al
0102+  0841 07 0C 08    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0844 F7          	stosb					; store AL to [DI]
0104+  0845 0A 38 08    	jmp hex_to_int_L1
0105+  0848             hex_to_int_ret:
0106+  0848 09          	ret		
0107+  0849             
0108+  0849             
0109+  0849             
0110+  0849             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0849             ; GETCHAR
0112+  0849             ; char in ah
0113+  0849             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0849             getchar:
0115+  0849 DB          	push al
0116+  084A             getchar_retry:
0117+  084A FD 0C       	sti
0118+  084C 19 01       	mov al, 1
0119+  084E 05 03       	syscall sys_io			; receive in AH
0120+  0850 B9 00       	cmp al, 0			; check if any char was receive
0121+  0852 C6 4A 08    	je getchar_retry
0122+  0855 E8          	pop al
0123+  0856 09          	ret
0124+  0857             
0125+  0857             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0857             ; PUTCHAR
0127+  0857             ; char in ah
0128+  0857             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0857             putchar:
0130+  0857 D7          	push a
0131+  0858 19 00       	mov al, 0
0132+  085A 05 03       	syscall sys_io			; char in AH
0133+  085C E4          	pop a
0134+  085D 09          	ret
0135+  085E             
0136+  085E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  085E             ;; INPUT A STRING
0138+  085E             ;; terminates with null
0139+  085E             ;; pointer in D
0140+  085E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  085E             gets:
0142+  085E D7          	push a
0143+  085F DA          	push d
0144+  0860             gets_loop:
0145+  0860 FD 0C       	sti
0146+  0862 19 01       	mov al, 1
0147+  0864 05 03       	syscall sys_io			; receive in AH
0148+  0866 B9 00       	cmp al, 0				; check error code (AL)
0149+  0868 C6 60 08    	je gets_loop			; if no char received, retry
0150+  086B             
0151+  086B 76 1B       	cmp ah, 27
0152+  086D C6 89 08    	je gets_telnet_escape
0153+  0870 76 0A       	cmp ah, $0A				; LF
0154+  0872 C6 E2 08    	je gets_end
0155+  0875 76 5C       	cmp ah, $5C				; '\\'
0156+  0877 C6 B9 08    	je gets_escape
0157+  087A             	
0158+  087A 76 08       	cmp ah, $08			; check for backspace
0159+  087C C6 85 08    	je gets_backspace
0160+  087F             
0161+  087F 1A          	mov al, ah
0162+  0880 3E          	mov [d], al
0163+  0881 79          	inc d
0164+  0882 0A 60 08    	jmp gets_loop
0165+  0885             gets_backspace:
0166+  0885 7F          	dec d
0167+  0886 0A 60 08    	jmp gets_loop
0168+  0889             gets_telnet_escape:
0169+  0889 FD 0C       	sti
0170+  088B 19 01       	mov al, 1
0171+  088D 05 03       	syscall sys_io				; receive in AH without echo
0172+  088F B9 00       	cmp al, 0					; check error code (AL)
0173+  0891 C6 89 08    	je gets_telnet_escape		; if no char received, retry
0174+  0894 76 5B       	cmp ah, '['
0175+  0896 C7 60 08    	jne gets_loop
0176+  0899             gets_telnet_escape_phase2:
0177+  0899 FD 0C       	sti
0178+  089B 19 01       	mov al, 1
0179+  089D 05 03       	syscall sys_io					; receive in AH without echo
0180+  089F B9 00       	cmp al, 0						; check error code (AL)
0181+  08A1 C6 99 08    	je gets_telnet_escape_phase2	; if no char received, retry
0182+  08A4 76 44       	cmp ah, 'D'
0183+  08A6 C6 B1 08    	je gets_left_arrow
0184+  08A9 76 43       	cmp ah, 'C'
0185+  08AB C6 B5 08    	je gets_right_arrow
0186+  08AE 0A 60 08    	jmp gets_loop
0187+  08B1             gets_left_arrow:
0188+  08B1 7F          	dec d
0189+  08B2 0A 60 08    	jmp gets_loop
0190+  08B5             gets_right_arrow:
0191+  08B5 79          	inc d
0192+  08B6 0A 60 08    	jmp gets_loop
0193+  08B9             gets_escape:
0194+  08B9 FD 0C       	sti
0195+  08BB 19 01       	mov al, 1
0196+  08BD 05 03       	syscall sys_io			; receive in AH
0197+  08BF B9 00       	cmp al, 0				; check error code (AL)
0198+  08C1 C6 B9 08    	je gets_escape			; if no char received, retry
0199+  08C4 76 6E       	cmp ah, 'n'
0200+  08C6 C6 D4 08    	je gets_LF
0201+  08C9 76 72       	cmp ah, 'r'
0202+  08CB C6 DB 08    	je gets_CR
0203+  08CE 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0204+  08CF 3E          	mov [d], al
0205+  08D0 79          	inc d
0206+  08D1 0A 60 08    	jmp gets_loop
0207+  08D4             gets_LF:
0208+  08D4 19 0A       	mov al, $0A
0209+  08D6 3E          	mov [d], al
0210+  08D7 79          	inc d
0211+  08D8 0A 60 08    	jmp gets_loop
0212+  08DB             gets_CR:
0213+  08DB 19 0D       	mov al, $0D
0214+  08DD 3E          	mov [d], al
0215+  08DE 79          	inc d
0216+  08DF 0A 60 08    	jmp gets_loop
0217+  08E2             gets_end:
0218+  08E2 19 00       	mov al, 0
0219+  08E4 3E          	mov [d], al				; terminate string
0220+  08E5 E7          	pop d
0221+  08E6 E4          	pop a
0222+  08E7 09          	ret
0223+  08E8             
0224+  08E8             
0225+  08E8             
0226+  08E8             
0227+  08E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0228+  08E8             ;; INPUT TEXT
0229+  08E8             ;; terminated with CTRL+D
0230+  08E8             ;; pointer in D
0231+  08E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0232+  08E8             gettxt:
0233+  08E8 D7          	push a
0234+  08E9 DA          	push d
0235+  08EA             gettxt_loop:
0236+  08EA 19 01       	mov al, 1
0237+  08EC 05 03       	syscall sys_io			; receive in AH
0238+  08EE B9 00       	cmp al, 0				; check error code (AL)
0239+  08F0 C6 EA 08    	je gettxt_loop		; if no char received, retry
0240+  08F3 76 04       	cmp ah, 4			; EOT
0241+  08F5 C6 33 09    	je gettxt_end
0242+  08F8 76 08       	cmp ah, $08			; check for backspace
0243+  08FA C6 2F 09    	je gettxt_backspace
0244+  08FD 76 5C       	cmp ah, $5C				; '\\'
0245+  08FF C6 08 09    	je gettxt_escape
0246+  0902 1A          	mov al, ah
0247+  0903 3E          	mov [d], al
0248+  0904 79          	inc d
0249+  0905 0A EA 08    	jmp gettxt_loop
0250+  0908             gettxt_escape:
0251+  0908 19 01       	mov al, 1
0252+  090A 05 03       	syscall sys_io			; receive in AH
0253+  090C B9 00       	cmp al, 0				; check error code (AL)
0254+  090E C6 08 09    	je gettxt_escape		; if no char received, retry
0255+  0911 76 6E       	cmp ah, 'n'
0256+  0913 C6 21 09    	je gettxt_LF
0257+  0916 76 72       	cmp ah, 'r'
0258+  0918 C6 28 09    	je gettxt_CR
0259+  091B 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0260+  091C 3E          	mov [d], al
0261+  091D 79          	inc d
0262+  091E 0A EA 08    	jmp gettxt_loop
0263+  0921             gettxt_LF:
0264+  0921 19 0A       	mov al, $0A
0265+  0923 3E          	mov [d], al
0266+  0924 79          	inc d
0267+  0925 0A EA 08    	jmp gettxt_loop
0268+  0928             gettxt_CR:
0269+  0928 19 0D       	mov al, $0D
0270+  092A 3E          	mov [d], al
0271+  092B 79          	inc d
0272+  092C 0A EA 08    	jmp gettxt_loop
0273+  092F             gettxt_backspace:
0274+  092F 7F          	dec d
0275+  0930 0A EA 08    	jmp gettxt_loop
0276+  0933             gettxt_end:
0277+  0933 19 00       	mov al, 0
0278+  0935 3E          	mov [d], al				; terminate string
0279+  0936 E7          	pop d
0280+  0937 E4          	pop a
0281+  0938 09          	ret
0282+  0939             
0283+  0939             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0284+  0939             ; PRINT NEW LINE
0285+  0939             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0939             printnl:
0287+  0939 D7          	push a
0288+  093A 10 00 0A    	mov a, $0A00
0289+  093D 05 03       	syscall sys_io
0290+  093F 10 00 0D    	mov a, $0D00
0291+  0942 05 03       	syscall sys_io
0292+  0944 E4          	pop a
0293+  0945 09          	ret
0294+  0946             
0295+  0946             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0296+  0946             ; strtoint
0297+  0946             ; 4 digit hex string number in d
0298+  0946             ; integer returned in A
0299+  0946             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0300+  0946             strtointx:
0301+  0946 D8          	push b
0302+  0947 32          	mov bl, [d]
0303+  0948 37          	mov bh, bl
0304+  0949 33 01 00    	mov bl, [d + 1]
0305+  094C 07 0C 08    	call atoi				; convert to int in AL
0306+  094F 23          	mov ah, al				; move to AH
0307+  0950 33 02 00    	mov bl, [d + 2]
0308+  0953 37          	mov bh, bl
0309+  0954 33 03 00    	mov bl, [d + 3]
0310+  0957 07 0C 08    	call atoi				; convert to int in AL
0311+  095A E5          	pop b
0312+  095B 09          	ret
0313+  095C             
0314+  095C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0315+  095C             ; strtoint
0316+  095C             ; 5 digit base10 string number in d
0317+  095C             ; integer returned in A
0318+  095C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0319+  095C             strtoint:
0320+  095C E2          	push si
0321+  095D D8          	push b
0322+  095E D9          	push c
0323+  095F DA          	push d
0324+  0960 07 94 07    	call strlen			; get string length in C
0325+  0963 7E          	dec c
0326+  0964 FD 4E       	mov si, d
0327+  0966 12          	mov a, c
0328+  0967 FD 99       	shl a
0329+  0969 3B F4 07    	mov d, table_power
0330+  096C 59          	add d, a
0331+  096D 38 00 00    	mov c, 0
0332+  0970             strtoint_L0:
0333+  0970 F6          	lodsb			; load ASCII to al
0334+  0971 B9 00       	cmp al, 0
0335+  0973 C6 86 09    	je strtoint_end
0336+  0976 6F 30       	sub al, $30		; make into integer
0337+  0978 22 00       	mov ah, 0
0338+  097A 2A          	mov b, [d]
0339+  097B AC          	mul a, b			; result in B since it fits in 16bits
0340+  097C 11          	mov a, b
0341+  097D 28          	mov b, c
0342+  097E 54          	add a, b
0343+  097F 39          	mov c, a
0344+  0980 63 02 00    	sub d, 2
0345+  0983 0A 70 09    	jmp strtoint_L0
0346+  0986             strtoint_end:
0347+  0986 12          	mov a, c
0348+  0987 E7          	pop d
0349+  0988 E6          	pop c
0350+  0989 E5          	pop b
0351+  098A EF          	pop si
0352+  098B 09          	ret
0353+  098C             
0354+  098C             
0355+  098C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  098C             ; PRINT NULL TERMINATED STRING
0357+  098C             ; pointer in D
0358+  098C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  098C             puts:
0360+  098C D7          	push a
0361+  098D DA          	push d
0362+  098E             puts_L1:
0363+  098E 1E          	mov al, [d]
0364+  098F B9 00       	cmp al, 0
0365+  0991 C6 9D 09    	jz puts_END
0366+  0994 23          	mov ah, al
0367+  0995 19 00       	mov al, 0
0368+  0997 05 03       	syscall sys_io
0369+  0999 79          	inc d
0370+  099A 0A 8E 09    	jmp puts_L1
0371+  099D             puts_END:
0372+  099D E7          	pop d
0373+  099E E4          	pop a
0374+  099F 09          	ret
0375+  09A0             
0376+  09A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0377+  09A0             ; PRINT N SIZE STRING
0378+  09A0             ; pointer in D
0379+  09A0             ; size in C
0380+  09A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0381+  09A0             putsn:
0382+  09A0 DB          	push al
0383+  09A1 DA          	push d
0384+  09A2 D9          	push c
0385+  09A3             putsn_L0:
0386+  09A3 1E          	mov al, [d]
0387+  09A4 23          	mov ah, al
0388+  09A5 19 00       	mov al, 0
0389+  09A7 05 03       	syscall sys_io
0390+  09A9 79          	inc d
0391+  09AA 7E          	dec c	
0392+  09AB C2 00 00    	cmp c, 0
0393+  09AE C7 A3 09    	jne putsn_L0
0394+  09B1             putsn_end:
0395+  09B1 E6          	pop c
0396+  09B2 E7          	pop d
0397+  09B3 E8          	pop al
0398+  09B4 09          	ret
0399+  09B5             
0400+  09B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0401+  09B5             ; print 16bit decimal number
0402+  09B5             ; input number in A
0403+  09B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  09B5             print_u16d:
0405+  09B5 D7          	push a
0406+  09B6 D8          	push b
0407+  09B7 26 10 27    	mov b, 10000
0408+  09BA AE          	div a, b			; get 10000 coeff.
0409+  09BB 07 E1 09    	call print_zero_or_space
0410+  09BE 11          	mov a, b
0411+  09BF 26 E8 03    	mov b, 1000
0412+  09C2 AE          	div a, b			; get 10000 coeff.
0413+  09C3 07 E1 09    	call print_zero_or_space
0414+  09C6 11          	mov a, b
0415+  09C7 26 64 00    	mov b, 100
0416+  09CA AE          	div a, b
0417+  09CB 07 E1 09    	call print_zero_or_space
0418+  09CE 11          	mov a, b
0419+  09CF 26 0A 00    	mov b, 10
0420+  09D2 AE          	div a, b
0421+  09D3 07 E1 09    	call print_zero_or_space
0422+  09D6 11          	mov a, b
0423+  09D7 6A 30       	add al, $30
0424+  09D9 23          	mov ah, al
0425+  09DA 19 00       	mov al, 0
0426+  09DC 05 03       	syscall sys_io	; print coeff
0427+  09DE E5          	pop b
0428+  09DF E4          	pop a
0429+  09E0 09          	ret
0430+  09E1             
0431+  09E1             
0432+  09E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  09E1             ; if A == 0, print space
0434+  09E1             ; else print A
0435+  09E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  09E1             print_zero_or_space:
0437+  09E1             	; cmp a, 0
0438+  09E1             	; jne print_number
0439+  09E1             	; mov ah, $20
0440+  09E1             	; call putchar
0441+  09E1             	; ret
0442+  09E1             print_number:
0443+  09E1 6A 30       	add al, $30
0444+  09E3 23          	mov ah, al
0445+  09E4 07 57 08    	call putchar
0446+  09E7 09          	ret
0447+  09E8             
0448+  09E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  09E8             ; PRINT 16BIT HEX INTEGER
0450+  09E8             ; integer value in reg B
0451+  09E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0452+  09E8             print_u16x:
0453+  09E8 D7          	push a
0454+  09E9 D8          	push b
0455+  09EA DD          	push bl
0456+  09EB 30          	mov bl, bh
0457+  09EC 07 1E 08    	call itoa				; convert bh to char in A
0458+  09EF 2F          	mov bl, al				; save al
0459+  09F0 19 00       	mov al, 0
0460+  09F2 05 03       	syscall sys_io				; display AH
0461+  09F4 24          	mov ah, bl				; retrieve al
0462+  09F5 19 00       	mov al, 0
0463+  09F7 05 03       	syscall sys_io				; display AL
0464+  09F9             
0465+  09F9 EA          	pop bl
0466+  09FA 07 1E 08    	call itoa				; convert bh to char in A
0467+  09FD 2F          	mov bl, al				; save al
0468+  09FE 19 00       	mov al, 0
0469+  0A00 05 03       	syscall sys_io				; display AH
0470+  0A02 24          	mov ah, bl				; retrieve al
0471+  0A03 19 00       	mov al, 0
0472+  0A05 05 03       	syscall sys_io				; display AL
0473+  0A07             
0474+  0A07 E5          	pop b
0475+  0A08 E4          	pop a
0476+  0A09 09          	ret
0477+  0A0A             
0478+  0A0A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0A0A             ; INPUT 16BIT HEX INTEGER
0480+  0A0A             ; read 16bit integer into A
0481+  0A0A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0482+  0A0A             scan_u16x:
0483+  0A0A F8 10 00    	enter 16
0484+  0A0D D8          	push b
0485+  0A0E DA          	push d
0486+  0A0F             
0487+  0A0F FA F1 FF    	lea d, [bp + -15]
0488+  0A12 07 5E 08    	call gets				; get number
0489+  0A15             
0490+  0A15 32          	mov bl, [d]
0491+  0A16 37          	mov bh, bl
0492+  0A17 33 01 00    	mov bl, [d + 1]
0493+  0A1A 07 0C 08    	call atoi				; convert to int in AL
0494+  0A1D 23          	mov ah, al				; move to AH
0495+  0A1E             
0496+  0A1E 33 02 00    	mov bl, [d + 2]
0497+  0A21 37          	mov bh, bl
0498+  0A22 33 03 00    	mov bl, [d + 3]
0499+  0A25 07 0C 08    	call atoi				; convert to int in AL
0500+  0A28             
0501+  0A28 E7          	pop d
0502+  0A29 E5          	pop b
0503+  0A2A F9          	leave
0504+  0A2B 09          	ret
0505+  0A2C             
0506+  0A2C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0A2C             ; PRINT 8bit HEX INTEGER
0508+  0A2C             ; integer value in reg bl
0509+  0A2C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0510+  0A2C             print_u8x:
0511+  0A2C D7          	push a
0512+  0A2D DD          	push bl
0513+  0A2E             
0514+  0A2E 07 1E 08    	call itoa				; convert bl to char in A
0515+  0A31 2F          	mov bl, al				; save al
0516+  0A32 19 00       	mov al, 0
0517+  0A34 05 03       	syscall sys_io				; display AH
0518+  0A36 24          	mov ah, bl				; retrieve al
0519+  0A37 19 00       	mov al, 0
0520+  0A39 05 03       	syscall sys_io				; display AL
0521+  0A3B             
0522+  0A3B EA          	pop bl
0523+  0A3C E4          	pop a
0524+  0A3D 09          	ret
0525+  0A3E             
0526+  0A3E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0A3E             ; print 8bit decimal unsigned number
0528+  0A3E             ; input number in AL
0529+  0A3E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0530+  0A3E             print_u8d:
0531+  0A3E D7          	push a
0532+  0A3F D8          	push b
0533+  0A40             
0534+  0A40 22 00       	mov ah, 0
0535+  0A42 26 64 00    	mov b, 100
0536+  0A45 AE          	div a, b
0537+  0A46 D8          	push b			; save remainder
0538+  0A47 B9 00       	cmp al, 0
0539+  0A49 C6 53 0A    	je skip100
0540+  0A4C 6A 30       	add al, $30
0541+  0A4E 23          	mov ah, al
0542+  0A4F 19 00       	mov al, 0
0543+  0A51 05 03       	syscall sys_io	; print coeff
0544+  0A53             skip100:
0545+  0A53 E4          	pop a
0546+  0A54 22 00       	mov ah, 0
0547+  0A56 26 0A 00    	mov b, 10
0548+  0A59 AE          	div a, b
0549+  0A5A D8          	push b			; save remainder
0550+  0A5B B9 00       	cmp al, 0
0551+  0A5D C6 67 0A    	je skip10
0552+  0A60 6A 30       	add al, $30
0553+  0A62 23          	mov ah, al
0554+  0A63 19 00       	mov al, 0
0555+  0A65 05 03       	syscall sys_io	; print coeff
0556+  0A67             skip10:
0557+  0A67 E4          	pop a
0558+  0A68 1B          	mov al, bl
0559+  0A69 6A 30       	add al, $30
0560+  0A6B 23          	mov ah, al
0561+  0A6C 19 00       	mov al, 0
0562+  0A6E 05 03       	syscall sys_io	; print coeff
0563+  0A70 E5          	pop b
0564+  0A71 E4          	pop a
0565+  0A72 09          	ret
0566+  0A73             
0567+  0A73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0A73             ; INPUT 8BIT HEX INTEGER
0569+  0A73             ; read 8bit integer into AL
0570+  0A73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  0A73             scan_u8x:
0572+  0A73 F8 04 00    	enter 4
0573+  0A76 D8          	push b
0574+  0A77 DA          	push d
0575+  0A78             
0576+  0A78 FA FD FF    	lea d, [bp + -3]
0577+  0A7B 07 5E 08    	call gets				; get number
0578+  0A7E             
0579+  0A7E 32          	mov bl, [d]
0580+  0A7F 37          	mov bh, bl
0581+  0A80 33 01 00    	mov bl, [d + 1]
0582+  0A83 07 0C 08    	call atoi				; convert to int in AL
0583+  0A86             
0584+  0A86 E7          	pop d
0585+  0A87 E5          	pop b
0586+  0A88 F9          	leave
0587+  0A89 09          	ret
0588+  0A8A             
0589+  0A8A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0590+  0A8A             ; input decimal number
0591+  0A8A             ; result in A
0592+  0A8A             ; 655'\0'
0593+  0A8A             ; low--------high
0594+  0A8A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0595+  0A8A             scan_u16d:
0596+  0A8A F8 08 00    	enter 8
0597+  0A8D E2          	push si
0598+  0A8E D8          	push b
0599+  0A8F D9          	push c
0600+  0A90 DA          	push d
0601+  0A91 FA F9 FF    	lea d, [bp +- 7]
0602+  0A94 07 5E 08    	call gets
0603+  0A97 07 94 07    	call strlen			; get string length in C
0604+  0A9A 7E          	dec c
0605+  0A9B FD 4E       	mov si, d
0606+  0A9D 12          	mov a, c
0607+  0A9E FD 99       	shl a
0608+  0AA0 3B F4 07    	mov d, table_power
0609+  0AA3 59          	add d, a
0610+  0AA4 38 00 00    	mov c, 0
0611+  0AA7             mul_loop:
0612+  0AA7 F6          	lodsb			; load ASCII to al
0613+  0AA8 B9 00       	cmp al, 0
0614+  0AAA C6 BD 0A    	je mul_exit
0615+  0AAD 6F 30       	sub al, $30		; make into integer
0616+  0AAF 22 00       	mov ah, 0
0617+  0AB1 2A          	mov b, [d]
0618+  0AB2 AC          	mul a, b			; result in B since it fits in 16bits
0619+  0AB3 11          	mov a, b
0620+  0AB4 28          	mov b, c
0621+  0AB5 54          	add a, b
0622+  0AB6 39          	mov c, a
0623+  0AB7 63 02 00    	sub d, 2
0624+  0ABA 0A A7 0A    	jmp mul_loop
0625+  0ABD             mul_exit:
0626+  0ABD 12          	mov a, c
0627+  0ABE E7          	pop d
0628+  0ABF E6          	pop c
0629+  0AC0 E5          	pop b
0630+  0AC1 EF          	pop si
0631+  0AC2 F9          	leave
0632+  0AC3 09          	ret
0030   0AC4             .include "ctype.asm"
0001+  0AC4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0AC4             ; ctype.s
0003+  0AC4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0AC4             
0005+  0AC4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0AC4             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0AC4             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0AC4             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0AC4             ;; characters are supported.
0010+  0AC4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0AC4             ;; isalnum 
0012+  0AC4             ;; isalpha 
0013+  0AC4             ;; islower 
0014+  0AC4             ;; isupper 
0015+  0AC4             ;; isdigit 
0016+  0AC4             ;; isxdigit
0017+  0AC4             ;; iscntrl 
0018+  0AC4             ;; isgraph 
0019+  0AC4             ;; isspace 
0020+  0AC4             ;; isblank 
0021+  0AC4             ;; isprint 
0022+  0AC4             ;; ispunct 
0023+  0AC4             ;; tolower 
0024+  0AC4             ;; toupper
0025+  0AC4             
0026+  0AC4             
0027+  0AC4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0AC4             ;; IS ALPHANUMERIC
0029+  0AC4             ;; sets ZF according with result
0030+  0AC4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0AC4             isalnum:
0032+  0AC4 07 E1 0A    	call isalpha
0033+  0AC7 C6 CD 0A    	je isalnum_exit
0034+  0ACA 07 CE 0A    	call isdigit
0035+  0ACD             isalnum_exit:
0036+  0ACD 09          	ret	
0037+  0ACE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0ACE             ;; IS DIGIT
0039+  0ACE             ;; sets ZF according with result
0040+  0ACE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0ACE             isdigit:
0042+  0ACE DB          	push al
0043+  0ACF B9 30       	cmp al, '0'
0044+  0AD1 C8 DD 0A    	jlu isdigit_false
0045+  0AD4 B9 39       	cmp al, '9'
0046+  0AD6 D1 DD 0A    	jgu isdigit_false
0047+  0AD9 87 00       	and al, 0	; set ZF
0048+  0ADB E8          	pop al
0049+  0ADC 09          	ret
0050+  0ADD             isdigit_false:
0051+  0ADD 8B 01       	or al, 1	; clear ZF
0052+  0ADF E8          	pop al
0053+  0AE0 09          	ret	
0054+  0AE1             	
0055+  0AE1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0AE1             ;; IS ALPHA
0057+  0AE1             ;; sets ZF according with result
0058+  0AE1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0AE1             isalpha:
0060+  0AE1 DB          	push al
0061+  0AE2 B9 5F       	cmp al, '_'
0062+  0AE4 C6 04 0B    	je isalpha_true
0063+  0AE7 B9 2E       	cmp al, '.'
0064+  0AE9 C6 04 0B    	je isalpha_true
0065+  0AEC B9 41       	cmp al, 'A'
0066+  0AEE C8 00 0B    	jlu isalpha_false
0067+  0AF1 B9 7A       	cmp al, 'z'
0068+  0AF3 D1 00 0B    	jgu isalpha_false
0069+  0AF6 B9 5A       	cmp al, 'Z'
0070+  0AF8 D0 04 0B    	jleu isalpha_true
0071+  0AFB B9 61       	cmp al, 'a'
0072+  0AFD C9 04 0B    	jgeu isalpha_true
0073+  0B00             isalpha_false:
0074+  0B00 8B 01       	or al, 1	; clear ZF
0075+  0B02 E8          	pop al
0076+  0B03 09          	ret
0077+  0B04             isalpha_true:
0078+  0B04 87 00       	and al, 0	; set ZF
0079+  0B06 E8          	pop al
0080+  0B07 09          	ret
0081+  0B08             
0082+  0B08             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B08             ;; IS PATH-ALPHA
0084+  0B08             ;; sets ZF according with result
0085+  0B08             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B08             ispath:
0087+  0B08 DB          	push al
0088+  0B09 07 CE 0A    	call isdigit
0089+  0B0C C6 36 0B    	je ispath_true
0090+  0B0F B9 5F       	cmp al, '_'
0091+  0B11 C6 36 0B    	je ispath_true
0092+  0B14 B9 2F       	cmp al, '/'
0093+  0B16 C6 36 0B    	je ispath_true
0094+  0B19 B9 2E       	cmp al, '.'
0095+  0B1B C6 36 0B    	je ispath_true
0096+  0B1E B9 41       	cmp al, 'A'
0097+  0B20 C8 32 0B    	jlu ispath_false
0098+  0B23 B9 7A       	cmp al, 'z'
0099+  0B25 D1 32 0B    	jgu ispath_false
0100+  0B28 B9 5A       	cmp al, 'Z'
0101+  0B2A D0 36 0B    	jleu ispath_true
0102+  0B2D B9 61       	cmp al, 'a'
0103+  0B2F C9 36 0B    	jgeu ispath_true
0104+  0B32             ispath_false:
0105+  0B32 8B 01       	or al, 1	; clear ZF
0106+  0B34 E8          	pop al
0107+  0B35 09          	ret
0108+  0B36             ispath_true:
0109+  0B36 87 00       	and al, 0	; set ZF
0110+  0B38 E8          	pop al
0111+  0B39 09          	ret
0112+  0B3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B3A             ;; IS SPACE
0114+  0B3A             ;; sets ZF according with result
0115+  0B3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B3A             isspace:
0117+  0B3A B9 20       	cmp al, $20		; ' '
0118+  0B3C C6 50 0B    	je isspace_exit
0119+  0B3F B9 09       	cmp al, $09		; '\t'
0120+  0B41 C6 50 0B    	je isspace_exit
0121+  0B44 B9 0A       	cmp al, $0A		; '\n'
0122+  0B46 C6 50 0B    	je isspace_exit
0123+  0B49 B9 0D       	cmp al, $0D		; '\r'
0124+  0B4B C6 50 0B    	je isspace_exit
0125+  0B4E B9 0B       	cmp al, $0B		; '\v'
0126+  0B50             isspace_exit:
0127+  0B50 09          	ret	
0128+  0B51             
0129+  0B51             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B51             ; TO LOWER
0131+  0B51             ; input in AL
0132+  0B51             ; output in AL
0133+  0B51             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B51             to_lower:
0135+  0B51 B9 5A       	cmp al, 'Z'
0136+  0B53 D1 58 0B    	jgu to_lower_ret
0137+  0B56 6A 20       	add al, $20				; convert to lower case
0138+  0B58             to_lower_ret:
0139+  0B58 09          	ret
0140+  0B59             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B59             ; TO UPPER
0142+  0B59             ; input in AL
0143+  0B59             ; output in AL
0144+  0B59             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B59             to_upper:
0146+  0B59 B9 61       	cmp al, 'a'
0147+  0B5B C8 60 0B    	jlu to_upper_ret
0148+  0B5E 6F 20       	sub al, $20			; convert to upper case
0149+  0B60             to_upper_ret:
0150+  0B60 09          	ret
0151+  0B61             
0031   0B61             
0032   0B61             .end
0033   0B61             
0034   0B61             
tasm: Number of errors = 0
