0001   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005   0000             
0006   0400             .org PROC_TEXT_ORG			; origin at 1024
0007   0400             
0008   0400             cmd_fg:
0009   0400 10 00 00    	mov a, 0
0010   0403 42 3C 06    	mov [prog], a			; move tokennizer pointer to the beginning of the arguments area (address 0)
0011   0406 07 9D 04    	call get_token
0012   0409 1D 40 06    	mov al, [tokstr]
0013   040C 6F 30       	sub al, $30
0014   040E 05 0A       	syscall sys_resumeproc
0015   0410             
0016   0410 05 0B       	syscall sys_terminate_proc
0017   0412             
0018   0412             
0019   0412             .include "lib/token.asm"
0001+  0412             TOKTYP_IDENTIFIER	.equ 0
0002+  0412             TOKTYP_KEYWORD		.equ 1
0003+  0412             TOKTYP_DELIMITER	.equ 2
0004+  0412             TOKTYP_STRING		.equ 3
0005+  0412             TOKTYP_CHAR			.equ 4
0006+  0412             TOKTYP_NUMERIC		.equ 5
0007+  0412             TOKTYP_END			.equ 6
0008+  0412             
0009+  0412             TOK_NULL			.equ 0
0010+  0412             TOK_FSLASH			.equ 1
0011+  0412             TOK_TIMES 			.equ 2
0012+  0412             TOK_PLUS 			.equ 3
0013+  0412             TOK_MINUS 			.equ 4
0014+  0412             TOK_DOT				.equ 5
0015+  0412             TOK_SEMI			.equ 6
0016+  0412             TOK_ANGLE			.equ 7
0017+  0412             TOK_TILDE			.equ 8
0018+  0412             TOK_EQUAL			.equ 9
0019+  0412             TOK_COLON			.equ 10
0020+  0412             TOK_COMMA			.equ 11
0021+  0412             
0022+  0412             TOK_END				.equ 20
0023+  0412             
0024+  0412             
0025+  0412             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0412             ;; read a full command argment from shell input buffer
0027+  0412             ;; argument is written into tokstr
0028+  0412             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  0412             get_arg:
0030+  0412 D7          	push a
0031+  0413 E2          	push si
0032+  0414 E3          	push di
0033+  0415 19 00       	mov al, 0
0034+  0417 3D 40 06    	mov [tokstr], al			; nullify tokstr string
0035+  041A 14 3C 06    	mov a, [prog]
0036+  041D 4D          	mov si, a
0037+  041E FD 4F 40 06 	mov di, tokstr
0038+  0422             get_arg_skip_spaces:
0039+  0422 F6          	lodsb
0040+  0423 07 36 0B    	call isspace
0041+  0426 C6 22 04    	je get_arg_skip_spaces
0042+  0429             get_arg_L0:
0043+  0429 B9 3B       	cmp al, $3B				; check if is ';'
0044+  042B C6 38 04    	je get_arg_end
0045+  042E B9 00       	cmp al, 0
0046+  0430 C6 38 04    	je get_arg_end			; check if end of input
0047+  0433 F7          	stosb
0048+  0434 F6          	lodsb
0049+  0435 0A 29 04    	jmp get_arg_L0
0050+  0438             get_arg_end:
0051+  0438 19 00       	mov al, 0
0052+  043A F7          	stosb
0053+  043B D5 01 00    	sub si, 1
0054+  043E 4E          	mov a, si
0055+  043F 42 3C 06    	mov [prog], a		; update pointer
0056+  0442 F0          	pop di
0057+  0443 EF          	pop si
0058+  0444 E4          	pop a
0059+  0445 09          	ret
0060+  0446             
0061+  0446             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0446             ;; read a path formation from shell input buffer
0063+  0446             ;; path is written into tokstr
0064+  0446             ;; /usr/bin
0065+  0446             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0446             get_path:
0067+  0446 D7          	push a
0068+  0447 E2          	push si
0069+  0448 E3          	push di
0070+  0449 19 00       	mov al, 0
0071+  044B 3D 40 06    	mov [tokstr], al			; nullify tokstr string
0072+  044E 14 3C 06    	mov a, [prog]
0073+  0451 4D          	mov si, a
0074+  0452 FD 4F 40 06 	mov di, tokstr
0075+  0456             get_path_skip_spaces:
0076+  0456 F6          	lodsb
0077+  0457 07 36 0B    	call isspace
0078+  045A C6 56 04    	je get_path_skip_spaces
0079+  045D             get_path_is_pathchar:
0080+  045D F7          	stosb
0081+  045E F6          	lodsb
0082+  045F 07 C0 0A    	call isalnum			;check if is alphanumeric
0083+  0462 C6 5D 04    	je get_path_is_pathchar
0084+  0465 B9 2F       	cmp al, '/'				; check if is '/'
0085+  0467 C6 5D 04    	je get_path_is_pathchar
0086+  046A 19 00       	mov al, 0
0087+  046C F7          	stosb
0088+  046D D5 01 00    	sub si, 1
0089+  0470 4E          	mov a, si
0090+  0471 42 3C 06    	mov [prog], a		; update pointer
0091+  0474             get_path_end:
0092+  0474 F0          	pop di
0093+  0475 EF          	pop si
0094+  0476 E4          	pop a
0095+  0477 09          	ret
0096+  0478             
0097+  0478             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0478             ;; read a line
0099+  0478             ;; line is written into tokstr
0100+  0478             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0478             get_line:
0102+  0478 D7          	push a
0103+  0479 E2          	push si
0104+  047A E3          	push di
0105+  047B 19 00       	mov al, 0
0106+  047D 3D 40 06    	mov [tokstr], al			; nullify tokstr string
0107+  0480 14 3C 06    	mov a, [prog]
0108+  0483 4D          	mov si, a
0109+  0484 FD 4F 40 06 	mov di, tokstr
0110+  0488             get_line_L0:
0111+  0488 F6          	lodsb
0112+  0489 B9 0A       	cmp al, $0A		; check for new line
0113+  048B C6 92 04    	je get_line_exit
0114+  048E F7          	stosb
0115+  048F 0A 88 04    	jmp get_line_L0
0116+  0492             get_line_exit:
0117+  0492 19 00       	mov al, 0
0118+  0494 F7          	stosb
0119+  0495 4E          	mov a, si
0120+  0496 42 3C 06    	mov [prog], a		; update pointer
0121+  0499 F0          	pop di
0122+  049A EF          	pop si
0123+  049B E4          	pop a
0124+  049C 09          	ret
0125+  049D             
0126+  049D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  049D             ;; token parser
0128+  049D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  049D             get_token:
0130+  049D D7          	push a
0131+  049E DA          	push d
0132+  049F E2          	push si
0133+  04A0 E3          	push di
0134+  04A1 19 00       	mov al, 0
0135+  04A3 3D 40 06    	mov [tokstr], al			; nullify tokstr string
0136+  04A6 19 00       	mov al, TOK_NULL
0137+  04A8 3D 3F 06    	mov [tok], al				; nullify token
0138+  04AB 14 3C 06    	mov a, [prog]
0139+  04AE 4D          	mov si, a
0140+  04AF FD 4F 40 06 	mov di, tokstr
0141+  04B3             get_tok_skip_spaces:
0142+  04B3 F6          	lodsb
0143+  04B4 07 36 0B    	call isspace
0144+  04B7 C6 B3 04    	je get_tok_skip_spaces
0145+  04BA B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  04BC C6 A1 05    	je get_token_end
0147+  04BF B9 23       	cmp al, '#'			; comments!
0148+  04C1 C6 CF 05    	je get_tok_comment
0149+  04C4 07 C0 0A    	call isalnum
0150+  04C7 C6 AE 05    	jz is_alphanumeric
0151+  04CA             ; other token types
0152+  04CA             get_token_slash:
0153+  04CA B9 2F       	cmp al, '/'				; check if '/'
0154+  04CC C7 E4 04    	jne get_token_minus
0155+  04CF F7          	stosb					; store '/' into token string
0156+  04D0 19 00       	mov al, 0
0157+  04D2 F7          	stosb					; terminate token string
0158+  04D3 19 01       	mov al, TOK_FSLASH
0159+  04D5 3D 3F 06    	mov [tok], al			
0160+  04D8 19 02       	mov al, TOKTYP_DELIMITER
0161+  04DA 3D 3E 06    	mov [toktyp], al
0162+  04DD 4E          	mov a, si
0163+  04DE 42 3C 06    	mov [prog], a		; update pointer
0164+  04E1 0A CA 05    	jmp get_token_return
0165+  04E4             get_token_minus:
0166+  04E4 B9 2D       	cmp al, '-'				; check if '-'
0167+  04E6 C7 FE 04    	jne get_token_comma
0168+  04E9 F7          	stosb					; store '-' into token string
0169+  04EA 19 00       	mov al, 0
0170+  04EC F7          	stosb					; terminate token string
0171+  04ED 19 04       	mov al, TOK_MINUS
0172+  04EF 3D 3F 06    	mov [tok], al			
0173+  04F2 19 02       	mov al, TOKTYP_DELIMITER
0174+  04F4 3D 3E 06    	mov [toktyp], al
0175+  04F7 4E          	mov a, si
0176+  04F8 42 3C 06    	mov [prog], a		; update pointer
0177+  04FB 0A CA 05    	jmp get_token_return
0178+  04FE             get_token_comma:
0179+  04FE B9 2C       	cmp al, ','				; check if ','
0180+  0500 C7 18 05    	jne get_token_semi
0181+  0503 F7          	stosb					; store ',' into token string
0182+  0504 19 00       	mov al, 0
0183+  0506 F7          	stosb					; terminate token string
0184+  0507 19 0B       	mov al, TOK_COMMA
0185+  0509 3D 3F 06    	mov [tok], al			
0186+  050C 19 02       	mov al, TOKTYP_DELIMITER
0187+  050E 3D 3E 06    	mov [toktyp], al
0188+  0511 4E          	mov a, si
0189+  0512 42 3C 06    	mov [prog], a		; update pointer
0190+  0515 0A CA 05    	jmp get_token_return
0191+  0518             get_token_semi:
0192+  0518 B9 3B       	cmp al, $3B				; check if ';'
0193+  051A C7 32 05    	jne get_token_colon
0194+  051D F7          	stosb					; store ';' into token string
0195+  051E 19 00       	mov al, 0
0196+  0520 F7          	stosb					; terminate token string
0197+  0521 19 06       	mov al, TOK_SEMI
0198+  0523 3D 3F 06    	mov [tok], al			
0199+  0526 19 02       	mov al, TOKTYP_DELIMITER
0200+  0528 3D 3E 06    	mov [toktyp], al
0201+  052B 4E          	mov a, si
0202+  052C 42 3C 06    	mov [prog], a		; update pointer
0203+  052F 0A CA 05    	jmp get_token_return
0204+  0532             get_token_colon:
0205+  0532 B9 3A       	cmp al, $3A				; check if ':'
0206+  0534 C7 4C 05    	jne get_token_angle
0207+  0537 F7          	stosb					; store ':' into token string
0208+  0538 19 00       	mov al, 0
0209+  053A F7          	stosb					; terminate token string
0210+  053B 19 0A       	mov al, TOK_COLON
0211+  053D 3D 3F 06    	mov [tok], al			
0212+  0540 19 02       	mov al, TOKTYP_DELIMITER
0213+  0542 3D 3E 06    	mov [toktyp], al
0214+  0545 4E          	mov a, si
0215+  0546 42 3C 06    	mov [prog], a		; update pointer
0216+  0549 0A CA 05    	jmp get_token_return
0217+  054C             get_token_angle:
0218+  054C B9 3E       	cmp al, $3E				; check if '>'
0219+  054E C7 66 05    	jne get_token_tilde
0220+  0551 F7          	stosb					; store '>' into token string
0221+  0552 19 00       	mov al, 0
0222+  0554 F7          	stosb					; terminate token string
0223+  0555 19 07       	mov al, TOK_ANGLE
0224+  0557 3D 3F 06    	mov [tok], al			
0225+  055A 19 02       	mov al, TOKTYP_DELIMITER
0226+  055C 3D 3E 06    	mov [toktyp], al
0227+  055F 4E          	mov a, si
0228+  0560 42 3C 06    	mov [prog], a		; update pointer
0229+  0563 0A CA 05    	jmp get_token_return
0230+  0566             get_token_tilde:
0231+  0566 B9 7E       	cmp al, '~'				; check if '~'
0232+  0568 C7 80 05    	jne get_token_equal
0233+  056B F7          	stosb					; store '~' into token string
0234+  056C 19 00       	mov al, 0
0235+  056E F7          	stosb					; terminate token string
0236+  056F 19 08       	mov al, TOK_TILDE
0237+  0571 3D 3F 06    	mov [tok], al			
0238+  0574 19 02       	mov al, TOKTYP_DELIMITER
0239+  0576 3D 3E 06    	mov [toktyp], al
0240+  0579 4E          	mov a, si
0241+  057A 42 3C 06    	mov [prog], a		; update pointer
0242+  057D 0A CA 05    	jmp get_token_return
0243+  0580             get_token_equal:
0244+  0580 B9 3D       	cmp al, '='				; check if '='
0245+  0582 C7 9A 05    	jne get_token_skip
0246+  0585 F7          	stosb					; store '=' into token string
0247+  0586 19 00       	mov al, 0
0248+  0588 F7          	stosb					; terminate token string
0249+  0589 19 09       	mov al, TOK_EQUAL
0250+  058B 3D 3F 06    	mov [tok], al			
0251+  058E 19 02       	mov al, TOKTYP_DELIMITER
0252+  0590 3D 3E 06    	mov [toktyp], al
0253+  0593 4E          	mov a, si
0254+  0594 42 3C 06    	mov [prog], a		; update pointer
0255+  0597 0A CA 05    	jmp get_token_return
0256+  059A             get_token_skip:
0257+  059A 4E          	mov a, si
0258+  059B 42 3C 06    	mov [prog], a		; update pointer
0259+  059E 0A CA 05    	jmp get_token_return
0260+  05A1             get_token_end:				; end of file token
0261+  05A1 19 14       	mov al, TOK_END
0262+  05A3 3D 3F 06    	mov [tok], al
0263+  05A6 19 06       	mov al, TOKTYP_END
0264+  05A8 3D 3E 06    	mov [toktyp], al
0265+  05AB 0A CA 05    	jmp get_token_return
0266+  05AE             is_alphanumeric:
0267+  05AE F7          	stosb
0268+  05AF F6          	lodsb
0269+  05B0 07 C0 0A    	call isalnum			;check if is alphanumeric
0270+  05B3 C6 AE 05    	jz is_alphanumeric
0271+  05B6 B9 2E       	cmp al, $2E				; check if is '.'
0272+  05B8 C6 AE 05    	je is_alphanumeric
0273+  05BB 19 00       	mov al, 0
0274+  05BD F7          	stosb
0275+  05BE 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  05C0 3D 3E 06    	mov [toktyp], al
0277+  05C3 D5 01 00    	sub si, 1
0278+  05C6 4E          	mov a, si
0279+  05C7 42 3C 06    	mov [prog], a		; update pointer
0280+  05CA             get_token_return:
0281+  05CA F0          	pop di
0282+  05CB EF          	pop si
0283+  05CC E7          	pop d
0284+  05CD E4          	pop a
0285+  05CE 09          	ret
0286+  05CF             get_tok_comment:
0287+  05CF F6          	lodsb
0288+  05D0 B9 0A       	cmp al, $0A			; new line
0289+  05D2 C7 CF 05    	jne get_tok_comment
0290+  05D5 0A B3 04    	jmp get_tok_skip_spaces
0291+  05D8             
0292+  05D8             
0293+  05D8             get_number:
0294+  05D8 D7          	push a
0295+  05D9 DA          	push d
0296+  05DA E2          	push si
0297+  05DB E3          	push di
0298+  05DC 19 00       	mov al, 0
0299+  05DE 3D 40 06    	mov [tokstr], al			; nullify tokstr string
0300+  05E1 19 00       	mov al, TOK_NULL
0301+  05E3 3D 3F 06    	mov [tok], al				; nullify token
0302+  05E6 14 3C 06    	mov a, [prog]
0303+  05E9 4D          	mov si, a
0304+  05EA FD 4F 40 06 	mov di, tokstr
0305+  05EE             get_number_skip_spaces:
0306+  05EE F6          	lodsb
0307+  05EF 07 36 0B    	call isspace
0308+  05F2 C6 EE 05    	je get_number_skip_spaces
0309+  05F5 B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  05F7 C7 07 06    	jne get_number_L0
0311+  05FA 19 14       	mov al, TOK_END
0312+  05FC 3D 3F 06    	mov [tok], al
0313+  05FF 19 06       	mov al, TOKTYP_END
0314+  0601 3D 3E 06    	mov [toktyp], al
0315+  0604 0A 1E 06    	jmp get_number_return
0316+  0607             get_number_L0:
0317+  0607 F7          	stosb
0318+  0608 F6          	lodsb
0319+  0609 07 CA 0A    	call isdigit			;check if is numeric
0320+  060C C6 07 06    	jz get_number_L0
0321+  060F 19 00       	mov al, 0
0322+  0611 F7          	stosb
0323+  0612 19 05       	mov al, TOKTYP_NUMERIC
0324+  0614 3D 3E 06    	mov [toktyp], al
0325+  0617 D5 01 00    	sub si, 1
0326+  061A 4E          	mov a, si
0327+  061B 42 3C 06    	mov [prog], a		; update pointer
0328+  061E             get_number_return:
0329+  061E F0          	pop di
0330+  061F EF          	pop si
0331+  0620 E7          	pop d
0332+  0621 E4          	pop a
0333+  0622 09          	ret
0334+  0623             
0335+  0623             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0623             ;; PUT BACK TOKEN
0337+  0623             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  0623             putback:
0339+  0623 D7          	push a
0340+  0624 E2          	push si
0341+  0625 FD 4D 40 06 	mov si, tokstr	
0342+  0629             putback_loop:
0343+  0629 F6          	lodsb
0344+  062A B9 00       	cmp al, 0
0345+  062C C6 39 06    	je putback_end
0346+  062F 14 3C 06    	mov a, [prog]
0347+  0632 7D          	dec a
0348+  0633 42 3C 06    	mov [prog], a			; update pointer
0349+  0636 0A 29 06    	jmp putback_loop
0350+  0639             putback_end:
0351+  0639 EF          	pop si
0352+  063A E4          	pop a
0353+  063B 09          	ret
0354+  063C             
0355+  063C             
0356+  063C             
0357+  063C             
0358+  063C 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  063E             
0360+  063E 00          toktyp: 	.db 0			; token type symbol
0361+  063F 00          tok:		.db 0			; current token symbol
0362+  0640 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  0644 00 00 00 00 
0362+  0648 00 00 00 00 
0362+  064C 00 00 00 00 
0362+  0650 00 00 00 00 
0362+  0654 00 00 00 00 
0362+  0658 00 00 00 00 
0362+  065C 00 00 00 00 
0362+  0660 00 00 00 00 
0362+  0664 00 00 00 00 
0362+  0668 00 00 00 00 
0362+  066C 00 00 00 00 
0362+  0670 00 00 00 00 
0362+  0674 00 00 00 00 
0362+  0678 00 00 00 00 
0362+  067C 00 00 00 00 
0362+  0680 00 00 00 00 
0362+  0684 00 00 00 00 
0362+  0688 00 00 00 00 
0362+  068C 00 00 00 00 
0362+  0690 00 00 00 00 
0362+  0694 00 00 00 00 
0362+  0698 00 00 00 00 
0362+  069C 00 00 00 00 
0362+  06A0 00 00 00 00 
0362+  06A4 00 00 00 00 
0362+  06A8 00 00 00 00 
0362+  06AC 00 00 00 00 
0362+  06B0 00 00 00 00 
0362+  06B4 00 00 00 00 
0362+  06B8 00 00 00 00 
0362+  06BC 00 00 00 00 
0362+  06C0 00 00 00 00 
0362+  06C4 00 00 00 00 
0362+  06C8 00 00 00 00 
0362+  06CC 00 00 00 00 
0362+  06D0 00 00 00 00 
0362+  06D4 00 00 00 00 
0362+  06D8 00 00 00 00 
0362+  06DC 00 00 00 00 
0362+  06E0 00 00 00 00 
0362+  06E4 00 00 00 00 
0362+  06E8 00 00 00 00 
0362+  06EC 00 00 00 00 
0362+  06F0 00 00 00 00 
0362+  06F4 00 00 00 00 
0362+  06F8 00 00 00 00 
0362+  06FC 00 00 00 00 
0362+  0700 00 00 00 00 
0362+  0704 00 00 00 00 
0362+  0708 00 00 00 00 
0362+  070C 00 00 00 00 
0362+  0710 00 00 00 00 
0362+  0714 00 00 00 00 
0362+  0718 00 00 00 00 
0362+  071C 00 00 00 00 
0362+  0720 00 00 00 00 
0362+  0724 00 00 00 00 
0362+  0728 00 00 00 00 
0362+  072C 00 00 00 00 
0362+  0730 00 00 00 00 
0362+  0734 00 00 00 00 
0362+  0738 00 00 00 00 
0362+  073C 00 00 00 00 
0020   0740             .include "lib/stdio.asm"
0001+  0740             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0740             ; stdio.s
0003+  0740             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0740             .include "string.asm"
0001++ 0740             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0740             ; string.s
0003++ 0740             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0740             
0005++ 0740             
0006++ 0740             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0740             ; strrev
0008++ 0740             ; reverse a string
0009++ 0740             ; D = string address
0010++ 0740             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0740             ; 01234
0012++ 0740             strrev:
0013++ 0740 4B          	pusha
0014++ 0741 07 87 07    	call strlen	; length in C
0015++ 0744 12          	mov a, c
0016++ 0745 AF 01 00    	cmp a, 1
0017++ 0748 D0 62 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 074B 7D          	dec a
0019++ 074C FD 4E       	mov si, d	; beginning of string
0020++ 074E FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0750 59          	add d, a	; end of string
0022++ 0751 12          	mov a, c
0023++ 0752 FD 9B       	shr a		; divide by 2
0024++ 0754 39          	mov c, a	; C now counts the steps
0025++ 0755             strrev_L0:
0026++ 0755 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0756 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0757 3E          	mov [d], al	; store left char into right side
0029++ 0758 1B          	mov al, bl
0030++ 0759 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 075A 7E          	dec c
0032++ 075B 7F          	dec d
0033++ 075C C2 00 00    	cmp c, 0
0034++ 075F C7 55 07    	jne strrev_L0
0035++ 0762             strrev_end:
0036++ 0762 4C          	popa
0037++ 0763 09          	ret
0038++ 0764             	
0039++ 0764             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0764             ; strchr
0041++ 0764             ; search string in D for char in AL
0042++ 0764             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0764             strchr:
0044++ 0764             strchr_L0:
0045++ 0764 32          	mov bl, [d]
0046++ 0765 C1 00       	cmp bl, 0
0047++ 0767 C6 72 07    	je strchr_end
0048++ 076A BA          	cmp al, bl
0049++ 076B C6 72 07    	je strchr_end
0050++ 076E 79          	inc d
0051++ 076F 0A 64 07    	jmp strchr_L0
0052++ 0772             strchr_end:
0053++ 0772 1B          	mov al, bl
0054++ 0773 09          	ret
0055++ 0774             
0056++ 0774             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0774             ; strstr
0058++ 0774             ; find sub-string
0059++ 0774             ; str1 in SI
0060++ 0774             ; str2 in DI
0061++ 0774             ; SI points to end of source string
0062++ 0774             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0774             strstr:
0064++ 0774 DB          	push al
0065++ 0775 DA          	push d
0066++ 0776 E3          	push di
0067++ 0777             strstr_loop:
0068++ 0777 F3          	cmpsb					; compare a byte of the strings
0069++ 0778 C7 83 07    	jne strstr_ret
0070++ 077B FC 00 00    	lea d, [di + 0]
0071++ 077E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0780 C7 77 07    	jne strstr_loop				; equal chars but not at end
0073++ 0783             strstr_ret:
0074++ 0783 F0          	pop di
0075++ 0784 E7          	pop d
0076++ 0785 E8          	pop al
0077++ 0786 09          	ret
0078++ 0787             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0787             ; length of null terminated string
0080++ 0787             ; result in C
0081++ 0787             ; pointer in D
0082++ 0787             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0787             strlen:
0084++ 0787 DA          	push d
0085++ 0788 38 00 00    	mov c, 0
0086++ 078B             strlen_L1:
0087++ 078B BD 00       	cmp byte [d], 0
0088++ 078D C6 95 07    	je strlen_ret
0089++ 0790 79          	inc d
0090++ 0791 78          	inc c
0091++ 0792 0A 8B 07    	jmp strlen_L1
0092++ 0795             strlen_ret:
0093++ 0795 E7          	pop d
0094++ 0796 09          	ret
0095++ 0797             
0096++ 0797             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0797             ; STRCMP
0098++ 0797             ; compare two strings
0099++ 0797             ; str1 in SI
0100++ 0797             ; str2 in DI
0101++ 0797             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0797             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0797             strcmp:
0104++ 0797 DB          	push al
0105++ 0798 DA          	push d
0106++ 0799 E3          	push di
0107++ 079A E2          	push si
0108++ 079B             strcmp_loop:
0109++ 079B F3          	cmpsb					; compare a byte of the strings
0110++ 079C C7 A7 07    	jne strcmp_ret
0111++ 079F FB FF FF    	lea d, [si +- 1]
0112++ 07A2 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07A4 C7 9B 07    	jne strcmp_loop				; equal chars but not at end
0114++ 07A7             strcmp_ret:
0115++ 07A7 EF          	pop si
0116++ 07A8 F0          	pop di
0117++ 07A9 E7          	pop d
0118++ 07AA E8          	pop al
0119++ 07AB 09          	ret
0120++ 07AC             
0121++ 07AC             
0122++ 07AC             ; STRCPY
0123++ 07AC             ; copy null terminated string from SI to DI
0124++ 07AC             ; source in SI
0125++ 07AC             ; destination in DI
0126++ 07AC             strcpy:
0127++ 07AC E2          	push si
0128++ 07AD E3          	push di
0129++ 07AE DB          	push al
0130++ 07AF             strcpy_L1:
0131++ 07AF F6          	lodsb
0132++ 07B0 F7          	stosb
0133++ 07B1 B9 00       	cmp al, 0
0134++ 07B3 C7 AF 07    	jne strcpy_L1
0135++ 07B6             strcpy_end:
0136++ 07B6 E8          	pop al
0137++ 07B7 F0          	pop di
0138++ 07B8 EF          	pop si
0139++ 07B9 09          	ret
0140++ 07BA             
0141++ 07BA             ; STRCAT
0142++ 07BA             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07BA             ; source in SI
0144++ 07BA             ; destination in DI
0145++ 07BA             strcat:
0146++ 07BA E2          	push si
0147++ 07BB E3          	push di
0148++ 07BC D7          	push a
0149++ 07BD DA          	push d
0150++ 07BE 50          	mov a, di
0151++ 07BF 3C          	mov d, a
0152++ 07C0             strcat_goto_end_L1:
0153++ 07C0 BD 00       	cmp byte[d], 0
0154++ 07C2 C6 C9 07    	je strcat_start
0155++ 07C5 79          	inc d
0156++ 07C6 0A C0 07    	jmp strcat_goto_end_L1
0157++ 07C9             strcat_start:
0158++ 07C9 FD 50       	mov di, d
0159++ 07CB             strcat_L1:
0160++ 07CB F6          	lodsb
0161++ 07CC F7          	stosb
0162++ 07CD B9 00       	cmp al, 0
0163++ 07CF C7 CB 07    	jne strcat_L1
0164++ 07D2             strcat_end:
0165++ 07D2 E7          	pop d
0166++ 07D3 E4          	pop a
0167++ 07D4 F0          	pop di
0168++ 07D5 EF          	pop si
0169++ 07D6 09          	ret
0005+  07D7             
0006+  07D7 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  07DB 34 35 36 37 
0006+  07DF 38 39 41 42 
0006+  07E3 43 44 45 46 
0007+  07E7 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  07EB 1B 5B 48 00 
0008+  07EF             
0009+  07EF 01 00       table_power:.dw 1
0010+  07F1 0A 00       			.dw 10
0011+  07F3 64 00       			.dw 100
0012+  07F5 E8 03       			.dw 1000
0013+  07F7 10 27       			.dw 10000
0014+  07F9             
0015+  07F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  07F9             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  07F9             ; ASCII in BL
0018+  07F9             ; result in AL
0019+  07F9             ; ascii for F = 0100 0110
0020+  07F9             ; ascii for 9 = 0011 1001
0021+  07F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  07F9             hex_ascii_encode:
0023+  07F9 1B          	mov al, bl
0024+  07FA 93 40       	test al, $40				; test if letter or number
0025+  07FC C7 02 08    	jnz hex_letter
0026+  07FF 87 0F       	and al, $0F				; get number
0027+  0801 09          	ret
0028+  0802             hex_letter:
0029+  0802 87 0F       	and al, $0F				; get letter
0030+  0804 6A 09       	add al, 9
0031+  0806 09          	ret
0032+  0807             
0033+  0807             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0807             ; ATOI
0035+  0807             ; 2 letter hex string in B
0036+  0807             ; 8bit integer returned in AL
0037+  0807             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0807             atoi:
0039+  0807 D8          	push b
0040+  0808 07 F9 07    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  080B 30          	mov bl, bh
0042+  080C DB          	push al					; save a
0043+  080D 07 F9 07    	call hex_ascii_encode
0044+  0810 EA          	pop bl	
0045+  0811 FD 9E 04    	shl al, 4
0046+  0814 8C          	or al, bl
0047+  0815 E5          	pop b
0048+  0816 09          	ret	
0049+  0817             
0050+  0817             
0051+  0817             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0817             ; printf
0053+  0817             ; no need for explanations!
0054+  0817             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0817             printf:
0056+  0817 09          	ret
0057+  0818             
0058+  0818             
0059+  0818             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0818             ; scanf
0061+  0818             ; no need for explanations!
0062+  0818             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0818             scanf:
0064+  0818 09          	ret
0065+  0819             
0066+  0819             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0819             ; ITOA
0068+  0819             ; 8bit value in BL
0069+  0819             ; 2 byte ASCII result in A
0070+  0819             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0819             itoa:
0072+  0819 DA          	push d
0073+  081A D8          	push b
0074+  081B A7 00       	mov bh, 0
0075+  081D FD A4 04    	shr bl, 4	
0076+  0820 74          	mov d, b
0077+  0821 1F D7 07    	mov al, [d + s_hex_digits]
0078+  0824 23          	mov ah, al
0079+  0825             	
0080+  0825 E5          	pop b
0081+  0826 D8          	push b
0082+  0827 A7 00       	mov bh, 0
0083+  0829 FD 87 0F    	and bl, $0F
0084+  082C 74          	mov d, b
0085+  082D 1F D7 07    	mov al, [d + s_hex_digits]
0086+  0830 E5          	pop b
0087+  0831 E7          	pop d
0088+  0832 09          	ret
0089+  0833             
0090+  0833             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0833             ; HEX STRING TO BINARY
0092+  0833             ; di = destination address
0093+  0833             ; si = source
0094+  0833             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0833             hex_to_int:
0096+  0833             hex_to_int_L1:
0097+  0833 F6          	lodsb					; load from [SI] to AL
0098+  0834 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0836 C6 43 08    	jz hex_to_int_ret
0100+  0839 36          	mov bh, al
0101+  083A F6          	lodsb
0102+  083B 2F          	mov bl, al
0103+  083C 07 07 08    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  083F F7          	stosb					; store AL to [DI]
0105+  0840 0A 33 08    	jmp hex_to_int_L1
0106+  0843             hex_to_int_ret:
0107+  0843 09          	ret		
0108+  0844             
0109+  0844             
0110+  0844             
0111+  0844             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0844             ; GETCHAR
0113+  0844             ; char in ah
0114+  0844             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0844             getchar:
0116+  0844 DB          	push al
0117+  0845             getchar_retry:
0118+  0845 FD 0C       	sti
0119+  0847 19 01       	mov al, 1
0120+  0849 05 03       	syscall sys_io			; receive in AH
0121+  084B B9 00       	cmp al, 0			; check if any char was receive
0122+  084D C6 45 08    	je getchar_retry
0123+  0850 E8          	pop al
0124+  0851 09          	ret
0125+  0852             
0126+  0852             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0852             ; PUTCHAR
0128+  0852             ; char in ah
0129+  0852             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0852             putchar:
0131+  0852 D7          	push a
0132+  0853 19 00       	mov al, 0
0133+  0855 05 03       	syscall sys_io			; char in AH
0134+  0857 E4          	pop a
0135+  0858 09          	ret
0136+  0859             
0137+  0859             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0859             ;; INPUT A STRING
0139+  0859             ;; terminates with null
0140+  0859             ;; pointer in D
0141+  0859             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0859             gets:
0143+  0859 D7          	push a
0144+  085A DA          	push d
0145+  085B             gets_loop:
0146+  085B FD 0C       	sti
0147+  085D 19 01       	mov al, 1
0148+  085F 05 03       	syscall sys_io			; receive in AH
0149+  0861 B9 00       	cmp al, 0				; check error code (AL)
0150+  0863 C6 5B 08    	je gets_loop			; if no char received, retry
0151+  0866             
0152+  0866 76 1B       	cmp ah, 27
0153+  0868 C6 89 08    	je gets_telnet_escape
0154+  086B 76 0A       	cmp ah, $0A				; LF
0155+  086D C6 E2 08    	je gets_end
0156+  0870 76 0D       	cmp ah, $0D				; CR
0157+  0872 C6 E2 08    	je gets_end
0158+  0875 76 5C       	cmp ah, $5C				; '\\'
0159+  0877 C6 B9 08    	je gets_escape
0160+  087A             	
0161+  087A 76 08       	cmp ah, $08			; check for backspace
0162+  087C C6 85 08    	je gets_backspace
0163+  087F             
0164+  087F 1A          	mov al, ah
0165+  0880 3E          	mov [d], al
0166+  0881 79          	inc d
0167+  0882 0A 5B 08    	jmp gets_loop
0168+  0885             gets_backspace:
0169+  0885 7F          	dec d
0170+  0886 0A 5B 08    	jmp gets_loop
0171+  0889             gets_telnet_escape:
0172+  0889 FD 0C       	sti
0173+  088B 19 01       	mov al, 1
0174+  088D 05 03       	syscall sys_io				; receive in AH without echo
0175+  088F B9 00       	cmp al, 0					; check error code (AL)
0176+  0891 C6 89 08    	je gets_telnet_escape		; if no char received, retry
0177+  0894 76 5B       	cmp ah, '['
0178+  0896 C7 5B 08    	jne gets_loop
0179+  0899             gets_telnet_escape_phase2:
0180+  0899 FD 0C       	sti
0181+  089B 19 01       	mov al, 1
0182+  089D 05 03       	syscall sys_io					; receive in AH without echo
0183+  089F B9 00       	cmp al, 0						; check error code (AL)
0184+  08A1 C6 99 08    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  08A4 76 44       	cmp ah, 'D'
0186+  08A6 C6 B1 08    	je gets_left_arrow
0187+  08A9 76 43       	cmp ah, 'C'
0188+  08AB C6 B5 08    	je gets_right_arrow
0189+  08AE 0A 5B 08    	jmp gets_loop
0190+  08B1             gets_left_arrow:
0191+  08B1 7F          	dec d
0192+  08B2 0A 5B 08    	jmp gets_loop
0193+  08B5             gets_right_arrow:
0194+  08B5 79          	inc d
0195+  08B6 0A 5B 08    	jmp gets_loop
0196+  08B9             gets_escape:
0197+  08B9 FD 0C       	sti
0198+  08BB 19 01       	mov al, 1
0199+  08BD 05 03       	syscall sys_io			; receive in AH
0200+  08BF B9 00       	cmp al, 0				; check error code (AL)
0201+  08C1 C6 B9 08    	je gets_escape			; if no char received, retry
0202+  08C4 76 6E       	cmp ah, 'n'
0203+  08C6 C6 D4 08    	je gets_LF
0204+  08C9 76 72       	cmp ah, 'r'
0205+  08CB C6 DB 08    	je gets_CR
0206+  08CE 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  08CF 3E          	mov [d], al
0208+  08D0 79          	inc d
0209+  08D1 0A 5B 08    	jmp gets_loop
0210+  08D4             gets_LF:
0211+  08D4 19 0A       	mov al, $0A
0212+  08D6 3E          	mov [d], al
0213+  08D7 79          	inc d
0214+  08D8 0A 5B 08    	jmp gets_loop
0215+  08DB             gets_CR:
0216+  08DB 19 0D       	mov al, $0D
0217+  08DD 3E          	mov [d], al
0218+  08DE 79          	inc d
0219+  08DF 0A 5B 08    	jmp gets_loop
0220+  08E2             gets_end:
0221+  08E2 19 00       	mov al, 0
0222+  08E4 3E          	mov [d], al				; terminate string
0223+  08E5 E7          	pop d
0224+  08E6 E4          	pop a
0225+  08E7 09          	ret
0226+  08E8             
0227+  08E8             
0228+  08E8             
0229+  08E8             
0230+  08E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  08E8             ;; INPUT TEXT
0232+  08E8             ;; terminated with CTRL+D
0233+  08E8             ;; pointer in D
0234+  08E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  08E8             gettxt:
0236+  08E8 D7          	push a
0237+  08E9 DA          	push d
0238+  08EA             gettxt_loop:
0239+  08EA 19 01       	mov al, 1
0240+  08EC 05 03       	syscall sys_io			; receive in AH
0241+  08EE B9 00       	cmp al, 0				; check error code (AL)
0242+  08F0 C6 EA 08    	je gettxt_loop		; if no char received, retry
0243+  08F3 76 04       	cmp ah, 4			; EOT
0244+  08F5 C6 33 09    	je gettxt_end
0245+  08F8 76 08       	cmp ah, $08			; check for backspace
0246+  08FA C6 2F 09    	je gettxt_backspace
0247+  08FD 76 5C       	cmp ah, $5C				; '\\'
0248+  08FF C6 08 09    	je gettxt_escape
0249+  0902 1A          	mov al, ah
0250+  0903 3E          	mov [d], al
0251+  0904 79          	inc d
0252+  0905 0A EA 08    	jmp gettxt_loop
0253+  0908             gettxt_escape:
0254+  0908 19 01       	mov al, 1
0255+  090A 05 03       	syscall sys_io			; receive in AH
0256+  090C B9 00       	cmp al, 0				; check error code (AL)
0257+  090E C6 08 09    	je gettxt_escape		; if no char received, retry
0258+  0911 76 6E       	cmp ah, 'n'
0259+  0913 C6 21 09    	je gettxt_LF
0260+  0916 76 72       	cmp ah, 'r'
0261+  0918 C6 28 09    	je gettxt_CR
0262+  091B 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  091C 3E          	mov [d], al
0264+  091D 79          	inc d
0265+  091E 0A EA 08    	jmp gettxt_loop
0266+  0921             gettxt_LF:
0267+  0921 19 0A       	mov al, $0A
0268+  0923 3E          	mov [d], al
0269+  0924 79          	inc d
0270+  0925 0A EA 08    	jmp gettxt_loop
0271+  0928             gettxt_CR:
0272+  0928 19 0D       	mov al, $0D
0273+  092A 3E          	mov [d], al
0274+  092B 79          	inc d
0275+  092C 0A EA 08    	jmp gettxt_loop
0276+  092F             gettxt_backspace:
0277+  092F 7F          	dec d
0278+  0930 0A EA 08    	jmp gettxt_loop
0279+  0933             gettxt_end:
0280+  0933 19 00       	mov al, 0
0281+  0935 3E          	mov [d], al				; terminate string
0282+  0936 E7          	pop d
0283+  0937 E4          	pop a
0284+  0938 09          	ret
0285+  0939             
0286+  0939             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0939             ; PRINT NEW LINE
0288+  0939             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0939             printnl:
0290+  0939 D7          	push a
0291+  093A 10 00 0A    	mov a, $0A00
0292+  093D 05 03       	syscall sys_io
0293+  093F 10 00 0D    	mov a, $0D00
0294+  0942 05 03       	syscall sys_io
0295+  0944 E4          	pop a
0296+  0945 09          	ret
0297+  0946             
0298+  0946             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0946             ; strtoint
0300+  0946             ; 4 digit hex string number in d
0301+  0946             ; integer returned in A
0302+  0946             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0946             strtointx:
0304+  0946 D8          	push b
0305+  0947 32          	mov bl, [d]
0306+  0948 37          	mov bh, bl
0307+  0949 33 01 00    	mov bl, [d + 1]
0308+  094C 07 07 08    	call atoi				; convert to int in AL
0309+  094F 23          	mov ah, al				; move to AH
0310+  0950 33 02 00    	mov bl, [d + 2]
0311+  0953 37          	mov bh, bl
0312+  0954 33 03 00    	mov bl, [d + 3]
0313+  0957 07 07 08    	call atoi				; convert to int in AL
0314+  095A E5          	pop b
0315+  095B 09          	ret
0316+  095C             
0317+  095C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  095C             ; strtoint
0319+  095C             ; 5 digit base10 string number in d
0320+  095C             ; integer returned in A
0321+  095C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  095C             strtoint:
0323+  095C E2          	push si
0324+  095D D8          	push b
0325+  095E D9          	push c
0326+  095F DA          	push d
0327+  0960 07 87 07    	call strlen			; get string length in C
0328+  0963 7E          	dec c
0329+  0964 FD 4E       	mov si, d
0330+  0966 12          	mov a, c
0331+  0967 FD 99       	shl a
0332+  0969 3B EF 07    	mov d, table_power
0333+  096C 59          	add d, a
0334+  096D 38 00 00    	mov c, 0
0335+  0970             strtoint_L0:
0336+  0970 F6          	lodsb			; load ASCII to al
0337+  0971 B9 00       	cmp al, 0
0338+  0973 C6 86 09    	je strtoint_end
0339+  0976 6F 30       	sub al, $30		; make into integer
0340+  0978 22 00       	mov ah, 0
0341+  097A 2A          	mov b, [d]
0342+  097B AC          	mul a, b			; result in B since it fits in 16bits
0343+  097C 11          	mov a, b
0344+  097D 28          	mov b, c
0345+  097E 54          	add a, b
0346+  097F 39          	mov c, a
0347+  0980 63 02 00    	sub d, 2
0348+  0983 0A 70 09    	jmp strtoint_L0
0349+  0986             strtoint_end:
0350+  0986 12          	mov a, c
0351+  0987 E7          	pop d
0352+  0988 E6          	pop c
0353+  0989 E5          	pop b
0354+  098A EF          	pop si
0355+  098B 09          	ret
0356+  098C             
0357+  098C             
0358+  098C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  098C             ; PRINT NULL TERMINATED STRING
0360+  098C             ; pointer in D
0361+  098C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  098C             puts:
0363+  098C D7          	push a
0364+  098D DA          	push d
0365+  098E             puts_L1:
0366+  098E 1E          	mov al, [d]
0367+  098F B9 00       	cmp al, 0
0368+  0991 C6 9D 09    	jz puts_END
0369+  0994 23          	mov ah, al
0370+  0995 19 00       	mov al, 0
0371+  0997 05 03       	syscall sys_io
0372+  0999 79          	inc d
0373+  099A 0A 8E 09    	jmp puts_L1
0374+  099D             puts_END:
0375+  099D E7          	pop d
0376+  099E E4          	pop a
0377+  099F 09          	ret
0378+  09A0             
0379+  09A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  09A0             ; PRINT N SIZE STRING
0381+  09A0             ; pointer in D
0382+  09A0             ; size in C
0383+  09A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  09A0             putsn:
0385+  09A0 DB          	push al
0386+  09A1 DA          	push d
0387+  09A2 D9          	push c
0388+  09A3             putsn_L0:
0389+  09A3 1E          	mov al, [d]
0390+  09A4 23          	mov ah, al
0391+  09A5 19 00       	mov al, 0
0392+  09A7 05 03       	syscall sys_io
0393+  09A9 79          	inc d
0394+  09AA 7E          	dec c	
0395+  09AB C2 00 00    	cmp c, 0
0396+  09AE C7 A3 09    	jne putsn_L0
0397+  09B1             putsn_end:
0398+  09B1 E6          	pop c
0399+  09B2 E7          	pop d
0400+  09B3 E8          	pop al
0401+  09B4 09          	ret
0402+  09B5             
0403+  09B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  09B5             ; print 16bit decimal number
0405+  09B5             ; input number in A
0406+  09B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  09B5             print_u16d:
0408+  09B5 D7          	push a
0409+  09B6 D8          	push b
0410+  09B7 26 10 27    	mov b, 10000
0411+  09BA AE          	div a, b			; get 10000's coeff.
0412+  09BB 07 DD 09    	call print_number
0413+  09BE 11          	mov a, b
0414+  09BF 26 E8 03    	mov b, 1000
0415+  09C2 AE          	div a, b			; get 1000's coeff.
0416+  09C3 07 DD 09    	call print_number
0417+  09C6 11          	mov a, b
0418+  09C7 26 64 00    	mov b, 100
0419+  09CA AE          	div a, b
0420+  09CB 07 DD 09    	call print_number
0421+  09CE 11          	mov a, b
0422+  09CF 26 0A 00    	mov b, 10
0423+  09D2 AE          	div a, b
0424+  09D3 07 DD 09    	call print_number
0425+  09D6 1B          	mov al, bl			; 1's coeff in bl
0426+  09D7 07 DD 09    	call print_number
0427+  09DA E5          	pop b
0428+  09DB E4          	pop a
0429+  09DC 09          	ret
0430+  09DD             
0431+  09DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0432+  09DD             ; print AL
0433+  09DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0434+  09DD             print_number:
0435+  09DD 6A 30       	add al, $30
0436+  09DF 23          	mov ah, al
0437+  09E0 07 52 08    	call putchar
0438+  09E3 09          	ret
0439+  09E4             
0440+  09E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0441+  09E4             ; PRINT 16BIT HEX INTEGER
0442+  09E4             ; integer value in reg B
0443+  09E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0444+  09E4             print_u16x:
0445+  09E4 D7          	push a
0446+  09E5 D8          	push b
0447+  09E6 DD          	push bl
0448+  09E7 30          	mov bl, bh
0449+  09E8 07 19 08    	call itoa				; convert bh to char in A
0450+  09EB 2F          	mov bl, al				; save al
0451+  09EC 19 00       	mov al, 0
0452+  09EE 05 03       	syscall sys_io				; display AH
0453+  09F0 24          	mov ah, bl				; retrieve al
0454+  09F1 19 00       	mov al, 0
0455+  09F3 05 03       	syscall sys_io				; display AL
0456+  09F5             
0457+  09F5 EA          	pop bl
0458+  09F6 07 19 08    	call itoa				; convert bh to char in A
0459+  09F9 2F          	mov bl, al				; save al
0460+  09FA 19 00       	mov al, 0
0461+  09FC 05 03       	syscall sys_io				; display AH
0462+  09FE 24          	mov ah, bl				; retrieve al
0463+  09FF 19 00       	mov al, 0
0464+  0A01 05 03       	syscall sys_io				; display AL
0465+  0A03             
0466+  0A03 E5          	pop b
0467+  0A04 E4          	pop a
0468+  0A05 09          	ret
0469+  0A06             
0470+  0A06             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0471+  0A06             ; INPUT 16BIT HEX INTEGER
0472+  0A06             ; read 16bit integer into A
0473+  0A06             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0474+  0A06             scan_u16x:
0475+  0A06 F8 10 00    	enter 16
0476+  0A09 D8          	push b
0477+  0A0A DA          	push d
0478+  0A0B             
0479+  0A0B FA F1 FF    	lea d, [bp + -15]
0480+  0A0E 07 59 08    	call gets				; get number
0481+  0A11             
0482+  0A11 32          	mov bl, [d]
0483+  0A12 37          	mov bh, bl
0484+  0A13 33 01 00    	mov bl, [d + 1]
0485+  0A16 07 07 08    	call atoi				; convert to int in AL
0486+  0A19 23          	mov ah, al				; move to AH
0487+  0A1A             
0488+  0A1A 33 02 00    	mov bl, [d + 2]
0489+  0A1D 37          	mov bh, bl
0490+  0A1E 33 03 00    	mov bl, [d + 3]
0491+  0A21 07 07 08    	call atoi				; convert to int in AL
0492+  0A24             
0493+  0A24 E7          	pop d
0494+  0A25 E5          	pop b
0495+  0A26 F9          	leave
0496+  0A27 09          	ret
0497+  0A28             
0498+  0A28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0499+  0A28             ; PRINT 8bit HEX INTEGER
0500+  0A28             ; integer value in reg bl
0501+  0A28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0502+  0A28             print_u8x:
0503+  0A28 D7          	push a
0504+  0A29 DD          	push bl
0505+  0A2A             
0506+  0A2A 07 19 08    	call itoa				; convert bl to char in A
0507+  0A2D 2F          	mov bl, al				; save al
0508+  0A2E 19 00       	mov al, 0
0509+  0A30 05 03       	syscall sys_io				; display AH
0510+  0A32 24          	mov ah, bl				; retrieve al
0511+  0A33 19 00       	mov al, 0
0512+  0A35 05 03       	syscall sys_io				; display AL
0513+  0A37             
0514+  0A37 EA          	pop bl
0515+  0A38 E4          	pop a
0516+  0A39 09          	ret
0517+  0A3A             
0518+  0A3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0519+  0A3A             ; print 8bit decimal unsigned number
0520+  0A3A             ; input number in AL
0521+  0A3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0522+  0A3A             print_u8d:
0523+  0A3A D7          	push a
0524+  0A3B D8          	push b
0525+  0A3C             
0526+  0A3C 22 00       	mov ah, 0
0527+  0A3E 26 64 00    	mov b, 100
0528+  0A41 AE          	div a, b
0529+  0A42 D8          	push b			; save remainder
0530+  0A43 B9 00       	cmp al, 0
0531+  0A45 C6 4F 0A    	je skip100
0532+  0A48 6A 30       	add al, $30
0533+  0A4A 23          	mov ah, al
0534+  0A4B 19 00       	mov al, 0
0535+  0A4D 05 03       	syscall sys_io	; print coeff
0536+  0A4F             skip100:
0537+  0A4F E4          	pop a
0538+  0A50 22 00       	mov ah, 0
0539+  0A52 26 0A 00    	mov b, 10
0540+  0A55 AE          	div a, b
0541+  0A56 D8          	push b			; save remainder
0542+  0A57 B9 00       	cmp al, 0
0543+  0A59 C6 63 0A    	je skip10
0544+  0A5C 6A 30       	add al, $30
0545+  0A5E 23          	mov ah, al
0546+  0A5F 19 00       	mov al, 0
0547+  0A61 05 03       	syscall sys_io	; print coeff
0548+  0A63             skip10:
0549+  0A63 E4          	pop a
0550+  0A64 1B          	mov al, bl
0551+  0A65 6A 30       	add al, $30
0552+  0A67 23          	mov ah, al
0553+  0A68 19 00       	mov al, 0
0554+  0A6A 05 03       	syscall sys_io	; print coeff
0555+  0A6C E5          	pop b
0556+  0A6D E4          	pop a
0557+  0A6E 09          	ret
0558+  0A6F             
0559+  0A6F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0560+  0A6F             ; INPUT 8BIT HEX INTEGER
0561+  0A6F             ; read 8bit integer into AL
0562+  0A6F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0563+  0A6F             scan_u8x:
0564+  0A6F F8 04 00    	enter 4
0565+  0A72 D8          	push b
0566+  0A73 DA          	push d
0567+  0A74             
0568+  0A74 FA FD FF    	lea d, [bp + -3]
0569+  0A77 07 59 08    	call gets				; get number
0570+  0A7A             
0571+  0A7A 32          	mov bl, [d]
0572+  0A7B 37          	mov bh, bl
0573+  0A7C 33 01 00    	mov bl, [d + 1]
0574+  0A7F 07 07 08    	call atoi				; convert to int in AL
0575+  0A82             
0576+  0A82 E7          	pop d
0577+  0A83 E5          	pop b
0578+  0A84 F9          	leave
0579+  0A85 09          	ret
0580+  0A86             
0581+  0A86             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0582+  0A86             ; input decimal number
0583+  0A86             ; result in A
0584+  0A86             ; 655'\0'
0585+  0A86             ; low--------high
0586+  0A86             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0A86             scan_u16d:
0588+  0A86 F8 08 00    	enter 8
0589+  0A89 E2          	push si
0590+  0A8A D8          	push b
0591+  0A8B D9          	push c
0592+  0A8C DA          	push d
0593+  0A8D FA F9 FF    	lea d, [bp +- 7]
0594+  0A90 07 59 08    	call gets
0595+  0A93 07 87 07    	call strlen			; get string length in C
0596+  0A96 7E          	dec c
0597+  0A97 FD 4E       	mov si, d
0598+  0A99 12          	mov a, c
0599+  0A9A FD 99       	shl a
0600+  0A9C 3B EF 07    	mov d, table_power
0601+  0A9F 59          	add d, a
0602+  0AA0 38 00 00    	mov c, 0
0603+  0AA3             mul_loop:
0604+  0AA3 F6          	lodsb			; load ASCII to al
0605+  0AA4 B9 00       	cmp al, 0
0606+  0AA6 C6 B9 0A    	je mul_exit
0607+  0AA9 6F 30       	sub al, $30		; make into integer
0608+  0AAB 22 00       	mov ah, 0
0609+  0AAD 2A          	mov b, [d]
0610+  0AAE AC          	mul a, b			; result in B since it fits in 16bits
0611+  0AAF 11          	mov a, b
0612+  0AB0 28          	mov b, c
0613+  0AB1 54          	add a, b
0614+  0AB2 39          	mov c, a
0615+  0AB3 63 02 00    	sub d, 2
0616+  0AB6 0A A3 0A    	jmp mul_loop
0617+  0AB9             mul_exit:
0618+  0AB9 12          	mov a, c
0619+  0ABA E7          	pop d
0620+  0ABB E6          	pop c
0621+  0ABC E5          	pop b
0622+  0ABD EF          	pop si
0623+  0ABE F9          	leave
0624+  0ABF 09          	ret
0021   0AC0             .include "lib/ctype.asm"
0001+  0AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0AC0             ; ctype.s
0003+  0AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0AC0             
0005+  0AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0AC0             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0AC0             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0AC0             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0AC0             ;; characters are supported.
0010+  0AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0AC0             ;; isalnum 
0012+  0AC0             ;; isalpha 
0013+  0AC0             ;; islower 
0014+  0AC0             ;; isupper 
0015+  0AC0             ;; isdigit 
0016+  0AC0             ;; isxdigit
0017+  0AC0             ;; iscntrl 
0018+  0AC0             ;; isgraph 
0019+  0AC0             ;; isspace 
0020+  0AC0             ;; isblank 
0021+  0AC0             ;; isprint 
0022+  0AC0             ;; ispunct 
0023+  0AC0             ;; tolower 
0024+  0AC0             ;; toupper
0025+  0AC0             
0026+  0AC0             
0027+  0AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0AC0             ;; IS ALPHANUMERIC
0029+  0AC0             ;; sets ZF according with result
0030+  0AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0AC0             isalnum:
0032+  0AC0 07 DD 0A    	call isalpha
0033+  0AC3 C6 C9 0A    	je isalnum_exit
0034+  0AC6 07 CA 0A    	call isdigit
0035+  0AC9             isalnum_exit:
0036+  0AC9 09          	ret	
0037+  0ACA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0ACA             ;; IS DIGIT
0039+  0ACA             ;; sets ZF according with result
0040+  0ACA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0ACA             isdigit:
0042+  0ACA DB          	push al
0043+  0ACB B9 30       	cmp al, '0'
0044+  0ACD C8 D9 0A    	jlu isdigit_false
0045+  0AD0 B9 39       	cmp al, '9'
0046+  0AD2 D1 D9 0A    	jgu isdigit_false
0047+  0AD5 87 00       	and al, 0	; set ZF
0048+  0AD7 E8          	pop al
0049+  0AD8 09          	ret
0050+  0AD9             isdigit_false:
0051+  0AD9 8B 01       	or al, 1	; clear ZF
0052+  0ADB E8          	pop al
0053+  0ADC 09          	ret	
0054+  0ADD             	
0055+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0ADD             ;; IS ALPHA
0057+  0ADD             ;; sets ZF according with result
0058+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0ADD             isalpha:
0060+  0ADD DB          	push al
0061+  0ADE B9 5F       	cmp al, '_'
0062+  0AE0 C6 00 0B    	je isalpha_true
0063+  0AE3 B9 2E       	cmp al, '.'
0064+  0AE5 C6 00 0B    	je isalpha_true
0065+  0AE8 B9 41       	cmp al, 'A'
0066+  0AEA C8 FC 0A    	jlu isalpha_false
0067+  0AED B9 7A       	cmp al, 'z'
0068+  0AEF D1 FC 0A    	jgu isalpha_false
0069+  0AF2 B9 5A       	cmp al, 'Z'
0070+  0AF4 D0 00 0B    	jleu isalpha_true
0071+  0AF7 B9 61       	cmp al, 'a'
0072+  0AF9 C9 00 0B    	jgeu isalpha_true
0073+  0AFC             isalpha_false:
0074+  0AFC 8B 01       	or al, 1	; clear ZF
0075+  0AFE E8          	pop al
0076+  0AFF 09          	ret
0077+  0B00             isalpha_true:
0078+  0B00 87 00       	and al, 0	; set ZF
0079+  0B02 E8          	pop al
0080+  0B03 09          	ret
0081+  0B04             
0082+  0B04             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B04             ;; IS PATH-ALPHA
0084+  0B04             ;; sets ZF according with result
0085+  0B04             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B04             ispath:
0087+  0B04 DB          	push al
0088+  0B05 07 CA 0A    	call isdigit
0089+  0B08 C6 32 0B    	je ispath_true
0090+  0B0B B9 5F       	cmp al, '_'
0091+  0B0D C6 32 0B    	je ispath_true
0092+  0B10 B9 2F       	cmp al, '/'
0093+  0B12 C6 32 0B    	je ispath_true
0094+  0B15 B9 2E       	cmp al, '.'
0095+  0B17 C6 32 0B    	je ispath_true
0096+  0B1A B9 41       	cmp al, 'A'
0097+  0B1C C8 2E 0B    	jlu ispath_false
0098+  0B1F B9 7A       	cmp al, 'z'
0099+  0B21 D1 2E 0B    	jgu ispath_false
0100+  0B24 B9 5A       	cmp al, 'Z'
0101+  0B26 D0 32 0B    	jleu ispath_true
0102+  0B29 B9 61       	cmp al, 'a'
0103+  0B2B C9 32 0B    	jgeu ispath_true
0104+  0B2E             ispath_false:
0105+  0B2E 8B 01       	or al, 1	; clear ZF
0106+  0B30 E8          	pop al
0107+  0B31 09          	ret
0108+  0B32             ispath_true:
0109+  0B32 87 00       	and al, 0	; set ZF
0110+  0B34 E8          	pop al
0111+  0B35 09          	ret
0112+  0B36             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B36             ;; IS SPACE
0114+  0B36             ;; sets ZF according with result
0115+  0B36             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B36             isspace:
0117+  0B36 B9 20       	cmp al, $20		; ' '
0118+  0B38 C6 4C 0B    	je isspace_exit
0119+  0B3B B9 09       	cmp al, $09		; '\t'
0120+  0B3D C6 4C 0B    	je isspace_exit
0121+  0B40 B9 0A       	cmp al, $0A		; '\n'
0122+  0B42 C6 4C 0B    	je isspace_exit
0123+  0B45 B9 0D       	cmp al, $0D		; '\r'
0124+  0B47 C6 4C 0B    	je isspace_exit
0125+  0B4A B9 0B       	cmp al, $0B		; '\v'
0126+  0B4C             isspace_exit:
0127+  0B4C 09          	ret	
0128+  0B4D             
0129+  0B4D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B4D             ; TO LOWER
0131+  0B4D             ; input in AL
0132+  0B4D             ; output in AL
0133+  0B4D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B4D             to_lower:
0135+  0B4D B9 5A       	cmp al, 'Z'
0136+  0B4F D1 54 0B    	jgu to_lower_ret
0137+  0B52 6A 20       	add al, $20				; convert to lower case
0138+  0B54             to_lower_ret:
0139+  0B54 09          	ret
0140+  0B55             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B55             ; TO UPPER
0142+  0B55             ; input in AL
0143+  0B55             ; output in AL
0144+  0B55             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B55             to_upper:
0146+  0B55 B9 61       	cmp al, 'a'
0147+  0B57 C8 5C 0B    	jlu to_upper_ret
0148+  0B5A 6F 20       	sub al, $20			; convert to upper case
0149+  0B5C             to_upper_ret:
0150+  0B5C 09          	ret
0151+  0B5D             
0022   0B5D             
0023   0B5D             .end
0024   0B5D             
0025   0B5D             
0026   0B5D             
tasm: Number of errors = 0
