0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0400             .org PROC_TEXT_ORG			; origin at 1024
0004   0400             
0005   0400             WIDTH:	.equ	110		; must be even
0006   0400             
0007   0400             menu:
0008   0400 F8 00 02    	enter 512	
0009   0403             __get_math_choice:
0010   0403 3B 21 0A    	mov d, s_menu
0011   0406 07 13 07    	call puts
0012   0409 FA 01 FE    	lea d, [bp +- 511]
0013   040C 07 E0 05    	call gets						; get choice
0014   040F 1E          	mov al, [d]
0015   0410 6F 30       	sub al, 30h
0016   0412 B9 02       	cmp al, 2
0017   0414 C6 29 04    	je _math_quit
0018   0417 D1 03 04    	jgu __get_math_choice				; check bounds
0019   041A FD 9E 01    	shl al, 1
0020   041D 22 00       	mov ah, 0
0021   041F FD 07 2C 04 	call [a + __math_menu_jump_table]
0022   0423             
0023   0423 07 C0 06    	call printnl
0024   0426 0A 03 04    	jmp __get_math_choice
0025   0429             _math_quit:
0026   0429 F9          	leave
0027   042A 05 0B       	syscall sys_terminate_proc
0028   042C             
0029   042C             ; ***********************************************************************************
0030   042C             ; MATHS JUMP TABLE
0031   042C             ; ***********************************************************************************
0032   042C             __math_menu_jump_table:
0033   042C 30 04       	.dw automaton
0034   042E B6 04       	.dw chg_rules
0035   0430             	
0036   0430             automaton:
0037   0430 F8 02 00    	enter 2
0038   0433 3B 52 08    	mov d, s_steps
0039   0436 07 13 07    	call puts
0040   0439 07 11 08    	call scan_u16d
0041   043C 45 FF FF    	mov [bp +- 1], a
0042   043F 07 C0 06    	call printnl
0043   0442             ; reset initial state
0044   0442 FD 4D 5C 08 	mov si, init_state
0045   0446 FD 4F CB 08 	mov di, prev_state
0046   044A 38 6F 00    	mov c, (WIDTH+1)
0047   044D FD F5       	rep movsb	
0048   044F             auto_L1:
0049   044F 38 01 00    	mov c, 1	
0050   0452 17 FF FF    	mov a, [bp + -1]
0051   0455 AF 00 00    	cmp a, 0
0052   0458 C6 B4 04    	je automaton_ret
0053   045B 7D          	dec a
0054   045C 45 FF FF    	mov [bp + -1], a
0055   045F             auto_L2:	
0056   045F 12          	mov a, c
0057   0460 3C          	mov d, a
0058   0461 FD 10       	cla
0059   0463 79          	inc d
0060   0464 33 CB 08    	mov bl, [d + prev_state]
0061   0467 6B          	add al, bl
0062   0468 7F          	dec d
0063   0469 33 CB 08    	mov bl, [d + prev_state]
0064   046C             	
0065   046C FD A0 01    	shl bl, 1
0066   046F 6B          	add al, bl
0067   0470 7F          	dec d
0068   0471 33 CB 08    	mov bl, [d + prev_state]
0069   0474 FD A0 02    	shl bl, 2
0070   0477 6B          	add al, bl					; now al has the number for the table
0071   0478             	
0072   0478 B7 19 0A    	mov a, [a + automaton_table]
0073   047B 79          	inc d
0074   047C 3F 3A 09    	mov [d + state], al
0075   047F 78          	inc c
0076   0480 C2 6E 00    	cmp c, WIDTH
0077   0483 C8 5F 04    	jlu auto_L2
0078   0486             	
0079   0486             ; here we finished updating the current state, now we copy the current state to
0080   0486             ; the previous state
0081   0486 FD 4D 3A 09 	mov si, state
0082   048A FD 4F CB 08 	mov di, prev_state
0083   048E 38 6F 00    	mov c, (WIDTH+1)
0084   0491 FD F5       	rep movsb
0085   0493             	
0086   0493             ; now print the current state on the screen
0087   0493 FD 4D 3A 09 	mov si, state
0088   0497 FD 4F A9 09 	mov di, state_chars
0089   049B 38 6F 00    	mov c, (WIDTH+1)
0090   049E             state_convert_loop:
0091   049E F6          	lodsb
0092   049F 22 00       	mov ah, 0
0093   04A1 B7 5A 08    	mov a, [a + table_translate]
0094   04A4 F7          	stosb
0095   04A5 A9 9E 04    	loopc state_convert_loop
0096   04A8             	
0097   04A8 3B A9 09    	mov d, state_chars
0098   04AB 07 13 07    	call puts
0099   04AE             	
0100   04AE 07 C0 06    	call printnl
0101   04B1 0A 4F 04    	jmp auto_L1	
0102   04B4             automaton_ret:
0103   04B4 F9          	leave
0104   04B5             	
0105   04B5 09          	ret
0106   04B6             	
0107   04B6             chg_rules:
0108   04B6 3B 4B 08    	mov d, s_rule
0109   04B9 07 13 07    	call puts
0110   04BC 3B 00 00    	mov d, 0
0111   04BF 38 04 00    	mov c, 4
0112   04C2             chg_rule_L1:
0113   04C2 07 91 07    	call scan_u16x
0114   04C5 44 19 0A    	mov [d + automaton_table], a
0115   04C8 58 02 00    	add d, 2
0116   04CB A9 C2 04    	loopc chg_rule_L1
0117   04CE 09          	ret
0118   04CF             	
0119   04CF             .include "stdio.asm"
0001+  04CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  04CF             ; stdio.s
0003+  04CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  04CF             .include "string.asm"
0001++ 04CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 04CF             ; string.s
0003++ 04CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 04CF             
0005++ 04CF             
0006++ 04CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 04CF             ; strrev
0008++ 04CF             ; reverse a string
0009++ 04CF             ; D = string address
0010++ 04CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 04CF             ; 01234
0012++ 04CF             strrev:
0013++ 04CF 4B          	pusha
0014++ 04D0 07 16 05    	call strlen	; length in C
0015++ 04D3 12          	mov a, c
0016++ 04D4 AF 01 00    	cmp a, 1
0017++ 04D7 D0 F1 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 04DA 7D          	dec a
0019++ 04DB FD 4E       	mov si, d	; beginning of string
0020++ 04DD FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 04DF 59          	add d, a	; end of string
0022++ 04E0 12          	mov a, c
0023++ 04E1 FD 9B       	shr a		; divide by 2
0024++ 04E3 39          	mov c, a	; C now counts the steps
0025++ 04E4             strrev_L0:
0026++ 04E4 32          	mov bl, [d]	; save load right-side char into BL
0027++ 04E5 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 04E6 3E          	mov [d], al	; store left char into right side
0029++ 04E7 1B          	mov al, bl
0030++ 04E8 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 04E9 7E          	dec c
0032++ 04EA 7F          	dec d
0033++ 04EB C2 00 00    	cmp c, 0
0034++ 04EE C7 E4 04    	jne strrev_L0
0035++ 04F1             strrev_end:
0036++ 04F1 4C          	popa
0037++ 04F2 09          	ret
0038++ 04F3             	
0039++ 04F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 04F3             ; strchr
0041++ 04F3             ; search string in D for char in AL
0042++ 04F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 04F3             strchr:
0044++ 04F3             strchr_L0:
0045++ 04F3 32          	mov bl, [d]
0046++ 04F4 C1 00       	cmp bl, 0
0047++ 04F6 C6 01 05    	je strchr_end
0048++ 04F9 BA          	cmp al, bl
0049++ 04FA C6 01 05    	je strchr_end
0050++ 04FD 79          	inc d
0051++ 04FE 0A F3 04    	jmp strchr_L0
0052++ 0501             strchr_end:
0053++ 0501 1B          	mov al, bl
0054++ 0502 09          	ret
0055++ 0503             
0056++ 0503             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0503             ; strstr
0058++ 0503             ; find sub-string
0059++ 0503             ; str1 in SI
0060++ 0503             ; str2 in DI
0061++ 0503             ; SI points to end of source string
0062++ 0503             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0503             strstr:
0064++ 0503 DB          	push al
0065++ 0504 DA          	push d
0066++ 0505 E3          	push di
0067++ 0506             strstr_loop:
0068++ 0506 F3          	cmpsb					; compare a byte of the strings
0069++ 0507 C7 12 05    	jne strstr_ret
0070++ 050A FC 00 00    	lea d, [di + 0]
0071++ 050D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 050F C7 06 05    	jne strstr_loop				; equal chars but not at end
0073++ 0512             strstr_ret:
0074++ 0512 F0          	pop di
0075++ 0513 E7          	pop d
0076++ 0514 E8          	pop al
0077++ 0515 09          	ret
0078++ 0516             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0516             ; length of null terminated string
0080++ 0516             ; result in C
0081++ 0516             ; pointer in D
0082++ 0516             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0516             strlen:
0084++ 0516 DA          	push d
0085++ 0517 38 00 00    	mov c, 0
0086++ 051A             strlen_L1:
0087++ 051A BD 00       	cmp byte [d], 0
0088++ 051C C6 24 05    	je strlen_ret
0089++ 051F 79          	inc d
0090++ 0520 78          	inc c
0091++ 0521 0A 1A 05    	jmp strlen_L1
0092++ 0524             strlen_ret:
0093++ 0524 E7          	pop d
0094++ 0525 09          	ret
0095++ 0526             
0096++ 0526             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0526             ; STRCMP
0098++ 0526             ; compare two strings
0099++ 0526             ; str1 in SI
0100++ 0526             ; str2 in DI
0101++ 0526             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0526             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0526             strcmp:
0104++ 0526 DB          	push al
0105++ 0527 DA          	push d
0106++ 0528 E3          	push di
0107++ 0529 E2          	push si
0108++ 052A             strcmp_loop:
0109++ 052A F3          	cmpsb					; compare a byte of the strings
0110++ 052B C7 36 05    	jne strcmp_ret
0111++ 052E FB FF FF    	lea d, [si +- 1]
0112++ 0531 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0533 C7 2A 05    	jne strcmp_loop				; equal chars but not at end
0114++ 0536             strcmp_ret:
0115++ 0536 EF          	pop si
0116++ 0537 F0          	pop di
0117++ 0538 E7          	pop d
0118++ 0539 E8          	pop al
0119++ 053A 09          	ret
0120++ 053B             
0121++ 053B             
0122++ 053B             ; STRCPY
0123++ 053B             ; copy null terminated string from SI to DI
0124++ 053B             ; source in SI
0125++ 053B             ; destination in DI
0126++ 053B             strcpy:
0127++ 053B E2          	push si
0128++ 053C E3          	push di
0129++ 053D DB          	push al
0130++ 053E             strcpy_L1:
0131++ 053E F6          	lodsb
0132++ 053F F7          	stosb
0133++ 0540 B9 00       	cmp al, 0
0134++ 0542 C7 3E 05    	jne strcpy_L1
0135++ 0545             strcpy_end:
0136++ 0545 E8          	pop al
0137++ 0546 F0          	pop di
0138++ 0547 EF          	pop si
0139++ 0548 09          	ret
0140++ 0549             
0141++ 0549             ; STRCAT
0142++ 0549             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0549             ; source in SI
0144++ 0549             ; destination in DI
0145++ 0549             strcat:
0146++ 0549 E2          	push si
0147++ 054A E3          	push di
0148++ 054B D7          	push a
0149++ 054C DA          	push d
0150++ 054D 50          	mov a, di
0151++ 054E 3C          	mov d, a
0152++ 054F             strcat_goto_end_L1:
0153++ 054F BD 00       	cmp byte[d], 0
0154++ 0551 C6 58 05    	je strcat_start
0155++ 0554 79          	inc d
0156++ 0555 0A 4F 05    	jmp strcat_goto_end_L1
0157++ 0558             strcat_start:
0158++ 0558 FD 50       	mov di, d
0159++ 055A             strcat_L1:
0160++ 055A F6          	lodsb
0161++ 055B F7          	stosb
0162++ 055C B9 00       	cmp al, 0
0163++ 055E C7 5A 05    	jne strcat_L1
0164++ 0561             strcat_end:
0165++ 0561 E7          	pop d
0166++ 0562 E4          	pop a
0167++ 0563 F0          	pop di
0168++ 0564 EF          	pop si
0169++ 0565 09          	ret
0005+  0566             
0006+  0566 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  056A 34 35 36 37 
0006+  056E 38 39 41 42 
0006+  0572 43 44 45 46 
0007+  0576             
0008+  0576 01 00       table_power:.dw 1
0009+  0578 0A 00       			.dw 10
0010+  057A 64 00       			.dw 100
0011+  057C E8 03       			.dw 1000
0012+  057E 10 27       			.dw 10000
0013+  0580             
0014+  0580             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  0580             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  0580             ; ASCII in BL
0017+  0580             ; result in AL
0018+  0580             ; ascii for F = 0100 0110
0019+  0580             ; ascii for 9 = 0011 1001
0020+  0580             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  0580             hex_ascii_encode:
0022+  0580 1B          	mov al, bl
0023+  0581 93 40       	test al, $40				; test if letter or number
0024+  0583 C7 89 05    	jnz hex_letter
0025+  0586 87 0F       	and al, $0F				; get number
0026+  0588 09          	ret
0027+  0589             hex_letter:
0028+  0589 87 0F       	and al, $0F				; get letter
0029+  058B 6A 09       	add al, 9
0030+  058D 09          	ret
0031+  058E             
0032+  058E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  058E             ; ATOI
0034+  058E             ; 2 letter hex string in B
0035+  058E             ; 8bit integer returned in AL
0036+  058E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  058E             atoi:
0038+  058E D8          	push b
0039+  058F 07 80 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  0592 30          	mov bl, bh
0041+  0593 DB          	push al					; save a
0042+  0594 07 80 05    	call hex_ascii_encode
0043+  0597 EA          	pop bl	
0044+  0598 FD 9E 04    	shl al, 4
0045+  059B 8C          	or al, bl
0046+  059C E5          	pop b
0047+  059D 09          	ret	
0048+  059E             
0049+  059E             
0050+  059E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  059E             ; printf
0052+  059E             ; no need for explanations!
0053+  059E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  059E             printf:
0055+  059E 09          	ret
0056+  059F             
0057+  059F             
0058+  059F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  059F             ; scanf
0060+  059F             ; no need for explanations!
0061+  059F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  059F             scanf:
0063+  059F 09          	ret
0064+  05A0             
0065+  05A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  05A0             ; ITOA
0067+  05A0             ; 8bit value in BL
0068+  05A0             ; 2 byte ASCII result in A
0069+  05A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  05A0             itoa:
0071+  05A0 DA          	push d
0072+  05A1 D8          	push b
0073+  05A2 A7 00       	mov bh, 0
0074+  05A4 FD A4 04    	shr bl, 4	
0075+  05A7 74          	mov d, b
0076+  05A8 1F 66 05    	mov al, [d + s_hex_digits]
0077+  05AB 23          	mov ah, al
0078+  05AC             	
0079+  05AC E5          	pop b
0080+  05AD D8          	push b
0081+  05AE A7 00       	mov bh, 0
0082+  05B0 FD 87 0F    	and bl, $0F
0083+  05B3 74          	mov d, b
0084+  05B4 1F 66 05    	mov al, [d + s_hex_digits]
0085+  05B7 E5          	pop b
0086+  05B8 E7          	pop d
0087+  05B9 09          	ret
0088+  05BA             
0089+  05BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  05BA             ; HEX STRING TO BINARY
0091+  05BA             ; di = destination address
0092+  05BA             ; si = source
0093+  05BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  05BA             hex_to_int:
0095+  05BA             hex_to_int_L1:
0096+  05BA F6          	lodsb					; load from [SI] to AL
0097+  05BB B9 00       	cmp al, 0				; check if ASCII 0
0098+  05BD C6 CA 05    	jz hex_to_int_ret
0099+  05C0 36          	mov bh, al
0100+  05C1 F6          	lodsb
0101+  05C2 2F          	mov bl, al
0102+  05C3 07 8E 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  05C6 F7          	stosb					; store AL to [DI]
0104+  05C7 0A BA 05    	jmp hex_to_int_L1
0105+  05CA             hex_to_int_ret:
0106+  05CA 09          	ret		
0107+  05CB             
0108+  05CB             
0109+  05CB             
0110+  05CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  05CB             ; GETCHAR
0112+  05CB             ; char in ah
0113+  05CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  05CB             getchar:
0115+  05CB DB          	push al
0116+  05CC             getchar_retry:
0117+  05CC FD 0C       	sti
0118+  05CE 19 01       	mov al, 1
0119+  05D0 05 03       	syscall sys_io			; receive in AH
0120+  05D2 B9 00       	cmp al, 0			; check if any char was receive
0121+  05D4 C6 CC 05    	je getchar_retry
0122+  05D7 E8          	pop al
0123+  05D8 09          	ret
0124+  05D9             
0125+  05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  05D9             ; PUTCHAR
0127+  05D9             ; char in ah
0128+  05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  05D9             putchar:
0130+  05D9 D7          	push a
0131+  05DA 19 00       	mov al, 0
0132+  05DC 05 03       	syscall sys_io			; char in AH
0133+  05DE E4          	pop a
0134+  05DF 09          	ret
0135+  05E0             
0136+  05E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  05E0             ;; INPUT A STRING
0138+  05E0             ;; terminates with null
0139+  05E0             ;; pointer in D
0140+  05E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  05E0             gets:
0142+  05E0 D7          	push a
0143+  05E1 DA          	push d
0144+  05E2             gets_loop:
0145+  05E2 FD 0C       	sti
0146+  05E4 19 01       	mov al, 1
0147+  05E6 05 03       	syscall sys_io			; receive in AH
0148+  05E8 B9 00       	cmp al, 0				; check error code (AL)
0149+  05EA C6 E2 05    	je gets_loop			; if no char received, retry
0150+  05ED             
0151+  05ED 76 1B       	cmp ah, 27
0152+  05EF C6 10 06    	je gets_telnet_escape
0153+  05F2 76 0A       	cmp ah, $0A				; LF
0154+  05F4 C6 69 06    	je gets_end
0155+  05F7 76 0D       	cmp ah, $0D				; CR
0156+  05F9 C6 69 06    	je gets_end
0157+  05FC 76 5C       	cmp ah, $5C				; '\\'
0158+  05FE C6 40 06    	je gets_escape
0159+  0601             	
0160+  0601 76 08       	cmp ah, $08			; check for backspace
0161+  0603 C6 0C 06    	je gets_backspace
0162+  0606             
0163+  0606 1A          	mov al, ah
0164+  0607 3E          	mov [d], al
0165+  0608 79          	inc d
0166+  0609 0A E2 05    	jmp gets_loop
0167+  060C             gets_backspace:
0168+  060C 7F          	dec d
0169+  060D 0A E2 05    	jmp gets_loop
0170+  0610             gets_telnet_escape:
0171+  0610 FD 0C       	sti
0172+  0612 19 01       	mov al, 1
0173+  0614 05 03       	syscall sys_io				; receive in AH without echo
0174+  0616 B9 00       	cmp al, 0					; check error code (AL)
0175+  0618 C6 10 06    	je gets_telnet_escape		; if no char received, retry
0176+  061B 76 5B       	cmp ah, '['
0177+  061D C7 E2 05    	jne gets_loop
0178+  0620             gets_telnet_escape_phase2:
0179+  0620 FD 0C       	sti
0180+  0622 19 01       	mov al, 1
0181+  0624 05 03       	syscall sys_io					; receive in AH without echo
0182+  0626 B9 00       	cmp al, 0						; check error code (AL)
0183+  0628 C6 20 06    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  062B 76 44       	cmp ah, 'D'
0185+  062D C6 38 06    	je gets_left_arrow
0186+  0630 76 43       	cmp ah, 'C'
0187+  0632 C6 3C 06    	je gets_right_arrow
0188+  0635 0A E2 05    	jmp gets_loop
0189+  0638             gets_left_arrow:
0190+  0638 7F          	dec d
0191+  0639 0A E2 05    	jmp gets_loop
0192+  063C             gets_right_arrow:
0193+  063C 79          	inc d
0194+  063D 0A E2 05    	jmp gets_loop
0195+  0640             gets_escape:
0196+  0640 FD 0C       	sti
0197+  0642 19 01       	mov al, 1
0198+  0644 05 03       	syscall sys_io			; receive in AH
0199+  0646 B9 00       	cmp al, 0				; check error code (AL)
0200+  0648 C6 40 06    	je gets_escape			; if no char received, retry
0201+  064B 76 6E       	cmp ah, 'n'
0202+  064D C6 5B 06    	je gets_LF
0203+  0650 76 72       	cmp ah, 'r'
0204+  0652 C6 62 06    	je gets_CR
0205+  0655 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  0656 3E          	mov [d], al
0207+  0657 79          	inc d
0208+  0658 0A E2 05    	jmp gets_loop
0209+  065B             gets_LF:
0210+  065B 19 0A       	mov al, $0A
0211+  065D 3E          	mov [d], al
0212+  065E 79          	inc d
0213+  065F 0A E2 05    	jmp gets_loop
0214+  0662             gets_CR:
0215+  0662 19 0D       	mov al, $0D
0216+  0664 3E          	mov [d], al
0217+  0665 79          	inc d
0218+  0666 0A E2 05    	jmp gets_loop
0219+  0669             gets_end:
0220+  0669 19 00       	mov al, 0
0221+  066B 3E          	mov [d], al				; terminate string
0222+  066C E7          	pop d
0223+  066D E4          	pop a
0224+  066E 09          	ret
0225+  066F             
0226+  066F             
0227+  066F             
0228+  066F             
0229+  066F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  066F             ;; INPUT TEXT
0231+  066F             ;; terminated with CTRL+D
0232+  066F             ;; pointer in D
0233+  066F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  066F             gettxt:
0235+  066F D7          	push a
0236+  0670 DA          	push d
0237+  0671             gettxt_loop:
0238+  0671 19 01       	mov al, 1
0239+  0673 05 03       	syscall sys_io			; receive in AH
0240+  0675 B9 00       	cmp al, 0				; check error code (AL)
0241+  0677 C6 71 06    	je gettxt_loop		; if no char received, retry
0242+  067A 76 04       	cmp ah, 4			; EOT
0243+  067C C6 BA 06    	je gettxt_end
0244+  067F 76 08       	cmp ah, $08			; check for backspace
0245+  0681 C6 B6 06    	je gettxt_backspace
0246+  0684 76 5C       	cmp ah, $5C				; '\\'
0247+  0686 C6 8F 06    	je gettxt_escape
0248+  0689 1A          	mov al, ah
0249+  068A 3E          	mov [d], al
0250+  068B 79          	inc d
0251+  068C 0A 71 06    	jmp gettxt_loop
0252+  068F             gettxt_escape:
0253+  068F 19 01       	mov al, 1
0254+  0691 05 03       	syscall sys_io			; receive in AH
0255+  0693 B9 00       	cmp al, 0				; check error code (AL)
0256+  0695 C6 8F 06    	je gettxt_escape		; if no char received, retry
0257+  0698 76 6E       	cmp ah, 'n'
0258+  069A C6 A8 06    	je gettxt_LF
0259+  069D 76 72       	cmp ah, 'r'
0260+  069F C6 AF 06    	je gettxt_CR
0261+  06A2 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  06A3 3E          	mov [d], al
0263+  06A4 79          	inc d
0264+  06A5 0A 71 06    	jmp gettxt_loop
0265+  06A8             gettxt_LF:
0266+  06A8 19 0A       	mov al, $0A
0267+  06AA 3E          	mov [d], al
0268+  06AB 79          	inc d
0269+  06AC 0A 71 06    	jmp gettxt_loop
0270+  06AF             gettxt_CR:
0271+  06AF 19 0D       	mov al, $0D
0272+  06B1 3E          	mov [d], al
0273+  06B2 79          	inc d
0274+  06B3 0A 71 06    	jmp gettxt_loop
0275+  06B6             gettxt_backspace:
0276+  06B6 7F          	dec d
0277+  06B7 0A 71 06    	jmp gettxt_loop
0278+  06BA             gettxt_end:
0279+  06BA 19 00       	mov al, 0
0280+  06BC 3E          	mov [d], al				; terminate string
0281+  06BD E7          	pop d
0282+  06BE E4          	pop a
0283+  06BF 09          	ret
0284+  06C0             
0285+  06C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  06C0             ; PRINT NEW LINE
0287+  06C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  06C0             printnl:
0289+  06C0 D7          	push a
0290+  06C1 10 00 0A    	mov a, $0A00
0291+  06C4 05 03       	syscall sys_io
0292+  06C6 10 00 0D    	mov a, $0D00
0293+  06C9 05 03       	syscall sys_io
0294+  06CB E4          	pop a
0295+  06CC 09          	ret
0296+  06CD             
0297+  06CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  06CD             ; strtoint
0299+  06CD             ; 4 digit hex string number in d
0300+  06CD             ; integer returned in A
0301+  06CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  06CD             strtointx:
0303+  06CD D8          	push b
0304+  06CE 32          	mov bl, [d]
0305+  06CF 37          	mov bh, bl
0306+  06D0 33 01 00    	mov bl, [d + 1]
0307+  06D3 07 8E 05    	call atoi				; convert to int in AL
0308+  06D6 23          	mov ah, al				; move to AH
0309+  06D7 33 02 00    	mov bl, [d + 2]
0310+  06DA 37          	mov bh, bl
0311+  06DB 33 03 00    	mov bl, [d + 3]
0312+  06DE 07 8E 05    	call atoi				; convert to int in AL
0313+  06E1 E5          	pop b
0314+  06E2 09          	ret
0315+  06E3             
0316+  06E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  06E3             ; strtoint
0318+  06E3             ; 5 digit base10 string number in d
0319+  06E3             ; integer returned in A
0320+  06E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  06E3             strtoint:
0322+  06E3 E2          	push si
0323+  06E4 D8          	push b
0324+  06E5 D9          	push c
0325+  06E6 DA          	push d
0326+  06E7 07 16 05    	call strlen			; get string length in C
0327+  06EA 7E          	dec c
0328+  06EB FD 4E       	mov si, d
0329+  06ED 12          	mov a, c
0330+  06EE FD 99       	shl a
0331+  06F0 3B 76 05    	mov d, table_power
0332+  06F3 59          	add d, a
0333+  06F4 38 00 00    	mov c, 0
0334+  06F7             strtoint_L0:
0335+  06F7 F6          	lodsb			; load ASCII to al
0336+  06F8 B9 00       	cmp al, 0
0337+  06FA C6 0D 07    	je strtoint_end
0338+  06FD 6F 30       	sub al, $30		; make into integer
0339+  06FF 22 00       	mov ah, 0
0340+  0701 2A          	mov b, [d]
0341+  0702 AC          	mul a, b			; result in B since it fits in 16bits
0342+  0703 11          	mov a, b
0343+  0704 28          	mov b, c
0344+  0705 54          	add a, b
0345+  0706 39          	mov c, a
0346+  0707 63 02 00    	sub d, 2
0347+  070A 0A F7 06    	jmp strtoint_L0
0348+  070D             strtoint_end:
0349+  070D 12          	mov a, c
0350+  070E E7          	pop d
0351+  070F E6          	pop c
0352+  0710 E5          	pop b
0353+  0711 EF          	pop si
0354+  0712 09          	ret
0355+  0713             
0356+  0713             
0357+  0713             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  0713             ; PRINT NULL TERMINATED STRING
0359+  0713             ; pointer in D
0360+  0713             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  0713             puts:
0362+  0713 D7          	push a
0363+  0714 DA          	push d
0364+  0715             puts_L1:
0365+  0715 1E          	mov al, [d]
0366+  0716 B9 00       	cmp al, 0
0367+  0718 C6 24 07    	jz puts_END
0368+  071B 23          	mov ah, al
0369+  071C 19 00       	mov al, 0
0370+  071E 05 03       	syscall sys_io
0371+  0720 79          	inc d
0372+  0721 0A 15 07    	jmp puts_L1
0373+  0724             puts_END:
0374+  0724 E7          	pop d
0375+  0725 E4          	pop a
0376+  0726 09          	ret
0377+  0727             
0378+  0727             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0727             ; PRINT N SIZE STRING
0380+  0727             ; pointer in D
0381+  0727             ; size in C
0382+  0727             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  0727             putsn:
0384+  0727 DB          	push al
0385+  0728 DA          	push d
0386+  0729 D9          	push c
0387+  072A             putsn_L0:
0388+  072A 1E          	mov al, [d]
0389+  072B 23          	mov ah, al
0390+  072C 19 00       	mov al, 0
0391+  072E 05 03       	syscall sys_io
0392+  0730 79          	inc d
0393+  0731 7E          	dec c	
0394+  0732 C2 00 00    	cmp c, 0
0395+  0735 C7 2A 07    	jne putsn_L0
0396+  0738             putsn_end:
0397+  0738 E6          	pop c
0398+  0739 E7          	pop d
0399+  073A E8          	pop al
0400+  073B 09          	ret
0401+  073C             
0402+  073C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  073C             ; print 16bit decimal number
0404+  073C             ; input number in A
0405+  073C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  073C             print_u16d:
0407+  073C D7          	push a
0408+  073D D8          	push b
0409+  073E 26 10 27    	mov b, 10000
0410+  0741 AE          	div a, b			; get 10000 coeff.
0411+  0742 07 68 07    	call print_number
0412+  0745 11          	mov a, b
0413+  0746 26 E8 03    	mov b, 1000
0414+  0749 AE          	div a, b			; get 10000 coeff.
0415+  074A 07 68 07    	call print_number
0416+  074D 11          	mov a, b
0417+  074E 26 64 00    	mov b, 100
0418+  0751 AE          	div a, b
0419+  0752 07 68 07    	call print_number
0420+  0755 11          	mov a, b
0421+  0756 26 0A 00    	mov b, 10
0422+  0759 AE          	div a, b
0423+  075A 07 68 07    	call print_number
0424+  075D 11          	mov a, b
0425+  075E 6A 30       	add al, $30
0426+  0760 23          	mov ah, al
0427+  0761 19 00       	mov al, 0
0428+  0763 05 03       	syscall sys_io	; print coeff
0429+  0765 E5          	pop b
0430+  0766 E4          	pop a
0431+  0767 09          	ret
0432+  0768             
0433+  0768             
0434+  0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  0768             ; if A == 0, print space
0436+  0768             ; else print A
0437+  0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  0768             print_number:
0439+  0768 6A 30       	add al, $30
0440+  076A 23          	mov ah, al
0441+  076B 07 D9 05    	call putchar
0442+  076E 09          	ret
0443+  076F             
0444+  076F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  076F             ; PRINT 16BIT HEX INTEGER
0446+  076F             ; integer value in reg B
0447+  076F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  076F             print_u16x:
0449+  076F D7          	push a
0450+  0770 D8          	push b
0451+  0771 DD          	push bl
0452+  0772 30          	mov bl, bh
0453+  0773 07 A0 05    	call itoa				; convert bh to char in A
0454+  0776 2F          	mov bl, al				; save al
0455+  0777 19 00       	mov al, 0
0456+  0779 05 03       	syscall sys_io				; display AH
0457+  077B 24          	mov ah, bl				; retrieve al
0458+  077C 19 00       	mov al, 0
0459+  077E 05 03       	syscall sys_io				; display AL
0460+  0780             
0461+  0780 EA          	pop bl
0462+  0781 07 A0 05    	call itoa				; convert bh to char in A
0463+  0784 2F          	mov bl, al				; save al
0464+  0785 19 00       	mov al, 0
0465+  0787 05 03       	syscall sys_io				; display AH
0466+  0789 24          	mov ah, bl				; retrieve al
0467+  078A 19 00       	mov al, 0
0468+  078C 05 03       	syscall sys_io				; display AL
0469+  078E             
0470+  078E E5          	pop b
0471+  078F E4          	pop a
0472+  0790 09          	ret
0473+  0791             
0474+  0791             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  0791             ; INPUT 16BIT HEX INTEGER
0476+  0791             ; read 16bit integer into A
0477+  0791             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  0791             scan_u16x:
0479+  0791 F8 10 00    	enter 16
0480+  0794 D8          	push b
0481+  0795 DA          	push d
0482+  0796             
0483+  0796 FA F1 FF    	lea d, [bp + -15]
0484+  0799 07 E0 05    	call gets				; get number
0485+  079C             
0486+  079C 32          	mov bl, [d]
0487+  079D 37          	mov bh, bl
0488+  079E 33 01 00    	mov bl, [d + 1]
0489+  07A1 07 8E 05    	call atoi				; convert to int in AL
0490+  07A4 23          	mov ah, al				; move to AH
0491+  07A5             
0492+  07A5 33 02 00    	mov bl, [d + 2]
0493+  07A8 37          	mov bh, bl
0494+  07A9 33 03 00    	mov bl, [d + 3]
0495+  07AC 07 8E 05    	call atoi				; convert to int in AL
0496+  07AF             
0497+  07AF E7          	pop d
0498+  07B0 E5          	pop b
0499+  07B1 F9          	leave
0500+  07B2 09          	ret
0501+  07B3             
0502+  07B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  07B3             ; PRINT 8bit HEX INTEGER
0504+  07B3             ; integer value in reg bl
0505+  07B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  07B3             print_u8x:
0507+  07B3 D7          	push a
0508+  07B4 DD          	push bl
0509+  07B5             
0510+  07B5 07 A0 05    	call itoa				; convert bl to char in A
0511+  07B8 2F          	mov bl, al				; save al
0512+  07B9 19 00       	mov al, 0
0513+  07BB 05 03       	syscall sys_io				; display AH
0514+  07BD 24          	mov ah, bl				; retrieve al
0515+  07BE 19 00       	mov al, 0
0516+  07C0 05 03       	syscall sys_io				; display AL
0517+  07C2             
0518+  07C2 EA          	pop bl
0519+  07C3 E4          	pop a
0520+  07C4 09          	ret
0521+  07C5             
0522+  07C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  07C5             ; print 8bit decimal unsigned number
0524+  07C5             ; input number in AL
0525+  07C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  07C5             print_u8d:
0527+  07C5 D7          	push a
0528+  07C6 D8          	push b
0529+  07C7             
0530+  07C7 22 00       	mov ah, 0
0531+  07C9 26 64 00    	mov b, 100
0532+  07CC AE          	div a, b
0533+  07CD D8          	push b			; save remainder
0534+  07CE B9 00       	cmp al, 0
0535+  07D0 C6 DA 07    	je skip100
0536+  07D3 6A 30       	add al, $30
0537+  07D5 23          	mov ah, al
0538+  07D6 19 00       	mov al, 0
0539+  07D8 05 03       	syscall sys_io	; print coeff
0540+  07DA             skip100:
0541+  07DA E4          	pop a
0542+  07DB 22 00       	mov ah, 0
0543+  07DD 26 0A 00    	mov b, 10
0544+  07E0 AE          	div a, b
0545+  07E1 D8          	push b			; save remainder
0546+  07E2 B9 00       	cmp al, 0
0547+  07E4 C6 EE 07    	je skip10
0548+  07E7 6A 30       	add al, $30
0549+  07E9 23          	mov ah, al
0550+  07EA 19 00       	mov al, 0
0551+  07EC 05 03       	syscall sys_io	; print coeff
0552+  07EE             skip10:
0553+  07EE E4          	pop a
0554+  07EF 1B          	mov al, bl
0555+  07F0 6A 30       	add al, $30
0556+  07F2 23          	mov ah, al
0557+  07F3 19 00       	mov al, 0
0558+  07F5 05 03       	syscall sys_io	; print coeff
0559+  07F7 E5          	pop b
0560+  07F8 E4          	pop a
0561+  07F9 09          	ret
0562+  07FA             
0563+  07FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  07FA             ; INPUT 8BIT HEX INTEGER
0565+  07FA             ; read 8bit integer into AL
0566+  07FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  07FA             scan_u8x:
0568+  07FA F8 04 00    	enter 4
0569+  07FD D8          	push b
0570+  07FE DA          	push d
0571+  07FF             
0572+  07FF FA FD FF    	lea d, [bp + -3]
0573+  0802 07 E0 05    	call gets				; get number
0574+  0805             
0575+  0805 32          	mov bl, [d]
0576+  0806 37          	mov bh, bl
0577+  0807 33 01 00    	mov bl, [d + 1]
0578+  080A 07 8E 05    	call atoi				; convert to int in AL
0579+  080D             
0580+  080D E7          	pop d
0581+  080E E5          	pop b
0582+  080F F9          	leave
0583+  0810 09          	ret
0584+  0811             
0585+  0811             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  0811             ; input decimal number
0587+  0811             ; result in A
0588+  0811             ; 655'\0'
0589+  0811             ; low--------high
0590+  0811             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  0811             scan_u16d:
0592+  0811 F8 08 00    	enter 8
0593+  0814 E2          	push si
0594+  0815 D8          	push b
0595+  0816 D9          	push c
0596+  0817 DA          	push d
0597+  0818 FA F9 FF    	lea d, [bp +- 7]
0598+  081B 07 E0 05    	call gets
0599+  081E 07 16 05    	call strlen			; get string length in C
0600+  0821 7E          	dec c
0601+  0822 FD 4E       	mov si, d
0602+  0824 12          	mov a, c
0603+  0825 FD 99       	shl a
0604+  0827 3B 76 05    	mov d, table_power
0605+  082A 59          	add d, a
0606+  082B 38 00 00    	mov c, 0
0607+  082E             mul_loop:
0608+  082E F6          	lodsb			; load ASCII to al
0609+  082F B9 00       	cmp al, 0
0610+  0831 C6 44 08    	je mul_exit
0611+  0834 6F 30       	sub al, $30		; make into integer
0612+  0836 22 00       	mov ah, 0
0613+  0838 2A          	mov b, [d]
0614+  0839 AC          	mul a, b			; result in B since it fits in 16bits
0615+  083A 11          	mov a, b
0616+  083B 28          	mov b, c
0617+  083C 54          	add a, b
0618+  083D 39          	mov c, a
0619+  083E 63 02 00    	sub d, 2
0620+  0841 0A 2E 08    	jmp mul_loop
0621+  0844             mul_exit:
0622+  0844 12          	mov a, c
0623+  0845 E7          	pop d
0624+  0846 E6          	pop c
0625+  0847 E5          	pop b
0626+  0848 EF          	pop si
0627+  0849 F9          	leave
0628+  084A 09          	ret
0120   084B             
0121   084B             
0122   084B             	
0123   084B 52 75 6C 65 s_rule:		.db "Rule: ", 0
0123   084F 3A 20 00 
0124   0852 53 74 65 70 s_steps:	.db "Steps: ", 0
0124   0856 73 3A 20 00 
0125   085A             
0126   085A 20          table_translate:	.db ' '
0127   085B 76          					.db 'v'
0128   085C             	
0129   085C 00 00 00 00 init_state: 	.fill (WIDTH/2), 0
0129   0860 00 00 00 00 
0129   0864 00 00 00 00 
0129   0868 00 00 00 00 
0129   086C 00 00 00 00 
0129   0870 00 00 00 00 
0129   0874 00 00 00 00 
0129   0878 00 00 00 00 
0129   087C 00 00 00 00 
0129   0880 00 00 00 00 
0129   0884 00 00 00 00 
0129   0888 00 00 00 00 
0129   088C 00 00 00 00 
0129   0890 00 00 00 
0130   0893 01          				.db 1 
0131   0894 00 00 00 00 				.fill (WIDTH/2), 0
0131   0898 00 00 00 00 
0131   089C 00 00 00 00 
0131   08A0 00 00 00 00 
0131   08A4 00 00 00 00 
0131   08A8 00 00 00 00 
0131   08AC 00 00 00 00 
0131   08B0 00 00 00 00 
0131   08B4 00 00 00 00 
0131   08B8 00 00 00 00 
0131   08BC 00 00 00 00 
0131   08C0 00 00 00 00 
0131   08C4 00 00 00 00 
0131   08C8 00 00 00 
0132   08CB             
0133   08CB 00 00 00 00 prev_state: 	.fill (WIDTH/2), 0
0133   08CF 00 00 00 00 
0133   08D3 00 00 00 00 
0133   08D7 00 00 00 00 
0133   08DB 00 00 00 00 
0133   08DF 00 00 00 00 
0133   08E3 00 00 00 00 
0133   08E7 00 00 00 00 
0133   08EB 00 00 00 00 
0133   08EF 00 00 00 00 
0133   08F3 00 00 00 00 
0133   08F7 00 00 00 00 
0133   08FB 00 00 00 00 
0133   08FF 00 00 00 
0134   0902 01          				.db 1 
0135   0903 00 00 00 00 				.fill (WIDTH/2), 0
0135   0907 00 00 00 00 
0135   090B 00 00 00 00 
0135   090F 00 00 00 00 
0135   0913 00 00 00 00 
0135   0917 00 00 00 00 
0135   091B 00 00 00 00 
0135   091F 00 00 00 00 
0135   0923 00 00 00 00 
0135   0927 00 00 00 00 
0135   092B 00 00 00 00 
0135   092F 00 00 00 00 
0135   0933 00 00 00 00 
0135   0937 00 00 00 
0136   093A             		
0137   093A 00 00 00 00 state: 			.fill (WIDTH+1), 0
0137   093E 00 00 00 00 
0137   0942 00 00 00 00 
0137   0946 00 00 00 00 
0137   094A 00 00 00 00 
0137   094E 00 00 00 00 
0137   0952 00 00 00 00 
0137   0956 00 00 00 00 
0137   095A 00 00 00 00 
0137   095E 00 00 00 00 
0137   0962 00 00 00 00 
0137   0966 00 00 00 00 
0137   096A 00 00 00 00 
0137   096E 00 00 00 00 
0137   0972 00 00 00 00 
0137   0976 00 00 00 00 
0137   097A 00 00 00 00 
0137   097E 00 00 00 00 
0137   0982 00 00 00 00 
0137   0986 00 00 00 00 
0137   098A 00 00 00 00 
0137   098E 00 00 00 00 
0137   0992 00 00 00 00 
0137   0996 00 00 00 00 
0137   099A 00 00 00 00 
0137   099E 00 00 00 00 
0137   09A2 00 00 00 00 
0137   09A6 00 00 00 
0138   09A9             
0139   09A9 20 20 20 20 state_chars:	.fill (WIDTH+1), ' '
0139   09AD 20 20 20 20 
0139   09B1 20 20 20 20 
0139   09B5 20 20 20 20 
0139   09B9 20 20 20 20 
0139   09BD 20 20 20 20 
0139   09C1 20 20 20 20 
0139   09C5 20 20 20 20 
0139   09C9 20 20 20 20 
0139   09CD 20 20 20 20 
0139   09D1 20 20 20 20 
0139   09D5 20 20 20 20 
0139   09D9 20 20 20 20 
0139   09DD 20 20 20 20 
0139   09E1 20 20 20 20 
0139   09E5 20 20 20 20 
0139   09E9 20 20 20 20 
0139   09ED 20 20 20 20 
0139   09F1 20 20 20 20 
0139   09F5 20 20 20 20 
0139   09F9 20 20 20 20 
0139   09FD 20 20 20 20 
0139   0A01 20 20 20 20 
0139   0A05 20 20 20 20 
0139   0A09 20 20 20 20 
0139   0A0D 20 20 20 20 
0139   0A11 20 20 20 20 
0139   0A15 20 20 20 
0140   0A18 00          				.db 0
0141   0A19             
0142   0A19             automaton_table:
0143   0A19 01          	.db 1		; 000
0144   0A1A 00          	.db 0		; 001
0145   0A1B 01          	.db 1		; 010
0146   0A1C 00          	.db 0		; 011
0147   0A1D 00          	.db 0		; 100
0148   0A1E 01          	.db 1		; 101
0149   0A1F 00          	.db 0		; 110
0150   0A20 01          	.db 1		; 111
0151   0A21             					
0152   0A21             
0153   0A21 0A 0D       s_menu:		.db "\n\r"
0154   0A23 30 2E 20 52 			.db "0. Run automaton\n\r"
0154   0A27 75 6E 20 61 
0154   0A2B 75 74 6F 6D 
0154   0A2F 61 74 6F 6E 
0154   0A33 0A 0D 
0155   0A35 31 2E 20 43 			.db "1. Change rule\n\r"
0155   0A39 68 61 6E 67 
0155   0A3D 65 20 72 75 
0155   0A41 6C 65 0A 0D 
0156   0A45 32 2E 20 51 			.db "2. Quit\n\r"
0156   0A49 75 69 74 0A 
0156   0A4D 0D 
0157   0A4E 25 20 00    			.db "% ", 0
0158   0A51             				
0159   0A51             .end
tasm: Number of errors = 0
