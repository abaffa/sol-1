0001   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;; ls /usr/bin
0005   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006   0000             
0007   0400             .org PROC_TEXT_ORG			; origin at 1024
0008   0400             
0009   0400             cmd_ls:
0010   0400 10 00 00    	mov a, 0
0011   0403 42 59 06    	mov [prog], a			; move tokennizer pointer to the beginning of the arguments area (address 0)
0012   0406 07 BA 04    	call get_token
0013   0409 1D 5C 06    	mov al, [tok]
0014   040C B9 14       	cmp al, TOK_END
0015   040E C6 25 04    	je cmd_ls_current
0016   0411             cmd_ls_arg_given:
0017   0411 07 40 06    	call putback
0018   0414 07 63 04    	call get_path
0019   0417 3B 5D 06    	mov d, tokstr
0020   041A 19 13       	mov al, 19
0021   041C 05 04       	syscall sys_filesystem	; get dirID in A
0022   041E 27          	mov b, a
0023   041F 19 04       	mov al, 4
0024   0421 05 04       	syscall sys_filesystem
0025   0423 05 0B       	syscall sys_terminate_proc
0026   0425             cmd_ls_current:
0027   0425 19 11       	mov al, 17
0028   0427 05 04       	syscall sys_filesystem		; get current dirID in B
0029   0429 19 04       	mov al, 4
0030   042B 05 04       	syscall sys_filesystem
0031   042D             
0032   042D 05 0B       	syscall sys_terminate_proc
0033   042F             
0034   042F             
0035   042F             .include "lib/token.asm"
0001+  042F             TOKTYP_IDENTIFIER	.equ 0
0002+  042F             TOKTYP_KEYWORD		.equ 1
0003+  042F             TOKTYP_DELIMITER	.equ 2
0004+  042F             TOKTYP_STRING		.equ 3
0005+  042F             TOKTYP_CHAR			.equ 4
0006+  042F             TOKTYP_NUMERIC		.equ 5
0007+  042F             TOKTYP_END			.equ 6
0008+  042F             
0009+  042F             TOK_NULL			.equ 0
0010+  042F             TOK_FSLASH			.equ 1
0011+  042F             TOK_TIMES 			.equ 2
0012+  042F             TOK_PLUS 			.equ 3
0013+  042F             TOK_MINUS 			.equ 4
0014+  042F             TOK_DOT				.equ 5
0015+  042F             TOK_SEMI			.equ 6
0016+  042F             TOK_ANGLE			.equ 7
0017+  042F             TOK_TILDE			.equ 8
0018+  042F             TOK_EQUAL			.equ 9
0019+  042F             TOK_COLON			.equ 10
0020+  042F             TOK_COMMA			.equ 11
0021+  042F             
0022+  042F             TOK_END				.equ 20
0023+  042F             
0024+  042F             
0025+  042F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  042F             ;; read a full command argment from shell input buffer
0027+  042F             ;; argument is written into tokstr
0028+  042F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  042F             get_arg:
0030+  042F D7          	push a
0031+  0430 E2          	push si
0032+  0431 E3          	push di
0033+  0432 19 00       	mov al, 0
0034+  0434 3D 5D 06    	mov [tokstr], al			; nullify tokstr string
0035+  0437 14 59 06    	mov a, [prog]
0036+  043A 4D          	mov si, a
0037+  043B FD 4F 5D 06 	mov di, tokstr
0038+  043F             get_arg_skip_spaces:
0039+  043F F6          	lodsb
0040+  0440 07 53 0B    	call isspace
0041+  0443 C6 3F 04    	je get_arg_skip_spaces
0042+  0446             get_arg_L0:
0043+  0446 B9 3B       	cmp al, $3B				; check if is ';'
0044+  0448 C6 55 04    	je get_arg_end
0045+  044B B9 00       	cmp al, 0
0046+  044D C6 55 04    	je get_arg_end			; check if end of input
0047+  0450 F7          	stosb
0048+  0451 F6          	lodsb
0049+  0452 0A 46 04    	jmp get_arg_L0
0050+  0455             get_arg_end:
0051+  0455 19 00       	mov al, 0
0052+  0457 F7          	stosb
0053+  0458 D5 01 00    	sub si, 1
0054+  045B 4E          	mov a, si
0055+  045C 42 59 06    	mov [prog], a		; update pointer
0056+  045F F0          	pop di
0057+  0460 EF          	pop si
0058+  0461 E4          	pop a
0059+  0462 09          	ret
0060+  0463             
0061+  0463             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0463             ;; read a path formation from shell input buffer
0063+  0463             ;; path is written into tokstr
0064+  0463             ;; /usr/bin
0065+  0463             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0463             get_path:
0067+  0463 D7          	push a
0068+  0464 E2          	push si
0069+  0465 E3          	push di
0070+  0466 19 00       	mov al, 0
0071+  0468 3D 5D 06    	mov [tokstr], al			; nullify tokstr string
0072+  046B 14 59 06    	mov a, [prog]
0073+  046E 4D          	mov si, a
0074+  046F FD 4F 5D 06 	mov di, tokstr
0075+  0473             get_path_skip_spaces:
0076+  0473 F6          	lodsb
0077+  0474 07 53 0B    	call isspace
0078+  0477 C6 73 04    	je get_path_skip_spaces
0079+  047A             get_path_is_pathchar:
0080+  047A F7          	stosb
0081+  047B F6          	lodsb
0082+  047C 07 DD 0A    	call isalnum			;check if is alphanumeric
0083+  047F C6 7A 04    	je get_path_is_pathchar
0084+  0482 B9 2F       	cmp al, '/'				; check if is '/'
0085+  0484 C6 7A 04    	je get_path_is_pathchar
0086+  0487 19 00       	mov al, 0
0087+  0489 F7          	stosb
0088+  048A D5 01 00    	sub si, 1
0089+  048D 4E          	mov a, si
0090+  048E 42 59 06    	mov [prog], a		; update pointer
0091+  0491             get_path_end:
0092+  0491 F0          	pop di
0093+  0492 EF          	pop si
0094+  0493 E4          	pop a
0095+  0494 09          	ret
0096+  0495             
0097+  0495             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0495             ;; read a line
0099+  0495             ;; line is written into tokstr
0100+  0495             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0495             get_line:
0102+  0495 D7          	push a
0103+  0496 E2          	push si
0104+  0497 E3          	push di
0105+  0498 19 00       	mov al, 0
0106+  049A 3D 5D 06    	mov [tokstr], al			; nullify tokstr string
0107+  049D 14 59 06    	mov a, [prog]
0108+  04A0 4D          	mov si, a
0109+  04A1 FD 4F 5D 06 	mov di, tokstr
0110+  04A5             get_line_L0:
0111+  04A5 F6          	lodsb
0112+  04A6 B9 0A       	cmp al, $0A		; check for new line
0113+  04A8 C6 AF 04    	je get_line_exit
0114+  04AB F7          	stosb
0115+  04AC 0A A5 04    	jmp get_line_L0
0116+  04AF             get_line_exit:
0117+  04AF 19 00       	mov al, 0
0118+  04B1 F7          	stosb
0119+  04B2 4E          	mov a, si
0120+  04B3 42 59 06    	mov [prog], a		; update pointer
0121+  04B6 F0          	pop di
0122+  04B7 EF          	pop si
0123+  04B8 E4          	pop a
0124+  04B9 09          	ret
0125+  04BA             
0126+  04BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  04BA             ;; token parser
0128+  04BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  04BA             get_token:
0130+  04BA D7          	push a
0131+  04BB DA          	push d
0132+  04BC E2          	push si
0133+  04BD E3          	push di
0134+  04BE 19 00       	mov al, 0
0135+  04C0 3D 5D 06    	mov [tokstr], al			; nullify tokstr string
0136+  04C3 19 00       	mov al, TOK_NULL
0137+  04C5 3D 5C 06    	mov [tok], al				; nullify token
0138+  04C8 14 59 06    	mov a, [prog]
0139+  04CB 4D          	mov si, a
0140+  04CC FD 4F 5D 06 	mov di, tokstr
0141+  04D0             get_tok_skip_spaces:
0142+  04D0 F6          	lodsb
0143+  04D1 07 53 0B    	call isspace
0144+  04D4 C6 D0 04    	je get_tok_skip_spaces
0145+  04D7 B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  04D9 C6 BE 05    	je get_token_end
0147+  04DC B9 23       	cmp al, '#'			; comments!
0148+  04DE C6 EC 05    	je get_tok_comment
0149+  04E1 07 DD 0A    	call isalnum
0150+  04E4 C6 CB 05    	jz is_alphanumeric
0151+  04E7             ; other token types
0152+  04E7             get_token_slash:
0153+  04E7 B9 2F       	cmp al, '/'				; check if '/'
0154+  04E9 C7 01 05    	jne get_token_minus
0155+  04EC F7          	stosb					; store '/' into token string
0156+  04ED 19 00       	mov al, 0
0157+  04EF F7          	stosb					; terminate token string
0158+  04F0 19 01       	mov al, TOK_FSLASH
0159+  04F2 3D 5C 06    	mov [tok], al			
0160+  04F5 19 02       	mov al, TOKTYP_DELIMITER
0161+  04F7 3D 5B 06    	mov [toktyp], al
0162+  04FA 4E          	mov a, si
0163+  04FB 42 59 06    	mov [prog], a		; update pointer
0164+  04FE 0A E7 05    	jmp get_token_return
0165+  0501             get_token_minus:
0166+  0501 B9 2D       	cmp al, '-'				; check if '-'
0167+  0503 C7 1B 05    	jne get_token_comma
0168+  0506 F7          	stosb					; store '-' into token string
0169+  0507 19 00       	mov al, 0
0170+  0509 F7          	stosb					; terminate token string
0171+  050A 19 04       	mov al, TOK_MINUS
0172+  050C 3D 5C 06    	mov [tok], al			
0173+  050F 19 02       	mov al, TOKTYP_DELIMITER
0174+  0511 3D 5B 06    	mov [toktyp], al
0175+  0514 4E          	mov a, si
0176+  0515 42 59 06    	mov [prog], a		; update pointer
0177+  0518 0A E7 05    	jmp get_token_return
0178+  051B             get_token_comma:
0179+  051B B9 2C       	cmp al, ','				; check if ','
0180+  051D C7 35 05    	jne get_token_semi
0181+  0520 F7          	stosb					; store ',' into token string
0182+  0521 19 00       	mov al, 0
0183+  0523 F7          	stosb					; terminate token string
0184+  0524 19 0B       	mov al, TOK_COMMA
0185+  0526 3D 5C 06    	mov [tok], al			
0186+  0529 19 02       	mov al, TOKTYP_DELIMITER
0187+  052B 3D 5B 06    	mov [toktyp], al
0188+  052E 4E          	mov a, si
0189+  052F 42 59 06    	mov [prog], a		; update pointer
0190+  0532 0A E7 05    	jmp get_token_return
0191+  0535             get_token_semi:
0192+  0535 B9 3B       	cmp al, $3B				; check if ';'
0193+  0537 C7 4F 05    	jne get_token_colon
0194+  053A F7          	stosb					; store ';' into token string
0195+  053B 19 00       	mov al, 0
0196+  053D F7          	stosb					; terminate token string
0197+  053E 19 06       	mov al, TOK_SEMI
0198+  0540 3D 5C 06    	mov [tok], al			
0199+  0543 19 02       	mov al, TOKTYP_DELIMITER
0200+  0545 3D 5B 06    	mov [toktyp], al
0201+  0548 4E          	mov a, si
0202+  0549 42 59 06    	mov [prog], a		; update pointer
0203+  054C 0A E7 05    	jmp get_token_return
0204+  054F             get_token_colon:
0205+  054F B9 3A       	cmp al, $3A				; check if ':'
0206+  0551 C7 69 05    	jne get_token_angle
0207+  0554 F7          	stosb					; store ':' into token string
0208+  0555 19 00       	mov al, 0
0209+  0557 F7          	stosb					; terminate token string
0210+  0558 19 0A       	mov al, TOK_COLON
0211+  055A 3D 5C 06    	mov [tok], al			
0212+  055D 19 02       	mov al, TOKTYP_DELIMITER
0213+  055F 3D 5B 06    	mov [toktyp], al
0214+  0562 4E          	mov a, si
0215+  0563 42 59 06    	mov [prog], a		; update pointer
0216+  0566 0A E7 05    	jmp get_token_return
0217+  0569             get_token_angle:
0218+  0569 B9 3E       	cmp al, $3E				; check if '>'
0219+  056B C7 83 05    	jne get_token_tilde
0220+  056E F7          	stosb					; store '>' into token string
0221+  056F 19 00       	mov al, 0
0222+  0571 F7          	stosb					; terminate token string
0223+  0572 19 07       	mov al, TOK_ANGLE
0224+  0574 3D 5C 06    	mov [tok], al			
0225+  0577 19 02       	mov al, TOKTYP_DELIMITER
0226+  0579 3D 5B 06    	mov [toktyp], al
0227+  057C 4E          	mov a, si
0228+  057D 42 59 06    	mov [prog], a		; update pointer
0229+  0580 0A E7 05    	jmp get_token_return
0230+  0583             get_token_tilde:
0231+  0583 B9 7E       	cmp al, '~'				; check if '~'
0232+  0585 C7 9D 05    	jne get_token_equal
0233+  0588 F7          	stosb					; store '~' into token string
0234+  0589 19 00       	mov al, 0
0235+  058B F7          	stosb					; terminate token string
0236+  058C 19 08       	mov al, TOK_TILDE
0237+  058E 3D 5C 06    	mov [tok], al			
0238+  0591 19 02       	mov al, TOKTYP_DELIMITER
0239+  0593 3D 5B 06    	mov [toktyp], al
0240+  0596 4E          	mov a, si
0241+  0597 42 59 06    	mov [prog], a		; update pointer
0242+  059A 0A E7 05    	jmp get_token_return
0243+  059D             get_token_equal:
0244+  059D B9 3D       	cmp al, '='				; check if '='
0245+  059F C7 B7 05    	jne get_token_skip
0246+  05A2 F7          	stosb					; store '=' into token string
0247+  05A3 19 00       	mov al, 0
0248+  05A5 F7          	stosb					; terminate token string
0249+  05A6 19 09       	mov al, TOK_EQUAL
0250+  05A8 3D 5C 06    	mov [tok], al			
0251+  05AB 19 02       	mov al, TOKTYP_DELIMITER
0252+  05AD 3D 5B 06    	mov [toktyp], al
0253+  05B0 4E          	mov a, si
0254+  05B1 42 59 06    	mov [prog], a		; update pointer
0255+  05B4 0A E7 05    	jmp get_token_return
0256+  05B7             get_token_skip:
0257+  05B7 4E          	mov a, si
0258+  05B8 42 59 06    	mov [prog], a		; update pointer
0259+  05BB 0A E7 05    	jmp get_token_return
0260+  05BE             get_token_end:				; end of file token
0261+  05BE 19 14       	mov al, TOK_END
0262+  05C0 3D 5C 06    	mov [tok], al
0263+  05C3 19 06       	mov al, TOKTYP_END
0264+  05C5 3D 5B 06    	mov [toktyp], al
0265+  05C8 0A E7 05    	jmp get_token_return
0266+  05CB             is_alphanumeric:
0267+  05CB F7          	stosb
0268+  05CC F6          	lodsb
0269+  05CD 07 DD 0A    	call isalnum			;check if is alphanumeric
0270+  05D0 C6 CB 05    	jz is_alphanumeric
0271+  05D3 B9 2E       	cmp al, $2E				; check if is '.'
0272+  05D5 C6 CB 05    	je is_alphanumeric
0273+  05D8 19 00       	mov al, 0
0274+  05DA F7          	stosb
0275+  05DB 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  05DD 3D 5B 06    	mov [toktyp], al
0277+  05E0 D5 01 00    	sub si, 1
0278+  05E3 4E          	mov a, si
0279+  05E4 42 59 06    	mov [prog], a		; update pointer
0280+  05E7             get_token_return:
0281+  05E7 F0          	pop di
0282+  05E8 EF          	pop si
0283+  05E9 E7          	pop d
0284+  05EA E4          	pop a
0285+  05EB 09          	ret
0286+  05EC             get_tok_comment:
0287+  05EC F6          	lodsb
0288+  05ED B9 0A       	cmp al, $0A			; new line
0289+  05EF C7 EC 05    	jne get_tok_comment
0290+  05F2 0A D0 04    	jmp get_tok_skip_spaces
0291+  05F5             
0292+  05F5             
0293+  05F5             get_number:
0294+  05F5 D7          	push a
0295+  05F6 DA          	push d
0296+  05F7 E2          	push si
0297+  05F8 E3          	push di
0298+  05F9 19 00       	mov al, 0
0299+  05FB 3D 5D 06    	mov [tokstr], al			; nullify tokstr string
0300+  05FE 19 00       	mov al, TOK_NULL
0301+  0600 3D 5C 06    	mov [tok], al				; nullify token
0302+  0603 14 59 06    	mov a, [prog]
0303+  0606 4D          	mov si, a
0304+  0607 FD 4F 5D 06 	mov di, tokstr
0305+  060B             get_number_skip_spaces:
0306+  060B F6          	lodsb
0307+  060C 07 53 0B    	call isspace
0308+  060F C6 0B 06    	je get_number_skip_spaces
0309+  0612 B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  0614 C7 24 06    	jne get_number_L0
0311+  0617 19 14       	mov al, TOK_END
0312+  0619 3D 5C 06    	mov [tok], al
0313+  061C 19 06       	mov al, TOKTYP_END
0314+  061E 3D 5B 06    	mov [toktyp], al
0315+  0621 0A 3B 06    	jmp get_number_return
0316+  0624             get_number_L0:
0317+  0624 F7          	stosb
0318+  0625 F6          	lodsb
0319+  0626 07 E7 0A    	call isdigit			;check if is numeric
0320+  0629 C6 24 06    	jz get_number_L0
0321+  062C 19 00       	mov al, 0
0322+  062E F7          	stosb
0323+  062F 19 05       	mov al, TOKTYP_NUMERIC
0324+  0631 3D 5B 06    	mov [toktyp], al
0325+  0634 D5 01 00    	sub si, 1
0326+  0637 4E          	mov a, si
0327+  0638 42 59 06    	mov [prog], a		; update pointer
0328+  063B             get_number_return:
0329+  063B F0          	pop di
0330+  063C EF          	pop si
0331+  063D E7          	pop d
0332+  063E E4          	pop a
0333+  063F 09          	ret
0334+  0640             
0335+  0640             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0640             ;; PUT BACK TOKEN
0337+  0640             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  0640             putback:
0339+  0640 D7          	push a
0340+  0641 E2          	push si
0341+  0642 FD 4D 5D 06 	mov si, tokstr	
0342+  0646             putback_loop:
0343+  0646 F6          	lodsb
0344+  0647 B9 00       	cmp al, 0
0345+  0649 C6 56 06    	je putback_end
0346+  064C 14 59 06    	mov a, [prog]
0347+  064F 7D          	dec a
0348+  0650 42 59 06    	mov [prog], a			; update pointer
0349+  0653 0A 46 06    	jmp putback_loop
0350+  0656             putback_end:
0351+  0656 EF          	pop si
0352+  0657 E4          	pop a
0353+  0658 09          	ret
0354+  0659             
0355+  0659             
0356+  0659             
0357+  0659             
0358+  0659 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  065B             
0360+  065B 00          toktyp: 	.db 0			; token type symbol
0361+  065C 00          tok:		.db 0			; current token symbol
0362+  065D 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  0661 00 00 00 00 
0362+  0665 00 00 00 00 
0362+  0669 00 00 00 00 
0362+  066D 00 00 00 00 
0362+  0671 00 00 00 00 
0362+  0675 00 00 00 00 
0362+  0679 00 00 00 00 
0362+  067D 00 00 00 00 
0362+  0681 00 00 00 00 
0362+  0685 00 00 00 00 
0362+  0689 00 00 00 00 
0362+  068D 00 00 00 00 
0362+  0691 00 00 00 00 
0362+  0695 00 00 00 00 
0362+  0699 00 00 00 00 
0362+  069D 00 00 00 00 
0362+  06A1 00 00 00 00 
0362+  06A5 00 00 00 00 
0362+  06A9 00 00 00 00 
0362+  06AD 00 00 00 00 
0362+  06B1 00 00 00 00 
0362+  06B5 00 00 00 00 
0362+  06B9 00 00 00 00 
0362+  06BD 00 00 00 00 
0362+  06C1 00 00 00 00 
0362+  06C5 00 00 00 00 
0362+  06C9 00 00 00 00 
0362+  06CD 00 00 00 00 
0362+  06D1 00 00 00 00 
0362+  06D5 00 00 00 00 
0362+  06D9 00 00 00 00 
0362+  06DD 00 00 00 00 
0362+  06E1 00 00 00 00 
0362+  06E5 00 00 00 00 
0362+  06E9 00 00 00 00 
0362+  06ED 00 00 00 00 
0362+  06F1 00 00 00 00 
0362+  06F5 00 00 00 00 
0362+  06F9 00 00 00 00 
0362+  06FD 00 00 00 00 
0362+  0701 00 00 00 00 
0362+  0705 00 00 00 00 
0362+  0709 00 00 00 00 
0362+  070D 00 00 00 00 
0362+  0711 00 00 00 00 
0362+  0715 00 00 00 00 
0362+  0719 00 00 00 00 
0362+  071D 00 00 00 00 
0362+  0721 00 00 00 00 
0362+  0725 00 00 00 00 
0362+  0729 00 00 00 00 
0362+  072D 00 00 00 00 
0362+  0731 00 00 00 00 
0362+  0735 00 00 00 00 
0362+  0739 00 00 00 00 
0362+  073D 00 00 00 00 
0362+  0741 00 00 00 00 
0362+  0745 00 00 00 00 
0362+  0749 00 00 00 00 
0362+  074D 00 00 00 00 
0362+  0751 00 00 00 00 
0362+  0755 00 00 00 00 
0362+  0759 00 00 00 00 
0036   075D             .include "lib/stdio.asm"
0001+  075D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  075D             ; stdio.s
0003+  075D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  075D             .include "string.asm"
0001++ 075D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 075D             ; string.s
0003++ 075D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 075D             
0005++ 075D             
0006++ 075D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 075D             ; strrev
0008++ 075D             ; reverse a string
0009++ 075D             ; D = string address
0010++ 075D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 075D             ; 01234
0012++ 075D             strrev:
0013++ 075D 4B          	pusha
0014++ 075E 07 A4 07    	call strlen	; length in C
0015++ 0761 12          	mov a, c
0016++ 0762 AF 01 00    	cmp a, 1
0017++ 0765 D0 7F 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0768 7D          	dec a
0019++ 0769 FD 4E       	mov si, d	; beginning of string
0020++ 076B FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 076D 59          	add d, a	; end of string
0022++ 076E 12          	mov a, c
0023++ 076F FD 9B       	shr a		; divide by 2
0024++ 0771 39          	mov c, a	; C now counts the steps
0025++ 0772             strrev_L0:
0026++ 0772 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0773 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0774 3E          	mov [d], al	; store left char into right side
0029++ 0775 1B          	mov al, bl
0030++ 0776 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0777 7E          	dec c
0032++ 0778 7F          	dec d
0033++ 0779 C2 00 00    	cmp c, 0
0034++ 077C C7 72 07    	jne strrev_L0
0035++ 077F             strrev_end:
0036++ 077F 4C          	popa
0037++ 0780 09          	ret
0038++ 0781             	
0039++ 0781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0781             ; strchr
0041++ 0781             ; search string in D for char in AL
0042++ 0781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0781             strchr:
0044++ 0781             strchr_L0:
0045++ 0781 32          	mov bl, [d]
0046++ 0782 C1 00       	cmp bl, 0
0047++ 0784 C6 8F 07    	je strchr_end
0048++ 0787 BA          	cmp al, bl
0049++ 0788 C6 8F 07    	je strchr_end
0050++ 078B 79          	inc d
0051++ 078C 0A 81 07    	jmp strchr_L0
0052++ 078F             strchr_end:
0053++ 078F 1B          	mov al, bl
0054++ 0790 09          	ret
0055++ 0791             
0056++ 0791             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0791             ; strstr
0058++ 0791             ; find sub-string
0059++ 0791             ; str1 in SI
0060++ 0791             ; str2 in DI
0061++ 0791             ; SI points to end of source string
0062++ 0791             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0791             strstr:
0064++ 0791 DB          	push al
0065++ 0792 DA          	push d
0066++ 0793 E3          	push di
0067++ 0794             strstr_loop:
0068++ 0794 F3          	cmpsb					; compare a byte of the strings
0069++ 0795 C7 A0 07    	jne strstr_ret
0070++ 0798 FC 00 00    	lea d, [di + 0]
0071++ 079B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 079D C7 94 07    	jne strstr_loop				; equal chars but not at end
0073++ 07A0             strstr_ret:
0074++ 07A0 F0          	pop di
0075++ 07A1 E7          	pop d
0076++ 07A2 E8          	pop al
0077++ 07A3 09          	ret
0078++ 07A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 07A4             ; length of null terminated string
0080++ 07A4             ; result in C
0081++ 07A4             ; pointer in D
0082++ 07A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 07A4             strlen:
0084++ 07A4 DA          	push d
0085++ 07A5 38 00 00    	mov c, 0
0086++ 07A8             strlen_L1:
0087++ 07A8 BD 00       	cmp byte [d], 0
0088++ 07AA C6 B2 07    	je strlen_ret
0089++ 07AD 79          	inc d
0090++ 07AE 78          	inc c
0091++ 07AF 0A A8 07    	jmp strlen_L1
0092++ 07B2             strlen_ret:
0093++ 07B2 E7          	pop d
0094++ 07B3 09          	ret
0095++ 07B4             
0096++ 07B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07B4             ; STRCMP
0098++ 07B4             ; compare two strings
0099++ 07B4             ; str1 in SI
0100++ 07B4             ; str2 in DI
0101++ 07B4             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 07B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07B4             strcmp:
0104++ 07B4 DB          	push al
0105++ 07B5 DA          	push d
0106++ 07B6 E3          	push di
0107++ 07B7 E2          	push si
0108++ 07B8             strcmp_loop:
0109++ 07B8 F3          	cmpsb					; compare a byte of the strings
0110++ 07B9 C7 C4 07    	jne strcmp_ret
0111++ 07BC FB FF FF    	lea d, [si +- 1]
0112++ 07BF BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07C1 C7 B8 07    	jne strcmp_loop				; equal chars but not at end
0114++ 07C4             strcmp_ret:
0115++ 07C4 EF          	pop si
0116++ 07C5 F0          	pop di
0117++ 07C6 E7          	pop d
0118++ 07C7 E8          	pop al
0119++ 07C8 09          	ret
0120++ 07C9             
0121++ 07C9             
0122++ 07C9             ; STRCPY
0123++ 07C9             ; copy null terminated string from SI to DI
0124++ 07C9             ; source in SI
0125++ 07C9             ; destination in DI
0126++ 07C9             strcpy:
0127++ 07C9 E2          	push si
0128++ 07CA E3          	push di
0129++ 07CB DB          	push al
0130++ 07CC             strcpy_L1:
0131++ 07CC F6          	lodsb
0132++ 07CD F7          	stosb
0133++ 07CE B9 00       	cmp al, 0
0134++ 07D0 C7 CC 07    	jne strcpy_L1
0135++ 07D3             strcpy_end:
0136++ 07D3 E8          	pop al
0137++ 07D4 F0          	pop di
0138++ 07D5 EF          	pop si
0139++ 07D6 09          	ret
0140++ 07D7             
0141++ 07D7             ; STRCAT
0142++ 07D7             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07D7             ; source in SI
0144++ 07D7             ; destination in DI
0145++ 07D7             strcat:
0146++ 07D7 E2          	push si
0147++ 07D8 E3          	push di
0148++ 07D9 D7          	push a
0149++ 07DA DA          	push d
0150++ 07DB 50          	mov a, di
0151++ 07DC 3C          	mov d, a
0152++ 07DD             strcat_goto_end_L1:
0153++ 07DD BD 00       	cmp byte[d], 0
0154++ 07DF C6 E6 07    	je strcat_start
0155++ 07E2 79          	inc d
0156++ 07E3 0A DD 07    	jmp strcat_goto_end_L1
0157++ 07E6             strcat_start:
0158++ 07E6 FD 50       	mov di, d
0159++ 07E8             strcat_L1:
0160++ 07E8 F6          	lodsb
0161++ 07E9 F7          	stosb
0162++ 07EA B9 00       	cmp al, 0
0163++ 07EC C7 E8 07    	jne strcat_L1
0164++ 07EF             strcat_end:
0165++ 07EF E7          	pop d
0166++ 07F0 E4          	pop a
0167++ 07F1 F0          	pop di
0168++ 07F2 EF          	pop si
0169++ 07F3 09          	ret
0005+  07F4             
0006+  07F4 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  07F8 34 35 36 37 
0006+  07FC 38 39 41 42 
0006+  0800 43 44 45 46 
0007+  0804 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0808 1B 5B 48 00 
0008+  080C             
0009+  080C 01 00       table_power:.dw 1
0010+  080E 0A 00       			.dw 10
0011+  0810 64 00       			.dw 100
0012+  0812 E8 03       			.dw 1000
0013+  0814 10 27       			.dw 10000
0014+  0816             
0015+  0816             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0816             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0816             ; ASCII in BL
0018+  0816             ; result in AL
0019+  0816             ; ascii for F = 0100 0110
0020+  0816             ; ascii for 9 = 0011 1001
0021+  0816             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0816             hex_ascii_encode:
0023+  0816 1B          	mov al, bl
0024+  0817 93 40       	test al, $40				; test if letter or number
0025+  0819 C7 1F 08    	jnz hex_letter
0026+  081C 87 0F       	and al, $0F				; get number
0027+  081E 09          	ret
0028+  081F             hex_letter:
0029+  081F 87 0F       	and al, $0F				; get letter
0030+  0821 6A 09       	add al, 9
0031+  0823 09          	ret
0032+  0824             
0033+  0824             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0824             ; ATOI
0035+  0824             ; 2 letter hex string in B
0036+  0824             ; 8bit integer returned in AL
0037+  0824             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0824             atoi:
0039+  0824 D8          	push b
0040+  0825 07 16 08    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0828 30          	mov bl, bh
0042+  0829 DB          	push al					; save a
0043+  082A 07 16 08    	call hex_ascii_encode
0044+  082D EA          	pop bl	
0045+  082E FD 9E 04    	shl al, 4
0046+  0831 8C          	or al, bl
0047+  0832 E5          	pop b
0048+  0833 09          	ret	
0049+  0834             
0050+  0834             
0051+  0834             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0834             ; printf
0053+  0834             ; no need for explanations!
0054+  0834             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0834             printf:
0056+  0834 09          	ret
0057+  0835             
0058+  0835             
0059+  0835             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0835             ; scanf
0061+  0835             ; no need for explanations!
0062+  0835             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0835             scanf:
0064+  0835 09          	ret
0065+  0836             
0066+  0836             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0836             ; ITOA
0068+  0836             ; 8bit value in BL
0069+  0836             ; 2 byte ASCII result in A
0070+  0836             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0836             itoa:
0072+  0836 DA          	push d
0073+  0837 D8          	push b
0074+  0838 A7 00       	mov bh, 0
0075+  083A FD A4 04    	shr bl, 4	
0076+  083D 74          	mov d, b
0077+  083E 1F F4 07    	mov al, [d + s_hex_digits]
0078+  0841 23          	mov ah, al
0079+  0842             	
0080+  0842 E5          	pop b
0081+  0843 D8          	push b
0082+  0844 A7 00       	mov bh, 0
0083+  0846 FD 87 0F    	and bl, $0F
0084+  0849 74          	mov d, b
0085+  084A 1F F4 07    	mov al, [d + s_hex_digits]
0086+  084D E5          	pop b
0087+  084E E7          	pop d
0088+  084F 09          	ret
0089+  0850             
0090+  0850             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0850             ; HEX STRING TO BINARY
0092+  0850             ; di = destination address
0093+  0850             ; si = source
0094+  0850             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0850             hex_to_int:
0096+  0850             hex_to_int_L1:
0097+  0850 F6          	lodsb					; load from [SI] to AL
0098+  0851 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0853 C6 60 08    	jz hex_to_int_ret
0100+  0856 36          	mov bh, al
0101+  0857 F6          	lodsb
0102+  0858 2F          	mov bl, al
0103+  0859 07 24 08    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  085C F7          	stosb					; store AL to [DI]
0105+  085D 0A 50 08    	jmp hex_to_int_L1
0106+  0860             hex_to_int_ret:
0107+  0860 09          	ret		
0108+  0861             
0109+  0861             
0110+  0861             
0111+  0861             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0861             ; GETCHAR
0113+  0861             ; char in ah
0114+  0861             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0861             getchar:
0116+  0861 DB          	push al
0117+  0862             getchar_retry:
0118+  0862 FD 0C       	sti
0119+  0864 19 01       	mov al, 1
0120+  0866 05 03       	syscall sys_io			; receive in AH
0121+  0868 B9 00       	cmp al, 0			; check if any char was receive
0122+  086A C6 62 08    	je getchar_retry
0123+  086D E8          	pop al
0124+  086E 09          	ret
0125+  086F             
0126+  086F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  086F             ; PUTCHAR
0128+  086F             ; char in ah
0129+  086F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  086F             putchar:
0131+  086F D7          	push a
0132+  0870 19 00       	mov al, 0
0133+  0872 05 03       	syscall sys_io			; char in AH
0134+  0874 E4          	pop a
0135+  0875 09          	ret
0136+  0876             
0137+  0876             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0876             ;; INPUT A STRING
0139+  0876             ;; terminates with null
0140+  0876             ;; pointer in D
0141+  0876             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0876             gets:
0143+  0876 D7          	push a
0144+  0877 DA          	push d
0145+  0878             gets_loop:
0146+  0878 FD 0C       	sti
0147+  087A 19 01       	mov al, 1
0148+  087C 05 03       	syscall sys_io			; receive in AH
0149+  087E B9 00       	cmp al, 0				; check error code (AL)
0150+  0880 C6 78 08    	je gets_loop			; if no char received, retry
0151+  0883             
0152+  0883 76 1B       	cmp ah, 27
0153+  0885 C6 A6 08    	je gets_telnet_escape
0154+  0888 76 0A       	cmp ah, $0A				; LF
0155+  088A C6 FF 08    	je gets_end
0156+  088D 76 0D       	cmp ah, $0D				; CR
0157+  088F C6 FF 08    	je gets_end
0158+  0892 76 5C       	cmp ah, $5C				; '\\'
0159+  0894 C6 D6 08    	je gets_escape
0160+  0897             	
0161+  0897 76 08       	cmp ah, $08			; check for backspace
0162+  0899 C6 A2 08    	je gets_backspace
0163+  089C             
0164+  089C 1A          	mov al, ah
0165+  089D 3E          	mov [d], al
0166+  089E 79          	inc d
0167+  089F 0A 78 08    	jmp gets_loop
0168+  08A2             gets_backspace:
0169+  08A2 7F          	dec d
0170+  08A3 0A 78 08    	jmp gets_loop
0171+  08A6             gets_telnet_escape:
0172+  08A6 FD 0C       	sti
0173+  08A8 19 01       	mov al, 1
0174+  08AA 05 03       	syscall sys_io				; receive in AH without echo
0175+  08AC B9 00       	cmp al, 0					; check error code (AL)
0176+  08AE C6 A6 08    	je gets_telnet_escape		; if no char received, retry
0177+  08B1 76 5B       	cmp ah, '['
0178+  08B3 C7 78 08    	jne gets_loop
0179+  08B6             gets_telnet_escape_phase2:
0180+  08B6 FD 0C       	sti
0181+  08B8 19 01       	mov al, 1
0182+  08BA 05 03       	syscall sys_io					; receive in AH without echo
0183+  08BC B9 00       	cmp al, 0						; check error code (AL)
0184+  08BE C6 B6 08    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  08C1 76 44       	cmp ah, 'D'
0186+  08C3 C6 CE 08    	je gets_left_arrow
0187+  08C6 76 43       	cmp ah, 'C'
0188+  08C8 C6 D2 08    	je gets_right_arrow
0189+  08CB 0A 78 08    	jmp gets_loop
0190+  08CE             gets_left_arrow:
0191+  08CE 7F          	dec d
0192+  08CF 0A 78 08    	jmp gets_loop
0193+  08D2             gets_right_arrow:
0194+  08D2 79          	inc d
0195+  08D3 0A 78 08    	jmp gets_loop
0196+  08D6             gets_escape:
0197+  08D6 FD 0C       	sti
0198+  08D8 19 01       	mov al, 1
0199+  08DA 05 03       	syscall sys_io			; receive in AH
0200+  08DC B9 00       	cmp al, 0				; check error code (AL)
0201+  08DE C6 D6 08    	je gets_escape			; if no char received, retry
0202+  08E1 76 6E       	cmp ah, 'n'
0203+  08E3 C6 F1 08    	je gets_LF
0204+  08E6 76 72       	cmp ah, 'r'
0205+  08E8 C6 F8 08    	je gets_CR
0206+  08EB 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  08EC 3E          	mov [d], al
0208+  08ED 79          	inc d
0209+  08EE 0A 78 08    	jmp gets_loop
0210+  08F1             gets_LF:
0211+  08F1 19 0A       	mov al, $0A
0212+  08F3 3E          	mov [d], al
0213+  08F4 79          	inc d
0214+  08F5 0A 78 08    	jmp gets_loop
0215+  08F8             gets_CR:
0216+  08F8 19 0D       	mov al, $0D
0217+  08FA 3E          	mov [d], al
0218+  08FB 79          	inc d
0219+  08FC 0A 78 08    	jmp gets_loop
0220+  08FF             gets_end:
0221+  08FF 19 00       	mov al, 0
0222+  0901 3E          	mov [d], al				; terminate string
0223+  0902 E7          	pop d
0224+  0903 E4          	pop a
0225+  0904 09          	ret
0226+  0905             
0227+  0905             
0228+  0905             
0229+  0905             
0230+  0905             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0905             ;; INPUT TEXT
0232+  0905             ;; terminated with CTRL+D
0233+  0905             ;; pointer in D
0234+  0905             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0905             gettxt:
0236+  0905 D7          	push a
0237+  0906 DA          	push d
0238+  0907             gettxt_loop:
0239+  0907 19 01       	mov al, 1
0240+  0909 05 03       	syscall sys_io			; receive in AH
0241+  090B B9 00       	cmp al, 0				; check error code (AL)
0242+  090D C6 07 09    	je gettxt_loop		; if no char received, retry
0243+  0910 76 04       	cmp ah, 4			; EOT
0244+  0912 C6 50 09    	je gettxt_end
0245+  0915 76 08       	cmp ah, $08			; check for backspace
0246+  0917 C6 4C 09    	je gettxt_backspace
0247+  091A 76 5C       	cmp ah, $5C				; '\\'
0248+  091C C6 25 09    	je gettxt_escape
0249+  091F 1A          	mov al, ah
0250+  0920 3E          	mov [d], al
0251+  0921 79          	inc d
0252+  0922 0A 07 09    	jmp gettxt_loop
0253+  0925             gettxt_escape:
0254+  0925 19 01       	mov al, 1
0255+  0927 05 03       	syscall sys_io			; receive in AH
0256+  0929 B9 00       	cmp al, 0				; check error code (AL)
0257+  092B C6 25 09    	je gettxt_escape		; if no char received, retry
0258+  092E 76 6E       	cmp ah, 'n'
0259+  0930 C6 3E 09    	je gettxt_LF
0260+  0933 76 72       	cmp ah, 'r'
0261+  0935 C6 45 09    	je gettxt_CR
0262+  0938 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0939 3E          	mov [d], al
0264+  093A 79          	inc d
0265+  093B 0A 07 09    	jmp gettxt_loop
0266+  093E             gettxt_LF:
0267+  093E 19 0A       	mov al, $0A
0268+  0940 3E          	mov [d], al
0269+  0941 79          	inc d
0270+  0942 0A 07 09    	jmp gettxt_loop
0271+  0945             gettxt_CR:
0272+  0945 19 0D       	mov al, $0D
0273+  0947 3E          	mov [d], al
0274+  0948 79          	inc d
0275+  0949 0A 07 09    	jmp gettxt_loop
0276+  094C             gettxt_backspace:
0277+  094C 7F          	dec d
0278+  094D 0A 07 09    	jmp gettxt_loop
0279+  0950             gettxt_end:
0280+  0950 19 00       	mov al, 0
0281+  0952 3E          	mov [d], al				; terminate string
0282+  0953 E7          	pop d
0283+  0954 E4          	pop a
0284+  0955 09          	ret
0285+  0956             
0286+  0956             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0956             ; PRINT NEW LINE
0288+  0956             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0956             printnl:
0290+  0956 D7          	push a
0291+  0957 10 00 0A    	mov a, $0A00
0292+  095A 05 03       	syscall sys_io
0293+  095C 10 00 0D    	mov a, $0D00
0294+  095F 05 03       	syscall sys_io
0295+  0961 E4          	pop a
0296+  0962 09          	ret
0297+  0963             
0298+  0963             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0963             ; strtoint
0300+  0963             ; 4 digit hex string number in d
0301+  0963             ; integer returned in A
0302+  0963             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0963             strtointx:
0304+  0963 D8          	push b
0305+  0964 32          	mov bl, [d]
0306+  0965 37          	mov bh, bl
0307+  0966 33 01 00    	mov bl, [d + 1]
0308+  0969 07 24 08    	call atoi				; convert to int in AL
0309+  096C 23          	mov ah, al				; move to AH
0310+  096D 33 02 00    	mov bl, [d + 2]
0311+  0970 37          	mov bh, bl
0312+  0971 33 03 00    	mov bl, [d + 3]
0313+  0974 07 24 08    	call atoi				; convert to int in AL
0314+  0977 E5          	pop b
0315+  0978 09          	ret
0316+  0979             
0317+  0979             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0979             ; strtoint
0319+  0979             ; 5 digit base10 string number in d
0320+  0979             ; integer returned in A
0321+  0979             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0979             strtoint:
0323+  0979 E2          	push si
0324+  097A D8          	push b
0325+  097B D9          	push c
0326+  097C DA          	push d
0327+  097D 07 A4 07    	call strlen			; get string length in C
0328+  0980 7E          	dec c
0329+  0981 FD 4E       	mov si, d
0330+  0983 12          	mov a, c
0331+  0984 FD 99       	shl a
0332+  0986 3B 0C 08    	mov d, table_power
0333+  0989 59          	add d, a
0334+  098A 38 00 00    	mov c, 0
0335+  098D             strtoint_L0:
0336+  098D F6          	lodsb			; load ASCII to al
0337+  098E B9 00       	cmp al, 0
0338+  0990 C6 A3 09    	je strtoint_end
0339+  0993 6F 30       	sub al, $30		; make into integer
0340+  0995 22 00       	mov ah, 0
0341+  0997 2A          	mov b, [d]
0342+  0998 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0999 11          	mov a, b
0344+  099A 28          	mov b, c
0345+  099B 54          	add a, b
0346+  099C 39          	mov c, a
0347+  099D 63 02 00    	sub d, 2
0348+  09A0 0A 8D 09    	jmp strtoint_L0
0349+  09A3             strtoint_end:
0350+  09A3 12          	mov a, c
0351+  09A4 E7          	pop d
0352+  09A5 E6          	pop c
0353+  09A6 E5          	pop b
0354+  09A7 EF          	pop si
0355+  09A8 09          	ret
0356+  09A9             
0357+  09A9             
0358+  09A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  09A9             ; PRINT NULL TERMINATED STRING
0360+  09A9             ; pointer in D
0361+  09A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  09A9             puts:
0363+  09A9 D7          	push a
0364+  09AA DA          	push d
0365+  09AB             puts_L1:
0366+  09AB 1E          	mov al, [d]
0367+  09AC B9 00       	cmp al, 0
0368+  09AE C6 BA 09    	jz puts_END
0369+  09B1 23          	mov ah, al
0370+  09B2 19 00       	mov al, 0
0371+  09B4 05 03       	syscall sys_io
0372+  09B6 79          	inc d
0373+  09B7 0A AB 09    	jmp puts_L1
0374+  09BA             puts_END:
0375+  09BA E7          	pop d
0376+  09BB E4          	pop a
0377+  09BC 09          	ret
0378+  09BD             
0379+  09BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  09BD             ; PRINT N SIZE STRING
0381+  09BD             ; pointer in D
0382+  09BD             ; size in C
0383+  09BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  09BD             putsn:
0385+  09BD DB          	push al
0386+  09BE DA          	push d
0387+  09BF D9          	push c
0388+  09C0             putsn_L0:
0389+  09C0 1E          	mov al, [d]
0390+  09C1 23          	mov ah, al
0391+  09C2 19 00       	mov al, 0
0392+  09C4 05 03       	syscall sys_io
0393+  09C6 79          	inc d
0394+  09C7 7E          	dec c	
0395+  09C8 C2 00 00    	cmp c, 0
0396+  09CB C7 C0 09    	jne putsn_L0
0397+  09CE             putsn_end:
0398+  09CE E6          	pop c
0399+  09CF E7          	pop d
0400+  09D0 E8          	pop al
0401+  09D1 09          	ret
0402+  09D2             
0403+  09D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  09D2             ; print 16bit decimal number
0405+  09D2             ; input number in A
0406+  09D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  09D2             print_u16d:
0408+  09D2 D7          	push a
0409+  09D3 D8          	push b
0410+  09D4 26 10 27    	mov b, 10000
0411+  09D7 AE          	div a, b			; get 10000's coeff.
0412+  09D8 07 FA 09    	call print_number
0413+  09DB 11          	mov a, b
0414+  09DC 26 E8 03    	mov b, 1000
0415+  09DF AE          	div a, b			; get 1000's coeff.
0416+  09E0 07 FA 09    	call print_number
0417+  09E3 11          	mov a, b
0418+  09E4 26 64 00    	mov b, 100
0419+  09E7 AE          	div a, b
0420+  09E8 07 FA 09    	call print_number
0421+  09EB 11          	mov a, b
0422+  09EC 26 0A 00    	mov b, 10
0423+  09EF AE          	div a, b
0424+  09F0 07 FA 09    	call print_number
0425+  09F3 1B          	mov al, bl			; 1's coeff in bl
0426+  09F4 07 FA 09    	call print_number
0427+  09F7 E5          	pop b
0428+  09F8 E4          	pop a
0429+  09F9 09          	ret
0430+  09FA             
0431+  09FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0432+  09FA             ; print AL
0433+  09FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0434+  09FA             print_number:
0435+  09FA 6A 30       	add al, $30
0436+  09FC 23          	mov ah, al
0437+  09FD 07 6F 08    	call putchar
0438+  0A00 09          	ret
0439+  0A01             
0440+  0A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0441+  0A01             ; PRINT 16BIT HEX INTEGER
0442+  0A01             ; integer value in reg B
0443+  0A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0444+  0A01             print_u16x:
0445+  0A01 D7          	push a
0446+  0A02 D8          	push b
0447+  0A03 DD          	push bl
0448+  0A04 30          	mov bl, bh
0449+  0A05 07 36 08    	call itoa				; convert bh to char in A
0450+  0A08 2F          	mov bl, al				; save al
0451+  0A09 19 00       	mov al, 0
0452+  0A0B 05 03       	syscall sys_io				; display AH
0453+  0A0D 24          	mov ah, bl				; retrieve al
0454+  0A0E 19 00       	mov al, 0
0455+  0A10 05 03       	syscall sys_io				; display AL
0456+  0A12             
0457+  0A12 EA          	pop bl
0458+  0A13 07 36 08    	call itoa				; convert bh to char in A
0459+  0A16 2F          	mov bl, al				; save al
0460+  0A17 19 00       	mov al, 0
0461+  0A19 05 03       	syscall sys_io				; display AH
0462+  0A1B 24          	mov ah, bl				; retrieve al
0463+  0A1C 19 00       	mov al, 0
0464+  0A1E 05 03       	syscall sys_io				; display AL
0465+  0A20             
0466+  0A20 E5          	pop b
0467+  0A21 E4          	pop a
0468+  0A22 09          	ret
0469+  0A23             
0470+  0A23             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0471+  0A23             ; INPUT 16BIT HEX INTEGER
0472+  0A23             ; read 16bit integer into A
0473+  0A23             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0474+  0A23             scan_u16x:
0475+  0A23 F8 10 00    	enter 16
0476+  0A26 D8          	push b
0477+  0A27 DA          	push d
0478+  0A28             
0479+  0A28 FA F1 FF    	lea d, [bp + -15]
0480+  0A2B 07 76 08    	call gets				; get number
0481+  0A2E             
0482+  0A2E 32          	mov bl, [d]
0483+  0A2F 37          	mov bh, bl
0484+  0A30 33 01 00    	mov bl, [d + 1]
0485+  0A33 07 24 08    	call atoi				; convert to int in AL
0486+  0A36 23          	mov ah, al				; move to AH
0487+  0A37             
0488+  0A37 33 02 00    	mov bl, [d + 2]
0489+  0A3A 37          	mov bh, bl
0490+  0A3B 33 03 00    	mov bl, [d + 3]
0491+  0A3E 07 24 08    	call atoi				; convert to int in AL
0492+  0A41             
0493+  0A41 E7          	pop d
0494+  0A42 E5          	pop b
0495+  0A43 F9          	leave
0496+  0A44 09          	ret
0497+  0A45             
0498+  0A45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0499+  0A45             ; PRINT 8bit HEX INTEGER
0500+  0A45             ; integer value in reg bl
0501+  0A45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0502+  0A45             print_u8x:
0503+  0A45 D7          	push a
0504+  0A46 DD          	push bl
0505+  0A47             
0506+  0A47 07 36 08    	call itoa				; convert bl to char in A
0507+  0A4A 2F          	mov bl, al				; save al
0508+  0A4B 19 00       	mov al, 0
0509+  0A4D 05 03       	syscall sys_io				; display AH
0510+  0A4F 24          	mov ah, bl				; retrieve al
0511+  0A50 19 00       	mov al, 0
0512+  0A52 05 03       	syscall sys_io				; display AL
0513+  0A54             
0514+  0A54 EA          	pop bl
0515+  0A55 E4          	pop a
0516+  0A56 09          	ret
0517+  0A57             
0518+  0A57             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0519+  0A57             ; print 8bit decimal unsigned number
0520+  0A57             ; input number in AL
0521+  0A57             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0522+  0A57             print_u8d:
0523+  0A57 D7          	push a
0524+  0A58 D8          	push b
0525+  0A59             
0526+  0A59 22 00       	mov ah, 0
0527+  0A5B 26 64 00    	mov b, 100
0528+  0A5E AE          	div a, b
0529+  0A5F D8          	push b			; save remainder
0530+  0A60 B9 00       	cmp al, 0
0531+  0A62 C6 6C 0A    	je skip100
0532+  0A65 6A 30       	add al, $30
0533+  0A67 23          	mov ah, al
0534+  0A68 19 00       	mov al, 0
0535+  0A6A 05 03       	syscall sys_io	; print coeff
0536+  0A6C             skip100:
0537+  0A6C E4          	pop a
0538+  0A6D 22 00       	mov ah, 0
0539+  0A6F 26 0A 00    	mov b, 10
0540+  0A72 AE          	div a, b
0541+  0A73 D8          	push b			; save remainder
0542+  0A74 B9 00       	cmp al, 0
0543+  0A76 C6 80 0A    	je skip10
0544+  0A79 6A 30       	add al, $30
0545+  0A7B 23          	mov ah, al
0546+  0A7C 19 00       	mov al, 0
0547+  0A7E 05 03       	syscall sys_io	; print coeff
0548+  0A80             skip10:
0549+  0A80 E4          	pop a
0550+  0A81 1B          	mov al, bl
0551+  0A82 6A 30       	add al, $30
0552+  0A84 23          	mov ah, al
0553+  0A85 19 00       	mov al, 0
0554+  0A87 05 03       	syscall sys_io	; print coeff
0555+  0A89 E5          	pop b
0556+  0A8A E4          	pop a
0557+  0A8B 09          	ret
0558+  0A8C             
0559+  0A8C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0560+  0A8C             ; INPUT 8BIT HEX INTEGER
0561+  0A8C             ; read 8bit integer into AL
0562+  0A8C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0563+  0A8C             scan_u8x:
0564+  0A8C F8 04 00    	enter 4
0565+  0A8F D8          	push b
0566+  0A90 DA          	push d
0567+  0A91             
0568+  0A91 FA FD FF    	lea d, [bp + -3]
0569+  0A94 07 76 08    	call gets				; get number
0570+  0A97             
0571+  0A97 32          	mov bl, [d]
0572+  0A98 37          	mov bh, bl
0573+  0A99 33 01 00    	mov bl, [d + 1]
0574+  0A9C 07 24 08    	call atoi				; convert to int in AL
0575+  0A9F             
0576+  0A9F E7          	pop d
0577+  0AA0 E5          	pop b
0578+  0AA1 F9          	leave
0579+  0AA2 09          	ret
0580+  0AA3             
0581+  0AA3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0582+  0AA3             ; input decimal number
0583+  0AA3             ; result in A
0584+  0AA3             ; 655'\0'
0585+  0AA3             ; low--------high
0586+  0AA3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0AA3             scan_u16d:
0588+  0AA3 F8 08 00    	enter 8
0589+  0AA6 E2          	push si
0590+  0AA7 D8          	push b
0591+  0AA8 D9          	push c
0592+  0AA9 DA          	push d
0593+  0AAA FA F9 FF    	lea d, [bp +- 7]
0594+  0AAD 07 76 08    	call gets
0595+  0AB0 07 A4 07    	call strlen			; get string length in C
0596+  0AB3 7E          	dec c
0597+  0AB4 FD 4E       	mov si, d
0598+  0AB6 12          	mov a, c
0599+  0AB7 FD 99       	shl a
0600+  0AB9 3B 0C 08    	mov d, table_power
0601+  0ABC 59          	add d, a
0602+  0ABD 38 00 00    	mov c, 0
0603+  0AC0             mul_loop:
0604+  0AC0 F6          	lodsb			; load ASCII to al
0605+  0AC1 B9 00       	cmp al, 0
0606+  0AC3 C6 D6 0A    	je mul_exit
0607+  0AC6 6F 30       	sub al, $30		; make into integer
0608+  0AC8 22 00       	mov ah, 0
0609+  0ACA 2A          	mov b, [d]
0610+  0ACB AC          	mul a, b			; result in B since it fits in 16bits
0611+  0ACC 11          	mov a, b
0612+  0ACD 28          	mov b, c
0613+  0ACE 54          	add a, b
0614+  0ACF 39          	mov c, a
0615+  0AD0 63 02 00    	sub d, 2
0616+  0AD3 0A C0 0A    	jmp mul_loop
0617+  0AD6             mul_exit:
0618+  0AD6 12          	mov a, c
0619+  0AD7 E7          	pop d
0620+  0AD8 E6          	pop c
0621+  0AD9 E5          	pop b
0622+  0ADA EF          	pop si
0623+  0ADB F9          	leave
0624+  0ADC 09          	ret
0037   0ADD             .include "lib/ctype.asm"
0001+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0ADD             ; ctype.s
0003+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0ADD             
0005+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0ADD             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0ADD             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0ADD             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0ADD             ;; characters are supported.
0010+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0ADD             ;; isalnum 
0012+  0ADD             ;; isalpha 
0013+  0ADD             ;; islower 
0014+  0ADD             ;; isupper 
0015+  0ADD             ;; isdigit 
0016+  0ADD             ;; isxdigit
0017+  0ADD             ;; iscntrl 
0018+  0ADD             ;; isgraph 
0019+  0ADD             ;; isspace 
0020+  0ADD             ;; isblank 
0021+  0ADD             ;; isprint 
0022+  0ADD             ;; ispunct 
0023+  0ADD             ;; tolower 
0024+  0ADD             ;; toupper
0025+  0ADD             
0026+  0ADD             
0027+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0ADD             ;; IS ALPHANUMERIC
0029+  0ADD             ;; sets ZF according with result
0030+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0ADD             isalnum:
0032+  0ADD 07 FA 0A    	call isalpha
0033+  0AE0 C6 E6 0A    	je isalnum_exit
0034+  0AE3 07 E7 0A    	call isdigit
0035+  0AE6             isalnum_exit:
0036+  0AE6 09          	ret	
0037+  0AE7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0AE7             ;; IS DIGIT
0039+  0AE7             ;; sets ZF according with result
0040+  0AE7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0AE7             isdigit:
0042+  0AE7 DB          	push al
0043+  0AE8 B9 30       	cmp al, '0'
0044+  0AEA C8 F6 0A    	jlu isdigit_false
0045+  0AED B9 39       	cmp al, '9'
0046+  0AEF D1 F6 0A    	jgu isdigit_false
0047+  0AF2 87 00       	and al, 0	; set ZF
0048+  0AF4 E8          	pop al
0049+  0AF5 09          	ret
0050+  0AF6             isdigit_false:
0051+  0AF6 8B 01       	or al, 1	; clear ZF
0052+  0AF8 E8          	pop al
0053+  0AF9 09          	ret	
0054+  0AFA             	
0055+  0AFA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0AFA             ;; IS ALPHA
0057+  0AFA             ;; sets ZF according with result
0058+  0AFA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0AFA             isalpha:
0060+  0AFA DB          	push al
0061+  0AFB B9 5F       	cmp al, '_'
0062+  0AFD C6 1D 0B    	je isalpha_true
0063+  0B00 B9 2E       	cmp al, '.'
0064+  0B02 C6 1D 0B    	je isalpha_true
0065+  0B05 B9 41       	cmp al, 'A'
0066+  0B07 C8 19 0B    	jlu isalpha_false
0067+  0B0A B9 7A       	cmp al, 'z'
0068+  0B0C D1 19 0B    	jgu isalpha_false
0069+  0B0F B9 5A       	cmp al, 'Z'
0070+  0B11 D0 1D 0B    	jleu isalpha_true
0071+  0B14 B9 61       	cmp al, 'a'
0072+  0B16 C9 1D 0B    	jgeu isalpha_true
0073+  0B19             isalpha_false:
0074+  0B19 8B 01       	or al, 1	; clear ZF
0075+  0B1B E8          	pop al
0076+  0B1C 09          	ret
0077+  0B1D             isalpha_true:
0078+  0B1D 87 00       	and al, 0	; set ZF
0079+  0B1F E8          	pop al
0080+  0B20 09          	ret
0081+  0B21             
0082+  0B21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B21             ;; IS PATH-ALPHA
0084+  0B21             ;; sets ZF according with result
0085+  0B21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B21             ispath:
0087+  0B21 DB          	push al
0088+  0B22 07 E7 0A    	call isdigit
0089+  0B25 C6 4F 0B    	je ispath_true
0090+  0B28 B9 5F       	cmp al, '_'
0091+  0B2A C6 4F 0B    	je ispath_true
0092+  0B2D B9 2F       	cmp al, '/'
0093+  0B2F C6 4F 0B    	je ispath_true
0094+  0B32 B9 2E       	cmp al, '.'
0095+  0B34 C6 4F 0B    	je ispath_true
0096+  0B37 B9 41       	cmp al, 'A'
0097+  0B39 C8 4B 0B    	jlu ispath_false
0098+  0B3C B9 7A       	cmp al, 'z'
0099+  0B3E D1 4B 0B    	jgu ispath_false
0100+  0B41 B9 5A       	cmp al, 'Z'
0101+  0B43 D0 4F 0B    	jleu ispath_true
0102+  0B46 B9 61       	cmp al, 'a'
0103+  0B48 C9 4F 0B    	jgeu ispath_true
0104+  0B4B             ispath_false:
0105+  0B4B 8B 01       	or al, 1	; clear ZF
0106+  0B4D E8          	pop al
0107+  0B4E 09          	ret
0108+  0B4F             ispath_true:
0109+  0B4F 87 00       	and al, 0	; set ZF
0110+  0B51 E8          	pop al
0111+  0B52 09          	ret
0112+  0B53             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B53             ;; IS SPACE
0114+  0B53             ;; sets ZF according with result
0115+  0B53             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B53             isspace:
0117+  0B53 B9 20       	cmp al, $20		; ' '
0118+  0B55 C6 69 0B    	je isspace_exit
0119+  0B58 B9 09       	cmp al, $09		; '\t'
0120+  0B5A C6 69 0B    	je isspace_exit
0121+  0B5D B9 0A       	cmp al, $0A		; '\n'
0122+  0B5F C6 69 0B    	je isspace_exit
0123+  0B62 B9 0D       	cmp al, $0D		; '\r'
0124+  0B64 C6 69 0B    	je isspace_exit
0125+  0B67 B9 0B       	cmp al, $0B		; '\v'
0126+  0B69             isspace_exit:
0127+  0B69 09          	ret	
0128+  0B6A             
0129+  0B6A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B6A             ; TO LOWER
0131+  0B6A             ; input in AL
0132+  0B6A             ; output in AL
0133+  0B6A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B6A             to_lower:
0135+  0B6A B9 5A       	cmp al, 'Z'
0136+  0B6C D1 71 0B    	jgu to_lower_ret
0137+  0B6F 6A 20       	add al, $20				; convert to lower case
0138+  0B71             to_lower_ret:
0139+  0B71 09          	ret
0140+  0B72             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B72             ; TO UPPER
0142+  0B72             ; input in AL
0143+  0B72             ; output in AL
0144+  0B72             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B72             to_upper:
0146+  0B72 B9 61       	cmp al, 'a'
0147+  0B74 C8 79 0B    	jlu to_upper_ret
0148+  0B77 6F 20       	sub al, $20			; convert to upper case
0149+  0B79             to_upper_ret:
0150+  0B79 09          	ret
0151+  0B7A             
0038   0B7A             
0039   0B7A             .end
0040   0B7A             
0041   0B7A             
0042   0B7A             
tasm: Number of errors = 0
