0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;; wc filename
0005   0000             ;; count words
0006   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007   0000             
0008   0400             .org PROC_TEXT_ORG			; origin at 1024
0009   0400             
0010   0400             cmd_wc:
0011   0400 10 00 00    	mov a, 0
0012   0403 42 64 06    	mov [prog], a			; move tokennizer pointer to the beginning of the arguments area (address 0)
0013   0406 07 6E 04    	call get_path			; read filename
0014   0409 3B 68 06    	mov d, tokstr
0015   040C FD 4F 89 0B 	mov di, transient_data	; pointer to write buffer
0016   0410 19 14       	mov al, 20
0017   0412 05 04       	syscall sys_fileio		; read textfile into buffer	
0018   0414             	
0019   0414 10 89 0B    	mov a, transient_data
0020   0417 42 64 06    	mov [prog], a
0021   041A 38 00 00    	mov c, 0
0022   041D             L0:
0023   041D 07 C5 04    	call get_token
0024   0420 1D 67 06    	mov al, [tok]
0025   0423 B9 14       	cmp al, TOK_END
0026   0425 C6 34 04    	je cmd_wc_end
0027   0428 1D 66 06    	mov al, [toktyp]
0028   042B B9 00       	cmp al, TOKTYP_IDENTIFIER
0029   042D C7 1D 04    	jne L0
0030   0430 78          	inc c
0031   0431 0A 1D 04    	jmp L0
0032   0434             
0033   0434             cmd_wc_end:
0034   0434 12          	mov a, c
0035   0435 07 DD 09    	call print_u16d
0036   0438             
0037   0438 05 0B       	syscall sys_terminate_proc
0038   043A             
0039   043A             
0040   043A             .include "token.asm"
0001+  043A             TOKTYP_IDENTIFIER	.equ 0
0002+  043A             TOKTYP_KEYWORD		.equ 1
0003+  043A             TOKTYP_DELIMITER	.equ 2
0004+  043A             TOKTYP_STRING		.equ 3
0005+  043A             TOKTYP_CHAR			.equ 4
0006+  043A             TOKTYP_NUMERIC		.equ 5
0007+  043A             TOKTYP_END			.equ 6
0008+  043A             
0009+  043A             TOK_NULL			.equ 0
0010+  043A             TOK_FSLASH			.equ 1
0011+  043A             TOK_TIMES 			.equ 2
0012+  043A             TOK_PLUS 			.equ 3
0013+  043A             TOK_MINUS 			.equ 4
0014+  043A             TOK_DOT				.equ 5
0015+  043A             TOK_SEMI			.equ 6
0016+  043A             TOK_ANGLE			.equ 7
0017+  043A             TOK_TILDE			.equ 8
0018+  043A             TOK_EQUAL			.equ 9
0019+  043A             TOK_COLON			.equ 10
0020+  043A             TOK_COMMA			.equ 11
0021+  043A             
0022+  043A             TOK_END				.equ 20
0023+  043A             
0024+  043A             
0025+  043A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  043A             ;; read a full command argment from shell input buffer
0027+  043A             ;; argument is written into tokstr
0028+  043A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  043A             get_arg:
0030+  043A D7          	push a
0031+  043B E2          	push si
0032+  043C E3          	push di
0033+  043D 19 00       	mov al, 0
0034+  043F 3D 68 06    	mov [tokstr], al			; nullify tokstr string
0035+  0442 14 64 06    	mov a, [prog]
0036+  0445 4D          	mov si, a
0037+  0446 FD 4F 68 06 	mov di, tokstr
0038+  044A             get_arg_skip_spaces:
0039+  044A F6          	lodsb
0040+  044B 07 62 0B    	call isspace
0041+  044E C6 4A 04    	je get_arg_skip_spaces
0042+  0451             get_arg_L0:
0043+  0451 B9 3B       	cmp al, $3B				; check if is ';'
0044+  0453 C6 60 04    	je get_arg_end
0045+  0456 B9 00       	cmp al, 0
0046+  0458 C6 60 04    	je get_arg_end			; check if end of input
0047+  045B F7          	stosb
0048+  045C F6          	lodsb
0049+  045D 0A 51 04    	jmp get_arg_L0
0050+  0460             get_arg_end:
0051+  0460 19 00       	mov al, 0
0052+  0462 F7          	stosb
0053+  0463 D5 01 00    	sub si, 1
0054+  0466 4E          	mov a, si
0055+  0467 42 64 06    	mov [prog], a		; update pointer
0056+  046A F0          	pop di
0057+  046B EF          	pop si
0058+  046C E4          	pop a
0059+  046D 09          	ret
0060+  046E             
0061+  046E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  046E             ;; read a path formation from shell input buffer
0063+  046E             ;; path is written into tokstr
0064+  046E             ;; /usr/bin
0065+  046E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  046E             get_path:
0067+  046E D7          	push a
0068+  046F E2          	push si
0069+  0470 E3          	push di
0070+  0471 19 00       	mov al, 0
0071+  0473 3D 68 06    	mov [tokstr], al			; nullify tokstr string
0072+  0476 14 64 06    	mov a, [prog]
0073+  0479 4D          	mov si, a
0074+  047A FD 4F 68 06 	mov di, tokstr
0075+  047E             get_path_skip_spaces:
0076+  047E F6          	lodsb
0077+  047F 07 62 0B    	call isspace
0078+  0482 C6 7E 04    	je get_path_skip_spaces
0079+  0485             get_path_is_pathchar:
0080+  0485 F7          	stosb
0081+  0486 F6          	lodsb
0082+  0487 07 EC 0A    	call isalnum			;check if is alphanumeric
0083+  048A C6 85 04    	je get_path_is_pathchar
0084+  048D B9 2F       	cmp al, '/'				; check if is '/'
0085+  048F C6 85 04    	je get_path_is_pathchar
0086+  0492 19 00       	mov al, 0
0087+  0494 F7          	stosb
0088+  0495 D5 01 00    	sub si, 1
0089+  0498 4E          	mov a, si
0090+  0499 42 64 06    	mov [prog], a		; update pointer
0091+  049C             get_path_end:
0092+  049C F0          	pop di
0093+  049D EF          	pop si
0094+  049E E4          	pop a
0095+  049F 09          	ret
0096+  04A0             
0097+  04A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  04A0             ;; read a line
0099+  04A0             ;; line is written into tokstr
0100+  04A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  04A0             get_line:
0102+  04A0 D7          	push a
0103+  04A1 E2          	push si
0104+  04A2 E3          	push di
0105+  04A3 19 00       	mov al, 0
0106+  04A5 3D 68 06    	mov [tokstr], al			; nullify tokstr string
0107+  04A8 14 64 06    	mov a, [prog]
0108+  04AB 4D          	mov si, a
0109+  04AC FD 4F 68 06 	mov di, tokstr
0110+  04B0             get_line_L0:
0111+  04B0 F6          	lodsb
0112+  04B1 B9 0A       	cmp al, $0A		; check for new line
0113+  04B3 C6 BA 04    	je get_line_exit
0114+  04B6 F7          	stosb
0115+  04B7 0A B0 04    	jmp get_line_L0
0116+  04BA             get_line_exit:
0117+  04BA 19 00       	mov al, 0
0118+  04BC F7          	stosb
0119+  04BD 4E          	mov a, si
0120+  04BE 42 64 06    	mov [prog], a		; update pointer
0121+  04C1 F0          	pop di
0122+  04C2 EF          	pop si
0123+  04C3 E4          	pop a
0124+  04C4 09          	ret
0125+  04C5             
0126+  04C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  04C5             ;; token parser
0128+  04C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  04C5             get_token:
0130+  04C5 D7          	push a
0131+  04C6 DA          	push d
0132+  04C7 E2          	push si
0133+  04C8 E3          	push di
0134+  04C9 19 00       	mov al, 0
0135+  04CB 3D 68 06    	mov [tokstr], al			; nullify tokstr string
0136+  04CE 19 00       	mov al, TOK_NULL
0137+  04D0 3D 67 06    	mov [tok], al				; nullify token
0138+  04D3 14 64 06    	mov a, [prog]
0139+  04D6 4D          	mov si, a
0140+  04D7 FD 4F 68 06 	mov di, tokstr
0141+  04DB             get_tok_skip_spaces:
0142+  04DB F6          	lodsb
0143+  04DC 07 62 0B    	call isspace
0144+  04DF C6 DB 04    	je get_tok_skip_spaces
0145+  04E2 B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  04E4 C6 C9 05    	je get_token_end
0147+  04E7 B9 23       	cmp al, '#'			; comments!
0148+  04E9 C6 F7 05    	je get_tok_comment
0149+  04EC 07 EC 0A    	call isalnum
0150+  04EF C6 D6 05    	jz is_alphanumeric
0151+  04F2             ; other token types
0152+  04F2             get_token_slash:
0153+  04F2 B9 2F       	cmp al, '/'				; check if '/'
0154+  04F4 C7 0C 05    	jne get_token_minus
0155+  04F7 F7          	stosb					; store '/' into token string
0156+  04F8 19 00       	mov al, 0
0157+  04FA F7          	stosb					; terminate token string
0158+  04FB 19 01       	mov al, TOK_FSLASH
0159+  04FD 3D 67 06    	mov [tok], al			
0160+  0500 19 02       	mov al, TOKTYP_DELIMITER
0161+  0502 3D 66 06    	mov [toktyp], al
0162+  0505 4E          	mov a, si
0163+  0506 42 64 06    	mov [prog], a		; update pointer
0164+  0509 0A F2 05    	jmp get_token_return
0165+  050C             get_token_minus:
0166+  050C B9 2D       	cmp al, '-'				; check if '-'
0167+  050E C7 26 05    	jne get_token_comma
0168+  0511 F7          	stosb					; store '-' into token string
0169+  0512 19 00       	mov al, 0
0170+  0514 F7          	stosb					; terminate token string
0171+  0515 19 04       	mov al, TOK_MINUS
0172+  0517 3D 67 06    	mov [tok], al			
0173+  051A 19 02       	mov al, TOKTYP_DELIMITER
0174+  051C 3D 66 06    	mov [toktyp], al
0175+  051F 4E          	mov a, si
0176+  0520 42 64 06    	mov [prog], a		; update pointer
0177+  0523 0A F2 05    	jmp get_token_return
0178+  0526             get_token_comma:
0179+  0526 B9 2C       	cmp al, ','				; check if ','
0180+  0528 C7 40 05    	jne get_token_semi
0181+  052B F7          	stosb					; store ',' into token string
0182+  052C 19 00       	mov al, 0
0183+  052E F7          	stosb					; terminate token string
0184+  052F 19 0B       	mov al, TOK_COMMA
0185+  0531 3D 67 06    	mov [tok], al			
0186+  0534 19 02       	mov al, TOKTYP_DELIMITER
0187+  0536 3D 66 06    	mov [toktyp], al
0188+  0539 4E          	mov a, si
0189+  053A 42 64 06    	mov [prog], a		; update pointer
0190+  053D 0A F2 05    	jmp get_token_return
0191+  0540             get_token_semi:
0192+  0540 B9 3B       	cmp al, $3B				; check if ';'
0193+  0542 C7 5A 05    	jne get_token_colon
0194+  0545 F7          	stosb					; store ';' into token string
0195+  0546 19 00       	mov al, 0
0196+  0548 F7          	stosb					; terminate token string
0197+  0549 19 06       	mov al, TOK_SEMI
0198+  054B 3D 67 06    	mov [tok], al			
0199+  054E 19 02       	mov al, TOKTYP_DELIMITER
0200+  0550 3D 66 06    	mov [toktyp], al
0201+  0553 4E          	mov a, si
0202+  0554 42 64 06    	mov [prog], a		; update pointer
0203+  0557 0A F2 05    	jmp get_token_return
0204+  055A             get_token_colon:
0205+  055A B9 3A       	cmp al, $3A				; check if ':'
0206+  055C C7 74 05    	jne get_token_angle
0207+  055F F7          	stosb					; store ':' into token string
0208+  0560 19 00       	mov al, 0
0209+  0562 F7          	stosb					; terminate token string
0210+  0563 19 0A       	mov al, TOK_COLON
0211+  0565 3D 67 06    	mov [tok], al			
0212+  0568 19 02       	mov al, TOKTYP_DELIMITER
0213+  056A 3D 66 06    	mov [toktyp], al
0214+  056D 4E          	mov a, si
0215+  056E 42 64 06    	mov [prog], a		; update pointer
0216+  0571 0A F2 05    	jmp get_token_return
0217+  0574             get_token_angle:
0218+  0574 B9 3E       	cmp al, $3E				; check if '>'
0219+  0576 C7 8E 05    	jne get_token_tilde
0220+  0579 F7          	stosb					; store '>' into token string
0221+  057A 19 00       	mov al, 0
0222+  057C F7          	stosb					; terminate token string
0223+  057D 19 07       	mov al, TOK_ANGLE
0224+  057F 3D 67 06    	mov [tok], al			
0225+  0582 19 02       	mov al, TOKTYP_DELIMITER
0226+  0584 3D 66 06    	mov [toktyp], al
0227+  0587 4E          	mov a, si
0228+  0588 42 64 06    	mov [prog], a		; update pointer
0229+  058B 0A F2 05    	jmp get_token_return
0230+  058E             get_token_tilde:
0231+  058E B9 7E       	cmp al, '~'				; check if '~'
0232+  0590 C7 A8 05    	jne get_token_equal
0233+  0593 F7          	stosb					; store '~' into token string
0234+  0594 19 00       	mov al, 0
0235+  0596 F7          	stosb					; terminate token string
0236+  0597 19 08       	mov al, TOK_TILDE
0237+  0599 3D 67 06    	mov [tok], al			
0238+  059C 19 02       	mov al, TOKTYP_DELIMITER
0239+  059E 3D 66 06    	mov [toktyp], al
0240+  05A1 4E          	mov a, si
0241+  05A2 42 64 06    	mov [prog], a		; update pointer
0242+  05A5 0A F2 05    	jmp get_token_return
0243+  05A8             get_token_equal:
0244+  05A8 B9 3D       	cmp al, '='				; check if '='
0245+  05AA C7 C2 05    	jne get_token_skip
0246+  05AD F7          	stosb					; store '=' into token string
0247+  05AE 19 00       	mov al, 0
0248+  05B0 F7          	stosb					; terminate token string
0249+  05B1 19 09       	mov al, TOK_EQUAL
0250+  05B3 3D 67 06    	mov [tok], al			
0251+  05B6 19 02       	mov al, TOKTYP_DELIMITER
0252+  05B8 3D 66 06    	mov [toktyp], al
0253+  05BB 4E          	mov a, si
0254+  05BC 42 64 06    	mov [prog], a		; update pointer
0255+  05BF 0A F2 05    	jmp get_token_return
0256+  05C2             get_token_skip:
0257+  05C2 4E          	mov a, si
0258+  05C3 42 64 06    	mov [prog], a		; update pointer
0259+  05C6 0A F2 05    	jmp get_token_return
0260+  05C9             get_token_end:				; end of file token
0261+  05C9 19 14       	mov al, TOK_END
0262+  05CB 3D 67 06    	mov [tok], al
0263+  05CE 19 06       	mov al, TOKTYP_END
0264+  05D0 3D 66 06    	mov [toktyp], al
0265+  05D3 0A F2 05    	jmp get_token_return
0266+  05D6             is_alphanumeric:
0267+  05D6 F7          	stosb
0268+  05D7 F6          	lodsb
0269+  05D8 07 EC 0A    	call isalnum			;check if is alphanumeric
0270+  05DB C6 D6 05    	jz is_alphanumeric
0271+  05DE B9 2E       	cmp al, $2E				; check if is '.'
0272+  05E0 C6 D6 05    	je is_alphanumeric
0273+  05E3 19 00       	mov al, 0
0274+  05E5 F7          	stosb
0275+  05E6 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  05E8 3D 66 06    	mov [toktyp], al
0277+  05EB D5 01 00    	sub si, 1
0278+  05EE 4E          	mov a, si
0279+  05EF 42 64 06    	mov [prog], a		; update pointer
0280+  05F2             get_token_return:
0281+  05F2 F0          	pop di
0282+  05F3 EF          	pop si
0283+  05F4 E7          	pop d
0284+  05F5 E4          	pop a
0285+  05F6 09          	ret
0286+  05F7             get_tok_comment:
0287+  05F7 F6          	lodsb
0288+  05F8 B9 0A       	cmp al, $0A			; new line
0289+  05FA C7 F7 05    	jne get_tok_comment
0290+  05FD 0A DB 04    	jmp get_tok_skip_spaces
0291+  0600             
0292+  0600             
0293+  0600             get_number:
0294+  0600 D7          	push a
0295+  0601 DA          	push d
0296+  0602 E2          	push si
0297+  0603 E3          	push di
0298+  0604 19 00       	mov al, 0
0299+  0606 3D 68 06    	mov [tokstr], al			; nullify tokstr string
0300+  0609 19 00       	mov al, TOK_NULL
0301+  060B 3D 67 06    	mov [tok], al				; nullify token
0302+  060E 14 64 06    	mov a, [prog]
0303+  0611 4D          	mov si, a
0304+  0612 FD 4F 68 06 	mov di, tokstr
0305+  0616             get_number_skip_spaces:
0306+  0616 F6          	lodsb
0307+  0617 07 62 0B    	call isspace
0308+  061A C6 16 06    	je get_number_skip_spaces
0309+  061D B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  061F C7 2F 06    	jne get_number_L0
0311+  0622 19 14       	mov al, TOK_END
0312+  0624 3D 67 06    	mov [tok], al
0313+  0627 19 06       	mov al, TOKTYP_END
0314+  0629 3D 66 06    	mov [toktyp], al
0315+  062C 0A 46 06    	jmp get_number_return
0316+  062F             get_number_L0:
0317+  062F F7          	stosb
0318+  0630 F6          	lodsb
0319+  0631 07 F6 0A    	call isdigit			;check if is numeric
0320+  0634 C6 2F 06    	jz get_number_L0
0321+  0637 19 00       	mov al, 0
0322+  0639 F7          	stosb
0323+  063A 19 05       	mov al, TOKTYP_NUMERIC
0324+  063C 3D 66 06    	mov [toktyp], al
0325+  063F D5 01 00    	sub si, 1
0326+  0642 4E          	mov a, si
0327+  0643 42 64 06    	mov [prog], a		; update pointer
0328+  0646             get_number_return:
0329+  0646 F0          	pop di
0330+  0647 EF          	pop si
0331+  0648 E7          	pop d
0332+  0649 E4          	pop a
0333+  064A 09          	ret
0334+  064B             
0335+  064B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  064B             ;; PUT BACK TOKEN
0337+  064B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  064B             putback:
0339+  064B D7          	push a
0340+  064C E2          	push si
0341+  064D FD 4D 68 06 	mov si, tokstr	
0342+  0651             putback_loop:
0343+  0651 F6          	lodsb
0344+  0652 B9 00       	cmp al, 0
0345+  0654 C6 61 06    	je putback_end
0346+  0657 14 64 06    	mov a, [prog]
0347+  065A 7D          	dec a
0348+  065B 42 64 06    	mov [prog], a			; update pointer
0349+  065E 0A 51 06    	jmp putback_loop
0350+  0661             putback_end:
0351+  0661 EF          	pop si
0352+  0662 E4          	pop a
0353+  0663 09          	ret
0354+  0664             
0355+  0664             
0356+  0664             
0357+  0664             
0358+  0664 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  0666             
0360+  0666 00          toktyp: 	.db 0			; token type symbol
0361+  0667 00          tok:		.db 0			; current token symbol
0362+  0668 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  066C 00 00 00 00 
0362+  0670 00 00 00 00 
0362+  0674 00 00 00 00 
0362+  0678 00 00 00 00 
0362+  067C 00 00 00 00 
0362+  0680 00 00 00 00 
0362+  0684 00 00 00 00 
0362+  0688 00 00 00 00 
0362+  068C 00 00 00 00 
0362+  0690 00 00 00 00 
0362+  0694 00 00 00 00 
0362+  0698 00 00 00 00 
0362+  069C 00 00 00 00 
0362+  06A0 00 00 00 00 
0362+  06A4 00 00 00 00 
0362+  06A8 00 00 00 00 
0362+  06AC 00 00 00 00 
0362+  06B0 00 00 00 00 
0362+  06B4 00 00 00 00 
0362+  06B8 00 00 00 00 
0362+  06BC 00 00 00 00 
0362+  06C0 00 00 00 00 
0362+  06C4 00 00 00 00 
0362+  06C8 00 00 00 00 
0362+  06CC 00 00 00 00 
0362+  06D0 00 00 00 00 
0362+  06D4 00 00 00 00 
0362+  06D8 00 00 00 00 
0362+  06DC 00 00 00 00 
0362+  06E0 00 00 00 00 
0362+  06E4 00 00 00 00 
0362+  06E8 00 00 00 00 
0362+  06EC 00 00 00 00 
0362+  06F0 00 00 00 00 
0362+  06F4 00 00 00 00 
0362+  06F8 00 00 00 00 
0362+  06FC 00 00 00 00 
0362+  0700 00 00 00 00 
0362+  0704 00 00 00 00 
0362+  0708 00 00 00 00 
0362+  070C 00 00 00 00 
0362+  0710 00 00 00 00 
0362+  0714 00 00 00 00 
0362+  0718 00 00 00 00 
0362+  071C 00 00 00 00 
0362+  0720 00 00 00 00 
0362+  0724 00 00 00 00 
0362+  0728 00 00 00 00 
0362+  072C 00 00 00 00 
0362+  0730 00 00 00 00 
0362+  0734 00 00 00 00 
0362+  0738 00 00 00 00 
0362+  073C 00 00 00 00 
0362+  0740 00 00 00 00 
0362+  0744 00 00 00 00 
0362+  0748 00 00 00 00 
0362+  074C 00 00 00 00 
0362+  0750 00 00 00 00 
0362+  0754 00 00 00 00 
0362+  0758 00 00 00 00 
0362+  075C 00 00 00 00 
0362+  0760 00 00 00 00 
0362+  0764 00 00 00 00 
0041   0768             .include "stdio.asm"
0001+  0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0768             ; stdio.s
0003+  0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0768             .include "string.asm"
0001++ 0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0768             ; string.s
0003++ 0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0768             
0005++ 0768             
0006++ 0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0768             ; strrev
0008++ 0768             ; reverse a string
0009++ 0768             ; D = string address
0010++ 0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0768             ; 01234
0012++ 0768             strrev:
0013++ 0768 4B          	pusha
0014++ 0769 07 AF 07    	call strlen	; length in C
0015++ 076C 12          	mov a, c
0016++ 076D AF 01 00    	cmp a, 1
0017++ 0770 D0 8A 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0773 7D          	dec a
0019++ 0774 FD 4E       	mov si, d	; beginning of string
0020++ 0776 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0778 59          	add d, a	; end of string
0022++ 0779 12          	mov a, c
0023++ 077A FD 9B       	shr a		; divide by 2
0024++ 077C 39          	mov c, a	; C now counts the steps
0025++ 077D             strrev_L0:
0026++ 077D 32          	mov bl, [d]	; save load right-side char into BL
0027++ 077E F6          	lodsb		; load left-side char into AL; increase SI
0028++ 077F 3E          	mov [d], al	; store left char into right side
0029++ 0780 1B          	mov al, bl
0030++ 0781 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0782 7E          	dec c
0032++ 0783 7F          	dec d
0033++ 0784 C2 00 00    	cmp c, 0
0034++ 0787 C7 7D 07    	jne strrev_L0
0035++ 078A             strrev_end:
0036++ 078A 4C          	popa
0037++ 078B 09          	ret
0038++ 078C             	
0039++ 078C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 078C             ; strchr
0041++ 078C             ; search string in D for char in AL
0042++ 078C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 078C             strchr:
0044++ 078C             strchr_L0:
0045++ 078C 32          	mov bl, [d]
0046++ 078D C1 00       	cmp bl, 0
0047++ 078F C6 9A 07    	je strchr_end
0048++ 0792 BA          	cmp al, bl
0049++ 0793 C6 9A 07    	je strchr_end
0050++ 0796 79          	inc d
0051++ 0797 0A 8C 07    	jmp strchr_L0
0052++ 079A             strchr_end:
0053++ 079A 1B          	mov al, bl
0054++ 079B 09          	ret
0055++ 079C             
0056++ 079C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 079C             ; strstr
0058++ 079C             ; find sub-string
0059++ 079C             ; str1 in SI
0060++ 079C             ; str2 in DI
0061++ 079C             ; SI points to end of source string
0062++ 079C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 079C             strstr:
0064++ 079C DB          	push al
0065++ 079D DA          	push d
0066++ 079E E3          	push di
0067++ 079F             strstr_loop:
0068++ 079F F3          	cmpsb					; compare a byte of the strings
0069++ 07A0 C7 AB 07    	jne strstr_ret
0070++ 07A3 FC 00 00    	lea d, [di + 0]
0071++ 07A6 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 07A8 C7 9F 07    	jne strstr_loop				; equal chars but not at end
0073++ 07AB             strstr_ret:
0074++ 07AB F0          	pop di
0075++ 07AC E7          	pop d
0076++ 07AD E8          	pop al
0077++ 07AE 09          	ret
0078++ 07AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 07AF             ; length of null terminated string
0080++ 07AF             ; result in C
0081++ 07AF             ; pointer in D
0082++ 07AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 07AF             strlen:
0084++ 07AF DA          	push d
0085++ 07B0 38 00 00    	mov c, 0
0086++ 07B3             strlen_L1:
0087++ 07B3 BD 00       	cmp byte [d], 0
0088++ 07B5 C6 BD 07    	je strlen_ret
0089++ 07B8 79          	inc d
0090++ 07B9 78          	inc c
0091++ 07BA 0A B3 07    	jmp strlen_L1
0092++ 07BD             strlen_ret:
0093++ 07BD E7          	pop d
0094++ 07BE 09          	ret
0095++ 07BF             
0096++ 07BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07BF             ; STRCMP
0098++ 07BF             ; compare two strings
0099++ 07BF             ; str1 in SI
0100++ 07BF             ; str2 in DI
0101++ 07BF             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 07BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07BF             strcmp:
0104++ 07BF DB          	push al
0105++ 07C0 DA          	push d
0106++ 07C1 E3          	push di
0107++ 07C2 E2          	push si
0108++ 07C3             strcmp_loop:
0109++ 07C3 F3          	cmpsb					; compare a byte of the strings
0110++ 07C4 C7 CF 07    	jne strcmp_ret
0111++ 07C7 FB FF FF    	lea d, [si +- 1]
0112++ 07CA BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07CC C7 C3 07    	jne strcmp_loop				; equal chars but not at end
0114++ 07CF             strcmp_ret:
0115++ 07CF EF          	pop si
0116++ 07D0 F0          	pop di
0117++ 07D1 E7          	pop d
0118++ 07D2 E8          	pop al
0119++ 07D3 09          	ret
0120++ 07D4             
0121++ 07D4             
0122++ 07D4             ; STRCPY
0123++ 07D4             ; copy null terminated string from SI to DI
0124++ 07D4             ; source in SI
0125++ 07D4             ; destination in DI
0126++ 07D4             strcpy:
0127++ 07D4 E2          	push si
0128++ 07D5 E3          	push di
0129++ 07D6 DB          	push al
0130++ 07D7             strcpy_L1:
0131++ 07D7 F6          	lodsb
0132++ 07D8 F7          	stosb
0133++ 07D9 B9 00       	cmp al, 0
0134++ 07DB C7 D7 07    	jne strcpy_L1
0135++ 07DE             strcpy_end:
0136++ 07DE E8          	pop al
0137++ 07DF F0          	pop di
0138++ 07E0 EF          	pop si
0139++ 07E1 09          	ret
0140++ 07E2             
0141++ 07E2             ; STRCAT
0142++ 07E2             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07E2             ; source in SI
0144++ 07E2             ; destination in DI
0145++ 07E2             strcat:
0146++ 07E2 E2          	push si
0147++ 07E3 E3          	push di
0148++ 07E4 D7          	push a
0149++ 07E5 DA          	push d
0150++ 07E6 50          	mov a, di
0151++ 07E7 3C          	mov d, a
0152++ 07E8             strcat_goto_end_L1:
0153++ 07E8 BD 00       	cmp byte[d], 0
0154++ 07EA C6 F1 07    	je strcat_start
0155++ 07ED 79          	inc d
0156++ 07EE 0A E8 07    	jmp strcat_goto_end_L1
0157++ 07F1             strcat_start:
0158++ 07F1 FD 50       	mov di, d
0159++ 07F3             strcat_L1:
0160++ 07F3 F6          	lodsb
0161++ 07F4 F7          	stosb
0162++ 07F5 B9 00       	cmp al, 0
0163++ 07F7 C7 F3 07    	jne strcat_L1
0164++ 07FA             strcat_end:
0165++ 07FA E7          	pop d
0166++ 07FB E4          	pop a
0167++ 07FC F0          	pop di
0168++ 07FD EF          	pop si
0169++ 07FE 09          	ret
0005+  07FF             
0006+  07FF 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0803 34 35 36 37 
0006+  0807 38 39 41 42 
0006+  080B 43 44 45 46 
0007+  080F 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0813 1B 5B 48 00 
0008+  0817             
0009+  0817 01 00       table_power:.dw 1
0010+  0819 0A 00       			.dw 10
0011+  081B 64 00       			.dw 100
0012+  081D E8 03       			.dw 1000
0013+  081F 10 27       			.dw 10000
0014+  0821             
0015+  0821             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0821             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0821             ; ASCII in BL
0018+  0821             ; result in AL
0019+  0821             ; ascii for F = 0100 0110
0020+  0821             ; ascii for 9 = 0011 1001
0021+  0821             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0821             hex_ascii_encode:
0023+  0821 1B          	mov al, bl
0024+  0822 93 40       	test al, $40				; test if letter or number
0025+  0824 C7 2A 08    	jnz hex_letter
0026+  0827 87 0F       	and al, $0F				; get number
0027+  0829 09          	ret
0028+  082A             hex_letter:
0029+  082A 87 0F       	and al, $0F				; get letter
0030+  082C 6A 09       	add al, 9
0031+  082E 09          	ret
0032+  082F             
0033+  082F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  082F             ; ATOI
0035+  082F             ; 2 letter hex string in B
0036+  082F             ; 8bit integer returned in AL
0037+  082F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  082F             atoi:
0039+  082F D8          	push b
0040+  0830 07 21 08    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0833 30          	mov bl, bh
0042+  0834 DB          	push al					; save a
0043+  0835 07 21 08    	call hex_ascii_encode
0044+  0838 EA          	pop bl	
0045+  0839 FD 9E 04    	shl al, 4
0046+  083C 8C          	or al, bl
0047+  083D E5          	pop b
0048+  083E 09          	ret	
0049+  083F             
0050+  083F             
0051+  083F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  083F             ; printf
0053+  083F             ; no need for explanations!
0054+  083F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  083F             printf:
0056+  083F 09          	ret
0057+  0840             
0058+  0840             
0059+  0840             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0840             ; scanf
0061+  0840             ; no need for explanations!
0062+  0840             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0840             scanf:
0064+  0840 09          	ret
0065+  0841             
0066+  0841             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0841             ; ITOA
0068+  0841             ; 8bit value in BL
0069+  0841             ; 2 byte ASCII result in A
0070+  0841             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0841             itoa:
0072+  0841 DA          	push d
0073+  0842 D8          	push b
0074+  0843 A7 00       	mov bh, 0
0075+  0845 FD A4 04    	shr bl, 4	
0076+  0848 74          	mov d, b
0077+  0849 1F FF 07    	mov al, [d + s_hex_digits]
0078+  084C 23          	mov ah, al
0079+  084D             	
0080+  084D E5          	pop b
0081+  084E D8          	push b
0082+  084F A7 00       	mov bh, 0
0083+  0851 FD 87 0F    	and bl, $0F
0084+  0854 74          	mov d, b
0085+  0855 1F FF 07    	mov al, [d + s_hex_digits]
0086+  0858 E5          	pop b
0087+  0859 E7          	pop d
0088+  085A 09          	ret
0089+  085B             
0090+  085B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  085B             ; HEX STRING TO BINARY
0092+  085B             ; di = destination address
0093+  085B             ; si = source
0094+  085B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  085B             hex_to_int:
0096+  085B             hex_to_int_L1:
0097+  085B F6          	lodsb					; load from [SI] to AL
0098+  085C B9 00       	cmp al, 0				; check if ASCII 0
0099+  085E C6 6B 08    	jz hex_to_int_ret
0100+  0861 36          	mov bh, al
0101+  0862 F6          	lodsb
0102+  0863 2F          	mov bl, al
0103+  0864 07 2F 08    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0867 F7          	stosb					; store AL to [DI]
0105+  0868 0A 5B 08    	jmp hex_to_int_L1
0106+  086B             hex_to_int_ret:
0107+  086B 09          	ret		
0108+  086C             
0109+  086C             
0110+  086C             
0111+  086C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  086C             ; GETCHAR
0113+  086C             ; char in ah
0114+  086C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  086C             getchar:
0116+  086C DB          	push al
0117+  086D             getchar_retry:
0118+  086D FD 0C       	sti
0119+  086F 19 01       	mov al, 1
0120+  0871 05 03       	syscall sys_io			; receive in AH
0121+  0873 B9 00       	cmp al, 0			; check if any char was receive
0122+  0875 C6 6D 08    	je getchar_retry
0123+  0878 E8          	pop al
0124+  0879 09          	ret
0125+  087A             
0126+  087A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  087A             ; PUTCHAR
0128+  087A             ; char in ah
0129+  087A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  087A             putchar:
0131+  087A D7          	push a
0132+  087B 19 00       	mov al, 0
0133+  087D 05 03       	syscall sys_io			; char in AH
0134+  087F E4          	pop a
0135+  0880 09          	ret
0136+  0881             
0137+  0881             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0881             ;; INPUT A STRING
0139+  0881             ;; terminates with null
0140+  0881             ;; pointer in D
0141+  0881             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0881             gets:
0143+  0881 D7          	push a
0144+  0882 DA          	push d
0145+  0883             gets_loop:
0146+  0883 FD 0C       	sti
0147+  0885 19 01       	mov al, 1
0148+  0887 05 03       	syscall sys_io			; receive in AH
0149+  0889 B9 00       	cmp al, 0				; check error code (AL)
0150+  088B C6 83 08    	je gets_loop			; if no char received, retry
0151+  088E             
0152+  088E 76 1B       	cmp ah, 27
0153+  0890 C6 B1 08    	je gets_telnet_escape
0154+  0893 76 0A       	cmp ah, $0A				; LF
0155+  0895 C6 0A 09    	je gets_end
0156+  0898 76 0D       	cmp ah, $0D				; CR
0157+  089A C6 0A 09    	je gets_end
0158+  089D 76 5C       	cmp ah, $5C				; '\\'
0159+  089F C6 E1 08    	je gets_escape
0160+  08A2             	
0161+  08A2 76 08       	cmp ah, $08			; check for backspace
0162+  08A4 C6 AD 08    	je gets_backspace
0163+  08A7             
0164+  08A7 1A          	mov al, ah
0165+  08A8 3E          	mov [d], al
0166+  08A9 79          	inc d
0167+  08AA 0A 83 08    	jmp gets_loop
0168+  08AD             gets_backspace:
0169+  08AD 7F          	dec d
0170+  08AE 0A 83 08    	jmp gets_loop
0171+  08B1             gets_telnet_escape:
0172+  08B1 FD 0C       	sti
0173+  08B3 19 01       	mov al, 1
0174+  08B5 05 03       	syscall sys_io				; receive in AH without echo
0175+  08B7 B9 00       	cmp al, 0					; check error code (AL)
0176+  08B9 C6 B1 08    	je gets_telnet_escape		; if no char received, retry
0177+  08BC 76 5B       	cmp ah, '['
0178+  08BE C7 83 08    	jne gets_loop
0179+  08C1             gets_telnet_escape_phase2:
0180+  08C1 FD 0C       	sti
0181+  08C3 19 01       	mov al, 1
0182+  08C5 05 03       	syscall sys_io					; receive in AH without echo
0183+  08C7 B9 00       	cmp al, 0						; check error code (AL)
0184+  08C9 C6 C1 08    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  08CC 76 44       	cmp ah, 'D'
0186+  08CE C6 D9 08    	je gets_left_arrow
0187+  08D1 76 43       	cmp ah, 'C'
0188+  08D3 C6 DD 08    	je gets_right_arrow
0189+  08D6 0A 83 08    	jmp gets_loop
0190+  08D9             gets_left_arrow:
0191+  08D9 7F          	dec d
0192+  08DA 0A 83 08    	jmp gets_loop
0193+  08DD             gets_right_arrow:
0194+  08DD 79          	inc d
0195+  08DE 0A 83 08    	jmp gets_loop
0196+  08E1             gets_escape:
0197+  08E1 FD 0C       	sti
0198+  08E3 19 01       	mov al, 1
0199+  08E5 05 03       	syscall sys_io			; receive in AH
0200+  08E7 B9 00       	cmp al, 0				; check error code (AL)
0201+  08E9 C6 E1 08    	je gets_escape			; if no char received, retry
0202+  08EC 76 6E       	cmp ah, 'n'
0203+  08EE C6 FC 08    	je gets_LF
0204+  08F1 76 72       	cmp ah, 'r'
0205+  08F3 C6 03 09    	je gets_CR
0206+  08F6 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  08F7 3E          	mov [d], al
0208+  08F8 79          	inc d
0209+  08F9 0A 83 08    	jmp gets_loop
0210+  08FC             gets_LF:
0211+  08FC 19 0A       	mov al, $0A
0212+  08FE 3E          	mov [d], al
0213+  08FF 79          	inc d
0214+  0900 0A 83 08    	jmp gets_loop
0215+  0903             gets_CR:
0216+  0903 19 0D       	mov al, $0D
0217+  0905 3E          	mov [d], al
0218+  0906 79          	inc d
0219+  0907 0A 83 08    	jmp gets_loop
0220+  090A             gets_end:
0221+  090A 19 00       	mov al, 0
0222+  090C 3E          	mov [d], al				; terminate string
0223+  090D E7          	pop d
0224+  090E E4          	pop a
0225+  090F 09          	ret
0226+  0910             
0227+  0910             
0228+  0910             
0229+  0910             
0230+  0910             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0910             ;; INPUT TEXT
0232+  0910             ;; terminated with CTRL+D
0233+  0910             ;; pointer in D
0234+  0910             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0910             gettxt:
0236+  0910 D7          	push a
0237+  0911 DA          	push d
0238+  0912             gettxt_loop:
0239+  0912 19 01       	mov al, 1
0240+  0914 05 03       	syscall sys_io			; receive in AH
0241+  0916 B9 00       	cmp al, 0				; check error code (AL)
0242+  0918 C6 12 09    	je gettxt_loop		; if no char received, retry
0243+  091B 76 04       	cmp ah, 4			; EOT
0244+  091D C6 5B 09    	je gettxt_end
0245+  0920 76 08       	cmp ah, $08			; check for backspace
0246+  0922 C6 57 09    	je gettxt_backspace
0247+  0925 76 5C       	cmp ah, $5C				; '\\'
0248+  0927 C6 30 09    	je gettxt_escape
0249+  092A 1A          	mov al, ah
0250+  092B 3E          	mov [d], al
0251+  092C 79          	inc d
0252+  092D 0A 12 09    	jmp gettxt_loop
0253+  0930             gettxt_escape:
0254+  0930 19 01       	mov al, 1
0255+  0932 05 03       	syscall sys_io			; receive in AH
0256+  0934 B9 00       	cmp al, 0				; check error code (AL)
0257+  0936 C6 30 09    	je gettxt_escape		; if no char received, retry
0258+  0939 76 6E       	cmp ah, 'n'
0259+  093B C6 49 09    	je gettxt_LF
0260+  093E 76 72       	cmp ah, 'r'
0261+  0940 C6 50 09    	je gettxt_CR
0262+  0943 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0944 3E          	mov [d], al
0264+  0945 79          	inc d
0265+  0946 0A 12 09    	jmp gettxt_loop
0266+  0949             gettxt_LF:
0267+  0949 19 0A       	mov al, $0A
0268+  094B 3E          	mov [d], al
0269+  094C 79          	inc d
0270+  094D 0A 12 09    	jmp gettxt_loop
0271+  0950             gettxt_CR:
0272+  0950 19 0D       	mov al, $0D
0273+  0952 3E          	mov [d], al
0274+  0953 79          	inc d
0275+  0954 0A 12 09    	jmp gettxt_loop
0276+  0957             gettxt_backspace:
0277+  0957 7F          	dec d
0278+  0958 0A 12 09    	jmp gettxt_loop
0279+  095B             gettxt_end:
0280+  095B 19 00       	mov al, 0
0281+  095D 3E          	mov [d], al				; terminate string
0282+  095E E7          	pop d
0283+  095F E4          	pop a
0284+  0960 09          	ret
0285+  0961             
0286+  0961             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0961             ; PRINT NEW LINE
0288+  0961             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0961             printnl:
0290+  0961 D7          	push a
0291+  0962 10 00 0A    	mov a, $0A00
0292+  0965 05 03       	syscall sys_io
0293+  0967 10 00 0D    	mov a, $0D00
0294+  096A 05 03       	syscall sys_io
0295+  096C E4          	pop a
0296+  096D 09          	ret
0297+  096E             
0298+  096E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  096E             ; strtoint
0300+  096E             ; 4 digit hex string number in d
0301+  096E             ; integer returned in A
0302+  096E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  096E             strtointx:
0304+  096E D8          	push b
0305+  096F 32          	mov bl, [d]
0306+  0970 37          	mov bh, bl
0307+  0971 33 01 00    	mov bl, [d + 1]
0308+  0974 07 2F 08    	call atoi				; convert to int in AL
0309+  0977 23          	mov ah, al				; move to AH
0310+  0978 33 02 00    	mov bl, [d + 2]
0311+  097B 37          	mov bh, bl
0312+  097C 33 03 00    	mov bl, [d + 3]
0313+  097F 07 2F 08    	call atoi				; convert to int in AL
0314+  0982 E5          	pop b
0315+  0983 09          	ret
0316+  0984             
0317+  0984             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0984             ; strtoint
0319+  0984             ; 5 digit base10 string number in d
0320+  0984             ; integer returned in A
0321+  0984             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0984             strtoint:
0323+  0984 E2          	push si
0324+  0985 D8          	push b
0325+  0986 D9          	push c
0326+  0987 DA          	push d
0327+  0988 07 AF 07    	call strlen			; get string length in C
0328+  098B 7E          	dec c
0329+  098C FD 4E       	mov si, d
0330+  098E 12          	mov a, c
0331+  098F FD 99       	shl a
0332+  0991 3B 17 08    	mov d, table_power
0333+  0994 59          	add d, a
0334+  0995 38 00 00    	mov c, 0
0335+  0998             strtoint_L0:
0336+  0998 F6          	lodsb			; load ASCII to al
0337+  0999 B9 00       	cmp al, 0
0338+  099B C6 AE 09    	je strtoint_end
0339+  099E 6F 30       	sub al, $30		; make into integer
0340+  09A0 22 00       	mov ah, 0
0341+  09A2 2A          	mov b, [d]
0342+  09A3 AC          	mul a, b			; result in B since it fits in 16bits
0343+  09A4 11          	mov a, b
0344+  09A5 28          	mov b, c
0345+  09A6 54          	add a, b
0346+  09A7 39          	mov c, a
0347+  09A8 63 02 00    	sub d, 2
0348+  09AB 0A 98 09    	jmp strtoint_L0
0349+  09AE             strtoint_end:
0350+  09AE 12          	mov a, c
0351+  09AF E7          	pop d
0352+  09B0 E6          	pop c
0353+  09B1 E5          	pop b
0354+  09B2 EF          	pop si
0355+  09B3 09          	ret
0356+  09B4             
0357+  09B4             
0358+  09B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  09B4             ; PRINT NULL TERMINATED STRING
0360+  09B4             ; pointer in D
0361+  09B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  09B4             puts:
0363+  09B4 D7          	push a
0364+  09B5 DA          	push d
0365+  09B6             puts_L1:
0366+  09B6 1E          	mov al, [d]
0367+  09B7 B9 00       	cmp al, 0
0368+  09B9 C6 C5 09    	jz puts_END
0369+  09BC 23          	mov ah, al
0370+  09BD 19 00       	mov al, 0
0371+  09BF 05 03       	syscall sys_io
0372+  09C1 79          	inc d
0373+  09C2 0A B6 09    	jmp puts_L1
0374+  09C5             puts_END:
0375+  09C5 E7          	pop d
0376+  09C6 E4          	pop a
0377+  09C7 09          	ret
0378+  09C8             
0379+  09C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  09C8             ; PRINT N SIZE STRING
0381+  09C8             ; pointer in D
0382+  09C8             ; size in C
0383+  09C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  09C8             putsn:
0385+  09C8 DB          	push al
0386+  09C9 DA          	push d
0387+  09CA D9          	push c
0388+  09CB             putsn_L0:
0389+  09CB 1E          	mov al, [d]
0390+  09CC 23          	mov ah, al
0391+  09CD 19 00       	mov al, 0
0392+  09CF 05 03       	syscall sys_io
0393+  09D1 79          	inc d
0394+  09D2 7E          	dec c	
0395+  09D3 C2 00 00    	cmp c, 0
0396+  09D6 C7 CB 09    	jne putsn_L0
0397+  09D9             putsn_end:
0398+  09D9 E6          	pop c
0399+  09DA E7          	pop d
0400+  09DB E8          	pop al
0401+  09DC 09          	ret
0402+  09DD             
0403+  09DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  09DD             ; print 16bit decimal number
0405+  09DD             ; input number in A
0406+  09DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  09DD             print_u16d:
0408+  09DD D7          	push a
0409+  09DE D8          	push b
0410+  09DF 26 10 27    	mov b, 10000
0411+  09E2 AE          	div a, b			; get 10000 coeff.
0412+  09E3 07 09 0A    	call print_number
0413+  09E6 11          	mov a, b
0414+  09E7 26 E8 03    	mov b, 1000
0415+  09EA AE          	div a, b			; get 10000 coeff.
0416+  09EB 07 09 0A    	call print_number
0417+  09EE 11          	mov a, b
0418+  09EF 26 64 00    	mov b, 100
0419+  09F2 AE          	div a, b
0420+  09F3 07 09 0A    	call print_number
0421+  09F6 11          	mov a, b
0422+  09F7 26 0A 00    	mov b, 10
0423+  09FA AE          	div a, b
0424+  09FB 07 09 0A    	call print_number
0425+  09FE 11          	mov a, b
0426+  09FF 6A 30       	add al, $30
0427+  0A01 23          	mov ah, al
0428+  0A02 19 00       	mov al, 0
0429+  0A04 05 03       	syscall sys_io	; print coeff
0430+  0A06 E5          	pop b
0431+  0A07 E4          	pop a
0432+  0A08 09          	ret
0433+  0A09             
0434+  0A09             
0435+  0A09             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0A09             ; if A == 0, print space
0437+  0A09             ; else print A
0438+  0A09             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  0A09             print_number:
0440+  0A09 6A 30       	add al, $30
0441+  0A0B 23          	mov ah, al
0442+  0A0C 07 7A 08    	call putchar
0443+  0A0F 09          	ret
0444+  0A10             
0445+  0A10             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0A10             ; PRINT 16BIT HEX INTEGER
0447+  0A10             ; integer value in reg B
0448+  0A10             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0A10             print_u16x:
0450+  0A10 D7          	push a
0451+  0A11 D8          	push b
0452+  0A12 DD          	push bl
0453+  0A13 30          	mov bl, bh
0454+  0A14 07 41 08    	call itoa				; convert bh to char in A
0455+  0A17 2F          	mov bl, al				; save al
0456+  0A18 19 00       	mov al, 0
0457+  0A1A 05 03       	syscall sys_io				; display AH
0458+  0A1C 24          	mov ah, bl				; retrieve al
0459+  0A1D 19 00       	mov al, 0
0460+  0A1F 05 03       	syscall sys_io				; display AL
0461+  0A21             
0462+  0A21 EA          	pop bl
0463+  0A22 07 41 08    	call itoa				; convert bh to char in A
0464+  0A25 2F          	mov bl, al				; save al
0465+  0A26 19 00       	mov al, 0
0466+  0A28 05 03       	syscall sys_io				; display AH
0467+  0A2A 24          	mov ah, bl				; retrieve al
0468+  0A2B 19 00       	mov al, 0
0469+  0A2D 05 03       	syscall sys_io				; display AL
0470+  0A2F             
0471+  0A2F E5          	pop b
0472+  0A30 E4          	pop a
0473+  0A31 09          	ret
0474+  0A32             
0475+  0A32             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0A32             ; INPUT 16BIT HEX INTEGER
0477+  0A32             ; read 16bit integer into A
0478+  0A32             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0A32             scan_u16x:
0480+  0A32 F8 10 00    	enter 16
0481+  0A35 D8          	push b
0482+  0A36 DA          	push d
0483+  0A37             
0484+  0A37 FA F1 FF    	lea d, [bp + -15]
0485+  0A3A 07 81 08    	call gets				; get number
0486+  0A3D             
0487+  0A3D 32          	mov bl, [d]
0488+  0A3E 37          	mov bh, bl
0489+  0A3F 33 01 00    	mov bl, [d + 1]
0490+  0A42 07 2F 08    	call atoi				; convert to int in AL
0491+  0A45 23          	mov ah, al				; move to AH
0492+  0A46             
0493+  0A46 33 02 00    	mov bl, [d + 2]
0494+  0A49 37          	mov bh, bl
0495+  0A4A 33 03 00    	mov bl, [d + 3]
0496+  0A4D 07 2F 08    	call atoi				; convert to int in AL
0497+  0A50             
0498+  0A50 E7          	pop d
0499+  0A51 E5          	pop b
0500+  0A52 F9          	leave
0501+  0A53 09          	ret
0502+  0A54             
0503+  0A54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0A54             ; PRINT 8bit HEX INTEGER
0505+  0A54             ; integer value in reg bl
0506+  0A54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0A54             print_u8x:
0508+  0A54 D7          	push a
0509+  0A55 DD          	push bl
0510+  0A56             
0511+  0A56 07 41 08    	call itoa				; convert bl to char in A
0512+  0A59 2F          	mov bl, al				; save al
0513+  0A5A 19 00       	mov al, 0
0514+  0A5C 05 03       	syscall sys_io				; display AH
0515+  0A5E 24          	mov ah, bl				; retrieve al
0516+  0A5F 19 00       	mov al, 0
0517+  0A61 05 03       	syscall sys_io				; display AL
0518+  0A63             
0519+  0A63 EA          	pop bl
0520+  0A64 E4          	pop a
0521+  0A65 09          	ret
0522+  0A66             
0523+  0A66             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0A66             ; print 8bit decimal unsigned number
0525+  0A66             ; input number in AL
0526+  0A66             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0A66             print_u8d:
0528+  0A66 D7          	push a
0529+  0A67 D8          	push b
0530+  0A68             
0531+  0A68 22 00       	mov ah, 0
0532+  0A6A 26 64 00    	mov b, 100
0533+  0A6D AE          	div a, b
0534+  0A6E D8          	push b			; save remainder
0535+  0A6F B9 00       	cmp al, 0
0536+  0A71 C6 7B 0A    	je skip100
0537+  0A74 6A 30       	add al, $30
0538+  0A76 23          	mov ah, al
0539+  0A77 19 00       	mov al, 0
0540+  0A79 05 03       	syscall sys_io	; print coeff
0541+  0A7B             skip100:
0542+  0A7B E4          	pop a
0543+  0A7C 22 00       	mov ah, 0
0544+  0A7E 26 0A 00    	mov b, 10
0545+  0A81 AE          	div a, b
0546+  0A82 D8          	push b			; save remainder
0547+  0A83 B9 00       	cmp al, 0
0548+  0A85 C6 8F 0A    	je skip10
0549+  0A88 6A 30       	add al, $30
0550+  0A8A 23          	mov ah, al
0551+  0A8B 19 00       	mov al, 0
0552+  0A8D 05 03       	syscall sys_io	; print coeff
0553+  0A8F             skip10:
0554+  0A8F E4          	pop a
0555+  0A90 1B          	mov al, bl
0556+  0A91 6A 30       	add al, $30
0557+  0A93 23          	mov ah, al
0558+  0A94 19 00       	mov al, 0
0559+  0A96 05 03       	syscall sys_io	; print coeff
0560+  0A98 E5          	pop b
0561+  0A99 E4          	pop a
0562+  0A9A 09          	ret
0563+  0A9B             
0564+  0A9B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0A9B             ; INPUT 8BIT HEX INTEGER
0566+  0A9B             ; read 8bit integer into AL
0567+  0A9B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0A9B             scan_u8x:
0569+  0A9B F8 04 00    	enter 4
0570+  0A9E D8          	push b
0571+  0A9F DA          	push d
0572+  0AA0             
0573+  0AA0 FA FD FF    	lea d, [bp + -3]
0574+  0AA3 07 81 08    	call gets				; get number
0575+  0AA6             
0576+  0AA6 32          	mov bl, [d]
0577+  0AA7 37          	mov bh, bl
0578+  0AA8 33 01 00    	mov bl, [d + 1]
0579+  0AAB 07 2F 08    	call atoi				; convert to int in AL
0580+  0AAE             
0581+  0AAE E7          	pop d
0582+  0AAF E5          	pop b
0583+  0AB0 F9          	leave
0584+  0AB1 09          	ret
0585+  0AB2             
0586+  0AB2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0AB2             ; input decimal number
0588+  0AB2             ; result in A
0589+  0AB2             ; 655'\0'
0590+  0AB2             ; low--------high
0591+  0AB2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  0AB2             scan_u16d:
0593+  0AB2 F8 08 00    	enter 8
0594+  0AB5 E2          	push si
0595+  0AB6 D8          	push b
0596+  0AB7 D9          	push c
0597+  0AB8 DA          	push d
0598+  0AB9 FA F9 FF    	lea d, [bp +- 7]
0599+  0ABC 07 81 08    	call gets
0600+  0ABF 07 AF 07    	call strlen			; get string length in C
0601+  0AC2 7E          	dec c
0602+  0AC3 FD 4E       	mov si, d
0603+  0AC5 12          	mov a, c
0604+  0AC6 FD 99       	shl a
0605+  0AC8 3B 17 08    	mov d, table_power
0606+  0ACB 59          	add d, a
0607+  0ACC 38 00 00    	mov c, 0
0608+  0ACF             mul_loop:
0609+  0ACF F6          	lodsb			; load ASCII to al
0610+  0AD0 B9 00       	cmp al, 0
0611+  0AD2 C6 E5 0A    	je mul_exit
0612+  0AD5 6F 30       	sub al, $30		; make into integer
0613+  0AD7 22 00       	mov ah, 0
0614+  0AD9 2A          	mov b, [d]
0615+  0ADA AC          	mul a, b			; result in B since it fits in 16bits
0616+  0ADB 11          	mov a, b
0617+  0ADC 28          	mov b, c
0618+  0ADD 54          	add a, b
0619+  0ADE 39          	mov c, a
0620+  0ADF 63 02 00    	sub d, 2
0621+  0AE2 0A CF 0A    	jmp mul_loop
0622+  0AE5             mul_exit:
0623+  0AE5 12          	mov a, c
0624+  0AE6 E7          	pop d
0625+  0AE7 E6          	pop c
0626+  0AE8 E5          	pop b
0627+  0AE9 EF          	pop si
0628+  0AEA F9          	leave
0629+  0AEB 09          	ret
0042   0AEC             .include "ctype.asm"
0001+  0AEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0AEC             ; ctype.s
0003+  0AEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0AEC             
0005+  0AEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0AEC             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0AEC             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0AEC             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0AEC             ;; characters are supported.
0010+  0AEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0AEC             ;; isalnum 
0012+  0AEC             ;; isalpha 
0013+  0AEC             ;; islower 
0014+  0AEC             ;; isupper 
0015+  0AEC             ;; isdigit 
0016+  0AEC             ;; isxdigit
0017+  0AEC             ;; iscntrl 
0018+  0AEC             ;; isgraph 
0019+  0AEC             ;; isspace 
0020+  0AEC             ;; isblank 
0021+  0AEC             ;; isprint 
0022+  0AEC             ;; ispunct 
0023+  0AEC             ;; tolower 
0024+  0AEC             ;; toupper
0025+  0AEC             
0026+  0AEC             
0027+  0AEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0AEC             ;; IS ALPHANUMERIC
0029+  0AEC             ;; sets ZF according with result
0030+  0AEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0AEC             isalnum:
0032+  0AEC 07 09 0B    	call isalpha
0033+  0AEF C6 F5 0A    	je isalnum_exit
0034+  0AF2 07 F6 0A    	call isdigit
0035+  0AF5             isalnum_exit:
0036+  0AF5 09          	ret	
0037+  0AF6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0AF6             ;; IS DIGIT
0039+  0AF6             ;; sets ZF according with result
0040+  0AF6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0AF6             isdigit:
0042+  0AF6 DB          	push al
0043+  0AF7 B9 30       	cmp al, '0'
0044+  0AF9 C8 05 0B    	jlu isdigit_false
0045+  0AFC B9 39       	cmp al, '9'
0046+  0AFE D1 05 0B    	jgu isdigit_false
0047+  0B01 87 00       	and al, 0	; set ZF
0048+  0B03 E8          	pop al
0049+  0B04 09          	ret
0050+  0B05             isdigit_false:
0051+  0B05 8B 01       	or al, 1	; clear ZF
0052+  0B07 E8          	pop al
0053+  0B08 09          	ret	
0054+  0B09             	
0055+  0B09             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0B09             ;; IS ALPHA
0057+  0B09             ;; sets ZF according with result
0058+  0B09             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0B09             isalpha:
0060+  0B09 DB          	push al
0061+  0B0A B9 5F       	cmp al, '_'
0062+  0B0C C6 2C 0B    	je isalpha_true
0063+  0B0F B9 2E       	cmp al, '.'
0064+  0B11 C6 2C 0B    	je isalpha_true
0065+  0B14 B9 41       	cmp al, 'A'
0066+  0B16 C8 28 0B    	jlu isalpha_false
0067+  0B19 B9 7A       	cmp al, 'z'
0068+  0B1B D1 28 0B    	jgu isalpha_false
0069+  0B1E B9 5A       	cmp al, 'Z'
0070+  0B20 D0 2C 0B    	jleu isalpha_true
0071+  0B23 B9 61       	cmp al, 'a'
0072+  0B25 C9 2C 0B    	jgeu isalpha_true
0073+  0B28             isalpha_false:
0074+  0B28 8B 01       	or al, 1	; clear ZF
0075+  0B2A E8          	pop al
0076+  0B2B 09          	ret
0077+  0B2C             isalpha_true:
0078+  0B2C 87 00       	and al, 0	; set ZF
0079+  0B2E E8          	pop al
0080+  0B2F 09          	ret
0081+  0B30             
0082+  0B30             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B30             ;; IS PATH-ALPHA
0084+  0B30             ;; sets ZF according with result
0085+  0B30             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B30             ispath:
0087+  0B30 DB          	push al
0088+  0B31 07 F6 0A    	call isdigit
0089+  0B34 C6 5E 0B    	je ispath_true
0090+  0B37 B9 5F       	cmp al, '_'
0091+  0B39 C6 5E 0B    	je ispath_true
0092+  0B3C B9 2F       	cmp al, '/'
0093+  0B3E C6 5E 0B    	je ispath_true
0094+  0B41 B9 2E       	cmp al, '.'
0095+  0B43 C6 5E 0B    	je ispath_true
0096+  0B46 B9 41       	cmp al, 'A'
0097+  0B48 C8 5A 0B    	jlu ispath_false
0098+  0B4B B9 7A       	cmp al, 'z'
0099+  0B4D D1 5A 0B    	jgu ispath_false
0100+  0B50 B9 5A       	cmp al, 'Z'
0101+  0B52 D0 5E 0B    	jleu ispath_true
0102+  0B55 B9 61       	cmp al, 'a'
0103+  0B57 C9 5E 0B    	jgeu ispath_true
0104+  0B5A             ispath_false:
0105+  0B5A 8B 01       	or al, 1	; clear ZF
0106+  0B5C E8          	pop al
0107+  0B5D 09          	ret
0108+  0B5E             ispath_true:
0109+  0B5E 87 00       	and al, 0	; set ZF
0110+  0B60 E8          	pop al
0111+  0B61 09          	ret
0112+  0B62             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B62             ;; IS SPACE
0114+  0B62             ;; sets ZF according with result
0115+  0B62             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B62             isspace:
0117+  0B62 B9 20       	cmp al, $20		; ' '
0118+  0B64 C6 78 0B    	je isspace_exit
0119+  0B67 B9 09       	cmp al, $09		; '\t'
0120+  0B69 C6 78 0B    	je isspace_exit
0121+  0B6C B9 0A       	cmp al, $0A		; '\n'
0122+  0B6E C6 78 0B    	je isspace_exit
0123+  0B71 B9 0D       	cmp al, $0D		; '\r'
0124+  0B73 C6 78 0B    	je isspace_exit
0125+  0B76 B9 0B       	cmp al, $0B		; '\v'
0126+  0B78             isspace_exit:
0127+  0B78 09          	ret	
0128+  0B79             
0129+  0B79             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B79             ; TO LOWER
0131+  0B79             ; input in AL
0132+  0B79             ; output in AL
0133+  0B79             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B79             to_lower:
0135+  0B79 B9 5A       	cmp al, 'Z'
0136+  0B7B D1 80 0B    	jgu to_lower_ret
0137+  0B7E 6A 20       	add al, $20				; convert to lower case
0138+  0B80             to_lower_ret:
0139+  0B80 09          	ret
0140+  0B81             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B81             ; TO UPPER
0142+  0B81             ; input in AL
0143+  0B81             ; output in AL
0144+  0B81             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B81             to_upper:
0146+  0B81 B9 61       	cmp al, 'a'
0147+  0B83 C8 88 0B    	jlu to_upper_ret
0148+  0B86 6F 20       	sub al, $20			; convert to upper case
0149+  0B88             to_upper_ret:
0150+  0B88 09          	ret
0151+  0B89             
0043   0B89             
0044   0B89             
0045   0B89             transient_data:
0046   0B89             
0047   0B89             .end
0048   0B89             
0049   0B89             
0050   0B89             
tasm: Number of errors = 0
