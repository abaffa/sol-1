0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0400             .org PROC_TEXT_ORG			; origin at 1024
0004   0400             
0005   0400             cmd_ps:
0006   0400 05 06       	syscall sys_list
0007   0402             
0008   0402 05 0B       	syscall sys_terminate_proc
0009   0404             
0010   0404             
0011   0404             .include "token.asm"
0001+  0404             TOKTYP_IDENTIFIER	.equ 0
0002+  0404             TOKTYP_KEYWORD		.equ 1
0003+  0404             TOKTYP_DELIMITER	.equ 2
0004+  0404             TOKTYP_STRING		.equ 3
0005+  0404             TOKTYP_CHAR			.equ 4
0006+  0404             TOKTYP_NUMERIC		.equ 5
0007+  0404             TOKTYP_END			.equ 6
0008+  0404             
0009+  0404             TOK_NULL			.equ 0
0010+  0404             TOK_FSLASH			.equ 1
0011+  0404             TOK_TIMES 			.equ 2
0012+  0404             TOK_PLUS 			.equ 3
0013+  0404             TOK_MINUS 			.equ 4
0014+  0404             TOK_DOT				.equ 5
0015+  0404             TOK_SEMI			.equ 6
0016+  0404             TOK_ANGLE			.equ 7
0017+  0404             TOK_TILDE			.equ 8
0018+  0404             TOK_EQUAL			.equ 9
0019+  0404             TOK_COLON			.equ 10
0020+  0404             TOK_COMMA			.equ 11
0021+  0404             
0022+  0404             TOK_END				.equ 20
0023+  0404             
0024+  0404             
0025+  0404             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0404             ;; read a full command argment from shell input buffer
0027+  0404             ;; argument is written into tokstr
0028+  0404             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  0404             get_arg:
0030+  0404 D7          	push a
0031+  0405 E2          	push si
0032+  0406 E3          	push di
0033+  0407 19 00       	mov al, 0
0034+  0409 3D 32 06    	mov [tokstr], al			; nullify tokstr string
0035+  040C 14 2E 06    	mov a, [prog]
0036+  040F 4D          	mov si, a
0037+  0410 FD 4F 32 06 	mov di, tokstr
0038+  0414             get_arg_skip_spaces:
0039+  0414 F6          	lodsb
0040+  0415 07 28 0B    	call isspace
0041+  0418 C6 14 04    	je get_arg_skip_spaces
0042+  041B             get_arg_L0:
0043+  041B B9 3B       	cmp al, $3B				; check if is ';'
0044+  041D C6 2A 04    	je get_arg_end
0045+  0420 B9 00       	cmp al, 0
0046+  0422 C6 2A 04    	je get_arg_end			; check if end of input
0047+  0425 F7          	stosb
0048+  0426 F6          	lodsb
0049+  0427 0A 1B 04    	jmp get_arg_L0
0050+  042A             get_arg_end:
0051+  042A 19 00       	mov al, 0
0052+  042C F7          	stosb
0053+  042D D5 01 00    	sub si, 1
0054+  0430 4E          	mov a, si
0055+  0431 42 2E 06    	mov [prog], a		; update pointer
0056+  0434 F0          	pop di
0057+  0435 EF          	pop si
0058+  0436 E4          	pop a
0059+  0437 09          	ret
0060+  0438             
0061+  0438             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0438             ;; read a path formation from shell input buffer
0063+  0438             ;; path is written into tokstr
0064+  0438             ;; /usr/bin
0065+  0438             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0438             get_path:
0067+  0438 D7          	push a
0068+  0439 E2          	push si
0069+  043A E3          	push di
0070+  043B 19 00       	mov al, 0
0071+  043D 3D 32 06    	mov [tokstr], al			; nullify tokstr string
0072+  0440 14 2E 06    	mov a, [prog]
0073+  0443 4D          	mov si, a
0074+  0444 FD 4F 32 06 	mov di, tokstr
0075+  0448             get_path_skip_spaces:
0076+  0448 F6          	lodsb
0077+  0449 07 28 0B    	call isspace
0078+  044C C6 48 04    	je get_path_skip_spaces
0079+  044F             get_path_is_pathchar:
0080+  044F F7          	stosb
0081+  0450 F6          	lodsb
0082+  0451 07 B2 0A    	call isalnum			;check if is alphanumeric
0083+  0454 C6 4F 04    	je get_path_is_pathchar
0084+  0457 B9 2F       	cmp al, '/'				; check if is '/'
0085+  0459 C6 4F 04    	je get_path_is_pathchar
0086+  045C 19 00       	mov al, 0
0087+  045E F7          	stosb
0088+  045F D5 01 00    	sub si, 1
0089+  0462 4E          	mov a, si
0090+  0463 42 2E 06    	mov [prog], a		; update pointer
0091+  0466             get_path_end:
0092+  0466 F0          	pop di
0093+  0467 EF          	pop si
0094+  0468 E4          	pop a
0095+  0469 09          	ret
0096+  046A             
0097+  046A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  046A             ;; read a line
0099+  046A             ;; line is written into tokstr
0100+  046A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  046A             get_line:
0102+  046A D7          	push a
0103+  046B E2          	push si
0104+  046C E3          	push di
0105+  046D 19 00       	mov al, 0
0106+  046F 3D 32 06    	mov [tokstr], al			; nullify tokstr string
0107+  0472 14 2E 06    	mov a, [prog]
0108+  0475 4D          	mov si, a
0109+  0476 FD 4F 32 06 	mov di, tokstr
0110+  047A             get_line_L0:
0111+  047A F6          	lodsb
0112+  047B B9 0A       	cmp al, $0A		; check for new line
0113+  047D C6 84 04    	je get_line_exit
0114+  0480 F7          	stosb
0115+  0481 0A 7A 04    	jmp get_line_L0
0116+  0484             get_line_exit:
0117+  0484 19 00       	mov al, 0
0118+  0486 F7          	stosb
0119+  0487 4E          	mov a, si
0120+  0488 42 2E 06    	mov [prog], a		; update pointer
0121+  048B F0          	pop di
0122+  048C EF          	pop si
0123+  048D E4          	pop a
0124+  048E 09          	ret
0125+  048F             
0126+  048F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  048F             ;; token parser
0128+  048F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  048F             get_token:
0130+  048F D7          	push a
0131+  0490 DA          	push d
0132+  0491 E2          	push si
0133+  0492 E3          	push di
0134+  0493 19 00       	mov al, 0
0135+  0495 3D 32 06    	mov [tokstr], al			; nullify tokstr string
0136+  0498 19 00       	mov al, TOK_NULL
0137+  049A 3D 31 06    	mov [tok], al				; nullify token
0138+  049D 14 2E 06    	mov a, [prog]
0139+  04A0 4D          	mov si, a
0140+  04A1 FD 4F 32 06 	mov di, tokstr
0141+  04A5             get_tok_skip_spaces:
0142+  04A5 F6          	lodsb
0143+  04A6 07 28 0B    	call isspace
0144+  04A9 C6 A5 04    	je get_tok_skip_spaces
0145+  04AC B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  04AE C6 93 05    	je get_token_end
0147+  04B1 B9 23       	cmp al, '#'			; comments!
0148+  04B3 C6 C1 05    	je get_tok_comment
0149+  04B6 07 B2 0A    	call isalnum
0150+  04B9 C6 A0 05    	jz is_alphanumeric
0151+  04BC             ; other token types
0152+  04BC             get_token_slash:
0153+  04BC B9 2F       	cmp al, '/'				; check if '/'
0154+  04BE C7 D6 04    	jne get_token_minus
0155+  04C1 F7          	stosb					; store '/' into token string
0156+  04C2 19 00       	mov al, 0
0157+  04C4 F7          	stosb					; terminate token string
0158+  04C5 19 01       	mov al, TOK_FSLASH
0159+  04C7 3D 31 06    	mov [tok], al			
0160+  04CA 19 02       	mov al, TOKTYP_DELIMITER
0161+  04CC 3D 30 06    	mov [toktyp], al
0162+  04CF 4E          	mov a, si
0163+  04D0 42 2E 06    	mov [prog], a		; update pointer
0164+  04D3 0A BC 05    	jmp get_token_return
0165+  04D6             get_token_minus:
0166+  04D6 B9 2D       	cmp al, '-'				; check if '-'
0167+  04D8 C7 F0 04    	jne get_token_comma
0168+  04DB F7          	stosb					; store '-' into token string
0169+  04DC 19 00       	mov al, 0
0170+  04DE F7          	stosb					; terminate token string
0171+  04DF 19 04       	mov al, TOK_MINUS
0172+  04E1 3D 31 06    	mov [tok], al			
0173+  04E4 19 02       	mov al, TOKTYP_DELIMITER
0174+  04E6 3D 30 06    	mov [toktyp], al
0175+  04E9 4E          	mov a, si
0176+  04EA 42 2E 06    	mov [prog], a		; update pointer
0177+  04ED 0A BC 05    	jmp get_token_return
0178+  04F0             get_token_comma:
0179+  04F0 B9 2C       	cmp al, ','				; check if ','
0180+  04F2 C7 0A 05    	jne get_token_semi
0181+  04F5 F7          	stosb					; store ',' into token string
0182+  04F6 19 00       	mov al, 0
0183+  04F8 F7          	stosb					; terminate token string
0184+  04F9 19 0B       	mov al, TOK_COMMA
0185+  04FB 3D 31 06    	mov [tok], al			
0186+  04FE 19 02       	mov al, TOKTYP_DELIMITER
0187+  0500 3D 30 06    	mov [toktyp], al
0188+  0503 4E          	mov a, si
0189+  0504 42 2E 06    	mov [prog], a		; update pointer
0190+  0507 0A BC 05    	jmp get_token_return
0191+  050A             get_token_semi:
0192+  050A B9 3B       	cmp al, $3B				; check if ';'
0193+  050C C7 24 05    	jne get_token_colon
0194+  050F F7          	stosb					; store ';' into token string
0195+  0510 19 00       	mov al, 0
0196+  0512 F7          	stosb					; terminate token string
0197+  0513 19 06       	mov al, TOK_SEMI
0198+  0515 3D 31 06    	mov [tok], al			
0199+  0518 19 02       	mov al, TOKTYP_DELIMITER
0200+  051A 3D 30 06    	mov [toktyp], al
0201+  051D 4E          	mov a, si
0202+  051E 42 2E 06    	mov [prog], a		; update pointer
0203+  0521 0A BC 05    	jmp get_token_return
0204+  0524             get_token_colon:
0205+  0524 B9 3A       	cmp al, $3A				; check if ':'
0206+  0526 C7 3E 05    	jne get_token_angle
0207+  0529 F7          	stosb					; store ':' into token string
0208+  052A 19 00       	mov al, 0
0209+  052C F7          	stosb					; terminate token string
0210+  052D 19 0A       	mov al, TOK_COLON
0211+  052F 3D 31 06    	mov [tok], al			
0212+  0532 19 02       	mov al, TOKTYP_DELIMITER
0213+  0534 3D 30 06    	mov [toktyp], al
0214+  0537 4E          	mov a, si
0215+  0538 42 2E 06    	mov [prog], a		; update pointer
0216+  053B 0A BC 05    	jmp get_token_return
0217+  053E             get_token_angle:
0218+  053E B9 3E       	cmp al, $3E				; check if '>'
0219+  0540 C7 58 05    	jne get_token_tilde
0220+  0543 F7          	stosb					; store '>' into token string
0221+  0544 19 00       	mov al, 0
0222+  0546 F7          	stosb					; terminate token string
0223+  0547 19 07       	mov al, TOK_ANGLE
0224+  0549 3D 31 06    	mov [tok], al			
0225+  054C 19 02       	mov al, TOKTYP_DELIMITER
0226+  054E 3D 30 06    	mov [toktyp], al
0227+  0551 4E          	mov a, si
0228+  0552 42 2E 06    	mov [prog], a		; update pointer
0229+  0555 0A BC 05    	jmp get_token_return
0230+  0558             get_token_tilde:
0231+  0558 B9 7E       	cmp al, '~'				; check if '~'
0232+  055A C7 72 05    	jne get_token_equal
0233+  055D F7          	stosb					; store '~' into token string
0234+  055E 19 00       	mov al, 0
0235+  0560 F7          	stosb					; terminate token string
0236+  0561 19 08       	mov al, TOK_TILDE
0237+  0563 3D 31 06    	mov [tok], al			
0238+  0566 19 02       	mov al, TOKTYP_DELIMITER
0239+  0568 3D 30 06    	mov [toktyp], al
0240+  056B 4E          	mov a, si
0241+  056C 42 2E 06    	mov [prog], a		; update pointer
0242+  056F 0A BC 05    	jmp get_token_return
0243+  0572             get_token_equal:
0244+  0572 B9 3D       	cmp al, '='				; check if '='
0245+  0574 C7 8C 05    	jne get_token_skip
0246+  0577 F7          	stosb					; store '=' into token string
0247+  0578 19 00       	mov al, 0
0248+  057A F7          	stosb					; terminate token string
0249+  057B 19 09       	mov al, TOK_EQUAL
0250+  057D 3D 31 06    	mov [tok], al			
0251+  0580 19 02       	mov al, TOKTYP_DELIMITER
0252+  0582 3D 30 06    	mov [toktyp], al
0253+  0585 4E          	mov a, si
0254+  0586 42 2E 06    	mov [prog], a		; update pointer
0255+  0589 0A BC 05    	jmp get_token_return
0256+  058C             get_token_skip:
0257+  058C 4E          	mov a, si
0258+  058D 42 2E 06    	mov [prog], a		; update pointer
0259+  0590 0A BC 05    	jmp get_token_return
0260+  0593             get_token_end:				; end of file token
0261+  0593 19 14       	mov al, TOK_END
0262+  0595 3D 31 06    	mov [tok], al
0263+  0598 19 06       	mov al, TOKTYP_END
0264+  059A 3D 30 06    	mov [toktyp], al
0265+  059D 0A BC 05    	jmp get_token_return
0266+  05A0             is_alphanumeric:
0267+  05A0 F7          	stosb
0268+  05A1 F6          	lodsb
0269+  05A2 07 B2 0A    	call isalnum			;check if is alphanumeric
0270+  05A5 C6 A0 05    	jz is_alphanumeric
0271+  05A8 B9 2E       	cmp al, $2E				; check if is '.'
0272+  05AA C6 A0 05    	je is_alphanumeric
0273+  05AD 19 00       	mov al, 0
0274+  05AF F7          	stosb
0275+  05B0 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  05B2 3D 30 06    	mov [toktyp], al
0277+  05B5 D5 01 00    	sub si, 1
0278+  05B8 4E          	mov a, si
0279+  05B9 42 2E 06    	mov [prog], a		; update pointer
0280+  05BC             get_token_return:
0281+  05BC F0          	pop di
0282+  05BD EF          	pop si
0283+  05BE E7          	pop d
0284+  05BF E4          	pop a
0285+  05C0 09          	ret
0286+  05C1             get_tok_comment:
0287+  05C1 F6          	lodsb
0288+  05C2 B9 0A       	cmp al, $0A			; new line
0289+  05C4 C7 C1 05    	jne get_tok_comment
0290+  05C7 0A A5 04    	jmp get_tok_skip_spaces
0291+  05CA             
0292+  05CA             
0293+  05CA             get_number:
0294+  05CA D7          	push a
0295+  05CB DA          	push d
0296+  05CC E2          	push si
0297+  05CD E3          	push di
0298+  05CE 19 00       	mov al, 0
0299+  05D0 3D 32 06    	mov [tokstr], al			; nullify tokstr string
0300+  05D3 19 00       	mov al, TOK_NULL
0301+  05D5 3D 31 06    	mov [tok], al				; nullify token
0302+  05D8 14 2E 06    	mov a, [prog]
0303+  05DB 4D          	mov si, a
0304+  05DC FD 4F 32 06 	mov di, tokstr
0305+  05E0             get_number_skip_spaces:
0306+  05E0 F6          	lodsb
0307+  05E1 07 28 0B    	call isspace
0308+  05E4 C6 E0 05    	je get_number_skip_spaces
0309+  05E7 B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  05E9 C7 F9 05    	jne get_number_L0
0311+  05EC 19 14       	mov al, TOK_END
0312+  05EE 3D 31 06    	mov [tok], al
0313+  05F1 19 06       	mov al, TOKTYP_END
0314+  05F3 3D 30 06    	mov [toktyp], al
0315+  05F6 0A 10 06    	jmp get_number_return
0316+  05F9             get_number_L0:
0317+  05F9 F7          	stosb
0318+  05FA F6          	lodsb
0319+  05FB 07 BC 0A    	call isdigit			;check if is numeric
0320+  05FE C6 F9 05    	jz get_number_L0
0321+  0601 19 00       	mov al, 0
0322+  0603 F7          	stosb
0323+  0604 19 05       	mov al, TOKTYP_NUMERIC
0324+  0606 3D 30 06    	mov [toktyp], al
0325+  0609 D5 01 00    	sub si, 1
0326+  060C 4E          	mov a, si
0327+  060D 42 2E 06    	mov [prog], a		; update pointer
0328+  0610             get_number_return:
0329+  0610 F0          	pop di
0330+  0611 EF          	pop si
0331+  0612 E7          	pop d
0332+  0613 E4          	pop a
0333+  0614 09          	ret
0334+  0615             
0335+  0615             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0615             ;; PUT BACK TOKEN
0337+  0615             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  0615             putback:
0339+  0615 D7          	push a
0340+  0616 E2          	push si
0341+  0617 FD 4D 32 06 	mov si, tokstr	
0342+  061B             putback_loop:
0343+  061B F6          	lodsb
0344+  061C B9 00       	cmp al, 0
0345+  061E C6 2B 06    	je putback_end
0346+  0621 14 2E 06    	mov a, [prog]
0347+  0624 7D          	dec a
0348+  0625 42 2E 06    	mov [prog], a			; update pointer
0349+  0628 0A 1B 06    	jmp putback_loop
0350+  062B             putback_end:
0351+  062B EF          	pop si
0352+  062C E4          	pop a
0353+  062D 09          	ret
0354+  062E             
0355+  062E             
0356+  062E             
0357+  062E             
0358+  062E 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  0630             
0360+  0630 00          toktyp: 	.db 0			; token type symbol
0361+  0631 00          tok:		.db 0			; current token symbol
0362+  0632 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  0636 00 00 00 00 
0362+  063A 00 00 00 00 
0362+  063E 00 00 00 00 
0362+  0642 00 00 00 00 
0362+  0646 00 00 00 00 
0362+  064A 00 00 00 00 
0362+  064E 00 00 00 00 
0362+  0652 00 00 00 00 
0362+  0656 00 00 00 00 
0362+  065A 00 00 00 00 
0362+  065E 00 00 00 00 
0362+  0662 00 00 00 00 
0362+  0666 00 00 00 00 
0362+  066A 00 00 00 00 
0362+  066E 00 00 00 00 
0362+  0672 00 00 00 00 
0362+  0676 00 00 00 00 
0362+  067A 00 00 00 00 
0362+  067E 00 00 00 00 
0362+  0682 00 00 00 00 
0362+  0686 00 00 00 00 
0362+  068A 00 00 00 00 
0362+  068E 00 00 00 00 
0362+  0692 00 00 00 00 
0362+  0696 00 00 00 00 
0362+  069A 00 00 00 00 
0362+  069E 00 00 00 00 
0362+  06A2 00 00 00 00 
0362+  06A6 00 00 00 00 
0362+  06AA 00 00 00 00 
0362+  06AE 00 00 00 00 
0362+  06B2 00 00 00 00 
0362+  06B6 00 00 00 00 
0362+  06BA 00 00 00 00 
0362+  06BE 00 00 00 00 
0362+  06C2 00 00 00 00 
0362+  06C6 00 00 00 00 
0362+  06CA 00 00 00 00 
0362+  06CE 00 00 00 00 
0362+  06D2 00 00 00 00 
0362+  06D6 00 00 00 00 
0362+  06DA 00 00 00 00 
0362+  06DE 00 00 00 00 
0362+  06E2 00 00 00 00 
0362+  06E6 00 00 00 00 
0362+  06EA 00 00 00 00 
0362+  06EE 00 00 00 00 
0362+  06F2 00 00 00 00 
0362+  06F6 00 00 00 00 
0362+  06FA 00 00 00 00 
0362+  06FE 00 00 00 00 
0362+  0702 00 00 00 00 
0362+  0706 00 00 00 00 
0362+  070A 00 00 00 00 
0362+  070E 00 00 00 00 
0362+  0712 00 00 00 00 
0362+  0716 00 00 00 00 
0362+  071A 00 00 00 00 
0362+  071E 00 00 00 00 
0362+  0722 00 00 00 00 
0362+  0726 00 00 00 00 
0362+  072A 00 00 00 00 
0362+  072E 00 00 00 00 
0012   0732             .include "stdio.asm"
0001+  0732             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0732             ; stdio.s
0003+  0732             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0732             .include "string.asm"
0001++ 0732             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0732             ; string.s
0003++ 0732             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0732             
0005++ 0732             
0006++ 0732             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0732             ; strrev
0008++ 0732             ; reverse a string
0009++ 0732             ; D = string address
0010++ 0732             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0732             ; 01234
0012++ 0732             strrev:
0013++ 0732 4B          	pusha
0014++ 0733 07 79 07    	call strlen	; length in C
0015++ 0736 12          	mov a, c
0016++ 0737 AF 01 00    	cmp a, 1
0017++ 073A D0 54 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 073D 7D          	dec a
0019++ 073E FD 4E       	mov si, d	; beginning of string
0020++ 0740 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0742 59          	add d, a	; end of string
0022++ 0743 12          	mov a, c
0023++ 0744 FD 9B       	shr a		; divide by 2
0024++ 0746 39          	mov c, a	; C now counts the steps
0025++ 0747             strrev_L0:
0026++ 0747 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0748 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0749 3E          	mov [d], al	; store left char into right side
0029++ 074A 1B          	mov al, bl
0030++ 074B F7          	stosb		; store right-side char into left-side; increase DI
0031++ 074C 7E          	dec c
0032++ 074D 7F          	dec d
0033++ 074E C2 00 00    	cmp c, 0
0034++ 0751 C7 47 07    	jne strrev_L0
0035++ 0754             strrev_end:
0036++ 0754 4C          	popa
0037++ 0755 09          	ret
0038++ 0756             	
0039++ 0756             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0756             ; strchr
0041++ 0756             ; search string in D for char in AL
0042++ 0756             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0756             strchr:
0044++ 0756             strchr_L0:
0045++ 0756 32          	mov bl, [d]
0046++ 0757 C1 00       	cmp bl, 0
0047++ 0759 C6 64 07    	je strchr_end
0048++ 075C BA          	cmp al, bl
0049++ 075D C6 64 07    	je strchr_end
0050++ 0760 79          	inc d
0051++ 0761 0A 56 07    	jmp strchr_L0
0052++ 0764             strchr_end:
0053++ 0764 1B          	mov al, bl
0054++ 0765 09          	ret
0055++ 0766             
0056++ 0766             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0766             ; strstr
0058++ 0766             ; find sub-string
0059++ 0766             ; str1 in SI
0060++ 0766             ; str2 in DI
0061++ 0766             ; SI points to end of source string
0062++ 0766             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0766             strstr:
0064++ 0766 DB          	push al
0065++ 0767 DA          	push d
0066++ 0768 E3          	push di
0067++ 0769             strstr_loop:
0068++ 0769 F3          	cmpsb					; compare a byte of the strings
0069++ 076A C7 75 07    	jne strstr_ret
0070++ 076D FC 00 00    	lea d, [di + 0]
0071++ 0770 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0772 C7 69 07    	jne strstr_loop				; equal chars but not at end
0073++ 0775             strstr_ret:
0074++ 0775 F0          	pop di
0075++ 0776 E7          	pop d
0076++ 0777 E8          	pop al
0077++ 0778 09          	ret
0078++ 0779             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0779             ; length of null terminated string
0080++ 0779             ; result in C
0081++ 0779             ; pointer in D
0082++ 0779             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0779             strlen:
0084++ 0779 DA          	push d
0085++ 077A 38 00 00    	mov c, 0
0086++ 077D             strlen_L1:
0087++ 077D BD 00       	cmp byte [d], 0
0088++ 077F C6 87 07    	je strlen_ret
0089++ 0782 79          	inc d
0090++ 0783 78          	inc c
0091++ 0784 0A 7D 07    	jmp strlen_L1
0092++ 0787             strlen_ret:
0093++ 0787 E7          	pop d
0094++ 0788 09          	ret
0095++ 0789             
0096++ 0789             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0789             ; STRCMP
0098++ 0789             ; compare two strings
0099++ 0789             ; str1 in SI
0100++ 0789             ; str2 in DI
0101++ 0789             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0789             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0789             strcmp:
0104++ 0789 DB          	push al
0105++ 078A DA          	push d
0106++ 078B E3          	push di
0107++ 078C E2          	push si
0108++ 078D             strcmp_loop:
0109++ 078D F3          	cmpsb					; compare a byte of the strings
0110++ 078E C7 99 07    	jne strcmp_ret
0111++ 0791 FB FF FF    	lea d, [si +- 1]
0112++ 0794 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0796 C7 8D 07    	jne strcmp_loop				; equal chars but not at end
0114++ 0799             strcmp_ret:
0115++ 0799 EF          	pop si
0116++ 079A F0          	pop di
0117++ 079B E7          	pop d
0118++ 079C E8          	pop al
0119++ 079D 09          	ret
0120++ 079E             
0121++ 079E             
0122++ 079E             ; STRCPY
0123++ 079E             ; copy null terminated string from SI to DI
0124++ 079E             ; source in SI
0125++ 079E             ; destination in DI
0126++ 079E             strcpy:
0127++ 079E E2          	push si
0128++ 079F E3          	push di
0129++ 07A0 DB          	push al
0130++ 07A1             strcpy_L1:
0131++ 07A1 F6          	lodsb
0132++ 07A2 F7          	stosb
0133++ 07A3 B9 00       	cmp al, 0
0134++ 07A5 C7 A1 07    	jne strcpy_L1
0135++ 07A8             strcpy_end:
0136++ 07A8 E8          	pop al
0137++ 07A9 F0          	pop di
0138++ 07AA EF          	pop si
0139++ 07AB 09          	ret
0140++ 07AC             
0141++ 07AC             ; STRCAT
0142++ 07AC             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07AC             ; source in SI
0144++ 07AC             ; destination in DI
0145++ 07AC             strcat:
0146++ 07AC E2          	push si
0147++ 07AD E3          	push di
0148++ 07AE D7          	push a
0149++ 07AF DA          	push d
0150++ 07B0 50          	mov a, di
0151++ 07B1 3C          	mov d, a
0152++ 07B2             strcat_goto_end_L1:
0153++ 07B2 BD 00       	cmp byte[d], 0
0154++ 07B4 C6 BB 07    	je strcat_start
0155++ 07B7 79          	inc d
0156++ 07B8 0A B2 07    	jmp strcat_goto_end_L1
0157++ 07BB             strcat_start:
0158++ 07BB FD 50       	mov di, d
0159++ 07BD             strcat_L1:
0160++ 07BD F6          	lodsb
0161++ 07BE F7          	stosb
0162++ 07BF B9 00       	cmp al, 0
0163++ 07C1 C7 BD 07    	jne strcat_L1
0164++ 07C4             strcat_end:
0165++ 07C4 E7          	pop d
0166++ 07C5 E4          	pop a
0167++ 07C6 F0          	pop di
0168++ 07C7 EF          	pop si
0169++ 07C8 09          	ret
0005+  07C9             
0006+  07C9 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  07CD 34 35 36 37 
0006+  07D1 38 39 41 42 
0006+  07D5 43 44 45 46 
0007+  07D9 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  07DD 1B 5B 48 00 
0008+  07E1             
0009+  07E1 01 00       table_power:.dw 1
0010+  07E3 0A 00       			.dw 10
0011+  07E5 64 00       			.dw 100
0012+  07E7 E8 03       			.dw 1000
0013+  07E9 10 27       			.dw 10000
0014+  07EB             
0015+  07EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  07EB             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  07EB             ; ASCII in BL
0018+  07EB             ; result in AL
0019+  07EB             ; ascii for F = 0100 0110
0020+  07EB             ; ascii for 9 = 0011 1001
0021+  07EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  07EB             hex_ascii_encode:
0023+  07EB 1B          	mov al, bl
0024+  07EC 93 40       	test al, $40				; test if letter or number
0025+  07EE C7 F4 07    	jnz hex_letter
0026+  07F1 87 0F       	and al, $0F				; get number
0027+  07F3 09          	ret
0028+  07F4             hex_letter:
0029+  07F4 87 0F       	and al, $0F				; get letter
0030+  07F6 6A 09       	add al, 9
0031+  07F8 09          	ret
0032+  07F9             
0033+  07F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  07F9             ; ATOI
0035+  07F9             ; 2 letter hex string in B
0036+  07F9             ; 8bit integer returned in AL
0037+  07F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  07F9             atoi:
0039+  07F9 D8          	push b
0040+  07FA 07 EB 07    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  07FD 30          	mov bl, bh
0042+  07FE DB          	push al					; save a
0043+  07FF 07 EB 07    	call hex_ascii_encode
0044+  0802 EA          	pop bl	
0045+  0803 FD 9E 04    	shl al, 4
0046+  0806 8C          	or al, bl
0047+  0807 E5          	pop b
0048+  0808 09          	ret	
0049+  0809             
0050+  0809             
0051+  0809             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0809             ; printf
0053+  0809             ; no need for explanations!
0054+  0809             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0809             printf:
0056+  0809 09          	ret
0057+  080A             
0058+  080A             
0059+  080A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  080A             ; scanf
0061+  080A             ; no need for explanations!
0062+  080A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  080A             scanf:
0064+  080A 09          	ret
0065+  080B             
0066+  080B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  080B             ; ITOA
0068+  080B             ; 8bit value in BL
0069+  080B             ; 2 byte ASCII result in A
0070+  080B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  080B             itoa:
0072+  080B DA          	push d
0073+  080C D8          	push b
0074+  080D A7 00       	mov bh, 0
0075+  080F FD A4 04    	shr bl, 4	
0076+  0812 74          	mov d, b
0077+  0813 1F C9 07    	mov al, [d + s_hex_digits]
0078+  0816 23          	mov ah, al
0079+  0817             	
0080+  0817 E5          	pop b
0081+  0818 D8          	push b
0082+  0819 A7 00       	mov bh, 0
0083+  081B FD 87 0F    	and bl, $0F
0084+  081E 74          	mov d, b
0085+  081F 1F C9 07    	mov al, [d + s_hex_digits]
0086+  0822 E5          	pop b
0087+  0823 E7          	pop d
0088+  0824 09          	ret
0089+  0825             
0090+  0825             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0825             ; HEX STRING TO BINARY
0092+  0825             ; di = destination address
0093+  0825             ; si = source
0094+  0825             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0825             hex_to_int:
0096+  0825             hex_to_int_L1:
0097+  0825 F6          	lodsb					; load from [SI] to AL
0098+  0826 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0828 C6 35 08    	jz hex_to_int_ret
0100+  082B 36          	mov bh, al
0101+  082C F6          	lodsb
0102+  082D 2F          	mov bl, al
0103+  082E 07 F9 07    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0831 F7          	stosb					; store AL to [DI]
0105+  0832 0A 25 08    	jmp hex_to_int_L1
0106+  0835             hex_to_int_ret:
0107+  0835 09          	ret		
0108+  0836             
0109+  0836             
0110+  0836             
0111+  0836             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0836             ; GETCHAR
0113+  0836             ; char in ah
0114+  0836             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0836             getchar:
0116+  0836 DB          	push al
0117+  0837             getchar_retry:
0118+  0837 FD 0C       	sti
0119+  0839 19 01       	mov al, 1
0120+  083B 05 03       	syscall sys_io			; receive in AH
0121+  083D B9 00       	cmp al, 0			; check if any char was receive
0122+  083F C6 37 08    	je getchar_retry
0123+  0842 E8          	pop al
0124+  0843 09          	ret
0125+  0844             
0126+  0844             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0844             ; PUTCHAR
0128+  0844             ; char in ah
0129+  0844             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0844             putchar:
0131+  0844 D7          	push a
0132+  0845 19 00       	mov al, 0
0133+  0847 05 03       	syscall sys_io			; char in AH
0134+  0849 E4          	pop a
0135+  084A 09          	ret
0136+  084B             
0137+  084B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  084B             ;; INPUT A STRING
0139+  084B             ;; terminates with null
0140+  084B             ;; pointer in D
0141+  084B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  084B             gets:
0143+  084B D7          	push a
0144+  084C DA          	push d
0145+  084D             gets_loop:
0146+  084D FD 0C       	sti
0147+  084F 19 01       	mov al, 1
0148+  0851 05 03       	syscall sys_io			; receive in AH
0149+  0853 B9 00       	cmp al, 0				; check error code (AL)
0150+  0855 C6 4D 08    	je gets_loop			; if no char received, retry
0151+  0858             
0152+  0858 76 1B       	cmp ah, 27
0153+  085A C6 7B 08    	je gets_telnet_escape
0154+  085D 76 0A       	cmp ah, $0A				; LF
0155+  085F C6 D4 08    	je gets_end
0156+  0862 76 0D       	cmp ah, $0D				; CR
0157+  0864 C6 D4 08    	je gets_end
0158+  0867 76 5C       	cmp ah, $5C				; '\\'
0159+  0869 C6 AB 08    	je gets_escape
0160+  086C             	
0161+  086C 76 08       	cmp ah, $08			; check for backspace
0162+  086E C6 77 08    	je gets_backspace
0163+  0871             
0164+  0871 1A          	mov al, ah
0165+  0872 3E          	mov [d], al
0166+  0873 79          	inc d
0167+  0874 0A 4D 08    	jmp gets_loop
0168+  0877             gets_backspace:
0169+  0877 7F          	dec d
0170+  0878 0A 4D 08    	jmp gets_loop
0171+  087B             gets_telnet_escape:
0172+  087B FD 0C       	sti
0173+  087D 19 01       	mov al, 1
0174+  087F 05 03       	syscall sys_io				; receive in AH without echo
0175+  0881 B9 00       	cmp al, 0					; check error code (AL)
0176+  0883 C6 7B 08    	je gets_telnet_escape		; if no char received, retry
0177+  0886 76 5B       	cmp ah, '['
0178+  0888 C7 4D 08    	jne gets_loop
0179+  088B             gets_telnet_escape_phase2:
0180+  088B FD 0C       	sti
0181+  088D 19 01       	mov al, 1
0182+  088F 05 03       	syscall sys_io					; receive in AH without echo
0183+  0891 B9 00       	cmp al, 0						; check error code (AL)
0184+  0893 C6 8B 08    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0896 76 44       	cmp ah, 'D'
0186+  0898 C6 A3 08    	je gets_left_arrow
0187+  089B 76 43       	cmp ah, 'C'
0188+  089D C6 A7 08    	je gets_right_arrow
0189+  08A0 0A 4D 08    	jmp gets_loop
0190+  08A3             gets_left_arrow:
0191+  08A3 7F          	dec d
0192+  08A4 0A 4D 08    	jmp gets_loop
0193+  08A7             gets_right_arrow:
0194+  08A7 79          	inc d
0195+  08A8 0A 4D 08    	jmp gets_loop
0196+  08AB             gets_escape:
0197+  08AB FD 0C       	sti
0198+  08AD 19 01       	mov al, 1
0199+  08AF 05 03       	syscall sys_io			; receive in AH
0200+  08B1 B9 00       	cmp al, 0				; check error code (AL)
0201+  08B3 C6 AB 08    	je gets_escape			; if no char received, retry
0202+  08B6 76 6E       	cmp ah, 'n'
0203+  08B8 C6 C6 08    	je gets_LF
0204+  08BB 76 72       	cmp ah, 'r'
0205+  08BD C6 CD 08    	je gets_CR
0206+  08C0 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  08C1 3E          	mov [d], al
0208+  08C2 79          	inc d
0209+  08C3 0A 4D 08    	jmp gets_loop
0210+  08C6             gets_LF:
0211+  08C6 19 0A       	mov al, $0A
0212+  08C8 3E          	mov [d], al
0213+  08C9 79          	inc d
0214+  08CA 0A 4D 08    	jmp gets_loop
0215+  08CD             gets_CR:
0216+  08CD 19 0D       	mov al, $0D
0217+  08CF 3E          	mov [d], al
0218+  08D0 79          	inc d
0219+  08D1 0A 4D 08    	jmp gets_loop
0220+  08D4             gets_end:
0221+  08D4 19 00       	mov al, 0
0222+  08D6 3E          	mov [d], al				; terminate string
0223+  08D7 E7          	pop d
0224+  08D8 E4          	pop a
0225+  08D9 09          	ret
0226+  08DA             
0227+  08DA             
0228+  08DA             
0229+  08DA             
0230+  08DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  08DA             ;; INPUT TEXT
0232+  08DA             ;; terminated with CTRL+D
0233+  08DA             ;; pointer in D
0234+  08DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  08DA             gettxt:
0236+  08DA D7          	push a
0237+  08DB DA          	push d
0238+  08DC             gettxt_loop:
0239+  08DC 19 01       	mov al, 1
0240+  08DE 05 03       	syscall sys_io			; receive in AH
0241+  08E0 B9 00       	cmp al, 0				; check error code (AL)
0242+  08E2 C6 DC 08    	je gettxt_loop		; if no char received, retry
0243+  08E5 76 04       	cmp ah, 4			; EOT
0244+  08E7 C6 25 09    	je gettxt_end
0245+  08EA 76 08       	cmp ah, $08			; check for backspace
0246+  08EC C6 21 09    	je gettxt_backspace
0247+  08EF 76 5C       	cmp ah, $5C				; '\\'
0248+  08F1 C6 FA 08    	je gettxt_escape
0249+  08F4 1A          	mov al, ah
0250+  08F5 3E          	mov [d], al
0251+  08F6 79          	inc d
0252+  08F7 0A DC 08    	jmp gettxt_loop
0253+  08FA             gettxt_escape:
0254+  08FA 19 01       	mov al, 1
0255+  08FC 05 03       	syscall sys_io			; receive in AH
0256+  08FE B9 00       	cmp al, 0				; check error code (AL)
0257+  0900 C6 FA 08    	je gettxt_escape		; if no char received, retry
0258+  0903 76 6E       	cmp ah, 'n'
0259+  0905 C6 13 09    	je gettxt_LF
0260+  0908 76 72       	cmp ah, 'r'
0261+  090A C6 1A 09    	je gettxt_CR
0262+  090D 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  090E 3E          	mov [d], al
0264+  090F 79          	inc d
0265+  0910 0A DC 08    	jmp gettxt_loop
0266+  0913             gettxt_LF:
0267+  0913 19 0A       	mov al, $0A
0268+  0915 3E          	mov [d], al
0269+  0916 79          	inc d
0270+  0917 0A DC 08    	jmp gettxt_loop
0271+  091A             gettxt_CR:
0272+  091A 19 0D       	mov al, $0D
0273+  091C 3E          	mov [d], al
0274+  091D 79          	inc d
0275+  091E 0A DC 08    	jmp gettxt_loop
0276+  0921             gettxt_backspace:
0277+  0921 7F          	dec d
0278+  0922 0A DC 08    	jmp gettxt_loop
0279+  0925             gettxt_end:
0280+  0925 19 00       	mov al, 0
0281+  0927 3E          	mov [d], al				; terminate string
0282+  0928 E7          	pop d
0283+  0929 E4          	pop a
0284+  092A 09          	ret
0285+  092B             
0286+  092B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  092B             ; PRINT NEW LINE
0288+  092B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  092B             printnl:
0290+  092B D7          	push a
0291+  092C 10 00 0A    	mov a, $0A00
0292+  092F 05 03       	syscall sys_io
0293+  0931 10 00 0D    	mov a, $0D00
0294+  0934 05 03       	syscall sys_io
0295+  0936 E4          	pop a
0296+  0937 09          	ret
0297+  0938             
0298+  0938             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0938             ; strtoint
0300+  0938             ; 4 digit hex string number in d
0301+  0938             ; integer returned in A
0302+  0938             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0938             strtointx:
0304+  0938 D8          	push b
0305+  0939 32          	mov bl, [d]
0306+  093A 37          	mov bh, bl
0307+  093B 33 01 00    	mov bl, [d + 1]
0308+  093E 07 F9 07    	call atoi				; convert to int in AL
0309+  0941 23          	mov ah, al				; move to AH
0310+  0942 33 02 00    	mov bl, [d + 2]
0311+  0945 37          	mov bh, bl
0312+  0946 33 03 00    	mov bl, [d + 3]
0313+  0949 07 F9 07    	call atoi				; convert to int in AL
0314+  094C E5          	pop b
0315+  094D 09          	ret
0316+  094E             
0317+  094E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  094E             ; strtoint
0319+  094E             ; 5 digit base10 string number in d
0320+  094E             ; integer returned in A
0321+  094E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  094E             strtoint:
0323+  094E E2          	push si
0324+  094F D8          	push b
0325+  0950 D9          	push c
0326+  0951 DA          	push d
0327+  0952 07 79 07    	call strlen			; get string length in C
0328+  0955 7E          	dec c
0329+  0956 FD 4E       	mov si, d
0330+  0958 12          	mov a, c
0331+  0959 FD 99       	shl a
0332+  095B 3B E1 07    	mov d, table_power
0333+  095E 59          	add d, a
0334+  095F 38 00 00    	mov c, 0
0335+  0962             strtoint_L0:
0336+  0962 F6          	lodsb			; load ASCII to al
0337+  0963 B9 00       	cmp al, 0
0338+  0965 C6 78 09    	je strtoint_end
0339+  0968 6F 30       	sub al, $30		; make into integer
0340+  096A 22 00       	mov ah, 0
0341+  096C 2A          	mov b, [d]
0342+  096D AC          	mul a, b			; result in B since it fits in 16bits
0343+  096E 11          	mov a, b
0344+  096F 28          	mov b, c
0345+  0970 54          	add a, b
0346+  0971 39          	mov c, a
0347+  0972 63 02 00    	sub d, 2
0348+  0975 0A 62 09    	jmp strtoint_L0
0349+  0978             strtoint_end:
0350+  0978 12          	mov a, c
0351+  0979 E7          	pop d
0352+  097A E6          	pop c
0353+  097B E5          	pop b
0354+  097C EF          	pop si
0355+  097D 09          	ret
0356+  097E             
0357+  097E             
0358+  097E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  097E             ; PRINT NULL TERMINATED STRING
0360+  097E             ; pointer in D
0361+  097E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  097E             puts:
0363+  097E D7          	push a
0364+  097F DA          	push d
0365+  0980             puts_L1:
0366+  0980 1E          	mov al, [d]
0367+  0981 B9 00       	cmp al, 0
0368+  0983 C6 8F 09    	jz puts_END
0369+  0986 23          	mov ah, al
0370+  0987 19 00       	mov al, 0
0371+  0989 05 03       	syscall sys_io
0372+  098B 79          	inc d
0373+  098C 0A 80 09    	jmp puts_L1
0374+  098F             puts_END:
0375+  098F E7          	pop d
0376+  0990 E4          	pop a
0377+  0991 09          	ret
0378+  0992             
0379+  0992             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0992             ; PRINT N SIZE STRING
0381+  0992             ; pointer in D
0382+  0992             ; size in C
0383+  0992             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0992             putsn:
0385+  0992 DB          	push al
0386+  0993 DA          	push d
0387+  0994 D9          	push c
0388+  0995             putsn_L0:
0389+  0995 1E          	mov al, [d]
0390+  0996 23          	mov ah, al
0391+  0997 19 00       	mov al, 0
0392+  0999 05 03       	syscall sys_io
0393+  099B 79          	inc d
0394+  099C 7E          	dec c	
0395+  099D C2 00 00    	cmp c, 0
0396+  09A0 C7 95 09    	jne putsn_L0
0397+  09A3             putsn_end:
0398+  09A3 E6          	pop c
0399+  09A4 E7          	pop d
0400+  09A5 E8          	pop al
0401+  09A6 09          	ret
0402+  09A7             
0403+  09A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  09A7             ; print 16bit decimal number
0405+  09A7             ; input number in A
0406+  09A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  09A7             print_u16d:
0408+  09A7 D7          	push a
0409+  09A8 D8          	push b
0410+  09A9 26 10 27    	mov b, 10000
0411+  09AC AE          	div a, b			; get 10000's coeff.
0412+  09AD 07 CF 09    	call print_number
0413+  09B0 11          	mov a, b
0414+  09B1 26 E8 03    	mov b, 1000
0415+  09B4 AE          	div a, b			; get 1000's coeff.
0416+  09B5 07 CF 09    	call print_number
0417+  09B8 11          	mov a, b
0418+  09B9 26 64 00    	mov b, 100
0419+  09BC AE          	div a, b
0420+  09BD 07 CF 09    	call print_number
0421+  09C0 11          	mov a, b
0422+  09C1 26 0A 00    	mov b, 10
0423+  09C4 AE          	div a, b
0424+  09C5 07 CF 09    	call print_number
0425+  09C8 1B          	mov al, bl			; 1's coeff in bl
0426+  09C9 07 CF 09    	call print_number
0427+  09CC E5          	pop b
0428+  09CD E4          	pop a
0429+  09CE 09          	ret
0430+  09CF             
0431+  09CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0432+  09CF             ; print AL
0433+  09CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0434+  09CF             print_number:
0435+  09CF 6A 30       	add al, $30
0436+  09D1 23          	mov ah, al
0437+  09D2 07 44 08    	call putchar
0438+  09D5 09          	ret
0439+  09D6             
0440+  09D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0441+  09D6             ; PRINT 16BIT HEX INTEGER
0442+  09D6             ; integer value in reg B
0443+  09D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0444+  09D6             print_u16x:
0445+  09D6 D7          	push a
0446+  09D7 D8          	push b
0447+  09D8 DD          	push bl
0448+  09D9 30          	mov bl, bh
0449+  09DA 07 0B 08    	call itoa				; convert bh to char in A
0450+  09DD 2F          	mov bl, al				; save al
0451+  09DE 19 00       	mov al, 0
0452+  09E0 05 03       	syscall sys_io				; display AH
0453+  09E2 24          	mov ah, bl				; retrieve al
0454+  09E3 19 00       	mov al, 0
0455+  09E5 05 03       	syscall sys_io				; display AL
0456+  09E7             
0457+  09E7 EA          	pop bl
0458+  09E8 07 0B 08    	call itoa				; convert bh to char in A
0459+  09EB 2F          	mov bl, al				; save al
0460+  09EC 19 00       	mov al, 0
0461+  09EE 05 03       	syscall sys_io				; display AH
0462+  09F0 24          	mov ah, bl				; retrieve al
0463+  09F1 19 00       	mov al, 0
0464+  09F3 05 03       	syscall sys_io				; display AL
0465+  09F5             
0466+  09F5 E5          	pop b
0467+  09F6 E4          	pop a
0468+  09F7 09          	ret
0469+  09F8             
0470+  09F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0471+  09F8             ; INPUT 16BIT HEX INTEGER
0472+  09F8             ; read 16bit integer into A
0473+  09F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0474+  09F8             scan_u16x:
0475+  09F8 F8 10 00    	enter 16
0476+  09FB D8          	push b
0477+  09FC DA          	push d
0478+  09FD             
0479+  09FD FA F1 FF    	lea d, [bp + -15]
0480+  0A00 07 4B 08    	call gets				; get number
0481+  0A03             
0482+  0A03 32          	mov bl, [d]
0483+  0A04 37          	mov bh, bl
0484+  0A05 33 01 00    	mov bl, [d + 1]
0485+  0A08 07 F9 07    	call atoi				; convert to int in AL
0486+  0A0B 23          	mov ah, al				; move to AH
0487+  0A0C             
0488+  0A0C 33 02 00    	mov bl, [d + 2]
0489+  0A0F 37          	mov bh, bl
0490+  0A10 33 03 00    	mov bl, [d + 3]
0491+  0A13 07 F9 07    	call atoi				; convert to int in AL
0492+  0A16             
0493+  0A16 E7          	pop d
0494+  0A17 E5          	pop b
0495+  0A18 F9          	leave
0496+  0A19 09          	ret
0497+  0A1A             
0498+  0A1A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0499+  0A1A             ; PRINT 8bit HEX INTEGER
0500+  0A1A             ; integer value in reg bl
0501+  0A1A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0502+  0A1A             print_u8x:
0503+  0A1A D7          	push a
0504+  0A1B DD          	push bl
0505+  0A1C             
0506+  0A1C 07 0B 08    	call itoa				; convert bl to char in A
0507+  0A1F 2F          	mov bl, al				; save al
0508+  0A20 19 00       	mov al, 0
0509+  0A22 05 03       	syscall sys_io				; display AH
0510+  0A24 24          	mov ah, bl				; retrieve al
0511+  0A25 19 00       	mov al, 0
0512+  0A27 05 03       	syscall sys_io				; display AL
0513+  0A29             
0514+  0A29 EA          	pop bl
0515+  0A2A E4          	pop a
0516+  0A2B 09          	ret
0517+  0A2C             
0518+  0A2C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0519+  0A2C             ; print 8bit decimal unsigned number
0520+  0A2C             ; input number in AL
0521+  0A2C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0522+  0A2C             print_u8d:
0523+  0A2C D7          	push a
0524+  0A2D D8          	push b
0525+  0A2E             
0526+  0A2E 22 00       	mov ah, 0
0527+  0A30 26 64 00    	mov b, 100
0528+  0A33 AE          	div a, b
0529+  0A34 D8          	push b			; save remainder
0530+  0A35 B9 00       	cmp al, 0
0531+  0A37 C6 41 0A    	je skip100
0532+  0A3A 6A 30       	add al, $30
0533+  0A3C 23          	mov ah, al
0534+  0A3D 19 00       	mov al, 0
0535+  0A3F 05 03       	syscall sys_io	; print coeff
0536+  0A41             skip100:
0537+  0A41 E4          	pop a
0538+  0A42 22 00       	mov ah, 0
0539+  0A44 26 0A 00    	mov b, 10
0540+  0A47 AE          	div a, b
0541+  0A48 D8          	push b			; save remainder
0542+  0A49 B9 00       	cmp al, 0
0543+  0A4B C6 55 0A    	je skip10
0544+  0A4E 6A 30       	add al, $30
0545+  0A50 23          	mov ah, al
0546+  0A51 19 00       	mov al, 0
0547+  0A53 05 03       	syscall sys_io	; print coeff
0548+  0A55             skip10:
0549+  0A55 E4          	pop a
0550+  0A56 1B          	mov al, bl
0551+  0A57 6A 30       	add al, $30
0552+  0A59 23          	mov ah, al
0553+  0A5A 19 00       	mov al, 0
0554+  0A5C 05 03       	syscall sys_io	; print coeff
0555+  0A5E E5          	pop b
0556+  0A5F E4          	pop a
0557+  0A60 09          	ret
0558+  0A61             
0559+  0A61             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0560+  0A61             ; INPUT 8BIT HEX INTEGER
0561+  0A61             ; read 8bit integer into AL
0562+  0A61             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0563+  0A61             scan_u8x:
0564+  0A61 F8 04 00    	enter 4
0565+  0A64 D8          	push b
0566+  0A65 DA          	push d
0567+  0A66             
0568+  0A66 FA FD FF    	lea d, [bp + -3]
0569+  0A69 07 4B 08    	call gets				; get number
0570+  0A6C             
0571+  0A6C 32          	mov bl, [d]
0572+  0A6D 37          	mov bh, bl
0573+  0A6E 33 01 00    	mov bl, [d + 1]
0574+  0A71 07 F9 07    	call atoi				; convert to int in AL
0575+  0A74             
0576+  0A74 E7          	pop d
0577+  0A75 E5          	pop b
0578+  0A76 F9          	leave
0579+  0A77 09          	ret
0580+  0A78             
0581+  0A78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0582+  0A78             ; input decimal number
0583+  0A78             ; result in A
0584+  0A78             ; 655'\0'
0585+  0A78             ; low--------high
0586+  0A78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0A78             scan_u16d:
0588+  0A78 F8 08 00    	enter 8
0589+  0A7B E2          	push si
0590+  0A7C D8          	push b
0591+  0A7D D9          	push c
0592+  0A7E DA          	push d
0593+  0A7F FA F9 FF    	lea d, [bp +- 7]
0594+  0A82 07 4B 08    	call gets
0595+  0A85 07 79 07    	call strlen			; get string length in C
0596+  0A88 7E          	dec c
0597+  0A89 FD 4E       	mov si, d
0598+  0A8B 12          	mov a, c
0599+  0A8C FD 99       	shl a
0600+  0A8E 3B E1 07    	mov d, table_power
0601+  0A91 59          	add d, a
0602+  0A92 38 00 00    	mov c, 0
0603+  0A95             mul_loop:
0604+  0A95 F6          	lodsb			; load ASCII to al
0605+  0A96 B9 00       	cmp al, 0
0606+  0A98 C6 AB 0A    	je mul_exit
0607+  0A9B 6F 30       	sub al, $30		; make into integer
0608+  0A9D 22 00       	mov ah, 0
0609+  0A9F 2A          	mov b, [d]
0610+  0AA0 AC          	mul a, b			; result in B since it fits in 16bits
0611+  0AA1 11          	mov a, b
0612+  0AA2 28          	mov b, c
0613+  0AA3 54          	add a, b
0614+  0AA4 39          	mov c, a
0615+  0AA5 63 02 00    	sub d, 2
0616+  0AA8 0A 95 0A    	jmp mul_loop
0617+  0AAB             mul_exit:
0618+  0AAB 12          	mov a, c
0619+  0AAC E7          	pop d
0620+  0AAD E6          	pop c
0621+  0AAE E5          	pop b
0622+  0AAF EF          	pop si
0623+  0AB0 F9          	leave
0624+  0AB1 09          	ret
0013   0AB2             .include "ctype.asm"
0001+  0AB2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0AB2             ; ctype.s
0003+  0AB2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0AB2             
0005+  0AB2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0AB2             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0AB2             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0AB2             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0AB2             ;; characters are supported.
0010+  0AB2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0AB2             ;; isalnum 
0012+  0AB2             ;; isalpha 
0013+  0AB2             ;; islower 
0014+  0AB2             ;; isupper 
0015+  0AB2             ;; isdigit 
0016+  0AB2             ;; isxdigit
0017+  0AB2             ;; iscntrl 
0018+  0AB2             ;; isgraph 
0019+  0AB2             ;; isspace 
0020+  0AB2             ;; isblank 
0021+  0AB2             ;; isprint 
0022+  0AB2             ;; ispunct 
0023+  0AB2             ;; tolower 
0024+  0AB2             ;; toupper
0025+  0AB2             
0026+  0AB2             
0027+  0AB2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0AB2             ;; IS ALPHANUMERIC
0029+  0AB2             ;; sets ZF according with result
0030+  0AB2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0AB2             isalnum:
0032+  0AB2 07 CF 0A    	call isalpha
0033+  0AB5 C6 BB 0A    	je isalnum_exit
0034+  0AB8 07 BC 0A    	call isdigit
0035+  0ABB             isalnum_exit:
0036+  0ABB 09          	ret	
0037+  0ABC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0ABC             ;; IS DIGIT
0039+  0ABC             ;; sets ZF according with result
0040+  0ABC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0ABC             isdigit:
0042+  0ABC DB          	push al
0043+  0ABD B9 30       	cmp al, '0'
0044+  0ABF C8 CB 0A    	jlu isdigit_false
0045+  0AC2 B9 39       	cmp al, '9'
0046+  0AC4 D1 CB 0A    	jgu isdigit_false
0047+  0AC7 87 00       	and al, 0	; set ZF
0048+  0AC9 E8          	pop al
0049+  0ACA 09          	ret
0050+  0ACB             isdigit_false:
0051+  0ACB 8B 01       	or al, 1	; clear ZF
0052+  0ACD E8          	pop al
0053+  0ACE 09          	ret	
0054+  0ACF             	
0055+  0ACF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0ACF             ;; IS ALPHA
0057+  0ACF             ;; sets ZF according with result
0058+  0ACF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0ACF             isalpha:
0060+  0ACF DB          	push al
0061+  0AD0 B9 5F       	cmp al, '_'
0062+  0AD2 C6 F2 0A    	je isalpha_true
0063+  0AD5 B9 2E       	cmp al, '.'
0064+  0AD7 C6 F2 0A    	je isalpha_true
0065+  0ADA B9 41       	cmp al, 'A'
0066+  0ADC C8 EE 0A    	jlu isalpha_false
0067+  0ADF B9 7A       	cmp al, 'z'
0068+  0AE1 D1 EE 0A    	jgu isalpha_false
0069+  0AE4 B9 5A       	cmp al, 'Z'
0070+  0AE6 D0 F2 0A    	jleu isalpha_true
0071+  0AE9 B9 61       	cmp al, 'a'
0072+  0AEB C9 F2 0A    	jgeu isalpha_true
0073+  0AEE             isalpha_false:
0074+  0AEE 8B 01       	or al, 1	; clear ZF
0075+  0AF0 E8          	pop al
0076+  0AF1 09          	ret
0077+  0AF2             isalpha_true:
0078+  0AF2 87 00       	and al, 0	; set ZF
0079+  0AF4 E8          	pop al
0080+  0AF5 09          	ret
0081+  0AF6             
0082+  0AF6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0AF6             ;; IS PATH-ALPHA
0084+  0AF6             ;; sets ZF according with result
0085+  0AF6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0AF6             ispath:
0087+  0AF6 DB          	push al
0088+  0AF7 07 BC 0A    	call isdigit
0089+  0AFA C6 24 0B    	je ispath_true
0090+  0AFD B9 5F       	cmp al, '_'
0091+  0AFF C6 24 0B    	je ispath_true
0092+  0B02 B9 2F       	cmp al, '/'
0093+  0B04 C6 24 0B    	je ispath_true
0094+  0B07 B9 2E       	cmp al, '.'
0095+  0B09 C6 24 0B    	je ispath_true
0096+  0B0C B9 41       	cmp al, 'A'
0097+  0B0E C8 20 0B    	jlu ispath_false
0098+  0B11 B9 7A       	cmp al, 'z'
0099+  0B13 D1 20 0B    	jgu ispath_false
0100+  0B16 B9 5A       	cmp al, 'Z'
0101+  0B18 D0 24 0B    	jleu ispath_true
0102+  0B1B B9 61       	cmp al, 'a'
0103+  0B1D C9 24 0B    	jgeu ispath_true
0104+  0B20             ispath_false:
0105+  0B20 8B 01       	or al, 1	; clear ZF
0106+  0B22 E8          	pop al
0107+  0B23 09          	ret
0108+  0B24             ispath_true:
0109+  0B24 87 00       	and al, 0	; set ZF
0110+  0B26 E8          	pop al
0111+  0B27 09          	ret
0112+  0B28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B28             ;; IS SPACE
0114+  0B28             ;; sets ZF according with result
0115+  0B28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B28             isspace:
0117+  0B28 B9 20       	cmp al, $20		; ' '
0118+  0B2A C6 3E 0B    	je isspace_exit
0119+  0B2D B9 09       	cmp al, $09		; '\t'
0120+  0B2F C6 3E 0B    	je isspace_exit
0121+  0B32 B9 0A       	cmp al, $0A		; '\n'
0122+  0B34 C6 3E 0B    	je isspace_exit
0123+  0B37 B9 0D       	cmp al, $0D		; '\r'
0124+  0B39 C6 3E 0B    	je isspace_exit
0125+  0B3C B9 0B       	cmp al, $0B		; '\v'
0126+  0B3E             isspace_exit:
0127+  0B3E 09          	ret	
0128+  0B3F             
0129+  0B3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B3F             ; TO LOWER
0131+  0B3F             ; input in AL
0132+  0B3F             ; output in AL
0133+  0B3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B3F             to_lower:
0135+  0B3F B9 5A       	cmp al, 'Z'
0136+  0B41 D1 46 0B    	jgu to_lower_ret
0137+  0B44 6A 20       	add al, $20				; convert to lower case
0138+  0B46             to_lower_ret:
0139+  0B46 09          	ret
0140+  0B47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B47             ; TO UPPER
0142+  0B47             ; input in AL
0143+  0B47             ; output in AL
0144+  0B47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B47             to_upper:
0146+  0B47 B9 61       	cmp al, 'a'
0147+  0B49 C8 4E 0B    	jlu to_upper_ret
0148+  0B4C 6F 20       	sub al, $20			; convert to upper case
0149+  0B4E             to_upper_ret:
0150+  0B4E 09          	ret
0151+  0B4F             
0014   0B4F             
0015   0B4F             .end
0016   0B4F             
0017   0B4F             
tasm: Number of errors = 0
