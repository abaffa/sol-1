0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005   0000             
0006   0400             .org PROC_TEXT_ORG			; origin at 1024
0007   0400             
0008   0400             cmd_clear:
0009   0400 3B DD 07    	mov d, s_telnet_clear
0010   0403 07 82 09    	call puts
0011   0406             
0012   0406 05 0B       	syscall sys_terminate_proc
0013   0408             
0014   0408             .include "token.asm"
0001+  0408             TOKTYP_IDENTIFIER	.equ 0
0002+  0408             TOKTYP_KEYWORD		.equ 1
0003+  0408             TOKTYP_DELIMITER	.equ 2
0004+  0408             TOKTYP_STRING		.equ 3
0005+  0408             TOKTYP_CHAR			.equ 4
0006+  0408             TOKTYP_NUMERIC		.equ 5
0007+  0408             TOKTYP_END			.equ 6
0008+  0408             
0009+  0408             TOK_NULL			.equ 0
0010+  0408             TOK_FSLASH			.equ 1
0011+  0408             TOK_TIMES 			.equ 2
0012+  0408             TOK_PLUS 			.equ 3
0013+  0408             TOK_MINUS 			.equ 4
0014+  0408             TOK_DOT				.equ 5
0015+  0408             TOK_SEMI			.equ 6
0016+  0408             TOK_ANGLE			.equ 7
0017+  0408             TOK_TILDE			.equ 8
0018+  0408             TOK_EQUAL			.equ 9
0019+  0408             TOK_COLON			.equ 10
0020+  0408             TOK_COMMA			.equ 11
0021+  0408             
0022+  0408             TOK_END				.equ 20
0023+  0408             
0024+  0408             
0025+  0408             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0408             ;; read a full command argment from shell input buffer
0027+  0408             ;; argument is written into tokstr
0028+  0408             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  0408             get_arg:
0030+  0408 D7          	push a
0031+  0409 E2          	push si
0032+  040A E3          	push di
0033+  040B 19 00       	mov al, 0
0034+  040D 3D 36 06    	mov [tokstr], al			; nullify tokstr string
0035+  0410 14 32 06    	mov a, [prog]
0036+  0413 4D          	mov si, a
0037+  0414 FD 4F 36 06 	mov di, tokstr
0038+  0418             get_arg_skip_spaces:
0039+  0418 F6          	lodsb
0040+  0419 07 2C 0B    	call isspace
0041+  041C C6 18 04    	je get_arg_skip_spaces
0042+  041F             get_arg_L0:
0043+  041F B9 3B       	cmp al, $3B				; check if is ';'
0044+  0421 C6 2E 04    	je get_arg_end
0045+  0424 B9 00       	cmp al, 0
0046+  0426 C6 2E 04    	je get_arg_end			; check if end of input
0047+  0429 F7          	stosb
0048+  042A F6          	lodsb
0049+  042B 0A 1F 04    	jmp get_arg_L0
0050+  042E             get_arg_end:
0051+  042E 19 00       	mov al, 0
0052+  0430 F7          	stosb
0053+  0431 D5 01 00    	sub si, 1
0054+  0434 4E          	mov a, si
0055+  0435 42 32 06    	mov [prog], a		; update pointer
0056+  0438 F0          	pop di
0057+  0439 EF          	pop si
0058+  043A E4          	pop a
0059+  043B 09          	ret
0060+  043C             
0061+  043C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  043C             ;; read a path formation from shell input buffer
0063+  043C             ;; path is written into tokstr
0064+  043C             ;; /usr/bin
0065+  043C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  043C             get_path:
0067+  043C D7          	push a
0068+  043D E2          	push si
0069+  043E E3          	push di
0070+  043F 19 00       	mov al, 0
0071+  0441 3D 36 06    	mov [tokstr], al			; nullify tokstr string
0072+  0444 14 32 06    	mov a, [prog]
0073+  0447 4D          	mov si, a
0074+  0448 FD 4F 36 06 	mov di, tokstr
0075+  044C             get_path_skip_spaces:
0076+  044C F6          	lodsb
0077+  044D 07 2C 0B    	call isspace
0078+  0450 C6 4C 04    	je get_path_skip_spaces
0079+  0453             get_path_is_pathchar:
0080+  0453 F7          	stosb
0081+  0454 F6          	lodsb
0082+  0455 07 B6 0A    	call isalnum			;check if is alphanumeric
0083+  0458 C6 53 04    	je get_path_is_pathchar
0084+  045B B9 2F       	cmp al, '/'				; check if is '/'
0085+  045D C6 53 04    	je get_path_is_pathchar
0086+  0460 19 00       	mov al, 0
0087+  0462 F7          	stosb
0088+  0463 D5 01 00    	sub si, 1
0089+  0466 4E          	mov a, si
0090+  0467 42 32 06    	mov [prog], a		; update pointer
0091+  046A             get_path_end:
0092+  046A F0          	pop di
0093+  046B EF          	pop si
0094+  046C E4          	pop a
0095+  046D 09          	ret
0096+  046E             
0097+  046E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  046E             ;; read a line
0099+  046E             ;; line is written into tokstr
0100+  046E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  046E             get_line:
0102+  046E D7          	push a
0103+  046F E2          	push si
0104+  0470 E3          	push di
0105+  0471 19 00       	mov al, 0
0106+  0473 3D 36 06    	mov [tokstr], al			; nullify tokstr string
0107+  0476 14 32 06    	mov a, [prog]
0108+  0479 4D          	mov si, a
0109+  047A FD 4F 36 06 	mov di, tokstr
0110+  047E             get_line_L0:
0111+  047E F6          	lodsb
0112+  047F B9 0A       	cmp al, $0A		; check for new line
0113+  0481 C6 88 04    	je get_line_exit
0114+  0484 F7          	stosb
0115+  0485 0A 7E 04    	jmp get_line_L0
0116+  0488             get_line_exit:
0117+  0488 19 00       	mov al, 0
0118+  048A F7          	stosb
0119+  048B 4E          	mov a, si
0120+  048C 42 32 06    	mov [prog], a		; update pointer
0121+  048F F0          	pop di
0122+  0490 EF          	pop si
0123+  0491 E4          	pop a
0124+  0492 09          	ret
0125+  0493             
0126+  0493             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0493             ;; token parser
0128+  0493             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0493             get_token:
0130+  0493 D7          	push a
0131+  0494 DA          	push d
0132+  0495 E2          	push si
0133+  0496 E3          	push di
0134+  0497 19 00       	mov al, 0
0135+  0499 3D 36 06    	mov [tokstr], al			; nullify tokstr string
0136+  049C 19 00       	mov al, TOK_NULL
0137+  049E 3D 35 06    	mov [tok], al				; nullify token
0138+  04A1 14 32 06    	mov a, [prog]
0139+  04A4 4D          	mov si, a
0140+  04A5 FD 4F 36 06 	mov di, tokstr
0141+  04A9             get_tok_skip_spaces:
0142+  04A9 F6          	lodsb
0143+  04AA 07 2C 0B    	call isspace
0144+  04AD C6 A9 04    	je get_tok_skip_spaces
0145+  04B0 B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  04B2 C6 97 05    	je get_token_end
0147+  04B5 B9 23       	cmp al, '#'			; comments!
0148+  04B7 C6 C5 05    	je get_tok_comment
0149+  04BA 07 B6 0A    	call isalnum
0150+  04BD C6 A4 05    	jz is_alphanumeric
0151+  04C0             ; other token types
0152+  04C0             get_token_slash:
0153+  04C0 B9 2F       	cmp al, '/'				; check if '/'
0154+  04C2 C7 DA 04    	jne get_token_minus
0155+  04C5 F7          	stosb					; store '/' into token string
0156+  04C6 19 00       	mov al, 0
0157+  04C8 F7          	stosb					; terminate token string
0158+  04C9 19 01       	mov al, TOK_FSLASH
0159+  04CB 3D 35 06    	mov [tok], al			
0160+  04CE 19 02       	mov al, TOKTYP_DELIMITER
0161+  04D0 3D 34 06    	mov [toktyp], al
0162+  04D3 4E          	mov a, si
0163+  04D4 42 32 06    	mov [prog], a		; update pointer
0164+  04D7 0A C0 05    	jmp get_token_return
0165+  04DA             get_token_minus:
0166+  04DA B9 2D       	cmp al, '-'				; check if '-'
0167+  04DC C7 F4 04    	jne get_token_comma
0168+  04DF F7          	stosb					; store '-' into token string
0169+  04E0 19 00       	mov al, 0
0170+  04E2 F7          	stosb					; terminate token string
0171+  04E3 19 04       	mov al, TOK_MINUS
0172+  04E5 3D 35 06    	mov [tok], al			
0173+  04E8 19 02       	mov al, TOKTYP_DELIMITER
0174+  04EA 3D 34 06    	mov [toktyp], al
0175+  04ED 4E          	mov a, si
0176+  04EE 42 32 06    	mov [prog], a		; update pointer
0177+  04F1 0A C0 05    	jmp get_token_return
0178+  04F4             get_token_comma:
0179+  04F4 B9 2C       	cmp al, ','				; check if ','
0180+  04F6 C7 0E 05    	jne get_token_semi
0181+  04F9 F7          	stosb					; store ',' into token string
0182+  04FA 19 00       	mov al, 0
0183+  04FC F7          	stosb					; terminate token string
0184+  04FD 19 0B       	mov al, TOK_COMMA
0185+  04FF 3D 35 06    	mov [tok], al			
0186+  0502 19 02       	mov al, TOKTYP_DELIMITER
0187+  0504 3D 34 06    	mov [toktyp], al
0188+  0507 4E          	mov a, si
0189+  0508 42 32 06    	mov [prog], a		; update pointer
0190+  050B 0A C0 05    	jmp get_token_return
0191+  050E             get_token_semi:
0192+  050E B9 3B       	cmp al, $3B				; check if ';'
0193+  0510 C7 28 05    	jne get_token_colon
0194+  0513 F7          	stosb					; store ';' into token string
0195+  0514 19 00       	mov al, 0
0196+  0516 F7          	stosb					; terminate token string
0197+  0517 19 06       	mov al, TOK_SEMI
0198+  0519 3D 35 06    	mov [tok], al			
0199+  051C 19 02       	mov al, TOKTYP_DELIMITER
0200+  051E 3D 34 06    	mov [toktyp], al
0201+  0521 4E          	mov a, si
0202+  0522 42 32 06    	mov [prog], a		; update pointer
0203+  0525 0A C0 05    	jmp get_token_return
0204+  0528             get_token_colon:
0205+  0528 B9 3A       	cmp al, $3A				; check if ':'
0206+  052A C7 42 05    	jne get_token_angle
0207+  052D F7          	stosb					; store ':' into token string
0208+  052E 19 00       	mov al, 0
0209+  0530 F7          	stosb					; terminate token string
0210+  0531 19 0A       	mov al, TOK_COLON
0211+  0533 3D 35 06    	mov [tok], al			
0212+  0536 19 02       	mov al, TOKTYP_DELIMITER
0213+  0538 3D 34 06    	mov [toktyp], al
0214+  053B 4E          	mov a, si
0215+  053C 42 32 06    	mov [prog], a		; update pointer
0216+  053F 0A C0 05    	jmp get_token_return
0217+  0542             get_token_angle:
0218+  0542 B9 3E       	cmp al, $3E				; check if '>'
0219+  0544 C7 5C 05    	jne get_token_tilde
0220+  0547 F7          	stosb					; store '>' into token string
0221+  0548 19 00       	mov al, 0
0222+  054A F7          	stosb					; terminate token string
0223+  054B 19 07       	mov al, TOK_ANGLE
0224+  054D 3D 35 06    	mov [tok], al			
0225+  0550 19 02       	mov al, TOKTYP_DELIMITER
0226+  0552 3D 34 06    	mov [toktyp], al
0227+  0555 4E          	mov a, si
0228+  0556 42 32 06    	mov [prog], a		; update pointer
0229+  0559 0A C0 05    	jmp get_token_return
0230+  055C             get_token_tilde:
0231+  055C B9 7E       	cmp al, '~'				; check if '~'
0232+  055E C7 76 05    	jne get_token_equal
0233+  0561 F7          	stosb					; store '~' into token string
0234+  0562 19 00       	mov al, 0
0235+  0564 F7          	stosb					; terminate token string
0236+  0565 19 08       	mov al, TOK_TILDE
0237+  0567 3D 35 06    	mov [tok], al			
0238+  056A 19 02       	mov al, TOKTYP_DELIMITER
0239+  056C 3D 34 06    	mov [toktyp], al
0240+  056F 4E          	mov a, si
0241+  0570 42 32 06    	mov [prog], a		; update pointer
0242+  0573 0A C0 05    	jmp get_token_return
0243+  0576             get_token_equal:
0244+  0576 B9 3D       	cmp al, '='				; check if '='
0245+  0578 C7 90 05    	jne get_token_skip
0246+  057B F7          	stosb					; store '=' into token string
0247+  057C 19 00       	mov al, 0
0248+  057E F7          	stosb					; terminate token string
0249+  057F 19 09       	mov al, TOK_EQUAL
0250+  0581 3D 35 06    	mov [tok], al			
0251+  0584 19 02       	mov al, TOKTYP_DELIMITER
0252+  0586 3D 34 06    	mov [toktyp], al
0253+  0589 4E          	mov a, si
0254+  058A 42 32 06    	mov [prog], a		; update pointer
0255+  058D 0A C0 05    	jmp get_token_return
0256+  0590             get_token_skip:
0257+  0590 4E          	mov a, si
0258+  0591 42 32 06    	mov [prog], a		; update pointer
0259+  0594 0A C0 05    	jmp get_token_return
0260+  0597             get_token_end:				; end of file token
0261+  0597 19 14       	mov al, TOK_END
0262+  0599 3D 35 06    	mov [tok], al
0263+  059C 19 06       	mov al, TOKTYP_END
0264+  059E 3D 34 06    	mov [toktyp], al
0265+  05A1 0A C0 05    	jmp get_token_return
0266+  05A4             is_alphanumeric:
0267+  05A4 F7          	stosb
0268+  05A5 F6          	lodsb
0269+  05A6 07 B6 0A    	call isalnum			;check if is alphanumeric
0270+  05A9 C6 A4 05    	jz is_alphanumeric
0271+  05AC B9 2E       	cmp al, $2E				; check if is '.'
0272+  05AE C6 A4 05    	je is_alphanumeric
0273+  05B1 19 00       	mov al, 0
0274+  05B3 F7          	stosb
0275+  05B4 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  05B6 3D 34 06    	mov [toktyp], al
0277+  05B9 D5 01 00    	sub si, 1
0278+  05BC 4E          	mov a, si
0279+  05BD 42 32 06    	mov [prog], a		; update pointer
0280+  05C0             get_token_return:
0281+  05C0 F0          	pop di
0282+  05C1 EF          	pop si
0283+  05C2 E7          	pop d
0284+  05C3 E4          	pop a
0285+  05C4 09          	ret
0286+  05C5             get_tok_comment:
0287+  05C5 F6          	lodsb
0288+  05C6 B9 0A       	cmp al, $0A			; new line
0289+  05C8 C7 C5 05    	jne get_tok_comment
0290+  05CB 0A A9 04    	jmp get_tok_skip_spaces
0291+  05CE             
0292+  05CE             
0293+  05CE             get_number:
0294+  05CE D7          	push a
0295+  05CF DA          	push d
0296+  05D0 E2          	push si
0297+  05D1 E3          	push di
0298+  05D2 19 00       	mov al, 0
0299+  05D4 3D 36 06    	mov [tokstr], al			; nullify tokstr string
0300+  05D7 19 00       	mov al, TOK_NULL
0301+  05D9 3D 35 06    	mov [tok], al				; nullify token
0302+  05DC 14 32 06    	mov a, [prog]
0303+  05DF 4D          	mov si, a
0304+  05E0 FD 4F 36 06 	mov di, tokstr
0305+  05E4             get_number_skip_spaces:
0306+  05E4 F6          	lodsb
0307+  05E5 07 2C 0B    	call isspace
0308+  05E8 C6 E4 05    	je get_number_skip_spaces
0309+  05EB B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  05ED C7 FD 05    	jne get_number_L0
0311+  05F0 19 14       	mov al, TOK_END
0312+  05F2 3D 35 06    	mov [tok], al
0313+  05F5 19 06       	mov al, TOKTYP_END
0314+  05F7 3D 34 06    	mov [toktyp], al
0315+  05FA 0A 14 06    	jmp get_number_return
0316+  05FD             get_number_L0:
0317+  05FD F7          	stosb
0318+  05FE F6          	lodsb
0319+  05FF 07 C0 0A    	call isdigit			;check if is numeric
0320+  0602 C6 FD 05    	jz get_number_L0
0321+  0605 19 00       	mov al, 0
0322+  0607 F7          	stosb
0323+  0608 19 05       	mov al, TOKTYP_NUMERIC
0324+  060A 3D 34 06    	mov [toktyp], al
0325+  060D D5 01 00    	sub si, 1
0326+  0610 4E          	mov a, si
0327+  0611 42 32 06    	mov [prog], a		; update pointer
0328+  0614             get_number_return:
0329+  0614 F0          	pop di
0330+  0615 EF          	pop si
0331+  0616 E7          	pop d
0332+  0617 E4          	pop a
0333+  0618 09          	ret
0334+  0619             
0335+  0619             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0619             ;; PUT BACK TOKEN
0337+  0619             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  0619             putback:
0339+  0619 D7          	push a
0340+  061A E2          	push si
0341+  061B FD 4D 36 06 	mov si, tokstr	
0342+  061F             putback_loop:
0343+  061F F6          	lodsb
0344+  0620 B9 00       	cmp al, 0
0345+  0622 C6 2F 06    	je putback_end
0346+  0625 14 32 06    	mov a, [prog]
0347+  0628 7D          	dec a
0348+  0629 42 32 06    	mov [prog], a			; update pointer
0349+  062C 0A 1F 06    	jmp putback_loop
0350+  062F             putback_end:
0351+  062F EF          	pop si
0352+  0630 E4          	pop a
0353+  0631 09          	ret
0354+  0632             
0355+  0632             
0356+  0632             
0357+  0632             
0358+  0632 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  0634             
0360+  0634 00          toktyp: 	.db 0			; token type symbol
0361+  0635 00          tok:		.db 0			; current token symbol
0362+  0636 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  063A 00 00 00 00 
0362+  063E 00 00 00 00 
0362+  0642 00 00 00 00 
0362+  0646 00 00 00 00 
0362+  064A 00 00 00 00 
0362+  064E 00 00 00 00 
0362+  0652 00 00 00 00 
0362+  0656 00 00 00 00 
0362+  065A 00 00 00 00 
0362+  065E 00 00 00 00 
0362+  0662 00 00 00 00 
0362+  0666 00 00 00 00 
0362+  066A 00 00 00 00 
0362+  066E 00 00 00 00 
0362+  0672 00 00 00 00 
0362+  0676 00 00 00 00 
0362+  067A 00 00 00 00 
0362+  067E 00 00 00 00 
0362+  0682 00 00 00 00 
0362+  0686 00 00 00 00 
0362+  068A 00 00 00 00 
0362+  068E 00 00 00 00 
0362+  0692 00 00 00 00 
0362+  0696 00 00 00 00 
0362+  069A 00 00 00 00 
0362+  069E 00 00 00 00 
0362+  06A2 00 00 00 00 
0362+  06A6 00 00 00 00 
0362+  06AA 00 00 00 00 
0362+  06AE 00 00 00 00 
0362+  06B2 00 00 00 00 
0362+  06B6 00 00 00 00 
0362+  06BA 00 00 00 00 
0362+  06BE 00 00 00 00 
0362+  06C2 00 00 00 00 
0362+  06C6 00 00 00 00 
0362+  06CA 00 00 00 00 
0362+  06CE 00 00 00 00 
0362+  06D2 00 00 00 00 
0362+  06D6 00 00 00 00 
0362+  06DA 00 00 00 00 
0362+  06DE 00 00 00 00 
0362+  06E2 00 00 00 00 
0362+  06E6 00 00 00 00 
0362+  06EA 00 00 00 00 
0362+  06EE 00 00 00 00 
0362+  06F2 00 00 00 00 
0362+  06F6 00 00 00 00 
0362+  06FA 00 00 00 00 
0362+  06FE 00 00 00 00 
0362+  0702 00 00 00 00 
0362+  0706 00 00 00 00 
0362+  070A 00 00 00 00 
0362+  070E 00 00 00 00 
0362+  0712 00 00 00 00 
0362+  0716 00 00 00 00 
0362+  071A 00 00 00 00 
0362+  071E 00 00 00 00 
0362+  0722 00 00 00 00 
0362+  0726 00 00 00 00 
0362+  072A 00 00 00 00 
0362+  072E 00 00 00 00 
0362+  0732 00 00 00 00 
0015   0736             .include "stdio.asm"
0001+  0736             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0736             ; stdio.s
0003+  0736             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0736             .include "string.asm"
0001++ 0736             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0736             ; string.s
0003++ 0736             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0736             
0005++ 0736             
0006++ 0736             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0736             ; strrev
0008++ 0736             ; reverse a string
0009++ 0736             ; D = string address
0010++ 0736             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0736             ; 01234
0012++ 0736             strrev:
0013++ 0736 4B          	pusha
0014++ 0737 07 7D 07    	call strlen	; length in C
0015++ 073A 12          	mov a, c
0016++ 073B AF 01 00    	cmp a, 1
0017++ 073E D0 58 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0741 7D          	dec a
0019++ 0742 FD 4E       	mov si, d	; beginning of string
0020++ 0744 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0746 59          	add d, a	; end of string
0022++ 0747 12          	mov a, c
0023++ 0748 FD 9B       	shr a		; divide by 2
0024++ 074A 39          	mov c, a	; C now counts the steps
0025++ 074B             strrev_L0:
0026++ 074B 32          	mov bl, [d]	; save load right-side char into BL
0027++ 074C F6          	lodsb		; load left-side char into AL; increase SI
0028++ 074D 3E          	mov [d], al	; store left char into right side
0029++ 074E 1B          	mov al, bl
0030++ 074F F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0750 7E          	dec c
0032++ 0751 7F          	dec d
0033++ 0752 C2 00 00    	cmp c, 0
0034++ 0755 C7 4B 07    	jne strrev_L0
0035++ 0758             strrev_end:
0036++ 0758 4C          	popa
0037++ 0759 09          	ret
0038++ 075A             	
0039++ 075A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 075A             ; strchr
0041++ 075A             ; search string in D for char in AL
0042++ 075A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 075A             strchr:
0044++ 075A             strchr_L0:
0045++ 075A 32          	mov bl, [d]
0046++ 075B C1 00       	cmp bl, 0
0047++ 075D C6 68 07    	je strchr_end
0048++ 0760 BA          	cmp al, bl
0049++ 0761 C6 68 07    	je strchr_end
0050++ 0764 79          	inc d
0051++ 0765 0A 5A 07    	jmp strchr_L0
0052++ 0768             strchr_end:
0053++ 0768 1B          	mov al, bl
0054++ 0769 09          	ret
0055++ 076A             
0056++ 076A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 076A             ; strstr
0058++ 076A             ; find sub-string
0059++ 076A             ; str1 in SI
0060++ 076A             ; str2 in DI
0061++ 076A             ; SI points to end of source string
0062++ 076A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 076A             strstr:
0064++ 076A DB          	push al
0065++ 076B DA          	push d
0066++ 076C E3          	push di
0067++ 076D             strstr_loop:
0068++ 076D F3          	cmpsb					; compare a byte of the strings
0069++ 076E C7 79 07    	jne strstr_ret
0070++ 0771 FC 00 00    	lea d, [di + 0]
0071++ 0774 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0776 C7 6D 07    	jne strstr_loop				; equal chars but not at end
0073++ 0779             strstr_ret:
0074++ 0779 F0          	pop di
0075++ 077A E7          	pop d
0076++ 077B E8          	pop al
0077++ 077C 09          	ret
0078++ 077D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 077D             ; length of null terminated string
0080++ 077D             ; result in C
0081++ 077D             ; pointer in D
0082++ 077D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 077D             strlen:
0084++ 077D DA          	push d
0085++ 077E 38 00 00    	mov c, 0
0086++ 0781             strlen_L1:
0087++ 0781 BD 00       	cmp byte [d], 0
0088++ 0783 C6 8B 07    	je strlen_ret
0089++ 0786 79          	inc d
0090++ 0787 78          	inc c
0091++ 0788 0A 81 07    	jmp strlen_L1
0092++ 078B             strlen_ret:
0093++ 078B E7          	pop d
0094++ 078C 09          	ret
0095++ 078D             
0096++ 078D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 078D             ; STRCMP
0098++ 078D             ; compare two strings
0099++ 078D             ; str1 in SI
0100++ 078D             ; str2 in DI
0101++ 078D             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 078D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 078D             strcmp:
0104++ 078D DB          	push al
0105++ 078E DA          	push d
0106++ 078F E3          	push di
0107++ 0790 E2          	push si
0108++ 0791             strcmp_loop:
0109++ 0791 F3          	cmpsb					; compare a byte of the strings
0110++ 0792 C7 9D 07    	jne strcmp_ret
0111++ 0795 FB FF FF    	lea d, [si +- 1]
0112++ 0798 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 079A C7 91 07    	jne strcmp_loop				; equal chars but not at end
0114++ 079D             strcmp_ret:
0115++ 079D EF          	pop si
0116++ 079E F0          	pop di
0117++ 079F E7          	pop d
0118++ 07A0 E8          	pop al
0119++ 07A1 09          	ret
0120++ 07A2             
0121++ 07A2             
0122++ 07A2             ; STRCPY
0123++ 07A2             ; copy null terminated string from SI to DI
0124++ 07A2             ; source in SI
0125++ 07A2             ; destination in DI
0126++ 07A2             strcpy:
0127++ 07A2 E2          	push si
0128++ 07A3 E3          	push di
0129++ 07A4 DB          	push al
0130++ 07A5             strcpy_L1:
0131++ 07A5 F6          	lodsb
0132++ 07A6 F7          	stosb
0133++ 07A7 B9 00       	cmp al, 0
0134++ 07A9 C7 A5 07    	jne strcpy_L1
0135++ 07AC             strcpy_end:
0136++ 07AC E8          	pop al
0137++ 07AD F0          	pop di
0138++ 07AE EF          	pop si
0139++ 07AF 09          	ret
0140++ 07B0             
0141++ 07B0             ; STRCAT
0142++ 07B0             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07B0             ; source in SI
0144++ 07B0             ; destination in DI
0145++ 07B0             strcat:
0146++ 07B0 E2          	push si
0147++ 07B1 E3          	push di
0148++ 07B2 D7          	push a
0149++ 07B3 DA          	push d
0150++ 07B4 50          	mov a, di
0151++ 07B5 3C          	mov d, a
0152++ 07B6             strcat_goto_end_L1:
0153++ 07B6 BD 00       	cmp byte[d], 0
0154++ 07B8 C6 BF 07    	je strcat_start
0155++ 07BB 79          	inc d
0156++ 07BC 0A B6 07    	jmp strcat_goto_end_L1
0157++ 07BF             strcat_start:
0158++ 07BF FD 50       	mov di, d
0159++ 07C1             strcat_L1:
0160++ 07C1 F6          	lodsb
0161++ 07C2 F7          	stosb
0162++ 07C3 B9 00       	cmp al, 0
0163++ 07C5 C7 C1 07    	jne strcat_L1
0164++ 07C8             strcat_end:
0165++ 07C8 E7          	pop d
0166++ 07C9 E4          	pop a
0167++ 07CA F0          	pop di
0168++ 07CB EF          	pop si
0169++ 07CC 09          	ret
0005+  07CD             
0006+  07CD 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  07D1 34 35 36 37 
0006+  07D5 38 39 41 42 
0006+  07D9 43 44 45 46 
0007+  07DD 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  07E1 1B 5B 48 00 
0008+  07E5             
0009+  07E5 01 00       table_power:.dw 1
0010+  07E7 0A 00       			.dw 10
0011+  07E9 64 00       			.dw 100
0012+  07EB E8 03       			.dw 1000
0013+  07ED 10 27       			.dw 10000
0014+  07EF             
0015+  07EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  07EF             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  07EF             ; ASCII in BL
0018+  07EF             ; result in AL
0019+  07EF             ; ascii for F = 0100 0110
0020+  07EF             ; ascii for 9 = 0011 1001
0021+  07EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  07EF             hex_ascii_encode:
0023+  07EF 1B          	mov al, bl
0024+  07F0 93 40       	test al, $40				; test if letter or number
0025+  07F2 C7 F8 07    	jnz hex_letter
0026+  07F5 87 0F       	and al, $0F				; get number
0027+  07F7 09          	ret
0028+  07F8             hex_letter:
0029+  07F8 87 0F       	and al, $0F				; get letter
0030+  07FA 6A 09       	add al, 9
0031+  07FC 09          	ret
0032+  07FD             
0033+  07FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  07FD             ; ATOI
0035+  07FD             ; 2 letter hex string in B
0036+  07FD             ; 8bit integer returned in AL
0037+  07FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  07FD             atoi:
0039+  07FD D8          	push b
0040+  07FE 07 EF 07    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0801 30          	mov bl, bh
0042+  0802 DB          	push al					; save a
0043+  0803 07 EF 07    	call hex_ascii_encode
0044+  0806 EA          	pop bl	
0045+  0807 FD 9E 04    	shl al, 4
0046+  080A 8C          	or al, bl
0047+  080B E5          	pop b
0048+  080C 09          	ret	
0049+  080D             
0050+  080D             
0051+  080D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  080D             ; printf
0053+  080D             ; no need for explanations!
0054+  080D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  080D             printf:
0056+  080D 09          	ret
0057+  080E             
0058+  080E             
0059+  080E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  080E             ; scanf
0061+  080E             ; no need for explanations!
0062+  080E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  080E             scanf:
0064+  080E 09          	ret
0065+  080F             
0066+  080F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  080F             ; ITOA
0068+  080F             ; 8bit value in BL
0069+  080F             ; 2 byte ASCII result in A
0070+  080F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  080F             itoa:
0072+  080F DA          	push d
0073+  0810 D8          	push b
0074+  0811 A7 00       	mov bh, 0
0075+  0813 FD A4 04    	shr bl, 4	
0076+  0816 74          	mov d, b
0077+  0817 1F CD 07    	mov al, [d + s_hex_digits]
0078+  081A 23          	mov ah, al
0079+  081B             	
0080+  081B E5          	pop b
0081+  081C D8          	push b
0082+  081D A7 00       	mov bh, 0
0083+  081F FD 87 0F    	and bl, $0F
0084+  0822 74          	mov d, b
0085+  0823 1F CD 07    	mov al, [d + s_hex_digits]
0086+  0826 E5          	pop b
0087+  0827 E7          	pop d
0088+  0828 09          	ret
0089+  0829             
0090+  0829             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0829             ; HEX STRING TO BINARY
0092+  0829             ; di = destination address
0093+  0829             ; si = source
0094+  0829             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0829             hex_to_int:
0096+  0829             hex_to_int_L1:
0097+  0829 F6          	lodsb					; load from [SI] to AL
0098+  082A B9 00       	cmp al, 0				; check if ASCII 0
0099+  082C C6 39 08    	jz hex_to_int_ret
0100+  082F 36          	mov bh, al
0101+  0830 F6          	lodsb
0102+  0831 2F          	mov bl, al
0103+  0832 07 FD 07    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0835 F7          	stosb					; store AL to [DI]
0105+  0836 0A 29 08    	jmp hex_to_int_L1
0106+  0839             hex_to_int_ret:
0107+  0839 09          	ret		
0108+  083A             
0109+  083A             
0110+  083A             
0111+  083A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  083A             ; GETCHAR
0113+  083A             ; char in ah
0114+  083A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  083A             getchar:
0116+  083A DB          	push al
0117+  083B             getchar_retry:
0118+  083B FD 0C       	sti
0119+  083D 19 01       	mov al, 1
0120+  083F 05 03       	syscall sys_io			; receive in AH
0121+  0841 B9 00       	cmp al, 0			; check if any char was receive
0122+  0843 C6 3B 08    	je getchar_retry
0123+  0846 E8          	pop al
0124+  0847 09          	ret
0125+  0848             
0126+  0848             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0848             ; PUTCHAR
0128+  0848             ; char in ah
0129+  0848             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0848             putchar:
0131+  0848 D7          	push a
0132+  0849 19 00       	mov al, 0
0133+  084B 05 03       	syscall sys_io			; char in AH
0134+  084D E4          	pop a
0135+  084E 09          	ret
0136+  084F             
0137+  084F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  084F             ;; INPUT A STRING
0139+  084F             ;; terminates with null
0140+  084F             ;; pointer in D
0141+  084F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  084F             gets:
0143+  084F D7          	push a
0144+  0850 DA          	push d
0145+  0851             gets_loop:
0146+  0851 FD 0C       	sti
0147+  0853 19 01       	mov al, 1
0148+  0855 05 03       	syscall sys_io			; receive in AH
0149+  0857 B9 00       	cmp al, 0				; check error code (AL)
0150+  0859 C6 51 08    	je gets_loop			; if no char received, retry
0151+  085C             
0152+  085C 76 1B       	cmp ah, 27
0153+  085E C6 7F 08    	je gets_telnet_escape
0154+  0861 76 0A       	cmp ah, $0A				; LF
0155+  0863 C6 D8 08    	je gets_end
0156+  0866 76 0D       	cmp ah, $0D				; CR
0157+  0868 C6 D8 08    	je gets_end
0158+  086B 76 5C       	cmp ah, $5C				; '\\'
0159+  086D C6 AF 08    	je gets_escape
0160+  0870             	
0161+  0870 76 08       	cmp ah, $08			; check for backspace
0162+  0872 C6 7B 08    	je gets_backspace
0163+  0875             
0164+  0875 1A          	mov al, ah
0165+  0876 3E          	mov [d], al
0166+  0877 79          	inc d
0167+  0878 0A 51 08    	jmp gets_loop
0168+  087B             gets_backspace:
0169+  087B 7F          	dec d
0170+  087C 0A 51 08    	jmp gets_loop
0171+  087F             gets_telnet_escape:
0172+  087F FD 0C       	sti
0173+  0881 19 01       	mov al, 1
0174+  0883 05 03       	syscall sys_io				; receive in AH without echo
0175+  0885 B9 00       	cmp al, 0					; check error code (AL)
0176+  0887 C6 7F 08    	je gets_telnet_escape		; if no char received, retry
0177+  088A 76 5B       	cmp ah, '['
0178+  088C C7 51 08    	jne gets_loop
0179+  088F             gets_telnet_escape_phase2:
0180+  088F FD 0C       	sti
0181+  0891 19 01       	mov al, 1
0182+  0893 05 03       	syscall sys_io					; receive in AH without echo
0183+  0895 B9 00       	cmp al, 0						; check error code (AL)
0184+  0897 C6 8F 08    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  089A 76 44       	cmp ah, 'D'
0186+  089C C6 A7 08    	je gets_left_arrow
0187+  089F 76 43       	cmp ah, 'C'
0188+  08A1 C6 AB 08    	je gets_right_arrow
0189+  08A4 0A 51 08    	jmp gets_loop
0190+  08A7             gets_left_arrow:
0191+  08A7 7F          	dec d
0192+  08A8 0A 51 08    	jmp gets_loop
0193+  08AB             gets_right_arrow:
0194+  08AB 79          	inc d
0195+  08AC 0A 51 08    	jmp gets_loop
0196+  08AF             gets_escape:
0197+  08AF FD 0C       	sti
0198+  08B1 19 01       	mov al, 1
0199+  08B3 05 03       	syscall sys_io			; receive in AH
0200+  08B5 B9 00       	cmp al, 0				; check error code (AL)
0201+  08B7 C6 AF 08    	je gets_escape			; if no char received, retry
0202+  08BA 76 6E       	cmp ah, 'n'
0203+  08BC C6 CA 08    	je gets_LF
0204+  08BF 76 72       	cmp ah, 'r'
0205+  08C1 C6 D1 08    	je gets_CR
0206+  08C4 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  08C5 3E          	mov [d], al
0208+  08C6 79          	inc d
0209+  08C7 0A 51 08    	jmp gets_loop
0210+  08CA             gets_LF:
0211+  08CA 19 0A       	mov al, $0A
0212+  08CC 3E          	mov [d], al
0213+  08CD 79          	inc d
0214+  08CE 0A 51 08    	jmp gets_loop
0215+  08D1             gets_CR:
0216+  08D1 19 0D       	mov al, $0D
0217+  08D3 3E          	mov [d], al
0218+  08D4 79          	inc d
0219+  08D5 0A 51 08    	jmp gets_loop
0220+  08D8             gets_end:
0221+  08D8 19 00       	mov al, 0
0222+  08DA 3E          	mov [d], al				; terminate string
0223+  08DB E7          	pop d
0224+  08DC E4          	pop a
0225+  08DD 09          	ret
0226+  08DE             
0227+  08DE             
0228+  08DE             
0229+  08DE             
0230+  08DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  08DE             ;; INPUT TEXT
0232+  08DE             ;; terminated with CTRL+D
0233+  08DE             ;; pointer in D
0234+  08DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  08DE             gettxt:
0236+  08DE D7          	push a
0237+  08DF DA          	push d
0238+  08E0             gettxt_loop:
0239+  08E0 19 01       	mov al, 1
0240+  08E2 05 03       	syscall sys_io			; receive in AH
0241+  08E4 B9 00       	cmp al, 0				; check error code (AL)
0242+  08E6 C6 E0 08    	je gettxt_loop		; if no char received, retry
0243+  08E9 76 04       	cmp ah, 4			; EOT
0244+  08EB C6 29 09    	je gettxt_end
0245+  08EE 76 08       	cmp ah, $08			; check for backspace
0246+  08F0 C6 25 09    	je gettxt_backspace
0247+  08F3 76 5C       	cmp ah, $5C				; '\\'
0248+  08F5 C6 FE 08    	je gettxt_escape
0249+  08F8 1A          	mov al, ah
0250+  08F9 3E          	mov [d], al
0251+  08FA 79          	inc d
0252+  08FB 0A E0 08    	jmp gettxt_loop
0253+  08FE             gettxt_escape:
0254+  08FE 19 01       	mov al, 1
0255+  0900 05 03       	syscall sys_io			; receive in AH
0256+  0902 B9 00       	cmp al, 0				; check error code (AL)
0257+  0904 C6 FE 08    	je gettxt_escape		; if no char received, retry
0258+  0907 76 6E       	cmp ah, 'n'
0259+  0909 C6 17 09    	je gettxt_LF
0260+  090C 76 72       	cmp ah, 'r'
0261+  090E C6 1E 09    	je gettxt_CR
0262+  0911 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0912 3E          	mov [d], al
0264+  0913 79          	inc d
0265+  0914 0A E0 08    	jmp gettxt_loop
0266+  0917             gettxt_LF:
0267+  0917 19 0A       	mov al, $0A
0268+  0919 3E          	mov [d], al
0269+  091A 79          	inc d
0270+  091B 0A E0 08    	jmp gettxt_loop
0271+  091E             gettxt_CR:
0272+  091E 19 0D       	mov al, $0D
0273+  0920 3E          	mov [d], al
0274+  0921 79          	inc d
0275+  0922 0A E0 08    	jmp gettxt_loop
0276+  0925             gettxt_backspace:
0277+  0925 7F          	dec d
0278+  0926 0A E0 08    	jmp gettxt_loop
0279+  0929             gettxt_end:
0280+  0929 19 00       	mov al, 0
0281+  092B 3E          	mov [d], al				; terminate string
0282+  092C E7          	pop d
0283+  092D E4          	pop a
0284+  092E 09          	ret
0285+  092F             
0286+  092F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  092F             ; PRINT NEW LINE
0288+  092F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  092F             printnl:
0290+  092F D7          	push a
0291+  0930 10 00 0A    	mov a, $0A00
0292+  0933 05 03       	syscall sys_io
0293+  0935 10 00 0D    	mov a, $0D00
0294+  0938 05 03       	syscall sys_io
0295+  093A E4          	pop a
0296+  093B 09          	ret
0297+  093C             
0298+  093C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  093C             ; strtoint
0300+  093C             ; 4 digit hex string number in d
0301+  093C             ; integer returned in A
0302+  093C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  093C             strtointx:
0304+  093C D8          	push b
0305+  093D 32          	mov bl, [d]
0306+  093E 37          	mov bh, bl
0307+  093F 33 01 00    	mov bl, [d + 1]
0308+  0942 07 FD 07    	call atoi				; convert to int in AL
0309+  0945 23          	mov ah, al				; move to AH
0310+  0946 33 02 00    	mov bl, [d + 2]
0311+  0949 37          	mov bh, bl
0312+  094A 33 03 00    	mov bl, [d + 3]
0313+  094D 07 FD 07    	call atoi				; convert to int in AL
0314+  0950 E5          	pop b
0315+  0951 09          	ret
0316+  0952             
0317+  0952             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0952             ; strtoint
0319+  0952             ; 5 digit base10 string number in d
0320+  0952             ; integer returned in A
0321+  0952             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0952             strtoint:
0323+  0952 E2          	push si
0324+  0953 D8          	push b
0325+  0954 D9          	push c
0326+  0955 DA          	push d
0327+  0956 07 7D 07    	call strlen			; get string length in C
0328+  0959 7E          	dec c
0329+  095A FD 4E       	mov si, d
0330+  095C 12          	mov a, c
0331+  095D FD 99       	shl a
0332+  095F 3B E5 07    	mov d, table_power
0333+  0962 59          	add d, a
0334+  0963 38 00 00    	mov c, 0
0335+  0966             strtoint_L0:
0336+  0966 F6          	lodsb			; load ASCII to al
0337+  0967 B9 00       	cmp al, 0
0338+  0969 C6 7C 09    	je strtoint_end
0339+  096C 6F 30       	sub al, $30		; make into integer
0340+  096E 22 00       	mov ah, 0
0341+  0970 2A          	mov b, [d]
0342+  0971 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0972 11          	mov a, b
0344+  0973 28          	mov b, c
0345+  0974 54          	add a, b
0346+  0975 39          	mov c, a
0347+  0976 63 02 00    	sub d, 2
0348+  0979 0A 66 09    	jmp strtoint_L0
0349+  097C             strtoint_end:
0350+  097C 12          	mov a, c
0351+  097D E7          	pop d
0352+  097E E6          	pop c
0353+  097F E5          	pop b
0354+  0980 EF          	pop si
0355+  0981 09          	ret
0356+  0982             
0357+  0982             
0358+  0982             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0982             ; PRINT NULL TERMINATED STRING
0360+  0982             ; pointer in D
0361+  0982             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0982             puts:
0363+  0982 D7          	push a
0364+  0983 DA          	push d
0365+  0984             puts_L1:
0366+  0984 1E          	mov al, [d]
0367+  0985 B9 00       	cmp al, 0
0368+  0987 C6 93 09    	jz puts_END
0369+  098A 23          	mov ah, al
0370+  098B 19 00       	mov al, 0
0371+  098D 05 03       	syscall sys_io
0372+  098F 79          	inc d
0373+  0990 0A 84 09    	jmp puts_L1
0374+  0993             puts_END:
0375+  0993 E7          	pop d
0376+  0994 E4          	pop a
0377+  0995 09          	ret
0378+  0996             
0379+  0996             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0996             ; PRINT N SIZE STRING
0381+  0996             ; pointer in D
0382+  0996             ; size in C
0383+  0996             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0996             putsn:
0385+  0996 DB          	push al
0386+  0997 DA          	push d
0387+  0998 D9          	push c
0388+  0999             putsn_L0:
0389+  0999 1E          	mov al, [d]
0390+  099A 23          	mov ah, al
0391+  099B 19 00       	mov al, 0
0392+  099D 05 03       	syscall sys_io
0393+  099F 79          	inc d
0394+  09A0 7E          	dec c	
0395+  09A1 C2 00 00    	cmp c, 0
0396+  09A4 C7 99 09    	jne putsn_L0
0397+  09A7             putsn_end:
0398+  09A7 E6          	pop c
0399+  09A8 E7          	pop d
0400+  09A9 E8          	pop al
0401+  09AA 09          	ret
0402+  09AB             
0403+  09AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  09AB             ; print 16bit decimal number
0405+  09AB             ; input number in A
0406+  09AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  09AB             print_u16d:
0408+  09AB D7          	push a
0409+  09AC D8          	push b
0410+  09AD 26 10 27    	mov b, 10000
0411+  09B0 AE          	div a, b			; get 10000's coeff.
0412+  09B1 07 D3 09    	call print_number
0413+  09B4 11          	mov a, b
0414+  09B5 26 E8 03    	mov b, 1000
0415+  09B8 AE          	div a, b			; get 1000's coeff.
0416+  09B9 07 D3 09    	call print_number
0417+  09BC 11          	mov a, b
0418+  09BD 26 64 00    	mov b, 100
0419+  09C0 AE          	div a, b
0420+  09C1 07 D3 09    	call print_number
0421+  09C4 11          	mov a, b
0422+  09C5 26 0A 00    	mov b, 10
0423+  09C8 AE          	div a, b
0424+  09C9 07 D3 09    	call print_number
0425+  09CC 1B          	mov al, bl			; 1's coeff in bl
0426+  09CD 07 D3 09    	call print_number
0427+  09D0 E5          	pop b
0428+  09D1 E4          	pop a
0429+  09D2 09          	ret
0430+  09D3             
0431+  09D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0432+  09D3             ; print AL
0433+  09D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0434+  09D3             print_number:
0435+  09D3 6A 30       	add al, $30
0436+  09D5 23          	mov ah, al
0437+  09D6 07 48 08    	call putchar
0438+  09D9 09          	ret
0439+  09DA             
0440+  09DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0441+  09DA             ; PRINT 16BIT HEX INTEGER
0442+  09DA             ; integer value in reg B
0443+  09DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0444+  09DA             print_u16x:
0445+  09DA D7          	push a
0446+  09DB D8          	push b
0447+  09DC DD          	push bl
0448+  09DD 30          	mov bl, bh
0449+  09DE 07 0F 08    	call itoa				; convert bh to char in A
0450+  09E1 2F          	mov bl, al				; save al
0451+  09E2 19 00       	mov al, 0
0452+  09E4 05 03       	syscall sys_io				; display AH
0453+  09E6 24          	mov ah, bl				; retrieve al
0454+  09E7 19 00       	mov al, 0
0455+  09E9 05 03       	syscall sys_io				; display AL
0456+  09EB             
0457+  09EB EA          	pop bl
0458+  09EC 07 0F 08    	call itoa				; convert bh to char in A
0459+  09EF 2F          	mov bl, al				; save al
0460+  09F0 19 00       	mov al, 0
0461+  09F2 05 03       	syscall sys_io				; display AH
0462+  09F4 24          	mov ah, bl				; retrieve al
0463+  09F5 19 00       	mov al, 0
0464+  09F7 05 03       	syscall sys_io				; display AL
0465+  09F9             
0466+  09F9 E5          	pop b
0467+  09FA E4          	pop a
0468+  09FB 09          	ret
0469+  09FC             
0470+  09FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0471+  09FC             ; INPUT 16BIT HEX INTEGER
0472+  09FC             ; read 16bit integer into A
0473+  09FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0474+  09FC             scan_u16x:
0475+  09FC F8 10 00    	enter 16
0476+  09FF D8          	push b
0477+  0A00 DA          	push d
0478+  0A01             
0479+  0A01 FA F1 FF    	lea d, [bp + -15]
0480+  0A04 07 4F 08    	call gets				; get number
0481+  0A07             
0482+  0A07 32          	mov bl, [d]
0483+  0A08 37          	mov bh, bl
0484+  0A09 33 01 00    	mov bl, [d + 1]
0485+  0A0C 07 FD 07    	call atoi				; convert to int in AL
0486+  0A0F 23          	mov ah, al				; move to AH
0487+  0A10             
0488+  0A10 33 02 00    	mov bl, [d + 2]
0489+  0A13 37          	mov bh, bl
0490+  0A14 33 03 00    	mov bl, [d + 3]
0491+  0A17 07 FD 07    	call atoi				; convert to int in AL
0492+  0A1A             
0493+  0A1A E7          	pop d
0494+  0A1B E5          	pop b
0495+  0A1C F9          	leave
0496+  0A1D 09          	ret
0497+  0A1E             
0498+  0A1E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0499+  0A1E             ; PRINT 8bit HEX INTEGER
0500+  0A1E             ; integer value in reg bl
0501+  0A1E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0502+  0A1E             print_u8x:
0503+  0A1E D7          	push a
0504+  0A1F DD          	push bl
0505+  0A20             
0506+  0A20 07 0F 08    	call itoa				; convert bl to char in A
0507+  0A23 2F          	mov bl, al				; save al
0508+  0A24 19 00       	mov al, 0
0509+  0A26 05 03       	syscall sys_io				; display AH
0510+  0A28 24          	mov ah, bl				; retrieve al
0511+  0A29 19 00       	mov al, 0
0512+  0A2B 05 03       	syscall sys_io				; display AL
0513+  0A2D             
0514+  0A2D EA          	pop bl
0515+  0A2E E4          	pop a
0516+  0A2F 09          	ret
0517+  0A30             
0518+  0A30             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0519+  0A30             ; print 8bit decimal unsigned number
0520+  0A30             ; input number in AL
0521+  0A30             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0522+  0A30             print_u8d:
0523+  0A30 D7          	push a
0524+  0A31 D8          	push b
0525+  0A32             
0526+  0A32 22 00       	mov ah, 0
0527+  0A34 26 64 00    	mov b, 100
0528+  0A37 AE          	div a, b
0529+  0A38 D8          	push b			; save remainder
0530+  0A39 B9 00       	cmp al, 0
0531+  0A3B C6 45 0A    	je skip100
0532+  0A3E 6A 30       	add al, $30
0533+  0A40 23          	mov ah, al
0534+  0A41 19 00       	mov al, 0
0535+  0A43 05 03       	syscall sys_io	; print coeff
0536+  0A45             skip100:
0537+  0A45 E4          	pop a
0538+  0A46 22 00       	mov ah, 0
0539+  0A48 26 0A 00    	mov b, 10
0540+  0A4B AE          	div a, b
0541+  0A4C D8          	push b			; save remainder
0542+  0A4D B9 00       	cmp al, 0
0543+  0A4F C6 59 0A    	je skip10
0544+  0A52 6A 30       	add al, $30
0545+  0A54 23          	mov ah, al
0546+  0A55 19 00       	mov al, 0
0547+  0A57 05 03       	syscall sys_io	; print coeff
0548+  0A59             skip10:
0549+  0A59 E4          	pop a
0550+  0A5A 1B          	mov al, bl
0551+  0A5B 6A 30       	add al, $30
0552+  0A5D 23          	mov ah, al
0553+  0A5E 19 00       	mov al, 0
0554+  0A60 05 03       	syscall sys_io	; print coeff
0555+  0A62 E5          	pop b
0556+  0A63 E4          	pop a
0557+  0A64 09          	ret
0558+  0A65             
0559+  0A65             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0560+  0A65             ; INPUT 8BIT HEX INTEGER
0561+  0A65             ; read 8bit integer into AL
0562+  0A65             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0563+  0A65             scan_u8x:
0564+  0A65 F8 04 00    	enter 4
0565+  0A68 D8          	push b
0566+  0A69 DA          	push d
0567+  0A6A             
0568+  0A6A FA FD FF    	lea d, [bp + -3]
0569+  0A6D 07 4F 08    	call gets				; get number
0570+  0A70             
0571+  0A70 32          	mov bl, [d]
0572+  0A71 37          	mov bh, bl
0573+  0A72 33 01 00    	mov bl, [d + 1]
0574+  0A75 07 FD 07    	call atoi				; convert to int in AL
0575+  0A78             
0576+  0A78 E7          	pop d
0577+  0A79 E5          	pop b
0578+  0A7A F9          	leave
0579+  0A7B 09          	ret
0580+  0A7C             
0581+  0A7C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0582+  0A7C             ; input decimal number
0583+  0A7C             ; result in A
0584+  0A7C             ; 655'\0'
0585+  0A7C             ; low--------high
0586+  0A7C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0A7C             scan_u16d:
0588+  0A7C F8 08 00    	enter 8
0589+  0A7F E2          	push si
0590+  0A80 D8          	push b
0591+  0A81 D9          	push c
0592+  0A82 DA          	push d
0593+  0A83 FA F9 FF    	lea d, [bp +- 7]
0594+  0A86 07 4F 08    	call gets
0595+  0A89 07 7D 07    	call strlen			; get string length in C
0596+  0A8C 7E          	dec c
0597+  0A8D FD 4E       	mov si, d
0598+  0A8F 12          	mov a, c
0599+  0A90 FD 99       	shl a
0600+  0A92 3B E5 07    	mov d, table_power
0601+  0A95 59          	add d, a
0602+  0A96 38 00 00    	mov c, 0
0603+  0A99             mul_loop:
0604+  0A99 F6          	lodsb			; load ASCII to al
0605+  0A9A B9 00       	cmp al, 0
0606+  0A9C C6 AF 0A    	je mul_exit
0607+  0A9F 6F 30       	sub al, $30		; make into integer
0608+  0AA1 22 00       	mov ah, 0
0609+  0AA3 2A          	mov b, [d]
0610+  0AA4 AC          	mul a, b			; result in B since it fits in 16bits
0611+  0AA5 11          	mov a, b
0612+  0AA6 28          	mov b, c
0613+  0AA7 54          	add a, b
0614+  0AA8 39          	mov c, a
0615+  0AA9 63 02 00    	sub d, 2
0616+  0AAC 0A 99 0A    	jmp mul_loop
0617+  0AAF             mul_exit:
0618+  0AAF 12          	mov a, c
0619+  0AB0 E7          	pop d
0620+  0AB1 E6          	pop c
0621+  0AB2 E5          	pop b
0622+  0AB3 EF          	pop si
0623+  0AB4 F9          	leave
0624+  0AB5 09          	ret
0016   0AB6             .include "ctype.asm"
0001+  0AB6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0AB6             ; ctype.s
0003+  0AB6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0AB6             
0005+  0AB6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0AB6             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0AB6             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0AB6             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0AB6             ;; characters are supported.
0010+  0AB6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0AB6             ;; isalnum 
0012+  0AB6             ;; isalpha 
0013+  0AB6             ;; islower 
0014+  0AB6             ;; isupper 
0015+  0AB6             ;; isdigit 
0016+  0AB6             ;; isxdigit
0017+  0AB6             ;; iscntrl 
0018+  0AB6             ;; isgraph 
0019+  0AB6             ;; isspace 
0020+  0AB6             ;; isblank 
0021+  0AB6             ;; isprint 
0022+  0AB6             ;; ispunct 
0023+  0AB6             ;; tolower 
0024+  0AB6             ;; toupper
0025+  0AB6             
0026+  0AB6             
0027+  0AB6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0AB6             ;; IS ALPHANUMERIC
0029+  0AB6             ;; sets ZF according with result
0030+  0AB6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0AB6             isalnum:
0032+  0AB6 07 D3 0A    	call isalpha
0033+  0AB9 C6 BF 0A    	je isalnum_exit
0034+  0ABC 07 C0 0A    	call isdigit
0035+  0ABF             isalnum_exit:
0036+  0ABF 09          	ret	
0037+  0AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0AC0             ;; IS DIGIT
0039+  0AC0             ;; sets ZF according with result
0040+  0AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0AC0             isdigit:
0042+  0AC0 DB          	push al
0043+  0AC1 B9 30       	cmp al, '0'
0044+  0AC3 C8 CF 0A    	jlu isdigit_false
0045+  0AC6 B9 39       	cmp al, '9'
0046+  0AC8 D1 CF 0A    	jgu isdigit_false
0047+  0ACB 87 00       	and al, 0	; set ZF
0048+  0ACD E8          	pop al
0049+  0ACE 09          	ret
0050+  0ACF             isdigit_false:
0051+  0ACF 8B 01       	or al, 1	; clear ZF
0052+  0AD1 E8          	pop al
0053+  0AD2 09          	ret	
0054+  0AD3             	
0055+  0AD3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0AD3             ;; IS ALPHA
0057+  0AD3             ;; sets ZF according with result
0058+  0AD3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0AD3             isalpha:
0060+  0AD3 DB          	push al
0061+  0AD4 B9 5F       	cmp al, '_'
0062+  0AD6 C6 F6 0A    	je isalpha_true
0063+  0AD9 B9 2E       	cmp al, '.'
0064+  0ADB C6 F6 0A    	je isalpha_true
0065+  0ADE B9 41       	cmp al, 'A'
0066+  0AE0 C8 F2 0A    	jlu isalpha_false
0067+  0AE3 B9 7A       	cmp al, 'z'
0068+  0AE5 D1 F2 0A    	jgu isalpha_false
0069+  0AE8 B9 5A       	cmp al, 'Z'
0070+  0AEA D0 F6 0A    	jleu isalpha_true
0071+  0AED B9 61       	cmp al, 'a'
0072+  0AEF C9 F6 0A    	jgeu isalpha_true
0073+  0AF2             isalpha_false:
0074+  0AF2 8B 01       	or al, 1	; clear ZF
0075+  0AF4 E8          	pop al
0076+  0AF5 09          	ret
0077+  0AF6             isalpha_true:
0078+  0AF6 87 00       	and al, 0	; set ZF
0079+  0AF8 E8          	pop al
0080+  0AF9 09          	ret
0081+  0AFA             
0082+  0AFA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0AFA             ;; IS PATH-ALPHA
0084+  0AFA             ;; sets ZF according with result
0085+  0AFA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0AFA             ispath:
0087+  0AFA DB          	push al
0088+  0AFB 07 C0 0A    	call isdigit
0089+  0AFE C6 28 0B    	je ispath_true
0090+  0B01 B9 5F       	cmp al, '_'
0091+  0B03 C6 28 0B    	je ispath_true
0092+  0B06 B9 2F       	cmp al, '/'
0093+  0B08 C6 28 0B    	je ispath_true
0094+  0B0B B9 2E       	cmp al, '.'
0095+  0B0D C6 28 0B    	je ispath_true
0096+  0B10 B9 41       	cmp al, 'A'
0097+  0B12 C8 24 0B    	jlu ispath_false
0098+  0B15 B9 7A       	cmp al, 'z'
0099+  0B17 D1 24 0B    	jgu ispath_false
0100+  0B1A B9 5A       	cmp al, 'Z'
0101+  0B1C D0 28 0B    	jleu ispath_true
0102+  0B1F B9 61       	cmp al, 'a'
0103+  0B21 C9 28 0B    	jgeu ispath_true
0104+  0B24             ispath_false:
0105+  0B24 8B 01       	or al, 1	; clear ZF
0106+  0B26 E8          	pop al
0107+  0B27 09          	ret
0108+  0B28             ispath_true:
0109+  0B28 87 00       	and al, 0	; set ZF
0110+  0B2A E8          	pop al
0111+  0B2B 09          	ret
0112+  0B2C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B2C             ;; IS SPACE
0114+  0B2C             ;; sets ZF according with result
0115+  0B2C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B2C             isspace:
0117+  0B2C B9 20       	cmp al, $20		; ' '
0118+  0B2E C6 42 0B    	je isspace_exit
0119+  0B31 B9 09       	cmp al, $09		; '\t'
0120+  0B33 C6 42 0B    	je isspace_exit
0121+  0B36 B9 0A       	cmp al, $0A		; '\n'
0122+  0B38 C6 42 0B    	je isspace_exit
0123+  0B3B B9 0D       	cmp al, $0D		; '\r'
0124+  0B3D C6 42 0B    	je isspace_exit
0125+  0B40 B9 0B       	cmp al, $0B		; '\v'
0126+  0B42             isspace_exit:
0127+  0B42 09          	ret	
0128+  0B43             
0129+  0B43             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B43             ; TO LOWER
0131+  0B43             ; input in AL
0132+  0B43             ; output in AL
0133+  0B43             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B43             to_lower:
0135+  0B43 B9 5A       	cmp al, 'Z'
0136+  0B45 D1 4A 0B    	jgu to_lower_ret
0137+  0B48 6A 20       	add al, $20				; convert to lower case
0138+  0B4A             to_lower_ret:
0139+  0B4A 09          	ret
0140+  0B4B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B4B             ; TO UPPER
0142+  0B4B             ; input in AL
0143+  0B4B             ; output in AL
0144+  0B4B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B4B             to_upper:
0146+  0B4B B9 61       	cmp al, 'a'
0147+  0B4D C8 52 0B    	jlu to_upper_ret
0148+  0B50 6F 20       	sub al, $20			; convert to upper case
0149+  0B52             to_upper_ret:
0150+  0B52 09          	ret
0151+  0B53             
0017   0B53             
0018   0B53             .end
0019   0B53             
0020   0B53             
0021   0B53             
tasm: Number of errors = 0
