0001   0000             ;Subroutine to multiply two floating-point variables
0002   0000             ;Floats are IEEE 754 single-precision
0003   0000             ;Multiplies fp_a and fp_b
0004   0000             ;Result in fp_c
0005   0000             			.include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0006   8000             			.org	8000h
0007   8000             
0008   8000             ;First gets fp_a and fp_b from input
0009   8000 07 08 85    			call	scan_u16x
0010   8003 FD AA       			swp	a
0011   8005 42 1D 82    			mov	[fp_a],a
0012   8008 07 08 85    			call	scan_u16x
0013   800B FD AA       			swp	a
0014   800D 42 1F 82    			mov	[fp_a+2],a
0015   8010 07 08 85    			call	scan_u16x
0016   8013 FD AA       			swp	a
0017   8015 42 21 82    			mov	[fp_b],a
0018   8018 07 08 85    			call	scan_u16x
0019   801B FD AA       			swp	a
0020   801D 42 23 82    			mov	[fp_b+2],a
0021   8020             
0022   8020             multiply_float:
0023   8020             ;Calculate sign of product first
0024   8020 1D 1D 82    			mov	al,[fp_a]
0025   8023 2F          			mov	bl,al
0026   8024 1D 21 82    			mov	al,[fp_b]
0027   8027 90          			xor	al,bl		;sign of result is XOR of signs of products
0028   8028 2F          			mov	bl,al
0029   8029 19 80       			mov	al,10000000b	;mask of remainder of bits
0030   802B 88          			and	al,bl
0031   802C 3D 29 82    			mov	[sign],al	;(sign) is 8-bit mask used to OR-in the sign bit
0032   802F             ;Calculate exponent of product
0033   802F             ;Get exponent of a
0034   802F 1D 1D 82    			mov	al,[fp_a]	;need to get bit 0 of exponent from bit 7 of
0035   8032 FD 9E 01    			shl	al,1		;fp_a+1 and combine with the rest of the
0036   8035 2F          			mov	bl,al		;exponent from fp_a
0037   8036 1D 1E 82    			mov	al,[fp_a+1]	;is bit 7 one?
0038   8039 87 80       			and	al,10000000b
0039   803B C7 42 80    			jnz	mfp_next_1	;yes, OR-in a 1 in bit 0 of exponent byte
0040   803E 1B          			mov	al,bl
0041   803F 0A 45 80    			jmp	mfp_next_2	;no, skip OR-in (will have a zero from shift)
0042   8042 19 01       mfp_next_1:		mov	al,00000001b
0043   8044 8C          			or	al,bl
0044   8045             ;Remove exponent bias and save
0045   8045 6F 7F       mfp_next_2:		sub	al,127		;al now has unbiased exponent of a
0046   8047 3D 2A 82    			mov	[exponent_a],al
0047   804A             			
0048   804A             ;Get exponent of b
0049   804A 1D 21 82    			mov	al,[fp_b]	;need to get bit 0 of exponent from bit 7 of
0050   804D FD 9E 01    			shl	al,1		;fp_a+1 and combine with the rest of the
0051   8050 2F          			mov	bl,al		;exponent from fp_a
0052   8051 1D 22 82    			mov	al,[fp_b+1]	;is bit 7 one?
0053   8054 87 80       			and	al,10000000b
0054   8056 C7 5D 80    			jnz	mfp_next_3	;yes, OR-in a 1 in bit 0 of exponent byte
0055   8059 1B          			mov	al,bl
0056   805A 0A 60 80    			jmp	mfp_next_4	;no, skip OR-in (will have a zero from shift)
0057   805D 19 01       mfp_next_3:		mov	al,00000001b
0058   805F 8C          			or	al,bl
0059   8060             ;Remove exponent bias and save
0060   8060 6F 7F       mfp_next_4:		sub	al,127		;al now has unbiased exponent of b
0061   8062 3D 2B 82    			mov	[exponent_b],al
0062   8065             ;Add unbiased exponents and save
0063   8065 3D 2B 82    			mov	[exponent_b],al	;add exponents
0064   8068 2F          			mov	bl,al
0065   8069 1D 2A 82    			mov	al,[exponent_a]
0066   806C 6B          			add	al,bl
0067   806D 3D 2C 82    			mov	[exponent_c],al	;exponent_c has unbiased exponent of product
0068   8070             			
0069   8070             
0070   8070             			
0071   8070             ;Multiply significands
0072   8070 1D 1E 82    			mov	al,[fp_a+1]	;need to set leftmost bit of significand to one
0073   8073 2F          			mov	bl,al		;this bit is implied but not stored in fp
0074   8074 19 80       			mov	al,10000000b
0075   8076 8C          			or	al,bl
0076   8077 3D 2D 82    			mov	[long_a],al
0077   807A 1D 1F 82    			mov	al,[fp_a+2]
0078   807D 3D 2E 82    			mov	[long_a+1],al
0079   8080 1D 20 82    			mov	al,[fp_a+3]
0080   8083 3D 2F 82    			mov	[long_a+2],al
0081   8086 1D 22 82    			mov	al,[fp_b+1]
0082   8089 2F          			mov	bl,al
0083   808A 19 80       			mov	al,10000000b
0084   808C 8C          			or	al,bl
0085   808D 3D 30 82    			mov	[long_b],al
0086   8090 1D 23 82    			mov	al,[fp_b+2]
0087   8093 3D 31 82    			mov	[long_b+1],al
0088   8096 1D 24 82    			mov	al,[fp_b+3]
0089   8099 3D 32 82    			mov	[long_b+2],al
0090   809C             
0091   809C 07 FB 80    			call	multiply_long		;24-bit integer multiplication
0092   809F             
0093   809F             
0094   809F             			
0095   809F             ;Normalize product			
0096   809F 1D 3C 82    mfp_loop_1:		mov	al,[double_long_b]	;check leftmost bit of product
0097   80A2 2F          			mov	bl,al
0098   80A3 19 80       			mov	al,10000000b
0099   80A5 88          			and	al,bl			;test leftmost bit of product
0100   80A6 C7 B6 80    			jnz	mfp_next_5		;normalized, assemble final fp
0101   80A9 07 DB 81    			call	shift_left_double_long_b	;not normalized, shift left and dec exponent
0102   80AC 1D 2C 82    			mov	al,[exponent_c]
0103   80AF 80          			dec	al
0104   80B0 3D 2C 82    			mov	[exponent_c],al
0105   80B3 0A 9F 80    			jmp	mfp_loop_1
0106   80B6             			
0107   80B6             
0108   80B6             ;Assemble final fp 
0109   80B6 1D 2C 82    mfp_next_5:		mov	al,[exponent_c]	;First byte is sign bit and bits 7 to 1
0110   80B9 6A 80       			add	al,128			;restore bias + 1 (for effect of multiplication)
0111   80BB 3D 2C 82    			mov	[exponent_c],al	;exponent_c now has biased exponent
0112   80BE FD A2 01    			shr	al,1
0113   80C1 31 29 82    			mov	bl,[sign]			;move over for sign bit
0114   80C4 8C          			or	al,bl			;put sign bit in
0115   80C5 3D 25 82    			mov	[fp_c],al		;First byte done
0116   80C8 1D 3C 82    			mov	al,[double_long_b]	;get first byte of mantissa
0117   80CB 3D 26 82    			mov	[fp_c+1],al		;store in second byte of fp
0118   80CE 1D 2C 82    			mov	al,[exponent_c]	;check bit 0 of biased exponent
0119   80D1 87 01       			and	al,00000001b		;test bit 0 of exponent
0120   80D3 C7 DE 80    			jnz	mfp_next_6		;bit is one, leave one in bit 7 of fp_c+1
0121   80D6 1D 26 82    			mov	al,[fp_c+1]		;bit is 0, mask off bit 7 of fp_c+1
0122   80D9 87 7F       			and	al,01111111b
0123   80DB 3D 26 82    			mov	[fp_c+1],al
0124   80DE 1D 3D 82    mfp_next_6:		mov	al,[double_long_b+1]	;get second and third product bytes
0125   80E1 3D 27 82    			mov	[fp_c+2],al
0126   80E4 1D 3E 82    			mov	al,[double_long_b+2]
0127   80E7 3D 28 82    			mov	[fp_c+3],al		;complete fp product now assembled in fp_c
0128   80EA             
0129   80EA             ;Print product
0130   80EA 29 25 82    			mov	b,[fp_c]
0131   80ED FD AB       			swp	b
0132   80EF 07 E6 84    			call	print_u16x
0133   80F2 29 27 82    			mov	b,[fp_c+2]
0134   80F5 FD AB       			swp	b
0135   80F7 07 E6 84    			call	print_u16x
0136   80FA             
0137   80FA             ;Insert rounding code here -- check leftmost bits of double_long_a+4, and increment mantissa if rounding
0138   80FA             ;For now just truncate
0139   80FA             			
0140   80FA 09          			ret
0141   80FB             
0142   80FB             			
0143   80FB             
0144   80FB             ;Multiply long integers, using shift and add only -- no nybble multiplication
0145   80FB             ;Long words passed in long_a and long_b
0146   80FB             ;Product returned in double_long_b
0147   80FB             ;Uses double_long_a to hold multiplicand for shifting
0148   80FB             ;Uses double_long_b for 48-bit addition
0149   80FB             ;Uses long_c for mask for multiplicand bits in long_b
0150   80FB             
0151   80FB 19 00       multiply_long:		mov	al,0
0152   80FD 3D 36 82    			mov	[double_long_a],al	;clear multiplicand word
0153   8100 3D 37 82    			mov	[double_long_a+1],al
0154   8103 3D 38 82    			mov	[double_long_a+2],al
0155   8106 3D 39 82    			mov	[double_long_a+3],al
0156   8109 3D 3A 82    			mov	[double_long_a+4],al
0157   810C 3D 3B 82    			mov	[double_long_a+5],al
0158   810F 3D 3C 82    			mov	[double_long_b],al	;clear product word
0159   8112 3D 3D 82    			mov	[double_long_b+1],al
0160   8115 3D 3E 82    			mov	[double_long_b+2],al
0161   8118 3D 3F 82    			mov	[double_long_b+3],al
0162   811B 3D 40 82    			mov	[double_long_b+4],al
0163   811E 3D 41 82    			mov	[double_long_b+5],al
0164   8121 3D 33 82    			mov	[long_c],al
0165   8124 3D 34 82    			mov	[long_c+1],al
0166   8127 19 01       			mov	al,00000001b		;mask for multiplicand b bits
0167   8129 3D 35 82    			mov	[long_c+2],al
0168   812C 1D 2F 82    			mov	al,[long_a+2]
0169   812F 3D 3B 82    			mov	[double_long_a+5],al	;place multiplicand a in double_long_a
0170   8132 1D 2E 82    			mov	al,[long_a+1]
0171   8135 3D 3A 82    			mov	[double_long_a+4],al
0172   8138 1D 2D 82    			mov	al,[long_a]
0173   813B 3D 39 82    			mov	[double_long_a+3],al
0174   813E             
0175   813E 1D 32 82    mult_long_loop:	mov	al,[long_b+2]		;check bit in multiplicand b with mask
0176   8141 2F          			mov	bl,al
0177   8142 1D 35 82    			mov	al,[long_c+2]		;mask in long_c		
0178   8145 88          			and	al,bl
0179   8146 C6 4C 81    			jz	mult_long_next_1	;need to check all 3 bytes
0180   8149 0A 65 81    			jmp	mult_long_add		;bit is one, add
0181   814C 1D 31 82    mult_long_next_1:	mov	al,[long_b+1]
0182   814F 2F          			mov	bl,al
0183   8150 1D 34 82    			mov	al,[long_c+1]
0184   8153 88          			and	al,bl
0185   8154 C6 5A 81    			jz	mult_long_next_2
0186   8157 0A 65 81    			jmp	mult_long_add
0187   815A 1D 30 82    mult_long_next_2:	mov	al,[long_b]
0188   815D 2F          			mov	bl,al
0189   815E 1D 33 82    			mov	al,[long_c]
0190   8161 88          			and	al,bl
0191   8162 C6 98 81    			jz	mult_long_shift	;bit is zero, don't add, shift multiplicand
0192   8165             
0193   8165             
0194   8165             			
0195   8165             ;In the following add double-long, do 3 16-bit additions with carry
0196   8165             ;Need to swap before and after add to get memory order correct			
0197   8165 14 40 82    mult_long_add:		mov	a,[double_long_b+4]	;bit in long_b is one, add multiplicand a to product b
0198   8168 FD AA       			swp	a
0199   816A 27          			mov	b,a			;48-bit addition
0200   816B 14 3A 82    			mov	a,[double_long_a+4]
0201   816E FD AA       			swp	a
0202   8170 54          			add	a,b
0203   8171 FD AA       			swp	a
0204   8173 42 40 82    			mov	[double_long_b+4],a	;product will accumulate in double_long_b
0205   8176 14 3E 82    			mov	a,[double_long_b+2]
0206   8179 FD AA       			swp	a
0207   817B 27          			mov	b,a
0208   817C 14 38 82    			mov	a,[double_long_a+2]
0209   817F FD AA       			swp	a
0210   8181 5C          			adc	a,b
0211   8182 FD AA       			swp	a
0212   8184 42 3E 82    			mov	[double_long_b+2],a
0213   8187 14 3C 82    			mov	a,[double_long_b]
0214   818A FD AA       			swp	a
0215   818C 27          			mov	b,a
0216   818D 14 36 82    			mov	a,[double_long_a]
0217   8190 FD AA       			swp	a
0218   8192 5C          			adc	a,b
0219   8193 FD AA       			swp	a
0220   8195 42 3C 82    			mov	[double_long_b],a
0221   8198             			
0222   8198 07 B2 81    mult_long_shift:	call	shift_left_double_long_a	;shifts multiplicand in double_long_a
0223   819B 07 04 82    			call	shift_left_long	;shifts mask in long_c left one
0224   819E 1D 33 82    			mov	al,[long_c]		;check long_c if zero (24 shifts done)
0225   81A1 2F          			mov	bl,al
0226   81A2 1D 34 82    			mov	al,[long_c+1]
0227   81A5 8C          			or	al,bl
0228   81A6 C7 3E 81    			jnz	mult_long_loop		;not zero, keep multiplying
0229   81A9 2F          			mov	bl,al
0230   81AA 1D 35 82    			mov	al,[long_c+2]
0231   81AD 8C          			or	al,bl
0232   81AE C7 3E 81    			jnz	mult_long_loop		;not zero, keep multiplying
0233   81B1 09          			ret				;mask bytes all zeros, done
0234   81B2             ;Subroutine to shift left one a 48-bit value
0235   81B2             ;48-bit value in double_long_a
0236   81B2             ;concatenates 3 one-bit left shifts of the 3 words that make up the value
0237   81B2             ;uses 16-bit mov instructions, swaps low and hi bytes to make it right
0238   81B2             shift_left_double_long_a:
0239   81B2 14 3A 82    			mov	a,[double_long_a+4]
0240   81B5 FD AA       			swp	a
0241   81B7 FD 99       			shl	a
0242   81B9 FD AA       			swp	a
0243   81BB 42 3A 82    			mov	[double_long_a+4],a
0244   81BE 14 38 82    			mov	a,[double_long_a+2]
0245   81C1 3A 01       			mov	cl, 1
0246   81C3 FD AA       			swp	a
0247   81C5 FD E0       			rlc	a, cl
0248   81C7 FD AA       			swp	a
0249   81C9 42 38 82    			mov	[double_long_a+2],a
0250   81CC 14 36 82    			mov	a,[double_long_a]
0251   81CF 3A 01       			mov	cl, 1
0252   81D1 FD AA       			swp	a
0253   81D3 FD E0       			rlc	a, cl
0254   81D5 FD AA       			swp	a
0255   81D7 42 36 82    			mov	[double_long_a],a
0256   81DA 09          			ret
0257   81DB             			
0258   81DB             ;Subroutine to shift left one a 48-bit value
0259   81DB             ;48-bit value in double_long_b
0260   81DB             ;concatenates 3 one-bit left shifts of the 3 words that make up the value
0261   81DB             ;uses 16-bit mov instructions, swaps low and hi bytes to make it right
0262   81DB             shift_left_double_long_b:
0263   81DB 14 40 82    			mov	a,[double_long_b+4]
0264   81DE FD AA       			swp	a
0265   81E0 FD 99       			shl	a
0266   81E2 FD AA       			swp	a
0267   81E4 42 40 82    			mov	[double_long_b+4],a
0268   81E7 14 3E 82    			mov	a,[double_long_b+2]
0269   81EA 3A 01       			mov	cl, 1
0270   81EC FD AA       			swp	a
0271   81EE FD E0       			rlc	a, cl
0272   81F0 FD AA       			swp	a
0273   81F2 42 3E 82    			mov	[double_long_b+2],a
0274   81F5 14 3C 82    			mov	a,[double_long_b]
0275   81F8 3A 01       			mov	cl, 1
0276   81FA FD AA       			swp	a
0277   81FC FD E0       			rlc	a, cl
0278   81FE FD AA       			swp	a
0279   8200 42 3C 82    			mov	[double_long_b],a
0280   8203 09          			ret
0281   8204             
0282   8204             ;Subroutine to shift left one a 24-bit value
0283   8204             ;24-bit value in long_c
0284   8204 14 34 82    shift_left_long:	mov	a,[long_c+1]	;16-bit load, little endian
0285   8207 FD AA       			swp	a		;swap to make it fit the big-endian mantissa
0286   8209 FD 99       			shl	a
0287   820B FD AA       			swp	a
0288   820D 42 34 82    			mov	[long_c+1],a
0289   8210 14 32 82    			mov	a,[long_c-1]	;16-bit load, low byte in memory is garbage
0290   8213 3A 01       			mov	cl, 1
0291   8215 FD AA       			swp	a
0292   8217 FD E0       			rlc	a, cl
0293   8219 3D 33 82    			mov	[long_c],al	;discard high byte which is garbage
0294   821C 09          			ret
0295   821D             							
0296   821D             ;Variables
0297   821D 40 83 33 33 fp_a			.db	40h,83h,33h,33h	;IEEE 754 single-precision floating point number 0x40833333 = decimal 4.1
0298   8221 40 60 00 00 fp_b			.db	40h,60h,00h,00h	;IEEE 754 single-precision floating point number 0x40600000 = decimal 3.5
0299   8225 00 00 00 00 fp_c			.db	0,0,0,0	;IEEE 754 single-precision floating point number 0x4165999A = decimal 14.35
0300   8229 00          sign			.db	0
0301   822A 00          exponent_a		.db	0
0302   822B 00          exponent_b		.db	0
0303   822C 00          exponent_c		.db	0
0304   822D 00 00 00    long_a			.db	0,0,0		;24-bit integer
0305   8230 00 00 00    long_b			.db	0,0,0		;24-bit integer
0306   8233 00 00 00    long_c			.db	0,0,0		;24-bit integer
0307   8236 00 00 00 00 double_long_a	.db	0,0,0,0,0,0	;48-bit integer
0307   823A 00 00 
0308   823C 00 00 00 00 double_long_b	.db	0,0,0,0,0,0	;48-bit interger
0308   8240 00 00 
0309   8242             
0310   8242             .include "lib/stdio.asm"
0001+  8242             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  8242             ; stdio.s
0003+  8242             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  8242             .include "lib/string.asm"
0001++ 8242             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 8242             ; string.s
0003++ 8242             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 8242             
0005++ 8242             
0006++ 8242             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 8242             ; strrev
0008++ 8242             ; reverse a string
0009++ 8242             ; D = string address
0010++ 8242             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 8242             ; 01234
0012++ 8242             strrev:
0013++ 8242 4B          	pusha
0014++ 8243 07 89 82    	call strlen	; length in C
0015++ 8246 12          	mov a, c
0016++ 8247 AF 01 00    	cmp a, 1
0017++ 824A D0 64 82    	jleu strrev_end	; check string length. string len must be > 1
0018++ 824D 7D          	dec a
0019++ 824E FD 4E       	mov si, d	; beginning of string
0020++ 8250 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 8252 59          	add d, a	; end of string
0022++ 8253 12          	mov a, c
0023++ 8254 FD 9B       	shr a		; divide by 2
0024++ 8256 39          	mov c, a	; C now counts the steps
0025++ 8257             strrev_L0:
0026++ 8257 32          	mov bl, [d]	; save load right-side char into BL
0027++ 8258 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 8259 3E          	mov [d], al	; store left char into right side
0029++ 825A 1B          	mov al, bl
0030++ 825B F7          	stosb		; store right-side char into left-side; increase DI
0031++ 825C 7E          	dec c
0032++ 825D 7F          	dec d
0033++ 825E C2 00 00    	cmp c, 0
0034++ 8261 C7 57 82    	jne strrev_L0
0035++ 8264             strrev_end:
0036++ 8264 4C          	popa
0037++ 8265 09          	ret
0038++ 8266             	
0039++ 8266             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 8266             ; strchr
0041++ 8266             ; search string in D for char in AL
0042++ 8266             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 8266             strchr:
0044++ 8266             strchr_L0:
0045++ 8266 32          	mov bl, [d]
0046++ 8267 C1 00       	cmp bl, 0
0047++ 8269 C6 74 82    	je strchr_end
0048++ 826C BA          	cmp al, bl
0049++ 826D C6 74 82    	je strchr_end
0050++ 8270 79          	inc d
0051++ 8271 0A 66 82    	jmp strchr_L0
0052++ 8274             strchr_end:
0053++ 8274 1B          	mov al, bl
0054++ 8275 09          	ret
0055++ 8276             
0056++ 8276             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 8276             ; strstr
0058++ 8276             ; find sub-string
0059++ 8276             ; str1 in SI
0060++ 8276             ; str2 in DI
0061++ 8276             ; SI points to end of source string
0062++ 8276             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 8276             strstr:
0064++ 8276 DB          	push al
0065++ 8277 DA          	push d
0066++ 8278 E3          	push di
0067++ 8279             strstr_loop:
0068++ 8279 F3          	cmpsb					; compare a byte of the strings
0069++ 827A C7 85 82    	jne strstr_ret
0070++ 827D FC 00 00    	lea d, [di + 0]
0071++ 8280 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 8282 C7 79 82    	jne strstr_loop				; equal chars but not at end
0073++ 8285             strstr_ret:
0074++ 8285 F0          	pop di
0075++ 8286 E7          	pop d
0076++ 8287 E8          	pop al
0077++ 8288 09          	ret
0078++ 8289             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 8289             ; length of null terminated string
0080++ 8289             ; result in C
0081++ 8289             ; pointer in D
0082++ 8289             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 8289             strlen:
0084++ 8289 DA          	push d
0085++ 828A 38 00 00    	mov c, 0
0086++ 828D             strlen_L1:
0087++ 828D BD 00       	cmp byte [d], 0
0088++ 828F C6 97 82    	je strlen_ret
0089++ 8292 79          	inc d
0090++ 8293 78          	inc c
0091++ 8294 0A 8D 82    	jmp strlen_L1
0092++ 8297             strlen_ret:
0093++ 8297 E7          	pop d
0094++ 8298 09          	ret
0095++ 8299             
0096++ 8299             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 8299             ; STRCMP
0098++ 8299             ; compare two strings
0099++ 8299             ; str1 in SI
0100++ 8299             ; str2 in DI
0101++ 8299             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 8299             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 8299             strcmp:
0104++ 8299 DB          	push al
0105++ 829A DA          	push d
0106++ 829B E3          	push di
0107++ 829C E2          	push si
0108++ 829D             strcmp_loop:
0109++ 829D F3          	cmpsb					; compare a byte of the strings
0110++ 829E C7 A9 82    	jne strcmp_ret
0111++ 82A1 FB FF FF    	lea d, [si +- 1]
0112++ 82A4 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 82A6 C7 9D 82    	jne strcmp_loop				; equal chars but not at end
0114++ 82A9             strcmp_ret:
0115++ 82A9 EF          	pop si
0116++ 82AA F0          	pop di
0117++ 82AB E7          	pop d
0118++ 82AC E8          	pop al
0119++ 82AD 09          	ret
0120++ 82AE             
0121++ 82AE             
0122++ 82AE             ; STRCPY
0123++ 82AE             ; copy null terminated string from SI to DI
0124++ 82AE             ; source in SI
0125++ 82AE             ; destination in DI
0126++ 82AE             strcpy:
0127++ 82AE E2          	push si
0128++ 82AF E3          	push di
0129++ 82B0 DB          	push al
0130++ 82B1             strcpy_L1:
0131++ 82B1 F6          	lodsb
0132++ 82B2 F7          	stosb
0133++ 82B3 B9 00       	cmp al, 0
0134++ 82B5 C7 B1 82    	jne strcpy_L1
0135++ 82B8             strcpy_end:
0136++ 82B8 E8          	pop al
0137++ 82B9 F0          	pop di
0138++ 82BA EF          	pop si
0139++ 82BB 09          	ret
0140++ 82BC             
0141++ 82BC             ; STRCAT
0142++ 82BC             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 82BC             ; source in SI
0144++ 82BC             ; destination in DI
0145++ 82BC             strcat:
0146++ 82BC E2          	push si
0147++ 82BD E3          	push di
0148++ 82BE D7          	push a
0149++ 82BF DA          	push d
0150++ 82C0 50          	mov a, di
0151++ 82C1 3C          	mov d, a
0152++ 82C2             strcat_goto_end_L1:
0153++ 82C2 BD 00       	cmp byte[d], 0
0154++ 82C4 C6 CB 82    	je strcat_start
0155++ 82C7 79          	inc d
0156++ 82C8 0A C2 82    	jmp strcat_goto_end_L1
0157++ 82CB             strcat_start:
0158++ 82CB FD 50       	mov di, d
0159++ 82CD             strcat_L1:
0160++ 82CD F6          	lodsb
0161++ 82CE F7          	stosb
0162++ 82CF B9 00       	cmp al, 0
0163++ 82D1 C7 CD 82    	jne strcat_L1
0164++ 82D4             strcat_end:
0165++ 82D4 E7          	pop d
0166++ 82D5 E4          	pop a
0167++ 82D6 F0          	pop di
0168++ 82D7 EF          	pop si
0169++ 82D8 09          	ret
0005+  82D9             
0006+  82D9 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  82DD 34 35 36 37 
0006+  82E1 38 39 41 42 
0006+  82E5 43 44 45 46 
0007+  82E9 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  82ED 1B 5B 48 00 
0008+  82F1             
0009+  82F1 01 00       table_power:.dw 1
0010+  82F3 0A 00       			.dw 10
0011+  82F5 64 00       			.dw 100
0012+  82F7 E8 03       			.dw 1000
0013+  82F9 10 27       			.dw 10000
0014+  82FB             
0015+  82FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  82FB             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  82FB             ; ASCII in BL
0018+  82FB             ; result in AL
0019+  82FB             ; ascii for F = 0100 0110
0020+  82FB             ; ascii for 9 = 0011 1001
0021+  82FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  82FB             hex_ascii_encode:
0023+  82FB 1B          	mov al, bl
0024+  82FC 93 40       	test al, $40				; test if letter or number
0025+  82FE C7 04 83    	jnz hex_letter
0026+  8301 87 0F       	and al, $0F				; get number
0027+  8303 09          	ret
0028+  8304             hex_letter:
0029+  8304 87 0F       	and al, $0F				; get letter
0030+  8306 6A 09       	add al, 9
0031+  8308 09          	ret
0032+  8309             
0033+  8309             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  8309             ; ATOI
0035+  8309             ; 2 letter hex string in B
0036+  8309             ; 8bit integer returned in AL
0037+  8309             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  8309             atoi:
0039+  8309 D8          	push b
0040+  830A 07 FB 82    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  830D 30          	mov bl, bh
0042+  830E DB          	push al					; save a
0043+  830F 07 FB 82    	call hex_ascii_encode
0044+  8312 EA          	pop bl	
0045+  8313 FD 9E 04    	shl al, 4
0046+  8316 8C          	or al, bl
0047+  8317 E5          	pop b
0048+  8318 09          	ret	
0049+  8319             
0050+  8319             
0051+  8319             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  8319             ; printf
0053+  8319             ; no need for explanations!
0054+  8319             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  8319             printf:
0056+  8319 09          	ret
0057+  831A             
0058+  831A             
0059+  831A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  831A             ; scanf
0061+  831A             ; no need for explanations!
0062+  831A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  831A             scanf:
0064+  831A 09          	ret
0065+  831B             
0066+  831B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  831B             ; ITOA
0068+  831B             ; 8bit value in BL
0069+  831B             ; 2 byte ASCII result in A
0070+  831B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  831B             itoa:
0072+  831B DA          	push d
0073+  831C D8          	push b
0074+  831D A7 00       	mov bh, 0
0075+  831F FD A4 04    	shr bl, 4	
0076+  8322 74          	mov d, b
0077+  8323 1F D9 82    	mov al, [d + s_hex_digits]
0078+  8326 23          	mov ah, al
0079+  8327             	
0080+  8327 E5          	pop b
0081+  8328 D8          	push b
0082+  8329 A7 00       	mov bh, 0
0083+  832B FD 87 0F    	and bl, $0F
0084+  832E 74          	mov d, b
0085+  832F 1F D9 82    	mov al, [d + s_hex_digits]
0086+  8332 E5          	pop b
0087+  8333 E7          	pop d
0088+  8334 09          	ret
0089+  8335             
0090+  8335             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  8335             ; HEX STRING TO BINARY
0092+  8335             ; di = destination address
0093+  8335             ; si = source
0094+  8335             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  8335             hex_to_int:
0096+  8335             hex_to_int_L1:
0097+  8335 F6          	lodsb					; load from [SI] to AL
0098+  8336 B9 00       	cmp al, 0				; check if ASCII 0
0099+  8338 C6 45 83    	jz hex_to_int_ret
0100+  833B 36          	mov bh, al
0101+  833C F6          	lodsb
0102+  833D 2F          	mov bl, al
0103+  833E 07 09 83    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  8341 F7          	stosb					; store AL to [DI]
0105+  8342 0A 35 83    	jmp hex_to_int_L1
0106+  8345             hex_to_int_ret:
0107+  8345 09          	ret		
0108+  8346             
0109+  8346             
0110+  8346             
0111+  8346             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  8346             ; GETCHAR
0113+  8346             ; char in ah
0114+  8346             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  8346             getchar:
0116+  8346 DB          	push al
0117+  8347             getchar_retry:
0118+  8347 FD 0C       	sti
0119+  8349 19 01       	mov al, 1
0120+  834B 05 03       	syscall sys_io			; receive in AH
0121+  834D B9 00       	cmp al, 0			; check if any char was receive
0122+  834F C6 47 83    	je getchar_retry
0123+  8352 E8          	pop al
0124+  8353 09          	ret
0125+  8354             
0126+  8354             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  8354             ; PUTCHAR
0128+  8354             ; char in ah
0129+  8354             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  8354             putchar:
0131+  8354 D7          	push a
0132+  8355 19 00       	mov al, 0
0133+  8357 05 03       	syscall sys_io			; char in AH
0134+  8359 E4          	pop a
0135+  835A 09          	ret
0136+  835B             
0137+  835B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  835B             ;; INPUT A STRING
0139+  835B             ;; terminates with null
0140+  835B             ;; pointer in D
0141+  835B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  835B             gets:
0143+  835B D7          	push a
0144+  835C DA          	push d
0145+  835D             gets_loop:
0146+  835D FD 0C       	sti
0147+  835F 19 01       	mov al, 1
0148+  8361 05 03       	syscall sys_io			; receive in AH
0149+  8363 B9 00       	cmp al, 0				; check error code (AL)
0150+  8365 C6 5D 83    	je gets_loop			; if no char received, retry
0151+  8368             
0152+  8368 76 1B       	cmp ah, 27
0153+  836A C6 8B 83    	je gets_telnet_escape
0154+  836D 76 0A       	cmp ah, $0A				; LF
0155+  836F C6 E4 83    	je gets_end
0156+  8372 76 0D       	cmp ah, $0D				; CR
0157+  8374 C6 E4 83    	je gets_end
0158+  8377 76 5C       	cmp ah, $5C				; '\\'
0159+  8379 C6 BB 83    	je gets_escape
0160+  837C             	
0161+  837C 76 08       	cmp ah, $08			; check for backspace
0162+  837E C6 87 83    	je gets_backspace
0163+  8381             
0164+  8381 1A          	mov al, ah
0165+  8382 3E          	mov [d], al
0166+  8383 79          	inc d
0167+  8384 0A 5D 83    	jmp gets_loop
0168+  8387             gets_backspace:
0169+  8387 7F          	dec d
0170+  8388 0A 5D 83    	jmp gets_loop
0171+  838B             gets_telnet_escape:
0172+  838B FD 0C       	sti
0173+  838D 19 01       	mov al, 1
0174+  838F 05 03       	syscall sys_io				; receive in AH without echo
0175+  8391 B9 00       	cmp al, 0					; check error code (AL)
0176+  8393 C6 8B 83    	je gets_telnet_escape		; if no char received, retry
0177+  8396 76 5B       	cmp ah, '['
0178+  8398 C7 5D 83    	jne gets_loop
0179+  839B             gets_telnet_escape_phase2:
0180+  839B FD 0C       	sti
0181+  839D 19 01       	mov al, 1
0182+  839F 05 03       	syscall sys_io					; receive in AH without echo
0183+  83A1 B9 00       	cmp al, 0						; check error code (AL)
0184+  83A3 C6 9B 83    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  83A6 76 44       	cmp ah, 'D'
0186+  83A8 C6 B3 83    	je gets_left_arrow
0187+  83AB 76 43       	cmp ah, 'C'
0188+  83AD C6 B7 83    	je gets_right_arrow
0189+  83B0 0A 5D 83    	jmp gets_loop
0190+  83B3             gets_left_arrow:
0191+  83B3 7F          	dec d
0192+  83B4 0A 5D 83    	jmp gets_loop
0193+  83B7             gets_right_arrow:
0194+  83B7 79          	inc d
0195+  83B8 0A 5D 83    	jmp gets_loop
0196+  83BB             gets_escape:
0197+  83BB FD 0C       	sti
0198+  83BD 19 01       	mov al, 1
0199+  83BF 05 03       	syscall sys_io			; receive in AH
0200+  83C1 B9 00       	cmp al, 0				; check error code (AL)
0201+  83C3 C6 BB 83    	je gets_escape			; if no char received, retry
0202+  83C6 76 6E       	cmp ah, 'n'
0203+  83C8 C6 D6 83    	je gets_LF
0204+  83CB 76 72       	cmp ah, 'r'
0205+  83CD C6 DD 83    	je gets_CR
0206+  83D0 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  83D1 3E          	mov [d], al
0208+  83D2 79          	inc d
0209+  83D3 0A 5D 83    	jmp gets_loop
0210+  83D6             gets_LF:
0211+  83D6 19 0A       	mov al, $0A
0212+  83D8 3E          	mov [d], al
0213+  83D9 79          	inc d
0214+  83DA 0A 5D 83    	jmp gets_loop
0215+  83DD             gets_CR:
0216+  83DD 19 0D       	mov al, $0D
0217+  83DF 3E          	mov [d], al
0218+  83E0 79          	inc d
0219+  83E1 0A 5D 83    	jmp gets_loop
0220+  83E4             gets_end:
0221+  83E4 19 00       	mov al, 0
0222+  83E6 3E          	mov [d], al				; terminate string
0223+  83E7 E7          	pop d
0224+  83E8 E4          	pop a
0225+  83E9 09          	ret
0226+  83EA             
0227+  83EA             
0228+  83EA             
0229+  83EA             
0230+  83EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  83EA             ;; INPUT TEXT
0232+  83EA             ;; terminated with CTRL+D
0233+  83EA             ;; pointer in D
0234+  83EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  83EA             gettxt:
0236+  83EA D7          	push a
0237+  83EB DA          	push d
0238+  83EC             gettxt_loop:
0239+  83EC 19 01       	mov al, 1
0240+  83EE 05 03       	syscall sys_io			; receive in AH
0241+  83F0 B9 00       	cmp al, 0				; check error code (AL)
0242+  83F2 C6 EC 83    	je gettxt_loop		; if no char received, retry
0243+  83F5 76 04       	cmp ah, 4			; EOT
0244+  83F7 C6 35 84    	je gettxt_end
0245+  83FA 76 08       	cmp ah, $08			; check for backspace
0246+  83FC C6 31 84    	je gettxt_backspace
0247+  83FF 76 5C       	cmp ah, $5C				; '\\'
0248+  8401 C6 0A 84    	je gettxt_escape
0249+  8404 1A          	mov al, ah
0250+  8405 3E          	mov [d], al
0251+  8406 79          	inc d
0252+  8407 0A EC 83    	jmp gettxt_loop
0253+  840A             gettxt_escape:
0254+  840A 19 01       	mov al, 1
0255+  840C 05 03       	syscall sys_io			; receive in AH
0256+  840E B9 00       	cmp al, 0				; check error code (AL)
0257+  8410 C6 0A 84    	je gettxt_escape		; if no char received, retry
0258+  8413 76 6E       	cmp ah, 'n'
0259+  8415 C6 23 84    	je gettxt_LF
0260+  8418 76 72       	cmp ah, 'r'
0261+  841A C6 2A 84    	je gettxt_CR
0262+  841D 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  841E 3E          	mov [d], al
0264+  841F 79          	inc d
0265+  8420 0A EC 83    	jmp gettxt_loop
0266+  8423             gettxt_LF:
0267+  8423 19 0A       	mov al, $0A
0268+  8425 3E          	mov [d], al
0269+  8426 79          	inc d
0270+  8427 0A EC 83    	jmp gettxt_loop
0271+  842A             gettxt_CR:
0272+  842A 19 0D       	mov al, $0D
0273+  842C 3E          	mov [d], al
0274+  842D 79          	inc d
0275+  842E 0A EC 83    	jmp gettxt_loop
0276+  8431             gettxt_backspace:
0277+  8431 7F          	dec d
0278+  8432 0A EC 83    	jmp gettxt_loop
0279+  8435             gettxt_end:
0280+  8435 19 00       	mov al, 0
0281+  8437 3E          	mov [d], al				; terminate string
0282+  8438 E7          	pop d
0283+  8439 E4          	pop a
0284+  843A 09          	ret
0285+  843B             
0286+  843B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  843B             ; PRINT NEW LINE
0288+  843B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  843B             printnl:
0290+  843B D7          	push a
0291+  843C 10 00 0A    	mov a, $0A00
0292+  843F 05 03       	syscall sys_io
0293+  8441 10 00 0D    	mov a, $0D00
0294+  8444 05 03       	syscall sys_io
0295+  8446 E4          	pop a
0296+  8447 09          	ret
0297+  8448             
0298+  8448             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  8448             ; strtoint
0300+  8448             ; 4 digit hex string number in d
0301+  8448             ; integer returned in A
0302+  8448             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  8448             strtointx:
0304+  8448 D8          	push b
0305+  8449 32          	mov bl, [d]
0306+  844A 37          	mov bh, bl
0307+  844B 33 01 00    	mov bl, [d + 1]
0308+  844E 07 09 83    	call atoi				; convert to int in AL
0309+  8451 23          	mov ah, al				; move to AH
0310+  8452 33 02 00    	mov bl, [d + 2]
0311+  8455 37          	mov bh, bl
0312+  8456 33 03 00    	mov bl, [d + 3]
0313+  8459 07 09 83    	call atoi				; convert to int in AL
0314+  845C E5          	pop b
0315+  845D 09          	ret
0316+  845E             
0317+  845E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  845E             ; strtoint
0319+  845E             ; 5 digit base10 string number in d
0320+  845E             ; integer returned in A
0321+  845E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  845E             strtoint:
0323+  845E E2          	push si
0324+  845F D8          	push b
0325+  8460 D9          	push c
0326+  8461 DA          	push d
0327+  8462 07 89 82    	call strlen			; get string length in C
0328+  8465 7E          	dec c
0329+  8466 FD 4E       	mov si, d
0330+  8468 12          	mov a, c
0331+  8469 FD 99       	shl a
0332+  846B 3B F1 82    	mov d, table_power
0333+  846E 59          	add d, a
0334+  846F 38 00 00    	mov c, 0
0335+  8472             strtoint_L0:
0336+  8472 F6          	lodsb			; load ASCII to al
0337+  8473 B9 00       	cmp al, 0
0338+  8475 C6 88 84    	je strtoint_end
0339+  8478 6F 30       	sub al, $30		; make into integer
0340+  847A 22 00       	mov ah, 0
0341+  847C 2A          	mov b, [d]
0342+  847D AC          	mul a, b			; result in B since it fits in 16bits
0343+  847E 11          	mov a, b
0344+  847F 28          	mov b, c
0345+  8480 54          	add a, b
0346+  8481 39          	mov c, a
0347+  8482 63 02 00    	sub d, 2
0348+  8485 0A 72 84    	jmp strtoint_L0
0349+  8488             strtoint_end:
0350+  8488 12          	mov a, c
0351+  8489 E7          	pop d
0352+  848A E6          	pop c
0353+  848B E5          	pop b
0354+  848C EF          	pop si
0355+  848D 09          	ret
0356+  848E             
0357+  848E             
0358+  848E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  848E             ; PRINT NULL TERMINATED STRING
0360+  848E             ; pointer in D
0361+  848E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  848E             puts:
0363+  848E D7          	push a
0364+  848F DA          	push d
0365+  8490             puts_L1:
0366+  8490 1E          	mov al, [d]
0367+  8491 B9 00       	cmp al, 0
0368+  8493 C6 9F 84    	jz puts_END
0369+  8496 23          	mov ah, al
0370+  8497 19 00       	mov al, 0
0371+  8499 05 03       	syscall sys_io
0372+  849B 79          	inc d
0373+  849C 0A 90 84    	jmp puts_L1
0374+  849F             puts_END:
0375+  849F E7          	pop d
0376+  84A0 E4          	pop a
0377+  84A1 09          	ret
0378+  84A2             
0379+  84A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  84A2             ; PRINT N SIZE STRING
0381+  84A2             ; pointer in D
0382+  84A2             ; size in C
0383+  84A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  84A2             putsn:
0385+  84A2 DB          	push al
0386+  84A3 DA          	push d
0387+  84A4 D9          	push c
0388+  84A5             putsn_L0:
0389+  84A5 1E          	mov al, [d]
0390+  84A6 23          	mov ah, al
0391+  84A7 19 00       	mov al, 0
0392+  84A9 05 03       	syscall sys_io
0393+  84AB 79          	inc d
0394+  84AC 7E          	dec c	
0395+  84AD C2 00 00    	cmp c, 0
0396+  84B0 C7 A5 84    	jne putsn_L0
0397+  84B3             putsn_end:
0398+  84B3 E6          	pop c
0399+  84B4 E7          	pop d
0400+  84B5 E8          	pop al
0401+  84B6 09          	ret
0402+  84B7             
0403+  84B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  84B7             ; print 16bit decimal number
0405+  84B7             ; input number in A
0406+  84B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  84B7             print_u16d:
0408+  84B7 D7          	push a
0409+  84B8 D8          	push b
0410+  84B9 26 10 27    	mov b, 10000
0411+  84BC AE          	div a, b			; get 10000's coeff.
0412+  84BD 07 DF 84    	call print_number
0413+  84C0 11          	mov a, b
0414+  84C1 26 E8 03    	mov b, 1000
0415+  84C4 AE          	div a, b			; get 1000's coeff.
0416+  84C5 07 DF 84    	call print_number
0417+  84C8 11          	mov a, b
0418+  84C9 26 64 00    	mov b, 100
0419+  84CC AE          	div a, b
0420+  84CD 07 DF 84    	call print_number
0421+  84D0 11          	mov a, b
0422+  84D1 26 0A 00    	mov b, 10
0423+  84D4 AE          	div a, b
0424+  84D5 07 DF 84    	call print_number
0425+  84D8 1B          	mov al, bl			; 1's coeff in bl
0426+  84D9 07 DF 84    	call print_number
0427+  84DC E5          	pop b
0428+  84DD E4          	pop a
0429+  84DE 09          	ret
0430+  84DF             
0431+  84DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0432+  84DF             ; print AL
0433+  84DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0434+  84DF             print_number:
0435+  84DF 6A 30       	add al, $30
0436+  84E1 23          	mov ah, al
0437+  84E2 07 54 83    	call putchar
0438+  84E5 09          	ret
0439+  84E6             
0440+  84E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0441+  84E6             ; PRINT 16BIT HEX INTEGER
0442+  84E6             ; integer value in reg B
0443+  84E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0444+  84E6             print_u16x:
0445+  84E6 D7          	push a
0446+  84E7 D8          	push b
0447+  84E8 DD          	push bl
0448+  84E9 30          	mov bl, bh
0449+  84EA 07 1B 83    	call itoa				; convert bh to char in A
0450+  84ED 2F          	mov bl, al				; save al
0451+  84EE 19 00       	mov al, 0
0452+  84F0 05 03       	syscall sys_io				; display AH
0453+  84F2 24          	mov ah, bl				; retrieve al
0454+  84F3 19 00       	mov al, 0
0455+  84F5 05 03       	syscall sys_io				; display AL
0456+  84F7             
0457+  84F7 EA          	pop bl
0458+  84F8 07 1B 83    	call itoa				; convert bh to char in A
0459+  84FB 2F          	mov bl, al				; save al
0460+  84FC 19 00       	mov al, 0
0461+  84FE 05 03       	syscall sys_io				; display AH
0462+  8500 24          	mov ah, bl				; retrieve al
0463+  8501 19 00       	mov al, 0
0464+  8503 05 03       	syscall sys_io				; display AL
0465+  8505             
0466+  8505 E5          	pop b
0467+  8506 E4          	pop a
0468+  8507 09          	ret
0469+  8508             
0470+  8508             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0471+  8508             ; INPUT 16BIT HEX INTEGER
0472+  8508             ; read 16bit integer into A
0473+  8508             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0474+  8508             scan_u16x:
0475+  8508 F8 10 00    	enter 16
0476+  850B D8          	push b
0477+  850C DA          	push d
0478+  850D             
0479+  850D FA F1 FF    	lea d, [bp + -15]
0480+  8510 07 5B 83    	call gets				; get number
0481+  8513             
0482+  8513 32          	mov bl, [d]
0483+  8514 37          	mov bh, bl
0484+  8515 33 01 00    	mov bl, [d + 1]
0485+  8518 07 09 83    	call atoi				; convert to int in AL
0486+  851B 23          	mov ah, al				; move to AH
0487+  851C             
0488+  851C 33 02 00    	mov bl, [d + 2]
0489+  851F 37          	mov bh, bl
0490+  8520 33 03 00    	mov bl, [d + 3]
0491+  8523 07 09 83    	call atoi				; convert to int in AL
0492+  8526             
0493+  8526 E7          	pop d
0494+  8527 E5          	pop b
0495+  8528 F9          	leave
0496+  8529 09          	ret
0497+  852A             
0498+  852A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0499+  852A             ; PRINT 8bit HEX INTEGER
0500+  852A             ; integer value in reg bl
0501+  852A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0502+  852A             print_u8x:
0503+  852A D7          	push a
0504+  852B DD          	push bl
0505+  852C             
0506+  852C 07 1B 83    	call itoa				; convert bl to char in A
0507+  852F 2F          	mov bl, al				; save al
0508+  8530 19 00       	mov al, 0
0509+  8532 05 03       	syscall sys_io				; display AH
0510+  8534 24          	mov ah, bl				; retrieve al
0511+  8535 19 00       	mov al, 0
0512+  8537 05 03       	syscall sys_io				; display AL
0513+  8539             
0514+  8539 EA          	pop bl
0515+  853A E4          	pop a
0516+  853B 09          	ret
0517+  853C             
0518+  853C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0519+  853C             ; print 8bit decimal unsigned number
0520+  853C             ; input number in AL
0521+  853C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0522+  853C             print_u8d:
0523+  853C D7          	push a
0524+  853D D8          	push b
0525+  853E             
0526+  853E 22 00       	mov ah, 0
0527+  8540 26 64 00    	mov b, 100
0528+  8543 AE          	div a, b
0529+  8544 D8          	push b			; save remainder
0530+  8545 B9 00       	cmp al, 0
0531+  8547 C6 51 85    	je skip100
0532+  854A 6A 30       	add al, $30
0533+  854C 23          	mov ah, al
0534+  854D 19 00       	mov al, 0
0535+  854F 05 03       	syscall sys_io	; print coeff
0536+  8551             skip100:
0537+  8551 E4          	pop a
0538+  8552 22 00       	mov ah, 0
0539+  8554 26 0A 00    	mov b, 10
0540+  8557 AE          	div a, b
0541+  8558 D8          	push b			; save remainder
0542+  8559 B9 00       	cmp al, 0
0543+  855B C6 65 85    	je skip10
0544+  855E 6A 30       	add al, $30
0545+  8560 23          	mov ah, al
0546+  8561 19 00       	mov al, 0
0547+  8563 05 03       	syscall sys_io	; print coeff
0548+  8565             skip10:
0549+  8565 E4          	pop a
0550+  8566 1B          	mov al, bl
0551+  8567 6A 30       	add al, $30
0552+  8569 23          	mov ah, al
0553+  856A 19 00       	mov al, 0
0554+  856C 05 03       	syscall sys_io	; print coeff
0555+  856E E5          	pop b
0556+  856F E4          	pop a
0557+  8570 09          	ret
0558+  8571             
0559+  8571             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0560+  8571             ; INPUT 8BIT HEX INTEGER
0561+  8571             ; read 8bit integer into AL
0562+  8571             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0563+  8571             scan_u8x:
0564+  8571 F8 04 00    	enter 4
0565+  8574 D8          	push b
0566+  8575 DA          	push d
0567+  8576             
0568+  8576 FA FD FF    	lea d, [bp + -3]
0569+  8579 07 5B 83    	call gets				; get number
0570+  857C             
0571+  857C 32          	mov bl, [d]
0572+  857D 37          	mov bh, bl
0573+  857E 33 01 00    	mov bl, [d + 1]
0574+  8581 07 09 83    	call atoi				; convert to int in AL
0575+  8584             
0576+  8584 E7          	pop d
0577+  8585 E5          	pop b
0578+  8586 F9          	leave
0579+  8587 09          	ret
0580+  8588             
0581+  8588             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0582+  8588             ; input decimal number
0583+  8588             ; result in A
0584+  8588             ; 655'\0'
0585+  8588             ; low--------high
0586+  8588             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  8588             scan_u16d:
0588+  8588 F8 08 00    	enter 8
0589+  858B E2          	push si
0590+  858C D8          	push b
0591+  858D D9          	push c
0592+  858E DA          	push d
0593+  858F FA F9 FF    	lea d, [bp +- 7]
0594+  8592 07 5B 83    	call gets
0595+  8595 07 89 82    	call strlen			; get string length in C
0596+  8598 7E          	dec c
0597+  8599 FD 4E       	mov si, d
0598+  859B 12          	mov a, c
0599+  859C FD 99       	shl a
0600+  859E 3B F1 82    	mov d, table_power
0601+  85A1 59          	add d, a
0602+  85A2 38 00 00    	mov c, 0
0603+  85A5             mul_loop:
0604+  85A5 F6          	lodsb			; load ASCII to al
0605+  85A6 B9 00       	cmp al, 0
0606+  85A8 C6 BB 85    	je mul_exit
0607+  85AB 6F 30       	sub al, $30		; make into integer
0608+  85AD 22 00       	mov ah, 0
0609+  85AF 2A          	mov b, [d]
0610+  85B0 AC          	mul a, b			; result in B since it fits in 16bits
0611+  85B1 11          	mov a, b
0612+  85B2 28          	mov b, c
0613+  85B3 54          	add a, b
0614+  85B4 39          	mov c, a
0615+  85B5 63 02 00    	sub d, 2
0616+  85B8 0A A5 85    	jmp mul_loop
0617+  85BB             mul_exit:
0618+  85BB 12          	mov a, c
0619+  85BC E7          	pop d
0620+  85BD E6          	pop c
0621+  85BE E5          	pop b
0622+  85BF EF          	pop si
0623+  85C0 F9          	leave
0624+  85C1 09          	ret
0311   85C2             
0312   85C2             .end
tasm: Number of errors = 0
