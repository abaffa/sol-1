0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;; cat /etc/sh.conf
0005   0000             ;; cat > test.txt
0006   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007   0000             
0008   0400             .org PROC_TEXT_ORG			; origin at 1024
0009   0400             
0010   0400             cmd_cat:
0011   0400 10 00 00    	mov a, 0
0012   0403 42 81 06    	mov [prog], a			; move tokennizer pointer to the beginning of the arguments area (address 0)
0013   0406 07 E2 04    	call get_token
0014   0409             
0015   0409 BC 84 06 07 	cmp byte[tok], TOK_ANGLE
0016   040D C6 3A 04    	je cmd_cat_write
0017   0410             cmd_cat_read:
0018   0410 07 68 06    	call putback
0019   0413 07 8B 04    	call get_path
0020   0416 3B 85 06    	mov d, tokstr
0021   0419 FD 4F A2 0B 	mov di, transient_area
0022   041D 19 14       	mov al, 20
0023   041F 05 04       	syscall sys_fileio				; read textfile into shell buffer
0024   0421 3B A2 0B    	mov d, transient_area
0025   0424 07 D1 09    	call puts					; print textfile to stdout
0026   0427 07 E2 04    	call get_token
0027   042A 1D 84 06    	mov al, [tok]
0028   042D B9 14       	cmp al, TOK_END
0029   042F C6 35 04    	je cmd_cat_end
0030   0432 0A 10 04    	jmp cmd_cat_read
0031   0435             cmd_cat_end:
0032   0435 07 68 06    	call putback
0033   0438 05 0B       	syscall sys_terminate_proc
0034   043A             cmd_cat_write:
0035   043A 07 E2 04    	call get_token
0036   043D FD 4D 85 06 	mov si, tokstr
0037   0441 FD 4F A3 0B 	mov di, transient_area + 1
0038   0445 07 F1 07    	call strcpy				; copy filename
0039   0448 3B A2 0D    	mov d, transient_area + 512		; get text contents
0040   044B 07 2D 09    	call gettxt
0041   044E 3B A2 0B    	mov d, transient_area
0042   0451 19 05       	mov al, 5
0043   0453 05 04       	syscall sys_fileio
0044   0455 05 0B       	syscall sys_terminate_proc
0045   0457             
0046   0457             
0047   0457             .include "token.asm"
0001+  0457             TOKTYP_IDENTIFIER	.equ 0
0002+  0457             TOKTYP_KEYWORD		.equ 1
0003+  0457             TOKTYP_DELIMITER	.equ 2
0004+  0457             TOKTYP_STRING		.equ 3
0005+  0457             TOKTYP_CHAR			.equ 4
0006+  0457             TOKTYP_NUMERIC		.equ 5
0007+  0457             TOKTYP_END			.equ 6
0008+  0457             
0009+  0457             TOK_NULL			.equ 0
0010+  0457             TOK_FSLASH			.equ 1
0011+  0457             TOK_TIMES 			.equ 2
0012+  0457             TOK_PLUS 			.equ 3
0013+  0457             TOK_MINUS 			.equ 4
0014+  0457             TOK_DOT				.equ 5
0015+  0457             TOK_SEMI			.equ 6
0016+  0457             TOK_ANGLE			.equ 7
0017+  0457             TOK_TILDE			.equ 8
0018+  0457             TOK_EQUAL			.equ 9
0019+  0457             TOK_COLON			.equ 10
0020+  0457             TOK_COMMA			.equ 11
0021+  0457             
0022+  0457             TOK_END				.equ 20
0023+  0457             
0024+  0457             
0025+  0457             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0457             ;; read a full command argment from shell input buffer
0027+  0457             ;; argument is written into tokstr
0028+  0457             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  0457             get_arg:
0030+  0457 D7          	push a
0031+  0458 E2          	push si
0032+  0459 E3          	push di
0033+  045A 19 00       	mov al, 0
0034+  045C 3D 85 06    	mov [tokstr], al			; nullify tokstr string
0035+  045F 14 81 06    	mov a, [prog]
0036+  0462 4D          	mov si, a
0037+  0463 FD 4F 85 06 	mov di, tokstr
0038+  0467             get_arg_skip_spaces:
0039+  0467 F6          	lodsb
0040+  0468 07 7B 0B    	call isspace
0041+  046B C6 67 04    	je get_arg_skip_spaces
0042+  046E             get_arg_L0:
0043+  046E B9 3B       	cmp al, $3B				; check if is ';'
0044+  0470 C6 7D 04    	je get_arg_end
0045+  0473 B9 00       	cmp al, 0
0046+  0475 C6 7D 04    	je get_arg_end			; check if end of input
0047+  0478 F7          	stosb
0048+  0479 F6          	lodsb
0049+  047A 0A 6E 04    	jmp get_arg_L0
0050+  047D             get_arg_end:
0051+  047D 19 00       	mov al, 0
0052+  047F F7          	stosb
0053+  0480 D5 01 00    	sub si, 1
0054+  0483 4E          	mov a, si
0055+  0484 42 81 06    	mov [prog], a		; update pointer
0056+  0487 F0          	pop di
0057+  0488 EF          	pop si
0058+  0489 E4          	pop a
0059+  048A 09          	ret
0060+  048B             
0061+  048B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  048B             ;; read a path formation from shell input buffer
0063+  048B             ;; path is written into tokstr
0064+  048B             ;; /usr/bin
0065+  048B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  048B             get_path:
0067+  048B D7          	push a
0068+  048C E2          	push si
0069+  048D E3          	push di
0070+  048E 19 00       	mov al, 0
0071+  0490 3D 85 06    	mov [tokstr], al			; nullify tokstr string
0072+  0493 14 81 06    	mov a, [prog]
0073+  0496 4D          	mov si, a
0074+  0497 FD 4F 85 06 	mov di, tokstr
0075+  049B             get_path_skip_spaces:
0076+  049B F6          	lodsb
0077+  049C 07 7B 0B    	call isspace
0078+  049F C6 9B 04    	je get_path_skip_spaces
0079+  04A2             get_path_is_pathchar:
0080+  04A2 F7          	stosb
0081+  04A3 F6          	lodsb
0082+  04A4 07 05 0B    	call isalnum			;check if is alphanumeric
0083+  04A7 C6 A2 04    	je get_path_is_pathchar
0084+  04AA B9 2F       	cmp al, '/'				; check if is '/'
0085+  04AC C6 A2 04    	je get_path_is_pathchar
0086+  04AF 19 00       	mov al, 0
0087+  04B1 F7          	stosb
0088+  04B2 D5 01 00    	sub si, 1
0089+  04B5 4E          	mov a, si
0090+  04B6 42 81 06    	mov [prog], a		; update pointer
0091+  04B9             get_path_end:
0092+  04B9 F0          	pop di
0093+  04BA EF          	pop si
0094+  04BB E4          	pop a
0095+  04BC 09          	ret
0096+  04BD             
0097+  04BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  04BD             ;; read a line
0099+  04BD             ;; line is written into tokstr
0100+  04BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  04BD             get_line:
0102+  04BD D7          	push a
0103+  04BE E2          	push si
0104+  04BF E3          	push di
0105+  04C0 19 00       	mov al, 0
0106+  04C2 3D 85 06    	mov [tokstr], al			; nullify tokstr string
0107+  04C5 14 81 06    	mov a, [prog]
0108+  04C8 4D          	mov si, a
0109+  04C9 FD 4F 85 06 	mov di, tokstr
0110+  04CD             get_line_L0:
0111+  04CD F6          	lodsb
0112+  04CE B9 0A       	cmp al, $0A		; check for new line
0113+  04D0 C6 D7 04    	je get_line_exit
0114+  04D3 F7          	stosb
0115+  04D4 0A CD 04    	jmp get_line_L0
0116+  04D7             get_line_exit:
0117+  04D7 19 00       	mov al, 0
0118+  04D9 F7          	stosb
0119+  04DA 4E          	mov a, si
0120+  04DB 42 81 06    	mov [prog], a		; update pointer
0121+  04DE F0          	pop di
0122+  04DF EF          	pop si
0123+  04E0 E4          	pop a
0124+  04E1 09          	ret
0125+  04E2             
0126+  04E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  04E2             ;; token parser
0128+  04E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  04E2             get_token:
0130+  04E2 D7          	push a
0131+  04E3 DA          	push d
0132+  04E4 E2          	push si
0133+  04E5 E3          	push di
0134+  04E6 19 00       	mov al, 0
0135+  04E8 3D 85 06    	mov [tokstr], al			; nullify tokstr string
0136+  04EB 19 00       	mov al, TOK_NULL
0137+  04ED 3D 84 06    	mov [tok], al				; nullify token
0138+  04F0 14 81 06    	mov a, [prog]
0139+  04F3 4D          	mov si, a
0140+  04F4 FD 4F 85 06 	mov di, tokstr
0141+  04F8             get_tok_skip_spaces:
0142+  04F8 F6          	lodsb
0143+  04F9 07 7B 0B    	call isspace
0144+  04FC C6 F8 04    	je get_tok_skip_spaces
0145+  04FF B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  0501 C6 E6 05    	je get_token_end
0147+  0504 B9 23       	cmp al, '#'			; comments!
0148+  0506 C6 14 06    	je get_tok_comment
0149+  0509 07 05 0B    	call isalnum
0150+  050C C6 F3 05    	jz is_alphanumeric
0151+  050F             ; other token types
0152+  050F             get_token_slash:
0153+  050F B9 2F       	cmp al, '/'				; check if '/'
0154+  0511 C7 29 05    	jne get_token_minus
0155+  0514 F7          	stosb					; store '/' into token string
0156+  0515 19 00       	mov al, 0
0157+  0517 F7          	stosb					; terminate token string
0158+  0518 19 01       	mov al, TOK_FSLASH
0159+  051A 3D 84 06    	mov [tok], al			
0160+  051D 19 02       	mov al, TOKTYP_DELIMITER
0161+  051F 3D 83 06    	mov [toktyp], al
0162+  0522 4E          	mov a, si
0163+  0523 42 81 06    	mov [prog], a		; update pointer
0164+  0526 0A 0F 06    	jmp get_token_return
0165+  0529             get_token_minus:
0166+  0529 B9 2D       	cmp al, '-'				; check if '-'
0167+  052B C7 43 05    	jne get_token_comma
0168+  052E F7          	stosb					; store '-' into token string
0169+  052F 19 00       	mov al, 0
0170+  0531 F7          	stosb					; terminate token string
0171+  0532 19 04       	mov al, TOK_MINUS
0172+  0534 3D 84 06    	mov [tok], al			
0173+  0537 19 02       	mov al, TOKTYP_DELIMITER
0174+  0539 3D 83 06    	mov [toktyp], al
0175+  053C 4E          	mov a, si
0176+  053D 42 81 06    	mov [prog], a		; update pointer
0177+  0540 0A 0F 06    	jmp get_token_return
0178+  0543             get_token_comma:
0179+  0543 B9 2C       	cmp al, ','				; check if ','
0180+  0545 C7 5D 05    	jne get_token_semi
0181+  0548 F7          	stosb					; store ',' into token string
0182+  0549 19 00       	mov al, 0
0183+  054B F7          	stosb					; terminate token string
0184+  054C 19 0B       	mov al, TOK_COMMA
0185+  054E 3D 84 06    	mov [tok], al			
0186+  0551 19 02       	mov al, TOKTYP_DELIMITER
0187+  0553 3D 83 06    	mov [toktyp], al
0188+  0556 4E          	mov a, si
0189+  0557 42 81 06    	mov [prog], a		; update pointer
0190+  055A 0A 0F 06    	jmp get_token_return
0191+  055D             get_token_semi:
0192+  055D B9 3B       	cmp al, $3B				; check if ';'
0193+  055F C7 77 05    	jne get_token_colon
0194+  0562 F7          	stosb					; store ';' into token string
0195+  0563 19 00       	mov al, 0
0196+  0565 F7          	stosb					; terminate token string
0197+  0566 19 06       	mov al, TOK_SEMI
0198+  0568 3D 84 06    	mov [tok], al			
0199+  056B 19 02       	mov al, TOKTYP_DELIMITER
0200+  056D 3D 83 06    	mov [toktyp], al
0201+  0570 4E          	mov a, si
0202+  0571 42 81 06    	mov [prog], a		; update pointer
0203+  0574 0A 0F 06    	jmp get_token_return
0204+  0577             get_token_colon:
0205+  0577 B9 3A       	cmp al, $3A				; check if ':'
0206+  0579 C7 91 05    	jne get_token_angle
0207+  057C F7          	stosb					; store ':' into token string
0208+  057D 19 00       	mov al, 0
0209+  057F F7          	stosb					; terminate token string
0210+  0580 19 0A       	mov al, TOK_COLON
0211+  0582 3D 84 06    	mov [tok], al			
0212+  0585 19 02       	mov al, TOKTYP_DELIMITER
0213+  0587 3D 83 06    	mov [toktyp], al
0214+  058A 4E          	mov a, si
0215+  058B 42 81 06    	mov [prog], a		; update pointer
0216+  058E 0A 0F 06    	jmp get_token_return
0217+  0591             get_token_angle:
0218+  0591 B9 3E       	cmp al, $3E				; check if '>'
0219+  0593 C7 AB 05    	jne get_token_tilde
0220+  0596 F7          	stosb					; store '>' into token string
0221+  0597 19 00       	mov al, 0
0222+  0599 F7          	stosb					; terminate token string
0223+  059A 19 07       	mov al, TOK_ANGLE
0224+  059C 3D 84 06    	mov [tok], al			
0225+  059F 19 02       	mov al, TOKTYP_DELIMITER
0226+  05A1 3D 83 06    	mov [toktyp], al
0227+  05A4 4E          	mov a, si
0228+  05A5 42 81 06    	mov [prog], a		; update pointer
0229+  05A8 0A 0F 06    	jmp get_token_return
0230+  05AB             get_token_tilde:
0231+  05AB B9 7E       	cmp al, '~'				; check if '~'
0232+  05AD C7 C5 05    	jne get_token_equal
0233+  05B0 F7          	stosb					; store '~' into token string
0234+  05B1 19 00       	mov al, 0
0235+  05B3 F7          	stosb					; terminate token string
0236+  05B4 19 08       	mov al, TOK_TILDE
0237+  05B6 3D 84 06    	mov [tok], al			
0238+  05B9 19 02       	mov al, TOKTYP_DELIMITER
0239+  05BB 3D 83 06    	mov [toktyp], al
0240+  05BE 4E          	mov a, si
0241+  05BF 42 81 06    	mov [prog], a		; update pointer
0242+  05C2 0A 0F 06    	jmp get_token_return
0243+  05C5             get_token_equal:
0244+  05C5 B9 3D       	cmp al, '='				; check if '='
0245+  05C7 C7 DF 05    	jne get_token_skip
0246+  05CA F7          	stosb					; store '=' into token string
0247+  05CB 19 00       	mov al, 0
0248+  05CD F7          	stosb					; terminate token string
0249+  05CE 19 09       	mov al, TOK_EQUAL
0250+  05D0 3D 84 06    	mov [tok], al			
0251+  05D3 19 02       	mov al, TOKTYP_DELIMITER
0252+  05D5 3D 83 06    	mov [toktyp], al
0253+  05D8 4E          	mov a, si
0254+  05D9 42 81 06    	mov [prog], a		; update pointer
0255+  05DC 0A 0F 06    	jmp get_token_return
0256+  05DF             get_token_skip:
0257+  05DF 4E          	mov a, si
0258+  05E0 42 81 06    	mov [prog], a		; update pointer
0259+  05E3 0A 0F 06    	jmp get_token_return
0260+  05E6             get_token_end:				; end of file token
0261+  05E6 19 14       	mov al, TOK_END
0262+  05E8 3D 84 06    	mov [tok], al
0263+  05EB 19 06       	mov al, TOKTYP_END
0264+  05ED 3D 83 06    	mov [toktyp], al
0265+  05F0 0A 0F 06    	jmp get_token_return
0266+  05F3             is_alphanumeric:
0267+  05F3 F7          	stosb
0268+  05F4 F6          	lodsb
0269+  05F5 07 05 0B    	call isalnum			;check if is alphanumeric
0270+  05F8 C6 F3 05    	jz is_alphanumeric
0271+  05FB B9 2E       	cmp al, $2E				; check if is '.'
0272+  05FD C6 F3 05    	je is_alphanumeric
0273+  0600 19 00       	mov al, 0
0274+  0602 F7          	stosb
0275+  0603 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  0605 3D 83 06    	mov [toktyp], al
0277+  0608 D5 01 00    	sub si, 1
0278+  060B 4E          	mov a, si
0279+  060C 42 81 06    	mov [prog], a		; update pointer
0280+  060F             get_token_return:
0281+  060F F0          	pop di
0282+  0610 EF          	pop si
0283+  0611 E7          	pop d
0284+  0612 E4          	pop a
0285+  0613 09          	ret
0286+  0614             get_tok_comment:
0287+  0614 F6          	lodsb
0288+  0615 B9 0A       	cmp al, $0A			; new line
0289+  0617 C7 14 06    	jne get_tok_comment
0290+  061A 0A F8 04    	jmp get_tok_skip_spaces
0291+  061D             
0292+  061D             
0293+  061D             get_number:
0294+  061D D7          	push a
0295+  061E DA          	push d
0296+  061F E2          	push si
0297+  0620 E3          	push di
0298+  0621 19 00       	mov al, 0
0299+  0623 3D 85 06    	mov [tokstr], al			; nullify tokstr string
0300+  0626 19 00       	mov al, TOK_NULL
0301+  0628 3D 84 06    	mov [tok], al				; nullify token
0302+  062B 14 81 06    	mov a, [prog]
0303+  062E 4D          	mov si, a
0304+  062F FD 4F 85 06 	mov di, tokstr
0305+  0633             get_number_skip_spaces:
0306+  0633 F6          	lodsb
0307+  0634 07 7B 0B    	call isspace
0308+  0637 C6 33 06    	je get_number_skip_spaces
0309+  063A B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  063C C7 4C 06    	jne get_number_L0
0311+  063F 19 14       	mov al, TOK_END
0312+  0641 3D 84 06    	mov [tok], al
0313+  0644 19 06       	mov al, TOKTYP_END
0314+  0646 3D 83 06    	mov [toktyp], al
0315+  0649 0A 63 06    	jmp get_number_return
0316+  064C             get_number_L0:
0317+  064C F7          	stosb
0318+  064D F6          	lodsb
0319+  064E 07 0F 0B    	call isdigit			;check if is numeric
0320+  0651 C6 4C 06    	jz get_number_L0
0321+  0654 19 00       	mov al, 0
0322+  0656 F7          	stosb
0323+  0657 19 05       	mov al, TOKTYP_NUMERIC
0324+  0659 3D 83 06    	mov [toktyp], al
0325+  065C D5 01 00    	sub si, 1
0326+  065F 4E          	mov a, si
0327+  0660 42 81 06    	mov [prog], a		; update pointer
0328+  0663             get_number_return:
0329+  0663 F0          	pop di
0330+  0664 EF          	pop si
0331+  0665 E7          	pop d
0332+  0666 E4          	pop a
0333+  0667 09          	ret
0334+  0668             
0335+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0668             ;; PUT BACK TOKEN
0337+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  0668             putback:
0339+  0668 D7          	push a
0340+  0669 E2          	push si
0341+  066A FD 4D 85 06 	mov si, tokstr	
0342+  066E             putback_loop:
0343+  066E F6          	lodsb
0344+  066F B9 00       	cmp al, 0
0345+  0671 C6 7E 06    	je putback_end
0346+  0674 14 81 06    	mov a, [prog]
0347+  0677 7D          	dec a
0348+  0678 42 81 06    	mov [prog], a			; update pointer
0349+  067B 0A 6E 06    	jmp putback_loop
0350+  067E             putback_end:
0351+  067E EF          	pop si
0352+  067F E4          	pop a
0353+  0680 09          	ret
0354+  0681             
0355+  0681             
0356+  0681             
0357+  0681             
0358+  0681 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  0683             
0360+  0683 00          toktyp: 	.db 0			; token type symbol
0361+  0684 00          tok:		.db 0			; current token symbol
0362+  0685 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  0689 00 00 00 00 
0362+  068D 00 00 00 00 
0362+  0691 00 00 00 00 
0362+  0695 00 00 00 00 
0362+  0699 00 00 00 00 
0362+  069D 00 00 00 00 
0362+  06A1 00 00 00 00 
0362+  06A5 00 00 00 00 
0362+  06A9 00 00 00 00 
0362+  06AD 00 00 00 00 
0362+  06B1 00 00 00 00 
0362+  06B5 00 00 00 00 
0362+  06B9 00 00 00 00 
0362+  06BD 00 00 00 00 
0362+  06C1 00 00 00 00 
0362+  06C5 00 00 00 00 
0362+  06C9 00 00 00 00 
0362+  06CD 00 00 00 00 
0362+  06D1 00 00 00 00 
0362+  06D5 00 00 00 00 
0362+  06D9 00 00 00 00 
0362+  06DD 00 00 00 00 
0362+  06E1 00 00 00 00 
0362+  06E5 00 00 00 00 
0362+  06E9 00 00 00 00 
0362+  06ED 00 00 00 00 
0362+  06F1 00 00 00 00 
0362+  06F5 00 00 00 00 
0362+  06F9 00 00 00 00 
0362+  06FD 00 00 00 00 
0362+  0701 00 00 00 00 
0362+  0705 00 00 00 00 
0362+  0709 00 00 00 00 
0362+  070D 00 00 00 00 
0362+  0711 00 00 00 00 
0362+  0715 00 00 00 00 
0362+  0719 00 00 00 00 
0362+  071D 00 00 00 00 
0362+  0721 00 00 00 00 
0362+  0725 00 00 00 00 
0362+  0729 00 00 00 00 
0362+  072D 00 00 00 00 
0362+  0731 00 00 00 00 
0362+  0735 00 00 00 00 
0362+  0739 00 00 00 00 
0362+  073D 00 00 00 00 
0362+  0741 00 00 00 00 
0362+  0745 00 00 00 00 
0362+  0749 00 00 00 00 
0362+  074D 00 00 00 00 
0362+  0751 00 00 00 00 
0362+  0755 00 00 00 00 
0362+  0759 00 00 00 00 
0362+  075D 00 00 00 00 
0362+  0761 00 00 00 00 
0362+  0765 00 00 00 00 
0362+  0769 00 00 00 00 
0362+  076D 00 00 00 00 
0362+  0771 00 00 00 00 
0362+  0775 00 00 00 00 
0362+  0779 00 00 00 00 
0362+  077D 00 00 00 00 
0362+  0781 00 00 00 00 
0048   0785             .include "stdio.asm"
0001+  0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0785             ; stdio.s
0003+  0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0785             .include "string.asm"
0001++ 0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0785             ; string.s
0003++ 0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0785             
0005++ 0785             
0006++ 0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0785             ; strrev
0008++ 0785             ; reverse a string
0009++ 0785             ; D = string address
0010++ 0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0785             ; 01234
0012++ 0785             strrev:
0013++ 0785 4B          	pusha
0014++ 0786 07 CC 07    	call strlen	; length in C
0015++ 0789 12          	mov a, c
0016++ 078A AF 01 00    	cmp a, 1
0017++ 078D D0 A7 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0790 7D          	dec a
0019++ 0791 FD 4E       	mov si, d	; beginning of string
0020++ 0793 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0795 59          	add d, a	; end of string
0022++ 0796 12          	mov a, c
0023++ 0797 FD 9B       	shr a		; divide by 2
0024++ 0799 39          	mov c, a	; C now counts the steps
0025++ 079A             strrev_L0:
0026++ 079A 32          	mov bl, [d]	; save load right-side char into BL
0027++ 079B F6          	lodsb		; load left-side char into AL; increase SI
0028++ 079C 3E          	mov [d], al	; store left char into right side
0029++ 079D 1B          	mov al, bl
0030++ 079E F7          	stosb		; store right-side char into left-side; increase DI
0031++ 079F 7E          	dec c
0032++ 07A0 7F          	dec d
0033++ 07A1 C2 00 00    	cmp c, 0
0034++ 07A4 C7 9A 07    	jne strrev_L0
0035++ 07A7             strrev_end:
0036++ 07A7 4C          	popa
0037++ 07A8 09          	ret
0038++ 07A9             	
0039++ 07A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 07A9             ; strchr
0041++ 07A9             ; search string in D for char in AL
0042++ 07A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 07A9             strchr:
0044++ 07A9             strchr_L0:
0045++ 07A9 32          	mov bl, [d]
0046++ 07AA C1 00       	cmp bl, 0
0047++ 07AC C6 B7 07    	je strchr_end
0048++ 07AF BA          	cmp al, bl
0049++ 07B0 C6 B7 07    	je strchr_end
0050++ 07B3 79          	inc d
0051++ 07B4 0A A9 07    	jmp strchr_L0
0052++ 07B7             strchr_end:
0053++ 07B7 1B          	mov al, bl
0054++ 07B8 09          	ret
0055++ 07B9             
0056++ 07B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 07B9             ; strstr
0058++ 07B9             ; find sub-string
0059++ 07B9             ; str1 in SI
0060++ 07B9             ; str2 in DI
0061++ 07B9             ; SI points to end of source string
0062++ 07B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 07B9             strstr:
0064++ 07B9 DB          	push al
0065++ 07BA DA          	push d
0066++ 07BB E3          	push di
0067++ 07BC             strstr_loop:
0068++ 07BC F3          	cmpsb					; compare a byte of the strings
0069++ 07BD C7 C8 07    	jne strstr_ret
0070++ 07C0 FC 00 00    	lea d, [di + 0]
0071++ 07C3 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 07C5 C7 BC 07    	jne strstr_loop				; equal chars but not at end
0073++ 07C8             strstr_ret:
0074++ 07C8 F0          	pop di
0075++ 07C9 E7          	pop d
0076++ 07CA E8          	pop al
0077++ 07CB 09          	ret
0078++ 07CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 07CC             ; length of null terminated string
0080++ 07CC             ; result in C
0081++ 07CC             ; pointer in D
0082++ 07CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 07CC             strlen:
0084++ 07CC DA          	push d
0085++ 07CD 38 00 00    	mov c, 0
0086++ 07D0             strlen_L1:
0087++ 07D0 BD 00       	cmp byte [d], 0
0088++ 07D2 C6 DA 07    	je strlen_ret
0089++ 07D5 79          	inc d
0090++ 07D6 78          	inc c
0091++ 07D7 0A D0 07    	jmp strlen_L1
0092++ 07DA             strlen_ret:
0093++ 07DA E7          	pop d
0094++ 07DB 09          	ret
0095++ 07DC             
0096++ 07DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07DC             ; STRCMP
0098++ 07DC             ; compare two strings
0099++ 07DC             ; str1 in SI
0100++ 07DC             ; str2 in DI
0101++ 07DC             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 07DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07DC             strcmp:
0104++ 07DC DB          	push al
0105++ 07DD DA          	push d
0106++ 07DE E3          	push di
0107++ 07DF E2          	push si
0108++ 07E0             strcmp_loop:
0109++ 07E0 F3          	cmpsb					; compare a byte of the strings
0110++ 07E1 C7 EC 07    	jne strcmp_ret
0111++ 07E4 FB FF FF    	lea d, [si +- 1]
0112++ 07E7 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07E9 C7 E0 07    	jne strcmp_loop				; equal chars but not at end
0114++ 07EC             strcmp_ret:
0115++ 07EC EF          	pop si
0116++ 07ED F0          	pop di
0117++ 07EE E7          	pop d
0118++ 07EF E8          	pop al
0119++ 07F0 09          	ret
0120++ 07F1             
0121++ 07F1             
0122++ 07F1             ; STRCPY
0123++ 07F1             ; copy null terminated string from SI to DI
0124++ 07F1             ; source in SI
0125++ 07F1             ; destination in DI
0126++ 07F1             strcpy:
0127++ 07F1 E2          	push si
0128++ 07F2 E3          	push di
0129++ 07F3 DB          	push al
0130++ 07F4             strcpy_L1:
0131++ 07F4 F6          	lodsb
0132++ 07F5 F7          	stosb
0133++ 07F6 B9 00       	cmp al, 0
0134++ 07F8 C7 F4 07    	jne strcpy_L1
0135++ 07FB             strcpy_end:
0136++ 07FB E8          	pop al
0137++ 07FC F0          	pop di
0138++ 07FD EF          	pop si
0139++ 07FE 09          	ret
0140++ 07FF             
0141++ 07FF             ; STRCAT
0142++ 07FF             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07FF             ; source in SI
0144++ 07FF             ; destination in DI
0145++ 07FF             strcat:
0146++ 07FF E2          	push si
0147++ 0800 E3          	push di
0148++ 0801 D7          	push a
0149++ 0802 DA          	push d
0150++ 0803 50          	mov a, di
0151++ 0804 3C          	mov d, a
0152++ 0805             strcat_goto_end_L1:
0153++ 0805 BD 00       	cmp byte[d], 0
0154++ 0807 C6 0E 08    	je strcat_start
0155++ 080A 79          	inc d
0156++ 080B 0A 05 08    	jmp strcat_goto_end_L1
0157++ 080E             strcat_start:
0158++ 080E FD 50       	mov di, d
0159++ 0810             strcat_L1:
0160++ 0810 F6          	lodsb
0161++ 0811 F7          	stosb
0162++ 0812 B9 00       	cmp al, 0
0163++ 0814 C7 10 08    	jne strcat_L1
0164++ 0817             strcat_end:
0165++ 0817 E7          	pop d
0166++ 0818 E4          	pop a
0167++ 0819 F0          	pop di
0168++ 081A EF          	pop si
0169++ 081B 09          	ret
0005+  081C             
0006+  081C 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0820 34 35 36 37 
0006+  0824 38 39 41 42 
0006+  0828 43 44 45 46 
0007+  082C 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0830 1B 5B 48 00 
0008+  0834             
0009+  0834 01 00       table_power:.dw 1
0010+  0836 0A 00       			.dw 10
0011+  0838 64 00       			.dw 100
0012+  083A E8 03       			.dw 1000
0013+  083C 10 27       			.dw 10000
0014+  083E             
0015+  083E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  083E             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  083E             ; ASCII in BL
0018+  083E             ; result in AL
0019+  083E             ; ascii for F = 0100 0110
0020+  083E             ; ascii for 9 = 0011 1001
0021+  083E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  083E             hex_ascii_encode:
0023+  083E 1B          	mov al, bl
0024+  083F 93 40       	test al, $40				; test if letter or number
0025+  0841 C7 47 08    	jnz hex_letter
0026+  0844 87 0F       	and al, $0F				; get number
0027+  0846 09          	ret
0028+  0847             hex_letter:
0029+  0847 87 0F       	and al, $0F				; get letter
0030+  0849 6A 09       	add al, 9
0031+  084B 09          	ret
0032+  084C             
0033+  084C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  084C             ; ATOI
0035+  084C             ; 2 letter hex string in B
0036+  084C             ; 8bit integer returned in AL
0037+  084C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  084C             atoi:
0039+  084C D8          	push b
0040+  084D 07 3E 08    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0850 30          	mov bl, bh
0042+  0851 DB          	push al					; save a
0043+  0852 07 3E 08    	call hex_ascii_encode
0044+  0855 EA          	pop bl	
0045+  0856 FD 9E 04    	shl al, 4
0046+  0859 8C          	or al, bl
0047+  085A E5          	pop b
0048+  085B 09          	ret	
0049+  085C             
0050+  085C             
0051+  085C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  085C             ; printf
0053+  085C             ; no need for explanations!
0054+  085C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  085C             printf:
0056+  085C 09          	ret
0057+  085D             
0058+  085D             
0059+  085D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  085D             ; scanf
0061+  085D             ; no need for explanations!
0062+  085D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  085D             scanf:
0064+  085D 09          	ret
0065+  085E             
0066+  085E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  085E             ; ITOA
0068+  085E             ; 8bit value in BL
0069+  085E             ; 2 byte ASCII result in A
0070+  085E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  085E             itoa:
0072+  085E DA          	push d
0073+  085F D8          	push b
0074+  0860 A7 00       	mov bh, 0
0075+  0862 FD A4 04    	shr bl, 4	
0076+  0865 74          	mov d, b
0077+  0866 1F 1C 08    	mov al, [d + s_hex_digits]
0078+  0869 23          	mov ah, al
0079+  086A             	
0080+  086A E5          	pop b
0081+  086B D8          	push b
0082+  086C A7 00       	mov bh, 0
0083+  086E FD 87 0F    	and bl, $0F
0084+  0871 74          	mov d, b
0085+  0872 1F 1C 08    	mov al, [d + s_hex_digits]
0086+  0875 E5          	pop b
0087+  0876 E7          	pop d
0088+  0877 09          	ret
0089+  0878             
0090+  0878             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0878             ; HEX STRING TO BINARY
0092+  0878             ; di = destination address
0093+  0878             ; si = source
0094+  0878             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0878             hex_to_int:
0096+  0878             hex_to_int_L1:
0097+  0878 F6          	lodsb					; load from [SI] to AL
0098+  0879 B9 00       	cmp al, 0				; check if ASCII 0
0099+  087B C6 88 08    	jz hex_to_int_ret
0100+  087E 36          	mov bh, al
0101+  087F F6          	lodsb
0102+  0880 2F          	mov bl, al
0103+  0881 07 4C 08    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0884 F7          	stosb					; store AL to [DI]
0105+  0885 0A 78 08    	jmp hex_to_int_L1
0106+  0888             hex_to_int_ret:
0107+  0888 09          	ret		
0108+  0889             
0109+  0889             
0110+  0889             
0111+  0889             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0889             ; GETCHAR
0113+  0889             ; char in ah
0114+  0889             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0889             getchar:
0116+  0889 DB          	push al
0117+  088A             getchar_retry:
0118+  088A FD 0C       	sti
0119+  088C 19 01       	mov al, 1
0120+  088E 05 03       	syscall sys_io			; receive in AH
0121+  0890 B9 00       	cmp al, 0			; check if any char was receive
0122+  0892 C6 8A 08    	je getchar_retry
0123+  0895 E8          	pop al
0124+  0896 09          	ret
0125+  0897             
0126+  0897             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0897             ; PUTCHAR
0128+  0897             ; char in ah
0129+  0897             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0897             putchar:
0131+  0897 D7          	push a
0132+  0898 19 00       	mov al, 0
0133+  089A 05 03       	syscall sys_io			; char in AH
0134+  089C E4          	pop a
0135+  089D 09          	ret
0136+  089E             
0137+  089E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  089E             ;; INPUT A STRING
0139+  089E             ;; terminates with null
0140+  089E             ;; pointer in D
0141+  089E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  089E             gets:
0143+  089E D7          	push a
0144+  089F DA          	push d
0145+  08A0             gets_loop:
0146+  08A0 FD 0C       	sti
0147+  08A2 19 01       	mov al, 1
0148+  08A4 05 03       	syscall sys_io			; receive in AH
0149+  08A6 B9 00       	cmp al, 0				; check error code (AL)
0150+  08A8 C6 A0 08    	je gets_loop			; if no char received, retry
0151+  08AB             
0152+  08AB 76 1B       	cmp ah, 27
0153+  08AD C6 CE 08    	je gets_telnet_escape
0154+  08B0 76 0A       	cmp ah, $0A				; LF
0155+  08B2 C6 27 09    	je gets_end
0156+  08B5 76 0D       	cmp ah, $0D				; CR
0157+  08B7 C6 27 09    	je gets_end
0158+  08BA 76 5C       	cmp ah, $5C				; '\\'
0159+  08BC C6 FE 08    	je gets_escape
0160+  08BF             	
0161+  08BF 76 08       	cmp ah, $08			; check for backspace
0162+  08C1 C6 CA 08    	je gets_backspace
0163+  08C4             
0164+  08C4 1A          	mov al, ah
0165+  08C5 3E          	mov [d], al
0166+  08C6 79          	inc d
0167+  08C7 0A A0 08    	jmp gets_loop
0168+  08CA             gets_backspace:
0169+  08CA 7F          	dec d
0170+  08CB 0A A0 08    	jmp gets_loop
0171+  08CE             gets_telnet_escape:
0172+  08CE FD 0C       	sti
0173+  08D0 19 01       	mov al, 1
0174+  08D2 05 03       	syscall sys_io				; receive in AH without echo
0175+  08D4 B9 00       	cmp al, 0					; check error code (AL)
0176+  08D6 C6 CE 08    	je gets_telnet_escape		; if no char received, retry
0177+  08D9 76 5B       	cmp ah, '['
0178+  08DB C7 A0 08    	jne gets_loop
0179+  08DE             gets_telnet_escape_phase2:
0180+  08DE FD 0C       	sti
0181+  08E0 19 01       	mov al, 1
0182+  08E2 05 03       	syscall sys_io					; receive in AH without echo
0183+  08E4 B9 00       	cmp al, 0						; check error code (AL)
0184+  08E6 C6 DE 08    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  08E9 76 44       	cmp ah, 'D'
0186+  08EB C6 F6 08    	je gets_left_arrow
0187+  08EE 76 43       	cmp ah, 'C'
0188+  08F0 C6 FA 08    	je gets_right_arrow
0189+  08F3 0A A0 08    	jmp gets_loop
0190+  08F6             gets_left_arrow:
0191+  08F6 7F          	dec d
0192+  08F7 0A A0 08    	jmp gets_loop
0193+  08FA             gets_right_arrow:
0194+  08FA 79          	inc d
0195+  08FB 0A A0 08    	jmp gets_loop
0196+  08FE             gets_escape:
0197+  08FE FD 0C       	sti
0198+  0900 19 01       	mov al, 1
0199+  0902 05 03       	syscall sys_io			; receive in AH
0200+  0904 B9 00       	cmp al, 0				; check error code (AL)
0201+  0906 C6 FE 08    	je gets_escape			; if no char received, retry
0202+  0909 76 6E       	cmp ah, 'n'
0203+  090B C6 19 09    	je gets_LF
0204+  090E 76 72       	cmp ah, 'r'
0205+  0910 C6 20 09    	je gets_CR
0206+  0913 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0914 3E          	mov [d], al
0208+  0915 79          	inc d
0209+  0916 0A A0 08    	jmp gets_loop
0210+  0919             gets_LF:
0211+  0919 19 0A       	mov al, $0A
0212+  091B 3E          	mov [d], al
0213+  091C 79          	inc d
0214+  091D 0A A0 08    	jmp gets_loop
0215+  0920             gets_CR:
0216+  0920 19 0D       	mov al, $0D
0217+  0922 3E          	mov [d], al
0218+  0923 79          	inc d
0219+  0924 0A A0 08    	jmp gets_loop
0220+  0927             gets_end:
0221+  0927 19 00       	mov al, 0
0222+  0929 3E          	mov [d], al				; terminate string
0223+  092A E7          	pop d
0224+  092B E4          	pop a
0225+  092C 09          	ret
0226+  092D             
0227+  092D             
0228+  092D             
0229+  092D             
0230+  092D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  092D             ;; INPUT TEXT
0232+  092D             ;; terminated with CTRL+D
0233+  092D             ;; pointer in D
0234+  092D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  092D             gettxt:
0236+  092D D7          	push a
0237+  092E DA          	push d
0238+  092F             gettxt_loop:
0239+  092F 19 01       	mov al, 1
0240+  0931 05 03       	syscall sys_io			; receive in AH
0241+  0933 B9 00       	cmp al, 0				; check error code (AL)
0242+  0935 C6 2F 09    	je gettxt_loop		; if no char received, retry
0243+  0938 76 04       	cmp ah, 4			; EOT
0244+  093A C6 78 09    	je gettxt_end
0245+  093D 76 08       	cmp ah, $08			; check for backspace
0246+  093F C6 74 09    	je gettxt_backspace
0247+  0942 76 5C       	cmp ah, $5C				; '\\'
0248+  0944 C6 4D 09    	je gettxt_escape
0249+  0947 1A          	mov al, ah
0250+  0948 3E          	mov [d], al
0251+  0949 79          	inc d
0252+  094A 0A 2F 09    	jmp gettxt_loop
0253+  094D             gettxt_escape:
0254+  094D 19 01       	mov al, 1
0255+  094F 05 03       	syscall sys_io			; receive in AH
0256+  0951 B9 00       	cmp al, 0				; check error code (AL)
0257+  0953 C6 4D 09    	je gettxt_escape		; if no char received, retry
0258+  0956 76 6E       	cmp ah, 'n'
0259+  0958 C6 66 09    	je gettxt_LF
0260+  095B 76 72       	cmp ah, 'r'
0261+  095D C6 6D 09    	je gettxt_CR
0262+  0960 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0961 3E          	mov [d], al
0264+  0962 79          	inc d
0265+  0963 0A 2F 09    	jmp gettxt_loop
0266+  0966             gettxt_LF:
0267+  0966 19 0A       	mov al, $0A
0268+  0968 3E          	mov [d], al
0269+  0969 79          	inc d
0270+  096A 0A 2F 09    	jmp gettxt_loop
0271+  096D             gettxt_CR:
0272+  096D 19 0D       	mov al, $0D
0273+  096F 3E          	mov [d], al
0274+  0970 79          	inc d
0275+  0971 0A 2F 09    	jmp gettxt_loop
0276+  0974             gettxt_backspace:
0277+  0974 7F          	dec d
0278+  0975 0A 2F 09    	jmp gettxt_loop
0279+  0978             gettxt_end:
0280+  0978 19 00       	mov al, 0
0281+  097A 3E          	mov [d], al				; terminate string
0282+  097B E7          	pop d
0283+  097C E4          	pop a
0284+  097D 09          	ret
0285+  097E             
0286+  097E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  097E             ; PRINT NEW LINE
0288+  097E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  097E             printnl:
0290+  097E D7          	push a
0291+  097F 10 00 0A    	mov a, $0A00
0292+  0982 05 03       	syscall sys_io
0293+  0984 10 00 0D    	mov a, $0D00
0294+  0987 05 03       	syscall sys_io
0295+  0989 E4          	pop a
0296+  098A 09          	ret
0297+  098B             
0298+  098B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  098B             ; strtoint
0300+  098B             ; 4 digit hex string number in d
0301+  098B             ; integer returned in A
0302+  098B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  098B             strtointx:
0304+  098B D8          	push b
0305+  098C 32          	mov bl, [d]
0306+  098D 37          	mov bh, bl
0307+  098E 33 01 00    	mov bl, [d + 1]
0308+  0991 07 4C 08    	call atoi				; convert to int in AL
0309+  0994 23          	mov ah, al				; move to AH
0310+  0995 33 02 00    	mov bl, [d + 2]
0311+  0998 37          	mov bh, bl
0312+  0999 33 03 00    	mov bl, [d + 3]
0313+  099C 07 4C 08    	call atoi				; convert to int in AL
0314+  099F E5          	pop b
0315+  09A0 09          	ret
0316+  09A1             
0317+  09A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  09A1             ; strtoint
0319+  09A1             ; 5 digit base10 string number in d
0320+  09A1             ; integer returned in A
0321+  09A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  09A1             strtoint:
0323+  09A1 E2          	push si
0324+  09A2 D8          	push b
0325+  09A3 D9          	push c
0326+  09A4 DA          	push d
0327+  09A5 07 CC 07    	call strlen			; get string length in C
0328+  09A8 7E          	dec c
0329+  09A9 FD 4E       	mov si, d
0330+  09AB 12          	mov a, c
0331+  09AC FD 99       	shl a
0332+  09AE 3B 34 08    	mov d, table_power
0333+  09B1 59          	add d, a
0334+  09B2 38 00 00    	mov c, 0
0335+  09B5             strtoint_L0:
0336+  09B5 F6          	lodsb			; load ASCII to al
0337+  09B6 B9 00       	cmp al, 0
0338+  09B8 C6 CB 09    	je strtoint_end
0339+  09BB 6F 30       	sub al, $30		; make into integer
0340+  09BD 22 00       	mov ah, 0
0341+  09BF 2A          	mov b, [d]
0342+  09C0 AC          	mul a, b			; result in B since it fits in 16bits
0343+  09C1 11          	mov a, b
0344+  09C2 28          	mov b, c
0345+  09C3 54          	add a, b
0346+  09C4 39          	mov c, a
0347+  09C5 63 02 00    	sub d, 2
0348+  09C8 0A B5 09    	jmp strtoint_L0
0349+  09CB             strtoint_end:
0350+  09CB 12          	mov a, c
0351+  09CC E7          	pop d
0352+  09CD E6          	pop c
0353+  09CE E5          	pop b
0354+  09CF EF          	pop si
0355+  09D0 09          	ret
0356+  09D1             
0357+  09D1             
0358+  09D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  09D1             ; PRINT NULL TERMINATED STRING
0360+  09D1             ; pointer in D
0361+  09D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  09D1             puts:
0363+  09D1 D7          	push a
0364+  09D2 DA          	push d
0365+  09D3             puts_L1:
0366+  09D3 1E          	mov al, [d]
0367+  09D4 B9 00       	cmp al, 0
0368+  09D6 C6 E2 09    	jz puts_END
0369+  09D9 23          	mov ah, al
0370+  09DA 19 00       	mov al, 0
0371+  09DC 05 03       	syscall sys_io
0372+  09DE 79          	inc d
0373+  09DF 0A D3 09    	jmp puts_L1
0374+  09E2             puts_END:
0375+  09E2 E7          	pop d
0376+  09E3 E4          	pop a
0377+  09E4 09          	ret
0378+  09E5             
0379+  09E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  09E5             ; PRINT N SIZE STRING
0381+  09E5             ; pointer in D
0382+  09E5             ; size in C
0383+  09E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  09E5             putsn:
0385+  09E5 DB          	push al
0386+  09E6 DA          	push d
0387+  09E7 D9          	push c
0388+  09E8             putsn_L0:
0389+  09E8 1E          	mov al, [d]
0390+  09E9 23          	mov ah, al
0391+  09EA 19 00       	mov al, 0
0392+  09EC 05 03       	syscall sys_io
0393+  09EE 79          	inc d
0394+  09EF 7E          	dec c	
0395+  09F0 C2 00 00    	cmp c, 0
0396+  09F3 C7 E8 09    	jne putsn_L0
0397+  09F6             putsn_end:
0398+  09F6 E6          	pop c
0399+  09F7 E7          	pop d
0400+  09F8 E8          	pop al
0401+  09F9 09          	ret
0402+  09FA             
0403+  09FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  09FA             ; print 16bit decimal number
0405+  09FA             ; input number in A
0406+  09FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  09FA             print_u16d:
0408+  09FA D7          	push a
0409+  09FB D8          	push b
0410+  09FC 26 10 27    	mov b, 10000
0411+  09FF AE          	div a, b			; get 10000's coeff.
0412+  0A00 07 22 0A    	call print_number
0413+  0A03 11          	mov a, b
0414+  0A04 26 E8 03    	mov b, 1000
0415+  0A07 AE          	div a, b			; get 1000's coeff.
0416+  0A08 07 22 0A    	call print_number
0417+  0A0B 11          	mov a, b
0418+  0A0C 26 64 00    	mov b, 100
0419+  0A0F AE          	div a, b
0420+  0A10 07 22 0A    	call print_number
0421+  0A13 11          	mov a, b
0422+  0A14 26 0A 00    	mov b, 10
0423+  0A17 AE          	div a, b
0424+  0A18 07 22 0A    	call print_number
0425+  0A1B 1B          	mov al, bl			; 1's coeff in bl
0426+  0A1C 07 22 0A    	call print_number
0427+  0A1F E5          	pop b
0428+  0A20 E4          	pop a
0429+  0A21 09          	ret
0430+  0A22             
0431+  0A22             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0432+  0A22             ; print AL
0433+  0A22             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0434+  0A22             print_number:
0435+  0A22 6A 30       	add al, $30
0436+  0A24 23          	mov ah, al
0437+  0A25 07 97 08    	call putchar
0438+  0A28 09          	ret
0439+  0A29             
0440+  0A29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0441+  0A29             ; PRINT 16BIT HEX INTEGER
0442+  0A29             ; integer value in reg B
0443+  0A29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0444+  0A29             print_u16x:
0445+  0A29 D7          	push a
0446+  0A2A D8          	push b
0447+  0A2B DD          	push bl
0448+  0A2C 30          	mov bl, bh
0449+  0A2D 07 5E 08    	call itoa				; convert bh to char in A
0450+  0A30 2F          	mov bl, al				; save al
0451+  0A31 19 00       	mov al, 0
0452+  0A33 05 03       	syscall sys_io				; display AH
0453+  0A35 24          	mov ah, bl				; retrieve al
0454+  0A36 19 00       	mov al, 0
0455+  0A38 05 03       	syscall sys_io				; display AL
0456+  0A3A             
0457+  0A3A EA          	pop bl
0458+  0A3B 07 5E 08    	call itoa				; convert bh to char in A
0459+  0A3E 2F          	mov bl, al				; save al
0460+  0A3F 19 00       	mov al, 0
0461+  0A41 05 03       	syscall sys_io				; display AH
0462+  0A43 24          	mov ah, bl				; retrieve al
0463+  0A44 19 00       	mov al, 0
0464+  0A46 05 03       	syscall sys_io				; display AL
0465+  0A48             
0466+  0A48 E5          	pop b
0467+  0A49 E4          	pop a
0468+  0A4A 09          	ret
0469+  0A4B             
0470+  0A4B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0471+  0A4B             ; INPUT 16BIT HEX INTEGER
0472+  0A4B             ; read 16bit integer into A
0473+  0A4B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0474+  0A4B             scan_u16x:
0475+  0A4B F8 10 00    	enter 16
0476+  0A4E D8          	push b
0477+  0A4F DA          	push d
0478+  0A50             
0479+  0A50 FA F1 FF    	lea d, [bp + -15]
0480+  0A53 07 9E 08    	call gets				; get number
0481+  0A56             
0482+  0A56 32          	mov bl, [d]
0483+  0A57 37          	mov bh, bl
0484+  0A58 33 01 00    	mov bl, [d + 1]
0485+  0A5B 07 4C 08    	call atoi				; convert to int in AL
0486+  0A5E 23          	mov ah, al				; move to AH
0487+  0A5F             
0488+  0A5F 33 02 00    	mov bl, [d + 2]
0489+  0A62 37          	mov bh, bl
0490+  0A63 33 03 00    	mov bl, [d + 3]
0491+  0A66 07 4C 08    	call atoi				; convert to int in AL
0492+  0A69             
0493+  0A69 E7          	pop d
0494+  0A6A E5          	pop b
0495+  0A6B F9          	leave
0496+  0A6C 09          	ret
0497+  0A6D             
0498+  0A6D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0499+  0A6D             ; PRINT 8bit HEX INTEGER
0500+  0A6D             ; integer value in reg bl
0501+  0A6D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0502+  0A6D             print_u8x:
0503+  0A6D D7          	push a
0504+  0A6E DD          	push bl
0505+  0A6F             
0506+  0A6F 07 5E 08    	call itoa				; convert bl to char in A
0507+  0A72 2F          	mov bl, al				; save al
0508+  0A73 19 00       	mov al, 0
0509+  0A75 05 03       	syscall sys_io				; display AH
0510+  0A77 24          	mov ah, bl				; retrieve al
0511+  0A78 19 00       	mov al, 0
0512+  0A7A 05 03       	syscall sys_io				; display AL
0513+  0A7C             
0514+  0A7C EA          	pop bl
0515+  0A7D E4          	pop a
0516+  0A7E 09          	ret
0517+  0A7F             
0518+  0A7F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0519+  0A7F             ; print 8bit decimal unsigned number
0520+  0A7F             ; input number in AL
0521+  0A7F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0522+  0A7F             print_u8d:
0523+  0A7F D7          	push a
0524+  0A80 D8          	push b
0525+  0A81             
0526+  0A81 22 00       	mov ah, 0
0527+  0A83 26 64 00    	mov b, 100
0528+  0A86 AE          	div a, b
0529+  0A87 D8          	push b			; save remainder
0530+  0A88 B9 00       	cmp al, 0
0531+  0A8A C6 94 0A    	je skip100
0532+  0A8D 6A 30       	add al, $30
0533+  0A8F 23          	mov ah, al
0534+  0A90 19 00       	mov al, 0
0535+  0A92 05 03       	syscall sys_io	; print coeff
0536+  0A94             skip100:
0537+  0A94 E4          	pop a
0538+  0A95 22 00       	mov ah, 0
0539+  0A97 26 0A 00    	mov b, 10
0540+  0A9A AE          	div a, b
0541+  0A9B D8          	push b			; save remainder
0542+  0A9C B9 00       	cmp al, 0
0543+  0A9E C6 A8 0A    	je skip10
0544+  0AA1 6A 30       	add al, $30
0545+  0AA3 23          	mov ah, al
0546+  0AA4 19 00       	mov al, 0
0547+  0AA6 05 03       	syscall sys_io	; print coeff
0548+  0AA8             skip10:
0549+  0AA8 E4          	pop a
0550+  0AA9 1B          	mov al, bl
0551+  0AAA 6A 30       	add al, $30
0552+  0AAC 23          	mov ah, al
0553+  0AAD 19 00       	mov al, 0
0554+  0AAF 05 03       	syscall sys_io	; print coeff
0555+  0AB1 E5          	pop b
0556+  0AB2 E4          	pop a
0557+  0AB3 09          	ret
0558+  0AB4             
0559+  0AB4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0560+  0AB4             ; INPUT 8BIT HEX INTEGER
0561+  0AB4             ; read 8bit integer into AL
0562+  0AB4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0563+  0AB4             scan_u8x:
0564+  0AB4 F8 04 00    	enter 4
0565+  0AB7 D8          	push b
0566+  0AB8 DA          	push d
0567+  0AB9             
0568+  0AB9 FA FD FF    	lea d, [bp + -3]
0569+  0ABC 07 9E 08    	call gets				; get number
0570+  0ABF             
0571+  0ABF 32          	mov bl, [d]
0572+  0AC0 37          	mov bh, bl
0573+  0AC1 33 01 00    	mov bl, [d + 1]
0574+  0AC4 07 4C 08    	call atoi				; convert to int in AL
0575+  0AC7             
0576+  0AC7 E7          	pop d
0577+  0AC8 E5          	pop b
0578+  0AC9 F9          	leave
0579+  0ACA 09          	ret
0580+  0ACB             
0581+  0ACB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0582+  0ACB             ; input decimal number
0583+  0ACB             ; result in A
0584+  0ACB             ; 655'\0'
0585+  0ACB             ; low--------high
0586+  0ACB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0ACB             scan_u16d:
0588+  0ACB F8 08 00    	enter 8
0589+  0ACE E2          	push si
0590+  0ACF D8          	push b
0591+  0AD0 D9          	push c
0592+  0AD1 DA          	push d
0593+  0AD2 FA F9 FF    	lea d, [bp +- 7]
0594+  0AD5 07 9E 08    	call gets
0595+  0AD8 07 CC 07    	call strlen			; get string length in C
0596+  0ADB 7E          	dec c
0597+  0ADC FD 4E       	mov si, d
0598+  0ADE 12          	mov a, c
0599+  0ADF FD 99       	shl a
0600+  0AE1 3B 34 08    	mov d, table_power
0601+  0AE4 59          	add d, a
0602+  0AE5 38 00 00    	mov c, 0
0603+  0AE8             mul_loop:
0604+  0AE8 F6          	lodsb			; load ASCII to al
0605+  0AE9 B9 00       	cmp al, 0
0606+  0AEB C6 FE 0A    	je mul_exit
0607+  0AEE 6F 30       	sub al, $30		; make into integer
0608+  0AF0 22 00       	mov ah, 0
0609+  0AF2 2A          	mov b, [d]
0610+  0AF3 AC          	mul a, b			; result in B since it fits in 16bits
0611+  0AF4 11          	mov a, b
0612+  0AF5 28          	mov b, c
0613+  0AF6 54          	add a, b
0614+  0AF7 39          	mov c, a
0615+  0AF8 63 02 00    	sub d, 2
0616+  0AFB 0A E8 0A    	jmp mul_loop
0617+  0AFE             mul_exit:
0618+  0AFE 12          	mov a, c
0619+  0AFF E7          	pop d
0620+  0B00 E6          	pop c
0621+  0B01 E5          	pop b
0622+  0B02 EF          	pop si
0623+  0B03 F9          	leave
0624+  0B04 09          	ret
0049   0B05             .include "ctype.asm"
0001+  0B05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0B05             ; ctype.s
0003+  0B05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0B05             
0005+  0B05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0B05             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0B05             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0B05             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0B05             ;; characters are supported.
0010+  0B05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0B05             ;; isalnum 
0012+  0B05             ;; isalpha 
0013+  0B05             ;; islower 
0014+  0B05             ;; isupper 
0015+  0B05             ;; isdigit 
0016+  0B05             ;; isxdigit
0017+  0B05             ;; iscntrl 
0018+  0B05             ;; isgraph 
0019+  0B05             ;; isspace 
0020+  0B05             ;; isblank 
0021+  0B05             ;; isprint 
0022+  0B05             ;; ispunct 
0023+  0B05             ;; tolower 
0024+  0B05             ;; toupper
0025+  0B05             
0026+  0B05             
0027+  0B05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0B05             ;; IS ALPHANUMERIC
0029+  0B05             ;; sets ZF according with result
0030+  0B05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0B05             isalnum:
0032+  0B05 07 22 0B    	call isalpha
0033+  0B08 C6 0E 0B    	je isalnum_exit
0034+  0B0B 07 0F 0B    	call isdigit
0035+  0B0E             isalnum_exit:
0036+  0B0E 09          	ret	
0037+  0B0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0B0F             ;; IS DIGIT
0039+  0B0F             ;; sets ZF according with result
0040+  0B0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0B0F             isdigit:
0042+  0B0F DB          	push al
0043+  0B10 B9 30       	cmp al, '0'
0044+  0B12 C8 1E 0B    	jlu isdigit_false
0045+  0B15 B9 39       	cmp al, '9'
0046+  0B17 D1 1E 0B    	jgu isdigit_false
0047+  0B1A 87 00       	and al, 0	; set ZF
0048+  0B1C E8          	pop al
0049+  0B1D 09          	ret
0050+  0B1E             isdigit_false:
0051+  0B1E 8B 01       	or al, 1	; clear ZF
0052+  0B20 E8          	pop al
0053+  0B21 09          	ret	
0054+  0B22             	
0055+  0B22             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0B22             ;; IS ALPHA
0057+  0B22             ;; sets ZF according with result
0058+  0B22             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0B22             isalpha:
0060+  0B22 DB          	push al
0061+  0B23 B9 5F       	cmp al, '_'
0062+  0B25 C6 45 0B    	je isalpha_true
0063+  0B28 B9 2E       	cmp al, '.'
0064+  0B2A C6 45 0B    	je isalpha_true
0065+  0B2D B9 41       	cmp al, 'A'
0066+  0B2F C8 41 0B    	jlu isalpha_false
0067+  0B32 B9 7A       	cmp al, 'z'
0068+  0B34 D1 41 0B    	jgu isalpha_false
0069+  0B37 B9 5A       	cmp al, 'Z'
0070+  0B39 D0 45 0B    	jleu isalpha_true
0071+  0B3C B9 61       	cmp al, 'a'
0072+  0B3E C9 45 0B    	jgeu isalpha_true
0073+  0B41             isalpha_false:
0074+  0B41 8B 01       	or al, 1	; clear ZF
0075+  0B43 E8          	pop al
0076+  0B44 09          	ret
0077+  0B45             isalpha_true:
0078+  0B45 87 00       	and al, 0	; set ZF
0079+  0B47 E8          	pop al
0080+  0B48 09          	ret
0081+  0B49             
0082+  0B49             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B49             ;; IS PATH-ALPHA
0084+  0B49             ;; sets ZF according with result
0085+  0B49             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B49             ispath:
0087+  0B49 DB          	push al
0088+  0B4A 07 0F 0B    	call isdigit
0089+  0B4D C6 77 0B    	je ispath_true
0090+  0B50 B9 5F       	cmp al, '_'
0091+  0B52 C6 77 0B    	je ispath_true
0092+  0B55 B9 2F       	cmp al, '/'
0093+  0B57 C6 77 0B    	je ispath_true
0094+  0B5A B9 2E       	cmp al, '.'
0095+  0B5C C6 77 0B    	je ispath_true
0096+  0B5F B9 41       	cmp al, 'A'
0097+  0B61 C8 73 0B    	jlu ispath_false
0098+  0B64 B9 7A       	cmp al, 'z'
0099+  0B66 D1 73 0B    	jgu ispath_false
0100+  0B69 B9 5A       	cmp al, 'Z'
0101+  0B6B D0 77 0B    	jleu ispath_true
0102+  0B6E B9 61       	cmp al, 'a'
0103+  0B70 C9 77 0B    	jgeu ispath_true
0104+  0B73             ispath_false:
0105+  0B73 8B 01       	or al, 1	; clear ZF
0106+  0B75 E8          	pop al
0107+  0B76 09          	ret
0108+  0B77             ispath_true:
0109+  0B77 87 00       	and al, 0	; set ZF
0110+  0B79 E8          	pop al
0111+  0B7A 09          	ret
0112+  0B7B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B7B             ;; IS SPACE
0114+  0B7B             ;; sets ZF according with result
0115+  0B7B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B7B             isspace:
0117+  0B7B B9 20       	cmp al, $20		; ' '
0118+  0B7D C6 91 0B    	je isspace_exit
0119+  0B80 B9 09       	cmp al, $09		; '\t'
0120+  0B82 C6 91 0B    	je isspace_exit
0121+  0B85 B9 0A       	cmp al, $0A		; '\n'
0122+  0B87 C6 91 0B    	je isspace_exit
0123+  0B8A B9 0D       	cmp al, $0D		; '\r'
0124+  0B8C C6 91 0B    	je isspace_exit
0125+  0B8F B9 0B       	cmp al, $0B		; '\v'
0126+  0B91             isspace_exit:
0127+  0B91 09          	ret	
0128+  0B92             
0129+  0B92             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B92             ; TO LOWER
0131+  0B92             ; input in AL
0132+  0B92             ; output in AL
0133+  0B92             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B92             to_lower:
0135+  0B92 B9 5A       	cmp al, 'Z'
0136+  0B94 D1 99 0B    	jgu to_lower_ret
0137+  0B97 6A 20       	add al, $20				; convert to lower case
0138+  0B99             to_lower_ret:
0139+  0B99 09          	ret
0140+  0B9A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B9A             ; TO UPPER
0142+  0B9A             ; input in AL
0143+  0B9A             ; output in AL
0144+  0B9A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B9A             to_upper:
0146+  0B9A B9 61       	cmp al, 'a'
0147+  0B9C C8 A1 0B    	jlu to_upper_ret
0148+  0B9F 6F 20       	sub al, $20			; convert to upper case
0149+  0BA1             to_upper_ret:
0150+  0BA1 09          	ret
0151+  0BA2             
0050   0BA2             
0051   0BA2             
0052   0BA2             transient_area:	
0053   0BA2             
0054   0BA2             .end
0055   0BA2             
0056   0BA2             
tasm: Number of errors = 0
