0001   0000             ;Subroutine to multiply two floating-point variables
0002   0000             ;Floats are IEEE 754 single-precision
0003   0000             ;Multiplies fp_a and fp_b
0004   0000             ;Result in fp_c
0005   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0006   0400             .org	1024
0007   0400             
0008   0400             ;First gets fp_a and fp_b from input
0009   0400 07 09 09    			call	scan_u16x
0010   0403 FD AA       			swp	a
0011   0405 42 1E 06    			mov	[fp_a],a
0012   0408 07 09 09    			call	scan_u16x
0013   040B FD AA       			swp	a
0014   040D 42 20 06    			mov	[fp_a+2],a
0015   0410 07 09 09    			call	scan_u16x
0016   0413 FD AA       			swp	a
0017   0415 42 22 06    			mov	[fp_b],a
0018   0418 07 09 09    			call	scan_u16x
0019   041B FD AA       			swp	a
0020   041D 42 24 06    			mov	[fp_b+2],a
0021   0420             
0022   0420             multiply_float:
0023   0420             ;Calculate sign of product first
0024   0420 1D 1E 06    			mov	al,[fp_a]
0025   0423 2F          			mov	bl,al
0026   0424 1D 22 06    			mov	al,[fp_b]
0027   0427 90          			xor	al,bl		;sign of result is XOR of signs of products
0028   0428 2F          			mov	bl,al
0029   0429 19 80       			mov	al,10000000b	;mask of remainder of bits
0030   042B 88          			and	al,bl
0031   042C 3D 2A 06    			mov	[sign],al	;(sign) is 8-bit mask used to OR-in the sign bit
0032   042F             ;Calculate exponent of product
0033   042F             ;Get exponent of a
0034   042F 1D 1E 06    			mov	al,[fp_a]	;need to get bit 0 of exponent from bit 7 of
0035   0432 FD 9E 01    			shl	al,1		;fp_a+1 and combine with the rest of the
0036   0435 2F          			mov	bl,al		;exponent from fp_a
0037   0436 1D 1F 06    			mov	al,[fp_a+1]	;is bit 7 one?
0038   0439 87 80       			and	al,10000000b
0039   043B C7 42 04    			jnz	mfp_next_1	;yes, OR-in a 1 in bit 0 of exponent byte
0040   043E 1B          			mov	al,bl
0041   043F 0A 45 04    			jmp	mfp_next_2	;no, skip OR-in (will have a zero from shift)
0042   0442 19 01       mfp_next_1:		mov	al,00000001b
0043   0444 8C          			or	al,bl
0044   0445             ;Remove exponent bias and save
0045   0445 6F 7F       mfp_next_2:		sub	al,127		;al now has unbiased exponent of a
0046   0447 3D 2B 06    			mov	[exponent_a],al
0047   044A             			
0048   044A             ;Get exponent of b
0049   044A 1D 22 06    			mov	al,[fp_b]	;need to get bit 0 of exponent from bit 7 of
0050   044D FD 9E 01    			shl	al,1		;fp_a+1 and combine with the rest of the
0051   0450 2F          			mov	bl,al		;exponent from fp_a
0052   0451 1D 23 06    			mov	al,[fp_b+1]	;is bit 7 one?
0053   0454 87 80       			and	al,10000000b
0054   0456 C7 5D 04    			jnz	mfp_next_3	;yes, OR-in a 1 in bit 0 of exponent byte
0055   0459 1B          			mov	al,bl
0056   045A 0A 60 04    			jmp	mfp_next_4	;no, skip OR-in (will have a zero from shift)
0057   045D 19 01       mfp_next_3:		mov	al,00000001b
0058   045F 8C          			or	al,bl
0059   0460             ;Remove exponent bias and save
0060   0460 6F 7F       mfp_next_4:		sub	al,127		;al now has unbiased exponent of b
0061   0462 3D 2C 06    			mov	[exponent_b],al
0062   0465             ;Add unbiased exponents and save
0063   0465 3D 2C 06    			mov	[exponent_b],al	;add exponents
0064   0468 2F          			mov	bl,al
0065   0469 1D 2B 06    			mov	al,[exponent_a]
0066   046C 6B          			add	al,bl
0067   046D 3D 2D 06    			mov	[exponent_c],al	;exponent_c has unbiased exponent of product
0068   0470             			
0069   0470             
0070   0470             			
0071   0470             ;Multiply significands
0072   0470 1D 1F 06    			mov	al,[fp_a+1]	;need to set leftmost bit of significand to one
0073   0473 2F          			mov	bl,al		;this bit is implied but not stored in fp
0074   0474 19 80       			mov	al,10000000b
0075   0476 8C          			or	al,bl
0076   0477 3D 2E 06    			mov	[long_a],al
0077   047A 1D 20 06    			mov	al,[fp_a+2]
0078   047D 3D 2F 06    			mov	[long_a+1],al
0079   0480 1D 21 06    			mov	al,[fp_a+3]
0080   0483 3D 30 06    			mov	[long_a+2],al
0081   0486 1D 23 06    			mov	al,[fp_b+1]
0082   0489 2F          			mov	bl,al
0083   048A 19 80       			mov	al,10000000b
0084   048C 8C          			or	al,bl
0085   048D 3D 31 06    			mov	[long_b],al
0086   0490 1D 24 06    			mov	al,[fp_b+2]
0087   0493 3D 32 06    			mov	[long_b+1],al
0088   0496 1D 25 06    			mov	al,[fp_b+3]
0089   0499 3D 33 06    			mov	[long_b+2],al
0090   049C             
0091   049C 07 FC 04    			call	multiply_long		;24-bit integer multiplication
0092   049F             
0093   049F             
0094   049F             			
0095   049F             ;Normalize product			
0096   049F 1D 3D 06    mfp_loop_1:		mov	al,[double_long_b]	;check leftmost bit of product
0097   04A2 2F          			mov	bl,al
0098   04A3 19 80       			mov	al,10000000b
0099   04A5 88          			and	al,bl			;test leftmost bit of product
0100   04A6 C7 B6 04    			jnz	mfp_next_5		;normalized, assemble final fp
0101   04A9 07 DC 05    			call	shift_left_double_long_b	;not normalized, shift left and dec exponent
0102   04AC 1D 2D 06    			mov	al,[exponent_c]
0103   04AF 80          			dec	al
0104   04B0 3D 2D 06    			mov	[exponent_c],al
0105   04B3 0A 9F 04    			jmp	mfp_loop_1
0106   04B6             			
0107   04B6             
0108   04B6             ;Assemble final fp 
0109   04B6 1D 2D 06    mfp_next_5:		mov	al,[exponent_c]	;First byte is sign bit and bits 7 to 1
0110   04B9 6A 80       			add	al,128			;restore bias + 1 (for effect of multiplication)
0111   04BB 3D 2D 06    			mov	[exponent_c],al	;exponent_c now has biased exponent
0112   04BE FD A2 01    			shr	al,1
0113   04C1 31 2A 06    			mov	bl,[sign]			;move over for sign bit
0114   04C4 8C          			or	al,bl			;put sign bit in
0115   04C5 3D 26 06    			mov	[fp_c],al		;First byte done
0116   04C8 1D 3D 06    			mov	al,[double_long_b]	;get first byte of mantissa
0117   04CB 3D 27 06    			mov	[fp_c+1],al		;store in second byte of fp
0118   04CE 1D 2D 06    			mov	al,[exponent_c]	;check bit 0 of biased exponent
0119   04D1 87 01       			and	al,00000001b		;test bit 0 of exponent
0120   04D3 C7 DE 04    			jnz	mfp_next_6		;bit is one, leave one in bit 7 of fp_c+1
0121   04D6 1D 27 06    			mov	al,[fp_c+1]		;bit is 0, mask off bit 7 of fp_c+1
0122   04D9 87 7F       			and	al,01111111b
0123   04DB 3D 27 06    			mov	[fp_c+1],al
0124   04DE 1D 3E 06    mfp_next_6:		mov	al,[double_long_b+1]	;get second and third product bytes
0125   04E1 3D 28 06    			mov	[fp_c+2],al
0126   04E4 1D 3F 06    			mov	al,[double_long_b+2]
0127   04E7 3D 29 06    			mov	[fp_c+3],al		;complete fp product now assembled in fp_c
0128   04EA             
0129   04EA             ;Print product
0130   04EA 29 26 06    			mov	b,[fp_c]
0131   04ED FD AB       			swp	b
0132   04EF 07 E7 08    			call	print_u16x
0133   04F2 29 28 06    			mov	b,[fp_c+2]
0134   04F5 FD AB       			swp	b
0135   04F7 07 E7 08    			call	print_u16x
0136   04FA             
0137   04FA             ;Insert rounding code here -- check leftmost bits of double_long_a+4, and increment mantissa if rounding
0138   04FA             ;For now just truncate
0139   04FA             			
0140   04FA 05 0B       			syscall sys_terminate_proc
0141   04FC             
0142   04FC             			
0143   04FC             
0144   04FC             ;Multiply long integers, using shift and add only -- no nybble multiplication
0145   04FC             ;Long words passed in long_a and long_b
0146   04FC             ;Product returned in double_long_b
0147   04FC             ;Uses double_long_a to hold multiplicand for shifting
0148   04FC             ;Uses double_long_b for 48-bit addition
0149   04FC             ;Uses long_c for mask for multiplicand bits in long_b
0150   04FC             
0151   04FC 19 00       multiply_long:		mov	al,0
0152   04FE 3D 37 06    			mov	[double_long_a],al	;clear multiplicand word
0153   0501 3D 38 06    			mov	[double_long_a+1],al
0154   0504 3D 39 06    			mov	[double_long_a+2],al
0155   0507 3D 3A 06    			mov	[double_long_a+3],al
0156   050A 3D 3B 06    			mov	[double_long_a+4],al
0157   050D 3D 3C 06    			mov	[double_long_a+5],al
0158   0510 3D 3D 06    			mov	[double_long_b],al	;clear product word
0159   0513 3D 3E 06    			mov	[double_long_b+1],al
0160   0516 3D 3F 06    			mov	[double_long_b+2],al
0161   0519 3D 40 06    			mov	[double_long_b+3],al
0162   051C 3D 41 06    			mov	[double_long_b+4],al
0163   051F 3D 42 06    			mov	[double_long_b+5],al
0164   0522 3D 34 06    			mov	[long_c],al
0165   0525 3D 35 06    			mov	[long_c+1],al
0166   0528 19 01       			mov	al,00000001b		;mask for multiplicand b bits
0167   052A 3D 36 06    			mov	[long_c+2],al
0168   052D 1D 30 06    			mov	al,[long_a+2]
0169   0530 3D 3C 06    			mov	[double_long_a+5],al	;place multiplicand a in double_long_a
0170   0533 1D 2F 06    			mov	al,[long_a+1]
0171   0536 3D 3B 06    			mov	[double_long_a+4],al
0172   0539 1D 2E 06    			mov	al,[long_a]
0173   053C 3D 3A 06    			mov	[double_long_a+3],al
0174   053F             
0175   053F 1D 33 06    mult_long_loop:	mov	al,[long_b+2]		;check bit in multiplicand b with mask
0176   0542 2F          			mov	bl,al
0177   0543 1D 36 06    			mov	al,[long_c+2]		;mask in long_c		
0178   0546 88          			and	al,bl
0179   0547 C6 4D 05    			jz	mult_long_next_1	;need to check all 3 bytes
0180   054A 0A 66 05    			jmp	mult_long_add		;bit is one, add
0181   054D 1D 32 06    mult_long_next_1:	mov	al,[long_b+1]
0182   0550 2F          			mov	bl,al
0183   0551 1D 35 06    			mov	al,[long_c+1]
0184   0554 88          			and	al,bl
0185   0555 C6 5B 05    			jz	mult_long_next_2
0186   0558 0A 66 05    			jmp	mult_long_add
0187   055B 1D 31 06    mult_long_next_2:	mov	al,[long_b]
0188   055E 2F          			mov	bl,al
0189   055F 1D 34 06    			mov	al,[long_c]
0190   0562 88          			and	al,bl
0191   0563 C6 99 05    			jz	mult_long_shift	;bit is zero, don't add, shift multiplicand
0192   0566             
0193   0566             
0194   0566             			
0195   0566             ;In the following add double-long, do 3 16-bit additions with carry
0196   0566             ;Need to swap before and after add to get memory order correct			
0197   0566 14 41 06    mult_long_add:		mov	a,[double_long_b+4]	;bit in long_b is one, add multiplicand a to product b
0198   0569 FD AA       			swp	a
0199   056B 27          			mov	b,a			;48-bit addition
0200   056C 14 3B 06    			mov	a,[double_long_a+4]
0201   056F FD AA       			swp	a
0202   0571 54          			add	a,b
0203   0572 FD AA       			swp	a
0204   0574 42 41 06    			mov	[double_long_b+4],a	;product will accumulate in double_long_b
0205   0577 14 3F 06    			mov	a,[double_long_b+2]
0206   057A FD AA       			swp	a
0207   057C 27          			mov	b,a
0208   057D 14 39 06    			mov	a,[double_long_a+2]
0209   0580 FD AA       			swp	a
0210   0582 5C          			adc	a,b
0211   0583 FD AA       			swp	a
0212   0585 42 3F 06    			mov	[double_long_b+2],a
0213   0588 14 3D 06    			mov	a,[double_long_b]
0214   058B FD AA       			swp	a
0215   058D 27          			mov	b,a
0216   058E 14 37 06    			mov	a,[double_long_a]
0217   0591 FD AA       			swp	a
0218   0593 5C          			adc	a,b
0219   0594 FD AA       			swp	a
0220   0596 42 3D 06    			mov	[double_long_b],a
0221   0599             			
0222   0599 07 B3 05    mult_long_shift:	call	shift_left_double_long_a	;shifts multiplicand in double_long_a
0223   059C 07 05 06    			call	shift_left_long	;shifts mask in long_c left one
0224   059F 1D 34 06    			mov	al,[long_c]		;check long_c if zero (24 shifts done)
0225   05A2 2F          			mov	bl,al
0226   05A3 1D 35 06    			mov	al,[long_c+1]
0227   05A6 8C          			or	al,bl
0228   05A7 C7 3F 05    			jnz	mult_long_loop		;not zero, keep multiplying
0229   05AA 2F          			mov	bl,al
0230   05AB 1D 36 06    			mov	al,[long_c+2]
0231   05AE 8C          			or	al,bl
0232   05AF C7 3F 05    			jnz	mult_long_loop		;not zero, keep multiplying
0233   05B2 09          			ret				;mask bytes all zeros, done
0234   05B3             ;Subroutine to shift left one a 48-bit value
0235   05B3             ;48-bit value in double_long_a
0236   05B3             ;concatenates 3 one-bit left shifts of the 3 words that make up the value
0237   05B3             ;uses 16-bit mov instructions, swaps low and hi bytes to make it right
0238   05B3             shift_left_double_long_a:
0239   05B3 14 3B 06    			mov	a,[double_long_a+4]
0240   05B6 FD AA       			swp	a
0241   05B8 FD 99       			shl	a
0242   05BA FD AA       			swp	a
0243   05BC 42 3B 06    			mov	[double_long_a+4],a
0244   05BF 14 39 06    			mov	a,[double_long_a+2]
0245   05C2 3A 01       			mov	cl, 1
0246   05C4 FD AA       			swp	a
0247   05C6 FD E0       			rlc	a, cl
0248   05C8 FD AA       			swp	a
0249   05CA 42 39 06    			mov	[double_long_a+2],a
0250   05CD 14 37 06    			mov	a,[double_long_a]
0251   05D0 3A 01       			mov	cl, 1
0252   05D2 FD AA       			swp	a
0253   05D4 FD E0       			rlc	a, cl
0254   05D6 FD AA       			swp	a
0255   05D8 42 37 06    			mov	[double_long_a],a
0256   05DB 09          			ret
0257   05DC             			
0258   05DC             ;Subroutine to shift left one a 48-bit value
0259   05DC             ;48-bit value in double_long_b
0260   05DC             ;concatenates 3 one-bit left shifts of the 3 words that make up the value
0261   05DC             ;uses 16-bit mov instructions, swaps low and hi bytes to make it right
0262   05DC             shift_left_double_long_b:
0263   05DC 14 41 06    			mov	a,[double_long_b+4]
0264   05DF FD AA       			swp	a
0265   05E1 FD 99       			shl	a
0266   05E3 FD AA       			swp	a
0267   05E5 42 41 06    			mov	[double_long_b+4],a
0268   05E8 14 3F 06    			mov	a,[double_long_b+2]
0269   05EB 3A 01       			mov	cl, 1
0270   05ED FD AA       			swp	a
0271   05EF FD E0       			rlc	a, cl
0272   05F1 FD AA       			swp	a
0273   05F3 42 3F 06    			mov	[double_long_b+2],a
0274   05F6 14 3D 06    			mov	a,[double_long_b]
0275   05F9 3A 01       			mov	cl, 1
0276   05FB FD AA       			swp	a
0277   05FD FD E0       			rlc	a, cl
0278   05FF FD AA       			swp	a
0279   0601 42 3D 06    			mov	[double_long_b],a
0280   0604 09          			ret
0281   0605             
0282   0605             ;Subroutine to shift left one a 24-bit value
0283   0605             ;24-bit value in long_c
0284   0605 14 35 06    shift_left_long:	mov	a,[long_c+1]	;16-bit load, little endian
0285   0608 FD AA       			swp	a		;swap to make it fit the big-endian mantissa
0286   060A FD 99       			shl	a
0287   060C FD AA       			swp	a
0288   060E 42 35 06    			mov	[long_c+1],a
0289   0611 14 33 06    			mov	a,[long_c-1]	;16-bit load, low byte in memory is garbage
0290   0614 3A 01       			mov	cl, 1
0291   0616 FD AA       			swp	a
0292   0618 FD E0       			rlc	a, cl
0293   061A 3D 34 06    			mov	[long_c],al	;discard high byte which is garbage
0294   061D 09          			ret
0295   061E             							
0296   061E             ;Variables
0297   061E 40 83 33 33 fp_a			.db	40h,83h,33h,33h	;IEEE 754 single-precision floating point number 0x40833333 = decimal 4.1
0298   0622 40 60 00 00 fp_b			.db	40h,60h,00h,00h	;IEEE 754 single-precision floating point number 0x40600000 = decimal 3.5
0299   0626 00 00 00 00 fp_c			.db	0,0,0,0	;IEEE 754 single-precision floating point number 0x4165999A = decimal 14.35
0300   062A 00          sign			.db	0
0301   062B 00          exponent_a		.db	0
0302   062C 00          exponent_b		.db	0
0303   062D 00          exponent_c		.db	0
0304   062E 00 00 00    long_a			.db	0,0,0		;24-bit integer
0305   0631 00 00 00    long_b			.db	0,0,0		;24-bit integer
0306   0634 00 00 00    long_c			.db	0,0,0		;24-bit integer
0307   0637 00 00 00 00 double_long_a	.db	0,0,0,0,0,0	;48-bit integer
0307   063B 00 00 
0308   063D 00 00 00 00 double_long_b	.db	0,0,0,0,0,0	;48-bit interger
0308   0641 00 00 
0309   0643             
0310   0643             .include "lib/stdio.asm"
0001+  0643             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0643             ; stdio.s
0003+  0643             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0643             .include "lib/string.asm"
0001++ 0643             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0643             ; string.s
0003++ 0643             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0643             
0005++ 0643             
0006++ 0643             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0643             ; strrev
0008++ 0643             ; reverse a string
0009++ 0643             ; D = string address
0010++ 0643             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0643             ; 01234
0012++ 0643             strrev:
0013++ 0643 4B          	pusha
0014++ 0644 07 8A 06    	call strlen	; length in C
0015++ 0647 12          	mov a, c
0016++ 0648 AF 01 00    	cmp a, 1
0017++ 064B D0 65 06    	jleu strrev_end	; check string length. string len must be > 1
0018++ 064E 7D          	dec a
0019++ 064F FD 4E       	mov si, d	; beginning of string
0020++ 0651 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0653 59          	add d, a	; end of string
0022++ 0654 12          	mov a, c
0023++ 0655 FD 9B       	shr a		; divide by 2
0024++ 0657 39          	mov c, a	; C now counts the steps
0025++ 0658             strrev_L0:
0026++ 0658 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0659 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 065A 3E          	mov [d], al	; store left char into right side
0029++ 065B 1B          	mov al, bl
0030++ 065C F7          	stosb		; store right-side char into left-side; increase DI
0031++ 065D 7E          	dec c
0032++ 065E 7F          	dec d
0033++ 065F C2 00 00    	cmp c, 0
0034++ 0662 C7 58 06    	jne strrev_L0
0035++ 0665             strrev_end:
0036++ 0665 4C          	popa
0037++ 0666 09          	ret
0038++ 0667             	
0039++ 0667             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0667             ; strchr
0041++ 0667             ; search string in D for char in AL
0042++ 0667             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0667             strchr:
0044++ 0667             strchr_L0:
0045++ 0667 32          	mov bl, [d]
0046++ 0668 C1 00       	cmp bl, 0
0047++ 066A C6 75 06    	je strchr_end
0048++ 066D BA          	cmp al, bl
0049++ 066E C6 75 06    	je strchr_end
0050++ 0671 79          	inc d
0051++ 0672 0A 67 06    	jmp strchr_L0
0052++ 0675             strchr_end:
0053++ 0675 1B          	mov al, bl
0054++ 0676 09          	ret
0055++ 0677             
0056++ 0677             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0677             ; strstr
0058++ 0677             ; find sub-string
0059++ 0677             ; str1 in SI
0060++ 0677             ; str2 in DI
0061++ 0677             ; SI points to end of source string
0062++ 0677             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0677             strstr:
0064++ 0677 DB          	push al
0065++ 0678 DA          	push d
0066++ 0679 E3          	push di
0067++ 067A             strstr_loop:
0068++ 067A F3          	cmpsb					; compare a byte of the strings
0069++ 067B C7 86 06    	jne strstr_ret
0070++ 067E FC 00 00    	lea d, [di + 0]
0071++ 0681 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0683 C7 7A 06    	jne strstr_loop				; equal chars but not at end
0073++ 0686             strstr_ret:
0074++ 0686 F0          	pop di
0075++ 0687 E7          	pop d
0076++ 0688 E8          	pop al
0077++ 0689 09          	ret
0078++ 068A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 068A             ; length of null terminated string
0080++ 068A             ; result in C
0081++ 068A             ; pointer in D
0082++ 068A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 068A             strlen:
0084++ 068A DA          	push d
0085++ 068B 38 00 00    	mov c, 0
0086++ 068E             strlen_L1:
0087++ 068E BD 00       	cmp byte [d], 0
0088++ 0690 C6 98 06    	je strlen_ret
0089++ 0693 79          	inc d
0090++ 0694 78          	inc c
0091++ 0695 0A 8E 06    	jmp strlen_L1
0092++ 0698             strlen_ret:
0093++ 0698 E7          	pop d
0094++ 0699 09          	ret
0095++ 069A             
0096++ 069A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 069A             ; STRCMP
0098++ 069A             ; compare two strings
0099++ 069A             ; str1 in SI
0100++ 069A             ; str2 in DI
0101++ 069A             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 069A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 069A             strcmp:
0104++ 069A DB          	push al
0105++ 069B DA          	push d
0106++ 069C E3          	push di
0107++ 069D E2          	push si
0108++ 069E             strcmp_loop:
0109++ 069E F3          	cmpsb					; compare a byte of the strings
0110++ 069F C7 AA 06    	jne strcmp_ret
0111++ 06A2 FB FF FF    	lea d, [si +- 1]
0112++ 06A5 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 06A7 C7 9E 06    	jne strcmp_loop				; equal chars but not at end
0114++ 06AA             strcmp_ret:
0115++ 06AA EF          	pop si
0116++ 06AB F0          	pop di
0117++ 06AC E7          	pop d
0118++ 06AD E8          	pop al
0119++ 06AE 09          	ret
0120++ 06AF             
0121++ 06AF             
0122++ 06AF             ; STRCPY
0123++ 06AF             ; copy null terminated string from SI to DI
0124++ 06AF             ; source in SI
0125++ 06AF             ; destination in DI
0126++ 06AF             strcpy:
0127++ 06AF E2          	push si
0128++ 06B0 E3          	push di
0129++ 06B1 DB          	push al
0130++ 06B2             strcpy_L1:
0131++ 06B2 F6          	lodsb
0132++ 06B3 F7          	stosb
0133++ 06B4 B9 00       	cmp al, 0
0134++ 06B6 C7 B2 06    	jne strcpy_L1
0135++ 06B9             strcpy_end:
0136++ 06B9 E8          	pop al
0137++ 06BA F0          	pop di
0138++ 06BB EF          	pop si
0139++ 06BC 09          	ret
0140++ 06BD             
0141++ 06BD             ; STRCAT
0142++ 06BD             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 06BD             ; source in SI
0144++ 06BD             ; destination in DI
0145++ 06BD             strcat:
0146++ 06BD E2          	push si
0147++ 06BE E3          	push di
0148++ 06BF D7          	push a
0149++ 06C0 DA          	push d
0150++ 06C1 50          	mov a, di
0151++ 06C2 3C          	mov d, a
0152++ 06C3             strcat_goto_end_L1:
0153++ 06C3 BD 00       	cmp byte[d], 0
0154++ 06C5 C6 CC 06    	je strcat_start
0155++ 06C8 79          	inc d
0156++ 06C9 0A C3 06    	jmp strcat_goto_end_L1
0157++ 06CC             strcat_start:
0158++ 06CC FD 50       	mov di, d
0159++ 06CE             strcat_L1:
0160++ 06CE F6          	lodsb
0161++ 06CF F7          	stosb
0162++ 06D0 B9 00       	cmp al, 0
0163++ 06D2 C7 CE 06    	jne strcat_L1
0164++ 06D5             strcat_end:
0165++ 06D5 E7          	pop d
0166++ 06D6 E4          	pop a
0167++ 06D7 F0          	pop di
0168++ 06D8 EF          	pop si
0169++ 06D9 09          	ret
0005+  06DA             
0006+  06DA 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  06DE 34 35 36 37 
0006+  06E2 38 39 41 42 
0006+  06E6 43 44 45 46 
0007+  06EA 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  06EE 1B 5B 48 00 
0008+  06F2             
0009+  06F2 01 00       table_power:.dw 1
0010+  06F4 0A 00       			.dw 10
0011+  06F6 64 00       			.dw 100
0012+  06F8 E8 03       			.dw 1000
0013+  06FA 10 27       			.dw 10000
0014+  06FC             
0015+  06FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  06FC             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  06FC             ; ASCII in BL
0018+  06FC             ; result in AL
0019+  06FC             ; ascii for F = 0100 0110
0020+  06FC             ; ascii for 9 = 0011 1001
0021+  06FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  06FC             hex_ascii_encode:
0023+  06FC 1B          	mov al, bl
0024+  06FD 93 40       	test al, $40				; test if letter or number
0025+  06FF C7 05 07    	jnz hex_letter
0026+  0702 87 0F       	and al, $0F				; get number
0027+  0704 09          	ret
0028+  0705             hex_letter:
0029+  0705 87 0F       	and al, $0F				; get letter
0030+  0707 6A 09       	add al, 9
0031+  0709 09          	ret
0032+  070A             
0033+  070A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  070A             ; ATOI
0035+  070A             ; 2 letter hex string in B
0036+  070A             ; 8bit integer returned in AL
0037+  070A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  070A             atoi:
0039+  070A D8          	push b
0040+  070B 07 FC 06    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  070E 30          	mov bl, bh
0042+  070F DB          	push al					; save a
0043+  0710 07 FC 06    	call hex_ascii_encode
0044+  0713 EA          	pop bl	
0045+  0714 FD 9E 04    	shl al, 4
0046+  0717 8C          	or al, bl
0047+  0718 E5          	pop b
0048+  0719 09          	ret	
0049+  071A             
0050+  071A             
0051+  071A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  071A             ; printf
0053+  071A             ; no need for explanations!
0054+  071A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  071A             printf:
0056+  071A 09          	ret
0057+  071B             
0058+  071B             
0059+  071B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  071B             ; scanf
0061+  071B             ; no need for explanations!
0062+  071B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  071B             scanf:
0064+  071B 09          	ret
0065+  071C             
0066+  071C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  071C             ; ITOA
0068+  071C             ; 8bit value in BL
0069+  071C             ; 2 byte ASCII result in A
0070+  071C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  071C             itoa:
0072+  071C DA          	push d
0073+  071D D8          	push b
0074+  071E A7 00       	mov bh, 0
0075+  0720 FD A4 04    	shr bl, 4	
0076+  0723 74          	mov d, b
0077+  0724 1F DA 06    	mov al, [d + s_hex_digits]
0078+  0727 23          	mov ah, al
0079+  0728             	
0080+  0728 E5          	pop b
0081+  0729 D8          	push b
0082+  072A A7 00       	mov bh, 0
0083+  072C FD 87 0F    	and bl, $0F
0084+  072F 74          	mov d, b
0085+  0730 1F DA 06    	mov al, [d + s_hex_digits]
0086+  0733 E5          	pop b
0087+  0734 E7          	pop d
0088+  0735 09          	ret
0089+  0736             
0090+  0736             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0736             ; HEX STRING TO BINARY
0092+  0736             ; di = destination address
0093+  0736             ; si = source
0094+  0736             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0736             hex_to_int:
0096+  0736             hex_to_int_L1:
0097+  0736 F6          	lodsb					; load from [SI] to AL
0098+  0737 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0739 C6 46 07    	jz hex_to_int_ret
0100+  073C 36          	mov bh, al
0101+  073D F6          	lodsb
0102+  073E 2F          	mov bl, al
0103+  073F 07 0A 07    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0742 F7          	stosb					; store AL to [DI]
0105+  0743 0A 36 07    	jmp hex_to_int_L1
0106+  0746             hex_to_int_ret:
0107+  0746 09          	ret		
0108+  0747             
0109+  0747             
0110+  0747             
0111+  0747             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0747             ; GETCHAR
0113+  0747             ; char in ah
0114+  0747             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0747             getchar:
0116+  0747 DB          	push al
0117+  0748             getchar_retry:
0118+  0748 FD 0C       	sti
0119+  074A 19 01       	mov al, 1
0120+  074C 05 03       	syscall sys_io			; receive in AH
0121+  074E B9 00       	cmp al, 0			; check if any char was receive
0122+  0750 C6 48 07    	je getchar_retry
0123+  0753 E8          	pop al
0124+  0754 09          	ret
0125+  0755             
0126+  0755             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0755             ; PUTCHAR
0128+  0755             ; char in ah
0129+  0755             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0755             putchar:
0131+  0755 D7          	push a
0132+  0756 19 00       	mov al, 0
0133+  0758 05 03       	syscall sys_io			; char in AH
0134+  075A E4          	pop a
0135+  075B 09          	ret
0136+  075C             
0137+  075C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  075C             ;; INPUT A STRING
0139+  075C             ;; terminates with null
0140+  075C             ;; pointer in D
0141+  075C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  075C             gets:
0143+  075C D7          	push a
0144+  075D DA          	push d
0145+  075E             gets_loop:
0146+  075E FD 0C       	sti
0147+  0760 19 01       	mov al, 1
0148+  0762 05 03       	syscall sys_io			; receive in AH
0149+  0764 B9 00       	cmp al, 0				; check error code (AL)
0150+  0766 C6 5E 07    	je gets_loop			; if no char received, retry
0151+  0769             
0152+  0769 76 1B       	cmp ah, 27
0153+  076B C6 8C 07    	je gets_telnet_escape
0154+  076E 76 0A       	cmp ah, $0A				; LF
0155+  0770 C6 E5 07    	je gets_end
0156+  0773 76 0D       	cmp ah, $0D				; CR
0157+  0775 C6 E5 07    	je gets_end
0158+  0778 76 5C       	cmp ah, $5C				; '\\'
0159+  077A C6 BC 07    	je gets_escape
0160+  077D             	
0161+  077D 76 08       	cmp ah, $08			; check for backspace
0162+  077F C6 88 07    	je gets_backspace
0163+  0782             
0164+  0782 1A          	mov al, ah
0165+  0783 3E          	mov [d], al
0166+  0784 79          	inc d
0167+  0785 0A 5E 07    	jmp gets_loop
0168+  0788             gets_backspace:
0169+  0788 7F          	dec d
0170+  0789 0A 5E 07    	jmp gets_loop
0171+  078C             gets_telnet_escape:
0172+  078C FD 0C       	sti
0173+  078E 19 01       	mov al, 1
0174+  0790 05 03       	syscall sys_io				; receive in AH without echo
0175+  0792 B9 00       	cmp al, 0					; check error code (AL)
0176+  0794 C6 8C 07    	je gets_telnet_escape		; if no char received, retry
0177+  0797 76 5B       	cmp ah, '['
0178+  0799 C7 5E 07    	jne gets_loop
0179+  079C             gets_telnet_escape_phase2:
0180+  079C FD 0C       	sti
0181+  079E 19 01       	mov al, 1
0182+  07A0 05 03       	syscall sys_io					; receive in AH without echo
0183+  07A2 B9 00       	cmp al, 0						; check error code (AL)
0184+  07A4 C6 9C 07    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  07A7 76 44       	cmp ah, 'D'
0186+  07A9 C6 B4 07    	je gets_left_arrow
0187+  07AC 76 43       	cmp ah, 'C'
0188+  07AE C6 B8 07    	je gets_right_arrow
0189+  07B1 0A 5E 07    	jmp gets_loop
0190+  07B4             gets_left_arrow:
0191+  07B4 7F          	dec d
0192+  07B5 0A 5E 07    	jmp gets_loop
0193+  07B8             gets_right_arrow:
0194+  07B8 79          	inc d
0195+  07B9 0A 5E 07    	jmp gets_loop
0196+  07BC             gets_escape:
0197+  07BC FD 0C       	sti
0198+  07BE 19 01       	mov al, 1
0199+  07C0 05 03       	syscall sys_io			; receive in AH
0200+  07C2 B9 00       	cmp al, 0				; check error code (AL)
0201+  07C4 C6 BC 07    	je gets_escape			; if no char received, retry
0202+  07C7 76 6E       	cmp ah, 'n'
0203+  07C9 C6 D7 07    	je gets_LF
0204+  07CC 76 72       	cmp ah, 'r'
0205+  07CE C6 DE 07    	je gets_CR
0206+  07D1 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  07D2 3E          	mov [d], al
0208+  07D3 79          	inc d
0209+  07D4 0A 5E 07    	jmp gets_loop
0210+  07D7             gets_LF:
0211+  07D7 19 0A       	mov al, $0A
0212+  07D9 3E          	mov [d], al
0213+  07DA 79          	inc d
0214+  07DB 0A 5E 07    	jmp gets_loop
0215+  07DE             gets_CR:
0216+  07DE 19 0D       	mov al, $0D
0217+  07E0 3E          	mov [d], al
0218+  07E1 79          	inc d
0219+  07E2 0A 5E 07    	jmp gets_loop
0220+  07E5             gets_end:
0221+  07E5 19 00       	mov al, 0
0222+  07E7 3E          	mov [d], al				; terminate string
0223+  07E8 E7          	pop d
0224+  07E9 E4          	pop a
0225+  07EA 09          	ret
0226+  07EB             
0227+  07EB             
0228+  07EB             
0229+  07EB             
0230+  07EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  07EB             ;; INPUT TEXT
0232+  07EB             ;; terminated with CTRL+D
0233+  07EB             ;; pointer in D
0234+  07EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  07EB             gettxt:
0236+  07EB D7          	push a
0237+  07EC DA          	push d
0238+  07ED             gettxt_loop:
0239+  07ED 19 01       	mov al, 1
0240+  07EF 05 03       	syscall sys_io			; receive in AH
0241+  07F1 B9 00       	cmp al, 0				; check error code (AL)
0242+  07F3 C6 ED 07    	je gettxt_loop		; if no char received, retry
0243+  07F6 76 04       	cmp ah, 4			; EOT
0244+  07F8 C6 36 08    	je gettxt_end
0245+  07FB 76 08       	cmp ah, $08			; check for backspace
0246+  07FD C6 32 08    	je gettxt_backspace
0247+  0800 76 5C       	cmp ah, $5C				; '\\'
0248+  0802 C6 0B 08    	je gettxt_escape
0249+  0805 1A          	mov al, ah
0250+  0806 3E          	mov [d], al
0251+  0807 79          	inc d
0252+  0808 0A ED 07    	jmp gettxt_loop
0253+  080B             gettxt_escape:
0254+  080B 19 01       	mov al, 1
0255+  080D 05 03       	syscall sys_io			; receive in AH
0256+  080F B9 00       	cmp al, 0				; check error code (AL)
0257+  0811 C6 0B 08    	je gettxt_escape		; if no char received, retry
0258+  0814 76 6E       	cmp ah, 'n'
0259+  0816 C6 24 08    	je gettxt_LF
0260+  0819 76 72       	cmp ah, 'r'
0261+  081B C6 2B 08    	je gettxt_CR
0262+  081E 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  081F 3E          	mov [d], al
0264+  0820 79          	inc d
0265+  0821 0A ED 07    	jmp gettxt_loop
0266+  0824             gettxt_LF:
0267+  0824 19 0A       	mov al, $0A
0268+  0826 3E          	mov [d], al
0269+  0827 79          	inc d
0270+  0828 0A ED 07    	jmp gettxt_loop
0271+  082B             gettxt_CR:
0272+  082B 19 0D       	mov al, $0D
0273+  082D 3E          	mov [d], al
0274+  082E 79          	inc d
0275+  082F 0A ED 07    	jmp gettxt_loop
0276+  0832             gettxt_backspace:
0277+  0832 7F          	dec d
0278+  0833 0A ED 07    	jmp gettxt_loop
0279+  0836             gettxt_end:
0280+  0836 19 00       	mov al, 0
0281+  0838 3E          	mov [d], al				; terminate string
0282+  0839 E7          	pop d
0283+  083A E4          	pop a
0284+  083B 09          	ret
0285+  083C             
0286+  083C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  083C             ; PRINT NEW LINE
0288+  083C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  083C             printnl:
0290+  083C D7          	push a
0291+  083D 10 00 0A    	mov a, $0A00
0292+  0840 05 03       	syscall sys_io
0293+  0842 10 00 0D    	mov a, $0D00
0294+  0845 05 03       	syscall sys_io
0295+  0847 E4          	pop a
0296+  0848 09          	ret
0297+  0849             
0298+  0849             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0849             ; strtoint
0300+  0849             ; 4 digit hex string number in d
0301+  0849             ; integer returned in A
0302+  0849             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0849             strtointx:
0304+  0849 D8          	push b
0305+  084A 32          	mov bl, [d]
0306+  084B 37          	mov bh, bl
0307+  084C 33 01 00    	mov bl, [d + 1]
0308+  084F 07 0A 07    	call atoi				; convert to int in AL
0309+  0852 23          	mov ah, al				; move to AH
0310+  0853 33 02 00    	mov bl, [d + 2]
0311+  0856 37          	mov bh, bl
0312+  0857 33 03 00    	mov bl, [d + 3]
0313+  085A 07 0A 07    	call atoi				; convert to int in AL
0314+  085D E5          	pop b
0315+  085E 09          	ret
0316+  085F             
0317+  085F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  085F             ; strtoint
0319+  085F             ; 5 digit base10 string number in d
0320+  085F             ; integer returned in A
0321+  085F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  085F             strtoint:
0323+  085F E2          	push si
0324+  0860 D8          	push b
0325+  0861 D9          	push c
0326+  0862 DA          	push d
0327+  0863 07 8A 06    	call strlen			; get string length in C
0328+  0866 7E          	dec c
0329+  0867 FD 4E       	mov si, d
0330+  0869 12          	mov a, c
0331+  086A FD 99       	shl a
0332+  086C 3B F2 06    	mov d, table_power
0333+  086F 59          	add d, a
0334+  0870 38 00 00    	mov c, 0
0335+  0873             strtoint_L0:
0336+  0873 F6          	lodsb			; load ASCII to al
0337+  0874 B9 00       	cmp al, 0
0338+  0876 C6 89 08    	je strtoint_end
0339+  0879 6F 30       	sub al, $30		; make into integer
0340+  087B 22 00       	mov ah, 0
0341+  087D 2A          	mov b, [d]
0342+  087E AC          	mul a, b			; result in B since it fits in 16bits
0343+  087F 11          	mov a, b
0344+  0880 28          	mov b, c
0345+  0881 54          	add a, b
0346+  0882 39          	mov c, a
0347+  0883 63 02 00    	sub d, 2
0348+  0886 0A 73 08    	jmp strtoint_L0
0349+  0889             strtoint_end:
0350+  0889 12          	mov a, c
0351+  088A E7          	pop d
0352+  088B E6          	pop c
0353+  088C E5          	pop b
0354+  088D EF          	pop si
0355+  088E 09          	ret
0356+  088F             
0357+  088F             
0358+  088F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  088F             ; PRINT NULL TERMINATED STRING
0360+  088F             ; pointer in D
0361+  088F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  088F             puts:
0363+  088F D7          	push a
0364+  0890 DA          	push d
0365+  0891             puts_L1:
0366+  0891 1E          	mov al, [d]
0367+  0892 B9 00       	cmp al, 0
0368+  0894 C6 A0 08    	jz puts_END
0369+  0897 23          	mov ah, al
0370+  0898 19 00       	mov al, 0
0371+  089A 05 03       	syscall sys_io
0372+  089C 79          	inc d
0373+  089D 0A 91 08    	jmp puts_L1
0374+  08A0             puts_END:
0375+  08A0 E7          	pop d
0376+  08A1 E4          	pop a
0377+  08A2 09          	ret
0378+  08A3             
0379+  08A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  08A3             ; PRINT N SIZE STRING
0381+  08A3             ; pointer in D
0382+  08A3             ; size in C
0383+  08A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  08A3             putsn:
0385+  08A3 DB          	push al
0386+  08A4 DA          	push d
0387+  08A5 D9          	push c
0388+  08A6             putsn_L0:
0389+  08A6 1E          	mov al, [d]
0390+  08A7 23          	mov ah, al
0391+  08A8 19 00       	mov al, 0
0392+  08AA 05 03       	syscall sys_io
0393+  08AC 79          	inc d
0394+  08AD 7E          	dec c	
0395+  08AE C2 00 00    	cmp c, 0
0396+  08B1 C7 A6 08    	jne putsn_L0
0397+  08B4             putsn_end:
0398+  08B4 E6          	pop c
0399+  08B5 E7          	pop d
0400+  08B6 E8          	pop al
0401+  08B7 09          	ret
0402+  08B8             
0403+  08B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  08B8             ; print 16bit decimal number
0405+  08B8             ; input number in A
0406+  08B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  08B8             print_u16d:
0408+  08B8 D7          	push a
0409+  08B9 D8          	push b
0410+  08BA 26 10 27    	mov b, 10000
0411+  08BD AE          	div a, b			; get 10000's coeff.
0412+  08BE 07 E0 08    	call print_number
0413+  08C1 11          	mov a, b
0414+  08C2 26 E8 03    	mov b, 1000
0415+  08C5 AE          	div a, b			; get 1000's coeff.
0416+  08C6 07 E0 08    	call print_number
0417+  08C9 11          	mov a, b
0418+  08CA 26 64 00    	mov b, 100
0419+  08CD AE          	div a, b
0420+  08CE 07 E0 08    	call print_number
0421+  08D1 11          	mov a, b
0422+  08D2 26 0A 00    	mov b, 10
0423+  08D5 AE          	div a, b
0424+  08D6 07 E0 08    	call print_number
0425+  08D9 1B          	mov al, bl			; 1's coeff in bl
0426+  08DA 07 E0 08    	call print_number
0427+  08DD E5          	pop b
0428+  08DE E4          	pop a
0429+  08DF 09          	ret
0430+  08E0             
0431+  08E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0432+  08E0             ; print AL
0433+  08E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0434+  08E0             print_number:
0435+  08E0 6A 30       	add al, $30
0436+  08E2 23          	mov ah, al
0437+  08E3 07 55 07    	call putchar
0438+  08E6 09          	ret
0439+  08E7             
0440+  08E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0441+  08E7             ; PRINT 16BIT HEX INTEGER
0442+  08E7             ; integer value in reg B
0443+  08E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0444+  08E7             print_u16x:
0445+  08E7 D7          	push a
0446+  08E8 D8          	push b
0447+  08E9 DD          	push bl
0448+  08EA 30          	mov bl, bh
0449+  08EB 07 1C 07    	call itoa				; convert bh to char in A
0450+  08EE 2F          	mov bl, al				; save al
0451+  08EF 19 00       	mov al, 0
0452+  08F1 05 03       	syscall sys_io				; display AH
0453+  08F3 24          	mov ah, bl				; retrieve al
0454+  08F4 19 00       	mov al, 0
0455+  08F6 05 03       	syscall sys_io				; display AL
0456+  08F8             
0457+  08F8 EA          	pop bl
0458+  08F9 07 1C 07    	call itoa				; convert bh to char in A
0459+  08FC 2F          	mov bl, al				; save al
0460+  08FD 19 00       	mov al, 0
0461+  08FF 05 03       	syscall sys_io				; display AH
0462+  0901 24          	mov ah, bl				; retrieve al
0463+  0902 19 00       	mov al, 0
0464+  0904 05 03       	syscall sys_io				; display AL
0465+  0906             
0466+  0906 E5          	pop b
0467+  0907 E4          	pop a
0468+  0908 09          	ret
0469+  0909             
0470+  0909             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0471+  0909             ; INPUT 16BIT HEX INTEGER
0472+  0909             ; read 16bit integer into A
0473+  0909             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0474+  0909             scan_u16x:
0475+  0909 F8 10 00    	enter 16
0476+  090C D8          	push b
0477+  090D DA          	push d
0478+  090E             
0479+  090E FA F1 FF    	lea d, [bp + -15]
0480+  0911 07 5C 07    	call gets				; get number
0481+  0914             
0482+  0914 32          	mov bl, [d]
0483+  0915 37          	mov bh, bl
0484+  0916 33 01 00    	mov bl, [d + 1]
0485+  0919 07 0A 07    	call atoi				; convert to int in AL
0486+  091C 23          	mov ah, al				; move to AH
0487+  091D             
0488+  091D 33 02 00    	mov bl, [d + 2]
0489+  0920 37          	mov bh, bl
0490+  0921 33 03 00    	mov bl, [d + 3]
0491+  0924 07 0A 07    	call atoi				; convert to int in AL
0492+  0927             
0493+  0927 E7          	pop d
0494+  0928 E5          	pop b
0495+  0929 F9          	leave
0496+  092A 09          	ret
0497+  092B             
0498+  092B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0499+  092B             ; PRINT 8bit HEX INTEGER
0500+  092B             ; integer value in reg bl
0501+  092B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0502+  092B             print_u8x:
0503+  092B D7          	push a
0504+  092C DD          	push bl
0505+  092D             
0506+  092D 07 1C 07    	call itoa				; convert bl to char in A
0507+  0930 2F          	mov bl, al				; save al
0508+  0931 19 00       	mov al, 0
0509+  0933 05 03       	syscall sys_io				; display AH
0510+  0935 24          	mov ah, bl				; retrieve al
0511+  0936 19 00       	mov al, 0
0512+  0938 05 03       	syscall sys_io				; display AL
0513+  093A             
0514+  093A EA          	pop bl
0515+  093B E4          	pop a
0516+  093C 09          	ret
0517+  093D             
0518+  093D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0519+  093D             ; print 8bit decimal unsigned number
0520+  093D             ; input number in AL
0521+  093D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0522+  093D             print_u8d:
0523+  093D D7          	push a
0524+  093E D8          	push b
0525+  093F             
0526+  093F 22 00       	mov ah, 0
0527+  0941 26 64 00    	mov b, 100
0528+  0944 AE          	div a, b
0529+  0945 D8          	push b			; save remainder
0530+  0946 B9 00       	cmp al, 0
0531+  0948 C6 52 09    	je skip100
0532+  094B 6A 30       	add al, $30
0533+  094D 23          	mov ah, al
0534+  094E 19 00       	mov al, 0
0535+  0950 05 03       	syscall sys_io	; print coeff
0536+  0952             skip100:
0537+  0952 E4          	pop a
0538+  0953 22 00       	mov ah, 0
0539+  0955 26 0A 00    	mov b, 10
0540+  0958 AE          	div a, b
0541+  0959 D8          	push b			; save remainder
0542+  095A B9 00       	cmp al, 0
0543+  095C C6 66 09    	je skip10
0544+  095F 6A 30       	add al, $30
0545+  0961 23          	mov ah, al
0546+  0962 19 00       	mov al, 0
0547+  0964 05 03       	syscall sys_io	; print coeff
0548+  0966             skip10:
0549+  0966 E4          	pop a
0550+  0967 1B          	mov al, bl
0551+  0968 6A 30       	add al, $30
0552+  096A 23          	mov ah, al
0553+  096B 19 00       	mov al, 0
0554+  096D 05 03       	syscall sys_io	; print coeff
0555+  096F E5          	pop b
0556+  0970 E4          	pop a
0557+  0971 09          	ret
0558+  0972             
0559+  0972             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0560+  0972             ; INPUT 8BIT HEX INTEGER
0561+  0972             ; read 8bit integer into AL
0562+  0972             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0563+  0972             scan_u8x:
0564+  0972 F8 04 00    	enter 4
0565+  0975 D8          	push b
0566+  0976 DA          	push d
0567+  0977             
0568+  0977 FA FD FF    	lea d, [bp + -3]
0569+  097A 07 5C 07    	call gets				; get number
0570+  097D             
0571+  097D 32          	mov bl, [d]
0572+  097E 37          	mov bh, bl
0573+  097F 33 01 00    	mov bl, [d + 1]
0574+  0982 07 0A 07    	call atoi				; convert to int in AL
0575+  0985             
0576+  0985 E7          	pop d
0577+  0986 E5          	pop b
0578+  0987 F9          	leave
0579+  0988 09          	ret
0580+  0989             
0581+  0989             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0582+  0989             ; input decimal number
0583+  0989             ; result in A
0584+  0989             ; 655'\0'
0585+  0989             ; low--------high
0586+  0989             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0989             scan_u16d:
0588+  0989 F8 08 00    	enter 8
0589+  098C E2          	push si
0590+  098D D8          	push b
0591+  098E D9          	push c
0592+  098F DA          	push d
0593+  0990 FA F9 FF    	lea d, [bp +- 7]
0594+  0993 07 5C 07    	call gets
0595+  0996 07 8A 06    	call strlen			; get string length in C
0596+  0999 7E          	dec c
0597+  099A FD 4E       	mov si, d
0598+  099C 12          	mov a, c
0599+  099D FD 99       	shl a
0600+  099F 3B F2 06    	mov d, table_power
0601+  09A2 59          	add d, a
0602+  09A3 38 00 00    	mov c, 0
0603+  09A6             mul_loop:
0604+  09A6 F6          	lodsb			; load ASCII to al
0605+  09A7 B9 00       	cmp al, 0
0606+  09A9 C6 BC 09    	je mul_exit
0607+  09AC 6F 30       	sub al, $30		; make into integer
0608+  09AE 22 00       	mov ah, 0
0609+  09B0 2A          	mov b, [d]
0610+  09B1 AC          	mul a, b			; result in B since it fits in 16bits
0611+  09B2 11          	mov a, b
0612+  09B3 28          	mov b, c
0613+  09B4 54          	add a, b
0614+  09B5 39          	mov c, a
0615+  09B6 63 02 00    	sub d, 2
0616+  09B9 0A A6 09    	jmp mul_loop
0617+  09BC             mul_exit:
0618+  09BC 12          	mov a, c
0619+  09BD E7          	pop d
0620+  09BE E6          	pop c
0621+  09BF E5          	pop b
0622+  09C0 EF          	pop si
0623+  09C1 F9          	leave
0624+  09C2 09          	ret
0311   09C3             
0312   09C3             .end
tasm: Number of errors = 0
