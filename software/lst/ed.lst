0001   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002   0000             ; ed - the original Unix text editor!
0003   0000             ;
0004   0000             ; 1,$p
0005   0000             ; 1,2p
0006   0000             ;
0007   0000             ; 2d
0008   0000             ; 1,3d
0009   0000             ;
0010   0000             ; 2a
0011   0000             ; 
0012   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0013   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0014   0000             
0015   0400             .org PROC_TEXT_ORG			; origin at 1024
0016   0400             
0017   0400             ed_main:
0018   0400 FD 47 FF FF 	mov sp, $FFFF
0019   0404 FD 49 FF FF 	mov bp, $FFFF
0020   0408             
0021   0408 10 00 00    	mov a, 0
0022   040B 42 DA 0E    	mov [prog], a
0023   040E 07 3B 0D    	call get_token
0024   0411 1D DD 0E    	mov al, [tok]
0025   0414 B9 14       	cmp al, TOK_END
0026   0416 C6 4D 04    	je no_filename_given	; no filename given as argument
0027   0419             
0028   0419 07 C1 0E    	call putback
0029   041C 07 E4 0C    	call get_path			; read filename
0030   041F 3B DE 0E    	mov d, tokstr
0031   0422 FD 4F E4 21 	mov di, text_buffer		; pointer to write buffer
0032   0426 19 14       	mov al, 20
0033   0428 05 04       	syscall sys_filesystem		; read textfile into buffer
0034   042A 3B E4 21    	mov d, text_buffer
0035   042D 07 DA 08    	call strlen
0036   0430 12          	mov a, c				; find size of buffer
0037   0431 53 E4 21    	add a, text_buffer
0038   0434 3C          	mov d, a
0039   0435 19 0A       	mov al, $0A
0040   0437 3E          	mov [d], al
0041   0438 79          	inc d
0042   0439 19 00       	mov al, 0
0043   043B 3E          	mov [d], al
0044   043C 13          	mov a, d
0045   043D 42 68 08    	mov [txt_buffer_ptr], a	; set buffer pointer
0046   0440             
0047   0440 3B E4 21    	mov d, text_buffer
0048   0443 07 DA 08    	call strlen
0049   0446 12          	mov a, c
0050   0447 07 08 0B    	call print_u16d
0051   044A 07 8C 0A    	call printnl
0052   044D             
0053   044D             no_filename_given:
0054   044D             main_L0:
0055   044D F2 DE 0E 00 	mov byte [tokstr], 0			; clear tokstr (so that enter doesnt repeat last shell command)
0056   0451 07 57 04    	call command_parser
0057   0454 0A 4D 04    	jmp main_L0
0058   0457             
0059   0457             ; ,p
0060   0457             ; 1,3p
0061   0457             ; 2p
0062   0457             ; 1,$d
0063   0457             command_parser:
0064   0457 3B 68 06    	mov d, input_buff
0065   045A 10 68 06    	mov a, input_buff
0066   045D 42 DA 0E    	mov [prog], a
0067   0460 07 AC 09    	call gets						; get command
0068   0463 1D 68 06    	mov al, [input_buff]
0069   0466 07 30 0C    	call isalpha
0070   0469 C6 B0 04    	je get_command					; test if this is a command with a range in front
0071   046C             
0072   046C B9 2C       	cmp al, ','
0073   046E C7 87 04    	jne parser_hasrange
0074   0471 10 01 00    	mov a, 1
0075   0474 42 E0 0F    	mov [start], a
0076   0477 07 4F 06    	call total_lines
0077   047A 42 E2 0F    	mov [end], a			; set range as the full range
0078   047D 14 DA 0E    	mov a, [prog]
0079   0480 77          	inc a
0080   0481 42 DA 0E    	mov [prog], a			; pass over ',' token
0081   0484 0A B0 04    	jmp get_command
0082   0487             
0083   0487             parser_hasrange:
0084   0487 07 76 0E    	call get_number			; range start
0085   048A 3B DE 0E    	mov d, tokstr
0086   048D 07 AF 0A    	call strtoint			; convert range to integer in A
0087   0490 42 E0 0F    	mov [start], a			; save range start
0088   0493 42 E2 0F    	mov [end], a			; save end too in case the range end is not given
0089   0496             
0090   0496 07 3B 0D    	call get_token
0091   0499 1D DD 0E    	mov al, [tok]
0092   049C B9 0B       	cmp al, TOK_COMMA
0093   049E C6 A4 04    	je parser_range_end
0094   04A1 0A B3 04    	jmp parser_start		; not a comma, so it must be a command
0095   04A4             
0096   04A4             parser_range_end:
0097   04A4 07 76 0E    	call get_number			; range end
0098   04A7 3B DE 0E    	mov d, tokstr
0099   04AA 07 AF 0A    	call strtoint			; convert range to integer in A
0100   04AD 42 E2 0F    	mov [end], a			; save range start
0101   04B0             
0102   04B0             get_command:
0103   04B0 07 3B 0D    	call get_token			; get command
0104   04B3             parser_start:
0105   04B3 FD 4F 6C 08 	mov di, keywords
0106   04B7 10 00 00    	mov a, 0
0107   04BA 42 DE 0F    	mov [parser_index], a		; reset keywords index
0108   04BD             parser_L2:
0109   04BD FD 4D DE 0E 	mov si, tokstr
0110   04C1 07 EA 08    	call strcmp
0111   04C4 C6 EE 04    	je parser_cmd_equal
0112   04C7             parser_L2_L0:
0113   04C7 FC 00 00    	lea d, [di + 0]
0114   04CA 1E          	mov al, [d]
0115   04CB B9 00       	cmp al, 0
0116   04CD C6 D6 04    	je parser_L2_L0_exit			; run through the keyword until finding NULL
0117   04D0 D4 01 00    	add di, 1
0118   04D3 0A C7 04    	jmp parser_L2_L0
0119   04D6             parser_L2_L0_exit:
0120   04D6 D4 01 00    	add di, 1				; then skip NULL byte at the end 
0121   04D9 14 DE 0F    	mov a, [parser_index]
0122   04DC 53 02 00    	add a, 2
0123   04DF 42 DE 0F    	mov [parser_index], a			; increase keywords table index
0124   04E2 FC 00 00    	lea d, [di + 0]
0125   04E5 1E          	mov al, [d]
0126   04E6 B9 00       	cmp al, 0
0127   04E8 C6 00 05    	je parser_cmd_not_found
0128   04EB 0A BD 04    	jmp parser_L2
0129   04EE             parser_cmd_equal:
0130   04EE 10 00 0D    	mov a, $0D00
0131   04F1 05 03       	syscall sys_io				; print carriage return
0132   04F3 14 DE 0F    	mov a, [parser_index]			; get the keyword pointer
0133   04F6 FD 07 7F 08 	call [a + keyword_pointers]		; execute command
0134   04FA 10 00 0D    	mov a, $0D00
0135   04FD 05 03       	syscall sys_io				; print carriage return
0136   04FF 09          	ret
0137   0500             parser_cmd_not_found:
0138   0500 22 3F       	mov ah, '?'
0139   0502 07 A5 09    	call putchar
0140   0505 09          	ret
0141   0506             
0142   0506             ; A = line to append after
0143   0506             ; B = address of text to append
0144   0506             append_lines:
0145   0506 77          	inc a
0146   0507 74          	mov d, b
0147   0508 07 DA 08    	call strlen		; length of text in C
0148   050B 07 32 06    	call find_line	; address in D
0149   050E FD 50       	mov di, d
0150   0510 FD 4E       	mov si, d
0151   0512             append_lines_L0:
0152   0512 F6          	lodsb
0153   0513 B9 0A       	cmp al, $0A
0154   0515 C7 12 05    	jne append_lines_L0
0155   0518             ; now SI points to char after \n
0156   0518             ; start copying chars from there to beginning of deleted line
0157   0518             ; copy till we find NULL
0158   0518             append_lines_L1:
0159   0518 F6          	lodsb
0160   0519 F7          	stosb
0161   051A B9 00       	cmp al, 0
0162   051C C7 18 05    	jne append_lines_L1
0163   051F             append_lines_end:
0164   051F 09          	ret
0165   0520             
0166   0520             cmd_append:
0167   0520 14 68 08    	mov a, [txt_buffer_ptr]
0168   0523 3C          	mov d, a
0169   0524             cmd_append_L0:
0170   0524 07 AC 09    	call gets		; read new line
0171   0527 FD 4E       	mov si, d
0172   0529 FD 4F 6A 08 	mov di, s_dot
0173   052D 07 EA 08    	call strcmp
0174   0530 C6 50 05    	je cmd_append_end
0175   0533 14 68 08    	mov a, [txt_buffer_ptr]
0176   0536 4D          	mov si, a
0177   0537             cmd_append_L1:		; look for NULL termination
0178   0537 F6          	lodsb
0179   0538 B9 00       	cmp al, 0
0180   053A C7 37 05    	jne cmd_append_L1
0181   053D FB FF FF    	lea d, [si + -1]
0182   0540 19 0A       	mov al, $0A
0183   0542 3E          	mov [d], al
0184   0543 FB 00 00    	lea d, [si + 0]
0185   0546 19 00       	mov al, 0
0186   0548 3E          	mov [d], al
0187   0549 13          	mov a, d
0188   054A 42 68 08    	mov [txt_buffer_ptr], a
0189   054D 0A 24 05    	jmp cmd_append_L0
0190   0550             cmd_append_end:
0191   0550 19 00       	mov al, 0
0192   0552 3E          	mov [d], al
0193   0553 09          	ret
0194   0554             
0195   0554             cmd_insert:
0196   0554 09          	ret
0197   0555             
0198   0555             cmd_quit:
0199   0555 05 0B       	syscall sys_terminate_proc
0200   0557             
0201   0557             ; first line\n
0202   0557             ; second line\n
0203   0557             ; third line\n
0204   0557             ; fourth line\n
0205   0557             cmd_delete:
0206   0557 14 E2 0F    	mov a, [end]		; get starting line
0207   055A             cmd_delete_L0:
0208   055A 07 78 05    	call delete_line		
0209   055D 29 E0 0F    	mov b, [start]
0210   0560 B0          	cmp a, b
0211   0561 C6 68 05    	je cmd_delete_end
0212   0564 7D          	dec a
0213   0565 0A 5A 05    	jmp cmd_delete_L0
0214   0568             cmd_delete_end:
0215   0568             ; set text pointer to the end of file
0216   0568 FD 4D E4 21 	mov si, text_buffer
0217   056C             cmd_delete_L1:
0218   056C F6          	lodsb
0219   056D B9 00       	cmp al, 0
0220   056F C7 6C 05    	jne cmd_delete_L1
0221   0572 4E          	mov a, si
0222   0573 7D          	dec a
0223   0574 42 68 08    	mov [txt_buffer_ptr], a
0224   0577 09          	ret
0225   0578             	
0226   0578             ; find address of line beginning
0227   0578             ; find EOL address
0228   0578             ; start copying chars from EOL into beginning of required line
0229   0578             ; stop when reache NULL
0230   0578             ; A = line to delete
0231   0578             delete_line:
0232   0578 D7          	push a
0233   0579 07 32 06    	call find_line	; address in D
0234   057C FD 50       	mov di, d
0235   057E FD 4E       	mov si, d
0236   0580             delete_line_L0:
0237   0580 F6          	lodsb
0238   0581 B9 0A       	cmp al, $0A
0239   0583 C7 80 05    	jne delete_line_L0
0240   0586             ; now SI points to char after \n
0241   0586             ; start copying chars from there to beginning of deleted line
0242   0586             ; copy till we find NULL
0243   0586             delete_line_L1:
0244   0586 F6          	lodsb
0245   0587 F7          	stosb
0246   0588 B9 00       	cmp al, 0
0247   058A C7 86 05    	jne delete_line_L1
0248   058D             delete_line_end:
0249   058D E4          	pop a
0250   058E 09          	ret
0251   058F             
0252   058F             cmd_open:
0253   058F 07 3B 0D    	call get_token			; read filename
0254   0592 3B DE 0E    	mov d, tokstr
0255   0595 FD 4F E4 21 	mov di, text_buffer		; pointer to write buffer
0256   0599 19 14       	mov al, 20
0257   059B 05 04       	syscall sys_filesystem		; read textfile into buffer
0258   059D 3B E4 21    	mov d, text_buffer
0259   05A0 07 DA 08    	call strlen
0260   05A3 12          	mov a, c				; find size of buffer
0261   05A4 53 E4 21    	add a, text_buffer
0262   05A7 3C          	mov d, a
0263   05A8 19 0A       	mov al, $0A
0264   05AA 3E          	mov [d], al
0265   05AB 79          	inc d
0266   05AC 19 00       	mov al, 0
0267   05AE 3E          	mov [d], al
0268   05AF 13          	mov a, d
0269   05B0 42 68 08    	mov [txt_buffer_ptr], a	; set buffer pointer
0270   05B3             
0271   05B3 3B E4 21    	mov d, text_buffer
0272   05B6 07 DA 08    	call strlen
0273   05B9 12          	mov a, c
0274   05BA 07 08 0B    	call print_u16d
0275   05BD 07 8C 0A    	call printnl
0276   05C0 09          	ret
0277   05C1             
0278   05C1             cmd_save:
0279   05C1 07 3B 0D    	call get_token		; read filename
0280   05C4 FD 4D DE 0E 	mov si, tokstr
0281   05C8 FD 4F E5 1F 	mov di, transient_data + 1
0282   05CC 07 FF 08    	call strcpy				; copy filename
0283   05CF             
0284   05CF 3B E4 1F    	mov d, transient_data	; pass data to kernel. starting at 512 byte header. text_buffer follows the header in mem.
0285   05D2 19 05       	mov al, 5
0286   05D4 05 04       	syscall sys_filesystem
0287   05D6             
0288   05D6 3B E4 21    	mov d, text_buffer
0289   05D9 07 DA 08    	call strlen
0290   05DC 12          	mov a, c
0291   05DD 07 08 0B    	call print_u16d
0292   05E0 07 8C 0A    	call printnl
0293   05E3 09          	ret
0294   05E4             	
0295   05E4             cmd_list:
0296   05E4 3B E4 21    	mov d, text_buffer
0297   05E7 07 DF 0A    	call puts
0298   05EA 09          	ret
0299   05EB             
0300   05EB             cmd_print:
0301   05EB 14 E0 0F    	mov a, [start]		; get starting line
0302   05EE             cmd_print_L0:
0303   05EE 07 32 06    	call find_line		; address in D
0304   05F1 07 1F 06    	call printline		; print line at D	
0305   05F4 29 E2 0F    	mov b, [end]
0306   05F7 B0          	cmp a, b
0307   05F8 C6 FF 05    	je cmd_print_end
0308   05FB 77          	inc a
0309   05FC 0A EE 05    	jmp cmd_print_L0
0310   05FF             cmd_print_end:
0311   05FF 09          	ret
0312   0600             
0313   0600             cmd_print_numbered:
0314   0600 14 E0 0F    	mov a, [start]		; get starting line
0315   0603             cmd_print_numbered_L0:
0316   0603 D7          	push a
0317   0604 07 08 0B    	call print_u16d
0318   0607 22 09       	mov ah, $09			; TAB
0319   0609 07 A5 09    	call putchar
0320   060C E4          	pop a
0321   060D 07 32 06    	call find_line		; address in D
0322   0610 07 1F 06    	call printline		; print line at D	
0323   0613 29 E2 0F    	mov b, [end]
0324   0616 B0          	cmp a, b
0325   0617 C6 1E 06    	je cmd_print_numbered_end
0326   061A 77          	inc a
0327   061B 0A 03 06    	jmp cmd_print_numbered_L0
0328   061E             cmd_print_numbered_end:
0329   061E 09          	ret
0330   061F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331   061F             ; PRINT LINE
0332   061F             ; pointer in D
0333   061F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334   061F             printline:
0335   061F D7          	push a
0336   0620 DA          	push d
0337   0621             printline_L0:
0338   0621 1E          	mov al, [d]
0339   0622 23          	mov ah, al
0340   0623 07 A5 09    	call putchar
0341   0626 B9 0A       	cmp al, $0A
0342   0628 C6 2F 06    	je printline_end
0343   062B 79          	inc d
0344   062C 0A 21 06    	jmp printline_L0
0345   062F             printline_end:
0346   062F E7          	pop d
0347   0630 E4          	pop a
0348   0631 09          	ret
0349   0632             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0350   0632             ; INPUTS
0351   0632             ; A = line number
0352   0632             ; OUTPUTS
0353   0632             ; D = line address
0354   0632             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0355   0632             find_line:
0356   0632 D7          	push a
0357   0633 D8          	push b
0358   0634 26 E4 21    	mov b, text_buffer
0359   0637 FD 42 DA 0E 	mov [prog], b
0360   063B             find_line_L0:
0361   063B AF 01 00    	cmp a, 1
0362   063E C6 48 06    	je find_line_end
0363   0641 07 16 0D    	call get_line
0364   0644 7D          	dec a
0365   0645 0A 3B 06    	jmp find_line_L0
0366   0648             find_line_end:
0367   0648 14 DA 0E    	mov a, [prog]
0368   064B 3C          	mov d, a
0369   064C E5          	pop b
0370   064D E4          	pop a
0371   064E 09          	ret
0372   064F             
0373   064F             
0374   064F             ; find total number of lines
0375   064F             ; A = total
0376   064F             total_lines:
0377   064F 26 00 00    	mov b, 0
0378   0652 FD 4D E4 21 	mov si, text_buffer
0379   0656             total_lines_L0:
0380   0656 F6          	lodsb
0381   0657 B9 00       	cmp al, 0
0382   0659 C6 66 06    	je total_lines_end
0383   065C B9 0A       	cmp al, $0A
0384   065E C7 56 06    	jne total_lines_L0
0385   0661 FD 77       	inc b
0386   0663 0A 56 06    	jmp total_lines_L0
0387   0666             total_lines_end:
0388   0666 11          	mov a, b
0389   0667 09          	ret
0390   0668             
0391   0668 00 00 00 00 input_buff:			.fill 512, 0
0391   066C 00 00 00 00 
0391   0670 00 00 00 00 
0391   0674 00 00 00 00 
0391   0678 00 00 00 00 
0391   067C 00 00 00 00 
0391   0680 00 00 00 00 
0391   0684 00 00 00 00 
0391   0688 00 00 00 00 
0391   068C 00 00 00 00 
0391   0690 00 00 00 00 
0391   0694 00 00 00 00 
0391   0698 00 00 00 00 
0391   069C 00 00 00 00 
0391   06A0 00 00 00 00 
0391   06A4 00 00 00 00 
0391   06A8 00 00 00 00 
0391   06AC 00 00 00 00 
0391   06B0 00 00 00 00 
0391   06B4 00 00 00 00 
0391   06B8 00 00 00 00 
0391   06BC 00 00 00 00 
0391   06C0 00 00 00 00 
0391   06C4 00 00 00 00 
0391   06C8 00 00 00 00 
0391   06CC 00 00 00 00 
0391   06D0 00 00 00 00 
0391   06D4 00 00 00 00 
0391   06D8 00 00 00 00 
0391   06DC 00 00 00 00 
0391   06E0 00 00 00 00 
0391   06E4 00 00 00 00 
0391   06E8 00 00 00 00 
0391   06EC 00 00 00 00 
0391   06F0 00 00 00 00 
0391   06F4 00 00 00 00 
0391   06F8 00 00 00 00 
0391   06FC 00 00 00 00 
0391   0700 00 00 00 00 
0391   0704 00 00 00 00 
0391   0708 00 00 00 00 
0391   070C 00 00 00 00 
0391   0710 00 00 00 00 
0391   0714 00 00 00 00 
0391   0718 00 00 00 00 
0391   071C 00 00 00 00 
0391   0720 00 00 00 00 
0391   0724 00 00 00 00 
0391   0728 00 00 00 00 
0391   072C 00 00 00 00 
0391   0730 00 00 00 00 
0391   0734 00 00 00 00 
0391   0738 00 00 00 00 
0391   073C 00 00 00 00 
0391   0740 00 00 00 00 
0391   0744 00 00 00 00 
0391   0748 00 00 00 00 
0391   074C 00 00 00 00 
0391   0750 00 00 00 00 
0391   0754 00 00 00 00 
0391   0758 00 00 00 00 
0391   075C 00 00 00 00 
0391   0760 00 00 00 00 
0391   0764 00 00 00 00 
0391   0768 00 00 00 00 
0391   076C 00 00 00 00 
0391   0770 00 00 00 00 
0391   0774 00 00 00 00 
0391   0778 00 00 00 00 
0391   077C 00 00 00 00 
0391   0780 00 00 00 00 
0391   0784 00 00 00 00 
0391   0788 00 00 00 00 
0391   078C 00 00 00 00 
0391   0790 00 00 00 00 
0391   0794 00 00 00 00 
0391   0798 00 00 00 00 
0391   079C 00 00 00 00 
0391   07A0 00 00 00 00 
0391   07A4 00 00 00 00 
0391   07A8 00 00 00 00 
0391   07AC 00 00 00 00 
0391   07B0 00 00 00 00 
0391   07B4 00 00 00 00 
0391   07B8 00 00 00 00 
0391   07BC 00 00 00 00 
0391   07C0 00 00 00 00 
0391   07C4 00 00 00 00 
0391   07C8 00 00 00 00 
0391   07CC 00 00 00 00 
0391   07D0 00 00 00 00 
0391   07D4 00 00 00 00 
0391   07D8 00 00 00 00 
0391   07DC 00 00 00 00 
0391   07E0 00 00 00 00 
0391   07E4 00 00 00 00 
0391   07E8 00 00 00 00 
0391   07EC 00 00 00 00 
0391   07F0 00 00 00 00 
0391   07F4 00 00 00 00 
0391   07F8 00 00 00 00 
0391   07FC 00 00 00 00 
0391   0800 00 00 00 00 
0391   0804 00 00 00 00 
0391   0808 00 00 00 00 
0391   080C 00 00 00 00 
0391   0810 00 00 00 00 
0391   0814 00 00 00 00 
0391   0818 00 00 00 00 
0391   081C 00 00 00 00 
0391   0820 00 00 00 00 
0391   0824 00 00 00 00 
0391   0828 00 00 00 00 
0391   082C 00 00 00 00 
0391   0830 00 00 00 00 
0391   0834 00 00 00 00 
0391   0838 00 00 00 00 
0391   083C 00 00 00 00 
0391   0840 00 00 00 00 
0391   0844 00 00 00 00 
0391   0848 00 00 00 00 
0391   084C 00 00 00 00 
0391   0850 00 00 00 00 
0391   0854 00 00 00 00 
0391   0858 00 00 00 00 
0391   085C 00 00 00 00 
0391   0860 00 00 00 00 
0391   0864 00 00 00 00 
0392   0868             
0393   0868 E4 21       txt_buffer_ptr:		.dw text_buffer
0394   086A             
0395   086A 2E 00       s_dot:				.db ".", 0
0396   086C             
0397   086C             keywords:
0398   086C 61 00       	.db "a", 0		; append
0399   086E 69 00       	.db "i", 0		; insert
0400   0870 64 00       	.db "d", 0		; delete
0401   0872 70 00       	.db "p", 0		; print
0402   0874 6E 00       	.db "n", 0		; print
0403   0876 6C 00       	.db "l", 0		; list
0404   0878 65 00       	.db "e", 0		; edit
0405   087A 77 00       	.db "w", 0		; write
0406   087C 71 00       	.db "q", 0		; quit
0407   087E 00          	.db 0
0408   087F             
0409   087F             keyword_pointers:
0410   087F 20 05       	.dw cmd_append
0411   0881 54 05       	.dw cmd_insert
0412   0883 57 05       	.dw cmd_delete
0413   0885 EB 05       	.dw cmd_print
0414   0887 00 06       	.dw cmd_print_numbered
0415   0889 E4 05       	.dw cmd_list
0416   088B 8F 05       	.dw cmd_open
0417   088D C1 05       	.dw cmd_save
0418   088F 55 05       	.dw cmd_quit
0419   0891             
0420   0891 3F 00       s_bad_command:		.db "?", 0
0421   0893             
0422   0893             ; file includes. these are functions used by the shell
0423   0893             .include "stdio.asm"
0001+  0893             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0893             ; stdio.s
0003+  0893             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0893             .include "string.asm"
0001++ 0893             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0893             ; string.s
0003++ 0893             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0893             
0005++ 0893             
0006++ 0893             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0893             ; strrev
0008++ 0893             ; reverse a string
0009++ 0893             ; D = string address
0010++ 0893             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0893             ; 01234
0012++ 0893             strrev:
0013++ 0893 4B          	pusha
0014++ 0894 07 DA 08    	call strlen	; length in C
0015++ 0897 12          	mov a, c
0016++ 0898 AF 01 00    	cmp a, 1
0017++ 089B D0 B5 08    	jleu strrev_end	; check string length. string len must be > 1
0018++ 089E 7D          	dec a
0019++ 089F FD 4E       	mov si, d	; beginning of string
0020++ 08A1 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 08A3 59          	add d, a	; end of string
0022++ 08A4 12          	mov a, c
0023++ 08A5 FD 9B       	shr a		; divide by 2
0024++ 08A7 39          	mov c, a	; C now counts the steps
0025++ 08A8             strrev_L0:
0026++ 08A8 32          	mov bl, [d]	; save load right-side char into BL
0027++ 08A9 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 08AA 3E          	mov [d], al	; store left char into right side
0029++ 08AB 1B          	mov al, bl
0030++ 08AC F7          	stosb		; store right-side char into left-side; increase DI
0031++ 08AD 7E          	dec c
0032++ 08AE 7F          	dec d
0033++ 08AF C2 00 00    	cmp c, 0
0034++ 08B2 C7 A8 08    	jne strrev_L0
0035++ 08B5             strrev_end:
0036++ 08B5 4C          	popa
0037++ 08B6 09          	ret
0038++ 08B7             	
0039++ 08B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 08B7             ; strchr
0041++ 08B7             ; search string in D for char in AL
0042++ 08B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 08B7             strchr:
0044++ 08B7             strchr_L0:
0045++ 08B7 32          	mov bl, [d]
0046++ 08B8 C1 00       	cmp bl, 0
0047++ 08BA C6 C5 08    	je strchr_end
0048++ 08BD BA          	cmp al, bl
0049++ 08BE C6 C5 08    	je strchr_end
0050++ 08C1 79          	inc d
0051++ 08C2 0A B7 08    	jmp strchr_L0
0052++ 08C5             strchr_end:
0053++ 08C5 1B          	mov al, bl
0054++ 08C6 09          	ret
0055++ 08C7             
0056++ 08C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 08C7             ; strstr
0058++ 08C7             ; find sub-string
0059++ 08C7             ; str1 in SI
0060++ 08C7             ; str2 in DI
0061++ 08C7             ; SI points to end of source string
0062++ 08C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 08C7             strstr:
0064++ 08C7 DB          	push al
0065++ 08C8 DA          	push d
0066++ 08C9 E3          	push di
0067++ 08CA             strstr_loop:
0068++ 08CA F3          	cmpsb					; compare a byte of the strings
0069++ 08CB C7 D6 08    	jne strstr_ret
0070++ 08CE FC 00 00    	lea d, [di + 0]
0071++ 08D1 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 08D3 C7 CA 08    	jne strstr_loop				; equal chars but not at end
0073++ 08D6             strstr_ret:
0074++ 08D6 F0          	pop di
0075++ 08D7 E7          	pop d
0076++ 08D8 E8          	pop al
0077++ 08D9 09          	ret
0078++ 08DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 08DA             ; length of null terminated string
0080++ 08DA             ; result in C
0081++ 08DA             ; pointer in D
0082++ 08DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 08DA             strlen:
0084++ 08DA DA          	push d
0085++ 08DB 38 00 00    	mov c, 0
0086++ 08DE             strlen_L1:
0087++ 08DE BD 00       	cmp byte [d], 0
0088++ 08E0 C6 E8 08    	je strlen_ret
0089++ 08E3 79          	inc d
0090++ 08E4 78          	inc c
0091++ 08E5 0A DE 08    	jmp strlen_L1
0092++ 08E8             strlen_ret:
0093++ 08E8 E7          	pop d
0094++ 08E9 09          	ret
0095++ 08EA             
0096++ 08EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 08EA             ; STRCMP
0098++ 08EA             ; compare two strings
0099++ 08EA             ; str1 in SI
0100++ 08EA             ; str2 in DI
0101++ 08EA             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 08EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 08EA             strcmp:
0104++ 08EA DB          	push al
0105++ 08EB DA          	push d
0106++ 08EC E3          	push di
0107++ 08ED E2          	push si
0108++ 08EE             strcmp_loop:
0109++ 08EE F3          	cmpsb					; compare a byte of the strings
0110++ 08EF C7 FA 08    	jne strcmp_ret
0111++ 08F2 FB FF FF    	lea d, [si +- 1]
0112++ 08F5 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 08F7 C7 EE 08    	jne strcmp_loop				; equal chars but not at end
0114++ 08FA             strcmp_ret:
0115++ 08FA EF          	pop si
0116++ 08FB F0          	pop di
0117++ 08FC E7          	pop d
0118++ 08FD E8          	pop al
0119++ 08FE 09          	ret
0120++ 08FF             
0121++ 08FF             
0122++ 08FF             ; STRCPY
0123++ 08FF             ; copy null terminated string from SI to DI
0124++ 08FF             ; source in SI
0125++ 08FF             ; destination in DI
0126++ 08FF             strcpy:
0127++ 08FF E2          	push si
0128++ 0900 E3          	push di
0129++ 0901 DB          	push al
0130++ 0902             strcpy_L1:
0131++ 0902 F6          	lodsb
0132++ 0903 F7          	stosb
0133++ 0904 B9 00       	cmp al, 0
0134++ 0906 C7 02 09    	jne strcpy_L1
0135++ 0909             strcpy_end:
0136++ 0909 E8          	pop al
0137++ 090A F0          	pop di
0138++ 090B EF          	pop si
0139++ 090C 09          	ret
0140++ 090D             
0141++ 090D             ; STRCAT
0142++ 090D             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 090D             ; source in SI
0144++ 090D             ; destination in DI
0145++ 090D             strcat:
0146++ 090D E2          	push si
0147++ 090E E3          	push di
0148++ 090F D7          	push a
0149++ 0910 DA          	push d
0150++ 0911 50          	mov a, di
0151++ 0912 3C          	mov d, a
0152++ 0913             strcat_goto_end_L1:
0153++ 0913 BD 00       	cmp byte[d], 0
0154++ 0915 C6 1C 09    	je strcat_start
0155++ 0918 79          	inc d
0156++ 0919 0A 13 09    	jmp strcat_goto_end_L1
0157++ 091C             strcat_start:
0158++ 091C FD 50       	mov di, d
0159++ 091E             strcat_L1:
0160++ 091E F6          	lodsb
0161++ 091F F7          	stosb
0162++ 0920 B9 00       	cmp al, 0
0163++ 0922 C7 1E 09    	jne strcat_L1
0164++ 0925             strcat_end:
0165++ 0925 E7          	pop d
0166++ 0926 E4          	pop a
0167++ 0927 F0          	pop di
0168++ 0928 EF          	pop si
0169++ 0929 09          	ret
0005+  092A             
0006+  092A 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  092E 34 35 36 37 
0006+  0932 38 39 41 42 
0006+  0936 43 44 45 46 
0007+  093A 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  093E 1B 5B 48 00 
0008+  0942             
0009+  0942 01 00       table_power:.dw 1
0010+  0944 0A 00       			.dw 10
0011+  0946 64 00       			.dw 100
0012+  0948 E8 03       			.dw 1000
0013+  094A 10 27       			.dw 10000
0014+  094C             
0015+  094C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  094C             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  094C             ; ASCII in BL
0018+  094C             ; result in AL
0019+  094C             ; ascii for F = 0100 0110
0020+  094C             ; ascii for 9 = 0011 1001
0021+  094C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  094C             hex_ascii_encode:
0023+  094C 1B          	mov al, bl
0024+  094D 93 40       	test al, $40				; test if letter or number
0025+  094F C7 55 09    	jnz hex_letter
0026+  0952 87 0F       	and al, $0F				; get number
0027+  0954 09          	ret
0028+  0955             hex_letter:
0029+  0955 87 0F       	and al, $0F				; get letter
0030+  0957 6A 09       	add al, 9
0031+  0959 09          	ret
0032+  095A             
0033+  095A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  095A             ; ATOI
0035+  095A             ; 2 letter hex string in B
0036+  095A             ; 8bit integer returned in AL
0037+  095A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  095A             atoi:
0039+  095A D8          	push b
0040+  095B 07 4C 09    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  095E 30          	mov bl, bh
0042+  095F DB          	push al					; save a
0043+  0960 07 4C 09    	call hex_ascii_encode
0044+  0963 EA          	pop bl	
0045+  0964 FD 9E 04    	shl al, 4
0046+  0967 8C          	or al, bl
0047+  0968 E5          	pop b
0048+  0969 09          	ret	
0049+  096A             
0050+  096A             
0051+  096A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  096A             ; printf
0053+  096A             ; no need for explanations!
0054+  096A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  096A             printf:
0056+  096A 09          	ret
0057+  096B             
0058+  096B             
0059+  096B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  096B             ; scanf
0061+  096B             ; no need for explanations!
0062+  096B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  096B             scanf:
0064+  096B 09          	ret
0065+  096C             
0066+  096C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  096C             ; ITOA
0068+  096C             ; 8bit value in BL
0069+  096C             ; 2 byte ASCII result in A
0070+  096C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  096C             itoa:
0072+  096C DA          	push d
0073+  096D D8          	push b
0074+  096E A7 00       	mov bh, 0
0075+  0970 FD A4 04    	shr bl, 4	
0076+  0973 74          	mov d, b
0077+  0974 1F 2A 09    	mov al, [d + s_hex_digits]
0078+  0977 23          	mov ah, al
0079+  0978             	
0080+  0978 E5          	pop b
0081+  0979 D8          	push b
0082+  097A A7 00       	mov bh, 0
0083+  097C FD 87 0F    	and bl, $0F
0084+  097F 74          	mov d, b
0085+  0980 1F 2A 09    	mov al, [d + s_hex_digits]
0086+  0983 E5          	pop b
0087+  0984 E7          	pop d
0088+  0985 09          	ret
0089+  0986             
0090+  0986             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0986             ; HEX STRING TO BINARY
0092+  0986             ; di = destination address
0093+  0986             ; si = source
0094+  0986             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0986             hex_to_int:
0096+  0986             hex_to_int_L1:
0097+  0986 F6          	lodsb					; load from [SI] to AL
0098+  0987 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0989 C6 96 09    	jz hex_to_int_ret
0100+  098C 36          	mov bh, al
0101+  098D F6          	lodsb
0102+  098E 2F          	mov bl, al
0103+  098F 07 5A 09    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0992 F7          	stosb					; store AL to [DI]
0105+  0993 0A 86 09    	jmp hex_to_int_L1
0106+  0996             hex_to_int_ret:
0107+  0996 09          	ret		
0108+  0997             
0109+  0997             
0110+  0997             
0111+  0997             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0997             ; GETCHAR
0113+  0997             ; char in ah
0114+  0997             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0997             getchar:
0116+  0997 DB          	push al
0117+  0998             getchar_retry:
0118+  0998 FD 0C       	sti
0119+  099A 19 01       	mov al, 1
0120+  099C 05 03       	syscall sys_io			; receive in AH
0121+  099E B9 00       	cmp al, 0			; check if any char was receive
0122+  09A0 C6 98 09    	je getchar_retry
0123+  09A3 E8          	pop al
0124+  09A4 09          	ret
0125+  09A5             
0126+  09A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  09A5             ; PUTCHAR
0128+  09A5             ; char in ah
0129+  09A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  09A5             putchar:
0131+  09A5 D7          	push a
0132+  09A6 19 00       	mov al, 0
0133+  09A8 05 03       	syscall sys_io			; char in AH
0134+  09AA E4          	pop a
0135+  09AB 09          	ret
0136+  09AC             
0137+  09AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  09AC             ;; INPUT A STRING
0139+  09AC             ;; terminates with null
0140+  09AC             ;; pointer in D
0141+  09AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  09AC             gets:
0143+  09AC D7          	push a
0144+  09AD DA          	push d
0145+  09AE             gets_loop:
0146+  09AE FD 0C       	sti
0147+  09B0 19 01       	mov al, 1
0148+  09B2 05 03       	syscall sys_io			; receive in AH
0149+  09B4 B9 00       	cmp al, 0				; check error code (AL)
0150+  09B6 C6 AE 09    	je gets_loop			; if no char received, retry
0151+  09B9             
0152+  09B9 76 1B       	cmp ah, 27
0153+  09BB C6 DC 09    	je gets_telnet_escape
0154+  09BE 76 0A       	cmp ah, $0A				; LF
0155+  09C0 C6 35 0A    	je gets_end
0156+  09C3 76 0D       	cmp ah, $0D				; CR
0157+  09C5 C6 35 0A    	je gets_end
0158+  09C8 76 5C       	cmp ah, $5C				; '\\'
0159+  09CA C6 0C 0A    	je gets_escape
0160+  09CD             	
0161+  09CD 76 08       	cmp ah, $08			; check for backspace
0162+  09CF C6 D8 09    	je gets_backspace
0163+  09D2             
0164+  09D2 1A          	mov al, ah
0165+  09D3 3E          	mov [d], al
0166+  09D4 79          	inc d
0167+  09D5 0A AE 09    	jmp gets_loop
0168+  09D8             gets_backspace:
0169+  09D8 7F          	dec d
0170+  09D9 0A AE 09    	jmp gets_loop
0171+  09DC             gets_telnet_escape:
0172+  09DC FD 0C       	sti
0173+  09DE 19 01       	mov al, 1
0174+  09E0 05 03       	syscall sys_io				; receive in AH without echo
0175+  09E2 B9 00       	cmp al, 0					; check error code (AL)
0176+  09E4 C6 DC 09    	je gets_telnet_escape		; if no char received, retry
0177+  09E7 76 5B       	cmp ah, '['
0178+  09E9 C7 AE 09    	jne gets_loop
0179+  09EC             gets_telnet_escape_phase2:
0180+  09EC FD 0C       	sti
0181+  09EE 19 01       	mov al, 1
0182+  09F0 05 03       	syscall sys_io					; receive in AH without echo
0183+  09F2 B9 00       	cmp al, 0						; check error code (AL)
0184+  09F4 C6 EC 09    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  09F7 76 44       	cmp ah, 'D'
0186+  09F9 C6 04 0A    	je gets_left_arrow
0187+  09FC 76 43       	cmp ah, 'C'
0188+  09FE C6 08 0A    	je gets_right_arrow
0189+  0A01 0A AE 09    	jmp gets_loop
0190+  0A04             gets_left_arrow:
0191+  0A04 7F          	dec d
0192+  0A05 0A AE 09    	jmp gets_loop
0193+  0A08             gets_right_arrow:
0194+  0A08 79          	inc d
0195+  0A09 0A AE 09    	jmp gets_loop
0196+  0A0C             gets_escape:
0197+  0A0C FD 0C       	sti
0198+  0A0E 19 01       	mov al, 1
0199+  0A10 05 03       	syscall sys_io			; receive in AH
0200+  0A12 B9 00       	cmp al, 0				; check error code (AL)
0201+  0A14 C6 0C 0A    	je gets_escape			; if no char received, retry
0202+  0A17 76 6E       	cmp ah, 'n'
0203+  0A19 C6 27 0A    	je gets_LF
0204+  0A1C 76 72       	cmp ah, 'r'
0205+  0A1E C6 2E 0A    	je gets_CR
0206+  0A21 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0A22 3E          	mov [d], al
0208+  0A23 79          	inc d
0209+  0A24 0A AE 09    	jmp gets_loop
0210+  0A27             gets_LF:
0211+  0A27 19 0A       	mov al, $0A
0212+  0A29 3E          	mov [d], al
0213+  0A2A 79          	inc d
0214+  0A2B 0A AE 09    	jmp gets_loop
0215+  0A2E             gets_CR:
0216+  0A2E 19 0D       	mov al, $0D
0217+  0A30 3E          	mov [d], al
0218+  0A31 79          	inc d
0219+  0A32 0A AE 09    	jmp gets_loop
0220+  0A35             gets_end:
0221+  0A35 19 00       	mov al, 0
0222+  0A37 3E          	mov [d], al				; terminate string
0223+  0A38 E7          	pop d
0224+  0A39 E4          	pop a
0225+  0A3A 09          	ret
0226+  0A3B             
0227+  0A3B             
0228+  0A3B             
0229+  0A3B             
0230+  0A3B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0A3B             ;; INPUT TEXT
0232+  0A3B             ;; terminated with CTRL+D
0233+  0A3B             ;; pointer in D
0234+  0A3B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0A3B             gettxt:
0236+  0A3B D7          	push a
0237+  0A3C DA          	push d
0238+  0A3D             gettxt_loop:
0239+  0A3D 19 01       	mov al, 1
0240+  0A3F 05 03       	syscall sys_io			; receive in AH
0241+  0A41 B9 00       	cmp al, 0				; check error code (AL)
0242+  0A43 C6 3D 0A    	je gettxt_loop		; if no char received, retry
0243+  0A46 76 04       	cmp ah, 4			; EOT
0244+  0A48 C6 86 0A    	je gettxt_end
0245+  0A4B 76 08       	cmp ah, $08			; check for backspace
0246+  0A4D C6 82 0A    	je gettxt_backspace
0247+  0A50 76 5C       	cmp ah, $5C				; '\\'
0248+  0A52 C6 5B 0A    	je gettxt_escape
0249+  0A55 1A          	mov al, ah
0250+  0A56 3E          	mov [d], al
0251+  0A57 79          	inc d
0252+  0A58 0A 3D 0A    	jmp gettxt_loop
0253+  0A5B             gettxt_escape:
0254+  0A5B 19 01       	mov al, 1
0255+  0A5D 05 03       	syscall sys_io			; receive in AH
0256+  0A5F B9 00       	cmp al, 0				; check error code (AL)
0257+  0A61 C6 5B 0A    	je gettxt_escape		; if no char received, retry
0258+  0A64 76 6E       	cmp ah, 'n'
0259+  0A66 C6 74 0A    	je gettxt_LF
0260+  0A69 76 72       	cmp ah, 'r'
0261+  0A6B C6 7B 0A    	je gettxt_CR
0262+  0A6E 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0A6F 3E          	mov [d], al
0264+  0A70 79          	inc d
0265+  0A71 0A 3D 0A    	jmp gettxt_loop
0266+  0A74             gettxt_LF:
0267+  0A74 19 0A       	mov al, $0A
0268+  0A76 3E          	mov [d], al
0269+  0A77 79          	inc d
0270+  0A78 0A 3D 0A    	jmp gettxt_loop
0271+  0A7B             gettxt_CR:
0272+  0A7B 19 0D       	mov al, $0D
0273+  0A7D 3E          	mov [d], al
0274+  0A7E 79          	inc d
0275+  0A7F 0A 3D 0A    	jmp gettxt_loop
0276+  0A82             gettxt_backspace:
0277+  0A82 7F          	dec d
0278+  0A83 0A 3D 0A    	jmp gettxt_loop
0279+  0A86             gettxt_end:
0280+  0A86 19 00       	mov al, 0
0281+  0A88 3E          	mov [d], al				; terminate string
0282+  0A89 E7          	pop d
0283+  0A8A E4          	pop a
0284+  0A8B 09          	ret
0285+  0A8C             
0286+  0A8C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0A8C             ; PRINT NEW LINE
0288+  0A8C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0A8C             printnl:
0290+  0A8C D7          	push a
0291+  0A8D 10 00 0A    	mov a, $0A00
0292+  0A90 05 03       	syscall sys_io
0293+  0A92 10 00 0D    	mov a, $0D00
0294+  0A95 05 03       	syscall sys_io
0295+  0A97 E4          	pop a
0296+  0A98 09          	ret
0297+  0A99             
0298+  0A99             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0A99             ; strtoint
0300+  0A99             ; 4 digit hex string number in d
0301+  0A99             ; integer returned in A
0302+  0A99             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0A99             strtointx:
0304+  0A99 D8          	push b
0305+  0A9A 32          	mov bl, [d]
0306+  0A9B 37          	mov bh, bl
0307+  0A9C 33 01 00    	mov bl, [d + 1]
0308+  0A9F 07 5A 09    	call atoi				; convert to int in AL
0309+  0AA2 23          	mov ah, al				; move to AH
0310+  0AA3 33 02 00    	mov bl, [d + 2]
0311+  0AA6 37          	mov bh, bl
0312+  0AA7 33 03 00    	mov bl, [d + 3]
0313+  0AAA 07 5A 09    	call atoi				; convert to int in AL
0314+  0AAD E5          	pop b
0315+  0AAE 09          	ret
0316+  0AAF             
0317+  0AAF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0AAF             ; strtoint
0319+  0AAF             ; 5 digit base10 string number in d
0320+  0AAF             ; integer returned in A
0321+  0AAF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0AAF             strtoint:
0323+  0AAF E2          	push si
0324+  0AB0 D8          	push b
0325+  0AB1 D9          	push c
0326+  0AB2 DA          	push d
0327+  0AB3 07 DA 08    	call strlen			; get string length in C
0328+  0AB6 7E          	dec c
0329+  0AB7 FD 4E       	mov si, d
0330+  0AB9 12          	mov a, c
0331+  0ABA FD 99       	shl a
0332+  0ABC 3B 42 09    	mov d, table_power
0333+  0ABF 59          	add d, a
0334+  0AC0 38 00 00    	mov c, 0
0335+  0AC3             strtoint_L0:
0336+  0AC3 F6          	lodsb			; load ASCII to al
0337+  0AC4 B9 00       	cmp al, 0
0338+  0AC6 C6 D9 0A    	je strtoint_end
0339+  0AC9 6F 30       	sub al, $30		; make into integer
0340+  0ACB 22 00       	mov ah, 0
0341+  0ACD 2A          	mov b, [d]
0342+  0ACE AC          	mul a, b			; result in B since it fits in 16bits
0343+  0ACF 11          	mov a, b
0344+  0AD0 28          	mov b, c
0345+  0AD1 54          	add a, b
0346+  0AD2 39          	mov c, a
0347+  0AD3 63 02 00    	sub d, 2
0348+  0AD6 0A C3 0A    	jmp strtoint_L0
0349+  0AD9             strtoint_end:
0350+  0AD9 12          	mov a, c
0351+  0ADA E7          	pop d
0352+  0ADB E6          	pop c
0353+  0ADC E5          	pop b
0354+  0ADD EF          	pop si
0355+  0ADE 09          	ret
0356+  0ADF             
0357+  0ADF             
0358+  0ADF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0ADF             ; PRINT NULL TERMINATED STRING
0360+  0ADF             ; pointer in D
0361+  0ADF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0ADF             puts:
0363+  0ADF D7          	push a
0364+  0AE0 DA          	push d
0365+  0AE1             puts_L1:
0366+  0AE1 1E          	mov al, [d]
0367+  0AE2 B9 00       	cmp al, 0
0368+  0AE4 C6 F0 0A    	jz puts_END
0369+  0AE7 23          	mov ah, al
0370+  0AE8 19 00       	mov al, 0
0371+  0AEA 05 03       	syscall sys_io
0372+  0AEC 79          	inc d
0373+  0AED 0A E1 0A    	jmp puts_L1
0374+  0AF0             puts_END:
0375+  0AF0 E7          	pop d
0376+  0AF1 E4          	pop a
0377+  0AF2 09          	ret
0378+  0AF3             
0379+  0AF3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0AF3             ; PRINT N SIZE STRING
0381+  0AF3             ; pointer in D
0382+  0AF3             ; size in C
0383+  0AF3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0AF3             putsn:
0385+  0AF3 DB          	push al
0386+  0AF4 DA          	push d
0387+  0AF5 D9          	push c
0388+  0AF6             putsn_L0:
0389+  0AF6 1E          	mov al, [d]
0390+  0AF7 23          	mov ah, al
0391+  0AF8 19 00       	mov al, 0
0392+  0AFA 05 03       	syscall sys_io
0393+  0AFC 79          	inc d
0394+  0AFD 7E          	dec c	
0395+  0AFE C2 00 00    	cmp c, 0
0396+  0B01 C7 F6 0A    	jne putsn_L0
0397+  0B04             putsn_end:
0398+  0B04 E6          	pop c
0399+  0B05 E7          	pop d
0400+  0B06 E8          	pop al
0401+  0B07 09          	ret
0402+  0B08             
0403+  0B08             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0B08             ; print 16bit decimal number
0405+  0B08             ; input number in A
0406+  0B08             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0B08             print_u16d:
0408+  0B08 D7          	push a
0409+  0B09 D8          	push b
0410+  0B0A 26 10 27    	mov b, 10000
0411+  0B0D AE          	div a, b			; get 10000's coeff.
0412+  0B0E 07 30 0B    	call print_number
0413+  0B11 11          	mov a, b
0414+  0B12 26 E8 03    	mov b, 1000
0415+  0B15 AE          	div a, b			; get 1000's coeff.
0416+  0B16 07 30 0B    	call print_number
0417+  0B19 11          	mov a, b
0418+  0B1A 26 64 00    	mov b, 100
0419+  0B1D AE          	div a, b
0420+  0B1E 07 30 0B    	call print_number
0421+  0B21 11          	mov a, b
0422+  0B22 26 0A 00    	mov b, 10
0423+  0B25 AE          	div a, b
0424+  0B26 07 30 0B    	call print_number
0425+  0B29 1B          	mov al, bl			; 1's coeff in bl
0426+  0B2A 07 30 0B    	call print_number
0427+  0B2D E5          	pop b
0428+  0B2E E4          	pop a
0429+  0B2F 09          	ret
0430+  0B30             
0431+  0B30             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0432+  0B30             ; print AL
0433+  0B30             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0434+  0B30             print_number:
0435+  0B30 6A 30       	add al, $30
0436+  0B32 23          	mov ah, al
0437+  0B33 07 A5 09    	call putchar
0438+  0B36 09          	ret
0439+  0B37             
0440+  0B37             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0441+  0B37             ; PRINT 16BIT HEX INTEGER
0442+  0B37             ; integer value in reg B
0443+  0B37             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0444+  0B37             print_u16x:
0445+  0B37 D7          	push a
0446+  0B38 D8          	push b
0447+  0B39 DD          	push bl
0448+  0B3A 30          	mov bl, bh
0449+  0B3B 07 6C 09    	call itoa				; convert bh to char in A
0450+  0B3E 2F          	mov bl, al				; save al
0451+  0B3F 19 00       	mov al, 0
0452+  0B41 05 03       	syscall sys_io				; display AH
0453+  0B43 24          	mov ah, bl				; retrieve al
0454+  0B44 19 00       	mov al, 0
0455+  0B46 05 03       	syscall sys_io				; display AL
0456+  0B48             
0457+  0B48 EA          	pop bl
0458+  0B49 07 6C 09    	call itoa				; convert bh to char in A
0459+  0B4C 2F          	mov bl, al				; save al
0460+  0B4D 19 00       	mov al, 0
0461+  0B4F 05 03       	syscall sys_io				; display AH
0462+  0B51 24          	mov ah, bl				; retrieve al
0463+  0B52 19 00       	mov al, 0
0464+  0B54 05 03       	syscall sys_io				; display AL
0465+  0B56             
0466+  0B56 E5          	pop b
0467+  0B57 E4          	pop a
0468+  0B58 09          	ret
0469+  0B59             
0470+  0B59             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0471+  0B59             ; INPUT 16BIT HEX INTEGER
0472+  0B59             ; read 16bit integer into A
0473+  0B59             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0474+  0B59             scan_u16x:
0475+  0B59 F8 10 00    	enter 16
0476+  0B5C D8          	push b
0477+  0B5D DA          	push d
0478+  0B5E             
0479+  0B5E FA F1 FF    	lea d, [bp + -15]
0480+  0B61 07 AC 09    	call gets				; get number
0481+  0B64             
0482+  0B64 32          	mov bl, [d]
0483+  0B65 37          	mov bh, bl
0484+  0B66 33 01 00    	mov bl, [d + 1]
0485+  0B69 07 5A 09    	call atoi				; convert to int in AL
0486+  0B6C 23          	mov ah, al				; move to AH
0487+  0B6D             
0488+  0B6D 33 02 00    	mov bl, [d + 2]
0489+  0B70 37          	mov bh, bl
0490+  0B71 33 03 00    	mov bl, [d + 3]
0491+  0B74 07 5A 09    	call atoi				; convert to int in AL
0492+  0B77             
0493+  0B77 E7          	pop d
0494+  0B78 E5          	pop b
0495+  0B79 F9          	leave
0496+  0B7A 09          	ret
0497+  0B7B             
0498+  0B7B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0499+  0B7B             ; PRINT 8bit HEX INTEGER
0500+  0B7B             ; integer value in reg bl
0501+  0B7B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0502+  0B7B             print_u8x:
0503+  0B7B D7          	push a
0504+  0B7C DD          	push bl
0505+  0B7D             
0506+  0B7D 07 6C 09    	call itoa				; convert bl to char in A
0507+  0B80 2F          	mov bl, al				; save al
0508+  0B81 19 00       	mov al, 0
0509+  0B83 05 03       	syscall sys_io				; display AH
0510+  0B85 24          	mov ah, bl				; retrieve al
0511+  0B86 19 00       	mov al, 0
0512+  0B88 05 03       	syscall sys_io				; display AL
0513+  0B8A             
0514+  0B8A EA          	pop bl
0515+  0B8B E4          	pop a
0516+  0B8C 09          	ret
0517+  0B8D             
0518+  0B8D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0519+  0B8D             ; print 8bit decimal unsigned number
0520+  0B8D             ; input number in AL
0521+  0B8D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0522+  0B8D             print_u8d:
0523+  0B8D D7          	push a
0524+  0B8E D8          	push b
0525+  0B8F             
0526+  0B8F 22 00       	mov ah, 0
0527+  0B91 26 64 00    	mov b, 100
0528+  0B94 AE          	div a, b
0529+  0B95 D8          	push b			; save remainder
0530+  0B96 B9 00       	cmp al, 0
0531+  0B98 C6 A2 0B    	je skip100
0532+  0B9B 6A 30       	add al, $30
0533+  0B9D 23          	mov ah, al
0534+  0B9E 19 00       	mov al, 0
0535+  0BA0 05 03       	syscall sys_io	; print coeff
0536+  0BA2             skip100:
0537+  0BA2 E4          	pop a
0538+  0BA3 22 00       	mov ah, 0
0539+  0BA5 26 0A 00    	mov b, 10
0540+  0BA8 AE          	div a, b
0541+  0BA9 D8          	push b			; save remainder
0542+  0BAA B9 00       	cmp al, 0
0543+  0BAC C6 B6 0B    	je skip10
0544+  0BAF 6A 30       	add al, $30
0545+  0BB1 23          	mov ah, al
0546+  0BB2 19 00       	mov al, 0
0547+  0BB4 05 03       	syscall sys_io	; print coeff
0548+  0BB6             skip10:
0549+  0BB6 E4          	pop a
0550+  0BB7 1B          	mov al, bl
0551+  0BB8 6A 30       	add al, $30
0552+  0BBA 23          	mov ah, al
0553+  0BBB 19 00       	mov al, 0
0554+  0BBD 05 03       	syscall sys_io	; print coeff
0555+  0BBF E5          	pop b
0556+  0BC0 E4          	pop a
0557+  0BC1 09          	ret
0558+  0BC2             
0559+  0BC2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0560+  0BC2             ; INPUT 8BIT HEX INTEGER
0561+  0BC2             ; read 8bit integer into AL
0562+  0BC2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0563+  0BC2             scan_u8x:
0564+  0BC2 F8 04 00    	enter 4
0565+  0BC5 D8          	push b
0566+  0BC6 DA          	push d
0567+  0BC7             
0568+  0BC7 FA FD FF    	lea d, [bp + -3]
0569+  0BCA 07 AC 09    	call gets				; get number
0570+  0BCD             
0571+  0BCD 32          	mov bl, [d]
0572+  0BCE 37          	mov bh, bl
0573+  0BCF 33 01 00    	mov bl, [d + 1]
0574+  0BD2 07 5A 09    	call atoi				; convert to int in AL
0575+  0BD5             
0576+  0BD5 E7          	pop d
0577+  0BD6 E5          	pop b
0578+  0BD7 F9          	leave
0579+  0BD8 09          	ret
0580+  0BD9             
0581+  0BD9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0582+  0BD9             ; input decimal number
0583+  0BD9             ; result in A
0584+  0BD9             ; 655'\0'
0585+  0BD9             ; low--------high
0586+  0BD9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0BD9             scan_u16d:
0588+  0BD9 F8 08 00    	enter 8
0589+  0BDC E2          	push si
0590+  0BDD D8          	push b
0591+  0BDE D9          	push c
0592+  0BDF DA          	push d
0593+  0BE0 FA F9 FF    	lea d, [bp +- 7]
0594+  0BE3 07 AC 09    	call gets
0595+  0BE6 07 DA 08    	call strlen			; get string length in C
0596+  0BE9 7E          	dec c
0597+  0BEA FD 4E       	mov si, d
0598+  0BEC 12          	mov a, c
0599+  0BED FD 99       	shl a
0600+  0BEF 3B 42 09    	mov d, table_power
0601+  0BF2 59          	add d, a
0602+  0BF3 38 00 00    	mov c, 0
0603+  0BF6             mul_loop:
0604+  0BF6 F6          	lodsb			; load ASCII to al
0605+  0BF7 B9 00       	cmp al, 0
0606+  0BF9 C6 0C 0C    	je mul_exit
0607+  0BFC 6F 30       	sub al, $30		; make into integer
0608+  0BFE 22 00       	mov ah, 0
0609+  0C00 2A          	mov b, [d]
0610+  0C01 AC          	mul a, b			; result in B since it fits in 16bits
0611+  0C02 11          	mov a, b
0612+  0C03 28          	mov b, c
0613+  0C04 54          	add a, b
0614+  0C05 39          	mov c, a
0615+  0C06 63 02 00    	sub d, 2
0616+  0C09 0A F6 0B    	jmp mul_loop
0617+  0C0C             mul_exit:
0618+  0C0C 12          	mov a, c
0619+  0C0D E7          	pop d
0620+  0C0E E6          	pop c
0621+  0C0F E5          	pop b
0622+  0C10 EF          	pop si
0623+  0C11 F9          	leave
0624+  0C12 09          	ret
0424   0C13             .include "ctype.asm"
0001+  0C13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0C13             ; ctype.s
0003+  0C13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0C13             
0005+  0C13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0C13             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0C13             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0C13             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0C13             ;; characters are supported.
0010+  0C13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0C13             ;; isalnum 
0012+  0C13             ;; isalpha 
0013+  0C13             ;; islower 
0014+  0C13             ;; isupper 
0015+  0C13             ;; isdigit 
0016+  0C13             ;; isxdigit
0017+  0C13             ;; iscntrl 
0018+  0C13             ;; isgraph 
0019+  0C13             ;; isspace 
0020+  0C13             ;; isblank 
0021+  0C13             ;; isprint 
0022+  0C13             ;; ispunct 
0023+  0C13             ;; tolower 
0024+  0C13             ;; toupper
0025+  0C13             
0026+  0C13             
0027+  0C13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0C13             ;; IS ALPHANUMERIC
0029+  0C13             ;; sets ZF according with result
0030+  0C13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0C13             isalnum:
0032+  0C13 07 30 0C    	call isalpha
0033+  0C16 C6 1C 0C    	je isalnum_exit
0034+  0C19 07 1D 0C    	call isdigit
0035+  0C1C             isalnum_exit:
0036+  0C1C 09          	ret	
0037+  0C1D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0C1D             ;; IS DIGIT
0039+  0C1D             ;; sets ZF according with result
0040+  0C1D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0C1D             isdigit:
0042+  0C1D DB          	push al
0043+  0C1E B9 30       	cmp al, '0'
0044+  0C20 C8 2C 0C    	jlu isdigit_false
0045+  0C23 B9 39       	cmp al, '9'
0046+  0C25 D1 2C 0C    	jgu isdigit_false
0047+  0C28 87 00       	and al, 0	; set ZF
0048+  0C2A E8          	pop al
0049+  0C2B 09          	ret
0050+  0C2C             isdigit_false:
0051+  0C2C 8B 01       	or al, 1	; clear ZF
0052+  0C2E E8          	pop al
0053+  0C2F 09          	ret	
0054+  0C30             	
0055+  0C30             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0C30             ;; IS ALPHA
0057+  0C30             ;; sets ZF according with result
0058+  0C30             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0C30             isalpha:
0060+  0C30 DB          	push al
0061+  0C31 B9 5F       	cmp al, '_'
0062+  0C33 C6 53 0C    	je isalpha_true
0063+  0C36 B9 2E       	cmp al, '.'
0064+  0C38 C6 53 0C    	je isalpha_true
0065+  0C3B B9 41       	cmp al, 'A'
0066+  0C3D C8 4F 0C    	jlu isalpha_false
0067+  0C40 B9 7A       	cmp al, 'z'
0068+  0C42 D1 4F 0C    	jgu isalpha_false
0069+  0C45 B9 5A       	cmp al, 'Z'
0070+  0C47 D0 53 0C    	jleu isalpha_true
0071+  0C4A B9 61       	cmp al, 'a'
0072+  0C4C C9 53 0C    	jgeu isalpha_true
0073+  0C4F             isalpha_false:
0074+  0C4F 8B 01       	or al, 1	; clear ZF
0075+  0C51 E8          	pop al
0076+  0C52 09          	ret
0077+  0C53             isalpha_true:
0078+  0C53 87 00       	and al, 0	; set ZF
0079+  0C55 E8          	pop al
0080+  0C56 09          	ret
0081+  0C57             
0082+  0C57             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0C57             ;; IS PATH-ALPHA
0084+  0C57             ;; sets ZF according with result
0085+  0C57             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0C57             ispath:
0087+  0C57 DB          	push al
0088+  0C58 07 1D 0C    	call isdigit
0089+  0C5B C6 85 0C    	je ispath_true
0090+  0C5E B9 5F       	cmp al, '_'
0091+  0C60 C6 85 0C    	je ispath_true
0092+  0C63 B9 2F       	cmp al, '/'
0093+  0C65 C6 85 0C    	je ispath_true
0094+  0C68 B9 2E       	cmp al, '.'
0095+  0C6A C6 85 0C    	je ispath_true
0096+  0C6D B9 41       	cmp al, 'A'
0097+  0C6F C8 81 0C    	jlu ispath_false
0098+  0C72 B9 7A       	cmp al, 'z'
0099+  0C74 D1 81 0C    	jgu ispath_false
0100+  0C77 B9 5A       	cmp al, 'Z'
0101+  0C79 D0 85 0C    	jleu ispath_true
0102+  0C7C B9 61       	cmp al, 'a'
0103+  0C7E C9 85 0C    	jgeu ispath_true
0104+  0C81             ispath_false:
0105+  0C81 8B 01       	or al, 1	; clear ZF
0106+  0C83 E8          	pop al
0107+  0C84 09          	ret
0108+  0C85             ispath_true:
0109+  0C85 87 00       	and al, 0	; set ZF
0110+  0C87 E8          	pop al
0111+  0C88 09          	ret
0112+  0C89             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0C89             ;; IS SPACE
0114+  0C89             ;; sets ZF according with result
0115+  0C89             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0C89             isspace:
0117+  0C89 B9 20       	cmp al, $20		; ' '
0118+  0C8B C6 9F 0C    	je isspace_exit
0119+  0C8E B9 09       	cmp al, $09		; '\t'
0120+  0C90 C6 9F 0C    	je isspace_exit
0121+  0C93 B9 0A       	cmp al, $0A		; '\n'
0122+  0C95 C6 9F 0C    	je isspace_exit
0123+  0C98 B9 0D       	cmp al, $0D		; '\r'
0124+  0C9A C6 9F 0C    	je isspace_exit
0125+  0C9D B9 0B       	cmp al, $0B		; '\v'
0126+  0C9F             isspace_exit:
0127+  0C9F 09          	ret	
0128+  0CA0             
0129+  0CA0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0CA0             ; TO LOWER
0131+  0CA0             ; input in AL
0132+  0CA0             ; output in AL
0133+  0CA0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0CA0             to_lower:
0135+  0CA0 B9 5A       	cmp al, 'Z'
0136+  0CA2 D1 A7 0C    	jgu to_lower_ret
0137+  0CA5 6A 20       	add al, $20				; convert to lower case
0138+  0CA7             to_lower_ret:
0139+  0CA7 09          	ret
0140+  0CA8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0CA8             ; TO UPPER
0142+  0CA8             ; input in AL
0143+  0CA8             ; output in AL
0144+  0CA8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0CA8             to_upper:
0146+  0CA8 B9 61       	cmp al, 'a'
0147+  0CAA C8 AF 0C    	jlu to_upper_ret
0148+  0CAD 6F 20       	sub al, $20			; convert to upper case
0149+  0CAF             to_upper_ret:
0150+  0CAF 09          	ret
0151+  0CB0             
0425   0CB0             .include "token.asm"
0001+  0CB0             TOKTYP_IDENTIFIER	.equ 0
0002+  0CB0             TOKTYP_KEYWORD		.equ 1
0003+  0CB0             TOKTYP_DELIMITER	.equ 2
0004+  0CB0             TOKTYP_STRING		.equ 3
0005+  0CB0             TOKTYP_CHAR			.equ 4
0006+  0CB0             TOKTYP_NUMERIC		.equ 5
0007+  0CB0             TOKTYP_END			.equ 6
0008+  0CB0             
0009+  0CB0             TOK_NULL			.equ 0
0010+  0CB0             TOK_FSLASH			.equ 1
0011+  0CB0             TOK_TIMES 			.equ 2
0012+  0CB0             TOK_PLUS 			.equ 3
0013+  0CB0             TOK_MINUS 			.equ 4
0014+  0CB0             TOK_DOT				.equ 5
0015+  0CB0             TOK_SEMI			.equ 6
0016+  0CB0             TOK_ANGLE			.equ 7
0017+  0CB0             TOK_TILDE			.equ 8
0018+  0CB0             TOK_EQUAL			.equ 9
0019+  0CB0             TOK_COLON			.equ 10
0020+  0CB0             TOK_COMMA			.equ 11
0021+  0CB0             
0022+  0CB0             TOK_END				.equ 20
0023+  0CB0             
0024+  0CB0             
0025+  0CB0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0CB0             ;; read a full command argment from shell input buffer
0027+  0CB0             ;; argument is written into tokstr
0028+  0CB0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  0CB0             get_arg:
0030+  0CB0 D7          	push a
0031+  0CB1 E2          	push si
0032+  0CB2 E3          	push di
0033+  0CB3 19 00       	mov al, 0
0034+  0CB5 3D DE 0E    	mov [tokstr], al			; nullify tokstr string
0035+  0CB8 14 DA 0E    	mov a, [prog]
0036+  0CBB 4D          	mov si, a
0037+  0CBC FD 4F DE 0E 	mov di, tokstr
0038+  0CC0             get_arg_skip_spaces:
0039+  0CC0 F6          	lodsb
0040+  0CC1 07 89 0C    	call isspace
0041+  0CC4 C6 C0 0C    	je get_arg_skip_spaces
0042+  0CC7             get_arg_L0:
0043+  0CC7 B9 3B       	cmp al, $3B				; check if is ';'
0044+  0CC9 C6 D6 0C    	je get_arg_end
0045+  0CCC B9 00       	cmp al, 0
0046+  0CCE C6 D6 0C    	je get_arg_end			; check if end of input
0047+  0CD1 F7          	stosb
0048+  0CD2 F6          	lodsb
0049+  0CD3 0A C7 0C    	jmp get_arg_L0
0050+  0CD6             get_arg_end:
0051+  0CD6 19 00       	mov al, 0
0052+  0CD8 F7          	stosb
0053+  0CD9 D5 01 00    	sub si, 1
0054+  0CDC 4E          	mov a, si
0055+  0CDD 42 DA 0E    	mov [prog], a		; update pointer
0056+  0CE0 F0          	pop di
0057+  0CE1 EF          	pop si
0058+  0CE2 E4          	pop a
0059+  0CE3 09          	ret
0060+  0CE4             
0061+  0CE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0CE4             ;; read a path formation from shell input buffer
0063+  0CE4             ;; path is written into tokstr
0064+  0CE4             ;; /usr/bin
0065+  0CE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0CE4             get_path:
0067+  0CE4 D7          	push a
0068+  0CE5 E2          	push si
0069+  0CE6 E3          	push di
0070+  0CE7 19 00       	mov al, 0
0071+  0CE9 3D DE 0E    	mov [tokstr], al			; nullify tokstr string
0072+  0CEC 14 DA 0E    	mov a, [prog]
0073+  0CEF 4D          	mov si, a
0074+  0CF0 FD 4F DE 0E 	mov di, tokstr
0075+  0CF4             get_path_skip_spaces:
0076+  0CF4 F6          	lodsb
0077+  0CF5 07 89 0C    	call isspace
0078+  0CF8 C6 F4 0C    	je get_path_skip_spaces
0079+  0CFB             get_path_is_pathchar:
0080+  0CFB F7          	stosb
0081+  0CFC F6          	lodsb
0082+  0CFD 07 13 0C    	call isalnum			;check if is alphanumeric
0083+  0D00 C6 FB 0C    	je get_path_is_pathchar
0084+  0D03 B9 2F       	cmp al, '/'				; check if is '/'
0085+  0D05 C6 FB 0C    	je get_path_is_pathchar
0086+  0D08 19 00       	mov al, 0
0087+  0D0A F7          	stosb
0088+  0D0B D5 01 00    	sub si, 1
0089+  0D0E 4E          	mov a, si
0090+  0D0F 42 DA 0E    	mov [prog], a		; update pointer
0091+  0D12             get_path_end:
0092+  0D12 F0          	pop di
0093+  0D13 EF          	pop si
0094+  0D14 E4          	pop a
0095+  0D15 09          	ret
0096+  0D16             
0097+  0D16             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0D16             ;; read a line
0099+  0D16             ;; line is written into tokstr
0100+  0D16             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0D16             get_line:
0102+  0D16 D7          	push a
0103+  0D17 E2          	push si
0104+  0D18 E3          	push di
0105+  0D19 19 00       	mov al, 0
0106+  0D1B 3D DE 0E    	mov [tokstr], al			; nullify tokstr string
0107+  0D1E 14 DA 0E    	mov a, [prog]
0108+  0D21 4D          	mov si, a
0109+  0D22 FD 4F DE 0E 	mov di, tokstr
0110+  0D26             get_line_L0:
0111+  0D26 F6          	lodsb
0112+  0D27 B9 0A       	cmp al, $0A		; check for new line
0113+  0D29 C6 30 0D    	je get_line_exit
0114+  0D2C F7          	stosb
0115+  0D2D 0A 26 0D    	jmp get_line_L0
0116+  0D30             get_line_exit:
0117+  0D30 19 00       	mov al, 0
0118+  0D32 F7          	stosb
0119+  0D33 4E          	mov a, si
0120+  0D34 42 DA 0E    	mov [prog], a		; update pointer
0121+  0D37 F0          	pop di
0122+  0D38 EF          	pop si
0123+  0D39 E4          	pop a
0124+  0D3A 09          	ret
0125+  0D3B             
0126+  0D3B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0D3B             ;; token parser
0128+  0D3B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0D3B             get_token:
0130+  0D3B D7          	push a
0131+  0D3C DA          	push d
0132+  0D3D E2          	push si
0133+  0D3E E3          	push di
0134+  0D3F 19 00       	mov al, 0
0135+  0D41 3D DE 0E    	mov [tokstr], al			; nullify tokstr string
0136+  0D44 19 00       	mov al, TOK_NULL
0137+  0D46 3D DD 0E    	mov [tok], al				; nullify token
0138+  0D49 14 DA 0E    	mov a, [prog]
0139+  0D4C 4D          	mov si, a
0140+  0D4D FD 4F DE 0E 	mov di, tokstr
0141+  0D51             get_tok_skip_spaces:
0142+  0D51 F6          	lodsb
0143+  0D52 07 89 0C    	call isspace
0144+  0D55 C6 51 0D    	je get_tok_skip_spaces
0145+  0D58 B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  0D5A C6 3F 0E    	je get_token_end
0147+  0D5D B9 23       	cmp al, '#'			; comments!
0148+  0D5F C6 6D 0E    	je get_tok_comment
0149+  0D62 07 13 0C    	call isalnum
0150+  0D65 C6 4C 0E    	jz is_alphanumeric
0151+  0D68             ; other token types
0152+  0D68             get_token_slash:
0153+  0D68 B9 2F       	cmp al, '/'				; check if '/'
0154+  0D6A C7 82 0D    	jne get_token_minus
0155+  0D6D F7          	stosb					; store '/' into token string
0156+  0D6E 19 00       	mov al, 0
0157+  0D70 F7          	stosb					; terminate token string
0158+  0D71 19 01       	mov al, TOK_FSLASH
0159+  0D73 3D DD 0E    	mov [tok], al			
0160+  0D76 19 02       	mov al, TOKTYP_DELIMITER
0161+  0D78 3D DC 0E    	mov [toktyp], al
0162+  0D7B 4E          	mov a, si
0163+  0D7C 42 DA 0E    	mov [prog], a		; update pointer
0164+  0D7F 0A 68 0E    	jmp get_token_return
0165+  0D82             get_token_minus:
0166+  0D82 B9 2D       	cmp al, '-'				; check if '-'
0167+  0D84 C7 9C 0D    	jne get_token_comma
0168+  0D87 F7          	stosb					; store '-' into token string
0169+  0D88 19 00       	mov al, 0
0170+  0D8A F7          	stosb					; terminate token string
0171+  0D8B 19 04       	mov al, TOK_MINUS
0172+  0D8D 3D DD 0E    	mov [tok], al			
0173+  0D90 19 02       	mov al, TOKTYP_DELIMITER
0174+  0D92 3D DC 0E    	mov [toktyp], al
0175+  0D95 4E          	mov a, si
0176+  0D96 42 DA 0E    	mov [prog], a		; update pointer
0177+  0D99 0A 68 0E    	jmp get_token_return
0178+  0D9C             get_token_comma:
0179+  0D9C B9 2C       	cmp al, ','				; check if ','
0180+  0D9E C7 B6 0D    	jne get_token_semi
0181+  0DA1 F7          	stosb					; store ',' into token string
0182+  0DA2 19 00       	mov al, 0
0183+  0DA4 F7          	stosb					; terminate token string
0184+  0DA5 19 0B       	mov al, TOK_COMMA
0185+  0DA7 3D DD 0E    	mov [tok], al			
0186+  0DAA 19 02       	mov al, TOKTYP_DELIMITER
0187+  0DAC 3D DC 0E    	mov [toktyp], al
0188+  0DAF 4E          	mov a, si
0189+  0DB0 42 DA 0E    	mov [prog], a		; update pointer
0190+  0DB3 0A 68 0E    	jmp get_token_return
0191+  0DB6             get_token_semi:
0192+  0DB6 B9 3B       	cmp al, $3B				; check if ';'
0193+  0DB8 C7 D0 0D    	jne get_token_colon
0194+  0DBB F7          	stosb					; store ';' into token string
0195+  0DBC 19 00       	mov al, 0
0196+  0DBE F7          	stosb					; terminate token string
0197+  0DBF 19 06       	mov al, TOK_SEMI
0198+  0DC1 3D DD 0E    	mov [tok], al			
0199+  0DC4 19 02       	mov al, TOKTYP_DELIMITER
0200+  0DC6 3D DC 0E    	mov [toktyp], al
0201+  0DC9 4E          	mov a, si
0202+  0DCA 42 DA 0E    	mov [prog], a		; update pointer
0203+  0DCD 0A 68 0E    	jmp get_token_return
0204+  0DD0             get_token_colon:
0205+  0DD0 B9 3A       	cmp al, $3A				; check if ':'
0206+  0DD2 C7 EA 0D    	jne get_token_angle
0207+  0DD5 F7          	stosb					; store ':' into token string
0208+  0DD6 19 00       	mov al, 0
0209+  0DD8 F7          	stosb					; terminate token string
0210+  0DD9 19 0A       	mov al, TOK_COLON
0211+  0DDB 3D DD 0E    	mov [tok], al			
0212+  0DDE 19 02       	mov al, TOKTYP_DELIMITER
0213+  0DE0 3D DC 0E    	mov [toktyp], al
0214+  0DE3 4E          	mov a, si
0215+  0DE4 42 DA 0E    	mov [prog], a		; update pointer
0216+  0DE7 0A 68 0E    	jmp get_token_return
0217+  0DEA             get_token_angle:
0218+  0DEA B9 3E       	cmp al, $3E				; check if '>'
0219+  0DEC C7 04 0E    	jne get_token_tilde
0220+  0DEF F7          	stosb					; store '>' into token string
0221+  0DF0 19 00       	mov al, 0
0222+  0DF2 F7          	stosb					; terminate token string
0223+  0DF3 19 07       	mov al, TOK_ANGLE
0224+  0DF5 3D DD 0E    	mov [tok], al			
0225+  0DF8 19 02       	mov al, TOKTYP_DELIMITER
0226+  0DFA 3D DC 0E    	mov [toktyp], al
0227+  0DFD 4E          	mov a, si
0228+  0DFE 42 DA 0E    	mov [prog], a		; update pointer
0229+  0E01 0A 68 0E    	jmp get_token_return
0230+  0E04             get_token_tilde:
0231+  0E04 B9 7E       	cmp al, '~'				; check if '~'
0232+  0E06 C7 1E 0E    	jne get_token_equal
0233+  0E09 F7          	stosb					; store '~' into token string
0234+  0E0A 19 00       	mov al, 0
0235+  0E0C F7          	stosb					; terminate token string
0236+  0E0D 19 08       	mov al, TOK_TILDE
0237+  0E0F 3D DD 0E    	mov [tok], al			
0238+  0E12 19 02       	mov al, TOKTYP_DELIMITER
0239+  0E14 3D DC 0E    	mov [toktyp], al
0240+  0E17 4E          	mov a, si
0241+  0E18 42 DA 0E    	mov [prog], a		; update pointer
0242+  0E1B 0A 68 0E    	jmp get_token_return
0243+  0E1E             get_token_equal:
0244+  0E1E B9 3D       	cmp al, '='				; check if '='
0245+  0E20 C7 38 0E    	jne get_token_skip
0246+  0E23 F7          	stosb					; store '=' into token string
0247+  0E24 19 00       	mov al, 0
0248+  0E26 F7          	stosb					; terminate token string
0249+  0E27 19 09       	mov al, TOK_EQUAL
0250+  0E29 3D DD 0E    	mov [tok], al			
0251+  0E2C 19 02       	mov al, TOKTYP_DELIMITER
0252+  0E2E 3D DC 0E    	mov [toktyp], al
0253+  0E31 4E          	mov a, si
0254+  0E32 42 DA 0E    	mov [prog], a		; update pointer
0255+  0E35 0A 68 0E    	jmp get_token_return
0256+  0E38             get_token_skip:
0257+  0E38 4E          	mov a, si
0258+  0E39 42 DA 0E    	mov [prog], a		; update pointer
0259+  0E3C 0A 68 0E    	jmp get_token_return
0260+  0E3F             get_token_end:				; end of file token
0261+  0E3F 19 14       	mov al, TOK_END
0262+  0E41 3D DD 0E    	mov [tok], al
0263+  0E44 19 06       	mov al, TOKTYP_END
0264+  0E46 3D DC 0E    	mov [toktyp], al
0265+  0E49 0A 68 0E    	jmp get_token_return
0266+  0E4C             is_alphanumeric:
0267+  0E4C F7          	stosb
0268+  0E4D F6          	lodsb
0269+  0E4E 07 13 0C    	call isalnum			;check if is alphanumeric
0270+  0E51 C6 4C 0E    	jz is_alphanumeric
0271+  0E54 B9 2E       	cmp al, $2E				; check if is '.'
0272+  0E56 C6 4C 0E    	je is_alphanumeric
0273+  0E59 19 00       	mov al, 0
0274+  0E5B F7          	stosb
0275+  0E5C 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  0E5E 3D DC 0E    	mov [toktyp], al
0277+  0E61 D5 01 00    	sub si, 1
0278+  0E64 4E          	mov a, si
0279+  0E65 42 DA 0E    	mov [prog], a		; update pointer
0280+  0E68             get_token_return:
0281+  0E68 F0          	pop di
0282+  0E69 EF          	pop si
0283+  0E6A E7          	pop d
0284+  0E6B E4          	pop a
0285+  0E6C 09          	ret
0286+  0E6D             get_tok_comment:
0287+  0E6D F6          	lodsb
0288+  0E6E B9 0A       	cmp al, $0A			; new line
0289+  0E70 C7 6D 0E    	jne get_tok_comment
0290+  0E73 0A 51 0D    	jmp get_tok_skip_spaces
0291+  0E76             
0292+  0E76             
0293+  0E76             get_number:
0294+  0E76 D7          	push a
0295+  0E77 DA          	push d
0296+  0E78 E2          	push si
0297+  0E79 E3          	push di
0298+  0E7A 19 00       	mov al, 0
0299+  0E7C 3D DE 0E    	mov [tokstr], al			; nullify tokstr string
0300+  0E7F 19 00       	mov al, TOK_NULL
0301+  0E81 3D DD 0E    	mov [tok], al				; nullify token
0302+  0E84 14 DA 0E    	mov a, [prog]
0303+  0E87 4D          	mov si, a
0304+  0E88 FD 4F DE 0E 	mov di, tokstr
0305+  0E8C             get_number_skip_spaces:
0306+  0E8C F6          	lodsb
0307+  0E8D 07 89 0C    	call isspace
0308+  0E90 C6 8C 0E    	je get_number_skip_spaces
0309+  0E93 B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  0E95 C7 A5 0E    	jne get_number_L0
0311+  0E98 19 14       	mov al, TOK_END
0312+  0E9A 3D DD 0E    	mov [tok], al
0313+  0E9D 19 06       	mov al, TOKTYP_END
0314+  0E9F 3D DC 0E    	mov [toktyp], al
0315+  0EA2 0A BC 0E    	jmp get_number_return
0316+  0EA5             get_number_L0:
0317+  0EA5 F7          	stosb
0318+  0EA6 F6          	lodsb
0319+  0EA7 07 1D 0C    	call isdigit			;check if is numeric
0320+  0EAA C6 A5 0E    	jz get_number_L0
0321+  0EAD 19 00       	mov al, 0
0322+  0EAF F7          	stosb
0323+  0EB0 19 05       	mov al, TOKTYP_NUMERIC
0324+  0EB2 3D DC 0E    	mov [toktyp], al
0325+  0EB5 D5 01 00    	sub si, 1
0326+  0EB8 4E          	mov a, si
0327+  0EB9 42 DA 0E    	mov [prog], a		; update pointer
0328+  0EBC             get_number_return:
0329+  0EBC F0          	pop di
0330+  0EBD EF          	pop si
0331+  0EBE E7          	pop d
0332+  0EBF E4          	pop a
0333+  0EC0 09          	ret
0334+  0EC1             
0335+  0EC1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0EC1             ;; PUT BACK TOKEN
0337+  0EC1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  0EC1             putback:
0339+  0EC1 D7          	push a
0340+  0EC2 E2          	push si
0341+  0EC3 FD 4D DE 0E 	mov si, tokstr	
0342+  0EC7             putback_loop:
0343+  0EC7 F6          	lodsb
0344+  0EC8 B9 00       	cmp al, 0
0345+  0ECA C6 D7 0E    	je putback_end
0346+  0ECD 14 DA 0E    	mov a, [prog]
0347+  0ED0 7D          	dec a
0348+  0ED1 42 DA 0E    	mov [prog], a			; update pointer
0349+  0ED4 0A C7 0E    	jmp putback_loop
0350+  0ED7             putback_end:
0351+  0ED7 EF          	pop si
0352+  0ED8 E4          	pop a
0353+  0ED9 09          	ret
0354+  0EDA             
0355+  0EDA             
0356+  0EDA             
0357+  0EDA             
0358+  0EDA 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  0EDC             
0360+  0EDC 00          toktyp: 	.db 0			; token type symbol
0361+  0EDD 00          tok:		.db 0			; current token symbol
0362+  0EDE 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  0EE2 00 00 00 00 
0362+  0EE6 00 00 00 00 
0362+  0EEA 00 00 00 00 
0362+  0EEE 00 00 00 00 
0362+  0EF2 00 00 00 00 
0362+  0EF6 00 00 00 00 
0362+  0EFA 00 00 00 00 
0362+  0EFE 00 00 00 00 
0362+  0F02 00 00 00 00 
0362+  0F06 00 00 00 00 
0362+  0F0A 00 00 00 00 
0362+  0F0E 00 00 00 00 
0362+  0F12 00 00 00 00 
0362+  0F16 00 00 00 00 
0362+  0F1A 00 00 00 00 
0362+  0F1E 00 00 00 00 
0362+  0F22 00 00 00 00 
0362+  0F26 00 00 00 00 
0362+  0F2A 00 00 00 00 
0362+  0F2E 00 00 00 00 
0362+  0F32 00 00 00 00 
0362+  0F36 00 00 00 00 
0362+  0F3A 00 00 00 00 
0362+  0F3E 00 00 00 00 
0362+  0F42 00 00 00 00 
0362+  0F46 00 00 00 00 
0362+  0F4A 00 00 00 00 
0362+  0F4E 00 00 00 00 
0362+  0F52 00 00 00 00 
0362+  0F56 00 00 00 00 
0362+  0F5A 00 00 00 00 
0362+  0F5E 00 00 00 00 
0362+  0F62 00 00 00 00 
0362+  0F66 00 00 00 00 
0362+  0F6A 00 00 00 00 
0362+  0F6E 00 00 00 00 
0362+  0F72 00 00 00 00 
0362+  0F76 00 00 00 00 
0362+  0F7A 00 00 00 00 
0362+  0F7E 00 00 00 00 
0362+  0F82 00 00 00 00 
0362+  0F86 00 00 00 00 
0362+  0F8A 00 00 00 00 
0362+  0F8E 00 00 00 00 
0362+  0F92 00 00 00 00 
0362+  0F96 00 00 00 00 
0362+  0F9A 00 00 00 00 
0362+  0F9E 00 00 00 00 
0362+  0FA2 00 00 00 00 
0362+  0FA6 00 00 00 00 
0362+  0FAA 00 00 00 00 
0362+  0FAE 00 00 00 00 
0362+  0FB2 00 00 00 00 
0362+  0FB6 00 00 00 00 
0362+  0FBA 00 00 00 00 
0362+  0FBE 00 00 00 00 
0362+  0FC2 00 00 00 00 
0362+  0FC6 00 00 00 00 
0362+  0FCA 00 00 00 00 
0362+  0FCE 00 00 00 00 
0362+  0FD2 00 00 00 00 
0362+  0FD6 00 00 00 00 
0362+  0FDA 00 00 00 00 
0426   0FDE             
0427   0FDE 00 00       parser_index: .dw 0
0428   0FE0 00 00       start:	.dw 0
0429   0FE2 00 00       end:	.dw 0
0430   0FE4             
0431   0FE4 FF FF FF FF new_input:		.fill 1024 * 4
0431   0FE8 FF FF FF FF 
0431   0FEC FF FF FF FF 
0431   0FF0 FF FF FF FF 
0431   0FF4 FF FF FF FF 
0431   0FF8 FF FF FF FF 
0431   0FFC FF FF FF FF 
0431   1000 FF FF FF FF 
0431   1004 FF FF FF FF 
0431   1008 FF FF FF FF 
0431   100C FF FF FF FF 
0431   1010 FF FF FF FF 
0431   1014 FF FF FF FF 
0431   1018 FF FF FF FF 
0431   101C FF FF FF FF 
0431   1020 FF FF FF FF 
0431   1024 FF FF FF FF 
0431   1028 FF FF FF FF 
0431   102C FF FF FF FF 
0431   1030 FF FF FF FF 
0431   1034 FF FF FF FF 
0431   1038 FF FF FF FF 
0431   103C FF FF FF FF 
0431   1040 FF FF FF FF 
0431   1044 FF FF FF FF 
0431   1048 FF FF FF FF 
0431   104C FF FF FF FF 
0431   1050 FF FF FF FF 
0431   1054 FF FF FF FF 
0431   1058 FF FF FF FF 
0431   105C FF FF FF FF 
0431   1060 FF FF FF FF 
0431   1064 FF FF FF FF 
0431   1068 FF FF FF FF 
0431   106C FF FF FF FF 
0431   1070 FF FF FF FF 
0431   1074 FF FF FF FF 
0431   1078 FF FF FF FF 
0431   107C FF FF FF FF 
0431   1080 FF FF FF FF 
0431   1084 FF FF FF FF 
0431   1088 FF FF FF FF 
0431   108C FF FF FF FF 
0431   1090 FF FF FF FF 
0431   1094 FF FF FF FF 
0431   1098 FF FF FF FF 
0431   109C FF FF FF FF 
0431   10A0 FF FF FF FF 
0431   10A4 FF FF FF FF 
0431   10A8 FF FF FF FF 
0431   10AC FF FF FF FF 
0431   10B0 FF FF FF FF 
0431   10B4 FF FF FF FF 
0431   10B8 FF FF FF FF 
0431   10BC FF FF FF FF 
0431   10C0 FF FF FF FF 
0431   10C4 FF FF FF FF 
0431   10C8 FF FF FF FF 
0431   10CC FF FF FF FF 
0431   10D0 FF FF FF FF 
0431   10D4 FF FF FF FF 
0431   10D8 FF FF FF FF 
0431   10DC FF FF FF FF 
0431   10E0 FF FF FF FF 
0431   10E4 FF FF FF FF 
0431   10E8 FF FF FF FF 
0431   10EC FF FF FF FF 
0431   10F0 FF FF FF FF 
0431   10F4 FF FF FF FF 
0431   10F8 FF FF FF FF 
0431   10FC FF FF FF FF 
0431   1100 FF FF FF FF 
0431   1104 FF FF FF FF 
0431   1108 FF FF FF FF 
0431   110C FF FF FF FF 
0431   1110 FF FF FF FF 
0431   1114 FF FF FF FF 
0431   1118 FF FF FF FF 
0431   111C FF FF FF FF 
0431   1120 FF FF FF FF 
0431   1124 FF FF FF FF 
0431   1128 FF FF FF FF 
0431   112C FF FF FF FF 
0431   1130 FF FF FF FF 
0431   1134 FF FF FF FF 
0431   1138 FF FF FF FF 
0431   113C FF FF FF FF 
0431   1140 FF FF FF FF 
0431   1144 FF FF FF FF 
0431   1148 FF FF FF FF 
0431   114C FF FF FF FF 
0431   1150 FF FF FF FF 
0431   1154 FF FF FF FF 
0431   1158 FF FF FF FF 
0431   115C FF FF FF FF 
0431   1160 FF FF FF FF 
0431   1164 FF FF FF FF 
0431   1168 FF FF FF FF 
0431   116C FF FF FF FF 
0431   1170 FF FF FF FF 
0431   1174 FF FF FF FF 
0431   1178 FF FF FF FF 
0431   117C FF FF FF FF 
0431   1180 FF FF FF FF 
0431   1184 FF FF FF FF 
0431   1188 FF FF FF FF 
0431   118C FF FF FF FF 
0431   1190 FF FF FF FF 
0431   1194 FF FF FF FF 
0431   1198 FF FF FF FF 
0431   119C FF FF FF FF 
0431   11A0 FF FF FF FF 
0431   11A4 FF FF FF FF 
0431   11A8 FF FF FF FF 
0431   11AC FF FF FF FF 
0431   11B0 FF FF FF FF 
0431   11B4 FF FF FF FF 
0431   11B8 FF FF FF FF 
0431   11BC FF FF FF FF 
0431   11C0 FF FF FF FF 
0431   11C4 FF FF FF FF 
0431   11C8 FF FF FF FF 
0431   11CC FF FF FF FF 
0431   11D0 FF FF FF FF 
0431   11D4 FF FF FF FF 
0431   11D8 FF FF FF FF 
0431   11DC FF FF FF FF 
0431   11E0 FF FF FF FF 
0431   11E4 FF FF FF FF 
0431   11E8 FF FF FF FF 
0431   11EC FF FF FF FF 
0431   11F0 FF FF FF FF 
0431   11F4 FF FF FF FF 
0431   11F8 FF FF FF FF 
0431   11FC FF FF FF FF 
0431   1200 FF FF FF FF 
0431   1204 FF FF FF FF 
0431   1208 FF FF FF FF 
0431   120C FF FF FF FF 
0431   1210 FF FF FF FF 
0431   1214 FF FF FF FF 
0431   1218 FF FF FF FF 
0431   121C FF FF FF FF 
0431   1220 FF FF FF FF 
0431   1224 FF FF FF FF 
0431   1228 FF FF FF FF 
0431   122C FF FF FF FF 
0431   1230 FF FF FF FF 
0431   1234 FF FF FF FF 
0431   1238 FF FF FF FF 
0431   123C FF FF FF FF 
0431   1240 FF FF FF FF 
0431   1244 FF FF FF FF 
0431   1248 FF FF FF FF 
0431   124C FF FF FF FF 
0431   1250 FF FF FF FF 
0431   1254 FF FF FF FF 
0431   1258 FF FF FF FF 
0431   125C FF FF FF FF 
0431   1260 FF FF FF FF 
0431   1264 FF FF FF FF 
0431   1268 FF FF FF FF 
0431   126C FF FF FF FF 
0431   1270 FF FF FF FF 
0431   1274 FF FF FF FF 
0431   1278 FF FF FF FF 
0431   127C FF FF FF FF 
0431   1280 FF FF FF FF 
0431   1284 FF FF FF FF 
0431   1288 FF FF FF FF 
0431   128C FF FF FF FF 
0431   1290 FF FF FF FF 
0431   1294 FF FF FF FF 
0431   1298 FF FF FF FF 
0431   129C FF FF FF FF 
0431   12A0 FF FF FF FF 
0431   12A4 FF FF FF FF 
0431   12A8 FF FF FF FF 
0431   12AC FF FF FF FF 
0431   12B0 FF FF FF FF 
0431   12B4 FF FF FF FF 
0431   12B8 FF FF FF FF 
0431   12BC FF FF FF FF 
0431   12C0 FF FF FF FF 
0431   12C4 FF FF FF FF 
0431   12C8 FF FF FF FF 
0431   12CC FF FF FF FF 
0431   12D0 FF FF FF FF 
0431   12D4 FF FF FF FF 
0431   12D8 FF FF FF FF 
0431   12DC FF FF FF FF 
0431   12E0 FF FF FF FF 
0431   12E4 FF FF FF FF 
0431   12E8 FF FF FF FF 
0431   12EC FF FF FF FF 
0431   12F0 FF FF FF FF 
0431   12F4 FF FF FF FF 
0431   12F8 FF FF FF FF 
0431   12FC FF FF FF FF 
0431   1300 FF FF FF FF 
0431   1304 FF FF FF FF 
0431   1308 FF FF FF FF 
0431   130C FF FF FF FF 
0431   1310 FF FF FF FF 
0431   1314 FF FF FF FF 
0431   1318 FF FF FF FF 
0431   131C FF FF FF FF 
0431   1320 FF FF FF FF 
0431   1324 FF FF FF FF 
0431   1328 FF FF FF FF 
0431   132C FF FF FF FF 
0431   1330 FF FF FF FF 
0431   1334 FF FF FF FF 
0431   1338 FF FF FF FF 
0431   133C FF FF FF FF 
0431   1340 FF FF FF FF 
0431   1344 FF FF FF FF 
0431   1348 FF FF FF FF 
0431   134C FF FF FF FF 
0431   1350 FF FF FF FF 
0431   1354 FF FF FF FF 
0431   1358 FF FF FF FF 
0431   135C FF FF FF FF 
0431   1360 FF FF FF FF 
0431   1364 FF FF FF FF 
0431   1368 FF FF FF FF 
0431   136C FF FF FF FF 
0431   1370 FF FF FF FF 
0431   1374 FF FF FF FF 
0431   1378 FF FF FF FF 
0431   137C FF FF FF FF 
0431   1380 FF FF FF FF 
0431   1384 FF FF FF FF 
0431   1388 FF FF FF FF 
0431   138C FF FF FF FF 
0431   1390 FF FF FF FF 
0431   1394 FF FF FF FF 
0431   1398 FF FF FF FF 
0431   139C FF FF FF FF 
0431   13A0 FF FF FF FF 
0431   13A4 FF FF FF FF 
0431   13A8 FF FF FF FF 
0431   13AC FF FF FF FF 
0431   13B0 FF FF FF FF 
0431   13B4 FF FF FF FF 
0431   13B8 FF FF FF FF 
0431   13BC FF FF FF FF 
0431   13C0 FF FF FF FF 
0431   13C4 FF FF FF FF 
0431   13C8 FF FF FF FF 
0431   13CC FF FF FF FF 
0431   13D0 FF FF FF FF 
0431   13D4 FF FF FF FF 
0431   13D8 FF FF FF FF 
0431   13DC FF FF FF FF 
0431   13E0 FF FF FF FF 
0431   13E4 FF FF FF FF 
0431   13E8 FF FF FF FF 
0431   13EC FF FF FF FF 
0431   13F0 FF FF FF FF 
0431   13F4 FF FF FF FF 
0431   13F8 FF FF FF FF 
0431   13FC FF FF FF FF 
0431   1400 FF FF FF FF 
0431   1404 FF FF FF FF 
0431   1408 FF FF FF FF 
0431   140C FF FF FF FF 
0431   1410 FF FF FF FF 
0431   1414 FF FF FF FF 
0431   1418 FF FF FF FF 
0431   141C FF FF FF FF 
0431   1420 FF FF FF FF 
0431   1424 FF FF FF FF 
0431   1428 FF FF FF FF 
0431   142C FF FF FF FF 
0431   1430 FF FF FF FF 
0431   1434 FF FF FF FF 
0431   1438 FF FF FF FF 
0431   143C FF FF FF FF 
0431   1440 FF FF FF FF 
0431   1444 FF FF FF FF 
0431   1448 FF FF FF FF 
0431   144C FF FF FF FF 
0431   1450 FF FF FF FF 
0431   1454 FF FF FF FF 
0431   1458 FF FF FF FF 
0431   145C FF FF FF FF 
0431   1460 FF FF FF FF 
0431   1464 FF FF FF FF 
0431   1468 FF FF FF FF 
0431   146C FF FF FF FF 
0431   1470 FF FF FF FF 
0431   1474 FF FF FF FF 
0431   1478 FF FF FF FF 
0431   147C FF FF FF FF 
0431   1480 FF FF FF FF 
0431   1484 FF FF FF FF 
0431   1488 FF FF FF FF 
0431   148C FF FF FF FF 
0431   1490 FF FF FF FF 
0431   1494 FF FF FF FF 
0431   1498 FF FF FF FF 
0431   149C FF FF FF FF 
0431   14A0 FF FF FF FF 
0431   14A4 FF FF FF FF 
0431   14A8 FF FF FF FF 
0431   14AC FF FF FF FF 
0431   14B0 FF FF FF FF 
0431   14B4 FF FF FF FF 
0431   14B8 FF FF FF FF 
0431   14BC FF FF FF FF 
0431   14C0 FF FF FF FF 
0431   14C4 FF FF FF FF 
0431   14C8 FF FF FF FF 
0431   14CC FF FF FF FF 
0431   14D0 FF FF FF FF 
0431   14D4 FF FF FF FF 
0431   14D8 FF FF FF FF 
0431   14DC FF FF FF FF 
0431   14E0 FF FF FF FF 
0431   14E4 FF FF FF FF 
0431   14E8 FF FF FF FF 
0431   14EC FF FF FF FF 
0431   14F0 FF FF FF FF 
0431   14F4 FF FF FF FF 
0431   14F8 FF FF FF FF 
0431   14FC FF FF FF FF 
0431   1500 FF FF FF FF 
0431   1504 FF FF FF FF 
0431   1508 FF FF FF FF 
0431   150C FF FF FF FF 
0431   1510 FF FF FF FF 
0431   1514 FF FF FF FF 
0431   1518 FF FF FF FF 
0431   151C FF FF FF FF 
0431   1520 FF FF FF FF 
0431   1524 FF FF FF FF 
0431   1528 FF FF FF FF 
0431   152C FF FF FF FF 
0431   1530 FF FF FF FF 
0431   1534 FF FF FF FF 
0431   1538 FF FF FF FF 
0431   153C FF FF FF FF 
0431   1540 FF FF FF FF 
0431   1544 FF FF FF FF 
0431   1548 FF FF FF FF 
0431   154C FF FF FF FF 
0431   1550 FF FF FF FF 
0431   1554 FF FF FF FF 
0431   1558 FF FF FF FF 
0431   155C FF FF FF FF 
0431   1560 FF FF FF FF 
0431   1564 FF FF FF FF 
0431   1568 FF FF FF FF 
0431   156C FF FF FF FF 
0431   1570 FF FF FF FF 
0431   1574 FF FF FF FF 
0431   1578 FF FF FF FF 
0431   157C FF FF FF FF 
0431   1580 FF FF FF FF 
0431   1584 FF FF FF FF 
0431   1588 FF FF FF FF 
0431   158C FF FF FF FF 
0431   1590 FF FF FF FF 
0431   1594 FF FF FF FF 
0431   1598 FF FF FF FF 
0431   159C FF FF FF FF 
0431   15A0 FF FF FF FF 
0431   15A4 FF FF FF FF 
0431   15A8 FF FF FF FF 
0431   15AC FF FF FF FF 
0431   15B0 FF FF FF FF 
0431   15B4 FF FF FF FF 
0431   15B8 FF FF FF FF 
0431   15BC FF FF FF FF 
0431   15C0 FF FF FF FF 
0431   15C4 FF FF FF FF 
0431   15C8 FF FF FF FF 
0431   15CC FF FF FF FF 
0431   15D0 FF FF FF FF 
0431   15D4 FF FF FF FF 
0431   15D8 FF FF FF FF 
0431   15DC FF FF FF FF 
0431   15E0 FF FF FF FF 
0431   15E4 FF FF FF FF 
0431   15E8 FF FF FF FF 
0431   15EC FF FF FF FF 
0431   15F0 FF FF FF FF 
0431   15F4 FF FF FF FF 
0431   15F8 FF FF FF FF 
0431   15FC FF FF FF FF 
0431   1600 FF FF FF FF 
0431   1604 FF FF FF FF 
0431   1608 FF FF FF FF 
0431   160C FF FF FF FF 
0431   1610 FF FF FF FF 
0431   1614 FF FF FF FF 
0431   1618 FF FF FF FF 
0431   161C FF FF FF FF 
0431   1620 FF FF FF FF 
0431   1624 FF FF FF FF 
0431   1628 FF FF FF FF 
0431   162C FF FF FF FF 
0431   1630 FF FF FF FF 
0431   1634 FF FF FF FF 
0431   1638 FF FF FF FF 
0431   163C FF FF FF FF 
0431   1640 FF FF FF FF 
0431   1644 FF FF FF FF 
0431   1648 FF FF FF FF 
0431   164C FF FF FF FF 
0431   1650 FF FF FF FF 
0431   1654 FF FF FF FF 
0431   1658 FF FF FF FF 
0431   165C FF FF FF FF 
0431   1660 FF FF FF FF 
0431   1664 FF FF FF FF 
0431   1668 FF FF FF FF 
0431   166C FF FF FF FF 
0431   1670 FF FF FF FF 
0431   1674 FF FF FF FF 
0431   1678 FF FF FF FF 
0431   167C FF FF FF FF 
0431   1680 FF FF FF FF 
0431   1684 FF FF FF FF 
0431   1688 FF FF FF FF 
0431   168C FF FF FF FF 
0431   1690 FF FF FF FF 
0431   1694 FF FF FF FF 
0431   1698 FF FF FF FF 
0431   169C FF FF FF FF 
0431   16A0 FF FF FF FF 
0431   16A4 FF FF FF FF 
0431   16A8 FF FF FF FF 
0431   16AC FF FF FF FF 
0431   16B0 FF FF FF FF 
0431   16B4 FF FF FF FF 
0431   16B8 FF FF FF FF 
0431   16BC FF FF FF FF 
0431   16C0 FF FF FF FF 
0431   16C4 FF FF FF FF 
0431   16C8 FF FF FF FF 
0431   16CC FF FF FF FF 
0431   16D0 FF FF FF FF 
0431   16D4 FF FF FF FF 
0431   16D8 FF FF FF FF 
0431   16DC FF FF FF FF 
0431   16E0 FF FF FF FF 
0431   16E4 FF FF FF FF 
0431   16E8 FF FF FF FF 
0431   16EC FF FF FF FF 
0431   16F0 FF FF FF FF 
0431   16F4 FF FF FF FF 
0431   16F8 FF FF FF FF 
0431   16FC FF FF FF FF 
0431   1700 FF FF FF FF 
0431   1704 FF FF FF FF 
0431   1708 FF FF FF FF 
0431   170C FF FF FF FF 
0431   1710 FF FF FF FF 
0431   1714 FF FF FF FF 
0431   1718 FF FF FF FF 
0431   171C FF FF FF FF 
0431   1720 FF FF FF FF 
0431   1724 FF FF FF FF 
0431   1728 FF FF FF FF 
0431   172C FF FF FF FF 
0431   1730 FF FF FF FF 
0431   1734 FF FF FF FF 
0431   1738 FF FF FF FF 
0431   173C FF FF FF FF 
0431   1740 FF FF FF FF 
0431   1744 FF FF FF FF 
0431   1748 FF FF FF FF 
0431   174C FF FF FF FF 
0431   1750 FF FF FF FF 
0431   1754 FF FF FF FF 
0431   1758 FF FF FF FF 
0431   175C FF FF FF FF 
0431   1760 FF FF FF FF 
0431   1764 FF FF FF FF 
0431   1768 FF FF FF FF 
0431   176C FF FF FF FF 
0431   1770 FF FF FF FF 
0431   1774 FF FF FF FF 
0431   1778 FF FF FF FF 
0431   177C FF FF FF FF 
0431   1780 FF FF FF FF 
0431   1784 FF FF FF FF 
0431   1788 FF FF FF FF 
0431   178C FF FF FF FF 
0431   1790 FF FF FF FF 
0431   1794 FF FF FF FF 
0431   1798 FF FF FF FF 
0431   179C FF FF FF FF 
0431   17A0 FF FF FF FF 
0431   17A4 FF FF FF FF 
0431   17A8 FF FF FF FF 
0431   17AC FF FF FF FF 
0431   17B0 FF FF FF FF 
0431   17B4 FF FF FF FF 
0431   17B8 FF FF FF FF 
0431   17BC FF FF FF FF 
0431   17C0 FF FF FF FF 
0431   17C4 FF FF FF FF 
0431   17C8 FF FF FF FF 
0431   17CC FF FF FF FF 
0431   17D0 FF FF FF FF 
0431   17D4 FF FF FF FF 
0431   17D8 FF FF FF FF 
0431   17DC FF FF FF FF 
0431   17E0 FF FF FF FF 
0431   17E4 FF FF FF FF 
0431   17E8 FF FF FF FF 
0431   17EC FF FF FF FF 
0431   17F0 FF FF FF FF 
0431   17F4 FF FF FF FF 
0431   17F8 FF FF FF FF 
0431   17FC FF FF FF FF 
0431   1800 FF FF FF FF 
0431   1804 FF FF FF FF 
0431   1808 FF FF FF FF 
0431   180C FF FF FF FF 
0431   1810 FF FF FF FF 
0431   1814 FF FF FF FF 
0431   1818 FF FF FF FF 
0431   181C FF FF FF FF 
0431   1820 FF FF FF FF 
0431   1824 FF FF FF FF 
0431   1828 FF FF FF FF 
0431   182C FF FF FF FF 
0431   1830 FF FF FF FF 
0431   1834 FF FF FF FF 
0431   1838 FF FF FF FF 
0431   183C FF FF FF FF 
0431   1840 FF FF FF FF 
0431   1844 FF FF FF FF 
0431   1848 FF FF FF FF 
0431   184C FF FF FF FF 
0431   1850 FF FF FF FF 
0431   1854 FF FF FF FF 
0431   1858 FF FF FF FF 
0431   185C FF FF FF FF 
0431   1860 FF FF FF FF 
0431   1864 FF FF FF FF 
0431   1868 FF FF FF FF 
0431   186C FF FF FF FF 
0431   1870 FF FF FF FF 
0431   1874 FF FF FF FF 
0431   1878 FF FF FF FF 
0431   187C FF FF FF FF 
0431   1880 FF FF FF FF 
0431   1884 FF FF FF FF 
0431   1888 FF FF FF FF 
0431   188C FF FF FF FF 
0431   1890 FF FF FF FF 
0431   1894 FF FF FF FF 
0431   1898 FF FF FF FF 
0431   189C FF FF FF FF 
0431   18A0 FF FF FF FF 
0431   18A4 FF FF FF FF 
0431   18A8 FF FF FF FF 
0431   18AC FF FF FF FF 
0431   18B0 FF FF FF FF 
0431   18B4 FF FF FF FF 
0431   18B8 FF FF FF FF 
0431   18BC FF FF FF FF 
0431   18C0 FF FF FF FF 
0431   18C4 FF FF FF FF 
0431   18C8 FF FF FF FF 
0431   18CC FF FF FF FF 
0431   18D0 FF FF FF FF 
0431   18D4 FF FF FF FF 
0431   18D8 FF FF FF FF 
0431   18DC FF FF FF FF 
0431   18E0 FF FF FF FF 
0431   18E4 FF FF FF FF 
0431   18E8 FF FF FF FF 
0431   18EC FF FF FF FF 
0431   18F0 FF FF FF FF 
0431   18F4 FF FF FF FF 
0431   18F8 FF FF FF FF 
0431   18FC FF FF FF FF 
0431   1900 FF FF FF FF 
0431   1904 FF FF FF FF 
0431   1908 FF FF FF FF 
0431   190C FF FF FF FF 
0431   1910 FF FF FF FF 
0431   1914 FF FF FF FF 
0431   1918 FF FF FF FF 
0431   191C FF FF FF FF 
0431   1920 FF FF FF FF 
0431   1924 FF FF FF FF 
0431   1928 FF FF FF FF 
0431   192C FF FF FF FF 
0431   1930 FF FF FF FF 
0431   1934 FF FF FF FF 
0431   1938 FF FF FF FF 
0431   193C FF FF FF FF 
0431   1940 FF FF FF FF 
0431   1944 FF FF FF FF 
0431   1948 FF FF FF FF 
0431   194C FF FF FF FF 
0431   1950 FF FF FF FF 
0431   1954 FF FF FF FF 
0431   1958 FF FF FF FF 
0431   195C FF FF FF FF 
0431   1960 FF FF FF FF 
0431   1964 FF FF FF FF 
0431   1968 FF FF FF FF 
0431   196C FF FF FF FF 
0431   1970 FF FF FF FF 
0431   1974 FF FF FF FF 
0431   1978 FF FF FF FF 
0431   197C FF FF FF FF 
0431   1980 FF FF FF FF 
0431   1984 FF FF FF FF 
0431   1988 FF FF FF FF 
0431   198C FF FF FF FF 
0431   1990 FF FF FF FF 
0431   1994 FF FF FF FF 
0431   1998 FF FF FF FF 
0431   199C FF FF FF FF 
0431   19A0 FF FF FF FF 
0431   19A4 FF FF FF FF 
0431   19A8 FF FF FF FF 
0431   19AC FF FF FF FF 
0431   19B0 FF FF FF FF 
0431   19B4 FF FF FF FF 
0431   19B8 FF FF FF FF 
0431   19BC FF FF FF FF 
0431   19C0 FF FF FF FF 
0431   19C4 FF FF FF FF 
0431   19C8 FF FF FF FF 
0431   19CC FF FF FF FF 
0431   19D0 FF FF FF FF 
0431   19D4 FF FF FF FF 
0431   19D8 FF FF FF FF 
0431   19DC FF FF FF FF 
0431   19E0 FF FF FF FF 
0431   19E4 FF FF FF FF 
0431   19E8 FF FF FF FF 
0431   19EC FF FF FF FF 
0431   19F0 FF FF FF FF 
0431   19F4 FF FF FF FF 
0431   19F8 FF FF FF FF 
0431   19FC FF FF FF FF 
0431   1A00 FF FF FF FF 
0431   1A04 FF FF FF FF 
0431   1A08 FF FF FF FF 
0431   1A0C FF FF FF FF 
0431   1A10 FF FF FF FF 
0431   1A14 FF FF FF FF 
0431   1A18 FF FF FF FF 
0431   1A1C FF FF FF FF 
0431   1A20 FF FF FF FF 
0431   1A24 FF FF FF FF 
0431   1A28 FF FF FF FF 
0431   1A2C FF FF FF FF 
0431   1A30 FF FF FF FF 
0431   1A34 FF FF FF FF 
0431   1A38 FF FF FF FF 
0431   1A3C FF FF FF FF 
0431   1A40 FF FF FF FF 
0431   1A44 FF FF FF FF 
0431   1A48 FF FF FF FF 
0431   1A4C FF FF FF FF 
0431   1A50 FF FF FF FF 
0431   1A54 FF FF FF FF 
0431   1A58 FF FF FF FF 
0431   1A5C FF FF FF FF 
0431   1A60 FF FF FF FF 
0431   1A64 FF FF FF FF 
0431   1A68 FF FF FF FF 
0431   1A6C FF FF FF FF 
0431   1A70 FF FF FF FF 
0431   1A74 FF FF FF FF 
0431   1A78 FF FF FF FF 
0431   1A7C FF FF FF FF 
0431   1A80 FF FF FF FF 
0431   1A84 FF FF FF FF 
0431   1A88 FF FF FF FF 
0431   1A8C FF FF FF FF 
0431   1A90 FF FF FF FF 
0431   1A94 FF FF FF FF 
0431   1A98 FF FF FF FF 
0431   1A9C FF FF FF FF 
0431   1AA0 FF FF FF FF 
0431   1AA4 FF FF FF FF 
0431   1AA8 FF FF FF FF 
0431   1AAC FF FF FF FF 
0431   1AB0 FF FF FF FF 
0431   1AB4 FF FF FF FF 
0431   1AB8 FF FF FF FF 
0431   1ABC FF FF FF FF 
0431   1AC0 FF FF FF FF 
0431   1AC4 FF FF FF FF 
0431   1AC8 FF FF FF FF 
0431   1ACC FF FF FF FF 
0431   1AD0 FF FF FF FF 
0431   1AD4 FF FF FF FF 
0431   1AD8 FF FF FF FF 
0431   1ADC FF FF FF FF 
0431   1AE0 FF FF FF FF 
0431   1AE4 FF FF FF FF 
0431   1AE8 FF FF FF FF 
0431   1AEC FF FF FF FF 
0431   1AF0 FF FF FF FF 
0431   1AF4 FF FF FF FF 
0431   1AF8 FF FF FF FF 
0431   1AFC FF FF FF FF 
0431   1B00 FF FF FF FF 
0431   1B04 FF FF FF FF 
0431   1B08 FF FF FF FF 
0431   1B0C FF FF FF FF 
0431   1B10 FF FF FF FF 
0431   1B14 FF FF FF FF 
0431   1B18 FF FF FF FF 
0431   1B1C FF FF FF FF 
0431   1B20 FF FF FF FF 
0431   1B24 FF FF FF FF 
0431   1B28 FF FF FF FF 
0431   1B2C FF FF FF FF 
0431   1B30 FF FF FF FF 
0431   1B34 FF FF FF FF 
0431   1B38 FF FF FF FF 
0431   1B3C FF FF FF FF 
0431   1B40 FF FF FF FF 
0431   1B44 FF FF FF FF 
0431   1B48 FF FF FF FF 
0431   1B4C FF FF FF FF 
0431   1B50 FF FF FF FF 
0431   1B54 FF FF FF FF 
0431   1B58 FF FF FF FF 
0431   1B5C FF FF FF FF 
0431   1B60 FF FF FF FF 
0431   1B64 FF FF FF FF 
0431   1B68 FF FF FF FF 
0431   1B6C FF FF FF FF 
0431   1B70 FF FF FF FF 
0431   1B74 FF FF FF FF 
0431   1B78 FF FF FF FF 
0431   1B7C FF FF FF FF 
0431   1B80 FF FF FF FF 
0431   1B84 FF FF FF FF 
0431   1B88 FF FF FF FF 
0431   1B8C FF FF FF FF 
0431   1B90 FF FF FF FF 
0431   1B94 FF FF FF FF 
0431   1B98 FF FF FF FF 
0431   1B9C FF FF FF FF 
0431   1BA0 FF FF FF FF 
0431   1BA4 FF FF FF FF 
0431   1BA8 FF FF FF FF 
0431   1BAC FF FF FF FF 
0431   1BB0 FF FF FF FF 
0431   1BB4 FF FF FF FF 
0431   1BB8 FF FF FF FF 
0431   1BBC FF FF FF FF 
0431   1BC0 FF FF FF FF 
0431   1BC4 FF FF FF FF 
0431   1BC8 FF FF FF FF 
0431   1BCC FF FF FF FF 
0431   1BD0 FF FF FF FF 
0431   1BD4 FF FF FF FF 
0431   1BD8 FF FF FF FF 
0431   1BDC FF FF FF FF 
0431   1BE0 FF FF FF FF 
0431   1BE4 FF FF FF FF 
0431   1BE8 FF FF FF FF 
0431   1BEC FF FF FF FF 
0431   1BF0 FF FF FF FF 
0431   1BF4 FF FF FF FF 
0431   1BF8 FF FF FF FF 
0431   1BFC FF FF FF FF 
0431   1C00 FF FF FF FF 
0431   1C04 FF FF FF FF 
0431   1C08 FF FF FF FF 
0431   1C0C FF FF FF FF 
0431   1C10 FF FF FF FF 
0431   1C14 FF FF FF FF 
0431   1C18 FF FF FF FF 
0431   1C1C FF FF FF FF 
0431   1C20 FF FF FF FF 
0431   1C24 FF FF FF FF 
0431   1C28 FF FF FF FF 
0431   1C2C FF FF FF FF 
0431   1C30 FF FF FF FF 
0431   1C34 FF FF FF FF 
0431   1C38 FF FF FF FF 
0431   1C3C FF FF FF FF 
0431   1C40 FF FF FF FF 
0431   1C44 FF FF FF FF 
0431   1C48 FF FF FF FF 
0431   1C4C FF FF FF FF 
0431   1C50 FF FF FF FF 
0431   1C54 FF FF FF FF 
0431   1C58 FF FF FF FF 
0431   1C5C FF FF FF FF 
0431   1C60 FF FF FF FF 
0431   1C64 FF FF FF FF 
0431   1C68 FF FF FF FF 
0431   1C6C FF FF FF FF 
0431   1C70 FF FF FF FF 
0431   1C74 FF FF FF FF 
0431   1C78 FF FF FF FF 
0431   1C7C FF FF FF FF 
0431   1C80 FF FF FF FF 
0431   1C84 FF FF FF FF 
0431   1C88 FF FF FF FF 
0431   1C8C FF FF FF FF 
0431   1C90 FF FF FF FF 
0431   1C94 FF FF FF FF 
0431   1C98 FF FF FF FF 
0431   1C9C FF FF FF FF 
0431   1CA0 FF FF FF FF 
0431   1CA4 FF FF FF FF 
0431   1CA8 FF FF FF FF 
0431   1CAC FF FF FF FF 
0431   1CB0 FF FF FF FF 
0431   1CB4 FF FF FF FF 
0431   1CB8 FF FF FF FF 
0431   1CBC FF FF FF FF 
0431   1CC0 FF FF FF FF 
0431   1CC4 FF FF FF FF 
0431   1CC8 FF FF FF FF 
0431   1CCC FF FF FF FF 
0431   1CD0 FF FF FF FF 
0431   1CD4 FF FF FF FF 
0431   1CD8 FF FF FF FF 
0431   1CDC FF FF FF FF 
0431   1CE0 FF FF FF FF 
0431   1CE4 FF FF FF FF 
0431   1CE8 FF FF FF FF 
0431   1CEC FF FF FF FF 
0431   1CF0 FF FF FF FF 
0431   1CF4 FF FF FF FF 
0431   1CF8 FF FF FF FF 
0431   1CFC FF FF FF FF 
0431   1D00 FF FF FF FF 
0431   1D04 FF FF FF FF 
0431   1D08 FF FF FF FF 
0431   1D0C FF FF FF FF 
0431   1D10 FF FF FF FF 
0431   1D14 FF FF FF FF 
0431   1D18 FF FF FF FF 
0431   1D1C FF FF FF FF 
0431   1D20 FF FF FF FF 
0431   1D24 FF FF FF FF 
0431   1D28 FF FF FF FF 
0431   1D2C FF FF FF FF 
0431   1D30 FF FF FF FF 
0431   1D34 FF FF FF FF 
0431   1D38 FF FF FF FF 
0431   1D3C FF FF FF FF 
0431   1D40 FF FF FF FF 
0431   1D44 FF FF FF FF 
0431   1D48 FF FF FF FF 
0431   1D4C FF FF FF FF 
0431   1D50 FF FF FF FF 
0431   1D54 FF FF FF FF 
0431   1D58 FF FF FF FF 
0431   1D5C FF FF FF FF 
0431   1D60 FF FF FF FF 
0431   1D64 FF FF FF FF 
0431   1D68 FF FF FF FF 
0431   1D6C FF FF FF FF 
0431   1D70 FF FF FF FF 
0431   1D74 FF FF FF FF 
0431   1D78 FF FF FF FF 
0431   1D7C FF FF FF FF 
0431   1D80 FF FF FF FF 
0431   1D84 FF FF FF FF 
0431   1D88 FF FF FF FF 
0431   1D8C FF FF FF FF 
0431   1D90 FF FF FF FF 
0431   1D94 FF FF FF FF 
0431   1D98 FF FF FF FF 
0431   1D9C FF FF FF FF 
0431   1DA0 FF FF FF FF 
0431   1DA4 FF FF FF FF 
0431   1DA8 FF FF FF FF 
0431   1DAC FF FF FF FF 
0431   1DB0 FF FF FF FF 
0431   1DB4 FF FF FF FF 
0431   1DB8 FF FF FF FF 
0431   1DBC FF FF FF FF 
0431   1DC0 FF FF FF FF 
0431   1DC4 FF FF FF FF 
0431   1DC8 FF FF FF FF 
0431   1DCC FF FF FF FF 
0431   1DD0 FF FF FF FF 
0431   1DD4 FF FF FF FF 
0431   1DD8 FF FF FF FF 
0431   1DDC FF FF FF FF 
0431   1DE0 FF FF FF FF 
0431   1DE4 FF FF FF FF 
0431   1DE8 FF FF FF FF 
0431   1DEC FF FF FF FF 
0431   1DF0 FF FF FF FF 
0431   1DF4 FF FF FF FF 
0431   1DF8 FF FF FF FF 
0431   1DFC FF FF FF FF 
0431   1E00 FF FF FF FF 
0431   1E04 FF FF FF FF 
0431   1E08 FF FF FF FF 
0431   1E0C FF FF FF FF 
0431   1E10 FF FF FF FF 
0431   1E14 FF FF FF FF 
0431   1E18 FF FF FF FF 
0431   1E1C FF FF FF FF 
0431   1E20 FF FF FF FF 
0431   1E24 FF FF FF FF 
0431   1E28 FF FF FF FF 
0431   1E2C FF FF FF FF 
0431   1E30 FF FF FF FF 
0431   1E34 FF FF FF FF 
0431   1E38 FF FF FF FF 
0431   1E3C FF FF FF FF 
0431   1E40 FF FF FF FF 
0431   1E44 FF FF FF FF 
0431   1E48 FF FF FF FF 
0431   1E4C FF FF FF FF 
0431   1E50 FF FF FF FF 
0431   1E54 FF FF FF FF 
0431   1E58 FF FF FF FF 
0431   1E5C FF FF FF FF 
0431   1E60 FF FF FF FF 
0431   1E64 FF FF FF FF 
0431   1E68 FF FF FF FF 
0431   1E6C FF FF FF FF 
0431   1E70 FF FF FF FF 
0431   1E74 FF FF FF FF 
0431   1E78 FF FF FF FF 
0431   1E7C FF FF FF FF 
0431   1E80 FF FF FF FF 
0431   1E84 FF FF FF FF 
0431   1E88 FF FF FF FF 
0431   1E8C FF FF FF FF 
0431   1E90 FF FF FF FF 
0431   1E94 FF FF FF FF 
0431   1E98 FF FF FF FF 
0431   1E9C FF FF FF FF 
0431   1EA0 FF FF FF FF 
0431   1EA4 FF FF FF FF 
0431   1EA8 FF FF FF FF 
0431   1EAC FF FF FF FF 
0431   1EB0 FF FF FF FF 
0431   1EB4 FF FF FF FF 
0431   1EB8 FF FF FF FF 
0431   1EBC FF FF FF FF 
0431   1EC0 FF FF FF FF 
0431   1EC4 FF FF FF FF 
0431   1EC8 FF FF FF FF 
0431   1ECC FF FF FF FF 
0431   1ED0 FF FF FF FF 
0431   1ED4 FF FF FF FF 
0431   1ED8 FF FF FF FF 
0431   1EDC FF FF FF FF 
0431   1EE0 FF FF FF FF 
0431   1EE4 FF FF FF FF 
0431   1EE8 FF FF FF FF 
0431   1EEC FF FF FF FF 
0431   1EF0 FF FF FF FF 
0431   1EF4 FF FF FF FF 
0431   1EF8 FF FF FF FF 
0431   1EFC FF FF FF FF 
0431   1F00 FF FF FF FF 
0431   1F04 FF FF FF FF 
0431   1F08 FF FF FF FF 
0431   1F0C FF FF FF FF 
0431   1F10 FF FF FF FF 
0431   1F14 FF FF FF FF 
0431   1F18 FF FF FF FF 
0431   1F1C FF FF FF FF 
0431   1F20 FF FF FF FF 
0431   1F24 FF FF FF FF 
0431   1F28 FF FF FF FF 
0431   1F2C FF FF FF FF 
0431   1F30 FF FF FF FF 
0431   1F34 FF FF FF FF 
0431   1F38 FF FF FF FF 
0431   1F3C FF FF FF FF 
0431   1F40 FF FF FF FF 
0431   1F44 FF FF FF FF 
0431   1F48 FF FF FF FF 
0431   1F4C FF FF FF FF 
0431   1F50 FF FF FF FF 
0431   1F54 FF FF FF FF 
0431   1F58 FF FF FF FF 
0431   1F5C FF FF FF FF 
0431   1F60 FF FF FF FF 
0431   1F64 FF FF FF FF 
0431   1F68 FF FF FF FF 
0431   1F6C FF FF FF FF 
0431   1F70 FF FF FF FF 
0431   1F74 FF FF FF FF 
0431   1F78 FF FF FF FF 
0431   1F7C FF FF FF FF 
0431   1F80 FF FF FF FF 
0431   1F84 FF FF FF FF 
0431   1F88 FF FF FF FF 
0431   1F8C FF FF FF FF 
0431   1F90 FF FF FF FF 
0431   1F94 FF FF FF FF 
0431   1F98 FF FF FF FF 
0431   1F9C FF FF FF FF 
0431   1FA0 FF FF FF FF 
0431   1FA4 FF FF FF FF 
0431   1FA8 FF FF FF FF 
0431   1FAC FF FF FF FF 
0431   1FB0 FF FF FF FF 
0431   1FB4 FF FF FF FF 
0431   1FB8 FF FF FF FF 
0431   1FBC FF FF FF FF 
0431   1FC0 FF FF FF FF 
0431   1FC4 FF FF FF FF 
0431   1FC8 FF FF FF FF 
0431   1FCC FF FF FF FF 
0431   1FD0 FF FF FF FF 
0431   1FD4 FF FF FF FF 
0431   1FD8 FF FF FF FF 
0431   1FDC FF FF FF FF 
0431   1FE0 FF FF FF FF 
0432   1FE4 FF FF FF FF transient_data:	.fill 512
0432   1FE8 FF FF FF FF 
0432   1FEC FF FF FF FF 
0432   1FF0 FF FF FF FF 
0432   1FF4 FF FF FF FF 
0432   1FF8 FF FF FF FF 
0432   1FFC FF FF FF FF 
0432   2000 FF FF FF FF 
0432   2004 FF FF FF FF 
0432   2008 FF FF FF FF 
0432   200C FF FF FF FF 
0432   2010 FF FF FF FF 
0432   2014 FF FF FF FF 
0432   2018 FF FF FF FF 
0432   201C FF FF FF FF 
0432   2020 FF FF FF FF 
0432   2024 FF FF FF FF 
0432   2028 FF FF FF FF 
0432   202C FF FF FF FF 
0432   2030 FF FF FF FF 
0432   2034 FF FF FF FF 
0432   2038 FF FF FF FF 
0432   203C FF FF FF FF 
0432   2040 FF FF FF FF 
0432   2044 FF FF FF FF 
0432   2048 FF FF FF FF 
0432   204C FF FF FF FF 
0432   2050 FF FF FF FF 
0432   2054 FF FF FF FF 
0432   2058 FF FF FF FF 
0432   205C FF FF FF FF 
0432   2060 FF FF FF FF 
0432   2064 FF FF FF FF 
0432   2068 FF FF FF FF 
0432   206C FF FF FF FF 
0432   2070 FF FF FF FF 
0432   2074 FF FF FF FF 
0432   2078 FF FF FF FF 
0432   207C FF FF FF FF 
0432   2080 FF FF FF FF 
0432   2084 FF FF FF FF 
0432   2088 FF FF FF FF 
0432   208C FF FF FF FF 
0432   2090 FF FF FF FF 
0432   2094 FF FF FF FF 
0432   2098 FF FF FF FF 
0432   209C FF FF FF FF 
0432   20A0 FF FF FF FF 
0432   20A4 FF FF FF FF 
0432   20A8 FF FF FF FF 
0432   20AC FF FF FF FF 
0432   20B0 FF FF FF FF 
0432   20B4 FF FF FF FF 
0432   20B8 FF FF FF FF 
0432   20BC FF FF FF FF 
0432   20C0 FF FF FF FF 
0432   20C4 FF FF FF FF 
0432   20C8 FF FF FF FF 
0432   20CC FF FF FF FF 
0432   20D0 FF FF FF FF 
0432   20D4 FF FF FF FF 
0432   20D8 FF FF FF FF 
0432   20DC FF FF FF FF 
0432   20E0 FF FF FF FF 
0432   20E4 FF FF FF FF 
0432   20E8 FF FF FF FF 
0432   20EC FF FF FF FF 
0432   20F0 FF FF FF FF 
0432   20F4 FF FF FF FF 
0432   20F8 FF FF FF FF 
0432   20FC FF FF FF FF 
0432   2100 FF FF FF FF 
0432   2104 FF FF FF FF 
0432   2108 FF FF FF FF 
0432   210C FF FF FF FF 
0432   2110 FF FF FF FF 
0432   2114 FF FF FF FF 
0432   2118 FF FF FF FF 
0432   211C FF FF FF FF 
0432   2120 FF FF FF FF 
0432   2124 FF FF FF FF 
0432   2128 FF FF FF FF 
0432   212C FF FF FF FF 
0432   2130 FF FF FF FF 
0432   2134 FF FF FF FF 
0432   2138 FF FF FF FF 
0432   213C FF FF FF FF 
0432   2140 FF FF FF FF 
0432   2144 FF FF FF FF 
0432   2148 FF FF FF FF 
0432   214C FF FF FF FF 
0432   2150 FF FF FF FF 
0432   2154 FF FF FF FF 
0432   2158 FF FF FF FF 
0432   215C FF FF FF FF 
0432   2160 FF FF FF FF 
0432   2164 FF FF FF FF 
0432   2168 FF FF FF FF 
0432   216C FF FF FF FF 
0432   2170 FF FF FF FF 
0432   2174 FF FF FF FF 
0432   2178 FF FF FF FF 
0432   217C FF FF FF FF 
0432   2180 FF FF FF FF 
0432   2184 FF FF FF FF 
0432   2188 FF FF FF FF 
0432   218C FF FF FF FF 
0432   2190 FF FF FF FF 
0432   2194 FF FF FF FF 
0432   2198 FF FF FF FF 
0432   219C FF FF FF FF 
0432   21A0 FF FF FF FF 
0432   21A4 FF FF FF FF 
0432   21A8 FF FF FF FF 
0432   21AC FF FF FF FF 
0432   21B0 FF FF FF FF 
0432   21B4 FF FF FF FF 
0432   21B8 FF FF FF FF 
0432   21BC FF FF FF FF 
0432   21C0 FF FF FF FF 
0432   21C4 FF FF FF FF 
0432   21C8 FF FF FF FF 
0432   21CC FF FF FF FF 
0432   21D0 FF FF FF FF 
0432   21D4 FF FF FF FF 
0432   21D8 FF FF FF FF 
0432   21DC FF FF FF FF 
0432   21E0 FF FF FF FF 
0433   21E4 00          text_buffer:	.db 0			
0434   21E5             
0435   21E5             .end
0436   21E5             
tasm: Number of errors = 0
