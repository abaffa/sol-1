0001   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0400             .org PROC_TEXT_ORG			; origin at 1024
0004   0400             
0005   0400             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006   0400             ;; RM - remove file
0007   0400             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008   0400             ; frees up the data sectors for the file further down the disk
0009   0400             ; deletes file entry in the current directory's file list 
0010   0400             cmd_rm:	
0011   0400 10 00 00    	mov a, 0
0012   0403 42 49 06    	mov [prog], a
0013   0406             cmd_rm_L0:
0014   0406 07 AA 04    	call get_token
0015   0409 BC 4B 06 00 	cmp byte[toktyp], TOKTYP_IDENTIFIER
0016   040D C7 1A 04    	jne cmd_rm_end
0017   0410             ; execute rm command
0018   0410 3B 4D 06    	mov d, tokstr
0019   0413 19 0A       	mov al, 10
0020   0415 05 04       	syscall sys_filesystem
0021   0417 0A 06 04    	jmp cmd_rm_L0
0022   041A             cmd_rm_end:
0023   041A 07 30 06    	call putback		; if token was not an identifier, then put it back
0024   041D             
0025   041D 05 0B       	syscall sys_terminate_proc
0026   041F             
0027   041F             
0028   041F             .include "lib/token.asm"
0001+  041F             TOKTYP_IDENTIFIER	.equ 0
0002+  041F             TOKTYP_KEYWORD		.equ 1
0003+  041F             TOKTYP_DELIMITER	.equ 2
0004+  041F             TOKTYP_STRING		.equ 3
0005+  041F             TOKTYP_CHAR			.equ 4
0006+  041F             TOKTYP_NUMERIC		.equ 5
0007+  041F             TOKTYP_END			.equ 6
0008+  041F             
0009+  041F             TOK_NULL			.equ 0
0010+  041F             TOK_FSLASH			.equ 1
0011+  041F             TOK_TIMES 			.equ 2
0012+  041F             TOK_PLUS 			.equ 3
0013+  041F             TOK_MINUS 			.equ 4
0014+  041F             TOK_DOT				.equ 5
0015+  041F             TOK_SEMI			.equ 6
0016+  041F             TOK_ANGLE			.equ 7
0017+  041F             TOK_TILDE			.equ 8
0018+  041F             TOK_EQUAL			.equ 9
0019+  041F             TOK_COLON			.equ 10
0020+  041F             TOK_COMMA			.equ 11
0021+  041F             
0022+  041F             TOK_END				.equ 20
0023+  041F             
0024+  041F             
0025+  041F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  041F             ;; read a full command argment from shell input buffer
0027+  041F             ;; argument is written into tokstr
0028+  041F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  041F             get_arg:
0030+  041F D7          	push a
0031+  0420 E2          	push si
0032+  0421 E3          	push di
0033+  0422 19 00       	mov al, 0
0034+  0424 3D 4D 06    	mov [tokstr], al			; nullify tokstr string
0035+  0427 14 49 06    	mov a, [prog]
0036+  042A 4D          	mov si, a
0037+  042B FD 4F 4D 06 	mov di, tokstr
0038+  042F             get_arg_skip_spaces:
0039+  042F F6          	lodsb
0040+  0430 07 43 0B    	call isspace
0041+  0433 C6 2F 04    	je get_arg_skip_spaces
0042+  0436             get_arg_L0:
0043+  0436 B9 3B       	cmp al, $3B				; check if is ';'
0044+  0438 C6 45 04    	je get_arg_end
0045+  043B B9 00       	cmp al, 0
0046+  043D C6 45 04    	je get_arg_end			; check if end of input
0047+  0440 F7          	stosb
0048+  0441 F6          	lodsb
0049+  0442 0A 36 04    	jmp get_arg_L0
0050+  0445             get_arg_end:
0051+  0445 19 00       	mov al, 0
0052+  0447 F7          	stosb
0053+  0448 D5 01 00    	sub si, 1
0054+  044B 4E          	mov a, si
0055+  044C 42 49 06    	mov [prog], a		; update pointer
0056+  044F F0          	pop di
0057+  0450 EF          	pop si
0058+  0451 E4          	pop a
0059+  0452 09          	ret
0060+  0453             
0061+  0453             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0453             ;; read a path formation from shell input buffer
0063+  0453             ;; path is written into tokstr
0064+  0453             ;; /usr/bin
0065+  0453             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0453             get_path:
0067+  0453 D7          	push a
0068+  0454 E2          	push si
0069+  0455 E3          	push di
0070+  0456 19 00       	mov al, 0
0071+  0458 3D 4D 06    	mov [tokstr], al			; nullify tokstr string
0072+  045B 14 49 06    	mov a, [prog]
0073+  045E 4D          	mov si, a
0074+  045F FD 4F 4D 06 	mov di, tokstr
0075+  0463             get_path_skip_spaces:
0076+  0463 F6          	lodsb
0077+  0464 07 43 0B    	call isspace
0078+  0467 C6 63 04    	je get_path_skip_spaces
0079+  046A             get_path_is_pathchar:
0080+  046A F7          	stosb
0081+  046B F6          	lodsb
0082+  046C 07 CD 0A    	call isalnum			;check if is alphanumeric
0083+  046F C6 6A 04    	je get_path_is_pathchar
0084+  0472 B9 2F       	cmp al, '/'				; check if is '/'
0085+  0474 C6 6A 04    	je get_path_is_pathchar
0086+  0477 19 00       	mov al, 0
0087+  0479 F7          	stosb
0088+  047A D5 01 00    	sub si, 1
0089+  047D 4E          	mov a, si
0090+  047E 42 49 06    	mov [prog], a		; update pointer
0091+  0481             get_path_end:
0092+  0481 F0          	pop di
0093+  0482 EF          	pop si
0094+  0483 E4          	pop a
0095+  0484 09          	ret
0096+  0485             
0097+  0485             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0485             ;; read a line
0099+  0485             ;; line is written into tokstr
0100+  0485             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0485             get_line:
0102+  0485 D7          	push a
0103+  0486 E2          	push si
0104+  0487 E3          	push di
0105+  0488 19 00       	mov al, 0
0106+  048A 3D 4D 06    	mov [tokstr], al			; nullify tokstr string
0107+  048D 14 49 06    	mov a, [prog]
0108+  0490 4D          	mov si, a
0109+  0491 FD 4F 4D 06 	mov di, tokstr
0110+  0495             get_line_L0:
0111+  0495 F6          	lodsb
0112+  0496 B9 0A       	cmp al, $0A		; check for new line
0113+  0498 C6 9F 04    	je get_line_exit
0114+  049B F7          	stosb
0115+  049C 0A 95 04    	jmp get_line_L0
0116+  049F             get_line_exit:
0117+  049F 19 00       	mov al, 0
0118+  04A1 F7          	stosb
0119+  04A2 4E          	mov a, si
0120+  04A3 42 49 06    	mov [prog], a		; update pointer
0121+  04A6 F0          	pop di
0122+  04A7 EF          	pop si
0123+  04A8 E4          	pop a
0124+  04A9 09          	ret
0125+  04AA             
0126+  04AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  04AA             ;; token parser
0128+  04AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  04AA             get_token:
0130+  04AA D7          	push a
0131+  04AB DA          	push d
0132+  04AC E2          	push si
0133+  04AD E3          	push di
0134+  04AE 19 00       	mov al, 0
0135+  04B0 3D 4D 06    	mov [tokstr], al			; nullify tokstr string
0136+  04B3 19 00       	mov al, TOK_NULL
0137+  04B5 3D 4C 06    	mov [tok], al				; nullify token
0138+  04B8 14 49 06    	mov a, [prog]
0139+  04BB 4D          	mov si, a
0140+  04BC FD 4F 4D 06 	mov di, tokstr
0141+  04C0             get_tok_skip_spaces:
0142+  04C0 F6          	lodsb
0143+  04C1 07 43 0B    	call isspace
0144+  04C4 C6 C0 04    	je get_tok_skip_spaces
0145+  04C7 B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  04C9 C6 AE 05    	je get_token_end
0147+  04CC B9 23       	cmp al, '#'			; comments!
0148+  04CE C6 DC 05    	je get_tok_comment
0149+  04D1 07 CD 0A    	call isalnum
0150+  04D4 C6 BB 05    	jz is_alphanumeric
0151+  04D7             ; other token types
0152+  04D7             get_token_slash:
0153+  04D7 B9 2F       	cmp al, '/'				; check if '/'
0154+  04D9 C7 F1 04    	jne get_token_minus
0155+  04DC F7          	stosb					; store '/' into token string
0156+  04DD 19 00       	mov al, 0
0157+  04DF F7          	stosb					; terminate token string
0158+  04E0 19 01       	mov al, TOK_FSLASH
0159+  04E2 3D 4C 06    	mov [tok], al			
0160+  04E5 19 02       	mov al, TOKTYP_DELIMITER
0161+  04E7 3D 4B 06    	mov [toktyp], al
0162+  04EA 4E          	mov a, si
0163+  04EB 42 49 06    	mov [prog], a		; update pointer
0164+  04EE 0A D7 05    	jmp get_token_return
0165+  04F1             get_token_minus:
0166+  04F1 B9 2D       	cmp al, '-'				; check if '-'
0167+  04F3 C7 0B 05    	jne get_token_comma
0168+  04F6 F7          	stosb					; store '-' into token string
0169+  04F7 19 00       	mov al, 0
0170+  04F9 F7          	stosb					; terminate token string
0171+  04FA 19 04       	mov al, TOK_MINUS
0172+  04FC 3D 4C 06    	mov [tok], al			
0173+  04FF 19 02       	mov al, TOKTYP_DELIMITER
0174+  0501 3D 4B 06    	mov [toktyp], al
0175+  0504 4E          	mov a, si
0176+  0505 42 49 06    	mov [prog], a		; update pointer
0177+  0508 0A D7 05    	jmp get_token_return
0178+  050B             get_token_comma:
0179+  050B B9 2C       	cmp al, ','				; check if ','
0180+  050D C7 25 05    	jne get_token_semi
0181+  0510 F7          	stosb					; store ',' into token string
0182+  0511 19 00       	mov al, 0
0183+  0513 F7          	stosb					; terminate token string
0184+  0514 19 0B       	mov al, TOK_COMMA
0185+  0516 3D 4C 06    	mov [tok], al			
0186+  0519 19 02       	mov al, TOKTYP_DELIMITER
0187+  051B 3D 4B 06    	mov [toktyp], al
0188+  051E 4E          	mov a, si
0189+  051F 42 49 06    	mov [prog], a		; update pointer
0190+  0522 0A D7 05    	jmp get_token_return
0191+  0525             get_token_semi:
0192+  0525 B9 3B       	cmp al, $3B				; check if ';'
0193+  0527 C7 3F 05    	jne get_token_colon
0194+  052A F7          	stosb					; store ';' into token string
0195+  052B 19 00       	mov al, 0
0196+  052D F7          	stosb					; terminate token string
0197+  052E 19 06       	mov al, TOK_SEMI
0198+  0530 3D 4C 06    	mov [tok], al			
0199+  0533 19 02       	mov al, TOKTYP_DELIMITER
0200+  0535 3D 4B 06    	mov [toktyp], al
0201+  0538 4E          	mov a, si
0202+  0539 42 49 06    	mov [prog], a		; update pointer
0203+  053C 0A D7 05    	jmp get_token_return
0204+  053F             get_token_colon:
0205+  053F B9 3A       	cmp al, $3A				; check if ':'
0206+  0541 C7 59 05    	jne get_token_angle
0207+  0544 F7          	stosb					; store ':' into token string
0208+  0545 19 00       	mov al, 0
0209+  0547 F7          	stosb					; terminate token string
0210+  0548 19 0A       	mov al, TOK_COLON
0211+  054A 3D 4C 06    	mov [tok], al			
0212+  054D 19 02       	mov al, TOKTYP_DELIMITER
0213+  054F 3D 4B 06    	mov [toktyp], al
0214+  0552 4E          	mov a, si
0215+  0553 42 49 06    	mov [prog], a		; update pointer
0216+  0556 0A D7 05    	jmp get_token_return
0217+  0559             get_token_angle:
0218+  0559 B9 3E       	cmp al, $3E				; check if '>'
0219+  055B C7 73 05    	jne get_token_tilde
0220+  055E F7          	stosb					; store '>' into token string
0221+  055F 19 00       	mov al, 0
0222+  0561 F7          	stosb					; terminate token string
0223+  0562 19 07       	mov al, TOK_ANGLE
0224+  0564 3D 4C 06    	mov [tok], al			
0225+  0567 19 02       	mov al, TOKTYP_DELIMITER
0226+  0569 3D 4B 06    	mov [toktyp], al
0227+  056C 4E          	mov a, si
0228+  056D 42 49 06    	mov [prog], a		; update pointer
0229+  0570 0A D7 05    	jmp get_token_return
0230+  0573             get_token_tilde:
0231+  0573 B9 7E       	cmp al, '~'				; check if '~'
0232+  0575 C7 8D 05    	jne get_token_equal
0233+  0578 F7          	stosb					; store '~' into token string
0234+  0579 19 00       	mov al, 0
0235+  057B F7          	stosb					; terminate token string
0236+  057C 19 08       	mov al, TOK_TILDE
0237+  057E 3D 4C 06    	mov [tok], al			
0238+  0581 19 02       	mov al, TOKTYP_DELIMITER
0239+  0583 3D 4B 06    	mov [toktyp], al
0240+  0586 4E          	mov a, si
0241+  0587 42 49 06    	mov [prog], a		; update pointer
0242+  058A 0A D7 05    	jmp get_token_return
0243+  058D             get_token_equal:
0244+  058D B9 3D       	cmp al, '='				; check if '='
0245+  058F C7 A7 05    	jne get_token_skip
0246+  0592 F7          	stosb					; store '=' into token string
0247+  0593 19 00       	mov al, 0
0248+  0595 F7          	stosb					; terminate token string
0249+  0596 19 09       	mov al, TOK_EQUAL
0250+  0598 3D 4C 06    	mov [tok], al			
0251+  059B 19 02       	mov al, TOKTYP_DELIMITER
0252+  059D 3D 4B 06    	mov [toktyp], al
0253+  05A0 4E          	mov a, si
0254+  05A1 42 49 06    	mov [prog], a		; update pointer
0255+  05A4 0A D7 05    	jmp get_token_return
0256+  05A7             get_token_skip:
0257+  05A7 4E          	mov a, si
0258+  05A8 42 49 06    	mov [prog], a		; update pointer
0259+  05AB 0A D7 05    	jmp get_token_return
0260+  05AE             get_token_end:				; end of file token
0261+  05AE 19 14       	mov al, TOK_END
0262+  05B0 3D 4C 06    	mov [tok], al
0263+  05B3 19 06       	mov al, TOKTYP_END
0264+  05B5 3D 4B 06    	mov [toktyp], al
0265+  05B8 0A D7 05    	jmp get_token_return
0266+  05BB             is_alphanumeric:
0267+  05BB F7          	stosb
0268+  05BC F6          	lodsb
0269+  05BD 07 CD 0A    	call isalnum			;check if is alphanumeric
0270+  05C0 C6 BB 05    	jz is_alphanumeric
0271+  05C3 B9 2E       	cmp al, $2E				; check if is '.'
0272+  05C5 C6 BB 05    	je is_alphanumeric
0273+  05C8 19 00       	mov al, 0
0274+  05CA F7          	stosb
0275+  05CB 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  05CD 3D 4B 06    	mov [toktyp], al
0277+  05D0 D5 01 00    	sub si, 1
0278+  05D3 4E          	mov a, si
0279+  05D4 42 49 06    	mov [prog], a		; update pointer
0280+  05D7             get_token_return:
0281+  05D7 F0          	pop di
0282+  05D8 EF          	pop si
0283+  05D9 E7          	pop d
0284+  05DA E4          	pop a
0285+  05DB 09          	ret
0286+  05DC             get_tok_comment:
0287+  05DC F6          	lodsb
0288+  05DD B9 0A       	cmp al, $0A			; new line
0289+  05DF C7 DC 05    	jne get_tok_comment
0290+  05E2 0A C0 04    	jmp get_tok_skip_spaces
0291+  05E5             
0292+  05E5             
0293+  05E5             get_number:
0294+  05E5 D7          	push a
0295+  05E6 DA          	push d
0296+  05E7 E2          	push si
0297+  05E8 E3          	push di
0298+  05E9 19 00       	mov al, 0
0299+  05EB 3D 4D 06    	mov [tokstr], al			; nullify tokstr string
0300+  05EE 19 00       	mov al, TOK_NULL
0301+  05F0 3D 4C 06    	mov [tok], al				; nullify token
0302+  05F3 14 49 06    	mov a, [prog]
0303+  05F6 4D          	mov si, a
0304+  05F7 FD 4F 4D 06 	mov di, tokstr
0305+  05FB             get_number_skip_spaces:
0306+  05FB F6          	lodsb
0307+  05FC 07 43 0B    	call isspace
0308+  05FF C6 FB 05    	je get_number_skip_spaces
0309+  0602 B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  0604 C7 14 06    	jne get_number_L0
0311+  0607 19 14       	mov al, TOK_END
0312+  0609 3D 4C 06    	mov [tok], al
0313+  060C 19 06       	mov al, TOKTYP_END
0314+  060E 3D 4B 06    	mov [toktyp], al
0315+  0611 0A 2B 06    	jmp get_number_return
0316+  0614             get_number_L0:
0317+  0614 F7          	stosb
0318+  0615 F6          	lodsb
0319+  0616 07 D7 0A    	call isdigit			;check if is numeric
0320+  0619 C6 14 06    	jz get_number_L0
0321+  061C 19 00       	mov al, 0
0322+  061E F7          	stosb
0323+  061F 19 05       	mov al, TOKTYP_NUMERIC
0324+  0621 3D 4B 06    	mov [toktyp], al
0325+  0624 D5 01 00    	sub si, 1
0326+  0627 4E          	mov a, si
0327+  0628 42 49 06    	mov [prog], a		; update pointer
0328+  062B             get_number_return:
0329+  062B F0          	pop di
0330+  062C EF          	pop si
0331+  062D E7          	pop d
0332+  062E E4          	pop a
0333+  062F 09          	ret
0334+  0630             
0335+  0630             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0630             ;; PUT BACK TOKEN
0337+  0630             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  0630             putback:
0339+  0630 D7          	push a
0340+  0631 E2          	push si
0341+  0632 FD 4D 4D 06 	mov si, tokstr	
0342+  0636             putback_loop:
0343+  0636 F6          	lodsb
0344+  0637 B9 00       	cmp al, 0
0345+  0639 C6 46 06    	je putback_end
0346+  063C 14 49 06    	mov a, [prog]
0347+  063F 7D          	dec a
0348+  0640 42 49 06    	mov [prog], a			; update pointer
0349+  0643 0A 36 06    	jmp putback_loop
0350+  0646             putback_end:
0351+  0646 EF          	pop si
0352+  0647 E4          	pop a
0353+  0648 09          	ret
0354+  0649             
0355+  0649             
0356+  0649             
0357+  0649             
0358+  0649 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  064B             
0360+  064B 00          toktyp: 	.db 0			; token type symbol
0361+  064C 00          tok:		.db 0			; current token symbol
0362+  064D 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  0651 00 00 00 00 
0362+  0655 00 00 00 00 
0362+  0659 00 00 00 00 
0362+  065D 00 00 00 00 
0362+  0661 00 00 00 00 
0362+  0665 00 00 00 00 
0362+  0669 00 00 00 00 
0362+  066D 00 00 00 00 
0362+  0671 00 00 00 00 
0362+  0675 00 00 00 00 
0362+  0679 00 00 00 00 
0362+  067D 00 00 00 00 
0362+  0681 00 00 00 00 
0362+  0685 00 00 00 00 
0362+  0689 00 00 00 00 
0362+  068D 00 00 00 00 
0362+  0691 00 00 00 00 
0362+  0695 00 00 00 00 
0362+  0699 00 00 00 00 
0362+  069D 00 00 00 00 
0362+  06A1 00 00 00 00 
0362+  06A5 00 00 00 00 
0362+  06A9 00 00 00 00 
0362+  06AD 00 00 00 00 
0362+  06B1 00 00 00 00 
0362+  06B5 00 00 00 00 
0362+  06B9 00 00 00 00 
0362+  06BD 00 00 00 00 
0362+  06C1 00 00 00 00 
0362+  06C5 00 00 00 00 
0362+  06C9 00 00 00 00 
0362+  06CD 00 00 00 00 
0362+  06D1 00 00 00 00 
0362+  06D5 00 00 00 00 
0362+  06D9 00 00 00 00 
0362+  06DD 00 00 00 00 
0362+  06E1 00 00 00 00 
0362+  06E5 00 00 00 00 
0362+  06E9 00 00 00 00 
0362+  06ED 00 00 00 00 
0362+  06F1 00 00 00 00 
0362+  06F5 00 00 00 00 
0362+  06F9 00 00 00 00 
0362+  06FD 00 00 00 00 
0362+  0701 00 00 00 00 
0362+  0705 00 00 00 00 
0362+  0709 00 00 00 00 
0362+  070D 00 00 00 00 
0362+  0711 00 00 00 00 
0362+  0715 00 00 00 00 
0362+  0719 00 00 00 00 
0362+  071D 00 00 00 00 
0362+  0721 00 00 00 00 
0362+  0725 00 00 00 00 
0362+  0729 00 00 00 00 
0362+  072D 00 00 00 00 
0362+  0731 00 00 00 00 
0362+  0735 00 00 00 00 
0362+  0739 00 00 00 00 
0362+  073D 00 00 00 00 
0362+  0741 00 00 00 00 
0362+  0745 00 00 00 00 
0362+  0749 00 00 00 00 
0029   074D             .include "lib/stdio.asm"
0001+  074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  074D             ; stdio.s
0003+  074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  074D             .include "lib/string.asm"
0001++ 074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 074D             ; string.s
0003++ 074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 074D             
0005++ 074D             
0006++ 074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 074D             ; strrev
0008++ 074D             ; reverse a string
0009++ 074D             ; D = string address
0010++ 074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 074D             ; 01234
0012++ 074D             strrev:
0013++ 074D 4B          	pusha
0014++ 074E 07 94 07    	call strlen	; length in C
0015++ 0751 12          	mov a, c
0016++ 0752 AF 01 00    	cmp a, 1
0017++ 0755 D0 6F 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0758 7D          	dec a
0019++ 0759 FD 4E       	mov si, d	; beginning of string
0020++ 075B FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 075D 59          	add d, a	; end of string
0022++ 075E 12          	mov a, c
0023++ 075F FD 9B       	shr a		; divide by 2
0024++ 0761 39          	mov c, a	; C now counts the steps
0025++ 0762             strrev_L0:
0026++ 0762 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0763 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0764 3E          	mov [d], al	; store left char into right side
0029++ 0765 1B          	mov al, bl
0030++ 0766 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0767 7E          	dec c
0032++ 0768 7F          	dec d
0033++ 0769 C2 00 00    	cmp c, 0
0034++ 076C C7 62 07    	jne strrev_L0
0035++ 076F             strrev_end:
0036++ 076F 4C          	popa
0037++ 0770 09          	ret
0038++ 0771             	
0039++ 0771             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0771             ; strchr
0041++ 0771             ; search string in D for char in AL
0042++ 0771             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0771             strchr:
0044++ 0771             strchr_L0:
0045++ 0771 32          	mov bl, [d]
0046++ 0772 C1 00       	cmp bl, 0
0047++ 0774 C6 7F 07    	je strchr_end
0048++ 0777 BA          	cmp al, bl
0049++ 0778 C6 7F 07    	je strchr_end
0050++ 077B 79          	inc d
0051++ 077C 0A 71 07    	jmp strchr_L0
0052++ 077F             strchr_end:
0053++ 077F 1B          	mov al, bl
0054++ 0780 09          	ret
0055++ 0781             
0056++ 0781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0781             ; strstr
0058++ 0781             ; find sub-string
0059++ 0781             ; str1 in SI
0060++ 0781             ; str2 in DI
0061++ 0781             ; SI points to end of source string
0062++ 0781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0781             strstr:
0064++ 0781 DB          	push al
0065++ 0782 DA          	push d
0066++ 0783 E3          	push di
0067++ 0784             strstr_loop:
0068++ 0784 F3          	cmpsb					; compare a byte of the strings
0069++ 0785 C7 90 07    	jne strstr_ret
0070++ 0788 FC 00 00    	lea d, [di + 0]
0071++ 078B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 078D C7 84 07    	jne strstr_loop				; equal chars but not at end
0073++ 0790             strstr_ret:
0074++ 0790 F0          	pop di
0075++ 0791 E7          	pop d
0076++ 0792 E8          	pop al
0077++ 0793 09          	ret
0078++ 0794             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0794             ; length of null terminated string
0080++ 0794             ; result in C
0081++ 0794             ; pointer in D
0082++ 0794             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0794             strlen:
0084++ 0794 DA          	push d
0085++ 0795 38 00 00    	mov c, 0
0086++ 0798             strlen_L1:
0087++ 0798 BD 00       	cmp byte [d], 0
0088++ 079A C6 A2 07    	je strlen_ret
0089++ 079D 79          	inc d
0090++ 079E 78          	inc c
0091++ 079F 0A 98 07    	jmp strlen_L1
0092++ 07A2             strlen_ret:
0093++ 07A2 E7          	pop d
0094++ 07A3 09          	ret
0095++ 07A4             
0096++ 07A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07A4             ; STRCMP
0098++ 07A4             ; compare two strings
0099++ 07A4             ; str1 in SI
0100++ 07A4             ; str2 in DI
0101++ 07A4             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 07A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07A4             strcmp:
0104++ 07A4 DB          	push al
0105++ 07A5 DA          	push d
0106++ 07A6 E3          	push di
0107++ 07A7 E2          	push si
0108++ 07A8             strcmp_loop:
0109++ 07A8 F3          	cmpsb					; compare a byte of the strings
0110++ 07A9 C7 B4 07    	jne strcmp_ret
0111++ 07AC FB FF FF    	lea d, [si +- 1]
0112++ 07AF BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07B1 C7 A8 07    	jne strcmp_loop				; equal chars but not at end
0114++ 07B4             strcmp_ret:
0115++ 07B4 EF          	pop si
0116++ 07B5 F0          	pop di
0117++ 07B6 E7          	pop d
0118++ 07B7 E8          	pop al
0119++ 07B8 09          	ret
0120++ 07B9             
0121++ 07B9             
0122++ 07B9             ; STRCPY
0123++ 07B9             ; copy null terminated string from SI to DI
0124++ 07B9             ; source in SI
0125++ 07B9             ; destination in DI
0126++ 07B9             strcpy:
0127++ 07B9 E2          	push si
0128++ 07BA E3          	push di
0129++ 07BB DB          	push al
0130++ 07BC             strcpy_L1:
0131++ 07BC F6          	lodsb
0132++ 07BD F7          	stosb
0133++ 07BE B9 00       	cmp al, 0
0134++ 07C0 C7 BC 07    	jne strcpy_L1
0135++ 07C3             strcpy_end:
0136++ 07C3 E8          	pop al
0137++ 07C4 F0          	pop di
0138++ 07C5 EF          	pop si
0139++ 07C6 09          	ret
0140++ 07C7             
0141++ 07C7             ; STRCAT
0142++ 07C7             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07C7             ; source in SI
0144++ 07C7             ; destination in DI
0145++ 07C7             strcat:
0146++ 07C7 E2          	push si
0147++ 07C8 E3          	push di
0148++ 07C9 D7          	push a
0149++ 07CA DA          	push d
0150++ 07CB 50          	mov a, di
0151++ 07CC 3C          	mov d, a
0152++ 07CD             strcat_goto_end_L1:
0153++ 07CD BD 00       	cmp byte[d], 0
0154++ 07CF C6 D6 07    	je strcat_start
0155++ 07D2 79          	inc d
0156++ 07D3 0A CD 07    	jmp strcat_goto_end_L1
0157++ 07D6             strcat_start:
0158++ 07D6 FD 50       	mov di, d
0159++ 07D8             strcat_L1:
0160++ 07D8 F6          	lodsb
0161++ 07D9 F7          	stosb
0162++ 07DA B9 00       	cmp al, 0
0163++ 07DC C7 D8 07    	jne strcat_L1
0164++ 07DF             strcat_end:
0165++ 07DF E7          	pop d
0166++ 07E0 E4          	pop a
0167++ 07E1 F0          	pop di
0168++ 07E2 EF          	pop si
0169++ 07E3 09          	ret
0005+  07E4             
0006+  07E4 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  07E8 34 35 36 37 
0006+  07EC 38 39 41 42 
0006+  07F0 43 44 45 46 
0007+  07F4 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  07F8 1B 5B 48 00 
0008+  07FC             
0009+  07FC 01 00       table_power:.dw 1
0010+  07FE 0A 00       			.dw 10
0011+  0800 64 00       			.dw 100
0012+  0802 E8 03       			.dw 1000
0013+  0804 10 27       			.dw 10000
0014+  0806             
0015+  0806             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0806             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0806             ; ASCII in BL
0018+  0806             ; result in AL
0019+  0806             ; ascii for F = 0100 0110
0020+  0806             ; ascii for 9 = 0011 1001
0021+  0806             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0806             hex_ascii_encode:
0023+  0806 1B          	mov al, bl
0024+  0807 93 40       	test al, $40				; test if letter or number
0025+  0809 C7 0F 08    	jnz hex_letter
0026+  080C 87 0F       	and al, $0F				; get number
0027+  080E 09          	ret
0028+  080F             hex_letter:
0029+  080F 87 0F       	and al, $0F				; get letter
0030+  0811 6A 09       	add al, 9
0031+  0813 09          	ret
0032+  0814             
0033+  0814             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0814             ; ATOI
0035+  0814             ; 2 letter hex string in B
0036+  0814             ; 8bit integer returned in AL
0037+  0814             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0814             atoi:
0039+  0814 D8          	push b
0040+  0815 07 06 08    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0818 30          	mov bl, bh
0042+  0819 DB          	push al					; save a
0043+  081A 07 06 08    	call hex_ascii_encode
0044+  081D EA          	pop bl	
0045+  081E FD 9E 04    	shl al, 4
0046+  0821 8C          	or al, bl
0047+  0822 E5          	pop b
0048+  0823 09          	ret	
0049+  0824             
0050+  0824             
0051+  0824             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0824             ; printf
0053+  0824             ; no need for explanations!
0054+  0824             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0824             printf:
0056+  0824 09          	ret
0057+  0825             
0058+  0825             
0059+  0825             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0825             ; scanf
0061+  0825             ; no need for explanations!
0062+  0825             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0825             scanf:
0064+  0825 09          	ret
0065+  0826             
0066+  0826             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0826             ; ITOA
0068+  0826             ; 8bit value in BL
0069+  0826             ; 2 byte ASCII result in A
0070+  0826             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0826             itoa:
0072+  0826 DA          	push d
0073+  0827 D8          	push b
0074+  0828 A7 00       	mov bh, 0
0075+  082A FD A4 04    	shr bl, 4	
0076+  082D 74          	mov d, b
0077+  082E 1F E4 07    	mov al, [d + s_hex_digits]
0078+  0831 23          	mov ah, al
0079+  0832             	
0080+  0832 E5          	pop b
0081+  0833 D8          	push b
0082+  0834 A7 00       	mov bh, 0
0083+  0836 FD 87 0F    	and bl, $0F
0084+  0839 74          	mov d, b
0085+  083A 1F E4 07    	mov al, [d + s_hex_digits]
0086+  083D E5          	pop b
0087+  083E E7          	pop d
0088+  083F 09          	ret
0089+  0840             
0090+  0840             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0840             ; HEX STRING TO BINARY
0092+  0840             ; di = destination address
0093+  0840             ; si = source
0094+  0840             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0840             hex_to_int:
0096+  0840             hex_to_int_L1:
0097+  0840 F6          	lodsb					; load from [SI] to AL
0098+  0841 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0843 C6 50 08    	jz hex_to_int_ret
0100+  0846 36          	mov bh, al
0101+  0847 F6          	lodsb
0102+  0848 2F          	mov bl, al
0103+  0849 07 14 08    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  084C F7          	stosb					; store AL to [DI]
0105+  084D 0A 40 08    	jmp hex_to_int_L1
0106+  0850             hex_to_int_ret:
0107+  0850 09          	ret		
0108+  0851             
0109+  0851             
0110+  0851             
0111+  0851             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0851             ; GETCHAR
0113+  0851             ; char in ah
0114+  0851             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0851             getchar:
0116+  0851 DB          	push al
0117+  0852             getchar_retry:
0118+  0852 FD 0C       	sti
0119+  0854 19 01       	mov al, 1
0120+  0856 05 03       	syscall sys_io			; receive in AH
0121+  0858 B9 00       	cmp al, 0			; check if any char was receive
0122+  085A C6 52 08    	je getchar_retry
0123+  085D E8          	pop al
0124+  085E 09          	ret
0125+  085F             
0126+  085F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  085F             ; PUTCHAR
0128+  085F             ; char in ah
0129+  085F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  085F             putchar:
0131+  085F D7          	push a
0132+  0860 19 00       	mov al, 0
0133+  0862 05 03       	syscall sys_io			; char in AH
0134+  0864 E4          	pop a
0135+  0865 09          	ret
0136+  0866             
0137+  0866             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0866             ;; INPUT A STRING
0139+  0866             ;; terminates with null
0140+  0866             ;; pointer in D
0141+  0866             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0866             gets:
0143+  0866 D7          	push a
0144+  0867 DA          	push d
0145+  0868             gets_loop:
0146+  0868 FD 0C       	sti
0147+  086A 19 01       	mov al, 1
0148+  086C 05 03       	syscall sys_io			; receive in AH
0149+  086E B9 00       	cmp al, 0				; check error code (AL)
0150+  0870 C6 68 08    	je gets_loop			; if no char received, retry
0151+  0873             
0152+  0873 76 1B       	cmp ah, 27
0153+  0875 C6 96 08    	je gets_telnet_escape
0154+  0878 76 0A       	cmp ah, $0A				; LF
0155+  087A C6 EF 08    	je gets_end
0156+  087D 76 0D       	cmp ah, $0D				; CR
0157+  087F C6 EF 08    	je gets_end
0158+  0882 76 5C       	cmp ah, $5C				; '\\'
0159+  0884 C6 C6 08    	je gets_escape
0160+  0887             	
0161+  0887 76 08       	cmp ah, $08			; check for backspace
0162+  0889 C6 92 08    	je gets_backspace
0163+  088C             
0164+  088C 1A          	mov al, ah
0165+  088D 3E          	mov [d], al
0166+  088E 79          	inc d
0167+  088F 0A 68 08    	jmp gets_loop
0168+  0892             gets_backspace:
0169+  0892 7F          	dec d
0170+  0893 0A 68 08    	jmp gets_loop
0171+  0896             gets_telnet_escape:
0172+  0896 FD 0C       	sti
0173+  0898 19 01       	mov al, 1
0174+  089A 05 03       	syscall sys_io				; receive in AH without echo
0175+  089C B9 00       	cmp al, 0					; check error code (AL)
0176+  089E C6 96 08    	je gets_telnet_escape		; if no char received, retry
0177+  08A1 76 5B       	cmp ah, '['
0178+  08A3 C7 68 08    	jne gets_loop
0179+  08A6             gets_telnet_escape_phase2:
0180+  08A6 FD 0C       	sti
0181+  08A8 19 01       	mov al, 1
0182+  08AA 05 03       	syscall sys_io					; receive in AH without echo
0183+  08AC B9 00       	cmp al, 0						; check error code (AL)
0184+  08AE C6 A6 08    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  08B1 76 44       	cmp ah, 'D'
0186+  08B3 C6 BE 08    	je gets_left_arrow
0187+  08B6 76 43       	cmp ah, 'C'
0188+  08B8 C6 C2 08    	je gets_right_arrow
0189+  08BB 0A 68 08    	jmp gets_loop
0190+  08BE             gets_left_arrow:
0191+  08BE 7F          	dec d
0192+  08BF 0A 68 08    	jmp gets_loop
0193+  08C2             gets_right_arrow:
0194+  08C2 79          	inc d
0195+  08C3 0A 68 08    	jmp gets_loop
0196+  08C6             gets_escape:
0197+  08C6 FD 0C       	sti
0198+  08C8 19 01       	mov al, 1
0199+  08CA 05 03       	syscall sys_io			; receive in AH
0200+  08CC B9 00       	cmp al, 0				; check error code (AL)
0201+  08CE C6 C6 08    	je gets_escape			; if no char received, retry
0202+  08D1 76 6E       	cmp ah, 'n'
0203+  08D3 C6 E1 08    	je gets_LF
0204+  08D6 76 72       	cmp ah, 'r'
0205+  08D8 C6 E8 08    	je gets_CR
0206+  08DB 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  08DC 3E          	mov [d], al
0208+  08DD 79          	inc d
0209+  08DE 0A 68 08    	jmp gets_loop
0210+  08E1             gets_LF:
0211+  08E1 19 0A       	mov al, $0A
0212+  08E3 3E          	mov [d], al
0213+  08E4 79          	inc d
0214+  08E5 0A 68 08    	jmp gets_loop
0215+  08E8             gets_CR:
0216+  08E8 19 0D       	mov al, $0D
0217+  08EA 3E          	mov [d], al
0218+  08EB 79          	inc d
0219+  08EC 0A 68 08    	jmp gets_loop
0220+  08EF             gets_end:
0221+  08EF 19 00       	mov al, 0
0222+  08F1 3E          	mov [d], al				; terminate string
0223+  08F2 E7          	pop d
0224+  08F3 E4          	pop a
0225+  08F4 09          	ret
0226+  08F5             
0227+  08F5             
0228+  08F5             
0229+  08F5             
0230+  08F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  08F5             ;; INPUT TEXT
0232+  08F5             ;; terminated with CTRL+D
0233+  08F5             ;; pointer in D
0234+  08F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  08F5             gettxt:
0236+  08F5 D7          	push a
0237+  08F6 DA          	push d
0238+  08F7             gettxt_loop:
0239+  08F7 19 01       	mov al, 1
0240+  08F9 05 03       	syscall sys_io			; receive in AH
0241+  08FB B9 00       	cmp al, 0				; check error code (AL)
0242+  08FD C6 F7 08    	je gettxt_loop		; if no char received, retry
0243+  0900 76 04       	cmp ah, 4			; EOT
0244+  0902 C6 40 09    	je gettxt_end
0245+  0905 76 08       	cmp ah, $08			; check for backspace
0246+  0907 C6 3C 09    	je gettxt_backspace
0247+  090A 76 5C       	cmp ah, $5C				; '\\'
0248+  090C C6 15 09    	je gettxt_escape
0249+  090F 1A          	mov al, ah
0250+  0910 3E          	mov [d], al
0251+  0911 79          	inc d
0252+  0912 0A F7 08    	jmp gettxt_loop
0253+  0915             gettxt_escape:
0254+  0915 19 01       	mov al, 1
0255+  0917 05 03       	syscall sys_io			; receive in AH
0256+  0919 B9 00       	cmp al, 0				; check error code (AL)
0257+  091B C6 15 09    	je gettxt_escape		; if no char received, retry
0258+  091E 76 6E       	cmp ah, 'n'
0259+  0920 C6 2E 09    	je gettxt_LF
0260+  0923 76 72       	cmp ah, 'r'
0261+  0925 C6 35 09    	je gettxt_CR
0262+  0928 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0929 3E          	mov [d], al
0264+  092A 79          	inc d
0265+  092B 0A F7 08    	jmp gettxt_loop
0266+  092E             gettxt_LF:
0267+  092E 19 0A       	mov al, $0A
0268+  0930 3E          	mov [d], al
0269+  0931 79          	inc d
0270+  0932 0A F7 08    	jmp gettxt_loop
0271+  0935             gettxt_CR:
0272+  0935 19 0D       	mov al, $0D
0273+  0937 3E          	mov [d], al
0274+  0938 79          	inc d
0275+  0939 0A F7 08    	jmp gettxt_loop
0276+  093C             gettxt_backspace:
0277+  093C 7F          	dec d
0278+  093D 0A F7 08    	jmp gettxt_loop
0279+  0940             gettxt_end:
0280+  0940 19 00       	mov al, 0
0281+  0942 3E          	mov [d], al				; terminate string
0282+  0943 E7          	pop d
0283+  0944 E4          	pop a
0284+  0945 09          	ret
0285+  0946             
0286+  0946             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0946             ; PRINT NEW LINE
0288+  0946             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0946             printnl:
0290+  0946 D7          	push a
0291+  0947 10 00 0A    	mov a, $0A00
0292+  094A 05 03       	syscall sys_io
0293+  094C 10 00 0D    	mov a, $0D00
0294+  094F 05 03       	syscall sys_io
0295+  0951 E4          	pop a
0296+  0952 09          	ret
0297+  0953             
0298+  0953             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0953             ; strtoint
0300+  0953             ; 4 digit hex string number in d
0301+  0953             ; integer returned in A
0302+  0953             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0953             strtointx:
0304+  0953 D8          	push b
0305+  0954 32          	mov bl, [d]
0306+  0955 37          	mov bh, bl
0307+  0956 33 01 00    	mov bl, [d + 1]
0308+  0959 07 14 08    	call atoi				; convert to int in AL
0309+  095C 23          	mov ah, al				; move to AH
0310+  095D 33 02 00    	mov bl, [d + 2]
0311+  0960 37          	mov bh, bl
0312+  0961 33 03 00    	mov bl, [d + 3]
0313+  0964 07 14 08    	call atoi				; convert to int in AL
0314+  0967 E5          	pop b
0315+  0968 09          	ret
0316+  0969             
0317+  0969             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0969             ; strtoint
0319+  0969             ; 5 digit base10 string number in d
0320+  0969             ; integer returned in A
0321+  0969             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0969             strtoint:
0323+  0969 E2          	push si
0324+  096A D8          	push b
0325+  096B D9          	push c
0326+  096C DA          	push d
0327+  096D 07 94 07    	call strlen			; get string length in C
0328+  0970 7E          	dec c
0329+  0971 FD 4E       	mov si, d
0330+  0973 12          	mov a, c
0331+  0974 FD 99       	shl a
0332+  0976 3B FC 07    	mov d, table_power
0333+  0979 59          	add d, a
0334+  097A 38 00 00    	mov c, 0
0335+  097D             strtoint_L0:
0336+  097D F6          	lodsb			; load ASCII to al
0337+  097E B9 00       	cmp al, 0
0338+  0980 C6 93 09    	je strtoint_end
0339+  0983 6F 30       	sub al, $30		; make into integer
0340+  0985 22 00       	mov ah, 0
0341+  0987 2A          	mov b, [d]
0342+  0988 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0989 11          	mov a, b
0344+  098A 28          	mov b, c
0345+  098B 54          	add a, b
0346+  098C 39          	mov c, a
0347+  098D 63 02 00    	sub d, 2
0348+  0990 0A 7D 09    	jmp strtoint_L0
0349+  0993             strtoint_end:
0350+  0993 12          	mov a, c
0351+  0994 E7          	pop d
0352+  0995 E6          	pop c
0353+  0996 E5          	pop b
0354+  0997 EF          	pop si
0355+  0998 09          	ret
0356+  0999             
0357+  0999             
0358+  0999             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0999             ; PRINT NULL TERMINATED STRING
0360+  0999             ; pointer in D
0361+  0999             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0999             puts:
0363+  0999 D7          	push a
0364+  099A DA          	push d
0365+  099B             puts_L1:
0366+  099B 1E          	mov al, [d]
0367+  099C B9 00       	cmp al, 0
0368+  099E C6 AA 09    	jz puts_END
0369+  09A1 23          	mov ah, al
0370+  09A2 19 00       	mov al, 0
0371+  09A4 05 03       	syscall sys_io
0372+  09A6 79          	inc d
0373+  09A7 0A 9B 09    	jmp puts_L1
0374+  09AA             puts_END:
0375+  09AA E7          	pop d
0376+  09AB E4          	pop a
0377+  09AC 09          	ret
0378+  09AD             
0379+  09AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  09AD             ; PRINT N SIZE STRING
0381+  09AD             ; pointer in D
0382+  09AD             ; size in C
0383+  09AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  09AD             putsn:
0385+  09AD DB          	push al
0386+  09AE DA          	push d
0387+  09AF D9          	push c
0388+  09B0             putsn_L0:
0389+  09B0 1E          	mov al, [d]
0390+  09B1 23          	mov ah, al
0391+  09B2 19 00       	mov al, 0
0392+  09B4 05 03       	syscall sys_io
0393+  09B6 79          	inc d
0394+  09B7 7E          	dec c	
0395+  09B8 C2 00 00    	cmp c, 0
0396+  09BB C7 B0 09    	jne putsn_L0
0397+  09BE             putsn_end:
0398+  09BE E6          	pop c
0399+  09BF E7          	pop d
0400+  09C0 E8          	pop al
0401+  09C1 09          	ret
0402+  09C2             
0403+  09C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  09C2             ; print 16bit decimal number
0405+  09C2             ; input number in A
0406+  09C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  09C2             print_u16d:
0408+  09C2 D7          	push a
0409+  09C3 D8          	push b
0410+  09C4 26 10 27    	mov b, 10000
0411+  09C7 AE          	div a, b			; get 10000's coeff.
0412+  09C8 07 EA 09    	call print_number
0413+  09CB 11          	mov a, b
0414+  09CC 26 E8 03    	mov b, 1000
0415+  09CF AE          	div a, b			; get 1000's coeff.
0416+  09D0 07 EA 09    	call print_number
0417+  09D3 11          	mov a, b
0418+  09D4 26 64 00    	mov b, 100
0419+  09D7 AE          	div a, b
0420+  09D8 07 EA 09    	call print_number
0421+  09DB 11          	mov a, b
0422+  09DC 26 0A 00    	mov b, 10
0423+  09DF AE          	div a, b
0424+  09E0 07 EA 09    	call print_number
0425+  09E3 1B          	mov al, bl			; 1's coeff in bl
0426+  09E4 07 EA 09    	call print_number
0427+  09E7 E5          	pop b
0428+  09E8 E4          	pop a
0429+  09E9 09          	ret
0430+  09EA             
0431+  09EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0432+  09EA             ; print AL
0433+  09EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0434+  09EA             print_number:
0435+  09EA 6A 30       	add al, $30
0436+  09EC 23          	mov ah, al
0437+  09ED 07 5F 08    	call putchar
0438+  09F0 09          	ret
0439+  09F1             
0440+  09F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0441+  09F1             ; PRINT 16BIT HEX INTEGER
0442+  09F1             ; integer value in reg B
0443+  09F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0444+  09F1             print_u16x:
0445+  09F1 D7          	push a
0446+  09F2 D8          	push b
0447+  09F3 DD          	push bl
0448+  09F4 30          	mov bl, bh
0449+  09F5 07 26 08    	call itoa				; convert bh to char in A
0450+  09F8 2F          	mov bl, al				; save al
0451+  09F9 19 00       	mov al, 0
0452+  09FB 05 03       	syscall sys_io				; display AH
0453+  09FD 24          	mov ah, bl				; retrieve al
0454+  09FE 19 00       	mov al, 0
0455+  0A00 05 03       	syscall sys_io				; display AL
0456+  0A02             
0457+  0A02 EA          	pop bl
0458+  0A03 07 26 08    	call itoa				; convert bh to char in A
0459+  0A06 2F          	mov bl, al				; save al
0460+  0A07 19 00       	mov al, 0
0461+  0A09 05 03       	syscall sys_io				; display AH
0462+  0A0B 24          	mov ah, bl				; retrieve al
0463+  0A0C 19 00       	mov al, 0
0464+  0A0E 05 03       	syscall sys_io				; display AL
0465+  0A10             
0466+  0A10 E5          	pop b
0467+  0A11 E4          	pop a
0468+  0A12 09          	ret
0469+  0A13             
0470+  0A13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0471+  0A13             ; INPUT 16BIT HEX INTEGER
0472+  0A13             ; read 16bit integer into A
0473+  0A13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0474+  0A13             scan_u16x:
0475+  0A13 F8 10 00    	enter 16
0476+  0A16 D8          	push b
0477+  0A17 DA          	push d
0478+  0A18             
0479+  0A18 FA F1 FF    	lea d, [bp + -15]
0480+  0A1B 07 66 08    	call gets				; get number
0481+  0A1E             
0482+  0A1E 32          	mov bl, [d]
0483+  0A1F 37          	mov bh, bl
0484+  0A20 33 01 00    	mov bl, [d + 1]
0485+  0A23 07 14 08    	call atoi				; convert to int in AL
0486+  0A26 23          	mov ah, al				; move to AH
0487+  0A27             
0488+  0A27 33 02 00    	mov bl, [d + 2]
0489+  0A2A 37          	mov bh, bl
0490+  0A2B 33 03 00    	mov bl, [d + 3]
0491+  0A2E 07 14 08    	call atoi				; convert to int in AL
0492+  0A31             
0493+  0A31 E7          	pop d
0494+  0A32 E5          	pop b
0495+  0A33 F9          	leave
0496+  0A34 09          	ret
0497+  0A35             
0498+  0A35             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0499+  0A35             ; PRINT 8bit HEX INTEGER
0500+  0A35             ; integer value in reg bl
0501+  0A35             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0502+  0A35             print_u8x:
0503+  0A35 D7          	push a
0504+  0A36 DD          	push bl
0505+  0A37             
0506+  0A37 07 26 08    	call itoa				; convert bl to char in A
0507+  0A3A 2F          	mov bl, al				; save al
0508+  0A3B 19 00       	mov al, 0
0509+  0A3D 05 03       	syscall sys_io				; display AH
0510+  0A3F 24          	mov ah, bl				; retrieve al
0511+  0A40 19 00       	mov al, 0
0512+  0A42 05 03       	syscall sys_io				; display AL
0513+  0A44             
0514+  0A44 EA          	pop bl
0515+  0A45 E4          	pop a
0516+  0A46 09          	ret
0517+  0A47             
0518+  0A47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0519+  0A47             ; print 8bit decimal unsigned number
0520+  0A47             ; input number in AL
0521+  0A47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0522+  0A47             print_u8d:
0523+  0A47 D7          	push a
0524+  0A48 D8          	push b
0525+  0A49             
0526+  0A49 22 00       	mov ah, 0
0527+  0A4B 26 64 00    	mov b, 100
0528+  0A4E AE          	div a, b
0529+  0A4F D8          	push b			; save remainder
0530+  0A50 B9 00       	cmp al, 0
0531+  0A52 C6 5C 0A    	je skip100
0532+  0A55 6A 30       	add al, $30
0533+  0A57 23          	mov ah, al
0534+  0A58 19 00       	mov al, 0
0535+  0A5A 05 03       	syscall sys_io	; print coeff
0536+  0A5C             skip100:
0537+  0A5C E4          	pop a
0538+  0A5D 22 00       	mov ah, 0
0539+  0A5F 26 0A 00    	mov b, 10
0540+  0A62 AE          	div a, b
0541+  0A63 D8          	push b			; save remainder
0542+  0A64 B9 00       	cmp al, 0
0543+  0A66 C6 70 0A    	je skip10
0544+  0A69 6A 30       	add al, $30
0545+  0A6B 23          	mov ah, al
0546+  0A6C 19 00       	mov al, 0
0547+  0A6E 05 03       	syscall sys_io	; print coeff
0548+  0A70             skip10:
0549+  0A70 E4          	pop a
0550+  0A71 1B          	mov al, bl
0551+  0A72 6A 30       	add al, $30
0552+  0A74 23          	mov ah, al
0553+  0A75 19 00       	mov al, 0
0554+  0A77 05 03       	syscall sys_io	; print coeff
0555+  0A79 E5          	pop b
0556+  0A7A E4          	pop a
0557+  0A7B 09          	ret
0558+  0A7C             
0559+  0A7C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0560+  0A7C             ; INPUT 8BIT HEX INTEGER
0561+  0A7C             ; read 8bit integer into AL
0562+  0A7C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0563+  0A7C             scan_u8x:
0564+  0A7C F8 04 00    	enter 4
0565+  0A7F D8          	push b
0566+  0A80 DA          	push d
0567+  0A81             
0568+  0A81 FA FD FF    	lea d, [bp + -3]
0569+  0A84 07 66 08    	call gets				; get number
0570+  0A87             
0571+  0A87 32          	mov bl, [d]
0572+  0A88 37          	mov bh, bl
0573+  0A89 33 01 00    	mov bl, [d + 1]
0574+  0A8C 07 14 08    	call atoi				; convert to int in AL
0575+  0A8F             
0576+  0A8F E7          	pop d
0577+  0A90 E5          	pop b
0578+  0A91 F9          	leave
0579+  0A92 09          	ret
0580+  0A93             
0581+  0A93             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0582+  0A93             ; input decimal number
0583+  0A93             ; result in A
0584+  0A93             ; 655'\0'
0585+  0A93             ; low--------high
0586+  0A93             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0A93             scan_u16d:
0588+  0A93 F8 08 00    	enter 8
0589+  0A96 E2          	push si
0590+  0A97 D8          	push b
0591+  0A98 D9          	push c
0592+  0A99 DA          	push d
0593+  0A9A FA F9 FF    	lea d, [bp +- 7]
0594+  0A9D 07 66 08    	call gets
0595+  0AA0 07 94 07    	call strlen			; get string length in C
0596+  0AA3 7E          	dec c
0597+  0AA4 FD 4E       	mov si, d
0598+  0AA6 12          	mov a, c
0599+  0AA7 FD 99       	shl a
0600+  0AA9 3B FC 07    	mov d, table_power
0601+  0AAC 59          	add d, a
0602+  0AAD 38 00 00    	mov c, 0
0603+  0AB0             mul_loop:
0604+  0AB0 F6          	lodsb			; load ASCII to al
0605+  0AB1 B9 00       	cmp al, 0
0606+  0AB3 C6 C6 0A    	je mul_exit
0607+  0AB6 6F 30       	sub al, $30		; make into integer
0608+  0AB8 22 00       	mov ah, 0
0609+  0ABA 2A          	mov b, [d]
0610+  0ABB AC          	mul a, b			; result in B since it fits in 16bits
0611+  0ABC 11          	mov a, b
0612+  0ABD 28          	mov b, c
0613+  0ABE 54          	add a, b
0614+  0ABF 39          	mov c, a
0615+  0AC0 63 02 00    	sub d, 2
0616+  0AC3 0A B0 0A    	jmp mul_loop
0617+  0AC6             mul_exit:
0618+  0AC6 12          	mov a, c
0619+  0AC7 E7          	pop d
0620+  0AC8 E6          	pop c
0621+  0AC9 E5          	pop b
0622+  0ACA EF          	pop si
0623+  0ACB F9          	leave
0624+  0ACC 09          	ret
0030   0ACD             .include "lib/ctype.asm"
0001+  0ACD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0ACD             ; ctype.s
0003+  0ACD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0ACD             
0005+  0ACD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0ACD             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0ACD             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0ACD             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0ACD             ;; characters are supported.
0010+  0ACD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0ACD             ;; isalnum 
0012+  0ACD             ;; isalpha 
0013+  0ACD             ;; islower 
0014+  0ACD             ;; isupper 
0015+  0ACD             ;; isdigit 
0016+  0ACD             ;; isxdigit
0017+  0ACD             ;; iscntrl 
0018+  0ACD             ;; isgraph 
0019+  0ACD             ;; isspace 
0020+  0ACD             ;; isblank 
0021+  0ACD             ;; isprint 
0022+  0ACD             ;; ispunct 
0023+  0ACD             ;; tolower 
0024+  0ACD             ;; toupper
0025+  0ACD             
0026+  0ACD             
0027+  0ACD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0ACD             ;; IS ALPHANUMERIC
0029+  0ACD             ;; sets ZF according with result
0030+  0ACD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0ACD             isalnum:
0032+  0ACD 07 EA 0A    	call isalpha
0033+  0AD0 C6 D6 0A    	je isalnum_exit
0034+  0AD3 07 D7 0A    	call isdigit
0035+  0AD6             isalnum_exit:
0036+  0AD6 09          	ret	
0037+  0AD7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0AD7             ;; IS DIGIT
0039+  0AD7             ;; sets ZF according with result
0040+  0AD7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0AD7             isdigit:
0042+  0AD7 DB          	push al
0043+  0AD8 B9 30       	cmp al, '0'
0044+  0ADA C8 E6 0A    	jlu isdigit_false
0045+  0ADD B9 39       	cmp al, '9'
0046+  0ADF D1 E6 0A    	jgu isdigit_false
0047+  0AE2 87 00       	and al, 0	; set ZF
0048+  0AE4 E8          	pop al
0049+  0AE5 09          	ret
0050+  0AE6             isdigit_false:
0051+  0AE6 8B 01       	or al, 1	; clear ZF
0052+  0AE8 E8          	pop al
0053+  0AE9 09          	ret	
0054+  0AEA             	
0055+  0AEA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0AEA             ;; IS ALPHA
0057+  0AEA             ;; sets ZF according with result
0058+  0AEA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0AEA             isalpha:
0060+  0AEA DB          	push al
0061+  0AEB B9 5F       	cmp al, '_'
0062+  0AED C6 0D 0B    	je isalpha_true
0063+  0AF0 B9 2E       	cmp al, '.'
0064+  0AF2 C6 0D 0B    	je isalpha_true
0065+  0AF5 B9 41       	cmp al, 'A'
0066+  0AF7 C8 09 0B    	jlu isalpha_false
0067+  0AFA B9 7A       	cmp al, 'z'
0068+  0AFC D1 09 0B    	jgu isalpha_false
0069+  0AFF B9 5A       	cmp al, 'Z'
0070+  0B01 D0 0D 0B    	jleu isalpha_true
0071+  0B04 B9 61       	cmp al, 'a'
0072+  0B06 C9 0D 0B    	jgeu isalpha_true
0073+  0B09             isalpha_false:
0074+  0B09 8B 01       	or al, 1	; clear ZF
0075+  0B0B E8          	pop al
0076+  0B0C 09          	ret
0077+  0B0D             isalpha_true:
0078+  0B0D 87 00       	and al, 0	; set ZF
0079+  0B0F E8          	pop al
0080+  0B10 09          	ret
0081+  0B11             
0082+  0B11             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B11             ;; IS PATH-ALPHA
0084+  0B11             ;; sets ZF according with result
0085+  0B11             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B11             ispath:
0087+  0B11 DB          	push al
0088+  0B12 07 D7 0A    	call isdigit
0089+  0B15 C6 3F 0B    	je ispath_true
0090+  0B18 B9 5F       	cmp al, '_'
0091+  0B1A C6 3F 0B    	je ispath_true
0092+  0B1D B9 2F       	cmp al, '/'
0093+  0B1F C6 3F 0B    	je ispath_true
0094+  0B22 B9 2E       	cmp al, '.'
0095+  0B24 C6 3F 0B    	je ispath_true
0096+  0B27 B9 41       	cmp al, 'A'
0097+  0B29 C8 3B 0B    	jlu ispath_false
0098+  0B2C B9 7A       	cmp al, 'z'
0099+  0B2E D1 3B 0B    	jgu ispath_false
0100+  0B31 B9 5A       	cmp al, 'Z'
0101+  0B33 D0 3F 0B    	jleu ispath_true
0102+  0B36 B9 61       	cmp al, 'a'
0103+  0B38 C9 3F 0B    	jgeu ispath_true
0104+  0B3B             ispath_false:
0105+  0B3B 8B 01       	or al, 1	; clear ZF
0106+  0B3D E8          	pop al
0107+  0B3E 09          	ret
0108+  0B3F             ispath_true:
0109+  0B3F 87 00       	and al, 0	; set ZF
0110+  0B41 E8          	pop al
0111+  0B42 09          	ret
0112+  0B43             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B43             ;; IS SPACE
0114+  0B43             ;; sets ZF according with result
0115+  0B43             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B43             isspace:
0117+  0B43 B9 20       	cmp al, $20		; ' '
0118+  0B45 C6 59 0B    	je isspace_exit
0119+  0B48 B9 09       	cmp al, $09		; '\t'
0120+  0B4A C6 59 0B    	je isspace_exit
0121+  0B4D B9 0A       	cmp al, $0A		; '\n'
0122+  0B4F C6 59 0B    	je isspace_exit
0123+  0B52 B9 0D       	cmp al, $0D		; '\r'
0124+  0B54 C6 59 0B    	je isspace_exit
0125+  0B57 B9 0B       	cmp al, $0B		; '\v'
0126+  0B59             isspace_exit:
0127+  0B59 09          	ret	
0128+  0B5A             
0129+  0B5A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B5A             ; TO LOWER
0131+  0B5A             ; input in AL
0132+  0B5A             ; output in AL
0133+  0B5A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B5A             to_lower:
0135+  0B5A B9 5A       	cmp al, 'Z'
0136+  0B5C D1 61 0B    	jgu to_lower_ret
0137+  0B5F 6A 20       	add al, $20				; convert to lower case
0138+  0B61             to_lower_ret:
0139+  0B61 09          	ret
0140+  0B62             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B62             ; TO UPPER
0142+  0B62             ; input in AL
0143+  0B62             ; output in AL
0144+  0B62             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B62             to_upper:
0146+  0B62 B9 61       	cmp al, 'a'
0147+  0B64 C8 69 0B    	jlu to_upper_ret
0148+  0B67 6F 20       	sub al, $20			; convert to upper case
0149+  0B69             to_upper_ret:
0150+  0B69 09          	ret
0151+  0B6A             
0031   0B6A             
0032   0B6A             .end
0033   0B6A             
0034   0B6A             
tasm: Number of errors = 0
