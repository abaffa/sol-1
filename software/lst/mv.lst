0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0400             .org PROC_TEXT_ORG			; origin at 1024
0004   0400             
0005   0400             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006   0400             ;; mv - move / change file name
0007   0400             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008   0400             cmd_mv:
0009   0400 10 00 00    	mov a, 0
0010   0403 42 55 06    	mov [prog], a
0011   0406 07 B6 04    	call get_token
0012   0409 FD 4D 59 06 	mov si, tokstr
0013   040D FD 4F 7A 0B 	mov di, transient_data
0014   0411 07 C5 07    	call strcpy
0015   0414             	
0016   0414 07 B6 04    	call get_token
0017   0417 FD 4D 59 06 	mov si, tokstr
0018   041B FD 4F FA 0B 	mov di, transient_data + 128
0019   041F 07 C5 07    	call strcpy
0020   0422             
0021   0422 3B 7A 0B    	mov d, transient_data
0022   0425 19 0F       	mov al, 15	; mv command
0023   0427 05 04       	syscall sys_fileio
0024   0429             	
0025   0429 05 0B       	syscall sys_terminate_proc
0026   042B             
0027   042B             
0028   042B             .include "token.asm"
0001+  042B             TOKTYP_IDENTIFIER	.equ 0
0002+  042B             TOKTYP_KEYWORD		.equ 1
0003+  042B             TOKTYP_DELIMITER	.equ 2
0004+  042B             TOKTYP_STRING		.equ 3
0005+  042B             TOKTYP_CHAR			.equ 4
0006+  042B             TOKTYP_NUMERIC		.equ 5
0007+  042B             TOKTYP_END			.equ 6
0008+  042B             
0009+  042B             TOK_NULL			.equ 0
0010+  042B             TOK_FSLASH			.equ 1
0011+  042B             TOK_TIMES 			.equ 2
0012+  042B             TOK_PLUS 			.equ 3
0013+  042B             TOK_MINUS 			.equ 4
0014+  042B             TOK_DOT				.equ 5
0015+  042B             TOK_SEMI			.equ 6
0016+  042B             TOK_ANGLE			.equ 7
0017+  042B             TOK_TILDE			.equ 8
0018+  042B             TOK_EQUAL			.equ 9
0019+  042B             TOK_COLON			.equ 10
0020+  042B             TOK_COMMA			.equ 11
0021+  042B             
0022+  042B             TOK_END				.equ 20
0023+  042B             
0024+  042B             
0025+  042B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  042B             ;; read a full command argment from shell input buffer
0027+  042B             ;; argument is written into tokstr
0028+  042B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  042B             get_arg:
0030+  042B D7          	push a
0031+  042C E2          	push si
0032+  042D E3          	push di
0033+  042E 19 00       	mov al, 0
0034+  0430 3D 59 06    	mov [tokstr], al			; nullify tokstr string
0035+  0433 14 55 06    	mov a, [prog]
0036+  0436 4D          	mov si, a
0037+  0437 FD 4F 59 06 	mov di, tokstr
0038+  043B             get_arg_skip_spaces:
0039+  043B F6          	lodsb
0040+  043C 07 53 0B    	call isspace
0041+  043F C6 3B 04    	je get_arg_skip_spaces
0042+  0442             get_arg_L0:
0043+  0442 B9 3B       	cmp al, $3B				; check if is ';'
0044+  0444 C6 51 04    	je get_arg_end
0045+  0447 B9 00       	cmp al, 0
0046+  0449 C6 51 04    	je get_arg_end			; check if end of input
0047+  044C F7          	stosb
0048+  044D F6          	lodsb
0049+  044E 0A 42 04    	jmp get_arg_L0
0050+  0451             get_arg_end:
0051+  0451 19 00       	mov al, 0
0052+  0453 F7          	stosb
0053+  0454 D5 01 00    	sub si, 1
0054+  0457 4E          	mov a, si
0055+  0458 42 55 06    	mov [prog], a		; update pointer
0056+  045B F0          	pop di
0057+  045C EF          	pop si
0058+  045D E4          	pop a
0059+  045E 09          	ret
0060+  045F             
0061+  045F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  045F             ;; read a path formation from shell input buffer
0063+  045F             ;; path is written into tokstr
0064+  045F             ;; /usr/bin
0065+  045F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  045F             get_path:
0067+  045F D7          	push a
0068+  0460 E2          	push si
0069+  0461 E3          	push di
0070+  0462 19 00       	mov al, 0
0071+  0464 3D 59 06    	mov [tokstr], al			; nullify tokstr string
0072+  0467 14 55 06    	mov a, [prog]
0073+  046A 4D          	mov si, a
0074+  046B FD 4F 59 06 	mov di, tokstr
0075+  046F             get_path_skip_spaces:
0076+  046F F6          	lodsb
0077+  0470 07 53 0B    	call isspace
0078+  0473 C6 6F 04    	je get_path_skip_spaces
0079+  0476             get_path_is_pathchar:
0080+  0476 F7          	stosb
0081+  0477 F6          	lodsb
0082+  0478 07 DD 0A    	call isalnum			;check if is alphanumeric
0083+  047B C6 76 04    	je get_path_is_pathchar
0084+  047E B9 2F       	cmp al, '/'				; check if is '/'
0085+  0480 C6 76 04    	je get_path_is_pathchar
0086+  0483 19 00       	mov al, 0
0087+  0485 F7          	stosb
0088+  0486 D5 01 00    	sub si, 1
0089+  0489 4E          	mov a, si
0090+  048A 42 55 06    	mov [prog], a		; update pointer
0091+  048D             get_path_end:
0092+  048D F0          	pop di
0093+  048E EF          	pop si
0094+  048F E4          	pop a
0095+  0490 09          	ret
0096+  0491             
0097+  0491             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0491             ;; read a line
0099+  0491             ;; line is written into tokstr
0100+  0491             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0491             get_line:
0102+  0491 D7          	push a
0103+  0492 E2          	push si
0104+  0493 E3          	push di
0105+  0494 19 00       	mov al, 0
0106+  0496 3D 59 06    	mov [tokstr], al			; nullify tokstr string
0107+  0499 14 55 06    	mov a, [prog]
0108+  049C 4D          	mov si, a
0109+  049D FD 4F 59 06 	mov di, tokstr
0110+  04A1             get_line_L0:
0111+  04A1 F6          	lodsb
0112+  04A2 B9 0A       	cmp al, $0A		; check for new line
0113+  04A4 C6 AB 04    	je get_line_exit
0114+  04A7 F7          	stosb
0115+  04A8 0A A1 04    	jmp get_line_L0
0116+  04AB             get_line_exit:
0117+  04AB 19 00       	mov al, 0
0118+  04AD F7          	stosb
0119+  04AE 4E          	mov a, si
0120+  04AF 42 55 06    	mov [prog], a		; update pointer
0121+  04B2 F0          	pop di
0122+  04B3 EF          	pop si
0123+  04B4 E4          	pop a
0124+  04B5 09          	ret
0125+  04B6             
0126+  04B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  04B6             ;; token parser
0128+  04B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  04B6             get_token:
0130+  04B6 D7          	push a
0131+  04B7 DA          	push d
0132+  04B8 E2          	push si
0133+  04B9 E3          	push di
0134+  04BA 19 00       	mov al, 0
0135+  04BC 3D 59 06    	mov [tokstr], al			; nullify tokstr string
0136+  04BF 19 00       	mov al, TOK_NULL
0137+  04C1 3D 58 06    	mov [tok], al				; nullify token
0138+  04C4 14 55 06    	mov a, [prog]
0139+  04C7 4D          	mov si, a
0140+  04C8 FD 4F 59 06 	mov di, tokstr
0141+  04CC             get_tok_skip_spaces:
0142+  04CC F6          	lodsb
0143+  04CD 07 53 0B    	call isspace
0144+  04D0 C6 CC 04    	je get_tok_skip_spaces
0145+  04D3 B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  04D5 C6 BA 05    	je get_token_end
0147+  04D8 B9 23       	cmp al, '#'			; comments!
0148+  04DA C6 E8 05    	je get_tok_comment
0149+  04DD 07 DD 0A    	call isalnum
0150+  04E0 C6 C7 05    	jz is_alphanumeric
0151+  04E3             ; other token types
0152+  04E3             get_token_slash:
0153+  04E3 B9 2F       	cmp al, '/'				; check if '/'
0154+  04E5 C7 FD 04    	jne get_token_minus
0155+  04E8 F7          	stosb					; store '/' into token string
0156+  04E9 19 00       	mov al, 0
0157+  04EB F7          	stosb					; terminate token string
0158+  04EC 19 01       	mov al, TOK_FSLASH
0159+  04EE 3D 58 06    	mov [tok], al			
0160+  04F1 19 02       	mov al, TOKTYP_DELIMITER
0161+  04F3 3D 57 06    	mov [toktyp], al
0162+  04F6 4E          	mov a, si
0163+  04F7 42 55 06    	mov [prog], a		; update pointer
0164+  04FA 0A E3 05    	jmp get_token_return
0165+  04FD             get_token_minus:
0166+  04FD B9 2D       	cmp al, '-'				; check if '-'
0167+  04FF C7 17 05    	jne get_token_comma
0168+  0502 F7          	stosb					; store '-' into token string
0169+  0503 19 00       	mov al, 0
0170+  0505 F7          	stosb					; terminate token string
0171+  0506 19 04       	mov al, TOK_MINUS
0172+  0508 3D 58 06    	mov [tok], al			
0173+  050B 19 02       	mov al, TOKTYP_DELIMITER
0174+  050D 3D 57 06    	mov [toktyp], al
0175+  0510 4E          	mov a, si
0176+  0511 42 55 06    	mov [prog], a		; update pointer
0177+  0514 0A E3 05    	jmp get_token_return
0178+  0517             get_token_comma:
0179+  0517 B9 2C       	cmp al, ','				; check if ','
0180+  0519 C7 31 05    	jne get_token_semi
0181+  051C F7          	stosb					; store ',' into token string
0182+  051D 19 00       	mov al, 0
0183+  051F F7          	stosb					; terminate token string
0184+  0520 19 0B       	mov al, TOK_COMMA
0185+  0522 3D 58 06    	mov [tok], al			
0186+  0525 19 02       	mov al, TOKTYP_DELIMITER
0187+  0527 3D 57 06    	mov [toktyp], al
0188+  052A 4E          	mov a, si
0189+  052B 42 55 06    	mov [prog], a		; update pointer
0190+  052E 0A E3 05    	jmp get_token_return
0191+  0531             get_token_semi:
0192+  0531 B9 3B       	cmp al, $3B				; check if ';'
0193+  0533 C7 4B 05    	jne get_token_colon
0194+  0536 F7          	stosb					; store ';' into token string
0195+  0537 19 00       	mov al, 0
0196+  0539 F7          	stosb					; terminate token string
0197+  053A 19 06       	mov al, TOK_SEMI
0198+  053C 3D 58 06    	mov [tok], al			
0199+  053F 19 02       	mov al, TOKTYP_DELIMITER
0200+  0541 3D 57 06    	mov [toktyp], al
0201+  0544 4E          	mov a, si
0202+  0545 42 55 06    	mov [prog], a		; update pointer
0203+  0548 0A E3 05    	jmp get_token_return
0204+  054B             get_token_colon:
0205+  054B B9 3A       	cmp al, $3A				; check if ':'
0206+  054D C7 65 05    	jne get_token_angle
0207+  0550 F7          	stosb					; store ':' into token string
0208+  0551 19 00       	mov al, 0
0209+  0553 F7          	stosb					; terminate token string
0210+  0554 19 0A       	mov al, TOK_COLON
0211+  0556 3D 58 06    	mov [tok], al			
0212+  0559 19 02       	mov al, TOKTYP_DELIMITER
0213+  055B 3D 57 06    	mov [toktyp], al
0214+  055E 4E          	mov a, si
0215+  055F 42 55 06    	mov [prog], a		; update pointer
0216+  0562 0A E3 05    	jmp get_token_return
0217+  0565             get_token_angle:
0218+  0565 B9 3E       	cmp al, $3E				; check if '>'
0219+  0567 C7 7F 05    	jne get_token_tilde
0220+  056A F7          	stosb					; store '>' into token string
0221+  056B 19 00       	mov al, 0
0222+  056D F7          	stosb					; terminate token string
0223+  056E 19 07       	mov al, TOK_ANGLE
0224+  0570 3D 58 06    	mov [tok], al			
0225+  0573 19 02       	mov al, TOKTYP_DELIMITER
0226+  0575 3D 57 06    	mov [toktyp], al
0227+  0578 4E          	mov a, si
0228+  0579 42 55 06    	mov [prog], a		; update pointer
0229+  057C 0A E3 05    	jmp get_token_return
0230+  057F             get_token_tilde:
0231+  057F B9 7E       	cmp al, '~'				; check if '~'
0232+  0581 C7 99 05    	jne get_token_equal
0233+  0584 F7          	stosb					; store '~' into token string
0234+  0585 19 00       	mov al, 0
0235+  0587 F7          	stosb					; terminate token string
0236+  0588 19 08       	mov al, TOK_TILDE
0237+  058A 3D 58 06    	mov [tok], al			
0238+  058D 19 02       	mov al, TOKTYP_DELIMITER
0239+  058F 3D 57 06    	mov [toktyp], al
0240+  0592 4E          	mov a, si
0241+  0593 42 55 06    	mov [prog], a		; update pointer
0242+  0596 0A E3 05    	jmp get_token_return
0243+  0599             get_token_equal:
0244+  0599 B9 3D       	cmp al, '='				; check if '='
0245+  059B C7 B3 05    	jne get_token_skip
0246+  059E F7          	stosb					; store '=' into token string
0247+  059F 19 00       	mov al, 0
0248+  05A1 F7          	stosb					; terminate token string
0249+  05A2 19 09       	mov al, TOK_EQUAL
0250+  05A4 3D 58 06    	mov [tok], al			
0251+  05A7 19 02       	mov al, TOKTYP_DELIMITER
0252+  05A9 3D 57 06    	mov [toktyp], al
0253+  05AC 4E          	mov a, si
0254+  05AD 42 55 06    	mov [prog], a		; update pointer
0255+  05B0 0A E3 05    	jmp get_token_return
0256+  05B3             get_token_skip:
0257+  05B3 4E          	mov a, si
0258+  05B4 42 55 06    	mov [prog], a		; update pointer
0259+  05B7 0A E3 05    	jmp get_token_return
0260+  05BA             get_token_end:				; end of file token
0261+  05BA 19 14       	mov al, TOK_END
0262+  05BC 3D 58 06    	mov [tok], al
0263+  05BF 19 06       	mov al, TOKTYP_END
0264+  05C1 3D 57 06    	mov [toktyp], al
0265+  05C4 0A E3 05    	jmp get_token_return
0266+  05C7             is_alphanumeric:
0267+  05C7 F7          	stosb
0268+  05C8 F6          	lodsb
0269+  05C9 07 DD 0A    	call isalnum			;check if is alphanumeric
0270+  05CC C6 C7 05    	jz is_alphanumeric
0271+  05CF B9 2E       	cmp al, $2E				; check if is '.'
0272+  05D1 C6 C7 05    	je is_alphanumeric
0273+  05D4 19 00       	mov al, 0
0274+  05D6 F7          	stosb
0275+  05D7 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  05D9 3D 57 06    	mov [toktyp], al
0277+  05DC D5 01 00    	sub si, 1
0278+  05DF 4E          	mov a, si
0279+  05E0 42 55 06    	mov [prog], a		; update pointer
0280+  05E3             get_token_return:
0281+  05E3 F0          	pop di
0282+  05E4 EF          	pop si
0283+  05E5 E7          	pop d
0284+  05E6 E4          	pop a
0285+  05E7 09          	ret
0286+  05E8             get_tok_comment:
0287+  05E8 F6          	lodsb
0288+  05E9 B9 0A       	cmp al, $0A			; new line
0289+  05EB C7 E8 05    	jne get_tok_comment
0290+  05EE 0A CC 04    	jmp get_tok_skip_spaces
0291+  05F1             
0292+  05F1             
0293+  05F1             get_number:
0294+  05F1 D7          	push a
0295+  05F2 DA          	push d
0296+  05F3 E2          	push si
0297+  05F4 E3          	push di
0298+  05F5 19 00       	mov al, 0
0299+  05F7 3D 59 06    	mov [tokstr], al			; nullify tokstr string
0300+  05FA 19 00       	mov al, TOK_NULL
0301+  05FC 3D 58 06    	mov [tok], al				; nullify token
0302+  05FF 14 55 06    	mov a, [prog]
0303+  0602 4D          	mov si, a
0304+  0603 FD 4F 59 06 	mov di, tokstr
0305+  0607             get_number_skip_spaces:
0306+  0607 F6          	lodsb
0307+  0608 07 53 0B    	call isspace
0308+  060B C6 07 06    	je get_number_skip_spaces
0309+  060E B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  0610 C7 20 06    	jne get_number_L0
0311+  0613 19 14       	mov al, TOK_END
0312+  0615 3D 58 06    	mov [tok], al
0313+  0618 19 06       	mov al, TOKTYP_END
0314+  061A 3D 57 06    	mov [toktyp], al
0315+  061D 0A 37 06    	jmp get_number_return
0316+  0620             get_number_L0:
0317+  0620 F7          	stosb
0318+  0621 F6          	lodsb
0319+  0622 07 E7 0A    	call isdigit			;check if is numeric
0320+  0625 C6 20 06    	jz get_number_L0
0321+  0628 19 00       	mov al, 0
0322+  062A F7          	stosb
0323+  062B 19 05       	mov al, TOKTYP_NUMERIC
0324+  062D 3D 57 06    	mov [toktyp], al
0325+  0630 D5 01 00    	sub si, 1
0326+  0633 4E          	mov a, si
0327+  0634 42 55 06    	mov [prog], a		; update pointer
0328+  0637             get_number_return:
0329+  0637 F0          	pop di
0330+  0638 EF          	pop si
0331+  0639 E7          	pop d
0332+  063A E4          	pop a
0333+  063B 09          	ret
0334+  063C             
0335+  063C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  063C             ;; PUT BACK TOKEN
0337+  063C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  063C             putback:
0339+  063C D7          	push a
0340+  063D E2          	push si
0341+  063E FD 4D 59 06 	mov si, tokstr	
0342+  0642             putback_loop:
0343+  0642 F6          	lodsb
0344+  0643 B9 00       	cmp al, 0
0345+  0645 C6 52 06    	je putback_end
0346+  0648 14 55 06    	mov a, [prog]
0347+  064B 7D          	dec a
0348+  064C 42 55 06    	mov [prog], a			; update pointer
0349+  064F 0A 42 06    	jmp putback_loop
0350+  0652             putback_end:
0351+  0652 EF          	pop si
0352+  0653 E4          	pop a
0353+  0654 09          	ret
0354+  0655             
0355+  0655             
0356+  0655             
0357+  0655             
0358+  0655 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  0657             
0360+  0657 00          toktyp: 	.db 0			; token type symbol
0361+  0658 00          tok:		.db 0			; current token symbol
0362+  0659 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  065D 00 00 00 00 
0362+  0661 00 00 00 00 
0362+  0665 00 00 00 00 
0362+  0669 00 00 00 00 
0362+  066D 00 00 00 00 
0362+  0671 00 00 00 00 
0362+  0675 00 00 00 00 
0362+  0679 00 00 00 00 
0362+  067D 00 00 00 00 
0362+  0681 00 00 00 00 
0362+  0685 00 00 00 00 
0362+  0689 00 00 00 00 
0362+  068D 00 00 00 00 
0362+  0691 00 00 00 00 
0362+  0695 00 00 00 00 
0362+  0699 00 00 00 00 
0362+  069D 00 00 00 00 
0362+  06A1 00 00 00 00 
0362+  06A5 00 00 00 00 
0362+  06A9 00 00 00 00 
0362+  06AD 00 00 00 00 
0362+  06B1 00 00 00 00 
0362+  06B5 00 00 00 00 
0362+  06B9 00 00 00 00 
0362+  06BD 00 00 00 00 
0362+  06C1 00 00 00 00 
0362+  06C5 00 00 00 00 
0362+  06C9 00 00 00 00 
0362+  06CD 00 00 00 00 
0362+  06D1 00 00 00 00 
0362+  06D5 00 00 00 00 
0362+  06D9 00 00 00 00 
0362+  06DD 00 00 00 00 
0362+  06E1 00 00 00 00 
0362+  06E5 00 00 00 00 
0362+  06E9 00 00 00 00 
0362+  06ED 00 00 00 00 
0362+  06F1 00 00 00 00 
0362+  06F5 00 00 00 00 
0362+  06F9 00 00 00 00 
0362+  06FD 00 00 00 00 
0362+  0701 00 00 00 00 
0362+  0705 00 00 00 00 
0362+  0709 00 00 00 00 
0362+  070D 00 00 00 00 
0362+  0711 00 00 00 00 
0362+  0715 00 00 00 00 
0362+  0719 00 00 00 00 
0362+  071D 00 00 00 00 
0362+  0721 00 00 00 00 
0362+  0725 00 00 00 00 
0362+  0729 00 00 00 00 
0362+  072D 00 00 00 00 
0362+  0731 00 00 00 00 
0362+  0735 00 00 00 00 
0362+  0739 00 00 00 00 
0362+  073D 00 00 00 00 
0362+  0741 00 00 00 00 
0362+  0745 00 00 00 00 
0362+  0749 00 00 00 00 
0362+  074D 00 00 00 00 
0362+  0751 00 00 00 00 
0362+  0755 00 00 00 00 
0029   0759             .include "stdio.asm"
0001+  0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0759             ; stdio.s
0003+  0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0759             .include "string.asm"
0001++ 0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0759             ; string.s
0003++ 0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0759             
0005++ 0759             
0006++ 0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0759             ; strrev
0008++ 0759             ; reverse a string
0009++ 0759             ; D = string address
0010++ 0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0759             ; 01234
0012++ 0759             strrev:
0013++ 0759 4B          	pusha
0014++ 075A 07 A0 07    	call strlen	; length in C
0015++ 075D 12          	mov a, c
0016++ 075E AF 01 00    	cmp a, 1
0017++ 0761 D0 7B 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0764 7D          	dec a
0019++ 0765 FD 4E       	mov si, d	; beginning of string
0020++ 0767 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0769 59          	add d, a	; end of string
0022++ 076A 12          	mov a, c
0023++ 076B FD 9B       	shr a		; divide by 2
0024++ 076D 39          	mov c, a	; C now counts the steps
0025++ 076E             strrev_L0:
0026++ 076E 32          	mov bl, [d]	; save load right-side char into BL
0027++ 076F F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0770 3E          	mov [d], al	; store left char into right side
0029++ 0771 1B          	mov al, bl
0030++ 0772 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0773 7E          	dec c
0032++ 0774 7F          	dec d
0033++ 0775 C2 00 00    	cmp c, 0
0034++ 0778 C7 6E 07    	jne strrev_L0
0035++ 077B             strrev_end:
0036++ 077B 4C          	popa
0037++ 077C 09          	ret
0038++ 077D             	
0039++ 077D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 077D             ; strchr
0041++ 077D             ; search string in D for char in AL
0042++ 077D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 077D             strchr:
0044++ 077D             strchr_L0:
0045++ 077D 32          	mov bl, [d]
0046++ 077E C1 00       	cmp bl, 0
0047++ 0780 C6 8B 07    	je strchr_end
0048++ 0783 BA          	cmp al, bl
0049++ 0784 C6 8B 07    	je strchr_end
0050++ 0787 79          	inc d
0051++ 0788 0A 7D 07    	jmp strchr_L0
0052++ 078B             strchr_end:
0053++ 078B 1B          	mov al, bl
0054++ 078C 09          	ret
0055++ 078D             
0056++ 078D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 078D             ; strstr
0058++ 078D             ; find sub-string
0059++ 078D             ; str1 in SI
0060++ 078D             ; str2 in DI
0061++ 078D             ; SI points to end of source string
0062++ 078D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 078D             strstr:
0064++ 078D DB          	push al
0065++ 078E DA          	push d
0066++ 078F E3          	push di
0067++ 0790             strstr_loop:
0068++ 0790 F3          	cmpsb					; compare a byte of the strings
0069++ 0791 C7 9C 07    	jne strstr_ret
0070++ 0794 FC 00 00    	lea d, [di + 0]
0071++ 0797 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0799 C7 90 07    	jne strstr_loop				; equal chars but not at end
0073++ 079C             strstr_ret:
0074++ 079C F0          	pop di
0075++ 079D E7          	pop d
0076++ 079E E8          	pop al
0077++ 079F 09          	ret
0078++ 07A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 07A0             ; length of null terminated string
0080++ 07A0             ; result in C
0081++ 07A0             ; pointer in D
0082++ 07A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 07A0             strlen:
0084++ 07A0 DA          	push d
0085++ 07A1 38 00 00    	mov c, 0
0086++ 07A4             strlen_L1:
0087++ 07A4 BD 00       	cmp byte [d], 0
0088++ 07A6 C6 AE 07    	je strlen_ret
0089++ 07A9 79          	inc d
0090++ 07AA 78          	inc c
0091++ 07AB 0A A4 07    	jmp strlen_L1
0092++ 07AE             strlen_ret:
0093++ 07AE E7          	pop d
0094++ 07AF 09          	ret
0095++ 07B0             
0096++ 07B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07B0             ; STRCMP
0098++ 07B0             ; compare two strings
0099++ 07B0             ; str1 in SI
0100++ 07B0             ; str2 in DI
0101++ 07B0             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 07B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07B0             strcmp:
0104++ 07B0 DB          	push al
0105++ 07B1 DA          	push d
0106++ 07B2 E3          	push di
0107++ 07B3 E2          	push si
0108++ 07B4             strcmp_loop:
0109++ 07B4 F3          	cmpsb					; compare a byte of the strings
0110++ 07B5 C7 C0 07    	jne strcmp_ret
0111++ 07B8 FB FF FF    	lea d, [si +- 1]
0112++ 07BB BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07BD C7 B4 07    	jne strcmp_loop				; equal chars but not at end
0114++ 07C0             strcmp_ret:
0115++ 07C0 EF          	pop si
0116++ 07C1 F0          	pop di
0117++ 07C2 E7          	pop d
0118++ 07C3 E8          	pop al
0119++ 07C4 09          	ret
0120++ 07C5             
0121++ 07C5             
0122++ 07C5             ; STRCPY
0123++ 07C5             ; copy null terminated string from SI to DI
0124++ 07C5             ; source in SI
0125++ 07C5             ; destination in DI
0126++ 07C5             strcpy:
0127++ 07C5 E2          	push si
0128++ 07C6 E3          	push di
0129++ 07C7 DB          	push al
0130++ 07C8             strcpy_L1:
0131++ 07C8 F6          	lodsb
0132++ 07C9 F7          	stosb
0133++ 07CA B9 00       	cmp al, 0
0134++ 07CC C7 C8 07    	jne strcpy_L1
0135++ 07CF             strcpy_end:
0136++ 07CF E8          	pop al
0137++ 07D0 F0          	pop di
0138++ 07D1 EF          	pop si
0139++ 07D2 09          	ret
0140++ 07D3             
0141++ 07D3             ; STRCAT
0142++ 07D3             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07D3             ; source in SI
0144++ 07D3             ; destination in DI
0145++ 07D3             strcat:
0146++ 07D3 E2          	push si
0147++ 07D4 E3          	push di
0148++ 07D5 D7          	push a
0149++ 07D6 DA          	push d
0150++ 07D7 50          	mov a, di
0151++ 07D8 3C          	mov d, a
0152++ 07D9             strcat_goto_end_L1:
0153++ 07D9 BD 00       	cmp byte[d], 0
0154++ 07DB C6 E2 07    	je strcat_start
0155++ 07DE 79          	inc d
0156++ 07DF 0A D9 07    	jmp strcat_goto_end_L1
0157++ 07E2             strcat_start:
0158++ 07E2 FD 50       	mov di, d
0159++ 07E4             strcat_L1:
0160++ 07E4 F6          	lodsb
0161++ 07E5 F7          	stosb
0162++ 07E6 B9 00       	cmp al, 0
0163++ 07E8 C7 E4 07    	jne strcat_L1
0164++ 07EB             strcat_end:
0165++ 07EB E7          	pop d
0166++ 07EC E4          	pop a
0167++ 07ED F0          	pop di
0168++ 07EE EF          	pop si
0169++ 07EF 09          	ret
0005+  07F0             
0006+  07F0 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  07F4 34 35 36 37 
0006+  07F8 38 39 41 42 
0006+  07FC 43 44 45 46 
0007+  0800 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0804 1B 5B 48 00 
0008+  0808             
0009+  0808 01 00       table_power:.dw 1
0010+  080A 0A 00       			.dw 10
0011+  080C 64 00       			.dw 100
0012+  080E E8 03       			.dw 1000
0013+  0810 10 27       			.dw 10000
0014+  0812             
0015+  0812             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0812             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0812             ; ASCII in BL
0018+  0812             ; result in AL
0019+  0812             ; ascii for F = 0100 0110
0020+  0812             ; ascii for 9 = 0011 1001
0021+  0812             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0812             hex_ascii_encode:
0023+  0812 1B          	mov al, bl
0024+  0813 93 40       	test al, $40				; test if letter or number
0025+  0815 C7 1B 08    	jnz hex_letter
0026+  0818 87 0F       	and al, $0F				; get number
0027+  081A 09          	ret
0028+  081B             hex_letter:
0029+  081B 87 0F       	and al, $0F				; get letter
0030+  081D 6A 09       	add al, 9
0031+  081F 09          	ret
0032+  0820             
0033+  0820             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0820             ; ATOI
0035+  0820             ; 2 letter hex string in B
0036+  0820             ; 8bit integer returned in AL
0037+  0820             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0820             atoi:
0039+  0820 D8          	push b
0040+  0821 07 12 08    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0824 30          	mov bl, bh
0042+  0825 DB          	push al					; save a
0043+  0826 07 12 08    	call hex_ascii_encode
0044+  0829 EA          	pop bl	
0045+  082A FD 9E 04    	shl al, 4
0046+  082D 8C          	or al, bl
0047+  082E E5          	pop b
0048+  082F 09          	ret	
0049+  0830             
0050+  0830             
0051+  0830             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0830             ; printf
0053+  0830             ; no need for explanations!
0054+  0830             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0830             printf:
0056+  0830 09          	ret
0057+  0831             
0058+  0831             
0059+  0831             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0831             ; scanf
0061+  0831             ; no need for explanations!
0062+  0831             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0831             scanf:
0064+  0831 09          	ret
0065+  0832             
0066+  0832             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0832             ; ITOA
0068+  0832             ; 8bit value in BL
0069+  0832             ; 2 byte ASCII result in A
0070+  0832             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0832             itoa:
0072+  0832 DA          	push d
0073+  0833 D8          	push b
0074+  0834 A7 00       	mov bh, 0
0075+  0836 FD A4 04    	shr bl, 4	
0076+  0839 74          	mov d, b
0077+  083A 1F F0 07    	mov al, [d + s_hex_digits]
0078+  083D 23          	mov ah, al
0079+  083E             	
0080+  083E E5          	pop b
0081+  083F D8          	push b
0082+  0840 A7 00       	mov bh, 0
0083+  0842 FD 87 0F    	and bl, $0F
0084+  0845 74          	mov d, b
0085+  0846 1F F0 07    	mov al, [d + s_hex_digits]
0086+  0849 E5          	pop b
0087+  084A E7          	pop d
0088+  084B 09          	ret
0089+  084C             
0090+  084C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  084C             ; HEX STRING TO BINARY
0092+  084C             ; di = destination address
0093+  084C             ; si = source
0094+  084C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  084C             hex_to_int:
0096+  084C             hex_to_int_L1:
0097+  084C F6          	lodsb					; load from [SI] to AL
0098+  084D B9 00       	cmp al, 0				; check if ASCII 0
0099+  084F C6 5C 08    	jz hex_to_int_ret
0100+  0852 36          	mov bh, al
0101+  0853 F6          	lodsb
0102+  0854 2F          	mov bl, al
0103+  0855 07 20 08    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0858 F7          	stosb					; store AL to [DI]
0105+  0859 0A 4C 08    	jmp hex_to_int_L1
0106+  085C             hex_to_int_ret:
0107+  085C 09          	ret		
0108+  085D             
0109+  085D             
0110+  085D             
0111+  085D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  085D             ; GETCHAR
0113+  085D             ; char in ah
0114+  085D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  085D             getchar:
0116+  085D DB          	push al
0117+  085E             getchar_retry:
0118+  085E FD 0C       	sti
0119+  0860 19 01       	mov al, 1
0120+  0862 05 03       	syscall sys_io			; receive in AH
0121+  0864 B9 00       	cmp al, 0			; check if any char was receive
0122+  0866 C6 5E 08    	je getchar_retry
0123+  0869 E8          	pop al
0124+  086A 09          	ret
0125+  086B             
0126+  086B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  086B             ; PUTCHAR
0128+  086B             ; char in ah
0129+  086B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  086B             putchar:
0131+  086B D7          	push a
0132+  086C 19 00       	mov al, 0
0133+  086E 05 03       	syscall sys_io			; char in AH
0134+  0870 E4          	pop a
0135+  0871 09          	ret
0136+  0872             
0137+  0872             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0872             ;; INPUT A STRING
0139+  0872             ;; terminates with null
0140+  0872             ;; pointer in D
0141+  0872             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0872             gets:
0143+  0872 D7          	push a
0144+  0873 DA          	push d
0145+  0874             gets_loop:
0146+  0874 FD 0C       	sti
0147+  0876 19 01       	mov al, 1
0148+  0878 05 03       	syscall sys_io			; receive in AH
0149+  087A B9 00       	cmp al, 0				; check error code (AL)
0150+  087C C6 74 08    	je gets_loop			; if no char received, retry
0151+  087F             
0152+  087F 76 1B       	cmp ah, 27
0153+  0881 C6 A2 08    	je gets_telnet_escape
0154+  0884 76 0A       	cmp ah, $0A				; LF
0155+  0886 C6 FB 08    	je gets_end
0156+  0889 76 0D       	cmp ah, $0D				; CR
0157+  088B C6 FB 08    	je gets_end
0158+  088E 76 5C       	cmp ah, $5C				; '\\'
0159+  0890 C6 D2 08    	je gets_escape
0160+  0893             	
0161+  0893 76 08       	cmp ah, $08			; check for backspace
0162+  0895 C6 9E 08    	je gets_backspace
0163+  0898             
0164+  0898 1A          	mov al, ah
0165+  0899 3E          	mov [d], al
0166+  089A 79          	inc d
0167+  089B 0A 74 08    	jmp gets_loop
0168+  089E             gets_backspace:
0169+  089E 7F          	dec d
0170+  089F 0A 74 08    	jmp gets_loop
0171+  08A2             gets_telnet_escape:
0172+  08A2 FD 0C       	sti
0173+  08A4 19 01       	mov al, 1
0174+  08A6 05 03       	syscall sys_io				; receive in AH without echo
0175+  08A8 B9 00       	cmp al, 0					; check error code (AL)
0176+  08AA C6 A2 08    	je gets_telnet_escape		; if no char received, retry
0177+  08AD 76 5B       	cmp ah, '['
0178+  08AF C7 74 08    	jne gets_loop
0179+  08B2             gets_telnet_escape_phase2:
0180+  08B2 FD 0C       	sti
0181+  08B4 19 01       	mov al, 1
0182+  08B6 05 03       	syscall sys_io					; receive in AH without echo
0183+  08B8 B9 00       	cmp al, 0						; check error code (AL)
0184+  08BA C6 B2 08    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  08BD 76 44       	cmp ah, 'D'
0186+  08BF C6 CA 08    	je gets_left_arrow
0187+  08C2 76 43       	cmp ah, 'C'
0188+  08C4 C6 CE 08    	je gets_right_arrow
0189+  08C7 0A 74 08    	jmp gets_loop
0190+  08CA             gets_left_arrow:
0191+  08CA 7F          	dec d
0192+  08CB 0A 74 08    	jmp gets_loop
0193+  08CE             gets_right_arrow:
0194+  08CE 79          	inc d
0195+  08CF 0A 74 08    	jmp gets_loop
0196+  08D2             gets_escape:
0197+  08D2 FD 0C       	sti
0198+  08D4 19 01       	mov al, 1
0199+  08D6 05 03       	syscall sys_io			; receive in AH
0200+  08D8 B9 00       	cmp al, 0				; check error code (AL)
0201+  08DA C6 D2 08    	je gets_escape			; if no char received, retry
0202+  08DD 76 6E       	cmp ah, 'n'
0203+  08DF C6 ED 08    	je gets_LF
0204+  08E2 76 72       	cmp ah, 'r'
0205+  08E4 C6 F4 08    	je gets_CR
0206+  08E7 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  08E8 3E          	mov [d], al
0208+  08E9 79          	inc d
0209+  08EA 0A 74 08    	jmp gets_loop
0210+  08ED             gets_LF:
0211+  08ED 19 0A       	mov al, $0A
0212+  08EF 3E          	mov [d], al
0213+  08F0 79          	inc d
0214+  08F1 0A 74 08    	jmp gets_loop
0215+  08F4             gets_CR:
0216+  08F4 19 0D       	mov al, $0D
0217+  08F6 3E          	mov [d], al
0218+  08F7 79          	inc d
0219+  08F8 0A 74 08    	jmp gets_loop
0220+  08FB             gets_end:
0221+  08FB 19 00       	mov al, 0
0222+  08FD 3E          	mov [d], al				; terminate string
0223+  08FE E7          	pop d
0224+  08FF E4          	pop a
0225+  0900 09          	ret
0226+  0901             
0227+  0901             
0228+  0901             
0229+  0901             
0230+  0901             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0901             ;; INPUT TEXT
0232+  0901             ;; terminated with CTRL+D
0233+  0901             ;; pointer in D
0234+  0901             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0901             gettxt:
0236+  0901 D7          	push a
0237+  0902 DA          	push d
0238+  0903             gettxt_loop:
0239+  0903 19 01       	mov al, 1
0240+  0905 05 03       	syscall sys_io			; receive in AH
0241+  0907 B9 00       	cmp al, 0				; check error code (AL)
0242+  0909 C6 03 09    	je gettxt_loop		; if no char received, retry
0243+  090C 76 04       	cmp ah, 4			; EOT
0244+  090E C6 4C 09    	je gettxt_end
0245+  0911 76 08       	cmp ah, $08			; check for backspace
0246+  0913 C6 48 09    	je gettxt_backspace
0247+  0916 76 5C       	cmp ah, $5C				; '\\'
0248+  0918 C6 21 09    	je gettxt_escape
0249+  091B 1A          	mov al, ah
0250+  091C 3E          	mov [d], al
0251+  091D 79          	inc d
0252+  091E 0A 03 09    	jmp gettxt_loop
0253+  0921             gettxt_escape:
0254+  0921 19 01       	mov al, 1
0255+  0923 05 03       	syscall sys_io			; receive in AH
0256+  0925 B9 00       	cmp al, 0				; check error code (AL)
0257+  0927 C6 21 09    	je gettxt_escape		; if no char received, retry
0258+  092A 76 6E       	cmp ah, 'n'
0259+  092C C6 3A 09    	je gettxt_LF
0260+  092F 76 72       	cmp ah, 'r'
0261+  0931 C6 41 09    	je gettxt_CR
0262+  0934 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0935 3E          	mov [d], al
0264+  0936 79          	inc d
0265+  0937 0A 03 09    	jmp gettxt_loop
0266+  093A             gettxt_LF:
0267+  093A 19 0A       	mov al, $0A
0268+  093C 3E          	mov [d], al
0269+  093D 79          	inc d
0270+  093E 0A 03 09    	jmp gettxt_loop
0271+  0941             gettxt_CR:
0272+  0941 19 0D       	mov al, $0D
0273+  0943 3E          	mov [d], al
0274+  0944 79          	inc d
0275+  0945 0A 03 09    	jmp gettxt_loop
0276+  0948             gettxt_backspace:
0277+  0948 7F          	dec d
0278+  0949 0A 03 09    	jmp gettxt_loop
0279+  094C             gettxt_end:
0280+  094C 19 00       	mov al, 0
0281+  094E 3E          	mov [d], al				; terminate string
0282+  094F E7          	pop d
0283+  0950 E4          	pop a
0284+  0951 09          	ret
0285+  0952             
0286+  0952             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0952             ; PRINT NEW LINE
0288+  0952             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0952             printnl:
0290+  0952 D7          	push a
0291+  0953 10 00 0A    	mov a, $0A00
0292+  0956 05 03       	syscall sys_io
0293+  0958 10 00 0D    	mov a, $0D00
0294+  095B 05 03       	syscall sys_io
0295+  095D E4          	pop a
0296+  095E 09          	ret
0297+  095F             
0298+  095F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  095F             ; strtoint
0300+  095F             ; 4 digit hex string number in d
0301+  095F             ; integer returned in A
0302+  095F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  095F             strtointx:
0304+  095F D8          	push b
0305+  0960 32          	mov bl, [d]
0306+  0961 37          	mov bh, bl
0307+  0962 33 01 00    	mov bl, [d + 1]
0308+  0965 07 20 08    	call atoi				; convert to int in AL
0309+  0968 23          	mov ah, al				; move to AH
0310+  0969 33 02 00    	mov bl, [d + 2]
0311+  096C 37          	mov bh, bl
0312+  096D 33 03 00    	mov bl, [d + 3]
0313+  0970 07 20 08    	call atoi				; convert to int in AL
0314+  0973 E5          	pop b
0315+  0974 09          	ret
0316+  0975             
0317+  0975             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0975             ; strtoint
0319+  0975             ; 5 digit base10 string number in d
0320+  0975             ; integer returned in A
0321+  0975             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0975             strtoint:
0323+  0975 E2          	push si
0324+  0976 D8          	push b
0325+  0977 D9          	push c
0326+  0978 DA          	push d
0327+  0979 07 A0 07    	call strlen			; get string length in C
0328+  097C 7E          	dec c
0329+  097D FD 4E       	mov si, d
0330+  097F 12          	mov a, c
0331+  0980 FD 99       	shl a
0332+  0982 3B 08 08    	mov d, table_power
0333+  0985 59          	add d, a
0334+  0986 38 00 00    	mov c, 0
0335+  0989             strtoint_L0:
0336+  0989 F6          	lodsb			; load ASCII to al
0337+  098A B9 00       	cmp al, 0
0338+  098C C6 9F 09    	je strtoint_end
0339+  098F 6F 30       	sub al, $30		; make into integer
0340+  0991 22 00       	mov ah, 0
0341+  0993 2A          	mov b, [d]
0342+  0994 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0995 11          	mov a, b
0344+  0996 28          	mov b, c
0345+  0997 54          	add a, b
0346+  0998 39          	mov c, a
0347+  0999 63 02 00    	sub d, 2
0348+  099C 0A 89 09    	jmp strtoint_L0
0349+  099F             strtoint_end:
0350+  099F 12          	mov a, c
0351+  09A0 E7          	pop d
0352+  09A1 E6          	pop c
0353+  09A2 E5          	pop b
0354+  09A3 EF          	pop si
0355+  09A4 09          	ret
0356+  09A5             
0357+  09A5             
0358+  09A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  09A5             ; PRINT NULL TERMINATED STRING
0360+  09A5             ; pointer in D
0361+  09A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  09A5             puts:
0363+  09A5 D7          	push a
0364+  09A6 DA          	push d
0365+  09A7             puts_L1:
0366+  09A7 1E          	mov al, [d]
0367+  09A8 B9 00       	cmp al, 0
0368+  09AA C6 B6 09    	jz puts_END
0369+  09AD 23          	mov ah, al
0370+  09AE 19 00       	mov al, 0
0371+  09B0 05 03       	syscall sys_io
0372+  09B2 79          	inc d
0373+  09B3 0A A7 09    	jmp puts_L1
0374+  09B6             puts_END:
0375+  09B6 E7          	pop d
0376+  09B7 E4          	pop a
0377+  09B8 09          	ret
0378+  09B9             
0379+  09B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  09B9             ; PRINT N SIZE STRING
0381+  09B9             ; pointer in D
0382+  09B9             ; size in C
0383+  09B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  09B9             putsn:
0385+  09B9 DB          	push al
0386+  09BA DA          	push d
0387+  09BB D9          	push c
0388+  09BC             putsn_L0:
0389+  09BC 1E          	mov al, [d]
0390+  09BD 23          	mov ah, al
0391+  09BE 19 00       	mov al, 0
0392+  09C0 05 03       	syscall sys_io
0393+  09C2 79          	inc d
0394+  09C3 7E          	dec c	
0395+  09C4 C2 00 00    	cmp c, 0
0396+  09C7 C7 BC 09    	jne putsn_L0
0397+  09CA             putsn_end:
0398+  09CA E6          	pop c
0399+  09CB E7          	pop d
0400+  09CC E8          	pop al
0401+  09CD 09          	ret
0402+  09CE             
0403+  09CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  09CE             ; print 16bit decimal number
0405+  09CE             ; input number in A
0406+  09CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  09CE             print_u16d:
0408+  09CE D7          	push a
0409+  09CF D8          	push b
0410+  09D0 26 10 27    	mov b, 10000
0411+  09D3 AE          	div a, b			; get 10000 coeff.
0412+  09D4 07 FA 09    	call print_number
0413+  09D7 11          	mov a, b
0414+  09D8 26 E8 03    	mov b, 1000
0415+  09DB AE          	div a, b			; get 10000 coeff.
0416+  09DC 07 FA 09    	call print_number
0417+  09DF 11          	mov a, b
0418+  09E0 26 64 00    	mov b, 100
0419+  09E3 AE          	div a, b
0420+  09E4 07 FA 09    	call print_number
0421+  09E7 11          	mov a, b
0422+  09E8 26 0A 00    	mov b, 10
0423+  09EB AE          	div a, b
0424+  09EC 07 FA 09    	call print_number
0425+  09EF 11          	mov a, b
0426+  09F0 6A 30       	add al, $30
0427+  09F2 23          	mov ah, al
0428+  09F3 19 00       	mov al, 0
0429+  09F5 05 03       	syscall sys_io	; print coeff
0430+  09F7 E5          	pop b
0431+  09F8 E4          	pop a
0432+  09F9 09          	ret
0433+  09FA             
0434+  09FA             
0435+  09FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  09FA             ; if A == 0, print space
0437+  09FA             ; else print A
0438+  09FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  09FA             print_number:
0440+  09FA 6A 30       	add al, $30
0441+  09FC 23          	mov ah, al
0442+  09FD 07 6B 08    	call putchar
0443+  0A00 09          	ret
0444+  0A01             
0445+  0A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0A01             ; PRINT 16BIT HEX INTEGER
0447+  0A01             ; integer value in reg B
0448+  0A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0A01             print_u16x:
0450+  0A01 D7          	push a
0451+  0A02 D8          	push b
0452+  0A03 DD          	push bl
0453+  0A04 30          	mov bl, bh
0454+  0A05 07 32 08    	call itoa				; convert bh to char in A
0455+  0A08 2F          	mov bl, al				; save al
0456+  0A09 19 00       	mov al, 0
0457+  0A0B 05 03       	syscall sys_io				; display AH
0458+  0A0D 24          	mov ah, bl				; retrieve al
0459+  0A0E 19 00       	mov al, 0
0460+  0A10 05 03       	syscall sys_io				; display AL
0461+  0A12             
0462+  0A12 EA          	pop bl
0463+  0A13 07 32 08    	call itoa				; convert bh to char in A
0464+  0A16 2F          	mov bl, al				; save al
0465+  0A17 19 00       	mov al, 0
0466+  0A19 05 03       	syscall sys_io				; display AH
0467+  0A1B 24          	mov ah, bl				; retrieve al
0468+  0A1C 19 00       	mov al, 0
0469+  0A1E 05 03       	syscall sys_io				; display AL
0470+  0A20             
0471+  0A20 E5          	pop b
0472+  0A21 E4          	pop a
0473+  0A22 09          	ret
0474+  0A23             
0475+  0A23             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0A23             ; INPUT 16BIT HEX INTEGER
0477+  0A23             ; read 16bit integer into A
0478+  0A23             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0A23             scan_u16x:
0480+  0A23 F8 10 00    	enter 16
0481+  0A26 D8          	push b
0482+  0A27 DA          	push d
0483+  0A28             
0484+  0A28 FA F1 FF    	lea d, [bp + -15]
0485+  0A2B 07 72 08    	call gets				; get number
0486+  0A2E             
0487+  0A2E 32          	mov bl, [d]
0488+  0A2F 37          	mov bh, bl
0489+  0A30 33 01 00    	mov bl, [d + 1]
0490+  0A33 07 20 08    	call atoi				; convert to int in AL
0491+  0A36 23          	mov ah, al				; move to AH
0492+  0A37             
0493+  0A37 33 02 00    	mov bl, [d + 2]
0494+  0A3A 37          	mov bh, bl
0495+  0A3B 33 03 00    	mov bl, [d + 3]
0496+  0A3E 07 20 08    	call atoi				; convert to int in AL
0497+  0A41             
0498+  0A41 E7          	pop d
0499+  0A42 E5          	pop b
0500+  0A43 F9          	leave
0501+  0A44 09          	ret
0502+  0A45             
0503+  0A45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0A45             ; PRINT 8bit HEX INTEGER
0505+  0A45             ; integer value in reg bl
0506+  0A45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0A45             print_u8x:
0508+  0A45 D7          	push a
0509+  0A46 DD          	push bl
0510+  0A47             
0511+  0A47 07 32 08    	call itoa				; convert bl to char in A
0512+  0A4A 2F          	mov bl, al				; save al
0513+  0A4B 19 00       	mov al, 0
0514+  0A4D 05 03       	syscall sys_io				; display AH
0515+  0A4F 24          	mov ah, bl				; retrieve al
0516+  0A50 19 00       	mov al, 0
0517+  0A52 05 03       	syscall sys_io				; display AL
0518+  0A54             
0519+  0A54 EA          	pop bl
0520+  0A55 E4          	pop a
0521+  0A56 09          	ret
0522+  0A57             
0523+  0A57             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0A57             ; print 8bit decimal unsigned number
0525+  0A57             ; input number in AL
0526+  0A57             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0A57             print_u8d:
0528+  0A57 D7          	push a
0529+  0A58 D8          	push b
0530+  0A59             
0531+  0A59 22 00       	mov ah, 0
0532+  0A5B 26 64 00    	mov b, 100
0533+  0A5E AE          	div a, b
0534+  0A5F D8          	push b			; save remainder
0535+  0A60 B9 00       	cmp al, 0
0536+  0A62 C6 6C 0A    	je skip100
0537+  0A65 6A 30       	add al, $30
0538+  0A67 23          	mov ah, al
0539+  0A68 19 00       	mov al, 0
0540+  0A6A 05 03       	syscall sys_io	; print coeff
0541+  0A6C             skip100:
0542+  0A6C E4          	pop a
0543+  0A6D 22 00       	mov ah, 0
0544+  0A6F 26 0A 00    	mov b, 10
0545+  0A72 AE          	div a, b
0546+  0A73 D8          	push b			; save remainder
0547+  0A74 B9 00       	cmp al, 0
0548+  0A76 C6 80 0A    	je skip10
0549+  0A79 6A 30       	add al, $30
0550+  0A7B 23          	mov ah, al
0551+  0A7C 19 00       	mov al, 0
0552+  0A7E 05 03       	syscall sys_io	; print coeff
0553+  0A80             skip10:
0554+  0A80 E4          	pop a
0555+  0A81 1B          	mov al, bl
0556+  0A82 6A 30       	add al, $30
0557+  0A84 23          	mov ah, al
0558+  0A85 19 00       	mov al, 0
0559+  0A87 05 03       	syscall sys_io	; print coeff
0560+  0A89 E5          	pop b
0561+  0A8A E4          	pop a
0562+  0A8B 09          	ret
0563+  0A8C             
0564+  0A8C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0A8C             ; INPUT 8BIT HEX INTEGER
0566+  0A8C             ; read 8bit integer into AL
0567+  0A8C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0A8C             scan_u8x:
0569+  0A8C F8 04 00    	enter 4
0570+  0A8F D8          	push b
0571+  0A90 DA          	push d
0572+  0A91             
0573+  0A91 FA FD FF    	lea d, [bp + -3]
0574+  0A94 07 72 08    	call gets				; get number
0575+  0A97             
0576+  0A97 32          	mov bl, [d]
0577+  0A98 37          	mov bh, bl
0578+  0A99 33 01 00    	mov bl, [d + 1]
0579+  0A9C 07 20 08    	call atoi				; convert to int in AL
0580+  0A9F             
0581+  0A9F E7          	pop d
0582+  0AA0 E5          	pop b
0583+  0AA1 F9          	leave
0584+  0AA2 09          	ret
0585+  0AA3             
0586+  0AA3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0AA3             ; input decimal number
0588+  0AA3             ; result in A
0589+  0AA3             ; 655'\0'
0590+  0AA3             ; low--------high
0591+  0AA3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  0AA3             scan_u16d:
0593+  0AA3 F8 08 00    	enter 8
0594+  0AA6 E2          	push si
0595+  0AA7 D8          	push b
0596+  0AA8 D9          	push c
0597+  0AA9 DA          	push d
0598+  0AAA FA F9 FF    	lea d, [bp +- 7]
0599+  0AAD 07 72 08    	call gets
0600+  0AB0 07 A0 07    	call strlen			; get string length in C
0601+  0AB3 7E          	dec c
0602+  0AB4 FD 4E       	mov si, d
0603+  0AB6 12          	mov a, c
0604+  0AB7 FD 99       	shl a
0605+  0AB9 3B 08 08    	mov d, table_power
0606+  0ABC 59          	add d, a
0607+  0ABD 38 00 00    	mov c, 0
0608+  0AC0             mul_loop:
0609+  0AC0 F6          	lodsb			; load ASCII to al
0610+  0AC1 B9 00       	cmp al, 0
0611+  0AC3 C6 D6 0A    	je mul_exit
0612+  0AC6 6F 30       	sub al, $30		; make into integer
0613+  0AC8 22 00       	mov ah, 0
0614+  0ACA 2A          	mov b, [d]
0615+  0ACB AC          	mul a, b			; result in B since it fits in 16bits
0616+  0ACC 11          	mov a, b
0617+  0ACD 28          	mov b, c
0618+  0ACE 54          	add a, b
0619+  0ACF 39          	mov c, a
0620+  0AD0 63 02 00    	sub d, 2
0621+  0AD3 0A C0 0A    	jmp mul_loop
0622+  0AD6             mul_exit:
0623+  0AD6 12          	mov a, c
0624+  0AD7 E7          	pop d
0625+  0AD8 E6          	pop c
0626+  0AD9 E5          	pop b
0627+  0ADA EF          	pop si
0628+  0ADB F9          	leave
0629+  0ADC 09          	ret
0030   0ADD             .include "ctype.asm"
0001+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0ADD             ; ctype.s
0003+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0ADD             
0005+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0ADD             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0ADD             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0ADD             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0ADD             ;; characters are supported.
0010+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0ADD             ;; isalnum 
0012+  0ADD             ;; isalpha 
0013+  0ADD             ;; islower 
0014+  0ADD             ;; isupper 
0015+  0ADD             ;; isdigit 
0016+  0ADD             ;; isxdigit
0017+  0ADD             ;; iscntrl 
0018+  0ADD             ;; isgraph 
0019+  0ADD             ;; isspace 
0020+  0ADD             ;; isblank 
0021+  0ADD             ;; isprint 
0022+  0ADD             ;; ispunct 
0023+  0ADD             ;; tolower 
0024+  0ADD             ;; toupper
0025+  0ADD             
0026+  0ADD             
0027+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0ADD             ;; IS ALPHANUMERIC
0029+  0ADD             ;; sets ZF according with result
0030+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0ADD             isalnum:
0032+  0ADD 07 FA 0A    	call isalpha
0033+  0AE0 C6 E6 0A    	je isalnum_exit
0034+  0AE3 07 E7 0A    	call isdigit
0035+  0AE6             isalnum_exit:
0036+  0AE6 09          	ret	
0037+  0AE7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0AE7             ;; IS DIGIT
0039+  0AE7             ;; sets ZF according with result
0040+  0AE7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0AE7             isdigit:
0042+  0AE7 DB          	push al
0043+  0AE8 B9 30       	cmp al, '0'
0044+  0AEA C8 F6 0A    	jlu isdigit_false
0045+  0AED B9 39       	cmp al, '9'
0046+  0AEF D1 F6 0A    	jgu isdigit_false
0047+  0AF2 87 00       	and al, 0	; set ZF
0048+  0AF4 E8          	pop al
0049+  0AF5 09          	ret
0050+  0AF6             isdigit_false:
0051+  0AF6 8B 01       	or al, 1	; clear ZF
0052+  0AF8 E8          	pop al
0053+  0AF9 09          	ret	
0054+  0AFA             	
0055+  0AFA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0AFA             ;; IS ALPHA
0057+  0AFA             ;; sets ZF according with result
0058+  0AFA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0AFA             isalpha:
0060+  0AFA DB          	push al
0061+  0AFB B9 5F       	cmp al, '_'
0062+  0AFD C6 1D 0B    	je isalpha_true
0063+  0B00 B9 2E       	cmp al, '.'
0064+  0B02 C6 1D 0B    	je isalpha_true
0065+  0B05 B9 41       	cmp al, 'A'
0066+  0B07 C8 19 0B    	jlu isalpha_false
0067+  0B0A B9 7A       	cmp al, 'z'
0068+  0B0C D1 19 0B    	jgu isalpha_false
0069+  0B0F B9 5A       	cmp al, 'Z'
0070+  0B11 D0 1D 0B    	jleu isalpha_true
0071+  0B14 B9 61       	cmp al, 'a'
0072+  0B16 C9 1D 0B    	jgeu isalpha_true
0073+  0B19             isalpha_false:
0074+  0B19 8B 01       	or al, 1	; clear ZF
0075+  0B1B E8          	pop al
0076+  0B1C 09          	ret
0077+  0B1D             isalpha_true:
0078+  0B1D 87 00       	and al, 0	; set ZF
0079+  0B1F E8          	pop al
0080+  0B20 09          	ret
0081+  0B21             
0082+  0B21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B21             ;; IS PATH-ALPHA
0084+  0B21             ;; sets ZF according with result
0085+  0B21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B21             ispath:
0087+  0B21 DB          	push al
0088+  0B22 07 E7 0A    	call isdigit
0089+  0B25 C6 4F 0B    	je ispath_true
0090+  0B28 B9 5F       	cmp al, '_'
0091+  0B2A C6 4F 0B    	je ispath_true
0092+  0B2D B9 2F       	cmp al, '/'
0093+  0B2F C6 4F 0B    	je ispath_true
0094+  0B32 B9 2E       	cmp al, '.'
0095+  0B34 C6 4F 0B    	je ispath_true
0096+  0B37 B9 41       	cmp al, 'A'
0097+  0B39 C8 4B 0B    	jlu ispath_false
0098+  0B3C B9 7A       	cmp al, 'z'
0099+  0B3E D1 4B 0B    	jgu ispath_false
0100+  0B41 B9 5A       	cmp al, 'Z'
0101+  0B43 D0 4F 0B    	jleu ispath_true
0102+  0B46 B9 61       	cmp al, 'a'
0103+  0B48 C9 4F 0B    	jgeu ispath_true
0104+  0B4B             ispath_false:
0105+  0B4B 8B 01       	or al, 1	; clear ZF
0106+  0B4D E8          	pop al
0107+  0B4E 09          	ret
0108+  0B4F             ispath_true:
0109+  0B4F 87 00       	and al, 0	; set ZF
0110+  0B51 E8          	pop al
0111+  0B52 09          	ret
0112+  0B53             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B53             ;; IS SPACE
0114+  0B53             ;; sets ZF according with result
0115+  0B53             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B53             isspace:
0117+  0B53 B9 20       	cmp al, $20		; ' '
0118+  0B55 C6 69 0B    	je isspace_exit
0119+  0B58 B9 09       	cmp al, $09		; '\t'
0120+  0B5A C6 69 0B    	je isspace_exit
0121+  0B5D B9 0A       	cmp al, $0A		; '\n'
0122+  0B5F C6 69 0B    	je isspace_exit
0123+  0B62 B9 0D       	cmp al, $0D		; '\r'
0124+  0B64 C6 69 0B    	je isspace_exit
0125+  0B67 B9 0B       	cmp al, $0B		; '\v'
0126+  0B69             isspace_exit:
0127+  0B69 09          	ret	
0128+  0B6A             
0129+  0B6A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B6A             ; TO LOWER
0131+  0B6A             ; input in AL
0132+  0B6A             ; output in AL
0133+  0B6A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B6A             to_lower:
0135+  0B6A B9 5A       	cmp al, 'Z'
0136+  0B6C D1 71 0B    	jgu to_lower_ret
0137+  0B6F 6A 20       	add al, $20				; convert to lower case
0138+  0B71             to_lower_ret:
0139+  0B71 09          	ret
0140+  0B72             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B72             ; TO UPPER
0142+  0B72             ; input in AL
0143+  0B72             ; output in AL
0144+  0B72             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B72             to_upper:
0146+  0B72 B9 61       	cmp al, 'a'
0147+  0B74 C8 79 0B    	jlu to_upper_ret
0148+  0B77 6F 20       	sub al, $20			; convert to upper case
0149+  0B79             to_upper_ret:
0150+  0B79 09          	ret
0151+  0B7A             
0031   0B7A             
0032   0B7A             
0033   0B7A 00 00       transient_data: .dw 0
0034   0B7C             
0035   0B7C             .end
0036   0B7C             
0037   0B7C             
tasm: Number of errors = 0
