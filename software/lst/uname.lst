0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;; uname
0005   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006   0000             
0007   0400             .org PROC_TEXT_ORG			; origin at 1024
0008   0400             
0009   0400             cmd_ls:
0010   0400 19 00       	mov al, 0
0011   0402 05 0C       	syscall sys_system
0012   0404 05 0B       	syscall sys_terminate_proc
0013   0406             
0014   0406             
0015   0406             .include "stdio.asm"
0001+  0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0406             ; stdio.s
0003+  0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0406             .include "string.asm"
0001++ 0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0406             ; string.s
0003++ 0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0406             
0005++ 0406             
0006++ 0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0406             ; strrev
0008++ 0406             ; reverse a string
0009++ 0406             ; D = string address
0010++ 0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0406             ; 01234
0012++ 0406             strrev:
0013++ 0406 4B          	pusha
0014++ 0407 07 4D 04    	call strlen	; length in C
0015++ 040A 12          	mov a, c
0016++ 040B AF 01 00    	cmp a, 1
0017++ 040E D0 28 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0411 7D          	dec a
0019++ 0412 FD 4E       	mov si, d	; beginning of string
0020++ 0414 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0416 59          	add d, a	; end of string
0022++ 0417 12          	mov a, c
0023++ 0418 FD 9B       	shr a		; divide by 2
0024++ 041A 39          	mov c, a	; C now counts the steps
0025++ 041B             strrev_L0:
0026++ 041B 32          	mov bl, [d]	; save load right-side char into BL
0027++ 041C F6          	lodsb		; load left-side char into AL; increase SI
0028++ 041D 3E          	mov [d], al	; store left char into right side
0029++ 041E 1B          	mov al, bl
0030++ 041F F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0420 7E          	dec c
0032++ 0421 7F          	dec d
0033++ 0422 C2 00 00    	cmp c, 0
0034++ 0425 C7 1B 04    	jne strrev_L0
0035++ 0428             strrev_end:
0036++ 0428 4C          	popa
0037++ 0429 09          	ret
0038++ 042A             	
0039++ 042A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 042A             ; strchr
0041++ 042A             ; search string in D for char in AL
0042++ 042A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 042A             strchr:
0044++ 042A             strchr_L0:
0045++ 042A 32          	mov bl, [d]
0046++ 042B C1 00       	cmp bl, 0
0047++ 042D C6 38 04    	je strchr_end
0048++ 0430 BA          	cmp al, bl
0049++ 0431 C6 38 04    	je strchr_end
0050++ 0434 79          	inc d
0051++ 0435 0A 2A 04    	jmp strchr_L0
0052++ 0438             strchr_end:
0053++ 0438 1B          	mov al, bl
0054++ 0439 09          	ret
0055++ 043A             
0056++ 043A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 043A             ; strstr
0058++ 043A             ; find sub-string
0059++ 043A             ; str1 in SI
0060++ 043A             ; str2 in DI
0061++ 043A             ; SI points to end of source string
0062++ 043A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 043A             strstr:
0064++ 043A DB          	push al
0065++ 043B DA          	push d
0066++ 043C E3          	push di
0067++ 043D             strstr_loop:
0068++ 043D F3          	cmpsb					; compare a byte of the strings
0069++ 043E C7 49 04    	jne strstr_ret
0070++ 0441 FC 00 00    	lea d, [di + 0]
0071++ 0444 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0446 C7 3D 04    	jne strstr_loop				; equal chars but not at end
0073++ 0449             strstr_ret:
0074++ 0449 F0          	pop di
0075++ 044A E7          	pop d
0076++ 044B E8          	pop al
0077++ 044C 09          	ret
0078++ 044D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 044D             ; length of null terminated string
0080++ 044D             ; result in C
0081++ 044D             ; pointer in D
0082++ 044D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 044D             strlen:
0084++ 044D DA          	push d
0085++ 044E 38 00 00    	mov c, 0
0086++ 0451             strlen_L1:
0087++ 0451 BD 00       	cmp byte [d], 0
0088++ 0453 C6 5B 04    	je strlen_ret
0089++ 0456 79          	inc d
0090++ 0457 78          	inc c
0091++ 0458 0A 51 04    	jmp strlen_L1
0092++ 045B             strlen_ret:
0093++ 045B E7          	pop d
0094++ 045C 09          	ret
0095++ 045D             
0096++ 045D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 045D             ; STRCMP
0098++ 045D             ; compare two strings
0099++ 045D             ; str1 in SI
0100++ 045D             ; str2 in DI
0101++ 045D             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 045D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 045D             strcmp:
0104++ 045D DB          	push al
0105++ 045E DA          	push d
0106++ 045F E3          	push di
0107++ 0460 E2          	push si
0108++ 0461             strcmp_loop:
0109++ 0461 F3          	cmpsb					; compare a byte of the strings
0110++ 0462 C7 6D 04    	jne strcmp_ret
0111++ 0465 FB FF FF    	lea d, [si +- 1]
0112++ 0468 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 046A C7 61 04    	jne strcmp_loop				; equal chars but not at end
0114++ 046D             strcmp_ret:
0115++ 046D EF          	pop si
0116++ 046E F0          	pop di
0117++ 046F E7          	pop d
0118++ 0470 E8          	pop al
0119++ 0471 09          	ret
0120++ 0472             
0121++ 0472             
0122++ 0472             ; STRCPY
0123++ 0472             ; copy null terminated string from SI to DI
0124++ 0472             ; source in SI
0125++ 0472             ; destination in DI
0126++ 0472             strcpy:
0127++ 0472 E2          	push si
0128++ 0473 E3          	push di
0129++ 0474 DB          	push al
0130++ 0475             strcpy_L1:
0131++ 0475 F6          	lodsb
0132++ 0476 F7          	stosb
0133++ 0477 B9 00       	cmp al, 0
0134++ 0479 C7 75 04    	jne strcpy_L1
0135++ 047C             strcpy_end:
0136++ 047C E8          	pop al
0137++ 047D F0          	pop di
0138++ 047E EF          	pop si
0139++ 047F 09          	ret
0140++ 0480             
0141++ 0480             ; STRCAT
0142++ 0480             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0480             ; source in SI
0144++ 0480             ; destination in DI
0145++ 0480             strcat:
0146++ 0480 E2          	push si
0147++ 0481 E3          	push di
0148++ 0482 D7          	push a
0149++ 0483 DA          	push d
0150++ 0484 50          	mov a, di
0151++ 0485 3C          	mov d, a
0152++ 0486             strcat_goto_end_L1:
0153++ 0486 BD 00       	cmp byte[d], 0
0154++ 0488 C6 8F 04    	je strcat_start
0155++ 048B 79          	inc d
0156++ 048C 0A 86 04    	jmp strcat_goto_end_L1
0157++ 048F             strcat_start:
0158++ 048F FD 50       	mov di, d
0159++ 0491             strcat_L1:
0160++ 0491 F6          	lodsb
0161++ 0492 F7          	stosb
0162++ 0493 B9 00       	cmp al, 0
0163++ 0495 C7 91 04    	jne strcat_L1
0164++ 0498             strcat_end:
0165++ 0498 E7          	pop d
0166++ 0499 E4          	pop a
0167++ 049A F0          	pop di
0168++ 049B EF          	pop si
0169++ 049C 09          	ret
0005+  049D             
0006+  049D 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  04A1 34 35 36 37 
0006+  04A5 38 39 41 42 
0006+  04A9 43 44 45 46 
0007+  04AD 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  04B1 1B 5B 48 00 
0008+  04B5             
0009+  04B5 01 00       table_power:.dw 1
0010+  04B7 0A 00       			.dw 10
0011+  04B9 64 00       			.dw 100
0012+  04BB E8 03       			.dw 1000
0013+  04BD 10 27       			.dw 10000
0014+  04BF             
0015+  04BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  04BF             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  04BF             ; ASCII in BL
0018+  04BF             ; result in AL
0019+  04BF             ; ascii for F = 0100 0110
0020+  04BF             ; ascii for 9 = 0011 1001
0021+  04BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  04BF             hex_ascii_encode:
0023+  04BF 1B          	mov al, bl
0024+  04C0 93 40       	test al, $40				; test if letter or number
0025+  04C2 C7 C8 04    	jnz hex_letter
0026+  04C5 87 0F       	and al, $0F				; get number
0027+  04C7 09          	ret
0028+  04C8             hex_letter:
0029+  04C8 87 0F       	and al, $0F				; get letter
0030+  04CA 6A 09       	add al, 9
0031+  04CC 09          	ret
0032+  04CD             
0033+  04CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  04CD             ; ATOI
0035+  04CD             ; 2 letter hex string in B
0036+  04CD             ; 8bit integer returned in AL
0037+  04CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  04CD             atoi:
0039+  04CD D8          	push b
0040+  04CE 07 BF 04    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  04D1 30          	mov bl, bh
0042+  04D2 DB          	push al					; save a
0043+  04D3 07 BF 04    	call hex_ascii_encode
0044+  04D6 EA          	pop bl	
0045+  04D7 FD 9E 04    	shl al, 4
0046+  04DA 8C          	or al, bl
0047+  04DB E5          	pop b
0048+  04DC 09          	ret	
0049+  04DD             
0050+  04DD             
0051+  04DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  04DD             ; printf
0053+  04DD             ; no need for explanations!
0054+  04DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  04DD             printf:
0056+  04DD 09          	ret
0057+  04DE             
0058+  04DE             
0059+  04DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  04DE             ; scanf
0061+  04DE             ; no need for explanations!
0062+  04DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  04DE             scanf:
0064+  04DE 09          	ret
0065+  04DF             
0066+  04DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  04DF             ; ITOA
0068+  04DF             ; 8bit value in BL
0069+  04DF             ; 2 byte ASCII result in A
0070+  04DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  04DF             itoa:
0072+  04DF DA          	push d
0073+  04E0 D8          	push b
0074+  04E1 A7 00       	mov bh, 0
0075+  04E3 FD A4 04    	shr bl, 4	
0076+  04E6 74          	mov d, b
0077+  04E7 1F 9D 04    	mov al, [d + s_hex_digits]
0078+  04EA 23          	mov ah, al
0079+  04EB             	
0080+  04EB E5          	pop b
0081+  04EC D8          	push b
0082+  04ED A7 00       	mov bh, 0
0083+  04EF FD 87 0F    	and bl, $0F
0084+  04F2 74          	mov d, b
0085+  04F3 1F 9D 04    	mov al, [d + s_hex_digits]
0086+  04F6 E5          	pop b
0087+  04F7 E7          	pop d
0088+  04F8 09          	ret
0089+  04F9             
0090+  04F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  04F9             ; HEX STRING TO BINARY
0092+  04F9             ; di = destination address
0093+  04F9             ; si = source
0094+  04F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  04F9             hex_to_int:
0096+  04F9             hex_to_int_L1:
0097+  04F9 F6          	lodsb					; load from [SI] to AL
0098+  04FA B9 00       	cmp al, 0				; check if ASCII 0
0099+  04FC C6 09 05    	jz hex_to_int_ret
0100+  04FF 36          	mov bh, al
0101+  0500 F6          	lodsb
0102+  0501 2F          	mov bl, al
0103+  0502 07 CD 04    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0505 F7          	stosb					; store AL to [DI]
0105+  0506 0A F9 04    	jmp hex_to_int_L1
0106+  0509             hex_to_int_ret:
0107+  0509 09          	ret		
0108+  050A             
0109+  050A             
0110+  050A             
0111+  050A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  050A             ; GETCHAR
0113+  050A             ; char in ah
0114+  050A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  050A             getchar:
0116+  050A DB          	push al
0117+  050B             getchar_retry:
0118+  050B FD 0C       	sti
0119+  050D 19 01       	mov al, 1
0120+  050F 05 03       	syscall sys_io			; receive in AH
0121+  0511 B9 00       	cmp al, 0			; check if any char was receive
0122+  0513 C6 0B 05    	je getchar_retry
0123+  0516 E8          	pop al
0124+  0517 09          	ret
0125+  0518             
0126+  0518             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0518             ; PUTCHAR
0128+  0518             ; char in ah
0129+  0518             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0518             putchar:
0131+  0518 D7          	push a
0132+  0519 19 00       	mov al, 0
0133+  051B 05 03       	syscall sys_io			; char in AH
0134+  051D E4          	pop a
0135+  051E 09          	ret
0136+  051F             
0137+  051F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  051F             ;; INPUT A STRING
0139+  051F             ;; terminates with null
0140+  051F             ;; pointer in D
0141+  051F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  051F             gets:
0143+  051F D7          	push a
0144+  0520 DA          	push d
0145+  0521             gets_loop:
0146+  0521 FD 0C       	sti
0147+  0523 19 01       	mov al, 1
0148+  0525 05 03       	syscall sys_io			; receive in AH
0149+  0527 B9 00       	cmp al, 0				; check error code (AL)
0150+  0529 C6 21 05    	je gets_loop			; if no char received, retry
0151+  052C             
0152+  052C 76 1B       	cmp ah, 27
0153+  052E C6 4F 05    	je gets_telnet_escape
0154+  0531 76 0A       	cmp ah, $0A				; LF
0155+  0533 C6 A8 05    	je gets_end
0156+  0536 76 0D       	cmp ah, $0D				; CR
0157+  0538 C6 A8 05    	je gets_end
0158+  053B 76 5C       	cmp ah, $5C				; '\\'
0159+  053D C6 7F 05    	je gets_escape
0160+  0540             	
0161+  0540 76 08       	cmp ah, $08			; check for backspace
0162+  0542 C6 4B 05    	je gets_backspace
0163+  0545             
0164+  0545 1A          	mov al, ah
0165+  0546 3E          	mov [d], al
0166+  0547 79          	inc d
0167+  0548 0A 21 05    	jmp gets_loop
0168+  054B             gets_backspace:
0169+  054B 7F          	dec d
0170+  054C 0A 21 05    	jmp gets_loop
0171+  054F             gets_telnet_escape:
0172+  054F FD 0C       	sti
0173+  0551 19 01       	mov al, 1
0174+  0553 05 03       	syscall sys_io				; receive in AH without echo
0175+  0555 B9 00       	cmp al, 0					; check error code (AL)
0176+  0557 C6 4F 05    	je gets_telnet_escape		; if no char received, retry
0177+  055A 76 5B       	cmp ah, '['
0178+  055C C7 21 05    	jne gets_loop
0179+  055F             gets_telnet_escape_phase2:
0180+  055F FD 0C       	sti
0181+  0561 19 01       	mov al, 1
0182+  0563 05 03       	syscall sys_io					; receive in AH without echo
0183+  0565 B9 00       	cmp al, 0						; check error code (AL)
0184+  0567 C6 5F 05    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  056A 76 44       	cmp ah, 'D'
0186+  056C C6 77 05    	je gets_left_arrow
0187+  056F 76 43       	cmp ah, 'C'
0188+  0571 C6 7B 05    	je gets_right_arrow
0189+  0574 0A 21 05    	jmp gets_loop
0190+  0577             gets_left_arrow:
0191+  0577 7F          	dec d
0192+  0578 0A 21 05    	jmp gets_loop
0193+  057B             gets_right_arrow:
0194+  057B 79          	inc d
0195+  057C 0A 21 05    	jmp gets_loop
0196+  057F             gets_escape:
0197+  057F FD 0C       	sti
0198+  0581 19 01       	mov al, 1
0199+  0583 05 03       	syscall sys_io			; receive in AH
0200+  0585 B9 00       	cmp al, 0				; check error code (AL)
0201+  0587 C6 7F 05    	je gets_escape			; if no char received, retry
0202+  058A 76 6E       	cmp ah, 'n'
0203+  058C C6 9A 05    	je gets_LF
0204+  058F 76 72       	cmp ah, 'r'
0205+  0591 C6 A1 05    	je gets_CR
0206+  0594 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0595 3E          	mov [d], al
0208+  0596 79          	inc d
0209+  0597 0A 21 05    	jmp gets_loop
0210+  059A             gets_LF:
0211+  059A 19 0A       	mov al, $0A
0212+  059C 3E          	mov [d], al
0213+  059D 79          	inc d
0214+  059E 0A 21 05    	jmp gets_loop
0215+  05A1             gets_CR:
0216+  05A1 19 0D       	mov al, $0D
0217+  05A3 3E          	mov [d], al
0218+  05A4 79          	inc d
0219+  05A5 0A 21 05    	jmp gets_loop
0220+  05A8             gets_end:
0221+  05A8 19 00       	mov al, 0
0222+  05AA 3E          	mov [d], al				; terminate string
0223+  05AB E7          	pop d
0224+  05AC E4          	pop a
0225+  05AD 09          	ret
0226+  05AE             
0227+  05AE             
0228+  05AE             
0229+  05AE             
0230+  05AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  05AE             ;; INPUT TEXT
0232+  05AE             ;; terminated with CTRL+D
0233+  05AE             ;; pointer in D
0234+  05AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  05AE             gettxt:
0236+  05AE D7          	push a
0237+  05AF DA          	push d
0238+  05B0             gettxt_loop:
0239+  05B0 19 01       	mov al, 1
0240+  05B2 05 03       	syscall sys_io			; receive in AH
0241+  05B4 B9 00       	cmp al, 0				; check error code (AL)
0242+  05B6 C6 B0 05    	je gettxt_loop		; if no char received, retry
0243+  05B9 76 04       	cmp ah, 4			; EOT
0244+  05BB C6 F9 05    	je gettxt_end
0245+  05BE 76 08       	cmp ah, $08			; check for backspace
0246+  05C0 C6 F5 05    	je gettxt_backspace
0247+  05C3 76 5C       	cmp ah, $5C				; '\\'
0248+  05C5 C6 CE 05    	je gettxt_escape
0249+  05C8 1A          	mov al, ah
0250+  05C9 3E          	mov [d], al
0251+  05CA 79          	inc d
0252+  05CB 0A B0 05    	jmp gettxt_loop
0253+  05CE             gettxt_escape:
0254+  05CE 19 01       	mov al, 1
0255+  05D0 05 03       	syscall sys_io			; receive in AH
0256+  05D2 B9 00       	cmp al, 0				; check error code (AL)
0257+  05D4 C6 CE 05    	je gettxt_escape		; if no char received, retry
0258+  05D7 76 6E       	cmp ah, 'n'
0259+  05D9 C6 E7 05    	je gettxt_LF
0260+  05DC 76 72       	cmp ah, 'r'
0261+  05DE C6 EE 05    	je gettxt_CR
0262+  05E1 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  05E2 3E          	mov [d], al
0264+  05E3 79          	inc d
0265+  05E4 0A B0 05    	jmp gettxt_loop
0266+  05E7             gettxt_LF:
0267+  05E7 19 0A       	mov al, $0A
0268+  05E9 3E          	mov [d], al
0269+  05EA 79          	inc d
0270+  05EB 0A B0 05    	jmp gettxt_loop
0271+  05EE             gettxt_CR:
0272+  05EE 19 0D       	mov al, $0D
0273+  05F0 3E          	mov [d], al
0274+  05F1 79          	inc d
0275+  05F2 0A B0 05    	jmp gettxt_loop
0276+  05F5             gettxt_backspace:
0277+  05F5 7F          	dec d
0278+  05F6 0A B0 05    	jmp gettxt_loop
0279+  05F9             gettxt_end:
0280+  05F9 19 00       	mov al, 0
0281+  05FB 3E          	mov [d], al				; terminate string
0282+  05FC E7          	pop d
0283+  05FD E4          	pop a
0284+  05FE 09          	ret
0285+  05FF             
0286+  05FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  05FF             ; PRINT NEW LINE
0288+  05FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  05FF             printnl:
0290+  05FF D7          	push a
0291+  0600 10 00 0A    	mov a, $0A00
0292+  0603 05 03       	syscall sys_io
0293+  0605 10 00 0D    	mov a, $0D00
0294+  0608 05 03       	syscall sys_io
0295+  060A E4          	pop a
0296+  060B 09          	ret
0297+  060C             
0298+  060C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  060C             ; strtoint
0300+  060C             ; 4 digit hex string number in d
0301+  060C             ; integer returned in A
0302+  060C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  060C             strtointx:
0304+  060C D8          	push b
0305+  060D 32          	mov bl, [d]
0306+  060E 37          	mov bh, bl
0307+  060F 33 01 00    	mov bl, [d + 1]
0308+  0612 07 CD 04    	call atoi				; convert to int in AL
0309+  0615 23          	mov ah, al				; move to AH
0310+  0616 33 02 00    	mov bl, [d + 2]
0311+  0619 37          	mov bh, bl
0312+  061A 33 03 00    	mov bl, [d + 3]
0313+  061D 07 CD 04    	call atoi				; convert to int in AL
0314+  0620 E5          	pop b
0315+  0621 09          	ret
0316+  0622             
0317+  0622             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0622             ; strtoint
0319+  0622             ; 5 digit base10 string number in d
0320+  0622             ; integer returned in A
0321+  0622             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0622             strtoint:
0323+  0622 E2          	push si
0324+  0623 D8          	push b
0325+  0624 D9          	push c
0326+  0625 DA          	push d
0327+  0626 07 4D 04    	call strlen			; get string length in C
0328+  0629 7E          	dec c
0329+  062A FD 4E       	mov si, d
0330+  062C 12          	mov a, c
0331+  062D FD 99       	shl a
0332+  062F 3B B5 04    	mov d, table_power
0333+  0632 59          	add d, a
0334+  0633 38 00 00    	mov c, 0
0335+  0636             strtoint_L0:
0336+  0636 F6          	lodsb			; load ASCII to al
0337+  0637 B9 00       	cmp al, 0
0338+  0639 C6 4C 06    	je strtoint_end
0339+  063C 6F 30       	sub al, $30		; make into integer
0340+  063E 22 00       	mov ah, 0
0341+  0640 2A          	mov b, [d]
0342+  0641 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0642 11          	mov a, b
0344+  0643 28          	mov b, c
0345+  0644 54          	add a, b
0346+  0645 39          	mov c, a
0347+  0646 63 02 00    	sub d, 2
0348+  0649 0A 36 06    	jmp strtoint_L0
0349+  064C             strtoint_end:
0350+  064C 12          	mov a, c
0351+  064D E7          	pop d
0352+  064E E6          	pop c
0353+  064F E5          	pop b
0354+  0650 EF          	pop si
0355+  0651 09          	ret
0356+  0652             
0357+  0652             
0358+  0652             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0652             ; PRINT NULL TERMINATED STRING
0360+  0652             ; pointer in D
0361+  0652             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0652             puts:
0363+  0652 D7          	push a
0364+  0653 DA          	push d
0365+  0654             puts_L1:
0366+  0654 1E          	mov al, [d]
0367+  0655 B9 00       	cmp al, 0
0368+  0657 C6 63 06    	jz puts_END
0369+  065A 23          	mov ah, al
0370+  065B 19 00       	mov al, 0
0371+  065D 05 03       	syscall sys_io
0372+  065F 79          	inc d
0373+  0660 0A 54 06    	jmp puts_L1
0374+  0663             puts_END:
0375+  0663 E7          	pop d
0376+  0664 E4          	pop a
0377+  0665 09          	ret
0378+  0666             
0379+  0666             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0666             ; PRINT N SIZE STRING
0381+  0666             ; pointer in D
0382+  0666             ; size in C
0383+  0666             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0666             putsn:
0385+  0666 DB          	push al
0386+  0667 DA          	push d
0387+  0668 D9          	push c
0388+  0669             putsn_L0:
0389+  0669 1E          	mov al, [d]
0390+  066A 23          	mov ah, al
0391+  066B 19 00       	mov al, 0
0392+  066D 05 03       	syscall sys_io
0393+  066F 79          	inc d
0394+  0670 7E          	dec c	
0395+  0671 C2 00 00    	cmp c, 0
0396+  0674 C7 69 06    	jne putsn_L0
0397+  0677             putsn_end:
0398+  0677 E6          	pop c
0399+  0678 E7          	pop d
0400+  0679 E8          	pop al
0401+  067A 09          	ret
0402+  067B             
0403+  067B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  067B             ; print 16bit decimal number
0405+  067B             ; input number in A
0406+  067B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  067B             print_u16d:
0408+  067B D7          	push a
0409+  067C D8          	push b
0410+  067D 26 10 27    	mov b, 10000
0411+  0680 AE          	div a, b			; get 10000 coeff.
0412+  0681 07 A7 06    	call print_number
0413+  0684 11          	mov a, b
0414+  0685 26 E8 03    	mov b, 1000
0415+  0688 AE          	div a, b			; get 10000 coeff.
0416+  0689 07 A7 06    	call print_number
0417+  068C 11          	mov a, b
0418+  068D 26 64 00    	mov b, 100
0419+  0690 AE          	div a, b
0420+  0691 07 A7 06    	call print_number
0421+  0694 11          	mov a, b
0422+  0695 26 0A 00    	mov b, 10
0423+  0698 AE          	div a, b
0424+  0699 07 A7 06    	call print_number
0425+  069C 11          	mov a, b
0426+  069D 6A 30       	add al, $30
0427+  069F 23          	mov ah, al
0428+  06A0 19 00       	mov al, 0
0429+  06A2 05 03       	syscall sys_io	; print coeff
0430+  06A4 E5          	pop b
0431+  06A5 E4          	pop a
0432+  06A6 09          	ret
0433+  06A7             
0434+  06A7             
0435+  06A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  06A7             ; if A == 0, print space
0437+  06A7             ; else print A
0438+  06A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  06A7             print_number:
0440+  06A7 6A 30       	add al, $30
0441+  06A9 23          	mov ah, al
0442+  06AA 07 18 05    	call putchar
0443+  06AD 09          	ret
0444+  06AE             
0445+  06AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  06AE             ; PRINT 16BIT HEX INTEGER
0447+  06AE             ; integer value in reg B
0448+  06AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  06AE             print_u16x:
0450+  06AE D7          	push a
0451+  06AF D8          	push b
0452+  06B0 DD          	push bl
0453+  06B1 30          	mov bl, bh
0454+  06B2 07 DF 04    	call itoa				; convert bh to char in A
0455+  06B5 2F          	mov bl, al				; save al
0456+  06B6 19 00       	mov al, 0
0457+  06B8 05 03       	syscall sys_io				; display AH
0458+  06BA 24          	mov ah, bl				; retrieve al
0459+  06BB 19 00       	mov al, 0
0460+  06BD 05 03       	syscall sys_io				; display AL
0461+  06BF             
0462+  06BF EA          	pop bl
0463+  06C0 07 DF 04    	call itoa				; convert bh to char in A
0464+  06C3 2F          	mov bl, al				; save al
0465+  06C4 19 00       	mov al, 0
0466+  06C6 05 03       	syscall sys_io				; display AH
0467+  06C8 24          	mov ah, bl				; retrieve al
0468+  06C9 19 00       	mov al, 0
0469+  06CB 05 03       	syscall sys_io				; display AL
0470+  06CD             
0471+  06CD E5          	pop b
0472+  06CE E4          	pop a
0473+  06CF 09          	ret
0474+  06D0             
0475+  06D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  06D0             ; INPUT 16BIT HEX INTEGER
0477+  06D0             ; read 16bit integer into A
0478+  06D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  06D0             scan_u16x:
0480+  06D0 F8 10 00    	enter 16
0481+  06D3 D8          	push b
0482+  06D4 DA          	push d
0483+  06D5             
0484+  06D5 FA F1 FF    	lea d, [bp + -15]
0485+  06D8 07 1F 05    	call gets				; get number
0486+  06DB             
0487+  06DB 32          	mov bl, [d]
0488+  06DC 37          	mov bh, bl
0489+  06DD 33 01 00    	mov bl, [d + 1]
0490+  06E0 07 CD 04    	call atoi				; convert to int in AL
0491+  06E3 23          	mov ah, al				; move to AH
0492+  06E4             
0493+  06E4 33 02 00    	mov bl, [d + 2]
0494+  06E7 37          	mov bh, bl
0495+  06E8 33 03 00    	mov bl, [d + 3]
0496+  06EB 07 CD 04    	call atoi				; convert to int in AL
0497+  06EE             
0498+  06EE E7          	pop d
0499+  06EF E5          	pop b
0500+  06F0 F9          	leave
0501+  06F1 09          	ret
0502+  06F2             
0503+  06F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  06F2             ; PRINT 8bit HEX INTEGER
0505+  06F2             ; integer value in reg bl
0506+  06F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  06F2             print_u8x:
0508+  06F2 D7          	push a
0509+  06F3 DD          	push bl
0510+  06F4             
0511+  06F4 07 DF 04    	call itoa				; convert bl to char in A
0512+  06F7 2F          	mov bl, al				; save al
0513+  06F8 19 00       	mov al, 0
0514+  06FA 05 03       	syscall sys_io				; display AH
0515+  06FC 24          	mov ah, bl				; retrieve al
0516+  06FD 19 00       	mov al, 0
0517+  06FF 05 03       	syscall sys_io				; display AL
0518+  0701             
0519+  0701 EA          	pop bl
0520+  0702 E4          	pop a
0521+  0703 09          	ret
0522+  0704             
0523+  0704             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0704             ; print 8bit decimal unsigned number
0525+  0704             ; input number in AL
0526+  0704             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0704             print_u8d:
0528+  0704 D7          	push a
0529+  0705 D8          	push b
0530+  0706             
0531+  0706 22 00       	mov ah, 0
0532+  0708 26 64 00    	mov b, 100
0533+  070B AE          	div a, b
0534+  070C D8          	push b			; save remainder
0535+  070D B9 00       	cmp al, 0
0536+  070F C6 19 07    	je skip100
0537+  0712 6A 30       	add al, $30
0538+  0714 23          	mov ah, al
0539+  0715 19 00       	mov al, 0
0540+  0717 05 03       	syscall sys_io	; print coeff
0541+  0719             skip100:
0542+  0719 E4          	pop a
0543+  071A 22 00       	mov ah, 0
0544+  071C 26 0A 00    	mov b, 10
0545+  071F AE          	div a, b
0546+  0720 D8          	push b			; save remainder
0547+  0721 B9 00       	cmp al, 0
0548+  0723 C6 2D 07    	je skip10
0549+  0726 6A 30       	add al, $30
0550+  0728 23          	mov ah, al
0551+  0729 19 00       	mov al, 0
0552+  072B 05 03       	syscall sys_io	; print coeff
0553+  072D             skip10:
0554+  072D E4          	pop a
0555+  072E 1B          	mov al, bl
0556+  072F 6A 30       	add al, $30
0557+  0731 23          	mov ah, al
0558+  0732 19 00       	mov al, 0
0559+  0734 05 03       	syscall sys_io	; print coeff
0560+  0736 E5          	pop b
0561+  0737 E4          	pop a
0562+  0738 09          	ret
0563+  0739             
0564+  0739             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0739             ; INPUT 8BIT HEX INTEGER
0566+  0739             ; read 8bit integer into AL
0567+  0739             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0739             scan_u8x:
0569+  0739 F8 04 00    	enter 4
0570+  073C D8          	push b
0571+  073D DA          	push d
0572+  073E             
0573+  073E FA FD FF    	lea d, [bp + -3]
0574+  0741 07 1F 05    	call gets				; get number
0575+  0744             
0576+  0744 32          	mov bl, [d]
0577+  0745 37          	mov bh, bl
0578+  0746 33 01 00    	mov bl, [d + 1]
0579+  0749 07 CD 04    	call atoi				; convert to int in AL
0580+  074C             
0581+  074C E7          	pop d
0582+  074D E5          	pop b
0583+  074E F9          	leave
0584+  074F 09          	ret
0585+  0750             
0586+  0750             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0750             ; input decimal number
0588+  0750             ; result in A
0589+  0750             ; 655'\0'
0590+  0750             ; low--------high
0591+  0750             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  0750             scan_u16d:
0593+  0750 F8 08 00    	enter 8
0594+  0753 E2          	push si
0595+  0754 D8          	push b
0596+  0755 D9          	push c
0597+  0756 DA          	push d
0598+  0757 FA F9 FF    	lea d, [bp +- 7]
0599+  075A 07 1F 05    	call gets
0600+  075D 07 4D 04    	call strlen			; get string length in C
0601+  0760 7E          	dec c
0602+  0761 FD 4E       	mov si, d
0603+  0763 12          	mov a, c
0604+  0764 FD 99       	shl a
0605+  0766 3B B5 04    	mov d, table_power
0606+  0769 59          	add d, a
0607+  076A 38 00 00    	mov c, 0
0608+  076D             mul_loop:
0609+  076D F6          	lodsb			; load ASCII to al
0610+  076E B9 00       	cmp al, 0
0611+  0770 C6 83 07    	je mul_exit
0612+  0773 6F 30       	sub al, $30		; make into integer
0613+  0775 22 00       	mov ah, 0
0614+  0777 2A          	mov b, [d]
0615+  0778 AC          	mul a, b			; result in B since it fits in 16bits
0616+  0779 11          	mov a, b
0617+  077A 28          	mov b, c
0618+  077B 54          	add a, b
0619+  077C 39          	mov c, a
0620+  077D 63 02 00    	sub d, 2
0621+  0780 0A 6D 07    	jmp mul_loop
0622+  0783             mul_exit:
0623+  0783 12          	mov a, c
0624+  0784 E7          	pop d
0625+  0785 E6          	pop c
0626+  0786 E5          	pop b
0627+  0787 EF          	pop si
0628+  0788 F9          	leave
0629+  0789 09          	ret
0016   078A             .include "ctype.asm"
0001+  078A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  078A             ; ctype.s
0003+  078A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  078A             
0005+  078A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  078A             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  078A             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  078A             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  078A             ;; characters are supported.
0010+  078A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  078A             ;; isalnum 
0012+  078A             ;; isalpha 
0013+  078A             ;; islower 
0014+  078A             ;; isupper 
0015+  078A             ;; isdigit 
0016+  078A             ;; isxdigit
0017+  078A             ;; iscntrl 
0018+  078A             ;; isgraph 
0019+  078A             ;; isspace 
0020+  078A             ;; isblank 
0021+  078A             ;; isprint 
0022+  078A             ;; ispunct 
0023+  078A             ;; tolower 
0024+  078A             ;; toupper
0025+  078A             
0026+  078A             
0027+  078A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  078A             ;; IS ALPHANUMERIC
0029+  078A             ;; sets ZF according with result
0030+  078A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  078A             isalnum:
0032+  078A 07 A7 07    	call isalpha
0033+  078D C6 93 07    	je isalnum_exit
0034+  0790 07 94 07    	call isdigit
0035+  0793             isalnum_exit:
0036+  0793 09          	ret	
0037+  0794             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0794             ;; IS DIGIT
0039+  0794             ;; sets ZF according with result
0040+  0794             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0794             isdigit:
0042+  0794 DB          	push al
0043+  0795 B9 30       	cmp al, '0'
0044+  0797 C8 A3 07    	jlu isdigit_false
0045+  079A B9 39       	cmp al, '9'
0046+  079C D1 A3 07    	jgu isdigit_false
0047+  079F 87 00       	and al, 0	; set ZF
0048+  07A1 E8          	pop al
0049+  07A2 09          	ret
0050+  07A3             isdigit_false:
0051+  07A3 8B 01       	or al, 1	; clear ZF
0052+  07A5 E8          	pop al
0053+  07A6 09          	ret	
0054+  07A7             	
0055+  07A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  07A7             ;; IS ALPHA
0057+  07A7             ;; sets ZF according with result
0058+  07A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  07A7             isalpha:
0060+  07A7 DB          	push al
0061+  07A8 B9 5F       	cmp al, '_'
0062+  07AA C6 CA 07    	je isalpha_true
0063+  07AD B9 2E       	cmp al, '.'
0064+  07AF C6 CA 07    	je isalpha_true
0065+  07B2 B9 41       	cmp al, 'A'
0066+  07B4 C8 C6 07    	jlu isalpha_false
0067+  07B7 B9 7A       	cmp al, 'z'
0068+  07B9 D1 C6 07    	jgu isalpha_false
0069+  07BC B9 5A       	cmp al, 'Z'
0070+  07BE D0 CA 07    	jleu isalpha_true
0071+  07C1 B9 61       	cmp al, 'a'
0072+  07C3 C9 CA 07    	jgeu isalpha_true
0073+  07C6             isalpha_false:
0074+  07C6 8B 01       	or al, 1	; clear ZF
0075+  07C8 E8          	pop al
0076+  07C9 09          	ret
0077+  07CA             isalpha_true:
0078+  07CA 87 00       	and al, 0	; set ZF
0079+  07CC E8          	pop al
0080+  07CD 09          	ret
0081+  07CE             
0082+  07CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  07CE             ;; IS PATH-ALPHA
0084+  07CE             ;; sets ZF according with result
0085+  07CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  07CE             ispath:
0087+  07CE DB          	push al
0088+  07CF 07 94 07    	call isdigit
0089+  07D2 C6 FC 07    	je ispath_true
0090+  07D5 B9 5F       	cmp al, '_'
0091+  07D7 C6 FC 07    	je ispath_true
0092+  07DA B9 2F       	cmp al, '/'
0093+  07DC C6 FC 07    	je ispath_true
0094+  07DF B9 2E       	cmp al, '.'
0095+  07E1 C6 FC 07    	je ispath_true
0096+  07E4 B9 41       	cmp al, 'A'
0097+  07E6 C8 F8 07    	jlu ispath_false
0098+  07E9 B9 7A       	cmp al, 'z'
0099+  07EB D1 F8 07    	jgu ispath_false
0100+  07EE B9 5A       	cmp al, 'Z'
0101+  07F0 D0 FC 07    	jleu ispath_true
0102+  07F3 B9 61       	cmp al, 'a'
0103+  07F5 C9 FC 07    	jgeu ispath_true
0104+  07F8             ispath_false:
0105+  07F8 8B 01       	or al, 1	; clear ZF
0106+  07FA E8          	pop al
0107+  07FB 09          	ret
0108+  07FC             ispath_true:
0109+  07FC 87 00       	and al, 0	; set ZF
0110+  07FE E8          	pop al
0111+  07FF 09          	ret
0112+  0800             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0800             ;; IS SPACE
0114+  0800             ;; sets ZF according with result
0115+  0800             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0800             isspace:
0117+  0800 B9 20       	cmp al, $20		; ' '
0118+  0802 C6 16 08    	je isspace_exit
0119+  0805 B9 09       	cmp al, $09		; '\t'
0120+  0807 C6 16 08    	je isspace_exit
0121+  080A B9 0A       	cmp al, $0A		; '\n'
0122+  080C C6 16 08    	je isspace_exit
0123+  080F B9 0D       	cmp al, $0D		; '\r'
0124+  0811 C6 16 08    	je isspace_exit
0125+  0814 B9 0B       	cmp al, $0B		; '\v'
0126+  0816             isspace_exit:
0127+  0816 09          	ret	
0128+  0817             
0129+  0817             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0817             ; TO LOWER
0131+  0817             ; input in AL
0132+  0817             ; output in AL
0133+  0817             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0817             to_lower:
0135+  0817 B9 5A       	cmp al, 'Z'
0136+  0819 D1 1E 08    	jgu to_lower_ret
0137+  081C 6A 20       	add al, $20				; convert to lower case
0138+  081E             to_lower_ret:
0139+  081E 09          	ret
0140+  081F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  081F             ; TO UPPER
0142+  081F             ; input in AL
0143+  081F             ; output in AL
0144+  081F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  081F             to_upper:
0146+  081F B9 61       	cmp al, 'a'
0147+  0821 C8 26 08    	jlu to_upper_ret
0148+  0824 6F 20       	sub al, $20			; convert to upper case
0149+  0826             to_upper_ret:
0150+  0826 09          	ret
0151+  0827             
0017   0827             
0018   0827             .end
0019   0827             
0020   0827             
0021   0827             
tasm: Number of errors = 0
