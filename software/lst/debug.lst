0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0000             
0004   0000             main:
0005   0000 10 00 00    	mov a, 0
0006   0003             main_L0:
0007   0003 05 00       	syscall sys_bkpt
0008   0005 77          	inc a
0009   0006 AF 20 00    	cmp a, $20
0010   0009 C6 0F 00    	je end
0011   000C 0A 03 00    	jmp main_L0
0012   000F             end:
0013   000F 09          	ret
0014   0010             
0015   0010             .include "stdio.asm"
0001+  0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0010             ; stdio.s
0003+  0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0010             .include "string.asm"
0001++ 0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0010             ; string.s
0003++ 0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0010             
0005++ 0010             
0006++ 0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0010             ; strrev
0008++ 0010             ; reverse a string
0009++ 0010             ; D = string address
0010++ 0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0010             ; 01234
0012++ 0010             strrev:
0013++ 0010 4B          	pusha
0014++ 0011 07 57 00    	call strlen	; length in C
0015++ 0014 12          	mov a, c
0016++ 0015 AF 01 00    	cmp a, 1
0017++ 0018 D0 32 00    	jleu strrev_end	; check string length. string len must be > 1
0018++ 001B 7D          	dec a
0019++ 001C FD 4E       	mov si, d	; beginning of string
0020++ 001E FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0020 59          	add d, a	; end of string
0022++ 0021 12          	mov a, c
0023++ 0022 FD 9B       	shr a		; divide by 2
0024++ 0024 39          	mov c, a	; C now counts the steps
0025++ 0025             strrev_L0:
0026++ 0025 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0026 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0027 3E          	mov [d], al	; store left char into right side
0029++ 0028 1B          	mov al, bl
0030++ 0029 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 002A 7E          	dec c
0032++ 002B 7F          	dec d
0033++ 002C C2 00 00    	cmp c, 0
0034++ 002F C7 25 00    	jne strrev_L0
0035++ 0032             strrev_end:
0036++ 0032 4C          	popa
0037++ 0033 09          	ret
0038++ 0034             	
0039++ 0034             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0034             ; strchr
0041++ 0034             ; search string in D for char in AL
0042++ 0034             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0034             strchr:
0044++ 0034             strchr_L0:
0045++ 0034 32          	mov bl, [d]
0046++ 0035 C1 00       	cmp bl, 0
0047++ 0037 C6 42 00    	je strchr_end
0048++ 003A BA          	cmp al, bl
0049++ 003B C6 42 00    	je strchr_end
0050++ 003E 79          	inc d
0051++ 003F 0A 34 00    	jmp strchr_L0
0052++ 0042             strchr_end:
0053++ 0042 1B          	mov al, bl
0054++ 0043 09          	ret
0055++ 0044             
0056++ 0044             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0044             ; strstr
0058++ 0044             ; find sub-string
0059++ 0044             ; str1 in SI
0060++ 0044             ; str2 in DI
0061++ 0044             ; SI points to end of source string
0062++ 0044             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0044             strstr:
0064++ 0044 DB          	push al
0065++ 0045 DA          	push d
0066++ 0046 E3          	push di
0067++ 0047             strstr_loop:
0068++ 0047 F3          	cmpsb					; compare a byte of the strings
0069++ 0048 C7 53 00    	jne strstr_ret
0070++ 004B FC 00 00    	lea d, [di + 0]
0071++ 004E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0050 C7 47 00    	jne strstr_loop				; equal chars but not at end
0073++ 0053             strstr_ret:
0074++ 0053 F0          	pop di
0075++ 0054 E7          	pop d
0076++ 0055 E8          	pop al
0077++ 0056 09          	ret
0078++ 0057             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0057             ; length of null terminated string
0080++ 0057             ; result in C
0081++ 0057             ; pointer in D
0082++ 0057             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0057             strlen:
0084++ 0057 DA          	push d
0085++ 0058 38 00 00    	mov c, 0
0086++ 005B             strlen_L1:
0087++ 005B BD 00       	cmp byte [d], 0
0088++ 005D C6 65 00    	je strlen_ret
0089++ 0060 79          	inc d
0090++ 0061 78          	inc c
0091++ 0062 0A 5B 00    	jmp strlen_L1
0092++ 0065             strlen_ret:
0093++ 0065 E7          	pop d
0094++ 0066 09          	ret
0095++ 0067             
0096++ 0067             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0067             ; STRCMP
0098++ 0067             ; compare two strings
0099++ 0067             ; str1 in SI
0100++ 0067             ; str2 in DI
0101++ 0067             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0067             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0067             strcmp:
0104++ 0067 DB          	push al
0105++ 0068 DA          	push d
0106++ 0069 E3          	push di
0107++ 006A E2          	push si
0108++ 006B             strcmp_loop:
0109++ 006B F3          	cmpsb					; compare a byte of the strings
0110++ 006C C7 77 00    	jne strcmp_ret
0111++ 006F FB FF FF    	lea d, [si +- 1]
0112++ 0072 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0074 C7 6B 00    	jne strcmp_loop				; equal chars but not at end
0114++ 0077             strcmp_ret:
0115++ 0077 EF          	pop si
0116++ 0078 F0          	pop di
0117++ 0079 E7          	pop d
0118++ 007A E8          	pop al
0119++ 007B 09          	ret
0120++ 007C             
0121++ 007C             
0122++ 007C             ; STRCPY
0123++ 007C             ; copy null terminated string from SI to DI
0124++ 007C             ; source in SI
0125++ 007C             ; destination in DI
0126++ 007C             strcpy:
0127++ 007C E2          	push si
0128++ 007D E3          	push di
0129++ 007E DB          	push al
0130++ 007F             strcpy_L1:
0131++ 007F F6          	lodsb
0132++ 0080 F7          	stosb
0133++ 0081 B9 00       	cmp al, 0
0134++ 0083 C7 7F 00    	jne strcpy_L1
0135++ 0086             strcpy_end:
0136++ 0086 E8          	pop al
0137++ 0087 F0          	pop di
0138++ 0088 EF          	pop si
0139++ 0089 09          	ret
0140++ 008A             
0141++ 008A             ; STRCAT
0142++ 008A             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 008A             ; source in SI
0144++ 008A             ; destination in DI
0145++ 008A             strcat:
0146++ 008A E2          	push si
0147++ 008B E3          	push di
0148++ 008C D7          	push a
0149++ 008D DA          	push d
0150++ 008E 50          	mov a, di
0151++ 008F 3C          	mov d, a
0152++ 0090             strcat_goto_end_L1:
0153++ 0090 BD 00       	cmp byte[d], 0
0154++ 0092 C6 99 00    	je strcat_start
0155++ 0095 79          	inc d
0156++ 0096 0A 90 00    	jmp strcat_goto_end_L1
0157++ 0099             strcat_start:
0158++ 0099 FD 50       	mov di, d
0159++ 009B             strcat_L1:
0160++ 009B F6          	lodsb
0161++ 009C F7          	stosb
0162++ 009D B9 00       	cmp al, 0
0163++ 009F C7 9B 00    	jne strcat_L1
0164++ 00A2             strcat_end:
0165++ 00A2 E7          	pop d
0166++ 00A3 E4          	pop a
0167++ 00A4 F0          	pop di
0168++ 00A5 EF          	pop si
0169++ 00A6 09          	ret
0005+  00A7             
0006+  00A7 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  00AB 34 35 36 37 
0006+  00AF 38 39 41 42 
0006+  00B3 43 44 45 46 
0007+  00B7             
0008+  00B7 01 00       table_power:.dw 1
0009+  00B9 0A 00       			.dw 10
0010+  00BB 64 00       			.dw 100
0011+  00BD E8 03       			.dw 1000
0012+  00BF 10 27       			.dw 10000
0013+  00C1             
0014+  00C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  00C1             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  00C1             ; ASCII in BL
0017+  00C1             ; result in AL
0018+  00C1             ; ascii for F = 0100 0110
0019+  00C1             ; ascii for 9 = 0011 1001
0020+  00C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  00C1             hex_ascii_encode:
0022+  00C1 1B          	mov al, bl
0023+  00C2 93 40       	test al, $40				; test if letter or number
0024+  00C4 C7 CA 00    	jnz hex_letter
0025+  00C7 87 0F       	and al, $0F				; get number
0026+  00C9 09          	ret
0027+  00CA             hex_letter:
0028+  00CA 87 0F       	and al, $0F				; get letter
0029+  00CC 6A 09       	add al, 9
0030+  00CE 09          	ret
0031+  00CF             
0032+  00CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  00CF             ; ATOI
0034+  00CF             ; 2 letter hex string in B
0035+  00CF             ; 8bit integer returned in AL
0036+  00CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  00CF             atoi:
0038+  00CF D8          	push b
0039+  00D0 07 C1 00    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  00D3 30          	mov bl, bh
0041+  00D4 DB          	push al					; save a
0042+  00D5 07 C1 00    	call hex_ascii_encode
0043+  00D8 EA          	pop bl	
0044+  00D9 FD 9E 04    	shl al, 4
0045+  00DC 8C          	or al, bl
0046+  00DD E5          	pop b
0047+  00DE 09          	ret	
0048+  00DF             
0049+  00DF             
0050+  00DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  00DF             ; printf
0052+  00DF             ; no need for explanations!
0053+  00DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  00DF             printf:
0055+  00DF 09          	ret
0056+  00E0             
0057+  00E0             
0058+  00E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  00E0             ; scanf
0060+  00E0             ; no need for explanations!
0061+  00E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  00E0             scanf:
0063+  00E0 09          	ret
0064+  00E1             
0065+  00E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  00E1             ; ITOA
0067+  00E1             ; 8bit value in BL
0068+  00E1             ; 2 byte ASCII result in A
0069+  00E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  00E1             itoa:
0071+  00E1 DA          	push d
0072+  00E2 D8          	push b
0073+  00E3 A7 00       	mov bh, 0
0074+  00E5 FD A4 04    	shr bl, 4	
0075+  00E8 74          	mov d, b
0076+  00E9 1F A7 00    	mov al, [d + s_hex_digits]
0077+  00EC 23          	mov ah, al
0078+  00ED             	
0079+  00ED E5          	pop b
0080+  00EE D8          	push b
0081+  00EF A7 00       	mov bh, 0
0082+  00F1 FD 87 0F    	and bl, $0F
0083+  00F4 74          	mov d, b
0084+  00F5 1F A7 00    	mov al, [d + s_hex_digits]
0085+  00F8 E5          	pop b
0086+  00F9 E7          	pop d
0087+  00FA 09          	ret
0088+  00FB             
0089+  00FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  00FB             ; HEX STRING TO BINARY
0091+  00FB             ; di = destination address
0092+  00FB             ; si = source
0093+  00FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  00FB             hex_to_int:
0095+  00FB             hex_to_int_L1:
0096+  00FB F6          	lodsb					; load from [SI] to AL
0097+  00FC B9 00       	cmp al, 0				; check if ASCII 0
0098+  00FE C6 0B 01    	jz hex_to_int_ret
0099+  0101 36          	mov bh, al
0100+  0102 F6          	lodsb
0101+  0103 2F          	mov bl, al
0102+  0104 07 CF 00    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0107 F7          	stosb					; store AL to [DI]
0104+  0108 0A FB 00    	jmp hex_to_int_L1
0105+  010B             hex_to_int_ret:
0106+  010B 09          	ret		
0107+  010C             
0108+  010C             
0109+  010C             
0110+  010C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  010C             ; GETCHAR
0112+  010C             ; char in ah
0113+  010C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  010C             getchar:
0115+  010C DB          	push al
0116+  010D             getchar_retry:
0117+  010D FD 0C       	sti
0118+  010F 19 01       	mov al, 1
0119+  0111 05 03       	syscall sys_io			; receive in AH
0120+  0113 B9 00       	cmp al, 0			; check if any char was receive
0121+  0115 C6 0D 01    	je getchar_retry
0122+  0118 E8          	pop al
0123+  0119 09          	ret
0124+  011A             
0125+  011A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  011A             ; PUTCHAR
0127+  011A             ; char in ah
0128+  011A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  011A             putchar:
0130+  011A D7          	push a
0131+  011B 19 00       	mov al, 0
0132+  011D 05 03       	syscall sys_io			; char in AH
0133+  011F E4          	pop a
0134+  0120 09          	ret
0135+  0121             
0136+  0121             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  0121             ;; INPUT A STRING
0138+  0121             ;; terminates with null
0139+  0121             ;; pointer in D
0140+  0121             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0121             gets:
0142+  0121 D7          	push a
0143+  0122 DA          	push d
0144+  0123             gets_loop:
0145+  0123 FD 0C       	sti
0146+  0125 19 01       	mov al, 1
0147+  0127 05 03       	syscall sys_io			; receive in AH
0148+  0129 B9 00       	cmp al, 0				; check error code (AL)
0149+  012B C6 23 01    	je gets_loop			; if no char received, retry
0150+  012E             
0151+  012E 76 1B       	cmp ah, 27
0152+  0130 C6 51 01    	je gets_telnet_escape
0153+  0133 76 0A       	cmp ah, $0A				; LF
0154+  0135 C6 AA 01    	je gets_end
0155+  0138 76 0D       	cmp ah, $0D				; CR
0156+  013A C6 AA 01    	je gets_end
0157+  013D 76 5C       	cmp ah, $5C				; '\\'
0158+  013F C6 81 01    	je gets_escape
0159+  0142             	
0160+  0142 76 08       	cmp ah, $08			; check for backspace
0161+  0144 C6 4D 01    	je gets_backspace
0162+  0147             
0163+  0147 1A          	mov al, ah
0164+  0148 3E          	mov [d], al
0165+  0149 79          	inc d
0166+  014A 0A 23 01    	jmp gets_loop
0167+  014D             gets_backspace:
0168+  014D 7F          	dec d
0169+  014E 0A 23 01    	jmp gets_loop
0170+  0151             gets_telnet_escape:
0171+  0151 FD 0C       	sti
0172+  0153 19 01       	mov al, 1
0173+  0155 05 03       	syscall sys_io				; receive in AH without echo
0174+  0157 B9 00       	cmp al, 0					; check error code (AL)
0175+  0159 C6 51 01    	je gets_telnet_escape		; if no char received, retry
0176+  015C 76 5B       	cmp ah, '['
0177+  015E C7 23 01    	jne gets_loop
0178+  0161             gets_telnet_escape_phase2:
0179+  0161 FD 0C       	sti
0180+  0163 19 01       	mov al, 1
0181+  0165 05 03       	syscall sys_io					; receive in AH without echo
0182+  0167 B9 00       	cmp al, 0						; check error code (AL)
0183+  0169 C6 61 01    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  016C 76 44       	cmp ah, 'D'
0185+  016E C6 79 01    	je gets_left_arrow
0186+  0171 76 43       	cmp ah, 'C'
0187+  0173 C6 7D 01    	je gets_right_arrow
0188+  0176 0A 23 01    	jmp gets_loop
0189+  0179             gets_left_arrow:
0190+  0179 7F          	dec d
0191+  017A 0A 23 01    	jmp gets_loop
0192+  017D             gets_right_arrow:
0193+  017D 79          	inc d
0194+  017E 0A 23 01    	jmp gets_loop
0195+  0181             gets_escape:
0196+  0181 FD 0C       	sti
0197+  0183 19 01       	mov al, 1
0198+  0185 05 03       	syscall sys_io			; receive in AH
0199+  0187 B9 00       	cmp al, 0				; check error code (AL)
0200+  0189 C6 81 01    	je gets_escape			; if no char received, retry
0201+  018C 76 6E       	cmp ah, 'n'
0202+  018E C6 9C 01    	je gets_LF
0203+  0191 76 72       	cmp ah, 'r'
0204+  0193 C6 A3 01    	je gets_CR
0205+  0196 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  0197 3E          	mov [d], al
0207+  0198 79          	inc d
0208+  0199 0A 23 01    	jmp gets_loop
0209+  019C             gets_LF:
0210+  019C 19 0A       	mov al, $0A
0211+  019E 3E          	mov [d], al
0212+  019F 79          	inc d
0213+  01A0 0A 23 01    	jmp gets_loop
0214+  01A3             gets_CR:
0215+  01A3 19 0D       	mov al, $0D
0216+  01A5 3E          	mov [d], al
0217+  01A6 79          	inc d
0218+  01A7 0A 23 01    	jmp gets_loop
0219+  01AA             gets_end:
0220+  01AA 19 00       	mov al, 0
0221+  01AC 3E          	mov [d], al				; terminate string
0222+  01AD E7          	pop d
0223+  01AE E4          	pop a
0224+  01AF 09          	ret
0225+  01B0             
0226+  01B0             
0227+  01B0             
0228+  01B0             
0229+  01B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  01B0             ;; INPUT TEXT
0231+  01B0             ;; terminated with CTRL+D
0232+  01B0             ;; pointer in D
0233+  01B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  01B0             gettxt:
0235+  01B0 D7          	push a
0236+  01B1 DA          	push d
0237+  01B2             gettxt_loop:
0238+  01B2 19 01       	mov al, 1
0239+  01B4 05 03       	syscall sys_io			; receive in AH
0240+  01B6 B9 00       	cmp al, 0				; check error code (AL)
0241+  01B8 C6 B2 01    	je gettxt_loop		; if no char received, retry
0242+  01BB 76 04       	cmp ah, 4			; EOT
0243+  01BD C6 FB 01    	je gettxt_end
0244+  01C0 76 08       	cmp ah, $08			; check for backspace
0245+  01C2 C6 F7 01    	je gettxt_backspace
0246+  01C5 76 5C       	cmp ah, $5C				; '\\'
0247+  01C7 C6 D0 01    	je gettxt_escape
0248+  01CA 1A          	mov al, ah
0249+  01CB 3E          	mov [d], al
0250+  01CC 79          	inc d
0251+  01CD 0A B2 01    	jmp gettxt_loop
0252+  01D0             gettxt_escape:
0253+  01D0 19 01       	mov al, 1
0254+  01D2 05 03       	syscall sys_io			; receive in AH
0255+  01D4 B9 00       	cmp al, 0				; check error code (AL)
0256+  01D6 C6 D0 01    	je gettxt_escape		; if no char received, retry
0257+  01D9 76 6E       	cmp ah, 'n'
0258+  01DB C6 E9 01    	je gettxt_LF
0259+  01DE 76 72       	cmp ah, 'r'
0260+  01E0 C6 F0 01    	je gettxt_CR
0261+  01E3 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  01E4 3E          	mov [d], al
0263+  01E5 79          	inc d
0264+  01E6 0A B2 01    	jmp gettxt_loop
0265+  01E9             gettxt_LF:
0266+  01E9 19 0A       	mov al, $0A
0267+  01EB 3E          	mov [d], al
0268+  01EC 79          	inc d
0269+  01ED 0A B2 01    	jmp gettxt_loop
0270+  01F0             gettxt_CR:
0271+  01F0 19 0D       	mov al, $0D
0272+  01F2 3E          	mov [d], al
0273+  01F3 79          	inc d
0274+  01F4 0A B2 01    	jmp gettxt_loop
0275+  01F7             gettxt_backspace:
0276+  01F7 7F          	dec d
0277+  01F8 0A B2 01    	jmp gettxt_loop
0278+  01FB             gettxt_end:
0279+  01FB 19 00       	mov al, 0
0280+  01FD 3E          	mov [d], al				; terminate string
0281+  01FE E7          	pop d
0282+  01FF E4          	pop a
0283+  0200 09          	ret
0284+  0201             
0285+  0201             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0201             ; PRINT NEW LINE
0287+  0201             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  0201             printnl:
0289+  0201 D7          	push a
0290+  0202 10 00 0A    	mov a, $0A00
0291+  0205 05 03       	syscall sys_io
0292+  0207 10 00 0D    	mov a, $0D00
0293+  020A 05 03       	syscall sys_io
0294+  020C E4          	pop a
0295+  020D 09          	ret
0296+  020E             
0297+  020E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  020E             ; strtoint
0299+  020E             ; 4 digit hex string number in d
0300+  020E             ; integer returned in A
0301+  020E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  020E             strtointx:
0303+  020E D8          	push b
0304+  020F 32          	mov bl, [d]
0305+  0210 37          	mov bh, bl
0306+  0211 33 01 00    	mov bl, [d + 1]
0307+  0214 07 CF 00    	call atoi				; convert to int in AL
0308+  0217 23          	mov ah, al				; move to AH
0309+  0218 33 02 00    	mov bl, [d + 2]
0310+  021B 37          	mov bh, bl
0311+  021C 33 03 00    	mov bl, [d + 3]
0312+  021F 07 CF 00    	call atoi				; convert to int in AL
0313+  0222 E5          	pop b
0314+  0223 09          	ret
0315+  0224             
0316+  0224             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  0224             ; strtoint
0318+  0224             ; 5 digit base10 string number in d
0319+  0224             ; integer returned in A
0320+  0224             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  0224             strtoint:
0322+  0224 E2          	push si
0323+  0225 D8          	push b
0324+  0226 D9          	push c
0325+  0227 DA          	push d
0326+  0228 07 57 00    	call strlen			; get string length in C
0327+  022B 7E          	dec c
0328+  022C FD 4E       	mov si, d
0329+  022E 12          	mov a, c
0330+  022F FD 99       	shl a
0331+  0231 3B B7 00    	mov d, table_power
0332+  0234 59          	add d, a
0333+  0235 38 00 00    	mov c, 0
0334+  0238             strtoint_L0:
0335+  0238 F6          	lodsb			; load ASCII to al
0336+  0239 B9 00       	cmp al, 0
0337+  023B C6 4E 02    	je strtoint_end
0338+  023E 6F 30       	sub al, $30		; make into integer
0339+  0240 22 00       	mov ah, 0
0340+  0242 2A          	mov b, [d]
0341+  0243 AC          	mul a, b			; result in B since it fits in 16bits
0342+  0244 11          	mov a, b
0343+  0245 28          	mov b, c
0344+  0246 54          	add a, b
0345+  0247 39          	mov c, a
0346+  0248 63 02 00    	sub d, 2
0347+  024B 0A 38 02    	jmp strtoint_L0
0348+  024E             strtoint_end:
0349+  024E 12          	mov a, c
0350+  024F E7          	pop d
0351+  0250 E6          	pop c
0352+  0251 E5          	pop b
0353+  0252 EF          	pop si
0354+  0253 09          	ret
0355+  0254             
0356+  0254             
0357+  0254             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  0254             ; PRINT NULL TERMINATED STRING
0359+  0254             ; pointer in D
0360+  0254             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  0254             puts:
0362+  0254 D7          	push a
0363+  0255 DA          	push d
0364+  0256             puts_L1:
0365+  0256 1E          	mov al, [d]
0366+  0257 B9 00       	cmp al, 0
0367+  0259 C6 65 02    	jz puts_END
0368+  025C 23          	mov ah, al
0369+  025D 19 00       	mov al, 0
0370+  025F 05 03       	syscall sys_io
0371+  0261 79          	inc d
0372+  0262 0A 56 02    	jmp puts_L1
0373+  0265             puts_END:
0374+  0265 E7          	pop d
0375+  0266 E4          	pop a
0376+  0267 09          	ret
0377+  0268             
0378+  0268             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0268             ; PRINT N SIZE STRING
0380+  0268             ; pointer in D
0381+  0268             ; size in C
0382+  0268             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  0268             putsn:
0384+  0268 DB          	push al
0385+  0269 DA          	push d
0386+  026A D9          	push c
0387+  026B             putsn_L0:
0388+  026B 1E          	mov al, [d]
0389+  026C 23          	mov ah, al
0390+  026D 19 00       	mov al, 0
0391+  026F 05 03       	syscall sys_io
0392+  0271 79          	inc d
0393+  0272 7E          	dec c	
0394+  0273 C2 00 00    	cmp c, 0
0395+  0276 C7 6B 02    	jne putsn_L0
0396+  0279             putsn_end:
0397+  0279 E6          	pop c
0398+  027A E7          	pop d
0399+  027B E8          	pop al
0400+  027C 09          	ret
0401+  027D             
0402+  027D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  027D             ; print 16bit decimal number
0404+  027D             ; input number in A
0405+  027D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  027D             print_u16d:
0407+  027D D7          	push a
0408+  027E D8          	push b
0409+  027F 26 10 27    	mov b, 10000
0410+  0282 AE          	div a, b			; get 10000 coeff.
0411+  0283 07 A9 02    	call print_number
0412+  0286 11          	mov a, b
0413+  0287 26 E8 03    	mov b, 1000
0414+  028A AE          	div a, b			; get 10000 coeff.
0415+  028B 07 A9 02    	call print_number
0416+  028E 11          	mov a, b
0417+  028F 26 64 00    	mov b, 100
0418+  0292 AE          	div a, b
0419+  0293 07 A9 02    	call print_number
0420+  0296 11          	mov a, b
0421+  0297 26 0A 00    	mov b, 10
0422+  029A AE          	div a, b
0423+  029B 07 A9 02    	call print_number
0424+  029E 11          	mov a, b
0425+  029F 6A 30       	add al, $30
0426+  02A1 23          	mov ah, al
0427+  02A2 19 00       	mov al, 0
0428+  02A4 05 03       	syscall sys_io	; print coeff
0429+  02A6 E5          	pop b
0430+  02A7 E4          	pop a
0431+  02A8 09          	ret
0432+  02A9             
0433+  02A9             
0434+  02A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  02A9             ; if A == 0, print space
0436+  02A9             ; else print A
0437+  02A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  02A9             print_number:
0439+  02A9 6A 30       	add al, $30
0440+  02AB 23          	mov ah, al
0441+  02AC 07 1A 01    	call putchar
0442+  02AF 09          	ret
0443+  02B0             
0444+  02B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  02B0             ; PRINT 16BIT HEX INTEGER
0446+  02B0             ; integer value in reg B
0447+  02B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  02B0             print_u16x:
0449+  02B0 D7          	push a
0450+  02B1 D8          	push b
0451+  02B2 DD          	push bl
0452+  02B3 30          	mov bl, bh
0453+  02B4 07 E1 00    	call itoa				; convert bh to char in A
0454+  02B7 2F          	mov bl, al				; save al
0455+  02B8 19 00       	mov al, 0
0456+  02BA 05 03       	syscall sys_io				; display AH
0457+  02BC 24          	mov ah, bl				; retrieve al
0458+  02BD 19 00       	mov al, 0
0459+  02BF 05 03       	syscall sys_io				; display AL
0460+  02C1             
0461+  02C1 EA          	pop bl
0462+  02C2 07 E1 00    	call itoa				; convert bh to char in A
0463+  02C5 2F          	mov bl, al				; save al
0464+  02C6 19 00       	mov al, 0
0465+  02C8 05 03       	syscall sys_io				; display AH
0466+  02CA 24          	mov ah, bl				; retrieve al
0467+  02CB 19 00       	mov al, 0
0468+  02CD 05 03       	syscall sys_io				; display AL
0469+  02CF             
0470+  02CF E5          	pop b
0471+  02D0 E4          	pop a
0472+  02D1 09          	ret
0473+  02D2             
0474+  02D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  02D2             ; INPUT 16BIT HEX INTEGER
0476+  02D2             ; read 16bit integer into A
0477+  02D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  02D2             scan_u16x:
0479+  02D2 F8 10 00    	enter 16
0480+  02D5 D8          	push b
0481+  02D6 DA          	push d
0482+  02D7             
0483+  02D7 FA F1 FF    	lea d, [bp + -15]
0484+  02DA 07 21 01    	call gets				; get number
0485+  02DD             
0486+  02DD 32          	mov bl, [d]
0487+  02DE 37          	mov bh, bl
0488+  02DF 33 01 00    	mov bl, [d + 1]
0489+  02E2 07 CF 00    	call atoi				; convert to int in AL
0490+  02E5 23          	mov ah, al				; move to AH
0491+  02E6             
0492+  02E6 33 02 00    	mov bl, [d + 2]
0493+  02E9 37          	mov bh, bl
0494+  02EA 33 03 00    	mov bl, [d + 3]
0495+  02ED 07 CF 00    	call atoi				; convert to int in AL
0496+  02F0             
0497+  02F0 E7          	pop d
0498+  02F1 E5          	pop b
0499+  02F2 F9          	leave
0500+  02F3 09          	ret
0501+  02F4             
0502+  02F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  02F4             ; PRINT 8bit HEX INTEGER
0504+  02F4             ; integer value in reg bl
0505+  02F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  02F4             print_u8x:
0507+  02F4 D7          	push a
0508+  02F5 DD          	push bl
0509+  02F6             
0510+  02F6 07 E1 00    	call itoa				; convert bl to char in A
0511+  02F9 2F          	mov bl, al				; save al
0512+  02FA 19 00       	mov al, 0
0513+  02FC 05 03       	syscall sys_io				; display AH
0514+  02FE 24          	mov ah, bl				; retrieve al
0515+  02FF 19 00       	mov al, 0
0516+  0301 05 03       	syscall sys_io				; display AL
0517+  0303             
0518+  0303 EA          	pop bl
0519+  0304 E4          	pop a
0520+  0305 09          	ret
0521+  0306             
0522+  0306             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0306             ; print 8bit decimal unsigned number
0524+  0306             ; input number in AL
0525+  0306             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0306             print_u8d:
0527+  0306 D7          	push a
0528+  0307 D8          	push b
0529+  0308             
0530+  0308 22 00       	mov ah, 0
0531+  030A 26 64 00    	mov b, 100
0532+  030D AE          	div a, b
0533+  030E D8          	push b			; save remainder
0534+  030F B9 00       	cmp al, 0
0535+  0311 C6 1B 03    	je skip100
0536+  0314 6A 30       	add al, $30
0537+  0316 23          	mov ah, al
0538+  0317 19 00       	mov al, 0
0539+  0319 05 03       	syscall sys_io	; print coeff
0540+  031B             skip100:
0541+  031B E4          	pop a
0542+  031C 22 00       	mov ah, 0
0543+  031E 26 0A 00    	mov b, 10
0544+  0321 AE          	div a, b
0545+  0322 D8          	push b			; save remainder
0546+  0323 B9 00       	cmp al, 0
0547+  0325 C6 2F 03    	je skip10
0548+  0328 6A 30       	add al, $30
0549+  032A 23          	mov ah, al
0550+  032B 19 00       	mov al, 0
0551+  032D 05 03       	syscall sys_io	; print coeff
0552+  032F             skip10:
0553+  032F E4          	pop a
0554+  0330 1B          	mov al, bl
0555+  0331 6A 30       	add al, $30
0556+  0333 23          	mov ah, al
0557+  0334 19 00       	mov al, 0
0558+  0336 05 03       	syscall sys_io	; print coeff
0559+  0338 E5          	pop b
0560+  0339 E4          	pop a
0561+  033A 09          	ret
0562+  033B             
0563+  033B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  033B             ; INPUT 8BIT HEX INTEGER
0565+  033B             ; read 8bit integer into AL
0566+  033B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  033B             scan_u8x:
0568+  033B F8 04 00    	enter 4
0569+  033E D8          	push b
0570+  033F DA          	push d
0571+  0340             
0572+  0340 FA FD FF    	lea d, [bp + -3]
0573+  0343 07 21 01    	call gets				; get number
0574+  0346             
0575+  0346 32          	mov bl, [d]
0576+  0347 37          	mov bh, bl
0577+  0348 33 01 00    	mov bl, [d + 1]
0578+  034B 07 CF 00    	call atoi				; convert to int in AL
0579+  034E             
0580+  034E E7          	pop d
0581+  034F E5          	pop b
0582+  0350 F9          	leave
0583+  0351 09          	ret
0584+  0352             
0585+  0352             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  0352             ; input decimal number
0587+  0352             ; result in A
0588+  0352             ; 655'\0'
0589+  0352             ; low--------high
0590+  0352             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  0352             scan_u16d:
0592+  0352 F8 08 00    	enter 8
0593+  0355 E2          	push si
0594+  0356 D8          	push b
0595+  0357 D9          	push c
0596+  0358 DA          	push d
0597+  0359 FA F9 FF    	lea d, [bp +- 7]
0598+  035C 07 21 01    	call gets
0599+  035F 07 57 00    	call strlen			; get string length in C
0600+  0362 7E          	dec c
0601+  0363 FD 4E       	mov si, d
0602+  0365 12          	mov a, c
0603+  0366 FD 99       	shl a
0604+  0368 3B B7 00    	mov d, table_power
0605+  036B 59          	add d, a
0606+  036C 38 00 00    	mov c, 0
0607+  036F             mul_loop:
0608+  036F F6          	lodsb			; load ASCII to al
0609+  0370 B9 00       	cmp al, 0
0610+  0372 C6 85 03    	je mul_exit
0611+  0375 6F 30       	sub al, $30		; make into integer
0612+  0377 22 00       	mov ah, 0
0613+  0379 2A          	mov b, [d]
0614+  037A AC          	mul a, b			; result in B since it fits in 16bits
0615+  037B 11          	mov a, b
0616+  037C 28          	mov b, c
0617+  037D 54          	add a, b
0618+  037E 39          	mov c, a
0619+  037F 63 02 00    	sub d, 2
0620+  0382 0A 6F 03    	jmp mul_loop
0621+  0385             mul_exit:
0622+  0385 12          	mov a, c
0623+  0386 E7          	pop d
0624+  0387 E6          	pop c
0625+  0388 E5          	pop b
0626+  0389 EF          	pop si
0627+  038A F9          	leave
0628+  038B 09          	ret
0016   038C             
0017   038C             
0018   038C             
0019   038C             .end
tasm: Number of errors = 0
