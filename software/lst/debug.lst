0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0000             
0004   0000             main:
0005   0000 10 00 00    	mov a, 0
0006   0003             main_L0:
0007   0003 05 00       	syscall sys_bkpt
0008   0005 77          	inc a
0009   0006 AF 20 00    	cmp a, $20
0010   0009 C6 0F 00    	je end
0011   000C 0A 03 00    	jmp main_L0
0012   000F             end:
0013   000F 09          	ret
0014   0010             
0015   0010             .include "stdio.asm"
0001+  0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0010             ; stdio.s
0003+  0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0010             .include "string.asm"
0001++ 0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0010             ; string.s
0003++ 0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0010             
0005++ 0010             
0006++ 0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0010             ; strrev
0008++ 0010             ; reverse a string
0009++ 0010             ; D = string address
0010++ 0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0010             ; 01234
0012++ 0010             strrev:
0013++ 0010 4B          	pusha
0014++ 0011 07 57 00    	call strlen	; length in C
0015++ 0014 12          	mov a, c
0016++ 0015 AF 01 00    	cmp a, 1
0017++ 0018 D0 32 00    	jleu strrev_end	; check string length. string len must be > 1
0018++ 001B 7D          	dec a
0019++ 001C FD 4E       	mov si, d	; beginning of string
0020++ 001E FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0020 59          	add d, a	; end of string
0022++ 0021 12          	mov a, c
0023++ 0022 FD 9B       	shr a		; divide by 2
0024++ 0024 39          	mov c, a	; C now counts the steps
0025++ 0025             strrev_L0:
0026++ 0025 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0026 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0027 3E          	mov [d], al	; store left char into right side
0029++ 0028 1B          	mov al, bl
0030++ 0029 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 002A 7E          	dec c
0032++ 002B 7F          	dec d
0033++ 002C C2 00 00    	cmp c, 0
0034++ 002F C7 25 00    	jne strrev_L0
0035++ 0032             strrev_end:
0036++ 0032 4C          	popa
0037++ 0033 09          	ret
0038++ 0034             	
0039++ 0034             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0034             ; strchr
0041++ 0034             ; search string in D for char in AL
0042++ 0034             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0034             strchr:
0044++ 0034             strchr_L0:
0045++ 0034 32          	mov bl, [d]
0046++ 0035 C1 00       	cmp bl, 0
0047++ 0037 C6 42 00    	je strchr_end
0048++ 003A BA          	cmp al, bl
0049++ 003B C6 42 00    	je strchr_end
0050++ 003E 79          	inc d
0051++ 003F 0A 34 00    	jmp strchr_L0
0052++ 0042             strchr_end:
0053++ 0042 1B          	mov al, bl
0054++ 0043 09          	ret
0055++ 0044             
0056++ 0044             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0044             ; strstr
0058++ 0044             ; find sub-string
0059++ 0044             ; str1 in SI
0060++ 0044             ; str2 in DI
0061++ 0044             ; SI points to end of source string
0062++ 0044             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0044             strstr:
0064++ 0044 DB          	push al
0065++ 0045 DA          	push d
0066++ 0046 E3          	push di
0067++ 0047             strstr_loop:
0068++ 0047 F3          	cmpsb					; compare a byte of the strings
0069++ 0048 C7 53 00    	jne strstr_ret
0070++ 004B FC 00 00    	lea d, [di + 0]
0071++ 004E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0050 C7 47 00    	jne strstr_loop				; equal chars but not at end
0073++ 0053             strstr_ret:
0074++ 0053 F0          	pop di
0075++ 0054 E7          	pop d
0076++ 0055 E8          	pop al
0077++ 0056 09          	ret
0078++ 0057             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0057             ; length of null terminated string
0080++ 0057             ; result in C
0081++ 0057             ; pointer in D
0082++ 0057             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0057             strlen:
0084++ 0057 DA          	push d
0085++ 0058 38 00 00    	mov c, 0
0086++ 005B             strlen_L1:
0087++ 005B BD 00       	cmp byte [d], 0
0088++ 005D C6 65 00    	je strlen_ret
0089++ 0060 79          	inc d
0090++ 0061 78          	inc c
0091++ 0062 0A 5B 00    	jmp strlen_L1
0092++ 0065             strlen_ret:
0093++ 0065 E7          	pop d
0094++ 0066 09          	ret
0095++ 0067             
0096++ 0067             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0067             ; STRCMP
0098++ 0067             ; compare two strings
0099++ 0067             ; str1 in SI
0100++ 0067             ; str2 in DI
0101++ 0067             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0067             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0067             strcmp:
0104++ 0067 DB          	push al
0105++ 0068 DA          	push d
0106++ 0069 E3          	push di
0107++ 006A E2          	push si
0108++ 006B             strcmp_loop:
0109++ 006B F3          	cmpsb					; compare a byte of the strings
0110++ 006C C7 77 00    	jne strcmp_ret
0111++ 006F FB FF FF    	lea d, [si +- 1]
0112++ 0072 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0074 C7 6B 00    	jne strcmp_loop				; equal chars but not at end
0114++ 0077             strcmp_ret:
0115++ 0077 EF          	pop si
0116++ 0078 F0          	pop di
0117++ 0079 E7          	pop d
0118++ 007A E8          	pop al
0119++ 007B 09          	ret
0120++ 007C             
0121++ 007C             
0122++ 007C             ; STRCPY
0123++ 007C             ; copy null terminated string from SI to DI
0124++ 007C             ; source in SI
0125++ 007C             ; destination in DI
0126++ 007C             strcpy:
0127++ 007C E2          	push si
0128++ 007D E3          	push di
0129++ 007E DB          	push al
0130++ 007F             strcpy_L1:
0131++ 007F F6          	lodsb
0132++ 0080 F7          	stosb
0133++ 0081 B9 00       	cmp al, 0
0134++ 0083 C7 7F 00    	jne strcpy_L1
0135++ 0086             strcpy_end:
0136++ 0086 E8          	pop al
0137++ 0087 F0          	pop di
0138++ 0088 EF          	pop si
0139++ 0089 09          	ret
0140++ 008A             
0141++ 008A             ; STRCAT
0142++ 008A             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 008A             ; source in SI
0144++ 008A             ; destination in DI
0145++ 008A             strcat:
0146++ 008A E2          	push si
0147++ 008B E3          	push di
0148++ 008C D7          	push a
0149++ 008D DA          	push d
0150++ 008E 50          	mov a, di
0151++ 008F 3C          	mov d, a
0152++ 0090             strcat_goto_end_L1:
0153++ 0090 BD 00       	cmp byte[d], 0
0154++ 0092 C6 99 00    	je strcat_start
0155++ 0095 79          	inc d
0156++ 0096 0A 90 00    	jmp strcat_goto_end_L1
0157++ 0099             strcat_start:
0158++ 0099 FD 50       	mov di, d
0159++ 009B             strcat_L1:
0160++ 009B F6          	lodsb
0161++ 009C F7          	stosb
0162++ 009D B9 00       	cmp al, 0
0163++ 009F C7 9B 00    	jne strcat_L1
0164++ 00A2             strcat_end:
0165++ 00A2 E7          	pop d
0166++ 00A3 E4          	pop a
0167++ 00A4 F0          	pop di
0168++ 00A5 EF          	pop si
0169++ 00A6 09          	ret
0005+  00A7             
0006+  00A7 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  00AB 34 35 36 37 
0006+  00AF 38 39 41 42 
0006+  00B3 43 44 45 46 
0007+  00B7 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  00BB 1B 5B 48 00 
0008+  00BF             
0009+  00BF 01 00       table_power:.dw 1
0010+  00C1 0A 00       			.dw 10
0011+  00C3 64 00       			.dw 100
0012+  00C5 E8 03       			.dw 1000
0013+  00C7 10 27       			.dw 10000
0014+  00C9             
0015+  00C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  00C9             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  00C9             ; ASCII in BL
0018+  00C9             ; result in AL
0019+  00C9             ; ascii for F = 0100 0110
0020+  00C9             ; ascii for 9 = 0011 1001
0021+  00C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  00C9             hex_ascii_encode:
0023+  00C9 1B          	mov al, bl
0024+  00CA 93 40       	test al, $40				; test if letter or number
0025+  00CC C7 D2 00    	jnz hex_letter
0026+  00CF 87 0F       	and al, $0F				; get number
0027+  00D1 09          	ret
0028+  00D2             hex_letter:
0029+  00D2 87 0F       	and al, $0F				; get letter
0030+  00D4 6A 09       	add al, 9
0031+  00D6 09          	ret
0032+  00D7             
0033+  00D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  00D7             ; ATOI
0035+  00D7             ; 2 letter hex string in B
0036+  00D7             ; 8bit integer returned in AL
0037+  00D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  00D7             atoi:
0039+  00D7 D8          	push b
0040+  00D8 07 C9 00    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  00DB 30          	mov bl, bh
0042+  00DC DB          	push al					; save a
0043+  00DD 07 C9 00    	call hex_ascii_encode
0044+  00E0 EA          	pop bl	
0045+  00E1 FD 9E 04    	shl al, 4
0046+  00E4 8C          	or al, bl
0047+  00E5 E5          	pop b
0048+  00E6 09          	ret	
0049+  00E7             
0050+  00E7             
0051+  00E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  00E7             ; printf
0053+  00E7             ; no need for explanations!
0054+  00E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  00E7             printf:
0056+  00E7 09          	ret
0057+  00E8             
0058+  00E8             
0059+  00E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  00E8             ; scanf
0061+  00E8             ; no need for explanations!
0062+  00E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  00E8             scanf:
0064+  00E8 09          	ret
0065+  00E9             
0066+  00E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  00E9             ; ITOA
0068+  00E9             ; 8bit value in BL
0069+  00E9             ; 2 byte ASCII result in A
0070+  00E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  00E9             itoa:
0072+  00E9 DA          	push d
0073+  00EA D8          	push b
0074+  00EB A7 00       	mov bh, 0
0075+  00ED FD A4 04    	shr bl, 4	
0076+  00F0 74          	mov d, b
0077+  00F1 1F A7 00    	mov al, [d + s_hex_digits]
0078+  00F4 23          	mov ah, al
0079+  00F5             	
0080+  00F5 E5          	pop b
0081+  00F6 D8          	push b
0082+  00F7 A7 00       	mov bh, 0
0083+  00F9 FD 87 0F    	and bl, $0F
0084+  00FC 74          	mov d, b
0085+  00FD 1F A7 00    	mov al, [d + s_hex_digits]
0086+  0100 E5          	pop b
0087+  0101 E7          	pop d
0088+  0102 09          	ret
0089+  0103             
0090+  0103             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0103             ; HEX STRING TO BINARY
0092+  0103             ; di = destination address
0093+  0103             ; si = source
0094+  0103             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0103             hex_to_int:
0096+  0103             hex_to_int_L1:
0097+  0103 F6          	lodsb					; load from [SI] to AL
0098+  0104 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0106 C6 13 01    	jz hex_to_int_ret
0100+  0109 36          	mov bh, al
0101+  010A F6          	lodsb
0102+  010B 2F          	mov bl, al
0103+  010C 07 D7 00    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  010F F7          	stosb					; store AL to [DI]
0105+  0110 0A 03 01    	jmp hex_to_int_L1
0106+  0113             hex_to_int_ret:
0107+  0113 09          	ret		
0108+  0114             
0109+  0114             
0110+  0114             
0111+  0114             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0114             ; GETCHAR
0113+  0114             ; char in ah
0114+  0114             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0114             getchar:
0116+  0114 DB          	push al
0117+  0115             getchar_retry:
0118+  0115 FD 0C       	sti
0119+  0117 19 01       	mov al, 1
0120+  0119 05 03       	syscall sys_io			; receive in AH
0121+  011B B9 00       	cmp al, 0			; check if any char was receive
0122+  011D C6 15 01    	je getchar_retry
0123+  0120 E8          	pop al
0124+  0121 09          	ret
0125+  0122             
0126+  0122             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0122             ; PUTCHAR
0128+  0122             ; char in ah
0129+  0122             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0122             putchar:
0131+  0122 D7          	push a
0132+  0123 19 00       	mov al, 0
0133+  0125 05 03       	syscall sys_io			; char in AH
0134+  0127 E4          	pop a
0135+  0128 09          	ret
0136+  0129             
0137+  0129             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0129             ;; INPUT A STRING
0139+  0129             ;; terminates with null
0140+  0129             ;; pointer in D
0141+  0129             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0129             gets:
0143+  0129 D7          	push a
0144+  012A DA          	push d
0145+  012B             gets_loop:
0146+  012B FD 0C       	sti
0147+  012D 19 01       	mov al, 1
0148+  012F 05 03       	syscall sys_io			; receive in AH
0149+  0131 B9 00       	cmp al, 0				; check error code (AL)
0150+  0133 C6 2B 01    	je gets_loop			; if no char received, retry
0151+  0136             
0152+  0136 76 1B       	cmp ah, 27
0153+  0138 C6 59 01    	je gets_telnet_escape
0154+  013B 76 0A       	cmp ah, $0A				; LF
0155+  013D C6 B2 01    	je gets_end
0156+  0140 76 0D       	cmp ah, $0D				; CR
0157+  0142 C6 B2 01    	je gets_end
0158+  0145 76 5C       	cmp ah, $5C				; '\\'
0159+  0147 C6 89 01    	je gets_escape
0160+  014A             	
0161+  014A 76 08       	cmp ah, $08			; check for backspace
0162+  014C C6 55 01    	je gets_backspace
0163+  014F             
0164+  014F 1A          	mov al, ah
0165+  0150 3E          	mov [d], al
0166+  0151 79          	inc d
0167+  0152 0A 2B 01    	jmp gets_loop
0168+  0155             gets_backspace:
0169+  0155 7F          	dec d
0170+  0156 0A 2B 01    	jmp gets_loop
0171+  0159             gets_telnet_escape:
0172+  0159 FD 0C       	sti
0173+  015B 19 01       	mov al, 1
0174+  015D 05 03       	syscall sys_io				; receive in AH without echo
0175+  015F B9 00       	cmp al, 0					; check error code (AL)
0176+  0161 C6 59 01    	je gets_telnet_escape		; if no char received, retry
0177+  0164 76 5B       	cmp ah, '['
0178+  0166 C7 2B 01    	jne gets_loop
0179+  0169             gets_telnet_escape_phase2:
0180+  0169 FD 0C       	sti
0181+  016B 19 01       	mov al, 1
0182+  016D 05 03       	syscall sys_io					; receive in AH without echo
0183+  016F B9 00       	cmp al, 0						; check error code (AL)
0184+  0171 C6 69 01    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0174 76 44       	cmp ah, 'D'
0186+  0176 C6 81 01    	je gets_left_arrow
0187+  0179 76 43       	cmp ah, 'C'
0188+  017B C6 85 01    	je gets_right_arrow
0189+  017E 0A 2B 01    	jmp gets_loop
0190+  0181             gets_left_arrow:
0191+  0181 7F          	dec d
0192+  0182 0A 2B 01    	jmp gets_loop
0193+  0185             gets_right_arrow:
0194+  0185 79          	inc d
0195+  0186 0A 2B 01    	jmp gets_loop
0196+  0189             gets_escape:
0197+  0189 FD 0C       	sti
0198+  018B 19 01       	mov al, 1
0199+  018D 05 03       	syscall sys_io			; receive in AH
0200+  018F B9 00       	cmp al, 0				; check error code (AL)
0201+  0191 C6 89 01    	je gets_escape			; if no char received, retry
0202+  0194 76 6E       	cmp ah, 'n'
0203+  0196 C6 A4 01    	je gets_LF
0204+  0199 76 72       	cmp ah, 'r'
0205+  019B C6 AB 01    	je gets_CR
0206+  019E 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  019F 3E          	mov [d], al
0208+  01A0 79          	inc d
0209+  01A1 0A 2B 01    	jmp gets_loop
0210+  01A4             gets_LF:
0211+  01A4 19 0A       	mov al, $0A
0212+  01A6 3E          	mov [d], al
0213+  01A7 79          	inc d
0214+  01A8 0A 2B 01    	jmp gets_loop
0215+  01AB             gets_CR:
0216+  01AB 19 0D       	mov al, $0D
0217+  01AD 3E          	mov [d], al
0218+  01AE 79          	inc d
0219+  01AF 0A 2B 01    	jmp gets_loop
0220+  01B2             gets_end:
0221+  01B2 19 00       	mov al, 0
0222+  01B4 3E          	mov [d], al				; terminate string
0223+  01B5 E7          	pop d
0224+  01B6 E4          	pop a
0225+  01B7 09          	ret
0226+  01B8             
0227+  01B8             
0228+  01B8             
0229+  01B8             
0230+  01B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  01B8             ;; INPUT TEXT
0232+  01B8             ;; terminated with CTRL+D
0233+  01B8             ;; pointer in D
0234+  01B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  01B8             gettxt:
0236+  01B8 D7          	push a
0237+  01B9 DA          	push d
0238+  01BA             gettxt_loop:
0239+  01BA 19 01       	mov al, 1
0240+  01BC 05 03       	syscall sys_io			; receive in AH
0241+  01BE B9 00       	cmp al, 0				; check error code (AL)
0242+  01C0 C6 BA 01    	je gettxt_loop		; if no char received, retry
0243+  01C3 76 04       	cmp ah, 4			; EOT
0244+  01C5 C6 03 02    	je gettxt_end
0245+  01C8 76 08       	cmp ah, $08			; check for backspace
0246+  01CA C6 FF 01    	je gettxt_backspace
0247+  01CD 76 5C       	cmp ah, $5C				; '\\'
0248+  01CF C6 D8 01    	je gettxt_escape
0249+  01D2 1A          	mov al, ah
0250+  01D3 3E          	mov [d], al
0251+  01D4 79          	inc d
0252+  01D5 0A BA 01    	jmp gettxt_loop
0253+  01D8             gettxt_escape:
0254+  01D8 19 01       	mov al, 1
0255+  01DA 05 03       	syscall sys_io			; receive in AH
0256+  01DC B9 00       	cmp al, 0				; check error code (AL)
0257+  01DE C6 D8 01    	je gettxt_escape		; if no char received, retry
0258+  01E1 76 6E       	cmp ah, 'n'
0259+  01E3 C6 F1 01    	je gettxt_LF
0260+  01E6 76 72       	cmp ah, 'r'
0261+  01E8 C6 F8 01    	je gettxt_CR
0262+  01EB 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  01EC 3E          	mov [d], al
0264+  01ED 79          	inc d
0265+  01EE 0A BA 01    	jmp gettxt_loop
0266+  01F1             gettxt_LF:
0267+  01F1 19 0A       	mov al, $0A
0268+  01F3 3E          	mov [d], al
0269+  01F4 79          	inc d
0270+  01F5 0A BA 01    	jmp gettxt_loop
0271+  01F8             gettxt_CR:
0272+  01F8 19 0D       	mov al, $0D
0273+  01FA 3E          	mov [d], al
0274+  01FB 79          	inc d
0275+  01FC 0A BA 01    	jmp gettxt_loop
0276+  01FF             gettxt_backspace:
0277+  01FF 7F          	dec d
0278+  0200 0A BA 01    	jmp gettxt_loop
0279+  0203             gettxt_end:
0280+  0203 19 00       	mov al, 0
0281+  0205 3E          	mov [d], al				; terminate string
0282+  0206 E7          	pop d
0283+  0207 E4          	pop a
0284+  0208 09          	ret
0285+  0209             
0286+  0209             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0209             ; PRINT NEW LINE
0288+  0209             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0209             printnl:
0290+  0209 D7          	push a
0291+  020A 10 00 0A    	mov a, $0A00
0292+  020D 05 03       	syscall sys_io
0293+  020F 10 00 0D    	mov a, $0D00
0294+  0212 05 03       	syscall sys_io
0295+  0214 E4          	pop a
0296+  0215 09          	ret
0297+  0216             
0298+  0216             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0216             ; strtoint
0300+  0216             ; 4 digit hex string number in d
0301+  0216             ; integer returned in A
0302+  0216             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0216             strtointx:
0304+  0216 D8          	push b
0305+  0217 32          	mov bl, [d]
0306+  0218 37          	mov bh, bl
0307+  0219 33 01 00    	mov bl, [d + 1]
0308+  021C 07 D7 00    	call atoi				; convert to int in AL
0309+  021F 23          	mov ah, al				; move to AH
0310+  0220 33 02 00    	mov bl, [d + 2]
0311+  0223 37          	mov bh, bl
0312+  0224 33 03 00    	mov bl, [d + 3]
0313+  0227 07 D7 00    	call atoi				; convert to int in AL
0314+  022A E5          	pop b
0315+  022B 09          	ret
0316+  022C             
0317+  022C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  022C             ; strtoint
0319+  022C             ; 5 digit base10 string number in d
0320+  022C             ; integer returned in A
0321+  022C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  022C             strtoint:
0323+  022C E2          	push si
0324+  022D D8          	push b
0325+  022E D9          	push c
0326+  022F DA          	push d
0327+  0230 07 57 00    	call strlen			; get string length in C
0328+  0233 7E          	dec c
0329+  0234 FD 4E       	mov si, d
0330+  0236 12          	mov a, c
0331+  0237 FD 99       	shl a
0332+  0239 3B BF 00    	mov d, table_power
0333+  023C 59          	add d, a
0334+  023D 38 00 00    	mov c, 0
0335+  0240             strtoint_L0:
0336+  0240 F6          	lodsb			; load ASCII to al
0337+  0241 B9 00       	cmp al, 0
0338+  0243 C6 56 02    	je strtoint_end
0339+  0246 6F 30       	sub al, $30		; make into integer
0340+  0248 22 00       	mov ah, 0
0341+  024A 2A          	mov b, [d]
0342+  024B AC          	mul a, b			; result in B since it fits in 16bits
0343+  024C 11          	mov a, b
0344+  024D 28          	mov b, c
0345+  024E 54          	add a, b
0346+  024F 39          	mov c, a
0347+  0250 63 02 00    	sub d, 2
0348+  0253 0A 40 02    	jmp strtoint_L0
0349+  0256             strtoint_end:
0350+  0256 12          	mov a, c
0351+  0257 E7          	pop d
0352+  0258 E6          	pop c
0353+  0259 E5          	pop b
0354+  025A EF          	pop si
0355+  025B 09          	ret
0356+  025C             
0357+  025C             
0358+  025C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  025C             ; PRINT NULL TERMINATED STRING
0360+  025C             ; pointer in D
0361+  025C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  025C             puts:
0363+  025C D7          	push a
0364+  025D DA          	push d
0365+  025E             puts_L1:
0366+  025E 1E          	mov al, [d]
0367+  025F B9 00       	cmp al, 0
0368+  0261 C6 6D 02    	jz puts_END
0369+  0264 23          	mov ah, al
0370+  0265 19 00       	mov al, 0
0371+  0267 05 03       	syscall sys_io
0372+  0269 79          	inc d
0373+  026A 0A 5E 02    	jmp puts_L1
0374+  026D             puts_END:
0375+  026D E7          	pop d
0376+  026E E4          	pop a
0377+  026F 09          	ret
0378+  0270             
0379+  0270             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0270             ; PRINT N SIZE STRING
0381+  0270             ; pointer in D
0382+  0270             ; size in C
0383+  0270             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0270             putsn:
0385+  0270 DB          	push al
0386+  0271 DA          	push d
0387+  0272 D9          	push c
0388+  0273             putsn_L0:
0389+  0273 1E          	mov al, [d]
0390+  0274 23          	mov ah, al
0391+  0275 19 00       	mov al, 0
0392+  0277 05 03       	syscall sys_io
0393+  0279 79          	inc d
0394+  027A 7E          	dec c	
0395+  027B C2 00 00    	cmp c, 0
0396+  027E C7 73 02    	jne putsn_L0
0397+  0281             putsn_end:
0398+  0281 E6          	pop c
0399+  0282 E7          	pop d
0400+  0283 E8          	pop al
0401+  0284 09          	ret
0402+  0285             
0403+  0285             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0285             ; print 16bit decimal number
0405+  0285             ; input number in A
0406+  0285             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0285             print_u16d:
0408+  0285 D7          	push a
0409+  0286 D8          	push b
0410+  0287 26 10 27    	mov b, 10000
0411+  028A AE          	div a, b			; get 10000's coeff.
0412+  028B 07 AD 02    	call print_number
0413+  028E 11          	mov a, b
0414+  028F 26 E8 03    	mov b, 1000
0415+  0292 AE          	div a, b			; get 1000's coeff.
0416+  0293 07 AD 02    	call print_number
0417+  0296 11          	mov a, b
0418+  0297 26 64 00    	mov b, 100
0419+  029A AE          	div a, b
0420+  029B 07 AD 02    	call print_number
0421+  029E 11          	mov a, b
0422+  029F 26 0A 00    	mov b, 10
0423+  02A2 AE          	div a, b
0424+  02A3 07 AD 02    	call print_number
0425+  02A6 1B          	mov al, bl			; 1's coeff in bl
0426+  02A7 07 AD 02    	call print_number
0427+  02AA E5          	pop b
0428+  02AB E4          	pop a
0429+  02AC 09          	ret
0430+  02AD             
0431+  02AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0432+  02AD             ; print AL
0433+  02AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0434+  02AD             print_number:
0435+  02AD 6A 30       	add al, $30
0436+  02AF 23          	mov ah, al
0437+  02B0 07 22 01    	call putchar
0438+  02B3 09          	ret
0439+  02B4             
0440+  02B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0441+  02B4             ; PRINT 16BIT HEX INTEGER
0442+  02B4             ; integer value in reg B
0443+  02B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0444+  02B4             print_u16x:
0445+  02B4 D7          	push a
0446+  02B5 D8          	push b
0447+  02B6 DD          	push bl
0448+  02B7 30          	mov bl, bh
0449+  02B8 07 E9 00    	call itoa				; convert bh to char in A
0450+  02BB 2F          	mov bl, al				; save al
0451+  02BC 19 00       	mov al, 0
0452+  02BE 05 03       	syscall sys_io				; display AH
0453+  02C0 24          	mov ah, bl				; retrieve al
0454+  02C1 19 00       	mov al, 0
0455+  02C3 05 03       	syscall sys_io				; display AL
0456+  02C5             
0457+  02C5 EA          	pop bl
0458+  02C6 07 E9 00    	call itoa				; convert bh to char in A
0459+  02C9 2F          	mov bl, al				; save al
0460+  02CA 19 00       	mov al, 0
0461+  02CC 05 03       	syscall sys_io				; display AH
0462+  02CE 24          	mov ah, bl				; retrieve al
0463+  02CF 19 00       	mov al, 0
0464+  02D1 05 03       	syscall sys_io				; display AL
0465+  02D3             
0466+  02D3 E5          	pop b
0467+  02D4 E4          	pop a
0468+  02D5 09          	ret
0469+  02D6             
0470+  02D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0471+  02D6             ; INPUT 16BIT HEX INTEGER
0472+  02D6             ; read 16bit integer into A
0473+  02D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0474+  02D6             scan_u16x:
0475+  02D6 F8 10 00    	enter 16
0476+  02D9 D8          	push b
0477+  02DA DA          	push d
0478+  02DB             
0479+  02DB FA F1 FF    	lea d, [bp + -15]
0480+  02DE 07 29 01    	call gets				; get number
0481+  02E1             
0482+  02E1 32          	mov bl, [d]
0483+  02E2 37          	mov bh, bl
0484+  02E3 33 01 00    	mov bl, [d + 1]
0485+  02E6 07 D7 00    	call atoi				; convert to int in AL
0486+  02E9 23          	mov ah, al				; move to AH
0487+  02EA             
0488+  02EA 33 02 00    	mov bl, [d + 2]
0489+  02ED 37          	mov bh, bl
0490+  02EE 33 03 00    	mov bl, [d + 3]
0491+  02F1 07 D7 00    	call atoi				; convert to int in AL
0492+  02F4             
0493+  02F4 E7          	pop d
0494+  02F5 E5          	pop b
0495+  02F6 F9          	leave
0496+  02F7 09          	ret
0497+  02F8             
0498+  02F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0499+  02F8             ; PRINT 8bit HEX INTEGER
0500+  02F8             ; integer value in reg bl
0501+  02F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0502+  02F8             print_u8x:
0503+  02F8 D7          	push a
0504+  02F9 DD          	push bl
0505+  02FA             
0506+  02FA 07 E9 00    	call itoa				; convert bl to char in A
0507+  02FD 2F          	mov bl, al				; save al
0508+  02FE 19 00       	mov al, 0
0509+  0300 05 03       	syscall sys_io				; display AH
0510+  0302 24          	mov ah, bl				; retrieve al
0511+  0303 19 00       	mov al, 0
0512+  0305 05 03       	syscall sys_io				; display AL
0513+  0307             
0514+  0307 EA          	pop bl
0515+  0308 E4          	pop a
0516+  0309 09          	ret
0517+  030A             
0518+  030A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0519+  030A             ; print 8bit decimal unsigned number
0520+  030A             ; input number in AL
0521+  030A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0522+  030A             print_u8d:
0523+  030A D7          	push a
0524+  030B D8          	push b
0525+  030C             
0526+  030C 22 00       	mov ah, 0
0527+  030E 26 64 00    	mov b, 100
0528+  0311 AE          	div a, b
0529+  0312 D8          	push b			; save remainder
0530+  0313 B9 00       	cmp al, 0
0531+  0315 C6 1F 03    	je skip100
0532+  0318 6A 30       	add al, $30
0533+  031A 23          	mov ah, al
0534+  031B 19 00       	mov al, 0
0535+  031D 05 03       	syscall sys_io	; print coeff
0536+  031F             skip100:
0537+  031F E4          	pop a
0538+  0320 22 00       	mov ah, 0
0539+  0322 26 0A 00    	mov b, 10
0540+  0325 AE          	div a, b
0541+  0326 D8          	push b			; save remainder
0542+  0327 B9 00       	cmp al, 0
0543+  0329 C6 33 03    	je skip10
0544+  032C 6A 30       	add al, $30
0545+  032E 23          	mov ah, al
0546+  032F 19 00       	mov al, 0
0547+  0331 05 03       	syscall sys_io	; print coeff
0548+  0333             skip10:
0549+  0333 E4          	pop a
0550+  0334 1B          	mov al, bl
0551+  0335 6A 30       	add al, $30
0552+  0337 23          	mov ah, al
0553+  0338 19 00       	mov al, 0
0554+  033A 05 03       	syscall sys_io	; print coeff
0555+  033C E5          	pop b
0556+  033D E4          	pop a
0557+  033E 09          	ret
0558+  033F             
0559+  033F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0560+  033F             ; INPUT 8BIT HEX INTEGER
0561+  033F             ; read 8bit integer into AL
0562+  033F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0563+  033F             scan_u8x:
0564+  033F F8 04 00    	enter 4
0565+  0342 D8          	push b
0566+  0343 DA          	push d
0567+  0344             
0568+  0344 FA FD FF    	lea d, [bp + -3]
0569+  0347 07 29 01    	call gets				; get number
0570+  034A             
0571+  034A 32          	mov bl, [d]
0572+  034B 37          	mov bh, bl
0573+  034C 33 01 00    	mov bl, [d + 1]
0574+  034F 07 D7 00    	call atoi				; convert to int in AL
0575+  0352             
0576+  0352 E7          	pop d
0577+  0353 E5          	pop b
0578+  0354 F9          	leave
0579+  0355 09          	ret
0580+  0356             
0581+  0356             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0582+  0356             ; input decimal number
0583+  0356             ; result in A
0584+  0356             ; 655'\0'
0585+  0356             ; low--------high
0586+  0356             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0356             scan_u16d:
0588+  0356 F8 08 00    	enter 8
0589+  0359 E2          	push si
0590+  035A D8          	push b
0591+  035B D9          	push c
0592+  035C DA          	push d
0593+  035D FA F9 FF    	lea d, [bp +- 7]
0594+  0360 07 29 01    	call gets
0595+  0363 07 57 00    	call strlen			; get string length in C
0596+  0366 7E          	dec c
0597+  0367 FD 4E       	mov si, d
0598+  0369 12          	mov a, c
0599+  036A FD 99       	shl a
0600+  036C 3B BF 00    	mov d, table_power
0601+  036F 59          	add d, a
0602+  0370 38 00 00    	mov c, 0
0603+  0373             mul_loop:
0604+  0373 F6          	lodsb			; load ASCII to al
0605+  0374 B9 00       	cmp al, 0
0606+  0376 C6 89 03    	je mul_exit
0607+  0379 6F 30       	sub al, $30		; make into integer
0608+  037B 22 00       	mov ah, 0
0609+  037D 2A          	mov b, [d]
0610+  037E AC          	mul a, b			; result in B since it fits in 16bits
0611+  037F 11          	mov a, b
0612+  0380 28          	mov b, c
0613+  0381 54          	add a, b
0614+  0382 39          	mov c, a
0615+  0383 63 02 00    	sub d, 2
0616+  0386 0A 73 03    	jmp mul_loop
0617+  0389             mul_exit:
0618+  0389 12          	mov a, c
0619+  038A E7          	pop d
0620+  038B E6          	pop c
0621+  038C E5          	pop b
0622+  038D EF          	pop si
0623+  038E F9          	leave
0624+  038F 09          	ret
0016   0390             
0017   0390             
0018   0390             
0019   0390             .end
tasm: Number of errors = 0
