0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0400             .org PROC_TEXT_ORG			; origin at 1024
0004   0400             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005   0400             ;; CHMOD - change file permissions
0006   0400             ;; ex: chmod 7 <filename>
0007   0400             ;; 1 = exec, 2 = write, 4 = read
0008   0400             ;; we only have one digit in Sol-1 for now since we don't have users or groups
0009   0400             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0010   0400             ; filename passed to the kernel in D
0011   0400             ; permission value in A
0012   0400             cmd_chmod:
0013   0400 10 00 00    	mov a, 0
0014   0403 42 45 06    	mov [prog], a			; move tokennizer pointer to the beginning of the arguments area (address 0)
0015   0406 07 A6 04    	call get_token				; read permission value
0016   0409 3B 49 06    	mov d, tokstr				; pointer to permission token string
0017   040C 07 58 09    	call strtoint				; integer in A
0018   040F 87 07       	and al, %00000111			; mask out garbage
0019   0411 2F          	mov bl, al					; save permission in bl
0020   0412 07 A6 04    	call get_token				; get filename. D already points to tokstr
0021   0415 19 0E       	mov al, 14
0022   0417 05 04       	syscall sys_fileio			; call kernel to set permission
0023   0419             
0024   0419 05 0B       	syscall sys_terminate_proc
0025   041B             
0026   041B             
0027   041B             .include "token.asm"
0001+  041B             TOKTYP_IDENTIFIER	.equ 0
0002+  041B             TOKTYP_KEYWORD		.equ 1
0003+  041B             TOKTYP_DELIMITER	.equ 2
0004+  041B             TOKTYP_STRING		.equ 3
0005+  041B             TOKTYP_CHAR			.equ 4
0006+  041B             TOKTYP_NUMERIC		.equ 5
0007+  041B             TOKTYP_END			.equ 6
0008+  041B             
0009+  041B             TOK_NULL			.equ 0
0010+  041B             TOK_FSLASH			.equ 1
0011+  041B             TOK_TIMES 			.equ 2
0012+  041B             TOK_PLUS 			.equ 3
0013+  041B             TOK_MINUS 			.equ 4
0014+  041B             TOK_DOT				.equ 5
0015+  041B             TOK_SEMI			.equ 6
0016+  041B             TOK_ANGLE			.equ 7
0017+  041B             TOK_TILDE			.equ 8
0018+  041B             TOK_EQUAL			.equ 9
0019+  041B             TOK_COLON			.equ 10
0020+  041B             TOK_COMMA			.equ 11
0021+  041B             
0022+  041B             TOK_END				.equ 20
0023+  041B             
0024+  041B             
0025+  041B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  041B             ;; read a full command argment from shell input buffer
0027+  041B             ;; argument is written into tokstr
0028+  041B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  041B             get_arg:
0030+  041B D7          	push a
0031+  041C E2          	push si
0032+  041D E3          	push di
0033+  041E 19 00       	mov al, 0
0034+  0420 3D 49 06    	mov [tokstr], al			; nullify tokstr string
0035+  0423 14 45 06    	mov a, [prog]
0036+  0426 4D          	mov si, a
0037+  0427 FD 4F 49 06 	mov di, tokstr
0038+  042B             get_arg_skip_spaces:
0039+  042B F6          	lodsb
0040+  042C 07 36 0B    	call isspace
0041+  042F C6 2B 04    	je get_arg_skip_spaces
0042+  0432             get_arg_L0:
0043+  0432 B9 3B       	cmp al, $3B				; check if is ';'
0044+  0434 C6 41 04    	je get_arg_end
0045+  0437 B9 00       	cmp al, 0
0046+  0439 C6 41 04    	je get_arg_end			; check if end of input
0047+  043C F7          	stosb
0048+  043D F6          	lodsb
0049+  043E 0A 32 04    	jmp get_arg_L0
0050+  0441             get_arg_end:
0051+  0441 19 00       	mov al, 0
0052+  0443 F7          	stosb
0053+  0444 D5 01 00    	sub si, 1
0054+  0447 4E          	mov a, si
0055+  0448 42 45 06    	mov [prog], a		; update pointer
0056+  044B F0          	pop di
0057+  044C EF          	pop si
0058+  044D E4          	pop a
0059+  044E 09          	ret
0060+  044F             
0061+  044F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  044F             ;; read a path formation from shell input buffer
0063+  044F             ;; path is written into tokstr
0064+  044F             ;; /usr/bin
0065+  044F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  044F             get_path:
0067+  044F D7          	push a
0068+  0450 E2          	push si
0069+  0451 E3          	push di
0070+  0452 19 00       	mov al, 0
0071+  0454 3D 49 06    	mov [tokstr], al			; nullify tokstr string
0072+  0457 14 45 06    	mov a, [prog]
0073+  045A 4D          	mov si, a
0074+  045B FD 4F 49 06 	mov di, tokstr
0075+  045F             get_path_skip_spaces:
0076+  045F F6          	lodsb
0077+  0460 07 36 0B    	call isspace
0078+  0463 C6 5F 04    	je get_path_skip_spaces
0079+  0466             get_path_is_pathchar:
0080+  0466 F7          	stosb
0081+  0467 F6          	lodsb
0082+  0468 07 C0 0A    	call isalnum			;check if is alphanumeric
0083+  046B C6 66 04    	je get_path_is_pathchar
0084+  046E B9 2F       	cmp al, '/'				; check if is '/'
0085+  0470 C6 66 04    	je get_path_is_pathchar
0086+  0473 19 00       	mov al, 0
0087+  0475 F7          	stosb
0088+  0476 D5 01 00    	sub si, 1
0089+  0479 4E          	mov a, si
0090+  047A 42 45 06    	mov [prog], a		; update pointer
0091+  047D             get_path_end:
0092+  047D F0          	pop di
0093+  047E EF          	pop si
0094+  047F E4          	pop a
0095+  0480 09          	ret
0096+  0481             
0097+  0481             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0481             ;; read a line
0099+  0481             ;; line is written into tokstr
0100+  0481             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0481             get_line:
0102+  0481 D7          	push a
0103+  0482 E2          	push si
0104+  0483 E3          	push di
0105+  0484 19 00       	mov al, 0
0106+  0486 3D 49 06    	mov [tokstr], al			; nullify tokstr string
0107+  0489 14 45 06    	mov a, [prog]
0108+  048C 4D          	mov si, a
0109+  048D FD 4F 49 06 	mov di, tokstr
0110+  0491             get_line_L0:
0111+  0491 F6          	lodsb
0112+  0492 B9 0A       	cmp al, $0A		; check for new line
0113+  0494 C6 9B 04    	je get_line_exit
0114+  0497 F7          	stosb
0115+  0498 0A 91 04    	jmp get_line_L0
0116+  049B             get_line_exit:
0117+  049B 19 00       	mov al, 0
0118+  049D F7          	stosb
0119+  049E 4E          	mov a, si
0120+  049F 42 45 06    	mov [prog], a		; update pointer
0121+  04A2 F0          	pop di
0122+  04A3 EF          	pop si
0123+  04A4 E4          	pop a
0124+  04A5 09          	ret
0125+  04A6             
0126+  04A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  04A6             ;; token parser
0128+  04A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  04A6             get_token:
0130+  04A6 D7          	push a
0131+  04A7 DA          	push d
0132+  04A8 E2          	push si
0133+  04A9 E3          	push di
0134+  04AA 19 00       	mov al, 0
0135+  04AC 3D 49 06    	mov [tokstr], al			; nullify tokstr string
0136+  04AF 19 00       	mov al, TOK_NULL
0137+  04B1 3D 48 06    	mov [tok], al				; nullify token
0138+  04B4 14 45 06    	mov a, [prog]
0139+  04B7 4D          	mov si, a
0140+  04B8 FD 4F 49 06 	mov di, tokstr
0141+  04BC             get_tok_skip_spaces:
0142+  04BC F6          	lodsb
0143+  04BD 07 36 0B    	call isspace
0144+  04C0 C6 BC 04    	je get_tok_skip_spaces
0145+  04C3 B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  04C5 C6 AA 05    	je get_token_end
0147+  04C8 B9 23       	cmp al, '#'			; comments!
0148+  04CA C6 D8 05    	je get_tok_comment
0149+  04CD 07 C0 0A    	call isalnum
0150+  04D0 C6 B7 05    	jz is_alphanumeric
0151+  04D3             ; other token types
0152+  04D3             get_token_slash:
0153+  04D3 B9 2F       	cmp al, '/'				; check if '/'
0154+  04D5 C7 ED 04    	jne get_token_minus
0155+  04D8 F7          	stosb					; store '/' into token string
0156+  04D9 19 00       	mov al, 0
0157+  04DB F7          	stosb					; terminate token string
0158+  04DC 19 01       	mov al, TOK_FSLASH
0159+  04DE 3D 48 06    	mov [tok], al			
0160+  04E1 19 02       	mov al, TOKTYP_DELIMITER
0161+  04E3 3D 47 06    	mov [toktyp], al
0162+  04E6 4E          	mov a, si
0163+  04E7 42 45 06    	mov [prog], a		; update pointer
0164+  04EA 0A D3 05    	jmp get_token_return
0165+  04ED             get_token_minus:
0166+  04ED B9 2D       	cmp al, '-'				; check if '-'
0167+  04EF C7 07 05    	jne get_token_comma
0168+  04F2 F7          	stosb					; store '-' into token string
0169+  04F3 19 00       	mov al, 0
0170+  04F5 F7          	stosb					; terminate token string
0171+  04F6 19 04       	mov al, TOK_MINUS
0172+  04F8 3D 48 06    	mov [tok], al			
0173+  04FB 19 02       	mov al, TOKTYP_DELIMITER
0174+  04FD 3D 47 06    	mov [toktyp], al
0175+  0500 4E          	mov a, si
0176+  0501 42 45 06    	mov [prog], a		; update pointer
0177+  0504 0A D3 05    	jmp get_token_return
0178+  0507             get_token_comma:
0179+  0507 B9 2C       	cmp al, ','				; check if ','
0180+  0509 C7 21 05    	jne get_token_semi
0181+  050C F7          	stosb					; store ',' into token string
0182+  050D 19 00       	mov al, 0
0183+  050F F7          	stosb					; terminate token string
0184+  0510 19 0B       	mov al, TOK_COMMA
0185+  0512 3D 48 06    	mov [tok], al			
0186+  0515 19 02       	mov al, TOKTYP_DELIMITER
0187+  0517 3D 47 06    	mov [toktyp], al
0188+  051A 4E          	mov a, si
0189+  051B 42 45 06    	mov [prog], a		; update pointer
0190+  051E 0A D3 05    	jmp get_token_return
0191+  0521             get_token_semi:
0192+  0521 B9 3B       	cmp al, $3B				; check if ';'
0193+  0523 C7 3B 05    	jne get_token_colon
0194+  0526 F7          	stosb					; store ';' into token string
0195+  0527 19 00       	mov al, 0
0196+  0529 F7          	stosb					; terminate token string
0197+  052A 19 06       	mov al, TOK_SEMI
0198+  052C 3D 48 06    	mov [tok], al			
0199+  052F 19 02       	mov al, TOKTYP_DELIMITER
0200+  0531 3D 47 06    	mov [toktyp], al
0201+  0534 4E          	mov a, si
0202+  0535 42 45 06    	mov [prog], a		; update pointer
0203+  0538 0A D3 05    	jmp get_token_return
0204+  053B             get_token_colon:
0205+  053B B9 3A       	cmp al, $3A				; check if ':'
0206+  053D C7 55 05    	jne get_token_angle
0207+  0540 F7          	stosb					; store ':' into token string
0208+  0541 19 00       	mov al, 0
0209+  0543 F7          	stosb					; terminate token string
0210+  0544 19 0A       	mov al, TOK_COLON
0211+  0546 3D 48 06    	mov [tok], al			
0212+  0549 19 02       	mov al, TOKTYP_DELIMITER
0213+  054B 3D 47 06    	mov [toktyp], al
0214+  054E 4E          	mov a, si
0215+  054F 42 45 06    	mov [prog], a		; update pointer
0216+  0552 0A D3 05    	jmp get_token_return
0217+  0555             get_token_angle:
0218+  0555 B9 3E       	cmp al, $3E				; check if '>'
0219+  0557 C7 6F 05    	jne get_token_tilde
0220+  055A F7          	stosb					; store '>' into token string
0221+  055B 19 00       	mov al, 0
0222+  055D F7          	stosb					; terminate token string
0223+  055E 19 07       	mov al, TOK_ANGLE
0224+  0560 3D 48 06    	mov [tok], al			
0225+  0563 19 02       	mov al, TOKTYP_DELIMITER
0226+  0565 3D 47 06    	mov [toktyp], al
0227+  0568 4E          	mov a, si
0228+  0569 42 45 06    	mov [prog], a		; update pointer
0229+  056C 0A D3 05    	jmp get_token_return
0230+  056F             get_token_tilde:
0231+  056F B9 7E       	cmp al, '~'				; check if '~'
0232+  0571 C7 89 05    	jne get_token_equal
0233+  0574 F7          	stosb					; store '~' into token string
0234+  0575 19 00       	mov al, 0
0235+  0577 F7          	stosb					; terminate token string
0236+  0578 19 08       	mov al, TOK_TILDE
0237+  057A 3D 48 06    	mov [tok], al			
0238+  057D 19 02       	mov al, TOKTYP_DELIMITER
0239+  057F 3D 47 06    	mov [toktyp], al
0240+  0582 4E          	mov a, si
0241+  0583 42 45 06    	mov [prog], a		; update pointer
0242+  0586 0A D3 05    	jmp get_token_return
0243+  0589             get_token_equal:
0244+  0589 B9 3D       	cmp al, '='				; check if '='
0245+  058B C7 A3 05    	jne get_token_skip
0246+  058E F7          	stosb					; store '=' into token string
0247+  058F 19 00       	mov al, 0
0248+  0591 F7          	stosb					; terminate token string
0249+  0592 19 09       	mov al, TOK_EQUAL
0250+  0594 3D 48 06    	mov [tok], al			
0251+  0597 19 02       	mov al, TOKTYP_DELIMITER
0252+  0599 3D 47 06    	mov [toktyp], al
0253+  059C 4E          	mov a, si
0254+  059D 42 45 06    	mov [prog], a		; update pointer
0255+  05A0 0A D3 05    	jmp get_token_return
0256+  05A3             get_token_skip:
0257+  05A3 4E          	mov a, si
0258+  05A4 42 45 06    	mov [prog], a		; update pointer
0259+  05A7 0A D3 05    	jmp get_token_return
0260+  05AA             get_token_end:				; end of file token
0261+  05AA 19 14       	mov al, TOK_END
0262+  05AC 3D 48 06    	mov [tok], al
0263+  05AF 19 06       	mov al, TOKTYP_END
0264+  05B1 3D 47 06    	mov [toktyp], al
0265+  05B4 0A D3 05    	jmp get_token_return
0266+  05B7             is_alphanumeric:
0267+  05B7 F7          	stosb
0268+  05B8 F6          	lodsb
0269+  05B9 07 C0 0A    	call isalnum			;check if is alphanumeric
0270+  05BC C6 B7 05    	jz is_alphanumeric
0271+  05BF B9 2E       	cmp al, $2E				; check if is '.'
0272+  05C1 C6 B7 05    	je is_alphanumeric
0273+  05C4 19 00       	mov al, 0
0274+  05C6 F7          	stosb
0275+  05C7 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  05C9 3D 47 06    	mov [toktyp], al
0277+  05CC D5 01 00    	sub si, 1
0278+  05CF 4E          	mov a, si
0279+  05D0 42 45 06    	mov [prog], a		; update pointer
0280+  05D3             get_token_return:
0281+  05D3 F0          	pop di
0282+  05D4 EF          	pop si
0283+  05D5 E7          	pop d
0284+  05D6 E4          	pop a
0285+  05D7 09          	ret
0286+  05D8             get_tok_comment:
0287+  05D8 F6          	lodsb
0288+  05D9 B9 0A       	cmp al, $0A			; new line
0289+  05DB C7 D8 05    	jne get_tok_comment
0290+  05DE 0A BC 04    	jmp get_tok_skip_spaces
0291+  05E1             
0292+  05E1             
0293+  05E1             get_number:
0294+  05E1 D7          	push a
0295+  05E2 DA          	push d
0296+  05E3 E2          	push si
0297+  05E4 E3          	push di
0298+  05E5 19 00       	mov al, 0
0299+  05E7 3D 49 06    	mov [tokstr], al			; nullify tokstr string
0300+  05EA 19 00       	mov al, TOK_NULL
0301+  05EC 3D 48 06    	mov [tok], al				; nullify token
0302+  05EF 14 45 06    	mov a, [prog]
0303+  05F2 4D          	mov si, a
0304+  05F3 FD 4F 49 06 	mov di, tokstr
0305+  05F7             get_number_skip_spaces:
0306+  05F7 F6          	lodsb
0307+  05F8 07 36 0B    	call isspace
0308+  05FB C6 F7 05    	je get_number_skip_spaces
0309+  05FE B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  0600 C7 10 06    	jne get_number_L0
0311+  0603 19 14       	mov al, TOK_END
0312+  0605 3D 48 06    	mov [tok], al
0313+  0608 19 06       	mov al, TOKTYP_END
0314+  060A 3D 47 06    	mov [toktyp], al
0315+  060D 0A 27 06    	jmp get_number_return
0316+  0610             get_number_L0:
0317+  0610 F7          	stosb
0318+  0611 F6          	lodsb
0319+  0612 07 CA 0A    	call isdigit			;check if is numeric
0320+  0615 C6 10 06    	jz get_number_L0
0321+  0618 19 00       	mov al, 0
0322+  061A F7          	stosb
0323+  061B 19 05       	mov al, TOKTYP_NUMERIC
0324+  061D 3D 47 06    	mov [toktyp], al
0325+  0620 D5 01 00    	sub si, 1
0326+  0623 4E          	mov a, si
0327+  0624 42 45 06    	mov [prog], a		; update pointer
0328+  0627             get_number_return:
0329+  0627 F0          	pop di
0330+  0628 EF          	pop si
0331+  0629 E7          	pop d
0332+  062A E4          	pop a
0333+  062B 09          	ret
0334+  062C             
0335+  062C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  062C             ;; PUT BACK TOKEN
0337+  062C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  062C             putback:
0339+  062C D7          	push a
0340+  062D E2          	push si
0341+  062E FD 4D 49 06 	mov si, tokstr	
0342+  0632             putback_loop:
0343+  0632 F6          	lodsb
0344+  0633 B9 00       	cmp al, 0
0345+  0635 C6 42 06    	je putback_end
0346+  0638 14 45 06    	mov a, [prog]
0347+  063B 7D          	dec a
0348+  063C 42 45 06    	mov [prog], a			; update pointer
0349+  063F 0A 32 06    	jmp putback_loop
0350+  0642             putback_end:
0351+  0642 EF          	pop si
0352+  0643 E4          	pop a
0353+  0644 09          	ret
0354+  0645             
0355+  0645             
0356+  0645             
0357+  0645             
0358+  0645 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  0647             
0360+  0647 00          toktyp: 	.db 0			; token type symbol
0361+  0648 00          tok:		.db 0			; current token symbol
0362+  0649 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  064D 00 00 00 00 
0362+  0651 00 00 00 00 
0362+  0655 00 00 00 00 
0362+  0659 00 00 00 00 
0362+  065D 00 00 00 00 
0362+  0661 00 00 00 00 
0362+  0665 00 00 00 00 
0362+  0669 00 00 00 00 
0362+  066D 00 00 00 00 
0362+  0671 00 00 00 00 
0362+  0675 00 00 00 00 
0362+  0679 00 00 00 00 
0362+  067D 00 00 00 00 
0362+  0681 00 00 00 00 
0362+  0685 00 00 00 00 
0362+  0689 00 00 00 00 
0362+  068D 00 00 00 00 
0362+  0691 00 00 00 00 
0362+  0695 00 00 00 00 
0362+  0699 00 00 00 00 
0362+  069D 00 00 00 00 
0362+  06A1 00 00 00 00 
0362+  06A5 00 00 00 00 
0362+  06A9 00 00 00 00 
0362+  06AD 00 00 00 00 
0362+  06B1 00 00 00 00 
0362+  06B5 00 00 00 00 
0362+  06B9 00 00 00 00 
0362+  06BD 00 00 00 00 
0362+  06C1 00 00 00 00 
0362+  06C5 00 00 00 00 
0362+  06C9 00 00 00 00 
0362+  06CD 00 00 00 00 
0362+  06D1 00 00 00 00 
0362+  06D5 00 00 00 00 
0362+  06D9 00 00 00 00 
0362+  06DD 00 00 00 00 
0362+  06E1 00 00 00 00 
0362+  06E5 00 00 00 00 
0362+  06E9 00 00 00 00 
0362+  06ED 00 00 00 00 
0362+  06F1 00 00 00 00 
0362+  06F5 00 00 00 00 
0362+  06F9 00 00 00 00 
0362+  06FD 00 00 00 00 
0362+  0701 00 00 00 00 
0362+  0705 00 00 00 00 
0362+  0709 00 00 00 00 
0362+  070D 00 00 00 00 
0362+  0711 00 00 00 00 
0362+  0715 00 00 00 00 
0362+  0719 00 00 00 00 
0362+  071D 00 00 00 00 
0362+  0721 00 00 00 00 
0362+  0725 00 00 00 00 
0362+  0729 00 00 00 00 
0362+  072D 00 00 00 00 
0362+  0731 00 00 00 00 
0362+  0735 00 00 00 00 
0362+  0739 00 00 00 00 
0362+  073D 00 00 00 00 
0362+  0741 00 00 00 00 
0362+  0745 00 00 00 00 
0028   0749             .include "stdio.asm"
0001+  0749             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0749             ; stdio.s
0003+  0749             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0749             .include "string.asm"
0001++ 0749             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0749             ; string.s
0003++ 0749             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0749             
0005++ 0749             
0006++ 0749             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0749             ; strrev
0008++ 0749             ; reverse a string
0009++ 0749             ; D = string address
0010++ 0749             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0749             ; 01234
0012++ 0749             strrev:
0013++ 0749 4B          	pusha
0014++ 074A 07 90 07    	call strlen	; length in C
0015++ 074D 12          	mov a, c
0016++ 074E AF 01 00    	cmp a, 1
0017++ 0751 D0 6B 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0754 7D          	dec a
0019++ 0755 FD 4E       	mov si, d	; beginning of string
0020++ 0757 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0759 59          	add d, a	; end of string
0022++ 075A 12          	mov a, c
0023++ 075B FD 9B       	shr a		; divide by 2
0024++ 075D 39          	mov c, a	; C now counts the steps
0025++ 075E             strrev_L0:
0026++ 075E 32          	mov bl, [d]	; save load right-side char into BL
0027++ 075F F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0760 3E          	mov [d], al	; store left char into right side
0029++ 0761 1B          	mov al, bl
0030++ 0762 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0763 7E          	dec c
0032++ 0764 7F          	dec d
0033++ 0765 C2 00 00    	cmp c, 0
0034++ 0768 C7 5E 07    	jne strrev_L0
0035++ 076B             strrev_end:
0036++ 076B 4C          	popa
0037++ 076C 09          	ret
0038++ 076D             	
0039++ 076D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 076D             ; strchr
0041++ 076D             ; search string in D for char in AL
0042++ 076D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 076D             strchr:
0044++ 076D             strchr_L0:
0045++ 076D 32          	mov bl, [d]
0046++ 076E C1 00       	cmp bl, 0
0047++ 0770 C6 7B 07    	je strchr_end
0048++ 0773 BA          	cmp al, bl
0049++ 0774 C6 7B 07    	je strchr_end
0050++ 0777 79          	inc d
0051++ 0778 0A 6D 07    	jmp strchr_L0
0052++ 077B             strchr_end:
0053++ 077B 1B          	mov al, bl
0054++ 077C 09          	ret
0055++ 077D             
0056++ 077D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 077D             ; strstr
0058++ 077D             ; find sub-string
0059++ 077D             ; str1 in SI
0060++ 077D             ; str2 in DI
0061++ 077D             ; SI points to end of source string
0062++ 077D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 077D             strstr:
0064++ 077D DB          	push al
0065++ 077E DA          	push d
0066++ 077F E3          	push di
0067++ 0780             strstr_loop:
0068++ 0780 F3          	cmpsb					; compare a byte of the strings
0069++ 0781 C7 8C 07    	jne strstr_ret
0070++ 0784 FC 00 00    	lea d, [di + 0]
0071++ 0787 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0789 C7 80 07    	jne strstr_loop				; equal chars but not at end
0073++ 078C             strstr_ret:
0074++ 078C F0          	pop di
0075++ 078D E7          	pop d
0076++ 078E E8          	pop al
0077++ 078F 09          	ret
0078++ 0790             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0790             ; length of null terminated string
0080++ 0790             ; result in C
0081++ 0790             ; pointer in D
0082++ 0790             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0790             strlen:
0084++ 0790 DA          	push d
0085++ 0791 38 00 00    	mov c, 0
0086++ 0794             strlen_L1:
0087++ 0794 BD 00       	cmp byte [d], 0
0088++ 0796 C6 9E 07    	je strlen_ret
0089++ 0799 79          	inc d
0090++ 079A 78          	inc c
0091++ 079B 0A 94 07    	jmp strlen_L1
0092++ 079E             strlen_ret:
0093++ 079E E7          	pop d
0094++ 079F 09          	ret
0095++ 07A0             
0096++ 07A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07A0             ; STRCMP
0098++ 07A0             ; compare two strings
0099++ 07A0             ; str1 in SI
0100++ 07A0             ; str2 in DI
0101++ 07A0             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 07A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07A0             strcmp:
0104++ 07A0 DB          	push al
0105++ 07A1 DA          	push d
0106++ 07A2 E3          	push di
0107++ 07A3 E2          	push si
0108++ 07A4             strcmp_loop:
0109++ 07A4 F3          	cmpsb					; compare a byte of the strings
0110++ 07A5 C7 B0 07    	jne strcmp_ret
0111++ 07A8 FB FF FF    	lea d, [si +- 1]
0112++ 07AB BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07AD C7 A4 07    	jne strcmp_loop				; equal chars but not at end
0114++ 07B0             strcmp_ret:
0115++ 07B0 EF          	pop si
0116++ 07B1 F0          	pop di
0117++ 07B2 E7          	pop d
0118++ 07B3 E8          	pop al
0119++ 07B4 09          	ret
0120++ 07B5             
0121++ 07B5             
0122++ 07B5             ; STRCPY
0123++ 07B5             ; copy null terminated string from SI to DI
0124++ 07B5             ; source in SI
0125++ 07B5             ; destination in DI
0126++ 07B5             strcpy:
0127++ 07B5 E2          	push si
0128++ 07B6 E3          	push di
0129++ 07B7 DB          	push al
0130++ 07B8             strcpy_L1:
0131++ 07B8 F6          	lodsb
0132++ 07B9 F7          	stosb
0133++ 07BA B9 00       	cmp al, 0
0134++ 07BC C7 B8 07    	jne strcpy_L1
0135++ 07BF             strcpy_end:
0136++ 07BF E8          	pop al
0137++ 07C0 F0          	pop di
0138++ 07C1 EF          	pop si
0139++ 07C2 09          	ret
0140++ 07C3             
0141++ 07C3             ; STRCAT
0142++ 07C3             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07C3             ; source in SI
0144++ 07C3             ; destination in DI
0145++ 07C3             strcat:
0146++ 07C3 E2          	push si
0147++ 07C4 E3          	push di
0148++ 07C5 D7          	push a
0149++ 07C6 DA          	push d
0150++ 07C7 50          	mov a, di
0151++ 07C8 3C          	mov d, a
0152++ 07C9             strcat_goto_end_L1:
0153++ 07C9 BD 00       	cmp byte[d], 0
0154++ 07CB C6 D2 07    	je strcat_start
0155++ 07CE 79          	inc d
0156++ 07CF 0A C9 07    	jmp strcat_goto_end_L1
0157++ 07D2             strcat_start:
0158++ 07D2 FD 50       	mov di, d
0159++ 07D4             strcat_L1:
0160++ 07D4 F6          	lodsb
0161++ 07D5 F7          	stosb
0162++ 07D6 B9 00       	cmp al, 0
0163++ 07D8 C7 D4 07    	jne strcat_L1
0164++ 07DB             strcat_end:
0165++ 07DB E7          	pop d
0166++ 07DC E4          	pop a
0167++ 07DD F0          	pop di
0168++ 07DE EF          	pop si
0169++ 07DF 09          	ret
0005+  07E0             
0006+  07E0 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  07E4 34 35 36 37 
0006+  07E8 38 39 41 42 
0006+  07EC 43 44 45 46 
0007+  07F0             
0008+  07F0 01 00       table_power:.dw 1
0009+  07F2 0A 00       			.dw 10
0010+  07F4 64 00       			.dw 100
0011+  07F6 E8 03       			.dw 1000
0012+  07F8 10 27       			.dw 10000
0013+  07FA             
0014+  07FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  07FA             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  07FA             ; ASCII in BL
0017+  07FA             ; result in AL
0018+  07FA             ; ascii for F = 0100 0110
0019+  07FA             ; ascii for 9 = 0011 1001
0020+  07FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  07FA             hex_ascii_encode:
0022+  07FA 1B          	mov al, bl
0023+  07FB 93 40       	test al, $40				; test if letter or number
0024+  07FD C7 03 08    	jnz hex_letter
0025+  0800 87 0F       	and al, $0F				; get number
0026+  0802 09          	ret
0027+  0803             hex_letter:
0028+  0803 87 0F       	and al, $0F				; get letter
0029+  0805 6A 09       	add al, 9
0030+  0807 09          	ret
0031+  0808             
0032+  0808             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  0808             ; ATOI
0034+  0808             ; 2 letter hex string in B
0035+  0808             ; 8bit integer returned in AL
0036+  0808             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  0808             atoi:
0038+  0808 D8          	push b
0039+  0809 07 FA 07    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  080C 30          	mov bl, bh
0041+  080D DB          	push al					; save a
0042+  080E 07 FA 07    	call hex_ascii_encode
0043+  0811 EA          	pop bl	
0044+  0812 FD 9E 04    	shl al, 4
0045+  0815 8C          	or al, bl
0046+  0816 E5          	pop b
0047+  0817 09          	ret	
0048+  0818             
0049+  0818             
0050+  0818             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0818             ; printf
0052+  0818             ; no need for explanations!
0053+  0818             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  0818             printf:
0055+  0818 09          	ret
0056+  0819             
0057+  0819             
0058+  0819             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0819             ; scanf
0060+  0819             ; no need for explanations!
0061+  0819             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0819             scanf:
0063+  0819 09          	ret
0064+  081A             
0065+  081A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  081A             ; ITOA
0067+  081A             ; 8bit value in BL
0068+  081A             ; 2 byte ASCII result in A
0069+  081A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  081A             itoa:
0071+  081A DA          	push d
0072+  081B D8          	push b
0073+  081C A7 00       	mov bh, 0
0074+  081E FD A4 04    	shr bl, 4	
0075+  0821 74          	mov d, b
0076+  0822 1F E0 07    	mov al, [d + s_hex_digits]
0077+  0825 23          	mov ah, al
0078+  0826             	
0079+  0826 E5          	pop b
0080+  0827 D8          	push b
0081+  0828 A7 00       	mov bh, 0
0082+  082A FD 87 0F    	and bl, $0F
0083+  082D 74          	mov d, b
0084+  082E 1F E0 07    	mov al, [d + s_hex_digits]
0085+  0831 E5          	pop b
0086+  0832 E7          	pop d
0087+  0833 09          	ret
0088+  0834             
0089+  0834             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0834             ; HEX STRING TO BINARY
0091+  0834             ; di = destination address
0092+  0834             ; si = source
0093+  0834             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0834             hex_to_int:
0095+  0834             hex_to_int_L1:
0096+  0834 F6          	lodsb					; load from [SI] to AL
0097+  0835 B9 00       	cmp al, 0				; check if ASCII 0
0098+  0837 C6 44 08    	jz hex_to_int_ret
0099+  083A 36          	mov bh, al
0100+  083B F6          	lodsb
0101+  083C 2F          	mov bl, al
0102+  083D 07 08 08    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0840 F7          	stosb					; store AL to [DI]
0104+  0841 0A 34 08    	jmp hex_to_int_L1
0105+  0844             hex_to_int_ret:
0106+  0844 09          	ret		
0107+  0845             
0108+  0845             
0109+  0845             
0110+  0845             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0845             ; GETCHAR
0112+  0845             ; char in ah
0113+  0845             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0845             getchar:
0115+  0845 DB          	push al
0116+  0846             getchar_retry:
0117+  0846 FD 0C       	sti
0118+  0848 19 01       	mov al, 1
0119+  084A 05 03       	syscall sys_io			; receive in AH
0120+  084C B9 00       	cmp al, 0			; check if any char was receive
0121+  084E C6 46 08    	je getchar_retry
0122+  0851 E8          	pop al
0123+  0852 09          	ret
0124+  0853             
0125+  0853             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0853             ; PUTCHAR
0127+  0853             ; char in ah
0128+  0853             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0853             putchar:
0130+  0853 D7          	push a
0131+  0854 19 00       	mov al, 0
0132+  0856 05 03       	syscall sys_io			; char in AH
0133+  0858 E4          	pop a
0134+  0859 09          	ret
0135+  085A             
0136+  085A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  085A             ;; INPUT A STRING
0138+  085A             ;; terminates with null
0139+  085A             ;; pointer in D
0140+  085A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  085A             gets:
0142+  085A D7          	push a
0143+  085B DA          	push d
0144+  085C             gets_loop:
0145+  085C FD 0C       	sti
0146+  085E 19 01       	mov al, 1
0147+  0860 05 03       	syscall sys_io			; receive in AH
0148+  0862 B9 00       	cmp al, 0				; check error code (AL)
0149+  0864 C6 5C 08    	je gets_loop			; if no char received, retry
0150+  0867             
0151+  0867 76 1B       	cmp ah, 27
0152+  0869 C6 85 08    	je gets_telnet_escape
0153+  086C 76 0A       	cmp ah, $0A				; LF
0154+  086E C6 DE 08    	je gets_end
0155+  0871 76 5C       	cmp ah, $5C				; '\\'
0156+  0873 C6 B5 08    	je gets_escape
0157+  0876             	
0158+  0876 76 08       	cmp ah, $08			; check for backspace
0159+  0878 C6 81 08    	je gets_backspace
0160+  087B             
0161+  087B 1A          	mov al, ah
0162+  087C 3E          	mov [d], al
0163+  087D 79          	inc d
0164+  087E 0A 5C 08    	jmp gets_loop
0165+  0881             gets_backspace:
0166+  0881 7F          	dec d
0167+  0882 0A 5C 08    	jmp gets_loop
0168+  0885             gets_telnet_escape:
0169+  0885 FD 0C       	sti
0170+  0887 19 01       	mov al, 1
0171+  0889 05 03       	syscall sys_io				; receive in AH without echo
0172+  088B B9 00       	cmp al, 0					; check error code (AL)
0173+  088D C6 85 08    	je gets_telnet_escape		; if no char received, retry
0174+  0890 76 5B       	cmp ah, '['
0175+  0892 C7 5C 08    	jne gets_loop
0176+  0895             gets_telnet_escape_phase2:
0177+  0895 FD 0C       	sti
0178+  0897 19 01       	mov al, 1
0179+  0899 05 03       	syscall sys_io					; receive in AH without echo
0180+  089B B9 00       	cmp al, 0						; check error code (AL)
0181+  089D C6 95 08    	je gets_telnet_escape_phase2	; if no char received, retry
0182+  08A0 76 44       	cmp ah, 'D'
0183+  08A2 C6 AD 08    	je gets_left_arrow
0184+  08A5 76 43       	cmp ah, 'C'
0185+  08A7 C6 B1 08    	je gets_right_arrow
0186+  08AA 0A 5C 08    	jmp gets_loop
0187+  08AD             gets_left_arrow:
0188+  08AD 7F          	dec d
0189+  08AE 0A 5C 08    	jmp gets_loop
0190+  08B1             gets_right_arrow:
0191+  08B1 79          	inc d
0192+  08B2 0A 5C 08    	jmp gets_loop
0193+  08B5             gets_escape:
0194+  08B5 FD 0C       	sti
0195+  08B7 19 01       	mov al, 1
0196+  08B9 05 03       	syscall sys_io			; receive in AH
0197+  08BB B9 00       	cmp al, 0				; check error code (AL)
0198+  08BD C6 B5 08    	je gets_escape			; if no char received, retry
0199+  08C0 76 6E       	cmp ah, 'n'
0200+  08C2 C6 D0 08    	je gets_LF
0201+  08C5 76 72       	cmp ah, 'r'
0202+  08C7 C6 D7 08    	je gets_CR
0203+  08CA 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0204+  08CB 3E          	mov [d], al
0205+  08CC 79          	inc d
0206+  08CD 0A 5C 08    	jmp gets_loop
0207+  08D0             gets_LF:
0208+  08D0 19 0A       	mov al, $0A
0209+  08D2 3E          	mov [d], al
0210+  08D3 79          	inc d
0211+  08D4 0A 5C 08    	jmp gets_loop
0212+  08D7             gets_CR:
0213+  08D7 19 0D       	mov al, $0D
0214+  08D9 3E          	mov [d], al
0215+  08DA 79          	inc d
0216+  08DB 0A 5C 08    	jmp gets_loop
0217+  08DE             gets_end:
0218+  08DE 19 00       	mov al, 0
0219+  08E0 3E          	mov [d], al				; terminate string
0220+  08E1 E7          	pop d
0221+  08E2 E4          	pop a
0222+  08E3 09          	ret
0223+  08E4             
0224+  08E4             
0225+  08E4             
0226+  08E4             
0227+  08E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0228+  08E4             ;; INPUT TEXT
0229+  08E4             ;; terminated with CTRL+D
0230+  08E4             ;; pointer in D
0231+  08E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0232+  08E4             gettxt:
0233+  08E4 D7          	push a
0234+  08E5 DA          	push d
0235+  08E6             gettxt_loop:
0236+  08E6 19 01       	mov al, 1
0237+  08E8 05 03       	syscall sys_io			; receive in AH
0238+  08EA B9 00       	cmp al, 0				; check error code (AL)
0239+  08EC C6 E6 08    	je gettxt_loop		; if no char received, retry
0240+  08EF 76 04       	cmp ah, 4			; EOT
0241+  08F1 C6 2F 09    	je gettxt_end
0242+  08F4 76 08       	cmp ah, $08			; check for backspace
0243+  08F6 C6 2B 09    	je gettxt_backspace
0244+  08F9 76 5C       	cmp ah, $5C				; '\\'
0245+  08FB C6 04 09    	je gettxt_escape
0246+  08FE 1A          	mov al, ah
0247+  08FF 3E          	mov [d], al
0248+  0900 79          	inc d
0249+  0901 0A E6 08    	jmp gettxt_loop
0250+  0904             gettxt_escape:
0251+  0904 19 01       	mov al, 1
0252+  0906 05 03       	syscall sys_io			; receive in AH
0253+  0908 B9 00       	cmp al, 0				; check error code (AL)
0254+  090A C6 04 09    	je gettxt_escape		; if no char received, retry
0255+  090D 76 6E       	cmp ah, 'n'
0256+  090F C6 1D 09    	je gettxt_LF
0257+  0912 76 72       	cmp ah, 'r'
0258+  0914 C6 24 09    	je gettxt_CR
0259+  0917 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0260+  0918 3E          	mov [d], al
0261+  0919 79          	inc d
0262+  091A 0A E6 08    	jmp gettxt_loop
0263+  091D             gettxt_LF:
0264+  091D 19 0A       	mov al, $0A
0265+  091F 3E          	mov [d], al
0266+  0920 79          	inc d
0267+  0921 0A E6 08    	jmp gettxt_loop
0268+  0924             gettxt_CR:
0269+  0924 19 0D       	mov al, $0D
0270+  0926 3E          	mov [d], al
0271+  0927 79          	inc d
0272+  0928 0A E6 08    	jmp gettxt_loop
0273+  092B             gettxt_backspace:
0274+  092B 7F          	dec d
0275+  092C 0A E6 08    	jmp gettxt_loop
0276+  092F             gettxt_end:
0277+  092F 19 00       	mov al, 0
0278+  0931 3E          	mov [d], al				; terminate string
0279+  0932 E7          	pop d
0280+  0933 E4          	pop a
0281+  0934 09          	ret
0282+  0935             
0283+  0935             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0284+  0935             ; PRINT NEW LINE
0285+  0935             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0935             printnl:
0287+  0935 D7          	push a
0288+  0936 10 00 0A    	mov a, $0A00
0289+  0939 05 03       	syscall sys_io
0290+  093B 10 00 0D    	mov a, $0D00
0291+  093E 05 03       	syscall sys_io
0292+  0940 E4          	pop a
0293+  0941 09          	ret
0294+  0942             
0295+  0942             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0296+  0942             ; strtoint
0297+  0942             ; 4 digit hex string number in d
0298+  0942             ; integer returned in A
0299+  0942             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0300+  0942             strtointx:
0301+  0942 D8          	push b
0302+  0943 32          	mov bl, [d]
0303+  0944 37          	mov bh, bl
0304+  0945 33 01 00    	mov bl, [d + 1]
0305+  0948 07 08 08    	call atoi				; convert to int in AL
0306+  094B 23          	mov ah, al				; move to AH
0307+  094C 33 02 00    	mov bl, [d + 2]
0308+  094F 37          	mov bh, bl
0309+  0950 33 03 00    	mov bl, [d + 3]
0310+  0953 07 08 08    	call atoi				; convert to int in AL
0311+  0956 E5          	pop b
0312+  0957 09          	ret
0313+  0958             
0314+  0958             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0315+  0958             ; strtoint
0316+  0958             ; 5 digit base10 string number in d
0317+  0958             ; integer returned in A
0318+  0958             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0319+  0958             strtoint:
0320+  0958 E2          	push si
0321+  0959 D8          	push b
0322+  095A D9          	push c
0323+  095B DA          	push d
0324+  095C 07 90 07    	call strlen			; get string length in C
0325+  095F 7E          	dec c
0326+  0960 FD 4E       	mov si, d
0327+  0962 12          	mov a, c
0328+  0963 FD 99       	shl a
0329+  0965 3B F0 07    	mov d, table_power
0330+  0968 59          	add d, a
0331+  0969 38 00 00    	mov c, 0
0332+  096C             strtoint_L0:
0333+  096C F6          	lodsb			; load ASCII to al
0334+  096D B9 00       	cmp al, 0
0335+  096F C6 82 09    	je strtoint_end
0336+  0972 6F 30       	sub al, $30		; make into integer
0337+  0974 22 00       	mov ah, 0
0338+  0976 2A          	mov b, [d]
0339+  0977 AC          	mul a, b			; result in B since it fits in 16bits
0340+  0978 11          	mov a, b
0341+  0979 28          	mov b, c
0342+  097A 54          	add a, b
0343+  097B 39          	mov c, a
0344+  097C 63 02 00    	sub d, 2
0345+  097F 0A 6C 09    	jmp strtoint_L0
0346+  0982             strtoint_end:
0347+  0982 12          	mov a, c
0348+  0983 E7          	pop d
0349+  0984 E6          	pop c
0350+  0985 E5          	pop b
0351+  0986 EF          	pop si
0352+  0987 09          	ret
0353+  0988             
0354+  0988             
0355+  0988             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  0988             ; PRINT NULL TERMINATED STRING
0357+  0988             ; pointer in D
0358+  0988             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0988             puts:
0360+  0988 D7          	push a
0361+  0989 DA          	push d
0362+  098A             puts_L1:
0363+  098A 1E          	mov al, [d]
0364+  098B B9 00       	cmp al, 0
0365+  098D C6 99 09    	jz puts_END
0366+  0990 23          	mov ah, al
0367+  0991 19 00       	mov al, 0
0368+  0993 05 03       	syscall sys_io
0369+  0995 79          	inc d
0370+  0996 0A 8A 09    	jmp puts_L1
0371+  0999             puts_END:
0372+  0999 E7          	pop d
0373+  099A E4          	pop a
0374+  099B 09          	ret
0375+  099C             
0376+  099C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0377+  099C             ; PRINT N SIZE STRING
0378+  099C             ; pointer in D
0379+  099C             ; size in C
0380+  099C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0381+  099C             putsn:
0382+  099C DB          	push al
0383+  099D DA          	push d
0384+  099E D9          	push c
0385+  099F             putsn_L0:
0386+  099F 1E          	mov al, [d]
0387+  09A0 23          	mov ah, al
0388+  09A1 19 00       	mov al, 0
0389+  09A3 05 03       	syscall sys_io
0390+  09A5 79          	inc d
0391+  09A6 7E          	dec c	
0392+  09A7 C2 00 00    	cmp c, 0
0393+  09AA C7 9F 09    	jne putsn_L0
0394+  09AD             putsn_end:
0395+  09AD E6          	pop c
0396+  09AE E7          	pop d
0397+  09AF E8          	pop al
0398+  09B0 09          	ret
0399+  09B1             
0400+  09B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0401+  09B1             ; print 16bit decimal number
0402+  09B1             ; input number in A
0403+  09B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  09B1             print_u16d:
0405+  09B1 D7          	push a
0406+  09B2 D8          	push b
0407+  09B3 26 10 27    	mov b, 10000
0408+  09B6 AE          	div a, b			; get 10000 coeff.
0409+  09B7 07 DD 09    	call print_zero_or_space
0410+  09BA 11          	mov a, b
0411+  09BB 26 E8 03    	mov b, 1000
0412+  09BE AE          	div a, b			; get 10000 coeff.
0413+  09BF 07 DD 09    	call print_zero_or_space
0414+  09C2 11          	mov a, b
0415+  09C3 26 64 00    	mov b, 100
0416+  09C6 AE          	div a, b
0417+  09C7 07 DD 09    	call print_zero_or_space
0418+  09CA 11          	mov a, b
0419+  09CB 26 0A 00    	mov b, 10
0420+  09CE AE          	div a, b
0421+  09CF 07 DD 09    	call print_zero_or_space
0422+  09D2 11          	mov a, b
0423+  09D3 6A 30       	add al, $30
0424+  09D5 23          	mov ah, al
0425+  09D6 19 00       	mov al, 0
0426+  09D8 05 03       	syscall sys_io	; print coeff
0427+  09DA E5          	pop b
0428+  09DB E4          	pop a
0429+  09DC 09          	ret
0430+  09DD             
0431+  09DD             
0432+  09DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  09DD             ; if A == 0, print space
0434+  09DD             ; else print A
0435+  09DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  09DD             print_zero_or_space:
0437+  09DD             	; cmp a, 0
0438+  09DD             	; jne print_number
0439+  09DD             	; mov ah, $20
0440+  09DD             	; call putchar
0441+  09DD             	; ret
0442+  09DD             print_number:
0443+  09DD 6A 30       	add al, $30
0444+  09DF 23          	mov ah, al
0445+  09E0 07 53 08    	call putchar
0446+  09E3 09          	ret
0447+  09E4             
0448+  09E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  09E4             ; PRINT 16BIT HEX INTEGER
0450+  09E4             ; integer value in reg B
0451+  09E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0452+  09E4             print_u16x:
0453+  09E4 D7          	push a
0454+  09E5 D8          	push b
0455+  09E6 DD          	push bl
0456+  09E7 30          	mov bl, bh
0457+  09E8 07 1A 08    	call itoa				; convert bh to char in A
0458+  09EB 2F          	mov bl, al				; save al
0459+  09EC 19 00       	mov al, 0
0460+  09EE 05 03       	syscall sys_io				; display AH
0461+  09F0 24          	mov ah, bl				; retrieve al
0462+  09F1 19 00       	mov al, 0
0463+  09F3 05 03       	syscall sys_io				; display AL
0464+  09F5             
0465+  09F5 EA          	pop bl
0466+  09F6 07 1A 08    	call itoa				; convert bh to char in A
0467+  09F9 2F          	mov bl, al				; save al
0468+  09FA 19 00       	mov al, 0
0469+  09FC 05 03       	syscall sys_io				; display AH
0470+  09FE 24          	mov ah, bl				; retrieve al
0471+  09FF 19 00       	mov al, 0
0472+  0A01 05 03       	syscall sys_io				; display AL
0473+  0A03             
0474+  0A03 E5          	pop b
0475+  0A04 E4          	pop a
0476+  0A05 09          	ret
0477+  0A06             
0478+  0A06             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0A06             ; INPUT 16BIT HEX INTEGER
0480+  0A06             ; read 16bit integer into A
0481+  0A06             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0482+  0A06             scan_u16x:
0483+  0A06 F8 10 00    	enter 16
0484+  0A09 D8          	push b
0485+  0A0A DA          	push d
0486+  0A0B             
0487+  0A0B FA F1 FF    	lea d, [bp + -15]
0488+  0A0E 07 5A 08    	call gets				; get number
0489+  0A11             
0490+  0A11 32          	mov bl, [d]
0491+  0A12 37          	mov bh, bl
0492+  0A13 33 01 00    	mov bl, [d + 1]
0493+  0A16 07 08 08    	call atoi				; convert to int in AL
0494+  0A19 23          	mov ah, al				; move to AH
0495+  0A1A             
0496+  0A1A 33 02 00    	mov bl, [d + 2]
0497+  0A1D 37          	mov bh, bl
0498+  0A1E 33 03 00    	mov bl, [d + 3]
0499+  0A21 07 08 08    	call atoi				; convert to int in AL
0500+  0A24             
0501+  0A24 E7          	pop d
0502+  0A25 E5          	pop b
0503+  0A26 F9          	leave
0504+  0A27 09          	ret
0505+  0A28             
0506+  0A28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0A28             ; PRINT 8bit HEX INTEGER
0508+  0A28             ; integer value in reg bl
0509+  0A28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0510+  0A28             print_u8x:
0511+  0A28 D7          	push a
0512+  0A29 DD          	push bl
0513+  0A2A             
0514+  0A2A 07 1A 08    	call itoa				; convert bl to char in A
0515+  0A2D 2F          	mov bl, al				; save al
0516+  0A2E 19 00       	mov al, 0
0517+  0A30 05 03       	syscall sys_io				; display AH
0518+  0A32 24          	mov ah, bl				; retrieve al
0519+  0A33 19 00       	mov al, 0
0520+  0A35 05 03       	syscall sys_io				; display AL
0521+  0A37             
0522+  0A37 EA          	pop bl
0523+  0A38 E4          	pop a
0524+  0A39 09          	ret
0525+  0A3A             
0526+  0A3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0A3A             ; print 8bit decimal unsigned number
0528+  0A3A             ; input number in AL
0529+  0A3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0530+  0A3A             print_u8d:
0531+  0A3A D7          	push a
0532+  0A3B D8          	push b
0533+  0A3C             
0534+  0A3C 22 00       	mov ah, 0
0535+  0A3E 26 64 00    	mov b, 100
0536+  0A41 AE          	div a, b
0537+  0A42 D8          	push b			; save remainder
0538+  0A43 B9 00       	cmp al, 0
0539+  0A45 C6 4F 0A    	je skip100
0540+  0A48 6A 30       	add al, $30
0541+  0A4A 23          	mov ah, al
0542+  0A4B 19 00       	mov al, 0
0543+  0A4D 05 03       	syscall sys_io	; print coeff
0544+  0A4F             skip100:
0545+  0A4F E4          	pop a
0546+  0A50 22 00       	mov ah, 0
0547+  0A52 26 0A 00    	mov b, 10
0548+  0A55 AE          	div a, b
0549+  0A56 D8          	push b			; save remainder
0550+  0A57 B9 00       	cmp al, 0
0551+  0A59 C6 63 0A    	je skip10
0552+  0A5C 6A 30       	add al, $30
0553+  0A5E 23          	mov ah, al
0554+  0A5F 19 00       	mov al, 0
0555+  0A61 05 03       	syscall sys_io	; print coeff
0556+  0A63             skip10:
0557+  0A63 E4          	pop a
0558+  0A64 1B          	mov al, bl
0559+  0A65 6A 30       	add al, $30
0560+  0A67 23          	mov ah, al
0561+  0A68 19 00       	mov al, 0
0562+  0A6A 05 03       	syscall sys_io	; print coeff
0563+  0A6C E5          	pop b
0564+  0A6D E4          	pop a
0565+  0A6E 09          	ret
0566+  0A6F             
0567+  0A6F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0A6F             ; INPUT 8BIT HEX INTEGER
0569+  0A6F             ; read 8bit integer into AL
0570+  0A6F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  0A6F             scan_u8x:
0572+  0A6F F8 04 00    	enter 4
0573+  0A72 D8          	push b
0574+  0A73 DA          	push d
0575+  0A74             
0576+  0A74 FA FD FF    	lea d, [bp + -3]
0577+  0A77 07 5A 08    	call gets				; get number
0578+  0A7A             
0579+  0A7A 32          	mov bl, [d]
0580+  0A7B 37          	mov bh, bl
0581+  0A7C 33 01 00    	mov bl, [d + 1]
0582+  0A7F 07 08 08    	call atoi				; convert to int in AL
0583+  0A82             
0584+  0A82 E7          	pop d
0585+  0A83 E5          	pop b
0586+  0A84 F9          	leave
0587+  0A85 09          	ret
0588+  0A86             
0589+  0A86             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0590+  0A86             ; input decimal number
0591+  0A86             ; result in A
0592+  0A86             ; 655'\0'
0593+  0A86             ; low--------high
0594+  0A86             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0595+  0A86             scan_u16d:
0596+  0A86 F8 08 00    	enter 8
0597+  0A89 E2          	push si
0598+  0A8A D8          	push b
0599+  0A8B D9          	push c
0600+  0A8C DA          	push d
0601+  0A8D FA F9 FF    	lea d, [bp +- 7]
0602+  0A90 07 5A 08    	call gets
0603+  0A93 07 90 07    	call strlen			; get string length in C
0604+  0A96 7E          	dec c
0605+  0A97 FD 4E       	mov si, d
0606+  0A99 12          	mov a, c
0607+  0A9A FD 99       	shl a
0608+  0A9C 3B F0 07    	mov d, table_power
0609+  0A9F 59          	add d, a
0610+  0AA0 38 00 00    	mov c, 0
0611+  0AA3             mul_loop:
0612+  0AA3 F6          	lodsb			; load ASCII to al
0613+  0AA4 B9 00       	cmp al, 0
0614+  0AA6 C6 B9 0A    	je mul_exit
0615+  0AA9 6F 30       	sub al, $30		; make into integer
0616+  0AAB 22 00       	mov ah, 0
0617+  0AAD 2A          	mov b, [d]
0618+  0AAE AC          	mul a, b			; result in B since it fits in 16bits
0619+  0AAF 11          	mov a, b
0620+  0AB0 28          	mov b, c
0621+  0AB1 54          	add a, b
0622+  0AB2 39          	mov c, a
0623+  0AB3 63 02 00    	sub d, 2
0624+  0AB6 0A A3 0A    	jmp mul_loop
0625+  0AB9             mul_exit:
0626+  0AB9 12          	mov a, c
0627+  0ABA E7          	pop d
0628+  0ABB E6          	pop c
0629+  0ABC E5          	pop b
0630+  0ABD EF          	pop si
0631+  0ABE F9          	leave
0632+  0ABF 09          	ret
0029   0AC0             .include "ctype.asm"
0001+  0AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0AC0             ; ctype.s
0003+  0AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0AC0             
0005+  0AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0AC0             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0AC0             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0AC0             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0AC0             ;; characters are supported.
0010+  0AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0AC0             ;; isalnum 
0012+  0AC0             ;; isalpha 
0013+  0AC0             ;; islower 
0014+  0AC0             ;; isupper 
0015+  0AC0             ;; isdigit 
0016+  0AC0             ;; isxdigit
0017+  0AC0             ;; iscntrl 
0018+  0AC0             ;; isgraph 
0019+  0AC0             ;; isspace 
0020+  0AC0             ;; isblank 
0021+  0AC0             ;; isprint 
0022+  0AC0             ;; ispunct 
0023+  0AC0             ;; tolower 
0024+  0AC0             ;; toupper
0025+  0AC0             
0026+  0AC0             
0027+  0AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0AC0             ;; IS ALPHANUMERIC
0029+  0AC0             ;; sets ZF according with result
0030+  0AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0AC0             isalnum:
0032+  0AC0 07 DD 0A    	call isalpha
0033+  0AC3 C6 C9 0A    	je isalnum_exit
0034+  0AC6 07 CA 0A    	call isdigit
0035+  0AC9             isalnum_exit:
0036+  0AC9 09          	ret	
0037+  0ACA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0ACA             ;; IS DIGIT
0039+  0ACA             ;; sets ZF according with result
0040+  0ACA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0ACA             isdigit:
0042+  0ACA DB          	push al
0043+  0ACB B9 30       	cmp al, '0'
0044+  0ACD C8 D9 0A    	jlu isdigit_false
0045+  0AD0 B9 39       	cmp al, '9'
0046+  0AD2 D1 D9 0A    	jgu isdigit_false
0047+  0AD5 87 00       	and al, 0	; set ZF
0048+  0AD7 E8          	pop al
0049+  0AD8 09          	ret
0050+  0AD9             isdigit_false:
0051+  0AD9 8B 01       	or al, 1	; clear ZF
0052+  0ADB E8          	pop al
0053+  0ADC 09          	ret	
0054+  0ADD             	
0055+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0ADD             ;; IS ALPHA
0057+  0ADD             ;; sets ZF according with result
0058+  0ADD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0ADD             isalpha:
0060+  0ADD DB          	push al
0061+  0ADE B9 5F       	cmp al, '_'
0062+  0AE0 C6 00 0B    	je isalpha_true
0063+  0AE3 B9 2E       	cmp al, '.'
0064+  0AE5 C6 00 0B    	je isalpha_true
0065+  0AE8 B9 41       	cmp al, 'A'
0066+  0AEA C8 FC 0A    	jlu isalpha_false
0067+  0AED B9 7A       	cmp al, 'z'
0068+  0AEF D1 FC 0A    	jgu isalpha_false
0069+  0AF2 B9 5A       	cmp al, 'Z'
0070+  0AF4 D0 00 0B    	jleu isalpha_true
0071+  0AF7 B9 61       	cmp al, 'a'
0072+  0AF9 C9 00 0B    	jgeu isalpha_true
0073+  0AFC             isalpha_false:
0074+  0AFC 8B 01       	or al, 1	; clear ZF
0075+  0AFE E8          	pop al
0076+  0AFF 09          	ret
0077+  0B00             isalpha_true:
0078+  0B00 87 00       	and al, 0	; set ZF
0079+  0B02 E8          	pop al
0080+  0B03 09          	ret
0081+  0B04             
0082+  0B04             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B04             ;; IS PATH-ALPHA
0084+  0B04             ;; sets ZF according with result
0085+  0B04             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B04             ispath:
0087+  0B04 DB          	push al
0088+  0B05 07 CA 0A    	call isdigit
0089+  0B08 C6 32 0B    	je ispath_true
0090+  0B0B B9 5F       	cmp al, '_'
0091+  0B0D C6 32 0B    	je ispath_true
0092+  0B10 B9 2F       	cmp al, '/'
0093+  0B12 C6 32 0B    	je ispath_true
0094+  0B15 B9 2E       	cmp al, '.'
0095+  0B17 C6 32 0B    	je ispath_true
0096+  0B1A B9 41       	cmp al, 'A'
0097+  0B1C C8 2E 0B    	jlu ispath_false
0098+  0B1F B9 7A       	cmp al, 'z'
0099+  0B21 D1 2E 0B    	jgu ispath_false
0100+  0B24 B9 5A       	cmp al, 'Z'
0101+  0B26 D0 32 0B    	jleu ispath_true
0102+  0B29 B9 61       	cmp al, 'a'
0103+  0B2B C9 32 0B    	jgeu ispath_true
0104+  0B2E             ispath_false:
0105+  0B2E 8B 01       	or al, 1	; clear ZF
0106+  0B30 E8          	pop al
0107+  0B31 09          	ret
0108+  0B32             ispath_true:
0109+  0B32 87 00       	and al, 0	; set ZF
0110+  0B34 E8          	pop al
0111+  0B35 09          	ret
0112+  0B36             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B36             ;; IS SPACE
0114+  0B36             ;; sets ZF according with result
0115+  0B36             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B36             isspace:
0117+  0B36 B9 20       	cmp al, $20		; ' '
0118+  0B38 C6 4C 0B    	je isspace_exit
0119+  0B3B B9 09       	cmp al, $09		; '\t'
0120+  0B3D C6 4C 0B    	je isspace_exit
0121+  0B40 B9 0A       	cmp al, $0A		; '\n'
0122+  0B42 C6 4C 0B    	je isspace_exit
0123+  0B45 B9 0D       	cmp al, $0D		; '\r'
0124+  0B47 C6 4C 0B    	je isspace_exit
0125+  0B4A B9 0B       	cmp al, $0B		; '\v'
0126+  0B4C             isspace_exit:
0127+  0B4C 09          	ret	
0128+  0B4D             
0129+  0B4D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B4D             ; TO LOWER
0131+  0B4D             ; input in AL
0132+  0B4D             ; output in AL
0133+  0B4D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B4D             to_lower:
0135+  0B4D B9 5A       	cmp al, 'Z'
0136+  0B4F D1 54 0B    	jgu to_lower_ret
0137+  0B52 6A 20       	add al, $20				; convert to lower case
0138+  0B54             to_lower_ret:
0139+  0B54 09          	ret
0140+  0B55             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B55             ; TO UPPER
0142+  0B55             ; input in AL
0143+  0B55             ; output in AL
0144+  0B55             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B55             to_upper:
0146+  0B55 B9 61       	cmp al, 'a'
0147+  0B57 C8 5C 0B    	jlu to_upper_ret
0148+  0B5A 6F 20       	sub al, $20			; convert to upper case
0149+  0B5C             to_upper_ret:
0150+  0B5C 09          	ret
0151+  0B5D             
0030   0B5D             
0031   0B5D             .end
0032   0B5D             
0033   0B5D             
tasm: Number of errors = 0
