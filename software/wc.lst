0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;; wc filename
0005   0000             ;; count words
0006   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007   0000             
0008   0400             .org PROC_TEXT_ORG			; origin at 1024
0009   0400             
0010   0400             cmd_wc:
0011   0400 10 00 00    	mov a, 0
0012   0403 42 64 06    	mov [prog], a			; move tokennizer pointer to the beginning of the arguments area (address 0)
0013   0406 07 6E 04    	call get_path			; read filename
0014   0409 3B 68 06    	mov d, tokstr
0015   040C FD 4F 81 0B 	mov di, transient_data	; pointer to write buffer
0016   0410 19 14       	mov al, 20
0017   0412 05 04       	syscall sys_fileio		; read textfile into buffer	
0018   0414             	
0019   0414 10 81 0B    	mov a, transient_data
0020   0417 42 64 06    	mov [prog], a
0021   041A 38 00 00    	mov c, 0
0022   041D             L0:
0023   041D 07 C5 04    	call get_token
0024   0420 1D 67 06    	mov al, [tok]
0025   0423 B9 14       	cmp al, TOK_END
0026   0425 C6 34 04    	je cmd_wc_end
0027   0428 1D 66 06    	mov al, [toktyp]
0028   042B B9 00       	cmp al, TOKTYP_IDENTIFIER
0029   042D C7 1D 04    	jne L0
0030   0430 78          	inc c
0031   0431 0A 1D 04    	jmp L0
0032   0434             
0033   0434             cmd_wc_end:
0034   0434 12          	mov a, c
0035   0435 07 D5 09    	call print_u16d
0036   0438             
0037   0438 05 0B       	syscall sys_terminate_proc
0038   043A             
0039   043A             
0040   043A             .include "token.asm"
0001+  043A             TOKTYP_IDENTIFIER	.equ 0
0002+  043A             TOKTYP_KEYWORD		.equ 1
0003+  043A             TOKTYP_DELIMITER	.equ 2
0004+  043A             TOKTYP_STRING		.equ 3
0005+  043A             TOKTYP_CHAR			.equ 4
0006+  043A             TOKTYP_NUMERIC		.equ 5
0007+  043A             TOKTYP_END			.equ 6
0008+  043A             
0009+  043A             TOK_NULL			.equ 0
0010+  043A             TOK_FSLASH			.equ 1
0011+  043A             TOK_TIMES 			.equ 2
0012+  043A             TOK_PLUS 			.equ 3
0013+  043A             TOK_MINUS 			.equ 4
0014+  043A             TOK_DOT				.equ 5
0015+  043A             TOK_SEMI			.equ 6
0016+  043A             TOK_ANGLE			.equ 7
0017+  043A             TOK_TILDE			.equ 8
0018+  043A             TOK_EQUAL			.equ 9
0019+  043A             TOK_COLON			.equ 10
0020+  043A             TOK_COMMA			.equ 11
0021+  043A             
0022+  043A             TOK_END				.equ 20
0023+  043A             
0024+  043A             
0025+  043A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  043A             ;; read a full command argment from shell input buffer
0027+  043A             ;; argument is written into tokstr
0028+  043A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  043A             get_arg:
0030+  043A D7          	push a
0031+  043B E2          	push si
0032+  043C E3          	push di
0033+  043D 19 00       	mov al, 0
0034+  043F 3D 68 06    	mov [tokstr], al			; nullify tokstr string
0035+  0442 14 64 06    	mov a, [prog]
0036+  0445 4D          	mov si, a
0037+  0446 FD 4F 68 06 	mov di, tokstr
0038+  044A             get_arg_skip_spaces:
0039+  044A F6          	lodsb
0040+  044B 07 5A 0B    	call isspace
0041+  044E C6 4A 04    	je get_arg_skip_spaces
0042+  0451             get_arg_L0:
0043+  0451 B9 3B       	cmp al, $3B				; check if is ';'
0044+  0453 C6 60 04    	je get_arg_end
0045+  0456 B9 00       	cmp al, 0
0046+  0458 C6 60 04    	je get_arg_end			; check if end of input
0047+  045B F7          	stosb
0048+  045C F6          	lodsb
0049+  045D 0A 51 04    	jmp get_arg_L0
0050+  0460             get_arg_end:
0051+  0460 19 00       	mov al, 0
0052+  0462 F7          	stosb
0053+  0463 D5 01 00    	sub si, 1
0054+  0466 4E          	mov a, si
0055+  0467 42 64 06    	mov [prog], a		; update pointer
0056+  046A F0          	pop di
0057+  046B EF          	pop si
0058+  046C E4          	pop a
0059+  046D 09          	ret
0060+  046E             
0061+  046E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  046E             ;; read a path formation from shell input buffer
0063+  046E             ;; path is written into tokstr
0064+  046E             ;; /usr/bin
0065+  046E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  046E             get_path:
0067+  046E D7          	push a
0068+  046F E2          	push si
0069+  0470 E3          	push di
0070+  0471 19 00       	mov al, 0
0071+  0473 3D 68 06    	mov [tokstr], al			; nullify tokstr string
0072+  0476 14 64 06    	mov a, [prog]
0073+  0479 4D          	mov si, a
0074+  047A FD 4F 68 06 	mov di, tokstr
0075+  047E             get_path_skip_spaces:
0076+  047E F6          	lodsb
0077+  047F 07 5A 0B    	call isspace
0078+  0482 C6 7E 04    	je get_path_skip_spaces
0079+  0485             get_path_is_pathchar:
0080+  0485 F7          	stosb
0081+  0486 F6          	lodsb
0082+  0487 07 E4 0A    	call isalnum			;check if is alphanumeric
0083+  048A C6 85 04    	je get_path_is_pathchar
0084+  048D B9 2F       	cmp al, '/'				; check if is '/'
0085+  048F C6 85 04    	je get_path_is_pathchar
0086+  0492 19 00       	mov al, 0
0087+  0494 F7          	stosb
0088+  0495 D5 01 00    	sub si, 1
0089+  0498 4E          	mov a, si
0090+  0499 42 64 06    	mov [prog], a		; update pointer
0091+  049C             get_path_end:
0092+  049C F0          	pop di
0093+  049D EF          	pop si
0094+  049E E4          	pop a
0095+  049F 09          	ret
0096+  04A0             
0097+  04A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  04A0             ;; read a line
0099+  04A0             ;; line is written into tokstr
0100+  04A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  04A0             get_line:
0102+  04A0 D7          	push a
0103+  04A1 E2          	push si
0104+  04A2 E3          	push di
0105+  04A3 19 00       	mov al, 0
0106+  04A5 3D 68 06    	mov [tokstr], al			; nullify tokstr string
0107+  04A8 14 64 06    	mov a, [prog]
0108+  04AB 4D          	mov si, a
0109+  04AC FD 4F 68 06 	mov di, tokstr
0110+  04B0             get_line_L0:
0111+  04B0 F6          	lodsb
0112+  04B1 B9 0A       	cmp al, $0A		; check for new line
0113+  04B3 C6 BA 04    	je get_line_exit
0114+  04B6 F7          	stosb
0115+  04B7 0A B0 04    	jmp get_line_L0
0116+  04BA             get_line_exit:
0117+  04BA 19 00       	mov al, 0
0118+  04BC F7          	stosb
0119+  04BD 4E          	mov a, si
0120+  04BE 42 64 06    	mov [prog], a		; update pointer
0121+  04C1 F0          	pop di
0122+  04C2 EF          	pop si
0123+  04C3 E4          	pop a
0124+  04C4 09          	ret
0125+  04C5             
0126+  04C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  04C5             ;; token parser
0128+  04C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  04C5             get_token:
0130+  04C5 D7          	push a
0131+  04C6 DA          	push d
0132+  04C7 E2          	push si
0133+  04C8 E3          	push di
0134+  04C9 19 00       	mov al, 0
0135+  04CB 3D 68 06    	mov [tokstr], al			; nullify tokstr string
0136+  04CE 19 00       	mov al, TOK_NULL
0137+  04D0 3D 67 06    	mov [tok], al				; nullify token
0138+  04D3 14 64 06    	mov a, [prog]
0139+  04D6 4D          	mov si, a
0140+  04D7 FD 4F 68 06 	mov di, tokstr
0141+  04DB             get_tok_skip_spaces:
0142+  04DB F6          	lodsb
0143+  04DC 07 5A 0B    	call isspace
0144+  04DF C6 DB 04    	je get_tok_skip_spaces
0145+  04E2 B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  04E4 C6 C9 05    	je get_token_end
0147+  04E7 B9 23       	cmp al, '#'			; comments!
0148+  04E9 C6 F7 05    	je get_tok_comment
0149+  04EC 07 E4 0A    	call isalnum
0150+  04EF C6 D6 05    	jz is_alphanumeric
0151+  04F2             ; other token types
0152+  04F2             get_token_slash:
0153+  04F2 B9 2F       	cmp al, '/'				; check if '/'
0154+  04F4 C7 0C 05    	jne get_token_minus
0155+  04F7 F7          	stosb					; store '/' into token string
0156+  04F8 19 00       	mov al, 0
0157+  04FA F7          	stosb					; terminate token string
0158+  04FB 19 01       	mov al, TOK_FSLASH
0159+  04FD 3D 67 06    	mov [tok], al			
0160+  0500 19 02       	mov al, TOKTYP_DELIMITER
0161+  0502 3D 66 06    	mov [toktyp], al
0162+  0505 4E          	mov a, si
0163+  0506 42 64 06    	mov [prog], a		; update pointer
0164+  0509 0A F2 05    	jmp get_token_return
0165+  050C             get_token_minus:
0166+  050C B9 2D       	cmp al, '-'				; check if '-'
0167+  050E C7 26 05    	jne get_token_comma
0168+  0511 F7          	stosb					; store '-' into token string
0169+  0512 19 00       	mov al, 0
0170+  0514 F7          	stosb					; terminate token string
0171+  0515 19 04       	mov al, TOK_MINUS
0172+  0517 3D 67 06    	mov [tok], al			
0173+  051A 19 02       	mov al, TOKTYP_DELIMITER
0174+  051C 3D 66 06    	mov [toktyp], al
0175+  051F 4E          	mov a, si
0176+  0520 42 64 06    	mov [prog], a		; update pointer
0177+  0523 0A F2 05    	jmp get_token_return
0178+  0526             get_token_comma:
0179+  0526 B9 2C       	cmp al, ','				; check if ','
0180+  0528 C7 40 05    	jne get_token_semi
0181+  052B F7          	stosb					; store ',' into token string
0182+  052C 19 00       	mov al, 0
0183+  052E F7          	stosb					; terminate token string
0184+  052F 19 0B       	mov al, TOK_COMMA
0185+  0531 3D 67 06    	mov [tok], al			
0186+  0534 19 02       	mov al, TOKTYP_DELIMITER
0187+  0536 3D 66 06    	mov [toktyp], al
0188+  0539 4E          	mov a, si
0189+  053A 42 64 06    	mov [prog], a		; update pointer
0190+  053D 0A F2 05    	jmp get_token_return
0191+  0540             get_token_semi:
0192+  0540 B9 3B       	cmp al, $3B				; check if ';'
0193+  0542 C7 5A 05    	jne get_token_colon
0194+  0545 F7          	stosb					; store ';' into token string
0195+  0546 19 00       	mov al, 0
0196+  0548 F7          	stosb					; terminate token string
0197+  0549 19 06       	mov al, TOK_SEMI
0198+  054B 3D 67 06    	mov [tok], al			
0199+  054E 19 02       	mov al, TOKTYP_DELIMITER
0200+  0550 3D 66 06    	mov [toktyp], al
0201+  0553 4E          	mov a, si
0202+  0554 42 64 06    	mov [prog], a		; update pointer
0203+  0557 0A F2 05    	jmp get_token_return
0204+  055A             get_token_colon:
0205+  055A B9 3A       	cmp al, $3A				; check if ':'
0206+  055C C7 74 05    	jne get_token_angle
0207+  055F F7          	stosb					; store ':' into token string
0208+  0560 19 00       	mov al, 0
0209+  0562 F7          	stosb					; terminate token string
0210+  0563 19 0A       	mov al, TOK_COLON
0211+  0565 3D 67 06    	mov [tok], al			
0212+  0568 19 02       	mov al, TOKTYP_DELIMITER
0213+  056A 3D 66 06    	mov [toktyp], al
0214+  056D 4E          	mov a, si
0215+  056E 42 64 06    	mov [prog], a		; update pointer
0216+  0571 0A F2 05    	jmp get_token_return
0217+  0574             get_token_angle:
0218+  0574 B9 3E       	cmp al, $3E				; check if '>'
0219+  0576 C7 8E 05    	jne get_token_tilde
0220+  0579 F7          	stosb					; store '>' into token string
0221+  057A 19 00       	mov al, 0
0222+  057C F7          	stosb					; terminate token string
0223+  057D 19 07       	mov al, TOK_ANGLE
0224+  057F 3D 67 06    	mov [tok], al			
0225+  0582 19 02       	mov al, TOKTYP_DELIMITER
0226+  0584 3D 66 06    	mov [toktyp], al
0227+  0587 4E          	mov a, si
0228+  0588 42 64 06    	mov [prog], a		; update pointer
0229+  058B 0A F2 05    	jmp get_token_return
0230+  058E             get_token_tilde:
0231+  058E B9 7E       	cmp al, '~'				; check if '~'
0232+  0590 C7 A8 05    	jne get_token_equal
0233+  0593 F7          	stosb					; store '~' into token string
0234+  0594 19 00       	mov al, 0
0235+  0596 F7          	stosb					; terminate token string
0236+  0597 19 08       	mov al, TOK_TILDE
0237+  0599 3D 67 06    	mov [tok], al			
0238+  059C 19 02       	mov al, TOKTYP_DELIMITER
0239+  059E 3D 66 06    	mov [toktyp], al
0240+  05A1 4E          	mov a, si
0241+  05A2 42 64 06    	mov [prog], a		; update pointer
0242+  05A5 0A F2 05    	jmp get_token_return
0243+  05A8             get_token_equal:
0244+  05A8 B9 3D       	cmp al, '='				; check if '='
0245+  05AA C7 C2 05    	jne get_token_skip
0246+  05AD F7          	stosb					; store '=' into token string
0247+  05AE 19 00       	mov al, 0
0248+  05B0 F7          	stosb					; terminate token string
0249+  05B1 19 09       	mov al, TOK_EQUAL
0250+  05B3 3D 67 06    	mov [tok], al			
0251+  05B6 19 02       	mov al, TOKTYP_DELIMITER
0252+  05B8 3D 66 06    	mov [toktyp], al
0253+  05BB 4E          	mov a, si
0254+  05BC 42 64 06    	mov [prog], a		; update pointer
0255+  05BF 0A F2 05    	jmp get_token_return
0256+  05C2             get_token_skip:
0257+  05C2 4E          	mov a, si
0258+  05C3 42 64 06    	mov [prog], a		; update pointer
0259+  05C6 0A F2 05    	jmp get_token_return
0260+  05C9             get_token_end:				; end of file token
0261+  05C9 19 14       	mov al, TOK_END
0262+  05CB 3D 67 06    	mov [tok], al
0263+  05CE 19 06       	mov al, TOKTYP_END
0264+  05D0 3D 66 06    	mov [toktyp], al
0265+  05D3 0A F2 05    	jmp get_token_return
0266+  05D6             is_alphanumeric:
0267+  05D6 F7          	stosb
0268+  05D7 F6          	lodsb
0269+  05D8 07 E4 0A    	call isalnum			;check if is alphanumeric
0270+  05DB C6 D6 05    	jz is_alphanumeric
0271+  05DE B9 2E       	cmp al, $2E				; check if is '.'
0272+  05E0 C6 D6 05    	je is_alphanumeric
0273+  05E3 19 00       	mov al, 0
0274+  05E5 F7          	stosb
0275+  05E6 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  05E8 3D 66 06    	mov [toktyp], al
0277+  05EB D5 01 00    	sub si, 1
0278+  05EE 4E          	mov a, si
0279+  05EF 42 64 06    	mov [prog], a		; update pointer
0280+  05F2             get_token_return:
0281+  05F2 F0          	pop di
0282+  05F3 EF          	pop si
0283+  05F4 E7          	pop d
0284+  05F5 E4          	pop a
0285+  05F6 09          	ret
0286+  05F7             get_tok_comment:
0287+  05F7 F6          	lodsb
0288+  05F8 B9 0A       	cmp al, $0A			; new line
0289+  05FA C7 F7 05    	jne get_tok_comment
0290+  05FD 0A DB 04    	jmp get_tok_skip_spaces
0291+  0600             
0292+  0600             
0293+  0600             get_number:
0294+  0600 D7          	push a
0295+  0601 DA          	push d
0296+  0602 E2          	push si
0297+  0603 E3          	push di
0298+  0604 19 00       	mov al, 0
0299+  0606 3D 68 06    	mov [tokstr], al			; nullify tokstr string
0300+  0609 19 00       	mov al, TOK_NULL
0301+  060B 3D 67 06    	mov [tok], al				; nullify token
0302+  060E 14 64 06    	mov a, [prog]
0303+  0611 4D          	mov si, a
0304+  0612 FD 4F 68 06 	mov di, tokstr
0305+  0616             get_number_skip_spaces:
0306+  0616 F6          	lodsb
0307+  0617 07 5A 0B    	call isspace
0308+  061A C6 16 06    	je get_number_skip_spaces
0309+  061D B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  061F C7 2F 06    	jne get_number_L0
0311+  0622 19 14       	mov al, TOK_END
0312+  0624 3D 67 06    	mov [tok], al
0313+  0627 19 06       	mov al, TOKTYP_END
0314+  0629 3D 66 06    	mov [toktyp], al
0315+  062C 0A 46 06    	jmp get_number_return
0316+  062F             get_number_L0:
0317+  062F F7          	stosb
0318+  0630 F6          	lodsb
0319+  0631 07 EE 0A    	call isdigit			;check if is numeric
0320+  0634 C6 2F 06    	jz get_number_L0
0321+  0637 19 00       	mov al, 0
0322+  0639 F7          	stosb
0323+  063A 19 05       	mov al, TOKTYP_NUMERIC
0324+  063C 3D 66 06    	mov [toktyp], al
0325+  063F D5 01 00    	sub si, 1
0326+  0642 4E          	mov a, si
0327+  0643 42 64 06    	mov [prog], a		; update pointer
0328+  0646             get_number_return:
0329+  0646 F0          	pop di
0330+  0647 EF          	pop si
0331+  0648 E7          	pop d
0332+  0649 E4          	pop a
0333+  064A 09          	ret
0334+  064B             
0335+  064B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  064B             ;; PUT BACK TOKEN
0337+  064B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  064B             putback:
0339+  064B D7          	push a
0340+  064C E2          	push si
0341+  064D FD 4D 68 06 	mov si, tokstr	
0342+  0651             putback_loop:
0343+  0651 F6          	lodsb
0344+  0652 B9 00       	cmp al, 0
0345+  0654 C6 61 06    	je putback_end
0346+  0657 14 64 06    	mov a, [prog]
0347+  065A 7D          	dec a
0348+  065B 42 64 06    	mov [prog], a			; update pointer
0349+  065E 0A 51 06    	jmp putback_loop
0350+  0661             putback_end:
0351+  0661 EF          	pop si
0352+  0662 E4          	pop a
0353+  0663 09          	ret
0354+  0664             
0355+  0664             
0356+  0664             
0357+  0664             
0358+  0664 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  0666             
0360+  0666 00          toktyp: 	.db 0			; token type symbol
0361+  0667 00          tok:		.db 0			; current token symbol
0362+  0668 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  066C 00 00 00 00 
0362+  0670 00 00 00 00 
0362+  0674 00 00 00 00 
0362+  0678 00 00 00 00 
0362+  067C 00 00 00 00 
0362+  0680 00 00 00 00 
0362+  0684 00 00 00 00 
0362+  0688 00 00 00 00 
0362+  068C 00 00 00 00 
0362+  0690 00 00 00 00 
0362+  0694 00 00 00 00 
0362+  0698 00 00 00 00 
0362+  069C 00 00 00 00 
0362+  06A0 00 00 00 00 
0362+  06A4 00 00 00 00 
0362+  06A8 00 00 00 00 
0362+  06AC 00 00 00 00 
0362+  06B0 00 00 00 00 
0362+  06B4 00 00 00 00 
0362+  06B8 00 00 00 00 
0362+  06BC 00 00 00 00 
0362+  06C0 00 00 00 00 
0362+  06C4 00 00 00 00 
0362+  06C8 00 00 00 00 
0362+  06CC 00 00 00 00 
0362+  06D0 00 00 00 00 
0362+  06D4 00 00 00 00 
0362+  06D8 00 00 00 00 
0362+  06DC 00 00 00 00 
0362+  06E0 00 00 00 00 
0362+  06E4 00 00 00 00 
0362+  06E8 00 00 00 00 
0362+  06EC 00 00 00 00 
0362+  06F0 00 00 00 00 
0362+  06F4 00 00 00 00 
0362+  06F8 00 00 00 00 
0362+  06FC 00 00 00 00 
0362+  0700 00 00 00 00 
0362+  0704 00 00 00 00 
0362+  0708 00 00 00 00 
0362+  070C 00 00 00 00 
0362+  0710 00 00 00 00 
0362+  0714 00 00 00 00 
0362+  0718 00 00 00 00 
0362+  071C 00 00 00 00 
0362+  0720 00 00 00 00 
0362+  0724 00 00 00 00 
0362+  0728 00 00 00 00 
0362+  072C 00 00 00 00 
0362+  0730 00 00 00 00 
0362+  0734 00 00 00 00 
0362+  0738 00 00 00 00 
0362+  073C 00 00 00 00 
0362+  0740 00 00 00 00 
0362+  0744 00 00 00 00 
0362+  0748 00 00 00 00 
0362+  074C 00 00 00 00 
0362+  0750 00 00 00 00 
0362+  0754 00 00 00 00 
0362+  0758 00 00 00 00 
0362+  075C 00 00 00 00 
0362+  0760 00 00 00 00 
0362+  0764 00 00 00 00 
0041   0768             .include "stdio.asm"
0001+  0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0768             ; stdio.s
0003+  0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0768             .include "string.asm"
0001++ 0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0768             ; string.s
0003++ 0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0768             
0005++ 0768             
0006++ 0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0768             ; strrev
0008++ 0768             ; reverse a string
0009++ 0768             ; D = string address
0010++ 0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0768             ; 01234
0012++ 0768             strrev:
0013++ 0768 4B          	pusha
0014++ 0769 07 AF 07    	call strlen	; length in C
0015++ 076C 12          	mov a, c
0016++ 076D AF 01 00    	cmp a, 1
0017++ 0770 D0 8A 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0773 7D          	dec a
0019++ 0774 FD 4E       	mov si, d	; beginning of string
0020++ 0776 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0778 59          	add d, a	; end of string
0022++ 0779 12          	mov a, c
0023++ 077A FD 9B       	shr a		; divide by 2
0024++ 077C 39          	mov c, a	; C now counts the steps
0025++ 077D             strrev_L0:
0026++ 077D 32          	mov bl, [d]	; save load right-side char into BL
0027++ 077E F6          	lodsb		; load left-side char into AL; increase SI
0028++ 077F 3E          	mov [d], al	; store left char into right side
0029++ 0780 1B          	mov al, bl
0030++ 0781 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0782 7E          	dec c
0032++ 0783 7F          	dec d
0033++ 0784 C2 00 00    	cmp c, 0
0034++ 0787 C7 7D 07    	jne strrev_L0
0035++ 078A             strrev_end:
0036++ 078A 4C          	popa
0037++ 078B 09          	ret
0038++ 078C             	
0039++ 078C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 078C             ; strchr
0041++ 078C             ; search string in D for char in AL
0042++ 078C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 078C             strchr:
0044++ 078C             strchr_L0:
0045++ 078C 32          	mov bl, [d]
0046++ 078D C1 00       	cmp bl, 0
0047++ 078F C6 9A 07    	je strchr_end
0048++ 0792 BA          	cmp al, bl
0049++ 0793 C6 9A 07    	je strchr_end
0050++ 0796 79          	inc d
0051++ 0797 0A 8C 07    	jmp strchr_L0
0052++ 079A             strchr_end:
0053++ 079A 1B          	mov al, bl
0054++ 079B 09          	ret
0055++ 079C             
0056++ 079C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 079C             ; strstr
0058++ 079C             ; find sub-string
0059++ 079C             ; str1 in SI
0060++ 079C             ; str2 in DI
0061++ 079C             ; SI points to end of source string
0062++ 079C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 079C             strstr:
0064++ 079C DB          	push al
0065++ 079D DA          	push d
0066++ 079E E3          	push di
0067++ 079F             strstr_loop:
0068++ 079F F3          	cmpsb					; compare a byte of the strings
0069++ 07A0 C7 AB 07    	jne strstr_ret
0070++ 07A3 FC 00 00    	lea d, [di + 0]
0071++ 07A6 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 07A8 C7 9F 07    	jne strstr_loop				; equal chars but not at end
0073++ 07AB             strstr_ret:
0074++ 07AB F0          	pop di
0075++ 07AC E7          	pop d
0076++ 07AD E8          	pop al
0077++ 07AE 09          	ret
0078++ 07AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 07AF             ; length of null terminated string
0080++ 07AF             ; result in C
0081++ 07AF             ; pointer in D
0082++ 07AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 07AF             strlen:
0084++ 07AF DA          	push d
0085++ 07B0 38 00 00    	mov c, 0
0086++ 07B3             strlen_L1:
0087++ 07B3 BD 00       	cmp byte [d], 0
0088++ 07B5 C6 BD 07    	je strlen_ret
0089++ 07B8 79          	inc d
0090++ 07B9 78          	inc c
0091++ 07BA 0A B3 07    	jmp strlen_L1
0092++ 07BD             strlen_ret:
0093++ 07BD E7          	pop d
0094++ 07BE 09          	ret
0095++ 07BF             
0096++ 07BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07BF             ; STRCMP
0098++ 07BF             ; compare two strings
0099++ 07BF             ; str1 in SI
0100++ 07BF             ; str2 in DI
0101++ 07BF             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 07BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07BF             strcmp:
0104++ 07BF DB          	push al
0105++ 07C0 DA          	push d
0106++ 07C1 E3          	push di
0107++ 07C2 E2          	push si
0108++ 07C3             strcmp_loop:
0109++ 07C3 F3          	cmpsb					; compare a byte of the strings
0110++ 07C4 C7 CF 07    	jne strcmp_ret
0111++ 07C7 FB FF FF    	lea d, [si +- 1]
0112++ 07CA BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07CC C7 C3 07    	jne strcmp_loop				; equal chars but not at end
0114++ 07CF             strcmp_ret:
0115++ 07CF EF          	pop si
0116++ 07D0 F0          	pop di
0117++ 07D1 E7          	pop d
0118++ 07D2 E8          	pop al
0119++ 07D3 09          	ret
0120++ 07D4             
0121++ 07D4             
0122++ 07D4             ; STRCPY
0123++ 07D4             ; copy null terminated string from SI to DI
0124++ 07D4             ; source in SI
0125++ 07D4             ; destination in DI
0126++ 07D4             strcpy:
0127++ 07D4 E2          	push si
0128++ 07D5 E3          	push di
0129++ 07D6 DB          	push al
0130++ 07D7             strcpy_L1:
0131++ 07D7 F6          	lodsb
0132++ 07D8 F7          	stosb
0133++ 07D9 B9 00       	cmp al, 0
0134++ 07DB C7 D7 07    	jne strcpy_L1
0135++ 07DE             strcpy_end:
0136++ 07DE E8          	pop al
0137++ 07DF F0          	pop di
0138++ 07E0 EF          	pop si
0139++ 07E1 09          	ret
0140++ 07E2             
0141++ 07E2             ; STRCAT
0142++ 07E2             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07E2             ; source in SI
0144++ 07E2             ; destination in DI
0145++ 07E2             strcat:
0146++ 07E2 E2          	push si
0147++ 07E3 E3          	push di
0148++ 07E4 D7          	push a
0149++ 07E5 DA          	push d
0150++ 07E6 50          	mov a, di
0151++ 07E7 3C          	mov d, a
0152++ 07E8             strcat_goto_end_L1:
0153++ 07E8 BD 00       	cmp byte[d], 0
0154++ 07EA C6 F1 07    	je strcat_start
0155++ 07ED 79          	inc d
0156++ 07EE 0A E8 07    	jmp strcat_goto_end_L1
0157++ 07F1             strcat_start:
0158++ 07F1 FD 50       	mov di, d
0159++ 07F3             strcat_L1:
0160++ 07F3 F6          	lodsb
0161++ 07F4 F7          	stosb
0162++ 07F5 B9 00       	cmp al, 0
0163++ 07F7 C7 F3 07    	jne strcat_L1
0164++ 07FA             strcat_end:
0165++ 07FA E7          	pop d
0166++ 07FB E4          	pop a
0167++ 07FC F0          	pop di
0168++ 07FD EF          	pop si
0169++ 07FE 09          	ret
0005+  07FF             
0006+  07FF 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0803 34 35 36 37 
0006+  0807 38 39 41 42 
0006+  080B 43 44 45 46 
0007+  080F             
0008+  080F 01 00       table_power:.dw 1
0009+  0811 0A 00       			.dw 10
0010+  0813 64 00       			.dw 100
0011+  0815 E8 03       			.dw 1000
0012+  0817 10 27       			.dw 10000
0013+  0819             
0014+  0819             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  0819             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  0819             ; ASCII in BL
0017+  0819             ; result in AL
0018+  0819             ; ascii for F = 0100 0110
0019+  0819             ; ascii for 9 = 0011 1001
0020+  0819             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  0819             hex_ascii_encode:
0022+  0819 1B          	mov al, bl
0023+  081A 93 40       	test al, $40				; test if letter or number
0024+  081C C7 22 08    	jnz hex_letter
0025+  081F 87 0F       	and al, $0F				; get number
0026+  0821 09          	ret
0027+  0822             hex_letter:
0028+  0822 87 0F       	and al, $0F				; get letter
0029+  0824 6A 09       	add al, 9
0030+  0826 09          	ret
0031+  0827             
0032+  0827             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  0827             ; ATOI
0034+  0827             ; 2 letter hex string in B
0035+  0827             ; 8bit integer returned in AL
0036+  0827             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  0827             atoi:
0038+  0827 D8          	push b
0039+  0828 07 19 08    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  082B 30          	mov bl, bh
0041+  082C DB          	push al					; save a
0042+  082D 07 19 08    	call hex_ascii_encode
0043+  0830 EA          	pop bl	
0044+  0831 FD 9E 04    	shl al, 4
0045+  0834 8C          	or al, bl
0046+  0835 E5          	pop b
0047+  0836 09          	ret	
0048+  0837             
0049+  0837             
0050+  0837             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0837             ; printf
0052+  0837             ; no need for explanations!
0053+  0837             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  0837             printf:
0055+  0837 09          	ret
0056+  0838             
0057+  0838             
0058+  0838             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0838             ; scanf
0060+  0838             ; no need for explanations!
0061+  0838             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0838             scanf:
0063+  0838 09          	ret
0064+  0839             
0065+  0839             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0839             ; ITOA
0067+  0839             ; 8bit value in BL
0068+  0839             ; 2 byte ASCII result in A
0069+  0839             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  0839             itoa:
0071+  0839 DA          	push d
0072+  083A D8          	push b
0073+  083B A7 00       	mov bh, 0
0074+  083D FD A4 04    	shr bl, 4	
0075+  0840 74          	mov d, b
0076+  0841 1F FF 07    	mov al, [d + s_hex_digits]
0077+  0844 23          	mov ah, al
0078+  0845             	
0079+  0845 E5          	pop b
0080+  0846 D8          	push b
0081+  0847 A7 00       	mov bh, 0
0082+  0849 FD 87 0F    	and bl, $0F
0083+  084C 74          	mov d, b
0084+  084D 1F FF 07    	mov al, [d + s_hex_digits]
0085+  0850 E5          	pop b
0086+  0851 E7          	pop d
0087+  0852 09          	ret
0088+  0853             
0089+  0853             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0853             ; HEX STRING TO BINARY
0091+  0853             ; di = destination address
0092+  0853             ; si = source
0093+  0853             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0853             hex_to_int:
0095+  0853             hex_to_int_L1:
0096+  0853 F6          	lodsb					; load from [SI] to AL
0097+  0854 B9 00       	cmp al, 0				; check if ASCII 0
0098+  0856 C6 63 08    	jz hex_to_int_ret
0099+  0859 36          	mov bh, al
0100+  085A F6          	lodsb
0101+  085B 2F          	mov bl, al
0102+  085C 07 27 08    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  085F F7          	stosb					; store AL to [DI]
0104+  0860 0A 53 08    	jmp hex_to_int_L1
0105+  0863             hex_to_int_ret:
0106+  0863 09          	ret		
0107+  0864             
0108+  0864             
0109+  0864             
0110+  0864             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0864             ; GETCHAR
0112+  0864             ; char in ah
0113+  0864             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0864             getchar:
0115+  0864 DB          	push al
0116+  0865             getchar_retry:
0117+  0865 FD 0C       	sti
0118+  0867 19 01       	mov al, 1
0119+  0869 05 03       	syscall sys_io			; receive in AH
0120+  086B B9 00       	cmp al, 0			; check if any char was receive
0121+  086D C6 65 08    	je getchar_retry
0122+  0870 E8          	pop al
0123+  0871 09          	ret
0124+  0872             
0125+  0872             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0872             ; PUTCHAR
0127+  0872             ; char in ah
0128+  0872             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0872             putchar:
0130+  0872 D7          	push a
0131+  0873 19 00       	mov al, 0
0132+  0875 05 03       	syscall sys_io			; char in AH
0133+  0877 E4          	pop a
0134+  0878 09          	ret
0135+  0879             
0136+  0879             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  0879             ;; INPUT A STRING
0138+  0879             ;; terminates with null
0139+  0879             ;; pointer in D
0140+  0879             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0879             gets:
0142+  0879 D7          	push a
0143+  087A DA          	push d
0144+  087B             gets_loop:
0145+  087B FD 0C       	sti
0146+  087D 19 01       	mov al, 1
0147+  087F 05 03       	syscall sys_io			; receive in AH
0148+  0881 B9 00       	cmp al, 0				; check error code (AL)
0149+  0883 C6 7B 08    	je gets_loop			; if no char received, retry
0150+  0886             
0151+  0886 76 1B       	cmp ah, 27
0152+  0888 C6 A9 08    	je gets_telnet_escape
0153+  088B 76 0A       	cmp ah, $0A				; LF
0154+  088D C6 02 09    	je gets_end
0155+  0890 76 0D       	cmp ah, $0D				; CR
0156+  0892 C6 02 09    	je gets_end
0157+  0895 76 5C       	cmp ah, $5C				; '\\'
0158+  0897 C6 D9 08    	je gets_escape
0159+  089A             	
0160+  089A 76 08       	cmp ah, $08			; check for backspace
0161+  089C C6 A5 08    	je gets_backspace
0162+  089F             
0163+  089F 1A          	mov al, ah
0164+  08A0 3E          	mov [d], al
0165+  08A1 79          	inc d
0166+  08A2 0A 7B 08    	jmp gets_loop
0167+  08A5             gets_backspace:
0168+  08A5 7F          	dec d
0169+  08A6 0A 7B 08    	jmp gets_loop
0170+  08A9             gets_telnet_escape:
0171+  08A9 FD 0C       	sti
0172+  08AB 19 01       	mov al, 1
0173+  08AD 05 03       	syscall sys_io				; receive in AH without echo
0174+  08AF B9 00       	cmp al, 0					; check error code (AL)
0175+  08B1 C6 A9 08    	je gets_telnet_escape		; if no char received, retry
0176+  08B4 76 5B       	cmp ah, '['
0177+  08B6 C7 7B 08    	jne gets_loop
0178+  08B9             gets_telnet_escape_phase2:
0179+  08B9 FD 0C       	sti
0180+  08BB 19 01       	mov al, 1
0181+  08BD 05 03       	syscall sys_io					; receive in AH without echo
0182+  08BF B9 00       	cmp al, 0						; check error code (AL)
0183+  08C1 C6 B9 08    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  08C4 76 44       	cmp ah, 'D'
0185+  08C6 C6 D1 08    	je gets_left_arrow
0186+  08C9 76 43       	cmp ah, 'C'
0187+  08CB C6 D5 08    	je gets_right_arrow
0188+  08CE 0A 7B 08    	jmp gets_loop
0189+  08D1             gets_left_arrow:
0190+  08D1 7F          	dec d
0191+  08D2 0A 7B 08    	jmp gets_loop
0192+  08D5             gets_right_arrow:
0193+  08D5 79          	inc d
0194+  08D6 0A 7B 08    	jmp gets_loop
0195+  08D9             gets_escape:
0196+  08D9 FD 0C       	sti
0197+  08DB 19 01       	mov al, 1
0198+  08DD 05 03       	syscall sys_io			; receive in AH
0199+  08DF B9 00       	cmp al, 0				; check error code (AL)
0200+  08E1 C6 D9 08    	je gets_escape			; if no char received, retry
0201+  08E4 76 6E       	cmp ah, 'n'
0202+  08E6 C6 F4 08    	je gets_LF
0203+  08E9 76 72       	cmp ah, 'r'
0204+  08EB C6 FB 08    	je gets_CR
0205+  08EE 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  08EF 3E          	mov [d], al
0207+  08F0 79          	inc d
0208+  08F1 0A 7B 08    	jmp gets_loop
0209+  08F4             gets_LF:
0210+  08F4 19 0A       	mov al, $0A
0211+  08F6 3E          	mov [d], al
0212+  08F7 79          	inc d
0213+  08F8 0A 7B 08    	jmp gets_loop
0214+  08FB             gets_CR:
0215+  08FB 19 0D       	mov al, $0D
0216+  08FD 3E          	mov [d], al
0217+  08FE 79          	inc d
0218+  08FF 0A 7B 08    	jmp gets_loop
0219+  0902             gets_end:
0220+  0902 19 00       	mov al, 0
0221+  0904 3E          	mov [d], al				; terminate string
0222+  0905 E7          	pop d
0223+  0906 E4          	pop a
0224+  0907 09          	ret
0225+  0908             
0226+  0908             
0227+  0908             
0228+  0908             
0229+  0908             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  0908             ;; INPUT TEXT
0231+  0908             ;; terminated with CTRL+D
0232+  0908             ;; pointer in D
0233+  0908             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  0908             gettxt:
0235+  0908 D7          	push a
0236+  0909 DA          	push d
0237+  090A             gettxt_loop:
0238+  090A 19 01       	mov al, 1
0239+  090C 05 03       	syscall sys_io			; receive in AH
0240+  090E B9 00       	cmp al, 0				; check error code (AL)
0241+  0910 C6 0A 09    	je gettxt_loop		; if no char received, retry
0242+  0913 76 04       	cmp ah, 4			; EOT
0243+  0915 C6 53 09    	je gettxt_end
0244+  0918 76 08       	cmp ah, $08			; check for backspace
0245+  091A C6 4F 09    	je gettxt_backspace
0246+  091D 76 5C       	cmp ah, $5C				; '\\'
0247+  091F C6 28 09    	je gettxt_escape
0248+  0922 1A          	mov al, ah
0249+  0923 3E          	mov [d], al
0250+  0924 79          	inc d
0251+  0925 0A 0A 09    	jmp gettxt_loop
0252+  0928             gettxt_escape:
0253+  0928 19 01       	mov al, 1
0254+  092A 05 03       	syscall sys_io			; receive in AH
0255+  092C B9 00       	cmp al, 0				; check error code (AL)
0256+  092E C6 28 09    	je gettxt_escape		; if no char received, retry
0257+  0931 76 6E       	cmp ah, 'n'
0258+  0933 C6 41 09    	je gettxt_LF
0259+  0936 76 72       	cmp ah, 'r'
0260+  0938 C6 48 09    	je gettxt_CR
0261+  093B 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  093C 3E          	mov [d], al
0263+  093D 79          	inc d
0264+  093E 0A 0A 09    	jmp gettxt_loop
0265+  0941             gettxt_LF:
0266+  0941 19 0A       	mov al, $0A
0267+  0943 3E          	mov [d], al
0268+  0944 79          	inc d
0269+  0945 0A 0A 09    	jmp gettxt_loop
0270+  0948             gettxt_CR:
0271+  0948 19 0D       	mov al, $0D
0272+  094A 3E          	mov [d], al
0273+  094B 79          	inc d
0274+  094C 0A 0A 09    	jmp gettxt_loop
0275+  094F             gettxt_backspace:
0276+  094F 7F          	dec d
0277+  0950 0A 0A 09    	jmp gettxt_loop
0278+  0953             gettxt_end:
0279+  0953 19 00       	mov al, 0
0280+  0955 3E          	mov [d], al				; terminate string
0281+  0956 E7          	pop d
0282+  0957 E4          	pop a
0283+  0958 09          	ret
0284+  0959             
0285+  0959             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0959             ; PRINT NEW LINE
0287+  0959             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  0959             printnl:
0289+  0959 D7          	push a
0290+  095A 10 00 0A    	mov a, $0A00
0291+  095D 05 03       	syscall sys_io
0292+  095F 10 00 0D    	mov a, $0D00
0293+  0962 05 03       	syscall sys_io
0294+  0964 E4          	pop a
0295+  0965 09          	ret
0296+  0966             
0297+  0966             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  0966             ; strtoint
0299+  0966             ; 4 digit hex string number in d
0300+  0966             ; integer returned in A
0301+  0966             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  0966             strtointx:
0303+  0966 D8          	push b
0304+  0967 32          	mov bl, [d]
0305+  0968 37          	mov bh, bl
0306+  0969 33 01 00    	mov bl, [d + 1]
0307+  096C 07 27 08    	call atoi				; convert to int in AL
0308+  096F 23          	mov ah, al				; move to AH
0309+  0970 33 02 00    	mov bl, [d + 2]
0310+  0973 37          	mov bh, bl
0311+  0974 33 03 00    	mov bl, [d + 3]
0312+  0977 07 27 08    	call atoi				; convert to int in AL
0313+  097A E5          	pop b
0314+  097B 09          	ret
0315+  097C             
0316+  097C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  097C             ; strtoint
0318+  097C             ; 5 digit base10 string number in d
0319+  097C             ; integer returned in A
0320+  097C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  097C             strtoint:
0322+  097C E2          	push si
0323+  097D D8          	push b
0324+  097E D9          	push c
0325+  097F DA          	push d
0326+  0980 07 AF 07    	call strlen			; get string length in C
0327+  0983 7E          	dec c
0328+  0984 FD 4E       	mov si, d
0329+  0986 12          	mov a, c
0330+  0987 FD 99       	shl a
0331+  0989 3B 0F 08    	mov d, table_power
0332+  098C 59          	add d, a
0333+  098D 38 00 00    	mov c, 0
0334+  0990             strtoint_L0:
0335+  0990 F6          	lodsb			; load ASCII to al
0336+  0991 B9 00       	cmp al, 0
0337+  0993 C6 A6 09    	je strtoint_end
0338+  0996 6F 30       	sub al, $30		; make into integer
0339+  0998 22 00       	mov ah, 0
0340+  099A 2A          	mov b, [d]
0341+  099B AC          	mul a, b			; result in B since it fits in 16bits
0342+  099C 11          	mov a, b
0343+  099D 28          	mov b, c
0344+  099E 54          	add a, b
0345+  099F 39          	mov c, a
0346+  09A0 63 02 00    	sub d, 2
0347+  09A3 0A 90 09    	jmp strtoint_L0
0348+  09A6             strtoint_end:
0349+  09A6 12          	mov a, c
0350+  09A7 E7          	pop d
0351+  09A8 E6          	pop c
0352+  09A9 E5          	pop b
0353+  09AA EF          	pop si
0354+  09AB 09          	ret
0355+  09AC             
0356+  09AC             
0357+  09AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  09AC             ; PRINT NULL TERMINATED STRING
0359+  09AC             ; pointer in D
0360+  09AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  09AC             puts:
0362+  09AC D7          	push a
0363+  09AD DA          	push d
0364+  09AE             puts_L1:
0365+  09AE 1E          	mov al, [d]
0366+  09AF B9 00       	cmp al, 0
0367+  09B1 C6 BD 09    	jz puts_END
0368+  09B4 23          	mov ah, al
0369+  09B5 19 00       	mov al, 0
0370+  09B7 05 03       	syscall sys_io
0371+  09B9 79          	inc d
0372+  09BA 0A AE 09    	jmp puts_L1
0373+  09BD             puts_END:
0374+  09BD E7          	pop d
0375+  09BE E4          	pop a
0376+  09BF 09          	ret
0377+  09C0             
0378+  09C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  09C0             ; PRINT N SIZE STRING
0380+  09C0             ; pointer in D
0381+  09C0             ; size in C
0382+  09C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  09C0             putsn:
0384+  09C0 DB          	push al
0385+  09C1 DA          	push d
0386+  09C2 D9          	push c
0387+  09C3             putsn_L0:
0388+  09C3 1E          	mov al, [d]
0389+  09C4 23          	mov ah, al
0390+  09C5 19 00       	mov al, 0
0391+  09C7 05 03       	syscall sys_io
0392+  09C9 79          	inc d
0393+  09CA 7E          	dec c	
0394+  09CB C2 00 00    	cmp c, 0
0395+  09CE C7 C3 09    	jne putsn_L0
0396+  09D1             putsn_end:
0397+  09D1 E6          	pop c
0398+  09D2 E7          	pop d
0399+  09D3 E8          	pop al
0400+  09D4 09          	ret
0401+  09D5             
0402+  09D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  09D5             ; print 16bit decimal number
0404+  09D5             ; input number in A
0405+  09D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  09D5             print_u16d:
0407+  09D5 D7          	push a
0408+  09D6 D8          	push b
0409+  09D7 26 10 27    	mov b, 10000
0410+  09DA AE          	div a, b			; get 10000 coeff.
0411+  09DB 07 01 0A    	call print_number
0412+  09DE 11          	mov a, b
0413+  09DF 26 E8 03    	mov b, 1000
0414+  09E2 AE          	div a, b			; get 10000 coeff.
0415+  09E3 07 01 0A    	call print_number
0416+  09E6 11          	mov a, b
0417+  09E7 26 64 00    	mov b, 100
0418+  09EA AE          	div a, b
0419+  09EB 07 01 0A    	call print_number
0420+  09EE 11          	mov a, b
0421+  09EF 26 0A 00    	mov b, 10
0422+  09F2 AE          	div a, b
0423+  09F3 07 01 0A    	call print_number
0424+  09F6 11          	mov a, b
0425+  09F7 6A 30       	add al, $30
0426+  09F9 23          	mov ah, al
0427+  09FA 19 00       	mov al, 0
0428+  09FC 05 03       	syscall sys_io	; print coeff
0429+  09FE E5          	pop b
0430+  09FF E4          	pop a
0431+  0A00 09          	ret
0432+  0A01             
0433+  0A01             
0434+  0A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  0A01             ; if A == 0, print space
0436+  0A01             ; else print A
0437+  0A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  0A01             print_number:
0439+  0A01 6A 30       	add al, $30
0440+  0A03 23          	mov ah, al
0441+  0A04 07 72 08    	call putchar
0442+  0A07 09          	ret
0443+  0A08             
0444+  0A08             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  0A08             ; PRINT 16BIT HEX INTEGER
0446+  0A08             ; integer value in reg B
0447+  0A08             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  0A08             print_u16x:
0449+  0A08 D7          	push a
0450+  0A09 D8          	push b
0451+  0A0A DD          	push bl
0452+  0A0B 30          	mov bl, bh
0453+  0A0C 07 39 08    	call itoa				; convert bh to char in A
0454+  0A0F 2F          	mov bl, al				; save al
0455+  0A10 19 00       	mov al, 0
0456+  0A12 05 03       	syscall sys_io				; display AH
0457+  0A14 24          	mov ah, bl				; retrieve al
0458+  0A15 19 00       	mov al, 0
0459+  0A17 05 03       	syscall sys_io				; display AL
0460+  0A19             
0461+  0A19 EA          	pop bl
0462+  0A1A 07 39 08    	call itoa				; convert bh to char in A
0463+  0A1D 2F          	mov bl, al				; save al
0464+  0A1E 19 00       	mov al, 0
0465+  0A20 05 03       	syscall sys_io				; display AH
0466+  0A22 24          	mov ah, bl				; retrieve al
0467+  0A23 19 00       	mov al, 0
0468+  0A25 05 03       	syscall sys_io				; display AL
0469+  0A27             
0470+  0A27 E5          	pop b
0471+  0A28 E4          	pop a
0472+  0A29 09          	ret
0473+  0A2A             
0474+  0A2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  0A2A             ; INPUT 16BIT HEX INTEGER
0476+  0A2A             ; read 16bit integer into A
0477+  0A2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  0A2A             scan_u16x:
0479+  0A2A F8 10 00    	enter 16
0480+  0A2D D8          	push b
0481+  0A2E DA          	push d
0482+  0A2F             
0483+  0A2F FA F1 FF    	lea d, [bp + -15]
0484+  0A32 07 79 08    	call gets				; get number
0485+  0A35             
0486+  0A35 32          	mov bl, [d]
0487+  0A36 37          	mov bh, bl
0488+  0A37 33 01 00    	mov bl, [d + 1]
0489+  0A3A 07 27 08    	call atoi				; convert to int in AL
0490+  0A3D 23          	mov ah, al				; move to AH
0491+  0A3E             
0492+  0A3E 33 02 00    	mov bl, [d + 2]
0493+  0A41 37          	mov bh, bl
0494+  0A42 33 03 00    	mov bl, [d + 3]
0495+  0A45 07 27 08    	call atoi				; convert to int in AL
0496+  0A48             
0497+  0A48 E7          	pop d
0498+  0A49 E5          	pop b
0499+  0A4A F9          	leave
0500+  0A4B 09          	ret
0501+  0A4C             
0502+  0A4C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  0A4C             ; PRINT 8bit HEX INTEGER
0504+  0A4C             ; integer value in reg bl
0505+  0A4C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  0A4C             print_u8x:
0507+  0A4C D7          	push a
0508+  0A4D DD          	push bl
0509+  0A4E             
0510+  0A4E 07 39 08    	call itoa				; convert bl to char in A
0511+  0A51 2F          	mov bl, al				; save al
0512+  0A52 19 00       	mov al, 0
0513+  0A54 05 03       	syscall sys_io				; display AH
0514+  0A56 24          	mov ah, bl				; retrieve al
0515+  0A57 19 00       	mov al, 0
0516+  0A59 05 03       	syscall sys_io				; display AL
0517+  0A5B             
0518+  0A5B EA          	pop bl
0519+  0A5C E4          	pop a
0520+  0A5D 09          	ret
0521+  0A5E             
0522+  0A5E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0A5E             ; print 8bit decimal unsigned number
0524+  0A5E             ; input number in AL
0525+  0A5E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0A5E             print_u8d:
0527+  0A5E D7          	push a
0528+  0A5F D8          	push b
0529+  0A60             
0530+  0A60 22 00       	mov ah, 0
0531+  0A62 26 64 00    	mov b, 100
0532+  0A65 AE          	div a, b
0533+  0A66 D8          	push b			; save remainder
0534+  0A67 B9 00       	cmp al, 0
0535+  0A69 C6 73 0A    	je skip100
0536+  0A6C 6A 30       	add al, $30
0537+  0A6E 23          	mov ah, al
0538+  0A6F 19 00       	mov al, 0
0539+  0A71 05 03       	syscall sys_io	; print coeff
0540+  0A73             skip100:
0541+  0A73 E4          	pop a
0542+  0A74 22 00       	mov ah, 0
0543+  0A76 26 0A 00    	mov b, 10
0544+  0A79 AE          	div a, b
0545+  0A7A D8          	push b			; save remainder
0546+  0A7B B9 00       	cmp al, 0
0547+  0A7D C6 87 0A    	je skip10
0548+  0A80 6A 30       	add al, $30
0549+  0A82 23          	mov ah, al
0550+  0A83 19 00       	mov al, 0
0551+  0A85 05 03       	syscall sys_io	; print coeff
0552+  0A87             skip10:
0553+  0A87 E4          	pop a
0554+  0A88 1B          	mov al, bl
0555+  0A89 6A 30       	add al, $30
0556+  0A8B 23          	mov ah, al
0557+  0A8C 19 00       	mov al, 0
0558+  0A8E 05 03       	syscall sys_io	; print coeff
0559+  0A90 E5          	pop b
0560+  0A91 E4          	pop a
0561+  0A92 09          	ret
0562+  0A93             
0563+  0A93             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  0A93             ; INPUT 8BIT HEX INTEGER
0565+  0A93             ; read 8bit integer into AL
0566+  0A93             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  0A93             scan_u8x:
0568+  0A93 F8 04 00    	enter 4
0569+  0A96 D8          	push b
0570+  0A97 DA          	push d
0571+  0A98             
0572+  0A98 FA FD FF    	lea d, [bp + -3]
0573+  0A9B 07 79 08    	call gets				; get number
0574+  0A9E             
0575+  0A9E 32          	mov bl, [d]
0576+  0A9F 37          	mov bh, bl
0577+  0AA0 33 01 00    	mov bl, [d + 1]
0578+  0AA3 07 27 08    	call atoi				; convert to int in AL
0579+  0AA6             
0580+  0AA6 E7          	pop d
0581+  0AA7 E5          	pop b
0582+  0AA8 F9          	leave
0583+  0AA9 09          	ret
0584+  0AAA             
0585+  0AAA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  0AAA             ; input decimal number
0587+  0AAA             ; result in A
0588+  0AAA             ; 655'\0'
0589+  0AAA             ; low--------high
0590+  0AAA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  0AAA             scan_u16d:
0592+  0AAA F8 08 00    	enter 8
0593+  0AAD E2          	push si
0594+  0AAE D8          	push b
0595+  0AAF D9          	push c
0596+  0AB0 DA          	push d
0597+  0AB1 FA F9 FF    	lea d, [bp +- 7]
0598+  0AB4 07 79 08    	call gets
0599+  0AB7 07 AF 07    	call strlen			; get string length in C
0600+  0ABA 7E          	dec c
0601+  0ABB FD 4E       	mov si, d
0602+  0ABD 12          	mov a, c
0603+  0ABE FD 99       	shl a
0604+  0AC0 3B 0F 08    	mov d, table_power
0605+  0AC3 59          	add d, a
0606+  0AC4 38 00 00    	mov c, 0
0607+  0AC7             mul_loop:
0608+  0AC7 F6          	lodsb			; load ASCII to al
0609+  0AC8 B9 00       	cmp al, 0
0610+  0ACA C6 DD 0A    	je mul_exit
0611+  0ACD 6F 30       	sub al, $30		; make into integer
0612+  0ACF 22 00       	mov ah, 0
0613+  0AD1 2A          	mov b, [d]
0614+  0AD2 AC          	mul a, b			; result in B since it fits in 16bits
0615+  0AD3 11          	mov a, b
0616+  0AD4 28          	mov b, c
0617+  0AD5 54          	add a, b
0618+  0AD6 39          	mov c, a
0619+  0AD7 63 02 00    	sub d, 2
0620+  0ADA 0A C7 0A    	jmp mul_loop
0621+  0ADD             mul_exit:
0622+  0ADD 12          	mov a, c
0623+  0ADE E7          	pop d
0624+  0ADF E6          	pop c
0625+  0AE0 E5          	pop b
0626+  0AE1 EF          	pop si
0627+  0AE2 F9          	leave
0628+  0AE3 09          	ret
0042   0AE4             .include "ctype.asm"
0001+  0AE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0AE4             ; ctype.s
0003+  0AE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0AE4             
0005+  0AE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0AE4             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0AE4             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0AE4             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0AE4             ;; characters are supported.
0010+  0AE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0AE4             ;; isalnum 
0012+  0AE4             ;; isalpha 
0013+  0AE4             ;; islower 
0014+  0AE4             ;; isupper 
0015+  0AE4             ;; isdigit 
0016+  0AE4             ;; isxdigit
0017+  0AE4             ;; iscntrl 
0018+  0AE4             ;; isgraph 
0019+  0AE4             ;; isspace 
0020+  0AE4             ;; isblank 
0021+  0AE4             ;; isprint 
0022+  0AE4             ;; ispunct 
0023+  0AE4             ;; tolower 
0024+  0AE4             ;; toupper
0025+  0AE4             
0026+  0AE4             
0027+  0AE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0AE4             ;; IS ALPHANUMERIC
0029+  0AE4             ;; sets ZF according with result
0030+  0AE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0AE4             isalnum:
0032+  0AE4 07 01 0B    	call isalpha
0033+  0AE7 C6 ED 0A    	je isalnum_exit
0034+  0AEA 07 EE 0A    	call isdigit
0035+  0AED             isalnum_exit:
0036+  0AED 09          	ret	
0037+  0AEE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0AEE             ;; IS DIGIT
0039+  0AEE             ;; sets ZF according with result
0040+  0AEE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0AEE             isdigit:
0042+  0AEE DB          	push al
0043+  0AEF B9 30       	cmp al, '0'
0044+  0AF1 C8 FD 0A    	jlu isdigit_false
0045+  0AF4 B9 39       	cmp al, '9'
0046+  0AF6 D1 FD 0A    	jgu isdigit_false
0047+  0AF9 87 00       	and al, 0	; set ZF
0048+  0AFB E8          	pop al
0049+  0AFC 09          	ret
0050+  0AFD             isdigit_false:
0051+  0AFD 8B 01       	or al, 1	; clear ZF
0052+  0AFF E8          	pop al
0053+  0B00 09          	ret	
0054+  0B01             	
0055+  0B01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0B01             ;; IS ALPHA
0057+  0B01             ;; sets ZF according with result
0058+  0B01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0B01             isalpha:
0060+  0B01 DB          	push al
0061+  0B02 B9 5F       	cmp al, '_'
0062+  0B04 C6 24 0B    	je isalpha_true
0063+  0B07 B9 2E       	cmp al, '.'
0064+  0B09 C6 24 0B    	je isalpha_true
0065+  0B0C B9 41       	cmp al, 'A'
0066+  0B0E C8 20 0B    	jlu isalpha_false
0067+  0B11 B9 7A       	cmp al, 'z'
0068+  0B13 D1 20 0B    	jgu isalpha_false
0069+  0B16 B9 5A       	cmp al, 'Z'
0070+  0B18 D0 24 0B    	jleu isalpha_true
0071+  0B1B B9 61       	cmp al, 'a'
0072+  0B1D C9 24 0B    	jgeu isalpha_true
0073+  0B20             isalpha_false:
0074+  0B20 8B 01       	or al, 1	; clear ZF
0075+  0B22 E8          	pop al
0076+  0B23 09          	ret
0077+  0B24             isalpha_true:
0078+  0B24 87 00       	and al, 0	; set ZF
0079+  0B26 E8          	pop al
0080+  0B27 09          	ret
0081+  0B28             
0082+  0B28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B28             ;; IS PATH-ALPHA
0084+  0B28             ;; sets ZF according with result
0085+  0B28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B28             ispath:
0087+  0B28 DB          	push al
0088+  0B29 07 EE 0A    	call isdigit
0089+  0B2C C6 56 0B    	je ispath_true
0090+  0B2F B9 5F       	cmp al, '_'
0091+  0B31 C6 56 0B    	je ispath_true
0092+  0B34 B9 2F       	cmp al, '/'
0093+  0B36 C6 56 0B    	je ispath_true
0094+  0B39 B9 2E       	cmp al, '.'
0095+  0B3B C6 56 0B    	je ispath_true
0096+  0B3E B9 41       	cmp al, 'A'
0097+  0B40 C8 52 0B    	jlu ispath_false
0098+  0B43 B9 7A       	cmp al, 'z'
0099+  0B45 D1 52 0B    	jgu ispath_false
0100+  0B48 B9 5A       	cmp al, 'Z'
0101+  0B4A D0 56 0B    	jleu ispath_true
0102+  0B4D B9 61       	cmp al, 'a'
0103+  0B4F C9 56 0B    	jgeu ispath_true
0104+  0B52             ispath_false:
0105+  0B52 8B 01       	or al, 1	; clear ZF
0106+  0B54 E8          	pop al
0107+  0B55 09          	ret
0108+  0B56             ispath_true:
0109+  0B56 87 00       	and al, 0	; set ZF
0110+  0B58 E8          	pop al
0111+  0B59 09          	ret
0112+  0B5A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B5A             ;; IS SPACE
0114+  0B5A             ;; sets ZF according with result
0115+  0B5A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B5A             isspace:
0117+  0B5A B9 20       	cmp al, $20		; ' '
0118+  0B5C C6 70 0B    	je isspace_exit
0119+  0B5F B9 09       	cmp al, $09		; '\t'
0120+  0B61 C6 70 0B    	je isspace_exit
0121+  0B64 B9 0A       	cmp al, $0A		; '\n'
0122+  0B66 C6 70 0B    	je isspace_exit
0123+  0B69 B9 0D       	cmp al, $0D		; '\r'
0124+  0B6B C6 70 0B    	je isspace_exit
0125+  0B6E B9 0B       	cmp al, $0B		; '\v'
0126+  0B70             isspace_exit:
0127+  0B70 09          	ret	
0128+  0B71             
0129+  0B71             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B71             ; TO LOWER
0131+  0B71             ; input in AL
0132+  0B71             ; output in AL
0133+  0B71             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B71             to_lower:
0135+  0B71 B9 5A       	cmp al, 'Z'
0136+  0B73 D1 78 0B    	jgu to_lower_ret
0137+  0B76 6A 20       	add al, $20				; convert to lower case
0138+  0B78             to_lower_ret:
0139+  0B78 09          	ret
0140+  0B79             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B79             ; TO UPPER
0142+  0B79             ; input in AL
0143+  0B79             ; output in AL
0144+  0B79             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B79             to_upper:
0146+  0B79 B9 61       	cmp al, 'a'
0147+  0B7B C8 80 0B    	jlu to_upper_ret
0148+  0B7E 6F 20       	sub al, $20			; convert to upper case
0149+  0B80             to_upper_ret:
0150+  0B80 09          	ret
0151+  0B81             
0043   0B81             
0044   0B81             
0045   0B81             transient_data:
0046   0B81             
0047   0B81             .end
0048   0B81             
0049   0B81             
0050   0B81             
tasm: Number of errors = 0
