0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;; uname
0005   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006   0000             
0007   0400             .org PROC_TEXT_ORG			; origin at 1024
0008   0400             
0009   0400             cmd_ls:
0010   0400 19 00       	mov al, 0
0011   0402 05 0C       	syscall sys_system
0012   0404 05 0B       	syscall sys_terminate_proc
0013   0406             
0014   0406             
0015   0406             .include "stdio.asm"
0001+  0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0406             ; stdio.s
0003+  0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0406             .include "string.asm"
0001++ 0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0406             ; string.s
0003++ 0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0406             
0005++ 0406             
0006++ 0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0406             ; strrev
0008++ 0406             ; reverse a string
0009++ 0406             ; D = string address
0010++ 0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0406             ; 01234
0012++ 0406             strrev:
0013++ 0406 4B          	pusha
0014++ 0407 07 4D 04    	call strlen	; length in C
0015++ 040A 12          	mov a, c
0016++ 040B AF 01 00    	cmp a, 1
0017++ 040E D0 28 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0411 7D          	dec a
0019++ 0412 FD 4E       	mov si, d	; beginning of string
0020++ 0414 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0416 59          	add d, a	; end of string
0022++ 0417 12          	mov a, c
0023++ 0418 FD 9B       	shr a		; divide by 2
0024++ 041A 39          	mov c, a	; C now counts the steps
0025++ 041B             strrev_L0:
0026++ 041B 32          	mov bl, [d]	; save load right-side char into BL
0027++ 041C F6          	lodsb		; load left-side char into AL; increase SI
0028++ 041D 3E          	mov [d], al	; store left char into right side
0029++ 041E 1B          	mov al, bl
0030++ 041F F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0420 7E          	dec c
0032++ 0421 7F          	dec d
0033++ 0422 C2 00 00    	cmp c, 0
0034++ 0425 C7 1B 04    	jne strrev_L0
0035++ 0428             strrev_end:
0036++ 0428 4C          	popa
0037++ 0429 09          	ret
0038++ 042A             	
0039++ 042A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 042A             ; strchr
0041++ 042A             ; search string in D for char in AL
0042++ 042A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 042A             strchr:
0044++ 042A             strchr_L0:
0045++ 042A 32          	mov bl, [d]
0046++ 042B C1 00       	cmp bl, 0
0047++ 042D C6 38 04    	je strchr_end
0048++ 0430 BA          	cmp al, bl
0049++ 0431 C6 38 04    	je strchr_end
0050++ 0434 79          	inc d
0051++ 0435 0A 2A 04    	jmp strchr_L0
0052++ 0438             strchr_end:
0053++ 0438 1B          	mov al, bl
0054++ 0439 09          	ret
0055++ 043A             
0056++ 043A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 043A             ; strstr
0058++ 043A             ; find sub-string
0059++ 043A             ; str1 in SI
0060++ 043A             ; str2 in DI
0061++ 043A             ; SI points to end of source string
0062++ 043A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 043A             strstr:
0064++ 043A DB          	push al
0065++ 043B DA          	push d
0066++ 043C E3          	push di
0067++ 043D             strstr_loop:
0068++ 043D F3          	cmpsb					; compare a byte of the strings
0069++ 043E C7 49 04    	jne strstr_ret
0070++ 0441 FC 00 00    	lea d, [di + 0]
0071++ 0444 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0446 C7 3D 04    	jne strstr_loop				; equal chars but not at end
0073++ 0449             strstr_ret:
0074++ 0449 F0          	pop di
0075++ 044A E7          	pop d
0076++ 044B E8          	pop al
0077++ 044C 09          	ret
0078++ 044D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 044D             ; length of null terminated string
0080++ 044D             ; result in C
0081++ 044D             ; pointer in D
0082++ 044D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 044D             strlen:
0084++ 044D DA          	push d
0085++ 044E 38 00 00    	mov c, 0
0086++ 0451             strlen_L1:
0087++ 0451 BD 00       	cmp byte [d], 0
0088++ 0453 C6 5B 04    	je strlen_ret
0089++ 0456 79          	inc d
0090++ 0457 78          	inc c
0091++ 0458 0A 51 04    	jmp strlen_L1
0092++ 045B             strlen_ret:
0093++ 045B E7          	pop d
0094++ 045C 09          	ret
0095++ 045D             
0096++ 045D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 045D             ; STRCMP
0098++ 045D             ; compare two strings
0099++ 045D             ; str1 in SI
0100++ 045D             ; str2 in DI
0101++ 045D             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 045D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 045D             strcmp:
0104++ 045D DB          	push al
0105++ 045E DA          	push d
0106++ 045F E3          	push di
0107++ 0460 E2          	push si
0108++ 0461             strcmp_loop:
0109++ 0461 F3          	cmpsb					; compare a byte of the strings
0110++ 0462 C7 6D 04    	jne strcmp_ret
0111++ 0465 FB FF FF    	lea d, [si +- 1]
0112++ 0468 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 046A C7 61 04    	jne strcmp_loop				; equal chars but not at end
0114++ 046D             strcmp_ret:
0115++ 046D EF          	pop si
0116++ 046E F0          	pop di
0117++ 046F E7          	pop d
0118++ 0470 E8          	pop al
0119++ 0471 09          	ret
0120++ 0472             
0121++ 0472             
0122++ 0472             ; STRCPY
0123++ 0472             ; copy null terminated string from SI to DI
0124++ 0472             ; source in SI
0125++ 0472             ; destination in DI
0126++ 0472             strcpy:
0127++ 0472 E2          	push si
0128++ 0473 E3          	push di
0129++ 0474 DB          	push al
0130++ 0475             strcpy_L1:
0131++ 0475 F6          	lodsb
0132++ 0476 F7          	stosb
0133++ 0477 B9 00       	cmp al, 0
0134++ 0479 C7 75 04    	jne strcpy_L1
0135++ 047C             strcpy_end:
0136++ 047C E8          	pop al
0137++ 047D F0          	pop di
0138++ 047E EF          	pop si
0139++ 047F 09          	ret
0140++ 0480             
0141++ 0480             ; STRCAT
0142++ 0480             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0480             ; source in SI
0144++ 0480             ; destination in DI
0145++ 0480             strcat:
0146++ 0480 E2          	push si
0147++ 0481 E3          	push di
0148++ 0482 D7          	push a
0149++ 0483 DA          	push d
0150++ 0484 50          	mov a, di
0151++ 0485 3C          	mov d, a
0152++ 0486             strcat_goto_end_L1:
0153++ 0486 BD 00       	cmp byte[d], 0
0154++ 0488 C6 8F 04    	je strcat_start
0155++ 048B 79          	inc d
0156++ 048C 0A 86 04    	jmp strcat_goto_end_L1
0157++ 048F             strcat_start:
0158++ 048F FD 50       	mov di, d
0159++ 0491             strcat_L1:
0160++ 0491 F6          	lodsb
0161++ 0492 F7          	stosb
0162++ 0493 B9 00       	cmp al, 0
0163++ 0495 C7 91 04    	jne strcat_L1
0164++ 0498             strcat_end:
0165++ 0498 E7          	pop d
0166++ 0499 E4          	pop a
0167++ 049A F0          	pop di
0168++ 049B EF          	pop si
0169++ 049C 09          	ret
0005+  049D             
0006+  049D 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  04A1 34 35 36 37 
0006+  04A5 38 39 41 42 
0006+  04A9 43 44 45 46 
0007+  04AD             
0008+  04AD 01 00       table_power:.dw 1
0009+  04AF 0A 00       			.dw 10
0010+  04B1 64 00       			.dw 100
0011+  04B3 E8 03       			.dw 1000
0012+  04B5 10 27       			.dw 10000
0013+  04B7             
0014+  04B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  04B7             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  04B7             ; ASCII in BL
0017+  04B7             ; result in AL
0018+  04B7             ; ascii for F = 0100 0110
0019+  04B7             ; ascii for 9 = 0011 1001
0020+  04B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  04B7             hex_ascii_encode:
0022+  04B7 1B          	mov al, bl
0023+  04B8 93 40       	test al, $40				; test if letter or number
0024+  04BA C7 C0 04    	jnz hex_letter
0025+  04BD 87 0F       	and al, $0F				; get number
0026+  04BF 09          	ret
0027+  04C0             hex_letter:
0028+  04C0 87 0F       	and al, $0F				; get letter
0029+  04C2 6A 09       	add al, 9
0030+  04C4 09          	ret
0031+  04C5             
0032+  04C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  04C5             ; ATOI
0034+  04C5             ; 2 letter hex string in B
0035+  04C5             ; 8bit integer returned in AL
0036+  04C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  04C5             atoi:
0038+  04C5 D8          	push b
0039+  04C6 07 B7 04    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  04C9 30          	mov bl, bh
0041+  04CA DB          	push al					; save a
0042+  04CB 07 B7 04    	call hex_ascii_encode
0043+  04CE EA          	pop bl	
0044+  04CF FD 9E 04    	shl al, 4
0045+  04D2 8C          	or al, bl
0046+  04D3 E5          	pop b
0047+  04D4 09          	ret	
0048+  04D5             
0049+  04D5             
0050+  04D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04D5             ; printf
0052+  04D5             ; no need for explanations!
0053+  04D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  04D5             printf:
0055+  04D5 09          	ret
0056+  04D6             
0057+  04D6             
0058+  04D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  04D6             ; scanf
0060+  04D6             ; no need for explanations!
0061+  04D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  04D6             scanf:
0063+  04D6 09          	ret
0064+  04D7             
0065+  04D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  04D7             ; ITOA
0067+  04D7             ; 8bit value in BL
0068+  04D7             ; 2 byte ASCII result in A
0069+  04D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  04D7             itoa:
0071+  04D7 DA          	push d
0072+  04D8 D8          	push b
0073+  04D9 A7 00       	mov bh, 0
0074+  04DB FD A4 04    	shr bl, 4	
0075+  04DE 74          	mov d, b
0076+  04DF 1F 9D 04    	mov al, [d + s_hex_digits]
0077+  04E2 23          	mov ah, al
0078+  04E3             	
0079+  04E3 E5          	pop b
0080+  04E4 D8          	push b
0081+  04E5 A7 00       	mov bh, 0
0082+  04E7 FD 87 0F    	and bl, $0F
0083+  04EA 74          	mov d, b
0084+  04EB 1F 9D 04    	mov al, [d + s_hex_digits]
0085+  04EE E5          	pop b
0086+  04EF E7          	pop d
0087+  04F0 09          	ret
0088+  04F1             
0089+  04F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  04F1             ; HEX STRING TO BINARY
0091+  04F1             ; di = destination address
0092+  04F1             ; si = source
0093+  04F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  04F1             hex_to_int:
0095+  04F1             hex_to_int_L1:
0096+  04F1 F6          	lodsb					; load from [SI] to AL
0097+  04F2 B9 00       	cmp al, 0				; check if ASCII 0
0098+  04F4 C6 01 05    	jz hex_to_int_ret
0099+  04F7 36          	mov bh, al
0100+  04F8 F6          	lodsb
0101+  04F9 2F          	mov bl, al
0102+  04FA 07 C5 04    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  04FD F7          	stosb					; store AL to [DI]
0104+  04FE 0A F1 04    	jmp hex_to_int_L1
0105+  0501             hex_to_int_ret:
0106+  0501 09          	ret		
0107+  0502             
0108+  0502             
0109+  0502             
0110+  0502             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0502             ; GETCHAR
0112+  0502             ; char in ah
0113+  0502             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0502             getchar:
0115+  0502 DB          	push al
0116+  0503             getchar_retry:
0117+  0503 FD 0C       	sti
0118+  0505 19 01       	mov al, 1
0119+  0507 05 03       	syscall sys_io			; receive in AH
0120+  0509 B9 00       	cmp al, 0			; check if any char was receive
0121+  050B C6 03 05    	je getchar_retry
0122+  050E E8          	pop al
0123+  050F 09          	ret
0124+  0510             
0125+  0510             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0510             ; PUTCHAR
0127+  0510             ; char in ah
0128+  0510             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0510             putchar:
0130+  0510 D7          	push a
0131+  0511 19 00       	mov al, 0
0132+  0513 05 03       	syscall sys_io			; char in AH
0133+  0515 E4          	pop a
0134+  0516 09          	ret
0135+  0517             
0136+  0517             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  0517             ;; INPUT A STRING
0138+  0517             ;; terminates with null
0139+  0517             ;; pointer in D
0140+  0517             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0517             gets:
0142+  0517 D7          	push a
0143+  0518 DA          	push d
0144+  0519             gets_loop:
0145+  0519 FD 0C       	sti
0146+  051B 19 01       	mov al, 1
0147+  051D 05 03       	syscall sys_io			; receive in AH
0148+  051F B9 00       	cmp al, 0				; check error code (AL)
0149+  0521 C6 19 05    	je gets_loop			; if no char received, retry
0150+  0524             
0151+  0524 76 1B       	cmp ah, 27
0152+  0526 C6 47 05    	je gets_telnet_escape
0153+  0529 76 0A       	cmp ah, $0A				; LF
0154+  052B C6 A0 05    	je gets_end
0155+  052E 76 0D       	cmp ah, $0D				; CR
0156+  0530 C6 A0 05    	je gets_end
0157+  0533 76 5C       	cmp ah, $5C				; '\\'
0158+  0535 C6 77 05    	je gets_escape
0159+  0538             	
0160+  0538 76 08       	cmp ah, $08			; check for backspace
0161+  053A C6 43 05    	je gets_backspace
0162+  053D             
0163+  053D 1A          	mov al, ah
0164+  053E 3E          	mov [d], al
0165+  053F 79          	inc d
0166+  0540 0A 19 05    	jmp gets_loop
0167+  0543             gets_backspace:
0168+  0543 7F          	dec d
0169+  0544 0A 19 05    	jmp gets_loop
0170+  0547             gets_telnet_escape:
0171+  0547 FD 0C       	sti
0172+  0549 19 01       	mov al, 1
0173+  054B 05 03       	syscall sys_io				; receive in AH without echo
0174+  054D B9 00       	cmp al, 0					; check error code (AL)
0175+  054F C6 47 05    	je gets_telnet_escape		; if no char received, retry
0176+  0552 76 5B       	cmp ah, '['
0177+  0554 C7 19 05    	jne gets_loop
0178+  0557             gets_telnet_escape_phase2:
0179+  0557 FD 0C       	sti
0180+  0559 19 01       	mov al, 1
0181+  055B 05 03       	syscall sys_io					; receive in AH without echo
0182+  055D B9 00       	cmp al, 0						; check error code (AL)
0183+  055F C6 57 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  0562 76 44       	cmp ah, 'D'
0185+  0564 C6 6F 05    	je gets_left_arrow
0186+  0567 76 43       	cmp ah, 'C'
0187+  0569 C6 73 05    	je gets_right_arrow
0188+  056C 0A 19 05    	jmp gets_loop
0189+  056F             gets_left_arrow:
0190+  056F 7F          	dec d
0191+  0570 0A 19 05    	jmp gets_loop
0192+  0573             gets_right_arrow:
0193+  0573 79          	inc d
0194+  0574 0A 19 05    	jmp gets_loop
0195+  0577             gets_escape:
0196+  0577 FD 0C       	sti
0197+  0579 19 01       	mov al, 1
0198+  057B 05 03       	syscall sys_io			; receive in AH
0199+  057D B9 00       	cmp al, 0				; check error code (AL)
0200+  057F C6 77 05    	je gets_escape			; if no char received, retry
0201+  0582 76 6E       	cmp ah, 'n'
0202+  0584 C6 92 05    	je gets_LF
0203+  0587 76 72       	cmp ah, 'r'
0204+  0589 C6 99 05    	je gets_CR
0205+  058C 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  058D 3E          	mov [d], al
0207+  058E 79          	inc d
0208+  058F 0A 19 05    	jmp gets_loop
0209+  0592             gets_LF:
0210+  0592 19 0A       	mov al, $0A
0211+  0594 3E          	mov [d], al
0212+  0595 79          	inc d
0213+  0596 0A 19 05    	jmp gets_loop
0214+  0599             gets_CR:
0215+  0599 19 0D       	mov al, $0D
0216+  059B 3E          	mov [d], al
0217+  059C 79          	inc d
0218+  059D 0A 19 05    	jmp gets_loop
0219+  05A0             gets_end:
0220+  05A0 19 00       	mov al, 0
0221+  05A2 3E          	mov [d], al				; terminate string
0222+  05A3 E7          	pop d
0223+  05A4 E4          	pop a
0224+  05A5 09          	ret
0225+  05A6             
0226+  05A6             
0227+  05A6             
0228+  05A6             
0229+  05A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  05A6             ;; INPUT TEXT
0231+  05A6             ;; terminated with CTRL+D
0232+  05A6             ;; pointer in D
0233+  05A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  05A6             gettxt:
0235+  05A6 D7          	push a
0236+  05A7 DA          	push d
0237+  05A8             gettxt_loop:
0238+  05A8 19 01       	mov al, 1
0239+  05AA 05 03       	syscall sys_io			; receive in AH
0240+  05AC B9 00       	cmp al, 0				; check error code (AL)
0241+  05AE C6 A8 05    	je gettxt_loop		; if no char received, retry
0242+  05B1 76 04       	cmp ah, 4			; EOT
0243+  05B3 C6 F1 05    	je gettxt_end
0244+  05B6 76 08       	cmp ah, $08			; check for backspace
0245+  05B8 C6 ED 05    	je gettxt_backspace
0246+  05BB 76 5C       	cmp ah, $5C				; '\\'
0247+  05BD C6 C6 05    	je gettxt_escape
0248+  05C0 1A          	mov al, ah
0249+  05C1 3E          	mov [d], al
0250+  05C2 79          	inc d
0251+  05C3 0A A8 05    	jmp gettxt_loop
0252+  05C6             gettxt_escape:
0253+  05C6 19 01       	mov al, 1
0254+  05C8 05 03       	syscall sys_io			; receive in AH
0255+  05CA B9 00       	cmp al, 0				; check error code (AL)
0256+  05CC C6 C6 05    	je gettxt_escape		; if no char received, retry
0257+  05CF 76 6E       	cmp ah, 'n'
0258+  05D1 C6 DF 05    	je gettxt_LF
0259+  05D4 76 72       	cmp ah, 'r'
0260+  05D6 C6 E6 05    	je gettxt_CR
0261+  05D9 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  05DA 3E          	mov [d], al
0263+  05DB 79          	inc d
0264+  05DC 0A A8 05    	jmp gettxt_loop
0265+  05DF             gettxt_LF:
0266+  05DF 19 0A       	mov al, $0A
0267+  05E1 3E          	mov [d], al
0268+  05E2 79          	inc d
0269+  05E3 0A A8 05    	jmp gettxt_loop
0270+  05E6             gettxt_CR:
0271+  05E6 19 0D       	mov al, $0D
0272+  05E8 3E          	mov [d], al
0273+  05E9 79          	inc d
0274+  05EA 0A A8 05    	jmp gettxt_loop
0275+  05ED             gettxt_backspace:
0276+  05ED 7F          	dec d
0277+  05EE 0A A8 05    	jmp gettxt_loop
0278+  05F1             gettxt_end:
0279+  05F1 19 00       	mov al, 0
0280+  05F3 3E          	mov [d], al				; terminate string
0281+  05F4 E7          	pop d
0282+  05F5 E4          	pop a
0283+  05F6 09          	ret
0284+  05F7             
0285+  05F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  05F7             ; PRINT NEW LINE
0287+  05F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  05F7             printnl:
0289+  05F7 D7          	push a
0290+  05F8 10 00 0A    	mov a, $0A00
0291+  05FB 05 03       	syscall sys_io
0292+  05FD 10 00 0D    	mov a, $0D00
0293+  0600 05 03       	syscall sys_io
0294+  0602 E4          	pop a
0295+  0603 09          	ret
0296+  0604             
0297+  0604             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  0604             ; strtoint
0299+  0604             ; 4 digit hex string number in d
0300+  0604             ; integer returned in A
0301+  0604             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  0604             strtointx:
0303+  0604 D8          	push b
0304+  0605 32          	mov bl, [d]
0305+  0606 37          	mov bh, bl
0306+  0607 33 01 00    	mov bl, [d + 1]
0307+  060A 07 C5 04    	call atoi				; convert to int in AL
0308+  060D 23          	mov ah, al				; move to AH
0309+  060E 33 02 00    	mov bl, [d + 2]
0310+  0611 37          	mov bh, bl
0311+  0612 33 03 00    	mov bl, [d + 3]
0312+  0615 07 C5 04    	call atoi				; convert to int in AL
0313+  0618 E5          	pop b
0314+  0619 09          	ret
0315+  061A             
0316+  061A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  061A             ; strtoint
0318+  061A             ; 5 digit base10 string number in d
0319+  061A             ; integer returned in A
0320+  061A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  061A             strtoint:
0322+  061A E2          	push si
0323+  061B D8          	push b
0324+  061C D9          	push c
0325+  061D DA          	push d
0326+  061E 07 4D 04    	call strlen			; get string length in C
0327+  0621 7E          	dec c
0328+  0622 FD 4E       	mov si, d
0329+  0624 12          	mov a, c
0330+  0625 FD 99       	shl a
0331+  0627 3B AD 04    	mov d, table_power
0332+  062A 59          	add d, a
0333+  062B 38 00 00    	mov c, 0
0334+  062E             strtoint_L0:
0335+  062E F6          	lodsb			; load ASCII to al
0336+  062F B9 00       	cmp al, 0
0337+  0631 C6 44 06    	je strtoint_end
0338+  0634 6F 30       	sub al, $30		; make into integer
0339+  0636 22 00       	mov ah, 0
0340+  0638 2A          	mov b, [d]
0341+  0639 AC          	mul a, b			; result in B since it fits in 16bits
0342+  063A 11          	mov a, b
0343+  063B 28          	mov b, c
0344+  063C 54          	add a, b
0345+  063D 39          	mov c, a
0346+  063E 63 02 00    	sub d, 2
0347+  0641 0A 2E 06    	jmp strtoint_L0
0348+  0644             strtoint_end:
0349+  0644 12          	mov a, c
0350+  0645 E7          	pop d
0351+  0646 E6          	pop c
0352+  0647 E5          	pop b
0353+  0648 EF          	pop si
0354+  0649 09          	ret
0355+  064A             
0356+  064A             
0357+  064A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  064A             ; PRINT NULL TERMINATED STRING
0359+  064A             ; pointer in D
0360+  064A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  064A             puts:
0362+  064A D7          	push a
0363+  064B DA          	push d
0364+  064C             puts_L1:
0365+  064C 1E          	mov al, [d]
0366+  064D B9 00       	cmp al, 0
0367+  064F C6 5B 06    	jz puts_END
0368+  0652 23          	mov ah, al
0369+  0653 19 00       	mov al, 0
0370+  0655 05 03       	syscall sys_io
0371+  0657 79          	inc d
0372+  0658 0A 4C 06    	jmp puts_L1
0373+  065B             puts_END:
0374+  065B E7          	pop d
0375+  065C E4          	pop a
0376+  065D 09          	ret
0377+  065E             
0378+  065E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  065E             ; PRINT N SIZE STRING
0380+  065E             ; pointer in D
0381+  065E             ; size in C
0382+  065E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  065E             putsn:
0384+  065E DB          	push al
0385+  065F DA          	push d
0386+  0660 D9          	push c
0387+  0661             putsn_L0:
0388+  0661 1E          	mov al, [d]
0389+  0662 23          	mov ah, al
0390+  0663 19 00       	mov al, 0
0391+  0665 05 03       	syscall sys_io
0392+  0667 79          	inc d
0393+  0668 7E          	dec c	
0394+  0669 C2 00 00    	cmp c, 0
0395+  066C C7 61 06    	jne putsn_L0
0396+  066F             putsn_end:
0397+  066F E6          	pop c
0398+  0670 E7          	pop d
0399+  0671 E8          	pop al
0400+  0672 09          	ret
0401+  0673             
0402+  0673             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  0673             ; print 16bit decimal number
0404+  0673             ; input number in A
0405+  0673             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  0673             print_u16d:
0407+  0673 D7          	push a
0408+  0674 D8          	push b
0409+  0675 26 10 27    	mov b, 10000
0410+  0678 AE          	div a, b			; get 10000 coeff.
0411+  0679 07 9F 06    	call print_number
0412+  067C 11          	mov a, b
0413+  067D 26 E8 03    	mov b, 1000
0414+  0680 AE          	div a, b			; get 10000 coeff.
0415+  0681 07 9F 06    	call print_number
0416+  0684 11          	mov a, b
0417+  0685 26 64 00    	mov b, 100
0418+  0688 AE          	div a, b
0419+  0689 07 9F 06    	call print_number
0420+  068C 11          	mov a, b
0421+  068D 26 0A 00    	mov b, 10
0422+  0690 AE          	div a, b
0423+  0691 07 9F 06    	call print_number
0424+  0694 11          	mov a, b
0425+  0695 6A 30       	add al, $30
0426+  0697 23          	mov ah, al
0427+  0698 19 00       	mov al, 0
0428+  069A 05 03       	syscall sys_io	; print coeff
0429+  069C E5          	pop b
0430+  069D E4          	pop a
0431+  069E 09          	ret
0432+  069F             
0433+  069F             
0434+  069F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  069F             ; if A == 0, print space
0436+  069F             ; else print A
0437+  069F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  069F             print_number:
0439+  069F 6A 30       	add al, $30
0440+  06A1 23          	mov ah, al
0441+  06A2 07 10 05    	call putchar
0442+  06A5 09          	ret
0443+  06A6             
0444+  06A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06A6             ; PRINT 16BIT HEX INTEGER
0446+  06A6             ; integer value in reg B
0447+  06A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06A6             print_u16x:
0449+  06A6 D7          	push a
0450+  06A7 D8          	push b
0451+  06A8 DD          	push bl
0452+  06A9 30          	mov bl, bh
0453+  06AA 07 D7 04    	call itoa				; convert bh to char in A
0454+  06AD 2F          	mov bl, al				; save al
0455+  06AE 19 00       	mov al, 0
0456+  06B0 05 03       	syscall sys_io				; display AH
0457+  06B2 24          	mov ah, bl				; retrieve al
0458+  06B3 19 00       	mov al, 0
0459+  06B5 05 03       	syscall sys_io				; display AL
0460+  06B7             
0461+  06B7 EA          	pop bl
0462+  06B8 07 D7 04    	call itoa				; convert bh to char in A
0463+  06BB 2F          	mov bl, al				; save al
0464+  06BC 19 00       	mov al, 0
0465+  06BE 05 03       	syscall sys_io				; display AH
0466+  06C0 24          	mov ah, bl				; retrieve al
0467+  06C1 19 00       	mov al, 0
0468+  06C3 05 03       	syscall sys_io				; display AL
0469+  06C5             
0470+  06C5 E5          	pop b
0471+  06C6 E4          	pop a
0472+  06C7 09          	ret
0473+  06C8             
0474+  06C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  06C8             ; INPUT 16BIT HEX INTEGER
0476+  06C8             ; read 16bit integer into A
0477+  06C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  06C8             scan_u16x:
0479+  06C8 F8 10 00    	enter 16
0480+  06CB D8          	push b
0481+  06CC DA          	push d
0482+  06CD             
0483+  06CD FA F1 FF    	lea d, [bp + -15]
0484+  06D0 07 17 05    	call gets				; get number
0485+  06D3             
0486+  06D3 32          	mov bl, [d]
0487+  06D4 37          	mov bh, bl
0488+  06D5 33 01 00    	mov bl, [d + 1]
0489+  06D8 07 C5 04    	call atoi				; convert to int in AL
0490+  06DB 23          	mov ah, al				; move to AH
0491+  06DC             
0492+  06DC 33 02 00    	mov bl, [d + 2]
0493+  06DF 37          	mov bh, bl
0494+  06E0 33 03 00    	mov bl, [d + 3]
0495+  06E3 07 C5 04    	call atoi				; convert to int in AL
0496+  06E6             
0497+  06E6 E7          	pop d
0498+  06E7 E5          	pop b
0499+  06E8 F9          	leave
0500+  06E9 09          	ret
0501+  06EA             
0502+  06EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  06EA             ; PRINT 8bit HEX INTEGER
0504+  06EA             ; integer value in reg bl
0505+  06EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  06EA             print_u8x:
0507+  06EA D7          	push a
0508+  06EB DD          	push bl
0509+  06EC             
0510+  06EC 07 D7 04    	call itoa				; convert bl to char in A
0511+  06EF 2F          	mov bl, al				; save al
0512+  06F0 19 00       	mov al, 0
0513+  06F2 05 03       	syscall sys_io				; display AH
0514+  06F4 24          	mov ah, bl				; retrieve al
0515+  06F5 19 00       	mov al, 0
0516+  06F7 05 03       	syscall sys_io				; display AL
0517+  06F9             
0518+  06F9 EA          	pop bl
0519+  06FA E4          	pop a
0520+  06FB 09          	ret
0521+  06FC             
0522+  06FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  06FC             ; print 8bit decimal unsigned number
0524+  06FC             ; input number in AL
0525+  06FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  06FC             print_u8d:
0527+  06FC D7          	push a
0528+  06FD D8          	push b
0529+  06FE             
0530+  06FE 22 00       	mov ah, 0
0531+  0700 26 64 00    	mov b, 100
0532+  0703 AE          	div a, b
0533+  0704 D8          	push b			; save remainder
0534+  0705 B9 00       	cmp al, 0
0535+  0707 C6 11 07    	je skip100
0536+  070A 6A 30       	add al, $30
0537+  070C 23          	mov ah, al
0538+  070D 19 00       	mov al, 0
0539+  070F 05 03       	syscall sys_io	; print coeff
0540+  0711             skip100:
0541+  0711 E4          	pop a
0542+  0712 22 00       	mov ah, 0
0543+  0714 26 0A 00    	mov b, 10
0544+  0717 AE          	div a, b
0545+  0718 D8          	push b			; save remainder
0546+  0719 B9 00       	cmp al, 0
0547+  071B C6 25 07    	je skip10
0548+  071E 6A 30       	add al, $30
0549+  0720 23          	mov ah, al
0550+  0721 19 00       	mov al, 0
0551+  0723 05 03       	syscall sys_io	; print coeff
0552+  0725             skip10:
0553+  0725 E4          	pop a
0554+  0726 1B          	mov al, bl
0555+  0727 6A 30       	add al, $30
0556+  0729 23          	mov ah, al
0557+  072A 19 00       	mov al, 0
0558+  072C 05 03       	syscall sys_io	; print coeff
0559+  072E E5          	pop b
0560+  072F E4          	pop a
0561+  0730 09          	ret
0562+  0731             
0563+  0731             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  0731             ; INPUT 8BIT HEX INTEGER
0565+  0731             ; read 8bit integer into AL
0566+  0731             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  0731             scan_u8x:
0568+  0731 F8 04 00    	enter 4
0569+  0734 D8          	push b
0570+  0735 DA          	push d
0571+  0736             
0572+  0736 FA FD FF    	lea d, [bp + -3]
0573+  0739 07 17 05    	call gets				; get number
0574+  073C             
0575+  073C 32          	mov bl, [d]
0576+  073D 37          	mov bh, bl
0577+  073E 33 01 00    	mov bl, [d + 1]
0578+  0741 07 C5 04    	call atoi				; convert to int in AL
0579+  0744             
0580+  0744 E7          	pop d
0581+  0745 E5          	pop b
0582+  0746 F9          	leave
0583+  0747 09          	ret
0584+  0748             
0585+  0748             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  0748             ; input decimal number
0587+  0748             ; result in A
0588+  0748             ; 655'\0'
0589+  0748             ; low--------high
0590+  0748             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  0748             scan_u16d:
0592+  0748 F8 08 00    	enter 8
0593+  074B E2          	push si
0594+  074C D8          	push b
0595+  074D D9          	push c
0596+  074E DA          	push d
0597+  074F FA F9 FF    	lea d, [bp +- 7]
0598+  0752 07 17 05    	call gets
0599+  0755 07 4D 04    	call strlen			; get string length in C
0600+  0758 7E          	dec c
0601+  0759 FD 4E       	mov si, d
0602+  075B 12          	mov a, c
0603+  075C FD 99       	shl a
0604+  075E 3B AD 04    	mov d, table_power
0605+  0761 59          	add d, a
0606+  0762 38 00 00    	mov c, 0
0607+  0765             mul_loop:
0608+  0765 F6          	lodsb			; load ASCII to al
0609+  0766 B9 00       	cmp al, 0
0610+  0768 C6 7B 07    	je mul_exit
0611+  076B 6F 30       	sub al, $30		; make into integer
0612+  076D 22 00       	mov ah, 0
0613+  076F 2A          	mov b, [d]
0614+  0770 AC          	mul a, b			; result in B since it fits in 16bits
0615+  0771 11          	mov a, b
0616+  0772 28          	mov b, c
0617+  0773 54          	add a, b
0618+  0774 39          	mov c, a
0619+  0775 63 02 00    	sub d, 2
0620+  0778 0A 65 07    	jmp mul_loop
0621+  077B             mul_exit:
0622+  077B 12          	mov a, c
0623+  077C E7          	pop d
0624+  077D E6          	pop c
0625+  077E E5          	pop b
0626+  077F EF          	pop si
0627+  0780 F9          	leave
0628+  0781 09          	ret
0016   0782             .include "ctype.asm"
0001+  0782             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0782             ; ctype.s
0003+  0782             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0782             
0005+  0782             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0782             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0782             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0782             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0782             ;; characters are supported.
0010+  0782             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0782             ;; isalnum 
0012+  0782             ;; isalpha 
0013+  0782             ;; islower 
0014+  0782             ;; isupper 
0015+  0782             ;; isdigit 
0016+  0782             ;; isxdigit
0017+  0782             ;; iscntrl 
0018+  0782             ;; isgraph 
0019+  0782             ;; isspace 
0020+  0782             ;; isblank 
0021+  0782             ;; isprint 
0022+  0782             ;; ispunct 
0023+  0782             ;; tolower 
0024+  0782             ;; toupper
0025+  0782             
0026+  0782             
0027+  0782             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0782             ;; IS ALPHANUMERIC
0029+  0782             ;; sets ZF according with result
0030+  0782             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0782             isalnum:
0032+  0782 07 9F 07    	call isalpha
0033+  0785 C6 8B 07    	je isalnum_exit
0034+  0788 07 8C 07    	call isdigit
0035+  078B             isalnum_exit:
0036+  078B 09          	ret	
0037+  078C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  078C             ;; IS DIGIT
0039+  078C             ;; sets ZF according with result
0040+  078C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  078C             isdigit:
0042+  078C DB          	push al
0043+  078D B9 30       	cmp al, '0'
0044+  078F C8 9B 07    	jlu isdigit_false
0045+  0792 B9 39       	cmp al, '9'
0046+  0794 D1 9B 07    	jgu isdigit_false
0047+  0797 87 00       	and al, 0	; set ZF
0048+  0799 E8          	pop al
0049+  079A 09          	ret
0050+  079B             isdigit_false:
0051+  079B 8B 01       	or al, 1	; clear ZF
0052+  079D E8          	pop al
0053+  079E 09          	ret	
0054+  079F             	
0055+  079F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  079F             ;; IS ALPHA
0057+  079F             ;; sets ZF according with result
0058+  079F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  079F             isalpha:
0060+  079F DB          	push al
0061+  07A0 B9 5F       	cmp al, '_'
0062+  07A2 C6 C2 07    	je isalpha_true
0063+  07A5 B9 2E       	cmp al, '.'
0064+  07A7 C6 C2 07    	je isalpha_true
0065+  07AA B9 41       	cmp al, 'A'
0066+  07AC C8 BE 07    	jlu isalpha_false
0067+  07AF B9 7A       	cmp al, 'z'
0068+  07B1 D1 BE 07    	jgu isalpha_false
0069+  07B4 B9 5A       	cmp al, 'Z'
0070+  07B6 D0 C2 07    	jleu isalpha_true
0071+  07B9 B9 61       	cmp al, 'a'
0072+  07BB C9 C2 07    	jgeu isalpha_true
0073+  07BE             isalpha_false:
0074+  07BE 8B 01       	or al, 1	; clear ZF
0075+  07C0 E8          	pop al
0076+  07C1 09          	ret
0077+  07C2             isalpha_true:
0078+  07C2 87 00       	and al, 0	; set ZF
0079+  07C4 E8          	pop al
0080+  07C5 09          	ret
0081+  07C6             
0082+  07C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  07C6             ;; IS PATH-ALPHA
0084+  07C6             ;; sets ZF according with result
0085+  07C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  07C6             ispath:
0087+  07C6 DB          	push al
0088+  07C7 07 8C 07    	call isdigit
0089+  07CA C6 F4 07    	je ispath_true
0090+  07CD B9 5F       	cmp al, '_'
0091+  07CF C6 F4 07    	je ispath_true
0092+  07D2 B9 2F       	cmp al, '/'
0093+  07D4 C6 F4 07    	je ispath_true
0094+  07D7 B9 2E       	cmp al, '.'
0095+  07D9 C6 F4 07    	je ispath_true
0096+  07DC B9 41       	cmp al, 'A'
0097+  07DE C8 F0 07    	jlu ispath_false
0098+  07E1 B9 7A       	cmp al, 'z'
0099+  07E3 D1 F0 07    	jgu ispath_false
0100+  07E6 B9 5A       	cmp al, 'Z'
0101+  07E8 D0 F4 07    	jleu ispath_true
0102+  07EB B9 61       	cmp al, 'a'
0103+  07ED C9 F4 07    	jgeu ispath_true
0104+  07F0             ispath_false:
0105+  07F0 8B 01       	or al, 1	; clear ZF
0106+  07F2 E8          	pop al
0107+  07F3 09          	ret
0108+  07F4             ispath_true:
0109+  07F4 87 00       	and al, 0	; set ZF
0110+  07F6 E8          	pop al
0111+  07F7 09          	ret
0112+  07F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  07F8             ;; IS SPACE
0114+  07F8             ;; sets ZF according with result
0115+  07F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  07F8             isspace:
0117+  07F8 B9 20       	cmp al, $20		; ' '
0118+  07FA C6 0E 08    	je isspace_exit
0119+  07FD B9 09       	cmp al, $09		; '\t'
0120+  07FF C6 0E 08    	je isspace_exit
0121+  0802 B9 0A       	cmp al, $0A		; '\n'
0122+  0804 C6 0E 08    	je isspace_exit
0123+  0807 B9 0D       	cmp al, $0D		; '\r'
0124+  0809 C6 0E 08    	je isspace_exit
0125+  080C B9 0B       	cmp al, $0B		; '\v'
0126+  080E             isspace_exit:
0127+  080E 09          	ret	
0128+  080F             
0129+  080F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  080F             ; TO LOWER
0131+  080F             ; input in AL
0132+  080F             ; output in AL
0133+  080F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  080F             to_lower:
0135+  080F B9 5A       	cmp al, 'Z'
0136+  0811 D1 16 08    	jgu to_lower_ret
0137+  0814 6A 20       	add al, $20				; convert to lower case
0138+  0816             to_lower_ret:
0139+  0816 09          	ret
0140+  0817             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0817             ; TO UPPER
0142+  0817             ; input in AL
0143+  0817             ; output in AL
0144+  0817             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0817             to_upper:
0146+  0817 B9 61       	cmp al, 'a'
0147+  0819 C8 1E 08    	jlu to_upper_ret
0148+  081C 6F 20       	sub al, $20			; convert to upper case
0149+  081E             to_upper_ret:
0150+  081E 09          	ret
0151+  081F             
0017   081F             
0018   081F             .end
0019   081F             
0020   081F             
0021   081F             
tasm: Number of errors = 0
