0001   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0400             .org PROC_TEXT_ORG
0003   0400             
0004   0400             ; -----begin text block-----
0005   0400             main:
0006   0400 07 05 04    	call primes
0007   0403             ; -----begin inline asm block-----
0008   0403 05 0B       	syscall sys_terminate_proc
0009   0405             ; -----end inline asm block-----
0010   0405             primes:
0011   0405 D2          	push bp
0012   0406 9B          	mov bp, sp
0013   0407 10 00 00    	mov a, 0
0014   040A 26 02 00    	mov b, 2
0015   040D FD 42 11 05 	mov [_var_n], b
0016   0411             _while1_cond:
0017   0411 29 11 05    	mov b, [_var_n]
0018   0414 D7          	push a
0019   0415 11          	mov a, b
0020   0416 26 F4 01    	mov b, 500
0021   0419 B0          	cmp a, b
0022   041A 0E          	lodflgs
0023   041B 87 02       	and al, %00000010
0024   041D 22 00       	mov ah, 0
0025   041F 27          	mov b, a
0026   0420 E4          	pop a
0027   0421 11          	mov a, b
0028   0422 AF 00 00    	cmp a, 0
0029   0425 C6 09 05    	je _while1_exit
0030   0428             _while1_block:
0031   0428 10 00 00    	mov a, 0
0032   042B 29 11 05    	mov b, [_var_n]
0033   042E FD 42 17 05 	mov [_var_s], b
0034   0432 10 00 00    	mov a, 0
0035   0435 26 00 00    	mov b, 0
0036   0438 FD 42 1B 05 	mov [_var_divides], b
0037   043C 10 00 00    	mov a, 0
0038   043F 26 02 00    	mov b, 2
0039   0442 FD 42 13 05 	mov [_var_i], b
0040   0446             _while2_cond:
0041   0446 29 13 05    	mov b, [_var_i]
0042   0449 D7          	push a
0043   044A 11          	mov a, b
0044   044B 29 17 05    	mov b, [_var_s]
0045   044E B0          	cmp a, b
0046   044F 0E          	lodflgs
0047   0450 87 02       	and al, %00000010
0048   0452 22 00       	mov ah, 0
0049   0454 27          	mov b, a
0050   0455 E4          	pop a
0051   0456 11          	mov a, b
0052   0457 AF 00 00    	cmp a, 0
0053   045A C6 BB 04    	je _while2_exit
0054   045D             _while2_block:
0055   045D             _if3_cond:
0056   045D 29 11 05    	mov b, [_var_n]
0057   0460 D7          	push a
0058   0461 11          	mov a, b
0059   0462 29 13 05    	mov b, [_var_i]
0060   0465 AE          	div a, b
0061   0466 E4          	pop a
0062   0467 D7          	push a
0063   0468 11          	mov a, b
0064   0469 26 00 00    	mov b, 0
0065   046C B0          	cmp a, b
0066   046D 0E          	lodflgs
0067   046E 87 01       	and al, %00000001
0068   0470 22 00       	mov ah, 0
0069   0472 27          	mov b, a
0070   0473 E4          	pop a
0071   0474 C0 00 00    	cmp b, 0
0072   0477 C6 8A 04    	je _if3_exit
0073   047A             _if3_block:
0074   047A 10 00 00    	mov a, 0
0075   047D 26 01 00    	mov b, 1
0076   0480 FD 42 1B 05 	mov [_var_divides], b
0077   0484 0A BB 04    	jmp _while2_exit
0078   0487 0A 8A 04    	jmp _if3_exit
0079   048A             _if3_exit:
0080   048A 10 00 00    	mov a, 0
0081   048D 29 13 05    	mov b, [_var_i]
0082   0490 D7          	push a
0083   0491 11          	mov a, b
0084   0492 26 01 00    	mov b, 1
0085   0495 54          	add a, b
0086   0496 27          	mov b, a
0087   0497 E4          	pop a
0088   0498 FD 42 13 05 	mov [_var_i], b
0089   049C             _if4_cond:
0090   049C 29 13 05    	mov b, [_var_i]
0091   049F D7          	push a
0092   04A0 11          	mov a, b
0093   04A1 29 11 05    	mov b, [_var_n]
0094   04A4 B0          	cmp a, b
0095   04A5 0E          	lodflgs
0096   04A6 87 01       	and al, %00000001
0097   04A8 22 00       	mov ah, 0
0098   04AA 27          	mov b, a
0099   04AB E4          	pop a
0100   04AC C0 00 00    	cmp b, 0
0101   04AF C6 B8 04    	je _if4_exit
0102   04B2             _if4_block:
0103   04B2 0A BB 04    	jmp _while2_exit
0104   04B5 0A B8 04    	jmp _if4_exit
0105   04B8             _if4_exit:
0106   04B8 0A 46 04    	jmp _while2_cond
0107   04BB             _while2_exit:
0108   04BB             _if5_cond:
0109   04BB 29 1B 05    	mov b, [_var_divides]
0110   04BE D7          	push a
0111   04BF 11          	mov a, b
0112   04C0 26 00 00    	mov b, 0
0113   04C3 B0          	cmp a, b
0114   04C4 0E          	lodflgs
0115   04C5 87 01       	and al, %00000001
0116   04C7 22 00       	mov ah, 0
0117   04C9 27          	mov b, a
0118   04CA E4          	pop a
0119   04CB C0 00 00    	cmp b, 0
0120   04CE C6 F4 04    	je _if5_exit
0121   04D1             _if5_block:
0122   04D1 10 00 00    	mov a, 0
0123   04D4 29 19 05    	mov b, [_var_count]
0124   04D7 D7          	push a
0125   04D8 11          	mov a, b
0126   04D9 26 01 00    	mov b, 1
0127   04DC 54          	add a, b
0128   04DD 27          	mov b, a
0129   04DE E4          	pop a
0130   04DF FD 42 19 05 	mov [_var_count], b
0131   04E3             ; -----begin inline asm block-----
0132   04E3 14 11 05    	mov a, [_var_n]
0133   04E6 07 90 07    	call print_u16d
0134   04E9 3B 1F 05    	mov d, _var_newline
0135   04EC 15          	mov a, [d]
0136   04ED 3C          	mov d, a
0137   04EE 07 67 07    	call puts
0138   04F1             ; -----end inline asm block-----
0139   04F1 0A F4 04    	jmp _if5_exit
0140   04F4             _if5_exit:
0141   04F4 10 00 00    	mov a, 0
0142   04F7 29 11 05    	mov b, [_var_n]
0143   04FA D7          	push a
0144   04FB 11          	mov a, b
0145   04FC 26 01 00    	mov b, 1
0146   04FF 54          	add a, b
0147   0500 27          	mov b, a
0148   0501 E4          	pop a
0149   0502 FD 42 11 05 	mov [_var_n], b
0150   0506 0A 11 04    	jmp _while1_cond
0151   0509             _while1_exit:
0152   0509 F9          	leave
0153   050A 09          	ret
0154   050B             
0155   050B             ; -----end text block-----
0156   050B             
0157   050B             
0158   050B             ; -----begin data block-----
0159   050B             
0160   050B 14 00       _var_x: .dw 20
0161   050D 05 00       _var_y: .dw 5
0162   050F 0A 00       _var_z: .dw 10
0163   0511 00 00       _var_n: .dw 0
0164   0513 00 00       _var_i: .dw 0
0165   0515 00 00       _var_j: .dw 0
0166   0517 00 00       _var_s: .dw 0
0167   0519 00 00       _var_count: .dw 0
0168   051B 00 00       _var_divides: .dw 0
0169   051D 0A 00       _var_newline_data: .db "\n", 0
0170   051F 1D 05       _var_newline: .dw _var_newline_data
0171   0521 54 52 55 45 _var_s1_data: .db "TRUE", 0
0171   0525 00 
0172   0526 21 05       _var_s1: .dw _var_s1_data
0173   0528             
0174   0528             ; -----end data block-----
0175   0528             
0176   0528             
0177   0528             ; -----begin include block-----
0178   0528             
0179   0528             .include "lib/stdio.asm"
0001+  0528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0528             ; stdio.s
0003+  0528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0528             .include "lib/string.asm"
0001++ 0528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0528             ; string.s
0003++ 0528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0528             
0005++ 0528             
0006++ 0528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0528             ; strrev
0008++ 0528             ; reverse a string
0009++ 0528             ; D = string address
0010++ 0528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0528             ; 01234
0012++ 0528             strrev:
0013++ 0528 4B          	pusha
0014++ 0529 07 6F 05    	call strlen	; length in C
0015++ 052C 12          	mov a, c
0016++ 052D AF 01 00    	cmp a, 1
0017++ 0530 D0 4A 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0533 7D          	dec a
0019++ 0534 FD 4E       	mov si, d	; beginning of string
0020++ 0536 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0538 59          	add d, a	; end of string
0022++ 0539 12          	mov a, c
0023++ 053A FD 9B       	shr a		; divide by 2
0024++ 053C 39          	mov c, a	; C now counts the steps
0025++ 053D             strrev_L0:
0026++ 053D 32          	mov bl, [d]	; save load right-side char into BL
0027++ 053E F6          	lodsb		; load left-side char into AL; increase SI
0028++ 053F 3E          	mov [d], al	; store left char into right side
0029++ 0540 1B          	mov al, bl
0030++ 0541 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0542 7E          	dec c
0032++ 0543 7F          	dec d
0033++ 0544 C2 00 00    	cmp c, 0
0034++ 0547 C7 3D 05    	jne strrev_L0
0035++ 054A             strrev_end:
0036++ 054A 4C          	popa
0037++ 054B 09          	ret
0038++ 054C             	
0039++ 054C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 054C             ; strchr
0041++ 054C             ; search string in D for char in AL
0042++ 054C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 054C             strchr:
0044++ 054C             strchr_L0:
0045++ 054C 32          	mov bl, [d]
0046++ 054D C1 00       	cmp bl, 0
0047++ 054F C6 5A 05    	je strchr_end
0048++ 0552 BA          	cmp al, bl
0049++ 0553 C6 5A 05    	je strchr_end
0050++ 0556 79          	inc d
0051++ 0557 0A 4C 05    	jmp strchr_L0
0052++ 055A             strchr_end:
0053++ 055A 1B          	mov al, bl
0054++ 055B 09          	ret
0055++ 055C             
0056++ 055C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 055C             ; strstr
0058++ 055C             ; find sub-string
0059++ 055C             ; str1 in SI
0060++ 055C             ; str2 in DI
0061++ 055C             ; SI points to end of source string
0062++ 055C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 055C             strstr:
0064++ 055C DB          	push al
0065++ 055D DA          	push d
0066++ 055E E3          	push di
0067++ 055F             strstr_loop:
0068++ 055F F3          	cmpsb					; compare a byte of the strings
0069++ 0560 C7 6B 05    	jne strstr_ret
0070++ 0563 FC 00 00    	lea d, [di + 0]
0071++ 0566 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0568 C7 5F 05    	jne strstr_loop				; equal chars but not at end
0073++ 056B             strstr_ret:
0074++ 056B F0          	pop di
0075++ 056C E7          	pop d
0076++ 056D E8          	pop al
0077++ 056E 09          	ret
0078++ 056F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 056F             ; length of null terminated string
0080++ 056F             ; result in C
0081++ 056F             ; pointer in D
0082++ 056F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 056F             strlen:
0084++ 056F DA          	push d
0085++ 0570 38 00 00    	mov c, 0
0086++ 0573             strlen_L1:
0087++ 0573 BD 00       	cmp byte [d], 0
0088++ 0575 C6 7D 05    	je strlen_ret
0089++ 0578 79          	inc d
0090++ 0579 78          	inc c
0091++ 057A 0A 73 05    	jmp strlen_L1
0092++ 057D             strlen_ret:
0093++ 057D E7          	pop d
0094++ 057E 09          	ret
0095++ 057F             
0096++ 057F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 057F             ; STRCMP
0098++ 057F             ; compare two strings
0099++ 057F             ; str1 in SI
0100++ 057F             ; str2 in DI
0101++ 057F             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 057F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 057F             strcmp:
0104++ 057F DB          	push al
0105++ 0580 DA          	push d
0106++ 0581 E3          	push di
0107++ 0582 E2          	push si
0108++ 0583             strcmp_loop:
0109++ 0583 F3          	cmpsb					; compare a byte of the strings
0110++ 0584 C7 8F 05    	jne strcmp_ret
0111++ 0587 FB FF FF    	lea d, [si +- 1]
0112++ 058A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 058C C7 83 05    	jne strcmp_loop				; equal chars but not at end
0114++ 058F             strcmp_ret:
0115++ 058F EF          	pop si
0116++ 0590 F0          	pop di
0117++ 0591 E7          	pop d
0118++ 0592 E8          	pop al
0119++ 0593 09          	ret
0120++ 0594             
0121++ 0594             
0122++ 0594             ; STRCPY
0123++ 0594             ; copy null terminated string from SI to DI
0124++ 0594             ; source in SI
0125++ 0594             ; destination in DI
0126++ 0594             strcpy:
0127++ 0594 E2          	push si
0128++ 0595 E3          	push di
0129++ 0596 DB          	push al
0130++ 0597             strcpy_L1:
0131++ 0597 F6          	lodsb
0132++ 0598 F7          	stosb
0133++ 0599 B9 00       	cmp al, 0
0134++ 059B C7 97 05    	jne strcpy_L1
0135++ 059E             strcpy_end:
0136++ 059E E8          	pop al
0137++ 059F F0          	pop di
0138++ 05A0 EF          	pop si
0139++ 05A1 09          	ret
0140++ 05A2             
0141++ 05A2             ; STRCAT
0142++ 05A2             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 05A2             ; source in SI
0144++ 05A2             ; destination in DI
0145++ 05A2             strcat:
0146++ 05A2 E2          	push si
0147++ 05A3 E3          	push di
0148++ 05A4 D7          	push a
0149++ 05A5 DA          	push d
0150++ 05A6 50          	mov a, di
0151++ 05A7 3C          	mov d, a
0152++ 05A8             strcat_goto_end_L1:
0153++ 05A8 BD 00       	cmp byte[d], 0
0154++ 05AA C6 B1 05    	je strcat_start
0155++ 05AD 79          	inc d
0156++ 05AE 0A A8 05    	jmp strcat_goto_end_L1
0157++ 05B1             strcat_start:
0158++ 05B1 FD 50       	mov di, d
0159++ 05B3             strcat_L1:
0160++ 05B3 F6          	lodsb
0161++ 05B4 F7          	stosb
0162++ 05B5 B9 00       	cmp al, 0
0163++ 05B7 C7 B3 05    	jne strcat_L1
0164++ 05BA             strcat_end:
0165++ 05BA E7          	pop d
0166++ 05BB E4          	pop a
0167++ 05BC F0          	pop di
0168++ 05BD EF          	pop si
0169++ 05BE 09          	ret
0005+  05BF             
0006+  05BF 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  05C3 34 35 36 37 
0006+  05C7 38 39 41 42 
0006+  05CB 43 44 45 46 
0007+  05CF             
0008+  05CF 01 00       table_power:.dw 1
0009+  05D1 0A 00       			.dw 10
0010+  05D3 64 00       			.dw 100
0011+  05D5 E8 03       			.dw 1000
0012+  05D7 10 27       			.dw 10000
0013+  05D9             
0014+  05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  05D9             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  05D9             ; ASCII in BL
0017+  05D9             ; result in AL
0018+  05D9             ; ascii for F = 0100 0110
0019+  05D9             ; ascii for 9 = 0011 1001
0020+  05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  05D9             hex_ascii_encode:
0022+  05D9 1B          	mov al, bl
0023+  05DA 93 40       	test al, $40				; test if letter or number
0024+  05DC C7 E2 05    	jnz hex_letter
0025+  05DF 87 0F       	and al, $0F				; get number
0026+  05E1 09          	ret
0027+  05E2             hex_letter:
0028+  05E2 87 0F       	and al, $0F				; get letter
0029+  05E4 6A 09       	add al, 9
0030+  05E6 09          	ret
0031+  05E7             
0032+  05E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  05E7             ; ATOI
0034+  05E7             ; 2 letter hex string in B
0035+  05E7             ; 8bit integer returned in AL
0036+  05E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  05E7             atoi:
0038+  05E7 D8          	push b
0039+  05E8 07 D9 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  05EB 30          	mov bl, bh
0041+  05EC DB          	push al					; save a
0042+  05ED 07 D9 05    	call hex_ascii_encode
0043+  05F0 EA          	pop bl	
0044+  05F1 FD 9E 04    	shl al, 4
0045+  05F4 8C          	or al, bl
0046+  05F5 E5          	pop b
0047+  05F6 09          	ret	
0048+  05F7             
0049+  05F7             
0050+  05F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  05F7             ; printf
0052+  05F7             ; no need for explanations!
0053+  05F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  05F7             printf:
0055+  05F7 09          	ret
0056+  05F8             
0057+  05F8             
0058+  05F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  05F8             ; scanf
0060+  05F8             ; no need for explanations!
0061+  05F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  05F8             scanf:
0063+  05F8 09          	ret
0064+  05F9             
0065+  05F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  05F9             ; ITOA
0067+  05F9             ; 8bit value in BL
0068+  05F9             ; 2 byte ASCII result in A
0069+  05F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  05F9             itoa:
0071+  05F9 DA          	push d
0072+  05FA D8          	push b
0073+  05FB A7 00       	mov bh, 0
0074+  05FD FD A4 04    	shr bl, 4	
0075+  0600 74          	mov d, b
0076+  0601 1F BF 05    	mov al, [d + s_hex_digits]
0077+  0604 23          	mov ah, al
0078+  0605             	
0079+  0605 E5          	pop b
0080+  0606 D8          	push b
0081+  0607 A7 00       	mov bh, 0
0082+  0609 FD 87 0F    	and bl, $0F
0083+  060C 74          	mov d, b
0084+  060D 1F BF 05    	mov al, [d + s_hex_digits]
0085+  0610 E5          	pop b
0086+  0611 E7          	pop d
0087+  0612 09          	ret
0088+  0613             
0089+  0613             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0613             ; HEX STRING TO BINARY
0091+  0613             ; di = destination address
0092+  0613             ; si = source
0093+  0613             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0613             hex_to_int:
0095+  0613             hex_to_int_L1:
0096+  0613 F6          	lodsb					; load from [SI] to AL
0097+  0614 B9 00       	cmp al, 0				; check if ASCII 0
0098+  0616 C6 23 06    	jz hex_to_int_ret
0099+  0619 36          	mov bh, al
0100+  061A F6          	lodsb
0101+  061B 2F          	mov bl, al
0102+  061C 07 E7 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  061F F7          	stosb					; store AL to [DI]
0104+  0620 0A 13 06    	jmp hex_to_int_L1
0105+  0623             hex_to_int_ret:
0106+  0623 09          	ret		
0107+  0624             
0108+  0624             
0109+  0624             
0110+  0624             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0624             ; GETCHAR
0112+  0624             ; char in ah
0113+  0624             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0624             getchar:
0115+  0624 DB          	push al
0116+  0625             getchar_retry:
0117+  0625 FD 0C       	sti
0118+  0627 19 01       	mov al, 1
0119+  0629 05 03       	syscall sys_io			; receive in AH
0120+  062B B9 00       	cmp al, 0			; check if any char was receive
0121+  062D C6 25 06    	je getchar_retry
0122+  0630 E8          	pop al
0123+  0631 09          	ret
0124+  0632             
0125+  0632             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0632             ; PUTCHAR
0127+  0632             ; char in ah
0128+  0632             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0632             putchar:
0130+  0632 D7          	push a
0131+  0633 19 00       	mov al, 0
0132+  0635 05 03       	syscall sys_io			; char in AH
0133+  0637 E4          	pop a
0134+  0638 09          	ret
0135+  0639             
0136+  0639             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  0639             ;; INPUT A STRING
0138+  0639             ;; terminates with null
0139+  0639             ;; pointer in D
0140+  0639             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0639             gets:
0142+  0639 D7          	push a
0143+  063A DA          	push d
0144+  063B             gets_loop:
0145+  063B FD 0C       	sti
0146+  063D 19 01       	mov al, 1
0147+  063F 05 03       	syscall sys_io			; receive in AH
0148+  0641 B9 00       	cmp al, 0				; check error code (AL)
0149+  0643 C6 3B 06    	je gets_loop			; if no char received, retry
0150+  0646             
0151+  0646 76 1B       	cmp ah, 27
0152+  0648 C6 64 06    	je gets_telnet_escape
0153+  064B 76 0A       	cmp ah, $0A				; LF
0154+  064D C6 BD 06    	je gets_end
0155+  0650 76 5C       	cmp ah, $5C				; '\\'
0156+  0652 C6 94 06    	je gets_escape
0157+  0655             	
0158+  0655 76 08       	cmp ah, $08			; check for backspace
0159+  0657 C6 60 06    	je gets_backspace
0160+  065A             
0161+  065A 1A          	mov al, ah
0162+  065B 3E          	mov [d], al
0163+  065C 79          	inc d
0164+  065D 0A 3B 06    	jmp gets_loop
0165+  0660             gets_backspace:
0166+  0660 7F          	dec d
0167+  0661 0A 3B 06    	jmp gets_loop
0168+  0664             gets_telnet_escape:
0169+  0664 FD 0C       	sti
0170+  0666 19 01       	mov al, 1
0171+  0668 05 03       	syscall sys_io				; receive in AH without echo
0172+  066A B9 00       	cmp al, 0					; check error code (AL)
0173+  066C C6 64 06    	je gets_telnet_escape		; if no char received, retry
0174+  066F 76 5B       	cmp ah, '['
0175+  0671 C7 3B 06    	jne gets_loop
0176+  0674             gets_telnet_escape_phase2:
0177+  0674 FD 0C       	sti
0178+  0676 19 01       	mov al, 1
0179+  0678 05 03       	syscall sys_io					; receive in AH without echo
0180+  067A B9 00       	cmp al, 0						; check error code (AL)
0181+  067C C6 74 06    	je gets_telnet_escape_phase2	; if no char received, retry
0182+  067F 76 44       	cmp ah, 'D'
0183+  0681 C6 8C 06    	je gets_left_arrow
0184+  0684 76 43       	cmp ah, 'C'
0185+  0686 C6 90 06    	je gets_right_arrow
0186+  0689 0A 3B 06    	jmp gets_loop
0187+  068C             gets_left_arrow:
0188+  068C 7F          	dec d
0189+  068D 0A 3B 06    	jmp gets_loop
0190+  0690             gets_right_arrow:
0191+  0690 79          	inc d
0192+  0691 0A 3B 06    	jmp gets_loop
0193+  0694             gets_escape:
0194+  0694 FD 0C       	sti
0195+  0696 19 01       	mov al, 1
0196+  0698 05 03       	syscall sys_io			; receive in AH
0197+  069A B9 00       	cmp al, 0				; check error code (AL)
0198+  069C C6 94 06    	je gets_escape			; if no char received, retry
0199+  069F 76 6E       	cmp ah, 'n'
0200+  06A1 C6 AF 06    	je gets_LF
0201+  06A4 76 72       	cmp ah, 'r'
0202+  06A6 C6 B6 06    	je gets_CR
0203+  06A9 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0204+  06AA 3E          	mov [d], al
0205+  06AB 79          	inc d
0206+  06AC 0A 3B 06    	jmp gets_loop
0207+  06AF             gets_LF:
0208+  06AF 19 0A       	mov al, $0A
0209+  06B1 3E          	mov [d], al
0210+  06B2 79          	inc d
0211+  06B3 0A 3B 06    	jmp gets_loop
0212+  06B6             gets_CR:
0213+  06B6 19 0D       	mov al, $0D
0214+  06B8 3E          	mov [d], al
0215+  06B9 79          	inc d
0216+  06BA 0A 3B 06    	jmp gets_loop
0217+  06BD             gets_end:
0218+  06BD 19 00       	mov al, 0
0219+  06BF 3E          	mov [d], al				; terminate string
0220+  06C0 E7          	pop d
0221+  06C1 E4          	pop a
0222+  06C2 09          	ret
0223+  06C3             
0224+  06C3             
0225+  06C3             
0226+  06C3             
0227+  06C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0228+  06C3             ;; INPUT TEXT
0229+  06C3             ;; terminated with CTRL+D
0230+  06C3             ;; pointer in D
0231+  06C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0232+  06C3             gettxt:
0233+  06C3 D7          	push a
0234+  06C4 DA          	push d
0235+  06C5             gettxt_loop:
0236+  06C5 19 01       	mov al, 1
0237+  06C7 05 03       	syscall sys_io			; receive in AH
0238+  06C9 B9 00       	cmp al, 0				; check error code (AL)
0239+  06CB C6 C5 06    	je gettxt_loop		; if no char received, retry
0240+  06CE 76 04       	cmp ah, 4			; EOT
0241+  06D0 C6 0E 07    	je gettxt_end
0242+  06D3 76 08       	cmp ah, $08			; check for backspace
0243+  06D5 C6 0A 07    	je gettxt_backspace
0244+  06D8 76 5C       	cmp ah, $5C				; '\\'
0245+  06DA C6 E3 06    	je gettxt_escape
0246+  06DD 1A          	mov al, ah
0247+  06DE 3E          	mov [d], al
0248+  06DF 79          	inc d
0249+  06E0 0A C5 06    	jmp gettxt_loop
0250+  06E3             gettxt_escape:
0251+  06E3 19 01       	mov al, 1
0252+  06E5 05 03       	syscall sys_io			; receive in AH
0253+  06E7 B9 00       	cmp al, 0				; check error code (AL)
0254+  06E9 C6 E3 06    	je gettxt_escape		; if no char received, retry
0255+  06EC 76 6E       	cmp ah, 'n'
0256+  06EE C6 FC 06    	je gettxt_LF
0257+  06F1 76 72       	cmp ah, 'r'
0258+  06F3 C6 03 07    	je gettxt_CR
0259+  06F6 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0260+  06F7 3E          	mov [d], al
0261+  06F8 79          	inc d
0262+  06F9 0A C5 06    	jmp gettxt_loop
0263+  06FC             gettxt_LF:
0264+  06FC 19 0A       	mov al, $0A
0265+  06FE 3E          	mov [d], al
0266+  06FF 79          	inc d
0267+  0700 0A C5 06    	jmp gettxt_loop
0268+  0703             gettxt_CR:
0269+  0703 19 0D       	mov al, $0D
0270+  0705 3E          	mov [d], al
0271+  0706 79          	inc d
0272+  0707 0A C5 06    	jmp gettxt_loop
0273+  070A             gettxt_backspace:
0274+  070A 7F          	dec d
0275+  070B 0A C5 06    	jmp gettxt_loop
0276+  070E             gettxt_end:
0277+  070E 19 00       	mov al, 0
0278+  0710 3E          	mov [d], al				; terminate string
0279+  0711 E7          	pop d
0280+  0712 E4          	pop a
0281+  0713 09          	ret
0282+  0714             
0283+  0714             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0284+  0714             ; PRINT NEW LINE
0285+  0714             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0714             printnl:
0287+  0714 D7          	push a
0288+  0715 10 00 0A    	mov a, $0A00
0289+  0718 05 03       	syscall sys_io
0290+  071A 10 00 0D    	mov a, $0D00
0291+  071D 05 03       	syscall sys_io
0292+  071F E4          	pop a
0293+  0720 09          	ret
0294+  0721             
0295+  0721             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0296+  0721             ; strtoint
0297+  0721             ; 4 digit hex string number in d
0298+  0721             ; integer returned in A
0299+  0721             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0300+  0721             strtointx:
0301+  0721 D8          	push b
0302+  0722 32          	mov bl, [d]
0303+  0723 37          	mov bh, bl
0304+  0724 33 01 00    	mov bl, [d + 1]
0305+  0727 07 E7 05    	call atoi				; convert to int in AL
0306+  072A 23          	mov ah, al				; move to AH
0307+  072B 33 02 00    	mov bl, [d + 2]
0308+  072E 37          	mov bh, bl
0309+  072F 33 03 00    	mov bl, [d + 3]
0310+  0732 07 E7 05    	call atoi				; convert to int in AL
0311+  0735 E5          	pop b
0312+  0736 09          	ret
0313+  0737             
0314+  0737             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0315+  0737             ; strtoint
0316+  0737             ; 5 digit base10 string number in d
0317+  0737             ; integer returned in A
0318+  0737             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0319+  0737             strtoint:
0320+  0737 E2          	push si
0321+  0738 D8          	push b
0322+  0739 D9          	push c
0323+  073A DA          	push d
0324+  073B 07 6F 05    	call strlen			; get string length in C
0325+  073E 7E          	dec c
0326+  073F FD 4E       	mov si, d
0327+  0741 12          	mov a, c
0328+  0742 FD 99       	shl a
0329+  0744 3B CF 05    	mov d, table_power
0330+  0747 59          	add d, a
0331+  0748 38 00 00    	mov c, 0
0332+  074B             strtoint_L0:
0333+  074B F6          	lodsb			; load ASCII to al
0334+  074C B9 00       	cmp al, 0
0335+  074E C6 61 07    	je strtoint_end
0336+  0751 6F 30       	sub al, $30		; make into integer
0337+  0753 22 00       	mov ah, 0
0338+  0755 2A          	mov b, [d]
0339+  0756 AC          	mul a, b			; result in B since it fits in 16bits
0340+  0757 11          	mov a, b
0341+  0758 28          	mov b, c
0342+  0759 54          	add a, b
0343+  075A 39          	mov c, a
0344+  075B 63 02 00    	sub d, 2
0345+  075E 0A 4B 07    	jmp strtoint_L0
0346+  0761             strtoint_end:
0347+  0761 12          	mov a, c
0348+  0762 E7          	pop d
0349+  0763 E6          	pop c
0350+  0764 E5          	pop b
0351+  0765 EF          	pop si
0352+  0766 09          	ret
0353+  0767             
0354+  0767             
0355+  0767             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  0767             ; PRINT NULL TERMINATED STRING
0357+  0767             ; pointer in D
0358+  0767             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0767             puts:
0360+  0767 D7          	push a
0361+  0768 DA          	push d
0362+  0769             puts_L1:
0363+  0769 1E          	mov al, [d]
0364+  076A B9 00       	cmp al, 0
0365+  076C C6 78 07    	jz puts_END
0366+  076F 23          	mov ah, al
0367+  0770 19 00       	mov al, 0
0368+  0772 05 03       	syscall sys_io
0369+  0774 79          	inc d
0370+  0775 0A 69 07    	jmp puts_L1
0371+  0778             puts_END:
0372+  0778 E7          	pop d
0373+  0779 E4          	pop a
0374+  077A 09          	ret
0375+  077B             
0376+  077B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0377+  077B             ; PRINT N SIZE STRING
0378+  077B             ; pointer in D
0379+  077B             ; size in C
0380+  077B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0381+  077B             putsn:
0382+  077B DB          	push al
0383+  077C DA          	push d
0384+  077D D9          	push c
0385+  077E             putsn_L0:
0386+  077E 1E          	mov al, [d]
0387+  077F 23          	mov ah, al
0388+  0780 19 00       	mov al, 0
0389+  0782 05 03       	syscall sys_io
0390+  0784 79          	inc d
0391+  0785 7E          	dec c	
0392+  0786 C2 00 00    	cmp c, 0
0393+  0789 C7 7E 07    	jne putsn_L0
0394+  078C             putsn_end:
0395+  078C E6          	pop c
0396+  078D E7          	pop d
0397+  078E E8          	pop al
0398+  078F 09          	ret
0399+  0790             
0400+  0790             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0401+  0790             ; print 16bit decimal number
0402+  0790             ; input number in A
0403+  0790             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0790             print_u16d:
0405+  0790 D7          	push a
0406+  0791 D8          	push b
0407+  0792 26 10 27    	mov b, 10000
0408+  0795 AE          	div a, b			; get 10000 coeff.
0409+  0796 07 BC 07    	call print_zero_or_space
0410+  0799 11          	mov a, b
0411+  079A 26 E8 03    	mov b, 1000
0412+  079D AE          	div a, b			; get 10000 coeff.
0413+  079E 07 BC 07    	call print_zero_or_space
0414+  07A1 11          	mov a, b
0415+  07A2 26 64 00    	mov b, 100
0416+  07A5 AE          	div a, b
0417+  07A6 07 BC 07    	call print_zero_or_space
0418+  07A9 11          	mov a, b
0419+  07AA 26 0A 00    	mov b, 10
0420+  07AD AE          	div a, b
0421+  07AE 07 BC 07    	call print_zero_or_space
0422+  07B1 11          	mov a, b
0423+  07B2 6A 30       	add al, $30
0424+  07B4 23          	mov ah, al
0425+  07B5 19 00       	mov al, 0
0426+  07B7 05 03       	syscall sys_io	; print coeff
0427+  07B9 E5          	pop b
0428+  07BA E4          	pop a
0429+  07BB 09          	ret
0430+  07BC             
0431+  07BC             
0432+  07BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  07BC             ; if A == 0, print space
0434+  07BC             ; else print A
0435+  07BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  07BC             print_zero_or_space:
0437+  07BC             	; cmp a, 0
0438+  07BC             	; jne print_number
0439+  07BC             	; mov ah, $20
0440+  07BC             	; call putchar
0441+  07BC             	; ret
0442+  07BC             print_number:
0443+  07BC 6A 30       	add al, $30
0444+  07BE 23          	mov ah, al
0445+  07BF 07 32 06    	call putchar
0446+  07C2 09          	ret
0447+  07C3             
0448+  07C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  07C3             ; PRINT 16BIT HEX INTEGER
0450+  07C3             ; integer value in reg B
0451+  07C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0452+  07C3             print_u16x:
0453+  07C3 D7          	push a
0454+  07C4 D8          	push b
0455+  07C5 DD          	push bl
0456+  07C6 30          	mov bl, bh
0457+  07C7 07 F9 05    	call itoa				; convert bh to char in A
0458+  07CA 2F          	mov bl, al				; save al
0459+  07CB 19 00       	mov al, 0
0460+  07CD 05 03       	syscall sys_io				; display AH
0461+  07CF 24          	mov ah, bl				; retrieve al
0462+  07D0 19 00       	mov al, 0
0463+  07D2 05 03       	syscall sys_io				; display AL
0464+  07D4             
0465+  07D4 EA          	pop bl
0466+  07D5 07 F9 05    	call itoa				; convert bh to char in A
0467+  07D8 2F          	mov bl, al				; save al
0468+  07D9 19 00       	mov al, 0
0469+  07DB 05 03       	syscall sys_io				; display AH
0470+  07DD 24          	mov ah, bl				; retrieve al
0471+  07DE 19 00       	mov al, 0
0472+  07E0 05 03       	syscall sys_io				; display AL
0473+  07E2             
0474+  07E2 E5          	pop b
0475+  07E3 E4          	pop a
0476+  07E4 09          	ret
0477+  07E5             
0478+  07E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  07E5             ; INPUT 16BIT HEX INTEGER
0480+  07E5             ; read 16bit integer into A
0481+  07E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0482+  07E5             scan_u16x:
0483+  07E5 F8 10 00    	enter 16
0484+  07E8 D8          	push b
0485+  07E9 DA          	push d
0486+  07EA             
0487+  07EA FA F1 FF    	lea d, [bp + -15]
0488+  07ED 07 39 06    	call gets				; get number
0489+  07F0             
0490+  07F0 32          	mov bl, [d]
0491+  07F1 37          	mov bh, bl
0492+  07F2 33 01 00    	mov bl, [d + 1]
0493+  07F5 07 E7 05    	call atoi				; convert to int in AL
0494+  07F8 23          	mov ah, al				; move to AH
0495+  07F9             
0496+  07F9 33 02 00    	mov bl, [d + 2]
0497+  07FC 37          	mov bh, bl
0498+  07FD 33 03 00    	mov bl, [d + 3]
0499+  0800 07 E7 05    	call atoi				; convert to int in AL
0500+  0803             
0501+  0803 E7          	pop d
0502+  0804 E5          	pop b
0503+  0805 F9          	leave
0504+  0806 09          	ret
0505+  0807             
0506+  0807             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0807             ; PRINT 8bit HEX INTEGER
0508+  0807             ; integer value in reg bl
0509+  0807             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0510+  0807             print_u8x:
0511+  0807 D7          	push a
0512+  0808 DD          	push bl
0513+  0809             
0514+  0809 07 F9 05    	call itoa				; convert bl to char in A
0515+  080C 2F          	mov bl, al				; save al
0516+  080D 19 00       	mov al, 0
0517+  080F 05 03       	syscall sys_io				; display AH
0518+  0811 24          	mov ah, bl				; retrieve al
0519+  0812 19 00       	mov al, 0
0520+  0814 05 03       	syscall sys_io				; display AL
0521+  0816             
0522+  0816 EA          	pop bl
0523+  0817 E4          	pop a
0524+  0818 09          	ret
0525+  0819             
0526+  0819             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0819             ; print 8bit decimal unsigned number
0528+  0819             ; input number in AL
0529+  0819             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0530+  0819             print_u8d:
0531+  0819 D7          	push a
0532+  081A D8          	push b
0533+  081B             
0534+  081B 22 00       	mov ah, 0
0535+  081D 26 64 00    	mov b, 100
0536+  0820 AE          	div a, b
0537+  0821 D8          	push b			; save remainder
0538+  0822 B9 00       	cmp al, 0
0539+  0824 C6 2E 08    	je skip100
0540+  0827 6A 30       	add al, $30
0541+  0829 23          	mov ah, al
0542+  082A 19 00       	mov al, 0
0543+  082C 05 03       	syscall sys_io	; print coeff
0544+  082E             skip100:
0545+  082E E4          	pop a
0546+  082F 22 00       	mov ah, 0
0547+  0831 26 0A 00    	mov b, 10
0548+  0834 AE          	div a, b
0549+  0835 D8          	push b			; save remainder
0550+  0836 B9 00       	cmp al, 0
0551+  0838 C6 42 08    	je skip10
0552+  083B 6A 30       	add al, $30
0553+  083D 23          	mov ah, al
0554+  083E 19 00       	mov al, 0
0555+  0840 05 03       	syscall sys_io	; print coeff
0556+  0842             skip10:
0557+  0842 E4          	pop a
0558+  0843 1B          	mov al, bl
0559+  0844 6A 30       	add al, $30
0560+  0846 23          	mov ah, al
0561+  0847 19 00       	mov al, 0
0562+  0849 05 03       	syscall sys_io	; print coeff
0563+  084B E5          	pop b
0564+  084C E4          	pop a
0565+  084D 09          	ret
0566+  084E             
0567+  084E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  084E             ; INPUT 8BIT HEX INTEGER
0569+  084E             ; read 8bit integer into AL
0570+  084E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  084E             scan_u8x:
0572+  084E F8 04 00    	enter 4
0573+  0851 D8          	push b
0574+  0852 DA          	push d
0575+  0853             
0576+  0853 FA FD FF    	lea d, [bp + -3]
0577+  0856 07 39 06    	call gets				; get number
0578+  0859             
0579+  0859 32          	mov bl, [d]
0580+  085A 37          	mov bh, bl
0581+  085B 33 01 00    	mov bl, [d + 1]
0582+  085E 07 E7 05    	call atoi				; convert to int in AL
0583+  0861             
0584+  0861 E7          	pop d
0585+  0862 E5          	pop b
0586+  0863 F9          	leave
0587+  0864 09          	ret
0588+  0865             
0589+  0865             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0590+  0865             ; input decimal number
0591+  0865             ; result in A
0592+  0865             ; 655'\0'
0593+  0865             ; low--------high
0594+  0865             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0595+  0865             scan_u16d:
0596+  0865 F8 08 00    	enter 8
0597+  0868 E2          	push si
0598+  0869 D8          	push b
0599+  086A D9          	push c
0600+  086B DA          	push d
0601+  086C FA F9 FF    	lea d, [bp +- 7]
0602+  086F 07 39 06    	call gets
0603+  0872 07 6F 05    	call strlen			; get string length in C
0604+  0875 7E          	dec c
0605+  0876 FD 4E       	mov si, d
0606+  0878 12          	mov a, c
0607+  0879 FD 99       	shl a
0608+  087B 3B CF 05    	mov d, table_power
0609+  087E 59          	add d, a
0610+  087F 38 00 00    	mov c, 0
0611+  0882             mul_loop:
0612+  0882 F6          	lodsb			; load ASCII to al
0613+  0883 B9 00       	cmp al, 0
0614+  0885 C6 98 08    	je mul_exit
0615+  0888 6F 30       	sub al, $30		; make into integer
0616+  088A 22 00       	mov ah, 0
0617+  088C 2A          	mov b, [d]
0618+  088D AC          	mul a, b			; result in B since it fits in 16bits
0619+  088E 11          	mov a, b
0620+  088F 28          	mov b, c
0621+  0890 54          	add a, b
0622+  0891 39          	mov c, a
0623+  0892 63 02 00    	sub d, 2
0624+  0895 0A 82 08    	jmp mul_loop
0625+  0898             mul_exit:
0626+  0898 12          	mov a, c
0627+  0899 E7          	pop d
0628+  089A E6          	pop c
0629+  089B E5          	pop b
0630+  089C EF          	pop si
0631+  089D F9          	leave
0632+  089E 09          	ret
0180   089F             
0181   089F             
0182   089F             ; -----end include block-----
0183   089F             
0184   089F             
0185   089F             .end
tasm: Number of errors = 0
