0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0400             .org PROC_TEXT_ORG			; origin at 1024
0004   0400             
0005   0400             cowsay:
0006   0400 07 9B 09    	call printnl
0007   0403 10 00 00    	mov a, 0
0008   0406 42 AB 06    	mov [prog], a			; move tokennizer pointer to the beginning of the arguments area (address 0)
0009   0409 07 81 04    	call get_arg			; read argument line
0010   040C 3B AF 06    	mov d, tokstr
0011   040F 07 EE 09    	call puts
0012   0412 07 9B 09    	call printnl
0013   0415 3B 1D 04    	mov d, cow
0014   0418 07 EE 09    	call puts
0015   041B 05 0B       	syscall sys_terminate_proc
0016   041D             
0017   041D 20 20 20 20 cow: .db "    \\  ^__^\n"
0017   0421 5C 20 20 5E 
0017   0425 5F 5F 5E 0A 
0018   0429 20 20 20 20      .db "     \\ (oo)\\_______\n"
0018   042D 20 5C 20 28 
0018   0431 6F 6F 29 5C 
0018   0435 5F 5F 5F 5F 
0018   0439 5F 5F 5F 0A 
0019   043D 20 20 20 20      .db "       (__)\\       )\\/\\\n"
0019   0441 20 20 20 28 
0019   0445 5F 5F 29 5C 
0019   0449 20 20 20 20 
0019   044D 20 20 20 29 
0019   0451 5C 2F 5C 0A 
0020   0455 20 20 20 20      .db "           ||----w |\n"
0020   0459 20 20 20 20 
0020   045D 20 20 20 7C 
0020   0461 7C 2D 2D 2D 
0020   0465 2D 77 20 7C 
0020   0469 0A 
0021   046A 20 20 20 20      .db "           ||     ||\n\n", 0
0021   046E 20 20 20 20 
0021   0472 20 20 20 7C 
0021   0476 7C 20 20 20 
0021   047A 20 20 7C 7C 
0021   047E 0A 0A 00 
0022   0481             
0023   0481             .include "token.asm"
0001+  0481             TOKTYP_IDENTIFIER	.equ 0
0002+  0481             TOKTYP_KEYWORD		.equ 1
0003+  0481             TOKTYP_DELIMITER	.equ 2
0004+  0481             TOKTYP_STRING		.equ 3
0005+  0481             TOKTYP_CHAR			.equ 4
0006+  0481             TOKTYP_NUMERIC		.equ 5
0007+  0481             TOKTYP_END			.equ 6
0008+  0481             
0009+  0481             TOK_NULL			.equ 0
0010+  0481             TOK_FSLASH			.equ 1
0011+  0481             TOK_TIMES 			.equ 2
0012+  0481             TOK_PLUS 			.equ 3
0013+  0481             TOK_MINUS 			.equ 4
0014+  0481             TOK_DOT				.equ 5
0015+  0481             TOK_SEMI			.equ 6
0016+  0481             TOK_ANGLE			.equ 7
0017+  0481             TOK_TILDE			.equ 8
0018+  0481             TOK_EQUAL			.equ 9
0019+  0481             TOK_COLON			.equ 10
0020+  0481             TOK_COMMA			.equ 11
0021+  0481             
0022+  0481             TOK_END				.equ 20
0023+  0481             
0024+  0481             
0025+  0481             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0481             ;; read a full command argment from shell input buffer
0027+  0481             ;; argument is written into tokstr
0028+  0481             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  0481             get_arg:
0030+  0481 D7          	push a
0031+  0482 E2          	push si
0032+  0483 E3          	push di
0033+  0484 19 00       	mov al, 0
0034+  0486 3D AF 06    	mov [tokstr], al			; nullify tokstr string
0035+  0489 14 AB 06    	mov a, [prog]
0036+  048C 4D          	mov si, a
0037+  048D FD 4F AF 06 	mov di, tokstr
0038+  0491             get_arg_skip_spaces:
0039+  0491 F6          	lodsb
0040+  0492 07 9C 0B    	call isspace
0041+  0495 C6 91 04    	je get_arg_skip_spaces
0042+  0498             get_arg_L0:
0043+  0498 B9 3B       	cmp al, $3B				; check if is ';'
0044+  049A C6 A7 04    	je get_arg_end
0045+  049D B9 00       	cmp al, 0
0046+  049F C6 A7 04    	je get_arg_end			; check if end of input
0047+  04A2 F7          	stosb
0048+  04A3 F6          	lodsb
0049+  04A4 0A 98 04    	jmp get_arg_L0
0050+  04A7             get_arg_end:
0051+  04A7 19 00       	mov al, 0
0052+  04A9 F7          	stosb
0053+  04AA D5 01 00    	sub si, 1
0054+  04AD 4E          	mov a, si
0055+  04AE 42 AB 06    	mov [prog], a		; update pointer
0056+  04B1 F0          	pop di
0057+  04B2 EF          	pop si
0058+  04B3 E4          	pop a
0059+  04B4 09          	ret
0060+  04B5             
0061+  04B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  04B5             ;; read a path formation from shell input buffer
0063+  04B5             ;; path is written into tokstr
0064+  04B5             ;; /usr/bin
0065+  04B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  04B5             get_path:
0067+  04B5 D7          	push a
0068+  04B6 E2          	push si
0069+  04B7 E3          	push di
0070+  04B8 19 00       	mov al, 0
0071+  04BA 3D AF 06    	mov [tokstr], al			; nullify tokstr string
0072+  04BD 14 AB 06    	mov a, [prog]
0073+  04C0 4D          	mov si, a
0074+  04C1 FD 4F AF 06 	mov di, tokstr
0075+  04C5             get_path_skip_spaces:
0076+  04C5 F6          	lodsb
0077+  04C6 07 9C 0B    	call isspace
0078+  04C9 C6 C5 04    	je get_path_skip_spaces
0079+  04CC             get_path_is_pathchar:
0080+  04CC F7          	stosb
0081+  04CD F6          	lodsb
0082+  04CE 07 26 0B    	call isalnum			;check if is alphanumeric
0083+  04D1 C6 CC 04    	je get_path_is_pathchar
0084+  04D4 B9 2F       	cmp al, '/'				; check if is '/'
0085+  04D6 C6 CC 04    	je get_path_is_pathchar
0086+  04D9 19 00       	mov al, 0
0087+  04DB F7          	stosb
0088+  04DC D5 01 00    	sub si, 1
0089+  04DF 4E          	mov a, si
0090+  04E0 42 AB 06    	mov [prog], a		; update pointer
0091+  04E3             get_path_end:
0092+  04E3 F0          	pop di
0093+  04E4 EF          	pop si
0094+  04E5 E4          	pop a
0095+  04E6 09          	ret
0096+  04E7             
0097+  04E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  04E7             ;; read a line
0099+  04E7             ;; line is written into tokstr
0100+  04E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  04E7             get_line:
0102+  04E7 D7          	push a
0103+  04E8 E2          	push si
0104+  04E9 E3          	push di
0105+  04EA 19 00       	mov al, 0
0106+  04EC 3D AF 06    	mov [tokstr], al			; nullify tokstr string
0107+  04EF 14 AB 06    	mov a, [prog]
0108+  04F2 4D          	mov si, a
0109+  04F3 FD 4F AF 06 	mov di, tokstr
0110+  04F7             get_line_L0:
0111+  04F7 F6          	lodsb
0112+  04F8 B9 0A       	cmp al, $0A		; check for new line
0113+  04FA C6 01 05    	je get_line_exit
0114+  04FD F7          	stosb
0115+  04FE 0A F7 04    	jmp get_line_L0
0116+  0501             get_line_exit:
0117+  0501 19 00       	mov al, 0
0118+  0503 F7          	stosb
0119+  0504 4E          	mov a, si
0120+  0505 42 AB 06    	mov [prog], a		; update pointer
0121+  0508 F0          	pop di
0122+  0509 EF          	pop si
0123+  050A E4          	pop a
0124+  050B 09          	ret
0125+  050C             
0126+  050C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  050C             ;; token parser
0128+  050C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  050C             get_token:
0130+  050C D7          	push a
0131+  050D DA          	push d
0132+  050E E2          	push si
0133+  050F E3          	push di
0134+  0510 19 00       	mov al, 0
0135+  0512 3D AF 06    	mov [tokstr], al			; nullify tokstr string
0136+  0515 19 00       	mov al, TOK_NULL
0137+  0517 3D AE 06    	mov [tok], al				; nullify token
0138+  051A 14 AB 06    	mov a, [prog]
0139+  051D 4D          	mov si, a
0140+  051E FD 4F AF 06 	mov di, tokstr
0141+  0522             get_tok_skip_spaces:
0142+  0522 F6          	lodsb
0143+  0523 07 9C 0B    	call isspace
0144+  0526 C6 22 05    	je get_tok_skip_spaces
0145+  0529 B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  052B C6 10 06    	je get_token_end
0147+  052E B9 23       	cmp al, '#'			; comments!
0148+  0530 C6 3E 06    	je get_tok_comment
0149+  0533 07 26 0B    	call isalnum
0150+  0536 C6 1D 06    	jz is_alphanumeric
0151+  0539             ; other token types
0152+  0539             get_token_slash:
0153+  0539 B9 2F       	cmp al, '/'				; check if '/'
0154+  053B C7 53 05    	jne get_token_minus
0155+  053E F7          	stosb					; store '/' into token string
0156+  053F 19 00       	mov al, 0
0157+  0541 F7          	stosb					; terminate token string
0158+  0542 19 01       	mov al, TOK_FSLASH
0159+  0544 3D AE 06    	mov [tok], al			
0160+  0547 19 02       	mov al, TOKTYP_DELIMITER
0161+  0549 3D AD 06    	mov [toktyp], al
0162+  054C 4E          	mov a, si
0163+  054D 42 AB 06    	mov [prog], a		; update pointer
0164+  0550 0A 39 06    	jmp get_token_return
0165+  0553             get_token_minus:
0166+  0553 B9 2D       	cmp al, '-'				; check if '-'
0167+  0555 C7 6D 05    	jne get_token_comma
0168+  0558 F7          	stosb					; store '-' into token string
0169+  0559 19 00       	mov al, 0
0170+  055B F7          	stosb					; terminate token string
0171+  055C 19 04       	mov al, TOK_MINUS
0172+  055E 3D AE 06    	mov [tok], al			
0173+  0561 19 02       	mov al, TOKTYP_DELIMITER
0174+  0563 3D AD 06    	mov [toktyp], al
0175+  0566 4E          	mov a, si
0176+  0567 42 AB 06    	mov [prog], a		; update pointer
0177+  056A 0A 39 06    	jmp get_token_return
0178+  056D             get_token_comma:
0179+  056D B9 2C       	cmp al, ','				; check if ','
0180+  056F C7 87 05    	jne get_token_semi
0181+  0572 F7          	stosb					; store ',' into token string
0182+  0573 19 00       	mov al, 0
0183+  0575 F7          	stosb					; terminate token string
0184+  0576 19 0B       	mov al, TOK_COMMA
0185+  0578 3D AE 06    	mov [tok], al			
0186+  057B 19 02       	mov al, TOKTYP_DELIMITER
0187+  057D 3D AD 06    	mov [toktyp], al
0188+  0580 4E          	mov a, si
0189+  0581 42 AB 06    	mov [prog], a		; update pointer
0190+  0584 0A 39 06    	jmp get_token_return
0191+  0587             get_token_semi:
0192+  0587 B9 3B       	cmp al, $3B				; check if ';'
0193+  0589 C7 A1 05    	jne get_token_colon
0194+  058C F7          	stosb					; store ';' into token string
0195+  058D 19 00       	mov al, 0
0196+  058F F7          	stosb					; terminate token string
0197+  0590 19 06       	mov al, TOK_SEMI
0198+  0592 3D AE 06    	mov [tok], al			
0199+  0595 19 02       	mov al, TOKTYP_DELIMITER
0200+  0597 3D AD 06    	mov [toktyp], al
0201+  059A 4E          	mov a, si
0202+  059B 42 AB 06    	mov [prog], a		; update pointer
0203+  059E 0A 39 06    	jmp get_token_return
0204+  05A1             get_token_colon:
0205+  05A1 B9 3A       	cmp al, $3A				; check if ':'
0206+  05A3 C7 BB 05    	jne get_token_angle
0207+  05A6 F7          	stosb					; store ':' into token string
0208+  05A7 19 00       	mov al, 0
0209+  05A9 F7          	stosb					; terminate token string
0210+  05AA 19 0A       	mov al, TOK_COLON
0211+  05AC 3D AE 06    	mov [tok], al			
0212+  05AF 19 02       	mov al, TOKTYP_DELIMITER
0213+  05B1 3D AD 06    	mov [toktyp], al
0214+  05B4 4E          	mov a, si
0215+  05B5 42 AB 06    	mov [prog], a		; update pointer
0216+  05B8 0A 39 06    	jmp get_token_return
0217+  05BB             get_token_angle:
0218+  05BB B9 3E       	cmp al, $3E				; check if '>'
0219+  05BD C7 D5 05    	jne get_token_tilde
0220+  05C0 F7          	stosb					; store '>' into token string
0221+  05C1 19 00       	mov al, 0
0222+  05C3 F7          	stosb					; terminate token string
0223+  05C4 19 07       	mov al, TOK_ANGLE
0224+  05C6 3D AE 06    	mov [tok], al			
0225+  05C9 19 02       	mov al, TOKTYP_DELIMITER
0226+  05CB 3D AD 06    	mov [toktyp], al
0227+  05CE 4E          	mov a, si
0228+  05CF 42 AB 06    	mov [prog], a		; update pointer
0229+  05D2 0A 39 06    	jmp get_token_return
0230+  05D5             get_token_tilde:
0231+  05D5 B9 7E       	cmp al, '~'				; check if '~'
0232+  05D7 C7 EF 05    	jne get_token_equal
0233+  05DA F7          	stosb					; store '~' into token string
0234+  05DB 19 00       	mov al, 0
0235+  05DD F7          	stosb					; terminate token string
0236+  05DE 19 08       	mov al, TOK_TILDE
0237+  05E0 3D AE 06    	mov [tok], al			
0238+  05E3 19 02       	mov al, TOKTYP_DELIMITER
0239+  05E5 3D AD 06    	mov [toktyp], al
0240+  05E8 4E          	mov a, si
0241+  05E9 42 AB 06    	mov [prog], a		; update pointer
0242+  05EC 0A 39 06    	jmp get_token_return
0243+  05EF             get_token_equal:
0244+  05EF B9 3D       	cmp al, '='				; check if '='
0245+  05F1 C7 09 06    	jne get_token_skip
0246+  05F4 F7          	stosb					; store '=' into token string
0247+  05F5 19 00       	mov al, 0
0248+  05F7 F7          	stosb					; terminate token string
0249+  05F8 19 09       	mov al, TOK_EQUAL
0250+  05FA 3D AE 06    	mov [tok], al			
0251+  05FD 19 02       	mov al, TOKTYP_DELIMITER
0252+  05FF 3D AD 06    	mov [toktyp], al
0253+  0602 4E          	mov a, si
0254+  0603 42 AB 06    	mov [prog], a		; update pointer
0255+  0606 0A 39 06    	jmp get_token_return
0256+  0609             get_token_skip:
0257+  0609 4E          	mov a, si
0258+  060A 42 AB 06    	mov [prog], a		; update pointer
0259+  060D 0A 39 06    	jmp get_token_return
0260+  0610             get_token_end:				; end of file token
0261+  0610 19 14       	mov al, TOK_END
0262+  0612 3D AE 06    	mov [tok], al
0263+  0615 19 06       	mov al, TOKTYP_END
0264+  0617 3D AD 06    	mov [toktyp], al
0265+  061A 0A 39 06    	jmp get_token_return
0266+  061D             is_alphanumeric:
0267+  061D F7          	stosb
0268+  061E F6          	lodsb
0269+  061F 07 26 0B    	call isalnum			;check if is alphanumeric
0270+  0622 C6 1D 06    	jz is_alphanumeric
0271+  0625 B9 2E       	cmp al, $2E				; check if is '.'
0272+  0627 C6 1D 06    	je is_alphanumeric
0273+  062A 19 00       	mov al, 0
0274+  062C F7          	stosb
0275+  062D 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  062F 3D AD 06    	mov [toktyp], al
0277+  0632 D5 01 00    	sub si, 1
0278+  0635 4E          	mov a, si
0279+  0636 42 AB 06    	mov [prog], a		; update pointer
0280+  0639             get_token_return:
0281+  0639 F0          	pop di
0282+  063A EF          	pop si
0283+  063B E7          	pop d
0284+  063C E4          	pop a
0285+  063D 09          	ret
0286+  063E             get_tok_comment:
0287+  063E F6          	lodsb
0288+  063F B9 0A       	cmp al, $0A			; new line
0289+  0641 C7 3E 06    	jne get_tok_comment
0290+  0644 0A 22 05    	jmp get_tok_skip_spaces
0291+  0647             
0292+  0647             
0293+  0647             get_number:
0294+  0647 D7          	push a
0295+  0648 DA          	push d
0296+  0649 E2          	push si
0297+  064A E3          	push di
0298+  064B 19 00       	mov al, 0
0299+  064D 3D AF 06    	mov [tokstr], al			; nullify tokstr string
0300+  0650 19 00       	mov al, TOK_NULL
0301+  0652 3D AE 06    	mov [tok], al				; nullify token
0302+  0655 14 AB 06    	mov a, [prog]
0303+  0658 4D          	mov si, a
0304+  0659 FD 4F AF 06 	mov di, tokstr
0305+  065D             get_number_skip_spaces:
0306+  065D F6          	lodsb
0307+  065E 07 9C 0B    	call isspace
0308+  0661 C6 5D 06    	je get_number_skip_spaces
0309+  0664 B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  0666 C7 76 06    	jne get_number_L0
0311+  0669 19 14       	mov al, TOK_END
0312+  066B 3D AE 06    	mov [tok], al
0313+  066E 19 06       	mov al, TOKTYP_END
0314+  0670 3D AD 06    	mov [toktyp], al
0315+  0673 0A 8D 06    	jmp get_number_return
0316+  0676             get_number_L0:
0317+  0676 F7          	stosb
0318+  0677 F6          	lodsb
0319+  0678 07 30 0B    	call isdigit			;check if is numeric
0320+  067B C6 76 06    	jz get_number_L0
0321+  067E 19 00       	mov al, 0
0322+  0680 F7          	stosb
0323+  0681 19 05       	mov al, TOKTYP_NUMERIC
0324+  0683 3D AD 06    	mov [toktyp], al
0325+  0686 D5 01 00    	sub si, 1
0326+  0689 4E          	mov a, si
0327+  068A 42 AB 06    	mov [prog], a		; update pointer
0328+  068D             get_number_return:
0329+  068D F0          	pop di
0330+  068E EF          	pop si
0331+  068F E7          	pop d
0332+  0690 E4          	pop a
0333+  0691 09          	ret
0334+  0692             
0335+  0692             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0692             ;; PUT BACK TOKEN
0337+  0692             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  0692             putback:
0339+  0692 D7          	push a
0340+  0693 E2          	push si
0341+  0694 FD 4D AF 06 	mov si, tokstr	
0342+  0698             putback_loop:
0343+  0698 F6          	lodsb
0344+  0699 B9 00       	cmp al, 0
0345+  069B C6 A8 06    	je putback_end
0346+  069E 14 AB 06    	mov a, [prog]
0347+  06A1 7D          	dec a
0348+  06A2 42 AB 06    	mov [prog], a			; update pointer
0349+  06A5 0A 98 06    	jmp putback_loop
0350+  06A8             putback_end:
0351+  06A8 EF          	pop si
0352+  06A9 E4          	pop a
0353+  06AA 09          	ret
0354+  06AB             
0355+  06AB             
0356+  06AB             
0357+  06AB             
0358+  06AB 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  06AD             
0360+  06AD 00          toktyp: 	.db 0			; token type symbol
0361+  06AE 00          tok:		.db 0			; current token symbol
0362+  06AF 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  06B3 00 00 00 00 
0362+  06B7 00 00 00 00 
0362+  06BB 00 00 00 00 
0362+  06BF 00 00 00 00 
0362+  06C3 00 00 00 00 
0362+  06C7 00 00 00 00 
0362+  06CB 00 00 00 00 
0362+  06CF 00 00 00 00 
0362+  06D3 00 00 00 00 
0362+  06D7 00 00 00 00 
0362+  06DB 00 00 00 00 
0362+  06DF 00 00 00 00 
0362+  06E3 00 00 00 00 
0362+  06E7 00 00 00 00 
0362+  06EB 00 00 00 00 
0362+  06EF 00 00 00 00 
0362+  06F3 00 00 00 00 
0362+  06F7 00 00 00 00 
0362+  06FB 00 00 00 00 
0362+  06FF 00 00 00 00 
0362+  0703 00 00 00 00 
0362+  0707 00 00 00 00 
0362+  070B 00 00 00 00 
0362+  070F 00 00 00 00 
0362+  0713 00 00 00 00 
0362+  0717 00 00 00 00 
0362+  071B 00 00 00 00 
0362+  071F 00 00 00 00 
0362+  0723 00 00 00 00 
0362+  0727 00 00 00 00 
0362+  072B 00 00 00 00 
0362+  072F 00 00 00 00 
0362+  0733 00 00 00 00 
0362+  0737 00 00 00 00 
0362+  073B 00 00 00 00 
0362+  073F 00 00 00 00 
0362+  0743 00 00 00 00 
0362+  0747 00 00 00 00 
0362+  074B 00 00 00 00 
0362+  074F 00 00 00 00 
0362+  0753 00 00 00 00 
0362+  0757 00 00 00 00 
0362+  075B 00 00 00 00 
0362+  075F 00 00 00 00 
0362+  0763 00 00 00 00 
0362+  0767 00 00 00 00 
0362+  076B 00 00 00 00 
0362+  076F 00 00 00 00 
0362+  0773 00 00 00 00 
0362+  0777 00 00 00 00 
0362+  077B 00 00 00 00 
0362+  077F 00 00 00 00 
0362+  0783 00 00 00 00 
0362+  0787 00 00 00 00 
0362+  078B 00 00 00 00 
0362+  078F 00 00 00 00 
0362+  0793 00 00 00 00 
0362+  0797 00 00 00 00 
0362+  079B 00 00 00 00 
0362+  079F 00 00 00 00 
0362+  07A3 00 00 00 00 
0362+  07A7 00 00 00 00 
0362+  07AB 00 00 00 00 
0024   07AF             .include "stdio.asm"
0001+  07AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  07AF             ; stdio.s
0003+  07AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  07AF             .include "string.asm"
0001++ 07AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 07AF             ; string.s
0003++ 07AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 07AF             
0005++ 07AF             
0006++ 07AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 07AF             ; strrev
0008++ 07AF             ; reverse a string
0009++ 07AF             ; D = string address
0010++ 07AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 07AF             ; 01234
0012++ 07AF             strrev:
0013++ 07AF 4B          	pusha
0014++ 07B0 07 F6 07    	call strlen	; length in C
0015++ 07B3 12          	mov a, c
0016++ 07B4 AF 01 00    	cmp a, 1
0017++ 07B7 D0 D1 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 07BA 7D          	dec a
0019++ 07BB FD 4E       	mov si, d	; beginning of string
0020++ 07BD FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 07BF 59          	add d, a	; end of string
0022++ 07C0 12          	mov a, c
0023++ 07C1 FD 9B       	shr a		; divide by 2
0024++ 07C3 39          	mov c, a	; C now counts the steps
0025++ 07C4             strrev_L0:
0026++ 07C4 32          	mov bl, [d]	; save load right-side char into BL
0027++ 07C5 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 07C6 3E          	mov [d], al	; store left char into right side
0029++ 07C7 1B          	mov al, bl
0030++ 07C8 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 07C9 7E          	dec c
0032++ 07CA 7F          	dec d
0033++ 07CB C2 00 00    	cmp c, 0
0034++ 07CE C7 C4 07    	jne strrev_L0
0035++ 07D1             strrev_end:
0036++ 07D1 4C          	popa
0037++ 07D2 09          	ret
0038++ 07D3             	
0039++ 07D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 07D3             ; strchr
0041++ 07D3             ; search string in D for char in AL
0042++ 07D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 07D3             strchr:
0044++ 07D3             strchr_L0:
0045++ 07D3 32          	mov bl, [d]
0046++ 07D4 C1 00       	cmp bl, 0
0047++ 07D6 C6 E1 07    	je strchr_end
0048++ 07D9 BA          	cmp al, bl
0049++ 07DA C6 E1 07    	je strchr_end
0050++ 07DD 79          	inc d
0051++ 07DE 0A D3 07    	jmp strchr_L0
0052++ 07E1             strchr_end:
0053++ 07E1 1B          	mov al, bl
0054++ 07E2 09          	ret
0055++ 07E3             
0056++ 07E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 07E3             ; strstr
0058++ 07E3             ; find sub-string
0059++ 07E3             ; str1 in SI
0060++ 07E3             ; str2 in DI
0061++ 07E3             ; SI points to end of source string
0062++ 07E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 07E3             strstr:
0064++ 07E3 DB          	push al
0065++ 07E4 DA          	push d
0066++ 07E5 E3          	push di
0067++ 07E6             strstr_loop:
0068++ 07E6 F3          	cmpsb					; compare a byte of the strings
0069++ 07E7 C7 F2 07    	jne strstr_ret
0070++ 07EA FC 00 00    	lea d, [di + 0]
0071++ 07ED BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 07EF C7 E6 07    	jne strstr_loop				; equal chars but not at end
0073++ 07F2             strstr_ret:
0074++ 07F2 F0          	pop di
0075++ 07F3 E7          	pop d
0076++ 07F4 E8          	pop al
0077++ 07F5 09          	ret
0078++ 07F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 07F6             ; length of null terminated string
0080++ 07F6             ; result in C
0081++ 07F6             ; pointer in D
0082++ 07F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 07F6             strlen:
0084++ 07F6 DA          	push d
0085++ 07F7 38 00 00    	mov c, 0
0086++ 07FA             strlen_L1:
0087++ 07FA BD 00       	cmp byte [d], 0
0088++ 07FC C6 04 08    	je strlen_ret
0089++ 07FF 79          	inc d
0090++ 0800 78          	inc c
0091++ 0801 0A FA 07    	jmp strlen_L1
0092++ 0804             strlen_ret:
0093++ 0804 E7          	pop d
0094++ 0805 09          	ret
0095++ 0806             
0096++ 0806             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0806             ; STRCMP
0098++ 0806             ; compare two strings
0099++ 0806             ; str1 in SI
0100++ 0806             ; str2 in DI
0101++ 0806             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0806             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0806             strcmp:
0104++ 0806 DB          	push al
0105++ 0807 DA          	push d
0106++ 0808 E3          	push di
0107++ 0809 E2          	push si
0108++ 080A             strcmp_loop:
0109++ 080A F3          	cmpsb					; compare a byte of the strings
0110++ 080B C7 16 08    	jne strcmp_ret
0111++ 080E FB FF FF    	lea d, [si +- 1]
0112++ 0811 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0813 C7 0A 08    	jne strcmp_loop				; equal chars but not at end
0114++ 0816             strcmp_ret:
0115++ 0816 EF          	pop si
0116++ 0817 F0          	pop di
0117++ 0818 E7          	pop d
0118++ 0819 E8          	pop al
0119++ 081A 09          	ret
0120++ 081B             
0121++ 081B             
0122++ 081B             ; STRCPY
0123++ 081B             ; copy null terminated string from SI to DI
0124++ 081B             ; source in SI
0125++ 081B             ; destination in DI
0126++ 081B             strcpy:
0127++ 081B E2          	push si
0128++ 081C E3          	push di
0129++ 081D DB          	push al
0130++ 081E             strcpy_L1:
0131++ 081E F6          	lodsb
0132++ 081F F7          	stosb
0133++ 0820 B9 00       	cmp al, 0
0134++ 0822 C7 1E 08    	jne strcpy_L1
0135++ 0825             strcpy_end:
0136++ 0825 E8          	pop al
0137++ 0826 F0          	pop di
0138++ 0827 EF          	pop si
0139++ 0828 09          	ret
0140++ 0829             
0141++ 0829             ; STRCAT
0142++ 0829             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0829             ; source in SI
0144++ 0829             ; destination in DI
0145++ 0829             strcat:
0146++ 0829 E2          	push si
0147++ 082A E3          	push di
0148++ 082B D7          	push a
0149++ 082C DA          	push d
0150++ 082D 50          	mov a, di
0151++ 082E 3C          	mov d, a
0152++ 082F             strcat_goto_end_L1:
0153++ 082F BD 00       	cmp byte[d], 0
0154++ 0831 C6 38 08    	je strcat_start
0155++ 0834 79          	inc d
0156++ 0835 0A 2F 08    	jmp strcat_goto_end_L1
0157++ 0838             strcat_start:
0158++ 0838 FD 50       	mov di, d
0159++ 083A             strcat_L1:
0160++ 083A F6          	lodsb
0161++ 083B F7          	stosb
0162++ 083C B9 00       	cmp al, 0
0163++ 083E C7 3A 08    	jne strcat_L1
0164++ 0841             strcat_end:
0165++ 0841 E7          	pop d
0166++ 0842 E4          	pop a
0167++ 0843 F0          	pop di
0168++ 0844 EF          	pop si
0169++ 0845 09          	ret
0005+  0846             
0006+  0846 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  084A 34 35 36 37 
0006+  084E 38 39 41 42 
0006+  0852 43 44 45 46 
0007+  0856             
0008+  0856 01 00       table_power:.dw 1
0009+  0858 0A 00       			.dw 10
0010+  085A 64 00       			.dw 100
0011+  085C E8 03       			.dw 1000
0012+  085E 10 27       			.dw 10000
0013+  0860             
0014+  0860             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  0860             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  0860             ; ASCII in BL
0017+  0860             ; result in AL
0018+  0860             ; ascii for F = 0100 0110
0019+  0860             ; ascii for 9 = 0011 1001
0020+  0860             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  0860             hex_ascii_encode:
0022+  0860 1B          	mov al, bl
0023+  0861 93 40       	test al, $40				; test if letter or number
0024+  0863 C7 69 08    	jnz hex_letter
0025+  0866 87 0F       	and al, $0F				; get number
0026+  0868 09          	ret
0027+  0869             hex_letter:
0028+  0869 87 0F       	and al, $0F				; get letter
0029+  086B 6A 09       	add al, 9
0030+  086D 09          	ret
0031+  086E             
0032+  086E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  086E             ; ATOI
0034+  086E             ; 2 letter hex string in B
0035+  086E             ; 8bit integer returned in AL
0036+  086E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  086E             atoi:
0038+  086E D8          	push b
0039+  086F 07 60 08    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  0872 30          	mov bl, bh
0041+  0873 DB          	push al					; save a
0042+  0874 07 60 08    	call hex_ascii_encode
0043+  0877 EA          	pop bl	
0044+  0878 FD 9E 04    	shl al, 4
0045+  087B 8C          	or al, bl
0046+  087C E5          	pop b
0047+  087D 09          	ret	
0048+  087E             
0049+  087E             
0050+  087E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  087E             ; printf
0052+  087E             ; no need for explanations!
0053+  087E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  087E             printf:
0055+  087E 09          	ret
0056+  087F             
0057+  087F             
0058+  087F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  087F             ; scanf
0060+  087F             ; no need for explanations!
0061+  087F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  087F             scanf:
0063+  087F 09          	ret
0064+  0880             
0065+  0880             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0880             ; ITOA
0067+  0880             ; 8bit value in BL
0068+  0880             ; 2 byte ASCII result in A
0069+  0880             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  0880             itoa:
0071+  0880 DA          	push d
0072+  0881 D8          	push b
0073+  0882 A7 00       	mov bh, 0
0074+  0884 FD A4 04    	shr bl, 4	
0075+  0887 74          	mov d, b
0076+  0888 1F 46 08    	mov al, [d + s_hex_digits]
0077+  088B 23          	mov ah, al
0078+  088C             	
0079+  088C E5          	pop b
0080+  088D D8          	push b
0081+  088E A7 00       	mov bh, 0
0082+  0890 FD 87 0F    	and bl, $0F
0083+  0893 74          	mov d, b
0084+  0894 1F 46 08    	mov al, [d + s_hex_digits]
0085+  0897 E5          	pop b
0086+  0898 E7          	pop d
0087+  0899 09          	ret
0088+  089A             
0089+  089A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  089A             ; HEX STRING TO BINARY
0091+  089A             ; di = destination address
0092+  089A             ; si = source
0093+  089A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  089A             hex_to_int:
0095+  089A             hex_to_int_L1:
0096+  089A F6          	lodsb					; load from [SI] to AL
0097+  089B B9 00       	cmp al, 0				; check if ASCII 0
0098+  089D C6 AA 08    	jz hex_to_int_ret
0099+  08A0 36          	mov bh, al
0100+  08A1 F6          	lodsb
0101+  08A2 2F          	mov bl, al
0102+  08A3 07 6E 08    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  08A6 F7          	stosb					; store AL to [DI]
0104+  08A7 0A 9A 08    	jmp hex_to_int_L1
0105+  08AA             hex_to_int_ret:
0106+  08AA 09          	ret		
0107+  08AB             
0108+  08AB             
0109+  08AB             
0110+  08AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  08AB             ; GETCHAR
0112+  08AB             ; char in ah
0113+  08AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  08AB             getchar:
0115+  08AB DB          	push al
0116+  08AC             getchar_retry:
0117+  08AC FD 0C       	sti
0118+  08AE 19 01       	mov al, 1
0119+  08B0 05 03       	syscall sys_io			; receive in AH
0120+  08B2 B9 00       	cmp al, 0			; check if any char was receive
0121+  08B4 C6 AC 08    	je getchar_retry
0122+  08B7 E8          	pop al
0123+  08B8 09          	ret
0124+  08B9             
0125+  08B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  08B9             ; PUTCHAR
0127+  08B9             ; char in ah
0128+  08B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  08B9             putchar:
0130+  08B9 D7          	push a
0131+  08BA 19 00       	mov al, 0
0132+  08BC 05 03       	syscall sys_io			; char in AH
0133+  08BE E4          	pop a
0134+  08BF 09          	ret
0135+  08C0             
0136+  08C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  08C0             ;; INPUT A STRING
0138+  08C0             ;; terminates with null
0139+  08C0             ;; pointer in D
0140+  08C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  08C0             gets:
0142+  08C0 D7          	push a
0143+  08C1 DA          	push d
0144+  08C2             gets_loop:
0145+  08C2 FD 0C       	sti
0146+  08C4 19 01       	mov al, 1
0147+  08C6 05 03       	syscall sys_io			; receive in AH
0148+  08C8 B9 00       	cmp al, 0				; check error code (AL)
0149+  08CA C6 C2 08    	je gets_loop			; if no char received, retry
0150+  08CD             
0151+  08CD 76 1B       	cmp ah, 27
0152+  08CF C6 EB 08    	je gets_telnet_escape
0153+  08D2 76 0A       	cmp ah, $0A				; LF
0154+  08D4 C6 44 09    	je gets_end
0155+  08D7 76 5C       	cmp ah, $5C				; '\\'
0156+  08D9 C6 1B 09    	je gets_escape
0157+  08DC             	
0158+  08DC 76 08       	cmp ah, $08			; check for backspace
0159+  08DE C6 E7 08    	je gets_backspace
0160+  08E1             
0161+  08E1 1A          	mov al, ah
0162+  08E2 3E          	mov [d], al
0163+  08E3 79          	inc d
0164+  08E4 0A C2 08    	jmp gets_loop
0165+  08E7             gets_backspace:
0166+  08E7 7F          	dec d
0167+  08E8 0A C2 08    	jmp gets_loop
0168+  08EB             gets_telnet_escape:
0169+  08EB FD 0C       	sti
0170+  08ED 19 01       	mov al, 1
0171+  08EF 05 03       	syscall sys_io				; receive in AH without echo
0172+  08F1 B9 00       	cmp al, 0					; check error code (AL)
0173+  08F3 C6 EB 08    	je gets_telnet_escape		; if no char received, retry
0174+  08F6 76 5B       	cmp ah, '['
0175+  08F8 C7 C2 08    	jne gets_loop
0176+  08FB             gets_telnet_escape_phase2:
0177+  08FB FD 0C       	sti
0178+  08FD 19 01       	mov al, 1
0179+  08FF 05 03       	syscall sys_io					; receive in AH without echo
0180+  0901 B9 00       	cmp al, 0						; check error code (AL)
0181+  0903 C6 FB 08    	je gets_telnet_escape_phase2	; if no char received, retry
0182+  0906 76 44       	cmp ah, 'D'
0183+  0908 C6 13 09    	je gets_left_arrow
0184+  090B 76 43       	cmp ah, 'C'
0185+  090D C6 17 09    	je gets_right_arrow
0186+  0910 0A C2 08    	jmp gets_loop
0187+  0913             gets_left_arrow:
0188+  0913 7F          	dec d
0189+  0914 0A C2 08    	jmp gets_loop
0190+  0917             gets_right_arrow:
0191+  0917 79          	inc d
0192+  0918 0A C2 08    	jmp gets_loop
0193+  091B             gets_escape:
0194+  091B FD 0C       	sti
0195+  091D 19 01       	mov al, 1
0196+  091F 05 03       	syscall sys_io			; receive in AH
0197+  0921 B9 00       	cmp al, 0				; check error code (AL)
0198+  0923 C6 1B 09    	je gets_escape			; if no char received, retry
0199+  0926 76 6E       	cmp ah, 'n'
0200+  0928 C6 36 09    	je gets_LF
0201+  092B 76 72       	cmp ah, 'r'
0202+  092D C6 3D 09    	je gets_CR
0203+  0930 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0204+  0931 3E          	mov [d], al
0205+  0932 79          	inc d
0206+  0933 0A C2 08    	jmp gets_loop
0207+  0936             gets_LF:
0208+  0936 19 0A       	mov al, $0A
0209+  0938 3E          	mov [d], al
0210+  0939 79          	inc d
0211+  093A 0A C2 08    	jmp gets_loop
0212+  093D             gets_CR:
0213+  093D 19 0D       	mov al, $0D
0214+  093F 3E          	mov [d], al
0215+  0940 79          	inc d
0216+  0941 0A C2 08    	jmp gets_loop
0217+  0944             gets_end:
0218+  0944 19 00       	mov al, 0
0219+  0946 3E          	mov [d], al				; terminate string
0220+  0947 E7          	pop d
0221+  0948 E4          	pop a
0222+  0949 09          	ret
0223+  094A             
0224+  094A             
0225+  094A             
0226+  094A             
0227+  094A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0228+  094A             ;; INPUT TEXT
0229+  094A             ;; terminated with CTRL+D
0230+  094A             ;; pointer in D
0231+  094A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0232+  094A             gettxt:
0233+  094A D7          	push a
0234+  094B DA          	push d
0235+  094C             gettxt_loop:
0236+  094C 19 01       	mov al, 1
0237+  094E 05 03       	syscall sys_io			; receive in AH
0238+  0950 B9 00       	cmp al, 0				; check error code (AL)
0239+  0952 C6 4C 09    	je gettxt_loop		; if no char received, retry
0240+  0955 76 04       	cmp ah, 4			; EOT
0241+  0957 C6 95 09    	je gettxt_end
0242+  095A 76 08       	cmp ah, $08			; check for backspace
0243+  095C C6 91 09    	je gettxt_backspace
0244+  095F 76 5C       	cmp ah, $5C				; '\\'
0245+  0961 C6 6A 09    	je gettxt_escape
0246+  0964 1A          	mov al, ah
0247+  0965 3E          	mov [d], al
0248+  0966 79          	inc d
0249+  0967 0A 4C 09    	jmp gettxt_loop
0250+  096A             gettxt_escape:
0251+  096A 19 01       	mov al, 1
0252+  096C 05 03       	syscall sys_io			; receive in AH
0253+  096E B9 00       	cmp al, 0				; check error code (AL)
0254+  0970 C6 6A 09    	je gettxt_escape		; if no char received, retry
0255+  0973 76 6E       	cmp ah, 'n'
0256+  0975 C6 83 09    	je gettxt_LF
0257+  0978 76 72       	cmp ah, 'r'
0258+  097A C6 8A 09    	je gettxt_CR
0259+  097D 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0260+  097E 3E          	mov [d], al
0261+  097F 79          	inc d
0262+  0980 0A 4C 09    	jmp gettxt_loop
0263+  0983             gettxt_LF:
0264+  0983 19 0A       	mov al, $0A
0265+  0985 3E          	mov [d], al
0266+  0986 79          	inc d
0267+  0987 0A 4C 09    	jmp gettxt_loop
0268+  098A             gettxt_CR:
0269+  098A 19 0D       	mov al, $0D
0270+  098C 3E          	mov [d], al
0271+  098D 79          	inc d
0272+  098E 0A 4C 09    	jmp gettxt_loop
0273+  0991             gettxt_backspace:
0274+  0991 7F          	dec d
0275+  0992 0A 4C 09    	jmp gettxt_loop
0276+  0995             gettxt_end:
0277+  0995 19 00       	mov al, 0
0278+  0997 3E          	mov [d], al				; terminate string
0279+  0998 E7          	pop d
0280+  0999 E4          	pop a
0281+  099A 09          	ret
0282+  099B             
0283+  099B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0284+  099B             ; PRINT NEW LINE
0285+  099B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  099B             printnl:
0287+  099B D7          	push a
0288+  099C 10 00 0A    	mov a, $0A00
0289+  099F 05 03       	syscall sys_io
0290+  09A1 10 00 0D    	mov a, $0D00
0291+  09A4 05 03       	syscall sys_io
0292+  09A6 E4          	pop a
0293+  09A7 09          	ret
0294+  09A8             
0295+  09A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0296+  09A8             ; strtoint
0297+  09A8             ; 4 digit hex string number in d
0298+  09A8             ; integer returned in A
0299+  09A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0300+  09A8             strtointx:
0301+  09A8 D8          	push b
0302+  09A9 32          	mov bl, [d]
0303+  09AA 37          	mov bh, bl
0304+  09AB 33 01 00    	mov bl, [d + 1]
0305+  09AE 07 6E 08    	call atoi				; convert to int in AL
0306+  09B1 23          	mov ah, al				; move to AH
0307+  09B2 33 02 00    	mov bl, [d + 2]
0308+  09B5 37          	mov bh, bl
0309+  09B6 33 03 00    	mov bl, [d + 3]
0310+  09B9 07 6E 08    	call atoi				; convert to int in AL
0311+  09BC E5          	pop b
0312+  09BD 09          	ret
0313+  09BE             
0314+  09BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0315+  09BE             ; strtoint
0316+  09BE             ; 5 digit base10 string number in d
0317+  09BE             ; integer returned in A
0318+  09BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0319+  09BE             strtoint:
0320+  09BE E2          	push si
0321+  09BF D8          	push b
0322+  09C0 D9          	push c
0323+  09C1 DA          	push d
0324+  09C2 07 F6 07    	call strlen			; get string length in C
0325+  09C5 7E          	dec c
0326+  09C6 FD 4E       	mov si, d
0327+  09C8 12          	mov a, c
0328+  09C9 FD 99       	shl a
0329+  09CB 3B 56 08    	mov d, table_power
0330+  09CE 59          	add d, a
0331+  09CF 38 00 00    	mov c, 0
0332+  09D2             strtoint_L0:
0333+  09D2 F6          	lodsb			; load ASCII to al
0334+  09D3 B9 00       	cmp al, 0
0335+  09D5 C6 E8 09    	je strtoint_end
0336+  09D8 6F 30       	sub al, $30		; make into integer
0337+  09DA 22 00       	mov ah, 0
0338+  09DC 2A          	mov b, [d]
0339+  09DD AC          	mul a, b			; result in B since it fits in 16bits
0340+  09DE 11          	mov a, b
0341+  09DF 28          	mov b, c
0342+  09E0 54          	add a, b
0343+  09E1 39          	mov c, a
0344+  09E2 63 02 00    	sub d, 2
0345+  09E5 0A D2 09    	jmp strtoint_L0
0346+  09E8             strtoint_end:
0347+  09E8 12          	mov a, c
0348+  09E9 E7          	pop d
0349+  09EA E6          	pop c
0350+  09EB E5          	pop b
0351+  09EC EF          	pop si
0352+  09ED 09          	ret
0353+  09EE             
0354+  09EE             
0355+  09EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  09EE             ; PRINT NULL TERMINATED STRING
0357+  09EE             ; pointer in D
0358+  09EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  09EE             puts:
0360+  09EE D7          	push a
0361+  09EF DA          	push d
0362+  09F0             puts_L1:
0363+  09F0 1E          	mov al, [d]
0364+  09F1 B9 00       	cmp al, 0
0365+  09F3 C6 FF 09    	jz puts_END
0366+  09F6 23          	mov ah, al
0367+  09F7 19 00       	mov al, 0
0368+  09F9 05 03       	syscall sys_io
0369+  09FB 79          	inc d
0370+  09FC 0A F0 09    	jmp puts_L1
0371+  09FF             puts_END:
0372+  09FF E7          	pop d
0373+  0A00 E4          	pop a
0374+  0A01 09          	ret
0375+  0A02             
0376+  0A02             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0377+  0A02             ; PRINT N SIZE STRING
0378+  0A02             ; pointer in D
0379+  0A02             ; size in C
0380+  0A02             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0381+  0A02             putsn:
0382+  0A02 DB          	push al
0383+  0A03 DA          	push d
0384+  0A04 D9          	push c
0385+  0A05             putsn_L0:
0386+  0A05 1E          	mov al, [d]
0387+  0A06 23          	mov ah, al
0388+  0A07 19 00       	mov al, 0
0389+  0A09 05 03       	syscall sys_io
0390+  0A0B 79          	inc d
0391+  0A0C 7E          	dec c	
0392+  0A0D C2 00 00    	cmp c, 0
0393+  0A10 C7 05 0A    	jne putsn_L0
0394+  0A13             putsn_end:
0395+  0A13 E6          	pop c
0396+  0A14 E7          	pop d
0397+  0A15 E8          	pop al
0398+  0A16 09          	ret
0399+  0A17             
0400+  0A17             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0401+  0A17             ; print 16bit decimal number
0402+  0A17             ; input number in A
0403+  0A17             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0A17             print_u16d:
0405+  0A17 D7          	push a
0406+  0A18 D8          	push b
0407+  0A19 26 10 27    	mov b, 10000
0408+  0A1C AE          	div a, b			; get 10000 coeff.
0409+  0A1D 07 43 0A    	call print_zero_or_space
0410+  0A20 11          	mov a, b
0411+  0A21 26 E8 03    	mov b, 1000
0412+  0A24 AE          	div a, b			; get 10000 coeff.
0413+  0A25 07 43 0A    	call print_zero_or_space
0414+  0A28 11          	mov a, b
0415+  0A29 26 64 00    	mov b, 100
0416+  0A2C AE          	div a, b
0417+  0A2D 07 43 0A    	call print_zero_or_space
0418+  0A30 11          	mov a, b
0419+  0A31 26 0A 00    	mov b, 10
0420+  0A34 AE          	div a, b
0421+  0A35 07 43 0A    	call print_zero_or_space
0422+  0A38 11          	mov a, b
0423+  0A39 6A 30       	add al, $30
0424+  0A3B 23          	mov ah, al
0425+  0A3C 19 00       	mov al, 0
0426+  0A3E 05 03       	syscall sys_io	; print coeff
0427+  0A40 E5          	pop b
0428+  0A41 E4          	pop a
0429+  0A42 09          	ret
0430+  0A43             
0431+  0A43             
0432+  0A43             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  0A43             ; if A == 0, print space
0434+  0A43             ; else print A
0435+  0A43             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0A43             print_zero_or_space:
0437+  0A43             	; cmp a, 0
0438+  0A43             	; jne print_number
0439+  0A43             	; mov ah, $20
0440+  0A43             	; call putchar
0441+  0A43             	; ret
0442+  0A43             print_number:
0443+  0A43 6A 30       	add al, $30
0444+  0A45 23          	mov ah, al
0445+  0A46 07 B9 08    	call putchar
0446+  0A49 09          	ret
0447+  0A4A             
0448+  0A4A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0A4A             ; PRINT 16BIT HEX INTEGER
0450+  0A4A             ; integer value in reg B
0451+  0A4A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0452+  0A4A             print_u16x:
0453+  0A4A D7          	push a
0454+  0A4B D8          	push b
0455+  0A4C DD          	push bl
0456+  0A4D 30          	mov bl, bh
0457+  0A4E 07 80 08    	call itoa				; convert bh to char in A
0458+  0A51 2F          	mov bl, al				; save al
0459+  0A52 19 00       	mov al, 0
0460+  0A54 05 03       	syscall sys_io				; display AH
0461+  0A56 24          	mov ah, bl				; retrieve al
0462+  0A57 19 00       	mov al, 0
0463+  0A59 05 03       	syscall sys_io				; display AL
0464+  0A5B             
0465+  0A5B EA          	pop bl
0466+  0A5C 07 80 08    	call itoa				; convert bh to char in A
0467+  0A5F 2F          	mov bl, al				; save al
0468+  0A60 19 00       	mov al, 0
0469+  0A62 05 03       	syscall sys_io				; display AH
0470+  0A64 24          	mov ah, bl				; retrieve al
0471+  0A65 19 00       	mov al, 0
0472+  0A67 05 03       	syscall sys_io				; display AL
0473+  0A69             
0474+  0A69 E5          	pop b
0475+  0A6A E4          	pop a
0476+  0A6B 09          	ret
0477+  0A6C             
0478+  0A6C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0A6C             ; INPUT 16BIT HEX INTEGER
0480+  0A6C             ; read 16bit integer into A
0481+  0A6C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0482+  0A6C             scan_u16x:
0483+  0A6C F8 10 00    	enter 16
0484+  0A6F D8          	push b
0485+  0A70 DA          	push d
0486+  0A71             
0487+  0A71 FA F1 FF    	lea d, [bp + -15]
0488+  0A74 07 C0 08    	call gets				; get number
0489+  0A77             
0490+  0A77 32          	mov bl, [d]
0491+  0A78 37          	mov bh, bl
0492+  0A79 33 01 00    	mov bl, [d + 1]
0493+  0A7C 07 6E 08    	call atoi				; convert to int in AL
0494+  0A7F 23          	mov ah, al				; move to AH
0495+  0A80             
0496+  0A80 33 02 00    	mov bl, [d + 2]
0497+  0A83 37          	mov bh, bl
0498+  0A84 33 03 00    	mov bl, [d + 3]
0499+  0A87 07 6E 08    	call atoi				; convert to int in AL
0500+  0A8A             
0501+  0A8A E7          	pop d
0502+  0A8B E5          	pop b
0503+  0A8C F9          	leave
0504+  0A8D 09          	ret
0505+  0A8E             
0506+  0A8E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0A8E             ; PRINT 8bit HEX INTEGER
0508+  0A8E             ; integer value in reg bl
0509+  0A8E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0510+  0A8E             print_u8x:
0511+  0A8E D7          	push a
0512+  0A8F DD          	push bl
0513+  0A90             
0514+  0A90 07 80 08    	call itoa				; convert bl to char in A
0515+  0A93 2F          	mov bl, al				; save al
0516+  0A94 19 00       	mov al, 0
0517+  0A96 05 03       	syscall sys_io				; display AH
0518+  0A98 24          	mov ah, bl				; retrieve al
0519+  0A99 19 00       	mov al, 0
0520+  0A9B 05 03       	syscall sys_io				; display AL
0521+  0A9D             
0522+  0A9D EA          	pop bl
0523+  0A9E E4          	pop a
0524+  0A9F 09          	ret
0525+  0AA0             
0526+  0AA0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0AA0             ; print 8bit decimal unsigned number
0528+  0AA0             ; input number in AL
0529+  0AA0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0530+  0AA0             print_u8d:
0531+  0AA0 D7          	push a
0532+  0AA1 D8          	push b
0533+  0AA2             
0534+  0AA2 22 00       	mov ah, 0
0535+  0AA4 26 64 00    	mov b, 100
0536+  0AA7 AE          	div a, b
0537+  0AA8 D8          	push b			; save remainder
0538+  0AA9 B9 00       	cmp al, 0
0539+  0AAB C6 B5 0A    	je skip100
0540+  0AAE 6A 30       	add al, $30
0541+  0AB0 23          	mov ah, al
0542+  0AB1 19 00       	mov al, 0
0543+  0AB3 05 03       	syscall sys_io	; print coeff
0544+  0AB5             skip100:
0545+  0AB5 E4          	pop a
0546+  0AB6 22 00       	mov ah, 0
0547+  0AB8 26 0A 00    	mov b, 10
0548+  0ABB AE          	div a, b
0549+  0ABC D8          	push b			; save remainder
0550+  0ABD B9 00       	cmp al, 0
0551+  0ABF C6 C9 0A    	je skip10
0552+  0AC2 6A 30       	add al, $30
0553+  0AC4 23          	mov ah, al
0554+  0AC5 19 00       	mov al, 0
0555+  0AC7 05 03       	syscall sys_io	; print coeff
0556+  0AC9             skip10:
0557+  0AC9 E4          	pop a
0558+  0ACA 1B          	mov al, bl
0559+  0ACB 6A 30       	add al, $30
0560+  0ACD 23          	mov ah, al
0561+  0ACE 19 00       	mov al, 0
0562+  0AD0 05 03       	syscall sys_io	; print coeff
0563+  0AD2 E5          	pop b
0564+  0AD3 E4          	pop a
0565+  0AD4 09          	ret
0566+  0AD5             
0567+  0AD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0AD5             ; INPUT 8BIT HEX INTEGER
0569+  0AD5             ; read 8bit integer into AL
0570+  0AD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  0AD5             scan_u8x:
0572+  0AD5 F8 04 00    	enter 4
0573+  0AD8 D8          	push b
0574+  0AD9 DA          	push d
0575+  0ADA             
0576+  0ADA FA FD FF    	lea d, [bp + -3]
0577+  0ADD 07 C0 08    	call gets				; get number
0578+  0AE0             
0579+  0AE0 32          	mov bl, [d]
0580+  0AE1 37          	mov bh, bl
0581+  0AE2 33 01 00    	mov bl, [d + 1]
0582+  0AE5 07 6E 08    	call atoi				; convert to int in AL
0583+  0AE8             
0584+  0AE8 E7          	pop d
0585+  0AE9 E5          	pop b
0586+  0AEA F9          	leave
0587+  0AEB 09          	ret
0588+  0AEC             
0589+  0AEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0590+  0AEC             ; input decimal number
0591+  0AEC             ; result in A
0592+  0AEC             ; 655'\0'
0593+  0AEC             ; low--------high
0594+  0AEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0595+  0AEC             scan_u16d:
0596+  0AEC F8 08 00    	enter 8
0597+  0AEF E2          	push si
0598+  0AF0 D8          	push b
0599+  0AF1 D9          	push c
0600+  0AF2 DA          	push d
0601+  0AF3 FA F9 FF    	lea d, [bp +- 7]
0602+  0AF6 07 C0 08    	call gets
0603+  0AF9 07 F6 07    	call strlen			; get string length in C
0604+  0AFC 7E          	dec c
0605+  0AFD FD 4E       	mov si, d
0606+  0AFF 12          	mov a, c
0607+  0B00 FD 99       	shl a
0608+  0B02 3B 56 08    	mov d, table_power
0609+  0B05 59          	add d, a
0610+  0B06 38 00 00    	mov c, 0
0611+  0B09             mul_loop:
0612+  0B09 F6          	lodsb			; load ASCII to al
0613+  0B0A B9 00       	cmp al, 0
0614+  0B0C C6 1F 0B    	je mul_exit
0615+  0B0F 6F 30       	sub al, $30		; make into integer
0616+  0B11 22 00       	mov ah, 0
0617+  0B13 2A          	mov b, [d]
0618+  0B14 AC          	mul a, b			; result in B since it fits in 16bits
0619+  0B15 11          	mov a, b
0620+  0B16 28          	mov b, c
0621+  0B17 54          	add a, b
0622+  0B18 39          	mov c, a
0623+  0B19 63 02 00    	sub d, 2
0624+  0B1C 0A 09 0B    	jmp mul_loop
0625+  0B1F             mul_exit:
0626+  0B1F 12          	mov a, c
0627+  0B20 E7          	pop d
0628+  0B21 E6          	pop c
0629+  0B22 E5          	pop b
0630+  0B23 EF          	pop si
0631+  0B24 F9          	leave
0632+  0B25 09          	ret
0025   0B26             .include "ctype.asm"
0001+  0B26             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0B26             ; ctype.s
0003+  0B26             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0B26             
0005+  0B26             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0B26             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0B26             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0B26             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0B26             ;; characters are supported.
0010+  0B26             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0B26             ;; isalnum 
0012+  0B26             ;; isalpha 
0013+  0B26             ;; islower 
0014+  0B26             ;; isupper 
0015+  0B26             ;; isdigit 
0016+  0B26             ;; isxdigit
0017+  0B26             ;; iscntrl 
0018+  0B26             ;; isgraph 
0019+  0B26             ;; isspace 
0020+  0B26             ;; isblank 
0021+  0B26             ;; isprint 
0022+  0B26             ;; ispunct 
0023+  0B26             ;; tolower 
0024+  0B26             ;; toupper
0025+  0B26             
0026+  0B26             
0027+  0B26             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0B26             ;; IS ALPHANUMERIC
0029+  0B26             ;; sets ZF according with result
0030+  0B26             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0B26             isalnum:
0032+  0B26 07 43 0B    	call isalpha
0033+  0B29 C6 2F 0B    	je isalnum_exit
0034+  0B2C 07 30 0B    	call isdigit
0035+  0B2F             isalnum_exit:
0036+  0B2F 09          	ret	
0037+  0B30             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0B30             ;; IS DIGIT
0039+  0B30             ;; sets ZF according with result
0040+  0B30             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0B30             isdigit:
0042+  0B30 DB          	push al
0043+  0B31 B9 30       	cmp al, '0'
0044+  0B33 C8 3F 0B    	jlu isdigit_false
0045+  0B36 B9 39       	cmp al, '9'
0046+  0B38 D1 3F 0B    	jgu isdigit_false
0047+  0B3B 87 00       	and al, 0	; set ZF
0048+  0B3D E8          	pop al
0049+  0B3E 09          	ret
0050+  0B3F             isdigit_false:
0051+  0B3F 8B 01       	or al, 1	; clear ZF
0052+  0B41 E8          	pop al
0053+  0B42 09          	ret	
0054+  0B43             	
0055+  0B43             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0B43             ;; IS ALPHA
0057+  0B43             ;; sets ZF according with result
0058+  0B43             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0B43             isalpha:
0060+  0B43 DB          	push al
0061+  0B44 B9 5F       	cmp al, '_'
0062+  0B46 C6 66 0B    	je isalpha_true
0063+  0B49 B9 2E       	cmp al, '.'
0064+  0B4B C6 66 0B    	je isalpha_true
0065+  0B4E B9 41       	cmp al, 'A'
0066+  0B50 C8 62 0B    	jlu isalpha_false
0067+  0B53 B9 7A       	cmp al, 'z'
0068+  0B55 D1 62 0B    	jgu isalpha_false
0069+  0B58 B9 5A       	cmp al, 'Z'
0070+  0B5A D0 66 0B    	jleu isalpha_true
0071+  0B5D B9 61       	cmp al, 'a'
0072+  0B5F C9 66 0B    	jgeu isalpha_true
0073+  0B62             isalpha_false:
0074+  0B62 8B 01       	or al, 1	; clear ZF
0075+  0B64 E8          	pop al
0076+  0B65 09          	ret
0077+  0B66             isalpha_true:
0078+  0B66 87 00       	and al, 0	; set ZF
0079+  0B68 E8          	pop al
0080+  0B69 09          	ret
0081+  0B6A             
0082+  0B6A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B6A             ;; IS PATH-ALPHA
0084+  0B6A             ;; sets ZF according with result
0085+  0B6A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B6A             ispath:
0087+  0B6A DB          	push al
0088+  0B6B 07 30 0B    	call isdigit
0089+  0B6E C6 98 0B    	je ispath_true
0090+  0B71 B9 5F       	cmp al, '_'
0091+  0B73 C6 98 0B    	je ispath_true
0092+  0B76 B9 2F       	cmp al, '/'
0093+  0B78 C6 98 0B    	je ispath_true
0094+  0B7B B9 2E       	cmp al, '.'
0095+  0B7D C6 98 0B    	je ispath_true
0096+  0B80 B9 41       	cmp al, 'A'
0097+  0B82 C8 94 0B    	jlu ispath_false
0098+  0B85 B9 7A       	cmp al, 'z'
0099+  0B87 D1 94 0B    	jgu ispath_false
0100+  0B8A B9 5A       	cmp al, 'Z'
0101+  0B8C D0 98 0B    	jleu ispath_true
0102+  0B8F B9 61       	cmp al, 'a'
0103+  0B91 C9 98 0B    	jgeu ispath_true
0104+  0B94             ispath_false:
0105+  0B94 8B 01       	or al, 1	; clear ZF
0106+  0B96 E8          	pop al
0107+  0B97 09          	ret
0108+  0B98             ispath_true:
0109+  0B98 87 00       	and al, 0	; set ZF
0110+  0B9A E8          	pop al
0111+  0B9B 09          	ret
0112+  0B9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B9C             ;; IS SPACE
0114+  0B9C             ;; sets ZF according with result
0115+  0B9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B9C             isspace:
0117+  0B9C B9 20       	cmp al, $20		; ' '
0118+  0B9E C6 B2 0B    	je isspace_exit
0119+  0BA1 B9 09       	cmp al, $09		; '\t'
0120+  0BA3 C6 B2 0B    	je isspace_exit
0121+  0BA6 B9 0A       	cmp al, $0A		; '\n'
0122+  0BA8 C6 B2 0B    	je isspace_exit
0123+  0BAB B9 0D       	cmp al, $0D		; '\r'
0124+  0BAD C6 B2 0B    	je isspace_exit
0125+  0BB0 B9 0B       	cmp al, $0B		; '\v'
0126+  0BB2             isspace_exit:
0127+  0BB2 09          	ret	
0128+  0BB3             
0129+  0BB3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0BB3             ; TO LOWER
0131+  0BB3             ; input in AL
0132+  0BB3             ; output in AL
0133+  0BB3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0BB3             to_lower:
0135+  0BB3 B9 5A       	cmp al, 'Z'
0136+  0BB5 D1 BA 0B    	jgu to_lower_ret
0137+  0BB8 6A 20       	add al, $20				; convert to lower case
0138+  0BBA             to_lower_ret:
0139+  0BBA 09          	ret
0140+  0BBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0BBB             ; TO UPPER
0142+  0BBB             ; input in AL
0143+  0BBB             ; output in AL
0144+  0BBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0BBB             to_upper:
0146+  0BBB B9 61       	cmp al, 'a'
0147+  0BBD C8 C2 0B    	jlu to_upper_ret
0148+  0BC0 6F 20       	sub al, $20			; convert to upper case
0149+  0BC2             to_upper_ret:
0150+  0BC2 09          	ret
0151+  0BC3             
0026   0BC3             
0027   0BC3             .end
0028   0BC3             
0029   0BC3             
tasm: Number of errors = 0
