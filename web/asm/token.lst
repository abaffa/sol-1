0001   0000             TOKTYP_IDENTIFIER	.equ 0
0002   0000             TOKTYP_KEYWORD		.equ 1
0003   0000             TOKTYP_DELIMITER	.equ 2
0004   0000             TOKTYP_STRING		.equ 3
0005   0000             TOKTYP_CHAR			.equ 4
0006   0000             TOKTYP_NUMERIC		.equ 5
0007   0000             TOKTYP_END			.equ 6
0008   0000             
0009   0000             TOK_NULL			.equ 0
0010   0000             TOK_FSLASH			.equ 1
0011   0000             TOK_TIMES 			.equ 2
0012   0000             TOK_PLUS 			.equ 3
0013   0000             TOK_MINUS 			.equ 4
0014   0000             TOK_DOT				.equ 5
0015   0000             TOK_SEMI			.equ 6
0016   0000             TOK_ANGLE			.equ 7
0017   0000             TOK_TILDE			.equ 8
0018   0000             TOK_EQUAL			.equ 9
0019   0000             
0020   0000             TOK_END				.equ 15
0021   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022   0000             ;; token parser
0023   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0024   0000             get_token:
0025   0000 D7          	push a
0026   0001 DA          	push d
0027   0002 E2          	push si
0028   0003 E3          	push di
0029   0004 19 00       	mov al, 0
0030   0006 3D 16 01    	mov [tokstr], al			; nullify tokstr string
0031   0009 19 00       	mov al, TOK_NULL
0032   000B 3D 15 01    	mov [tok], al				; nullify token
0033   000E 14 12 01    	mov a, [prog]
0034   0011 4D          	mov si, a
0035   0012 FD 4F 16 01 	mov di, tokstr
0036   0016             skip_spaces:
0037   0016 F6          	lodsb
token.s line 0038: Label not found: (isspace)
token.s line 0038: Unused data in MS byte of argument. (2)
0038   0017 07 00 00    	call isspace
0039   001A C6 16 00    	je skip_spaces
0040   001D B9 00       	cmp al, 0			; check for end of input (NULL)
0041   001F C6 CB 00    	je get_token_end
0042   0022             get_tok_type:
token.s line 0043: Label not found: (isalnum)
token.s line 0043: Unused data in MS byte of argument. (2)
0043   0022 07 00 00    	call isalnum
0044   0025 C6 D8 00    	jz is_alphanumeric
0045   0028             ; other token types
0046   0028             get_token_slash:
0047   0028 B9 2F       	cmp al, '/'				; check if '/'
0048   002A C7 42 00    	jne get_token_dash
0049   002D F7          	stosb					; store '/' into token string
0050   002E 19 00       	mov al, 0
0051   0030 F7          	stosb					; terminate token string
0052   0031 19 01       	mov al, TOK_FSLASH
0053   0033 3D 15 01    	mov [tok], al			
0054   0036 19 02       	mov al, TOKTYP_DELIMITER
0055   0038 3D 14 01    	mov [toktyp], al
0056   003B 4E          	mov a, si
0057   003C 42 12 01    	mov [prog], a		; update pointer
0058   003F 0A F4 00    	jmp get_token_return
0059   0042             get_token_dash:
0060   0042 B9 2D       	cmp al, '-'				; check if '-'
0061   0044 C7 5C 00    	jne get_token_semi
0062   0047 F7          	stosb					; store '-' into token string
0063   0048 19 00       	mov al, 0
0064   004A F7          	stosb					; terminate token string
0065   004B 19 04       	mov al, TOK_MINUS
0066   004D 3D 15 01    	mov [tok], al			
0067   0050 19 02       	mov al, TOKTYP_DELIMITER
0068   0052 3D 14 01    	mov [toktyp], al
0069   0055 4E          	mov a, si
0070   0056 42 12 01    	mov [prog], a		; update pointer
0071   0059 0A F4 00    	jmp get_token_return
0072   005C             get_token_semi:
0073   005C B9 3B       	cmp al, $3B				; check if ';'
0074   005E C7 76 00    	jne get_token_angle
0075   0061 F7          	stosb					; store ';' into token string
0076   0062 19 00       	mov al, 0
0077   0064 F7          	stosb					; terminate token string
0078   0065 19 06       	mov al, TOK_SEMI
0079   0067 3D 15 01    	mov [tok], al			
0080   006A 19 02       	mov al, TOKTYP_DELIMITER
0081   006C 3D 14 01    	mov [toktyp], al
0082   006F 4E          	mov a, si
0083   0070 42 12 01    	mov [prog], a		; update pointer
0084   0073 0A F4 00    	jmp get_token_return
0085   0076             get_token_angle:
0086   0076 B9 3E       	cmp al, $3E				; check if '>'
0087   0078 C7 90 00    	jne get_token_tilde
0088   007B F7          	stosb					; store '>' into token string
0089   007C 19 00       	mov al, 0
0090   007E F7          	stosb					; terminate token string
0091   007F 19 07       	mov al, TOK_ANGLE
0092   0081 3D 15 01    	mov [tok], al			
0093   0084 19 02       	mov al, TOKTYP_DELIMITER
0094   0086 3D 14 01    	mov [toktyp], al
0095   0089 4E          	mov a, si
0096   008A 42 12 01    	mov [prog], a		; update pointer
0097   008D 0A F4 00    	jmp get_token_return
0098   0090             get_token_tilde:
0099   0090 B9 7E       	cmp al, '~'				; check if '~'
0100   0092 C7 AA 00    	jne get_token_equal
0101   0095 F7          	stosb					; store '~' into token string
0102   0096 19 00       	mov al, 0
0103   0098 F7          	stosb					; terminate token string
0104   0099 19 08       	mov al, TOK_TILDE
0105   009B 3D 15 01    	mov [tok], al			
0106   009E 19 02       	mov al, TOKTYP_DELIMITER
0107   00A0 3D 14 01    	mov [toktyp], al
0108   00A3 4E          	mov a, si
0109   00A4 42 12 01    	mov [prog], a		; update pointer
0110   00A7 0A F4 00    	jmp get_token_return
0111   00AA             get_token_equal:
0112   00AA B9 3D       	cmp al, '='				; check if '='
0113   00AC C7 C4 00    	jne get_token_skip
0114   00AF F7          	stosb					; store '=' into token string
0115   00B0 19 00       	mov al, 0
0116   00B2 F7          	stosb					; terminate token string
0117   00B3 19 09       	mov al, TOK_EQUAL
0118   00B5 3D 15 01    	mov [tok], al			
0119   00B8 19 02       	mov al, TOKTYP_DELIMITER
0120   00BA 3D 14 01    	mov [toktyp], al
0121   00BD 4E          	mov a, si
0122   00BE 42 12 01    	mov [prog], a		; update pointer
0123   00C1 0A F4 00    	jmp get_token_return
0124   00C4             get_token_skip:
0125   00C4 4E          	mov a, si
0126   00C5 42 12 01    	mov [prog], a		; update pointer
0127   00C8 0A F4 00    	jmp get_token_return
0128   00CB             get_token_end:				; end of file token
0129   00CB 19 0F       	mov al, TOK_END
0130   00CD 3D 15 01    	mov [tok], al
0131   00D0 19 06       	mov al, TOKTYP_END
0132   00D2 3D 14 01    	mov [toktyp], al
0133   00D5 0A F4 00    	jmp get_token_return
0134   00D8             is_alphanumeric:
0135   00D8 F7          	stosb
0136   00D9 F6          	lodsb
token.s line 0137: Label not found: (isalnum)
token.s line 0137: Unused data in MS byte of argument. (2)
0137   00DA 07 00 00    	call isalnum			;check if is alphanumeric
0138   00DD C6 D8 00    	jz is_alphanumeric
0139   00E0 B9 2E       	cmp al, $2E				; check if is '.'
0140   00E2 C6 D8 00    	je is_alphanumeric
0141   00E5 19 00       	mov al, 0
0142   00E7 F7          	stosb
0143   00E8 19 00       	mov al, TOKTYP_IDENTIFIER
0144   00EA 3D 14 01    	mov [toktyp], al
0145   00ED D5 01 00    	sub si, 1
0146   00F0 4E          	mov a, si
0147   00F1 42 12 01    	mov [prog], a		; update pointer
0148   00F4             get_token_return:
0149   00F4 F0          	pop di
0150   00F5 EF          	pop si
0151   00F6 E7          	pop d
0152   00F7 E4          	pop a
0153   00F8 09          	ret
0154   00F9             	
0155   00F9             
0156   00F9             
0157   00F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0158   00F9             ;; PUT BACK TOKEN
0159   00F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0160   00F9             putback:
0161   00F9 D7          	push a
0162   00FA E2          	push si
0163   00FB FD 4D 16 01 	mov si, tokstr	
0164   00FF             putback_loop:
0165   00FF F6          	lodsb
0166   0100 B9 00       	cmp al, 0
0167   0102 C6 0F 01    	je putback_end
0168   0105 14 12 01    	mov a, [prog]
0169   0108 7D          	dec a
0170   0109 42 12 01    	mov [prog], a			; update pointer
0171   010C 0A FF 00    	jmp putback_loop
0172   010F             putback_end:
0173   010F EF          	pop si
0174   0110 E4          	pop a
0175   0111 09          	ret
0176   0112             
0177   0112             
0178   0112             
0179   0112             
0180   0112 00 00       prog:		.dw 0			; pointer to current position in buffer
0181   0114             
0182   0114 00          toktyp: 	.db 0			; token type symbol
0183   0115 00          tok:		.db 0			; current token symbol
0184   0116 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0184   011A 00 00 00 00 
0184   011E 00 00 00 00 
0184   0122 00 00 00 00 
0184   0126 00 00 00 00 
0184   012A 00 00 00 00 
0184   012E 00 00 00 00 
0184   0132 00 00 00 00 
0184   0136 00 00 00 00 
0184   013A 00 00 00 00 
0184   013E 00 00 00 00 
0184   0142 00 00 00 00 
0184   0146 00 00 00 00 
0184   014A 00 00 00 00 
0184   014E 00 00 00 00 
0184   0152 00 00 00 00 
0184   0156 00 00 00 00 
0184   015A 00 00 00 00 
0184   015E 00 00 00 00 
0184   0162 00 00 00 00 
0184   0166 00 00 00 00 
0184   016A 00 00 00 00 
0184   016E 00 00 00 00 
0184   0172 00 00 00 00 
0184   0176 00 00 00 00 
0184   017A 00 00 00 00 
0184   017E 00 00 00 00 
0184   0182 00 00 00 00 
0184   0186 00 00 00 00 
0184   018A 00 00 00 00 
0184   018E 00 00 00 00 
0184   0192 00 00 00 00 
0184   0196 00 00 00 00 
0184   019A 00 00 00 00 
0184   019E 00 00 00 00 
0184   01A2 00 00 00 00 
0184   01A6 00 00 00 00 
0184   01AA 00 00 00 00 
0184   01AE 00 00 00 00 
0184   01B2 00 00 00 00 
0184   01B6 00 00 00 00 
0184   01BA 00 00 00 00 
0184   01BE 00 00 00 00 
0184   01C2 00 00 00 00 
0184   01C6 00 00 00 00 
0184   01CA 00 00 00 00 
0184   01CE 00 00 00 00 
0184   01D2 00 00 00 00 
0184   01D6 00 00 00 00 
0184   01DA 00 00 00 00 
0184   01DE 00 00 00 00 
0184   01E2 00 00 00 00 
0184   01E6 00 00 00 00 
0184   01EA 00 00 00 00 
0184   01EE 00 00 00 00 
0184   01F2 00 00 00 00 
0184   01F6 00 00 00 00 
0184   01FA 00 00 00 00 
0184   01FE 00 00 00 00 
0184   0202 00 00 00 00 
0184   0206 00 00 00 00 
0184   020A 00 00 00 00 
0184   020E 00 00 00 00 
0184   0212 00 00 00 00 
 line 0184: No END directive before EOF.       
tasm: Number of errors = 7
