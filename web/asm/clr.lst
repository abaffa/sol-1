0001   0000             .include "kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0000             
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005   0000             
0006   0400             .org PROC_TEXT_ORG			; origin at 1024
0007   0400             
0008   0400             cmd_clear:
0009   0400 3B 08 04    	mov d, s_telnet_clear
0010   0403 07 7D 09    	call puts
0011   0406             
0012   0406 05 0B       	syscall sys_terminate_proc
0013   0408             
0014   0408 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0014   040C 1B 5B 48 00 
0015   0410             
0016   0410             .include "token.asm"
0001+  0410             TOKTYP_IDENTIFIER	.equ 0
0002+  0410             TOKTYP_KEYWORD		.equ 1
0003+  0410             TOKTYP_DELIMITER	.equ 2
0004+  0410             TOKTYP_STRING		.equ 3
0005+  0410             TOKTYP_CHAR			.equ 4
0006+  0410             TOKTYP_NUMERIC		.equ 5
0007+  0410             TOKTYP_END			.equ 6
0008+  0410             
0009+  0410             TOK_NULL			.equ 0
0010+  0410             TOK_FSLASH			.equ 1
0011+  0410             TOK_TIMES 			.equ 2
0012+  0410             TOK_PLUS 			.equ 3
0013+  0410             TOK_MINUS 			.equ 4
0014+  0410             TOK_DOT				.equ 5
0015+  0410             TOK_SEMI			.equ 6
0016+  0410             TOK_ANGLE			.equ 7
0017+  0410             TOK_TILDE			.equ 8
0018+  0410             TOK_EQUAL			.equ 9
0019+  0410             TOK_COLON			.equ 10
0020+  0410             TOK_COMMA			.equ 11
0021+  0410             
0022+  0410             TOK_END				.equ 20
0023+  0410             
0024+  0410             
0025+  0410             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0410             ;; read a full command argment from shell input buffer
0027+  0410             ;; argument is written into tokstr
0028+  0410             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  0410             get_arg:
0030+  0410 D7          	push a
0031+  0411 E2          	push si
0032+  0412 E3          	push di
0033+  0413 19 00       	mov al, 0
0034+  0415 3D 3E 06    	mov [tokstr], al			; nullify tokstr string
0035+  0418 14 3A 06    	mov a, [prog]
0036+  041B 4D          	mov si, a
0037+  041C FD 4F 3E 06 	mov di, tokstr
0038+  0420             get_arg_skip_spaces:
0039+  0420 F6          	lodsb
0040+  0421 07 2B 0B    	call isspace
0041+  0424 C6 20 04    	je get_arg_skip_spaces
0042+  0427             get_arg_L0:
0043+  0427 B9 3B       	cmp al, $3B				; check if is ';'
0044+  0429 C6 36 04    	je get_arg_end
0045+  042C B9 00       	cmp al, 0
0046+  042E C6 36 04    	je get_arg_end			; check if end of input
0047+  0431 F7          	stosb
0048+  0432 F6          	lodsb
0049+  0433 0A 27 04    	jmp get_arg_L0
0050+  0436             get_arg_end:
0051+  0436 19 00       	mov al, 0
0052+  0438 F7          	stosb
0053+  0439 D5 01 00    	sub si, 1
0054+  043C 4E          	mov a, si
0055+  043D 42 3A 06    	mov [prog], a		; update pointer
0056+  0440 F0          	pop di
0057+  0441 EF          	pop si
0058+  0442 E4          	pop a
0059+  0443 09          	ret
0060+  0444             
0061+  0444             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0444             ;; read a path formation from shell input buffer
0063+  0444             ;; path is written into tokstr
0064+  0444             ;; /usr/bin
0065+  0444             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0444             get_path:
0067+  0444 D7          	push a
0068+  0445 E2          	push si
0069+  0446 E3          	push di
0070+  0447 19 00       	mov al, 0
0071+  0449 3D 3E 06    	mov [tokstr], al			; nullify tokstr string
0072+  044C 14 3A 06    	mov a, [prog]
0073+  044F 4D          	mov si, a
0074+  0450 FD 4F 3E 06 	mov di, tokstr
0075+  0454             get_path_skip_spaces:
0076+  0454 F6          	lodsb
0077+  0455 07 2B 0B    	call isspace
0078+  0458 C6 54 04    	je get_path_skip_spaces
0079+  045B             get_path_is_pathchar:
0080+  045B F7          	stosb
0081+  045C F6          	lodsb
0082+  045D 07 B5 0A    	call isalnum			;check if is alphanumeric
0083+  0460 C6 5B 04    	je get_path_is_pathchar
0084+  0463 B9 2F       	cmp al, '/'				; check if is '/'
0085+  0465 C6 5B 04    	je get_path_is_pathchar
0086+  0468 19 00       	mov al, 0
0087+  046A F7          	stosb
0088+  046B D5 01 00    	sub si, 1
0089+  046E 4E          	mov a, si
0090+  046F 42 3A 06    	mov [prog], a		; update pointer
0091+  0472             get_path_end:
0092+  0472 F0          	pop di
0093+  0473 EF          	pop si
0094+  0474 E4          	pop a
0095+  0475 09          	ret
0096+  0476             
0097+  0476             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0476             ;; read a line
0099+  0476             ;; line is written into tokstr
0100+  0476             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0476             get_line:
0102+  0476 D7          	push a
0103+  0477 E2          	push si
0104+  0478 E3          	push di
0105+  0479 19 00       	mov al, 0
0106+  047B 3D 3E 06    	mov [tokstr], al			; nullify tokstr string
0107+  047E 14 3A 06    	mov a, [prog]
0108+  0481 4D          	mov si, a
0109+  0482 FD 4F 3E 06 	mov di, tokstr
0110+  0486             get_line_L0:
0111+  0486 F6          	lodsb
0112+  0487 B9 0A       	cmp al, $0A		; check for new line
0113+  0489 C6 90 04    	je get_line_exit
0114+  048C F7          	stosb
0115+  048D 0A 86 04    	jmp get_line_L0
0116+  0490             get_line_exit:
0117+  0490 19 00       	mov al, 0
0118+  0492 F7          	stosb
0119+  0493 4E          	mov a, si
0120+  0494 42 3A 06    	mov [prog], a		; update pointer
0121+  0497 F0          	pop di
0122+  0498 EF          	pop si
0123+  0499 E4          	pop a
0124+  049A 09          	ret
0125+  049B             
0126+  049B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  049B             ;; token parser
0128+  049B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  049B             get_token:
0130+  049B D7          	push a
0131+  049C DA          	push d
0132+  049D E2          	push si
0133+  049E E3          	push di
0134+  049F 19 00       	mov al, 0
0135+  04A1 3D 3E 06    	mov [tokstr], al			; nullify tokstr string
0136+  04A4 19 00       	mov al, TOK_NULL
0137+  04A6 3D 3D 06    	mov [tok], al				; nullify token
0138+  04A9 14 3A 06    	mov a, [prog]
0139+  04AC 4D          	mov si, a
0140+  04AD FD 4F 3E 06 	mov di, tokstr
0141+  04B1             get_tok_skip_spaces:
0142+  04B1 F6          	lodsb
0143+  04B2 07 2B 0B    	call isspace
0144+  04B5 C6 B1 04    	je get_tok_skip_spaces
0145+  04B8 B9 00       	cmp al, 0			; check for end of input (NULL)
0146+  04BA C6 9F 05    	je get_token_end
0147+  04BD B9 23       	cmp al, '#'			; comments!
0148+  04BF C6 CD 05    	je get_tok_comment
0149+  04C2 07 B5 0A    	call isalnum
0150+  04C5 C6 AC 05    	jz is_alphanumeric
0151+  04C8             ; other token types
0152+  04C8             get_token_slash:
0153+  04C8 B9 2F       	cmp al, '/'				; check if '/'
0154+  04CA C7 E2 04    	jne get_token_minus
0155+  04CD F7          	stosb					; store '/' into token string
0156+  04CE 19 00       	mov al, 0
0157+  04D0 F7          	stosb					; terminate token string
0158+  04D1 19 01       	mov al, TOK_FSLASH
0159+  04D3 3D 3D 06    	mov [tok], al			
0160+  04D6 19 02       	mov al, TOKTYP_DELIMITER
0161+  04D8 3D 3C 06    	mov [toktyp], al
0162+  04DB 4E          	mov a, si
0163+  04DC 42 3A 06    	mov [prog], a		; update pointer
0164+  04DF 0A C8 05    	jmp get_token_return
0165+  04E2             get_token_minus:
0166+  04E2 B9 2D       	cmp al, '-'				; check if '-'
0167+  04E4 C7 FC 04    	jne get_token_comma
0168+  04E7 F7          	stosb					; store '-' into token string
0169+  04E8 19 00       	mov al, 0
0170+  04EA F7          	stosb					; terminate token string
0171+  04EB 19 04       	mov al, TOK_MINUS
0172+  04ED 3D 3D 06    	mov [tok], al			
0173+  04F0 19 02       	mov al, TOKTYP_DELIMITER
0174+  04F2 3D 3C 06    	mov [toktyp], al
0175+  04F5 4E          	mov a, si
0176+  04F6 42 3A 06    	mov [prog], a		; update pointer
0177+  04F9 0A C8 05    	jmp get_token_return
0178+  04FC             get_token_comma:
0179+  04FC B9 2C       	cmp al, ','				; check if ','
0180+  04FE C7 16 05    	jne get_token_semi
0181+  0501 F7          	stosb					; store ',' into token string
0182+  0502 19 00       	mov al, 0
0183+  0504 F7          	stosb					; terminate token string
0184+  0505 19 0B       	mov al, TOK_COMMA
0185+  0507 3D 3D 06    	mov [tok], al			
0186+  050A 19 02       	mov al, TOKTYP_DELIMITER
0187+  050C 3D 3C 06    	mov [toktyp], al
0188+  050F 4E          	mov a, si
0189+  0510 42 3A 06    	mov [prog], a		; update pointer
0190+  0513 0A C8 05    	jmp get_token_return
0191+  0516             get_token_semi:
0192+  0516 B9 3B       	cmp al, $3B				; check if ';'
0193+  0518 C7 30 05    	jne get_token_colon
0194+  051B F7          	stosb					; store ';' into token string
0195+  051C 19 00       	mov al, 0
0196+  051E F7          	stosb					; terminate token string
0197+  051F 19 06       	mov al, TOK_SEMI
0198+  0521 3D 3D 06    	mov [tok], al			
0199+  0524 19 02       	mov al, TOKTYP_DELIMITER
0200+  0526 3D 3C 06    	mov [toktyp], al
0201+  0529 4E          	mov a, si
0202+  052A 42 3A 06    	mov [prog], a		; update pointer
0203+  052D 0A C8 05    	jmp get_token_return
0204+  0530             get_token_colon:
0205+  0530 B9 3A       	cmp al, $3A				; check if ':'
0206+  0532 C7 4A 05    	jne get_token_angle
0207+  0535 F7          	stosb					; store ':' into token string
0208+  0536 19 00       	mov al, 0
0209+  0538 F7          	stosb					; terminate token string
0210+  0539 19 0A       	mov al, TOK_COLON
0211+  053B 3D 3D 06    	mov [tok], al			
0212+  053E 19 02       	mov al, TOKTYP_DELIMITER
0213+  0540 3D 3C 06    	mov [toktyp], al
0214+  0543 4E          	mov a, si
0215+  0544 42 3A 06    	mov [prog], a		; update pointer
0216+  0547 0A C8 05    	jmp get_token_return
0217+  054A             get_token_angle:
0218+  054A B9 3E       	cmp al, $3E				; check if '>'
0219+  054C C7 64 05    	jne get_token_tilde
0220+  054F F7          	stosb					; store '>' into token string
0221+  0550 19 00       	mov al, 0
0222+  0552 F7          	stosb					; terminate token string
0223+  0553 19 07       	mov al, TOK_ANGLE
0224+  0555 3D 3D 06    	mov [tok], al			
0225+  0558 19 02       	mov al, TOKTYP_DELIMITER
0226+  055A 3D 3C 06    	mov [toktyp], al
0227+  055D 4E          	mov a, si
0228+  055E 42 3A 06    	mov [prog], a		; update pointer
0229+  0561 0A C8 05    	jmp get_token_return
0230+  0564             get_token_tilde:
0231+  0564 B9 7E       	cmp al, '~'				; check if '~'
0232+  0566 C7 7E 05    	jne get_token_equal
0233+  0569 F7          	stosb					; store '~' into token string
0234+  056A 19 00       	mov al, 0
0235+  056C F7          	stosb					; terminate token string
0236+  056D 19 08       	mov al, TOK_TILDE
0237+  056F 3D 3D 06    	mov [tok], al			
0238+  0572 19 02       	mov al, TOKTYP_DELIMITER
0239+  0574 3D 3C 06    	mov [toktyp], al
0240+  0577 4E          	mov a, si
0241+  0578 42 3A 06    	mov [prog], a		; update pointer
0242+  057B 0A C8 05    	jmp get_token_return
0243+  057E             get_token_equal:
0244+  057E B9 3D       	cmp al, '='				; check if '='
0245+  0580 C7 98 05    	jne get_token_skip
0246+  0583 F7          	stosb					; store '=' into token string
0247+  0584 19 00       	mov al, 0
0248+  0586 F7          	stosb					; terminate token string
0249+  0587 19 09       	mov al, TOK_EQUAL
0250+  0589 3D 3D 06    	mov [tok], al			
0251+  058C 19 02       	mov al, TOKTYP_DELIMITER
0252+  058E 3D 3C 06    	mov [toktyp], al
0253+  0591 4E          	mov a, si
0254+  0592 42 3A 06    	mov [prog], a		; update pointer
0255+  0595 0A C8 05    	jmp get_token_return
0256+  0598             get_token_skip:
0257+  0598 4E          	mov a, si
0258+  0599 42 3A 06    	mov [prog], a		; update pointer
0259+  059C 0A C8 05    	jmp get_token_return
0260+  059F             get_token_end:				; end of file token
0261+  059F 19 14       	mov al, TOK_END
0262+  05A1 3D 3D 06    	mov [tok], al
0263+  05A4 19 06       	mov al, TOKTYP_END
0264+  05A6 3D 3C 06    	mov [toktyp], al
0265+  05A9 0A C8 05    	jmp get_token_return
0266+  05AC             is_alphanumeric:
0267+  05AC F7          	stosb
0268+  05AD F6          	lodsb
0269+  05AE 07 B5 0A    	call isalnum			;check if is alphanumeric
0270+  05B1 C6 AC 05    	jz is_alphanumeric
0271+  05B4 B9 2E       	cmp al, $2E				; check if is '.'
0272+  05B6 C6 AC 05    	je is_alphanumeric
0273+  05B9 19 00       	mov al, 0
0274+  05BB F7          	stosb
0275+  05BC 19 00       	mov al, TOKTYP_IDENTIFIER
0276+  05BE 3D 3C 06    	mov [toktyp], al
0277+  05C1 D5 01 00    	sub si, 1
0278+  05C4 4E          	mov a, si
0279+  05C5 42 3A 06    	mov [prog], a		; update pointer
0280+  05C8             get_token_return:
0281+  05C8 F0          	pop di
0282+  05C9 EF          	pop si
0283+  05CA E7          	pop d
0284+  05CB E4          	pop a
0285+  05CC 09          	ret
0286+  05CD             get_tok_comment:
0287+  05CD F6          	lodsb
0288+  05CE B9 0A       	cmp al, $0A			; new line
0289+  05D0 C7 CD 05    	jne get_tok_comment
0290+  05D3 0A B1 04    	jmp get_tok_skip_spaces
0291+  05D6             
0292+  05D6             
0293+  05D6             get_number:
0294+  05D6 D7          	push a
0295+  05D7 DA          	push d
0296+  05D8 E2          	push si
0297+  05D9 E3          	push di
0298+  05DA 19 00       	mov al, 0
0299+  05DC 3D 3E 06    	mov [tokstr], al			; nullify tokstr string
0300+  05DF 19 00       	mov al, TOK_NULL
0301+  05E1 3D 3D 06    	mov [tok], al				; nullify token
0302+  05E4 14 3A 06    	mov a, [prog]
0303+  05E7 4D          	mov si, a
0304+  05E8 FD 4F 3E 06 	mov di, tokstr
0305+  05EC             get_number_skip_spaces:
0306+  05EC F6          	lodsb
0307+  05ED 07 2B 0B    	call isspace
0308+  05F0 C6 EC 05    	je get_number_skip_spaces
0309+  05F3 B9 00       	cmp al, 0			; check for end of input (NULL)
0310+  05F5 C7 05 06    	jne get_number_L0
0311+  05F8 19 14       	mov al, TOK_END
0312+  05FA 3D 3D 06    	mov [tok], al
0313+  05FD 19 06       	mov al, TOKTYP_END
0314+  05FF 3D 3C 06    	mov [toktyp], al
0315+  0602 0A 1C 06    	jmp get_number_return
0316+  0605             get_number_L0:
0317+  0605 F7          	stosb
0318+  0606 F6          	lodsb
0319+  0607 07 BF 0A    	call isdigit			;check if is numeric
0320+  060A C6 05 06    	jz get_number_L0
0321+  060D 19 00       	mov al, 0
0322+  060F F7          	stosb
0323+  0610 19 05       	mov al, TOKTYP_NUMERIC
0324+  0612 3D 3C 06    	mov [toktyp], al
0325+  0615 D5 01 00    	sub si, 1
0326+  0618 4E          	mov a, si
0327+  0619 42 3A 06    	mov [prog], a		; update pointer
0328+  061C             get_number_return:
0329+  061C F0          	pop di
0330+  061D EF          	pop si
0331+  061E E7          	pop d
0332+  061F E4          	pop a
0333+  0620 09          	ret
0334+  0621             
0335+  0621             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0621             ;; PUT BACK TOKEN
0337+  0621             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0338+  0621             putback:
0339+  0621 D7          	push a
0340+  0622 E2          	push si
0341+  0623 FD 4D 3E 06 	mov si, tokstr	
0342+  0627             putback_loop:
0343+  0627 F6          	lodsb
0344+  0628 B9 00       	cmp al, 0
0345+  062A C6 37 06    	je putback_end
0346+  062D 14 3A 06    	mov a, [prog]
0347+  0630 7D          	dec a
0348+  0631 42 3A 06    	mov [prog], a			; update pointer
0349+  0634 0A 27 06    	jmp putback_loop
0350+  0637             putback_end:
0351+  0637 EF          	pop si
0352+  0638 E4          	pop a
0353+  0639 09          	ret
0354+  063A             
0355+  063A             
0356+  063A             
0357+  063A             
0358+  063A 00 00       prog:		.dw 0			; pointer to current position in buffer
0359+  063C             
0360+  063C 00          toktyp: 	.db 0			; token type symbol
0361+  063D 00          tok:		.db 0			; current token symbol
0362+  063E 00 00 00 00 tokstr:		.fill 256, 0	; token as a string
0362+  0642 00 00 00 00 
0362+  0646 00 00 00 00 
0362+  064A 00 00 00 00 
0362+  064E 00 00 00 00 
0362+  0652 00 00 00 00 
0362+  0656 00 00 00 00 
0362+  065A 00 00 00 00 
0362+  065E 00 00 00 00 
0362+  0662 00 00 00 00 
0362+  0666 00 00 00 00 
0362+  066A 00 00 00 00 
0362+  066E 00 00 00 00 
0362+  0672 00 00 00 00 
0362+  0676 00 00 00 00 
0362+  067A 00 00 00 00 
0362+  067E 00 00 00 00 
0362+  0682 00 00 00 00 
0362+  0686 00 00 00 00 
0362+  068A 00 00 00 00 
0362+  068E 00 00 00 00 
0362+  0692 00 00 00 00 
0362+  0696 00 00 00 00 
0362+  069A 00 00 00 00 
0362+  069E 00 00 00 00 
0362+  06A2 00 00 00 00 
0362+  06A6 00 00 00 00 
0362+  06AA 00 00 00 00 
0362+  06AE 00 00 00 00 
0362+  06B2 00 00 00 00 
0362+  06B6 00 00 00 00 
0362+  06BA 00 00 00 00 
0362+  06BE 00 00 00 00 
0362+  06C2 00 00 00 00 
0362+  06C6 00 00 00 00 
0362+  06CA 00 00 00 00 
0362+  06CE 00 00 00 00 
0362+  06D2 00 00 00 00 
0362+  06D6 00 00 00 00 
0362+  06DA 00 00 00 00 
0362+  06DE 00 00 00 00 
0362+  06E2 00 00 00 00 
0362+  06E6 00 00 00 00 
0362+  06EA 00 00 00 00 
0362+  06EE 00 00 00 00 
0362+  06F2 00 00 00 00 
0362+  06F6 00 00 00 00 
0362+  06FA 00 00 00 00 
0362+  06FE 00 00 00 00 
0362+  0702 00 00 00 00 
0362+  0706 00 00 00 00 
0362+  070A 00 00 00 00 
0362+  070E 00 00 00 00 
0362+  0712 00 00 00 00 
0362+  0716 00 00 00 00 
0362+  071A 00 00 00 00 
0362+  071E 00 00 00 00 
0362+  0722 00 00 00 00 
0362+  0726 00 00 00 00 
0362+  072A 00 00 00 00 
0362+  072E 00 00 00 00 
0362+  0732 00 00 00 00 
0362+  0736 00 00 00 00 
0362+  073A 00 00 00 00 
0017   073E             .include "stdio.asm"
0001+  073E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  073E             ; stdio.s
0003+  073E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  073E             .include "string.asm"
0001++ 073E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 073E             ; string.s
0003++ 073E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 073E             
0005++ 073E             
0006++ 073E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 073E             ; strrev
0008++ 073E             ; reverse a string
0009++ 073E             ; D = string address
0010++ 073E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 073E             ; 01234
0012++ 073E             strrev:
0013++ 073E 4B          	pusha
0014++ 073F 07 85 07    	call strlen	; length in C
0015++ 0742 12          	mov a, c
0016++ 0743 AF 01 00    	cmp a, 1
0017++ 0746 D0 60 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0749 7D          	dec a
0019++ 074A FD 4E       	mov si, d	; beginning of string
0020++ 074C FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 074E 59          	add d, a	; end of string
0022++ 074F 12          	mov a, c
0023++ 0750 FD 9B       	shr a		; divide by 2
0024++ 0752 39          	mov c, a	; C now counts the steps
0025++ 0753             strrev_L0:
0026++ 0753 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0754 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0755 3E          	mov [d], al	; store left char into right side
0029++ 0756 1B          	mov al, bl
0030++ 0757 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0758 7E          	dec c
0032++ 0759 7F          	dec d
0033++ 075A C2 00 00    	cmp c, 0
0034++ 075D C7 53 07    	jne strrev_L0
0035++ 0760             strrev_end:
0036++ 0760 4C          	popa
0037++ 0761 09          	ret
0038++ 0762             	
0039++ 0762             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0762             ; strchr
0041++ 0762             ; search string in D for char in AL
0042++ 0762             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0762             strchr:
0044++ 0762             strchr_L0:
0045++ 0762 32          	mov bl, [d]
0046++ 0763 C1 00       	cmp bl, 0
0047++ 0765 C6 70 07    	je strchr_end
0048++ 0768 BA          	cmp al, bl
0049++ 0769 C6 70 07    	je strchr_end
0050++ 076C 79          	inc d
0051++ 076D 0A 62 07    	jmp strchr_L0
0052++ 0770             strchr_end:
0053++ 0770 1B          	mov al, bl
0054++ 0771 09          	ret
0055++ 0772             
0056++ 0772             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0772             ; strstr
0058++ 0772             ; find sub-string
0059++ 0772             ; str1 in SI
0060++ 0772             ; str2 in DI
0061++ 0772             ; SI points to end of source string
0062++ 0772             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0772             strstr:
0064++ 0772 DB          	push al
0065++ 0773 DA          	push d
0066++ 0774 E3          	push di
0067++ 0775             strstr_loop:
0068++ 0775 F3          	cmpsb					; compare a byte of the strings
0069++ 0776 C7 81 07    	jne strstr_ret
0070++ 0779 FC 00 00    	lea d, [di + 0]
0071++ 077C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 077E C7 75 07    	jne strstr_loop				; equal chars but not at end
0073++ 0781             strstr_ret:
0074++ 0781 F0          	pop di
0075++ 0782 E7          	pop d
0076++ 0783 E8          	pop al
0077++ 0784 09          	ret
0078++ 0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0785             ; length of null terminated string
0080++ 0785             ; result in C
0081++ 0785             ; pointer in D
0082++ 0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0785             strlen:
0084++ 0785 DA          	push d
0085++ 0786 38 00 00    	mov c, 0
0086++ 0789             strlen_L1:
0087++ 0789 BD 00       	cmp byte [d], 0
0088++ 078B C6 93 07    	je strlen_ret
0089++ 078E 79          	inc d
0090++ 078F 78          	inc c
0091++ 0790 0A 89 07    	jmp strlen_L1
0092++ 0793             strlen_ret:
0093++ 0793 E7          	pop d
0094++ 0794 09          	ret
0095++ 0795             
0096++ 0795             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0795             ; STRCMP
0098++ 0795             ; compare two strings
0099++ 0795             ; str1 in SI
0100++ 0795             ; str2 in DI
0101++ 0795             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0795             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0795             strcmp:
0104++ 0795 DB          	push al
0105++ 0796 DA          	push d
0106++ 0797 E3          	push di
0107++ 0798 E2          	push si
0108++ 0799             strcmp_loop:
0109++ 0799 F3          	cmpsb					; compare a byte of the strings
0110++ 079A C7 A5 07    	jne strcmp_ret
0111++ 079D FB FF FF    	lea d, [si +- 1]
0112++ 07A0 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07A2 C7 99 07    	jne strcmp_loop				; equal chars but not at end
0114++ 07A5             strcmp_ret:
0115++ 07A5 EF          	pop si
0116++ 07A6 F0          	pop di
0117++ 07A7 E7          	pop d
0118++ 07A8 E8          	pop al
0119++ 07A9 09          	ret
0120++ 07AA             
0121++ 07AA             
0122++ 07AA             ; STRCPY
0123++ 07AA             ; copy null terminated string from SI to DI
0124++ 07AA             ; source in SI
0125++ 07AA             ; destination in DI
0126++ 07AA             strcpy:
0127++ 07AA E2          	push si
0128++ 07AB E3          	push di
0129++ 07AC DB          	push al
0130++ 07AD             strcpy_L1:
0131++ 07AD F6          	lodsb
0132++ 07AE F7          	stosb
0133++ 07AF B9 00       	cmp al, 0
0134++ 07B1 C7 AD 07    	jne strcpy_L1
0135++ 07B4             strcpy_end:
0136++ 07B4 E8          	pop al
0137++ 07B5 F0          	pop di
0138++ 07B6 EF          	pop si
0139++ 07B7 09          	ret
0140++ 07B8             
0141++ 07B8             ; STRCAT
0142++ 07B8             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07B8             ; source in SI
0144++ 07B8             ; destination in DI
0145++ 07B8             strcat:
0146++ 07B8 E2          	push si
0147++ 07B9 E3          	push di
0148++ 07BA D7          	push a
0149++ 07BB DA          	push d
0150++ 07BC 50          	mov a, di
0151++ 07BD 3C          	mov d, a
0152++ 07BE             strcat_goto_end_L1:
0153++ 07BE BD 00       	cmp byte[d], 0
0154++ 07C0 C6 C7 07    	je strcat_start
0155++ 07C3 79          	inc d
0156++ 07C4 0A BE 07    	jmp strcat_goto_end_L1
0157++ 07C7             strcat_start:
0158++ 07C7 FD 50       	mov di, d
0159++ 07C9             strcat_L1:
0160++ 07C9 F6          	lodsb
0161++ 07CA F7          	stosb
0162++ 07CB B9 00       	cmp al, 0
0163++ 07CD C7 C9 07    	jne strcat_L1
0164++ 07D0             strcat_end:
0165++ 07D0 E7          	pop d
0166++ 07D1 E4          	pop a
0167++ 07D2 F0          	pop di
0168++ 07D3 EF          	pop si
0169++ 07D4 09          	ret
0005+  07D5             
0006+  07D5 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  07D9 34 35 36 37 
0006+  07DD 38 39 41 42 
0006+  07E1 43 44 45 46 
0007+  07E5             
0008+  07E5 01 00       table_power:.dw 1
0009+  07E7 0A 00       			.dw 10
0010+  07E9 64 00       			.dw 100
0011+  07EB E8 03       			.dw 1000
0012+  07ED 10 27       			.dw 10000
0013+  07EF             
0014+  07EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  07EF             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  07EF             ; ASCII in BL
0017+  07EF             ; result in AL
0018+  07EF             ; ascii for F = 0100 0110
0019+  07EF             ; ascii for 9 = 0011 1001
0020+  07EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  07EF             hex_ascii_encode:
0022+  07EF 1B          	mov al, bl
0023+  07F0 93 40       	test al, $40				; test if letter or number
0024+  07F2 C7 F8 07    	jnz hex_letter
0025+  07F5 87 0F       	and al, $0F				; get number
0026+  07F7 09          	ret
0027+  07F8             hex_letter:
0028+  07F8 87 0F       	and al, $0F				; get letter
0029+  07FA 6A 09       	add al, 9
0030+  07FC 09          	ret
0031+  07FD             
0032+  07FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  07FD             ; ATOI
0034+  07FD             ; 2 letter hex string in B
0035+  07FD             ; 8bit integer returned in AL
0036+  07FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  07FD             atoi:
0038+  07FD D8          	push b
0039+  07FE 07 EF 07    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  0801 30          	mov bl, bh
0041+  0802 DB          	push al					; save a
0042+  0803 07 EF 07    	call hex_ascii_encode
0043+  0806 EA          	pop bl	
0044+  0807 FD 9E 04    	shl al, 4
0045+  080A 8C          	or al, bl
0046+  080B E5          	pop b
0047+  080C 09          	ret	
0048+  080D             
0049+  080D             
0050+  080D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  080D             ; printf
0052+  080D             ; no need for explanations!
0053+  080D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  080D             printf:
0055+  080D 09          	ret
0056+  080E             
0057+  080E             
0058+  080E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  080E             ; scanf
0060+  080E             ; no need for explanations!
0061+  080E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  080E             scanf:
0063+  080E 09          	ret
0064+  080F             
0065+  080F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  080F             ; ITOA
0067+  080F             ; 8bit value in BL
0068+  080F             ; 2 byte ASCII result in A
0069+  080F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  080F             itoa:
0071+  080F DA          	push d
0072+  0810 D8          	push b
0073+  0811 A7 00       	mov bh, 0
0074+  0813 FD A4 04    	shr bl, 4	
0075+  0816 74          	mov d, b
0076+  0817 1F D5 07    	mov al, [d + s_hex_digits]
0077+  081A 23          	mov ah, al
0078+  081B             	
0079+  081B E5          	pop b
0080+  081C D8          	push b
0081+  081D A7 00       	mov bh, 0
0082+  081F FD 87 0F    	and bl, $0F
0083+  0822 74          	mov d, b
0084+  0823 1F D5 07    	mov al, [d + s_hex_digits]
0085+  0826 E5          	pop b
0086+  0827 E7          	pop d
0087+  0828 09          	ret
0088+  0829             
0089+  0829             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0829             ; HEX STRING TO BINARY
0091+  0829             ; di = destination address
0092+  0829             ; si = source
0093+  0829             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0829             hex_to_int:
0095+  0829             hex_to_int_L1:
0096+  0829 F6          	lodsb					; load from [SI] to AL
0097+  082A B9 00       	cmp al, 0				; check if ASCII 0
0098+  082C C6 39 08    	jz hex_to_int_ret
0099+  082F 36          	mov bh, al
0100+  0830 F6          	lodsb
0101+  0831 2F          	mov bl, al
0102+  0832 07 FD 07    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0835 F7          	stosb					; store AL to [DI]
0104+  0836 0A 29 08    	jmp hex_to_int_L1
0105+  0839             hex_to_int_ret:
0106+  0839 09          	ret		
0107+  083A             
0108+  083A             
0109+  083A             
0110+  083A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  083A             ; GETCHAR
0112+  083A             ; char in ah
0113+  083A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  083A             getchar:
0115+  083A DB          	push al
0116+  083B             getchar_retry:
0117+  083B FD 0C       	sti
0118+  083D 19 01       	mov al, 1
0119+  083F 05 03       	syscall sys_io			; receive in AH
0120+  0841 B9 00       	cmp al, 0			; check if any char was receive
0121+  0843 C6 3B 08    	je getchar_retry
0122+  0846 E8          	pop al
0123+  0847 09          	ret
0124+  0848             
0125+  0848             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0848             ; PUTCHAR
0127+  0848             ; char in ah
0128+  0848             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0848             putchar:
0130+  0848 D7          	push a
0131+  0849 19 00       	mov al, 0
0132+  084B 05 03       	syscall sys_io			; char in AH
0133+  084D E4          	pop a
0134+  084E 09          	ret
0135+  084F             
0136+  084F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  084F             ;; INPUT A STRING
0138+  084F             ;; terminates with null
0139+  084F             ;; pointer in D
0140+  084F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  084F             gets:
0142+  084F D7          	push a
0143+  0850 DA          	push d
0144+  0851             gets_loop:
0145+  0851 FD 0C       	sti
0146+  0853 19 01       	mov al, 1
0147+  0855 05 03       	syscall sys_io			; receive in AH
0148+  0857 B9 00       	cmp al, 0				; check error code (AL)
0149+  0859 C6 51 08    	je gets_loop			; if no char received, retry
0150+  085C             
0151+  085C 76 1B       	cmp ah, 27
0152+  085E C6 7A 08    	je gets_telnet_escape
0153+  0861 76 0A       	cmp ah, $0A				; LF
0154+  0863 C6 D3 08    	je gets_end
0155+  0866 76 5C       	cmp ah, $5C				; '\\'
0156+  0868 C6 AA 08    	je gets_escape
0157+  086B             	
0158+  086B 76 08       	cmp ah, $08			; check for backspace
0159+  086D C6 76 08    	je gets_backspace
0160+  0870             
0161+  0870 1A          	mov al, ah
0162+  0871 3E          	mov [d], al
0163+  0872 79          	inc d
0164+  0873 0A 51 08    	jmp gets_loop
0165+  0876             gets_backspace:
0166+  0876 7F          	dec d
0167+  0877 0A 51 08    	jmp gets_loop
0168+  087A             gets_telnet_escape:
0169+  087A FD 0C       	sti
0170+  087C 19 01       	mov al, 1
0171+  087E 05 03       	syscall sys_io				; receive in AH without echo
0172+  0880 B9 00       	cmp al, 0					; check error code (AL)
0173+  0882 C6 7A 08    	je gets_telnet_escape		; if no char received, retry
0174+  0885 76 5B       	cmp ah, '['
0175+  0887 C7 51 08    	jne gets_loop
0176+  088A             gets_telnet_escape_phase2:
0177+  088A FD 0C       	sti
0178+  088C 19 01       	mov al, 1
0179+  088E 05 03       	syscall sys_io					; receive in AH without echo
0180+  0890 B9 00       	cmp al, 0						; check error code (AL)
0181+  0892 C6 8A 08    	je gets_telnet_escape_phase2	; if no char received, retry
0182+  0895 76 44       	cmp ah, 'D'
0183+  0897 C6 A2 08    	je gets_left_arrow
0184+  089A 76 43       	cmp ah, 'C'
0185+  089C C6 A6 08    	je gets_right_arrow
0186+  089F 0A 51 08    	jmp gets_loop
0187+  08A2             gets_left_arrow:
0188+  08A2 7F          	dec d
0189+  08A3 0A 51 08    	jmp gets_loop
0190+  08A6             gets_right_arrow:
0191+  08A6 79          	inc d
0192+  08A7 0A 51 08    	jmp gets_loop
0193+  08AA             gets_escape:
0194+  08AA FD 0C       	sti
0195+  08AC 19 01       	mov al, 1
0196+  08AE 05 03       	syscall sys_io			; receive in AH
0197+  08B0 B9 00       	cmp al, 0				; check error code (AL)
0198+  08B2 C6 AA 08    	je gets_escape			; if no char received, retry
0199+  08B5 76 6E       	cmp ah, 'n'
0200+  08B7 C6 C5 08    	je gets_LF
0201+  08BA 76 72       	cmp ah, 'r'
0202+  08BC C6 CC 08    	je gets_CR
0203+  08BF 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0204+  08C0 3E          	mov [d], al
0205+  08C1 79          	inc d
0206+  08C2 0A 51 08    	jmp gets_loop
0207+  08C5             gets_LF:
0208+  08C5 19 0A       	mov al, $0A
0209+  08C7 3E          	mov [d], al
0210+  08C8 79          	inc d
0211+  08C9 0A 51 08    	jmp gets_loop
0212+  08CC             gets_CR:
0213+  08CC 19 0D       	mov al, $0D
0214+  08CE 3E          	mov [d], al
0215+  08CF 79          	inc d
0216+  08D0 0A 51 08    	jmp gets_loop
0217+  08D3             gets_end:
0218+  08D3 19 00       	mov al, 0
0219+  08D5 3E          	mov [d], al				; terminate string
0220+  08D6 E7          	pop d
0221+  08D7 E4          	pop a
0222+  08D8 09          	ret
0223+  08D9             
0224+  08D9             
0225+  08D9             
0226+  08D9             
0227+  08D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0228+  08D9             ;; INPUT TEXT
0229+  08D9             ;; terminated with CTRL+D
0230+  08D9             ;; pointer in D
0231+  08D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0232+  08D9             gettxt:
0233+  08D9 D7          	push a
0234+  08DA DA          	push d
0235+  08DB             gettxt_loop:
0236+  08DB 19 01       	mov al, 1
0237+  08DD 05 03       	syscall sys_io			; receive in AH
0238+  08DF B9 00       	cmp al, 0				; check error code (AL)
0239+  08E1 C6 DB 08    	je gettxt_loop		; if no char received, retry
0240+  08E4 76 04       	cmp ah, 4			; EOT
0241+  08E6 C6 24 09    	je gettxt_end
0242+  08E9 76 08       	cmp ah, $08			; check for backspace
0243+  08EB C6 20 09    	je gettxt_backspace
0244+  08EE 76 5C       	cmp ah, $5C				; '\\'
0245+  08F0 C6 F9 08    	je gettxt_escape
0246+  08F3 1A          	mov al, ah
0247+  08F4 3E          	mov [d], al
0248+  08F5 79          	inc d
0249+  08F6 0A DB 08    	jmp gettxt_loop
0250+  08F9             gettxt_escape:
0251+  08F9 19 01       	mov al, 1
0252+  08FB 05 03       	syscall sys_io			; receive in AH
0253+  08FD B9 00       	cmp al, 0				; check error code (AL)
0254+  08FF C6 F9 08    	je gettxt_escape		; if no char received, retry
0255+  0902 76 6E       	cmp ah, 'n'
0256+  0904 C6 12 09    	je gettxt_LF
0257+  0907 76 72       	cmp ah, 'r'
0258+  0909 C6 19 09    	je gettxt_CR
0259+  090C 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0260+  090D 3E          	mov [d], al
0261+  090E 79          	inc d
0262+  090F 0A DB 08    	jmp gettxt_loop
0263+  0912             gettxt_LF:
0264+  0912 19 0A       	mov al, $0A
0265+  0914 3E          	mov [d], al
0266+  0915 79          	inc d
0267+  0916 0A DB 08    	jmp gettxt_loop
0268+  0919             gettxt_CR:
0269+  0919 19 0D       	mov al, $0D
0270+  091B 3E          	mov [d], al
0271+  091C 79          	inc d
0272+  091D 0A DB 08    	jmp gettxt_loop
0273+  0920             gettxt_backspace:
0274+  0920 7F          	dec d
0275+  0921 0A DB 08    	jmp gettxt_loop
0276+  0924             gettxt_end:
0277+  0924 19 00       	mov al, 0
0278+  0926 3E          	mov [d], al				; terminate string
0279+  0927 E7          	pop d
0280+  0928 E4          	pop a
0281+  0929 09          	ret
0282+  092A             
0283+  092A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0284+  092A             ; PRINT NEW LINE
0285+  092A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  092A             printnl:
0287+  092A D7          	push a
0288+  092B 10 00 0A    	mov a, $0A00
0289+  092E 05 03       	syscall sys_io
0290+  0930 10 00 0D    	mov a, $0D00
0291+  0933 05 03       	syscall sys_io
0292+  0935 E4          	pop a
0293+  0936 09          	ret
0294+  0937             
0295+  0937             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0296+  0937             ; strtoint
0297+  0937             ; 4 digit hex string number in d
0298+  0937             ; integer returned in A
0299+  0937             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0300+  0937             strtointx:
0301+  0937 D8          	push b
0302+  0938 32          	mov bl, [d]
0303+  0939 37          	mov bh, bl
0304+  093A 33 01 00    	mov bl, [d + 1]
0305+  093D 07 FD 07    	call atoi				; convert to int in AL
0306+  0940 23          	mov ah, al				; move to AH
0307+  0941 33 02 00    	mov bl, [d + 2]
0308+  0944 37          	mov bh, bl
0309+  0945 33 03 00    	mov bl, [d + 3]
0310+  0948 07 FD 07    	call atoi				; convert to int in AL
0311+  094B E5          	pop b
0312+  094C 09          	ret
0313+  094D             
0314+  094D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0315+  094D             ; strtoint
0316+  094D             ; 5 digit base10 string number in d
0317+  094D             ; integer returned in A
0318+  094D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0319+  094D             strtoint:
0320+  094D E2          	push si
0321+  094E D8          	push b
0322+  094F D9          	push c
0323+  0950 DA          	push d
0324+  0951 07 85 07    	call strlen			; get string length in C
0325+  0954 7E          	dec c
0326+  0955 FD 4E       	mov si, d
0327+  0957 12          	mov a, c
0328+  0958 FD 99       	shl a
0329+  095A 3B E5 07    	mov d, table_power
0330+  095D 59          	add d, a
0331+  095E 38 00 00    	mov c, 0
0332+  0961             strtoint_L0:
0333+  0961 F6          	lodsb			; load ASCII to al
0334+  0962 B9 00       	cmp al, 0
0335+  0964 C6 77 09    	je strtoint_end
0336+  0967 6F 30       	sub al, $30		; make into integer
0337+  0969 22 00       	mov ah, 0
0338+  096B 2A          	mov b, [d]
0339+  096C AC          	mul a, b			; result in B since it fits in 16bits
0340+  096D 11          	mov a, b
0341+  096E 28          	mov b, c
0342+  096F 54          	add a, b
0343+  0970 39          	mov c, a
0344+  0971 63 02 00    	sub d, 2
0345+  0974 0A 61 09    	jmp strtoint_L0
0346+  0977             strtoint_end:
0347+  0977 12          	mov a, c
0348+  0978 E7          	pop d
0349+  0979 E6          	pop c
0350+  097A E5          	pop b
0351+  097B EF          	pop si
0352+  097C 09          	ret
0353+  097D             
0354+  097D             
0355+  097D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  097D             ; PRINT NULL TERMINATED STRING
0357+  097D             ; pointer in D
0358+  097D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  097D             puts:
0360+  097D D7          	push a
0361+  097E DA          	push d
0362+  097F             puts_L1:
0363+  097F 1E          	mov al, [d]
0364+  0980 B9 00       	cmp al, 0
0365+  0982 C6 8E 09    	jz puts_END
0366+  0985 23          	mov ah, al
0367+  0986 19 00       	mov al, 0
0368+  0988 05 03       	syscall sys_io
0369+  098A 79          	inc d
0370+  098B 0A 7F 09    	jmp puts_L1
0371+  098E             puts_END:
0372+  098E E7          	pop d
0373+  098F E4          	pop a
0374+  0990 09          	ret
0375+  0991             
0376+  0991             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0377+  0991             ; PRINT N SIZE STRING
0378+  0991             ; pointer in D
0379+  0991             ; size in C
0380+  0991             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0381+  0991             putsn:
0382+  0991 DB          	push al
0383+  0992 DA          	push d
0384+  0993 D9          	push c
0385+  0994             putsn_L0:
0386+  0994 1E          	mov al, [d]
0387+  0995 23          	mov ah, al
0388+  0996 19 00       	mov al, 0
0389+  0998 05 03       	syscall sys_io
0390+  099A 79          	inc d
0391+  099B 7E          	dec c	
0392+  099C C2 00 00    	cmp c, 0
0393+  099F C7 94 09    	jne putsn_L0
0394+  09A2             putsn_end:
0395+  09A2 E6          	pop c
0396+  09A3 E7          	pop d
0397+  09A4 E8          	pop al
0398+  09A5 09          	ret
0399+  09A6             
0400+  09A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0401+  09A6             ; print 16bit decimal number
0402+  09A6             ; input number in A
0403+  09A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  09A6             print_u16d:
0405+  09A6 D7          	push a
0406+  09A7 D8          	push b
0407+  09A8 26 10 27    	mov b, 10000
0408+  09AB AE          	div a, b			; get 10000 coeff.
0409+  09AC 07 D2 09    	call print_zero_or_space
0410+  09AF 11          	mov a, b
0411+  09B0 26 E8 03    	mov b, 1000
0412+  09B3 AE          	div a, b			; get 10000 coeff.
0413+  09B4 07 D2 09    	call print_zero_or_space
0414+  09B7 11          	mov a, b
0415+  09B8 26 64 00    	mov b, 100
0416+  09BB AE          	div a, b
0417+  09BC 07 D2 09    	call print_zero_or_space
0418+  09BF 11          	mov a, b
0419+  09C0 26 0A 00    	mov b, 10
0420+  09C3 AE          	div a, b
0421+  09C4 07 D2 09    	call print_zero_or_space
0422+  09C7 11          	mov a, b
0423+  09C8 6A 30       	add al, $30
0424+  09CA 23          	mov ah, al
0425+  09CB 19 00       	mov al, 0
0426+  09CD 05 03       	syscall sys_io	; print coeff
0427+  09CF E5          	pop b
0428+  09D0 E4          	pop a
0429+  09D1 09          	ret
0430+  09D2             
0431+  09D2             
0432+  09D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  09D2             ; if A == 0, print space
0434+  09D2             ; else print A
0435+  09D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  09D2             print_zero_or_space:
0437+  09D2             	; cmp a, 0
0438+  09D2             	; jne print_number
0439+  09D2             	; mov ah, $20
0440+  09D2             	; call putchar
0441+  09D2             	; ret
0442+  09D2             print_number:
0443+  09D2 6A 30       	add al, $30
0444+  09D4 23          	mov ah, al
0445+  09D5 07 48 08    	call putchar
0446+  09D8 09          	ret
0447+  09D9             
0448+  09D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  09D9             ; PRINT 16BIT HEX INTEGER
0450+  09D9             ; integer value in reg B
0451+  09D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0452+  09D9             print_u16x:
0453+  09D9 D7          	push a
0454+  09DA D8          	push b
0455+  09DB DD          	push bl
0456+  09DC 30          	mov bl, bh
0457+  09DD 07 0F 08    	call itoa				; convert bh to char in A
0458+  09E0 2F          	mov bl, al				; save al
0459+  09E1 19 00       	mov al, 0
0460+  09E3 05 03       	syscall sys_io				; display AH
0461+  09E5 24          	mov ah, bl				; retrieve al
0462+  09E6 19 00       	mov al, 0
0463+  09E8 05 03       	syscall sys_io				; display AL
0464+  09EA             
0465+  09EA EA          	pop bl
0466+  09EB 07 0F 08    	call itoa				; convert bh to char in A
0467+  09EE 2F          	mov bl, al				; save al
0468+  09EF 19 00       	mov al, 0
0469+  09F1 05 03       	syscall sys_io				; display AH
0470+  09F3 24          	mov ah, bl				; retrieve al
0471+  09F4 19 00       	mov al, 0
0472+  09F6 05 03       	syscall sys_io				; display AL
0473+  09F8             
0474+  09F8 E5          	pop b
0475+  09F9 E4          	pop a
0476+  09FA 09          	ret
0477+  09FB             
0478+  09FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  09FB             ; INPUT 16BIT HEX INTEGER
0480+  09FB             ; read 16bit integer into A
0481+  09FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0482+  09FB             scan_u16x:
0483+  09FB F8 10 00    	enter 16
0484+  09FE D8          	push b
0485+  09FF DA          	push d
0486+  0A00             
0487+  0A00 FA F1 FF    	lea d, [bp + -15]
0488+  0A03 07 4F 08    	call gets				; get number
0489+  0A06             
0490+  0A06 32          	mov bl, [d]
0491+  0A07 37          	mov bh, bl
0492+  0A08 33 01 00    	mov bl, [d + 1]
0493+  0A0B 07 FD 07    	call atoi				; convert to int in AL
0494+  0A0E 23          	mov ah, al				; move to AH
0495+  0A0F             
0496+  0A0F 33 02 00    	mov bl, [d + 2]
0497+  0A12 37          	mov bh, bl
0498+  0A13 33 03 00    	mov bl, [d + 3]
0499+  0A16 07 FD 07    	call atoi				; convert to int in AL
0500+  0A19             
0501+  0A19 E7          	pop d
0502+  0A1A E5          	pop b
0503+  0A1B F9          	leave
0504+  0A1C 09          	ret
0505+  0A1D             
0506+  0A1D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0A1D             ; PRINT 8bit HEX INTEGER
0508+  0A1D             ; integer value in reg bl
0509+  0A1D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0510+  0A1D             print_u8x:
0511+  0A1D D7          	push a
0512+  0A1E DD          	push bl
0513+  0A1F             
0514+  0A1F 07 0F 08    	call itoa				; convert bl to char in A
0515+  0A22 2F          	mov bl, al				; save al
0516+  0A23 19 00       	mov al, 0
0517+  0A25 05 03       	syscall sys_io				; display AH
0518+  0A27 24          	mov ah, bl				; retrieve al
0519+  0A28 19 00       	mov al, 0
0520+  0A2A 05 03       	syscall sys_io				; display AL
0521+  0A2C             
0522+  0A2C EA          	pop bl
0523+  0A2D E4          	pop a
0524+  0A2E 09          	ret
0525+  0A2F             
0526+  0A2F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0A2F             ; print 8bit decimal unsigned number
0528+  0A2F             ; input number in AL
0529+  0A2F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0530+  0A2F             print_u8d:
0531+  0A2F D7          	push a
0532+  0A30 D8          	push b
0533+  0A31             
0534+  0A31 22 00       	mov ah, 0
0535+  0A33 26 64 00    	mov b, 100
0536+  0A36 AE          	div a, b
0537+  0A37 D8          	push b			; save remainder
0538+  0A38 B9 00       	cmp al, 0
0539+  0A3A C6 44 0A    	je skip100
0540+  0A3D 6A 30       	add al, $30
0541+  0A3F 23          	mov ah, al
0542+  0A40 19 00       	mov al, 0
0543+  0A42 05 03       	syscall sys_io	; print coeff
0544+  0A44             skip100:
0545+  0A44 E4          	pop a
0546+  0A45 22 00       	mov ah, 0
0547+  0A47 26 0A 00    	mov b, 10
0548+  0A4A AE          	div a, b
0549+  0A4B D8          	push b			; save remainder
0550+  0A4C B9 00       	cmp al, 0
0551+  0A4E C6 58 0A    	je skip10
0552+  0A51 6A 30       	add al, $30
0553+  0A53 23          	mov ah, al
0554+  0A54 19 00       	mov al, 0
0555+  0A56 05 03       	syscall sys_io	; print coeff
0556+  0A58             skip10:
0557+  0A58 E4          	pop a
0558+  0A59 1B          	mov al, bl
0559+  0A5A 6A 30       	add al, $30
0560+  0A5C 23          	mov ah, al
0561+  0A5D 19 00       	mov al, 0
0562+  0A5F 05 03       	syscall sys_io	; print coeff
0563+  0A61 E5          	pop b
0564+  0A62 E4          	pop a
0565+  0A63 09          	ret
0566+  0A64             
0567+  0A64             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0A64             ; INPUT 8BIT HEX INTEGER
0569+  0A64             ; read 8bit integer into AL
0570+  0A64             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  0A64             scan_u8x:
0572+  0A64 F8 04 00    	enter 4
0573+  0A67 D8          	push b
0574+  0A68 DA          	push d
0575+  0A69             
0576+  0A69 FA FD FF    	lea d, [bp + -3]
0577+  0A6C 07 4F 08    	call gets				; get number
0578+  0A6F             
0579+  0A6F 32          	mov bl, [d]
0580+  0A70 37          	mov bh, bl
0581+  0A71 33 01 00    	mov bl, [d + 1]
0582+  0A74 07 FD 07    	call atoi				; convert to int in AL
0583+  0A77             
0584+  0A77 E7          	pop d
0585+  0A78 E5          	pop b
0586+  0A79 F9          	leave
0587+  0A7A 09          	ret
0588+  0A7B             
0589+  0A7B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0590+  0A7B             ; input decimal number
0591+  0A7B             ; result in A
0592+  0A7B             ; 655'\0'
0593+  0A7B             ; low--------high
0594+  0A7B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0595+  0A7B             scan_u16d:
0596+  0A7B F8 08 00    	enter 8
0597+  0A7E E2          	push si
0598+  0A7F D8          	push b
0599+  0A80 D9          	push c
0600+  0A81 DA          	push d
0601+  0A82 FA F9 FF    	lea d, [bp +- 7]
0602+  0A85 07 4F 08    	call gets
0603+  0A88 07 85 07    	call strlen			; get string length in C
0604+  0A8B 7E          	dec c
0605+  0A8C FD 4E       	mov si, d
0606+  0A8E 12          	mov a, c
0607+  0A8F FD 99       	shl a
0608+  0A91 3B E5 07    	mov d, table_power
0609+  0A94 59          	add d, a
0610+  0A95 38 00 00    	mov c, 0
0611+  0A98             mul_loop:
0612+  0A98 F6          	lodsb			; load ASCII to al
0613+  0A99 B9 00       	cmp al, 0
0614+  0A9B C6 AE 0A    	je mul_exit
0615+  0A9E 6F 30       	sub al, $30		; make into integer
0616+  0AA0 22 00       	mov ah, 0
0617+  0AA2 2A          	mov b, [d]
0618+  0AA3 AC          	mul a, b			; result in B since it fits in 16bits
0619+  0AA4 11          	mov a, b
0620+  0AA5 28          	mov b, c
0621+  0AA6 54          	add a, b
0622+  0AA7 39          	mov c, a
0623+  0AA8 63 02 00    	sub d, 2
0624+  0AAB 0A 98 0A    	jmp mul_loop
0625+  0AAE             mul_exit:
0626+  0AAE 12          	mov a, c
0627+  0AAF E7          	pop d
0628+  0AB0 E6          	pop c
0629+  0AB1 E5          	pop b
0630+  0AB2 EF          	pop si
0631+  0AB3 F9          	leave
0632+  0AB4 09          	ret
0018   0AB5             .include "ctype.asm"
0001+  0AB5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0AB5             ; ctype.s
0003+  0AB5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0AB5             
0005+  0AB5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0AB5             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0AB5             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0AB5             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0AB5             ;; characters are supported.
0010+  0AB5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0AB5             ;; isalnum 
0012+  0AB5             ;; isalpha 
0013+  0AB5             ;; islower 
0014+  0AB5             ;; isupper 
0015+  0AB5             ;; isdigit 
0016+  0AB5             ;; isxdigit
0017+  0AB5             ;; iscntrl 
0018+  0AB5             ;; isgraph 
0019+  0AB5             ;; isspace 
0020+  0AB5             ;; isblank 
0021+  0AB5             ;; isprint 
0022+  0AB5             ;; ispunct 
0023+  0AB5             ;; tolower 
0024+  0AB5             ;; toupper
0025+  0AB5             
0026+  0AB5             
0027+  0AB5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0AB5             ;; IS ALPHANUMERIC
0029+  0AB5             ;; sets ZF according with result
0030+  0AB5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0AB5             isalnum:
0032+  0AB5 07 D2 0A    	call isalpha
0033+  0AB8 C6 BE 0A    	je isalnum_exit
0034+  0ABB 07 BF 0A    	call isdigit
0035+  0ABE             isalnum_exit:
0036+  0ABE 09          	ret	
0037+  0ABF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0ABF             ;; IS DIGIT
0039+  0ABF             ;; sets ZF according with result
0040+  0ABF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0ABF             isdigit:
0042+  0ABF DB          	push al
0043+  0AC0 B9 30       	cmp al, '0'
0044+  0AC2 C8 CE 0A    	jlu isdigit_false
0045+  0AC5 B9 39       	cmp al, '9'
0046+  0AC7 D1 CE 0A    	jgu isdigit_false
0047+  0ACA 87 00       	and al, 0	; set ZF
0048+  0ACC E8          	pop al
0049+  0ACD 09          	ret
0050+  0ACE             isdigit_false:
0051+  0ACE 8B 01       	or al, 1	; clear ZF
0052+  0AD0 E8          	pop al
0053+  0AD1 09          	ret	
0054+  0AD2             	
0055+  0AD2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0AD2             ;; IS ALPHA
0057+  0AD2             ;; sets ZF according with result
0058+  0AD2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0AD2             isalpha:
0060+  0AD2 DB          	push al
0061+  0AD3 B9 5F       	cmp al, '_'
0062+  0AD5 C6 F5 0A    	je isalpha_true
0063+  0AD8 B9 2E       	cmp al, '.'
0064+  0ADA C6 F5 0A    	je isalpha_true
0065+  0ADD B9 41       	cmp al, 'A'
0066+  0ADF C8 F1 0A    	jlu isalpha_false
0067+  0AE2 B9 7A       	cmp al, 'z'
0068+  0AE4 D1 F1 0A    	jgu isalpha_false
0069+  0AE7 B9 5A       	cmp al, 'Z'
0070+  0AE9 D0 F5 0A    	jleu isalpha_true
0071+  0AEC B9 61       	cmp al, 'a'
0072+  0AEE C9 F5 0A    	jgeu isalpha_true
0073+  0AF1             isalpha_false:
0074+  0AF1 8B 01       	or al, 1	; clear ZF
0075+  0AF3 E8          	pop al
0076+  0AF4 09          	ret
0077+  0AF5             isalpha_true:
0078+  0AF5 87 00       	and al, 0	; set ZF
0079+  0AF7 E8          	pop al
0080+  0AF8 09          	ret
0081+  0AF9             
0082+  0AF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0AF9             ;; IS PATH-ALPHA
0084+  0AF9             ;; sets ZF according with result
0085+  0AF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0AF9             ispath:
0087+  0AF9 DB          	push al
0088+  0AFA 07 BF 0A    	call isdigit
0089+  0AFD C6 27 0B    	je ispath_true
0090+  0B00 B9 5F       	cmp al, '_'
0091+  0B02 C6 27 0B    	je ispath_true
0092+  0B05 B9 2F       	cmp al, '/'
0093+  0B07 C6 27 0B    	je ispath_true
0094+  0B0A B9 2E       	cmp al, '.'
0095+  0B0C C6 27 0B    	je ispath_true
0096+  0B0F B9 41       	cmp al, 'A'
0097+  0B11 C8 23 0B    	jlu ispath_false
0098+  0B14 B9 7A       	cmp al, 'z'
0099+  0B16 D1 23 0B    	jgu ispath_false
0100+  0B19 B9 5A       	cmp al, 'Z'
0101+  0B1B D0 27 0B    	jleu ispath_true
0102+  0B1E B9 61       	cmp al, 'a'
0103+  0B20 C9 27 0B    	jgeu ispath_true
0104+  0B23             ispath_false:
0105+  0B23 8B 01       	or al, 1	; clear ZF
0106+  0B25 E8          	pop al
0107+  0B26 09          	ret
0108+  0B27             ispath_true:
0109+  0B27 87 00       	and al, 0	; set ZF
0110+  0B29 E8          	pop al
0111+  0B2A 09          	ret
0112+  0B2B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B2B             ;; IS SPACE
0114+  0B2B             ;; sets ZF according with result
0115+  0B2B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B2B             isspace:
0117+  0B2B B9 20       	cmp al, $20		; ' '
0118+  0B2D C6 41 0B    	je isspace_exit
0119+  0B30 B9 09       	cmp al, $09		; '\t'
0120+  0B32 C6 41 0B    	je isspace_exit
0121+  0B35 B9 0A       	cmp al, $0A		; '\n'
0122+  0B37 C6 41 0B    	je isspace_exit
0123+  0B3A B9 0D       	cmp al, $0D		; '\r'
0124+  0B3C C6 41 0B    	je isspace_exit
0125+  0B3F B9 0B       	cmp al, $0B		; '\v'
0126+  0B41             isspace_exit:
0127+  0B41 09          	ret	
0128+  0B42             
0129+  0B42             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B42             ; TO LOWER
0131+  0B42             ; input in AL
0132+  0B42             ; output in AL
0133+  0B42             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B42             to_lower:
0135+  0B42 B9 5A       	cmp al, 'Z'
0136+  0B44 D1 49 0B    	jgu to_lower_ret
0137+  0B47 6A 20       	add al, $20				; convert to lower case
0138+  0B49             to_lower_ret:
0139+  0B49 09          	ret
0140+  0B4A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B4A             ; TO UPPER
0142+  0B4A             ; input in AL
0143+  0B4A             ; output in AL
0144+  0B4A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B4A             to_upper:
0146+  0B4A B9 61       	cmp al, 'a'
0147+  0B4C C8 51 0B    	jlu to_upper_ret
0148+  0B4F 6F 20       	sub al, $20			; convert to upper case
0149+  0B51             to_upper_ret:
0150+  0B51 09          	ret
0151+  0B52             
0019   0B52             
0020   0B52             .end
0021   0B52             
0022   0B52             
0023   0B52             
tasm: Number of errors = 0
