ROM0
typ0
typ1
u_offset_0
u_offset_1
u_offset_2
u_offset_3
u_offset_4
u_offset_5

ROM1
u_offset_6
cond_invert
cond_flag_src
cond_sel_0
cond_sel_1
cond_sel_2
cond_sel_3
escape

ROM2
**** AY-BA
u_zf_in_src_0
u_zf_in_src_1
u_cf_in_src_0
u_cf_in_src_1
u_sf_in_src
u_of_in_src
ir_wrt
status_flags_wrt

ROM3
**** AU-AV
shift_src_0
shift_src_1
shift_src_2
zbus_in_src_0
zbus_in_src_1
alu_a_src_0          
alu_a_src_1          
alu_a_src_2

ROM4
**** AP-AR
alu_a_src_3
alu_a_src_4
alu_a_src_5
alu_op_0
alu_op_1
alu_op_2
alu_op_3
alu_mode

ROM5
**** AU-AV 21
alu_cf_in_src0
alu_cf_in_src1
alu_cf_in_invert
zf_in_src_0
zf_in_src_1
alu_cf_out_invert
cf_in_src_0
cf_in_src_1

ROM6
**** AW-AX 31
cf_in_src_2
sf_in_src_0
sf_in_src_1
of_in_src_0
of_in_src_1
of_in_src_2
rd                         
wr                         
                         

only these signals are sent out to second board.
alu_a_src_0          
alu_a_src_1          
alu_a_src_2
alu_a_src_3
alu_a_src_4
alu_b_src_0
alu_b_src_1

ROM7
**** BD-BE
alu_b_src_0
alu_b_src_1
alu_b_src_2
display_reg_load   << used during fetch to select and load register display
dl_wrt
dh_wrt
cl_wrt
ch_wrt

ROM8
bl_wrt
bh_wrt
al_wrt
ah_wrt
mdr_in_src
mdr_out_src
mdr_out_en      << must invert before sending
mdr_l_wrt       << but there is no need to invert. we use active low micro-programming for these

ROM9
mdr_h_wrt
tdr_l_wrt
tdr_h_wrt
di_l_wrt
di_h_wrt
si_l_wrt
si_h_wrt
mar_l_wrt

ROM10
mar_h_wrt
bp_l_wrt
bp_h_wrt
pc_l_wrt
pc_h_wrt
sp_l_wrt
sp_h_wrt
unused

ROM11
unused
int_vector_wrt
irq_masks_wrt          << wrt signals are also active low,      
mar_in_src
int_ack                << active high
clear_all_ints
ptb_wrt
page_table_we

ROM12
mdr_to_pagetable_data_buffer
force_user_ptb         << goes to board as PAGE_TABLE_ADDR_SOURCE via OR gate
unused
unused
unused
unused
gl_wrt
gh_wrt


ROM13
**** BW-BX 12
immy_0
immy_1
immy_2
immy_3
immy_4
immy_5
immy_6
immy_7



AVAILABLE BACKPLANE SIGNALS:
13, 14
17 .. 74

USED BACKPLANE SIGNALS:
SIGNAL NAME         BACKPLANE PIN NUMBER
clk                 13 and 31
rst                 14
ide_activity        22
panel_regsel_4      23
panel_regsel_3      24
panel_regsel_2      25
panel_regsel_1      26
panel_regsel_0      27
trace_continue      28
halt                29
dma_ack             30
dma_req             32
wait                at 33
wr                  at 34
rd                  at 35
data_0-data_7       43 start
mem_io              at 44 
addr_0-addr_21      66 start
int_0-int_7         74 start - INT0 is at 74 ... INT7 is at 67


SPECIAL MICROCODE ADDRESSES
fetch             - 00000001000000 = 0x0040 = 64d
interruption      - 00000001010000 = 0x0050 = 80d



wire at AX34 has a little cut. if something ever goes weird, check this.

*********************************************************************************************


22 bit address space + memIO bit


*** PAGING OFF

>> 64KB space 
>> address space is mapped to device space
>> 32KB ROM, the rest is RAM + remaining devices



Sol-1 runned its first program on 12th June 2020.
