0001   0000             ; --- FILENAME: largenumnSol1.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402             _for1_init:
0011   0402 26 00 00      mov b, 0
0012   0405 FD 42 E4 2E   mov [__pos], b
0013   0409             _for1_cond:
0014   0409 29 E4 2E      mov b, [__pos] ; pos
0015   040C D7            push a
0016   040D 11            mov a, b
0017   040E 26 3C 00      mov b, 60
0018   0411 B0            cmp a, b
0019   0412 0E            lodflgs
0020   0413 87 02         and al, %00000010 ; <
0021   0415 FD 9C         shr al
0022   0417 22 00         mov ah, 0
0023   0419 27            mov b, a
0024   041A E4            pop a
0025   041B C0 00 00      cmp b, 0
0026   041E C6 3B 04      je _for1_exit
0027   0421             _for1_block:
0028   0421 26 00 00      mov b, 0
0029   0424 FD AB         swp b
0030   0426 D8            push b
0031   0427 07 EB 11      call prnnum
0032   042A 51 02 00      add sp, 2
0033   042D             _for1_update:
0034   042D 29 E4 2E      mov b, [__pos] ; pos
0035   0430 11            mov a, b
0036   0431 FD 77         inc b
0037   0433 FD 42 E4 2E   mov [__pos], b
0038   0437 27            mov b, a
0039   0438 0A 09 04      jmp _for1_cond
0040   043B             _for1_exit:
0041   043B 07 F5 11      call prnnl
0042   043E             _for2_init:
0043   043E 26 06 00      mov b, 6
0044   0441 FD 42 E4 2E   mov [__pos], b
0045   0445             _for2_cond:
0046   0445 29 E4 2E      mov b, [__pos] ; pos
0047   0448 D7            push a
0048   0449 11            mov a, b
0049   044A 26 00 00      mov b, 0
0050   044D B0            cmp a, b
0051   044E 0E            lodflgs
0052   044F 87 03         and al, %00000011
0053   0451 B9 00         cmp al, 0
0054   0453 0E            lodflgs
0055   0454 22 00         mov ah, 0
0056   0456 27            mov b, a
0057   0457 E4            pop a
0058   0458 C0 00 00      cmp b, 0
0059   045B C6 CE 05      je _for2_exit
0060   045E             _for2_block:
0061   045E 07 CA 11      call readint
0062   0461 FD 42 BE 2D   mov [__ionr], b
0063   0465 29 BE 2D      mov b, [__ionr] ; ionr
0064   0468 D7            push a
0065   0469 11            mov a, b
0066   046A 26 10 27      mov b, 10000
0067   046D AE            div a, b
0068   046E FD 78         mov g, a
0069   0470 11            mov a, b
0070   0471 FD 27         mov b, g
0071   0473 E4            pop a
0072   0474 FD 42 C0 2D   mov [__ioshift], b
0073   0478 29 C0 2D      mov b, [__ioshift] ; ioshift
0074   047B D7            push a
0075   047C 11            mov a, b
0076   047D 26 10 27      mov b, 10000
0077   0480 AC            mul a, b
0078   0481 E4            pop a
0079   0482 FD 42 C0 2D   mov [__ioshift], b
0080   0486 29 BE 2D      mov b, [__ionr] ; ionr
0081   0489 D7            push a
0082   048A 11            mov a, b
0083   048B 29 C0 2D      mov b, [__ioshift] ; ioshift
0084   048E 60            sub a, b
0085   048F 27            mov b, a
0086   0490 E4            pop a
0087   0491 FD 42 BE 2D   mov [__ionr], b
0088   0495 29 BC 2D      mov b, [__ionum]
0089   0498 74            mov d, b
0090   0499 DA            push d
0091   049A 29 E4 2E      mov b, [__pos] ; pos
0092   049D D7            push a
0093   049E 11            mov a, b
0094   049F 26 01 00      mov b, 1
0095   04A2 60            sub a, b
0096   04A3 27            mov b, a
0097   04A4 E4            pop a
0098   04A5 E7            pop d
0099   04A6 10 02 00      mov a, 2
0100   04A9 AC            mul a, b
0101   04AA 5A            add d, b
0102   04AB DA            push d
0103   04AC 29 BE 2D      mov b, [__ionr] ; ionr
0104   04AF E7            pop d
0105   04B0 11            mov a, b
0106   04B1 43            mov [d], a
0107   04B2             _for3_init:
0108   04B2 26 06 00      mov b, 6
0109   04B5 FD 42 0C 2E   mov [__datumpos], b
0110   04B9             _for3_cond:
0111   04B9 29 0C 2E      mov b, [__datumpos] ; datumpos
0112   04BC D7            push a
0113   04BD 11            mov a, b
0114   04BE 29 E4 2E      mov b, [__pos] ; pos
0115   04C1 B0            cmp a, b
0116   04C2 0E            lodflgs
0117   04C3 87 03         and al, %00000011
0118   04C5 8F 02         xor al, %00000010 ; >=
0119   04C7 B9 00         cmp al, 0
0120   04C9 0E            lodflgs
0121   04CA 8F 01         xor al, %00000001
0122   04CC 22 00         mov ah, 0
0123   04CE 27            mov b, a
0124   04CF E4            pop a
0125   04D0 C0 00 00      cmp b, 0
0126   04D3 C6 BD 05      je _for3_exit
0127   04D6             _for3_block:
0128   04D6             _if4_cond:
0129   04D6 29 BC 2D      mov b, [__ionum]
0130   04D9 D7            push a
0131   04DA 74            mov d, b
0132   04DB DA            push d
0133   04DC 29 0C 2E      mov b, [__datumpos] ; datumpos
0134   04DF D7            push a
0135   04E0 11            mov a, b
0136   04E1 26 01 00      mov b, 1
0137   04E4 60            sub a, b
0138   04E5 27            mov b, a
0139   04E6 E4            pop a
0140   04E7 E7            pop d
0141   04E8 10 02 00      mov a, 2
0142   04EB AC            mul a, b
0143   04EC 5A            add d, b
0144   04ED 2A            mov b, [d]
0145   04EE E4            pop a
0146   04EF D7            push a
0147   04F0 11            mov a, b
0148   04F1 26 E8 03      mov b, 1000
0149   04F4 B0            cmp a, b
0150   04F5 0E            lodflgs
0151   04F6 87 02         and al, %00000010 ; <
0152   04F8 FD 9C         shr al
0153   04FA 22 00         mov ah, 0
0154   04FC 27            mov b, a
0155   04FD E4            pop a
0156   04FE C0 00 00      cmp b, 0
0157   0501 C6 13 05      je _if4_exit
0158   0504             _if4_true:
0159   0504 26 00 00      mov b, 0
0160   0507 FD AB         swp b
0161   0509 D8            push b
0162   050A 07 EB 11      call prnnum
0163   050D 51 02 00      add sp, 2
0164   0510 0A 13 05      jmp _if4_exit
0165   0513             _if4_exit:
0166   0513             _if5_cond:
0167   0513 29 BC 2D      mov b, [__ionum]
0168   0516 D7            push a
0169   0517 74            mov d, b
0170   0518 DA            push d
0171   0519 29 0C 2E      mov b, [__datumpos] ; datumpos
0172   051C D7            push a
0173   051D 11            mov a, b
0174   051E 26 01 00      mov b, 1
0175   0521 60            sub a, b
0176   0522 27            mov b, a
0177   0523 E4            pop a
0178   0524 E7            pop d
0179   0525 10 02 00      mov a, 2
0180   0528 AC            mul a, b
0181   0529 5A            add d, b
0182   052A 2A            mov b, [d]
0183   052B E4            pop a
0184   052C D7            push a
0185   052D 11            mov a, b
0186   052E 26 64 00      mov b, 100
0187   0531 B0            cmp a, b
0188   0532 0E            lodflgs
0189   0533 87 02         and al, %00000010 ; <
0190   0535 FD 9C         shr al
0191   0537 22 00         mov ah, 0
0192   0539 27            mov b, a
0193   053A E4            pop a
0194   053B C0 00 00      cmp b, 0
0195   053E C6 50 05      je _if5_exit
0196   0541             _if5_true:
0197   0541 26 00 00      mov b, 0
0198   0544 FD AB         swp b
0199   0546 D8            push b
0200   0547 07 EB 11      call prnnum
0201   054A 51 02 00      add sp, 2
0202   054D 0A 50 05      jmp _if5_exit
0203   0550             _if5_exit:
0204   0550             _if6_cond:
0205   0550 29 BC 2D      mov b, [__ionum]
0206   0553 D7            push a
0207   0554 74            mov d, b
0208   0555 DA            push d
0209   0556 29 0C 2E      mov b, [__datumpos] ; datumpos
0210   0559 D7            push a
0211   055A 11            mov a, b
0212   055B 26 01 00      mov b, 1
0213   055E 60            sub a, b
0214   055F 27            mov b, a
0215   0560 E4            pop a
0216   0561 E7            pop d
0217   0562 10 02 00      mov a, 2
0218   0565 AC            mul a, b
0219   0566 5A            add d, b
0220   0567 2A            mov b, [d]
0221   0568 E4            pop a
0222   0569 D7            push a
0223   056A 11            mov a, b
0224   056B 26 0A 00      mov b, 10
0225   056E B0            cmp a, b
0226   056F 0E            lodflgs
0227   0570 87 02         and al, %00000010 ; <
0228   0572 FD 9C         shr al
0229   0574 22 00         mov ah, 0
0230   0576 27            mov b, a
0231   0577 E4            pop a
0232   0578 C0 00 00      cmp b, 0
0233   057B C6 8D 05      je _if6_exit
0234   057E             _if6_true:
0235   057E 26 00 00      mov b, 0
0236   0581 FD AB         swp b
0237   0583 D8            push b
0238   0584 07 EB 11      call prnnum
0239   0587 51 02 00      add sp, 2
0240   058A 0A 8D 05      jmp _if6_exit
0241   058D             _if6_exit:
0242   058D 29 BC 2D      mov b, [__ionum]
0243   0590 D7            push a
0244   0591 74            mov d, b
0245   0592 DA            push d
0246   0593 29 0C 2E      mov b, [__datumpos] ; datumpos
0247   0596 D7            push a
0248   0597 11            mov a, b
0249   0598 26 01 00      mov b, 1
0250   059B 60            sub a, b
0251   059C 27            mov b, a
0252   059D E4            pop a
0253   059E E7            pop d
0254   059F 10 02 00      mov a, 2
0255   05A2 AC            mul a, b
0256   05A3 5A            add d, b
0257   05A4 2A            mov b, [d]
0258   05A5 E4            pop a
0259   05A6 FD AB         swp b
0260   05A8 D8            push b
0261   05A9 07 EB 11      call prnnum
0262   05AC 51 02 00      add sp, 2
0263   05AF             _for3_update:
0264   05AF 29 0C 2E      mov b, [__datumpos] ; datumpos
0265   05B2 11            mov a, b
0266   05B3 FD 7D         dec b
0267   05B5 FD 42 0C 2E   mov [__datumpos], b
0268   05B9 27            mov b, a
0269   05BA 0A B9 04      jmp _for3_cond
0270   05BD             _for3_exit:
0271   05BD 07 F5 11      call prnnl
0272   05C0             _for2_update:
0273   05C0 29 E4 2E      mov b, [__pos] ; pos
0274   05C3 11            mov a, b
0275   05C4 FD 7D         dec b
0276   05C6 FD 42 E4 2E   mov [__pos], b
0277   05CA 27            mov b, a
0278   05CB 0A 45 04      jmp _for2_cond
0279   05CE             _for2_exit:
0280   05CE 26 00 00      mov b, 0
0281   05D1 FD 42 0C 2E   mov [__datumpos], b
0282   05D5             _for7_init:
0283   05D5 29 0C 2E      mov b, [__datumpos] ; datumpos
0284   05D8 D7            push a
0285   05D9 11            mov a, b
0286   05DA 26 06 00      mov b, 6
0287   05DD AC            mul a, b
0288   05DE E4            pop a
0289   05DF FD 42 E4 2E   mov [__pos], b
0290   05E3             _for7_cond:
0291   05E3 29 E4 2E      mov b, [__pos] ; pos
0292   05E6 D7            push a
0293   05E7 11            mov a, b
0294   05E8 29 0C 2E      mov b, [__datumpos] ; datumpos
0295   05EB D7            push a
0296   05EC 11            mov a, b
0297   05ED 26 06 00      mov b, 6
0298   05F0 AC            mul a, b
0299   05F1 E4            pop a
0300   05F2 D7            push a
0301   05F3 11            mov a, b
0302   05F4 26 06 00      mov b, 6
0303   05F7 54            add a, b
0304   05F8 27            mov b, a
0305   05F9 E4            pop a
0306   05FA B0            cmp a, b
0307   05FB 0E            lodflgs
0308   05FC 87 02         and al, %00000010 ; <
0309   05FE FD 9C         shr al
0310   0600 22 00         mov ah, 0
0311   0602 27            mov b, a
0312   0603 E4            pop a
0313   0604 C0 00 00      cmp b, 0
0314   0607 C6 4A 06      je _for7_exit
0315   060A             _for7_block:
0316   060A 29 0A 2E      mov b, [__datum]
0317   060D 74            mov d, b
0318   060E DA            push d
0319   060F 29 E4 2E      mov b, [__pos] ; pos
0320   0612 E7            pop d
0321   0613 10 02 00      mov a, 2
0322   0616 AC            mul a, b
0323   0617 5A            add d, b
0324   0618 DA            push d
0325   0619 29 BC 2D      mov b, [__ionum]
0326   061C D7            push a
0327   061D 74            mov d, b
0328   061E DA            push d
0329   061F 29 E4 2E      mov b, [__pos] ; pos
0330   0622 D7            push a
0331   0623 11            mov a, b
0332   0624 29 0C 2E      mov b, [__datumpos] ; datumpos
0333   0627 D7            push a
0334   0628 11            mov a, b
0335   0629 26 06 00      mov b, 6
0336   062C AC            mul a, b
0337   062D E4            pop a
0338   062E 60            sub a, b
0339   062F 27            mov b, a
0340   0630 E4            pop a
0341   0631 E7            pop d
0342   0632 10 02 00      mov a, 2
0343   0635 AC            mul a, b
0344   0636 5A            add d, b
0345   0637 2A            mov b, [d]
0346   0638 E4            pop a
0347   0639 E7            pop d
0348   063A 11            mov a, b
0349   063B 43            mov [d], a
0350   063C             _for7_update:
0351   063C 29 E4 2E      mov b, [__pos] ; pos
0352   063F 11            mov a, b
0353   0640 FD 77         inc b
0354   0642 FD 42 E4 2E   mov [__pos], b
0355   0646 27            mov b, a
0356   0647 0A E3 05      jmp _for7_cond
0357   064A             _for7_exit:
0358   064A             _for8_init:
0359   064A 26 00 00      mov b, 0
0360   064D FD 42 E4 2E   mov [__pos], b
0361   0651             _for8_cond:
0362   0651 29 E4 2E      mov b, [__pos] ; pos
0363   0654 D7            push a
0364   0655 11            mov a, b
0365   0656 26 3C 00      mov b, 60
0366   0659 B0            cmp a, b
0367   065A 0E            lodflgs
0368   065B 87 02         and al, %00000010 ; <
0369   065D FD 9C         shr al
0370   065F 22 00         mov ah, 0
0371   0661 27            mov b, a
0372   0662 E4            pop a
0373   0663 C0 00 00      cmp b, 0
0374   0666 C6 83 06      je _for8_exit
0375   0669             _for8_block:
0376   0669 26 00 00      mov b, 0
0377   066C FD AB         swp b
0378   066E D8            push b
0379   066F 07 EB 11      call prnnum
0380   0672 51 02 00      add sp, 2
0381   0675             _for8_update:
0382   0675 29 E4 2E      mov b, [__pos] ; pos
0383   0678 11            mov a, b
0384   0679 FD 77         inc b
0385   067B FD 42 E4 2E   mov [__pos], b
0386   067F 27            mov b, a
0387   0680 0A 51 06      jmp _for8_cond
0388   0683             _for8_exit:
0389   0683 07 F5 11      call prnnl
0390   0686             _for9_init:
0391   0686 26 06 00      mov b, 6
0392   0689 FD 42 E4 2E   mov [__pos], b
0393   068D             _for9_cond:
0394   068D 29 E4 2E      mov b, [__pos] ; pos
0395   0690 D7            push a
0396   0691 11            mov a, b
0397   0692 26 00 00      mov b, 0
0398   0695 B0            cmp a, b
0399   0696 0E            lodflgs
0400   0697 87 03         and al, %00000011
0401   0699 B9 00         cmp al, 0
0402   069B 0E            lodflgs
0403   069C 22 00         mov ah, 0
0404   069E 27            mov b, a
0405   069F E4            pop a
0406   06A0 C0 00 00      cmp b, 0
0407   06A3 C6 16 08      je _for9_exit
0408   06A6             _for9_block:
0409   06A6 07 CA 11      call readint
0410   06A9 FD 42 BE 2D   mov [__ionr], b
0411   06AD 29 BE 2D      mov b, [__ionr] ; ionr
0412   06B0 D7            push a
0413   06B1 11            mov a, b
0414   06B2 26 10 27      mov b, 10000
0415   06B5 AE            div a, b
0416   06B6 FD 78         mov g, a
0417   06B8 11            mov a, b
0418   06B9 FD 27         mov b, g
0419   06BB E4            pop a
0420   06BC FD 42 C0 2D   mov [__ioshift], b
0421   06C0 29 C0 2D      mov b, [__ioshift] ; ioshift
0422   06C3 D7            push a
0423   06C4 11            mov a, b
0424   06C5 26 10 27      mov b, 10000
0425   06C8 AC            mul a, b
0426   06C9 E4            pop a
0427   06CA FD 42 C0 2D   mov [__ioshift], b
0428   06CE 29 BE 2D      mov b, [__ionr] ; ionr
0429   06D1 D7            push a
0430   06D2 11            mov a, b
0431   06D3 29 C0 2D      mov b, [__ioshift] ; ioshift
0432   06D6 60            sub a, b
0433   06D7 27            mov b, a
0434   06D8 E4            pop a
0435   06D9 FD 42 BE 2D   mov [__ionr], b
0436   06DD 29 BC 2D      mov b, [__ionum]
0437   06E0 74            mov d, b
0438   06E1 DA            push d
0439   06E2 29 E4 2E      mov b, [__pos] ; pos
0440   06E5 D7            push a
0441   06E6 11            mov a, b
0442   06E7 26 01 00      mov b, 1
0443   06EA 60            sub a, b
0444   06EB 27            mov b, a
0445   06EC E4            pop a
0446   06ED E7            pop d
0447   06EE 10 02 00      mov a, 2
0448   06F1 AC            mul a, b
0449   06F2 5A            add d, b
0450   06F3 DA            push d
0451   06F4 29 BE 2D      mov b, [__ionr] ; ionr
0452   06F7 E7            pop d
0453   06F8 11            mov a, b
0454   06F9 43            mov [d], a
0455   06FA             _for10_init:
0456   06FA 26 06 00      mov b, 6
0457   06FD FD 42 0C 2E   mov [__datumpos], b
0458   0701             _for10_cond:
0459   0701 29 0C 2E      mov b, [__datumpos] ; datumpos
0460   0704 D7            push a
0461   0705 11            mov a, b
0462   0706 29 E4 2E      mov b, [__pos] ; pos
0463   0709 B0            cmp a, b
0464   070A 0E            lodflgs
0465   070B 87 03         and al, %00000011
0466   070D 8F 02         xor al, %00000010 ; >=
0467   070F B9 00         cmp al, 0
0468   0711 0E            lodflgs
0469   0712 8F 01         xor al, %00000001
0470   0714 22 00         mov ah, 0
0471   0716 27            mov b, a
0472   0717 E4            pop a
0473   0718 C0 00 00      cmp b, 0
0474   071B C6 05 08      je _for10_exit
0475   071E             _for10_block:
0476   071E             _if11_cond:
0477   071E 29 BC 2D      mov b, [__ionum]
0478   0721 D7            push a
0479   0722 74            mov d, b
0480   0723 DA            push d
0481   0724 29 0C 2E      mov b, [__datumpos] ; datumpos
0482   0727 D7            push a
0483   0728 11            mov a, b
0484   0729 26 01 00      mov b, 1
0485   072C 60            sub a, b
0486   072D 27            mov b, a
0487   072E E4            pop a
0488   072F E7            pop d
0489   0730 10 02 00      mov a, 2
0490   0733 AC            mul a, b
0491   0734 5A            add d, b
0492   0735 2A            mov b, [d]
0493   0736 E4            pop a
0494   0737 D7            push a
0495   0738 11            mov a, b
0496   0739 26 E8 03      mov b, 1000
0497   073C B0            cmp a, b
0498   073D 0E            lodflgs
0499   073E 87 02         and al, %00000010 ; <
0500   0740 FD 9C         shr al
0501   0742 22 00         mov ah, 0
0502   0744 27            mov b, a
0503   0745 E4            pop a
0504   0746 C0 00 00      cmp b, 0
0505   0749 C6 5B 07      je _if11_exit
0506   074C             _if11_true:
0507   074C 26 00 00      mov b, 0
0508   074F FD AB         swp b
0509   0751 D8            push b
0510   0752 07 EB 11      call prnnum
0511   0755 51 02 00      add sp, 2
0512   0758 0A 5B 07      jmp _if11_exit
0513   075B             _if11_exit:
0514   075B             _if12_cond:
0515   075B 29 BC 2D      mov b, [__ionum]
0516   075E D7            push a
0517   075F 74            mov d, b
0518   0760 DA            push d
0519   0761 29 0C 2E      mov b, [__datumpos] ; datumpos
0520   0764 D7            push a
0521   0765 11            mov a, b
0522   0766 26 01 00      mov b, 1
0523   0769 60            sub a, b
0524   076A 27            mov b, a
0525   076B E4            pop a
0526   076C E7            pop d
0527   076D 10 02 00      mov a, 2
0528   0770 AC            mul a, b
0529   0771 5A            add d, b
0530   0772 2A            mov b, [d]
0531   0773 E4            pop a
0532   0774 D7            push a
0533   0775 11            mov a, b
0534   0776 26 64 00      mov b, 100
0535   0779 B0            cmp a, b
0536   077A 0E            lodflgs
0537   077B 87 02         and al, %00000010 ; <
0538   077D FD 9C         shr al
0539   077F 22 00         mov ah, 0
0540   0781 27            mov b, a
0541   0782 E4            pop a
0542   0783 C0 00 00      cmp b, 0
0543   0786 C6 98 07      je _if12_exit
0544   0789             _if12_true:
0545   0789 26 00 00      mov b, 0
0546   078C FD AB         swp b
0547   078E D8            push b
0548   078F 07 EB 11      call prnnum
0549   0792 51 02 00      add sp, 2
0550   0795 0A 98 07      jmp _if12_exit
0551   0798             _if12_exit:
0552   0798             _if13_cond:
0553   0798 29 BC 2D      mov b, [__ionum]
0554   079B D7            push a
0555   079C 74            mov d, b
0556   079D DA            push d
0557   079E 29 0C 2E      mov b, [__datumpos] ; datumpos
0558   07A1 D7            push a
0559   07A2 11            mov a, b
0560   07A3 26 01 00      mov b, 1
0561   07A6 60            sub a, b
0562   07A7 27            mov b, a
0563   07A8 E4            pop a
0564   07A9 E7            pop d
0565   07AA 10 02 00      mov a, 2
0566   07AD AC            mul a, b
0567   07AE 5A            add d, b
0568   07AF 2A            mov b, [d]
0569   07B0 E4            pop a
0570   07B1 D7            push a
0571   07B2 11            mov a, b
0572   07B3 26 0A 00      mov b, 10
0573   07B6 B0            cmp a, b
0574   07B7 0E            lodflgs
0575   07B8 87 02         and al, %00000010 ; <
0576   07BA FD 9C         shr al
0577   07BC 22 00         mov ah, 0
0578   07BE 27            mov b, a
0579   07BF E4            pop a
0580   07C0 C0 00 00      cmp b, 0
0581   07C3 C6 D5 07      je _if13_exit
0582   07C6             _if13_true:
0583   07C6 26 00 00      mov b, 0
0584   07C9 FD AB         swp b
0585   07CB D8            push b
0586   07CC 07 EB 11      call prnnum
0587   07CF 51 02 00      add sp, 2
0588   07D2 0A D5 07      jmp _if13_exit
0589   07D5             _if13_exit:
0590   07D5 29 BC 2D      mov b, [__ionum]
0591   07D8 D7            push a
0592   07D9 74            mov d, b
0593   07DA DA            push d
0594   07DB 29 0C 2E      mov b, [__datumpos] ; datumpos
0595   07DE D7            push a
0596   07DF 11            mov a, b
0597   07E0 26 01 00      mov b, 1
0598   07E3 60            sub a, b
0599   07E4 27            mov b, a
0600   07E5 E4            pop a
0601   07E6 E7            pop d
0602   07E7 10 02 00      mov a, 2
0603   07EA AC            mul a, b
0604   07EB 5A            add d, b
0605   07EC 2A            mov b, [d]
0606   07ED E4            pop a
0607   07EE FD AB         swp b
0608   07F0 D8            push b
0609   07F1 07 EB 11      call prnnum
0610   07F4 51 02 00      add sp, 2
0611   07F7             _for10_update:
0612   07F7 29 0C 2E      mov b, [__datumpos] ; datumpos
0613   07FA 11            mov a, b
0614   07FB FD 7D         dec b
0615   07FD FD 42 0C 2E   mov [__datumpos], b
0616   0801 27            mov b, a
0617   0802 0A 01 07      jmp _for10_cond
0618   0805             _for10_exit:
0619   0805 07 F5 11      call prnnl
0620   0808             _for9_update:
0621   0808 29 E4 2E      mov b, [__pos] ; pos
0622   080B 11            mov a, b
0623   080C FD 7D         dec b
0624   080E FD 42 E4 2E   mov [__pos], b
0625   0812 27            mov b, a
0626   0813 0A 8D 06      jmp _for9_cond
0627   0816             _for9_exit:
0628   0816 26 01 00      mov b, 1
0629   0819 FD 42 0C 2E   mov [__datumpos], b
0630   081D             _for14_init:
0631   081D 29 0C 2E      mov b, [__datumpos] ; datumpos
0632   0820 D7            push a
0633   0821 11            mov a, b
0634   0822 26 06 00      mov b, 6
0635   0825 AC            mul a, b
0636   0826 E4            pop a
0637   0827 FD 42 E4 2E   mov [__pos], b
0638   082B             _for14_cond:
0639   082B 29 E4 2E      mov b, [__pos] ; pos
0640   082E D7            push a
0641   082F 11            mov a, b
0642   0830 29 0C 2E      mov b, [__datumpos] ; datumpos
0643   0833 D7            push a
0644   0834 11            mov a, b
0645   0835 26 06 00      mov b, 6
0646   0838 AC            mul a, b
0647   0839 E4            pop a
0648   083A D7            push a
0649   083B 11            mov a, b
0650   083C 26 06 00      mov b, 6
0651   083F 54            add a, b
0652   0840 27            mov b, a
0653   0841 E4            pop a
0654   0842 B0            cmp a, b
0655   0843 0E            lodflgs
0656   0844 87 02         and al, %00000010 ; <
0657   0846 FD 9C         shr al
0658   0848 22 00         mov ah, 0
0659   084A 27            mov b, a
0660   084B E4            pop a
0661   084C C0 00 00      cmp b, 0
0662   084F C6 92 08      je _for14_exit
0663   0852             _for14_block:
0664   0852 29 0A 2E      mov b, [__datum]
0665   0855 74            mov d, b
0666   0856 DA            push d
0667   0857 29 E4 2E      mov b, [__pos] ; pos
0668   085A E7            pop d
0669   085B 10 02 00      mov a, 2
0670   085E AC            mul a, b
0671   085F 5A            add d, b
0672   0860 DA            push d
0673   0861 29 BC 2D      mov b, [__ionum]
0674   0864 D7            push a
0675   0865 74            mov d, b
0676   0866 DA            push d
0677   0867 29 E4 2E      mov b, [__pos] ; pos
0678   086A D7            push a
0679   086B 11            mov a, b
0680   086C 29 0C 2E      mov b, [__datumpos] ; datumpos
0681   086F D7            push a
0682   0870 11            mov a, b
0683   0871 26 06 00      mov b, 6
0684   0874 AC            mul a, b
0685   0875 E4            pop a
0686   0876 60            sub a, b
0687   0877 27            mov b, a
0688   0878 E4            pop a
0689   0879 E7            pop d
0690   087A 10 02 00      mov a, 2
0691   087D AC            mul a, b
0692   087E 5A            add d, b
0693   087F 2A            mov b, [d]
0694   0880 E4            pop a
0695   0881 E7            pop d
0696   0882 11            mov a, b
0697   0883 43            mov [d], a
0698   0884             _for14_update:
0699   0884 29 E4 2E      mov b, [__pos] ; pos
0700   0887 11            mov a, b
0701   0888 FD 77         inc b
0702   088A FD 42 E4 2E   mov [__pos], b
0703   088E 27            mov b, a
0704   088F 0A 2B 08      jmp _for14_cond
0705   0892             _for14_exit:
0706   0892 26 00 00      mov b, 0
0707   0895 FD 42 0C 2E   mov [__datumpos], b
0708   0899             _for15_init:
0709   0899 29 0C 2E      mov b, [__datumpos] ; datumpos
0710   089C D7            push a
0711   089D 11            mov a, b
0712   089E 26 06 00      mov b, 6
0713   08A1 AC            mul a, b
0714   08A2 E4            pop a
0715   08A3 FD 42 E4 2E   mov [__pos], b
0716   08A7             _for15_cond:
0717   08A7 29 E4 2E      mov b, [__pos] ; pos
0718   08AA D7            push a
0719   08AB 11            mov a, b
0720   08AC 29 0C 2E      mov b, [__datumpos] ; datumpos
0721   08AF D7            push a
0722   08B0 11            mov a, b
0723   08B1 26 06 00      mov b, 6
0724   08B4 AC            mul a, b
0725   08B5 E4            pop a
0726   08B6 D7            push a
0727   08B7 11            mov a, b
0728   08B8 26 06 00      mov b, 6
0729   08BB 54            add a, b
0730   08BC 27            mov b, a
0731   08BD E4            pop a
0732   08BE B0            cmp a, b
0733   08BF 0E            lodflgs
0734   08C0 87 02         and al, %00000010 ; <
0735   08C2 FD 9C         shr al
0736   08C4 22 00         mov ah, 0
0737   08C6 27            mov b, a
0738   08C7 E4            pop a
0739   08C8 C0 00 00      cmp b, 0
0740   08CB C6 78 09      je _for15_exit
0741   08CE             _for15_block:
0742   08CE 29 0A 2E      mov b, [__datum]
0743   08D1 D7            push a
0744   08D2 74            mov d, b
0745   08D3 DA            push d
0746   08D4 29 E4 2E      mov b, [__pos] ; pos
0747   08D7 E7            pop d
0748   08D8 10 02 00      mov a, 2
0749   08DB AC            mul a, b
0750   08DC 5A            add d, b
0751   08DD 2A            mov b, [d]
0752   08DE E4            pop a
0753   08DF D7            push a
0754   08E0 11            mov a, b
0755   08E1 26 64 00      mov b, 100
0756   08E4 AE            div a, b
0757   08E5 FD 78         mov g, a
0758   08E7 11            mov a, b
0759   08E8 FD 27         mov b, g
0760   08EA E4            pop a
0761   08EB FD 42 C0 2D   mov [__ioshift], b
0762   08EF 29 26 2E      mov b, [__anarr]
0763   08F2 74            mov d, b
0764   08F3 DA            push d
0765   08F4 29 E4 2E      mov b, [__pos] ; pos
0766   08F7 D7            push a
0767   08F8 11            mov a, b
0768   08F9 29 0C 2E      mov b, [__datumpos] ; datumpos
0769   08FC D7            push a
0770   08FD 11            mov a, b
0771   08FE 26 06 00      mov b, 6
0772   0901 AC            mul a, b
0773   0902 E4            pop a
0774   0903 60            sub a, b
0775   0904 27            mov b, a
0776   0905 E4            pop a
0777   0906 D7            push a
0778   0907 11            mov a, b
0779   0908 26 02 00      mov b, 2
0780   090B AC            mul a, b
0781   090C E4            pop a
0782   090D D7            push a
0783   090E 11            mov a, b
0784   090F 26 01 00      mov b, 1
0785   0912 54            add a, b
0786   0913 27            mov b, a
0787   0914 E4            pop a
0788   0915 E7            pop d
0789   0916 10 02 00      mov a, 2
0790   0919 AC            mul a, b
0791   091A 5A            add d, b
0792   091B DA            push d
0793   091C 29 C0 2D      mov b, [__ioshift] ; ioshift
0794   091F E7            pop d
0795   0920 11            mov a, b
0796   0921 43            mov [d], a
0797   0922 29 26 2E      mov b, [__anarr]
0798   0925 74            mov d, b
0799   0926 DA            push d
0800   0927 29 E4 2E      mov b, [__pos] ; pos
0801   092A D7            push a
0802   092B 11            mov a, b
0803   092C 29 0C 2E      mov b, [__datumpos] ; datumpos
0804   092F D7            push a
0805   0930 11            mov a, b
0806   0931 26 06 00      mov b, 6
0807   0934 AC            mul a, b
0808   0935 E4            pop a
0809   0936 60            sub a, b
0810   0937 27            mov b, a
0811   0938 E4            pop a
0812   0939 D7            push a
0813   093A 11            mov a, b
0814   093B 26 02 00      mov b, 2
0815   093E AC            mul a, b
0816   093F E4            pop a
0817   0940 E7            pop d
0818   0941 10 02 00      mov a, 2
0819   0944 AC            mul a, b
0820   0945 5A            add d, b
0821   0946 DA            push d
0822   0947 29 0A 2E      mov b, [__datum]
0823   094A D7            push a
0824   094B 74            mov d, b
0825   094C DA            push d
0826   094D 29 E4 2E      mov b, [__pos] ; pos
0827   0950 E7            pop d
0828   0951 10 02 00      mov a, 2
0829   0954 AC            mul a, b
0830   0955 5A            add d, b
0831   0956 2A            mov b, [d]
0832   0957 E4            pop a
0833   0958 D7            push a
0834   0959 11            mov a, b
0835   095A 29 C0 2D      mov b, [__ioshift] ; ioshift
0836   095D D7            push a
0837   095E 11            mov a, b
0838   095F 26 64 00      mov b, 100
0839   0962 AC            mul a, b
0840   0963 E4            pop a
0841   0964 60            sub a, b
0842   0965 27            mov b, a
0843   0966 E4            pop a
0844   0967 E7            pop d
0845   0968 11            mov a, b
0846   0969 43            mov [d], a
0847   096A             _for15_update:
0848   096A 29 E4 2E      mov b, [__pos] ; pos
0849   096D 11            mov a, b
0850   096E FD 77         inc b
0851   0970 FD 42 E4 2E   mov [__pos], b
0852   0974 27            mov b, a
0853   0975 0A A7 08      jmp _for15_cond
0854   0978             _for15_exit:
0855   0978 26 01 00      mov b, 1
0856   097B FD 42 0C 2E   mov [__datumpos], b
0857   097F             _for16_init:
0858   097F 29 0C 2E      mov b, [__datumpos] ; datumpos
0859   0982 D7            push a
0860   0983 11            mov a, b
0861   0984 26 06 00      mov b, 6
0862   0987 AC            mul a, b
0863   0988 E4            pop a
0864   0989 FD 42 E4 2E   mov [__pos], b
0865   098D             _for16_cond:
0866   098D 29 E4 2E      mov b, [__pos] ; pos
0867   0990 D7            push a
0868   0991 11            mov a, b
0869   0992 29 0C 2E      mov b, [__datumpos] ; datumpos
0870   0995 D7            push a
0871   0996 11            mov a, b
0872   0997 26 06 00      mov b, 6
0873   099A AC            mul a, b
0874   099B E4            pop a
0875   099C D7            push a
0876   099D 11            mov a, b
0877   099E 26 06 00      mov b, 6
0878   09A1 54            add a, b
0879   09A2 27            mov b, a
0880   09A3 E4            pop a
0881   09A4 B0            cmp a, b
0882   09A5 0E            lodflgs
0883   09A6 87 02         and al, %00000010 ; <
0884   09A8 FD 9C         shr al
0885   09AA 22 00         mov ah, 0
0886   09AC 27            mov b, a
0887   09AD E4            pop a
0888   09AE C0 00 00      cmp b, 0
0889   09B1 C6 5E 0A      je _for16_exit
0890   09B4             _for16_block:
0891   09B4 29 0A 2E      mov b, [__datum]
0892   09B7 D7            push a
0893   09B8 74            mov d, b
0894   09B9 DA            push d
0895   09BA 29 E4 2E      mov b, [__pos] ; pos
0896   09BD E7            pop d
0897   09BE 10 02 00      mov a, 2
0898   09C1 AC            mul a, b
0899   09C2 5A            add d, b
0900   09C3 2A            mov b, [d]
0901   09C4 E4            pop a
0902   09C5 D7            push a
0903   09C6 11            mov a, b
0904   09C7 26 64 00      mov b, 100
0905   09CA AE            div a, b
0906   09CB FD 78         mov g, a
0907   09CD 11            mov a, b
0908   09CE FD 27         mov b, g
0909   09D0 E4            pop a
0910   09D1 FD 42 C0 2D   mov [__ioshift], b
0911   09D5 29 40 2E      mov b, [__bnarr]
0912   09D8 74            mov d, b
0913   09D9 DA            push d
0914   09DA 29 E4 2E      mov b, [__pos] ; pos
0915   09DD D7            push a
0916   09DE 11            mov a, b
0917   09DF 29 0C 2E      mov b, [__datumpos] ; datumpos
0918   09E2 D7            push a
0919   09E3 11            mov a, b
0920   09E4 26 06 00      mov b, 6
0921   09E7 AC            mul a, b
0922   09E8 E4            pop a
0923   09E9 60            sub a, b
0924   09EA 27            mov b, a
0925   09EB E4            pop a
0926   09EC D7            push a
0927   09ED 11            mov a, b
0928   09EE 26 02 00      mov b, 2
0929   09F1 AC            mul a, b
0930   09F2 E4            pop a
0931   09F3 D7            push a
0932   09F4 11            mov a, b
0933   09F5 26 01 00      mov b, 1
0934   09F8 54            add a, b
0935   09F9 27            mov b, a
0936   09FA E4            pop a
0937   09FB E7            pop d
0938   09FC 10 02 00      mov a, 2
0939   09FF AC            mul a, b
0940   0A00 5A            add d, b
0941   0A01 DA            push d
0942   0A02 29 C0 2D      mov b, [__ioshift] ; ioshift
0943   0A05 E7            pop d
0944   0A06 11            mov a, b
0945   0A07 43            mov [d], a
0946   0A08 29 40 2E      mov b, [__bnarr]
0947   0A0B 74            mov d, b
0948   0A0C DA            push d
0949   0A0D 29 E4 2E      mov b, [__pos] ; pos
0950   0A10 D7            push a
0951   0A11 11            mov a, b
0952   0A12 29 0C 2E      mov b, [__datumpos] ; datumpos
0953   0A15 D7            push a
0954   0A16 11            mov a, b
0955   0A17 26 06 00      mov b, 6
0956   0A1A AC            mul a, b
0957   0A1B E4            pop a
0958   0A1C 60            sub a, b
0959   0A1D 27            mov b, a
0960   0A1E E4            pop a
0961   0A1F D7            push a
0962   0A20 11            mov a, b
0963   0A21 26 02 00      mov b, 2
0964   0A24 AC            mul a, b
0965   0A25 E4            pop a
0966   0A26 E7            pop d
0967   0A27 10 02 00      mov a, 2
0968   0A2A AC            mul a, b
0969   0A2B 5A            add d, b
0970   0A2C DA            push d
0971   0A2D 29 0A 2E      mov b, [__datum]
0972   0A30 D7            push a
0973   0A31 74            mov d, b
0974   0A32 DA            push d
0975   0A33 29 E4 2E      mov b, [__pos] ; pos
0976   0A36 E7            pop d
0977   0A37 10 02 00      mov a, 2
0978   0A3A AC            mul a, b
0979   0A3B 5A            add d, b
0980   0A3C 2A            mov b, [d]
0981   0A3D E4            pop a
0982   0A3E D7            push a
0983   0A3F 11            mov a, b
0984   0A40 29 C0 2D      mov b, [__ioshift] ; ioshift
0985   0A43 D7            push a
0986   0A44 11            mov a, b
0987   0A45 26 64 00      mov b, 100
0988   0A48 AC            mul a, b
0989   0A49 E4            pop a
0990   0A4A 60            sub a, b
0991   0A4B 27            mov b, a
0992   0A4C E4            pop a
0993   0A4D E7            pop d
0994   0A4E 11            mov a, b
0995   0A4F 43            mov [d], a
0996   0A50             _for16_update:
0997   0A50 29 E4 2E      mov b, [__pos] ; pos
0998   0A53 11            mov a, b
0999   0A54 FD 77         inc b
1000   0A56 FD 42 E4 2E   mov [__pos], b
1001   0A5A 27            mov b, a
1002   0A5B 0A 8D 09      jmp _for16_cond
1003   0A5E             _for16_exit:
1004   0A5E             _for17_init:
1005   0A5E 26 00 00      mov b, 0
1006   0A61 FD 42 E4 2E   mov [__pos], b
1007   0A65             _for17_cond:
1008   0A65 29 E4 2E      mov b, [__pos] ; pos
1009   0A68 D7            push a
1010   0A69 11            mov a, b
1011   0A6A 26 0C 00      mov b, 12
1012   0A6D B0            cmp a, b
1013   0A6E 0E            lodflgs
1014   0A6F 87 02         and al, %00000010 ; <
1015   0A71 FD 9C         shr al
1016   0A73 22 00         mov ah, 0
1017   0A75 27            mov b, a
1018   0A76 E4            pop a
1019   0A77 C0 00 00      cmp b, 0
1020   0A7A C6 D1 0A      je _for17_exit
1021   0A7D             _for17_block:
1022   0A7D 29 5A 2E      mov b, [__anarrbkp]
1023   0A80 74            mov d, b
1024   0A81 DA            push d
1025   0A82 29 E4 2E      mov b, [__pos] ; pos
1026   0A85 E7            pop d
1027   0A86 10 02 00      mov a, 2
1028   0A89 AC            mul a, b
1029   0A8A 5A            add d, b
1030   0A8B DA            push d
1031   0A8C 29 26 2E      mov b, [__anarr]
1032   0A8F D7            push a
1033   0A90 74            mov d, b
1034   0A91 DA            push d
1035   0A92 29 E4 2E      mov b, [__pos] ; pos
1036   0A95 E7            pop d
1037   0A96 10 02 00      mov a, 2
1038   0A99 AC            mul a, b
1039   0A9A 5A            add d, b
1040   0A9B 2A            mov b, [d]
1041   0A9C E4            pop a
1042   0A9D E7            pop d
1043   0A9E 11            mov a, b
1044   0A9F 43            mov [d], a
1045   0AA0 29 74 2E      mov b, [__bnarrbkp]
1046   0AA3 74            mov d, b
1047   0AA4 DA            push d
1048   0AA5 29 E4 2E      mov b, [__pos] ; pos
1049   0AA8 E7            pop d
1050   0AA9 10 02 00      mov a, 2
1051   0AAC AC            mul a, b
1052   0AAD 5A            add d, b
1053   0AAE DA            push d
1054   0AAF 29 40 2E      mov b, [__bnarr]
1055   0AB2 D7            push a
1056   0AB3 74            mov d, b
1057   0AB4 DA            push d
1058   0AB5 29 E4 2E      mov b, [__pos] ; pos
1059   0AB8 E7            pop d
1060   0AB9 10 02 00      mov a, 2
1061   0ABC AC            mul a, b
1062   0ABD 5A            add d, b
1063   0ABE 2A            mov b, [d]
1064   0ABF E4            pop a
1065   0AC0 E7            pop d
1066   0AC1 11            mov a, b
1067   0AC2 43            mov [d], a
1068   0AC3             _for17_update:
1069   0AC3 29 E4 2E      mov b, [__pos] ; pos
1070   0AC6 11            mov a, b
1071   0AC7 FD 77         inc b
1072   0AC9 FD 42 E4 2E   mov [__pos], b
1073   0ACD 27            mov b, a
1074   0ACE 0A 65 0A      jmp _for17_cond
1075   0AD1             _for17_exit:
1076   0AD1             _for18_init:
1077   0AD1 26 00 00      mov b, 0
1078   0AD4 FD 42 E4 2E   mov [__pos], b
1079   0AD8             _for18_cond:
1080   0AD8 29 E4 2E      mov b, [__pos] ; pos
1081   0ADB D7            push a
1082   0ADC 11            mov a, b
1083   0ADD 26 3C 00      mov b, 60
1084   0AE0 B0            cmp a, b
1085   0AE1 0E            lodflgs
1086   0AE2 87 02         and al, %00000010 ; <
1087   0AE4 FD 9C         shr al
1088   0AE6 22 00         mov ah, 0
1089   0AE8 27            mov b, a
1090   0AE9 E4            pop a
1091   0AEA C0 00 00      cmp b, 0
1092   0AED C6 0A 0B      je _for18_exit
1093   0AF0             _for18_block:
1094   0AF0 26 00 00      mov b, 0
1095   0AF3 FD AB         swp b
1096   0AF5 D8            push b
1097   0AF6 07 EB 11      call prnnum
1098   0AF9 51 02 00      add sp, 2
1099   0AFC             _for18_update:
1100   0AFC 29 E4 2E      mov b, [__pos] ; pos
1101   0AFF 11            mov a, b
1102   0B00 FD 77         inc b
1103   0B02 FD 42 E4 2E   mov [__pos], b
1104   0B06 27            mov b, a
1105   0B07 0A D8 0A      jmp _for18_cond
1106   0B0A             _for18_exit:
1107   0B0A 07 F5 11      call prnnl
1108   0B0D 07 05 20      call plus
1109   0B10 26 02 00      mov b, 2
1110   0B13 FD 42 0C 2E   mov [__datumpos], b
1111   0B17             _for19_init:
1112   0B17 29 0C 2E      mov b, [__datumpos] ; datumpos
1113   0B1A D7            push a
1114   0B1B 11            mov a, b
1115   0B1C 26 06 00      mov b, 6
1116   0B1F AC            mul a, b
1117   0B20 E4            pop a
1118   0B21 FD 42 E4 2E   mov [__pos], b
1119   0B25             _for19_cond:
1120   0B25 29 E4 2E      mov b, [__pos] ; pos
1121   0B28 D7            push a
1122   0B29 11            mov a, b
1123   0B2A 29 0C 2E      mov b, [__datumpos] ; datumpos
1124   0B2D D7            push a
1125   0B2E 11            mov a, b
1126   0B2F 26 06 00      mov b, 6
1127   0B32 AC            mul a, b
1128   0B33 E4            pop a
1129   0B34 D7            push a
1130   0B35 11            mov a, b
1131   0B36 26 06 00      mov b, 6
1132   0B39 54            add a, b
1133   0B3A 27            mov b, a
1134   0B3B E4            pop a
1135   0B3C B0            cmp a, b
1136   0B3D 0E            lodflgs
1137   0B3E 87 02         and al, %00000010 ; <
1138   0B40 FD 9C         shr al
1139   0B42 22 00         mov ah, 0
1140   0B44 27            mov b, a
1141   0B45 E4            pop a
1142   0B46 C0 00 00      cmp b, 0
1143   0B49 C6 CE 0B      je _for19_exit
1144   0B4C             _for19_block:
1145   0B4C 29 0A 2E      mov b, [__datum]
1146   0B4F 74            mov d, b
1147   0B50 DA            push d
1148   0B51 29 E4 2E      mov b, [__pos] ; pos
1149   0B54 E7            pop d
1150   0B55 10 02 00      mov a, 2
1151   0B58 AC            mul a, b
1152   0B59 5A            add d, b
1153   0B5A DA            push d
1154   0B5B 29 8E 2E      mov b, [__cnarr]
1155   0B5E D7            push a
1156   0B5F 74            mov d, b
1157   0B60 DA            push d
1158   0B61 29 E4 2E      mov b, [__pos] ; pos
1159   0B64 D7            push a
1160   0B65 11            mov a, b
1161   0B66 29 0C 2E      mov b, [__datumpos] ; datumpos
1162   0B69 D7            push a
1163   0B6A 11            mov a, b
1164   0B6B 26 06 00      mov b, 6
1165   0B6E AC            mul a, b
1166   0B6F E4            pop a
1167   0B70 60            sub a, b
1168   0B71 27            mov b, a
1169   0B72 E4            pop a
1170   0B73 D7            push a
1171   0B74 11            mov a, b
1172   0B75 26 02 00      mov b, 2
1173   0B78 AC            mul a, b
1174   0B79 E4            pop a
1175   0B7A D7            push a
1176   0B7B 11            mov a, b
1177   0B7C 26 01 00      mov b, 1
1178   0B7F 54            add a, b
1179   0B80 27            mov b, a
1180   0B81 E4            pop a
1181   0B82 E7            pop d
1182   0B83 10 02 00      mov a, 2
1183   0B86 AC            mul a, b
1184   0B87 5A            add d, b
1185   0B88 2A            mov b, [d]
1186   0B89 E4            pop a
1187   0B8A D7            push a
1188   0B8B 11            mov a, b
1189   0B8C 26 64 00      mov b, 100
1190   0B8F AC            mul a, b
1191   0B90 E4            pop a
1192   0B91 D7            push a
1193   0B92 11            mov a, b
1194   0B93 29 8E 2E      mov b, [__cnarr]
1195   0B96 D7            push a
1196   0B97 74            mov d, b
1197   0B98 DA            push d
1198   0B99 29 E4 2E      mov b, [__pos] ; pos
1199   0B9C D7            push a
1200   0B9D 11            mov a, b
1201   0B9E 29 0C 2E      mov b, [__datumpos] ; datumpos
1202   0BA1 D7            push a
1203   0BA2 11            mov a, b
1204   0BA3 26 06 00      mov b, 6
1205   0BA6 AC            mul a, b
1206   0BA7 E4            pop a
1207   0BA8 60            sub a, b
1208   0BA9 27            mov b, a
1209   0BAA E4            pop a
1210   0BAB D7            push a
1211   0BAC 11            mov a, b
1212   0BAD 26 02 00      mov b, 2
1213   0BB0 AC            mul a, b
1214   0BB1 E4            pop a
1215   0BB2 E7            pop d
1216   0BB3 10 02 00      mov a, 2
1217   0BB6 AC            mul a, b
1218   0BB7 5A            add d, b
1219   0BB8 2A            mov b, [d]
1220   0BB9 E4            pop a
1221   0BBA 54            add a, b
1222   0BBB 27            mov b, a
1223   0BBC E4            pop a
1224   0BBD E7            pop d
1225   0BBE 11            mov a, b
1226   0BBF 43            mov [d], a
1227   0BC0             _for19_update:
1228   0BC0 29 E4 2E      mov b, [__pos] ; pos
1229   0BC3 11            mov a, b
1230   0BC4 FD 77         inc b
1231   0BC6 FD 42 E4 2E   mov [__pos], b
1232   0BCA 27            mov b, a
1233   0BCB 0A 25 0B      jmp _for19_cond
1234   0BCE             _for19_exit:
1235   0BCE             _for20_init:
1236   0BCE 26 12 00      mov b, 18
1237   0BD1 FD 42 E4 2E   mov [__pos], b
1238   0BD5             _for20_cond:
1239   0BD5 29 E4 2E      mov b, [__pos] ; pos
1240   0BD8 D7            push a
1241   0BD9 11            mov a, b
1242   0BDA 26 0C 00      mov b, 12
1243   0BDD B0            cmp a, b
1244   0BDE 0E            lodflgs
1245   0BDF 87 03         and al, %00000011
1246   0BE1 B9 00         cmp al, 0
1247   0BE3 0E            lodflgs
1248   0BE4 22 00         mov ah, 0
1249   0BE6 27            mov b, a
1250   0BE7 E4            pop a
1251   0BE8 C0 00 00      cmp b, 0
1252   0BEB C6 D5 0C      je _for20_exit
1253   0BEE             _for20_block:
1254   0BEE             _if21_cond:
1255   0BEE 29 0A 2E      mov b, [__datum]
1256   0BF1 D7            push a
1257   0BF2 74            mov d, b
1258   0BF3 DA            push d
1259   0BF4 29 E4 2E      mov b, [__pos] ; pos
1260   0BF7 D7            push a
1261   0BF8 11            mov a, b
1262   0BF9 26 01 00      mov b, 1
1263   0BFC 60            sub a, b
1264   0BFD 27            mov b, a
1265   0BFE E4            pop a
1266   0BFF E7            pop d
1267   0C00 10 02 00      mov a, 2
1268   0C03 AC            mul a, b
1269   0C04 5A            add d, b
1270   0C05 2A            mov b, [d]
1271   0C06 E4            pop a
1272   0C07 D7            push a
1273   0C08 11            mov a, b
1274   0C09 26 E8 03      mov b, 1000
1275   0C0C B0            cmp a, b
1276   0C0D 0E            lodflgs
1277   0C0E 87 02         and al, %00000010 ; <
1278   0C10 FD 9C         shr al
1279   0C12 22 00         mov ah, 0
1280   0C14 27            mov b, a
1281   0C15 E4            pop a
1282   0C16 C0 00 00      cmp b, 0
1283   0C19 C6 2B 0C      je _if21_exit
1284   0C1C             _if21_true:
1285   0C1C 26 00 00      mov b, 0
1286   0C1F FD AB         swp b
1287   0C21 D8            push b
1288   0C22 07 EB 11      call prnnum
1289   0C25 51 02 00      add sp, 2
1290   0C28 0A 2B 0C      jmp _if21_exit
1291   0C2B             _if21_exit:
1292   0C2B             _if22_cond:
1293   0C2B 29 0A 2E      mov b, [__datum]
1294   0C2E D7            push a
1295   0C2F 74            mov d, b
1296   0C30 DA            push d
1297   0C31 29 E4 2E      mov b, [__pos] ; pos
1298   0C34 D7            push a
1299   0C35 11            mov a, b
1300   0C36 26 01 00      mov b, 1
1301   0C39 60            sub a, b
1302   0C3A 27            mov b, a
1303   0C3B E4            pop a
1304   0C3C E7            pop d
1305   0C3D 10 02 00      mov a, 2
1306   0C40 AC            mul a, b
1307   0C41 5A            add d, b
1308   0C42 2A            mov b, [d]
1309   0C43 E4            pop a
1310   0C44 D7            push a
1311   0C45 11            mov a, b
1312   0C46 26 64 00      mov b, 100
1313   0C49 B0            cmp a, b
1314   0C4A 0E            lodflgs
1315   0C4B 87 02         and al, %00000010 ; <
1316   0C4D FD 9C         shr al
1317   0C4F 22 00         mov ah, 0
1318   0C51 27            mov b, a
1319   0C52 E4            pop a
1320   0C53 C0 00 00      cmp b, 0
1321   0C56 C6 68 0C      je _if22_exit
1322   0C59             _if22_true:
1323   0C59 26 00 00      mov b, 0
1324   0C5C FD AB         swp b
1325   0C5E D8            push b
1326   0C5F 07 EB 11      call prnnum
1327   0C62 51 02 00      add sp, 2
1328   0C65 0A 68 0C      jmp _if22_exit
1329   0C68             _if22_exit:
1330   0C68             _if23_cond:
1331   0C68 29 0A 2E      mov b, [__datum]
1332   0C6B D7            push a
1333   0C6C 74            mov d, b
1334   0C6D DA            push d
1335   0C6E 29 E4 2E      mov b, [__pos] ; pos
1336   0C71 D7            push a
1337   0C72 11            mov a, b
1338   0C73 26 01 00      mov b, 1
1339   0C76 60            sub a, b
1340   0C77 27            mov b, a
1341   0C78 E4            pop a
1342   0C79 E7            pop d
1343   0C7A 10 02 00      mov a, 2
1344   0C7D AC            mul a, b
1345   0C7E 5A            add d, b
1346   0C7F 2A            mov b, [d]
1347   0C80 E4            pop a
1348   0C81 D7            push a
1349   0C82 11            mov a, b
1350   0C83 26 0A 00      mov b, 10
1351   0C86 B0            cmp a, b
1352   0C87 0E            lodflgs
1353   0C88 87 02         and al, %00000010 ; <
1354   0C8A FD 9C         shr al
1355   0C8C 22 00         mov ah, 0
1356   0C8E 27            mov b, a
1357   0C8F E4            pop a
1358   0C90 C0 00 00      cmp b, 0
1359   0C93 C6 A5 0C      je _if23_exit
1360   0C96             _if23_true:
1361   0C96 26 00 00      mov b, 0
1362   0C99 FD AB         swp b
1363   0C9B D8            push b
1364   0C9C 07 EB 11      call prnnum
1365   0C9F 51 02 00      add sp, 2
1366   0CA2 0A A5 0C      jmp _if23_exit
1367   0CA5             _if23_exit:
1368   0CA5 29 0A 2E      mov b, [__datum]
1369   0CA8 D7            push a
1370   0CA9 74            mov d, b
1371   0CAA DA            push d
1372   0CAB 29 E4 2E      mov b, [__pos] ; pos
1373   0CAE D7            push a
1374   0CAF 11            mov a, b
1375   0CB0 26 01 00      mov b, 1
1376   0CB3 60            sub a, b
1377   0CB4 27            mov b, a
1378   0CB5 E4            pop a
1379   0CB6 E7            pop d
1380   0CB7 10 02 00      mov a, 2
1381   0CBA AC            mul a, b
1382   0CBB 5A            add d, b
1383   0CBC 2A            mov b, [d]
1384   0CBD E4            pop a
1385   0CBE FD AB         swp b
1386   0CC0 D8            push b
1387   0CC1 07 DA 11      call prnnumspace
1388   0CC4 51 02 00      add sp, 2
1389   0CC7             _for20_update:
1390   0CC7 29 E4 2E      mov b, [__pos] ; pos
1391   0CCA 11            mov a, b
1392   0CCB FD 7D         dec b
1393   0CCD FD 42 E4 2E   mov [__pos], b
1394   0CD1 27            mov b, a
1395   0CD2 0A D5 0B      jmp _for20_cond
1396   0CD5             _for20_exit:
1397   0CD5 07 F5 11      call prnnl
1398   0CD8             _for24_init:
1399   0CD8 26 00 00      mov b, 0
1400   0CDB FD 42 E4 2E   mov [__pos], b
1401   0CDF             _for24_cond:
1402   0CDF 29 E4 2E      mov b, [__pos] ; pos
1403   0CE2 D7            push a
1404   0CE3 11            mov a, b
1405   0CE4 26 0C 00      mov b, 12
1406   0CE7 B0            cmp a, b
1407   0CE8 0E            lodflgs
1408   0CE9 87 02         and al, %00000010 ; <
1409   0CEB FD 9C         shr al
1410   0CED 22 00         mov ah, 0
1411   0CEF 27            mov b, a
1412   0CF0 E4            pop a
1413   0CF1 C0 00 00      cmp b, 0
1414   0CF4 C6 4B 0D      je _for24_exit
1415   0CF7             _for24_block:
1416   0CF7 29 26 2E      mov b, [__anarr]
1417   0CFA 74            mov d, b
1418   0CFB DA            push d
1419   0CFC 29 E4 2E      mov b, [__pos] ; pos
1420   0CFF E7            pop d
1421   0D00 10 02 00      mov a, 2
1422   0D03 AC            mul a, b
1423   0D04 5A            add d, b
1424   0D05 DA            push d
1425   0D06 29 5A 2E      mov b, [__anarrbkp]
1426   0D09 D7            push a
1427   0D0A 74            mov d, b
1428   0D0B DA            push d
1429   0D0C 29 E4 2E      mov b, [__pos] ; pos
1430   0D0F E7            pop d
1431   0D10 10 02 00      mov a, 2
1432   0D13 AC            mul a, b
1433   0D14 5A            add d, b
1434   0D15 2A            mov b, [d]
1435   0D16 E4            pop a
1436   0D17 E7            pop d
1437   0D18 11            mov a, b
1438   0D19 43            mov [d], a
1439   0D1A 29 40 2E      mov b, [__bnarr]
1440   0D1D 74            mov d, b
1441   0D1E DA            push d
1442   0D1F 29 E4 2E      mov b, [__pos] ; pos
1443   0D22 E7            pop d
1444   0D23 10 02 00      mov a, 2
1445   0D26 AC            mul a, b
1446   0D27 5A            add d, b
1447   0D28 DA            push d
1448   0D29 29 74 2E      mov b, [__bnarrbkp]
1449   0D2C D7            push a
1450   0D2D 74            mov d, b
1451   0D2E DA            push d
1452   0D2F 29 E4 2E      mov b, [__pos] ; pos
1453   0D32 E7            pop d
1454   0D33 10 02 00      mov a, 2
1455   0D36 AC            mul a, b
1456   0D37 5A            add d, b
1457   0D38 2A            mov b, [d]
1458   0D39 E4            pop a
1459   0D3A E7            pop d
1460   0D3B 11            mov a, b
1461   0D3C 43            mov [d], a
1462   0D3D             _for24_update:
1463   0D3D 29 E4 2E      mov b, [__pos] ; pos
1464   0D40 11            mov a, b
1465   0D41 FD 77         inc b
1466   0D43 FD 42 E4 2E   mov [__pos], b
1467   0D47 27            mov b, a
1468   0D48 0A DF 0C      jmp _for24_cond
1469   0D4B             _for24_exit:
1470   0D4B 07 A3 1B      call minus
1471   0D4E 26 02 00      mov b, 2
1472   0D51 FD 42 0C 2E   mov [__datumpos], b
1473   0D55             _for25_init:
1474   0D55 29 0C 2E      mov b, [__datumpos] ; datumpos
1475   0D58 D7            push a
1476   0D59 11            mov a, b
1477   0D5A 26 06 00      mov b, 6
1478   0D5D AC            mul a, b
1479   0D5E E4            pop a
1480   0D5F FD 42 E4 2E   mov [__pos], b
1481   0D63             _for25_cond:
1482   0D63 29 E4 2E      mov b, [__pos] ; pos
1483   0D66 D7            push a
1484   0D67 11            mov a, b
1485   0D68 29 0C 2E      mov b, [__datumpos] ; datumpos
1486   0D6B D7            push a
1487   0D6C 11            mov a, b
1488   0D6D 26 06 00      mov b, 6
1489   0D70 AC            mul a, b
1490   0D71 E4            pop a
1491   0D72 D7            push a
1492   0D73 11            mov a, b
1493   0D74 26 06 00      mov b, 6
1494   0D77 54            add a, b
1495   0D78 27            mov b, a
1496   0D79 E4            pop a
1497   0D7A B0            cmp a, b
1498   0D7B 0E            lodflgs
1499   0D7C 87 02         and al, %00000010 ; <
1500   0D7E FD 9C         shr al
1501   0D80 22 00         mov ah, 0
1502   0D82 27            mov b, a
1503   0D83 E4            pop a
1504   0D84 C0 00 00      cmp b, 0
1505   0D87 C6 0C 0E      je _for25_exit
1506   0D8A             _for25_block:
1507   0D8A 29 0A 2E      mov b, [__datum]
1508   0D8D 74            mov d, b
1509   0D8E DA            push d
1510   0D8F 29 E4 2E      mov b, [__pos] ; pos
1511   0D92 E7            pop d
1512   0D93 10 02 00      mov a, 2
1513   0D96 AC            mul a, b
1514   0D97 5A            add d, b
1515   0D98 DA            push d
1516   0D99 29 8E 2E      mov b, [__cnarr]
1517   0D9C D7            push a
1518   0D9D 74            mov d, b
1519   0D9E DA            push d
1520   0D9F 29 E4 2E      mov b, [__pos] ; pos
1521   0DA2 D7            push a
1522   0DA3 11            mov a, b
1523   0DA4 29 0C 2E      mov b, [__datumpos] ; datumpos
1524   0DA7 D7            push a
1525   0DA8 11            mov a, b
1526   0DA9 26 06 00      mov b, 6
1527   0DAC AC            mul a, b
1528   0DAD E4            pop a
1529   0DAE 60            sub a, b
1530   0DAF 27            mov b, a
1531   0DB0 E4            pop a
1532   0DB1 D7            push a
1533   0DB2 11            mov a, b
1534   0DB3 26 02 00      mov b, 2
1535   0DB6 AC            mul a, b
1536   0DB7 E4            pop a
1537   0DB8 D7            push a
1538   0DB9 11            mov a, b
1539   0DBA 26 01 00      mov b, 1
1540   0DBD 54            add a, b
1541   0DBE 27            mov b, a
1542   0DBF E4            pop a
1543   0DC0 E7            pop d
1544   0DC1 10 02 00      mov a, 2
1545   0DC4 AC            mul a, b
1546   0DC5 5A            add d, b
1547   0DC6 2A            mov b, [d]
1548   0DC7 E4            pop a
1549   0DC8 D7            push a
1550   0DC9 11            mov a, b
1551   0DCA 26 64 00      mov b, 100
1552   0DCD AC            mul a, b
1553   0DCE E4            pop a
1554   0DCF D7            push a
1555   0DD0 11            mov a, b
1556   0DD1 29 8E 2E      mov b, [__cnarr]
1557   0DD4 D7            push a
1558   0DD5 74            mov d, b
1559   0DD6 DA            push d
1560   0DD7 29 E4 2E      mov b, [__pos] ; pos
1561   0DDA D7            push a
1562   0DDB 11            mov a, b
1563   0DDC 29 0C 2E      mov b, [__datumpos] ; datumpos
1564   0DDF D7            push a
1565   0DE0 11            mov a, b
1566   0DE1 26 06 00      mov b, 6
1567   0DE4 AC            mul a, b
1568   0DE5 E4            pop a
1569   0DE6 60            sub a, b
1570   0DE7 27            mov b, a
1571   0DE8 E4            pop a
1572   0DE9 D7            push a
1573   0DEA 11            mov a, b
1574   0DEB 26 02 00      mov b, 2
1575   0DEE AC            mul a, b
1576   0DEF E4            pop a
1577   0DF0 E7            pop d
1578   0DF1 10 02 00      mov a, 2
1579   0DF4 AC            mul a, b
1580   0DF5 5A            add d, b
1581   0DF6 2A            mov b, [d]
1582   0DF7 E4            pop a
1583   0DF8 54            add a, b
1584   0DF9 27            mov b, a
1585   0DFA E4            pop a
1586   0DFB E7            pop d
1587   0DFC 11            mov a, b
1588   0DFD 43            mov [d], a
1589   0DFE             _for25_update:
1590   0DFE 29 E4 2E      mov b, [__pos] ; pos
1591   0E01 11            mov a, b
1592   0E02 FD 77         inc b
1593   0E04 FD 42 E4 2E   mov [__pos], b
1594   0E08 27            mov b, a
1595   0E09 0A 63 0D      jmp _for25_cond
1596   0E0C             _for25_exit:
1597   0E0C             _for26_init:
1598   0E0C 26 12 00      mov b, 18
1599   0E0F FD 42 E4 2E   mov [__pos], b
1600   0E13             _for26_cond:
1601   0E13 29 E4 2E      mov b, [__pos] ; pos
1602   0E16 D7            push a
1603   0E17 11            mov a, b
1604   0E18 26 0C 00      mov b, 12
1605   0E1B B0            cmp a, b
1606   0E1C 0E            lodflgs
1607   0E1D 87 03         and al, %00000011
1608   0E1F B9 00         cmp al, 0
1609   0E21 0E            lodflgs
1610   0E22 22 00         mov ah, 0
1611   0E24 27            mov b, a
1612   0E25 E4            pop a
1613   0E26 C0 00 00      cmp b, 0
1614   0E29 C6 13 0F      je _for26_exit
1615   0E2C             _for26_block:
1616   0E2C             _if27_cond:
1617   0E2C 29 0A 2E      mov b, [__datum]
1618   0E2F D7            push a
1619   0E30 74            mov d, b
1620   0E31 DA            push d
1621   0E32 29 E4 2E      mov b, [__pos] ; pos
1622   0E35 D7            push a
1623   0E36 11            mov a, b
1624   0E37 26 01 00      mov b, 1
1625   0E3A 60            sub a, b
1626   0E3B 27            mov b, a
1627   0E3C E4            pop a
1628   0E3D E7            pop d
1629   0E3E 10 02 00      mov a, 2
1630   0E41 AC            mul a, b
1631   0E42 5A            add d, b
1632   0E43 2A            mov b, [d]
1633   0E44 E4            pop a
1634   0E45 D7            push a
1635   0E46 11            mov a, b
1636   0E47 26 E8 03      mov b, 1000
1637   0E4A B0            cmp a, b
1638   0E4B 0E            lodflgs
1639   0E4C 87 02         and al, %00000010 ; <
1640   0E4E FD 9C         shr al
1641   0E50 22 00         mov ah, 0
1642   0E52 27            mov b, a
1643   0E53 E4            pop a
1644   0E54 C0 00 00      cmp b, 0
1645   0E57 C6 69 0E      je _if27_exit
1646   0E5A             _if27_true:
1647   0E5A 26 00 00      mov b, 0
1648   0E5D FD AB         swp b
1649   0E5F D8            push b
1650   0E60 07 EB 11      call prnnum
1651   0E63 51 02 00      add sp, 2
1652   0E66 0A 69 0E      jmp _if27_exit
1653   0E69             _if27_exit:
1654   0E69             _if28_cond:
1655   0E69 29 0A 2E      mov b, [__datum]
1656   0E6C D7            push a
1657   0E6D 74            mov d, b
1658   0E6E DA            push d
1659   0E6F 29 E4 2E      mov b, [__pos] ; pos
1660   0E72 D7            push a
1661   0E73 11            mov a, b
1662   0E74 26 01 00      mov b, 1
1663   0E77 60            sub a, b
1664   0E78 27            mov b, a
1665   0E79 E4            pop a
1666   0E7A E7            pop d
1667   0E7B 10 02 00      mov a, 2
1668   0E7E AC            mul a, b
1669   0E7F 5A            add d, b
1670   0E80 2A            mov b, [d]
1671   0E81 E4            pop a
1672   0E82 D7            push a
1673   0E83 11            mov a, b
1674   0E84 26 64 00      mov b, 100
1675   0E87 B0            cmp a, b
1676   0E88 0E            lodflgs
1677   0E89 87 02         and al, %00000010 ; <
1678   0E8B FD 9C         shr al
1679   0E8D 22 00         mov ah, 0
1680   0E8F 27            mov b, a
1681   0E90 E4            pop a
1682   0E91 C0 00 00      cmp b, 0
1683   0E94 C6 A6 0E      je _if28_exit
1684   0E97             _if28_true:
1685   0E97 26 00 00      mov b, 0
1686   0E9A FD AB         swp b
1687   0E9C D8            push b
1688   0E9D 07 EB 11      call prnnum
1689   0EA0 51 02 00      add sp, 2
1690   0EA3 0A A6 0E      jmp _if28_exit
1691   0EA6             _if28_exit:
1692   0EA6             _if29_cond:
1693   0EA6 29 0A 2E      mov b, [__datum]
1694   0EA9 D7            push a
1695   0EAA 74            mov d, b
1696   0EAB DA            push d
1697   0EAC 29 E4 2E      mov b, [__pos] ; pos
1698   0EAF D7            push a
1699   0EB0 11            mov a, b
1700   0EB1 26 01 00      mov b, 1
1701   0EB4 60            sub a, b
1702   0EB5 27            mov b, a
1703   0EB6 E4            pop a
1704   0EB7 E7            pop d
1705   0EB8 10 02 00      mov a, 2
1706   0EBB AC            mul a, b
1707   0EBC 5A            add d, b
1708   0EBD 2A            mov b, [d]
1709   0EBE E4            pop a
1710   0EBF D7            push a
1711   0EC0 11            mov a, b
1712   0EC1 26 0A 00      mov b, 10
1713   0EC4 B0            cmp a, b
1714   0EC5 0E            lodflgs
1715   0EC6 87 02         and al, %00000010 ; <
1716   0EC8 FD 9C         shr al
1717   0ECA 22 00         mov ah, 0
1718   0ECC 27            mov b, a
1719   0ECD E4            pop a
1720   0ECE C0 00 00      cmp b, 0
1721   0ED1 C6 E3 0E      je _if29_exit
1722   0ED4             _if29_true:
1723   0ED4 26 00 00      mov b, 0
1724   0ED7 FD AB         swp b
1725   0ED9 D8            push b
1726   0EDA 07 EB 11      call prnnum
1727   0EDD 51 02 00      add sp, 2
1728   0EE0 0A E3 0E      jmp _if29_exit
1729   0EE3             _if29_exit:
1730   0EE3 29 0A 2E      mov b, [__datum]
1731   0EE6 D7            push a
1732   0EE7 74            mov d, b
1733   0EE8 DA            push d
1734   0EE9 29 E4 2E      mov b, [__pos] ; pos
1735   0EEC D7            push a
1736   0EED 11            mov a, b
1737   0EEE 26 01 00      mov b, 1
1738   0EF1 60            sub a, b
1739   0EF2 27            mov b, a
1740   0EF3 E4            pop a
1741   0EF4 E7            pop d
1742   0EF5 10 02 00      mov a, 2
1743   0EF8 AC            mul a, b
1744   0EF9 5A            add d, b
1745   0EFA 2A            mov b, [d]
1746   0EFB E4            pop a
1747   0EFC FD AB         swp b
1748   0EFE D8            push b
1749   0EFF 07 DA 11      call prnnumspace
1750   0F02 51 02 00      add sp, 2
1751   0F05             _for26_update:
1752   0F05 29 E4 2E      mov b, [__pos] ; pos
1753   0F08 11            mov a, b
1754   0F09 FD 7D         dec b
1755   0F0B FD 42 E4 2E   mov [__pos], b
1756   0F0F 27            mov b, a
1757   0F10 0A 13 0E      jmp _for26_cond
1758   0F13             _for26_exit:
1759   0F13 07 F5 11      call prnnl
1760   0F16             _for30_init:
1761   0F16 26 00 00      mov b, 0
1762   0F19 FD 42 E4 2E   mov [__pos], b
1763   0F1D             _for30_cond:
1764   0F1D 29 E4 2E      mov b, [__pos] ; pos
1765   0F20 D7            push a
1766   0F21 11            mov a, b
1767   0F22 26 0C 00      mov b, 12
1768   0F25 B0            cmp a, b
1769   0F26 0E            lodflgs
1770   0F27 87 02         and al, %00000010 ; <
1771   0F29 FD 9C         shr al
1772   0F2B 22 00         mov ah, 0
1773   0F2D 27            mov b, a
1774   0F2E E4            pop a
1775   0F2F C0 00 00      cmp b, 0
1776   0F32 C6 89 0F      je _for30_exit
1777   0F35             _for30_block:
1778   0F35 29 26 2E      mov b, [__anarr]
1779   0F38 74            mov d, b
1780   0F39 DA            push d
1781   0F3A 29 E4 2E      mov b, [__pos] ; pos
1782   0F3D E7            pop d
1783   0F3E 10 02 00      mov a, 2
1784   0F41 AC            mul a, b
1785   0F42 5A            add d, b
1786   0F43 DA            push d
1787   0F44 29 5A 2E      mov b, [__anarrbkp]
1788   0F47 D7            push a
1789   0F48 74            mov d, b
1790   0F49 DA            push d
1791   0F4A 29 E4 2E      mov b, [__pos] ; pos
1792   0F4D E7            pop d
1793   0F4E 10 02 00      mov a, 2
1794   0F51 AC            mul a, b
1795   0F52 5A            add d, b
1796   0F53 2A            mov b, [d]
1797   0F54 E4            pop a
1798   0F55 E7            pop d
1799   0F56 11            mov a, b
1800   0F57 43            mov [d], a
1801   0F58 29 40 2E      mov b, [__bnarr]
1802   0F5B 74            mov d, b
1803   0F5C DA            push d
1804   0F5D 29 E4 2E      mov b, [__pos] ; pos
1805   0F60 E7            pop d
1806   0F61 10 02 00      mov a, 2
1807   0F64 AC            mul a, b
1808   0F65 5A            add d, b
1809   0F66 DA            push d
1810   0F67 29 74 2E      mov b, [__bnarrbkp]
1811   0F6A D7            push a
1812   0F6B 74            mov d, b
1813   0F6C DA            push d
1814   0F6D 29 E4 2E      mov b, [__pos] ; pos
1815   0F70 E7            pop d
1816   0F71 10 02 00      mov a, 2
1817   0F74 AC            mul a, b
1818   0F75 5A            add d, b
1819   0F76 2A            mov b, [d]
1820   0F77 E4            pop a
1821   0F78 E7            pop d
1822   0F79 11            mov a, b
1823   0F7A 43            mov [d], a
1824   0F7B             _for30_update:
1825   0F7B 29 E4 2E      mov b, [__pos] ; pos
1826   0F7E 11            mov a, b
1827   0F7F FD 77         inc b
1828   0F81 FD 42 E4 2E   mov [__pos], b
1829   0F85 27            mov b, a
1830   0F86 0A 1D 0F      jmp _for30_cond
1831   0F89             _for30_exit:
1832   0F89 07 7B 2C      call dividedby
1833   0F8C 26 02 00      mov b, 2
1834   0F8F FD 42 0C 2E   mov [__datumpos], b
1835   0F93             _for31_init:
1836   0F93 29 0C 2E      mov b, [__datumpos] ; datumpos
1837   0F96 D7            push a
1838   0F97 11            mov a, b
1839   0F98 26 06 00      mov b, 6
1840   0F9B AC            mul a, b
1841   0F9C E4            pop a
1842   0F9D FD 42 E4 2E   mov [__pos], b
1843   0FA1             _for31_cond:
1844   0FA1 29 E4 2E      mov b, [__pos] ; pos
1845   0FA4 D7            push a
1846   0FA5 11            mov a, b
1847   0FA6 29 0C 2E      mov b, [__datumpos] ; datumpos
1848   0FA9 D7            push a
1849   0FAA 11            mov a, b
1850   0FAB 26 06 00      mov b, 6
1851   0FAE AC            mul a, b
1852   0FAF E4            pop a
1853   0FB0 D7            push a
1854   0FB1 11            mov a, b
1855   0FB2 26 06 00      mov b, 6
1856   0FB5 54            add a, b
1857   0FB6 27            mov b, a
1858   0FB7 E4            pop a
1859   0FB8 B0            cmp a, b
1860   0FB9 0E            lodflgs
1861   0FBA 87 02         and al, %00000010 ; <
1862   0FBC FD 9C         shr al
1863   0FBE 22 00         mov ah, 0
1864   0FC0 27            mov b, a
1865   0FC1 E4            pop a
1866   0FC2 C0 00 00      cmp b, 0
1867   0FC5 C6 4A 10      je _for31_exit
1868   0FC8             _for31_block:
1869   0FC8 29 0A 2E      mov b, [__datum]
1870   0FCB 74            mov d, b
1871   0FCC DA            push d
1872   0FCD 29 E4 2E      mov b, [__pos] ; pos
1873   0FD0 E7            pop d
1874   0FD1 10 02 00      mov a, 2
1875   0FD4 AC            mul a, b
1876   0FD5 5A            add d, b
1877   0FD6 DA            push d
1878   0FD7 29 8E 2E      mov b, [__cnarr]
1879   0FDA D7            push a
1880   0FDB 74            mov d, b
1881   0FDC DA            push d
1882   0FDD 29 E4 2E      mov b, [__pos] ; pos
1883   0FE0 D7            push a
1884   0FE1 11            mov a, b
1885   0FE2 29 0C 2E      mov b, [__datumpos] ; datumpos
1886   0FE5 D7            push a
1887   0FE6 11            mov a, b
1888   0FE7 26 06 00      mov b, 6
1889   0FEA AC            mul a, b
1890   0FEB E4            pop a
1891   0FEC 60            sub a, b
1892   0FED 27            mov b, a
1893   0FEE E4            pop a
1894   0FEF D7            push a
1895   0FF0 11            mov a, b
1896   0FF1 26 02 00      mov b, 2
1897   0FF4 AC            mul a, b
1898   0FF5 E4            pop a
1899   0FF6 D7            push a
1900   0FF7 11            mov a, b
1901   0FF8 26 01 00      mov b, 1
1902   0FFB 54            add a, b
1903   0FFC 27            mov b, a
1904   0FFD E4            pop a
1905   0FFE E7            pop d
1906   0FFF 10 02 00      mov a, 2
1907   1002 AC            mul a, b
1908   1003 5A            add d, b
1909   1004 2A            mov b, [d]
1910   1005 E4            pop a
1911   1006 D7            push a
1912   1007 11            mov a, b
1913   1008 26 64 00      mov b, 100
1914   100B AC            mul a, b
1915   100C E4            pop a
1916   100D D7            push a
1917   100E 11            mov a, b
1918   100F 29 8E 2E      mov b, [__cnarr]
1919   1012 D7            push a
1920   1013 74            mov d, b
1921   1014 DA            push d
1922   1015 29 E4 2E      mov b, [__pos] ; pos
1923   1018 D7            push a
1924   1019 11            mov a, b
1925   101A 29 0C 2E      mov b, [__datumpos] ; datumpos
1926   101D D7            push a
1927   101E 11            mov a, b
1928   101F 26 06 00      mov b, 6
1929   1022 AC            mul a, b
1930   1023 E4            pop a
1931   1024 60            sub a, b
1932   1025 27            mov b, a
1933   1026 E4            pop a
1934   1027 D7            push a
1935   1028 11            mov a, b
1936   1029 26 02 00      mov b, 2
1937   102C AC            mul a, b
1938   102D E4            pop a
1939   102E E7            pop d
1940   102F 10 02 00      mov a, 2
1941   1032 AC            mul a, b
1942   1033 5A            add d, b
1943   1034 2A            mov b, [d]
1944   1035 E4            pop a
1945   1036 54            add a, b
1946   1037 27            mov b, a
1947   1038 E4            pop a
1948   1039 E7            pop d
1949   103A 11            mov a, b
1950   103B 43            mov [d], a
1951   103C             _for31_update:
1952   103C 29 E4 2E      mov b, [__pos] ; pos
1953   103F 11            mov a, b
1954   1040 FD 77         inc b
1955   1042 FD 42 E4 2E   mov [__pos], b
1956   1046 27            mov b, a
1957   1047 0A A1 0F      jmp _for31_cond
1958   104A             _for31_exit:
1959   104A             _for32_init:
1960   104A 26 12 00      mov b, 18
1961   104D FD 42 E4 2E   mov [__pos], b
1962   1051             _for32_cond:
1963   1051 29 E4 2E      mov b, [__pos] ; pos
1964   1054 D7            push a
1965   1055 11            mov a, b
1966   1056 26 0C 00      mov b, 12
1967   1059 B0            cmp a, b
1968   105A 0E            lodflgs
1969   105B 87 03         and al, %00000011
1970   105D B9 00         cmp al, 0
1971   105F 0E            lodflgs
1972   1060 22 00         mov ah, 0
1973   1062 27            mov b, a
1974   1063 E4            pop a
1975   1064 C0 00 00      cmp b, 0
1976   1067 C6 51 11      je _for32_exit
1977   106A             _for32_block:
1978   106A             _if33_cond:
1979   106A 29 0A 2E      mov b, [__datum]
1980   106D D7            push a
1981   106E 74            mov d, b
1982   106F DA            push d
1983   1070 29 E4 2E      mov b, [__pos] ; pos
1984   1073 D7            push a
1985   1074 11            mov a, b
1986   1075 26 01 00      mov b, 1
1987   1078 60            sub a, b
1988   1079 27            mov b, a
1989   107A E4            pop a
1990   107B E7            pop d
1991   107C 10 02 00      mov a, 2
1992   107F AC            mul a, b
1993   1080 5A            add d, b
1994   1081 2A            mov b, [d]
1995   1082 E4            pop a
1996   1083 D7            push a
1997   1084 11            mov a, b
1998   1085 26 E8 03      mov b, 1000
1999   1088 B0            cmp a, b
2000   1089 0E            lodflgs
2001   108A 87 02         and al, %00000010 ; <
2002   108C FD 9C         shr al
2003   108E 22 00         mov ah, 0
2004   1090 27            mov b, a
2005   1091 E4            pop a
2006   1092 C0 00 00      cmp b, 0
2007   1095 C6 A7 10      je _if33_exit
2008   1098             _if33_true:
2009   1098 26 00 00      mov b, 0
2010   109B FD AB         swp b
2011   109D D8            push b
2012   109E 07 EB 11      call prnnum
2013   10A1 51 02 00      add sp, 2
2014   10A4 0A A7 10      jmp _if33_exit
2015   10A7             _if33_exit:
2016   10A7             _if34_cond:
2017   10A7 29 0A 2E      mov b, [__datum]
2018   10AA D7            push a
2019   10AB 74            mov d, b
2020   10AC DA            push d
2021   10AD 29 E4 2E      mov b, [__pos] ; pos
2022   10B0 D7            push a
2023   10B1 11            mov a, b
2024   10B2 26 01 00      mov b, 1
2025   10B5 60            sub a, b
2026   10B6 27            mov b, a
2027   10B7 E4            pop a
2028   10B8 E7            pop d
2029   10B9 10 02 00      mov a, 2
2030   10BC AC            mul a, b
2031   10BD 5A            add d, b
2032   10BE 2A            mov b, [d]
2033   10BF E4            pop a
2034   10C0 D7            push a
2035   10C1 11            mov a, b
2036   10C2 26 64 00      mov b, 100
2037   10C5 B0            cmp a, b
2038   10C6 0E            lodflgs
2039   10C7 87 02         and al, %00000010 ; <
2040   10C9 FD 9C         shr al
2041   10CB 22 00         mov ah, 0
2042   10CD 27            mov b, a
2043   10CE E4            pop a
2044   10CF C0 00 00      cmp b, 0
2045   10D2 C6 E4 10      je _if34_exit
2046   10D5             _if34_true:
2047   10D5 26 00 00      mov b, 0
2048   10D8 FD AB         swp b
2049   10DA D8            push b
2050   10DB 07 EB 11      call prnnum
2051   10DE 51 02 00      add sp, 2
2052   10E1 0A E4 10      jmp _if34_exit
2053   10E4             _if34_exit:
2054   10E4             _if35_cond:
2055   10E4 29 0A 2E      mov b, [__datum]
2056   10E7 D7            push a
2057   10E8 74            mov d, b
2058   10E9 DA            push d
2059   10EA 29 E4 2E      mov b, [__pos] ; pos
2060   10ED D7            push a
2061   10EE 11            mov a, b
2062   10EF 26 01 00      mov b, 1
2063   10F2 60            sub a, b
2064   10F3 27            mov b, a
2065   10F4 E4            pop a
2066   10F5 E7            pop d
2067   10F6 10 02 00      mov a, 2
2068   10F9 AC            mul a, b
2069   10FA 5A            add d, b
2070   10FB 2A            mov b, [d]
2071   10FC E4            pop a
2072   10FD D7            push a
2073   10FE 11            mov a, b
2074   10FF 26 0A 00      mov b, 10
2075   1102 B0            cmp a, b
2076   1103 0E            lodflgs
2077   1104 87 02         and al, %00000010 ; <
2078   1106 FD 9C         shr al
2079   1108 22 00         mov ah, 0
2080   110A 27            mov b, a
2081   110B E4            pop a
2082   110C C0 00 00      cmp b, 0
2083   110F C6 21 11      je _if35_exit
2084   1112             _if35_true:
2085   1112 26 00 00      mov b, 0
2086   1115 FD AB         swp b
2087   1117 D8            push b
2088   1118 07 EB 11      call prnnum
2089   111B 51 02 00      add sp, 2
2090   111E 0A 21 11      jmp _if35_exit
2091   1121             _if35_exit:
2092   1121 29 0A 2E      mov b, [__datum]
2093   1124 D7            push a
2094   1125 74            mov d, b
2095   1126 DA            push d
2096   1127 29 E4 2E      mov b, [__pos] ; pos
2097   112A D7            push a
2098   112B 11            mov a, b
2099   112C 26 01 00      mov b, 1
2100   112F 60            sub a, b
2101   1130 27            mov b, a
2102   1131 E4            pop a
2103   1132 E7            pop d
2104   1133 10 02 00      mov a, 2
2105   1136 AC            mul a, b
2106   1137 5A            add d, b
2107   1138 2A            mov b, [d]
2108   1139 E4            pop a
2109   113A FD AB         swp b
2110   113C D8            push b
2111   113D 07 DA 11      call prnnumspace
2112   1140 51 02 00      add sp, 2
2113   1143             _for32_update:
2114   1143 29 E4 2E      mov b, [__pos] ; pos
2115   1146 11            mov a, b
2116   1147 FD 7D         dec b
2117   1149 FD 42 E4 2E   mov [__pos], b
2118   114D 27            mov b, a
2119   114E 0A 51 10      jmp _for32_cond
2120   1151             _for32_exit:
2121   1151 07 F5 11      call prnnl
2122   1154             _for36_init:
2123   1154 26 00 00      mov b, 0
2124   1157 FD 42 E4 2E   mov [__pos], b
2125   115B             _for36_cond:
2126   115B 29 E4 2E      mov b, [__pos] ; pos
2127   115E D7            push a
2128   115F 11            mov a, b
2129   1160 26 0C 00      mov b, 12
2130   1163 B0            cmp a, b
2131   1164 0E            lodflgs
2132   1165 87 02         and al, %00000010 ; <
2133   1167 FD 9C         shr al
2134   1169 22 00         mov ah, 0
2135   116B 27            mov b, a
2136   116C E4            pop a
2137   116D C0 00 00      cmp b, 0
2138   1170 C6 C7 11      je _for36_exit
2139   1173             _for36_block:
2140   1173 29 26 2E      mov b, [__anarr]
2141   1176 74            mov d, b
2142   1177 DA            push d
2143   1178 29 E4 2E      mov b, [__pos] ; pos
2144   117B E7            pop d
2145   117C 10 02 00      mov a, 2
2146   117F AC            mul a, b
2147   1180 5A            add d, b
2148   1181 DA            push d
2149   1182 29 5A 2E      mov b, [__anarrbkp]
2150   1185 D7            push a
2151   1186 74            mov d, b
2152   1187 DA            push d
2153   1188 29 E4 2E      mov b, [__pos] ; pos
2154   118B E7            pop d
2155   118C 10 02 00      mov a, 2
2156   118F AC            mul a, b
2157   1190 5A            add d, b
2158   1191 2A            mov b, [d]
2159   1192 E4            pop a
2160   1193 E7            pop d
2161   1194 11            mov a, b
2162   1195 43            mov [d], a
2163   1196 29 40 2E      mov b, [__bnarr]
2164   1199 74            mov d, b
2165   119A DA            push d
2166   119B 29 E4 2E      mov b, [__pos] ; pos
2167   119E E7            pop d
2168   119F 10 02 00      mov a, 2
2169   11A2 AC            mul a, b
2170   11A3 5A            add d, b
2171   11A4 DA            push d
2172   11A5 29 74 2E      mov b, [__bnarrbkp]
2173   11A8 D7            push a
2174   11A9 74            mov d, b
2175   11AA DA            push d
2176   11AB 29 E4 2E      mov b, [__pos] ; pos
2177   11AE E7            pop d
2178   11AF 10 02 00      mov a, 2
2179   11B2 AC            mul a, b
2180   11B3 5A            add d, b
2181   11B4 2A            mov b, [d]
2182   11B5 E4            pop a
2183   11B6 E7            pop d
2184   11B7 11            mov a, b
2185   11B8 43            mov [d], a
2186   11B9             _for36_update:
2187   11B9 29 E4 2E      mov b, [__pos] ; pos
2188   11BC 11            mov a, b
2189   11BD FD 77         inc b
2190   11BF FD 42 E4 2E   mov [__pos], b
2191   11C3 27            mov b, a
2192   11C4 0A 5B 11      jmp _for36_cond
2193   11C7             _for36_exit:
2194   11C7 F9            leave
2195   11C8 05 0B         syscall sys_terminate_proc
2196   11CA             
2197   11CA             readint:
2198   11CA D2            push bp
2199   11CB 9B            mov bp, sp
2200   11CC 52 02 00      sub sp, 2 ; n
2201   11CF             
2202   11CF             ; --- BEGIN INLINE ASM BLOCK
2203   11CF 07 66 32      call scan_u16d
2204   11D2 45 FF FF      mov [bp + -1], a
2205   11D5             ; --- END INLINE ASM BLOCK
2206   11D5             
2207   11D5 2C FF FF      mov b, [bp + -1] ; n
2208   11D8 F9            leave
2209   11D9 09            ret
2210   11DA             
2211   11DA             prnnumspace:
2212   11DA D2            push bp
2213   11DB 9B            mov bp, sp
2214   11DC             
2215   11DC             ; --- BEGIN INLINE ASM BLOCK
2216   11DC 17 05 00      mov a, [bp + 5]
2217   11DF 07 91 31      call print_u16d
2218   11E2 14 AE 2D      mov a, [__sp]
2219   11E5 3C            mov d, a
2220   11E6 07 68 31      call puts
2221   11E9             ; --- END INLINE ASM BLOCK
2222   11E9             
2223   11E9 F9            leave
2224   11EA 09            ret
2225   11EB             
2226   11EB             prnnum:
2227   11EB D2            push bp
2228   11EC 9B            mov bp, sp
2229   11ED             
2230   11ED             ; --- BEGIN INLINE ASM BLOCK
2231   11ED 17 05 00      mov a, [bp + 5]
2232   11F0 07 91 31      call print_u16d
2233   11F3             ; --- END INLINE ASM BLOCK
2234   11F3             
2235   11F3 F9            leave
2236   11F4 09            ret
2237   11F5             
2238   11F5             prnnl:
2239   11F5 D2            push bp
2240   11F6 9B            mov bp, sp
2241   11F7             
2242   11F7             ; --- BEGIN INLINE ASM BLOCK
2243   11F7 14 AA 2D      mov a, [__ss]
2244   11FA 3C            mov d, a
2245   11FB 07 68 31      call puts
2246   11FE             ; --- END INLINE ASM BLOCK
2247   11FE             
2248   11FE F9            leave
2249   11FF 09            ret
2250   1200             
2251   1200             prnsp:
2252   1200 D2            push bp
2253   1201 9B            mov bp, sp
2254   1202             
2255   1202             ; --- BEGIN INLINE ASM BLOCK
2256   1202 14 AE 2D      mov a, [__sp]
2257   1205 3C            mov d, a
2258   1206 07 68 31      call puts
2259   1209             ; --- END INLINE ASM BLOCK
2260   1209             
2261   1209 F9            leave
2262   120A 09            ret
2263   120B             
2264   120B             fixsignin:
2265   120B D2            push bp
2266   120C 9B            mov bp, sp
2267   120D 26 00 00      mov b, 0
2268   1210 FD 42 DC 2E   mov [__asign], b
2269   1214 26 00 00      mov b, 0
2270   1217 FD 42 DE 2E   mov [__bsign], b
2271   121B 26 00 00      mov b, 0
2272   121E FD 42 E0 2E   mov [__csign], b
2273   1222             _if37_cond:
2274   1222 29 26 2E      mov b, [__anarr]
2275   1225 D7            push a
2276   1226 74            mov d, b
2277   1227 DA            push d
2278   1228 26 0B 00      mov b, 11
2279   122B E7            pop d
2280   122C 10 02 00      mov a, 2
2281   122F AC            mul a, b
2282   1230 5A            add d, b
2283   1231 2A            mov b, [d]
2284   1232 E4            pop a
2285   1233 D7            push a
2286   1234 11            mov a, b
2287   1235 26 09 00      mov b, 9
2288   1238 B0            cmp a, b
2289   1239 0E            lodflgs
2290   123A 87 03         and al, %00000011
2291   123C B9 00         cmp al, 0
2292   123E 0E            lodflgs
2293   123F 22 00         mov ah, 0
2294   1241 27            mov b, a
2295   1242 E4            pop a
2296   1243 C0 00 00      cmp b, 0
2297   1246 C6 A6 12      je _if37_exit
2298   1249             _if37_true:
2299   1249 29 26 2E      mov b, [__anarr]
2300   124C D7            push a
2301   124D 74            mov d, b
2302   124E DA            push d
2303   124F 26 0B 00      mov b, 11
2304   1252 E7            pop d
2305   1253 10 02 00      mov a, 2
2306   1256 AC            mul a, b
2307   1257 5A            add d, b
2308   1258 2A            mov b, [d]
2309   1259 E4            pop a
2310   125A D7            push a
2311   125B 11            mov a, b
2312   125C 26 0A 00      mov b, 10
2313   125F AE            div a, b
2314   1260 FD 78         mov g, a
2315   1262 11            mov a, b
2316   1263 FD 27         mov b, g
2317   1265 E4            pop a
2318   1266 FD 42 E4 2E   mov [__pos], b
2319   126A 29 26 2E      mov b, [__anarr]
2320   126D 74            mov d, b
2321   126E DA            push d
2322   126F 26 0B 00      mov b, 11
2323   1272 E7            pop d
2324   1273 10 02 00      mov a, 2
2325   1276 AC            mul a, b
2326   1277 5A            add d, b
2327   1278 DA            push d
2328   1279 29 26 2E      mov b, [__anarr]
2329   127C D7            push a
2330   127D 74            mov d, b
2331   127E DA            push d
2332   127F 26 0B 00      mov b, 11
2333   1282 E7            pop d
2334   1283 10 02 00      mov a, 2
2335   1286 AC            mul a, b
2336   1287 5A            add d, b
2337   1288 2A            mov b, [d]
2338   1289 E4            pop a
2339   128A D7            push a
2340   128B 11            mov a, b
2341   128C 29 E4 2E      mov b, [__pos] ; pos
2342   128F D7            push a
2343   1290 11            mov a, b
2344   1291 26 0A 00      mov b, 10
2345   1294 AC            mul a, b
2346   1295 E4            pop a
2347   1296 60            sub a, b
2348   1297 27            mov b, a
2349   1298 E4            pop a
2350   1299 E7            pop d
2351   129A 11            mov a, b
2352   129B 43            mov [d], a
2353   129C 26 01 00      mov b, 1
2354   129F FD 42 DC 2E   mov [__asign], b
2355   12A3 0A A6 12      jmp _if37_exit
2356   12A6             _if37_exit:
2357   12A6             _if38_cond:
2358   12A6 29 40 2E      mov b, [__bnarr]
2359   12A9 D7            push a
2360   12AA 74            mov d, b
2361   12AB DA            push d
2362   12AC 26 0B 00      mov b, 11
2363   12AF E7            pop d
2364   12B0 10 02 00      mov a, 2
2365   12B3 AC            mul a, b
2366   12B4 5A            add d, b
2367   12B5 2A            mov b, [d]
2368   12B6 E4            pop a
2369   12B7 D7            push a
2370   12B8 11            mov a, b
2371   12B9 26 09 00      mov b, 9
2372   12BC B0            cmp a, b
2373   12BD 0E            lodflgs
2374   12BE 87 03         and al, %00000011
2375   12C0 B9 00         cmp al, 0
2376   12C2 0E            lodflgs
2377   12C3 22 00         mov ah, 0
2378   12C5 27            mov b, a
2379   12C6 E4            pop a
2380   12C7 C0 00 00      cmp b, 0
2381   12CA C6 2A 13      je _if38_exit
2382   12CD             _if38_true:
2383   12CD 29 40 2E      mov b, [__bnarr]
2384   12D0 D7            push a
2385   12D1 74            mov d, b
2386   12D2 DA            push d
2387   12D3 26 0B 00      mov b, 11
2388   12D6 E7            pop d
2389   12D7 10 02 00      mov a, 2
2390   12DA AC            mul a, b
2391   12DB 5A            add d, b
2392   12DC 2A            mov b, [d]
2393   12DD E4            pop a
2394   12DE D7            push a
2395   12DF 11            mov a, b
2396   12E0 26 0A 00      mov b, 10
2397   12E3 AE            div a, b
2398   12E4 FD 78         mov g, a
2399   12E6 11            mov a, b
2400   12E7 FD 27         mov b, g
2401   12E9 E4            pop a
2402   12EA FD 42 E4 2E   mov [__pos], b
2403   12EE 29 40 2E      mov b, [__bnarr]
2404   12F1 74            mov d, b
2405   12F2 DA            push d
2406   12F3 26 0B 00      mov b, 11
2407   12F6 E7            pop d
2408   12F7 10 02 00      mov a, 2
2409   12FA AC            mul a, b
2410   12FB 5A            add d, b
2411   12FC DA            push d
2412   12FD 29 40 2E      mov b, [__bnarr]
2413   1300 D7            push a
2414   1301 74            mov d, b
2415   1302 DA            push d
2416   1303 26 0B 00      mov b, 11
2417   1306 E7            pop d
2418   1307 10 02 00      mov a, 2
2419   130A AC            mul a, b
2420   130B 5A            add d, b
2421   130C 2A            mov b, [d]
2422   130D E4            pop a
2423   130E D7            push a
2424   130F 11            mov a, b
2425   1310 29 E4 2E      mov b, [__pos] ; pos
2426   1313 D7            push a
2427   1314 11            mov a, b
2428   1315 26 0A 00      mov b, 10
2429   1318 AC            mul a, b
2430   1319 E4            pop a
2431   131A 60            sub a, b
2432   131B 27            mov b, a
2433   131C E4            pop a
2434   131D E7            pop d
2435   131E 11            mov a, b
2436   131F 43            mov [d], a
2437   1320 26 01 00      mov b, 1
2438   1323 FD 42 DE 2E   mov [__bsign], b
2439   1327 0A 2A 13      jmp _if38_exit
2440   132A             _if38_exit:
2441   132A F9            leave
2442   132B 09            ret
2443   132C             
2444   132C             fixsignout:
2445   132C D2            push bp
2446   132D 9B            mov bp, sp
2447   132E             _if39_cond:
2448   132E 29 E0 2E      mov b, [__csign] ; csign
2449   1331 D7            push a
2450   1332 11            mov a, b
2451   1333 26 01 00      mov b, 1
2452   1336 B0            cmp a, b
2453   1337 0E            lodflgs
2454   1338 87 01         and al, %00000001 ; ==
2455   133A 22 00         mov ah, 0
2456   133C 27            mov b, a
2457   133D E4            pop a
2458   133E C0 00 00      cmp b, 0
2459   1341 C6 79 13      je _if39_exit
2460   1344             _if39_true:
2461   1344 29 8E 2E      mov b, [__cnarr]
2462   1347 74            mov d, b
2463   1348 DA            push d
2464   1349 26 0B 00      mov b, 11
2465   134C E7            pop d
2466   134D 10 02 00      mov a, 2
2467   1350 AC            mul a, b
2468   1351 5A            add d, b
2469   1352 DA            push d
2470   1353 29 8E 2E      mov b, [__cnarr]
2471   1356 D7            push a
2472   1357 74            mov d, b
2473   1358 DA            push d
2474   1359 26 0B 00      mov b, 11
2475   135C E7            pop d
2476   135D 10 02 00      mov a, 2
2477   1360 AC            mul a, b
2478   1361 5A            add d, b
2479   1362 2A            mov b, [d]
2480   1363 E4            pop a
2481   1364 D7            push a
2482   1365 11            mov a, b
2483   1366 26 0A 00      mov b, 10
2484   1369 54            add a, b
2485   136A 27            mov b, a
2486   136B E4            pop a
2487   136C E7            pop d
2488   136D 11            mov a, b
2489   136E 43            mov [d], a
2490   136F 26 00 00      mov b, 0
2491   1372 FD 42 E0 2E   mov [__csign], b
2492   1376 0A 79 13      jmp _if39_exit
2493   1379             _if39_exit:
2494   1379 F9            leave
2495   137A 09            ret
2496   137B             
2497   137B             fixcsizezero:
2498   137B D2            push bp
2499   137C 9B            mov bp, sp
2500   137D 26 01 00      mov b, 1
2501   1380 FD 42 16 2F   mov [__allzeroes], b
2502   1384             _for40_init:
2503   1384 26 01 00      mov b, 1
2504   1387 FD 42 E4 2E   mov [__pos], b
2505   138B             _for40_cond:
2506   138B 29 E4 2E      mov b, [__pos] ; pos
2507   138E D7            push a
2508   138F 11            mov a, b
2509   1390 26 0C 00      mov b, 12
2510   1393 B0            cmp a, b
2511   1394 0E            lodflgs
2512   1395 87 02         and al, %00000010 ; <
2513   1397 FD 9C         shr al
2514   1399 22 00         mov ah, 0
2515   139B 27            mov b, a
2516   139C E4            pop a
2517   139D C0 00 00      cmp b, 0
2518   13A0 C6 E4 13      je _for40_exit
2519   13A3             _for40_block:
2520   13A3             _if41_cond:
2521   13A3 29 8E 2E      mov b, [__cnarr]
2522   13A6 D7            push a
2523   13A7 74            mov d, b
2524   13A8 DA            push d
2525   13A9 29 E4 2E      mov b, [__pos] ; pos
2526   13AC E7            pop d
2527   13AD 10 02 00      mov a, 2
2528   13B0 AC            mul a, b
2529   13B1 5A            add d, b
2530   13B2 2A            mov b, [d]
2531   13B3 E4            pop a
2532   13B4 D7            push a
2533   13B5 11            mov a, b
2534   13B6 26 00 00      mov b, 0
2535   13B9 B0            cmp a, b
2536   13BA 0E            lodflgs
2537   13BB 87 01         and al, %00000001
2538   13BD 8F 01         xor al, %00000001 ; !=
2539   13BF 22 00         mov ah, 0
2540   13C1 27            mov b, a
2541   13C2 E4            pop a
2542   13C3 C0 00 00      cmp b, 0
2543   13C6 C6 D6 13      je _if41_exit
2544   13C9             _if41_true:
2545   13C9 26 00 00      mov b, 0
2546   13CC FD 42 16 2F   mov [__allzeroes], b
2547   13D0 0A E4 13      jmp _for40_exit ; for break
2548   13D3 0A D6 13      jmp _if41_exit
2549   13D6             _if41_exit:
2550   13D6             _for40_update:
2551   13D6 29 E4 2E      mov b, [__pos] ; pos
2552   13D9 11            mov a, b
2553   13DA FD 77         inc b
2554   13DC FD 42 E4 2E   mov [__pos], b
2555   13E0 27            mov b, a
2556   13E1 0A 8B 13      jmp _for40_cond
2557   13E4             _for40_exit:
2558   13E4             _if42_cond:
2559   13E4 29 16 2F      mov b, [__allzeroes] ; allzeroes
2560   13E7 D7            push a
2561   13E8 11            mov a, b
2562   13E9 26 01 00      mov b, 1
2563   13EC B0            cmp a, b
2564   13ED 0E            lodflgs
2565   13EE 87 01         and al, %00000001 ; ==
2566   13F0 22 00         mov ah, 0
2567   13F2 27            mov b, a
2568   13F3 E4            pop a
2569   13F4 C0 00 00      cmp b, 0
2570   13F7 C6 04 14      je _if42_exit
2571   13FA             _if42_true:
2572   13FA 26 00 00      mov b, 0
2573   13FD FD 42 E0 2E   mov [__csign], b
2574   1401 0A 04 14      jmp _if42_exit
2575   1404             _if42_exit:
2576   1404             _if43_cond:
2577   1404 29 8E 2E      mov b, [__cnarr]
2578   1407 D7            push a
2579   1408 74            mov d, b
2580   1409 DA            push d
2581   140A 26 0B 00      mov b, 11
2582   140D E7            pop d
2583   140E 10 02 00      mov a, 2
2584   1411 AC            mul a, b
2585   1412 5A            add d, b
2586   1413 2A            mov b, [d]
2587   1414 E4            pop a
2588   1415 D7            push a
2589   1416 11            mov a, b
2590   1417 26 09 00      mov b, 9
2591   141A B0            cmp a, b
2592   141B 0E            lodflgs
2593   141C 87 03         and al, %00000011
2594   141E B9 00         cmp al, 0
2595   1420 0E            lodflgs
2596   1421 22 00         mov ah, 0
2597   1423 27            mov b, a
2598   1424 E4            pop a
2599   1425 C0 00 00      cmp b, 0
2600   1428 C6 77 14      je _if43_exit
2601   142B             _if43_true:
2602   142B 26 00 00      mov b, 0
2603   142E FD 42 E0 2E   mov [__csign], b
2604   1432             _for44_init:
2605   1432 26 01 00      mov b, 1
2606   1435 FD 42 E4 2E   mov [__pos], b
2607   1439             _for44_cond:
2608   1439 29 E4 2E      mov b, [__pos] ; pos
2609   143C D7            push a
2610   143D 11            mov a, b
2611   143E 26 0C 00      mov b, 12
2612   1441 B0            cmp a, b
2613   1442 0E            lodflgs
2614   1443 87 02         and al, %00000010 ; <
2615   1445 FD 9C         shr al
2616   1447 22 00         mov ah, 0
2617   1449 27            mov b, a
2618   144A E4            pop a
2619   144B C0 00 00      cmp b, 0
2620   144E C6 74 14      je _for44_exit
2621   1451             _for44_block:
2622   1451 29 8E 2E      mov b, [__cnarr]
2623   1454 74            mov d, b
2624   1455 DA            push d
2625   1456 29 E4 2E      mov b, [__pos] ; pos
2626   1459 E7            pop d
2627   145A 10 02 00      mov a, 2
2628   145D AC            mul a, b
2629   145E 5A            add d, b
2630   145F DA            push d
2631   1460 26 00 00      mov b, 0
2632   1463 E7            pop d
2633   1464 11            mov a, b
2634   1465 43            mov [d], a
2635   1466             _for44_update:
2636   1466 29 E4 2E      mov b, [__pos] ; pos
2637   1469 11            mov a, b
2638   146A FD 77         inc b
2639   146C FD 42 E4 2E   mov [__pos], b
2640   1470 27            mov b, a
2641   1471 0A 39 14      jmp _for44_cond
2642   1474             _for44_exit:
2643   1474 0A 77 14      jmp _if43_exit
2644   1477             _if43_exit:
2645   1477 F9            leave
2646   1478 09            ret
2647   1479             
2648   1479             swapab:
2649   1479 D2            push bp
2650   147A 9B            mov bp, sp
2651   147B             _for45_init:
2652   147B 26 00 00      mov b, 0
2653   147E FD 42 FC 2E   mov [__swappos], b
2654   1482             _for45_cond:
2655   1482 29 FC 2E      mov b, [__swappos] ; swappos
2656   1485 D7            push a
2657   1486 11            mov a, b
2658   1487 26 0C 00      mov b, 12
2659   148A B0            cmp a, b
2660   148B 0E            lodflgs
2661   148C 87 02         and al, %00000010 ; <
2662   148E FD 9C         shr al
2663   1490 22 00         mov ah, 0
2664   1492 27            mov b, a
2665   1493 E4            pop a
2666   1494 C0 00 00      cmp b, 0
2667   1497 C6 53 15      je _for45_exit
2668   149A             _for45_block:
2669   149A 29 26 2E      mov b, [__anarr]
2670   149D 74            mov d, b
2671   149E DA            push d
2672   149F 29 FC 2E      mov b, [__swappos] ; swappos
2673   14A2 E7            pop d
2674   14A3 10 02 00      mov a, 2
2675   14A6 AC            mul a, b
2676   14A7 5A            add d, b
2677   14A8 DA            push d
2678   14A9 29 26 2E      mov b, [__anarr]
2679   14AC D7            push a
2680   14AD 74            mov d, b
2681   14AE DA            push d
2682   14AF 29 FC 2E      mov b, [__swappos] ; swappos
2683   14B2 E7            pop d
2684   14B3 10 02 00      mov a, 2
2685   14B6 AC            mul a, b
2686   14B7 5A            add d, b
2687   14B8 2A            mov b, [d]
2688   14B9 E4            pop a
2689   14BA D7            push a
2690   14BB 11            mov a, b
2691   14BC 29 40 2E      mov b, [__bnarr]
2692   14BF D7            push a
2693   14C0 74            mov d, b
2694   14C1 DA            push d
2695   14C2 29 FC 2E      mov b, [__swappos] ; swappos
2696   14C5 E7            pop d
2697   14C6 10 02 00      mov a, 2
2698   14C9 AC            mul a, b
2699   14CA 5A            add d, b
2700   14CB 2A            mov b, [d]
2701   14CC E4            pop a
2702   14CD 54            add a, b
2703   14CE 27            mov b, a
2704   14CF E4            pop a
2705   14D0 E7            pop d
2706   14D1 11            mov a, b
2707   14D2 43            mov [d], a
2708   14D3 29 40 2E      mov b, [__bnarr]
2709   14D6 74            mov d, b
2710   14D7 DA            push d
2711   14D8 29 FC 2E      mov b, [__swappos] ; swappos
2712   14DB E7            pop d
2713   14DC 10 02 00      mov a, 2
2714   14DF AC            mul a, b
2715   14E0 5A            add d, b
2716   14E1 DA            push d
2717   14E2 29 26 2E      mov b, [__anarr]
2718   14E5 D7            push a
2719   14E6 74            mov d, b
2720   14E7 DA            push d
2721   14E8 29 FC 2E      mov b, [__swappos] ; swappos
2722   14EB E7            pop d
2723   14EC 10 02 00      mov a, 2
2724   14EF AC            mul a, b
2725   14F0 5A            add d, b
2726   14F1 2A            mov b, [d]
2727   14F2 E4            pop a
2728   14F3 D7            push a
2729   14F4 11            mov a, b
2730   14F5 29 40 2E      mov b, [__bnarr]
2731   14F8 D7            push a
2732   14F9 74            mov d, b
2733   14FA DA            push d
2734   14FB 29 FC 2E      mov b, [__swappos] ; swappos
2735   14FE E7            pop d
2736   14FF 10 02 00      mov a, 2
2737   1502 AC            mul a, b
2738   1503 5A            add d, b
2739   1504 2A            mov b, [d]
2740   1505 E4            pop a
2741   1506 60            sub a, b
2742   1507 27            mov b, a
2743   1508 E4            pop a
2744   1509 E7            pop d
2745   150A 11            mov a, b
2746   150B 43            mov [d], a
2747   150C 29 26 2E      mov b, [__anarr]
2748   150F 74            mov d, b
2749   1510 DA            push d
2750   1511 29 FC 2E      mov b, [__swappos] ; swappos
2751   1514 E7            pop d
2752   1515 10 02 00      mov a, 2
2753   1518 AC            mul a, b
2754   1519 5A            add d, b
2755   151A DA            push d
2756   151B 29 26 2E      mov b, [__anarr]
2757   151E D7            push a
2758   151F 74            mov d, b
2759   1520 DA            push d
2760   1521 29 FC 2E      mov b, [__swappos] ; swappos
2761   1524 E7            pop d
2762   1525 10 02 00      mov a, 2
2763   1528 AC            mul a, b
2764   1529 5A            add d, b
2765   152A 2A            mov b, [d]
2766   152B E4            pop a
2767   152C D7            push a
2768   152D 11            mov a, b
2769   152E 29 40 2E      mov b, [__bnarr]
2770   1531 D7            push a
2771   1532 74            mov d, b
2772   1533 DA            push d
2773   1534 29 FC 2E      mov b, [__swappos] ; swappos
2774   1537 E7            pop d
2775   1538 10 02 00      mov a, 2
2776   153B AC            mul a, b
2777   153C 5A            add d, b
2778   153D 2A            mov b, [d]
2779   153E E4            pop a
2780   153F 60            sub a, b
2781   1540 27            mov b, a
2782   1541 E4            pop a
2783   1542 E7            pop d
2784   1543 11            mov a, b
2785   1544 43            mov [d], a
2786   1545             _for45_update:
2787   1545 29 FC 2E      mov b, [__swappos] ; swappos
2788   1548 11            mov a, b
2789   1549 FD 77         inc b
2790   154B FD 42 FC 2E   mov [__swappos], b
2791   154F 27            mov b, a
2792   1550 0A 82 14      jmp _for45_cond
2793   1553             _for45_exit:
2794   1553 F9            leave
2795   1554 09            ret
2796   1555             
2797   1555             checkabsabsize:
2798   1555 D2            push bp
2799   1556 9B            mov bp, sp
2800   1557 26 00 00      mov b, 0
2801   155A FD 42 EA 2E   mov [__agtb], b
2802   155E 26 00 00      mov b, 0
2803   1561 FD 42 EC 2E   mov [__bgta], b
2804   1565 26 00 00      mov b, 0
2805   1568 FD 42 F2 2E   mov [__ageb], b
2806   156C 26 00 00      mov b, 0
2807   156F FD 42 F4 2E   mov [__bgea], b
2808   1573 26 00 00      mov b, 0
2809   1576 FD 42 EE 2E   mov [__aeqb], b
2810   157A 26 00 00      mov b, 0
2811   157D FD 42 F0 2E   mov [__aneqb], b
2812   1581             _for46_init:
2813   1581 26 0C 00      mov b, 12
2814   1584 FD 42 FA 2E   mov [__psizepos], b
2815   1588             _for46_cond:
2816   1588 29 FA 2E      mov b, [__psizepos] ; psizepos
2817   158B D7            push a
2818   158C 11            mov a, b
2819   158D 26 00 00      mov b, 0
2820   1590 B0            cmp a, b
2821   1591 0E            lodflgs
2822   1592 87 03         and al, %00000011
2823   1594 B9 00         cmp al, 0
2824   1596 0E            lodflgs
2825   1597 22 00         mov ah, 0
2826   1599 27            mov b, a
2827   159A E4            pop a
2828   159B C0 00 00      cmp b, 0
2829   159E C6 73 16      je _for46_exit
2830   15A1             _for46_block:
2831   15A1 29 FA 2E      mov b, [__psizepos] ; psizepos
2832   15A4 D7            push a
2833   15A5 11            mov a, b
2834   15A6 26 01 00      mov b, 1
2835   15A9 60            sub a, b
2836   15AA 27            mov b, a
2837   15AB E4            pop a
2838   15AC FD 42 F8 2E   mov [__sizepos], b
2839   15B0             _if47_cond:
2840   15B0 29 26 2E      mov b, [__anarr]
2841   15B3 D7            push a
2842   15B4 74            mov d, b
2843   15B5 DA            push d
2844   15B6 29 F8 2E      mov b, [__sizepos] ; sizepos
2845   15B9 E7            pop d
2846   15BA 10 02 00      mov a, 2
2847   15BD AC            mul a, b
2848   15BE 5A            add d, b
2849   15BF 2A            mov b, [d]
2850   15C0 E4            pop a
2851   15C1 D7            push a
2852   15C2 11            mov a, b
2853   15C3 29 40 2E      mov b, [__bnarr]
2854   15C6 D7            push a
2855   15C7 74            mov d, b
2856   15C8 DA            push d
2857   15C9 29 F8 2E      mov b, [__sizepos] ; sizepos
2858   15CC E7            pop d
2859   15CD 10 02 00      mov a, 2
2860   15D0 AC            mul a, b
2861   15D1 5A            add d, b
2862   15D2 2A            mov b, [d]
2863   15D3 E4            pop a
2864   15D4 B0            cmp a, b
2865   15D5 0E            lodflgs
2866   15D6 87 03         and al, %00000011
2867   15D8 B9 00         cmp al, 0
2868   15DA 0E            lodflgs
2869   15DB 22 00         mov ah, 0
2870   15DD 27            mov b, a
2871   15DE E4            pop a
2872   15DF C0 00 00      cmp b, 0
2873   15E2 C6 FD 15      je _if47_exit
2874   15E5             _if47_true:
2875   15E5 26 01 00      mov b, 1
2876   15E8 FD 42 F0 2E   mov [__aneqb], b
2877   15EC 26 01 00      mov b, 1
2878   15EF FD 42 EA 2E   mov [__agtb], b
2879   15F3 26 01 00      mov b, 1
2880   15F6 FD 42 F2 2E   mov [__ageb], b
2881   15FA 0A FD 15      jmp _if47_exit
2882   15FD             _if47_exit:
2883   15FD             _if48_cond:
2884   15FD 29 26 2E      mov b, [__anarr]
2885   1600 D7            push a
2886   1601 74            mov d, b
2887   1602 DA            push d
2888   1603 29 F8 2E      mov b, [__sizepos] ; sizepos
2889   1606 E7            pop d
2890   1607 10 02 00      mov a, 2
2891   160A AC            mul a, b
2892   160B 5A            add d, b
2893   160C 2A            mov b, [d]
2894   160D E4            pop a
2895   160E D7            push a
2896   160F 11            mov a, b
2897   1610 29 40 2E      mov b, [__bnarr]
2898   1613 D7            push a
2899   1614 74            mov d, b
2900   1615 DA            push d
2901   1616 29 F8 2E      mov b, [__sizepos] ; sizepos
2902   1619 E7            pop d
2903   161A 10 02 00      mov a, 2
2904   161D AC            mul a, b
2905   161E 5A            add d, b
2906   161F 2A            mov b, [d]
2907   1620 E4            pop a
2908   1621 B0            cmp a, b
2909   1622 0E            lodflgs
2910   1623 87 02         and al, %00000010 ; <
2911   1625 FD 9C         shr al
2912   1627 22 00         mov ah, 0
2913   1629 27            mov b, a
2914   162A E4            pop a
2915   162B C0 00 00      cmp b, 0
2916   162E C6 49 16      je _if48_exit
2917   1631             _if48_true:
2918   1631 26 01 00      mov b, 1
2919   1634 FD 42 F0 2E   mov [__aneqb], b
2920   1638 26 01 00      mov b, 1
2921   163B FD 42 EC 2E   mov [__bgta], b
2922   163F 26 01 00      mov b, 1
2923   1642 FD 42 F4 2E   mov [__bgea], b
2924   1646 0A 49 16      jmp _if48_exit
2925   1649             _if48_exit:
2926   1649             _if49_cond:
2927   1649 29 F0 2E      mov b, [__aneqb] ; aneqb
2928   164C D7            push a
2929   164D 11            mov a, b
2930   164E 26 01 00      mov b, 1
2931   1651 B0            cmp a, b
2932   1652 0E            lodflgs
2933   1653 87 01         and al, %00000001 ; ==
2934   1655 22 00         mov ah, 0
2935   1657 27            mov b, a
2936   1658 E4            pop a
2937   1659 C0 00 00      cmp b, 0
2938   165C C6 65 16      je _if49_exit
2939   165F             _if49_true:
2940   165F 0A 73 16      jmp _for46_exit ; for break
2941   1662 0A 65 16      jmp _if49_exit
2942   1665             _if49_exit:
2943   1665             _for46_update:
2944   1665 29 FA 2E      mov b, [__psizepos] ; psizepos
2945   1668 11            mov a, b
2946   1669 FD 7D         dec b
2947   166B FD 42 FA 2E   mov [__psizepos], b
2948   166F 27            mov b, a
2949   1670 0A 88 15      jmp _for46_cond
2950   1673             _for46_exit:
2951   1673             _if50_cond:
2952   1673 29 F0 2E      mov b, [__aneqb] ; aneqb
2953   1676 D7            push a
2954   1677 11            mov a, b
2955   1678 26 00 00      mov b, 0
2956   167B B0            cmp a, b
2957   167C 0E            lodflgs
2958   167D 87 01         and al, %00000001 ; ==
2959   167F 22 00         mov ah, 0
2960   1681 27            mov b, a
2961   1682 E4            pop a
2962   1683 C0 00 00      cmp b, 0
2963   1686 C6 A1 16      je _if50_exit
2964   1689             _if50_true:
2965   1689 26 01 00      mov b, 1
2966   168C FD 42 EE 2E   mov [__aeqb], b
2967   1690 26 01 00      mov b, 1
2968   1693 FD 42 F2 2E   mov [__ageb], b
2969   1697 26 01 00      mov b, 1
2970   169A FD 42 F4 2E   mov [__bgea], b
2971   169E 0A A1 16      jmp _if50_exit
2972   16A1             _if50_exit:
2973   16A1 F9            leave
2974   16A2 09            ret
2975   16A3             
2976   16A3             protoplus:
2977   16A3 D2            push bp
2978   16A4 9B            mov bp, sp
2979   16A5 26 00 00      mov b, 0
2980   16A8 FD 42 E6 2E   mov [__carry], b
2981   16AC             _for51_init:
2982   16AC 26 00 00      mov b, 0
2983   16AF FD 42 E4 2E   mov [__pos], b
2984   16B3             _for51_cond:
2985   16B3 29 E4 2E      mov b, [__pos] ; pos
2986   16B6 D7            push a
2987   16B7 11            mov a, b
2988   16B8 26 0C 00      mov b, 12
2989   16BB B0            cmp a, b
2990   16BC 0E            lodflgs
2991   16BD 87 02         and al, %00000010 ; <
2992   16BF FD 9C         shr al
2993   16C1 22 00         mov ah, 0
2994   16C3 27            mov b, a
2995   16C4 E4            pop a
2996   16C5 C0 00 00      cmp b, 0
2997   16C8 C6 7D 17      je _for51_exit
2998   16CB             _for51_block:
2999   16CB 29 8E 2E      mov b, [__cnarr]
3000   16CE 74            mov d, b
3001   16CF DA            push d
3002   16D0 29 E4 2E      mov b, [__pos] ; pos
3003   16D3 E7            pop d
3004   16D4 10 02 00      mov a, 2
3005   16D7 AC            mul a, b
3006   16D8 5A            add d, b
3007   16D9 DA            push d
3008   16DA 29 26 2E      mov b, [__anarr]
3009   16DD D7            push a
3010   16DE 74            mov d, b
3011   16DF DA            push d
3012   16E0 29 E4 2E      mov b, [__pos] ; pos
3013   16E3 E7            pop d
3014   16E4 10 02 00      mov a, 2
3015   16E7 AC            mul a, b
3016   16E8 5A            add d, b
3017   16E9 2A            mov b, [d]
3018   16EA E4            pop a
3019   16EB D7            push a
3020   16EC 11            mov a, b
3021   16ED 29 40 2E      mov b, [__bnarr]
3022   16F0 D7            push a
3023   16F1 74            mov d, b
3024   16F2 DA            push d
3025   16F3 29 E4 2E      mov b, [__pos] ; pos
3026   16F6 E7            pop d
3027   16F7 10 02 00      mov a, 2
3028   16FA AC            mul a, b
3029   16FB 5A            add d, b
3030   16FC 2A            mov b, [d]
3031   16FD E4            pop a
3032   16FE 54            add a, b
3033   16FF 27            mov b, a
3034   1700 E4            pop a
3035   1701 D7            push a
3036   1702 11            mov a, b
3037   1703 29 E6 2E      mov b, [__carry] ; carry
3038   1706 54            add a, b
3039   1707 27            mov b, a
3040   1708 E4            pop a
3041   1709 E7            pop d
3042   170A 11            mov a, b
3043   170B 43            mov [d], a
3044   170C 26 00 00      mov b, 0
3045   170F FD 42 E6 2E   mov [__carry], b
3046   1713             _if52_cond:
3047   1713 29 8E 2E      mov b, [__cnarr]
3048   1716 D7            push a
3049   1717 74            mov d, b
3050   1718 DA            push d
3051   1719 29 E4 2E      mov b, [__pos] ; pos
3052   171C E7            pop d
3053   171D 10 02 00      mov a, 2
3054   1720 AC            mul a, b
3055   1721 5A            add d, b
3056   1722 2A            mov b, [d]
3057   1723 E4            pop a
3058   1724 D7            push a
3059   1725 11            mov a, b
3060   1726 26 63 00      mov b, 99
3061   1729 B0            cmp a, b
3062   172A 0E            lodflgs
3063   172B 87 03         and al, %00000011
3064   172D B9 00         cmp al, 0
3065   172F 0E            lodflgs
3066   1730 22 00         mov ah, 0
3067   1732 27            mov b, a
3068   1733 E4            pop a
3069   1734 C0 00 00      cmp b, 0
3070   1737 C6 6F 17      je _if52_exit
3071   173A             _if52_true:
3072   173A 26 01 00      mov b, 1
3073   173D FD 42 E6 2E   mov [__carry], b
3074   1741 29 8E 2E      mov b, [__cnarr]
3075   1744 74            mov d, b
3076   1745 DA            push d
3077   1746 29 E4 2E      mov b, [__pos] ; pos
3078   1749 E7            pop d
3079   174A 10 02 00      mov a, 2
3080   174D AC            mul a, b
3081   174E 5A            add d, b
3082   174F DA            push d
3083   1750 29 8E 2E      mov b, [__cnarr]
3084   1753 D7            push a
3085   1754 74            mov d, b
3086   1755 DA            push d
3087   1756 29 E4 2E      mov b, [__pos] ; pos
3088   1759 E7            pop d
3089   175A 10 02 00      mov a, 2
3090   175D AC            mul a, b
3091   175E 5A            add d, b
3092   175F 2A            mov b, [d]
3093   1760 E4            pop a
3094   1761 D7            push a
3095   1762 11            mov a, b
3096   1763 26 64 00      mov b, 100
3097   1766 60            sub a, b
3098   1767 27            mov b, a
3099   1768 E4            pop a
3100   1769 E7            pop d
3101   176A 11            mov a, b
3102   176B 43            mov [d], a
3103   176C 0A 6F 17      jmp _if52_exit
3104   176F             _if52_exit:
3105   176F             _for51_update:
3106   176F 29 E4 2E      mov b, [__pos] ; pos
3107   1772 11            mov a, b
3108   1773 FD 77         inc b
3109   1775 FD 42 E4 2E   mov [__pos], b
3110   1779 27            mov b, a
3111   177A 0A B3 16      jmp _for51_cond
3112   177D             _for51_exit:
3113   177D F9            leave
3114   177E 09            ret
3115   177F             
3116   177F             protominus:
3117   177F D2            push bp
3118   1780 9B            mov bp, sp
3119   1781 26 00 00      mov b, 0
3120   1784 FD 42 E6 2E   mov [__carry], b
3121   1788             _for53_init:
3122   1788 26 00 00      mov b, 0
3123   178B FD 42 E4 2E   mov [__pos], b
3124   178F             _for53_cond:
3125   178F 29 E4 2E      mov b, [__pos] ; pos
3126   1792 D7            push a
3127   1793 11            mov a, b
3128   1794 26 0C 00      mov b, 12
3129   1797 B0            cmp a, b
3130   1798 0E            lodflgs
3131   1799 87 02         and al, %00000010 ; <
3132   179B FD 9C         shr al
3133   179D 22 00         mov ah, 0
3134   179F 27            mov b, a
3135   17A0 E4            pop a
3136   17A1 C0 00 00      cmp b, 0
3137   17A4 C6 76 18      je _for53_exit
3138   17A7             _for53_block:
3139   17A7 26 00 00      mov b, 0
3140   17AA FD 42 E8 2E   mov [__nextcarry], b
3141   17AE             _if54_cond:
3142   17AE 29 40 2E      mov b, [__bnarr]
3143   17B1 D7            push a
3144   17B2 74            mov d, b
3145   17B3 DA            push d
3146   17B4 29 E4 2E      mov b, [__pos] ; pos
3147   17B7 E7            pop d
3148   17B8 10 02 00      mov a, 2
3149   17BB AC            mul a, b
3150   17BC 5A            add d, b
3151   17BD 2A            mov b, [d]
3152   17BE E4            pop a
3153   17BF D7            push a
3154   17C0 11            mov a, b
3155   17C1 29 E6 2E      mov b, [__carry] ; carry
3156   17C4 54            add a, b
3157   17C5 27            mov b, a
3158   17C6 E4            pop a
3159   17C7 D7            push a
3160   17C8 11            mov a, b
3161   17C9 29 26 2E      mov b, [__anarr]
3162   17CC D7            push a
3163   17CD 74            mov d, b
3164   17CE DA            push d
3165   17CF 29 E4 2E      mov b, [__pos] ; pos
3166   17D2 E7            pop d
3167   17D3 10 02 00      mov a, 2
3168   17D6 AC            mul a, b
3169   17D7 5A            add d, b
3170   17D8 2A            mov b, [d]
3171   17D9 E4            pop a
3172   17DA B0            cmp a, b
3173   17DB 0E            lodflgs
3174   17DC 87 03         and al, %00000011
3175   17DE B9 00         cmp al, 0
3176   17E0 0E            lodflgs
3177   17E1 22 00         mov ah, 0
3178   17E3 27            mov b, a
3179   17E4 E4            pop a
3180   17E5 C0 00 00      cmp b, 0
3181   17E8 C6 20 18      je _if54_exit
3182   17EB             _if54_true:
3183   17EB 29 26 2E      mov b, [__anarr]
3184   17EE 74            mov d, b
3185   17EF DA            push d
3186   17F0 29 E4 2E      mov b, [__pos] ; pos
3187   17F3 E7            pop d
3188   17F4 10 02 00      mov a, 2
3189   17F7 AC            mul a, b
3190   17F8 5A            add d, b
3191   17F9 DA            push d
3192   17FA 29 26 2E      mov b, [__anarr]
3193   17FD D7            push a
3194   17FE 74            mov d, b
3195   17FF DA            push d
3196   1800 29 E4 2E      mov b, [__pos] ; pos
3197   1803 E7            pop d
3198   1804 10 02 00      mov a, 2
3199   1807 AC            mul a, b
3200   1808 5A            add d, b
3201   1809 2A            mov b, [d]
3202   180A E4            pop a
3203   180B D7            push a
3204   180C 11            mov a, b
3205   180D 26 64 00      mov b, 100
3206   1810 54            add a, b
3207   1811 27            mov b, a
3208   1812 E4            pop a
3209   1813 E7            pop d
3210   1814 11            mov a, b
3211   1815 43            mov [d], a
3212   1816 26 01 00      mov b, 1
3213   1819 FD 42 E8 2E   mov [__nextcarry], b
3214   181D 0A 20 18      jmp _if54_exit
3215   1820             _if54_exit:
3216   1820 29 8E 2E      mov b, [__cnarr]
3217   1823 74            mov d, b
3218   1824 DA            push d
3219   1825 29 E4 2E      mov b, [__pos] ; pos
3220   1828 E7            pop d
3221   1829 10 02 00      mov a, 2
3222   182C AC            mul a, b
3223   182D 5A            add d, b
3224   182E DA            push d
3225   182F 29 26 2E      mov b, [__anarr]
3226   1832 D7            push a
3227   1833 74            mov d, b
3228   1834 DA            push d
3229   1835 29 E4 2E      mov b, [__pos] ; pos
3230   1838 E7            pop d
3231   1839 10 02 00      mov a, 2
3232   183C AC            mul a, b
3233   183D 5A            add d, b
3234   183E 2A            mov b, [d]
3235   183F E4            pop a
3236   1840 D7            push a
3237   1841 11            mov a, b
3238   1842 29 40 2E      mov b, [__bnarr]
3239   1845 D7            push a
3240   1846 74            mov d, b
3241   1847 DA            push d
3242   1848 29 E4 2E      mov b, [__pos] ; pos
3243   184B E7            pop d
3244   184C 10 02 00      mov a, 2
3245   184F AC            mul a, b
3246   1850 5A            add d, b
3247   1851 2A            mov b, [d]
3248   1852 E4            pop a
3249   1853 60            sub a, b
3250   1854 27            mov b, a
3251   1855 E4            pop a
3252   1856 D7            push a
3253   1857 11            mov a, b
3254   1858 29 E6 2E      mov b, [__carry] ; carry
3255   185B 60            sub a, b
3256   185C 27            mov b, a
3257   185D E4            pop a
3258   185E E7            pop d
3259   185F 11            mov a, b
3260   1860 43            mov [d], a
3261   1861 29 E8 2E      mov b, [__nextcarry] ; nextcarry
3262   1864 FD 42 E6 2E   mov [__carry], b
3263   1868             _for53_update:
3264   1868 29 E4 2E      mov b, [__pos] ; pos
3265   186B 11            mov a, b
3266   186C FD 77         inc b
3267   186E FD 42 E4 2E   mov [__pos], b
3268   1872 27            mov b, a
3269   1873 0A 8F 17      jmp _for53_cond
3270   1876             _for53_exit:
3271   1876             _if55_cond:
3272   1876 29 E6 2E      mov b, [__carry] ; carry
3273   1879 D7            push a
3274   187A 11            mov a, b
3275   187B 26 01 00      mov b, 1
3276   187E B0            cmp a, b
3277   187F 0E            lodflgs
3278   1880 87 01         and al, %00000001 ; ==
3279   1882 22 00         mov ah, 0
3280   1884 27            mov b, a
3281   1885 E4            pop a
3282   1886 C0 00 00      cmp b, 0
3283   1889 C6 9D 18      je _if55_exit
3284   188C             _if55_true:
3285   188C 26 01 00      mov b, 1
3286   188F FD 42 E0 2E   mov [__csign], b
3287   1893 26 00 00      mov b, 0
3288   1896 FD 42 E6 2E   mov [__carry], b
3289   189A 0A 9D 18      jmp _if55_exit
3290   189D             _if55_exit:
3291   189D F9            leave
3292   189E 09            ret
3293   189F             
3294   189F             pminus:
3295   189F D2            push bp
3296   18A0 9B            mov bp, sp
3297   18A1             _for56_init:
3298   18A1 26 00 00      mov b, 0
3299   18A4 FD 42 14 2F   mov [__divi], b
3300   18A8             _for56_cond:
3301   18A8 29 14 2F      mov b, [__divi] ; divi
3302   18AB D7            push a
3303   18AC 11            mov a, b
3304   18AD 26 0C 00      mov b, 12
3305   18B0 B0            cmp a, b
3306   18B1 0E            lodflgs
3307   18B2 87 02         and al, %00000010 ; <
3308   18B4 FD 9C         shr al
3309   18B6 22 00         mov ah, 0
3310   18B8 27            mov b, a
3311   18B9 E4            pop a
3312   18BA C0 00 00      cmp b, 0
3313   18BD C6 E3 18      je _for56_exit
3314   18C0             _for56_block:
3315   18C0 29 8E 2E      mov b, [__cnarr]
3316   18C3 74            mov d, b
3317   18C4 DA            push d
3318   18C5 29 14 2F      mov b, [__divi] ; divi
3319   18C8 E7            pop d
3320   18C9 10 02 00      mov a, 2
3321   18CC AC            mul a, b
3322   18CD 5A            add d, b
3323   18CE DA            push d
3324   18CF 26 00 00      mov b, 0
3325   18D2 E7            pop d
3326   18D3 11            mov a, b
3327   18D4 43            mov [d], a
3328   18D5             _for56_update:
3329   18D5 29 14 2F      mov b, [__divi] ; divi
3330   18D8 11            mov a, b
3331   18D9 FD 77         inc b
3332   18DB FD 42 14 2F   mov [__divi], b
3333   18DF 27            mov b, a
3334   18E0 0A A8 18      jmp _for56_cond
3335   18E3             _for56_exit:
3336   18E3 07 55 15      call checkabsabsize
3337   18E6             _if57_cond:
3338   18E6 29 DC 2E      mov b, [__asign] ; asign
3339   18E9 D7            push a
3340   18EA 11            mov a, b
3341   18EB 29 DE 2E      mov b, [__bsign] ; bsign
3342   18EE B0            cmp a, b
3343   18EF 0E            lodflgs
3344   18F0 87 01         and al, %00000001 ; ==
3345   18F2 22 00         mov ah, 0
3346   18F4 27            mov b, a
3347   18F5 E4            pop a
3348   18F6 D7            push a
3349   18F7 11            mov a, b
3350   18F8 AF 00 00      cmp a, 0
3351   18FB 0E            lodflgs
3352   18FC 29 EE 2E      mov b, [__aeqb] ; aeqb
3353   18FF D7            push a
3354   1900 11            mov a, b
3355   1901 26 01 00      mov b, 1
3356   1904 B0            cmp a, b
3357   1905 0E            lodflgs
3358   1906 87 01         and al, %00000001 ; ==
3359   1908 22 00         mov ah, 0
3360   190A 27            mov b, a
3361   190B E4            pop a
3362   190C DB            push al
3363   190D C0 00 00      cmp b, 0
3364   1910 0E            lodflgs
3365   1911 EA            pop bl
3366   1912 8C            or al, bl
3367   1913 8F 01         xor al, %00000001
3368   1915 2F            mov bl, al
3369   1916 A7 00         mov bh, 0
3370   1918 E4            pop a
3371   1919 C0 00 00      cmp b, 0
3372   191C C6 6B 19      je _if57_exit
3373   191F             _if57_true:
3374   191F 26 00 00      mov b, 0
3375   1922 FD 42 E0 2E   mov [__csign], b
3376   1926             _for58_init:
3377   1926 26 01 00      mov b, 1
3378   1929 FD 42 E4 2E   mov [__pos], b
3379   192D             _for58_cond:
3380   192D 29 E4 2E      mov b, [__pos] ; pos
3381   1930 D7            push a
3382   1931 11            mov a, b
3383   1932 26 0C 00      mov b, 12
3384   1935 B0            cmp a, b
3385   1936 0E            lodflgs
3386   1937 87 02         and al, %00000010 ; <
3387   1939 FD 9C         shr al
3388   193B 22 00         mov ah, 0
3389   193D 27            mov b, a
3390   193E E4            pop a
3391   193F C0 00 00      cmp b, 0
3392   1942 C6 68 19      je _for58_exit
3393   1945             _for58_block:
3394   1945 29 8E 2E      mov b, [__cnarr]
3395   1948 74            mov d, b
3396   1949 DA            push d
3397   194A 29 E4 2E      mov b, [__pos] ; pos
3398   194D E7            pop d
3399   194E 10 02 00      mov a, 2
3400   1951 AC            mul a, b
3401   1952 5A            add d, b
3402   1953 DA            push d
3403   1954 26 00 00      mov b, 0
3404   1957 E7            pop d
3405   1958 11            mov a, b
3406   1959 43            mov [d], a
3407   195A             _for58_update:
3408   195A 29 E4 2E      mov b, [__pos] ; pos
3409   195D 11            mov a, b
3410   195E FD 77         inc b
3411   1960 FD 42 E4 2E   mov [__pos], b
3412   1964 27            mov b, a
3413   1965 0A 2D 19      jmp _for58_cond
3414   1968             _for58_exit:
3415   1968 0A 6B 19      jmp _if57_exit
3416   196B             _if57_exit:
3417   196B             _if59_cond:
3418   196B 29 DC 2E      mov b, [__asign] ; asign
3419   196E D7            push a
3420   196F 11            mov a, b
3421   1970 26 00 00      mov b, 0
3422   1973 B0            cmp a, b
3423   1974 0E            lodflgs
3424   1975 87 01         and al, %00000001 ; ==
3425   1977 22 00         mov ah, 0
3426   1979 27            mov b, a
3427   197A E4            pop a
3428   197B D7            push a
3429   197C 11            mov a, b
3430   197D AF 00 00      cmp a, 0
3431   1980 0E            lodflgs
3432   1981 29 DE 2E      mov b, [__bsign] ; bsign
3433   1984 D7            push a
3434   1985 11            mov a, b
3435   1986 26 00 00      mov b, 0
3436   1989 B0            cmp a, b
3437   198A 0E            lodflgs
3438   198B 87 01         and al, %00000001 ; ==
3439   198D 22 00         mov ah, 0
3440   198F 27            mov b, a
3441   1990 E4            pop a
3442   1991 DB            push al
3443   1992 C0 00 00      cmp b, 0
3444   1995 0E            lodflgs
3445   1996 EA            pop bl
3446   1997 8C            or al, bl
3447   1998 8F 01         xor al, %00000001
3448   199A 2F            mov bl, al
3449   199B A7 00         mov bh, 0
3450   199D E4            pop a
3451   199E D7            push a
3452   199F 11            mov a, b
3453   19A0 AF 00 00      cmp a, 0
3454   19A3 0E            lodflgs
3455   19A4 29 F2 2E      mov b, [__ageb] ; ageb
3456   19A7 D7            push a
3457   19A8 11            mov a, b
3458   19A9 26 01 00      mov b, 1
3459   19AC B0            cmp a, b
3460   19AD 0E            lodflgs
3461   19AE 87 01         and al, %00000001 ; ==
3462   19B0 22 00         mov ah, 0
3463   19B2 27            mov b, a
3464   19B3 E4            pop a
3465   19B4 DB            push al
3466   19B5 C0 00 00      cmp b, 0
3467   19B8 0E            lodflgs
3468   19B9 EA            pop bl
3469   19BA 8C            or al, bl
3470   19BB 8F 01         xor al, %00000001
3471   19BD 2F            mov bl, al
3472   19BE A7 00         mov bh, 0
3473   19C0 E4            pop a
3474   19C1 C0 00 00      cmp b, 0
3475   19C4 C6 D4 19      je _if59_exit
3476   19C7             _if59_true:
3477   19C7 26 00 00      mov b, 0
3478   19CA FD 42 E0 2E   mov [__csign], b
3479   19CE 07 7F 17      call protominus
3480   19D1 0A D4 19      jmp _if59_exit
3481   19D4             _if59_exit:
3482   19D4             _if60_cond:
3483   19D4 29 DC 2E      mov b, [__asign] ; asign
3484   19D7 D7            push a
3485   19D8 11            mov a, b
3486   19D9 26 00 00      mov b, 0
3487   19DC B0            cmp a, b
3488   19DD 0E            lodflgs
3489   19DE 87 01         and al, %00000001 ; ==
3490   19E0 22 00         mov ah, 0
3491   19E2 27            mov b, a
3492   19E3 E4            pop a
3493   19E4 D7            push a
3494   19E5 11            mov a, b
3495   19E6 AF 00 00      cmp a, 0
3496   19E9 0E            lodflgs
3497   19EA 29 DE 2E      mov b, [__bsign] ; bsign
3498   19ED D7            push a
3499   19EE 11            mov a, b
3500   19EF 26 00 00      mov b, 0
3501   19F2 B0            cmp a, b
3502   19F3 0E            lodflgs
3503   19F4 87 01         and al, %00000001 ; ==
3504   19F6 22 00         mov ah, 0
3505   19F8 27            mov b, a
3506   19F9 E4            pop a
3507   19FA DB            push al
3508   19FB C0 00 00      cmp b, 0
3509   19FE 0E            lodflgs
3510   19FF EA            pop bl
3511   1A00 8C            or al, bl
3512   1A01 8F 01         xor al, %00000001
3513   1A03 2F            mov bl, al
3514   1A04 A7 00         mov bh, 0
3515   1A06 E4            pop a
3516   1A07 D7            push a
3517   1A08 11            mov a, b
3518   1A09 AF 00 00      cmp a, 0
3519   1A0C 0E            lodflgs
3520   1A0D 29 EC 2E      mov b, [__bgta] ; bgta
3521   1A10 D7            push a
3522   1A11 11            mov a, b
3523   1A12 26 01 00      mov b, 1
3524   1A15 B0            cmp a, b
3525   1A16 0E            lodflgs
3526   1A17 87 01         and al, %00000001 ; ==
3527   1A19 22 00         mov ah, 0
3528   1A1B 27            mov b, a
3529   1A1C E4            pop a
3530   1A1D DB            push al
3531   1A1E C0 00 00      cmp b, 0
3532   1A21 0E            lodflgs
3533   1A22 EA            pop bl
3534   1A23 8C            or al, bl
3535   1A24 8F 01         xor al, %00000001
3536   1A26 2F            mov bl, al
3537   1A27 A7 00         mov bh, 0
3538   1A29 E4            pop a
3539   1A2A C0 00 00      cmp b, 0
3540   1A2D C6 40 1A      je _if60_exit
3541   1A30             _if60_true:
3542   1A30 26 01 00      mov b, 1
3543   1A33 FD 42 E0 2E   mov [__csign], b
3544   1A37 07 79 14      call swapab
3545   1A3A 07 7F 17      call protominus
3546   1A3D 0A 40 1A      jmp _if60_exit
3547   1A40             _if60_exit:
3548   1A40             _if61_cond:
3549   1A40 29 DC 2E      mov b, [__asign] ; asign
3550   1A43 D7            push a
3551   1A44 11            mov a, b
3552   1A45 26 01 00      mov b, 1
3553   1A48 B0            cmp a, b
3554   1A49 0E            lodflgs
3555   1A4A 87 01         and al, %00000001 ; ==
3556   1A4C 22 00         mov ah, 0
3557   1A4E 27            mov b, a
3558   1A4F E4            pop a
3559   1A50 D7            push a
3560   1A51 11            mov a, b
3561   1A52 AF 00 00      cmp a, 0
3562   1A55 0E            lodflgs
3563   1A56 29 DE 2E      mov b, [__bsign] ; bsign
3564   1A59 D7            push a
3565   1A5A 11            mov a, b
3566   1A5B 26 01 00      mov b, 1
3567   1A5E B0            cmp a, b
3568   1A5F 0E            lodflgs
3569   1A60 87 01         and al, %00000001 ; ==
3570   1A62 22 00         mov ah, 0
3571   1A64 27            mov b, a
3572   1A65 E4            pop a
3573   1A66 DB            push al
3574   1A67 C0 00 00      cmp b, 0
3575   1A6A 0E            lodflgs
3576   1A6B EA            pop bl
3577   1A6C 8C            or al, bl
3578   1A6D 8F 01         xor al, %00000001
3579   1A6F 2F            mov bl, al
3580   1A70 A7 00         mov bh, 0
3581   1A72 E4            pop a
3582   1A73 D7            push a
3583   1A74 11            mov a, b
3584   1A75 AF 00 00      cmp a, 0
3585   1A78 0E            lodflgs
3586   1A79 29 F2 2E      mov b, [__ageb] ; ageb
3587   1A7C D7            push a
3588   1A7D 11            mov a, b
3589   1A7E 26 01 00      mov b, 1
3590   1A81 B0            cmp a, b
3591   1A82 0E            lodflgs
3592   1A83 87 01         and al, %00000001 ; ==
3593   1A85 22 00         mov ah, 0
3594   1A87 27            mov b, a
3595   1A88 E4            pop a
3596   1A89 DB            push al
3597   1A8A C0 00 00      cmp b, 0
3598   1A8D 0E            lodflgs
3599   1A8E EA            pop bl
3600   1A8F 8C            or al, bl
3601   1A90 8F 01         xor al, %00000001
3602   1A92 2F            mov bl, al
3603   1A93 A7 00         mov bh, 0
3604   1A95 E4            pop a
3605   1A96 C0 00 00      cmp b, 0
3606   1A99 C6 A9 1A      je _if61_exit
3607   1A9C             _if61_true:
3608   1A9C 26 01 00      mov b, 1
3609   1A9F FD 42 E0 2E   mov [__csign], b
3610   1AA3 07 7F 17      call protominus
3611   1AA6 0A A9 1A      jmp _if61_exit
3612   1AA9             _if61_exit:
3613   1AA9             _if62_cond:
3614   1AA9 29 DC 2E      mov b, [__asign] ; asign
3615   1AAC D7            push a
3616   1AAD 11            mov a, b
3617   1AAE 26 01 00      mov b, 1
3618   1AB1 B0            cmp a, b
3619   1AB2 0E            lodflgs
3620   1AB3 87 01         and al, %00000001 ; ==
3621   1AB5 22 00         mov ah, 0
3622   1AB7 27            mov b, a
3623   1AB8 E4            pop a
3624   1AB9 D7            push a
3625   1ABA 11            mov a, b
3626   1ABB AF 00 00      cmp a, 0
3627   1ABE 0E            lodflgs
3628   1ABF 29 DE 2E      mov b, [__bsign] ; bsign
3629   1AC2 D7            push a
3630   1AC3 11            mov a, b
3631   1AC4 26 01 00      mov b, 1
3632   1AC7 B0            cmp a, b
3633   1AC8 0E            lodflgs
3634   1AC9 87 01         and al, %00000001 ; ==
3635   1ACB 22 00         mov ah, 0
3636   1ACD 27            mov b, a
3637   1ACE E4            pop a
3638   1ACF DB            push al
3639   1AD0 C0 00 00      cmp b, 0
3640   1AD3 0E            lodflgs
3641   1AD4 EA            pop bl
3642   1AD5 8C            or al, bl
3643   1AD6 8F 01         xor al, %00000001
3644   1AD8 2F            mov bl, al
3645   1AD9 A7 00         mov bh, 0
3646   1ADB E4            pop a
3647   1ADC D7            push a
3648   1ADD 11            mov a, b
3649   1ADE AF 00 00      cmp a, 0
3650   1AE1 0E            lodflgs
3651   1AE2 29 EC 2E      mov b, [__bgta] ; bgta
3652   1AE5 D7            push a
3653   1AE6 11            mov a, b
3654   1AE7 26 01 00      mov b, 1
3655   1AEA B0            cmp a, b
3656   1AEB 0E            lodflgs
3657   1AEC 87 01         and al, %00000001 ; ==
3658   1AEE 22 00         mov ah, 0
3659   1AF0 27            mov b, a
3660   1AF1 E4            pop a
3661   1AF2 DB            push al
3662   1AF3 C0 00 00      cmp b, 0
3663   1AF6 0E            lodflgs
3664   1AF7 EA            pop bl
3665   1AF8 8C            or al, bl
3666   1AF9 8F 01         xor al, %00000001
3667   1AFB 2F            mov bl, al
3668   1AFC A7 00         mov bh, 0
3669   1AFE E4            pop a
3670   1AFF C0 00 00      cmp b, 0
3671   1B02 C6 15 1B      je _if62_exit
3672   1B05             _if62_true:
3673   1B05 26 00 00      mov b, 0
3674   1B08 FD 42 E0 2E   mov [__csign], b
3675   1B0C 07 79 14      call swapab
3676   1B0F 07 7F 17      call protominus
3677   1B12 0A 15 1B      jmp _if62_exit
3678   1B15             _if62_exit:
3679   1B15             _if63_cond:
3680   1B15 29 DC 2E      mov b, [__asign] ; asign
3681   1B18 D7            push a
3682   1B19 11            mov a, b
3683   1B1A 26 00 00      mov b, 0
3684   1B1D B0            cmp a, b
3685   1B1E 0E            lodflgs
3686   1B1F 87 01         and al, %00000001 ; ==
3687   1B21 22 00         mov ah, 0
3688   1B23 27            mov b, a
3689   1B24 E4            pop a
3690   1B25 D7            push a
3691   1B26 11            mov a, b
3692   1B27 AF 00 00      cmp a, 0
3693   1B2A 0E            lodflgs
3694   1B2B 29 DE 2E      mov b, [__bsign] ; bsign
3695   1B2E D7            push a
3696   1B2F 11            mov a, b
3697   1B30 26 01 00      mov b, 1
3698   1B33 B0            cmp a, b
3699   1B34 0E            lodflgs
3700   1B35 87 01         and al, %00000001 ; ==
3701   1B37 22 00         mov ah, 0
3702   1B39 27            mov b, a
3703   1B3A E4            pop a
3704   1B3B DB            push al
3705   1B3C C0 00 00      cmp b, 0
3706   1B3F 0E            lodflgs
3707   1B40 EA            pop bl
3708   1B41 8C            or al, bl
3709   1B42 8F 01         xor al, %00000001
3710   1B44 2F            mov bl, al
3711   1B45 A7 00         mov bh, 0
3712   1B47 E4            pop a
3713   1B48 C0 00 00      cmp b, 0
3714   1B4B C6 5B 1B      je _if63_exit
3715   1B4E             _if63_true:
3716   1B4E 26 00 00      mov b, 0
3717   1B51 FD 42 E0 2E   mov [__csign], b
3718   1B55 07 A3 16      call protoplus
3719   1B58 0A 5B 1B      jmp _if63_exit
3720   1B5B             _if63_exit:
3721   1B5B             _if64_cond:
3722   1B5B 29 DC 2E      mov b, [__asign] ; asign
3723   1B5E D7            push a
3724   1B5F 11            mov a, b
3725   1B60 26 01 00      mov b, 1
3726   1B63 B0            cmp a, b
3727   1B64 0E            lodflgs
3728   1B65 87 01         and al, %00000001 ; ==
3729   1B67 22 00         mov ah, 0
3730   1B69 27            mov b, a
3731   1B6A E4            pop a
3732   1B6B D7            push a
3733   1B6C 11            mov a, b
3734   1B6D AF 00 00      cmp a, 0
3735   1B70 0E            lodflgs
3736   1B71 29 DE 2E      mov b, [__bsign] ; bsign
3737   1B74 D7            push a
3738   1B75 11            mov a, b
3739   1B76 26 00 00      mov b, 0
3740   1B79 B0            cmp a, b
3741   1B7A 0E            lodflgs
3742   1B7B 87 01         and al, %00000001 ; ==
3743   1B7D 22 00         mov ah, 0
3744   1B7F 27            mov b, a
3745   1B80 E4            pop a
3746   1B81 DB            push al
3747   1B82 C0 00 00      cmp b, 0
3748   1B85 0E            lodflgs
3749   1B86 EA            pop bl
3750   1B87 8C            or al, bl
3751   1B88 8F 01         xor al, %00000001
3752   1B8A 2F            mov bl, al
3753   1B8B A7 00         mov bh, 0
3754   1B8D E4            pop a
3755   1B8E C0 00 00      cmp b, 0
3756   1B91 C6 A1 1B      je _if64_exit
3757   1B94             _if64_true:
3758   1B94 26 01 00      mov b, 1
3759   1B97 FD 42 E0 2E   mov [__csign], b
3760   1B9B 07 A3 16      call protoplus
3761   1B9E 0A A1 1B      jmp _if64_exit
3762   1BA1             _if64_exit:
3763   1BA1 F9            leave
3764   1BA2 09            ret
3765   1BA3             
3766   1BA3             minus:
3767   1BA3 D2            push bp
3768   1BA4 9B            mov bp, sp
3769   1BA5 07 0B 12      call fixsignin
3770   1BA8 07 9F 18      call pminus
3771   1BAB 07 7B 13      call fixcsizezero
3772   1BAE 07 2C 13      call fixsignout
3773   1BB1 F9            leave
3774   1BB2 09            ret
3775   1BB3             
3776   1BB3             pplus:
3777   1BB3 D2            push bp
3778   1BB4 9B            mov bp, sp
3779   1BB5             _for65_init:
3780   1BB5 26 00 00      mov b, 0
3781   1BB8 FD 42 14 2F   mov [__divi], b
3782   1BBC             _for65_cond:
3783   1BBC 29 14 2F      mov b, [__divi] ; divi
3784   1BBF D7            push a
3785   1BC0 11            mov a, b
3786   1BC1 26 0C 00      mov b, 12
3787   1BC4 B0            cmp a, b
3788   1BC5 0E            lodflgs
3789   1BC6 87 02         and al, %00000010 ; <
3790   1BC8 FD 9C         shr al
3791   1BCA 22 00         mov ah, 0
3792   1BCC 27            mov b, a
3793   1BCD E4            pop a
3794   1BCE C0 00 00      cmp b, 0
3795   1BD1 C6 F7 1B      je _for65_exit
3796   1BD4             _for65_block:
3797   1BD4 29 8E 2E      mov b, [__cnarr]
3798   1BD7 74            mov d, b
3799   1BD8 DA            push d
3800   1BD9 29 14 2F      mov b, [__divi] ; divi
3801   1BDC E7            pop d
3802   1BDD 10 02 00      mov a, 2
3803   1BE0 AC            mul a, b
3804   1BE1 5A            add d, b
3805   1BE2 DA            push d
3806   1BE3 26 00 00      mov b, 0
3807   1BE6 E7            pop d
3808   1BE7 11            mov a, b
3809   1BE8 43            mov [d], a
3810   1BE9             _for65_update:
3811   1BE9 29 14 2F      mov b, [__divi] ; divi
3812   1BEC 11            mov a, b
3813   1BED FD 77         inc b
3814   1BEF FD 42 14 2F   mov [__divi], b
3815   1BF3 27            mov b, a
3816   1BF4 0A BC 1B      jmp _for65_cond
3817   1BF7             _for65_exit:
3818   1BF7 07 55 15      call checkabsabsize
3819   1BFA             _if66_cond:
3820   1BFA 29 DC 2E      mov b, [__asign] ; asign
3821   1BFD D7            push a
3822   1BFE 11            mov a, b
3823   1BFF 26 00 00      mov b, 0
3824   1C02 B0            cmp a, b
3825   1C03 0E            lodflgs
3826   1C04 87 01         and al, %00000001 ; ==
3827   1C06 22 00         mov ah, 0
3828   1C08 27            mov b, a
3829   1C09 E4            pop a
3830   1C0A D7            push a
3831   1C0B 11            mov a, b
3832   1C0C AF 00 00      cmp a, 0
3833   1C0F 0E            lodflgs
3834   1C10 29 DE 2E      mov b, [__bsign] ; bsign
3835   1C13 D7            push a
3836   1C14 11            mov a, b
3837   1C15 26 01 00      mov b, 1
3838   1C18 B0            cmp a, b
3839   1C19 0E            lodflgs
3840   1C1A 87 01         and al, %00000001 ; ==
3841   1C1C 22 00         mov ah, 0
3842   1C1E 27            mov b, a
3843   1C1F E4            pop a
3844   1C20 DB            push al
3845   1C21 C0 00 00      cmp b, 0
3846   1C24 0E            lodflgs
3847   1C25 EA            pop bl
3848   1C26 8C            or al, bl
3849   1C27 8F 01         xor al, %00000001
3850   1C29 2F            mov bl, al
3851   1C2A A7 00         mov bh, 0
3852   1C2C E4            pop a
3853   1C2D D7            push a
3854   1C2E 11            mov a, b
3855   1C2F AF 00 00      cmp a, 0
3856   1C32 0E            lodflgs
3857   1C33 29 EE 2E      mov b, [__aeqb] ; aeqb
3858   1C36 D7            push a
3859   1C37 11            mov a, b
3860   1C38 26 01 00      mov b, 1
3861   1C3B B0            cmp a, b
3862   1C3C 0E            lodflgs
3863   1C3D 87 01         and al, %00000001 ; ==
3864   1C3F 22 00         mov ah, 0
3865   1C41 27            mov b, a
3866   1C42 E4            pop a
3867   1C43 DB            push al
3868   1C44 C0 00 00      cmp b, 0
3869   1C47 0E            lodflgs
3870   1C48 EA            pop bl
3871   1C49 8C            or al, bl
3872   1C4A 8F 01         xor al, %00000001
3873   1C4C 2F            mov bl, al
3874   1C4D A7 00         mov bh, 0
3875   1C4F E4            pop a
3876   1C50 C0 00 00      cmp b, 0
3877   1C53 C6 B2 1C      je _if66_exit
3878   1C56             _if66_true:
3879   1C56 26 00 00      mov b, 0
3880   1C59 FD 42 DC 2E   mov [__asign], b
3881   1C5D 26 00 00      mov b, 0
3882   1C60 FD 42 DE 2E   mov [__bsign], b
3883   1C64 26 00 00      mov b, 0
3884   1C67 FD 42 E0 2E   mov [__csign], b
3885   1C6B             _for67_init:
3886   1C6B 26 01 00      mov b, 1
3887   1C6E FD 42 E4 2E   mov [__pos], b
3888   1C72             _for67_cond:
3889   1C72 29 E4 2E      mov b, [__pos] ; pos
3890   1C75 D7            push a
3891   1C76 11            mov a, b
3892   1C77 26 0C 00      mov b, 12
3893   1C7A B0            cmp a, b
3894   1C7B 0E            lodflgs
3895   1C7C 87 02         and al, %00000010 ; <
3896   1C7E FD 9C         shr al
3897   1C80 22 00         mov ah, 0
3898   1C82 27            mov b, a
3899   1C83 E4            pop a
3900   1C84 C0 00 00      cmp b, 0
3901   1C87 C6 AD 1C      je _for67_exit
3902   1C8A             _for67_block:
3903   1C8A 29 8E 2E      mov b, [__cnarr]
3904   1C8D 74            mov d, b
3905   1C8E DA            push d
3906   1C8F 29 E4 2E      mov b, [__pos] ; pos
3907   1C92 E7            pop d
3908   1C93 10 02 00      mov a, 2
3909   1C96 AC            mul a, b
3910   1C97 5A            add d, b
3911   1C98 DA            push d
3912   1C99 26 00 00      mov b, 0
3913   1C9C E7            pop d
3914   1C9D 11            mov a, b
3915   1C9E 43            mov [d], a
3916   1C9F             _for67_update:
3917   1C9F 29 E4 2E      mov b, [__pos] ; pos
3918   1CA2 11            mov a, b
3919   1CA3 FD 77         inc b
3920   1CA5 FD 42 E4 2E   mov [__pos], b
3921   1CA9 27            mov b, a
3922   1CAA 0A 72 1C      jmp _for67_cond
3923   1CAD             _for67_exit:
3924   1CAD F9            leave
3925   1CAE 09            ret
3926   1CAF 0A B2 1C      jmp _if66_exit
3927   1CB2             _if66_exit:
3928   1CB2             _if68_cond:
3929   1CB2 29 DC 2E      mov b, [__asign] ; asign
3930   1CB5 D7            push a
3931   1CB6 11            mov a, b
3932   1CB7 26 01 00      mov b, 1
3933   1CBA B0            cmp a, b
3934   1CBB 0E            lodflgs
3935   1CBC 87 01         and al, %00000001 ; ==
3936   1CBE 22 00         mov ah, 0
3937   1CC0 27            mov b, a
3938   1CC1 E4            pop a
3939   1CC2 D7            push a
3940   1CC3 11            mov a, b
3941   1CC4 AF 00 00      cmp a, 0
3942   1CC7 0E            lodflgs
3943   1CC8 29 DE 2E      mov b, [__bsign] ; bsign
3944   1CCB D7            push a
3945   1CCC 11            mov a, b
3946   1CCD 26 00 00      mov b, 0
3947   1CD0 B0            cmp a, b
3948   1CD1 0E            lodflgs
3949   1CD2 87 01         and al, %00000001 ; ==
3950   1CD4 22 00         mov ah, 0
3951   1CD6 27            mov b, a
3952   1CD7 E4            pop a
3953   1CD8 DB            push al
3954   1CD9 C0 00 00      cmp b, 0
3955   1CDC 0E            lodflgs
3956   1CDD EA            pop bl
3957   1CDE 8C            or al, bl
3958   1CDF 8F 01         xor al, %00000001
3959   1CE1 2F            mov bl, al
3960   1CE2 A7 00         mov bh, 0
3961   1CE4 E4            pop a
3962   1CE5 D7            push a
3963   1CE6 11            mov a, b
3964   1CE7 AF 00 00      cmp a, 0
3965   1CEA 0E            lodflgs
3966   1CEB 29 EE 2E      mov b, [__aeqb] ; aeqb
3967   1CEE D7            push a
3968   1CEF 11            mov a, b
3969   1CF0 26 01 00      mov b, 1
3970   1CF3 B0            cmp a, b
3971   1CF4 0E            lodflgs
3972   1CF5 87 01         and al, %00000001 ; ==
3973   1CF7 22 00         mov ah, 0
3974   1CF9 27            mov b, a
3975   1CFA E4            pop a
3976   1CFB DB            push al
3977   1CFC C0 00 00      cmp b, 0
3978   1CFF 0E            lodflgs
3979   1D00 EA            pop bl
3980   1D01 8C            or al, bl
3981   1D02 8F 01         xor al, %00000001
3982   1D04 2F            mov bl, al
3983   1D05 A7 00         mov bh, 0
3984   1D07 E4            pop a
3985   1D08 C0 00 00      cmp b, 0
3986   1D0B C6 6A 1D      je _if68_exit
3987   1D0E             _if68_true:
3988   1D0E 26 00 00      mov b, 0
3989   1D11 FD 42 DC 2E   mov [__asign], b
3990   1D15 26 00 00      mov b, 0
3991   1D18 FD 42 DE 2E   mov [__bsign], b
3992   1D1C 26 00 00      mov b, 0
3993   1D1F FD 42 E0 2E   mov [__csign], b
3994   1D23             _for69_init:
3995   1D23 26 01 00      mov b, 1
3996   1D26 FD 42 E4 2E   mov [__pos], b
3997   1D2A             _for69_cond:
3998   1D2A 29 E4 2E      mov b, [__pos] ; pos
3999   1D2D D7            push a
4000   1D2E 11            mov a, b
4001   1D2F 26 0C 00      mov b, 12
4002   1D32 B0            cmp a, b
4003   1D33 0E            lodflgs
4004   1D34 87 02         and al, %00000010 ; <
4005   1D36 FD 9C         shr al
4006   1D38 22 00         mov ah, 0
4007   1D3A 27            mov b, a
4008   1D3B E4            pop a
4009   1D3C C0 00 00      cmp b, 0
4010   1D3F C6 65 1D      je _for69_exit
4011   1D42             _for69_block:
4012   1D42 29 8E 2E      mov b, [__cnarr]
4013   1D45 74            mov d, b
4014   1D46 DA            push d
4015   1D47 29 E4 2E      mov b, [__pos] ; pos
4016   1D4A E7            pop d
4017   1D4B 10 02 00      mov a, 2
4018   1D4E AC            mul a, b
4019   1D4F 5A            add d, b
4020   1D50 DA            push d
4021   1D51 26 00 00      mov b, 0
4022   1D54 E7            pop d
4023   1D55 11            mov a, b
4024   1D56 43            mov [d], a
4025   1D57             _for69_update:
4026   1D57 29 E4 2E      mov b, [__pos] ; pos
4027   1D5A 11            mov a, b
4028   1D5B FD 77         inc b
4029   1D5D FD 42 E4 2E   mov [__pos], b
4030   1D61 27            mov b, a
4031   1D62 0A 2A 1D      jmp _for69_cond
4032   1D65             _for69_exit:
4033   1D65 F9            leave
4034   1D66 09            ret
4035   1D67 0A 6A 1D      jmp _if68_exit
4036   1D6A             _if68_exit:
4037   1D6A             _if70_cond:
4038   1D6A 29 DC 2E      mov b, [__asign] ; asign
4039   1D6D D7            push a
4040   1D6E 11            mov a, b
4041   1D6F 26 00 00      mov b, 0
4042   1D72 B0            cmp a, b
4043   1D73 0E            lodflgs
4044   1D74 87 01         and al, %00000001 ; ==
4045   1D76 22 00         mov ah, 0
4046   1D78 27            mov b, a
4047   1D79 E4            pop a
4048   1D7A D7            push a
4049   1D7B 11            mov a, b
4050   1D7C AF 00 00      cmp a, 0
4051   1D7F 0E            lodflgs
4052   1D80 29 DE 2E      mov b, [__bsign] ; bsign
4053   1D83 D7            push a
4054   1D84 11            mov a, b
4055   1D85 26 00 00      mov b, 0
4056   1D88 B0            cmp a, b
4057   1D89 0E            lodflgs
4058   1D8A 87 01         and al, %00000001 ; ==
4059   1D8C 22 00         mov ah, 0
4060   1D8E 27            mov b, a
4061   1D8F E4            pop a
4062   1D90 DB            push al
4063   1D91 C0 00 00      cmp b, 0
4064   1D94 0E            lodflgs
4065   1D95 EA            pop bl
4066   1D96 8C            or al, bl
4067   1D97 8F 01         xor al, %00000001
4068   1D99 2F            mov bl, al
4069   1D9A A7 00         mov bh, 0
4070   1D9C E4            pop a
4071   1D9D C0 00 00      cmp b, 0
4072   1DA0 C6 C0 1D      je _if70_exit
4073   1DA3             _if70_true:
4074   1DA3 26 00 00      mov b, 0
4075   1DA6 FD 42 DC 2E   mov [__asign], b
4076   1DAA 26 00 00      mov b, 0
4077   1DAD FD 42 DE 2E   mov [__bsign], b
4078   1DB1 26 00 00      mov b, 0
4079   1DB4 FD 42 E0 2E   mov [__csign], b
4080   1DB8 07 A3 16      call protoplus
4081   1DBB F9            leave
4082   1DBC 09            ret
4083   1DBD 0A C0 1D      jmp _if70_exit
4084   1DC0             _if70_exit:
4085   1DC0             _if71_cond:
4086   1DC0 29 DC 2E      mov b, [__asign] ; asign
4087   1DC3 D7            push a
4088   1DC4 11            mov a, b
4089   1DC5 26 01 00      mov b, 1
4090   1DC8 B0            cmp a, b
4091   1DC9 0E            lodflgs
4092   1DCA 87 01         and al, %00000001 ; ==
4093   1DCC 22 00         mov ah, 0
4094   1DCE 27            mov b, a
4095   1DCF E4            pop a
4096   1DD0 D7            push a
4097   1DD1 11            mov a, b
4098   1DD2 AF 00 00      cmp a, 0
4099   1DD5 0E            lodflgs
4100   1DD6 29 DE 2E      mov b, [__bsign] ; bsign
4101   1DD9 D7            push a
4102   1DDA 11            mov a, b
4103   1DDB 26 01 00      mov b, 1
4104   1DDE B0            cmp a, b
4105   1DDF 0E            lodflgs
4106   1DE0 87 01         and al, %00000001 ; ==
4107   1DE2 22 00         mov ah, 0
4108   1DE4 27            mov b, a
4109   1DE5 E4            pop a
4110   1DE6 DB            push al
4111   1DE7 C0 00 00      cmp b, 0
4112   1DEA 0E            lodflgs
4113   1DEB EA            pop bl
4114   1DEC 8C            or al, bl
4115   1DED 8F 01         xor al, %00000001
4116   1DEF 2F            mov bl, al
4117   1DF0 A7 00         mov bh, 0
4118   1DF2 E4            pop a
4119   1DF3 C0 00 00      cmp b, 0
4120   1DF6 C6 16 1E      je _if71_exit
4121   1DF9             _if71_true:
4122   1DF9 26 00 00      mov b, 0
4123   1DFC FD 42 DC 2E   mov [__asign], b
4124   1E00 26 00 00      mov b, 0
4125   1E03 FD 42 DE 2E   mov [__bsign], b
4126   1E07 26 01 00      mov b, 1
4127   1E0A FD 42 E0 2E   mov [__csign], b
4128   1E0E 07 A3 16      call protoplus
4129   1E11 F9            leave
4130   1E12 09            ret
4131   1E13 0A 16 1E      jmp _if71_exit
4132   1E16             _if71_exit:
4133   1E16             _if72_cond:
4134   1E16 29 DC 2E      mov b, [__asign] ; asign
4135   1E19 D7            push a
4136   1E1A 11            mov a, b
4137   1E1B 26 00 00      mov b, 0
4138   1E1E B0            cmp a, b
4139   1E1F 0E            lodflgs
4140   1E20 87 01         and al, %00000001 ; ==
4141   1E22 22 00         mov ah, 0
4142   1E24 27            mov b, a
4143   1E25 E4            pop a
4144   1E26 D7            push a
4145   1E27 11            mov a, b
4146   1E28 AF 00 00      cmp a, 0
4147   1E2B 0E            lodflgs
4148   1E2C 29 DE 2E      mov b, [__bsign] ; bsign
4149   1E2F D7            push a
4150   1E30 11            mov a, b
4151   1E31 26 01 00      mov b, 1
4152   1E34 B0            cmp a, b
4153   1E35 0E            lodflgs
4154   1E36 87 01         and al, %00000001 ; ==
4155   1E38 22 00         mov ah, 0
4156   1E3A 27            mov b, a
4157   1E3B E4            pop a
4158   1E3C DB            push al
4159   1E3D C0 00 00      cmp b, 0
4160   1E40 0E            lodflgs
4161   1E41 EA            pop bl
4162   1E42 8C            or al, bl
4163   1E43 8F 01         xor al, %00000001
4164   1E45 2F            mov bl, al
4165   1E46 A7 00         mov bh, 0
4166   1E48 E4            pop a
4167   1E49 D7            push a
4168   1E4A 11            mov a, b
4169   1E4B AF 00 00      cmp a, 0
4170   1E4E 0E            lodflgs
4171   1E4F 29 EA 2E      mov b, [__agtb] ; agtb
4172   1E52 D7            push a
4173   1E53 11            mov a, b
4174   1E54 26 01 00      mov b, 1
4175   1E57 B0            cmp a, b
4176   1E58 0E            lodflgs
4177   1E59 87 01         and al, %00000001 ; ==
4178   1E5B 22 00         mov ah, 0
4179   1E5D 27            mov b, a
4180   1E5E E4            pop a
4181   1E5F DB            push al
4182   1E60 C0 00 00      cmp b, 0
4183   1E63 0E            lodflgs
4184   1E64 EA            pop bl
4185   1E65 8C            or al, bl
4186   1E66 8F 01         xor al, %00000001
4187   1E68 2F            mov bl, al
4188   1E69 A7 00         mov bh, 0
4189   1E6B E4            pop a
4190   1E6C C0 00 00      cmp b, 0
4191   1E6F C6 8F 1E      je _if72_exit
4192   1E72             _if72_true:
4193   1E72 26 00 00      mov b, 0
4194   1E75 FD 42 DC 2E   mov [__asign], b
4195   1E79 26 00 00      mov b, 0
4196   1E7C FD 42 DE 2E   mov [__bsign], b
4197   1E80 26 00 00      mov b, 0
4198   1E83 FD 42 E0 2E   mov [__csign], b
4199   1E87 07 7F 17      call protominus
4200   1E8A F9            leave
4201   1E8B 09            ret
4202   1E8C 0A 8F 1E      jmp _if72_exit
4203   1E8F             _if72_exit:
4204   1E8F             _if73_cond:
4205   1E8F 29 DC 2E      mov b, [__asign] ; asign
4206   1E92 D7            push a
4207   1E93 11            mov a, b
4208   1E94 26 00 00      mov b, 0
4209   1E97 B0            cmp a, b
4210   1E98 0E            lodflgs
4211   1E99 87 01         and al, %00000001 ; ==
4212   1E9B 22 00         mov ah, 0
4213   1E9D 27            mov b, a
4214   1E9E E4            pop a
4215   1E9F D7            push a
4216   1EA0 11            mov a, b
4217   1EA1 AF 00 00      cmp a, 0
4218   1EA4 0E            lodflgs
4219   1EA5 29 DE 2E      mov b, [__bsign] ; bsign
4220   1EA8 D7            push a
4221   1EA9 11            mov a, b
4222   1EAA 26 01 00      mov b, 1
4223   1EAD B0            cmp a, b
4224   1EAE 0E            lodflgs
4225   1EAF 87 01         and al, %00000001 ; ==
4226   1EB1 22 00         mov ah, 0
4227   1EB3 27            mov b, a
4228   1EB4 E4            pop a
4229   1EB5 DB            push al
4230   1EB6 C0 00 00      cmp b, 0
4231   1EB9 0E            lodflgs
4232   1EBA EA            pop bl
4233   1EBB 8C            or al, bl
4234   1EBC 8F 01         xor al, %00000001
4235   1EBE 2F            mov bl, al
4236   1EBF A7 00         mov bh, 0
4237   1EC1 E4            pop a
4238   1EC2 D7            push a
4239   1EC3 11            mov a, b
4240   1EC4 AF 00 00      cmp a, 0
4241   1EC7 0E            lodflgs
4242   1EC8 29 EC 2E      mov b, [__bgta] ; bgta
4243   1ECB D7            push a
4244   1ECC 11            mov a, b
4245   1ECD 26 01 00      mov b, 1
4246   1ED0 B0            cmp a, b
4247   1ED1 0E            lodflgs
4248   1ED2 87 01         and al, %00000001 ; ==
4249   1ED4 22 00         mov ah, 0
4250   1ED6 27            mov b, a
4251   1ED7 E4            pop a
4252   1ED8 DB            push al
4253   1ED9 C0 00 00      cmp b, 0
4254   1EDC 0E            lodflgs
4255   1EDD EA            pop bl
4256   1EDE 8C            or al, bl
4257   1EDF 8F 01         xor al, %00000001
4258   1EE1 2F            mov bl, al
4259   1EE2 A7 00         mov bh, 0
4260   1EE4 E4            pop a
4261   1EE5 C0 00 00      cmp b, 0
4262   1EE8 C6 0B 1F      je _if73_exit
4263   1EEB             _if73_true:
4264   1EEB 26 00 00      mov b, 0
4265   1EEE FD 42 DC 2E   mov [__asign], b
4266   1EF2 26 00 00      mov b, 0
4267   1EF5 FD 42 DE 2E   mov [__bsign], b
4268   1EF9 26 01 00      mov b, 1
4269   1EFC FD 42 E0 2E   mov [__csign], b
4270   1F00 07 79 14      call swapab
4271   1F03 07 7F 17      call protominus
4272   1F06 F9            leave
4273   1F07 09            ret
4274   1F08 0A 0B 1F      jmp _if73_exit
4275   1F0B             _if73_exit:
4276   1F0B             _if74_cond:
4277   1F0B 29 DC 2E      mov b, [__asign] ; asign
4278   1F0E D7            push a
4279   1F0F 11            mov a, b
4280   1F10 26 01 00      mov b, 1
4281   1F13 B0            cmp a, b
4282   1F14 0E            lodflgs
4283   1F15 87 01         and al, %00000001 ; ==
4284   1F17 22 00         mov ah, 0
4285   1F19 27            mov b, a
4286   1F1A E4            pop a
4287   1F1B D7            push a
4288   1F1C 11            mov a, b
4289   1F1D AF 00 00      cmp a, 0
4290   1F20 0E            lodflgs
4291   1F21 29 DE 2E      mov b, [__bsign] ; bsign
4292   1F24 D7            push a
4293   1F25 11            mov a, b
4294   1F26 26 00 00      mov b, 0
4295   1F29 B0            cmp a, b
4296   1F2A 0E            lodflgs
4297   1F2B 87 01         and al, %00000001 ; ==
4298   1F2D 22 00         mov ah, 0
4299   1F2F 27            mov b, a
4300   1F30 E4            pop a
4301   1F31 DB            push al
4302   1F32 C0 00 00      cmp b, 0
4303   1F35 0E            lodflgs
4304   1F36 EA            pop bl
4305   1F37 8C            or al, bl
4306   1F38 8F 01         xor al, %00000001
4307   1F3A 2F            mov bl, al
4308   1F3B A7 00         mov bh, 0
4309   1F3D E4            pop a
4310   1F3E D7            push a
4311   1F3F 11            mov a, b
4312   1F40 AF 00 00      cmp a, 0
4313   1F43 0E            lodflgs
4314   1F44 29 EA 2E      mov b, [__agtb] ; agtb
4315   1F47 D7            push a
4316   1F48 11            mov a, b
4317   1F49 26 01 00      mov b, 1
4318   1F4C B0            cmp a, b
4319   1F4D 0E            lodflgs
4320   1F4E 87 01         and al, %00000001 ; ==
4321   1F50 22 00         mov ah, 0
4322   1F52 27            mov b, a
4323   1F53 E4            pop a
4324   1F54 DB            push al
4325   1F55 C0 00 00      cmp b, 0
4326   1F58 0E            lodflgs
4327   1F59 EA            pop bl
4328   1F5A 8C            or al, bl
4329   1F5B 8F 01         xor al, %00000001
4330   1F5D 2F            mov bl, al
4331   1F5E A7 00         mov bh, 0
4332   1F60 E4            pop a
4333   1F61 C0 00 00      cmp b, 0
4334   1F64 C6 87 1F      je _if74_exit
4335   1F67             _if74_true:
4336   1F67 26 01 00      mov b, 1
4337   1F6A FD 42 E0 2E   mov [__csign], b
4338   1F6E 07 79 14      call swapab
4339   1F71 26 00 00      mov b, 0
4340   1F74 FD 42 DC 2E   mov [__asign], b
4341   1F78 26 00 00      mov b, 0
4342   1F7B FD 42 DE 2E   mov [__bsign], b
4343   1F7F 07 9F 18      call pminus
4344   1F82 F9            leave
4345   1F83 09            ret
4346   1F84 0A 87 1F      jmp _if74_exit
4347   1F87             _if74_exit:
4348   1F87             _if75_cond:
4349   1F87 29 DC 2E      mov b, [__asign] ; asign
4350   1F8A D7            push a
4351   1F8B 11            mov a, b
4352   1F8C 26 01 00      mov b, 1
4353   1F8F B0            cmp a, b
4354   1F90 0E            lodflgs
4355   1F91 87 01         and al, %00000001 ; ==
4356   1F93 22 00         mov ah, 0
4357   1F95 27            mov b, a
4358   1F96 E4            pop a
4359   1F97 D7            push a
4360   1F98 11            mov a, b
4361   1F99 AF 00 00      cmp a, 0
4362   1F9C 0E            lodflgs
4363   1F9D 29 DE 2E      mov b, [__bsign] ; bsign
4364   1FA0 D7            push a
4365   1FA1 11            mov a, b
4366   1FA2 26 00 00      mov b, 0
4367   1FA5 B0            cmp a, b
4368   1FA6 0E            lodflgs
4369   1FA7 87 01         and al, %00000001 ; ==
4370   1FA9 22 00         mov ah, 0
4371   1FAB 27            mov b, a
4372   1FAC E4            pop a
4373   1FAD DB            push al
4374   1FAE C0 00 00      cmp b, 0
4375   1FB1 0E            lodflgs
4376   1FB2 EA            pop bl
4377   1FB3 8C            or al, bl
4378   1FB4 8F 01         xor al, %00000001
4379   1FB6 2F            mov bl, al
4380   1FB7 A7 00         mov bh, 0
4381   1FB9 E4            pop a
4382   1FBA D7            push a
4383   1FBB 11            mov a, b
4384   1FBC AF 00 00      cmp a, 0
4385   1FBF 0E            lodflgs
4386   1FC0 29 EC 2E      mov b, [__bgta] ; bgta
4387   1FC3 D7            push a
4388   1FC4 11            mov a, b
4389   1FC5 26 01 00      mov b, 1
4390   1FC8 B0            cmp a, b
4391   1FC9 0E            lodflgs
4392   1FCA 87 01         and al, %00000001 ; ==
4393   1FCC 22 00         mov ah, 0
4394   1FCE 27            mov b, a
4395   1FCF E4            pop a
4396   1FD0 DB            push al
4397   1FD1 C0 00 00      cmp b, 0
4398   1FD4 0E            lodflgs
4399   1FD5 EA            pop bl
4400   1FD6 8C            or al, bl
4401   1FD7 8F 01         xor al, %00000001
4402   1FD9 2F            mov bl, al
4403   1FDA A7 00         mov bh, 0
4404   1FDC E4            pop a
4405   1FDD C0 00 00      cmp b, 0
4406   1FE0 C6 03 20      je _if75_exit
4407   1FE3             _if75_true:
4408   1FE3 26 00 00      mov b, 0
4409   1FE6 FD 42 DC 2E   mov [__asign], b
4410   1FEA 26 00 00      mov b, 0
4411   1FED FD 42 DE 2E   mov [__bsign], b
4412   1FF1 26 00 00      mov b, 0
4413   1FF4 FD 42 E0 2E   mov [__csign], b
4414   1FF8 07 79 14      call swapab
4415   1FFB 07 7F 17      call protominus
4416   1FFE F9            leave
4417   1FFF 09            ret
4418   2000 0A 03 20      jmp _if75_exit
4419   2003             _if75_exit:
4420   2003 F9            leave
4421   2004 09            ret
4422   2005             
4423   2005             plus:
4424   2005 D2            push bp
4425   2006 9B            mov bp, sp
4426   2007 07 0B 12      call fixsignin
4427   200A 07 B3 1B      call pplus
4428   200D 07 7B 13      call fixcsizezero
4429   2010 07 2C 13      call fixsignout
4430   2013 F9            leave
4431   2014 09            ret
4432   2015             
4433   2015             normmulres:
4434   2015 D2            push bp
4435   2016 9B            mov bp, sp
4436   2017             _if76_cond:
4437   2017 29 C0 2E      mov b, [__mulres]
4438   201A D7            push a
4439   201B 74            mov d, b
4440   201C DA            push d
4441   201D 26 17 00      mov b, 23
4442   2020 E7            pop d
4443   2021 10 02 00      mov a, 2
4444   2024 AC            mul a, b
4445   2025 5A            add d, b
4446   2026 2A            mov b, [d]
4447   2027 E4            pop a
4448   2028 D7            push a
4449   2029 11            mov a, b
4450   202A 26 63 00      mov b, 99
4451   202D B0            cmp a, b
4452   202E 0E            lodflgs
4453   202F 87 03         and al, %00000011
4454   2031 B9 00         cmp al, 0
4455   2033 0E            lodflgs
4456   2034 22 00         mov ah, 0
4457   2036 27            mov b, a
4458   2037 E4            pop a
4459   2038 C0 00 00      cmp b, 0
4460   203B C6 94 20      je _if76_exit
4461   203E             _if76_true:
4462   203E 29 C0 2E      mov b, [__mulres]
4463   2041 D7            push a
4464   2042 74            mov d, b
4465   2043 DA            push d
4466   2044 26 17 00      mov b, 23
4467   2047 E7            pop d
4468   2048 10 02 00      mov a, 2
4469   204B AC            mul a, b
4470   204C 5A            add d, b
4471   204D 2A            mov b, [d]
4472   204E E4            pop a
4473   204F D7            push a
4474   2050 11            mov a, b
4475   2051 26 64 00      mov b, 100
4476   2054 AE            div a, b
4477   2055 FD 78         mov g, a
4478   2057 11            mov a, b
4479   2058 FD 27         mov b, g
4480   205A E4            pop a
4481   205B FD 42 00 2F   mov [__toolarge], b
4482   205F 29 C0 2E      mov b, [__mulres]
4483   2062 74            mov d, b
4484   2063 DA            push d
4485   2064 26 17 00      mov b, 23
4486   2067 E7            pop d
4487   2068 10 02 00      mov a, 2
4488   206B AC            mul a, b
4489   206C 5A            add d, b
4490   206D DA            push d
4491   206E 29 C0 2E      mov b, [__mulres]
4492   2071 D7            push a
4493   2072 74            mov d, b
4494   2073 DA            push d
4495   2074 26 17 00      mov b, 23
4496   2077 E7            pop d
4497   2078 10 02 00      mov a, 2
4498   207B AC            mul a, b
4499   207C 5A            add d, b
4500   207D 2A            mov b, [d]
4501   207E E4            pop a
4502   207F D7            push a
4503   2080 11            mov a, b
4504   2081 29 00 2F      mov b, [__toolarge] ; toolarge
4505   2084 D7            push a
4506   2085 11            mov a, b
4507   2086 26 64 00      mov b, 100
4508   2089 AC            mul a, b
4509   208A E4            pop a
4510   208B 60            sub a, b
4511   208C 27            mov b, a
4512   208D E4            pop a
4513   208E E7            pop d
4514   208F 11            mov a, b
4515   2090 43            mov [d], a
4516   2091 0A 94 20      jmp _if76_exit
4517   2094             _if76_exit:
4518   2094 26 00 00      mov b, 0
4519   2097 FD 42 02 2F   mov [__normal], b
4520   209B             _while77_cond:
4521   209B 29 02 2F      mov b, [__normal] ; normal
4522   209E D7            push a
4523   209F 11            mov a, b
4524   20A0 26 00 00      mov b, 0
4525   20A3 B0            cmp a, b
4526   20A4 0E            lodflgs
4527   20A5 87 01         and al, %00000001 ; ==
4528   20A7 22 00         mov ah, 0
4529   20A9 27            mov b, a
4530   20AA E4            pop a
4531   20AB C0 00 00      cmp b, 0
4532   20AE C6 B6 21      je _while77_exit
4533   20B1             _while77_block:
4534   20B1 26 01 00      mov b, 1
4535   20B4 FD 42 02 2F   mov [__normal], b
4536   20B8             _for78_init:
4537   20B8 26 00 00      mov b, 0
4538   20BB FD 42 E2 2E   mov [__protopos], b
4539   20BF             _for78_cond:
4540   20BF 29 E2 2E      mov b, [__protopos] ; protopos
4541   20C2 D7            push a
4542   20C3 11            mov a, b
4543   20C4 26 17 00      mov b, 23
4544   20C7 B0            cmp a, b
4545   20C8 0E            lodflgs
4546   20C9 87 02         and al, %00000010 ; <
4547   20CB FD 9C         shr al
4548   20CD 22 00         mov ah, 0
4549   20CF 27            mov b, a
4550   20D0 E4            pop a
4551   20D1 C0 00 00      cmp b, 0
4552   20D4 C6 B3 21      je _for78_exit
4553   20D7             _for78_block:
4554   20D7 26 16 00      mov b, 22
4555   20DA D7            push a
4556   20DB 11            mov a, b
4557   20DC 29 E2 2E      mov b, [__protopos] ; protopos
4558   20DF 60            sub a, b
4559   20E0 27            mov b, a
4560   20E1 E4            pop a
4561   20E2 FD 42 E4 2E   mov [__pos], b
4562   20E6             _if79_cond:
4563   20E6 29 C0 2E      mov b, [__mulres]
4564   20E9 D7            push a
4565   20EA 74            mov d, b
4566   20EB DA            push d
4567   20EC 29 E4 2E      mov b, [__pos] ; pos
4568   20EF E7            pop d
4569   20F0 10 02 00      mov a, 2
4570   20F3 AC            mul a, b
4571   20F4 5A            add d, b
4572   20F5 2A            mov b, [d]
4573   20F6 E4            pop a
4574   20F7 D7            push a
4575   20F8 11            mov a, b
4576   20F9 26 63 00      mov b, 99
4577   20FC B0            cmp a, b
4578   20FD 0E            lodflgs
4579   20FE 87 03         and al, %00000011
4580   2100 B9 00         cmp al, 0
4581   2102 0E            lodflgs
4582   2103 22 00         mov ah, 0
4583   2105 27            mov b, a
4584   2106 E4            pop a
4585   2107 C0 00 00      cmp b, 0
4586   210A C6 A5 21      je _if79_exit
4587   210D             _if79_true:
4588   210D 26 00 00      mov b, 0
4589   2110 FD 42 02 2F   mov [__normal], b
4590   2114 29 C0 2E      mov b, [__mulres]
4591   2117 D7            push a
4592   2118 74            mov d, b
4593   2119 DA            push d
4594   211A 29 E4 2E      mov b, [__pos] ; pos
4595   211D E7            pop d
4596   211E 10 02 00      mov a, 2
4597   2121 AC            mul a, b
4598   2122 5A            add d, b
4599   2123 2A            mov b, [d]
4600   2124 E4            pop a
4601   2125 D7            push a
4602   2126 11            mov a, b
4603   2127 26 64 00      mov b, 100
4604   212A AE            div a, b
4605   212B FD 78         mov g, a
4606   212D 11            mov a, b
4607   212E FD 27         mov b, g
4608   2130 E4            pop a
4609   2131 FD 42 00 2F   mov [__toolarge], b
4610   2135 29 C0 2E      mov b, [__mulres]
4611   2138 74            mov d, b
4612   2139 DA            push d
4613   213A 29 E4 2E      mov b, [__pos] ; pos
4614   213D E7            pop d
4615   213E 10 02 00      mov a, 2
4616   2141 AC            mul a, b
4617   2142 5A            add d, b
4618   2143 DA            push d
4619   2144 29 C0 2E      mov b, [__mulres]
4620   2147 D7            push a
4621   2148 74            mov d, b
4622   2149 DA            push d
4623   214A 29 E4 2E      mov b, [__pos] ; pos
4624   214D E7            pop d
4625   214E 10 02 00      mov a, 2
4626   2151 AC            mul a, b
4627   2152 5A            add d, b
4628   2153 2A            mov b, [d]
4629   2154 E4            pop a
4630   2155 D7            push a
4631   2156 11            mov a, b
4632   2157 29 00 2F      mov b, [__toolarge] ; toolarge
4633   215A D7            push a
4634   215B 11            mov a, b
4635   215C 26 64 00      mov b, 100
4636   215F AC            mul a, b
4637   2160 E4            pop a
4638   2161 60            sub a, b
4639   2162 27            mov b, a
4640   2163 E4            pop a
4641   2164 E7            pop d
4642   2165 11            mov a, b
4643   2166 43            mov [d], a
4644   2167 29 C0 2E      mov b, [__mulres]
4645   216A 74            mov d, b
4646   216B DA            push d
4647   216C 29 E4 2E      mov b, [__pos] ; pos
4648   216F D7            push a
4649   2170 11            mov a, b
4650   2171 26 01 00      mov b, 1
4651   2174 54            add a, b
4652   2175 27            mov b, a
4653   2176 E4            pop a
4654   2177 E7            pop d
4655   2178 10 02 00      mov a, 2
4656   217B AC            mul a, b
4657   217C 5A            add d, b
4658   217D DA            push d
4659   217E 29 C0 2E      mov b, [__mulres]
4660   2181 D7            push a
4661   2182 74            mov d, b
4662   2183 DA            push d
4663   2184 29 E4 2E      mov b, [__pos] ; pos
4664   2187 D7            push a
4665   2188 11            mov a, b
4666   2189 26 01 00      mov b, 1
4667   218C 54            add a, b
4668   218D 27            mov b, a
4669   218E E4            pop a
4670   218F E7            pop d
4671   2190 10 02 00      mov a, 2
4672   2193 AC            mul a, b
4673   2194 5A            add d, b
4674   2195 2A            mov b, [d]
4675   2196 E4            pop a
4676   2197 D7            push a
4677   2198 11            mov a, b
4678   2199 29 00 2F      mov b, [__toolarge] ; toolarge
4679   219C 54            add a, b
4680   219D 27            mov b, a
4681   219E E4            pop a
4682   219F E7            pop d
4683   21A0 11            mov a, b
4684   21A1 43            mov [d], a
4685   21A2 0A A5 21      jmp _if79_exit
4686   21A5             _if79_exit:
4687   21A5             _for78_update:
4688   21A5 29 E2 2E      mov b, [__protopos] ; protopos
4689   21A8 11            mov a, b
4690   21A9 FD 77         inc b
4691   21AB FD 42 E2 2E   mov [__protopos], b
4692   21AF 27            mov b, a
4693   21B0 0A BF 20      jmp _for78_cond
4694   21B3             _for78_exit:
4695   21B3 0A 9B 20      jmp _while77_cond
4696   21B6             _while77_exit:
4697   21B6             _if80_cond:
4698   21B6 29 C0 2E      mov b, [__mulres]
4699   21B9 D7            push a
4700   21BA 74            mov d, b
4701   21BB DA            push d
4702   21BC 26 17 00      mov b, 23
4703   21BF E7            pop d
4704   21C0 10 02 00      mov a, 2
4705   21C3 AC            mul a, b
4706   21C4 5A            add d, b
4707   21C5 2A            mov b, [d]
4708   21C6 E4            pop a
4709   21C7 D7            push a
4710   21C8 11            mov a, b
4711   21C9 26 63 00      mov b, 99
4712   21CC B0            cmp a, b
4713   21CD 0E            lodflgs
4714   21CE 87 03         and al, %00000011
4715   21D0 B9 00         cmp al, 0
4716   21D2 0E            lodflgs
4717   21D3 22 00         mov ah, 0
4718   21D5 27            mov b, a
4719   21D6 E4            pop a
4720   21D7 C0 00 00      cmp b, 0
4721   21DA C6 33 22      je _if80_exit
4722   21DD             _if80_true:
4723   21DD 29 C0 2E      mov b, [__mulres]
4724   21E0 D7            push a
4725   21E1 74            mov d, b
4726   21E2 DA            push d
4727   21E3 26 17 00      mov b, 23
4728   21E6 E7            pop d
4729   21E7 10 02 00      mov a, 2
4730   21EA AC            mul a, b
4731   21EB 5A            add d, b
4732   21EC 2A            mov b, [d]
4733   21ED E4            pop a
4734   21EE D7            push a
4735   21EF 11            mov a, b
4736   21F0 26 64 00      mov b, 100
4737   21F3 AE            div a, b
4738   21F4 FD 78         mov g, a
4739   21F6 11            mov a, b
4740   21F7 FD 27         mov b, g
4741   21F9 E4            pop a
4742   21FA FD 42 00 2F   mov [__toolarge], b
4743   21FE 29 C0 2E      mov b, [__mulres]
4744   2201 74            mov d, b
4745   2202 DA            push d
4746   2203 26 17 00      mov b, 23
4747   2206 E7            pop d
4748   2207 10 02 00      mov a, 2
4749   220A AC            mul a, b
4750   220B 5A            add d, b
4751   220C DA            push d
4752   220D 29 C0 2E      mov b, [__mulres]
4753   2210 D7            push a
4754   2211 74            mov d, b
4755   2212 DA            push d
4756   2213 26 17 00      mov b, 23
4757   2216 E7            pop d
4758   2217 10 02 00      mov a, 2
4759   221A AC            mul a, b
4760   221B 5A            add d, b
4761   221C 2A            mov b, [d]
4762   221D E4            pop a
4763   221E D7            push a
4764   221F 11            mov a, b
4765   2220 29 00 2F      mov b, [__toolarge] ; toolarge
4766   2223 D7            push a
4767   2224 11            mov a, b
4768   2225 26 64 00      mov b, 100
4769   2228 AC            mul a, b
4770   2229 E4            pop a
4771   222A 60            sub a, b
4772   222B 27            mov b, a
4773   222C E4            pop a
4774   222D E7            pop d
4775   222E 11            mov a, b
4776   222F 43            mov [d], a
4777   2230 0A 33 22      jmp _if80_exit
4778   2233             _if80_exit:
4779   2233 F9            leave
4780   2234 09            ret
4781   2235             
4782   2235             prototimes:
4783   2235 D2            push bp
4784   2236 9B            mov bp, sp
4785   2237             _for81_init:
4786   2237 26 00 00      mov b, 0
4787   223A FD 42 14 2F   mov [__divi], b
4788   223E             _for81_cond:
4789   223E 29 14 2F      mov b, [__divi] ; divi
4790   2241 D7            push a
4791   2242 11            mov a, b
4792   2243 26 0C 00      mov b, 12
4793   2246 B0            cmp a, b
4794   2247 0E            lodflgs
4795   2248 87 02         and al, %00000010 ; <
4796   224A FD 9C         shr al
4797   224C 22 00         mov ah, 0
4798   224E 27            mov b, a
4799   224F E4            pop a
4800   2250 C0 00 00      cmp b, 0
4801   2253 C6 79 22      je _for81_exit
4802   2256             _for81_block:
4803   2256 29 8E 2E      mov b, [__cnarr]
4804   2259 74            mov d, b
4805   225A DA            push d
4806   225B 29 14 2F      mov b, [__divi] ; divi
4807   225E E7            pop d
4808   225F 10 02 00      mov a, 2
4809   2262 AC            mul a, b
4810   2263 5A            add d, b
4811   2264 DA            push d
4812   2265 26 00 00      mov b, 0
4813   2268 E7            pop d
4814   2269 11            mov a, b
4815   226A 43            mov [d], a
4816   226B             _for81_update:
4817   226B 29 14 2F      mov b, [__divi] ; divi
4818   226E 11            mov a, b
4819   226F FD 77         inc b
4820   2271 FD 42 14 2F   mov [__divi], b
4821   2275 27            mov b, a
4822   2276 0A 3E 22      jmp _for81_cond
4823   2279             _for81_exit:
4824   2279             _for82_init:
4825   2279 26 00 00      mov b, 0
4826   227C FD 42 14 2F   mov [__divi], b
4827   2280             _for82_cond:
4828   2280 29 14 2F      mov b, [__divi] ; divi
4829   2283 D7            push a
4830   2284 11            mov a, b
4831   2285 26 18 00      mov b, 24
4832   2288 B0            cmp a, b
4833   2289 0E            lodflgs
4834   228A 87 02         and al, %00000010 ; <
4835   228C FD 9C         shr al
4836   228E 22 00         mov ah, 0
4837   2290 27            mov b, a
4838   2291 E4            pop a
4839   2292 C0 00 00      cmp b, 0
4840   2295 C6 BB 22      je _for82_exit
4841   2298             _for82_block:
4842   2298 29 C0 2E      mov b, [__mulres]
4843   229B 74            mov d, b
4844   229C DA            push d
4845   229D 29 14 2F      mov b, [__divi] ; divi
4846   22A0 E7            pop d
4847   22A1 10 02 00      mov a, 2
4848   22A4 AC            mul a, b
4849   22A5 5A            add d, b
4850   22A6 DA            push d
4851   22A7 26 00 00      mov b, 0
4852   22AA E7            pop d
4853   22AB 11            mov a, b
4854   22AC 43            mov [d], a
4855   22AD             _for82_update:
4856   22AD 29 14 2F      mov b, [__divi] ; divi
4857   22B0 11            mov a, b
4858   22B1 FD 77         inc b
4859   22B3 FD 42 14 2F   mov [__divi], b
4860   22B7 27            mov b, a
4861   22B8 0A 80 22      jmp _for82_cond
4862   22BB             _for82_exit:
4863   22BB             _for83_init:
4864   22BB 26 00 00      mov b, 0
4865   22BE FD 42 04 2F   mov [__mulpos1], b
4866   22C2             _for83_cond:
4867   22C2 29 04 2F      mov b, [__mulpos1] ; mulpos1
4868   22C5 D7            push a
4869   22C6 11            mov a, b
4870   22C7 26 0C 00      mov b, 12
4871   22CA B0            cmp a, b
4872   22CB 0E            lodflgs
4873   22CC 87 02         and al, %00000010 ; <
4874   22CE FD 9C         shr al
4875   22D0 22 00         mov ah, 0
4876   22D2 27            mov b, a
4877   22D3 E4            pop a
4878   22D4 C0 00 00      cmp b, 0
4879   22D7 C6 76 23      je _for83_exit
4880   22DA             _for83_block:
4881   22DA             _for84_init:
4882   22DA 26 00 00      mov b, 0
4883   22DD FD 42 06 2F   mov [__mulpos2], b
4884   22E1             _for84_cond:
4885   22E1 29 06 2F      mov b, [__mulpos2] ; mulpos2
4886   22E4 D7            push a
4887   22E5 11            mov a, b
4888   22E6 26 0C 00      mov b, 12
4889   22E9 B0            cmp a, b
4890   22EA 0E            lodflgs
4891   22EB 87 02         and al, %00000010 ; <
4892   22ED FD 9C         shr al
4893   22EF 22 00         mov ah, 0
4894   22F1 27            mov b, a
4895   22F2 E4            pop a
4896   22F3 C0 00 00      cmp b, 0
4897   22F6 C6 65 23      je _for84_exit
4898   22F9             _for84_block:
4899   22F9 29 C0 2E      mov b, [__mulres]
4900   22FC 74            mov d, b
4901   22FD DA            push d
4902   22FE 29 04 2F      mov b, [__mulpos1] ; mulpos1
4903   2301 D7            push a
4904   2302 11            mov a, b
4905   2303 29 06 2F      mov b, [__mulpos2] ; mulpos2
4906   2306 54            add a, b
4907   2307 27            mov b, a
4908   2308 E4            pop a
4909   2309 E7            pop d
4910   230A 10 02 00      mov a, 2
4911   230D AC            mul a, b
4912   230E 5A            add d, b
4913   230F DA            push d
4914   2310 29 C0 2E      mov b, [__mulres]
4915   2313 D7            push a
4916   2314 74            mov d, b
4917   2315 DA            push d
4918   2316 29 04 2F      mov b, [__mulpos1] ; mulpos1
4919   2319 D7            push a
4920   231A 11            mov a, b
4921   231B 29 06 2F      mov b, [__mulpos2] ; mulpos2
4922   231E 54            add a, b
4923   231F 27            mov b, a
4924   2320 E4            pop a
4925   2321 E7            pop d
4926   2322 10 02 00      mov a, 2
4927   2325 AC            mul a, b
4928   2326 5A            add d, b
4929   2327 2A            mov b, [d]
4930   2328 E4            pop a
4931   2329 D7            push a
4932   232A 11            mov a, b
4933   232B 29 40 2E      mov b, [__bnarr]
4934   232E D7            push a
4935   232F 74            mov d, b
4936   2330 DA            push d
4937   2331 29 06 2F      mov b, [__mulpos2] ; mulpos2
4938   2334 E7            pop d
4939   2335 10 02 00      mov a, 2
4940   2338 AC            mul a, b
4941   2339 5A            add d, b
4942   233A 2A            mov b, [d]
4943   233B E4            pop a
4944   233C D7            push a
4945   233D 11            mov a, b
4946   233E 29 26 2E      mov b, [__anarr]
4947   2341 D7            push a
4948   2342 74            mov d, b
4949   2343 DA            push d
4950   2344 29 04 2F      mov b, [__mulpos1] ; mulpos1
4951   2347 E7            pop d
4952   2348 10 02 00      mov a, 2
4953   234B AC            mul a, b
4954   234C 5A            add d, b
4955   234D 2A            mov b, [d]
4956   234E E4            pop a
4957   234F AC            mul a, b
4958   2350 E4            pop a
4959   2351 54            add a, b
4960   2352 27            mov b, a
4961   2353 E4            pop a
4962   2354 E7            pop d
4963   2355 11            mov a, b
4964   2356 43            mov [d], a
4965   2357             _for84_update:
4966   2357 29 06 2F      mov b, [__mulpos2] ; mulpos2
4967   235A 11            mov a, b
4968   235B FD 77         inc b
4969   235D FD 42 06 2F   mov [__mulpos2], b
4970   2361 27            mov b, a
4971   2362 0A E1 22      jmp _for84_cond
4972   2365             _for84_exit:
4973   2365 07 15 20      call normmulres
4974   2368             _for83_update:
4975   2368 29 04 2F      mov b, [__mulpos1] ; mulpos1
4976   236B 11            mov a, b
4977   236C FD 77         inc b
4978   236E FD 42 04 2F   mov [__mulpos1], b
4979   2372 27            mov b, a
4980   2373 0A C2 22      jmp _for83_cond
4981   2376             _for83_exit:
4982   2376 F9            leave
4983   2377 09            ret
4984   2378             
4985   2378             protodividedby:
4986   2378 D2            push bp
4987   2379 9B            mov bp, sp
4988   237A 26 00 00      mov b, 0
4989   237D FD 42 0A 2F   mov [__brshift], b
4990   2381 26 00 00      mov b, 0
4991   2384 FD 42 0C 2F   mov [__blshift], b
4992   2388 26 00 00      mov b, 0
4993   238B FD 42 0E 2F   mov [__alshift], b
4994   238F 26 00 00      mov b, 0
4995   2392 FD 42 10 2F   mov [__divcounter], b
4996   2396 26 00 00      mov b, 0
4997   2399 FD 42 12 2F   mov [__segmentcounter], b
4998   239D 26 01 00      mov b, 1
4999   23A0 FD 42 16 2F   mov [__allzeroes], b
5000   23A4             _for85_init:
5001   23A4 26 00 00      mov b, 0
5002   23A7 FD 42 14 2F   mov [__divi], b
5003   23AB             _for85_cond:
5004   23AB 29 14 2F      mov b, [__divi] ; divi
5005   23AE D7            push a
5006   23AF 11            mov a, b
5007   23B0 26 0C 00      mov b, 12
5008   23B3 B0            cmp a, b
5009   23B4 0E            lodflgs
5010   23B5 87 02         and al, %00000010 ; <
5011   23B7 FD 9C         shr al
5012   23B9 22 00         mov ah, 0
5013   23BB 27            mov b, a
5014   23BC E4            pop a
5015   23BD C0 00 00      cmp b, 0
5016   23C0 C6 2B 24      je _for85_exit
5017   23C3             _for85_block:
5018   23C3 29 8E 2E      mov b, [__cnarr]
5019   23C6 74            mov d, b
5020   23C7 DA            push d
5021   23C8 29 14 2F      mov b, [__divi] ; divi
5022   23CB E7            pop d
5023   23CC 10 02 00      mov a, 2
5024   23CF AC            mul a, b
5025   23D0 5A            add d, b
5026   23D1 DA            push d
5027   23D2 26 00 00      mov b, 0
5028   23D5 E7            pop d
5029   23D6 11            mov a, b
5030   23D7 43            mov [d], a
5031   23D8 29 DA 2E      mov b, [__divres]
5032   23DB 74            mov d, b
5033   23DC DA            push d
5034   23DD 29 14 2F      mov b, [__divi] ; divi
5035   23E0 E7            pop d
5036   23E1 10 02 00      mov a, 2
5037   23E4 AC            mul a, b
5038   23E5 5A            add d, b
5039   23E6 DA            push d
5040   23E7 26 00 00      mov b, 0
5041   23EA E7            pop d
5042   23EB 11            mov a, b
5043   23EC 43            mov [d], a
5044   23ED             _if86_cond:
5045   23ED 29 40 2E      mov b, [__bnarr]
5046   23F0 D7            push a
5047   23F1 74            mov d, b
5048   23F2 DA            push d
5049   23F3 29 14 2F      mov b, [__divi] ; divi
5050   23F6 E7            pop d
5051   23F7 10 02 00      mov a, 2
5052   23FA AC            mul a, b
5053   23FB 5A            add d, b
5054   23FC 2A            mov b, [d]
5055   23FD E4            pop a
5056   23FE D7            push a
5057   23FF 11            mov a, b
5058   2400 26 00 00      mov b, 0
5059   2403 B0            cmp a, b
5060   2404 0E            lodflgs
5061   2405 87 01         and al, %00000001
5062   2407 8F 01         xor al, %00000001 ; !=
5063   2409 22 00         mov ah, 0
5064   240B 27            mov b, a
5065   240C E4            pop a
5066   240D C0 00 00      cmp b, 0
5067   2410 C6 1D 24      je _if86_exit
5068   2413             _if86_true:
5069   2413 26 00 00      mov b, 0
5070   2416 FD 42 16 2F   mov [__allzeroes], b
5071   241A 0A 1D 24      jmp _if86_exit
5072   241D             _if86_exit:
5073   241D             _for85_update:
5074   241D 29 14 2F      mov b, [__divi] ; divi
5075   2420 11            mov a, b
5076   2421 FD 77         inc b
5077   2423 FD 42 14 2F   mov [__divi], b
5078   2427 27            mov b, a
5079   2428 0A AB 23      jmp _for85_cond
5080   242B             _for85_exit:
5081   242B             _if87_cond:
5082   242B 29 16 2F      mov b, [__allzeroes] ; allzeroes
5083   242E D7            push a
5084   242F 11            mov a, b
5085   2430 26 01 00      mov b, 1
5086   2433 B0            cmp a, b
5087   2434 0E            lodflgs
5088   2435 87 01         and al, %00000001 ; ==
5089   2437 22 00         mov ah, 0
5090   2439 27            mov b, a
5091   243A E4            pop a
5092   243B C0 00 00      cmp b, 0
5093   243E C6 46 24      je _if87_exit
5094   2441             _if87_true:
5095   2441 F9            leave
5096   2442 09            ret
5097   2443 0A 46 24      jmp _if87_exit
5098   2446             _if87_exit:
5099   2446             _if88_cond:
5100   2446 29 40 2E      mov b, [__bnarr]
5101   2449 D7            push a
5102   244A 74            mov d, b
5103   244B DA            push d
5104   244C 26 0B 00      mov b, 11
5105   244F E7            pop d
5106   2450 10 02 00      mov a, 2
5107   2453 AC            mul a, b
5108   2454 5A            add d, b
5109   2455 2A            mov b, [d]
5110   2456 E4            pop a
5111   2457 D7            push a
5112   2458 11            mov a, b
5113   2459 26 00 00      mov b, 0
5114   245C B0            cmp a, b
5115   245D 0E            lodflgs
5116   245E 87 01         and al, %00000001
5117   2460 8F 01         xor al, %00000001 ; !=
5118   2462 22 00         mov ah, 0
5119   2464 27            mov b, a
5120   2465 E4            pop a
5121   2466 C0 00 00      cmp b, 0
5122   2469 C6 E3 24      je _if88_exit
5123   246C             _if88_true:
5124   246C             _for89_init:
5125   246C 26 00 00      mov b, 0
5126   246F FD 42 14 2F   mov [__divi], b
5127   2473             _for89_cond:
5128   2473 29 14 2F      mov b, [__divi] ; divi
5129   2476 D7            push a
5130   2477 11            mov a, b
5131   2478 26 0B 00      mov b, 11
5132   247B B0            cmp a, b
5133   247C 0E            lodflgs
5134   247D 87 02         and al, %00000010 ; <
5135   247F FD 9C         shr al
5136   2481 22 00         mov ah, 0
5137   2483 27            mov b, a
5138   2484 E4            pop a
5139   2485 C0 00 00      cmp b, 0
5140   2488 C6 C4 24      je _for89_exit
5141   248B             _for89_block:
5142   248B 29 40 2E      mov b, [__bnarr]
5143   248E 74            mov d, b
5144   248F DA            push d
5145   2490 29 14 2F      mov b, [__divi] ; divi
5146   2493 E7            pop d
5147   2494 10 02 00      mov a, 2
5148   2497 AC            mul a, b
5149   2498 5A            add d, b
5150   2499 DA            push d
5151   249A 29 40 2E      mov b, [__bnarr]
5152   249D D7            push a
5153   249E 74            mov d, b
5154   249F DA            push d
5155   24A0 29 14 2F      mov b, [__divi] ; divi
5156   24A3 D7            push a
5157   24A4 11            mov a, b
5158   24A5 26 01 00      mov b, 1
5159   24A8 54            add a, b
5160   24A9 27            mov b, a
5161   24AA E4            pop a
5162   24AB E7            pop d
5163   24AC 10 02 00      mov a, 2
5164   24AF AC            mul a, b
5165   24B0 5A            add d, b
5166   24B1 2A            mov b, [d]
5167   24B2 E4            pop a
5168   24B3 E7            pop d
5169   24B4 11            mov a, b
5170   24B5 43            mov [d], a
5171   24B6             _for89_update:
5172   24B6 29 14 2F      mov b, [__divi] ; divi
5173   24B9 11            mov a, b
5174   24BA FD 77         inc b
5175   24BC FD 42 14 2F   mov [__divi], b
5176   24C0 27            mov b, a
5177   24C1 0A 73 24      jmp _for89_cond
5178   24C4             _for89_exit:
5179   24C4 26 01 00      mov b, 1
5180   24C7 FD 42 0A 2F   mov [__brshift], b
5181   24CB 29 40 2E      mov b, [__bnarr]
5182   24CE 74            mov d, b
5183   24CF DA            push d
5184   24D0 26 0B 00      mov b, 11
5185   24D3 E7            pop d
5186   24D4 10 02 00      mov a, 2
5187   24D7 AC            mul a, b
5188   24D8 5A            add d, b
5189   24D9 DA            push d
5190   24DA 26 00 00      mov b, 0
5191   24DD E7            pop d
5192   24DE 11            mov a, b
5193   24DF 43            mov [d], a
5194   24E0 0A E3 24      jmp _if88_exit
5195   24E3             _if88_exit:
5196   24E3             _while90_cond:
5197   24E3 29 40 2E      mov b, [__bnarr]
5198   24E6 D7            push a
5199   24E7 74            mov d, b
5200   24E8 DA            push d
5201   24E9 26 0A 00      mov b, 10
5202   24EC E7            pop d
5203   24ED 10 02 00      mov a, 2
5204   24F0 AC            mul a, b
5205   24F1 5A            add d, b
5206   24F2 2A            mov b, [d]
5207   24F3 E4            pop a
5208   24F4 D7            push a
5209   24F5 11            mov a, b
5210   24F6 26 00 00      mov b, 0
5211   24F9 B0            cmp a, b
5212   24FA 0E            lodflgs
5213   24FB 87 01         and al, %00000001 ; ==
5214   24FD 22 00         mov ah, 0
5215   24FF 27            mov b, a
5216   2500 E4            pop a
5217   2501 C0 00 00      cmp b, 0
5218   2504 C6 92 25      je _while90_exit
5219   2507             _while90_block:
5220   2507             _for91_init:
5221   2507 26 00 00      mov b, 0
5222   250A FD 42 14 2F   mov [__divi], b
5223   250E             _for91_cond:
5224   250E 29 14 2F      mov b, [__divi] ; divi
5225   2511 D7            push a
5226   2512 11            mov a, b
5227   2513 26 0A 00      mov b, 10
5228   2516 B0            cmp a, b
5229   2517 0E            lodflgs
5230   2518 87 02         and al, %00000010 ; <
5231   251A FD 9C         shr al
5232   251C 22 00         mov ah, 0
5233   251E 27            mov b, a
5234   251F E4            pop a
5235   2520 C0 00 00      cmp b, 0
5236   2523 C6 6F 25      je _for91_exit
5237   2526             _for91_block:
5238   2526 29 40 2E      mov b, [__bnarr]
5239   2529 74            mov d, b
5240   252A DA            push d
5241   252B 26 0A 00      mov b, 10
5242   252E D7            push a
5243   252F 11            mov a, b
5244   2530 29 14 2F      mov b, [__divi] ; divi
5245   2533 60            sub a, b
5246   2534 27            mov b, a
5247   2535 E4            pop a
5248   2536 E7            pop d
5249   2537 10 02 00      mov a, 2
5250   253A AC            mul a, b
5251   253B 5A            add d, b
5252   253C DA            push d
5253   253D 29 40 2E      mov b, [__bnarr]
5254   2540 D7            push a
5255   2541 74            mov d, b
5256   2542 DA            push d
5257   2543 26 0A 00      mov b, 10
5258   2546 D7            push a
5259   2547 11            mov a, b
5260   2548 29 14 2F      mov b, [__divi] ; divi
5261   254B 60            sub a, b
5262   254C 27            mov b, a
5263   254D E4            pop a
5264   254E D7            push a
5265   254F 11            mov a, b
5266   2550 26 01 00      mov b, 1
5267   2553 60            sub a, b
5268   2554 27            mov b, a
5269   2555 E4            pop a
5270   2556 E7            pop d
5271   2557 10 02 00      mov a, 2
5272   255A AC            mul a, b
5273   255B 5A            add d, b
5274   255C 2A            mov b, [d]
5275   255D E4            pop a
5276   255E E7            pop d
5277   255F 11            mov a, b
5278   2560 43            mov [d], a
5279   2561             _for91_update:
5280   2561 29 14 2F      mov b, [__divi] ; divi
5281   2564 11            mov a, b
5282   2565 FD 77         inc b
5283   2567 FD 42 14 2F   mov [__divi], b
5284   256B 27            mov b, a
5285   256C 0A 0E 25      jmp _for91_cond
5286   256F             _for91_exit:
5287   256F 29 40 2E      mov b, [__bnarr]
5288   2572 74            mov d, b
5289   2573 DA            push d
5290   2574 26 00 00      mov b, 0
5291   2577 E7            pop d
5292   2578 10 02 00      mov a, 2
5293   257B AC            mul a, b
5294   257C 5A            add d, b
5295   257D DA            push d
5296   257E 26 00 00      mov b, 0
5297   2581 E7            pop d
5298   2582 11            mov a, b
5299   2583 43            mov [d], a
5300   2584 29 0C 2F      mov b, [__blshift] ; blshift
5301   2587 11            mov a, b
5302   2588 FD 77         inc b
5303   258A FD 42 0C 2F   mov [__blshift], b
5304   258E 27            mov b, a
5305   258F 0A E3 24      jmp _while90_cond
5306   2592             _while90_exit:
5307   2592 26 01 00      mov b, 1
5308   2595 FD 42 16 2F   mov [__allzeroes], b
5309   2599             _for92_init:
5310   2599 26 00 00      mov b, 0
5311   259C FD 42 14 2F   mov [__divi], b
5312   25A0             _for92_cond:
5313   25A0 29 14 2F      mov b, [__divi] ; divi
5314   25A3 D7            push a
5315   25A4 11            mov a, b
5316   25A5 26 0C 00      mov b, 12
5317   25A8 B0            cmp a, b
5318   25A9 0E            lodflgs
5319   25AA 87 02         and al, %00000010 ; <
5320   25AC FD 9C         shr al
5321   25AE 22 00         mov ah, 0
5322   25B0 27            mov b, a
5323   25B1 E4            pop a
5324   25B2 C0 00 00      cmp b, 0
5325   25B5 C6 F6 25      je _for92_exit
5326   25B8             _for92_block:
5327   25B8             _if93_cond:
5328   25B8 29 26 2E      mov b, [__anarr]
5329   25BB D7            push a
5330   25BC 74            mov d, b
5331   25BD DA            push d
5332   25BE 29 14 2F      mov b, [__divi] ; divi
5333   25C1 E7            pop d
5334   25C2 10 02 00      mov a, 2
5335   25C5 AC            mul a, b
5336   25C6 5A            add d, b
5337   25C7 2A            mov b, [d]
5338   25C8 E4            pop a
5339   25C9 D7            push a
5340   25CA 11            mov a, b
5341   25CB 26 00 00      mov b, 0
5342   25CE B0            cmp a, b
5343   25CF 0E            lodflgs
5344   25D0 87 01         and al, %00000001
5345   25D2 8F 01         xor al, %00000001 ; !=
5346   25D4 22 00         mov ah, 0
5347   25D6 27            mov b, a
5348   25D7 E4            pop a
5349   25D8 C0 00 00      cmp b, 0
5350   25DB C6 E8 25      je _if93_exit
5351   25DE             _if93_true:
5352   25DE 26 00 00      mov b, 0
5353   25E1 FD 42 16 2F   mov [__allzeroes], b
5354   25E5 0A E8 25      jmp _if93_exit
5355   25E8             _if93_exit:
5356   25E8             _for92_update:
5357   25E8 29 14 2F      mov b, [__divi] ; divi
5358   25EB 11            mov a, b
5359   25EC FD 77         inc b
5360   25EE FD 42 14 2F   mov [__divi], b
5361   25F2 27            mov b, a
5362   25F3 0A A0 25      jmp _for92_cond
5363   25F6             _for92_exit:
5364   25F6             _if94_cond:
5365   25F6 29 16 2F      mov b, [__allzeroes] ; allzeroes
5366   25F9 D7            push a
5367   25FA 11            mov a, b
5368   25FB 26 01 00      mov b, 1
5369   25FE B0            cmp a, b
5370   25FF 0E            lodflgs
5371   2600 87 01         and al, %00000001 ; ==
5372   2602 22 00         mov ah, 0
5373   2604 27            mov b, a
5374   2605 E4            pop a
5375   2606 C0 00 00      cmp b, 0
5376   2609 C6 11 26      je _if94_exit
5377   260C             _if94_true:
5378   260C F9            leave
5379   260D 09            ret
5380   260E 0A 11 26      jmp _if94_exit
5381   2611             _if94_exit:
5382   2611             _while95_cond:
5383   2611 29 26 2E      mov b, [__anarr]
5384   2614 D7            push a
5385   2615 74            mov d, b
5386   2616 DA            push d
5387   2617 26 0B 00      mov b, 11
5388   261A E7            pop d
5389   261B 10 02 00      mov a, 2
5390   261E AC            mul a, b
5391   261F 5A            add d, b
5392   2620 2A            mov b, [d]
5393   2621 E4            pop a
5394   2622 D7            push a
5395   2623 11            mov a, b
5396   2624 26 00 00      mov b, 0
5397   2627 B0            cmp a, b
5398   2628 0E            lodflgs
5399   2629 87 01         and al, %00000001 ; ==
5400   262B 22 00         mov ah, 0
5401   262D 27            mov b, a
5402   262E E4            pop a
5403   262F C0 00 00      cmp b, 0
5404   2632 C6 C0 26      je _while95_exit
5405   2635             _while95_block:
5406   2635             _for96_init:
5407   2635 26 00 00      mov b, 0
5408   2638 FD 42 14 2F   mov [__divi], b
5409   263C             _for96_cond:
5410   263C 29 14 2F      mov b, [__divi] ; divi
5411   263F D7            push a
5412   2640 11            mov a, b
5413   2641 26 0C 00      mov b, 12
5414   2644 B0            cmp a, b
5415   2645 0E            lodflgs
5416   2646 87 02         and al, %00000010 ; <
5417   2648 FD 9C         shr al
5418   264A 22 00         mov ah, 0
5419   264C 27            mov b, a
5420   264D E4            pop a
5421   264E C0 00 00      cmp b, 0
5422   2651 C6 9D 26      je _for96_exit
5423   2654             _for96_block:
5424   2654 29 26 2E      mov b, [__anarr]
5425   2657 74            mov d, b
5426   2658 DA            push d
5427   2659 26 0B 00      mov b, 11
5428   265C D7            push a
5429   265D 11            mov a, b
5430   265E 29 14 2F      mov b, [__divi] ; divi
5431   2661 60            sub a, b
5432   2662 27            mov b, a
5433   2663 E4            pop a
5434   2664 E7            pop d
5435   2665 10 02 00      mov a, 2
5436   2668 AC            mul a, b
5437   2669 5A            add d, b
5438   266A DA            push d
5439   266B 29 26 2E      mov b, [__anarr]
5440   266E D7            push a
5441   266F 74            mov d, b
5442   2670 DA            push d
5443   2671 26 0B 00      mov b, 11
5444   2674 D7            push a
5445   2675 11            mov a, b
5446   2676 29 14 2F      mov b, [__divi] ; divi
5447   2679 60            sub a, b
5448   267A 27            mov b, a
5449   267B E4            pop a
5450   267C D7            push a
5451   267D 11            mov a, b
5452   267E 26 01 00      mov b, 1
5453   2681 60            sub a, b
5454   2682 27            mov b, a
5455   2683 E4            pop a
5456   2684 E7            pop d
5457   2685 10 02 00      mov a, 2
5458   2688 AC            mul a, b
5459   2689 5A            add d, b
5460   268A 2A            mov b, [d]
5461   268B E4            pop a
5462   268C E7            pop d
5463   268D 11            mov a, b
5464   268E 43            mov [d], a
5465   268F             _for96_update:
5466   268F 29 14 2F      mov b, [__divi] ; divi
5467   2692 11            mov a, b
5468   2693 FD 77         inc b
5469   2695 FD 42 14 2F   mov [__divi], b
5470   2699 27            mov b, a
5471   269A 0A 3C 26      jmp _for96_cond
5472   269D             _for96_exit:
5473   269D 29 26 2E      mov b, [__anarr]
5474   26A0 74            mov d, b
5475   26A1 DA            push d
5476   26A2 26 00 00      mov b, 0
5477   26A5 E7            pop d
5478   26A6 10 02 00      mov a, 2
5479   26A9 AC            mul a, b
5480   26AA 5A            add d, b
5481   26AB DA            push d
5482   26AC 26 00 00      mov b, 0
5483   26AF E7            pop d
5484   26B0 11            mov a, b
5485   26B1 43            mov [d], a
5486   26B2 29 0E 2F      mov b, [__alshift] ; alshift
5487   26B5 11            mov a, b
5488   26B6 FD 77         inc b
5489   26B8 FD 42 0E 2F   mov [__alshift], b
5490   26BC 27            mov b, a
5491   26BD 0A 11 26      jmp _while95_cond
5492   26C0             _while95_exit:
5493   26C0 26 00 00      mov b, 0
5494   26C3 FD 42 12 2F   mov [__segmentcounter], b
5495   26C7 26 00 00      mov b, 0
5496   26CA FD 42 10 2F   mov [__divcounter], b
5497   26CE             _while97_cond:
5498   26CE 29 12 2F      mov b, [__segmentcounter] ; segmentcounter
5499   26D1 D7            push a
5500   26D2 11            mov a, b
5501   26D3 26 0C 00      mov b, 12
5502   26D6 B0            cmp a, b
5503   26D7 0E            lodflgs
5504   26D8 87 02         and al, %00000010 ; <
5505   26DA FD 9C         shr al
5506   26DC 22 00         mov ah, 0
5507   26DE 27            mov b, a
5508   26DF E4            pop a
5509   26E0 C0 00 00      cmp b, 0
5510   26E3 C6 56 29      je _while97_exit
5511   26E6             _while97_block:
5512   26E6             _while98_cond:
5513   26E6 29 26 2E      mov b, [__anarr]
5514   26E9 D7            push a
5515   26EA 74            mov d, b
5516   26EB DA            push d
5517   26EC 26 0B 00      mov b, 11
5518   26EF E7            pop d
5519   26F0 10 02 00      mov a, 2
5520   26F3 AC            mul a, b
5521   26F4 5A            add d, b
5522   26F5 2A            mov b, [d]
5523   26F6 E4            pop a
5524   26F7 D7            push a
5525   26F8 11            mov a, b
5526   26F9 26 00 00      mov b, 0
5527   26FC B0            cmp a, b
5528   26FD 0E            lodflgs
5529   26FE 87 01         and al, %00000001
5530   2700 8F 01         xor al, %00000001 ; !=
5531   2702 22 00         mov ah, 0
5532   2704 27            mov b, a
5533   2705 E4            pop a
5534   2706 C0 00 00      cmp b, 0
5535   2709 C6 82 27      je _while98_exit
5536   270C             _while98_block:
5537   270C 07 9F 18      call pminus
5538   270F 29 10 2F      mov b, [__divcounter] ; divcounter
5539   2712 11            mov a, b
5540   2713 FD 77         inc b
5541   2715 FD 42 10 2F   mov [__divcounter], b
5542   2719 27            mov b, a
5543   271A             _for99_init:
5544   271A 26 00 00      mov b, 0
5545   271D FD 42 14 2F   mov [__divi], b
5546   2721             _for99_cond:
5547   2721 29 14 2F      mov b, [__divi] ; divi
5548   2724 D7            push a
5549   2725 11            mov a, b
5550   2726 26 0C 00      mov b, 12
5551   2729 B0            cmp a, b
5552   272A 0E            lodflgs
5553   272B 87 02         and al, %00000010 ; <
5554   272D FD 9C         shr al
5555   272F 22 00         mov ah, 0
5556   2731 27            mov b, a
5557   2732 E4            pop a
5558   2733 C0 00 00      cmp b, 0
5559   2736 C6 7F 27      je _for99_exit
5560   2739             _for99_block:
5561   2739 29 26 2E      mov b, [__anarr]
5562   273C 74            mov d, b
5563   273D DA            push d
5564   273E 29 14 2F      mov b, [__divi] ; divi
5565   2741 E7            pop d
5566   2742 10 02 00      mov a, 2
5567   2745 AC            mul a, b
5568   2746 5A            add d, b
5569   2747 DA            push d
5570   2748 29 8E 2E      mov b, [__cnarr]
5571   274B D7            push a
5572   274C 74            mov d, b
5573   274D DA            push d
5574   274E 29 14 2F      mov b, [__divi] ; divi
5575   2751 E7            pop d
5576   2752 10 02 00      mov a, 2
5577   2755 AC            mul a, b
5578   2756 5A            add d, b
5579   2757 2A            mov b, [d]
5580   2758 E4            pop a
5581   2759 E7            pop d
5582   275A 11            mov a, b
5583   275B 43            mov [d], a
5584   275C 29 8E 2E      mov b, [__cnarr]
5585   275F 74            mov d, b
5586   2760 DA            push d
5587   2761 29 14 2F      mov b, [__divi] ; divi
5588   2764 E7            pop d
5589   2765 10 02 00      mov a, 2
5590   2768 AC            mul a, b
5591   2769 5A            add d, b
5592   276A DA            push d
5593   276B 26 00 00      mov b, 0
5594   276E E7            pop d
5595   276F 11            mov a, b
5596   2770 43            mov [d], a
5597   2771             _for99_update:
5598   2771 29 14 2F      mov b, [__divi] ; divi
5599   2774 11            mov a, b
5600   2775 FD 77         inc b
5601   2777 FD 42 14 2F   mov [__divi], b
5602   277B 27            mov b, a
5603   277C 0A 21 27      jmp _for99_cond
5604   277F             _for99_exit:
5605   277F 0A E6 26      jmp _while98_cond
5606   2782             _while98_exit:
5607   2782 29 DA 2E      mov b, [__divres]
5608   2785 74            mov d, b
5609   2786 DA            push d
5610   2787 26 0B 00      mov b, 11
5611   278A D7            push a
5612   278B 11            mov a, b
5613   278C 29 12 2F      mov b, [__segmentcounter] ; segmentcounter
5614   278F 60            sub a, b
5615   2790 27            mov b, a
5616   2791 E4            pop a
5617   2792 E7            pop d
5618   2793 10 02 00      mov a, 2
5619   2796 AC            mul a, b
5620   2797 5A            add d, b
5621   2798 DA            push d
5622   2799 29 10 2F      mov b, [__divcounter] ; divcounter
5623   279C E7            pop d
5624   279D 11            mov a, b
5625   279E 43            mov [d], a
5626   279F 26 00 00      mov b, 0
5627   27A2 FD 42 10 2F   mov [__divcounter], b
5628   27A6 29 12 2F      mov b, [__segmentcounter] ; segmentcounter
5629   27A9 11            mov a, b
5630   27AA FD 77         inc b
5631   27AC FD 42 12 2F   mov [__segmentcounter], b
5632   27B0 27            mov b, a
5633   27B1 26 01 00      mov b, 1
5634   27B4 FD 42 16 2F   mov [__allzeroes], b
5635   27B8             _for100_init:
5636   27B8 26 00 00      mov b, 0
5637   27BB FD 42 14 2F   mov [__divi], b
5638   27BF             _for100_cond:
5639   27BF 29 14 2F      mov b, [__divi] ; divi
5640   27C2 D7            push a
5641   27C3 11            mov a, b
5642   27C4 26 0C 00      mov b, 12
5643   27C7 B0            cmp a, b
5644   27C8 0E            lodflgs
5645   27C9 87 02         and al, %00000010 ; <
5646   27CB FD 9C         shr al
5647   27CD 22 00         mov ah, 0
5648   27CF 27            mov b, a
5649   27D0 E4            pop a
5650   27D1 C0 00 00      cmp b, 0
5651   27D4 C6 15 28      je _for100_exit
5652   27D7             _for100_block:
5653   27D7             _if101_cond:
5654   27D7 29 26 2E      mov b, [__anarr]
5655   27DA D7            push a
5656   27DB 74            mov d, b
5657   27DC DA            push d
5658   27DD 29 14 2F      mov b, [__divi] ; divi
5659   27E0 E7            pop d
5660   27E1 10 02 00      mov a, 2
5661   27E4 AC            mul a, b
5662   27E5 5A            add d, b
5663   27E6 2A            mov b, [d]
5664   27E7 E4            pop a
5665   27E8 D7            push a
5666   27E9 11            mov a, b
5667   27EA 26 00 00      mov b, 0
5668   27ED B0            cmp a, b
5669   27EE 0E            lodflgs
5670   27EF 87 01         and al, %00000001
5671   27F1 8F 01         xor al, %00000001 ; !=
5672   27F3 22 00         mov ah, 0
5673   27F5 27            mov b, a
5674   27F6 E4            pop a
5675   27F7 C0 00 00      cmp b, 0
5676   27FA C6 07 28      je _if101_exit
5677   27FD             _if101_true:
5678   27FD 26 00 00      mov b, 0
5679   2800 FD 42 16 2F   mov [__allzeroes], b
5680   2804 0A 07 28      jmp _if101_exit
5681   2807             _if101_exit:
5682   2807             _for100_update:
5683   2807 29 14 2F      mov b, [__divi] ; divi
5684   280A 11            mov a, b
5685   280B FD 77         inc b
5686   280D FD 42 14 2F   mov [__divi], b
5687   2811 27            mov b, a
5688   2812 0A BF 27      jmp _for100_cond
5689   2815             _for100_exit:
5690   2815             _if102_cond:
5691   2815 29 16 2F      mov b, [__allzeroes] ; allzeroes
5692   2818 D7            push a
5693   2819 11            mov a, b
5694   281A 26 01 00      mov b, 1
5695   281D B0            cmp a, b
5696   281E 0E            lodflgs
5697   281F 87 01         and al, %00000001 ; ==
5698   2821 22 00         mov ah, 0
5699   2823 27            mov b, a
5700   2824 E4            pop a
5701   2825 C0 00 00      cmp b, 0
5702   2828 C6 30 28      je _if102_exit
5703   282B             _if102_true:
5704   282B F9            leave
5705   282C 09            ret
5706   282D 0A 30 28      jmp _if102_exit
5707   2830             _if102_exit:
5708   2830             _while103_cond:
5709   2830 29 26 2E      mov b, [__anarr]
5710   2833 D7            push a
5711   2834 74            mov d, b
5712   2835 DA            push d
5713   2836 26 0B 00      mov b, 11
5714   2839 E7            pop d
5715   283A 10 02 00      mov a, 2
5716   283D AC            mul a, b
5717   283E 5A            add d, b
5718   283F 2A            mov b, [d]
5719   2840 E4            pop a
5720   2841 D7            push a
5721   2842 11            mov a, b
5722   2843 26 00 00      mov b, 0
5723   2846 B0            cmp a, b
5724   2847 0E            lodflgs
5725   2848 87 01         and al, %00000001 ; ==
5726   284A 22 00         mov ah, 0
5727   284C 27            mov b, a
5728   284D E4            pop a
5729   284E C0 00 00      cmp b, 0
5730   2851 C6 53 29      je _while103_exit
5731   2854             _while103_block:
5732   2854             _for104_init:
5733   2854 26 00 00      mov b, 0
5734   2857 FD 42 14 2F   mov [__divi], b
5735   285B             _for104_cond:
5736   285B 29 14 2F      mov b, [__divi] ; divi
5737   285E D7            push a
5738   285F 11            mov a, b
5739   2860 26 0C 00      mov b, 12
5740   2863 B0            cmp a, b
5741   2864 0E            lodflgs
5742   2865 87 02         and al, %00000010 ; <
5743   2867 FD 9C         shr al
5744   2869 22 00         mov ah, 0
5745   286B 27            mov b, a
5746   286C E4            pop a
5747   286D C0 00 00      cmp b, 0
5748   2870 C6 BC 28      je _for104_exit
5749   2873             _for104_block:
5750   2873 29 26 2E      mov b, [__anarr]
5751   2876 74            mov d, b
5752   2877 DA            push d
5753   2878 26 0B 00      mov b, 11
5754   287B D7            push a
5755   287C 11            mov a, b
5756   287D 29 14 2F      mov b, [__divi] ; divi
5757   2880 60            sub a, b
5758   2881 27            mov b, a
5759   2882 E4            pop a
5760   2883 E7            pop d
5761   2884 10 02 00      mov a, 2
5762   2887 AC            mul a, b
5763   2888 5A            add d, b
5764   2889 DA            push d
5765   288A 29 26 2E      mov b, [__anarr]
5766   288D D7            push a
5767   288E 74            mov d, b
5768   288F DA            push d
5769   2890 26 0B 00      mov b, 11
5770   2893 D7            push a
5771   2894 11            mov a, b
5772   2895 29 14 2F      mov b, [__divi] ; divi
5773   2898 60            sub a, b
5774   2899 27            mov b, a
5775   289A E4            pop a
5776   289B D7            push a
5777   289C 11            mov a, b
5778   289D 26 01 00      mov b, 1
5779   28A0 60            sub a, b
5780   28A1 27            mov b, a
5781   28A2 E4            pop a
5782   28A3 E7            pop d
5783   28A4 10 02 00      mov a, 2
5784   28A7 AC            mul a, b
5785   28A8 5A            add d, b
5786   28A9 2A            mov b, [d]
5787   28AA E4            pop a
5788   28AB E7            pop d
5789   28AC 11            mov a, b
5790   28AD 43            mov [d], a
5791   28AE             _for104_update:
5792   28AE 29 14 2F      mov b, [__divi] ; divi
5793   28B1 11            mov a, b
5794   28B2 FD 77         inc b
5795   28B4 FD 42 14 2F   mov [__divi], b
5796   28B8 27            mov b, a
5797   28B9 0A 5B 28      jmp _for104_cond
5798   28BC             _for104_exit:
5799   28BC 29 26 2E      mov b, [__anarr]
5800   28BF 74            mov d, b
5801   28C0 DA            push d
5802   28C1 26 00 00      mov b, 0
5803   28C4 E7            pop d
5804   28C5 10 02 00      mov a, 2
5805   28C8 AC            mul a, b
5806   28C9 5A            add d, b
5807   28CA DA            push d
5808   28CB 26 00 00      mov b, 0
5809   28CE E7            pop d
5810   28CF 11            mov a, b
5811   28D0 43            mov [d], a
5812   28D1             _if105_cond:
5813   28D1 29 26 2E      mov b, [__anarr]
5814   28D4 D7            push a
5815   28D5 74            mov d, b
5816   28D6 DA            push d
5817   28D7 26 0B 00      mov b, 11
5818   28DA E7            pop d
5819   28DB 10 02 00      mov a, 2
5820   28DE AC            mul a, b
5821   28DF 5A            add d, b
5822   28E0 2A            mov b, [d]
5823   28E1 E4            pop a
5824   28E2 D7            push a
5825   28E3 11            mov a, b
5826   28E4 26 00 00      mov b, 0
5827   28E7 B0            cmp a, b
5828   28E8 0E            lodflgs
5829   28E9 87 01         and al, %00000001 ; ==
5830   28EB 22 00         mov ah, 0
5831   28ED 27            mov b, a
5832   28EE E4            pop a
5833   28EF C0 00 00      cmp b, 0
5834   28F2 C6 50 29      je _if105_exit
5835   28F5             _if105_true:
5836   28F5 29 DA 2E      mov b, [__divres]
5837   28F8 74            mov d, b
5838   28F9 DA            push d
5839   28FA 26 0B 00      mov b, 11
5840   28FD D7            push a
5841   28FE 11            mov a, b
5842   28FF 29 12 2F      mov b, [__segmentcounter] ; segmentcounter
5843   2902 60            sub a, b
5844   2903 27            mov b, a
5845   2904 E4            pop a
5846   2905 E7            pop d
5847   2906 10 02 00      mov a, 2
5848   2909 AC            mul a, b
5849   290A 5A            add d, b
5850   290B DA            push d
5851   290C 26 00 00      mov b, 0
5852   290F E7            pop d
5853   2910 11            mov a, b
5854   2911 43            mov [d], a
5855   2912 29 26 2E      mov b, [__anarr]
5856   2915 74            mov d, b
5857   2916 DA            push d
5858   2917 26 00 00      mov b, 0
5859   291A E7            pop d
5860   291B 10 02 00      mov a, 2
5861   291E AC            mul a, b
5862   291F 5A            add d, b
5863   2920 DA            push d
5864   2921 26 00 00      mov b, 0
5865   2924 E7            pop d
5866   2925 11            mov a, b
5867   2926 43            mov [d], a
5868   2927 29 12 2F      mov b, [__segmentcounter] ; segmentcounter
5869   292A 11            mov a, b
5870   292B FD 77         inc b
5871   292D FD 42 12 2F   mov [__segmentcounter], b
5872   2931 27            mov b, a
5873   2932             _if106_cond:
5874   2932 29 12 2F      mov b, [__segmentcounter] ; segmentcounter
5875   2935 D7            push a
5876   2936 11            mov a, b
5877   2937 26 0C 00      mov b, 12
5878   293A B0            cmp a, b
5879   293B 0E            lodflgs
5880   293C 87 01         and al, %00000001 ; ==
5881   293E 22 00         mov ah, 0
5882   2940 27            mov b, a
5883   2941 E4            pop a
5884   2942 C0 00 00      cmp b, 0
5885   2945 C6 4D 29      je _if106_exit
5886   2948             _if106_true:
5887   2948 F9            leave
5888   2949 09            ret
5889   294A 0A 4D 29      jmp _if106_exit
5890   294D             _if106_exit:
5891   294D 0A 50 29      jmp _if105_exit
5892   2950             _if105_exit:
5893   2950 0A 30 28      jmp _while103_cond
5894   2953             _while103_exit:
5895   2953 0A CE 26      jmp _while97_cond
5896   2956             _while97_exit:
5897   2956 F9            leave
5898   2957 09            ret
5899   2958             
5900   2958             normdivres:
5901   2958 D2            push bp
5902   2959 9B            mov bp, sp
5903   295A             _for107_init:
5904   295A 26 0C 00      mov b, 12
5905   295D FD 42 14 2F   mov [__divi], b
5906   2961             _for107_cond:
5907   2961 29 14 2F      mov b, [__divi] ; divi
5908   2964 D7            push a
5909   2965 11            mov a, b
5910   2966 26 18 00      mov b, 24
5911   2969 B0            cmp a, b
5912   296A 0E            lodflgs
5913   296B 87 02         and al, %00000010 ; <
5914   296D FD 9C         shr al
5915   296F 22 00         mov ah, 0
5916   2971 27            mov b, a
5917   2972 E4            pop a
5918   2973 C0 00 00      cmp b, 0
5919   2976 C6 9C 29      je _for107_exit
5920   2979             _for107_block:
5921   2979 29 C0 2E      mov b, [__mulres]
5922   297C 74            mov d, b
5923   297D DA            push d
5924   297E 29 14 2F      mov b, [__divi] ; divi
5925   2981 E7            pop d
5926   2982 10 02 00      mov a, 2
5927   2985 AC            mul a, b
5928   2986 5A            add d, b
5929   2987 DA            push d
5930   2988 26 00 00      mov b, 0
5931   298B E7            pop d
5932   298C 11            mov a, b
5933   298D 43            mov [d], a
5934   298E             _for107_update:
5935   298E 29 14 2F      mov b, [__divi] ; divi
5936   2991 11            mov a, b
5937   2992 FD 77         inc b
5938   2994 FD 42 14 2F   mov [__divi], b
5939   2998 27            mov b, a
5940   2999 0A 61 29      jmp _for107_cond
5941   299C             _for107_exit:
5942   299C             _for108_init:
5943   299C 26 00 00      mov b, 0
5944   299F FD 42 14 2F   mov [__divi], b
5945   29A3             _for108_cond:
5946   29A3 29 14 2F      mov b, [__divi] ; divi
5947   29A6 D7            push a
5948   29A7 11            mov a, b
5949   29A8 26 0C 00      mov b, 12
5950   29AB B0            cmp a, b
5951   29AC 0E            lodflgs
5952   29AD 87 02         and al, %00000010 ; <
5953   29AF FD 9C         shr al
5954   29B1 22 00         mov ah, 0
5955   29B3 27            mov b, a
5956   29B4 E4            pop a
5957   29B5 C0 00 00      cmp b, 0
5958   29B8 C6 EC 29      je _for108_exit
5959   29BB             _for108_block:
5960   29BB 29 C0 2E      mov b, [__mulres]
5961   29BE 74            mov d, b
5962   29BF DA            push d
5963   29C0 29 14 2F      mov b, [__divi] ; divi
5964   29C3 E7            pop d
5965   29C4 10 02 00      mov a, 2
5966   29C7 AC            mul a, b
5967   29C8 5A            add d, b
5968   29C9 DA            push d
5969   29CA 29 DA 2E      mov b, [__divres]
5970   29CD D7            push a
5971   29CE 74            mov d, b
5972   29CF DA            push d
5973   29D0 29 14 2F      mov b, [__divi] ; divi
5974   29D3 E7            pop d
5975   29D4 10 02 00      mov a, 2
5976   29D7 AC            mul a, b
5977   29D8 5A            add d, b
5978   29D9 2A            mov b, [d]
5979   29DA E4            pop a
5980   29DB E7            pop d
5981   29DC 11            mov a, b
5982   29DD 43            mov [d], a
5983   29DE             _for108_update:
5984   29DE 29 14 2F      mov b, [__divi] ; divi
5985   29E1 11            mov a, b
5986   29E2 FD 77         inc b
5987   29E4 FD 42 14 2F   mov [__divi], b
5988   29E8 27            mov b, a
5989   29E9 0A A3 29      jmp _for108_cond
5990   29EC             _for108_exit:
5991   29EC 07 15 20      call normmulres
5992   29EF             _for109_init:
5993   29EF 26 00 00      mov b, 0
5994   29F2 FD 42 1A 2F   mov [__divshift], b
5995   29F6             _for109_cond:
5996   29F6 29 1A 2F      mov b, [__divshift] ; divshift
5997   29F9 D7            push a
5998   29FA 11            mov a, b
5999   29FB 26 0B 00      mov b, 11
6000   29FE B0            cmp a, b
6001   29FF 0E            lodflgs
6002   2A00 87 02         and al, %00000010 ; <
6003   2A02 FD 9C         shr al
6004   2A04 22 00         mov ah, 0
6005   2A06 27            mov b, a
6006   2A07 E4            pop a
6007   2A08 C0 00 00      cmp b, 0
6008   2A0B C6 99 2A      je _for109_exit
6009   2A0E             _for109_block:
6010   2A0E             _for110_init:
6011   2A0E 26 00 00      mov b, 0
6012   2A11 FD 42 14 2F   mov [__divi], b
6013   2A15             _for110_cond:
6014   2A15 29 14 2F      mov b, [__divi] ; divi
6015   2A18 D7            push a
6016   2A19 11            mov a, b
6017   2A1A 26 18 00      mov b, 24
6018   2A1D B0            cmp a, b
6019   2A1E 0E            lodflgs
6020   2A1F 87 02         and al, %00000010 ; <
6021   2A21 FD 9C         shr al
6022   2A23 22 00         mov ah, 0
6023   2A25 27            mov b, a
6024   2A26 E4            pop a
6025   2A27 C0 00 00      cmp b, 0
6026   2A2A C6 76 2A      je _for110_exit
6027   2A2D             _for110_block:
6028   2A2D 29 C0 2E      mov b, [__mulres]
6029   2A30 74            mov d, b
6030   2A31 DA            push d
6031   2A32 26 17 00      mov b, 23
6032   2A35 D7            push a
6033   2A36 11            mov a, b
6034   2A37 29 14 2F      mov b, [__divi] ; divi
6035   2A3A 60            sub a, b
6036   2A3B 27            mov b, a
6037   2A3C E4            pop a
6038   2A3D E7            pop d
6039   2A3E 10 02 00      mov a, 2
6040   2A41 AC            mul a, b
6041   2A42 5A            add d, b
6042   2A43 DA            push d
6043   2A44 29 C0 2E      mov b, [__mulres]
6044   2A47 D7            push a
6045   2A48 74            mov d, b
6046   2A49 DA            push d
6047   2A4A 26 17 00      mov b, 23
6048   2A4D D7            push a
6049   2A4E 11            mov a, b
6050   2A4F 29 14 2F      mov b, [__divi] ; divi
6051   2A52 60            sub a, b
6052   2A53 27            mov b, a
6053   2A54 E4            pop a
6054   2A55 D7            push a
6055   2A56 11            mov a, b
6056   2A57 26 01 00      mov b, 1
6057   2A5A 60            sub a, b
6058   2A5B 27            mov b, a
6059   2A5C E4            pop a
6060   2A5D E7            pop d
6061   2A5E 10 02 00      mov a, 2
6062   2A61 AC            mul a, b
6063   2A62 5A            add d, b
6064   2A63 2A            mov b, [d]
6065   2A64 E4            pop a
6066   2A65 E7            pop d
6067   2A66 11            mov a, b
6068   2A67 43            mov [d], a
6069   2A68             _for110_update:
6070   2A68 29 14 2F      mov b, [__divi] ; divi
6071   2A6B 11            mov a, b
6072   2A6C FD 77         inc b
6073   2A6E FD 42 14 2F   mov [__divi], b
6074   2A72 27            mov b, a
6075   2A73 0A 15 2A      jmp _for110_cond
6076   2A76             _for110_exit:
6077   2A76 29 C0 2E      mov b, [__mulres]
6078   2A79 74            mov d, b
6079   2A7A DA            push d
6080   2A7B 26 00 00      mov b, 0
6081   2A7E E7            pop d
6082   2A7F 10 02 00      mov a, 2
6083   2A82 AC            mul a, b
6084   2A83 5A            add d, b
6085   2A84 DA            push d
6086   2A85 26 00 00      mov b, 0
6087   2A88 E7            pop d
6088   2A89 11            mov a, b
6089   2A8A 43            mov [d], a
6090   2A8B             _for109_update:
6091   2A8B 29 1A 2F      mov b, [__divshift] ; divshift
6092   2A8E 11            mov a, b
6093   2A8F FD 77         inc b
6094   2A91 FD 42 1A 2F   mov [__divshift], b
6095   2A95 27            mov b, a
6096   2A96 0A F6 29      jmp _for109_cond
6097   2A99             _for109_exit:
6098   2A99             _for111_init:
6099   2A99 26 00 00      mov b, 0
6100   2A9C FD 42 14 2F   mov [__divi], b
6101   2AA0             _for111_cond:
6102   2AA0 29 14 2F      mov b, [__divi] ; divi
6103   2AA3 D7            push a
6104   2AA4 11            mov a, b
6105   2AA5 26 0C 00      mov b, 12
6106   2AA8 B0            cmp a, b
6107   2AA9 0E            lodflgs
6108   2AAA 87 02         and al, %00000010 ; <
6109   2AAC FD 9C         shr al
6110   2AAE 22 00         mov ah, 0
6111   2AB0 27            mov b, a
6112   2AB1 E4            pop a
6113   2AB2 C0 00 00      cmp b, 0
6114   2AB5 C6 F1 2A      je _for111_exit
6115   2AB8             _for111_block:
6116   2AB8 29 DA 2E      mov b, [__divres]
6117   2ABB 74            mov d, b
6118   2ABC DA            push d
6119   2ABD 29 14 2F      mov b, [__divi] ; divi
6120   2AC0 E7            pop d
6121   2AC1 10 02 00      mov a, 2
6122   2AC4 AC            mul a, b
6123   2AC5 5A            add d, b
6124   2AC6 DA            push d
6125   2AC7 29 C0 2E      mov b, [__mulres]
6126   2ACA D7            push a
6127   2ACB 74            mov d, b
6128   2ACC DA            push d
6129   2ACD 29 14 2F      mov b, [__divi] ; divi
6130   2AD0 D7            push a
6131   2AD1 11            mov a, b
6132   2AD2 26 0C 00      mov b, 12
6133   2AD5 54            add a, b
6134   2AD6 27            mov b, a
6135   2AD7 E4            pop a
6136   2AD8 E7            pop d
6137   2AD9 10 02 00      mov a, 2
6138   2ADC AC            mul a, b
6139   2ADD 5A            add d, b
6140   2ADE 2A            mov b, [d]
6141   2ADF E4            pop a
6142   2AE0 E7            pop d
6143   2AE1 11            mov a, b
6144   2AE2 43            mov [d], a
6145   2AE3             _for111_update:
6146   2AE3 29 14 2F      mov b, [__divi] ; divi
6147   2AE6 11            mov a, b
6148   2AE7 FD 77         inc b
6149   2AE9 FD 42 14 2F   mov [__divi], b
6150   2AED 27            mov b, a
6151   2AEE 0A A0 2A      jmp _for111_cond
6152   2AF1             _for111_exit:
6153   2AF1 F9            leave
6154   2AF2 09            ret
6155   2AF3             
6156   2AF3             times:
6157   2AF3 D2            push bp
6158   2AF4 9B            mov bp, sp
6159   2AF5 07 0B 12      call fixsignin
6160   2AF8 26 00 00      mov b, 0
6161   2AFB FD 42 E0 2E   mov [__csign], b
6162   2AFF             _if112_cond:
6163   2AFF 29 DC 2E      mov b, [__asign] ; asign
6164   2B02 D7            push a
6165   2B03 11            mov a, b
6166   2B04 29 DE 2E      mov b, [__bsign] ; bsign
6167   2B07 B0            cmp a, b
6168   2B08 0E            lodflgs
6169   2B09 87 01         and al, %00000001
6170   2B0B 8F 01         xor al, %00000001 ; !=
6171   2B0D 22 00         mov ah, 0
6172   2B0F 27            mov b, a
6173   2B10 E4            pop a
6174   2B11 C0 00 00      cmp b, 0
6175   2B14 C6 21 2B      je _if112_exit
6176   2B17             _if112_true:
6177   2B17 26 01 00      mov b, 1
6178   2B1A FD 42 E0 2E   mov [__csign], b
6179   2B1E 0A 21 2B      jmp _if112_exit
6180   2B21             _if112_exit:
6181   2B21 26 00 00      mov b, 0
6182   2B24 FD 42 DC 2E   mov [__asign], b
6183   2B28 26 00 00      mov b, 0
6184   2B2B FD 42 DE 2E   mov [__bsign], b
6185   2B2F 07 35 22      call prototimes
6186   2B32 26 01 00      mov b, 1
6187   2B35 FD 42 16 2F   mov [__allzeroes], b
6188   2B39             _for113_init:
6189   2B39 26 0F 00      mov b, 15
6190   2B3C FD 42 E4 2E   mov [__pos], b
6191   2B40             _for113_cond:
6192   2B40 29 E4 2E      mov b, [__pos] ; pos
6193   2B43 D7            push a
6194   2B44 11            mov a, b
6195   2B45 26 18 00      mov b, 24
6196   2B48 B0            cmp a, b
6197   2B49 0E            lodflgs
6198   2B4A 87 02         and al, %00000010 ; <
6199   2B4C FD 9C         shr al
6200   2B4E 22 00         mov ah, 0
6201   2B50 27            mov b, a
6202   2B51 E4            pop a
6203   2B52 C0 00 00      cmp b, 0
6204   2B55 C6 96 2B      je _for113_exit
6205   2B58             _for113_block:
6206   2B58             _if114_cond:
6207   2B58 29 C0 2E      mov b, [__mulres]
6208   2B5B D7            push a
6209   2B5C 74            mov d, b
6210   2B5D DA            push d
6211   2B5E 29 E4 2E      mov b, [__pos] ; pos
6212   2B61 E7            pop d
6213   2B62 10 02 00      mov a, 2
6214   2B65 AC            mul a, b
6215   2B66 5A            add d, b
6216   2B67 2A            mov b, [d]
6217   2B68 E4            pop a
6218   2B69 D7            push a
6219   2B6A 11            mov a, b
6220   2B6B 26 00 00      mov b, 0
6221   2B6E B0            cmp a, b
6222   2B6F 0E            lodflgs
6223   2B70 87 01         and al, %00000001
6224   2B72 8F 01         xor al, %00000001 ; !=
6225   2B74 22 00         mov ah, 0
6226   2B76 27            mov b, a
6227   2B77 E4            pop a
6228   2B78 C0 00 00      cmp b, 0
6229   2B7B C6 88 2B      je _if114_exit
6230   2B7E             _if114_true:
6231   2B7E 26 00 00      mov b, 0
6232   2B81 FD 42 16 2F   mov [__allzeroes], b
6233   2B85 0A 88 2B      jmp _if114_exit
6234   2B88             _if114_exit:
6235   2B88             _for113_update:
6236   2B88 29 E4 2E      mov b, [__pos] ; pos
6237   2B8B 11            mov a, b
6238   2B8C FD 77         inc b
6239   2B8E FD 42 E4 2E   mov [__pos], b
6240   2B92 27            mov b, a
6241   2B93 0A 40 2B      jmp _for113_cond
6242   2B96             _for113_exit:
6243   2B96             _if115_cond:
6244   2B96 29 16 2F      mov b, [__allzeroes] ; allzeroes
6245   2B99 D7            push a
6246   2B9A 11            mov a, b
6247   2B9B 26 01 00      mov b, 1
6248   2B9E B0            cmp a, b
6249   2B9F 0E            lodflgs
6250   2BA0 87 01         and al, %00000001 ; ==
6251   2BA2 22 00         mov ah, 0
6252   2BA4 27            mov b, a
6253   2BA5 E4            pop a
6254   2BA6 C0 00 00      cmp b, 0
6255   2BA9 C6 07 2C      je _if115_exit
6256   2BAC             _if115_true:
6257   2BAC             _for116_init:
6258   2BAC 26 04 00      mov b, 4
6259   2BAF FD 42 E4 2E   mov [__pos], b
6260   2BB3             _for116_cond:
6261   2BB3 29 E4 2E      mov b, [__pos] ; pos
6262   2BB6 D7            push a
6263   2BB7 11            mov a, b
6264   2BB8 26 0F 00      mov b, 15
6265   2BBB B0            cmp a, b
6266   2BBC 0E            lodflgs
6267   2BBD 87 02         and al, %00000010 ; <
6268   2BBF FD 9C         shr al
6269   2BC1 22 00         mov ah, 0
6270   2BC3 27            mov b, a
6271   2BC4 E4            pop a
6272   2BC5 C0 00 00      cmp b, 0
6273   2BC8 C6 04 2C      je _for116_exit
6274   2BCB             _for116_block:
6275   2BCB 29 8E 2E      mov b, [__cnarr]
6276   2BCE 74            mov d, b
6277   2BCF DA            push d
6278   2BD0 29 E4 2E      mov b, [__pos] ; pos
6279   2BD3 D7            push a
6280   2BD4 11            mov a, b
6281   2BD5 26 04 00      mov b, 4
6282   2BD8 60            sub a, b
6283   2BD9 27            mov b, a
6284   2BDA E4            pop a
6285   2BDB E7            pop d
6286   2BDC 10 02 00      mov a, 2
6287   2BDF AC            mul a, b
6288   2BE0 5A            add d, b
6289   2BE1 DA            push d
6290   2BE2 29 C0 2E      mov b, [__mulres]
6291   2BE5 D7            push a
6292   2BE6 74            mov d, b
6293   2BE7 DA            push d
6294   2BE8 29 E4 2E      mov b, [__pos] ; pos
6295   2BEB E7            pop d
6296   2BEC 10 02 00      mov a, 2
6297   2BEF AC            mul a, b
6298   2BF0 5A            add d, b
6299   2BF1 2A            mov b, [d]
6300   2BF2 E4            pop a
6301   2BF3 E7            pop d
6302   2BF4 11            mov a, b
6303   2BF5 43            mov [d], a
6304   2BF6             _for116_update:
6305   2BF6 29 E4 2E      mov b, [__pos] ; pos
6306   2BF9 11            mov a, b
6307   2BFA FD 77         inc b
6308   2BFC FD 42 E4 2E   mov [__pos], b
6309   2C00 27            mov b, a
6310   2C01 0A B3 2B      jmp _for116_cond
6311   2C04             _for116_exit:
6312   2C04 0A 07 2C      jmp _if115_exit
6313   2C07             _if115_exit:
6314   2C07             _if117_cond:
6315   2C07 29 8E 2E      mov b, [__cnarr]
6316   2C0A D7            push a
6317   2C0B 74            mov d, b
6318   2C0C DA            push d
6319   2C0D 26 0B 00      mov b, 11
6320   2C10 E7            pop d
6321   2C11 10 02 00      mov a, 2
6322   2C14 AC            mul a, b
6323   2C15 5A            add d, b
6324   2C16 2A            mov b, [d]
6325   2C17 E4            pop a
6326   2C18 D7            push a
6327   2C19 11            mov a, b
6328   2C1A 26 09 00      mov b, 9
6329   2C1D B0            cmp a, b
6330   2C1E 0E            lodflgs
6331   2C1F 87 03         and al, %00000011
6332   2C21 B9 00         cmp al, 0
6333   2C23 0E            lodflgs
6334   2C24 22 00         mov ah, 0
6335   2C26 27            mov b, a
6336   2C27 E4            pop a
6337   2C28 C0 00 00      cmp b, 0
6338   2C2B C6 73 2C      je _if117_exit
6339   2C2E             _if117_true:
6340   2C2E             _for118_init:
6341   2C2E 26 00 00      mov b, 0
6342   2C31 FD 42 E4 2E   mov [__pos], b
6343   2C35             _for118_cond:
6344   2C35 29 E4 2E      mov b, [__pos] ; pos
6345   2C38 D7            push a
6346   2C39 11            mov a, b
6347   2C3A 26 0A 00      mov b, 10
6348   2C3D B0            cmp a, b
6349   2C3E 0E            lodflgs
6350   2C3F 87 02         and al, %00000010 ; <
6351   2C41 FD 9C         shr al
6352   2C43 22 00         mov ah, 0
6353   2C45 27            mov b, a
6354   2C46 E4            pop a
6355   2C47 C0 00 00      cmp b, 0
6356   2C4A C6 70 2C      je _for118_exit
6357   2C4D             _for118_block:
6358   2C4D 29 8E 2E      mov b, [__cnarr]
6359   2C50 74            mov d, b
6360   2C51 DA            push d
6361   2C52 29 E4 2E      mov b, [__pos] ; pos
6362   2C55 E7            pop d
6363   2C56 10 02 00      mov a, 2
6364   2C59 AC            mul a, b
6365   2C5A 5A            add d, b
6366   2C5B DA            push d
6367   2C5C 26 00 00      mov b, 0
6368   2C5F E7            pop d
6369   2C60 11            mov a, b
6370   2C61 43            mov [d], a
6371   2C62             _for118_update:
6372   2C62 29 E4 2E      mov b, [__pos] ; pos
6373   2C65 11            mov a, b
6374   2C66 FD 77         inc b
6375   2C68 FD 42 E4 2E   mov [__pos], b
6376   2C6C 27            mov b, a
6377   2C6D 0A 35 2C      jmp _for118_cond
6378   2C70             _for118_exit:
6379   2C70 0A 73 2C      jmp _if117_exit
6380   2C73             _if117_exit:
6381   2C73 07 7B 13      call fixcsizezero
6382   2C76 07 2C 13      call fixsignout
6383   2C79 F9            leave
6384   2C7A 09            ret
6385   2C7B             
6386   2C7B             dividedby:
6387   2C7B D2            push bp
6388   2C7C 9B            mov bp, sp
6389   2C7D 07 0B 12      call fixsignin
6390   2C80 26 00 00      mov b, 0
6391   2C83 FD 42 E0 2E   mov [__csign], b
6392   2C87             _if119_cond:
6393   2C87 29 DC 2E      mov b, [__asign] ; asign
6394   2C8A D7            push a
6395   2C8B 11            mov a, b
6396   2C8C 29 DE 2E      mov b, [__bsign] ; bsign
6397   2C8F B0            cmp a, b
6398   2C90 0E            lodflgs
6399   2C91 87 01         and al, %00000001
6400   2C93 8F 01         xor al, %00000001 ; !=
6401   2C95 22 00         mov ah, 0
6402   2C97 27            mov b, a
6403   2C98 E4            pop a
6404   2C99 C0 00 00      cmp b, 0
6405   2C9C C6 A9 2C      je _if119_exit
6406   2C9F             _if119_true:
6407   2C9F 26 01 00      mov b, 1
6408   2CA2 FD 42 E0 2E   mov [__csign], b
6409   2CA6 0A A9 2C      jmp _if119_exit
6410   2CA9             _if119_exit:
6411   2CA9 26 00 00      mov b, 0
6412   2CAC FD 42 DC 2E   mov [__asign], b
6413   2CB0 26 00 00      mov b, 0
6414   2CB3 FD 42 DE 2E   mov [__bsign], b
6415   2CB7 29 E0 2E      mov b, [__csign] ; csign
6416   2CBA FD 42 18 2F   mov [__bkpcsign], b
6417   2CBE 07 78 23      call protodividedby
6418   2CC1 07 58 29      call normdivres
6419   2CC4             _if120_cond:
6420   2CC4 29 0C 2F      mov b, [__blshift] ; blshift
6421   2CC7 D7            push a
6422   2CC8 11            mov a, b
6423   2CC9 26 06 00      mov b, 6
6424   2CCC 54            add a, b
6425   2CCD 27            mov b, a
6426   2CCE E4            pop a
6427   2CCF D7            push a
6428   2CD0 11            mov a, b
6429   2CD1 29 0E 2F      mov b, [__alshift] ; alshift
6430   2CD4 D7            push a
6431   2CD5 11            mov a, b
6432   2CD6 29 0A 2F      mov b, [__brshift] ; brshift
6433   2CD9 54            add a, b
6434   2CDA 27            mov b, a
6435   2CDB E4            pop a
6436   2CDC B0            cmp a, b
6437   2CDD 0E            lodflgs
6438   2CDE 87 03         and al, %00000011
6439   2CE0 B9 00         cmp al, 0
6440   2CE2 0E            lodflgs
6441   2CE3 22 00         mov ah, 0
6442   2CE5 27            mov b, a
6443   2CE6 E4            pop a
6444   2CE7 C0 00 00      cmp b, 0
6445   2CEA C6 99 2D      je _if120_exit
6446   2CED             _if120_true:
6447   2CED 29 0C 2F      mov b, [__blshift] ; blshift
6448   2CF0 D7            push a
6449   2CF1 11            mov a, b
6450   2CF2 26 06 00      mov b, 6
6451   2CF5 54            add a, b
6452   2CF6 27            mov b, a
6453   2CF7 E4            pop a
6454   2CF8 D7            push a
6455   2CF9 11            mov a, b
6456   2CFA 29 0E 2F      mov b, [__alshift] ; alshift
6457   2CFD 60            sub a, b
6458   2CFE 27            mov b, a
6459   2CFF E4            pop a
6460   2D00 D7            push a
6461   2D01 11            mov a, b
6462   2D02 29 0A 2F      mov b, [__brshift] ; brshift
6463   2D05 60            sub a, b
6464   2D06 27            mov b, a
6465   2D07 E4            pop a
6466   2D08 FD 42 0C 2F   mov [__blshift], b
6467   2D0C 26 0C 00      mov b, 12
6468   2D0F D7            push a
6469   2D10 11            mov a, b
6470   2D11 29 0C 2F      mov b, [__blshift] ; blshift
6471   2D14 60            sub a, b
6472   2D15 27            mov b, a
6473   2D16 E4            pop a
6474   2D17 FD 42 14 2F   mov [__divi], b
6475   2D1B             _for121_init:
6476   2D1B 26 00 00      mov b, 0
6477   2D1E FD 42 E4 2E   mov [__pos], b
6478   2D22             _for121_cond:
6479   2D22 29 E4 2E      mov b, [__pos] ; pos
6480   2D25 D7            push a
6481   2D26 11            mov a, b
6482   2D27 29 0C 2F      mov b, [__blshift] ; blshift
6483   2D2A B0            cmp a, b
6484   2D2B 0E            lodflgs
6485   2D2C 87 02         and al, %00000010 ; <
6486   2D2E FD 9C         shr al
6487   2D30 22 00         mov ah, 0
6488   2D32 27            mov b, a
6489   2D33 E4            pop a
6490   2D34 C0 00 00      cmp b, 0
6491   2D37 C6 96 2D      je _for121_exit
6492   2D3A             _for121_block:
6493   2D3A             _if122_cond:
6494   2D3A 29 E4 2E      mov b, [__pos] ; pos
6495   2D3D D7            push a
6496   2D3E 11            mov a, b
6497   2D3F 29 14 2F      mov b, [__divi] ; divi
6498   2D42 54            add a, b
6499   2D43 27            mov b, a
6500   2D44 E4            pop a
6501   2D45 D7            push a
6502   2D46 11            mov a, b
6503   2D47 26 0C 00      mov b, 12
6504   2D4A B0            cmp a, b
6505   2D4B 0E            lodflgs
6506   2D4C 87 02         and al, %00000010 ; <
6507   2D4E FD 9C         shr al
6508   2D50 22 00         mov ah, 0
6509   2D52 27            mov b, a
6510   2D53 E4            pop a
6511   2D54 C0 00 00      cmp b, 0
6512   2D57 C6 88 2D      je _if122_exit
6513   2D5A             _if122_true:
6514   2D5A 29 8E 2E      mov b, [__cnarr]
6515   2D5D 74            mov d, b
6516   2D5E DA            push d
6517   2D5F 29 E4 2E      mov b, [__pos] ; pos
6518   2D62 E7            pop d
6519   2D63 10 02 00      mov a, 2
6520   2D66 AC            mul a, b
6521   2D67 5A            add d, b
6522   2D68 DA            push d
6523   2D69 29 DA 2E      mov b, [__divres]
6524   2D6C D7            push a
6525   2D6D 74            mov d, b
6526   2D6E DA            push d
6527   2D6F 29 E4 2E      mov b, [__pos] ; pos
6528   2D72 D7            push a
6529   2D73 11            mov a, b
6530   2D74 29 14 2F      mov b, [__divi] ; divi
6531   2D77 54            add a, b
6532   2D78 27            mov b, a
6533   2D79 E4            pop a
6534   2D7A E7            pop d
6535   2D7B 10 02 00      mov a, 2
6536   2D7E AC            mul a, b
6537   2D7F 5A            add d, b
6538   2D80 2A            mov b, [d]
6539   2D81 E4            pop a
6540   2D82 E7            pop d
6541   2D83 11            mov a, b
6542   2D84 43            mov [d], a
6543   2D85 0A 88 2D      jmp _if122_exit
6544   2D88             _if122_exit:
6545   2D88             _for121_update:
6546   2D88 29 E4 2E      mov b, [__pos] ; pos
6547   2D8B 11            mov a, b
6548   2D8C FD 77         inc b
6549   2D8E FD 42 E4 2E   mov [__pos], b
6550   2D92 27            mov b, a
6551   2D93 0A 22 2D      jmp _for121_cond
6552   2D96             _for121_exit:
6553   2D96 0A 99 2D      jmp _if120_exit
6554   2D99             _if120_exit:
6555   2D99 29 18 2F      mov b, [__bkpcsign] ; bkpcsign
6556   2D9C FD 42 E0 2E   mov [__csign], b
6557   2DA0 07 7B 13      call fixcsizezero
6558   2DA3 07 2C 13      call fixsignout
6559   2DA6 F9            leave
6560   2DA7 09            ret
6561   2DA8             ; --- END TEXT BLOCK
6562   2DA8             
6563   2DA8             ; --- BEGIN DATA BLOCK
6564   2DA8 0A 00       __ss_data: .db "\n", 0
6565   2DAA A8 2D       __ss: .dw __ss_data
6566   2DAC 20 00       __sp_data: .db " ", 0
6567   2DAE AC 2D       __sp: .dw __sp_data
6568   2DB0 00 00 00 00 __ionum_data: .fill 12, 0
6568   2DB4 00 00 00 00 
6568   2DB8 00 00 00 00 
6569   2DBC B0 2D       __ionum: .dw __ionum_data
6570   2DBE 00 00       __ionr: .dw 0
6571   2DC0 00 00       __ioshift: .dw 0
6572   2DC2 00 00 00 00 __datum_data: .fill 72, 0
6572   2DC6 00 00 00 00 
6572   2DCA 00 00 00 00 
6572   2DCE 00 00 00 00 
6572   2DD2 00 00 00 00 
6572   2DD6 00 00 00 00 
6572   2DDA 00 00 00 00 
6572   2DDE 00 00 00 00 
6572   2DE2 00 00 00 00 
6572   2DE6 00 00 00 00 
6572   2DEA 00 00 00 00 
6572   2DEE 00 00 00 00 
6572   2DF2 00 00 00 00 
6572   2DF6 00 00 00 00 
6572   2DFA 00 00 00 00 
6572   2DFE 00 00 00 00 
6572   2E02 00 00 00 00 
6572   2E06 00 00 00 00 
6573   2E0A C2 2D       __datum: .dw __datum_data
6574   2E0C 00 00       __datumpos: .dw 0
6575   2E0E 00 00 00 00 __anarr_data: .fill 24, 0
6575   2E12 00 00 00 00 
6575   2E16 00 00 00 00 
6575   2E1A 00 00 00 00 
6575   2E1E 00 00 00 00 
6575   2E22 00 00 00 00 
6576   2E26 0E 2E       __anarr: .dw __anarr_data
6577   2E28 00 00 00 00 __bnarr_data: .fill 24, 0
6577   2E2C 00 00 00 00 
6577   2E30 00 00 00 00 
6577   2E34 00 00 00 00 
6577   2E38 00 00 00 00 
6577   2E3C 00 00 00 00 
6578   2E40 28 2E       __bnarr: .dw __bnarr_data
6579   2E42 00 00 00 00 __anarrbkp_data: .fill 24, 0
6579   2E46 00 00 00 00 
6579   2E4A 00 00 00 00 
6579   2E4E 00 00 00 00 
6579   2E52 00 00 00 00 
6579   2E56 00 00 00 00 
6580   2E5A 42 2E       __anarrbkp: .dw __anarrbkp_data
6581   2E5C 00 00 00 00 __bnarrbkp_data: .fill 24, 0
6581   2E60 00 00 00 00 
6581   2E64 00 00 00 00 
6581   2E68 00 00 00 00 
6581   2E6C 00 00 00 00 
6581   2E70 00 00 00 00 
6582   2E74 5C 2E       __bnarrbkp: .dw __bnarrbkp_data
6583   2E76 00 00 00 00 __cnarr_data: .fill 24, 0
6583   2E7A 00 00 00 00 
6583   2E7E 00 00 00 00 
6583   2E82 00 00 00 00 
6583   2E86 00 00 00 00 
6583   2E8A 00 00 00 00 
6584   2E8E 76 2E       __cnarr: .dw __cnarr_data
6585   2E90 00 00 00 00 __mulres_data: .fill 48, 0
6585   2E94 00 00 00 00 
6585   2E98 00 00 00 00 
6585   2E9C 00 00 00 00 
6585   2EA0 00 00 00 00 
6585   2EA4 00 00 00 00 
6585   2EA8 00 00 00 00 
6585   2EAC 00 00 00 00 
6585   2EB0 00 00 00 00 
6585   2EB4 00 00 00 00 
6585   2EB8 00 00 00 00 
6585   2EBC 00 00 00 00 
6586   2EC0 90 2E       __mulres: .dw __mulres_data
6587   2EC2 00 00 00 00 __divres_data: .fill 24, 0
6587   2EC6 00 00 00 00 
6587   2ECA 00 00 00 00 
6587   2ECE 00 00 00 00 
6587   2ED2 00 00 00 00 
6587   2ED6 00 00 00 00 
6588   2EDA C2 2E       __divres: .dw __divres_data
6589   2EDC 00 00       __asign: .dw 0
6590   2EDE 00 00       __bsign: .dw 0
6591   2EE0 00 00       __csign: .dw 0
6592   2EE2 00 00       __protopos: .dw 0
6593   2EE4 00 00       __pos: .dw 0
6594   2EE6 00 00       __carry: .dw 0
6595   2EE8 00 00       __nextcarry: .dw 0
6596   2EEA 00 00       __agtb: .dw 0
6597   2EEC 00 00       __bgta: .dw 0
6598   2EEE 00 00       __aeqb: .dw 0
6599   2EF0 00 00       __aneqb: .dw 0
6600   2EF2 00 00       __ageb: .dw 0
6601   2EF4 00 00       __bgea: .dw 0
6602   2EF6 00 00       __eqflag: .dw 0
6603   2EF8 00 00       __sizepos: .dw 0
6604   2EFA 00 00       __psizepos: .dw 0
6605   2EFC 00 00       __swappos: .dw 0
6606   2EFE 00 00       __swaptmp: .dw 0
6607   2F00 00 00       __toolarge: .dw 0
6608   2F02 00 00       __normal: .dw 0
6609   2F04 00 00       __mulpos1: .dw 0
6610   2F06 00 00       __mulpos2: .dw 0
6611   2F08 00 00       __mulpos3: .dw 0
6612   2F0A 00 00       __brshift: .dw 0
6613   2F0C 00 00       __blshift: .dw 0
6614   2F0E 00 00       __alshift: .dw 0
6615   2F10 00 00       __divcounter: .dw 0
6616   2F12 00 00       __segmentcounter: .dw 0
6617   2F14 00 00       __divi: .dw 0
6618   2F16 00 00       __allzeroes: .dw 0
6619   2F18 00 00       __bkpcsign: .dw 0
6620   2F1A 00 00       __divshift: .dw 0
6621   2F1C             ; --- END DATA BLOCK
6622   2F1C             
6623   2F1C             ; --- BEGIN INCLUDE BLOCK
6624   2F1C             .include "lib/stdio.asm"
0001+  2F1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  2F1C             ; stdio.s
0003+  2F1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  2F1C             .include "lib/string.asm"
0001++ 2F1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 2F1C             ; string.s
0003++ 2F1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 2F1C             
0005++ 2F1C             
0006++ 2F1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 2F1C             ; strrev
0008++ 2F1C             ; reverse a string
0009++ 2F1C             ; D = string address
0010++ 2F1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 2F1C             ; 01234
0012++ 2F1C             strrev:
0013++ 2F1C 4B          	pusha
0014++ 2F1D 07 63 2F    	call strlen	; length in C
0015++ 2F20 12          	mov a, c
0016++ 2F21 AF 01 00    	cmp a, 1
0017++ 2F24 D0 3E 2F    	jleu strrev_end	; check string length. string len must be > 1
0018++ 2F27 7D          	dec a
0019++ 2F28 FD 4E       	mov si, d	; beginning of string
0020++ 2F2A FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 2F2C 59          	add d, a	; end of string
0022++ 2F2D 12          	mov a, c
0023++ 2F2E FD 9B       	shr a		; divide by 2
0024++ 2F30 39          	mov c, a	; C now counts the steps
0025++ 2F31             strrev_L0:
0026++ 2F31 32          	mov bl, [d]	; save load right-side char into BL
0027++ 2F32 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 2F33 3E          	mov [d], al	; store left char into right side
0029++ 2F34 1B          	mov al, bl
0030++ 2F35 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 2F36 7E          	dec c
0032++ 2F37 7F          	dec d
0033++ 2F38 C2 00 00    	cmp c, 0
0034++ 2F3B C7 31 2F    	jne strrev_L0
0035++ 2F3E             strrev_end:
0036++ 2F3E 4C          	popa
0037++ 2F3F 09          	ret
0038++ 2F40             	
0039++ 2F40             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 2F40             ; strchr
0041++ 2F40             ; search string in D for char in AL
0042++ 2F40             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 2F40             strchr:
0044++ 2F40             strchr_L0:
0045++ 2F40 32          	mov bl, [d]
0046++ 2F41 C1 00       	cmp bl, 0
0047++ 2F43 C6 4E 2F    	je strchr_end
0048++ 2F46 BA          	cmp al, bl
0049++ 2F47 C6 4E 2F    	je strchr_end
0050++ 2F4A 79          	inc d
0051++ 2F4B 0A 40 2F    	jmp strchr_L0
0052++ 2F4E             strchr_end:
0053++ 2F4E 1B          	mov al, bl
0054++ 2F4F 09          	ret
0055++ 2F50             
0056++ 2F50             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 2F50             ; strstr
0058++ 2F50             ; find sub-string
0059++ 2F50             ; str1 in SI
0060++ 2F50             ; str2 in DI
0061++ 2F50             ; SI points to end of source string
0062++ 2F50             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 2F50             strstr:
0064++ 2F50 DB          	push al
0065++ 2F51 DA          	push d
0066++ 2F52 E3          	push di
0067++ 2F53             strstr_loop:
0068++ 2F53 F3          	cmpsb					; compare a byte of the strings
0069++ 2F54 C7 5F 2F    	jne strstr_ret
0070++ 2F57 FC 00 00    	lea d, [di + 0]
0071++ 2F5A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 2F5C C7 53 2F    	jne strstr_loop				; equal chars but not at end
0073++ 2F5F             strstr_ret:
0074++ 2F5F F0          	pop di
0075++ 2F60 E7          	pop d
0076++ 2F61 E8          	pop al
0077++ 2F62 09          	ret
0078++ 2F63             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 2F63             ; length of null terminated string
0080++ 2F63             ; result in C
0081++ 2F63             ; pointer in D
0082++ 2F63             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 2F63             strlen:
0084++ 2F63 DA          	push d
0085++ 2F64 38 00 00    	mov c, 0
0086++ 2F67             strlen_L1:
0087++ 2F67 BD 00       	cmp byte [d], 0
0088++ 2F69 C6 71 2F    	je strlen_ret
0089++ 2F6C 79          	inc d
0090++ 2F6D 78          	inc c
0091++ 2F6E 0A 67 2F    	jmp strlen_L1
0092++ 2F71             strlen_ret:
0093++ 2F71 E7          	pop d
0094++ 2F72 09          	ret
0095++ 2F73             
0096++ 2F73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 2F73             ; STRCMP
0098++ 2F73             ; compare two strings
0099++ 2F73             ; str1 in SI
0100++ 2F73             ; str2 in DI
0101++ 2F73             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 2F73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 2F73             strcmp:
0104++ 2F73 DB          	push al
0105++ 2F74 DA          	push d
0106++ 2F75 E3          	push di
0107++ 2F76 E2          	push si
0108++ 2F77             strcmp_loop:
0109++ 2F77 F3          	cmpsb					; compare a byte of the strings
0110++ 2F78 C7 83 2F    	jne strcmp_ret
0111++ 2F7B FB FF FF    	lea d, [si +- 1]
0112++ 2F7E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 2F80 C7 77 2F    	jne strcmp_loop				; equal chars but not at end
0114++ 2F83             strcmp_ret:
0115++ 2F83 EF          	pop si
0116++ 2F84 F0          	pop di
0117++ 2F85 E7          	pop d
0118++ 2F86 E8          	pop al
0119++ 2F87 09          	ret
0120++ 2F88             
0121++ 2F88             
0122++ 2F88             ; STRCPY
0123++ 2F88             ; copy null terminated string from SI to DI
0124++ 2F88             ; source in SI
0125++ 2F88             ; destination in DI
0126++ 2F88             strcpy:
0127++ 2F88 E2          	push si
0128++ 2F89 E3          	push di
0129++ 2F8A DB          	push al
0130++ 2F8B             strcpy_L1:
0131++ 2F8B F6          	lodsb
0132++ 2F8C F7          	stosb
0133++ 2F8D B9 00       	cmp al, 0
0134++ 2F8F C7 8B 2F    	jne strcpy_L1
0135++ 2F92             strcpy_end:
0136++ 2F92 E8          	pop al
0137++ 2F93 F0          	pop di
0138++ 2F94 EF          	pop si
0139++ 2F95 09          	ret
0140++ 2F96             
0141++ 2F96             ; STRCAT
0142++ 2F96             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 2F96             ; source in SI
0144++ 2F96             ; destination in DI
0145++ 2F96             strcat:
0146++ 2F96 E2          	push si
0147++ 2F97 E3          	push di
0148++ 2F98 D7          	push a
0149++ 2F99 DA          	push d
0150++ 2F9A 50          	mov a, di
0151++ 2F9B 3C          	mov d, a
0152++ 2F9C             strcat_goto_end_L1:
0153++ 2F9C BD 00       	cmp byte[d], 0
0154++ 2F9E C6 A5 2F    	je strcat_start
0155++ 2FA1 79          	inc d
0156++ 2FA2 0A 9C 2F    	jmp strcat_goto_end_L1
0157++ 2FA5             strcat_start:
0158++ 2FA5 FD 50       	mov di, d
0159++ 2FA7             strcat_L1:
0160++ 2FA7 F6          	lodsb
0161++ 2FA8 F7          	stosb
0162++ 2FA9 B9 00       	cmp al, 0
0163++ 2FAB C7 A7 2F    	jne strcat_L1
0164++ 2FAE             strcat_end:
0165++ 2FAE E7          	pop d
0166++ 2FAF E4          	pop a
0167++ 2FB0 F0          	pop di
0168++ 2FB1 EF          	pop si
0169++ 2FB2 09          	ret
0005+  2FB3             
0006+  2FB3 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  2FB7 34 35 36 37 
0006+  2FBB 38 39 41 42 
0006+  2FBF 43 44 45 46 
0007+  2FC3 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  2FC7 1B 5B 48 00 
0008+  2FCB             
0009+  2FCB 01 00       table_power:.dw 1
0010+  2FCD 0A 00       			.dw 10
0011+  2FCF 64 00       			.dw 100
0012+  2FD1 E8 03       			.dw 1000
0013+  2FD3 10 27       			.dw 10000
0014+  2FD5             
0015+  2FD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  2FD5             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  2FD5             ; ASCII in BL
0018+  2FD5             ; result in AL
0019+  2FD5             ; ascii for F = 0100 0110
0020+  2FD5             ; ascii for 9 = 0011 1001
0021+  2FD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  2FD5             hex_ascii_encode:
0023+  2FD5 1B          	mov al, bl
0024+  2FD6 93 40       	test al, $40				; test if letter or number
0025+  2FD8 C7 DE 2F    	jnz hex_letter
0026+  2FDB 87 0F       	and al, $0F				; get number
0027+  2FDD 09          	ret
0028+  2FDE             hex_letter:
0029+  2FDE 87 0F       	and al, $0F				; get letter
0030+  2FE0 6A 09       	add al, 9
0031+  2FE2 09          	ret
0032+  2FE3             
0033+  2FE3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  2FE3             ; ATOI
0035+  2FE3             ; 2 letter hex string in B
0036+  2FE3             ; 8bit integer returned in AL
0037+  2FE3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  2FE3             atoi:
0039+  2FE3 D8          	push b
0040+  2FE4 07 D5 2F    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  2FE7 30          	mov bl, bh
0042+  2FE8 DB          	push al					; save a
0043+  2FE9 07 D5 2F    	call hex_ascii_encode
0044+  2FEC EA          	pop bl	
0045+  2FED FD 9E 04    	shl al, 4
0046+  2FF0 8C          	or al, bl
0047+  2FF1 E5          	pop b
0048+  2FF2 09          	ret	
0049+  2FF3             
0050+  2FF3             
0051+  2FF3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  2FF3             ; printf
0053+  2FF3             ; no need for explanations!
0054+  2FF3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  2FF3             printf:
0056+  2FF3 09          	ret
0057+  2FF4             
0058+  2FF4             
0059+  2FF4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  2FF4             ; scanf
0061+  2FF4             ; no need for explanations!
0062+  2FF4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  2FF4             scanf:
0064+  2FF4 09          	ret
0065+  2FF5             
0066+  2FF5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  2FF5             ; ITOA
0068+  2FF5             ; 8bit value in BL
0069+  2FF5             ; 2 byte ASCII result in A
0070+  2FF5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  2FF5             itoa:
0072+  2FF5 DA          	push d
0073+  2FF6 D8          	push b
0074+  2FF7 A7 00       	mov bh, 0
0075+  2FF9 FD A4 04    	shr bl, 4	
0076+  2FFC 74          	mov d, b
0077+  2FFD 1F B3 2F    	mov al, [d + s_hex_digits]
0078+  3000 23          	mov ah, al
0079+  3001             	
0080+  3001 E5          	pop b
0081+  3002 D8          	push b
0082+  3003 A7 00       	mov bh, 0
0083+  3005 FD 87 0F    	and bl, $0F
0084+  3008 74          	mov d, b
0085+  3009 1F B3 2F    	mov al, [d + s_hex_digits]
0086+  300C E5          	pop b
0087+  300D E7          	pop d
0088+  300E 09          	ret
0089+  300F             
0090+  300F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  300F             ; HEX STRING TO BINARY
0092+  300F             ; di = destination address
0093+  300F             ; si = source
0094+  300F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  300F             hex_to_int:
0096+  300F             hex_to_int_L1:
0097+  300F F6          	lodsb					; load from [SI] to AL
0098+  3010 B9 00       	cmp al, 0				; check if ASCII 0
0099+  3012 C6 1F 30    	jz hex_to_int_ret
0100+  3015 36          	mov bh, al
0101+  3016 F6          	lodsb
0102+  3017 2F          	mov bl, al
0103+  3018 07 E3 2F    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  301B F7          	stosb					; store AL to [DI]
0105+  301C 0A 0F 30    	jmp hex_to_int_L1
0106+  301F             hex_to_int_ret:
0107+  301F 09          	ret		
0108+  3020             
0109+  3020             
0110+  3020             
0111+  3020             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  3020             ; GETCHAR
0113+  3020             ; char in ah
0114+  3020             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  3020             getchar:
0116+  3020 DB          	push al
0117+  3021             getchar_retry:
0118+  3021 FD 0C       	sti
0119+  3023 19 01       	mov al, 1
0120+  3025 05 03       	syscall sys_io			; receive in AH
0121+  3027 B9 00       	cmp al, 0			; check if any char was receive
0122+  3029 C6 21 30    	je getchar_retry
0123+  302C E8          	pop al
0124+  302D 09          	ret
0125+  302E             
0126+  302E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  302E             ; PUTCHAR
0128+  302E             ; char in ah
0129+  302E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  302E             putchar:
0131+  302E D7          	push a
0132+  302F 19 00       	mov al, 0
0133+  3031 05 03       	syscall sys_io			; char in AH
0134+  3033 E4          	pop a
0135+  3034 09          	ret
0136+  3035             
0137+  3035             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  3035             ;; INPUT A STRING
0139+  3035             ;; terminates with null
0140+  3035             ;; pointer in D
0141+  3035             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  3035             gets:
0143+  3035 D7          	push a
0144+  3036 DA          	push d
0145+  3037             gets_loop:
0146+  3037 FD 0C       	sti
0147+  3039 19 01       	mov al, 1
0148+  303B 05 03       	syscall sys_io			; receive in AH
0149+  303D B9 00       	cmp al, 0				; check error code (AL)
0150+  303F C6 37 30    	je gets_loop			; if no char received, retry
0151+  3042             
0152+  3042 76 1B       	cmp ah, 27
0153+  3044 C6 65 30    	je gets_telnet_escape
0154+  3047 76 0A       	cmp ah, $0A				; LF
0155+  3049 C6 BE 30    	je gets_end
0156+  304C 76 0D       	cmp ah, $0D				; CR
0157+  304E C6 BE 30    	je gets_end
0158+  3051 76 5C       	cmp ah, $5C				; '\\'
0159+  3053 C6 95 30    	je gets_escape
0160+  3056             	
0161+  3056 76 08       	cmp ah, $08			; check for backspace
0162+  3058 C6 61 30    	je gets_backspace
0163+  305B             
0164+  305B 1A          	mov al, ah
0165+  305C 3E          	mov [d], al
0166+  305D 79          	inc d
0167+  305E 0A 37 30    	jmp gets_loop
0168+  3061             gets_backspace:
0169+  3061 7F          	dec d
0170+  3062 0A 37 30    	jmp gets_loop
0171+  3065             gets_telnet_escape:
0172+  3065 FD 0C       	sti
0173+  3067 19 01       	mov al, 1
0174+  3069 05 03       	syscall sys_io				; receive in AH without echo
0175+  306B B9 00       	cmp al, 0					; check error code (AL)
0176+  306D C6 65 30    	je gets_telnet_escape		; if no char received, retry
0177+  3070 76 5B       	cmp ah, '['
0178+  3072 C7 37 30    	jne gets_loop
0179+  3075             gets_telnet_escape_phase2:
0180+  3075 FD 0C       	sti
0181+  3077 19 01       	mov al, 1
0182+  3079 05 03       	syscall sys_io					; receive in AH without echo
0183+  307B B9 00       	cmp al, 0						; check error code (AL)
0184+  307D C6 75 30    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  3080 76 44       	cmp ah, 'D'
0186+  3082 C6 8D 30    	je gets_left_arrow
0187+  3085 76 43       	cmp ah, 'C'
0188+  3087 C6 91 30    	je gets_right_arrow
0189+  308A 0A 37 30    	jmp gets_loop
0190+  308D             gets_left_arrow:
0191+  308D 7F          	dec d
0192+  308E 0A 37 30    	jmp gets_loop
0193+  3091             gets_right_arrow:
0194+  3091 79          	inc d
0195+  3092 0A 37 30    	jmp gets_loop
0196+  3095             gets_escape:
0197+  3095 FD 0C       	sti
0198+  3097 19 01       	mov al, 1
0199+  3099 05 03       	syscall sys_io			; receive in AH
0200+  309B B9 00       	cmp al, 0				; check error code (AL)
0201+  309D C6 95 30    	je gets_escape			; if no char received, retry
0202+  30A0 76 6E       	cmp ah, 'n'
0203+  30A2 C6 B0 30    	je gets_LF
0204+  30A5 76 72       	cmp ah, 'r'
0205+  30A7 C6 B7 30    	je gets_CR
0206+  30AA 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  30AB 3E          	mov [d], al
0208+  30AC 79          	inc d
0209+  30AD 0A 37 30    	jmp gets_loop
0210+  30B0             gets_LF:
0211+  30B0 19 0A       	mov al, $0A
0212+  30B2 3E          	mov [d], al
0213+  30B3 79          	inc d
0214+  30B4 0A 37 30    	jmp gets_loop
0215+  30B7             gets_CR:
0216+  30B7 19 0D       	mov al, $0D
0217+  30B9 3E          	mov [d], al
0218+  30BA 79          	inc d
0219+  30BB 0A 37 30    	jmp gets_loop
0220+  30BE             gets_end:
0221+  30BE 19 00       	mov al, 0
0222+  30C0 3E          	mov [d], al				; terminate string
0223+  30C1 E7          	pop d
0224+  30C2 E4          	pop a
0225+  30C3 09          	ret
0226+  30C4             
0227+  30C4             
0228+  30C4             
0229+  30C4             
0230+  30C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  30C4             ;; INPUT TEXT
0232+  30C4             ;; terminated with CTRL+D
0233+  30C4             ;; pointer in D
0234+  30C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  30C4             gettxt:
0236+  30C4 D7          	push a
0237+  30C5 DA          	push d
0238+  30C6             gettxt_loop:
0239+  30C6 19 01       	mov al, 1
0240+  30C8 05 03       	syscall sys_io			; receive in AH
0241+  30CA B9 00       	cmp al, 0				; check error code (AL)
0242+  30CC C6 C6 30    	je gettxt_loop		; if no char received, retry
0243+  30CF 76 04       	cmp ah, 4			; EOT
0244+  30D1 C6 0F 31    	je gettxt_end
0245+  30D4 76 08       	cmp ah, $08			; check for backspace
0246+  30D6 C6 0B 31    	je gettxt_backspace
0247+  30D9 76 5C       	cmp ah, $5C				; '\\'
0248+  30DB C6 E4 30    	je gettxt_escape
0249+  30DE 1A          	mov al, ah
0250+  30DF 3E          	mov [d], al
0251+  30E0 79          	inc d
0252+  30E1 0A C6 30    	jmp gettxt_loop
0253+  30E4             gettxt_escape:
0254+  30E4 19 01       	mov al, 1
0255+  30E6 05 03       	syscall sys_io			; receive in AH
0256+  30E8 B9 00       	cmp al, 0				; check error code (AL)
0257+  30EA C6 E4 30    	je gettxt_escape		; if no char received, retry
0258+  30ED 76 6E       	cmp ah, 'n'
0259+  30EF C6 FD 30    	je gettxt_LF
0260+  30F2 76 72       	cmp ah, 'r'
0261+  30F4 C6 04 31    	je gettxt_CR
0262+  30F7 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  30F8 3E          	mov [d], al
0264+  30F9 79          	inc d
0265+  30FA 0A C6 30    	jmp gettxt_loop
0266+  30FD             gettxt_LF:
0267+  30FD 19 0A       	mov al, $0A
0268+  30FF 3E          	mov [d], al
0269+  3100 79          	inc d
0270+  3101 0A C6 30    	jmp gettxt_loop
0271+  3104             gettxt_CR:
0272+  3104 19 0D       	mov al, $0D
0273+  3106 3E          	mov [d], al
0274+  3107 79          	inc d
0275+  3108 0A C6 30    	jmp gettxt_loop
0276+  310B             gettxt_backspace:
0277+  310B 7F          	dec d
0278+  310C 0A C6 30    	jmp gettxt_loop
0279+  310F             gettxt_end:
0280+  310F 19 00       	mov al, 0
0281+  3111 3E          	mov [d], al				; terminate string
0282+  3112 E7          	pop d
0283+  3113 E4          	pop a
0284+  3114 09          	ret
0285+  3115             
0286+  3115             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  3115             ; PRINT NEW LINE
0288+  3115             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  3115             printnl:
0290+  3115 D7          	push a
0291+  3116 10 00 0A    	mov a, $0A00
0292+  3119 05 03       	syscall sys_io
0293+  311B 10 00 0D    	mov a, $0D00
0294+  311E 05 03       	syscall sys_io
0295+  3120 E4          	pop a
0296+  3121 09          	ret
0297+  3122             
0298+  3122             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  3122             ; strtoint
0300+  3122             ; 4 digit hex string number in d
0301+  3122             ; integer returned in A
0302+  3122             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  3122             strtointx:
0304+  3122 D8          	push b
0305+  3123 32          	mov bl, [d]
0306+  3124 37          	mov bh, bl
0307+  3125 33 01 00    	mov bl, [d + 1]
0308+  3128 07 E3 2F    	call atoi				; convert to int in AL
0309+  312B 23          	mov ah, al				; move to AH
0310+  312C 33 02 00    	mov bl, [d + 2]
0311+  312F 37          	mov bh, bl
0312+  3130 33 03 00    	mov bl, [d + 3]
0313+  3133 07 E3 2F    	call atoi				; convert to int in AL
0314+  3136 E5          	pop b
0315+  3137 09          	ret
0316+  3138             
0317+  3138             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  3138             ; strtoint
0319+  3138             ; 5 digit base10 string number in d
0320+  3138             ; integer returned in A
0321+  3138             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  3138             strtoint:
0323+  3138 E2          	push si
0324+  3139 D8          	push b
0325+  313A D9          	push c
0326+  313B DA          	push d
0327+  313C 07 63 2F    	call strlen			; get string length in C
0328+  313F 7E          	dec c
0329+  3140 FD 4E       	mov si, d
0330+  3142 12          	mov a, c
0331+  3143 FD 99       	shl a
0332+  3145 3B CB 2F    	mov d, table_power
0333+  3148 59          	add d, a
0334+  3149 38 00 00    	mov c, 0
0335+  314C             strtoint_L0:
0336+  314C F6          	lodsb			; load ASCII to al
0337+  314D B9 00       	cmp al, 0
0338+  314F C6 62 31    	je strtoint_end
0339+  3152 6F 30       	sub al, $30		; make into integer
0340+  3154 22 00       	mov ah, 0
0341+  3156 2A          	mov b, [d]
0342+  3157 AC          	mul a, b			; result in B since it fits in 16bits
0343+  3158 11          	mov a, b
0344+  3159 28          	mov b, c
0345+  315A 54          	add a, b
0346+  315B 39          	mov c, a
0347+  315C 63 02 00    	sub d, 2
0348+  315F 0A 4C 31    	jmp strtoint_L0
0349+  3162             strtoint_end:
0350+  3162 12          	mov a, c
0351+  3163 E7          	pop d
0352+  3164 E6          	pop c
0353+  3165 E5          	pop b
0354+  3166 EF          	pop si
0355+  3167 09          	ret
0356+  3168             
0357+  3168             
0358+  3168             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  3168             ; PRINT NULL TERMINATED STRING
0360+  3168             ; pointer in D
0361+  3168             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  3168             puts:
0363+  3168 D7          	push a
0364+  3169 DA          	push d
0365+  316A             puts_L1:
0366+  316A 1E          	mov al, [d]
0367+  316B B9 00       	cmp al, 0
0368+  316D C6 79 31    	jz puts_END
0369+  3170 23          	mov ah, al
0370+  3171 19 00       	mov al, 0
0371+  3173 05 03       	syscall sys_io
0372+  3175 79          	inc d
0373+  3176 0A 6A 31    	jmp puts_L1
0374+  3179             puts_END:
0375+  3179 E7          	pop d
0376+  317A E4          	pop a
0377+  317B 09          	ret
0378+  317C             
0379+  317C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  317C             ; PRINT N SIZE STRING
0381+  317C             ; pointer in D
0382+  317C             ; size in C
0383+  317C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  317C             putsn:
0385+  317C DB          	push al
0386+  317D DA          	push d
0387+  317E D9          	push c
0388+  317F             putsn_L0:
0389+  317F 1E          	mov al, [d]
0390+  3180 23          	mov ah, al
0391+  3181 19 00       	mov al, 0
0392+  3183 05 03       	syscall sys_io
0393+  3185 79          	inc d
0394+  3186 7E          	dec c	
0395+  3187 C2 00 00    	cmp c, 0
0396+  318A C7 7F 31    	jne putsn_L0
0397+  318D             putsn_end:
0398+  318D E6          	pop c
0399+  318E E7          	pop d
0400+  318F E8          	pop al
0401+  3190 09          	ret
0402+  3191             
0403+  3191             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  3191             ; print 16bit decimal number
0405+  3191             ; input number in A
0406+  3191             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  3191             print_u16d:
0408+  3191 D7          	push a
0409+  3192 D8          	push b
0410+  3193 26 10 27    	mov b, 10000
0411+  3196 AE          	div a, b			; get 10000 coeff.
0412+  3197 07 BD 31    	call print_number
0413+  319A 11          	mov a, b
0414+  319B 26 E8 03    	mov b, 1000
0415+  319E AE          	div a, b			; get 10000 coeff.
0416+  319F 07 BD 31    	call print_number
0417+  31A2 11          	mov a, b
0418+  31A3 26 64 00    	mov b, 100
0419+  31A6 AE          	div a, b
0420+  31A7 07 BD 31    	call print_number
0421+  31AA 11          	mov a, b
0422+  31AB 26 0A 00    	mov b, 10
0423+  31AE AE          	div a, b
0424+  31AF 07 BD 31    	call print_number
0425+  31B2 11          	mov a, b
0426+  31B3 6A 30       	add al, $30
0427+  31B5 23          	mov ah, al
0428+  31B6 19 00       	mov al, 0
0429+  31B8 05 03       	syscall sys_io	; print coeff
0430+  31BA E5          	pop b
0431+  31BB E4          	pop a
0432+  31BC 09          	ret
0433+  31BD             
0434+  31BD             
0435+  31BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  31BD             ; if A == 0, print space
0437+  31BD             ; else print A
0438+  31BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  31BD             print_number:
0440+  31BD 6A 30       	add al, $30
0441+  31BF 23          	mov ah, al
0442+  31C0 07 2E 30    	call putchar
0443+  31C3 09          	ret
0444+  31C4             
0445+  31C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  31C4             ; PRINT 16BIT HEX INTEGER
0447+  31C4             ; integer value in reg B
0448+  31C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  31C4             print_u16x:
0450+  31C4 D7          	push a
0451+  31C5 D8          	push b
0452+  31C6 DD          	push bl
0453+  31C7 30          	mov bl, bh
0454+  31C8 07 F5 2F    	call itoa				; convert bh to char in A
0455+  31CB 2F          	mov bl, al				; save al
0456+  31CC 19 00       	mov al, 0
0457+  31CE 05 03       	syscall sys_io				; display AH
0458+  31D0 24          	mov ah, bl				; retrieve al
0459+  31D1 19 00       	mov al, 0
0460+  31D3 05 03       	syscall sys_io				; display AL
0461+  31D5             
0462+  31D5 EA          	pop bl
0463+  31D6 07 F5 2F    	call itoa				; convert bh to char in A
0464+  31D9 2F          	mov bl, al				; save al
0465+  31DA 19 00       	mov al, 0
0466+  31DC 05 03       	syscall sys_io				; display AH
0467+  31DE 24          	mov ah, bl				; retrieve al
0468+  31DF 19 00       	mov al, 0
0469+  31E1 05 03       	syscall sys_io				; display AL
0470+  31E3             
0471+  31E3 E5          	pop b
0472+  31E4 E4          	pop a
0473+  31E5 09          	ret
0474+  31E6             
0475+  31E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  31E6             ; INPUT 16BIT HEX INTEGER
0477+  31E6             ; read 16bit integer into A
0478+  31E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  31E6             scan_u16x:
0480+  31E6 F8 10 00    	enter 16
0481+  31E9 D8          	push b
0482+  31EA DA          	push d
0483+  31EB             
0484+  31EB FA F1 FF    	lea d, [bp + -15]
0485+  31EE 07 35 30    	call gets				; get number
0486+  31F1             
0487+  31F1 32          	mov bl, [d]
0488+  31F2 37          	mov bh, bl
0489+  31F3 33 01 00    	mov bl, [d + 1]
0490+  31F6 07 E3 2F    	call atoi				; convert to int in AL
0491+  31F9 23          	mov ah, al				; move to AH
0492+  31FA             
0493+  31FA 33 02 00    	mov bl, [d + 2]
0494+  31FD 37          	mov bh, bl
0495+  31FE 33 03 00    	mov bl, [d + 3]
0496+  3201 07 E3 2F    	call atoi				; convert to int in AL
0497+  3204             
0498+  3204 E7          	pop d
0499+  3205 E5          	pop b
0500+  3206 F9          	leave
0501+  3207 09          	ret
0502+  3208             
0503+  3208             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  3208             ; PRINT 8bit HEX INTEGER
0505+  3208             ; integer value in reg bl
0506+  3208             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  3208             print_u8x:
0508+  3208 D7          	push a
0509+  3209 DD          	push bl
0510+  320A             
0511+  320A 07 F5 2F    	call itoa				; convert bl to char in A
0512+  320D 2F          	mov bl, al				; save al
0513+  320E 19 00       	mov al, 0
0514+  3210 05 03       	syscall sys_io				; display AH
0515+  3212 24          	mov ah, bl				; retrieve al
0516+  3213 19 00       	mov al, 0
0517+  3215 05 03       	syscall sys_io				; display AL
0518+  3217             
0519+  3217 EA          	pop bl
0520+  3218 E4          	pop a
0521+  3219 09          	ret
0522+  321A             
0523+  321A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  321A             ; print 8bit decimal unsigned number
0525+  321A             ; input number in AL
0526+  321A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  321A             print_u8d:
0528+  321A D7          	push a
0529+  321B D8          	push b
0530+  321C             
0531+  321C 22 00       	mov ah, 0
0532+  321E 26 64 00    	mov b, 100
0533+  3221 AE          	div a, b
0534+  3222 D8          	push b			; save remainder
0535+  3223 B9 00       	cmp al, 0
0536+  3225 C6 2F 32    	je skip100
0537+  3228 6A 30       	add al, $30
0538+  322A 23          	mov ah, al
0539+  322B 19 00       	mov al, 0
0540+  322D 05 03       	syscall sys_io	; print coeff
0541+  322F             skip100:
0542+  322F E4          	pop a
0543+  3230 22 00       	mov ah, 0
0544+  3232 26 0A 00    	mov b, 10
0545+  3235 AE          	div a, b
0546+  3236 D8          	push b			; save remainder
0547+  3237 B9 00       	cmp al, 0
0548+  3239 C6 43 32    	je skip10
0549+  323C 6A 30       	add al, $30
0550+  323E 23          	mov ah, al
0551+  323F 19 00       	mov al, 0
0552+  3241 05 03       	syscall sys_io	; print coeff
0553+  3243             skip10:
0554+  3243 E4          	pop a
0555+  3244 1B          	mov al, bl
0556+  3245 6A 30       	add al, $30
0557+  3247 23          	mov ah, al
0558+  3248 19 00       	mov al, 0
0559+  324A 05 03       	syscall sys_io	; print coeff
0560+  324C E5          	pop b
0561+  324D E4          	pop a
0562+  324E 09          	ret
0563+  324F             
0564+  324F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  324F             ; INPUT 8BIT HEX INTEGER
0566+  324F             ; read 8bit integer into AL
0567+  324F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  324F             scan_u8x:
0569+  324F F8 04 00    	enter 4
0570+  3252 D8          	push b
0571+  3253 DA          	push d
0572+  3254             
0573+  3254 FA FD FF    	lea d, [bp + -3]
0574+  3257 07 35 30    	call gets				; get number
0575+  325A             
0576+  325A 32          	mov bl, [d]
0577+  325B 37          	mov bh, bl
0578+  325C 33 01 00    	mov bl, [d + 1]
0579+  325F 07 E3 2F    	call atoi				; convert to int in AL
0580+  3262             
0581+  3262 E7          	pop d
0582+  3263 E5          	pop b
0583+  3264 F9          	leave
0584+  3265 09          	ret
0585+  3266             
0586+  3266             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  3266             ; input decimal number
0588+  3266             ; result in A
0589+  3266             ; 655'\0'
0590+  3266             ; low--------high
0591+  3266             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  3266             scan_u16d:
0593+  3266 F8 08 00    	enter 8
0594+  3269 E2          	push si
0595+  326A D8          	push b
0596+  326B D9          	push c
0597+  326C DA          	push d
0598+  326D FA F9 FF    	lea d, [bp +- 7]
0599+  3270 07 35 30    	call gets
0600+  3273 07 63 2F    	call strlen			; get string length in C
0601+  3276 7E          	dec c
0602+  3277 FD 4E       	mov si, d
0603+  3279 12          	mov a, c
0604+  327A FD 99       	shl a
0605+  327C 3B CB 2F    	mov d, table_power
0606+  327F 59          	add d, a
0607+  3280 38 00 00    	mov c, 0
0608+  3283             mul_loop:
0609+  3283 F6          	lodsb			; load ASCII to al
0610+  3284 B9 00       	cmp al, 0
0611+  3286 C6 99 32    	je mul_exit
0612+  3289 6F 30       	sub al, $30		; make into integer
0613+  328B 22 00       	mov ah, 0
0614+  328D 2A          	mov b, [d]
0615+  328E AC          	mul a, b			; result in B since it fits in 16bits
0616+  328F 11          	mov a, b
0617+  3290 28          	mov b, c
0618+  3291 54          	add a, b
0619+  3292 39          	mov c, a
0620+  3293 63 02 00    	sub d, 2
0621+  3296 0A 83 32    	jmp mul_loop
0622+  3299             mul_exit:
0623+  3299 12          	mov a, c
0624+  329A E7          	pop d
0625+  329B E6          	pop c
0626+  329C E5          	pop b
0627+  329D EF          	pop si
0628+  329E F9          	leave
0629+  329F 09          	ret
6625   32A0             ; --- END INCLUDE BLOCK
6626   32A0             
6627   32A0             
6628   32A0             .end
tasm: Number of errors = 0
