0001   0000             ; --- FILENAME: wireworld.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 29 F2 0F      mov b, [__grid] ; grid
0011   0405 D7            push a
0012   0406 74            mov d, b
0013   0407 DA            push d
0014   0408 26 05 00      mov b, 5
0015   040B E7            pop d
0016   040C 10 50 00      mov a, 80
0017   040F AC            mul a, b
0018   0410 5A            add d, b
0019   0411 DA            push d
0020   0412 26 05 00      mov b, 5
0021   0415 E7            pop d
0022   0416 10 02 00      mov a, 2
0023   0419 AC            mul a, b
0024   041A 5A            add d, b
0025   041B E4            pop a
0026   041C DA            push d
0027   041D 26 01 00      mov b, 1; CONDUCTOR
0028   0420 E7            pop d
0029   0421 FD 43         mov [d], b
0030   0423 29 F2 0F      mov b, [__grid] ; grid
0031   0426 D7            push a
0032   0427 74            mov d, b
0033   0428 DA            push d
0034   0429 26 06 00      mov b, 6
0035   042C E7            pop d
0036   042D 10 50 00      mov a, 80
0037   0430 AC            mul a, b
0038   0431 5A            add d, b
0039   0432 DA            push d
0040   0433 26 05 00      mov b, 5
0041   0436 E7            pop d
0042   0437 10 02 00      mov a, 2
0043   043A AC            mul a, b
0044   043B 5A            add d, b
0045   043C E4            pop a
0046   043D DA            push d
0047   043E 26 02 00      mov b, 2; ELECTRON_HEAD
0048   0441 E7            pop d
0049   0442 FD 43         mov [d], b
0050   0444 29 F2 0F      mov b, [__grid] ; grid
0051   0447 D7            push a
0052   0448 74            mov d, b
0053   0449 DA            push d
0054   044A 26 07 00      mov b, 7
0055   044D E7            pop d
0056   044E 10 50 00      mov a, 80
0057   0451 AC            mul a, b
0058   0452 5A            add d, b
0059   0453 DA            push d
0060   0454 26 05 00      mov b, 5
0061   0457 E7            pop d
0062   0458 10 02 00      mov a, 2
0063   045B AC            mul a, b
0064   045C 5A            add d, b
0065   045D E4            pop a
0066   045E DA            push d
0067   045F 26 01 00      mov b, 1; CONDUCTOR
0068   0462 E7            pop d
0069   0463 FD 43         mov [d], b
0070   0465 29 F2 0F      mov b, [__grid] ; grid
0071   0468 D7            push a
0072   0469 74            mov d, b
0073   046A DA            push d
0074   046B 26 06 00      mov b, 6
0075   046E E7            pop d
0076   046F 10 50 00      mov a, 80
0077   0472 AC            mul a, b
0078   0473 5A            add d, b
0079   0474 DA            push d
0080   0475 26 06 00      mov b, 6
0081   0478 E7            pop d
0082   0479 10 02 00      mov a, 2
0083   047C AC            mul a, b
0084   047D 5A            add d, b
0085   047E E4            pop a
0086   047F DA            push d
0087   0480 26 03 00      mov b, 3; ELECTRON_TAIL
0088   0483 E7            pop d
0089   0484 FD 43         mov [d], b
0090   0486 29 F2 0F      mov b, [__grid] ; grid
0091   0489 D7            push a
0092   048A 74            mov d, b
0093   048B DA            push d
0094   048C 26 06 00      mov b, 6
0095   048F E7            pop d
0096   0490 10 50 00      mov a, 80
0097   0493 AC            mul a, b
0098   0494 5A            add d, b
0099   0495 DA            push d
0100   0496 26 07 00      mov b, 7
0101   0499 E7            pop d
0102   049A 10 02 00      mov a, 2
0103   049D AC            mul a, b
0104   049E 5A            add d, b
0105   049F E4            pop a
0106   04A0 DA            push d
0107   04A1 26 01 00      mov b, 1; CONDUCTOR
0108   04A4 E7            pop d
0109   04A5 FD 43         mov [d], b
0110   04A7             _while1_cond:
0111   04A7 26 01 00      mov b, 1
0112   04AA C0 00 00      cmp b, 0
0113   04AD C6 B9 04      je _while1_exit
0114   04B0             _while1_block:
0115   04B0 07 BF 04      call print_grid
0116   04B3 07 A5 05      call iterate
0117   04B6 0A A7 04      jmp _while1_cond
0118   04B9             _while1_exit:
0119   04B9 26 00 00      mov b, 0
0120   04BC F9            leave
0121   04BD 05 0B         syscall sys_terminate_proc
0122   04BF             
0123   04BF             print_grid:
0124   04BF D2            push bp
0125   04C0 9B            mov bp, sp
0126   04C1 52 02 00      sub sp, 2 ; y
0127   04C4 52 02 00      sub sp, 2 ; x
0128   04C7 52 01 00      sub sp, 1 ; c
0129   04CA             _for2_init:
0130   04CA 26 00 00      mov b, 0
0131   04CD D7            push a
0132   04CE 11            mov a, b
0133   04CF 45 FF FF      mov [bp + -1], a ; y
0134   04D2 E4            pop a
0135   04D3             _for2_cond:
0136   04D3 2C FF FF      mov b, [bp + -1] ; y
0137   04D6 D7            push a
0138   04D7 11            mov a, b
0139   04D8 26 14 00      mov b, 20
0140   04DB B0            cmp a, b
0141   04DC 0E            lodflgs
0142   04DD 2F            mov bl, al
0143   04DE FD A2 03      shr al, 3
0144   04E1 FD A4 02      shr bl, 2
0145   04E4 FD 87 01      and bl, %00000001
0146   04E7 90            xor al, bl ; < (signed)
0147   04E8 22 00         mov ah, 0
0148   04EA 27            mov b, a
0149   04EB E4            pop a
0150   04EC C0 00 00      cmp b, 0
0151   04EF C6 A3 05      je _for2_exit
0152   04F2             _for2_block:
0153   04F2             _for3_init:
0154   04F2 26 00 00      mov b, 0
0155   04F5 D7            push a
0156   04F6 11            mov a, b
0157   04F7 45 FD FF      mov [bp + -3], a ; x
0158   04FA E4            pop a
0159   04FB             _for3_cond:
0160   04FB 2C FD FF      mov b, [bp + -3] ; x
0161   04FE D7            push a
0162   04FF 11            mov a, b
0163   0500 26 28 00      mov b, 40
0164   0503 B0            cmp a, b
0165   0504 0E            lodflgs
0166   0505 2F            mov bl, al
0167   0506 FD A2 03      shr al, 3
0168   0509 FD A4 02      shr bl, 2
0169   050C FD 87 01      and bl, %00000001
0170   050F 90            xor al, bl ; < (signed)
0171   0510 22 00         mov ah, 0
0172   0512 27            mov b, a
0173   0513 E4            pop a
0174   0514 C0 00 00      cmp b, 0
0175   0517 C6 8B 05      je _for3_exit
0176   051A             _for3_block:
0177   051A             _switch4_expr:
0178   051A 29 F2 0F      mov b, [__grid] ; grid
0179   051D D7            push a
0180   051E 74            mov d, b
0181   051F DA            push d
0182   0520 2C FF FF      mov b, [bp + -1] ; y
0183   0523 E7            pop d
0184   0524 10 50 00      mov a, 80
0185   0527 AC            mul a, b
0186   0528 5A            add d, b
0187   0529 DA            push d
0188   052A 2C FD FF      mov b, [bp + -3] ; x
0189   052D E7            pop d
0190   052E 10 02 00      mov a, 2
0191   0531 AC            mul a, b
0192   0532 5A            add d, b
0193   0533 E4            pop a
0194   0534 2A            mov b, [d]
0195   0535             _switch4_comparisons:
0196   0535 C6 41 05      je _switch4_case0
0197   0538 C6 4D 05      je _switch4_case1
0198   053B C6 59 05      je _switch4_case2
0199   053E C6 65 05      je _switch4_case3
0200   0541             _switch4_case0:
0201   0541 26 00 00      mov b, 0
0202   0544 DB            push al
0203   0545 1B            mov al, bl
0204   0546 40 FC FF      mov [bp + -4], al ; c
0205   0549 E8            pop al
0206   054A 0A 71 05      jmp _switch4_exit ; case break
0207   054D             _switch4_case1:
0208   054D 26 00 00      mov b, 0
0209   0550 DB            push al
0210   0551 1B            mov al, bl
0211   0552 40 FC FF      mov [bp + -4], al ; c
0212   0555 E8            pop al
0213   0556 0A 71 05      jmp _switch4_exit ; case break
0214   0559             _switch4_case2:
0215   0559 26 00 00      mov b, 0
0216   055C DB            push al
0217   055D 1B            mov al, bl
0218   055E 40 FC FF      mov [bp + -4], al ; c
0219   0561 E8            pop al
0220   0562 0A 71 05      jmp _switch4_exit ; case break
0221   0565             _switch4_case3:
0222   0565 26 00 00      mov b, 0
0223   0568 DB            push al
0224   0569 1B            mov al, bl
0225   056A 40 FC FF      mov [bp + -4], al ; c
0226   056D E8            pop al
0227   056E 0A 71 05      jmp _switch4_exit ; case break
0228   0571             _switch4_exit:
0229   0571 34 FC FF      mov bl, [bp + -4] ; c
0230   0574 A7 00         mov bh, 0
0231   0576 DD            push bl
0232   0577 07 8C 09      call _putchar
0233   057A 51 01 00      add sp, 1
0234   057D             _for3_update:
0235   057D 2C FD FF      mov b, [bp + -3] ; x
0236   0580 FD 77         inc b
0237   0582 D7            push a
0238   0583 11            mov a, b
0239   0584 45 FD FF      mov [bp + -3], a ; x
0240   0587 E4            pop a
0241   0588 0A FB 04      jmp _for3_cond
0242   058B             _for3_exit:
0243   058B 26 00 00      mov b, 0
0244   058E DD            push bl
0245   058F 07 8C 09      call _putchar
0246   0592 51 01 00      add sp, 1
0247   0595             _for2_update:
0248   0595 2C FF FF      mov b, [bp + -1] ; y
0249   0598 FD 77         inc b
0250   059A D7            push a
0251   059B 11            mov a, b
0252   059C 45 FF FF      mov [bp + -1], a ; y
0253   059F E4            pop a
0254   05A0 0A D3 04      jmp _for2_cond
0255   05A3             _for2_exit:
0256   05A3 F9            leave
0257   05A4 09            ret
0258   05A5             
0259   05A5             iterate:
0260   05A5 D2            push bp
0261   05A6 9B            mov bp, sp
0262   05A7 52 02 00      sub sp, 2 ; x
0263   05AA 52 02 00      sub sp, 2 ; y
0264   05AD 52 02 00      sub sp, 2 ; dx
0265   05B0 52 02 00      sub sp, 2 ; dy
0266   05B3 52 02 00      sub sp, 2 ; nx
0267   05B6 52 02 00      sub sp, 2 ; ny
0268   05B9 52 02 00      sub sp, 2 ; head_count
0269   05BC             _for5_init:
0270   05BC 26 00 00      mov b, 0
0271   05BF D7            push a
0272   05C0 11            mov a, b
0273   05C1 45 FD FF      mov [bp + -3], a ; y
0274   05C4 E4            pop a
0275   05C5             _for5_cond:
0276   05C5 2C FD FF      mov b, [bp + -3] ; y
0277   05C8 D7            push a
0278   05C9 11            mov a, b
0279   05CA 26 14 00      mov b, 20
0280   05CD B0            cmp a, b
0281   05CE 0E            lodflgs
0282   05CF 2F            mov bl, al
0283   05D0 FD A2 03      shr al, 3
0284   05D3 FD A4 02      shr bl, 2
0285   05D6 FD 87 01      and bl, %00000001
0286   05D9 90            xor al, bl ; < (signed)
0287   05DA 22 00         mov ah, 0
0288   05DC 27            mov b, a
0289   05DD E4            pop a
0290   05DE C0 00 00      cmp b, 0
0291   05E1 C6 E5 08      je _for5_exit
0292   05E4             _for5_block:
0293   05E4             _for6_init:
0294   05E4 26 00 00      mov b, 0
0295   05E7 D7            push a
0296   05E8 11            mov a, b
0297   05E9 45 FF FF      mov [bp + -1], a ; x
0298   05EC E4            pop a
0299   05ED             _for6_cond:
0300   05ED 2C FF FF      mov b, [bp + -1] ; x
0301   05F0 D7            push a
0302   05F1 11            mov a, b
0303   05F2 26 28 00      mov b, 40
0304   05F5 B0            cmp a, b
0305   05F6 0E            lodflgs
0306   05F7 2F            mov bl, al
0307   05F8 FD A2 03      shr al, 3
0308   05FB FD A4 02      shr bl, 2
0309   05FE FD 87 01      and bl, %00000001
0310   0601 90            xor al, bl ; < (signed)
0311   0602 22 00         mov ah, 0
0312   0604 27            mov b, a
0313   0605 E4            pop a
0314   0606 C0 00 00      cmp b, 0
0315   0609 C6 D7 08      je _for6_exit
0316   060C             _for6_block:
0317   060C 26 00 00      mov b, 0
0318   060F D7            push a
0319   0610 11            mov a, b
0320   0611 45 F3 FF      mov [bp + -13], a ; head_count
0321   0614 E4            pop a
0322   0615             _for7_init:
0323   0615 26 01 00      mov b, 1
0324   0618 FD 97         neg b
0325   061A D7            push a
0326   061B 11            mov a, b
0327   061C 45 F9 FF      mov [bp + -7], a ; dy
0328   061F E4            pop a
0329   0620             _for7_cond:
0330   0620 2C F9 FF      mov b, [bp + -7] ; dy
0331   0623 D7            push a
0332   0624 11            mov a, b
0333   0625 26 01 00      mov b, 1
0334   0628 B0            cmp a, b
0335   0629 0E            lodflgs
0336   062A 2F            mov bl, al
0337   062B FD 78         mov g, a
0338   062D FD A2 03      shr al, 3
0339   0630 FD A4 02      shr bl, 2
0340   0633 FD 87 01      and bl, %00000001
0341   0636 90            xor al, bl
0342   0637 FD 27         mov b, g
0343   0639 FD 87 01      and bl, %00000001
0344   063C 8C            or al, bl ; <= (signed)
0345   063D 22 00         mov ah, 0
0346   063F 27            mov b, a
0347   0640 E4            pop a
0348   0641 C0 00 00      cmp b, 0
0349   0644 C6 E1 07      je _for7_exit
0350   0647             _for7_block:
0351   0647             _for8_init:
0352   0647 26 01 00      mov b, 1
0353   064A FD 97         neg b
0354   064C D7            push a
0355   064D 11            mov a, b
0356   064E 45 FB FF      mov [bp + -5], a ; dx
0357   0651 E4            pop a
0358   0652             _for8_cond:
0359   0652 2C FB FF      mov b, [bp + -5] ; dx
0360   0655 D7            push a
0361   0656 11            mov a, b
0362   0657 26 01 00      mov b, 1
0363   065A B0            cmp a, b
0364   065B 0E            lodflgs
0365   065C 2F            mov bl, al
0366   065D FD 78         mov g, a
0367   065F FD A2 03      shr al, 3
0368   0662 FD A4 02      shr bl, 2
0369   0665 FD 87 01      and bl, %00000001
0370   0668 90            xor al, bl
0371   0669 FD 27         mov b, g
0372   066B FD 87 01      and bl, %00000001
0373   066E 8C            or al, bl ; <= (signed)
0374   066F 22 00         mov ah, 0
0375   0671 27            mov b, a
0376   0672 E4            pop a
0377   0673 C0 00 00      cmp b, 0
0378   0676 C6 D3 07      je _for8_exit
0379   0679             _for8_block:
0380   0679             _if9_cond:
0381   0679 2C FB FF      mov b, [bp + -5] ; dx
0382   067C D7            push a
0383   067D 11            mov a, b
0384   067E 26 00 00      mov b, 0
0385   0681 B0            cmp a, b
0386   0682 0E            lodflgs
0387   0683 87 01         and al, %00000001 ; ==
0388   0685 22 00         mov ah, 0
0389   0687 27            mov b, a
0390   0688 E4            pop a
0391   0689 DB            push al
0392   068A C0 00 00      cmp b, 0
0393   068D 0E            lodflgs ; transform condition into a single bit
0394   068E 2C F9 FF      mov b, [bp + -7] ; dy
0395   0691 D7            push a
0396   0692 11            mov a, b
0397   0693 26 00 00      mov b, 0
0398   0696 B0            cmp a, b
0399   0697 0E            lodflgs
0400   0698 87 01         and al, %00000001 ; ==
0401   069A 22 00         mov ah, 0
0402   069C 27            mov b, a
0403   069D E4            pop a
0404   069E DB            push al
0405   069F C0 00 00      cmp b, 0
0406   06A2 0E            lodflgs
0407   06A3 EA            pop bl ; matches previous 'push al'
0408   06A4 8C            or al, bl
0409   06A5 8F 01         xor al, %00000001
0410   06A7 2F            mov bl, al
0411   06A8 A7 00         mov bh, 0
0412   06AA E8            pop al
0413   06AB C0 00 00      cmp b, 0
0414   06AE C6 B7 06      je _if9_exit
0415   06B1             _if9_true:
0416   06B1 0A 52 06      jmp _for8_cond ; for continue
0417   06B4 0A B7 06      jmp _if9_exit
0418   06B7             _if9_exit:
0419   06B7 2C FF FF      mov b, [bp + -1] ; x
0420   06BA D7            push a
0421   06BB 11            mov a, b
0422   06BC 2C FB FF      mov b, [bp + -5] ; dx
0423   06BF 54            add a, b
0424   06C0 27            mov b, a
0425   06C1 E4            pop a
0426   06C2 D7            push a
0427   06C3 11            mov a, b
0428   06C4 45 F7 FF      mov [bp + -9], a ; nx
0429   06C7 E4            pop a
0430   06C8 2C FD FF      mov b, [bp + -3] ; y
0431   06CB D7            push a
0432   06CC 11            mov a, b
0433   06CD 2C F9 FF      mov b, [bp + -7] ; dy
0434   06D0 54            add a, b
0435   06D1 27            mov b, a
0436   06D2 E4            pop a
0437   06D3 D7            push a
0438   06D4 11            mov a, b
0439   06D5 45 F5 FF      mov [bp + -11], a ; ny
0440   06D8 E4            pop a
0441   06D9             _if10_cond:
0442   06D9 2C F7 FF      mov b, [bp + -9] ; nx
0443   06DC D7            push a
0444   06DD 11            mov a, b
0445   06DE 26 00 00      mov b, 0
0446   06E1 B0            cmp a, b
0447   06E2 0E            lodflgs
0448   06E3 2F            mov bl, al
0449   06E4 FD A2 03      shr al, 3
0450   06E7 FD A4 02      shr bl, 2
0451   06EA FD 87 01      and bl, %00000001
0452   06ED 90            xor al, bl
0453   06EE 8F 01         xor al, %00000001 ; >= (signed)
0454   06F0 22 00         mov ah, 0
0455   06F2 27            mov b, a
0456   06F3 E4            pop a
0457   06F4 DB            push al
0458   06F5 C0 00 00      cmp b, 0
0459   06F8 0E            lodflgs ; transform condition into a single bit
0460   06F9 2C F7 FF      mov b, [bp + -9] ; nx
0461   06FC D7            push a
0462   06FD 11            mov a, b
0463   06FE 26 28 00      mov b, 40
0464   0701 B0            cmp a, b
0465   0702 0E            lodflgs
0466   0703 2F            mov bl, al
0467   0704 FD A2 03      shr al, 3
0468   0707 FD A4 02      shr bl, 2
0469   070A FD 87 01      and bl, %00000001
0470   070D 90            xor al, bl ; < (signed)
0471   070E 22 00         mov ah, 0
0472   0710 27            mov b, a
0473   0711 E4            pop a
0474   0712 DB            push al
0475   0713 C0 00 00      cmp b, 0
0476   0716 0E            lodflgs
0477   0717 EA            pop bl ; matches previous 'push al'
0478   0718 8C            or al, bl
0479   0719 8F 01         xor al, %00000001
0480   071B 2F            mov bl, al
0481   071C A7 00         mov bh, 0
0482   071E E8            pop al
0483   071F DB            push al
0484   0720 C0 00 00      cmp b, 0
0485   0723 0E            lodflgs ; transform condition into a single bit
0486   0724 2C F5 FF      mov b, [bp + -11] ; ny
0487   0727 D7            push a
0488   0728 11            mov a, b
0489   0729 26 00 00      mov b, 0
0490   072C B0            cmp a, b
0491   072D 0E            lodflgs
0492   072E 2F            mov bl, al
0493   072F FD A2 03      shr al, 3
0494   0732 FD A4 02      shr bl, 2
0495   0735 FD 87 01      and bl, %00000001
0496   0738 90            xor al, bl
0497   0739 8F 01         xor al, %00000001 ; >= (signed)
0498   073B 22 00         mov ah, 0
0499   073D 27            mov b, a
0500   073E E4            pop a
0501   073F DB            push al
0502   0740 C0 00 00      cmp b, 0
0503   0743 0E            lodflgs
0504   0744 EA            pop bl ; matches previous 'push al'
0505   0745 8C            or al, bl
0506   0746 8F 01         xor al, %00000001
0507   0748 2F            mov bl, al
0508   0749 A7 00         mov bh, 0
0509   074B E8            pop al
0510   074C DB            push al
0511   074D C0 00 00      cmp b, 0
0512   0750 0E            lodflgs ; transform condition into a single bit
0513   0751 2C F5 FF      mov b, [bp + -11] ; ny
0514   0754 D7            push a
0515   0755 11            mov a, b
0516   0756 26 14 00      mov b, 20
0517   0759 B0            cmp a, b
0518   075A 0E            lodflgs
0519   075B 2F            mov bl, al
0520   075C FD A2 03      shr al, 3
0521   075F FD A4 02      shr bl, 2
0522   0762 FD 87 01      and bl, %00000001
0523   0765 90            xor al, bl ; < (signed)
0524   0766 22 00         mov ah, 0
0525   0768 27            mov b, a
0526   0769 E4            pop a
0527   076A DB            push al
0528   076B C0 00 00      cmp b, 0
0529   076E 0E            lodflgs
0530   076F EA            pop bl ; matches previous 'push al'
0531   0770 8C            or al, bl
0532   0771 8F 01         xor al, %00000001
0533   0773 2F            mov bl, al
0534   0774 A7 00         mov bh, 0
0535   0776 E8            pop al
0536   0777 DB            push al
0537   0778 C0 00 00      cmp b, 0
0538   077B 0E            lodflgs ; transform condition into a single bit
0539   077C 29 F2 0F      mov b, [__grid] ; grid
0540   077F D7            push a
0541   0780 74            mov d, b
0542   0781 DA            push d
0543   0782 2C F5 FF      mov b, [bp + -11] ; ny
0544   0785 E7            pop d
0545   0786 10 50 00      mov a, 80
0546   0789 AC            mul a, b
0547   078A 5A            add d, b
0548   078B DA            push d
0549   078C 2C F7 FF      mov b, [bp + -9] ; nx
0550   078F E7            pop d
0551   0790 10 02 00      mov a, 2
0552   0793 AC            mul a, b
0553   0794 5A            add d, b
0554   0795 E4            pop a
0555   0796 2A            mov b, [d]
0556   0797 D7            push a
0557   0798 11            mov a, b
0558   0799 26 02 00      mov b, 2; ELECTRON_HEAD
0559   079C B0            cmp a, b
0560   079D 0E            lodflgs
0561   079E 87 01         and al, %00000001 ; ==
0562   07A0 22 00         mov ah, 0
0563   07A2 27            mov b, a
0564   07A3 E4            pop a
0565   07A4 DB            push al
0566   07A5 C0 00 00      cmp b, 0
0567   07A8 0E            lodflgs
0568   07A9 EA            pop bl ; matches previous 'push al'
0569   07AA 8C            or al, bl
0570   07AB 8F 01         xor al, %00000001
0571   07AD 2F            mov bl, al
0572   07AE A7 00         mov bh, 0
0573   07B0 E8            pop al
0574   07B1 C0 00 00      cmp b, 0
0575   07B4 C6 C5 07      je _if10_exit
0576   07B7             _if10_true:
0577   07B7 2C F3 FF      mov b, [bp + -13] ; head_count
0578   07BA FD 77         inc b
0579   07BC D7            push a
0580   07BD 11            mov a, b
0581   07BE 45 F3 FF      mov [bp + -13], a ; head_count
0582   07C1 E4            pop a
0583   07C2 0A C5 07      jmp _if10_exit
0584   07C5             _if10_exit:
0585   07C5             _for8_update:
0586   07C5 2C FB FF      mov b, [bp + -5] ; dx
0587   07C8 FD 77         inc b
0588   07CA D7            push a
0589   07CB 11            mov a, b
0590   07CC 45 FB FF      mov [bp + -5], a ; dx
0591   07CF E4            pop a
0592   07D0 0A 52 06      jmp _for8_cond
0593   07D3             _for8_exit:
0594   07D3             _for7_update:
0595   07D3 2C F9 FF      mov b, [bp + -7] ; dy
0596   07D6 FD 77         inc b
0597   07D8 D7            push a
0598   07D9 11            mov a, b
0599   07DA 45 F9 FF      mov [bp + -7], a ; dy
0600   07DD E4            pop a
0601   07DE 0A 20 06      jmp _for7_cond
0602   07E1             _for7_exit:
0603   07E1             _switch11_expr:
0604   07E1 29 F2 0F      mov b, [__grid] ; grid
0605   07E4 D7            push a
0606   07E5 74            mov d, b
0607   07E6 DA            push d
0608   07E7 2C FD FF      mov b, [bp + -3] ; y
0609   07EA E7            pop d
0610   07EB 10 50 00      mov a, 80
0611   07EE AC            mul a, b
0612   07EF 5A            add d, b
0613   07F0 DA            push d
0614   07F1 2C FF FF      mov b, [bp + -1] ; x
0615   07F4 E7            pop d
0616   07F5 10 02 00      mov a, 2
0617   07F8 AC            mul a, b
0618   07F9 5A            add d, b
0619   07FA E4            pop a
0620   07FB 2A            mov b, [d]
0621   07FC             _switch11_comparisons:
0622   07FC C6 08 08      je _switch11_case0
0623   07FF C6 2C 08      je _switch11_case1
0624   0802 C6 81 08      je _switch11_case2
0625   0805 C6 A5 08      je _switch11_case3
0626   0808             _switch11_case0:
0627   0808 29 34 16      mov b, [__new_grid] ; new_grid
0628   080B D7            push a
0629   080C 74            mov d, b
0630   080D DA            push d
0631   080E 2C FD FF      mov b, [bp + -3] ; y
0632   0811 E7            pop d
0633   0812 10 50 00      mov a, 80
0634   0815 AC            mul a, b
0635   0816 5A            add d, b
0636   0817 DA            push d
0637   0818 2C FF FF      mov b, [bp + -1] ; x
0638   081B E7            pop d
0639   081C 10 02 00      mov a, 2
0640   081F AC            mul a, b
0641   0820 5A            add d, b
0642   0821 E4            pop a
0643   0822 DA            push d
0644   0823 26 00 00      mov b, 0; EMPTY
0645   0826 E7            pop d
0646   0827 FD 43         mov [d], b
0647   0829 0A C9 08      jmp _switch11_exit ; case break
0648   082C             _switch11_case1:
0649   082C 29 34 16      mov b, [__new_grid] ; new_grid
0650   082F D7            push a
0651   0830 74            mov d, b
0652   0831 DA            push d
0653   0832 2C FD FF      mov b, [bp + -3] ; y
0654   0835 E7            pop d
0655   0836 10 50 00      mov a, 80
0656   0839 AC            mul a, b
0657   083A 5A            add d, b
0658   083B DA            push d
0659   083C 2C FF FF      mov b, [bp + -1] ; x
0660   083F E7            pop d
0661   0840 10 02 00      mov a, 2
0662   0843 AC            mul a, b
0663   0844 5A            add d, b
0664   0845 E4            pop a
0665   0846 DA            push d
0666   0847             _ternary12_cond:
0667   0847 2C F3 FF      mov b, [bp + -13] ; head_count
0668   084A D7            push a
0669   084B 11            mov a, b
0670   084C 26 01 00      mov b, 1
0671   084F B0            cmp a, b
0672   0850 0E            lodflgs
0673   0851 87 01         and al, %00000001 ; ==
0674   0853 22 00         mov ah, 0
0675   0855 27            mov b, a
0676   0856 E4            pop a
0677   0857 D7            push a
0678   0858 11            mov a, b
0679   0859 2C F3 FF      mov b, [bp + -13] ; head_count
0680   085C D7            push a
0681   085D 11            mov a, b
0682   085E 26 02 00      mov b, 2
0683   0861 B0            cmp a, b
0684   0862 0E            lodflgs
0685   0863 87 01         and al, %00000001 ; ==
0686   0865 22 00         mov ah, 0
0687   0867 27            mov b, a
0688   0868 E4            pop a
0689   0869 8A            or a, b
0690   086A 27            mov b, a
0691   086B E4            pop a
0692   086C C0 00 00      cmp b, 0
0693   086F C6 78 08      je _ternary12_false
0694   0872             _ternary12_true:
0695   0872 26 02 00      mov b, 2; ELECTRON_HEAD
0696   0875 0A 7B 08      jmp _ternary12_exit
0697   0878             _ternary12_false:
0698   0878 26 01 00      mov b, 1; CONDUCTOR
0699   087B             _ternary12_exit:
0700   087B E7            pop d
0701   087C FD 43         mov [d], b
0702   087E 0A C9 08      jmp _switch11_exit ; case break
0703   0881             _switch11_case2:
0704   0881 29 34 16      mov b, [__new_grid] ; new_grid
0705   0884 D7            push a
0706   0885 74            mov d, b
0707   0886 DA            push d
0708   0887 2C FD FF      mov b, [bp + -3] ; y
0709   088A E7            pop d
0710   088B 10 50 00      mov a, 80
0711   088E AC            mul a, b
0712   088F 5A            add d, b
0713   0890 DA            push d
0714   0891 2C FF FF      mov b, [bp + -1] ; x
0715   0894 E7            pop d
0716   0895 10 02 00      mov a, 2
0717   0898 AC            mul a, b
0718   0899 5A            add d, b
0719   089A E4            pop a
0720   089B DA            push d
0721   089C 26 03 00      mov b, 3; ELECTRON_TAIL
0722   089F E7            pop d
0723   08A0 FD 43         mov [d], b
0724   08A2 0A C9 08      jmp _switch11_exit ; case break
0725   08A5             _switch11_case3:
0726   08A5 29 34 16      mov b, [__new_grid] ; new_grid
0727   08A8 D7            push a
0728   08A9 74            mov d, b
0729   08AA DA            push d
0730   08AB 2C FD FF      mov b, [bp + -3] ; y
0731   08AE E7            pop d
0732   08AF 10 50 00      mov a, 80
0733   08B2 AC            mul a, b
0734   08B3 5A            add d, b
0735   08B4 DA            push d
0736   08B5 2C FF FF      mov b, [bp + -1] ; x
0737   08B8 E7            pop d
0738   08B9 10 02 00      mov a, 2
0739   08BC AC            mul a, b
0740   08BD 5A            add d, b
0741   08BE E4            pop a
0742   08BF DA            push d
0743   08C0 26 01 00      mov b, 1; CONDUCTOR
0744   08C3 E7            pop d
0745   08C4 FD 43         mov [d], b
0746   08C6 0A C9 08      jmp _switch11_exit ; case break
0747   08C9             _switch11_exit:
0748   08C9             _for6_update:
0749   08C9 2C FF FF      mov b, [bp + -1] ; x
0750   08CC FD 77         inc b
0751   08CE D7            push a
0752   08CF 11            mov a, b
0753   08D0 45 FF FF      mov [bp + -1], a ; x
0754   08D3 E4            pop a
0755   08D4 0A ED 05      jmp _for6_cond
0756   08D7             _for6_exit:
0757   08D7             _for5_update:
0758   08D7 2C FD FF      mov b, [bp + -3] ; y
0759   08DA FD 77         inc b
0760   08DC D7            push a
0761   08DD 11            mov a, b
0762   08DE 45 FD FF      mov [bp + -3], a ; y
0763   08E1 E4            pop a
0764   08E2 0A C5 05      jmp _for5_cond
0765   08E5             _for5_exit:
0766   08E5             _for13_init:
0767   08E5 26 00 00      mov b, 0
0768   08E8 D7            push a
0769   08E9 11            mov a, b
0770   08EA 45 FD FF      mov [bp + -3], a ; y
0771   08ED E4            pop a
0772   08EE             _for13_cond:
0773   08EE 2C FD FF      mov b, [bp + -3] ; y
0774   08F1 D7            push a
0775   08F2 11            mov a, b
0776   08F3 26 14 00      mov b, 20
0777   08F6 B0            cmp a, b
0778   08F7 0E            lodflgs
0779   08F8 2F            mov bl, al
0780   08F9 FD A2 03      shr al, 3
0781   08FC FD A4 02      shr bl, 2
0782   08FF FD 87 01      and bl, %00000001
0783   0902 90            xor al, bl ; < (signed)
0784   0903 22 00         mov ah, 0
0785   0905 27            mov b, a
0786   0906 E4            pop a
0787   0907 C0 00 00      cmp b, 0
0788   090A C6 8A 09      je _for13_exit
0789   090D             _for13_block:
0790   090D             _for14_init:
0791   090D 26 00 00      mov b, 0
0792   0910 D7            push a
0793   0911 11            mov a, b
0794   0912 45 FF FF      mov [bp + -1], a ; x
0795   0915 E4            pop a
0796   0916             _for14_cond:
0797   0916 2C FF FF      mov b, [bp + -1] ; x
0798   0919 D7            push a
0799   091A 11            mov a, b
0800   091B 26 28 00      mov b, 40
0801   091E B0            cmp a, b
0802   091F 0E            lodflgs
0803   0920 2F            mov bl, al
0804   0921 FD A2 03      shr al, 3
0805   0924 FD A4 02      shr bl, 2
0806   0927 FD 87 01      and bl, %00000001
0807   092A 90            xor al, bl ; < (signed)
0808   092B 22 00         mov ah, 0
0809   092D 27            mov b, a
0810   092E E4            pop a
0811   092F C0 00 00      cmp b, 0
0812   0932 C6 7C 09      je _for14_exit
0813   0935             _for14_block:
0814   0935 29 F2 0F      mov b, [__grid] ; grid
0815   0938 D7            push a
0816   0939 74            mov d, b
0817   093A DA            push d
0818   093B 2C FD FF      mov b, [bp + -3] ; y
0819   093E E7            pop d
0820   093F 10 50 00      mov a, 80
0821   0942 AC            mul a, b
0822   0943 5A            add d, b
0823   0944 DA            push d
0824   0945 2C FF FF      mov b, [bp + -1] ; x
0825   0948 E7            pop d
0826   0949 10 02 00      mov a, 2
0827   094C AC            mul a, b
0828   094D 5A            add d, b
0829   094E E4            pop a
0830   094F DA            push d
0831   0950 29 34 16      mov b, [__new_grid] ; new_grid
0832   0953 D7            push a
0833   0954 74            mov d, b
0834   0955 DA            push d
0835   0956 2C FD FF      mov b, [bp + -3] ; y
0836   0959 E7            pop d
0837   095A 10 50 00      mov a, 80
0838   095D AC            mul a, b
0839   095E 5A            add d, b
0840   095F DA            push d
0841   0960 2C FF FF      mov b, [bp + -1] ; x
0842   0963 E7            pop d
0843   0964 10 02 00      mov a, 2
0844   0967 AC            mul a, b
0845   0968 5A            add d, b
0846   0969 E4            pop a
0847   096A 2A            mov b, [d]
0848   096B E7            pop d
0849   096C FD 43         mov [d], b
0850   096E             _for14_update:
0851   096E 2C FF FF      mov b, [bp + -1] ; x
0852   0971 FD 77         inc b
0853   0973 D7            push a
0854   0974 11            mov a, b
0855   0975 45 FF FF      mov [bp + -1], a ; x
0856   0978 E4            pop a
0857   0979 0A 16 09      jmp _for14_cond
0858   097C             _for14_exit:
0859   097C             _for13_update:
0860   097C 2C FD FF      mov b, [bp + -3] ; y
0861   097F FD 77         inc b
0862   0981 D7            push a
0863   0982 11            mov a, b
0864   0983 45 FD FF      mov [bp + -3], a ; y
0865   0986 E4            pop a
0866   0987 0A EE 08      jmp _for13_cond
0867   098A             _for13_exit:
0868   098A F9            leave
0869   098B 09            ret
0870   098C             
0871   098C             _putchar:
0872   098C D2            push bp
0873   098D 9B            mov bp, sp
0874   098E             
0875   098E             ; --- BEGIN INLINE ASM BLOCK
0876   098E 20 05 00      mov al, [bp + 5]
0877   0991 23            mov ah, al
0878   0992 07 48 17      call putchar
0879   0995             ; --- END INLINE ASM BLOCK
0880   0995             
0881   0995 F9            leave
0882   0996 09            ret
0883   0997             
0884   0997             scann:
0885   0997 D2            push bp
0886   0998 9B            mov bp, sp
0887   0999 52 02 00      sub sp, 2 ; m
0888   099C             
0889   099C             ; --- BEGIN INLINE ASM BLOCK
0890   099C 07 80 19      call scan_u16d
0891   099F 45 FF FF      mov [bp + -1], a
0892   09A2             ; --- END INLINE ASM BLOCK
0893   09A2             
0894   09A2 2C FF FF      mov b, [bp + -1] ; m
0895   09A5 F9            leave
0896   09A6 09            ret
0897   09A7             
0898   09A7             print:
0899   09A7 D2            push bp
0900   09A8 9B            mov bp, sp
0901   09A9             
0902   09A9             ; --- BEGIN INLINE ASM BLOCK
0903   09A9 17 05 00      mov a, [bp + 5]
0904   09AC 3C            mov d, a
0905   09AD 07 82 18      call puts
0906   09B0             ; --- END INLINE ASM BLOCK
0907   09B0             
0908   09B0 F9            leave
0909   09B1 09            ret
0910   09B2             ; --- END TEXT BLOCK
0911   09B2             
0912   09B2             ; --- BEGIN DATA BLOCK
0913   09B2 00 00 00 00 __grid_data: .fill 1600, 0
0913   09B6 00 00 00 00 
0913   09BA 00 00 00 00 
0913   09BE 00 00 00 00 
0913   09C2 00 00 00 00 
0913   09C6 00 00 00 00 
0913   09CA 00 00 00 00 
0913   09CE 00 00 00 00 
0913   09D2 00 00 00 00 
0913   09D6 00 00 00 00 
0913   09DA 00 00 00 00 
0913   09DE 00 00 00 00 
0913   09E2 00 00 00 00 
0913   09E6 00 00 00 00 
0913   09EA 00 00 00 00 
0913   09EE 00 00 00 00 
0913   09F2 00 00 00 00 
0913   09F6 00 00 00 00 
0913   09FA 00 00 00 00 
0913   09FE 00 00 00 00 
0913   0A02 00 00 00 00 
0913   0A06 00 00 00 00 
0913   0A0A 00 00 00 00 
0913   0A0E 00 00 00 00 
0913   0A12 00 00 00 00 
0913   0A16 00 00 00 00 
0913   0A1A 00 00 00 00 
0913   0A1E 00 00 00 00 
0913   0A22 00 00 00 00 
0913   0A26 00 00 00 00 
0913   0A2A 00 00 00 00 
0913   0A2E 00 00 00 00 
0913   0A32 00 00 00 00 
0913   0A36 00 00 00 00 
0913   0A3A 00 00 00 00 
0913   0A3E 00 00 00 00 
0913   0A42 00 00 00 00 
0913   0A46 00 00 00 00 
0913   0A4A 00 00 00 00 
0913   0A4E 00 00 00 00 
0913   0A52 00 00 00 00 
0913   0A56 00 00 00 00 
0913   0A5A 00 00 00 00 
0913   0A5E 00 00 00 00 
0913   0A62 00 00 00 00 
0913   0A66 00 00 00 00 
0913   0A6A 00 00 00 00 
0913   0A6E 00 00 00 00 
0913   0A72 00 00 00 00 
0913   0A76 00 00 00 00 
0913   0A7A 00 00 00 00 
0913   0A7E 00 00 00 00 
0913   0A82 00 00 00 00 
0913   0A86 00 00 00 00 
0913   0A8A 00 00 00 00 
0913   0A8E 00 00 00 00 
0913   0A92 00 00 00 00 
0913   0A96 00 00 00 00 
0913   0A9A 00 00 00 00 
0913   0A9E 00 00 00 00 
0913   0AA2 00 00 00 00 
0913   0AA6 00 00 00 00 
0913   0AAA 00 00 00 00 
0913   0AAE 00 00 00 00 
0913   0AB2 00 00 00 00 
0913   0AB6 00 00 00 00 
0913   0ABA 00 00 00 00 
0913   0ABE 00 00 00 00 
0913   0AC2 00 00 00 00 
0913   0AC6 00 00 00 00 
0913   0ACA 00 00 00 00 
0913   0ACE 00 00 00 00 
0913   0AD2 00 00 00 00 
0913   0AD6 00 00 00 00 
0913   0ADA 00 00 00 00 
0913   0ADE 00 00 00 00 
0913   0AE2 00 00 00 00 
0913   0AE6 00 00 00 00 
0913   0AEA 00 00 00 00 
0913   0AEE 00 00 00 00 
0913   0AF2 00 00 00 00 
0913   0AF6 00 00 00 00 
0913   0AFA 00 00 00 00 
0913   0AFE 00 00 00 00 
0913   0B02 00 00 00 00 
0913   0B06 00 00 00 00 
0913   0B0A 00 00 00 00 
0913   0B0E 00 00 00 00 
0913   0B12 00 00 00 00 
0913   0B16 00 00 00 00 
0913   0B1A 00 00 00 00 
0913   0B1E 00 00 00 00 
0913   0B22 00 00 00 00 
0913   0B26 00 00 00 00 
0913   0B2A 00 00 00 00 
0913   0B2E 00 00 00 00 
0913   0B32 00 00 00 00 
0913   0B36 00 00 00 00 
0913   0B3A 00 00 00 00 
0913   0B3E 00 00 00 00 
0913   0B42 00 00 00 00 
0913   0B46 00 00 00 00 
0913   0B4A 00 00 00 00 
0913   0B4E 00 00 00 00 
0913   0B52 00 00 00 00 
0913   0B56 00 00 00 00 
0913   0B5A 00 00 00 00 
0913   0B5E 00 00 00 00 
0913   0B62 00 00 00 00 
0913   0B66 00 00 00 00 
0913   0B6A 00 00 00 00 
0913   0B6E 00 00 00 00 
0913   0B72 00 00 00 00 
0913   0B76 00 00 00 00 
0913   0B7A 00 00 00 00 
0913   0B7E 00 00 00 00 
0913   0B82 00 00 00 00 
0913   0B86 00 00 00 00 
0913   0B8A 00 00 00 00 
0913   0B8E 00 00 00 00 
0913   0B92 00 00 00 00 
0913   0B96 00 00 00 00 
0913   0B9A 00 00 00 00 
0913   0B9E 00 00 00 00 
0913   0BA2 00 00 00 00 
0913   0BA6 00 00 00 00 
0913   0BAA 00 00 00 00 
0913   0BAE 00 00 00 00 
0913   0BB2 00 00 00 00 
0913   0BB6 00 00 00 00 
0913   0BBA 00 00 00 00 
0913   0BBE 00 00 00 00 
0913   0BC2 00 00 00 00 
0913   0BC6 00 00 00 00 
0913   0BCA 00 00 00 00 
0913   0BCE 00 00 00 00 
0913   0BD2 00 00 00 00 
0913   0BD6 00 00 00 00 
0913   0BDA 00 00 00 00 
0913   0BDE 00 00 00 00 
0913   0BE2 00 00 00 00 
0913   0BE6 00 00 00 00 
0913   0BEA 00 00 00 00 
0913   0BEE 00 00 00 00 
0913   0BF2 00 00 00 00 
0913   0BF6 00 00 00 00 
0913   0BFA 00 00 00 00 
0913   0BFE 00 00 00 00 
0913   0C02 00 00 00 00 
0913   0C06 00 00 00 00 
0913   0C0A 00 00 00 00 
0913   0C0E 00 00 00 00 
0913   0C12 00 00 00 00 
0913   0C16 00 00 00 00 
0913   0C1A 00 00 00 00 
0913   0C1E 00 00 00 00 
0913   0C22 00 00 00 00 
0913   0C26 00 00 00 00 
0913   0C2A 00 00 00 00 
0913   0C2E 00 00 00 00 
0913   0C32 00 00 00 00 
0913   0C36 00 00 00 00 
0913   0C3A 00 00 00 00 
0913   0C3E 00 00 00 00 
0913   0C42 00 00 00 00 
0913   0C46 00 00 00 00 
0913   0C4A 00 00 00 00 
0913   0C4E 00 00 00 00 
0913   0C52 00 00 00 00 
0913   0C56 00 00 00 00 
0913   0C5A 00 00 00 00 
0913   0C5E 00 00 00 00 
0913   0C62 00 00 00 00 
0913   0C66 00 00 00 00 
0913   0C6A 00 00 00 00 
0913   0C6E 00 00 00 00 
0913   0C72 00 00 00 00 
0913   0C76 00 00 00 00 
0913   0C7A 00 00 00 00 
0913   0C7E 00 00 00 00 
0913   0C82 00 00 00 00 
0913   0C86 00 00 00 00 
0913   0C8A 00 00 00 00 
0913   0C8E 00 00 00 00 
0913   0C92 00 00 00 00 
0913   0C96 00 00 00 00 
0913   0C9A 00 00 00 00 
0913   0C9E 00 00 00 00 
0913   0CA2 00 00 00 00 
0913   0CA6 00 00 00 00 
0913   0CAA 00 00 00 00 
0913   0CAE 00 00 00 00 
0913   0CB2 00 00 00 00 
0913   0CB6 00 00 00 00 
0913   0CBA 00 00 00 00 
0913   0CBE 00 00 00 00 
0913   0CC2 00 00 00 00 
0913   0CC6 00 00 00 00 
0913   0CCA 00 00 00 00 
0913   0CCE 00 00 00 00 
0913   0CD2 00 00 00 00 
0913   0CD6 00 00 00 00 
0913   0CDA 00 00 00 00 
0913   0CDE 00 00 00 00 
0913   0CE2 00 00 00 00 
0913   0CE6 00 00 00 00 
0913   0CEA 00 00 00 00 
0913   0CEE 00 00 00 00 
0913   0CF2 00 00 00 00 
0913   0CF6 00 00 00 00 
0913   0CFA 00 00 00 00 
0913   0CFE 00 00 00 00 
0913   0D02 00 00 00 00 
0913   0D06 00 00 00 00 
0913   0D0A 00 00 00 00 
0913   0D0E 00 00 00 00 
0913   0D12 00 00 00 00 
0913   0D16 00 00 00 00 
0913   0D1A 00 00 00 00 
0913   0D1E 00 00 00 00 
0913   0D22 00 00 00 00 
0913   0D26 00 00 00 00 
0913   0D2A 00 00 00 00 
0913   0D2E 00 00 00 00 
0913   0D32 00 00 00 00 
0913   0D36 00 00 00 00 
0913   0D3A 00 00 00 00 
0913   0D3E 00 00 00 00 
0913   0D42 00 00 00 00 
0913   0D46 00 00 00 00 
0913   0D4A 00 00 00 00 
0913   0D4E 00 00 00 00 
0913   0D52 00 00 00 00 
0913   0D56 00 00 00 00 
0913   0D5A 00 00 00 00 
0913   0D5E 00 00 00 00 
0913   0D62 00 00 00 00 
0913   0D66 00 00 00 00 
0913   0D6A 00 00 00 00 
0913   0D6E 00 00 00 00 
0913   0D72 00 00 00 00 
0913   0D76 00 00 00 00 
0913   0D7A 00 00 00 00 
0913   0D7E 00 00 00 00 
0913   0D82 00 00 00 00 
0913   0D86 00 00 00 00 
0913   0D8A 00 00 00 00 
0913   0D8E 00 00 00 00 
0913   0D92 00 00 00 00 
0913   0D96 00 00 00 00 
0913   0D9A 00 00 00 00 
0913   0D9E 00 00 00 00 
0913   0DA2 00 00 00 00 
0913   0DA6 00 00 00 00 
0913   0DAA 00 00 00 00 
0913   0DAE 00 00 00 00 
0913   0DB2 00 00 00 00 
0913   0DB6 00 00 00 00 
0913   0DBA 00 00 00 00 
0913   0DBE 00 00 00 00 
0913   0DC2 00 00 00 00 
0913   0DC6 00 00 00 00 
0913   0DCA 00 00 00 00 
0913   0DCE 00 00 00 00 
0913   0DD2 00 00 00 00 
0913   0DD6 00 00 00 00 
0913   0DDA 00 00 00 00 
0913   0DDE 00 00 00 00 
0913   0DE2 00 00 00 00 
0913   0DE6 00 00 00 00 
0913   0DEA 00 00 00 00 
0913   0DEE 00 00 00 00 
0913   0DF2 00 00 00 00 
0913   0DF6 00 00 00 00 
0913   0DFA 00 00 00 00 
0913   0DFE 00 00 00 00 
0913   0E02 00 00 00 00 
0913   0E06 00 00 00 00 
0913   0E0A 00 00 00 00 
0913   0E0E 00 00 00 00 
0913   0E12 00 00 00 00 
0913   0E16 00 00 00 00 
0913   0E1A 00 00 00 00 
0913   0E1E 00 00 00 00 
0913   0E22 00 00 00 00 
0913   0E26 00 00 00 00 
0913   0E2A 00 00 00 00 
0913   0E2E 00 00 00 00 
0913   0E32 00 00 00 00 
0913   0E36 00 00 00 00 
0913   0E3A 00 00 00 00 
0913   0E3E 00 00 00 00 
0913   0E42 00 00 00 00 
0913   0E46 00 00 00 00 
0913   0E4A 00 00 00 00 
0913   0E4E 00 00 00 00 
0913   0E52 00 00 00 00 
0913   0E56 00 00 00 00 
0913   0E5A 00 00 00 00 
0913   0E5E 00 00 00 00 
0913   0E62 00 00 00 00 
0913   0E66 00 00 00 00 
0913   0E6A 00 00 00 00 
0913   0E6E 00 00 00 00 
0913   0E72 00 00 00 00 
0913   0E76 00 00 00 00 
0913   0E7A 00 00 00 00 
0913   0E7E 00 00 00 00 
0913   0E82 00 00 00 00 
0913   0E86 00 00 00 00 
0913   0E8A 00 00 00 00 
0913   0E8E 00 00 00 00 
0913   0E92 00 00 00 00 
0913   0E96 00 00 00 00 
0913   0E9A 00 00 00 00 
0913   0E9E 00 00 00 00 
0913   0EA2 00 00 00 00 
0913   0EA6 00 00 00 00 
0913   0EAA 00 00 00 00 
0913   0EAE 00 00 00 00 
0913   0EB2 00 00 00 00 
0913   0EB6 00 00 00 00 
0913   0EBA 00 00 00 00 
0913   0EBE 00 00 00 00 
0913   0EC2 00 00 00 00 
0913   0EC6 00 00 00 00 
0913   0ECA 00 00 00 00 
0913   0ECE 00 00 00 00 
0913   0ED2 00 00 00 00 
0913   0ED6 00 00 00 00 
0913   0EDA 00 00 00 00 
0913   0EDE 00 00 00 00 
0913   0EE2 00 00 00 00 
0913   0EE6 00 00 00 00 
0913   0EEA 00 00 00 00 
0913   0EEE 00 00 00 00 
0913   0EF2 00 00 00 00 
0913   0EF6 00 00 00 00 
0913   0EFA 00 00 00 00 
0913   0EFE 00 00 00 00 
0913   0F02 00 00 00 00 
0913   0F06 00 00 00 00 
0913   0F0A 00 00 00 00 
0913   0F0E 00 00 00 00 
0913   0F12 00 00 00 00 
0913   0F16 00 00 00 00 
0913   0F1A 00 00 00 00 
0913   0F1E 00 00 00 00 
0913   0F22 00 00 00 00 
0913   0F26 00 00 00 00 
0913   0F2A 00 00 00 00 
0913   0F2E 00 00 00 00 
0913   0F32 00 00 00 00 
0913   0F36 00 00 00 00 
0913   0F3A 00 00 00 00 
0913   0F3E 00 00 00 00 
0913   0F42 00 00 00 00 
0913   0F46 00 00 00 00 
0913   0F4A 00 00 00 00 
0913   0F4E 00 00 00 00 
0913   0F52 00 00 00 00 
0913   0F56 00 00 00 00 
0913   0F5A 00 00 00 00 
0913   0F5E 00 00 00 00 
0913   0F62 00 00 00 00 
0913   0F66 00 00 00 00 
0913   0F6A 00 00 00 00 
0913   0F6E 00 00 00 00 
0913   0F72 00 00 00 00 
0913   0F76 00 00 00 00 
0913   0F7A 00 00 00 00 
0913   0F7E 00 00 00 00 
0913   0F82 00 00 00 00 
0913   0F86 00 00 00 00 
0913   0F8A 00 00 00 00 
0913   0F8E 00 00 00 00 
0913   0F92 00 00 00 00 
0913   0F96 00 00 00 00 
0913   0F9A 00 00 00 00 
0913   0F9E 00 00 00 00 
0913   0FA2 00 00 00 00 
0913   0FA6 00 00 00 00 
0913   0FAA 00 00 00 00 
0913   0FAE 00 00 00 00 
0913   0FB2 00 00 00 00 
0913   0FB6 00 00 00 00 
0913   0FBA 00 00 00 00 
0913   0FBE 00 00 00 00 
0913   0FC2 00 00 00 00 
0913   0FC6 00 00 00 00 
0913   0FCA 00 00 00 00 
0913   0FCE 00 00 00 00 
0913   0FD2 00 00 00 00 
0913   0FD6 00 00 00 00 
0913   0FDA 00 00 00 00 
0913   0FDE 00 00 00 00 
0913   0FE2 00 00 00 00 
0913   0FE6 00 00 00 00 
0913   0FEA 00 00 00 00 
0913   0FEE 00 00 00 00 
0914   0FF2 B2 09       __grid: .dw __grid_data
0915   0FF4 00 00 00 00 __new_grid_data: .fill 1600, 0
0915   0FF8 00 00 00 00 
0915   0FFC 00 00 00 00 
0915   1000 00 00 00 00 
0915   1004 00 00 00 00 
0915   1008 00 00 00 00 
0915   100C 00 00 00 00 
0915   1010 00 00 00 00 
0915   1014 00 00 00 00 
0915   1018 00 00 00 00 
0915   101C 00 00 00 00 
0915   1020 00 00 00 00 
0915   1024 00 00 00 00 
0915   1028 00 00 00 00 
0915   102C 00 00 00 00 
0915   1030 00 00 00 00 
0915   1034 00 00 00 00 
0915   1038 00 00 00 00 
0915   103C 00 00 00 00 
0915   1040 00 00 00 00 
0915   1044 00 00 00 00 
0915   1048 00 00 00 00 
0915   104C 00 00 00 00 
0915   1050 00 00 00 00 
0915   1054 00 00 00 00 
0915   1058 00 00 00 00 
0915   105C 00 00 00 00 
0915   1060 00 00 00 00 
0915   1064 00 00 00 00 
0915   1068 00 00 00 00 
0915   106C 00 00 00 00 
0915   1070 00 00 00 00 
0915   1074 00 00 00 00 
0915   1078 00 00 00 00 
0915   107C 00 00 00 00 
0915   1080 00 00 00 00 
0915   1084 00 00 00 00 
0915   1088 00 00 00 00 
0915   108C 00 00 00 00 
0915   1090 00 00 00 00 
0915   1094 00 00 00 00 
0915   1098 00 00 00 00 
0915   109C 00 00 00 00 
0915   10A0 00 00 00 00 
0915   10A4 00 00 00 00 
0915   10A8 00 00 00 00 
0915   10AC 00 00 00 00 
0915   10B0 00 00 00 00 
0915   10B4 00 00 00 00 
0915   10B8 00 00 00 00 
0915   10BC 00 00 00 00 
0915   10C0 00 00 00 00 
0915   10C4 00 00 00 00 
0915   10C8 00 00 00 00 
0915   10CC 00 00 00 00 
0915   10D0 00 00 00 00 
0915   10D4 00 00 00 00 
0915   10D8 00 00 00 00 
0915   10DC 00 00 00 00 
0915   10E0 00 00 00 00 
0915   10E4 00 00 00 00 
0915   10E8 00 00 00 00 
0915   10EC 00 00 00 00 
0915   10F0 00 00 00 00 
0915   10F4 00 00 00 00 
0915   10F8 00 00 00 00 
0915   10FC 00 00 00 00 
0915   1100 00 00 00 00 
0915   1104 00 00 00 00 
0915   1108 00 00 00 00 
0915   110C 00 00 00 00 
0915   1110 00 00 00 00 
0915   1114 00 00 00 00 
0915   1118 00 00 00 00 
0915   111C 00 00 00 00 
0915   1120 00 00 00 00 
0915   1124 00 00 00 00 
0915   1128 00 00 00 00 
0915   112C 00 00 00 00 
0915   1130 00 00 00 00 
0915   1134 00 00 00 00 
0915   1138 00 00 00 00 
0915   113C 00 00 00 00 
0915   1140 00 00 00 00 
0915   1144 00 00 00 00 
0915   1148 00 00 00 00 
0915   114C 00 00 00 00 
0915   1150 00 00 00 00 
0915   1154 00 00 00 00 
0915   1158 00 00 00 00 
0915   115C 00 00 00 00 
0915   1160 00 00 00 00 
0915   1164 00 00 00 00 
0915   1168 00 00 00 00 
0915   116C 00 00 00 00 
0915   1170 00 00 00 00 
0915   1174 00 00 00 00 
0915   1178 00 00 00 00 
0915   117C 00 00 00 00 
0915   1180 00 00 00 00 
0915   1184 00 00 00 00 
0915   1188 00 00 00 00 
0915   118C 00 00 00 00 
0915   1190 00 00 00 00 
0915   1194 00 00 00 00 
0915   1198 00 00 00 00 
0915   119C 00 00 00 00 
0915   11A0 00 00 00 00 
0915   11A4 00 00 00 00 
0915   11A8 00 00 00 00 
0915   11AC 00 00 00 00 
0915   11B0 00 00 00 00 
0915   11B4 00 00 00 00 
0915   11B8 00 00 00 00 
0915   11BC 00 00 00 00 
0915   11C0 00 00 00 00 
0915   11C4 00 00 00 00 
0915   11C8 00 00 00 00 
0915   11CC 00 00 00 00 
0915   11D0 00 00 00 00 
0915   11D4 00 00 00 00 
0915   11D8 00 00 00 00 
0915   11DC 00 00 00 00 
0915   11E0 00 00 00 00 
0915   11E4 00 00 00 00 
0915   11E8 00 00 00 00 
0915   11EC 00 00 00 00 
0915   11F0 00 00 00 00 
0915   11F4 00 00 00 00 
0915   11F8 00 00 00 00 
0915   11FC 00 00 00 00 
0915   1200 00 00 00 00 
0915   1204 00 00 00 00 
0915   1208 00 00 00 00 
0915   120C 00 00 00 00 
0915   1210 00 00 00 00 
0915   1214 00 00 00 00 
0915   1218 00 00 00 00 
0915   121C 00 00 00 00 
0915   1220 00 00 00 00 
0915   1224 00 00 00 00 
0915   1228 00 00 00 00 
0915   122C 00 00 00 00 
0915   1230 00 00 00 00 
0915   1234 00 00 00 00 
0915   1238 00 00 00 00 
0915   123C 00 00 00 00 
0915   1240 00 00 00 00 
0915   1244 00 00 00 00 
0915   1248 00 00 00 00 
0915   124C 00 00 00 00 
0915   1250 00 00 00 00 
0915   1254 00 00 00 00 
0915   1258 00 00 00 00 
0915   125C 00 00 00 00 
0915   1260 00 00 00 00 
0915   1264 00 00 00 00 
0915   1268 00 00 00 00 
0915   126C 00 00 00 00 
0915   1270 00 00 00 00 
0915   1274 00 00 00 00 
0915   1278 00 00 00 00 
0915   127C 00 00 00 00 
0915   1280 00 00 00 00 
0915   1284 00 00 00 00 
0915   1288 00 00 00 00 
0915   128C 00 00 00 00 
0915   1290 00 00 00 00 
0915   1294 00 00 00 00 
0915   1298 00 00 00 00 
0915   129C 00 00 00 00 
0915   12A0 00 00 00 00 
0915   12A4 00 00 00 00 
0915   12A8 00 00 00 00 
0915   12AC 00 00 00 00 
0915   12B0 00 00 00 00 
0915   12B4 00 00 00 00 
0915   12B8 00 00 00 00 
0915   12BC 00 00 00 00 
0915   12C0 00 00 00 00 
0915   12C4 00 00 00 00 
0915   12C8 00 00 00 00 
0915   12CC 00 00 00 00 
0915   12D0 00 00 00 00 
0915   12D4 00 00 00 00 
0915   12D8 00 00 00 00 
0915   12DC 00 00 00 00 
0915   12E0 00 00 00 00 
0915   12E4 00 00 00 00 
0915   12E8 00 00 00 00 
0915   12EC 00 00 00 00 
0915   12F0 00 00 00 00 
0915   12F4 00 00 00 00 
0915   12F8 00 00 00 00 
0915   12FC 00 00 00 00 
0915   1300 00 00 00 00 
0915   1304 00 00 00 00 
0915   1308 00 00 00 00 
0915   130C 00 00 00 00 
0915   1310 00 00 00 00 
0915   1314 00 00 00 00 
0915   1318 00 00 00 00 
0915   131C 00 00 00 00 
0915   1320 00 00 00 00 
0915   1324 00 00 00 00 
0915   1328 00 00 00 00 
0915   132C 00 00 00 00 
0915   1330 00 00 00 00 
0915   1334 00 00 00 00 
0915   1338 00 00 00 00 
0915   133C 00 00 00 00 
0915   1340 00 00 00 00 
0915   1344 00 00 00 00 
0915   1348 00 00 00 00 
0915   134C 00 00 00 00 
0915   1350 00 00 00 00 
0915   1354 00 00 00 00 
0915   1358 00 00 00 00 
0915   135C 00 00 00 00 
0915   1360 00 00 00 00 
0915   1364 00 00 00 00 
0915   1368 00 00 00 00 
0915   136C 00 00 00 00 
0915   1370 00 00 00 00 
0915   1374 00 00 00 00 
0915   1378 00 00 00 00 
0915   137C 00 00 00 00 
0915   1380 00 00 00 00 
0915   1384 00 00 00 00 
0915   1388 00 00 00 00 
0915   138C 00 00 00 00 
0915   1390 00 00 00 00 
0915   1394 00 00 00 00 
0915   1398 00 00 00 00 
0915   139C 00 00 00 00 
0915   13A0 00 00 00 00 
0915   13A4 00 00 00 00 
0915   13A8 00 00 00 00 
0915   13AC 00 00 00 00 
0915   13B0 00 00 00 00 
0915   13B4 00 00 00 00 
0915   13B8 00 00 00 00 
0915   13BC 00 00 00 00 
0915   13C0 00 00 00 00 
0915   13C4 00 00 00 00 
0915   13C8 00 00 00 00 
0915   13CC 00 00 00 00 
0915   13D0 00 00 00 00 
0915   13D4 00 00 00 00 
0915   13D8 00 00 00 00 
0915   13DC 00 00 00 00 
0915   13E0 00 00 00 00 
0915   13E4 00 00 00 00 
0915   13E8 00 00 00 00 
0915   13EC 00 00 00 00 
0915   13F0 00 00 00 00 
0915   13F4 00 00 00 00 
0915   13F8 00 00 00 00 
0915   13FC 00 00 00 00 
0915   1400 00 00 00 00 
0915   1404 00 00 00 00 
0915   1408 00 00 00 00 
0915   140C 00 00 00 00 
0915   1410 00 00 00 00 
0915   1414 00 00 00 00 
0915   1418 00 00 00 00 
0915   141C 00 00 00 00 
0915   1420 00 00 00 00 
0915   1424 00 00 00 00 
0915   1428 00 00 00 00 
0915   142C 00 00 00 00 
0915   1430 00 00 00 00 
0915   1434 00 00 00 00 
0915   1438 00 00 00 00 
0915   143C 00 00 00 00 
0915   1440 00 00 00 00 
0915   1444 00 00 00 00 
0915   1448 00 00 00 00 
0915   144C 00 00 00 00 
0915   1450 00 00 00 00 
0915   1454 00 00 00 00 
0915   1458 00 00 00 00 
0915   145C 00 00 00 00 
0915   1460 00 00 00 00 
0915   1464 00 00 00 00 
0915   1468 00 00 00 00 
0915   146C 00 00 00 00 
0915   1470 00 00 00 00 
0915   1474 00 00 00 00 
0915   1478 00 00 00 00 
0915   147C 00 00 00 00 
0915   1480 00 00 00 00 
0915   1484 00 00 00 00 
0915   1488 00 00 00 00 
0915   148C 00 00 00 00 
0915   1490 00 00 00 00 
0915   1494 00 00 00 00 
0915   1498 00 00 00 00 
0915   149C 00 00 00 00 
0915   14A0 00 00 00 00 
0915   14A4 00 00 00 00 
0915   14A8 00 00 00 00 
0915   14AC 00 00 00 00 
0915   14B0 00 00 00 00 
0915   14B4 00 00 00 00 
0915   14B8 00 00 00 00 
0915   14BC 00 00 00 00 
0915   14C0 00 00 00 00 
0915   14C4 00 00 00 00 
0915   14C8 00 00 00 00 
0915   14CC 00 00 00 00 
0915   14D0 00 00 00 00 
0915   14D4 00 00 00 00 
0915   14D8 00 00 00 00 
0915   14DC 00 00 00 00 
0915   14E0 00 00 00 00 
0915   14E4 00 00 00 00 
0915   14E8 00 00 00 00 
0915   14EC 00 00 00 00 
0915   14F0 00 00 00 00 
0915   14F4 00 00 00 00 
0915   14F8 00 00 00 00 
0915   14FC 00 00 00 00 
0915   1500 00 00 00 00 
0915   1504 00 00 00 00 
0915   1508 00 00 00 00 
0915   150C 00 00 00 00 
0915   1510 00 00 00 00 
0915   1514 00 00 00 00 
0915   1518 00 00 00 00 
0915   151C 00 00 00 00 
0915   1520 00 00 00 00 
0915   1524 00 00 00 00 
0915   1528 00 00 00 00 
0915   152C 00 00 00 00 
0915   1530 00 00 00 00 
0915   1534 00 00 00 00 
0915   1538 00 00 00 00 
0915   153C 00 00 00 00 
0915   1540 00 00 00 00 
0915   1544 00 00 00 00 
0915   1548 00 00 00 00 
0915   154C 00 00 00 00 
0915   1550 00 00 00 00 
0915   1554 00 00 00 00 
0915   1558 00 00 00 00 
0915   155C 00 00 00 00 
0915   1560 00 00 00 00 
0915   1564 00 00 00 00 
0915   1568 00 00 00 00 
0915   156C 00 00 00 00 
0915   1570 00 00 00 00 
0915   1574 00 00 00 00 
0915   1578 00 00 00 00 
0915   157C 00 00 00 00 
0915   1580 00 00 00 00 
0915   1584 00 00 00 00 
0915   1588 00 00 00 00 
0915   158C 00 00 00 00 
0915   1590 00 00 00 00 
0915   1594 00 00 00 00 
0915   1598 00 00 00 00 
0915   159C 00 00 00 00 
0915   15A0 00 00 00 00 
0915   15A4 00 00 00 00 
0915   15A8 00 00 00 00 
0915   15AC 00 00 00 00 
0915   15B0 00 00 00 00 
0915   15B4 00 00 00 00 
0915   15B8 00 00 00 00 
0915   15BC 00 00 00 00 
0915   15C0 00 00 00 00 
0915   15C4 00 00 00 00 
0915   15C8 00 00 00 00 
0915   15CC 00 00 00 00 
0915   15D0 00 00 00 00 
0915   15D4 00 00 00 00 
0915   15D8 00 00 00 00 
0915   15DC 00 00 00 00 
0915   15E0 00 00 00 00 
0915   15E4 00 00 00 00 
0915   15E8 00 00 00 00 
0915   15EC 00 00 00 00 
0915   15F0 00 00 00 00 
0915   15F4 00 00 00 00 
0915   15F8 00 00 00 00 
0915   15FC 00 00 00 00 
0915   1600 00 00 00 00 
0915   1604 00 00 00 00 
0915   1608 00 00 00 00 
0915   160C 00 00 00 00 
0915   1610 00 00 00 00 
0915   1614 00 00 00 00 
0915   1618 00 00 00 00 
0915   161C 00 00 00 00 
0915   1620 00 00 00 00 
0915   1624 00 00 00 00 
0915   1628 00 00 00 00 
0915   162C 00 00 00 00 
0915   1630 00 00 00 00 
0916   1634 F4 0F       __new_grid: .dw __new_grid_data
0917   1636             ; --- END DATA BLOCK
0918   1636             
0919   1636             ; --- BEGIN INCLUDE BLOCK
0920   1636             .include "lib/stdio.asm"
0001+  1636             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1636             ; stdio.s
0003+  1636             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1636             .include "lib/string.asm"
0001++ 1636             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1636             ; string.s
0003++ 1636             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1636             
0005++ 1636             
0006++ 1636             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1636             ; strrev
0008++ 1636             ; reverse a string
0009++ 1636             ; D = string address
0010++ 1636             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1636             ; 01234
0012++ 1636             strrev:
0013++ 1636 4B          	pusha
0014++ 1637 07 7D 16    	call strlen	; length in C
0015++ 163A 12          	mov a, c
0016++ 163B AF 01 00    	cmp a, 1
0017++ 163E D0 58 16    	jleu strrev_end	; check string length. string len must be > 1
0018++ 1641 7D          	dec a
0019++ 1642 FD 4E       	mov si, d	; beginning of string
0020++ 1644 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1646 59          	add d, a	; end of string
0022++ 1647 12          	mov a, c
0023++ 1648 FD 9B       	shr a		; divide by 2
0024++ 164A 39          	mov c, a	; C now counts the steps
0025++ 164B             strrev_L0:
0026++ 164B 32          	mov bl, [d]	; save load right-side char into BL
0027++ 164C F6          	lodsb		; load left-side char into AL; increase SI
0028++ 164D 3E          	mov [d], al	; store left char into right side
0029++ 164E 1B          	mov al, bl
0030++ 164F F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1650 7E          	dec c
0032++ 1651 7F          	dec d
0033++ 1652 C2 00 00    	cmp c, 0
0034++ 1655 C7 4B 16    	jne strrev_L0
0035++ 1658             strrev_end:
0036++ 1658 4C          	popa
0037++ 1659 09          	ret
0038++ 165A             	
0039++ 165A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 165A             ; strchr
0041++ 165A             ; search string in D for char in AL
0042++ 165A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 165A             strchr:
0044++ 165A             strchr_L0:
0045++ 165A 32          	mov bl, [d]
0046++ 165B C1 00       	cmp bl, 0
0047++ 165D C6 68 16    	je strchr_end
0048++ 1660 BA          	cmp al, bl
0049++ 1661 C6 68 16    	je strchr_end
0050++ 1664 79          	inc d
0051++ 1665 0A 5A 16    	jmp strchr_L0
0052++ 1668             strchr_end:
0053++ 1668 1B          	mov al, bl
0054++ 1669 09          	ret
0055++ 166A             
0056++ 166A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 166A             ; strstr
0058++ 166A             ; find sub-string
0059++ 166A             ; str1 in SI
0060++ 166A             ; str2 in DI
0061++ 166A             ; SI points to end of source string
0062++ 166A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 166A             strstr:
0064++ 166A DB          	push al
0065++ 166B DA          	push d
0066++ 166C E3          	push di
0067++ 166D             strstr_loop:
0068++ 166D F3          	cmpsb					; compare a byte of the strings
0069++ 166E C7 79 16    	jne strstr_ret
0070++ 1671 FC 00 00    	lea d, [di + 0]
0071++ 1674 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1676 C7 6D 16    	jne strstr_loop				; equal chars but not at end
0073++ 1679             strstr_ret:
0074++ 1679 F0          	pop di
0075++ 167A E7          	pop d
0076++ 167B E8          	pop al
0077++ 167C 09          	ret
0078++ 167D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 167D             ; length of null terminated string
0080++ 167D             ; result in C
0081++ 167D             ; pointer in D
0082++ 167D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 167D             strlen:
0084++ 167D DA          	push d
0085++ 167E 38 00 00    	mov c, 0
0086++ 1681             strlen_L1:
0087++ 1681 BD 00       	cmp byte [d], 0
0088++ 1683 C6 8B 16    	je strlen_ret
0089++ 1686 79          	inc d
0090++ 1687 78          	inc c
0091++ 1688 0A 81 16    	jmp strlen_L1
0092++ 168B             strlen_ret:
0093++ 168B E7          	pop d
0094++ 168C 09          	ret
0095++ 168D             
0096++ 168D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 168D             ; STRCMP
0098++ 168D             ; compare two strings
0099++ 168D             ; str1 in SI
0100++ 168D             ; str2 in DI
0101++ 168D             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 168D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 168D             strcmp:
0104++ 168D DB          	push al
0105++ 168E DA          	push d
0106++ 168F E3          	push di
0107++ 1690 E2          	push si
0108++ 1691             strcmp_loop:
0109++ 1691 F3          	cmpsb					; compare a byte of the strings
0110++ 1692 C7 9D 16    	jne strcmp_ret
0111++ 1695 FB FF FF    	lea d, [si +- 1]
0112++ 1698 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 169A C7 91 16    	jne strcmp_loop				; equal chars but not at end
0114++ 169D             strcmp_ret:
0115++ 169D EF          	pop si
0116++ 169E F0          	pop di
0117++ 169F E7          	pop d
0118++ 16A0 E8          	pop al
0119++ 16A1 09          	ret
0120++ 16A2             
0121++ 16A2             
0122++ 16A2             ; STRCPY
0123++ 16A2             ; copy null terminated string from SI to DI
0124++ 16A2             ; source in SI
0125++ 16A2             ; destination in DI
0126++ 16A2             strcpy:
0127++ 16A2 E2          	push si
0128++ 16A3 E3          	push di
0129++ 16A4 DB          	push al
0130++ 16A5             strcpy_L1:
0131++ 16A5 F6          	lodsb
0132++ 16A6 F7          	stosb
0133++ 16A7 B9 00       	cmp al, 0
0134++ 16A9 C7 A5 16    	jne strcpy_L1
0135++ 16AC             strcpy_end:
0136++ 16AC E8          	pop al
0137++ 16AD F0          	pop di
0138++ 16AE EF          	pop si
0139++ 16AF 09          	ret
0140++ 16B0             
0141++ 16B0             ; STRCAT
0142++ 16B0             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 16B0             ; source in SI
0144++ 16B0             ; destination in DI
0145++ 16B0             strcat:
0146++ 16B0 E2          	push si
0147++ 16B1 E3          	push di
0148++ 16B2 D7          	push a
0149++ 16B3 DA          	push d
0150++ 16B4 50          	mov a, di
0151++ 16B5 3C          	mov d, a
0152++ 16B6             strcat_goto_end_L1:
0153++ 16B6 BD 00       	cmp byte[d], 0
0154++ 16B8 C6 BF 16    	je strcat_start
0155++ 16BB 79          	inc d
0156++ 16BC 0A B6 16    	jmp strcat_goto_end_L1
0157++ 16BF             strcat_start:
0158++ 16BF FD 50       	mov di, d
0159++ 16C1             strcat_L1:
0160++ 16C1 F6          	lodsb
0161++ 16C2 F7          	stosb
0162++ 16C3 B9 00       	cmp al, 0
0163++ 16C5 C7 C1 16    	jne strcat_L1
0164++ 16C8             strcat_end:
0165++ 16C8 E7          	pop d
0166++ 16C9 E4          	pop a
0167++ 16CA F0          	pop di
0168++ 16CB EF          	pop si
0169++ 16CC 09          	ret
0005+  16CD             
0006+  16CD 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  16D1 34 35 36 37 
0006+  16D5 38 39 41 42 
0006+  16D9 43 44 45 46 
0007+  16DD 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  16E1 1B 5B 48 00 
0008+  16E5             
0009+  16E5 01 00       table_power:.dw 1
0010+  16E7 0A 00       			.dw 10
0011+  16E9 64 00       			.dw 100
0012+  16EB E8 03       			.dw 1000
0013+  16ED 10 27       			.dw 10000
0014+  16EF             
0015+  16EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  16EF             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  16EF             ; ASCII in BL
0018+  16EF             ; result in AL
0019+  16EF             ; ascii for F = 0100 0110
0020+  16EF             ; ascii for 9 = 0011 1001
0021+  16EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  16EF             hex_ascii_encode:
0023+  16EF 1B          	mov al, bl
0024+  16F0 93 40       	test al, $40				; test if letter or number
0025+  16F2 C7 F8 16    	jnz hex_letter
0026+  16F5 87 0F       	and al, $0F				; get number
0027+  16F7 09          	ret
0028+  16F8             hex_letter:
0029+  16F8 87 0F       	and al, $0F				; get letter
0030+  16FA 6A 09       	add al, 9
0031+  16FC 09          	ret
0032+  16FD             
0033+  16FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  16FD             ; ATOI
0035+  16FD             ; 2 letter hex string in B
0036+  16FD             ; 8bit integer returned in AL
0037+  16FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  16FD             atoi:
0039+  16FD D8          	push b
0040+  16FE 07 EF 16    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  1701 30          	mov bl, bh
0042+  1702 DB          	push al					; save a
0043+  1703 07 EF 16    	call hex_ascii_encode
0044+  1706 EA          	pop bl	
0045+  1707 FD 9E 04    	shl al, 4
0046+  170A 8C          	or al, bl
0047+  170B E5          	pop b
0048+  170C 09          	ret	
0049+  170D             
0050+  170D             
0051+  170D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  170D             ; printf
0053+  170D             ; no need for explanations!
0054+  170D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  170D             printf:
0056+  170D 09          	ret
0057+  170E             
0058+  170E             
0059+  170E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  170E             ; scanf
0061+  170E             ; no need for explanations!
0062+  170E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  170E             scanf:
0064+  170E 09          	ret
0065+  170F             
0066+  170F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  170F             ; ITOA
0068+  170F             ; 8bit value in BL
0069+  170F             ; 2 byte ASCII result in A
0070+  170F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  170F             itoa:
0072+  170F DA          	push d
0073+  1710 D8          	push b
0074+  1711 A7 00       	mov bh, 0
0075+  1713 FD A4 04    	shr bl, 4	
0076+  1716 74          	mov d, b
0077+  1717 1F CD 16    	mov al, [d + s_hex_digits]
0078+  171A 23          	mov ah, al
0079+  171B             	
0080+  171B E5          	pop b
0081+  171C D8          	push b
0082+  171D A7 00       	mov bh, 0
0083+  171F FD 87 0F    	and bl, $0F
0084+  1722 74          	mov d, b
0085+  1723 1F CD 16    	mov al, [d + s_hex_digits]
0086+  1726 E5          	pop b
0087+  1727 E7          	pop d
0088+  1728 09          	ret
0089+  1729             
0090+  1729             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  1729             ; HEX STRING TO BINARY
0092+  1729             ; di = destination address
0093+  1729             ; si = source
0094+  1729             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  1729             hex_to_int:
0096+  1729             hex_to_int_L1:
0097+  1729 F6          	lodsb					; load from [SI] to AL
0098+  172A B9 00       	cmp al, 0				; check if ASCII 0
0099+  172C C6 39 17    	jz hex_to_int_ret
0100+  172F 36          	mov bh, al
0101+  1730 F6          	lodsb
0102+  1731 2F          	mov bl, al
0103+  1732 07 FD 16    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  1735 F7          	stosb					; store AL to [DI]
0105+  1736 0A 29 17    	jmp hex_to_int_L1
0106+  1739             hex_to_int_ret:
0107+  1739 09          	ret		
0108+  173A             
0109+  173A             
0110+  173A             
0111+  173A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  173A             ; GETCHAR
0113+  173A             ; char in ah
0114+  173A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  173A             getchar:
0116+  173A DB          	push al
0117+  173B             getchar_retry:
0118+  173B FD 0C       	sti
0119+  173D 19 01       	mov al, 1
0120+  173F 05 03       	syscall sys_io			; receive in AH
0121+  1741 B9 00       	cmp al, 0			; check if any char was receive
0122+  1743 C6 3B 17    	je getchar_retry
0123+  1746 E8          	pop al
0124+  1747 09          	ret
0125+  1748             
0126+  1748             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  1748             ; PUTCHAR
0128+  1748             ; char in ah
0129+  1748             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1748             putchar:
0131+  1748 D7          	push a
0132+  1749 19 00       	mov al, 0
0133+  174B 05 03       	syscall sys_io			; char in AH
0134+  174D E4          	pop a
0135+  174E 09          	ret
0136+  174F             
0137+  174F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  174F             ;; INPUT A STRING
0139+  174F             ;; terminates with null
0140+  174F             ;; pointer in D
0141+  174F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  174F             gets:
0143+  174F D7          	push a
0144+  1750 DA          	push d
0145+  1751             gets_loop:
0146+  1751 FD 0C       	sti
0147+  1753 19 01       	mov al, 1
0148+  1755 05 03       	syscall sys_io			; receive in AH
0149+  1757 B9 00       	cmp al, 0				; check error code (AL)
0150+  1759 C6 51 17    	je gets_loop			; if no char received, retry
0151+  175C             
0152+  175C 76 1B       	cmp ah, 27
0153+  175E C6 7F 17    	je gets_telnet_escape
0154+  1761 76 0A       	cmp ah, $0A				; LF
0155+  1763 C6 D8 17    	je gets_end
0156+  1766 76 0D       	cmp ah, $0D				; CR
0157+  1768 C6 D8 17    	je gets_end
0158+  176B 76 5C       	cmp ah, $5C				; '\\'
0159+  176D C6 AF 17    	je gets_escape
0160+  1770             	
0161+  1770 76 08       	cmp ah, $08			; check for backspace
0162+  1772 C6 7B 17    	je gets_backspace
0163+  1775             
0164+  1775 1A          	mov al, ah
0165+  1776 3E          	mov [d], al
0166+  1777 79          	inc d
0167+  1778 0A 51 17    	jmp gets_loop
0168+  177B             gets_backspace:
0169+  177B 7F          	dec d
0170+  177C 0A 51 17    	jmp gets_loop
0171+  177F             gets_telnet_escape:
0172+  177F FD 0C       	sti
0173+  1781 19 01       	mov al, 1
0174+  1783 05 03       	syscall sys_io				; receive in AH without echo
0175+  1785 B9 00       	cmp al, 0					; check error code (AL)
0176+  1787 C6 7F 17    	je gets_telnet_escape		; if no char received, retry
0177+  178A 76 5B       	cmp ah, '['
0178+  178C C7 51 17    	jne gets_loop
0179+  178F             gets_telnet_escape_phase2:
0180+  178F FD 0C       	sti
0181+  1791 19 01       	mov al, 1
0182+  1793 05 03       	syscall sys_io					; receive in AH without echo
0183+  1795 B9 00       	cmp al, 0						; check error code (AL)
0184+  1797 C6 8F 17    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  179A 76 44       	cmp ah, 'D'
0186+  179C C6 A7 17    	je gets_left_arrow
0187+  179F 76 43       	cmp ah, 'C'
0188+  17A1 C6 AB 17    	je gets_right_arrow
0189+  17A4 0A 51 17    	jmp gets_loop
0190+  17A7             gets_left_arrow:
0191+  17A7 7F          	dec d
0192+  17A8 0A 51 17    	jmp gets_loop
0193+  17AB             gets_right_arrow:
0194+  17AB 79          	inc d
0195+  17AC 0A 51 17    	jmp gets_loop
0196+  17AF             gets_escape:
0197+  17AF FD 0C       	sti
0198+  17B1 19 01       	mov al, 1
0199+  17B3 05 03       	syscall sys_io			; receive in AH
0200+  17B5 B9 00       	cmp al, 0				; check error code (AL)
0201+  17B7 C6 AF 17    	je gets_escape			; if no char received, retry
0202+  17BA 76 6E       	cmp ah, 'n'
0203+  17BC C6 CA 17    	je gets_LF
0204+  17BF 76 72       	cmp ah, 'r'
0205+  17C1 C6 D1 17    	je gets_CR
0206+  17C4 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  17C5 3E          	mov [d], al
0208+  17C6 79          	inc d
0209+  17C7 0A 51 17    	jmp gets_loop
0210+  17CA             gets_LF:
0211+  17CA 19 0A       	mov al, $0A
0212+  17CC 3E          	mov [d], al
0213+  17CD 79          	inc d
0214+  17CE 0A 51 17    	jmp gets_loop
0215+  17D1             gets_CR:
0216+  17D1 19 0D       	mov al, $0D
0217+  17D3 3E          	mov [d], al
0218+  17D4 79          	inc d
0219+  17D5 0A 51 17    	jmp gets_loop
0220+  17D8             gets_end:
0221+  17D8 19 00       	mov al, 0
0222+  17DA 3E          	mov [d], al				; terminate string
0223+  17DB E7          	pop d
0224+  17DC E4          	pop a
0225+  17DD 09          	ret
0226+  17DE             
0227+  17DE             
0228+  17DE             
0229+  17DE             
0230+  17DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  17DE             ;; INPUT TEXT
0232+  17DE             ;; terminated with CTRL+D
0233+  17DE             ;; pointer in D
0234+  17DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  17DE             gettxt:
0236+  17DE D7          	push a
0237+  17DF DA          	push d
0238+  17E0             gettxt_loop:
0239+  17E0 19 01       	mov al, 1
0240+  17E2 05 03       	syscall sys_io			; receive in AH
0241+  17E4 B9 00       	cmp al, 0				; check error code (AL)
0242+  17E6 C6 E0 17    	je gettxt_loop		; if no char received, retry
0243+  17E9 76 04       	cmp ah, 4			; EOT
0244+  17EB C6 29 18    	je gettxt_end
0245+  17EE 76 08       	cmp ah, $08			; check for backspace
0246+  17F0 C6 25 18    	je gettxt_backspace
0247+  17F3 76 5C       	cmp ah, $5C				; '\\'
0248+  17F5 C6 FE 17    	je gettxt_escape
0249+  17F8 1A          	mov al, ah
0250+  17F9 3E          	mov [d], al
0251+  17FA 79          	inc d
0252+  17FB 0A E0 17    	jmp gettxt_loop
0253+  17FE             gettxt_escape:
0254+  17FE 19 01       	mov al, 1
0255+  1800 05 03       	syscall sys_io			; receive in AH
0256+  1802 B9 00       	cmp al, 0				; check error code (AL)
0257+  1804 C6 FE 17    	je gettxt_escape		; if no char received, retry
0258+  1807 76 6E       	cmp ah, 'n'
0259+  1809 C6 17 18    	je gettxt_LF
0260+  180C 76 72       	cmp ah, 'r'
0261+  180E C6 1E 18    	je gettxt_CR
0262+  1811 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  1812 3E          	mov [d], al
0264+  1813 79          	inc d
0265+  1814 0A E0 17    	jmp gettxt_loop
0266+  1817             gettxt_LF:
0267+  1817 19 0A       	mov al, $0A
0268+  1819 3E          	mov [d], al
0269+  181A 79          	inc d
0270+  181B 0A E0 17    	jmp gettxt_loop
0271+  181E             gettxt_CR:
0272+  181E 19 0D       	mov al, $0D
0273+  1820 3E          	mov [d], al
0274+  1821 79          	inc d
0275+  1822 0A E0 17    	jmp gettxt_loop
0276+  1825             gettxt_backspace:
0277+  1825 7F          	dec d
0278+  1826 0A E0 17    	jmp gettxt_loop
0279+  1829             gettxt_end:
0280+  1829 19 00       	mov al, 0
0281+  182B 3E          	mov [d], al				; terminate string
0282+  182C E7          	pop d
0283+  182D E4          	pop a
0284+  182E 09          	ret
0285+  182F             
0286+  182F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  182F             ; PRINT NEW LINE
0288+  182F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  182F             printnl:
0290+  182F D7          	push a
0291+  1830 10 00 0A    	mov a, $0A00
0292+  1833 05 03       	syscall sys_io
0293+  1835 10 00 0D    	mov a, $0D00
0294+  1838 05 03       	syscall sys_io
0295+  183A E4          	pop a
0296+  183B 09          	ret
0297+  183C             
0298+  183C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  183C             ; strtoint
0300+  183C             ; 4 digit hex string number in d
0301+  183C             ; integer returned in A
0302+  183C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  183C             strtointx:
0304+  183C D8          	push b
0305+  183D 32          	mov bl, [d]
0306+  183E 37          	mov bh, bl
0307+  183F 33 01 00    	mov bl, [d + 1]
0308+  1842 07 FD 16    	call atoi				; convert to int in AL
0309+  1845 23          	mov ah, al				; move to AH
0310+  1846 33 02 00    	mov bl, [d + 2]
0311+  1849 37          	mov bh, bl
0312+  184A 33 03 00    	mov bl, [d + 3]
0313+  184D 07 FD 16    	call atoi				; convert to int in AL
0314+  1850 E5          	pop b
0315+  1851 09          	ret
0316+  1852             
0317+  1852             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  1852             ; strtoint
0319+  1852             ; 5 digit base10 string number in d
0320+  1852             ; integer returned in A
0321+  1852             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  1852             strtoint:
0323+  1852 E2          	push si
0324+  1853 D8          	push b
0325+  1854 D9          	push c
0326+  1855 DA          	push d
0327+  1856 07 7D 16    	call strlen			; get string length in C
0328+  1859 7E          	dec c
0329+  185A FD 4E       	mov si, d
0330+  185C 12          	mov a, c
0331+  185D FD 99       	shl a
0332+  185F 3B E5 16    	mov d, table_power
0333+  1862 59          	add d, a
0334+  1863 38 00 00    	mov c, 0
0335+  1866             strtoint_L0:
0336+  1866 F6          	lodsb			; load ASCII to al
0337+  1867 B9 00       	cmp al, 0
0338+  1869 C6 7C 18    	je strtoint_end
0339+  186C 6F 30       	sub al, $30		; make into integer
0340+  186E 22 00       	mov ah, 0
0341+  1870 2A          	mov b, [d]
0342+  1871 AC          	mul a, b			; result in B since it fits in 16bits
0343+  1872 11          	mov a, b
0344+  1873 28          	mov b, c
0345+  1874 54          	add a, b
0346+  1875 39          	mov c, a
0347+  1876 63 02 00    	sub d, 2
0348+  1879 0A 66 18    	jmp strtoint_L0
0349+  187C             strtoint_end:
0350+  187C 12          	mov a, c
0351+  187D E7          	pop d
0352+  187E E6          	pop c
0353+  187F E5          	pop b
0354+  1880 EF          	pop si
0355+  1881 09          	ret
0356+  1882             
0357+  1882             
0358+  1882             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  1882             ; PRINT NULL TERMINATED STRING
0360+  1882             ; pointer in D
0361+  1882             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  1882             puts:
0363+  1882 D7          	push a
0364+  1883 DA          	push d
0365+  1884             puts_L1:
0366+  1884 1E          	mov al, [d]
0367+  1885 B9 00       	cmp al, 0
0368+  1887 C6 93 18    	jz puts_END
0369+  188A 23          	mov ah, al
0370+  188B 19 00       	mov al, 0
0371+  188D 05 03       	syscall sys_io
0372+  188F 79          	inc d
0373+  1890 0A 84 18    	jmp puts_L1
0374+  1893             puts_END:
0375+  1893 E7          	pop d
0376+  1894 E4          	pop a
0377+  1895 09          	ret
0378+  1896             
0379+  1896             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  1896             ; PRINT N SIZE STRING
0381+  1896             ; pointer in D
0382+  1896             ; size in C
0383+  1896             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  1896             putsn:
0385+  1896 DB          	push al
0386+  1897 DA          	push d
0387+  1898 D9          	push c
0388+  1899             putsn_L0:
0389+  1899 1E          	mov al, [d]
0390+  189A 23          	mov ah, al
0391+  189B 19 00       	mov al, 0
0392+  189D 05 03       	syscall sys_io
0393+  189F 79          	inc d
0394+  18A0 7E          	dec c	
0395+  18A1 C2 00 00    	cmp c, 0
0396+  18A4 C7 99 18    	jne putsn_L0
0397+  18A7             putsn_end:
0398+  18A7 E6          	pop c
0399+  18A8 E7          	pop d
0400+  18A9 E8          	pop al
0401+  18AA 09          	ret
0402+  18AB             
0403+  18AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  18AB             ; print 16bit decimal number
0405+  18AB             ; input number in A
0406+  18AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  18AB             print_u16d:
0408+  18AB D7          	push a
0409+  18AC D8          	push b
0410+  18AD 26 10 27    	mov b, 10000
0411+  18B0 AE          	div a, b			; get 10000 coeff.
0412+  18B1 07 D7 18    	call print_number
0413+  18B4 11          	mov a, b
0414+  18B5 26 E8 03    	mov b, 1000
0415+  18B8 AE          	div a, b			; get 10000 coeff.
0416+  18B9 07 D7 18    	call print_number
0417+  18BC 11          	mov a, b
0418+  18BD 26 64 00    	mov b, 100
0419+  18C0 AE          	div a, b
0420+  18C1 07 D7 18    	call print_number
0421+  18C4 11          	mov a, b
0422+  18C5 26 0A 00    	mov b, 10
0423+  18C8 AE          	div a, b
0424+  18C9 07 D7 18    	call print_number
0425+  18CC 11          	mov a, b
0426+  18CD 6A 30       	add al, $30
0427+  18CF 23          	mov ah, al
0428+  18D0 19 00       	mov al, 0
0429+  18D2 05 03       	syscall sys_io	; print coeff
0430+  18D4 E5          	pop b
0431+  18D5 E4          	pop a
0432+  18D6 09          	ret
0433+  18D7             
0434+  18D7             
0435+  18D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  18D7             ; if A == 0, print space
0437+  18D7             ; else print A
0438+  18D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  18D7             print_number:
0440+  18D7 6A 30       	add al, $30
0441+  18D9 23          	mov ah, al
0442+  18DA 07 48 17    	call putchar
0443+  18DD 09          	ret
0444+  18DE             
0445+  18DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  18DE             ; PRINT 16BIT HEX INTEGER
0447+  18DE             ; integer value in reg B
0448+  18DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  18DE             print_u16x:
0450+  18DE D7          	push a
0451+  18DF D8          	push b
0452+  18E0 DD          	push bl
0453+  18E1 30          	mov bl, bh
0454+  18E2 07 0F 17    	call itoa				; convert bh to char in A
0455+  18E5 2F          	mov bl, al				; save al
0456+  18E6 19 00       	mov al, 0
0457+  18E8 05 03       	syscall sys_io				; display AH
0458+  18EA 24          	mov ah, bl				; retrieve al
0459+  18EB 19 00       	mov al, 0
0460+  18ED 05 03       	syscall sys_io				; display AL
0461+  18EF             
0462+  18EF EA          	pop bl
0463+  18F0 07 0F 17    	call itoa				; convert bh to char in A
0464+  18F3 2F          	mov bl, al				; save al
0465+  18F4 19 00       	mov al, 0
0466+  18F6 05 03       	syscall sys_io				; display AH
0467+  18F8 24          	mov ah, bl				; retrieve al
0468+  18F9 19 00       	mov al, 0
0469+  18FB 05 03       	syscall sys_io				; display AL
0470+  18FD             
0471+  18FD E5          	pop b
0472+  18FE E4          	pop a
0473+  18FF 09          	ret
0474+  1900             
0475+  1900             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  1900             ; INPUT 16BIT HEX INTEGER
0477+  1900             ; read 16bit integer into A
0478+  1900             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  1900             scan_u16x:
0480+  1900 F8 10 00    	enter 16
0481+  1903 D8          	push b
0482+  1904 DA          	push d
0483+  1905             
0484+  1905 FA F1 FF    	lea d, [bp + -15]
0485+  1908 07 4F 17    	call gets				; get number
0486+  190B             
0487+  190B 32          	mov bl, [d]
0488+  190C 37          	mov bh, bl
0489+  190D 33 01 00    	mov bl, [d + 1]
0490+  1910 07 FD 16    	call atoi				; convert to int in AL
0491+  1913 23          	mov ah, al				; move to AH
0492+  1914             
0493+  1914 33 02 00    	mov bl, [d + 2]
0494+  1917 37          	mov bh, bl
0495+  1918 33 03 00    	mov bl, [d + 3]
0496+  191B 07 FD 16    	call atoi				; convert to int in AL
0497+  191E             
0498+  191E E7          	pop d
0499+  191F E5          	pop b
0500+  1920 F9          	leave
0501+  1921 09          	ret
0502+  1922             
0503+  1922             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  1922             ; PRINT 8bit HEX INTEGER
0505+  1922             ; integer value in reg bl
0506+  1922             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  1922             print_u8x:
0508+  1922 D7          	push a
0509+  1923 DD          	push bl
0510+  1924             
0511+  1924 07 0F 17    	call itoa				; convert bl to char in A
0512+  1927 2F          	mov bl, al				; save al
0513+  1928 19 00       	mov al, 0
0514+  192A 05 03       	syscall sys_io				; display AH
0515+  192C 24          	mov ah, bl				; retrieve al
0516+  192D 19 00       	mov al, 0
0517+  192F 05 03       	syscall sys_io				; display AL
0518+  1931             
0519+  1931 EA          	pop bl
0520+  1932 E4          	pop a
0521+  1933 09          	ret
0522+  1934             
0523+  1934             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  1934             ; print 8bit decimal unsigned number
0525+  1934             ; input number in AL
0526+  1934             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  1934             print_u8d:
0528+  1934 D7          	push a
0529+  1935 D8          	push b
0530+  1936             
0531+  1936 22 00       	mov ah, 0
0532+  1938 26 64 00    	mov b, 100
0533+  193B AE          	div a, b
0534+  193C D8          	push b			; save remainder
0535+  193D B9 00       	cmp al, 0
0536+  193F C6 49 19    	je skip100
0537+  1942 6A 30       	add al, $30
0538+  1944 23          	mov ah, al
0539+  1945 19 00       	mov al, 0
0540+  1947 05 03       	syscall sys_io	; print coeff
0541+  1949             skip100:
0542+  1949 E4          	pop a
0543+  194A 22 00       	mov ah, 0
0544+  194C 26 0A 00    	mov b, 10
0545+  194F AE          	div a, b
0546+  1950 D8          	push b			; save remainder
0547+  1951 B9 00       	cmp al, 0
0548+  1953 C6 5D 19    	je skip10
0549+  1956 6A 30       	add al, $30
0550+  1958 23          	mov ah, al
0551+  1959 19 00       	mov al, 0
0552+  195B 05 03       	syscall sys_io	; print coeff
0553+  195D             skip10:
0554+  195D E4          	pop a
0555+  195E 1B          	mov al, bl
0556+  195F 6A 30       	add al, $30
0557+  1961 23          	mov ah, al
0558+  1962 19 00       	mov al, 0
0559+  1964 05 03       	syscall sys_io	; print coeff
0560+  1966 E5          	pop b
0561+  1967 E4          	pop a
0562+  1968 09          	ret
0563+  1969             
0564+  1969             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  1969             ; INPUT 8BIT HEX INTEGER
0566+  1969             ; read 8bit integer into AL
0567+  1969             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  1969             scan_u8x:
0569+  1969 F8 04 00    	enter 4
0570+  196C D8          	push b
0571+  196D DA          	push d
0572+  196E             
0573+  196E FA FD FF    	lea d, [bp + -3]
0574+  1971 07 4F 17    	call gets				; get number
0575+  1974             
0576+  1974 32          	mov bl, [d]
0577+  1975 37          	mov bh, bl
0578+  1976 33 01 00    	mov bl, [d + 1]
0579+  1979 07 FD 16    	call atoi				; convert to int in AL
0580+  197C             
0581+  197C E7          	pop d
0582+  197D E5          	pop b
0583+  197E F9          	leave
0584+  197F 09          	ret
0585+  1980             
0586+  1980             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  1980             ; input decimal number
0588+  1980             ; result in A
0589+  1980             ; 655'\0'
0590+  1980             ; low--------high
0591+  1980             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  1980             scan_u16d:
0593+  1980 F8 08 00    	enter 8
0594+  1983 E2          	push si
0595+  1984 D8          	push b
0596+  1985 D9          	push c
0597+  1986 DA          	push d
0598+  1987 FA F9 FF    	lea d, [bp +- 7]
0599+  198A 07 4F 17    	call gets
0600+  198D 07 7D 16    	call strlen			; get string length in C
0601+  1990 7E          	dec c
0602+  1991 FD 4E       	mov si, d
0603+  1993 12          	mov a, c
0604+  1994 FD 99       	shl a
0605+  1996 3B E5 16    	mov d, table_power
0606+  1999 59          	add d, a
0607+  199A 38 00 00    	mov c, 0
0608+  199D             mul_loop:
0609+  199D F6          	lodsb			; load ASCII to al
0610+  199E B9 00       	cmp al, 0
0611+  19A0 C6 B3 19    	je mul_exit
0612+  19A3 6F 30       	sub al, $30		; make into integer
0613+  19A5 22 00       	mov ah, 0
0614+  19A7 2A          	mov b, [d]
0615+  19A8 AC          	mul a, b			; result in B since it fits in 16bits
0616+  19A9 11          	mov a, b
0617+  19AA 28          	mov b, c
0618+  19AB 54          	add a, b
0619+  19AC 39          	mov c, a
0620+  19AD 63 02 00    	sub d, 2
0621+  19B0 0A 9D 19    	jmp mul_loop
0622+  19B3             mul_exit:
0623+  19B3 12          	mov a, c
0624+  19B4 E7          	pop d
0625+  19B5 E6          	pop c
0626+  19B6 E5          	pop b
0627+  19B7 EF          	pop si
0628+  19B8 F9          	leave
0629+  19B9 09          	ret
0921   19BA             ; --- END INCLUDE BLOCK
0922   19BA             
0923   19BA             
0924   19BA             .end
tasm: Number of errors = 0
