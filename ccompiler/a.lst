0001   0000             ; --- Filename: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- begin text block
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; k
0011   0408             _for1_init:
0012   0408 26 00 00      mov b, 0
0013   040B D7            push a
0014   040C 11            mov a, b
0015   040D 45 FF FF      mov [bp + -1], a ; i
0016   0410 E4            pop a
0017   0411             _for1_cond:
0018   0411 2C FF FF      mov b, [bp + -1] ; i
0019   0414 D7            push a
0020   0415 11            mov a, b
0021   0416 26 04 00      mov b, 4
0022   0419 B0            cmp a, b
0023   041A 0E            lodflgs
0024   041B 87 02         and al, %00000010
0025   041D 22 00         mov ah, 0
0026   041F 27            mov b, a
0027   0420 E4            pop a
0028   0421 C0 00 00      cmp b, 0
0029   0424 C6 55 04      je _for1_exit
0030   0427             _for1_block:
0031   0427 26 58 04      mov b, cc
0032   042A 74            mov d, b
0033   042B 2C FF FF      mov b, [bp + -1] ; i
0034   042E 10 02 00      mov a, 2
0035   0431 AC            mul a, b
0036   0432 5A            add d, b
0037   0433 2A            mov b, [d]
0038   0434 D7            push a
0039   0435 11            mov a, b
0040   0436 45 FD FF      mov [bp + -3], a ; k
0041   0439 E4            pop a
0042   043A             ; --- begin inline asm block
0043   043A 17 FD FF          mov a, [bp + -3]
0044   043D 07 EF 06          call print_u16d
0045   0440 14 80 04          mov a, [m]
0046   0443 3C                mov d, a
0047   0444 07 C6 06          call puts
0048   0447                 ; --- end inline asm block
0049   0447             _for1_update:
0050   0447 2C FF FF      mov b, [bp + -1] ; i
0051   044A FD 77         inc b
0052   044C D7            push a
0053   044D 11            mov a, b
0054   044E 45 FF FF      mov [bp + -1], a ; i
0055   0451 E4            pop a
0056   0452 0A 11 04      jmp _for1_cond
0057   0455             _for1_exit:
0058   0455 F9            leave
0059   0456 05 0B         syscall sys_terminate_proc
0060   0458             ; --- end text block
0061   0458             
0062   0458             ; --- begin data block
0063   0458 0B 00 16 00 cc: .dw 11, 22, 33, 44, 
0063   045C 21 00 2C 00 
0064   0460 DE 00 7B 00 mp: .dw 222, 123, 44, 0, 0, 
0064   0464 2C 00 00 00 
0064   0468 00 00 
0065   046A 01 00 02 00 matrix: .dw 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 
0065   046E 03 00 00 00 
0065   0472 00 00 00 00 
0065   0476 00 00 00 00 
0065   047A 00 00 00 00 
0066   047E 0A 00       m_data: .db "\n", 0
0067   0480 7E 04       m: .dw m_data
0068   0482             ; --- end data block
0069   0482             ; --- begin include block
0070   0482             .include "lib/stdio.asm"
0001+  0482             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0482             ; stdio.s
0003+  0482             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0482             .include "lib/string.asm"
0001++ 0482             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0482             ; string.s
0003++ 0482             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0482             
0005++ 0482             
0006++ 0482             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0482             ; strrev
0008++ 0482             ; reverse a string
0009++ 0482             ; D = string address
0010++ 0482             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0482             ; 01234
0012++ 0482             strrev:
0013++ 0482 4B          	pusha
0014++ 0483 07 C9 04    	call strlen	; length in C
0015++ 0486 12          	mov a, c
0016++ 0487 AF 01 00    	cmp a, 1
0017++ 048A D0 A4 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 048D 7D          	dec a
0019++ 048E FD 4E       	mov si, d	; beginning of string
0020++ 0490 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0492 59          	add d, a	; end of string
0022++ 0493 12          	mov a, c
0023++ 0494 FD 9B       	shr a		; divide by 2
0024++ 0496 39          	mov c, a	; C now counts the steps
0025++ 0497             strrev_L0:
0026++ 0497 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0498 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0499 3E          	mov [d], al	; store left char into right side
0029++ 049A 1B          	mov al, bl
0030++ 049B F7          	stosb		; store right-side char into left-side; increase DI
0031++ 049C 7E          	dec c
0032++ 049D 7F          	dec d
0033++ 049E C2 00 00    	cmp c, 0
0034++ 04A1 C7 97 04    	jne strrev_L0
0035++ 04A4             strrev_end:
0036++ 04A4 4C          	popa
0037++ 04A5 09          	ret
0038++ 04A6             	
0039++ 04A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 04A6             ; strchr
0041++ 04A6             ; search string in D for char in AL
0042++ 04A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 04A6             strchr:
0044++ 04A6             strchr_L0:
0045++ 04A6 32          	mov bl, [d]
0046++ 04A7 C1 00       	cmp bl, 0
0047++ 04A9 C6 B4 04    	je strchr_end
0048++ 04AC BA          	cmp al, bl
0049++ 04AD C6 B4 04    	je strchr_end
0050++ 04B0 79          	inc d
0051++ 04B1 0A A6 04    	jmp strchr_L0
0052++ 04B4             strchr_end:
0053++ 04B4 1B          	mov al, bl
0054++ 04B5 09          	ret
0055++ 04B6             
0056++ 04B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 04B6             ; strstr
0058++ 04B6             ; find sub-string
0059++ 04B6             ; str1 in SI
0060++ 04B6             ; str2 in DI
0061++ 04B6             ; SI points to end of source string
0062++ 04B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 04B6             strstr:
0064++ 04B6 DB          	push al
0065++ 04B7 DA          	push d
0066++ 04B8 E3          	push di
0067++ 04B9             strstr_loop:
0068++ 04B9 F3          	cmpsb					; compare a byte of the strings
0069++ 04BA C7 C5 04    	jne strstr_ret
0070++ 04BD FC 00 00    	lea d, [di + 0]
0071++ 04C0 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 04C2 C7 B9 04    	jne strstr_loop				; equal chars but not at end
0073++ 04C5             strstr_ret:
0074++ 04C5 F0          	pop di
0075++ 04C6 E7          	pop d
0076++ 04C7 E8          	pop al
0077++ 04C8 09          	ret
0078++ 04C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 04C9             ; length of null terminated string
0080++ 04C9             ; result in C
0081++ 04C9             ; pointer in D
0082++ 04C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 04C9             strlen:
0084++ 04C9 DA          	push d
0085++ 04CA 38 00 00    	mov c, 0
0086++ 04CD             strlen_L1:
0087++ 04CD BD 00       	cmp byte [d], 0
0088++ 04CF C6 D7 04    	je strlen_ret
0089++ 04D2 79          	inc d
0090++ 04D3 78          	inc c
0091++ 04D4 0A CD 04    	jmp strlen_L1
0092++ 04D7             strlen_ret:
0093++ 04D7 E7          	pop d
0094++ 04D8 09          	ret
0095++ 04D9             
0096++ 04D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04D9             ; STRCMP
0098++ 04D9             ; compare two strings
0099++ 04D9             ; str1 in SI
0100++ 04D9             ; str2 in DI
0101++ 04D9             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04D9             strcmp:
0104++ 04D9 DB          	push al
0105++ 04DA DA          	push d
0106++ 04DB E3          	push di
0107++ 04DC E2          	push si
0108++ 04DD             strcmp_loop:
0109++ 04DD F3          	cmpsb					; compare a byte of the strings
0110++ 04DE C7 E9 04    	jne strcmp_ret
0111++ 04E1 FB FF FF    	lea d, [si +- 1]
0112++ 04E4 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04E6 C7 DD 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04E9             strcmp_ret:
0115++ 04E9 EF          	pop si
0116++ 04EA F0          	pop di
0117++ 04EB E7          	pop d
0118++ 04EC E8          	pop al
0119++ 04ED 09          	ret
0120++ 04EE             
0121++ 04EE             
0122++ 04EE             ; STRCPY
0123++ 04EE             ; copy null terminated string from SI to DI
0124++ 04EE             ; source in SI
0125++ 04EE             ; destination in DI
0126++ 04EE             strcpy:
0127++ 04EE E2          	push si
0128++ 04EF E3          	push di
0129++ 04F0 DB          	push al
0130++ 04F1             strcpy_L1:
0131++ 04F1 F6          	lodsb
0132++ 04F2 F7          	stosb
0133++ 04F3 B9 00       	cmp al, 0
0134++ 04F5 C7 F1 04    	jne strcpy_L1
0135++ 04F8             strcpy_end:
0136++ 04F8 E8          	pop al
0137++ 04F9 F0          	pop di
0138++ 04FA EF          	pop si
0139++ 04FB 09          	ret
0140++ 04FC             
0141++ 04FC             ; STRCAT
0142++ 04FC             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04FC             ; source in SI
0144++ 04FC             ; destination in DI
0145++ 04FC             strcat:
0146++ 04FC E2          	push si
0147++ 04FD E3          	push di
0148++ 04FE D7          	push a
0149++ 04FF DA          	push d
0150++ 0500 50          	mov a, di
0151++ 0501 3C          	mov d, a
0152++ 0502             strcat_goto_end_L1:
0153++ 0502 BD 00       	cmp byte[d], 0
0154++ 0504 C6 0B 05    	je strcat_start
0155++ 0507 79          	inc d
0156++ 0508 0A 02 05    	jmp strcat_goto_end_L1
0157++ 050B             strcat_start:
0158++ 050B FD 50       	mov di, d
0159++ 050D             strcat_L1:
0160++ 050D F6          	lodsb
0161++ 050E F7          	stosb
0162++ 050F B9 00       	cmp al, 0
0163++ 0511 C7 0D 05    	jne strcat_L1
0164++ 0514             strcat_end:
0165++ 0514 E7          	pop d
0166++ 0515 E4          	pop a
0167++ 0516 F0          	pop di
0168++ 0517 EF          	pop si
0169++ 0518 09          	ret
0005+  0519             
0006+  0519 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  051D 34 35 36 37 
0006+  0521 38 39 41 42 
0006+  0525 43 44 45 46 
0007+  0529             
0008+  0529 01 00       table_power:.dw 1
0009+  052B 0A 00       			.dw 10
0010+  052D 64 00       			.dw 100
0011+  052F E8 03       			.dw 1000
0012+  0531 10 27       			.dw 10000
0013+  0533             
0014+  0533             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  0533             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  0533             ; ASCII in BL
0017+  0533             ; result in AL
0018+  0533             ; ascii for F = 0100 0110
0019+  0533             ; ascii for 9 = 0011 1001
0020+  0533             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  0533             hex_ascii_encode:
0022+  0533 1B          	mov al, bl
0023+  0534 93 40       	test al, $40				; test if letter or number
0024+  0536 C7 3C 05    	jnz hex_letter
0025+  0539 87 0F       	and al, $0F				; get number
0026+  053B 09          	ret
0027+  053C             hex_letter:
0028+  053C 87 0F       	and al, $0F				; get letter
0029+  053E 6A 09       	add al, 9
0030+  0540 09          	ret
0031+  0541             
0032+  0541             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  0541             ; ATOI
0034+  0541             ; 2 letter hex string in B
0035+  0541             ; 8bit integer returned in AL
0036+  0541             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  0541             atoi:
0038+  0541 D8          	push b
0039+  0542 07 33 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  0545 30          	mov bl, bh
0041+  0546 DB          	push al					; save a
0042+  0547 07 33 05    	call hex_ascii_encode
0043+  054A EA          	pop bl	
0044+  054B FD 9E 04    	shl al, 4
0045+  054E 8C          	or al, bl
0046+  054F E5          	pop b
0047+  0550 09          	ret	
0048+  0551             
0049+  0551             
0050+  0551             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0551             ; printf
0052+  0551             ; no need for explanations!
0053+  0551             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  0551             printf:
0055+  0551 09          	ret
0056+  0552             
0057+  0552             
0058+  0552             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0552             ; scanf
0060+  0552             ; no need for explanations!
0061+  0552             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0552             scanf:
0063+  0552 09          	ret
0064+  0553             
0065+  0553             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0553             ; ITOA
0067+  0553             ; 8bit value in BL
0068+  0553             ; 2 byte ASCII result in A
0069+  0553             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  0553             itoa:
0071+  0553 DA          	push d
0072+  0554 D8          	push b
0073+  0555 A7 00       	mov bh, 0
0074+  0557 FD A4 04    	shr bl, 4	
0075+  055A 74          	mov d, b
0076+  055B 1F 19 05    	mov al, [d + s_hex_digits]
0077+  055E 23          	mov ah, al
0078+  055F             	
0079+  055F E5          	pop b
0080+  0560 D8          	push b
0081+  0561 A7 00       	mov bh, 0
0082+  0563 FD 87 0F    	and bl, $0F
0083+  0566 74          	mov d, b
0084+  0567 1F 19 05    	mov al, [d + s_hex_digits]
0085+  056A E5          	pop b
0086+  056B E7          	pop d
0087+  056C 09          	ret
0088+  056D             
0089+  056D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  056D             ; HEX STRING TO BINARY
0091+  056D             ; di = destination address
0092+  056D             ; si = source
0093+  056D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  056D             hex_to_int:
0095+  056D             hex_to_int_L1:
0096+  056D F6          	lodsb					; load from [SI] to AL
0097+  056E B9 00       	cmp al, 0				; check if ASCII 0
0098+  0570 C6 7D 05    	jz hex_to_int_ret
0099+  0573 36          	mov bh, al
0100+  0574 F6          	lodsb
0101+  0575 2F          	mov bl, al
0102+  0576 07 41 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0579 F7          	stosb					; store AL to [DI]
0104+  057A 0A 6D 05    	jmp hex_to_int_L1
0105+  057D             hex_to_int_ret:
0106+  057D 09          	ret		
0107+  057E             
0108+  057E             
0109+  057E             
0110+  057E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  057E             ; GETCHAR
0112+  057E             ; char in ah
0113+  057E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  057E             getchar:
0115+  057E DB          	push al
0116+  057F             getchar_retry:
0117+  057F FD 0C       	sti
0118+  0581 19 01       	mov al, 1
0119+  0583 05 03       	syscall sys_io			; receive in AH
0120+  0585 B9 00       	cmp al, 0			; check if any char was receive
0121+  0587 C6 7F 05    	je getchar_retry
0122+  058A E8          	pop al
0123+  058B 09          	ret
0124+  058C             
0125+  058C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  058C             ; PUTCHAR
0127+  058C             ; char in ah
0128+  058C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  058C             putchar:
0130+  058C D7          	push a
0131+  058D 19 00       	mov al, 0
0132+  058F 05 03       	syscall sys_io			; char in AH
0133+  0591 E4          	pop a
0134+  0592 09          	ret
0135+  0593             
0136+  0593             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  0593             ;; INPUT A STRING
0138+  0593             ;; terminates with null
0139+  0593             ;; pointer in D
0140+  0593             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0593             gets:
0142+  0593 D7          	push a
0143+  0594 DA          	push d
0144+  0595             gets_loop:
0145+  0595 FD 0C       	sti
0146+  0597 19 01       	mov al, 1
0147+  0599 05 03       	syscall sys_io			; receive in AH
0148+  059B B9 00       	cmp al, 0				; check error code (AL)
0149+  059D C6 95 05    	je gets_loop			; if no char received, retry
0150+  05A0             
0151+  05A0 76 1B       	cmp ah, 27
0152+  05A2 C6 C3 05    	je gets_telnet_escape
0153+  05A5 76 0A       	cmp ah, $0A				; LF
0154+  05A7 C6 1C 06    	je gets_end
0155+  05AA 76 0D       	cmp ah, $0D				; CR
0156+  05AC C6 1C 06    	je gets_end
0157+  05AF 76 5C       	cmp ah, $5C				; '\\'
0158+  05B1 C6 F3 05    	je gets_escape
0159+  05B4             	
0160+  05B4 76 08       	cmp ah, $08			; check for backspace
0161+  05B6 C6 BF 05    	je gets_backspace
0162+  05B9             
0163+  05B9 1A          	mov al, ah
0164+  05BA 3E          	mov [d], al
0165+  05BB 79          	inc d
0166+  05BC 0A 95 05    	jmp gets_loop
0167+  05BF             gets_backspace:
0168+  05BF 7F          	dec d
0169+  05C0 0A 95 05    	jmp gets_loop
0170+  05C3             gets_telnet_escape:
0171+  05C3 FD 0C       	sti
0172+  05C5 19 01       	mov al, 1
0173+  05C7 05 03       	syscall sys_io				; receive in AH without echo
0174+  05C9 B9 00       	cmp al, 0					; check error code (AL)
0175+  05CB C6 C3 05    	je gets_telnet_escape		; if no char received, retry
0176+  05CE 76 5B       	cmp ah, '['
0177+  05D0 C7 95 05    	jne gets_loop
0178+  05D3             gets_telnet_escape_phase2:
0179+  05D3 FD 0C       	sti
0180+  05D5 19 01       	mov al, 1
0181+  05D7 05 03       	syscall sys_io					; receive in AH without echo
0182+  05D9 B9 00       	cmp al, 0						; check error code (AL)
0183+  05DB C6 D3 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  05DE 76 44       	cmp ah, 'D'
0185+  05E0 C6 EB 05    	je gets_left_arrow
0186+  05E3 76 43       	cmp ah, 'C'
0187+  05E5 C6 EF 05    	je gets_right_arrow
0188+  05E8 0A 95 05    	jmp gets_loop
0189+  05EB             gets_left_arrow:
0190+  05EB 7F          	dec d
0191+  05EC 0A 95 05    	jmp gets_loop
0192+  05EF             gets_right_arrow:
0193+  05EF 79          	inc d
0194+  05F0 0A 95 05    	jmp gets_loop
0195+  05F3             gets_escape:
0196+  05F3 FD 0C       	sti
0197+  05F5 19 01       	mov al, 1
0198+  05F7 05 03       	syscall sys_io			; receive in AH
0199+  05F9 B9 00       	cmp al, 0				; check error code (AL)
0200+  05FB C6 F3 05    	je gets_escape			; if no char received, retry
0201+  05FE 76 6E       	cmp ah, 'n'
0202+  0600 C6 0E 06    	je gets_LF
0203+  0603 76 72       	cmp ah, 'r'
0204+  0605 C6 15 06    	je gets_CR
0205+  0608 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  0609 3E          	mov [d], al
0207+  060A 79          	inc d
0208+  060B 0A 95 05    	jmp gets_loop
0209+  060E             gets_LF:
0210+  060E 19 0A       	mov al, $0A
0211+  0610 3E          	mov [d], al
0212+  0611 79          	inc d
0213+  0612 0A 95 05    	jmp gets_loop
0214+  0615             gets_CR:
0215+  0615 19 0D       	mov al, $0D
0216+  0617 3E          	mov [d], al
0217+  0618 79          	inc d
0218+  0619 0A 95 05    	jmp gets_loop
0219+  061C             gets_end:
0220+  061C 19 00       	mov al, 0
0221+  061E 3E          	mov [d], al				; terminate string
0222+  061F E7          	pop d
0223+  0620 E4          	pop a
0224+  0621 09          	ret
0225+  0622             
0226+  0622             
0227+  0622             
0228+  0622             
0229+  0622             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  0622             ;; INPUT TEXT
0231+  0622             ;; terminated with CTRL+D
0232+  0622             ;; pointer in D
0233+  0622             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  0622             gettxt:
0235+  0622 D7          	push a
0236+  0623 DA          	push d
0237+  0624             gettxt_loop:
0238+  0624 19 01       	mov al, 1
0239+  0626 05 03       	syscall sys_io			; receive in AH
0240+  0628 B9 00       	cmp al, 0				; check error code (AL)
0241+  062A C6 24 06    	je gettxt_loop		; if no char received, retry
0242+  062D 76 04       	cmp ah, 4			; EOT
0243+  062F C6 6D 06    	je gettxt_end
0244+  0632 76 08       	cmp ah, $08			; check for backspace
0245+  0634 C6 69 06    	je gettxt_backspace
0246+  0637 76 5C       	cmp ah, $5C				; '\\'
0247+  0639 C6 42 06    	je gettxt_escape
0248+  063C 1A          	mov al, ah
0249+  063D 3E          	mov [d], al
0250+  063E 79          	inc d
0251+  063F 0A 24 06    	jmp gettxt_loop
0252+  0642             gettxt_escape:
0253+  0642 19 01       	mov al, 1
0254+  0644 05 03       	syscall sys_io			; receive in AH
0255+  0646 B9 00       	cmp al, 0				; check error code (AL)
0256+  0648 C6 42 06    	je gettxt_escape		; if no char received, retry
0257+  064B 76 6E       	cmp ah, 'n'
0258+  064D C6 5B 06    	je gettxt_LF
0259+  0650 76 72       	cmp ah, 'r'
0260+  0652 C6 62 06    	je gettxt_CR
0261+  0655 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  0656 3E          	mov [d], al
0263+  0657 79          	inc d
0264+  0658 0A 24 06    	jmp gettxt_loop
0265+  065B             gettxt_LF:
0266+  065B 19 0A       	mov al, $0A
0267+  065D 3E          	mov [d], al
0268+  065E 79          	inc d
0269+  065F 0A 24 06    	jmp gettxt_loop
0270+  0662             gettxt_CR:
0271+  0662 19 0D       	mov al, $0D
0272+  0664 3E          	mov [d], al
0273+  0665 79          	inc d
0274+  0666 0A 24 06    	jmp gettxt_loop
0275+  0669             gettxt_backspace:
0276+  0669 7F          	dec d
0277+  066A 0A 24 06    	jmp gettxt_loop
0278+  066D             gettxt_end:
0279+  066D 19 00       	mov al, 0
0280+  066F 3E          	mov [d], al				; terminate string
0281+  0670 E7          	pop d
0282+  0671 E4          	pop a
0283+  0672 09          	ret
0284+  0673             
0285+  0673             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0673             ; PRINT NEW LINE
0287+  0673             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  0673             printnl:
0289+  0673 D7          	push a
0290+  0674 10 00 0A    	mov a, $0A00
0291+  0677 05 03       	syscall sys_io
0292+  0679 10 00 0D    	mov a, $0D00
0293+  067C 05 03       	syscall sys_io
0294+  067E E4          	pop a
0295+  067F 09          	ret
0296+  0680             
0297+  0680             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  0680             ; strtoint
0299+  0680             ; 4 digit hex string number in d
0300+  0680             ; integer returned in A
0301+  0680             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  0680             strtointx:
0303+  0680 D8          	push b
0304+  0681 32          	mov bl, [d]
0305+  0682 37          	mov bh, bl
0306+  0683 33 01 00    	mov bl, [d + 1]
0307+  0686 07 41 05    	call atoi				; convert to int in AL
0308+  0689 23          	mov ah, al				; move to AH
0309+  068A 33 02 00    	mov bl, [d + 2]
0310+  068D 37          	mov bh, bl
0311+  068E 33 03 00    	mov bl, [d + 3]
0312+  0691 07 41 05    	call atoi				; convert to int in AL
0313+  0694 E5          	pop b
0314+  0695 09          	ret
0315+  0696             
0316+  0696             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  0696             ; strtoint
0318+  0696             ; 5 digit base10 string number in d
0319+  0696             ; integer returned in A
0320+  0696             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  0696             strtoint:
0322+  0696 E2          	push si
0323+  0697 D8          	push b
0324+  0698 D9          	push c
0325+  0699 DA          	push d
0326+  069A 07 C9 04    	call strlen			; get string length in C
0327+  069D 7E          	dec c
0328+  069E FD 4E       	mov si, d
0329+  06A0 12          	mov a, c
0330+  06A1 FD 99       	shl a
0331+  06A3 3B 29 05    	mov d, table_power
0332+  06A6 59          	add d, a
0333+  06A7 38 00 00    	mov c, 0
0334+  06AA             strtoint_L0:
0335+  06AA F6          	lodsb			; load ASCII to al
0336+  06AB B9 00       	cmp al, 0
0337+  06AD C6 C0 06    	je strtoint_end
0338+  06B0 6F 30       	sub al, $30		; make into integer
0339+  06B2 22 00       	mov ah, 0
0340+  06B4 2A          	mov b, [d]
0341+  06B5 AC          	mul a, b			; result in B since it fits in 16bits
0342+  06B6 11          	mov a, b
0343+  06B7 28          	mov b, c
0344+  06B8 54          	add a, b
0345+  06B9 39          	mov c, a
0346+  06BA 63 02 00    	sub d, 2
0347+  06BD 0A AA 06    	jmp strtoint_L0
0348+  06C0             strtoint_end:
0349+  06C0 12          	mov a, c
0350+  06C1 E7          	pop d
0351+  06C2 E6          	pop c
0352+  06C3 E5          	pop b
0353+  06C4 EF          	pop si
0354+  06C5 09          	ret
0355+  06C6             
0356+  06C6             
0357+  06C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  06C6             ; PRINT NULL TERMINATED STRING
0359+  06C6             ; pointer in D
0360+  06C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  06C6             puts:
0362+  06C6 D7          	push a
0363+  06C7 DA          	push d
0364+  06C8             puts_L1:
0365+  06C8 1E          	mov al, [d]
0366+  06C9 B9 00       	cmp al, 0
0367+  06CB C6 D7 06    	jz puts_END
0368+  06CE 23          	mov ah, al
0369+  06CF 19 00       	mov al, 0
0370+  06D1 05 03       	syscall sys_io
0371+  06D3 79          	inc d
0372+  06D4 0A C8 06    	jmp puts_L1
0373+  06D7             puts_END:
0374+  06D7 E7          	pop d
0375+  06D8 E4          	pop a
0376+  06D9 09          	ret
0377+  06DA             
0378+  06DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  06DA             ; PRINT N SIZE STRING
0380+  06DA             ; pointer in D
0381+  06DA             ; size in C
0382+  06DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  06DA             putsn:
0384+  06DA DB          	push al
0385+  06DB DA          	push d
0386+  06DC D9          	push c
0387+  06DD             putsn_L0:
0388+  06DD 1E          	mov al, [d]
0389+  06DE 23          	mov ah, al
0390+  06DF 19 00       	mov al, 0
0391+  06E1 05 03       	syscall sys_io
0392+  06E3 79          	inc d
0393+  06E4 7E          	dec c	
0394+  06E5 C2 00 00    	cmp c, 0
0395+  06E8 C7 DD 06    	jne putsn_L0
0396+  06EB             putsn_end:
0397+  06EB E6          	pop c
0398+  06EC E7          	pop d
0399+  06ED E8          	pop al
0400+  06EE 09          	ret
0401+  06EF             
0402+  06EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  06EF             ; print 16bit decimal number
0404+  06EF             ; input number in A
0405+  06EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  06EF             print_u16d:
0407+  06EF D7          	push a
0408+  06F0 D8          	push b
0409+  06F1 26 10 27    	mov b, 10000
0410+  06F4 AE          	div a, b			; get 10000 coeff.
0411+  06F5 07 1B 07    	call print_number
0412+  06F8 11          	mov a, b
0413+  06F9 26 E8 03    	mov b, 1000
0414+  06FC AE          	div a, b			; get 10000 coeff.
0415+  06FD 07 1B 07    	call print_number
0416+  0700 11          	mov a, b
0417+  0701 26 64 00    	mov b, 100
0418+  0704 AE          	div a, b
0419+  0705 07 1B 07    	call print_number
0420+  0708 11          	mov a, b
0421+  0709 26 0A 00    	mov b, 10
0422+  070C AE          	div a, b
0423+  070D 07 1B 07    	call print_number
0424+  0710 11          	mov a, b
0425+  0711 6A 30       	add al, $30
0426+  0713 23          	mov ah, al
0427+  0714 19 00       	mov al, 0
0428+  0716 05 03       	syscall sys_io	; print coeff
0429+  0718 E5          	pop b
0430+  0719 E4          	pop a
0431+  071A 09          	ret
0432+  071B             
0433+  071B             
0434+  071B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  071B             ; if A == 0, print space
0436+  071B             ; else print A
0437+  071B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  071B             print_number:
0439+  071B 6A 30       	add al, $30
0440+  071D 23          	mov ah, al
0441+  071E 07 8C 05    	call putchar
0442+  0721 09          	ret
0443+  0722             
0444+  0722             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  0722             ; PRINT 16BIT HEX INTEGER
0446+  0722             ; integer value in reg B
0447+  0722             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  0722             print_u16x:
0449+  0722 D7          	push a
0450+  0723 D8          	push b
0451+  0724 DD          	push bl
0452+  0725 30          	mov bl, bh
0453+  0726 07 53 05    	call itoa				; convert bh to char in A
0454+  0729 2F          	mov bl, al				; save al
0455+  072A 19 00       	mov al, 0
0456+  072C 05 03       	syscall sys_io				; display AH
0457+  072E 24          	mov ah, bl				; retrieve al
0458+  072F 19 00       	mov al, 0
0459+  0731 05 03       	syscall sys_io				; display AL
0460+  0733             
0461+  0733 EA          	pop bl
0462+  0734 07 53 05    	call itoa				; convert bh to char in A
0463+  0737 2F          	mov bl, al				; save al
0464+  0738 19 00       	mov al, 0
0465+  073A 05 03       	syscall sys_io				; display AH
0466+  073C 24          	mov ah, bl				; retrieve al
0467+  073D 19 00       	mov al, 0
0468+  073F 05 03       	syscall sys_io				; display AL
0469+  0741             
0470+  0741 E5          	pop b
0471+  0742 E4          	pop a
0472+  0743 09          	ret
0473+  0744             
0474+  0744             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  0744             ; INPUT 16BIT HEX INTEGER
0476+  0744             ; read 16bit integer into A
0477+  0744             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  0744             scan_u16x:
0479+  0744 F8 10 00    	enter 16
0480+  0747 D8          	push b
0481+  0748 DA          	push d
0482+  0749             
0483+  0749 FA F1 FF    	lea d, [bp + -15]
0484+  074C 07 93 05    	call gets				; get number
0485+  074F             
0486+  074F 32          	mov bl, [d]
0487+  0750 37          	mov bh, bl
0488+  0751 33 01 00    	mov bl, [d + 1]
0489+  0754 07 41 05    	call atoi				; convert to int in AL
0490+  0757 23          	mov ah, al				; move to AH
0491+  0758             
0492+  0758 33 02 00    	mov bl, [d + 2]
0493+  075B 37          	mov bh, bl
0494+  075C 33 03 00    	mov bl, [d + 3]
0495+  075F 07 41 05    	call atoi				; convert to int in AL
0496+  0762             
0497+  0762 E7          	pop d
0498+  0763 E5          	pop b
0499+  0764 F9          	leave
0500+  0765 09          	ret
0501+  0766             
0502+  0766             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  0766             ; PRINT 8bit HEX INTEGER
0504+  0766             ; integer value in reg bl
0505+  0766             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  0766             print_u8x:
0507+  0766 D7          	push a
0508+  0767 DD          	push bl
0509+  0768             
0510+  0768 07 53 05    	call itoa				; convert bl to char in A
0511+  076B 2F          	mov bl, al				; save al
0512+  076C 19 00       	mov al, 0
0513+  076E 05 03       	syscall sys_io				; display AH
0514+  0770 24          	mov ah, bl				; retrieve al
0515+  0771 19 00       	mov al, 0
0516+  0773 05 03       	syscall sys_io				; display AL
0517+  0775             
0518+  0775 EA          	pop bl
0519+  0776 E4          	pop a
0520+  0777 09          	ret
0521+  0778             
0522+  0778             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0778             ; print 8bit decimal unsigned number
0524+  0778             ; input number in AL
0525+  0778             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0778             print_u8d:
0527+  0778 D7          	push a
0528+  0779 D8          	push b
0529+  077A             
0530+  077A 22 00       	mov ah, 0
0531+  077C 26 64 00    	mov b, 100
0532+  077F AE          	div a, b
0533+  0780 D8          	push b			; save remainder
0534+  0781 B9 00       	cmp al, 0
0535+  0783 C6 8D 07    	je skip100
0536+  0786 6A 30       	add al, $30
0537+  0788 23          	mov ah, al
0538+  0789 19 00       	mov al, 0
0539+  078B 05 03       	syscall sys_io	; print coeff
0540+  078D             skip100:
0541+  078D E4          	pop a
0542+  078E 22 00       	mov ah, 0
0543+  0790 26 0A 00    	mov b, 10
0544+  0793 AE          	div a, b
0545+  0794 D8          	push b			; save remainder
0546+  0795 B9 00       	cmp al, 0
0547+  0797 C6 A1 07    	je skip10
0548+  079A 6A 30       	add al, $30
0549+  079C 23          	mov ah, al
0550+  079D 19 00       	mov al, 0
0551+  079F 05 03       	syscall sys_io	; print coeff
0552+  07A1             skip10:
0553+  07A1 E4          	pop a
0554+  07A2 1B          	mov al, bl
0555+  07A3 6A 30       	add al, $30
0556+  07A5 23          	mov ah, al
0557+  07A6 19 00       	mov al, 0
0558+  07A8 05 03       	syscall sys_io	; print coeff
0559+  07AA E5          	pop b
0560+  07AB E4          	pop a
0561+  07AC 09          	ret
0562+  07AD             
0563+  07AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  07AD             ; INPUT 8BIT HEX INTEGER
0565+  07AD             ; read 8bit integer into AL
0566+  07AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  07AD             scan_u8x:
0568+  07AD F8 04 00    	enter 4
0569+  07B0 D8          	push b
0570+  07B1 DA          	push d
0571+  07B2             
0572+  07B2 FA FD FF    	lea d, [bp + -3]
0573+  07B5 07 93 05    	call gets				; get number
0574+  07B8             
0575+  07B8 32          	mov bl, [d]
0576+  07B9 37          	mov bh, bl
0577+  07BA 33 01 00    	mov bl, [d + 1]
0578+  07BD 07 41 05    	call atoi				; convert to int in AL
0579+  07C0             
0580+  07C0 E7          	pop d
0581+  07C1 E5          	pop b
0582+  07C2 F9          	leave
0583+  07C3 09          	ret
0584+  07C4             
0585+  07C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  07C4             ; input decimal number
0587+  07C4             ; result in A
0588+  07C4             ; 655'\0'
0589+  07C4             ; low--------high
0590+  07C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  07C4             scan_u16d:
0592+  07C4 F8 08 00    	enter 8
0593+  07C7 E2          	push si
0594+  07C8 D8          	push b
0595+  07C9 D9          	push c
0596+  07CA DA          	push d
0597+  07CB FA F9 FF    	lea d, [bp +- 7]
0598+  07CE 07 93 05    	call gets
0599+  07D1 07 C9 04    	call strlen			; get string length in C
0600+  07D4 7E          	dec c
0601+  07D5 FD 4E       	mov si, d
0602+  07D7 12          	mov a, c
0603+  07D8 FD 99       	shl a
0604+  07DA 3B 29 05    	mov d, table_power
0605+  07DD 59          	add d, a
0606+  07DE 38 00 00    	mov c, 0
0607+  07E1             mul_loop:
0608+  07E1 F6          	lodsb			; load ASCII to al
0609+  07E2 B9 00       	cmp al, 0
0610+  07E4 C6 F7 07    	je mul_exit
0611+  07E7 6F 30       	sub al, $30		; make into integer
0612+  07E9 22 00       	mov ah, 0
0613+  07EB 2A          	mov b, [d]
0614+  07EC AC          	mul a, b			; result in B since it fits in 16bits
0615+  07ED 11          	mov a, b
0616+  07EE 28          	mov b, c
0617+  07EF 54          	add a, b
0618+  07F0 39          	mov c, a
0619+  07F1 63 02 00    	sub d, 2
0620+  07F4 0A E1 07    	jmp mul_loop
0621+  07F7             mul_exit:
0622+  07F7 12          	mov a, c
0623+  07F8 E7          	pop d
0624+  07F9 E6          	pop c
0625+  07FA E5          	pop b
0626+  07FB EF          	pop si
0627+  07FC F9          	leave
0628+  07FD 09          	ret
0071   07FE             ; --- end include block
0072   07FE             
0073   07FE             .end
tasm: Number of errors = 0
