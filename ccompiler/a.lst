0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; a
0011   0405 26 05 00      mov b, 5
0012   0408 D7            push a
0013   0409 11            mov a, b
0014   040A 45 FF FF      mov [bp + -1], a ; a
0015   040D E4            pop a
0016   040E 52 02 00      sub sp, 2 ; b
0017   0411 26 0A 00      mov b, 10
0018   0414 D7            push a
0019   0415 11            mov a, b
0020   0416 45 FD FF      mov [bp + -3], a ; b
0021   0419 E4            pop a
0022   041A 52 02 00      sub sp, 2 ; c
0023   041D 26 00 00      mov b, 0
0024   0420 D7            push a
0025   0421 11            mov a, b
0026   0422 45 FB FF      mov [bp + -5], a ; c
0027   0425 E4            pop a
0028   0426 52 01 00      sub sp, 1 ; d
0029   0429 26 58 00      mov b, 'X'
0030   042C DB            push al
0031   042D 1B            mov al, bl
0032   042E 40 FA FF      mov [bp + -6], al ; d
0033   0431 E8            pop al
0034   0432 2C FF FF      mov b, [bp + -1] ; a
0035   0435 D7            push a
0036   0436 11            mov a, b
0037   0437 2C FD FF      mov b, [bp + -3] ; b
0038   043A 54            add a, b
0039   043B 27            mov b, a
0040   043C E4            pop a
0041   043D D7            push a
0042   043E 11            mov a, b
0043   043F 26 0F 00      mov b, 15
0044   0442 B0            cmp a, b
0045   0443 0E            lodflgs
0046   0444 87 01         and al, %00000001 ; ==
0047   0446 22 00         mov ah, 0
0048   0448 27            mov b, a
0049   0449 E4            pop a
0050   044A FD AB         swp b
0051   044C D8            push b
0052   044D 07 7A 09      call assert
0053   0450 51 02 00      add sp, 2
0054   0453 2C FD FF      mov b, [bp + -3] ; b
0055   0456 D7            push a
0056   0457 11            mov a, b
0057   0458 2C FF FF      mov b, [bp + -1] ; a
0058   045B 60            sub a, b
0059   045C 27            mov b, a
0060   045D E4            pop a
0061   045E D7            push a
0062   045F 11            mov a, b
0063   0460 26 05 00      mov b, 5
0064   0463 B0            cmp a, b
0065   0464 0E            lodflgs
0066   0465 87 01         and al, %00000001 ; ==
0067   0467 22 00         mov ah, 0
0068   0469 27            mov b, a
0069   046A E4            pop a
0070   046B FD AB         swp b
0071   046D D8            push b
0072   046E 07 7A 09      call assert
0073   0471 51 02 00      add sp, 2
0074   0474 2C FF FF      mov b, [bp + -1] ; a
0075   0477 D7            push a
0076   0478 11            mov a, b
0077   0479 2C FD FF      mov b, [bp + -3] ; b
0078   047C AC            mul a, b
0079   047D E4            pop a
0080   047E D7            push a
0081   047F 11            mov a, b
0082   0480 26 32 00      mov b, 50
0083   0483 B0            cmp a, b
0084   0484 0E            lodflgs
0085   0485 87 01         and al, %00000001 ; ==
0086   0487 22 00         mov ah, 0
0087   0489 27            mov b, a
0088   048A E4            pop a
0089   048B FD AB         swp b
0090   048D D8            push b
0091   048E 07 7A 09      call assert
0092   0491 51 02 00      add sp, 2
0093   0494 2C FD FF      mov b, [bp + -3] ; b
0094   0497 D7            push a
0095   0498 11            mov a, b
0096   0499 2C FF FF      mov b, [bp + -1] ; a
0097   049C AE            div a, b
0098   049D FD 78         mov g, a
0099   049F 11            mov a, b
0100   04A0 FD 27         mov b, g
0101   04A2 E4            pop a
0102   04A3 D7            push a
0103   04A4 11            mov a, b
0104   04A5 26 02 00      mov b, 2
0105   04A8 B0            cmp a, b
0106   04A9 0E            lodflgs
0107   04AA 87 01         and al, %00000001 ; ==
0108   04AC 22 00         mov ah, 0
0109   04AE 27            mov b, a
0110   04AF E4            pop a
0111   04B0 FD AB         swp b
0112   04B2 D8            push b
0113   04B3 07 7A 09      call assert
0114   04B6 51 02 00      add sp, 2
0115   04B9 2C FF FF      mov b, [bp + -1] ; a
0116   04BC D7            push a
0117   04BD 11            mov a, b
0118   04BE 2C FD FF      mov b, [bp + -3] ; b
0119   04C1 B0            cmp a, b
0120   04C2 0E            lodflgs
0121   04C3 87 02         and al, %00000010 ; <
0122   04C5 FD 9C         shr al
0123   04C7 22 00         mov ah, 0
0124   04C9 27            mov b, a
0125   04CA E4            pop a
0126   04CB FD AB         swp b
0127   04CD D8            push b
0128   04CE 07 7A 09      call assert
0129   04D1 51 02 00      add sp, 2
0130   04D4 2C FD FF      mov b, [bp + -3] ; b
0131   04D7 D7            push a
0132   04D8 11            mov a, b
0133   04D9 2C FF FF      mov b, [bp + -1] ; a
0134   04DC B0            cmp a, b
0135   04DD 0E            lodflgs
0136   04DE 87 03         and al, %00000011
0137   04E0 B9 00         cmp al, 0
0138   04E2 0E            lodflgs
0139   04E3 22 00         mov ah, 0
0140   04E5 27            mov b, a
0141   04E6 E4            pop a
0142   04E7 FD AB         swp b
0143   04E9 D8            push b
0144   04EA 07 7A 09      call assert
0145   04ED 51 02 00      add sp, 2
0146   04F0 2C FF FF      mov b, [bp + -1] ; a
0147   04F3 D7            push a
0148   04F4 11            mov a, b
0149   04F5 26 05 00      mov b, 5
0150   04F8 B0            cmp a, b
0151   04F9 0E            lodflgs
0152   04FA 87 03         and al, %00000011 ; <=
0153   04FC B9 00         cmp al, 0
0154   04FE 0E            lodflgs
0155   04FF 8F 01         xor al, %00000001
0156   0501 22 00         mov ah, 0
0157   0503 27            mov b, a
0158   0504 E4            pop a
0159   0505 FD AB         swp b
0160   0507 D8            push b
0161   0508 07 7A 09      call assert
0162   050B 51 02 00      add sp, 2
0163   050E 2C FD FF      mov b, [bp + -3] ; b
0164   0511 D7            push a
0165   0512 11            mov a, b
0166   0513 26 0A 00      mov b, 10
0167   0516 B0            cmp a, b
0168   0517 0E            lodflgs
0169   0518 87 03         and al, %00000011
0170   051A 8F 02         xor al, %00000010 ; >=
0171   051C B9 00         cmp al, 0
0172   051E 0E            lodflgs
0173   051F 8F 01         xor al, %00000001
0174   0521 22 00         mov ah, 0
0175   0523 27            mov b, a
0176   0524 E4            pop a
0177   0525 FD AB         swp b
0178   0527 D8            push b
0179   0528 07 7A 09      call assert
0180   052B 51 02 00      add sp, 2
0181   052E 2C FF FF      mov b, [bp + -1] ; a
0182   0531 D7            push a
0183   0532 11            mov a, b
0184   0533 26 05 00      mov b, 5
0185   0536 B0            cmp a, b
0186   0537 0E            lodflgs
0187   0538 87 01         and al, %00000001 ; ==
0188   053A 22 00         mov ah, 0
0189   053C 27            mov b, a
0190   053D E4            pop a
0191   053E FD AB         swp b
0192   0540 D8            push b
0193   0541 07 7A 09      call assert
0194   0544 51 02 00      add sp, 2
0195   0547 2C FD FF      mov b, [bp + -3] ; b
0196   054A D7            push a
0197   054B 11            mov a, b
0198   054C 26 05 00      mov b, 5
0199   054F B0            cmp a, b
0200   0550 0E            lodflgs
0201   0551 87 01         and al, %00000001
0202   0553 8F 01         xor al, %00000001 ; !=
0203   0555 22 00         mov ah, 0
0204   0557 27            mov b, a
0205   0558 E4            pop a
0206   0559 FD AB         swp b
0207   055B D8            push b
0208   055C 07 7A 09      call assert
0209   055F 51 02 00      add sp, 2
0210   0562 2C FF FF      mov b, [bp + -1] ; a
0211   0565 DB            push al
0212   0566 C0 00 00      cmp b, 0
0213   0569 0E            lodflgs ; transform condition into a single bit
0214   056A 2C FD FF      mov b, [bp + -3] ; b
0215   056D DB            push al
0216   056E C0 00 00      cmp b, 0
0217   0571 0E            lodflgs
0218   0572 EA            pop bl ; matches previous 'push al'
0219   0573 8C            or al, bl
0220   0574 8F 01         xor al, %00000001
0221   0576 2F            mov bl, al
0222   0577 A7 00         mov bh, 0
0223   0579 E8            pop al
0224   057A FD AB         swp b
0225   057C D8            push b
0226   057D 07 7A 09      call assert
0227   0580 51 02 00      add sp, 2
0228   0583 2C FF FF      mov b, [bp + -1] ; a
0229   0586 D7            push a
0230   0587 11            mov a, b
0231   0588 2C FB FF      mov b, [bp + -5] ; c
0232   058B 8A            or a, b
0233   058C 27            mov b, a
0234   058D E4            pop a
0235   058E FD AB         swp b
0236   0590 D8            push b
0237   0591 07 7A 09      call assert
0238   0594 51 02 00      add sp, 2
0239   0597 2C FB FF      mov b, [bp + -5] ; c
0240   059A DB            push al
0241   059B C0 00 00      cmp b, 0
0242   059E 0E            lodflgs
0243   059F 87 01         and al, %00000001 ; transform logical not condition result into a single bit
0244   05A1 2F            mov bl, al
0245   05A2 A7 00         mov bh, 0
0246   05A4 E8            pop al
0247   05A5 FD AB         swp b
0248   05A7 D8            push b
0249   05A8 07 7A 09      call assert
0250   05AB 51 02 00      add sp, 2
0251   05AE 2C FF FF      mov b, [bp + -1] ; a
0252   05B1 D7            push a
0253   05B2 11            mov a, b
0254   05B3 2C FD FF      mov b, [bp + -3] ; b
0255   05B6 86            and a, b
0256   05B7 27            mov b, a
0257   05B8 E4            pop a
0258   05B9 D7            push a
0259   05BA 11            mov a, b
0260   05BB 26 00 00      mov b, 0
0261   05BE B0            cmp a, b
0262   05BF 0E            lodflgs
0263   05C0 87 01         and al, %00000001 ; ==
0264   05C2 22 00         mov ah, 0
0265   05C4 27            mov b, a
0266   05C5 E4            pop a
0267   05C6 FD AB         swp b
0268   05C8 D8            push b
0269   05C9 07 7A 09      call assert
0270   05CC 51 02 00      add sp, 2
0271   05CF 2C FF FF      mov b, [bp + -1] ; a
0272   05D2 D7            push a
0273   05D3 11            mov a, b
0274   05D4 2C FD FF      mov b, [bp + -3] ; b
0275   05D7 8A            or a, b
0276   05D8 27            mov b, a
0277   05D9 E4            pop a
0278   05DA D7            push a
0279   05DB 11            mov a, b
0280   05DC 26 0F 00      mov b, 15
0281   05DF B0            cmp a, b
0282   05E0 0E            lodflgs
0283   05E1 87 01         and al, %00000001 ; ==
0284   05E3 22 00         mov ah, 0
0285   05E5 27            mov b, a
0286   05E6 E4            pop a
0287   05E7 FD AB         swp b
0288   05E9 D8            push b
0289   05EA 07 7A 09      call assert
0290   05ED 51 02 00      add sp, 2
0291   05F0 2C FF FF      mov b, [bp + -1] ; a
0292   05F3 D7            push a
0293   05F4 11            mov a, b
0294   05F5 2C FD FF      mov b, [bp + -3] ; b
0295   05F8 8E            xor a, b
0296   05F9 27            mov b, a
0297   05FA E4            pop a
0298   05FB D7            push a
0299   05FC 11            mov a, b
0300   05FD 26 0F 00      mov b, 15
0301   0600 B0            cmp a, b
0302   0601 0E            lodflgs
0303   0602 87 01         and al, %00000001 ; ==
0304   0604 22 00         mov ah, 0
0305   0606 27            mov b, a
0306   0607 E4            pop a
0307   0608 FD AB         swp b
0308   060A D8            push b
0309   060B 07 7A 09      call assert
0310   060E 51 02 00      add sp, 2
0311   0611 2C FF FF      mov b, [bp + -1] ; a
0312   0614 97            not b
0313   0615 D7            push a
0314   0616 11            mov a, b
0315   0617 26 06 00      mov b, 6
0316   061A FD 97         neg b
0317   061C B0            cmp a, b
0318   061D 0E            lodflgs
0319   061E 87 01         and al, %00000001 ; ==
0320   0620 22 00         mov ah, 0
0321   0622 27            mov b, a
0322   0623 E4            pop a
0323   0624 FD AB         swp b
0324   0626 D8            push b
0325   0627 07 7A 09      call assert
0326   062A 51 02 00      add sp, 2
0327   062D 2C FF FF      mov b, [bp + -1] ; a
0328   0630 D7            push a
0329   0631 11            mov a, b
0330   0632 26 01 00      mov b, 1
0331   0635 D9            push c
0332   0636 FD 39         mov c, b
0333   0638 27            mov b, a
0334   0639 9F            shl b, cl
0335   063A E6            pop c
0336   063B E4            pop a
0337   063C D7            push a
0338   063D 11            mov a, b
0339   063E 26 0A 00      mov b, 10
0340   0641 B0            cmp a, b
0341   0642 0E            lodflgs
0342   0643 87 01         and al, %00000001 ; ==
0343   0645 22 00         mov ah, 0
0344   0647 27            mov b, a
0345   0648 E4            pop a
0346   0649 FD AB         swp b
0347   064B D8            push b
0348   064C 07 7A 09      call assert
0349   064F 51 02 00      add sp, 2
0350   0652 2C FD FF      mov b, [bp + -3] ; b
0351   0655 D7            push a
0352   0656 11            mov a, b
0353   0657 26 01 00      mov b, 1
0354   065A D9            push c
0355   065B FD 39         mov c, b
0356   065D 27            mov b, a
0357   065E A3            shr b, cl
0358   065F E6            pop c
0359   0660 E4            pop a
0360   0661 D7            push a
0361   0662 11            mov a, b
0362   0663 26 05 00      mov b, 5
0363   0666 B0            cmp a, b
0364   0667 0E            lodflgs
0365   0668 87 01         and al, %00000001 ; ==
0366   066A 22 00         mov ah, 0
0367   066C 27            mov b, a
0368   066D E4            pop a
0369   066E FD AB         swp b
0370   0670 D8            push b
0371   0671 07 7A 09      call assert
0372   0674 51 02 00      add sp, 2
0373   0677 2C FF FF      mov b, [bp + -1] ; a
0374   067A D7            push a
0375   067B 11            mov a, b
0376   067C 45 FB FF      mov [bp + -5], a ; c
0377   067F E4            pop a
0378   0680 2C FB FF      mov b, [bp + -5] ; c
0379   0683 D7            push a
0380   0684 11            mov a, b
0381   0685 26 05 00      mov b, 5
0382   0688 B0            cmp a, b
0383   0689 0E            lodflgs
0384   068A 87 01         and al, %00000001 ; ==
0385   068C 22 00         mov ah, 0
0386   068E 27            mov b, a
0387   068F E4            pop a
0388   0690 FD AB         swp b
0389   0692 D8            push b
0390   0693 07 7A 09      call assert
0391   0696 51 02 00      add sp, 2
0392   0699 2C FB FF      mov b, [bp + -5] ; c
0393   069C D7            push a
0394   069D 11            mov a, b
0395   069E 2C FF FF      mov b, [bp + -1] ; a
0396   06A1 54            add a, b
0397   06A2 27            mov b, a
0398   06A3 E4            pop a
0399   06A4 D7            push a
0400   06A5 11            mov a, b
0401   06A6 45 FB FF      mov [bp + -5], a ; c
0402   06A9 E4            pop a
0403   06AA 2C FB FF      mov b, [bp + -5] ; c
0404   06AD D7            push a
0405   06AE 11            mov a, b
0406   06AF 26 0A 00      mov b, 10
0407   06B2 B0            cmp a, b
0408   06B3 0E            lodflgs
0409   06B4 87 01         and al, %00000001 ; ==
0410   06B6 22 00         mov ah, 0
0411   06B8 27            mov b, a
0412   06B9 E4            pop a
0413   06BA FD AB         swp b
0414   06BC D8            push b
0415   06BD 07 7A 09      call assert
0416   06C0 51 02 00      add sp, 2
0417   06C3 2C FB FF      mov b, [bp + -5] ; c
0418   06C6 D7            push a
0419   06C7 11            mov a, b
0420   06C8 2C FF FF      mov b, [bp + -1] ; a
0421   06CB 54            add a, b
0422   06CC 27            mov b, a
0423   06CD E4            pop a
0424   06CE D7            push a
0425   06CF 11            mov a, b
0426   06D0 45 FB FF      mov [bp + -5], a ; c
0427   06D3 E4            pop a
0428   06D4 2C FB FF      mov b, [bp + -5] ; c
0429   06D7 D7            push a
0430   06D8 11            mov a, b
0431   06D9 26 0F 00      mov b, 15
0432   06DC B0            cmp a, b
0433   06DD 0E            lodflgs
0434   06DE 87 01         and al, %00000001 ; ==
0435   06E0 22 00         mov ah, 0
0436   06E2 27            mov b, a
0437   06E3 E4            pop a
0438   06E4 FD AB         swp b
0439   06E6 D8            push b
0440   06E7 07 7A 09      call assert
0441   06EA 51 02 00      add sp, 2
0442   06ED 2C FB FF      mov b, [bp + -5] ; c
0443   06F0 D7            push a
0444   06F1 11            mov a, b
0445   06F2 2C FF FF      mov b, [bp + -1] ; a
0446   06F5 AC            mul a, b
0447   06F6 E4            pop a
0448   06F7 D7            push a
0449   06F8 11            mov a, b
0450   06F9 45 FB FF      mov [bp + -5], a ; c
0451   06FC E4            pop a
0452   06FD 2C FB FF      mov b, [bp + -5] ; c
0453   0700 D7            push a
0454   0701 11            mov a, b
0455   0702 26 4B 00      mov b, 75
0456   0705 B0            cmp a, b
0457   0706 0E            lodflgs
0458   0707 87 01         and al, %00000001 ; ==
0459   0709 22 00         mov ah, 0
0460   070B 27            mov b, a
0461   070C E4            pop a
0462   070D FD AB         swp b
0463   070F D8            push b
0464   0710 07 7A 09      call assert
0465   0713 51 02 00      add sp, 2
0466   0716 2C FB FF      mov b, [bp + -5] ; c
0467   0719 D7            push a
0468   071A 11            mov a, b
0469   071B 2C FF FF      mov b, [bp + -1] ; a
0470   071E AE            div a, b
0471   071F FD 78         mov g, a
0472   0721 11            mov a, b
0473   0722 FD 27         mov b, g
0474   0724 E4            pop a
0475   0725 D7            push a
0476   0726 11            mov a, b
0477   0727 45 FB FF      mov [bp + -5], a ; c
0478   072A E4            pop a
0479   072B 2C FB FF      mov b, [bp + -5] ; c
0480   072E D7            push a
0481   072F 11            mov a, b
0482   0730 26 0F 00      mov b, 15
0483   0733 B0            cmp a, b
0484   0734 0E            lodflgs
0485   0735 87 01         and al, %00000001 ; ==
0486   0737 22 00         mov ah, 0
0487   0739 27            mov b, a
0488   073A E4            pop a
0489   073B FD AB         swp b
0490   073D D8            push b
0491   073E 07 7A 09      call assert
0492   0741 51 02 00      add sp, 2
0493   0744 2C FB FF      mov b, [bp + -5] ; c
0494   0747 D7            push a
0495   0748 11            mov a, b
0496   0749 2C FF FF      mov b, [bp + -1] ; a
0497   074C AE            div a, b
0498   074D E4            pop a
0499   074E D7            push a
0500   074F 11            mov a, b
0501   0750 45 FB FF      mov [bp + -5], a ; c
0502   0753 E4            pop a
0503   0754 2C FB FF      mov b, [bp + -5] ; c
0504   0757 D7            push a
0505   0758 11            mov a, b
0506   0759 26 00 00      mov b, 0
0507   075C B0            cmp a, b
0508   075D 0E            lodflgs
0509   075E 87 01         and al, %00000001 ; ==
0510   0760 22 00         mov ah, 0
0511   0762 27            mov b, a
0512   0763 E4            pop a
0513   0764 FD AB         swp b
0514   0766 D8            push b
0515   0767 07 7A 09      call assert
0516   076A 51 02 00      add sp, 2
0517   076D 2C FB FF      mov b, [bp + -5] ; c
0518   0770 D7            push a
0519   0771 11            mov a, b
0520   0772 26 01 00      mov b, 1
0521   0775 D9            push c
0522   0776 FD 39         mov c, b
0523   0778 27            mov b, a
0524   0779 9F            shl b, cl
0525   077A E6            pop c
0526   077B E4            pop a
0527   077C D7            push a
0528   077D 11            mov a, b
0529   077E 45 FB FF      mov [bp + -5], a ; c
0530   0781 E4            pop a
0531   0782 2C FB FF      mov b, [bp + -5] ; c
0532   0785 D7            push a
0533   0786 11            mov a, b
0534   0787 26 00 00      mov b, 0
0535   078A B0            cmp a, b
0536   078B 0E            lodflgs
0537   078C 87 01         and al, %00000001 ; ==
0538   078E 22 00         mov ah, 0
0539   0790 27            mov b, a
0540   0791 E4            pop a
0541   0792 FD AB         swp b
0542   0794 D8            push b
0543   0795 07 7A 09      call assert
0544   0798 51 02 00      add sp, 2
0545   079B 2C FB FF      mov b, [bp + -5] ; c
0546   079E D7            push a
0547   079F 11            mov a, b
0548   07A0 26 01 00      mov b, 1
0549   07A3 8A            or a, b
0550   07A4 27            mov b, a
0551   07A5 E4            pop a
0552   07A6 D7            push a
0553   07A7 11            mov a, b
0554   07A8 45 FB FF      mov [bp + -5], a ; c
0555   07AB E4            pop a
0556   07AC 2C FB FF      mov b, [bp + -5] ; c
0557   07AF D7            push a
0558   07B0 11            mov a, b
0559   07B1 26 01 00      mov b, 1
0560   07B4 B0            cmp a, b
0561   07B5 0E            lodflgs
0562   07B6 87 01         and al, %00000001 ; ==
0563   07B8 22 00         mov ah, 0
0564   07BA 27            mov b, a
0565   07BB E4            pop a
0566   07BC FD AB         swp b
0567   07BE D8            push b
0568   07BF 07 7A 09      call assert
0569   07C2 51 02 00      add sp, 2
0570   07C5             _if1_cond:
0571   07C5 2C FF FF      mov b, [bp + -1] ; a
0572   07C8 D7            push a
0573   07C9 11            mov a, b
0574   07CA 2C FD FF      mov b, [bp + -3] ; b
0575   07CD B0            cmp a, b
0576   07CE 0E            lodflgs
0577   07CF 87 02         and al, %00000010 ; <
0578   07D1 FD 9C         shr al
0579   07D3 22 00         mov ah, 0
0580   07D5 27            mov b, a
0581   07D6 E4            pop a
0582   07D7 C0 00 00      cmp b, 0
0583   07DA C6 EC 07      je _if1_else
0584   07DD             _if1_true:
0585   07DD 26 01 00      mov b, 1
0586   07E0 FD AB         swp b
0587   07E2 D8            push b
0588   07E3 07 7A 09      call assert
0589   07E6 51 02 00      add sp, 2
0590   07E9 0A F8 07      jmp _if1_exit
0591   07EC             _if1_else:
0592   07EC 26 00 00      mov b, 0
0593   07EF FD AB         swp b
0594   07F1 D8            push b
0595   07F2 07 7A 09      call assert
0596   07F5 51 02 00      add sp, 2
0597   07F8             _if1_exit:
0598   07F8             _switch2_expr:
0599   07F8 34 FA FF      mov bl, [bp + -6] ; d
0600   07FB A7 00         mov bh, 0
0601   07FD             _switch2_comparisons:
0602   07FD C1 58         cmp bl, 'X'
0603   07FF C6 0A 08      je _switch2_case0
0604   0802 C1 59         cmp bl, 'Y'
0605   0804 C6 19 08      je _switch2_case1
0606   0807 0A 28 08      jmp _switch2_default
0607   080A             _switch2_case0:
0608   080A 26 01 00      mov b, 1
0609   080D FD AB         swp b
0610   080F D8            push b
0611   0810 07 7A 09      call assert
0612   0813 51 02 00      add sp, 2
0613   0816 0A 37 08      jmp _switch2_exit ; case break
0614   0819             _switch2_case1:
0615   0819 26 00 00      mov b, 0
0616   081C FD AB         swp b
0617   081E D8            push b
0618   081F 07 7A 09      call assert
0619   0822 51 02 00      add sp, 2
0620   0825 0A 37 08      jmp _switch2_exit ; case break
0621   0828             _switch2_default:
0622   0828 26 00 00      mov b, 0
0623   082B FD AB         swp b
0624   082D D8            push b
0625   082E 07 7A 09      call assert
0626   0831 51 02 00      add sp, 2
0627   0834 0A 37 08      jmp _switch2_exit ; case break
0628   0837             _switch2_exit:
0629   0837 52 02 00      sub sp, 2 ; i
0630   083A 26 00 00      mov b, 0
0631   083D D7            push a
0632   083E 11            mov a, b
0633   083F 45 F8 FF      mov [bp + -8], a ; i
0634   0842 E4            pop a
0635   0843             _while3_cond:
0636   0843 2C F8 FF      mov b, [bp + -8] ; i
0637   0846 D7            push a
0638   0847 11            mov a, b
0639   0848 26 05 00      mov b, 5
0640   084B B0            cmp a, b
0641   084C 0E            lodflgs
0642   084D 87 02         and al, %00000010 ; <
0643   084F FD 9C         shr al
0644   0851 22 00         mov ah, 0
0645   0853 27            mov b, a
0646   0854 E4            pop a
0647   0855 C0 00 00      cmp b, 0
0648   0858 C6 6D 08      je _while3_exit
0649   085B             _while3_block:
0650   085B 2C F8 FF      mov b, [bp + -8] ; i
0651   085E D7            push a
0652   085F 11            mov a, b
0653   0860 FD 77         inc b
0654   0862 D7            push a
0655   0863 11            mov a, b
0656   0864 45 F8 FF      mov [bp + -8], a ; i
0657   0867 E4            pop a
0658   0868 27            mov b, a
0659   0869 E4            pop a
0660   086A 0A 43 08      jmp _while3_cond
0661   086D             _while3_exit:
0662   086D 2C F8 FF      mov b, [bp + -8] ; i
0663   0870 D7            push a
0664   0871 11            mov a, b
0665   0872 26 05 00      mov b, 5
0666   0875 B0            cmp a, b
0667   0876 0E            lodflgs
0668   0877 87 01         and al, %00000001 ; ==
0669   0879 22 00         mov ah, 0
0670   087B 27            mov b, a
0671   087C E4            pop a
0672   087D FD AB         swp b
0673   087F D8            push b
0674   0880 07 7A 09      call assert
0675   0883 51 02 00      add sp, 2
0676   0886 52 02 00      sub sp, 2 ; j
0677   0889 26 00 00      mov b, 0
0678   088C D7            push a
0679   088D 11            mov a, b
0680   088E 45 F6 FF      mov [bp + -10], a ; j
0681   0891 E4            pop a
0682   0892             _do4_block:
0683   0892 2C F6 FF      mov b, [bp + -10] ; j
0684   0895 D7            push a
0685   0896 11            mov a, b
0686   0897 FD 77         inc b
0687   0899 D7            push a
0688   089A 11            mov a, b
0689   089B 45 F6 FF      mov [bp + -10], a ; j
0690   089E E4            pop a
0691   089F 27            mov b, a
0692   08A0 E4            pop a
0693   08A1             _do4_cond:
0694   08A1 2C F6 FF      mov b, [bp + -10] ; j
0695   08A4 D7            push a
0696   08A5 11            mov a, b
0697   08A6 26 05 00      mov b, 5
0698   08A9 B0            cmp a, b
0699   08AA 0E            lodflgs
0700   08AB 87 02         and al, %00000010 ; <
0701   08AD FD 9C         shr al
0702   08AF 22 00         mov ah, 0
0703   08B1 27            mov b, a
0704   08B2 E4            pop a
0705   08B3 C0 01 00      cmp b, 1
0706   08B6 C6 92 08      je _do4_block
0707   08B9             _do4_exit:
0708   08B9 2C F6 FF      mov b, [bp + -10] ; j
0709   08BC D7            push a
0710   08BD 11            mov a, b
0711   08BE 26 05 00      mov b, 5
0712   08C1 B0            cmp a, b
0713   08C2 0E            lodflgs
0714   08C3 87 01         and al, %00000001 ; ==
0715   08C5 22 00         mov ah, 0
0716   08C7 27            mov b, a
0717   08C8 E4            pop a
0718   08C9 FD AB         swp b
0719   08CB D8            push b
0720   08CC 07 7A 09      call assert
0721   08CF 51 02 00      add sp, 2
0722   08D2 52 02 00      sub sp, 2 ; k
0723   08D5             _for5_init:
0724   08D5 26 00 00      mov b, 0
0725   08D8 D7            push a
0726   08D9 11            mov a, b
0727   08DA 45 F4 FF      mov [bp + -12], a ; k
0728   08DD E4            pop a
0729   08DE             _for5_cond:
0730   08DE 2C F4 FF      mov b, [bp + -12] ; k
0731   08E1 D7            push a
0732   08E2 11            mov a, b
0733   08E3 26 05 00      mov b, 5
0734   08E6 B0            cmp a, b
0735   08E7 0E            lodflgs
0736   08E8 87 02         and al, %00000010 ; <
0737   08EA FD 9C         shr al
0738   08EC 22 00         mov ah, 0
0739   08EE 27            mov b, a
0740   08EF E4            pop a
0741   08F0 C0 00 00      cmp b, 0
0742   08F3 C6 4C 09      je _for5_exit
0743   08F6             _for5_block:
0744   08F6 2C F4 FF      mov b, [bp + -12] ; k
0745   08F9 D7            push a
0746   08FA 11            mov a, b
0747   08FB 26 00 00      mov b, 0
0748   08FE B0            cmp a, b
0749   08FF 0E            lodflgs
0750   0900 87 03         and al, %00000011
0751   0902 8F 02         xor al, %00000010 ; >=
0752   0904 B9 00         cmp al, 0
0753   0906 0E            lodflgs
0754   0907 8F 01         xor al, %00000001
0755   0909 22 00         mov ah, 0
0756   090B 27            mov b, a
0757   090C E4            pop a
0758   090D DB            push al
0759   090E C0 00 00      cmp b, 0
0760   0911 0E            lodflgs ; transform condition into a single bit
0761   0912 2C F4 FF      mov b, [bp + -12] ; k
0762   0915 D7            push a
0763   0916 11            mov a, b
0764   0917 26 05 00      mov b, 5
0765   091A B0            cmp a, b
0766   091B 0E            lodflgs
0767   091C 87 02         and al, %00000010 ; <
0768   091E FD 9C         shr al
0769   0920 22 00         mov ah, 0
0770   0922 27            mov b, a
0771   0923 E4            pop a
0772   0924 DB            push al
0773   0925 C0 00 00      cmp b, 0
0774   0928 0E            lodflgs
0775   0929 EA            pop bl ; matches previous 'push al'
0776   092A 8C            or al, bl
0777   092B 8F 01         xor al, %00000001
0778   092D 2F            mov bl, al
0779   092E A7 00         mov bh, 0
0780   0930 E8            pop al
0781   0931 FD AB         swp b
0782   0933 D8            push b
0783   0934 07 7A 09      call assert
0784   0937 51 02 00      add sp, 2
0785   093A             _for5_update:
0786   093A 2C F4 FF      mov b, [bp + -12] ; k
0787   093D D7            push a
0788   093E 11            mov a, b
0789   093F FD 77         inc b
0790   0941 D7            push a
0791   0942 11            mov a, b
0792   0943 45 F4 FF      mov [bp + -12], a ; k
0793   0946 E4            pop a
0794   0947 27            mov b, a
0795   0948 E4            pop a
0796   0949 0A DE 08      jmp _for5_cond
0797   094C             _for5_exit:
0798   094C 2C FF FF      mov b, [bp + -1] ; a
0799   094F FD AB         swp b
0800   0951 D8            push b
0801   0952 2C FD FF      mov b, [bp + -3] ; b
0802   0955 FD AB         swp b
0803   0957 D8            push b
0804   0958 07 CD 09      call add
0805   095B 51 04 00      add sp, 4
0806   095E D7            push a
0807   095F 11            mov a, b
0808   0960 26 0F 00      mov b, 15
0809   0963 B0            cmp a, b
0810   0964 0E            lodflgs
0811   0965 87 01         and al, %00000001 ; ==
0812   0967 22 00         mov ah, 0
0813   0969 27            mov b, a
0814   096A E4            pop a
0815   096B FD AB         swp b
0816   096D D8            push b
0817   096E 07 7A 09      call assert
0818   0971 51 02 00      add sp, 2
0819   0974 26 00 00      mov b, 0
0820   0977 F9            leave
0821   0978 05 0B         syscall sys_terminate_proc
0822   097A             
0823   097A             assert:
0824   097A D2            push bp
0825   097B 9B            mov bp, sp
0826   097C             _if6_cond:
0827   097C 2C 05 00      mov b, [bp + 5] ; i
0828   097F C0 00 00      cmp b, 0
0829   0982 C6 94 09      je _if6_else
0830   0985             _if6_true:
0831   0985 26 1A 0A      mov b, __string_0 ; "Passed."
0832   0988 FD AB         swp b
0833   098A D8            push b
0834   098B 07 0D 0A      call print
0835   098E 51 02 00      add sp, 2
0836   0991 0A A0 09      jmp _if6_exit
0837   0994             _if6_else:
0838   0994 26 22 0A      mov b, __string_1 ; "FAILED."
0839   0997 FD AB         swp b
0840   0999 D8            push b
0841   099A 07 0D 0A      call print
0842   099D 51 02 00      add sp, 2
0843   09A0             _if6_exit:
0844   09A0 26 2A 0A      mov b, __string_2 ; "Index: "
0845   09A3 FD AB         swp b
0846   09A5 D8            push b
0847   09A6 29 18 0A      mov b, [__index] ; index
0848   09A9 FD AB         swp b
0849   09AB D8            push b
0850   09AC 07 F6 09      call printn
0851   09AF 51 04 00      add sp, 4
0852   09B2 26 32 0A      mov b, __string_3 ; "\n"
0853   09B5 FD AB         swp b
0854   09B7 D8            push b
0855   09B8 07 0D 0A      call print
0856   09BB 51 02 00      add sp, 2
0857   09BE 29 18 0A      mov b, [__index] ; index
0858   09C1 D7            push a
0859   09C2 11            mov a, b
0860   09C3 FD 77         inc b
0861   09C5 FD 42 18 0A   mov [__index], b
0862   09C9 27            mov b, a
0863   09CA E4            pop a
0864   09CB F9            leave
0865   09CC 09            ret
0866   09CD             
0867   09CD             add:
0868   09CD D2            push bp
0869   09CE 9B            mov bp, sp
0870   09CF 2C 07 00      mov b, [bp + 7] ; x
0871   09D2 D7            push a
0872   09D3 11            mov a, b
0873   09D4 2C 05 00      mov b, [bp + 5] ; y
0874   09D7 54            add a, b
0875   09D8 27            mov b, a
0876   09D9 E4            pop a
0877   09DA F9            leave
0878   09DB 09            ret
0879   09DC             
0880   09DC             scann:
0881   09DC D2            push bp
0882   09DD 9B            mov bp, sp
0883   09DE 52 02 00      sub sp, 2 ; m
0884   09E1             
0885   09E1             ; --- BEGIN INLINE ASM BLOCK
0886   09E1 07 7E 0D      call scan_u16d
0887   09E4 45 FF FF      mov [bp + -1], a
0888   09E7             ; --- END INLINE ASM BLOCK
0889   09E7             
0890   09E7 FA 05 00      lea d, [bp + 5] ; n
0891   09EA 2A            mov b, [d]
0892   09EB D8            push b
0893   09EC 2C FF FF      mov b, [bp + -1] ; m
0894   09EF E7            pop d
0895   09F0 D7            push a
0896   09F1 11            mov a, b
0897   09F2 43            mov [d], a
0898   09F3 E4            pop a
0899   09F4 F9            leave
0900   09F5 09            ret
0901   09F6             
0902   09F6             printn:
0903   09F6 D2            push bp
0904   09F7 9B            mov bp, sp
0905   09F8 FA 07 00      lea d, [bp + 7] ; s
0906   09FB 2A            mov b, [d]
0907   09FC FD AB         swp b
0908   09FE D8            push b
0909   09FF 07 0D 0A      call print
0910   0A02 51 02 00      add sp, 2
0911   0A05             
0912   0A05             ; --- BEGIN INLINE ASM BLOCK
0913   0A05 17 05 00      mov a, [bp + 5]
0914   0A08 07 A9 0C      call print_u16d
0915   0A0B             ; --- END INLINE ASM BLOCK
0916   0A0B             
0917   0A0B F9            leave
0918   0A0C 09            ret
0919   0A0D             
0920   0A0D             print:
0921   0A0D D2            push bp
0922   0A0E 9B            mov bp, sp
0923   0A0F             
0924   0A0F             ; --- BEGIN INLINE ASM BLOCK
0925   0A0F 17 05 00      mov a, [bp + 5]
0926   0A12 3C            mov d, a
0927   0A13 07 80 0C      call puts
0928   0A16             ; --- END INLINE ASM BLOCK
0929   0A16             
0930   0A16 F9            leave
0931   0A17 09            ret
0932   0A18             ; --- END TEXT BLOCK
0933   0A18             
0934   0A18             ; --- BEGIN DATA BLOCK
0935   0A18 00 00       __index: .dw 0
0936   0A1A 50 61 73 73 __string_0: .db "Passed.", 0
0936   0A1E 65 64 2E 00 
0937   0A22 46 41 49 4C __string_1: .db "FAILED.", 0
0937   0A26 45 44 2E 00 
0938   0A2A 49 6E 64 65 __string_2: .db "Index: ", 0
0938   0A2E 78 3A 20 00 
0939   0A32 0A 00       __string_3: .db "\n", 0
0940   0A34             ; --- END DATA BLOCK
0941   0A34             
0942   0A34             ; --- BEGIN INCLUDE BLOCK
0943   0A34             .include "lib/stdio.asm"
0001+  0A34             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0A34             ; stdio.s
0003+  0A34             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0A34             .include "lib/string.asm"
0001++ 0A34             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0A34             ; string.s
0003++ 0A34             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0A34             
0005++ 0A34             
0006++ 0A34             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0A34             ; strrev
0008++ 0A34             ; reverse a string
0009++ 0A34             ; D = string address
0010++ 0A34             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0A34             ; 01234
0012++ 0A34             strrev:
0013++ 0A34 4B          	pusha
0014++ 0A35 07 7B 0A    	call strlen	; length in C
0015++ 0A38 12          	mov a, c
0016++ 0A39 AF 01 00    	cmp a, 1
0017++ 0A3C D0 56 0A    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0A3F 7D          	dec a
0019++ 0A40 FD 4E       	mov si, d	; beginning of string
0020++ 0A42 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0A44 59          	add d, a	; end of string
0022++ 0A45 12          	mov a, c
0023++ 0A46 FD 9B       	shr a		; divide by 2
0024++ 0A48 39          	mov c, a	; C now counts the steps
0025++ 0A49             strrev_L0:
0026++ 0A49 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0A4A F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0A4B 3E          	mov [d], al	; store left char into right side
0029++ 0A4C 1B          	mov al, bl
0030++ 0A4D F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0A4E 7E          	dec c
0032++ 0A4F 7F          	dec d
0033++ 0A50 C2 00 00    	cmp c, 0
0034++ 0A53 C7 49 0A    	jne strrev_L0
0035++ 0A56             strrev_end:
0036++ 0A56 4C          	popa
0037++ 0A57 09          	ret
0038++ 0A58             	
0039++ 0A58             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0A58             ; strchr
0041++ 0A58             ; search string in D for char in AL
0042++ 0A58             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0A58             strchr:
0044++ 0A58             strchr_L0:
0045++ 0A58 32          	mov bl, [d]
0046++ 0A59 C1 00       	cmp bl, 0
0047++ 0A5B C6 66 0A    	je strchr_end
0048++ 0A5E BA          	cmp al, bl
0049++ 0A5F C6 66 0A    	je strchr_end
0050++ 0A62 79          	inc d
0051++ 0A63 0A 58 0A    	jmp strchr_L0
0052++ 0A66             strchr_end:
0053++ 0A66 1B          	mov al, bl
0054++ 0A67 09          	ret
0055++ 0A68             
0056++ 0A68             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0A68             ; strstr
0058++ 0A68             ; find sub-string
0059++ 0A68             ; str1 in SI
0060++ 0A68             ; str2 in DI
0061++ 0A68             ; SI points to end of source string
0062++ 0A68             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0A68             strstr:
0064++ 0A68 DB          	push al
0065++ 0A69 DA          	push d
0066++ 0A6A E3          	push di
0067++ 0A6B             strstr_loop:
0068++ 0A6B F3          	cmpsb					; compare a byte of the strings
0069++ 0A6C C7 77 0A    	jne strstr_ret
0070++ 0A6F FC 00 00    	lea d, [di + 0]
0071++ 0A72 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0A74 C7 6B 0A    	jne strstr_loop				; equal chars but not at end
0073++ 0A77             strstr_ret:
0074++ 0A77 F0          	pop di
0075++ 0A78 E7          	pop d
0076++ 0A79 E8          	pop al
0077++ 0A7A 09          	ret
0078++ 0A7B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0A7B             ; length of null terminated string
0080++ 0A7B             ; result in C
0081++ 0A7B             ; pointer in D
0082++ 0A7B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0A7B             strlen:
0084++ 0A7B DA          	push d
0085++ 0A7C 38 00 00    	mov c, 0
0086++ 0A7F             strlen_L1:
0087++ 0A7F BD 00       	cmp byte [d], 0
0088++ 0A81 C6 89 0A    	je strlen_ret
0089++ 0A84 79          	inc d
0090++ 0A85 78          	inc c
0091++ 0A86 0A 7F 0A    	jmp strlen_L1
0092++ 0A89             strlen_ret:
0093++ 0A89 E7          	pop d
0094++ 0A8A 09          	ret
0095++ 0A8B             
0096++ 0A8B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0A8B             ; STRCMP
0098++ 0A8B             ; compare two strings
0099++ 0A8B             ; str1 in SI
0100++ 0A8B             ; str2 in DI
0101++ 0A8B             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0A8B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0A8B             strcmp:
0104++ 0A8B DB          	push al
0105++ 0A8C DA          	push d
0106++ 0A8D E3          	push di
0107++ 0A8E E2          	push si
0108++ 0A8F             strcmp_loop:
0109++ 0A8F F3          	cmpsb					; compare a byte of the strings
0110++ 0A90 C7 9B 0A    	jne strcmp_ret
0111++ 0A93 FB FF FF    	lea d, [si +- 1]
0112++ 0A96 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0A98 C7 8F 0A    	jne strcmp_loop				; equal chars but not at end
0114++ 0A9B             strcmp_ret:
0115++ 0A9B EF          	pop si
0116++ 0A9C F0          	pop di
0117++ 0A9D E7          	pop d
0118++ 0A9E E8          	pop al
0119++ 0A9F 09          	ret
0120++ 0AA0             
0121++ 0AA0             
0122++ 0AA0             ; STRCPY
0123++ 0AA0             ; copy null terminated string from SI to DI
0124++ 0AA0             ; source in SI
0125++ 0AA0             ; destination in DI
0126++ 0AA0             strcpy:
0127++ 0AA0 E2          	push si
0128++ 0AA1 E3          	push di
0129++ 0AA2 DB          	push al
0130++ 0AA3             strcpy_L1:
0131++ 0AA3 F6          	lodsb
0132++ 0AA4 F7          	stosb
0133++ 0AA5 B9 00       	cmp al, 0
0134++ 0AA7 C7 A3 0A    	jne strcpy_L1
0135++ 0AAA             strcpy_end:
0136++ 0AAA E8          	pop al
0137++ 0AAB F0          	pop di
0138++ 0AAC EF          	pop si
0139++ 0AAD 09          	ret
0140++ 0AAE             
0141++ 0AAE             ; STRCAT
0142++ 0AAE             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0AAE             ; source in SI
0144++ 0AAE             ; destination in DI
0145++ 0AAE             strcat:
0146++ 0AAE E2          	push si
0147++ 0AAF E3          	push di
0148++ 0AB0 D7          	push a
0149++ 0AB1 DA          	push d
0150++ 0AB2 50          	mov a, di
0151++ 0AB3 3C          	mov d, a
0152++ 0AB4             strcat_goto_end_L1:
0153++ 0AB4 BD 00       	cmp byte[d], 0
0154++ 0AB6 C6 BD 0A    	je strcat_start
0155++ 0AB9 79          	inc d
0156++ 0ABA 0A B4 0A    	jmp strcat_goto_end_L1
0157++ 0ABD             strcat_start:
0158++ 0ABD FD 50       	mov di, d
0159++ 0ABF             strcat_L1:
0160++ 0ABF F6          	lodsb
0161++ 0AC0 F7          	stosb
0162++ 0AC1 B9 00       	cmp al, 0
0163++ 0AC3 C7 BF 0A    	jne strcat_L1
0164++ 0AC6             strcat_end:
0165++ 0AC6 E7          	pop d
0166++ 0AC7 E4          	pop a
0167++ 0AC8 F0          	pop di
0168++ 0AC9 EF          	pop si
0169++ 0ACA 09          	ret
0005+  0ACB             
0006+  0ACB 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0ACF 34 35 36 37 
0006+  0AD3 38 39 41 42 
0006+  0AD7 43 44 45 46 
0007+  0ADB 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0ADF 1B 5B 48 00 
0008+  0AE3             
0009+  0AE3 01 00       table_power:.dw 1
0010+  0AE5 0A 00       			.dw 10
0011+  0AE7 64 00       			.dw 100
0012+  0AE9 E8 03       			.dw 1000
0013+  0AEB 10 27       			.dw 10000
0014+  0AED             
0015+  0AED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0AED             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0AED             ; ASCII in BL
0018+  0AED             ; result in AL
0019+  0AED             ; ascii for F = 0100 0110
0020+  0AED             ; ascii for 9 = 0011 1001
0021+  0AED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0AED             hex_ascii_encode:
0023+  0AED 1B          	mov al, bl
0024+  0AEE 93 40       	test al, $40				; test if letter or number
0025+  0AF0 C7 F6 0A    	jnz hex_letter
0026+  0AF3 87 0F       	and al, $0F				; get number
0027+  0AF5 09          	ret
0028+  0AF6             hex_letter:
0029+  0AF6 87 0F       	and al, $0F				; get letter
0030+  0AF8 6A 09       	add al, 9
0031+  0AFA 09          	ret
0032+  0AFB             
0033+  0AFB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0AFB             ; ATOI
0035+  0AFB             ; 2 letter hex string in B
0036+  0AFB             ; 8bit integer returned in AL
0037+  0AFB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0AFB             atoi:
0039+  0AFB D8          	push b
0040+  0AFC 07 ED 0A    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0AFF 30          	mov bl, bh
0042+  0B00 DB          	push al					; save a
0043+  0B01 07 ED 0A    	call hex_ascii_encode
0044+  0B04 EA          	pop bl	
0045+  0B05 FD 9E 04    	shl al, 4
0046+  0B08 8C          	or al, bl
0047+  0B09 E5          	pop b
0048+  0B0A 09          	ret	
0049+  0B0B             
0050+  0B0B             
0051+  0B0B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0B0B             ; printf
0053+  0B0B             ; no need for explanations!
0054+  0B0B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0B0B             printf:
0056+  0B0B 09          	ret
0057+  0B0C             
0058+  0B0C             
0059+  0B0C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0B0C             ; scanf
0061+  0B0C             ; no need for explanations!
0062+  0B0C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0B0C             scanf:
0064+  0B0C 09          	ret
0065+  0B0D             
0066+  0B0D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0B0D             ; ITOA
0068+  0B0D             ; 8bit value in BL
0069+  0B0D             ; 2 byte ASCII result in A
0070+  0B0D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0B0D             itoa:
0072+  0B0D DA          	push d
0073+  0B0E D8          	push b
0074+  0B0F A7 00       	mov bh, 0
0075+  0B11 FD A4 04    	shr bl, 4	
0076+  0B14 74          	mov d, b
0077+  0B15 1F CB 0A    	mov al, [d + s_hex_digits]
0078+  0B18 23          	mov ah, al
0079+  0B19             	
0080+  0B19 E5          	pop b
0081+  0B1A D8          	push b
0082+  0B1B A7 00       	mov bh, 0
0083+  0B1D FD 87 0F    	and bl, $0F
0084+  0B20 74          	mov d, b
0085+  0B21 1F CB 0A    	mov al, [d + s_hex_digits]
0086+  0B24 E5          	pop b
0087+  0B25 E7          	pop d
0088+  0B26 09          	ret
0089+  0B27             
0090+  0B27             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0B27             ; HEX STRING TO BINARY
0092+  0B27             ; di = destination address
0093+  0B27             ; si = source
0094+  0B27             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0B27             hex_to_int:
0096+  0B27             hex_to_int_L1:
0097+  0B27 F6          	lodsb					; load from [SI] to AL
0098+  0B28 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0B2A C6 37 0B    	jz hex_to_int_ret
0100+  0B2D 36          	mov bh, al
0101+  0B2E F6          	lodsb
0102+  0B2F 2F          	mov bl, al
0103+  0B30 07 FB 0A    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0B33 F7          	stosb					; store AL to [DI]
0105+  0B34 0A 27 0B    	jmp hex_to_int_L1
0106+  0B37             hex_to_int_ret:
0107+  0B37 09          	ret		
0108+  0B38             
0109+  0B38             
0110+  0B38             
0111+  0B38             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0B38             ; GETCHAR
0113+  0B38             ; char in ah
0114+  0B38             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0B38             getchar:
0116+  0B38 DB          	push al
0117+  0B39             getchar_retry:
0118+  0B39 FD 0C       	sti
0119+  0B3B 19 01       	mov al, 1
0120+  0B3D 05 03       	syscall sys_io			; receive in AH
0121+  0B3F B9 00       	cmp al, 0			; check if any char was receive
0122+  0B41 C6 39 0B    	je getchar_retry
0123+  0B44 E8          	pop al
0124+  0B45 09          	ret
0125+  0B46             
0126+  0B46             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0B46             ; PUTCHAR
0128+  0B46             ; char in ah
0129+  0B46             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B46             putchar:
0131+  0B46 D7          	push a
0132+  0B47 19 00       	mov al, 0
0133+  0B49 05 03       	syscall sys_io			; char in AH
0134+  0B4B E4          	pop a
0135+  0B4C 09          	ret
0136+  0B4D             
0137+  0B4D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0B4D             ;; INPUT A STRING
0139+  0B4D             ;; terminates with null
0140+  0B4D             ;; pointer in D
0141+  0B4D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0B4D             gets:
0143+  0B4D D7          	push a
0144+  0B4E DA          	push d
0145+  0B4F             gets_loop:
0146+  0B4F FD 0C       	sti
0147+  0B51 19 01       	mov al, 1
0148+  0B53 05 03       	syscall sys_io			; receive in AH
0149+  0B55 B9 00       	cmp al, 0				; check error code (AL)
0150+  0B57 C6 4F 0B    	je gets_loop			; if no char received, retry
0151+  0B5A             
0152+  0B5A 76 1B       	cmp ah, 27
0153+  0B5C C6 7D 0B    	je gets_telnet_escape
0154+  0B5F 76 0A       	cmp ah, $0A				; LF
0155+  0B61 C6 D6 0B    	je gets_end
0156+  0B64 76 0D       	cmp ah, $0D				; CR
0157+  0B66 C6 D6 0B    	je gets_end
0158+  0B69 76 5C       	cmp ah, $5C				; '\\'
0159+  0B6B C6 AD 0B    	je gets_escape
0160+  0B6E             	
0161+  0B6E 76 08       	cmp ah, $08			; check for backspace
0162+  0B70 C6 79 0B    	je gets_backspace
0163+  0B73             
0164+  0B73 1A          	mov al, ah
0165+  0B74 3E          	mov [d], al
0166+  0B75 79          	inc d
0167+  0B76 0A 4F 0B    	jmp gets_loop
0168+  0B79             gets_backspace:
0169+  0B79 7F          	dec d
0170+  0B7A 0A 4F 0B    	jmp gets_loop
0171+  0B7D             gets_telnet_escape:
0172+  0B7D FD 0C       	sti
0173+  0B7F 19 01       	mov al, 1
0174+  0B81 05 03       	syscall sys_io				; receive in AH without echo
0175+  0B83 B9 00       	cmp al, 0					; check error code (AL)
0176+  0B85 C6 7D 0B    	je gets_telnet_escape		; if no char received, retry
0177+  0B88 76 5B       	cmp ah, '['
0178+  0B8A C7 4F 0B    	jne gets_loop
0179+  0B8D             gets_telnet_escape_phase2:
0180+  0B8D FD 0C       	sti
0181+  0B8F 19 01       	mov al, 1
0182+  0B91 05 03       	syscall sys_io					; receive in AH without echo
0183+  0B93 B9 00       	cmp al, 0						; check error code (AL)
0184+  0B95 C6 8D 0B    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0B98 76 44       	cmp ah, 'D'
0186+  0B9A C6 A5 0B    	je gets_left_arrow
0187+  0B9D 76 43       	cmp ah, 'C'
0188+  0B9F C6 A9 0B    	je gets_right_arrow
0189+  0BA2 0A 4F 0B    	jmp gets_loop
0190+  0BA5             gets_left_arrow:
0191+  0BA5 7F          	dec d
0192+  0BA6 0A 4F 0B    	jmp gets_loop
0193+  0BA9             gets_right_arrow:
0194+  0BA9 79          	inc d
0195+  0BAA 0A 4F 0B    	jmp gets_loop
0196+  0BAD             gets_escape:
0197+  0BAD FD 0C       	sti
0198+  0BAF 19 01       	mov al, 1
0199+  0BB1 05 03       	syscall sys_io			; receive in AH
0200+  0BB3 B9 00       	cmp al, 0				; check error code (AL)
0201+  0BB5 C6 AD 0B    	je gets_escape			; if no char received, retry
0202+  0BB8 76 6E       	cmp ah, 'n'
0203+  0BBA C6 C8 0B    	je gets_LF
0204+  0BBD 76 72       	cmp ah, 'r'
0205+  0BBF C6 CF 0B    	je gets_CR
0206+  0BC2 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0BC3 3E          	mov [d], al
0208+  0BC4 79          	inc d
0209+  0BC5 0A 4F 0B    	jmp gets_loop
0210+  0BC8             gets_LF:
0211+  0BC8 19 0A       	mov al, $0A
0212+  0BCA 3E          	mov [d], al
0213+  0BCB 79          	inc d
0214+  0BCC 0A 4F 0B    	jmp gets_loop
0215+  0BCF             gets_CR:
0216+  0BCF 19 0D       	mov al, $0D
0217+  0BD1 3E          	mov [d], al
0218+  0BD2 79          	inc d
0219+  0BD3 0A 4F 0B    	jmp gets_loop
0220+  0BD6             gets_end:
0221+  0BD6 19 00       	mov al, 0
0222+  0BD8 3E          	mov [d], al				; terminate string
0223+  0BD9 E7          	pop d
0224+  0BDA E4          	pop a
0225+  0BDB 09          	ret
0226+  0BDC             
0227+  0BDC             
0228+  0BDC             
0229+  0BDC             
0230+  0BDC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0BDC             ;; INPUT TEXT
0232+  0BDC             ;; terminated with CTRL+D
0233+  0BDC             ;; pointer in D
0234+  0BDC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0BDC             gettxt:
0236+  0BDC D7          	push a
0237+  0BDD DA          	push d
0238+  0BDE             gettxt_loop:
0239+  0BDE 19 01       	mov al, 1
0240+  0BE0 05 03       	syscall sys_io			; receive in AH
0241+  0BE2 B9 00       	cmp al, 0				; check error code (AL)
0242+  0BE4 C6 DE 0B    	je gettxt_loop		; if no char received, retry
0243+  0BE7 76 04       	cmp ah, 4			; EOT
0244+  0BE9 C6 27 0C    	je gettxt_end
0245+  0BEC 76 08       	cmp ah, $08			; check for backspace
0246+  0BEE C6 23 0C    	je gettxt_backspace
0247+  0BF1 76 5C       	cmp ah, $5C				; '\\'
0248+  0BF3 C6 FC 0B    	je gettxt_escape
0249+  0BF6 1A          	mov al, ah
0250+  0BF7 3E          	mov [d], al
0251+  0BF8 79          	inc d
0252+  0BF9 0A DE 0B    	jmp gettxt_loop
0253+  0BFC             gettxt_escape:
0254+  0BFC 19 01       	mov al, 1
0255+  0BFE 05 03       	syscall sys_io			; receive in AH
0256+  0C00 B9 00       	cmp al, 0				; check error code (AL)
0257+  0C02 C6 FC 0B    	je gettxt_escape		; if no char received, retry
0258+  0C05 76 6E       	cmp ah, 'n'
0259+  0C07 C6 15 0C    	je gettxt_LF
0260+  0C0A 76 72       	cmp ah, 'r'
0261+  0C0C C6 1C 0C    	je gettxt_CR
0262+  0C0F 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0C10 3E          	mov [d], al
0264+  0C11 79          	inc d
0265+  0C12 0A DE 0B    	jmp gettxt_loop
0266+  0C15             gettxt_LF:
0267+  0C15 19 0A       	mov al, $0A
0268+  0C17 3E          	mov [d], al
0269+  0C18 79          	inc d
0270+  0C19 0A DE 0B    	jmp gettxt_loop
0271+  0C1C             gettxt_CR:
0272+  0C1C 19 0D       	mov al, $0D
0273+  0C1E 3E          	mov [d], al
0274+  0C1F 79          	inc d
0275+  0C20 0A DE 0B    	jmp gettxt_loop
0276+  0C23             gettxt_backspace:
0277+  0C23 7F          	dec d
0278+  0C24 0A DE 0B    	jmp gettxt_loop
0279+  0C27             gettxt_end:
0280+  0C27 19 00       	mov al, 0
0281+  0C29 3E          	mov [d], al				; terminate string
0282+  0C2A E7          	pop d
0283+  0C2B E4          	pop a
0284+  0C2C 09          	ret
0285+  0C2D             
0286+  0C2D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0C2D             ; PRINT NEW LINE
0288+  0C2D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0C2D             printnl:
0290+  0C2D D7          	push a
0291+  0C2E 10 00 0A    	mov a, $0A00
0292+  0C31 05 03       	syscall sys_io
0293+  0C33 10 00 0D    	mov a, $0D00
0294+  0C36 05 03       	syscall sys_io
0295+  0C38 E4          	pop a
0296+  0C39 09          	ret
0297+  0C3A             
0298+  0C3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0C3A             ; strtoint
0300+  0C3A             ; 4 digit hex string number in d
0301+  0C3A             ; integer returned in A
0302+  0C3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0C3A             strtointx:
0304+  0C3A D8          	push b
0305+  0C3B 32          	mov bl, [d]
0306+  0C3C 37          	mov bh, bl
0307+  0C3D 33 01 00    	mov bl, [d + 1]
0308+  0C40 07 FB 0A    	call atoi				; convert to int in AL
0309+  0C43 23          	mov ah, al				; move to AH
0310+  0C44 33 02 00    	mov bl, [d + 2]
0311+  0C47 37          	mov bh, bl
0312+  0C48 33 03 00    	mov bl, [d + 3]
0313+  0C4B 07 FB 0A    	call atoi				; convert to int in AL
0314+  0C4E E5          	pop b
0315+  0C4F 09          	ret
0316+  0C50             
0317+  0C50             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0C50             ; strtoint
0319+  0C50             ; 5 digit base10 string number in d
0320+  0C50             ; integer returned in A
0321+  0C50             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0C50             strtoint:
0323+  0C50 E2          	push si
0324+  0C51 D8          	push b
0325+  0C52 D9          	push c
0326+  0C53 DA          	push d
0327+  0C54 07 7B 0A    	call strlen			; get string length in C
0328+  0C57 7E          	dec c
0329+  0C58 FD 4E       	mov si, d
0330+  0C5A 12          	mov a, c
0331+  0C5B FD 99       	shl a
0332+  0C5D 3B E3 0A    	mov d, table_power
0333+  0C60 59          	add d, a
0334+  0C61 38 00 00    	mov c, 0
0335+  0C64             strtoint_L0:
0336+  0C64 F6          	lodsb			; load ASCII to al
0337+  0C65 B9 00       	cmp al, 0
0338+  0C67 C6 7A 0C    	je strtoint_end
0339+  0C6A 6F 30       	sub al, $30		; make into integer
0340+  0C6C 22 00       	mov ah, 0
0341+  0C6E 2A          	mov b, [d]
0342+  0C6F AC          	mul a, b			; result in B since it fits in 16bits
0343+  0C70 11          	mov a, b
0344+  0C71 28          	mov b, c
0345+  0C72 54          	add a, b
0346+  0C73 39          	mov c, a
0347+  0C74 63 02 00    	sub d, 2
0348+  0C77 0A 64 0C    	jmp strtoint_L0
0349+  0C7A             strtoint_end:
0350+  0C7A 12          	mov a, c
0351+  0C7B E7          	pop d
0352+  0C7C E6          	pop c
0353+  0C7D E5          	pop b
0354+  0C7E EF          	pop si
0355+  0C7F 09          	ret
0356+  0C80             
0357+  0C80             
0358+  0C80             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0C80             ; PRINT NULL TERMINATED STRING
0360+  0C80             ; pointer in D
0361+  0C80             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0C80             puts:
0363+  0C80 D7          	push a
0364+  0C81 DA          	push d
0365+  0C82             puts_L1:
0366+  0C82 1E          	mov al, [d]
0367+  0C83 B9 00       	cmp al, 0
0368+  0C85 C6 91 0C    	jz puts_END
0369+  0C88 23          	mov ah, al
0370+  0C89 19 00       	mov al, 0
0371+  0C8B 05 03       	syscall sys_io
0372+  0C8D 79          	inc d
0373+  0C8E 0A 82 0C    	jmp puts_L1
0374+  0C91             puts_END:
0375+  0C91 E7          	pop d
0376+  0C92 E4          	pop a
0377+  0C93 09          	ret
0378+  0C94             
0379+  0C94             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0C94             ; PRINT N SIZE STRING
0381+  0C94             ; pointer in D
0382+  0C94             ; size in C
0383+  0C94             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0C94             putsn:
0385+  0C94 DB          	push al
0386+  0C95 DA          	push d
0387+  0C96 D9          	push c
0388+  0C97             putsn_L0:
0389+  0C97 1E          	mov al, [d]
0390+  0C98 23          	mov ah, al
0391+  0C99 19 00       	mov al, 0
0392+  0C9B 05 03       	syscall sys_io
0393+  0C9D 79          	inc d
0394+  0C9E 7E          	dec c	
0395+  0C9F C2 00 00    	cmp c, 0
0396+  0CA2 C7 97 0C    	jne putsn_L0
0397+  0CA5             putsn_end:
0398+  0CA5 E6          	pop c
0399+  0CA6 E7          	pop d
0400+  0CA7 E8          	pop al
0401+  0CA8 09          	ret
0402+  0CA9             
0403+  0CA9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0CA9             ; print 16bit decimal number
0405+  0CA9             ; input number in A
0406+  0CA9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0CA9             print_u16d:
0408+  0CA9 D7          	push a
0409+  0CAA D8          	push b
0410+  0CAB 26 10 27    	mov b, 10000
0411+  0CAE AE          	div a, b			; get 10000 coeff.
0412+  0CAF 07 D5 0C    	call print_number
0413+  0CB2 11          	mov a, b
0414+  0CB3 26 E8 03    	mov b, 1000
0415+  0CB6 AE          	div a, b			; get 10000 coeff.
0416+  0CB7 07 D5 0C    	call print_number
0417+  0CBA 11          	mov a, b
0418+  0CBB 26 64 00    	mov b, 100
0419+  0CBE AE          	div a, b
0420+  0CBF 07 D5 0C    	call print_number
0421+  0CC2 11          	mov a, b
0422+  0CC3 26 0A 00    	mov b, 10
0423+  0CC6 AE          	div a, b
0424+  0CC7 07 D5 0C    	call print_number
0425+  0CCA 11          	mov a, b
0426+  0CCB 6A 30       	add al, $30
0427+  0CCD 23          	mov ah, al
0428+  0CCE 19 00       	mov al, 0
0429+  0CD0 05 03       	syscall sys_io	; print coeff
0430+  0CD2 E5          	pop b
0431+  0CD3 E4          	pop a
0432+  0CD4 09          	ret
0433+  0CD5             
0434+  0CD5             
0435+  0CD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0CD5             ; if A == 0, print space
0437+  0CD5             ; else print A
0438+  0CD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  0CD5             print_number:
0440+  0CD5 6A 30       	add al, $30
0441+  0CD7 23          	mov ah, al
0442+  0CD8 07 46 0B    	call putchar
0443+  0CDB 09          	ret
0444+  0CDC             
0445+  0CDC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0CDC             ; PRINT 16BIT HEX INTEGER
0447+  0CDC             ; integer value in reg B
0448+  0CDC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0CDC             print_u16x:
0450+  0CDC D7          	push a
0451+  0CDD D8          	push b
0452+  0CDE DD          	push bl
0453+  0CDF 30          	mov bl, bh
0454+  0CE0 07 0D 0B    	call itoa				; convert bh to char in A
0455+  0CE3 2F          	mov bl, al				; save al
0456+  0CE4 19 00       	mov al, 0
0457+  0CE6 05 03       	syscall sys_io				; display AH
0458+  0CE8 24          	mov ah, bl				; retrieve al
0459+  0CE9 19 00       	mov al, 0
0460+  0CEB 05 03       	syscall sys_io				; display AL
0461+  0CED             
0462+  0CED EA          	pop bl
0463+  0CEE 07 0D 0B    	call itoa				; convert bh to char in A
0464+  0CF1 2F          	mov bl, al				; save al
0465+  0CF2 19 00       	mov al, 0
0466+  0CF4 05 03       	syscall sys_io				; display AH
0467+  0CF6 24          	mov ah, bl				; retrieve al
0468+  0CF7 19 00       	mov al, 0
0469+  0CF9 05 03       	syscall sys_io				; display AL
0470+  0CFB             
0471+  0CFB E5          	pop b
0472+  0CFC E4          	pop a
0473+  0CFD 09          	ret
0474+  0CFE             
0475+  0CFE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0CFE             ; INPUT 16BIT HEX INTEGER
0477+  0CFE             ; read 16bit integer into A
0478+  0CFE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0CFE             scan_u16x:
0480+  0CFE F8 10 00    	enter 16
0481+  0D01 D8          	push b
0482+  0D02 DA          	push d
0483+  0D03             
0484+  0D03 FA F1 FF    	lea d, [bp + -15]
0485+  0D06 07 4D 0B    	call gets				; get number
0486+  0D09             
0487+  0D09 32          	mov bl, [d]
0488+  0D0A 37          	mov bh, bl
0489+  0D0B 33 01 00    	mov bl, [d + 1]
0490+  0D0E 07 FB 0A    	call atoi				; convert to int in AL
0491+  0D11 23          	mov ah, al				; move to AH
0492+  0D12             
0493+  0D12 33 02 00    	mov bl, [d + 2]
0494+  0D15 37          	mov bh, bl
0495+  0D16 33 03 00    	mov bl, [d + 3]
0496+  0D19 07 FB 0A    	call atoi				; convert to int in AL
0497+  0D1C             
0498+  0D1C E7          	pop d
0499+  0D1D E5          	pop b
0500+  0D1E F9          	leave
0501+  0D1F 09          	ret
0502+  0D20             
0503+  0D20             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0D20             ; PRINT 8bit HEX INTEGER
0505+  0D20             ; integer value in reg bl
0506+  0D20             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0D20             print_u8x:
0508+  0D20 D7          	push a
0509+  0D21 DD          	push bl
0510+  0D22             
0511+  0D22 07 0D 0B    	call itoa				; convert bl to char in A
0512+  0D25 2F          	mov bl, al				; save al
0513+  0D26 19 00       	mov al, 0
0514+  0D28 05 03       	syscall sys_io				; display AH
0515+  0D2A 24          	mov ah, bl				; retrieve al
0516+  0D2B 19 00       	mov al, 0
0517+  0D2D 05 03       	syscall sys_io				; display AL
0518+  0D2F             
0519+  0D2F EA          	pop bl
0520+  0D30 E4          	pop a
0521+  0D31 09          	ret
0522+  0D32             
0523+  0D32             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0D32             ; print 8bit decimal unsigned number
0525+  0D32             ; input number in AL
0526+  0D32             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0D32             print_u8d:
0528+  0D32 D7          	push a
0529+  0D33 D8          	push b
0530+  0D34             
0531+  0D34 22 00       	mov ah, 0
0532+  0D36 26 64 00    	mov b, 100
0533+  0D39 AE          	div a, b
0534+  0D3A D8          	push b			; save remainder
0535+  0D3B B9 00       	cmp al, 0
0536+  0D3D C6 47 0D    	je skip100
0537+  0D40 6A 30       	add al, $30
0538+  0D42 23          	mov ah, al
0539+  0D43 19 00       	mov al, 0
0540+  0D45 05 03       	syscall sys_io	; print coeff
0541+  0D47             skip100:
0542+  0D47 E4          	pop a
0543+  0D48 22 00       	mov ah, 0
0544+  0D4A 26 0A 00    	mov b, 10
0545+  0D4D AE          	div a, b
0546+  0D4E D8          	push b			; save remainder
0547+  0D4F B9 00       	cmp al, 0
0548+  0D51 C6 5B 0D    	je skip10
0549+  0D54 6A 30       	add al, $30
0550+  0D56 23          	mov ah, al
0551+  0D57 19 00       	mov al, 0
0552+  0D59 05 03       	syscall sys_io	; print coeff
0553+  0D5B             skip10:
0554+  0D5B E4          	pop a
0555+  0D5C 1B          	mov al, bl
0556+  0D5D 6A 30       	add al, $30
0557+  0D5F 23          	mov ah, al
0558+  0D60 19 00       	mov al, 0
0559+  0D62 05 03       	syscall sys_io	; print coeff
0560+  0D64 E5          	pop b
0561+  0D65 E4          	pop a
0562+  0D66 09          	ret
0563+  0D67             
0564+  0D67             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0D67             ; INPUT 8BIT HEX INTEGER
0566+  0D67             ; read 8bit integer into AL
0567+  0D67             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0D67             scan_u8x:
0569+  0D67 F8 04 00    	enter 4
0570+  0D6A D8          	push b
0571+  0D6B DA          	push d
0572+  0D6C             
0573+  0D6C FA FD FF    	lea d, [bp + -3]
0574+  0D6F 07 4D 0B    	call gets				; get number
0575+  0D72             
0576+  0D72 32          	mov bl, [d]
0577+  0D73 37          	mov bh, bl
0578+  0D74 33 01 00    	mov bl, [d + 1]
0579+  0D77 07 FB 0A    	call atoi				; convert to int in AL
0580+  0D7A             
0581+  0D7A E7          	pop d
0582+  0D7B E5          	pop b
0583+  0D7C F9          	leave
0584+  0D7D 09          	ret
0585+  0D7E             
0586+  0D7E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0D7E             ; input decimal number
0588+  0D7E             ; result in A
0589+  0D7E             ; 655'\0'
0590+  0D7E             ; low--------high
0591+  0D7E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  0D7E             scan_u16d:
0593+  0D7E F8 08 00    	enter 8
0594+  0D81 E2          	push si
0595+  0D82 D8          	push b
0596+  0D83 D9          	push c
0597+  0D84 DA          	push d
0598+  0D85 FA F9 FF    	lea d, [bp +- 7]
0599+  0D88 07 4D 0B    	call gets
0600+  0D8B 07 7B 0A    	call strlen			; get string length in C
0601+  0D8E 7E          	dec c
0602+  0D8F FD 4E       	mov si, d
0603+  0D91 12          	mov a, c
0604+  0D92 FD 99       	shl a
0605+  0D94 3B E3 0A    	mov d, table_power
0606+  0D97 59          	add d, a
0607+  0D98 38 00 00    	mov c, 0
0608+  0D9B             mul_loop:
0609+  0D9B F6          	lodsb			; load ASCII to al
0610+  0D9C B9 00       	cmp al, 0
0611+  0D9E C6 B1 0D    	je mul_exit
0612+  0DA1 6F 30       	sub al, $30		; make into integer
0613+  0DA3 22 00       	mov ah, 0
0614+  0DA5 2A          	mov b, [d]
0615+  0DA6 AC          	mul a, b			; result in B since it fits in 16bits
0616+  0DA7 11          	mov a, b
0617+  0DA8 28          	mov b, c
0618+  0DA9 54          	add a, b
0619+  0DAA 39          	mov c, a
0620+  0DAB 63 02 00    	sub d, 2
0621+  0DAE 0A 9B 0D    	jmp mul_loop
0622+  0DB1             mul_exit:
0623+  0DB1 12          	mov a, c
0624+  0DB2 E7          	pop d
0625+  0DB3 E6          	pop c
0626+  0DB4 E5          	pop b
0627+  0DB5 EF          	pop si
0628+  0DB6 F9          	leave
0629+  0DB7 09          	ret
0944   0DB8             ; --- END INCLUDE BLOCK
0945   0DB8             
0946   0DB8             
0947   0DB8             .end
tasm: Number of errors = 0
