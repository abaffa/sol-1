0001   0000             ; --- FILENAME: life.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; n
0011   0408 26 DB 1E      mov b, _string_0
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 07 EC 04      call print
0015   0411 51 02 00      add sp, 2
0016   0414 07 F7 04      call getn
0017   0417 D7            push a
0018   0418 11            mov a, b
0019   0419 45 FD FF      mov [bp + -3], a ; n
0020   041C E4            pop a
0021   041D 07 61 04      call init_game
0022   0420             _for1_init:
0023   0420 26 00 00      mov b, 0
0024   0423 D7            push a
0025   0424 11            mov a, b
0026   0425 45 FF FF      mov [bp + -1], a ; i
0027   0428 E4            pop a
0028   0429             _for1_cond:
0029   0429 2C FF FF      mov b, [bp + -1] ; i
0030   042C D7            push a
0031   042D 11            mov a, b
0032   042E 2C FD FF      mov b, [bp + -3] ; n
0033   0431 B0            cmp a, b
0034   0432 0E            lodflgs
0035   0433 87 02         and al, %00000010 ; <
0036   0435 22 00         mov ah, 0
0037   0437 B9 00         cmp al, 0
0038   0439 0E            lodflgs
0039   043A 96            not al
0040   043B 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0041   043D 22 00         mov ah, 0
0042   043F 27            mov b, a
0043   0440 E4            pop a
0044   0441 C0 00 00      cmp b, 0
0045   0444 C6 5B 04      je _for1_exit
0046   0447             _for1_block:
0047   0447 07 07 05      call print_game
0048   044A 07 BF 05      call update_game
0049   044D             _for1_update:
0050   044D 2C FF FF      mov b, [bp + -1] ; i
0051   0450 FD 77         inc b
0052   0452 D7            push a
0053   0453 11            mov a, b
0054   0454 45 FF FF      mov [bp + -1], a ; i
0055   0457 E4            pop a
0056   0458 0A 29 04      jmp _for1_cond
0057   045B             _for1_exit:
0058   045B 26 00 00      mov b, 0
0059   045E F9            leave
0060   045F 05 0B         syscall sys_terminate_proc
0061   0461             init_game:
0062   0461 D2            push bp
0063   0462 9B            mov bp, sp
0064   0463 29 25 14      mov b, [curr_state]
0065   0466 74            mov d, b
0066   0467 26 04 00      mov b, 4
0067   046A 10 4A 00      mov a, 74
0068   046D AC            mul a, b
0069   046E 5A            add d, b
0070   046F 26 04 00      mov b, 4
0071   0472 10 02 00      mov a, 2
0072   0475 AC            mul a, b
0073   0476 5A            add d, b
0074   0477 DA            push d
0075   0478 26 01 00      mov b, 1
0076   047B E7            pop d
0077   047C 11            mov a, b
0078   047D 43            mov [d], a
0079   047E 29 25 14      mov b, [curr_state]
0080   0481 74            mov d, b
0081   0482 26 04 00      mov b, 4
0082   0485 10 4A 00      mov a, 74
0083   0488 AC            mul a, b
0084   0489 5A            add d, b
0085   048A 26 05 00      mov b, 5
0086   048D 10 02 00      mov a, 2
0087   0490 AC            mul a, b
0088   0491 5A            add d, b
0089   0492 DA            push d
0090   0493 26 01 00      mov b, 1
0091   0496 E7            pop d
0092   0497 11            mov a, b
0093   0498 43            mov [d], a
0094   0499 29 25 14      mov b, [curr_state]
0095   049C 74            mov d, b
0096   049D 26 04 00      mov b, 4
0097   04A0 10 4A 00      mov a, 74
0098   04A3 AC            mul a, b
0099   04A4 5A            add d, b
0100   04A5 26 06 00      mov b, 6
0101   04A8 10 02 00      mov a, 2
0102   04AB AC            mul a, b
0103   04AC 5A            add d, b
0104   04AD DA            push d
0105   04AE 26 01 00      mov b, 1
0106   04B1 E7            pop d
0107   04B2 11            mov a, b
0108   04B3 43            mov [d], a
0109   04B4 29 25 14      mov b, [curr_state]
0110   04B7 74            mov d, b
0111   04B8 26 03 00      mov b, 3
0112   04BB 10 4A 00      mov a, 74
0113   04BE AC            mul a, b
0114   04BF 5A            add d, b
0115   04C0 26 06 00      mov b, 6
0116   04C3 10 02 00      mov a, 2
0117   04C6 AC            mul a, b
0118   04C7 5A            add d, b
0119   04C8 DA            push d
0120   04C9 26 01 00      mov b, 1
0121   04CC E7            pop d
0122   04CD 11            mov a, b
0123   04CE 43            mov [d], a
0124   04CF 29 25 14      mov b, [curr_state]
0125   04D2 74            mov d, b
0126   04D3 26 02 00      mov b, 2
0127   04D6 10 4A 00      mov a, 74
0128   04D9 AC            mul a, b
0129   04DA 5A            add d, b
0130   04DB 26 05 00      mov b, 5
0131   04DE 10 02 00      mov a, 2
0132   04E1 AC            mul a, b
0133   04E2 5A            add d, b
0134   04E3 DA            push d
0135   04E4 26 01 00      mov b, 1
0136   04E7 E7            pop d
0137   04E8 11            mov a, b
0138   04E9 43            mov [d], a
0139   04EA F9            leave
0140   04EB 09            ret
0141   04EC             print:
0142   04EC D2            push bp
0143   04ED 9B            mov bp, sp
0144   04EE             
0145   04EE             ; --- BEGIN INLINE ASM BLOCK
0146   04EE 17 05 00      mov a, [bp + 5]
0147   04F1 3C            mov d, a
0148   04F2 07 35 21      call puts
0149   04F5             ; --- END INLINE ASM BLOCK
0150   04F5             
0151   04F5 F9            leave
0152   04F6 09            ret
0153   04F7             getn:
0154   04F7 D2            push bp
0155   04F8 9B            mov bp, sp
0156   04F9 52 02 00      sub sp, 2 ; n
0157   04FC             
0158   04FC             ; --- BEGIN INLINE ASM BLOCK
0159   04FC 07 33 22      call scan_u16d
0160   04FF 45 FF FF      mov [bp + -1], a
0161   0502             ; --- END INLINE ASM BLOCK
0162   0502             
0163   0502 2C FF FF      mov b, [bp + -1] ; n
0164   0505 F9            leave
0165   0506 09            ret
0166   0507             print_game:
0167   0507 D2            push bp
0168   0508 9B            mov bp, sp
0169   0509 52 02 00      sub sp, 2 ; i
0170   050C 52 02 00      sub sp, 2 ; j
0171   050F             _for2_init:
0172   050F 26 00 00      mov b, 0
0173   0512 D7            push a
0174   0513 11            mov a, b
0175   0514 45 FF FF      mov [bp + -1], a ; i
0176   0517 E4            pop a
0177   0518             _for2_cond:
0178   0518 2C FF FF      mov b, [bp + -1] ; i
0179   051B D7            push a
0180   051C 11            mov a, b
0181   051D 26 25 00      mov b, 37
0182   0520 B0            cmp a, b
0183   0521 0E            lodflgs
0184   0522 87 02         and al, %00000010 ; <
0185   0524 22 00         mov ah, 0
0186   0526 B9 00         cmp al, 0
0187   0528 0E            lodflgs
0188   0529 96            not al
0189   052A 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0190   052C 22 00         mov ah, 0
0191   052E 27            mov b, a
0192   052F E4            pop a
0193   0530 C0 00 00      cmp b, 0
0194   0533 C6 BD 05      je _for2_exit
0195   0536             _for2_block:
0196   0536             _for3_init:
0197   0536 26 00 00      mov b, 0
0198   0539 D7            push a
0199   053A 11            mov a, b
0200   053B 45 FD FF      mov [bp + -3], a ; j
0201   053E E4            pop a
0202   053F             _for3_cond:
0203   053F 2C FD FF      mov b, [bp + -3] ; j
0204   0542 D7            push a
0205   0543 11            mov a, b
0206   0544 26 25 00      mov b, 37
0207   0547 B0            cmp a, b
0208   0548 0E            lodflgs
0209   0549 87 02         and al, %00000010 ; <
0210   054B 22 00         mov ah, 0
0211   054D B9 00         cmp al, 0
0212   054F 0E            lodflgs
0213   0550 96            not al
0214   0551 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0215   0553 22 00         mov ah, 0
0216   0555 27            mov b, a
0217   0556 E4            pop a
0218   0557 C0 00 00      cmp b, 0
0219   055A C6 A3 05      je _for3_exit
0220   055D             _for3_block:
0221   055D             _if4_cond:
0222   055D 29 25 14      mov b, [curr_state]
0223   0560 D7            push a
0224   0561 74            mov d, b
0225   0562 2C FF FF      mov b, [bp + -1] ; i
0226   0565 10 4A 00      mov a, 74
0227   0568 AC            mul a, b
0228   0569 5A            add d, b
0229   056A 2C FD FF      mov b, [bp + -3] ; j
0230   056D 10 02 00      mov a, 2
0231   0570 AC            mul a, b
0232   0571 5A            add d, b
0233   0572 2A            mov b, [d]
0234   0573 E4            pop a
0235   0574 C0 00 00      cmp b, 0
0236   0577 C6 89 05      je _if4_else
0237   057A             _if4_true:
0238   057A 26 E9 1E      mov b, _string_1
0239   057D FD AB         swp b
0240   057F D8            push b
0241   0580 07 EC 04      call print
0242   0583 51 02 00      add sp, 2
0243   0586 0A 95 05      jmp _if4_exit
0244   0589             _if4_else:
0245   0589 26 EC 1E      mov b, _string_2
0246   058C FD AB         swp b
0247   058E D8            push b
0248   058F 07 EC 04      call print
0249   0592 51 02 00      add sp, 2
0250   0595             _if4_exit:
0251   0595             _for3_update:
0252   0595 2C FD FF      mov b, [bp + -3] ; j
0253   0598 FD 77         inc b
0254   059A D7            push a
0255   059B 11            mov a, b
0256   059C 45 FD FF      mov [bp + -3], a ; j
0257   059F E4            pop a
0258   05A0 0A 3F 05      jmp _for3_cond
0259   05A3             _for3_exit:
0260   05A3 26 EF 1E      mov b, _string_3
0261   05A6 FD AB         swp b
0262   05A8 D8            push b
0263   05A9 07 EC 04      call print
0264   05AC 51 02 00      add sp, 2
0265   05AF             _for2_update:
0266   05AF 2C FF FF      mov b, [bp + -1] ; i
0267   05B2 FD 77         inc b
0268   05B4 D7            push a
0269   05B5 11            mov a, b
0270   05B6 45 FF FF      mov [bp + -1], a ; i
0271   05B9 E4            pop a
0272   05BA 0A 18 05      jmp _for2_cond
0273   05BD             _for2_exit:
0274   05BD F9            leave
0275   05BE 09            ret
0276   05BF             update_game:
0277   05BF D2            push bp
0278   05C0 9B            mov bp, sp
0279   05C1 52 02 00      sub sp, 2 ; i
0280   05C4 52 02 00      sub sp, 2 ; j
0281   05C7 52 02 00      sub sp, 2 ; ni
0282   05CA 52 02 00      sub sp, 2 ; nj
0283   05CD 52 02 00      sub sp, 2 ; count
0284   05D0             _for5_init:
0285   05D0 26 00 00      mov b, 0
0286   05D3 D7            push a
0287   05D4 11            mov a, b
0288   05D5 45 FF FF      mov [bp + -1], a ; i
0289   05D8 E4            pop a
0290   05D9             _for5_cond:
0291   05D9 2C FF FF      mov b, [bp + -1] ; i
0292   05DC D7            push a
0293   05DD 11            mov a, b
0294   05DE 26 25 00      mov b, 37
0295   05E1 B0            cmp a, b
0296   05E2 0E            lodflgs
0297   05E3 87 02         and al, %00000010 ; <
0298   05E5 22 00         mov ah, 0
0299   05E7 B9 00         cmp al, 0
0300   05E9 0E            lodflgs
0301   05EA 96            not al
0302   05EB 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0303   05ED 22 00         mov ah, 0
0304   05EF 27            mov b, a
0305   05F0 E4            pop a
0306   05F1 C0 00 00      cmp b, 0
0307   05F4 C6 69 06      je _for5_exit
0308   05F7             _for5_block:
0309   05F7             _for6_init:
0310   05F7 26 00 00      mov b, 0
0311   05FA D7            push a
0312   05FB 11            mov a, b
0313   05FC 45 FD FF      mov [bp + -3], a ; j
0314   05FF E4            pop a
0315   0600             _for6_cond:
0316   0600 2C FD FF      mov b, [bp + -3] ; j
0317   0603 D7            push a
0318   0604 11            mov a, b
0319   0605 26 25 00      mov b, 37
0320   0608 B0            cmp a, b
0321   0609 0E            lodflgs
0322   060A 87 02         and al, %00000010 ; <
0323   060C 22 00         mov ah, 0
0324   060E B9 00         cmp al, 0
0325   0610 0E            lodflgs
0326   0611 96            not al
0327   0612 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0328   0614 22 00         mov ah, 0
0329   0616 27            mov b, a
0330   0617 E4            pop a
0331   0618 C0 00 00      cmp b, 0
0332   061B C6 5B 06      je _for6_exit
0333   061E             _for6_block:
0334   061E 29 D9 1E      mov b, [next_state]
0335   0621 74            mov d, b
0336   0622 2C FF FF      mov b, [bp + -1] ; i
0337   0625 10 4A 00      mov a, 74
0338   0628 AC            mul a, b
0339   0629 5A            add d, b
0340   062A 2C FD FF      mov b, [bp + -3] ; j
0341   062D 10 02 00      mov a, 2
0342   0630 AC            mul a, b
0343   0631 5A            add d, b
0344   0632 DA            push d
0345   0633 29 25 14      mov b, [curr_state]
0346   0636 D7            push a
0347   0637 74            mov d, b
0348   0638 2C FF FF      mov b, [bp + -1] ; i
0349   063B 10 4A 00      mov a, 74
0350   063E AC            mul a, b
0351   063F 5A            add d, b
0352   0640 2C FD FF      mov b, [bp + -3] ; j
0353   0643 10 02 00      mov a, 2
0354   0646 AC            mul a, b
0355   0647 5A            add d, b
0356   0648 2A            mov b, [d]
0357   0649 E4            pop a
0358   064A E7            pop d
0359   064B 11            mov a, b
0360   064C 43            mov [d], a
0361   064D             _for6_update:
0362   064D 2C FD FF      mov b, [bp + -3] ; j
0363   0650 FD 77         inc b
0364   0652 D7            push a
0365   0653 11            mov a, b
0366   0654 45 FD FF      mov [bp + -3], a ; j
0367   0657 E4            pop a
0368   0658 0A 00 06      jmp _for6_cond
0369   065B             _for6_exit:
0370   065B             _for5_update:
0371   065B 2C FF FF      mov b, [bp + -1] ; i
0372   065E FD 77         inc b
0373   0660 D7            push a
0374   0661 11            mov a, b
0375   0662 45 FF FF      mov [bp + -1], a ; i
0376   0665 E4            pop a
0377   0666 0A D9 05      jmp _for5_cond
0378   0669             _for5_exit:
0379   0669             _for7_init:
0380   0669 26 01 00      mov b, 1
0381   066C D7            push a
0382   066D 11            mov a, b
0383   066E 45 FF FF      mov [bp + -1], a ; i
0384   0671 E4            pop a
0385   0672             _for7_cond:
0386   0672 2C FF FF      mov b, [bp + -1] ; i
0387   0675 D7            push a
0388   0676 11            mov a, b
0389   0677 26 25 00      mov b, 37
0390   067A B0            cmp a, b
0391   067B 0E            lodflgs
0392   067C 87 02         and al, %00000010 ; <
0393   067E 22 00         mov ah, 0
0394   0680 B9 00         cmp al, 0
0395   0682 0E            lodflgs
0396   0683 96            not al
0397   0684 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0398   0686 22 00         mov ah, 0
0399   0688 27            mov b, a
0400   0689 E4            pop a
0401   068A C0 00 00      cmp b, 0
0402   068D C6 D8 08      je _for7_exit
0403   0690             _for7_block:
0404   0690             _for8_init:
0405   0690 26 01 00      mov b, 1
0406   0693 D7            push a
0407   0694 11            mov a, b
0408   0695 45 FD FF      mov [bp + -3], a ; j
0409   0698 E4            pop a
0410   0699             _for8_cond:
0411   0699 2C FD FF      mov b, [bp + -3] ; j
0412   069C D7            push a
0413   069D 11            mov a, b
0414   069E 26 25 00      mov b, 37
0415   06A1 B0            cmp a, b
0416   06A2 0E            lodflgs
0417   06A3 87 02         and al, %00000010 ; <
0418   06A5 22 00         mov ah, 0
0419   06A7 B9 00         cmp al, 0
0420   06A9 0E            lodflgs
0421   06AA 96            not al
0422   06AB 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0423   06AD 22 00         mov ah, 0
0424   06AF 27            mov b, a
0425   06B0 E4            pop a
0426   06B1 C0 00 00      cmp b, 0
0427   06B4 C6 CA 08      je _for8_exit
0428   06B7             _for8_block:
0429   06B7 26 00 00      mov b, 0
0430   06BA D7            push a
0431   06BB 11            mov a, b
0432   06BC 45 F7 FF      mov [bp + -9], a ; count
0433   06BF E4            pop a
0434   06C0             _for9_init:
0435   06C0 2C FF FF      mov b, [bp + -1] ; i
0436   06C3 D7            push a
0437   06C4 11            mov a, b
0438   06C5 26 01 00      mov b, 1
0439   06C8 60            sub a, b
0440   06C9 27            mov b, a
0441   06CA E4            pop a
0442   06CB D7            push a
0443   06CC 11            mov a, b
0444   06CD 45 FB FF      mov [bp + -5], a ; ni
0445   06D0 E4            pop a
0446   06D1             _for9_cond:
0447   06D1 2C FB FF      mov b, [bp + -5] ; ni
0448   06D4 D7            push a
0449   06D5 11            mov a, b
0450   06D6 2C FF FF      mov b, [bp + -1] ; i
0451   06D9 D7            push a
0452   06DA 11            mov a, b
0453   06DB 26 01 00      mov b, 1
0454   06DE 54            add a, b
0455   06DF 27            mov b, a
0456   06E0 E4            pop a
0457   06E1 B0            cmp a, b
0458   06E2 0E            lodflgs
0459   06E3 87 03         and al, %00000011 ; <=
0460   06E5 22 00         mov ah, 0
0461   06E7 B9 00         cmp al, 0
0462   06E9 0E            lodflgs
0463   06EA 96            not al
0464   06EB 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0465   06ED 22 00         mov ah, 0
0466   06EF 27            mov b, a
0467   06F0 E4            pop a
0468   06F1 C0 00 00      cmp b, 0
0469   06F4 C6 02 08      je _for9_exit
0470   06F7             _for9_block:
0471   06F7             _for10_init:
0472   06F7 2C FD FF      mov b, [bp + -3] ; j
0473   06FA D7            push a
0474   06FB 11            mov a, b
0475   06FC 26 01 00      mov b, 1
0476   06FF 60            sub a, b
0477   0700 27            mov b, a
0478   0701 E4            pop a
0479   0702 D7            push a
0480   0703 11            mov a, b
0481   0704 45 F9 FF      mov [bp + -7], a ; nj
0482   0707 E4            pop a
0483   0708             _for10_cond:
0484   0708 2C F9 FF      mov b, [bp + -7] ; nj
0485   070B D7            push a
0486   070C 11            mov a, b
0487   070D 2C FD FF      mov b, [bp + -3] ; j
0488   0710 D7            push a
0489   0711 11            mov a, b
0490   0712 26 01 00      mov b, 1
0491   0715 54            add a, b
0492   0716 27            mov b, a
0493   0717 E4            pop a
0494   0718 B0            cmp a, b
0495   0719 0E            lodflgs
0496   071A 87 03         and al, %00000011 ; <=
0497   071C 22 00         mov ah, 0
0498   071E B9 00         cmp al, 0
0499   0720 0E            lodflgs
0500   0721 96            not al
0501   0722 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0502   0724 22 00         mov ah, 0
0503   0726 27            mov b, a
0504   0727 E4            pop a
0505   0728 C0 00 00      cmp b, 0
0506   072B C6 F4 07      je _for10_exit
0507   072E             _for10_block:
0508   072E             _if11_cond:
0509   072E 2C FB FF      mov b, [bp + -5] ; ni
0510   0731 D7            push a
0511   0732 11            mov a, b
0512   0733 26 25 00      mov b, 37
0513   0736 B0            cmp a, b
0514   0737 0E            lodflgs
0515   0738 87 02         and al, %00000010 ; <
0516   073A 22 00         mov ah, 0
0517   073C B9 00         cmp al, 0
0518   073E 0E            lodflgs
0519   073F 96            not al
0520   0740 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0521   0742 22 00         mov ah, 0
0522   0744 27            mov b, a
0523   0745 E4            pop a
0524   0746 D7            push a
0525   0747 11            mov a, b
0526   0748 B9 00         cmp al, 0
0527   074A 0E            lodflgs
0528   074B 96            not al
0529   074C 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0530   074E 22 00         mov ah, 0
0531   0750 2C F9 FF      mov b, [bp + -7] ; nj
0532   0753 D7            push a
0533   0754 11            mov a, b
0534   0755 26 25 00      mov b, 37
0535   0758 B0            cmp a, b
0536   0759 0E            lodflgs
0537   075A 87 02         and al, %00000010 ; <
0538   075C 22 00         mov ah, 0
0539   075E B9 00         cmp al, 0
0540   0760 0E            lodflgs
0541   0761 96            not al
0542   0762 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0543   0764 22 00         mov ah, 0
0544   0766 27            mov b, a
0545   0767 E4            pop a
0546   0768 D7            push a
0547   0769 C1 00         cmp bl, 0
0548   076B 0E            lodflgs
0549   076C 96            not al
0550   076D 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0551   076F 22 00         mov ah, 0
0552   0771 27            mov b, a
0553   0772 E4            pop a
0554   0773 86            and a, b
0555   0774 27            mov b, a
0556   0775 E4            pop a
0557   0776 C0 00 00      cmp b, 0
0558   0779 C6 E6 07      je _if11_exit
0559   077C             _if11_true:
0560   077C             _if12_cond:
0561   077C 2C FB FF      mov b, [bp + -5] ; ni
0562   077F D7            push a
0563   0780 11            mov a, b
0564   0781 2C FF FF      mov b, [bp + -1] ; i
0565   0784 B0            cmp a, b
0566   0785 0E            lodflgs
0567   0786 87 01         and al, %00000001
0568   0788 8F 01         xor al, %00000001 ; !=
0569   078A 22 00         mov ah, 0
0570   078C B9 00         cmp al, 0
0571   078E 0E            lodflgs
0572   078F 96            not al
0573   0790 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0574   0792 22 00         mov ah, 0
0575   0794 27            mov b, a
0576   0795 E4            pop a
0577   0796 D7            push a
0578   0797 11            mov a, b
0579   0798 2C F9 FF      mov b, [bp + -7] ; nj
0580   079B D7            push a
0581   079C 11            mov a, b
0582   079D 2C FD FF      mov b, [bp + -3] ; j
0583   07A0 B0            cmp a, b
0584   07A1 0E            lodflgs
0585   07A2 87 01         and al, %00000001
0586   07A4 8F 01         xor al, %00000001 ; !=
0587   07A6 22 00         mov ah, 0
0588   07A8 B9 00         cmp al, 0
0589   07AA 0E            lodflgs
0590   07AB 96            not al
0591   07AC 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0592   07AE 22 00         mov ah, 0
0593   07B0 27            mov b, a
0594   07B1 E4            pop a
0595   07B2 8A            or a, b
0596   07B3 27            mov b, a
0597   07B4 E4            pop a
0598   07B5 C0 00 00      cmp b, 0
0599   07B8 C6 E3 07      je _if12_exit
0600   07BB             _if12_true:
0601   07BB 2C F7 FF      mov b, [bp + -9] ; count
0602   07BE D7            push a
0603   07BF 11            mov a, b
0604   07C0 29 25 14      mov b, [curr_state]
0605   07C3 D7            push a
0606   07C4 74            mov d, b
0607   07C5 2C FB FF      mov b, [bp + -5] ; ni
0608   07C8 10 4A 00      mov a, 74
0609   07CB AC            mul a, b
0610   07CC 5A            add d, b
0611   07CD 2C F9 FF      mov b, [bp + -7] ; nj
0612   07D0 10 02 00      mov a, 2
0613   07D3 AC            mul a, b
0614   07D4 5A            add d, b
0615   07D5 2A            mov b, [d]
0616   07D6 E4            pop a
0617   07D7 54            add a, b
0618   07D8 27            mov b, a
0619   07D9 E4            pop a
0620   07DA D7            push a
0621   07DB 11            mov a, b
0622   07DC 45 F7 FF      mov [bp + -9], a ; count
0623   07DF E4            pop a
0624   07E0 0A E3 07      jmp _if12_exit
0625   07E3             _if12_exit:
0626   07E3 0A E6 07      jmp _if11_exit
0627   07E6             _if11_exit:
0628   07E6             _for10_update:
0629   07E6 2C F9 FF      mov b, [bp + -7] ; nj
0630   07E9 FD 77         inc b
0631   07EB D7            push a
0632   07EC 11            mov a, b
0633   07ED 45 F9 FF      mov [bp + -7], a ; nj
0634   07F0 E4            pop a
0635   07F1 0A 08 07      jmp _for10_cond
0636   07F4             _for10_exit:
0637   07F4             _for9_update:
0638   07F4 2C FB FF      mov b, [bp + -5] ; ni
0639   07F7 FD 77         inc b
0640   07F9 D7            push a
0641   07FA 11            mov a, b
0642   07FB 45 FB FF      mov [bp + -5], a ; ni
0643   07FE E4            pop a
0644   07FF 0A D1 06      jmp _for9_cond
0645   0802             _for9_exit:
0646   0802             _if13_cond:
0647   0802 29 25 14      mov b, [curr_state]
0648   0805 D7            push a
0649   0806 74            mov d, b
0650   0807 2C FF FF      mov b, [bp + -1] ; i
0651   080A 10 4A 00      mov a, 74
0652   080D AC            mul a, b
0653   080E 5A            add d, b
0654   080F 2C FD FF      mov b, [bp + -3] ; j
0655   0812 10 02 00      mov a, 2
0656   0815 AC            mul a, b
0657   0816 5A            add d, b
0658   0817 2A            mov b, [d]
0659   0818 E4            pop a
0660   0819 C0 00 00      cmp b, 0
0661   081C C6 80 08      je _if13_else
0662   081F             _if13_true:
0663   081F             _if14_cond:
0664   081F 2C F7 FF      mov b, [bp + -9] ; count
0665   0822 D7            push a
0666   0823 11            mov a, b
0667   0824 26 02 00      mov b, 2
0668   0827 B0            cmp a, b
0669   0828 0E            lodflgs
0670   0829 87 02         and al, %00000010 ; <
0671   082B 22 00         mov ah, 0
0672   082D B9 00         cmp al, 0
0673   082F 0E            lodflgs
0674   0830 96            not al
0675   0831 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0676   0833 22 00         mov ah, 0
0677   0835 27            mov b, a
0678   0836 E4            pop a
0679   0837 D7            push a
0680   0838 11            mov a, b
0681   0839 2C F7 FF      mov b, [bp + -9] ; count
0682   083C D7            push a
0683   083D 11            mov a, b
0684   083E 26 03 00      mov b, 3
0685   0841 B0            cmp a, b
0686   0842 0E            lodflgs
0687   0843 87 03         and al, %00000011
0688   0845 B9 00         cmp al, %00000000
0689   0847 0E            lodflgs
0690   0848 87 01         and al, %00000001 ; >
0691   084A 22 00         mov ah, 0
0692   084C B9 00         cmp al, 0
0693   084E 0E            lodflgs
0694   084F 96            not al
0695   0850 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0696   0852 22 00         mov ah, 0
0697   0854 27            mov b, a
0698   0855 E4            pop a
0699   0856 8A            or a, b
0700   0857 27            mov b, a
0701   0858 E4            pop a
0702   0859 C0 00 00      cmp b, 0
0703   085C C6 7D 08      je _if14_exit
0704   085F             _if14_true:
0705   085F 29 D9 1E      mov b, [next_state]
0706   0862 74            mov d, b
0707   0863 2C FF FF      mov b, [bp + -1] ; i
0708   0866 10 4A 00      mov a, 74
0709   0869 AC            mul a, b
0710   086A 5A            add d, b
0711   086B 2C FD FF      mov b, [bp + -3] ; j
0712   086E 10 02 00      mov a, 2
0713   0871 AC            mul a, b
0714   0872 5A            add d, b
0715   0873 DA            push d
0716   0874 26 00 00      mov b, 0
0717   0877 E7            pop d
0718   0878 11            mov a, b
0719   0879 43            mov [d], a
0720   087A 0A 7D 08      jmp _if14_exit
0721   087D             _if14_exit:
0722   087D 0A BC 08      jmp _if13_exit
0723   0880             _if13_else:
0724   0880             _if15_cond:
0725   0880 2C F7 FF      mov b, [bp + -9] ; count
0726   0883 D7            push a
0727   0884 11            mov a, b
0728   0885 26 03 00      mov b, 3
0729   0888 B0            cmp a, b
0730   0889 0E            lodflgs
0731   088A 87 01         and al, %00000001 ; ==
0732   088C 22 00         mov ah, 0
0733   088E B9 00         cmp al, 0
0734   0890 0E            lodflgs
0735   0891 96            not al
0736   0892 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0737   0894 22 00         mov ah, 0
0738   0896 27            mov b, a
0739   0897 E4            pop a
0740   0898 C0 00 00      cmp b, 0
0741   089B C6 BC 08      je _if15_exit
0742   089E             _if15_true:
0743   089E 29 D9 1E      mov b, [next_state]
0744   08A1 74            mov d, b
0745   08A2 2C FF FF      mov b, [bp + -1] ; i
0746   08A5 10 4A 00      mov a, 74
0747   08A8 AC            mul a, b
0748   08A9 5A            add d, b
0749   08AA 2C FD FF      mov b, [bp + -3] ; j
0750   08AD 10 02 00      mov a, 2
0751   08B0 AC            mul a, b
0752   08B1 5A            add d, b
0753   08B2 DA            push d
0754   08B3 26 01 00      mov b, 1
0755   08B6 E7            pop d
0756   08B7 11            mov a, b
0757   08B8 43            mov [d], a
0758   08B9 0A BC 08      jmp _if15_exit
0759   08BC             _if15_exit:
0760   08BC             _if13_exit:
0761   08BC             _for8_update:
0762   08BC 2C FD FF      mov b, [bp + -3] ; j
0763   08BF FD 77         inc b
0764   08C1 D7            push a
0765   08C2 11            mov a, b
0766   08C3 45 FD FF      mov [bp + -3], a ; j
0767   08C6 E4            pop a
0768   08C7 0A 99 06      jmp _for8_cond
0769   08CA             _for8_exit:
0770   08CA             _for7_update:
0771   08CA 2C FF FF      mov b, [bp + -1] ; i
0772   08CD FD 77         inc b
0773   08CF D7            push a
0774   08D0 11            mov a, b
0775   08D1 45 FF FF      mov [bp + -1], a ; i
0776   08D4 E4            pop a
0777   08D5 0A 72 06      jmp _for7_cond
0778   08D8             _for7_exit:
0779   08D8             _for16_init:
0780   08D8 26 00 00      mov b, 0
0781   08DB D7            push a
0782   08DC 11            mov a, b
0783   08DD 45 FF FF      mov [bp + -1], a ; i
0784   08E0 E4            pop a
0785   08E1             _for16_cond:
0786   08E1 2C FF FF      mov b, [bp + -1] ; i
0787   08E4 D7            push a
0788   08E5 11            mov a, b
0789   08E6 26 25 00      mov b, 37
0790   08E9 B0            cmp a, b
0791   08EA 0E            lodflgs
0792   08EB 87 02         and al, %00000010 ; <
0793   08ED 22 00         mov ah, 0
0794   08EF B9 00         cmp al, 0
0795   08F1 0E            lodflgs
0796   08F2 96            not al
0797   08F3 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0798   08F5 22 00         mov ah, 0
0799   08F7 27            mov b, a
0800   08F8 E4            pop a
0801   08F9 C0 00 00      cmp b, 0
0802   08FC C6 71 09      je _for16_exit
0803   08FF             _for16_block:
0804   08FF             _for17_init:
0805   08FF 26 00 00      mov b, 0
0806   0902 D7            push a
0807   0903 11            mov a, b
0808   0904 45 FD FF      mov [bp + -3], a ; j
0809   0907 E4            pop a
0810   0908             _for17_cond:
0811   0908 2C FD FF      mov b, [bp + -3] ; j
0812   090B D7            push a
0813   090C 11            mov a, b
0814   090D 26 25 00      mov b, 37
0815   0910 B0            cmp a, b
0816   0911 0E            lodflgs
0817   0912 87 02         and al, %00000010 ; <
0818   0914 22 00         mov ah, 0
0819   0916 B9 00         cmp al, 0
0820   0918 0E            lodflgs
0821   0919 96            not al
0822   091A 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0823   091C 22 00         mov ah, 0
0824   091E 27            mov b, a
0825   091F E4            pop a
0826   0920 C0 00 00      cmp b, 0
0827   0923 C6 63 09      je _for17_exit
0828   0926             _for17_block:
0829   0926 29 25 14      mov b, [curr_state]
0830   0929 74            mov d, b
0831   092A 2C FF FF      mov b, [bp + -1] ; i
0832   092D 10 4A 00      mov a, 74
0833   0930 AC            mul a, b
0834   0931 5A            add d, b
0835   0932 2C FD FF      mov b, [bp + -3] ; j
0836   0935 10 02 00      mov a, 2
0837   0938 AC            mul a, b
0838   0939 5A            add d, b
0839   093A DA            push d
0840   093B 29 D9 1E      mov b, [next_state]
0841   093E D7            push a
0842   093F 74            mov d, b
0843   0940 2C FF FF      mov b, [bp + -1] ; i
0844   0943 10 4A 00      mov a, 74
0845   0946 AC            mul a, b
0846   0947 5A            add d, b
0847   0948 2C FD FF      mov b, [bp + -3] ; j
0848   094B 10 02 00      mov a, 2
0849   094E AC            mul a, b
0850   094F 5A            add d, b
0851   0950 2A            mov b, [d]
0852   0951 E4            pop a
0853   0952 E7            pop d
0854   0953 11            mov a, b
0855   0954 43            mov [d], a
0856   0955             _for17_update:
0857   0955 2C FD FF      mov b, [bp + -3] ; j
0858   0958 FD 77         inc b
0859   095A D7            push a
0860   095B 11            mov a, b
0861   095C 45 FD FF      mov [bp + -3], a ; j
0862   095F E4            pop a
0863   0960 0A 08 09      jmp _for17_cond
0864   0963             _for17_exit:
0865   0963             _for16_update:
0866   0963 2C FF FF      mov b, [bp + -1] ; i
0867   0966 FD 77         inc b
0868   0968 D7            push a
0869   0969 11            mov a, b
0870   096A 45 FF FF      mov [bp + -1], a ; i
0871   096D E4            pop a
0872   096E 0A E1 08      jmp _for16_cond
0873   0971             _for16_exit:
0874   0971 F9            leave
0875   0972 09            ret
0876   0973             ; --- END TEXT BLOCK
0877   0973             
0878   0973             ; --- BEGIN DATA BLOCK
0879   0973 00 00 00 00 curr_state_data: .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0879   0977 00 00 00 00 
0879   097B 00 00 00 00 
0879   097F 00 00 00 00 
0879   0983 00 00 00 00 
0879   0987 00 00 00 00 
0879   098B 00 00 00 00 
0879   098F 00 00 00 00 
0879   0993 00 00 00 00 
0879   0997 00 00 00 00 
0879   099B 00 00 00 00 
0879   099F 00 00 00 00 
0879   09A3 00 00 00 00 
0879   09A7 00 00 00 00 
0879   09AB 00 00 00 00 
0880   09AF 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0880   09B3 00 00 00 00 
0880   09B7 00 00 00 00 
0880   09BB 00 00 00 00 
0880   09BF 00 00 00 00 
0880   09C3 00 00 00 00 
0880   09C7 00 00 00 00 
0880   09CB 00 00 00 00 
0880   09CF 00 00 00 00 
0880   09D3 00 00 00 00 
0880   09D7 00 00 00 00 
0880   09DB 00 00 00 00 
0880   09DF 00 00 00 00 
0880   09E3 00 00 00 00 
0880   09E7 00 00 00 00 
0881   09EB 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0881   09EF 00 00 00 00 
0881   09F3 00 00 00 00 
0881   09F7 00 00 00 00 
0881   09FB 00 00 00 00 
0881   09FF 00 00 00 00 
0881   0A03 00 00 00 00 
0881   0A07 00 00 00 00 
0881   0A0B 00 00 00 00 
0881   0A0F 00 00 00 00 
0881   0A13 00 00 00 00 
0881   0A17 00 00 00 00 
0881   0A1B 00 00 00 00 
0881   0A1F 00 00 00 00 
0881   0A23 00 00 00 00 
0882   0A27 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0882   0A2B 00 00 00 00 
0882   0A2F 00 00 00 00 
0882   0A33 00 00 00 00 
0882   0A37 00 00 00 00 
0882   0A3B 00 00 00 00 
0882   0A3F 01 00 00 00 
0882   0A43 00 00 00 00 
0882   0A47 00 00 00 00 
0882   0A4B 00 00 00 00 
0882   0A4F 00 00 00 00 
0882   0A53 00 00 00 00 
0882   0A57 00 00 00 00 
0882   0A5B 00 00 00 00 
0882   0A5F 00 00 00 00 
0883   0A63 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
0883   0A67 00 00 00 00 
0883   0A6B 00 00 00 00 
0883   0A6F 00 00 00 00 
0883   0A73 00 00 00 00 
0883   0A77 00 00 00 00 
0883   0A7B 00 00 00 00 
0883   0A7F 00 00 00 00 
0883   0A83 00 00 00 00 
0883   0A87 00 00 01 00 
0883   0A8B 00 00 01 00 
0883   0A8F 00 00 00 00 
0883   0A93 00 00 00 00 
0883   0A97 00 00 00 00 
0883   0A9B 00 00 00 00 
0884   0A9F 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
0884   0AA3 00 00 00 00 
0884   0AA7 00 00 00 00 
0884   0AAB 00 00 00 00 
0884   0AAF 00 00 00 00 
0884   0AB3 00 00 00 00 
0884   0AB7 00 00 00 00 
0884   0ABB 00 00 00 00 
0884   0ABF 00 00 00 00 
0884   0AC3 01 00 01 00 
0884   0AC7 00 00 00 00 
0884   0ACB 00 00 00 00 
0884   0ACF 00 00 00 00 
0884   0AD3 01 00 01 00 
0884   0AD7 00 00 00 00 
0885   0ADB 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
0885   0ADF 00 00 00 00 
0885   0AE3 00 00 00 00 
0885   0AE7 00 00 00 00 
0885   0AEB 00 00 00 00 
0885   0AEF 01 00 01 00 
0885   0AF3 00 00 00 00 
0885   0AF7 00 00 00 00 
0885   0AFB 00 00 00 00 
0885   0AFF 00 00 00 00 
0885   0B03 00 00 00 00 
0885   0B07 00 00 00 00 
0885   0B0B 00 00 00 00 
0885   0B0F 01 00 00 00 
0885   0B13 00 00 00 00 
0886   0B17 01 00 00 00 .dw 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 
0886   0B1B 00 00 00 00 
0886   0B1F 00 00 01 00 
0886   0B23 01 00 00 00 
0886   0B27 00 00 00 00 
0886   0B2B 00 00 00 00 
0886   0B2F 00 00 00 00 
0886   0B33 00 00 00 00 
0886   0B37 00 00 00 00 
0886   0B3B 00 00 01 00 
0886   0B3F 01 00 00 00 
0886   0B43 00 00 00 00 
0886   0B47 01 00 01 00 
0886   0B4B 00 00 00 00 
0886   0B4F 00 00 00 00 
0887   0B53 00 00 00 00 .dw 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0887   0B57 00 00 00 00 
0887   0B5B 01 00 00 00 
0887   0B5F 00 00 00 00 
0887   0B63 00 00 00 00 
0887   0B67 01 00 00 00 
0887   0B6B 00 00 00 00 
0887   0B6F 01 00 01 00 
0887   0B73 00 00 00 00 
0887   0B77 00 00 00 00 
0887   0B7B 00 00 00 00 
0887   0B7F 00 00 00 00 
0887   0B83 00 00 00 00 
0887   0B87 00 00 00 00 
0887   0B8B 00 00 00 00 
0888   0B8F 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 
0888   0B93 00 00 01 00 
0888   0B97 01 00 00 00 
0888   0B9B 00 00 00 00 
0888   0B9F 00 00 00 00 
0888   0BA3 00 00 00 00 
0888   0BA7 00 00 01 00 
0888   0BAB 00 00 00 00 
0888   0BAF 00 00 01 00 
0888   0BB3 00 00 01 00 
0888   0BB7 01 00 00 00 
0888   0BBB 00 00 00 00 
0888   0BBF 00 00 01 00 
0888   0BC3 00 00 01 00 
0888   0BC7 00 00 00 00 
0889   0BCB 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 
0889   0BCF 00 00 00 00 
0889   0BD3 00 00 00 00 
0889   0BD7 00 00 00 00 
0889   0BDB 00 00 00 00 
0889   0BDF 00 00 00 00 
0889   0BE3 00 00 00 00 
0889   0BE7 00 00 00 00 
0889   0BEB 00 00 00 00 
0889   0BEF 00 00 00 00 
0889   0BF3 00 00 00 00 
0889   0BF7 01 00 00 00 
0889   0BFB 00 00 00 00 
0889   0BFF 00 00 00 00 
0889   0C03 01 00 00 00 
0890   0C07 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0890   0C0B 00 00 00 00 
0890   0C0F 00 00 00 00 
0890   0C13 01 00 00 00 
0890   0C17 00 00 00 00 
0890   0C1B 00 00 00 00 
0890   0C1F 00 00 00 00 
0890   0C23 00 00 00 00 
0890   0C27 00 00 00 00 
0890   0C2B 00 00 00 00 
0890   0C2F 00 00 00 00 
0890   0C33 00 00 00 00 
0890   0C37 00 00 00 00 
0890   0C3B 00 00 00 00 
0890   0C3F 00 00 00 00 
0891   0C43 00 00 00 00 .dw 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0891   0C47 01 00 00 00 
0891   0C4B 00 00 00 00 
0891   0C4F 01 00 00 00 
0891   0C53 00 00 00 00 
0891   0C57 00 00 00 00 
0891   0C5B 00 00 00 00 
0891   0C5F 00 00 00 00 
0891   0C63 00 00 00 00 
0891   0C67 00 00 00 00 
0891   0C6B 00 00 00 00 
0891   0C6F 00 00 00 00 
0891   0C73 00 00 00 00 
0891   0C77 00 00 00 00 
0891   0C7B 00 00 00 00 
0892   0C7F 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0892   0C83 00 00 00 00 
0892   0C87 00 00 00 00 
0892   0C8B 00 00 00 00 
0892   0C8F 00 00 00 00 
0892   0C93 00 00 00 00 
0892   0C97 01 00 01 00 
0892   0C9B 00 00 00 00 
0892   0C9F 00 00 00 00 
0892   0CA3 00 00 00 00 
0892   0CA7 00 00 00 00 
0892   0CAB 00 00 00 00 
0892   0CAF 00 00 00 00 
0892   0CB3 00 00 00 00 
0892   0CB7 00 00 00 00 
0893   0CBB 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0893   0CBF 00 00 00 00 
0893   0CC3 00 00 00 00 
0893   0CC7 00 00 00 00 
0893   0CCB 00 00 
0894   0CCD 00 00 00 00 .fill 1880, 0
0894   0CD1 00 00 00 00 
0894   0CD5 00 00 00 00 
0894   0CD9 00 00 00 00 
0894   0CDD 00 00 00 00 
0894   0CE1 00 00 00 00 
0894   0CE5 00 00 00 00 
0894   0CE9 00 00 00 00 
0894   0CED 00 00 00 00 
0894   0CF1 00 00 00 00 
0894   0CF5 00 00 00 00 
0894   0CF9 00 00 00 00 
0894   0CFD 00 00 00 00 
0894   0D01 00 00 00 00 
0894   0D05 00 00 00 00 
0894   0D09 00 00 00 00 
0894   0D0D 00 00 00 00 
0894   0D11 00 00 00 00 
0894   0D15 00 00 00 00 
0894   0D19 00 00 00 00 
0894   0D1D 00 00 00 00 
0894   0D21 00 00 00 00 
0894   0D25 00 00 00 00 
0894   0D29 00 00 00 00 
0894   0D2D 00 00 00 00 
0894   0D31 00 00 00 00 
0894   0D35 00 00 00 00 
0894   0D39 00 00 00 00 
0894   0D3D 00 00 00 00 
0894   0D41 00 00 00 00 
0894   0D45 00 00 00 00 
0894   0D49 00 00 00 00 
0894   0D4D 00 00 00 00 
0894   0D51 00 00 00 00 
0894   0D55 00 00 00 00 
0894   0D59 00 00 00 00 
0894   0D5D 00 00 00 00 
0894   0D61 00 00 00 00 
0894   0D65 00 00 00 00 
0894   0D69 00 00 00 00 
0894   0D6D 00 00 00 00 
0894   0D71 00 00 00 00 
0894   0D75 00 00 00 00 
0894   0D79 00 00 00 00 
0894   0D7D 00 00 00 00 
0894   0D81 00 00 00 00 
0894   0D85 00 00 00 00 
0894   0D89 00 00 00 00 
0894   0D8D 00 00 00 00 
0894   0D91 00 00 00 00 
0894   0D95 00 00 00 00 
0894   0D99 00 00 00 00 
0894   0D9D 00 00 00 00 
0894   0DA1 00 00 00 00 
0894   0DA5 00 00 00 00 
0894   0DA9 00 00 00 00 
0894   0DAD 00 00 00 00 
0894   0DB1 00 00 00 00 
0894   0DB5 00 00 00 00 
0894   0DB9 00 00 00 00 
0894   0DBD 00 00 00 00 
0894   0DC1 00 00 00 00 
0894   0DC5 00 00 00 00 
0894   0DC9 00 00 00 00 
0894   0DCD 00 00 00 00 
0894   0DD1 00 00 00 00 
0894   0DD5 00 00 00 00 
0894   0DD9 00 00 00 00 
0894   0DDD 00 00 00 00 
0894   0DE1 00 00 00 00 
0894   0DE5 00 00 00 00 
0894   0DE9 00 00 00 00 
0894   0DED 00 00 00 00 
0894   0DF1 00 00 00 00 
0894   0DF5 00 00 00 00 
0894   0DF9 00 00 00 00 
0894   0DFD 00 00 00 00 
0894   0E01 00 00 00 00 
0894   0E05 00 00 00 00 
0894   0E09 00 00 00 00 
0894   0E0D 00 00 00 00 
0894   0E11 00 00 00 00 
0894   0E15 00 00 00 00 
0894   0E19 00 00 00 00 
0894   0E1D 00 00 00 00 
0894   0E21 00 00 00 00 
0894   0E25 00 00 00 00 
0894   0E29 00 00 00 00 
0894   0E2D 00 00 00 00 
0894   0E31 00 00 00 00 
0894   0E35 00 00 00 00 
0894   0E39 00 00 00 00 
0894   0E3D 00 00 00 00 
0894   0E41 00 00 00 00 
0894   0E45 00 00 00 00 
0894   0E49 00 00 00 00 
0894   0E4D 00 00 00 00 
0894   0E51 00 00 00 00 
0894   0E55 00 00 00 00 
0894   0E59 00 00 00 00 
0894   0E5D 00 00 00 00 
0894   0E61 00 00 00 00 
0894   0E65 00 00 00 00 
0894   0E69 00 00 00 00 
0894   0E6D 00 00 00 00 
0894   0E71 00 00 00 00 
0894   0E75 00 00 00 00 
0894   0E79 00 00 00 00 
0894   0E7D 00 00 00 00 
0894   0E81 00 00 00 00 
0894   0E85 00 00 00 00 
0894   0E89 00 00 00 00 
0894   0E8D 00 00 00 00 
0894   0E91 00 00 00 00 
0894   0E95 00 00 00 00 
0894   0E99 00 00 00 00 
0894   0E9D 00 00 00 00 
0894   0EA1 00 00 00 00 
0894   0EA5 00 00 00 00 
0894   0EA9 00 00 00 00 
0894   0EAD 00 00 00 00 
0894   0EB1 00 00 00 00 
0894   0EB5 00 00 00 00 
0894   0EB9 00 00 00 00 
0894   0EBD 00 00 00 00 
0894   0EC1 00 00 00 00 
0894   0EC5 00 00 00 00 
0894   0EC9 00 00 00 00 
0894   0ECD 00 00 00 00 
0894   0ED1 00 00 00 00 
0894   0ED5 00 00 00 00 
0894   0ED9 00 00 00 00 
0894   0EDD 00 00 00 00 
0894   0EE1 00 00 00 00 
0894   0EE5 00 00 00 00 
0894   0EE9 00 00 00 00 
0894   0EED 00 00 00 00 
0894   0EF1 00 00 00 00 
0894   0EF5 00 00 00 00 
0894   0EF9 00 00 00 00 
0894   0EFD 00 00 00 00 
0894   0F01 00 00 00 00 
0894   0F05 00 00 00 00 
0894   0F09 00 00 00 00 
0894   0F0D 00 00 00 00 
0894   0F11 00 00 00 00 
0894   0F15 00 00 00 00 
0894   0F19 00 00 00 00 
0894   0F1D 00 00 00 00 
0894   0F21 00 00 00 00 
0894   0F25 00 00 00 00 
0894   0F29 00 00 00 00 
0894   0F2D 00 00 00 00 
0894   0F31 00 00 00 00 
0894   0F35 00 00 00 00 
0894   0F39 00 00 00 00 
0894   0F3D 00 00 00 00 
0894   0F41 00 00 00 00 
0894   0F45 00 00 00 00 
0894   0F49 00 00 00 00 
0894   0F4D 00 00 00 00 
0894   0F51 00 00 00 00 
0894   0F55 00 00 00 00 
0894   0F59 00 00 00 00 
0894   0F5D 00 00 00 00 
0894   0F61 00 00 00 00 
0894   0F65 00 00 00 00 
0894   0F69 00 00 00 00 
0894   0F6D 00 00 00 00 
0894   0F71 00 00 00 00 
0894   0F75 00 00 00 00 
0894   0F79 00 00 00 00 
0894   0F7D 00 00 00 00 
0894   0F81 00 00 00 00 
0894   0F85 00 00 00 00 
0894   0F89 00 00 00 00 
0894   0F8D 00 00 00 00 
0894   0F91 00 00 00 00 
0894   0F95 00 00 00 00 
0894   0F99 00 00 00 00 
0894   0F9D 00 00 00 00 
0894   0FA1 00 00 00 00 
0894   0FA5 00 00 00 00 
0894   0FA9 00 00 00 00 
0894   0FAD 00 00 00 00 
0894   0FB1 00 00 00 00 
0894   0FB5 00 00 00 00 
0894   0FB9 00 00 00 00 
0894   0FBD 00 00 00 00 
0894   0FC1 00 00 00 00 
0894   0FC5 00 00 00 00 
0894   0FC9 00 00 00 00 
0894   0FCD 00 00 00 00 
0894   0FD1 00 00 00 00 
0894   0FD5 00 00 00 00 
0894   0FD9 00 00 00 00 
0894   0FDD 00 00 00 00 
0894   0FE1 00 00 00 00 
0894   0FE5 00 00 00 00 
0894   0FE9 00 00 00 00 
0894   0FED 00 00 00 00 
0894   0FF1 00 00 00 00 
0894   0FF5 00 00 00 00 
0894   0FF9 00 00 00 00 
0894   0FFD 00 00 00 00 
0894   1001 00 00 00 00 
0894   1005 00 00 00 00 
0894   1009 00 00 00 00 
0894   100D 00 00 00 00 
0894   1011 00 00 00 00 
0894   1015 00 00 00 00 
0894   1019 00 00 00 00 
0894   101D 00 00 00 00 
0894   1021 00 00 00 00 
0894   1025 00 00 00 00 
0894   1029 00 00 00 00 
0894   102D 00 00 00 00 
0894   1031 00 00 00 00 
0894   1035 00 00 00 00 
0894   1039 00 00 00 00 
0894   103D 00 00 00 00 
0894   1041 00 00 00 00 
0894   1045 00 00 00 00 
0894   1049 00 00 00 00 
0894   104D 00 00 00 00 
0894   1051 00 00 00 00 
0894   1055 00 00 00 00 
0894   1059 00 00 00 00 
0894   105D 00 00 00 00 
0894   1061 00 00 00 00 
0894   1065 00 00 00 00 
0894   1069 00 00 00 00 
0894   106D 00 00 00 00 
0894   1071 00 00 00 00 
0894   1075 00 00 00 00 
0894   1079 00 00 00 00 
0894   107D 00 00 00 00 
0894   1081 00 00 00 00 
0894   1085 00 00 00 00 
0894   1089 00 00 00 00 
0894   108D 00 00 00 00 
0894   1091 00 00 00 00 
0894   1095 00 00 00 00 
0894   1099 00 00 00 00 
0894   109D 00 00 00 00 
0894   10A1 00 00 00 00 
0894   10A5 00 00 00 00 
0894   10A9 00 00 00 00 
0894   10AD 00 00 00 00 
0894   10B1 00 00 00 00 
0894   10B5 00 00 00 00 
0894   10B9 00 00 00 00 
0894   10BD 00 00 00 00 
0894   10C1 00 00 00 00 
0894   10C5 00 00 00 00 
0894   10C9 00 00 00 00 
0894   10CD 00 00 00 00 
0894   10D1 00 00 00 00 
0894   10D5 00 00 00 00 
0894   10D9 00 00 00 00 
0894   10DD 00 00 00 00 
0894   10E1 00 00 00 00 
0894   10E5 00 00 00 00 
0894   10E9 00 00 00 00 
0894   10ED 00 00 00 00 
0894   10F1 00 00 00 00 
0894   10F5 00 00 00 00 
0894   10F9 00 00 00 00 
0894   10FD 00 00 00 00 
0894   1101 00 00 00 00 
0894   1105 00 00 00 00 
0894   1109 00 00 00 00 
0894   110D 00 00 00 00 
0894   1111 00 00 00 00 
0894   1115 00 00 00 00 
0894   1119 00 00 00 00 
0894   111D 00 00 00 00 
0894   1121 00 00 00 00 
0894   1125 00 00 00 00 
0894   1129 00 00 00 00 
0894   112D 00 00 00 00 
0894   1131 00 00 00 00 
0894   1135 00 00 00 00 
0894   1139 00 00 00 00 
0894   113D 00 00 00 00 
0894   1141 00 00 00 00 
0894   1145 00 00 00 00 
0894   1149 00 00 00 00 
0894   114D 00 00 00 00 
0894   1151 00 00 00 00 
0894   1155 00 00 00 00 
0894   1159 00 00 00 00 
0894   115D 00 00 00 00 
0894   1161 00 00 00 00 
0894   1165 00 00 00 00 
0894   1169 00 00 00 00 
0894   116D 00 00 00 00 
0894   1171 00 00 00 00 
0894   1175 00 00 00 00 
0894   1179 00 00 00 00 
0894   117D 00 00 00 00 
0894   1181 00 00 00 00 
0894   1185 00 00 00 00 
0894   1189 00 00 00 00 
0894   118D 00 00 00 00 
0894   1191 00 00 00 00 
0894   1195 00 00 00 00 
0894   1199 00 00 00 00 
0894   119D 00 00 00 00 
0894   11A1 00 00 00 00 
0894   11A5 00 00 00 00 
0894   11A9 00 00 00 00 
0894   11AD 00 00 00 00 
0894   11B1 00 00 00 00 
0894   11B5 00 00 00 00 
0894   11B9 00 00 00 00 
0894   11BD 00 00 00 00 
0894   11C1 00 00 00 00 
0894   11C5 00 00 00 00 
0894   11C9 00 00 00 00 
0894   11CD 00 00 00 00 
0894   11D1 00 00 00 00 
0894   11D5 00 00 00 00 
0894   11D9 00 00 00 00 
0894   11DD 00 00 00 00 
0894   11E1 00 00 00 00 
0894   11E5 00 00 00 00 
0894   11E9 00 00 00 00 
0894   11ED 00 00 00 00 
0894   11F1 00 00 00 00 
0894   11F5 00 00 00 00 
0894   11F9 00 00 00 00 
0894   11FD 00 00 00 00 
0894   1201 00 00 00 00 
0894   1205 00 00 00 00 
0894   1209 00 00 00 00 
0894   120D 00 00 00 00 
0894   1211 00 00 00 00 
0894   1215 00 00 00 00 
0894   1219 00 00 00 00 
0894   121D 00 00 00 00 
0894   1221 00 00 00 00 
0894   1225 00 00 00 00 
0894   1229 00 00 00 00 
0894   122D 00 00 00 00 
0894   1231 00 00 00 00 
0894   1235 00 00 00 00 
0894   1239 00 00 00 00 
0894   123D 00 00 00 00 
0894   1241 00 00 00 00 
0894   1245 00 00 00 00 
0894   1249 00 00 00 00 
0894   124D 00 00 00 00 
0894   1251 00 00 00 00 
0894   1255 00 00 00 00 
0894   1259 00 00 00 00 
0894   125D 00 00 00 00 
0894   1261 00 00 00 00 
0894   1265 00 00 00 00 
0894   1269 00 00 00 00 
0894   126D 00 00 00 00 
0894   1271 00 00 00 00 
0894   1275 00 00 00 00 
0894   1279 00 00 00 00 
0894   127D 00 00 00 00 
0894   1281 00 00 00 00 
0894   1285 00 00 00 00 
0894   1289 00 00 00 00 
0894   128D 00 00 00 00 
0894   1291 00 00 00 00 
0894   1295 00 00 00 00 
0894   1299 00 00 00 00 
0894   129D 00 00 00 00 
0894   12A1 00 00 00 00 
0894   12A5 00 00 00 00 
0894   12A9 00 00 00 00 
0894   12AD 00 00 00 00 
0894   12B1 00 00 00 00 
0894   12B5 00 00 00 00 
0894   12B9 00 00 00 00 
0894   12BD 00 00 00 00 
0894   12C1 00 00 00 00 
0894   12C5 00 00 00 00 
0894   12C9 00 00 00 00 
0894   12CD 00 00 00 00 
0894   12D1 00 00 00 00 
0894   12D5 00 00 00 00 
0894   12D9 00 00 00 00 
0894   12DD 00 00 00 00 
0894   12E1 00 00 00 00 
0894   12E5 00 00 00 00 
0894   12E9 00 00 00 00 
0894   12ED 00 00 00 00 
0894   12F1 00 00 00 00 
0894   12F5 00 00 00 00 
0894   12F9 00 00 00 00 
0894   12FD 00 00 00 00 
0894   1301 00 00 00 00 
0894   1305 00 00 00 00 
0894   1309 00 00 00 00 
0894   130D 00 00 00 00 
0894   1311 00 00 00 00 
0894   1315 00 00 00 00 
0894   1319 00 00 00 00 
0894   131D 00 00 00 00 
0894   1321 00 00 00 00 
0894   1325 00 00 00 00 
0894   1329 00 00 00 00 
0894   132D 00 00 00 00 
0894   1331 00 00 00 00 
0894   1335 00 00 00 00 
0894   1339 00 00 00 00 
0894   133D 00 00 00 00 
0894   1341 00 00 00 00 
0894   1345 00 00 00 00 
0894   1349 00 00 00 00 
0894   134D 00 00 00 00 
0894   1351 00 00 00 00 
0894   1355 00 00 00 00 
0894   1359 00 00 00 00 
0894   135D 00 00 00 00 
0894   1361 00 00 00 00 
0894   1365 00 00 00 00 
0894   1369 00 00 00 00 
0894   136D 00 00 00 00 
0894   1371 00 00 00 00 
0894   1375 00 00 00 00 
0894   1379 00 00 00 00 
0894   137D 00 00 00 00 
0894   1381 00 00 00 00 
0894   1385 00 00 00 00 
0894   1389 00 00 00 00 
0894   138D 00 00 00 00 
0894   1391 00 00 00 00 
0894   1395 00 00 00 00 
0894   1399 00 00 00 00 
0894   139D 00 00 00 00 
0894   13A1 00 00 00 00 
0894   13A5 00 00 00 00 
0894   13A9 00 00 00 00 
0894   13AD 00 00 00 00 
0894   13B1 00 00 00 00 
0894   13B5 00 00 00 00 
0894   13B9 00 00 00 00 
0894   13BD 00 00 00 00 
0894   13C1 00 00 00 00 
0894   13C5 00 00 00 00 
0894   13C9 00 00 00 00 
0894   13CD 00 00 00 00 
0894   13D1 00 00 00 00 
0894   13D5 00 00 00 00 
0894   13D9 00 00 00 00 
0894   13DD 00 00 00 00 
0894   13E1 00 00 00 00 
0894   13E5 00 00 00 00 
0894   13E9 00 00 00 00 
0894   13ED 00 00 00 00 
0894   13F1 00 00 00 00 
0894   13F5 00 00 00 00 
0894   13F9 00 00 00 00 
0894   13FD 00 00 00 00 
0894   1401 00 00 00 00 
0894   1405 00 00 00 00 
0894   1409 00 00 00 00 
0894   140D 00 00 00 00 
0894   1411 00 00 00 00 
0894   1415 00 00 00 00 
0894   1419 00 00 00 00 
0894   141D 00 00 00 00 
0894   1421 00 00 00 00 
0895   1425 73 09       curr_state: .dw curr_state_data
0896   1427 00 00 00 00 next_state_data: .fill 2738, 0
0896   142B 00 00 00 00 
0896   142F 00 00 00 00 
0896   1433 00 00 00 00 
0896   1437 00 00 00 00 
0896   143B 00 00 00 00 
0896   143F 00 00 00 00 
0896   1443 00 00 00 00 
0896   1447 00 00 00 00 
0896   144B 00 00 00 00 
0896   144F 00 00 00 00 
0896   1453 00 00 00 00 
0896   1457 00 00 00 00 
0896   145B 00 00 00 00 
0896   145F 00 00 00 00 
0896   1463 00 00 00 00 
0896   1467 00 00 00 00 
0896   146B 00 00 00 00 
0896   146F 00 00 00 00 
0896   1473 00 00 00 00 
0896   1477 00 00 00 00 
0896   147B 00 00 00 00 
0896   147F 00 00 00 00 
0896   1483 00 00 00 00 
0896   1487 00 00 00 00 
0896   148B 00 00 00 00 
0896   148F 00 00 00 00 
0896   1493 00 00 00 00 
0896   1497 00 00 00 00 
0896   149B 00 00 00 00 
0896   149F 00 00 00 00 
0896   14A3 00 00 00 00 
0896   14A7 00 00 00 00 
0896   14AB 00 00 00 00 
0896   14AF 00 00 00 00 
0896   14B3 00 00 00 00 
0896   14B7 00 00 00 00 
0896   14BB 00 00 00 00 
0896   14BF 00 00 00 00 
0896   14C3 00 00 00 00 
0896   14C7 00 00 00 00 
0896   14CB 00 00 00 00 
0896   14CF 00 00 00 00 
0896   14D3 00 00 00 00 
0896   14D7 00 00 00 00 
0896   14DB 00 00 00 00 
0896   14DF 00 00 00 00 
0896   14E3 00 00 00 00 
0896   14E7 00 00 00 00 
0896   14EB 00 00 00 00 
0896   14EF 00 00 00 00 
0896   14F3 00 00 00 00 
0896   14F7 00 00 00 00 
0896   14FB 00 00 00 00 
0896   14FF 00 00 00 00 
0896   1503 00 00 00 00 
0896   1507 00 00 00 00 
0896   150B 00 00 00 00 
0896   150F 00 00 00 00 
0896   1513 00 00 00 00 
0896   1517 00 00 00 00 
0896   151B 00 00 00 00 
0896   151F 00 00 00 00 
0896   1523 00 00 00 00 
0896   1527 00 00 00 00 
0896   152B 00 00 00 00 
0896   152F 00 00 00 00 
0896   1533 00 00 00 00 
0896   1537 00 00 00 00 
0896   153B 00 00 00 00 
0896   153F 00 00 00 00 
0896   1543 00 00 00 00 
0896   1547 00 00 00 00 
0896   154B 00 00 00 00 
0896   154F 00 00 00 00 
0896   1553 00 00 00 00 
0896   1557 00 00 00 00 
0896   155B 00 00 00 00 
0896   155F 00 00 00 00 
0896   1563 00 00 00 00 
0896   1567 00 00 00 00 
0896   156B 00 00 00 00 
0896   156F 00 00 00 00 
0896   1573 00 00 00 00 
0896   1577 00 00 00 00 
0896   157B 00 00 00 00 
0896   157F 00 00 00 00 
0896   1583 00 00 00 00 
0896   1587 00 00 00 00 
0896   158B 00 00 00 00 
0896   158F 00 00 00 00 
0896   1593 00 00 00 00 
0896   1597 00 00 00 00 
0896   159B 00 00 00 00 
0896   159F 00 00 00 00 
0896   15A3 00 00 00 00 
0896   15A7 00 00 00 00 
0896   15AB 00 00 00 00 
0896   15AF 00 00 00 00 
0896   15B3 00 00 00 00 
0896   15B7 00 00 00 00 
0896   15BB 00 00 00 00 
0896   15BF 00 00 00 00 
0896   15C3 00 00 00 00 
0896   15C7 00 00 00 00 
0896   15CB 00 00 00 00 
0896   15CF 00 00 00 00 
0896   15D3 00 00 00 00 
0896   15D7 00 00 00 00 
0896   15DB 00 00 00 00 
0896   15DF 00 00 00 00 
0896   15E3 00 00 00 00 
0896   15E7 00 00 00 00 
0896   15EB 00 00 00 00 
0896   15EF 00 00 00 00 
0896   15F3 00 00 00 00 
0896   15F7 00 00 00 00 
0896   15FB 00 00 00 00 
0896   15FF 00 00 00 00 
0896   1603 00 00 00 00 
0896   1607 00 00 00 00 
0896   160B 00 00 00 00 
0896   160F 00 00 00 00 
0896   1613 00 00 00 00 
0896   1617 00 00 00 00 
0896   161B 00 00 00 00 
0896   161F 00 00 00 00 
0896   1623 00 00 00 00 
0896   1627 00 00 00 00 
0896   162B 00 00 00 00 
0896   162F 00 00 00 00 
0896   1633 00 00 00 00 
0896   1637 00 00 00 00 
0896   163B 00 00 00 00 
0896   163F 00 00 00 00 
0896   1643 00 00 00 00 
0896   1647 00 00 00 00 
0896   164B 00 00 00 00 
0896   164F 00 00 00 00 
0896   1653 00 00 00 00 
0896   1657 00 00 00 00 
0896   165B 00 00 00 00 
0896   165F 00 00 00 00 
0896   1663 00 00 00 00 
0896   1667 00 00 00 00 
0896   166B 00 00 00 00 
0896   166F 00 00 00 00 
0896   1673 00 00 00 00 
0896   1677 00 00 00 00 
0896   167B 00 00 00 00 
0896   167F 00 00 00 00 
0896   1683 00 00 00 00 
0896   1687 00 00 00 00 
0896   168B 00 00 00 00 
0896   168F 00 00 00 00 
0896   1693 00 00 00 00 
0896   1697 00 00 00 00 
0896   169B 00 00 00 00 
0896   169F 00 00 00 00 
0896   16A3 00 00 00 00 
0896   16A7 00 00 00 00 
0896   16AB 00 00 00 00 
0896   16AF 00 00 00 00 
0896   16B3 00 00 00 00 
0896   16B7 00 00 00 00 
0896   16BB 00 00 00 00 
0896   16BF 00 00 00 00 
0896   16C3 00 00 00 00 
0896   16C7 00 00 00 00 
0896   16CB 00 00 00 00 
0896   16CF 00 00 00 00 
0896   16D3 00 00 00 00 
0896   16D7 00 00 00 00 
0896   16DB 00 00 00 00 
0896   16DF 00 00 00 00 
0896   16E3 00 00 00 00 
0896   16E7 00 00 00 00 
0896   16EB 00 00 00 00 
0896   16EF 00 00 00 00 
0896   16F3 00 00 00 00 
0896   16F7 00 00 00 00 
0896   16FB 00 00 00 00 
0896   16FF 00 00 00 00 
0896   1703 00 00 00 00 
0896   1707 00 00 00 00 
0896   170B 00 00 00 00 
0896   170F 00 00 00 00 
0896   1713 00 00 00 00 
0896   1717 00 00 00 00 
0896   171B 00 00 00 00 
0896   171F 00 00 00 00 
0896   1723 00 00 00 00 
0896   1727 00 00 00 00 
0896   172B 00 00 00 00 
0896   172F 00 00 00 00 
0896   1733 00 00 00 00 
0896   1737 00 00 00 00 
0896   173B 00 00 00 00 
0896   173F 00 00 00 00 
0896   1743 00 00 00 00 
0896   1747 00 00 00 00 
0896   174B 00 00 00 00 
0896   174F 00 00 00 00 
0896   1753 00 00 00 00 
0896   1757 00 00 00 00 
0896   175B 00 00 00 00 
0896   175F 00 00 00 00 
0896   1763 00 00 00 00 
0896   1767 00 00 00 00 
0896   176B 00 00 00 00 
0896   176F 00 00 00 00 
0896   1773 00 00 00 00 
0896   1777 00 00 00 00 
0896   177B 00 00 00 00 
0896   177F 00 00 00 00 
0896   1783 00 00 00 00 
0896   1787 00 00 00 00 
0896   178B 00 00 00 00 
0896   178F 00 00 00 00 
0896   1793 00 00 00 00 
0896   1797 00 00 00 00 
0896   179B 00 00 00 00 
0896   179F 00 00 00 00 
0896   17A3 00 00 00 00 
0896   17A7 00 00 00 00 
0896   17AB 00 00 00 00 
0896   17AF 00 00 00 00 
0896   17B3 00 00 00 00 
0896   17B7 00 00 00 00 
0896   17BB 00 00 00 00 
0896   17BF 00 00 00 00 
0896   17C3 00 00 00 00 
0896   17C7 00 00 00 00 
0896   17CB 00 00 00 00 
0896   17CF 00 00 00 00 
0896   17D3 00 00 00 00 
0896   17D7 00 00 00 00 
0896   17DB 00 00 00 00 
0896   17DF 00 00 00 00 
0896   17E3 00 00 00 00 
0896   17E7 00 00 00 00 
0896   17EB 00 00 00 00 
0896   17EF 00 00 00 00 
0896   17F3 00 00 00 00 
0896   17F7 00 00 00 00 
0896   17FB 00 00 00 00 
0896   17FF 00 00 00 00 
0896   1803 00 00 00 00 
0896   1807 00 00 00 00 
0896   180B 00 00 00 00 
0896   180F 00 00 00 00 
0896   1813 00 00 00 00 
0896   1817 00 00 00 00 
0896   181B 00 00 00 00 
0896   181F 00 00 00 00 
0896   1823 00 00 00 00 
0896   1827 00 00 00 00 
0896   182B 00 00 00 00 
0896   182F 00 00 00 00 
0896   1833 00 00 00 00 
0896   1837 00 00 00 00 
0896   183B 00 00 00 00 
0896   183F 00 00 00 00 
0896   1843 00 00 00 00 
0896   1847 00 00 00 00 
0896   184B 00 00 00 00 
0896   184F 00 00 00 00 
0896   1853 00 00 00 00 
0896   1857 00 00 00 00 
0896   185B 00 00 00 00 
0896   185F 00 00 00 00 
0896   1863 00 00 00 00 
0896   1867 00 00 00 00 
0896   186B 00 00 00 00 
0896   186F 00 00 00 00 
0896   1873 00 00 00 00 
0896   1877 00 00 00 00 
0896   187B 00 00 00 00 
0896   187F 00 00 00 00 
0896   1883 00 00 00 00 
0896   1887 00 00 00 00 
0896   188B 00 00 00 00 
0896   188F 00 00 00 00 
0896   1893 00 00 00 00 
0896   1897 00 00 00 00 
0896   189B 00 00 00 00 
0896   189F 00 00 00 00 
0896   18A3 00 00 00 00 
0896   18A7 00 00 00 00 
0896   18AB 00 00 00 00 
0896   18AF 00 00 00 00 
0896   18B3 00 00 00 00 
0896   18B7 00 00 00 00 
0896   18BB 00 00 00 00 
0896   18BF 00 00 00 00 
0896   18C3 00 00 00 00 
0896   18C7 00 00 00 00 
0896   18CB 00 00 00 00 
0896   18CF 00 00 00 00 
0896   18D3 00 00 00 00 
0896   18D7 00 00 00 00 
0896   18DB 00 00 00 00 
0896   18DF 00 00 00 00 
0896   18E3 00 00 00 00 
0896   18E7 00 00 00 00 
0896   18EB 00 00 00 00 
0896   18EF 00 00 00 00 
0896   18F3 00 00 00 00 
0896   18F7 00 00 00 00 
0896   18FB 00 00 00 00 
0896   18FF 00 00 00 00 
0896   1903 00 00 00 00 
0896   1907 00 00 00 00 
0896   190B 00 00 00 00 
0896   190F 00 00 00 00 
0896   1913 00 00 00 00 
0896   1917 00 00 00 00 
0896   191B 00 00 00 00 
0896   191F 00 00 00 00 
0896   1923 00 00 00 00 
0896   1927 00 00 00 00 
0896   192B 00 00 00 00 
0896   192F 00 00 00 00 
0896   1933 00 00 00 00 
0896   1937 00 00 00 00 
0896   193B 00 00 00 00 
0896   193F 00 00 00 00 
0896   1943 00 00 00 00 
0896   1947 00 00 00 00 
0896   194B 00 00 00 00 
0896   194F 00 00 00 00 
0896   1953 00 00 00 00 
0896   1957 00 00 00 00 
0896   195B 00 00 00 00 
0896   195F 00 00 00 00 
0896   1963 00 00 00 00 
0896   1967 00 00 00 00 
0896   196B 00 00 00 00 
0896   196F 00 00 00 00 
0896   1973 00 00 00 00 
0896   1977 00 00 00 00 
0896   197B 00 00 00 00 
0896   197F 00 00 00 00 
0896   1983 00 00 00 00 
0896   1987 00 00 00 00 
0896   198B 00 00 00 00 
0896   198F 00 00 00 00 
0896   1993 00 00 00 00 
0896   1997 00 00 00 00 
0896   199B 00 00 00 00 
0896   199F 00 00 00 00 
0896   19A3 00 00 00 00 
0896   19A7 00 00 00 00 
0896   19AB 00 00 00 00 
0896   19AF 00 00 00 00 
0896   19B3 00 00 00 00 
0896   19B7 00 00 00 00 
0896   19BB 00 00 00 00 
0896   19BF 00 00 00 00 
0896   19C3 00 00 00 00 
0896   19C7 00 00 00 00 
0896   19CB 00 00 00 00 
0896   19CF 00 00 00 00 
0896   19D3 00 00 00 00 
0896   19D7 00 00 00 00 
0896   19DB 00 00 00 00 
0896   19DF 00 00 00 00 
0896   19E3 00 00 00 00 
0896   19E7 00 00 00 00 
0896   19EB 00 00 00 00 
0896   19EF 00 00 00 00 
0896   19F3 00 00 00 00 
0896   19F7 00 00 00 00 
0896   19FB 00 00 00 00 
0896   19FF 00 00 00 00 
0896   1A03 00 00 00 00 
0896   1A07 00 00 00 00 
0896   1A0B 00 00 00 00 
0896   1A0F 00 00 00 00 
0896   1A13 00 00 00 00 
0896   1A17 00 00 00 00 
0896   1A1B 00 00 00 00 
0896   1A1F 00 00 00 00 
0896   1A23 00 00 00 00 
0896   1A27 00 00 00 00 
0896   1A2B 00 00 00 00 
0896   1A2F 00 00 00 00 
0896   1A33 00 00 00 00 
0896   1A37 00 00 00 00 
0896   1A3B 00 00 00 00 
0896   1A3F 00 00 00 00 
0896   1A43 00 00 00 00 
0896   1A47 00 00 00 00 
0896   1A4B 00 00 00 00 
0896   1A4F 00 00 00 00 
0896   1A53 00 00 00 00 
0896   1A57 00 00 00 00 
0896   1A5B 00 00 00 00 
0896   1A5F 00 00 00 00 
0896   1A63 00 00 00 00 
0896   1A67 00 00 00 00 
0896   1A6B 00 00 00 00 
0896   1A6F 00 00 00 00 
0896   1A73 00 00 00 00 
0896   1A77 00 00 00 00 
0896   1A7B 00 00 00 00 
0896   1A7F 00 00 00 00 
0896   1A83 00 00 00 00 
0896   1A87 00 00 00 00 
0896   1A8B 00 00 00 00 
0896   1A8F 00 00 00 00 
0896   1A93 00 00 00 00 
0896   1A97 00 00 00 00 
0896   1A9B 00 00 00 00 
0896   1A9F 00 00 00 00 
0896   1AA3 00 00 00 00 
0896   1AA7 00 00 00 00 
0896   1AAB 00 00 00 00 
0896   1AAF 00 00 00 00 
0896   1AB3 00 00 00 00 
0896   1AB7 00 00 00 00 
0896   1ABB 00 00 00 00 
0896   1ABF 00 00 00 00 
0896   1AC3 00 00 00 00 
0896   1AC7 00 00 00 00 
0896   1ACB 00 00 00 00 
0896   1ACF 00 00 00 00 
0896   1AD3 00 00 00 00 
0896   1AD7 00 00 00 00 
0896   1ADB 00 00 00 00 
0896   1ADF 00 00 00 00 
0896   1AE3 00 00 00 00 
0896   1AE7 00 00 00 00 
0896   1AEB 00 00 00 00 
0896   1AEF 00 00 00 00 
0896   1AF3 00 00 00 00 
0896   1AF7 00 00 00 00 
0896   1AFB 00 00 00 00 
0896   1AFF 00 00 00 00 
0896   1B03 00 00 00 00 
0896   1B07 00 00 00 00 
0896   1B0B 00 00 00 00 
0896   1B0F 00 00 00 00 
0896   1B13 00 00 00 00 
0896   1B17 00 00 00 00 
0896   1B1B 00 00 00 00 
0896   1B1F 00 00 00 00 
0896   1B23 00 00 00 00 
0896   1B27 00 00 00 00 
0896   1B2B 00 00 00 00 
0896   1B2F 00 00 00 00 
0896   1B33 00 00 00 00 
0896   1B37 00 00 00 00 
0896   1B3B 00 00 00 00 
0896   1B3F 00 00 00 00 
0896   1B43 00 00 00 00 
0896   1B47 00 00 00 00 
0896   1B4B 00 00 00 00 
0896   1B4F 00 00 00 00 
0896   1B53 00 00 00 00 
0896   1B57 00 00 00 00 
0896   1B5B 00 00 00 00 
0896   1B5F 00 00 00 00 
0896   1B63 00 00 00 00 
0896   1B67 00 00 00 00 
0896   1B6B 00 00 00 00 
0896   1B6F 00 00 00 00 
0896   1B73 00 00 00 00 
0896   1B77 00 00 00 00 
0896   1B7B 00 00 00 00 
0896   1B7F 00 00 00 00 
0896   1B83 00 00 00 00 
0896   1B87 00 00 00 00 
0896   1B8B 00 00 00 00 
0896   1B8F 00 00 00 00 
0896   1B93 00 00 00 00 
0896   1B97 00 00 00 00 
0896   1B9B 00 00 00 00 
0896   1B9F 00 00 00 00 
0896   1BA3 00 00 00 00 
0896   1BA7 00 00 00 00 
0896   1BAB 00 00 00 00 
0896   1BAF 00 00 00 00 
0896   1BB3 00 00 00 00 
0896   1BB7 00 00 00 00 
0896   1BBB 00 00 00 00 
0896   1BBF 00 00 00 00 
0896   1BC3 00 00 00 00 
0896   1BC7 00 00 00 00 
0896   1BCB 00 00 00 00 
0896   1BCF 00 00 00 00 
0896   1BD3 00 00 00 00 
0896   1BD7 00 00 00 00 
0896   1BDB 00 00 00 00 
0896   1BDF 00 00 00 00 
0896   1BE3 00 00 00 00 
0896   1BE7 00 00 00 00 
0896   1BEB 00 00 00 00 
0896   1BEF 00 00 00 00 
0896   1BF3 00 00 00 00 
0896   1BF7 00 00 00 00 
0896   1BFB 00 00 00 00 
0896   1BFF 00 00 00 00 
0896   1C03 00 00 00 00 
0896   1C07 00 00 00 00 
0896   1C0B 00 00 00 00 
0896   1C0F 00 00 00 00 
0896   1C13 00 00 00 00 
0896   1C17 00 00 00 00 
0896   1C1B 00 00 00 00 
0896   1C1F 00 00 00 00 
0896   1C23 00 00 00 00 
0896   1C27 00 00 00 00 
0896   1C2B 00 00 00 00 
0896   1C2F 00 00 00 00 
0896   1C33 00 00 00 00 
0896   1C37 00 00 00 00 
0896   1C3B 00 00 00 00 
0896   1C3F 00 00 00 00 
0896   1C43 00 00 00 00 
0896   1C47 00 00 00 00 
0896   1C4B 00 00 00 00 
0896   1C4F 00 00 00 00 
0896   1C53 00 00 00 00 
0896   1C57 00 00 00 00 
0896   1C5B 00 00 00 00 
0896   1C5F 00 00 00 00 
0896   1C63 00 00 00 00 
0896   1C67 00 00 00 00 
0896   1C6B 00 00 00 00 
0896   1C6F 00 00 00 00 
0896   1C73 00 00 00 00 
0896   1C77 00 00 00 00 
0896   1C7B 00 00 00 00 
0896   1C7F 00 00 00 00 
0896   1C83 00 00 00 00 
0896   1C87 00 00 00 00 
0896   1C8B 00 00 00 00 
0896   1C8F 00 00 00 00 
0896   1C93 00 00 00 00 
0896   1C97 00 00 00 00 
0896   1C9B 00 00 00 00 
0896   1C9F 00 00 00 00 
0896   1CA3 00 00 00 00 
0896   1CA7 00 00 00 00 
0896   1CAB 00 00 00 00 
0896   1CAF 00 00 00 00 
0896   1CB3 00 00 00 00 
0896   1CB7 00 00 00 00 
0896   1CBB 00 00 00 00 
0896   1CBF 00 00 00 00 
0896   1CC3 00 00 00 00 
0896   1CC7 00 00 00 00 
0896   1CCB 00 00 00 00 
0896   1CCF 00 00 00 00 
0896   1CD3 00 00 00 00 
0896   1CD7 00 00 00 00 
0896   1CDB 00 00 00 00 
0896   1CDF 00 00 00 00 
0896   1CE3 00 00 00 00 
0896   1CE7 00 00 00 00 
0896   1CEB 00 00 00 00 
0896   1CEF 00 00 00 00 
0896   1CF3 00 00 00 00 
0896   1CF7 00 00 00 00 
0896   1CFB 00 00 00 00 
0896   1CFF 00 00 00 00 
0896   1D03 00 00 00 00 
0896   1D07 00 00 00 00 
0896   1D0B 00 00 00 00 
0896   1D0F 00 00 00 00 
0896   1D13 00 00 00 00 
0896   1D17 00 00 00 00 
0896   1D1B 00 00 00 00 
0896   1D1F 00 00 00 00 
0896   1D23 00 00 00 00 
0896   1D27 00 00 00 00 
0896   1D2B 00 00 00 00 
0896   1D2F 00 00 00 00 
0896   1D33 00 00 00 00 
0896   1D37 00 00 00 00 
0896   1D3B 00 00 00 00 
0896   1D3F 00 00 00 00 
0896   1D43 00 00 00 00 
0896   1D47 00 00 00 00 
0896   1D4B 00 00 00 00 
0896   1D4F 00 00 00 00 
0896   1D53 00 00 00 00 
0896   1D57 00 00 00 00 
0896   1D5B 00 00 00 00 
0896   1D5F 00 00 00 00 
0896   1D63 00 00 00 00 
0896   1D67 00 00 00 00 
0896   1D6B 00 00 00 00 
0896   1D6F 00 00 00 00 
0896   1D73 00 00 00 00 
0896   1D77 00 00 00 00 
0896   1D7B 00 00 00 00 
0896   1D7F 00 00 00 00 
0896   1D83 00 00 00 00 
0896   1D87 00 00 00 00 
0896   1D8B 00 00 00 00 
0896   1D8F 00 00 00 00 
0896   1D93 00 00 00 00 
0896   1D97 00 00 00 00 
0896   1D9B 00 00 00 00 
0896   1D9F 00 00 00 00 
0896   1DA3 00 00 00 00 
0896   1DA7 00 00 00 00 
0896   1DAB 00 00 00 00 
0896   1DAF 00 00 00 00 
0896   1DB3 00 00 00 00 
0896   1DB7 00 00 00 00 
0896   1DBB 00 00 00 00 
0896   1DBF 00 00 00 00 
0896   1DC3 00 00 00 00 
0896   1DC7 00 00 00 00 
0896   1DCB 00 00 00 00 
0896   1DCF 00 00 00 00 
0896   1DD3 00 00 00 00 
0896   1DD7 00 00 00 00 
0896   1DDB 00 00 00 00 
0896   1DDF 00 00 00 00 
0896   1DE3 00 00 00 00 
0896   1DE7 00 00 00 00 
0896   1DEB 00 00 00 00 
0896   1DEF 00 00 00 00 
0896   1DF3 00 00 00 00 
0896   1DF7 00 00 00 00 
0896   1DFB 00 00 00 00 
0896   1DFF 00 00 00 00 
0896   1E03 00 00 00 00 
0896   1E07 00 00 00 00 
0896   1E0B 00 00 00 00 
0896   1E0F 00 00 00 00 
0896   1E13 00 00 00 00 
0896   1E17 00 00 00 00 
0896   1E1B 00 00 00 00 
0896   1E1F 00 00 00 00 
0896   1E23 00 00 00 00 
0896   1E27 00 00 00 00 
0896   1E2B 00 00 00 00 
0896   1E2F 00 00 00 00 
0896   1E33 00 00 00 00 
0896   1E37 00 00 00 00 
0896   1E3B 00 00 00 00 
0896   1E3F 00 00 00 00 
0896   1E43 00 00 00 00 
0896   1E47 00 00 00 00 
0896   1E4B 00 00 00 00 
0896   1E4F 00 00 00 00 
0896   1E53 00 00 00 00 
0896   1E57 00 00 00 00 
0896   1E5B 00 00 00 00 
0896   1E5F 00 00 00 00 
0896   1E63 00 00 00 00 
0896   1E67 00 00 00 00 
0896   1E6B 00 00 00 00 
0896   1E6F 00 00 00 00 
0896   1E73 00 00 00 00 
0896   1E77 00 00 00 00 
0896   1E7B 00 00 00 00 
0896   1E7F 00 00 00 00 
0896   1E83 00 00 00 00 
0896   1E87 00 00 00 00 
0896   1E8B 00 00 00 00 
0896   1E8F 00 00 00 00 
0896   1E93 00 00 00 00 
0896   1E97 00 00 00 00 
0896   1E9B 00 00 00 00 
0896   1E9F 00 00 00 00 
0896   1EA3 00 00 00 00 
0896   1EA7 00 00 00 00 
0896   1EAB 00 00 00 00 
0896   1EAF 00 00 00 00 
0896   1EB3 00 00 00 00 
0896   1EB7 00 00 00 00 
0896   1EBB 00 00 00 00 
0896   1EBF 00 00 00 00 
0896   1EC3 00 00 00 00 
0896   1EC7 00 00 00 00 
0896   1ECB 00 00 00 00 
0896   1ECF 00 00 00 00 
0896   1ED3 00 00 00 00 
0896   1ED7 00 00 
0897   1ED9 27 14       next_state: .dw next_state_data
0898   1EDB 47 65 6E 65 _string_0: .db "Generations: ", 0
0898   1EDF 72 61 74 69 
0898   1EE3 6F 6E 73 3A 
0898   1EE7 20 00 
0899   1EE9 2A 20 00    _string_1: .db "* ", 0
0900   1EEC 2E 20 00    _string_2: .db ". ", 0
0901   1EEF 0A 00       _string_3: .db "\n", 0
0902   1EF1             ; --- END DATA BLOCK
0903   1EF1             
0904   1EF1             ; --- BEGIN INCLUDE BLOCK
0905   1EF1             .include "lib/stdio.asm"
0001+  1EF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1EF1             ; stdio.s
0003+  1EF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1EF1             .include "lib/string.asm"
0001++ 1EF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1EF1             ; string.s
0003++ 1EF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1EF1             
0005++ 1EF1             
0006++ 1EF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1EF1             ; strrev
0008++ 1EF1             ; reverse a string
0009++ 1EF1             ; D = string address
0010++ 1EF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1EF1             ; 01234
0012++ 1EF1             strrev:
0013++ 1EF1 4B          	pusha
0014++ 1EF2 07 38 1F    	call strlen	; length in C
0015++ 1EF5 12          	mov a, c
0016++ 1EF6 AF 01 00    	cmp a, 1
0017++ 1EF9 D0 13 1F    	jleu strrev_end	; check string length. string len must be > 1
0018++ 1EFC 7D          	dec a
0019++ 1EFD FD 4E       	mov si, d	; beginning of string
0020++ 1EFF FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1F01 59          	add d, a	; end of string
0022++ 1F02 12          	mov a, c
0023++ 1F03 FD 9B       	shr a		; divide by 2
0024++ 1F05 39          	mov c, a	; C now counts the steps
0025++ 1F06             strrev_L0:
0026++ 1F06 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1F07 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1F08 3E          	mov [d], al	; store left char into right side
0029++ 1F09 1B          	mov al, bl
0030++ 1F0A F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1F0B 7E          	dec c
0032++ 1F0C 7F          	dec d
0033++ 1F0D C2 00 00    	cmp c, 0
0034++ 1F10 C7 06 1F    	jne strrev_L0
0035++ 1F13             strrev_end:
0036++ 1F13 4C          	popa
0037++ 1F14 09          	ret
0038++ 1F15             	
0039++ 1F15             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1F15             ; strchr
0041++ 1F15             ; search string in D for char in AL
0042++ 1F15             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1F15             strchr:
0044++ 1F15             strchr_L0:
0045++ 1F15 32          	mov bl, [d]
0046++ 1F16 C1 00       	cmp bl, 0
0047++ 1F18 C6 23 1F    	je strchr_end
0048++ 1F1B BA          	cmp al, bl
0049++ 1F1C C6 23 1F    	je strchr_end
0050++ 1F1F 79          	inc d
0051++ 1F20 0A 15 1F    	jmp strchr_L0
0052++ 1F23             strchr_end:
0053++ 1F23 1B          	mov al, bl
0054++ 1F24 09          	ret
0055++ 1F25             
0056++ 1F25             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1F25             ; strstr
0058++ 1F25             ; find sub-string
0059++ 1F25             ; str1 in SI
0060++ 1F25             ; str2 in DI
0061++ 1F25             ; SI points to end of source string
0062++ 1F25             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1F25             strstr:
0064++ 1F25 DB          	push al
0065++ 1F26 DA          	push d
0066++ 1F27 E3          	push di
0067++ 1F28             strstr_loop:
0068++ 1F28 F3          	cmpsb					; compare a byte of the strings
0069++ 1F29 C7 34 1F    	jne strstr_ret
0070++ 1F2C FC 00 00    	lea d, [di + 0]
0071++ 1F2F BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1F31 C7 28 1F    	jne strstr_loop				; equal chars but not at end
0073++ 1F34             strstr_ret:
0074++ 1F34 F0          	pop di
0075++ 1F35 E7          	pop d
0076++ 1F36 E8          	pop al
0077++ 1F37 09          	ret
0078++ 1F38             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1F38             ; length of null terminated string
0080++ 1F38             ; result in C
0081++ 1F38             ; pointer in D
0082++ 1F38             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1F38             strlen:
0084++ 1F38 DA          	push d
0085++ 1F39 38 00 00    	mov c, 0
0086++ 1F3C             strlen_L1:
0087++ 1F3C BD 00       	cmp byte [d], 0
0088++ 1F3E C6 46 1F    	je strlen_ret
0089++ 1F41 79          	inc d
0090++ 1F42 78          	inc c
0091++ 1F43 0A 3C 1F    	jmp strlen_L1
0092++ 1F46             strlen_ret:
0093++ 1F46 E7          	pop d
0094++ 1F47 09          	ret
0095++ 1F48             
0096++ 1F48             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1F48             ; STRCMP
0098++ 1F48             ; compare two strings
0099++ 1F48             ; str1 in SI
0100++ 1F48             ; str2 in DI
0101++ 1F48             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1F48             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1F48             strcmp:
0104++ 1F48 DB          	push al
0105++ 1F49 DA          	push d
0106++ 1F4A E3          	push di
0107++ 1F4B E2          	push si
0108++ 1F4C             strcmp_loop:
0109++ 1F4C F3          	cmpsb					; compare a byte of the strings
0110++ 1F4D C7 58 1F    	jne strcmp_ret
0111++ 1F50 FB FF FF    	lea d, [si +- 1]
0112++ 1F53 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1F55 C7 4C 1F    	jne strcmp_loop				; equal chars but not at end
0114++ 1F58             strcmp_ret:
0115++ 1F58 EF          	pop si
0116++ 1F59 F0          	pop di
0117++ 1F5A E7          	pop d
0118++ 1F5B E8          	pop al
0119++ 1F5C 09          	ret
0120++ 1F5D             
0121++ 1F5D             
0122++ 1F5D             ; STRCPY
0123++ 1F5D             ; copy null terminated string from SI to DI
0124++ 1F5D             ; source in SI
0125++ 1F5D             ; destination in DI
0126++ 1F5D             strcpy:
0127++ 1F5D E2          	push si
0128++ 1F5E E3          	push di
0129++ 1F5F DB          	push al
0130++ 1F60             strcpy_L1:
0131++ 1F60 F6          	lodsb
0132++ 1F61 F7          	stosb
0133++ 1F62 B9 00       	cmp al, 0
0134++ 1F64 C7 60 1F    	jne strcpy_L1
0135++ 1F67             strcpy_end:
0136++ 1F67 E8          	pop al
0137++ 1F68 F0          	pop di
0138++ 1F69 EF          	pop si
0139++ 1F6A 09          	ret
0140++ 1F6B             
0141++ 1F6B             ; STRCAT
0142++ 1F6B             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1F6B             ; source in SI
0144++ 1F6B             ; destination in DI
0145++ 1F6B             strcat:
0146++ 1F6B E2          	push si
0147++ 1F6C E3          	push di
0148++ 1F6D D7          	push a
0149++ 1F6E DA          	push d
0150++ 1F6F 50          	mov a, di
0151++ 1F70 3C          	mov d, a
0152++ 1F71             strcat_goto_end_L1:
0153++ 1F71 BD 00       	cmp byte[d], 0
0154++ 1F73 C6 7A 1F    	je strcat_start
0155++ 1F76 79          	inc d
0156++ 1F77 0A 71 1F    	jmp strcat_goto_end_L1
0157++ 1F7A             strcat_start:
0158++ 1F7A FD 50       	mov di, d
0159++ 1F7C             strcat_L1:
0160++ 1F7C F6          	lodsb
0161++ 1F7D F7          	stosb
0162++ 1F7E B9 00       	cmp al, 0
0163++ 1F80 C7 7C 1F    	jne strcat_L1
0164++ 1F83             strcat_end:
0165++ 1F83 E7          	pop d
0166++ 1F84 E4          	pop a
0167++ 1F85 F0          	pop di
0168++ 1F86 EF          	pop si
0169++ 1F87 09          	ret
0005+  1F88             
0006+  1F88 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  1F8C 34 35 36 37 
0006+  1F90 38 39 41 42 
0006+  1F94 43 44 45 46 
0007+  1F98             
0008+  1F98 01 00       table_power:.dw 1
0009+  1F9A 0A 00       			.dw 10
0010+  1F9C 64 00       			.dw 100
0011+  1F9E E8 03       			.dw 1000
0012+  1FA0 10 27       			.dw 10000
0013+  1FA2             
0014+  1FA2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  1FA2             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  1FA2             ; ASCII in BL
0017+  1FA2             ; result in AL
0018+  1FA2             ; ascii for F = 0100 0110
0019+  1FA2             ; ascii for 9 = 0011 1001
0020+  1FA2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  1FA2             hex_ascii_encode:
0022+  1FA2 1B          	mov al, bl
0023+  1FA3 93 40       	test al, $40				; test if letter or number
0024+  1FA5 C7 AB 1F    	jnz hex_letter
0025+  1FA8 87 0F       	and al, $0F				; get number
0026+  1FAA 09          	ret
0027+  1FAB             hex_letter:
0028+  1FAB 87 0F       	and al, $0F				; get letter
0029+  1FAD 6A 09       	add al, 9
0030+  1FAF 09          	ret
0031+  1FB0             
0032+  1FB0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  1FB0             ; ATOI
0034+  1FB0             ; 2 letter hex string in B
0035+  1FB0             ; 8bit integer returned in AL
0036+  1FB0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  1FB0             atoi:
0038+  1FB0 D8          	push b
0039+  1FB1 07 A2 1F    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  1FB4 30          	mov bl, bh
0041+  1FB5 DB          	push al					; save a
0042+  1FB6 07 A2 1F    	call hex_ascii_encode
0043+  1FB9 EA          	pop bl	
0044+  1FBA FD 9E 04    	shl al, 4
0045+  1FBD 8C          	or al, bl
0046+  1FBE E5          	pop b
0047+  1FBF 09          	ret	
0048+  1FC0             
0049+  1FC0             
0050+  1FC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1FC0             ; printf
0052+  1FC0             ; no need for explanations!
0053+  1FC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  1FC0             printf:
0055+  1FC0 09          	ret
0056+  1FC1             
0057+  1FC1             
0058+  1FC1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  1FC1             ; scanf
0060+  1FC1             ; no need for explanations!
0061+  1FC1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  1FC1             scanf:
0063+  1FC1 09          	ret
0064+  1FC2             
0065+  1FC2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  1FC2             ; ITOA
0067+  1FC2             ; 8bit value in BL
0068+  1FC2             ; 2 byte ASCII result in A
0069+  1FC2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  1FC2             itoa:
0071+  1FC2 DA          	push d
0072+  1FC3 D8          	push b
0073+  1FC4 A7 00       	mov bh, 0
0074+  1FC6 FD A4 04    	shr bl, 4	
0075+  1FC9 74          	mov d, b
0076+  1FCA 1F 88 1F    	mov al, [d + s_hex_digits]
0077+  1FCD 23          	mov ah, al
0078+  1FCE             	
0079+  1FCE E5          	pop b
0080+  1FCF D8          	push b
0081+  1FD0 A7 00       	mov bh, 0
0082+  1FD2 FD 87 0F    	and bl, $0F
0083+  1FD5 74          	mov d, b
0084+  1FD6 1F 88 1F    	mov al, [d + s_hex_digits]
0085+  1FD9 E5          	pop b
0086+  1FDA E7          	pop d
0087+  1FDB 09          	ret
0088+  1FDC             
0089+  1FDC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  1FDC             ; HEX STRING TO BINARY
0091+  1FDC             ; di = destination address
0092+  1FDC             ; si = source
0093+  1FDC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  1FDC             hex_to_int:
0095+  1FDC             hex_to_int_L1:
0096+  1FDC F6          	lodsb					; load from [SI] to AL
0097+  1FDD B9 00       	cmp al, 0				; check if ASCII 0
0098+  1FDF C6 EC 1F    	jz hex_to_int_ret
0099+  1FE2 36          	mov bh, al
0100+  1FE3 F6          	lodsb
0101+  1FE4 2F          	mov bl, al
0102+  1FE5 07 B0 1F    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  1FE8 F7          	stosb					; store AL to [DI]
0104+  1FE9 0A DC 1F    	jmp hex_to_int_L1
0105+  1FEC             hex_to_int_ret:
0106+  1FEC 09          	ret		
0107+  1FED             
0108+  1FED             
0109+  1FED             
0110+  1FED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  1FED             ; GETCHAR
0112+  1FED             ; char in ah
0113+  1FED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  1FED             getchar:
0115+  1FED DB          	push al
0116+  1FEE             getchar_retry:
0117+  1FEE FD 0C       	sti
0118+  1FF0 19 01       	mov al, 1
0119+  1FF2 05 03       	syscall sys_io			; receive in AH
0120+  1FF4 B9 00       	cmp al, 0			; check if any char was receive
0121+  1FF6 C6 EE 1F    	je getchar_retry
0122+  1FF9 E8          	pop al
0123+  1FFA 09          	ret
0124+  1FFB             
0125+  1FFB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  1FFB             ; PUTCHAR
0127+  1FFB             ; char in ah
0128+  1FFB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  1FFB             putchar:
0130+  1FFB D7          	push a
0131+  1FFC 19 00       	mov al, 0
0132+  1FFE 05 03       	syscall sys_io			; char in AH
0133+  2000 E4          	pop a
0134+  2001 09          	ret
0135+  2002             
0136+  2002             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  2002             ;; INPUT A STRING
0138+  2002             ;; terminates with null
0139+  2002             ;; pointer in D
0140+  2002             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  2002             gets:
0142+  2002 D7          	push a
0143+  2003 DA          	push d
0144+  2004             gets_loop:
0145+  2004 FD 0C       	sti
0146+  2006 19 01       	mov al, 1
0147+  2008 05 03       	syscall sys_io			; receive in AH
0148+  200A B9 00       	cmp al, 0				; check error code (AL)
0149+  200C C6 04 20    	je gets_loop			; if no char received, retry
0150+  200F             
0151+  200F 76 1B       	cmp ah, 27
0152+  2011 C6 32 20    	je gets_telnet_escape
0153+  2014 76 0A       	cmp ah, $0A				; LF
0154+  2016 C6 8B 20    	je gets_end
0155+  2019 76 0D       	cmp ah, $0D				; CR
0156+  201B C6 8B 20    	je gets_end
0157+  201E 76 5C       	cmp ah, $5C				; '\\'
0158+  2020 C6 62 20    	je gets_escape
0159+  2023             	
0160+  2023 76 08       	cmp ah, $08			; check for backspace
0161+  2025 C6 2E 20    	je gets_backspace
0162+  2028             
0163+  2028 1A          	mov al, ah
0164+  2029 3E          	mov [d], al
0165+  202A 79          	inc d
0166+  202B 0A 04 20    	jmp gets_loop
0167+  202E             gets_backspace:
0168+  202E 7F          	dec d
0169+  202F 0A 04 20    	jmp gets_loop
0170+  2032             gets_telnet_escape:
0171+  2032 FD 0C       	sti
0172+  2034 19 01       	mov al, 1
0173+  2036 05 03       	syscall sys_io				; receive in AH without echo
0174+  2038 B9 00       	cmp al, 0					; check error code (AL)
0175+  203A C6 32 20    	je gets_telnet_escape		; if no char received, retry
0176+  203D 76 5B       	cmp ah, '['
0177+  203F C7 04 20    	jne gets_loop
0178+  2042             gets_telnet_escape_phase2:
0179+  2042 FD 0C       	sti
0180+  2044 19 01       	mov al, 1
0181+  2046 05 03       	syscall sys_io					; receive in AH without echo
0182+  2048 B9 00       	cmp al, 0						; check error code (AL)
0183+  204A C6 42 20    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  204D 76 44       	cmp ah, 'D'
0185+  204F C6 5A 20    	je gets_left_arrow
0186+  2052 76 43       	cmp ah, 'C'
0187+  2054 C6 5E 20    	je gets_right_arrow
0188+  2057 0A 04 20    	jmp gets_loop
0189+  205A             gets_left_arrow:
0190+  205A 7F          	dec d
0191+  205B 0A 04 20    	jmp gets_loop
0192+  205E             gets_right_arrow:
0193+  205E 79          	inc d
0194+  205F 0A 04 20    	jmp gets_loop
0195+  2062             gets_escape:
0196+  2062 FD 0C       	sti
0197+  2064 19 01       	mov al, 1
0198+  2066 05 03       	syscall sys_io			; receive in AH
0199+  2068 B9 00       	cmp al, 0				; check error code (AL)
0200+  206A C6 62 20    	je gets_escape			; if no char received, retry
0201+  206D 76 6E       	cmp ah, 'n'
0202+  206F C6 7D 20    	je gets_LF
0203+  2072 76 72       	cmp ah, 'r'
0204+  2074 C6 84 20    	je gets_CR
0205+  2077 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  2078 3E          	mov [d], al
0207+  2079 79          	inc d
0208+  207A 0A 04 20    	jmp gets_loop
0209+  207D             gets_LF:
0210+  207D 19 0A       	mov al, $0A
0211+  207F 3E          	mov [d], al
0212+  2080 79          	inc d
0213+  2081 0A 04 20    	jmp gets_loop
0214+  2084             gets_CR:
0215+  2084 19 0D       	mov al, $0D
0216+  2086 3E          	mov [d], al
0217+  2087 79          	inc d
0218+  2088 0A 04 20    	jmp gets_loop
0219+  208B             gets_end:
0220+  208B 19 00       	mov al, 0
0221+  208D 3E          	mov [d], al				; terminate string
0222+  208E E7          	pop d
0223+  208F E4          	pop a
0224+  2090 09          	ret
0225+  2091             
0226+  2091             
0227+  2091             
0228+  2091             
0229+  2091             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  2091             ;; INPUT TEXT
0231+  2091             ;; terminated with CTRL+D
0232+  2091             ;; pointer in D
0233+  2091             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  2091             gettxt:
0235+  2091 D7          	push a
0236+  2092 DA          	push d
0237+  2093             gettxt_loop:
0238+  2093 19 01       	mov al, 1
0239+  2095 05 03       	syscall sys_io			; receive in AH
0240+  2097 B9 00       	cmp al, 0				; check error code (AL)
0241+  2099 C6 93 20    	je gettxt_loop		; if no char received, retry
0242+  209C 76 04       	cmp ah, 4			; EOT
0243+  209E C6 DC 20    	je gettxt_end
0244+  20A1 76 08       	cmp ah, $08			; check for backspace
0245+  20A3 C6 D8 20    	je gettxt_backspace
0246+  20A6 76 5C       	cmp ah, $5C				; '\\'
0247+  20A8 C6 B1 20    	je gettxt_escape
0248+  20AB 1A          	mov al, ah
0249+  20AC 3E          	mov [d], al
0250+  20AD 79          	inc d
0251+  20AE 0A 93 20    	jmp gettxt_loop
0252+  20B1             gettxt_escape:
0253+  20B1 19 01       	mov al, 1
0254+  20B3 05 03       	syscall sys_io			; receive in AH
0255+  20B5 B9 00       	cmp al, 0				; check error code (AL)
0256+  20B7 C6 B1 20    	je gettxt_escape		; if no char received, retry
0257+  20BA 76 6E       	cmp ah, 'n'
0258+  20BC C6 CA 20    	je gettxt_LF
0259+  20BF 76 72       	cmp ah, 'r'
0260+  20C1 C6 D1 20    	je gettxt_CR
0261+  20C4 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  20C5 3E          	mov [d], al
0263+  20C6 79          	inc d
0264+  20C7 0A 93 20    	jmp gettxt_loop
0265+  20CA             gettxt_LF:
0266+  20CA 19 0A       	mov al, $0A
0267+  20CC 3E          	mov [d], al
0268+  20CD 79          	inc d
0269+  20CE 0A 93 20    	jmp gettxt_loop
0270+  20D1             gettxt_CR:
0271+  20D1 19 0D       	mov al, $0D
0272+  20D3 3E          	mov [d], al
0273+  20D4 79          	inc d
0274+  20D5 0A 93 20    	jmp gettxt_loop
0275+  20D8             gettxt_backspace:
0276+  20D8 7F          	dec d
0277+  20D9 0A 93 20    	jmp gettxt_loop
0278+  20DC             gettxt_end:
0279+  20DC 19 00       	mov al, 0
0280+  20DE 3E          	mov [d], al				; terminate string
0281+  20DF E7          	pop d
0282+  20E0 E4          	pop a
0283+  20E1 09          	ret
0284+  20E2             
0285+  20E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  20E2             ; PRINT NEW LINE
0287+  20E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  20E2             printnl:
0289+  20E2 D7          	push a
0290+  20E3 10 00 0A    	mov a, $0A00
0291+  20E6 05 03       	syscall sys_io
0292+  20E8 10 00 0D    	mov a, $0D00
0293+  20EB 05 03       	syscall sys_io
0294+  20ED E4          	pop a
0295+  20EE 09          	ret
0296+  20EF             
0297+  20EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  20EF             ; strtoint
0299+  20EF             ; 4 digit hex string number in d
0300+  20EF             ; integer returned in A
0301+  20EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  20EF             strtointx:
0303+  20EF D8          	push b
0304+  20F0 32          	mov bl, [d]
0305+  20F1 37          	mov bh, bl
0306+  20F2 33 01 00    	mov bl, [d + 1]
0307+  20F5 07 B0 1F    	call atoi				; convert to int in AL
0308+  20F8 23          	mov ah, al				; move to AH
0309+  20F9 33 02 00    	mov bl, [d + 2]
0310+  20FC 37          	mov bh, bl
0311+  20FD 33 03 00    	mov bl, [d + 3]
0312+  2100 07 B0 1F    	call atoi				; convert to int in AL
0313+  2103 E5          	pop b
0314+  2104 09          	ret
0315+  2105             
0316+  2105             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  2105             ; strtoint
0318+  2105             ; 5 digit base10 string number in d
0319+  2105             ; integer returned in A
0320+  2105             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  2105             strtoint:
0322+  2105 E2          	push si
0323+  2106 D8          	push b
0324+  2107 D9          	push c
0325+  2108 DA          	push d
0326+  2109 07 38 1F    	call strlen			; get string length in C
0327+  210C 7E          	dec c
0328+  210D FD 4E       	mov si, d
0329+  210F 12          	mov a, c
0330+  2110 FD 99       	shl a
0331+  2112 3B 98 1F    	mov d, table_power
0332+  2115 59          	add d, a
0333+  2116 38 00 00    	mov c, 0
0334+  2119             strtoint_L0:
0335+  2119 F6          	lodsb			; load ASCII to al
0336+  211A B9 00       	cmp al, 0
0337+  211C C6 2F 21    	je strtoint_end
0338+  211F 6F 30       	sub al, $30		; make into integer
0339+  2121 22 00       	mov ah, 0
0340+  2123 2A          	mov b, [d]
0341+  2124 AC          	mul a, b			; result in B since it fits in 16bits
0342+  2125 11          	mov a, b
0343+  2126 28          	mov b, c
0344+  2127 54          	add a, b
0345+  2128 39          	mov c, a
0346+  2129 63 02 00    	sub d, 2
0347+  212C 0A 19 21    	jmp strtoint_L0
0348+  212F             strtoint_end:
0349+  212F 12          	mov a, c
0350+  2130 E7          	pop d
0351+  2131 E6          	pop c
0352+  2132 E5          	pop b
0353+  2133 EF          	pop si
0354+  2134 09          	ret
0355+  2135             
0356+  2135             
0357+  2135             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  2135             ; PRINT NULL TERMINATED STRING
0359+  2135             ; pointer in D
0360+  2135             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  2135             puts:
0362+  2135 D7          	push a
0363+  2136 DA          	push d
0364+  2137             puts_L1:
0365+  2137 1E          	mov al, [d]
0366+  2138 B9 00       	cmp al, 0
0367+  213A C6 46 21    	jz puts_END
0368+  213D 23          	mov ah, al
0369+  213E 19 00       	mov al, 0
0370+  2140 05 03       	syscall sys_io
0371+  2142 79          	inc d
0372+  2143 0A 37 21    	jmp puts_L1
0373+  2146             puts_END:
0374+  2146 E7          	pop d
0375+  2147 E4          	pop a
0376+  2148 09          	ret
0377+  2149             
0378+  2149             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  2149             ; PRINT N SIZE STRING
0380+  2149             ; pointer in D
0381+  2149             ; size in C
0382+  2149             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  2149             putsn:
0384+  2149 DB          	push al
0385+  214A DA          	push d
0386+  214B D9          	push c
0387+  214C             putsn_L0:
0388+  214C 1E          	mov al, [d]
0389+  214D 23          	mov ah, al
0390+  214E 19 00       	mov al, 0
0391+  2150 05 03       	syscall sys_io
0392+  2152 79          	inc d
0393+  2153 7E          	dec c	
0394+  2154 C2 00 00    	cmp c, 0
0395+  2157 C7 4C 21    	jne putsn_L0
0396+  215A             putsn_end:
0397+  215A E6          	pop c
0398+  215B E7          	pop d
0399+  215C E8          	pop al
0400+  215D 09          	ret
0401+  215E             
0402+  215E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  215E             ; print 16bit decimal number
0404+  215E             ; input number in A
0405+  215E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  215E             print_u16d:
0407+  215E D7          	push a
0408+  215F D8          	push b
0409+  2160 26 10 27    	mov b, 10000
0410+  2163 AE          	div a, b			; get 10000 coeff.
0411+  2164 07 8A 21    	call print_number
0412+  2167 11          	mov a, b
0413+  2168 26 E8 03    	mov b, 1000
0414+  216B AE          	div a, b			; get 10000 coeff.
0415+  216C 07 8A 21    	call print_number
0416+  216F 11          	mov a, b
0417+  2170 26 64 00    	mov b, 100
0418+  2173 AE          	div a, b
0419+  2174 07 8A 21    	call print_number
0420+  2177 11          	mov a, b
0421+  2178 26 0A 00    	mov b, 10
0422+  217B AE          	div a, b
0423+  217C 07 8A 21    	call print_number
0424+  217F 11          	mov a, b
0425+  2180 6A 30       	add al, $30
0426+  2182 23          	mov ah, al
0427+  2183 19 00       	mov al, 0
0428+  2185 05 03       	syscall sys_io	; print coeff
0429+  2187 E5          	pop b
0430+  2188 E4          	pop a
0431+  2189 09          	ret
0432+  218A             
0433+  218A             
0434+  218A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  218A             ; if A == 0, print space
0436+  218A             ; else print A
0437+  218A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  218A             print_number:
0439+  218A 6A 30       	add al, $30
0440+  218C 23          	mov ah, al
0441+  218D 07 FB 1F    	call putchar
0442+  2190 09          	ret
0443+  2191             
0444+  2191             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  2191             ; PRINT 16BIT HEX INTEGER
0446+  2191             ; integer value in reg B
0447+  2191             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  2191             print_u16x:
0449+  2191 D7          	push a
0450+  2192 D8          	push b
0451+  2193 DD          	push bl
0452+  2194 30          	mov bl, bh
0453+  2195 07 C2 1F    	call itoa				; convert bh to char in A
0454+  2198 2F          	mov bl, al				; save al
0455+  2199 19 00       	mov al, 0
0456+  219B 05 03       	syscall sys_io				; display AH
0457+  219D 24          	mov ah, bl				; retrieve al
0458+  219E 19 00       	mov al, 0
0459+  21A0 05 03       	syscall sys_io				; display AL
0460+  21A2             
0461+  21A2 EA          	pop bl
0462+  21A3 07 C2 1F    	call itoa				; convert bh to char in A
0463+  21A6 2F          	mov bl, al				; save al
0464+  21A7 19 00       	mov al, 0
0465+  21A9 05 03       	syscall sys_io				; display AH
0466+  21AB 24          	mov ah, bl				; retrieve al
0467+  21AC 19 00       	mov al, 0
0468+  21AE 05 03       	syscall sys_io				; display AL
0469+  21B0             
0470+  21B0 E5          	pop b
0471+  21B1 E4          	pop a
0472+  21B2 09          	ret
0473+  21B3             
0474+  21B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  21B3             ; INPUT 16BIT HEX INTEGER
0476+  21B3             ; read 16bit integer into A
0477+  21B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  21B3             scan_u16x:
0479+  21B3 F8 10 00    	enter 16
0480+  21B6 D8          	push b
0481+  21B7 DA          	push d
0482+  21B8             
0483+  21B8 FA F1 FF    	lea d, [bp + -15]
0484+  21BB 07 02 20    	call gets				; get number
0485+  21BE             
0486+  21BE 32          	mov bl, [d]
0487+  21BF 37          	mov bh, bl
0488+  21C0 33 01 00    	mov bl, [d + 1]
0489+  21C3 07 B0 1F    	call atoi				; convert to int in AL
0490+  21C6 23          	mov ah, al				; move to AH
0491+  21C7             
0492+  21C7 33 02 00    	mov bl, [d + 2]
0493+  21CA 37          	mov bh, bl
0494+  21CB 33 03 00    	mov bl, [d + 3]
0495+  21CE 07 B0 1F    	call atoi				; convert to int in AL
0496+  21D1             
0497+  21D1 E7          	pop d
0498+  21D2 E5          	pop b
0499+  21D3 F9          	leave
0500+  21D4 09          	ret
0501+  21D5             
0502+  21D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  21D5             ; PRINT 8bit HEX INTEGER
0504+  21D5             ; integer value in reg bl
0505+  21D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  21D5             print_u8x:
0507+  21D5 D7          	push a
0508+  21D6 DD          	push bl
0509+  21D7             
0510+  21D7 07 C2 1F    	call itoa				; convert bl to char in A
0511+  21DA 2F          	mov bl, al				; save al
0512+  21DB 19 00       	mov al, 0
0513+  21DD 05 03       	syscall sys_io				; display AH
0514+  21DF 24          	mov ah, bl				; retrieve al
0515+  21E0 19 00       	mov al, 0
0516+  21E2 05 03       	syscall sys_io				; display AL
0517+  21E4             
0518+  21E4 EA          	pop bl
0519+  21E5 E4          	pop a
0520+  21E6 09          	ret
0521+  21E7             
0522+  21E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  21E7             ; print 8bit decimal unsigned number
0524+  21E7             ; input number in AL
0525+  21E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  21E7             print_u8d:
0527+  21E7 D7          	push a
0528+  21E8 D8          	push b
0529+  21E9             
0530+  21E9 22 00       	mov ah, 0
0531+  21EB 26 64 00    	mov b, 100
0532+  21EE AE          	div a, b
0533+  21EF D8          	push b			; save remainder
0534+  21F0 B9 00       	cmp al, 0
0535+  21F2 C6 FC 21    	je skip100
0536+  21F5 6A 30       	add al, $30
0537+  21F7 23          	mov ah, al
0538+  21F8 19 00       	mov al, 0
0539+  21FA 05 03       	syscall sys_io	; print coeff
0540+  21FC             skip100:
0541+  21FC E4          	pop a
0542+  21FD 22 00       	mov ah, 0
0543+  21FF 26 0A 00    	mov b, 10
0544+  2202 AE          	div a, b
0545+  2203 D8          	push b			; save remainder
0546+  2204 B9 00       	cmp al, 0
0547+  2206 C6 10 22    	je skip10
0548+  2209 6A 30       	add al, $30
0549+  220B 23          	mov ah, al
0550+  220C 19 00       	mov al, 0
0551+  220E 05 03       	syscall sys_io	; print coeff
0552+  2210             skip10:
0553+  2210 E4          	pop a
0554+  2211 1B          	mov al, bl
0555+  2212 6A 30       	add al, $30
0556+  2214 23          	mov ah, al
0557+  2215 19 00       	mov al, 0
0558+  2217 05 03       	syscall sys_io	; print coeff
0559+  2219 E5          	pop b
0560+  221A E4          	pop a
0561+  221B 09          	ret
0562+  221C             
0563+  221C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  221C             ; INPUT 8BIT HEX INTEGER
0565+  221C             ; read 8bit integer into AL
0566+  221C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  221C             scan_u8x:
0568+  221C F8 04 00    	enter 4
0569+  221F D8          	push b
0570+  2220 DA          	push d
0571+  2221             
0572+  2221 FA FD FF    	lea d, [bp + -3]
0573+  2224 07 02 20    	call gets				; get number
0574+  2227             
0575+  2227 32          	mov bl, [d]
0576+  2228 37          	mov bh, bl
0577+  2229 33 01 00    	mov bl, [d + 1]
0578+  222C 07 B0 1F    	call atoi				; convert to int in AL
0579+  222F             
0580+  222F E7          	pop d
0581+  2230 E5          	pop b
0582+  2231 F9          	leave
0583+  2232 09          	ret
0584+  2233             
0585+  2233             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  2233             ; input decimal number
0587+  2233             ; result in A
0588+  2233             ; 655'\0'
0589+  2233             ; low--------high
0590+  2233             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  2233             scan_u16d:
0592+  2233 F8 08 00    	enter 8
0593+  2236 E2          	push si
0594+  2237 D8          	push b
0595+  2238 D9          	push c
0596+  2239 DA          	push d
0597+  223A FA F9 FF    	lea d, [bp +- 7]
0598+  223D 07 02 20    	call gets
0599+  2240 07 38 1F    	call strlen			; get string length in C
0600+  2243 7E          	dec c
0601+  2244 FD 4E       	mov si, d
0602+  2246 12          	mov a, c
0603+  2247 FD 99       	shl a
0604+  2249 3B 98 1F    	mov d, table_power
0605+  224C 59          	add d, a
0606+  224D 38 00 00    	mov c, 0
0607+  2250             mul_loop:
0608+  2250 F6          	lodsb			; load ASCII to al
0609+  2251 B9 00       	cmp al, 0
0610+  2253 C6 66 22    	je mul_exit
0611+  2256 6F 30       	sub al, $30		; make into integer
0612+  2258 22 00       	mov ah, 0
0613+  225A 2A          	mov b, [d]
0614+  225B AC          	mul a, b			; result in B since it fits in 16bits
0615+  225C 11          	mov a, b
0616+  225D 28          	mov b, c
0617+  225E 54          	add a, b
0618+  225F 39          	mov c, a
0619+  2260 63 02 00    	sub d, 2
0620+  2263 0A 50 22    	jmp mul_loop
0621+  2266             mul_exit:
0622+  2266 12          	mov a, c
0623+  2267 E7          	pop d
0624+  2268 E6          	pop c
0625+  2269 E5          	pop b
0626+  226A EF          	pop si
0627+  226B F9          	leave
0628+  226C 09          	ret
0906   226D             ; --- END INCLUDE BLOCK
0907   226D             
0908   226D             
0909   226D             .end
tasm: Number of errors = 0
