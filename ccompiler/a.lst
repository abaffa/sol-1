0001   0000             ; --- FILENAME: life.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; n
0011   0408 26 1E 22      mov b, _string_0
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 07 8E 04      call print
0015   0411 51 02 00      add sp, 2
0016   0414 07 99 04      call getn
0017   0417 D7            push a
0018   0418 11            mov a, b
0019   0419 45 FD FF      mov [bp + -3], a ; n
0020   041C E4            pop a
0021   041D             _for1_init:
0022   041D 26 00 00      mov b, 0
0023   0420 D7            push a
0024   0421 11            mov a, b
0025   0422 45 FF FF      mov [bp + -1], a ; i
0026   0425 E4            pop a
0027   0426             _for1_cond:
0028   0426 2C FF FF      mov b, [bp + -1] ; i
0029   0429 D7            push a
0030   042A 11            mov a, b
0031   042B 2C FD FF      mov b, [bp + -3] ; n
0032   042E B0            cmp a, b
0033   042F 0E            lodflgs
0034   0430 87 02         and al, %00000010 ; <
0035   0432 B9 00         cmp al, 0
0036   0434 0E            lodflgs
0037   0435 96            not al
0038   0436 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0039   0438 22 00         mov ah, 0
0040   043A 27            mov b, a
0041   043B E4            pop a
0042   043C C0 00 00      cmp b, 0
0043   043F C6 88 04      je _for1_exit
0044   0442             _for1_block:
0045   0442             
0046   0442             ; --- BEGIN INLINE ASM BLOCK
0047   0442 3B ED 22      mov d, s_telnet_clear
0048   0445 07 92 24      call puts
0049   0448             ; --- END INLINE ASM BLOCK
0050   0448             
0051   0448 26 2C 22      mov b, _string_1
0052   044B FD AB         swp b
0053   044D D8            push b
0054   044E 07 8E 04      call print
0055   0451 51 02 00      add sp, 2
0056   0454             
0057   0454             ; --- BEGIN INLINE ASM BLOCK
0058   0454 17 FF FF      mov a, [bp + -1]
0059   0457 07 BB 24      call print_u16d
0060   045A 22 0A         mov ah, $0A
0061   045C 07 58 23      call putchar
0062   045F             ; --- END INLINE ASM BLOCK
0063   045F             
0064   045F 26 39 22      mov b, _string_2
0065   0462 FD AB         swp b
0066   0464 D8            push b
0067   0465 07 8E 04      call print
0068   0468 51 02 00      add sp, 2
0069   046B             
0070   046B             ; --- BEGIN INLINE ASM BLOCK
0071   046B 48            mov a, sp
0072   046C 07 BB 24      call print_u16d
0073   046F 22 0A         mov ah, $0A
0074   0471 07 58 23      call putchar
0075   0474             ; --- END INLINE ASM BLOCK
0076   0474             
0077   0474 07 A9 04      call print_game
0078   0477 07 61 05      call update_game
0079   047A             _for1_update:
0080   047A 2C FF FF      mov b, [bp + -1] ; i
0081   047D FD 77         inc b
0082   047F D7            push a
0083   0480 11            mov a, b
0084   0481 45 FF FF      mov [bp + -1], a ; i
0085   0484 E4            pop a
0086   0485 0A 26 04      jmp _for1_cond
0087   0488             _for1_exit:
0088   0488 26 00 00      mov b, 0
0089   048B F9            leave
0090   048C 05 0B         syscall sys_terminate_proc
0091   048E             print:
0092   048E D2            push bp
0093   048F 9B            mov bp, sp
0094   0490             
0095   0490             ; --- BEGIN INLINE ASM BLOCK
0096   0490 17 05 00      mov a, [bp + 5]
0097   0493 3C            mov d, a
0098   0494 07 92 24      call puts
0099   0497             ; --- END INLINE ASM BLOCK
0100   0497             
0101   0497 F9            leave
0102   0498 09            ret
0103   0499             getn:
0104   0499 D2            push bp
0105   049A 9B            mov bp, sp
0106   049B 52 02 00      sub sp, 2 ; n
0107   049E             
0108   049E             ; --- BEGIN INLINE ASM BLOCK
0109   049E 07 90 25      call scan_u16d
0110   04A1 45 FF FF      mov [bp + -1], a
0111   04A4             ; --- END INLINE ASM BLOCK
0112   04A4             
0113   04A4 2C FF FF      mov b, [bp + -1] ; n
0114   04A7 F9            leave
0115   04A8 09            ret
0116   04A9             print_game:
0117   04A9 D2            push bp
0118   04AA 9B            mov bp, sp
0119   04AB 52 02 00      sub sp, 2 ; i
0120   04AE 52 02 00      sub sp, 2 ; j
0121   04B1             _for2_init:
0122   04B1 26 00 00      mov b, 0
0123   04B4 D7            push a
0124   04B5 11            mov a, b
0125   04B6 45 FF FF      mov [bp + -1], a ; i
0126   04B9 E4            pop a
0127   04BA             _for2_cond:
0128   04BA 2C FF FF      mov b, [bp + -1] ; i
0129   04BD D7            push a
0130   04BE 11            mov a, b
0131   04BF 26 28 00      mov b, 40
0132   04C2 B0            cmp a, b
0133   04C3 0E            lodflgs
0134   04C4 87 02         and al, %00000010 ; <
0135   04C6 B9 00         cmp al, 0
0136   04C8 0E            lodflgs
0137   04C9 96            not al
0138   04CA 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0139   04CC 22 00         mov ah, 0
0140   04CE 27            mov b, a
0141   04CF E4            pop a
0142   04D0 C0 00 00      cmp b, 0
0143   04D3 C6 5F 05      je _for2_exit
0144   04D6             _for2_block:
0145   04D6             _for3_init:
0146   04D6 26 00 00      mov b, 0
0147   04D9 D7            push a
0148   04DA 11            mov a, b
0149   04DB 45 FD FF      mov [bp + -3], a ; j
0150   04DE E4            pop a
0151   04DF             _for3_cond:
0152   04DF 2C FD FF      mov b, [bp + -3] ; j
0153   04E2 D7            push a
0154   04E3 11            mov a, b
0155   04E4 26 28 00      mov b, 40
0156   04E7 B0            cmp a, b
0157   04E8 0E            lodflgs
0158   04E9 87 02         and al, %00000010 ; <
0159   04EB B9 00         cmp al, 0
0160   04ED 0E            lodflgs
0161   04EE 96            not al
0162   04EF 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0163   04F1 22 00         mov ah, 0
0164   04F3 27            mov b, a
0165   04F4 E4            pop a
0166   04F5 C0 00 00      cmp b, 0
0167   04F8 C6 45 05      je _for3_exit
0168   04FB             _for3_block:
0169   04FB             _if4_cond:
0170   04FB 29 9A 15      mov b, [curr_state]
0171   04FE D7            push a
0172   04FF 74            mov d, b
0173   0500 DA            push d
0174   0501 2C FF FF      mov b, [bp + -1] ; i
0175   0504 E7            pop d
0176   0505 10 50 00      mov a, 80
0177   0508 AC            mul a, b
0178   0509 5A            add d, b
0179   050A DA            push d
0180   050B 2C FD FF      mov b, [bp + -3] ; j
0181   050E E7            pop d
0182   050F 10 02 00      mov a, 2
0183   0512 AC            mul a, b
0184   0513 5A            add d, b
0185   0514 2A            mov b, [d]
0186   0515 E4            pop a
0187   0516 C0 00 00      cmp b, 0
0188   0519 C6 2B 05      je _if4_else
0189   051C             _if4_true:
0190   051C 26 3E 22      mov b, _string_3
0191   051F FD AB         swp b
0192   0521 D8            push b
0193   0522 07 8E 04      call print
0194   0525 51 02 00      add sp, 2
0195   0528 0A 37 05      jmp _if4_exit
0196   052B             _if4_else:
0197   052B 26 41 22      mov b, _string_4
0198   052E FD AB         swp b
0199   0530 D8            push b
0200   0531 07 8E 04      call print
0201   0534 51 02 00      add sp, 2
0202   0537             _if4_exit:
0203   0537             _for3_update:
0204   0537 2C FD FF      mov b, [bp + -3] ; j
0205   053A FD 77         inc b
0206   053C D7            push a
0207   053D 11            mov a, b
0208   053E 45 FD FF      mov [bp + -3], a ; j
0209   0541 E4            pop a
0210   0542 0A DF 04      jmp _for3_cond
0211   0545             _for3_exit:
0212   0545 26 44 22      mov b, _string_5
0213   0548 FD AB         swp b
0214   054A D8            push b
0215   054B 07 8E 04      call print
0216   054E 51 02 00      add sp, 2
0217   0551             _for2_update:
0218   0551 2C FF FF      mov b, [bp + -1] ; i
0219   0554 FD 77         inc b
0220   0556 D7            push a
0221   0557 11            mov a, b
0222   0558 45 FF FF      mov [bp + -1], a ; i
0223   055B E4            pop a
0224   055C 0A BA 04      jmp _for2_cond
0225   055F             _for2_exit:
0226   055F F9            leave
0227   0560 09            ret
0228   0561             update_game:
0229   0561 D2            push bp
0230   0562 9B            mov bp, sp
0231   0563 52 02 00      sub sp, 2 ; i
0232   0566 52 02 00      sub sp, 2 ; j
0233   0569 52 02 00      sub sp, 2 ; ni
0234   056C 52 02 00      sub sp, 2 ; nj
0235   056F 52 02 00      sub sp, 2 ; count
0236   0572             _for5_init:
0237   0572 26 00 00      mov b, 0
0238   0575 D7            push a
0239   0576 11            mov a, b
0240   0577 45 FF FF      mov [bp + -1], a ; i
0241   057A E4            pop a
0242   057B             _for5_cond:
0243   057B 2C FF FF      mov b, [bp + -1] ; i
0244   057E D7            push a
0245   057F 11            mov a, b
0246   0580 26 28 00      mov b, 40
0247   0583 B0            cmp a, b
0248   0584 0E            lodflgs
0249   0585 87 02         and al, %00000010 ; <
0250   0587 B9 00         cmp al, 0
0251   0589 0E            lodflgs
0252   058A 96            not al
0253   058B 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0254   058D 22 00         mov ah, 0
0255   058F 27            mov b, a
0256   0590 E4            pop a
0257   0591 C0 00 00      cmp b, 0
0258   0594 C6 0F 06      je _for5_exit
0259   0597             _for5_block:
0260   0597             _for6_init:
0261   0597 26 00 00      mov b, 0
0262   059A D7            push a
0263   059B 11            mov a, b
0264   059C 45 FD FF      mov [bp + -3], a ; j
0265   059F E4            pop a
0266   05A0             _for6_cond:
0267   05A0 2C FD FF      mov b, [bp + -3] ; j
0268   05A3 D7            push a
0269   05A4 11            mov a, b
0270   05A5 26 28 00      mov b, 40
0271   05A8 B0            cmp a, b
0272   05A9 0E            lodflgs
0273   05AA 87 02         and al, %00000010 ; <
0274   05AC B9 00         cmp al, 0
0275   05AE 0E            lodflgs
0276   05AF 96            not al
0277   05B0 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0278   05B2 22 00         mov ah, 0
0279   05B4 27            mov b, a
0280   05B5 E4            pop a
0281   05B6 C0 00 00      cmp b, 0
0282   05B9 C6 01 06      je _for6_exit
0283   05BC             _for6_block:
0284   05BC 29 1C 22      mov b, [next_state]
0285   05BF 74            mov d, b
0286   05C0 DA            push d
0287   05C1 2C FF FF      mov b, [bp + -1] ; i
0288   05C4 E7            pop d
0289   05C5 10 50 00      mov a, 80
0290   05C8 AC            mul a, b
0291   05C9 5A            add d, b
0292   05CA DA            push d
0293   05CB 2C FD FF      mov b, [bp + -3] ; j
0294   05CE E7            pop d
0295   05CF 10 02 00      mov a, 2
0296   05D2 AC            mul a, b
0297   05D3 5A            add d, b
0298   05D4 DA            push d
0299   05D5 29 9A 15      mov b, [curr_state]
0300   05D8 D7            push a
0301   05D9 74            mov d, b
0302   05DA DA            push d
0303   05DB 2C FF FF      mov b, [bp + -1] ; i
0304   05DE E7            pop d
0305   05DF 10 50 00      mov a, 80
0306   05E2 AC            mul a, b
0307   05E3 5A            add d, b
0308   05E4 DA            push d
0309   05E5 2C FD FF      mov b, [bp + -3] ; j
0310   05E8 E7            pop d
0311   05E9 10 02 00      mov a, 2
0312   05EC AC            mul a, b
0313   05ED 5A            add d, b
0314   05EE 2A            mov b, [d]
0315   05EF E4            pop a
0316   05F0 E7            pop d
0317   05F1 11            mov a, b
0318   05F2 43            mov [d], a
0319   05F3             _for6_update:
0320   05F3 2C FD FF      mov b, [bp + -3] ; j
0321   05F6 FD 77         inc b
0322   05F8 D7            push a
0323   05F9 11            mov a, b
0324   05FA 45 FD FF      mov [bp + -3], a ; j
0325   05FD E4            pop a
0326   05FE 0A A0 05      jmp _for6_cond
0327   0601             _for6_exit:
0328   0601             _for5_update:
0329   0601 2C FF FF      mov b, [bp + -1] ; i
0330   0604 FD 77         inc b
0331   0606 D7            push a
0332   0607 11            mov a, b
0333   0608 45 FF FF      mov [bp + -1], a ; i
0334   060B E4            pop a
0335   060C 0A 7B 05      jmp _for5_cond
0336   060F             _for5_exit:
0337   060F             _for7_init:
0338   060F 26 01 00      mov b, 1
0339   0612 D7            push a
0340   0613 11            mov a, b
0341   0614 45 FF FF      mov [bp + -1], a ; i
0342   0617 E4            pop a
0343   0618             _for7_cond:
0344   0618 2C FF FF      mov b, [bp + -1] ; i
0345   061B D7            push a
0346   061C 11            mov a, b
0347   061D 26 28 00      mov b, 40
0348   0620 D7            push a
0349   0621 11            mov a, b
0350   0622 26 01 00      mov b, 1
0351   0625 60            sub a, b
0352   0626 27            mov b, a
0353   0627 E4            pop a
0354   0628 B0            cmp a, b
0355   0629 0E            lodflgs
0356   062A 87 02         and al, %00000010 ; <
0357   062C B9 00         cmp al, 0
0358   062E 0E            lodflgs
0359   062F 96            not al
0360   0630 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0361   0632 22 00         mov ah, 0
0362   0634 27            mov b, a
0363   0635 E4            pop a
0364   0636 C0 00 00      cmp b, 0
0365   0639 C6 7B 08      je _for7_exit
0366   063C             _for7_block:
0367   063C             _for8_init:
0368   063C 26 01 00      mov b, 1
0369   063F D7            push a
0370   0640 11            mov a, b
0371   0641 45 FD FF      mov [bp + -3], a ; j
0372   0644 E4            pop a
0373   0645             _for8_cond:
0374   0645 2C FD FF      mov b, [bp + -3] ; j
0375   0648 D7            push a
0376   0649 11            mov a, b
0377   064A 26 28 00      mov b, 40
0378   064D D7            push a
0379   064E 11            mov a, b
0380   064F 26 01 00      mov b, 1
0381   0652 60            sub a, b
0382   0653 27            mov b, a
0383   0654 E4            pop a
0384   0655 B0            cmp a, b
0385   0656 0E            lodflgs
0386   0657 87 02         and al, %00000010 ; <
0387   0659 B9 00         cmp al, 0
0388   065B 0E            lodflgs
0389   065C 96            not al
0390   065D 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0391   065F 22 00         mov ah, 0
0392   0661 27            mov b, a
0393   0662 E4            pop a
0394   0663 C0 00 00      cmp b, 0
0395   0666 C6 6D 08      je _for8_exit
0396   0669             _for8_block:
0397   0669 26 00 00      mov b, 0
0398   066C D7            push a
0399   066D 11            mov a, b
0400   066E 45 F7 FF      mov [bp + -9], a ; count
0401   0671 E4            pop a
0402   0672             _for9_init:
0403   0672 2C FF FF      mov b, [bp + -1] ; i
0404   0675 D7            push a
0405   0676 11            mov a, b
0406   0677 26 01 00      mov b, 1
0407   067A 60            sub a, b
0408   067B 27            mov b, a
0409   067C 11            mov a, b
0410   067D 45 FB FF      mov [bp + -5], a ; ni
0411   0680 E4            pop a
0412   0681             _for9_cond:
0413   0681 2C FB FF      mov b, [bp + -5] ; ni
0414   0684 D7            push a
0415   0685 11            mov a, b
0416   0686 2C FF FF      mov b, [bp + -1] ; i
0417   0689 D7            push a
0418   068A 11            mov a, b
0419   068B 26 01 00      mov b, 1
0420   068E 54            add a, b
0421   068F 27            mov b, a
0422   0690 E4            pop a
0423   0691 B0            cmp a, b
0424   0692 0E            lodflgs
0425   0693 87 03         and al, %00000011 ; <=
0426   0695 B9 00         cmp al, 0
0427   0697 0E            lodflgs
0428   0698 96            not al
0429   0699 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0430   069B 22 00         mov ah, 0
0431   069D 27            mov b, a
0432   069E E4            pop a
0433   069F C0 00 00      cmp b, 0
0434   06A2 C6 A1 07      je _for9_exit
0435   06A5             _for9_block:
0436   06A5             _for10_init:
0437   06A5 2C FD FF      mov b, [bp + -3] ; j
0438   06A8 D7            push a
0439   06A9 11            mov a, b
0440   06AA 26 01 00      mov b, 1
0441   06AD 60            sub a, b
0442   06AE 27            mov b, a
0443   06AF 11            mov a, b
0444   06B0 45 F9 FF      mov [bp + -7], a ; nj
0445   06B3 E4            pop a
0446   06B4             _for10_cond:
0447   06B4 2C F9 FF      mov b, [bp + -7] ; nj
0448   06B7 D7            push a
0449   06B8 11            mov a, b
0450   06B9 2C FD FF      mov b, [bp + -3] ; j
0451   06BC D7            push a
0452   06BD 11            mov a, b
0453   06BE 26 01 00      mov b, 1
0454   06C1 54            add a, b
0455   06C2 27            mov b, a
0456   06C3 E4            pop a
0457   06C4 B0            cmp a, b
0458   06C5 0E            lodflgs
0459   06C6 87 03         and al, %00000011 ; <=
0460   06C8 B9 00         cmp al, 0
0461   06CA 0E            lodflgs
0462   06CB 96            not al
0463   06CC 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0464   06CE 22 00         mov ah, 0
0465   06D0 27            mov b, a
0466   06D1 E4            pop a
0467   06D2 C0 00 00      cmp b, 0
0468   06D5 C6 93 07      je _for10_exit
0469   06D8             _for10_block:
0470   06D8             _if11_cond:
0471   06D8 2C FB FF      mov b, [bp + -5] ; ni
0472   06DB D7            push a
0473   06DC 11            mov a, b
0474   06DD 26 28 00      mov b, 40
0475   06E0 B0            cmp a, b
0476   06E1 0E            lodflgs
0477   06E2 87 02         and al, %00000010 ; <
0478   06E4 B9 00         cmp al, 0
0479   06E6 0E            lodflgs
0480   06E7 96            not al
0481   06E8 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0482   06EA 22 00         mov ah, 0
0483   06EC 27            mov b, a
0484   06ED 11            mov a, b
0485   06EE AF 00 00      cmp a, 0
0486   06F1 0E            lodflgs
0487   06F2 96            not al
0488   06F3 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0489   06F5 2C F9 FF      mov b, [bp + -7] ; nj
0490   06F8 D7            push a
0491   06F9 11            mov a, b
0492   06FA 26 28 00      mov b, 40
0493   06FD B0            cmp a, b
0494   06FE 0E            lodflgs
0495   06FF 87 02         and al, %00000010 ; <
0496   0701 B9 00         cmp al, 0
0497   0703 0E            lodflgs
0498   0704 96            not al
0499   0705 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0500   0707 22 00         mov ah, 0
0501   0709 27            mov b, a
0502   070A E4            pop a
0503   070B DB            push al
0504   070C C0 00 00      cmp b, 0
0505   070F 0E            lodflgs
0506   0710 96            not al
0507   0711 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0508   0713 EA            pop bl
0509   0714 88            and al, bl
0510   0715 2F            mov bl, al
0511   0716 A7 00         mov bh, 0
0512   0718 E4            pop a
0513   0719 C0 00 00      cmp b, 0
0514   071C C6 85 07      je _if11_exit
0515   071F             _if11_true:
0516   071F             _if12_cond:
0517   071F 2C FB FF      mov b, [bp + -5] ; ni
0518   0722 D7            push a
0519   0723 11            mov a, b
0520   0724 2C FF FF      mov b, [bp + -1] ; i
0521   0727 B0            cmp a, b
0522   0728 0E            lodflgs
0523   0729 87 01         and al, %00000001
0524   072B 8F 01         xor al, %00000001 ; !=
0525   072D B9 00         cmp al, 0
0526   072F 0E            lodflgs
0527   0730 96            not al
0528   0731 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0529   0733 22 00         mov ah, 0
0530   0735 27            mov b, a
0531   0736 11            mov a, b
0532   0737 2C F9 FF      mov b, [bp + -7] ; nj
0533   073A D7            push a
0534   073B 11            mov a, b
0535   073C 2C FD FF      mov b, [bp + -3] ; j
0536   073F B0            cmp a, b
0537   0740 0E            lodflgs
0538   0741 87 01         and al, %00000001
0539   0743 8F 01         xor al, %00000001 ; !=
0540   0745 B9 00         cmp al, 0
0541   0747 0E            lodflgs
0542   0748 96            not al
0543   0749 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0544   074B 22 00         mov ah, 0
0545   074D 27            mov b, a
0546   074E E4            pop a
0547   074F 8A            or a, b
0548   0750 27            mov b, a
0549   0751 E4            pop a
0550   0752 C0 00 00      cmp b, 0
0551   0755 C6 82 07      je _if12_exit
0552   0758             _if12_true:
0553   0758 2C F7 FF      mov b, [bp + -9] ; count
0554   075B D7            push a
0555   075C 11            mov a, b
0556   075D 29 9A 15      mov b, [curr_state]
0557   0760 D7            push a
0558   0761 74            mov d, b
0559   0762 DA            push d
0560   0763 2C FB FF      mov b, [bp + -5] ; ni
0561   0766 E7            pop d
0562   0767 10 50 00      mov a, 80
0563   076A AC            mul a, b
0564   076B 5A            add d, b
0565   076C DA            push d
0566   076D 2C F9 FF      mov b, [bp + -7] ; nj
0567   0770 E7            pop d
0568   0771 10 02 00      mov a, 2
0569   0774 AC            mul a, b
0570   0775 5A            add d, b
0571   0776 2A            mov b, [d]
0572   0777 E4            pop a
0573   0778 54            add a, b
0574   0779 27            mov b, a
0575   077A 11            mov a, b
0576   077B 45 F7 FF      mov [bp + -9], a ; count
0577   077E E4            pop a
0578   077F 0A 82 07      jmp _if12_exit
0579   0782             _if12_exit:
0580   0782 0A 85 07      jmp _if11_exit
0581   0785             _if11_exit:
0582   0785             _for10_update:
0583   0785 2C F9 FF      mov b, [bp + -7] ; nj
0584   0788 FD 77         inc b
0585   078A D7            push a
0586   078B 11            mov a, b
0587   078C 45 F9 FF      mov [bp + -7], a ; nj
0588   078F E4            pop a
0589   0790 0A B4 06      jmp _for10_cond
0590   0793             _for10_exit:
0591   0793             _for9_update:
0592   0793 2C FB FF      mov b, [bp + -5] ; ni
0593   0796 FD 77         inc b
0594   0798 D7            push a
0595   0799 11            mov a, b
0596   079A 45 FB FF      mov [bp + -5], a ; ni
0597   079D E4            pop a
0598   079E 0A 81 06      jmp _for9_cond
0599   07A1             _for9_exit:
0600   07A1             _if13_cond:
0601   07A1 29 9A 15      mov b, [curr_state]
0602   07A4 D7            push a
0603   07A5 74            mov d, b
0604   07A6 DA            push d
0605   07A7 2C FF FF      mov b, [bp + -1] ; i
0606   07AA E7            pop d
0607   07AB 10 50 00      mov a, 80
0608   07AE AC            mul a, b
0609   07AF 5A            add d, b
0610   07B0 DA            push d
0611   07B1 2C FD FF      mov b, [bp + -3] ; j
0612   07B4 E7            pop d
0613   07B5 10 02 00      mov a, 2
0614   07B8 AC            mul a, b
0615   07B9 5A            add d, b
0616   07BA 2A            mov b, [d]
0617   07BB E4            pop a
0618   07BC C0 00 00      cmp b, 0
0619   07BF C6 21 08      je _if13_else
0620   07C2             _if13_true:
0621   07C2             _if14_cond:
0622   07C2 2C F7 FF      mov b, [bp + -9] ; count
0623   07C5 D7            push a
0624   07C6 11            mov a, b
0625   07C7 26 02 00      mov b, 2
0626   07CA B0            cmp a, b
0627   07CB 0E            lodflgs
0628   07CC 87 02         and al, %00000010 ; <
0629   07CE B9 00         cmp al, 0
0630   07D0 0E            lodflgs
0631   07D1 96            not al
0632   07D2 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0633   07D4 22 00         mov ah, 0
0634   07D6 27            mov b, a
0635   07D7 11            mov a, b
0636   07D8 2C F7 FF      mov b, [bp + -9] ; count
0637   07DB D7            push a
0638   07DC 11            mov a, b
0639   07DD 26 03 00      mov b, 3
0640   07E0 B0            cmp a, b
0641   07E1 0E            lodflgs
0642   07E2 87 03         and al, %00000011
0643   07E4 B9 00         cmp al, %00000000
0644   07E6 0E            lodflgs
0645   07E7 87 01         and al, %00000001 ; >
0646   07E9 B9 00         cmp al, 0
0647   07EB 0E            lodflgs
0648   07EC 96            not al
0649   07ED 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0650   07EF 22 00         mov ah, 0
0651   07F1 27            mov b, a
0652   07F2 E4            pop a
0653   07F3 8A            or a, b
0654   07F4 27            mov b, a
0655   07F5 E4            pop a
0656   07F6 C0 00 00      cmp b, 0
0657   07F9 C6 1E 08      je _if14_exit
0658   07FC             _if14_true:
0659   07FC 29 1C 22      mov b, [next_state]
0660   07FF 74            mov d, b
0661   0800 DA            push d
0662   0801 2C FF FF      mov b, [bp + -1] ; i
0663   0804 E7            pop d
0664   0805 10 50 00      mov a, 80
0665   0808 AC            mul a, b
0666   0809 5A            add d, b
0667   080A DA            push d
0668   080B 2C FD FF      mov b, [bp + -3] ; j
0669   080E E7            pop d
0670   080F 10 02 00      mov a, 2
0671   0812 AC            mul a, b
0672   0813 5A            add d, b
0673   0814 DA            push d
0674   0815 26 00 00      mov b, 0
0675   0818 E7            pop d
0676   0819 11            mov a, b
0677   081A 43            mov [d], a
0678   081B 0A 1E 08      jmp _if14_exit
0679   081E             _if14_exit:
0680   081E 0A 5F 08      jmp _if13_exit
0681   0821             _if13_else:
0682   0821             _if15_cond:
0683   0821 2C F7 FF      mov b, [bp + -9] ; count
0684   0824 D7            push a
0685   0825 11            mov a, b
0686   0826 26 03 00      mov b, 3
0687   0829 B0            cmp a, b
0688   082A 0E            lodflgs
0689   082B 87 01         and al, %00000001 ; ==
0690   082D B9 00         cmp al, 0
0691   082F 0E            lodflgs
0692   0830 96            not al
0693   0831 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0694   0833 22 00         mov ah, 0
0695   0835 27            mov b, a
0696   0836 E4            pop a
0697   0837 C0 00 00      cmp b, 0
0698   083A C6 5F 08      je _if15_exit
0699   083D             _if15_true:
0700   083D 29 1C 22      mov b, [next_state]
0701   0840 74            mov d, b
0702   0841 DA            push d
0703   0842 2C FF FF      mov b, [bp + -1] ; i
0704   0845 E7            pop d
0705   0846 10 50 00      mov a, 80
0706   0849 AC            mul a, b
0707   084A 5A            add d, b
0708   084B DA            push d
0709   084C 2C FD FF      mov b, [bp + -3] ; j
0710   084F E7            pop d
0711   0850 10 02 00      mov a, 2
0712   0853 AC            mul a, b
0713   0854 5A            add d, b
0714   0855 DA            push d
0715   0856 26 01 00      mov b, 1
0716   0859 E7            pop d
0717   085A 11            mov a, b
0718   085B 43            mov [d], a
0719   085C 0A 5F 08      jmp _if15_exit
0720   085F             _if15_exit:
0721   085F             _if13_exit:
0722   085F             _for8_update:
0723   085F 2C FD FF      mov b, [bp + -3] ; j
0724   0862 FD 77         inc b
0725   0864 D7            push a
0726   0865 11            mov a, b
0727   0866 45 FD FF      mov [bp + -3], a ; j
0728   0869 E4            pop a
0729   086A 0A 45 06      jmp _for8_cond
0730   086D             _for8_exit:
0731   086D             _for7_update:
0732   086D 2C FF FF      mov b, [bp + -1] ; i
0733   0870 FD 77         inc b
0734   0872 D7            push a
0735   0873 11            mov a, b
0736   0874 45 FF FF      mov [bp + -1], a ; i
0737   0877 E4            pop a
0738   0878 0A 18 06      jmp _for7_cond
0739   087B             _for7_exit:
0740   087B             _for16_init:
0741   087B 26 00 00      mov b, 0
0742   087E D7            push a
0743   087F 11            mov a, b
0744   0880 45 FF FF      mov [bp + -1], a ; i
0745   0883 E4            pop a
0746   0884             _for16_cond:
0747   0884 2C FF FF      mov b, [bp + -1] ; i
0748   0887 D7            push a
0749   0888 11            mov a, b
0750   0889 26 28 00      mov b, 40
0751   088C B0            cmp a, b
0752   088D 0E            lodflgs
0753   088E 87 02         and al, %00000010 ; <
0754   0890 B9 00         cmp al, 0
0755   0892 0E            lodflgs
0756   0893 96            not al
0757   0894 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0758   0896 22 00         mov ah, 0
0759   0898 27            mov b, a
0760   0899 E4            pop a
0761   089A C0 00 00      cmp b, 0
0762   089D C6 18 09      je _for16_exit
0763   08A0             _for16_block:
0764   08A0             _for17_init:
0765   08A0 26 00 00      mov b, 0
0766   08A3 D7            push a
0767   08A4 11            mov a, b
0768   08A5 45 FD FF      mov [bp + -3], a ; j
0769   08A8 E4            pop a
0770   08A9             _for17_cond:
0771   08A9 2C FD FF      mov b, [bp + -3] ; j
0772   08AC D7            push a
0773   08AD 11            mov a, b
0774   08AE 26 28 00      mov b, 40
0775   08B1 B0            cmp a, b
0776   08B2 0E            lodflgs
0777   08B3 87 02         and al, %00000010 ; <
0778   08B5 B9 00         cmp al, 0
0779   08B7 0E            lodflgs
0780   08B8 96            not al
0781   08B9 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0782   08BB 22 00         mov ah, 0
0783   08BD 27            mov b, a
0784   08BE E4            pop a
0785   08BF C0 00 00      cmp b, 0
0786   08C2 C6 0A 09      je _for17_exit
0787   08C5             _for17_block:
0788   08C5 29 9A 15      mov b, [curr_state]
0789   08C8 74            mov d, b
0790   08C9 DA            push d
0791   08CA 2C FF FF      mov b, [bp + -1] ; i
0792   08CD E7            pop d
0793   08CE 10 50 00      mov a, 80
0794   08D1 AC            mul a, b
0795   08D2 5A            add d, b
0796   08D3 DA            push d
0797   08D4 2C FD FF      mov b, [bp + -3] ; j
0798   08D7 E7            pop d
0799   08D8 10 02 00      mov a, 2
0800   08DB AC            mul a, b
0801   08DC 5A            add d, b
0802   08DD DA            push d
0803   08DE 29 1C 22      mov b, [next_state]
0804   08E1 D7            push a
0805   08E2 74            mov d, b
0806   08E3 DA            push d
0807   08E4 2C FF FF      mov b, [bp + -1] ; i
0808   08E7 E7            pop d
0809   08E8 10 50 00      mov a, 80
0810   08EB AC            mul a, b
0811   08EC 5A            add d, b
0812   08ED DA            push d
0813   08EE 2C FD FF      mov b, [bp + -3] ; j
0814   08F1 E7            pop d
0815   08F2 10 02 00      mov a, 2
0816   08F5 AC            mul a, b
0817   08F6 5A            add d, b
0818   08F7 2A            mov b, [d]
0819   08F8 E4            pop a
0820   08F9 E7            pop d
0821   08FA 11            mov a, b
0822   08FB 43            mov [d], a
0823   08FC             _for17_update:
0824   08FC 2C FD FF      mov b, [bp + -3] ; j
0825   08FF FD 77         inc b
0826   0901 D7            push a
0827   0902 11            mov a, b
0828   0903 45 FD FF      mov [bp + -3], a ; j
0829   0906 E4            pop a
0830   0907 0A A9 08      jmp _for17_cond
0831   090A             _for17_exit:
0832   090A             _for16_update:
0833   090A 2C FF FF      mov b, [bp + -1] ; i
0834   090D FD 77         inc b
0835   090F D7            push a
0836   0910 11            mov a, b
0837   0911 45 FF FF      mov [bp + -1], a ; i
0838   0914 E4            pop a
0839   0915 0A 84 08      jmp _for16_cond
0840   0918             _for16_exit:
0841   0918 F9            leave
0842   0919 09            ret
0843   091A             ; --- END TEXT BLOCK
0844   091A             
0845   091A             ; --- BEGIN DATA BLOCK
0846   091A             curr_state_data: 
0847   091A 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0847   091E 00 00 00 00 
0847   0922 00 00 00 00 
0847   0926 00 00 00 00 
0847   092A 00 00 00 00 
0847   092E 00 00 00 00 
0847   0932 00 00 00 00 
0847   0936 00 00 00 00 
0847   093A 00 00 00 00 
0847   093E 00 00 00 00 
0847   0942 00 00 00 00 
0847   0946 00 00 00 00 
0847   094A 00 00 00 00 
0847   094E 00 00 00 00 
0847   0952 00 00 00 00 
0848   0956 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0848   095A 00 00 00 00 
0848   095E 00 00 00 00 
0848   0962 00 00 00 00 
0848   0966 00 00 00 00 
0848   096A 00 00 00 00 
0848   096E 00 00 00 00 
0848   0972 00 00 00 00 
0848   0976 00 00 00 00 
0848   097A 00 00 00 00 
0848   097E 00 00 00 00 
0848   0982 00 00 00 00 
0848   0986 00 00 00 00 
0848   098A 00 00 00 00 
0848   098E 00 00 00 00 
0849   0992 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0849   0996 00 00 00 00 
0849   099A 00 00 00 00 
0849   099E 00 00 00 00 
0849   09A2 00 00 00 00 
0849   09A6 00 00 00 00 
0849   09AA 00 00 00 00 
0849   09AE 00 00 00 00 
0849   09B2 00 00 00 00 
0849   09B6 00 00 00 00 
0849   09BA 00 00 00 00 
0849   09BE 00 00 00 00 
0849   09C2 00 00 00 00 
0849   09C6 00 00 00 00 
0849   09CA 00 00 00 00 
0850   09CE 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0850   09D2 00 00 00 00 
0850   09D6 00 00 00 00 
0850   09DA 00 00 00 00 
0850   09DE 00 00 00 00 
0850   09E2 00 00 00 00 
0850   09E6 00 00 00 00 
0850   09EA 00 00 00 00 
0850   09EE 00 00 00 00 
0850   09F2 00 00 00 00 
0850   09F6 00 00 00 00 
0850   09FA 00 00 00 00 
0850   09FE 00 00 00 00 
0850   0A02 00 00 00 00 
0850   0A06 00 00 00 00 
0851   0A0A 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
0851   0A0E 00 00 00 00 
0851   0A12 00 00 00 00 
0851   0A16 00 00 00 00 
0851   0A1A 00 00 00 00 
0851   0A1E 00 00 00 00 
0851   0A22 00 00 00 00 
0851   0A26 00 00 00 00 
0851   0A2A 00 00 00 00 
0851   0A2E 00 00 00 00 
0851   0A32 00 00 00 00 
0851   0A36 00 00 00 00 
0851   0A3A 00 00 00 00 
0851   0A3E 00 00 01 00 
0851   0A42 00 00 00 00 
0852   0A46 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0852   0A4A 00 00 00 00 
0852   0A4E 00 00 00 00 
0852   0A52 00 00 00 00 
0852   0A56 00 00 00 00 
0852   0A5A 00 00 00 00 
0852   0A5E 00 00 00 00 
0852   0A62 00 00 00 00 
0852   0A66 00 00 00 00 
0852   0A6A 00 00 00 00 
0852   0A6E 00 00 00 00 
0852   0A72 00 00 00 00 
0852   0A76 00 00 00 00 
0852   0A7A 00 00 00 00 
0852   0A7E 00 00 00 00 
0853   0A82 00 00 00 00 .dw 0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0853   0A86 00 00 00 00 
0853   0A8A 00 00 01 00 
0853   0A8E 00 00 01 00 
0853   0A92 00 00 00 00 
0853   0A96 00 00 00 00 
0853   0A9A 00 00 00 00 
0853   0A9E 00 00 00 00 
0853   0AA2 00 00 00 00 
0853   0AA6 00 00 00 00 
0853   0AAA 00 00 00 00 
0853   0AAE 00 00 00 00 
0853   0AB2 00 00 00 00 
0853   0AB6 00 00 00 00 
0853   0ABA 00 00 00 00 
0854   0ABE 00 00 00 00 .dw 0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
0854   0AC2 00 00 00 00 
0854   0AC6 00 00 01 00 
0854   0ACA 01 00 00 00 
0854   0ACE 00 00 00 00 
0854   0AD2 00 00 00 00 
0854   0AD6 00 00 01 00 
0854   0ADA 01 00 00 00 
0854   0ADE 00 00 00 00 
0854   0AE2 00 00 00 00 
0854   0AE6 00 00 00 00 
0854   0AEA 00 00 00 00 
0854   0AEE 00 00 00 00 
0854   0AF2 00 00 01 00 
0854   0AF6 01 00 00 00 
0855   0AFA 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,
0855   0AFE 00 00 00 00 
0855   0B02 00 00 00 00 
0855   0B06 00 00 00 00 
0855   0B0A 00 00 00 00 
0855   0B0E 00 00 00 00 
0855   0B12 00 00 00 00 
0855   0B16 01 00 00 00 
0855   0B1A 00 00 00 00 
0855   0B1E 01 00 00 00 
0855   0B22 00 00 00 00 
0855   0B26 00 00 01 00 
0855   0B2A 01 00 00 00 
0855   0B2E 00 00 00 00 
0855   0B32 00 00 00 00 
0856   0B36 00 00 00 00 .dw 0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
0856   0B3A 00 00 00 00 
0856   0B3E 00 00 00 00 
0856   0B42 00 00 01 00 
0856   0B46 01 00 00 00 
0856   0B4A 00 00 00 00 
0856   0B4E 00 00 01 00 
0856   0B52 01 00 00 00 
0856   0B56 00 00 00 00 
0856   0B5A 00 00 00 00 
0856   0B5E 00 00 00 00 
0856   0B62 00 00 01 00 
0856   0B66 00 00 00 00 
0856   0B6A 00 00 00 00 
0856   0B6E 00 00 01 00 
0857   0B72 00 00 00 00 .dw 0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
0857   0B76 00 00 01 00 
0857   0B7A 01 00 00 00 
0857   0B7E 00 00 00 00 
0857   0B82 00 00 00 00 
0857   0B86 00 00 00 00 
0857   0B8A 00 00 00 00 
0857   0B8E 00 00 00 00 
0857   0B92 00 00 00 00 
0857   0B96 00 00 00 00 
0857   0B9A 00 00 00 00 
0857   0B9E 00 00 01 00 
0857   0BA2 01 00 00 00 
0857   0BA6 00 00 00 00 
0857   0BAA 00 00 00 00 
0858   0BAE 00 00 00 00 .dw 0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0858   0BB2 00 00 01 00 
0858   0BB6 00 00 00 00 
0858   0BBA 00 00 01 00 
0858   0BBE 00 00 01 00 
0858   0BC2 01 00 00 00 
0858   0BC6 00 00 00 00 
0858   0BCA 00 00 01 00 
0858   0BCE 00 00 01 00 
0858   0BD2 00 00 00 00 
0858   0BD6 00 00 00 00 
0858   0BDA 00 00 00 00 
0858   0BDE 00 00 00 00 
0858   0BE2 00 00 00 00 
0858   0BE6 00 00 00 00 
0859   0BEA 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,
0859   0BEE 00 00 00 00 
0859   0BF2 00 00 00 00 
0859   0BF6 00 00 00 00 
0859   0BFA 00 00 00 00 
0859   0BFE 00 00 00 00 
0859   0C02 00 00 01 00 
0859   0C06 00 00 00 00 
0859   0C0A 00 00 00 00 
0859   0C0E 00 00 01 00 
0859   0C12 00 00 00 00 
0859   0C16 00 00 00 00 
0859   0C1A 00 00 00 00 
0859   0C1E 00 00 01 00 
0859   0C22 00 00 00 00 
0860   0C26 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,
0860   0C2A 00 00 00 00 
0860   0C2E 00 00 00 00 
0860   0C32 00 00 00 00 
0860   0C36 00 00 00 00 
0860   0C3A 00 00 00 00 
0860   0C3E 00 00 00 00 
0860   0C42 00 00 00 00 
0860   0C46 00 00 00 00 
0860   0C4A 00 00 00 00 
0860   0C4E 00 00 00 00 
0860   0C52 00 00 00 00 
0860   0C56 01 00 00 00 
0860   0C5A 00 00 00 00 
0860   0C5E 01 00 00 00 
0861   0C62 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0861   0C66 00 00 00 00 
0861   0C6A 00 00 00 00 
0861   0C6E 00 00 00 00 
0861   0C72 00 00 00 00 
0861   0C76 00 00 00 00 
0861   0C7A 00 00 00 00 
0861   0C7E 00 00 00 00 
0861   0C82 00 00 00 00 
0861   0C86 00 00 00 00 
0861   0C8A 00 00 00 00 
0861   0C8E 00 00 00 00 
0861   0C92 00 00 00 00 
0861   0C96 00 00 00 00 
0861   0C9A 00 00 00 00 
0862   0C9E 00 00 00 00 .dw 0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0862   0CA2 00 00 00 00 
0862   0CA6 00 00 01 00 
0862   0CAA 01 00 00 00 
0862   0CAE 00 00 00 00 
0862   0CB2 00 00 00 00 
0862   0CB6 00 00 00 00 
0862   0CBA 00 00 00 00 
0862   0CBE 00 00 00 00 
0862   0CC2 00 00 00 00 
0862   0CC6 00 00 00 00 
0862   0CCA 00 00 00 00 
0862   0CCE 00 00 00 00 
0862   0CD2 00 00 00 00 
0862   0CD6 00 00 00 00 
0863   0CDA 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0863   0CDE 00 00 00 00 
0863   0CE2 00 00 00 00 
0863   0CE6 00 00 00 00 
0863   0CEA 00 00 00 00 
0863   0CEE 00 00 00 00 
0863   0CF2 00 00 00 00 
0863   0CF6 00 00 00 00 
0863   0CFA 00 00 00 00 
0863   0CFE 00 00 00 00 
0863   0D02 00 00 00 00 
0863   0D06 00 00 00 00 
0863   0D0A 00 00 00 00 
0863   0D0E 00 00 00 00 
0863   0D12 00 00 00 00 
0864   0D16 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0864   0D1A 00 00 00 00 
0864   0D1E 00 00 00 00 
0864   0D22 00 00 00 00 
0864   0D26 00 00 00 00 
0864   0D2A 00 00 00 00 
0864   0D2E 00 00 00 00 
0864   0D32 00 00 00 00 
0864   0D36 00 00 00 00 
0864   0D3A 00 00 00 00 
0864   0D3E 00 00 00 00 
0864   0D42 00 00 00 00 
0864   0D46 00 00 00 00 
0864   0D4A 00 00 00 00 
0864   0D4E 00 00 00 00 
0865   0D52 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0865   0D56 00 00 00 00 
0865   0D5A 00 00 00 00 
0865   0D5E 00 00 00 00 
0865   0D62 00 00 00 00 
0865   0D66 00 00 00 00 
0865   0D6A 00 00 00 00 
0865   0D6E 00 00 00 00 
0865   0D72 00 00 00 00 
0865   0D76 00 00 00 00 
0865   0D7A 00 00 00 00 
0865   0D7E 00 00 00 00 
0865   0D82 00 00 00 00 
0865   0D86 00 00 00 00 
0865   0D8A 00 00 00 00 
0866   0D8E 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0866   0D92 00 00 00 00 
0866   0D96 00 00 00 00 
0866   0D9A 00 00 00 00 
0866   0D9E 00 00 00 00 
0866   0DA2 00 00 00 00 
0866   0DA6 00 00 00 00 
0866   0DAA 00 00 00 00 
0866   0DAE 00 00 00 00 
0866   0DB2 00 00 00 00 
0866   0DB6 00 00 00 00 
0866   0DBA 00 00 00 00 
0866   0DBE 00 00 00 00 
0866   0DC2 00 00 00 00 
0866   0DC6 00 00 00 00 
0867   0DCA 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0867   0DCE 00 00 00 00 
0867   0DD2 00 00 00 00 
0867   0DD6 00 00 00 00 
0867   0DDA 00 00 00 00 
0867   0DDE 00 00 00 00 
0867   0DE2 00 00 00 00 
0867   0DE6 00 00 00 00 
0867   0DEA 00 00 00 00 
0867   0DEE 00 00 00 00 
0867   0DF2 00 00 00 00 
0867   0DF6 00 00 00 00 
0867   0DFA 00 00 00 00 
0867   0DFE 00 00 00 00 
0867   0E02 00 00 00 00 
0868   0E06 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0868   0E0A 00 00 00 00 
0868   0E0E 00 00 00 00 
0868   0E12 00 00 00 00 
0868   0E16 00 00 00 00 
0868   0E1A 00 00 00 00 
0868   0E1E 00 00 00 00 
0868   0E22 00 00 00 00 
0868   0E26 00 00 00 00 
0868   0E2A 00 00 00 00 
0868   0E2E 00 00 00 00 
0868   0E32 00 00 00 00 
0868   0E36 00 00 00 00 
0868   0E3A 00 00 00 00 
0868   0E3E 00 00 00 00 
0869   0E42 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0869   0E46 00 00 00 00 
0869   0E4A 00 00 00 00 
0869   0E4E 00 00 00 00 
0869   0E52 00 00 00 00 
0869   0E56 00 00 00 00 
0869   0E5A 00 00 00 00 
0869   0E5E 00 00 00 00 
0869   0E62 00 00 00 00 
0869   0E66 00 00 00 00 
0869   0E6A 00 00 00 00 
0869   0E6E 00 00 00 00 
0869   0E72 00 00 00 00 
0869   0E76 00 00 00 00 
0869   0E7A 00 00 00 00 
0870   0E7E 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0870   0E82 00 00 00 00 
0870   0E86 00 00 00 00 
0870   0E8A 00 00 00 00 
0870   0E8E 00 00 00 00 
0870   0E92 00 00 00 00 
0870   0E96 00 00 00 00 
0870   0E9A 00 00 00 00 
0870   0E9E 00 00 00 00 
0870   0EA2 00 00 00 00 
0870   0EA6 00 00 00 00 
0870   0EAA 00 00 00 00 
0870   0EAE 00 00 00 00 
0870   0EB2 00 00 00 00 
0870   0EB6 00 00 00 00 
0871   0EBA 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0871   0EBE 00 00 00 00 
0871   0EC2 00 00 00 00 
0871   0EC6 00 00 00 00 
0871   0ECA 00 00 00 00 
0871   0ECE 00 00 00 00 
0871   0ED2 00 00 00 00 
0871   0ED6 00 00 00 00 
0871   0EDA 00 00 00 00 
0871   0EDE 00 00 00 00 
0871   0EE2 00 00 00 00 
0871   0EE6 00 00 00 00 
0871   0EEA 00 00 00 00 
0871   0EEE 00 00 00 00 
0871   0EF2 00 00 00 00 
0872   0EF6 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0872   0EFA 00 00 00 00 
0872   0EFE 00 00 00 00 
0872   0F02 00 00 00 00 
0872   0F06 00 00 00 00 
0872   0F0A 00 00 00 00 
0872   0F0E 00 00 00 00 
0872   0F12 00 00 00 00 
0872   0F16 00 00 00 00 
0872   0F1A 00 00 00 00 
0872   0F1E 00 00 00 00 
0872   0F22 00 00 00 00 
0872   0F26 00 00 00 00 
0872   0F2A 00 00 00 00 
0872   0F2E 00 00 00 00 
0873   0F32 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0873   0F36 00 00 00 00 
0873   0F3A 00 00 00 00 
0873   0F3E 00 00 00 00 
0873   0F42 00 00 00 00 
0873   0F46 00 00 00 00 
0873   0F4A 00 00 00 00 
0873   0F4E 00 00 00 00 
0873   0F52 00 00 00 00 
0873   0F56 00 00 00 00 
0874   0F5A 00 00 00 00 .fill 1600, 0
0874   0F5E 00 00 00 00 
0874   0F62 00 00 00 00 
0874   0F66 00 00 00 00 
0874   0F6A 00 00 00 00 
0874   0F6E 00 00 00 00 
0874   0F72 00 00 00 00 
0874   0F76 00 00 00 00 
0874   0F7A 00 00 00 00 
0874   0F7E 00 00 00 00 
0874   0F82 00 00 00 00 
0874   0F86 00 00 00 00 
0874   0F8A 00 00 00 00 
0874   0F8E 00 00 00 00 
0874   0F92 00 00 00 00 
0874   0F96 00 00 00 00 
0874   0F9A 00 00 00 00 
0874   0F9E 00 00 00 00 
0874   0FA2 00 00 00 00 
0874   0FA6 00 00 00 00 
0874   0FAA 00 00 00 00 
0874   0FAE 00 00 00 00 
0874   0FB2 00 00 00 00 
0874   0FB6 00 00 00 00 
0874   0FBA 00 00 00 00 
0874   0FBE 00 00 00 00 
0874   0FC2 00 00 00 00 
0874   0FC6 00 00 00 00 
0874   0FCA 00 00 00 00 
0874   0FCE 00 00 00 00 
0874   0FD2 00 00 00 00 
0874   0FD6 00 00 00 00 
0874   0FDA 00 00 00 00 
0874   0FDE 00 00 00 00 
0874   0FE2 00 00 00 00 
0874   0FE6 00 00 00 00 
0874   0FEA 00 00 00 00 
0874   0FEE 00 00 00 00 
0874   0FF2 00 00 00 00 
0874   0FF6 00 00 00 00 
0874   0FFA 00 00 00 00 
0874   0FFE 00 00 00 00 
0874   1002 00 00 00 00 
0874   1006 00 00 00 00 
0874   100A 00 00 00 00 
0874   100E 00 00 00 00 
0874   1012 00 00 00 00 
0874   1016 00 00 00 00 
0874   101A 00 00 00 00 
0874   101E 00 00 00 00 
0874   1022 00 00 00 00 
0874   1026 00 00 00 00 
0874   102A 00 00 00 00 
0874   102E 00 00 00 00 
0874   1032 00 00 00 00 
0874   1036 00 00 00 00 
0874   103A 00 00 00 00 
0874   103E 00 00 00 00 
0874   1042 00 00 00 00 
0874   1046 00 00 00 00 
0874   104A 00 00 00 00 
0874   104E 00 00 00 00 
0874   1052 00 00 00 00 
0874   1056 00 00 00 00 
0874   105A 00 00 00 00 
0874   105E 00 00 00 00 
0874   1062 00 00 00 00 
0874   1066 00 00 00 00 
0874   106A 00 00 00 00 
0874   106E 00 00 00 00 
0874   1072 00 00 00 00 
0874   1076 00 00 00 00 
0874   107A 00 00 00 00 
0874   107E 00 00 00 00 
0874   1082 00 00 00 00 
0874   1086 00 00 00 00 
0874   108A 00 00 00 00 
0874   108E 00 00 00 00 
0874   1092 00 00 00 00 
0874   1096 00 00 00 00 
0874   109A 00 00 00 00 
0874   109E 00 00 00 00 
0874   10A2 00 00 00 00 
0874   10A6 00 00 00 00 
0874   10AA 00 00 00 00 
0874   10AE 00 00 00 00 
0874   10B2 00 00 00 00 
0874   10B6 00 00 00 00 
0874   10BA 00 00 00 00 
0874   10BE 00 00 00 00 
0874   10C2 00 00 00 00 
0874   10C6 00 00 00 00 
0874   10CA 00 00 00 00 
0874   10CE 00 00 00 00 
0874   10D2 00 00 00 00 
0874   10D6 00 00 00 00 
0874   10DA 00 00 00 00 
0874   10DE 00 00 00 00 
0874   10E2 00 00 00 00 
0874   10E6 00 00 00 00 
0874   10EA 00 00 00 00 
0874   10EE 00 00 00 00 
0874   10F2 00 00 00 00 
0874   10F6 00 00 00 00 
0874   10FA 00 00 00 00 
0874   10FE 00 00 00 00 
0874   1102 00 00 00 00 
0874   1106 00 00 00 00 
0874   110A 00 00 00 00 
0874   110E 00 00 00 00 
0874   1112 00 00 00 00 
0874   1116 00 00 00 00 
0874   111A 00 00 00 00 
0874   111E 00 00 00 00 
0874   1122 00 00 00 00 
0874   1126 00 00 00 00 
0874   112A 00 00 00 00 
0874   112E 00 00 00 00 
0874   1132 00 00 00 00 
0874   1136 00 00 00 00 
0874   113A 00 00 00 00 
0874   113E 00 00 00 00 
0874   1142 00 00 00 00 
0874   1146 00 00 00 00 
0874   114A 00 00 00 00 
0874   114E 00 00 00 00 
0874   1152 00 00 00 00 
0874   1156 00 00 00 00 
0874   115A 00 00 00 00 
0874   115E 00 00 00 00 
0874   1162 00 00 00 00 
0874   1166 00 00 00 00 
0874   116A 00 00 00 00 
0874   116E 00 00 00 00 
0874   1172 00 00 00 00 
0874   1176 00 00 00 00 
0874   117A 00 00 00 00 
0874   117E 00 00 00 00 
0874   1182 00 00 00 00 
0874   1186 00 00 00 00 
0874   118A 00 00 00 00 
0874   118E 00 00 00 00 
0874   1192 00 00 00 00 
0874   1196 00 00 00 00 
0874   119A 00 00 00 00 
0874   119E 00 00 00 00 
0874   11A2 00 00 00 00 
0874   11A6 00 00 00 00 
0874   11AA 00 00 00 00 
0874   11AE 00 00 00 00 
0874   11B2 00 00 00 00 
0874   11B6 00 00 00 00 
0874   11BA 00 00 00 00 
0874   11BE 00 00 00 00 
0874   11C2 00 00 00 00 
0874   11C6 00 00 00 00 
0874   11CA 00 00 00 00 
0874   11CE 00 00 00 00 
0874   11D2 00 00 00 00 
0874   11D6 00 00 00 00 
0874   11DA 00 00 00 00 
0874   11DE 00 00 00 00 
0874   11E2 00 00 00 00 
0874   11E6 00 00 00 00 
0874   11EA 00 00 00 00 
0874   11EE 00 00 00 00 
0874   11F2 00 00 00 00 
0874   11F6 00 00 00 00 
0874   11FA 00 00 00 00 
0874   11FE 00 00 00 00 
0874   1202 00 00 00 00 
0874   1206 00 00 00 00 
0874   120A 00 00 00 00 
0874   120E 00 00 00 00 
0874   1212 00 00 00 00 
0874   1216 00 00 00 00 
0874   121A 00 00 00 00 
0874   121E 00 00 00 00 
0874   1222 00 00 00 00 
0874   1226 00 00 00 00 
0874   122A 00 00 00 00 
0874   122E 00 00 00 00 
0874   1232 00 00 00 00 
0874   1236 00 00 00 00 
0874   123A 00 00 00 00 
0874   123E 00 00 00 00 
0874   1242 00 00 00 00 
0874   1246 00 00 00 00 
0874   124A 00 00 00 00 
0874   124E 00 00 00 00 
0874   1252 00 00 00 00 
0874   1256 00 00 00 00 
0874   125A 00 00 00 00 
0874   125E 00 00 00 00 
0874   1262 00 00 00 00 
0874   1266 00 00 00 00 
0874   126A 00 00 00 00 
0874   126E 00 00 00 00 
0874   1272 00 00 00 00 
0874   1276 00 00 00 00 
0874   127A 00 00 00 00 
0874   127E 00 00 00 00 
0874   1282 00 00 00 00 
0874   1286 00 00 00 00 
0874   128A 00 00 00 00 
0874   128E 00 00 00 00 
0874   1292 00 00 00 00 
0874   1296 00 00 00 00 
0874   129A 00 00 00 00 
0874   129E 00 00 00 00 
0874   12A2 00 00 00 00 
0874   12A6 00 00 00 00 
0874   12AA 00 00 00 00 
0874   12AE 00 00 00 00 
0874   12B2 00 00 00 00 
0874   12B6 00 00 00 00 
0874   12BA 00 00 00 00 
0874   12BE 00 00 00 00 
0874   12C2 00 00 00 00 
0874   12C6 00 00 00 00 
0874   12CA 00 00 00 00 
0874   12CE 00 00 00 00 
0874   12D2 00 00 00 00 
0874   12D6 00 00 00 00 
0874   12DA 00 00 00 00 
0874   12DE 00 00 00 00 
0874   12E2 00 00 00 00 
0874   12E6 00 00 00 00 
0874   12EA 00 00 00 00 
0874   12EE 00 00 00 00 
0874   12F2 00 00 00 00 
0874   12F6 00 00 00 00 
0874   12FA 00 00 00 00 
0874   12FE 00 00 00 00 
0874   1302 00 00 00 00 
0874   1306 00 00 00 00 
0874   130A 00 00 00 00 
0874   130E 00 00 00 00 
0874   1312 00 00 00 00 
0874   1316 00 00 00 00 
0874   131A 00 00 00 00 
0874   131E 00 00 00 00 
0874   1322 00 00 00 00 
0874   1326 00 00 00 00 
0874   132A 00 00 00 00 
0874   132E 00 00 00 00 
0874   1332 00 00 00 00 
0874   1336 00 00 00 00 
0874   133A 00 00 00 00 
0874   133E 00 00 00 00 
0874   1342 00 00 00 00 
0874   1346 00 00 00 00 
0874   134A 00 00 00 00 
0874   134E 00 00 00 00 
0874   1352 00 00 00 00 
0874   1356 00 00 00 00 
0874   135A 00 00 00 00 
0874   135E 00 00 00 00 
0874   1362 00 00 00 00 
0874   1366 00 00 00 00 
0874   136A 00 00 00 00 
0874   136E 00 00 00 00 
0874   1372 00 00 00 00 
0874   1376 00 00 00 00 
0874   137A 00 00 00 00 
0874   137E 00 00 00 00 
0874   1382 00 00 00 00 
0874   1386 00 00 00 00 
0874   138A 00 00 00 00 
0874   138E 00 00 00 00 
0874   1392 00 00 00 00 
0874   1396 00 00 00 00 
0874   139A 00 00 00 00 
0874   139E 00 00 00 00 
0874   13A2 00 00 00 00 
0874   13A6 00 00 00 00 
0874   13AA 00 00 00 00 
0874   13AE 00 00 00 00 
0874   13B2 00 00 00 00 
0874   13B6 00 00 00 00 
0874   13BA 00 00 00 00 
0874   13BE 00 00 00 00 
0874   13C2 00 00 00 00 
0874   13C6 00 00 00 00 
0874   13CA 00 00 00 00 
0874   13CE 00 00 00 00 
0874   13D2 00 00 00 00 
0874   13D6 00 00 00 00 
0874   13DA 00 00 00 00 
0874   13DE 00 00 00 00 
0874   13E2 00 00 00 00 
0874   13E6 00 00 00 00 
0874   13EA 00 00 00 00 
0874   13EE 00 00 00 00 
0874   13F2 00 00 00 00 
0874   13F6 00 00 00 00 
0874   13FA 00 00 00 00 
0874   13FE 00 00 00 00 
0874   1402 00 00 00 00 
0874   1406 00 00 00 00 
0874   140A 00 00 00 00 
0874   140E 00 00 00 00 
0874   1412 00 00 00 00 
0874   1416 00 00 00 00 
0874   141A 00 00 00 00 
0874   141E 00 00 00 00 
0874   1422 00 00 00 00 
0874   1426 00 00 00 00 
0874   142A 00 00 00 00 
0874   142E 00 00 00 00 
0874   1432 00 00 00 00 
0874   1436 00 00 00 00 
0874   143A 00 00 00 00 
0874   143E 00 00 00 00 
0874   1442 00 00 00 00 
0874   1446 00 00 00 00 
0874   144A 00 00 00 00 
0874   144E 00 00 00 00 
0874   1452 00 00 00 00 
0874   1456 00 00 00 00 
0874   145A 00 00 00 00 
0874   145E 00 00 00 00 
0874   1462 00 00 00 00 
0874   1466 00 00 00 00 
0874   146A 00 00 00 00 
0874   146E 00 00 00 00 
0874   1472 00 00 00 00 
0874   1476 00 00 00 00 
0874   147A 00 00 00 00 
0874   147E 00 00 00 00 
0874   1482 00 00 00 00 
0874   1486 00 00 00 00 
0874   148A 00 00 00 00 
0874   148E 00 00 00 00 
0874   1492 00 00 00 00 
0874   1496 00 00 00 00 
0874   149A 00 00 00 00 
0874   149E 00 00 00 00 
0874   14A2 00 00 00 00 
0874   14A6 00 00 00 00 
0874   14AA 00 00 00 00 
0874   14AE 00 00 00 00 
0874   14B2 00 00 00 00 
0874   14B6 00 00 00 00 
0874   14BA 00 00 00 00 
0874   14BE 00 00 00 00 
0874   14C2 00 00 00 00 
0874   14C6 00 00 00 00 
0874   14CA 00 00 00 00 
0874   14CE 00 00 00 00 
0874   14D2 00 00 00 00 
0874   14D6 00 00 00 00 
0874   14DA 00 00 00 00 
0874   14DE 00 00 00 00 
0874   14E2 00 00 00 00 
0874   14E6 00 00 00 00 
0874   14EA 00 00 00 00 
0874   14EE 00 00 00 00 
0874   14F2 00 00 00 00 
0874   14F6 00 00 00 00 
0874   14FA 00 00 00 00 
0874   14FE 00 00 00 00 
0874   1502 00 00 00 00 
0874   1506 00 00 00 00 
0874   150A 00 00 00 00 
0874   150E 00 00 00 00 
0874   1512 00 00 00 00 
0874   1516 00 00 00 00 
0874   151A 00 00 00 00 
0874   151E 00 00 00 00 
0874   1522 00 00 00 00 
0874   1526 00 00 00 00 
0874   152A 00 00 00 00 
0874   152E 00 00 00 00 
0874   1532 00 00 00 00 
0874   1536 00 00 00 00 
0874   153A 00 00 00 00 
0874   153E 00 00 00 00 
0874   1542 00 00 00 00 
0874   1546 00 00 00 00 
0874   154A 00 00 00 00 
0874   154E 00 00 00 00 
0874   1552 00 00 00 00 
0874   1556 00 00 00 00 
0874   155A 00 00 00 00 
0874   155E 00 00 00 00 
0874   1562 00 00 00 00 
0874   1566 00 00 00 00 
0874   156A 00 00 00 00 
0874   156E 00 00 00 00 
0874   1572 00 00 00 00 
0874   1576 00 00 00 00 
0874   157A 00 00 00 00 
0874   157E 00 00 00 00 
0874   1582 00 00 00 00 
0874   1586 00 00 00 00 
0874   158A 00 00 00 00 
0874   158E 00 00 00 00 
0874   1592 00 00 00 00 
0874   1596 00 00 00 00 
0875   159A 1A 09       curr_state: .dw curr_state_data
0876   159C 00 00 00 00 next_state_data: .fill 3200, 0
0876   15A0 00 00 00 00 
0876   15A4 00 00 00 00 
0876   15A8 00 00 00 00 
0876   15AC 00 00 00 00 
0876   15B0 00 00 00 00 
0876   15B4 00 00 00 00 
0876   15B8 00 00 00 00 
0876   15BC 00 00 00 00 
0876   15C0 00 00 00 00 
0876   15C4 00 00 00 00 
0876   15C8 00 00 00 00 
0876   15CC 00 00 00 00 
0876   15D0 00 00 00 00 
0876   15D4 00 00 00 00 
0876   15D8 00 00 00 00 
0876   15DC 00 00 00 00 
0876   15E0 00 00 00 00 
0876   15E4 00 00 00 00 
0876   15E8 00 00 00 00 
0876   15EC 00 00 00 00 
0876   15F0 00 00 00 00 
0876   15F4 00 00 00 00 
0876   15F8 00 00 00 00 
0876   15FC 00 00 00 00 
0876   1600 00 00 00 00 
0876   1604 00 00 00 00 
0876   1608 00 00 00 00 
0876   160C 00 00 00 00 
0876   1610 00 00 00 00 
0876   1614 00 00 00 00 
0876   1618 00 00 00 00 
0876   161C 00 00 00 00 
0876   1620 00 00 00 00 
0876   1624 00 00 00 00 
0876   1628 00 00 00 00 
0876   162C 00 00 00 00 
0876   1630 00 00 00 00 
0876   1634 00 00 00 00 
0876   1638 00 00 00 00 
0876   163C 00 00 00 00 
0876   1640 00 00 00 00 
0876   1644 00 00 00 00 
0876   1648 00 00 00 00 
0876   164C 00 00 00 00 
0876   1650 00 00 00 00 
0876   1654 00 00 00 00 
0876   1658 00 00 00 00 
0876   165C 00 00 00 00 
0876   1660 00 00 00 00 
0876   1664 00 00 00 00 
0876   1668 00 00 00 00 
0876   166C 00 00 00 00 
0876   1670 00 00 00 00 
0876   1674 00 00 00 00 
0876   1678 00 00 00 00 
0876   167C 00 00 00 00 
0876   1680 00 00 00 00 
0876   1684 00 00 00 00 
0876   1688 00 00 00 00 
0876   168C 00 00 00 00 
0876   1690 00 00 00 00 
0876   1694 00 00 00 00 
0876   1698 00 00 00 00 
0876   169C 00 00 00 00 
0876   16A0 00 00 00 00 
0876   16A4 00 00 00 00 
0876   16A8 00 00 00 00 
0876   16AC 00 00 00 00 
0876   16B0 00 00 00 00 
0876   16B4 00 00 00 00 
0876   16B8 00 00 00 00 
0876   16BC 00 00 00 00 
0876   16C0 00 00 00 00 
0876   16C4 00 00 00 00 
0876   16C8 00 00 00 00 
0876   16CC 00 00 00 00 
0876   16D0 00 00 00 00 
0876   16D4 00 00 00 00 
0876   16D8 00 00 00 00 
0876   16DC 00 00 00 00 
0876   16E0 00 00 00 00 
0876   16E4 00 00 00 00 
0876   16E8 00 00 00 00 
0876   16EC 00 00 00 00 
0876   16F0 00 00 00 00 
0876   16F4 00 00 00 00 
0876   16F8 00 00 00 00 
0876   16FC 00 00 00 00 
0876   1700 00 00 00 00 
0876   1704 00 00 00 00 
0876   1708 00 00 00 00 
0876   170C 00 00 00 00 
0876   1710 00 00 00 00 
0876   1714 00 00 00 00 
0876   1718 00 00 00 00 
0876   171C 00 00 00 00 
0876   1720 00 00 00 00 
0876   1724 00 00 00 00 
0876   1728 00 00 00 00 
0876   172C 00 00 00 00 
0876   1730 00 00 00 00 
0876   1734 00 00 00 00 
0876   1738 00 00 00 00 
0876   173C 00 00 00 00 
0876   1740 00 00 00 00 
0876   1744 00 00 00 00 
0876   1748 00 00 00 00 
0876   174C 00 00 00 00 
0876   1750 00 00 00 00 
0876   1754 00 00 00 00 
0876   1758 00 00 00 00 
0876   175C 00 00 00 00 
0876   1760 00 00 00 00 
0876   1764 00 00 00 00 
0876   1768 00 00 00 00 
0876   176C 00 00 00 00 
0876   1770 00 00 00 00 
0876   1774 00 00 00 00 
0876   1778 00 00 00 00 
0876   177C 00 00 00 00 
0876   1780 00 00 00 00 
0876   1784 00 00 00 00 
0876   1788 00 00 00 00 
0876   178C 00 00 00 00 
0876   1790 00 00 00 00 
0876   1794 00 00 00 00 
0876   1798 00 00 00 00 
0876   179C 00 00 00 00 
0876   17A0 00 00 00 00 
0876   17A4 00 00 00 00 
0876   17A8 00 00 00 00 
0876   17AC 00 00 00 00 
0876   17B0 00 00 00 00 
0876   17B4 00 00 00 00 
0876   17B8 00 00 00 00 
0876   17BC 00 00 00 00 
0876   17C0 00 00 00 00 
0876   17C4 00 00 00 00 
0876   17C8 00 00 00 00 
0876   17CC 00 00 00 00 
0876   17D0 00 00 00 00 
0876   17D4 00 00 00 00 
0876   17D8 00 00 00 00 
0876   17DC 00 00 00 00 
0876   17E0 00 00 00 00 
0876   17E4 00 00 00 00 
0876   17E8 00 00 00 00 
0876   17EC 00 00 00 00 
0876   17F0 00 00 00 00 
0876   17F4 00 00 00 00 
0876   17F8 00 00 00 00 
0876   17FC 00 00 00 00 
0876   1800 00 00 00 00 
0876   1804 00 00 00 00 
0876   1808 00 00 00 00 
0876   180C 00 00 00 00 
0876   1810 00 00 00 00 
0876   1814 00 00 00 00 
0876   1818 00 00 00 00 
0876   181C 00 00 00 00 
0876   1820 00 00 00 00 
0876   1824 00 00 00 00 
0876   1828 00 00 00 00 
0876   182C 00 00 00 00 
0876   1830 00 00 00 00 
0876   1834 00 00 00 00 
0876   1838 00 00 00 00 
0876   183C 00 00 00 00 
0876   1840 00 00 00 00 
0876   1844 00 00 00 00 
0876   1848 00 00 00 00 
0876   184C 00 00 00 00 
0876   1850 00 00 00 00 
0876   1854 00 00 00 00 
0876   1858 00 00 00 00 
0876   185C 00 00 00 00 
0876   1860 00 00 00 00 
0876   1864 00 00 00 00 
0876   1868 00 00 00 00 
0876   186C 00 00 00 00 
0876   1870 00 00 00 00 
0876   1874 00 00 00 00 
0876   1878 00 00 00 00 
0876   187C 00 00 00 00 
0876   1880 00 00 00 00 
0876   1884 00 00 00 00 
0876   1888 00 00 00 00 
0876   188C 00 00 00 00 
0876   1890 00 00 00 00 
0876   1894 00 00 00 00 
0876   1898 00 00 00 00 
0876   189C 00 00 00 00 
0876   18A0 00 00 00 00 
0876   18A4 00 00 00 00 
0876   18A8 00 00 00 00 
0876   18AC 00 00 00 00 
0876   18B0 00 00 00 00 
0876   18B4 00 00 00 00 
0876   18B8 00 00 00 00 
0876   18BC 00 00 00 00 
0876   18C0 00 00 00 00 
0876   18C4 00 00 00 00 
0876   18C8 00 00 00 00 
0876   18CC 00 00 00 00 
0876   18D0 00 00 00 00 
0876   18D4 00 00 00 00 
0876   18D8 00 00 00 00 
0876   18DC 00 00 00 00 
0876   18E0 00 00 00 00 
0876   18E4 00 00 00 00 
0876   18E8 00 00 00 00 
0876   18EC 00 00 00 00 
0876   18F0 00 00 00 00 
0876   18F4 00 00 00 00 
0876   18F8 00 00 00 00 
0876   18FC 00 00 00 00 
0876   1900 00 00 00 00 
0876   1904 00 00 00 00 
0876   1908 00 00 00 00 
0876   190C 00 00 00 00 
0876   1910 00 00 00 00 
0876   1914 00 00 00 00 
0876   1918 00 00 00 00 
0876   191C 00 00 00 00 
0876   1920 00 00 00 00 
0876   1924 00 00 00 00 
0876   1928 00 00 00 00 
0876   192C 00 00 00 00 
0876   1930 00 00 00 00 
0876   1934 00 00 00 00 
0876   1938 00 00 00 00 
0876   193C 00 00 00 00 
0876   1940 00 00 00 00 
0876   1944 00 00 00 00 
0876   1948 00 00 00 00 
0876   194C 00 00 00 00 
0876   1950 00 00 00 00 
0876   1954 00 00 00 00 
0876   1958 00 00 00 00 
0876   195C 00 00 00 00 
0876   1960 00 00 00 00 
0876   1964 00 00 00 00 
0876   1968 00 00 00 00 
0876   196C 00 00 00 00 
0876   1970 00 00 00 00 
0876   1974 00 00 00 00 
0876   1978 00 00 00 00 
0876   197C 00 00 00 00 
0876   1980 00 00 00 00 
0876   1984 00 00 00 00 
0876   1988 00 00 00 00 
0876   198C 00 00 00 00 
0876   1990 00 00 00 00 
0876   1994 00 00 00 00 
0876   1998 00 00 00 00 
0876   199C 00 00 00 00 
0876   19A0 00 00 00 00 
0876   19A4 00 00 00 00 
0876   19A8 00 00 00 00 
0876   19AC 00 00 00 00 
0876   19B0 00 00 00 00 
0876   19B4 00 00 00 00 
0876   19B8 00 00 00 00 
0876   19BC 00 00 00 00 
0876   19C0 00 00 00 00 
0876   19C4 00 00 00 00 
0876   19C8 00 00 00 00 
0876   19CC 00 00 00 00 
0876   19D0 00 00 00 00 
0876   19D4 00 00 00 00 
0876   19D8 00 00 00 00 
0876   19DC 00 00 00 00 
0876   19E0 00 00 00 00 
0876   19E4 00 00 00 00 
0876   19E8 00 00 00 00 
0876   19EC 00 00 00 00 
0876   19F0 00 00 00 00 
0876   19F4 00 00 00 00 
0876   19F8 00 00 00 00 
0876   19FC 00 00 00 00 
0876   1A00 00 00 00 00 
0876   1A04 00 00 00 00 
0876   1A08 00 00 00 00 
0876   1A0C 00 00 00 00 
0876   1A10 00 00 00 00 
0876   1A14 00 00 00 00 
0876   1A18 00 00 00 00 
0876   1A1C 00 00 00 00 
0876   1A20 00 00 00 00 
0876   1A24 00 00 00 00 
0876   1A28 00 00 00 00 
0876   1A2C 00 00 00 00 
0876   1A30 00 00 00 00 
0876   1A34 00 00 00 00 
0876   1A38 00 00 00 00 
0876   1A3C 00 00 00 00 
0876   1A40 00 00 00 00 
0876   1A44 00 00 00 00 
0876   1A48 00 00 00 00 
0876   1A4C 00 00 00 00 
0876   1A50 00 00 00 00 
0876   1A54 00 00 00 00 
0876   1A58 00 00 00 00 
0876   1A5C 00 00 00 00 
0876   1A60 00 00 00 00 
0876   1A64 00 00 00 00 
0876   1A68 00 00 00 00 
0876   1A6C 00 00 00 00 
0876   1A70 00 00 00 00 
0876   1A74 00 00 00 00 
0876   1A78 00 00 00 00 
0876   1A7C 00 00 00 00 
0876   1A80 00 00 00 00 
0876   1A84 00 00 00 00 
0876   1A88 00 00 00 00 
0876   1A8C 00 00 00 00 
0876   1A90 00 00 00 00 
0876   1A94 00 00 00 00 
0876   1A98 00 00 00 00 
0876   1A9C 00 00 00 00 
0876   1AA0 00 00 00 00 
0876   1AA4 00 00 00 00 
0876   1AA8 00 00 00 00 
0876   1AAC 00 00 00 00 
0876   1AB0 00 00 00 00 
0876   1AB4 00 00 00 00 
0876   1AB8 00 00 00 00 
0876   1ABC 00 00 00 00 
0876   1AC0 00 00 00 00 
0876   1AC4 00 00 00 00 
0876   1AC8 00 00 00 00 
0876   1ACC 00 00 00 00 
0876   1AD0 00 00 00 00 
0876   1AD4 00 00 00 00 
0876   1AD8 00 00 00 00 
0876   1ADC 00 00 00 00 
0876   1AE0 00 00 00 00 
0876   1AE4 00 00 00 00 
0876   1AE8 00 00 00 00 
0876   1AEC 00 00 00 00 
0876   1AF0 00 00 00 00 
0876   1AF4 00 00 00 00 
0876   1AF8 00 00 00 00 
0876   1AFC 00 00 00 00 
0876   1B00 00 00 00 00 
0876   1B04 00 00 00 00 
0876   1B08 00 00 00 00 
0876   1B0C 00 00 00 00 
0876   1B10 00 00 00 00 
0876   1B14 00 00 00 00 
0876   1B18 00 00 00 00 
0876   1B1C 00 00 00 00 
0876   1B20 00 00 00 00 
0876   1B24 00 00 00 00 
0876   1B28 00 00 00 00 
0876   1B2C 00 00 00 00 
0876   1B30 00 00 00 00 
0876   1B34 00 00 00 00 
0876   1B38 00 00 00 00 
0876   1B3C 00 00 00 00 
0876   1B40 00 00 00 00 
0876   1B44 00 00 00 00 
0876   1B48 00 00 00 00 
0876   1B4C 00 00 00 00 
0876   1B50 00 00 00 00 
0876   1B54 00 00 00 00 
0876   1B58 00 00 00 00 
0876   1B5C 00 00 00 00 
0876   1B60 00 00 00 00 
0876   1B64 00 00 00 00 
0876   1B68 00 00 00 00 
0876   1B6C 00 00 00 00 
0876   1B70 00 00 00 00 
0876   1B74 00 00 00 00 
0876   1B78 00 00 00 00 
0876   1B7C 00 00 00 00 
0876   1B80 00 00 00 00 
0876   1B84 00 00 00 00 
0876   1B88 00 00 00 00 
0876   1B8C 00 00 00 00 
0876   1B90 00 00 00 00 
0876   1B94 00 00 00 00 
0876   1B98 00 00 00 00 
0876   1B9C 00 00 00 00 
0876   1BA0 00 00 00 00 
0876   1BA4 00 00 00 00 
0876   1BA8 00 00 00 00 
0876   1BAC 00 00 00 00 
0876   1BB0 00 00 00 00 
0876   1BB4 00 00 00 00 
0876   1BB8 00 00 00 00 
0876   1BBC 00 00 00 00 
0876   1BC0 00 00 00 00 
0876   1BC4 00 00 00 00 
0876   1BC8 00 00 00 00 
0876   1BCC 00 00 00 00 
0876   1BD0 00 00 00 00 
0876   1BD4 00 00 00 00 
0876   1BD8 00 00 00 00 
0876   1BDC 00 00 00 00 
0876   1BE0 00 00 00 00 
0876   1BE4 00 00 00 00 
0876   1BE8 00 00 00 00 
0876   1BEC 00 00 00 00 
0876   1BF0 00 00 00 00 
0876   1BF4 00 00 00 00 
0876   1BF8 00 00 00 00 
0876   1BFC 00 00 00 00 
0876   1C00 00 00 00 00 
0876   1C04 00 00 00 00 
0876   1C08 00 00 00 00 
0876   1C0C 00 00 00 00 
0876   1C10 00 00 00 00 
0876   1C14 00 00 00 00 
0876   1C18 00 00 00 00 
0876   1C1C 00 00 00 00 
0876   1C20 00 00 00 00 
0876   1C24 00 00 00 00 
0876   1C28 00 00 00 00 
0876   1C2C 00 00 00 00 
0876   1C30 00 00 00 00 
0876   1C34 00 00 00 00 
0876   1C38 00 00 00 00 
0876   1C3C 00 00 00 00 
0876   1C40 00 00 00 00 
0876   1C44 00 00 00 00 
0876   1C48 00 00 00 00 
0876   1C4C 00 00 00 00 
0876   1C50 00 00 00 00 
0876   1C54 00 00 00 00 
0876   1C58 00 00 00 00 
0876   1C5C 00 00 00 00 
0876   1C60 00 00 00 00 
0876   1C64 00 00 00 00 
0876   1C68 00 00 00 00 
0876   1C6C 00 00 00 00 
0876   1C70 00 00 00 00 
0876   1C74 00 00 00 00 
0876   1C78 00 00 00 00 
0876   1C7C 00 00 00 00 
0876   1C80 00 00 00 00 
0876   1C84 00 00 00 00 
0876   1C88 00 00 00 00 
0876   1C8C 00 00 00 00 
0876   1C90 00 00 00 00 
0876   1C94 00 00 00 00 
0876   1C98 00 00 00 00 
0876   1C9C 00 00 00 00 
0876   1CA0 00 00 00 00 
0876   1CA4 00 00 00 00 
0876   1CA8 00 00 00 00 
0876   1CAC 00 00 00 00 
0876   1CB0 00 00 00 00 
0876   1CB4 00 00 00 00 
0876   1CB8 00 00 00 00 
0876   1CBC 00 00 00 00 
0876   1CC0 00 00 00 00 
0876   1CC4 00 00 00 00 
0876   1CC8 00 00 00 00 
0876   1CCC 00 00 00 00 
0876   1CD0 00 00 00 00 
0876   1CD4 00 00 00 00 
0876   1CD8 00 00 00 00 
0876   1CDC 00 00 00 00 
0876   1CE0 00 00 00 00 
0876   1CE4 00 00 00 00 
0876   1CE8 00 00 00 00 
0876   1CEC 00 00 00 00 
0876   1CF0 00 00 00 00 
0876   1CF4 00 00 00 00 
0876   1CF8 00 00 00 00 
0876   1CFC 00 00 00 00 
0876   1D00 00 00 00 00 
0876   1D04 00 00 00 00 
0876   1D08 00 00 00 00 
0876   1D0C 00 00 00 00 
0876   1D10 00 00 00 00 
0876   1D14 00 00 00 00 
0876   1D18 00 00 00 00 
0876   1D1C 00 00 00 00 
0876   1D20 00 00 00 00 
0876   1D24 00 00 00 00 
0876   1D28 00 00 00 00 
0876   1D2C 00 00 00 00 
0876   1D30 00 00 00 00 
0876   1D34 00 00 00 00 
0876   1D38 00 00 00 00 
0876   1D3C 00 00 00 00 
0876   1D40 00 00 00 00 
0876   1D44 00 00 00 00 
0876   1D48 00 00 00 00 
0876   1D4C 00 00 00 00 
0876   1D50 00 00 00 00 
0876   1D54 00 00 00 00 
0876   1D58 00 00 00 00 
0876   1D5C 00 00 00 00 
0876   1D60 00 00 00 00 
0876   1D64 00 00 00 00 
0876   1D68 00 00 00 00 
0876   1D6C 00 00 00 00 
0876   1D70 00 00 00 00 
0876   1D74 00 00 00 00 
0876   1D78 00 00 00 00 
0876   1D7C 00 00 00 00 
0876   1D80 00 00 00 00 
0876   1D84 00 00 00 00 
0876   1D88 00 00 00 00 
0876   1D8C 00 00 00 00 
0876   1D90 00 00 00 00 
0876   1D94 00 00 00 00 
0876   1D98 00 00 00 00 
0876   1D9C 00 00 00 00 
0876   1DA0 00 00 00 00 
0876   1DA4 00 00 00 00 
0876   1DA8 00 00 00 00 
0876   1DAC 00 00 00 00 
0876   1DB0 00 00 00 00 
0876   1DB4 00 00 00 00 
0876   1DB8 00 00 00 00 
0876   1DBC 00 00 00 00 
0876   1DC0 00 00 00 00 
0876   1DC4 00 00 00 00 
0876   1DC8 00 00 00 00 
0876   1DCC 00 00 00 00 
0876   1DD0 00 00 00 00 
0876   1DD4 00 00 00 00 
0876   1DD8 00 00 00 00 
0876   1DDC 00 00 00 00 
0876   1DE0 00 00 00 00 
0876   1DE4 00 00 00 00 
0876   1DE8 00 00 00 00 
0876   1DEC 00 00 00 00 
0876   1DF0 00 00 00 00 
0876   1DF4 00 00 00 00 
0876   1DF8 00 00 00 00 
0876   1DFC 00 00 00 00 
0876   1E00 00 00 00 00 
0876   1E04 00 00 00 00 
0876   1E08 00 00 00 00 
0876   1E0C 00 00 00 00 
0876   1E10 00 00 00 00 
0876   1E14 00 00 00 00 
0876   1E18 00 00 00 00 
0876   1E1C 00 00 00 00 
0876   1E20 00 00 00 00 
0876   1E24 00 00 00 00 
0876   1E28 00 00 00 00 
0876   1E2C 00 00 00 00 
0876   1E30 00 00 00 00 
0876   1E34 00 00 00 00 
0876   1E38 00 00 00 00 
0876   1E3C 00 00 00 00 
0876   1E40 00 00 00 00 
0876   1E44 00 00 00 00 
0876   1E48 00 00 00 00 
0876   1E4C 00 00 00 00 
0876   1E50 00 00 00 00 
0876   1E54 00 00 00 00 
0876   1E58 00 00 00 00 
0876   1E5C 00 00 00 00 
0876   1E60 00 00 00 00 
0876   1E64 00 00 00 00 
0876   1E68 00 00 00 00 
0876   1E6C 00 00 00 00 
0876   1E70 00 00 00 00 
0876   1E74 00 00 00 00 
0876   1E78 00 00 00 00 
0876   1E7C 00 00 00 00 
0876   1E80 00 00 00 00 
0876   1E84 00 00 00 00 
0876   1E88 00 00 00 00 
0876   1E8C 00 00 00 00 
0876   1E90 00 00 00 00 
0876   1E94 00 00 00 00 
0876   1E98 00 00 00 00 
0876   1E9C 00 00 00 00 
0876   1EA0 00 00 00 00 
0876   1EA4 00 00 00 00 
0876   1EA8 00 00 00 00 
0876   1EAC 00 00 00 00 
0876   1EB0 00 00 00 00 
0876   1EB4 00 00 00 00 
0876   1EB8 00 00 00 00 
0876   1EBC 00 00 00 00 
0876   1EC0 00 00 00 00 
0876   1EC4 00 00 00 00 
0876   1EC8 00 00 00 00 
0876   1ECC 00 00 00 00 
0876   1ED0 00 00 00 00 
0876   1ED4 00 00 00 00 
0876   1ED8 00 00 00 00 
0876   1EDC 00 00 00 00 
0876   1EE0 00 00 00 00 
0876   1EE4 00 00 00 00 
0876   1EE8 00 00 00 00 
0876   1EEC 00 00 00 00 
0876   1EF0 00 00 00 00 
0876   1EF4 00 00 00 00 
0876   1EF8 00 00 00 00 
0876   1EFC 00 00 00 00 
0876   1F00 00 00 00 00 
0876   1F04 00 00 00 00 
0876   1F08 00 00 00 00 
0876   1F0C 00 00 00 00 
0876   1F10 00 00 00 00 
0876   1F14 00 00 00 00 
0876   1F18 00 00 00 00 
0876   1F1C 00 00 00 00 
0876   1F20 00 00 00 00 
0876   1F24 00 00 00 00 
0876   1F28 00 00 00 00 
0876   1F2C 00 00 00 00 
0876   1F30 00 00 00 00 
0876   1F34 00 00 00 00 
0876   1F38 00 00 00 00 
0876   1F3C 00 00 00 00 
0876   1F40 00 00 00 00 
0876   1F44 00 00 00 00 
0876   1F48 00 00 00 00 
0876   1F4C 00 00 00 00 
0876   1F50 00 00 00 00 
0876   1F54 00 00 00 00 
0876   1F58 00 00 00 00 
0876   1F5C 00 00 00 00 
0876   1F60 00 00 00 00 
0876   1F64 00 00 00 00 
0876   1F68 00 00 00 00 
0876   1F6C 00 00 00 00 
0876   1F70 00 00 00 00 
0876   1F74 00 00 00 00 
0876   1F78 00 00 00 00 
0876   1F7C 00 00 00 00 
0876   1F80 00 00 00 00 
0876   1F84 00 00 00 00 
0876   1F88 00 00 00 00 
0876   1F8C 00 00 00 00 
0876   1F90 00 00 00 00 
0876   1F94 00 00 00 00 
0876   1F98 00 00 00 00 
0876   1F9C 00 00 00 00 
0876   1FA0 00 00 00 00 
0876   1FA4 00 00 00 00 
0876   1FA8 00 00 00 00 
0876   1FAC 00 00 00 00 
0876   1FB0 00 00 00 00 
0876   1FB4 00 00 00 00 
0876   1FB8 00 00 00 00 
0876   1FBC 00 00 00 00 
0876   1FC0 00 00 00 00 
0876   1FC4 00 00 00 00 
0876   1FC8 00 00 00 00 
0876   1FCC 00 00 00 00 
0876   1FD0 00 00 00 00 
0876   1FD4 00 00 00 00 
0876   1FD8 00 00 00 00 
0876   1FDC 00 00 00 00 
0876   1FE0 00 00 00 00 
0876   1FE4 00 00 00 00 
0876   1FE8 00 00 00 00 
0876   1FEC 00 00 00 00 
0876   1FF0 00 00 00 00 
0876   1FF4 00 00 00 00 
0876   1FF8 00 00 00 00 
0876   1FFC 00 00 00 00 
0876   2000 00 00 00 00 
0876   2004 00 00 00 00 
0876   2008 00 00 00 00 
0876   200C 00 00 00 00 
0876   2010 00 00 00 00 
0876   2014 00 00 00 00 
0876   2018 00 00 00 00 
0876   201C 00 00 00 00 
0876   2020 00 00 00 00 
0876   2024 00 00 00 00 
0876   2028 00 00 00 00 
0876   202C 00 00 00 00 
0876   2030 00 00 00 00 
0876   2034 00 00 00 00 
0876   2038 00 00 00 00 
0876   203C 00 00 00 00 
0876   2040 00 00 00 00 
0876   2044 00 00 00 00 
0876   2048 00 00 00 00 
0876   204C 00 00 00 00 
0876   2050 00 00 00 00 
0876   2054 00 00 00 00 
0876   2058 00 00 00 00 
0876   205C 00 00 00 00 
0876   2060 00 00 00 00 
0876   2064 00 00 00 00 
0876   2068 00 00 00 00 
0876   206C 00 00 00 00 
0876   2070 00 00 00 00 
0876   2074 00 00 00 00 
0876   2078 00 00 00 00 
0876   207C 00 00 00 00 
0876   2080 00 00 00 00 
0876   2084 00 00 00 00 
0876   2088 00 00 00 00 
0876   208C 00 00 00 00 
0876   2090 00 00 00 00 
0876   2094 00 00 00 00 
0876   2098 00 00 00 00 
0876   209C 00 00 00 00 
0876   20A0 00 00 00 00 
0876   20A4 00 00 00 00 
0876   20A8 00 00 00 00 
0876   20AC 00 00 00 00 
0876   20B0 00 00 00 00 
0876   20B4 00 00 00 00 
0876   20B8 00 00 00 00 
0876   20BC 00 00 00 00 
0876   20C0 00 00 00 00 
0876   20C4 00 00 00 00 
0876   20C8 00 00 00 00 
0876   20CC 00 00 00 00 
0876   20D0 00 00 00 00 
0876   20D4 00 00 00 00 
0876   20D8 00 00 00 00 
0876   20DC 00 00 00 00 
0876   20E0 00 00 00 00 
0876   20E4 00 00 00 00 
0876   20E8 00 00 00 00 
0876   20EC 00 00 00 00 
0876   20F0 00 00 00 00 
0876   20F4 00 00 00 00 
0876   20F8 00 00 00 00 
0876   20FC 00 00 00 00 
0876   2100 00 00 00 00 
0876   2104 00 00 00 00 
0876   2108 00 00 00 00 
0876   210C 00 00 00 00 
0876   2110 00 00 00 00 
0876   2114 00 00 00 00 
0876   2118 00 00 00 00 
0876   211C 00 00 00 00 
0876   2120 00 00 00 00 
0876   2124 00 00 00 00 
0876   2128 00 00 00 00 
0876   212C 00 00 00 00 
0876   2130 00 00 00 00 
0876   2134 00 00 00 00 
0876   2138 00 00 00 00 
0876   213C 00 00 00 00 
0876   2140 00 00 00 00 
0876   2144 00 00 00 00 
0876   2148 00 00 00 00 
0876   214C 00 00 00 00 
0876   2150 00 00 00 00 
0876   2154 00 00 00 00 
0876   2158 00 00 00 00 
0876   215C 00 00 00 00 
0876   2160 00 00 00 00 
0876   2164 00 00 00 00 
0876   2168 00 00 00 00 
0876   216C 00 00 00 00 
0876   2170 00 00 00 00 
0876   2174 00 00 00 00 
0876   2178 00 00 00 00 
0876   217C 00 00 00 00 
0876   2180 00 00 00 00 
0876   2184 00 00 00 00 
0876   2188 00 00 00 00 
0876   218C 00 00 00 00 
0876   2190 00 00 00 00 
0876   2194 00 00 00 00 
0876   2198 00 00 00 00 
0876   219C 00 00 00 00 
0876   21A0 00 00 00 00 
0876   21A4 00 00 00 00 
0876   21A8 00 00 00 00 
0876   21AC 00 00 00 00 
0876   21B0 00 00 00 00 
0876   21B4 00 00 00 00 
0876   21B8 00 00 00 00 
0876   21BC 00 00 00 00 
0876   21C0 00 00 00 00 
0876   21C4 00 00 00 00 
0876   21C8 00 00 00 00 
0876   21CC 00 00 00 00 
0876   21D0 00 00 00 00 
0876   21D4 00 00 00 00 
0876   21D8 00 00 00 00 
0876   21DC 00 00 00 00 
0876   21E0 00 00 00 00 
0876   21E4 00 00 00 00 
0876   21E8 00 00 00 00 
0876   21EC 00 00 00 00 
0876   21F0 00 00 00 00 
0876   21F4 00 00 00 00 
0876   21F8 00 00 00 00 
0876   21FC 00 00 00 00 
0876   2200 00 00 00 00 
0876   2204 00 00 00 00 
0876   2208 00 00 00 00 
0876   220C 00 00 00 00 
0876   2210 00 00 00 00 
0876   2214 00 00 00 00 
0876   2218 00 00 00 00 
0877   221C 9C 15       next_state: .dw next_state_data
0878   221E 47 65 6E 65 _string_0: .db "Generations: ", 0
0878   2222 72 61 74 69 
0878   2226 6F 6E 73 3A 
0878   222A 20 00 
0879   222C 47 65 6E 65 _string_1: .db "Generation: ", 0
0879   2230 72 61 74 69 
0879   2234 6F 6E 3A 20 
0879   2238 00 
0880   2239 53 50 3A 20 _string_2: .db "SP: ", 0
0880   223D 00 
0881   223E 40 20 00    _string_3: .db "@ ", 0
0882   2241 2E 20 00    _string_4: .db ". ", 0
0883   2244 0A 00       _string_5: .db "\n", 0
0884   2246             ; --- END DATA BLOCK
0885   2246             
0886   2246             ; --- BEGIN INCLUDE BLOCK
0887   2246             .include "lib/stdio.asm"
0001+  2246             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  2246             ; stdio.s
0003+  2246             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  2246             .include "lib/string.asm"
0001++ 2246             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 2246             ; string.s
0003++ 2246             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 2246             
0005++ 2246             
0006++ 2246             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 2246             ; strrev
0008++ 2246             ; reverse a string
0009++ 2246             ; D = string address
0010++ 2246             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 2246             ; 01234
0012++ 2246             strrev:
0013++ 2246 4B          	pusha
0014++ 2247 07 8D 22    	call strlen	; length in C
0015++ 224A 12          	mov a, c
0016++ 224B AF 01 00    	cmp a, 1
0017++ 224E D0 68 22    	jleu strrev_end	; check string length. string len must be > 1
0018++ 2251 7D          	dec a
0019++ 2252 FD 4E       	mov si, d	; beginning of string
0020++ 2254 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 2256 59          	add d, a	; end of string
0022++ 2257 12          	mov a, c
0023++ 2258 FD 9B       	shr a		; divide by 2
0024++ 225A 39          	mov c, a	; C now counts the steps
0025++ 225B             strrev_L0:
0026++ 225B 32          	mov bl, [d]	; save load right-side char into BL
0027++ 225C F6          	lodsb		; load left-side char into AL; increase SI
0028++ 225D 3E          	mov [d], al	; store left char into right side
0029++ 225E 1B          	mov al, bl
0030++ 225F F7          	stosb		; store right-side char into left-side; increase DI
0031++ 2260 7E          	dec c
0032++ 2261 7F          	dec d
0033++ 2262 C2 00 00    	cmp c, 0
0034++ 2265 C7 5B 22    	jne strrev_L0
0035++ 2268             strrev_end:
0036++ 2268 4C          	popa
0037++ 2269 09          	ret
0038++ 226A             	
0039++ 226A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 226A             ; strchr
0041++ 226A             ; search string in D for char in AL
0042++ 226A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 226A             strchr:
0044++ 226A             strchr_L0:
0045++ 226A 32          	mov bl, [d]
0046++ 226B C1 00       	cmp bl, 0
0047++ 226D C6 78 22    	je strchr_end
0048++ 2270 BA          	cmp al, bl
0049++ 2271 C6 78 22    	je strchr_end
0050++ 2274 79          	inc d
0051++ 2275 0A 6A 22    	jmp strchr_L0
0052++ 2278             strchr_end:
0053++ 2278 1B          	mov al, bl
0054++ 2279 09          	ret
0055++ 227A             
0056++ 227A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 227A             ; strstr
0058++ 227A             ; find sub-string
0059++ 227A             ; str1 in SI
0060++ 227A             ; str2 in DI
0061++ 227A             ; SI points to end of source string
0062++ 227A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 227A             strstr:
0064++ 227A DB          	push al
0065++ 227B DA          	push d
0066++ 227C E3          	push di
0067++ 227D             strstr_loop:
0068++ 227D F3          	cmpsb					; compare a byte of the strings
0069++ 227E C7 89 22    	jne strstr_ret
0070++ 2281 FC 00 00    	lea d, [di + 0]
0071++ 2284 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 2286 C7 7D 22    	jne strstr_loop				; equal chars but not at end
0073++ 2289             strstr_ret:
0074++ 2289 F0          	pop di
0075++ 228A E7          	pop d
0076++ 228B E8          	pop al
0077++ 228C 09          	ret
0078++ 228D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 228D             ; length of null terminated string
0080++ 228D             ; result in C
0081++ 228D             ; pointer in D
0082++ 228D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 228D             strlen:
0084++ 228D DA          	push d
0085++ 228E 38 00 00    	mov c, 0
0086++ 2291             strlen_L1:
0087++ 2291 BD 00       	cmp byte [d], 0
0088++ 2293 C6 9B 22    	je strlen_ret
0089++ 2296 79          	inc d
0090++ 2297 78          	inc c
0091++ 2298 0A 91 22    	jmp strlen_L1
0092++ 229B             strlen_ret:
0093++ 229B E7          	pop d
0094++ 229C 09          	ret
0095++ 229D             
0096++ 229D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 229D             ; STRCMP
0098++ 229D             ; compare two strings
0099++ 229D             ; str1 in SI
0100++ 229D             ; str2 in DI
0101++ 229D             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 229D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 229D             strcmp:
0104++ 229D DB          	push al
0105++ 229E DA          	push d
0106++ 229F E3          	push di
0107++ 22A0 E2          	push si
0108++ 22A1             strcmp_loop:
0109++ 22A1 F3          	cmpsb					; compare a byte of the strings
0110++ 22A2 C7 AD 22    	jne strcmp_ret
0111++ 22A5 FB FF FF    	lea d, [si +- 1]
0112++ 22A8 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 22AA C7 A1 22    	jne strcmp_loop				; equal chars but not at end
0114++ 22AD             strcmp_ret:
0115++ 22AD EF          	pop si
0116++ 22AE F0          	pop di
0117++ 22AF E7          	pop d
0118++ 22B0 E8          	pop al
0119++ 22B1 09          	ret
0120++ 22B2             
0121++ 22B2             
0122++ 22B2             ; STRCPY
0123++ 22B2             ; copy null terminated string from SI to DI
0124++ 22B2             ; source in SI
0125++ 22B2             ; destination in DI
0126++ 22B2             strcpy:
0127++ 22B2 E2          	push si
0128++ 22B3 E3          	push di
0129++ 22B4 DB          	push al
0130++ 22B5             strcpy_L1:
0131++ 22B5 F6          	lodsb
0132++ 22B6 F7          	stosb
0133++ 22B7 B9 00       	cmp al, 0
0134++ 22B9 C7 B5 22    	jne strcpy_L1
0135++ 22BC             strcpy_end:
0136++ 22BC E8          	pop al
0137++ 22BD F0          	pop di
0138++ 22BE EF          	pop si
0139++ 22BF 09          	ret
0140++ 22C0             
0141++ 22C0             ; STRCAT
0142++ 22C0             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 22C0             ; source in SI
0144++ 22C0             ; destination in DI
0145++ 22C0             strcat:
0146++ 22C0 E2          	push si
0147++ 22C1 E3          	push di
0148++ 22C2 D7          	push a
0149++ 22C3 DA          	push d
0150++ 22C4 50          	mov a, di
0151++ 22C5 3C          	mov d, a
0152++ 22C6             strcat_goto_end_L1:
0153++ 22C6 BD 00       	cmp byte[d], 0
0154++ 22C8 C6 CF 22    	je strcat_start
0155++ 22CB 79          	inc d
0156++ 22CC 0A C6 22    	jmp strcat_goto_end_L1
0157++ 22CF             strcat_start:
0158++ 22CF FD 50       	mov di, d
0159++ 22D1             strcat_L1:
0160++ 22D1 F6          	lodsb
0161++ 22D2 F7          	stosb
0162++ 22D3 B9 00       	cmp al, 0
0163++ 22D5 C7 D1 22    	jne strcat_L1
0164++ 22D8             strcat_end:
0165++ 22D8 E7          	pop d
0166++ 22D9 E4          	pop a
0167++ 22DA F0          	pop di
0168++ 22DB EF          	pop si
0169++ 22DC 09          	ret
0005+  22DD             
0006+  22DD 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  22E1 34 35 36 37 
0006+  22E5 38 39 41 42 
0006+  22E9 43 44 45 46 
0007+  22ED 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  22F1 1B 5B 48 00 
0008+  22F5             
0009+  22F5 01 00       table_power:.dw 1
0010+  22F7 0A 00       			.dw 10
0011+  22F9 64 00       			.dw 100
0012+  22FB E8 03       			.dw 1000
0013+  22FD 10 27       			.dw 10000
0014+  22FF             
0015+  22FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  22FF             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  22FF             ; ASCII in BL
0018+  22FF             ; result in AL
0019+  22FF             ; ascii for F = 0100 0110
0020+  22FF             ; ascii for 9 = 0011 1001
0021+  22FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  22FF             hex_ascii_encode:
0023+  22FF 1B          	mov al, bl
0024+  2300 93 40       	test al, $40				; test if letter or number
0025+  2302 C7 08 23    	jnz hex_letter
0026+  2305 87 0F       	and al, $0F				; get number
0027+  2307 09          	ret
0028+  2308             hex_letter:
0029+  2308 87 0F       	and al, $0F				; get letter
0030+  230A 6A 09       	add al, 9
0031+  230C 09          	ret
0032+  230D             
0033+  230D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  230D             ; ATOI
0035+  230D             ; 2 letter hex string in B
0036+  230D             ; 8bit integer returned in AL
0037+  230D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  230D             atoi:
0039+  230D D8          	push b
0040+  230E 07 FF 22    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  2311 30          	mov bl, bh
0042+  2312 DB          	push al					; save a
0043+  2313 07 FF 22    	call hex_ascii_encode
0044+  2316 EA          	pop bl	
0045+  2317 FD 9E 04    	shl al, 4
0046+  231A 8C          	or al, bl
0047+  231B E5          	pop b
0048+  231C 09          	ret	
0049+  231D             
0050+  231D             
0051+  231D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  231D             ; printf
0053+  231D             ; no need for explanations!
0054+  231D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  231D             printf:
0056+  231D 09          	ret
0057+  231E             
0058+  231E             
0059+  231E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  231E             ; scanf
0061+  231E             ; no need for explanations!
0062+  231E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  231E             scanf:
0064+  231E 09          	ret
0065+  231F             
0066+  231F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  231F             ; ITOA
0068+  231F             ; 8bit value in BL
0069+  231F             ; 2 byte ASCII result in A
0070+  231F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  231F             itoa:
0072+  231F DA          	push d
0073+  2320 D8          	push b
0074+  2321 A7 00       	mov bh, 0
0075+  2323 FD A4 04    	shr bl, 4	
0076+  2326 74          	mov d, b
0077+  2327 1F DD 22    	mov al, [d + s_hex_digits]
0078+  232A 23          	mov ah, al
0079+  232B             	
0080+  232B E5          	pop b
0081+  232C D8          	push b
0082+  232D A7 00       	mov bh, 0
0083+  232F FD 87 0F    	and bl, $0F
0084+  2332 74          	mov d, b
0085+  2333 1F DD 22    	mov al, [d + s_hex_digits]
0086+  2336 E5          	pop b
0087+  2337 E7          	pop d
0088+  2338 09          	ret
0089+  2339             
0090+  2339             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  2339             ; HEX STRING TO BINARY
0092+  2339             ; di = destination address
0093+  2339             ; si = source
0094+  2339             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  2339             hex_to_int:
0096+  2339             hex_to_int_L1:
0097+  2339 F6          	lodsb					; load from [SI] to AL
0098+  233A B9 00       	cmp al, 0				; check if ASCII 0
0099+  233C C6 49 23    	jz hex_to_int_ret
0100+  233F 36          	mov bh, al
0101+  2340 F6          	lodsb
0102+  2341 2F          	mov bl, al
0103+  2342 07 0D 23    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  2345 F7          	stosb					; store AL to [DI]
0105+  2346 0A 39 23    	jmp hex_to_int_L1
0106+  2349             hex_to_int_ret:
0107+  2349 09          	ret		
0108+  234A             
0109+  234A             
0110+  234A             
0111+  234A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  234A             ; GETCHAR
0113+  234A             ; char in ah
0114+  234A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  234A             getchar:
0116+  234A DB          	push al
0117+  234B             getchar_retry:
0118+  234B FD 0C       	sti
0119+  234D 19 01       	mov al, 1
0120+  234F 05 03       	syscall sys_io			; receive in AH
0121+  2351 B9 00       	cmp al, 0			; check if any char was receive
0122+  2353 C6 4B 23    	je getchar_retry
0123+  2356 E8          	pop al
0124+  2357 09          	ret
0125+  2358             
0126+  2358             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  2358             ; PUTCHAR
0128+  2358             ; char in ah
0129+  2358             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  2358             putchar:
0131+  2358 D7          	push a
0132+  2359 19 00       	mov al, 0
0133+  235B 05 03       	syscall sys_io			; char in AH
0134+  235D E4          	pop a
0135+  235E 09          	ret
0136+  235F             
0137+  235F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  235F             ;; INPUT A STRING
0139+  235F             ;; terminates with null
0140+  235F             ;; pointer in D
0141+  235F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  235F             gets:
0143+  235F D7          	push a
0144+  2360 DA          	push d
0145+  2361             gets_loop:
0146+  2361 FD 0C       	sti
0147+  2363 19 01       	mov al, 1
0148+  2365 05 03       	syscall sys_io			; receive in AH
0149+  2367 B9 00       	cmp al, 0				; check error code (AL)
0150+  2369 C6 61 23    	je gets_loop			; if no char received, retry
0151+  236C             
0152+  236C 76 1B       	cmp ah, 27
0153+  236E C6 8F 23    	je gets_telnet_escape
0154+  2371 76 0A       	cmp ah, $0A				; LF
0155+  2373 C6 E8 23    	je gets_end
0156+  2376 76 0D       	cmp ah, $0D				; CR
0157+  2378 C6 E8 23    	je gets_end
0158+  237B 76 5C       	cmp ah, $5C				; '\\'
0159+  237D C6 BF 23    	je gets_escape
0160+  2380             	
0161+  2380 76 08       	cmp ah, $08			; check for backspace
0162+  2382 C6 8B 23    	je gets_backspace
0163+  2385             
0164+  2385 1A          	mov al, ah
0165+  2386 3E          	mov [d], al
0166+  2387 79          	inc d
0167+  2388 0A 61 23    	jmp gets_loop
0168+  238B             gets_backspace:
0169+  238B 7F          	dec d
0170+  238C 0A 61 23    	jmp gets_loop
0171+  238F             gets_telnet_escape:
0172+  238F FD 0C       	sti
0173+  2391 19 01       	mov al, 1
0174+  2393 05 03       	syscall sys_io				; receive in AH without echo
0175+  2395 B9 00       	cmp al, 0					; check error code (AL)
0176+  2397 C6 8F 23    	je gets_telnet_escape		; if no char received, retry
0177+  239A 76 5B       	cmp ah, '['
0178+  239C C7 61 23    	jne gets_loop
0179+  239F             gets_telnet_escape_phase2:
0180+  239F FD 0C       	sti
0181+  23A1 19 01       	mov al, 1
0182+  23A3 05 03       	syscall sys_io					; receive in AH without echo
0183+  23A5 B9 00       	cmp al, 0						; check error code (AL)
0184+  23A7 C6 9F 23    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  23AA 76 44       	cmp ah, 'D'
0186+  23AC C6 B7 23    	je gets_left_arrow
0187+  23AF 76 43       	cmp ah, 'C'
0188+  23B1 C6 BB 23    	je gets_right_arrow
0189+  23B4 0A 61 23    	jmp gets_loop
0190+  23B7             gets_left_arrow:
0191+  23B7 7F          	dec d
0192+  23B8 0A 61 23    	jmp gets_loop
0193+  23BB             gets_right_arrow:
0194+  23BB 79          	inc d
0195+  23BC 0A 61 23    	jmp gets_loop
0196+  23BF             gets_escape:
0197+  23BF FD 0C       	sti
0198+  23C1 19 01       	mov al, 1
0199+  23C3 05 03       	syscall sys_io			; receive in AH
0200+  23C5 B9 00       	cmp al, 0				; check error code (AL)
0201+  23C7 C6 BF 23    	je gets_escape			; if no char received, retry
0202+  23CA 76 6E       	cmp ah, 'n'
0203+  23CC C6 DA 23    	je gets_LF
0204+  23CF 76 72       	cmp ah, 'r'
0205+  23D1 C6 E1 23    	je gets_CR
0206+  23D4 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  23D5 3E          	mov [d], al
0208+  23D6 79          	inc d
0209+  23D7 0A 61 23    	jmp gets_loop
0210+  23DA             gets_LF:
0211+  23DA 19 0A       	mov al, $0A
0212+  23DC 3E          	mov [d], al
0213+  23DD 79          	inc d
0214+  23DE 0A 61 23    	jmp gets_loop
0215+  23E1             gets_CR:
0216+  23E1 19 0D       	mov al, $0D
0217+  23E3 3E          	mov [d], al
0218+  23E4 79          	inc d
0219+  23E5 0A 61 23    	jmp gets_loop
0220+  23E8             gets_end:
0221+  23E8 19 00       	mov al, 0
0222+  23EA 3E          	mov [d], al				; terminate string
0223+  23EB E7          	pop d
0224+  23EC E4          	pop a
0225+  23ED 09          	ret
0226+  23EE             
0227+  23EE             
0228+  23EE             
0229+  23EE             
0230+  23EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  23EE             ;; INPUT TEXT
0232+  23EE             ;; terminated with CTRL+D
0233+  23EE             ;; pointer in D
0234+  23EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  23EE             gettxt:
0236+  23EE D7          	push a
0237+  23EF DA          	push d
0238+  23F0             gettxt_loop:
0239+  23F0 19 01       	mov al, 1
0240+  23F2 05 03       	syscall sys_io			; receive in AH
0241+  23F4 B9 00       	cmp al, 0				; check error code (AL)
0242+  23F6 C6 F0 23    	je gettxt_loop		; if no char received, retry
0243+  23F9 76 04       	cmp ah, 4			; EOT
0244+  23FB C6 39 24    	je gettxt_end
0245+  23FE 76 08       	cmp ah, $08			; check for backspace
0246+  2400 C6 35 24    	je gettxt_backspace
0247+  2403 76 5C       	cmp ah, $5C				; '\\'
0248+  2405 C6 0E 24    	je gettxt_escape
0249+  2408 1A          	mov al, ah
0250+  2409 3E          	mov [d], al
0251+  240A 79          	inc d
0252+  240B 0A F0 23    	jmp gettxt_loop
0253+  240E             gettxt_escape:
0254+  240E 19 01       	mov al, 1
0255+  2410 05 03       	syscall sys_io			; receive in AH
0256+  2412 B9 00       	cmp al, 0				; check error code (AL)
0257+  2414 C6 0E 24    	je gettxt_escape		; if no char received, retry
0258+  2417 76 6E       	cmp ah, 'n'
0259+  2419 C6 27 24    	je gettxt_LF
0260+  241C 76 72       	cmp ah, 'r'
0261+  241E C6 2E 24    	je gettxt_CR
0262+  2421 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  2422 3E          	mov [d], al
0264+  2423 79          	inc d
0265+  2424 0A F0 23    	jmp gettxt_loop
0266+  2427             gettxt_LF:
0267+  2427 19 0A       	mov al, $0A
0268+  2429 3E          	mov [d], al
0269+  242A 79          	inc d
0270+  242B 0A F0 23    	jmp gettxt_loop
0271+  242E             gettxt_CR:
0272+  242E 19 0D       	mov al, $0D
0273+  2430 3E          	mov [d], al
0274+  2431 79          	inc d
0275+  2432 0A F0 23    	jmp gettxt_loop
0276+  2435             gettxt_backspace:
0277+  2435 7F          	dec d
0278+  2436 0A F0 23    	jmp gettxt_loop
0279+  2439             gettxt_end:
0280+  2439 19 00       	mov al, 0
0281+  243B 3E          	mov [d], al				; terminate string
0282+  243C E7          	pop d
0283+  243D E4          	pop a
0284+  243E 09          	ret
0285+  243F             
0286+  243F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  243F             ; PRINT NEW LINE
0288+  243F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  243F             printnl:
0290+  243F D7          	push a
0291+  2440 10 00 0A    	mov a, $0A00
0292+  2443 05 03       	syscall sys_io
0293+  2445 10 00 0D    	mov a, $0D00
0294+  2448 05 03       	syscall sys_io
0295+  244A E4          	pop a
0296+  244B 09          	ret
0297+  244C             
0298+  244C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  244C             ; strtoint
0300+  244C             ; 4 digit hex string number in d
0301+  244C             ; integer returned in A
0302+  244C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  244C             strtointx:
0304+  244C D8          	push b
0305+  244D 32          	mov bl, [d]
0306+  244E 37          	mov bh, bl
0307+  244F 33 01 00    	mov bl, [d + 1]
0308+  2452 07 0D 23    	call atoi				; convert to int in AL
0309+  2455 23          	mov ah, al				; move to AH
0310+  2456 33 02 00    	mov bl, [d + 2]
0311+  2459 37          	mov bh, bl
0312+  245A 33 03 00    	mov bl, [d + 3]
0313+  245D 07 0D 23    	call atoi				; convert to int in AL
0314+  2460 E5          	pop b
0315+  2461 09          	ret
0316+  2462             
0317+  2462             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  2462             ; strtoint
0319+  2462             ; 5 digit base10 string number in d
0320+  2462             ; integer returned in A
0321+  2462             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  2462             strtoint:
0323+  2462 E2          	push si
0324+  2463 D8          	push b
0325+  2464 D9          	push c
0326+  2465 DA          	push d
0327+  2466 07 8D 22    	call strlen			; get string length in C
0328+  2469 7E          	dec c
0329+  246A FD 4E       	mov si, d
0330+  246C 12          	mov a, c
0331+  246D FD 99       	shl a
0332+  246F 3B F5 22    	mov d, table_power
0333+  2472 59          	add d, a
0334+  2473 38 00 00    	mov c, 0
0335+  2476             strtoint_L0:
0336+  2476 F6          	lodsb			; load ASCII to al
0337+  2477 B9 00       	cmp al, 0
0338+  2479 C6 8C 24    	je strtoint_end
0339+  247C 6F 30       	sub al, $30		; make into integer
0340+  247E 22 00       	mov ah, 0
0341+  2480 2A          	mov b, [d]
0342+  2481 AC          	mul a, b			; result in B since it fits in 16bits
0343+  2482 11          	mov a, b
0344+  2483 28          	mov b, c
0345+  2484 54          	add a, b
0346+  2485 39          	mov c, a
0347+  2486 63 02 00    	sub d, 2
0348+  2489 0A 76 24    	jmp strtoint_L0
0349+  248C             strtoint_end:
0350+  248C 12          	mov a, c
0351+  248D E7          	pop d
0352+  248E E6          	pop c
0353+  248F E5          	pop b
0354+  2490 EF          	pop si
0355+  2491 09          	ret
0356+  2492             
0357+  2492             
0358+  2492             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  2492             ; PRINT NULL TERMINATED STRING
0360+  2492             ; pointer in D
0361+  2492             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  2492             puts:
0363+  2492 D7          	push a
0364+  2493 DA          	push d
0365+  2494             puts_L1:
0366+  2494 1E          	mov al, [d]
0367+  2495 B9 00       	cmp al, 0
0368+  2497 C6 A3 24    	jz puts_END
0369+  249A 23          	mov ah, al
0370+  249B 19 00       	mov al, 0
0371+  249D 05 03       	syscall sys_io
0372+  249F 79          	inc d
0373+  24A0 0A 94 24    	jmp puts_L1
0374+  24A3             puts_END:
0375+  24A3 E7          	pop d
0376+  24A4 E4          	pop a
0377+  24A5 09          	ret
0378+  24A6             
0379+  24A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  24A6             ; PRINT N SIZE STRING
0381+  24A6             ; pointer in D
0382+  24A6             ; size in C
0383+  24A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  24A6             putsn:
0385+  24A6 DB          	push al
0386+  24A7 DA          	push d
0387+  24A8 D9          	push c
0388+  24A9             putsn_L0:
0389+  24A9 1E          	mov al, [d]
0390+  24AA 23          	mov ah, al
0391+  24AB 19 00       	mov al, 0
0392+  24AD 05 03       	syscall sys_io
0393+  24AF 79          	inc d
0394+  24B0 7E          	dec c	
0395+  24B1 C2 00 00    	cmp c, 0
0396+  24B4 C7 A9 24    	jne putsn_L0
0397+  24B7             putsn_end:
0398+  24B7 E6          	pop c
0399+  24B8 E7          	pop d
0400+  24B9 E8          	pop al
0401+  24BA 09          	ret
0402+  24BB             
0403+  24BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  24BB             ; print 16bit decimal number
0405+  24BB             ; input number in A
0406+  24BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  24BB             print_u16d:
0408+  24BB D7          	push a
0409+  24BC D8          	push b
0410+  24BD 26 10 27    	mov b, 10000
0411+  24C0 AE          	div a, b			; get 10000 coeff.
0412+  24C1 07 E7 24    	call print_number
0413+  24C4 11          	mov a, b
0414+  24C5 26 E8 03    	mov b, 1000
0415+  24C8 AE          	div a, b			; get 10000 coeff.
0416+  24C9 07 E7 24    	call print_number
0417+  24CC 11          	mov a, b
0418+  24CD 26 64 00    	mov b, 100
0419+  24D0 AE          	div a, b
0420+  24D1 07 E7 24    	call print_number
0421+  24D4 11          	mov a, b
0422+  24D5 26 0A 00    	mov b, 10
0423+  24D8 AE          	div a, b
0424+  24D9 07 E7 24    	call print_number
0425+  24DC 11          	mov a, b
0426+  24DD 6A 30       	add al, $30
0427+  24DF 23          	mov ah, al
0428+  24E0 19 00       	mov al, 0
0429+  24E2 05 03       	syscall sys_io	; print coeff
0430+  24E4 E5          	pop b
0431+  24E5 E4          	pop a
0432+  24E6 09          	ret
0433+  24E7             
0434+  24E7             
0435+  24E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  24E7             ; if A == 0, print space
0437+  24E7             ; else print A
0438+  24E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  24E7             print_number:
0440+  24E7 6A 30       	add al, $30
0441+  24E9 23          	mov ah, al
0442+  24EA 07 58 23    	call putchar
0443+  24ED 09          	ret
0444+  24EE             
0445+  24EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  24EE             ; PRINT 16BIT HEX INTEGER
0447+  24EE             ; integer value in reg B
0448+  24EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  24EE             print_u16x:
0450+  24EE D7          	push a
0451+  24EF D8          	push b
0452+  24F0 DD          	push bl
0453+  24F1 30          	mov bl, bh
0454+  24F2 07 1F 23    	call itoa				; convert bh to char in A
0455+  24F5 2F          	mov bl, al				; save al
0456+  24F6 19 00       	mov al, 0
0457+  24F8 05 03       	syscall sys_io				; display AH
0458+  24FA 24          	mov ah, bl				; retrieve al
0459+  24FB 19 00       	mov al, 0
0460+  24FD 05 03       	syscall sys_io				; display AL
0461+  24FF             
0462+  24FF EA          	pop bl
0463+  2500 07 1F 23    	call itoa				; convert bh to char in A
0464+  2503 2F          	mov bl, al				; save al
0465+  2504 19 00       	mov al, 0
0466+  2506 05 03       	syscall sys_io				; display AH
0467+  2508 24          	mov ah, bl				; retrieve al
0468+  2509 19 00       	mov al, 0
0469+  250B 05 03       	syscall sys_io				; display AL
0470+  250D             
0471+  250D E5          	pop b
0472+  250E E4          	pop a
0473+  250F 09          	ret
0474+  2510             
0475+  2510             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  2510             ; INPUT 16BIT HEX INTEGER
0477+  2510             ; read 16bit integer into A
0478+  2510             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  2510             scan_u16x:
0480+  2510 F8 10 00    	enter 16
0481+  2513 D8          	push b
0482+  2514 DA          	push d
0483+  2515             
0484+  2515 FA F1 FF    	lea d, [bp + -15]
0485+  2518 07 5F 23    	call gets				; get number
0486+  251B             
0487+  251B 32          	mov bl, [d]
0488+  251C 37          	mov bh, bl
0489+  251D 33 01 00    	mov bl, [d + 1]
0490+  2520 07 0D 23    	call atoi				; convert to int in AL
0491+  2523 23          	mov ah, al				; move to AH
0492+  2524             
0493+  2524 33 02 00    	mov bl, [d + 2]
0494+  2527 37          	mov bh, bl
0495+  2528 33 03 00    	mov bl, [d + 3]
0496+  252B 07 0D 23    	call atoi				; convert to int in AL
0497+  252E             
0498+  252E E7          	pop d
0499+  252F E5          	pop b
0500+  2530 F9          	leave
0501+  2531 09          	ret
0502+  2532             
0503+  2532             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  2532             ; PRINT 8bit HEX INTEGER
0505+  2532             ; integer value in reg bl
0506+  2532             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  2532             print_u8x:
0508+  2532 D7          	push a
0509+  2533 DD          	push bl
0510+  2534             
0511+  2534 07 1F 23    	call itoa				; convert bl to char in A
0512+  2537 2F          	mov bl, al				; save al
0513+  2538 19 00       	mov al, 0
0514+  253A 05 03       	syscall sys_io				; display AH
0515+  253C 24          	mov ah, bl				; retrieve al
0516+  253D 19 00       	mov al, 0
0517+  253F 05 03       	syscall sys_io				; display AL
0518+  2541             
0519+  2541 EA          	pop bl
0520+  2542 E4          	pop a
0521+  2543 09          	ret
0522+  2544             
0523+  2544             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  2544             ; print 8bit decimal unsigned number
0525+  2544             ; input number in AL
0526+  2544             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  2544             print_u8d:
0528+  2544 D7          	push a
0529+  2545 D8          	push b
0530+  2546             
0531+  2546 22 00       	mov ah, 0
0532+  2548 26 64 00    	mov b, 100
0533+  254B AE          	div a, b
0534+  254C D8          	push b			; save remainder
0535+  254D B9 00       	cmp al, 0
0536+  254F C6 59 25    	je skip100
0537+  2552 6A 30       	add al, $30
0538+  2554 23          	mov ah, al
0539+  2555 19 00       	mov al, 0
0540+  2557 05 03       	syscall sys_io	; print coeff
0541+  2559             skip100:
0542+  2559 E4          	pop a
0543+  255A 22 00       	mov ah, 0
0544+  255C 26 0A 00    	mov b, 10
0545+  255F AE          	div a, b
0546+  2560 D8          	push b			; save remainder
0547+  2561 B9 00       	cmp al, 0
0548+  2563 C6 6D 25    	je skip10
0549+  2566 6A 30       	add al, $30
0550+  2568 23          	mov ah, al
0551+  2569 19 00       	mov al, 0
0552+  256B 05 03       	syscall sys_io	; print coeff
0553+  256D             skip10:
0554+  256D E4          	pop a
0555+  256E 1B          	mov al, bl
0556+  256F 6A 30       	add al, $30
0557+  2571 23          	mov ah, al
0558+  2572 19 00       	mov al, 0
0559+  2574 05 03       	syscall sys_io	; print coeff
0560+  2576 E5          	pop b
0561+  2577 E4          	pop a
0562+  2578 09          	ret
0563+  2579             
0564+  2579             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  2579             ; INPUT 8BIT HEX INTEGER
0566+  2579             ; read 8bit integer into AL
0567+  2579             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  2579             scan_u8x:
0569+  2579 F8 04 00    	enter 4
0570+  257C D8          	push b
0571+  257D DA          	push d
0572+  257E             
0573+  257E FA FD FF    	lea d, [bp + -3]
0574+  2581 07 5F 23    	call gets				; get number
0575+  2584             
0576+  2584 32          	mov bl, [d]
0577+  2585 37          	mov bh, bl
0578+  2586 33 01 00    	mov bl, [d + 1]
0579+  2589 07 0D 23    	call atoi				; convert to int in AL
0580+  258C             
0581+  258C E7          	pop d
0582+  258D E5          	pop b
0583+  258E F9          	leave
0584+  258F 09          	ret
0585+  2590             
0586+  2590             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  2590             ; input decimal number
0588+  2590             ; result in A
0589+  2590             ; 655'\0'
0590+  2590             ; low--------high
0591+  2590             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  2590             scan_u16d:
0593+  2590 F8 08 00    	enter 8
0594+  2593 E2          	push si
0595+  2594 D8          	push b
0596+  2595 D9          	push c
0597+  2596 DA          	push d
0598+  2597 FA F9 FF    	lea d, [bp +- 7]
0599+  259A 07 5F 23    	call gets
0600+  259D 07 8D 22    	call strlen			; get string length in C
0601+  25A0 7E          	dec c
0602+  25A1 FD 4E       	mov si, d
0603+  25A3 12          	mov a, c
0604+  25A4 FD 99       	shl a
0605+  25A6 3B F5 22    	mov d, table_power
0606+  25A9 59          	add d, a
0607+  25AA 38 00 00    	mov c, 0
0608+  25AD             mul_loop:
0609+  25AD F6          	lodsb			; load ASCII to al
0610+  25AE B9 00       	cmp al, 0
0611+  25B0 C6 C3 25    	je mul_exit
0612+  25B3 6F 30       	sub al, $30		; make into integer
0613+  25B5 22 00       	mov ah, 0
0614+  25B7 2A          	mov b, [d]
0615+  25B8 AC          	mul a, b			; result in B since it fits in 16bits
0616+  25B9 11          	mov a, b
0617+  25BA 28          	mov b, c
0618+  25BB 54          	add a, b
0619+  25BC 39          	mov c, a
0620+  25BD 63 02 00    	sub d, 2
0621+  25C0 0A AD 25    	jmp mul_loop
0622+  25C3             mul_exit:
0623+  25C3 12          	mov a, c
0624+  25C4 E7          	pop d
0625+  25C5 E6          	pop c
0626+  25C6 E5          	pop b
0627+  25C7 EF          	pop si
0628+  25C8 F9          	leave
0629+  25C9 09          	ret
0888   25CA             ; --- END INCLUDE BLOCK
0889   25CA             
0890   25CA             
0891   25CA             .end
tasm: Number of errors = 0
