0001   0000             ; --- Filename: test.c
0002   0000             
0003   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0004   0000             
0005   0400             .org PROC_TEXT_ORG
0006   0400             
0007   0400             ; --- begin text block
0008   0400             main:
0009   0400 D2            push bp
0010   0401 9B            mov bp, sp
0011   0402 26 28 04      mov b, s1
0012   0405 FD 42 2A 04   mov [p], b
0013   0409 29 2A 04      mov b, [p]
0014   040C 74            mov d, b
0015   040D 2A            mov b, [d]
0016   040E FD 42 2C 04   mov [s2], b
0017   0412             ; --- begin asm block
0018   0412 14 2C 04        mov a, [s2]
0019   0415 3C              mov d, a
0020   0416 07 72 06        call puts
0021   0419               ; --- end asm block
0022   0419 F9            leave
0023   041A 05 0B         syscall sys_terminate_proc
0024   041C             ; --- end text block
0025   041C             
0026   041C             ; --- begin data block
0027   041C 48 65 6C 6C s1_data: .db "Hello World", 0
0027   0420 6F 20 57 6F 
0027   0424 72 6C 64 00 
0028   0428 1C 04       s1: .dw s1_data
0029   042A 00 00       p: .dw 0
0030   042C 00 00       s2: .dw 0
0031   042E             ; --- end data block
0032   042E             ; --- begin include block
0033   042E             .include "lib/stdio.asm"
0001+  042E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  042E             ; stdio.s
0003+  042E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  042E             .include "lib/string.asm"
0001++ 042E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 042E             ; string.s
0003++ 042E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 042E             
0005++ 042E             
0006++ 042E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 042E             ; strrev
0008++ 042E             ; reverse a string
0009++ 042E             ; D = string address
0010++ 042E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 042E             ; 01234
0012++ 042E             strrev:
0013++ 042E 4B          	pusha
0014++ 042F 07 75 04    	call strlen	; length in C
0015++ 0432 12          	mov a, c
0016++ 0433 AF 01 00    	cmp a, 1
0017++ 0436 D0 50 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0439 7D          	dec a
0019++ 043A FD 4E       	mov si, d	; beginning of string
0020++ 043C FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 043E 59          	add d, a	; end of string
0022++ 043F 12          	mov a, c
0023++ 0440 FD 9B       	shr a		; divide by 2
0024++ 0442 39          	mov c, a	; C now counts the steps
0025++ 0443             strrev_L0:
0026++ 0443 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0444 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0445 3E          	mov [d], al	; store left char into right side
0029++ 0446 1B          	mov al, bl
0030++ 0447 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0448 7E          	dec c
0032++ 0449 7F          	dec d
0033++ 044A C2 00 00    	cmp c, 0
0034++ 044D C7 43 04    	jne strrev_L0
0035++ 0450             strrev_end:
0036++ 0450 4C          	popa
0037++ 0451 09          	ret
0038++ 0452             	
0039++ 0452             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0452             ; strchr
0041++ 0452             ; search string in D for char in AL
0042++ 0452             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0452             strchr:
0044++ 0452             strchr_L0:
0045++ 0452 32          	mov bl, [d]
0046++ 0453 C1 00       	cmp bl, 0
0047++ 0455 C6 60 04    	je strchr_end
0048++ 0458 BA          	cmp al, bl
0049++ 0459 C6 60 04    	je strchr_end
0050++ 045C 79          	inc d
0051++ 045D 0A 52 04    	jmp strchr_L0
0052++ 0460             strchr_end:
0053++ 0460 1B          	mov al, bl
0054++ 0461 09          	ret
0055++ 0462             
0056++ 0462             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0462             ; strstr
0058++ 0462             ; find sub-string
0059++ 0462             ; str1 in SI
0060++ 0462             ; str2 in DI
0061++ 0462             ; SI points to end of source string
0062++ 0462             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0462             strstr:
0064++ 0462 DB          	push al
0065++ 0463 DA          	push d
0066++ 0464 E3          	push di
0067++ 0465             strstr_loop:
0068++ 0465 F3          	cmpsb					; compare a byte of the strings
0069++ 0466 C7 71 04    	jne strstr_ret
0070++ 0469 FC 00 00    	lea d, [di + 0]
0071++ 046C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 046E C7 65 04    	jne strstr_loop				; equal chars but not at end
0073++ 0471             strstr_ret:
0074++ 0471 F0          	pop di
0075++ 0472 E7          	pop d
0076++ 0473 E8          	pop al
0077++ 0474 09          	ret
0078++ 0475             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0475             ; length of null terminated string
0080++ 0475             ; result in C
0081++ 0475             ; pointer in D
0082++ 0475             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0475             strlen:
0084++ 0475 DA          	push d
0085++ 0476 38 00 00    	mov c, 0
0086++ 0479             strlen_L1:
0087++ 0479 BD 00       	cmp byte [d], 0
0088++ 047B C6 83 04    	je strlen_ret
0089++ 047E 79          	inc d
0090++ 047F 78          	inc c
0091++ 0480 0A 79 04    	jmp strlen_L1
0092++ 0483             strlen_ret:
0093++ 0483 E7          	pop d
0094++ 0484 09          	ret
0095++ 0485             
0096++ 0485             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0485             ; STRCMP
0098++ 0485             ; compare two strings
0099++ 0485             ; str1 in SI
0100++ 0485             ; str2 in DI
0101++ 0485             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0485             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0485             strcmp:
0104++ 0485 DB          	push al
0105++ 0486 DA          	push d
0106++ 0487 E3          	push di
0107++ 0488 E2          	push si
0108++ 0489             strcmp_loop:
0109++ 0489 F3          	cmpsb					; compare a byte of the strings
0110++ 048A C7 95 04    	jne strcmp_ret
0111++ 048D FB FF FF    	lea d, [si +- 1]
0112++ 0490 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0492 C7 89 04    	jne strcmp_loop				; equal chars but not at end
0114++ 0495             strcmp_ret:
0115++ 0495 EF          	pop si
0116++ 0496 F0          	pop di
0117++ 0497 E7          	pop d
0118++ 0498 E8          	pop al
0119++ 0499 09          	ret
0120++ 049A             
0121++ 049A             
0122++ 049A             ; STRCPY
0123++ 049A             ; copy null terminated string from SI to DI
0124++ 049A             ; source in SI
0125++ 049A             ; destination in DI
0126++ 049A             strcpy:
0127++ 049A E2          	push si
0128++ 049B E3          	push di
0129++ 049C DB          	push al
0130++ 049D             strcpy_L1:
0131++ 049D F6          	lodsb
0132++ 049E F7          	stosb
0133++ 049F B9 00       	cmp al, 0
0134++ 04A1 C7 9D 04    	jne strcpy_L1
0135++ 04A4             strcpy_end:
0136++ 04A4 E8          	pop al
0137++ 04A5 F0          	pop di
0138++ 04A6 EF          	pop si
0139++ 04A7 09          	ret
0140++ 04A8             
0141++ 04A8             ; STRCAT
0142++ 04A8             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04A8             ; source in SI
0144++ 04A8             ; destination in DI
0145++ 04A8             strcat:
0146++ 04A8 E2          	push si
0147++ 04A9 E3          	push di
0148++ 04AA D7          	push a
0149++ 04AB DA          	push d
0150++ 04AC 50          	mov a, di
0151++ 04AD 3C          	mov d, a
0152++ 04AE             strcat_goto_end_L1:
0153++ 04AE BD 00       	cmp byte[d], 0
0154++ 04B0 C6 B7 04    	je strcat_start
0155++ 04B3 79          	inc d
0156++ 04B4 0A AE 04    	jmp strcat_goto_end_L1
0157++ 04B7             strcat_start:
0158++ 04B7 FD 50       	mov di, d
0159++ 04B9             strcat_L1:
0160++ 04B9 F6          	lodsb
0161++ 04BA F7          	stosb
0162++ 04BB B9 00       	cmp al, 0
0163++ 04BD C7 B9 04    	jne strcat_L1
0164++ 04C0             strcat_end:
0165++ 04C0 E7          	pop d
0166++ 04C1 E4          	pop a
0167++ 04C2 F0          	pop di
0168++ 04C3 EF          	pop si
0169++ 04C4 09          	ret
0005+  04C5             
0006+  04C5 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  04C9 34 35 36 37 
0006+  04CD 38 39 41 42 
0006+  04D1 43 44 45 46 
0007+  04D5             
0008+  04D5 01 00       table_power:.dw 1
0009+  04D7 0A 00       			.dw 10
0010+  04D9 64 00       			.dw 100
0011+  04DB E8 03       			.dw 1000
0012+  04DD 10 27       			.dw 10000
0013+  04DF             
0014+  04DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  04DF             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  04DF             ; ASCII in BL
0017+  04DF             ; result in AL
0018+  04DF             ; ascii for F = 0100 0110
0019+  04DF             ; ascii for 9 = 0011 1001
0020+  04DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  04DF             hex_ascii_encode:
0022+  04DF 1B          	mov al, bl
0023+  04E0 93 40       	test al, $40				; test if letter or number
0024+  04E2 C7 E8 04    	jnz hex_letter
0025+  04E5 87 0F       	and al, $0F				; get number
0026+  04E7 09          	ret
0027+  04E8             hex_letter:
0028+  04E8 87 0F       	and al, $0F				; get letter
0029+  04EA 6A 09       	add al, 9
0030+  04EC 09          	ret
0031+  04ED             
0032+  04ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  04ED             ; ATOI
0034+  04ED             ; 2 letter hex string in B
0035+  04ED             ; 8bit integer returned in AL
0036+  04ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  04ED             atoi:
0038+  04ED D8          	push b
0039+  04EE 07 DF 04    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  04F1 30          	mov bl, bh
0041+  04F2 DB          	push al					; save a
0042+  04F3 07 DF 04    	call hex_ascii_encode
0043+  04F6 EA          	pop bl	
0044+  04F7 FD 9E 04    	shl al, 4
0045+  04FA 8C          	or al, bl
0046+  04FB E5          	pop b
0047+  04FC 09          	ret	
0048+  04FD             
0049+  04FD             
0050+  04FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04FD             ; printf
0052+  04FD             ; no need for explanations!
0053+  04FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  04FD             printf:
0055+  04FD 09          	ret
0056+  04FE             
0057+  04FE             
0058+  04FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  04FE             ; scanf
0060+  04FE             ; no need for explanations!
0061+  04FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  04FE             scanf:
0063+  04FE 09          	ret
0064+  04FF             
0065+  04FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  04FF             ; ITOA
0067+  04FF             ; 8bit value in BL
0068+  04FF             ; 2 byte ASCII result in A
0069+  04FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  04FF             itoa:
0071+  04FF DA          	push d
0072+  0500 D8          	push b
0073+  0501 A7 00       	mov bh, 0
0074+  0503 FD A4 04    	shr bl, 4	
0075+  0506 74          	mov d, b
0076+  0507 1F C5 04    	mov al, [d + s_hex_digits]
0077+  050A 23          	mov ah, al
0078+  050B             	
0079+  050B E5          	pop b
0080+  050C D8          	push b
0081+  050D A7 00       	mov bh, 0
0082+  050F FD 87 0F    	and bl, $0F
0083+  0512 74          	mov d, b
0084+  0513 1F C5 04    	mov al, [d + s_hex_digits]
0085+  0516 E5          	pop b
0086+  0517 E7          	pop d
0087+  0518 09          	ret
0088+  0519             
0089+  0519             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0519             ; HEX STRING TO BINARY
0091+  0519             ; di = destination address
0092+  0519             ; si = source
0093+  0519             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0519             hex_to_int:
0095+  0519             hex_to_int_L1:
0096+  0519 F6          	lodsb					; load from [SI] to AL
0097+  051A B9 00       	cmp al, 0				; check if ASCII 0
0098+  051C C6 29 05    	jz hex_to_int_ret
0099+  051F 36          	mov bh, al
0100+  0520 F6          	lodsb
0101+  0521 2F          	mov bl, al
0102+  0522 07 ED 04    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0525 F7          	stosb					; store AL to [DI]
0104+  0526 0A 19 05    	jmp hex_to_int_L1
0105+  0529             hex_to_int_ret:
0106+  0529 09          	ret		
0107+  052A             
0108+  052A             
0109+  052A             
0110+  052A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  052A             ; GETCHAR
0112+  052A             ; char in ah
0113+  052A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  052A             getchar:
0115+  052A DB          	push al
0116+  052B             getchar_retry:
0117+  052B FD 0C       	sti
0118+  052D 19 01       	mov al, 1
0119+  052F 05 03       	syscall sys_io			; receive in AH
0120+  0531 B9 00       	cmp al, 0			; check if any char was receive
0121+  0533 C6 2B 05    	je getchar_retry
0122+  0536 E8          	pop al
0123+  0537 09          	ret
0124+  0538             
0125+  0538             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0538             ; PUTCHAR
0127+  0538             ; char in ah
0128+  0538             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0538             putchar:
0130+  0538 D7          	push a
0131+  0539 19 00       	mov al, 0
0132+  053B 05 03       	syscall sys_io			; char in AH
0133+  053D E4          	pop a
0134+  053E 09          	ret
0135+  053F             
0136+  053F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  053F             ;; INPUT A STRING
0138+  053F             ;; terminates with null
0139+  053F             ;; pointer in D
0140+  053F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  053F             gets:
0142+  053F D7          	push a
0143+  0540 DA          	push d
0144+  0541             gets_loop:
0145+  0541 FD 0C       	sti
0146+  0543 19 01       	mov al, 1
0147+  0545 05 03       	syscall sys_io			; receive in AH
0148+  0547 B9 00       	cmp al, 0				; check error code (AL)
0149+  0549 C6 41 05    	je gets_loop			; if no char received, retry
0150+  054C             
0151+  054C 76 1B       	cmp ah, 27
0152+  054E C6 6F 05    	je gets_telnet_escape
0153+  0551 76 0A       	cmp ah, $0A				; LF
0154+  0553 C6 C8 05    	je gets_end
0155+  0556 76 0D       	cmp ah, $0D				; CR
0156+  0558 C6 C8 05    	je gets_end
0157+  055B 76 5C       	cmp ah, $5C				; '\\'
0158+  055D C6 9F 05    	je gets_escape
0159+  0560             	
0160+  0560 76 08       	cmp ah, $08			; check for backspace
0161+  0562 C6 6B 05    	je gets_backspace
0162+  0565             
0163+  0565 1A          	mov al, ah
0164+  0566 3E          	mov [d], al
0165+  0567 79          	inc d
0166+  0568 0A 41 05    	jmp gets_loop
0167+  056B             gets_backspace:
0168+  056B 7F          	dec d
0169+  056C 0A 41 05    	jmp gets_loop
0170+  056F             gets_telnet_escape:
0171+  056F FD 0C       	sti
0172+  0571 19 01       	mov al, 1
0173+  0573 05 03       	syscall sys_io				; receive in AH without echo
0174+  0575 B9 00       	cmp al, 0					; check error code (AL)
0175+  0577 C6 6F 05    	je gets_telnet_escape		; if no char received, retry
0176+  057A 76 5B       	cmp ah, '['
0177+  057C C7 41 05    	jne gets_loop
0178+  057F             gets_telnet_escape_phase2:
0179+  057F FD 0C       	sti
0180+  0581 19 01       	mov al, 1
0181+  0583 05 03       	syscall sys_io					; receive in AH without echo
0182+  0585 B9 00       	cmp al, 0						; check error code (AL)
0183+  0587 C6 7F 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  058A 76 44       	cmp ah, 'D'
0185+  058C C6 97 05    	je gets_left_arrow
0186+  058F 76 43       	cmp ah, 'C'
0187+  0591 C6 9B 05    	je gets_right_arrow
0188+  0594 0A 41 05    	jmp gets_loop
0189+  0597             gets_left_arrow:
0190+  0597 7F          	dec d
0191+  0598 0A 41 05    	jmp gets_loop
0192+  059B             gets_right_arrow:
0193+  059B 79          	inc d
0194+  059C 0A 41 05    	jmp gets_loop
0195+  059F             gets_escape:
0196+  059F FD 0C       	sti
0197+  05A1 19 01       	mov al, 1
0198+  05A3 05 03       	syscall sys_io			; receive in AH
0199+  05A5 B9 00       	cmp al, 0				; check error code (AL)
0200+  05A7 C6 9F 05    	je gets_escape			; if no char received, retry
0201+  05AA 76 6E       	cmp ah, 'n'
0202+  05AC C6 BA 05    	je gets_LF
0203+  05AF 76 72       	cmp ah, 'r'
0204+  05B1 C6 C1 05    	je gets_CR
0205+  05B4 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  05B5 3E          	mov [d], al
0207+  05B6 79          	inc d
0208+  05B7 0A 41 05    	jmp gets_loop
0209+  05BA             gets_LF:
0210+  05BA 19 0A       	mov al, $0A
0211+  05BC 3E          	mov [d], al
0212+  05BD 79          	inc d
0213+  05BE 0A 41 05    	jmp gets_loop
0214+  05C1             gets_CR:
0215+  05C1 19 0D       	mov al, $0D
0216+  05C3 3E          	mov [d], al
0217+  05C4 79          	inc d
0218+  05C5 0A 41 05    	jmp gets_loop
0219+  05C8             gets_end:
0220+  05C8 19 00       	mov al, 0
0221+  05CA 3E          	mov [d], al				; terminate string
0222+  05CB E7          	pop d
0223+  05CC E4          	pop a
0224+  05CD 09          	ret
0225+  05CE             
0226+  05CE             
0227+  05CE             
0228+  05CE             
0229+  05CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  05CE             ;; INPUT TEXT
0231+  05CE             ;; terminated with CTRL+D
0232+  05CE             ;; pointer in D
0233+  05CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  05CE             gettxt:
0235+  05CE D7          	push a
0236+  05CF DA          	push d
0237+  05D0             gettxt_loop:
0238+  05D0 19 01       	mov al, 1
0239+  05D2 05 03       	syscall sys_io			; receive in AH
0240+  05D4 B9 00       	cmp al, 0				; check error code (AL)
0241+  05D6 C6 D0 05    	je gettxt_loop		; if no char received, retry
0242+  05D9 76 04       	cmp ah, 4			; EOT
0243+  05DB C6 19 06    	je gettxt_end
0244+  05DE 76 08       	cmp ah, $08			; check for backspace
0245+  05E0 C6 15 06    	je gettxt_backspace
0246+  05E3 76 5C       	cmp ah, $5C				; '\\'
0247+  05E5 C6 EE 05    	je gettxt_escape
0248+  05E8 1A          	mov al, ah
0249+  05E9 3E          	mov [d], al
0250+  05EA 79          	inc d
0251+  05EB 0A D0 05    	jmp gettxt_loop
0252+  05EE             gettxt_escape:
0253+  05EE 19 01       	mov al, 1
0254+  05F0 05 03       	syscall sys_io			; receive in AH
0255+  05F2 B9 00       	cmp al, 0				; check error code (AL)
0256+  05F4 C6 EE 05    	je gettxt_escape		; if no char received, retry
0257+  05F7 76 6E       	cmp ah, 'n'
0258+  05F9 C6 07 06    	je gettxt_LF
0259+  05FC 76 72       	cmp ah, 'r'
0260+  05FE C6 0E 06    	je gettxt_CR
0261+  0601 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  0602 3E          	mov [d], al
0263+  0603 79          	inc d
0264+  0604 0A D0 05    	jmp gettxt_loop
0265+  0607             gettxt_LF:
0266+  0607 19 0A       	mov al, $0A
0267+  0609 3E          	mov [d], al
0268+  060A 79          	inc d
0269+  060B 0A D0 05    	jmp gettxt_loop
0270+  060E             gettxt_CR:
0271+  060E 19 0D       	mov al, $0D
0272+  0610 3E          	mov [d], al
0273+  0611 79          	inc d
0274+  0612 0A D0 05    	jmp gettxt_loop
0275+  0615             gettxt_backspace:
0276+  0615 7F          	dec d
0277+  0616 0A D0 05    	jmp gettxt_loop
0278+  0619             gettxt_end:
0279+  0619 19 00       	mov al, 0
0280+  061B 3E          	mov [d], al				; terminate string
0281+  061C E7          	pop d
0282+  061D E4          	pop a
0283+  061E 09          	ret
0284+  061F             
0285+  061F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  061F             ; PRINT NEW LINE
0287+  061F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  061F             printnl:
0289+  061F D7          	push a
0290+  0620 10 00 0A    	mov a, $0A00
0291+  0623 05 03       	syscall sys_io
0292+  0625 10 00 0D    	mov a, $0D00
0293+  0628 05 03       	syscall sys_io
0294+  062A E4          	pop a
0295+  062B 09          	ret
0296+  062C             
0297+  062C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  062C             ; strtoint
0299+  062C             ; 4 digit hex string number in d
0300+  062C             ; integer returned in A
0301+  062C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  062C             strtointx:
0303+  062C D8          	push b
0304+  062D 32          	mov bl, [d]
0305+  062E 37          	mov bh, bl
0306+  062F 33 01 00    	mov bl, [d + 1]
0307+  0632 07 ED 04    	call atoi				; convert to int in AL
0308+  0635 23          	mov ah, al				; move to AH
0309+  0636 33 02 00    	mov bl, [d + 2]
0310+  0639 37          	mov bh, bl
0311+  063A 33 03 00    	mov bl, [d + 3]
0312+  063D 07 ED 04    	call atoi				; convert to int in AL
0313+  0640 E5          	pop b
0314+  0641 09          	ret
0315+  0642             
0316+  0642             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  0642             ; strtoint
0318+  0642             ; 5 digit base10 string number in d
0319+  0642             ; integer returned in A
0320+  0642             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  0642             strtoint:
0322+  0642 E2          	push si
0323+  0643 D8          	push b
0324+  0644 D9          	push c
0325+  0645 DA          	push d
0326+  0646 07 75 04    	call strlen			; get string length in C
0327+  0649 7E          	dec c
0328+  064A FD 4E       	mov si, d
0329+  064C 12          	mov a, c
0330+  064D FD 99       	shl a
0331+  064F 3B D5 04    	mov d, table_power
0332+  0652 59          	add d, a
0333+  0653 38 00 00    	mov c, 0
0334+  0656             strtoint_L0:
0335+  0656 F6          	lodsb			; load ASCII to al
0336+  0657 B9 00       	cmp al, 0
0337+  0659 C6 6C 06    	je strtoint_end
0338+  065C 6F 30       	sub al, $30		; make into integer
0339+  065E 22 00       	mov ah, 0
0340+  0660 2A          	mov b, [d]
0341+  0661 AC          	mul a, b			; result in B since it fits in 16bits
0342+  0662 11          	mov a, b
0343+  0663 28          	mov b, c
0344+  0664 54          	add a, b
0345+  0665 39          	mov c, a
0346+  0666 63 02 00    	sub d, 2
0347+  0669 0A 56 06    	jmp strtoint_L0
0348+  066C             strtoint_end:
0349+  066C 12          	mov a, c
0350+  066D E7          	pop d
0351+  066E E6          	pop c
0352+  066F E5          	pop b
0353+  0670 EF          	pop si
0354+  0671 09          	ret
0355+  0672             
0356+  0672             
0357+  0672             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  0672             ; PRINT NULL TERMINATED STRING
0359+  0672             ; pointer in D
0360+  0672             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  0672             puts:
0362+  0672 D7          	push a
0363+  0673 DA          	push d
0364+  0674             puts_L1:
0365+  0674 1E          	mov al, [d]
0366+  0675 B9 00       	cmp al, 0
0367+  0677 C6 83 06    	jz puts_END
0368+  067A 23          	mov ah, al
0369+  067B 19 00       	mov al, 0
0370+  067D 05 03       	syscall sys_io
0371+  067F 79          	inc d
0372+  0680 0A 74 06    	jmp puts_L1
0373+  0683             puts_END:
0374+  0683 E7          	pop d
0375+  0684 E4          	pop a
0376+  0685 09          	ret
0377+  0686             
0378+  0686             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0686             ; PRINT N SIZE STRING
0380+  0686             ; pointer in D
0381+  0686             ; size in C
0382+  0686             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  0686             putsn:
0384+  0686 DB          	push al
0385+  0687 DA          	push d
0386+  0688 D9          	push c
0387+  0689             putsn_L0:
0388+  0689 1E          	mov al, [d]
0389+  068A 23          	mov ah, al
0390+  068B 19 00       	mov al, 0
0391+  068D 05 03       	syscall sys_io
0392+  068F 79          	inc d
0393+  0690 7E          	dec c	
0394+  0691 C2 00 00    	cmp c, 0
0395+  0694 C7 89 06    	jne putsn_L0
0396+  0697             putsn_end:
0397+  0697 E6          	pop c
0398+  0698 E7          	pop d
0399+  0699 E8          	pop al
0400+  069A 09          	ret
0401+  069B             
0402+  069B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  069B             ; print 16bit decimal number
0404+  069B             ; input number in A
0405+  069B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  069B             print_u16d:
0407+  069B D7          	push a
0408+  069C D8          	push b
0409+  069D 26 10 27    	mov b, 10000
0410+  06A0 AE          	div a, b			; get 10000 coeff.
0411+  06A1 07 C7 06    	call print_number
0412+  06A4 11          	mov a, b
0413+  06A5 26 E8 03    	mov b, 1000
0414+  06A8 AE          	div a, b			; get 10000 coeff.
0415+  06A9 07 C7 06    	call print_number
0416+  06AC 11          	mov a, b
0417+  06AD 26 64 00    	mov b, 100
0418+  06B0 AE          	div a, b
0419+  06B1 07 C7 06    	call print_number
0420+  06B4 11          	mov a, b
0421+  06B5 26 0A 00    	mov b, 10
0422+  06B8 AE          	div a, b
0423+  06B9 07 C7 06    	call print_number
0424+  06BC 11          	mov a, b
0425+  06BD 6A 30       	add al, $30
0426+  06BF 23          	mov ah, al
0427+  06C0 19 00       	mov al, 0
0428+  06C2 05 03       	syscall sys_io	; print coeff
0429+  06C4 E5          	pop b
0430+  06C5 E4          	pop a
0431+  06C6 09          	ret
0432+  06C7             
0433+  06C7             
0434+  06C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  06C7             ; if A == 0, print space
0436+  06C7             ; else print A
0437+  06C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  06C7             print_number:
0439+  06C7 6A 30       	add al, $30
0440+  06C9 23          	mov ah, al
0441+  06CA 07 38 05    	call putchar
0442+  06CD 09          	ret
0443+  06CE             
0444+  06CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06CE             ; PRINT 16BIT HEX INTEGER
0446+  06CE             ; integer value in reg B
0447+  06CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06CE             print_u16x:
0449+  06CE D7          	push a
0450+  06CF D8          	push b
0451+  06D0 DD          	push bl
0452+  06D1 30          	mov bl, bh
0453+  06D2 07 FF 04    	call itoa				; convert bh to char in A
0454+  06D5 2F          	mov bl, al				; save al
0455+  06D6 19 00       	mov al, 0
0456+  06D8 05 03       	syscall sys_io				; display AH
0457+  06DA 24          	mov ah, bl				; retrieve al
0458+  06DB 19 00       	mov al, 0
0459+  06DD 05 03       	syscall sys_io				; display AL
0460+  06DF             
0461+  06DF EA          	pop bl
0462+  06E0 07 FF 04    	call itoa				; convert bh to char in A
0463+  06E3 2F          	mov bl, al				; save al
0464+  06E4 19 00       	mov al, 0
0465+  06E6 05 03       	syscall sys_io				; display AH
0466+  06E8 24          	mov ah, bl				; retrieve al
0467+  06E9 19 00       	mov al, 0
0468+  06EB 05 03       	syscall sys_io				; display AL
0469+  06ED             
0470+  06ED E5          	pop b
0471+  06EE E4          	pop a
0472+  06EF 09          	ret
0473+  06F0             
0474+  06F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  06F0             ; INPUT 16BIT HEX INTEGER
0476+  06F0             ; read 16bit integer into A
0477+  06F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  06F0             scan_u16x:
0479+  06F0 F8 10 00    	enter 16
0480+  06F3 D8          	push b
0481+  06F4 DA          	push d
0482+  06F5             
0483+  06F5 FA F1 FF    	lea d, [bp + -15]
0484+  06F8 07 3F 05    	call gets				; get number
0485+  06FB             
0486+  06FB 32          	mov bl, [d]
0487+  06FC 37          	mov bh, bl
0488+  06FD 33 01 00    	mov bl, [d + 1]
0489+  0700 07 ED 04    	call atoi				; convert to int in AL
0490+  0703 23          	mov ah, al				; move to AH
0491+  0704             
0492+  0704 33 02 00    	mov bl, [d + 2]
0493+  0707 37          	mov bh, bl
0494+  0708 33 03 00    	mov bl, [d + 3]
0495+  070B 07 ED 04    	call atoi				; convert to int in AL
0496+  070E             
0497+  070E E7          	pop d
0498+  070F E5          	pop b
0499+  0710 F9          	leave
0500+  0711 09          	ret
0501+  0712             
0502+  0712             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  0712             ; PRINT 8bit HEX INTEGER
0504+  0712             ; integer value in reg bl
0505+  0712             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  0712             print_u8x:
0507+  0712 D7          	push a
0508+  0713 DD          	push bl
0509+  0714             
0510+  0714 07 FF 04    	call itoa				; convert bl to char in A
0511+  0717 2F          	mov bl, al				; save al
0512+  0718 19 00       	mov al, 0
0513+  071A 05 03       	syscall sys_io				; display AH
0514+  071C 24          	mov ah, bl				; retrieve al
0515+  071D 19 00       	mov al, 0
0516+  071F 05 03       	syscall sys_io				; display AL
0517+  0721             
0518+  0721 EA          	pop bl
0519+  0722 E4          	pop a
0520+  0723 09          	ret
0521+  0724             
0522+  0724             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0724             ; print 8bit decimal unsigned number
0524+  0724             ; input number in AL
0525+  0724             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0724             print_u8d:
0527+  0724 D7          	push a
0528+  0725 D8          	push b
0529+  0726             
0530+  0726 22 00       	mov ah, 0
0531+  0728 26 64 00    	mov b, 100
0532+  072B AE          	div a, b
0533+  072C D8          	push b			; save remainder
0534+  072D B9 00       	cmp al, 0
0535+  072F C6 39 07    	je skip100
0536+  0732 6A 30       	add al, $30
0537+  0734 23          	mov ah, al
0538+  0735 19 00       	mov al, 0
0539+  0737 05 03       	syscall sys_io	; print coeff
0540+  0739             skip100:
0541+  0739 E4          	pop a
0542+  073A 22 00       	mov ah, 0
0543+  073C 26 0A 00    	mov b, 10
0544+  073F AE          	div a, b
0545+  0740 D8          	push b			; save remainder
0546+  0741 B9 00       	cmp al, 0
0547+  0743 C6 4D 07    	je skip10
0548+  0746 6A 30       	add al, $30
0549+  0748 23          	mov ah, al
0550+  0749 19 00       	mov al, 0
0551+  074B 05 03       	syscall sys_io	; print coeff
0552+  074D             skip10:
0553+  074D E4          	pop a
0554+  074E 1B          	mov al, bl
0555+  074F 6A 30       	add al, $30
0556+  0751 23          	mov ah, al
0557+  0752 19 00       	mov al, 0
0558+  0754 05 03       	syscall sys_io	; print coeff
0559+  0756 E5          	pop b
0560+  0757 E4          	pop a
0561+  0758 09          	ret
0562+  0759             
0563+  0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  0759             ; INPUT 8BIT HEX INTEGER
0565+  0759             ; read 8bit integer into AL
0566+  0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  0759             scan_u8x:
0568+  0759 F8 04 00    	enter 4
0569+  075C D8          	push b
0570+  075D DA          	push d
0571+  075E             
0572+  075E FA FD FF    	lea d, [bp + -3]
0573+  0761 07 3F 05    	call gets				; get number
0574+  0764             
0575+  0764 32          	mov bl, [d]
0576+  0765 37          	mov bh, bl
0577+  0766 33 01 00    	mov bl, [d + 1]
0578+  0769 07 ED 04    	call atoi				; convert to int in AL
0579+  076C             
0580+  076C E7          	pop d
0581+  076D E5          	pop b
0582+  076E F9          	leave
0583+  076F 09          	ret
0584+  0770             
0585+  0770             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  0770             ; input decimal number
0587+  0770             ; result in A
0588+  0770             ; 655'\0'
0589+  0770             ; low--------high
0590+  0770             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  0770             scan_u16d:
0592+  0770 F8 08 00    	enter 8
0593+  0773 E2          	push si
0594+  0774 D8          	push b
0595+  0775 D9          	push c
0596+  0776 DA          	push d
0597+  0777 FA F9 FF    	lea d, [bp +- 7]
0598+  077A 07 3F 05    	call gets
0599+  077D 07 75 04    	call strlen			; get string length in C
0600+  0780 7E          	dec c
0601+  0781 FD 4E       	mov si, d
0602+  0783 12          	mov a, c
0603+  0784 FD 99       	shl a
0604+  0786 3B D5 04    	mov d, table_power
0605+  0789 59          	add d, a
0606+  078A 38 00 00    	mov c, 0
0607+  078D             mul_loop:
0608+  078D F6          	lodsb			; load ASCII to al
0609+  078E B9 00       	cmp al, 0
0610+  0790 C6 A3 07    	je mul_exit
0611+  0793 6F 30       	sub al, $30		; make into integer
0612+  0795 22 00       	mov ah, 0
0613+  0797 2A          	mov b, [d]
0614+  0798 AC          	mul a, b			; result in B since it fits in 16bits
0615+  0799 11          	mov a, b
0616+  079A 28          	mov b, c
0617+  079B 54          	add a, b
0618+  079C 39          	mov c, a
0619+  079D 63 02 00    	sub d, 2
0620+  07A0 0A 8D 07    	jmp mul_loop
0621+  07A3             mul_exit:
0622+  07A3 12          	mov a, c
0623+  07A4 E7          	pop d
0624+  07A5 E6          	pop c
0625+  07A6 E5          	pop b
0626+  07A7 EF          	pop si
0627+  07A8 F9          	leave
0628+  07A9 09          	ret
0034   07AA             ; --- end include block
0035   07AA             
0036   07AA             .end
tasm: Number of errors = 0
