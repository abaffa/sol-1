0001   0000             ; --- FILENAME: life.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; n
0011   0408 26 90 17      mov b, _string_2
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 07 F0 04      call print
0015   0411 51 02 00      add sp, 2
0016   0414 07 FB 04      call getn
0017   0417 D7            push a
0018   0418 11            mov a, b
0019   0419 45 FD FF      mov [bp + -3], a ; n
0020   041C E4            pop a
0021   041D 07 65 04      call init_game
0022   0420             _for1_init:
0023   0420 26 00 00      mov b, 0
0024   0423 D7            push a
0025   0424 11            mov a, b
0026   0425 45 FF FF      mov [bp + -1], a ; i
0027   0428 E4            pop a
0028   0429             _for1_cond:
0029   0429 2C FF FF      mov b, [bp + -1] ; i
0030   042C D7            push a
0031   042D 11            mov a, b
0032   042E 2C FD FF      mov b, [bp + -3] ; n
0033   0431 B0            cmp a, b
0034   0432 0E            lodflgs
0035   0433 87 02         and al, %00000010 ; <
0036   0435 B9 00         cmp al, 0
0037   0437 0E            lodflgs
0038   0438 96            not al
0039   0439 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0040   043B 22 00         mov ah, 0
0041   043D 27            mov b, a
0042   043E E4            pop a
0043   043F C0 00 00      cmp b, 0
0044   0442 C6 5F 04      je _for1_exit
0045   0445             _for1_block:
0046   0445             
0047   0445             ; --- BEGIN INLINE ASM BLOCK
0048   0445 3B 4D 18      mov d, s_telnet_clear
0049   0448 07 F2 19      call puts
0050   044B             ; --- END INLINE ASM BLOCK
0051   044B             
0052   044B 07 0B 05      call print_game
0053   044E 07 BF 05      call update_game
0054   0451             _for1_update:
0055   0451 2C FF FF      mov b, [bp + -1] ; i
0056   0454 FD 77         inc b
0057   0456 D7            push a
0058   0457 11            mov a, b
0059   0458 45 FF FF      mov [bp + -1], a ; i
0060   045B E4            pop a
0061   045C 0A 29 04      jmp _for1_cond
0062   045F             _for1_exit:
0063   045F 26 00 00      mov b, 0
0064   0462 F9            leave
0065   0463 05 0B         syscall sys_terminate_proc
0066   0465             init_game:
0067   0465 D2            push bp
0068   0466 9B            mov bp, sp
0069   0467 29 75 10      mov b, [curr_state]
0070   046A 74            mov d, b
0071   046B 26 04 00      mov b, 4
0072   046E 10 3C 00      mov a, 60
0073   0471 AC            mul a, b
0074   0472 5A            add d, b
0075   0473 26 04 00      mov b, 4
0076   0476 10 02 00      mov a, 2
0077   0479 AC            mul a, b
0078   047A 5A            add d, b
0079   047B DA            push d
0080   047C 26 01 00      mov b, 1
0081   047F E7            pop d
0082   0480 11            mov a, b
0083   0481 43            mov [d], a
0084   0482 29 75 10      mov b, [curr_state]
0085   0485 74            mov d, b
0086   0486 26 04 00      mov b, 4
0087   0489 10 3C 00      mov a, 60
0088   048C AC            mul a, b
0089   048D 5A            add d, b
0090   048E 26 05 00      mov b, 5
0091   0491 10 02 00      mov a, 2
0092   0494 AC            mul a, b
0093   0495 5A            add d, b
0094   0496 DA            push d
0095   0497 26 01 00      mov b, 1
0096   049A E7            pop d
0097   049B 11            mov a, b
0098   049C 43            mov [d], a
0099   049D 29 75 10      mov b, [curr_state]
0100   04A0 74            mov d, b
0101   04A1 26 04 00      mov b, 4
0102   04A4 10 3C 00      mov a, 60
0103   04A7 AC            mul a, b
0104   04A8 5A            add d, b
0105   04A9 26 06 00      mov b, 6
0106   04AC 10 02 00      mov a, 2
0107   04AF AC            mul a, b
0108   04B0 5A            add d, b
0109   04B1 DA            push d
0110   04B2 26 01 00      mov b, 1
0111   04B5 E7            pop d
0112   04B6 11            mov a, b
0113   04B7 43            mov [d], a
0114   04B8 29 75 10      mov b, [curr_state]
0115   04BB 74            mov d, b
0116   04BC 26 03 00      mov b, 3
0117   04BF 10 3C 00      mov a, 60
0118   04C2 AC            mul a, b
0119   04C3 5A            add d, b
0120   04C4 26 06 00      mov b, 6
0121   04C7 10 02 00      mov a, 2
0122   04CA AC            mul a, b
0123   04CB 5A            add d, b
0124   04CC DA            push d
0125   04CD 26 01 00      mov b, 1
0126   04D0 E7            pop d
0127   04D1 11            mov a, b
0128   04D2 43            mov [d], a
0129   04D3 29 75 10      mov b, [curr_state]
0130   04D6 74            mov d, b
0131   04D7 26 02 00      mov b, 2
0132   04DA 10 3C 00      mov a, 60
0133   04DD AC            mul a, b
0134   04DE 5A            add d, b
0135   04DF 26 05 00      mov b, 5
0136   04E2 10 02 00      mov a, 2
0137   04E5 AC            mul a, b
0138   04E6 5A            add d, b
0139   04E7 DA            push d
0140   04E8 26 01 00      mov b, 1
0141   04EB E7            pop d
0142   04EC 11            mov a, b
0143   04ED 43            mov [d], a
0144   04EE F9            leave
0145   04EF 09            ret
0146   04F0             print:
0147   04F0 D2            push bp
0148   04F1 9B            mov bp, sp
0149   04F2             
0150   04F2             ; --- BEGIN INLINE ASM BLOCK
0151   04F2 17 05 00      mov a, [bp + 5]
0152   04F5 3C            mov d, a
0153   04F6 07 F2 19      call puts
0154   04F9             ; --- END INLINE ASM BLOCK
0155   04F9             
0156   04F9 F9            leave
0157   04FA 09            ret
0158   04FB             getn:
0159   04FB D2            push bp
0160   04FC 9B            mov bp, sp
0161   04FD 52 02 00      sub sp, 2 ; n
0162   0500             
0163   0500             ; --- BEGIN INLINE ASM BLOCK
0164   0500 07 F0 1A      call scan_u16d
0165   0503 45 FF FF      mov [bp + -1], a
0166   0506             ; --- END INLINE ASM BLOCK
0167   0506             
0168   0506 2C FF FF      mov b, [bp + -1] ; n
0169   0509 F9            leave
0170   050A 09            ret
0171   050B             print_game:
0172   050B D2            push bp
0173   050C 9B            mov bp, sp
0174   050D 52 02 00      sub sp, 2 ; i
0175   0510 52 02 00      sub sp, 2 ; j
0176   0513             _for2_init:
0177   0513 26 00 00      mov b, 0
0178   0516 D7            push a
0179   0517 11            mov a, b
0180   0518 45 FF FF      mov [bp + -1], a ; i
0181   051B E4            pop a
0182   051C             _for2_cond:
0183   051C 2C FF FF      mov b, [bp + -1] ; i
0184   051F D7            push a
0185   0520 11            mov a, b
0186   0521 26 1E 00      mov b, 30
0187   0524 B0            cmp a, b
0188   0525 0E            lodflgs
0189   0526 87 02         and al, %00000010 ; <
0190   0528 B9 00         cmp al, 0
0191   052A 0E            lodflgs
0192   052B 96            not al
0193   052C 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0194   052E 22 00         mov ah, 0
0195   0530 27            mov b, a
0196   0531 E4            pop a
0197   0532 C0 00 00      cmp b, 0
0198   0535 C6 BD 05      je _for2_exit
0199   0538             _for2_block:
0200   0538             _for3_init:
0201   0538 26 00 00      mov b, 0
0202   053B D7            push a
0203   053C 11            mov a, b
0204   053D 45 FD FF      mov [bp + -3], a ; j
0205   0540 E4            pop a
0206   0541             _for3_cond:
0207   0541 2C FD FF      mov b, [bp + -3] ; j
0208   0544 D7            push a
0209   0545 11            mov a, b
0210   0546 26 1E 00      mov b, 30
0211   0549 B0            cmp a, b
0212   054A 0E            lodflgs
0213   054B 87 02         and al, %00000010 ; <
0214   054D B9 00         cmp al, 0
0215   054F 0E            lodflgs
0216   0550 96            not al
0217   0551 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0218   0553 22 00         mov ah, 0
0219   0555 27            mov b, a
0220   0556 E4            pop a
0221   0557 C0 00 00      cmp b, 0
0222   055A C6 A3 05      je _for3_exit
0223   055D             _for3_block:
0224   055D             _if4_cond:
0225   055D 29 75 10      mov b, [curr_state]
0226   0560 D7            push a
0227   0561 74            mov d, b
0228   0562 2C FF FF      mov b, [bp + -1] ; i
0229   0565 10 3C 00      mov a, 60
0230   0568 AC            mul a, b
0231   0569 5A            add d, b
0232   056A 2C FD FF      mov b, [bp + -3] ; j
0233   056D 10 02 00      mov a, 2
0234   0570 AC            mul a, b
0235   0571 5A            add d, b
0236   0572 2A            mov b, [d]
0237   0573 E4            pop a
0238   0574 C0 00 00      cmp b, 0
0239   0577 C6 89 05      je _if4_else
0240   057A             _if4_true:
0241   057A 26 9E 17      mov b, _string_3
0242   057D FD AB         swp b
0243   057F D8            push b
0244   0580 07 F0 04      call print
0245   0583 51 02 00      add sp, 2
0246   0586 0A 95 05      jmp _if4_exit
0247   0589             _if4_else:
0248   0589 26 A1 17      mov b, _string_4
0249   058C FD AB         swp b
0250   058E D8            push b
0251   058F 07 F0 04      call print
0252   0592 51 02 00      add sp, 2
0253   0595             _if4_exit:
0254   0595             _for3_update:
0255   0595 2C FD FF      mov b, [bp + -3] ; j
0256   0598 FD 77         inc b
0257   059A D7            push a
0258   059B 11            mov a, b
0259   059C 45 FD FF      mov [bp + -3], a ; j
0260   059F E4            pop a
0261   05A0 0A 41 05      jmp _for3_cond
0262   05A3             _for3_exit:
0263   05A3 26 A4 17      mov b, _string_5
0264   05A6 FD AB         swp b
0265   05A8 D8            push b
0266   05A9 07 F0 04      call print
0267   05AC 51 02 00      add sp, 2
0268   05AF             _for2_update:
0269   05AF 2C FF FF      mov b, [bp + -1] ; i
0270   05B2 FD 77         inc b
0271   05B4 D7            push a
0272   05B5 11            mov a, b
0273   05B6 45 FF FF      mov [bp + -1], a ; i
0274   05B9 E4            pop a
0275   05BA 0A 1C 05      jmp _for2_cond
0276   05BD             _for2_exit:
0277   05BD F9            leave
0278   05BE 09            ret
0279   05BF             update_game:
0280   05BF D2            push bp
0281   05C0 9B            mov bp, sp
0282   05C1 52 02 00      sub sp, 2 ; i
0283   05C4 52 02 00      sub sp, 2 ; j
0284   05C7 52 02 00      sub sp, 2 ; ni
0285   05CA 52 02 00      sub sp, 2 ; nj
0286   05CD 52 02 00      sub sp, 2 ; count
0287   05D0             _for5_init:
0288   05D0 26 00 00      mov b, 0
0289   05D3 D7            push a
0290   05D4 11            mov a, b
0291   05D5 45 FF FF      mov [bp + -1], a ; i
0292   05D8 E4            pop a
0293   05D9             _for5_cond:
0294   05D9 2C FF FF      mov b, [bp + -1] ; i
0295   05DC D7            push a
0296   05DD 11            mov a, b
0297   05DE 26 1E 00      mov b, 30
0298   05E1 B0            cmp a, b
0299   05E2 0E            lodflgs
0300   05E3 87 02         and al, %00000010 ; <
0301   05E5 B9 00         cmp al, 0
0302   05E7 0E            lodflgs
0303   05E8 96            not al
0304   05E9 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0305   05EB 22 00         mov ah, 0
0306   05ED 27            mov b, a
0307   05EE E4            pop a
0308   05EF C0 00 00      cmp b, 0
0309   05F2 C6 65 06      je _for5_exit
0310   05F5             _for5_block:
0311   05F5             _for6_init:
0312   05F5 26 00 00      mov b, 0
0313   05F8 D7            push a
0314   05F9 11            mov a, b
0315   05FA 45 FD FF      mov [bp + -3], a ; j
0316   05FD E4            pop a
0317   05FE             _for6_cond:
0318   05FE 2C FD FF      mov b, [bp + -3] ; j
0319   0601 D7            push a
0320   0602 11            mov a, b
0321   0603 26 1E 00      mov b, 30
0322   0606 B0            cmp a, b
0323   0607 0E            lodflgs
0324   0608 87 02         and al, %00000010 ; <
0325   060A B9 00         cmp al, 0
0326   060C 0E            lodflgs
0327   060D 96            not al
0328   060E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0329   0610 22 00         mov ah, 0
0330   0612 27            mov b, a
0331   0613 E4            pop a
0332   0614 C0 00 00      cmp b, 0
0333   0617 C6 57 06      je _for6_exit
0334   061A             _for6_block:
0335   061A 29 7F 17      mov b, [next_state]
0336   061D 74            mov d, b
0337   061E 2C FF FF      mov b, [bp + -1] ; i
0338   0621 10 3C 00      mov a, 60
0339   0624 AC            mul a, b
0340   0625 5A            add d, b
0341   0626 2C FD FF      mov b, [bp + -3] ; j
0342   0629 10 02 00      mov a, 2
0343   062C AC            mul a, b
0344   062D 5A            add d, b
0345   062E DA            push d
0346   062F 29 75 10      mov b, [curr_state]
0347   0632 D7            push a
0348   0633 74            mov d, b
0349   0634 2C FF FF      mov b, [bp + -1] ; i
0350   0637 10 3C 00      mov a, 60
0351   063A AC            mul a, b
0352   063B 5A            add d, b
0353   063C 2C FD FF      mov b, [bp + -3] ; j
0354   063F 10 02 00      mov a, 2
0355   0642 AC            mul a, b
0356   0643 5A            add d, b
0357   0644 2A            mov b, [d]
0358   0645 E4            pop a
0359   0646 E7            pop d
0360   0647 11            mov a, b
0361   0648 43            mov [d], a
0362   0649             _for6_update:
0363   0649 2C FD FF      mov b, [bp + -3] ; j
0364   064C FD 77         inc b
0365   064E D7            push a
0366   064F 11            mov a, b
0367   0650 45 FD FF      mov [bp + -3], a ; j
0368   0653 E4            pop a
0369   0654 0A FE 05      jmp _for6_cond
0370   0657             _for6_exit:
0371   0657             _for5_update:
0372   0657 2C FF FF      mov b, [bp + -1] ; i
0373   065A FD 77         inc b
0374   065C D7            push a
0375   065D 11            mov a, b
0376   065E 45 FF FF      mov [bp + -1], a ; i
0377   0661 E4            pop a
0378   0662 0A D9 05      jmp _for5_cond
0379   0665             _for5_exit:
0380   0665             _for7_init:
0381   0665 26 01 00      mov b, 1
0382   0668 D7            push a
0383   0669 11            mov a, b
0384   066A 45 FF FF      mov [bp + -1], a ; i
0385   066D E4            pop a
0386   066E             _for7_cond:
0387   066E 2C FF FF      mov b, [bp + -1] ; i
0388   0671 D7            push a
0389   0672 11            mov a, b
0390   0673 26 1E 00      mov b, 30
0391   0676 B0            cmp a, b
0392   0677 0E            lodflgs
0393   0678 87 02         and al, %00000010 ; <
0394   067A B9 00         cmp al, 0
0395   067C 0E            lodflgs
0396   067D 96            not al
0397   067E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0398   0680 22 00         mov ah, 0
0399   0682 27            mov b, a
0400   0683 E4            pop a
0401   0684 C0 00 00      cmp b, 0
0402   0687 C6 BE 08      je _for7_exit
0403   068A             _for7_block:
0404   068A             _for8_init:
0405   068A 26 01 00      mov b, 1
0406   068D D7            push a
0407   068E 11            mov a, b
0408   068F 45 FD FF      mov [bp + -3], a ; j
0409   0692 E4            pop a
0410   0693             _for8_cond:
0411   0693 2C FD FF      mov b, [bp + -3] ; j
0412   0696 D7            push a
0413   0697 11            mov a, b
0414   0698 26 1E 00      mov b, 30
0415   069B B0            cmp a, b
0416   069C 0E            lodflgs
0417   069D 87 02         and al, %00000010 ; <
0418   069F B9 00         cmp al, 0
0419   06A1 0E            lodflgs
0420   06A2 96            not al
0421   06A3 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0422   06A5 22 00         mov ah, 0
0423   06A7 27            mov b, a
0424   06A8 E4            pop a
0425   06A9 C0 00 00      cmp b, 0
0426   06AC C6 B0 08      je _for8_exit
0427   06AF             _for8_block:
0428   06AF 26 00 00      mov b, 0
0429   06B2 D7            push a
0430   06B3 11            mov a, b
0431   06B4 45 F7 FF      mov [bp + -9], a ; count
0432   06B7 E4            pop a
0433   06B8             _for9_init:
0434   06B8 2C FF FF      mov b, [bp + -1] ; i
0435   06BB D7            push a
0436   06BC 11            mov a, b
0437   06BD 26 01 00      mov b, 1
0438   06C0 60            sub a, b
0439   06C1 27            mov b, a
0440   06C2 E4            pop a
0441   06C3 D7            push a
0442   06C4 11            mov a, b
0443   06C5 45 FB FF      mov [bp + -5], a ; ni
0444   06C8 E4            pop a
0445   06C9             _for9_cond:
0446   06C9 2C FB FF      mov b, [bp + -5] ; ni
0447   06CC D7            push a
0448   06CD 11            mov a, b
0449   06CE 2C FF FF      mov b, [bp + -1] ; i
0450   06D1 D7            push a
0451   06D2 11            mov a, b
0452   06D3 26 01 00      mov b, 1
0453   06D6 54            add a, b
0454   06D7 27            mov b, a
0455   06D8 E4            pop a
0456   06D9 B0            cmp a, b
0457   06DA 0E            lodflgs
0458   06DB 87 03         and al, %00000011 ; <=
0459   06DD B9 00         cmp al, 0
0460   06DF 0E            lodflgs
0461   06E0 96            not al
0462   06E1 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0463   06E3 22 00         mov ah, 0
0464   06E5 27            mov b, a
0465   06E6 E4            pop a
0466   06E7 C0 00 00      cmp b, 0
0467   06EA C6 EE 07      je _for9_exit
0468   06ED             _for9_block:
0469   06ED             _for10_init:
0470   06ED 2C FD FF      mov b, [bp + -3] ; j
0471   06F0 D7            push a
0472   06F1 11            mov a, b
0473   06F2 26 01 00      mov b, 1
0474   06F5 60            sub a, b
0475   06F6 27            mov b, a
0476   06F7 E4            pop a
0477   06F8 D7            push a
0478   06F9 11            mov a, b
0479   06FA 45 F9 FF      mov [bp + -7], a ; nj
0480   06FD E4            pop a
0481   06FE             _for10_cond:
0482   06FE 2C F9 FF      mov b, [bp + -7] ; nj
0483   0701 D7            push a
0484   0702 11            mov a, b
0485   0703 2C FD FF      mov b, [bp + -3] ; j
0486   0706 D7            push a
0487   0707 11            mov a, b
0488   0708 26 01 00      mov b, 1
0489   070B 54            add a, b
0490   070C 27            mov b, a
0491   070D E4            pop a
0492   070E B0            cmp a, b
0493   070F 0E            lodflgs
0494   0710 87 03         and al, %00000011 ; <=
0495   0712 B9 00         cmp al, 0
0496   0714 0E            lodflgs
0497   0715 96            not al
0498   0716 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0499   0718 22 00         mov ah, 0
0500   071A 27            mov b, a
0501   071B E4            pop a
0502   071C C0 00 00      cmp b, 0
0503   071F C6 E0 07      je _for10_exit
0504   0722             _for10_block:
0505   0722             _if11_cond:
0506   0722 2C FB FF      mov b, [bp + -5] ; ni
0507   0725 D7            push a
0508   0726 11            mov a, b
0509   0727 26 1E 00      mov b, 30
0510   072A B0            cmp a, b
0511   072B 0E            lodflgs
0512   072C 87 02         and al, %00000010 ; <
0513   072E B9 00         cmp al, 0
0514   0730 0E            lodflgs
0515   0731 96            not al
0516   0732 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0517   0734 22 00         mov ah, 0
0518   0736 27            mov b, a
0519   0737 E4            pop a
0520   0738 D7            push a
0521   0739 11            mov a, b
0522   073A AF 00 00      cmp a, 0
0523   073D 0E            lodflgs
0524   073E 96            not al
0525   073F 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0526   0741 2C F9 FF      mov b, [bp + -7] ; nj
0527   0744 D7            push a
0528   0745 11            mov a, b
0529   0746 26 1E 00      mov b, 30
0530   0749 B0            cmp a, b
0531   074A 0E            lodflgs
0532   074B 87 02         and al, %00000010 ; <
0533   074D B9 00         cmp al, 0
0534   074F 0E            lodflgs
0535   0750 96            not al
0536   0751 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0537   0753 22 00         mov ah, 0
0538   0755 27            mov b, a
0539   0756 E4            pop a
0540   0757 D7            push a
0541   0758 C0 00 00      cmp b, 0
0542   075B 0E            lodflgs
0543   075C 96            not al
0544   075D 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0545   075F 22 00         mov ah, 0
0546   0761 27            mov b, a
0547   0762 E4            pop a
0548   0763 86            and a, b
0549   0764 27            mov b, a
0550   0765 E4            pop a
0551   0766 C0 00 00      cmp b, 0
0552   0769 C6 D2 07      je _if11_exit
0553   076C             _if11_true:
0554   076C             _if12_cond:
0555   076C 2C FB FF      mov b, [bp + -5] ; ni
0556   076F D7            push a
0557   0770 11            mov a, b
0558   0771 2C FF FF      mov b, [bp + -1] ; i
0559   0774 B0            cmp a, b
0560   0775 0E            lodflgs
0561   0776 87 01         and al, %00000001
0562   0778 8F 01         xor al, %00000001 ; !=
0563   077A B9 00         cmp al, 0
0564   077C 0E            lodflgs
0565   077D 96            not al
0566   077E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0567   0780 22 00         mov ah, 0
0568   0782 27            mov b, a
0569   0783 E4            pop a
0570   0784 D7            push a
0571   0785 11            mov a, b
0572   0786 2C F9 FF      mov b, [bp + -7] ; nj
0573   0789 D7            push a
0574   078A 11            mov a, b
0575   078B 2C FD FF      mov b, [bp + -3] ; j
0576   078E B0            cmp a, b
0577   078F 0E            lodflgs
0578   0790 87 01         and al, %00000001
0579   0792 8F 01         xor al, %00000001 ; !=
0580   0794 B9 00         cmp al, 0
0581   0796 0E            lodflgs
0582   0797 96            not al
0583   0798 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0584   079A 22 00         mov ah, 0
0585   079C 27            mov b, a
0586   079D E4            pop a
0587   079E 8A            or a, b
0588   079F 27            mov b, a
0589   07A0 E4            pop a
0590   07A1 C0 00 00      cmp b, 0
0591   07A4 C6 CF 07      je _if12_exit
0592   07A7             _if12_true:
0593   07A7 2C F7 FF      mov b, [bp + -9] ; count
0594   07AA D7            push a
0595   07AB 11            mov a, b
0596   07AC 29 75 10      mov b, [curr_state]
0597   07AF D7            push a
0598   07B0 74            mov d, b
0599   07B1 2C FB FF      mov b, [bp + -5] ; ni
0600   07B4 10 3C 00      mov a, 60
0601   07B7 AC            mul a, b
0602   07B8 5A            add d, b
0603   07B9 2C F9 FF      mov b, [bp + -7] ; nj
0604   07BC 10 02 00      mov a, 2
0605   07BF AC            mul a, b
0606   07C0 5A            add d, b
0607   07C1 2A            mov b, [d]
0608   07C2 E4            pop a
0609   07C3 54            add a, b
0610   07C4 27            mov b, a
0611   07C5 E4            pop a
0612   07C6 D7            push a
0613   07C7 11            mov a, b
0614   07C8 45 F7 FF      mov [bp + -9], a ; count
0615   07CB E4            pop a
0616   07CC 0A CF 07      jmp _if12_exit
0617   07CF             _if12_exit:
0618   07CF 0A D2 07      jmp _if11_exit
0619   07D2             _if11_exit:
0620   07D2             _for10_update:
0621   07D2 2C F9 FF      mov b, [bp + -7] ; nj
0622   07D5 FD 77         inc b
0623   07D7 D7            push a
0624   07D8 11            mov a, b
0625   07D9 45 F9 FF      mov [bp + -7], a ; nj
0626   07DC E4            pop a
0627   07DD 0A FE 06      jmp _for10_cond
0628   07E0             _for10_exit:
0629   07E0             _for9_update:
0630   07E0 2C FB FF      mov b, [bp + -5] ; ni
0631   07E3 FD 77         inc b
0632   07E5 D7            push a
0633   07E6 11            mov a, b
0634   07E7 45 FB FF      mov [bp + -5], a ; ni
0635   07EA E4            pop a
0636   07EB 0A C9 06      jmp _for9_cond
0637   07EE             _for9_exit:
0638   07EE             _if13_cond:
0639   07EE 29 75 10      mov b, [curr_state]
0640   07F1 D7            push a
0641   07F2 74            mov d, b
0642   07F3 2C FF FF      mov b, [bp + -1] ; i
0643   07F6 10 3C 00      mov a, 60
0644   07F9 AC            mul a, b
0645   07FA 5A            add d, b
0646   07FB 2C FD FF      mov b, [bp + -3] ; j
0647   07FE 10 02 00      mov a, 2
0648   0801 AC            mul a, b
0649   0802 5A            add d, b
0650   0803 2A            mov b, [d]
0651   0804 E4            pop a
0652   0805 C0 00 00      cmp b, 0
0653   0808 C6 68 08      je _if13_else
0654   080B             _if13_true:
0655   080B             _if14_cond:
0656   080B 2C F7 FF      mov b, [bp + -9] ; count
0657   080E D7            push a
0658   080F 11            mov a, b
0659   0810 26 02 00      mov b, 2
0660   0813 B0            cmp a, b
0661   0814 0E            lodflgs
0662   0815 87 02         and al, %00000010 ; <
0663   0817 B9 00         cmp al, 0
0664   0819 0E            lodflgs
0665   081A 96            not al
0666   081B 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0667   081D 22 00         mov ah, 0
0668   081F 27            mov b, a
0669   0820 E4            pop a
0670   0821 D7            push a
0671   0822 11            mov a, b
0672   0823 2C F7 FF      mov b, [bp + -9] ; count
0673   0826 D7            push a
0674   0827 11            mov a, b
0675   0828 26 03 00      mov b, 3
0676   082B B0            cmp a, b
0677   082C 0E            lodflgs
0678   082D 87 03         and al, %00000011
0679   082F B9 00         cmp al, %00000000
0680   0831 0E            lodflgs
0681   0832 87 01         and al, %00000001 ; >
0682   0834 B9 00         cmp al, 0
0683   0836 0E            lodflgs
0684   0837 96            not al
0685   0838 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0686   083A 22 00         mov ah, 0
0687   083C 27            mov b, a
0688   083D E4            pop a
0689   083E 8A            or a, b
0690   083F 27            mov b, a
0691   0840 E4            pop a
0692   0841 C0 00 00      cmp b, 0
0693   0844 C6 65 08      je _if14_exit
0694   0847             _if14_true:
0695   0847 29 7F 17      mov b, [next_state]
0696   084A 74            mov d, b
0697   084B 2C FF FF      mov b, [bp + -1] ; i
0698   084E 10 3C 00      mov a, 60
0699   0851 AC            mul a, b
0700   0852 5A            add d, b
0701   0853 2C FD FF      mov b, [bp + -3] ; j
0702   0856 10 02 00      mov a, 2
0703   0859 AC            mul a, b
0704   085A 5A            add d, b
0705   085B DA            push d
0706   085C 26 00 00      mov b, 0
0707   085F E7            pop d
0708   0860 11            mov a, b
0709   0861 43            mov [d], a
0710   0862 0A 65 08      jmp _if14_exit
0711   0865             _if14_exit:
0712   0865 0A A2 08      jmp _if13_exit
0713   0868             _if13_else:
0714   0868             _if15_cond:
0715   0868 2C F7 FF      mov b, [bp + -9] ; count
0716   086B D7            push a
0717   086C 11            mov a, b
0718   086D 26 03 00      mov b, 3
0719   0870 B0            cmp a, b
0720   0871 0E            lodflgs
0721   0872 87 01         and al, %00000001 ; ==
0722   0874 B9 00         cmp al, 0
0723   0876 0E            lodflgs
0724   0877 96            not al
0725   0878 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0726   087A 22 00         mov ah, 0
0727   087C 27            mov b, a
0728   087D E4            pop a
0729   087E C0 00 00      cmp b, 0
0730   0881 C6 A2 08      je _if15_exit
0731   0884             _if15_true:
0732   0884 29 7F 17      mov b, [next_state]
0733   0887 74            mov d, b
0734   0888 2C FF FF      mov b, [bp + -1] ; i
0735   088B 10 3C 00      mov a, 60
0736   088E AC            mul a, b
0737   088F 5A            add d, b
0738   0890 2C FD FF      mov b, [bp + -3] ; j
0739   0893 10 02 00      mov a, 2
0740   0896 AC            mul a, b
0741   0897 5A            add d, b
0742   0898 DA            push d
0743   0899 26 01 00      mov b, 1
0744   089C E7            pop d
0745   089D 11            mov a, b
0746   089E 43            mov [d], a
0747   089F 0A A2 08      jmp _if15_exit
0748   08A2             _if15_exit:
0749   08A2             _if13_exit:
0750   08A2             _for8_update:
0751   08A2 2C FD FF      mov b, [bp + -3] ; j
0752   08A5 FD 77         inc b
0753   08A7 D7            push a
0754   08A8 11            mov a, b
0755   08A9 45 FD FF      mov [bp + -3], a ; j
0756   08AC E4            pop a
0757   08AD 0A 93 06      jmp _for8_cond
0758   08B0             _for8_exit:
0759   08B0             _for7_update:
0760   08B0 2C FF FF      mov b, [bp + -1] ; i
0761   08B3 FD 77         inc b
0762   08B5 D7            push a
0763   08B6 11            mov a, b
0764   08B7 45 FF FF      mov [bp + -1], a ; i
0765   08BA E4            pop a
0766   08BB 0A 6E 06      jmp _for7_cond
0767   08BE             _for7_exit:
0768   08BE             _for16_init:
0769   08BE 26 00 00      mov b, 0
0770   08C1 D7            push a
0771   08C2 11            mov a, b
0772   08C3 45 FF FF      mov [bp + -1], a ; i
0773   08C6 E4            pop a
0774   08C7             _for16_cond:
0775   08C7 2C FF FF      mov b, [bp + -1] ; i
0776   08CA D7            push a
0777   08CB 11            mov a, b
0778   08CC 26 1E 00      mov b, 30
0779   08CF B0            cmp a, b
0780   08D0 0E            lodflgs
0781   08D1 87 02         and al, %00000010 ; <
0782   08D3 B9 00         cmp al, 0
0783   08D5 0E            lodflgs
0784   08D6 96            not al
0785   08D7 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0786   08D9 22 00         mov ah, 0
0787   08DB 27            mov b, a
0788   08DC E4            pop a
0789   08DD C0 00 00      cmp b, 0
0790   08E0 C6 53 09      je _for16_exit
0791   08E3             _for16_block:
0792   08E3             _for17_init:
0793   08E3 26 00 00      mov b, 0
0794   08E6 D7            push a
0795   08E7 11            mov a, b
0796   08E8 45 FD FF      mov [bp + -3], a ; j
0797   08EB E4            pop a
0798   08EC             _for17_cond:
0799   08EC 2C FD FF      mov b, [bp + -3] ; j
0800   08EF D7            push a
0801   08F0 11            mov a, b
0802   08F1 26 1E 00      mov b, 30
0803   08F4 B0            cmp a, b
0804   08F5 0E            lodflgs
0805   08F6 87 02         and al, %00000010 ; <
0806   08F8 B9 00         cmp al, 0
0807   08FA 0E            lodflgs
0808   08FB 96            not al
0809   08FC 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0810   08FE 22 00         mov ah, 0
0811   0900 27            mov b, a
0812   0901 E4            pop a
0813   0902 C0 00 00      cmp b, 0
0814   0905 C6 45 09      je _for17_exit
0815   0908             _for17_block:
0816   0908 29 75 10      mov b, [curr_state]
0817   090B 74            mov d, b
0818   090C 2C FF FF      mov b, [bp + -1] ; i
0819   090F 10 3C 00      mov a, 60
0820   0912 AC            mul a, b
0821   0913 5A            add d, b
0822   0914 2C FD FF      mov b, [bp + -3] ; j
0823   0917 10 02 00      mov a, 2
0824   091A AC            mul a, b
0825   091B 5A            add d, b
0826   091C DA            push d
0827   091D 29 7F 17      mov b, [next_state]
0828   0920 D7            push a
0829   0921 74            mov d, b
0830   0922 2C FF FF      mov b, [bp + -1] ; i
0831   0925 10 3C 00      mov a, 60
0832   0928 AC            mul a, b
0833   0929 5A            add d, b
0834   092A 2C FD FF      mov b, [bp + -3] ; j
0835   092D 10 02 00      mov a, 2
0836   0930 AC            mul a, b
0837   0931 5A            add d, b
0838   0932 2A            mov b, [d]
0839   0933 E4            pop a
0840   0934 E7            pop d
0841   0935 11            mov a, b
0842   0936 43            mov [d], a
0843   0937             _for17_update:
0844   0937 2C FD FF      mov b, [bp + -3] ; j
0845   093A FD 77         inc b
0846   093C D7            push a
0847   093D 11            mov a, b
0848   093E 45 FD FF      mov [bp + -3], a ; j
0849   0941 E4            pop a
0850   0942 0A EC 08      jmp _for17_cond
0851   0945             _for17_exit:
0852   0945             _for16_update:
0853   0945 2C FF FF      mov b, [bp + -1] ; i
0854   0948 FD 77         inc b
0855   094A D7            push a
0856   094B 11            mov a, b
0857   094C 45 FF FF      mov [bp + -1], a ; i
0858   094F E4            pop a
0859   0950 0A C7 08      jmp _for16_cond
0860   0953             _for16_exit:
0861   0953 F9            leave
0862   0954 09            ret
0863   0955             ; --- END TEXT BLOCK
0864   0955             
0865   0955             ; --- BEGIN DATA BLOCK
0866   0955             s_data: 
0867   0955 81 17 8D 17 .dw _string_0, _string_1, 
0868   0959 00 00 00 00 .fill 16, 0
0868   095D 00 00 00 00 
0868   0961 00 00 00 00 
0868   0965 00 00 00 00 
0869   0969 55 09       s: .dw s_data
0870   096B             curr_state_data: 
0871   096B 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0871   096F 00 00 00 00 
0871   0973 00 00 00 00 
0871   0977 00 00 00 00 
0871   097B 00 00 00 00 
0871   097F 00 00 00 00 
0871   0983 00 00 00 00 
0871   0987 00 00 00 00 
0871   098B 00 00 00 00 
0871   098F 00 00 00 00 
0871   0993 00 00 00 00 
0871   0997 00 00 00 00 
0871   099B 00 00 00 00 
0871   099F 00 00 00 00 
0871   09A3 00 00 00 00 
0872   09A7 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0872   09AB 00 00 00 00 
0872   09AF 00 00 00 00 
0872   09B3 00 00 00 00 
0872   09B7 00 00 00 00 
0872   09BB 00 00 00 00 
0872   09BF 00 00 00 00 
0872   09C3 00 00 00 00 
0872   09C7 00 00 00 00 
0872   09CB 00 00 00 00 
0872   09CF 00 00 00 00 
0872   09D3 00 00 00 00 
0872   09D7 00 00 00 00 
0872   09DB 00 00 00 00 
0872   09DF 00 00 00 00 
0873   09E3 00 00 00 00 .dw 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0873   09E7 00 00 00 00 
0873   09EB 01 00 00 00 
0873   09EF 00 00 00 00 
0873   09F3 00 00 00 00 
0873   09F7 00 00 00 00 
0873   09FB 00 00 00 00 
0873   09FF 00 00 00 00 
0873   0A03 00 00 00 00 
0873   0A07 00 00 00 00 
0873   0A0B 00 00 00 00 
0873   0A0F 00 00 00 00 
0873   0A13 00 00 00 00 
0873   0A17 00 00 00 00 
0873   0A1B 00 00 00 00 
0874   0A1F 00 00 00 00 .dw 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0874   0A23 01 00 00 00 
0874   0A27 01 00 00 00 
0874   0A2B 00 00 00 00 
0874   0A2F 00 00 00 00 
0874   0A33 00 00 00 00 
0874   0A37 00 00 00 00 
0874   0A3B 00 00 00 00 
0874   0A3F 00 00 00 00 
0874   0A43 00 00 00 00 
0874   0A47 00 00 00 00 
0874   0A4B 00 00 00 00 
0874   0A4F 00 00 00 00 
0874   0A53 00 00 00 00 
0874   0A57 00 00 00 00 
0875   0A5B 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0875   0A5F 00 00 01 00 
0875   0A63 01 00 00 00 
0875   0A67 00 00 00 00 
0875   0A6B 00 00 00 00 
0875   0A6F 00 00 00 00 
0875   0A73 00 00 00 00 
0875   0A77 00 00 00 00 
0875   0A7B 00 00 00 00 
0875   0A7F 00 00 00 00 
0875   0A83 00 00 00 00 
0875   0A87 00 00 00 00 
0875   0A8B 00 00 00 00 
0875   0A8F 00 00 00 00 
0875   0A93 00 00 00 00 
0876   0A97 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0876   0A9B 00 00 00 00 
0876   0A9F 00 00 00 00 
0876   0AA3 00 00 00 00 
0876   0AA7 00 00 00 00 
0876   0AAB 00 00 00 00 
0876   0AAF 00 00 00 00 
0876   0AB3 00 00 00 00 
0876   0AB7 00 00 00 00 
0876   0ABB 00 00 00 00 
0876   0ABF 00 00 00 00 
0876   0AC3 00 00 00 00 
0876   0AC7 00 00 00 00 
0876   0ACB 00 00 00 00 
0876   0ACF 00 00 00 00 
0877   0AD3 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0877   0AD7 00 00 00 00 
0877   0ADB 00 00 00 00 
0877   0ADF 00 00 00 00 
0877   0AE3 00 00 00 00 
0877   0AE7 00 00 00 00 
0877   0AEB 00 00 00 00 
0877   0AEF 00 00 00 00 
0877   0AF3 00 00 00 00 
0877   0AF7 00 00 00 00 
0877   0AFB 00 00 00 00 
0877   0AFF 00 00 00 00 
0877   0B03 00 00 00 00 
0877   0B07 00 00 00 00 
0877   0B0B 00 00 00 00 
0878   0B0F 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0878   0B13 00 00 00 00 
0878   0B17 00 00 00 00 
0878   0B1B 00 00 00 00 
0878   0B1F 00 00 00 00 
0878   0B23 00 00 00 00 
0878   0B27 00 00 00 00 
0878   0B2B 00 00 00 00 
0878   0B2F 00 00 00 00 
0878   0B33 00 00 00 00 
0878   0B37 00 00 00 00 
0878   0B3B 00 00 00 00 
0878   0B3F 00 00 00 00 
0878   0B43 00 00 00 00 
0878   0B47 00 00 00 00 
0879   0B4B 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0879   0B4F 00 00 00 00 
0879   0B53 00 00 00 00 
0879   0B57 00 00 00 00 
0879   0B5B 00 00 00 00 
0879   0B5F 00 00 00 00 
0879   0B63 00 00 00 00 
0879   0B67 00 00 00 00 
0879   0B6B 00 00 00 00 
0879   0B6F 00 00 00 00 
0879   0B73 00 00 00 00 
0879   0B77 00 00 00 00 
0879   0B7B 00 00 00 00 
0879   0B7F 00 00 00 00 
0879   0B83 00 00 00 00 
0880   0B87 00 00       .dw 
0881   0B89 00 00 00 00 .fill 1260, 0
0881   0B8D 00 00 00 00 
0881   0B91 00 00 00 00 
0881   0B95 00 00 00 00 
0881   0B99 00 00 00 00 
0881   0B9D 00 00 00 00 
0881   0BA1 00 00 00 00 
0881   0BA5 00 00 00 00 
0881   0BA9 00 00 00 00 
0881   0BAD 00 00 00 00 
0881   0BB1 00 00 00 00 
0881   0BB5 00 00 00 00 
0881   0BB9 00 00 00 00 
0881   0BBD 00 00 00 00 
0881   0BC1 00 00 00 00 
0881   0BC5 00 00 00 00 
0881   0BC9 00 00 00 00 
0881   0BCD 00 00 00 00 
0881   0BD1 00 00 00 00 
0881   0BD5 00 00 00 00 
0881   0BD9 00 00 00 00 
0881   0BDD 00 00 00 00 
0881   0BE1 00 00 00 00 
0881   0BE5 00 00 00 00 
0881   0BE9 00 00 00 00 
0881   0BED 00 00 00 00 
0881   0BF1 00 00 00 00 
0881   0BF5 00 00 00 00 
0881   0BF9 00 00 00 00 
0881   0BFD 00 00 00 00 
0881   0C01 00 00 00 00 
0881   0C05 00 00 00 00 
0881   0C09 00 00 00 00 
0881   0C0D 00 00 00 00 
0881   0C11 00 00 00 00 
0881   0C15 00 00 00 00 
0881   0C19 00 00 00 00 
0881   0C1D 00 00 00 00 
0881   0C21 00 00 00 00 
0881   0C25 00 00 00 00 
0881   0C29 00 00 00 00 
0881   0C2D 00 00 00 00 
0881   0C31 00 00 00 00 
0881   0C35 00 00 00 00 
0881   0C39 00 00 00 00 
0881   0C3D 00 00 00 00 
0881   0C41 00 00 00 00 
0881   0C45 00 00 00 00 
0881   0C49 00 00 00 00 
0881   0C4D 00 00 00 00 
0881   0C51 00 00 00 00 
0881   0C55 00 00 00 00 
0881   0C59 00 00 00 00 
0881   0C5D 00 00 00 00 
0881   0C61 00 00 00 00 
0881   0C65 00 00 00 00 
0881   0C69 00 00 00 00 
0881   0C6D 00 00 00 00 
0881   0C71 00 00 00 00 
0881   0C75 00 00 00 00 
0881   0C79 00 00 00 00 
0881   0C7D 00 00 00 00 
0881   0C81 00 00 00 00 
0881   0C85 00 00 00 00 
0881   0C89 00 00 00 00 
0881   0C8D 00 00 00 00 
0881   0C91 00 00 00 00 
0881   0C95 00 00 00 00 
0881   0C99 00 00 00 00 
0881   0C9D 00 00 00 00 
0881   0CA1 00 00 00 00 
0881   0CA5 00 00 00 00 
0881   0CA9 00 00 00 00 
0881   0CAD 00 00 00 00 
0881   0CB1 00 00 00 00 
0881   0CB5 00 00 00 00 
0881   0CB9 00 00 00 00 
0881   0CBD 00 00 00 00 
0881   0CC1 00 00 00 00 
0881   0CC5 00 00 00 00 
0881   0CC9 00 00 00 00 
0881   0CCD 00 00 00 00 
0881   0CD1 00 00 00 00 
0881   0CD5 00 00 00 00 
0881   0CD9 00 00 00 00 
0881   0CDD 00 00 00 00 
0881   0CE1 00 00 00 00 
0881   0CE5 00 00 00 00 
0881   0CE9 00 00 00 00 
0881   0CED 00 00 00 00 
0881   0CF1 00 00 00 00 
0881   0CF5 00 00 00 00 
0881   0CF9 00 00 00 00 
0881   0CFD 00 00 00 00 
0881   0D01 00 00 00 00 
0881   0D05 00 00 00 00 
0881   0D09 00 00 00 00 
0881   0D0D 00 00 00 00 
0881   0D11 00 00 00 00 
0881   0D15 00 00 00 00 
0881   0D19 00 00 00 00 
0881   0D1D 00 00 00 00 
0881   0D21 00 00 00 00 
0881   0D25 00 00 00 00 
0881   0D29 00 00 00 00 
0881   0D2D 00 00 00 00 
0881   0D31 00 00 00 00 
0881   0D35 00 00 00 00 
0881   0D39 00 00 00 00 
0881   0D3D 00 00 00 00 
0881   0D41 00 00 00 00 
0881   0D45 00 00 00 00 
0881   0D49 00 00 00 00 
0881   0D4D 00 00 00 00 
0881   0D51 00 00 00 00 
0881   0D55 00 00 00 00 
0881   0D59 00 00 00 00 
0881   0D5D 00 00 00 00 
0881   0D61 00 00 00 00 
0881   0D65 00 00 00 00 
0881   0D69 00 00 00 00 
0881   0D6D 00 00 00 00 
0881   0D71 00 00 00 00 
0881   0D75 00 00 00 00 
0881   0D79 00 00 00 00 
0881   0D7D 00 00 00 00 
0881   0D81 00 00 00 00 
0881   0D85 00 00 00 00 
0881   0D89 00 00 00 00 
0881   0D8D 00 00 00 00 
0881   0D91 00 00 00 00 
0881   0D95 00 00 00 00 
0881   0D99 00 00 00 00 
0881   0D9D 00 00 00 00 
0881   0DA1 00 00 00 00 
0881   0DA5 00 00 00 00 
0881   0DA9 00 00 00 00 
0881   0DAD 00 00 00 00 
0881   0DB1 00 00 00 00 
0881   0DB5 00 00 00 00 
0881   0DB9 00 00 00 00 
0881   0DBD 00 00 00 00 
0881   0DC1 00 00 00 00 
0881   0DC5 00 00 00 00 
0881   0DC9 00 00 00 00 
0881   0DCD 00 00 00 00 
0881   0DD1 00 00 00 00 
0881   0DD5 00 00 00 00 
0881   0DD9 00 00 00 00 
0881   0DDD 00 00 00 00 
0881   0DE1 00 00 00 00 
0881   0DE5 00 00 00 00 
0881   0DE9 00 00 00 00 
0881   0DED 00 00 00 00 
0881   0DF1 00 00 00 00 
0881   0DF5 00 00 00 00 
0881   0DF9 00 00 00 00 
0881   0DFD 00 00 00 00 
0881   0E01 00 00 00 00 
0881   0E05 00 00 00 00 
0881   0E09 00 00 00 00 
0881   0E0D 00 00 00 00 
0881   0E11 00 00 00 00 
0881   0E15 00 00 00 00 
0881   0E19 00 00 00 00 
0881   0E1D 00 00 00 00 
0881   0E21 00 00 00 00 
0881   0E25 00 00 00 00 
0881   0E29 00 00 00 00 
0881   0E2D 00 00 00 00 
0881   0E31 00 00 00 00 
0881   0E35 00 00 00 00 
0881   0E39 00 00 00 00 
0881   0E3D 00 00 00 00 
0881   0E41 00 00 00 00 
0881   0E45 00 00 00 00 
0881   0E49 00 00 00 00 
0881   0E4D 00 00 00 00 
0881   0E51 00 00 00 00 
0881   0E55 00 00 00 00 
0881   0E59 00 00 00 00 
0881   0E5D 00 00 00 00 
0881   0E61 00 00 00 00 
0881   0E65 00 00 00 00 
0881   0E69 00 00 00 00 
0881   0E6D 00 00 00 00 
0881   0E71 00 00 00 00 
0881   0E75 00 00 00 00 
0881   0E79 00 00 00 00 
0881   0E7D 00 00 00 00 
0881   0E81 00 00 00 00 
0881   0E85 00 00 00 00 
0881   0E89 00 00 00 00 
0881   0E8D 00 00 00 00 
0881   0E91 00 00 00 00 
0881   0E95 00 00 00 00 
0881   0E99 00 00 00 00 
0881   0E9D 00 00 00 00 
0881   0EA1 00 00 00 00 
0881   0EA5 00 00 00 00 
0881   0EA9 00 00 00 00 
0881   0EAD 00 00 00 00 
0881   0EB1 00 00 00 00 
0881   0EB5 00 00 00 00 
0881   0EB9 00 00 00 00 
0881   0EBD 00 00 00 00 
0881   0EC1 00 00 00 00 
0881   0EC5 00 00 00 00 
0881   0EC9 00 00 00 00 
0881   0ECD 00 00 00 00 
0881   0ED1 00 00 00 00 
0881   0ED5 00 00 00 00 
0881   0ED9 00 00 00 00 
0881   0EDD 00 00 00 00 
0881   0EE1 00 00 00 00 
0881   0EE5 00 00 00 00 
0881   0EE9 00 00 00 00 
0881   0EED 00 00 00 00 
0881   0EF1 00 00 00 00 
0881   0EF5 00 00 00 00 
0881   0EF9 00 00 00 00 
0881   0EFD 00 00 00 00 
0881   0F01 00 00 00 00 
0881   0F05 00 00 00 00 
0881   0F09 00 00 00 00 
0881   0F0D 00 00 00 00 
0881   0F11 00 00 00 00 
0881   0F15 00 00 00 00 
0881   0F19 00 00 00 00 
0881   0F1D 00 00 00 00 
0881   0F21 00 00 00 00 
0881   0F25 00 00 00 00 
0881   0F29 00 00 00 00 
0881   0F2D 00 00 00 00 
0881   0F31 00 00 00 00 
0881   0F35 00 00 00 00 
0881   0F39 00 00 00 00 
0881   0F3D 00 00 00 00 
0881   0F41 00 00 00 00 
0881   0F45 00 00 00 00 
0881   0F49 00 00 00 00 
0881   0F4D 00 00 00 00 
0881   0F51 00 00 00 00 
0881   0F55 00 00 00 00 
0881   0F59 00 00 00 00 
0881   0F5D 00 00 00 00 
0881   0F61 00 00 00 00 
0881   0F65 00 00 00 00 
0881   0F69 00 00 00 00 
0881   0F6D 00 00 00 00 
0881   0F71 00 00 00 00 
0881   0F75 00 00 00 00 
0881   0F79 00 00 00 00 
0881   0F7D 00 00 00 00 
0881   0F81 00 00 00 00 
0881   0F85 00 00 00 00 
0881   0F89 00 00 00 00 
0881   0F8D 00 00 00 00 
0881   0F91 00 00 00 00 
0881   0F95 00 00 00 00 
0881   0F99 00 00 00 00 
0881   0F9D 00 00 00 00 
0881   0FA1 00 00 00 00 
0881   0FA5 00 00 00 00 
0881   0FA9 00 00 00 00 
0881   0FAD 00 00 00 00 
0881   0FB1 00 00 00 00 
0881   0FB5 00 00 00 00 
0881   0FB9 00 00 00 00 
0881   0FBD 00 00 00 00 
0881   0FC1 00 00 00 00 
0881   0FC5 00 00 00 00 
0881   0FC9 00 00 00 00 
0881   0FCD 00 00 00 00 
0881   0FD1 00 00 00 00 
0881   0FD5 00 00 00 00 
0881   0FD9 00 00 00 00 
0881   0FDD 00 00 00 00 
0881   0FE1 00 00 00 00 
0881   0FE5 00 00 00 00 
0881   0FE9 00 00 00 00 
0881   0FED 00 00 00 00 
0881   0FF1 00 00 00 00 
0881   0FF5 00 00 00 00 
0881   0FF9 00 00 00 00 
0881   0FFD 00 00 00 00 
0881   1001 00 00 00 00 
0881   1005 00 00 00 00 
0881   1009 00 00 00 00 
0881   100D 00 00 00 00 
0881   1011 00 00 00 00 
0881   1015 00 00 00 00 
0881   1019 00 00 00 00 
0881   101D 00 00 00 00 
0881   1021 00 00 00 00 
0881   1025 00 00 00 00 
0881   1029 00 00 00 00 
0881   102D 00 00 00 00 
0881   1031 00 00 00 00 
0881   1035 00 00 00 00 
0881   1039 00 00 00 00 
0881   103D 00 00 00 00 
0881   1041 00 00 00 00 
0881   1045 00 00 00 00 
0881   1049 00 00 00 00 
0881   104D 00 00 00 00 
0881   1051 00 00 00 00 
0881   1055 00 00 00 00 
0881   1059 00 00 00 00 
0881   105D 00 00 00 00 
0881   1061 00 00 00 00 
0881   1065 00 00 00 00 
0881   1069 00 00 00 00 
0881   106D 00 00 00 00 
0881   1071 00 00 00 00 
0882   1075 6B 09       curr_state: .dw curr_state_data
0883   1077 00 00 00 00 next_state_data: .fill 1800, 0
0883   107B 00 00 00 00 
0883   107F 00 00 00 00 
0883   1083 00 00 00 00 
0883   1087 00 00 00 00 
0883   108B 00 00 00 00 
0883   108F 00 00 00 00 
0883   1093 00 00 00 00 
0883   1097 00 00 00 00 
0883   109B 00 00 00 00 
0883   109F 00 00 00 00 
0883   10A3 00 00 00 00 
0883   10A7 00 00 00 00 
0883   10AB 00 00 00 00 
0883   10AF 00 00 00 00 
0883   10B3 00 00 00 00 
0883   10B7 00 00 00 00 
0883   10BB 00 00 00 00 
0883   10BF 00 00 00 00 
0883   10C3 00 00 00 00 
0883   10C7 00 00 00 00 
0883   10CB 00 00 00 00 
0883   10CF 00 00 00 00 
0883   10D3 00 00 00 00 
0883   10D7 00 00 00 00 
0883   10DB 00 00 00 00 
0883   10DF 00 00 00 00 
0883   10E3 00 00 00 00 
0883   10E7 00 00 00 00 
0883   10EB 00 00 00 00 
0883   10EF 00 00 00 00 
0883   10F3 00 00 00 00 
0883   10F7 00 00 00 00 
0883   10FB 00 00 00 00 
0883   10FF 00 00 00 00 
0883   1103 00 00 00 00 
0883   1107 00 00 00 00 
0883   110B 00 00 00 00 
0883   110F 00 00 00 00 
0883   1113 00 00 00 00 
0883   1117 00 00 00 00 
0883   111B 00 00 00 00 
0883   111F 00 00 00 00 
0883   1123 00 00 00 00 
0883   1127 00 00 00 00 
0883   112B 00 00 00 00 
0883   112F 00 00 00 00 
0883   1133 00 00 00 00 
0883   1137 00 00 00 00 
0883   113B 00 00 00 00 
0883   113F 00 00 00 00 
0883   1143 00 00 00 00 
0883   1147 00 00 00 00 
0883   114B 00 00 00 00 
0883   114F 00 00 00 00 
0883   1153 00 00 00 00 
0883   1157 00 00 00 00 
0883   115B 00 00 00 00 
0883   115F 00 00 00 00 
0883   1163 00 00 00 00 
0883   1167 00 00 00 00 
0883   116B 00 00 00 00 
0883   116F 00 00 00 00 
0883   1173 00 00 00 00 
0883   1177 00 00 00 00 
0883   117B 00 00 00 00 
0883   117F 00 00 00 00 
0883   1183 00 00 00 00 
0883   1187 00 00 00 00 
0883   118B 00 00 00 00 
0883   118F 00 00 00 00 
0883   1193 00 00 00 00 
0883   1197 00 00 00 00 
0883   119B 00 00 00 00 
0883   119F 00 00 00 00 
0883   11A3 00 00 00 00 
0883   11A7 00 00 00 00 
0883   11AB 00 00 00 00 
0883   11AF 00 00 00 00 
0883   11B3 00 00 00 00 
0883   11B7 00 00 00 00 
0883   11BB 00 00 00 00 
0883   11BF 00 00 00 00 
0883   11C3 00 00 00 00 
0883   11C7 00 00 00 00 
0883   11CB 00 00 00 00 
0883   11CF 00 00 00 00 
0883   11D3 00 00 00 00 
0883   11D7 00 00 00 00 
0883   11DB 00 00 00 00 
0883   11DF 00 00 00 00 
0883   11E3 00 00 00 00 
0883   11E7 00 00 00 00 
0883   11EB 00 00 00 00 
0883   11EF 00 00 00 00 
0883   11F3 00 00 00 00 
0883   11F7 00 00 00 00 
0883   11FB 00 00 00 00 
0883   11FF 00 00 00 00 
0883   1203 00 00 00 00 
0883   1207 00 00 00 00 
0883   120B 00 00 00 00 
0883   120F 00 00 00 00 
0883   1213 00 00 00 00 
0883   1217 00 00 00 00 
0883   121B 00 00 00 00 
0883   121F 00 00 00 00 
0883   1223 00 00 00 00 
0883   1227 00 00 00 00 
0883   122B 00 00 00 00 
0883   122F 00 00 00 00 
0883   1233 00 00 00 00 
0883   1237 00 00 00 00 
0883   123B 00 00 00 00 
0883   123F 00 00 00 00 
0883   1243 00 00 00 00 
0883   1247 00 00 00 00 
0883   124B 00 00 00 00 
0883   124F 00 00 00 00 
0883   1253 00 00 00 00 
0883   1257 00 00 00 00 
0883   125B 00 00 00 00 
0883   125F 00 00 00 00 
0883   1263 00 00 00 00 
0883   1267 00 00 00 00 
0883   126B 00 00 00 00 
0883   126F 00 00 00 00 
0883   1273 00 00 00 00 
0883   1277 00 00 00 00 
0883   127B 00 00 00 00 
0883   127F 00 00 00 00 
0883   1283 00 00 00 00 
0883   1287 00 00 00 00 
0883   128B 00 00 00 00 
0883   128F 00 00 00 00 
0883   1293 00 00 00 00 
0883   1297 00 00 00 00 
0883   129B 00 00 00 00 
0883   129F 00 00 00 00 
0883   12A3 00 00 00 00 
0883   12A7 00 00 00 00 
0883   12AB 00 00 00 00 
0883   12AF 00 00 00 00 
0883   12B3 00 00 00 00 
0883   12B7 00 00 00 00 
0883   12BB 00 00 00 00 
0883   12BF 00 00 00 00 
0883   12C3 00 00 00 00 
0883   12C7 00 00 00 00 
0883   12CB 00 00 00 00 
0883   12CF 00 00 00 00 
0883   12D3 00 00 00 00 
0883   12D7 00 00 00 00 
0883   12DB 00 00 00 00 
0883   12DF 00 00 00 00 
0883   12E3 00 00 00 00 
0883   12E7 00 00 00 00 
0883   12EB 00 00 00 00 
0883   12EF 00 00 00 00 
0883   12F3 00 00 00 00 
0883   12F7 00 00 00 00 
0883   12FB 00 00 00 00 
0883   12FF 00 00 00 00 
0883   1303 00 00 00 00 
0883   1307 00 00 00 00 
0883   130B 00 00 00 00 
0883   130F 00 00 00 00 
0883   1313 00 00 00 00 
0883   1317 00 00 00 00 
0883   131B 00 00 00 00 
0883   131F 00 00 00 00 
0883   1323 00 00 00 00 
0883   1327 00 00 00 00 
0883   132B 00 00 00 00 
0883   132F 00 00 00 00 
0883   1333 00 00 00 00 
0883   1337 00 00 00 00 
0883   133B 00 00 00 00 
0883   133F 00 00 00 00 
0883   1343 00 00 00 00 
0883   1347 00 00 00 00 
0883   134B 00 00 00 00 
0883   134F 00 00 00 00 
0883   1353 00 00 00 00 
0883   1357 00 00 00 00 
0883   135B 00 00 00 00 
0883   135F 00 00 00 00 
0883   1363 00 00 00 00 
0883   1367 00 00 00 00 
0883   136B 00 00 00 00 
0883   136F 00 00 00 00 
0883   1373 00 00 00 00 
0883   1377 00 00 00 00 
0883   137B 00 00 00 00 
0883   137F 00 00 00 00 
0883   1383 00 00 00 00 
0883   1387 00 00 00 00 
0883   138B 00 00 00 00 
0883   138F 00 00 00 00 
0883   1393 00 00 00 00 
0883   1397 00 00 00 00 
0883   139B 00 00 00 00 
0883   139F 00 00 00 00 
0883   13A3 00 00 00 00 
0883   13A7 00 00 00 00 
0883   13AB 00 00 00 00 
0883   13AF 00 00 00 00 
0883   13B3 00 00 00 00 
0883   13B7 00 00 00 00 
0883   13BB 00 00 00 00 
0883   13BF 00 00 00 00 
0883   13C3 00 00 00 00 
0883   13C7 00 00 00 00 
0883   13CB 00 00 00 00 
0883   13CF 00 00 00 00 
0883   13D3 00 00 00 00 
0883   13D7 00 00 00 00 
0883   13DB 00 00 00 00 
0883   13DF 00 00 00 00 
0883   13E3 00 00 00 00 
0883   13E7 00 00 00 00 
0883   13EB 00 00 00 00 
0883   13EF 00 00 00 00 
0883   13F3 00 00 00 00 
0883   13F7 00 00 00 00 
0883   13FB 00 00 00 00 
0883   13FF 00 00 00 00 
0883   1403 00 00 00 00 
0883   1407 00 00 00 00 
0883   140B 00 00 00 00 
0883   140F 00 00 00 00 
0883   1413 00 00 00 00 
0883   1417 00 00 00 00 
0883   141B 00 00 00 00 
0883   141F 00 00 00 00 
0883   1423 00 00 00 00 
0883   1427 00 00 00 00 
0883   142B 00 00 00 00 
0883   142F 00 00 00 00 
0883   1433 00 00 00 00 
0883   1437 00 00 00 00 
0883   143B 00 00 00 00 
0883   143F 00 00 00 00 
0883   1443 00 00 00 00 
0883   1447 00 00 00 00 
0883   144B 00 00 00 00 
0883   144F 00 00 00 00 
0883   1453 00 00 00 00 
0883   1457 00 00 00 00 
0883   145B 00 00 00 00 
0883   145F 00 00 00 00 
0883   1463 00 00 00 00 
0883   1467 00 00 00 00 
0883   146B 00 00 00 00 
0883   146F 00 00 00 00 
0883   1473 00 00 00 00 
0883   1477 00 00 00 00 
0883   147B 00 00 00 00 
0883   147F 00 00 00 00 
0883   1483 00 00 00 00 
0883   1487 00 00 00 00 
0883   148B 00 00 00 00 
0883   148F 00 00 00 00 
0883   1493 00 00 00 00 
0883   1497 00 00 00 00 
0883   149B 00 00 00 00 
0883   149F 00 00 00 00 
0883   14A3 00 00 00 00 
0883   14A7 00 00 00 00 
0883   14AB 00 00 00 00 
0883   14AF 00 00 00 00 
0883   14B3 00 00 00 00 
0883   14B7 00 00 00 00 
0883   14BB 00 00 00 00 
0883   14BF 00 00 00 00 
0883   14C3 00 00 00 00 
0883   14C7 00 00 00 00 
0883   14CB 00 00 00 00 
0883   14CF 00 00 00 00 
0883   14D3 00 00 00 00 
0883   14D7 00 00 00 00 
0883   14DB 00 00 00 00 
0883   14DF 00 00 00 00 
0883   14E3 00 00 00 00 
0883   14E7 00 00 00 00 
0883   14EB 00 00 00 00 
0883   14EF 00 00 00 00 
0883   14F3 00 00 00 00 
0883   14F7 00 00 00 00 
0883   14FB 00 00 00 00 
0883   14FF 00 00 00 00 
0883   1503 00 00 00 00 
0883   1507 00 00 00 00 
0883   150B 00 00 00 00 
0883   150F 00 00 00 00 
0883   1513 00 00 00 00 
0883   1517 00 00 00 00 
0883   151B 00 00 00 00 
0883   151F 00 00 00 00 
0883   1523 00 00 00 00 
0883   1527 00 00 00 00 
0883   152B 00 00 00 00 
0883   152F 00 00 00 00 
0883   1533 00 00 00 00 
0883   1537 00 00 00 00 
0883   153B 00 00 00 00 
0883   153F 00 00 00 00 
0883   1543 00 00 00 00 
0883   1547 00 00 00 00 
0883   154B 00 00 00 00 
0883   154F 00 00 00 00 
0883   1553 00 00 00 00 
0883   1557 00 00 00 00 
0883   155B 00 00 00 00 
0883   155F 00 00 00 00 
0883   1563 00 00 00 00 
0883   1567 00 00 00 00 
0883   156B 00 00 00 00 
0883   156F 00 00 00 00 
0883   1573 00 00 00 00 
0883   1577 00 00 00 00 
0883   157B 00 00 00 00 
0883   157F 00 00 00 00 
0883   1583 00 00 00 00 
0883   1587 00 00 00 00 
0883   158B 00 00 00 00 
0883   158F 00 00 00 00 
0883   1593 00 00 00 00 
0883   1597 00 00 00 00 
0883   159B 00 00 00 00 
0883   159F 00 00 00 00 
0883   15A3 00 00 00 00 
0883   15A7 00 00 00 00 
0883   15AB 00 00 00 00 
0883   15AF 00 00 00 00 
0883   15B3 00 00 00 00 
0883   15B7 00 00 00 00 
0883   15BB 00 00 00 00 
0883   15BF 00 00 00 00 
0883   15C3 00 00 00 00 
0883   15C7 00 00 00 00 
0883   15CB 00 00 00 00 
0883   15CF 00 00 00 00 
0883   15D3 00 00 00 00 
0883   15D7 00 00 00 00 
0883   15DB 00 00 00 00 
0883   15DF 00 00 00 00 
0883   15E3 00 00 00 00 
0883   15E7 00 00 00 00 
0883   15EB 00 00 00 00 
0883   15EF 00 00 00 00 
0883   15F3 00 00 00 00 
0883   15F7 00 00 00 00 
0883   15FB 00 00 00 00 
0883   15FF 00 00 00 00 
0883   1603 00 00 00 00 
0883   1607 00 00 00 00 
0883   160B 00 00 00 00 
0883   160F 00 00 00 00 
0883   1613 00 00 00 00 
0883   1617 00 00 00 00 
0883   161B 00 00 00 00 
0883   161F 00 00 00 00 
0883   1623 00 00 00 00 
0883   1627 00 00 00 00 
0883   162B 00 00 00 00 
0883   162F 00 00 00 00 
0883   1633 00 00 00 00 
0883   1637 00 00 00 00 
0883   163B 00 00 00 00 
0883   163F 00 00 00 00 
0883   1643 00 00 00 00 
0883   1647 00 00 00 00 
0883   164B 00 00 00 00 
0883   164F 00 00 00 00 
0883   1653 00 00 00 00 
0883   1657 00 00 00 00 
0883   165B 00 00 00 00 
0883   165F 00 00 00 00 
0883   1663 00 00 00 00 
0883   1667 00 00 00 00 
0883   166B 00 00 00 00 
0883   166F 00 00 00 00 
0883   1673 00 00 00 00 
0883   1677 00 00 00 00 
0883   167B 00 00 00 00 
0883   167F 00 00 00 00 
0883   1683 00 00 00 00 
0883   1687 00 00 00 00 
0883   168B 00 00 00 00 
0883   168F 00 00 00 00 
0883   1693 00 00 00 00 
0883   1697 00 00 00 00 
0883   169B 00 00 00 00 
0883   169F 00 00 00 00 
0883   16A3 00 00 00 00 
0883   16A7 00 00 00 00 
0883   16AB 00 00 00 00 
0883   16AF 00 00 00 00 
0883   16B3 00 00 00 00 
0883   16B7 00 00 00 00 
0883   16BB 00 00 00 00 
0883   16BF 00 00 00 00 
0883   16C3 00 00 00 00 
0883   16C7 00 00 00 00 
0883   16CB 00 00 00 00 
0883   16CF 00 00 00 00 
0883   16D3 00 00 00 00 
0883   16D7 00 00 00 00 
0883   16DB 00 00 00 00 
0883   16DF 00 00 00 00 
0883   16E3 00 00 00 00 
0883   16E7 00 00 00 00 
0883   16EB 00 00 00 00 
0883   16EF 00 00 00 00 
0883   16F3 00 00 00 00 
0883   16F7 00 00 00 00 
0883   16FB 00 00 00 00 
0883   16FF 00 00 00 00 
0883   1703 00 00 00 00 
0883   1707 00 00 00 00 
0883   170B 00 00 00 00 
0883   170F 00 00 00 00 
0883   1713 00 00 00 00 
0883   1717 00 00 00 00 
0883   171B 00 00 00 00 
0883   171F 00 00 00 00 
0883   1723 00 00 00 00 
0883   1727 00 00 00 00 
0883   172B 00 00 00 00 
0883   172F 00 00 00 00 
0883   1733 00 00 00 00 
0883   1737 00 00 00 00 
0883   173B 00 00 00 00 
0883   173F 00 00 00 00 
0883   1743 00 00 00 00 
0883   1747 00 00 00 00 
0883   174B 00 00 00 00 
0883   174F 00 00 00 00 
0883   1753 00 00 00 00 
0883   1757 00 00 00 00 
0883   175B 00 00 00 00 
0883   175F 00 00 00 00 
0883   1763 00 00 00 00 
0883   1767 00 00 00 00 
0883   176B 00 00 00 00 
0883   176F 00 00 00 00 
0883   1773 00 00 00 00 
0883   1777 00 00 00 00 
0883   177B 00 00 00 00 
0884   177F 77 10       next_state: .dw next_state_data
0885   1781 48 65 6C 6C _string_0: .db "Hello World", 0
0885   1785 6F 20 57 6F 
0885   1789 72 6C 64 00 
0886   178D 48 69 00    _string_1: .db "Hi", 0
0887   1790 47 65 6E 65 _string_2: .db "Generations: ", 0
0887   1794 72 61 74 69 
0887   1798 6F 6E 73 3A 
0887   179C 20 00 
0888   179E 40 20 00    _string_3: .db "@ ", 0
0889   17A1 2E 20 00    _string_4: .db ". ", 0
0890   17A4 0A 00       _string_5: .db "\n", 0
0891   17A6             ; --- END DATA BLOCK
0892   17A6             
0893   17A6             ; --- BEGIN INCLUDE BLOCK
0894   17A6             .include "lib/stdio.asm"
0001+  17A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  17A6             ; stdio.s
0003+  17A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  17A6             .include "lib/string.asm"
0001++ 17A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 17A6             ; string.s
0003++ 17A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 17A6             
0005++ 17A6             
0006++ 17A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 17A6             ; strrev
0008++ 17A6             ; reverse a string
0009++ 17A6             ; D = string address
0010++ 17A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 17A6             ; 01234
0012++ 17A6             strrev:
0013++ 17A6 4B          	pusha
0014++ 17A7 07 ED 17    	call strlen	; length in C
0015++ 17AA 12          	mov a, c
0016++ 17AB AF 01 00    	cmp a, 1
0017++ 17AE D0 C8 17    	jleu strrev_end	; check string length. string len must be > 1
0018++ 17B1 7D          	dec a
0019++ 17B2 FD 4E       	mov si, d	; beginning of string
0020++ 17B4 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 17B6 59          	add d, a	; end of string
0022++ 17B7 12          	mov a, c
0023++ 17B8 FD 9B       	shr a		; divide by 2
0024++ 17BA 39          	mov c, a	; C now counts the steps
0025++ 17BB             strrev_L0:
0026++ 17BB 32          	mov bl, [d]	; save load right-side char into BL
0027++ 17BC F6          	lodsb		; load left-side char into AL; increase SI
0028++ 17BD 3E          	mov [d], al	; store left char into right side
0029++ 17BE 1B          	mov al, bl
0030++ 17BF F7          	stosb		; store right-side char into left-side; increase DI
0031++ 17C0 7E          	dec c
0032++ 17C1 7F          	dec d
0033++ 17C2 C2 00 00    	cmp c, 0
0034++ 17C5 C7 BB 17    	jne strrev_L0
0035++ 17C8             strrev_end:
0036++ 17C8 4C          	popa
0037++ 17C9 09          	ret
0038++ 17CA             	
0039++ 17CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 17CA             ; strchr
0041++ 17CA             ; search string in D for char in AL
0042++ 17CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 17CA             strchr:
0044++ 17CA             strchr_L0:
0045++ 17CA 32          	mov bl, [d]
0046++ 17CB C1 00       	cmp bl, 0
0047++ 17CD C6 D8 17    	je strchr_end
0048++ 17D0 BA          	cmp al, bl
0049++ 17D1 C6 D8 17    	je strchr_end
0050++ 17D4 79          	inc d
0051++ 17D5 0A CA 17    	jmp strchr_L0
0052++ 17D8             strchr_end:
0053++ 17D8 1B          	mov al, bl
0054++ 17D9 09          	ret
0055++ 17DA             
0056++ 17DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 17DA             ; strstr
0058++ 17DA             ; find sub-string
0059++ 17DA             ; str1 in SI
0060++ 17DA             ; str2 in DI
0061++ 17DA             ; SI points to end of source string
0062++ 17DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 17DA             strstr:
0064++ 17DA DB          	push al
0065++ 17DB DA          	push d
0066++ 17DC E3          	push di
0067++ 17DD             strstr_loop:
0068++ 17DD F3          	cmpsb					; compare a byte of the strings
0069++ 17DE C7 E9 17    	jne strstr_ret
0070++ 17E1 FC 00 00    	lea d, [di + 0]
0071++ 17E4 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 17E6 C7 DD 17    	jne strstr_loop				; equal chars but not at end
0073++ 17E9             strstr_ret:
0074++ 17E9 F0          	pop di
0075++ 17EA E7          	pop d
0076++ 17EB E8          	pop al
0077++ 17EC 09          	ret
0078++ 17ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 17ED             ; length of null terminated string
0080++ 17ED             ; result in C
0081++ 17ED             ; pointer in D
0082++ 17ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 17ED             strlen:
0084++ 17ED DA          	push d
0085++ 17EE 38 00 00    	mov c, 0
0086++ 17F1             strlen_L1:
0087++ 17F1 BD 00       	cmp byte [d], 0
0088++ 17F3 C6 FB 17    	je strlen_ret
0089++ 17F6 79          	inc d
0090++ 17F7 78          	inc c
0091++ 17F8 0A F1 17    	jmp strlen_L1
0092++ 17FB             strlen_ret:
0093++ 17FB E7          	pop d
0094++ 17FC 09          	ret
0095++ 17FD             
0096++ 17FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 17FD             ; STRCMP
0098++ 17FD             ; compare two strings
0099++ 17FD             ; str1 in SI
0100++ 17FD             ; str2 in DI
0101++ 17FD             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 17FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 17FD             strcmp:
0104++ 17FD DB          	push al
0105++ 17FE DA          	push d
0106++ 17FF E3          	push di
0107++ 1800 E2          	push si
0108++ 1801             strcmp_loop:
0109++ 1801 F3          	cmpsb					; compare a byte of the strings
0110++ 1802 C7 0D 18    	jne strcmp_ret
0111++ 1805 FB FF FF    	lea d, [si +- 1]
0112++ 1808 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 180A C7 01 18    	jne strcmp_loop				; equal chars but not at end
0114++ 180D             strcmp_ret:
0115++ 180D EF          	pop si
0116++ 180E F0          	pop di
0117++ 180F E7          	pop d
0118++ 1810 E8          	pop al
0119++ 1811 09          	ret
0120++ 1812             
0121++ 1812             
0122++ 1812             ; STRCPY
0123++ 1812             ; copy null terminated string from SI to DI
0124++ 1812             ; source in SI
0125++ 1812             ; destination in DI
0126++ 1812             strcpy:
0127++ 1812 E2          	push si
0128++ 1813 E3          	push di
0129++ 1814 DB          	push al
0130++ 1815             strcpy_L1:
0131++ 1815 F6          	lodsb
0132++ 1816 F7          	stosb
0133++ 1817 B9 00       	cmp al, 0
0134++ 1819 C7 15 18    	jne strcpy_L1
0135++ 181C             strcpy_end:
0136++ 181C E8          	pop al
0137++ 181D F0          	pop di
0138++ 181E EF          	pop si
0139++ 181F 09          	ret
0140++ 1820             
0141++ 1820             ; STRCAT
0142++ 1820             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1820             ; source in SI
0144++ 1820             ; destination in DI
0145++ 1820             strcat:
0146++ 1820 E2          	push si
0147++ 1821 E3          	push di
0148++ 1822 D7          	push a
0149++ 1823 DA          	push d
0150++ 1824 50          	mov a, di
0151++ 1825 3C          	mov d, a
0152++ 1826             strcat_goto_end_L1:
0153++ 1826 BD 00       	cmp byte[d], 0
0154++ 1828 C6 2F 18    	je strcat_start
0155++ 182B 79          	inc d
0156++ 182C 0A 26 18    	jmp strcat_goto_end_L1
0157++ 182F             strcat_start:
0158++ 182F FD 50       	mov di, d
0159++ 1831             strcat_L1:
0160++ 1831 F6          	lodsb
0161++ 1832 F7          	stosb
0162++ 1833 B9 00       	cmp al, 0
0163++ 1835 C7 31 18    	jne strcat_L1
0164++ 1838             strcat_end:
0165++ 1838 E7          	pop d
0166++ 1839 E4          	pop a
0167++ 183A F0          	pop di
0168++ 183B EF          	pop si
0169++ 183C 09          	ret
0005+  183D             
0006+  183D 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  1841 34 35 36 37 
0006+  1845 38 39 41 42 
0006+  1849 43 44 45 46 
0007+  184D 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  1851 1B 5B 48 00 
0008+  1855             
0009+  1855 01 00       table_power:.dw 1
0010+  1857 0A 00       			.dw 10
0011+  1859 64 00       			.dw 100
0012+  185B E8 03       			.dw 1000
0013+  185D 10 27       			.dw 10000
0014+  185F             
0015+  185F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  185F             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  185F             ; ASCII in BL
0018+  185F             ; result in AL
0019+  185F             ; ascii for F = 0100 0110
0020+  185F             ; ascii for 9 = 0011 1001
0021+  185F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  185F             hex_ascii_encode:
0023+  185F 1B          	mov al, bl
0024+  1860 93 40       	test al, $40				; test if letter or number
0025+  1862 C7 68 18    	jnz hex_letter
0026+  1865 87 0F       	and al, $0F				; get number
0027+  1867 09          	ret
0028+  1868             hex_letter:
0029+  1868 87 0F       	and al, $0F				; get letter
0030+  186A 6A 09       	add al, 9
0031+  186C 09          	ret
0032+  186D             
0033+  186D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  186D             ; ATOI
0035+  186D             ; 2 letter hex string in B
0036+  186D             ; 8bit integer returned in AL
0037+  186D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  186D             atoi:
0039+  186D D8          	push b
0040+  186E 07 5F 18    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  1871 30          	mov bl, bh
0042+  1872 DB          	push al					; save a
0043+  1873 07 5F 18    	call hex_ascii_encode
0044+  1876 EA          	pop bl	
0045+  1877 FD 9E 04    	shl al, 4
0046+  187A 8C          	or al, bl
0047+  187B E5          	pop b
0048+  187C 09          	ret	
0049+  187D             
0050+  187D             
0051+  187D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  187D             ; printf
0053+  187D             ; no need for explanations!
0054+  187D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  187D             printf:
0056+  187D 09          	ret
0057+  187E             
0058+  187E             
0059+  187E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  187E             ; scanf
0061+  187E             ; no need for explanations!
0062+  187E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  187E             scanf:
0064+  187E 09          	ret
0065+  187F             
0066+  187F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  187F             ; ITOA
0068+  187F             ; 8bit value in BL
0069+  187F             ; 2 byte ASCII result in A
0070+  187F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  187F             itoa:
0072+  187F DA          	push d
0073+  1880 D8          	push b
0074+  1881 A7 00       	mov bh, 0
0075+  1883 FD A4 04    	shr bl, 4	
0076+  1886 74          	mov d, b
0077+  1887 1F 3D 18    	mov al, [d + s_hex_digits]
0078+  188A 23          	mov ah, al
0079+  188B             	
0080+  188B E5          	pop b
0081+  188C D8          	push b
0082+  188D A7 00       	mov bh, 0
0083+  188F FD 87 0F    	and bl, $0F
0084+  1892 74          	mov d, b
0085+  1893 1F 3D 18    	mov al, [d + s_hex_digits]
0086+  1896 E5          	pop b
0087+  1897 E7          	pop d
0088+  1898 09          	ret
0089+  1899             
0090+  1899             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  1899             ; HEX STRING TO BINARY
0092+  1899             ; di = destination address
0093+  1899             ; si = source
0094+  1899             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  1899             hex_to_int:
0096+  1899             hex_to_int_L1:
0097+  1899 F6          	lodsb					; load from [SI] to AL
0098+  189A B9 00       	cmp al, 0				; check if ASCII 0
0099+  189C C6 A9 18    	jz hex_to_int_ret
0100+  189F 36          	mov bh, al
0101+  18A0 F6          	lodsb
0102+  18A1 2F          	mov bl, al
0103+  18A2 07 6D 18    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  18A5 F7          	stosb					; store AL to [DI]
0105+  18A6 0A 99 18    	jmp hex_to_int_L1
0106+  18A9             hex_to_int_ret:
0107+  18A9 09          	ret		
0108+  18AA             
0109+  18AA             
0110+  18AA             
0111+  18AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  18AA             ; GETCHAR
0113+  18AA             ; char in ah
0114+  18AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  18AA             getchar:
0116+  18AA DB          	push al
0117+  18AB             getchar_retry:
0118+  18AB FD 0C       	sti
0119+  18AD 19 01       	mov al, 1
0120+  18AF 05 03       	syscall sys_io			; receive in AH
0121+  18B1 B9 00       	cmp al, 0			; check if any char was receive
0122+  18B3 C6 AB 18    	je getchar_retry
0123+  18B6 E8          	pop al
0124+  18B7 09          	ret
0125+  18B8             
0126+  18B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  18B8             ; PUTCHAR
0128+  18B8             ; char in ah
0129+  18B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  18B8             putchar:
0131+  18B8 D7          	push a
0132+  18B9 19 00       	mov al, 0
0133+  18BB 05 03       	syscall sys_io			; char in AH
0134+  18BD E4          	pop a
0135+  18BE 09          	ret
0136+  18BF             
0137+  18BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  18BF             ;; INPUT A STRING
0139+  18BF             ;; terminates with null
0140+  18BF             ;; pointer in D
0141+  18BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  18BF             gets:
0143+  18BF D7          	push a
0144+  18C0 DA          	push d
0145+  18C1             gets_loop:
0146+  18C1 FD 0C       	sti
0147+  18C3 19 01       	mov al, 1
0148+  18C5 05 03       	syscall sys_io			; receive in AH
0149+  18C7 B9 00       	cmp al, 0				; check error code (AL)
0150+  18C9 C6 C1 18    	je gets_loop			; if no char received, retry
0151+  18CC             
0152+  18CC 76 1B       	cmp ah, 27
0153+  18CE C6 EF 18    	je gets_telnet_escape
0154+  18D1 76 0A       	cmp ah, $0A				; LF
0155+  18D3 C6 48 19    	je gets_end
0156+  18D6 76 0D       	cmp ah, $0D				; CR
0157+  18D8 C6 48 19    	je gets_end
0158+  18DB 76 5C       	cmp ah, $5C				; '\\'
0159+  18DD C6 1F 19    	je gets_escape
0160+  18E0             	
0161+  18E0 76 08       	cmp ah, $08			; check for backspace
0162+  18E2 C6 EB 18    	je gets_backspace
0163+  18E5             
0164+  18E5 1A          	mov al, ah
0165+  18E6 3E          	mov [d], al
0166+  18E7 79          	inc d
0167+  18E8 0A C1 18    	jmp gets_loop
0168+  18EB             gets_backspace:
0169+  18EB 7F          	dec d
0170+  18EC 0A C1 18    	jmp gets_loop
0171+  18EF             gets_telnet_escape:
0172+  18EF FD 0C       	sti
0173+  18F1 19 01       	mov al, 1
0174+  18F3 05 03       	syscall sys_io				; receive in AH without echo
0175+  18F5 B9 00       	cmp al, 0					; check error code (AL)
0176+  18F7 C6 EF 18    	je gets_telnet_escape		; if no char received, retry
0177+  18FA 76 5B       	cmp ah, '['
0178+  18FC C7 C1 18    	jne gets_loop
0179+  18FF             gets_telnet_escape_phase2:
0180+  18FF FD 0C       	sti
0181+  1901 19 01       	mov al, 1
0182+  1903 05 03       	syscall sys_io					; receive in AH without echo
0183+  1905 B9 00       	cmp al, 0						; check error code (AL)
0184+  1907 C6 FF 18    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  190A 76 44       	cmp ah, 'D'
0186+  190C C6 17 19    	je gets_left_arrow
0187+  190F 76 43       	cmp ah, 'C'
0188+  1911 C6 1B 19    	je gets_right_arrow
0189+  1914 0A C1 18    	jmp gets_loop
0190+  1917             gets_left_arrow:
0191+  1917 7F          	dec d
0192+  1918 0A C1 18    	jmp gets_loop
0193+  191B             gets_right_arrow:
0194+  191B 79          	inc d
0195+  191C 0A C1 18    	jmp gets_loop
0196+  191F             gets_escape:
0197+  191F FD 0C       	sti
0198+  1921 19 01       	mov al, 1
0199+  1923 05 03       	syscall sys_io			; receive in AH
0200+  1925 B9 00       	cmp al, 0				; check error code (AL)
0201+  1927 C6 1F 19    	je gets_escape			; if no char received, retry
0202+  192A 76 6E       	cmp ah, 'n'
0203+  192C C6 3A 19    	je gets_LF
0204+  192F 76 72       	cmp ah, 'r'
0205+  1931 C6 41 19    	je gets_CR
0206+  1934 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  1935 3E          	mov [d], al
0208+  1936 79          	inc d
0209+  1937 0A C1 18    	jmp gets_loop
0210+  193A             gets_LF:
0211+  193A 19 0A       	mov al, $0A
0212+  193C 3E          	mov [d], al
0213+  193D 79          	inc d
0214+  193E 0A C1 18    	jmp gets_loop
0215+  1941             gets_CR:
0216+  1941 19 0D       	mov al, $0D
0217+  1943 3E          	mov [d], al
0218+  1944 79          	inc d
0219+  1945 0A C1 18    	jmp gets_loop
0220+  1948             gets_end:
0221+  1948 19 00       	mov al, 0
0222+  194A 3E          	mov [d], al				; terminate string
0223+  194B E7          	pop d
0224+  194C E4          	pop a
0225+  194D 09          	ret
0226+  194E             
0227+  194E             
0228+  194E             
0229+  194E             
0230+  194E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  194E             ;; INPUT TEXT
0232+  194E             ;; terminated with CTRL+D
0233+  194E             ;; pointer in D
0234+  194E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  194E             gettxt:
0236+  194E D7          	push a
0237+  194F DA          	push d
0238+  1950             gettxt_loop:
0239+  1950 19 01       	mov al, 1
0240+  1952 05 03       	syscall sys_io			; receive in AH
0241+  1954 B9 00       	cmp al, 0				; check error code (AL)
0242+  1956 C6 50 19    	je gettxt_loop		; if no char received, retry
0243+  1959 76 04       	cmp ah, 4			; EOT
0244+  195B C6 99 19    	je gettxt_end
0245+  195E 76 08       	cmp ah, $08			; check for backspace
0246+  1960 C6 95 19    	je gettxt_backspace
0247+  1963 76 5C       	cmp ah, $5C				; '\\'
0248+  1965 C6 6E 19    	je gettxt_escape
0249+  1968 1A          	mov al, ah
0250+  1969 3E          	mov [d], al
0251+  196A 79          	inc d
0252+  196B 0A 50 19    	jmp gettxt_loop
0253+  196E             gettxt_escape:
0254+  196E 19 01       	mov al, 1
0255+  1970 05 03       	syscall sys_io			; receive in AH
0256+  1972 B9 00       	cmp al, 0				; check error code (AL)
0257+  1974 C6 6E 19    	je gettxt_escape		; if no char received, retry
0258+  1977 76 6E       	cmp ah, 'n'
0259+  1979 C6 87 19    	je gettxt_LF
0260+  197C 76 72       	cmp ah, 'r'
0261+  197E C6 8E 19    	je gettxt_CR
0262+  1981 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  1982 3E          	mov [d], al
0264+  1983 79          	inc d
0265+  1984 0A 50 19    	jmp gettxt_loop
0266+  1987             gettxt_LF:
0267+  1987 19 0A       	mov al, $0A
0268+  1989 3E          	mov [d], al
0269+  198A 79          	inc d
0270+  198B 0A 50 19    	jmp gettxt_loop
0271+  198E             gettxt_CR:
0272+  198E 19 0D       	mov al, $0D
0273+  1990 3E          	mov [d], al
0274+  1991 79          	inc d
0275+  1992 0A 50 19    	jmp gettxt_loop
0276+  1995             gettxt_backspace:
0277+  1995 7F          	dec d
0278+  1996 0A 50 19    	jmp gettxt_loop
0279+  1999             gettxt_end:
0280+  1999 19 00       	mov al, 0
0281+  199B 3E          	mov [d], al				; terminate string
0282+  199C E7          	pop d
0283+  199D E4          	pop a
0284+  199E 09          	ret
0285+  199F             
0286+  199F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  199F             ; PRINT NEW LINE
0288+  199F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  199F             printnl:
0290+  199F D7          	push a
0291+  19A0 10 00 0A    	mov a, $0A00
0292+  19A3 05 03       	syscall sys_io
0293+  19A5 10 00 0D    	mov a, $0D00
0294+  19A8 05 03       	syscall sys_io
0295+  19AA E4          	pop a
0296+  19AB 09          	ret
0297+  19AC             
0298+  19AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  19AC             ; strtoint
0300+  19AC             ; 4 digit hex string number in d
0301+  19AC             ; integer returned in A
0302+  19AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  19AC             strtointx:
0304+  19AC D8          	push b
0305+  19AD 32          	mov bl, [d]
0306+  19AE 37          	mov bh, bl
0307+  19AF 33 01 00    	mov bl, [d + 1]
0308+  19B2 07 6D 18    	call atoi				; convert to int in AL
0309+  19B5 23          	mov ah, al				; move to AH
0310+  19B6 33 02 00    	mov bl, [d + 2]
0311+  19B9 37          	mov bh, bl
0312+  19BA 33 03 00    	mov bl, [d + 3]
0313+  19BD 07 6D 18    	call atoi				; convert to int in AL
0314+  19C0 E5          	pop b
0315+  19C1 09          	ret
0316+  19C2             
0317+  19C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  19C2             ; strtoint
0319+  19C2             ; 5 digit base10 string number in d
0320+  19C2             ; integer returned in A
0321+  19C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  19C2             strtoint:
0323+  19C2 E2          	push si
0324+  19C3 D8          	push b
0325+  19C4 D9          	push c
0326+  19C5 DA          	push d
0327+  19C6 07 ED 17    	call strlen			; get string length in C
0328+  19C9 7E          	dec c
0329+  19CA FD 4E       	mov si, d
0330+  19CC 12          	mov a, c
0331+  19CD FD 99       	shl a
0332+  19CF 3B 55 18    	mov d, table_power
0333+  19D2 59          	add d, a
0334+  19D3 38 00 00    	mov c, 0
0335+  19D6             strtoint_L0:
0336+  19D6 F6          	lodsb			; load ASCII to al
0337+  19D7 B9 00       	cmp al, 0
0338+  19D9 C6 EC 19    	je strtoint_end
0339+  19DC 6F 30       	sub al, $30		; make into integer
0340+  19DE 22 00       	mov ah, 0
0341+  19E0 2A          	mov b, [d]
0342+  19E1 AC          	mul a, b			; result in B since it fits in 16bits
0343+  19E2 11          	mov a, b
0344+  19E3 28          	mov b, c
0345+  19E4 54          	add a, b
0346+  19E5 39          	mov c, a
0347+  19E6 63 02 00    	sub d, 2
0348+  19E9 0A D6 19    	jmp strtoint_L0
0349+  19EC             strtoint_end:
0350+  19EC 12          	mov a, c
0351+  19ED E7          	pop d
0352+  19EE E6          	pop c
0353+  19EF E5          	pop b
0354+  19F0 EF          	pop si
0355+  19F1 09          	ret
0356+  19F2             
0357+  19F2             
0358+  19F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  19F2             ; PRINT NULL TERMINATED STRING
0360+  19F2             ; pointer in D
0361+  19F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  19F2             puts:
0363+  19F2 D7          	push a
0364+  19F3 DA          	push d
0365+  19F4             puts_L1:
0366+  19F4 1E          	mov al, [d]
0367+  19F5 B9 00       	cmp al, 0
0368+  19F7 C6 03 1A    	jz puts_END
0369+  19FA 23          	mov ah, al
0370+  19FB 19 00       	mov al, 0
0371+  19FD 05 03       	syscall sys_io
0372+  19FF 79          	inc d
0373+  1A00 0A F4 19    	jmp puts_L1
0374+  1A03             puts_END:
0375+  1A03 E7          	pop d
0376+  1A04 E4          	pop a
0377+  1A05 09          	ret
0378+  1A06             
0379+  1A06             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  1A06             ; PRINT N SIZE STRING
0381+  1A06             ; pointer in D
0382+  1A06             ; size in C
0383+  1A06             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  1A06             putsn:
0385+  1A06 DB          	push al
0386+  1A07 DA          	push d
0387+  1A08 D9          	push c
0388+  1A09             putsn_L0:
0389+  1A09 1E          	mov al, [d]
0390+  1A0A 23          	mov ah, al
0391+  1A0B 19 00       	mov al, 0
0392+  1A0D 05 03       	syscall sys_io
0393+  1A0F 79          	inc d
0394+  1A10 7E          	dec c	
0395+  1A11 C2 00 00    	cmp c, 0
0396+  1A14 C7 09 1A    	jne putsn_L0
0397+  1A17             putsn_end:
0398+  1A17 E6          	pop c
0399+  1A18 E7          	pop d
0400+  1A19 E8          	pop al
0401+  1A1A 09          	ret
0402+  1A1B             
0403+  1A1B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  1A1B             ; print 16bit decimal number
0405+  1A1B             ; input number in A
0406+  1A1B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  1A1B             print_u16d:
0408+  1A1B D7          	push a
0409+  1A1C D8          	push b
0410+  1A1D 26 10 27    	mov b, 10000
0411+  1A20 AE          	div a, b			; get 10000 coeff.
0412+  1A21 07 47 1A    	call print_number
0413+  1A24 11          	mov a, b
0414+  1A25 26 E8 03    	mov b, 1000
0415+  1A28 AE          	div a, b			; get 10000 coeff.
0416+  1A29 07 47 1A    	call print_number
0417+  1A2C 11          	mov a, b
0418+  1A2D 26 64 00    	mov b, 100
0419+  1A30 AE          	div a, b
0420+  1A31 07 47 1A    	call print_number
0421+  1A34 11          	mov a, b
0422+  1A35 26 0A 00    	mov b, 10
0423+  1A38 AE          	div a, b
0424+  1A39 07 47 1A    	call print_number
0425+  1A3C 11          	mov a, b
0426+  1A3D 6A 30       	add al, $30
0427+  1A3F 23          	mov ah, al
0428+  1A40 19 00       	mov al, 0
0429+  1A42 05 03       	syscall sys_io	; print coeff
0430+  1A44 E5          	pop b
0431+  1A45 E4          	pop a
0432+  1A46 09          	ret
0433+  1A47             
0434+  1A47             
0435+  1A47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  1A47             ; if A == 0, print space
0437+  1A47             ; else print A
0438+  1A47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  1A47             print_number:
0440+  1A47 6A 30       	add al, $30
0441+  1A49 23          	mov ah, al
0442+  1A4A 07 B8 18    	call putchar
0443+  1A4D 09          	ret
0444+  1A4E             
0445+  1A4E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  1A4E             ; PRINT 16BIT HEX INTEGER
0447+  1A4E             ; integer value in reg B
0448+  1A4E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  1A4E             print_u16x:
0450+  1A4E D7          	push a
0451+  1A4F D8          	push b
0452+  1A50 DD          	push bl
0453+  1A51 30          	mov bl, bh
0454+  1A52 07 7F 18    	call itoa				; convert bh to char in A
0455+  1A55 2F          	mov bl, al				; save al
0456+  1A56 19 00       	mov al, 0
0457+  1A58 05 03       	syscall sys_io				; display AH
0458+  1A5A 24          	mov ah, bl				; retrieve al
0459+  1A5B 19 00       	mov al, 0
0460+  1A5D 05 03       	syscall sys_io				; display AL
0461+  1A5F             
0462+  1A5F EA          	pop bl
0463+  1A60 07 7F 18    	call itoa				; convert bh to char in A
0464+  1A63 2F          	mov bl, al				; save al
0465+  1A64 19 00       	mov al, 0
0466+  1A66 05 03       	syscall sys_io				; display AH
0467+  1A68 24          	mov ah, bl				; retrieve al
0468+  1A69 19 00       	mov al, 0
0469+  1A6B 05 03       	syscall sys_io				; display AL
0470+  1A6D             
0471+  1A6D E5          	pop b
0472+  1A6E E4          	pop a
0473+  1A6F 09          	ret
0474+  1A70             
0475+  1A70             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  1A70             ; INPUT 16BIT HEX INTEGER
0477+  1A70             ; read 16bit integer into A
0478+  1A70             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  1A70             scan_u16x:
0480+  1A70 F8 10 00    	enter 16
0481+  1A73 D8          	push b
0482+  1A74 DA          	push d
0483+  1A75             
0484+  1A75 FA F1 FF    	lea d, [bp + -15]
0485+  1A78 07 BF 18    	call gets				; get number
0486+  1A7B             
0487+  1A7B 32          	mov bl, [d]
0488+  1A7C 37          	mov bh, bl
0489+  1A7D 33 01 00    	mov bl, [d + 1]
0490+  1A80 07 6D 18    	call atoi				; convert to int in AL
0491+  1A83 23          	mov ah, al				; move to AH
0492+  1A84             
0493+  1A84 33 02 00    	mov bl, [d + 2]
0494+  1A87 37          	mov bh, bl
0495+  1A88 33 03 00    	mov bl, [d + 3]
0496+  1A8B 07 6D 18    	call atoi				; convert to int in AL
0497+  1A8E             
0498+  1A8E E7          	pop d
0499+  1A8F E5          	pop b
0500+  1A90 F9          	leave
0501+  1A91 09          	ret
0502+  1A92             
0503+  1A92             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  1A92             ; PRINT 8bit HEX INTEGER
0505+  1A92             ; integer value in reg bl
0506+  1A92             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  1A92             print_u8x:
0508+  1A92 D7          	push a
0509+  1A93 DD          	push bl
0510+  1A94             
0511+  1A94 07 7F 18    	call itoa				; convert bl to char in A
0512+  1A97 2F          	mov bl, al				; save al
0513+  1A98 19 00       	mov al, 0
0514+  1A9A 05 03       	syscall sys_io				; display AH
0515+  1A9C 24          	mov ah, bl				; retrieve al
0516+  1A9D 19 00       	mov al, 0
0517+  1A9F 05 03       	syscall sys_io				; display AL
0518+  1AA1             
0519+  1AA1 EA          	pop bl
0520+  1AA2 E4          	pop a
0521+  1AA3 09          	ret
0522+  1AA4             
0523+  1AA4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  1AA4             ; print 8bit decimal unsigned number
0525+  1AA4             ; input number in AL
0526+  1AA4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  1AA4             print_u8d:
0528+  1AA4 D7          	push a
0529+  1AA5 D8          	push b
0530+  1AA6             
0531+  1AA6 22 00       	mov ah, 0
0532+  1AA8 26 64 00    	mov b, 100
0533+  1AAB AE          	div a, b
0534+  1AAC D8          	push b			; save remainder
0535+  1AAD B9 00       	cmp al, 0
0536+  1AAF C6 B9 1A    	je skip100
0537+  1AB2 6A 30       	add al, $30
0538+  1AB4 23          	mov ah, al
0539+  1AB5 19 00       	mov al, 0
0540+  1AB7 05 03       	syscall sys_io	; print coeff
0541+  1AB9             skip100:
0542+  1AB9 E4          	pop a
0543+  1ABA 22 00       	mov ah, 0
0544+  1ABC 26 0A 00    	mov b, 10
0545+  1ABF AE          	div a, b
0546+  1AC0 D8          	push b			; save remainder
0547+  1AC1 B9 00       	cmp al, 0
0548+  1AC3 C6 CD 1A    	je skip10
0549+  1AC6 6A 30       	add al, $30
0550+  1AC8 23          	mov ah, al
0551+  1AC9 19 00       	mov al, 0
0552+  1ACB 05 03       	syscall sys_io	; print coeff
0553+  1ACD             skip10:
0554+  1ACD E4          	pop a
0555+  1ACE 1B          	mov al, bl
0556+  1ACF 6A 30       	add al, $30
0557+  1AD1 23          	mov ah, al
0558+  1AD2 19 00       	mov al, 0
0559+  1AD4 05 03       	syscall sys_io	; print coeff
0560+  1AD6 E5          	pop b
0561+  1AD7 E4          	pop a
0562+  1AD8 09          	ret
0563+  1AD9             
0564+  1AD9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  1AD9             ; INPUT 8BIT HEX INTEGER
0566+  1AD9             ; read 8bit integer into AL
0567+  1AD9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  1AD9             scan_u8x:
0569+  1AD9 F8 04 00    	enter 4
0570+  1ADC D8          	push b
0571+  1ADD DA          	push d
0572+  1ADE             
0573+  1ADE FA FD FF    	lea d, [bp + -3]
0574+  1AE1 07 BF 18    	call gets				; get number
0575+  1AE4             
0576+  1AE4 32          	mov bl, [d]
0577+  1AE5 37          	mov bh, bl
0578+  1AE6 33 01 00    	mov bl, [d + 1]
0579+  1AE9 07 6D 18    	call atoi				; convert to int in AL
0580+  1AEC             
0581+  1AEC E7          	pop d
0582+  1AED E5          	pop b
0583+  1AEE F9          	leave
0584+  1AEF 09          	ret
0585+  1AF0             
0586+  1AF0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  1AF0             ; input decimal number
0588+  1AF0             ; result in A
0589+  1AF0             ; 655'\0'
0590+  1AF0             ; low--------high
0591+  1AF0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  1AF0             scan_u16d:
0593+  1AF0 F8 08 00    	enter 8
0594+  1AF3 E2          	push si
0595+  1AF4 D8          	push b
0596+  1AF5 D9          	push c
0597+  1AF6 DA          	push d
0598+  1AF7 FA F9 FF    	lea d, [bp +- 7]
0599+  1AFA 07 BF 18    	call gets
0600+  1AFD 07 ED 17    	call strlen			; get string length in C
0601+  1B00 7E          	dec c
0602+  1B01 FD 4E       	mov si, d
0603+  1B03 12          	mov a, c
0604+  1B04 FD 99       	shl a
0605+  1B06 3B 55 18    	mov d, table_power
0606+  1B09 59          	add d, a
0607+  1B0A 38 00 00    	mov c, 0
0608+  1B0D             mul_loop:
0609+  1B0D F6          	lodsb			; load ASCII to al
0610+  1B0E B9 00       	cmp al, 0
0611+  1B10 C6 23 1B    	je mul_exit
0612+  1B13 6F 30       	sub al, $30		; make into integer
0613+  1B15 22 00       	mov ah, 0
0614+  1B17 2A          	mov b, [d]
0615+  1B18 AC          	mul a, b			; result in B since it fits in 16bits
0616+  1B19 11          	mov a, b
0617+  1B1A 28          	mov b, c
0618+  1B1B 54          	add a, b
0619+  1B1C 39          	mov c, a
0620+  1B1D 63 02 00    	sub d, 2
0621+  1B20 0A 0D 1B    	jmp mul_loop
0622+  1B23             mul_exit:
0623+  1B23 12          	mov a, c
0624+  1B24 E7          	pop d
0625+  1B25 E6          	pop c
0626+  1B26 E5          	pop b
0627+  1B27 EF          	pop si
0628+  1B28 F9          	leave
0629+  1B29 09          	ret
0895   1B2A             ; --- END INCLUDE BLOCK
0896   1B2A             
0897   1B2A             
0898   1B2A             .end
tasm: Number of errors = 0
