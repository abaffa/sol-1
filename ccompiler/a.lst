0001   0000             ; --- FILENAME: rsa.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; p
0011   0405 52 02 00      sub sp, 2 ; q
0012   0408 52 02 00      sub sp, 2 ; n
0013   040B 52 02 00      sub sp, 2 ; phi
0014   040E 52 02 00      sub sp, 2 ; e
0015   0411 52 02 00      sub sp, 2 ; d
0016   0414 26 0D 00      mov b, 13
0017   0417 D7            push a
0018   0418 11            mov a, b
0019   0419 45 FF FF      mov [bp + -1], a ; p
0020   041C E4            pop a
0021   041D 26 0B 00      mov b, 11
0022   0420 D7            push a
0023   0421 11            mov a, b
0024   0422 45 FD FF      mov [bp + -3], a ; q
0025   0425 E4            pop a
0026   0426 2C FF FF      mov b, [bp + -1] ; p
0027   0429 D7            push a
0028   042A 11            mov a, b
0029   042B 2C FD FF      mov b, [bp + -3] ; q
0030   042E AC            mul a, b
0031   042F E4            pop a
0032   0430 D7            push a
0033   0431 11            mov a, b
0034   0432 45 FB FF      mov [bp + -5], a ; n
0035   0435 E4            pop a
0036   0436 2C FF FF      mov b, [bp + -1] ; p
0037   0439 D7            push a
0038   043A 11            mov a, b
0039   043B 26 01 00      mov b, 1
0040   043E 60            sub a, b
0041   043F 27            mov b, a
0042   0440 E4            pop a
0043   0441 D7            push a
0044   0442 11            mov a, b
0045   0443 2C FD FF      mov b, [bp + -3] ; q
0046   0446 D7            push a
0047   0447 11            mov a, b
0048   0448 26 01 00      mov b, 1
0049   044B 60            sub a, b
0050   044C 27            mov b, a
0051   044D E4            pop a
0052   044E AC            mul a, b
0053   044F E4            pop a
0054   0450 D7            push a
0055   0451 11            mov a, b
0056   0452 45 F9 FF      mov [bp + -7], a ; phi
0057   0455 E4            pop a
0058   0456 2C F9 FF      mov b, [bp + -7] ; phi
0059   0459 FD AB         swp b
0060   045B D8            push b
0061   045C 07 C2 08      call find_e
0062   045F 51 02 00      add sp, 2
0063   0462 D7            push a
0064   0463 11            mov a, b
0065   0464 45 F7 FF      mov [bp + -9], a ; e
0066   0467 E4            pop a
0067   0468 2C F7 FF      mov b, [bp + -9] ; e
0068   046B FD AB         swp b
0069   046D D8            push b
0070   046E 2C F9 FF      mov b, [bp + -7] ; phi
0071   0471 FD AB         swp b
0072   0473 D8            push b
0073   0474 07 33 09      call find_d
0074   0477 51 04 00      add sp, 4
0075   047A D7            push a
0076   047B 11            mov a, b
0077   047C 45 F5 FF      mov [bp + -11], a ; d
0078   047F E4            pop a
0079   0480 26 A3 09      mov b, __string_0 ; "Public Key: ("
0080   0483 FD AB         swp b
0081   0485 D8            push b
0082   0486 07 B3 07      call print
0083   0489 51 02 00      add sp, 2
0084   048C 2C FB FF      mov b, [bp + -5] ; n
0085   048F FD AB         swp b
0086   0491 D8            push b
0087   0492 07 BE 07      call print_num
0088   0495 51 02 00      add sp, 2
0089   0498 26 B1 09      mov b, __string_1 ; ", "
0090   049B FD AB         swp b
0091   049D D8            push b
0092   049E 07 B3 07      call print
0093   04A1 51 02 00      add sp, 2
0094   04A4 2C F7 FF      mov b, [bp + -9] ; e
0095   04A7 FD AB         swp b
0096   04A9 D8            push b
0097   04AA 07 BE 07      call print_num
0098   04AD 51 02 00      add sp, 2
0099   04B0 26 B4 09      mov b, __string_2 ; ")\n"
0100   04B3 FD AB         swp b
0101   04B5 D8            push b
0102   04B6 07 B3 07      call print
0103   04B9 51 02 00      add sp, 2
0104   04BC 26 B7 09      mov b, __string_3 ; "Private Key: ("
0105   04BF FD AB         swp b
0106   04C1 D8            push b
0107   04C2 07 B3 07      call print
0108   04C5 51 02 00      add sp, 2
0109   04C8 2C FB FF      mov b, [bp + -5] ; n
0110   04CB FD AB         swp b
0111   04CD D8            push b
0112   04CE 07 BE 07      call print_num
0113   04D1 51 02 00      add sp, 2
0114   04D4 26 B1 09      mov b, __string_1 ; ", "
0115   04D7 FD AB         swp b
0116   04D9 D8            push b
0117   04DA 07 B3 07      call print
0118   04DD 51 02 00      add sp, 2
0119   04E0 2C F5 FF      mov b, [bp + -11] ; d
0120   04E3 FD AB         swp b
0121   04E5 D8            push b
0122   04E6 07 BE 07      call print_num
0123   04E9 51 02 00      add sp, 2
0124   04EC 26 B4 09      mov b, __string_2 ; ")\n"
0125   04EF FD AB         swp b
0126   04F1 D8            push b
0127   04F2 07 B3 07      call print
0128   04F5 51 02 00      add sp, 2
0129   04F8 52 64 00      sub sp, 100 ; input_str
0130   04FB 26 C6 09      mov b, __string_4 ; "Enter a string: "
0131   04FE FD AB         swp b
0132   0500 D8            push b
0133   0501 07 B3 07      call print
0134   0504 51 02 00      add sp, 2
0135   0507 FA 91 FF      lea d, [bp + -111] ; input_str beginning on the stack
0136   050A 2D            mov b, d
0137   050B FD AB         swp b
0138   050D D8            push b
0139   050E 07 CB 06      call _gets
0140   0511 51 02 00      add sp, 2
0141   0514 52 C8 00      sub sp, 200 ; encrypted_chars
0142   0517 52 02 00      sub sp, 2 ; encrypted_chars_len
0143   051A 26 00 00      mov b, 0
0144   051D D7            push a
0145   051E 11            mov a, b
0146   051F 45 C7 FE      mov [bp + -313], a ; encrypted_chars_len
0147   0522 E4            pop a
0148   0523 26 D7 09      mov b, __string_5 ; "Encrypted text: "
0149   0526 FD AB         swp b
0150   0528 D8            push b
0151   0529 07 B3 07      call print
0152   052C 51 02 00      add sp, 2
0153   052F 52 02 00      sub sp, 2 ; i
0154   0532             _for1_init:
0155   0532 26 00 00      mov b, 0
0156   0535 D7            push a
0157   0536 11            mov a, b
0158   0537 45 C5 FE      mov [bp + -315], a ; i
0159   053A E4            pop a
0160   053B             _for1_cond:
0161   053B FA 91 FF      lea d, [bp + -111] ; input_str beginning on the stack
0162   053E 2D            mov b, d
0163   053F D7            push a
0164   0540 74            mov d, b
0165   0541 DA            push d
0166   0542 2C C5 FE      mov b, [bp + -315] ; i
0167   0545 E7            pop d
0168   0546 10 01 00      mov a, 1
0169   0549 AC            mul a, b
0170   054A 5A            add d, b
0171   054B E4            pop a
0172   054C 32            mov bl, [d]
0173   054D A7 00         mov bh, 0
0174   054F D7            push a
0175   0550 11            mov a, b
0176   0551 26 00 00      mov b, $0
0177   0554 B0            cmp a, b
0178   0555 0E            lodflgs
0179   0556 87 01         and al, %00000001
0180   0558 8F 01         xor al, %00000001 ; !=
0181   055A 22 00         mov ah, 0
0182   055C 27            mov b, a
0183   055D E4            pop a
0184   055E DB            push al
0185   055F C0 00 00      cmp b, 0
0186   0562 0E            lodflgs ; transform condition into a single bit
0187   0563 FA 91 FF      lea d, [bp + -111] ; input_str beginning on the stack
0188   0566 2D            mov b, d
0189   0567 D7            push a
0190   0568 74            mov d, b
0191   0569 DA            push d
0192   056A 2C C5 FE      mov b, [bp + -315] ; i
0193   056D E7            pop d
0194   056E 10 01 00      mov a, 1
0195   0571 AC            mul a, b
0196   0572 5A            add d, b
0197   0573 E4            pop a
0198   0574 32            mov bl, [d]
0199   0575 A7 00         mov bh, 0
0200   0577 D7            push a
0201   0578 11            mov a, b
0202   0579 26 0A 00      mov b, $a
0203   057C B0            cmp a, b
0204   057D 0E            lodflgs
0205   057E 87 01         and al, %00000001
0206   0580 8F 01         xor al, %00000001 ; !=
0207   0582 22 00         mov ah, 0
0208   0584 27            mov b, a
0209   0585 E4            pop a
0210   0586 DB            push al
0211   0587 C0 00 00      cmp b, 0
0212   058A 0E            lodflgs
0213   058B EA            pop bl ; matches previous 'push al'
0214   058C 8C            or al, bl
0215   058D 8F 01         xor al, %00000001
0216   058F 2F            mov bl, al
0217   0590 A7 00         mov bh, 0
0218   0592 E8            pop al
0219   0593 C0 00 00      cmp b, 0
0220   0596 C6 1F 06      je _for1_exit
0221   0599             _for1_block:
0222   0599 FA C9 FE      lea d, [bp + -311] ; encrypted_chars beginning on the stack
0223   059C 2D            mov b, d
0224   059D D7            push a
0225   059E 74            mov d, b
0226   059F DA            push d
0227   05A0 2C C5 FE      mov b, [bp + -315] ; i
0228   05A3 E7            pop d
0229   05A4 10 02 00      mov a, 2
0230   05A7 AC            mul a, b
0231   05A8 5A            add d, b
0232   05A9 E4            pop a
0233   05AA DA            push d
0234   05AB FA 91 FF      lea d, [bp + -111] ; input_str beginning on the stack
0235   05AE 2D            mov b, d
0236   05AF D7            push a
0237   05B0 74            mov d, b
0238   05B1 DA            push d
0239   05B2 2C C5 FE      mov b, [bp + -315] ; i
0240   05B5 E7            pop d
0241   05B6 10 01 00      mov a, 1
0242   05B9 AC            mul a, b
0243   05BA 5A            add d, b
0244   05BB E4            pop a
0245   05BC 32            mov bl, [d]
0246   05BD A7 00         mov bh, 0
0247   05BF FD AB         swp b
0248   05C1 D8            push b
0249   05C2 2C F7 FF      mov b, [bp + -9] ; e
0250   05C5 FD AB         swp b
0251   05C7 D8            push b
0252   05C8 2C FB FF      mov b, [bp + -5] ; n
0253   05CB FD AB         swp b
0254   05CD D8            push b
0255   05CE 07 11 07      call mod_exp
0256   05D1 51 06 00      add sp, 6
0257   05D4 E7            pop d
0258   05D5 FD 43         mov [d], b
0259   05D7 FA C9 FE      lea d, [bp + -311] ; encrypted_chars beginning on the stack
0260   05DA 2D            mov b, d
0261   05DB D7            push a
0262   05DC 74            mov d, b
0263   05DD DA            push d
0264   05DE 2C C5 FE      mov b, [bp + -315] ; i
0265   05E1 E7            pop d
0266   05E2 10 02 00      mov a, 2
0267   05E5 AC            mul a, b
0268   05E6 5A            add d, b
0269   05E7 E4            pop a
0270   05E8 2A            mov b, [d]
0271   05E9 FD AB         swp b
0272   05EB D8            push b
0273   05EC 07 BE 07      call print_num
0274   05EF 51 02 00      add sp, 2
0275   05F2 26 E8 09      mov b, __string_6 ; " "
0276   05F5 FD AB         swp b
0277   05F7 D8            push b
0278   05F8 07 B3 07      call print
0279   05FB 51 02 00      add sp, 2
0280   05FE 2C C7 FE      mov b, [bp + -313] ; encrypted_chars_len
0281   0601 D7            push a
0282   0602 11            mov a, b
0283   0603 FD 77         inc b
0284   0605 D7            push a
0285   0606 11            mov a, b
0286   0607 45 C7 FE      mov [bp + -313], a ; encrypted_chars_len
0287   060A E4            pop a
0288   060B 27            mov b, a
0289   060C E4            pop a
0290   060D             _for1_update:
0291   060D 2C C5 FE      mov b, [bp + -315] ; i
0292   0610 D7            push a
0293   0611 11            mov a, b
0294   0612 FD 77         inc b
0295   0614 D7            push a
0296   0615 11            mov a, b
0297   0616 45 C5 FE      mov [bp + -315], a ; i
0298   0619 E4            pop a
0299   061A 27            mov b, a
0300   061B E4            pop a
0301   061C 0A 3B 05      jmp _for1_cond
0302   061F             _for1_exit:
0303   061F 26 EA 09      mov b, __string_7 ; "\n"
0304   0622 FD AB         swp b
0305   0624 D8            push b
0306   0625 07 B3 07      call print
0307   0628 51 02 00      add sp, 2
0308   062B 52 02 00      sub sp, 2 ; decrypted_char
0309   062E 52 01 00      sub sp, 1 ; c
0310   0631 26 EC 09      mov b, __string_8 ; "Decrypted text: "
0311   0634 FD AB         swp b
0312   0636 D8            push b
0313   0637 07 B3 07      call print
0314   063A 51 02 00      add sp, 2
0315   063D             _for2_init:
0316   063D 26 00 00      mov b, 0
0317   0640 D7            push a
0318   0641 11            mov a, b
0319   0642 45 C5 FE      mov [bp + -315], a ; i
0320   0645 E4            pop a
0321   0646             _for2_cond:
0322   0646 2C C5 FE      mov b, [bp + -315] ; i
0323   0649 D7            push a
0324   064A 11            mov a, b
0325   064B 2C C7 FE      mov b, [bp + -313] ; encrypted_chars_len
0326   064E B0            cmp a, b
0327   064F 0E            lodflgs
0328   0650 2F            mov bl, al
0329   0651 FD A2 03      shr al, 3
0330   0654 FD A4 02      shr bl, 2
0331   0657 FD 87 01      and bl, %00000001
0332   065A 90            xor al, bl ; < (signed)
0333   065B 22 00         mov ah, 0
0334   065D 27            mov b, a
0335   065E E4            pop a
0336   065F C0 00 00      cmp b, 0
0337   0662 C6 B9 06      je _for2_exit
0338   0665             _for2_block:
0339   0665 FA C9 FE      lea d, [bp + -311] ; encrypted_chars beginning on the stack
0340   0668 2D            mov b, d
0341   0669 D7            push a
0342   066A 74            mov d, b
0343   066B DA            push d
0344   066C 2C C5 FE      mov b, [bp + -315] ; i
0345   066F E7            pop d
0346   0670 10 02 00      mov a, 2
0347   0673 AC            mul a, b
0348   0674 5A            add d, b
0349   0675 E4            pop a
0350   0676 2A            mov b, [d]
0351   0677 FD AB         swp b
0352   0679 D8            push b
0353   067A 2C F5 FF      mov b, [bp + -11] ; d
0354   067D FD AB         swp b
0355   067F D8            push b
0356   0680 2C FB FF      mov b, [bp + -5] ; n
0357   0683 FD AB         swp b
0358   0685 D8            push b
0359   0686 07 11 07      call mod_exp
0360   0689 51 06 00      add sp, 6
0361   068C D7            push a
0362   068D 11            mov a, b
0363   068E 45 C3 FE      mov [bp + -317], a ; decrypted_char
0364   0691 E4            pop a
0365   0692 2C C3 FE      mov b, [bp + -317] ; decrypted_char
0366   0695 DB            push al
0367   0696 1B            mov al, bl
0368   0697 40 C2 FE      mov [bp + -318], al ; c
0369   069A E8            pop al
0370   069B 34 C2 FE      mov bl, [bp + -318] ; c
0371   069E A7 00         mov bh, 0
0372   06A0 DD            push bl
0373   06A1 07 A8 07      call _putchar
0374   06A4 51 01 00      add sp, 1
0375   06A7             _for2_update:
0376   06A7 2C C5 FE      mov b, [bp + -315] ; i
0377   06AA D7            push a
0378   06AB 11            mov a, b
0379   06AC FD 77         inc b
0380   06AE D7            push a
0381   06AF 11            mov a, b
0382   06B0 45 C5 FE      mov [bp + -315], a ; i
0383   06B3 E4            pop a
0384   06B4 27            mov b, a
0385   06B5 E4            pop a
0386   06B6 0A 46 06      jmp _for2_cond
0387   06B9             _for2_exit:
0388   06B9 26 EA 09      mov b, __string_7 ; "\n"
0389   06BC FD AB         swp b
0390   06BE D8            push b
0391   06BF 07 B3 07      call print
0392   06C2 51 02 00      add sp, 2
0393   06C5 26 00 00      mov b, 0
0394   06C8 F9            leave
0395   06C9 05 0B         syscall sys_terminate_proc
0396   06CB             
0397   06CB             _gets:
0398   06CB D2            push bp
0399   06CC 9B            mov bp, sp
0400   06CD             
0401   06CD             ; --- BEGIN INLINE ASM BLOCK
0402   06CD 17 05 00      mov a, [bp + 5]
0403   06D0 3C            mov d, a
0404   06D1 07 16 0B      call gets
0405   06D4             ; --- END INLINE ASM BLOCK
0406   06D4             
0407   06D4 F9            leave
0408   06D5 09            ret
0409   06D6             
0410   06D6             gcd:
0411   06D6 D2            push bp
0412   06D7 9B            mov bp, sp
0413   06D8             _if3_cond:
0414   06D8 2C 05 00      mov b, [bp + 5] ; b
0415   06DB D7            push a
0416   06DC 11            mov a, b
0417   06DD 26 00 00      mov b, 0
0418   06E0 B0            cmp a, b
0419   06E1 0E            lodflgs
0420   06E2 87 01         and al, %00000001 ; ==
0421   06E4 22 00         mov ah, 0
0422   06E6 27            mov b, a
0423   06E7 E4            pop a
0424   06E8 C0 00 00      cmp b, 0
0425   06EB C6 F6 06      je _if3_exit
0426   06EE             _if3_true:
0427   06EE 2C 07 00      mov b, [bp + 7] ; a
0428   06F1 F9            leave
0429   06F2 09            ret
0430   06F3 0A F6 06      jmp _if3_exit
0431   06F6             _if3_exit:
0432   06F6 2C 05 00      mov b, [bp + 5] ; b
0433   06F9 FD AB         swp b
0434   06FB D8            push b
0435   06FC 2C 07 00      mov b, [bp + 7] ; a
0436   06FF D7            push a
0437   0700 11            mov a, b
0438   0701 2C 05 00      mov b, [bp + 5] ; b
0439   0704 AE            div a, b
0440   0705 E4            pop a
0441   0706 FD AB         swp b
0442   0708 D8            push b
0443   0709 07 D6 06      call gcd
0444   070C 51 04 00      add sp, 4
0445   070F F9            leave
0446   0710 09            ret
0447   0711             
0448   0711             mod_exp:
0449   0711 D2            push bp
0450   0712 9B            mov bp, sp
0451   0713 52 02 00      sub sp, 2 ; result
0452   0716 26 01 00      mov b, 1
0453   0719 D7            push a
0454   071A 11            mov a, b
0455   071B 45 FF FF      mov [bp + -1], a ; result
0456   071E E4            pop a
0457   071F             _while4_cond:
0458   071F 2C 07 00      mov b, [bp + 7] ; exp
0459   0722 D7            push a
0460   0723 11            mov a, b
0461   0724 26 00 00      mov b, 0
0462   0727 B0            cmp a, b
0463   0728 0E            lodflgs
0464   0729 2F            mov bl, al
0465   072A FD 78         mov g, a
0466   072C FD A2 03      shr al, 3
0467   072F FD A4 02      shr bl, 2
0468   0732 FD 87 01      and bl, %00000001
0469   0735 90            xor al, bl
0470   0736 FD 27         mov b, g
0471   0738 FD 87 01      and bl, %00000001
0472   073B 8C            or al, bl
0473   073C 8F 01         xor al, %00000001 ; > (signed)
0474   073E 22 00         mov ah, 0
0475   0740 27            mov b, a
0476   0741 E4            pop a
0477   0742 C0 00 00      cmp b, 0
0478   0745 C6 A3 07      je _while4_exit
0479   0748             _while4_block:
0480   0748             _if5_cond:
0481   0748 2C 07 00      mov b, [bp + 7] ; exp
0482   074B D7            push a
0483   074C 11            mov a, b
0484   074D 26 01 00      mov b, 1
0485   0750 86            and a, b
0486   0751 27            mov b, a
0487   0752 E4            pop a
0488   0753 C0 00 00      cmp b, 0
0489   0756 C6 73 07      je _if5_exit
0490   0759             _if5_true:
0491   0759 2C FF FF      mov b, [bp + -1] ; result
0492   075C D7            push a
0493   075D 11            mov a, b
0494   075E 2C 09 00      mov b, [bp + 9] ; base
0495   0761 AC            mul a, b
0496   0762 E4            pop a
0497   0763 D7            push a
0498   0764 11            mov a, b
0499   0765 2C 05 00      mov b, [bp + 5] ; mod
0500   0768 AE            div a, b
0501   0769 E4            pop a
0502   076A D7            push a
0503   076B 11            mov a, b
0504   076C 45 FF FF      mov [bp + -1], a ; result
0505   076F E4            pop a
0506   0770 0A 73 07      jmp _if5_exit
0507   0773             _if5_exit:
0508   0773 2C 07 00      mov b, [bp + 7] ; exp
0509   0776 D7            push a
0510   0777 11            mov a, b
0511   0778 26 01 00      mov b, 1
0512   077B D9            push c
0513   077C FD 39         mov c, b
0514   077E 27            mov b, a
0515   077F FD 8E         ashr b, cl
0516   0781 E6            pop c
0517   0782 E4            pop a
0518   0783 D7            push a
0519   0784 11            mov a, b
0520   0785 45 07 00      mov [bp + 7], a ; exp
0521   0788 E4            pop a
0522   0789 2C 09 00      mov b, [bp + 9] ; base
0523   078C D7            push a
0524   078D 11            mov a, b
0525   078E 2C 09 00      mov b, [bp + 9] ; base
0526   0791 AC            mul a, b
0527   0792 E4            pop a
0528   0793 D7            push a
0529   0794 11            mov a, b
0530   0795 2C 05 00      mov b, [bp + 5] ; mod
0531   0798 AE            div a, b
0532   0799 E4            pop a
0533   079A D7            push a
0534   079B 11            mov a, b
0535   079C 45 09 00      mov [bp + 9], a ; base
0536   079F E4            pop a
0537   07A0 0A 1F 07      jmp _while4_cond
0538   07A3             _while4_exit:
0539   07A3 2C FF FF      mov b, [bp + -1] ; result
0540   07A6 F9            leave
0541   07A7 09            ret
0542   07A8             
0543   07A8             _putchar:
0544   07A8 D2            push bp
0545   07A9 9B            mov bp, sp
0546   07AA             
0547   07AA             ; --- BEGIN INLINE ASM BLOCK
0548   07AA 20 05 00      mov al, [bp + 5]
0549   07AD 23            mov ah, al
0550   07AE 07 0F 0B      call putchar
0551   07B1             ; --- END INLINE ASM BLOCK
0552   07B1             
0553   07B1 F9            leave
0554   07B2 09            ret
0555   07B3             
0556   07B3             print:
0557   07B3 D2            push bp
0558   07B4 9B            mov bp, sp
0559   07B5             
0560   07B5             ; --- BEGIN INLINE ASM BLOCK
0561   07B5 17 05 00      mov a, [bp + 5]
0562   07B8 3C            mov d, a
0563   07B9 07 49 0C      call puts
0564   07BC             ; --- END INLINE ASM BLOCK
0565   07BC             
0566   07BC F9            leave
0567   07BD 09            ret
0568   07BE             
0569   07BE             print_num:
0570   07BE D2            push bp
0571   07BF 9B            mov bp, sp
0572   07C0 52 05 00      sub sp, 5 ; digits
0573   07C3 52 02 00      sub sp, 2 ; i
0574   07C6 26 00 00      mov b, 0
0575   07C9 D7            push a
0576   07CA 11            mov a, b
0577   07CB 45 FA FF      mov [bp + -6], a ; i
0578   07CE E4            pop a
0579   07CF             _if6_cond:
0580   07CF 2C 05 00      mov b, [bp + 5] ; num
0581   07D2 D7            push a
0582   07D3 11            mov a, b
0583   07D4 26 00 00      mov b, 0
0584   07D7 B0            cmp a, b
0585   07D8 0E            lodflgs
0586   07D9 87 01         and al, %00000001 ; ==
0587   07DB 22 00         mov ah, 0
0588   07DD 27            mov b, a
0589   07DE E4            pop a
0590   07DF C0 00 00      cmp b, 0
0591   07E2 C6 F4 07      je _if6_exit
0592   07E5             _if6_true:
0593   07E5 26 30 00      mov b, $30
0594   07E8 DD            push bl
0595   07E9 07 A8 07      call _putchar
0596   07EC 51 01 00      add sp, 1
0597   07EF F9            leave
0598   07F0 09            ret
0599   07F1 0A F4 07      jmp _if6_exit
0600   07F4             _if6_exit:
0601   07F4             _while7_cond:
0602   07F4 2C 05 00      mov b, [bp + 5] ; num
0603   07F7 D7            push a
0604   07F8 11            mov a, b
0605   07F9 26 00 00      mov b, 0
0606   07FC B0            cmp a, b
0607   07FD 0E            lodflgs
0608   07FE 2F            mov bl, al
0609   07FF FD 78         mov g, a
0610   0801 FD A2 03      shr al, 3
0611   0804 FD A4 02      shr bl, 2
0612   0807 FD 87 01      and bl, %00000001
0613   080A 90            xor al, bl
0614   080B FD 27         mov b, g
0615   080D FD 87 01      and bl, %00000001
0616   0810 8C            or al, bl
0617   0811 8F 01         xor al, %00000001 ; > (signed)
0618   0813 22 00         mov ah, 0
0619   0815 27            mov b, a
0620   0816 E4            pop a
0621   0817 C0 00 00      cmp b, 0
0622   081A C6 6A 08      je _while7_exit
0623   081D             _while7_block:
0624   081D FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0625   0820 2D            mov b, d
0626   0821 D7            push a
0627   0822 74            mov d, b
0628   0823 DA            push d
0629   0824 2C FA FF      mov b, [bp + -6] ; i
0630   0827 E7            pop d
0631   0828 10 01 00      mov a, 1
0632   082B AC            mul a, b
0633   082C 5A            add d, b
0634   082D E4            pop a
0635   082E DA            push d
0636   082F 26 30 00      mov b, $30
0637   0832 D7            push a
0638   0833 11            mov a, b
0639   0834 2C 05 00      mov b, [bp + 5] ; num
0640   0837 D7            push a
0641   0838 11            mov a, b
0642   0839 26 0A 00      mov b, 10
0643   083C AE            div a, b
0644   083D E4            pop a
0645   083E 56            add b, a
0646   083F E4            pop a
0647   0840 E7            pop d
0648   0841 FD 3E         mov [d], bl
0649   0843 2C 05 00      mov b, [bp + 5] ; num
0650   0846 D7            push a
0651   0847 11            mov a, b
0652   0848 26 0A 00      mov b, 10
0653   084B AE            div a, b
0654   084C FD 78         mov g, a
0655   084E 11            mov a, b
0656   084F FD 27         mov b, g
0657   0851 E4            pop a
0658   0852 D7            push a
0659   0853 11            mov a, b
0660   0854 45 05 00      mov [bp + 5], a ; num
0661   0857 E4            pop a
0662   0858 2C FA FF      mov b, [bp + -6] ; i
0663   085B D7            push a
0664   085C 11            mov a, b
0665   085D FD 77         inc b
0666   085F D7            push a
0667   0860 11            mov a, b
0668   0861 45 FA FF      mov [bp + -6], a ; i
0669   0864 E4            pop a
0670   0865 27            mov b, a
0671   0866 E4            pop a
0672   0867 0A F4 07      jmp _while7_cond
0673   086A             _while7_exit:
0674   086A             _while8_cond:
0675   086A 2C FA FF      mov b, [bp + -6] ; i
0676   086D D7            push a
0677   086E 11            mov a, b
0678   086F 26 00 00      mov b, 0
0679   0872 B0            cmp a, b
0680   0873 0E            lodflgs
0681   0874 2F            mov bl, al
0682   0875 FD 78         mov g, a
0683   0877 FD A2 03      shr al, 3
0684   087A FD A4 02      shr bl, 2
0685   087D FD 87 01      and bl, %00000001
0686   0880 90            xor al, bl
0687   0881 FD 27         mov b, g
0688   0883 FD 87 01      and bl, %00000001
0689   0886 8C            or al, bl
0690   0887 8F 01         xor al, %00000001 ; > (signed)
0691   0889 22 00         mov ah, 0
0692   088B 27            mov b, a
0693   088C E4            pop a
0694   088D C0 00 00      cmp b, 0
0695   0890 C6 C0 08      je _while8_exit
0696   0893             _while8_block:
0697   0893 2C FA FF      mov b, [bp + -6] ; i
0698   0896 D7            push a
0699   0897 11            mov a, b
0700   0898 FD 7D         dec b
0701   089A D7            push a
0702   089B 11            mov a, b
0703   089C 45 FA FF      mov [bp + -6], a ; i
0704   089F E4            pop a
0705   08A0 27            mov b, a
0706   08A1 E4            pop a
0707   08A2 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0708   08A5 2D            mov b, d
0709   08A6 D7            push a
0710   08A7 74            mov d, b
0711   08A8 DA            push d
0712   08A9 2C FA FF      mov b, [bp + -6] ; i
0713   08AC E7            pop d
0714   08AD 10 01 00      mov a, 1
0715   08B0 AC            mul a, b
0716   08B1 5A            add d, b
0717   08B2 E4            pop a
0718   08B3 32            mov bl, [d]
0719   08B4 A7 00         mov bh, 0
0720   08B6 DD            push bl
0721   08B7 07 A8 07      call _putchar
0722   08BA 51 01 00      add sp, 1
0723   08BD 0A 6A 08      jmp _while8_cond
0724   08C0             _while8_exit:
0725   08C0 F9            leave
0726   08C1 09            ret
0727   08C2             
0728   08C2             find_e:
0729   08C2 D2            push bp
0730   08C3 9B            mov bp, sp
0731   08C4 52 02 00      sub sp, 2 ; e
0732   08C7             _for9_init:
0733   08C7 26 02 00      mov b, 2
0734   08CA D7            push a
0735   08CB 11            mov a, b
0736   08CC 45 FF FF      mov [bp + -1], a ; e
0737   08CF E4            pop a
0738   08D0             _for9_cond:
0739   08D0 2C FF FF      mov b, [bp + -1] ; e
0740   08D3 D7            push a
0741   08D4 11            mov a, b
0742   08D5 2C 05 00      mov b, [bp + 5] ; phi
0743   08D8 B0            cmp a, b
0744   08D9 0E            lodflgs
0745   08DA 2F            mov bl, al
0746   08DB FD A2 03      shr al, 3
0747   08DE FD A4 02      shr bl, 2
0748   08E1 FD 87 01      and bl, %00000001
0749   08E4 90            xor al, bl ; < (signed)
0750   08E5 22 00         mov ah, 0
0751   08E7 27            mov b, a
0752   08E8 E4            pop a
0753   08E9 C0 00 00      cmp b, 0
0754   08EC C6 2E 09      je _for9_exit
0755   08EF             _for9_block:
0756   08EF             _if10_cond:
0757   08EF 2C FF FF      mov b, [bp + -1] ; e
0758   08F2 FD AB         swp b
0759   08F4 D8            push b
0760   08F5 2C 05 00      mov b, [bp + 5] ; phi
0761   08F8 FD AB         swp b
0762   08FA D8            push b
0763   08FB 07 D6 06      call gcd
0764   08FE 51 04 00      add sp, 4
0765   0901 D7            push a
0766   0902 11            mov a, b
0767   0903 26 01 00      mov b, 1
0768   0906 B0            cmp a, b
0769   0907 0E            lodflgs
0770   0908 87 01         and al, %00000001 ; ==
0771   090A 22 00         mov ah, 0
0772   090C 27            mov b, a
0773   090D E4            pop a
0774   090E C0 00 00      cmp b, 0
0775   0911 C6 1C 09      je _if10_exit
0776   0914             _if10_true:
0777   0914 2C FF FF      mov b, [bp + -1] ; e
0778   0917 F9            leave
0779   0918 09            ret
0780   0919 0A 1C 09      jmp _if10_exit
0781   091C             _if10_exit:
0782   091C             _for9_update:
0783   091C 2C FF FF      mov b, [bp + -1] ; e
0784   091F D7            push a
0785   0920 11            mov a, b
0786   0921 FD 77         inc b
0787   0923 D7            push a
0788   0924 11            mov a, b
0789   0925 45 FF FF      mov [bp + -1], a ; e
0790   0928 E4            pop a
0791   0929 27            mov b, a
0792   092A E4            pop a
0793   092B 0A D0 08      jmp _for9_cond
0794   092E             _for9_exit:
0795   092E 26 00 00      mov b, 0
0796   0931 F9            leave
0797   0932 09            ret
0798   0933             
0799   0933             find_d:
0800   0933 D2            push bp
0801   0934 9B            mov bp, sp
0802   0935 52 02 00      sub sp, 2 ; d
0803   0938             _for11_init:
0804   0938 26 02 00      mov b, 2
0805   093B D7            push a
0806   093C 11            mov a, b
0807   093D 45 FF FF      mov [bp + -1], a ; d
0808   0940 E4            pop a
0809   0941             _for11_cond:
0810   0941 2C FF FF      mov b, [bp + -1] ; d
0811   0944 D7            push a
0812   0945 11            mov a, b
0813   0946 2C 05 00      mov b, [bp + 5] ; phi
0814   0949 B0            cmp a, b
0815   094A 0E            lodflgs
0816   094B 2F            mov bl, al
0817   094C FD A2 03      shr al, 3
0818   094F FD A4 02      shr bl, 2
0819   0952 FD 87 01      and bl, %00000001
0820   0955 90            xor al, bl ; < (signed)
0821   0956 22 00         mov ah, 0
0822   0958 27            mov b, a
0823   0959 E4            pop a
0824   095A C0 00 00      cmp b, 0
0825   095D C6 9E 09      je _for11_exit
0826   0960             _for11_block:
0827   0960             _if12_cond:
0828   0960 2C FF FF      mov b, [bp + -1] ; d
0829   0963 D7            push a
0830   0964 11            mov a, b
0831   0965 2C 07 00      mov b, [bp + 7] ; e
0832   0968 AC            mul a, b
0833   0969 E4            pop a
0834   096A D7            push a
0835   096B 11            mov a, b
0836   096C 2C 05 00      mov b, [bp + 5] ; phi
0837   096F AE            div a, b
0838   0970 E4            pop a
0839   0971 D7            push a
0840   0972 11            mov a, b
0841   0973 26 01 00      mov b, 1
0842   0976 B0            cmp a, b
0843   0977 0E            lodflgs
0844   0978 87 01         and al, %00000001 ; ==
0845   097A 22 00         mov ah, 0
0846   097C 27            mov b, a
0847   097D E4            pop a
0848   097E C0 00 00      cmp b, 0
0849   0981 C6 8C 09      je _if12_exit
0850   0984             _if12_true:
0851   0984 2C FF FF      mov b, [bp + -1] ; d
0852   0987 F9            leave
0853   0988 09            ret
0854   0989 0A 8C 09      jmp _if12_exit
0855   098C             _if12_exit:
0856   098C             _for11_update:
0857   098C 2C FF FF      mov b, [bp + -1] ; d
0858   098F D7            push a
0859   0990 11            mov a, b
0860   0991 FD 77         inc b
0861   0993 D7            push a
0862   0994 11            mov a, b
0863   0995 45 FF FF      mov [bp + -1], a ; d
0864   0998 E4            pop a
0865   0999 27            mov b, a
0866   099A E4            pop a
0867   099B 0A 41 09      jmp _for11_cond
0868   099E             _for11_exit:
0869   099E 26 00 00      mov b, 0
0870   09A1 F9            leave
0871   09A2 09            ret
0872   09A3             ; --- END TEXT BLOCK
0873   09A3             
0874   09A3             ; --- BEGIN DATA BLOCK
0875   09A3 50 75 62 6C __string_0: .db "Public Key: (", 0
0875   09A7 69 63 20 4B 
0875   09AB 65 79 3A 20 
0875   09AF 28 00 
0876   09B1 2C 20 00    __string_1: .db ", ", 0
0877   09B4 29 0A 00    __string_2: .db ")\n", 0
0878   09B7 50 72 69 76 __string_3: .db "Private Key: (", 0
0878   09BB 61 74 65 20 
0878   09BF 4B 65 79 3A 
0878   09C3 20 28 00 
0879   09C6 45 6E 74 65 __string_4: .db "Enter a string: ", 0
0879   09CA 72 20 61 20 
0879   09CE 73 74 72 69 
0879   09D2 6E 67 3A 20 
0879   09D6 00 
0880   09D7 45 6E 63 72 __string_5: .db "Encrypted text: ", 0
0880   09DB 79 70 74 65 
0880   09DF 64 20 74 65 
0880   09E3 78 74 3A 20 
0880   09E7 00 
0881   09E8 20 00       __string_6: .db " ", 0
0882   09EA 0A 00       __string_7: .db "\n", 0
0883   09EC 44 65 63 72 __string_8: .db "Decrypted text: ", 0
0883   09F0 79 70 74 65 
0883   09F4 64 20 74 65 
0883   09F8 78 74 3A 20 
0883   09FC 00 
0884   09FD             ; --- END DATA BLOCK
0885   09FD             
0886   09FD             ; --- BEGIN INCLUDE BLOCK
0887   09FD             .include "lib/stdio.asm"
0001+  09FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  09FD             ; stdio.s
0003+  09FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  09FD             .include "lib/string.asm"
0001++ 09FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 09FD             ; string.s
0003++ 09FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 09FD             
0005++ 09FD             
0006++ 09FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 09FD             ; strrev
0008++ 09FD             ; reverse a string
0009++ 09FD             ; D = string address
0010++ 09FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 09FD             ; 01234
0012++ 09FD             strrev:
0013++ 09FD 4B          	pusha
0014++ 09FE 07 44 0A    	call strlen	; length in C
0015++ 0A01 12          	mov a, c
0016++ 0A02 AF 01 00    	cmp a, 1
0017++ 0A05 D0 1F 0A    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0A08 7D          	dec a
0019++ 0A09 FD 4E       	mov si, d	; beginning of string
0020++ 0A0B FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0A0D 59          	add d, a	; end of string
0022++ 0A0E 12          	mov a, c
0023++ 0A0F FD 9B       	shr a		; divide by 2
0024++ 0A11 39          	mov c, a	; C now counts the steps
0025++ 0A12             strrev_L0:
0026++ 0A12 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0A13 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0A14 3E          	mov [d], al	; store left char into right side
0029++ 0A15 1B          	mov al, bl
0030++ 0A16 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0A17 7E          	dec c
0032++ 0A18 7F          	dec d
0033++ 0A19 C2 00 00    	cmp c, 0
0034++ 0A1C C7 12 0A    	jne strrev_L0
0035++ 0A1F             strrev_end:
0036++ 0A1F 4C          	popa
0037++ 0A20 09          	ret
0038++ 0A21             	
0039++ 0A21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0A21             ; strchr
0041++ 0A21             ; search string in D for char in AL
0042++ 0A21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0A21             strchr:
0044++ 0A21             strchr_L0:
0045++ 0A21 32          	mov bl, [d]
0046++ 0A22 C1 00       	cmp bl, 0
0047++ 0A24 C6 2F 0A    	je strchr_end
0048++ 0A27 BA          	cmp al, bl
0049++ 0A28 C6 2F 0A    	je strchr_end
0050++ 0A2B 79          	inc d
0051++ 0A2C 0A 21 0A    	jmp strchr_L0
0052++ 0A2F             strchr_end:
0053++ 0A2F 1B          	mov al, bl
0054++ 0A30 09          	ret
0055++ 0A31             
0056++ 0A31             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0A31             ; strstr
0058++ 0A31             ; find sub-string
0059++ 0A31             ; str1 in SI
0060++ 0A31             ; str2 in DI
0061++ 0A31             ; SI points to end of source string
0062++ 0A31             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0A31             strstr:
0064++ 0A31 DB          	push al
0065++ 0A32 DA          	push d
0066++ 0A33 E3          	push di
0067++ 0A34             strstr_loop:
0068++ 0A34 F3          	cmpsb					; compare a byte of the strings
0069++ 0A35 C7 40 0A    	jne strstr_ret
0070++ 0A38 FC 00 00    	lea d, [di + 0]
0071++ 0A3B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0A3D C7 34 0A    	jne strstr_loop				; equal chars but not at end
0073++ 0A40             strstr_ret:
0074++ 0A40 F0          	pop di
0075++ 0A41 E7          	pop d
0076++ 0A42 E8          	pop al
0077++ 0A43 09          	ret
0078++ 0A44             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0A44             ; length of null terminated string
0080++ 0A44             ; result in C
0081++ 0A44             ; pointer in D
0082++ 0A44             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0A44             strlen:
0084++ 0A44 DA          	push d
0085++ 0A45 38 00 00    	mov c, 0
0086++ 0A48             strlen_L1:
0087++ 0A48 BD 00       	cmp byte [d], 0
0088++ 0A4A C6 52 0A    	je strlen_ret
0089++ 0A4D 79          	inc d
0090++ 0A4E 78          	inc c
0091++ 0A4F 0A 48 0A    	jmp strlen_L1
0092++ 0A52             strlen_ret:
0093++ 0A52 E7          	pop d
0094++ 0A53 09          	ret
0095++ 0A54             
0096++ 0A54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0A54             ; STRCMP
0098++ 0A54             ; compare two strings
0099++ 0A54             ; str1 in SI
0100++ 0A54             ; str2 in DI
0101++ 0A54             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0A54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0A54             strcmp:
0104++ 0A54 DB          	push al
0105++ 0A55 DA          	push d
0106++ 0A56 E3          	push di
0107++ 0A57 E2          	push si
0108++ 0A58             strcmp_loop:
0109++ 0A58 F3          	cmpsb					; compare a byte of the strings
0110++ 0A59 C7 64 0A    	jne strcmp_ret
0111++ 0A5C FB FF FF    	lea d, [si +- 1]
0112++ 0A5F BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0A61 C7 58 0A    	jne strcmp_loop				; equal chars but not at end
0114++ 0A64             strcmp_ret:
0115++ 0A64 EF          	pop si
0116++ 0A65 F0          	pop di
0117++ 0A66 E7          	pop d
0118++ 0A67 E8          	pop al
0119++ 0A68 09          	ret
0120++ 0A69             
0121++ 0A69             
0122++ 0A69             ; STRCPY
0123++ 0A69             ; copy null terminated string from SI to DI
0124++ 0A69             ; source in SI
0125++ 0A69             ; destination in DI
0126++ 0A69             strcpy:
0127++ 0A69 E2          	push si
0128++ 0A6A E3          	push di
0129++ 0A6B DB          	push al
0130++ 0A6C             strcpy_L1:
0131++ 0A6C F6          	lodsb
0132++ 0A6D F7          	stosb
0133++ 0A6E B9 00       	cmp al, 0
0134++ 0A70 C7 6C 0A    	jne strcpy_L1
0135++ 0A73             strcpy_end:
0136++ 0A73 E8          	pop al
0137++ 0A74 F0          	pop di
0138++ 0A75 EF          	pop si
0139++ 0A76 09          	ret
0140++ 0A77             
0141++ 0A77             ; STRCAT
0142++ 0A77             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0A77             ; source in SI
0144++ 0A77             ; destination in DI
0145++ 0A77             strcat:
0146++ 0A77 E2          	push si
0147++ 0A78 E3          	push di
0148++ 0A79 D7          	push a
0149++ 0A7A DA          	push d
0150++ 0A7B 50          	mov a, di
0151++ 0A7C 3C          	mov d, a
0152++ 0A7D             strcat_goto_end_L1:
0153++ 0A7D BD 00       	cmp byte[d], 0
0154++ 0A7F C6 86 0A    	je strcat_start
0155++ 0A82 79          	inc d
0156++ 0A83 0A 7D 0A    	jmp strcat_goto_end_L1
0157++ 0A86             strcat_start:
0158++ 0A86 FD 50       	mov di, d
0159++ 0A88             strcat_L1:
0160++ 0A88 F6          	lodsb
0161++ 0A89 F7          	stosb
0162++ 0A8A B9 00       	cmp al, 0
0163++ 0A8C C7 88 0A    	jne strcat_L1
0164++ 0A8F             strcat_end:
0165++ 0A8F E7          	pop d
0166++ 0A90 E4          	pop a
0167++ 0A91 F0          	pop di
0168++ 0A92 EF          	pop si
0169++ 0A93 09          	ret
0005+  0A94             
0006+  0A94 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0A98 34 35 36 37 
0006+  0A9C 38 39 41 42 
0006+  0AA0 43 44 45 46 
0007+  0AA4 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0AA8 1B 5B 48 00 
0008+  0AAC             
0009+  0AAC 01 00       table_power:.dw 1
0010+  0AAE 0A 00       			.dw 10
0011+  0AB0 64 00       			.dw 100
0012+  0AB2 E8 03       			.dw 1000
0013+  0AB4 10 27       			.dw 10000
0014+  0AB6             
0015+  0AB6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0AB6             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0AB6             ; ASCII in BL
0018+  0AB6             ; result in AL
0019+  0AB6             ; ascii for F = 0100 0110
0020+  0AB6             ; ascii for 9 = 0011 1001
0021+  0AB6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0AB6             hex_ascii_encode:
0023+  0AB6 1B          	mov al, bl
0024+  0AB7 93 40       	test al, $40				; test if letter or number
0025+  0AB9 C7 BF 0A    	jnz hex_letter
0026+  0ABC 87 0F       	and al, $0F				; get number
0027+  0ABE 09          	ret
0028+  0ABF             hex_letter:
0029+  0ABF 87 0F       	and al, $0F				; get letter
0030+  0AC1 6A 09       	add al, 9
0031+  0AC3 09          	ret
0032+  0AC4             
0033+  0AC4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0AC4             ; ATOI
0035+  0AC4             ; 2 letter hex string in B
0036+  0AC4             ; 8bit integer returned in AL
0037+  0AC4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0AC4             atoi:
0039+  0AC4 D8          	push b
0040+  0AC5 07 B6 0A    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0AC8 30          	mov bl, bh
0042+  0AC9 DB          	push al					; save a
0043+  0ACA 07 B6 0A    	call hex_ascii_encode
0044+  0ACD EA          	pop bl	
0045+  0ACE FD 9E 04    	shl al, 4
0046+  0AD1 8C          	or al, bl
0047+  0AD2 E5          	pop b
0048+  0AD3 09          	ret	
0049+  0AD4             
0050+  0AD4             
0051+  0AD4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0AD4             ; printf
0053+  0AD4             ; no need for explanations!
0054+  0AD4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0AD4             printf:
0056+  0AD4 09          	ret
0057+  0AD5             
0058+  0AD5             
0059+  0AD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0AD5             ; scanf
0061+  0AD5             ; no need for explanations!
0062+  0AD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0AD5             scanf:
0064+  0AD5 09          	ret
0065+  0AD6             
0066+  0AD6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0AD6             ; ITOA
0068+  0AD6             ; 8bit value in BL
0069+  0AD6             ; 2 byte ASCII result in A
0070+  0AD6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0AD6             itoa:
0072+  0AD6 DA          	push d
0073+  0AD7 D8          	push b
0074+  0AD8 A7 00       	mov bh, 0
0075+  0ADA FD A4 04    	shr bl, 4	
0076+  0ADD 74          	mov d, b
0077+  0ADE 1F 94 0A    	mov al, [d + s_hex_digits]
0078+  0AE1 23          	mov ah, al
0079+  0AE2             	
0080+  0AE2 E5          	pop b
0081+  0AE3 D8          	push b
0082+  0AE4 A7 00       	mov bh, 0
0083+  0AE6 FD 87 0F    	and bl, $0F
0084+  0AE9 74          	mov d, b
0085+  0AEA 1F 94 0A    	mov al, [d + s_hex_digits]
0086+  0AED E5          	pop b
0087+  0AEE E7          	pop d
0088+  0AEF 09          	ret
0089+  0AF0             
0090+  0AF0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0AF0             ; HEX STRING TO BINARY
0092+  0AF0             ; di = destination address
0093+  0AF0             ; si = source
0094+  0AF0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0AF0             hex_to_int:
0096+  0AF0             hex_to_int_L1:
0097+  0AF0 F6          	lodsb					; load from [SI] to AL
0098+  0AF1 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0AF3 C6 00 0B    	jz hex_to_int_ret
0100+  0AF6 36          	mov bh, al
0101+  0AF7 F6          	lodsb
0102+  0AF8 2F          	mov bl, al
0103+  0AF9 07 C4 0A    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0AFC F7          	stosb					; store AL to [DI]
0105+  0AFD 0A F0 0A    	jmp hex_to_int_L1
0106+  0B00             hex_to_int_ret:
0107+  0B00 09          	ret		
0108+  0B01             
0109+  0B01             
0110+  0B01             
0111+  0B01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0B01             ; GETCHAR
0113+  0B01             ; char in ah
0114+  0B01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0B01             getchar:
0116+  0B01 DB          	push al
0117+  0B02             getchar_retry:
0118+  0B02 FD 0C       	sti
0119+  0B04 19 01       	mov al, 1
0120+  0B06 05 03       	syscall sys_io			; receive in AH
0121+  0B08 B9 00       	cmp al, 0			; check if any char was receive
0122+  0B0A C6 02 0B    	je getchar_retry
0123+  0B0D E8          	pop al
0124+  0B0E 09          	ret
0125+  0B0F             
0126+  0B0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0B0F             ; PUTCHAR
0128+  0B0F             ; char in ah
0129+  0B0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B0F             putchar:
0131+  0B0F D7          	push a
0132+  0B10 19 00       	mov al, 0
0133+  0B12 05 03       	syscall sys_io			; char in AH
0134+  0B14 E4          	pop a
0135+  0B15 09          	ret
0136+  0B16             
0137+  0B16             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0B16             ;; INPUT A STRING
0139+  0B16             ;; terminates with null
0140+  0B16             ;; pointer in D
0141+  0B16             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0B16             gets:
0143+  0B16 D7          	push a
0144+  0B17 DA          	push d
0145+  0B18             gets_loop:
0146+  0B18 FD 0C       	sti
0147+  0B1A 19 01       	mov al, 1
0148+  0B1C 05 03       	syscall sys_io			; receive in AH
0149+  0B1E B9 00       	cmp al, 0				; check error code (AL)
0150+  0B20 C6 18 0B    	je gets_loop			; if no char received, retry
0151+  0B23             
0152+  0B23 76 1B       	cmp ah, 27
0153+  0B25 C6 46 0B    	je gets_telnet_escape
0154+  0B28 76 0A       	cmp ah, $0A				; LF
0155+  0B2A C6 9F 0B    	je gets_end
0156+  0B2D 76 0D       	cmp ah, $0D				; CR
0157+  0B2F C6 9F 0B    	je gets_end
0158+  0B32 76 5C       	cmp ah, $5C				; '\\'
0159+  0B34 C6 76 0B    	je gets_escape
0160+  0B37             	
0161+  0B37 76 08       	cmp ah, $08			; check for backspace
0162+  0B39 C6 42 0B    	je gets_backspace
0163+  0B3C             
0164+  0B3C 1A          	mov al, ah
0165+  0B3D 3E          	mov [d], al
0166+  0B3E 79          	inc d
0167+  0B3F 0A 18 0B    	jmp gets_loop
0168+  0B42             gets_backspace:
0169+  0B42 7F          	dec d
0170+  0B43 0A 18 0B    	jmp gets_loop
0171+  0B46             gets_telnet_escape:
0172+  0B46 FD 0C       	sti
0173+  0B48 19 01       	mov al, 1
0174+  0B4A 05 03       	syscall sys_io				; receive in AH without echo
0175+  0B4C B9 00       	cmp al, 0					; check error code (AL)
0176+  0B4E C6 46 0B    	je gets_telnet_escape		; if no char received, retry
0177+  0B51 76 5B       	cmp ah, '['
0178+  0B53 C7 18 0B    	jne gets_loop
0179+  0B56             gets_telnet_escape_phase2:
0180+  0B56 FD 0C       	sti
0181+  0B58 19 01       	mov al, 1
0182+  0B5A 05 03       	syscall sys_io					; receive in AH without echo
0183+  0B5C B9 00       	cmp al, 0						; check error code (AL)
0184+  0B5E C6 56 0B    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0B61 76 44       	cmp ah, 'D'
0186+  0B63 C6 6E 0B    	je gets_left_arrow
0187+  0B66 76 43       	cmp ah, 'C'
0188+  0B68 C6 72 0B    	je gets_right_arrow
0189+  0B6B 0A 18 0B    	jmp gets_loop
0190+  0B6E             gets_left_arrow:
0191+  0B6E 7F          	dec d
0192+  0B6F 0A 18 0B    	jmp gets_loop
0193+  0B72             gets_right_arrow:
0194+  0B72 79          	inc d
0195+  0B73 0A 18 0B    	jmp gets_loop
0196+  0B76             gets_escape:
0197+  0B76 FD 0C       	sti
0198+  0B78 19 01       	mov al, 1
0199+  0B7A 05 03       	syscall sys_io			; receive in AH
0200+  0B7C B9 00       	cmp al, 0				; check error code (AL)
0201+  0B7E C6 76 0B    	je gets_escape			; if no char received, retry
0202+  0B81 76 6E       	cmp ah, 'n'
0203+  0B83 C6 91 0B    	je gets_LF
0204+  0B86 76 72       	cmp ah, 'r'
0205+  0B88 C6 98 0B    	je gets_CR
0206+  0B8B 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0B8C 3E          	mov [d], al
0208+  0B8D 79          	inc d
0209+  0B8E 0A 18 0B    	jmp gets_loop
0210+  0B91             gets_LF:
0211+  0B91 19 0A       	mov al, $0A
0212+  0B93 3E          	mov [d], al
0213+  0B94 79          	inc d
0214+  0B95 0A 18 0B    	jmp gets_loop
0215+  0B98             gets_CR:
0216+  0B98 19 0D       	mov al, $0D
0217+  0B9A 3E          	mov [d], al
0218+  0B9B 79          	inc d
0219+  0B9C 0A 18 0B    	jmp gets_loop
0220+  0B9F             gets_end:
0221+  0B9F 19 00       	mov al, 0
0222+  0BA1 3E          	mov [d], al				; terminate string
0223+  0BA2 E7          	pop d
0224+  0BA3 E4          	pop a
0225+  0BA4 09          	ret
0226+  0BA5             
0227+  0BA5             
0228+  0BA5             
0229+  0BA5             
0230+  0BA5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0BA5             ;; INPUT TEXT
0232+  0BA5             ;; terminated with CTRL+D
0233+  0BA5             ;; pointer in D
0234+  0BA5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0BA5             gettxt:
0236+  0BA5 D7          	push a
0237+  0BA6 DA          	push d
0238+  0BA7             gettxt_loop:
0239+  0BA7 19 01       	mov al, 1
0240+  0BA9 05 03       	syscall sys_io			; receive in AH
0241+  0BAB B9 00       	cmp al, 0				; check error code (AL)
0242+  0BAD C6 A7 0B    	je gettxt_loop		; if no char received, retry
0243+  0BB0 76 04       	cmp ah, 4			; EOT
0244+  0BB2 C6 F0 0B    	je gettxt_end
0245+  0BB5 76 08       	cmp ah, $08			; check for backspace
0246+  0BB7 C6 EC 0B    	je gettxt_backspace
0247+  0BBA 76 5C       	cmp ah, $5C				; '\\'
0248+  0BBC C6 C5 0B    	je gettxt_escape
0249+  0BBF 1A          	mov al, ah
0250+  0BC0 3E          	mov [d], al
0251+  0BC1 79          	inc d
0252+  0BC2 0A A7 0B    	jmp gettxt_loop
0253+  0BC5             gettxt_escape:
0254+  0BC5 19 01       	mov al, 1
0255+  0BC7 05 03       	syscall sys_io			; receive in AH
0256+  0BC9 B9 00       	cmp al, 0				; check error code (AL)
0257+  0BCB C6 C5 0B    	je gettxt_escape		; if no char received, retry
0258+  0BCE 76 6E       	cmp ah, 'n'
0259+  0BD0 C6 DE 0B    	je gettxt_LF
0260+  0BD3 76 72       	cmp ah, 'r'
0261+  0BD5 C6 E5 0B    	je gettxt_CR
0262+  0BD8 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0BD9 3E          	mov [d], al
0264+  0BDA 79          	inc d
0265+  0BDB 0A A7 0B    	jmp gettxt_loop
0266+  0BDE             gettxt_LF:
0267+  0BDE 19 0A       	mov al, $0A
0268+  0BE0 3E          	mov [d], al
0269+  0BE1 79          	inc d
0270+  0BE2 0A A7 0B    	jmp gettxt_loop
0271+  0BE5             gettxt_CR:
0272+  0BE5 19 0D       	mov al, $0D
0273+  0BE7 3E          	mov [d], al
0274+  0BE8 79          	inc d
0275+  0BE9 0A A7 0B    	jmp gettxt_loop
0276+  0BEC             gettxt_backspace:
0277+  0BEC 7F          	dec d
0278+  0BED 0A A7 0B    	jmp gettxt_loop
0279+  0BF0             gettxt_end:
0280+  0BF0 19 00       	mov al, 0
0281+  0BF2 3E          	mov [d], al				; terminate string
0282+  0BF3 E7          	pop d
0283+  0BF4 E4          	pop a
0284+  0BF5 09          	ret
0285+  0BF6             
0286+  0BF6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0BF6             ; PRINT NEW LINE
0288+  0BF6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0BF6             printnl:
0290+  0BF6 D7          	push a
0291+  0BF7 10 00 0A    	mov a, $0A00
0292+  0BFA 05 03       	syscall sys_io
0293+  0BFC 10 00 0D    	mov a, $0D00
0294+  0BFF 05 03       	syscall sys_io
0295+  0C01 E4          	pop a
0296+  0C02 09          	ret
0297+  0C03             
0298+  0C03             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0C03             ; strtoint
0300+  0C03             ; 4 digit hex string number in d
0301+  0C03             ; integer returned in A
0302+  0C03             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0C03             strtointx:
0304+  0C03 D8          	push b
0305+  0C04 32          	mov bl, [d]
0306+  0C05 37          	mov bh, bl
0307+  0C06 33 01 00    	mov bl, [d + 1]
0308+  0C09 07 C4 0A    	call atoi				; convert to int in AL
0309+  0C0C 23          	mov ah, al				; move to AH
0310+  0C0D 33 02 00    	mov bl, [d + 2]
0311+  0C10 37          	mov bh, bl
0312+  0C11 33 03 00    	mov bl, [d + 3]
0313+  0C14 07 C4 0A    	call atoi				; convert to int in AL
0314+  0C17 E5          	pop b
0315+  0C18 09          	ret
0316+  0C19             
0317+  0C19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0C19             ; strtoint
0319+  0C19             ; 5 digit base10 string number in d
0320+  0C19             ; integer returned in A
0321+  0C19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0C19             strtoint:
0323+  0C19 E2          	push si
0324+  0C1A D8          	push b
0325+  0C1B D9          	push c
0326+  0C1C DA          	push d
0327+  0C1D 07 44 0A    	call strlen			; get string length in C
0328+  0C20 7E          	dec c
0329+  0C21 FD 4E       	mov si, d
0330+  0C23 12          	mov a, c
0331+  0C24 FD 99       	shl a
0332+  0C26 3B AC 0A    	mov d, table_power
0333+  0C29 59          	add d, a
0334+  0C2A 38 00 00    	mov c, 0
0335+  0C2D             strtoint_L0:
0336+  0C2D F6          	lodsb			; load ASCII to al
0337+  0C2E B9 00       	cmp al, 0
0338+  0C30 C6 43 0C    	je strtoint_end
0339+  0C33 6F 30       	sub al, $30		; make into integer
0340+  0C35 22 00       	mov ah, 0
0341+  0C37 2A          	mov b, [d]
0342+  0C38 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0C39 11          	mov a, b
0344+  0C3A 28          	mov b, c
0345+  0C3B 54          	add a, b
0346+  0C3C 39          	mov c, a
0347+  0C3D 63 02 00    	sub d, 2
0348+  0C40 0A 2D 0C    	jmp strtoint_L0
0349+  0C43             strtoint_end:
0350+  0C43 12          	mov a, c
0351+  0C44 E7          	pop d
0352+  0C45 E6          	pop c
0353+  0C46 E5          	pop b
0354+  0C47 EF          	pop si
0355+  0C48 09          	ret
0356+  0C49             
0357+  0C49             
0358+  0C49             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0C49             ; PRINT NULL TERMINATED STRING
0360+  0C49             ; pointer in D
0361+  0C49             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0C49             puts:
0363+  0C49 D7          	push a
0364+  0C4A DA          	push d
0365+  0C4B             puts_L1:
0366+  0C4B 1E          	mov al, [d]
0367+  0C4C B9 00       	cmp al, 0
0368+  0C4E C6 5A 0C    	jz puts_END
0369+  0C51 23          	mov ah, al
0370+  0C52 19 00       	mov al, 0
0371+  0C54 05 03       	syscall sys_io
0372+  0C56 79          	inc d
0373+  0C57 0A 4B 0C    	jmp puts_L1
0374+  0C5A             puts_END:
0375+  0C5A E7          	pop d
0376+  0C5B E4          	pop a
0377+  0C5C 09          	ret
0378+  0C5D             
0379+  0C5D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0C5D             ; PRINT N SIZE STRING
0381+  0C5D             ; pointer in D
0382+  0C5D             ; size in C
0383+  0C5D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0C5D             putsn:
0385+  0C5D DB          	push al
0386+  0C5E DA          	push d
0387+  0C5F D9          	push c
0388+  0C60             putsn_L0:
0389+  0C60 1E          	mov al, [d]
0390+  0C61 23          	mov ah, al
0391+  0C62 19 00       	mov al, 0
0392+  0C64 05 03       	syscall sys_io
0393+  0C66 79          	inc d
0394+  0C67 7E          	dec c	
0395+  0C68 C2 00 00    	cmp c, 0
0396+  0C6B C7 60 0C    	jne putsn_L0
0397+  0C6E             putsn_end:
0398+  0C6E E6          	pop c
0399+  0C6F E7          	pop d
0400+  0C70 E8          	pop al
0401+  0C71 09          	ret
0402+  0C72             
0403+  0C72             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0C72             ; print 16bit decimal number
0405+  0C72             ; input number in A
0406+  0C72             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0C72             print_u16d:
0408+  0C72 D7          	push a
0409+  0C73 D8          	push b
0410+  0C74 26 10 27    	mov b, 10000
0411+  0C77 AE          	div a, b			; get 10000 coeff.
0412+  0C78 07 9E 0C    	call print_number
0413+  0C7B 11          	mov a, b
0414+  0C7C 26 E8 03    	mov b, 1000
0415+  0C7F AE          	div a, b			; get 10000 coeff.
0416+  0C80 07 9E 0C    	call print_number
0417+  0C83 11          	mov a, b
0418+  0C84 26 64 00    	mov b, 100
0419+  0C87 AE          	div a, b
0420+  0C88 07 9E 0C    	call print_number
0421+  0C8B 11          	mov a, b
0422+  0C8C 26 0A 00    	mov b, 10
0423+  0C8F AE          	div a, b
0424+  0C90 07 9E 0C    	call print_number
0425+  0C93 11          	mov a, b
0426+  0C94 6A 30       	add al, $30
0427+  0C96 23          	mov ah, al
0428+  0C97 19 00       	mov al, 0
0429+  0C99 05 03       	syscall sys_io	; print coeff
0430+  0C9B E5          	pop b
0431+  0C9C E4          	pop a
0432+  0C9D 09          	ret
0433+  0C9E             
0434+  0C9E             
0435+  0C9E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0C9E             ; if A == 0, print space
0437+  0C9E             ; else print A
0438+  0C9E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  0C9E             print_number:
0440+  0C9E 6A 30       	add al, $30
0441+  0CA0 23          	mov ah, al
0442+  0CA1 07 0F 0B    	call putchar
0443+  0CA4 09          	ret
0444+  0CA5             
0445+  0CA5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0CA5             ; PRINT 16BIT HEX INTEGER
0447+  0CA5             ; integer value in reg B
0448+  0CA5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0CA5             print_u16x:
0450+  0CA5 D7          	push a
0451+  0CA6 D8          	push b
0452+  0CA7 DD          	push bl
0453+  0CA8 30          	mov bl, bh
0454+  0CA9 07 D6 0A    	call itoa				; convert bh to char in A
0455+  0CAC 2F          	mov bl, al				; save al
0456+  0CAD 19 00       	mov al, 0
0457+  0CAF 05 03       	syscall sys_io				; display AH
0458+  0CB1 24          	mov ah, bl				; retrieve al
0459+  0CB2 19 00       	mov al, 0
0460+  0CB4 05 03       	syscall sys_io				; display AL
0461+  0CB6             
0462+  0CB6 EA          	pop bl
0463+  0CB7 07 D6 0A    	call itoa				; convert bh to char in A
0464+  0CBA 2F          	mov bl, al				; save al
0465+  0CBB 19 00       	mov al, 0
0466+  0CBD 05 03       	syscall sys_io				; display AH
0467+  0CBF 24          	mov ah, bl				; retrieve al
0468+  0CC0 19 00       	mov al, 0
0469+  0CC2 05 03       	syscall sys_io				; display AL
0470+  0CC4             
0471+  0CC4 E5          	pop b
0472+  0CC5 E4          	pop a
0473+  0CC6 09          	ret
0474+  0CC7             
0475+  0CC7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0CC7             ; INPUT 16BIT HEX INTEGER
0477+  0CC7             ; read 16bit integer into A
0478+  0CC7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0CC7             scan_u16x:
0480+  0CC7 F8 10 00    	enter 16
0481+  0CCA D8          	push b
0482+  0CCB DA          	push d
0483+  0CCC             
0484+  0CCC FA F1 FF    	lea d, [bp + -15]
0485+  0CCF 07 16 0B    	call gets				; get number
0486+  0CD2             
0487+  0CD2 32          	mov bl, [d]
0488+  0CD3 37          	mov bh, bl
0489+  0CD4 33 01 00    	mov bl, [d + 1]
0490+  0CD7 07 C4 0A    	call atoi				; convert to int in AL
0491+  0CDA 23          	mov ah, al				; move to AH
0492+  0CDB             
0493+  0CDB 33 02 00    	mov bl, [d + 2]
0494+  0CDE 37          	mov bh, bl
0495+  0CDF 33 03 00    	mov bl, [d + 3]
0496+  0CE2 07 C4 0A    	call atoi				; convert to int in AL
0497+  0CE5             
0498+  0CE5 E7          	pop d
0499+  0CE6 E5          	pop b
0500+  0CE7 F9          	leave
0501+  0CE8 09          	ret
0502+  0CE9             
0503+  0CE9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0CE9             ; PRINT 8bit HEX INTEGER
0505+  0CE9             ; integer value in reg bl
0506+  0CE9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0CE9             print_u8x:
0508+  0CE9 D7          	push a
0509+  0CEA DD          	push bl
0510+  0CEB             
0511+  0CEB 07 D6 0A    	call itoa				; convert bl to char in A
0512+  0CEE 2F          	mov bl, al				; save al
0513+  0CEF 19 00       	mov al, 0
0514+  0CF1 05 03       	syscall sys_io				; display AH
0515+  0CF3 24          	mov ah, bl				; retrieve al
0516+  0CF4 19 00       	mov al, 0
0517+  0CF6 05 03       	syscall sys_io				; display AL
0518+  0CF8             
0519+  0CF8 EA          	pop bl
0520+  0CF9 E4          	pop a
0521+  0CFA 09          	ret
0522+  0CFB             
0523+  0CFB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0CFB             ; print 8bit decimal unsigned number
0525+  0CFB             ; input number in AL
0526+  0CFB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0CFB             print_u8d:
0528+  0CFB D7          	push a
0529+  0CFC D8          	push b
0530+  0CFD             
0531+  0CFD 22 00       	mov ah, 0
0532+  0CFF 26 64 00    	mov b, 100
0533+  0D02 AE          	div a, b
0534+  0D03 D8          	push b			; save remainder
0535+  0D04 B9 00       	cmp al, 0
0536+  0D06 C6 10 0D    	je skip100
0537+  0D09 6A 30       	add al, $30
0538+  0D0B 23          	mov ah, al
0539+  0D0C 19 00       	mov al, 0
0540+  0D0E 05 03       	syscall sys_io	; print coeff
0541+  0D10             skip100:
0542+  0D10 E4          	pop a
0543+  0D11 22 00       	mov ah, 0
0544+  0D13 26 0A 00    	mov b, 10
0545+  0D16 AE          	div a, b
0546+  0D17 D8          	push b			; save remainder
0547+  0D18 B9 00       	cmp al, 0
0548+  0D1A C6 24 0D    	je skip10
0549+  0D1D 6A 30       	add al, $30
0550+  0D1F 23          	mov ah, al
0551+  0D20 19 00       	mov al, 0
0552+  0D22 05 03       	syscall sys_io	; print coeff
0553+  0D24             skip10:
0554+  0D24 E4          	pop a
0555+  0D25 1B          	mov al, bl
0556+  0D26 6A 30       	add al, $30
0557+  0D28 23          	mov ah, al
0558+  0D29 19 00       	mov al, 0
0559+  0D2B 05 03       	syscall sys_io	; print coeff
0560+  0D2D E5          	pop b
0561+  0D2E E4          	pop a
0562+  0D2F 09          	ret
0563+  0D30             
0564+  0D30             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0D30             ; INPUT 8BIT HEX INTEGER
0566+  0D30             ; read 8bit integer into AL
0567+  0D30             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0D30             scan_u8x:
0569+  0D30 F8 04 00    	enter 4
0570+  0D33 D8          	push b
0571+  0D34 DA          	push d
0572+  0D35             
0573+  0D35 FA FD FF    	lea d, [bp + -3]
0574+  0D38 07 16 0B    	call gets				; get number
0575+  0D3B             
0576+  0D3B 32          	mov bl, [d]
0577+  0D3C 37          	mov bh, bl
0578+  0D3D 33 01 00    	mov bl, [d + 1]
0579+  0D40 07 C4 0A    	call atoi				; convert to int in AL
0580+  0D43             
0581+  0D43 E7          	pop d
0582+  0D44 E5          	pop b
0583+  0D45 F9          	leave
0584+  0D46 09          	ret
0585+  0D47             
0586+  0D47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0D47             ; input decimal number
0588+  0D47             ; result in A
0589+  0D47             ; 655'\0'
0590+  0D47             ; low--------high
0591+  0D47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  0D47             scan_u16d:
0593+  0D47 F8 08 00    	enter 8
0594+  0D4A E2          	push si
0595+  0D4B D8          	push b
0596+  0D4C D9          	push c
0597+  0D4D DA          	push d
0598+  0D4E FA F9 FF    	lea d, [bp +- 7]
0599+  0D51 07 16 0B    	call gets
0600+  0D54 07 44 0A    	call strlen			; get string length in C
0601+  0D57 7E          	dec c
0602+  0D58 FD 4E       	mov si, d
0603+  0D5A 12          	mov a, c
0604+  0D5B FD 99       	shl a
0605+  0D5D 3B AC 0A    	mov d, table_power
0606+  0D60 59          	add d, a
0607+  0D61 38 00 00    	mov c, 0
0608+  0D64             mul_loop:
0609+  0D64 F6          	lodsb			; load ASCII to al
0610+  0D65 B9 00       	cmp al, 0
0611+  0D67 C6 7A 0D    	je mul_exit
0612+  0D6A 6F 30       	sub al, $30		; make into integer
0613+  0D6C 22 00       	mov ah, 0
0614+  0D6E 2A          	mov b, [d]
0615+  0D6F AC          	mul a, b			; result in B since it fits in 16bits
0616+  0D70 11          	mov a, b
0617+  0D71 28          	mov b, c
0618+  0D72 54          	add a, b
0619+  0D73 39          	mov c, a
0620+  0D74 63 02 00    	sub d, 2
0621+  0D77 0A 64 0D    	jmp mul_loop
0622+  0D7A             mul_exit:
0623+  0D7A 12          	mov a, c
0624+  0D7B E7          	pop d
0625+  0D7C E6          	pop c
0626+  0D7D E5          	pop b
0627+  0D7E EF          	pop si
0628+  0D7F F9          	leave
0629+  0D80 09          	ret
0888   0D81             ; --- END INCLUDE BLOCK
0889   0D81             
0890   0D81             
0891   0D81             .end
tasm: Number of errors = 0
