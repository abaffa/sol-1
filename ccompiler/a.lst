0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 F9            leave
0012   0406 05 0B         syscall sys_terminate_proc
0013   0408             
0014   0408             scann:
0015   0408 D2            push bp
0016   0409 9B            mov bp, sp
0017   040A 52 02 00      sub sp, 2 ; m
0018   040D             
0019   040D             ; --- BEGIN INLINE ASM BLOCK
0020   040D 07 7F 07      call scan_u16d
0021   0410 45 FF FF      mov [bp + -1], a
0022   0413             ; --- END INLINE ASM BLOCK
0023   0413             
0024   0413 FA 05 00      lea d, [bp + 5] ; n
0025   0416 2A            mov b, [d]
0026   0417 D8            push b
0027   0418 2C FF FF      mov b, [bp + -1] ; m
0028   041B E7            pop d
0029   041C 11            mov a, b
0030   041D 43            mov [d], a
0031   041E F9            leave
0032   041F 09            ret
0033   0420             
0034   0420             printn:
0035   0420 D2            push bp
0036   0421 9B            mov bp, sp
0037   0422             
0038   0422             ; --- BEGIN INLINE ASM BLOCK
0039   0422 17 05 00      mov a, [bp + 5]
0040   0425 07 AA 06      call print_u16d
0041   0428             ; --- END INLINE ASM BLOCK
0042   0428             
0043   0428 F9            leave
0044   0429 09            ret
0045   042A             
0046   042A             print:
0047   042A D2            push bp
0048   042B 9B            mov bp, sp
0049   042C             
0050   042C             ; --- BEGIN INLINE ASM BLOCK
0051   042C 17 05 00      mov a, [bp + 5]
0052   042F 3C            mov d, a
0053   0430 07 81 06      call puts
0054   0433             ; --- END INLINE ASM BLOCK
0055   0433             
0056   0433 F9            leave
0057   0434 09            ret
0058   0435             ; --- END TEXT BLOCK
0059   0435             
0060   0435             ; --- BEGIN DATA BLOCK
0061   0435             ; --- END DATA BLOCK
0062   0435             
0063   0435             ; --- BEGIN INCLUDE BLOCK
0064   0435             .include "lib/stdio.asm"
0001+  0435             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0435             ; stdio.s
0003+  0435             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0435             .include "lib/string.asm"
0001++ 0435             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0435             ; string.s
0003++ 0435             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0435             
0005++ 0435             
0006++ 0435             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0435             ; strrev
0008++ 0435             ; reverse a string
0009++ 0435             ; D = string address
0010++ 0435             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0435             ; 01234
0012++ 0435             strrev:
0013++ 0435 4B          	pusha
0014++ 0436 07 7C 04    	call strlen	; length in C
0015++ 0439 12          	mov a, c
0016++ 043A AF 01 00    	cmp a, 1
0017++ 043D D0 57 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0440 7D          	dec a
0019++ 0441 FD 4E       	mov si, d	; beginning of string
0020++ 0443 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0445 59          	add d, a	; end of string
0022++ 0446 12          	mov a, c
0023++ 0447 FD 9B       	shr a		; divide by 2
0024++ 0449 39          	mov c, a	; C now counts the steps
0025++ 044A             strrev_L0:
0026++ 044A 32          	mov bl, [d]	; save load right-side char into BL
0027++ 044B F6          	lodsb		; load left-side char into AL; increase SI
0028++ 044C 3E          	mov [d], al	; store left char into right side
0029++ 044D 1B          	mov al, bl
0030++ 044E F7          	stosb		; store right-side char into left-side; increase DI
0031++ 044F 7E          	dec c
0032++ 0450 7F          	dec d
0033++ 0451 C2 00 00    	cmp c, 0
0034++ 0454 C7 4A 04    	jne strrev_L0
0035++ 0457             strrev_end:
0036++ 0457 4C          	popa
0037++ 0458 09          	ret
0038++ 0459             	
0039++ 0459             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0459             ; strchr
0041++ 0459             ; search string in D for char in AL
0042++ 0459             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0459             strchr:
0044++ 0459             strchr_L0:
0045++ 0459 32          	mov bl, [d]
0046++ 045A C1 00       	cmp bl, 0
0047++ 045C C6 67 04    	je strchr_end
0048++ 045F BA          	cmp al, bl
0049++ 0460 C6 67 04    	je strchr_end
0050++ 0463 79          	inc d
0051++ 0464 0A 59 04    	jmp strchr_L0
0052++ 0467             strchr_end:
0053++ 0467 1B          	mov al, bl
0054++ 0468 09          	ret
0055++ 0469             
0056++ 0469             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0469             ; strstr
0058++ 0469             ; find sub-string
0059++ 0469             ; str1 in SI
0060++ 0469             ; str2 in DI
0061++ 0469             ; SI points to end of source string
0062++ 0469             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0469             strstr:
0064++ 0469 DB          	push al
0065++ 046A DA          	push d
0066++ 046B E3          	push di
0067++ 046C             strstr_loop:
0068++ 046C F3          	cmpsb					; compare a byte of the strings
0069++ 046D C7 78 04    	jne strstr_ret
0070++ 0470 FC 00 00    	lea d, [di + 0]
0071++ 0473 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0475 C7 6C 04    	jne strstr_loop				; equal chars but not at end
0073++ 0478             strstr_ret:
0074++ 0478 F0          	pop di
0075++ 0479 E7          	pop d
0076++ 047A E8          	pop al
0077++ 047B 09          	ret
0078++ 047C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 047C             ; length of null terminated string
0080++ 047C             ; result in C
0081++ 047C             ; pointer in D
0082++ 047C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 047C             strlen:
0084++ 047C DA          	push d
0085++ 047D 38 00 00    	mov c, 0
0086++ 0480             strlen_L1:
0087++ 0480 BD 00       	cmp byte [d], 0
0088++ 0482 C6 8A 04    	je strlen_ret
0089++ 0485 79          	inc d
0090++ 0486 78          	inc c
0091++ 0487 0A 80 04    	jmp strlen_L1
0092++ 048A             strlen_ret:
0093++ 048A E7          	pop d
0094++ 048B 09          	ret
0095++ 048C             
0096++ 048C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 048C             ; STRCMP
0098++ 048C             ; compare two strings
0099++ 048C             ; str1 in SI
0100++ 048C             ; str2 in DI
0101++ 048C             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 048C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 048C             strcmp:
0104++ 048C DB          	push al
0105++ 048D DA          	push d
0106++ 048E E3          	push di
0107++ 048F E2          	push si
0108++ 0490             strcmp_loop:
0109++ 0490 F3          	cmpsb					; compare a byte of the strings
0110++ 0491 C7 9C 04    	jne strcmp_ret
0111++ 0494 FB FF FF    	lea d, [si +- 1]
0112++ 0497 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0499 C7 90 04    	jne strcmp_loop				; equal chars but not at end
0114++ 049C             strcmp_ret:
0115++ 049C EF          	pop si
0116++ 049D F0          	pop di
0117++ 049E E7          	pop d
0118++ 049F E8          	pop al
0119++ 04A0 09          	ret
0120++ 04A1             
0121++ 04A1             
0122++ 04A1             ; STRCPY
0123++ 04A1             ; copy null terminated string from SI to DI
0124++ 04A1             ; source in SI
0125++ 04A1             ; destination in DI
0126++ 04A1             strcpy:
0127++ 04A1 E2          	push si
0128++ 04A2 E3          	push di
0129++ 04A3 DB          	push al
0130++ 04A4             strcpy_L1:
0131++ 04A4 F6          	lodsb
0132++ 04A5 F7          	stosb
0133++ 04A6 B9 00       	cmp al, 0
0134++ 04A8 C7 A4 04    	jne strcpy_L1
0135++ 04AB             strcpy_end:
0136++ 04AB E8          	pop al
0137++ 04AC F0          	pop di
0138++ 04AD EF          	pop si
0139++ 04AE 09          	ret
0140++ 04AF             
0141++ 04AF             ; STRCAT
0142++ 04AF             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04AF             ; source in SI
0144++ 04AF             ; destination in DI
0145++ 04AF             strcat:
0146++ 04AF E2          	push si
0147++ 04B0 E3          	push di
0148++ 04B1 D7          	push a
0149++ 04B2 DA          	push d
0150++ 04B3 50          	mov a, di
0151++ 04B4 3C          	mov d, a
0152++ 04B5             strcat_goto_end_L1:
0153++ 04B5 BD 00       	cmp byte[d], 0
0154++ 04B7 C6 BE 04    	je strcat_start
0155++ 04BA 79          	inc d
0156++ 04BB 0A B5 04    	jmp strcat_goto_end_L1
0157++ 04BE             strcat_start:
0158++ 04BE FD 50       	mov di, d
0159++ 04C0             strcat_L1:
0160++ 04C0 F6          	lodsb
0161++ 04C1 F7          	stosb
0162++ 04C2 B9 00       	cmp al, 0
0163++ 04C4 C7 C0 04    	jne strcat_L1
0164++ 04C7             strcat_end:
0165++ 04C7 E7          	pop d
0166++ 04C8 E4          	pop a
0167++ 04C9 F0          	pop di
0168++ 04CA EF          	pop si
0169++ 04CB 09          	ret
0005+  04CC             
0006+  04CC 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  04D0 34 35 36 37 
0006+  04D4 38 39 41 42 
0006+  04D8 43 44 45 46 
0007+  04DC 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  04E0 1B 5B 48 00 
0008+  04E4             
0009+  04E4 01 00       table_power:.dw 1
0010+  04E6 0A 00       			.dw 10
0011+  04E8 64 00       			.dw 100
0012+  04EA E8 03       			.dw 1000
0013+  04EC 10 27       			.dw 10000
0014+  04EE             
0015+  04EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  04EE             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  04EE             ; ASCII in BL
0018+  04EE             ; result in AL
0019+  04EE             ; ascii for F = 0100 0110
0020+  04EE             ; ascii for 9 = 0011 1001
0021+  04EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  04EE             hex_ascii_encode:
0023+  04EE 1B          	mov al, bl
0024+  04EF 93 40       	test al, $40				; test if letter or number
0025+  04F1 C7 F7 04    	jnz hex_letter
0026+  04F4 87 0F       	and al, $0F				; get number
0027+  04F6 09          	ret
0028+  04F7             hex_letter:
0029+  04F7 87 0F       	and al, $0F				; get letter
0030+  04F9 6A 09       	add al, 9
0031+  04FB 09          	ret
0032+  04FC             
0033+  04FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  04FC             ; ATOI
0035+  04FC             ; 2 letter hex string in B
0036+  04FC             ; 8bit integer returned in AL
0037+  04FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  04FC             atoi:
0039+  04FC D8          	push b
0040+  04FD 07 EE 04    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0500 30          	mov bl, bh
0042+  0501 DB          	push al					; save a
0043+  0502 07 EE 04    	call hex_ascii_encode
0044+  0505 EA          	pop bl	
0045+  0506 FD 9E 04    	shl al, 4
0046+  0509 8C          	or al, bl
0047+  050A E5          	pop b
0048+  050B 09          	ret	
0049+  050C             
0050+  050C             
0051+  050C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  050C             ; printf
0053+  050C             ; no need for explanations!
0054+  050C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  050C             printf:
0056+  050C 09          	ret
0057+  050D             
0058+  050D             
0059+  050D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  050D             ; scanf
0061+  050D             ; no need for explanations!
0062+  050D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  050D             scanf:
0064+  050D 09          	ret
0065+  050E             
0066+  050E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  050E             ; ITOA
0068+  050E             ; 8bit value in BL
0069+  050E             ; 2 byte ASCII result in A
0070+  050E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  050E             itoa:
0072+  050E DA          	push d
0073+  050F D8          	push b
0074+  0510 A7 00       	mov bh, 0
0075+  0512 FD A4 04    	shr bl, 4	
0076+  0515 74          	mov d, b
0077+  0516 1F CC 04    	mov al, [d + s_hex_digits]
0078+  0519 23          	mov ah, al
0079+  051A             	
0080+  051A E5          	pop b
0081+  051B D8          	push b
0082+  051C A7 00       	mov bh, 0
0083+  051E FD 87 0F    	and bl, $0F
0084+  0521 74          	mov d, b
0085+  0522 1F CC 04    	mov al, [d + s_hex_digits]
0086+  0525 E5          	pop b
0087+  0526 E7          	pop d
0088+  0527 09          	ret
0089+  0528             
0090+  0528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0528             ; HEX STRING TO BINARY
0092+  0528             ; di = destination address
0093+  0528             ; si = source
0094+  0528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0528             hex_to_int:
0096+  0528             hex_to_int_L1:
0097+  0528 F6          	lodsb					; load from [SI] to AL
0098+  0529 B9 00       	cmp al, 0				; check if ASCII 0
0099+  052B C6 38 05    	jz hex_to_int_ret
0100+  052E 36          	mov bh, al
0101+  052F F6          	lodsb
0102+  0530 2F          	mov bl, al
0103+  0531 07 FC 04    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0534 F7          	stosb					; store AL to [DI]
0105+  0535 0A 28 05    	jmp hex_to_int_L1
0106+  0538             hex_to_int_ret:
0107+  0538 09          	ret		
0108+  0539             
0109+  0539             
0110+  0539             
0111+  0539             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0539             ; GETCHAR
0113+  0539             ; char in ah
0114+  0539             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0539             getchar:
0116+  0539 DB          	push al
0117+  053A             getchar_retry:
0118+  053A FD 0C       	sti
0119+  053C 19 01       	mov al, 1
0120+  053E 05 03       	syscall sys_io			; receive in AH
0121+  0540 B9 00       	cmp al, 0			; check if any char was receive
0122+  0542 C6 3A 05    	je getchar_retry
0123+  0545 E8          	pop al
0124+  0546 09          	ret
0125+  0547             
0126+  0547             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0547             ; PUTCHAR
0128+  0547             ; char in ah
0129+  0547             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0547             putchar:
0131+  0547 D7          	push a
0132+  0548 19 00       	mov al, 0
0133+  054A 05 03       	syscall sys_io			; char in AH
0134+  054C E4          	pop a
0135+  054D 09          	ret
0136+  054E             
0137+  054E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  054E             ;; INPUT A STRING
0139+  054E             ;; terminates with null
0140+  054E             ;; pointer in D
0141+  054E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  054E             gets:
0143+  054E D7          	push a
0144+  054F DA          	push d
0145+  0550             gets_loop:
0146+  0550 FD 0C       	sti
0147+  0552 19 01       	mov al, 1
0148+  0554 05 03       	syscall sys_io			; receive in AH
0149+  0556 B9 00       	cmp al, 0				; check error code (AL)
0150+  0558 C6 50 05    	je gets_loop			; if no char received, retry
0151+  055B             
0152+  055B 76 1B       	cmp ah, 27
0153+  055D C6 7E 05    	je gets_telnet_escape
0154+  0560 76 0A       	cmp ah, $0A				; LF
0155+  0562 C6 D7 05    	je gets_end
0156+  0565 76 0D       	cmp ah, $0D				; CR
0157+  0567 C6 D7 05    	je gets_end
0158+  056A 76 5C       	cmp ah, $5C				; '\\'
0159+  056C C6 AE 05    	je gets_escape
0160+  056F             	
0161+  056F 76 08       	cmp ah, $08			; check for backspace
0162+  0571 C6 7A 05    	je gets_backspace
0163+  0574             
0164+  0574 1A          	mov al, ah
0165+  0575 3E          	mov [d], al
0166+  0576 79          	inc d
0167+  0577 0A 50 05    	jmp gets_loop
0168+  057A             gets_backspace:
0169+  057A 7F          	dec d
0170+  057B 0A 50 05    	jmp gets_loop
0171+  057E             gets_telnet_escape:
0172+  057E FD 0C       	sti
0173+  0580 19 01       	mov al, 1
0174+  0582 05 03       	syscall sys_io				; receive in AH without echo
0175+  0584 B9 00       	cmp al, 0					; check error code (AL)
0176+  0586 C6 7E 05    	je gets_telnet_escape		; if no char received, retry
0177+  0589 76 5B       	cmp ah, '['
0178+  058B C7 50 05    	jne gets_loop
0179+  058E             gets_telnet_escape_phase2:
0180+  058E FD 0C       	sti
0181+  0590 19 01       	mov al, 1
0182+  0592 05 03       	syscall sys_io					; receive in AH without echo
0183+  0594 B9 00       	cmp al, 0						; check error code (AL)
0184+  0596 C6 8E 05    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0599 76 44       	cmp ah, 'D'
0186+  059B C6 A6 05    	je gets_left_arrow
0187+  059E 76 43       	cmp ah, 'C'
0188+  05A0 C6 AA 05    	je gets_right_arrow
0189+  05A3 0A 50 05    	jmp gets_loop
0190+  05A6             gets_left_arrow:
0191+  05A6 7F          	dec d
0192+  05A7 0A 50 05    	jmp gets_loop
0193+  05AA             gets_right_arrow:
0194+  05AA 79          	inc d
0195+  05AB 0A 50 05    	jmp gets_loop
0196+  05AE             gets_escape:
0197+  05AE FD 0C       	sti
0198+  05B0 19 01       	mov al, 1
0199+  05B2 05 03       	syscall sys_io			; receive in AH
0200+  05B4 B9 00       	cmp al, 0				; check error code (AL)
0201+  05B6 C6 AE 05    	je gets_escape			; if no char received, retry
0202+  05B9 76 6E       	cmp ah, 'n'
0203+  05BB C6 C9 05    	je gets_LF
0204+  05BE 76 72       	cmp ah, 'r'
0205+  05C0 C6 D0 05    	je gets_CR
0206+  05C3 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  05C4 3E          	mov [d], al
0208+  05C5 79          	inc d
0209+  05C6 0A 50 05    	jmp gets_loop
0210+  05C9             gets_LF:
0211+  05C9 19 0A       	mov al, $0A
0212+  05CB 3E          	mov [d], al
0213+  05CC 79          	inc d
0214+  05CD 0A 50 05    	jmp gets_loop
0215+  05D0             gets_CR:
0216+  05D0 19 0D       	mov al, $0D
0217+  05D2 3E          	mov [d], al
0218+  05D3 79          	inc d
0219+  05D4 0A 50 05    	jmp gets_loop
0220+  05D7             gets_end:
0221+  05D7 19 00       	mov al, 0
0222+  05D9 3E          	mov [d], al				; terminate string
0223+  05DA E7          	pop d
0224+  05DB E4          	pop a
0225+  05DC 09          	ret
0226+  05DD             
0227+  05DD             
0228+  05DD             
0229+  05DD             
0230+  05DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  05DD             ;; INPUT TEXT
0232+  05DD             ;; terminated with CTRL+D
0233+  05DD             ;; pointer in D
0234+  05DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  05DD             gettxt:
0236+  05DD D7          	push a
0237+  05DE DA          	push d
0238+  05DF             gettxt_loop:
0239+  05DF 19 01       	mov al, 1
0240+  05E1 05 03       	syscall sys_io			; receive in AH
0241+  05E3 B9 00       	cmp al, 0				; check error code (AL)
0242+  05E5 C6 DF 05    	je gettxt_loop		; if no char received, retry
0243+  05E8 76 04       	cmp ah, 4			; EOT
0244+  05EA C6 28 06    	je gettxt_end
0245+  05ED 76 08       	cmp ah, $08			; check for backspace
0246+  05EF C6 24 06    	je gettxt_backspace
0247+  05F2 76 5C       	cmp ah, $5C				; '\\'
0248+  05F4 C6 FD 05    	je gettxt_escape
0249+  05F7 1A          	mov al, ah
0250+  05F8 3E          	mov [d], al
0251+  05F9 79          	inc d
0252+  05FA 0A DF 05    	jmp gettxt_loop
0253+  05FD             gettxt_escape:
0254+  05FD 19 01       	mov al, 1
0255+  05FF 05 03       	syscall sys_io			; receive in AH
0256+  0601 B9 00       	cmp al, 0				; check error code (AL)
0257+  0603 C6 FD 05    	je gettxt_escape		; if no char received, retry
0258+  0606 76 6E       	cmp ah, 'n'
0259+  0608 C6 16 06    	je gettxt_LF
0260+  060B 76 72       	cmp ah, 'r'
0261+  060D C6 1D 06    	je gettxt_CR
0262+  0610 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0611 3E          	mov [d], al
0264+  0612 79          	inc d
0265+  0613 0A DF 05    	jmp gettxt_loop
0266+  0616             gettxt_LF:
0267+  0616 19 0A       	mov al, $0A
0268+  0618 3E          	mov [d], al
0269+  0619 79          	inc d
0270+  061A 0A DF 05    	jmp gettxt_loop
0271+  061D             gettxt_CR:
0272+  061D 19 0D       	mov al, $0D
0273+  061F 3E          	mov [d], al
0274+  0620 79          	inc d
0275+  0621 0A DF 05    	jmp gettxt_loop
0276+  0624             gettxt_backspace:
0277+  0624 7F          	dec d
0278+  0625 0A DF 05    	jmp gettxt_loop
0279+  0628             gettxt_end:
0280+  0628 19 00       	mov al, 0
0281+  062A 3E          	mov [d], al				; terminate string
0282+  062B E7          	pop d
0283+  062C E4          	pop a
0284+  062D 09          	ret
0285+  062E             
0286+  062E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  062E             ; PRINT NEW LINE
0288+  062E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  062E             printnl:
0290+  062E D7          	push a
0291+  062F 10 00 0A    	mov a, $0A00
0292+  0632 05 03       	syscall sys_io
0293+  0634 10 00 0D    	mov a, $0D00
0294+  0637 05 03       	syscall sys_io
0295+  0639 E4          	pop a
0296+  063A 09          	ret
0297+  063B             
0298+  063B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  063B             ; strtoint
0300+  063B             ; 4 digit hex string number in d
0301+  063B             ; integer returned in A
0302+  063B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  063B             strtointx:
0304+  063B D8          	push b
0305+  063C 32          	mov bl, [d]
0306+  063D 37          	mov bh, bl
0307+  063E 33 01 00    	mov bl, [d + 1]
0308+  0641 07 FC 04    	call atoi				; convert to int in AL
0309+  0644 23          	mov ah, al				; move to AH
0310+  0645 33 02 00    	mov bl, [d + 2]
0311+  0648 37          	mov bh, bl
0312+  0649 33 03 00    	mov bl, [d + 3]
0313+  064C 07 FC 04    	call atoi				; convert to int in AL
0314+  064F E5          	pop b
0315+  0650 09          	ret
0316+  0651             
0317+  0651             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0651             ; strtoint
0319+  0651             ; 5 digit base10 string number in d
0320+  0651             ; integer returned in A
0321+  0651             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0651             strtoint:
0323+  0651 E2          	push si
0324+  0652 D8          	push b
0325+  0653 D9          	push c
0326+  0654 DA          	push d
0327+  0655 07 7C 04    	call strlen			; get string length in C
0328+  0658 7E          	dec c
0329+  0659 FD 4E       	mov si, d
0330+  065B 12          	mov a, c
0331+  065C FD 99       	shl a
0332+  065E 3B E4 04    	mov d, table_power
0333+  0661 59          	add d, a
0334+  0662 38 00 00    	mov c, 0
0335+  0665             strtoint_L0:
0336+  0665 F6          	lodsb			; load ASCII to al
0337+  0666 B9 00       	cmp al, 0
0338+  0668 C6 7B 06    	je strtoint_end
0339+  066B 6F 30       	sub al, $30		; make into integer
0340+  066D 22 00       	mov ah, 0
0341+  066F 2A          	mov b, [d]
0342+  0670 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0671 11          	mov a, b
0344+  0672 28          	mov b, c
0345+  0673 54          	add a, b
0346+  0674 39          	mov c, a
0347+  0675 63 02 00    	sub d, 2
0348+  0678 0A 65 06    	jmp strtoint_L0
0349+  067B             strtoint_end:
0350+  067B 12          	mov a, c
0351+  067C E7          	pop d
0352+  067D E6          	pop c
0353+  067E E5          	pop b
0354+  067F EF          	pop si
0355+  0680 09          	ret
0356+  0681             
0357+  0681             
0358+  0681             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0681             ; PRINT NULL TERMINATED STRING
0360+  0681             ; pointer in D
0361+  0681             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0681             puts:
0363+  0681 D7          	push a
0364+  0682 DA          	push d
0365+  0683             puts_L1:
0366+  0683 1E          	mov al, [d]
0367+  0684 B9 00       	cmp al, 0
0368+  0686 C6 92 06    	jz puts_END
0369+  0689 23          	mov ah, al
0370+  068A 19 00       	mov al, 0
0371+  068C 05 03       	syscall sys_io
0372+  068E 79          	inc d
0373+  068F 0A 83 06    	jmp puts_L1
0374+  0692             puts_END:
0375+  0692 E7          	pop d
0376+  0693 E4          	pop a
0377+  0694 09          	ret
0378+  0695             
0379+  0695             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0695             ; PRINT N SIZE STRING
0381+  0695             ; pointer in D
0382+  0695             ; size in C
0383+  0695             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0695             putsn:
0385+  0695 DB          	push al
0386+  0696 DA          	push d
0387+  0697 D9          	push c
0388+  0698             putsn_L0:
0389+  0698 1E          	mov al, [d]
0390+  0699 23          	mov ah, al
0391+  069A 19 00       	mov al, 0
0392+  069C 05 03       	syscall sys_io
0393+  069E 79          	inc d
0394+  069F 7E          	dec c	
0395+  06A0 C2 00 00    	cmp c, 0
0396+  06A3 C7 98 06    	jne putsn_L0
0397+  06A6             putsn_end:
0398+  06A6 E6          	pop c
0399+  06A7 E7          	pop d
0400+  06A8 E8          	pop al
0401+  06A9 09          	ret
0402+  06AA             
0403+  06AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  06AA             ; print 16bit decimal number
0405+  06AA             ; input number in A
0406+  06AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  06AA             print_u16d:
0408+  06AA D7          	push a
0409+  06AB D8          	push b
0410+  06AC 26 10 27    	mov b, 10000
0411+  06AF AE          	div a, b			; get 10000 coeff.
0412+  06B0 07 D6 06    	call print_number
0413+  06B3 11          	mov a, b
0414+  06B4 26 E8 03    	mov b, 1000
0415+  06B7 AE          	div a, b			; get 10000 coeff.
0416+  06B8 07 D6 06    	call print_number
0417+  06BB 11          	mov a, b
0418+  06BC 26 64 00    	mov b, 100
0419+  06BF AE          	div a, b
0420+  06C0 07 D6 06    	call print_number
0421+  06C3 11          	mov a, b
0422+  06C4 26 0A 00    	mov b, 10
0423+  06C7 AE          	div a, b
0424+  06C8 07 D6 06    	call print_number
0425+  06CB 11          	mov a, b
0426+  06CC 6A 30       	add al, $30
0427+  06CE 23          	mov ah, al
0428+  06CF 19 00       	mov al, 0
0429+  06D1 05 03       	syscall sys_io	; print coeff
0430+  06D3 E5          	pop b
0431+  06D4 E4          	pop a
0432+  06D5 09          	ret
0433+  06D6             
0434+  06D6             
0435+  06D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  06D6             ; if A == 0, print space
0437+  06D6             ; else print A
0438+  06D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  06D6             print_number:
0440+  06D6 6A 30       	add al, $30
0441+  06D8 23          	mov ah, al
0442+  06D9 07 47 05    	call putchar
0443+  06DC 09          	ret
0444+  06DD             
0445+  06DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  06DD             ; PRINT 16BIT HEX INTEGER
0447+  06DD             ; integer value in reg B
0448+  06DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  06DD             print_u16x:
0450+  06DD D7          	push a
0451+  06DE D8          	push b
0452+  06DF DD          	push bl
0453+  06E0 30          	mov bl, bh
0454+  06E1 07 0E 05    	call itoa				; convert bh to char in A
0455+  06E4 2F          	mov bl, al				; save al
0456+  06E5 19 00       	mov al, 0
0457+  06E7 05 03       	syscall sys_io				; display AH
0458+  06E9 24          	mov ah, bl				; retrieve al
0459+  06EA 19 00       	mov al, 0
0460+  06EC 05 03       	syscall sys_io				; display AL
0461+  06EE             
0462+  06EE EA          	pop bl
0463+  06EF 07 0E 05    	call itoa				; convert bh to char in A
0464+  06F2 2F          	mov bl, al				; save al
0465+  06F3 19 00       	mov al, 0
0466+  06F5 05 03       	syscall sys_io				; display AH
0467+  06F7 24          	mov ah, bl				; retrieve al
0468+  06F8 19 00       	mov al, 0
0469+  06FA 05 03       	syscall sys_io				; display AL
0470+  06FC             
0471+  06FC E5          	pop b
0472+  06FD E4          	pop a
0473+  06FE 09          	ret
0474+  06FF             
0475+  06FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  06FF             ; INPUT 16BIT HEX INTEGER
0477+  06FF             ; read 16bit integer into A
0478+  06FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  06FF             scan_u16x:
0480+  06FF F8 10 00    	enter 16
0481+  0702 D8          	push b
0482+  0703 DA          	push d
0483+  0704             
0484+  0704 FA F1 FF    	lea d, [bp + -15]
0485+  0707 07 4E 05    	call gets				; get number
0486+  070A             
0487+  070A 32          	mov bl, [d]
0488+  070B 37          	mov bh, bl
0489+  070C 33 01 00    	mov bl, [d + 1]
0490+  070F 07 FC 04    	call atoi				; convert to int in AL
0491+  0712 23          	mov ah, al				; move to AH
0492+  0713             
0493+  0713 33 02 00    	mov bl, [d + 2]
0494+  0716 37          	mov bh, bl
0495+  0717 33 03 00    	mov bl, [d + 3]
0496+  071A 07 FC 04    	call atoi				; convert to int in AL
0497+  071D             
0498+  071D E7          	pop d
0499+  071E E5          	pop b
0500+  071F F9          	leave
0501+  0720 09          	ret
0502+  0721             
0503+  0721             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0721             ; PRINT 8bit HEX INTEGER
0505+  0721             ; integer value in reg bl
0506+  0721             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0721             print_u8x:
0508+  0721 D7          	push a
0509+  0722 DD          	push bl
0510+  0723             
0511+  0723 07 0E 05    	call itoa				; convert bl to char in A
0512+  0726 2F          	mov bl, al				; save al
0513+  0727 19 00       	mov al, 0
0514+  0729 05 03       	syscall sys_io				; display AH
0515+  072B 24          	mov ah, bl				; retrieve al
0516+  072C 19 00       	mov al, 0
0517+  072E 05 03       	syscall sys_io				; display AL
0518+  0730             
0519+  0730 EA          	pop bl
0520+  0731 E4          	pop a
0521+  0732 09          	ret
0522+  0733             
0523+  0733             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0733             ; print 8bit decimal unsigned number
0525+  0733             ; input number in AL
0526+  0733             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0733             print_u8d:
0528+  0733 D7          	push a
0529+  0734 D8          	push b
0530+  0735             
0531+  0735 22 00       	mov ah, 0
0532+  0737 26 64 00    	mov b, 100
0533+  073A AE          	div a, b
0534+  073B D8          	push b			; save remainder
0535+  073C B9 00       	cmp al, 0
0536+  073E C6 48 07    	je skip100
0537+  0741 6A 30       	add al, $30
0538+  0743 23          	mov ah, al
0539+  0744 19 00       	mov al, 0
0540+  0746 05 03       	syscall sys_io	; print coeff
0541+  0748             skip100:
0542+  0748 E4          	pop a
0543+  0749 22 00       	mov ah, 0
0544+  074B 26 0A 00    	mov b, 10
0545+  074E AE          	div a, b
0546+  074F D8          	push b			; save remainder
0547+  0750 B9 00       	cmp al, 0
0548+  0752 C6 5C 07    	je skip10
0549+  0755 6A 30       	add al, $30
0550+  0757 23          	mov ah, al
0551+  0758 19 00       	mov al, 0
0552+  075A 05 03       	syscall sys_io	; print coeff
0553+  075C             skip10:
0554+  075C E4          	pop a
0555+  075D 1B          	mov al, bl
0556+  075E 6A 30       	add al, $30
0557+  0760 23          	mov ah, al
0558+  0761 19 00       	mov al, 0
0559+  0763 05 03       	syscall sys_io	; print coeff
0560+  0765 E5          	pop b
0561+  0766 E4          	pop a
0562+  0767 09          	ret
0563+  0768             
0564+  0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0768             ; INPUT 8BIT HEX INTEGER
0566+  0768             ; read 8bit integer into AL
0567+  0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0768             scan_u8x:
0569+  0768 F8 04 00    	enter 4
0570+  076B D8          	push b
0571+  076C DA          	push d
0572+  076D             
0573+  076D FA FD FF    	lea d, [bp + -3]
0574+  0770 07 4E 05    	call gets				; get number
0575+  0773             
0576+  0773 32          	mov bl, [d]
0577+  0774 37          	mov bh, bl
0578+  0775 33 01 00    	mov bl, [d + 1]
0579+  0778 07 FC 04    	call atoi				; convert to int in AL
0580+  077B             
0581+  077B E7          	pop d
0582+  077C E5          	pop b
0583+  077D F9          	leave
0584+  077E 09          	ret
0585+  077F             
0586+  077F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  077F             ; input decimal number
0588+  077F             ; result in A
0589+  077F             ; 655'\0'
0590+  077F             ; low--------high
0591+  077F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  077F             scan_u16d:
0593+  077F F8 08 00    	enter 8
0594+  0782 E2          	push si
0595+  0783 D8          	push b
0596+  0784 D9          	push c
0597+  0785 DA          	push d
0598+  0786 FA F9 FF    	lea d, [bp +- 7]
0599+  0789 07 4E 05    	call gets
0600+  078C 07 7C 04    	call strlen			; get string length in C
0601+  078F 7E          	dec c
0602+  0790 FD 4E       	mov si, d
0603+  0792 12          	mov a, c
0604+  0793 FD 99       	shl a
0605+  0795 3B E4 04    	mov d, table_power
0606+  0798 59          	add d, a
0607+  0799 38 00 00    	mov c, 0
0608+  079C             mul_loop:
0609+  079C F6          	lodsb			; load ASCII to al
0610+  079D B9 00       	cmp al, 0
0611+  079F C6 B2 07    	je mul_exit
0612+  07A2 6F 30       	sub al, $30		; make into integer
0613+  07A4 22 00       	mov ah, 0
0614+  07A6 2A          	mov b, [d]
0615+  07A7 AC          	mul a, b			; result in B since it fits in 16bits
0616+  07A8 11          	mov a, b
0617+  07A9 28          	mov b, c
0618+  07AA 54          	add a, b
0619+  07AB 39          	mov c, a
0620+  07AC 63 02 00    	sub d, 2
0621+  07AF 0A 9C 07    	jmp mul_loop
0622+  07B2             mul_exit:
0623+  07B2 12          	mov a, c
0624+  07B3 E7          	pop d
0625+  07B4 E6          	pop c
0626+  07B5 E5          	pop b
0627+  07B6 EF          	pop si
0628+  07B7 F9          	leave
0629+  07B8 09          	ret
0065   07B9             ; --- END INCLUDE BLOCK
0066   07B9             
0067   07B9             
0068   07B9             .end
tasm: Number of errors = 0
