0001   0000             ; --- FILENAME: life.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 52 02 00      sub sp, 2 ; j
0012   0408 52 02 00      sub sp, 2 ; n
0013   040B             _for1_init:
0014   040B 26 00 00      mov b, 0
0015   040E D7            push a
0016   040F 11            mov a, b
0017   0410 45 FF FF      mov [bp + -1], a ; i
0018   0413 E4            pop a
0019   0414             _for1_cond:
0020   0414 2C FF FF      mov b, [bp + -1] ; i
0021   0417 D7            push a
0022   0418 11            mov a, b
0023   0419 29 71 0A      mov b, [__SIZE] ; SIZE
0024   041C B0            cmp a, b
0025   041D 0E            lodflgs
0026   041E 2F            mov bl, al
0027   041F FD A2 03      shr al, 3
0028   0422 FD A4 02      shr bl, 2
0029   0425 FD 87 01      and bl, %00000001
0030   0428 90            xor al, bl ; < (signed)
0031   0429 22 00         mov ah, 0
0032   042B 27            mov b, a
0033   042C E4            pop a
0034   042D C0 00 00      cmp b, 0
0035   0430 C6 BA 04      je _for1_exit
0036   0433             _for1_block:
0037   0433             _for2_init:
0038   0433 26 00 00      mov b, 0
0039   0436 D7            push a
0040   0437 11            mov a, b
0041   0438 45 FD FF      mov [bp + -3], a ; j
0042   043B E4            pop a
0043   043C             _for2_cond:
0044   043C 2C FD FF      mov b, [bp + -3] ; j
0045   043F D7            push a
0046   0440 11            mov a, b
0047   0441 29 71 0A      mov b, [__SIZE] ; SIZE
0048   0444 B0            cmp a, b
0049   0445 0E            lodflgs
0050   0446 2F            mov bl, al
0051   0447 FD A2 03      shr al, 3
0052   044A FD A4 02      shr bl, 2
0053   044D FD 87 01      and bl, %00000001
0054   0450 90            xor al, bl ; < (signed)
0055   0451 22 00         mov ah, 0
0056   0453 27            mov b, a
0057   0454 E4            pop a
0058   0455 C0 00 00      cmp b, 0
0059   0458 C6 A8 04      je _for2_exit
0060   045B             _for2_block:
0061   045B 29 B3 10      mov b, [__nextState] ; nextState
0062   045E D7            push a
0063   045F 74            mov d, b
0064   0460 DA            push d
0065   0461 2C FF FF      mov b, [bp + -1] ; i
0066   0464 E7            pop d
0067   0465 10 28 00      mov a, 40
0068   0468 AC            mul a, b
0069   0469 5A            add d, b
0070   046A DA            push d
0071   046B 2C FD FF      mov b, [bp + -3] ; j
0072   046E E7            pop d
0073   046F 10 01 00      mov a, 1
0074   0472 AC            mul a, b
0075   0473 5A            add d, b
0076   0474 E4            pop a
0077   0475 DA            push d
0078   0476 29 F5 16      mov b, [__currState] ; currState
0079   0479 D7            push a
0080   047A 74            mov d, b
0081   047B DA            push d
0082   047C 2C FF FF      mov b, [bp + -1] ; i
0083   047F E7            pop d
0084   0480 10 28 00      mov a, 40
0085   0483 AC            mul a, b
0086   0484 5A            add d, b
0087   0485 DA            push d
0088   0486 2C FD FF      mov b, [bp + -3] ; j
0089   0489 E7            pop d
0090   048A 10 01 00      mov a, 1
0091   048D AC            mul a, b
0092   048E 5A            add d, b
0093   048F E4            pop a
0094   0490 32            mov bl, [d]
0095   0491 A7 00         mov bh, 0
0096   0493 E7            pop d
0097   0494 FD 3E         mov [d], bl
0098   0496             _for2_update:
0099   0496 2C FD FF      mov b, [bp + -3] ; j
0100   0499 D7            push a
0101   049A 11            mov a, b
0102   049B FD 77         inc b
0103   049D D7            push a
0104   049E 11            mov a, b
0105   049F 45 FD FF      mov [bp + -3], a ; j
0106   04A2 E4            pop a
0107   04A3 27            mov b, a
0108   04A4 E4            pop a
0109   04A5 0A 3C 04      jmp _for2_cond
0110   04A8             _for2_exit:
0111   04A8             _for1_update:
0112   04A8 2C FF FF      mov b, [bp + -1] ; i
0113   04AB D7            push a
0114   04AC 11            mov a, b
0115   04AD FD 77         inc b
0116   04AF D7            push a
0117   04B0 11            mov a, b
0118   04B1 45 FF FF      mov [bp + -1], a ; i
0119   04B4 E4            pop a
0120   04B5 27            mov b, a
0121   04B6 E4            pop a
0122   04B7 0A 14 04      jmp _for1_cond
0123   04BA             _for1_exit:
0124   04BA             _for3_init:
0125   04BA             _for3_cond:
0126   04BA             _for3_block:
0127   04BA             _for4_init:
0128   04BA 26 01 00      mov b, 1
0129   04BD D7            push a
0130   04BE 11            mov a, b
0131   04BF 45 FF FF      mov [bp + -1], a ; i
0132   04C2 E4            pop a
0133   04C3             _for4_cond:
0134   04C3 2C FF FF      mov b, [bp + -1] ; i
0135   04C6 D7            push a
0136   04C7 11            mov a, b
0137   04C8 29 71 0A      mov b, [__SIZE] ; SIZE
0138   04CB D7            push a
0139   04CC 11            mov a, b
0140   04CD 26 FF FF      mov b, -1
0141   04D0 54            add a, b
0142   04D1 27            mov b, a
0143   04D2 E4            pop a
0144   04D3 B0            cmp a, b
0145   04D4 0E            lodflgs
0146   04D5 2F            mov bl, al
0147   04D6 FD A2 03      shr al, 3
0148   04D9 FD A4 02      shr bl, 2
0149   04DC FD 87 01      and bl, %00000001
0150   04DF 90            xor al, bl ; < (signed)
0151   04E0 22 00         mov ah, 0
0152   04E2 27            mov b, a
0153   04E3 E4            pop a
0154   04E4 C0 00 00      cmp b, 0
0155   04E7 C6 FB 05      je _for4_exit
0156   04EA             _for4_block:
0157   04EA             _for5_init:
0158   04EA 26 01 00      mov b, 1
0159   04ED D7            push a
0160   04EE 11            mov a, b
0161   04EF 45 FD FF      mov [bp + -3], a ; j
0162   04F2 E4            pop a
0163   04F3             _for5_cond:
0164   04F3 2C FD FF      mov b, [bp + -3] ; j
0165   04F6 D7            push a
0166   04F7 11            mov a, b
0167   04F8 29 71 0A      mov b, [__SIZE] ; SIZE
0168   04FB D7            push a
0169   04FC 11            mov a, b
0170   04FD 26 FF FF      mov b, -1
0171   0500 54            add a, b
0172   0501 27            mov b, a
0173   0502 E4            pop a
0174   0503 B0            cmp a, b
0175   0504 0E            lodflgs
0176   0505 2F            mov bl, al
0177   0506 FD A2 03      shr al, 3
0178   0509 FD A4 02      shr bl, 2
0179   050C FD 87 01      and bl, %00000001
0180   050F 90            xor al, bl ; < (signed)
0181   0510 22 00         mov ah, 0
0182   0512 27            mov b, a
0183   0513 E4            pop a
0184   0514 C0 00 00      cmp b, 0
0185   0517 C6 E9 05      je _for5_exit
0186   051A             _for5_block:
0187   051A 2C FF FF      mov b, [bp + -1] ; i
0188   051D FD AB         swp b
0189   051F D8            push b
0190   0520 2C FD FF      mov b, [bp + -3] ; j
0191   0523 FD AB         swp b
0192   0525 D8            push b
0193   0526 07 D8 07      call neighbours
0194   0529 51 04 00      add sp, 4
0195   052C D7            push a
0196   052D 11            mov a, b
0197   052E 45 FB FF      mov [bp + -5], a ; n
0198   0531 E4            pop a
0199   0532             _if6_cond:
0200   0532 2C FB FF      mov b, [bp + -5] ; n
0201   0535 D7            push a
0202   0536 11            mov a, b
0203   0537 26 02 00      mov b, 2
0204   053A B0            cmp a, b
0205   053B 0E            lodflgs
0206   053C 2F            mov bl, al
0207   053D FD A2 03      shr al, 3
0208   0540 FD A4 02      shr bl, 2
0209   0543 FD 87 01      and bl, %00000001
0210   0546 90            xor al, bl ; < (signed)
0211   0547 22 00         mov ah, 0
0212   0549 27            mov b, a
0213   054A E4            pop a
0214   054B D7            push a
0215   054C 11            mov a, b
0216   054D 2C FB FF      mov b, [bp + -5] ; n
0217   0550 D7            push a
0218   0551 11            mov a, b
0219   0552 26 03 00      mov b, 3
0220   0555 B0            cmp a, b
0221   0556 0E            lodflgs
0222   0557 2F            mov bl, al
0223   0558 FD 78         mov g, a
0224   055A FD A2 03      shr al, 3
0225   055D FD A4 02      shr bl, 2
0226   0560 FD 87 01      and bl, %00000001
0227   0563 90            xor al, bl
0228   0564 FD 27         mov b, g
0229   0566 FD 87 01      and bl, %00000001
0230   0569 8C            or al, bl
0231   056A 8F 01         xor al, %00000001 ; > (signed)
0232   056C 22 00         mov ah, 0
0233   056E 27            mov b, a
0234   056F E4            pop a
0235   0570 8A            or a, b
0236   0571 27            mov b, a
0237   0572 E4            pop a
0238   0573 C0 00 00      cmp b, 0
0239   0576 C6 9D 05      je _if6_else
0240   0579             _if6_true:
0241   0579 29 B3 10      mov b, [__nextState] ; nextState
0242   057C D7            push a
0243   057D 74            mov d, b
0244   057E DA            push d
0245   057F 2C FF FF      mov b, [bp + -1] ; i
0246   0582 E7            pop d
0247   0583 10 28 00      mov a, 40
0248   0586 AC            mul a, b
0249   0587 5A            add d, b
0250   0588 DA            push d
0251   0589 2C FD FF      mov b, [bp + -3] ; j
0252   058C E7            pop d
0253   058D 10 01 00      mov a, 1
0254   0590 AC            mul a, b
0255   0591 5A            add d, b
0256   0592 E4            pop a
0257   0593 DA            push d
0258   0594 26 20 00      mov b, ' '
0259   0597 E7            pop d
0260   0598 FD 3E         mov [d], bl
0261   059A 0A D7 05      jmp _if6_exit
0262   059D             _if6_else:
0263   059D             _if7_cond:
0264   059D 2C FB FF      mov b, [bp + -5] ; n
0265   05A0 D7            push a
0266   05A1 11            mov a, b
0267   05A2 26 03 00      mov b, 3
0268   05A5 B0            cmp a, b
0269   05A6 0E            lodflgs
0270   05A7 87 01         and al, %00000001 ; ==
0271   05A9 22 00         mov ah, 0
0272   05AB 27            mov b, a
0273   05AC E4            pop a
0274   05AD C0 00 00      cmp b, 0
0275   05B0 C6 D7 05      je _if7_exit
0276   05B3             _if7_true:
0277   05B3 29 B3 10      mov b, [__nextState] ; nextState
0278   05B6 D7            push a
0279   05B7 74            mov d, b
0280   05B8 DA            push d
0281   05B9 2C FF FF      mov b, [bp + -1] ; i
0282   05BC E7            pop d
0283   05BD 10 28 00      mov a, 40
0284   05C0 AC            mul a, b
0285   05C1 5A            add d, b
0286   05C2 DA            push d
0287   05C3 2C FD FF      mov b, [bp + -3] ; j
0288   05C6 E7            pop d
0289   05C7 10 01 00      mov a, 1
0290   05CA AC            mul a, b
0291   05CB 5A            add d, b
0292   05CC E4            pop a
0293   05CD DA            push d
0294   05CE 26 40 00      mov b, '@'
0295   05D1 E7            pop d
0296   05D2 FD 3E         mov [d], bl
0297   05D4 0A D7 05      jmp _if7_exit
0298   05D7             _if7_exit:
0299   05D7             _if6_exit:
0300   05D7             _for5_update:
0301   05D7 2C FD FF      mov b, [bp + -3] ; j
0302   05DA D7            push a
0303   05DB 11            mov a, b
0304   05DC FD 77         inc b
0305   05DE D7            push a
0306   05DF 11            mov a, b
0307   05E0 45 FD FF      mov [bp + -3], a ; j
0308   05E3 E4            pop a
0309   05E4 27            mov b, a
0310   05E5 E4            pop a
0311   05E6 0A F3 04      jmp _for5_cond
0312   05E9             _for5_exit:
0313   05E9             _for4_update:
0314   05E9 2C FF FF      mov b, [bp + -1] ; i
0315   05EC D7            push a
0316   05ED 11            mov a, b
0317   05EE FD 77         inc b
0318   05F0 D7            push a
0319   05F1 11            mov a, b
0320   05F2 45 FF FF      mov [bp + -1], a ; i
0321   05F5 E4            pop a
0322   05F6 27            mov b, a
0323   05F7 E4            pop a
0324   05F8 0A C3 04      jmp _for4_cond
0325   05FB             _for4_exit:
0326   05FB             _for8_init:
0327   05FB 26 01 00      mov b, 1
0328   05FE D7            push a
0329   05FF 11            mov a, b
0330   0600 45 FF FF      mov [bp + -1], a ; i
0331   0603 E4            pop a
0332   0604             _for8_cond:
0333   0604 2C FF FF      mov b, [bp + -1] ; i
0334   0607 D7            push a
0335   0608 11            mov a, b
0336   0609 29 71 0A      mov b, [__SIZE] ; SIZE
0337   060C D7            push a
0338   060D 11            mov a, b
0339   060E 26 FF FF      mov b, -1
0340   0611 54            add a, b
0341   0612 27            mov b, a
0342   0613 E4            pop a
0343   0614 B0            cmp a, b
0344   0615 0E            lodflgs
0345   0616 2F            mov bl, al
0346   0617 FD A2 03      shr al, 3
0347   061A FD A4 02      shr bl, 2
0348   061D FD 87 01      and bl, %00000001
0349   0620 90            xor al, bl ; < (signed)
0350   0621 22 00         mov ah, 0
0351   0623 27            mov b, a
0352   0624 E4            pop a
0353   0625 C0 00 00      cmp b, 0
0354   0628 C6 BA 06      je _for8_exit
0355   062B             _for8_block:
0356   062B             _for9_init:
0357   062B 26 01 00      mov b, 1
0358   062E D7            push a
0359   062F 11            mov a, b
0360   0630 45 FD FF      mov [bp + -3], a ; j
0361   0633 E4            pop a
0362   0634             _for9_cond:
0363   0634 2C FD FF      mov b, [bp + -3] ; j
0364   0637 D7            push a
0365   0638 11            mov a, b
0366   0639 29 71 0A      mov b, [__SIZE] ; SIZE
0367   063C D7            push a
0368   063D 11            mov a, b
0369   063E 26 FF FF      mov b, -1
0370   0641 54            add a, b
0371   0642 27            mov b, a
0372   0643 E4            pop a
0373   0644 B0            cmp a, b
0374   0645 0E            lodflgs
0375   0646 2F            mov bl, al
0376   0647 FD A2 03      shr al, 3
0377   064A FD A4 02      shr bl, 2
0378   064D FD 87 01      and bl, %00000001
0379   0650 90            xor al, bl ; < (signed)
0380   0651 22 00         mov ah, 0
0381   0653 27            mov b, a
0382   0654 E4            pop a
0383   0655 C0 00 00      cmp b, 0
0384   0658 C6 A8 06      je _for9_exit
0385   065B             _for9_block:
0386   065B 29 F5 16      mov b, [__currState] ; currState
0387   065E D7            push a
0388   065F 74            mov d, b
0389   0660 DA            push d
0390   0661 2C FF FF      mov b, [bp + -1] ; i
0391   0664 E7            pop d
0392   0665 10 28 00      mov a, 40
0393   0668 AC            mul a, b
0394   0669 5A            add d, b
0395   066A DA            push d
0396   066B 2C FD FF      mov b, [bp + -3] ; j
0397   066E E7            pop d
0398   066F 10 01 00      mov a, 1
0399   0672 AC            mul a, b
0400   0673 5A            add d, b
0401   0674 E4            pop a
0402   0675 DA            push d
0403   0676 29 B3 10      mov b, [__nextState] ; nextState
0404   0679 D7            push a
0405   067A 74            mov d, b
0406   067B DA            push d
0407   067C 2C FF FF      mov b, [bp + -1] ; i
0408   067F E7            pop d
0409   0680 10 28 00      mov a, 40
0410   0683 AC            mul a, b
0411   0684 5A            add d, b
0412   0685 DA            push d
0413   0686 2C FD FF      mov b, [bp + -3] ; j
0414   0689 E7            pop d
0415   068A 10 01 00      mov a, 1
0416   068D AC            mul a, b
0417   068E 5A            add d, b
0418   068F E4            pop a
0419   0690 32            mov bl, [d]
0420   0691 A7 00         mov bh, 0
0421   0693 E7            pop d
0422   0694 FD 3E         mov [d], bl
0423   0696             _for9_update:
0424   0696 2C FD FF      mov b, [bp + -3] ; j
0425   0699 D7            push a
0426   069A 11            mov a, b
0427   069B FD 77         inc b
0428   069D D7            push a
0429   069E 11            mov a, b
0430   069F 45 FD FF      mov [bp + -3], a ; j
0431   06A2 E4            pop a
0432   06A3 27            mov b, a
0433   06A4 E4            pop a
0434   06A5 0A 34 06      jmp _for9_cond
0435   06A8             _for9_exit:
0436   06A8             _for8_update:
0437   06A8 2C FF FF      mov b, [bp + -1] ; i
0438   06AB D7            push a
0439   06AC 11            mov a, b
0440   06AD FD 77         inc b
0441   06AF D7            push a
0442   06B0 11            mov a, b
0443   06B1 45 FF FF      mov [bp + -1], a ; i
0444   06B4 E4            pop a
0445   06B5 27            mov b, a
0446   06B6 E4            pop a
0447   06B7 0A 04 06      jmp _for8_cond
0448   06BA             _for8_exit:
0449   06BA 07 C6 06      call show
0450   06BD             _for3_update:
0451   06BD 0A BA 04      jmp _for3_cond
0452   06C0             _for3_exit:
0453   06C0 26 00 00      mov b, 0
0454   06C3 F9            leave
0455   06C4 05 0B         syscall sys_terminate_proc
0456   06C6             
0457   06C6             show:
0458   06C6 D2            push bp
0459   06C7 9B            mov bp, sp
0460   06C8 52 02 00      sub sp, 2 ; i
0461   06CB 52 02 00      sub sp, 2 ; j
0462   06CE             _for10_init:
0463   06CE 26 00 00      mov b, 0
0464   06D1 D7            push a
0465   06D2 11            mov a, b
0466   06D3 45 FF FF      mov [bp + -1], a ; i
0467   06D6 E4            pop a
0468   06D7             _for10_cond:
0469   06D7 2C FF FF      mov b, [bp + -1] ; i
0470   06DA D7            push a
0471   06DB 11            mov a, b
0472   06DC 29 71 0A      mov b, [__SIZE] ; SIZE
0473   06DF B0            cmp a, b
0474   06E0 0E            lodflgs
0475   06E1 2F            mov bl, al
0476   06E2 FD A2 03      shr al, 3
0477   06E5 FD A4 02      shr bl, 2
0478   06E8 FD 87 01      and bl, %00000001
0479   06EB 90            xor al, bl ; < (signed)
0480   06EC 22 00         mov ah, 0
0481   06EE 27            mov b, a
0482   06EF E4            pop a
0483   06F0 C0 00 00      cmp b, 0
0484   06F3 C6 97 07      je _for10_exit
0485   06F6             _for10_block:
0486   06F6             _for11_init:
0487   06F6 26 00 00      mov b, 0
0488   06F9 D7            push a
0489   06FA 11            mov a, b
0490   06FB 45 FD FF      mov [bp + -3], a ; j
0491   06FE E4            pop a
0492   06FF             _for11_cond:
0493   06FF 2C FD FF      mov b, [bp + -3] ; j
0494   0702 D7            push a
0495   0703 11            mov a, b
0496   0704 29 71 0A      mov b, [__SIZE] ; SIZE
0497   0707 B0            cmp a, b
0498   0708 0E            lodflgs
0499   0709 2F            mov bl, al
0500   070A FD A2 03      shr al, 3
0501   070D FD A4 02      shr bl, 2
0502   0710 FD 87 01      and bl, %00000001
0503   0713 90            xor al, bl ; < (signed)
0504   0714 22 00         mov ah, 0
0505   0716 27            mov b, a
0506   0717 E4            pop a
0507   0718 C0 00 00      cmp b, 0
0508   071B C6 7B 07      je _for11_exit
0509   071E             _for11_block:
0510   071E             _ternary12_cond:
0511   071E 29 F5 16      mov b, [__currState] ; currState
0512   0721 D7            push a
0513   0722 74            mov d, b
0514   0723 DA            push d
0515   0724 2C FF FF      mov b, [bp + -1] ; i
0516   0727 E7            pop d
0517   0728 10 28 00      mov a, 40
0518   072B AC            mul a, b
0519   072C 5A            add d, b
0520   072D DA            push d
0521   072E 2C FD FF      mov b, [bp + -3] ; j
0522   0731 E7            pop d
0523   0732 10 01 00      mov a, 1
0524   0735 AC            mul a, b
0525   0736 5A            add d, b
0526   0737 E4            pop a
0527   0738 32            mov bl, [d]
0528   0739 A7 00         mov bh, 0
0529   073B D7            push a
0530   073C 11            mov a, b
0531   073D 26 40 00      mov b, '@'
0532   0740 B0            cmp a, b
0533   0741 0E            lodflgs
0534   0742 87 01         and al, %00000001 ; ==
0535   0744 22 00         mov ah, 0
0536   0746 27            mov b, a
0537   0747 E4            pop a
0538   0748 C0 00 00      cmp b, 0
0539   074B C6 5D 07      je _ternary12_false
0540   074E             _ternary12_true:
0541   074E 26 F7 16      mov b, __string_0 ; "@ "
0542   0751 FD AB         swp b
0543   0753 D8            push b
0544   0754 07 5B 0A      call print
0545   0757 51 02 00      add sp, 2
0546   075A 0A 69 07      jmp _ternary12_exit
0547   075D             _ternary12_false:
0548   075D 26 FA 16      mov b, __string_1 ; ". "
0549   0760 FD AB         swp b
0550   0762 D8            push b
0551   0763 07 5B 0A      call print
0552   0766 51 02 00      add sp, 2
0553   0769             _ternary12_exit:
0554   0769             _for11_update:
0555   0769 2C FD FF      mov b, [bp + -3] ; j
0556   076C D7            push a
0557   076D 11            mov a, b
0558   076E FD 77         inc b
0559   0770 D7            push a
0560   0771 11            mov a, b
0561   0772 45 FD FF      mov [bp + -3], a ; j
0562   0775 E4            pop a
0563   0776 27            mov b, a
0564   0777 E4            pop a
0565   0778 0A FF 06      jmp _for11_cond
0566   077B             _for11_exit:
0567   077B 26 0A 00      mov b, 10
0568   077E DD            push bl
0569   077F 07 66 0A      call _putchar
0570   0782 51 01 00      add sp, 1
0571   0785             _for10_update:
0572   0785 2C FF FF      mov b, [bp + -1] ; i
0573   0788 D7            push a
0574   0789 11            mov a, b
0575   078A FD 77         inc b
0576   078C D7            push a
0577   078D 11            mov a, b
0578   078E 45 FF FF      mov [bp + -1], a ; i
0579   0791 E4            pop a
0580   0792 27            mov b, a
0581   0793 E4            pop a
0582   0794 0A D7 06      jmp _for10_cond
0583   0797             _for10_exit:
0584   0797 F9            leave
0585   0798 09            ret
0586   0799             
0587   0799             alive:
0588   0799 D2            push bp
0589   079A 9B            mov bp, sp
0590   079B             _if13_cond:
0591   079B 29 F5 16      mov b, [__currState] ; currState
0592   079E D7            push a
0593   079F 74            mov d, b
0594   07A0 DA            push d
0595   07A1 2C 07 00      mov b, [bp + 7] ; i
0596   07A4 E7            pop d
0597   07A5 10 28 00      mov a, 40
0598   07A8 AC            mul a, b
0599   07A9 5A            add d, b
0600   07AA DA            push d
0601   07AB 2C 05 00      mov b, [bp + 5] ; j
0602   07AE E7            pop d
0603   07AF 10 01 00      mov a, 1
0604   07B2 AC            mul a, b
0605   07B3 5A            add d, b
0606   07B4 E4            pop a
0607   07B5 32            mov bl, [d]
0608   07B6 A7 00         mov bh, 0
0609   07B8 D7            push a
0610   07B9 11            mov a, b
0611   07BA 26 40 00      mov b, '@'
0612   07BD B0            cmp a, b
0613   07BE 0E            lodflgs
0614   07BF 87 01         and al, %00000001 ; ==
0615   07C1 22 00         mov ah, 0
0616   07C3 27            mov b, a
0617   07C4 E4            pop a
0618   07C5 C0 00 00      cmp b, 0
0619   07C8 C6 D3 07      je _if13_else
0620   07CB             _if13_true:
0621   07CB 26 01 00      mov b, 1
0622   07CE F9            leave
0623   07CF 09            ret
0624   07D0 0A D8 07      jmp _if13_exit
0625   07D3             _if13_else:
0626   07D3 26 00 00      mov b, 0
0627   07D6 F9            leave
0628   07D7 09            ret
0629   07D8             _if13_exit:
0630   07D8             
0631   07D8             neighbours:
0632   07D8 D2            push bp
0633   07D9 9B            mov bp, sp
0634   07DA 52 02 00      sub sp, 2 ; count
0635   07DD 26 00 00      mov b, 0
0636   07E0 D7            push a
0637   07E1 11            mov a, b
0638   07E2 45 FF FF      mov [bp + -1], a ; count
0639   07E5 E4            pop a
0640   07E6             _if14_cond:
0641   07E6 29 F5 16      mov b, [__currState] ; currState
0642   07E9 D7            push a
0643   07EA 74            mov d, b
0644   07EB DA            push d
0645   07EC 2C 07 00      mov b, [bp + 7] ; i
0646   07EF D7            push a
0647   07F0 11            mov a, b
0648   07F1 26 FF FF      mov b, -1
0649   07F4 54            add a, b
0650   07F5 27            mov b, a
0651   07F6 E4            pop a
0652   07F7 E7            pop d
0653   07F8 10 28 00      mov a, 40
0654   07FB AC            mul a, b
0655   07FC 5A            add d, b
0656   07FD DA            push d
0657   07FE 2C 05 00      mov b, [bp + 5] ; j
0658   0801 E7            pop d
0659   0802 10 01 00      mov a, 1
0660   0805 AC            mul a, b
0661   0806 5A            add d, b
0662   0807 E4            pop a
0663   0808 32            mov bl, [d]
0664   0809 A7 00         mov bh, 0
0665   080B D7            push a
0666   080C 11            mov a, b
0667   080D 26 40 00      mov b, '@'
0668   0810 B0            cmp a, b
0669   0811 0E            lodflgs
0670   0812 87 01         and al, %00000001 ; ==
0671   0814 22 00         mov ah, 0
0672   0816 27            mov b, a
0673   0817 E4            pop a
0674   0818 C0 00 00      cmp b, 0
0675   081B C6 30 08      je _if14_exit
0676   081E             _if14_true:
0677   081E 2C FF FF      mov b, [bp + -1] ; count
0678   0821 D7            push a
0679   0822 11            mov a, b
0680   0823 FD 77         inc b
0681   0825 D7            push a
0682   0826 11            mov a, b
0683   0827 45 FF FF      mov [bp + -1], a ; count
0684   082A E4            pop a
0685   082B 27            mov b, a
0686   082C E4            pop a
0687   082D 0A 30 08      jmp _if14_exit
0688   0830             _if14_exit:
0689   0830             _if15_cond:
0690   0830 29 F5 16      mov b, [__currState] ; currState
0691   0833 D7            push a
0692   0834 74            mov d, b
0693   0835 DA            push d
0694   0836 2C 07 00      mov b, [bp + 7] ; i
0695   0839 D7            push a
0696   083A 11            mov a, b
0697   083B 26 FF FF      mov b, -1
0698   083E 54            add a, b
0699   083F 27            mov b, a
0700   0840 E4            pop a
0701   0841 E7            pop d
0702   0842 10 28 00      mov a, 40
0703   0845 AC            mul a, b
0704   0846 5A            add d, b
0705   0847 DA            push d
0706   0848 2C 05 00      mov b, [bp + 5] ; j
0707   084B D7            push a
0708   084C 11            mov a, b
0709   084D 26 FF FF      mov b, -1
0710   0850 54            add a, b
0711   0851 27            mov b, a
0712   0852 E4            pop a
0713   0853 E7            pop d
0714   0854 10 01 00      mov a, 1
0715   0857 AC            mul a, b
0716   0858 5A            add d, b
0717   0859 E4            pop a
0718   085A 32            mov bl, [d]
0719   085B A7 00         mov bh, 0
0720   085D D7            push a
0721   085E 11            mov a, b
0722   085F 26 40 00      mov b, '@'
0723   0862 B0            cmp a, b
0724   0863 0E            lodflgs
0725   0864 87 01         and al, %00000001 ; ==
0726   0866 22 00         mov ah, 0
0727   0868 27            mov b, a
0728   0869 E4            pop a
0729   086A C0 00 00      cmp b, 0
0730   086D C6 82 08      je _if15_exit
0731   0870             _if15_true:
0732   0870 2C FF FF      mov b, [bp + -1] ; count
0733   0873 D7            push a
0734   0874 11            mov a, b
0735   0875 FD 77         inc b
0736   0877 D7            push a
0737   0878 11            mov a, b
0738   0879 45 FF FF      mov [bp + -1], a ; count
0739   087C E4            pop a
0740   087D 27            mov b, a
0741   087E E4            pop a
0742   087F 0A 82 08      jmp _if15_exit
0743   0882             _if15_exit:
0744   0882             _if16_cond:
0745   0882 29 F5 16      mov b, [__currState] ; currState
0746   0885 D7            push a
0747   0886 74            mov d, b
0748   0887 DA            push d
0749   0888 2C 07 00      mov b, [bp + 7] ; i
0750   088B D7            push a
0751   088C 11            mov a, b
0752   088D 26 FF FF      mov b, -1
0753   0890 54            add a, b
0754   0891 27            mov b, a
0755   0892 E4            pop a
0756   0893 E7            pop d
0757   0894 10 28 00      mov a, 40
0758   0897 AC            mul a, b
0759   0898 5A            add d, b
0760   0899 DA            push d
0761   089A 2C 05 00      mov b, [bp + 5] ; j
0762   089D D7            push a
0763   089E 11            mov a, b
0764   089F 26 01 00      mov b, 1
0765   08A2 54            add a, b
0766   08A3 27            mov b, a
0767   08A4 E4            pop a
0768   08A5 E7            pop d
0769   08A6 10 01 00      mov a, 1
0770   08A9 AC            mul a, b
0771   08AA 5A            add d, b
0772   08AB E4            pop a
0773   08AC 32            mov bl, [d]
0774   08AD A7 00         mov bh, 0
0775   08AF D7            push a
0776   08B0 11            mov a, b
0777   08B1 26 40 00      mov b, '@'
0778   08B4 B0            cmp a, b
0779   08B5 0E            lodflgs
0780   08B6 87 01         and al, %00000001 ; ==
0781   08B8 22 00         mov ah, 0
0782   08BA 27            mov b, a
0783   08BB E4            pop a
0784   08BC C0 00 00      cmp b, 0
0785   08BF C6 D4 08      je _if16_exit
0786   08C2             _if16_true:
0787   08C2 2C FF FF      mov b, [bp + -1] ; count
0788   08C5 D7            push a
0789   08C6 11            mov a, b
0790   08C7 FD 77         inc b
0791   08C9 D7            push a
0792   08CA 11            mov a, b
0793   08CB 45 FF FF      mov [bp + -1], a ; count
0794   08CE E4            pop a
0795   08CF 27            mov b, a
0796   08D0 E4            pop a
0797   08D1 0A D4 08      jmp _if16_exit
0798   08D4             _if16_exit:
0799   08D4             _if17_cond:
0800   08D4 29 F5 16      mov b, [__currState] ; currState
0801   08D7 D7            push a
0802   08D8 74            mov d, b
0803   08D9 DA            push d
0804   08DA 2C 07 00      mov b, [bp + 7] ; i
0805   08DD E7            pop d
0806   08DE 10 28 00      mov a, 40
0807   08E1 AC            mul a, b
0808   08E2 5A            add d, b
0809   08E3 DA            push d
0810   08E4 2C 05 00      mov b, [bp + 5] ; j
0811   08E7 D7            push a
0812   08E8 11            mov a, b
0813   08E9 26 FF FF      mov b, -1
0814   08EC 54            add a, b
0815   08ED 27            mov b, a
0816   08EE E4            pop a
0817   08EF E7            pop d
0818   08F0 10 01 00      mov a, 1
0819   08F3 AC            mul a, b
0820   08F4 5A            add d, b
0821   08F5 E4            pop a
0822   08F6 32            mov bl, [d]
0823   08F7 A7 00         mov bh, 0
0824   08F9 D7            push a
0825   08FA 11            mov a, b
0826   08FB 26 40 00      mov b, '@'
0827   08FE B0            cmp a, b
0828   08FF 0E            lodflgs
0829   0900 87 01         and al, %00000001 ; ==
0830   0902 22 00         mov ah, 0
0831   0904 27            mov b, a
0832   0905 E4            pop a
0833   0906 C0 00 00      cmp b, 0
0834   0909 C6 1E 09      je _if17_exit
0835   090C             _if17_true:
0836   090C 2C FF FF      mov b, [bp + -1] ; count
0837   090F D7            push a
0838   0910 11            mov a, b
0839   0911 FD 77         inc b
0840   0913 D7            push a
0841   0914 11            mov a, b
0842   0915 45 FF FF      mov [bp + -1], a ; count
0843   0918 E4            pop a
0844   0919 27            mov b, a
0845   091A E4            pop a
0846   091B 0A 1E 09      jmp _if17_exit
0847   091E             _if17_exit:
0848   091E             _if18_cond:
0849   091E 29 F5 16      mov b, [__currState] ; currState
0850   0921 D7            push a
0851   0922 74            mov d, b
0852   0923 DA            push d
0853   0924 2C 07 00      mov b, [bp + 7] ; i
0854   0927 E7            pop d
0855   0928 10 28 00      mov a, 40
0856   092B AC            mul a, b
0857   092C 5A            add d, b
0858   092D DA            push d
0859   092E 2C 05 00      mov b, [bp + 5] ; j
0860   0931 D7            push a
0861   0932 11            mov a, b
0862   0933 26 01 00      mov b, 1
0863   0936 54            add a, b
0864   0937 27            mov b, a
0865   0938 E4            pop a
0866   0939 E7            pop d
0867   093A 10 01 00      mov a, 1
0868   093D AC            mul a, b
0869   093E 5A            add d, b
0870   093F E4            pop a
0871   0940 32            mov bl, [d]
0872   0941 A7 00         mov bh, 0
0873   0943 D7            push a
0874   0944 11            mov a, b
0875   0945 26 40 00      mov b, '@'
0876   0948 B0            cmp a, b
0877   0949 0E            lodflgs
0878   094A 87 01         and al, %00000001 ; ==
0879   094C 22 00         mov ah, 0
0880   094E 27            mov b, a
0881   094F E4            pop a
0882   0950 C0 00 00      cmp b, 0
0883   0953 C6 68 09      je _if18_exit
0884   0956             _if18_true:
0885   0956 2C FF FF      mov b, [bp + -1] ; count
0886   0959 D7            push a
0887   095A 11            mov a, b
0888   095B FD 77         inc b
0889   095D D7            push a
0890   095E 11            mov a, b
0891   095F 45 FF FF      mov [bp + -1], a ; count
0892   0962 E4            pop a
0893   0963 27            mov b, a
0894   0964 E4            pop a
0895   0965 0A 68 09      jmp _if18_exit
0896   0968             _if18_exit:
0897   0968             _if19_cond:
0898   0968 29 F5 16      mov b, [__currState] ; currState
0899   096B D7            push a
0900   096C 74            mov d, b
0901   096D DA            push d
0902   096E 2C 07 00      mov b, [bp + 7] ; i
0903   0971 D7            push a
0904   0972 11            mov a, b
0905   0973 26 01 00      mov b, 1
0906   0976 54            add a, b
0907   0977 27            mov b, a
0908   0978 E4            pop a
0909   0979 E7            pop d
0910   097A 10 28 00      mov a, 40
0911   097D AC            mul a, b
0912   097E 5A            add d, b
0913   097F DA            push d
0914   0980 2C 05 00      mov b, [bp + 5] ; j
0915   0983 D7            push a
0916   0984 11            mov a, b
0917   0985 26 FF FF      mov b, -1
0918   0988 54            add a, b
0919   0989 27            mov b, a
0920   098A E4            pop a
0921   098B E7            pop d
0922   098C 10 01 00      mov a, 1
0923   098F AC            mul a, b
0924   0990 5A            add d, b
0925   0991 E4            pop a
0926   0992 32            mov bl, [d]
0927   0993 A7 00         mov bh, 0
0928   0995 D7            push a
0929   0996 11            mov a, b
0930   0997 26 40 00      mov b, '@'
0931   099A B0            cmp a, b
0932   099B 0E            lodflgs
0933   099C 87 01         and al, %00000001 ; ==
0934   099E 22 00         mov ah, 0
0935   09A0 27            mov b, a
0936   09A1 E4            pop a
0937   09A2 C0 00 00      cmp b, 0
0938   09A5 C6 BA 09      je _if19_exit
0939   09A8             _if19_true:
0940   09A8 2C FF FF      mov b, [bp + -1] ; count
0941   09AB D7            push a
0942   09AC 11            mov a, b
0943   09AD FD 77         inc b
0944   09AF D7            push a
0945   09B0 11            mov a, b
0946   09B1 45 FF FF      mov [bp + -1], a ; count
0947   09B4 E4            pop a
0948   09B5 27            mov b, a
0949   09B6 E4            pop a
0950   09B7 0A BA 09      jmp _if19_exit
0951   09BA             _if19_exit:
0952   09BA             _if20_cond:
0953   09BA 29 F5 16      mov b, [__currState] ; currState
0954   09BD D7            push a
0955   09BE 74            mov d, b
0956   09BF DA            push d
0957   09C0 2C 07 00      mov b, [bp + 7] ; i
0958   09C3 D7            push a
0959   09C4 11            mov a, b
0960   09C5 26 01 00      mov b, 1
0961   09C8 54            add a, b
0962   09C9 27            mov b, a
0963   09CA E4            pop a
0964   09CB E7            pop d
0965   09CC 10 28 00      mov a, 40
0966   09CF AC            mul a, b
0967   09D0 5A            add d, b
0968   09D1 DA            push d
0969   09D2 2C 05 00      mov b, [bp + 5] ; j
0970   09D5 E7            pop d
0971   09D6 10 01 00      mov a, 1
0972   09D9 AC            mul a, b
0973   09DA 5A            add d, b
0974   09DB E4            pop a
0975   09DC 32            mov bl, [d]
0976   09DD A7 00         mov bh, 0
0977   09DF D7            push a
0978   09E0 11            mov a, b
0979   09E1 26 40 00      mov b, '@'
0980   09E4 B0            cmp a, b
0981   09E5 0E            lodflgs
0982   09E6 87 01         and al, %00000001 ; ==
0983   09E8 22 00         mov ah, 0
0984   09EA 27            mov b, a
0985   09EB E4            pop a
0986   09EC C0 00 00      cmp b, 0
0987   09EF C6 04 0A      je _if20_exit
0988   09F2             _if20_true:
0989   09F2 2C FF FF      mov b, [bp + -1] ; count
0990   09F5 D7            push a
0991   09F6 11            mov a, b
0992   09F7 FD 77         inc b
0993   09F9 D7            push a
0994   09FA 11            mov a, b
0995   09FB 45 FF FF      mov [bp + -1], a ; count
0996   09FE E4            pop a
0997   09FF 27            mov b, a
0998   0A00 E4            pop a
0999   0A01 0A 04 0A      jmp _if20_exit
1000   0A04             _if20_exit:
1001   0A04             _if21_cond:
1002   0A04 29 F5 16      mov b, [__currState] ; currState
1003   0A07 D7            push a
1004   0A08 74            mov d, b
1005   0A09 DA            push d
1006   0A0A 2C 07 00      mov b, [bp + 7] ; i
1007   0A0D D7            push a
1008   0A0E 11            mov a, b
1009   0A0F 26 01 00      mov b, 1
1010   0A12 54            add a, b
1011   0A13 27            mov b, a
1012   0A14 E4            pop a
1013   0A15 E7            pop d
1014   0A16 10 28 00      mov a, 40
1015   0A19 AC            mul a, b
1016   0A1A 5A            add d, b
1017   0A1B DA            push d
1018   0A1C 2C 05 00      mov b, [bp + 5] ; j
1019   0A1F D7            push a
1020   0A20 11            mov a, b
1021   0A21 26 01 00      mov b, 1
1022   0A24 54            add a, b
1023   0A25 27            mov b, a
1024   0A26 E4            pop a
1025   0A27 E7            pop d
1026   0A28 10 01 00      mov a, 1
1027   0A2B AC            mul a, b
1028   0A2C 5A            add d, b
1029   0A2D E4            pop a
1030   0A2E 32            mov bl, [d]
1031   0A2F A7 00         mov bh, 0
1032   0A31 D7            push a
1033   0A32 11            mov a, b
1034   0A33 26 40 00      mov b, '@'
1035   0A36 B0            cmp a, b
1036   0A37 0E            lodflgs
1037   0A38 87 01         and al, %00000001 ; ==
1038   0A3A 22 00         mov ah, 0
1039   0A3C 27            mov b, a
1040   0A3D E4            pop a
1041   0A3E C0 00 00      cmp b, 0
1042   0A41 C6 56 0A      je _if21_exit
1043   0A44             _if21_true:
1044   0A44 2C FF FF      mov b, [bp + -1] ; count
1045   0A47 D7            push a
1046   0A48 11            mov a, b
1047   0A49 FD 77         inc b
1048   0A4B D7            push a
1049   0A4C 11            mov a, b
1050   0A4D 45 FF FF      mov [bp + -1], a ; count
1051   0A50 E4            pop a
1052   0A51 27            mov b, a
1053   0A52 E4            pop a
1054   0A53 0A 56 0A      jmp _if21_exit
1055   0A56             _if21_exit:
1056   0A56 2C FF FF      mov b, [bp + -1] ; count
1057   0A59 F9            leave
1058   0A5A 09            ret
1059   0A5B             
1060   0A5B             print:
1061   0A5B D2            push bp
1062   0A5C 9B            mov bp, sp
1063   0A5D             
1064   0A5D             ; --- BEGIN INLINE ASM BLOCK
1065   0A5D 17 05 00      mov a, [bp + 5]
1066   0A60 3C            mov d, a
1067   0A61 07 49 19      call puts
1068   0A64             ; --- END INLINE ASM BLOCK
1069   0A64             
1070   0A64 F9            leave
1071   0A65 09            ret
1072   0A66             
1073   0A66             _putchar:
1074   0A66 D2            push bp
1075   0A67 9B            mov bp, sp
1076   0A68             
1077   0A68             ; --- BEGIN INLINE ASM BLOCK
1078   0A68 20 05 00      mov al, [bp + 5]
1079   0A6B 23            mov ah, al
1080   0A6C 07 0F 18      call putchar
1081   0A6F             ; --- END INLINE ASM BLOCK
1082   0A6F             
1083   0A6F F9            leave
1084   0A70 09            ret
1085   0A71             ; --- END TEXT BLOCK
1086   0A71             
1087   0A71             ; --- BEGIN DATA BLOCK
1088   0A71 28 00       __SIZE: .dw 40
1089   0A73 00 00 00 00 __nextState_data: .fill 1600, 0
1089   0A77 00 00 00 00 
1089   0A7B 00 00 00 00 
1089   0A7F 00 00 00 00 
1089   0A83 00 00 00 00 
1089   0A87 00 00 00 00 
1089   0A8B 00 00 00 00 
1089   0A8F 00 00 00 00 
1089   0A93 00 00 00 00 
1089   0A97 00 00 00 00 
1089   0A9B 00 00 00 00 
1089   0A9F 00 00 00 00 
1089   0AA3 00 00 00 00 
1089   0AA7 00 00 00 00 
1089   0AAB 00 00 00 00 
1089   0AAF 00 00 00 00 
1089   0AB3 00 00 00 00 
1089   0AB7 00 00 00 00 
1089   0ABB 00 00 00 00 
1089   0ABF 00 00 00 00 
1089   0AC3 00 00 00 00 
1089   0AC7 00 00 00 00 
1089   0ACB 00 00 00 00 
1089   0ACF 00 00 00 00 
1089   0AD3 00 00 00 00 
1089   0AD7 00 00 00 00 
1089   0ADB 00 00 00 00 
1089   0ADF 00 00 00 00 
1089   0AE3 00 00 00 00 
1089   0AE7 00 00 00 00 
1089   0AEB 00 00 00 00 
1089   0AEF 00 00 00 00 
1089   0AF3 00 00 00 00 
1089   0AF7 00 00 00 00 
1089   0AFB 00 00 00 00 
1089   0AFF 00 00 00 00 
1089   0B03 00 00 00 00 
1089   0B07 00 00 00 00 
1089   0B0B 00 00 00 00 
1089   0B0F 00 00 00 00 
1089   0B13 00 00 00 00 
1089   0B17 00 00 00 00 
1089   0B1B 00 00 00 00 
1089   0B1F 00 00 00 00 
1089   0B23 00 00 00 00 
1089   0B27 00 00 00 00 
1089   0B2B 00 00 00 00 
1089   0B2F 00 00 00 00 
1089   0B33 00 00 00 00 
1089   0B37 00 00 00 00 
1089   0B3B 00 00 00 00 
1089   0B3F 00 00 00 00 
1089   0B43 00 00 00 00 
1089   0B47 00 00 00 00 
1089   0B4B 00 00 00 00 
1089   0B4F 00 00 00 00 
1089   0B53 00 00 00 00 
1089   0B57 00 00 00 00 
1089   0B5B 00 00 00 00 
1089   0B5F 00 00 00 00 
1089   0B63 00 00 00 00 
1089   0B67 00 00 00 00 
1089   0B6B 00 00 00 00 
1089   0B6F 00 00 00 00 
1089   0B73 00 00 00 00 
1089   0B77 00 00 00 00 
1089   0B7B 00 00 00 00 
1089   0B7F 00 00 00 00 
1089   0B83 00 00 00 00 
1089   0B87 00 00 00 00 
1089   0B8B 00 00 00 00 
1089   0B8F 00 00 00 00 
1089   0B93 00 00 00 00 
1089   0B97 00 00 00 00 
1089   0B9B 00 00 00 00 
1089   0B9F 00 00 00 00 
1089   0BA3 00 00 00 00 
1089   0BA7 00 00 00 00 
1089   0BAB 00 00 00 00 
1089   0BAF 00 00 00 00 
1089   0BB3 00 00 00 00 
1089   0BB7 00 00 00 00 
1089   0BBB 00 00 00 00 
1089   0BBF 00 00 00 00 
1089   0BC3 00 00 00 00 
1089   0BC7 00 00 00 00 
1089   0BCB 00 00 00 00 
1089   0BCF 00 00 00 00 
1089   0BD3 00 00 00 00 
1089   0BD7 00 00 00 00 
1089   0BDB 00 00 00 00 
1089   0BDF 00 00 00 00 
1089   0BE3 00 00 00 00 
1089   0BE7 00 00 00 00 
1089   0BEB 00 00 00 00 
1089   0BEF 00 00 00 00 
1089   0BF3 00 00 00 00 
1089   0BF7 00 00 00 00 
1089   0BFB 00 00 00 00 
1089   0BFF 00 00 00 00 
1089   0C03 00 00 00 00 
1089   0C07 00 00 00 00 
1089   0C0B 00 00 00 00 
1089   0C0F 00 00 00 00 
1089   0C13 00 00 00 00 
1089   0C17 00 00 00 00 
1089   0C1B 00 00 00 00 
1089   0C1F 00 00 00 00 
1089   0C23 00 00 00 00 
1089   0C27 00 00 00 00 
1089   0C2B 00 00 00 00 
1089   0C2F 00 00 00 00 
1089   0C33 00 00 00 00 
1089   0C37 00 00 00 00 
1089   0C3B 00 00 00 00 
1089   0C3F 00 00 00 00 
1089   0C43 00 00 00 00 
1089   0C47 00 00 00 00 
1089   0C4B 00 00 00 00 
1089   0C4F 00 00 00 00 
1089   0C53 00 00 00 00 
1089   0C57 00 00 00 00 
1089   0C5B 00 00 00 00 
1089   0C5F 00 00 00 00 
1089   0C63 00 00 00 00 
1089   0C67 00 00 00 00 
1089   0C6B 00 00 00 00 
1089   0C6F 00 00 00 00 
1089   0C73 00 00 00 00 
1089   0C77 00 00 00 00 
1089   0C7B 00 00 00 00 
1089   0C7F 00 00 00 00 
1089   0C83 00 00 00 00 
1089   0C87 00 00 00 00 
1089   0C8B 00 00 00 00 
1089   0C8F 00 00 00 00 
1089   0C93 00 00 00 00 
1089   0C97 00 00 00 00 
1089   0C9B 00 00 00 00 
1089   0C9F 00 00 00 00 
1089   0CA3 00 00 00 00 
1089   0CA7 00 00 00 00 
1089   0CAB 00 00 00 00 
1089   0CAF 00 00 00 00 
1089   0CB3 00 00 00 00 
1089   0CB7 00 00 00 00 
1089   0CBB 00 00 00 00 
1089   0CBF 00 00 00 00 
1089   0CC3 00 00 00 00 
1089   0CC7 00 00 00 00 
1089   0CCB 00 00 00 00 
1089   0CCF 00 00 00 00 
1089   0CD3 00 00 00 00 
1089   0CD7 00 00 00 00 
1089   0CDB 00 00 00 00 
1089   0CDF 00 00 00 00 
1089   0CE3 00 00 00 00 
1089   0CE7 00 00 00 00 
1089   0CEB 00 00 00 00 
1089   0CEF 00 00 00 00 
1089   0CF3 00 00 00 00 
1089   0CF7 00 00 00 00 
1089   0CFB 00 00 00 00 
1089   0CFF 00 00 00 00 
1089   0D03 00 00 00 00 
1089   0D07 00 00 00 00 
1089   0D0B 00 00 00 00 
1089   0D0F 00 00 00 00 
1089   0D13 00 00 00 00 
1089   0D17 00 00 00 00 
1089   0D1B 00 00 00 00 
1089   0D1F 00 00 00 00 
1089   0D23 00 00 00 00 
1089   0D27 00 00 00 00 
1089   0D2B 00 00 00 00 
1089   0D2F 00 00 00 00 
1089   0D33 00 00 00 00 
1089   0D37 00 00 00 00 
1089   0D3B 00 00 00 00 
1089   0D3F 00 00 00 00 
1089   0D43 00 00 00 00 
1089   0D47 00 00 00 00 
1089   0D4B 00 00 00 00 
1089   0D4F 00 00 00 00 
1089   0D53 00 00 00 00 
1089   0D57 00 00 00 00 
1089   0D5B 00 00 00 00 
1089   0D5F 00 00 00 00 
1089   0D63 00 00 00 00 
1089   0D67 00 00 00 00 
1089   0D6B 00 00 00 00 
1089   0D6F 00 00 00 00 
1089   0D73 00 00 00 00 
1089   0D77 00 00 00 00 
1089   0D7B 00 00 00 00 
1089   0D7F 00 00 00 00 
1089   0D83 00 00 00 00 
1089   0D87 00 00 00 00 
1089   0D8B 00 00 00 00 
1089   0D8F 00 00 00 00 
1089   0D93 00 00 00 00 
1089   0D97 00 00 00 00 
1089   0D9B 00 00 00 00 
1089   0D9F 00 00 00 00 
1089   0DA3 00 00 00 00 
1089   0DA7 00 00 00 00 
1089   0DAB 00 00 00 00 
1089   0DAF 00 00 00 00 
1089   0DB3 00 00 00 00 
1089   0DB7 00 00 00 00 
1089   0DBB 00 00 00 00 
1089   0DBF 00 00 00 00 
1089   0DC3 00 00 00 00 
1089   0DC7 00 00 00 00 
1089   0DCB 00 00 00 00 
1089   0DCF 00 00 00 00 
1089   0DD3 00 00 00 00 
1089   0DD7 00 00 00 00 
1089   0DDB 00 00 00 00 
1089   0DDF 00 00 00 00 
1089   0DE3 00 00 00 00 
1089   0DE7 00 00 00 00 
1089   0DEB 00 00 00 00 
1089   0DEF 00 00 00 00 
1089   0DF3 00 00 00 00 
1089   0DF7 00 00 00 00 
1089   0DFB 00 00 00 00 
1089   0DFF 00 00 00 00 
1089   0E03 00 00 00 00 
1089   0E07 00 00 00 00 
1089   0E0B 00 00 00 00 
1089   0E0F 00 00 00 00 
1089   0E13 00 00 00 00 
1089   0E17 00 00 00 00 
1089   0E1B 00 00 00 00 
1089   0E1F 00 00 00 00 
1089   0E23 00 00 00 00 
1089   0E27 00 00 00 00 
1089   0E2B 00 00 00 00 
1089   0E2F 00 00 00 00 
1089   0E33 00 00 00 00 
1089   0E37 00 00 00 00 
1089   0E3B 00 00 00 00 
1089   0E3F 00 00 00 00 
1089   0E43 00 00 00 00 
1089   0E47 00 00 00 00 
1089   0E4B 00 00 00 00 
1089   0E4F 00 00 00 00 
1089   0E53 00 00 00 00 
1089   0E57 00 00 00 00 
1089   0E5B 00 00 00 00 
1089   0E5F 00 00 00 00 
1089   0E63 00 00 00 00 
1089   0E67 00 00 00 00 
1089   0E6B 00 00 00 00 
1089   0E6F 00 00 00 00 
1089   0E73 00 00 00 00 
1089   0E77 00 00 00 00 
1089   0E7B 00 00 00 00 
1089   0E7F 00 00 00 00 
1089   0E83 00 00 00 00 
1089   0E87 00 00 00 00 
1089   0E8B 00 00 00 00 
1089   0E8F 00 00 00 00 
1089   0E93 00 00 00 00 
1089   0E97 00 00 00 00 
1089   0E9B 00 00 00 00 
1089   0E9F 00 00 00 00 
1089   0EA3 00 00 00 00 
1089   0EA7 00 00 00 00 
1089   0EAB 00 00 00 00 
1089   0EAF 00 00 00 00 
1089   0EB3 00 00 00 00 
1089   0EB7 00 00 00 00 
1089   0EBB 00 00 00 00 
1089   0EBF 00 00 00 00 
1089   0EC3 00 00 00 00 
1089   0EC7 00 00 00 00 
1089   0ECB 00 00 00 00 
1089   0ECF 00 00 00 00 
1089   0ED3 00 00 00 00 
1089   0ED7 00 00 00 00 
1089   0EDB 00 00 00 00 
1089   0EDF 00 00 00 00 
1089   0EE3 00 00 00 00 
1089   0EE7 00 00 00 00 
1089   0EEB 00 00 00 00 
1089   0EEF 00 00 00 00 
1089   0EF3 00 00 00 00 
1089   0EF7 00 00 00 00 
1089   0EFB 00 00 00 00 
1089   0EFF 00 00 00 00 
1089   0F03 00 00 00 00 
1089   0F07 00 00 00 00 
1089   0F0B 00 00 00 00 
1089   0F0F 00 00 00 00 
1089   0F13 00 00 00 00 
1089   0F17 00 00 00 00 
1089   0F1B 00 00 00 00 
1089   0F1F 00 00 00 00 
1089   0F23 00 00 00 00 
1089   0F27 00 00 00 00 
1089   0F2B 00 00 00 00 
1089   0F2F 00 00 00 00 
1089   0F33 00 00 00 00 
1089   0F37 00 00 00 00 
1089   0F3B 00 00 00 00 
1089   0F3F 00 00 00 00 
1089   0F43 00 00 00 00 
1089   0F47 00 00 00 00 
1089   0F4B 00 00 00 00 
1089   0F4F 00 00 00 00 
1089   0F53 00 00 00 00 
1089   0F57 00 00 00 00 
1089   0F5B 00 00 00 00 
1089   0F5F 00 00 00 00 
1089   0F63 00 00 00 00 
1089   0F67 00 00 00 00 
1089   0F6B 00 00 00 00 
1089   0F6F 00 00 00 00 
1089   0F73 00 00 00 00 
1089   0F77 00 00 00 00 
1089   0F7B 00 00 00 00 
1089   0F7F 00 00 00 00 
1089   0F83 00 00 00 00 
1089   0F87 00 00 00 00 
1089   0F8B 00 00 00 00 
1089   0F8F 00 00 00 00 
1089   0F93 00 00 00 00 
1089   0F97 00 00 00 00 
1089   0F9B 00 00 00 00 
1089   0F9F 00 00 00 00 
1089   0FA3 00 00 00 00 
1089   0FA7 00 00 00 00 
1089   0FAB 00 00 00 00 
1089   0FAF 00 00 00 00 
1089   0FB3 00 00 00 00 
1089   0FB7 00 00 00 00 
1089   0FBB 00 00 00 00 
1089   0FBF 00 00 00 00 
1089   0FC3 00 00 00 00 
1089   0FC7 00 00 00 00 
1089   0FCB 00 00 00 00 
1089   0FCF 00 00 00 00 
1089   0FD3 00 00 00 00 
1089   0FD7 00 00 00 00 
1089   0FDB 00 00 00 00 
1089   0FDF 00 00 00 00 
1089   0FE3 00 00 00 00 
1089   0FE7 00 00 00 00 
1089   0FEB 00 00 00 00 
1089   0FEF 00 00 00 00 
1089   0FF3 00 00 00 00 
1089   0FF7 00 00 00 00 
1089   0FFB 00 00 00 00 
1089   0FFF 00 00 00 00 
1089   1003 00 00 00 00 
1089   1007 00 00 00 00 
1089   100B 00 00 00 00 
1089   100F 00 00 00 00 
1089   1013 00 00 00 00 
1089   1017 00 00 00 00 
1089   101B 00 00 00 00 
1089   101F 00 00 00 00 
1089   1023 00 00 00 00 
1089   1027 00 00 00 00 
1089   102B 00 00 00 00 
1089   102F 00 00 00 00 
1089   1033 00 00 00 00 
1089   1037 00 00 00 00 
1089   103B 00 00 00 00 
1089   103F 00 00 00 00 
1089   1043 00 00 00 00 
1089   1047 00 00 00 00 
1089   104B 00 00 00 00 
1089   104F 00 00 00 00 
1089   1053 00 00 00 00 
1089   1057 00 00 00 00 
1089   105B 00 00 00 00 
1089   105F 00 00 00 00 
1089   1063 00 00 00 00 
1089   1067 00 00 00 00 
1089   106B 00 00 00 00 
1089   106F 00 00 00 00 
1089   1073 00 00 00 00 
1089   1077 00 00 00 00 
1089   107B 00 00 00 00 
1089   107F 00 00 00 00 
1089   1083 00 00 00 00 
1089   1087 00 00 00 00 
1089   108B 00 00 00 00 
1089   108F 00 00 00 00 
1089   1093 00 00 00 00 
1089   1097 00 00 00 00 
1089   109B 00 00 00 00 
1089   109F 00 00 00 00 
1089   10A3 00 00 00 00 
1089   10A7 00 00 00 00 
1089   10AB 00 00 00 00 
1089   10AF 00 00 00 00 
1090   10B3 73 0A       __nextState: .dw __nextState_data
1091   10B5             __currState_data: 
1092   10B5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1092   10B9 20 20 20 20 
1092   10BD 20 20 20 20 
1092   10C1 20 20 20 20 
1092   10C5 20 20 20 20 
1092   10C9 20 20 20 20 
1092   10CD 20 20 20 20 
1092   10D1 20 20 
1093   10D3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1093   10D7 20 20 20 20 
1093   10DB 20 20 20 20 
1093   10DF 20 20 20 20 
1093   10E3 20 20 20 20 
1093   10E7 20 20 20 20 
1093   10EB 20 20 20 20 
1093   10EF 20 20 
1094   10F1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1094   10F5 20 20 20 20 
1094   10F9 20 20 20 20 
1094   10FD 20 20 20 20 
1094   1101 20 20 20 20 
1094   1105 20 20 20 20 
1094   1109 20 20 20 20 
1094   110D 20 20 
1095   110F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1095   1113 20 20 20 20 
1095   1117 20 20 20 20 
1095   111B 20 20 20 20 
1095   111F 20 20 20 20 
1095   1123 20 20 20 20 
1095   1127 20 20 20 20 
1095   112B 20 20 
1096   112D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
1096   1131 20 20 20 20 
1096   1135 20 20 20 20 
1096   1139 20 20 20 20 
1096   113D 20 20 20 20 
1096   1141 20 20 20 20 
1096   1145 20 20 20 40 
1096   1149 20 20 
1097   114B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1097   114F 20 20 20 20 
1097   1153 20 20 20 20 
1097   1157 20 20 20 20 
1097   115B 20 20 20 20 
1097   115F 20 20 20 20 
1097   1163 20 20 20 20 
1097   1167 20 20 
1098   1169 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1098   116D 20 40 20 40 
1098   1171 20 20 20 20 
1098   1175 20 20 20 20 
1098   1179 20 20 20 20 
1098   117D 20 20 20 20 
1098   1181 20 20 20 20 
1098   1185 20 20 
1099   1187 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
1099   118B 20 40 40 20 
1099   118F 20 20 20 20 
1099   1193 20 40 40 20 
1099   1197 20 20 20 20 
1099   119B 20 20 20 20 
1099   119F 20 20 20 40 
1099   11A3 40 20 
1100   11A5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
1100   11A9 20 20 20 20 
1100   11AD 20 20 20 20 
1100   11B1 20 20 40 20 
1100   11B5 20 20 40 20 
1100   11B9 20 20 20 40 
1100   11BD 40 20 20 20 
1100   11C1 20 20 
1101   11C3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
1101   11C7 20 20 20 40 
1101   11CB 40 20 20 20 
1101   11CF 20 40 40 20 
1101   11D3 20 20 20 20 
1101   11D7 20 20 20 40 
1101   11DB 20 20 20 20 
1101   11DF 20 40 
1102   11E1 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
1102   11E5 40 20 20 20 
1102   11E9 20 20 20 20 
1102   11ED 20 20 20 20 
1102   11F1 20 20 20 20 
1102   11F5 20 20 20 40 
1102   11F9 40 20 20 20 
1102   11FD 20 20 
1103   11FF 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1103   1203 20 20 20 40 
1103   1207 20 40 40 20 
1103   120B 20 20 20 40 
1103   120F 20 40 20 20 
1103   1213 20 20 20 20 
1103   1217 20 20 20 20 
1103   121B 20 20 
1104   121D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
1104   1221 20 20 20 20 
1104   1225 20 20 20 20 
1104   1229 20 40 20 20 
1104   122D 20 20 20 40 
1104   1231 20 20 20 20 
1104   1235 20 20 20 40 
1104   1239 20 20 
1105   123B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
1105   123F 20 20 20 20 
1105   1243 20 20 20 20 
1105   1247 20 20 20 20 
1105   124B 20 20 20 20 
1105   124F 20 20 20 20 
1105   1253 40 20 20 20 
1105   1257 40 20 
1106   1259 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1106   125D 20 20 20 20 
1106   1261 20 20 20 20 
1106   1265 20 20 20 20 
1106   1269 20 20 20 20 
1106   126D 20 20 20 20 
1106   1271 20 20 20 20 
1106   1275 20 20 
1107   1277 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1107   127B 20 40 40 20 
1107   127F 20 20 20 20 
1107   1283 20 20 20 20 
1107   1287 20 20 20 20 
1107   128B 20 20 20 20 
1107   128F 20 20 20 20 
1107   1293 20 20 
1108   1295 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1108   1299 20 20 20 20 
1108   129D 20 20 20 20 
1108   12A1 20 20 20 20 
1108   12A5 20 20 20 20 
1108   12A9 20 20 20 20 
1108   12AD 20 20 20 20 
1108   12B1 20 20 
1109   12B3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1109   12B7 20 20 20 20 
1109   12BB 20 20 20 20 
1109   12BF 20 20 20 20 
1109   12C3 20 20 20 20 
1109   12C7 20 20 20 20 
1109   12CB 20 20 20 20 
1109   12CF 20 20 
1110   12D1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1110   12D5 20 20 20 20 
1110   12D9 20 20 20 20 
1110   12DD 20 20 20 20 
1110   12E1 20 20 20 20 
1110   12E5 20 20 20 20 
1110   12E9 20 20 20 20 
1110   12ED 20 20 
1111   12EF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1111   12F3 20 20 20 20 
1111   12F7 20 20 20 20 
1111   12FB 20 20 20 20 
1111   12FF 20 20 20 20 
1111   1303 20 20 20 20 
1111   1307 20 20 20 20 
1111   130B 20 20 
1112   130D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1112   1311 20 20 20 20 
1112   1315 20 20 20 20 
1112   1319 20 20 20 20 
1112   131D 20 20 20 20 
1112   1321 20 20 20 20 
1112   1325 20 20 20 20 
1112   1329 20 20 
1113   132B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1113   132F 20 20 20 20 
1113   1333 20 20 20 20 
1113   1337 20 20 20 20 
1113   133B 20 20 20 20 
1113   133F 20 20 20 20 
1113   1343 20 20 20 20 
1113   1347 20 20 
1114   1349 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1114   134D 20 20 20 20 
1114   1351 20 20 20 20 
1114   1355 20 20 20 20 
1114   1359 20 20 20 20 
1114   135D 20 20 20 20 
1114   1361 20 20 20 20 
1114   1365 20 20 
1115   1367 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1115   136B 20 20 20 20 
1115   136F 20 20 20 20 
1115   1373 20 20 20 20 
1115   1377 20 20 20 20 
1115   137B 20 20 20 20 
1115   137F 20 20 20 20 
1115   1383 20 20 
1116   1385 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1116   1389 20 20 20 20 
1116   138D 20 20 20 20 
1116   1391 20 20 20 20 
1116   1395 20 20 20 20 
1116   1399 20 20 20 20 
1116   139D 20 20 20 20 
1116   13A1 20 20 
1117   13A3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1117   13A7 20 20 20 20 
1117   13AB 20 20 20 20 
1117   13AF 20 20 20 20 
1117   13B3 20 20 20 20 
1117   13B7 20 20 20 20 
1117   13BB 20 20 20 20 
1117   13BF 20 20 
1118   13C1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$20,
1118   13C5 20 20 20 20 
1118   13C9 20 20 20 20 
1118   13CD 20 20 20 20 
1118   13D1 20 20 20 20 
1118   13D5 20 20 20 20 
1118   13D9 20 20 40 40 
1118   13DD 40 20 
1119   13DF 20 20 40 40 .db $20,$20,$40,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$20,$20,$20,$40,$40,$40,$20,$20,$20,$20,
1119   13E3 40 20 20 20 
1119   13E7 20 20 20 20 
1119   13EB 20 20 20 20 
1119   13EF 20 40 40 40 
1119   13F3 20 20 20 40 
1119   13F7 40 40 20 20 
1119   13FB 20 20 
1120   13FD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1120   1401 20 20 20 20 
1120   1405 20 20 20 20 
1120   1409 20 20 20 20 
1120   140D 20 20 20 20 
1120   1411 20 20 20 20 
1120   1415 20 20 20 20 
1120   1419 20 20 
1121   141B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,
1121   141F 20 20 20 20 
1121   1423 20 20 20 20 
1121   1427 20 20 40 20 
1121   142B 20 20 20 40 
1121   142F 20 40 20 20 
1121   1433 20 20 40 20 
1121   1437 20 20 
1122   1439 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,
1122   143D 20 40 20 20 
1122   1441 20 20 40 20 
1122   1445 40 20 20 20 
1122   1449 20 40 20 20 
1122   144D 20 20 20 20 
1122   1451 40 20 20 20 
1122   1455 20 40 
1123   1457 20 40 20 20 .db $20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,
1123   145B 20 20 40 20 
1123   145F 20 20 20 20 
1123   1463 20 20 20 40 
1123   1467 20 20 20 20 
1123   146B 40 20 40 20 
1123   146F 20 20 20 40 
1123   1473 20 20 
1124   1475 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,
1124   1479 40 20 20 20 
1124   147D 20 40 20 40 
1124   1481 20 20 20 20 
1124   1485 40 20 20 20 
1124   1489 20 20 20 20 
1124   148D 20 40 20 20 
1124   1491 20 20 
1125   1493 40 20 40 20 .db $40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$20,$20,$20,$40,$40,$40,$20,$20,$20,$20,$20,
1125   1497 20 20 20 40 
1125   149B 20 20 20 20 
1125   149F 20 20 20 20 
1125   14A3 40 40 40 20 
1125   14A7 20 20 40 40 
1125   14AB 40 20 20 20 
1125   14AF 20 20 
1126   14B1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$20,$20,$20,$40,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1126   14B5 20 20 20 40 
1126   14B9 40 40 20 20 
1126   14BD 20 40 40 40 
1126   14C1 20 20 20 20 
1126   14C5 20 20 20 20 
1126   14C9 20 20 20 20 
1126   14CD 20 20 
1127   14CF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1127   14D3 20 20 20 20 
1127   14D7 20 20 20 20 
1127   14DB 20 20 20 20 
1127   14DF 20 20 20 20 
1127   14E3 20 20 20 20 
1127   14E7 20 20 20 20 
1127   14EB 20 20 
1128   14ED 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$40,$40,$20,$20,$20,$40,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,
1128   14F1 20 20 40 40 
1128   14F5 40 20 20 20 
1128   14F9 40 40 40 20 
1128   14FD 20 20 20 20 
1128   1501 20 20 20 20 
1128   1505 20 20 20 40 
1128   1509 40 40 
1129   150B 20 20 20 40 .db $20,$20,$20,$40,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,
1129   150F 40 40 20 20 
1129   1513 20 20 20 20 
1129   1517 20 20 40 20 
1129   151B 20 20 20 40 
1129   151F 20 40 20 20 
1129   1523 20 20 40 20 
1129   1527 20 20 
1130   1529 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,
1130   152D 20 40 20 20 
1130   1531 20 20 40 20 
1130   1535 40 20 20 20 
1130   1539 20 40 20 20 
1130   153D 20 20 20 20 
1130   1541 40 20 20 20 
1130   1545 20 40 
1131   1547 20 40 20 20 .db $20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,
1131   154B 20 20 40 20 
1131   154F 20 20 20 20 
1131   1553 20 20 20 40 
1131   1557 20 20 20 20 
1131   155B 40 20 40 20 
1131   155F 20 20 20 40 
1131   1563 20 20 
1132   1565 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,
1132   1569 40 20 20 20 
1132   156D 20 40 20 40 
1132   1571 20 20 20 20 
1132   1575 40 20 20 20 
1132   1579 20 20 20 20 
1132   157D 20 40 20 20 
1132   1581 20 20 
1133   1583 40 20 40 20 .db $40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1133   1587 20 20 20 40 
1133   158B 20 20 20 20 
1133   158F 20 20 20 20 
1133   1593 20 20 20 20 
1133   1597 20 20 20 20 
1133   159B 20 20 20 20 
1133   159F 20 20 
1134   15A1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$20,
1134   15A5 20 20 20 20 
1134   15A9 20 20 20 20 
1134   15AD 20 20 20 20 
1134   15B1 20 20 20 20 
1134   15B5 20 20 20 20 
1134   15B9 20 20 40 40 
1134   15BD 40 20 
1135   15BF 20 20 40 40 .db $20,$20,$40,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$20,$20,$20,$40,$40,$40,$20,$20,$20,$20,
1135   15C3 40 20 20 20 
1135   15C7 20 20 20 20 
1135   15CB 20 20 20 20 
1135   15CF 20 40 40 40 
1135   15D3 20 20 20 40 
1135   15D7 40 40 20 20 
1135   15DB 20 20 
1136   15DD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1136   15E1 20 20 20 20 
1136   15E5 20 20 20 20 
1136   15E9 20 20 20 20 
1136   15ED 20 20 20 20 
1136   15F1 20 20 20 20 
1136   15F5 20 20 20 20 
1136   15F9 20 20 
1137   15FB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1137   15FF 20 20 20 20 
1137   1603 20 20 20 20 
1137   1607 20 20 20 20 
1137   160B 20 20 20 20 
1137   160F 20 20 20 20 
1137   1613 20 20 20 20 
1137   1617 20 20 
1138   1619 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1138   161D 20 20 20 20 
1138   1621 20 20 20 20 
1138   1625 20 20 20 20 
1138   1629 20 20 20 20 
1138   162D 20 20 20 20 
1138   1631 20 20 20 20 
1138   1635 20 20 
1139   1637 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1139   163B 20 20 20 20 
1139   163F 20 20 20 20 
1139   1643 20 20 20 20 
1139   1647 20 20 20 20 
1139   164B 20 20 20 20 
1139   164F 20 20 20 20 
1139   1653 20 20 
1140   1655 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1140   1659 20 20 20 20 
1140   165D 20 20 20 20 
1140   1661 20 20 20 20 
1140   1665 20 20 20 20 
1140   1669 20 20 20 20 
1140   166D 20 20 20 20 
1140   1671 20 20 
1141   1673 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1141   1677 20 20 20 20 
1141   167B 20 20 20 20 
1141   167F 20 20 20 20 
1141   1683 20 20 20 20 
1141   1687 20 20 20 20 
1141   168B 20 20 20 20 
1141   168F 20 20 
1142   1691 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1142   1695 20 20 20 20 
1142   1699 20 20 20 20 
1142   169D 20 20 20 20 
1142   16A1 20 20 20 20 
1143   16A5 00 00 00 00 .fill 80, 0
1143   16A9 00 00 00 00 
1143   16AD 00 00 00 00 
1143   16B1 00 00 00 00 
1143   16B5 00 00 00 00 
1143   16B9 00 00 00 00 
1143   16BD 00 00 00 00 
1143   16C1 00 00 00 00 
1143   16C5 00 00 00 00 
1143   16C9 00 00 00 00 
1143   16CD 00 00 00 00 
1143   16D1 00 00 00 00 
1143   16D5 00 00 00 00 
1143   16D9 00 00 00 00 
1143   16DD 00 00 00 00 
1143   16E1 00 00 00 00 
1143   16E5 00 00 00 00 
1143   16E9 00 00 00 00 
1143   16ED 00 00 00 00 
1143   16F1 00 00 00 00 
1144   16F5 B5 10       __currState: .dw __currState_data
1145   16F7 40 20 00    __string_0: .db "@ ", 0
1146   16FA 2E 20 00    __string_1: .db ". ", 0
1147   16FD             ; --- END DATA BLOCK
1148   16FD             
1149   16FD             ; --- BEGIN INCLUDE BLOCK
1150   16FD             .include "lib/stdio.asm"
0001+  16FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  16FD             ; stdio.s
0003+  16FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  16FD             .include "lib/string.asm"
0001++ 16FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 16FD             ; string.s
0003++ 16FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 16FD             
0005++ 16FD             
0006++ 16FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 16FD             ; strrev
0008++ 16FD             ; reverse a string
0009++ 16FD             ; D = string address
0010++ 16FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 16FD             ; 01234
0012++ 16FD             strrev:
0013++ 16FD 4B          	pusha
0014++ 16FE 07 44 17    	call strlen	; length in C
0015++ 1701 12          	mov a, c
0016++ 1702 AF 01 00    	cmp a, 1
0017++ 1705 D0 1F 17    	jleu strrev_end	; check string length. string len must be > 1
0018++ 1708 7D          	dec a
0019++ 1709 FD 4E       	mov si, d	; beginning of string
0020++ 170B FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 170D 59          	add d, a	; end of string
0022++ 170E 12          	mov a, c
0023++ 170F FD 9B       	shr a		; divide by 2
0024++ 1711 39          	mov c, a	; C now counts the steps
0025++ 1712             strrev_L0:
0026++ 1712 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1713 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1714 3E          	mov [d], al	; store left char into right side
0029++ 1715 1B          	mov al, bl
0030++ 1716 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1717 7E          	dec c
0032++ 1718 7F          	dec d
0033++ 1719 C2 00 00    	cmp c, 0
0034++ 171C C7 12 17    	jne strrev_L0
0035++ 171F             strrev_end:
0036++ 171F 4C          	popa
0037++ 1720 09          	ret
0038++ 1721             	
0039++ 1721             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1721             ; strchr
0041++ 1721             ; search string in D for char in AL
0042++ 1721             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1721             strchr:
0044++ 1721             strchr_L0:
0045++ 1721 32          	mov bl, [d]
0046++ 1722 C1 00       	cmp bl, 0
0047++ 1724 C6 2F 17    	je strchr_end
0048++ 1727 BA          	cmp al, bl
0049++ 1728 C6 2F 17    	je strchr_end
0050++ 172B 79          	inc d
0051++ 172C 0A 21 17    	jmp strchr_L0
0052++ 172F             strchr_end:
0053++ 172F 1B          	mov al, bl
0054++ 1730 09          	ret
0055++ 1731             
0056++ 1731             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1731             ; strstr
0058++ 1731             ; find sub-string
0059++ 1731             ; str1 in SI
0060++ 1731             ; str2 in DI
0061++ 1731             ; SI points to end of source string
0062++ 1731             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1731             strstr:
0064++ 1731 DB          	push al
0065++ 1732 DA          	push d
0066++ 1733 E3          	push di
0067++ 1734             strstr_loop:
0068++ 1734 F3          	cmpsb					; compare a byte of the strings
0069++ 1735 C7 40 17    	jne strstr_ret
0070++ 1738 FC 00 00    	lea d, [di + 0]
0071++ 173B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 173D C7 34 17    	jne strstr_loop				; equal chars but not at end
0073++ 1740             strstr_ret:
0074++ 1740 F0          	pop di
0075++ 1741 E7          	pop d
0076++ 1742 E8          	pop al
0077++ 1743 09          	ret
0078++ 1744             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1744             ; length of null terminated string
0080++ 1744             ; result in C
0081++ 1744             ; pointer in D
0082++ 1744             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1744             strlen:
0084++ 1744 DA          	push d
0085++ 1745 38 00 00    	mov c, 0
0086++ 1748             strlen_L1:
0087++ 1748 BD 00       	cmp byte [d], 0
0088++ 174A C6 52 17    	je strlen_ret
0089++ 174D 79          	inc d
0090++ 174E 78          	inc c
0091++ 174F 0A 48 17    	jmp strlen_L1
0092++ 1752             strlen_ret:
0093++ 1752 E7          	pop d
0094++ 1753 09          	ret
0095++ 1754             
0096++ 1754             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1754             ; STRCMP
0098++ 1754             ; compare two strings
0099++ 1754             ; str1 in SI
0100++ 1754             ; str2 in DI
0101++ 1754             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1754             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1754             strcmp:
0104++ 1754 DB          	push al
0105++ 1755 DA          	push d
0106++ 1756 E3          	push di
0107++ 1757 E2          	push si
0108++ 1758             strcmp_loop:
0109++ 1758 F3          	cmpsb					; compare a byte of the strings
0110++ 1759 C7 64 17    	jne strcmp_ret
0111++ 175C FB FF FF    	lea d, [si +- 1]
0112++ 175F BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1761 C7 58 17    	jne strcmp_loop				; equal chars but not at end
0114++ 1764             strcmp_ret:
0115++ 1764 EF          	pop si
0116++ 1765 F0          	pop di
0117++ 1766 E7          	pop d
0118++ 1767 E8          	pop al
0119++ 1768 09          	ret
0120++ 1769             
0121++ 1769             
0122++ 1769             ; STRCPY
0123++ 1769             ; copy null terminated string from SI to DI
0124++ 1769             ; source in SI
0125++ 1769             ; destination in DI
0126++ 1769             strcpy:
0127++ 1769 E2          	push si
0128++ 176A E3          	push di
0129++ 176B DB          	push al
0130++ 176C             strcpy_L1:
0131++ 176C F6          	lodsb
0132++ 176D F7          	stosb
0133++ 176E B9 00       	cmp al, 0
0134++ 1770 C7 6C 17    	jne strcpy_L1
0135++ 1773             strcpy_end:
0136++ 1773 E8          	pop al
0137++ 1774 F0          	pop di
0138++ 1775 EF          	pop si
0139++ 1776 09          	ret
0140++ 1777             
0141++ 1777             ; STRCAT
0142++ 1777             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1777             ; source in SI
0144++ 1777             ; destination in DI
0145++ 1777             strcat:
0146++ 1777 E2          	push si
0147++ 1778 E3          	push di
0148++ 1779 D7          	push a
0149++ 177A DA          	push d
0150++ 177B 50          	mov a, di
0151++ 177C 3C          	mov d, a
0152++ 177D             strcat_goto_end_L1:
0153++ 177D BD 00       	cmp byte[d], 0
0154++ 177F C6 86 17    	je strcat_start
0155++ 1782 79          	inc d
0156++ 1783 0A 7D 17    	jmp strcat_goto_end_L1
0157++ 1786             strcat_start:
0158++ 1786 FD 50       	mov di, d
0159++ 1788             strcat_L1:
0160++ 1788 F6          	lodsb
0161++ 1789 F7          	stosb
0162++ 178A B9 00       	cmp al, 0
0163++ 178C C7 88 17    	jne strcat_L1
0164++ 178F             strcat_end:
0165++ 178F E7          	pop d
0166++ 1790 E4          	pop a
0167++ 1791 F0          	pop di
0168++ 1792 EF          	pop si
0169++ 1793 09          	ret
0005+  1794             
0006+  1794 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  1798 34 35 36 37 
0006+  179C 38 39 41 42 
0006+  17A0 43 44 45 46 
0007+  17A4 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  17A8 1B 5B 48 00 
0008+  17AC             
0009+  17AC 01 00       table_power:.dw 1
0010+  17AE 0A 00       			.dw 10
0011+  17B0 64 00       			.dw 100
0012+  17B2 E8 03       			.dw 1000
0013+  17B4 10 27       			.dw 10000
0014+  17B6             
0015+  17B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  17B6             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  17B6             ; ASCII in BL
0018+  17B6             ; result in AL
0019+  17B6             ; ascii for F = 0100 0110
0020+  17B6             ; ascii for 9 = 0011 1001
0021+  17B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  17B6             hex_ascii_encode:
0023+  17B6 1B          	mov al, bl
0024+  17B7 93 40       	test al, $40				; test if letter or number
0025+  17B9 C7 BF 17    	jnz hex_letter
0026+  17BC 87 0F       	and al, $0F				; get number
0027+  17BE 09          	ret
0028+  17BF             hex_letter:
0029+  17BF 87 0F       	and al, $0F				; get letter
0030+  17C1 6A 09       	add al, 9
0031+  17C3 09          	ret
0032+  17C4             
0033+  17C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  17C4             ; ATOI
0035+  17C4             ; 2 letter hex string in B
0036+  17C4             ; 8bit integer returned in AL
0037+  17C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  17C4             atoi:
0039+  17C4 D8          	push b
0040+  17C5 07 B6 17    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  17C8 30          	mov bl, bh
0042+  17C9 DB          	push al					; save a
0043+  17CA 07 B6 17    	call hex_ascii_encode
0044+  17CD EA          	pop bl	
0045+  17CE FD 9E 04    	shl al, 4
0046+  17D1 8C          	or al, bl
0047+  17D2 E5          	pop b
0048+  17D3 09          	ret	
0049+  17D4             
0050+  17D4             
0051+  17D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  17D4             ; printf
0053+  17D4             ; no need for explanations!
0054+  17D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  17D4             printf:
0056+  17D4 09          	ret
0057+  17D5             
0058+  17D5             
0059+  17D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  17D5             ; scanf
0061+  17D5             ; no need for explanations!
0062+  17D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  17D5             scanf:
0064+  17D5 09          	ret
0065+  17D6             
0066+  17D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  17D6             ; ITOA
0068+  17D6             ; 8bit value in BL
0069+  17D6             ; 2 byte ASCII result in A
0070+  17D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  17D6             itoa:
0072+  17D6 DA          	push d
0073+  17D7 D8          	push b
0074+  17D8 A7 00       	mov bh, 0
0075+  17DA FD A4 04    	shr bl, 4	
0076+  17DD 74          	mov d, b
0077+  17DE 1F 94 17    	mov al, [d + s_hex_digits]
0078+  17E1 23          	mov ah, al
0079+  17E2             	
0080+  17E2 E5          	pop b
0081+  17E3 D8          	push b
0082+  17E4 A7 00       	mov bh, 0
0083+  17E6 FD 87 0F    	and bl, $0F
0084+  17E9 74          	mov d, b
0085+  17EA 1F 94 17    	mov al, [d + s_hex_digits]
0086+  17ED E5          	pop b
0087+  17EE E7          	pop d
0088+  17EF 09          	ret
0089+  17F0             
0090+  17F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  17F0             ; HEX STRING TO BINARY
0092+  17F0             ; di = destination address
0093+  17F0             ; si = source
0094+  17F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  17F0             hex_to_int:
0096+  17F0             hex_to_int_L1:
0097+  17F0 F6          	lodsb					; load from [SI] to AL
0098+  17F1 B9 00       	cmp al, 0				; check if ASCII 0
0099+  17F3 C6 00 18    	jz hex_to_int_ret
0100+  17F6 36          	mov bh, al
0101+  17F7 F6          	lodsb
0102+  17F8 2F          	mov bl, al
0103+  17F9 07 C4 17    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  17FC F7          	stosb					; store AL to [DI]
0105+  17FD 0A F0 17    	jmp hex_to_int_L1
0106+  1800             hex_to_int_ret:
0107+  1800 09          	ret		
0108+  1801             
0109+  1801             
0110+  1801             
0111+  1801             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  1801             ; GETCHAR
0113+  1801             ; char in ah
0114+  1801             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  1801             getchar:
0116+  1801 DB          	push al
0117+  1802             getchar_retry:
0118+  1802 FD 0C       	sti
0119+  1804 19 01       	mov al, 1
0120+  1806 05 03       	syscall sys_io			; receive in AH
0121+  1808 B9 00       	cmp al, 0			; check if any char was receive
0122+  180A C6 02 18    	je getchar_retry
0123+  180D E8          	pop al
0124+  180E 09          	ret
0125+  180F             
0126+  180F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  180F             ; PUTCHAR
0128+  180F             ; char in ah
0129+  180F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  180F             putchar:
0131+  180F D7          	push a
0132+  1810 19 00       	mov al, 0
0133+  1812 05 03       	syscall sys_io			; char in AH
0134+  1814 E4          	pop a
0135+  1815 09          	ret
0136+  1816             
0137+  1816             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  1816             ;; INPUT A STRING
0139+  1816             ;; terminates with null
0140+  1816             ;; pointer in D
0141+  1816             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  1816             gets:
0143+  1816 D7          	push a
0144+  1817 DA          	push d
0145+  1818             gets_loop:
0146+  1818 FD 0C       	sti
0147+  181A 19 01       	mov al, 1
0148+  181C 05 03       	syscall sys_io			; receive in AH
0149+  181E B9 00       	cmp al, 0				; check error code (AL)
0150+  1820 C6 18 18    	je gets_loop			; if no char received, retry
0151+  1823             
0152+  1823 76 1B       	cmp ah, 27
0153+  1825 C6 46 18    	je gets_telnet_escape
0154+  1828 76 0A       	cmp ah, $0A				; LF
0155+  182A C6 9F 18    	je gets_end
0156+  182D 76 0D       	cmp ah, $0D				; CR
0157+  182F C6 9F 18    	je gets_end
0158+  1832 76 5C       	cmp ah, $5C				; '\\'
0159+  1834 C6 76 18    	je gets_escape
0160+  1837             	
0161+  1837 76 08       	cmp ah, $08			; check for backspace
0162+  1839 C6 42 18    	je gets_backspace
0163+  183C             
0164+  183C 1A          	mov al, ah
0165+  183D 3E          	mov [d], al
0166+  183E 79          	inc d
0167+  183F 0A 18 18    	jmp gets_loop
0168+  1842             gets_backspace:
0169+  1842 7F          	dec d
0170+  1843 0A 18 18    	jmp gets_loop
0171+  1846             gets_telnet_escape:
0172+  1846 FD 0C       	sti
0173+  1848 19 01       	mov al, 1
0174+  184A 05 03       	syscall sys_io				; receive in AH without echo
0175+  184C B9 00       	cmp al, 0					; check error code (AL)
0176+  184E C6 46 18    	je gets_telnet_escape		; if no char received, retry
0177+  1851 76 5B       	cmp ah, '['
0178+  1853 C7 18 18    	jne gets_loop
0179+  1856             gets_telnet_escape_phase2:
0180+  1856 FD 0C       	sti
0181+  1858 19 01       	mov al, 1
0182+  185A 05 03       	syscall sys_io					; receive in AH without echo
0183+  185C B9 00       	cmp al, 0						; check error code (AL)
0184+  185E C6 56 18    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  1861 76 44       	cmp ah, 'D'
0186+  1863 C6 6E 18    	je gets_left_arrow
0187+  1866 76 43       	cmp ah, 'C'
0188+  1868 C6 72 18    	je gets_right_arrow
0189+  186B 0A 18 18    	jmp gets_loop
0190+  186E             gets_left_arrow:
0191+  186E 7F          	dec d
0192+  186F 0A 18 18    	jmp gets_loop
0193+  1872             gets_right_arrow:
0194+  1872 79          	inc d
0195+  1873 0A 18 18    	jmp gets_loop
0196+  1876             gets_escape:
0197+  1876 FD 0C       	sti
0198+  1878 19 01       	mov al, 1
0199+  187A 05 03       	syscall sys_io			; receive in AH
0200+  187C B9 00       	cmp al, 0				; check error code (AL)
0201+  187E C6 76 18    	je gets_escape			; if no char received, retry
0202+  1881 76 6E       	cmp ah, 'n'
0203+  1883 C6 91 18    	je gets_LF
0204+  1886 76 72       	cmp ah, 'r'
0205+  1888 C6 98 18    	je gets_CR
0206+  188B 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  188C 3E          	mov [d], al
0208+  188D 79          	inc d
0209+  188E 0A 18 18    	jmp gets_loop
0210+  1891             gets_LF:
0211+  1891 19 0A       	mov al, $0A
0212+  1893 3E          	mov [d], al
0213+  1894 79          	inc d
0214+  1895 0A 18 18    	jmp gets_loop
0215+  1898             gets_CR:
0216+  1898 19 0D       	mov al, $0D
0217+  189A 3E          	mov [d], al
0218+  189B 79          	inc d
0219+  189C 0A 18 18    	jmp gets_loop
0220+  189F             gets_end:
0221+  189F 19 00       	mov al, 0
0222+  18A1 3E          	mov [d], al				; terminate string
0223+  18A2 E7          	pop d
0224+  18A3 E4          	pop a
0225+  18A4 09          	ret
0226+  18A5             
0227+  18A5             
0228+  18A5             
0229+  18A5             
0230+  18A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  18A5             ;; INPUT TEXT
0232+  18A5             ;; terminated with CTRL+D
0233+  18A5             ;; pointer in D
0234+  18A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  18A5             gettxt:
0236+  18A5 D7          	push a
0237+  18A6 DA          	push d
0238+  18A7             gettxt_loop:
0239+  18A7 19 01       	mov al, 1
0240+  18A9 05 03       	syscall sys_io			; receive in AH
0241+  18AB B9 00       	cmp al, 0				; check error code (AL)
0242+  18AD C6 A7 18    	je gettxt_loop		; if no char received, retry
0243+  18B0 76 04       	cmp ah, 4			; EOT
0244+  18B2 C6 F0 18    	je gettxt_end
0245+  18B5 76 08       	cmp ah, $08			; check for backspace
0246+  18B7 C6 EC 18    	je gettxt_backspace
0247+  18BA 76 5C       	cmp ah, $5C				; '\\'
0248+  18BC C6 C5 18    	je gettxt_escape
0249+  18BF 1A          	mov al, ah
0250+  18C0 3E          	mov [d], al
0251+  18C1 79          	inc d
0252+  18C2 0A A7 18    	jmp gettxt_loop
0253+  18C5             gettxt_escape:
0254+  18C5 19 01       	mov al, 1
0255+  18C7 05 03       	syscall sys_io			; receive in AH
0256+  18C9 B9 00       	cmp al, 0				; check error code (AL)
0257+  18CB C6 C5 18    	je gettxt_escape		; if no char received, retry
0258+  18CE 76 6E       	cmp ah, 'n'
0259+  18D0 C6 DE 18    	je gettxt_LF
0260+  18D3 76 72       	cmp ah, 'r'
0261+  18D5 C6 E5 18    	je gettxt_CR
0262+  18D8 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  18D9 3E          	mov [d], al
0264+  18DA 79          	inc d
0265+  18DB 0A A7 18    	jmp gettxt_loop
0266+  18DE             gettxt_LF:
0267+  18DE 19 0A       	mov al, $0A
0268+  18E0 3E          	mov [d], al
0269+  18E1 79          	inc d
0270+  18E2 0A A7 18    	jmp gettxt_loop
0271+  18E5             gettxt_CR:
0272+  18E5 19 0D       	mov al, $0D
0273+  18E7 3E          	mov [d], al
0274+  18E8 79          	inc d
0275+  18E9 0A A7 18    	jmp gettxt_loop
0276+  18EC             gettxt_backspace:
0277+  18EC 7F          	dec d
0278+  18ED 0A A7 18    	jmp gettxt_loop
0279+  18F0             gettxt_end:
0280+  18F0 19 00       	mov al, 0
0281+  18F2 3E          	mov [d], al				; terminate string
0282+  18F3 E7          	pop d
0283+  18F4 E4          	pop a
0284+  18F5 09          	ret
0285+  18F6             
0286+  18F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  18F6             ; PRINT NEW LINE
0288+  18F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  18F6             printnl:
0290+  18F6 D7          	push a
0291+  18F7 10 00 0A    	mov a, $0A00
0292+  18FA 05 03       	syscall sys_io
0293+  18FC 10 00 0D    	mov a, $0D00
0294+  18FF 05 03       	syscall sys_io
0295+  1901 E4          	pop a
0296+  1902 09          	ret
0297+  1903             
0298+  1903             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  1903             ; strtoint
0300+  1903             ; 4 digit hex string number in d
0301+  1903             ; integer returned in A
0302+  1903             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  1903             strtointx:
0304+  1903 D8          	push b
0305+  1904 32          	mov bl, [d]
0306+  1905 37          	mov bh, bl
0307+  1906 33 01 00    	mov bl, [d + 1]
0308+  1909 07 C4 17    	call atoi				; convert to int in AL
0309+  190C 23          	mov ah, al				; move to AH
0310+  190D 33 02 00    	mov bl, [d + 2]
0311+  1910 37          	mov bh, bl
0312+  1911 33 03 00    	mov bl, [d + 3]
0313+  1914 07 C4 17    	call atoi				; convert to int in AL
0314+  1917 E5          	pop b
0315+  1918 09          	ret
0316+  1919             
0317+  1919             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  1919             ; strtoint
0319+  1919             ; 5 digit base10 string number in d
0320+  1919             ; integer returned in A
0321+  1919             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  1919             strtoint:
0323+  1919 E2          	push si
0324+  191A D8          	push b
0325+  191B D9          	push c
0326+  191C DA          	push d
0327+  191D 07 44 17    	call strlen			; get string length in C
0328+  1920 7E          	dec c
0329+  1921 FD 4E       	mov si, d
0330+  1923 12          	mov a, c
0331+  1924 FD 99       	shl a
0332+  1926 3B AC 17    	mov d, table_power
0333+  1929 59          	add d, a
0334+  192A 38 00 00    	mov c, 0
0335+  192D             strtoint_L0:
0336+  192D F6          	lodsb			; load ASCII to al
0337+  192E B9 00       	cmp al, 0
0338+  1930 C6 43 19    	je strtoint_end
0339+  1933 6F 30       	sub al, $30		; make into integer
0340+  1935 22 00       	mov ah, 0
0341+  1937 2A          	mov b, [d]
0342+  1938 AC          	mul a, b			; result in B since it fits in 16bits
0343+  1939 11          	mov a, b
0344+  193A 28          	mov b, c
0345+  193B 54          	add a, b
0346+  193C 39          	mov c, a
0347+  193D 63 02 00    	sub d, 2
0348+  1940 0A 2D 19    	jmp strtoint_L0
0349+  1943             strtoint_end:
0350+  1943 12          	mov a, c
0351+  1944 E7          	pop d
0352+  1945 E6          	pop c
0353+  1946 E5          	pop b
0354+  1947 EF          	pop si
0355+  1948 09          	ret
0356+  1949             
0357+  1949             
0358+  1949             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  1949             ; PRINT NULL TERMINATED STRING
0360+  1949             ; pointer in D
0361+  1949             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  1949             puts:
0363+  1949 D7          	push a
0364+  194A DA          	push d
0365+  194B             puts_L1:
0366+  194B 1E          	mov al, [d]
0367+  194C B9 00       	cmp al, 0
0368+  194E C6 5A 19    	jz puts_END
0369+  1951 23          	mov ah, al
0370+  1952 19 00       	mov al, 0
0371+  1954 05 03       	syscall sys_io
0372+  1956 79          	inc d
0373+  1957 0A 4B 19    	jmp puts_L1
0374+  195A             puts_END:
0375+  195A E7          	pop d
0376+  195B E4          	pop a
0377+  195C 09          	ret
0378+  195D             
0379+  195D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  195D             ; PRINT N SIZE STRING
0381+  195D             ; pointer in D
0382+  195D             ; size in C
0383+  195D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  195D             putsn:
0385+  195D DB          	push al
0386+  195E DA          	push d
0387+  195F D9          	push c
0388+  1960             putsn_L0:
0389+  1960 1E          	mov al, [d]
0390+  1961 23          	mov ah, al
0391+  1962 19 00       	mov al, 0
0392+  1964 05 03       	syscall sys_io
0393+  1966 79          	inc d
0394+  1967 7E          	dec c	
0395+  1968 C2 00 00    	cmp c, 0
0396+  196B C7 60 19    	jne putsn_L0
0397+  196E             putsn_end:
0398+  196E E6          	pop c
0399+  196F E7          	pop d
0400+  1970 E8          	pop al
0401+  1971 09          	ret
0402+  1972             
0403+  1972             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  1972             ; print 16bit decimal number
0405+  1972             ; input number in A
0406+  1972             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  1972             print_u16d:
0408+  1972 D7          	push a
0409+  1973 D8          	push b
0410+  1974 26 10 27    	mov b, 10000
0411+  1977 AE          	div a, b			; get 10000 coeff.
0412+  1978 07 9E 19    	call print_number
0413+  197B 11          	mov a, b
0414+  197C 26 E8 03    	mov b, 1000
0415+  197F AE          	div a, b			; get 10000 coeff.
0416+  1980 07 9E 19    	call print_number
0417+  1983 11          	mov a, b
0418+  1984 26 64 00    	mov b, 100
0419+  1987 AE          	div a, b
0420+  1988 07 9E 19    	call print_number
0421+  198B 11          	mov a, b
0422+  198C 26 0A 00    	mov b, 10
0423+  198F AE          	div a, b
0424+  1990 07 9E 19    	call print_number
0425+  1993 11          	mov a, b
0426+  1994 6A 30       	add al, $30
0427+  1996 23          	mov ah, al
0428+  1997 19 00       	mov al, 0
0429+  1999 05 03       	syscall sys_io	; print coeff
0430+  199B E5          	pop b
0431+  199C E4          	pop a
0432+  199D 09          	ret
0433+  199E             
0434+  199E             
0435+  199E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  199E             ; if A == 0, print space
0437+  199E             ; else print A
0438+  199E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  199E             print_number:
0440+  199E 6A 30       	add al, $30
0441+  19A0 23          	mov ah, al
0442+  19A1 07 0F 18    	call putchar
0443+  19A4 09          	ret
0444+  19A5             
0445+  19A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  19A5             ; PRINT 16BIT HEX INTEGER
0447+  19A5             ; integer value in reg B
0448+  19A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  19A5             print_u16x:
0450+  19A5 D7          	push a
0451+  19A6 D8          	push b
0452+  19A7 DD          	push bl
0453+  19A8 30          	mov bl, bh
0454+  19A9 07 D6 17    	call itoa				; convert bh to char in A
0455+  19AC 2F          	mov bl, al				; save al
0456+  19AD 19 00       	mov al, 0
0457+  19AF 05 03       	syscall sys_io				; display AH
0458+  19B1 24          	mov ah, bl				; retrieve al
0459+  19B2 19 00       	mov al, 0
0460+  19B4 05 03       	syscall sys_io				; display AL
0461+  19B6             
0462+  19B6 EA          	pop bl
0463+  19B7 07 D6 17    	call itoa				; convert bh to char in A
0464+  19BA 2F          	mov bl, al				; save al
0465+  19BB 19 00       	mov al, 0
0466+  19BD 05 03       	syscall sys_io				; display AH
0467+  19BF 24          	mov ah, bl				; retrieve al
0468+  19C0 19 00       	mov al, 0
0469+  19C2 05 03       	syscall sys_io				; display AL
0470+  19C4             
0471+  19C4 E5          	pop b
0472+  19C5 E4          	pop a
0473+  19C6 09          	ret
0474+  19C7             
0475+  19C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  19C7             ; INPUT 16BIT HEX INTEGER
0477+  19C7             ; read 16bit integer into A
0478+  19C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  19C7             scan_u16x:
0480+  19C7 F8 10 00    	enter 16
0481+  19CA D8          	push b
0482+  19CB DA          	push d
0483+  19CC             
0484+  19CC FA F1 FF    	lea d, [bp + -15]
0485+  19CF 07 16 18    	call gets				; get number
0486+  19D2             
0487+  19D2 32          	mov bl, [d]
0488+  19D3 37          	mov bh, bl
0489+  19D4 33 01 00    	mov bl, [d + 1]
0490+  19D7 07 C4 17    	call atoi				; convert to int in AL
0491+  19DA 23          	mov ah, al				; move to AH
0492+  19DB             
0493+  19DB 33 02 00    	mov bl, [d + 2]
0494+  19DE 37          	mov bh, bl
0495+  19DF 33 03 00    	mov bl, [d + 3]
0496+  19E2 07 C4 17    	call atoi				; convert to int in AL
0497+  19E5             
0498+  19E5 E7          	pop d
0499+  19E6 E5          	pop b
0500+  19E7 F9          	leave
0501+  19E8 09          	ret
0502+  19E9             
0503+  19E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  19E9             ; PRINT 8bit HEX INTEGER
0505+  19E9             ; integer value in reg bl
0506+  19E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  19E9             print_u8x:
0508+  19E9 D7          	push a
0509+  19EA DD          	push bl
0510+  19EB             
0511+  19EB 07 D6 17    	call itoa				; convert bl to char in A
0512+  19EE 2F          	mov bl, al				; save al
0513+  19EF 19 00       	mov al, 0
0514+  19F1 05 03       	syscall sys_io				; display AH
0515+  19F3 24          	mov ah, bl				; retrieve al
0516+  19F4 19 00       	mov al, 0
0517+  19F6 05 03       	syscall sys_io				; display AL
0518+  19F8             
0519+  19F8 EA          	pop bl
0520+  19F9 E4          	pop a
0521+  19FA 09          	ret
0522+  19FB             
0523+  19FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  19FB             ; print 8bit decimal unsigned number
0525+  19FB             ; input number in AL
0526+  19FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  19FB             print_u8d:
0528+  19FB D7          	push a
0529+  19FC D8          	push b
0530+  19FD             
0531+  19FD 22 00       	mov ah, 0
0532+  19FF 26 64 00    	mov b, 100
0533+  1A02 AE          	div a, b
0534+  1A03 D8          	push b			; save remainder
0535+  1A04 B9 00       	cmp al, 0
0536+  1A06 C6 10 1A    	je skip100
0537+  1A09 6A 30       	add al, $30
0538+  1A0B 23          	mov ah, al
0539+  1A0C 19 00       	mov al, 0
0540+  1A0E 05 03       	syscall sys_io	; print coeff
0541+  1A10             skip100:
0542+  1A10 E4          	pop a
0543+  1A11 22 00       	mov ah, 0
0544+  1A13 26 0A 00    	mov b, 10
0545+  1A16 AE          	div a, b
0546+  1A17 D8          	push b			; save remainder
0547+  1A18 B9 00       	cmp al, 0
0548+  1A1A C6 24 1A    	je skip10
0549+  1A1D 6A 30       	add al, $30
0550+  1A1F 23          	mov ah, al
0551+  1A20 19 00       	mov al, 0
0552+  1A22 05 03       	syscall sys_io	; print coeff
0553+  1A24             skip10:
0554+  1A24 E4          	pop a
0555+  1A25 1B          	mov al, bl
0556+  1A26 6A 30       	add al, $30
0557+  1A28 23          	mov ah, al
0558+  1A29 19 00       	mov al, 0
0559+  1A2B 05 03       	syscall sys_io	; print coeff
0560+  1A2D E5          	pop b
0561+  1A2E E4          	pop a
0562+  1A2F 09          	ret
0563+  1A30             
0564+  1A30             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  1A30             ; INPUT 8BIT HEX INTEGER
0566+  1A30             ; read 8bit integer into AL
0567+  1A30             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  1A30             scan_u8x:
0569+  1A30 F8 04 00    	enter 4
0570+  1A33 D8          	push b
0571+  1A34 DA          	push d
0572+  1A35             
0573+  1A35 FA FD FF    	lea d, [bp + -3]
0574+  1A38 07 16 18    	call gets				; get number
0575+  1A3B             
0576+  1A3B 32          	mov bl, [d]
0577+  1A3C 37          	mov bh, bl
0578+  1A3D 33 01 00    	mov bl, [d + 1]
0579+  1A40 07 C4 17    	call atoi				; convert to int in AL
0580+  1A43             
0581+  1A43 E7          	pop d
0582+  1A44 E5          	pop b
0583+  1A45 F9          	leave
0584+  1A46 09          	ret
0585+  1A47             
0586+  1A47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  1A47             ; input decimal number
0588+  1A47             ; result in A
0589+  1A47             ; 655'\0'
0590+  1A47             ; low--------high
0591+  1A47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  1A47             scan_u16d:
0593+  1A47 F8 08 00    	enter 8
0594+  1A4A E2          	push si
0595+  1A4B D8          	push b
0596+  1A4C D9          	push c
0597+  1A4D DA          	push d
0598+  1A4E FA F9 FF    	lea d, [bp +- 7]
0599+  1A51 07 16 18    	call gets
0600+  1A54 07 44 17    	call strlen			; get string length in C
0601+  1A57 7E          	dec c
0602+  1A58 FD 4E       	mov si, d
0603+  1A5A 12          	mov a, c
0604+  1A5B FD 99       	shl a
0605+  1A5D 3B AC 17    	mov d, table_power
0606+  1A60 59          	add d, a
0607+  1A61 38 00 00    	mov c, 0
0608+  1A64             mul_loop:
0609+  1A64 F6          	lodsb			; load ASCII to al
0610+  1A65 B9 00       	cmp al, 0
0611+  1A67 C6 7A 1A    	je mul_exit
0612+  1A6A 6F 30       	sub al, $30		; make into integer
0613+  1A6C 22 00       	mov ah, 0
0614+  1A6E 2A          	mov b, [d]
0615+  1A6F AC          	mul a, b			; result in B since it fits in 16bits
0616+  1A70 11          	mov a, b
0617+  1A71 28          	mov b, c
0618+  1A72 54          	add a, b
0619+  1A73 39          	mov c, a
0620+  1A74 63 02 00    	sub d, 2
0621+  1A77 0A 64 1A    	jmp mul_loop
0622+  1A7A             mul_exit:
0623+  1A7A 12          	mov a, c
0624+  1A7B E7          	pop d
0625+  1A7C E6          	pop c
0626+  1A7D E5          	pop b
0627+  1A7E EF          	pop si
0628+  1A7F F9          	leave
0629+  1A80 09          	ret
1151   1A81             ; --- END INCLUDE BLOCK
1152   1A81             
1153   1A81             
1154   1A81             .end
tasm: Number of errors = 0
