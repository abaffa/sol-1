0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405             _while1_cond:
0012   0405 26 01 00      mov b, 1
0013   0408 C0 00 00      cmp b, 0
0014   040B C6 66 04      je _while1_exit
0015   040E             _while1_block:
0016   040E 26 2D 06      mov b, __string_0 ; "Number: "
0017   0411 FD AB         swp b
0018   0413 D8            push b
0019   0414 07 22 06      call print
0020   0417 51 02 00      add sp, 2
0021   041A 07 12 06      call scann
0022   041D D7            push a
0023   041E 11            mov a, b
0024   041F 45 FF FF      mov [bp + -1], a ; i
0025   0422 E4            pop a
0026   0423             _if2_cond:
0027   0423 2C FF FF      mov b, [bp + -1] ; i
0028   0426 D7            push a
0029   0427 11            mov a, b
0030   0428 26 00 00      mov b, 0
0031   042B B0            cmp a, b
0032   042C 0E            lodflgs
0033   042D 87 01         and al, %00000001 ; ==
0034   042F 22 00         mov ah, 0
0035   0431 27            mov b, a
0036   0432 E4            pop a
0037   0433 C0 00 00      cmp b, 0
0038   0436 C6 42 04      je _if2_else
0039   0439             _if2_true:
0040   0439 26 00 00      mov b, 0
0041   043C F9            leave
0042   043D 05 0B         syscall sys_terminate_proc
0043   043F 0A 57 04      jmp _if2_exit
0044   0442             _if2_else:
0045   0442 2C FF FF      mov b, [bp + -1] ; i
0046   0445 FD AB         swp b
0047   0447 D8            push b
0048   0448 07 51 05      call integer_square_root
0049   044B 51 02 00      add sp, 2
0050   044E FD AB         swp b
0051   0450 D8            push b
0052   0451 07 6C 04      call print_num
0053   0454 51 02 00      add sp, 2
0054   0457             _if2_exit:
0055   0457 26 36 06      mov b, __string_1 ; "\n"
0056   045A FD AB         swp b
0057   045C D8            push b
0058   045D 07 22 06      call print
0059   0460 51 02 00      add sp, 2
0060   0463 0A 05 04      jmp _while1_cond
0061   0466             _while1_exit:
0062   0466 26 00 00      mov b, 0
0063   0469 F9            leave
0064   046A 05 0B         syscall sys_terminate_proc
0065   046C             
0066   046C             print_num:
0067   046C D2            push bp
0068   046D 9B            mov bp, sp
0069   046E 52 05 00      sub sp, 5 ; digits
0070   0471 52 02 00      sub sp, 2 ; i
0071   0474 26 00 00      mov b, 0
0072   0477 D7            push a
0073   0478 11            mov a, b
0074   0479 45 FA FF      mov [bp + -6], a ; i
0075   047C E4            pop a
0076   047D             _if3_cond:
0077   047D 2C 05 00      mov b, [bp + 5] ; num
0078   0480 D7            push a
0079   0481 11            mov a, b
0080   0482 26 00 00      mov b, 0
0081   0485 B0            cmp a, b
0082   0486 0E            lodflgs
0083   0487 87 01         and al, %00000001 ; ==
0084   0489 22 00         mov ah, 0
0085   048B 27            mov b, a
0086   048C E4            pop a
0087   048D C0 00 00      cmp b, 0
0088   0490 C6 A2 04      je _if3_exit
0089   0493             _if3_true:
0090   0493 26 30 00      mov b, '0'
0091   0496 DD            push bl
0092   0497 07 07 06      call _putchar
0093   049A 51 01 00      add sp, 1
0094   049D F9            leave
0095   049E 09            ret
0096   049F 0A A2 04      jmp _if3_exit
0097   04A2             _if3_exit:
0098   04A2             _while4_cond:
0099   04A2 2C 05 00      mov b, [bp + 5] ; num
0100   04A5 D7            push a
0101   04A6 11            mov a, b
0102   04A7 26 00 00      mov b, 0
0103   04AA B0            cmp a, b
0104   04AB 0E            lodflgs
0105   04AC 87 03         and al, %00000011
0106   04AE B9 00         cmp al, 0
0107   04B0 0E            lodflgs
0108   04B1 22 00         mov ah, 0
0109   04B3 27            mov b, a
0110   04B4 E4            pop a
0111   04B5 C0 00 00      cmp b, 0
0112   04B8 C6 09 05      je _while4_exit
0113   04BB             _while4_block:
0114   04BB FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0115   04BE 2D            mov b, d
0116   04BF D7            push a
0117   04C0 74            mov d, b
0118   04C1 DA            push d
0119   04C2 2C FA FF      mov b, [bp + -6] ; i
0120   04C5 E7            pop d
0121   04C6 10 01 00      mov a, 1
0122   04C9 AC            mul a, b
0123   04CA 5A            add d, b
0124   04CB E4            pop a
0125   04CC DA            push d
0126   04CD 26 30 00      mov b, '0'
0127   04D0 D7            push a
0128   04D1 11            mov a, b
0129   04D2 2C 05 00      mov b, [bp + 5] ; num
0130   04D5 D7            push a
0131   04D6 11            mov a, b
0132   04D7 26 0A 00      mov b, 10
0133   04DA AE            div a, b
0134   04DB E4            pop a
0135   04DC 54            add a, b
0136   04DD 27            mov b, a
0137   04DE E4            pop a
0138   04DF E7            pop d
0139   04E0 FD 3E         mov [d], bl
0140   04E2 2C 05 00      mov b, [bp + 5] ; num
0141   04E5 D7            push a
0142   04E6 11            mov a, b
0143   04E7 26 0A 00      mov b, 10
0144   04EA AE            div a, b
0145   04EB FD 78         mov g, a
0146   04ED 11            mov a, b
0147   04EE FD 27         mov b, g
0148   04F0 E4            pop a
0149   04F1 D7            push a
0150   04F2 11            mov a, b
0151   04F3 45 05 00      mov [bp + 5], a ; num
0152   04F6 E4            pop a
0153   04F7 2C FA FF      mov b, [bp + -6] ; i
0154   04FA D7            push a
0155   04FB 11            mov a, b
0156   04FC FD 77         inc b
0157   04FE D7            push a
0158   04FF 11            mov a, b
0159   0500 45 FA FF      mov [bp + -6], a ; i
0160   0503 E4            pop a
0161   0504 27            mov b, a
0162   0505 E4            pop a
0163   0506 0A A2 04      jmp _while4_cond
0164   0509             _while4_exit:
0165   0509             _while5_cond:
0166   0509 2C FA FF      mov b, [bp + -6] ; i
0167   050C D7            push a
0168   050D 11            mov a, b
0169   050E 26 00 00      mov b, 0
0170   0511 B0            cmp a, b
0171   0512 0E            lodflgs
0172   0513 87 03         and al, %00000011
0173   0515 B9 00         cmp al, 0
0174   0517 0E            lodflgs
0175   0518 22 00         mov ah, 0
0176   051A 27            mov b, a
0177   051B E4            pop a
0178   051C C0 00 00      cmp b, 0
0179   051F C6 4F 05      je _while5_exit
0180   0522             _while5_block:
0181   0522 2C FA FF      mov b, [bp + -6] ; i
0182   0525 D7            push a
0183   0526 11            mov a, b
0184   0527 FD 7D         dec b
0185   0529 D7            push a
0186   052A 11            mov a, b
0187   052B 45 FA FF      mov [bp + -6], a ; i
0188   052E E4            pop a
0189   052F 27            mov b, a
0190   0530 E4            pop a
0191   0531 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0192   0534 2D            mov b, d
0193   0535 D7            push a
0194   0536 74            mov d, b
0195   0537 DA            push d
0196   0538 2C FA FF      mov b, [bp + -6] ; i
0197   053B E7            pop d
0198   053C 10 01 00      mov a, 1
0199   053F AC            mul a, b
0200   0540 5A            add d, b
0201   0541 E4            pop a
0202   0542 32            mov bl, [d]
0203   0543 A7 00         mov bh, 0
0204   0545 DD            push bl
0205   0546 07 07 06      call _putchar
0206   0549 51 01 00      add sp, 1
0207   054C 0A 09 05      jmp _while5_cond
0208   054F             _while5_exit:
0209   054F F9            leave
0210   0550 09            ret
0211   0551             
0212   0551             integer_square_root:
0213   0551 D2            push bp
0214   0552 9B            mov bp, sp
0215   0553             _if6_cond:
0216   0553 2C 05 00      mov b, [bp + 5] ; n
0217   0556 D7            push a
0218   0557 11            mov a, b
0219   0558 26 01 00      mov b, 1
0220   055B B0            cmp a, b
0221   055C 0E            lodflgs
0222   055D 87 03         and al, %00000011 ; <=
0223   055F B9 00         cmp al, 0
0224   0561 0E            lodflgs
0225   0562 8F 01         xor al, %00000001
0226   0564 22 00         mov ah, 0
0227   0566 27            mov b, a
0228   0567 E4            pop a
0229   0568 C0 00 00      cmp b, 0
0230   056B C6 76 05      je _if6_exit
0231   056E             _if6_true:
0232   056E 2C 05 00      mov b, [bp + 5] ; n
0233   0571 F9            leave
0234   0572 09            ret
0235   0573 0A 76 05      jmp _if6_exit
0236   0576             _if6_exit:
0237   0576 52 02 00      sub sp, 2 ; x
0238   0579 52 02 00      sub sp, 2 ; y
0239   057C 2C 05 00      mov b, [bp + 5] ; n
0240   057F D7            push a
0241   0580 11            mov a, b
0242   0581 45 FF FF      mov [bp + -1], a ; x
0243   0584 E4            pop a
0244   0585 2C FF FF      mov b, [bp + -1] ; x
0245   0588 D7            push a
0246   0589 11            mov a, b
0247   058A 2C 05 00      mov b, [bp + 5] ; n
0248   058D D7            push a
0249   058E 11            mov a, b
0250   058F 2C FF FF      mov b, [bp + -1] ; x
0251   0592 AE            div a, b
0252   0593 FD 78         mov g, a
0253   0595 11            mov a, b
0254   0596 FD 27         mov b, g
0255   0598 E4            pop a
0256   0599 54            add a, b
0257   059A 27            mov b, a
0258   059B E4            pop a
0259   059C D7            push a
0260   059D 11            mov a, b
0261   059E 26 02 00      mov b, 2
0262   05A1 AE            div a, b
0263   05A2 FD 78         mov g, a
0264   05A4 11            mov a, b
0265   05A5 FD 27         mov b, g
0266   05A7 E4            pop a
0267   05A8 D7            push a
0268   05A9 11            mov a, b
0269   05AA 45 FD FF      mov [bp + -3], a ; y
0270   05AD E4            pop a
0271   05AE             _while7_cond:
0272   05AE 2C FD FF      mov b, [bp + -3] ; y
0273   05B1 D7            push a
0274   05B2 11            mov a, b
0275   05B3 2C FF FF      mov b, [bp + -1] ; x
0276   05B6 B0            cmp a, b
0277   05B7 0E            lodflgs
0278   05B8 2F            mov bl, al
0279   05B9 FD A2 03      shr al, 3
0280   05BC FD A4 02      shr bl, 2
0281   05BF FD 87 01      and bl, %00000001
0282   05C2 90            xor al, bl
0283   05C3 22 00         mov ah, 0
0284   05C5 27            mov b, a
0285   05C6 E4            pop a
0286   05C7 C0 00 00      cmp b, 0
0287   05CA C6 02 06      je _while7_exit
0288   05CD             _while7_block:
0289   05CD 2C FD FF      mov b, [bp + -3] ; y
0290   05D0 D7            push a
0291   05D1 11            mov a, b
0292   05D2 45 FF FF      mov [bp + -1], a ; x
0293   05D5 E4            pop a
0294   05D6 2C FF FF      mov b, [bp + -1] ; x
0295   05D9 D7            push a
0296   05DA 11            mov a, b
0297   05DB 2C 05 00      mov b, [bp + 5] ; n
0298   05DE D7            push a
0299   05DF 11            mov a, b
0300   05E0 2C FF FF      mov b, [bp + -1] ; x
0301   05E3 AE            div a, b
0302   05E4 FD 78         mov g, a
0303   05E6 11            mov a, b
0304   05E7 FD 27         mov b, g
0305   05E9 E4            pop a
0306   05EA 54            add a, b
0307   05EB 27            mov b, a
0308   05EC E4            pop a
0309   05ED D7            push a
0310   05EE 11            mov a, b
0311   05EF 26 02 00      mov b, 2
0312   05F2 AE            div a, b
0313   05F3 FD 78         mov g, a
0314   05F5 11            mov a, b
0315   05F6 FD 27         mov b, g
0316   05F8 E4            pop a
0317   05F9 D7            push a
0318   05FA 11            mov a, b
0319   05FB 45 FD FF      mov [bp + -3], a ; y
0320   05FE E4            pop a
0321   05FF 0A AE 05      jmp _while7_cond
0322   0602             _while7_exit:
0323   0602 2C FF FF      mov b, [bp + -1] ; x
0324   0605 F9            leave
0325   0606 09            ret
0326   0607             
0327   0607             _putchar:
0328   0607 D2            push bp
0329   0608 9B            mov bp, sp
0330   0609             
0331   0609             ; --- BEGIN INLINE ASM BLOCK
0332   0609 20 05 00      mov al, [bp + 5]
0333   060C 23            mov ah, al
0334   060D 07 4A 07      call putchar
0335   0610             ; --- END INLINE ASM BLOCK
0336   0610             
0337   0610 F9            leave
0338   0611 09            ret
0339   0612             
0340   0612             scann:
0341   0612 D2            push bp
0342   0613 9B            mov bp, sp
0343   0614 52 02 00      sub sp, 2 ; m
0344   0617             
0345   0617             ; --- BEGIN INLINE ASM BLOCK
0346   0617 07 82 09      call scan_u16d
0347   061A 45 FF FF      mov [bp + -1], a
0348   061D             ; --- END INLINE ASM BLOCK
0349   061D             
0350   061D 2C FF FF      mov b, [bp + -1] ; m
0351   0620 F9            leave
0352   0621 09            ret
0353   0622             
0354   0622             print:
0355   0622 D2            push bp
0356   0623 9B            mov bp, sp
0357   0624             
0358   0624             ; --- BEGIN INLINE ASM BLOCK
0359   0624 17 05 00      mov a, [bp + 5]
0360   0627 3C            mov d, a
0361   0628 07 84 08      call puts
0362   062B             ; --- END INLINE ASM BLOCK
0363   062B             
0364   062B F9            leave
0365   062C 09            ret
0366   062D             ; --- END TEXT BLOCK
0367   062D             
0368   062D             ; --- BEGIN DATA BLOCK
0369   062D 4E 75 6D 62 __string_0: .db "Number: ", 0
0369   0631 65 72 3A 20 
0369   0635 00 
0370   0636 0A 00       __string_1: .db "\n", 0
0371   0638             ; --- END DATA BLOCK
0372   0638             
0373   0638             ; --- BEGIN INCLUDE BLOCK
0374   0638             .include "lib/stdio.asm"
0001+  0638             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0638             ; stdio.s
0003+  0638             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0638             .include "lib/string.asm"
0001++ 0638             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0638             ; string.s
0003++ 0638             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0638             
0005++ 0638             
0006++ 0638             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0638             ; strrev
0008++ 0638             ; reverse a string
0009++ 0638             ; D = string address
0010++ 0638             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0638             ; 01234
0012++ 0638             strrev:
0013++ 0638 4B          	pusha
0014++ 0639 07 7F 06    	call strlen	; length in C
0015++ 063C 12          	mov a, c
0016++ 063D AF 01 00    	cmp a, 1
0017++ 0640 D0 5A 06    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0643 7D          	dec a
0019++ 0644 FD 4E       	mov si, d	; beginning of string
0020++ 0646 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0648 59          	add d, a	; end of string
0022++ 0649 12          	mov a, c
0023++ 064A FD 9B       	shr a		; divide by 2
0024++ 064C 39          	mov c, a	; C now counts the steps
0025++ 064D             strrev_L0:
0026++ 064D 32          	mov bl, [d]	; save load right-side char into BL
0027++ 064E F6          	lodsb		; load left-side char into AL; increase SI
0028++ 064F 3E          	mov [d], al	; store left char into right side
0029++ 0650 1B          	mov al, bl
0030++ 0651 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0652 7E          	dec c
0032++ 0653 7F          	dec d
0033++ 0654 C2 00 00    	cmp c, 0
0034++ 0657 C7 4D 06    	jne strrev_L0
0035++ 065A             strrev_end:
0036++ 065A 4C          	popa
0037++ 065B 09          	ret
0038++ 065C             	
0039++ 065C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 065C             ; strchr
0041++ 065C             ; search string in D for char in AL
0042++ 065C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 065C             strchr:
0044++ 065C             strchr_L0:
0045++ 065C 32          	mov bl, [d]
0046++ 065D C1 00       	cmp bl, 0
0047++ 065F C6 6A 06    	je strchr_end
0048++ 0662 BA          	cmp al, bl
0049++ 0663 C6 6A 06    	je strchr_end
0050++ 0666 79          	inc d
0051++ 0667 0A 5C 06    	jmp strchr_L0
0052++ 066A             strchr_end:
0053++ 066A 1B          	mov al, bl
0054++ 066B 09          	ret
0055++ 066C             
0056++ 066C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 066C             ; strstr
0058++ 066C             ; find sub-string
0059++ 066C             ; str1 in SI
0060++ 066C             ; str2 in DI
0061++ 066C             ; SI points to end of source string
0062++ 066C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 066C             strstr:
0064++ 066C DB          	push al
0065++ 066D DA          	push d
0066++ 066E E3          	push di
0067++ 066F             strstr_loop:
0068++ 066F F3          	cmpsb					; compare a byte of the strings
0069++ 0670 C7 7B 06    	jne strstr_ret
0070++ 0673 FC 00 00    	lea d, [di + 0]
0071++ 0676 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0678 C7 6F 06    	jne strstr_loop				; equal chars but not at end
0073++ 067B             strstr_ret:
0074++ 067B F0          	pop di
0075++ 067C E7          	pop d
0076++ 067D E8          	pop al
0077++ 067E 09          	ret
0078++ 067F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 067F             ; length of null terminated string
0080++ 067F             ; result in C
0081++ 067F             ; pointer in D
0082++ 067F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 067F             strlen:
0084++ 067F DA          	push d
0085++ 0680 38 00 00    	mov c, 0
0086++ 0683             strlen_L1:
0087++ 0683 BD 00       	cmp byte [d], 0
0088++ 0685 C6 8D 06    	je strlen_ret
0089++ 0688 79          	inc d
0090++ 0689 78          	inc c
0091++ 068A 0A 83 06    	jmp strlen_L1
0092++ 068D             strlen_ret:
0093++ 068D E7          	pop d
0094++ 068E 09          	ret
0095++ 068F             
0096++ 068F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 068F             ; STRCMP
0098++ 068F             ; compare two strings
0099++ 068F             ; str1 in SI
0100++ 068F             ; str2 in DI
0101++ 068F             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 068F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 068F             strcmp:
0104++ 068F DB          	push al
0105++ 0690 DA          	push d
0106++ 0691 E3          	push di
0107++ 0692 E2          	push si
0108++ 0693             strcmp_loop:
0109++ 0693 F3          	cmpsb					; compare a byte of the strings
0110++ 0694 C7 9F 06    	jne strcmp_ret
0111++ 0697 FB FF FF    	lea d, [si +- 1]
0112++ 069A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 069C C7 93 06    	jne strcmp_loop				; equal chars but not at end
0114++ 069F             strcmp_ret:
0115++ 069F EF          	pop si
0116++ 06A0 F0          	pop di
0117++ 06A1 E7          	pop d
0118++ 06A2 E8          	pop al
0119++ 06A3 09          	ret
0120++ 06A4             
0121++ 06A4             
0122++ 06A4             ; STRCPY
0123++ 06A4             ; copy null terminated string from SI to DI
0124++ 06A4             ; source in SI
0125++ 06A4             ; destination in DI
0126++ 06A4             strcpy:
0127++ 06A4 E2          	push si
0128++ 06A5 E3          	push di
0129++ 06A6 DB          	push al
0130++ 06A7             strcpy_L1:
0131++ 06A7 F6          	lodsb
0132++ 06A8 F7          	stosb
0133++ 06A9 B9 00       	cmp al, 0
0134++ 06AB C7 A7 06    	jne strcpy_L1
0135++ 06AE             strcpy_end:
0136++ 06AE E8          	pop al
0137++ 06AF F0          	pop di
0138++ 06B0 EF          	pop si
0139++ 06B1 09          	ret
0140++ 06B2             
0141++ 06B2             ; STRCAT
0142++ 06B2             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 06B2             ; source in SI
0144++ 06B2             ; destination in DI
0145++ 06B2             strcat:
0146++ 06B2 E2          	push si
0147++ 06B3 E3          	push di
0148++ 06B4 D7          	push a
0149++ 06B5 DA          	push d
0150++ 06B6 50          	mov a, di
0151++ 06B7 3C          	mov d, a
0152++ 06B8             strcat_goto_end_L1:
0153++ 06B8 BD 00       	cmp byte[d], 0
0154++ 06BA C6 C1 06    	je strcat_start
0155++ 06BD 79          	inc d
0156++ 06BE 0A B8 06    	jmp strcat_goto_end_L1
0157++ 06C1             strcat_start:
0158++ 06C1 FD 50       	mov di, d
0159++ 06C3             strcat_L1:
0160++ 06C3 F6          	lodsb
0161++ 06C4 F7          	stosb
0162++ 06C5 B9 00       	cmp al, 0
0163++ 06C7 C7 C3 06    	jne strcat_L1
0164++ 06CA             strcat_end:
0165++ 06CA E7          	pop d
0166++ 06CB E4          	pop a
0167++ 06CC F0          	pop di
0168++ 06CD EF          	pop si
0169++ 06CE 09          	ret
0005+  06CF             
0006+  06CF 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  06D3 34 35 36 37 
0006+  06D7 38 39 41 42 
0006+  06DB 43 44 45 46 
0007+  06DF 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  06E3 1B 5B 48 00 
0008+  06E7             
0009+  06E7 01 00       table_power:.dw 1
0010+  06E9 0A 00       			.dw 10
0011+  06EB 64 00       			.dw 100
0012+  06ED E8 03       			.dw 1000
0013+  06EF 10 27       			.dw 10000
0014+  06F1             
0015+  06F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  06F1             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  06F1             ; ASCII in BL
0018+  06F1             ; result in AL
0019+  06F1             ; ascii for F = 0100 0110
0020+  06F1             ; ascii for 9 = 0011 1001
0021+  06F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  06F1             hex_ascii_encode:
0023+  06F1 1B          	mov al, bl
0024+  06F2 93 40       	test al, $40				; test if letter or number
0025+  06F4 C7 FA 06    	jnz hex_letter
0026+  06F7 87 0F       	and al, $0F				; get number
0027+  06F9 09          	ret
0028+  06FA             hex_letter:
0029+  06FA 87 0F       	and al, $0F				; get letter
0030+  06FC 6A 09       	add al, 9
0031+  06FE 09          	ret
0032+  06FF             
0033+  06FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  06FF             ; ATOI
0035+  06FF             ; 2 letter hex string in B
0036+  06FF             ; 8bit integer returned in AL
0037+  06FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  06FF             atoi:
0039+  06FF D8          	push b
0040+  0700 07 F1 06    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0703 30          	mov bl, bh
0042+  0704 DB          	push al					; save a
0043+  0705 07 F1 06    	call hex_ascii_encode
0044+  0708 EA          	pop bl	
0045+  0709 FD 9E 04    	shl al, 4
0046+  070C 8C          	or al, bl
0047+  070D E5          	pop b
0048+  070E 09          	ret	
0049+  070F             
0050+  070F             
0051+  070F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  070F             ; printf
0053+  070F             ; no need for explanations!
0054+  070F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  070F             printf:
0056+  070F 09          	ret
0057+  0710             
0058+  0710             
0059+  0710             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0710             ; scanf
0061+  0710             ; no need for explanations!
0062+  0710             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0710             scanf:
0064+  0710 09          	ret
0065+  0711             
0066+  0711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0711             ; ITOA
0068+  0711             ; 8bit value in BL
0069+  0711             ; 2 byte ASCII result in A
0070+  0711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0711             itoa:
0072+  0711 DA          	push d
0073+  0712 D8          	push b
0074+  0713 A7 00       	mov bh, 0
0075+  0715 FD A4 04    	shr bl, 4	
0076+  0718 74          	mov d, b
0077+  0719 1F CF 06    	mov al, [d + s_hex_digits]
0078+  071C 23          	mov ah, al
0079+  071D             	
0080+  071D E5          	pop b
0081+  071E D8          	push b
0082+  071F A7 00       	mov bh, 0
0083+  0721 FD 87 0F    	and bl, $0F
0084+  0724 74          	mov d, b
0085+  0725 1F CF 06    	mov al, [d + s_hex_digits]
0086+  0728 E5          	pop b
0087+  0729 E7          	pop d
0088+  072A 09          	ret
0089+  072B             
0090+  072B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  072B             ; HEX STRING TO BINARY
0092+  072B             ; di = destination address
0093+  072B             ; si = source
0094+  072B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  072B             hex_to_int:
0096+  072B             hex_to_int_L1:
0097+  072B F6          	lodsb					; load from [SI] to AL
0098+  072C B9 00       	cmp al, 0				; check if ASCII 0
0099+  072E C6 3B 07    	jz hex_to_int_ret
0100+  0731 36          	mov bh, al
0101+  0732 F6          	lodsb
0102+  0733 2F          	mov bl, al
0103+  0734 07 FF 06    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0737 F7          	stosb					; store AL to [DI]
0105+  0738 0A 2B 07    	jmp hex_to_int_L1
0106+  073B             hex_to_int_ret:
0107+  073B 09          	ret		
0108+  073C             
0109+  073C             
0110+  073C             
0111+  073C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  073C             ; GETCHAR
0113+  073C             ; char in ah
0114+  073C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  073C             getchar:
0116+  073C DB          	push al
0117+  073D             getchar_retry:
0118+  073D FD 0C       	sti
0119+  073F 19 01       	mov al, 1
0120+  0741 05 03       	syscall sys_io			; receive in AH
0121+  0743 B9 00       	cmp al, 0			; check if any char was receive
0122+  0745 C6 3D 07    	je getchar_retry
0123+  0748 E8          	pop al
0124+  0749 09          	ret
0125+  074A             
0126+  074A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  074A             ; PUTCHAR
0128+  074A             ; char in ah
0129+  074A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  074A             putchar:
0131+  074A D7          	push a
0132+  074B 19 00       	mov al, 0
0133+  074D 05 03       	syscall sys_io			; char in AH
0134+  074F E4          	pop a
0135+  0750 09          	ret
0136+  0751             
0137+  0751             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0751             ;; INPUT A STRING
0139+  0751             ;; terminates with null
0140+  0751             ;; pointer in D
0141+  0751             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0751             gets:
0143+  0751 D7          	push a
0144+  0752 DA          	push d
0145+  0753             gets_loop:
0146+  0753 FD 0C       	sti
0147+  0755 19 01       	mov al, 1
0148+  0757 05 03       	syscall sys_io			; receive in AH
0149+  0759 B9 00       	cmp al, 0				; check error code (AL)
0150+  075B C6 53 07    	je gets_loop			; if no char received, retry
0151+  075E             
0152+  075E 76 1B       	cmp ah, 27
0153+  0760 C6 81 07    	je gets_telnet_escape
0154+  0763 76 0A       	cmp ah, $0A				; LF
0155+  0765 C6 DA 07    	je gets_end
0156+  0768 76 0D       	cmp ah, $0D				; CR
0157+  076A C6 DA 07    	je gets_end
0158+  076D 76 5C       	cmp ah, $5C				; '\\'
0159+  076F C6 B1 07    	je gets_escape
0160+  0772             	
0161+  0772 76 08       	cmp ah, $08			; check for backspace
0162+  0774 C6 7D 07    	je gets_backspace
0163+  0777             
0164+  0777 1A          	mov al, ah
0165+  0778 3E          	mov [d], al
0166+  0779 79          	inc d
0167+  077A 0A 53 07    	jmp gets_loop
0168+  077D             gets_backspace:
0169+  077D 7F          	dec d
0170+  077E 0A 53 07    	jmp gets_loop
0171+  0781             gets_telnet_escape:
0172+  0781 FD 0C       	sti
0173+  0783 19 01       	mov al, 1
0174+  0785 05 03       	syscall sys_io				; receive in AH without echo
0175+  0787 B9 00       	cmp al, 0					; check error code (AL)
0176+  0789 C6 81 07    	je gets_telnet_escape		; if no char received, retry
0177+  078C 76 5B       	cmp ah, '['
0178+  078E C7 53 07    	jne gets_loop
0179+  0791             gets_telnet_escape_phase2:
0180+  0791 FD 0C       	sti
0181+  0793 19 01       	mov al, 1
0182+  0795 05 03       	syscall sys_io					; receive in AH without echo
0183+  0797 B9 00       	cmp al, 0						; check error code (AL)
0184+  0799 C6 91 07    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  079C 76 44       	cmp ah, 'D'
0186+  079E C6 A9 07    	je gets_left_arrow
0187+  07A1 76 43       	cmp ah, 'C'
0188+  07A3 C6 AD 07    	je gets_right_arrow
0189+  07A6 0A 53 07    	jmp gets_loop
0190+  07A9             gets_left_arrow:
0191+  07A9 7F          	dec d
0192+  07AA 0A 53 07    	jmp gets_loop
0193+  07AD             gets_right_arrow:
0194+  07AD 79          	inc d
0195+  07AE 0A 53 07    	jmp gets_loop
0196+  07B1             gets_escape:
0197+  07B1 FD 0C       	sti
0198+  07B3 19 01       	mov al, 1
0199+  07B5 05 03       	syscall sys_io			; receive in AH
0200+  07B7 B9 00       	cmp al, 0				; check error code (AL)
0201+  07B9 C6 B1 07    	je gets_escape			; if no char received, retry
0202+  07BC 76 6E       	cmp ah, 'n'
0203+  07BE C6 CC 07    	je gets_LF
0204+  07C1 76 72       	cmp ah, 'r'
0205+  07C3 C6 D3 07    	je gets_CR
0206+  07C6 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  07C7 3E          	mov [d], al
0208+  07C8 79          	inc d
0209+  07C9 0A 53 07    	jmp gets_loop
0210+  07CC             gets_LF:
0211+  07CC 19 0A       	mov al, $0A
0212+  07CE 3E          	mov [d], al
0213+  07CF 79          	inc d
0214+  07D0 0A 53 07    	jmp gets_loop
0215+  07D3             gets_CR:
0216+  07D3 19 0D       	mov al, $0D
0217+  07D5 3E          	mov [d], al
0218+  07D6 79          	inc d
0219+  07D7 0A 53 07    	jmp gets_loop
0220+  07DA             gets_end:
0221+  07DA 19 00       	mov al, 0
0222+  07DC 3E          	mov [d], al				; terminate string
0223+  07DD E7          	pop d
0224+  07DE E4          	pop a
0225+  07DF 09          	ret
0226+  07E0             
0227+  07E0             
0228+  07E0             
0229+  07E0             
0230+  07E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  07E0             ;; INPUT TEXT
0232+  07E0             ;; terminated with CTRL+D
0233+  07E0             ;; pointer in D
0234+  07E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  07E0             gettxt:
0236+  07E0 D7          	push a
0237+  07E1 DA          	push d
0238+  07E2             gettxt_loop:
0239+  07E2 19 01       	mov al, 1
0240+  07E4 05 03       	syscall sys_io			; receive in AH
0241+  07E6 B9 00       	cmp al, 0				; check error code (AL)
0242+  07E8 C6 E2 07    	je gettxt_loop		; if no char received, retry
0243+  07EB 76 04       	cmp ah, 4			; EOT
0244+  07ED C6 2B 08    	je gettxt_end
0245+  07F0 76 08       	cmp ah, $08			; check for backspace
0246+  07F2 C6 27 08    	je gettxt_backspace
0247+  07F5 76 5C       	cmp ah, $5C				; '\\'
0248+  07F7 C6 00 08    	je gettxt_escape
0249+  07FA 1A          	mov al, ah
0250+  07FB 3E          	mov [d], al
0251+  07FC 79          	inc d
0252+  07FD 0A E2 07    	jmp gettxt_loop
0253+  0800             gettxt_escape:
0254+  0800 19 01       	mov al, 1
0255+  0802 05 03       	syscall sys_io			; receive in AH
0256+  0804 B9 00       	cmp al, 0				; check error code (AL)
0257+  0806 C6 00 08    	je gettxt_escape		; if no char received, retry
0258+  0809 76 6E       	cmp ah, 'n'
0259+  080B C6 19 08    	je gettxt_LF
0260+  080E 76 72       	cmp ah, 'r'
0261+  0810 C6 20 08    	je gettxt_CR
0262+  0813 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0814 3E          	mov [d], al
0264+  0815 79          	inc d
0265+  0816 0A E2 07    	jmp gettxt_loop
0266+  0819             gettxt_LF:
0267+  0819 19 0A       	mov al, $0A
0268+  081B 3E          	mov [d], al
0269+  081C 79          	inc d
0270+  081D 0A E2 07    	jmp gettxt_loop
0271+  0820             gettxt_CR:
0272+  0820 19 0D       	mov al, $0D
0273+  0822 3E          	mov [d], al
0274+  0823 79          	inc d
0275+  0824 0A E2 07    	jmp gettxt_loop
0276+  0827             gettxt_backspace:
0277+  0827 7F          	dec d
0278+  0828 0A E2 07    	jmp gettxt_loop
0279+  082B             gettxt_end:
0280+  082B 19 00       	mov al, 0
0281+  082D 3E          	mov [d], al				; terminate string
0282+  082E E7          	pop d
0283+  082F E4          	pop a
0284+  0830 09          	ret
0285+  0831             
0286+  0831             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0831             ; PRINT NEW LINE
0288+  0831             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0831             printnl:
0290+  0831 D7          	push a
0291+  0832 10 00 0A    	mov a, $0A00
0292+  0835 05 03       	syscall sys_io
0293+  0837 10 00 0D    	mov a, $0D00
0294+  083A 05 03       	syscall sys_io
0295+  083C E4          	pop a
0296+  083D 09          	ret
0297+  083E             
0298+  083E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  083E             ; strtoint
0300+  083E             ; 4 digit hex string number in d
0301+  083E             ; integer returned in A
0302+  083E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  083E             strtointx:
0304+  083E D8          	push b
0305+  083F 32          	mov bl, [d]
0306+  0840 37          	mov bh, bl
0307+  0841 33 01 00    	mov bl, [d + 1]
0308+  0844 07 FF 06    	call atoi				; convert to int in AL
0309+  0847 23          	mov ah, al				; move to AH
0310+  0848 33 02 00    	mov bl, [d + 2]
0311+  084B 37          	mov bh, bl
0312+  084C 33 03 00    	mov bl, [d + 3]
0313+  084F 07 FF 06    	call atoi				; convert to int in AL
0314+  0852 E5          	pop b
0315+  0853 09          	ret
0316+  0854             
0317+  0854             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0854             ; strtoint
0319+  0854             ; 5 digit base10 string number in d
0320+  0854             ; integer returned in A
0321+  0854             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0854             strtoint:
0323+  0854 E2          	push si
0324+  0855 D8          	push b
0325+  0856 D9          	push c
0326+  0857 DA          	push d
0327+  0858 07 7F 06    	call strlen			; get string length in C
0328+  085B 7E          	dec c
0329+  085C FD 4E       	mov si, d
0330+  085E 12          	mov a, c
0331+  085F FD 99       	shl a
0332+  0861 3B E7 06    	mov d, table_power
0333+  0864 59          	add d, a
0334+  0865 38 00 00    	mov c, 0
0335+  0868             strtoint_L0:
0336+  0868 F6          	lodsb			; load ASCII to al
0337+  0869 B9 00       	cmp al, 0
0338+  086B C6 7E 08    	je strtoint_end
0339+  086E 6F 30       	sub al, $30		; make into integer
0340+  0870 22 00       	mov ah, 0
0341+  0872 2A          	mov b, [d]
0342+  0873 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0874 11          	mov a, b
0344+  0875 28          	mov b, c
0345+  0876 54          	add a, b
0346+  0877 39          	mov c, a
0347+  0878 63 02 00    	sub d, 2
0348+  087B 0A 68 08    	jmp strtoint_L0
0349+  087E             strtoint_end:
0350+  087E 12          	mov a, c
0351+  087F E7          	pop d
0352+  0880 E6          	pop c
0353+  0881 E5          	pop b
0354+  0882 EF          	pop si
0355+  0883 09          	ret
0356+  0884             
0357+  0884             
0358+  0884             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0884             ; PRINT NULL TERMINATED STRING
0360+  0884             ; pointer in D
0361+  0884             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0884             puts:
0363+  0884 D7          	push a
0364+  0885 DA          	push d
0365+  0886             puts_L1:
0366+  0886 1E          	mov al, [d]
0367+  0887 B9 00       	cmp al, 0
0368+  0889 C6 95 08    	jz puts_END
0369+  088C 23          	mov ah, al
0370+  088D 19 00       	mov al, 0
0371+  088F 05 03       	syscall sys_io
0372+  0891 79          	inc d
0373+  0892 0A 86 08    	jmp puts_L1
0374+  0895             puts_END:
0375+  0895 E7          	pop d
0376+  0896 E4          	pop a
0377+  0897 09          	ret
0378+  0898             
0379+  0898             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0898             ; PRINT N SIZE STRING
0381+  0898             ; pointer in D
0382+  0898             ; size in C
0383+  0898             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0898             putsn:
0385+  0898 DB          	push al
0386+  0899 DA          	push d
0387+  089A D9          	push c
0388+  089B             putsn_L0:
0389+  089B 1E          	mov al, [d]
0390+  089C 23          	mov ah, al
0391+  089D 19 00       	mov al, 0
0392+  089F 05 03       	syscall sys_io
0393+  08A1 79          	inc d
0394+  08A2 7E          	dec c	
0395+  08A3 C2 00 00    	cmp c, 0
0396+  08A6 C7 9B 08    	jne putsn_L0
0397+  08A9             putsn_end:
0398+  08A9 E6          	pop c
0399+  08AA E7          	pop d
0400+  08AB E8          	pop al
0401+  08AC 09          	ret
0402+  08AD             
0403+  08AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  08AD             ; print 16bit decimal number
0405+  08AD             ; input number in A
0406+  08AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  08AD             print_u16d:
0408+  08AD D7          	push a
0409+  08AE D8          	push b
0410+  08AF 26 10 27    	mov b, 10000
0411+  08B2 AE          	div a, b			; get 10000 coeff.
0412+  08B3 07 D9 08    	call print_number
0413+  08B6 11          	mov a, b
0414+  08B7 26 E8 03    	mov b, 1000
0415+  08BA AE          	div a, b			; get 10000 coeff.
0416+  08BB 07 D9 08    	call print_number
0417+  08BE 11          	mov a, b
0418+  08BF 26 64 00    	mov b, 100
0419+  08C2 AE          	div a, b
0420+  08C3 07 D9 08    	call print_number
0421+  08C6 11          	mov a, b
0422+  08C7 26 0A 00    	mov b, 10
0423+  08CA AE          	div a, b
0424+  08CB 07 D9 08    	call print_number
0425+  08CE 11          	mov a, b
0426+  08CF 6A 30       	add al, $30
0427+  08D1 23          	mov ah, al
0428+  08D2 19 00       	mov al, 0
0429+  08D4 05 03       	syscall sys_io	; print coeff
0430+  08D6 E5          	pop b
0431+  08D7 E4          	pop a
0432+  08D8 09          	ret
0433+  08D9             
0434+  08D9             
0435+  08D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  08D9             ; if A == 0, print space
0437+  08D9             ; else print A
0438+  08D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  08D9             print_number:
0440+  08D9 6A 30       	add al, $30
0441+  08DB 23          	mov ah, al
0442+  08DC 07 4A 07    	call putchar
0443+  08DF 09          	ret
0444+  08E0             
0445+  08E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  08E0             ; PRINT 16BIT HEX INTEGER
0447+  08E0             ; integer value in reg B
0448+  08E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  08E0             print_u16x:
0450+  08E0 D7          	push a
0451+  08E1 D8          	push b
0452+  08E2 DD          	push bl
0453+  08E3 30          	mov bl, bh
0454+  08E4 07 11 07    	call itoa				; convert bh to char in A
0455+  08E7 2F          	mov bl, al				; save al
0456+  08E8 19 00       	mov al, 0
0457+  08EA 05 03       	syscall sys_io				; display AH
0458+  08EC 24          	mov ah, bl				; retrieve al
0459+  08ED 19 00       	mov al, 0
0460+  08EF 05 03       	syscall sys_io				; display AL
0461+  08F1             
0462+  08F1 EA          	pop bl
0463+  08F2 07 11 07    	call itoa				; convert bh to char in A
0464+  08F5 2F          	mov bl, al				; save al
0465+  08F6 19 00       	mov al, 0
0466+  08F8 05 03       	syscall sys_io				; display AH
0467+  08FA 24          	mov ah, bl				; retrieve al
0468+  08FB 19 00       	mov al, 0
0469+  08FD 05 03       	syscall sys_io				; display AL
0470+  08FF             
0471+  08FF E5          	pop b
0472+  0900 E4          	pop a
0473+  0901 09          	ret
0474+  0902             
0475+  0902             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0902             ; INPUT 16BIT HEX INTEGER
0477+  0902             ; read 16bit integer into A
0478+  0902             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0902             scan_u16x:
0480+  0902 F8 10 00    	enter 16
0481+  0905 D8          	push b
0482+  0906 DA          	push d
0483+  0907             
0484+  0907 FA F1 FF    	lea d, [bp + -15]
0485+  090A 07 51 07    	call gets				; get number
0486+  090D             
0487+  090D 32          	mov bl, [d]
0488+  090E 37          	mov bh, bl
0489+  090F 33 01 00    	mov bl, [d + 1]
0490+  0912 07 FF 06    	call atoi				; convert to int in AL
0491+  0915 23          	mov ah, al				; move to AH
0492+  0916             
0493+  0916 33 02 00    	mov bl, [d + 2]
0494+  0919 37          	mov bh, bl
0495+  091A 33 03 00    	mov bl, [d + 3]
0496+  091D 07 FF 06    	call atoi				; convert to int in AL
0497+  0920             
0498+  0920 E7          	pop d
0499+  0921 E5          	pop b
0500+  0922 F9          	leave
0501+  0923 09          	ret
0502+  0924             
0503+  0924             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0924             ; PRINT 8bit HEX INTEGER
0505+  0924             ; integer value in reg bl
0506+  0924             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0924             print_u8x:
0508+  0924 D7          	push a
0509+  0925 DD          	push bl
0510+  0926             
0511+  0926 07 11 07    	call itoa				; convert bl to char in A
0512+  0929 2F          	mov bl, al				; save al
0513+  092A 19 00       	mov al, 0
0514+  092C 05 03       	syscall sys_io				; display AH
0515+  092E 24          	mov ah, bl				; retrieve al
0516+  092F 19 00       	mov al, 0
0517+  0931 05 03       	syscall sys_io				; display AL
0518+  0933             
0519+  0933 EA          	pop bl
0520+  0934 E4          	pop a
0521+  0935 09          	ret
0522+  0936             
0523+  0936             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0936             ; print 8bit decimal unsigned number
0525+  0936             ; input number in AL
0526+  0936             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0936             print_u8d:
0528+  0936 D7          	push a
0529+  0937 D8          	push b
0530+  0938             
0531+  0938 22 00       	mov ah, 0
0532+  093A 26 64 00    	mov b, 100
0533+  093D AE          	div a, b
0534+  093E D8          	push b			; save remainder
0535+  093F B9 00       	cmp al, 0
0536+  0941 C6 4B 09    	je skip100
0537+  0944 6A 30       	add al, $30
0538+  0946 23          	mov ah, al
0539+  0947 19 00       	mov al, 0
0540+  0949 05 03       	syscall sys_io	; print coeff
0541+  094B             skip100:
0542+  094B E4          	pop a
0543+  094C 22 00       	mov ah, 0
0544+  094E 26 0A 00    	mov b, 10
0545+  0951 AE          	div a, b
0546+  0952 D8          	push b			; save remainder
0547+  0953 B9 00       	cmp al, 0
0548+  0955 C6 5F 09    	je skip10
0549+  0958 6A 30       	add al, $30
0550+  095A 23          	mov ah, al
0551+  095B 19 00       	mov al, 0
0552+  095D 05 03       	syscall sys_io	; print coeff
0553+  095F             skip10:
0554+  095F E4          	pop a
0555+  0960 1B          	mov al, bl
0556+  0961 6A 30       	add al, $30
0557+  0963 23          	mov ah, al
0558+  0964 19 00       	mov al, 0
0559+  0966 05 03       	syscall sys_io	; print coeff
0560+  0968 E5          	pop b
0561+  0969 E4          	pop a
0562+  096A 09          	ret
0563+  096B             
0564+  096B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  096B             ; INPUT 8BIT HEX INTEGER
0566+  096B             ; read 8bit integer into AL
0567+  096B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  096B             scan_u8x:
0569+  096B F8 04 00    	enter 4
0570+  096E D8          	push b
0571+  096F DA          	push d
0572+  0970             
0573+  0970 FA FD FF    	lea d, [bp + -3]
0574+  0973 07 51 07    	call gets				; get number
0575+  0976             
0576+  0976 32          	mov bl, [d]
0577+  0977 37          	mov bh, bl
0578+  0978 33 01 00    	mov bl, [d + 1]
0579+  097B 07 FF 06    	call atoi				; convert to int in AL
0580+  097E             
0581+  097E E7          	pop d
0582+  097F E5          	pop b
0583+  0980 F9          	leave
0584+  0981 09          	ret
0585+  0982             
0586+  0982             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0982             ; input decimal number
0588+  0982             ; result in A
0589+  0982             ; 655'\0'
0590+  0982             ; low--------high
0591+  0982             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  0982             scan_u16d:
0593+  0982 F8 08 00    	enter 8
0594+  0985 E2          	push si
0595+  0986 D8          	push b
0596+  0987 D9          	push c
0597+  0988 DA          	push d
0598+  0989 FA F9 FF    	lea d, [bp +- 7]
0599+  098C 07 51 07    	call gets
0600+  098F 07 7F 06    	call strlen			; get string length in C
0601+  0992 7E          	dec c
0602+  0993 FD 4E       	mov si, d
0603+  0995 12          	mov a, c
0604+  0996 FD 99       	shl a
0605+  0998 3B E7 06    	mov d, table_power
0606+  099B 59          	add d, a
0607+  099C 38 00 00    	mov c, 0
0608+  099F             mul_loop:
0609+  099F F6          	lodsb			; load ASCII to al
0610+  09A0 B9 00       	cmp al, 0
0611+  09A2 C6 B5 09    	je mul_exit
0612+  09A5 6F 30       	sub al, $30		; make into integer
0613+  09A7 22 00       	mov ah, 0
0614+  09A9 2A          	mov b, [d]
0615+  09AA AC          	mul a, b			; result in B since it fits in 16bits
0616+  09AB 11          	mov a, b
0617+  09AC 28          	mov b, c
0618+  09AD 54          	add a, b
0619+  09AE 39          	mov c, a
0620+  09AF 63 02 00    	sub d, 2
0621+  09B2 0A 9F 09    	jmp mul_loop
0622+  09B5             mul_exit:
0623+  09B5 12          	mov a, c
0624+  09B6 E7          	pop d
0625+  09B7 E6          	pop c
0626+  09B8 E5          	pop b
0627+  09B9 EF          	pop si
0628+  09BA F9          	leave
0629+  09BB 09          	ret
0375   09BC             ; --- END INCLUDE BLOCK
0376   09BC             
0377   09BC             
0378   09BC             .end
tasm: Number of errors = 0
