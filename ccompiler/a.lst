0001   0000             ; --- FILENAME: rsa.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; p
0011   0405 52 02 00      sub sp, 2 ; q
0012   0408 52 02 00      sub sp, 2 ; n
0013   040B 52 02 00      sub sp, 2 ; phi
0014   040E 52 02 00      sub sp, 2 ; e
0015   0411 52 02 00      sub sp, 2 ; d
0016   0414 26 3D 00      mov b, 61
0017   0417 D7            push a
0018   0418 11            mov a, b
0019   0419 45 FF FF      mov [bp + -1], a ; p
0020   041C E4            pop a
0021   041D 26 35 00      mov b, 53
0022   0420 D7            push a
0023   0421 11            mov a, b
0024   0422 45 FD FF      mov [bp + -3], a ; q
0025   0425 E4            pop a
0026   0426 2C FF FF      mov b, [bp + -1] ; p
0027   0429 D7            push a
0028   042A 11            mov a, b
0029   042B 2C FD FF      mov b, [bp + -3] ; q
0030   042E AC            mul a, b
0031   042F E4            pop a
0032   0430 D7            push a
0033   0431 11            mov a, b
0034   0432 45 FB FF      mov [bp + -5], a ; n
0035   0435 E4            pop a
0036   0436 2C FF FF      mov b, [bp + -1] ; p
0037   0439 D7            push a
0038   043A 11            mov a, b
0039   043B 26 01 00      mov b, 1
0040   043E 60            sub a, b
0041   043F 27            mov b, a
0042   0440 E4            pop a
0043   0441 D7            push a
0044   0442 11            mov a, b
0045   0443 2C FD FF      mov b, [bp + -3] ; q
0046   0446 D7            push a
0047   0447 11            mov a, b
0048   0448 26 01 00      mov b, 1
0049   044B 60            sub a, b
0050   044C 27            mov b, a
0051   044D E4            pop a
0052   044E AC            mul a, b
0053   044F E4            pop a
0054   0450 D7            push a
0055   0451 11            mov a, b
0056   0452 45 F9 FF      mov [bp + -7], a ; phi
0057   0455 E4            pop a
0058   0456 2C F9 FF      mov b, [bp + -7] ; phi
0059   0459 FD AB         swp b
0060   045B D8            push b
0061   045C 07 9D 07      call find_e
0062   045F 51 02 00      add sp, 2
0063   0462 D7            push a
0064   0463 11            mov a, b
0065   0464 45 F7 FF      mov [bp + -9], a ; e
0066   0467 E4            pop a
0067   0468 2C F7 FF      mov b, [bp + -9] ; e
0068   046B FD AB         swp b
0069   046D D8            push b
0070   046E 2C F9 FF      mov b, [bp + -7] ; phi
0071   0471 FD AB         swp b
0072   0473 D8            push b
0073   0474 07 0E 08      call find_d
0074   0477 51 04 00      add sp, 4
0075   047A D7            push a
0076   047B 11            mov a, b
0077   047C 45 F5 FF      mov [bp + -11], a ; d
0078   047F E4            pop a
0079   0480 52 02 00      sub sp, 2 ; exp
0080   0483 52 02 00      sub sp, 2 ; base
0081   0486 52 02 00      sub sp, 2 ; mod
0082   0489 52 02 00      sub sp, 2 ; result
0083   048C 2C F7 FF      mov b, [bp + -9] ; e
0084   048F D7            push a
0085   0490 11            mov a, b
0086   0491 45 F3 FF      mov [bp + -13], a ; exp
0087   0494 E4            pop a
0088   0495 26 48 00      mov b, $48
0089   0498 D7            push a
0090   0499 11            mov a, b
0091   049A 45 F1 FF      mov [bp + -15], a ; base
0092   049D E4            pop a
0093   049E 2C FB FF      mov b, [bp + -5] ; n
0094   04A1 D7            push a
0095   04A2 11            mov a, b
0096   04A3 45 EF FF      mov [bp + -17], a ; mod
0097   04A6 E4            pop a
0098   04A7 26 01 00      mov b, 1
0099   04AA D7            push a
0100   04AB 11            mov a, b
0101   04AC 45 ED FF      mov [bp + -19], a ; result
0102   04AF E4            pop a
0103   04B0             _while1_cond:
0104   04B0 2C F3 FF      mov b, [bp + -13] ; exp
0105   04B3 D7            push a
0106   04B4 11            mov a, b
0107   04B5 26 00 00      mov b, 0
0108   04B8 B0            cmp a, b
0109   04B9 0E            lodflgs
0110   04BA 2F            mov bl, al
0111   04BB FD 78         mov g, a
0112   04BD FD A2 03      shr al, 3
0113   04C0 FD A4 02      shr bl, 2
0114   04C3 FD 87 01      and bl, %00000001
0115   04C6 90            xor al, bl
0116   04C7 FD 27         mov b, g
0117   04C9 FD 87 01      and bl, %00000001
0118   04CC 8C            or al, bl
0119   04CD 8F 01         xor al, %00000001 ; > (signed)
0120   04CF 22 00         mov ah, 0
0121   04D1 27            mov b, a
0122   04D2 E4            pop a
0123   04D3 C0 00 00      cmp b, 0
0124   04D6 C6 94 05      je _while1_exit
0125   04D9             _while1_block:
0126   04D9             _if2_cond:
0127   04D9 2C F3 FF      mov b, [bp + -13] ; exp
0128   04DC D7            push a
0129   04DD 11            mov a, b
0130   04DE 26 01 00      mov b, 1
0131   04E1 86            and a, b
0132   04E2 27            mov b, a
0133   04E3 E4            pop a
0134   04E4 C0 00 00      cmp b, 0
0135   04E7 C6 64 05      je _if2_exit
0136   04EA             _if2_true:
0137   04EA 2C ED FF      mov b, [bp + -19] ; result
0138   04ED FD AB         swp b
0139   04EF D8            push b
0140   04F0 07 99 06      call print_num
0141   04F3 51 02 00      add sp, 2
0142   04F6 26 7E 08      mov b, __string_0 ; "\n"
0143   04F9 FD AB         swp b
0144   04FB D8            push b
0145   04FC 07 8E 06      call print
0146   04FF 51 02 00      add sp, 2
0147   0502 2C F1 FF      mov b, [bp + -15] ; base
0148   0505 FD AB         swp b
0149   0507 D8            push b
0150   0508 07 99 06      call print_num
0151   050B 51 02 00      add sp, 2
0152   050E 26 7E 08      mov b, __string_0 ; "\n"
0153   0511 FD AB         swp b
0154   0513 D8            push b
0155   0514 07 8E 06      call print
0156   0517 51 02 00      add sp, 2
0157   051A 2C EF FF      mov b, [bp + -17] ; mod
0158   051D FD AB         swp b
0159   051F D8            push b
0160   0520 07 99 06      call print_num
0161   0523 51 02 00      add sp, 2
0162   0526 26 7E 08      mov b, __string_0 ; "\n"
0163   0529 FD AB         swp b
0164   052B D8            push b
0165   052C 07 8E 06      call print
0166   052F 51 02 00      add sp, 2
0167   0532 2C ED FF      mov b, [bp + -19] ; result
0168   0535 D7            push a
0169   0536 11            mov a, b
0170   0537 2C F1 FF      mov b, [bp + -15] ; base
0171   053A AC            mul a, b
0172   053B E4            pop a
0173   053C D7            push a
0174   053D 11            mov a, b
0175   053E 2C EF FF      mov b, [bp + -17] ; mod
0176   0541 AE            div a, b
0177   0542 E4            pop a
0178   0543 D7            push a
0179   0544 11            mov a, b
0180   0545 45 ED FF      mov [bp + -19], a ; result
0181   0548 E4            pop a
0182   0549 2C ED FF      mov b, [bp + -19] ; result
0183   054C FD AB         swp b
0184   054E D8            push b
0185   054F 07 99 06      call print_num
0186   0552 51 02 00      add sp, 2
0187   0555 26 7E 08      mov b, __string_0 ; "\n"
0188   0558 FD AB         swp b
0189   055A D8            push b
0190   055B 07 8E 06      call print
0191   055E 51 02 00      add sp, 2
0192   0561 0A 64 05      jmp _if2_exit
0193   0564             _if2_exit:
0194   0564 2C F3 FF      mov b, [bp + -13] ; exp
0195   0567 D7            push a
0196   0568 11            mov a, b
0197   0569 26 01 00      mov b, 1
0198   056C D9            push c
0199   056D FD 39         mov c, b
0200   056F 27            mov b, a
0201   0570 FD 8E         ashr b, cl
0202   0572 E6            pop c
0203   0573 E4            pop a
0204   0574 D7            push a
0205   0575 11            mov a, b
0206   0576 45 F3 FF      mov [bp + -13], a ; exp
0207   0579 E4            pop a
0208   057A 2C F1 FF      mov b, [bp + -15] ; base
0209   057D D7            push a
0210   057E 11            mov a, b
0211   057F 2C F1 FF      mov b, [bp + -15] ; base
0212   0582 AC            mul a, b
0213   0583 E4            pop a
0214   0584 D7            push a
0215   0585 11            mov a, b
0216   0586 2C EF FF      mov b, [bp + -17] ; mod
0217   0589 AE            div a, b
0218   058A E4            pop a
0219   058B D7            push a
0220   058C 11            mov a, b
0221   058D 45 F1 FF      mov [bp + -15], a ; base
0222   0590 E4            pop a
0223   0591 0A B0 04      jmp _while1_cond
0224   0594             _while1_exit:
0225   0594 2C ED FF      mov b, [bp + -19] ; result
0226   0597 FD AB         swp b
0227   0599 D8            push b
0228   059A 07 99 06      call print_num
0229   059D 51 02 00      add sp, 2
0230   05A0 26 00 00      mov b, 0
0231   05A3 F9            leave
0232   05A4 05 0B         syscall sys_terminate_proc
0233   05A6             
0234   05A6             _gets:
0235   05A6 D2            push bp
0236   05A7 9B            mov bp, sp
0237   05A8             
0238   05A8             ; --- BEGIN INLINE ASM BLOCK
0239   05A8 17 05 00      mov a, [bp + 5]
0240   05AB 3C            mov d, a
0241   05AC 07 99 09      call gets
0242   05AF             ; --- END INLINE ASM BLOCK
0243   05AF             
0244   05AF F9            leave
0245   05B0 09            ret
0246   05B1             
0247   05B1             gcd:
0248   05B1 D2            push bp
0249   05B2 9B            mov bp, sp
0250   05B3             _if3_cond:
0251   05B3 2C 05 00      mov b, [bp + 5] ; b
0252   05B6 D7            push a
0253   05B7 11            mov a, b
0254   05B8 26 00 00      mov b, 0
0255   05BB B0            cmp a, b
0256   05BC 0E            lodflgs
0257   05BD 87 01         and al, %00000001 ; ==
0258   05BF 22 00         mov ah, 0
0259   05C1 27            mov b, a
0260   05C2 E4            pop a
0261   05C3 C0 00 00      cmp b, 0
0262   05C6 C6 D1 05      je _if3_exit
0263   05C9             _if3_true:
0264   05C9 2C 07 00      mov b, [bp + 7] ; a
0265   05CC F9            leave
0266   05CD 09            ret
0267   05CE 0A D1 05      jmp _if3_exit
0268   05D1             _if3_exit:
0269   05D1 2C 05 00      mov b, [bp + 5] ; b
0270   05D4 FD AB         swp b
0271   05D6 D8            push b
0272   05D7 2C 07 00      mov b, [bp + 7] ; a
0273   05DA D7            push a
0274   05DB 11            mov a, b
0275   05DC 2C 05 00      mov b, [bp + 5] ; b
0276   05DF AE            div a, b
0277   05E0 E4            pop a
0278   05E1 FD AB         swp b
0279   05E3 D8            push b
0280   05E4 07 B1 05      call gcd
0281   05E7 51 04 00      add sp, 4
0282   05EA F9            leave
0283   05EB 09            ret
0284   05EC             
0285   05EC             mod_exp:
0286   05EC D2            push bp
0287   05ED 9B            mov bp, sp
0288   05EE 52 02 00      sub sp, 2 ; result
0289   05F1 26 01 00      mov b, 1
0290   05F4 D7            push a
0291   05F5 11            mov a, b
0292   05F6 45 FF FF      mov [bp + -1], a ; result
0293   05F9 E4            pop a
0294   05FA             _while4_cond:
0295   05FA 2C 07 00      mov b, [bp + 7] ; exp
0296   05FD D7            push a
0297   05FE 11            mov a, b
0298   05FF 26 00 00      mov b, 0
0299   0602 B0            cmp a, b
0300   0603 0E            lodflgs
0301   0604 2F            mov bl, al
0302   0605 FD 78         mov g, a
0303   0607 FD A2 03      shr al, 3
0304   060A FD A4 02      shr bl, 2
0305   060D FD 87 01      and bl, %00000001
0306   0610 90            xor al, bl
0307   0611 FD 27         mov b, g
0308   0613 FD 87 01      and bl, %00000001
0309   0616 8C            or al, bl
0310   0617 8F 01         xor al, %00000001 ; > (signed)
0311   0619 22 00         mov ah, 0
0312   061B 27            mov b, a
0313   061C E4            pop a
0314   061D C0 00 00      cmp b, 0
0315   0620 C6 7E 06      je _while4_exit
0316   0623             _while4_block:
0317   0623             _if5_cond:
0318   0623 2C 07 00      mov b, [bp + 7] ; exp
0319   0626 D7            push a
0320   0627 11            mov a, b
0321   0628 26 01 00      mov b, 1
0322   062B 86            and a, b
0323   062C 27            mov b, a
0324   062D E4            pop a
0325   062E C0 00 00      cmp b, 0
0326   0631 C6 4E 06      je _if5_exit
0327   0634             _if5_true:
0328   0634 2C FF FF      mov b, [bp + -1] ; result
0329   0637 D7            push a
0330   0638 11            mov a, b
0331   0639 2C 09 00      mov b, [bp + 9] ; base
0332   063C AC            mul a, b
0333   063D E4            pop a
0334   063E D7            push a
0335   063F 11            mov a, b
0336   0640 2C 05 00      mov b, [bp + 5] ; mod
0337   0643 AE            div a, b
0338   0644 E4            pop a
0339   0645 D7            push a
0340   0646 11            mov a, b
0341   0647 45 FF FF      mov [bp + -1], a ; result
0342   064A E4            pop a
0343   064B 0A 4E 06      jmp _if5_exit
0344   064E             _if5_exit:
0345   064E 2C 07 00      mov b, [bp + 7] ; exp
0346   0651 D7            push a
0347   0652 11            mov a, b
0348   0653 26 01 00      mov b, 1
0349   0656 D9            push c
0350   0657 FD 39         mov c, b
0351   0659 27            mov b, a
0352   065A FD 8E         ashr b, cl
0353   065C E6            pop c
0354   065D E4            pop a
0355   065E D7            push a
0356   065F 11            mov a, b
0357   0660 45 07 00      mov [bp + 7], a ; exp
0358   0663 E4            pop a
0359   0664 2C 09 00      mov b, [bp + 9] ; base
0360   0667 D7            push a
0361   0668 11            mov a, b
0362   0669 2C 09 00      mov b, [bp + 9] ; base
0363   066C AC            mul a, b
0364   066D E4            pop a
0365   066E D7            push a
0366   066F 11            mov a, b
0367   0670 2C 05 00      mov b, [bp + 5] ; mod
0368   0673 AE            div a, b
0369   0674 E4            pop a
0370   0675 D7            push a
0371   0676 11            mov a, b
0372   0677 45 09 00      mov [bp + 9], a ; base
0373   067A E4            pop a
0374   067B 0A FA 05      jmp _while4_cond
0375   067E             _while4_exit:
0376   067E 2C FF FF      mov b, [bp + -1] ; result
0377   0681 F9            leave
0378   0682 09            ret
0379   0683             
0380   0683             _putchar:
0381   0683 D2            push bp
0382   0684 9B            mov bp, sp
0383   0685             
0384   0685             ; --- BEGIN INLINE ASM BLOCK
0385   0685 20 05 00      mov al, [bp + 5]
0386   0688 23            mov ah, al
0387   0689 07 92 09      call putchar
0388   068C             ; --- END INLINE ASM BLOCK
0389   068C             
0390   068C F9            leave
0391   068D 09            ret
0392   068E             
0393   068E             print:
0394   068E D2            push bp
0395   068F 9B            mov bp, sp
0396   0690             
0397   0690             ; --- BEGIN INLINE ASM BLOCK
0398   0690 17 05 00      mov a, [bp + 5]
0399   0693 3C            mov d, a
0400   0694 07 CC 0A      call puts
0401   0697             ; --- END INLINE ASM BLOCK
0402   0697             
0403   0697 F9            leave
0404   0698 09            ret
0405   0699             
0406   0699             print_num:
0407   0699 D2            push bp
0408   069A 9B            mov bp, sp
0409   069B 52 05 00      sub sp, 5 ; digits
0410   069E 52 02 00      sub sp, 2 ; i
0411   06A1 26 00 00      mov b, 0
0412   06A4 D7            push a
0413   06A5 11            mov a, b
0414   06A6 45 FA FF      mov [bp + -6], a ; i
0415   06A9 E4            pop a
0416   06AA             _if6_cond:
0417   06AA 2C 05 00      mov b, [bp + 5] ; num
0418   06AD D7            push a
0419   06AE 11            mov a, b
0420   06AF 26 00 00      mov b, 0
0421   06B2 B0            cmp a, b
0422   06B3 0E            lodflgs
0423   06B4 87 01         and al, %00000001 ; ==
0424   06B6 22 00         mov ah, 0
0425   06B8 27            mov b, a
0426   06B9 E4            pop a
0427   06BA C0 00 00      cmp b, 0
0428   06BD C6 CF 06      je _if6_exit
0429   06C0             _if6_true:
0430   06C0 26 30 00      mov b, $30
0431   06C3 DD            push bl
0432   06C4 07 83 06      call _putchar
0433   06C7 51 01 00      add sp, 1
0434   06CA F9            leave
0435   06CB 09            ret
0436   06CC 0A CF 06      jmp _if6_exit
0437   06CF             _if6_exit:
0438   06CF             _while7_cond:
0439   06CF 2C 05 00      mov b, [bp + 5] ; num
0440   06D2 D7            push a
0441   06D3 11            mov a, b
0442   06D4 26 00 00      mov b, 0
0443   06D7 B0            cmp a, b
0444   06D8 0E            lodflgs
0445   06D9 2F            mov bl, al
0446   06DA FD 78         mov g, a
0447   06DC FD A2 03      shr al, 3
0448   06DF FD A4 02      shr bl, 2
0449   06E2 FD 87 01      and bl, %00000001
0450   06E5 90            xor al, bl
0451   06E6 FD 27         mov b, g
0452   06E8 FD 87 01      and bl, %00000001
0453   06EB 8C            or al, bl
0454   06EC 8F 01         xor al, %00000001 ; > (signed)
0455   06EE 22 00         mov ah, 0
0456   06F0 27            mov b, a
0457   06F1 E4            pop a
0458   06F2 C0 00 00      cmp b, 0
0459   06F5 C6 45 07      je _while7_exit
0460   06F8             _while7_block:
0461   06F8 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0462   06FB 2D            mov b, d
0463   06FC D7            push a
0464   06FD 74            mov d, b
0465   06FE DA            push d
0466   06FF 2C FA FF      mov b, [bp + -6] ; i
0467   0702 E7            pop d
0468   0703 10 01 00      mov a, 1
0469   0706 AC            mul a, b
0470   0707 5A            add d, b
0471   0708 E4            pop a
0472   0709 DA            push d
0473   070A 26 30 00      mov b, $30
0474   070D D7            push a
0475   070E 11            mov a, b
0476   070F 2C 05 00      mov b, [bp + 5] ; num
0477   0712 D7            push a
0478   0713 11            mov a, b
0479   0714 26 0A 00      mov b, 10
0480   0717 AE            div a, b
0481   0718 E4            pop a
0482   0719 56            add b, a
0483   071A E4            pop a
0484   071B E7            pop d
0485   071C FD 3E         mov [d], bl
0486   071E 2C 05 00      mov b, [bp + 5] ; num
0487   0721 D7            push a
0488   0722 11            mov a, b
0489   0723 26 0A 00      mov b, 10
0490   0726 AE            div a, b
0491   0727 FD 78         mov g, a
0492   0729 11            mov a, b
0493   072A FD 27         mov b, g
0494   072C E4            pop a
0495   072D D7            push a
0496   072E 11            mov a, b
0497   072F 45 05 00      mov [bp + 5], a ; num
0498   0732 E4            pop a
0499   0733 2C FA FF      mov b, [bp + -6] ; i
0500   0736 D7            push a
0501   0737 11            mov a, b
0502   0738 FD 77         inc b
0503   073A D7            push a
0504   073B 11            mov a, b
0505   073C 45 FA FF      mov [bp + -6], a ; i
0506   073F E4            pop a
0507   0740 27            mov b, a
0508   0741 E4            pop a
0509   0742 0A CF 06      jmp _while7_cond
0510   0745             _while7_exit:
0511   0745             _while8_cond:
0512   0745 2C FA FF      mov b, [bp + -6] ; i
0513   0748 D7            push a
0514   0749 11            mov a, b
0515   074A 26 00 00      mov b, 0
0516   074D B0            cmp a, b
0517   074E 0E            lodflgs
0518   074F 2F            mov bl, al
0519   0750 FD 78         mov g, a
0520   0752 FD A2 03      shr al, 3
0521   0755 FD A4 02      shr bl, 2
0522   0758 FD 87 01      and bl, %00000001
0523   075B 90            xor al, bl
0524   075C FD 27         mov b, g
0525   075E FD 87 01      and bl, %00000001
0526   0761 8C            or al, bl
0527   0762 8F 01         xor al, %00000001 ; > (signed)
0528   0764 22 00         mov ah, 0
0529   0766 27            mov b, a
0530   0767 E4            pop a
0531   0768 C0 00 00      cmp b, 0
0532   076B C6 9B 07      je _while8_exit
0533   076E             _while8_block:
0534   076E 2C FA FF      mov b, [bp + -6] ; i
0535   0771 D7            push a
0536   0772 11            mov a, b
0537   0773 FD 7D         dec b
0538   0775 D7            push a
0539   0776 11            mov a, b
0540   0777 45 FA FF      mov [bp + -6], a ; i
0541   077A E4            pop a
0542   077B 27            mov b, a
0543   077C E4            pop a
0544   077D FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0545   0780 2D            mov b, d
0546   0781 D7            push a
0547   0782 74            mov d, b
0548   0783 DA            push d
0549   0784 2C FA FF      mov b, [bp + -6] ; i
0550   0787 E7            pop d
0551   0788 10 01 00      mov a, 1
0552   078B AC            mul a, b
0553   078C 5A            add d, b
0554   078D E4            pop a
0555   078E 32            mov bl, [d]
0556   078F A7 00         mov bh, 0
0557   0791 DD            push bl
0558   0792 07 83 06      call _putchar
0559   0795 51 01 00      add sp, 1
0560   0798 0A 45 07      jmp _while8_cond
0561   079B             _while8_exit:
0562   079B F9            leave
0563   079C 09            ret
0564   079D             
0565   079D             find_e:
0566   079D D2            push bp
0567   079E 9B            mov bp, sp
0568   079F 52 02 00      sub sp, 2 ; e
0569   07A2             _for9_init:
0570   07A2 26 02 00      mov b, 2
0571   07A5 D7            push a
0572   07A6 11            mov a, b
0573   07A7 45 FF FF      mov [bp + -1], a ; e
0574   07AA E4            pop a
0575   07AB             _for9_cond:
0576   07AB 2C FF FF      mov b, [bp + -1] ; e
0577   07AE D7            push a
0578   07AF 11            mov a, b
0579   07B0 2C 05 00      mov b, [bp + 5] ; phi
0580   07B3 B0            cmp a, b
0581   07B4 0E            lodflgs
0582   07B5 2F            mov bl, al
0583   07B6 FD A2 03      shr al, 3
0584   07B9 FD A4 02      shr bl, 2
0585   07BC FD 87 01      and bl, %00000001
0586   07BF 90            xor al, bl ; < (signed)
0587   07C0 22 00         mov ah, 0
0588   07C2 27            mov b, a
0589   07C3 E4            pop a
0590   07C4 C0 00 00      cmp b, 0
0591   07C7 C6 09 08      je _for9_exit
0592   07CA             _for9_block:
0593   07CA             _if10_cond:
0594   07CA 2C FF FF      mov b, [bp + -1] ; e
0595   07CD FD AB         swp b
0596   07CF D8            push b
0597   07D0 2C 05 00      mov b, [bp + 5] ; phi
0598   07D3 FD AB         swp b
0599   07D5 D8            push b
0600   07D6 07 B1 05      call gcd
0601   07D9 51 04 00      add sp, 4
0602   07DC D7            push a
0603   07DD 11            mov a, b
0604   07DE 26 01 00      mov b, 1
0605   07E1 B0            cmp a, b
0606   07E2 0E            lodflgs
0607   07E3 87 01         and al, %00000001 ; ==
0608   07E5 22 00         mov ah, 0
0609   07E7 27            mov b, a
0610   07E8 E4            pop a
0611   07E9 C0 00 00      cmp b, 0
0612   07EC C6 F7 07      je _if10_exit
0613   07EF             _if10_true:
0614   07EF 2C FF FF      mov b, [bp + -1] ; e
0615   07F2 F9            leave
0616   07F3 09            ret
0617   07F4 0A F7 07      jmp _if10_exit
0618   07F7             _if10_exit:
0619   07F7             _for9_update:
0620   07F7 2C FF FF      mov b, [bp + -1] ; e
0621   07FA D7            push a
0622   07FB 11            mov a, b
0623   07FC FD 77         inc b
0624   07FE D7            push a
0625   07FF 11            mov a, b
0626   0800 45 FF FF      mov [bp + -1], a ; e
0627   0803 E4            pop a
0628   0804 27            mov b, a
0629   0805 E4            pop a
0630   0806 0A AB 07      jmp _for9_cond
0631   0809             _for9_exit:
0632   0809 26 00 00      mov b, 0
0633   080C F9            leave
0634   080D 09            ret
0635   080E             
0636   080E             find_d:
0637   080E D2            push bp
0638   080F 9B            mov bp, sp
0639   0810 52 02 00      sub sp, 2 ; d
0640   0813             _for11_init:
0641   0813 26 02 00      mov b, 2
0642   0816 D7            push a
0643   0817 11            mov a, b
0644   0818 45 FF FF      mov [bp + -1], a ; d
0645   081B E4            pop a
0646   081C             _for11_cond:
0647   081C 2C FF FF      mov b, [bp + -1] ; d
0648   081F D7            push a
0649   0820 11            mov a, b
0650   0821 2C 05 00      mov b, [bp + 5] ; phi
0651   0824 B0            cmp a, b
0652   0825 0E            lodflgs
0653   0826 2F            mov bl, al
0654   0827 FD A2 03      shr al, 3
0655   082A FD A4 02      shr bl, 2
0656   082D FD 87 01      and bl, %00000001
0657   0830 90            xor al, bl ; < (signed)
0658   0831 22 00         mov ah, 0
0659   0833 27            mov b, a
0660   0834 E4            pop a
0661   0835 C0 00 00      cmp b, 0
0662   0838 C6 79 08      je _for11_exit
0663   083B             _for11_block:
0664   083B             _if12_cond:
0665   083B 2C FF FF      mov b, [bp + -1] ; d
0666   083E D7            push a
0667   083F 11            mov a, b
0668   0840 2C 07 00      mov b, [bp + 7] ; e
0669   0843 AC            mul a, b
0670   0844 E4            pop a
0671   0845 D7            push a
0672   0846 11            mov a, b
0673   0847 2C 05 00      mov b, [bp + 5] ; phi
0674   084A AE            div a, b
0675   084B E4            pop a
0676   084C D7            push a
0677   084D 11            mov a, b
0678   084E 26 01 00      mov b, 1
0679   0851 B0            cmp a, b
0680   0852 0E            lodflgs
0681   0853 87 01         and al, %00000001 ; ==
0682   0855 22 00         mov ah, 0
0683   0857 27            mov b, a
0684   0858 E4            pop a
0685   0859 C0 00 00      cmp b, 0
0686   085C C6 67 08      je _if12_exit
0687   085F             _if12_true:
0688   085F 2C FF FF      mov b, [bp + -1] ; d
0689   0862 F9            leave
0690   0863 09            ret
0691   0864 0A 67 08      jmp _if12_exit
0692   0867             _if12_exit:
0693   0867             _for11_update:
0694   0867 2C FF FF      mov b, [bp + -1] ; d
0695   086A D7            push a
0696   086B 11            mov a, b
0697   086C FD 77         inc b
0698   086E D7            push a
0699   086F 11            mov a, b
0700   0870 45 FF FF      mov [bp + -1], a ; d
0701   0873 E4            pop a
0702   0874 27            mov b, a
0703   0875 E4            pop a
0704   0876 0A 1C 08      jmp _for11_cond
0705   0879             _for11_exit:
0706   0879 26 00 00      mov b, 0
0707   087C F9            leave
0708   087D 09            ret
0709   087E             ; --- END TEXT BLOCK
0710   087E             
0711   087E             ; --- BEGIN DATA BLOCK
0712   087E 0A 00       __string_0: .db "\n", 0
0713   0880             ; --- END DATA BLOCK
0714   0880             
0715   0880             ; --- BEGIN INCLUDE BLOCK
0716   0880             .include "lib/stdio.asm"
0001+  0880             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0880             ; stdio.s
0003+  0880             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0880             .include "lib/string.asm"
0001++ 0880             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0880             ; string.s
0003++ 0880             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0880             
0005++ 0880             
0006++ 0880             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0880             ; strrev
0008++ 0880             ; reverse a string
0009++ 0880             ; D = string address
0010++ 0880             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0880             ; 01234
0012++ 0880             strrev:
0013++ 0880 4B          	pusha
0014++ 0881 07 C7 08    	call strlen	; length in C
0015++ 0884 12          	mov a, c
0016++ 0885 AF 01 00    	cmp a, 1
0017++ 0888 D0 A2 08    	jleu strrev_end	; check string length. string len must be > 1
0018++ 088B 7D          	dec a
0019++ 088C FD 4E       	mov si, d	; beginning of string
0020++ 088E FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0890 59          	add d, a	; end of string
0022++ 0891 12          	mov a, c
0023++ 0892 FD 9B       	shr a		; divide by 2
0024++ 0894 39          	mov c, a	; C now counts the steps
0025++ 0895             strrev_L0:
0026++ 0895 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0896 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0897 3E          	mov [d], al	; store left char into right side
0029++ 0898 1B          	mov al, bl
0030++ 0899 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 089A 7E          	dec c
0032++ 089B 7F          	dec d
0033++ 089C C2 00 00    	cmp c, 0
0034++ 089F C7 95 08    	jne strrev_L0
0035++ 08A2             strrev_end:
0036++ 08A2 4C          	popa
0037++ 08A3 09          	ret
0038++ 08A4             	
0039++ 08A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 08A4             ; strchr
0041++ 08A4             ; search string in D for char in AL
0042++ 08A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 08A4             strchr:
0044++ 08A4             strchr_L0:
0045++ 08A4 32          	mov bl, [d]
0046++ 08A5 C1 00       	cmp bl, 0
0047++ 08A7 C6 B2 08    	je strchr_end
0048++ 08AA BA          	cmp al, bl
0049++ 08AB C6 B2 08    	je strchr_end
0050++ 08AE 79          	inc d
0051++ 08AF 0A A4 08    	jmp strchr_L0
0052++ 08B2             strchr_end:
0053++ 08B2 1B          	mov al, bl
0054++ 08B3 09          	ret
0055++ 08B4             
0056++ 08B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 08B4             ; strstr
0058++ 08B4             ; find sub-string
0059++ 08B4             ; str1 in SI
0060++ 08B4             ; str2 in DI
0061++ 08B4             ; SI points to end of source string
0062++ 08B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 08B4             strstr:
0064++ 08B4 DB          	push al
0065++ 08B5 DA          	push d
0066++ 08B6 E3          	push di
0067++ 08B7             strstr_loop:
0068++ 08B7 F3          	cmpsb					; compare a byte of the strings
0069++ 08B8 C7 C3 08    	jne strstr_ret
0070++ 08BB FC 00 00    	lea d, [di + 0]
0071++ 08BE BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 08C0 C7 B7 08    	jne strstr_loop				; equal chars but not at end
0073++ 08C3             strstr_ret:
0074++ 08C3 F0          	pop di
0075++ 08C4 E7          	pop d
0076++ 08C5 E8          	pop al
0077++ 08C6 09          	ret
0078++ 08C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 08C7             ; length of null terminated string
0080++ 08C7             ; result in C
0081++ 08C7             ; pointer in D
0082++ 08C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 08C7             strlen:
0084++ 08C7 DA          	push d
0085++ 08C8 38 00 00    	mov c, 0
0086++ 08CB             strlen_L1:
0087++ 08CB BD 00       	cmp byte [d], 0
0088++ 08CD C6 D5 08    	je strlen_ret
0089++ 08D0 79          	inc d
0090++ 08D1 78          	inc c
0091++ 08D2 0A CB 08    	jmp strlen_L1
0092++ 08D5             strlen_ret:
0093++ 08D5 E7          	pop d
0094++ 08D6 09          	ret
0095++ 08D7             
0096++ 08D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 08D7             ; STRCMP
0098++ 08D7             ; compare two strings
0099++ 08D7             ; str1 in SI
0100++ 08D7             ; str2 in DI
0101++ 08D7             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 08D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 08D7             strcmp:
0104++ 08D7 DB          	push al
0105++ 08D8 DA          	push d
0106++ 08D9 E3          	push di
0107++ 08DA E2          	push si
0108++ 08DB             strcmp_loop:
0109++ 08DB F3          	cmpsb					; compare a byte of the strings
0110++ 08DC C7 E7 08    	jne strcmp_ret
0111++ 08DF FB FF FF    	lea d, [si +- 1]
0112++ 08E2 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 08E4 C7 DB 08    	jne strcmp_loop				; equal chars but not at end
0114++ 08E7             strcmp_ret:
0115++ 08E7 EF          	pop si
0116++ 08E8 F0          	pop di
0117++ 08E9 E7          	pop d
0118++ 08EA E8          	pop al
0119++ 08EB 09          	ret
0120++ 08EC             
0121++ 08EC             
0122++ 08EC             ; STRCPY
0123++ 08EC             ; copy null terminated string from SI to DI
0124++ 08EC             ; source in SI
0125++ 08EC             ; destination in DI
0126++ 08EC             strcpy:
0127++ 08EC E2          	push si
0128++ 08ED E3          	push di
0129++ 08EE DB          	push al
0130++ 08EF             strcpy_L1:
0131++ 08EF F6          	lodsb
0132++ 08F0 F7          	stosb
0133++ 08F1 B9 00       	cmp al, 0
0134++ 08F3 C7 EF 08    	jne strcpy_L1
0135++ 08F6             strcpy_end:
0136++ 08F6 E8          	pop al
0137++ 08F7 F0          	pop di
0138++ 08F8 EF          	pop si
0139++ 08F9 09          	ret
0140++ 08FA             
0141++ 08FA             ; STRCAT
0142++ 08FA             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 08FA             ; source in SI
0144++ 08FA             ; destination in DI
0145++ 08FA             strcat:
0146++ 08FA E2          	push si
0147++ 08FB E3          	push di
0148++ 08FC D7          	push a
0149++ 08FD DA          	push d
0150++ 08FE 50          	mov a, di
0151++ 08FF 3C          	mov d, a
0152++ 0900             strcat_goto_end_L1:
0153++ 0900 BD 00       	cmp byte[d], 0
0154++ 0902 C6 09 09    	je strcat_start
0155++ 0905 79          	inc d
0156++ 0906 0A 00 09    	jmp strcat_goto_end_L1
0157++ 0909             strcat_start:
0158++ 0909 FD 50       	mov di, d
0159++ 090B             strcat_L1:
0160++ 090B F6          	lodsb
0161++ 090C F7          	stosb
0162++ 090D B9 00       	cmp al, 0
0163++ 090F C7 0B 09    	jne strcat_L1
0164++ 0912             strcat_end:
0165++ 0912 E7          	pop d
0166++ 0913 E4          	pop a
0167++ 0914 F0          	pop di
0168++ 0915 EF          	pop si
0169++ 0916 09          	ret
0005+  0917             
0006+  0917 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  091B 34 35 36 37 
0006+  091F 38 39 41 42 
0006+  0923 43 44 45 46 
0007+  0927 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  092B 1B 5B 48 00 
0008+  092F             
0009+  092F 01 00       table_power:.dw 1
0010+  0931 0A 00       			.dw 10
0011+  0933 64 00       			.dw 100
0012+  0935 E8 03       			.dw 1000
0013+  0937 10 27       			.dw 10000
0014+  0939             
0015+  0939             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0939             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0939             ; ASCII in BL
0018+  0939             ; result in AL
0019+  0939             ; ascii for F = 0100 0110
0020+  0939             ; ascii for 9 = 0011 1001
0021+  0939             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0939             hex_ascii_encode:
0023+  0939 1B          	mov al, bl
0024+  093A 93 40       	test al, $40				; test if letter or number
0025+  093C C7 42 09    	jnz hex_letter
0026+  093F 87 0F       	and al, $0F				; get number
0027+  0941 09          	ret
0028+  0942             hex_letter:
0029+  0942 87 0F       	and al, $0F				; get letter
0030+  0944 6A 09       	add al, 9
0031+  0946 09          	ret
0032+  0947             
0033+  0947             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0947             ; ATOI
0035+  0947             ; 2 letter hex string in B
0036+  0947             ; 8bit integer returned in AL
0037+  0947             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0947             atoi:
0039+  0947 D8          	push b
0040+  0948 07 39 09    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  094B 30          	mov bl, bh
0042+  094C DB          	push al					; save a
0043+  094D 07 39 09    	call hex_ascii_encode
0044+  0950 EA          	pop bl	
0045+  0951 FD 9E 04    	shl al, 4
0046+  0954 8C          	or al, bl
0047+  0955 E5          	pop b
0048+  0956 09          	ret	
0049+  0957             
0050+  0957             
0051+  0957             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0957             ; printf
0053+  0957             ; no need for explanations!
0054+  0957             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0957             printf:
0056+  0957 09          	ret
0057+  0958             
0058+  0958             
0059+  0958             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0958             ; scanf
0061+  0958             ; no need for explanations!
0062+  0958             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0958             scanf:
0064+  0958 09          	ret
0065+  0959             
0066+  0959             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0959             ; ITOA
0068+  0959             ; 8bit value in BL
0069+  0959             ; 2 byte ASCII result in A
0070+  0959             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0959             itoa:
0072+  0959 DA          	push d
0073+  095A D8          	push b
0074+  095B A7 00       	mov bh, 0
0075+  095D FD A4 04    	shr bl, 4	
0076+  0960 74          	mov d, b
0077+  0961 1F 17 09    	mov al, [d + s_hex_digits]
0078+  0964 23          	mov ah, al
0079+  0965             	
0080+  0965 E5          	pop b
0081+  0966 D8          	push b
0082+  0967 A7 00       	mov bh, 0
0083+  0969 FD 87 0F    	and bl, $0F
0084+  096C 74          	mov d, b
0085+  096D 1F 17 09    	mov al, [d + s_hex_digits]
0086+  0970 E5          	pop b
0087+  0971 E7          	pop d
0088+  0972 09          	ret
0089+  0973             
0090+  0973             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0973             ; HEX STRING TO BINARY
0092+  0973             ; di = destination address
0093+  0973             ; si = source
0094+  0973             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0973             hex_to_int:
0096+  0973             hex_to_int_L1:
0097+  0973 F6          	lodsb					; load from [SI] to AL
0098+  0974 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0976 C6 83 09    	jz hex_to_int_ret
0100+  0979 36          	mov bh, al
0101+  097A F6          	lodsb
0102+  097B 2F          	mov bl, al
0103+  097C 07 47 09    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  097F F7          	stosb					; store AL to [DI]
0105+  0980 0A 73 09    	jmp hex_to_int_L1
0106+  0983             hex_to_int_ret:
0107+  0983 09          	ret		
0108+  0984             
0109+  0984             
0110+  0984             
0111+  0984             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0984             ; GETCHAR
0113+  0984             ; char in ah
0114+  0984             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0984             getchar:
0116+  0984 DB          	push al
0117+  0985             getchar_retry:
0118+  0985 FD 0C       	sti
0119+  0987 19 01       	mov al, 1
0120+  0989 05 03       	syscall sys_io			; receive in AH
0121+  098B B9 00       	cmp al, 0			; check if any char was receive
0122+  098D C6 85 09    	je getchar_retry
0123+  0990 E8          	pop al
0124+  0991 09          	ret
0125+  0992             
0126+  0992             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0992             ; PUTCHAR
0128+  0992             ; char in ah
0129+  0992             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0992             putchar:
0131+  0992 D7          	push a
0132+  0993 19 00       	mov al, 0
0133+  0995 05 03       	syscall sys_io			; char in AH
0134+  0997 E4          	pop a
0135+  0998 09          	ret
0136+  0999             
0137+  0999             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0999             ;; INPUT A STRING
0139+  0999             ;; terminates with null
0140+  0999             ;; pointer in D
0141+  0999             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0999             gets:
0143+  0999 D7          	push a
0144+  099A DA          	push d
0145+  099B             gets_loop:
0146+  099B FD 0C       	sti
0147+  099D 19 01       	mov al, 1
0148+  099F 05 03       	syscall sys_io			; receive in AH
0149+  09A1 B9 00       	cmp al, 0				; check error code (AL)
0150+  09A3 C6 9B 09    	je gets_loop			; if no char received, retry
0151+  09A6             
0152+  09A6 76 1B       	cmp ah, 27
0153+  09A8 C6 C9 09    	je gets_telnet_escape
0154+  09AB 76 0A       	cmp ah, $0A				; LF
0155+  09AD C6 22 0A    	je gets_end
0156+  09B0 76 0D       	cmp ah, $0D				; CR
0157+  09B2 C6 22 0A    	je gets_end
0158+  09B5 76 5C       	cmp ah, $5C				; '\\'
0159+  09B7 C6 F9 09    	je gets_escape
0160+  09BA             	
0161+  09BA 76 08       	cmp ah, $08			; check for backspace
0162+  09BC C6 C5 09    	je gets_backspace
0163+  09BF             
0164+  09BF 1A          	mov al, ah
0165+  09C0 3E          	mov [d], al
0166+  09C1 79          	inc d
0167+  09C2 0A 9B 09    	jmp gets_loop
0168+  09C5             gets_backspace:
0169+  09C5 7F          	dec d
0170+  09C6 0A 9B 09    	jmp gets_loop
0171+  09C9             gets_telnet_escape:
0172+  09C9 FD 0C       	sti
0173+  09CB 19 01       	mov al, 1
0174+  09CD 05 03       	syscall sys_io				; receive in AH without echo
0175+  09CF B9 00       	cmp al, 0					; check error code (AL)
0176+  09D1 C6 C9 09    	je gets_telnet_escape		; if no char received, retry
0177+  09D4 76 5B       	cmp ah, '['
0178+  09D6 C7 9B 09    	jne gets_loop
0179+  09D9             gets_telnet_escape_phase2:
0180+  09D9 FD 0C       	sti
0181+  09DB 19 01       	mov al, 1
0182+  09DD 05 03       	syscall sys_io					; receive in AH without echo
0183+  09DF B9 00       	cmp al, 0						; check error code (AL)
0184+  09E1 C6 D9 09    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  09E4 76 44       	cmp ah, 'D'
0186+  09E6 C6 F1 09    	je gets_left_arrow
0187+  09E9 76 43       	cmp ah, 'C'
0188+  09EB C6 F5 09    	je gets_right_arrow
0189+  09EE 0A 9B 09    	jmp gets_loop
0190+  09F1             gets_left_arrow:
0191+  09F1 7F          	dec d
0192+  09F2 0A 9B 09    	jmp gets_loop
0193+  09F5             gets_right_arrow:
0194+  09F5 79          	inc d
0195+  09F6 0A 9B 09    	jmp gets_loop
0196+  09F9             gets_escape:
0197+  09F9 FD 0C       	sti
0198+  09FB 19 01       	mov al, 1
0199+  09FD 05 03       	syscall sys_io			; receive in AH
0200+  09FF B9 00       	cmp al, 0				; check error code (AL)
0201+  0A01 C6 F9 09    	je gets_escape			; if no char received, retry
0202+  0A04 76 6E       	cmp ah, 'n'
0203+  0A06 C6 14 0A    	je gets_LF
0204+  0A09 76 72       	cmp ah, 'r'
0205+  0A0B C6 1B 0A    	je gets_CR
0206+  0A0E 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0A0F 3E          	mov [d], al
0208+  0A10 79          	inc d
0209+  0A11 0A 9B 09    	jmp gets_loop
0210+  0A14             gets_LF:
0211+  0A14 19 0A       	mov al, $0A
0212+  0A16 3E          	mov [d], al
0213+  0A17 79          	inc d
0214+  0A18 0A 9B 09    	jmp gets_loop
0215+  0A1B             gets_CR:
0216+  0A1B 19 0D       	mov al, $0D
0217+  0A1D 3E          	mov [d], al
0218+  0A1E 79          	inc d
0219+  0A1F 0A 9B 09    	jmp gets_loop
0220+  0A22             gets_end:
0221+  0A22 19 00       	mov al, 0
0222+  0A24 3E          	mov [d], al				; terminate string
0223+  0A25 E7          	pop d
0224+  0A26 E4          	pop a
0225+  0A27 09          	ret
0226+  0A28             
0227+  0A28             
0228+  0A28             
0229+  0A28             
0230+  0A28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0A28             ;; INPUT TEXT
0232+  0A28             ;; terminated with CTRL+D
0233+  0A28             ;; pointer in D
0234+  0A28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0A28             gettxt:
0236+  0A28 D7          	push a
0237+  0A29 DA          	push d
0238+  0A2A             gettxt_loop:
0239+  0A2A 19 01       	mov al, 1
0240+  0A2C 05 03       	syscall sys_io			; receive in AH
0241+  0A2E B9 00       	cmp al, 0				; check error code (AL)
0242+  0A30 C6 2A 0A    	je gettxt_loop		; if no char received, retry
0243+  0A33 76 04       	cmp ah, 4			; EOT
0244+  0A35 C6 73 0A    	je gettxt_end
0245+  0A38 76 08       	cmp ah, $08			; check for backspace
0246+  0A3A C6 6F 0A    	je gettxt_backspace
0247+  0A3D 76 5C       	cmp ah, $5C				; '\\'
0248+  0A3F C6 48 0A    	je gettxt_escape
0249+  0A42 1A          	mov al, ah
0250+  0A43 3E          	mov [d], al
0251+  0A44 79          	inc d
0252+  0A45 0A 2A 0A    	jmp gettxt_loop
0253+  0A48             gettxt_escape:
0254+  0A48 19 01       	mov al, 1
0255+  0A4A 05 03       	syscall sys_io			; receive in AH
0256+  0A4C B9 00       	cmp al, 0				; check error code (AL)
0257+  0A4E C6 48 0A    	je gettxt_escape		; if no char received, retry
0258+  0A51 76 6E       	cmp ah, 'n'
0259+  0A53 C6 61 0A    	je gettxt_LF
0260+  0A56 76 72       	cmp ah, 'r'
0261+  0A58 C6 68 0A    	je gettxt_CR
0262+  0A5B 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0A5C 3E          	mov [d], al
0264+  0A5D 79          	inc d
0265+  0A5E 0A 2A 0A    	jmp gettxt_loop
0266+  0A61             gettxt_LF:
0267+  0A61 19 0A       	mov al, $0A
0268+  0A63 3E          	mov [d], al
0269+  0A64 79          	inc d
0270+  0A65 0A 2A 0A    	jmp gettxt_loop
0271+  0A68             gettxt_CR:
0272+  0A68 19 0D       	mov al, $0D
0273+  0A6A 3E          	mov [d], al
0274+  0A6B 79          	inc d
0275+  0A6C 0A 2A 0A    	jmp gettxt_loop
0276+  0A6F             gettxt_backspace:
0277+  0A6F 7F          	dec d
0278+  0A70 0A 2A 0A    	jmp gettxt_loop
0279+  0A73             gettxt_end:
0280+  0A73 19 00       	mov al, 0
0281+  0A75 3E          	mov [d], al				; terminate string
0282+  0A76 E7          	pop d
0283+  0A77 E4          	pop a
0284+  0A78 09          	ret
0285+  0A79             
0286+  0A79             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0A79             ; PRINT NEW LINE
0288+  0A79             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0A79             printnl:
0290+  0A79 D7          	push a
0291+  0A7A 10 00 0A    	mov a, $0A00
0292+  0A7D 05 03       	syscall sys_io
0293+  0A7F 10 00 0D    	mov a, $0D00
0294+  0A82 05 03       	syscall sys_io
0295+  0A84 E4          	pop a
0296+  0A85 09          	ret
0297+  0A86             
0298+  0A86             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0A86             ; strtoint
0300+  0A86             ; 4 digit hex string number in d
0301+  0A86             ; integer returned in A
0302+  0A86             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0A86             strtointx:
0304+  0A86 D8          	push b
0305+  0A87 32          	mov bl, [d]
0306+  0A88 37          	mov bh, bl
0307+  0A89 33 01 00    	mov bl, [d + 1]
0308+  0A8C 07 47 09    	call atoi				; convert to int in AL
0309+  0A8F 23          	mov ah, al				; move to AH
0310+  0A90 33 02 00    	mov bl, [d + 2]
0311+  0A93 37          	mov bh, bl
0312+  0A94 33 03 00    	mov bl, [d + 3]
0313+  0A97 07 47 09    	call atoi				; convert to int in AL
0314+  0A9A E5          	pop b
0315+  0A9B 09          	ret
0316+  0A9C             
0317+  0A9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0A9C             ; strtoint
0319+  0A9C             ; 5 digit base10 string number in d
0320+  0A9C             ; integer returned in A
0321+  0A9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0A9C             strtoint:
0323+  0A9C E2          	push si
0324+  0A9D D8          	push b
0325+  0A9E D9          	push c
0326+  0A9F DA          	push d
0327+  0AA0 07 C7 08    	call strlen			; get string length in C
0328+  0AA3 7E          	dec c
0329+  0AA4 FD 4E       	mov si, d
0330+  0AA6 12          	mov a, c
0331+  0AA7 FD 99       	shl a
0332+  0AA9 3B 2F 09    	mov d, table_power
0333+  0AAC 59          	add d, a
0334+  0AAD 38 00 00    	mov c, 0
0335+  0AB0             strtoint_L0:
0336+  0AB0 F6          	lodsb			; load ASCII to al
0337+  0AB1 B9 00       	cmp al, 0
0338+  0AB3 C6 C6 0A    	je strtoint_end
0339+  0AB6 6F 30       	sub al, $30		; make into integer
0340+  0AB8 22 00       	mov ah, 0
0341+  0ABA 2A          	mov b, [d]
0342+  0ABB AC          	mul a, b			; result in B since it fits in 16bits
0343+  0ABC 11          	mov a, b
0344+  0ABD 28          	mov b, c
0345+  0ABE 54          	add a, b
0346+  0ABF 39          	mov c, a
0347+  0AC0 63 02 00    	sub d, 2
0348+  0AC3 0A B0 0A    	jmp strtoint_L0
0349+  0AC6             strtoint_end:
0350+  0AC6 12          	mov a, c
0351+  0AC7 E7          	pop d
0352+  0AC8 E6          	pop c
0353+  0AC9 E5          	pop b
0354+  0ACA EF          	pop si
0355+  0ACB 09          	ret
0356+  0ACC             
0357+  0ACC             
0358+  0ACC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0ACC             ; PRINT NULL TERMINATED STRING
0360+  0ACC             ; pointer in D
0361+  0ACC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0ACC             puts:
0363+  0ACC D7          	push a
0364+  0ACD DA          	push d
0365+  0ACE             puts_L1:
0366+  0ACE 1E          	mov al, [d]
0367+  0ACF B9 00       	cmp al, 0
0368+  0AD1 C6 DD 0A    	jz puts_END
0369+  0AD4 23          	mov ah, al
0370+  0AD5 19 00       	mov al, 0
0371+  0AD7 05 03       	syscall sys_io
0372+  0AD9 79          	inc d
0373+  0ADA 0A CE 0A    	jmp puts_L1
0374+  0ADD             puts_END:
0375+  0ADD E7          	pop d
0376+  0ADE E4          	pop a
0377+  0ADF 09          	ret
0378+  0AE0             
0379+  0AE0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0AE0             ; PRINT N SIZE STRING
0381+  0AE0             ; pointer in D
0382+  0AE0             ; size in C
0383+  0AE0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0AE0             putsn:
0385+  0AE0 DB          	push al
0386+  0AE1 DA          	push d
0387+  0AE2 D9          	push c
0388+  0AE3             putsn_L0:
0389+  0AE3 1E          	mov al, [d]
0390+  0AE4 23          	mov ah, al
0391+  0AE5 19 00       	mov al, 0
0392+  0AE7 05 03       	syscall sys_io
0393+  0AE9 79          	inc d
0394+  0AEA 7E          	dec c	
0395+  0AEB C2 00 00    	cmp c, 0
0396+  0AEE C7 E3 0A    	jne putsn_L0
0397+  0AF1             putsn_end:
0398+  0AF1 E6          	pop c
0399+  0AF2 E7          	pop d
0400+  0AF3 E8          	pop al
0401+  0AF4 09          	ret
0402+  0AF5             
0403+  0AF5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0AF5             ; print 16bit decimal number
0405+  0AF5             ; input number in A
0406+  0AF5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0AF5             print_u16d:
0408+  0AF5 D7          	push a
0409+  0AF6 D8          	push b
0410+  0AF7 26 10 27    	mov b, 10000
0411+  0AFA AE          	div a, b			; get 10000 coeff.
0412+  0AFB 07 21 0B    	call print_number
0413+  0AFE 11          	mov a, b
0414+  0AFF 26 E8 03    	mov b, 1000
0415+  0B02 AE          	div a, b			; get 10000 coeff.
0416+  0B03 07 21 0B    	call print_number
0417+  0B06 11          	mov a, b
0418+  0B07 26 64 00    	mov b, 100
0419+  0B0A AE          	div a, b
0420+  0B0B 07 21 0B    	call print_number
0421+  0B0E 11          	mov a, b
0422+  0B0F 26 0A 00    	mov b, 10
0423+  0B12 AE          	div a, b
0424+  0B13 07 21 0B    	call print_number
0425+  0B16 11          	mov a, b
0426+  0B17 6A 30       	add al, $30
0427+  0B19 23          	mov ah, al
0428+  0B1A 19 00       	mov al, 0
0429+  0B1C 05 03       	syscall sys_io	; print coeff
0430+  0B1E E5          	pop b
0431+  0B1F E4          	pop a
0432+  0B20 09          	ret
0433+  0B21             
0434+  0B21             
0435+  0B21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0B21             ; if A == 0, print space
0437+  0B21             ; else print A
0438+  0B21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  0B21             print_number:
0440+  0B21 6A 30       	add al, $30
0441+  0B23 23          	mov ah, al
0442+  0B24 07 92 09    	call putchar
0443+  0B27 09          	ret
0444+  0B28             
0445+  0B28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0B28             ; PRINT 16BIT HEX INTEGER
0447+  0B28             ; integer value in reg B
0448+  0B28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0B28             print_u16x:
0450+  0B28 D7          	push a
0451+  0B29 D8          	push b
0452+  0B2A DD          	push bl
0453+  0B2B 30          	mov bl, bh
0454+  0B2C 07 59 09    	call itoa				; convert bh to char in A
0455+  0B2F 2F          	mov bl, al				; save al
0456+  0B30 19 00       	mov al, 0
0457+  0B32 05 03       	syscall sys_io				; display AH
0458+  0B34 24          	mov ah, bl				; retrieve al
0459+  0B35 19 00       	mov al, 0
0460+  0B37 05 03       	syscall sys_io				; display AL
0461+  0B39             
0462+  0B39 EA          	pop bl
0463+  0B3A 07 59 09    	call itoa				; convert bh to char in A
0464+  0B3D 2F          	mov bl, al				; save al
0465+  0B3E 19 00       	mov al, 0
0466+  0B40 05 03       	syscall sys_io				; display AH
0467+  0B42 24          	mov ah, bl				; retrieve al
0468+  0B43 19 00       	mov al, 0
0469+  0B45 05 03       	syscall sys_io				; display AL
0470+  0B47             
0471+  0B47 E5          	pop b
0472+  0B48 E4          	pop a
0473+  0B49 09          	ret
0474+  0B4A             
0475+  0B4A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0B4A             ; INPUT 16BIT HEX INTEGER
0477+  0B4A             ; read 16bit integer into A
0478+  0B4A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0B4A             scan_u16x:
0480+  0B4A F8 10 00    	enter 16
0481+  0B4D D8          	push b
0482+  0B4E DA          	push d
0483+  0B4F             
0484+  0B4F FA F1 FF    	lea d, [bp + -15]
0485+  0B52 07 99 09    	call gets				; get number
0486+  0B55             
0487+  0B55 32          	mov bl, [d]
0488+  0B56 37          	mov bh, bl
0489+  0B57 33 01 00    	mov bl, [d + 1]
0490+  0B5A 07 47 09    	call atoi				; convert to int in AL
0491+  0B5D 23          	mov ah, al				; move to AH
0492+  0B5E             
0493+  0B5E 33 02 00    	mov bl, [d + 2]
0494+  0B61 37          	mov bh, bl
0495+  0B62 33 03 00    	mov bl, [d + 3]
0496+  0B65 07 47 09    	call atoi				; convert to int in AL
0497+  0B68             
0498+  0B68 E7          	pop d
0499+  0B69 E5          	pop b
0500+  0B6A F9          	leave
0501+  0B6B 09          	ret
0502+  0B6C             
0503+  0B6C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0B6C             ; PRINT 8bit HEX INTEGER
0505+  0B6C             ; integer value in reg bl
0506+  0B6C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0B6C             print_u8x:
0508+  0B6C D7          	push a
0509+  0B6D DD          	push bl
0510+  0B6E             
0511+  0B6E 07 59 09    	call itoa				; convert bl to char in A
0512+  0B71 2F          	mov bl, al				; save al
0513+  0B72 19 00       	mov al, 0
0514+  0B74 05 03       	syscall sys_io				; display AH
0515+  0B76 24          	mov ah, bl				; retrieve al
0516+  0B77 19 00       	mov al, 0
0517+  0B79 05 03       	syscall sys_io				; display AL
0518+  0B7B             
0519+  0B7B EA          	pop bl
0520+  0B7C E4          	pop a
0521+  0B7D 09          	ret
0522+  0B7E             
0523+  0B7E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0B7E             ; print 8bit decimal unsigned number
0525+  0B7E             ; input number in AL
0526+  0B7E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0B7E             print_u8d:
0528+  0B7E D7          	push a
0529+  0B7F D8          	push b
0530+  0B80             
0531+  0B80 22 00       	mov ah, 0
0532+  0B82 26 64 00    	mov b, 100
0533+  0B85 AE          	div a, b
0534+  0B86 D8          	push b			; save remainder
0535+  0B87 B9 00       	cmp al, 0
0536+  0B89 C6 93 0B    	je skip100
0537+  0B8C 6A 30       	add al, $30
0538+  0B8E 23          	mov ah, al
0539+  0B8F 19 00       	mov al, 0
0540+  0B91 05 03       	syscall sys_io	; print coeff
0541+  0B93             skip100:
0542+  0B93 E4          	pop a
0543+  0B94 22 00       	mov ah, 0
0544+  0B96 26 0A 00    	mov b, 10
0545+  0B99 AE          	div a, b
0546+  0B9A D8          	push b			; save remainder
0547+  0B9B B9 00       	cmp al, 0
0548+  0B9D C6 A7 0B    	je skip10
0549+  0BA0 6A 30       	add al, $30
0550+  0BA2 23          	mov ah, al
0551+  0BA3 19 00       	mov al, 0
0552+  0BA5 05 03       	syscall sys_io	; print coeff
0553+  0BA7             skip10:
0554+  0BA7 E4          	pop a
0555+  0BA8 1B          	mov al, bl
0556+  0BA9 6A 30       	add al, $30
0557+  0BAB 23          	mov ah, al
0558+  0BAC 19 00       	mov al, 0
0559+  0BAE 05 03       	syscall sys_io	; print coeff
0560+  0BB0 E5          	pop b
0561+  0BB1 E4          	pop a
0562+  0BB2 09          	ret
0563+  0BB3             
0564+  0BB3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0BB3             ; INPUT 8BIT HEX INTEGER
0566+  0BB3             ; read 8bit integer into AL
0567+  0BB3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0BB3             scan_u8x:
0569+  0BB3 F8 04 00    	enter 4
0570+  0BB6 D8          	push b
0571+  0BB7 DA          	push d
0572+  0BB8             
0573+  0BB8 FA FD FF    	lea d, [bp + -3]
0574+  0BBB 07 99 09    	call gets				; get number
0575+  0BBE             
0576+  0BBE 32          	mov bl, [d]
0577+  0BBF 37          	mov bh, bl
0578+  0BC0 33 01 00    	mov bl, [d + 1]
0579+  0BC3 07 47 09    	call atoi				; convert to int in AL
0580+  0BC6             
0581+  0BC6 E7          	pop d
0582+  0BC7 E5          	pop b
0583+  0BC8 F9          	leave
0584+  0BC9 09          	ret
0585+  0BCA             
0586+  0BCA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0BCA             ; input decimal number
0588+  0BCA             ; result in A
0589+  0BCA             ; 655'\0'
0590+  0BCA             ; low--------high
0591+  0BCA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  0BCA             scan_u16d:
0593+  0BCA F8 08 00    	enter 8
0594+  0BCD E2          	push si
0595+  0BCE D8          	push b
0596+  0BCF D9          	push c
0597+  0BD0 DA          	push d
0598+  0BD1 FA F9 FF    	lea d, [bp +- 7]
0599+  0BD4 07 99 09    	call gets
0600+  0BD7 07 C7 08    	call strlen			; get string length in C
0601+  0BDA 7E          	dec c
0602+  0BDB FD 4E       	mov si, d
0603+  0BDD 12          	mov a, c
0604+  0BDE FD 99       	shl a
0605+  0BE0 3B 2F 09    	mov d, table_power
0606+  0BE3 59          	add d, a
0607+  0BE4 38 00 00    	mov c, 0
0608+  0BE7             mul_loop:
0609+  0BE7 F6          	lodsb			; load ASCII to al
0610+  0BE8 B9 00       	cmp al, 0
0611+  0BEA C6 FD 0B    	je mul_exit
0612+  0BED 6F 30       	sub al, $30		; make into integer
0613+  0BEF 22 00       	mov ah, 0
0614+  0BF1 2A          	mov b, [d]
0615+  0BF2 AC          	mul a, b			; result in B since it fits in 16bits
0616+  0BF3 11          	mov a, b
0617+  0BF4 28          	mov b, c
0618+  0BF5 54          	add a, b
0619+  0BF6 39          	mov c, a
0620+  0BF7 63 02 00    	sub d, 2
0621+  0BFA 0A E7 0B    	jmp mul_loop
0622+  0BFD             mul_exit:
0623+  0BFD 12          	mov a, c
0624+  0BFE E7          	pop d
0625+  0BFF E6          	pop c
0626+  0C00 E5          	pop b
0627+  0C01 EF          	pop si
0628+  0C02 F9          	leave
0629+  0C03 09          	ret
0717   0C04             ; --- END INCLUDE BLOCK
0718   0C04             
0719   0C04             
0720   0C04             .end
tasm: Number of errors = 0
