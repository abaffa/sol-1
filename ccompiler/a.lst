0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 26 37 00      mov b, 55
0012   0408 D7            push a
0013   0409 11            mov a, b
0014   040A 45 FF FF      mov [bp + -1], a ; i
0015   040D E4            pop a
0016   040E 2C FF FF      mov b, [bp + -1] ; i
0017   0411 FD AB         swp b
0018   0413 D8            push b
0019   0414 07 76 04      call print_num
0020   0417 51 02 00      add sp, 2
0021   041A F9            leave
0022   041B 05 0B         syscall sys_terminate_proc
0023   041D             
0024   041D             _gets:
0025   041D D2            push bp
0026   041E 9B            mov bp, sp
0027   041F             
0028   041F             ; --- BEGIN INLINE ASM BLOCK
0029   041F 17 05 00      mov a, [bp + 5]
0030   0422 3C            mov d, a
0031   0423 07 BA 06      call gets
0032   0426             ; --- END INLINE ASM BLOCK
0033   0426             
0034   0426 F9            leave
0035   0427 09            ret
0036   0428             
0037   0428             _strlen:
0038   0428 D2            push bp
0039   0429 9B            mov bp, sp
0040   042A 52 02 00      sub sp, 2 ; length
0041   042D 26 00 00      mov b, 0
0042   0430 D7            push a
0043   0431 11            mov a, b
0044   0432 45 FF FF      mov [bp + -1], a ; length
0045   0435 E4            pop a
0046   0436             _while1_cond:
0047   0436 FA 05 00      lea d, [bp + 5] ; str
0048   0439 2A            mov b, [d]
0049   043A D7            push a
0050   043B 74            mov d, b
0051   043C DA            push d
0052   043D 2C FF FF      mov b, [bp + -1] ; length
0053   0440 E7            pop d
0054   0441 10 01 00      mov a, 1
0055   0444 AC            mul a, b
0056   0445 5A            add d, b
0057   0446 E4            pop a
0058   0447 32            mov bl, [d]
0059   0448 A7 00         mov bh, 0
0060   044A D7            push a
0061   044B 11            mov a, b
0062   044C 26 00 00      mov b, 0
0063   044F B0            cmp a, b
0064   0450 0E            lodflgs
0065   0451 87 01         and al, %00000001
0066   0453 8F 01         xor al, %00000001 ; !=
0067   0455 22 00         mov ah, 0
0068   0457 27            mov b, a
0069   0458 E4            pop a
0070   0459 C0 00 00      cmp b, 0
0071   045C C6 71 04      je _while1_exit
0072   045F             _while1_block:
0073   045F 2C FF FF      mov b, [bp + -1] ; length
0074   0462 D7            push a
0075   0463 11            mov a, b
0076   0464 FD 77         inc b
0077   0466 D7            push a
0078   0467 11            mov a, b
0079   0468 45 FF FF      mov [bp + -1], a ; length
0080   046B E4            pop a
0081   046C 27            mov b, a
0082   046D E4            pop a
0083   046E 0A 36 04      jmp _while1_cond
0084   0471             _while1_exit:
0085   0471 2C FF FF      mov b, [bp + -1] ; length
0086   0474 F9            leave
0087   0475 09            ret
0088   0476             
0089   0476             print_num:
0090   0476 D2            push bp
0091   0477 9B            mov bp, sp
0092   0478 52 05 00      sub sp, 5 ; digits
0093   047B 52 02 00      sub sp, 2 ; i
0094   047E 26 00 00      mov b, 0
0095   0481 D7            push a
0096   0482 11            mov a, b
0097   0483 45 FA FF      mov [bp + -6], a ; i
0098   0486 E4            pop a
0099   0487             _if2_cond:
0100   0487 2C 05 00      mov b, [bp + 5] ; num
0101   048A D7            push a
0102   048B 11            mov a, b
0103   048C 26 00 00      mov b, 0
0104   048F B0            cmp a, b
0105   0490 0E            lodflgs
0106   0491 87 01         and al, %00000001 ; ==
0107   0493 22 00         mov ah, 0
0108   0495 27            mov b, a
0109   0496 E4            pop a
0110   0497 C0 00 00      cmp b, 0
0111   049A C6 AC 04      je _if2_exit
0112   049D             _if2_true:
0113   049D 26 30 00      mov b, $30
0114   04A0 DD            push bl
0115   04A1 07 7B 05      call _putchar
0116   04A4 51 01 00      add sp, 1
0117   04A7 F9            leave
0118   04A8 09            ret
0119   04A9 0A AC 04      jmp _if2_exit
0120   04AC             _if2_exit:
0121   04AC             _while3_cond:
0122   04AC 2C 05 00      mov b, [bp + 5] ; num
0123   04AF D7            push a
0124   04B0 11            mov a, b
0125   04B1 26 00 00      mov b, 0
0126   04B4 B0            cmp a, b
0127   04B5 0E            lodflgs
0128   04B6 2F            mov bl, al
0129   04B7 FD 78         mov g, a
0130   04B9 FD A2 03      shr al, 3
0131   04BC FD A4 02      shr bl, 2
0132   04BF FD 87 01      and bl, %00000001
0133   04C2 90            xor al, bl
0134   04C3 FD 27         mov b, g
0135   04C5 FD 87 01      and bl, %00000001
0136   04C8 8C            or al, bl
0137   04C9 8F 01         xor al, %00000001 ; > (signed)
0138   04CB 22 00         mov ah, 0
0139   04CD 27            mov b, a
0140   04CE E4            pop a
0141   04CF C0 00 00      cmp b, 0
0142   04D2 C6 23 05      je _while3_exit
0143   04D5             _while3_block:
0144   04D5 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0145   04D8 2D            mov b, d
0146   04D9 D7            push a
0147   04DA 74            mov d, b
0148   04DB DA            push d
0149   04DC 2C FA FF      mov b, [bp + -6] ; i
0150   04DF E7            pop d
0151   04E0 10 01 00      mov a, 1
0152   04E3 AC            mul a, b
0153   04E4 5A            add d, b
0154   04E5 E4            pop a
0155   04E6 DA            push d
0156   04E7 26 30 00      mov b, $30
0157   04EA D7            push a
0158   04EB 11            mov a, b
0159   04EC 2C 05 00      mov b, [bp + 5] ; num
0160   04EF D7            push a
0161   04F0 11            mov a, b
0162   04F1 26 0A 00      mov b, 10
0163   04F4 AE            div a, b
0164   04F5 E4            pop a
0165   04F6 54            add a, b
0166   04F7 27            mov b, a
0167   04F8 E4            pop a
0168   04F9 E7            pop d
0169   04FA FD 3E         mov [d], bl
0170   04FC 2C 05 00      mov b, [bp + 5] ; num
0171   04FF D7            push a
0172   0500 11            mov a, b
0173   0501 26 0A 00      mov b, 10
0174   0504 AE            div a, b
0175   0505 FD 78         mov g, a
0176   0507 11            mov a, b
0177   0508 FD 27         mov b, g
0178   050A E4            pop a
0179   050B D7            push a
0180   050C 11            mov a, b
0181   050D 45 05 00      mov [bp + 5], a ; num
0182   0510 E4            pop a
0183   0511 2C FA FF      mov b, [bp + -6] ; i
0184   0514 D7            push a
0185   0515 11            mov a, b
0186   0516 FD 77         inc b
0187   0518 D7            push a
0188   0519 11            mov a, b
0189   051A 45 FA FF      mov [bp + -6], a ; i
0190   051D E4            pop a
0191   051E 27            mov b, a
0192   051F E4            pop a
0193   0520 0A AC 04      jmp _while3_cond
0194   0523             _while3_exit:
0195   0523             _while4_cond:
0196   0523 2C FA FF      mov b, [bp + -6] ; i
0197   0526 D7            push a
0198   0527 11            mov a, b
0199   0528 26 00 00      mov b, 0
0200   052B B0            cmp a, b
0201   052C 0E            lodflgs
0202   052D 2F            mov bl, al
0203   052E FD 78         mov g, a
0204   0530 FD A2 03      shr al, 3
0205   0533 FD A4 02      shr bl, 2
0206   0536 FD 87 01      and bl, %00000001
0207   0539 90            xor al, bl
0208   053A FD 27         mov b, g
0209   053C FD 87 01      and bl, %00000001
0210   053F 8C            or al, bl
0211   0540 8F 01         xor al, %00000001 ; > (signed)
0212   0542 22 00         mov ah, 0
0213   0544 27            mov b, a
0214   0545 E4            pop a
0215   0546 C0 00 00      cmp b, 0
0216   0549 C6 79 05      je _while4_exit
0217   054C             _while4_block:
0218   054C 2C FA FF      mov b, [bp + -6] ; i
0219   054F D7            push a
0220   0550 11            mov a, b
0221   0551 FD 7D         dec b
0222   0553 D7            push a
0223   0554 11            mov a, b
0224   0555 45 FA FF      mov [bp + -6], a ; i
0225   0558 E4            pop a
0226   0559 27            mov b, a
0227   055A E4            pop a
0228   055B FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0229   055E 2D            mov b, d
0230   055F D7            push a
0231   0560 74            mov d, b
0232   0561 DA            push d
0233   0562 2C FA FF      mov b, [bp + -6] ; i
0234   0565 E7            pop d
0235   0566 10 01 00      mov a, 1
0236   0569 AC            mul a, b
0237   056A 5A            add d, b
0238   056B E4            pop a
0239   056C 32            mov bl, [d]
0240   056D A7 00         mov bh, 0
0241   056F DD            push bl
0242   0570 07 7B 05      call _putchar
0243   0573 51 01 00      add sp, 1
0244   0576 0A 23 05      jmp _while4_cond
0245   0579             _while4_exit:
0246   0579 F9            leave
0247   057A 09            ret
0248   057B             
0249   057B             _putchar:
0250   057B D2            push bp
0251   057C 9B            mov bp, sp
0252   057D             
0253   057D             ; --- BEGIN INLINE ASM BLOCK
0254   057D 20 05 00      mov al, [bp + 5]
0255   0580 23            mov ah, al
0256   0581 07 B3 06      call putchar
0257   0584             ; --- END INLINE ASM BLOCK
0258   0584             
0259   0584 F9            leave
0260   0585 09            ret
0261   0586             
0262   0586             scann:
0263   0586 D2            push bp
0264   0587 9B            mov bp, sp
0265   0588 52 02 00      sub sp, 2 ; m
0266   058B             
0267   058B             ; --- BEGIN INLINE ASM BLOCK
0268   058B 07 EB 08      call scan_u16d
0269   058E 45 FF FF      mov [bp + -1], a
0270   0591             ; --- END INLINE ASM BLOCK
0271   0591             
0272   0591 2C FF FF      mov b, [bp + -1] ; m
0273   0594 F9            leave
0274   0595 09            ret
0275   0596             
0276   0596             print:
0277   0596 D2            push bp
0278   0597 9B            mov bp, sp
0279   0598             
0280   0598             ; --- BEGIN INLINE ASM BLOCK
0281   0598 17 05 00      mov a, [bp + 5]
0282   059B 3C            mov d, a
0283   059C 07 ED 07      call puts
0284   059F             ; --- END INLINE ASM BLOCK
0285   059F             
0286   059F F9            leave
0287   05A0 09            ret
0288   05A1             ; --- END TEXT BLOCK
0289   05A1             
0290   05A1             ; --- BEGIN DATA BLOCK
0291   05A1             ; --- END DATA BLOCK
0292   05A1             
0293   05A1             ; --- BEGIN INCLUDE BLOCK
0294   05A1             .include "lib/stdio.asm"
0001+  05A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  05A1             ; stdio.s
0003+  05A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  05A1             .include "lib/string.asm"
0001++ 05A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 05A1             ; string.s
0003++ 05A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 05A1             
0005++ 05A1             
0006++ 05A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 05A1             ; strrev
0008++ 05A1             ; reverse a string
0009++ 05A1             ; D = string address
0010++ 05A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 05A1             ; 01234
0012++ 05A1             strrev:
0013++ 05A1 4B          	pusha
0014++ 05A2 07 E8 05    	call strlen	; length in C
0015++ 05A5 12          	mov a, c
0016++ 05A6 AF 01 00    	cmp a, 1
0017++ 05A9 D0 C3 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 05AC 7D          	dec a
0019++ 05AD FD 4E       	mov si, d	; beginning of string
0020++ 05AF FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 05B1 59          	add d, a	; end of string
0022++ 05B2 12          	mov a, c
0023++ 05B3 FD 9B       	shr a		; divide by 2
0024++ 05B5 39          	mov c, a	; C now counts the steps
0025++ 05B6             strrev_L0:
0026++ 05B6 32          	mov bl, [d]	; save load right-side char into BL
0027++ 05B7 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 05B8 3E          	mov [d], al	; store left char into right side
0029++ 05B9 1B          	mov al, bl
0030++ 05BA F7          	stosb		; store right-side char into left-side; increase DI
0031++ 05BB 7E          	dec c
0032++ 05BC 7F          	dec d
0033++ 05BD C2 00 00    	cmp c, 0
0034++ 05C0 C7 B6 05    	jne strrev_L0
0035++ 05C3             strrev_end:
0036++ 05C3 4C          	popa
0037++ 05C4 09          	ret
0038++ 05C5             	
0039++ 05C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 05C5             ; strchr
0041++ 05C5             ; search string in D for char in AL
0042++ 05C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 05C5             strchr:
0044++ 05C5             strchr_L0:
0045++ 05C5 32          	mov bl, [d]
0046++ 05C6 C1 00       	cmp bl, 0
0047++ 05C8 C6 D3 05    	je strchr_end
0048++ 05CB BA          	cmp al, bl
0049++ 05CC C6 D3 05    	je strchr_end
0050++ 05CF 79          	inc d
0051++ 05D0 0A C5 05    	jmp strchr_L0
0052++ 05D3             strchr_end:
0053++ 05D3 1B          	mov al, bl
0054++ 05D4 09          	ret
0055++ 05D5             
0056++ 05D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 05D5             ; strstr
0058++ 05D5             ; find sub-string
0059++ 05D5             ; str1 in SI
0060++ 05D5             ; str2 in DI
0061++ 05D5             ; SI points to end of source string
0062++ 05D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 05D5             strstr:
0064++ 05D5 DB          	push al
0065++ 05D6 DA          	push d
0066++ 05D7 E3          	push di
0067++ 05D8             strstr_loop:
0068++ 05D8 F3          	cmpsb					; compare a byte of the strings
0069++ 05D9 C7 E4 05    	jne strstr_ret
0070++ 05DC FC 00 00    	lea d, [di + 0]
0071++ 05DF BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 05E1 C7 D8 05    	jne strstr_loop				; equal chars but not at end
0073++ 05E4             strstr_ret:
0074++ 05E4 F0          	pop di
0075++ 05E5 E7          	pop d
0076++ 05E6 E8          	pop al
0077++ 05E7 09          	ret
0078++ 05E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 05E8             ; length of null terminated string
0080++ 05E8             ; result in C
0081++ 05E8             ; pointer in D
0082++ 05E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 05E8             strlen:
0084++ 05E8 DA          	push d
0085++ 05E9 38 00 00    	mov c, 0
0086++ 05EC             strlen_L1:
0087++ 05EC BD 00       	cmp byte [d], 0
0088++ 05EE C6 F6 05    	je strlen_ret
0089++ 05F1 79          	inc d
0090++ 05F2 78          	inc c
0091++ 05F3 0A EC 05    	jmp strlen_L1
0092++ 05F6             strlen_ret:
0093++ 05F6 E7          	pop d
0094++ 05F7 09          	ret
0095++ 05F8             
0096++ 05F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 05F8             ; STRCMP
0098++ 05F8             ; compare two strings
0099++ 05F8             ; str1 in SI
0100++ 05F8             ; str2 in DI
0101++ 05F8             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 05F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 05F8             strcmp:
0104++ 05F8 DB          	push al
0105++ 05F9 DA          	push d
0106++ 05FA E3          	push di
0107++ 05FB E2          	push si
0108++ 05FC             strcmp_loop:
0109++ 05FC F3          	cmpsb					; compare a byte of the strings
0110++ 05FD C7 08 06    	jne strcmp_ret
0111++ 0600 FB FF FF    	lea d, [si +- 1]
0112++ 0603 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0605 C7 FC 05    	jne strcmp_loop				; equal chars but not at end
0114++ 0608             strcmp_ret:
0115++ 0608 EF          	pop si
0116++ 0609 F0          	pop di
0117++ 060A E7          	pop d
0118++ 060B E8          	pop al
0119++ 060C 09          	ret
0120++ 060D             
0121++ 060D             
0122++ 060D             ; STRCPY
0123++ 060D             ; copy null terminated string from SI to DI
0124++ 060D             ; source in SI
0125++ 060D             ; destination in DI
0126++ 060D             strcpy:
0127++ 060D E2          	push si
0128++ 060E E3          	push di
0129++ 060F DB          	push al
0130++ 0610             strcpy_L1:
0131++ 0610 F6          	lodsb
0132++ 0611 F7          	stosb
0133++ 0612 B9 00       	cmp al, 0
0134++ 0614 C7 10 06    	jne strcpy_L1
0135++ 0617             strcpy_end:
0136++ 0617 E8          	pop al
0137++ 0618 F0          	pop di
0138++ 0619 EF          	pop si
0139++ 061A 09          	ret
0140++ 061B             
0141++ 061B             ; STRCAT
0142++ 061B             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 061B             ; source in SI
0144++ 061B             ; destination in DI
0145++ 061B             strcat:
0146++ 061B E2          	push si
0147++ 061C E3          	push di
0148++ 061D D7          	push a
0149++ 061E DA          	push d
0150++ 061F 50          	mov a, di
0151++ 0620 3C          	mov d, a
0152++ 0621             strcat_goto_end_L1:
0153++ 0621 BD 00       	cmp byte[d], 0
0154++ 0623 C6 2A 06    	je strcat_start
0155++ 0626 79          	inc d
0156++ 0627 0A 21 06    	jmp strcat_goto_end_L1
0157++ 062A             strcat_start:
0158++ 062A FD 50       	mov di, d
0159++ 062C             strcat_L1:
0160++ 062C F6          	lodsb
0161++ 062D F7          	stosb
0162++ 062E B9 00       	cmp al, 0
0163++ 0630 C7 2C 06    	jne strcat_L1
0164++ 0633             strcat_end:
0165++ 0633 E7          	pop d
0166++ 0634 E4          	pop a
0167++ 0635 F0          	pop di
0168++ 0636 EF          	pop si
0169++ 0637 09          	ret
0005+  0638             
0006+  0638 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  063C 34 35 36 37 
0006+  0640 38 39 41 42 
0006+  0644 43 44 45 46 
0007+  0648 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  064C 1B 5B 48 00 
0008+  0650             
0009+  0650 01 00       table_power:.dw 1
0010+  0652 0A 00       			.dw 10
0011+  0654 64 00       			.dw 100
0012+  0656 E8 03       			.dw 1000
0013+  0658 10 27       			.dw 10000
0014+  065A             
0015+  065A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  065A             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  065A             ; ASCII in BL
0018+  065A             ; result in AL
0019+  065A             ; ascii for F = 0100 0110
0020+  065A             ; ascii for 9 = 0011 1001
0021+  065A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  065A             hex_ascii_encode:
0023+  065A 1B          	mov al, bl
0024+  065B 93 40       	test al, $40				; test if letter or number
0025+  065D C7 63 06    	jnz hex_letter
0026+  0660 87 0F       	and al, $0F				; get number
0027+  0662 09          	ret
0028+  0663             hex_letter:
0029+  0663 87 0F       	and al, $0F				; get letter
0030+  0665 6A 09       	add al, 9
0031+  0667 09          	ret
0032+  0668             
0033+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0668             ; ATOI
0035+  0668             ; 2 letter hex string in B
0036+  0668             ; 8bit integer returned in AL
0037+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0668             atoi:
0039+  0668 D8          	push b
0040+  0669 07 5A 06    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  066C 30          	mov bl, bh
0042+  066D DB          	push al					; save a
0043+  066E 07 5A 06    	call hex_ascii_encode
0044+  0671 EA          	pop bl	
0045+  0672 FD 9E 04    	shl al, 4
0046+  0675 8C          	or al, bl
0047+  0676 E5          	pop b
0048+  0677 09          	ret	
0049+  0678             
0050+  0678             
0051+  0678             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0678             ; printf
0053+  0678             ; no need for explanations!
0054+  0678             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0678             printf:
0056+  0678 09          	ret
0057+  0679             
0058+  0679             
0059+  0679             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0679             ; scanf
0061+  0679             ; no need for explanations!
0062+  0679             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0679             scanf:
0064+  0679 09          	ret
0065+  067A             
0066+  067A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  067A             ; ITOA
0068+  067A             ; 8bit value in BL
0069+  067A             ; 2 byte ASCII result in A
0070+  067A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  067A             itoa:
0072+  067A DA          	push d
0073+  067B D8          	push b
0074+  067C A7 00       	mov bh, 0
0075+  067E FD A4 04    	shr bl, 4	
0076+  0681 74          	mov d, b
0077+  0682 1F 38 06    	mov al, [d + s_hex_digits]
0078+  0685 23          	mov ah, al
0079+  0686             	
0080+  0686 E5          	pop b
0081+  0687 D8          	push b
0082+  0688 A7 00       	mov bh, 0
0083+  068A FD 87 0F    	and bl, $0F
0084+  068D 74          	mov d, b
0085+  068E 1F 38 06    	mov al, [d + s_hex_digits]
0086+  0691 E5          	pop b
0087+  0692 E7          	pop d
0088+  0693 09          	ret
0089+  0694             
0090+  0694             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0694             ; HEX STRING TO BINARY
0092+  0694             ; di = destination address
0093+  0694             ; si = source
0094+  0694             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0694             hex_to_int:
0096+  0694             hex_to_int_L1:
0097+  0694 F6          	lodsb					; load from [SI] to AL
0098+  0695 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0697 C6 A4 06    	jz hex_to_int_ret
0100+  069A 36          	mov bh, al
0101+  069B F6          	lodsb
0102+  069C 2F          	mov bl, al
0103+  069D 07 68 06    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  06A0 F7          	stosb					; store AL to [DI]
0105+  06A1 0A 94 06    	jmp hex_to_int_L1
0106+  06A4             hex_to_int_ret:
0107+  06A4 09          	ret		
0108+  06A5             
0109+  06A5             
0110+  06A5             
0111+  06A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  06A5             ; GETCHAR
0113+  06A5             ; char in ah
0114+  06A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  06A5             getchar:
0116+  06A5 DB          	push al
0117+  06A6             getchar_retry:
0118+  06A6 FD 0C       	sti
0119+  06A8 19 01       	mov al, 1
0120+  06AA 05 03       	syscall sys_io			; receive in AH
0121+  06AC B9 00       	cmp al, 0			; check if any char was receive
0122+  06AE C6 A6 06    	je getchar_retry
0123+  06B1 E8          	pop al
0124+  06B2 09          	ret
0125+  06B3             
0126+  06B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  06B3             ; PUTCHAR
0128+  06B3             ; char in ah
0129+  06B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  06B3             putchar:
0131+  06B3 D7          	push a
0132+  06B4 19 00       	mov al, 0
0133+  06B6 05 03       	syscall sys_io			; char in AH
0134+  06B8 E4          	pop a
0135+  06B9 09          	ret
0136+  06BA             
0137+  06BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  06BA             ;; INPUT A STRING
0139+  06BA             ;; terminates with null
0140+  06BA             ;; pointer in D
0141+  06BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  06BA             gets:
0143+  06BA D7          	push a
0144+  06BB DA          	push d
0145+  06BC             gets_loop:
0146+  06BC FD 0C       	sti
0147+  06BE 19 01       	mov al, 1
0148+  06C0 05 03       	syscall sys_io			; receive in AH
0149+  06C2 B9 00       	cmp al, 0				; check error code (AL)
0150+  06C4 C6 BC 06    	je gets_loop			; if no char received, retry
0151+  06C7             
0152+  06C7 76 1B       	cmp ah, 27
0153+  06C9 C6 EA 06    	je gets_telnet_escape
0154+  06CC 76 0A       	cmp ah, $0A				; LF
0155+  06CE C6 43 07    	je gets_end
0156+  06D1 76 0D       	cmp ah, $0D				; CR
0157+  06D3 C6 43 07    	je gets_end
0158+  06D6 76 5C       	cmp ah, $5C				; '\\'
0159+  06D8 C6 1A 07    	je gets_escape
0160+  06DB             	
0161+  06DB 76 08       	cmp ah, $08			; check for backspace
0162+  06DD C6 E6 06    	je gets_backspace
0163+  06E0             
0164+  06E0 1A          	mov al, ah
0165+  06E1 3E          	mov [d], al
0166+  06E2 79          	inc d
0167+  06E3 0A BC 06    	jmp gets_loop
0168+  06E6             gets_backspace:
0169+  06E6 7F          	dec d
0170+  06E7 0A BC 06    	jmp gets_loop
0171+  06EA             gets_telnet_escape:
0172+  06EA FD 0C       	sti
0173+  06EC 19 01       	mov al, 1
0174+  06EE 05 03       	syscall sys_io				; receive in AH without echo
0175+  06F0 B9 00       	cmp al, 0					; check error code (AL)
0176+  06F2 C6 EA 06    	je gets_telnet_escape		; if no char received, retry
0177+  06F5 76 5B       	cmp ah, '['
0178+  06F7 C7 BC 06    	jne gets_loop
0179+  06FA             gets_telnet_escape_phase2:
0180+  06FA FD 0C       	sti
0181+  06FC 19 01       	mov al, 1
0182+  06FE 05 03       	syscall sys_io					; receive in AH without echo
0183+  0700 B9 00       	cmp al, 0						; check error code (AL)
0184+  0702 C6 FA 06    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0705 76 44       	cmp ah, 'D'
0186+  0707 C6 12 07    	je gets_left_arrow
0187+  070A 76 43       	cmp ah, 'C'
0188+  070C C6 16 07    	je gets_right_arrow
0189+  070F 0A BC 06    	jmp gets_loop
0190+  0712             gets_left_arrow:
0191+  0712 7F          	dec d
0192+  0713 0A BC 06    	jmp gets_loop
0193+  0716             gets_right_arrow:
0194+  0716 79          	inc d
0195+  0717 0A BC 06    	jmp gets_loop
0196+  071A             gets_escape:
0197+  071A FD 0C       	sti
0198+  071C 19 01       	mov al, 1
0199+  071E 05 03       	syscall sys_io			; receive in AH
0200+  0720 B9 00       	cmp al, 0				; check error code (AL)
0201+  0722 C6 1A 07    	je gets_escape			; if no char received, retry
0202+  0725 76 6E       	cmp ah, 'n'
0203+  0727 C6 35 07    	je gets_LF
0204+  072A 76 72       	cmp ah, 'r'
0205+  072C C6 3C 07    	je gets_CR
0206+  072F 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0730 3E          	mov [d], al
0208+  0731 79          	inc d
0209+  0732 0A BC 06    	jmp gets_loop
0210+  0735             gets_LF:
0211+  0735 19 0A       	mov al, $0A
0212+  0737 3E          	mov [d], al
0213+  0738 79          	inc d
0214+  0739 0A BC 06    	jmp gets_loop
0215+  073C             gets_CR:
0216+  073C 19 0D       	mov al, $0D
0217+  073E 3E          	mov [d], al
0218+  073F 79          	inc d
0219+  0740 0A BC 06    	jmp gets_loop
0220+  0743             gets_end:
0221+  0743 19 00       	mov al, 0
0222+  0745 3E          	mov [d], al				; terminate string
0223+  0746 E7          	pop d
0224+  0747 E4          	pop a
0225+  0748 09          	ret
0226+  0749             
0227+  0749             
0228+  0749             
0229+  0749             
0230+  0749             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0749             ;; INPUT TEXT
0232+  0749             ;; terminated with CTRL+D
0233+  0749             ;; pointer in D
0234+  0749             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0749             gettxt:
0236+  0749 D7          	push a
0237+  074A DA          	push d
0238+  074B             gettxt_loop:
0239+  074B 19 01       	mov al, 1
0240+  074D 05 03       	syscall sys_io			; receive in AH
0241+  074F B9 00       	cmp al, 0				; check error code (AL)
0242+  0751 C6 4B 07    	je gettxt_loop		; if no char received, retry
0243+  0754 76 04       	cmp ah, 4			; EOT
0244+  0756 C6 94 07    	je gettxt_end
0245+  0759 76 08       	cmp ah, $08			; check for backspace
0246+  075B C6 90 07    	je gettxt_backspace
0247+  075E 76 5C       	cmp ah, $5C				; '\\'
0248+  0760 C6 69 07    	je gettxt_escape
0249+  0763 1A          	mov al, ah
0250+  0764 3E          	mov [d], al
0251+  0765 79          	inc d
0252+  0766 0A 4B 07    	jmp gettxt_loop
0253+  0769             gettxt_escape:
0254+  0769 19 01       	mov al, 1
0255+  076B 05 03       	syscall sys_io			; receive in AH
0256+  076D B9 00       	cmp al, 0				; check error code (AL)
0257+  076F C6 69 07    	je gettxt_escape		; if no char received, retry
0258+  0772 76 6E       	cmp ah, 'n'
0259+  0774 C6 82 07    	je gettxt_LF
0260+  0777 76 72       	cmp ah, 'r'
0261+  0779 C6 89 07    	je gettxt_CR
0262+  077C 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  077D 3E          	mov [d], al
0264+  077E 79          	inc d
0265+  077F 0A 4B 07    	jmp gettxt_loop
0266+  0782             gettxt_LF:
0267+  0782 19 0A       	mov al, $0A
0268+  0784 3E          	mov [d], al
0269+  0785 79          	inc d
0270+  0786 0A 4B 07    	jmp gettxt_loop
0271+  0789             gettxt_CR:
0272+  0789 19 0D       	mov al, $0D
0273+  078B 3E          	mov [d], al
0274+  078C 79          	inc d
0275+  078D 0A 4B 07    	jmp gettxt_loop
0276+  0790             gettxt_backspace:
0277+  0790 7F          	dec d
0278+  0791 0A 4B 07    	jmp gettxt_loop
0279+  0794             gettxt_end:
0280+  0794 19 00       	mov al, 0
0281+  0796 3E          	mov [d], al				; terminate string
0282+  0797 E7          	pop d
0283+  0798 E4          	pop a
0284+  0799 09          	ret
0285+  079A             
0286+  079A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  079A             ; PRINT NEW LINE
0288+  079A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  079A             printnl:
0290+  079A D7          	push a
0291+  079B 10 00 0A    	mov a, $0A00
0292+  079E 05 03       	syscall sys_io
0293+  07A0 10 00 0D    	mov a, $0D00
0294+  07A3 05 03       	syscall sys_io
0295+  07A5 E4          	pop a
0296+  07A6 09          	ret
0297+  07A7             
0298+  07A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  07A7             ; strtoint
0300+  07A7             ; 4 digit hex string number in d
0301+  07A7             ; integer returned in A
0302+  07A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  07A7             strtointx:
0304+  07A7 D8          	push b
0305+  07A8 32          	mov bl, [d]
0306+  07A9 37          	mov bh, bl
0307+  07AA 33 01 00    	mov bl, [d + 1]
0308+  07AD 07 68 06    	call atoi				; convert to int in AL
0309+  07B0 23          	mov ah, al				; move to AH
0310+  07B1 33 02 00    	mov bl, [d + 2]
0311+  07B4 37          	mov bh, bl
0312+  07B5 33 03 00    	mov bl, [d + 3]
0313+  07B8 07 68 06    	call atoi				; convert to int in AL
0314+  07BB E5          	pop b
0315+  07BC 09          	ret
0316+  07BD             
0317+  07BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  07BD             ; strtoint
0319+  07BD             ; 5 digit base10 string number in d
0320+  07BD             ; integer returned in A
0321+  07BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  07BD             strtoint:
0323+  07BD E2          	push si
0324+  07BE D8          	push b
0325+  07BF D9          	push c
0326+  07C0 DA          	push d
0327+  07C1 07 E8 05    	call strlen			; get string length in C
0328+  07C4 7E          	dec c
0329+  07C5 FD 4E       	mov si, d
0330+  07C7 12          	mov a, c
0331+  07C8 FD 99       	shl a
0332+  07CA 3B 50 06    	mov d, table_power
0333+  07CD 59          	add d, a
0334+  07CE 38 00 00    	mov c, 0
0335+  07D1             strtoint_L0:
0336+  07D1 F6          	lodsb			; load ASCII to al
0337+  07D2 B9 00       	cmp al, 0
0338+  07D4 C6 E7 07    	je strtoint_end
0339+  07D7 6F 30       	sub al, $30		; make into integer
0340+  07D9 22 00       	mov ah, 0
0341+  07DB 2A          	mov b, [d]
0342+  07DC AC          	mul a, b			; result in B since it fits in 16bits
0343+  07DD 11          	mov a, b
0344+  07DE 28          	mov b, c
0345+  07DF 54          	add a, b
0346+  07E0 39          	mov c, a
0347+  07E1 63 02 00    	sub d, 2
0348+  07E4 0A D1 07    	jmp strtoint_L0
0349+  07E7             strtoint_end:
0350+  07E7 12          	mov a, c
0351+  07E8 E7          	pop d
0352+  07E9 E6          	pop c
0353+  07EA E5          	pop b
0354+  07EB EF          	pop si
0355+  07EC 09          	ret
0356+  07ED             
0357+  07ED             
0358+  07ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  07ED             ; PRINT NULL TERMINATED STRING
0360+  07ED             ; pointer in D
0361+  07ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  07ED             puts:
0363+  07ED D7          	push a
0364+  07EE DA          	push d
0365+  07EF             puts_L1:
0366+  07EF 1E          	mov al, [d]
0367+  07F0 B9 00       	cmp al, 0
0368+  07F2 C6 FE 07    	jz puts_END
0369+  07F5 23          	mov ah, al
0370+  07F6 19 00       	mov al, 0
0371+  07F8 05 03       	syscall sys_io
0372+  07FA 79          	inc d
0373+  07FB 0A EF 07    	jmp puts_L1
0374+  07FE             puts_END:
0375+  07FE E7          	pop d
0376+  07FF E4          	pop a
0377+  0800 09          	ret
0378+  0801             
0379+  0801             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0801             ; PRINT N SIZE STRING
0381+  0801             ; pointer in D
0382+  0801             ; size in C
0383+  0801             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0801             putsn:
0385+  0801 DB          	push al
0386+  0802 DA          	push d
0387+  0803 D9          	push c
0388+  0804             putsn_L0:
0389+  0804 1E          	mov al, [d]
0390+  0805 23          	mov ah, al
0391+  0806 19 00       	mov al, 0
0392+  0808 05 03       	syscall sys_io
0393+  080A 79          	inc d
0394+  080B 7E          	dec c	
0395+  080C C2 00 00    	cmp c, 0
0396+  080F C7 04 08    	jne putsn_L0
0397+  0812             putsn_end:
0398+  0812 E6          	pop c
0399+  0813 E7          	pop d
0400+  0814 E8          	pop al
0401+  0815 09          	ret
0402+  0816             
0403+  0816             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0816             ; print 16bit decimal number
0405+  0816             ; input number in A
0406+  0816             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0816             print_u16d:
0408+  0816 D7          	push a
0409+  0817 D8          	push b
0410+  0818 26 10 27    	mov b, 10000
0411+  081B AE          	div a, b			; get 10000 coeff.
0412+  081C 07 42 08    	call print_number
0413+  081F 11          	mov a, b
0414+  0820 26 E8 03    	mov b, 1000
0415+  0823 AE          	div a, b			; get 10000 coeff.
0416+  0824 07 42 08    	call print_number
0417+  0827 11          	mov a, b
0418+  0828 26 64 00    	mov b, 100
0419+  082B AE          	div a, b
0420+  082C 07 42 08    	call print_number
0421+  082F 11          	mov a, b
0422+  0830 26 0A 00    	mov b, 10
0423+  0833 AE          	div a, b
0424+  0834 07 42 08    	call print_number
0425+  0837 11          	mov a, b
0426+  0838 6A 30       	add al, $30
0427+  083A 23          	mov ah, al
0428+  083B 19 00       	mov al, 0
0429+  083D 05 03       	syscall sys_io	; print coeff
0430+  083F E5          	pop b
0431+  0840 E4          	pop a
0432+  0841 09          	ret
0433+  0842             
0434+  0842             
0435+  0842             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0842             ; if A == 0, print space
0437+  0842             ; else print A
0438+  0842             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  0842             print_number:
0440+  0842 6A 30       	add al, $30
0441+  0844 23          	mov ah, al
0442+  0845 07 B3 06    	call putchar
0443+  0848 09          	ret
0444+  0849             
0445+  0849             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0849             ; PRINT 16BIT HEX INTEGER
0447+  0849             ; integer value in reg B
0448+  0849             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0849             print_u16x:
0450+  0849 D7          	push a
0451+  084A D8          	push b
0452+  084B DD          	push bl
0453+  084C 30          	mov bl, bh
0454+  084D 07 7A 06    	call itoa				; convert bh to char in A
0455+  0850 2F          	mov bl, al				; save al
0456+  0851 19 00       	mov al, 0
0457+  0853 05 03       	syscall sys_io				; display AH
0458+  0855 24          	mov ah, bl				; retrieve al
0459+  0856 19 00       	mov al, 0
0460+  0858 05 03       	syscall sys_io				; display AL
0461+  085A             
0462+  085A EA          	pop bl
0463+  085B 07 7A 06    	call itoa				; convert bh to char in A
0464+  085E 2F          	mov bl, al				; save al
0465+  085F 19 00       	mov al, 0
0466+  0861 05 03       	syscall sys_io				; display AH
0467+  0863 24          	mov ah, bl				; retrieve al
0468+  0864 19 00       	mov al, 0
0469+  0866 05 03       	syscall sys_io				; display AL
0470+  0868             
0471+  0868 E5          	pop b
0472+  0869 E4          	pop a
0473+  086A 09          	ret
0474+  086B             
0475+  086B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  086B             ; INPUT 16BIT HEX INTEGER
0477+  086B             ; read 16bit integer into A
0478+  086B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  086B             scan_u16x:
0480+  086B F8 10 00    	enter 16
0481+  086E D8          	push b
0482+  086F DA          	push d
0483+  0870             
0484+  0870 FA F1 FF    	lea d, [bp + -15]
0485+  0873 07 BA 06    	call gets				; get number
0486+  0876             
0487+  0876 32          	mov bl, [d]
0488+  0877 37          	mov bh, bl
0489+  0878 33 01 00    	mov bl, [d + 1]
0490+  087B 07 68 06    	call atoi				; convert to int in AL
0491+  087E 23          	mov ah, al				; move to AH
0492+  087F             
0493+  087F 33 02 00    	mov bl, [d + 2]
0494+  0882 37          	mov bh, bl
0495+  0883 33 03 00    	mov bl, [d + 3]
0496+  0886 07 68 06    	call atoi				; convert to int in AL
0497+  0889             
0498+  0889 E7          	pop d
0499+  088A E5          	pop b
0500+  088B F9          	leave
0501+  088C 09          	ret
0502+  088D             
0503+  088D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  088D             ; PRINT 8bit HEX INTEGER
0505+  088D             ; integer value in reg bl
0506+  088D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  088D             print_u8x:
0508+  088D D7          	push a
0509+  088E DD          	push bl
0510+  088F             
0511+  088F 07 7A 06    	call itoa				; convert bl to char in A
0512+  0892 2F          	mov bl, al				; save al
0513+  0893 19 00       	mov al, 0
0514+  0895 05 03       	syscall sys_io				; display AH
0515+  0897 24          	mov ah, bl				; retrieve al
0516+  0898 19 00       	mov al, 0
0517+  089A 05 03       	syscall sys_io				; display AL
0518+  089C             
0519+  089C EA          	pop bl
0520+  089D E4          	pop a
0521+  089E 09          	ret
0522+  089F             
0523+  089F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  089F             ; print 8bit decimal unsigned number
0525+  089F             ; input number in AL
0526+  089F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  089F             print_u8d:
0528+  089F D7          	push a
0529+  08A0 D8          	push b
0530+  08A1             
0531+  08A1 22 00       	mov ah, 0
0532+  08A3 26 64 00    	mov b, 100
0533+  08A6 AE          	div a, b
0534+  08A7 D8          	push b			; save remainder
0535+  08A8 B9 00       	cmp al, 0
0536+  08AA C6 B4 08    	je skip100
0537+  08AD 6A 30       	add al, $30
0538+  08AF 23          	mov ah, al
0539+  08B0 19 00       	mov al, 0
0540+  08B2 05 03       	syscall sys_io	; print coeff
0541+  08B4             skip100:
0542+  08B4 E4          	pop a
0543+  08B5 22 00       	mov ah, 0
0544+  08B7 26 0A 00    	mov b, 10
0545+  08BA AE          	div a, b
0546+  08BB D8          	push b			; save remainder
0547+  08BC B9 00       	cmp al, 0
0548+  08BE C6 C8 08    	je skip10
0549+  08C1 6A 30       	add al, $30
0550+  08C3 23          	mov ah, al
0551+  08C4 19 00       	mov al, 0
0552+  08C6 05 03       	syscall sys_io	; print coeff
0553+  08C8             skip10:
0554+  08C8 E4          	pop a
0555+  08C9 1B          	mov al, bl
0556+  08CA 6A 30       	add al, $30
0557+  08CC 23          	mov ah, al
0558+  08CD 19 00       	mov al, 0
0559+  08CF 05 03       	syscall sys_io	; print coeff
0560+  08D1 E5          	pop b
0561+  08D2 E4          	pop a
0562+  08D3 09          	ret
0563+  08D4             
0564+  08D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  08D4             ; INPUT 8BIT HEX INTEGER
0566+  08D4             ; read 8bit integer into AL
0567+  08D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  08D4             scan_u8x:
0569+  08D4 F8 04 00    	enter 4
0570+  08D7 D8          	push b
0571+  08D8 DA          	push d
0572+  08D9             
0573+  08D9 FA FD FF    	lea d, [bp + -3]
0574+  08DC 07 BA 06    	call gets				; get number
0575+  08DF             
0576+  08DF 32          	mov bl, [d]
0577+  08E0 37          	mov bh, bl
0578+  08E1 33 01 00    	mov bl, [d + 1]
0579+  08E4 07 68 06    	call atoi				; convert to int in AL
0580+  08E7             
0581+  08E7 E7          	pop d
0582+  08E8 E5          	pop b
0583+  08E9 F9          	leave
0584+  08EA 09          	ret
0585+  08EB             
0586+  08EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  08EB             ; input decimal number
0588+  08EB             ; result in A
0589+  08EB             ; 655'\0'
0590+  08EB             ; low--------high
0591+  08EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  08EB             scan_u16d:
0593+  08EB F8 08 00    	enter 8
0594+  08EE E2          	push si
0595+  08EF D8          	push b
0596+  08F0 D9          	push c
0597+  08F1 DA          	push d
0598+  08F2 FA F9 FF    	lea d, [bp +- 7]
0599+  08F5 07 BA 06    	call gets
0600+  08F8 07 E8 05    	call strlen			; get string length in C
0601+  08FB 7E          	dec c
0602+  08FC FD 4E       	mov si, d
0603+  08FE 12          	mov a, c
0604+  08FF FD 99       	shl a
0605+  0901 3B 50 06    	mov d, table_power
0606+  0904 59          	add d, a
0607+  0905 38 00 00    	mov c, 0
0608+  0908             mul_loop:
0609+  0908 F6          	lodsb			; load ASCII to al
0610+  0909 B9 00       	cmp al, 0
0611+  090B C6 1E 09    	je mul_exit
0612+  090E 6F 30       	sub al, $30		; make into integer
0613+  0910 22 00       	mov ah, 0
0614+  0912 2A          	mov b, [d]
0615+  0913 AC          	mul a, b			; result in B since it fits in 16bits
0616+  0914 11          	mov a, b
0617+  0915 28          	mov b, c
0618+  0916 54          	add a, b
0619+  0917 39          	mov c, a
0620+  0918 63 02 00    	sub d, 2
0621+  091B 0A 08 09    	jmp mul_loop
0622+  091E             mul_exit:
0623+  091E 12          	mov a, c
0624+  091F E7          	pop d
0625+  0920 E6          	pop c
0626+  0921 E5          	pop b
0627+  0922 EF          	pop si
0628+  0923 F9          	leave
0629+  0924 09          	ret
0295   0925             ; --- END INCLUDE BLOCK
0296   0925             
0297   0925             
0298   0925             .end
tasm: Number of errors = 0
