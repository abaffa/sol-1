0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402             
0011   0402             ; --- BEGIN INLINE ASM BLOCK
0012   0402 48            mov a, sp
0013   0403 27            mov b, a
0014   0404 07 BF 06      call print_u16x
0015   0407 FD D7 FF FF   push word $FFFF
0016   040B 48            mov a, sp
0017   040C 27            mov b, a
0018   040D 07 BF 06      call print_u16x
0019   0410 FD DB FF      push byte $FF
0020   0413 48            mov a, sp
0021   0414 27            mov b, a
0022   0415 07 BF 06      call print_u16x
0023   0418             ; --- END INLINE ASM BLOCK
0024   0418             
0025   0418 F9            leave
0026   0419 05 0B         syscall sys_terminate_proc
0027   041B             ; --- END TEXT BLOCK
0028   041B             
0029   041B             ; --- BEGIN DATA BLOCK
0030   041B             ; --- END DATA BLOCK
0031   041B             
0032   041B             ; --- BEGIN INCLUDE BLOCK
0033   041B             .include "lib/stdio.asm"
0001+  041B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  041B             ; stdio.s
0003+  041B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  041B             .include "lib/string.asm"
0001++ 041B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 041B             ; string.s
0003++ 041B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 041B             
0005++ 041B             
0006++ 041B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 041B             ; strrev
0008++ 041B             ; reverse a string
0009++ 041B             ; D = string address
0010++ 041B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 041B             ; 01234
0012++ 041B             strrev:
0013++ 041B 4B          	pusha
0014++ 041C 07 62 04    	call strlen	; length in C
0015++ 041F 12          	mov a, c
0016++ 0420 AF 01 00    	cmp a, 1
0017++ 0423 D0 3D 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0426 7D          	dec a
0019++ 0427 FD 4E       	mov si, d	; beginning of string
0020++ 0429 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 042B 59          	add d, a	; end of string
0022++ 042C 12          	mov a, c
0023++ 042D FD 9B       	shr a		; divide by 2
0024++ 042F 39          	mov c, a	; C now counts the steps
0025++ 0430             strrev_L0:
0026++ 0430 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0431 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0432 3E          	mov [d], al	; store left char into right side
0029++ 0433 1B          	mov al, bl
0030++ 0434 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0435 7E          	dec c
0032++ 0436 7F          	dec d
0033++ 0437 C2 00 00    	cmp c, 0
0034++ 043A C7 30 04    	jne strrev_L0
0035++ 043D             strrev_end:
0036++ 043D 4C          	popa
0037++ 043E 09          	ret
0038++ 043F             	
0039++ 043F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 043F             ; strchr
0041++ 043F             ; search string in D for char in AL
0042++ 043F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 043F             strchr:
0044++ 043F             strchr_L0:
0045++ 043F 32          	mov bl, [d]
0046++ 0440 C1 00       	cmp bl, 0
0047++ 0442 C6 4D 04    	je strchr_end
0048++ 0445 BA          	cmp al, bl
0049++ 0446 C6 4D 04    	je strchr_end
0050++ 0449 79          	inc d
0051++ 044A 0A 3F 04    	jmp strchr_L0
0052++ 044D             strchr_end:
0053++ 044D 1B          	mov al, bl
0054++ 044E 09          	ret
0055++ 044F             
0056++ 044F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 044F             ; strstr
0058++ 044F             ; find sub-string
0059++ 044F             ; str1 in SI
0060++ 044F             ; str2 in DI
0061++ 044F             ; SI points to end of source string
0062++ 044F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 044F             strstr:
0064++ 044F DB          	push al
0065++ 0450 DA          	push d
0066++ 0451 E3          	push di
0067++ 0452             strstr_loop:
0068++ 0452 F3          	cmpsb					; compare a byte of the strings
0069++ 0453 C7 5E 04    	jne strstr_ret
0070++ 0456 FC 00 00    	lea d, [di + 0]
0071++ 0459 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 045B C7 52 04    	jne strstr_loop				; equal chars but not at end
0073++ 045E             strstr_ret:
0074++ 045E F0          	pop di
0075++ 045F E7          	pop d
0076++ 0460 E8          	pop al
0077++ 0461 09          	ret
0078++ 0462             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0462             ; length of null terminated string
0080++ 0462             ; result in C
0081++ 0462             ; pointer in D
0082++ 0462             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0462             strlen:
0084++ 0462 DA          	push d
0085++ 0463 38 00 00    	mov c, 0
0086++ 0466             strlen_L1:
0087++ 0466 BD 00       	cmp byte [d], 0
0088++ 0468 C6 70 04    	je strlen_ret
0089++ 046B 79          	inc d
0090++ 046C 78          	inc c
0091++ 046D 0A 66 04    	jmp strlen_L1
0092++ 0470             strlen_ret:
0093++ 0470 E7          	pop d
0094++ 0471 09          	ret
0095++ 0472             
0096++ 0472             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0472             ; STRCMP
0098++ 0472             ; compare two strings
0099++ 0472             ; str1 in SI
0100++ 0472             ; str2 in DI
0101++ 0472             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0472             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0472             strcmp:
0104++ 0472 DB          	push al
0105++ 0473 DA          	push d
0106++ 0474 E3          	push di
0107++ 0475 E2          	push si
0108++ 0476             strcmp_loop:
0109++ 0476 F3          	cmpsb					; compare a byte of the strings
0110++ 0477 C7 82 04    	jne strcmp_ret
0111++ 047A FB FF FF    	lea d, [si +- 1]
0112++ 047D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 047F C7 76 04    	jne strcmp_loop				; equal chars but not at end
0114++ 0482             strcmp_ret:
0115++ 0482 EF          	pop si
0116++ 0483 F0          	pop di
0117++ 0484 E7          	pop d
0118++ 0485 E8          	pop al
0119++ 0486 09          	ret
0120++ 0487             
0121++ 0487             
0122++ 0487             ; STRCPY
0123++ 0487             ; copy null terminated string from SI to DI
0124++ 0487             ; source in SI
0125++ 0487             ; destination in DI
0126++ 0487             strcpy:
0127++ 0487 E2          	push si
0128++ 0488 E3          	push di
0129++ 0489 DB          	push al
0130++ 048A             strcpy_L1:
0131++ 048A F6          	lodsb
0132++ 048B F7          	stosb
0133++ 048C B9 00       	cmp al, 0
0134++ 048E C7 8A 04    	jne strcpy_L1
0135++ 0491             strcpy_end:
0136++ 0491 E8          	pop al
0137++ 0492 F0          	pop di
0138++ 0493 EF          	pop si
0139++ 0494 09          	ret
0140++ 0495             
0141++ 0495             ; STRCAT
0142++ 0495             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0495             ; source in SI
0144++ 0495             ; destination in DI
0145++ 0495             strcat:
0146++ 0495 E2          	push si
0147++ 0496 E3          	push di
0148++ 0497 D7          	push a
0149++ 0498 DA          	push d
0150++ 0499 50          	mov a, di
0151++ 049A 3C          	mov d, a
0152++ 049B             strcat_goto_end_L1:
0153++ 049B BD 00       	cmp byte[d], 0
0154++ 049D C6 A4 04    	je strcat_start
0155++ 04A0 79          	inc d
0156++ 04A1 0A 9B 04    	jmp strcat_goto_end_L1
0157++ 04A4             strcat_start:
0158++ 04A4 FD 50       	mov di, d
0159++ 04A6             strcat_L1:
0160++ 04A6 F6          	lodsb
0161++ 04A7 F7          	stosb
0162++ 04A8 B9 00       	cmp al, 0
0163++ 04AA C7 A6 04    	jne strcat_L1
0164++ 04AD             strcat_end:
0165++ 04AD E7          	pop d
0166++ 04AE E4          	pop a
0167++ 04AF F0          	pop di
0168++ 04B0 EF          	pop si
0169++ 04B1 09          	ret
0005+  04B2             
0006+  04B2 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  04B6 34 35 36 37 
0006+  04BA 38 39 41 42 
0006+  04BE 43 44 45 46 
0007+  04C2 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  04C6 1B 5B 48 00 
0008+  04CA             
0009+  04CA 01 00       table_power:.dw 1
0010+  04CC 0A 00       			.dw 10
0011+  04CE 64 00       			.dw 100
0012+  04D0 E8 03       			.dw 1000
0013+  04D2 10 27       			.dw 10000
0014+  04D4             
0015+  04D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  04D4             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  04D4             ; ASCII in BL
0018+  04D4             ; result in AL
0019+  04D4             ; ascii for F = 0100 0110
0020+  04D4             ; ascii for 9 = 0011 1001
0021+  04D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  04D4             hex_ascii_encode:
0023+  04D4 1B          	mov al, bl
0024+  04D5 93 40       	test al, $40				; test if letter or number
0025+  04D7 C7 DD 04    	jnz hex_letter
0026+  04DA 87 0F       	and al, $0F				; get number
0027+  04DC 09          	ret
0028+  04DD             hex_letter:
0029+  04DD 87 0F       	and al, $0F				; get letter
0030+  04DF 6A 09       	add al, 9
0031+  04E1 09          	ret
0032+  04E2             
0033+  04E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  04E2             ; ATOI
0035+  04E2             ; 2 letter hex string in B
0036+  04E2             ; 8bit integer returned in AL
0037+  04E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  04E2             atoi:
0039+  04E2 D8          	push b
0040+  04E3 07 D4 04    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  04E6 30          	mov bl, bh
0042+  04E7 DB          	push al					; save a
0043+  04E8 07 D4 04    	call hex_ascii_encode
0044+  04EB EA          	pop bl	
0045+  04EC FD 9E 04    	shl al, 4
0046+  04EF 8C          	or al, bl
0047+  04F0 E5          	pop b
0048+  04F1 09          	ret	
0049+  04F2             
0050+  04F2             
0051+  04F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  04F2             ; printf
0053+  04F2             ; no need for explanations!
0054+  04F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  04F2             printf:
0056+  04F2 09          	ret
0057+  04F3             
0058+  04F3             
0059+  04F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  04F3             ; scanf
0061+  04F3             ; no need for explanations!
0062+  04F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  04F3             scanf:
0064+  04F3 09          	ret
0065+  04F4             
0066+  04F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  04F4             ; ITOA
0068+  04F4             ; 8bit value in BL
0069+  04F4             ; 2 byte ASCII result in A
0070+  04F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  04F4             itoa:
0072+  04F4 DA          	push d
0073+  04F5 D8          	push b
0074+  04F6 A7 00       	mov bh, 0
0075+  04F8 FD A4 04    	shr bl, 4	
0076+  04FB 74          	mov d, b
0077+  04FC 1F B2 04    	mov al, [d + s_hex_digits]
0078+  04FF 23          	mov ah, al
0079+  0500             	
0080+  0500 E5          	pop b
0081+  0501 D8          	push b
0082+  0502 A7 00       	mov bh, 0
0083+  0504 FD 87 0F    	and bl, $0F
0084+  0507 74          	mov d, b
0085+  0508 1F B2 04    	mov al, [d + s_hex_digits]
0086+  050B E5          	pop b
0087+  050C E7          	pop d
0088+  050D 09          	ret
0089+  050E             
0090+  050E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  050E             ; HEX STRING TO BINARY
0092+  050E             ; di = destination address
0093+  050E             ; si = source
0094+  050E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  050E             hex_to_int:
0096+  050E             hex_to_int_L1:
0097+  050E F6          	lodsb					; load from [SI] to AL
0098+  050F B9 00       	cmp al, 0				; check if ASCII 0
0099+  0511 C6 1E 05    	jz hex_to_int_ret
0100+  0514 36          	mov bh, al
0101+  0515 F6          	lodsb
0102+  0516 2F          	mov bl, al
0103+  0517 07 E2 04    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  051A F7          	stosb					; store AL to [DI]
0105+  051B 0A 0E 05    	jmp hex_to_int_L1
0106+  051E             hex_to_int_ret:
0107+  051E 09          	ret		
0108+  051F             
0109+  051F             
0110+  051F             
0111+  051F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  051F             ; GETCHAR
0113+  051F             ; char in ah
0114+  051F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  051F             getchar:
0116+  051F DB          	push al
0117+  0520             getchar_retry:
0118+  0520 FD 0C       	sti
0119+  0522 19 01       	mov al, 1
0120+  0524 05 03       	syscall sys_io			; receive in AH
0121+  0526 B9 00       	cmp al, 0			; check if any char was receive
0122+  0528 C6 20 05    	je getchar_retry
0123+  052B E8          	pop al
0124+  052C 09          	ret
0125+  052D             
0126+  052D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  052D             ; PUTCHAR
0128+  052D             ; char in ah
0129+  052D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  052D             putchar:
0131+  052D D7          	push a
0132+  052E 19 00       	mov al, 0
0133+  0530 05 03       	syscall sys_io			; char in AH
0134+  0532 E4          	pop a
0135+  0533 09          	ret
0136+  0534             
0137+  0534             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0534             ;; INPUT A STRING
0139+  0534             ;; terminates with null
0140+  0534             ;; pointer in D
0141+  0534             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0534             gets:
0143+  0534 D7          	push a
0144+  0535 DA          	push d
0145+  0536             gets_loop:
0146+  0536 FD 0C       	sti
0147+  0538 19 01       	mov al, 1
0148+  053A 05 03       	syscall sys_io			; receive in AH
0149+  053C B9 00       	cmp al, 0				; check error code (AL)
0150+  053E C6 36 05    	je gets_loop			; if no char received, retry
0151+  0541             
0152+  0541 76 1B       	cmp ah, 27
0153+  0543 C6 64 05    	je gets_telnet_escape
0154+  0546 76 0A       	cmp ah, $0A				; LF
0155+  0548 C6 BD 05    	je gets_end
0156+  054B 76 0D       	cmp ah, $0D				; CR
0157+  054D C6 BD 05    	je gets_end
0158+  0550 76 5C       	cmp ah, $5C				; '\\'
0159+  0552 C6 94 05    	je gets_escape
0160+  0555             	
0161+  0555 76 08       	cmp ah, $08			; check for backspace
0162+  0557 C6 60 05    	je gets_backspace
0163+  055A             
0164+  055A 1A          	mov al, ah
0165+  055B 3E          	mov [d], al
0166+  055C 79          	inc d
0167+  055D 0A 36 05    	jmp gets_loop
0168+  0560             gets_backspace:
0169+  0560 7F          	dec d
0170+  0561 0A 36 05    	jmp gets_loop
0171+  0564             gets_telnet_escape:
0172+  0564 FD 0C       	sti
0173+  0566 19 01       	mov al, 1
0174+  0568 05 03       	syscall sys_io				; receive in AH without echo
0175+  056A B9 00       	cmp al, 0					; check error code (AL)
0176+  056C C6 64 05    	je gets_telnet_escape		; if no char received, retry
0177+  056F 76 5B       	cmp ah, '['
0178+  0571 C7 36 05    	jne gets_loop
0179+  0574             gets_telnet_escape_phase2:
0180+  0574 FD 0C       	sti
0181+  0576 19 01       	mov al, 1
0182+  0578 05 03       	syscall sys_io					; receive in AH without echo
0183+  057A B9 00       	cmp al, 0						; check error code (AL)
0184+  057C C6 74 05    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  057F 76 44       	cmp ah, 'D'
0186+  0581 C6 8C 05    	je gets_left_arrow
0187+  0584 76 43       	cmp ah, 'C'
0188+  0586 C6 90 05    	je gets_right_arrow
0189+  0589 0A 36 05    	jmp gets_loop
0190+  058C             gets_left_arrow:
0191+  058C 7F          	dec d
0192+  058D 0A 36 05    	jmp gets_loop
0193+  0590             gets_right_arrow:
0194+  0590 79          	inc d
0195+  0591 0A 36 05    	jmp gets_loop
0196+  0594             gets_escape:
0197+  0594 FD 0C       	sti
0198+  0596 19 01       	mov al, 1
0199+  0598 05 03       	syscall sys_io			; receive in AH
0200+  059A B9 00       	cmp al, 0				; check error code (AL)
0201+  059C C6 94 05    	je gets_escape			; if no char received, retry
0202+  059F 76 6E       	cmp ah, 'n'
0203+  05A1 C6 AF 05    	je gets_LF
0204+  05A4 76 72       	cmp ah, 'r'
0205+  05A6 C6 B6 05    	je gets_CR
0206+  05A9 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  05AA 3E          	mov [d], al
0208+  05AB 79          	inc d
0209+  05AC 0A 36 05    	jmp gets_loop
0210+  05AF             gets_LF:
0211+  05AF 19 0A       	mov al, $0A
0212+  05B1 3E          	mov [d], al
0213+  05B2 79          	inc d
0214+  05B3 0A 36 05    	jmp gets_loop
0215+  05B6             gets_CR:
0216+  05B6 19 0D       	mov al, $0D
0217+  05B8 3E          	mov [d], al
0218+  05B9 79          	inc d
0219+  05BA 0A 36 05    	jmp gets_loop
0220+  05BD             gets_end:
0221+  05BD 19 00       	mov al, 0
0222+  05BF 3E          	mov [d], al				; terminate string
0223+  05C0 E7          	pop d
0224+  05C1 E4          	pop a
0225+  05C2 09          	ret
0226+  05C3             
0227+  05C3             
0228+  05C3             
0229+  05C3             
0230+  05C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  05C3             ;; INPUT TEXT
0232+  05C3             ;; terminated with CTRL+D
0233+  05C3             ;; pointer in D
0234+  05C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  05C3             gettxt:
0236+  05C3 D7          	push a
0237+  05C4 DA          	push d
0238+  05C5             gettxt_loop:
0239+  05C5 19 01       	mov al, 1
0240+  05C7 05 03       	syscall sys_io			; receive in AH
0241+  05C9 B9 00       	cmp al, 0				; check error code (AL)
0242+  05CB C6 C5 05    	je gettxt_loop		; if no char received, retry
0243+  05CE 76 04       	cmp ah, 4			; EOT
0244+  05D0 C6 0E 06    	je gettxt_end
0245+  05D3 76 08       	cmp ah, $08			; check for backspace
0246+  05D5 C6 0A 06    	je gettxt_backspace
0247+  05D8 76 5C       	cmp ah, $5C				; '\\'
0248+  05DA C6 E3 05    	je gettxt_escape
0249+  05DD 1A          	mov al, ah
0250+  05DE 3E          	mov [d], al
0251+  05DF 79          	inc d
0252+  05E0 0A C5 05    	jmp gettxt_loop
0253+  05E3             gettxt_escape:
0254+  05E3 19 01       	mov al, 1
0255+  05E5 05 03       	syscall sys_io			; receive in AH
0256+  05E7 B9 00       	cmp al, 0				; check error code (AL)
0257+  05E9 C6 E3 05    	je gettxt_escape		; if no char received, retry
0258+  05EC 76 6E       	cmp ah, 'n'
0259+  05EE C6 FC 05    	je gettxt_LF
0260+  05F1 76 72       	cmp ah, 'r'
0261+  05F3 C6 03 06    	je gettxt_CR
0262+  05F6 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  05F7 3E          	mov [d], al
0264+  05F8 79          	inc d
0265+  05F9 0A C5 05    	jmp gettxt_loop
0266+  05FC             gettxt_LF:
0267+  05FC 19 0A       	mov al, $0A
0268+  05FE 3E          	mov [d], al
0269+  05FF 79          	inc d
0270+  0600 0A C5 05    	jmp gettxt_loop
0271+  0603             gettxt_CR:
0272+  0603 19 0D       	mov al, $0D
0273+  0605 3E          	mov [d], al
0274+  0606 79          	inc d
0275+  0607 0A C5 05    	jmp gettxt_loop
0276+  060A             gettxt_backspace:
0277+  060A 7F          	dec d
0278+  060B 0A C5 05    	jmp gettxt_loop
0279+  060E             gettxt_end:
0280+  060E 19 00       	mov al, 0
0281+  0610 3E          	mov [d], al				; terminate string
0282+  0611 E7          	pop d
0283+  0612 E4          	pop a
0284+  0613 09          	ret
0285+  0614             
0286+  0614             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0614             ; PRINT NEW LINE
0288+  0614             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0614             printnl:
0290+  0614 D7          	push a
0291+  0615 10 00 0A    	mov a, $0A00
0292+  0618 05 03       	syscall sys_io
0293+  061A 10 00 0D    	mov a, $0D00
0294+  061D 05 03       	syscall sys_io
0295+  061F E4          	pop a
0296+  0620 09          	ret
0297+  0621             
0298+  0621             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0621             ; strtoint
0300+  0621             ; 4 digit hex string number in d
0301+  0621             ; integer returned in A
0302+  0621             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0621             strtointx:
0304+  0621 D8          	push b
0305+  0622 32          	mov bl, [d]
0306+  0623 37          	mov bh, bl
0307+  0624 33 01 00    	mov bl, [d + 1]
0308+  0627 07 E2 04    	call atoi				; convert to int in AL
0309+  062A 23          	mov ah, al				; move to AH
0310+  062B 33 02 00    	mov bl, [d + 2]
0311+  062E 37          	mov bh, bl
0312+  062F 33 03 00    	mov bl, [d + 3]
0313+  0632 07 E2 04    	call atoi				; convert to int in AL
0314+  0635 E5          	pop b
0315+  0636 09          	ret
0316+  0637             
0317+  0637             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0637             ; strtoint
0319+  0637             ; 5 digit base10 string number in d
0320+  0637             ; integer returned in A
0321+  0637             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0637             strtoint:
0323+  0637 E2          	push si
0324+  0638 D8          	push b
0325+  0639 D9          	push c
0326+  063A DA          	push d
0327+  063B 07 62 04    	call strlen			; get string length in C
0328+  063E 7E          	dec c
0329+  063F FD 4E       	mov si, d
0330+  0641 12          	mov a, c
0331+  0642 FD 99       	shl a
0332+  0644 3B CA 04    	mov d, table_power
0333+  0647 59          	add d, a
0334+  0648 38 00 00    	mov c, 0
0335+  064B             strtoint_L0:
0336+  064B F6          	lodsb			; load ASCII to al
0337+  064C B9 00       	cmp al, 0
0338+  064E C6 61 06    	je strtoint_end
0339+  0651 6F 30       	sub al, $30		; make into integer
0340+  0653 22 00       	mov ah, 0
0341+  0655 2A          	mov b, [d]
0342+  0656 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0657 11          	mov a, b
0344+  0658 28          	mov b, c
0345+  0659 54          	add a, b
0346+  065A 39          	mov c, a
0347+  065B 63 02 00    	sub d, 2
0348+  065E 0A 4B 06    	jmp strtoint_L0
0349+  0661             strtoint_end:
0350+  0661 12          	mov a, c
0351+  0662 E7          	pop d
0352+  0663 E6          	pop c
0353+  0664 E5          	pop b
0354+  0665 EF          	pop si
0355+  0666 09          	ret
0356+  0667             
0357+  0667             
0358+  0667             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0667             ; PRINT NULL TERMINATED STRING
0360+  0667             ; pointer in D
0361+  0667             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0667             puts:
0363+  0667 D7          	push a
0364+  0668 DA          	push d
0365+  0669             puts_L1:
0366+  0669 1E          	mov al, [d]
0367+  066A B9 00       	cmp al, 0
0368+  066C C6 78 06    	jz puts_END
0369+  066F 23          	mov ah, al
0370+  0670 19 00       	mov al, 0
0371+  0672 05 03       	syscall sys_io
0372+  0674 79          	inc d
0373+  0675 0A 69 06    	jmp puts_L1
0374+  0678             puts_END:
0375+  0678 E7          	pop d
0376+  0679 E4          	pop a
0377+  067A 09          	ret
0378+  067B             
0379+  067B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  067B             ; PRINT N SIZE STRING
0381+  067B             ; pointer in D
0382+  067B             ; size in C
0383+  067B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  067B             putsn:
0385+  067B DB          	push al
0386+  067C DA          	push d
0387+  067D D9          	push c
0388+  067E             putsn_L0:
0389+  067E 1E          	mov al, [d]
0390+  067F 23          	mov ah, al
0391+  0680 19 00       	mov al, 0
0392+  0682 05 03       	syscall sys_io
0393+  0684 79          	inc d
0394+  0685 7E          	dec c	
0395+  0686 C2 00 00    	cmp c, 0
0396+  0689 C7 7E 06    	jne putsn_L0
0397+  068C             putsn_end:
0398+  068C E6          	pop c
0399+  068D E7          	pop d
0400+  068E E8          	pop al
0401+  068F 09          	ret
0402+  0690             
0403+  0690             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0690             ; print 16bit decimal number
0405+  0690             ; input number in A
0406+  0690             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0690             print_u16d:
0408+  0690 D7          	push a
0409+  0691 D8          	push b
0410+  0692 26 10 27    	mov b, 10000
0411+  0695 AE          	div a, b			; get 10000's coeff.
0412+  0696 07 B8 06    	call print_number
0413+  0699 11          	mov a, b
0414+  069A 26 E8 03    	mov b, 1000
0415+  069D AE          	div a, b			; get 1000's coeff.
0416+  069E 07 B8 06    	call print_number
0417+  06A1 11          	mov a, b
0418+  06A2 26 64 00    	mov b, 100
0419+  06A5 AE          	div a, b
0420+  06A6 07 B8 06    	call print_number
0421+  06A9 11          	mov a, b
0422+  06AA 26 0A 00    	mov b, 10
0423+  06AD AE          	div a, b
0424+  06AE 07 B8 06    	call print_number
0425+  06B1 1B          	mov al, bl			; 1's coeff in bl
0426+  06B2 07 B8 06    	call print_number
0427+  06B5 E5          	pop b
0428+  06B6 E4          	pop a
0429+  06B7 09          	ret
0430+  06B8             
0431+  06B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0432+  06B8             ; print AL
0433+  06B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0434+  06B8             print_number:
0435+  06B8 6A 30       	add al, $30
0436+  06BA 23          	mov ah, al
0437+  06BB 07 2D 05    	call putchar
0438+  06BE 09          	ret
0439+  06BF             
0440+  06BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0441+  06BF             ; PRINT 16BIT HEX INTEGER
0442+  06BF             ; integer value in reg B
0443+  06BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0444+  06BF             print_u16x:
0445+  06BF D7          	push a
0446+  06C0 D8          	push b
0447+  06C1 DD          	push bl
0448+  06C2 30          	mov bl, bh
0449+  06C3 07 F4 04    	call itoa				; convert bh to char in A
0450+  06C6 2F          	mov bl, al				; save al
0451+  06C7 19 00       	mov al, 0
0452+  06C9 05 03       	syscall sys_io				; display AH
0453+  06CB 24          	mov ah, bl				; retrieve al
0454+  06CC 19 00       	mov al, 0
0455+  06CE 05 03       	syscall sys_io				; display AL
0456+  06D0             
0457+  06D0 EA          	pop bl
0458+  06D1 07 F4 04    	call itoa				; convert bh to char in A
0459+  06D4 2F          	mov bl, al				; save al
0460+  06D5 19 00       	mov al, 0
0461+  06D7 05 03       	syscall sys_io				; display AH
0462+  06D9 24          	mov ah, bl				; retrieve al
0463+  06DA 19 00       	mov al, 0
0464+  06DC 05 03       	syscall sys_io				; display AL
0465+  06DE             
0466+  06DE E5          	pop b
0467+  06DF E4          	pop a
0468+  06E0 09          	ret
0469+  06E1             
0470+  06E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0471+  06E1             ; INPUT 16BIT HEX INTEGER
0472+  06E1             ; read 16bit integer into A
0473+  06E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0474+  06E1             scan_u16x:
0475+  06E1 F8 10 00    	enter 16
0476+  06E4 D8          	push b
0477+  06E5 DA          	push d
0478+  06E6             
0479+  06E6 FA F1 FF    	lea d, [bp + -15]
0480+  06E9 07 34 05    	call gets				; get number
0481+  06EC             
0482+  06EC 32          	mov bl, [d]
0483+  06ED 37          	mov bh, bl
0484+  06EE 33 01 00    	mov bl, [d + 1]
0485+  06F1 07 E2 04    	call atoi				; convert to int in AL
0486+  06F4 23          	mov ah, al				; move to AH
0487+  06F5             
0488+  06F5 33 02 00    	mov bl, [d + 2]
0489+  06F8 37          	mov bh, bl
0490+  06F9 33 03 00    	mov bl, [d + 3]
0491+  06FC 07 E2 04    	call atoi				; convert to int in AL
0492+  06FF             
0493+  06FF E7          	pop d
0494+  0700 E5          	pop b
0495+  0701 F9          	leave
0496+  0702 09          	ret
0497+  0703             
0498+  0703             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0499+  0703             ; PRINT 8bit HEX INTEGER
0500+  0703             ; integer value in reg bl
0501+  0703             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0502+  0703             print_u8x:
0503+  0703 D7          	push a
0504+  0704 DD          	push bl
0505+  0705             
0506+  0705 07 F4 04    	call itoa				; convert bl to char in A
0507+  0708 2F          	mov bl, al				; save al
0508+  0709 19 00       	mov al, 0
0509+  070B 05 03       	syscall sys_io				; display AH
0510+  070D 24          	mov ah, bl				; retrieve al
0511+  070E 19 00       	mov al, 0
0512+  0710 05 03       	syscall sys_io				; display AL
0513+  0712             
0514+  0712 EA          	pop bl
0515+  0713 E4          	pop a
0516+  0714 09          	ret
0517+  0715             
0518+  0715             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0519+  0715             ; print 8bit decimal unsigned number
0520+  0715             ; input number in AL
0521+  0715             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0522+  0715             print_u8d:
0523+  0715 D7          	push a
0524+  0716 D8          	push b
0525+  0717             
0526+  0717 22 00       	mov ah, 0
0527+  0719 26 64 00    	mov b, 100
0528+  071C AE          	div a, b
0529+  071D D8          	push b			; save remainder
0530+  071E B9 00       	cmp al, 0
0531+  0720 C6 2A 07    	je skip100
0532+  0723 6A 30       	add al, $30
0533+  0725 23          	mov ah, al
0534+  0726 19 00       	mov al, 0
0535+  0728 05 03       	syscall sys_io	; print coeff
0536+  072A             skip100:
0537+  072A E4          	pop a
0538+  072B 22 00       	mov ah, 0
0539+  072D 26 0A 00    	mov b, 10
0540+  0730 AE          	div a, b
0541+  0731 D8          	push b			; save remainder
0542+  0732 B9 00       	cmp al, 0
0543+  0734 C6 3E 07    	je skip10
0544+  0737 6A 30       	add al, $30
0545+  0739 23          	mov ah, al
0546+  073A 19 00       	mov al, 0
0547+  073C 05 03       	syscall sys_io	; print coeff
0548+  073E             skip10:
0549+  073E E4          	pop a
0550+  073F 1B          	mov al, bl
0551+  0740 6A 30       	add al, $30
0552+  0742 23          	mov ah, al
0553+  0743 19 00       	mov al, 0
0554+  0745 05 03       	syscall sys_io	; print coeff
0555+  0747 E5          	pop b
0556+  0748 E4          	pop a
0557+  0749 09          	ret
0558+  074A             
0559+  074A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0560+  074A             ; INPUT 8BIT HEX INTEGER
0561+  074A             ; read 8bit integer into AL
0562+  074A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0563+  074A             scan_u8x:
0564+  074A F8 04 00    	enter 4
0565+  074D D8          	push b
0566+  074E DA          	push d
0567+  074F             
0568+  074F FA FD FF    	lea d, [bp + -3]
0569+  0752 07 34 05    	call gets				; get number
0570+  0755             
0571+  0755 32          	mov bl, [d]
0572+  0756 37          	mov bh, bl
0573+  0757 33 01 00    	mov bl, [d + 1]
0574+  075A 07 E2 04    	call atoi				; convert to int in AL
0575+  075D             
0576+  075D E7          	pop d
0577+  075E E5          	pop b
0578+  075F F9          	leave
0579+  0760 09          	ret
0580+  0761             
0581+  0761             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0582+  0761             ; input decimal number
0583+  0761             ; result in A
0584+  0761             ; 655'\0'
0585+  0761             ; low--------high
0586+  0761             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0761             scan_u16d:
0588+  0761 F8 08 00    	enter 8
0589+  0764 E2          	push si
0590+  0765 D8          	push b
0591+  0766 D9          	push c
0592+  0767 DA          	push d
0593+  0768 FA F9 FF    	lea d, [bp +- 7]
0594+  076B 07 34 05    	call gets
0595+  076E 07 62 04    	call strlen			; get string length in C
0596+  0771 7E          	dec c
0597+  0772 FD 4E       	mov si, d
0598+  0774 12          	mov a, c
0599+  0775 FD 99       	shl a
0600+  0777 3B CA 04    	mov d, table_power
0601+  077A 59          	add d, a
0602+  077B 38 00 00    	mov c, 0
0603+  077E             mul_loop:
0604+  077E F6          	lodsb			; load ASCII to al
0605+  077F B9 00       	cmp al, 0
0606+  0781 C6 94 07    	je mul_exit
0607+  0784 6F 30       	sub al, $30		; make into integer
0608+  0786 22 00       	mov ah, 0
0609+  0788 2A          	mov b, [d]
0610+  0789 AC          	mul a, b			; result in B since it fits in 16bits
0611+  078A 11          	mov a, b
0612+  078B 28          	mov b, c
0613+  078C 54          	add a, b
0614+  078D 39          	mov c, a
0615+  078E 63 02 00    	sub d, 2
0616+  0791 0A 7E 07    	jmp mul_loop
0617+  0794             mul_exit:
0618+  0794 12          	mov a, c
0619+  0795 E7          	pop d
0620+  0796 E6          	pop c
0621+  0797 E5          	pop b
0622+  0798 EF          	pop si
0623+  0799 F9          	leave
0624+  079A 09          	ret
0034   079B             ; --- END INCLUDE BLOCK
0035   079B             
0036   079B             
0037   079B             .end
tasm: Number of errors = 0
