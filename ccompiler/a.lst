0001   0000             ; --- FILENAME: life2.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 52 02 00      sub sp, 2 ; j
0012   0408 52 02 00      sub sp, 2 ; n
0013   040B             _for1_init:
0014   040B 26 00 00      mov b, 0
0015   040E D7            push a
0016   040F 11            mov a, b
0017   0410 45 FF FF      mov [bp + -1], a ; i
0018   0413 E4            pop a
0019   0414             _for1_cond:
0020   0414 2C FF FF      mov b, [bp + -1] ; i
0021   0417 D7            push a
0022   0418 11            mov a, b
0023   0419 26 28 00      mov b, 40
0024   041C B0            cmp a, b
0025   041D 0E            lodflgs
0026   041E 87 02         and al, %00000010 ; <
0027   0420 FD 9C         shr al
0028   0422 22 00         mov ah, 0
0029   0424 27            mov b, a
0030   0425 E4            pop a
0031   0426 C0 00 00      cmp b, 0
0032   0429 C6 A6 04      je _for1_exit
0033   042C             _for1_block:
0034   042C             _for2_init:
0035   042C 26 00 00      mov b, 0
0036   042F D7            push a
0037   0430 11            mov a, b
0038   0431 45 FD FF      mov [bp + -3], a ; j
0039   0434 E4            pop a
0040   0435             _for2_cond:
0041   0435 2C FD FF      mov b, [bp + -3] ; j
0042   0438 D7            push a
0043   0439 11            mov a, b
0044   043A 26 28 00      mov b, 40
0045   043D B0            cmp a, b
0046   043E 0E            lodflgs
0047   043F 87 02         and al, %00000010 ; <
0048   0441 FD 9C         shr al
0049   0443 22 00         mov ah, 0
0050   0445 27            mov b, a
0051   0446 E4            pop a
0052   0447 C0 00 00      cmp b, 0
0053   044A C6 96 04      je _for2_exit
0054   044D             _for2_block:
0055   044D 29 13 10      mov b, [nextState]
0056   0450 74            mov d, b
0057   0451 DA            push d
0058   0452 2C FF FF      mov b, [bp + -1] ; i
0059   0455 E7            pop d
0060   0456 10 28 00      mov a, 40
0061   0459 AC            mul a, b
0062   045A 5A            add d, b
0063   045B DA            push d
0064   045C 2C FD FF      mov b, [bp + -3] ; j
0065   045F E7            pop d
0066   0460 10 01 00      mov a, 1
0067   0463 AC            mul a, b
0068   0464 5A            add d, b
0069   0465 DA            push d
0070   0466 29 55 16      mov b, [currState]
0071   0469 D7            push a
0072   046A 74            mov d, b
0073   046B DA            push d
0074   046C 2C FF FF      mov b, [bp + -1] ; i
0075   046F E7            pop d
0076   0470 10 28 00      mov a, 40
0077   0473 AC            mul a, b
0078   0474 5A            add d, b
0079   0475 DA            push d
0080   0476 2C FD FF      mov b, [bp + -3] ; j
0081   0479 E7            pop d
0082   047A 10 01 00      mov a, 1
0083   047D AC            mul a, b
0084   047E 5A            add d, b
0085   047F 32            mov bl, [d]
0086   0480 A7 00         mov bh, 0
0087   0482 E4            pop a
0088   0483 E7            pop d
0089   0484 1B            mov al, bl
0090   0485 3E            mov [d], al
0091   0486             _for2_update:
0092   0486 2C FD FF      mov b, [bp + -3] ; j
0093   0489 11            mov a, b
0094   048A FD 77         inc b
0095   048C D7            push a
0096   048D 11            mov a, b
0097   048E 45 FD FF      mov [bp + -3], a ; j
0098   0491 E4            pop a
0099   0492 27            mov b, a
0100   0493 0A 35 04      jmp _for2_cond
0101   0496             _for2_exit:
0102   0496             _for1_update:
0103   0496 2C FF FF      mov b, [bp + -1] ; i
0104   0499 11            mov a, b
0105   049A FD 77         inc b
0106   049C D7            push a
0107   049D 11            mov a, b
0108   049E 45 FF FF      mov [bp + -1], a ; i
0109   04A1 E4            pop a
0110   04A2 27            mov b, a
0111   04A3 0A 14 04      jmp _for1_cond
0112   04A6             _for1_exit:
0113   04A6             _for3_init:
0114   04A6             _for3_cond:
0115   04A6             _for3_block:
0116   04A6             _for4_init:
0117   04A6 26 01 00      mov b, 1
0118   04A9 D7            push a
0119   04AA 11            mov a, b
0120   04AB 45 FF FF      mov [bp + -1], a ; i
0121   04AE E4            pop a
0122   04AF             _for4_cond:
0123   04AF 2C FF FF      mov b, [bp + -1] ; i
0124   04B2 D7            push a
0125   04B3 11            mov a, b
0126   04B4 26 28 00      mov b, 40
0127   04B7 D7            push a
0128   04B8 11            mov a, b
0129   04B9 26 01 00      mov b, 1
0130   04BC 60            sub a, b
0131   04BD 27            mov b, a
0132   04BE E4            pop a
0133   04BF B0            cmp a, b
0134   04C0 0E            lodflgs
0135   04C1 87 02         and al, %00000010 ; <
0136   04C3 FD 9C         shr al
0137   04C5 22 00         mov ah, 0
0138   04C7 27            mov b, a
0139   04C8 E4            pop a
0140   04C9 C0 00 00      cmp b, 0
0141   04CC C6 BA 05      je _for4_exit
0142   04CF             _for4_block:
0143   04CF             _for5_init:
0144   04CF 26 01 00      mov b, 1
0145   04D2 D7            push a
0146   04D3 11            mov a, b
0147   04D4 45 FD FF      mov [bp + -3], a ; j
0148   04D7 E4            pop a
0149   04D8             _for5_cond:
0150   04D8 2C FD FF      mov b, [bp + -3] ; j
0151   04DB D7            push a
0152   04DC 11            mov a, b
0153   04DD 26 28 00      mov b, 40
0154   04E0 D7            push a
0155   04E1 11            mov a, b
0156   04E2 26 01 00      mov b, 1
0157   04E5 60            sub a, b
0158   04E6 27            mov b, a
0159   04E7 E4            pop a
0160   04E8 B0            cmp a, b
0161   04E9 0E            lodflgs
0162   04EA 87 02         and al, %00000010 ; <
0163   04EC FD 9C         shr al
0164   04EE 22 00         mov ah, 0
0165   04F0 27            mov b, a
0166   04F1 E4            pop a
0167   04F2 C0 00 00      cmp b, 0
0168   04F5 C6 AA 05      je _for5_exit
0169   04F8             _for5_block:
0170   04F8 2C FF FF      mov b, [bp + -1] ; i
0171   04FB FD AB         swp b
0172   04FD D8            push b
0173   04FE 2C FD FF      mov b, [bp + -3] ; j
0174   0501 FD AB         swp b
0175   0503 D8            push b
0176   0504 07 4A 07      call neighbours
0177   0507 51 04 00      add sp, 4
0178   050A D7            push a
0179   050B 11            mov a, b
0180   050C 45 FB FF      mov [bp + -5], a ; n
0181   050F E4            pop a
0182   0510             _if6_cond:
0183   0510 2C FB FF      mov b, [bp + -5] ; n
0184   0513 D7            push a
0185   0514 11            mov a, b
0186   0515 26 02 00      mov b, 2
0187   0518 B0            cmp a, b
0188   0519 0E            lodflgs
0189   051A 87 02         and al, %00000010 ; <
0190   051C FD 9C         shr al
0191   051E 22 00         mov ah, 0
0192   0520 27            mov b, a
0193   0521 E4            pop a
0194   0522 D7            push a
0195   0523 11            mov a, b
0196   0524 2C FB FF      mov b, [bp + -5] ; n
0197   0527 D7            push a
0198   0528 11            mov a, b
0199   0529 26 03 00      mov b, 3
0200   052C B0            cmp a, b
0201   052D 0E            lodflgs
0202   052E 87 03         and al, %00000011
0203   0530 B9 00         cmp al, 0
0204   0532 0E            lodflgs
0205   0533 22 00         mov ah, 0
0206   0535 27            mov b, a
0207   0536 E4            pop a
0208   0537 8A            or a, b
0209   0538 27            mov b, a
0210   0539 E4            pop a
0211   053A C0 00 00      cmp b, 0
0212   053D C6 62 05      je _if6_else
0213   0540             _if6_true:
0214   0540 29 13 10      mov b, [nextState]
0215   0543 74            mov d, b
0216   0544 DA            push d
0217   0545 2C FF FF      mov b, [bp + -1] ; i
0218   0548 E7            pop d
0219   0549 10 28 00      mov a, 40
0220   054C AC            mul a, b
0221   054D 5A            add d, b
0222   054E DA            push d
0223   054F 2C FD FF      mov b, [bp + -3] ; j
0224   0552 E7            pop d
0225   0553 10 01 00      mov a, 1
0226   0556 AC            mul a, b
0227   0557 5A            add d, b
0228   0558 DA            push d
0229   0559 26 20 00      mov b, ' '
0230   055C E7            pop d
0231   055D 1B            mov al, bl
0232   055E 3E            mov [d], al
0233   055F 0A 9A 05      jmp _if6_exit
0234   0562             _if6_else:
0235   0562             _if7_cond:
0236   0562 2C FB FF      mov b, [bp + -5] ; n
0237   0565 D7            push a
0238   0566 11            mov a, b
0239   0567 26 03 00      mov b, 3
0240   056A B0            cmp a, b
0241   056B 0E            lodflgs
0242   056C 87 01         and al, %00000001 ; ==
0243   056E 22 00         mov ah, 0
0244   0570 27            mov b, a
0245   0571 E4            pop a
0246   0572 C0 00 00      cmp b, 0
0247   0575 C6 9A 05      je _if7_exit
0248   0578             _if7_true:
0249   0578 29 13 10      mov b, [nextState]
0250   057B 74            mov d, b
0251   057C DA            push d
0252   057D 2C FF FF      mov b, [bp + -1] ; i
0253   0580 E7            pop d
0254   0581 10 28 00      mov a, 40
0255   0584 AC            mul a, b
0256   0585 5A            add d, b
0257   0586 DA            push d
0258   0587 2C FD FF      mov b, [bp + -3] ; j
0259   058A E7            pop d
0260   058B 10 01 00      mov a, 1
0261   058E AC            mul a, b
0262   058F 5A            add d, b
0263   0590 DA            push d
0264   0591 26 40 00      mov b, '@'
0265   0594 E7            pop d
0266   0595 1B            mov al, bl
0267   0596 3E            mov [d], al
0268   0597 0A 9A 05      jmp _if7_exit
0269   059A             _if7_exit:
0270   059A             _if6_exit:
0271   059A             _for5_update:
0272   059A 2C FD FF      mov b, [bp + -3] ; j
0273   059D 11            mov a, b
0274   059E FD 77         inc b
0275   05A0 D7            push a
0276   05A1 11            mov a, b
0277   05A2 45 FD FF      mov [bp + -3], a ; j
0278   05A5 E4            pop a
0279   05A6 27            mov b, a
0280   05A7 0A D8 04      jmp _for5_cond
0281   05AA             _for5_exit:
0282   05AA             _for4_update:
0283   05AA 2C FF FF      mov b, [bp + -1] ; i
0284   05AD 11            mov a, b
0285   05AE FD 77         inc b
0286   05B0 D7            push a
0287   05B1 11            mov a, b
0288   05B2 45 FF FF      mov [bp + -1], a ; i
0289   05B5 E4            pop a
0290   05B6 27            mov b, a
0291   05B7 0A AF 04      jmp _for4_cond
0292   05BA             _for4_exit:
0293   05BA             _for8_init:
0294   05BA 26 01 00      mov b, 1
0295   05BD D7            push a
0296   05BE 11            mov a, b
0297   05BF 45 FF FF      mov [bp + -1], a ; i
0298   05C2 E4            pop a
0299   05C3             _for8_cond:
0300   05C3 2C FF FF      mov b, [bp + -1] ; i
0301   05C6 D7            push a
0302   05C7 11            mov a, b
0303   05C8 26 28 00      mov b, 40
0304   05CB D7            push a
0305   05CC 11            mov a, b
0306   05CD 26 01 00      mov b, 1
0307   05D0 60            sub a, b
0308   05D1 27            mov b, a
0309   05D2 E4            pop a
0310   05D3 B0            cmp a, b
0311   05D4 0E            lodflgs
0312   05D5 87 02         and al, %00000010 ; <
0313   05D7 FD 9C         shr al
0314   05D9 22 00         mov ah, 0
0315   05DB 27            mov b, a
0316   05DC E4            pop a
0317   05DD C0 00 00      cmp b, 0
0318   05E0 C6 65 06      je _for8_exit
0319   05E3             _for8_block:
0320   05E3             _for9_init:
0321   05E3 26 01 00      mov b, 1
0322   05E6 D7            push a
0323   05E7 11            mov a, b
0324   05E8 45 FD FF      mov [bp + -3], a ; j
0325   05EB E4            pop a
0326   05EC             _for9_cond:
0327   05EC 2C FD FF      mov b, [bp + -3] ; j
0328   05EF D7            push a
0329   05F0 11            mov a, b
0330   05F1 26 28 00      mov b, 40
0331   05F4 D7            push a
0332   05F5 11            mov a, b
0333   05F6 26 01 00      mov b, 1
0334   05F9 60            sub a, b
0335   05FA 27            mov b, a
0336   05FB E4            pop a
0337   05FC B0            cmp a, b
0338   05FD 0E            lodflgs
0339   05FE 87 02         and al, %00000010 ; <
0340   0600 FD 9C         shr al
0341   0602 22 00         mov ah, 0
0342   0604 27            mov b, a
0343   0605 E4            pop a
0344   0606 C0 00 00      cmp b, 0
0345   0609 C6 55 06      je _for9_exit
0346   060C             _for9_block:
0347   060C 29 55 16      mov b, [currState]
0348   060F 74            mov d, b
0349   0610 DA            push d
0350   0611 2C FF FF      mov b, [bp + -1] ; i
0351   0614 E7            pop d
0352   0615 10 28 00      mov a, 40
0353   0618 AC            mul a, b
0354   0619 5A            add d, b
0355   061A DA            push d
0356   061B 2C FD FF      mov b, [bp + -3] ; j
0357   061E E7            pop d
0358   061F 10 01 00      mov a, 1
0359   0622 AC            mul a, b
0360   0623 5A            add d, b
0361   0624 DA            push d
0362   0625 29 13 10      mov b, [nextState]
0363   0628 D7            push a
0364   0629 74            mov d, b
0365   062A DA            push d
0366   062B 2C FF FF      mov b, [bp + -1] ; i
0367   062E E7            pop d
0368   062F 10 28 00      mov a, 40
0369   0632 AC            mul a, b
0370   0633 5A            add d, b
0371   0634 DA            push d
0372   0635 2C FD FF      mov b, [bp + -3] ; j
0373   0638 E7            pop d
0374   0639 10 01 00      mov a, 1
0375   063C AC            mul a, b
0376   063D 5A            add d, b
0377   063E 32            mov bl, [d]
0378   063F A7 00         mov bh, 0
0379   0641 E4            pop a
0380   0642 E7            pop d
0381   0643 1B            mov al, bl
0382   0644 3E            mov [d], al
0383   0645             _for9_update:
0384   0645 2C FD FF      mov b, [bp + -3] ; j
0385   0648 11            mov a, b
0386   0649 FD 77         inc b
0387   064B D7            push a
0388   064C 11            mov a, b
0389   064D 45 FD FF      mov [bp + -3], a ; j
0390   0650 E4            pop a
0391   0651 27            mov b, a
0392   0652 0A EC 05      jmp _for9_cond
0393   0655             _for9_exit:
0394   0655             _for8_update:
0395   0655 2C FF FF      mov b, [bp + -1] ; i
0396   0658 11            mov a, b
0397   0659 FD 77         inc b
0398   065B D7            push a
0399   065C 11            mov a, b
0400   065D 45 FF FF      mov [bp + -1], a ; i
0401   0660 E4            pop a
0402   0661 27            mov b, a
0403   0662 0A C3 05      jmp _for8_cond
0404   0665             _for8_exit:
0405   0665 07 71 06      call show
0406   0668             _for3_update:
0407   0668 0A A6 04      jmp _for3_cond
0408   066B             _for3_exit:
0409   066B 26 00 00      mov b, 0
0410   066E F9            leave
0411   066F 05 0B         syscall sys_terminate_proc
0412   0671             
0413   0671             show:
0414   0671 D2            push bp
0415   0672 9B            mov bp, sp
0416   0673 52 02 00      sub sp, 2 ; i
0417   0676 52 02 00      sub sp, 2 ; j
0418   0679             _for10_init:
0419   0679 26 00 00      mov b, 0
0420   067C D7            push a
0421   067D 11            mov a, b
0422   067E 45 FF FF      mov [bp + -1], a ; i
0423   0681 E4            pop a
0424   0682             _for10_cond:
0425   0682 2C FF FF      mov b, [bp + -1] ; i
0426   0685 D7            push a
0427   0686 11            mov a, b
0428   0687 26 28 00      mov b, 40
0429   068A B0            cmp a, b
0430   068B 0E            lodflgs
0431   068C 87 02         and al, %00000010 ; <
0432   068E FD 9C         shr al
0433   0690 22 00         mov ah, 0
0434   0692 27            mov b, a
0435   0693 E4            pop a
0436   0694 C0 00 00      cmp b, 0
0437   0697 C6 09 07      je _for10_exit
0438   069A             _for10_block:
0439   069A             _for11_init:
0440   069A 26 00 00      mov b, 0
0441   069D D7            push a
0442   069E 11            mov a, b
0443   069F 45 FD FF      mov [bp + -3], a ; j
0444   06A2 E4            pop a
0445   06A3             _for11_cond:
0446   06A3 2C FD FF      mov b, [bp + -3] ; j
0447   06A6 D7            push a
0448   06A7 11            mov a, b
0449   06A8 26 28 00      mov b, 40
0450   06AB B0            cmp a, b
0451   06AC 0E            lodflgs
0452   06AD 87 02         and al, %00000010 ; <
0453   06AF FD 9C         shr al
0454   06B1 22 00         mov ah, 0
0455   06B3 27            mov b, a
0456   06B4 E4            pop a
0457   06B5 C0 00 00      cmp b, 0
0458   06B8 C6 EF 06      je _for11_exit
0459   06BB             _for11_block:
0460   06BB 29 55 16      mov b, [currState]
0461   06BE D7            push a
0462   06BF 74            mov d, b
0463   06C0 DA            push d
0464   06C1 2C FF FF      mov b, [bp + -1] ; i
0465   06C4 E7            pop d
0466   06C5 10 28 00      mov a, 40
0467   06C8 AC            mul a, b
0468   06C9 5A            add d, b
0469   06CA DA            push d
0470   06CB 2C FD FF      mov b, [bp + -3] ; j
0471   06CE E7            pop d
0472   06CF 10 01 00      mov a, 1
0473   06D2 AC            mul a, b
0474   06D3 5A            add d, b
0475   06D4 32            mov bl, [d]
0476   06D5 A7 00         mov bh, 0
0477   06D7 E4            pop a
0478   06D8 DD            push bl
0479   06D9 07 C8 09      call _putchar
0480   06DC 51 01 00      add sp, 1
0481   06DF             _for11_update:
0482   06DF 2C FD FF      mov b, [bp + -3] ; j
0483   06E2 11            mov a, b
0484   06E3 FD 77         inc b
0485   06E5 D7            push a
0486   06E6 11            mov a, b
0487   06E7 45 FD FF      mov [bp + -3], a ; j
0488   06EA E4            pop a
0489   06EB 27            mov b, a
0490   06EC 0A A3 06      jmp _for11_cond
0491   06EF             _for11_exit:
0492   06EF 26 0A 00      mov b, 10
0493   06F2 DD            push bl
0494   06F3 07 C8 09      call _putchar
0495   06F6 51 01 00      add sp, 1
0496   06F9             _for10_update:
0497   06F9 2C FF FF      mov b, [bp + -1] ; i
0498   06FC 11            mov a, b
0499   06FD FD 77         inc b
0500   06FF D7            push a
0501   0700 11            mov a, b
0502   0701 45 FF FF      mov [bp + -1], a ; i
0503   0704 E4            pop a
0504   0705 27            mov b, a
0505   0706 0A 82 06      jmp _for10_cond
0506   0709             _for10_exit:
0507   0709 F9            leave
0508   070A 09            ret
0509   070B             
0510   070B             alive:
0511   070B D2            push bp
0512   070C 9B            mov bp, sp
0513   070D             _if12_cond:
0514   070D 29 55 16      mov b, [currState]
0515   0710 D7            push a
0516   0711 74            mov d, b
0517   0712 DA            push d
0518   0713 2C 07 00      mov b, [bp + 7] ; i
0519   0716 E7            pop d
0520   0717 10 28 00      mov a, 40
0521   071A AC            mul a, b
0522   071B 5A            add d, b
0523   071C DA            push d
0524   071D 2C 05 00      mov b, [bp + 5] ; j
0525   0720 E7            pop d
0526   0721 10 01 00      mov a, 1
0527   0724 AC            mul a, b
0528   0725 5A            add d, b
0529   0726 32            mov bl, [d]
0530   0727 A7 00         mov bh, 0
0531   0729 E4            pop a
0532   072A D7            push a
0533   072B 11            mov a, b
0534   072C 26 40 00      mov b, '@'
0535   072F B0            cmp a, b
0536   0730 0E            lodflgs
0537   0731 87 01         and al, %00000001 ; ==
0538   0733 22 00         mov ah, 0
0539   0735 27            mov b, a
0540   0736 E4            pop a
0541   0737 C0 00 00      cmp b, 0
0542   073A C6 45 07      je _if12_else
0543   073D             _if12_true:
0544   073D 26 01 00      mov b, 1
0545   0740 F9            leave
0546   0741 09            ret
0547   0742 0A 4A 07      jmp _if12_exit
0548   0745             _if12_else:
0549   0745 26 00 00      mov b, 0
0550   0748 F9            leave
0551   0749 09            ret
0552   074A             _if12_exit:
0553   074A             
0554   074A             neighbours:
0555   074A D2            push bp
0556   074B 9B            mov bp, sp
0557   074C 52 02 00      sub sp, 2 ; count
0558   074F 26 00 00      mov b, 0
0559   0752 D7            push a
0560   0753 11            mov a, b
0561   0754 45 FF FF      mov [bp + -1], a ; count
0562   0757 E4            pop a
0563   0758             _if13_cond:
0564   0758 29 55 16      mov b, [currState]
0565   075B D7            push a
0566   075C 74            mov d, b
0567   075D DA            push d
0568   075E 2C 07 00      mov b, [bp + 7] ; i
0569   0761 D7            push a
0570   0762 11            mov a, b
0571   0763 26 01 00      mov b, 1
0572   0766 60            sub a, b
0573   0767 27            mov b, a
0574   0768 E4            pop a
0575   0769 E7            pop d
0576   076A 10 28 00      mov a, 40
0577   076D AC            mul a, b
0578   076E 5A            add d, b
0579   076F DA            push d
0580   0770 2C 05 00      mov b, [bp + 5] ; j
0581   0773 E7            pop d
0582   0774 10 01 00      mov a, 1
0583   0777 AC            mul a, b
0584   0778 5A            add d, b
0585   0779 32            mov bl, [d]
0586   077A A7 00         mov bh, 0
0587   077C E4            pop a
0588   077D D7            push a
0589   077E 11            mov a, b
0590   077F 26 40 00      mov b, '@'
0591   0782 B0            cmp a, b
0592   0783 0E            lodflgs
0593   0784 87 01         and al, %00000001 ; ==
0594   0786 22 00         mov ah, 0
0595   0788 27            mov b, a
0596   0789 E4            pop a
0597   078A C0 00 00      cmp b, 0
0598   078D C6 A0 07      je _if13_exit
0599   0790             _if13_true:
0600   0790 2C FF FF      mov b, [bp + -1] ; count
0601   0793 11            mov a, b
0602   0794 FD 77         inc b
0603   0796 D7            push a
0604   0797 11            mov a, b
0605   0798 45 FF FF      mov [bp + -1], a ; count
0606   079B E4            pop a
0607   079C 27            mov b, a
0608   079D 0A A0 07      jmp _if13_exit
0609   07A0             _if13_exit:
0610   07A0             _if14_cond:
0611   07A0 29 55 16      mov b, [currState]
0612   07A3 D7            push a
0613   07A4 74            mov d, b
0614   07A5 DA            push d
0615   07A6 2C 07 00      mov b, [bp + 7] ; i
0616   07A9 D7            push a
0617   07AA 11            mov a, b
0618   07AB 26 01 00      mov b, 1
0619   07AE 60            sub a, b
0620   07AF 27            mov b, a
0621   07B0 E4            pop a
0622   07B1 E7            pop d
0623   07B2 10 28 00      mov a, 40
0624   07B5 AC            mul a, b
0625   07B6 5A            add d, b
0626   07B7 DA            push d
0627   07B8 2C 05 00      mov b, [bp + 5] ; j
0628   07BB D7            push a
0629   07BC 11            mov a, b
0630   07BD 26 01 00      mov b, 1
0631   07C0 60            sub a, b
0632   07C1 27            mov b, a
0633   07C2 E4            pop a
0634   07C3 E7            pop d
0635   07C4 10 01 00      mov a, 1
0636   07C7 AC            mul a, b
0637   07C8 5A            add d, b
0638   07C9 32            mov bl, [d]
0639   07CA A7 00         mov bh, 0
0640   07CC E4            pop a
0641   07CD D7            push a
0642   07CE 11            mov a, b
0643   07CF 26 40 00      mov b, '@'
0644   07D2 B0            cmp a, b
0645   07D3 0E            lodflgs
0646   07D4 87 01         and al, %00000001 ; ==
0647   07D6 22 00         mov ah, 0
0648   07D8 27            mov b, a
0649   07D9 E4            pop a
0650   07DA C0 00 00      cmp b, 0
0651   07DD C6 F0 07      je _if14_exit
0652   07E0             _if14_true:
0653   07E0 2C FF FF      mov b, [bp + -1] ; count
0654   07E3 11            mov a, b
0655   07E4 FD 77         inc b
0656   07E6 D7            push a
0657   07E7 11            mov a, b
0658   07E8 45 FF FF      mov [bp + -1], a ; count
0659   07EB E4            pop a
0660   07EC 27            mov b, a
0661   07ED 0A F0 07      jmp _if14_exit
0662   07F0             _if14_exit:
0663   07F0             _if15_cond:
0664   07F0 29 55 16      mov b, [currState]
0665   07F3 D7            push a
0666   07F4 74            mov d, b
0667   07F5 DA            push d
0668   07F6 2C 07 00      mov b, [bp + 7] ; i
0669   07F9 D7            push a
0670   07FA 11            mov a, b
0671   07FB 26 01 00      mov b, 1
0672   07FE 60            sub a, b
0673   07FF 27            mov b, a
0674   0800 E4            pop a
0675   0801 E7            pop d
0676   0802 10 28 00      mov a, 40
0677   0805 AC            mul a, b
0678   0806 5A            add d, b
0679   0807 DA            push d
0680   0808 2C 05 00      mov b, [bp + 5] ; j
0681   080B D7            push a
0682   080C 11            mov a, b
0683   080D 26 01 00      mov b, 1
0684   0810 54            add a, b
0685   0811 27            mov b, a
0686   0812 E4            pop a
0687   0813 E7            pop d
0688   0814 10 01 00      mov a, 1
0689   0817 AC            mul a, b
0690   0818 5A            add d, b
0691   0819 32            mov bl, [d]
0692   081A A7 00         mov bh, 0
0693   081C E4            pop a
0694   081D D7            push a
0695   081E 11            mov a, b
0696   081F 26 40 00      mov b, '@'
0697   0822 B0            cmp a, b
0698   0823 0E            lodflgs
0699   0824 87 01         and al, %00000001 ; ==
0700   0826 22 00         mov ah, 0
0701   0828 27            mov b, a
0702   0829 E4            pop a
0703   082A C0 00 00      cmp b, 0
0704   082D C6 40 08      je _if15_exit
0705   0830             _if15_true:
0706   0830 2C FF FF      mov b, [bp + -1] ; count
0707   0833 11            mov a, b
0708   0834 FD 77         inc b
0709   0836 D7            push a
0710   0837 11            mov a, b
0711   0838 45 FF FF      mov [bp + -1], a ; count
0712   083B E4            pop a
0713   083C 27            mov b, a
0714   083D 0A 40 08      jmp _if15_exit
0715   0840             _if15_exit:
0716   0840             _if16_cond:
0717   0840 29 55 16      mov b, [currState]
0718   0843 D7            push a
0719   0844 74            mov d, b
0720   0845 DA            push d
0721   0846 2C 07 00      mov b, [bp + 7] ; i
0722   0849 E7            pop d
0723   084A 10 28 00      mov a, 40
0724   084D AC            mul a, b
0725   084E 5A            add d, b
0726   084F DA            push d
0727   0850 2C 05 00      mov b, [bp + 5] ; j
0728   0853 D7            push a
0729   0854 11            mov a, b
0730   0855 26 01 00      mov b, 1
0731   0858 60            sub a, b
0732   0859 27            mov b, a
0733   085A E4            pop a
0734   085B E7            pop d
0735   085C 10 01 00      mov a, 1
0736   085F AC            mul a, b
0737   0860 5A            add d, b
0738   0861 32            mov bl, [d]
0739   0862 A7 00         mov bh, 0
0740   0864 E4            pop a
0741   0865 D7            push a
0742   0866 11            mov a, b
0743   0867 26 40 00      mov b, '@'
0744   086A B0            cmp a, b
0745   086B 0E            lodflgs
0746   086C 87 01         and al, %00000001 ; ==
0747   086E 22 00         mov ah, 0
0748   0870 27            mov b, a
0749   0871 E4            pop a
0750   0872 C0 00 00      cmp b, 0
0751   0875 C6 88 08      je _if16_exit
0752   0878             _if16_true:
0753   0878 2C FF FF      mov b, [bp + -1] ; count
0754   087B 11            mov a, b
0755   087C FD 77         inc b
0756   087E D7            push a
0757   087F 11            mov a, b
0758   0880 45 FF FF      mov [bp + -1], a ; count
0759   0883 E4            pop a
0760   0884 27            mov b, a
0761   0885 0A 88 08      jmp _if16_exit
0762   0888             _if16_exit:
0763   0888             _if17_cond:
0764   0888 29 55 16      mov b, [currState]
0765   088B D7            push a
0766   088C 74            mov d, b
0767   088D DA            push d
0768   088E 2C 07 00      mov b, [bp + 7] ; i
0769   0891 E7            pop d
0770   0892 10 28 00      mov a, 40
0771   0895 AC            mul a, b
0772   0896 5A            add d, b
0773   0897 DA            push d
0774   0898 2C 05 00      mov b, [bp + 5] ; j
0775   089B D7            push a
0776   089C 11            mov a, b
0777   089D 26 01 00      mov b, 1
0778   08A0 54            add a, b
0779   08A1 27            mov b, a
0780   08A2 E4            pop a
0781   08A3 E7            pop d
0782   08A4 10 01 00      mov a, 1
0783   08A7 AC            mul a, b
0784   08A8 5A            add d, b
0785   08A9 32            mov bl, [d]
0786   08AA A7 00         mov bh, 0
0787   08AC E4            pop a
0788   08AD D7            push a
0789   08AE 11            mov a, b
0790   08AF 26 40 00      mov b, '@'
0791   08B2 B0            cmp a, b
0792   08B3 0E            lodflgs
0793   08B4 87 01         and al, %00000001 ; ==
0794   08B6 22 00         mov ah, 0
0795   08B8 27            mov b, a
0796   08B9 E4            pop a
0797   08BA C0 00 00      cmp b, 0
0798   08BD C6 D0 08      je _if17_exit
0799   08C0             _if17_true:
0800   08C0 2C FF FF      mov b, [bp + -1] ; count
0801   08C3 11            mov a, b
0802   08C4 FD 77         inc b
0803   08C6 D7            push a
0804   08C7 11            mov a, b
0805   08C8 45 FF FF      mov [bp + -1], a ; count
0806   08CB E4            pop a
0807   08CC 27            mov b, a
0808   08CD 0A D0 08      jmp _if17_exit
0809   08D0             _if17_exit:
0810   08D0             _if18_cond:
0811   08D0 29 55 16      mov b, [currState]
0812   08D3 D7            push a
0813   08D4 74            mov d, b
0814   08D5 DA            push d
0815   08D6 2C 07 00      mov b, [bp + 7] ; i
0816   08D9 D7            push a
0817   08DA 11            mov a, b
0818   08DB 26 01 00      mov b, 1
0819   08DE 54            add a, b
0820   08DF 27            mov b, a
0821   08E0 E4            pop a
0822   08E1 E7            pop d
0823   08E2 10 28 00      mov a, 40
0824   08E5 AC            mul a, b
0825   08E6 5A            add d, b
0826   08E7 DA            push d
0827   08E8 2C 05 00      mov b, [bp + 5] ; j
0828   08EB D7            push a
0829   08EC 11            mov a, b
0830   08ED 26 01 00      mov b, 1
0831   08F0 60            sub a, b
0832   08F1 27            mov b, a
0833   08F2 E4            pop a
0834   08F3 E7            pop d
0835   08F4 10 01 00      mov a, 1
0836   08F7 AC            mul a, b
0837   08F8 5A            add d, b
0838   08F9 32            mov bl, [d]
0839   08FA A7 00         mov bh, 0
0840   08FC E4            pop a
0841   08FD D7            push a
0842   08FE 11            mov a, b
0843   08FF 26 40 00      mov b, '@'
0844   0902 B0            cmp a, b
0845   0903 0E            lodflgs
0846   0904 87 01         and al, %00000001 ; ==
0847   0906 22 00         mov ah, 0
0848   0908 27            mov b, a
0849   0909 E4            pop a
0850   090A C0 00 00      cmp b, 0
0851   090D C6 20 09      je _if18_exit
0852   0910             _if18_true:
0853   0910 2C FF FF      mov b, [bp + -1] ; count
0854   0913 11            mov a, b
0855   0914 FD 77         inc b
0856   0916 D7            push a
0857   0917 11            mov a, b
0858   0918 45 FF FF      mov [bp + -1], a ; count
0859   091B E4            pop a
0860   091C 27            mov b, a
0861   091D 0A 20 09      jmp _if18_exit
0862   0920             _if18_exit:
0863   0920             _if19_cond:
0864   0920 29 55 16      mov b, [currState]
0865   0923 D7            push a
0866   0924 74            mov d, b
0867   0925 DA            push d
0868   0926 2C 07 00      mov b, [bp + 7] ; i
0869   0929 D7            push a
0870   092A 11            mov a, b
0871   092B 26 01 00      mov b, 1
0872   092E 54            add a, b
0873   092F 27            mov b, a
0874   0930 E4            pop a
0875   0931 E7            pop d
0876   0932 10 28 00      mov a, 40
0877   0935 AC            mul a, b
0878   0936 5A            add d, b
0879   0937 DA            push d
0880   0938 2C 05 00      mov b, [bp + 5] ; j
0881   093B E7            pop d
0882   093C 10 01 00      mov a, 1
0883   093F AC            mul a, b
0884   0940 5A            add d, b
0885   0941 32            mov bl, [d]
0886   0942 A7 00         mov bh, 0
0887   0944 E4            pop a
0888   0945 D7            push a
0889   0946 11            mov a, b
0890   0947 26 40 00      mov b, '@'
0891   094A B0            cmp a, b
0892   094B 0E            lodflgs
0893   094C 87 01         and al, %00000001 ; ==
0894   094E 22 00         mov ah, 0
0895   0950 27            mov b, a
0896   0951 E4            pop a
0897   0952 C0 00 00      cmp b, 0
0898   0955 C6 68 09      je _if19_exit
0899   0958             _if19_true:
0900   0958 2C FF FF      mov b, [bp + -1] ; count
0901   095B 11            mov a, b
0902   095C FD 77         inc b
0903   095E D7            push a
0904   095F 11            mov a, b
0905   0960 45 FF FF      mov [bp + -1], a ; count
0906   0963 E4            pop a
0907   0964 27            mov b, a
0908   0965 0A 68 09      jmp _if19_exit
0909   0968             _if19_exit:
0910   0968             _if20_cond:
0911   0968 29 55 16      mov b, [currState]
0912   096B D7            push a
0913   096C 74            mov d, b
0914   096D DA            push d
0915   096E 2C 07 00      mov b, [bp + 7] ; i
0916   0971 D7            push a
0917   0972 11            mov a, b
0918   0973 26 01 00      mov b, 1
0919   0976 54            add a, b
0920   0977 27            mov b, a
0921   0978 E4            pop a
0922   0979 E7            pop d
0923   097A 10 28 00      mov a, 40
0924   097D AC            mul a, b
0925   097E 5A            add d, b
0926   097F DA            push d
0927   0980 2C 05 00      mov b, [bp + 5] ; j
0928   0983 D7            push a
0929   0984 11            mov a, b
0930   0985 26 01 00      mov b, 1
0931   0988 54            add a, b
0932   0989 27            mov b, a
0933   098A E4            pop a
0934   098B E7            pop d
0935   098C 10 01 00      mov a, 1
0936   098F AC            mul a, b
0937   0990 5A            add d, b
0938   0991 32            mov bl, [d]
0939   0992 A7 00         mov bh, 0
0940   0994 E4            pop a
0941   0995 D7            push a
0942   0996 11            mov a, b
0943   0997 26 40 00      mov b, '@'
0944   099A B0            cmp a, b
0945   099B 0E            lodflgs
0946   099C 87 01         and al, %00000001 ; ==
0947   099E 22 00         mov ah, 0
0948   09A0 27            mov b, a
0949   09A1 E4            pop a
0950   09A2 C0 00 00      cmp b, 0
0951   09A5 C6 B8 09      je _if20_exit
0952   09A8             _if20_true:
0953   09A8 2C FF FF      mov b, [bp + -1] ; count
0954   09AB 11            mov a, b
0955   09AC FD 77         inc b
0956   09AE D7            push a
0957   09AF 11            mov a, b
0958   09B0 45 FF FF      mov [bp + -1], a ; count
0959   09B3 E4            pop a
0960   09B4 27            mov b, a
0961   09B5 0A B8 09      jmp _if20_exit
0962   09B8             _if20_exit:
0963   09B8 2C FF FF      mov b, [bp + -1] ; count
0964   09BB F9            leave
0965   09BC 09            ret
0966   09BD             
0967   09BD             print:
0968   09BD D2            push bp
0969   09BE 9B            mov bp, sp
0970   09BF             
0971   09BF             ; --- BEGIN INLINE ASM BLOCK
0972   09BF 17 05 00      mov a, [bp + 5]
0973   09C2 3C            mov d, a
0974   09C3 07 A3 18      call puts
0975   09C6             ; --- END INLINE ASM BLOCK
0976   09C6             
0977   09C6 F9            leave
0978   09C7 09            ret
0979   09C8             
0980   09C8             _putchar:
0981   09C8 D2            push bp
0982   09C9 9B            mov bp, sp
0983   09CA             
0984   09CA             ; --- BEGIN INLINE ASM BLOCK
0985   09CA 20 05 00      mov al, [bp + 5]
0986   09CD 23            mov ah, al
0987   09CE 07 69 17      call putchar
0988   09D1             ; --- END INLINE ASM BLOCK
0989   09D1             
0990   09D1 F9            leave
0991   09D2 09            ret
0992   09D3             ; --- END TEXT BLOCK
0993   09D3             
0994   09D3             ; --- BEGIN DATA BLOCK
0995   09D3 00 00 00 00 nextState_data: .fill 1600, 0
0995   09D7 00 00 00 00 
0995   09DB 00 00 00 00 
0995   09DF 00 00 00 00 
0995   09E3 00 00 00 00 
0995   09E7 00 00 00 00 
0995   09EB 00 00 00 00 
0995   09EF 00 00 00 00 
0995   09F3 00 00 00 00 
0995   09F7 00 00 00 00 
0995   09FB 00 00 00 00 
0995   09FF 00 00 00 00 
0995   0A03 00 00 00 00 
0995   0A07 00 00 00 00 
0995   0A0B 00 00 00 00 
0995   0A0F 00 00 00 00 
0995   0A13 00 00 00 00 
0995   0A17 00 00 00 00 
0995   0A1B 00 00 00 00 
0995   0A1F 00 00 00 00 
0995   0A23 00 00 00 00 
0995   0A27 00 00 00 00 
0995   0A2B 00 00 00 00 
0995   0A2F 00 00 00 00 
0995   0A33 00 00 00 00 
0995   0A37 00 00 00 00 
0995   0A3B 00 00 00 00 
0995   0A3F 00 00 00 00 
0995   0A43 00 00 00 00 
0995   0A47 00 00 00 00 
0995   0A4B 00 00 00 00 
0995   0A4F 00 00 00 00 
0995   0A53 00 00 00 00 
0995   0A57 00 00 00 00 
0995   0A5B 00 00 00 00 
0995   0A5F 00 00 00 00 
0995   0A63 00 00 00 00 
0995   0A67 00 00 00 00 
0995   0A6B 00 00 00 00 
0995   0A6F 00 00 00 00 
0995   0A73 00 00 00 00 
0995   0A77 00 00 00 00 
0995   0A7B 00 00 00 00 
0995   0A7F 00 00 00 00 
0995   0A83 00 00 00 00 
0995   0A87 00 00 00 00 
0995   0A8B 00 00 00 00 
0995   0A8F 00 00 00 00 
0995   0A93 00 00 00 00 
0995   0A97 00 00 00 00 
0995   0A9B 00 00 00 00 
0995   0A9F 00 00 00 00 
0995   0AA3 00 00 00 00 
0995   0AA7 00 00 00 00 
0995   0AAB 00 00 00 00 
0995   0AAF 00 00 00 00 
0995   0AB3 00 00 00 00 
0995   0AB7 00 00 00 00 
0995   0ABB 00 00 00 00 
0995   0ABF 00 00 00 00 
0995   0AC3 00 00 00 00 
0995   0AC7 00 00 00 00 
0995   0ACB 00 00 00 00 
0995   0ACF 00 00 00 00 
0995   0AD3 00 00 00 00 
0995   0AD7 00 00 00 00 
0995   0ADB 00 00 00 00 
0995   0ADF 00 00 00 00 
0995   0AE3 00 00 00 00 
0995   0AE7 00 00 00 00 
0995   0AEB 00 00 00 00 
0995   0AEF 00 00 00 00 
0995   0AF3 00 00 00 00 
0995   0AF7 00 00 00 00 
0995   0AFB 00 00 00 00 
0995   0AFF 00 00 00 00 
0995   0B03 00 00 00 00 
0995   0B07 00 00 00 00 
0995   0B0B 00 00 00 00 
0995   0B0F 00 00 00 00 
0995   0B13 00 00 00 00 
0995   0B17 00 00 00 00 
0995   0B1B 00 00 00 00 
0995   0B1F 00 00 00 00 
0995   0B23 00 00 00 00 
0995   0B27 00 00 00 00 
0995   0B2B 00 00 00 00 
0995   0B2F 00 00 00 00 
0995   0B33 00 00 00 00 
0995   0B37 00 00 00 00 
0995   0B3B 00 00 00 00 
0995   0B3F 00 00 00 00 
0995   0B43 00 00 00 00 
0995   0B47 00 00 00 00 
0995   0B4B 00 00 00 00 
0995   0B4F 00 00 00 00 
0995   0B53 00 00 00 00 
0995   0B57 00 00 00 00 
0995   0B5B 00 00 00 00 
0995   0B5F 00 00 00 00 
0995   0B63 00 00 00 00 
0995   0B67 00 00 00 00 
0995   0B6B 00 00 00 00 
0995   0B6F 00 00 00 00 
0995   0B73 00 00 00 00 
0995   0B77 00 00 00 00 
0995   0B7B 00 00 00 00 
0995   0B7F 00 00 00 00 
0995   0B83 00 00 00 00 
0995   0B87 00 00 00 00 
0995   0B8B 00 00 00 00 
0995   0B8F 00 00 00 00 
0995   0B93 00 00 00 00 
0995   0B97 00 00 00 00 
0995   0B9B 00 00 00 00 
0995   0B9F 00 00 00 00 
0995   0BA3 00 00 00 00 
0995   0BA7 00 00 00 00 
0995   0BAB 00 00 00 00 
0995   0BAF 00 00 00 00 
0995   0BB3 00 00 00 00 
0995   0BB7 00 00 00 00 
0995   0BBB 00 00 00 00 
0995   0BBF 00 00 00 00 
0995   0BC3 00 00 00 00 
0995   0BC7 00 00 00 00 
0995   0BCB 00 00 00 00 
0995   0BCF 00 00 00 00 
0995   0BD3 00 00 00 00 
0995   0BD7 00 00 00 00 
0995   0BDB 00 00 00 00 
0995   0BDF 00 00 00 00 
0995   0BE3 00 00 00 00 
0995   0BE7 00 00 00 00 
0995   0BEB 00 00 00 00 
0995   0BEF 00 00 00 00 
0995   0BF3 00 00 00 00 
0995   0BF7 00 00 00 00 
0995   0BFB 00 00 00 00 
0995   0BFF 00 00 00 00 
0995   0C03 00 00 00 00 
0995   0C07 00 00 00 00 
0995   0C0B 00 00 00 00 
0995   0C0F 00 00 00 00 
0995   0C13 00 00 00 00 
0995   0C17 00 00 00 00 
0995   0C1B 00 00 00 00 
0995   0C1F 00 00 00 00 
0995   0C23 00 00 00 00 
0995   0C27 00 00 00 00 
0995   0C2B 00 00 00 00 
0995   0C2F 00 00 00 00 
0995   0C33 00 00 00 00 
0995   0C37 00 00 00 00 
0995   0C3B 00 00 00 00 
0995   0C3F 00 00 00 00 
0995   0C43 00 00 00 00 
0995   0C47 00 00 00 00 
0995   0C4B 00 00 00 00 
0995   0C4F 00 00 00 00 
0995   0C53 00 00 00 00 
0995   0C57 00 00 00 00 
0995   0C5B 00 00 00 00 
0995   0C5F 00 00 00 00 
0995   0C63 00 00 00 00 
0995   0C67 00 00 00 00 
0995   0C6B 00 00 00 00 
0995   0C6F 00 00 00 00 
0995   0C73 00 00 00 00 
0995   0C77 00 00 00 00 
0995   0C7B 00 00 00 00 
0995   0C7F 00 00 00 00 
0995   0C83 00 00 00 00 
0995   0C87 00 00 00 00 
0995   0C8B 00 00 00 00 
0995   0C8F 00 00 00 00 
0995   0C93 00 00 00 00 
0995   0C97 00 00 00 00 
0995   0C9B 00 00 00 00 
0995   0C9F 00 00 00 00 
0995   0CA3 00 00 00 00 
0995   0CA7 00 00 00 00 
0995   0CAB 00 00 00 00 
0995   0CAF 00 00 00 00 
0995   0CB3 00 00 00 00 
0995   0CB7 00 00 00 00 
0995   0CBB 00 00 00 00 
0995   0CBF 00 00 00 00 
0995   0CC3 00 00 00 00 
0995   0CC7 00 00 00 00 
0995   0CCB 00 00 00 00 
0995   0CCF 00 00 00 00 
0995   0CD3 00 00 00 00 
0995   0CD7 00 00 00 00 
0995   0CDB 00 00 00 00 
0995   0CDF 00 00 00 00 
0995   0CE3 00 00 00 00 
0995   0CE7 00 00 00 00 
0995   0CEB 00 00 00 00 
0995   0CEF 00 00 00 00 
0995   0CF3 00 00 00 00 
0995   0CF7 00 00 00 00 
0995   0CFB 00 00 00 00 
0995   0CFF 00 00 00 00 
0995   0D03 00 00 00 00 
0995   0D07 00 00 00 00 
0995   0D0B 00 00 00 00 
0995   0D0F 00 00 00 00 
0995   0D13 00 00 00 00 
0995   0D17 00 00 00 00 
0995   0D1B 00 00 00 00 
0995   0D1F 00 00 00 00 
0995   0D23 00 00 00 00 
0995   0D27 00 00 00 00 
0995   0D2B 00 00 00 00 
0995   0D2F 00 00 00 00 
0995   0D33 00 00 00 00 
0995   0D37 00 00 00 00 
0995   0D3B 00 00 00 00 
0995   0D3F 00 00 00 00 
0995   0D43 00 00 00 00 
0995   0D47 00 00 00 00 
0995   0D4B 00 00 00 00 
0995   0D4F 00 00 00 00 
0995   0D53 00 00 00 00 
0995   0D57 00 00 00 00 
0995   0D5B 00 00 00 00 
0995   0D5F 00 00 00 00 
0995   0D63 00 00 00 00 
0995   0D67 00 00 00 00 
0995   0D6B 00 00 00 00 
0995   0D6F 00 00 00 00 
0995   0D73 00 00 00 00 
0995   0D77 00 00 00 00 
0995   0D7B 00 00 00 00 
0995   0D7F 00 00 00 00 
0995   0D83 00 00 00 00 
0995   0D87 00 00 00 00 
0995   0D8B 00 00 00 00 
0995   0D8F 00 00 00 00 
0995   0D93 00 00 00 00 
0995   0D97 00 00 00 00 
0995   0D9B 00 00 00 00 
0995   0D9F 00 00 00 00 
0995   0DA3 00 00 00 00 
0995   0DA7 00 00 00 00 
0995   0DAB 00 00 00 00 
0995   0DAF 00 00 00 00 
0995   0DB3 00 00 00 00 
0995   0DB7 00 00 00 00 
0995   0DBB 00 00 00 00 
0995   0DBF 00 00 00 00 
0995   0DC3 00 00 00 00 
0995   0DC7 00 00 00 00 
0995   0DCB 00 00 00 00 
0995   0DCF 00 00 00 00 
0995   0DD3 00 00 00 00 
0995   0DD7 00 00 00 00 
0995   0DDB 00 00 00 00 
0995   0DDF 00 00 00 00 
0995   0DE3 00 00 00 00 
0995   0DE7 00 00 00 00 
0995   0DEB 00 00 00 00 
0995   0DEF 00 00 00 00 
0995   0DF3 00 00 00 00 
0995   0DF7 00 00 00 00 
0995   0DFB 00 00 00 00 
0995   0DFF 00 00 00 00 
0995   0E03 00 00 00 00 
0995   0E07 00 00 00 00 
0995   0E0B 00 00 00 00 
0995   0E0F 00 00 00 00 
0995   0E13 00 00 00 00 
0995   0E17 00 00 00 00 
0995   0E1B 00 00 00 00 
0995   0E1F 00 00 00 00 
0995   0E23 00 00 00 00 
0995   0E27 00 00 00 00 
0995   0E2B 00 00 00 00 
0995   0E2F 00 00 00 00 
0995   0E33 00 00 00 00 
0995   0E37 00 00 00 00 
0995   0E3B 00 00 00 00 
0995   0E3F 00 00 00 00 
0995   0E43 00 00 00 00 
0995   0E47 00 00 00 00 
0995   0E4B 00 00 00 00 
0995   0E4F 00 00 00 00 
0995   0E53 00 00 00 00 
0995   0E57 00 00 00 00 
0995   0E5B 00 00 00 00 
0995   0E5F 00 00 00 00 
0995   0E63 00 00 00 00 
0995   0E67 00 00 00 00 
0995   0E6B 00 00 00 00 
0995   0E6F 00 00 00 00 
0995   0E73 00 00 00 00 
0995   0E77 00 00 00 00 
0995   0E7B 00 00 00 00 
0995   0E7F 00 00 00 00 
0995   0E83 00 00 00 00 
0995   0E87 00 00 00 00 
0995   0E8B 00 00 00 00 
0995   0E8F 00 00 00 00 
0995   0E93 00 00 00 00 
0995   0E97 00 00 00 00 
0995   0E9B 00 00 00 00 
0995   0E9F 00 00 00 00 
0995   0EA3 00 00 00 00 
0995   0EA7 00 00 00 00 
0995   0EAB 00 00 00 00 
0995   0EAF 00 00 00 00 
0995   0EB3 00 00 00 00 
0995   0EB7 00 00 00 00 
0995   0EBB 00 00 00 00 
0995   0EBF 00 00 00 00 
0995   0EC3 00 00 00 00 
0995   0EC7 00 00 00 00 
0995   0ECB 00 00 00 00 
0995   0ECF 00 00 00 00 
0995   0ED3 00 00 00 00 
0995   0ED7 00 00 00 00 
0995   0EDB 00 00 00 00 
0995   0EDF 00 00 00 00 
0995   0EE3 00 00 00 00 
0995   0EE7 00 00 00 00 
0995   0EEB 00 00 00 00 
0995   0EEF 00 00 00 00 
0995   0EF3 00 00 00 00 
0995   0EF7 00 00 00 00 
0995   0EFB 00 00 00 00 
0995   0EFF 00 00 00 00 
0995   0F03 00 00 00 00 
0995   0F07 00 00 00 00 
0995   0F0B 00 00 00 00 
0995   0F0F 00 00 00 00 
0995   0F13 00 00 00 00 
0995   0F17 00 00 00 00 
0995   0F1B 00 00 00 00 
0995   0F1F 00 00 00 00 
0995   0F23 00 00 00 00 
0995   0F27 00 00 00 00 
0995   0F2B 00 00 00 00 
0995   0F2F 00 00 00 00 
0995   0F33 00 00 00 00 
0995   0F37 00 00 00 00 
0995   0F3B 00 00 00 00 
0995   0F3F 00 00 00 00 
0995   0F43 00 00 00 00 
0995   0F47 00 00 00 00 
0995   0F4B 00 00 00 00 
0995   0F4F 00 00 00 00 
0995   0F53 00 00 00 00 
0995   0F57 00 00 00 00 
0995   0F5B 00 00 00 00 
0995   0F5F 00 00 00 00 
0995   0F63 00 00 00 00 
0995   0F67 00 00 00 00 
0995   0F6B 00 00 00 00 
0995   0F6F 00 00 00 00 
0995   0F73 00 00 00 00 
0995   0F77 00 00 00 00 
0995   0F7B 00 00 00 00 
0995   0F7F 00 00 00 00 
0995   0F83 00 00 00 00 
0995   0F87 00 00 00 00 
0995   0F8B 00 00 00 00 
0995   0F8F 00 00 00 00 
0995   0F93 00 00 00 00 
0995   0F97 00 00 00 00 
0995   0F9B 00 00 00 00 
0995   0F9F 00 00 00 00 
0995   0FA3 00 00 00 00 
0995   0FA7 00 00 00 00 
0995   0FAB 00 00 00 00 
0995   0FAF 00 00 00 00 
0995   0FB3 00 00 00 00 
0995   0FB7 00 00 00 00 
0995   0FBB 00 00 00 00 
0995   0FBF 00 00 00 00 
0995   0FC3 00 00 00 00 
0995   0FC7 00 00 00 00 
0995   0FCB 00 00 00 00 
0995   0FCF 00 00 00 00 
0995   0FD3 00 00 00 00 
0995   0FD7 00 00 00 00 
0995   0FDB 00 00 00 00 
0995   0FDF 00 00 00 00 
0995   0FE3 00 00 00 00 
0995   0FE7 00 00 00 00 
0995   0FEB 00 00 00 00 
0995   0FEF 00 00 00 00 
0995   0FF3 00 00 00 00 
0995   0FF7 00 00 00 00 
0995   0FFB 00 00 00 00 
0995   0FFF 00 00 00 00 
0995   1003 00 00 00 00 
0995   1007 00 00 00 00 
0995   100B 00 00 00 00 
0995   100F 00 00 00 00 
0996   1013 D3 09       nextState: .dw nextState_data
0997   1015             currState_data: 
0998   1015 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0998   1019 20 20 20 20 
0998   101D 20 20 20 20 
0998   1021 20 20 20 20 
0998   1025 20 20 20 20 
0998   1029 20 20 20 20 
0998   102D 20 20 20 20 
0998   1031 20 20 
0999   1033 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0999   1037 20 20 20 20 
0999   103B 20 20 20 20 
0999   103F 20 20 20 20 
0999   1043 20 20 20 20 
0999   1047 20 20 20 20 
0999   104B 20 20 20 20 
0999   104F 20 20 
1000   1051 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1000   1055 20 20 20 20 
1000   1059 20 20 20 20 
1000   105D 20 20 20 20 
1000   1061 20 20 20 20 
1000   1065 20 20 20 20 
1000   1069 20 20 20 20 
1000   106D 20 20 
1001   106F 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1001   1073 20 20 20 20 
1001   1077 20 20 20 20 
1001   107B 20 20 20 20 
1001   107F 20 20 20 20 
1001   1083 20 20 20 20 
1001   1087 20 20 20 20 
1001   108B 20 20 
1002   108D 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', 
1002   1091 20 20 20 20 
1002   1095 20 20 20 20 
1002   1099 20 20 20 20 
1002   109D 20 20 20 20 
1002   10A1 20 20 20 20 
1002   10A5 20 20 20 40 
1002   10A9 20 20 
1003   10AB 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1003   10AF 20 20 20 20 
1003   10B3 20 20 20 20 
1003   10B7 20 20 20 20 
1003   10BB 20 20 20 20 
1003   10BF 20 20 20 20 
1003   10C3 20 20 20 20 
1003   10C7 20 20 
1004   10C9 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', '@', ' ', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1004   10CD 20 40 20 40 
1004   10D1 20 20 20 20 
1004   10D5 20 20 20 20 
1004   10D9 20 20 20 20 
1004   10DD 20 20 20 20 
1004   10E1 20 20 20 20 
1004   10E5 20 20 
1005   10E7 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', 
1005   10EB 20 40 40 20 
1005   10EF 20 20 20 20 
1005   10F3 20 40 40 20 
1005   10F7 20 20 20 20 
1005   10FB 20 20 20 20 
1005   10FF 20 20 20 40 
1005   1103 40 20 
1006   1105 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', '@', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', 
1006   1109 20 20 20 20 
1006   110D 20 20 20 20 
1006   1111 20 20 40 20 
1006   1115 20 20 40 20 
1006   1119 20 20 20 40 
1006   111D 40 20 20 20 
1006   1121 20 20 
1007   1123 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', ' ', ' ', '@', 
1007   1127 20 20 20 40 
1007   112B 40 20 20 20 
1007   112F 20 40 40 20 
1007   1133 20 20 20 20 
1007   1137 20 20 20 40 
1007   113B 20 20 20 20 
1007   113F 20 40 
1008   1141 20 20 20 40 .db ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', 
1008   1145 40 20 20 20 
1008   1149 20 20 20 20 
1008   114D 20 20 20 20 
1008   1151 20 20 20 20 
1008   1155 20 20 20 40 
1008   1159 40 20 20 20 
1008   115D 20 20 
1009   115F 20 20 20 40 .db ' ', ' ', ' ', '@', ' ', ' ', ' ', '@', ' ', '@', '@', ' ', ' ', ' ', ' ', '@', ' ', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1009   1163 20 20 20 40 
1009   1167 20 40 40 20 
1009   116B 20 20 20 40 
1009   116F 20 40 20 20 
1009   1173 20 20 20 20 
1009   1177 20 20 20 20 
1009   117B 20 20 
1010   117D 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', 
1010   1181 20 20 20 20 
1010   1185 20 20 20 20 
1010   1189 20 40 20 20 
1010   118D 20 20 20 40 
1010   1191 20 20 20 20 
1010   1195 20 20 20 40 
1010   1199 20 20 
1011   119B 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', '@', ' ', 
1011   119F 20 20 20 20 
1011   11A3 20 20 20 20 
1011   11A7 20 20 20 20 
1011   11AB 20 20 20 20 
1011   11AF 20 20 20 20 
1011   11B3 40 20 20 20 
1011   11B7 40 20 
1012   11B9 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1012   11BD 20 20 20 20 
1012   11C1 20 20 20 20 
1012   11C5 20 20 20 20 
1012   11C9 20 20 20 20 
1012   11CD 20 20 20 20 
1012   11D1 20 20 20 20 
1012   11D5 20 20 
1013   11D7 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1013   11DB 20 40 40 20 
1013   11DF 20 20 20 20 
1013   11E3 20 20 20 20 
1013   11E7 20 20 20 20 
1013   11EB 20 20 20 20 
1013   11EF 20 20 20 20 
1013   11F3 20 20 
1014   11F5 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1014   11F9 20 20 20 20 
1014   11FD 20 20 20 20 
1014   1201 20 20 20 20 
1014   1205 20 20 20 20 
1014   1209 20 20 20 20 
1014   120D 20 20 20 20 
1014   1211 20 20 
1015   1213 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1015   1217 20 20 20 20 
1015   121B 20 20 20 20 
1015   121F 20 20 20 20 
1015   1223 20 20 20 20 
1015   1227 20 20 20 20 
1015   122B 20 20 20 20 
1015   122F 20 20 
1016   1231 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1016   1235 20 20 20 20 
1016   1239 20 20 20 20 
1016   123D 20 20 20 20 
1016   1241 20 20 20 20 
1016   1245 20 20 20 20 
1016   1249 20 20 20 20 
1016   124D 20 20 
1017   124F 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1017   1253 20 20 20 20 
1017   1257 20 20 20 20 
1017   125B 20 20 20 20 
1017   125F 20 20 20 20 
1017   1263 20 20 20 20 
1017   1267 20 20 20 20 
1017   126B 20 20 
1018   126D 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1018   1271 20 20 20 20 
1018   1275 20 20 20 20 
1018   1279 20 20 20 20 
1018   127D 20 20 20 20 
1018   1281 20 20 20 20 
1018   1285 20 20 20 20 
1018   1289 20 20 
1019   128B 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1019   128F 20 20 20 20 
1019   1293 20 20 20 20 
1019   1297 20 20 20 20 
1019   129B 20 20 20 20 
1019   129F 20 20 20 20 
1019   12A3 20 20 20 20 
1019   12A7 20 20 
1020   12A9 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1020   12AD 20 20 20 20 
1020   12B1 20 20 20 20 
1020   12B5 20 20 20 20 
1020   12B9 20 20 20 20 
1020   12BD 20 20 20 20 
1020   12C1 20 20 20 20 
1020   12C5 20 20 
1021   12C7 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1021   12CB 20 20 20 20 
1021   12CF 20 20 20 20 
1021   12D3 20 20 20 20 
1021   12D7 20 20 20 20 
1021   12DB 20 20 20 20 
1021   12DF 20 20 20 20 
1021   12E3 20 20 
1022   12E5 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1022   12E9 20 20 20 20 
1022   12ED 20 20 20 20 
1022   12F1 20 20 20 20 
1022   12F5 20 20 20 20 
1022   12F9 20 20 20 20 
1022   12FD 20 20 20 20 
1022   1301 20 20 
1023   1303 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1023   1307 20 20 20 20 
1023   130B 20 20 20 20 
1023   130F 20 20 20 20 
1023   1313 20 20 20 20 
1023   1317 20 20 20 20 
1023   131B 20 20 20 20 
1023   131F 20 20 
1024   1321 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1024   1325 20 20 20 20 
1024   1329 20 20 20 20 
1024   132D 20 20 20 20 
1024   1331 20 20 20 20 
1025   1335 00 00 00 00 .fill 800, 0
1025   1339 00 00 00 00 
1025   133D 00 00 00 00 
1025   1341 00 00 00 00 
1025   1345 00 00 00 00 
1025   1349 00 00 00 00 
1025   134D 00 00 00 00 
1025   1351 00 00 00 00 
1025   1355 00 00 00 00 
1025   1359 00 00 00 00 
1025   135D 00 00 00 00 
1025   1361 00 00 00 00 
1025   1365 00 00 00 00 
1025   1369 00 00 00 00 
1025   136D 00 00 00 00 
1025   1371 00 00 00 00 
1025   1375 00 00 00 00 
1025   1379 00 00 00 00 
1025   137D 00 00 00 00 
1025   1381 00 00 00 00 
1025   1385 00 00 00 00 
1025   1389 00 00 00 00 
1025   138D 00 00 00 00 
1025   1391 00 00 00 00 
1025   1395 00 00 00 00 
1025   1399 00 00 00 00 
1025   139D 00 00 00 00 
1025   13A1 00 00 00 00 
1025   13A5 00 00 00 00 
1025   13A9 00 00 00 00 
1025   13AD 00 00 00 00 
1025   13B1 00 00 00 00 
1025   13B5 00 00 00 00 
1025   13B9 00 00 00 00 
1025   13BD 00 00 00 00 
1025   13C1 00 00 00 00 
1025   13C5 00 00 00 00 
1025   13C9 00 00 00 00 
1025   13CD 00 00 00 00 
1025   13D1 00 00 00 00 
1025   13D5 00 00 00 00 
1025   13D9 00 00 00 00 
1025   13DD 00 00 00 00 
1025   13E1 00 00 00 00 
1025   13E5 00 00 00 00 
1025   13E9 00 00 00 00 
1025   13ED 00 00 00 00 
1025   13F1 00 00 00 00 
1025   13F5 00 00 00 00 
1025   13F9 00 00 00 00 
1025   13FD 00 00 00 00 
1025   1401 00 00 00 00 
1025   1405 00 00 00 00 
1025   1409 00 00 00 00 
1025   140D 00 00 00 00 
1025   1411 00 00 00 00 
1025   1415 00 00 00 00 
1025   1419 00 00 00 00 
1025   141D 00 00 00 00 
1025   1421 00 00 00 00 
1025   1425 00 00 00 00 
1025   1429 00 00 00 00 
1025   142D 00 00 00 00 
1025   1431 00 00 00 00 
1025   1435 00 00 00 00 
1025   1439 00 00 00 00 
1025   143D 00 00 00 00 
1025   1441 00 00 00 00 
1025   1445 00 00 00 00 
1025   1449 00 00 00 00 
1025   144D 00 00 00 00 
1025   1451 00 00 00 00 
1025   1455 00 00 00 00 
1025   1459 00 00 00 00 
1025   145D 00 00 00 00 
1025   1461 00 00 00 00 
1025   1465 00 00 00 00 
1025   1469 00 00 00 00 
1025   146D 00 00 00 00 
1025   1471 00 00 00 00 
1025   1475 00 00 00 00 
1025   1479 00 00 00 00 
1025   147D 00 00 00 00 
1025   1481 00 00 00 00 
1025   1485 00 00 00 00 
1025   1489 00 00 00 00 
1025   148D 00 00 00 00 
1025   1491 00 00 00 00 
1025   1495 00 00 00 00 
1025   1499 00 00 00 00 
1025   149D 00 00 00 00 
1025   14A1 00 00 00 00 
1025   14A5 00 00 00 00 
1025   14A9 00 00 00 00 
1025   14AD 00 00 00 00 
1025   14B1 00 00 00 00 
1025   14B5 00 00 00 00 
1025   14B9 00 00 00 00 
1025   14BD 00 00 00 00 
1025   14C1 00 00 00 00 
1025   14C5 00 00 00 00 
1025   14C9 00 00 00 00 
1025   14CD 00 00 00 00 
1025   14D1 00 00 00 00 
1025   14D5 00 00 00 00 
1025   14D9 00 00 00 00 
1025   14DD 00 00 00 00 
1025   14E1 00 00 00 00 
1025   14E5 00 00 00 00 
1025   14E9 00 00 00 00 
1025   14ED 00 00 00 00 
1025   14F1 00 00 00 00 
1025   14F5 00 00 00 00 
1025   14F9 00 00 00 00 
1025   14FD 00 00 00 00 
1025   1501 00 00 00 00 
1025   1505 00 00 00 00 
1025   1509 00 00 00 00 
1025   150D 00 00 00 00 
1025   1511 00 00 00 00 
1025   1515 00 00 00 00 
1025   1519 00 00 00 00 
1025   151D 00 00 00 00 
1025   1521 00 00 00 00 
1025   1525 00 00 00 00 
1025   1529 00 00 00 00 
1025   152D 00 00 00 00 
1025   1531 00 00 00 00 
1025   1535 00 00 00 00 
1025   1539 00 00 00 00 
1025   153D 00 00 00 00 
1025   1541 00 00 00 00 
1025   1545 00 00 00 00 
1025   1549 00 00 00 00 
1025   154D 00 00 00 00 
1025   1551 00 00 00 00 
1025   1555 00 00 00 00 
1025   1559 00 00 00 00 
1025   155D 00 00 00 00 
1025   1561 00 00 00 00 
1025   1565 00 00 00 00 
1025   1569 00 00 00 00 
1025   156D 00 00 00 00 
1025   1571 00 00 00 00 
1025   1575 00 00 00 00 
1025   1579 00 00 00 00 
1025   157D 00 00 00 00 
1025   1581 00 00 00 00 
1025   1585 00 00 00 00 
1025   1589 00 00 00 00 
1025   158D 00 00 00 00 
1025   1591 00 00 00 00 
1025   1595 00 00 00 00 
1025   1599 00 00 00 00 
1025   159D 00 00 00 00 
1025   15A1 00 00 00 00 
1025   15A5 00 00 00 00 
1025   15A9 00 00 00 00 
1025   15AD 00 00 00 00 
1025   15B1 00 00 00 00 
1025   15B5 00 00 00 00 
1025   15B9 00 00 00 00 
1025   15BD 00 00 00 00 
1025   15C1 00 00 00 00 
1025   15C5 00 00 00 00 
1025   15C9 00 00 00 00 
1025   15CD 00 00 00 00 
1025   15D1 00 00 00 00 
1025   15D5 00 00 00 00 
1025   15D9 00 00 00 00 
1025   15DD 00 00 00 00 
1025   15E1 00 00 00 00 
1025   15E5 00 00 00 00 
1025   15E9 00 00 00 00 
1025   15ED 00 00 00 00 
1025   15F1 00 00 00 00 
1025   15F5 00 00 00 00 
1025   15F9 00 00 00 00 
1025   15FD 00 00 00 00 
1025   1601 00 00 00 00 
1025   1605 00 00 00 00 
1025   1609 00 00 00 00 
1025   160D 00 00 00 00 
1025   1611 00 00 00 00 
1025   1615 00 00 00 00 
1025   1619 00 00 00 00 
1025   161D 00 00 00 00 
1025   1621 00 00 00 00 
1025   1625 00 00 00 00 
1025   1629 00 00 00 00 
1025   162D 00 00 00 00 
1025   1631 00 00 00 00 
1025   1635 00 00 00 00 
1025   1639 00 00 00 00 
1025   163D 00 00 00 00 
1025   1641 00 00 00 00 
1025   1645 00 00 00 00 
1025   1649 00 00 00 00 
1025   164D 00 00 00 00 
1025   1651 00 00 00 00 
1026   1655 15 10       currState: .dw currState_data
1027   1657             ; --- END DATA BLOCK
1028   1657             
1029   1657             ; --- BEGIN INCLUDE BLOCK
1030   1657             .include "lib/stdio.asm"
0001+  1657             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1657             ; stdio.s
0003+  1657             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1657             .include "lib/string.asm"
0001++ 1657             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1657             ; string.s
0003++ 1657             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1657             
0005++ 1657             
0006++ 1657             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1657             ; strrev
0008++ 1657             ; reverse a string
0009++ 1657             ; D = string address
0010++ 1657             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1657             ; 01234
0012++ 1657             strrev:
0013++ 1657 4B          	pusha
0014++ 1658 07 9E 16    	call strlen	; length in C
0015++ 165B 12          	mov a, c
0016++ 165C AF 01 00    	cmp a, 1
0017++ 165F D0 79 16    	jleu strrev_end	; check string length. string len must be > 1
0018++ 1662 7D          	dec a
0019++ 1663 FD 4E       	mov si, d	; beginning of string
0020++ 1665 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1667 59          	add d, a	; end of string
0022++ 1668 12          	mov a, c
0023++ 1669 FD 9B       	shr a		; divide by 2
0024++ 166B 39          	mov c, a	; C now counts the steps
0025++ 166C             strrev_L0:
0026++ 166C 32          	mov bl, [d]	; save load right-side char into BL
0027++ 166D F6          	lodsb		; load left-side char into AL; increase SI
0028++ 166E 3E          	mov [d], al	; store left char into right side
0029++ 166F 1B          	mov al, bl
0030++ 1670 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1671 7E          	dec c
0032++ 1672 7F          	dec d
0033++ 1673 C2 00 00    	cmp c, 0
0034++ 1676 C7 6C 16    	jne strrev_L0
0035++ 1679             strrev_end:
0036++ 1679 4C          	popa
0037++ 167A 09          	ret
0038++ 167B             	
0039++ 167B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 167B             ; strchr
0041++ 167B             ; search string in D for char in AL
0042++ 167B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 167B             strchr:
0044++ 167B             strchr_L0:
0045++ 167B 32          	mov bl, [d]
0046++ 167C C1 00       	cmp bl, 0
0047++ 167E C6 89 16    	je strchr_end
0048++ 1681 BA          	cmp al, bl
0049++ 1682 C6 89 16    	je strchr_end
0050++ 1685 79          	inc d
0051++ 1686 0A 7B 16    	jmp strchr_L0
0052++ 1689             strchr_end:
0053++ 1689 1B          	mov al, bl
0054++ 168A 09          	ret
0055++ 168B             
0056++ 168B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 168B             ; strstr
0058++ 168B             ; find sub-string
0059++ 168B             ; str1 in SI
0060++ 168B             ; str2 in DI
0061++ 168B             ; SI points to end of source string
0062++ 168B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 168B             strstr:
0064++ 168B DB          	push al
0065++ 168C DA          	push d
0066++ 168D E3          	push di
0067++ 168E             strstr_loop:
0068++ 168E F3          	cmpsb					; compare a byte of the strings
0069++ 168F C7 9A 16    	jne strstr_ret
0070++ 1692 FC 00 00    	lea d, [di + 0]
0071++ 1695 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1697 C7 8E 16    	jne strstr_loop				; equal chars but not at end
0073++ 169A             strstr_ret:
0074++ 169A F0          	pop di
0075++ 169B E7          	pop d
0076++ 169C E8          	pop al
0077++ 169D 09          	ret
0078++ 169E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 169E             ; length of null terminated string
0080++ 169E             ; result in C
0081++ 169E             ; pointer in D
0082++ 169E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 169E             strlen:
0084++ 169E DA          	push d
0085++ 169F 38 00 00    	mov c, 0
0086++ 16A2             strlen_L1:
0087++ 16A2 BD 00       	cmp byte [d], 0
0088++ 16A4 C6 AC 16    	je strlen_ret
0089++ 16A7 79          	inc d
0090++ 16A8 78          	inc c
0091++ 16A9 0A A2 16    	jmp strlen_L1
0092++ 16AC             strlen_ret:
0093++ 16AC E7          	pop d
0094++ 16AD 09          	ret
0095++ 16AE             
0096++ 16AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 16AE             ; STRCMP
0098++ 16AE             ; compare two strings
0099++ 16AE             ; str1 in SI
0100++ 16AE             ; str2 in DI
0101++ 16AE             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 16AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 16AE             strcmp:
0104++ 16AE DB          	push al
0105++ 16AF DA          	push d
0106++ 16B0 E3          	push di
0107++ 16B1 E2          	push si
0108++ 16B2             strcmp_loop:
0109++ 16B2 F3          	cmpsb					; compare a byte of the strings
0110++ 16B3 C7 BE 16    	jne strcmp_ret
0111++ 16B6 FB FF FF    	lea d, [si +- 1]
0112++ 16B9 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 16BB C7 B2 16    	jne strcmp_loop				; equal chars but not at end
0114++ 16BE             strcmp_ret:
0115++ 16BE EF          	pop si
0116++ 16BF F0          	pop di
0117++ 16C0 E7          	pop d
0118++ 16C1 E8          	pop al
0119++ 16C2 09          	ret
0120++ 16C3             
0121++ 16C3             
0122++ 16C3             ; STRCPY
0123++ 16C3             ; copy null terminated string from SI to DI
0124++ 16C3             ; source in SI
0125++ 16C3             ; destination in DI
0126++ 16C3             strcpy:
0127++ 16C3 E2          	push si
0128++ 16C4 E3          	push di
0129++ 16C5 DB          	push al
0130++ 16C6             strcpy_L1:
0131++ 16C6 F6          	lodsb
0132++ 16C7 F7          	stosb
0133++ 16C8 B9 00       	cmp al, 0
0134++ 16CA C7 C6 16    	jne strcpy_L1
0135++ 16CD             strcpy_end:
0136++ 16CD E8          	pop al
0137++ 16CE F0          	pop di
0138++ 16CF EF          	pop si
0139++ 16D0 09          	ret
0140++ 16D1             
0141++ 16D1             ; STRCAT
0142++ 16D1             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 16D1             ; source in SI
0144++ 16D1             ; destination in DI
0145++ 16D1             strcat:
0146++ 16D1 E2          	push si
0147++ 16D2 E3          	push di
0148++ 16D3 D7          	push a
0149++ 16D4 DA          	push d
0150++ 16D5 50          	mov a, di
0151++ 16D6 3C          	mov d, a
0152++ 16D7             strcat_goto_end_L1:
0153++ 16D7 BD 00       	cmp byte[d], 0
0154++ 16D9 C6 E0 16    	je strcat_start
0155++ 16DC 79          	inc d
0156++ 16DD 0A D7 16    	jmp strcat_goto_end_L1
0157++ 16E0             strcat_start:
0158++ 16E0 FD 50       	mov di, d
0159++ 16E2             strcat_L1:
0160++ 16E2 F6          	lodsb
0161++ 16E3 F7          	stosb
0162++ 16E4 B9 00       	cmp al, 0
0163++ 16E6 C7 E2 16    	jne strcat_L1
0164++ 16E9             strcat_end:
0165++ 16E9 E7          	pop d
0166++ 16EA E4          	pop a
0167++ 16EB F0          	pop di
0168++ 16EC EF          	pop si
0169++ 16ED 09          	ret
0005+  16EE             
0006+  16EE 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  16F2 34 35 36 37 
0006+  16F6 38 39 41 42 
0006+  16FA 43 44 45 46 
0007+  16FE 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  1702 1B 5B 48 00 
0008+  1706             
0009+  1706 01 00       table_power:.dw 1
0010+  1708 0A 00       			.dw 10
0011+  170A 64 00       			.dw 100
0012+  170C E8 03       			.dw 1000
0013+  170E 10 27       			.dw 10000
0014+  1710             
0015+  1710             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  1710             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  1710             ; ASCII in BL
0018+  1710             ; result in AL
0019+  1710             ; ascii for F = 0100 0110
0020+  1710             ; ascii for 9 = 0011 1001
0021+  1710             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  1710             hex_ascii_encode:
0023+  1710 1B          	mov al, bl
0024+  1711 93 40       	test al, $40				; test if letter or number
0025+  1713 C7 19 17    	jnz hex_letter
0026+  1716 87 0F       	and al, $0F				; get number
0027+  1718 09          	ret
0028+  1719             hex_letter:
0029+  1719 87 0F       	and al, $0F				; get letter
0030+  171B 6A 09       	add al, 9
0031+  171D 09          	ret
0032+  171E             
0033+  171E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  171E             ; ATOI
0035+  171E             ; 2 letter hex string in B
0036+  171E             ; 8bit integer returned in AL
0037+  171E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  171E             atoi:
0039+  171E D8          	push b
0040+  171F 07 10 17    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  1722 30          	mov bl, bh
0042+  1723 DB          	push al					; save a
0043+  1724 07 10 17    	call hex_ascii_encode
0044+  1727 EA          	pop bl	
0045+  1728 FD 9E 04    	shl al, 4
0046+  172B 8C          	or al, bl
0047+  172C E5          	pop b
0048+  172D 09          	ret	
0049+  172E             
0050+  172E             
0051+  172E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  172E             ; printf
0053+  172E             ; no need for explanations!
0054+  172E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  172E             printf:
0056+  172E 09          	ret
0057+  172F             
0058+  172F             
0059+  172F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  172F             ; scanf
0061+  172F             ; no need for explanations!
0062+  172F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  172F             scanf:
0064+  172F 09          	ret
0065+  1730             
0066+  1730             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  1730             ; ITOA
0068+  1730             ; 8bit value in BL
0069+  1730             ; 2 byte ASCII result in A
0070+  1730             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  1730             itoa:
0072+  1730 DA          	push d
0073+  1731 D8          	push b
0074+  1732 A7 00       	mov bh, 0
0075+  1734 FD A4 04    	shr bl, 4	
0076+  1737 74          	mov d, b
0077+  1738 1F EE 16    	mov al, [d + s_hex_digits]
0078+  173B 23          	mov ah, al
0079+  173C             	
0080+  173C E5          	pop b
0081+  173D D8          	push b
0082+  173E A7 00       	mov bh, 0
0083+  1740 FD 87 0F    	and bl, $0F
0084+  1743 74          	mov d, b
0085+  1744 1F EE 16    	mov al, [d + s_hex_digits]
0086+  1747 E5          	pop b
0087+  1748 E7          	pop d
0088+  1749 09          	ret
0089+  174A             
0090+  174A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  174A             ; HEX STRING TO BINARY
0092+  174A             ; di = destination address
0093+  174A             ; si = source
0094+  174A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  174A             hex_to_int:
0096+  174A             hex_to_int_L1:
0097+  174A F6          	lodsb					; load from [SI] to AL
0098+  174B B9 00       	cmp al, 0				; check if ASCII 0
0099+  174D C6 5A 17    	jz hex_to_int_ret
0100+  1750 36          	mov bh, al
0101+  1751 F6          	lodsb
0102+  1752 2F          	mov bl, al
0103+  1753 07 1E 17    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  1756 F7          	stosb					; store AL to [DI]
0105+  1757 0A 4A 17    	jmp hex_to_int_L1
0106+  175A             hex_to_int_ret:
0107+  175A 09          	ret		
0108+  175B             
0109+  175B             
0110+  175B             
0111+  175B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  175B             ; GETCHAR
0113+  175B             ; char in ah
0114+  175B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  175B             getchar:
0116+  175B DB          	push al
0117+  175C             getchar_retry:
0118+  175C FD 0C       	sti
0119+  175E 19 01       	mov al, 1
0120+  1760 05 03       	syscall sys_io			; receive in AH
0121+  1762 B9 00       	cmp al, 0			; check if any char was receive
0122+  1764 C6 5C 17    	je getchar_retry
0123+  1767 E8          	pop al
0124+  1768 09          	ret
0125+  1769             
0126+  1769             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  1769             ; PUTCHAR
0128+  1769             ; char in ah
0129+  1769             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1769             putchar:
0131+  1769 D7          	push a
0132+  176A 19 00       	mov al, 0
0133+  176C 05 03       	syscall sys_io			; char in AH
0134+  176E E4          	pop a
0135+  176F 09          	ret
0136+  1770             
0137+  1770             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  1770             ;; INPUT A STRING
0139+  1770             ;; terminates with null
0140+  1770             ;; pointer in D
0141+  1770             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  1770             gets:
0143+  1770 D7          	push a
0144+  1771 DA          	push d
0145+  1772             gets_loop:
0146+  1772 FD 0C       	sti
0147+  1774 19 01       	mov al, 1
0148+  1776 05 03       	syscall sys_io			; receive in AH
0149+  1778 B9 00       	cmp al, 0				; check error code (AL)
0150+  177A C6 72 17    	je gets_loop			; if no char received, retry
0151+  177D             
0152+  177D 76 1B       	cmp ah, 27
0153+  177F C6 A0 17    	je gets_telnet_escape
0154+  1782 76 0A       	cmp ah, $0A				; LF
0155+  1784 C6 F9 17    	je gets_end
0156+  1787 76 0D       	cmp ah, $0D				; CR
0157+  1789 C6 F9 17    	je gets_end
0158+  178C 76 5C       	cmp ah, $5C				; '\\'
0159+  178E C6 D0 17    	je gets_escape
0160+  1791             	
0161+  1791 76 08       	cmp ah, $08			; check for backspace
0162+  1793 C6 9C 17    	je gets_backspace
0163+  1796             
0164+  1796 1A          	mov al, ah
0165+  1797 3E          	mov [d], al
0166+  1798 79          	inc d
0167+  1799 0A 72 17    	jmp gets_loop
0168+  179C             gets_backspace:
0169+  179C 7F          	dec d
0170+  179D 0A 72 17    	jmp gets_loop
0171+  17A0             gets_telnet_escape:
0172+  17A0 FD 0C       	sti
0173+  17A2 19 01       	mov al, 1
0174+  17A4 05 03       	syscall sys_io				; receive in AH without echo
0175+  17A6 B9 00       	cmp al, 0					; check error code (AL)
0176+  17A8 C6 A0 17    	je gets_telnet_escape		; if no char received, retry
0177+  17AB 76 5B       	cmp ah, '['
0178+  17AD C7 72 17    	jne gets_loop
0179+  17B0             gets_telnet_escape_phase2:
0180+  17B0 FD 0C       	sti
0181+  17B2 19 01       	mov al, 1
0182+  17B4 05 03       	syscall sys_io					; receive in AH without echo
0183+  17B6 B9 00       	cmp al, 0						; check error code (AL)
0184+  17B8 C6 B0 17    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  17BB 76 44       	cmp ah, 'D'
0186+  17BD C6 C8 17    	je gets_left_arrow
0187+  17C0 76 43       	cmp ah, 'C'
0188+  17C2 C6 CC 17    	je gets_right_arrow
0189+  17C5 0A 72 17    	jmp gets_loop
0190+  17C8             gets_left_arrow:
0191+  17C8 7F          	dec d
0192+  17C9 0A 72 17    	jmp gets_loop
0193+  17CC             gets_right_arrow:
0194+  17CC 79          	inc d
0195+  17CD 0A 72 17    	jmp gets_loop
0196+  17D0             gets_escape:
0197+  17D0 FD 0C       	sti
0198+  17D2 19 01       	mov al, 1
0199+  17D4 05 03       	syscall sys_io			; receive in AH
0200+  17D6 B9 00       	cmp al, 0				; check error code (AL)
0201+  17D8 C6 D0 17    	je gets_escape			; if no char received, retry
0202+  17DB 76 6E       	cmp ah, 'n'
0203+  17DD C6 EB 17    	je gets_LF
0204+  17E0 76 72       	cmp ah, 'r'
0205+  17E2 C6 F2 17    	je gets_CR
0206+  17E5 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  17E6 3E          	mov [d], al
0208+  17E7 79          	inc d
0209+  17E8 0A 72 17    	jmp gets_loop
0210+  17EB             gets_LF:
0211+  17EB 19 0A       	mov al, $0A
0212+  17ED 3E          	mov [d], al
0213+  17EE 79          	inc d
0214+  17EF 0A 72 17    	jmp gets_loop
0215+  17F2             gets_CR:
0216+  17F2 19 0D       	mov al, $0D
0217+  17F4 3E          	mov [d], al
0218+  17F5 79          	inc d
0219+  17F6 0A 72 17    	jmp gets_loop
0220+  17F9             gets_end:
0221+  17F9 19 00       	mov al, 0
0222+  17FB 3E          	mov [d], al				; terminate string
0223+  17FC E7          	pop d
0224+  17FD E4          	pop a
0225+  17FE 09          	ret
0226+  17FF             
0227+  17FF             
0228+  17FF             
0229+  17FF             
0230+  17FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  17FF             ;; INPUT TEXT
0232+  17FF             ;; terminated with CTRL+D
0233+  17FF             ;; pointer in D
0234+  17FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  17FF             gettxt:
0236+  17FF D7          	push a
0237+  1800 DA          	push d
0238+  1801             gettxt_loop:
0239+  1801 19 01       	mov al, 1
0240+  1803 05 03       	syscall sys_io			; receive in AH
0241+  1805 B9 00       	cmp al, 0				; check error code (AL)
0242+  1807 C6 01 18    	je gettxt_loop		; if no char received, retry
0243+  180A 76 04       	cmp ah, 4			; EOT
0244+  180C C6 4A 18    	je gettxt_end
0245+  180F 76 08       	cmp ah, $08			; check for backspace
0246+  1811 C6 46 18    	je gettxt_backspace
0247+  1814 76 5C       	cmp ah, $5C				; '\\'
0248+  1816 C6 1F 18    	je gettxt_escape
0249+  1819 1A          	mov al, ah
0250+  181A 3E          	mov [d], al
0251+  181B 79          	inc d
0252+  181C 0A 01 18    	jmp gettxt_loop
0253+  181F             gettxt_escape:
0254+  181F 19 01       	mov al, 1
0255+  1821 05 03       	syscall sys_io			; receive in AH
0256+  1823 B9 00       	cmp al, 0				; check error code (AL)
0257+  1825 C6 1F 18    	je gettxt_escape		; if no char received, retry
0258+  1828 76 6E       	cmp ah, 'n'
0259+  182A C6 38 18    	je gettxt_LF
0260+  182D 76 72       	cmp ah, 'r'
0261+  182F C6 3F 18    	je gettxt_CR
0262+  1832 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  1833 3E          	mov [d], al
0264+  1834 79          	inc d
0265+  1835 0A 01 18    	jmp gettxt_loop
0266+  1838             gettxt_LF:
0267+  1838 19 0A       	mov al, $0A
0268+  183A 3E          	mov [d], al
0269+  183B 79          	inc d
0270+  183C 0A 01 18    	jmp gettxt_loop
0271+  183F             gettxt_CR:
0272+  183F 19 0D       	mov al, $0D
0273+  1841 3E          	mov [d], al
0274+  1842 79          	inc d
0275+  1843 0A 01 18    	jmp gettxt_loop
0276+  1846             gettxt_backspace:
0277+  1846 7F          	dec d
0278+  1847 0A 01 18    	jmp gettxt_loop
0279+  184A             gettxt_end:
0280+  184A 19 00       	mov al, 0
0281+  184C 3E          	mov [d], al				; terminate string
0282+  184D E7          	pop d
0283+  184E E4          	pop a
0284+  184F 09          	ret
0285+  1850             
0286+  1850             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  1850             ; PRINT NEW LINE
0288+  1850             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  1850             printnl:
0290+  1850 D7          	push a
0291+  1851 10 00 0A    	mov a, $0A00
0292+  1854 05 03       	syscall sys_io
0293+  1856 10 00 0D    	mov a, $0D00
0294+  1859 05 03       	syscall sys_io
0295+  185B E4          	pop a
0296+  185C 09          	ret
0297+  185D             
0298+  185D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  185D             ; strtoint
0300+  185D             ; 4 digit hex string number in d
0301+  185D             ; integer returned in A
0302+  185D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  185D             strtointx:
0304+  185D D8          	push b
0305+  185E 32          	mov bl, [d]
0306+  185F 37          	mov bh, bl
0307+  1860 33 01 00    	mov bl, [d + 1]
0308+  1863 07 1E 17    	call atoi				; convert to int in AL
0309+  1866 23          	mov ah, al				; move to AH
0310+  1867 33 02 00    	mov bl, [d + 2]
0311+  186A 37          	mov bh, bl
0312+  186B 33 03 00    	mov bl, [d + 3]
0313+  186E 07 1E 17    	call atoi				; convert to int in AL
0314+  1871 E5          	pop b
0315+  1872 09          	ret
0316+  1873             
0317+  1873             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  1873             ; strtoint
0319+  1873             ; 5 digit base10 string number in d
0320+  1873             ; integer returned in A
0321+  1873             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  1873             strtoint:
0323+  1873 E2          	push si
0324+  1874 D8          	push b
0325+  1875 D9          	push c
0326+  1876 DA          	push d
0327+  1877 07 9E 16    	call strlen			; get string length in C
0328+  187A 7E          	dec c
0329+  187B FD 4E       	mov si, d
0330+  187D 12          	mov a, c
0331+  187E FD 99       	shl a
0332+  1880 3B 06 17    	mov d, table_power
0333+  1883 59          	add d, a
0334+  1884 38 00 00    	mov c, 0
0335+  1887             strtoint_L0:
0336+  1887 F6          	lodsb			; load ASCII to al
0337+  1888 B9 00       	cmp al, 0
0338+  188A C6 9D 18    	je strtoint_end
0339+  188D 6F 30       	sub al, $30		; make into integer
0340+  188F 22 00       	mov ah, 0
0341+  1891 2A          	mov b, [d]
0342+  1892 AC          	mul a, b			; result in B since it fits in 16bits
0343+  1893 11          	mov a, b
0344+  1894 28          	mov b, c
0345+  1895 54          	add a, b
0346+  1896 39          	mov c, a
0347+  1897 63 02 00    	sub d, 2
0348+  189A 0A 87 18    	jmp strtoint_L0
0349+  189D             strtoint_end:
0350+  189D 12          	mov a, c
0351+  189E E7          	pop d
0352+  189F E6          	pop c
0353+  18A0 E5          	pop b
0354+  18A1 EF          	pop si
0355+  18A2 09          	ret
0356+  18A3             
0357+  18A3             
0358+  18A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  18A3             ; PRINT NULL TERMINATED STRING
0360+  18A3             ; pointer in D
0361+  18A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  18A3             puts:
0363+  18A3 D7          	push a
0364+  18A4 DA          	push d
0365+  18A5             puts_L1:
0366+  18A5 1E          	mov al, [d]
0367+  18A6 B9 00       	cmp al, 0
0368+  18A8 C6 B4 18    	jz puts_END
0369+  18AB 23          	mov ah, al
0370+  18AC 19 00       	mov al, 0
0371+  18AE 05 03       	syscall sys_io
0372+  18B0 79          	inc d
0373+  18B1 0A A5 18    	jmp puts_L1
0374+  18B4             puts_END:
0375+  18B4 E7          	pop d
0376+  18B5 E4          	pop a
0377+  18B6 09          	ret
0378+  18B7             
0379+  18B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  18B7             ; PRINT N SIZE STRING
0381+  18B7             ; pointer in D
0382+  18B7             ; size in C
0383+  18B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  18B7             putsn:
0385+  18B7 DB          	push al
0386+  18B8 DA          	push d
0387+  18B9 D9          	push c
0388+  18BA             putsn_L0:
0389+  18BA 1E          	mov al, [d]
0390+  18BB 23          	mov ah, al
0391+  18BC 19 00       	mov al, 0
0392+  18BE 05 03       	syscall sys_io
0393+  18C0 79          	inc d
0394+  18C1 7E          	dec c	
0395+  18C2 C2 00 00    	cmp c, 0
0396+  18C5 C7 BA 18    	jne putsn_L0
0397+  18C8             putsn_end:
0398+  18C8 E6          	pop c
0399+  18C9 E7          	pop d
0400+  18CA E8          	pop al
0401+  18CB 09          	ret
0402+  18CC             
0403+  18CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  18CC             ; print 16bit decimal number
0405+  18CC             ; input number in A
0406+  18CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  18CC             print_u16d:
0408+  18CC D7          	push a
0409+  18CD D8          	push b
0410+  18CE 26 10 27    	mov b, 10000
0411+  18D1 AE          	div a, b			; get 10000 coeff.
0412+  18D2 07 F8 18    	call print_number
0413+  18D5 11          	mov a, b
0414+  18D6 26 E8 03    	mov b, 1000
0415+  18D9 AE          	div a, b			; get 10000 coeff.
0416+  18DA 07 F8 18    	call print_number
0417+  18DD 11          	mov a, b
0418+  18DE 26 64 00    	mov b, 100
0419+  18E1 AE          	div a, b
0420+  18E2 07 F8 18    	call print_number
0421+  18E5 11          	mov a, b
0422+  18E6 26 0A 00    	mov b, 10
0423+  18E9 AE          	div a, b
0424+  18EA 07 F8 18    	call print_number
0425+  18ED 11          	mov a, b
0426+  18EE 6A 30       	add al, $30
0427+  18F0 23          	mov ah, al
0428+  18F1 19 00       	mov al, 0
0429+  18F3 05 03       	syscall sys_io	; print coeff
0430+  18F5 E5          	pop b
0431+  18F6 E4          	pop a
0432+  18F7 09          	ret
0433+  18F8             
0434+  18F8             
0435+  18F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  18F8             ; if A == 0, print space
0437+  18F8             ; else print A
0438+  18F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  18F8             print_number:
0440+  18F8 6A 30       	add al, $30
0441+  18FA 23          	mov ah, al
0442+  18FB 07 69 17    	call putchar
0443+  18FE 09          	ret
0444+  18FF             
0445+  18FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  18FF             ; PRINT 16BIT HEX INTEGER
0447+  18FF             ; integer value in reg B
0448+  18FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  18FF             print_u16x:
0450+  18FF D7          	push a
0451+  1900 D8          	push b
0452+  1901 DD          	push bl
0453+  1902 30          	mov bl, bh
0454+  1903 07 30 17    	call itoa				; convert bh to char in A
0455+  1906 2F          	mov bl, al				; save al
0456+  1907 19 00       	mov al, 0
0457+  1909 05 03       	syscall sys_io				; display AH
0458+  190B 24          	mov ah, bl				; retrieve al
0459+  190C 19 00       	mov al, 0
0460+  190E 05 03       	syscall sys_io				; display AL
0461+  1910             
0462+  1910 EA          	pop bl
0463+  1911 07 30 17    	call itoa				; convert bh to char in A
0464+  1914 2F          	mov bl, al				; save al
0465+  1915 19 00       	mov al, 0
0466+  1917 05 03       	syscall sys_io				; display AH
0467+  1919 24          	mov ah, bl				; retrieve al
0468+  191A 19 00       	mov al, 0
0469+  191C 05 03       	syscall sys_io				; display AL
0470+  191E             
0471+  191E E5          	pop b
0472+  191F E4          	pop a
0473+  1920 09          	ret
0474+  1921             
0475+  1921             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  1921             ; INPUT 16BIT HEX INTEGER
0477+  1921             ; read 16bit integer into A
0478+  1921             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  1921             scan_u16x:
0480+  1921 F8 10 00    	enter 16
0481+  1924 D8          	push b
0482+  1925 DA          	push d
0483+  1926             
0484+  1926 FA F1 FF    	lea d, [bp + -15]
0485+  1929 07 70 17    	call gets				; get number
0486+  192C             
0487+  192C 32          	mov bl, [d]
0488+  192D 37          	mov bh, bl
0489+  192E 33 01 00    	mov bl, [d + 1]
0490+  1931 07 1E 17    	call atoi				; convert to int in AL
0491+  1934 23          	mov ah, al				; move to AH
0492+  1935             
0493+  1935 33 02 00    	mov bl, [d + 2]
0494+  1938 37          	mov bh, bl
0495+  1939 33 03 00    	mov bl, [d + 3]
0496+  193C 07 1E 17    	call atoi				; convert to int in AL
0497+  193F             
0498+  193F E7          	pop d
0499+  1940 E5          	pop b
0500+  1941 F9          	leave
0501+  1942 09          	ret
0502+  1943             
0503+  1943             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  1943             ; PRINT 8bit HEX INTEGER
0505+  1943             ; integer value in reg bl
0506+  1943             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  1943             print_u8x:
0508+  1943 D7          	push a
0509+  1944 DD          	push bl
0510+  1945             
0511+  1945 07 30 17    	call itoa				; convert bl to char in A
0512+  1948 2F          	mov bl, al				; save al
0513+  1949 19 00       	mov al, 0
0514+  194B 05 03       	syscall sys_io				; display AH
0515+  194D 24          	mov ah, bl				; retrieve al
0516+  194E 19 00       	mov al, 0
0517+  1950 05 03       	syscall sys_io				; display AL
0518+  1952             
0519+  1952 EA          	pop bl
0520+  1953 E4          	pop a
0521+  1954 09          	ret
0522+  1955             
0523+  1955             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  1955             ; print 8bit decimal unsigned number
0525+  1955             ; input number in AL
0526+  1955             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  1955             print_u8d:
0528+  1955 D7          	push a
0529+  1956 D8          	push b
0530+  1957             
0531+  1957 22 00       	mov ah, 0
0532+  1959 26 64 00    	mov b, 100
0533+  195C AE          	div a, b
0534+  195D D8          	push b			; save remainder
0535+  195E B9 00       	cmp al, 0
0536+  1960 C6 6A 19    	je skip100
0537+  1963 6A 30       	add al, $30
0538+  1965 23          	mov ah, al
0539+  1966 19 00       	mov al, 0
0540+  1968 05 03       	syscall sys_io	; print coeff
0541+  196A             skip100:
0542+  196A E4          	pop a
0543+  196B 22 00       	mov ah, 0
0544+  196D 26 0A 00    	mov b, 10
0545+  1970 AE          	div a, b
0546+  1971 D8          	push b			; save remainder
0547+  1972 B9 00       	cmp al, 0
0548+  1974 C6 7E 19    	je skip10
0549+  1977 6A 30       	add al, $30
0550+  1979 23          	mov ah, al
0551+  197A 19 00       	mov al, 0
0552+  197C 05 03       	syscall sys_io	; print coeff
0553+  197E             skip10:
0554+  197E E4          	pop a
0555+  197F 1B          	mov al, bl
0556+  1980 6A 30       	add al, $30
0557+  1982 23          	mov ah, al
0558+  1983 19 00       	mov al, 0
0559+  1985 05 03       	syscall sys_io	; print coeff
0560+  1987 E5          	pop b
0561+  1988 E4          	pop a
0562+  1989 09          	ret
0563+  198A             
0564+  198A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  198A             ; INPUT 8BIT HEX INTEGER
0566+  198A             ; read 8bit integer into AL
0567+  198A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  198A             scan_u8x:
0569+  198A F8 04 00    	enter 4
0570+  198D D8          	push b
0571+  198E DA          	push d
0572+  198F             
0573+  198F FA FD FF    	lea d, [bp + -3]
0574+  1992 07 70 17    	call gets				; get number
0575+  1995             
0576+  1995 32          	mov bl, [d]
0577+  1996 37          	mov bh, bl
0578+  1997 33 01 00    	mov bl, [d + 1]
0579+  199A 07 1E 17    	call atoi				; convert to int in AL
0580+  199D             
0581+  199D E7          	pop d
0582+  199E E5          	pop b
0583+  199F F9          	leave
0584+  19A0 09          	ret
0585+  19A1             
0586+  19A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  19A1             ; input decimal number
0588+  19A1             ; result in A
0589+  19A1             ; 655'\0'
0590+  19A1             ; low--------high
0591+  19A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  19A1             scan_u16d:
0593+  19A1 F8 08 00    	enter 8
0594+  19A4 E2          	push si
0595+  19A5 D8          	push b
0596+  19A6 D9          	push c
0597+  19A7 DA          	push d
0598+  19A8 FA F9 FF    	lea d, [bp +- 7]
0599+  19AB 07 70 17    	call gets
0600+  19AE 07 9E 16    	call strlen			; get string length in C
0601+  19B1 7E          	dec c
0602+  19B2 FD 4E       	mov si, d
0603+  19B4 12          	mov a, c
0604+  19B5 FD 99       	shl a
0605+  19B7 3B 06 17    	mov d, table_power
0606+  19BA 59          	add d, a
0607+  19BB 38 00 00    	mov c, 0
0608+  19BE             mul_loop:
0609+  19BE F6          	lodsb			; load ASCII to al
0610+  19BF B9 00       	cmp al, 0
0611+  19C1 C6 D4 19    	je mul_exit
0612+  19C4 6F 30       	sub al, $30		; make into integer
0613+  19C6 22 00       	mov ah, 0
0614+  19C8 2A          	mov b, [d]
0615+  19C9 AC          	mul a, b			; result in B since it fits in 16bits
0616+  19CA 11          	mov a, b
0617+  19CB 28          	mov b, c
0618+  19CC 54          	add a, b
0619+  19CD 39          	mov c, a
0620+  19CE 63 02 00    	sub d, 2
0621+  19D1 0A BE 19    	jmp mul_loop
0622+  19D4             mul_exit:
0623+  19D4 12          	mov a, c
0624+  19D5 E7          	pop d
0625+  19D6 E6          	pop c
0626+  19D7 E5          	pop b
0627+  19D8 EF          	pop si
0628+  19D9 F9          	leave
0629+  19DA 09          	ret
1031   19DB             ; --- END INCLUDE BLOCK
1032   19DB             
1033   19DB             
1034   19DB             .end
tasm: Number of errors = 0
