0001   0000             ; --- FILENAME: life2.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; row
0010   0405 52 02 00      sub sp, 2 ; col
0011   0408 52 02 00      sub sp, 2 ; gen
0012   040B             _for1_init:
0013   040B 26 00 00      mov b, 0
0014   040E D7            push a
0015   040F 11            mov a, b
0016   0410 45 FF FF      mov [bp + -1], a ; row
0017   0413 E4            pop a
0018   0414             _for1_cond:
0019   0414 2C FF FF      mov b, [bp + -1] ; row
0020   0417 D7            push a
0021   0418 11            mov a, b
0022   0419 29 DD 08      mov b, [ROWS]
0023   041C B0            cmp a, b
0024   041D 0E            lodflgs
0025   041E 87 02         and al, %00000010
0026   0420 22 00         mov ah, 0
0027   0422 27            mov b, a
0028   0423 E4            pop a
0029   0424 C0 00 00      cmp b, 0
0030   0427 C6 8F 04      je _for1_exit
0031   042A             _for1_block:
0032   042A             _for2_init:
0033   042A 26 00 00      mov b, 0
0034   042D D7            push a
0035   042E 11            mov a, b
0036   042F 45 FD FF      mov [bp + -3], a ; col
0037   0432 E4            pop a
0038   0433             _for2_cond:
0039   0433 2C FD FF      mov b, [bp + -3] ; col
0040   0436 D7            push a
0041   0437 11            mov a, b
0042   0438 29 DF 08      mov b, [COLS]
0043   043B B0            cmp a, b
0044   043C 0E            lodflgs
0045   043D 87 02         and al, %00000010
0046   043F 22 00         mov ah, 0
0047   0441 27            mov b, a
0048   0442 E4            pop a
0049   0443 C0 00 00      cmp b, 0
0050   0446 C6 81 04      je _for2_exit
0051   0449             _for2_block:
0052   0449 29 A5 12      mov b, [current_gen]
0053   044C 74            mov d, b
0054   044D 2C FF FF      mov b, [bp + -1] ; row
0055   0450 10 64 00      mov a, 100
0056   0453 AC            mul a, b
0057   0454 5A            add d, b
0058   0455 2C FD FF      mov b, [bp + -3] ; col
0059   0458 10 02 00      mov a, 2
0060   045B AC            mul a, b
0061   045C 5A            add d, b
0062   045D DA            push d
0063   045E 2C FF FF      mov b, [bp + -1] ; row
0064   0461 D7            push a
0065   0462 11            mov a, b
0066   0463 2C FD FF      mov b, [bp + -3] ; col
0067   0466 54            add a, b
0068   0467 27            mov b, a
0069   0468 E4            pop a
0070   0469 D7            push a
0071   046A 11            mov a, b
0072   046B 26 02 00      mov b, 2
0073   046E AE            div a, b
0074   046F E4            pop a
0075   0470 E7            pop d
0076   0471 11            mov a, b
0077   0472 43            mov [d], a
0078   0473             _for2_update:
0079   0473 2C FD FF      mov b, [bp + -3] ; col
0080   0476 FD 77         inc b
0081   0478 D7            push a
0082   0479 11            mov a, b
0083   047A 45 FD FF      mov [bp + -3], a ; col
0084   047D E4            pop a
0085   047E 0A 33 04      jmp _for2_cond
0086   0481             _for2_exit:
0087   0481             _for1_update:
0088   0481 2C FF FF      mov b, [bp + -1] ; row
0089   0484 FD 77         inc b
0090   0486 D7            push a
0091   0487 11            mov a, b
0092   0488 45 FF FF      mov [bp + -1], a ; row
0093   048B E4            pop a
0094   048C 0A 14 04      jmp _for1_cond
0095   048F             _for1_exit:
0096   048F             _for3_init:
0097   048F 26 01 00      mov b, 1
0098   0492 D7            push a
0099   0493 11            mov a, b
0100   0494 45 FB FF      mov [bp + -5], a ; gen
0101   0497 E4            pop a
0102   0498             _for3_cond:
0103   0498 2C FB FF      mov b, [bp + -5] ; gen
0104   049B D7            push a
0105   049C 11            mov a, b
0106   049D 26 64 00      mov b, 100
0107   04A0 B0            cmp a, b
0108   04A1 0E            lodflgs
0109   04A2 87 03         and al, %00000011
0110   04A4 22 00         mov ah, 0
0111   04A6 27            mov b, a
0112   04A7 E4            pop a
0113   04A8 C0 00 00      cmp b, 0
0114   04AB C6 C5 04      je _for3_exit
0115   04AE             _for3_block:
0116   04AE 07 1E 06      call compute_next_gen
0117   04B1 07 80 07      call copy_next_gen
0118   04B4 07 1C 08      call print_cells
0119   04B7             _for3_update:
0120   04B7 2C FB FF      mov b, [bp + -5] ; gen
0121   04BA FD 77         inc b
0122   04BC D7            push a
0123   04BD 11            mov a, b
0124   04BE 45 FB FF      mov [bp + -5], a ; gen
0125   04C1 E4            pop a
0126   04C2 0A 98 04      jmp _for3_cond
0127   04C5             _for3_exit:
0128   04C5 26 00 00      mov b, 0
0129   04C8 F9            leave
0130   04C9 05 0B         syscall sys_terminate_proc
0131   04CB             count_neighbors:
0132   04CB D2            push bp
0133   04CC 9B            mov bp, sp
0134   04CD 52 02 00      sub sp, 2 ; count
0135   04D0 52 02 00      sub sp, 2 ; i
0136   04D3 52 02 00      sub sp, 2 ; j
0137   04D6 52 02 00      sub sp, 2 ; r
0138   04D9 52 02 00      sub sp, 2 ; c
0139   04DC 26 00 00      mov b, 0
0140   04DF D7            push a
0141   04E0 11            mov a, b
0142   04E1 45 FF FF      mov [bp + -1], a ; count
0143   04E4 E4            pop a
0144   04E5             _for4_init:
0145   04E5 26 00 00      mov b, 0
0146   04E8 D7            push a
0147   04E9 11            mov a, b
0148   04EA 45 FD FF      mov [bp + -3], a ; i
0149   04ED E4            pop a
0150   04EE             _for4_cond:
0151   04EE 2C FD FF      mov b, [bp + -3] ; i
0152   04F1 D7            push a
0153   04F2 11            mov a, b
0154   04F3 26 03 00      mov b, 3
0155   04F6 B0            cmp a, b
0156   04F7 0E            lodflgs
0157   04F8 87 02         and al, %00000010
0158   04FA 22 00         mov ah, 0
0159   04FC 27            mov b, a
0160   04FD E4            pop a
0161   04FE C0 00 00      cmp b, 0
0162   0501 C6 F6 05      je _for4_exit
0163   0504             _for4_block:
0164   0504             _for5_init:
0165   0504 26 00 00      mov b, 0
0166   0507 D7            push a
0167   0508 11            mov a, b
0168   0509 45 FB FF      mov [bp + -5], a ; j
0169   050C E4            pop a
0170   050D             _for5_cond:
0171   050D 2C FB FF      mov b, [bp + -5] ; j
0172   0510 D7            push a
0173   0511 11            mov a, b
0174   0512 26 03 00      mov b, 3
0175   0515 B0            cmp a, b
0176   0516 0E            lodflgs
0177   0517 87 02         and al, %00000010
0178   0519 22 00         mov ah, 0
0179   051B 27            mov b, a
0180   051C E4            pop a
0181   051D C0 00 00      cmp b, 0
0182   0520 C6 E8 05      je _for5_exit
0183   0523             _for5_block:
0184   0523 2C 07 00      mov b, [bp + 7] ; row
0185   0526 D7            push a
0186   0527 11            mov a, b
0187   0528 2C FD FF      mov b, [bp + -3] ; i
0188   052B 54            add a, b
0189   052C 27            mov b, a
0190   052D E4            pop a
0191   052E D7            push a
0192   052F 11            mov a, b
0193   0530 26 01 00      mov b, 1
0194   0533 60            sub a, b
0195   0534 27            mov b, a
0196   0535 E4            pop a
0197   0536 D7            push a
0198   0537 11            mov a, b
0199   0538 29 DD 08      mov b, [ROWS]
0200   053B AE            div a, b
0201   053C E4            pop a
0202   053D D7            push a
0203   053E 11            mov a, b
0204   053F 45 F9 FF      mov [bp + -7], a ; r
0205   0542 E4            pop a
0206   0543 2C 05 00      mov b, [bp + 5] ; col
0207   0546 D7            push a
0208   0547 11            mov a, b
0209   0548 2C FB FF      mov b, [bp + -5] ; j
0210   054B 54            add a, b
0211   054C 27            mov b, a
0212   054D E4            pop a
0213   054E D7            push a
0214   054F 11            mov a, b
0215   0550 26 01 00      mov b, 1
0216   0553 60            sub a, b
0217   0554 27            mov b, a
0218   0555 E4            pop a
0219   0556 D7            push a
0220   0557 11            mov a, b
0221   0558 29 DF 08      mov b, [COLS]
0222   055B AE            div a, b
0223   055C E4            pop a
0224   055D D7            push a
0225   055E 11            mov a, b
0226   055F 45 F7 FF      mov [bp + -9], a ; c
0227   0562 E4            pop a
0228   0563             _if6_cond:
0229   0563 2C F9 FF      mov b, [bp + -7] ; r
0230   0566 D7            push a
0231   0567 11            mov a, b
0232   0568 26 00 00      mov b, 0
0233   056B B0            cmp a, b
0234   056C 0E            lodflgs
0235   056D 87 02         and al, %00000010
0236   056F 22 00         mov ah, 0
0237   0571 27            mov b, a
0238   0572 E4            pop a
0239   0573 C0 00 00      cmp b, 0
0240   0576 C6 8D 05      je _if6_exit
0241   0579             _if6_true:
0242   0579 2C F9 FF      mov b, [bp + -7] ; r
0243   057C D7            push a
0244   057D 11            mov a, b
0245   057E 29 DD 08      mov b, [ROWS]
0246   0581 54            add a, b
0247   0582 27            mov b, a
0248   0583 E4            pop a
0249   0584 D7            push a
0250   0585 11            mov a, b
0251   0586 45 F9 FF      mov [bp + -7], a ; r
0252   0589 E4            pop a
0253   058A 0A 8D 05      jmp _if6_exit
0254   058D             _if6_exit:
0255   058D             _if7_cond:
0256   058D 2C F7 FF      mov b, [bp + -9] ; c
0257   0590 D7            push a
0258   0591 11            mov a, b
0259   0592 26 00 00      mov b, 0
0260   0595 B0            cmp a, b
0261   0596 0E            lodflgs
0262   0597 87 02         and al, %00000010
0263   0599 22 00         mov ah, 0
0264   059B 27            mov b, a
0265   059C E4            pop a
0266   059D C0 00 00      cmp b, 0
0267   05A0 C6 B7 05      je _if7_exit
0268   05A3             _if7_true:
0269   05A3 2C F7 FF      mov b, [bp + -9] ; c
0270   05A6 D7            push a
0271   05A7 11            mov a, b
0272   05A8 29 DF 08      mov b, [COLS]
0273   05AB 54            add a, b
0274   05AC 27            mov b, a
0275   05AD E4            pop a
0276   05AE D7            push a
0277   05AF 11            mov a, b
0278   05B0 45 F7 FF      mov [bp + -9], a ; c
0279   05B3 E4            pop a
0280   05B4 0A B7 05      jmp _if7_exit
0281   05B7             _if7_exit:
0282   05B7 2C FF FF      mov b, [bp + -1] ; count
0283   05BA D7            push a
0284   05BB 11            mov a, b
0285   05BC 29 A5 12      mov b, [current_gen]
0286   05BF 74            mov d, b
0287   05C0 2C F9 FF      mov b, [bp + -7] ; r
0288   05C3 10 64 00      mov a, 100
0289   05C6 AC            mul a, b
0290   05C7 5A            add d, b
0291   05C8 2C F7 FF      mov b, [bp + -9] ; c
0292   05CB 10 02 00      mov a, 2
0293   05CE AC            mul a, b
0294   05CF 5A            add d, b
0295   05D0 2A            mov b, [d]
0296   05D1 54            add a, b
0297   05D2 27            mov b, a
0298   05D3 E4            pop a
0299   05D4 D7            push a
0300   05D5 11            mov a, b
0301   05D6 45 FF FF      mov [bp + -1], a ; count
0302   05D9 E4            pop a
0303   05DA             _for5_update:
0304   05DA 2C FB FF      mov b, [bp + -5] ; j
0305   05DD FD 77         inc b
0306   05DF D7            push a
0307   05E0 11            mov a, b
0308   05E1 45 FB FF      mov [bp + -5], a ; j
0309   05E4 E4            pop a
0310   05E5 0A 0D 05      jmp _for5_cond
0311   05E8             _for5_exit:
0312   05E8             _for4_update:
0313   05E8 2C FD FF      mov b, [bp + -3] ; i
0314   05EB FD 77         inc b
0315   05ED D7            push a
0316   05EE 11            mov a, b
0317   05EF 45 FD FF      mov [bp + -3], a ; i
0318   05F2 E4            pop a
0319   05F3 0A EE 04      jmp _for4_cond
0320   05F6             _for4_exit:
0321   05F6 2C FF FF      mov b, [bp + -1] ; count
0322   05F9 D7            push a
0323   05FA 11            mov a, b
0324   05FB 29 A5 12      mov b, [current_gen]
0325   05FE 74            mov d, b
0326   05FF 2C 07 00      mov b, [bp + 7] ; row
0327   0602 10 64 00      mov a, 100
0328   0605 AC            mul a, b
0329   0606 5A            add d, b
0330   0607 2C 05 00      mov b, [bp + 5] ; col
0331   060A 10 02 00      mov a, 2
0332   060D AC            mul a, b
0333   060E 5A            add d, b
0334   060F 2A            mov b, [d]
0335   0610 60            sub a, b
0336   0611 27            mov b, a
0337   0612 E4            pop a
0338   0613 D7            push a
0339   0614 11            mov a, b
0340   0615 45 FF FF      mov [bp + -1], a ; count
0341   0618 E4            pop a
0342   0619 2C FF FF      mov b, [bp + -1] ; count
0343   061C F9            leave
0344   061D 09            ret
0345   061E             compute_next_gen:
0346   061E D2            push bp
0347   061F 9B            mov bp, sp
0348   0620 52 02 00      sub sp, 2 ; row
0349   0623 52 02 00      sub sp, 2 ; col
0350   0626 52 02 00      sub sp, 2 ; neighbors
0351   0629             _for8_init:
0352   0629 26 00 00      mov b, 0
0353   062C D7            push a
0354   062D 11            mov a, b
0355   062E 45 FF FF      mov [bp + -1], a ; row
0356   0631 E4            pop a
0357   0632             _for8_cond:
0358   0632 2C FF FF      mov b, [bp + -1] ; row
0359   0635 D7            push a
0360   0636 11            mov a, b
0361   0637 29 DD 08      mov b, [ROWS]
0362   063A B0            cmp a, b
0363   063B 0E            lodflgs
0364   063C 87 02         and al, %00000010
0365   063E 22 00         mov ah, 0
0366   0640 27            mov b, a
0367   0641 E4            pop a
0368   0642 C0 00 00      cmp b, 0
0369   0645 C6 7E 07      je _for8_exit
0370   0648             _for8_block:
0371   0648             _for9_init:
0372   0648 26 00 00      mov b, 0
0373   064B D7            push a
0374   064C 11            mov a, b
0375   064D 45 FD FF      mov [bp + -3], a ; col
0376   0650 E4            pop a
0377   0651             _for9_cond:
0378   0651 2C FD FF      mov b, [bp + -3] ; col
0379   0654 D7            push a
0380   0655 11            mov a, b
0381   0656 29 DF 08      mov b, [COLS]
0382   0659 B0            cmp a, b
0383   065A 0E            lodflgs
0384   065B 87 02         and al, %00000010
0385   065D 22 00         mov ah, 0
0386   065F 27            mov b, a
0387   0660 E4            pop a
0388   0661 C0 00 00      cmp b, 0
0389   0664 C6 70 07      je _for9_exit
0390   0667             _for9_block:
0391   0667 2C FF FF      mov b, [bp + -1] ; row
0392   066A FD AB         swp b
0393   066C D8            push b
0394   066D 2C FD FF      mov b, [bp + -3] ; col
0395   0670 FD AB         swp b
0396   0672 D8            push b
0397   0673 07 CB 04      call count_neighbors
0398   0676 51 04 00      add sp, 4
0399   0679 D7            push a
0400   067A 11            mov a, b
0401   067B 45 FB FF      mov [bp + -5], a ; neighbors
0402   067E E4            pop a
0403   067F             _if10_cond:
0404   067F 29 A5 12      mov b, [current_gen]
0405   0682 74            mov d, b
0406   0683 2C FF FF      mov b, [bp + -1] ; row
0407   0686 10 64 00      mov a, 100
0408   0689 AC            mul a, b
0409   068A 5A            add d, b
0410   068B 2C FD FF      mov b, [bp + -3] ; col
0411   068E 10 02 00      mov a, 2
0412   0691 AC            mul a, b
0413   0692 5A            add d, b
0414   0693 2A            mov b, [d]
0415   0694 D7            push a
0416   0695 11            mov a, b
0417   0696 26 01 00      mov b, 1
0418   0699 B0            cmp a, b
0419   069A 0E            lodflgs
0420   069B 87 01         and al, %00000001
0421   069D 22 00         mov ah, 0
0422   069F 27            mov b, a
0423   06A0 E4            pop a
0424   06A1 C0 00 00      cmp b, 0
0425   06A4 C6 13 07      je _if10_else
0426   06A7             _if10_true:
0427   06A7             _if11_cond:
0428   06A7 2C FB FF      mov b, [bp + -5] ; neighbors
0429   06AA D7            push a
0430   06AB 11            mov a, b
0431   06AC 26 02 00      mov b, 2
0432   06AF B0            cmp a, b
0433   06B0 0E            lodflgs
0434   06B1 87 02         and al, %00000010
0435   06B3 22 00         mov ah, 0
0436   06B5 27            mov b, a
0437   06B6 E4            pop a
0438   06B7 D7            push a
0439   06B8 11            mov a, b
0440   06B9 2C FB FF      mov b, [bp + -5] ; neighbors
0441   06BC D7            push a
0442   06BD 11            mov a, b
0443   06BE 26 03 00      mov b, 3
0444   06C1 B0            cmp a, b
0445   06C2 0E            lodflgs
0446   06C3 87 03         and al, %00000011
0447   06C5 B9 00         cmp al, %00000000
0448   06C7 0E            lodflgs
0449   06C8 87 01         and al, %00000001
0450   06CA 22 00         mov ah, 0
0451   06CC 27            mov b, a
0452   06CD E4            pop a
0453   06CE 8A            or a, b
0454   06CF 27            mov b, a
0455   06D0 E4            pop a
0456   06D1 C0 00 00      cmp b, 0
0457   06D4 C6 F5 06      je _if11_else
0458   06D7             _if11_true:
0459   06D7 29 6B 1C      mov b, [next_gen]
0460   06DA 74            mov d, b
0461   06DB 2C FF FF      mov b, [bp + -1] ; row
0462   06DE 10 64 00      mov a, 100
0463   06E1 AC            mul a, b
0464   06E2 5A            add d, b
0465   06E3 2C FD FF      mov b, [bp + -3] ; col
0466   06E6 10 02 00      mov a, 2
0467   06E9 AC            mul a, b
0468   06EA 5A            add d, b
0469   06EB DA            push d
0470   06EC 26 00 00      mov b, 0
0471   06EF E7            pop d
0472   06F0 11            mov a, b
0473   06F1 43            mov [d], a
0474   06F2 0A 10 07      jmp _if11_exit
0475   06F5             _if11_else:
0476   06F5 29 6B 1C      mov b, [next_gen]
0477   06F8 74            mov d, b
0478   06F9 2C FF FF      mov b, [bp + -1] ; row
0479   06FC 10 64 00      mov a, 100
0480   06FF AC            mul a, b
0481   0700 5A            add d, b
0482   0701 2C FD FF      mov b, [bp + -3] ; col
0483   0704 10 02 00      mov a, 2
0484   0707 AC            mul a, b
0485   0708 5A            add d, b
0486   0709 DA            push d
0487   070A 26 01 00      mov b, 1
0488   070D E7            pop d
0489   070E 11            mov a, b
0490   070F 43            mov [d], a
0491   0710             _if11_exit:
0492   0710 0A 62 07      jmp _if10_exit
0493   0713             _if10_else:
0494   0713             _if12_cond:
0495   0713 2C FB FF      mov b, [bp + -5] ; neighbors
0496   0716 D7            push a
0497   0717 11            mov a, b
0498   0718 26 03 00      mov b, 3
0499   071B B0            cmp a, b
0500   071C 0E            lodflgs
0501   071D 87 01         and al, %00000001
0502   071F 22 00         mov ah, 0
0503   0721 27            mov b, a
0504   0722 E4            pop a
0505   0723 C0 00 00      cmp b, 0
0506   0726 C6 47 07      je _if12_else
0507   0729             _if12_true:
0508   0729 29 6B 1C      mov b, [next_gen]
0509   072C 74            mov d, b
0510   072D 2C FF FF      mov b, [bp + -1] ; row
0511   0730 10 64 00      mov a, 100
0512   0733 AC            mul a, b
0513   0734 5A            add d, b
0514   0735 2C FD FF      mov b, [bp + -3] ; col
0515   0738 10 02 00      mov a, 2
0516   073B AC            mul a, b
0517   073C 5A            add d, b
0518   073D DA            push d
0519   073E 26 01 00      mov b, 1
0520   0741 E7            pop d
0521   0742 11            mov a, b
0522   0743 43            mov [d], a
0523   0744 0A 62 07      jmp _if12_exit
0524   0747             _if12_else:
0525   0747 29 6B 1C      mov b, [next_gen]
0526   074A 74            mov d, b
0527   074B 2C FF FF      mov b, [bp + -1] ; row
0528   074E 10 64 00      mov a, 100
0529   0751 AC            mul a, b
0530   0752 5A            add d, b
0531   0753 2C FD FF      mov b, [bp + -3] ; col
0532   0756 10 02 00      mov a, 2
0533   0759 AC            mul a, b
0534   075A 5A            add d, b
0535   075B DA            push d
0536   075C 26 00 00      mov b, 0
0537   075F E7            pop d
0538   0760 11            mov a, b
0539   0761 43            mov [d], a
0540   0762             _if12_exit:
0541   0762             _if10_exit:
0542   0762             _for9_update:
0543   0762 2C FD FF      mov b, [bp + -3] ; col
0544   0765 FD 77         inc b
0545   0767 D7            push a
0546   0768 11            mov a, b
0547   0769 45 FD FF      mov [bp + -3], a ; col
0548   076C E4            pop a
0549   076D 0A 51 06      jmp _for9_cond
0550   0770             _for9_exit:
0551   0770             _for8_update:
0552   0770 2C FF FF      mov b, [bp + -1] ; row
0553   0773 FD 77         inc b
0554   0775 D7            push a
0555   0776 11            mov a, b
0556   0777 45 FF FF      mov [bp + -1], a ; row
0557   077A E4            pop a
0558   077B 0A 32 06      jmp _for8_cond
0559   077E             _for8_exit:
0560   077E F9            leave
0561   077F 09            ret
0562   0780             copy_next_gen:
0563   0780 D2            push bp
0564   0781 9B            mov bp, sp
0565   0782 52 02 00      sub sp, 2 ; row
0566   0785 52 02 00      sub sp, 2 ; col
0567   0788             _for13_init:
0568   0788 26 00 00      mov b, 0
0569   078B D7            push a
0570   078C 11            mov a, b
0571   078D 45 FF FF      mov [bp + -1], a ; row
0572   0790 E4            pop a
0573   0791             _for13_cond:
0574   0791 2C FF FF      mov b, [bp + -1] ; row
0575   0794 D7            push a
0576   0795 11            mov a, b
0577   0796 29 DD 08      mov b, [ROWS]
0578   0799 B0            cmp a, b
0579   079A 0E            lodflgs
0580   079B 87 02         and al, %00000010
0581   079D 22 00         mov ah, 0
0582   079F 27            mov b, a
0583   07A0 E4            pop a
0584   07A1 C0 00 00      cmp b, 0
0585   07A4 C6 0F 08      je _for13_exit
0586   07A7             _for13_block:
0587   07A7             _for14_init:
0588   07A7 26 00 00      mov b, 0
0589   07AA D7            push a
0590   07AB 11            mov a, b
0591   07AC 45 FD FF      mov [bp + -3], a ; col
0592   07AF E4            pop a
0593   07B0             _for14_cond:
0594   07B0 2C FD FF      mov b, [bp + -3] ; col
0595   07B3 D7            push a
0596   07B4 11            mov a, b
0597   07B5 29 DF 08      mov b, [COLS]
0598   07B8 B0            cmp a, b
0599   07B9 0E            lodflgs
0600   07BA 87 02         and al, %00000010
0601   07BC 22 00         mov ah, 0
0602   07BE 27            mov b, a
0603   07BF E4            pop a
0604   07C0 C0 00 00      cmp b, 0
0605   07C3 C6 01 08      je _for14_exit
0606   07C6             _for14_block:
0607   07C6 29 A5 12      mov b, [current_gen]
0608   07C9 74            mov d, b
0609   07CA 2C FF FF      mov b, [bp + -1] ; row
0610   07CD 10 64 00      mov a, 100
0611   07D0 AC            mul a, b
0612   07D1 5A            add d, b
0613   07D2 2C FD FF      mov b, [bp + -3] ; col
0614   07D5 10 02 00      mov a, 2
0615   07D8 AC            mul a, b
0616   07D9 5A            add d, b
0617   07DA DA            push d
0618   07DB 29 6B 1C      mov b, [next_gen]
0619   07DE 74            mov d, b
0620   07DF 2C FF FF      mov b, [bp + -1] ; row
0621   07E2 10 64 00      mov a, 100
0622   07E5 AC            mul a, b
0623   07E6 5A            add d, b
0624   07E7 2C FD FF      mov b, [bp + -3] ; col
0625   07EA 10 02 00      mov a, 2
0626   07ED AC            mul a, b
0627   07EE 5A            add d, b
0628   07EF 2A            mov b, [d]
0629   07F0 E7            pop d
0630   07F1 11            mov a, b
0631   07F2 43            mov [d], a
0632   07F3             _for14_update:
0633   07F3 2C FD FF      mov b, [bp + -3] ; col
0634   07F6 FD 77         inc b
0635   07F8 D7            push a
0636   07F9 11            mov a, b
0637   07FA 45 FD FF      mov [bp + -3], a ; col
0638   07FD E4            pop a
0639   07FE 0A B0 07      jmp _for14_cond
0640   0801             _for14_exit:
0641   0801             _for13_update:
0642   0801 2C FF FF      mov b, [bp + -1] ; row
0643   0804 FD 77         inc b
0644   0806 D7            push a
0645   0807 11            mov a, b
0646   0808 45 FF FF      mov [bp + -1], a ; row
0647   080B E4            pop a
0648   080C 0A 91 07      jmp _for13_cond
0649   080F             _for13_exit:
0650   080F F9            leave
0651   0810 09            ret
0652   0811             prints:
0653   0811 D2            push bp
0654   0812 9B            mov bp, sp
0655   0813             
0656   0813             ; --- BEGIN INLINE ASM BLOCK
0657   0813 17 05 00      mov a, [bp + 5]
0658   0816 3C            mov d, a
0659   0817 07 BC 1E      call puts
0660   081A             ; --- END INLINE ASM BLOCK
0661   081A             
0662   081A F9            leave
0663   081B 09            ret
0664   081C             print_cells:
0665   081C D2            push bp
0666   081D 9B            mov bp, sp
0667   081E 52 02 00      sub sp, 2 ; row
0668   0821 52 02 00      sub sp, 2 ; col
0669   0824 26 6D 1C      mov b, _string_0
0670   0827 FD AB         swp b
0671   0829 D8            push b
0672   082A 07 11 08      call prints
0673   082D 51 02 00      add sp, 2
0674   0830             _for15_init:
0675   0830 26 00 00      mov b, 0
0676   0833 D7            push a
0677   0834 11            mov a, b
0678   0835 45 FF FF      mov [bp + -1], a ; row
0679   0838 E4            pop a
0680   0839             _for15_cond:
0681   0839 2C FF FF      mov b, [bp + -1] ; row
0682   083C D7            push a
0683   083D 11            mov a, b
0684   083E 29 DD 08      mov b, [ROWS]
0685   0841 B0            cmp a, b
0686   0842 0E            lodflgs
0687   0843 87 02         and al, %00000010
0688   0845 22 00         mov ah, 0
0689   0847 27            mov b, a
0690   0848 E4            pop a
0691   0849 C0 00 00      cmp b, 0
0692   084C C6 DB 08      je _for15_exit
0693   084F             _for15_block:
0694   084F             _for16_init:
0695   084F 26 00 00      mov b, 0
0696   0852 D7            push a
0697   0853 11            mov a, b
0698   0854 45 FD FF      mov [bp + -3], a ; col
0699   0857 E4            pop a
0700   0858             _for16_cond:
0701   0858 2C FD FF      mov b, [bp + -3] ; col
0702   085B D7            push a
0703   085C 11            mov a, b
0704   085D 29 DF 08      mov b, [COLS]
0705   0860 B0            cmp a, b
0706   0861 0E            lodflgs
0707   0862 87 02         and al, %00000010
0708   0864 22 00         mov ah, 0
0709   0866 27            mov b, a
0710   0867 E4            pop a
0711   0868 C0 00 00      cmp b, 0
0712   086B C6 C1 08      je _for16_exit
0713   086E             _for16_block:
0714   086E             _if17_cond:
0715   086E 29 A5 12      mov b, [current_gen]
0716   0871 74            mov d, b
0717   0872 2C FF FF      mov b, [bp + -1] ; row
0718   0875 10 64 00      mov a, 100
0719   0878 AC            mul a, b
0720   0879 5A            add d, b
0721   087A 2C FD FF      mov b, [bp + -3] ; col
0722   087D 10 02 00      mov a, 2
0723   0880 AC            mul a, b
0724   0881 5A            add d, b
0725   0882 2A            mov b, [d]
0726   0883 D7            push a
0727   0884 11            mov a, b
0728   0885 26 00 00      mov b, 0
0729   0888 B0            cmp a, b
0730   0889 0E            lodflgs
0731   088A 87 01         and al, %00000001
0732   088C 8F 01         xor al, %00000001
0733   088E 22 00         mov ah, 0
0734   0890 27            mov b, a
0735   0891 E4            pop a
0736   0892 C0 00 00      cmp b, 0
0737   0895 C6 A7 08      je _if17_else
0738   0898             _if17_true:
0739   0898 26 72 1C      mov b, _string_1
0740   089B FD AB         swp b
0741   089D D8            push b
0742   089E 07 11 08      call prints
0743   08A1 51 02 00      add sp, 2
0744   08A4 0A B3 08      jmp _if17_exit
0745   08A7             _if17_else:
0746   08A7 26 74 1C      mov b, _string_2
0747   08AA FD AB         swp b
0748   08AC D8            push b
0749   08AD 07 11 08      call prints
0750   08B0 51 02 00      add sp, 2
0751   08B3             _if17_exit:
0752   08B3             _for16_update:
0753   08B3 2C FD FF      mov b, [bp + -3] ; col
0754   08B6 FD 77         inc b
0755   08B8 D7            push a
0756   08B9 11            mov a, b
0757   08BA 45 FD FF      mov [bp + -3], a ; col
0758   08BD E4            pop a
0759   08BE 0A 58 08      jmp _for16_cond
0760   08C1             _for16_exit:
0761   08C1 26 76 1C      mov b, _string_3
0762   08C4 FD AB         swp b
0763   08C6 D8            push b
0764   08C7 07 11 08      call prints
0765   08CA 51 02 00      add sp, 2
0766   08CD             _for15_update:
0767   08CD 2C FF FF      mov b, [bp + -1] ; row
0768   08D0 FD 77         inc b
0769   08D2 D7            push a
0770   08D3 11            mov a, b
0771   08D4 45 FF FF      mov [bp + -1], a ; row
0772   08D7 E4            pop a
0773   08D8 0A 39 08      jmp _for15_cond
0774   08DB             _for15_exit:
0775   08DB F9            leave
0776   08DC 09            ret
0777   08DD             ; --- END TEXT BLOCK
0778   08DD             
0779   08DD             ; --- BEGIN DATA BLOCK
0780   08DD 32 00       ROWS: .dw 50
0781   08DF 32 00       COLS: .dw 50
0782   08E1 00 00 00 00 current_gen_data: .fill 2500, 0
0782   08E5 00 00 00 00 
0782   08E9 00 00 00 00 
0782   08ED 00 00 00 00 
0782   08F1 00 00 00 00 
0782   08F5 00 00 00 00 
0782   08F9 00 00 00 00 
0782   08FD 00 00 00 00 
0782   0901 00 00 00 00 
0782   0905 00 00 00 00 
0782   0909 00 00 00 00 
0782   090D 00 00 00 00 
0782   0911 00 00 00 00 
0782   0915 00 00 00 00 
0782   0919 00 00 00 00 
0782   091D 00 00 00 00 
0782   0921 00 00 00 00 
0782   0925 00 00 00 00 
0782   0929 00 00 00 00 
0782   092D 00 00 00 00 
0782   0931 00 00 00 00 
0782   0935 00 00 00 00 
0782   0939 00 00 00 00 
0782   093D 00 00 00 00 
0782   0941 00 00 00 00 
0782   0945 00 00 00 00 
0782   0949 00 00 00 00 
0782   094D 00 00 00 00 
0782   0951 00 00 00 00 
0782   0955 00 00 00 00 
0782   0959 00 00 00 00 
0782   095D 00 00 00 00 
0782   0961 00 00 00 00 
0782   0965 00 00 00 00 
0782   0969 00 00 00 00 
0782   096D 00 00 00 00 
0782   0971 00 00 00 00 
0782   0975 00 00 00 00 
0782   0979 00 00 00 00 
0782   097D 00 00 00 00 
0782   0981 00 00 00 00 
0782   0985 00 00 00 00 
0782   0989 00 00 00 00 
0782   098D 00 00 00 00 
0782   0991 00 00 00 00 
0782   0995 00 00 00 00 
0782   0999 00 00 00 00 
0782   099D 00 00 00 00 
0782   09A1 00 00 00 00 
0782   09A5 00 00 00 00 
0782   09A9 00 00 00 00 
0782   09AD 00 00 00 00 
0782   09B1 00 00 00 00 
0782   09B5 00 00 00 00 
0782   09B9 00 00 00 00 
0782   09BD 00 00 00 00 
0782   09C1 00 00 00 00 
0782   09C5 00 00 00 00 
0782   09C9 00 00 00 00 
0782   09CD 00 00 00 00 
0782   09D1 00 00 00 00 
0782   09D5 00 00 00 00 
0782   09D9 00 00 00 00 
0782   09DD 00 00 00 00 
0782   09E1 00 00 00 00 
0782   09E5 00 00 00 00 
0782   09E9 00 00 00 00 
0782   09ED 00 00 00 00 
0782   09F1 00 00 00 00 
0782   09F5 00 00 00 00 
0782   09F9 00 00 00 00 
0782   09FD 00 00 00 00 
0782   0A01 00 00 00 00 
0782   0A05 00 00 00 00 
0782   0A09 00 00 00 00 
0782   0A0D 00 00 00 00 
0782   0A11 00 00 00 00 
0782   0A15 00 00 00 00 
0782   0A19 00 00 00 00 
0782   0A1D 00 00 00 00 
0782   0A21 00 00 00 00 
0782   0A25 00 00 00 00 
0782   0A29 00 00 00 00 
0782   0A2D 00 00 00 00 
0782   0A31 00 00 00 00 
0782   0A35 00 00 00 00 
0782   0A39 00 00 00 00 
0782   0A3D 00 00 00 00 
0782   0A41 00 00 00 00 
0782   0A45 00 00 00 00 
0782   0A49 00 00 00 00 
0782   0A4D 00 00 00 00 
0782   0A51 00 00 00 00 
0782   0A55 00 00 00 00 
0782   0A59 00 00 00 00 
0782   0A5D 00 00 00 00 
0782   0A61 00 00 00 00 
0782   0A65 00 00 00 00 
0782   0A69 00 00 00 00 
0782   0A6D 00 00 00 00 
0782   0A71 00 00 00 00 
0782   0A75 00 00 00 00 
0782   0A79 00 00 00 00 
0782   0A7D 00 00 00 00 
0782   0A81 00 00 00 00 
0782   0A85 00 00 00 00 
0782   0A89 00 00 00 00 
0782   0A8D 00 00 00 00 
0782   0A91 00 00 00 00 
0782   0A95 00 00 00 00 
0782   0A99 00 00 00 00 
0782   0A9D 00 00 00 00 
0782   0AA1 00 00 00 00 
0782   0AA5 00 00 00 00 
0782   0AA9 00 00 00 00 
0782   0AAD 00 00 00 00 
0782   0AB1 00 00 00 00 
0782   0AB5 00 00 00 00 
0782   0AB9 00 00 00 00 
0782   0ABD 00 00 00 00 
0782   0AC1 00 00 00 00 
0782   0AC5 00 00 00 00 
0782   0AC9 00 00 00 00 
0782   0ACD 00 00 00 00 
0782   0AD1 00 00 00 00 
0782   0AD5 00 00 00 00 
0782   0AD9 00 00 00 00 
0782   0ADD 00 00 00 00 
0782   0AE1 00 00 00 00 
0782   0AE5 00 00 00 00 
0782   0AE9 00 00 00 00 
0782   0AED 00 00 00 00 
0782   0AF1 00 00 00 00 
0782   0AF5 00 00 00 00 
0782   0AF9 00 00 00 00 
0782   0AFD 00 00 00 00 
0782   0B01 00 00 00 00 
0782   0B05 00 00 00 00 
0782   0B09 00 00 00 00 
0782   0B0D 00 00 00 00 
0782   0B11 00 00 00 00 
0782   0B15 00 00 00 00 
0782   0B19 00 00 00 00 
0782   0B1D 00 00 00 00 
0782   0B21 00 00 00 00 
0782   0B25 00 00 00 00 
0782   0B29 00 00 00 00 
0782   0B2D 00 00 00 00 
0782   0B31 00 00 00 00 
0782   0B35 00 00 00 00 
0782   0B39 00 00 00 00 
0782   0B3D 00 00 00 00 
0782   0B41 00 00 00 00 
0782   0B45 00 00 00 00 
0782   0B49 00 00 00 00 
0782   0B4D 00 00 00 00 
0782   0B51 00 00 00 00 
0782   0B55 00 00 00 00 
0782   0B59 00 00 00 00 
0782   0B5D 00 00 00 00 
0782   0B61 00 00 00 00 
0782   0B65 00 00 00 00 
0782   0B69 00 00 00 00 
0782   0B6D 00 00 00 00 
0782   0B71 00 00 00 00 
0782   0B75 00 00 00 00 
0782   0B79 00 00 00 00 
0782   0B7D 00 00 00 00 
0782   0B81 00 00 00 00 
0782   0B85 00 00 00 00 
0782   0B89 00 00 00 00 
0782   0B8D 00 00 00 00 
0782   0B91 00 00 00 00 
0782   0B95 00 00 00 00 
0782   0B99 00 00 00 00 
0782   0B9D 00 00 00 00 
0782   0BA1 00 00 00 00 
0782   0BA5 00 00 00 00 
0782   0BA9 00 00 00 00 
0782   0BAD 00 00 00 00 
0782   0BB1 00 00 00 00 
0782   0BB5 00 00 00 00 
0782   0BB9 00 00 00 00 
0782   0BBD 00 00 00 00 
0782   0BC1 00 00 00 00 
0782   0BC5 00 00 00 00 
0782   0BC9 00 00 00 00 
0782   0BCD 00 00 00 00 
0782   0BD1 00 00 00 00 
0782   0BD5 00 00 00 00 
0782   0BD9 00 00 00 00 
0782   0BDD 00 00 00 00 
0782   0BE1 00 00 00 00 
0782   0BE5 00 00 00 00 
0782   0BE9 00 00 00 00 
0782   0BED 00 00 00 00 
0782   0BF1 00 00 00 00 
0782   0BF5 00 00 00 00 
0782   0BF9 00 00 00 00 
0782   0BFD 00 00 00 00 
0782   0C01 00 00 00 00 
0782   0C05 00 00 00 00 
0782   0C09 00 00 00 00 
0782   0C0D 00 00 00 00 
0782   0C11 00 00 00 00 
0782   0C15 00 00 00 00 
0782   0C19 00 00 00 00 
0782   0C1D 00 00 00 00 
0782   0C21 00 00 00 00 
0782   0C25 00 00 00 00 
0782   0C29 00 00 00 00 
0782   0C2D 00 00 00 00 
0782   0C31 00 00 00 00 
0782   0C35 00 00 00 00 
0782   0C39 00 00 00 00 
0782   0C3D 00 00 00 00 
0782   0C41 00 00 00 00 
0782   0C45 00 00 00 00 
0782   0C49 00 00 00 00 
0782   0C4D 00 00 00 00 
0782   0C51 00 00 00 00 
0782   0C55 00 00 00 00 
0782   0C59 00 00 00 00 
0782   0C5D 00 00 00 00 
0782   0C61 00 00 00 00 
0782   0C65 00 00 00 00 
0782   0C69 00 00 00 00 
0782   0C6D 00 00 00 00 
0782   0C71 00 00 00 00 
0782   0C75 00 00 00 00 
0782   0C79 00 00 00 00 
0782   0C7D 00 00 00 00 
0782   0C81 00 00 00 00 
0782   0C85 00 00 00 00 
0782   0C89 00 00 00 00 
0782   0C8D 00 00 00 00 
0782   0C91 00 00 00 00 
0782   0C95 00 00 00 00 
0782   0C99 00 00 00 00 
0782   0C9D 00 00 00 00 
0782   0CA1 00 00 00 00 
0782   0CA5 00 00 00 00 
0782   0CA9 00 00 00 00 
0782   0CAD 00 00 00 00 
0782   0CB1 00 00 00 00 
0782   0CB5 00 00 00 00 
0782   0CB9 00 00 00 00 
0782   0CBD 00 00 00 00 
0782   0CC1 00 00 00 00 
0782   0CC5 00 00 00 00 
0782   0CC9 00 00 00 00 
0782   0CCD 00 00 00 00 
0782   0CD1 00 00 00 00 
0782   0CD5 00 00 00 00 
0782   0CD9 00 00 00 00 
0782   0CDD 00 00 00 00 
0782   0CE1 00 00 00 00 
0782   0CE5 00 00 00 00 
0782   0CE9 00 00 00 00 
0782   0CED 00 00 00 00 
0782   0CF1 00 00 00 00 
0782   0CF5 00 00 00 00 
0782   0CF9 00 00 00 00 
0782   0CFD 00 00 00 00 
0782   0D01 00 00 00 00 
0782   0D05 00 00 00 00 
0782   0D09 00 00 00 00 
0782   0D0D 00 00 00 00 
0782   0D11 00 00 00 00 
0782   0D15 00 00 00 00 
0782   0D19 00 00 00 00 
0782   0D1D 00 00 00 00 
0782   0D21 00 00 00 00 
0782   0D25 00 00 00 00 
0782   0D29 00 00 00 00 
0782   0D2D 00 00 00 00 
0782   0D31 00 00 00 00 
0782   0D35 00 00 00 00 
0782   0D39 00 00 00 00 
0782   0D3D 00 00 00 00 
0782   0D41 00 00 00 00 
0782   0D45 00 00 00 00 
0782   0D49 00 00 00 00 
0782   0D4D 00 00 00 00 
0782   0D51 00 00 00 00 
0782   0D55 00 00 00 00 
0782   0D59 00 00 00 00 
0782   0D5D 00 00 00 00 
0782   0D61 00 00 00 00 
0782   0D65 00 00 00 00 
0782   0D69 00 00 00 00 
0782   0D6D 00 00 00 00 
0782   0D71 00 00 00 00 
0782   0D75 00 00 00 00 
0782   0D79 00 00 00 00 
0782   0D7D 00 00 00 00 
0782   0D81 00 00 00 00 
0782   0D85 00 00 00 00 
0782   0D89 00 00 00 00 
0782   0D8D 00 00 00 00 
0782   0D91 00 00 00 00 
0782   0D95 00 00 00 00 
0782   0D99 00 00 00 00 
0782   0D9D 00 00 00 00 
0782   0DA1 00 00 00 00 
0782   0DA5 00 00 00 00 
0782   0DA9 00 00 00 00 
0782   0DAD 00 00 00 00 
0782   0DB1 00 00 00 00 
0782   0DB5 00 00 00 00 
0782   0DB9 00 00 00 00 
0782   0DBD 00 00 00 00 
0782   0DC1 00 00 00 00 
0782   0DC5 00 00 00 00 
0782   0DC9 00 00 00 00 
0782   0DCD 00 00 00 00 
0782   0DD1 00 00 00 00 
0782   0DD5 00 00 00 00 
0782   0DD9 00 00 00 00 
0782   0DDD 00 00 00 00 
0782   0DE1 00 00 00 00 
0782   0DE5 00 00 00 00 
0782   0DE9 00 00 00 00 
0782   0DED 00 00 00 00 
0782   0DF1 00 00 00 00 
0782   0DF5 00 00 00 00 
0782   0DF9 00 00 00 00 
0782   0DFD 00 00 00 00 
0782   0E01 00 00 00 00 
0782   0E05 00 00 00 00 
0782   0E09 00 00 00 00 
0782   0E0D 00 00 00 00 
0782   0E11 00 00 00 00 
0782   0E15 00 00 00 00 
0782   0E19 00 00 00 00 
0782   0E1D 00 00 00 00 
0782   0E21 00 00 00 00 
0782   0E25 00 00 00 00 
0782   0E29 00 00 00 00 
0782   0E2D 00 00 00 00 
0782   0E31 00 00 00 00 
0782   0E35 00 00 00 00 
0782   0E39 00 00 00 00 
0782   0E3D 00 00 00 00 
0782   0E41 00 00 00 00 
0782   0E45 00 00 00 00 
0782   0E49 00 00 00 00 
0782   0E4D 00 00 00 00 
0782   0E51 00 00 00 00 
0782   0E55 00 00 00 00 
0782   0E59 00 00 00 00 
0782   0E5D 00 00 00 00 
0782   0E61 00 00 00 00 
0782   0E65 00 00 00 00 
0782   0E69 00 00 00 00 
0782   0E6D 00 00 00 00 
0782   0E71 00 00 00 00 
0782   0E75 00 00 00 00 
0782   0E79 00 00 00 00 
0782   0E7D 00 00 00 00 
0782   0E81 00 00 00 00 
0782   0E85 00 00 00 00 
0782   0E89 00 00 00 00 
0782   0E8D 00 00 00 00 
0782   0E91 00 00 00 00 
0782   0E95 00 00 00 00 
0782   0E99 00 00 00 00 
0782   0E9D 00 00 00 00 
0782   0EA1 00 00 00 00 
0782   0EA5 00 00 00 00 
0782   0EA9 00 00 00 00 
0782   0EAD 00 00 00 00 
0782   0EB1 00 00 00 00 
0782   0EB5 00 00 00 00 
0782   0EB9 00 00 00 00 
0782   0EBD 00 00 00 00 
0782   0EC1 00 00 00 00 
0782   0EC5 00 00 00 00 
0782   0EC9 00 00 00 00 
0782   0ECD 00 00 00 00 
0782   0ED1 00 00 00 00 
0782   0ED5 00 00 00 00 
0782   0ED9 00 00 00 00 
0782   0EDD 00 00 00 00 
0782   0EE1 00 00 00 00 
0782   0EE5 00 00 00 00 
0782   0EE9 00 00 00 00 
0782   0EED 00 00 00 00 
0782   0EF1 00 00 00 00 
0782   0EF5 00 00 00 00 
0782   0EF9 00 00 00 00 
0782   0EFD 00 00 00 00 
0782   0F01 00 00 00 00 
0782   0F05 00 00 00 00 
0782   0F09 00 00 00 00 
0782   0F0D 00 00 00 00 
0782   0F11 00 00 00 00 
0782   0F15 00 00 00 00 
0782   0F19 00 00 00 00 
0782   0F1D 00 00 00 00 
0782   0F21 00 00 00 00 
0782   0F25 00 00 00 00 
0782   0F29 00 00 00 00 
0782   0F2D 00 00 00 00 
0782   0F31 00 00 00 00 
0782   0F35 00 00 00 00 
0782   0F39 00 00 00 00 
0782   0F3D 00 00 00 00 
0782   0F41 00 00 00 00 
0782   0F45 00 00 00 00 
0782   0F49 00 00 00 00 
0782   0F4D 00 00 00 00 
0782   0F51 00 00 00 00 
0782   0F55 00 00 00 00 
0782   0F59 00 00 00 00 
0782   0F5D 00 00 00 00 
0782   0F61 00 00 00 00 
0782   0F65 00 00 00 00 
0782   0F69 00 00 00 00 
0782   0F6D 00 00 00 00 
0782   0F71 00 00 00 00 
0782   0F75 00 00 00 00 
0782   0F79 00 00 00 00 
0782   0F7D 00 00 00 00 
0782   0F81 00 00 00 00 
0782   0F85 00 00 00 00 
0782   0F89 00 00 00 00 
0782   0F8D 00 00 00 00 
0782   0F91 00 00 00 00 
0782   0F95 00 00 00 00 
0782   0F99 00 00 00 00 
0782   0F9D 00 00 00 00 
0782   0FA1 00 00 00 00 
0782   0FA5 00 00 00 00 
0782   0FA9 00 00 00 00 
0782   0FAD 00 00 00 00 
0782   0FB1 00 00 00 00 
0782   0FB5 00 00 00 00 
0782   0FB9 00 00 00 00 
0782   0FBD 00 00 00 00 
0782   0FC1 00 00 00 00 
0782   0FC5 00 00 00 00 
0782   0FC9 00 00 00 00 
0782   0FCD 00 00 00 00 
0782   0FD1 00 00 00 00 
0782   0FD5 00 00 00 00 
0782   0FD9 00 00 00 00 
0782   0FDD 00 00 00 00 
0782   0FE1 00 00 00 00 
0782   0FE5 00 00 00 00 
0782   0FE9 00 00 00 00 
0782   0FED 00 00 00 00 
0782   0FF1 00 00 00 00 
0782   0FF5 00 00 00 00 
0782   0FF9 00 00 00 00 
0782   0FFD 00 00 00 00 
0782   1001 00 00 00 00 
0782   1005 00 00 00 00 
0782   1009 00 00 00 00 
0782   100D 00 00 00 00 
0782   1011 00 00 00 00 
0782   1015 00 00 00 00 
0782   1019 00 00 00 00 
0782   101D 00 00 00 00 
0782   1021 00 00 00 00 
0782   1025 00 00 00 00 
0782   1029 00 00 00 00 
0782   102D 00 00 00 00 
0782   1031 00 00 00 00 
0782   1035 00 00 00 00 
0782   1039 00 00 00 00 
0782   103D 00 00 00 00 
0782   1041 00 00 00 00 
0782   1045 00 00 00 00 
0782   1049 00 00 00 00 
0782   104D 00 00 00 00 
0782   1051 00 00 00 00 
0782   1055 00 00 00 00 
0782   1059 00 00 00 00 
0782   105D 00 00 00 00 
0782   1061 00 00 00 00 
0782   1065 00 00 00 00 
0782   1069 00 00 00 00 
0782   106D 00 00 00 00 
0782   1071 00 00 00 00 
0782   1075 00 00 00 00 
0782   1079 00 00 00 00 
0782   107D 00 00 00 00 
0782   1081 00 00 00 00 
0782   1085 00 00 00 00 
0782   1089 00 00 00 00 
0782   108D 00 00 00 00 
0782   1091 00 00 00 00 
0782   1095 00 00 00 00 
0782   1099 00 00 00 00 
0782   109D 00 00 00 00 
0782   10A1 00 00 00 00 
0782   10A5 00 00 00 00 
0782   10A9 00 00 00 00 
0782   10AD 00 00 00 00 
0782   10B1 00 00 00 00 
0782   10B5 00 00 00 00 
0782   10B9 00 00 00 00 
0782   10BD 00 00 00 00 
0782   10C1 00 00 00 00 
0782   10C5 00 00 00 00 
0782   10C9 00 00 00 00 
0782   10CD 00 00 00 00 
0782   10D1 00 00 00 00 
0782   10D5 00 00 00 00 
0782   10D9 00 00 00 00 
0782   10DD 00 00 00 00 
0782   10E1 00 00 00 00 
0782   10E5 00 00 00 00 
0782   10E9 00 00 00 00 
0782   10ED 00 00 00 00 
0782   10F1 00 00 00 00 
0782   10F5 00 00 00 00 
0782   10F9 00 00 00 00 
0782   10FD 00 00 00 00 
0782   1101 00 00 00 00 
0782   1105 00 00 00 00 
0782   1109 00 00 00 00 
0782   110D 00 00 00 00 
0782   1111 00 00 00 00 
0782   1115 00 00 00 00 
0782   1119 00 00 00 00 
0782   111D 00 00 00 00 
0782   1121 00 00 00 00 
0782   1125 00 00 00 00 
0782   1129 00 00 00 00 
0782   112D 00 00 00 00 
0782   1131 00 00 00 00 
0782   1135 00 00 00 00 
0782   1139 00 00 00 00 
0782   113D 00 00 00 00 
0782   1141 00 00 00 00 
0782   1145 00 00 00 00 
0782   1149 00 00 00 00 
0782   114D 00 00 00 00 
0782   1151 00 00 00 00 
0782   1155 00 00 00 00 
0782   1159 00 00 00 00 
0782   115D 00 00 00 00 
0782   1161 00 00 00 00 
0782   1165 00 00 00 00 
0782   1169 00 00 00 00 
0782   116D 00 00 00 00 
0782   1171 00 00 00 00 
0782   1175 00 00 00 00 
0782   1179 00 00 00 00 
0782   117D 00 00 00 00 
0782   1181 00 00 00 00 
0782   1185 00 00 00 00 
0782   1189 00 00 00 00 
0782   118D 00 00 00 00 
0782   1191 00 00 00 00 
0782   1195 00 00 00 00 
0782   1199 00 00 00 00 
0782   119D 00 00 00 00 
0782   11A1 00 00 00 00 
0782   11A5 00 00 00 00 
0782   11A9 00 00 00 00 
0782   11AD 00 00 00 00 
0782   11B1 00 00 00 00 
0782   11B5 00 00 00 00 
0782   11B9 00 00 00 00 
0782   11BD 00 00 00 00 
0782   11C1 00 00 00 00 
0782   11C5 00 00 00 00 
0782   11C9 00 00 00 00 
0782   11CD 00 00 00 00 
0782   11D1 00 00 00 00 
0782   11D5 00 00 00 00 
0782   11D9 00 00 00 00 
0782   11DD 00 00 00 00 
0782   11E1 00 00 00 00 
0782   11E5 00 00 00 00 
0782   11E9 00 00 00 00 
0782   11ED 00 00 00 00 
0782   11F1 00 00 00 00 
0782   11F5 00 00 00 00 
0782   11F9 00 00 00 00 
0782   11FD 00 00 00 00 
0782   1201 00 00 00 00 
0782   1205 00 00 00 00 
0782   1209 00 00 00 00 
0782   120D 00 00 00 00 
0782   1211 00 00 00 00 
0782   1215 00 00 00 00 
0782   1219 00 00 00 00 
0782   121D 00 00 00 00 
0782   1221 00 00 00 00 
0782   1225 00 00 00 00 
0782   1229 00 00 00 00 
0782   122D 00 00 00 00 
0782   1231 00 00 00 00 
0782   1235 00 00 00 00 
0782   1239 00 00 00 00 
0782   123D 00 00 00 00 
0782   1241 00 00 00 00 
0782   1245 00 00 00 00 
0782   1249 00 00 00 00 
0782   124D 00 00 00 00 
0782   1251 00 00 00 00 
0782   1255 00 00 00 00 
0782   1259 00 00 00 00 
0782   125D 00 00 00 00 
0782   1261 00 00 00 00 
0782   1265 00 00 00 00 
0782   1269 00 00 00 00 
0782   126D 00 00 00 00 
0782   1271 00 00 00 00 
0782   1275 00 00 00 00 
0782   1279 00 00 00 00 
0782   127D 00 00 00 00 
0782   1281 00 00 00 00 
0782   1285 00 00 00 00 
0782   1289 00 00 00 00 
0782   128D 00 00 00 00 
0782   1291 00 00 00 00 
0782   1295 00 00 00 00 
0782   1299 00 00 00 00 
0782   129D 00 00 00 00 
0782   12A1 00 00 00 00 
0783   12A5 E1 08       current_gen: .dw current_gen_data
0784   12A7 00 00 00 00 next_gen_data: .fill 2500, 0
0784   12AB 00 00 00 00 
0784   12AF 00 00 00 00 
0784   12B3 00 00 00 00 
0784   12B7 00 00 00 00 
0784   12BB 00 00 00 00 
0784   12BF 00 00 00 00 
0784   12C3 00 00 00 00 
0784   12C7 00 00 00 00 
0784   12CB 00 00 00 00 
0784   12CF 00 00 00 00 
0784   12D3 00 00 00 00 
0784   12D7 00 00 00 00 
0784   12DB 00 00 00 00 
0784   12DF 00 00 00 00 
0784   12E3 00 00 00 00 
0784   12E7 00 00 00 00 
0784   12EB 00 00 00 00 
0784   12EF 00 00 00 00 
0784   12F3 00 00 00 00 
0784   12F7 00 00 00 00 
0784   12FB 00 00 00 00 
0784   12FF 00 00 00 00 
0784   1303 00 00 00 00 
0784   1307 00 00 00 00 
0784   130B 00 00 00 00 
0784   130F 00 00 00 00 
0784   1313 00 00 00 00 
0784   1317 00 00 00 00 
0784   131B 00 00 00 00 
0784   131F 00 00 00 00 
0784   1323 00 00 00 00 
0784   1327 00 00 00 00 
0784   132B 00 00 00 00 
0784   132F 00 00 00 00 
0784   1333 00 00 00 00 
0784   1337 00 00 00 00 
0784   133B 00 00 00 00 
0784   133F 00 00 00 00 
0784   1343 00 00 00 00 
0784   1347 00 00 00 00 
0784   134B 00 00 00 00 
0784   134F 00 00 00 00 
0784   1353 00 00 00 00 
0784   1357 00 00 00 00 
0784   135B 00 00 00 00 
0784   135F 00 00 00 00 
0784   1363 00 00 00 00 
0784   1367 00 00 00 00 
0784   136B 00 00 00 00 
0784   136F 00 00 00 00 
0784   1373 00 00 00 00 
0784   1377 00 00 00 00 
0784   137B 00 00 00 00 
0784   137F 00 00 00 00 
0784   1383 00 00 00 00 
0784   1387 00 00 00 00 
0784   138B 00 00 00 00 
0784   138F 00 00 00 00 
0784   1393 00 00 00 00 
0784   1397 00 00 00 00 
0784   139B 00 00 00 00 
0784   139F 00 00 00 00 
0784   13A3 00 00 00 00 
0784   13A7 00 00 00 00 
0784   13AB 00 00 00 00 
0784   13AF 00 00 00 00 
0784   13B3 00 00 00 00 
0784   13B7 00 00 00 00 
0784   13BB 00 00 00 00 
0784   13BF 00 00 00 00 
0784   13C3 00 00 00 00 
0784   13C7 00 00 00 00 
0784   13CB 00 00 00 00 
0784   13CF 00 00 00 00 
0784   13D3 00 00 00 00 
0784   13D7 00 00 00 00 
0784   13DB 00 00 00 00 
0784   13DF 00 00 00 00 
0784   13E3 00 00 00 00 
0784   13E7 00 00 00 00 
0784   13EB 00 00 00 00 
0784   13EF 00 00 00 00 
0784   13F3 00 00 00 00 
0784   13F7 00 00 00 00 
0784   13FB 00 00 00 00 
0784   13FF 00 00 00 00 
0784   1403 00 00 00 00 
0784   1407 00 00 00 00 
0784   140B 00 00 00 00 
0784   140F 00 00 00 00 
0784   1413 00 00 00 00 
0784   1417 00 00 00 00 
0784   141B 00 00 00 00 
0784   141F 00 00 00 00 
0784   1423 00 00 00 00 
0784   1427 00 00 00 00 
0784   142B 00 00 00 00 
0784   142F 00 00 00 00 
0784   1433 00 00 00 00 
0784   1437 00 00 00 00 
0784   143B 00 00 00 00 
0784   143F 00 00 00 00 
0784   1443 00 00 00 00 
0784   1447 00 00 00 00 
0784   144B 00 00 00 00 
0784   144F 00 00 00 00 
0784   1453 00 00 00 00 
0784   1457 00 00 00 00 
0784   145B 00 00 00 00 
0784   145F 00 00 00 00 
0784   1463 00 00 00 00 
0784   1467 00 00 00 00 
0784   146B 00 00 00 00 
0784   146F 00 00 00 00 
0784   1473 00 00 00 00 
0784   1477 00 00 00 00 
0784   147B 00 00 00 00 
0784   147F 00 00 00 00 
0784   1483 00 00 00 00 
0784   1487 00 00 00 00 
0784   148B 00 00 00 00 
0784   148F 00 00 00 00 
0784   1493 00 00 00 00 
0784   1497 00 00 00 00 
0784   149B 00 00 00 00 
0784   149F 00 00 00 00 
0784   14A3 00 00 00 00 
0784   14A7 00 00 00 00 
0784   14AB 00 00 00 00 
0784   14AF 00 00 00 00 
0784   14B3 00 00 00 00 
0784   14B7 00 00 00 00 
0784   14BB 00 00 00 00 
0784   14BF 00 00 00 00 
0784   14C3 00 00 00 00 
0784   14C7 00 00 00 00 
0784   14CB 00 00 00 00 
0784   14CF 00 00 00 00 
0784   14D3 00 00 00 00 
0784   14D7 00 00 00 00 
0784   14DB 00 00 00 00 
0784   14DF 00 00 00 00 
0784   14E3 00 00 00 00 
0784   14E7 00 00 00 00 
0784   14EB 00 00 00 00 
0784   14EF 00 00 00 00 
0784   14F3 00 00 00 00 
0784   14F7 00 00 00 00 
0784   14FB 00 00 00 00 
0784   14FF 00 00 00 00 
0784   1503 00 00 00 00 
0784   1507 00 00 00 00 
0784   150B 00 00 00 00 
0784   150F 00 00 00 00 
0784   1513 00 00 00 00 
0784   1517 00 00 00 00 
0784   151B 00 00 00 00 
0784   151F 00 00 00 00 
0784   1523 00 00 00 00 
0784   1527 00 00 00 00 
0784   152B 00 00 00 00 
0784   152F 00 00 00 00 
0784   1533 00 00 00 00 
0784   1537 00 00 00 00 
0784   153B 00 00 00 00 
0784   153F 00 00 00 00 
0784   1543 00 00 00 00 
0784   1547 00 00 00 00 
0784   154B 00 00 00 00 
0784   154F 00 00 00 00 
0784   1553 00 00 00 00 
0784   1557 00 00 00 00 
0784   155B 00 00 00 00 
0784   155F 00 00 00 00 
0784   1563 00 00 00 00 
0784   1567 00 00 00 00 
0784   156B 00 00 00 00 
0784   156F 00 00 00 00 
0784   1573 00 00 00 00 
0784   1577 00 00 00 00 
0784   157B 00 00 00 00 
0784   157F 00 00 00 00 
0784   1583 00 00 00 00 
0784   1587 00 00 00 00 
0784   158B 00 00 00 00 
0784   158F 00 00 00 00 
0784   1593 00 00 00 00 
0784   1597 00 00 00 00 
0784   159B 00 00 00 00 
0784   159F 00 00 00 00 
0784   15A3 00 00 00 00 
0784   15A7 00 00 00 00 
0784   15AB 00 00 00 00 
0784   15AF 00 00 00 00 
0784   15B3 00 00 00 00 
0784   15B7 00 00 00 00 
0784   15BB 00 00 00 00 
0784   15BF 00 00 00 00 
0784   15C3 00 00 00 00 
0784   15C7 00 00 00 00 
0784   15CB 00 00 00 00 
0784   15CF 00 00 00 00 
0784   15D3 00 00 00 00 
0784   15D7 00 00 00 00 
0784   15DB 00 00 00 00 
0784   15DF 00 00 00 00 
0784   15E3 00 00 00 00 
0784   15E7 00 00 00 00 
0784   15EB 00 00 00 00 
0784   15EF 00 00 00 00 
0784   15F3 00 00 00 00 
0784   15F7 00 00 00 00 
0784   15FB 00 00 00 00 
0784   15FF 00 00 00 00 
0784   1603 00 00 00 00 
0784   1607 00 00 00 00 
0784   160B 00 00 00 00 
0784   160F 00 00 00 00 
0784   1613 00 00 00 00 
0784   1617 00 00 00 00 
0784   161B 00 00 00 00 
0784   161F 00 00 00 00 
0784   1623 00 00 00 00 
0784   1627 00 00 00 00 
0784   162B 00 00 00 00 
0784   162F 00 00 00 00 
0784   1633 00 00 00 00 
0784   1637 00 00 00 00 
0784   163B 00 00 00 00 
0784   163F 00 00 00 00 
0784   1643 00 00 00 00 
0784   1647 00 00 00 00 
0784   164B 00 00 00 00 
0784   164F 00 00 00 00 
0784   1653 00 00 00 00 
0784   1657 00 00 00 00 
0784   165B 00 00 00 00 
0784   165F 00 00 00 00 
0784   1663 00 00 00 00 
0784   1667 00 00 00 00 
0784   166B 00 00 00 00 
0784   166F 00 00 00 00 
0784   1673 00 00 00 00 
0784   1677 00 00 00 00 
0784   167B 00 00 00 00 
0784   167F 00 00 00 00 
0784   1683 00 00 00 00 
0784   1687 00 00 00 00 
0784   168B 00 00 00 00 
0784   168F 00 00 00 00 
0784   1693 00 00 00 00 
0784   1697 00 00 00 00 
0784   169B 00 00 00 00 
0784   169F 00 00 00 00 
0784   16A3 00 00 00 00 
0784   16A7 00 00 00 00 
0784   16AB 00 00 00 00 
0784   16AF 00 00 00 00 
0784   16B3 00 00 00 00 
0784   16B7 00 00 00 00 
0784   16BB 00 00 00 00 
0784   16BF 00 00 00 00 
0784   16C3 00 00 00 00 
0784   16C7 00 00 00 00 
0784   16CB 00 00 00 00 
0784   16CF 00 00 00 00 
0784   16D3 00 00 00 00 
0784   16D7 00 00 00 00 
0784   16DB 00 00 00 00 
0784   16DF 00 00 00 00 
0784   16E3 00 00 00 00 
0784   16E7 00 00 00 00 
0784   16EB 00 00 00 00 
0784   16EF 00 00 00 00 
0784   16F3 00 00 00 00 
0784   16F7 00 00 00 00 
0784   16FB 00 00 00 00 
0784   16FF 00 00 00 00 
0784   1703 00 00 00 00 
0784   1707 00 00 00 00 
0784   170B 00 00 00 00 
0784   170F 00 00 00 00 
0784   1713 00 00 00 00 
0784   1717 00 00 00 00 
0784   171B 00 00 00 00 
0784   171F 00 00 00 00 
0784   1723 00 00 00 00 
0784   1727 00 00 00 00 
0784   172B 00 00 00 00 
0784   172F 00 00 00 00 
0784   1733 00 00 00 00 
0784   1737 00 00 00 00 
0784   173B 00 00 00 00 
0784   173F 00 00 00 00 
0784   1743 00 00 00 00 
0784   1747 00 00 00 00 
0784   174B 00 00 00 00 
0784   174F 00 00 00 00 
0784   1753 00 00 00 00 
0784   1757 00 00 00 00 
0784   175B 00 00 00 00 
0784   175F 00 00 00 00 
0784   1763 00 00 00 00 
0784   1767 00 00 00 00 
0784   176B 00 00 00 00 
0784   176F 00 00 00 00 
0784   1773 00 00 00 00 
0784   1777 00 00 00 00 
0784   177B 00 00 00 00 
0784   177F 00 00 00 00 
0784   1783 00 00 00 00 
0784   1787 00 00 00 00 
0784   178B 00 00 00 00 
0784   178F 00 00 00 00 
0784   1793 00 00 00 00 
0784   1797 00 00 00 00 
0784   179B 00 00 00 00 
0784   179F 00 00 00 00 
0784   17A3 00 00 00 00 
0784   17A7 00 00 00 00 
0784   17AB 00 00 00 00 
0784   17AF 00 00 00 00 
0784   17B3 00 00 00 00 
0784   17B7 00 00 00 00 
0784   17BB 00 00 00 00 
0784   17BF 00 00 00 00 
0784   17C3 00 00 00 00 
0784   17C7 00 00 00 00 
0784   17CB 00 00 00 00 
0784   17CF 00 00 00 00 
0784   17D3 00 00 00 00 
0784   17D7 00 00 00 00 
0784   17DB 00 00 00 00 
0784   17DF 00 00 00 00 
0784   17E3 00 00 00 00 
0784   17E7 00 00 00 00 
0784   17EB 00 00 00 00 
0784   17EF 00 00 00 00 
0784   17F3 00 00 00 00 
0784   17F7 00 00 00 00 
0784   17FB 00 00 00 00 
0784   17FF 00 00 00 00 
0784   1803 00 00 00 00 
0784   1807 00 00 00 00 
0784   180B 00 00 00 00 
0784   180F 00 00 00 00 
0784   1813 00 00 00 00 
0784   1817 00 00 00 00 
0784   181B 00 00 00 00 
0784   181F 00 00 00 00 
0784   1823 00 00 00 00 
0784   1827 00 00 00 00 
0784   182B 00 00 00 00 
0784   182F 00 00 00 00 
0784   1833 00 00 00 00 
0784   1837 00 00 00 00 
0784   183B 00 00 00 00 
0784   183F 00 00 00 00 
0784   1843 00 00 00 00 
0784   1847 00 00 00 00 
0784   184B 00 00 00 00 
0784   184F 00 00 00 00 
0784   1853 00 00 00 00 
0784   1857 00 00 00 00 
0784   185B 00 00 00 00 
0784   185F 00 00 00 00 
0784   1863 00 00 00 00 
0784   1867 00 00 00 00 
0784   186B 00 00 00 00 
0784   186F 00 00 00 00 
0784   1873 00 00 00 00 
0784   1877 00 00 00 00 
0784   187B 00 00 00 00 
0784   187F 00 00 00 00 
0784   1883 00 00 00 00 
0784   1887 00 00 00 00 
0784   188B 00 00 00 00 
0784   188F 00 00 00 00 
0784   1893 00 00 00 00 
0784   1897 00 00 00 00 
0784   189B 00 00 00 00 
0784   189F 00 00 00 00 
0784   18A3 00 00 00 00 
0784   18A7 00 00 00 00 
0784   18AB 00 00 00 00 
0784   18AF 00 00 00 00 
0784   18B3 00 00 00 00 
0784   18B7 00 00 00 00 
0784   18BB 00 00 00 00 
0784   18BF 00 00 00 00 
0784   18C3 00 00 00 00 
0784   18C7 00 00 00 00 
0784   18CB 00 00 00 00 
0784   18CF 00 00 00 00 
0784   18D3 00 00 00 00 
0784   18D7 00 00 00 00 
0784   18DB 00 00 00 00 
0784   18DF 00 00 00 00 
0784   18E3 00 00 00 00 
0784   18E7 00 00 00 00 
0784   18EB 00 00 00 00 
0784   18EF 00 00 00 00 
0784   18F3 00 00 00 00 
0784   18F7 00 00 00 00 
0784   18FB 00 00 00 00 
0784   18FF 00 00 00 00 
0784   1903 00 00 00 00 
0784   1907 00 00 00 00 
0784   190B 00 00 00 00 
0784   190F 00 00 00 00 
0784   1913 00 00 00 00 
0784   1917 00 00 00 00 
0784   191B 00 00 00 00 
0784   191F 00 00 00 00 
0784   1923 00 00 00 00 
0784   1927 00 00 00 00 
0784   192B 00 00 00 00 
0784   192F 00 00 00 00 
0784   1933 00 00 00 00 
0784   1937 00 00 00 00 
0784   193B 00 00 00 00 
0784   193F 00 00 00 00 
0784   1943 00 00 00 00 
0784   1947 00 00 00 00 
0784   194B 00 00 00 00 
0784   194F 00 00 00 00 
0784   1953 00 00 00 00 
0784   1957 00 00 00 00 
0784   195B 00 00 00 00 
0784   195F 00 00 00 00 
0784   1963 00 00 00 00 
0784   1967 00 00 00 00 
0784   196B 00 00 00 00 
0784   196F 00 00 00 00 
0784   1973 00 00 00 00 
0784   1977 00 00 00 00 
0784   197B 00 00 00 00 
0784   197F 00 00 00 00 
0784   1983 00 00 00 00 
0784   1987 00 00 00 00 
0784   198B 00 00 00 00 
0784   198F 00 00 00 00 
0784   1993 00 00 00 00 
0784   1997 00 00 00 00 
0784   199B 00 00 00 00 
0784   199F 00 00 00 00 
0784   19A3 00 00 00 00 
0784   19A7 00 00 00 00 
0784   19AB 00 00 00 00 
0784   19AF 00 00 00 00 
0784   19B3 00 00 00 00 
0784   19B7 00 00 00 00 
0784   19BB 00 00 00 00 
0784   19BF 00 00 00 00 
0784   19C3 00 00 00 00 
0784   19C7 00 00 00 00 
0784   19CB 00 00 00 00 
0784   19CF 00 00 00 00 
0784   19D3 00 00 00 00 
0784   19D7 00 00 00 00 
0784   19DB 00 00 00 00 
0784   19DF 00 00 00 00 
0784   19E3 00 00 00 00 
0784   19E7 00 00 00 00 
0784   19EB 00 00 00 00 
0784   19EF 00 00 00 00 
0784   19F3 00 00 00 00 
0784   19F7 00 00 00 00 
0784   19FB 00 00 00 00 
0784   19FF 00 00 00 00 
0784   1A03 00 00 00 00 
0784   1A07 00 00 00 00 
0784   1A0B 00 00 00 00 
0784   1A0F 00 00 00 00 
0784   1A13 00 00 00 00 
0784   1A17 00 00 00 00 
0784   1A1B 00 00 00 00 
0784   1A1F 00 00 00 00 
0784   1A23 00 00 00 00 
0784   1A27 00 00 00 00 
0784   1A2B 00 00 00 00 
0784   1A2F 00 00 00 00 
0784   1A33 00 00 00 00 
0784   1A37 00 00 00 00 
0784   1A3B 00 00 00 00 
0784   1A3F 00 00 00 00 
0784   1A43 00 00 00 00 
0784   1A47 00 00 00 00 
0784   1A4B 00 00 00 00 
0784   1A4F 00 00 00 00 
0784   1A53 00 00 00 00 
0784   1A57 00 00 00 00 
0784   1A5B 00 00 00 00 
0784   1A5F 00 00 00 00 
0784   1A63 00 00 00 00 
0784   1A67 00 00 00 00 
0784   1A6B 00 00 00 00 
0784   1A6F 00 00 00 00 
0784   1A73 00 00 00 00 
0784   1A77 00 00 00 00 
0784   1A7B 00 00 00 00 
0784   1A7F 00 00 00 00 
0784   1A83 00 00 00 00 
0784   1A87 00 00 00 00 
0784   1A8B 00 00 00 00 
0784   1A8F 00 00 00 00 
0784   1A93 00 00 00 00 
0784   1A97 00 00 00 00 
0784   1A9B 00 00 00 00 
0784   1A9F 00 00 00 00 
0784   1AA3 00 00 00 00 
0784   1AA7 00 00 00 00 
0784   1AAB 00 00 00 00 
0784   1AAF 00 00 00 00 
0784   1AB3 00 00 00 00 
0784   1AB7 00 00 00 00 
0784   1ABB 00 00 00 00 
0784   1ABF 00 00 00 00 
0784   1AC3 00 00 00 00 
0784   1AC7 00 00 00 00 
0784   1ACB 00 00 00 00 
0784   1ACF 00 00 00 00 
0784   1AD3 00 00 00 00 
0784   1AD7 00 00 00 00 
0784   1ADB 00 00 00 00 
0784   1ADF 00 00 00 00 
0784   1AE3 00 00 00 00 
0784   1AE7 00 00 00 00 
0784   1AEB 00 00 00 00 
0784   1AEF 00 00 00 00 
0784   1AF3 00 00 00 00 
0784   1AF7 00 00 00 00 
0784   1AFB 00 00 00 00 
0784   1AFF 00 00 00 00 
0784   1B03 00 00 00 00 
0784   1B07 00 00 00 00 
0784   1B0B 00 00 00 00 
0784   1B0F 00 00 00 00 
0784   1B13 00 00 00 00 
0784   1B17 00 00 00 00 
0784   1B1B 00 00 00 00 
0784   1B1F 00 00 00 00 
0784   1B23 00 00 00 00 
0784   1B27 00 00 00 00 
0784   1B2B 00 00 00 00 
0784   1B2F 00 00 00 00 
0784   1B33 00 00 00 00 
0784   1B37 00 00 00 00 
0784   1B3B 00 00 00 00 
0784   1B3F 00 00 00 00 
0784   1B43 00 00 00 00 
0784   1B47 00 00 00 00 
0784   1B4B 00 00 00 00 
0784   1B4F 00 00 00 00 
0784   1B53 00 00 00 00 
0784   1B57 00 00 00 00 
0784   1B5B 00 00 00 00 
0784   1B5F 00 00 00 00 
0784   1B63 00 00 00 00 
0784   1B67 00 00 00 00 
0784   1B6B 00 00 00 00 
0784   1B6F 00 00 00 00 
0784   1B73 00 00 00 00 
0784   1B77 00 00 00 00 
0784   1B7B 00 00 00 00 
0784   1B7F 00 00 00 00 
0784   1B83 00 00 00 00 
0784   1B87 00 00 00 00 
0784   1B8B 00 00 00 00 
0784   1B8F 00 00 00 00 
0784   1B93 00 00 00 00 
0784   1B97 00 00 00 00 
0784   1B9B 00 00 00 00 
0784   1B9F 00 00 00 00 
0784   1BA3 00 00 00 00 
0784   1BA7 00 00 00 00 
0784   1BAB 00 00 00 00 
0784   1BAF 00 00 00 00 
0784   1BB3 00 00 00 00 
0784   1BB7 00 00 00 00 
0784   1BBB 00 00 00 00 
0784   1BBF 00 00 00 00 
0784   1BC3 00 00 00 00 
0784   1BC7 00 00 00 00 
0784   1BCB 00 00 00 00 
0784   1BCF 00 00 00 00 
0784   1BD3 00 00 00 00 
0784   1BD7 00 00 00 00 
0784   1BDB 00 00 00 00 
0784   1BDF 00 00 00 00 
0784   1BE3 00 00 00 00 
0784   1BE7 00 00 00 00 
0784   1BEB 00 00 00 00 
0784   1BEF 00 00 00 00 
0784   1BF3 00 00 00 00 
0784   1BF7 00 00 00 00 
0784   1BFB 00 00 00 00 
0784   1BFF 00 00 00 00 
0784   1C03 00 00 00 00 
0784   1C07 00 00 00 00 
0784   1C0B 00 00 00 00 
0784   1C0F 00 00 00 00 
0784   1C13 00 00 00 00 
0784   1C17 00 00 00 00 
0784   1C1B 00 00 00 00 
0784   1C1F 00 00 00 00 
0784   1C23 00 00 00 00 
0784   1C27 00 00 00 00 
0784   1C2B 00 00 00 00 
0784   1C2F 00 00 00 00 
0784   1C33 00 00 00 00 
0784   1C37 00 00 00 00 
0784   1C3B 00 00 00 00 
0784   1C3F 00 00 00 00 
0784   1C43 00 00 00 00 
0784   1C47 00 00 00 00 
0784   1C4B 00 00 00 00 
0784   1C4F 00 00 00 00 
0784   1C53 00 00 00 00 
0784   1C57 00 00 00 00 
0784   1C5B 00 00 00 00 
0784   1C5F 00 00 00 00 
0784   1C63 00 00 00 00 
0784   1C67 00 00 00 00 
0785   1C6B A7 12       next_gen: .dw next_gen_data
0786   1C6D 1B 5B 32 4A _string_0: .db "\033[2J", 0
0786   1C71 00 
0787   1C72 23 00       _string_1: .db "#", 0
0788   1C74 2E 00       _string_2: .db ".", 0
0789   1C76 0A 00       _string_3: .db "\n", 0
0790   1C78             ; --- END DATA BLOCK
0791   1C78             
0792   1C78             ; --- BEGIN INCLUDE BLOCK
0793   1C78             .include "lib/stdio.asm"
0001+  1C78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1C78             ; stdio.s
0003+  1C78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1C78             .include "lib/string.asm"
0001++ 1C78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1C78             ; string.s
0003++ 1C78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1C78             
0005++ 1C78             
0006++ 1C78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1C78             ; strrev
0008++ 1C78             ; reverse a string
0009++ 1C78             ; D = string address
0010++ 1C78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1C78             ; 01234
0012++ 1C78             strrev:
0013++ 1C78 4B          	pusha
0014++ 1C79 07 BF 1C    	call strlen	; length in C
0015++ 1C7C 12          	mov a, c
0016++ 1C7D AF 01 00    	cmp a, 1
0017++ 1C80 D0 9A 1C    	jleu strrev_end	; check string length. string len must be > 1
0018++ 1C83 7D          	dec a
0019++ 1C84 FD 4E       	mov si, d	; beginning of string
0020++ 1C86 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1C88 59          	add d, a	; end of string
0022++ 1C89 12          	mov a, c
0023++ 1C8A FD 9B       	shr a		; divide by 2
0024++ 1C8C 39          	mov c, a	; C now counts the steps
0025++ 1C8D             strrev_L0:
0026++ 1C8D 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1C8E F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1C8F 3E          	mov [d], al	; store left char into right side
0029++ 1C90 1B          	mov al, bl
0030++ 1C91 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1C92 7E          	dec c
0032++ 1C93 7F          	dec d
0033++ 1C94 C2 00 00    	cmp c, 0
0034++ 1C97 C7 8D 1C    	jne strrev_L0
0035++ 1C9A             strrev_end:
0036++ 1C9A 4C          	popa
0037++ 1C9B 09          	ret
0038++ 1C9C             	
0039++ 1C9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1C9C             ; strchr
0041++ 1C9C             ; search string in D for char in AL
0042++ 1C9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1C9C             strchr:
0044++ 1C9C             strchr_L0:
0045++ 1C9C 32          	mov bl, [d]
0046++ 1C9D C1 00       	cmp bl, 0
0047++ 1C9F C6 AA 1C    	je strchr_end
0048++ 1CA2 BA          	cmp al, bl
0049++ 1CA3 C6 AA 1C    	je strchr_end
0050++ 1CA6 79          	inc d
0051++ 1CA7 0A 9C 1C    	jmp strchr_L0
0052++ 1CAA             strchr_end:
0053++ 1CAA 1B          	mov al, bl
0054++ 1CAB 09          	ret
0055++ 1CAC             
0056++ 1CAC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1CAC             ; strstr
0058++ 1CAC             ; find sub-string
0059++ 1CAC             ; str1 in SI
0060++ 1CAC             ; str2 in DI
0061++ 1CAC             ; SI points to end of source string
0062++ 1CAC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1CAC             strstr:
0064++ 1CAC DB          	push al
0065++ 1CAD DA          	push d
0066++ 1CAE E3          	push di
0067++ 1CAF             strstr_loop:
0068++ 1CAF F3          	cmpsb					; compare a byte of the strings
0069++ 1CB0 C7 BB 1C    	jne strstr_ret
0070++ 1CB3 FC 00 00    	lea d, [di + 0]
0071++ 1CB6 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1CB8 C7 AF 1C    	jne strstr_loop				; equal chars but not at end
0073++ 1CBB             strstr_ret:
0074++ 1CBB F0          	pop di
0075++ 1CBC E7          	pop d
0076++ 1CBD E8          	pop al
0077++ 1CBE 09          	ret
0078++ 1CBF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1CBF             ; length of null terminated string
0080++ 1CBF             ; result in C
0081++ 1CBF             ; pointer in D
0082++ 1CBF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1CBF             strlen:
0084++ 1CBF DA          	push d
0085++ 1CC0 38 00 00    	mov c, 0
0086++ 1CC3             strlen_L1:
0087++ 1CC3 BD 00       	cmp byte [d], 0
0088++ 1CC5 C6 CD 1C    	je strlen_ret
0089++ 1CC8 79          	inc d
0090++ 1CC9 78          	inc c
0091++ 1CCA 0A C3 1C    	jmp strlen_L1
0092++ 1CCD             strlen_ret:
0093++ 1CCD E7          	pop d
0094++ 1CCE 09          	ret
0095++ 1CCF             
0096++ 1CCF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1CCF             ; STRCMP
0098++ 1CCF             ; compare two strings
0099++ 1CCF             ; str1 in SI
0100++ 1CCF             ; str2 in DI
0101++ 1CCF             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1CCF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1CCF             strcmp:
0104++ 1CCF DB          	push al
0105++ 1CD0 DA          	push d
0106++ 1CD1 E3          	push di
0107++ 1CD2 E2          	push si
0108++ 1CD3             strcmp_loop:
0109++ 1CD3 F3          	cmpsb					; compare a byte of the strings
0110++ 1CD4 C7 DF 1C    	jne strcmp_ret
0111++ 1CD7 FB FF FF    	lea d, [si +- 1]
0112++ 1CDA BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1CDC C7 D3 1C    	jne strcmp_loop				; equal chars but not at end
0114++ 1CDF             strcmp_ret:
0115++ 1CDF EF          	pop si
0116++ 1CE0 F0          	pop di
0117++ 1CE1 E7          	pop d
0118++ 1CE2 E8          	pop al
0119++ 1CE3 09          	ret
0120++ 1CE4             
0121++ 1CE4             
0122++ 1CE4             ; STRCPY
0123++ 1CE4             ; copy null terminated string from SI to DI
0124++ 1CE4             ; source in SI
0125++ 1CE4             ; destination in DI
0126++ 1CE4             strcpy:
0127++ 1CE4 E2          	push si
0128++ 1CE5 E3          	push di
0129++ 1CE6 DB          	push al
0130++ 1CE7             strcpy_L1:
0131++ 1CE7 F6          	lodsb
0132++ 1CE8 F7          	stosb
0133++ 1CE9 B9 00       	cmp al, 0
0134++ 1CEB C7 E7 1C    	jne strcpy_L1
0135++ 1CEE             strcpy_end:
0136++ 1CEE E8          	pop al
0137++ 1CEF F0          	pop di
0138++ 1CF0 EF          	pop si
0139++ 1CF1 09          	ret
0140++ 1CF2             
0141++ 1CF2             ; STRCAT
0142++ 1CF2             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1CF2             ; source in SI
0144++ 1CF2             ; destination in DI
0145++ 1CF2             strcat:
0146++ 1CF2 E2          	push si
0147++ 1CF3 E3          	push di
0148++ 1CF4 D7          	push a
0149++ 1CF5 DA          	push d
0150++ 1CF6 50          	mov a, di
0151++ 1CF7 3C          	mov d, a
0152++ 1CF8             strcat_goto_end_L1:
0153++ 1CF8 BD 00       	cmp byte[d], 0
0154++ 1CFA C6 01 1D    	je strcat_start
0155++ 1CFD 79          	inc d
0156++ 1CFE 0A F8 1C    	jmp strcat_goto_end_L1
0157++ 1D01             strcat_start:
0158++ 1D01 FD 50       	mov di, d
0159++ 1D03             strcat_L1:
0160++ 1D03 F6          	lodsb
0161++ 1D04 F7          	stosb
0162++ 1D05 B9 00       	cmp al, 0
0163++ 1D07 C7 03 1D    	jne strcat_L1
0164++ 1D0A             strcat_end:
0165++ 1D0A E7          	pop d
0166++ 1D0B E4          	pop a
0167++ 1D0C F0          	pop di
0168++ 1D0D EF          	pop si
0169++ 1D0E 09          	ret
0005+  1D0F             
0006+  1D0F 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  1D13 34 35 36 37 
0006+  1D17 38 39 41 42 
0006+  1D1B 43 44 45 46 
0007+  1D1F             
0008+  1D1F 01 00       table_power:.dw 1
0009+  1D21 0A 00       			.dw 10
0010+  1D23 64 00       			.dw 100
0011+  1D25 E8 03       			.dw 1000
0012+  1D27 10 27       			.dw 10000
0013+  1D29             
0014+  1D29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  1D29             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  1D29             ; ASCII in BL
0017+  1D29             ; result in AL
0018+  1D29             ; ascii for F = 0100 0110
0019+  1D29             ; ascii for 9 = 0011 1001
0020+  1D29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  1D29             hex_ascii_encode:
0022+  1D29 1B          	mov al, bl
0023+  1D2A 93 40       	test al, $40				; test if letter or number
0024+  1D2C C7 32 1D    	jnz hex_letter
0025+  1D2F 87 0F       	and al, $0F				; get number
0026+  1D31 09          	ret
0027+  1D32             hex_letter:
0028+  1D32 87 0F       	and al, $0F				; get letter
0029+  1D34 6A 09       	add al, 9
0030+  1D36 09          	ret
0031+  1D37             
0032+  1D37             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  1D37             ; ATOI
0034+  1D37             ; 2 letter hex string in B
0035+  1D37             ; 8bit integer returned in AL
0036+  1D37             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  1D37             atoi:
0038+  1D37 D8          	push b
0039+  1D38 07 29 1D    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  1D3B 30          	mov bl, bh
0041+  1D3C DB          	push al					; save a
0042+  1D3D 07 29 1D    	call hex_ascii_encode
0043+  1D40 EA          	pop bl	
0044+  1D41 FD 9E 04    	shl al, 4
0045+  1D44 8C          	or al, bl
0046+  1D45 E5          	pop b
0047+  1D46 09          	ret	
0048+  1D47             
0049+  1D47             
0050+  1D47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1D47             ; printf
0052+  1D47             ; no need for explanations!
0053+  1D47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  1D47             printf:
0055+  1D47 09          	ret
0056+  1D48             
0057+  1D48             
0058+  1D48             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  1D48             ; scanf
0060+  1D48             ; no need for explanations!
0061+  1D48             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  1D48             scanf:
0063+  1D48 09          	ret
0064+  1D49             
0065+  1D49             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  1D49             ; ITOA
0067+  1D49             ; 8bit value in BL
0068+  1D49             ; 2 byte ASCII result in A
0069+  1D49             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  1D49             itoa:
0071+  1D49 DA          	push d
0072+  1D4A D8          	push b
0073+  1D4B A7 00       	mov bh, 0
0074+  1D4D FD A4 04    	shr bl, 4	
0075+  1D50 74          	mov d, b
0076+  1D51 1F 0F 1D    	mov al, [d + s_hex_digits]
0077+  1D54 23          	mov ah, al
0078+  1D55             	
0079+  1D55 E5          	pop b
0080+  1D56 D8          	push b
0081+  1D57 A7 00       	mov bh, 0
0082+  1D59 FD 87 0F    	and bl, $0F
0083+  1D5C 74          	mov d, b
0084+  1D5D 1F 0F 1D    	mov al, [d + s_hex_digits]
0085+  1D60 E5          	pop b
0086+  1D61 E7          	pop d
0087+  1D62 09          	ret
0088+  1D63             
0089+  1D63             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  1D63             ; HEX STRING TO BINARY
0091+  1D63             ; di = destination address
0092+  1D63             ; si = source
0093+  1D63             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  1D63             hex_to_int:
0095+  1D63             hex_to_int_L1:
0096+  1D63 F6          	lodsb					; load from [SI] to AL
0097+  1D64 B9 00       	cmp al, 0				; check if ASCII 0
0098+  1D66 C6 73 1D    	jz hex_to_int_ret
0099+  1D69 36          	mov bh, al
0100+  1D6A F6          	lodsb
0101+  1D6B 2F          	mov bl, al
0102+  1D6C 07 37 1D    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  1D6F F7          	stosb					; store AL to [DI]
0104+  1D70 0A 63 1D    	jmp hex_to_int_L1
0105+  1D73             hex_to_int_ret:
0106+  1D73 09          	ret		
0107+  1D74             
0108+  1D74             
0109+  1D74             
0110+  1D74             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  1D74             ; GETCHAR
0112+  1D74             ; char in ah
0113+  1D74             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  1D74             getchar:
0115+  1D74 DB          	push al
0116+  1D75             getchar_retry:
0117+  1D75 FD 0C       	sti
0118+  1D77 19 01       	mov al, 1
0119+  1D79 05 03       	syscall sys_io			; receive in AH
0120+  1D7B B9 00       	cmp al, 0			; check if any char was receive
0121+  1D7D C6 75 1D    	je getchar_retry
0122+  1D80 E8          	pop al
0123+  1D81 09          	ret
0124+  1D82             
0125+  1D82             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  1D82             ; PUTCHAR
0127+  1D82             ; char in ah
0128+  1D82             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  1D82             putchar:
0130+  1D82 D7          	push a
0131+  1D83 19 00       	mov al, 0
0132+  1D85 05 03       	syscall sys_io			; char in AH
0133+  1D87 E4          	pop a
0134+  1D88 09          	ret
0135+  1D89             
0136+  1D89             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  1D89             ;; INPUT A STRING
0138+  1D89             ;; terminates with null
0139+  1D89             ;; pointer in D
0140+  1D89             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  1D89             gets:
0142+  1D89 D7          	push a
0143+  1D8A DA          	push d
0144+  1D8B             gets_loop:
0145+  1D8B FD 0C       	sti
0146+  1D8D 19 01       	mov al, 1
0147+  1D8F 05 03       	syscall sys_io			; receive in AH
0148+  1D91 B9 00       	cmp al, 0				; check error code (AL)
0149+  1D93 C6 8B 1D    	je gets_loop			; if no char received, retry
0150+  1D96             
0151+  1D96 76 1B       	cmp ah, 27
0152+  1D98 C6 B9 1D    	je gets_telnet_escape
0153+  1D9B 76 0A       	cmp ah, $0A				; LF
0154+  1D9D C6 12 1E    	je gets_end
0155+  1DA0 76 0D       	cmp ah, $0D				; CR
0156+  1DA2 C6 12 1E    	je gets_end
0157+  1DA5 76 5C       	cmp ah, $5C				; '\\'
0158+  1DA7 C6 E9 1D    	je gets_escape
0159+  1DAA             	
0160+  1DAA 76 08       	cmp ah, $08			; check for backspace
0161+  1DAC C6 B5 1D    	je gets_backspace
0162+  1DAF             
0163+  1DAF 1A          	mov al, ah
0164+  1DB0 3E          	mov [d], al
0165+  1DB1 79          	inc d
0166+  1DB2 0A 8B 1D    	jmp gets_loop
0167+  1DB5             gets_backspace:
0168+  1DB5 7F          	dec d
0169+  1DB6 0A 8B 1D    	jmp gets_loop
0170+  1DB9             gets_telnet_escape:
0171+  1DB9 FD 0C       	sti
0172+  1DBB 19 01       	mov al, 1
0173+  1DBD 05 03       	syscall sys_io				; receive in AH without echo
0174+  1DBF B9 00       	cmp al, 0					; check error code (AL)
0175+  1DC1 C6 B9 1D    	je gets_telnet_escape		; if no char received, retry
0176+  1DC4 76 5B       	cmp ah, '['
0177+  1DC6 C7 8B 1D    	jne gets_loop
0178+  1DC9             gets_telnet_escape_phase2:
0179+  1DC9 FD 0C       	sti
0180+  1DCB 19 01       	mov al, 1
0181+  1DCD 05 03       	syscall sys_io					; receive in AH without echo
0182+  1DCF B9 00       	cmp al, 0						; check error code (AL)
0183+  1DD1 C6 C9 1D    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  1DD4 76 44       	cmp ah, 'D'
0185+  1DD6 C6 E1 1D    	je gets_left_arrow
0186+  1DD9 76 43       	cmp ah, 'C'
0187+  1DDB C6 E5 1D    	je gets_right_arrow
0188+  1DDE 0A 8B 1D    	jmp gets_loop
0189+  1DE1             gets_left_arrow:
0190+  1DE1 7F          	dec d
0191+  1DE2 0A 8B 1D    	jmp gets_loop
0192+  1DE5             gets_right_arrow:
0193+  1DE5 79          	inc d
0194+  1DE6 0A 8B 1D    	jmp gets_loop
0195+  1DE9             gets_escape:
0196+  1DE9 FD 0C       	sti
0197+  1DEB 19 01       	mov al, 1
0198+  1DED 05 03       	syscall sys_io			; receive in AH
0199+  1DEF B9 00       	cmp al, 0				; check error code (AL)
0200+  1DF1 C6 E9 1D    	je gets_escape			; if no char received, retry
0201+  1DF4 76 6E       	cmp ah, 'n'
0202+  1DF6 C6 04 1E    	je gets_LF
0203+  1DF9 76 72       	cmp ah, 'r'
0204+  1DFB C6 0B 1E    	je gets_CR
0205+  1DFE 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  1DFF 3E          	mov [d], al
0207+  1E00 79          	inc d
0208+  1E01 0A 8B 1D    	jmp gets_loop
0209+  1E04             gets_LF:
0210+  1E04 19 0A       	mov al, $0A
0211+  1E06 3E          	mov [d], al
0212+  1E07 79          	inc d
0213+  1E08 0A 8B 1D    	jmp gets_loop
0214+  1E0B             gets_CR:
0215+  1E0B 19 0D       	mov al, $0D
0216+  1E0D 3E          	mov [d], al
0217+  1E0E 79          	inc d
0218+  1E0F 0A 8B 1D    	jmp gets_loop
0219+  1E12             gets_end:
0220+  1E12 19 00       	mov al, 0
0221+  1E14 3E          	mov [d], al				; terminate string
0222+  1E15 E7          	pop d
0223+  1E16 E4          	pop a
0224+  1E17 09          	ret
0225+  1E18             
0226+  1E18             
0227+  1E18             
0228+  1E18             
0229+  1E18             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  1E18             ;; INPUT TEXT
0231+  1E18             ;; terminated with CTRL+D
0232+  1E18             ;; pointer in D
0233+  1E18             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  1E18             gettxt:
0235+  1E18 D7          	push a
0236+  1E19 DA          	push d
0237+  1E1A             gettxt_loop:
0238+  1E1A 19 01       	mov al, 1
0239+  1E1C 05 03       	syscall sys_io			; receive in AH
0240+  1E1E B9 00       	cmp al, 0				; check error code (AL)
0241+  1E20 C6 1A 1E    	je gettxt_loop		; if no char received, retry
0242+  1E23 76 04       	cmp ah, 4			; EOT
0243+  1E25 C6 63 1E    	je gettxt_end
0244+  1E28 76 08       	cmp ah, $08			; check for backspace
0245+  1E2A C6 5F 1E    	je gettxt_backspace
0246+  1E2D 76 5C       	cmp ah, $5C				; '\\'
0247+  1E2F C6 38 1E    	je gettxt_escape
0248+  1E32 1A          	mov al, ah
0249+  1E33 3E          	mov [d], al
0250+  1E34 79          	inc d
0251+  1E35 0A 1A 1E    	jmp gettxt_loop
0252+  1E38             gettxt_escape:
0253+  1E38 19 01       	mov al, 1
0254+  1E3A 05 03       	syscall sys_io			; receive in AH
0255+  1E3C B9 00       	cmp al, 0				; check error code (AL)
0256+  1E3E C6 38 1E    	je gettxt_escape		; if no char received, retry
0257+  1E41 76 6E       	cmp ah, 'n'
0258+  1E43 C6 51 1E    	je gettxt_LF
0259+  1E46 76 72       	cmp ah, 'r'
0260+  1E48 C6 58 1E    	je gettxt_CR
0261+  1E4B 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  1E4C 3E          	mov [d], al
0263+  1E4D 79          	inc d
0264+  1E4E 0A 1A 1E    	jmp gettxt_loop
0265+  1E51             gettxt_LF:
0266+  1E51 19 0A       	mov al, $0A
0267+  1E53 3E          	mov [d], al
0268+  1E54 79          	inc d
0269+  1E55 0A 1A 1E    	jmp gettxt_loop
0270+  1E58             gettxt_CR:
0271+  1E58 19 0D       	mov al, $0D
0272+  1E5A 3E          	mov [d], al
0273+  1E5B 79          	inc d
0274+  1E5C 0A 1A 1E    	jmp gettxt_loop
0275+  1E5F             gettxt_backspace:
0276+  1E5F 7F          	dec d
0277+  1E60 0A 1A 1E    	jmp gettxt_loop
0278+  1E63             gettxt_end:
0279+  1E63 19 00       	mov al, 0
0280+  1E65 3E          	mov [d], al				; terminate string
0281+  1E66 E7          	pop d
0282+  1E67 E4          	pop a
0283+  1E68 09          	ret
0284+  1E69             
0285+  1E69             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  1E69             ; PRINT NEW LINE
0287+  1E69             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  1E69             printnl:
0289+  1E69 D7          	push a
0290+  1E6A 10 00 0A    	mov a, $0A00
0291+  1E6D 05 03       	syscall sys_io
0292+  1E6F 10 00 0D    	mov a, $0D00
0293+  1E72 05 03       	syscall sys_io
0294+  1E74 E4          	pop a
0295+  1E75 09          	ret
0296+  1E76             
0297+  1E76             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  1E76             ; strtoint
0299+  1E76             ; 4 digit hex string number in d
0300+  1E76             ; integer returned in A
0301+  1E76             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  1E76             strtointx:
0303+  1E76 D8          	push b
0304+  1E77 32          	mov bl, [d]
0305+  1E78 37          	mov bh, bl
0306+  1E79 33 01 00    	mov bl, [d + 1]
0307+  1E7C 07 37 1D    	call atoi				; convert to int in AL
0308+  1E7F 23          	mov ah, al				; move to AH
0309+  1E80 33 02 00    	mov bl, [d + 2]
0310+  1E83 37          	mov bh, bl
0311+  1E84 33 03 00    	mov bl, [d + 3]
0312+  1E87 07 37 1D    	call atoi				; convert to int in AL
0313+  1E8A E5          	pop b
0314+  1E8B 09          	ret
0315+  1E8C             
0316+  1E8C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  1E8C             ; strtoint
0318+  1E8C             ; 5 digit base10 string number in d
0319+  1E8C             ; integer returned in A
0320+  1E8C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  1E8C             strtoint:
0322+  1E8C E2          	push si
0323+  1E8D D8          	push b
0324+  1E8E D9          	push c
0325+  1E8F DA          	push d
0326+  1E90 07 BF 1C    	call strlen			; get string length in C
0327+  1E93 7E          	dec c
0328+  1E94 FD 4E       	mov si, d
0329+  1E96 12          	mov a, c
0330+  1E97 FD 99       	shl a
0331+  1E99 3B 1F 1D    	mov d, table_power
0332+  1E9C 59          	add d, a
0333+  1E9D 38 00 00    	mov c, 0
0334+  1EA0             strtoint_L0:
0335+  1EA0 F6          	lodsb			; load ASCII to al
0336+  1EA1 B9 00       	cmp al, 0
0337+  1EA3 C6 B6 1E    	je strtoint_end
0338+  1EA6 6F 30       	sub al, $30		; make into integer
0339+  1EA8 22 00       	mov ah, 0
0340+  1EAA 2A          	mov b, [d]
0341+  1EAB AC          	mul a, b			; result in B since it fits in 16bits
0342+  1EAC 11          	mov a, b
0343+  1EAD 28          	mov b, c
0344+  1EAE 54          	add a, b
0345+  1EAF 39          	mov c, a
0346+  1EB0 63 02 00    	sub d, 2
0347+  1EB3 0A A0 1E    	jmp strtoint_L0
0348+  1EB6             strtoint_end:
0349+  1EB6 12          	mov a, c
0350+  1EB7 E7          	pop d
0351+  1EB8 E6          	pop c
0352+  1EB9 E5          	pop b
0353+  1EBA EF          	pop si
0354+  1EBB 09          	ret
0355+  1EBC             
0356+  1EBC             
0357+  1EBC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  1EBC             ; PRINT NULL TERMINATED STRING
0359+  1EBC             ; pointer in D
0360+  1EBC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  1EBC             puts:
0362+  1EBC D7          	push a
0363+  1EBD DA          	push d
0364+  1EBE             puts_L1:
0365+  1EBE 1E          	mov al, [d]
0366+  1EBF B9 00       	cmp al, 0
0367+  1EC1 C6 CD 1E    	jz puts_END
0368+  1EC4 23          	mov ah, al
0369+  1EC5 19 00       	mov al, 0
0370+  1EC7 05 03       	syscall sys_io
0371+  1EC9 79          	inc d
0372+  1ECA 0A BE 1E    	jmp puts_L1
0373+  1ECD             puts_END:
0374+  1ECD E7          	pop d
0375+  1ECE E4          	pop a
0376+  1ECF 09          	ret
0377+  1ED0             
0378+  1ED0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  1ED0             ; PRINT N SIZE STRING
0380+  1ED0             ; pointer in D
0381+  1ED0             ; size in C
0382+  1ED0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  1ED0             putsn:
0384+  1ED0 DB          	push al
0385+  1ED1 DA          	push d
0386+  1ED2 D9          	push c
0387+  1ED3             putsn_L0:
0388+  1ED3 1E          	mov al, [d]
0389+  1ED4 23          	mov ah, al
0390+  1ED5 19 00       	mov al, 0
0391+  1ED7 05 03       	syscall sys_io
0392+  1ED9 79          	inc d
0393+  1EDA 7E          	dec c	
0394+  1EDB C2 00 00    	cmp c, 0
0395+  1EDE C7 D3 1E    	jne putsn_L0
0396+  1EE1             putsn_end:
0397+  1EE1 E6          	pop c
0398+  1EE2 E7          	pop d
0399+  1EE3 E8          	pop al
0400+  1EE4 09          	ret
0401+  1EE5             
0402+  1EE5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  1EE5             ; print 16bit decimal number
0404+  1EE5             ; input number in A
0405+  1EE5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  1EE5             print_u16d:
0407+  1EE5 D7          	push a
0408+  1EE6 D8          	push b
0409+  1EE7 26 10 27    	mov b, 10000
0410+  1EEA AE          	div a, b			; get 10000 coeff.
0411+  1EEB 07 11 1F    	call print_number
0412+  1EEE 11          	mov a, b
0413+  1EEF 26 E8 03    	mov b, 1000
0414+  1EF2 AE          	div a, b			; get 10000 coeff.
0415+  1EF3 07 11 1F    	call print_number
0416+  1EF6 11          	mov a, b
0417+  1EF7 26 64 00    	mov b, 100
0418+  1EFA AE          	div a, b
0419+  1EFB 07 11 1F    	call print_number
0420+  1EFE 11          	mov a, b
0421+  1EFF 26 0A 00    	mov b, 10
0422+  1F02 AE          	div a, b
0423+  1F03 07 11 1F    	call print_number
0424+  1F06 11          	mov a, b
0425+  1F07 6A 30       	add al, $30
0426+  1F09 23          	mov ah, al
0427+  1F0A 19 00       	mov al, 0
0428+  1F0C 05 03       	syscall sys_io	; print coeff
0429+  1F0E E5          	pop b
0430+  1F0F E4          	pop a
0431+  1F10 09          	ret
0432+  1F11             
0433+  1F11             
0434+  1F11             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  1F11             ; if A == 0, print space
0436+  1F11             ; else print A
0437+  1F11             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  1F11             print_number:
0439+  1F11 6A 30       	add al, $30
0440+  1F13 23          	mov ah, al
0441+  1F14 07 82 1D    	call putchar
0442+  1F17 09          	ret
0443+  1F18             
0444+  1F18             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  1F18             ; PRINT 16BIT HEX INTEGER
0446+  1F18             ; integer value in reg B
0447+  1F18             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  1F18             print_u16x:
0449+  1F18 D7          	push a
0450+  1F19 D8          	push b
0451+  1F1A DD          	push bl
0452+  1F1B 30          	mov bl, bh
0453+  1F1C 07 49 1D    	call itoa				; convert bh to char in A
0454+  1F1F 2F          	mov bl, al				; save al
0455+  1F20 19 00       	mov al, 0
0456+  1F22 05 03       	syscall sys_io				; display AH
0457+  1F24 24          	mov ah, bl				; retrieve al
0458+  1F25 19 00       	mov al, 0
0459+  1F27 05 03       	syscall sys_io				; display AL
0460+  1F29             
0461+  1F29 EA          	pop bl
0462+  1F2A 07 49 1D    	call itoa				; convert bh to char in A
0463+  1F2D 2F          	mov bl, al				; save al
0464+  1F2E 19 00       	mov al, 0
0465+  1F30 05 03       	syscall sys_io				; display AH
0466+  1F32 24          	mov ah, bl				; retrieve al
0467+  1F33 19 00       	mov al, 0
0468+  1F35 05 03       	syscall sys_io				; display AL
0469+  1F37             
0470+  1F37 E5          	pop b
0471+  1F38 E4          	pop a
0472+  1F39 09          	ret
0473+  1F3A             
0474+  1F3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  1F3A             ; INPUT 16BIT HEX INTEGER
0476+  1F3A             ; read 16bit integer into A
0477+  1F3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  1F3A             scan_u16x:
0479+  1F3A F8 10 00    	enter 16
0480+  1F3D D8          	push b
0481+  1F3E DA          	push d
0482+  1F3F             
0483+  1F3F FA F1 FF    	lea d, [bp + -15]
0484+  1F42 07 89 1D    	call gets				; get number
0485+  1F45             
0486+  1F45 32          	mov bl, [d]
0487+  1F46 37          	mov bh, bl
0488+  1F47 33 01 00    	mov bl, [d + 1]
0489+  1F4A 07 37 1D    	call atoi				; convert to int in AL
0490+  1F4D 23          	mov ah, al				; move to AH
0491+  1F4E             
0492+  1F4E 33 02 00    	mov bl, [d + 2]
0493+  1F51 37          	mov bh, bl
0494+  1F52 33 03 00    	mov bl, [d + 3]
0495+  1F55 07 37 1D    	call atoi				; convert to int in AL
0496+  1F58             
0497+  1F58 E7          	pop d
0498+  1F59 E5          	pop b
0499+  1F5A F9          	leave
0500+  1F5B 09          	ret
0501+  1F5C             
0502+  1F5C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  1F5C             ; PRINT 8bit HEX INTEGER
0504+  1F5C             ; integer value in reg bl
0505+  1F5C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  1F5C             print_u8x:
0507+  1F5C D7          	push a
0508+  1F5D DD          	push bl
0509+  1F5E             
0510+  1F5E 07 49 1D    	call itoa				; convert bl to char in A
0511+  1F61 2F          	mov bl, al				; save al
0512+  1F62 19 00       	mov al, 0
0513+  1F64 05 03       	syscall sys_io				; display AH
0514+  1F66 24          	mov ah, bl				; retrieve al
0515+  1F67 19 00       	mov al, 0
0516+  1F69 05 03       	syscall sys_io				; display AL
0517+  1F6B             
0518+  1F6B EA          	pop bl
0519+  1F6C E4          	pop a
0520+  1F6D 09          	ret
0521+  1F6E             
0522+  1F6E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  1F6E             ; print 8bit decimal unsigned number
0524+  1F6E             ; input number in AL
0525+  1F6E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  1F6E             print_u8d:
0527+  1F6E D7          	push a
0528+  1F6F D8          	push b
0529+  1F70             
0530+  1F70 22 00       	mov ah, 0
0531+  1F72 26 64 00    	mov b, 100
0532+  1F75 AE          	div a, b
0533+  1F76 D8          	push b			; save remainder
0534+  1F77 B9 00       	cmp al, 0
0535+  1F79 C6 83 1F    	je skip100
0536+  1F7C 6A 30       	add al, $30
0537+  1F7E 23          	mov ah, al
0538+  1F7F 19 00       	mov al, 0
0539+  1F81 05 03       	syscall sys_io	; print coeff
0540+  1F83             skip100:
0541+  1F83 E4          	pop a
0542+  1F84 22 00       	mov ah, 0
0543+  1F86 26 0A 00    	mov b, 10
0544+  1F89 AE          	div a, b
0545+  1F8A D8          	push b			; save remainder
0546+  1F8B B9 00       	cmp al, 0
0547+  1F8D C6 97 1F    	je skip10
0548+  1F90 6A 30       	add al, $30
0549+  1F92 23          	mov ah, al
0550+  1F93 19 00       	mov al, 0
0551+  1F95 05 03       	syscall sys_io	; print coeff
0552+  1F97             skip10:
0553+  1F97 E4          	pop a
0554+  1F98 1B          	mov al, bl
0555+  1F99 6A 30       	add al, $30
0556+  1F9B 23          	mov ah, al
0557+  1F9C 19 00       	mov al, 0
0558+  1F9E 05 03       	syscall sys_io	; print coeff
0559+  1FA0 E5          	pop b
0560+  1FA1 E4          	pop a
0561+  1FA2 09          	ret
0562+  1FA3             
0563+  1FA3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  1FA3             ; INPUT 8BIT HEX INTEGER
0565+  1FA3             ; read 8bit integer into AL
0566+  1FA3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  1FA3             scan_u8x:
0568+  1FA3 F8 04 00    	enter 4
0569+  1FA6 D8          	push b
0570+  1FA7 DA          	push d
0571+  1FA8             
0572+  1FA8 FA FD FF    	lea d, [bp + -3]
0573+  1FAB 07 89 1D    	call gets				; get number
0574+  1FAE             
0575+  1FAE 32          	mov bl, [d]
0576+  1FAF 37          	mov bh, bl
0577+  1FB0 33 01 00    	mov bl, [d + 1]
0578+  1FB3 07 37 1D    	call atoi				; convert to int in AL
0579+  1FB6             
0580+  1FB6 E7          	pop d
0581+  1FB7 E5          	pop b
0582+  1FB8 F9          	leave
0583+  1FB9 09          	ret
0584+  1FBA             
0585+  1FBA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  1FBA             ; input decimal number
0587+  1FBA             ; result in A
0588+  1FBA             ; 655'\0'
0589+  1FBA             ; low--------high
0590+  1FBA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  1FBA             scan_u16d:
0592+  1FBA F8 08 00    	enter 8
0593+  1FBD E2          	push si
0594+  1FBE D8          	push b
0595+  1FBF D9          	push c
0596+  1FC0 DA          	push d
0597+  1FC1 FA F9 FF    	lea d, [bp +- 7]
0598+  1FC4 07 89 1D    	call gets
0599+  1FC7 07 BF 1C    	call strlen			; get string length in C
0600+  1FCA 7E          	dec c
0601+  1FCB FD 4E       	mov si, d
0602+  1FCD 12          	mov a, c
0603+  1FCE FD 99       	shl a
0604+  1FD0 3B 1F 1D    	mov d, table_power
0605+  1FD3 59          	add d, a
0606+  1FD4 38 00 00    	mov c, 0
0607+  1FD7             mul_loop:
0608+  1FD7 F6          	lodsb			; load ASCII to al
0609+  1FD8 B9 00       	cmp al, 0
0610+  1FDA C6 ED 1F    	je mul_exit
0611+  1FDD 6F 30       	sub al, $30		; make into integer
0612+  1FDF 22 00       	mov ah, 0
0613+  1FE1 2A          	mov b, [d]
0614+  1FE2 AC          	mul a, b			; result in B since it fits in 16bits
0615+  1FE3 11          	mov a, b
0616+  1FE4 28          	mov b, c
0617+  1FE5 54          	add a, b
0618+  1FE6 39          	mov c, a
0619+  1FE7 63 02 00    	sub d, 2
0620+  1FEA 0A D7 1F    	jmp mul_loop
0621+  1FED             mul_exit:
0622+  1FED 12          	mov a, c
0623+  1FEE E7          	pop d
0624+  1FEF E6          	pop c
0625+  1FF0 E5          	pop b
0626+  1FF1 EF          	pop si
0627+  1FF2 F9          	leave
0628+  1FF3 09          	ret
0794   1FF4             ; --- END INCLUDE BLOCK
0795   1FF4             
0796   1FF4             
0797   1FF4             .end
tasm: Number of errors = 0
