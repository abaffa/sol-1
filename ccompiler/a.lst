0001   0000             ; --- FILENAME: wireworld.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 29 B7 11      mov b, [__grid] ; grid
0011   0405 D7            push a
0012   0406 74            mov d, b
0013   0407 DA            push d
0014   0408 26 05 00      mov b, 5
0015   040B E7            pop d
0016   040C 10 50 00      mov a, 80
0017   040F AC            mul a, b
0018   0410 5A            add d, b
0019   0411 DA            push d
0020   0412 26 05 00      mov b, 5
0021   0415 E7            pop d
0022   0416 10 02 00      mov a, 2
0023   0419 AC            mul a, b
0024   041A 5A            add d, b
0025   041B E4            pop a
0026   041C DA            push d
0027   041D 26 01 00      mov b, 1; CONDUCTOR
0028   0420 E7            pop d
0029   0421 FD 43         mov [d], b
0030   0423 29 B7 11      mov b, [__grid] ; grid
0031   0426 D7            push a
0032   0427 74            mov d, b
0033   0428 DA            push d
0034   0429 26 06 00      mov b, 6
0035   042C E7            pop d
0036   042D 10 50 00      mov a, 80
0037   0430 AC            mul a, b
0038   0431 5A            add d, b
0039   0432 DA            push d
0040   0433 26 05 00      mov b, 5
0041   0436 E7            pop d
0042   0437 10 02 00      mov a, 2
0043   043A AC            mul a, b
0044   043B 5A            add d, b
0045   043C E4            pop a
0046   043D DA            push d
0047   043E 26 02 00      mov b, 2; ELECTRON_HEAD
0048   0441 E7            pop d
0049   0442 FD 43         mov [d], b
0050   0444 29 B7 11      mov b, [__grid] ; grid
0051   0447 D7            push a
0052   0448 74            mov d, b
0053   0449 DA            push d
0054   044A 26 07 00      mov b, 7
0055   044D E7            pop d
0056   044E 10 50 00      mov a, 80
0057   0451 AC            mul a, b
0058   0452 5A            add d, b
0059   0453 DA            push d
0060   0454 26 05 00      mov b, 5
0061   0457 E7            pop d
0062   0458 10 02 00      mov a, 2
0063   045B AC            mul a, b
0064   045C 5A            add d, b
0065   045D E4            pop a
0066   045E DA            push d
0067   045F 26 01 00      mov b, 1; CONDUCTOR
0068   0462 E7            pop d
0069   0463 FD 43         mov [d], b
0070   0465 29 B7 11      mov b, [__grid] ; grid
0071   0468 D7            push a
0072   0469 74            mov d, b
0073   046A DA            push d
0074   046B 26 06 00      mov b, 6
0075   046E E7            pop d
0076   046F 10 50 00      mov a, 80
0077   0472 AC            mul a, b
0078   0473 5A            add d, b
0079   0474 DA            push d
0080   0475 26 06 00      mov b, 6
0081   0478 E7            pop d
0082   0479 10 02 00      mov a, 2
0083   047C AC            mul a, b
0084   047D 5A            add d, b
0085   047E E4            pop a
0086   047F DA            push d
0087   0480 26 03 00      mov b, 3; ELECTRON_TAIL
0088   0483 E7            pop d
0089   0484 FD 43         mov [d], b
0090   0486 29 B7 11      mov b, [__grid] ; grid
0091   0489 D7            push a
0092   048A 74            mov d, b
0093   048B DA            push d
0094   048C 26 06 00      mov b, 6
0095   048F E7            pop d
0096   0490 10 50 00      mov a, 80
0097   0493 AC            mul a, b
0098   0494 5A            add d, b
0099   0495 DA            push d
0100   0496 26 07 00      mov b, 7
0101   0499 E7            pop d
0102   049A 10 02 00      mov a, 2
0103   049D AC            mul a, b
0104   049E 5A            add d, b
0105   049F E4            pop a
0106   04A0 DA            push d
0107   04A1 26 01 00      mov b, 1; CONDUCTOR
0108   04A4 E7            pop d
0109   04A5 FD 43         mov [d], b
0110   04A7 29 B7 11      mov b, [__grid] ; grid
0111   04AA D7            push a
0112   04AB 74            mov d, b
0113   04AC DA            push d
0114   04AD 26 05 00      mov b, 5
0115   04B0 E7            pop d
0116   04B1 10 50 00      mov a, 80
0117   04B4 AC            mul a, b
0118   04B5 5A            add d, b
0119   04B6 DA            push d
0120   04B7 26 05 00      mov b, 5
0121   04BA E7            pop d
0122   04BB 10 02 00      mov a, 2
0123   04BE AC            mul a, b
0124   04BF 5A            add d, b
0125   04C0 E4            pop a
0126   04C1 DA            push d
0127   04C2 26 01 00      mov b, 1; CONDUCTOR
0128   04C5 E7            pop d
0129   04C6 FD 43         mov [d], b
0130   04C8 29 B7 11      mov b, [__grid] ; grid
0131   04CB D7            push a
0132   04CC 74            mov d, b
0133   04CD DA            push d
0134   04CE 26 06 00      mov b, 6
0135   04D1 E7            pop d
0136   04D2 10 50 00      mov a, 80
0137   04D5 AC            mul a, b
0138   04D6 5A            add d, b
0139   04D7 DA            push d
0140   04D8 26 05 00      mov b, 5
0141   04DB E7            pop d
0142   04DC 10 02 00      mov a, 2
0143   04DF AC            mul a, b
0144   04E0 5A            add d, b
0145   04E1 E4            pop a
0146   04E2 DA            push d
0147   04E3 26 02 00      mov b, 2; ELECTRON_HEAD
0148   04E6 E7            pop d
0149   04E7 FD 43         mov [d], b
0150   04E9 29 B7 11      mov b, [__grid] ; grid
0151   04EC D7            push a
0152   04ED 74            mov d, b
0153   04EE DA            push d
0154   04EF 26 07 00      mov b, 7
0155   04F2 E7            pop d
0156   04F3 10 50 00      mov a, 80
0157   04F6 AC            mul a, b
0158   04F7 5A            add d, b
0159   04F8 DA            push d
0160   04F9 26 05 00      mov b, 5
0161   04FC E7            pop d
0162   04FD 10 02 00      mov a, 2
0163   0500 AC            mul a, b
0164   0501 5A            add d, b
0165   0502 E4            pop a
0166   0503 DA            push d
0167   0504 26 01 00      mov b, 1; CONDUCTOR
0168   0507 E7            pop d
0169   0508 FD 43         mov [d], b
0170   050A 29 B7 11      mov b, [__grid] ; grid
0171   050D D7            push a
0172   050E 74            mov d, b
0173   050F DA            push d
0174   0510 26 06 00      mov b, 6
0175   0513 E7            pop d
0176   0514 10 50 00      mov a, 80
0177   0517 AC            mul a, b
0178   0518 5A            add d, b
0179   0519 DA            push d
0180   051A 26 06 00      mov b, 6
0181   051D E7            pop d
0182   051E 10 02 00      mov a, 2
0183   0521 AC            mul a, b
0184   0522 5A            add d, b
0185   0523 E4            pop a
0186   0524 DA            push d
0187   0525 26 03 00      mov b, 3; ELECTRON_TAIL
0188   0528 E7            pop d
0189   0529 FD 43         mov [d], b
0190   052B 29 B7 11      mov b, [__grid] ; grid
0191   052E D7            push a
0192   052F 74            mov d, b
0193   0530 DA            push d
0194   0531 26 06 00      mov b, 6
0195   0534 E7            pop d
0196   0535 10 50 00      mov a, 80
0197   0538 AC            mul a, b
0198   0539 5A            add d, b
0199   053A DA            push d
0200   053B 26 07 00      mov b, 7
0201   053E E7            pop d
0202   053F 10 02 00      mov a, 2
0203   0542 AC            mul a, b
0204   0543 5A            add d, b
0205   0544 E4            pop a
0206   0545 DA            push d
0207   0546 26 01 00      mov b, 1; CONDUCTOR
0208   0549 E7            pop d
0209   054A FD 43         mov [d], b
0210   054C             _while1_cond:
0211   054C 26 01 00      mov b, 1
0212   054F C0 00 00      cmp b, 0
0213   0552 C6 5E 05      je _while1_exit
0214   0555             _while1_block:
0215   0555 07 64 05      call print_grid
0216   0558 07 56 06      call iterate
0217   055B 0A 4C 05      jmp _while1_cond
0218   055E             _while1_exit:
0219   055E 26 00 00      mov b, 0
0220   0561 F9            leave
0221   0562 05 0B         syscall sys_terminate_proc
0222   0564             
0223   0564             print_grid:
0224   0564 D2            push bp
0225   0565 9B            mov bp, sp
0226   0566 52 02 00      sub sp, 2 ; y
0227   0569 52 02 00      sub sp, 2 ; x
0228   056C 52 01 00      sub sp, 1 ; c
0229   056F             _for2_init:
0230   056F 26 00 00      mov b, 0
0231   0572 D7            push a
0232   0573 11            mov a, b
0233   0574 45 FF FF      mov [bp + -1], a ; y
0234   0577 E4            pop a
0235   0578             _for2_cond:
0236   0578 2C FF FF      mov b, [bp + -1] ; y
0237   057B D7            push a
0238   057C 11            mov a, b
0239   057D 26 14 00      mov b, 20
0240   0580 B0            cmp a, b
0241   0581 0E            lodflgs
0242   0582 2F            mov bl, al
0243   0583 FD A2 03      shr al, 3
0244   0586 FD A4 02      shr bl, 2
0245   0589 FD 87 01      and bl, %00000001
0246   058C 90            xor al, bl ; < (signed)
0247   058D 22 00         mov ah, 0
0248   058F 27            mov b, a
0249   0590 E4            pop a
0250   0591 C0 00 00      cmp b, 0
0251   0594 C6 54 06      je _for2_exit
0252   0597             _for2_block:
0253   0597             _for3_init:
0254   0597 26 00 00      mov b, 0
0255   059A D7            push a
0256   059B 11            mov a, b
0257   059C 45 FD FF      mov [bp + -3], a ; x
0258   059F E4            pop a
0259   05A0             _for3_cond:
0260   05A0 2C FD FF      mov b, [bp + -3] ; x
0261   05A3 D7            push a
0262   05A4 11            mov a, b
0263   05A5 26 28 00      mov b, 40
0264   05A8 B0            cmp a, b
0265   05A9 0E            lodflgs
0266   05AA 2F            mov bl, al
0267   05AB FD A2 03      shr al, 3
0268   05AE FD A4 02      shr bl, 2
0269   05B1 FD 87 01      and bl, %00000001
0270   05B4 90            xor al, bl ; < (signed)
0271   05B5 22 00         mov ah, 0
0272   05B7 27            mov b, a
0273   05B8 E4            pop a
0274   05B9 C0 00 00      cmp b, 0
0275   05BC C6 3C 06      je _for3_exit
0276   05BF             _for3_block:
0277   05BF             _switch4_expr:
0278   05BF 29 B7 11      mov b, [__grid] ; grid
0279   05C2 D7            push a
0280   05C3 74            mov d, b
0281   05C4 DA            push d
0282   05C5 2C FF FF      mov b, [bp + -1] ; y
0283   05C8 E7            pop d
0284   05C9 10 50 00      mov a, 80
0285   05CC AC            mul a, b
0286   05CD 5A            add d, b
0287   05CE DA            push d
0288   05CF 2C FD FF      mov b, [bp + -3] ; x
0289   05D2 E7            pop d
0290   05D3 10 02 00      mov a, 2
0291   05D6 AC            mul a, b
0292   05D7 5A            add d, b
0293   05D8 E4            pop a
0294   05D9 2A            mov b, [d]
0295   05DA             _switch4_comparisons:
0296   05DA C0 00 00      cmp b, 0
0297   05DD C6 F2 05      je _switch4_case0
0298   05E0 C0 01 00      cmp b, 1
0299   05E3 C6 FE 05      je _switch4_case1
0300   05E6 C0 02 00      cmp b, 2
0301   05E9 C6 0A 06      je _switch4_case2
0302   05EC C0 03 00      cmp b, 3
0303   05EF C6 16 06      je _switch4_case3
0304   05F2             _switch4_case0:
0305   05F2 26 20 00      mov b, $20
0306   05F5 DB            push al
0307   05F6 1B            mov al, bl
0308   05F7 40 FC FF      mov [bp + -4], al ; c
0309   05FA E8            pop al
0310   05FB 0A 22 06      jmp _switch4_exit ; case break
0311   05FE             _switch4_case1:
0312   05FE 26 2E 00      mov b, $2e
0313   0601 DB            push al
0314   0602 1B            mov al, bl
0315   0603 40 FC FF      mov [bp + -4], al ; c
0316   0606 E8            pop al
0317   0607 0A 22 06      jmp _switch4_exit ; case break
0318   060A             _switch4_case2:
0319   060A 26 40 00      mov b, $40
0320   060D DB            push al
0321   060E 1B            mov al, bl
0322   060F 40 FC FF      mov [bp + -4], al ; c
0323   0612 E8            pop al
0324   0613 0A 22 06      jmp _switch4_exit ; case break
0325   0616             _switch4_case3:
0326   0616 26 23 00      mov b, $23
0327   0619 DB            push al
0328   061A 1B            mov al, bl
0329   061B 40 FC FF      mov [bp + -4], al ; c
0330   061E E8            pop al
0331   061F 0A 22 06      jmp _switch4_exit ; case break
0332   0622             _switch4_exit:
0333   0622 34 FC FF      mov bl, [bp + -4] ; c
0334   0625 A7 00         mov bh, 0
0335   0627 DD            push bl
0336   0628 07 67 0A      call _putchar
0337   062B 51 01 00      add sp, 1
0338   062E             _for3_update:
0339   062E 2C FD FF      mov b, [bp + -3] ; x
0340   0631 FD 77         inc b
0341   0633 D7            push a
0342   0634 11            mov a, b
0343   0635 45 FD FF      mov [bp + -3], a ; x
0344   0638 E4            pop a
0345   0639 0A A0 05      jmp _for3_cond
0346   063C             _for3_exit:
0347   063C 26 0A 00      mov b, $a
0348   063F DD            push bl
0349   0640 07 67 0A      call _putchar
0350   0643 51 01 00      add sp, 1
0351   0646             _for2_update:
0352   0646 2C FF FF      mov b, [bp + -1] ; y
0353   0649 FD 77         inc b
0354   064B D7            push a
0355   064C 11            mov a, b
0356   064D 45 FF FF      mov [bp + -1], a ; y
0357   0650 E4            pop a
0358   0651 0A 78 05      jmp _for2_cond
0359   0654             _for2_exit:
0360   0654 F9            leave
0361   0655 09            ret
0362   0656             
0363   0656             iterate:
0364   0656 D2            push bp
0365   0657 9B            mov bp, sp
0366   0658 52 02 00      sub sp, 2 ; x
0367   065B 52 02 00      sub sp, 2 ; y
0368   065E 52 02 00      sub sp, 2 ; dx
0369   0661 52 02 00      sub sp, 2 ; dy
0370   0664 52 02 00      sub sp, 2 ; nx
0371   0667 52 02 00      sub sp, 2 ; ny
0372   066A 52 02 00      sub sp, 2 ; head_count
0373   066D             _for5_init:
0374   066D 26 00 00      mov b, 0
0375   0670 D7            push a
0376   0671 11            mov a, b
0377   0672 45 FD FF      mov [bp + -3], a ; y
0378   0675 E4            pop a
0379   0676             _for5_cond:
0380   0676 2C FD FF      mov b, [bp + -3] ; y
0381   0679 D7            push a
0382   067A 11            mov a, b
0383   067B 26 14 00      mov b, 20
0384   067E B0            cmp a, b
0385   067F 0E            lodflgs
0386   0680 2F            mov bl, al
0387   0681 FD A2 03      shr al, 3
0388   0684 FD A4 02      shr bl, 2
0389   0687 FD 87 01      and bl, %00000001
0390   068A 90            xor al, bl ; < (signed)
0391   068B 22 00         mov ah, 0
0392   068D 27            mov b, a
0393   068E E4            pop a
0394   068F C0 00 00      cmp b, 0
0395   0692 C6 C0 09      je _for5_exit
0396   0695             _for5_block:
0397   0695             _for6_init:
0398   0695 26 00 00      mov b, 0
0399   0698 D7            push a
0400   0699 11            mov a, b
0401   069A 45 FF FF      mov [bp + -1], a ; x
0402   069D E4            pop a
0403   069E             _for6_cond:
0404   069E 2C FF FF      mov b, [bp + -1] ; x
0405   06A1 D7            push a
0406   06A2 11            mov a, b
0407   06A3 26 28 00      mov b, 40
0408   06A6 B0            cmp a, b
0409   06A7 0E            lodflgs
0410   06A8 2F            mov bl, al
0411   06A9 FD A2 03      shr al, 3
0412   06AC FD A4 02      shr bl, 2
0413   06AF FD 87 01      and bl, %00000001
0414   06B2 90            xor al, bl ; < (signed)
0415   06B3 22 00         mov ah, 0
0416   06B5 27            mov b, a
0417   06B6 E4            pop a
0418   06B7 C0 00 00      cmp b, 0
0419   06BA C6 B2 09      je _for6_exit
0420   06BD             _for6_block:
0421   06BD 26 00 00      mov b, 0
0422   06C0 D7            push a
0423   06C1 11            mov a, b
0424   06C2 45 F3 FF      mov [bp + -13], a ; head_count
0425   06C5 E4            pop a
0426   06C6             _for7_init:
0427   06C6 26 01 00      mov b, 1
0428   06C9 FD 97         neg b
0429   06CB D7            push a
0430   06CC 11            mov a, b
0431   06CD 45 F9 FF      mov [bp + -7], a ; dy
0432   06D0 E4            pop a
0433   06D1             _for7_cond:
0434   06D1 2C F9 FF      mov b, [bp + -7] ; dy
0435   06D4 D7            push a
0436   06D5 11            mov a, b
0437   06D6 26 01 00      mov b, 1
0438   06D9 B0            cmp a, b
0439   06DA 0E            lodflgs
0440   06DB 2F            mov bl, al
0441   06DC FD 78         mov g, a
0442   06DE FD A2 03      shr al, 3
0443   06E1 FD A4 02      shr bl, 2
0444   06E4 FD 87 01      and bl, %00000001
0445   06E7 90            xor al, bl
0446   06E8 FD 27         mov b, g
0447   06EA FD 87 01      and bl, %00000001
0448   06ED 8C            or al, bl ; <= (signed)
0449   06EE 22 00         mov ah, 0
0450   06F0 27            mov b, a
0451   06F1 E4            pop a
0452   06F2 C0 00 00      cmp b, 0
0453   06F5 C6 92 08      je _for7_exit
0454   06F8             _for7_block:
0455   06F8             _for8_init:
0456   06F8 26 01 00      mov b, 1
0457   06FB FD 97         neg b
0458   06FD D7            push a
0459   06FE 11            mov a, b
0460   06FF 45 FB FF      mov [bp + -5], a ; dx
0461   0702 E4            pop a
0462   0703             _for8_cond:
0463   0703 2C FB FF      mov b, [bp + -5] ; dx
0464   0706 D7            push a
0465   0707 11            mov a, b
0466   0708 26 01 00      mov b, 1
0467   070B B0            cmp a, b
0468   070C 0E            lodflgs
0469   070D 2F            mov bl, al
0470   070E FD 78         mov g, a
0471   0710 FD A2 03      shr al, 3
0472   0713 FD A4 02      shr bl, 2
0473   0716 FD 87 01      and bl, %00000001
0474   0719 90            xor al, bl
0475   071A FD 27         mov b, g
0476   071C FD 87 01      and bl, %00000001
0477   071F 8C            or al, bl ; <= (signed)
0478   0720 22 00         mov ah, 0
0479   0722 27            mov b, a
0480   0723 E4            pop a
0481   0724 C0 00 00      cmp b, 0
0482   0727 C6 84 08      je _for8_exit
0483   072A             _for8_block:
0484   072A             _if9_cond:
0485   072A 2C FB FF      mov b, [bp + -5] ; dx
0486   072D D7            push a
0487   072E 11            mov a, b
0488   072F 26 00 00      mov b, 0
0489   0732 B0            cmp a, b
0490   0733 0E            lodflgs
0491   0734 87 01         and al, %00000001 ; ==
0492   0736 22 00         mov ah, 0
0493   0738 27            mov b, a
0494   0739 E4            pop a
0495   073A DB            push al
0496   073B C0 00 00      cmp b, 0
0497   073E 0E            lodflgs ; transform condition into a single bit
0498   073F 2C F9 FF      mov b, [bp + -7] ; dy
0499   0742 D7            push a
0500   0743 11            mov a, b
0501   0744 26 00 00      mov b, 0
0502   0747 B0            cmp a, b
0503   0748 0E            lodflgs
0504   0749 87 01         and al, %00000001 ; ==
0505   074B 22 00         mov ah, 0
0506   074D 27            mov b, a
0507   074E E4            pop a
0508   074F DB            push al
0509   0750 C0 00 00      cmp b, 0
0510   0753 0E            lodflgs
0511   0754 EA            pop bl ; matches previous 'push al'
0512   0755 8C            or al, bl
0513   0756 8F 01         xor al, %00000001
0514   0758 2F            mov bl, al
0515   0759 A7 00         mov bh, 0
0516   075B E8            pop al
0517   075C C0 00 00      cmp b, 0
0518   075F C6 68 07      je _if9_exit
0519   0762             _if9_true:
0520   0762 0A 03 07      jmp _for8_cond ; for continue
0521   0765 0A 68 07      jmp _if9_exit
0522   0768             _if9_exit:
0523   0768 2C FF FF      mov b, [bp + -1] ; x
0524   076B D7            push a
0525   076C 11            mov a, b
0526   076D 2C FB FF      mov b, [bp + -5] ; dx
0527   0770 54            add a, b
0528   0771 27            mov b, a
0529   0772 E4            pop a
0530   0773 D7            push a
0531   0774 11            mov a, b
0532   0775 45 F7 FF      mov [bp + -9], a ; nx
0533   0778 E4            pop a
0534   0779 2C FD FF      mov b, [bp + -3] ; y
0535   077C D7            push a
0536   077D 11            mov a, b
0537   077E 2C F9 FF      mov b, [bp + -7] ; dy
0538   0781 54            add a, b
0539   0782 27            mov b, a
0540   0783 E4            pop a
0541   0784 D7            push a
0542   0785 11            mov a, b
0543   0786 45 F5 FF      mov [bp + -11], a ; ny
0544   0789 E4            pop a
0545   078A             _if10_cond:
0546   078A 2C F7 FF      mov b, [bp + -9] ; nx
0547   078D D7            push a
0548   078E 11            mov a, b
0549   078F 26 00 00      mov b, 0
0550   0792 B0            cmp a, b
0551   0793 0E            lodflgs
0552   0794 2F            mov bl, al
0553   0795 FD A2 03      shr al, 3
0554   0798 FD A4 02      shr bl, 2
0555   079B FD 87 01      and bl, %00000001
0556   079E 90            xor al, bl
0557   079F 8F 01         xor al, %00000001 ; >= (signed)
0558   07A1 22 00         mov ah, 0
0559   07A3 27            mov b, a
0560   07A4 E4            pop a
0561   07A5 DB            push al
0562   07A6 C0 00 00      cmp b, 0
0563   07A9 0E            lodflgs ; transform condition into a single bit
0564   07AA 2C F7 FF      mov b, [bp + -9] ; nx
0565   07AD D7            push a
0566   07AE 11            mov a, b
0567   07AF 26 28 00      mov b, 40
0568   07B2 B0            cmp a, b
0569   07B3 0E            lodflgs
0570   07B4 2F            mov bl, al
0571   07B5 FD A2 03      shr al, 3
0572   07B8 FD A4 02      shr bl, 2
0573   07BB FD 87 01      and bl, %00000001
0574   07BE 90            xor al, bl ; < (signed)
0575   07BF 22 00         mov ah, 0
0576   07C1 27            mov b, a
0577   07C2 E4            pop a
0578   07C3 DB            push al
0579   07C4 C0 00 00      cmp b, 0
0580   07C7 0E            lodflgs
0581   07C8 EA            pop bl ; matches previous 'push al'
0582   07C9 8C            or al, bl
0583   07CA 8F 01         xor al, %00000001
0584   07CC 2F            mov bl, al
0585   07CD A7 00         mov bh, 0
0586   07CF E8            pop al
0587   07D0 DB            push al
0588   07D1 C0 00 00      cmp b, 0
0589   07D4 0E            lodflgs ; transform condition into a single bit
0590   07D5 2C F5 FF      mov b, [bp + -11] ; ny
0591   07D8 D7            push a
0592   07D9 11            mov a, b
0593   07DA 26 00 00      mov b, 0
0594   07DD B0            cmp a, b
0595   07DE 0E            lodflgs
0596   07DF 2F            mov bl, al
0597   07E0 FD A2 03      shr al, 3
0598   07E3 FD A4 02      shr bl, 2
0599   07E6 FD 87 01      and bl, %00000001
0600   07E9 90            xor al, bl
0601   07EA 8F 01         xor al, %00000001 ; >= (signed)
0602   07EC 22 00         mov ah, 0
0603   07EE 27            mov b, a
0604   07EF E4            pop a
0605   07F0 DB            push al
0606   07F1 C0 00 00      cmp b, 0
0607   07F4 0E            lodflgs
0608   07F5 EA            pop bl ; matches previous 'push al'
0609   07F6 8C            or al, bl
0610   07F7 8F 01         xor al, %00000001
0611   07F9 2F            mov bl, al
0612   07FA A7 00         mov bh, 0
0613   07FC E8            pop al
0614   07FD DB            push al
0615   07FE C0 00 00      cmp b, 0
0616   0801 0E            lodflgs ; transform condition into a single bit
0617   0802 2C F5 FF      mov b, [bp + -11] ; ny
0618   0805 D7            push a
0619   0806 11            mov a, b
0620   0807 26 14 00      mov b, 20
0621   080A B0            cmp a, b
0622   080B 0E            lodflgs
0623   080C 2F            mov bl, al
0624   080D FD A2 03      shr al, 3
0625   0810 FD A4 02      shr bl, 2
0626   0813 FD 87 01      and bl, %00000001
0627   0816 90            xor al, bl ; < (signed)
0628   0817 22 00         mov ah, 0
0629   0819 27            mov b, a
0630   081A E4            pop a
0631   081B DB            push al
0632   081C C0 00 00      cmp b, 0
0633   081F 0E            lodflgs
0634   0820 EA            pop bl ; matches previous 'push al'
0635   0821 8C            or al, bl
0636   0822 8F 01         xor al, %00000001
0637   0824 2F            mov bl, al
0638   0825 A7 00         mov bh, 0
0639   0827 E8            pop al
0640   0828 DB            push al
0641   0829 C0 00 00      cmp b, 0
0642   082C 0E            lodflgs ; transform condition into a single bit
0643   082D 29 B7 11      mov b, [__grid] ; grid
0644   0830 D7            push a
0645   0831 74            mov d, b
0646   0832 DA            push d
0647   0833 2C F5 FF      mov b, [bp + -11] ; ny
0648   0836 E7            pop d
0649   0837 10 50 00      mov a, 80
0650   083A AC            mul a, b
0651   083B 5A            add d, b
0652   083C DA            push d
0653   083D 2C F7 FF      mov b, [bp + -9] ; nx
0654   0840 E7            pop d
0655   0841 10 02 00      mov a, 2
0656   0844 AC            mul a, b
0657   0845 5A            add d, b
0658   0846 E4            pop a
0659   0847 2A            mov b, [d]
0660   0848 D7            push a
0661   0849 11            mov a, b
0662   084A 26 02 00      mov b, 2; ELECTRON_HEAD
0663   084D B0            cmp a, b
0664   084E 0E            lodflgs
0665   084F 87 01         and al, %00000001 ; ==
0666   0851 22 00         mov ah, 0
0667   0853 27            mov b, a
0668   0854 E4            pop a
0669   0855 DB            push al
0670   0856 C0 00 00      cmp b, 0
0671   0859 0E            lodflgs
0672   085A EA            pop bl ; matches previous 'push al'
0673   085B 8C            or al, bl
0674   085C 8F 01         xor al, %00000001
0675   085E 2F            mov bl, al
0676   085F A7 00         mov bh, 0
0677   0861 E8            pop al
0678   0862 C0 00 00      cmp b, 0
0679   0865 C6 76 08      je _if10_exit
0680   0868             _if10_true:
0681   0868 2C F3 FF      mov b, [bp + -13] ; head_count
0682   086B FD 77         inc b
0683   086D D7            push a
0684   086E 11            mov a, b
0685   086F 45 F3 FF      mov [bp + -13], a ; head_count
0686   0872 E4            pop a
0687   0873 0A 76 08      jmp _if10_exit
0688   0876             _if10_exit:
0689   0876             _for8_update:
0690   0876 2C FB FF      mov b, [bp + -5] ; dx
0691   0879 FD 77         inc b
0692   087B D7            push a
0693   087C 11            mov a, b
0694   087D 45 FB FF      mov [bp + -5], a ; dx
0695   0880 E4            pop a
0696   0881 0A 03 07      jmp _for8_cond
0697   0884             _for8_exit:
0698   0884             _for7_update:
0699   0884 2C F9 FF      mov b, [bp + -7] ; dy
0700   0887 FD 77         inc b
0701   0889 D7            push a
0702   088A 11            mov a, b
0703   088B 45 F9 FF      mov [bp + -7], a ; dy
0704   088E E4            pop a
0705   088F 0A D1 06      jmp _for7_cond
0706   0892             _for7_exit:
0707   0892             _switch11_expr:
0708   0892 29 B7 11      mov b, [__grid] ; grid
0709   0895 D7            push a
0710   0896 74            mov d, b
0711   0897 DA            push d
0712   0898 2C FD FF      mov b, [bp + -3] ; y
0713   089B E7            pop d
0714   089C 10 50 00      mov a, 80
0715   089F AC            mul a, b
0716   08A0 5A            add d, b
0717   08A1 DA            push d
0718   08A2 2C FF FF      mov b, [bp + -1] ; x
0719   08A5 E7            pop d
0720   08A6 10 02 00      mov a, 2
0721   08A9 AC            mul a, b
0722   08AA 5A            add d, b
0723   08AB E4            pop a
0724   08AC 2A            mov b, [d]
0725   08AD             _switch11_comparisons:
0726   08AD C0 00 00      cmp b, 0
0727   08B0 C6 C5 08      je _switch11_case0
0728   08B3 C0 01 00      cmp b, 1
0729   08B6 C6 E9 08      je _switch11_case1
0730   08B9 C0 02 00      cmp b, 2
0731   08BC C6 5C 09      je _switch11_case2
0732   08BF C0 03 00      cmp b, 3
0733   08C2 C6 80 09      je _switch11_case3
0734   08C5             _switch11_case0:
0735   08C5 29 F9 17      mov b, [__new_grid] ; new_grid
0736   08C8 D7            push a
0737   08C9 74            mov d, b
0738   08CA DA            push d
0739   08CB 2C FD FF      mov b, [bp + -3] ; y
0740   08CE E7            pop d
0741   08CF 10 50 00      mov a, 80
0742   08D2 AC            mul a, b
0743   08D3 5A            add d, b
0744   08D4 DA            push d
0745   08D5 2C FF FF      mov b, [bp + -1] ; x
0746   08D8 E7            pop d
0747   08D9 10 02 00      mov a, 2
0748   08DC AC            mul a, b
0749   08DD 5A            add d, b
0750   08DE E4            pop a
0751   08DF DA            push d
0752   08E0 26 00 00      mov b, 0; EMPTY
0753   08E3 E7            pop d
0754   08E4 FD 43         mov [d], b
0755   08E6 0A A4 09      jmp _switch11_exit ; case break
0756   08E9             _switch11_case1:
0757   08E9             _if12_cond:
0758   08E9 2C F3 FF      mov b, [bp + -13] ; head_count
0759   08EC D7            push a
0760   08ED 11            mov a, b
0761   08EE 26 01 00      mov b, 1
0762   08F1 B0            cmp a, b
0763   08F2 0E            lodflgs
0764   08F3 87 01         and al, %00000001 ; ==
0765   08F5 22 00         mov ah, 0
0766   08F7 27            mov b, a
0767   08F8 E4            pop a
0768   08F9 D7            push a
0769   08FA 11            mov a, b
0770   08FB 2C F3 FF      mov b, [bp + -13] ; head_count
0771   08FE D7            push a
0772   08FF 11            mov a, b
0773   0900 26 02 00      mov b, 2
0774   0903 B0            cmp a, b
0775   0904 0E            lodflgs
0776   0905 87 01         and al, %00000001 ; ==
0777   0907 22 00         mov ah, 0
0778   0909 27            mov b, a
0779   090A E4            pop a
0780   090B 8A            or a, b
0781   090C 27            mov b, a
0782   090D E4            pop a
0783   090E C0 00 00      cmp b, 0
0784   0911 C6 38 09      je _if12_else
0785   0914             _if12_true:
0786   0914 29 F9 17      mov b, [__new_grid] ; new_grid
0787   0917 D7            push a
0788   0918 74            mov d, b
0789   0919 DA            push d
0790   091A 2C FD FF      mov b, [bp + -3] ; y
0791   091D E7            pop d
0792   091E 10 50 00      mov a, 80
0793   0921 AC            mul a, b
0794   0922 5A            add d, b
0795   0923 DA            push d
0796   0924 2C FF FF      mov b, [bp + -1] ; x
0797   0927 E7            pop d
0798   0928 10 02 00      mov a, 2
0799   092B AC            mul a, b
0800   092C 5A            add d, b
0801   092D E4            pop a
0802   092E DA            push d
0803   092F 26 02 00      mov b, 2; ELECTRON_HEAD
0804   0932 E7            pop d
0805   0933 FD 43         mov [d], b
0806   0935 0A 59 09      jmp _if12_exit
0807   0938             _if12_else:
0808   0938 29 F9 17      mov b, [__new_grid] ; new_grid
0809   093B D7            push a
0810   093C 74            mov d, b
0811   093D DA            push d
0812   093E 2C FD FF      mov b, [bp + -3] ; y
0813   0941 E7            pop d
0814   0942 10 50 00      mov a, 80
0815   0945 AC            mul a, b
0816   0946 5A            add d, b
0817   0947 DA            push d
0818   0948 2C FF FF      mov b, [bp + -1] ; x
0819   094B E7            pop d
0820   094C 10 02 00      mov a, 2
0821   094F AC            mul a, b
0822   0950 5A            add d, b
0823   0951 E4            pop a
0824   0952 DA            push d
0825   0953 26 01 00      mov b, 1; CONDUCTOR
0826   0956 E7            pop d
0827   0957 FD 43         mov [d], b
0828   0959             _if12_exit:
0829   0959 0A A4 09      jmp _switch11_exit ; case break
0830   095C             _switch11_case2:
0831   095C 29 F9 17      mov b, [__new_grid] ; new_grid
0832   095F D7            push a
0833   0960 74            mov d, b
0834   0961 DA            push d
0835   0962 2C FD FF      mov b, [bp + -3] ; y
0836   0965 E7            pop d
0837   0966 10 50 00      mov a, 80
0838   0969 AC            mul a, b
0839   096A 5A            add d, b
0840   096B DA            push d
0841   096C 2C FF FF      mov b, [bp + -1] ; x
0842   096F E7            pop d
0843   0970 10 02 00      mov a, 2
0844   0973 AC            mul a, b
0845   0974 5A            add d, b
0846   0975 E4            pop a
0847   0976 DA            push d
0848   0977 26 03 00      mov b, 3; ELECTRON_TAIL
0849   097A E7            pop d
0850   097B FD 43         mov [d], b
0851   097D 0A A4 09      jmp _switch11_exit ; case break
0852   0980             _switch11_case3:
0853   0980 29 F9 17      mov b, [__new_grid] ; new_grid
0854   0983 D7            push a
0855   0984 74            mov d, b
0856   0985 DA            push d
0857   0986 2C FD FF      mov b, [bp + -3] ; y
0858   0989 E7            pop d
0859   098A 10 50 00      mov a, 80
0860   098D AC            mul a, b
0861   098E 5A            add d, b
0862   098F DA            push d
0863   0990 2C FF FF      mov b, [bp + -1] ; x
0864   0993 E7            pop d
0865   0994 10 02 00      mov a, 2
0866   0997 AC            mul a, b
0867   0998 5A            add d, b
0868   0999 E4            pop a
0869   099A DA            push d
0870   099B 26 01 00      mov b, 1; CONDUCTOR
0871   099E E7            pop d
0872   099F FD 43         mov [d], b
0873   09A1 0A A4 09      jmp _switch11_exit ; case break
0874   09A4             _switch11_exit:
0875   09A4             _for6_update:
0876   09A4 2C FF FF      mov b, [bp + -1] ; x
0877   09A7 FD 77         inc b
0878   09A9 D7            push a
0879   09AA 11            mov a, b
0880   09AB 45 FF FF      mov [bp + -1], a ; x
0881   09AE E4            pop a
0882   09AF 0A 9E 06      jmp _for6_cond
0883   09B2             _for6_exit:
0884   09B2             _for5_update:
0885   09B2 2C FD FF      mov b, [bp + -3] ; y
0886   09B5 FD 77         inc b
0887   09B7 D7            push a
0888   09B8 11            mov a, b
0889   09B9 45 FD FF      mov [bp + -3], a ; y
0890   09BC E4            pop a
0891   09BD 0A 76 06      jmp _for5_cond
0892   09C0             _for5_exit:
0893   09C0             _for13_init:
0894   09C0 26 00 00      mov b, 0
0895   09C3 D7            push a
0896   09C4 11            mov a, b
0897   09C5 45 FD FF      mov [bp + -3], a ; y
0898   09C8 E4            pop a
0899   09C9             _for13_cond:
0900   09C9 2C FD FF      mov b, [bp + -3] ; y
0901   09CC D7            push a
0902   09CD 11            mov a, b
0903   09CE 26 14 00      mov b, 20
0904   09D1 B0            cmp a, b
0905   09D2 0E            lodflgs
0906   09D3 2F            mov bl, al
0907   09D4 FD A2 03      shr al, 3
0908   09D7 FD A4 02      shr bl, 2
0909   09DA FD 87 01      and bl, %00000001
0910   09DD 90            xor al, bl ; < (signed)
0911   09DE 22 00         mov ah, 0
0912   09E0 27            mov b, a
0913   09E1 E4            pop a
0914   09E2 C0 00 00      cmp b, 0
0915   09E5 C6 65 0A      je _for13_exit
0916   09E8             _for13_block:
0917   09E8             _for14_init:
0918   09E8 26 00 00      mov b, 0
0919   09EB D7            push a
0920   09EC 11            mov a, b
0921   09ED 45 FF FF      mov [bp + -1], a ; x
0922   09F0 E4            pop a
0923   09F1             _for14_cond:
0924   09F1 2C FF FF      mov b, [bp + -1] ; x
0925   09F4 D7            push a
0926   09F5 11            mov a, b
0927   09F6 26 28 00      mov b, 40
0928   09F9 B0            cmp a, b
0929   09FA 0E            lodflgs
0930   09FB 2F            mov bl, al
0931   09FC FD A2 03      shr al, 3
0932   09FF FD A4 02      shr bl, 2
0933   0A02 FD 87 01      and bl, %00000001
0934   0A05 90            xor al, bl ; < (signed)
0935   0A06 22 00         mov ah, 0
0936   0A08 27            mov b, a
0937   0A09 E4            pop a
0938   0A0A C0 00 00      cmp b, 0
0939   0A0D C6 57 0A      je _for14_exit
0940   0A10             _for14_block:
0941   0A10 29 B7 11      mov b, [__grid] ; grid
0942   0A13 D7            push a
0943   0A14 74            mov d, b
0944   0A15 DA            push d
0945   0A16 2C FD FF      mov b, [bp + -3] ; y
0946   0A19 E7            pop d
0947   0A1A 10 50 00      mov a, 80
0948   0A1D AC            mul a, b
0949   0A1E 5A            add d, b
0950   0A1F DA            push d
0951   0A20 2C FF FF      mov b, [bp + -1] ; x
0952   0A23 E7            pop d
0953   0A24 10 02 00      mov a, 2
0954   0A27 AC            mul a, b
0955   0A28 5A            add d, b
0956   0A29 E4            pop a
0957   0A2A DA            push d
0958   0A2B 29 F9 17      mov b, [__new_grid] ; new_grid
0959   0A2E D7            push a
0960   0A2F 74            mov d, b
0961   0A30 DA            push d
0962   0A31 2C FD FF      mov b, [bp + -3] ; y
0963   0A34 E7            pop d
0964   0A35 10 50 00      mov a, 80
0965   0A38 AC            mul a, b
0966   0A39 5A            add d, b
0967   0A3A DA            push d
0968   0A3B 2C FF FF      mov b, [bp + -1] ; x
0969   0A3E E7            pop d
0970   0A3F 10 02 00      mov a, 2
0971   0A42 AC            mul a, b
0972   0A43 5A            add d, b
0973   0A44 E4            pop a
0974   0A45 2A            mov b, [d]
0975   0A46 E7            pop d
0976   0A47 FD 43         mov [d], b
0977   0A49             _for14_update:
0978   0A49 2C FF FF      mov b, [bp + -1] ; x
0979   0A4C FD 77         inc b
0980   0A4E D7            push a
0981   0A4F 11            mov a, b
0982   0A50 45 FF FF      mov [bp + -1], a ; x
0983   0A53 E4            pop a
0984   0A54 0A F1 09      jmp _for14_cond
0985   0A57             _for14_exit:
0986   0A57             _for13_update:
0987   0A57 2C FD FF      mov b, [bp + -3] ; y
0988   0A5A FD 77         inc b
0989   0A5C D7            push a
0990   0A5D 11            mov a, b
0991   0A5E 45 FD FF      mov [bp + -3], a ; y
0992   0A61 E4            pop a
0993   0A62 0A C9 09      jmp _for13_cond
0994   0A65             _for13_exit:
0995   0A65 F9            leave
0996   0A66 09            ret
0997   0A67             
0998   0A67             _putchar:
0999   0A67 D2            push bp
1000   0A68 9B            mov bp, sp
1001   0A69             
1002   0A69             ; --- BEGIN INLINE ASM BLOCK
1003   0A69 20 05 00      mov al, [bp + 5]
1004   0A6C 23            mov ah, al
1005   0A6D 07 0D 19      call putchar
1006   0A70             ; --- END INLINE ASM BLOCK
1007   0A70             
1008   0A70 F9            leave
1009   0A71 09            ret
1010   0A72             
1011   0A72             print_num:
1012   0A72 D2            push bp
1013   0A73 9B            mov bp, sp
1014   0A74 52 05 00      sub sp, 5 ; digits
1015   0A77 52 02 00      sub sp, 2 ; i
1016   0A7A 26 00 00      mov b, 0
1017   0A7D D7            push a
1018   0A7E 11            mov a, b
1019   0A7F 45 FA FF      mov [bp + -6], a ; i
1020   0A82 E4            pop a
1021   0A83             _if15_cond:
1022   0A83 2C 05 00      mov b, [bp + 5] ; num
1023   0A86 D7            push a
1024   0A87 11            mov a, b
1025   0A88 26 00 00      mov b, 0
1026   0A8B B0            cmp a, b
1027   0A8C 0E            lodflgs
1028   0A8D 87 01         and al, %00000001 ; ==
1029   0A8F 22 00         mov ah, 0
1030   0A91 27            mov b, a
1031   0A92 E4            pop a
1032   0A93 C0 00 00      cmp b, 0
1033   0A96 C6 A8 0A      je _if15_exit
1034   0A99             _if15_true:
1035   0A99 26 30 00      mov b, $30
1036   0A9C DD            push bl
1037   0A9D 07 67 0A      call _putchar
1038   0AA0 51 01 00      add sp, 1
1039   0AA3 F9            leave
1040   0AA4 09            ret
1041   0AA5 0A A8 0A      jmp _if15_exit
1042   0AA8             _if15_exit:
1043   0AA8             _while16_cond:
1044   0AA8 2C 05 00      mov b, [bp + 5] ; num
1045   0AAB D7            push a
1046   0AAC 11            mov a, b
1047   0AAD 26 00 00      mov b, 0
1048   0AB0 B0            cmp a, b
1049   0AB1 0E            lodflgs
1050   0AB2 2F            mov bl, al
1051   0AB3 FD 78         mov g, a
1052   0AB5 FD A2 03      shr al, 3
1053   0AB8 FD A4 02      shr bl, 2
1054   0ABB FD 87 01      and bl, %00000001
1055   0ABE 90            xor al, bl
1056   0ABF FD 27         mov b, g
1057   0AC1 FD 87 01      and bl, %00000001
1058   0AC4 8C            or al, bl
1059   0AC5 8F 01         xor al, %00000001 ; > (signed)
1060   0AC7 22 00         mov ah, 0
1061   0AC9 27            mov b, a
1062   0ACA E4            pop a
1063   0ACB C0 00 00      cmp b, 0
1064   0ACE C6 1F 0B      je _while16_exit
1065   0AD1             _while16_block:
1066   0AD1 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
1067   0AD4 2D            mov b, d
1068   0AD5 D7            push a
1069   0AD6 74            mov d, b
1070   0AD7 DA            push d
1071   0AD8 2C FA FF      mov b, [bp + -6] ; i
1072   0ADB E7            pop d
1073   0ADC 10 01 00      mov a, 1
1074   0ADF AC            mul a, b
1075   0AE0 5A            add d, b
1076   0AE1 E4            pop a
1077   0AE2 DA            push d
1078   0AE3 26 30 00      mov b, $30
1079   0AE6 D7            push a
1080   0AE7 11            mov a, b
1081   0AE8 2C 05 00      mov b, [bp + 5] ; num
1082   0AEB D7            push a
1083   0AEC 11            mov a, b
1084   0AED 26 0A 00      mov b, 10
1085   0AF0 AE            div a, b
1086   0AF1 E4            pop a
1087   0AF2 54            add a, b
1088   0AF3 27            mov b, a
1089   0AF4 E4            pop a
1090   0AF5 E7            pop d
1091   0AF6 FD 3E         mov [d], bl
1092   0AF8 2C 05 00      mov b, [bp + 5] ; num
1093   0AFB D7            push a
1094   0AFC 11            mov a, b
1095   0AFD 26 0A 00      mov b, 10
1096   0B00 AE            div a, b
1097   0B01 FD 78         mov g, a
1098   0B03 11            mov a, b
1099   0B04 FD 27         mov b, g
1100   0B06 E4            pop a
1101   0B07 D7            push a
1102   0B08 11            mov a, b
1103   0B09 45 05 00      mov [bp + 5], a ; num
1104   0B0C E4            pop a
1105   0B0D 2C FA FF      mov b, [bp + -6] ; i
1106   0B10 D7            push a
1107   0B11 11            mov a, b
1108   0B12 FD 77         inc b
1109   0B14 D7            push a
1110   0B15 11            mov a, b
1111   0B16 45 FA FF      mov [bp + -6], a ; i
1112   0B19 E4            pop a
1113   0B1A 27            mov b, a
1114   0B1B E4            pop a
1115   0B1C 0A A8 0A      jmp _while16_cond
1116   0B1F             _while16_exit:
1117   0B1F             _while17_cond:
1118   0B1F 2C FA FF      mov b, [bp + -6] ; i
1119   0B22 D7            push a
1120   0B23 11            mov a, b
1121   0B24 26 00 00      mov b, 0
1122   0B27 B0            cmp a, b
1123   0B28 0E            lodflgs
1124   0B29 2F            mov bl, al
1125   0B2A FD 78         mov g, a
1126   0B2C FD A2 03      shr al, 3
1127   0B2F FD A4 02      shr bl, 2
1128   0B32 FD 87 01      and bl, %00000001
1129   0B35 90            xor al, bl
1130   0B36 FD 27         mov b, g
1131   0B38 FD 87 01      and bl, %00000001
1132   0B3B 8C            or al, bl
1133   0B3C 8F 01         xor al, %00000001 ; > (signed)
1134   0B3E 22 00         mov ah, 0
1135   0B40 27            mov b, a
1136   0B41 E4            pop a
1137   0B42 C0 00 00      cmp b, 0
1138   0B45 C6 75 0B      je _while17_exit
1139   0B48             _while17_block:
1140   0B48 2C FA FF      mov b, [bp + -6] ; i
1141   0B4B D7            push a
1142   0B4C 11            mov a, b
1143   0B4D FD 7D         dec b
1144   0B4F D7            push a
1145   0B50 11            mov a, b
1146   0B51 45 FA FF      mov [bp + -6], a ; i
1147   0B54 E4            pop a
1148   0B55 27            mov b, a
1149   0B56 E4            pop a
1150   0B57 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
1151   0B5A 2D            mov b, d
1152   0B5B D7            push a
1153   0B5C 74            mov d, b
1154   0B5D DA            push d
1155   0B5E 2C FA FF      mov b, [bp + -6] ; i
1156   0B61 E7            pop d
1157   0B62 10 01 00      mov a, 1
1158   0B65 AC            mul a, b
1159   0B66 5A            add d, b
1160   0B67 E4            pop a
1161   0B68 32            mov bl, [d]
1162   0B69 A7 00         mov bh, 0
1163   0B6B DD            push bl
1164   0B6C 07 67 0A      call _putchar
1165   0B6F 51 01 00      add sp, 1
1166   0B72 0A 1F 0B      jmp _while17_cond
1167   0B75             _while17_exit:
1168   0B75 F9            leave
1169   0B76 09            ret
1170   0B77             ; --- END TEXT BLOCK
1171   0B77             
1172   0B77             ; --- BEGIN DATA BLOCK
1173   0B77 00 00 00 00 __grid_data: .fill 1600, 0
1173   0B7B 00 00 00 00 
1173   0B7F 00 00 00 00 
1173   0B83 00 00 00 00 
1173   0B87 00 00 00 00 
1173   0B8B 00 00 00 00 
1173   0B8F 00 00 00 00 
1173   0B93 00 00 00 00 
1173   0B97 00 00 00 00 
1173   0B9B 00 00 00 00 
1173   0B9F 00 00 00 00 
1173   0BA3 00 00 00 00 
1173   0BA7 00 00 00 00 
1173   0BAB 00 00 00 00 
1173   0BAF 00 00 00 00 
1173   0BB3 00 00 00 00 
1173   0BB7 00 00 00 00 
1173   0BBB 00 00 00 00 
1173   0BBF 00 00 00 00 
1173   0BC3 00 00 00 00 
1173   0BC7 00 00 00 00 
1173   0BCB 00 00 00 00 
1173   0BCF 00 00 00 00 
1173   0BD3 00 00 00 00 
1173   0BD7 00 00 00 00 
1173   0BDB 00 00 00 00 
1173   0BDF 00 00 00 00 
1173   0BE3 00 00 00 00 
1173   0BE7 00 00 00 00 
1173   0BEB 00 00 00 00 
1173   0BEF 00 00 00 00 
1173   0BF3 00 00 00 00 
1173   0BF7 00 00 00 00 
1173   0BFB 00 00 00 00 
1173   0BFF 00 00 00 00 
1173   0C03 00 00 00 00 
1173   0C07 00 00 00 00 
1173   0C0B 00 00 00 00 
1173   0C0F 00 00 00 00 
1173   0C13 00 00 00 00 
1173   0C17 00 00 00 00 
1173   0C1B 00 00 00 00 
1173   0C1F 00 00 00 00 
1173   0C23 00 00 00 00 
1173   0C27 00 00 00 00 
1173   0C2B 00 00 00 00 
1173   0C2F 00 00 00 00 
1173   0C33 00 00 00 00 
1173   0C37 00 00 00 00 
1173   0C3B 00 00 00 00 
1173   0C3F 00 00 00 00 
1173   0C43 00 00 00 00 
1173   0C47 00 00 00 00 
1173   0C4B 00 00 00 00 
1173   0C4F 00 00 00 00 
1173   0C53 00 00 00 00 
1173   0C57 00 00 00 00 
1173   0C5B 00 00 00 00 
1173   0C5F 00 00 00 00 
1173   0C63 00 00 00 00 
1173   0C67 00 00 00 00 
1173   0C6B 00 00 00 00 
1173   0C6F 00 00 00 00 
1173   0C73 00 00 00 00 
1173   0C77 00 00 00 00 
1173   0C7B 00 00 00 00 
1173   0C7F 00 00 00 00 
1173   0C83 00 00 00 00 
1173   0C87 00 00 00 00 
1173   0C8B 00 00 00 00 
1173   0C8F 00 00 00 00 
1173   0C93 00 00 00 00 
1173   0C97 00 00 00 00 
1173   0C9B 00 00 00 00 
1173   0C9F 00 00 00 00 
1173   0CA3 00 00 00 00 
1173   0CA7 00 00 00 00 
1173   0CAB 00 00 00 00 
1173   0CAF 00 00 00 00 
1173   0CB3 00 00 00 00 
1173   0CB7 00 00 00 00 
1173   0CBB 00 00 00 00 
1173   0CBF 00 00 00 00 
1173   0CC3 00 00 00 00 
1173   0CC7 00 00 00 00 
1173   0CCB 00 00 00 00 
1173   0CCF 00 00 00 00 
1173   0CD3 00 00 00 00 
1173   0CD7 00 00 00 00 
1173   0CDB 00 00 00 00 
1173   0CDF 00 00 00 00 
1173   0CE3 00 00 00 00 
1173   0CE7 00 00 00 00 
1173   0CEB 00 00 00 00 
1173   0CEF 00 00 00 00 
1173   0CF3 00 00 00 00 
1173   0CF7 00 00 00 00 
1173   0CFB 00 00 00 00 
1173   0CFF 00 00 00 00 
1173   0D03 00 00 00 00 
1173   0D07 00 00 00 00 
1173   0D0B 00 00 00 00 
1173   0D0F 00 00 00 00 
1173   0D13 00 00 00 00 
1173   0D17 00 00 00 00 
1173   0D1B 00 00 00 00 
1173   0D1F 00 00 00 00 
1173   0D23 00 00 00 00 
1173   0D27 00 00 00 00 
1173   0D2B 00 00 00 00 
1173   0D2F 00 00 00 00 
1173   0D33 00 00 00 00 
1173   0D37 00 00 00 00 
1173   0D3B 00 00 00 00 
1173   0D3F 00 00 00 00 
1173   0D43 00 00 00 00 
1173   0D47 00 00 00 00 
1173   0D4B 00 00 00 00 
1173   0D4F 00 00 00 00 
1173   0D53 00 00 00 00 
1173   0D57 00 00 00 00 
1173   0D5B 00 00 00 00 
1173   0D5F 00 00 00 00 
1173   0D63 00 00 00 00 
1173   0D67 00 00 00 00 
1173   0D6B 00 00 00 00 
1173   0D6F 00 00 00 00 
1173   0D73 00 00 00 00 
1173   0D77 00 00 00 00 
1173   0D7B 00 00 00 00 
1173   0D7F 00 00 00 00 
1173   0D83 00 00 00 00 
1173   0D87 00 00 00 00 
1173   0D8B 00 00 00 00 
1173   0D8F 00 00 00 00 
1173   0D93 00 00 00 00 
1173   0D97 00 00 00 00 
1173   0D9B 00 00 00 00 
1173   0D9F 00 00 00 00 
1173   0DA3 00 00 00 00 
1173   0DA7 00 00 00 00 
1173   0DAB 00 00 00 00 
1173   0DAF 00 00 00 00 
1173   0DB3 00 00 00 00 
1173   0DB7 00 00 00 00 
1173   0DBB 00 00 00 00 
1173   0DBF 00 00 00 00 
1173   0DC3 00 00 00 00 
1173   0DC7 00 00 00 00 
1173   0DCB 00 00 00 00 
1173   0DCF 00 00 00 00 
1173   0DD3 00 00 00 00 
1173   0DD7 00 00 00 00 
1173   0DDB 00 00 00 00 
1173   0DDF 00 00 00 00 
1173   0DE3 00 00 00 00 
1173   0DE7 00 00 00 00 
1173   0DEB 00 00 00 00 
1173   0DEF 00 00 00 00 
1173   0DF3 00 00 00 00 
1173   0DF7 00 00 00 00 
1173   0DFB 00 00 00 00 
1173   0DFF 00 00 00 00 
1173   0E03 00 00 00 00 
1173   0E07 00 00 00 00 
1173   0E0B 00 00 00 00 
1173   0E0F 00 00 00 00 
1173   0E13 00 00 00 00 
1173   0E17 00 00 00 00 
1173   0E1B 00 00 00 00 
1173   0E1F 00 00 00 00 
1173   0E23 00 00 00 00 
1173   0E27 00 00 00 00 
1173   0E2B 00 00 00 00 
1173   0E2F 00 00 00 00 
1173   0E33 00 00 00 00 
1173   0E37 00 00 00 00 
1173   0E3B 00 00 00 00 
1173   0E3F 00 00 00 00 
1173   0E43 00 00 00 00 
1173   0E47 00 00 00 00 
1173   0E4B 00 00 00 00 
1173   0E4F 00 00 00 00 
1173   0E53 00 00 00 00 
1173   0E57 00 00 00 00 
1173   0E5B 00 00 00 00 
1173   0E5F 00 00 00 00 
1173   0E63 00 00 00 00 
1173   0E67 00 00 00 00 
1173   0E6B 00 00 00 00 
1173   0E6F 00 00 00 00 
1173   0E73 00 00 00 00 
1173   0E77 00 00 00 00 
1173   0E7B 00 00 00 00 
1173   0E7F 00 00 00 00 
1173   0E83 00 00 00 00 
1173   0E87 00 00 00 00 
1173   0E8B 00 00 00 00 
1173   0E8F 00 00 00 00 
1173   0E93 00 00 00 00 
1173   0E97 00 00 00 00 
1173   0E9B 00 00 00 00 
1173   0E9F 00 00 00 00 
1173   0EA3 00 00 00 00 
1173   0EA7 00 00 00 00 
1173   0EAB 00 00 00 00 
1173   0EAF 00 00 00 00 
1173   0EB3 00 00 00 00 
1173   0EB7 00 00 00 00 
1173   0EBB 00 00 00 00 
1173   0EBF 00 00 00 00 
1173   0EC3 00 00 00 00 
1173   0EC7 00 00 00 00 
1173   0ECB 00 00 00 00 
1173   0ECF 00 00 00 00 
1173   0ED3 00 00 00 00 
1173   0ED7 00 00 00 00 
1173   0EDB 00 00 00 00 
1173   0EDF 00 00 00 00 
1173   0EE3 00 00 00 00 
1173   0EE7 00 00 00 00 
1173   0EEB 00 00 00 00 
1173   0EEF 00 00 00 00 
1173   0EF3 00 00 00 00 
1173   0EF7 00 00 00 00 
1173   0EFB 00 00 00 00 
1173   0EFF 00 00 00 00 
1173   0F03 00 00 00 00 
1173   0F07 00 00 00 00 
1173   0F0B 00 00 00 00 
1173   0F0F 00 00 00 00 
1173   0F13 00 00 00 00 
1173   0F17 00 00 00 00 
1173   0F1B 00 00 00 00 
1173   0F1F 00 00 00 00 
1173   0F23 00 00 00 00 
1173   0F27 00 00 00 00 
1173   0F2B 00 00 00 00 
1173   0F2F 00 00 00 00 
1173   0F33 00 00 00 00 
1173   0F37 00 00 00 00 
1173   0F3B 00 00 00 00 
1173   0F3F 00 00 00 00 
1173   0F43 00 00 00 00 
1173   0F47 00 00 00 00 
1173   0F4B 00 00 00 00 
1173   0F4F 00 00 00 00 
1173   0F53 00 00 00 00 
1173   0F57 00 00 00 00 
1173   0F5B 00 00 00 00 
1173   0F5F 00 00 00 00 
1173   0F63 00 00 00 00 
1173   0F67 00 00 00 00 
1173   0F6B 00 00 00 00 
1173   0F6F 00 00 00 00 
1173   0F73 00 00 00 00 
1173   0F77 00 00 00 00 
1173   0F7B 00 00 00 00 
1173   0F7F 00 00 00 00 
1173   0F83 00 00 00 00 
1173   0F87 00 00 00 00 
1173   0F8B 00 00 00 00 
1173   0F8F 00 00 00 00 
1173   0F93 00 00 00 00 
1173   0F97 00 00 00 00 
1173   0F9B 00 00 00 00 
1173   0F9F 00 00 00 00 
1173   0FA3 00 00 00 00 
1173   0FA7 00 00 00 00 
1173   0FAB 00 00 00 00 
1173   0FAF 00 00 00 00 
1173   0FB3 00 00 00 00 
1173   0FB7 00 00 00 00 
1173   0FBB 00 00 00 00 
1173   0FBF 00 00 00 00 
1173   0FC3 00 00 00 00 
1173   0FC7 00 00 00 00 
1173   0FCB 00 00 00 00 
1173   0FCF 00 00 00 00 
1173   0FD3 00 00 00 00 
1173   0FD7 00 00 00 00 
1173   0FDB 00 00 00 00 
1173   0FDF 00 00 00 00 
1173   0FE3 00 00 00 00 
1173   0FE7 00 00 00 00 
1173   0FEB 00 00 00 00 
1173   0FEF 00 00 00 00 
1173   0FF3 00 00 00 00 
1173   0FF7 00 00 00 00 
1173   0FFB 00 00 00 00 
1173   0FFF 00 00 00 00 
1173   1003 00 00 00 00 
1173   1007 00 00 00 00 
1173   100B 00 00 00 00 
1173   100F 00 00 00 00 
1173   1013 00 00 00 00 
1173   1017 00 00 00 00 
1173   101B 00 00 00 00 
1173   101F 00 00 00 00 
1173   1023 00 00 00 00 
1173   1027 00 00 00 00 
1173   102B 00 00 00 00 
1173   102F 00 00 00 00 
1173   1033 00 00 00 00 
1173   1037 00 00 00 00 
1173   103B 00 00 00 00 
1173   103F 00 00 00 00 
1173   1043 00 00 00 00 
1173   1047 00 00 00 00 
1173   104B 00 00 00 00 
1173   104F 00 00 00 00 
1173   1053 00 00 00 00 
1173   1057 00 00 00 00 
1173   105B 00 00 00 00 
1173   105F 00 00 00 00 
1173   1063 00 00 00 00 
1173   1067 00 00 00 00 
1173   106B 00 00 00 00 
1173   106F 00 00 00 00 
1173   1073 00 00 00 00 
1173   1077 00 00 00 00 
1173   107B 00 00 00 00 
1173   107F 00 00 00 00 
1173   1083 00 00 00 00 
1173   1087 00 00 00 00 
1173   108B 00 00 00 00 
1173   108F 00 00 00 00 
1173   1093 00 00 00 00 
1173   1097 00 00 00 00 
1173   109B 00 00 00 00 
1173   109F 00 00 00 00 
1173   10A3 00 00 00 00 
1173   10A7 00 00 00 00 
1173   10AB 00 00 00 00 
1173   10AF 00 00 00 00 
1173   10B3 00 00 00 00 
1173   10B7 00 00 00 00 
1173   10BB 00 00 00 00 
1173   10BF 00 00 00 00 
1173   10C3 00 00 00 00 
1173   10C7 00 00 00 00 
1173   10CB 00 00 00 00 
1173   10CF 00 00 00 00 
1173   10D3 00 00 00 00 
1173   10D7 00 00 00 00 
1173   10DB 00 00 00 00 
1173   10DF 00 00 00 00 
1173   10E3 00 00 00 00 
1173   10E7 00 00 00 00 
1173   10EB 00 00 00 00 
1173   10EF 00 00 00 00 
1173   10F3 00 00 00 00 
1173   10F7 00 00 00 00 
1173   10FB 00 00 00 00 
1173   10FF 00 00 00 00 
1173   1103 00 00 00 00 
1173   1107 00 00 00 00 
1173   110B 00 00 00 00 
1173   110F 00 00 00 00 
1173   1113 00 00 00 00 
1173   1117 00 00 00 00 
1173   111B 00 00 00 00 
1173   111F 00 00 00 00 
1173   1123 00 00 00 00 
1173   1127 00 00 00 00 
1173   112B 00 00 00 00 
1173   112F 00 00 00 00 
1173   1133 00 00 00 00 
1173   1137 00 00 00 00 
1173   113B 00 00 00 00 
1173   113F 00 00 00 00 
1173   1143 00 00 00 00 
1173   1147 00 00 00 00 
1173   114B 00 00 00 00 
1173   114F 00 00 00 00 
1173   1153 00 00 00 00 
1173   1157 00 00 00 00 
1173   115B 00 00 00 00 
1173   115F 00 00 00 00 
1173   1163 00 00 00 00 
1173   1167 00 00 00 00 
1173   116B 00 00 00 00 
1173   116F 00 00 00 00 
1173   1173 00 00 00 00 
1173   1177 00 00 00 00 
1173   117B 00 00 00 00 
1173   117F 00 00 00 00 
1173   1183 00 00 00 00 
1173   1187 00 00 00 00 
1173   118B 00 00 00 00 
1173   118F 00 00 00 00 
1173   1193 00 00 00 00 
1173   1197 00 00 00 00 
1173   119B 00 00 00 00 
1173   119F 00 00 00 00 
1173   11A3 00 00 00 00 
1173   11A7 00 00 00 00 
1173   11AB 00 00 00 00 
1173   11AF 00 00 00 00 
1173   11B3 00 00 00 00 
1174   11B7 77 0B       __grid: .dw __grid_data
1175   11B9 00 00 00 00 __new_grid_data: .fill 1600, 0
1175   11BD 00 00 00 00 
1175   11C1 00 00 00 00 
1175   11C5 00 00 00 00 
1175   11C9 00 00 00 00 
1175   11CD 00 00 00 00 
1175   11D1 00 00 00 00 
1175   11D5 00 00 00 00 
1175   11D9 00 00 00 00 
1175   11DD 00 00 00 00 
1175   11E1 00 00 00 00 
1175   11E5 00 00 00 00 
1175   11E9 00 00 00 00 
1175   11ED 00 00 00 00 
1175   11F1 00 00 00 00 
1175   11F5 00 00 00 00 
1175   11F9 00 00 00 00 
1175   11FD 00 00 00 00 
1175   1201 00 00 00 00 
1175   1205 00 00 00 00 
1175   1209 00 00 00 00 
1175   120D 00 00 00 00 
1175   1211 00 00 00 00 
1175   1215 00 00 00 00 
1175   1219 00 00 00 00 
1175   121D 00 00 00 00 
1175   1221 00 00 00 00 
1175   1225 00 00 00 00 
1175   1229 00 00 00 00 
1175   122D 00 00 00 00 
1175   1231 00 00 00 00 
1175   1235 00 00 00 00 
1175   1239 00 00 00 00 
1175   123D 00 00 00 00 
1175   1241 00 00 00 00 
1175   1245 00 00 00 00 
1175   1249 00 00 00 00 
1175   124D 00 00 00 00 
1175   1251 00 00 00 00 
1175   1255 00 00 00 00 
1175   1259 00 00 00 00 
1175   125D 00 00 00 00 
1175   1261 00 00 00 00 
1175   1265 00 00 00 00 
1175   1269 00 00 00 00 
1175   126D 00 00 00 00 
1175   1271 00 00 00 00 
1175   1275 00 00 00 00 
1175   1279 00 00 00 00 
1175   127D 00 00 00 00 
1175   1281 00 00 00 00 
1175   1285 00 00 00 00 
1175   1289 00 00 00 00 
1175   128D 00 00 00 00 
1175   1291 00 00 00 00 
1175   1295 00 00 00 00 
1175   1299 00 00 00 00 
1175   129D 00 00 00 00 
1175   12A1 00 00 00 00 
1175   12A5 00 00 00 00 
1175   12A9 00 00 00 00 
1175   12AD 00 00 00 00 
1175   12B1 00 00 00 00 
1175   12B5 00 00 00 00 
1175   12B9 00 00 00 00 
1175   12BD 00 00 00 00 
1175   12C1 00 00 00 00 
1175   12C5 00 00 00 00 
1175   12C9 00 00 00 00 
1175   12CD 00 00 00 00 
1175   12D1 00 00 00 00 
1175   12D5 00 00 00 00 
1175   12D9 00 00 00 00 
1175   12DD 00 00 00 00 
1175   12E1 00 00 00 00 
1175   12E5 00 00 00 00 
1175   12E9 00 00 00 00 
1175   12ED 00 00 00 00 
1175   12F1 00 00 00 00 
1175   12F5 00 00 00 00 
1175   12F9 00 00 00 00 
1175   12FD 00 00 00 00 
1175   1301 00 00 00 00 
1175   1305 00 00 00 00 
1175   1309 00 00 00 00 
1175   130D 00 00 00 00 
1175   1311 00 00 00 00 
1175   1315 00 00 00 00 
1175   1319 00 00 00 00 
1175   131D 00 00 00 00 
1175   1321 00 00 00 00 
1175   1325 00 00 00 00 
1175   1329 00 00 00 00 
1175   132D 00 00 00 00 
1175   1331 00 00 00 00 
1175   1335 00 00 00 00 
1175   1339 00 00 00 00 
1175   133D 00 00 00 00 
1175   1341 00 00 00 00 
1175   1345 00 00 00 00 
1175   1349 00 00 00 00 
1175   134D 00 00 00 00 
1175   1351 00 00 00 00 
1175   1355 00 00 00 00 
1175   1359 00 00 00 00 
1175   135D 00 00 00 00 
1175   1361 00 00 00 00 
1175   1365 00 00 00 00 
1175   1369 00 00 00 00 
1175   136D 00 00 00 00 
1175   1371 00 00 00 00 
1175   1375 00 00 00 00 
1175   1379 00 00 00 00 
1175   137D 00 00 00 00 
1175   1381 00 00 00 00 
1175   1385 00 00 00 00 
1175   1389 00 00 00 00 
1175   138D 00 00 00 00 
1175   1391 00 00 00 00 
1175   1395 00 00 00 00 
1175   1399 00 00 00 00 
1175   139D 00 00 00 00 
1175   13A1 00 00 00 00 
1175   13A5 00 00 00 00 
1175   13A9 00 00 00 00 
1175   13AD 00 00 00 00 
1175   13B1 00 00 00 00 
1175   13B5 00 00 00 00 
1175   13B9 00 00 00 00 
1175   13BD 00 00 00 00 
1175   13C1 00 00 00 00 
1175   13C5 00 00 00 00 
1175   13C9 00 00 00 00 
1175   13CD 00 00 00 00 
1175   13D1 00 00 00 00 
1175   13D5 00 00 00 00 
1175   13D9 00 00 00 00 
1175   13DD 00 00 00 00 
1175   13E1 00 00 00 00 
1175   13E5 00 00 00 00 
1175   13E9 00 00 00 00 
1175   13ED 00 00 00 00 
1175   13F1 00 00 00 00 
1175   13F5 00 00 00 00 
1175   13F9 00 00 00 00 
1175   13FD 00 00 00 00 
1175   1401 00 00 00 00 
1175   1405 00 00 00 00 
1175   1409 00 00 00 00 
1175   140D 00 00 00 00 
1175   1411 00 00 00 00 
1175   1415 00 00 00 00 
1175   1419 00 00 00 00 
1175   141D 00 00 00 00 
1175   1421 00 00 00 00 
1175   1425 00 00 00 00 
1175   1429 00 00 00 00 
1175   142D 00 00 00 00 
1175   1431 00 00 00 00 
1175   1435 00 00 00 00 
1175   1439 00 00 00 00 
1175   143D 00 00 00 00 
1175   1441 00 00 00 00 
1175   1445 00 00 00 00 
1175   1449 00 00 00 00 
1175   144D 00 00 00 00 
1175   1451 00 00 00 00 
1175   1455 00 00 00 00 
1175   1459 00 00 00 00 
1175   145D 00 00 00 00 
1175   1461 00 00 00 00 
1175   1465 00 00 00 00 
1175   1469 00 00 00 00 
1175   146D 00 00 00 00 
1175   1471 00 00 00 00 
1175   1475 00 00 00 00 
1175   1479 00 00 00 00 
1175   147D 00 00 00 00 
1175   1481 00 00 00 00 
1175   1485 00 00 00 00 
1175   1489 00 00 00 00 
1175   148D 00 00 00 00 
1175   1491 00 00 00 00 
1175   1495 00 00 00 00 
1175   1499 00 00 00 00 
1175   149D 00 00 00 00 
1175   14A1 00 00 00 00 
1175   14A5 00 00 00 00 
1175   14A9 00 00 00 00 
1175   14AD 00 00 00 00 
1175   14B1 00 00 00 00 
1175   14B5 00 00 00 00 
1175   14B9 00 00 00 00 
1175   14BD 00 00 00 00 
1175   14C1 00 00 00 00 
1175   14C5 00 00 00 00 
1175   14C9 00 00 00 00 
1175   14CD 00 00 00 00 
1175   14D1 00 00 00 00 
1175   14D5 00 00 00 00 
1175   14D9 00 00 00 00 
1175   14DD 00 00 00 00 
1175   14E1 00 00 00 00 
1175   14E5 00 00 00 00 
1175   14E9 00 00 00 00 
1175   14ED 00 00 00 00 
1175   14F1 00 00 00 00 
1175   14F5 00 00 00 00 
1175   14F9 00 00 00 00 
1175   14FD 00 00 00 00 
1175   1501 00 00 00 00 
1175   1505 00 00 00 00 
1175   1509 00 00 00 00 
1175   150D 00 00 00 00 
1175   1511 00 00 00 00 
1175   1515 00 00 00 00 
1175   1519 00 00 00 00 
1175   151D 00 00 00 00 
1175   1521 00 00 00 00 
1175   1525 00 00 00 00 
1175   1529 00 00 00 00 
1175   152D 00 00 00 00 
1175   1531 00 00 00 00 
1175   1535 00 00 00 00 
1175   1539 00 00 00 00 
1175   153D 00 00 00 00 
1175   1541 00 00 00 00 
1175   1545 00 00 00 00 
1175   1549 00 00 00 00 
1175   154D 00 00 00 00 
1175   1551 00 00 00 00 
1175   1555 00 00 00 00 
1175   1559 00 00 00 00 
1175   155D 00 00 00 00 
1175   1561 00 00 00 00 
1175   1565 00 00 00 00 
1175   1569 00 00 00 00 
1175   156D 00 00 00 00 
1175   1571 00 00 00 00 
1175   1575 00 00 00 00 
1175   1579 00 00 00 00 
1175   157D 00 00 00 00 
1175   1581 00 00 00 00 
1175   1585 00 00 00 00 
1175   1589 00 00 00 00 
1175   158D 00 00 00 00 
1175   1591 00 00 00 00 
1175   1595 00 00 00 00 
1175   1599 00 00 00 00 
1175   159D 00 00 00 00 
1175   15A1 00 00 00 00 
1175   15A5 00 00 00 00 
1175   15A9 00 00 00 00 
1175   15AD 00 00 00 00 
1175   15B1 00 00 00 00 
1175   15B5 00 00 00 00 
1175   15B9 00 00 00 00 
1175   15BD 00 00 00 00 
1175   15C1 00 00 00 00 
1175   15C5 00 00 00 00 
1175   15C9 00 00 00 00 
1175   15CD 00 00 00 00 
1175   15D1 00 00 00 00 
1175   15D5 00 00 00 00 
1175   15D9 00 00 00 00 
1175   15DD 00 00 00 00 
1175   15E1 00 00 00 00 
1175   15E5 00 00 00 00 
1175   15E9 00 00 00 00 
1175   15ED 00 00 00 00 
1175   15F1 00 00 00 00 
1175   15F5 00 00 00 00 
1175   15F9 00 00 00 00 
1175   15FD 00 00 00 00 
1175   1601 00 00 00 00 
1175   1605 00 00 00 00 
1175   1609 00 00 00 00 
1175   160D 00 00 00 00 
1175   1611 00 00 00 00 
1175   1615 00 00 00 00 
1175   1619 00 00 00 00 
1175   161D 00 00 00 00 
1175   1621 00 00 00 00 
1175   1625 00 00 00 00 
1175   1629 00 00 00 00 
1175   162D 00 00 00 00 
1175   1631 00 00 00 00 
1175   1635 00 00 00 00 
1175   1639 00 00 00 00 
1175   163D 00 00 00 00 
1175   1641 00 00 00 00 
1175   1645 00 00 00 00 
1175   1649 00 00 00 00 
1175   164D 00 00 00 00 
1175   1651 00 00 00 00 
1175   1655 00 00 00 00 
1175   1659 00 00 00 00 
1175   165D 00 00 00 00 
1175   1661 00 00 00 00 
1175   1665 00 00 00 00 
1175   1669 00 00 00 00 
1175   166D 00 00 00 00 
1175   1671 00 00 00 00 
1175   1675 00 00 00 00 
1175   1679 00 00 00 00 
1175   167D 00 00 00 00 
1175   1681 00 00 00 00 
1175   1685 00 00 00 00 
1175   1689 00 00 00 00 
1175   168D 00 00 00 00 
1175   1691 00 00 00 00 
1175   1695 00 00 00 00 
1175   1699 00 00 00 00 
1175   169D 00 00 00 00 
1175   16A1 00 00 00 00 
1175   16A5 00 00 00 00 
1175   16A9 00 00 00 00 
1175   16AD 00 00 00 00 
1175   16B1 00 00 00 00 
1175   16B5 00 00 00 00 
1175   16B9 00 00 00 00 
1175   16BD 00 00 00 00 
1175   16C1 00 00 00 00 
1175   16C5 00 00 00 00 
1175   16C9 00 00 00 00 
1175   16CD 00 00 00 00 
1175   16D1 00 00 00 00 
1175   16D5 00 00 00 00 
1175   16D9 00 00 00 00 
1175   16DD 00 00 00 00 
1175   16E1 00 00 00 00 
1175   16E5 00 00 00 00 
1175   16E9 00 00 00 00 
1175   16ED 00 00 00 00 
1175   16F1 00 00 00 00 
1175   16F5 00 00 00 00 
1175   16F9 00 00 00 00 
1175   16FD 00 00 00 00 
1175   1701 00 00 00 00 
1175   1705 00 00 00 00 
1175   1709 00 00 00 00 
1175   170D 00 00 00 00 
1175   1711 00 00 00 00 
1175   1715 00 00 00 00 
1175   1719 00 00 00 00 
1175   171D 00 00 00 00 
1175   1721 00 00 00 00 
1175   1725 00 00 00 00 
1175   1729 00 00 00 00 
1175   172D 00 00 00 00 
1175   1731 00 00 00 00 
1175   1735 00 00 00 00 
1175   1739 00 00 00 00 
1175   173D 00 00 00 00 
1175   1741 00 00 00 00 
1175   1745 00 00 00 00 
1175   1749 00 00 00 00 
1175   174D 00 00 00 00 
1175   1751 00 00 00 00 
1175   1755 00 00 00 00 
1175   1759 00 00 00 00 
1175   175D 00 00 00 00 
1175   1761 00 00 00 00 
1175   1765 00 00 00 00 
1175   1769 00 00 00 00 
1175   176D 00 00 00 00 
1175   1771 00 00 00 00 
1175   1775 00 00 00 00 
1175   1779 00 00 00 00 
1175   177D 00 00 00 00 
1175   1781 00 00 00 00 
1175   1785 00 00 00 00 
1175   1789 00 00 00 00 
1175   178D 00 00 00 00 
1175   1791 00 00 00 00 
1175   1795 00 00 00 00 
1175   1799 00 00 00 00 
1175   179D 00 00 00 00 
1175   17A1 00 00 00 00 
1175   17A5 00 00 00 00 
1175   17A9 00 00 00 00 
1175   17AD 00 00 00 00 
1175   17B1 00 00 00 00 
1175   17B5 00 00 00 00 
1175   17B9 00 00 00 00 
1175   17BD 00 00 00 00 
1175   17C1 00 00 00 00 
1175   17C5 00 00 00 00 
1175   17C9 00 00 00 00 
1175   17CD 00 00 00 00 
1175   17D1 00 00 00 00 
1175   17D5 00 00 00 00 
1175   17D9 00 00 00 00 
1175   17DD 00 00 00 00 
1175   17E1 00 00 00 00 
1175   17E5 00 00 00 00 
1175   17E9 00 00 00 00 
1175   17ED 00 00 00 00 
1175   17F1 00 00 00 00 
1175   17F5 00 00 00 00 
1176   17F9 B9 11       __new_grid: .dw __new_grid_data
1177   17FB             ; --- END DATA BLOCK
1178   17FB             
1179   17FB             ; --- BEGIN INCLUDE BLOCK
1180   17FB             .include "lib/stdio.asm"
0001+  17FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  17FB             ; stdio.s
0003+  17FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  17FB             .include "lib/string.asm"
0001++ 17FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 17FB             ; string.s
0003++ 17FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 17FB             
0005++ 17FB             
0006++ 17FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 17FB             ; strrev
0008++ 17FB             ; reverse a string
0009++ 17FB             ; D = string address
0010++ 17FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 17FB             ; 01234
0012++ 17FB             strrev:
0013++ 17FB 4B          	pusha
0014++ 17FC 07 42 18    	call strlen	; length in C
0015++ 17FF 12          	mov a, c
0016++ 1800 AF 01 00    	cmp a, 1
0017++ 1803 D0 1D 18    	jleu strrev_end	; check string length. string len must be > 1
0018++ 1806 7D          	dec a
0019++ 1807 FD 4E       	mov si, d	; beginning of string
0020++ 1809 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 180B 59          	add d, a	; end of string
0022++ 180C 12          	mov a, c
0023++ 180D FD 9B       	shr a		; divide by 2
0024++ 180F 39          	mov c, a	; C now counts the steps
0025++ 1810             strrev_L0:
0026++ 1810 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1811 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1812 3E          	mov [d], al	; store left char into right side
0029++ 1813 1B          	mov al, bl
0030++ 1814 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1815 7E          	dec c
0032++ 1816 7F          	dec d
0033++ 1817 C2 00 00    	cmp c, 0
0034++ 181A C7 10 18    	jne strrev_L0
0035++ 181D             strrev_end:
0036++ 181D 4C          	popa
0037++ 181E 09          	ret
0038++ 181F             	
0039++ 181F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 181F             ; strchr
0041++ 181F             ; search string in D for char in AL
0042++ 181F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 181F             strchr:
0044++ 181F             strchr_L0:
0045++ 181F 32          	mov bl, [d]
0046++ 1820 C1 00       	cmp bl, 0
0047++ 1822 C6 2D 18    	je strchr_end
0048++ 1825 BA          	cmp al, bl
0049++ 1826 C6 2D 18    	je strchr_end
0050++ 1829 79          	inc d
0051++ 182A 0A 1F 18    	jmp strchr_L0
0052++ 182D             strchr_end:
0053++ 182D 1B          	mov al, bl
0054++ 182E 09          	ret
0055++ 182F             
0056++ 182F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 182F             ; strstr
0058++ 182F             ; find sub-string
0059++ 182F             ; str1 in SI
0060++ 182F             ; str2 in DI
0061++ 182F             ; SI points to end of source string
0062++ 182F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 182F             strstr:
0064++ 182F DB          	push al
0065++ 1830 DA          	push d
0066++ 1831 E3          	push di
0067++ 1832             strstr_loop:
0068++ 1832 F3          	cmpsb					; compare a byte of the strings
0069++ 1833 C7 3E 18    	jne strstr_ret
0070++ 1836 FC 00 00    	lea d, [di + 0]
0071++ 1839 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 183B C7 32 18    	jne strstr_loop				; equal chars but not at end
0073++ 183E             strstr_ret:
0074++ 183E F0          	pop di
0075++ 183F E7          	pop d
0076++ 1840 E8          	pop al
0077++ 1841 09          	ret
0078++ 1842             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1842             ; length of null terminated string
0080++ 1842             ; result in C
0081++ 1842             ; pointer in D
0082++ 1842             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1842             strlen:
0084++ 1842 DA          	push d
0085++ 1843 38 00 00    	mov c, 0
0086++ 1846             strlen_L1:
0087++ 1846 BD 00       	cmp byte [d], 0
0088++ 1848 C6 50 18    	je strlen_ret
0089++ 184B 79          	inc d
0090++ 184C 78          	inc c
0091++ 184D 0A 46 18    	jmp strlen_L1
0092++ 1850             strlen_ret:
0093++ 1850 E7          	pop d
0094++ 1851 09          	ret
0095++ 1852             
0096++ 1852             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1852             ; STRCMP
0098++ 1852             ; compare two strings
0099++ 1852             ; str1 in SI
0100++ 1852             ; str2 in DI
0101++ 1852             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1852             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1852             strcmp:
0104++ 1852 DB          	push al
0105++ 1853 DA          	push d
0106++ 1854 E3          	push di
0107++ 1855 E2          	push si
0108++ 1856             strcmp_loop:
0109++ 1856 F3          	cmpsb					; compare a byte of the strings
0110++ 1857 C7 62 18    	jne strcmp_ret
0111++ 185A FB FF FF    	lea d, [si +- 1]
0112++ 185D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 185F C7 56 18    	jne strcmp_loop				; equal chars but not at end
0114++ 1862             strcmp_ret:
0115++ 1862 EF          	pop si
0116++ 1863 F0          	pop di
0117++ 1864 E7          	pop d
0118++ 1865 E8          	pop al
0119++ 1866 09          	ret
0120++ 1867             
0121++ 1867             
0122++ 1867             ; STRCPY
0123++ 1867             ; copy null terminated string from SI to DI
0124++ 1867             ; source in SI
0125++ 1867             ; destination in DI
0126++ 1867             strcpy:
0127++ 1867 E2          	push si
0128++ 1868 E3          	push di
0129++ 1869 DB          	push al
0130++ 186A             strcpy_L1:
0131++ 186A F6          	lodsb
0132++ 186B F7          	stosb
0133++ 186C B9 00       	cmp al, 0
0134++ 186E C7 6A 18    	jne strcpy_L1
0135++ 1871             strcpy_end:
0136++ 1871 E8          	pop al
0137++ 1872 F0          	pop di
0138++ 1873 EF          	pop si
0139++ 1874 09          	ret
0140++ 1875             
0141++ 1875             ; STRCAT
0142++ 1875             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1875             ; source in SI
0144++ 1875             ; destination in DI
0145++ 1875             strcat:
0146++ 1875 E2          	push si
0147++ 1876 E3          	push di
0148++ 1877 D7          	push a
0149++ 1878 DA          	push d
0150++ 1879 50          	mov a, di
0151++ 187A 3C          	mov d, a
0152++ 187B             strcat_goto_end_L1:
0153++ 187B BD 00       	cmp byte[d], 0
0154++ 187D C6 84 18    	je strcat_start
0155++ 1880 79          	inc d
0156++ 1881 0A 7B 18    	jmp strcat_goto_end_L1
0157++ 1884             strcat_start:
0158++ 1884 FD 50       	mov di, d
0159++ 1886             strcat_L1:
0160++ 1886 F6          	lodsb
0161++ 1887 F7          	stosb
0162++ 1888 B9 00       	cmp al, 0
0163++ 188A C7 86 18    	jne strcat_L1
0164++ 188D             strcat_end:
0165++ 188D E7          	pop d
0166++ 188E E4          	pop a
0167++ 188F F0          	pop di
0168++ 1890 EF          	pop si
0169++ 1891 09          	ret
0005+  1892             
0006+  1892 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  1896 34 35 36 37 
0006+  189A 38 39 41 42 
0006+  189E 43 44 45 46 
0007+  18A2 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  18A6 1B 5B 48 00 
0008+  18AA             
0009+  18AA 01 00       table_power:.dw 1
0010+  18AC 0A 00       			.dw 10
0011+  18AE 64 00       			.dw 100
0012+  18B0 E8 03       			.dw 1000
0013+  18B2 10 27       			.dw 10000
0014+  18B4             
0015+  18B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  18B4             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  18B4             ; ASCII in BL
0018+  18B4             ; result in AL
0019+  18B4             ; ascii for F = 0100 0110
0020+  18B4             ; ascii for 9 = 0011 1001
0021+  18B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  18B4             hex_ascii_encode:
0023+  18B4 1B          	mov al, bl
0024+  18B5 93 40       	test al, $40				; test if letter or number
0025+  18B7 C7 BD 18    	jnz hex_letter
0026+  18BA 87 0F       	and al, $0F				; get number
0027+  18BC 09          	ret
0028+  18BD             hex_letter:
0029+  18BD 87 0F       	and al, $0F				; get letter
0030+  18BF 6A 09       	add al, 9
0031+  18C1 09          	ret
0032+  18C2             
0033+  18C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  18C2             ; ATOI
0035+  18C2             ; 2 letter hex string in B
0036+  18C2             ; 8bit integer returned in AL
0037+  18C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  18C2             atoi:
0039+  18C2 D8          	push b
0040+  18C3 07 B4 18    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  18C6 30          	mov bl, bh
0042+  18C7 DB          	push al					; save a
0043+  18C8 07 B4 18    	call hex_ascii_encode
0044+  18CB EA          	pop bl	
0045+  18CC FD 9E 04    	shl al, 4
0046+  18CF 8C          	or al, bl
0047+  18D0 E5          	pop b
0048+  18D1 09          	ret	
0049+  18D2             
0050+  18D2             
0051+  18D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  18D2             ; printf
0053+  18D2             ; no need for explanations!
0054+  18D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  18D2             printf:
0056+  18D2 09          	ret
0057+  18D3             
0058+  18D3             
0059+  18D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  18D3             ; scanf
0061+  18D3             ; no need for explanations!
0062+  18D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  18D3             scanf:
0064+  18D3 09          	ret
0065+  18D4             
0066+  18D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  18D4             ; ITOA
0068+  18D4             ; 8bit value in BL
0069+  18D4             ; 2 byte ASCII result in A
0070+  18D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  18D4             itoa:
0072+  18D4 DA          	push d
0073+  18D5 D8          	push b
0074+  18D6 A7 00       	mov bh, 0
0075+  18D8 FD A4 04    	shr bl, 4	
0076+  18DB 74          	mov d, b
0077+  18DC 1F 92 18    	mov al, [d + s_hex_digits]
0078+  18DF 23          	mov ah, al
0079+  18E0             	
0080+  18E0 E5          	pop b
0081+  18E1 D8          	push b
0082+  18E2 A7 00       	mov bh, 0
0083+  18E4 FD 87 0F    	and bl, $0F
0084+  18E7 74          	mov d, b
0085+  18E8 1F 92 18    	mov al, [d + s_hex_digits]
0086+  18EB E5          	pop b
0087+  18EC E7          	pop d
0088+  18ED 09          	ret
0089+  18EE             
0090+  18EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  18EE             ; HEX STRING TO BINARY
0092+  18EE             ; di = destination address
0093+  18EE             ; si = source
0094+  18EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  18EE             hex_to_int:
0096+  18EE             hex_to_int_L1:
0097+  18EE F6          	lodsb					; load from [SI] to AL
0098+  18EF B9 00       	cmp al, 0				; check if ASCII 0
0099+  18F1 C6 FE 18    	jz hex_to_int_ret
0100+  18F4 36          	mov bh, al
0101+  18F5 F6          	lodsb
0102+  18F6 2F          	mov bl, al
0103+  18F7 07 C2 18    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  18FA F7          	stosb					; store AL to [DI]
0105+  18FB 0A EE 18    	jmp hex_to_int_L1
0106+  18FE             hex_to_int_ret:
0107+  18FE 09          	ret		
0108+  18FF             
0109+  18FF             
0110+  18FF             
0111+  18FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  18FF             ; GETCHAR
0113+  18FF             ; char in ah
0114+  18FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  18FF             getchar:
0116+  18FF DB          	push al
0117+  1900             getchar_retry:
0118+  1900 FD 0C       	sti
0119+  1902 19 01       	mov al, 1
0120+  1904 05 03       	syscall sys_io			; receive in AH
0121+  1906 B9 00       	cmp al, 0			; check if any char was receive
0122+  1908 C6 00 19    	je getchar_retry
0123+  190B E8          	pop al
0124+  190C 09          	ret
0125+  190D             
0126+  190D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  190D             ; PUTCHAR
0128+  190D             ; char in ah
0129+  190D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  190D             putchar:
0131+  190D D7          	push a
0132+  190E 19 00       	mov al, 0
0133+  1910 05 03       	syscall sys_io			; char in AH
0134+  1912 E4          	pop a
0135+  1913 09          	ret
0136+  1914             
0137+  1914             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  1914             ;; INPUT A STRING
0139+  1914             ;; terminates with null
0140+  1914             ;; pointer in D
0141+  1914             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  1914             gets:
0143+  1914 D7          	push a
0144+  1915 DA          	push d
0145+  1916             gets_loop:
0146+  1916 FD 0C       	sti
0147+  1918 19 01       	mov al, 1
0148+  191A 05 03       	syscall sys_io			; receive in AH
0149+  191C B9 00       	cmp al, 0				; check error code (AL)
0150+  191E C6 16 19    	je gets_loop			; if no char received, retry
0151+  1921             
0152+  1921 76 1B       	cmp ah, 27
0153+  1923 C6 44 19    	je gets_telnet_escape
0154+  1926 76 0A       	cmp ah, $0A				; LF
0155+  1928 C6 9D 19    	je gets_end
0156+  192B 76 0D       	cmp ah, $0D				; CR
0157+  192D C6 9D 19    	je gets_end
0158+  1930 76 5C       	cmp ah, $5C				; '\\'
0159+  1932 C6 74 19    	je gets_escape
0160+  1935             	
0161+  1935 76 08       	cmp ah, $08			; check for backspace
0162+  1937 C6 40 19    	je gets_backspace
0163+  193A             
0164+  193A 1A          	mov al, ah
0165+  193B 3E          	mov [d], al
0166+  193C 79          	inc d
0167+  193D 0A 16 19    	jmp gets_loop
0168+  1940             gets_backspace:
0169+  1940 7F          	dec d
0170+  1941 0A 16 19    	jmp gets_loop
0171+  1944             gets_telnet_escape:
0172+  1944 FD 0C       	sti
0173+  1946 19 01       	mov al, 1
0174+  1948 05 03       	syscall sys_io				; receive in AH without echo
0175+  194A B9 00       	cmp al, 0					; check error code (AL)
0176+  194C C6 44 19    	je gets_telnet_escape		; if no char received, retry
0177+  194F 76 5B       	cmp ah, '['
0178+  1951 C7 16 19    	jne gets_loop
0179+  1954             gets_telnet_escape_phase2:
0180+  1954 FD 0C       	sti
0181+  1956 19 01       	mov al, 1
0182+  1958 05 03       	syscall sys_io					; receive in AH without echo
0183+  195A B9 00       	cmp al, 0						; check error code (AL)
0184+  195C C6 54 19    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  195F 76 44       	cmp ah, 'D'
0186+  1961 C6 6C 19    	je gets_left_arrow
0187+  1964 76 43       	cmp ah, 'C'
0188+  1966 C6 70 19    	je gets_right_arrow
0189+  1969 0A 16 19    	jmp gets_loop
0190+  196C             gets_left_arrow:
0191+  196C 7F          	dec d
0192+  196D 0A 16 19    	jmp gets_loop
0193+  1970             gets_right_arrow:
0194+  1970 79          	inc d
0195+  1971 0A 16 19    	jmp gets_loop
0196+  1974             gets_escape:
0197+  1974 FD 0C       	sti
0198+  1976 19 01       	mov al, 1
0199+  1978 05 03       	syscall sys_io			; receive in AH
0200+  197A B9 00       	cmp al, 0				; check error code (AL)
0201+  197C C6 74 19    	je gets_escape			; if no char received, retry
0202+  197F 76 6E       	cmp ah, 'n'
0203+  1981 C6 8F 19    	je gets_LF
0204+  1984 76 72       	cmp ah, 'r'
0205+  1986 C6 96 19    	je gets_CR
0206+  1989 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  198A 3E          	mov [d], al
0208+  198B 79          	inc d
0209+  198C 0A 16 19    	jmp gets_loop
0210+  198F             gets_LF:
0211+  198F 19 0A       	mov al, $0A
0212+  1991 3E          	mov [d], al
0213+  1992 79          	inc d
0214+  1993 0A 16 19    	jmp gets_loop
0215+  1996             gets_CR:
0216+  1996 19 0D       	mov al, $0D
0217+  1998 3E          	mov [d], al
0218+  1999 79          	inc d
0219+  199A 0A 16 19    	jmp gets_loop
0220+  199D             gets_end:
0221+  199D 19 00       	mov al, 0
0222+  199F 3E          	mov [d], al				; terminate string
0223+  19A0 E7          	pop d
0224+  19A1 E4          	pop a
0225+  19A2 09          	ret
0226+  19A3             
0227+  19A3             
0228+  19A3             
0229+  19A3             
0230+  19A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  19A3             ;; INPUT TEXT
0232+  19A3             ;; terminated with CTRL+D
0233+  19A3             ;; pointer in D
0234+  19A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  19A3             gettxt:
0236+  19A3 D7          	push a
0237+  19A4 DA          	push d
0238+  19A5             gettxt_loop:
0239+  19A5 19 01       	mov al, 1
0240+  19A7 05 03       	syscall sys_io			; receive in AH
0241+  19A9 B9 00       	cmp al, 0				; check error code (AL)
0242+  19AB C6 A5 19    	je gettxt_loop		; if no char received, retry
0243+  19AE 76 04       	cmp ah, 4			; EOT
0244+  19B0 C6 EE 19    	je gettxt_end
0245+  19B3 76 08       	cmp ah, $08			; check for backspace
0246+  19B5 C6 EA 19    	je gettxt_backspace
0247+  19B8 76 5C       	cmp ah, $5C				; '\\'
0248+  19BA C6 C3 19    	je gettxt_escape
0249+  19BD 1A          	mov al, ah
0250+  19BE 3E          	mov [d], al
0251+  19BF 79          	inc d
0252+  19C0 0A A5 19    	jmp gettxt_loop
0253+  19C3             gettxt_escape:
0254+  19C3 19 01       	mov al, 1
0255+  19C5 05 03       	syscall sys_io			; receive in AH
0256+  19C7 B9 00       	cmp al, 0				; check error code (AL)
0257+  19C9 C6 C3 19    	je gettxt_escape		; if no char received, retry
0258+  19CC 76 6E       	cmp ah, 'n'
0259+  19CE C6 DC 19    	je gettxt_LF
0260+  19D1 76 72       	cmp ah, 'r'
0261+  19D3 C6 E3 19    	je gettxt_CR
0262+  19D6 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  19D7 3E          	mov [d], al
0264+  19D8 79          	inc d
0265+  19D9 0A A5 19    	jmp gettxt_loop
0266+  19DC             gettxt_LF:
0267+  19DC 19 0A       	mov al, $0A
0268+  19DE 3E          	mov [d], al
0269+  19DF 79          	inc d
0270+  19E0 0A A5 19    	jmp gettxt_loop
0271+  19E3             gettxt_CR:
0272+  19E3 19 0D       	mov al, $0D
0273+  19E5 3E          	mov [d], al
0274+  19E6 79          	inc d
0275+  19E7 0A A5 19    	jmp gettxt_loop
0276+  19EA             gettxt_backspace:
0277+  19EA 7F          	dec d
0278+  19EB 0A A5 19    	jmp gettxt_loop
0279+  19EE             gettxt_end:
0280+  19EE 19 00       	mov al, 0
0281+  19F0 3E          	mov [d], al				; terminate string
0282+  19F1 E7          	pop d
0283+  19F2 E4          	pop a
0284+  19F3 09          	ret
0285+  19F4             
0286+  19F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  19F4             ; PRINT NEW LINE
0288+  19F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  19F4             printnl:
0290+  19F4 D7          	push a
0291+  19F5 10 00 0A    	mov a, $0A00
0292+  19F8 05 03       	syscall sys_io
0293+  19FA 10 00 0D    	mov a, $0D00
0294+  19FD 05 03       	syscall sys_io
0295+  19FF E4          	pop a
0296+  1A00 09          	ret
0297+  1A01             
0298+  1A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  1A01             ; strtoint
0300+  1A01             ; 4 digit hex string number in d
0301+  1A01             ; integer returned in A
0302+  1A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  1A01             strtointx:
0304+  1A01 D8          	push b
0305+  1A02 32          	mov bl, [d]
0306+  1A03 37          	mov bh, bl
0307+  1A04 33 01 00    	mov bl, [d + 1]
0308+  1A07 07 C2 18    	call atoi				; convert to int in AL
0309+  1A0A 23          	mov ah, al				; move to AH
0310+  1A0B 33 02 00    	mov bl, [d + 2]
0311+  1A0E 37          	mov bh, bl
0312+  1A0F 33 03 00    	mov bl, [d + 3]
0313+  1A12 07 C2 18    	call atoi				; convert to int in AL
0314+  1A15 E5          	pop b
0315+  1A16 09          	ret
0316+  1A17             
0317+  1A17             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  1A17             ; strtoint
0319+  1A17             ; 5 digit base10 string number in d
0320+  1A17             ; integer returned in A
0321+  1A17             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  1A17             strtoint:
0323+  1A17 E2          	push si
0324+  1A18 D8          	push b
0325+  1A19 D9          	push c
0326+  1A1A DA          	push d
0327+  1A1B 07 42 18    	call strlen			; get string length in C
0328+  1A1E 7E          	dec c
0329+  1A1F FD 4E       	mov si, d
0330+  1A21 12          	mov a, c
0331+  1A22 FD 99       	shl a
0332+  1A24 3B AA 18    	mov d, table_power
0333+  1A27 59          	add d, a
0334+  1A28 38 00 00    	mov c, 0
0335+  1A2B             strtoint_L0:
0336+  1A2B F6          	lodsb			; load ASCII to al
0337+  1A2C B9 00       	cmp al, 0
0338+  1A2E C6 41 1A    	je strtoint_end
0339+  1A31 6F 30       	sub al, $30		; make into integer
0340+  1A33 22 00       	mov ah, 0
0341+  1A35 2A          	mov b, [d]
0342+  1A36 AC          	mul a, b			; result in B since it fits in 16bits
0343+  1A37 11          	mov a, b
0344+  1A38 28          	mov b, c
0345+  1A39 54          	add a, b
0346+  1A3A 39          	mov c, a
0347+  1A3B 63 02 00    	sub d, 2
0348+  1A3E 0A 2B 1A    	jmp strtoint_L0
0349+  1A41             strtoint_end:
0350+  1A41 12          	mov a, c
0351+  1A42 E7          	pop d
0352+  1A43 E6          	pop c
0353+  1A44 E5          	pop b
0354+  1A45 EF          	pop si
0355+  1A46 09          	ret
0356+  1A47             
0357+  1A47             
0358+  1A47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  1A47             ; PRINT NULL TERMINATED STRING
0360+  1A47             ; pointer in D
0361+  1A47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  1A47             puts:
0363+  1A47 D7          	push a
0364+  1A48 DA          	push d
0365+  1A49             puts_L1:
0366+  1A49 1E          	mov al, [d]
0367+  1A4A B9 00       	cmp al, 0
0368+  1A4C C6 58 1A    	jz puts_END
0369+  1A4F 23          	mov ah, al
0370+  1A50 19 00       	mov al, 0
0371+  1A52 05 03       	syscall sys_io
0372+  1A54 79          	inc d
0373+  1A55 0A 49 1A    	jmp puts_L1
0374+  1A58             puts_END:
0375+  1A58 E7          	pop d
0376+  1A59 E4          	pop a
0377+  1A5A 09          	ret
0378+  1A5B             
0379+  1A5B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  1A5B             ; PRINT N SIZE STRING
0381+  1A5B             ; pointer in D
0382+  1A5B             ; size in C
0383+  1A5B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  1A5B             putsn:
0385+  1A5B DB          	push al
0386+  1A5C DA          	push d
0387+  1A5D D9          	push c
0388+  1A5E             putsn_L0:
0389+  1A5E 1E          	mov al, [d]
0390+  1A5F 23          	mov ah, al
0391+  1A60 19 00       	mov al, 0
0392+  1A62 05 03       	syscall sys_io
0393+  1A64 79          	inc d
0394+  1A65 7E          	dec c	
0395+  1A66 C2 00 00    	cmp c, 0
0396+  1A69 C7 5E 1A    	jne putsn_L0
0397+  1A6C             putsn_end:
0398+  1A6C E6          	pop c
0399+  1A6D E7          	pop d
0400+  1A6E E8          	pop al
0401+  1A6F 09          	ret
0402+  1A70             
0403+  1A70             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  1A70             ; print 16bit decimal number
0405+  1A70             ; input number in A
0406+  1A70             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  1A70             print_u16d:
0408+  1A70 D7          	push a
0409+  1A71 D8          	push b
0410+  1A72 26 10 27    	mov b, 10000
0411+  1A75 AE          	div a, b			; get 10000 coeff.
0412+  1A76 07 9C 1A    	call print_number
0413+  1A79 11          	mov a, b
0414+  1A7A 26 E8 03    	mov b, 1000
0415+  1A7D AE          	div a, b			; get 10000 coeff.
0416+  1A7E 07 9C 1A    	call print_number
0417+  1A81 11          	mov a, b
0418+  1A82 26 64 00    	mov b, 100
0419+  1A85 AE          	div a, b
0420+  1A86 07 9C 1A    	call print_number
0421+  1A89 11          	mov a, b
0422+  1A8A 26 0A 00    	mov b, 10
0423+  1A8D AE          	div a, b
0424+  1A8E 07 9C 1A    	call print_number
0425+  1A91 11          	mov a, b
0426+  1A92 6A 30       	add al, $30
0427+  1A94 23          	mov ah, al
0428+  1A95 19 00       	mov al, 0
0429+  1A97 05 03       	syscall sys_io	; print coeff
0430+  1A99 E5          	pop b
0431+  1A9A E4          	pop a
0432+  1A9B 09          	ret
0433+  1A9C             
0434+  1A9C             
0435+  1A9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  1A9C             ; if A == 0, print space
0437+  1A9C             ; else print A
0438+  1A9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  1A9C             print_number:
0440+  1A9C 6A 30       	add al, $30
0441+  1A9E 23          	mov ah, al
0442+  1A9F 07 0D 19    	call putchar
0443+  1AA2 09          	ret
0444+  1AA3             
0445+  1AA3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  1AA3             ; PRINT 16BIT HEX INTEGER
0447+  1AA3             ; integer value in reg B
0448+  1AA3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  1AA3             print_u16x:
0450+  1AA3 D7          	push a
0451+  1AA4 D8          	push b
0452+  1AA5 DD          	push bl
0453+  1AA6 30          	mov bl, bh
0454+  1AA7 07 D4 18    	call itoa				; convert bh to char in A
0455+  1AAA 2F          	mov bl, al				; save al
0456+  1AAB 19 00       	mov al, 0
0457+  1AAD 05 03       	syscall sys_io				; display AH
0458+  1AAF 24          	mov ah, bl				; retrieve al
0459+  1AB0 19 00       	mov al, 0
0460+  1AB2 05 03       	syscall sys_io				; display AL
0461+  1AB4             
0462+  1AB4 EA          	pop bl
0463+  1AB5 07 D4 18    	call itoa				; convert bh to char in A
0464+  1AB8 2F          	mov bl, al				; save al
0465+  1AB9 19 00       	mov al, 0
0466+  1ABB 05 03       	syscall sys_io				; display AH
0467+  1ABD 24          	mov ah, bl				; retrieve al
0468+  1ABE 19 00       	mov al, 0
0469+  1AC0 05 03       	syscall sys_io				; display AL
0470+  1AC2             
0471+  1AC2 E5          	pop b
0472+  1AC3 E4          	pop a
0473+  1AC4 09          	ret
0474+  1AC5             
0475+  1AC5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  1AC5             ; INPUT 16BIT HEX INTEGER
0477+  1AC5             ; read 16bit integer into A
0478+  1AC5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  1AC5             scan_u16x:
0480+  1AC5 F8 10 00    	enter 16
0481+  1AC8 D8          	push b
0482+  1AC9 DA          	push d
0483+  1ACA             
0484+  1ACA FA F1 FF    	lea d, [bp + -15]
0485+  1ACD 07 14 19    	call gets				; get number
0486+  1AD0             
0487+  1AD0 32          	mov bl, [d]
0488+  1AD1 37          	mov bh, bl
0489+  1AD2 33 01 00    	mov bl, [d + 1]
0490+  1AD5 07 C2 18    	call atoi				; convert to int in AL
0491+  1AD8 23          	mov ah, al				; move to AH
0492+  1AD9             
0493+  1AD9 33 02 00    	mov bl, [d + 2]
0494+  1ADC 37          	mov bh, bl
0495+  1ADD 33 03 00    	mov bl, [d + 3]
0496+  1AE0 07 C2 18    	call atoi				; convert to int in AL
0497+  1AE3             
0498+  1AE3 E7          	pop d
0499+  1AE4 E5          	pop b
0500+  1AE5 F9          	leave
0501+  1AE6 09          	ret
0502+  1AE7             
0503+  1AE7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  1AE7             ; PRINT 8bit HEX INTEGER
0505+  1AE7             ; integer value in reg bl
0506+  1AE7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  1AE7             print_u8x:
0508+  1AE7 D7          	push a
0509+  1AE8 DD          	push bl
0510+  1AE9             
0511+  1AE9 07 D4 18    	call itoa				; convert bl to char in A
0512+  1AEC 2F          	mov bl, al				; save al
0513+  1AED 19 00       	mov al, 0
0514+  1AEF 05 03       	syscall sys_io				; display AH
0515+  1AF1 24          	mov ah, bl				; retrieve al
0516+  1AF2 19 00       	mov al, 0
0517+  1AF4 05 03       	syscall sys_io				; display AL
0518+  1AF6             
0519+  1AF6 EA          	pop bl
0520+  1AF7 E4          	pop a
0521+  1AF8 09          	ret
0522+  1AF9             
0523+  1AF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  1AF9             ; print 8bit decimal unsigned number
0525+  1AF9             ; input number in AL
0526+  1AF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  1AF9             print_u8d:
0528+  1AF9 D7          	push a
0529+  1AFA D8          	push b
0530+  1AFB             
0531+  1AFB 22 00       	mov ah, 0
0532+  1AFD 26 64 00    	mov b, 100
0533+  1B00 AE          	div a, b
0534+  1B01 D8          	push b			; save remainder
0535+  1B02 B9 00       	cmp al, 0
0536+  1B04 C6 0E 1B    	je skip100
0537+  1B07 6A 30       	add al, $30
0538+  1B09 23          	mov ah, al
0539+  1B0A 19 00       	mov al, 0
0540+  1B0C 05 03       	syscall sys_io	; print coeff
0541+  1B0E             skip100:
0542+  1B0E E4          	pop a
0543+  1B0F 22 00       	mov ah, 0
0544+  1B11 26 0A 00    	mov b, 10
0545+  1B14 AE          	div a, b
0546+  1B15 D8          	push b			; save remainder
0547+  1B16 B9 00       	cmp al, 0
0548+  1B18 C6 22 1B    	je skip10
0549+  1B1B 6A 30       	add al, $30
0550+  1B1D 23          	mov ah, al
0551+  1B1E 19 00       	mov al, 0
0552+  1B20 05 03       	syscall sys_io	; print coeff
0553+  1B22             skip10:
0554+  1B22 E4          	pop a
0555+  1B23 1B          	mov al, bl
0556+  1B24 6A 30       	add al, $30
0557+  1B26 23          	mov ah, al
0558+  1B27 19 00       	mov al, 0
0559+  1B29 05 03       	syscall sys_io	; print coeff
0560+  1B2B E5          	pop b
0561+  1B2C E4          	pop a
0562+  1B2D 09          	ret
0563+  1B2E             
0564+  1B2E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  1B2E             ; INPUT 8BIT HEX INTEGER
0566+  1B2E             ; read 8bit integer into AL
0567+  1B2E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  1B2E             scan_u8x:
0569+  1B2E F8 04 00    	enter 4
0570+  1B31 D8          	push b
0571+  1B32 DA          	push d
0572+  1B33             
0573+  1B33 FA FD FF    	lea d, [bp + -3]
0574+  1B36 07 14 19    	call gets				; get number
0575+  1B39             
0576+  1B39 32          	mov bl, [d]
0577+  1B3A 37          	mov bh, bl
0578+  1B3B 33 01 00    	mov bl, [d + 1]
0579+  1B3E 07 C2 18    	call atoi				; convert to int in AL
0580+  1B41             
0581+  1B41 E7          	pop d
0582+  1B42 E5          	pop b
0583+  1B43 F9          	leave
0584+  1B44 09          	ret
0585+  1B45             
0586+  1B45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  1B45             ; input decimal number
0588+  1B45             ; result in A
0589+  1B45             ; 655'\0'
0590+  1B45             ; low--------high
0591+  1B45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  1B45             scan_u16d:
0593+  1B45 F8 08 00    	enter 8
0594+  1B48 E2          	push si
0595+  1B49 D8          	push b
0596+  1B4A D9          	push c
0597+  1B4B DA          	push d
0598+  1B4C FA F9 FF    	lea d, [bp +- 7]
0599+  1B4F 07 14 19    	call gets
0600+  1B52 07 42 18    	call strlen			; get string length in C
0601+  1B55 7E          	dec c
0602+  1B56 FD 4E       	mov si, d
0603+  1B58 12          	mov a, c
0604+  1B59 FD 99       	shl a
0605+  1B5B 3B AA 18    	mov d, table_power
0606+  1B5E 59          	add d, a
0607+  1B5F 38 00 00    	mov c, 0
0608+  1B62             mul_loop:
0609+  1B62 F6          	lodsb			; load ASCII to al
0610+  1B63 B9 00       	cmp al, 0
0611+  1B65 C6 78 1B    	je mul_exit
0612+  1B68 6F 30       	sub al, $30		; make into integer
0613+  1B6A 22 00       	mov ah, 0
0614+  1B6C 2A          	mov b, [d]
0615+  1B6D AC          	mul a, b			; result in B since it fits in 16bits
0616+  1B6E 11          	mov a, b
0617+  1B6F 28          	mov b, c
0618+  1B70 54          	add a, b
0619+  1B71 39          	mov c, a
0620+  1B72 63 02 00    	sub d, 2
0621+  1B75 0A 62 1B    	jmp mul_loop
0622+  1B78             mul_exit:
0623+  1B78 12          	mov a, c
0624+  1B79 E7          	pop d
0625+  1B7A E6          	pop c
0626+  1B7B E5          	pop b
0627+  1B7C EF          	pop si
0628+  1B7D F9          	leave
0629+  1B7E 09          	ret
1181   1B7F             ; --- END INCLUDE BLOCK
1182   1B7F             
1183   1B7F             
1184   1B7F             .end
tasm: Number of errors = 0
