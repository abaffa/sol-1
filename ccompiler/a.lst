0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 26 01 00      mov b, 1
0012   0408 D7            push a
0013   0409 11            mov a, b
0014   040A 45 FF FF      mov [bp + -1], a ; i
0015   040D E4            pop a
0016   040E 2C FF FF      mov b, [bp + -1] ; i
0017   0411 D7            push a
0018   0412 11            mov a, b
0019   0413 26 02 00      mov b, 2
0020   0416 D9            push c
0021   0417 FD 39         mov c, b
0022   0419 27            mov b, a
0023   041A 9F            shl b, cl
0024   041B E6            pop c
0025   041C E4            pop a
0026   041D 26 00 00      mov b, 0
0027   0420 F9            leave
0028   0421 05 0B         syscall sys_terminate_proc
0029   0423             
0030   0423             print_num:
0031   0423 D2            push bp
0032   0424 9B            mov bp, sp
0033   0425 52 05 00      sub sp, 5 ; digits
0034   0428 52 02 00      sub sp, 2 ; i
0035   042B 26 00 00      mov b, 0
0036   042E D7            push a
0037   042F 11            mov a, b
0038   0430 45 FA FF      mov [bp + -6], a ; i
0039   0433 E4            pop a
0040   0434             _while1_cond:
0041   0434 2C 05 00      mov b, [bp + 5] ; num
0042   0437 D7            push a
0043   0438 11            mov a, b
0044   0439 26 00 00      mov b, 0
0045   043C B0            cmp a, b
0046   043D 0E            lodflgs
0047   043E 87 03         and al, %00000011
0048   0440 B9 00         cmp al, 0
0049   0442 0E            lodflgs
0050   0443 22 00         mov ah, 0
0051   0445 27            mov b, a
0052   0446 E4            pop a
0053   0447 C0 00 00      cmp b, 0
0054   044A C6 9B 04      je _while1_exit
0055   044D             _while1_block:
0056   044D FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0057   0450 2D            mov b, d
0058   0451 D7            push a
0059   0452 74            mov d, b
0060   0453 DA            push d
0061   0454 2C FA FF      mov b, [bp + -6] ; i
0062   0457 E7            pop d
0063   0458 10 01 00      mov a, 1
0064   045B AC            mul a, b
0065   045C 5A            add d, b
0066   045D E4            pop a
0067   045E DA            push d
0068   045F 26 30 00      mov b, '0'
0069   0462 D7            push a
0070   0463 11            mov a, b
0071   0464 2C 05 00      mov b, [bp + 5] ; num
0072   0467 D7            push a
0073   0468 11            mov a, b
0074   0469 26 0A 00      mov b, 10
0075   046C AE            div a, b
0076   046D E4            pop a
0077   046E 54            add a, b
0078   046F 27            mov b, a
0079   0470 E4            pop a
0080   0471 E7            pop d
0081   0472 FD 3E         mov [d], bl
0082   0474 2C 05 00      mov b, [bp + 5] ; num
0083   0477 D7            push a
0084   0478 11            mov a, b
0085   0479 26 0A 00      mov b, 10
0086   047C AE            div a, b
0087   047D FD 78         mov g, a
0088   047F 11            mov a, b
0089   0480 FD 27         mov b, g
0090   0482 E4            pop a
0091   0483 D7            push a
0092   0484 11            mov a, b
0093   0485 45 05 00      mov [bp + 5], a ; num
0094   0488 E4            pop a
0095   0489 2C FA FF      mov b, [bp + -6] ; i
0096   048C D7            push a
0097   048D 11            mov a, b
0098   048E FD 77         inc b
0099   0490 D7            push a
0100   0491 11            mov a, b
0101   0492 45 FA FF      mov [bp + -6], a ; i
0102   0495 E4            pop a
0103   0496 27            mov b, a
0104   0497 E4            pop a
0105   0498 0A 34 04      jmp _while1_cond
0106   049B             _while1_exit:
0107   049B             _while2_cond:
0108   049B 2C FA FF      mov b, [bp + -6] ; i
0109   049E D7            push a
0110   049F 11            mov a, b
0111   04A0 26 00 00      mov b, 0
0112   04A3 B0            cmp a, b
0113   04A4 0E            lodflgs
0114   04A5 87 03         and al, %00000011
0115   04A7 B9 00         cmp al, 0
0116   04A9 0E            lodflgs
0117   04AA 22 00         mov ah, 0
0118   04AC 27            mov b, a
0119   04AD E4            pop a
0120   04AE C0 00 00      cmp b, 0
0121   04B1 C6 E1 04      je _while2_exit
0122   04B4             _while2_block:
0123   04B4 2C FA FF      mov b, [bp + -6] ; i
0124   04B7 D7            push a
0125   04B8 11            mov a, b
0126   04B9 FD 7D         dec b
0127   04BB D7            push a
0128   04BC 11            mov a, b
0129   04BD 45 FA FF      mov [bp + -6], a ; i
0130   04C0 E4            pop a
0131   04C1 27            mov b, a
0132   04C2 E4            pop a
0133   04C3 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0134   04C6 2D            mov b, d
0135   04C7 D7            push a
0136   04C8 74            mov d, b
0137   04C9 DA            push d
0138   04CA 2C FA FF      mov b, [bp + -6] ; i
0139   04CD E7            pop d
0140   04CE 10 01 00      mov a, 1
0141   04D1 AC            mul a, b
0142   04D2 5A            add d, b
0143   04D3 E4            pop a
0144   04D4 32            mov bl, [d]
0145   04D5 A7 00         mov bh, 0
0146   04D7 DD            push bl
0147   04D8 07 E3 04      call _putchar
0148   04DB 51 01 00      add sp, 1
0149   04DE 0A 9B 04      jmp _while2_cond
0150   04E1             _while2_exit:
0151   04E1 F9            leave
0152   04E2 09            ret
0153   04E3             
0154   04E3             _putchar:
0155   04E3 D2            push bp
0156   04E4 9B            mov bp, sp
0157   04E5             
0158   04E5             ; --- BEGIN INLINE ASM BLOCK
0159   04E5 20 05 00      mov al, [bp + 5]
0160   04E8 23            mov ah, al
0161   04E9 07 25 06      call putchar
0162   04EC             ; --- END INLINE ASM BLOCK
0163   04EC             
0164   04EC F9            leave
0165   04ED 09            ret
0166   04EE             
0167   04EE             scann:
0168   04EE D2            push bp
0169   04EF 9B            mov bp, sp
0170   04F0 52 02 00      sub sp, 2 ; m
0171   04F3             
0172   04F3             ; --- BEGIN INLINE ASM BLOCK
0173   04F3 07 5D 08      call scan_u16d
0174   04F6 45 FF FF      mov [bp + -1], a
0175   04F9             ; --- END INLINE ASM BLOCK
0176   04F9             
0177   04F9 FA 05 00      lea d, [bp + 5] ; n
0178   04FC 2A            mov b, [d]
0179   04FD D8            push b
0180   04FE 2C FF FF      mov b, [bp + -1] ; m
0181   0501 E7            pop d
0182   0502 D7            push a
0183   0503 11            mov a, b
0184   0504 43            mov [d], a
0185   0505 E4            pop a
0186   0506 F9            leave
0187   0507 09            ret
0188   0508             
0189   0508             print:
0190   0508 D2            push bp
0191   0509 9B            mov bp, sp
0192   050A             
0193   050A             ; --- BEGIN INLINE ASM BLOCK
0194   050A 17 05 00      mov a, [bp + 5]
0195   050D 3C            mov d, a
0196   050E 07 5F 07      call puts
0197   0511             ; --- END INLINE ASM BLOCK
0198   0511             
0199   0511 F9            leave
0200   0512 09            ret
0201   0513             ; --- END TEXT BLOCK
0202   0513             
0203   0513             ; --- BEGIN DATA BLOCK
0204   0513             ; --- END DATA BLOCK
0205   0513             
0206   0513             ; --- BEGIN INCLUDE BLOCK
0207   0513             .include "lib/stdio.asm"
0001+  0513             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0513             ; stdio.s
0003+  0513             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0513             .include "lib/string.asm"
0001++ 0513             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0513             ; string.s
0003++ 0513             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0513             
0005++ 0513             
0006++ 0513             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0513             ; strrev
0008++ 0513             ; reverse a string
0009++ 0513             ; D = string address
0010++ 0513             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0513             ; 01234
0012++ 0513             strrev:
0013++ 0513 4B          	pusha
0014++ 0514 07 5A 05    	call strlen	; length in C
0015++ 0517 12          	mov a, c
0016++ 0518 AF 01 00    	cmp a, 1
0017++ 051B D0 35 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 051E 7D          	dec a
0019++ 051F FD 4E       	mov si, d	; beginning of string
0020++ 0521 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0523 59          	add d, a	; end of string
0022++ 0524 12          	mov a, c
0023++ 0525 FD 9B       	shr a		; divide by 2
0024++ 0527 39          	mov c, a	; C now counts the steps
0025++ 0528             strrev_L0:
0026++ 0528 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0529 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 052A 3E          	mov [d], al	; store left char into right side
0029++ 052B 1B          	mov al, bl
0030++ 052C F7          	stosb		; store right-side char into left-side; increase DI
0031++ 052D 7E          	dec c
0032++ 052E 7F          	dec d
0033++ 052F C2 00 00    	cmp c, 0
0034++ 0532 C7 28 05    	jne strrev_L0
0035++ 0535             strrev_end:
0036++ 0535 4C          	popa
0037++ 0536 09          	ret
0038++ 0537             	
0039++ 0537             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0537             ; strchr
0041++ 0537             ; search string in D for char in AL
0042++ 0537             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0537             strchr:
0044++ 0537             strchr_L0:
0045++ 0537 32          	mov bl, [d]
0046++ 0538 C1 00       	cmp bl, 0
0047++ 053A C6 45 05    	je strchr_end
0048++ 053D BA          	cmp al, bl
0049++ 053E C6 45 05    	je strchr_end
0050++ 0541 79          	inc d
0051++ 0542 0A 37 05    	jmp strchr_L0
0052++ 0545             strchr_end:
0053++ 0545 1B          	mov al, bl
0054++ 0546 09          	ret
0055++ 0547             
0056++ 0547             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0547             ; strstr
0058++ 0547             ; find sub-string
0059++ 0547             ; str1 in SI
0060++ 0547             ; str2 in DI
0061++ 0547             ; SI points to end of source string
0062++ 0547             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0547             strstr:
0064++ 0547 DB          	push al
0065++ 0548 DA          	push d
0066++ 0549 E3          	push di
0067++ 054A             strstr_loop:
0068++ 054A F3          	cmpsb					; compare a byte of the strings
0069++ 054B C7 56 05    	jne strstr_ret
0070++ 054E FC 00 00    	lea d, [di + 0]
0071++ 0551 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0553 C7 4A 05    	jne strstr_loop				; equal chars but not at end
0073++ 0556             strstr_ret:
0074++ 0556 F0          	pop di
0075++ 0557 E7          	pop d
0076++ 0558 E8          	pop al
0077++ 0559 09          	ret
0078++ 055A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 055A             ; length of null terminated string
0080++ 055A             ; result in C
0081++ 055A             ; pointer in D
0082++ 055A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 055A             strlen:
0084++ 055A DA          	push d
0085++ 055B 38 00 00    	mov c, 0
0086++ 055E             strlen_L1:
0087++ 055E BD 00       	cmp byte [d], 0
0088++ 0560 C6 68 05    	je strlen_ret
0089++ 0563 79          	inc d
0090++ 0564 78          	inc c
0091++ 0565 0A 5E 05    	jmp strlen_L1
0092++ 0568             strlen_ret:
0093++ 0568 E7          	pop d
0094++ 0569 09          	ret
0095++ 056A             
0096++ 056A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 056A             ; STRCMP
0098++ 056A             ; compare two strings
0099++ 056A             ; str1 in SI
0100++ 056A             ; str2 in DI
0101++ 056A             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 056A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 056A             strcmp:
0104++ 056A DB          	push al
0105++ 056B DA          	push d
0106++ 056C E3          	push di
0107++ 056D E2          	push si
0108++ 056E             strcmp_loop:
0109++ 056E F3          	cmpsb					; compare a byte of the strings
0110++ 056F C7 7A 05    	jne strcmp_ret
0111++ 0572 FB FF FF    	lea d, [si +- 1]
0112++ 0575 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0577 C7 6E 05    	jne strcmp_loop				; equal chars but not at end
0114++ 057A             strcmp_ret:
0115++ 057A EF          	pop si
0116++ 057B F0          	pop di
0117++ 057C E7          	pop d
0118++ 057D E8          	pop al
0119++ 057E 09          	ret
0120++ 057F             
0121++ 057F             
0122++ 057F             ; STRCPY
0123++ 057F             ; copy null terminated string from SI to DI
0124++ 057F             ; source in SI
0125++ 057F             ; destination in DI
0126++ 057F             strcpy:
0127++ 057F E2          	push si
0128++ 0580 E3          	push di
0129++ 0581 DB          	push al
0130++ 0582             strcpy_L1:
0131++ 0582 F6          	lodsb
0132++ 0583 F7          	stosb
0133++ 0584 B9 00       	cmp al, 0
0134++ 0586 C7 82 05    	jne strcpy_L1
0135++ 0589             strcpy_end:
0136++ 0589 E8          	pop al
0137++ 058A F0          	pop di
0138++ 058B EF          	pop si
0139++ 058C 09          	ret
0140++ 058D             
0141++ 058D             ; STRCAT
0142++ 058D             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 058D             ; source in SI
0144++ 058D             ; destination in DI
0145++ 058D             strcat:
0146++ 058D E2          	push si
0147++ 058E E3          	push di
0148++ 058F D7          	push a
0149++ 0590 DA          	push d
0150++ 0591 50          	mov a, di
0151++ 0592 3C          	mov d, a
0152++ 0593             strcat_goto_end_L1:
0153++ 0593 BD 00       	cmp byte[d], 0
0154++ 0595 C6 9C 05    	je strcat_start
0155++ 0598 79          	inc d
0156++ 0599 0A 93 05    	jmp strcat_goto_end_L1
0157++ 059C             strcat_start:
0158++ 059C FD 50       	mov di, d
0159++ 059E             strcat_L1:
0160++ 059E F6          	lodsb
0161++ 059F F7          	stosb
0162++ 05A0 B9 00       	cmp al, 0
0163++ 05A2 C7 9E 05    	jne strcat_L1
0164++ 05A5             strcat_end:
0165++ 05A5 E7          	pop d
0166++ 05A6 E4          	pop a
0167++ 05A7 F0          	pop di
0168++ 05A8 EF          	pop si
0169++ 05A9 09          	ret
0005+  05AA             
0006+  05AA 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  05AE 34 35 36 37 
0006+  05B2 38 39 41 42 
0006+  05B6 43 44 45 46 
0007+  05BA 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  05BE 1B 5B 48 00 
0008+  05C2             
0009+  05C2 01 00       table_power:.dw 1
0010+  05C4 0A 00       			.dw 10
0011+  05C6 64 00       			.dw 100
0012+  05C8 E8 03       			.dw 1000
0013+  05CA 10 27       			.dw 10000
0014+  05CC             
0015+  05CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  05CC             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  05CC             ; ASCII in BL
0018+  05CC             ; result in AL
0019+  05CC             ; ascii for F = 0100 0110
0020+  05CC             ; ascii for 9 = 0011 1001
0021+  05CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  05CC             hex_ascii_encode:
0023+  05CC 1B          	mov al, bl
0024+  05CD 93 40       	test al, $40				; test if letter or number
0025+  05CF C7 D5 05    	jnz hex_letter
0026+  05D2 87 0F       	and al, $0F				; get number
0027+  05D4 09          	ret
0028+  05D5             hex_letter:
0029+  05D5 87 0F       	and al, $0F				; get letter
0030+  05D7 6A 09       	add al, 9
0031+  05D9 09          	ret
0032+  05DA             
0033+  05DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  05DA             ; ATOI
0035+  05DA             ; 2 letter hex string in B
0036+  05DA             ; 8bit integer returned in AL
0037+  05DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  05DA             atoi:
0039+  05DA D8          	push b
0040+  05DB 07 CC 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  05DE 30          	mov bl, bh
0042+  05DF DB          	push al					; save a
0043+  05E0 07 CC 05    	call hex_ascii_encode
0044+  05E3 EA          	pop bl	
0045+  05E4 FD 9E 04    	shl al, 4
0046+  05E7 8C          	or al, bl
0047+  05E8 E5          	pop b
0048+  05E9 09          	ret	
0049+  05EA             
0050+  05EA             
0051+  05EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  05EA             ; printf
0053+  05EA             ; no need for explanations!
0054+  05EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  05EA             printf:
0056+  05EA 09          	ret
0057+  05EB             
0058+  05EB             
0059+  05EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  05EB             ; scanf
0061+  05EB             ; no need for explanations!
0062+  05EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  05EB             scanf:
0064+  05EB 09          	ret
0065+  05EC             
0066+  05EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  05EC             ; ITOA
0068+  05EC             ; 8bit value in BL
0069+  05EC             ; 2 byte ASCII result in A
0070+  05EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  05EC             itoa:
0072+  05EC DA          	push d
0073+  05ED D8          	push b
0074+  05EE A7 00       	mov bh, 0
0075+  05F0 FD A4 04    	shr bl, 4	
0076+  05F3 74          	mov d, b
0077+  05F4 1F AA 05    	mov al, [d + s_hex_digits]
0078+  05F7 23          	mov ah, al
0079+  05F8             	
0080+  05F8 E5          	pop b
0081+  05F9 D8          	push b
0082+  05FA A7 00       	mov bh, 0
0083+  05FC FD 87 0F    	and bl, $0F
0084+  05FF 74          	mov d, b
0085+  0600 1F AA 05    	mov al, [d + s_hex_digits]
0086+  0603 E5          	pop b
0087+  0604 E7          	pop d
0088+  0605 09          	ret
0089+  0606             
0090+  0606             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0606             ; HEX STRING TO BINARY
0092+  0606             ; di = destination address
0093+  0606             ; si = source
0094+  0606             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0606             hex_to_int:
0096+  0606             hex_to_int_L1:
0097+  0606 F6          	lodsb					; load from [SI] to AL
0098+  0607 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0609 C6 16 06    	jz hex_to_int_ret
0100+  060C 36          	mov bh, al
0101+  060D F6          	lodsb
0102+  060E 2F          	mov bl, al
0103+  060F 07 DA 05    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0612 F7          	stosb					; store AL to [DI]
0105+  0613 0A 06 06    	jmp hex_to_int_L1
0106+  0616             hex_to_int_ret:
0107+  0616 09          	ret		
0108+  0617             
0109+  0617             
0110+  0617             
0111+  0617             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0617             ; GETCHAR
0113+  0617             ; char in ah
0114+  0617             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0617             getchar:
0116+  0617 DB          	push al
0117+  0618             getchar_retry:
0118+  0618 FD 0C       	sti
0119+  061A 19 01       	mov al, 1
0120+  061C 05 03       	syscall sys_io			; receive in AH
0121+  061E B9 00       	cmp al, 0			; check if any char was receive
0122+  0620 C6 18 06    	je getchar_retry
0123+  0623 E8          	pop al
0124+  0624 09          	ret
0125+  0625             
0126+  0625             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0625             ; PUTCHAR
0128+  0625             ; char in ah
0129+  0625             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0625             putchar:
0131+  0625 D7          	push a
0132+  0626 19 00       	mov al, 0
0133+  0628 05 03       	syscall sys_io			; char in AH
0134+  062A E4          	pop a
0135+  062B 09          	ret
0136+  062C             
0137+  062C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  062C             ;; INPUT A STRING
0139+  062C             ;; terminates with null
0140+  062C             ;; pointer in D
0141+  062C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  062C             gets:
0143+  062C D7          	push a
0144+  062D DA          	push d
0145+  062E             gets_loop:
0146+  062E FD 0C       	sti
0147+  0630 19 01       	mov al, 1
0148+  0632 05 03       	syscall sys_io			; receive in AH
0149+  0634 B9 00       	cmp al, 0				; check error code (AL)
0150+  0636 C6 2E 06    	je gets_loop			; if no char received, retry
0151+  0639             
0152+  0639 76 1B       	cmp ah, 27
0153+  063B C6 5C 06    	je gets_telnet_escape
0154+  063E 76 0A       	cmp ah, $0A				; LF
0155+  0640 C6 B5 06    	je gets_end
0156+  0643 76 0D       	cmp ah, $0D				; CR
0157+  0645 C6 B5 06    	je gets_end
0158+  0648 76 5C       	cmp ah, $5C				; '\\'
0159+  064A C6 8C 06    	je gets_escape
0160+  064D             	
0161+  064D 76 08       	cmp ah, $08			; check for backspace
0162+  064F C6 58 06    	je gets_backspace
0163+  0652             
0164+  0652 1A          	mov al, ah
0165+  0653 3E          	mov [d], al
0166+  0654 79          	inc d
0167+  0655 0A 2E 06    	jmp gets_loop
0168+  0658             gets_backspace:
0169+  0658 7F          	dec d
0170+  0659 0A 2E 06    	jmp gets_loop
0171+  065C             gets_telnet_escape:
0172+  065C FD 0C       	sti
0173+  065E 19 01       	mov al, 1
0174+  0660 05 03       	syscall sys_io				; receive in AH without echo
0175+  0662 B9 00       	cmp al, 0					; check error code (AL)
0176+  0664 C6 5C 06    	je gets_telnet_escape		; if no char received, retry
0177+  0667 76 5B       	cmp ah, '['
0178+  0669 C7 2E 06    	jne gets_loop
0179+  066C             gets_telnet_escape_phase2:
0180+  066C FD 0C       	sti
0181+  066E 19 01       	mov al, 1
0182+  0670 05 03       	syscall sys_io					; receive in AH without echo
0183+  0672 B9 00       	cmp al, 0						; check error code (AL)
0184+  0674 C6 6C 06    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0677 76 44       	cmp ah, 'D'
0186+  0679 C6 84 06    	je gets_left_arrow
0187+  067C 76 43       	cmp ah, 'C'
0188+  067E C6 88 06    	je gets_right_arrow
0189+  0681 0A 2E 06    	jmp gets_loop
0190+  0684             gets_left_arrow:
0191+  0684 7F          	dec d
0192+  0685 0A 2E 06    	jmp gets_loop
0193+  0688             gets_right_arrow:
0194+  0688 79          	inc d
0195+  0689 0A 2E 06    	jmp gets_loop
0196+  068C             gets_escape:
0197+  068C FD 0C       	sti
0198+  068E 19 01       	mov al, 1
0199+  0690 05 03       	syscall sys_io			; receive in AH
0200+  0692 B9 00       	cmp al, 0				; check error code (AL)
0201+  0694 C6 8C 06    	je gets_escape			; if no char received, retry
0202+  0697 76 6E       	cmp ah, 'n'
0203+  0699 C6 A7 06    	je gets_LF
0204+  069C 76 72       	cmp ah, 'r'
0205+  069E C6 AE 06    	je gets_CR
0206+  06A1 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  06A2 3E          	mov [d], al
0208+  06A3 79          	inc d
0209+  06A4 0A 2E 06    	jmp gets_loop
0210+  06A7             gets_LF:
0211+  06A7 19 0A       	mov al, $0A
0212+  06A9 3E          	mov [d], al
0213+  06AA 79          	inc d
0214+  06AB 0A 2E 06    	jmp gets_loop
0215+  06AE             gets_CR:
0216+  06AE 19 0D       	mov al, $0D
0217+  06B0 3E          	mov [d], al
0218+  06B1 79          	inc d
0219+  06B2 0A 2E 06    	jmp gets_loop
0220+  06B5             gets_end:
0221+  06B5 19 00       	mov al, 0
0222+  06B7 3E          	mov [d], al				; terminate string
0223+  06B8 E7          	pop d
0224+  06B9 E4          	pop a
0225+  06BA 09          	ret
0226+  06BB             
0227+  06BB             
0228+  06BB             
0229+  06BB             
0230+  06BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  06BB             ;; INPUT TEXT
0232+  06BB             ;; terminated with CTRL+D
0233+  06BB             ;; pointer in D
0234+  06BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  06BB             gettxt:
0236+  06BB D7          	push a
0237+  06BC DA          	push d
0238+  06BD             gettxt_loop:
0239+  06BD 19 01       	mov al, 1
0240+  06BF 05 03       	syscall sys_io			; receive in AH
0241+  06C1 B9 00       	cmp al, 0				; check error code (AL)
0242+  06C3 C6 BD 06    	je gettxt_loop		; if no char received, retry
0243+  06C6 76 04       	cmp ah, 4			; EOT
0244+  06C8 C6 06 07    	je gettxt_end
0245+  06CB 76 08       	cmp ah, $08			; check for backspace
0246+  06CD C6 02 07    	je gettxt_backspace
0247+  06D0 76 5C       	cmp ah, $5C				; '\\'
0248+  06D2 C6 DB 06    	je gettxt_escape
0249+  06D5 1A          	mov al, ah
0250+  06D6 3E          	mov [d], al
0251+  06D7 79          	inc d
0252+  06D8 0A BD 06    	jmp gettxt_loop
0253+  06DB             gettxt_escape:
0254+  06DB 19 01       	mov al, 1
0255+  06DD 05 03       	syscall sys_io			; receive in AH
0256+  06DF B9 00       	cmp al, 0				; check error code (AL)
0257+  06E1 C6 DB 06    	je gettxt_escape		; if no char received, retry
0258+  06E4 76 6E       	cmp ah, 'n'
0259+  06E6 C6 F4 06    	je gettxt_LF
0260+  06E9 76 72       	cmp ah, 'r'
0261+  06EB C6 FB 06    	je gettxt_CR
0262+  06EE 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  06EF 3E          	mov [d], al
0264+  06F0 79          	inc d
0265+  06F1 0A BD 06    	jmp gettxt_loop
0266+  06F4             gettxt_LF:
0267+  06F4 19 0A       	mov al, $0A
0268+  06F6 3E          	mov [d], al
0269+  06F7 79          	inc d
0270+  06F8 0A BD 06    	jmp gettxt_loop
0271+  06FB             gettxt_CR:
0272+  06FB 19 0D       	mov al, $0D
0273+  06FD 3E          	mov [d], al
0274+  06FE 79          	inc d
0275+  06FF 0A BD 06    	jmp gettxt_loop
0276+  0702             gettxt_backspace:
0277+  0702 7F          	dec d
0278+  0703 0A BD 06    	jmp gettxt_loop
0279+  0706             gettxt_end:
0280+  0706 19 00       	mov al, 0
0281+  0708 3E          	mov [d], al				; terminate string
0282+  0709 E7          	pop d
0283+  070A E4          	pop a
0284+  070B 09          	ret
0285+  070C             
0286+  070C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  070C             ; PRINT NEW LINE
0288+  070C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  070C             printnl:
0290+  070C D7          	push a
0291+  070D 10 00 0A    	mov a, $0A00
0292+  0710 05 03       	syscall sys_io
0293+  0712 10 00 0D    	mov a, $0D00
0294+  0715 05 03       	syscall sys_io
0295+  0717 E4          	pop a
0296+  0718 09          	ret
0297+  0719             
0298+  0719             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0719             ; strtoint
0300+  0719             ; 4 digit hex string number in d
0301+  0719             ; integer returned in A
0302+  0719             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0719             strtointx:
0304+  0719 D8          	push b
0305+  071A 32          	mov bl, [d]
0306+  071B 37          	mov bh, bl
0307+  071C 33 01 00    	mov bl, [d + 1]
0308+  071F 07 DA 05    	call atoi				; convert to int in AL
0309+  0722 23          	mov ah, al				; move to AH
0310+  0723 33 02 00    	mov bl, [d + 2]
0311+  0726 37          	mov bh, bl
0312+  0727 33 03 00    	mov bl, [d + 3]
0313+  072A 07 DA 05    	call atoi				; convert to int in AL
0314+  072D E5          	pop b
0315+  072E 09          	ret
0316+  072F             
0317+  072F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  072F             ; strtoint
0319+  072F             ; 5 digit base10 string number in d
0320+  072F             ; integer returned in A
0321+  072F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  072F             strtoint:
0323+  072F E2          	push si
0324+  0730 D8          	push b
0325+  0731 D9          	push c
0326+  0732 DA          	push d
0327+  0733 07 5A 05    	call strlen			; get string length in C
0328+  0736 7E          	dec c
0329+  0737 FD 4E       	mov si, d
0330+  0739 12          	mov a, c
0331+  073A FD 99       	shl a
0332+  073C 3B C2 05    	mov d, table_power
0333+  073F 59          	add d, a
0334+  0740 38 00 00    	mov c, 0
0335+  0743             strtoint_L0:
0336+  0743 F6          	lodsb			; load ASCII to al
0337+  0744 B9 00       	cmp al, 0
0338+  0746 C6 59 07    	je strtoint_end
0339+  0749 6F 30       	sub al, $30		; make into integer
0340+  074B 22 00       	mov ah, 0
0341+  074D 2A          	mov b, [d]
0342+  074E AC          	mul a, b			; result in B since it fits in 16bits
0343+  074F 11          	mov a, b
0344+  0750 28          	mov b, c
0345+  0751 54          	add a, b
0346+  0752 39          	mov c, a
0347+  0753 63 02 00    	sub d, 2
0348+  0756 0A 43 07    	jmp strtoint_L0
0349+  0759             strtoint_end:
0350+  0759 12          	mov a, c
0351+  075A E7          	pop d
0352+  075B E6          	pop c
0353+  075C E5          	pop b
0354+  075D EF          	pop si
0355+  075E 09          	ret
0356+  075F             
0357+  075F             
0358+  075F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  075F             ; PRINT NULL TERMINATED STRING
0360+  075F             ; pointer in D
0361+  075F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  075F             puts:
0363+  075F D7          	push a
0364+  0760 DA          	push d
0365+  0761             puts_L1:
0366+  0761 1E          	mov al, [d]
0367+  0762 B9 00       	cmp al, 0
0368+  0764 C6 70 07    	jz puts_END
0369+  0767 23          	mov ah, al
0370+  0768 19 00       	mov al, 0
0371+  076A 05 03       	syscall sys_io
0372+  076C 79          	inc d
0373+  076D 0A 61 07    	jmp puts_L1
0374+  0770             puts_END:
0375+  0770 E7          	pop d
0376+  0771 E4          	pop a
0377+  0772 09          	ret
0378+  0773             
0379+  0773             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0773             ; PRINT N SIZE STRING
0381+  0773             ; pointer in D
0382+  0773             ; size in C
0383+  0773             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0773             putsn:
0385+  0773 DB          	push al
0386+  0774 DA          	push d
0387+  0775 D9          	push c
0388+  0776             putsn_L0:
0389+  0776 1E          	mov al, [d]
0390+  0777 23          	mov ah, al
0391+  0778 19 00       	mov al, 0
0392+  077A 05 03       	syscall sys_io
0393+  077C 79          	inc d
0394+  077D 7E          	dec c	
0395+  077E C2 00 00    	cmp c, 0
0396+  0781 C7 76 07    	jne putsn_L0
0397+  0784             putsn_end:
0398+  0784 E6          	pop c
0399+  0785 E7          	pop d
0400+  0786 E8          	pop al
0401+  0787 09          	ret
0402+  0788             
0403+  0788             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0788             ; print 16bit decimal number
0405+  0788             ; input number in A
0406+  0788             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0788             print_u16d:
0408+  0788 D7          	push a
0409+  0789 D8          	push b
0410+  078A 26 10 27    	mov b, 10000
0411+  078D AE          	div a, b			; get 10000 coeff.
0412+  078E 07 B4 07    	call print_number
0413+  0791 11          	mov a, b
0414+  0792 26 E8 03    	mov b, 1000
0415+  0795 AE          	div a, b			; get 10000 coeff.
0416+  0796 07 B4 07    	call print_number
0417+  0799 11          	mov a, b
0418+  079A 26 64 00    	mov b, 100
0419+  079D AE          	div a, b
0420+  079E 07 B4 07    	call print_number
0421+  07A1 11          	mov a, b
0422+  07A2 26 0A 00    	mov b, 10
0423+  07A5 AE          	div a, b
0424+  07A6 07 B4 07    	call print_number
0425+  07A9 11          	mov a, b
0426+  07AA 6A 30       	add al, $30
0427+  07AC 23          	mov ah, al
0428+  07AD 19 00       	mov al, 0
0429+  07AF 05 03       	syscall sys_io	; print coeff
0430+  07B1 E5          	pop b
0431+  07B2 E4          	pop a
0432+  07B3 09          	ret
0433+  07B4             
0434+  07B4             
0435+  07B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  07B4             ; if A == 0, print space
0437+  07B4             ; else print A
0438+  07B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  07B4             print_number:
0440+  07B4 6A 30       	add al, $30
0441+  07B6 23          	mov ah, al
0442+  07B7 07 25 06    	call putchar
0443+  07BA 09          	ret
0444+  07BB             
0445+  07BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  07BB             ; PRINT 16BIT HEX INTEGER
0447+  07BB             ; integer value in reg B
0448+  07BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  07BB             print_u16x:
0450+  07BB D7          	push a
0451+  07BC D8          	push b
0452+  07BD DD          	push bl
0453+  07BE 30          	mov bl, bh
0454+  07BF 07 EC 05    	call itoa				; convert bh to char in A
0455+  07C2 2F          	mov bl, al				; save al
0456+  07C3 19 00       	mov al, 0
0457+  07C5 05 03       	syscall sys_io				; display AH
0458+  07C7 24          	mov ah, bl				; retrieve al
0459+  07C8 19 00       	mov al, 0
0460+  07CA 05 03       	syscall sys_io				; display AL
0461+  07CC             
0462+  07CC EA          	pop bl
0463+  07CD 07 EC 05    	call itoa				; convert bh to char in A
0464+  07D0 2F          	mov bl, al				; save al
0465+  07D1 19 00       	mov al, 0
0466+  07D3 05 03       	syscall sys_io				; display AH
0467+  07D5 24          	mov ah, bl				; retrieve al
0468+  07D6 19 00       	mov al, 0
0469+  07D8 05 03       	syscall sys_io				; display AL
0470+  07DA             
0471+  07DA E5          	pop b
0472+  07DB E4          	pop a
0473+  07DC 09          	ret
0474+  07DD             
0475+  07DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  07DD             ; INPUT 16BIT HEX INTEGER
0477+  07DD             ; read 16bit integer into A
0478+  07DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  07DD             scan_u16x:
0480+  07DD F8 10 00    	enter 16
0481+  07E0 D8          	push b
0482+  07E1 DA          	push d
0483+  07E2             
0484+  07E2 FA F1 FF    	lea d, [bp + -15]
0485+  07E5 07 2C 06    	call gets				; get number
0486+  07E8             
0487+  07E8 32          	mov bl, [d]
0488+  07E9 37          	mov bh, bl
0489+  07EA 33 01 00    	mov bl, [d + 1]
0490+  07ED 07 DA 05    	call atoi				; convert to int in AL
0491+  07F0 23          	mov ah, al				; move to AH
0492+  07F1             
0493+  07F1 33 02 00    	mov bl, [d + 2]
0494+  07F4 37          	mov bh, bl
0495+  07F5 33 03 00    	mov bl, [d + 3]
0496+  07F8 07 DA 05    	call atoi				; convert to int in AL
0497+  07FB             
0498+  07FB E7          	pop d
0499+  07FC E5          	pop b
0500+  07FD F9          	leave
0501+  07FE 09          	ret
0502+  07FF             
0503+  07FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  07FF             ; PRINT 8bit HEX INTEGER
0505+  07FF             ; integer value in reg bl
0506+  07FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  07FF             print_u8x:
0508+  07FF D7          	push a
0509+  0800 DD          	push bl
0510+  0801             
0511+  0801 07 EC 05    	call itoa				; convert bl to char in A
0512+  0804 2F          	mov bl, al				; save al
0513+  0805 19 00       	mov al, 0
0514+  0807 05 03       	syscall sys_io				; display AH
0515+  0809 24          	mov ah, bl				; retrieve al
0516+  080A 19 00       	mov al, 0
0517+  080C 05 03       	syscall sys_io				; display AL
0518+  080E             
0519+  080E EA          	pop bl
0520+  080F E4          	pop a
0521+  0810 09          	ret
0522+  0811             
0523+  0811             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0811             ; print 8bit decimal unsigned number
0525+  0811             ; input number in AL
0526+  0811             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0811             print_u8d:
0528+  0811 D7          	push a
0529+  0812 D8          	push b
0530+  0813             
0531+  0813 22 00       	mov ah, 0
0532+  0815 26 64 00    	mov b, 100
0533+  0818 AE          	div a, b
0534+  0819 D8          	push b			; save remainder
0535+  081A B9 00       	cmp al, 0
0536+  081C C6 26 08    	je skip100
0537+  081F 6A 30       	add al, $30
0538+  0821 23          	mov ah, al
0539+  0822 19 00       	mov al, 0
0540+  0824 05 03       	syscall sys_io	; print coeff
0541+  0826             skip100:
0542+  0826 E4          	pop a
0543+  0827 22 00       	mov ah, 0
0544+  0829 26 0A 00    	mov b, 10
0545+  082C AE          	div a, b
0546+  082D D8          	push b			; save remainder
0547+  082E B9 00       	cmp al, 0
0548+  0830 C6 3A 08    	je skip10
0549+  0833 6A 30       	add al, $30
0550+  0835 23          	mov ah, al
0551+  0836 19 00       	mov al, 0
0552+  0838 05 03       	syscall sys_io	; print coeff
0553+  083A             skip10:
0554+  083A E4          	pop a
0555+  083B 1B          	mov al, bl
0556+  083C 6A 30       	add al, $30
0557+  083E 23          	mov ah, al
0558+  083F 19 00       	mov al, 0
0559+  0841 05 03       	syscall sys_io	; print coeff
0560+  0843 E5          	pop b
0561+  0844 E4          	pop a
0562+  0845 09          	ret
0563+  0846             
0564+  0846             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0846             ; INPUT 8BIT HEX INTEGER
0566+  0846             ; read 8bit integer into AL
0567+  0846             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0846             scan_u8x:
0569+  0846 F8 04 00    	enter 4
0570+  0849 D8          	push b
0571+  084A DA          	push d
0572+  084B             
0573+  084B FA FD FF    	lea d, [bp + -3]
0574+  084E 07 2C 06    	call gets				; get number
0575+  0851             
0576+  0851 32          	mov bl, [d]
0577+  0852 37          	mov bh, bl
0578+  0853 33 01 00    	mov bl, [d + 1]
0579+  0856 07 DA 05    	call atoi				; convert to int in AL
0580+  0859             
0581+  0859 E7          	pop d
0582+  085A E5          	pop b
0583+  085B F9          	leave
0584+  085C 09          	ret
0585+  085D             
0586+  085D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  085D             ; input decimal number
0588+  085D             ; result in A
0589+  085D             ; 655'\0'
0590+  085D             ; low--------high
0591+  085D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  085D             scan_u16d:
0593+  085D F8 08 00    	enter 8
0594+  0860 E2          	push si
0595+  0861 D8          	push b
0596+  0862 D9          	push c
0597+  0863 DA          	push d
0598+  0864 FA F9 FF    	lea d, [bp +- 7]
0599+  0867 07 2C 06    	call gets
0600+  086A 07 5A 05    	call strlen			; get string length in C
0601+  086D 7E          	dec c
0602+  086E FD 4E       	mov si, d
0603+  0870 12          	mov a, c
0604+  0871 FD 99       	shl a
0605+  0873 3B C2 05    	mov d, table_power
0606+  0876 59          	add d, a
0607+  0877 38 00 00    	mov c, 0
0608+  087A             mul_loop:
0609+  087A F6          	lodsb			; load ASCII to al
0610+  087B B9 00       	cmp al, 0
0611+  087D C6 90 08    	je mul_exit
0612+  0880 6F 30       	sub al, $30		; make into integer
0613+  0882 22 00       	mov ah, 0
0614+  0884 2A          	mov b, [d]
0615+  0885 AC          	mul a, b			; result in B since it fits in 16bits
0616+  0886 11          	mov a, b
0617+  0887 28          	mov b, c
0618+  0888 54          	add a, b
0619+  0889 39          	mov c, a
0620+  088A 63 02 00    	sub d, 2
0621+  088D 0A 7A 08    	jmp mul_loop
0622+  0890             mul_exit:
0623+  0890 12          	mov a, c
0624+  0891 E7          	pop d
0625+  0892 E6          	pop c
0626+  0893 E5          	pop b
0627+  0894 EF          	pop si
0628+  0895 F9          	leave
0629+  0896 09          	ret
0208   0897             ; --- END INCLUDE BLOCK
0209   0897             
0210   0897             
0211   0897             .end
tasm: Number of errors = 0
