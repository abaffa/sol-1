0001   0000             ; --- Filename: test.c
0002   0000             
0003   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0004   0000             
0005   0400             .org PROC_TEXT_ORG
0006   0400             
0007   0400             ; --- begin text block
0008   0400             main:
0009   0400 D2            push bp
0010   0401 9B            mov bp, sp
0011   0402             ; --- begin asm block
0012   0402 07 9F 07        call scan_u16d
0013   0405 42 4B 04        mov [i], a
0014   0408               ; --- end asm block
0015   0408             _switch1_expr:
0016   0408 29 4B 04      mov b, [i]
0017   040B C0 01 00      cmp b, 1
0018   040E C6 24 04      je _switch1_case0
0019   0411 C0 02 00      cmp b, 2
0020   0414 C6 31 04      je _switch1_case1
0021   0417             _switch1_default:
0022   0417 26 03 00      mov b, 3
0023   041A FD 42 4B 04   mov [i], b
0024   041E 07 41 04      call print
0025   0421 0A 3E 04      jmp _switch1_exit
0026   0424             _switch1_case0:
0027   0424 26 01 00      mov b, 1
0028   0427 FD 42 4B 04   mov [i], b
0029   042B 07 41 04      call print
0030   042E 0A 3E 04      jmp _switch1_exit
0031   0431             _switch1_case1:
0032   0431 26 02 00      mov b, 2
0033   0434 FD 42 4B 04   mov [i], b
0034   0438 07 41 04      call print
0035   043B 0A 3E 04      jmp _switch1_exit
0036   043E             _switch1_exit:
0037   043E F9            leave
0038   043F 05 0B         syscall sys_terminate_proc
0039   0441             print:
0040   0441 D2            push bp
0041   0442 9B            mov bp, sp
0042   0443             ; --- begin asm block
0043   0443 14 4B 04        mov a, [i]
0044   0446 07 CA 06        call print_u16d
0045   0449               ; --- end asm block
0046   0449 F9            leave
0047   044A 09            ret
0048   044B             ; --- end text block
0049   044B             
0050   044B             ; --- begin data block
0051   044B 36 00       i: .dw 54
0052   044D 21 00       j: .dw 33
0053   044F 48 65 6C 6C ss_data: .db "Hello World", 0
0053   0453 6F 20 57 6F 
0053   0457 72 6C 64 00 
0054   045B 4F 04       ss: .dw ss_data
0055   045D             ; --- end data block
0056   045D             ; --- begin include block
0057   045D             .include "lib/stdio.asm"
0001+  045D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  045D             ; stdio.s
0003+  045D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  045D             .include "lib/string.asm"
0001++ 045D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 045D             ; string.s
0003++ 045D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 045D             
0005++ 045D             
0006++ 045D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 045D             ; strrev
0008++ 045D             ; reverse a string
0009++ 045D             ; D = string address
0010++ 045D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 045D             ; 01234
0012++ 045D             strrev:
0013++ 045D 4B          	pusha
0014++ 045E 07 A4 04    	call strlen	; length in C
0015++ 0461 12          	mov a, c
0016++ 0462 AF 01 00    	cmp a, 1
0017++ 0465 D0 7F 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0468 7D          	dec a
0019++ 0469 FD 4E       	mov si, d	; beginning of string
0020++ 046B FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 046D 59          	add d, a	; end of string
0022++ 046E 12          	mov a, c
0023++ 046F FD 9B       	shr a		; divide by 2
0024++ 0471 39          	mov c, a	; C now counts the steps
0025++ 0472             strrev_L0:
0026++ 0472 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0473 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0474 3E          	mov [d], al	; store left char into right side
0029++ 0475 1B          	mov al, bl
0030++ 0476 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0477 7E          	dec c
0032++ 0478 7F          	dec d
0033++ 0479 C2 00 00    	cmp c, 0
0034++ 047C C7 72 04    	jne strrev_L0
0035++ 047F             strrev_end:
0036++ 047F 4C          	popa
0037++ 0480 09          	ret
0038++ 0481             	
0039++ 0481             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0481             ; strchr
0041++ 0481             ; search string in D for char in AL
0042++ 0481             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0481             strchr:
0044++ 0481             strchr_L0:
0045++ 0481 32          	mov bl, [d]
0046++ 0482 C1 00       	cmp bl, 0
0047++ 0484 C6 8F 04    	je strchr_end
0048++ 0487 BA          	cmp al, bl
0049++ 0488 C6 8F 04    	je strchr_end
0050++ 048B 79          	inc d
0051++ 048C 0A 81 04    	jmp strchr_L0
0052++ 048F             strchr_end:
0053++ 048F 1B          	mov al, bl
0054++ 0490 09          	ret
0055++ 0491             
0056++ 0491             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0491             ; strstr
0058++ 0491             ; find sub-string
0059++ 0491             ; str1 in SI
0060++ 0491             ; str2 in DI
0061++ 0491             ; SI points to end of source string
0062++ 0491             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0491             strstr:
0064++ 0491 DB          	push al
0065++ 0492 DA          	push d
0066++ 0493 E3          	push di
0067++ 0494             strstr_loop:
0068++ 0494 F3          	cmpsb					; compare a byte of the strings
0069++ 0495 C7 A0 04    	jne strstr_ret
0070++ 0498 FC 00 00    	lea d, [di + 0]
0071++ 049B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 049D C7 94 04    	jne strstr_loop				; equal chars but not at end
0073++ 04A0             strstr_ret:
0074++ 04A0 F0          	pop di
0075++ 04A1 E7          	pop d
0076++ 04A2 E8          	pop al
0077++ 04A3 09          	ret
0078++ 04A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 04A4             ; length of null terminated string
0080++ 04A4             ; result in C
0081++ 04A4             ; pointer in D
0082++ 04A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 04A4             strlen:
0084++ 04A4 DA          	push d
0085++ 04A5 38 00 00    	mov c, 0
0086++ 04A8             strlen_L1:
0087++ 04A8 BD 00       	cmp byte [d], 0
0088++ 04AA C6 B2 04    	je strlen_ret
0089++ 04AD 79          	inc d
0090++ 04AE 78          	inc c
0091++ 04AF 0A A8 04    	jmp strlen_L1
0092++ 04B2             strlen_ret:
0093++ 04B2 E7          	pop d
0094++ 04B3 09          	ret
0095++ 04B4             
0096++ 04B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04B4             ; STRCMP
0098++ 04B4             ; compare two strings
0099++ 04B4             ; str1 in SI
0100++ 04B4             ; str2 in DI
0101++ 04B4             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04B4             strcmp:
0104++ 04B4 DB          	push al
0105++ 04B5 DA          	push d
0106++ 04B6 E3          	push di
0107++ 04B7 E2          	push si
0108++ 04B8             strcmp_loop:
0109++ 04B8 F3          	cmpsb					; compare a byte of the strings
0110++ 04B9 C7 C4 04    	jne strcmp_ret
0111++ 04BC FB FF FF    	lea d, [si +- 1]
0112++ 04BF BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04C1 C7 B8 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04C4             strcmp_ret:
0115++ 04C4 EF          	pop si
0116++ 04C5 F0          	pop di
0117++ 04C6 E7          	pop d
0118++ 04C7 E8          	pop al
0119++ 04C8 09          	ret
0120++ 04C9             
0121++ 04C9             
0122++ 04C9             ; STRCPY
0123++ 04C9             ; copy null terminated string from SI to DI
0124++ 04C9             ; source in SI
0125++ 04C9             ; destination in DI
0126++ 04C9             strcpy:
0127++ 04C9 E2          	push si
0128++ 04CA E3          	push di
0129++ 04CB DB          	push al
0130++ 04CC             strcpy_L1:
0131++ 04CC F6          	lodsb
0132++ 04CD F7          	stosb
0133++ 04CE B9 00       	cmp al, 0
0134++ 04D0 C7 CC 04    	jne strcpy_L1
0135++ 04D3             strcpy_end:
0136++ 04D3 E8          	pop al
0137++ 04D4 F0          	pop di
0138++ 04D5 EF          	pop si
0139++ 04D6 09          	ret
0140++ 04D7             
0141++ 04D7             ; STRCAT
0142++ 04D7             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04D7             ; source in SI
0144++ 04D7             ; destination in DI
0145++ 04D7             strcat:
0146++ 04D7 E2          	push si
0147++ 04D8 E3          	push di
0148++ 04D9 D7          	push a
0149++ 04DA DA          	push d
0150++ 04DB 50          	mov a, di
0151++ 04DC 3C          	mov d, a
0152++ 04DD             strcat_goto_end_L1:
0153++ 04DD BD 00       	cmp byte[d], 0
0154++ 04DF C6 E6 04    	je strcat_start
0155++ 04E2 79          	inc d
0156++ 04E3 0A DD 04    	jmp strcat_goto_end_L1
0157++ 04E6             strcat_start:
0158++ 04E6 FD 50       	mov di, d
0159++ 04E8             strcat_L1:
0160++ 04E8 F6          	lodsb
0161++ 04E9 F7          	stosb
0162++ 04EA B9 00       	cmp al, 0
0163++ 04EC C7 E8 04    	jne strcat_L1
0164++ 04EF             strcat_end:
0165++ 04EF E7          	pop d
0166++ 04F0 E4          	pop a
0167++ 04F1 F0          	pop di
0168++ 04F2 EF          	pop si
0169++ 04F3 09          	ret
0005+  04F4             
0006+  04F4 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  04F8 34 35 36 37 
0006+  04FC 38 39 41 42 
0006+  0500 43 44 45 46 
0007+  0504             
0008+  0504 01 00       table_power:.dw 1
0009+  0506 0A 00       			.dw 10
0010+  0508 64 00       			.dw 100
0011+  050A E8 03       			.dw 1000
0012+  050C 10 27       			.dw 10000
0013+  050E             
0014+  050E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  050E             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  050E             ; ASCII in BL
0017+  050E             ; result in AL
0018+  050E             ; ascii for F = 0100 0110
0019+  050E             ; ascii for 9 = 0011 1001
0020+  050E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  050E             hex_ascii_encode:
0022+  050E 1B          	mov al, bl
0023+  050F 93 40       	test al, $40				; test if letter or number
0024+  0511 C7 17 05    	jnz hex_letter
0025+  0514 87 0F       	and al, $0F				; get number
0026+  0516 09          	ret
0027+  0517             hex_letter:
0028+  0517 87 0F       	and al, $0F				; get letter
0029+  0519 6A 09       	add al, 9
0030+  051B 09          	ret
0031+  051C             
0032+  051C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  051C             ; ATOI
0034+  051C             ; 2 letter hex string in B
0035+  051C             ; 8bit integer returned in AL
0036+  051C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  051C             atoi:
0038+  051C D8          	push b
0039+  051D 07 0E 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  0520 30          	mov bl, bh
0041+  0521 DB          	push al					; save a
0042+  0522 07 0E 05    	call hex_ascii_encode
0043+  0525 EA          	pop bl	
0044+  0526 FD 9E 04    	shl al, 4
0045+  0529 8C          	or al, bl
0046+  052A E5          	pop b
0047+  052B 09          	ret	
0048+  052C             
0049+  052C             
0050+  052C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  052C             ; printf
0052+  052C             ; no need for explanations!
0053+  052C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  052C             printf:
0055+  052C 09          	ret
0056+  052D             
0057+  052D             
0058+  052D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  052D             ; scanf
0060+  052D             ; no need for explanations!
0061+  052D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  052D             scanf:
0063+  052D 09          	ret
0064+  052E             
0065+  052E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  052E             ; ITOA
0067+  052E             ; 8bit value in BL
0068+  052E             ; 2 byte ASCII result in A
0069+  052E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  052E             itoa:
0071+  052E DA          	push d
0072+  052F D8          	push b
0073+  0530 A7 00       	mov bh, 0
0074+  0532 FD A4 04    	shr bl, 4	
0075+  0535 74          	mov d, b
0076+  0536 1F F4 04    	mov al, [d + s_hex_digits]
0077+  0539 23          	mov ah, al
0078+  053A             	
0079+  053A E5          	pop b
0080+  053B D8          	push b
0081+  053C A7 00       	mov bh, 0
0082+  053E FD 87 0F    	and bl, $0F
0083+  0541 74          	mov d, b
0084+  0542 1F F4 04    	mov al, [d + s_hex_digits]
0085+  0545 E5          	pop b
0086+  0546 E7          	pop d
0087+  0547 09          	ret
0088+  0548             
0089+  0548             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0548             ; HEX STRING TO BINARY
0091+  0548             ; di = destination address
0092+  0548             ; si = source
0093+  0548             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0548             hex_to_int:
0095+  0548             hex_to_int_L1:
0096+  0548 F6          	lodsb					; load from [SI] to AL
0097+  0549 B9 00       	cmp al, 0				; check if ASCII 0
0098+  054B C6 58 05    	jz hex_to_int_ret
0099+  054E 36          	mov bh, al
0100+  054F F6          	lodsb
0101+  0550 2F          	mov bl, al
0102+  0551 07 1C 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0554 F7          	stosb					; store AL to [DI]
0104+  0555 0A 48 05    	jmp hex_to_int_L1
0105+  0558             hex_to_int_ret:
0106+  0558 09          	ret		
0107+  0559             
0108+  0559             
0109+  0559             
0110+  0559             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0559             ; GETCHAR
0112+  0559             ; char in ah
0113+  0559             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0559             getchar:
0115+  0559 DB          	push al
0116+  055A             getchar_retry:
0117+  055A FD 0C       	sti
0118+  055C 19 01       	mov al, 1
0119+  055E 05 03       	syscall sys_io			; receive in AH
0120+  0560 B9 00       	cmp al, 0			; check if any char was receive
0121+  0562 C6 5A 05    	je getchar_retry
0122+  0565 E8          	pop al
0123+  0566 09          	ret
0124+  0567             
0125+  0567             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0567             ; PUTCHAR
0127+  0567             ; char in ah
0128+  0567             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0567             putchar:
0130+  0567 D7          	push a
0131+  0568 19 00       	mov al, 0
0132+  056A 05 03       	syscall sys_io			; char in AH
0133+  056C E4          	pop a
0134+  056D 09          	ret
0135+  056E             
0136+  056E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  056E             ;; INPUT A STRING
0138+  056E             ;; terminates with null
0139+  056E             ;; pointer in D
0140+  056E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  056E             gets:
0142+  056E D7          	push a
0143+  056F DA          	push d
0144+  0570             gets_loop:
0145+  0570 FD 0C       	sti
0146+  0572 19 01       	mov al, 1
0147+  0574 05 03       	syscall sys_io			; receive in AH
0148+  0576 B9 00       	cmp al, 0				; check error code (AL)
0149+  0578 C6 70 05    	je gets_loop			; if no char received, retry
0150+  057B             
0151+  057B 76 1B       	cmp ah, 27
0152+  057D C6 9E 05    	je gets_telnet_escape
0153+  0580 76 0A       	cmp ah, $0A				; LF
0154+  0582 C6 F7 05    	je gets_end
0155+  0585 76 0D       	cmp ah, $0D				; CR
0156+  0587 C6 F7 05    	je gets_end
0157+  058A 76 5C       	cmp ah, $5C				; '\\'
0158+  058C C6 CE 05    	je gets_escape
0159+  058F             	
0160+  058F 76 08       	cmp ah, $08			; check for backspace
0161+  0591 C6 9A 05    	je gets_backspace
0162+  0594             
0163+  0594 1A          	mov al, ah
0164+  0595 3E          	mov [d], al
0165+  0596 79          	inc d
0166+  0597 0A 70 05    	jmp gets_loop
0167+  059A             gets_backspace:
0168+  059A 7F          	dec d
0169+  059B 0A 70 05    	jmp gets_loop
0170+  059E             gets_telnet_escape:
0171+  059E FD 0C       	sti
0172+  05A0 19 01       	mov al, 1
0173+  05A2 05 03       	syscall sys_io				; receive in AH without echo
0174+  05A4 B9 00       	cmp al, 0					; check error code (AL)
0175+  05A6 C6 9E 05    	je gets_telnet_escape		; if no char received, retry
0176+  05A9 76 5B       	cmp ah, '['
0177+  05AB C7 70 05    	jne gets_loop
0178+  05AE             gets_telnet_escape_phase2:
0179+  05AE FD 0C       	sti
0180+  05B0 19 01       	mov al, 1
0181+  05B2 05 03       	syscall sys_io					; receive in AH without echo
0182+  05B4 B9 00       	cmp al, 0						; check error code (AL)
0183+  05B6 C6 AE 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  05B9 76 44       	cmp ah, 'D'
0185+  05BB C6 C6 05    	je gets_left_arrow
0186+  05BE 76 43       	cmp ah, 'C'
0187+  05C0 C6 CA 05    	je gets_right_arrow
0188+  05C3 0A 70 05    	jmp gets_loop
0189+  05C6             gets_left_arrow:
0190+  05C6 7F          	dec d
0191+  05C7 0A 70 05    	jmp gets_loop
0192+  05CA             gets_right_arrow:
0193+  05CA 79          	inc d
0194+  05CB 0A 70 05    	jmp gets_loop
0195+  05CE             gets_escape:
0196+  05CE FD 0C       	sti
0197+  05D0 19 01       	mov al, 1
0198+  05D2 05 03       	syscall sys_io			; receive in AH
0199+  05D4 B9 00       	cmp al, 0				; check error code (AL)
0200+  05D6 C6 CE 05    	je gets_escape			; if no char received, retry
0201+  05D9 76 6E       	cmp ah, 'n'
0202+  05DB C6 E9 05    	je gets_LF
0203+  05DE 76 72       	cmp ah, 'r'
0204+  05E0 C6 F0 05    	je gets_CR
0205+  05E3 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  05E4 3E          	mov [d], al
0207+  05E5 79          	inc d
0208+  05E6 0A 70 05    	jmp gets_loop
0209+  05E9             gets_LF:
0210+  05E9 19 0A       	mov al, $0A
0211+  05EB 3E          	mov [d], al
0212+  05EC 79          	inc d
0213+  05ED 0A 70 05    	jmp gets_loop
0214+  05F0             gets_CR:
0215+  05F0 19 0D       	mov al, $0D
0216+  05F2 3E          	mov [d], al
0217+  05F3 79          	inc d
0218+  05F4 0A 70 05    	jmp gets_loop
0219+  05F7             gets_end:
0220+  05F7 19 00       	mov al, 0
0221+  05F9 3E          	mov [d], al				; terminate string
0222+  05FA E7          	pop d
0223+  05FB E4          	pop a
0224+  05FC 09          	ret
0225+  05FD             
0226+  05FD             
0227+  05FD             
0228+  05FD             
0229+  05FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  05FD             ;; INPUT TEXT
0231+  05FD             ;; terminated with CTRL+D
0232+  05FD             ;; pointer in D
0233+  05FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  05FD             gettxt:
0235+  05FD D7          	push a
0236+  05FE DA          	push d
0237+  05FF             gettxt_loop:
0238+  05FF 19 01       	mov al, 1
0239+  0601 05 03       	syscall sys_io			; receive in AH
0240+  0603 B9 00       	cmp al, 0				; check error code (AL)
0241+  0605 C6 FF 05    	je gettxt_loop		; if no char received, retry
0242+  0608 76 04       	cmp ah, 4			; EOT
0243+  060A C6 48 06    	je gettxt_end
0244+  060D 76 08       	cmp ah, $08			; check for backspace
0245+  060F C6 44 06    	je gettxt_backspace
0246+  0612 76 5C       	cmp ah, $5C				; '\\'
0247+  0614 C6 1D 06    	je gettxt_escape
0248+  0617 1A          	mov al, ah
0249+  0618 3E          	mov [d], al
0250+  0619 79          	inc d
0251+  061A 0A FF 05    	jmp gettxt_loop
0252+  061D             gettxt_escape:
0253+  061D 19 01       	mov al, 1
0254+  061F 05 03       	syscall sys_io			; receive in AH
0255+  0621 B9 00       	cmp al, 0				; check error code (AL)
0256+  0623 C6 1D 06    	je gettxt_escape		; if no char received, retry
0257+  0626 76 6E       	cmp ah, 'n'
0258+  0628 C6 36 06    	je gettxt_LF
0259+  062B 76 72       	cmp ah, 'r'
0260+  062D C6 3D 06    	je gettxt_CR
0261+  0630 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  0631 3E          	mov [d], al
0263+  0632 79          	inc d
0264+  0633 0A FF 05    	jmp gettxt_loop
0265+  0636             gettxt_LF:
0266+  0636 19 0A       	mov al, $0A
0267+  0638 3E          	mov [d], al
0268+  0639 79          	inc d
0269+  063A 0A FF 05    	jmp gettxt_loop
0270+  063D             gettxt_CR:
0271+  063D 19 0D       	mov al, $0D
0272+  063F 3E          	mov [d], al
0273+  0640 79          	inc d
0274+  0641 0A FF 05    	jmp gettxt_loop
0275+  0644             gettxt_backspace:
0276+  0644 7F          	dec d
0277+  0645 0A FF 05    	jmp gettxt_loop
0278+  0648             gettxt_end:
0279+  0648 19 00       	mov al, 0
0280+  064A 3E          	mov [d], al				; terminate string
0281+  064B E7          	pop d
0282+  064C E4          	pop a
0283+  064D 09          	ret
0284+  064E             
0285+  064E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  064E             ; PRINT NEW LINE
0287+  064E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  064E             printnl:
0289+  064E D7          	push a
0290+  064F 10 00 0A    	mov a, $0A00
0291+  0652 05 03       	syscall sys_io
0292+  0654 10 00 0D    	mov a, $0D00
0293+  0657 05 03       	syscall sys_io
0294+  0659 E4          	pop a
0295+  065A 09          	ret
0296+  065B             
0297+  065B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  065B             ; strtoint
0299+  065B             ; 4 digit hex string number in d
0300+  065B             ; integer returned in A
0301+  065B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  065B             strtointx:
0303+  065B D8          	push b
0304+  065C 32          	mov bl, [d]
0305+  065D 37          	mov bh, bl
0306+  065E 33 01 00    	mov bl, [d + 1]
0307+  0661 07 1C 05    	call atoi				; convert to int in AL
0308+  0664 23          	mov ah, al				; move to AH
0309+  0665 33 02 00    	mov bl, [d + 2]
0310+  0668 37          	mov bh, bl
0311+  0669 33 03 00    	mov bl, [d + 3]
0312+  066C 07 1C 05    	call atoi				; convert to int in AL
0313+  066F E5          	pop b
0314+  0670 09          	ret
0315+  0671             
0316+  0671             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  0671             ; strtoint
0318+  0671             ; 5 digit base10 string number in d
0319+  0671             ; integer returned in A
0320+  0671             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  0671             strtoint:
0322+  0671 E2          	push si
0323+  0672 D8          	push b
0324+  0673 D9          	push c
0325+  0674 DA          	push d
0326+  0675 07 A4 04    	call strlen			; get string length in C
0327+  0678 7E          	dec c
0328+  0679 FD 4E       	mov si, d
0329+  067B 12          	mov a, c
0330+  067C FD 99       	shl a
0331+  067E 3B 04 05    	mov d, table_power
0332+  0681 59          	add d, a
0333+  0682 38 00 00    	mov c, 0
0334+  0685             strtoint_L0:
0335+  0685 F6          	lodsb			; load ASCII to al
0336+  0686 B9 00       	cmp al, 0
0337+  0688 C6 9B 06    	je strtoint_end
0338+  068B 6F 30       	sub al, $30		; make into integer
0339+  068D 22 00       	mov ah, 0
0340+  068F 2A          	mov b, [d]
0341+  0690 AC          	mul a, b			; result in B since it fits in 16bits
0342+  0691 11          	mov a, b
0343+  0692 28          	mov b, c
0344+  0693 54          	add a, b
0345+  0694 39          	mov c, a
0346+  0695 63 02 00    	sub d, 2
0347+  0698 0A 85 06    	jmp strtoint_L0
0348+  069B             strtoint_end:
0349+  069B 12          	mov a, c
0350+  069C E7          	pop d
0351+  069D E6          	pop c
0352+  069E E5          	pop b
0353+  069F EF          	pop si
0354+  06A0 09          	ret
0355+  06A1             
0356+  06A1             
0357+  06A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  06A1             ; PRINT NULL TERMINATED STRING
0359+  06A1             ; pointer in D
0360+  06A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  06A1             puts:
0362+  06A1 D7          	push a
0363+  06A2 DA          	push d
0364+  06A3             puts_L1:
0365+  06A3 1E          	mov al, [d]
0366+  06A4 B9 00       	cmp al, 0
0367+  06A6 C6 B2 06    	jz puts_END
0368+  06A9 23          	mov ah, al
0369+  06AA 19 00       	mov al, 0
0370+  06AC 05 03       	syscall sys_io
0371+  06AE 79          	inc d
0372+  06AF 0A A3 06    	jmp puts_L1
0373+  06B2             puts_END:
0374+  06B2 E7          	pop d
0375+  06B3 E4          	pop a
0376+  06B4 09          	ret
0377+  06B5             
0378+  06B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  06B5             ; PRINT N SIZE STRING
0380+  06B5             ; pointer in D
0381+  06B5             ; size in C
0382+  06B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  06B5             putsn:
0384+  06B5 DB          	push al
0385+  06B6 DA          	push d
0386+  06B7 D9          	push c
0387+  06B8             putsn_L0:
0388+  06B8 1E          	mov al, [d]
0389+  06B9 23          	mov ah, al
0390+  06BA 19 00       	mov al, 0
0391+  06BC 05 03       	syscall sys_io
0392+  06BE 79          	inc d
0393+  06BF 7E          	dec c	
0394+  06C0 C2 00 00    	cmp c, 0
0395+  06C3 C7 B8 06    	jne putsn_L0
0396+  06C6             putsn_end:
0397+  06C6 E6          	pop c
0398+  06C7 E7          	pop d
0399+  06C8 E8          	pop al
0400+  06C9 09          	ret
0401+  06CA             
0402+  06CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  06CA             ; print 16bit decimal number
0404+  06CA             ; input number in A
0405+  06CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  06CA             print_u16d:
0407+  06CA D7          	push a
0408+  06CB D8          	push b
0409+  06CC 26 10 27    	mov b, 10000
0410+  06CF AE          	div a, b			; get 10000 coeff.
0411+  06D0 07 F6 06    	call print_number
0412+  06D3 11          	mov a, b
0413+  06D4 26 E8 03    	mov b, 1000
0414+  06D7 AE          	div a, b			; get 10000 coeff.
0415+  06D8 07 F6 06    	call print_number
0416+  06DB 11          	mov a, b
0417+  06DC 26 64 00    	mov b, 100
0418+  06DF AE          	div a, b
0419+  06E0 07 F6 06    	call print_number
0420+  06E3 11          	mov a, b
0421+  06E4 26 0A 00    	mov b, 10
0422+  06E7 AE          	div a, b
0423+  06E8 07 F6 06    	call print_number
0424+  06EB 11          	mov a, b
0425+  06EC 6A 30       	add al, $30
0426+  06EE 23          	mov ah, al
0427+  06EF 19 00       	mov al, 0
0428+  06F1 05 03       	syscall sys_io	; print coeff
0429+  06F3 E5          	pop b
0430+  06F4 E4          	pop a
0431+  06F5 09          	ret
0432+  06F6             
0433+  06F6             
0434+  06F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  06F6             ; if A == 0, print space
0436+  06F6             ; else print A
0437+  06F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  06F6             print_number:
0439+  06F6 6A 30       	add al, $30
0440+  06F8 23          	mov ah, al
0441+  06F9 07 67 05    	call putchar
0442+  06FC 09          	ret
0443+  06FD             
0444+  06FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06FD             ; PRINT 16BIT HEX INTEGER
0446+  06FD             ; integer value in reg B
0447+  06FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06FD             print_u16x:
0449+  06FD D7          	push a
0450+  06FE D8          	push b
0451+  06FF DD          	push bl
0452+  0700 30          	mov bl, bh
0453+  0701 07 2E 05    	call itoa				; convert bh to char in A
0454+  0704 2F          	mov bl, al				; save al
0455+  0705 19 00       	mov al, 0
0456+  0707 05 03       	syscall sys_io				; display AH
0457+  0709 24          	mov ah, bl				; retrieve al
0458+  070A 19 00       	mov al, 0
0459+  070C 05 03       	syscall sys_io				; display AL
0460+  070E             
0461+  070E EA          	pop bl
0462+  070F 07 2E 05    	call itoa				; convert bh to char in A
0463+  0712 2F          	mov bl, al				; save al
0464+  0713 19 00       	mov al, 0
0465+  0715 05 03       	syscall sys_io				; display AH
0466+  0717 24          	mov ah, bl				; retrieve al
0467+  0718 19 00       	mov al, 0
0468+  071A 05 03       	syscall sys_io				; display AL
0469+  071C             
0470+  071C E5          	pop b
0471+  071D E4          	pop a
0472+  071E 09          	ret
0473+  071F             
0474+  071F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  071F             ; INPUT 16BIT HEX INTEGER
0476+  071F             ; read 16bit integer into A
0477+  071F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  071F             scan_u16x:
0479+  071F F8 10 00    	enter 16
0480+  0722 D8          	push b
0481+  0723 DA          	push d
0482+  0724             
0483+  0724 FA F1 FF    	lea d, [bp + -15]
0484+  0727 07 6E 05    	call gets				; get number
0485+  072A             
0486+  072A 32          	mov bl, [d]
0487+  072B 37          	mov bh, bl
0488+  072C 33 01 00    	mov bl, [d + 1]
0489+  072F 07 1C 05    	call atoi				; convert to int in AL
0490+  0732 23          	mov ah, al				; move to AH
0491+  0733             
0492+  0733 33 02 00    	mov bl, [d + 2]
0493+  0736 37          	mov bh, bl
0494+  0737 33 03 00    	mov bl, [d + 3]
0495+  073A 07 1C 05    	call atoi				; convert to int in AL
0496+  073D             
0497+  073D E7          	pop d
0498+  073E E5          	pop b
0499+  073F F9          	leave
0500+  0740 09          	ret
0501+  0741             
0502+  0741             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  0741             ; PRINT 8bit HEX INTEGER
0504+  0741             ; integer value in reg bl
0505+  0741             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  0741             print_u8x:
0507+  0741 D7          	push a
0508+  0742 DD          	push bl
0509+  0743             
0510+  0743 07 2E 05    	call itoa				; convert bl to char in A
0511+  0746 2F          	mov bl, al				; save al
0512+  0747 19 00       	mov al, 0
0513+  0749 05 03       	syscall sys_io				; display AH
0514+  074B 24          	mov ah, bl				; retrieve al
0515+  074C 19 00       	mov al, 0
0516+  074E 05 03       	syscall sys_io				; display AL
0517+  0750             
0518+  0750 EA          	pop bl
0519+  0751 E4          	pop a
0520+  0752 09          	ret
0521+  0753             
0522+  0753             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0753             ; print 8bit decimal unsigned number
0524+  0753             ; input number in AL
0525+  0753             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0753             print_u8d:
0527+  0753 D7          	push a
0528+  0754 D8          	push b
0529+  0755             
0530+  0755 22 00       	mov ah, 0
0531+  0757 26 64 00    	mov b, 100
0532+  075A AE          	div a, b
0533+  075B D8          	push b			; save remainder
0534+  075C B9 00       	cmp al, 0
0535+  075E C6 68 07    	je skip100
0536+  0761 6A 30       	add al, $30
0537+  0763 23          	mov ah, al
0538+  0764 19 00       	mov al, 0
0539+  0766 05 03       	syscall sys_io	; print coeff
0540+  0768             skip100:
0541+  0768 E4          	pop a
0542+  0769 22 00       	mov ah, 0
0543+  076B 26 0A 00    	mov b, 10
0544+  076E AE          	div a, b
0545+  076F D8          	push b			; save remainder
0546+  0770 B9 00       	cmp al, 0
0547+  0772 C6 7C 07    	je skip10
0548+  0775 6A 30       	add al, $30
0549+  0777 23          	mov ah, al
0550+  0778 19 00       	mov al, 0
0551+  077A 05 03       	syscall sys_io	; print coeff
0552+  077C             skip10:
0553+  077C E4          	pop a
0554+  077D 1B          	mov al, bl
0555+  077E 6A 30       	add al, $30
0556+  0780 23          	mov ah, al
0557+  0781 19 00       	mov al, 0
0558+  0783 05 03       	syscall sys_io	; print coeff
0559+  0785 E5          	pop b
0560+  0786 E4          	pop a
0561+  0787 09          	ret
0562+  0788             
0563+  0788             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  0788             ; INPUT 8BIT HEX INTEGER
0565+  0788             ; read 8bit integer into AL
0566+  0788             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  0788             scan_u8x:
0568+  0788 F8 04 00    	enter 4
0569+  078B D8          	push b
0570+  078C DA          	push d
0571+  078D             
0572+  078D FA FD FF    	lea d, [bp + -3]
0573+  0790 07 6E 05    	call gets				; get number
0574+  0793             
0575+  0793 32          	mov bl, [d]
0576+  0794 37          	mov bh, bl
0577+  0795 33 01 00    	mov bl, [d + 1]
0578+  0798 07 1C 05    	call atoi				; convert to int in AL
0579+  079B             
0580+  079B E7          	pop d
0581+  079C E5          	pop b
0582+  079D F9          	leave
0583+  079E 09          	ret
0584+  079F             
0585+  079F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  079F             ; input decimal number
0587+  079F             ; result in A
0588+  079F             ; 655'\0'
0589+  079F             ; low--------high
0590+  079F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  079F             scan_u16d:
0592+  079F F8 08 00    	enter 8
0593+  07A2 E2          	push si
0594+  07A3 D8          	push b
0595+  07A4 D9          	push c
0596+  07A5 DA          	push d
0597+  07A6 FA F9 FF    	lea d, [bp +- 7]
0598+  07A9 07 6E 05    	call gets
0599+  07AC 07 A4 04    	call strlen			; get string length in C
0600+  07AF 7E          	dec c
0601+  07B0 FD 4E       	mov si, d
0602+  07B2 12          	mov a, c
0603+  07B3 FD 99       	shl a
0604+  07B5 3B 04 05    	mov d, table_power
0605+  07B8 59          	add d, a
0606+  07B9 38 00 00    	mov c, 0
0607+  07BC             mul_loop:
0608+  07BC F6          	lodsb			; load ASCII to al
0609+  07BD B9 00       	cmp al, 0
0610+  07BF C6 D2 07    	je mul_exit
0611+  07C2 6F 30       	sub al, $30		; make into integer
0612+  07C4 22 00       	mov ah, 0
0613+  07C6 2A          	mov b, [d]
0614+  07C7 AC          	mul a, b			; result in B since it fits in 16bits
0615+  07C8 11          	mov a, b
0616+  07C9 28          	mov b, c
0617+  07CA 54          	add a, b
0618+  07CB 39          	mov c, a
0619+  07CC 63 02 00    	sub d, 2
0620+  07CF 0A BC 07    	jmp mul_loop
0621+  07D2             mul_exit:
0622+  07D2 12          	mov a, c
0623+  07D3 E7          	pop d
0624+  07D4 E6          	pop c
0625+  07D5 E5          	pop b
0626+  07D6 EF          	pop si
0627+  07D7 F9          	leave
0628+  07D8 09          	ret
0058   07D9             ; --- end include block
0059   07D9             
0060   07D9             .end
tasm: Number of errors = 0
