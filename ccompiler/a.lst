0001   0000             ; --- FILENAME: life.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; n
0011   0408 26 8E 22      mov b, _string_0
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 07 EC 04      call print
0015   0411 51 02 00      add sp, 2
0016   0414 07 F7 04      call getn
0017   0417 D7            push a
0018   0418 11            mov a, b
0019   0419 45 FD FF      mov [bp + -3], a ; n
0020   041C E4            pop a
0021   041D 07 61 04      call init_game
0022   0420             _for1_init:
0023   0420 26 00 00      mov b, 0
0024   0423 D7            push a
0025   0424 11            mov a, b
0026   0425 45 FF FF      mov [bp + -1], a ; i
0027   0428 E4            pop a
0028   0429             _for1_cond:
0029   0429 2C FF FF      mov b, [bp + -1] ; i
0030   042C D7            push a
0031   042D 11            mov a, b
0032   042E 2C FD FF      mov b, [bp + -3] ; n
0033   0431 B0            cmp a, b
0034   0432 0E            lodflgs
0035   0433 87 02         and al, %00000010 ; <
0036   0435 22 00         mov ah, 0
0037   0437 B9 00         cmp al, 0
0038   0439 0E            lodflgs
0039   043A 96            not al
0040   043B 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0041   043D 22 00         mov ah, 0
0042   043F 27            mov b, a
0043   0440 E4            pop a
0044   0441 C0 00 00      cmp b, 0
0045   0444 C6 5B 04      je _for1_exit
0046   0447             _for1_block:
0047   0447 07 07 05      call print_game
0048   044A 07 BF 05      call update_game
0049   044D             _for1_update:
0050   044D 2C FF FF      mov b, [bp + -1] ; i
0051   0450 FD 77         inc b
0052   0452 D7            push a
0053   0453 11            mov a, b
0054   0454 45 FF FF      mov [bp + -1], a ; i
0055   0457 E4            pop a
0056   0458 0A 29 04      jmp _for1_cond
0057   045B             _for1_exit:
0058   045B 26 00 00      mov b, 0
0059   045E F9            leave
0060   045F 05 0B         syscall sys_terminate_proc
0061   0461             init_game:
0062   0461 D2            push bp
0063   0462 9B            mov bp, sp
0064   0463 29 0A 16      mov b, [curr_state]
0065   0466 74            mov d, b
0066   0467 26 04 00      mov b, 4
0067   046A 10 50 00      mov a, 80
0068   046D AC            mul a, b
0069   046E 5A            add d, b
0070   046F 26 04 00      mov b, 4
0071   0472 10 02 00      mov a, 2
0072   0475 AC            mul a, b
0073   0476 5A            add d, b
0074   0477 DA            push d
0075   0478 26 01 00      mov b, 1
0076   047B E7            pop d
0077   047C 11            mov a, b
0078   047D 43            mov [d], a
0079   047E 29 0A 16      mov b, [curr_state]
0080   0481 74            mov d, b
0081   0482 26 04 00      mov b, 4
0082   0485 10 50 00      mov a, 80
0083   0488 AC            mul a, b
0084   0489 5A            add d, b
0085   048A 26 05 00      mov b, 5
0086   048D 10 02 00      mov a, 2
0087   0490 AC            mul a, b
0088   0491 5A            add d, b
0089   0492 DA            push d
0090   0493 26 01 00      mov b, 1
0091   0496 E7            pop d
0092   0497 11            mov a, b
0093   0498 43            mov [d], a
0094   0499 29 0A 16      mov b, [curr_state]
0095   049C 74            mov d, b
0096   049D 26 04 00      mov b, 4
0097   04A0 10 50 00      mov a, 80
0098   04A3 AC            mul a, b
0099   04A4 5A            add d, b
0100   04A5 26 06 00      mov b, 6
0101   04A8 10 02 00      mov a, 2
0102   04AB AC            mul a, b
0103   04AC 5A            add d, b
0104   04AD DA            push d
0105   04AE 26 01 00      mov b, 1
0106   04B1 E7            pop d
0107   04B2 11            mov a, b
0108   04B3 43            mov [d], a
0109   04B4 29 0A 16      mov b, [curr_state]
0110   04B7 74            mov d, b
0111   04B8 26 03 00      mov b, 3
0112   04BB 10 50 00      mov a, 80
0113   04BE AC            mul a, b
0114   04BF 5A            add d, b
0115   04C0 26 06 00      mov b, 6
0116   04C3 10 02 00      mov a, 2
0117   04C6 AC            mul a, b
0118   04C7 5A            add d, b
0119   04C8 DA            push d
0120   04C9 26 01 00      mov b, 1
0121   04CC E7            pop d
0122   04CD 11            mov a, b
0123   04CE 43            mov [d], a
0124   04CF 29 0A 16      mov b, [curr_state]
0125   04D2 74            mov d, b
0126   04D3 26 02 00      mov b, 2
0127   04D6 10 50 00      mov a, 80
0128   04D9 AC            mul a, b
0129   04DA 5A            add d, b
0130   04DB 26 05 00      mov b, 5
0131   04DE 10 02 00      mov a, 2
0132   04E1 AC            mul a, b
0133   04E2 5A            add d, b
0134   04E3 DA            push d
0135   04E4 26 01 00      mov b, 1
0136   04E7 E7            pop d
0137   04E8 11            mov a, b
0138   04E9 43            mov [d], a
0139   04EA F9            leave
0140   04EB 09            ret
0141   04EC             print:
0142   04EC D2            push bp
0143   04ED 9B            mov bp, sp
0144   04EE             
0145   04EE             ; --- BEGIN INLINE ASM BLOCK
0146   04EE 17 05 00      mov a, [bp + 5]
0147   04F1 3C            mov d, a
0148   04F2 07 E8 24      call puts
0149   04F5             ; --- END INLINE ASM BLOCK
0150   04F5             
0151   04F5 F9            leave
0152   04F6 09            ret
0153   04F7             getn:
0154   04F7 D2            push bp
0155   04F8 9B            mov bp, sp
0156   04F9 52 02 00      sub sp, 2 ; n
0157   04FC             
0158   04FC             ; --- BEGIN INLINE ASM BLOCK
0159   04FC 07 E6 25      call scan_u16d
0160   04FF 45 FF FF      mov [bp + -1], a
0161   0502             ; --- END INLINE ASM BLOCK
0162   0502             
0163   0502 2C FF FF      mov b, [bp + -1] ; n
0164   0505 F9            leave
0165   0506 09            ret
0166   0507             print_game:
0167   0507 D2            push bp
0168   0508 9B            mov bp, sp
0169   0509 52 02 00      sub sp, 2 ; i
0170   050C 52 02 00      sub sp, 2 ; j
0171   050F             _for2_init:
0172   050F 26 00 00      mov b, 0
0173   0512 D7            push a
0174   0513 11            mov a, b
0175   0514 45 FF FF      mov [bp + -1], a ; i
0176   0517 E4            pop a
0177   0518             _for2_cond:
0178   0518 2C FF FF      mov b, [bp + -1] ; i
0179   051B D7            push a
0180   051C 11            mov a, b
0181   051D 26 28 00      mov b, 40
0182   0520 B0            cmp a, b
0183   0521 0E            lodflgs
0184   0522 87 02         and al, %00000010 ; <
0185   0524 22 00         mov ah, 0
0186   0526 B9 00         cmp al, 0
0187   0528 0E            lodflgs
0188   0529 96            not al
0189   052A 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0190   052C 22 00         mov ah, 0
0191   052E 27            mov b, a
0192   052F E4            pop a
0193   0530 C0 00 00      cmp b, 0
0194   0533 C6 BD 05      je _for2_exit
0195   0536             _for2_block:
0196   0536             _for3_init:
0197   0536 26 00 00      mov b, 0
0198   0539 D7            push a
0199   053A 11            mov a, b
0200   053B 45 FD FF      mov [bp + -3], a ; j
0201   053E E4            pop a
0202   053F             _for3_cond:
0203   053F 2C FD FF      mov b, [bp + -3] ; j
0204   0542 D7            push a
0205   0543 11            mov a, b
0206   0544 26 28 00      mov b, 40
0207   0547 B0            cmp a, b
0208   0548 0E            lodflgs
0209   0549 87 02         and al, %00000010 ; <
0210   054B 22 00         mov ah, 0
0211   054D B9 00         cmp al, 0
0212   054F 0E            lodflgs
0213   0550 96            not al
0214   0551 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0215   0553 22 00         mov ah, 0
0216   0555 27            mov b, a
0217   0556 E4            pop a
0218   0557 C0 00 00      cmp b, 0
0219   055A C6 A3 05      je _for3_exit
0220   055D             _for3_block:
0221   055D             _if4_cond:
0222   055D 29 0A 16      mov b, [curr_state]
0223   0560 D7            push a
0224   0561 74            mov d, b
0225   0562 2C FF FF      mov b, [bp + -1] ; i
0226   0565 10 50 00      mov a, 80
0227   0568 AC            mul a, b
0228   0569 5A            add d, b
0229   056A 2C FD FF      mov b, [bp + -3] ; j
0230   056D 10 02 00      mov a, 2
0231   0570 AC            mul a, b
0232   0571 5A            add d, b
0233   0572 2A            mov b, [d]
0234   0573 E4            pop a
0235   0574 C0 00 00      cmp b, 0
0236   0577 C6 89 05      je _if4_else
0237   057A             _if4_true:
0238   057A 26 9C 22      mov b, _string_1
0239   057D FD AB         swp b
0240   057F D8            push b
0241   0580 07 EC 04      call print
0242   0583 51 02 00      add sp, 2
0243   0586 0A 95 05      jmp _if4_exit
0244   0589             _if4_else:
0245   0589 26 9F 22      mov b, _string_2
0246   058C FD AB         swp b
0247   058E D8            push b
0248   058F 07 EC 04      call print
0249   0592 51 02 00      add sp, 2
0250   0595             _if4_exit:
0251   0595             _for3_update:
0252   0595 2C FD FF      mov b, [bp + -3] ; j
0253   0598 FD 77         inc b
0254   059A D7            push a
0255   059B 11            mov a, b
0256   059C 45 FD FF      mov [bp + -3], a ; j
0257   059F E4            pop a
0258   05A0 0A 3F 05      jmp _for3_cond
0259   05A3             _for3_exit:
0260   05A3 26 A2 22      mov b, _string_3
0261   05A6 FD AB         swp b
0262   05A8 D8            push b
0263   05A9 07 EC 04      call print
0264   05AC 51 02 00      add sp, 2
0265   05AF             _for2_update:
0266   05AF 2C FF FF      mov b, [bp + -1] ; i
0267   05B2 FD 77         inc b
0268   05B4 D7            push a
0269   05B5 11            mov a, b
0270   05B6 45 FF FF      mov [bp + -1], a ; i
0271   05B9 E4            pop a
0272   05BA 0A 18 05      jmp _for2_cond
0273   05BD             _for2_exit:
0274   05BD F9            leave
0275   05BE 09            ret
0276   05BF             update_game:
0277   05BF D2            push bp
0278   05C0 9B            mov bp, sp
0279   05C1 52 02 00      sub sp, 2 ; i
0280   05C4 52 02 00      sub sp, 2 ; j
0281   05C7 52 02 00      sub sp, 2 ; ni
0282   05CA 52 02 00      sub sp, 2 ; nj
0283   05CD 52 02 00      sub sp, 2 ; count
0284   05D0             _for5_init:
0285   05D0 26 00 00      mov b, 0
0286   05D3 D7            push a
0287   05D4 11            mov a, b
0288   05D5 45 FF FF      mov [bp + -1], a ; i
0289   05D8 E4            pop a
0290   05D9             _for5_cond:
0291   05D9 2C FF FF      mov b, [bp + -1] ; i
0292   05DC D7            push a
0293   05DD 11            mov a, b
0294   05DE 26 28 00      mov b, 40
0295   05E1 B0            cmp a, b
0296   05E2 0E            lodflgs
0297   05E3 87 02         and al, %00000010 ; <
0298   05E5 22 00         mov ah, 0
0299   05E7 B9 00         cmp al, 0
0300   05E9 0E            lodflgs
0301   05EA 96            not al
0302   05EB 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0303   05ED 22 00         mov ah, 0
0304   05EF 27            mov b, a
0305   05F0 E4            pop a
0306   05F1 C0 00 00      cmp b, 0
0307   05F4 C6 69 06      je _for5_exit
0308   05F7             _for5_block:
0309   05F7             _for6_init:
0310   05F7 26 00 00      mov b, 0
0311   05FA D7            push a
0312   05FB 11            mov a, b
0313   05FC 45 FD FF      mov [bp + -3], a ; j
0314   05FF E4            pop a
0315   0600             _for6_cond:
0316   0600 2C FD FF      mov b, [bp + -3] ; j
0317   0603 D7            push a
0318   0604 11            mov a, b
0319   0605 26 28 00      mov b, 40
0320   0608 B0            cmp a, b
0321   0609 0E            lodflgs
0322   060A 87 02         and al, %00000010 ; <
0323   060C 22 00         mov ah, 0
0324   060E B9 00         cmp al, 0
0325   0610 0E            lodflgs
0326   0611 96            not al
0327   0612 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0328   0614 22 00         mov ah, 0
0329   0616 27            mov b, a
0330   0617 E4            pop a
0331   0618 C0 00 00      cmp b, 0
0332   061B C6 5B 06      je _for6_exit
0333   061E             _for6_block:
0334   061E 29 8C 22      mov b, [next_state]
0335   0621 74            mov d, b
0336   0622 2C FF FF      mov b, [bp + -1] ; i
0337   0625 10 50 00      mov a, 80
0338   0628 AC            mul a, b
0339   0629 5A            add d, b
0340   062A 2C FD FF      mov b, [bp + -3] ; j
0341   062D 10 02 00      mov a, 2
0342   0630 AC            mul a, b
0343   0631 5A            add d, b
0344   0632 DA            push d
0345   0633 29 0A 16      mov b, [curr_state]
0346   0636 D7            push a
0347   0637 74            mov d, b
0348   0638 2C FF FF      mov b, [bp + -1] ; i
0349   063B 10 50 00      mov a, 80
0350   063E AC            mul a, b
0351   063F 5A            add d, b
0352   0640 2C FD FF      mov b, [bp + -3] ; j
0353   0643 10 02 00      mov a, 2
0354   0646 AC            mul a, b
0355   0647 5A            add d, b
0356   0648 2A            mov b, [d]
0357   0649 E4            pop a
0358   064A E7            pop d
0359   064B 11            mov a, b
0360   064C 43            mov [d], a
0361   064D             _for6_update:
0362   064D 2C FD FF      mov b, [bp + -3] ; j
0363   0650 FD 77         inc b
0364   0652 D7            push a
0365   0653 11            mov a, b
0366   0654 45 FD FF      mov [bp + -3], a ; j
0367   0657 E4            pop a
0368   0658 0A 00 06      jmp _for6_cond
0369   065B             _for6_exit:
0370   065B             _for5_update:
0371   065B 2C FF FF      mov b, [bp + -1] ; i
0372   065E FD 77         inc b
0373   0660 D7            push a
0374   0661 11            mov a, b
0375   0662 45 FF FF      mov [bp + -1], a ; i
0376   0665 E4            pop a
0377   0666 0A D9 05      jmp _for5_cond
0378   0669             _for5_exit:
0379   0669             _for7_init:
0380   0669 26 01 00      mov b, 1
0381   066C D7            push a
0382   066D 11            mov a, b
0383   066E 45 FF FF      mov [bp + -1], a ; i
0384   0671 E4            pop a
0385   0672             _for7_cond:
0386   0672 2C FF FF      mov b, [bp + -1] ; i
0387   0675 D7            push a
0388   0676 11            mov a, b
0389   0677 26 28 00      mov b, 40
0390   067A B0            cmp a, b
0391   067B 0E            lodflgs
0392   067C 87 02         and al, %00000010 ; <
0393   067E 22 00         mov ah, 0
0394   0680 B9 00         cmp al, 0
0395   0682 0E            lodflgs
0396   0683 96            not al
0397   0684 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0398   0686 22 00         mov ah, 0
0399   0688 27            mov b, a
0400   0689 E4            pop a
0401   068A C0 00 00      cmp b, 0
0402   068D C6 EF 08      je _for7_exit
0403   0690             _for7_block:
0404   0690             _for8_init:
0405   0690 26 01 00      mov b, 1
0406   0693 D7            push a
0407   0694 11            mov a, b
0408   0695 45 FD FF      mov [bp + -3], a ; j
0409   0698 E4            pop a
0410   0699             _for8_cond:
0411   0699 2C FD FF      mov b, [bp + -3] ; j
0412   069C D7            push a
0413   069D 11            mov a, b
0414   069E 26 28 00      mov b, 40
0415   06A1 B0            cmp a, b
0416   06A2 0E            lodflgs
0417   06A3 87 02         and al, %00000010 ; <
0418   06A5 22 00         mov ah, 0
0419   06A7 B9 00         cmp al, 0
0420   06A9 0E            lodflgs
0421   06AA 96            not al
0422   06AB 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0423   06AD 22 00         mov ah, 0
0424   06AF 27            mov b, a
0425   06B0 E4            pop a
0426   06B1 C0 00 00      cmp b, 0
0427   06B4 C6 E1 08      je _for8_exit
0428   06B7             _for8_block:
0429   06B7 26 00 00      mov b, 0
0430   06BA D7            push a
0431   06BB 11            mov a, b
0432   06BC 45 F7 FF      mov [bp + -9], a ; count
0433   06BF E4            pop a
0434   06C0             _for9_init:
0435   06C0 2C FF FF      mov b, [bp + -1] ; i
0436   06C3 D7            push a
0437   06C4 11            mov a, b
0438   06C5 26 01 00      mov b, 1
0439   06C8 60            sub a, b
0440   06C9 27            mov b, a
0441   06CA E4            pop a
0442   06CB D7            push a
0443   06CC 11            mov a, b
0444   06CD 45 FB FF      mov [bp + -5], a ; ni
0445   06D0 E4            pop a
0446   06D1             _for9_cond:
0447   06D1 2C FB FF      mov b, [bp + -5] ; ni
0448   06D4 D7            push a
0449   06D5 11            mov a, b
0450   06D6 2C FF FF      mov b, [bp + -1] ; i
0451   06D9 D7            push a
0452   06DA 11            mov a, b
0453   06DB 26 01 00      mov b, 1
0454   06DE 54            add a, b
0455   06DF 27            mov b, a
0456   06E0 E4            pop a
0457   06E1 B0            cmp a, b
0458   06E2 0E            lodflgs
0459   06E3 87 03         and al, %00000011 ; <=
0460   06E5 22 00         mov ah, 0
0461   06E7 B9 00         cmp al, 0
0462   06E9 0E            lodflgs
0463   06EA 96            not al
0464   06EB 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0465   06ED 22 00         mov ah, 0
0466   06EF 27            mov b, a
0467   06F0 E4            pop a
0468   06F1 C0 00 00      cmp b, 0
0469   06F4 C6 02 08      je _for9_exit
0470   06F7             _for9_block:
0471   06F7             _for10_init:
0472   06F7 2C FD FF      mov b, [bp + -3] ; j
0473   06FA D7            push a
0474   06FB 11            mov a, b
0475   06FC 26 01 00      mov b, 1
0476   06FF 60            sub a, b
0477   0700 27            mov b, a
0478   0701 E4            pop a
0479   0702 D7            push a
0480   0703 11            mov a, b
0481   0704 45 F9 FF      mov [bp + -7], a ; nj
0482   0707 E4            pop a
0483   0708             _for10_cond:
0484   0708 2C F9 FF      mov b, [bp + -7] ; nj
0485   070B D7            push a
0486   070C 11            mov a, b
0487   070D 2C FD FF      mov b, [bp + -3] ; j
0488   0710 D7            push a
0489   0711 11            mov a, b
0490   0712 26 01 00      mov b, 1
0491   0715 54            add a, b
0492   0716 27            mov b, a
0493   0717 E4            pop a
0494   0718 B0            cmp a, b
0495   0719 0E            lodflgs
0496   071A 87 03         and al, %00000011 ; <=
0497   071C 22 00         mov ah, 0
0498   071E B9 00         cmp al, 0
0499   0720 0E            lodflgs
0500   0721 96            not al
0501   0722 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0502   0724 22 00         mov ah, 0
0503   0726 27            mov b, a
0504   0727 E4            pop a
0505   0728 C0 00 00      cmp b, 0
0506   072B C6 F4 07      je _for10_exit
0507   072E             _for10_block:
0508   072E             _if11_cond:
0509   072E 2C FB FF      mov b, [bp + -5] ; ni
0510   0731 D7            push a
0511   0732 11            mov a, b
0512   0733 26 28 00      mov b, 40
0513   0736 B0            cmp a, b
0514   0737 0E            lodflgs
0515   0738 87 02         and al, %00000010 ; <
0516   073A 22 00         mov ah, 0
0517   073C B9 00         cmp al, 0
0518   073E 0E            lodflgs
0519   073F 96            not al
0520   0740 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0521   0742 22 00         mov ah, 0
0522   0744 27            mov b, a
0523   0745 E4            pop a
0524   0746 D7            push a
0525   0747 11            mov a, b
0526   0748 B9 00         cmp al, 0
0527   074A 0E            lodflgs
0528   074B 96            not al
0529   074C 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0530   074E 22 00         mov ah, 0
0531   0750 2C F9 FF      mov b, [bp + -7] ; nj
0532   0753 D7            push a
0533   0754 11            mov a, b
0534   0755 26 28 00      mov b, 40
0535   0758 B0            cmp a, b
0536   0759 0E            lodflgs
0537   075A 87 02         and al, %00000010 ; <
0538   075C 22 00         mov ah, 0
0539   075E B9 00         cmp al, 0
0540   0760 0E            lodflgs
0541   0761 96            not al
0542   0762 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0543   0764 22 00         mov ah, 0
0544   0766 27            mov b, a
0545   0767 E4            pop a
0546   0768 D7            push a
0547   0769 C1 00         cmp bl, 0
0548   076B 0E            lodflgs
0549   076C 96            not al
0550   076D 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0551   076F 22 00         mov ah, 0
0552   0771 27            mov b, a
0553   0772 E4            pop a
0554   0773 86            and a, b
0555   0774 27            mov b, a
0556   0775 E4            pop a
0557   0776 C0 00 00      cmp b, 0
0558   0779 C6 E6 07      je _if11_exit
0559   077C             _if11_true:
0560   077C             _if12_cond:
0561   077C 2C FB FF      mov b, [bp + -5] ; ni
0562   077F D7            push a
0563   0780 11            mov a, b
0564   0781 2C FF FF      mov b, [bp + -1] ; i
0565   0784 B0            cmp a, b
0566   0785 0E            lodflgs
0567   0786 87 01         and al, %00000001
0568   0788 8F 01         xor al, %00000001 ; !=
0569   078A 22 00         mov ah, 0
0570   078C B9 00         cmp al, 0
0571   078E 0E            lodflgs
0572   078F 96            not al
0573   0790 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0574   0792 22 00         mov ah, 0
0575   0794 27            mov b, a
0576   0795 E4            pop a
0577   0796 D7            push a
0578   0797 11            mov a, b
0579   0798 2C F9 FF      mov b, [bp + -7] ; nj
0580   079B D7            push a
0581   079C 11            mov a, b
0582   079D 2C FD FF      mov b, [bp + -3] ; j
0583   07A0 B0            cmp a, b
0584   07A1 0E            lodflgs
0585   07A2 87 01         and al, %00000001
0586   07A4 8F 01         xor al, %00000001 ; !=
0587   07A6 22 00         mov ah, 0
0588   07A8 B9 00         cmp al, 0
0589   07AA 0E            lodflgs
0590   07AB 96            not al
0591   07AC 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0592   07AE 22 00         mov ah, 0
0593   07B0 27            mov b, a
0594   07B1 E4            pop a
0595   07B2 8A            or a, b
0596   07B3 27            mov b, a
0597   07B4 E4            pop a
0598   07B5 C0 00 00      cmp b, 0
0599   07B8 C6 E3 07      je _if12_exit
0600   07BB             _if12_true:
0601   07BB 2C F7 FF      mov b, [bp + -9] ; count
0602   07BE D7            push a
0603   07BF 11            mov a, b
0604   07C0 29 0A 16      mov b, [curr_state]
0605   07C3 D7            push a
0606   07C4 74            mov d, b
0607   07C5 2C FB FF      mov b, [bp + -5] ; ni
0608   07C8 10 50 00      mov a, 80
0609   07CB AC            mul a, b
0610   07CC 5A            add d, b
0611   07CD 2C F9 FF      mov b, [bp + -7] ; nj
0612   07D0 10 02 00      mov a, 2
0613   07D3 AC            mul a, b
0614   07D4 5A            add d, b
0615   07D5 2A            mov b, [d]
0616   07D6 E4            pop a
0617   07D7 54            add a, b
0618   07D8 27            mov b, a
0619   07D9 E4            pop a
0620   07DA D7            push a
0621   07DB 11            mov a, b
0622   07DC 45 F7 FF      mov [bp + -9], a ; count
0623   07DF E4            pop a
0624   07E0 0A E3 07      jmp _if12_exit
0625   07E3             _if12_exit:
0626   07E3 0A E6 07      jmp _if11_exit
0627   07E6             _if11_exit:
0628   07E6             _for10_update:
0629   07E6 2C F9 FF      mov b, [bp + -7] ; nj
0630   07E9 FD 77         inc b
0631   07EB D7            push a
0632   07EC 11            mov a, b
0633   07ED 45 F9 FF      mov [bp + -7], a ; nj
0634   07F0 E4            pop a
0635   07F1 0A 08 07      jmp _for10_cond
0636   07F4             _for10_exit:
0637   07F4             _for9_update:
0638   07F4 2C FB FF      mov b, [bp + -5] ; ni
0639   07F7 FD 77         inc b
0640   07F9 D7            push a
0641   07FA 11            mov a, b
0642   07FB 45 FB FF      mov [bp + -5], a ; ni
0643   07FE E4            pop a
0644   07FF 0A D1 06      jmp _for9_cond
0645   0802             _for9_exit:
0646   0802             _if13_cond:
0647   0802 29 0A 16      mov b, [curr_state]
0648   0805 D7            push a
0649   0806 74            mov d, b
0650   0807 2C FF FF      mov b, [bp + -1] ; i
0651   080A 10 50 00      mov a, 80
0652   080D AC            mul a, b
0653   080E 5A            add d, b
0654   080F 2C FD FF      mov b, [bp + -3] ; j
0655   0812 10 02 00      mov a, 2
0656   0815 AC            mul a, b
0657   0816 5A            add d, b
0658   0817 2A            mov b, [d]
0659   0818 E4            pop a
0660   0819 D7            push a
0661   081A 11            mov a, b
0662   081B 26 00 00      mov b, 0
0663   081E B0            cmp a, b
0664   081F 0E            lodflgs
0665   0820 87 01         and al, %00000001
0666   0822 8F 01         xor al, %00000001 ; !=
0667   0824 22 00         mov ah, 0
0668   0826 B9 00         cmp al, 0
0669   0828 0E            lodflgs
0670   0829 96            not al
0671   082A 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0672   082C 22 00         mov ah, 0
0673   082E 27            mov b, a
0674   082F E4            pop a
0675   0830 C0 00 00      cmp b, 0
0676   0833 C6 97 08      je _if13_else
0677   0836             _if13_true:
0678   0836             _if14_cond:
0679   0836 2C F7 FF      mov b, [bp + -9] ; count
0680   0839 D7            push a
0681   083A 11            mov a, b
0682   083B 26 02 00      mov b, 2
0683   083E B0            cmp a, b
0684   083F 0E            lodflgs
0685   0840 87 02         and al, %00000010 ; <
0686   0842 22 00         mov ah, 0
0687   0844 B9 00         cmp al, 0
0688   0846 0E            lodflgs
0689   0847 96            not al
0690   0848 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0691   084A 22 00         mov ah, 0
0692   084C 27            mov b, a
0693   084D E4            pop a
0694   084E D7            push a
0695   084F 11            mov a, b
0696   0850 2C F7 FF      mov b, [bp + -9] ; count
0697   0853 D7            push a
0698   0854 11            mov a, b
0699   0855 26 03 00      mov b, 3
0700   0858 B0            cmp a, b
0701   0859 0E            lodflgs
0702   085A 87 03         and al, %00000011
0703   085C B9 00         cmp al, %00000000
0704   085E 0E            lodflgs
0705   085F 87 01         and al, %00000001 ; >
0706   0861 22 00         mov ah, 0
0707   0863 B9 00         cmp al, 0
0708   0865 0E            lodflgs
0709   0866 96            not al
0710   0867 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0711   0869 22 00         mov ah, 0
0712   086B 27            mov b, a
0713   086C E4            pop a
0714   086D 8A            or a, b
0715   086E 27            mov b, a
0716   086F E4            pop a
0717   0870 C0 00 00      cmp b, 0
0718   0873 C6 94 08      je _if14_exit
0719   0876             _if14_true:
0720   0876 29 8C 22      mov b, [next_state]
0721   0879 74            mov d, b
0722   087A 2C FF FF      mov b, [bp + -1] ; i
0723   087D 10 50 00      mov a, 80
0724   0880 AC            mul a, b
0725   0881 5A            add d, b
0726   0882 2C FD FF      mov b, [bp + -3] ; j
0727   0885 10 02 00      mov a, 2
0728   0888 AC            mul a, b
0729   0889 5A            add d, b
0730   088A DA            push d
0731   088B 26 00 00      mov b, 0
0732   088E E7            pop d
0733   088F 11            mov a, b
0734   0890 43            mov [d], a
0735   0891 0A 94 08      jmp _if14_exit
0736   0894             _if14_exit:
0737   0894 0A D3 08      jmp _if13_exit
0738   0897             _if13_else:
0739   0897             _if15_cond:
0740   0897 2C F7 FF      mov b, [bp + -9] ; count
0741   089A D7            push a
0742   089B 11            mov a, b
0743   089C 26 03 00      mov b, 3
0744   089F B0            cmp a, b
0745   08A0 0E            lodflgs
0746   08A1 87 01         and al, %00000001 ; ==
0747   08A3 22 00         mov ah, 0
0748   08A5 B9 00         cmp al, 0
0749   08A7 0E            lodflgs
0750   08A8 96            not al
0751   08A9 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0752   08AB 22 00         mov ah, 0
0753   08AD 27            mov b, a
0754   08AE E4            pop a
0755   08AF C0 00 00      cmp b, 0
0756   08B2 C6 D3 08      je _if15_exit
0757   08B5             _if15_true:
0758   08B5 29 8C 22      mov b, [next_state]
0759   08B8 74            mov d, b
0760   08B9 2C FF FF      mov b, [bp + -1] ; i
0761   08BC 10 50 00      mov a, 80
0762   08BF AC            mul a, b
0763   08C0 5A            add d, b
0764   08C1 2C FD FF      mov b, [bp + -3] ; j
0765   08C4 10 02 00      mov a, 2
0766   08C7 AC            mul a, b
0767   08C8 5A            add d, b
0768   08C9 DA            push d
0769   08CA 26 01 00      mov b, 1
0770   08CD E7            pop d
0771   08CE 11            mov a, b
0772   08CF 43            mov [d], a
0773   08D0 0A D3 08      jmp _if15_exit
0774   08D3             _if15_exit:
0775   08D3             _if13_exit:
0776   08D3             _for8_update:
0777   08D3 2C FD FF      mov b, [bp + -3] ; j
0778   08D6 FD 77         inc b
0779   08D8 D7            push a
0780   08D9 11            mov a, b
0781   08DA 45 FD FF      mov [bp + -3], a ; j
0782   08DD E4            pop a
0783   08DE 0A 99 06      jmp _for8_cond
0784   08E1             _for8_exit:
0785   08E1             _for7_update:
0786   08E1 2C FF FF      mov b, [bp + -1] ; i
0787   08E4 FD 77         inc b
0788   08E6 D7            push a
0789   08E7 11            mov a, b
0790   08E8 45 FF FF      mov [bp + -1], a ; i
0791   08EB E4            pop a
0792   08EC 0A 72 06      jmp _for7_cond
0793   08EF             _for7_exit:
0794   08EF             _for16_init:
0795   08EF 26 00 00      mov b, 0
0796   08F2 D7            push a
0797   08F3 11            mov a, b
0798   08F4 45 FF FF      mov [bp + -1], a ; i
0799   08F7 E4            pop a
0800   08F8             _for16_cond:
0801   08F8 2C FF FF      mov b, [bp + -1] ; i
0802   08FB D7            push a
0803   08FC 11            mov a, b
0804   08FD 26 28 00      mov b, 40
0805   0900 B0            cmp a, b
0806   0901 0E            lodflgs
0807   0902 87 02         and al, %00000010 ; <
0808   0904 22 00         mov ah, 0
0809   0906 B9 00         cmp al, 0
0810   0908 0E            lodflgs
0811   0909 96            not al
0812   090A 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0813   090C 22 00         mov ah, 0
0814   090E 27            mov b, a
0815   090F E4            pop a
0816   0910 C0 00 00      cmp b, 0
0817   0913 C6 88 09      je _for16_exit
0818   0916             _for16_block:
0819   0916             _for17_init:
0820   0916 26 00 00      mov b, 0
0821   0919 D7            push a
0822   091A 11            mov a, b
0823   091B 45 FD FF      mov [bp + -3], a ; j
0824   091E E4            pop a
0825   091F             _for17_cond:
0826   091F 2C FD FF      mov b, [bp + -3] ; j
0827   0922 D7            push a
0828   0923 11            mov a, b
0829   0924 26 28 00      mov b, 40
0830   0927 B0            cmp a, b
0831   0928 0E            lodflgs
0832   0929 87 02         and al, %00000010 ; <
0833   092B 22 00         mov ah, 0
0834   092D B9 00         cmp al, 0
0835   092F 0E            lodflgs
0836   0930 96            not al
0837   0931 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0838   0933 22 00         mov ah, 0
0839   0935 27            mov b, a
0840   0936 E4            pop a
0841   0937 C0 00 00      cmp b, 0
0842   093A C6 7A 09      je _for17_exit
0843   093D             _for17_block:
0844   093D 29 0A 16      mov b, [curr_state]
0845   0940 74            mov d, b
0846   0941 2C FF FF      mov b, [bp + -1] ; i
0847   0944 10 50 00      mov a, 80
0848   0947 AC            mul a, b
0849   0948 5A            add d, b
0850   0949 2C FD FF      mov b, [bp + -3] ; j
0851   094C 10 02 00      mov a, 2
0852   094F AC            mul a, b
0853   0950 5A            add d, b
0854   0951 DA            push d
0855   0952 29 8C 22      mov b, [next_state]
0856   0955 D7            push a
0857   0956 74            mov d, b
0858   0957 2C FF FF      mov b, [bp + -1] ; i
0859   095A 10 50 00      mov a, 80
0860   095D AC            mul a, b
0861   095E 5A            add d, b
0862   095F 2C FD FF      mov b, [bp + -3] ; j
0863   0962 10 02 00      mov a, 2
0864   0965 AC            mul a, b
0865   0966 5A            add d, b
0866   0967 2A            mov b, [d]
0867   0968 E4            pop a
0868   0969 E7            pop d
0869   096A 11            mov a, b
0870   096B 43            mov [d], a
0871   096C             _for17_update:
0872   096C 2C FD FF      mov b, [bp + -3] ; j
0873   096F FD 77         inc b
0874   0971 D7            push a
0875   0972 11            mov a, b
0876   0973 45 FD FF      mov [bp + -3], a ; j
0877   0976 E4            pop a
0878   0977 0A 1F 09      jmp _for17_cond
0879   097A             _for17_exit:
0880   097A             _for16_update:
0881   097A 2C FF FF      mov b, [bp + -1] ; i
0882   097D FD 77         inc b
0883   097F D7            push a
0884   0980 11            mov a, b
0885   0981 45 FF FF      mov [bp + -1], a ; i
0886   0984 E4            pop a
0887   0985 0A F8 08      jmp _for16_cond
0888   0988             _for16_exit:
0889   0988 F9            leave
0890   0989 09            ret
0891   098A             ; --- END TEXT BLOCK
0892   098A             
0893   098A             ; --- BEGIN DATA BLOCK
0894   098A 00 00 00 00 curr_state_data: .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0894   098E 00 00 00 00 
0894   0992 00 00 00 00 
0894   0996 00 00 00 00 
0894   099A 00 00 00 00 
0894   099E 00 00 00 00 
0894   09A2 00 00 00 00 
0894   09A6 00 00 00 00 
0894   09AA 00 00 00 00 
0894   09AE 00 00 00 00 
0894   09B2 00 00 00 00 
0894   09B6 00 00 00 00 
0894   09BA 00 00 00 00 
0894   09BE 00 00 00 00 
0894   09C2 00 00 00 00 
0894   09C6 00 00 00 00 
0894   09CA 00 00 00 00 
0894   09CE 00 00 00 00 
0894   09D2 00 00 00 00 
0894   09D6 00 00 00 00 
0894   09DA 00 00 00 00 
0895   09DE 00 00 00 00                   .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0895   09E2 00 00 00 00 
0895   09E6 00 00 00 00 
0895   09EA 00 00 00 00 
0895   09EE 00 00 00 00 
0895   09F2 00 00 00 00 
0895   09F6 00 00 00 00 
0895   09FA 00 00 00 00 
0895   09FE 00 00 00 00 
0895   0A02 00 00 00 00 
0895   0A06 00 00 00 00 
0895   0A0A 00 00 00 00 
0895   0A0E 00 00 00 00 
0895   0A12 00 00 00 00 
0895   0A16 00 00 00 00 
0895   0A1A 00 00 00 00 
0895   0A1E 00 00 00 00 
0895   0A22 00 00 00 00 
0895   0A26 00 00 00 00 
0895   0A2A 00 00 00 00 
0895   0A2E 00 00 00 00 
0896   0A32 00 00 00 00                   .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0896   0A36 00 00 00 00 
0896   0A3A 00 00 00 00 
0896   0A3E 00 00 00 00 
0896   0A42 00 00 00 00 
0896   0A46 00 00 00 00 
0896   0A4A 00 00 00 00 
0896   0A4E 00 00 00 00 
0896   0A52 00 00 00 00 
0896   0A56 01 00 00 00 
0896   0A5A 00 00 00 00 
0896   0A5E 00 00 00 00 
0896   0A62 00 00 00 00 
0896   0A66 00 00 00 00 
0896   0A6A 00 00 00 00 
0896   0A6E 00 00 00 00 
0896   0A72 00 00 00 00 
0896   0A76 00 00 00 00 
0896   0A7A 00 00 00 00 
0896   0A7E 00 00 00 00 
0896   0A82 00 00 00 00 
0897   0A86 00 00 00 00                   .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0897   0A8A 00 00 00 00 
0897   0A8E 00 00 00 00 
0897   0A92 00 00 00 00 
0897   0A96 00 00 00 00 
0897   0A9A 00 00 00 00 
0897   0A9E 00 00 01 00 
0897   0AA2 00 00 01 00 
0897   0AA6 00 00 00 00 
0897   0AAA 00 00 00 00 
0897   0AAE 00 00 00 00 
0897   0AB2 00 00 00 00 
0897   0AB6 00 00 00 00 
0897   0ABA 00 00 00 00 
0897   0ABE 00 00 00 00 
0897   0AC2 00 00 00 00 
0897   0AC6 00 00 00 00 
0897   0ACA 00 00 00 00 
0897   0ACE 00 00 00 00 
0897   0AD2 00 00 00 00 
0897   0AD6 00 00 00 00 
0898   0ADA 01 00 01 00                   .dw 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
0898   0ADE 00 00 00 00 
0898   0AE2 00 00 00 00 
0898   0AE6 00 00 00 00 
0898   0AEA 01 00 01 00 
0898   0AEE 00 00 00 00 
0898   0AF2 00 00 00 00 
0898   0AF6 00 00 00 00 
0898   0AFA 00 00 00 00 
0898   0AFE 00 00 00 00 
0898   0B02 00 00 00 00 
0898   0B06 01 00 01 00 
0898   0B0A 00 00 00 00 
0898   0B0E 00 00 00 00 
0898   0B12 00 00 00 00 
0898   0B16 00 00 00 00 
0898   0B1A 00 00 00 00 
0898   0B1E 00 00 00 00 
0898   0B22 00 00 00 00 
0898   0B26 01 00 00 00 
0898   0B2A 00 00 00 00 
0899   0B2E 01 00 00 00                   .dw 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 
0899   0B32 00 00 00 00 
0899   0B36 00 00 01 00 
0899   0B3A 01 00 00 00 
0899   0B3E 00 00 00 00 
0899   0B42 00 00 00 00 
0899   0B46 00 00 00 00 
0899   0B4A 00 00 00 00 
0899   0B4E 00 00 00 00 
0899   0B52 00 00 01 00 
0899   0B56 01 00 00 00 
0899   0B5A 00 00 00 00 
0899   0B5E 01 00 01 00 
0899   0B62 00 00 00 00 
0899   0B66 00 00 00 00 
0899   0B6A 00 00 00 00 
0899   0B6E 00 00 00 00 
0899   0B72 01 00 00 00 
0899   0B76 00 00 00 00 
0899   0B7A 00 00 00 00 
0899   0B7E 01 00 00 00 
0900   0B82 00 00 00 00                   .dw 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 
0900   0B86 01 00 01 00 
0900   0B8A 00 00 00 00 
0900   0B8E 00 00 00 00 
0900   0B92 00 00 00 00 
0900   0B96 00 00 00 00 
0900   0B9A 00 00 00 00 
0900   0B9E 00 00 00 00 
0900   0BA2 00 00 00 00 
0900   0BA6 00 00 00 00 
0900   0BAA 00 00 01 00 
0900   0BAE 01 00 00 00 
0900   0BB2 00 00 00 00 
0900   0BB6 00 00 00 00 
0900   0BBA 00 00 00 00 
0900   0BBE 00 00 01 00 
0900   0BC2 00 00 00 00 
0900   0BC6 00 00 01 00 
0900   0BCA 00 00 01 00 
0900   0BCE 01 00 00 00 
0900   0BD2 00 00 00 00 
0901   0BD6 00 00 01 00                   .dw 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
0901   0BDA 00 00 01 00 
0901   0BDE 00 00 00 00 
0901   0BE2 00 00 00 00 
0901   0BE6 00 00 00 00 
0901   0BEA 00 00 00 00 
0901   0BEE 00 00 00 00 
0901   0BF2 00 00 00 00 
0901   0BF6 00 00 00 00 
0901   0BFA 00 00 00 00 
0901   0BFE 00 00 00 00 
0901   0C02 00 00 00 00 
0901   0C06 00 00 00 00 
0901   0C0A 00 00 00 00 
0901   0C0E 01 00 00 00 
0901   0C12 00 00 00 00 
0901   0C16 00 00 00 00 
0901   0C1A 01 00 00 00 
0901   0C1E 00 00 00 00 
0901   0C22 00 00 00 00 
0901   0C26 00 00 00 00 
0902   0C2A 01 00 00 00                   .dw 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0902   0C2E 00 00 00 00 
0902   0C32 00 00 00 00 
0902   0C36 00 00 00 00 
0902   0C3A 00 00 00 00 
0902   0C3E 00 00 00 00 
0902   0C42 00 00 00 00 
0902   0C46 00 00 00 00 
0902   0C4A 00 00 00 00 
0902   0C4E 00 00 00 00 
0902   0C52 00 00 00 00 
0902   0C56 00 00 00 00 
0902   0C5A 00 00 00 00 
0902   0C5E 01 00 00 00 
0902   0C62 00 00 00 00 
0902   0C66 01 00 00 00 
0902   0C6A 00 00 00 00 
0902   0C6E 00 00 00 00 
0902   0C72 00 00 00 00 
0902   0C76 00 00 00 00 
0902   0C7A 00 00 00 00 
0903   0C7E 00 00 00 00                   .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0903   0C82 00 00 00 00 
0903   0C86 00 00 00 00 
0903   0C8A 00 00 00 00 
0903   0C8E 00 00 00 00 
0903   0C92 00 00 00 00 
0903   0C96 00 00 00 00 
0903   0C9A 00 00 00 00 
0903   0C9E 00 00 00 00 
0903   0CA2 00 00 00 00 
0903   0CA6 00 00 00 00 
0903   0CAA 00 00 00 00 
0903   0CAE 01 00 01 00 
0903   0CB2 00 00 00 00 
0903   0CB6 00 00 00 00 
0903   0CBA 00 00 00 00 
0903   0CBE 00 00 00 00 
0903   0CC2 00 00 00 00 
0903   0CC6 00 00 00 00 
0903   0CCA 00 00 00 00 
0903   0CCE 00 00 00 00 
0904   0CD2 00 00 00 00                   .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0904   0CD6 00 00 00 00 
0904   0CDA 00 00 00 00 
0904   0CDE 00 00 00 00 
0904   0CE2 00 00 
0905   0CE4 00 00 00 00 .fill 2342, 0
0905   0CE8 00 00 00 00 
0905   0CEC 00 00 00 00 
0905   0CF0 00 00 00 00 
0905   0CF4 00 00 00 00 
0905   0CF8 00 00 00 00 
0905   0CFC 00 00 00 00 
0905   0D00 00 00 00 00 
0905   0D04 00 00 00 00 
0905   0D08 00 00 00 00 
0905   0D0C 00 00 00 00 
0905   0D10 00 00 00 00 
0905   0D14 00 00 00 00 
0905   0D18 00 00 00 00 
0905   0D1C 00 00 00 00 
0905   0D20 00 00 00 00 
0905   0D24 00 00 00 00 
0905   0D28 00 00 00 00 
0905   0D2C 00 00 00 00 
0905   0D30 00 00 00 00 
0905   0D34 00 00 00 00 
0905   0D38 00 00 00 00 
0905   0D3C 00 00 00 00 
0905   0D40 00 00 00 00 
0905   0D44 00 00 00 00 
0905   0D48 00 00 00 00 
0905   0D4C 00 00 00 00 
0905   0D50 00 00 00 00 
0905   0D54 00 00 00 00 
0905   0D58 00 00 00 00 
0905   0D5C 00 00 00 00 
0905   0D60 00 00 00 00 
0905   0D64 00 00 00 00 
0905   0D68 00 00 00 00 
0905   0D6C 00 00 00 00 
0905   0D70 00 00 00 00 
0905   0D74 00 00 00 00 
0905   0D78 00 00 00 00 
0905   0D7C 00 00 00 00 
0905   0D80 00 00 00 00 
0905   0D84 00 00 00 00 
0905   0D88 00 00 00 00 
0905   0D8C 00 00 00 00 
0905   0D90 00 00 00 00 
0905   0D94 00 00 00 00 
0905   0D98 00 00 00 00 
0905   0D9C 00 00 00 00 
0905   0DA0 00 00 00 00 
0905   0DA4 00 00 00 00 
0905   0DA8 00 00 00 00 
0905   0DAC 00 00 00 00 
0905   0DB0 00 00 00 00 
0905   0DB4 00 00 00 00 
0905   0DB8 00 00 00 00 
0905   0DBC 00 00 00 00 
0905   0DC0 00 00 00 00 
0905   0DC4 00 00 00 00 
0905   0DC8 00 00 00 00 
0905   0DCC 00 00 00 00 
0905   0DD0 00 00 00 00 
0905   0DD4 00 00 00 00 
0905   0DD8 00 00 00 00 
0905   0DDC 00 00 00 00 
0905   0DE0 00 00 00 00 
0905   0DE4 00 00 00 00 
0905   0DE8 00 00 00 00 
0905   0DEC 00 00 00 00 
0905   0DF0 00 00 00 00 
0905   0DF4 00 00 00 00 
0905   0DF8 00 00 00 00 
0905   0DFC 00 00 00 00 
0905   0E00 00 00 00 00 
0905   0E04 00 00 00 00 
0905   0E08 00 00 00 00 
0905   0E0C 00 00 00 00 
0905   0E10 00 00 00 00 
0905   0E14 00 00 00 00 
0905   0E18 00 00 00 00 
0905   0E1C 00 00 00 00 
0905   0E20 00 00 00 00 
0905   0E24 00 00 00 00 
0905   0E28 00 00 00 00 
0905   0E2C 00 00 00 00 
0905   0E30 00 00 00 00 
0905   0E34 00 00 00 00 
0905   0E38 00 00 00 00 
0905   0E3C 00 00 00 00 
0905   0E40 00 00 00 00 
0905   0E44 00 00 00 00 
0905   0E48 00 00 00 00 
0905   0E4C 00 00 00 00 
0905   0E50 00 00 00 00 
0905   0E54 00 00 00 00 
0905   0E58 00 00 00 00 
0905   0E5C 00 00 00 00 
0905   0E60 00 00 00 00 
0905   0E64 00 00 00 00 
0905   0E68 00 00 00 00 
0905   0E6C 00 00 00 00 
0905   0E70 00 00 00 00 
0905   0E74 00 00 00 00 
0905   0E78 00 00 00 00 
0905   0E7C 00 00 00 00 
0905   0E80 00 00 00 00 
0905   0E84 00 00 00 00 
0905   0E88 00 00 00 00 
0905   0E8C 00 00 00 00 
0905   0E90 00 00 00 00 
0905   0E94 00 00 00 00 
0905   0E98 00 00 00 00 
0905   0E9C 00 00 00 00 
0905   0EA0 00 00 00 00 
0905   0EA4 00 00 00 00 
0905   0EA8 00 00 00 00 
0905   0EAC 00 00 00 00 
0905   0EB0 00 00 00 00 
0905   0EB4 00 00 00 00 
0905   0EB8 00 00 00 00 
0905   0EBC 00 00 00 00 
0905   0EC0 00 00 00 00 
0905   0EC4 00 00 00 00 
0905   0EC8 00 00 00 00 
0905   0ECC 00 00 00 00 
0905   0ED0 00 00 00 00 
0905   0ED4 00 00 00 00 
0905   0ED8 00 00 00 00 
0905   0EDC 00 00 00 00 
0905   0EE0 00 00 00 00 
0905   0EE4 00 00 00 00 
0905   0EE8 00 00 00 00 
0905   0EEC 00 00 00 00 
0905   0EF0 00 00 00 00 
0905   0EF4 00 00 00 00 
0905   0EF8 00 00 00 00 
0905   0EFC 00 00 00 00 
0905   0F00 00 00 00 00 
0905   0F04 00 00 00 00 
0905   0F08 00 00 00 00 
0905   0F0C 00 00 00 00 
0905   0F10 00 00 00 00 
0905   0F14 00 00 00 00 
0905   0F18 00 00 00 00 
0905   0F1C 00 00 00 00 
0905   0F20 00 00 00 00 
0905   0F24 00 00 00 00 
0905   0F28 00 00 00 00 
0905   0F2C 00 00 00 00 
0905   0F30 00 00 00 00 
0905   0F34 00 00 00 00 
0905   0F38 00 00 00 00 
0905   0F3C 00 00 00 00 
0905   0F40 00 00 00 00 
0905   0F44 00 00 00 00 
0905   0F48 00 00 00 00 
0905   0F4C 00 00 00 00 
0905   0F50 00 00 00 00 
0905   0F54 00 00 00 00 
0905   0F58 00 00 00 00 
0905   0F5C 00 00 00 00 
0905   0F60 00 00 00 00 
0905   0F64 00 00 00 00 
0905   0F68 00 00 00 00 
0905   0F6C 00 00 00 00 
0905   0F70 00 00 00 00 
0905   0F74 00 00 00 00 
0905   0F78 00 00 00 00 
0905   0F7C 00 00 00 00 
0905   0F80 00 00 00 00 
0905   0F84 00 00 00 00 
0905   0F88 00 00 00 00 
0905   0F8C 00 00 00 00 
0905   0F90 00 00 00 00 
0905   0F94 00 00 00 00 
0905   0F98 00 00 00 00 
0905   0F9C 00 00 00 00 
0905   0FA0 00 00 00 00 
0905   0FA4 00 00 00 00 
0905   0FA8 00 00 00 00 
0905   0FAC 00 00 00 00 
0905   0FB0 00 00 00 00 
0905   0FB4 00 00 00 00 
0905   0FB8 00 00 00 00 
0905   0FBC 00 00 00 00 
0905   0FC0 00 00 00 00 
0905   0FC4 00 00 00 00 
0905   0FC8 00 00 00 00 
0905   0FCC 00 00 00 00 
0905   0FD0 00 00 00 00 
0905   0FD4 00 00 00 00 
0905   0FD8 00 00 00 00 
0905   0FDC 00 00 00 00 
0905   0FE0 00 00 00 00 
0905   0FE4 00 00 00 00 
0905   0FE8 00 00 00 00 
0905   0FEC 00 00 00 00 
0905   0FF0 00 00 00 00 
0905   0FF4 00 00 00 00 
0905   0FF8 00 00 00 00 
0905   0FFC 00 00 00 00 
0905   1000 00 00 00 00 
0905   1004 00 00 00 00 
0905   1008 00 00 00 00 
0905   100C 00 00 00 00 
0905   1010 00 00 00 00 
0905   1014 00 00 00 00 
0905   1018 00 00 00 00 
0905   101C 00 00 00 00 
0905   1020 00 00 00 00 
0905   1024 00 00 00 00 
0905   1028 00 00 00 00 
0905   102C 00 00 00 00 
0905   1030 00 00 00 00 
0905   1034 00 00 00 00 
0905   1038 00 00 00 00 
0905   103C 00 00 00 00 
0905   1040 00 00 00 00 
0905   1044 00 00 00 00 
0905   1048 00 00 00 00 
0905   104C 00 00 00 00 
0905   1050 00 00 00 00 
0905   1054 00 00 00 00 
0905   1058 00 00 00 00 
0905   105C 00 00 00 00 
0905   1060 00 00 00 00 
0905   1064 00 00 00 00 
0905   1068 00 00 00 00 
0905   106C 00 00 00 00 
0905   1070 00 00 00 00 
0905   1074 00 00 00 00 
0905   1078 00 00 00 00 
0905   107C 00 00 00 00 
0905   1080 00 00 00 00 
0905   1084 00 00 00 00 
0905   1088 00 00 00 00 
0905   108C 00 00 00 00 
0905   1090 00 00 00 00 
0905   1094 00 00 00 00 
0905   1098 00 00 00 00 
0905   109C 00 00 00 00 
0905   10A0 00 00 00 00 
0905   10A4 00 00 00 00 
0905   10A8 00 00 00 00 
0905   10AC 00 00 00 00 
0905   10B0 00 00 00 00 
0905   10B4 00 00 00 00 
0905   10B8 00 00 00 00 
0905   10BC 00 00 00 00 
0905   10C0 00 00 00 00 
0905   10C4 00 00 00 00 
0905   10C8 00 00 00 00 
0905   10CC 00 00 00 00 
0905   10D0 00 00 00 00 
0905   10D4 00 00 00 00 
0905   10D8 00 00 00 00 
0905   10DC 00 00 00 00 
0905   10E0 00 00 00 00 
0905   10E4 00 00 00 00 
0905   10E8 00 00 00 00 
0905   10EC 00 00 00 00 
0905   10F0 00 00 00 00 
0905   10F4 00 00 00 00 
0905   10F8 00 00 00 00 
0905   10FC 00 00 00 00 
0905   1100 00 00 00 00 
0905   1104 00 00 00 00 
0905   1108 00 00 00 00 
0905   110C 00 00 00 00 
0905   1110 00 00 00 00 
0905   1114 00 00 00 00 
0905   1118 00 00 00 00 
0905   111C 00 00 00 00 
0905   1120 00 00 00 00 
0905   1124 00 00 00 00 
0905   1128 00 00 00 00 
0905   112C 00 00 00 00 
0905   1130 00 00 00 00 
0905   1134 00 00 00 00 
0905   1138 00 00 00 00 
0905   113C 00 00 00 00 
0905   1140 00 00 00 00 
0905   1144 00 00 00 00 
0905   1148 00 00 00 00 
0905   114C 00 00 00 00 
0905   1150 00 00 00 00 
0905   1154 00 00 00 00 
0905   1158 00 00 00 00 
0905   115C 00 00 00 00 
0905   1160 00 00 00 00 
0905   1164 00 00 00 00 
0905   1168 00 00 00 00 
0905   116C 00 00 00 00 
0905   1170 00 00 00 00 
0905   1174 00 00 00 00 
0905   1178 00 00 00 00 
0905   117C 00 00 00 00 
0905   1180 00 00 00 00 
0905   1184 00 00 00 00 
0905   1188 00 00 00 00 
0905   118C 00 00 00 00 
0905   1190 00 00 00 00 
0905   1194 00 00 00 00 
0905   1198 00 00 00 00 
0905   119C 00 00 00 00 
0905   11A0 00 00 00 00 
0905   11A4 00 00 00 00 
0905   11A8 00 00 00 00 
0905   11AC 00 00 00 00 
0905   11B0 00 00 00 00 
0905   11B4 00 00 00 00 
0905   11B8 00 00 00 00 
0905   11BC 00 00 00 00 
0905   11C0 00 00 00 00 
0905   11C4 00 00 00 00 
0905   11C8 00 00 00 00 
0905   11CC 00 00 00 00 
0905   11D0 00 00 00 00 
0905   11D4 00 00 00 00 
0905   11D8 00 00 00 00 
0905   11DC 00 00 00 00 
0905   11E0 00 00 00 00 
0905   11E4 00 00 00 00 
0905   11E8 00 00 00 00 
0905   11EC 00 00 00 00 
0905   11F0 00 00 00 00 
0905   11F4 00 00 00 00 
0905   11F8 00 00 00 00 
0905   11FC 00 00 00 00 
0905   1200 00 00 00 00 
0905   1204 00 00 00 00 
0905   1208 00 00 00 00 
0905   120C 00 00 00 00 
0905   1210 00 00 00 00 
0905   1214 00 00 00 00 
0905   1218 00 00 00 00 
0905   121C 00 00 00 00 
0905   1220 00 00 00 00 
0905   1224 00 00 00 00 
0905   1228 00 00 00 00 
0905   122C 00 00 00 00 
0905   1230 00 00 00 00 
0905   1234 00 00 00 00 
0905   1238 00 00 00 00 
0905   123C 00 00 00 00 
0905   1240 00 00 00 00 
0905   1244 00 00 00 00 
0905   1248 00 00 00 00 
0905   124C 00 00 00 00 
0905   1250 00 00 00 00 
0905   1254 00 00 00 00 
0905   1258 00 00 00 00 
0905   125C 00 00 00 00 
0905   1260 00 00 00 00 
0905   1264 00 00 00 00 
0905   1268 00 00 00 00 
0905   126C 00 00 00 00 
0905   1270 00 00 00 00 
0905   1274 00 00 00 00 
0905   1278 00 00 00 00 
0905   127C 00 00 00 00 
0905   1280 00 00 00 00 
0905   1284 00 00 00 00 
0905   1288 00 00 00 00 
0905   128C 00 00 00 00 
0905   1290 00 00 00 00 
0905   1294 00 00 00 00 
0905   1298 00 00 00 00 
0905   129C 00 00 00 00 
0905   12A0 00 00 00 00 
0905   12A4 00 00 00 00 
0905   12A8 00 00 00 00 
0905   12AC 00 00 00 00 
0905   12B0 00 00 00 00 
0905   12B4 00 00 00 00 
0905   12B8 00 00 00 00 
0905   12BC 00 00 00 00 
0905   12C0 00 00 00 00 
0905   12C4 00 00 00 00 
0905   12C8 00 00 00 00 
0905   12CC 00 00 00 00 
0905   12D0 00 00 00 00 
0905   12D4 00 00 00 00 
0905   12D8 00 00 00 00 
0905   12DC 00 00 00 00 
0905   12E0 00 00 00 00 
0905   12E4 00 00 00 00 
0905   12E8 00 00 00 00 
0905   12EC 00 00 00 00 
0905   12F0 00 00 00 00 
0905   12F4 00 00 00 00 
0905   12F8 00 00 00 00 
0905   12FC 00 00 00 00 
0905   1300 00 00 00 00 
0905   1304 00 00 00 00 
0905   1308 00 00 00 00 
0905   130C 00 00 00 00 
0905   1310 00 00 00 00 
0905   1314 00 00 00 00 
0905   1318 00 00 00 00 
0905   131C 00 00 00 00 
0905   1320 00 00 00 00 
0905   1324 00 00 00 00 
0905   1328 00 00 00 00 
0905   132C 00 00 00 00 
0905   1330 00 00 00 00 
0905   1334 00 00 00 00 
0905   1338 00 00 00 00 
0905   133C 00 00 00 00 
0905   1340 00 00 00 00 
0905   1344 00 00 00 00 
0905   1348 00 00 00 00 
0905   134C 00 00 00 00 
0905   1350 00 00 00 00 
0905   1354 00 00 00 00 
0905   1358 00 00 00 00 
0905   135C 00 00 00 00 
0905   1360 00 00 00 00 
0905   1364 00 00 00 00 
0905   1368 00 00 00 00 
0905   136C 00 00 00 00 
0905   1370 00 00 00 00 
0905   1374 00 00 00 00 
0905   1378 00 00 00 00 
0905   137C 00 00 00 00 
0905   1380 00 00 00 00 
0905   1384 00 00 00 00 
0905   1388 00 00 00 00 
0905   138C 00 00 00 00 
0905   1390 00 00 00 00 
0905   1394 00 00 00 00 
0905   1398 00 00 00 00 
0905   139C 00 00 00 00 
0905   13A0 00 00 00 00 
0905   13A4 00 00 00 00 
0905   13A8 00 00 00 00 
0905   13AC 00 00 00 00 
0905   13B0 00 00 00 00 
0905   13B4 00 00 00 00 
0905   13B8 00 00 00 00 
0905   13BC 00 00 00 00 
0905   13C0 00 00 00 00 
0905   13C4 00 00 00 00 
0905   13C8 00 00 00 00 
0905   13CC 00 00 00 00 
0905   13D0 00 00 00 00 
0905   13D4 00 00 00 00 
0905   13D8 00 00 00 00 
0905   13DC 00 00 00 00 
0905   13E0 00 00 00 00 
0905   13E4 00 00 00 00 
0905   13E8 00 00 00 00 
0905   13EC 00 00 00 00 
0905   13F0 00 00 00 00 
0905   13F4 00 00 00 00 
0905   13F8 00 00 00 00 
0905   13FC 00 00 00 00 
0905   1400 00 00 00 00 
0905   1404 00 00 00 00 
0905   1408 00 00 00 00 
0905   140C 00 00 00 00 
0905   1410 00 00 00 00 
0905   1414 00 00 00 00 
0905   1418 00 00 00 00 
0905   141C 00 00 00 00 
0905   1420 00 00 00 00 
0905   1424 00 00 00 00 
0905   1428 00 00 00 00 
0905   142C 00 00 00 00 
0905   1430 00 00 00 00 
0905   1434 00 00 00 00 
0905   1438 00 00 00 00 
0905   143C 00 00 00 00 
0905   1440 00 00 00 00 
0905   1444 00 00 00 00 
0905   1448 00 00 00 00 
0905   144C 00 00 00 00 
0905   1450 00 00 00 00 
0905   1454 00 00 00 00 
0905   1458 00 00 00 00 
0905   145C 00 00 00 00 
0905   1460 00 00 00 00 
0905   1464 00 00 00 00 
0905   1468 00 00 00 00 
0905   146C 00 00 00 00 
0905   1470 00 00 00 00 
0905   1474 00 00 00 00 
0905   1478 00 00 00 00 
0905   147C 00 00 00 00 
0905   1480 00 00 00 00 
0905   1484 00 00 00 00 
0905   1488 00 00 00 00 
0905   148C 00 00 00 00 
0905   1490 00 00 00 00 
0905   1494 00 00 00 00 
0905   1498 00 00 00 00 
0905   149C 00 00 00 00 
0905   14A0 00 00 00 00 
0905   14A4 00 00 00 00 
0905   14A8 00 00 00 00 
0905   14AC 00 00 00 00 
0905   14B0 00 00 00 00 
0905   14B4 00 00 00 00 
0905   14B8 00 00 00 00 
0905   14BC 00 00 00 00 
0905   14C0 00 00 00 00 
0905   14C4 00 00 00 00 
0905   14C8 00 00 00 00 
0905   14CC 00 00 00 00 
0905   14D0 00 00 00 00 
0905   14D4 00 00 00 00 
0905   14D8 00 00 00 00 
0905   14DC 00 00 00 00 
0905   14E0 00 00 00 00 
0905   14E4 00 00 00 00 
0905   14E8 00 00 00 00 
0905   14EC 00 00 00 00 
0905   14F0 00 00 00 00 
0905   14F4 00 00 00 00 
0905   14F8 00 00 00 00 
0905   14FC 00 00 00 00 
0905   1500 00 00 00 00 
0905   1504 00 00 00 00 
0905   1508 00 00 00 00 
0905   150C 00 00 00 00 
0905   1510 00 00 00 00 
0905   1514 00 00 00 00 
0905   1518 00 00 00 00 
0905   151C 00 00 00 00 
0905   1520 00 00 00 00 
0905   1524 00 00 00 00 
0905   1528 00 00 00 00 
0905   152C 00 00 00 00 
0905   1530 00 00 00 00 
0905   1534 00 00 00 00 
0905   1538 00 00 00 00 
0905   153C 00 00 00 00 
0905   1540 00 00 00 00 
0905   1544 00 00 00 00 
0905   1548 00 00 00 00 
0905   154C 00 00 00 00 
0905   1550 00 00 00 00 
0905   1554 00 00 00 00 
0905   1558 00 00 00 00 
0905   155C 00 00 00 00 
0905   1560 00 00 00 00 
0905   1564 00 00 00 00 
0905   1568 00 00 00 00 
0905   156C 00 00 00 00 
0905   1570 00 00 00 00 
0905   1574 00 00 00 00 
0905   1578 00 00 00 00 
0905   157C 00 00 00 00 
0905   1580 00 00 00 00 
0905   1584 00 00 00 00 
0905   1588 00 00 00 00 
0905   158C 00 00 00 00 
0905   1590 00 00 00 00 
0905   1594 00 00 00 00 
0905   1598 00 00 00 00 
0905   159C 00 00 00 00 
0905   15A0 00 00 00 00 
0905   15A4 00 00 00 00 
0905   15A8 00 00 00 00 
0905   15AC 00 00 00 00 
0905   15B0 00 00 00 00 
0905   15B4 00 00 00 00 
0905   15B8 00 00 00 00 
0905   15BC 00 00 00 00 
0905   15C0 00 00 00 00 
0905   15C4 00 00 00 00 
0905   15C8 00 00 00 00 
0905   15CC 00 00 00 00 
0905   15D0 00 00 00 00 
0905   15D4 00 00 00 00 
0905   15D8 00 00 00 00 
0905   15DC 00 00 00 00 
0905   15E0 00 00 00 00 
0905   15E4 00 00 00 00 
0905   15E8 00 00 00 00 
0905   15EC 00 00 00 00 
0905   15F0 00 00 00 00 
0905   15F4 00 00 00 00 
0905   15F8 00 00 00 00 
0905   15FC 00 00 00 00 
0905   1600 00 00 00 00 
0905   1604 00 00 00 00 
0905   1608 00 00 
0906   160A 8A 09       curr_state: .dw curr_state_data
0907   160C 00 00 00 00 next_state_data: .fill 3200, 0
0907   1610 00 00 00 00 
0907   1614 00 00 00 00 
0907   1618 00 00 00 00 
0907   161C 00 00 00 00 
0907   1620 00 00 00 00 
0907   1624 00 00 00 00 
0907   1628 00 00 00 00 
0907   162C 00 00 00 00 
0907   1630 00 00 00 00 
0907   1634 00 00 00 00 
0907   1638 00 00 00 00 
0907   163C 00 00 00 00 
0907   1640 00 00 00 00 
0907   1644 00 00 00 00 
0907   1648 00 00 00 00 
0907   164C 00 00 00 00 
0907   1650 00 00 00 00 
0907   1654 00 00 00 00 
0907   1658 00 00 00 00 
0907   165C 00 00 00 00 
0907   1660 00 00 00 00 
0907   1664 00 00 00 00 
0907   1668 00 00 00 00 
0907   166C 00 00 00 00 
0907   1670 00 00 00 00 
0907   1674 00 00 00 00 
0907   1678 00 00 00 00 
0907   167C 00 00 00 00 
0907   1680 00 00 00 00 
0907   1684 00 00 00 00 
0907   1688 00 00 00 00 
0907   168C 00 00 00 00 
0907   1690 00 00 00 00 
0907   1694 00 00 00 00 
0907   1698 00 00 00 00 
0907   169C 00 00 00 00 
0907   16A0 00 00 00 00 
0907   16A4 00 00 00 00 
0907   16A8 00 00 00 00 
0907   16AC 00 00 00 00 
0907   16B0 00 00 00 00 
0907   16B4 00 00 00 00 
0907   16B8 00 00 00 00 
0907   16BC 00 00 00 00 
0907   16C0 00 00 00 00 
0907   16C4 00 00 00 00 
0907   16C8 00 00 00 00 
0907   16CC 00 00 00 00 
0907   16D0 00 00 00 00 
0907   16D4 00 00 00 00 
0907   16D8 00 00 00 00 
0907   16DC 00 00 00 00 
0907   16E0 00 00 00 00 
0907   16E4 00 00 00 00 
0907   16E8 00 00 00 00 
0907   16EC 00 00 00 00 
0907   16F0 00 00 00 00 
0907   16F4 00 00 00 00 
0907   16F8 00 00 00 00 
0907   16FC 00 00 00 00 
0907   1700 00 00 00 00 
0907   1704 00 00 00 00 
0907   1708 00 00 00 00 
0907   170C 00 00 00 00 
0907   1710 00 00 00 00 
0907   1714 00 00 00 00 
0907   1718 00 00 00 00 
0907   171C 00 00 00 00 
0907   1720 00 00 00 00 
0907   1724 00 00 00 00 
0907   1728 00 00 00 00 
0907   172C 00 00 00 00 
0907   1730 00 00 00 00 
0907   1734 00 00 00 00 
0907   1738 00 00 00 00 
0907   173C 00 00 00 00 
0907   1740 00 00 00 00 
0907   1744 00 00 00 00 
0907   1748 00 00 00 00 
0907   174C 00 00 00 00 
0907   1750 00 00 00 00 
0907   1754 00 00 00 00 
0907   1758 00 00 00 00 
0907   175C 00 00 00 00 
0907   1760 00 00 00 00 
0907   1764 00 00 00 00 
0907   1768 00 00 00 00 
0907   176C 00 00 00 00 
0907   1770 00 00 00 00 
0907   1774 00 00 00 00 
0907   1778 00 00 00 00 
0907   177C 00 00 00 00 
0907   1780 00 00 00 00 
0907   1784 00 00 00 00 
0907   1788 00 00 00 00 
0907   178C 00 00 00 00 
0907   1790 00 00 00 00 
0907   1794 00 00 00 00 
0907   1798 00 00 00 00 
0907   179C 00 00 00 00 
0907   17A0 00 00 00 00 
0907   17A4 00 00 00 00 
0907   17A8 00 00 00 00 
0907   17AC 00 00 00 00 
0907   17B0 00 00 00 00 
0907   17B4 00 00 00 00 
0907   17B8 00 00 00 00 
0907   17BC 00 00 00 00 
0907   17C0 00 00 00 00 
0907   17C4 00 00 00 00 
0907   17C8 00 00 00 00 
0907   17CC 00 00 00 00 
0907   17D0 00 00 00 00 
0907   17D4 00 00 00 00 
0907   17D8 00 00 00 00 
0907   17DC 00 00 00 00 
0907   17E0 00 00 00 00 
0907   17E4 00 00 00 00 
0907   17E8 00 00 00 00 
0907   17EC 00 00 00 00 
0907   17F0 00 00 00 00 
0907   17F4 00 00 00 00 
0907   17F8 00 00 00 00 
0907   17FC 00 00 00 00 
0907   1800 00 00 00 00 
0907   1804 00 00 00 00 
0907   1808 00 00 00 00 
0907   180C 00 00 00 00 
0907   1810 00 00 00 00 
0907   1814 00 00 00 00 
0907   1818 00 00 00 00 
0907   181C 00 00 00 00 
0907   1820 00 00 00 00 
0907   1824 00 00 00 00 
0907   1828 00 00 00 00 
0907   182C 00 00 00 00 
0907   1830 00 00 00 00 
0907   1834 00 00 00 00 
0907   1838 00 00 00 00 
0907   183C 00 00 00 00 
0907   1840 00 00 00 00 
0907   1844 00 00 00 00 
0907   1848 00 00 00 00 
0907   184C 00 00 00 00 
0907   1850 00 00 00 00 
0907   1854 00 00 00 00 
0907   1858 00 00 00 00 
0907   185C 00 00 00 00 
0907   1860 00 00 00 00 
0907   1864 00 00 00 00 
0907   1868 00 00 00 00 
0907   186C 00 00 00 00 
0907   1870 00 00 00 00 
0907   1874 00 00 00 00 
0907   1878 00 00 00 00 
0907   187C 00 00 00 00 
0907   1880 00 00 00 00 
0907   1884 00 00 00 00 
0907   1888 00 00 00 00 
0907   188C 00 00 00 00 
0907   1890 00 00 00 00 
0907   1894 00 00 00 00 
0907   1898 00 00 00 00 
0907   189C 00 00 00 00 
0907   18A0 00 00 00 00 
0907   18A4 00 00 00 00 
0907   18A8 00 00 00 00 
0907   18AC 00 00 00 00 
0907   18B0 00 00 00 00 
0907   18B4 00 00 00 00 
0907   18B8 00 00 00 00 
0907   18BC 00 00 00 00 
0907   18C0 00 00 00 00 
0907   18C4 00 00 00 00 
0907   18C8 00 00 00 00 
0907   18CC 00 00 00 00 
0907   18D0 00 00 00 00 
0907   18D4 00 00 00 00 
0907   18D8 00 00 00 00 
0907   18DC 00 00 00 00 
0907   18E0 00 00 00 00 
0907   18E4 00 00 00 00 
0907   18E8 00 00 00 00 
0907   18EC 00 00 00 00 
0907   18F0 00 00 00 00 
0907   18F4 00 00 00 00 
0907   18F8 00 00 00 00 
0907   18FC 00 00 00 00 
0907   1900 00 00 00 00 
0907   1904 00 00 00 00 
0907   1908 00 00 00 00 
0907   190C 00 00 00 00 
0907   1910 00 00 00 00 
0907   1914 00 00 00 00 
0907   1918 00 00 00 00 
0907   191C 00 00 00 00 
0907   1920 00 00 00 00 
0907   1924 00 00 00 00 
0907   1928 00 00 00 00 
0907   192C 00 00 00 00 
0907   1930 00 00 00 00 
0907   1934 00 00 00 00 
0907   1938 00 00 00 00 
0907   193C 00 00 00 00 
0907   1940 00 00 00 00 
0907   1944 00 00 00 00 
0907   1948 00 00 00 00 
0907   194C 00 00 00 00 
0907   1950 00 00 00 00 
0907   1954 00 00 00 00 
0907   1958 00 00 00 00 
0907   195C 00 00 00 00 
0907   1960 00 00 00 00 
0907   1964 00 00 00 00 
0907   1968 00 00 00 00 
0907   196C 00 00 00 00 
0907   1970 00 00 00 00 
0907   1974 00 00 00 00 
0907   1978 00 00 00 00 
0907   197C 00 00 00 00 
0907   1980 00 00 00 00 
0907   1984 00 00 00 00 
0907   1988 00 00 00 00 
0907   198C 00 00 00 00 
0907   1990 00 00 00 00 
0907   1994 00 00 00 00 
0907   1998 00 00 00 00 
0907   199C 00 00 00 00 
0907   19A0 00 00 00 00 
0907   19A4 00 00 00 00 
0907   19A8 00 00 00 00 
0907   19AC 00 00 00 00 
0907   19B0 00 00 00 00 
0907   19B4 00 00 00 00 
0907   19B8 00 00 00 00 
0907   19BC 00 00 00 00 
0907   19C0 00 00 00 00 
0907   19C4 00 00 00 00 
0907   19C8 00 00 00 00 
0907   19CC 00 00 00 00 
0907   19D0 00 00 00 00 
0907   19D4 00 00 00 00 
0907   19D8 00 00 00 00 
0907   19DC 00 00 00 00 
0907   19E0 00 00 00 00 
0907   19E4 00 00 00 00 
0907   19E8 00 00 00 00 
0907   19EC 00 00 00 00 
0907   19F0 00 00 00 00 
0907   19F4 00 00 00 00 
0907   19F8 00 00 00 00 
0907   19FC 00 00 00 00 
0907   1A00 00 00 00 00 
0907   1A04 00 00 00 00 
0907   1A08 00 00 00 00 
0907   1A0C 00 00 00 00 
0907   1A10 00 00 00 00 
0907   1A14 00 00 00 00 
0907   1A18 00 00 00 00 
0907   1A1C 00 00 00 00 
0907   1A20 00 00 00 00 
0907   1A24 00 00 00 00 
0907   1A28 00 00 00 00 
0907   1A2C 00 00 00 00 
0907   1A30 00 00 00 00 
0907   1A34 00 00 00 00 
0907   1A38 00 00 00 00 
0907   1A3C 00 00 00 00 
0907   1A40 00 00 00 00 
0907   1A44 00 00 00 00 
0907   1A48 00 00 00 00 
0907   1A4C 00 00 00 00 
0907   1A50 00 00 00 00 
0907   1A54 00 00 00 00 
0907   1A58 00 00 00 00 
0907   1A5C 00 00 00 00 
0907   1A60 00 00 00 00 
0907   1A64 00 00 00 00 
0907   1A68 00 00 00 00 
0907   1A6C 00 00 00 00 
0907   1A70 00 00 00 00 
0907   1A74 00 00 00 00 
0907   1A78 00 00 00 00 
0907   1A7C 00 00 00 00 
0907   1A80 00 00 00 00 
0907   1A84 00 00 00 00 
0907   1A88 00 00 00 00 
0907   1A8C 00 00 00 00 
0907   1A90 00 00 00 00 
0907   1A94 00 00 00 00 
0907   1A98 00 00 00 00 
0907   1A9C 00 00 00 00 
0907   1AA0 00 00 00 00 
0907   1AA4 00 00 00 00 
0907   1AA8 00 00 00 00 
0907   1AAC 00 00 00 00 
0907   1AB0 00 00 00 00 
0907   1AB4 00 00 00 00 
0907   1AB8 00 00 00 00 
0907   1ABC 00 00 00 00 
0907   1AC0 00 00 00 00 
0907   1AC4 00 00 00 00 
0907   1AC8 00 00 00 00 
0907   1ACC 00 00 00 00 
0907   1AD0 00 00 00 00 
0907   1AD4 00 00 00 00 
0907   1AD8 00 00 00 00 
0907   1ADC 00 00 00 00 
0907   1AE0 00 00 00 00 
0907   1AE4 00 00 00 00 
0907   1AE8 00 00 00 00 
0907   1AEC 00 00 00 00 
0907   1AF0 00 00 00 00 
0907   1AF4 00 00 00 00 
0907   1AF8 00 00 00 00 
0907   1AFC 00 00 00 00 
0907   1B00 00 00 00 00 
0907   1B04 00 00 00 00 
0907   1B08 00 00 00 00 
0907   1B0C 00 00 00 00 
0907   1B10 00 00 00 00 
0907   1B14 00 00 00 00 
0907   1B18 00 00 00 00 
0907   1B1C 00 00 00 00 
0907   1B20 00 00 00 00 
0907   1B24 00 00 00 00 
0907   1B28 00 00 00 00 
0907   1B2C 00 00 00 00 
0907   1B30 00 00 00 00 
0907   1B34 00 00 00 00 
0907   1B38 00 00 00 00 
0907   1B3C 00 00 00 00 
0907   1B40 00 00 00 00 
0907   1B44 00 00 00 00 
0907   1B48 00 00 00 00 
0907   1B4C 00 00 00 00 
0907   1B50 00 00 00 00 
0907   1B54 00 00 00 00 
0907   1B58 00 00 00 00 
0907   1B5C 00 00 00 00 
0907   1B60 00 00 00 00 
0907   1B64 00 00 00 00 
0907   1B68 00 00 00 00 
0907   1B6C 00 00 00 00 
0907   1B70 00 00 00 00 
0907   1B74 00 00 00 00 
0907   1B78 00 00 00 00 
0907   1B7C 00 00 00 00 
0907   1B80 00 00 00 00 
0907   1B84 00 00 00 00 
0907   1B88 00 00 00 00 
0907   1B8C 00 00 00 00 
0907   1B90 00 00 00 00 
0907   1B94 00 00 00 00 
0907   1B98 00 00 00 00 
0907   1B9C 00 00 00 00 
0907   1BA0 00 00 00 00 
0907   1BA4 00 00 00 00 
0907   1BA8 00 00 00 00 
0907   1BAC 00 00 00 00 
0907   1BB0 00 00 00 00 
0907   1BB4 00 00 00 00 
0907   1BB8 00 00 00 00 
0907   1BBC 00 00 00 00 
0907   1BC0 00 00 00 00 
0907   1BC4 00 00 00 00 
0907   1BC8 00 00 00 00 
0907   1BCC 00 00 00 00 
0907   1BD0 00 00 00 00 
0907   1BD4 00 00 00 00 
0907   1BD8 00 00 00 00 
0907   1BDC 00 00 00 00 
0907   1BE0 00 00 00 00 
0907   1BE4 00 00 00 00 
0907   1BE8 00 00 00 00 
0907   1BEC 00 00 00 00 
0907   1BF0 00 00 00 00 
0907   1BF4 00 00 00 00 
0907   1BF8 00 00 00 00 
0907   1BFC 00 00 00 00 
0907   1C00 00 00 00 00 
0907   1C04 00 00 00 00 
0907   1C08 00 00 00 00 
0907   1C0C 00 00 00 00 
0907   1C10 00 00 00 00 
0907   1C14 00 00 00 00 
0907   1C18 00 00 00 00 
0907   1C1C 00 00 00 00 
0907   1C20 00 00 00 00 
0907   1C24 00 00 00 00 
0907   1C28 00 00 00 00 
0907   1C2C 00 00 00 00 
0907   1C30 00 00 00 00 
0907   1C34 00 00 00 00 
0907   1C38 00 00 00 00 
0907   1C3C 00 00 00 00 
0907   1C40 00 00 00 00 
0907   1C44 00 00 00 00 
0907   1C48 00 00 00 00 
0907   1C4C 00 00 00 00 
0907   1C50 00 00 00 00 
0907   1C54 00 00 00 00 
0907   1C58 00 00 00 00 
0907   1C5C 00 00 00 00 
0907   1C60 00 00 00 00 
0907   1C64 00 00 00 00 
0907   1C68 00 00 00 00 
0907   1C6C 00 00 00 00 
0907   1C70 00 00 00 00 
0907   1C74 00 00 00 00 
0907   1C78 00 00 00 00 
0907   1C7C 00 00 00 00 
0907   1C80 00 00 00 00 
0907   1C84 00 00 00 00 
0907   1C88 00 00 00 00 
0907   1C8C 00 00 00 00 
0907   1C90 00 00 00 00 
0907   1C94 00 00 00 00 
0907   1C98 00 00 00 00 
0907   1C9C 00 00 00 00 
0907   1CA0 00 00 00 00 
0907   1CA4 00 00 00 00 
0907   1CA8 00 00 00 00 
0907   1CAC 00 00 00 00 
0907   1CB0 00 00 00 00 
0907   1CB4 00 00 00 00 
0907   1CB8 00 00 00 00 
0907   1CBC 00 00 00 00 
0907   1CC0 00 00 00 00 
0907   1CC4 00 00 00 00 
0907   1CC8 00 00 00 00 
0907   1CCC 00 00 00 00 
0907   1CD0 00 00 00 00 
0907   1CD4 00 00 00 00 
0907   1CD8 00 00 00 00 
0907   1CDC 00 00 00 00 
0907   1CE0 00 00 00 00 
0907   1CE4 00 00 00 00 
0907   1CE8 00 00 00 00 
0907   1CEC 00 00 00 00 
0907   1CF0 00 00 00 00 
0907   1CF4 00 00 00 00 
0907   1CF8 00 00 00 00 
0907   1CFC 00 00 00 00 
0907   1D00 00 00 00 00 
0907   1D04 00 00 00 00 
0907   1D08 00 00 00 00 
0907   1D0C 00 00 00 00 
0907   1D10 00 00 00 00 
0907   1D14 00 00 00 00 
0907   1D18 00 00 00 00 
0907   1D1C 00 00 00 00 
0907   1D20 00 00 00 00 
0907   1D24 00 00 00 00 
0907   1D28 00 00 00 00 
0907   1D2C 00 00 00 00 
0907   1D30 00 00 00 00 
0907   1D34 00 00 00 00 
0907   1D38 00 00 00 00 
0907   1D3C 00 00 00 00 
0907   1D40 00 00 00 00 
0907   1D44 00 00 00 00 
0907   1D48 00 00 00 00 
0907   1D4C 00 00 00 00 
0907   1D50 00 00 00 00 
0907   1D54 00 00 00 00 
0907   1D58 00 00 00 00 
0907   1D5C 00 00 00 00 
0907   1D60 00 00 00 00 
0907   1D64 00 00 00 00 
0907   1D68 00 00 00 00 
0907   1D6C 00 00 00 00 
0907   1D70 00 00 00 00 
0907   1D74 00 00 00 00 
0907   1D78 00 00 00 00 
0907   1D7C 00 00 00 00 
0907   1D80 00 00 00 00 
0907   1D84 00 00 00 00 
0907   1D88 00 00 00 00 
0907   1D8C 00 00 00 00 
0907   1D90 00 00 00 00 
0907   1D94 00 00 00 00 
0907   1D98 00 00 00 00 
0907   1D9C 00 00 00 00 
0907   1DA0 00 00 00 00 
0907   1DA4 00 00 00 00 
0907   1DA8 00 00 00 00 
0907   1DAC 00 00 00 00 
0907   1DB0 00 00 00 00 
0907   1DB4 00 00 00 00 
0907   1DB8 00 00 00 00 
0907   1DBC 00 00 00 00 
0907   1DC0 00 00 00 00 
0907   1DC4 00 00 00 00 
0907   1DC8 00 00 00 00 
0907   1DCC 00 00 00 00 
0907   1DD0 00 00 00 00 
0907   1DD4 00 00 00 00 
0907   1DD8 00 00 00 00 
0907   1DDC 00 00 00 00 
0907   1DE0 00 00 00 00 
0907   1DE4 00 00 00 00 
0907   1DE8 00 00 00 00 
0907   1DEC 00 00 00 00 
0907   1DF0 00 00 00 00 
0907   1DF4 00 00 00 00 
0907   1DF8 00 00 00 00 
0907   1DFC 00 00 00 00 
0907   1E00 00 00 00 00 
0907   1E04 00 00 00 00 
0907   1E08 00 00 00 00 
0907   1E0C 00 00 00 00 
0907   1E10 00 00 00 00 
0907   1E14 00 00 00 00 
0907   1E18 00 00 00 00 
0907   1E1C 00 00 00 00 
0907   1E20 00 00 00 00 
0907   1E24 00 00 00 00 
0907   1E28 00 00 00 00 
0907   1E2C 00 00 00 00 
0907   1E30 00 00 00 00 
0907   1E34 00 00 00 00 
0907   1E38 00 00 00 00 
0907   1E3C 00 00 00 00 
0907   1E40 00 00 00 00 
0907   1E44 00 00 00 00 
0907   1E48 00 00 00 00 
0907   1E4C 00 00 00 00 
0907   1E50 00 00 00 00 
0907   1E54 00 00 00 00 
0907   1E58 00 00 00 00 
0907   1E5C 00 00 00 00 
0907   1E60 00 00 00 00 
0907   1E64 00 00 00 00 
0907   1E68 00 00 00 00 
0907   1E6C 00 00 00 00 
0907   1E70 00 00 00 00 
0907   1E74 00 00 00 00 
0907   1E78 00 00 00 00 
0907   1E7C 00 00 00 00 
0907   1E80 00 00 00 00 
0907   1E84 00 00 00 00 
0907   1E88 00 00 00 00 
0907   1E8C 00 00 00 00 
0907   1E90 00 00 00 00 
0907   1E94 00 00 00 00 
0907   1E98 00 00 00 00 
0907   1E9C 00 00 00 00 
0907   1EA0 00 00 00 00 
0907   1EA4 00 00 00 00 
0907   1EA8 00 00 00 00 
0907   1EAC 00 00 00 00 
0907   1EB0 00 00 00 00 
0907   1EB4 00 00 00 00 
0907   1EB8 00 00 00 00 
0907   1EBC 00 00 00 00 
0907   1EC0 00 00 00 00 
0907   1EC4 00 00 00 00 
0907   1EC8 00 00 00 00 
0907   1ECC 00 00 00 00 
0907   1ED0 00 00 00 00 
0907   1ED4 00 00 00 00 
0907   1ED8 00 00 00 00 
0907   1EDC 00 00 00 00 
0907   1EE0 00 00 00 00 
0907   1EE4 00 00 00 00 
0907   1EE8 00 00 00 00 
0907   1EEC 00 00 00 00 
0907   1EF0 00 00 00 00 
0907   1EF4 00 00 00 00 
0907   1EF8 00 00 00 00 
0907   1EFC 00 00 00 00 
0907   1F00 00 00 00 00 
0907   1F04 00 00 00 00 
0907   1F08 00 00 00 00 
0907   1F0C 00 00 00 00 
0907   1F10 00 00 00 00 
0907   1F14 00 00 00 00 
0907   1F18 00 00 00 00 
0907   1F1C 00 00 00 00 
0907   1F20 00 00 00 00 
0907   1F24 00 00 00 00 
0907   1F28 00 00 00 00 
0907   1F2C 00 00 00 00 
0907   1F30 00 00 00 00 
0907   1F34 00 00 00 00 
0907   1F38 00 00 00 00 
0907   1F3C 00 00 00 00 
0907   1F40 00 00 00 00 
0907   1F44 00 00 00 00 
0907   1F48 00 00 00 00 
0907   1F4C 00 00 00 00 
0907   1F50 00 00 00 00 
0907   1F54 00 00 00 00 
0907   1F58 00 00 00 00 
0907   1F5C 00 00 00 00 
0907   1F60 00 00 00 00 
0907   1F64 00 00 00 00 
0907   1F68 00 00 00 00 
0907   1F6C 00 00 00 00 
0907   1F70 00 00 00 00 
0907   1F74 00 00 00 00 
0907   1F78 00 00 00 00 
0907   1F7C 00 00 00 00 
0907   1F80 00 00 00 00 
0907   1F84 00 00 00 00 
0907   1F88 00 00 00 00 
0907   1F8C 00 00 00 00 
0907   1F90 00 00 00 00 
0907   1F94 00 00 00 00 
0907   1F98 00 00 00 00 
0907   1F9C 00 00 00 00 
0907   1FA0 00 00 00 00 
0907   1FA4 00 00 00 00 
0907   1FA8 00 00 00 00 
0907   1FAC 00 00 00 00 
0907   1FB0 00 00 00 00 
0907   1FB4 00 00 00 00 
0907   1FB8 00 00 00 00 
0907   1FBC 00 00 00 00 
0907   1FC0 00 00 00 00 
0907   1FC4 00 00 00 00 
0907   1FC8 00 00 00 00 
0907   1FCC 00 00 00 00 
0907   1FD0 00 00 00 00 
0907   1FD4 00 00 00 00 
0907   1FD8 00 00 00 00 
0907   1FDC 00 00 00 00 
0907   1FE0 00 00 00 00 
0907   1FE4 00 00 00 00 
0907   1FE8 00 00 00 00 
0907   1FEC 00 00 00 00 
0907   1FF0 00 00 00 00 
0907   1FF4 00 00 00 00 
0907   1FF8 00 00 00 00 
0907   1FFC 00 00 00 00 
0907   2000 00 00 00 00 
0907   2004 00 00 00 00 
0907   2008 00 00 00 00 
0907   200C 00 00 00 00 
0907   2010 00 00 00 00 
0907   2014 00 00 00 00 
0907   2018 00 00 00 00 
0907   201C 00 00 00 00 
0907   2020 00 00 00 00 
0907   2024 00 00 00 00 
0907   2028 00 00 00 00 
0907   202C 00 00 00 00 
0907   2030 00 00 00 00 
0907   2034 00 00 00 00 
0907   2038 00 00 00 00 
0907   203C 00 00 00 00 
0907   2040 00 00 00 00 
0907   2044 00 00 00 00 
0907   2048 00 00 00 00 
0907   204C 00 00 00 00 
0907   2050 00 00 00 00 
0907   2054 00 00 00 00 
0907   2058 00 00 00 00 
0907   205C 00 00 00 00 
0907   2060 00 00 00 00 
0907   2064 00 00 00 00 
0907   2068 00 00 00 00 
0907   206C 00 00 00 00 
0907   2070 00 00 00 00 
0907   2074 00 00 00 00 
0907   2078 00 00 00 00 
0907   207C 00 00 00 00 
0907   2080 00 00 00 00 
0907   2084 00 00 00 00 
0907   2088 00 00 00 00 
0907   208C 00 00 00 00 
0907   2090 00 00 00 00 
0907   2094 00 00 00 00 
0907   2098 00 00 00 00 
0907   209C 00 00 00 00 
0907   20A0 00 00 00 00 
0907   20A4 00 00 00 00 
0907   20A8 00 00 00 00 
0907   20AC 00 00 00 00 
0907   20B0 00 00 00 00 
0907   20B4 00 00 00 00 
0907   20B8 00 00 00 00 
0907   20BC 00 00 00 00 
0907   20C0 00 00 00 00 
0907   20C4 00 00 00 00 
0907   20C8 00 00 00 00 
0907   20CC 00 00 00 00 
0907   20D0 00 00 00 00 
0907   20D4 00 00 00 00 
0907   20D8 00 00 00 00 
0907   20DC 00 00 00 00 
0907   20E0 00 00 00 00 
0907   20E4 00 00 00 00 
0907   20E8 00 00 00 00 
0907   20EC 00 00 00 00 
0907   20F0 00 00 00 00 
0907   20F4 00 00 00 00 
0907   20F8 00 00 00 00 
0907   20FC 00 00 00 00 
0907   2100 00 00 00 00 
0907   2104 00 00 00 00 
0907   2108 00 00 00 00 
0907   210C 00 00 00 00 
0907   2110 00 00 00 00 
0907   2114 00 00 00 00 
0907   2118 00 00 00 00 
0907   211C 00 00 00 00 
0907   2120 00 00 00 00 
0907   2124 00 00 00 00 
0907   2128 00 00 00 00 
0907   212C 00 00 00 00 
0907   2130 00 00 00 00 
0907   2134 00 00 00 00 
0907   2138 00 00 00 00 
0907   213C 00 00 00 00 
0907   2140 00 00 00 00 
0907   2144 00 00 00 00 
0907   2148 00 00 00 00 
0907   214C 00 00 00 00 
0907   2150 00 00 00 00 
0907   2154 00 00 00 00 
0907   2158 00 00 00 00 
0907   215C 00 00 00 00 
0907   2160 00 00 00 00 
0907   2164 00 00 00 00 
0907   2168 00 00 00 00 
0907   216C 00 00 00 00 
0907   2170 00 00 00 00 
0907   2174 00 00 00 00 
0907   2178 00 00 00 00 
0907   217C 00 00 00 00 
0907   2180 00 00 00 00 
0907   2184 00 00 00 00 
0907   2188 00 00 00 00 
0907   218C 00 00 00 00 
0907   2190 00 00 00 00 
0907   2194 00 00 00 00 
0907   2198 00 00 00 00 
0907   219C 00 00 00 00 
0907   21A0 00 00 00 00 
0907   21A4 00 00 00 00 
0907   21A8 00 00 00 00 
0907   21AC 00 00 00 00 
0907   21B0 00 00 00 00 
0907   21B4 00 00 00 00 
0907   21B8 00 00 00 00 
0907   21BC 00 00 00 00 
0907   21C0 00 00 00 00 
0907   21C4 00 00 00 00 
0907   21C8 00 00 00 00 
0907   21CC 00 00 00 00 
0907   21D0 00 00 00 00 
0907   21D4 00 00 00 00 
0907   21D8 00 00 00 00 
0907   21DC 00 00 00 00 
0907   21E0 00 00 00 00 
0907   21E4 00 00 00 00 
0907   21E8 00 00 00 00 
0907   21EC 00 00 00 00 
0907   21F0 00 00 00 00 
0907   21F4 00 00 00 00 
0907   21F8 00 00 00 00 
0907   21FC 00 00 00 00 
0907   2200 00 00 00 00 
0907   2204 00 00 00 00 
0907   2208 00 00 00 00 
0907   220C 00 00 00 00 
0907   2210 00 00 00 00 
0907   2214 00 00 00 00 
0907   2218 00 00 00 00 
0907   221C 00 00 00 00 
0907   2220 00 00 00 00 
0907   2224 00 00 00 00 
0907   2228 00 00 00 00 
0907   222C 00 00 00 00 
0907   2230 00 00 00 00 
0907   2234 00 00 00 00 
0907   2238 00 00 00 00 
0907   223C 00 00 00 00 
0907   2240 00 00 00 00 
0907   2244 00 00 00 00 
0907   2248 00 00 00 00 
0907   224C 00 00 00 00 
0907   2250 00 00 00 00 
0907   2254 00 00 00 00 
0907   2258 00 00 00 00 
0907   225C 00 00 00 00 
0907   2260 00 00 00 00 
0907   2264 00 00 00 00 
0907   2268 00 00 00 00 
0907   226C 00 00 00 00 
0907   2270 00 00 00 00 
0907   2274 00 00 00 00 
0907   2278 00 00 00 00 
0907   227C 00 00 00 00 
0907   2280 00 00 00 00 
0907   2284 00 00 00 00 
0907   2288 00 00 00 00 
0908   228C 0C 16       next_state: .dw next_state_data
0909   228E 47 65 6E 65 _string_0: .db "Generations: ", 0
0909   2292 72 61 74 69 
0909   2296 6F 6E 73 3A 
0909   229A 20 00 
0910   229C 2A 20 00    _string_1: .db "* ", 0
0911   229F 2E 20 00    _string_2: .db ". ", 0
0912   22A2 0A 00       _string_3: .db "\n", 0
0913   22A4             ; --- END DATA BLOCK
0914   22A4             
0915   22A4             ; --- BEGIN INCLUDE BLOCK
0916   22A4             .include "lib/stdio.asm"
0001+  22A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  22A4             ; stdio.s
0003+  22A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  22A4             .include "lib/string.asm"
0001++ 22A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 22A4             ; string.s
0003++ 22A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 22A4             
0005++ 22A4             
0006++ 22A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 22A4             ; strrev
0008++ 22A4             ; reverse a string
0009++ 22A4             ; D = string address
0010++ 22A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 22A4             ; 01234
0012++ 22A4             strrev:
0013++ 22A4 4B          	pusha
0014++ 22A5 07 EB 22    	call strlen	; length in C
0015++ 22A8 12          	mov a, c
0016++ 22A9 AF 01 00    	cmp a, 1
0017++ 22AC D0 C6 22    	jleu strrev_end	; check string length. string len must be > 1
0018++ 22AF 7D          	dec a
0019++ 22B0 FD 4E       	mov si, d	; beginning of string
0020++ 22B2 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 22B4 59          	add d, a	; end of string
0022++ 22B5 12          	mov a, c
0023++ 22B6 FD 9B       	shr a		; divide by 2
0024++ 22B8 39          	mov c, a	; C now counts the steps
0025++ 22B9             strrev_L0:
0026++ 22B9 32          	mov bl, [d]	; save load right-side char into BL
0027++ 22BA F6          	lodsb		; load left-side char into AL; increase SI
0028++ 22BB 3E          	mov [d], al	; store left char into right side
0029++ 22BC 1B          	mov al, bl
0030++ 22BD F7          	stosb		; store right-side char into left-side; increase DI
0031++ 22BE 7E          	dec c
0032++ 22BF 7F          	dec d
0033++ 22C0 C2 00 00    	cmp c, 0
0034++ 22C3 C7 B9 22    	jne strrev_L0
0035++ 22C6             strrev_end:
0036++ 22C6 4C          	popa
0037++ 22C7 09          	ret
0038++ 22C8             	
0039++ 22C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 22C8             ; strchr
0041++ 22C8             ; search string in D for char in AL
0042++ 22C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 22C8             strchr:
0044++ 22C8             strchr_L0:
0045++ 22C8 32          	mov bl, [d]
0046++ 22C9 C1 00       	cmp bl, 0
0047++ 22CB C6 D6 22    	je strchr_end
0048++ 22CE BA          	cmp al, bl
0049++ 22CF C6 D6 22    	je strchr_end
0050++ 22D2 79          	inc d
0051++ 22D3 0A C8 22    	jmp strchr_L0
0052++ 22D6             strchr_end:
0053++ 22D6 1B          	mov al, bl
0054++ 22D7 09          	ret
0055++ 22D8             
0056++ 22D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 22D8             ; strstr
0058++ 22D8             ; find sub-string
0059++ 22D8             ; str1 in SI
0060++ 22D8             ; str2 in DI
0061++ 22D8             ; SI points to end of source string
0062++ 22D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 22D8             strstr:
0064++ 22D8 DB          	push al
0065++ 22D9 DA          	push d
0066++ 22DA E3          	push di
0067++ 22DB             strstr_loop:
0068++ 22DB F3          	cmpsb					; compare a byte of the strings
0069++ 22DC C7 E7 22    	jne strstr_ret
0070++ 22DF FC 00 00    	lea d, [di + 0]
0071++ 22E2 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 22E4 C7 DB 22    	jne strstr_loop				; equal chars but not at end
0073++ 22E7             strstr_ret:
0074++ 22E7 F0          	pop di
0075++ 22E8 E7          	pop d
0076++ 22E9 E8          	pop al
0077++ 22EA 09          	ret
0078++ 22EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 22EB             ; length of null terminated string
0080++ 22EB             ; result in C
0081++ 22EB             ; pointer in D
0082++ 22EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 22EB             strlen:
0084++ 22EB DA          	push d
0085++ 22EC 38 00 00    	mov c, 0
0086++ 22EF             strlen_L1:
0087++ 22EF BD 00       	cmp byte [d], 0
0088++ 22F1 C6 F9 22    	je strlen_ret
0089++ 22F4 79          	inc d
0090++ 22F5 78          	inc c
0091++ 22F6 0A EF 22    	jmp strlen_L1
0092++ 22F9             strlen_ret:
0093++ 22F9 E7          	pop d
0094++ 22FA 09          	ret
0095++ 22FB             
0096++ 22FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 22FB             ; STRCMP
0098++ 22FB             ; compare two strings
0099++ 22FB             ; str1 in SI
0100++ 22FB             ; str2 in DI
0101++ 22FB             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 22FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 22FB             strcmp:
0104++ 22FB DB          	push al
0105++ 22FC DA          	push d
0106++ 22FD E3          	push di
0107++ 22FE E2          	push si
0108++ 22FF             strcmp_loop:
0109++ 22FF F3          	cmpsb					; compare a byte of the strings
0110++ 2300 C7 0B 23    	jne strcmp_ret
0111++ 2303 FB FF FF    	lea d, [si +- 1]
0112++ 2306 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 2308 C7 FF 22    	jne strcmp_loop				; equal chars but not at end
0114++ 230B             strcmp_ret:
0115++ 230B EF          	pop si
0116++ 230C F0          	pop di
0117++ 230D E7          	pop d
0118++ 230E E8          	pop al
0119++ 230F 09          	ret
0120++ 2310             
0121++ 2310             
0122++ 2310             ; STRCPY
0123++ 2310             ; copy null terminated string from SI to DI
0124++ 2310             ; source in SI
0125++ 2310             ; destination in DI
0126++ 2310             strcpy:
0127++ 2310 E2          	push si
0128++ 2311 E3          	push di
0129++ 2312 DB          	push al
0130++ 2313             strcpy_L1:
0131++ 2313 F6          	lodsb
0132++ 2314 F7          	stosb
0133++ 2315 B9 00       	cmp al, 0
0134++ 2317 C7 13 23    	jne strcpy_L1
0135++ 231A             strcpy_end:
0136++ 231A E8          	pop al
0137++ 231B F0          	pop di
0138++ 231C EF          	pop si
0139++ 231D 09          	ret
0140++ 231E             
0141++ 231E             ; STRCAT
0142++ 231E             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 231E             ; source in SI
0144++ 231E             ; destination in DI
0145++ 231E             strcat:
0146++ 231E E2          	push si
0147++ 231F E3          	push di
0148++ 2320 D7          	push a
0149++ 2321 DA          	push d
0150++ 2322 50          	mov a, di
0151++ 2323 3C          	mov d, a
0152++ 2324             strcat_goto_end_L1:
0153++ 2324 BD 00       	cmp byte[d], 0
0154++ 2326 C6 2D 23    	je strcat_start
0155++ 2329 79          	inc d
0156++ 232A 0A 24 23    	jmp strcat_goto_end_L1
0157++ 232D             strcat_start:
0158++ 232D FD 50       	mov di, d
0159++ 232F             strcat_L1:
0160++ 232F F6          	lodsb
0161++ 2330 F7          	stosb
0162++ 2331 B9 00       	cmp al, 0
0163++ 2333 C7 2F 23    	jne strcat_L1
0164++ 2336             strcat_end:
0165++ 2336 E7          	pop d
0166++ 2337 E4          	pop a
0167++ 2338 F0          	pop di
0168++ 2339 EF          	pop si
0169++ 233A 09          	ret
0005+  233B             
0006+  233B 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  233F 34 35 36 37 
0006+  2343 38 39 41 42 
0006+  2347 43 44 45 46 
0007+  234B             
0008+  234B 01 00       table_power:.dw 1
0009+  234D 0A 00       			.dw 10
0010+  234F 64 00       			.dw 100
0011+  2351 E8 03       			.dw 1000
0012+  2353 10 27       			.dw 10000
0013+  2355             
0014+  2355             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  2355             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  2355             ; ASCII in BL
0017+  2355             ; result in AL
0018+  2355             ; ascii for F = 0100 0110
0019+  2355             ; ascii for 9 = 0011 1001
0020+  2355             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  2355             hex_ascii_encode:
0022+  2355 1B          	mov al, bl
0023+  2356 93 40       	test al, $40				; test if letter or number
0024+  2358 C7 5E 23    	jnz hex_letter
0025+  235B 87 0F       	and al, $0F				; get number
0026+  235D 09          	ret
0027+  235E             hex_letter:
0028+  235E 87 0F       	and al, $0F				; get letter
0029+  2360 6A 09       	add al, 9
0030+  2362 09          	ret
0031+  2363             
0032+  2363             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  2363             ; ATOI
0034+  2363             ; 2 letter hex string in B
0035+  2363             ; 8bit integer returned in AL
0036+  2363             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  2363             atoi:
0038+  2363 D8          	push b
0039+  2364 07 55 23    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  2367 30          	mov bl, bh
0041+  2368 DB          	push al					; save a
0042+  2369 07 55 23    	call hex_ascii_encode
0043+  236C EA          	pop bl	
0044+  236D FD 9E 04    	shl al, 4
0045+  2370 8C          	or al, bl
0046+  2371 E5          	pop b
0047+  2372 09          	ret	
0048+  2373             
0049+  2373             
0050+  2373             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  2373             ; printf
0052+  2373             ; no need for explanations!
0053+  2373             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  2373             printf:
0055+  2373 09          	ret
0056+  2374             
0057+  2374             
0058+  2374             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  2374             ; scanf
0060+  2374             ; no need for explanations!
0061+  2374             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  2374             scanf:
0063+  2374 09          	ret
0064+  2375             
0065+  2375             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  2375             ; ITOA
0067+  2375             ; 8bit value in BL
0068+  2375             ; 2 byte ASCII result in A
0069+  2375             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  2375             itoa:
0071+  2375 DA          	push d
0072+  2376 D8          	push b
0073+  2377 A7 00       	mov bh, 0
0074+  2379 FD A4 04    	shr bl, 4	
0075+  237C 74          	mov d, b
0076+  237D 1F 3B 23    	mov al, [d + s_hex_digits]
0077+  2380 23          	mov ah, al
0078+  2381             	
0079+  2381 E5          	pop b
0080+  2382 D8          	push b
0081+  2383 A7 00       	mov bh, 0
0082+  2385 FD 87 0F    	and bl, $0F
0083+  2388 74          	mov d, b
0084+  2389 1F 3B 23    	mov al, [d + s_hex_digits]
0085+  238C E5          	pop b
0086+  238D E7          	pop d
0087+  238E 09          	ret
0088+  238F             
0089+  238F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  238F             ; HEX STRING TO BINARY
0091+  238F             ; di = destination address
0092+  238F             ; si = source
0093+  238F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  238F             hex_to_int:
0095+  238F             hex_to_int_L1:
0096+  238F F6          	lodsb					; load from [SI] to AL
0097+  2390 B9 00       	cmp al, 0				; check if ASCII 0
0098+  2392 C6 9F 23    	jz hex_to_int_ret
0099+  2395 36          	mov bh, al
0100+  2396 F6          	lodsb
0101+  2397 2F          	mov bl, al
0102+  2398 07 63 23    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  239B F7          	stosb					; store AL to [DI]
0104+  239C 0A 8F 23    	jmp hex_to_int_L1
0105+  239F             hex_to_int_ret:
0106+  239F 09          	ret		
0107+  23A0             
0108+  23A0             
0109+  23A0             
0110+  23A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  23A0             ; GETCHAR
0112+  23A0             ; char in ah
0113+  23A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  23A0             getchar:
0115+  23A0 DB          	push al
0116+  23A1             getchar_retry:
0117+  23A1 FD 0C       	sti
0118+  23A3 19 01       	mov al, 1
0119+  23A5 05 03       	syscall sys_io			; receive in AH
0120+  23A7 B9 00       	cmp al, 0			; check if any char was receive
0121+  23A9 C6 A1 23    	je getchar_retry
0122+  23AC E8          	pop al
0123+  23AD 09          	ret
0124+  23AE             
0125+  23AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  23AE             ; PUTCHAR
0127+  23AE             ; char in ah
0128+  23AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  23AE             putchar:
0130+  23AE D7          	push a
0131+  23AF 19 00       	mov al, 0
0132+  23B1 05 03       	syscall sys_io			; char in AH
0133+  23B3 E4          	pop a
0134+  23B4 09          	ret
0135+  23B5             
0136+  23B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  23B5             ;; INPUT A STRING
0138+  23B5             ;; terminates with null
0139+  23B5             ;; pointer in D
0140+  23B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  23B5             gets:
0142+  23B5 D7          	push a
0143+  23B6 DA          	push d
0144+  23B7             gets_loop:
0145+  23B7 FD 0C       	sti
0146+  23B9 19 01       	mov al, 1
0147+  23BB 05 03       	syscall sys_io			; receive in AH
0148+  23BD B9 00       	cmp al, 0				; check error code (AL)
0149+  23BF C6 B7 23    	je gets_loop			; if no char received, retry
0150+  23C2             
0151+  23C2 76 1B       	cmp ah, 27
0152+  23C4 C6 E5 23    	je gets_telnet_escape
0153+  23C7 76 0A       	cmp ah, $0A				; LF
0154+  23C9 C6 3E 24    	je gets_end
0155+  23CC 76 0D       	cmp ah, $0D				; CR
0156+  23CE C6 3E 24    	je gets_end
0157+  23D1 76 5C       	cmp ah, $5C				; '\\'
0158+  23D3 C6 15 24    	je gets_escape
0159+  23D6             	
0160+  23D6 76 08       	cmp ah, $08			; check for backspace
0161+  23D8 C6 E1 23    	je gets_backspace
0162+  23DB             
0163+  23DB 1A          	mov al, ah
0164+  23DC 3E          	mov [d], al
0165+  23DD 79          	inc d
0166+  23DE 0A B7 23    	jmp gets_loop
0167+  23E1             gets_backspace:
0168+  23E1 7F          	dec d
0169+  23E2 0A B7 23    	jmp gets_loop
0170+  23E5             gets_telnet_escape:
0171+  23E5 FD 0C       	sti
0172+  23E7 19 01       	mov al, 1
0173+  23E9 05 03       	syscall sys_io				; receive in AH without echo
0174+  23EB B9 00       	cmp al, 0					; check error code (AL)
0175+  23ED C6 E5 23    	je gets_telnet_escape		; if no char received, retry
0176+  23F0 76 5B       	cmp ah, '['
0177+  23F2 C7 B7 23    	jne gets_loop
0178+  23F5             gets_telnet_escape_phase2:
0179+  23F5 FD 0C       	sti
0180+  23F7 19 01       	mov al, 1
0181+  23F9 05 03       	syscall sys_io					; receive in AH without echo
0182+  23FB B9 00       	cmp al, 0						; check error code (AL)
0183+  23FD C6 F5 23    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  2400 76 44       	cmp ah, 'D'
0185+  2402 C6 0D 24    	je gets_left_arrow
0186+  2405 76 43       	cmp ah, 'C'
0187+  2407 C6 11 24    	je gets_right_arrow
0188+  240A 0A B7 23    	jmp gets_loop
0189+  240D             gets_left_arrow:
0190+  240D 7F          	dec d
0191+  240E 0A B7 23    	jmp gets_loop
0192+  2411             gets_right_arrow:
0193+  2411 79          	inc d
0194+  2412 0A B7 23    	jmp gets_loop
0195+  2415             gets_escape:
0196+  2415 FD 0C       	sti
0197+  2417 19 01       	mov al, 1
0198+  2419 05 03       	syscall sys_io			; receive in AH
0199+  241B B9 00       	cmp al, 0				; check error code (AL)
0200+  241D C6 15 24    	je gets_escape			; if no char received, retry
0201+  2420 76 6E       	cmp ah, 'n'
0202+  2422 C6 30 24    	je gets_LF
0203+  2425 76 72       	cmp ah, 'r'
0204+  2427 C6 37 24    	je gets_CR
0205+  242A 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  242B 3E          	mov [d], al
0207+  242C 79          	inc d
0208+  242D 0A B7 23    	jmp gets_loop
0209+  2430             gets_LF:
0210+  2430 19 0A       	mov al, $0A
0211+  2432 3E          	mov [d], al
0212+  2433 79          	inc d
0213+  2434 0A B7 23    	jmp gets_loop
0214+  2437             gets_CR:
0215+  2437 19 0D       	mov al, $0D
0216+  2439 3E          	mov [d], al
0217+  243A 79          	inc d
0218+  243B 0A B7 23    	jmp gets_loop
0219+  243E             gets_end:
0220+  243E 19 00       	mov al, 0
0221+  2440 3E          	mov [d], al				; terminate string
0222+  2441 E7          	pop d
0223+  2442 E4          	pop a
0224+  2443 09          	ret
0225+  2444             
0226+  2444             
0227+  2444             
0228+  2444             
0229+  2444             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  2444             ;; INPUT TEXT
0231+  2444             ;; terminated with CTRL+D
0232+  2444             ;; pointer in D
0233+  2444             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  2444             gettxt:
0235+  2444 D7          	push a
0236+  2445 DA          	push d
0237+  2446             gettxt_loop:
0238+  2446 19 01       	mov al, 1
0239+  2448 05 03       	syscall sys_io			; receive in AH
0240+  244A B9 00       	cmp al, 0				; check error code (AL)
0241+  244C C6 46 24    	je gettxt_loop		; if no char received, retry
0242+  244F 76 04       	cmp ah, 4			; EOT
0243+  2451 C6 8F 24    	je gettxt_end
0244+  2454 76 08       	cmp ah, $08			; check for backspace
0245+  2456 C6 8B 24    	je gettxt_backspace
0246+  2459 76 5C       	cmp ah, $5C				; '\\'
0247+  245B C6 64 24    	je gettxt_escape
0248+  245E 1A          	mov al, ah
0249+  245F 3E          	mov [d], al
0250+  2460 79          	inc d
0251+  2461 0A 46 24    	jmp gettxt_loop
0252+  2464             gettxt_escape:
0253+  2464 19 01       	mov al, 1
0254+  2466 05 03       	syscall sys_io			; receive in AH
0255+  2468 B9 00       	cmp al, 0				; check error code (AL)
0256+  246A C6 64 24    	je gettxt_escape		; if no char received, retry
0257+  246D 76 6E       	cmp ah, 'n'
0258+  246F C6 7D 24    	je gettxt_LF
0259+  2472 76 72       	cmp ah, 'r'
0260+  2474 C6 84 24    	je gettxt_CR
0261+  2477 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  2478 3E          	mov [d], al
0263+  2479 79          	inc d
0264+  247A 0A 46 24    	jmp gettxt_loop
0265+  247D             gettxt_LF:
0266+  247D 19 0A       	mov al, $0A
0267+  247F 3E          	mov [d], al
0268+  2480 79          	inc d
0269+  2481 0A 46 24    	jmp gettxt_loop
0270+  2484             gettxt_CR:
0271+  2484 19 0D       	mov al, $0D
0272+  2486 3E          	mov [d], al
0273+  2487 79          	inc d
0274+  2488 0A 46 24    	jmp gettxt_loop
0275+  248B             gettxt_backspace:
0276+  248B 7F          	dec d
0277+  248C 0A 46 24    	jmp gettxt_loop
0278+  248F             gettxt_end:
0279+  248F 19 00       	mov al, 0
0280+  2491 3E          	mov [d], al				; terminate string
0281+  2492 E7          	pop d
0282+  2493 E4          	pop a
0283+  2494 09          	ret
0284+  2495             
0285+  2495             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  2495             ; PRINT NEW LINE
0287+  2495             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  2495             printnl:
0289+  2495 D7          	push a
0290+  2496 10 00 0A    	mov a, $0A00
0291+  2499 05 03       	syscall sys_io
0292+  249B 10 00 0D    	mov a, $0D00
0293+  249E 05 03       	syscall sys_io
0294+  24A0 E4          	pop a
0295+  24A1 09          	ret
0296+  24A2             
0297+  24A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  24A2             ; strtoint
0299+  24A2             ; 4 digit hex string number in d
0300+  24A2             ; integer returned in A
0301+  24A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  24A2             strtointx:
0303+  24A2 D8          	push b
0304+  24A3 32          	mov bl, [d]
0305+  24A4 37          	mov bh, bl
0306+  24A5 33 01 00    	mov bl, [d + 1]
0307+  24A8 07 63 23    	call atoi				; convert to int in AL
0308+  24AB 23          	mov ah, al				; move to AH
0309+  24AC 33 02 00    	mov bl, [d + 2]
0310+  24AF 37          	mov bh, bl
0311+  24B0 33 03 00    	mov bl, [d + 3]
0312+  24B3 07 63 23    	call atoi				; convert to int in AL
0313+  24B6 E5          	pop b
0314+  24B7 09          	ret
0315+  24B8             
0316+  24B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  24B8             ; strtoint
0318+  24B8             ; 5 digit base10 string number in d
0319+  24B8             ; integer returned in A
0320+  24B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  24B8             strtoint:
0322+  24B8 E2          	push si
0323+  24B9 D8          	push b
0324+  24BA D9          	push c
0325+  24BB DA          	push d
0326+  24BC 07 EB 22    	call strlen			; get string length in C
0327+  24BF 7E          	dec c
0328+  24C0 FD 4E       	mov si, d
0329+  24C2 12          	mov a, c
0330+  24C3 FD 99       	shl a
0331+  24C5 3B 4B 23    	mov d, table_power
0332+  24C8 59          	add d, a
0333+  24C9 38 00 00    	mov c, 0
0334+  24CC             strtoint_L0:
0335+  24CC F6          	lodsb			; load ASCII to al
0336+  24CD B9 00       	cmp al, 0
0337+  24CF C6 E2 24    	je strtoint_end
0338+  24D2 6F 30       	sub al, $30		; make into integer
0339+  24D4 22 00       	mov ah, 0
0340+  24D6 2A          	mov b, [d]
0341+  24D7 AC          	mul a, b			; result in B since it fits in 16bits
0342+  24D8 11          	mov a, b
0343+  24D9 28          	mov b, c
0344+  24DA 54          	add a, b
0345+  24DB 39          	mov c, a
0346+  24DC 63 02 00    	sub d, 2
0347+  24DF 0A CC 24    	jmp strtoint_L0
0348+  24E2             strtoint_end:
0349+  24E2 12          	mov a, c
0350+  24E3 E7          	pop d
0351+  24E4 E6          	pop c
0352+  24E5 E5          	pop b
0353+  24E6 EF          	pop si
0354+  24E7 09          	ret
0355+  24E8             
0356+  24E8             
0357+  24E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  24E8             ; PRINT NULL TERMINATED STRING
0359+  24E8             ; pointer in D
0360+  24E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  24E8             puts:
0362+  24E8 D7          	push a
0363+  24E9 DA          	push d
0364+  24EA             puts_L1:
0365+  24EA 1E          	mov al, [d]
0366+  24EB B9 00       	cmp al, 0
0367+  24ED C6 F9 24    	jz puts_END
0368+  24F0 23          	mov ah, al
0369+  24F1 19 00       	mov al, 0
0370+  24F3 05 03       	syscall sys_io
0371+  24F5 79          	inc d
0372+  24F6 0A EA 24    	jmp puts_L1
0373+  24F9             puts_END:
0374+  24F9 E7          	pop d
0375+  24FA E4          	pop a
0376+  24FB 09          	ret
0377+  24FC             
0378+  24FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  24FC             ; PRINT N SIZE STRING
0380+  24FC             ; pointer in D
0381+  24FC             ; size in C
0382+  24FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  24FC             putsn:
0384+  24FC DB          	push al
0385+  24FD DA          	push d
0386+  24FE D9          	push c
0387+  24FF             putsn_L0:
0388+  24FF 1E          	mov al, [d]
0389+  2500 23          	mov ah, al
0390+  2501 19 00       	mov al, 0
0391+  2503 05 03       	syscall sys_io
0392+  2505 79          	inc d
0393+  2506 7E          	dec c	
0394+  2507 C2 00 00    	cmp c, 0
0395+  250A C7 FF 24    	jne putsn_L0
0396+  250D             putsn_end:
0397+  250D E6          	pop c
0398+  250E E7          	pop d
0399+  250F E8          	pop al
0400+  2510 09          	ret
0401+  2511             
0402+  2511             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  2511             ; print 16bit decimal number
0404+  2511             ; input number in A
0405+  2511             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  2511             print_u16d:
0407+  2511 D7          	push a
0408+  2512 D8          	push b
0409+  2513 26 10 27    	mov b, 10000
0410+  2516 AE          	div a, b			; get 10000 coeff.
0411+  2517 07 3D 25    	call print_number
0412+  251A 11          	mov a, b
0413+  251B 26 E8 03    	mov b, 1000
0414+  251E AE          	div a, b			; get 10000 coeff.
0415+  251F 07 3D 25    	call print_number
0416+  2522 11          	mov a, b
0417+  2523 26 64 00    	mov b, 100
0418+  2526 AE          	div a, b
0419+  2527 07 3D 25    	call print_number
0420+  252A 11          	mov a, b
0421+  252B 26 0A 00    	mov b, 10
0422+  252E AE          	div a, b
0423+  252F 07 3D 25    	call print_number
0424+  2532 11          	mov a, b
0425+  2533 6A 30       	add al, $30
0426+  2535 23          	mov ah, al
0427+  2536 19 00       	mov al, 0
0428+  2538 05 03       	syscall sys_io	; print coeff
0429+  253A E5          	pop b
0430+  253B E4          	pop a
0431+  253C 09          	ret
0432+  253D             
0433+  253D             
0434+  253D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  253D             ; if A == 0, print space
0436+  253D             ; else print A
0437+  253D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  253D             print_number:
0439+  253D 6A 30       	add al, $30
0440+  253F 23          	mov ah, al
0441+  2540 07 AE 23    	call putchar
0442+  2543 09          	ret
0443+  2544             
0444+  2544             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  2544             ; PRINT 16BIT HEX INTEGER
0446+  2544             ; integer value in reg B
0447+  2544             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  2544             print_u16x:
0449+  2544 D7          	push a
0450+  2545 D8          	push b
0451+  2546 DD          	push bl
0452+  2547 30          	mov bl, bh
0453+  2548 07 75 23    	call itoa				; convert bh to char in A
0454+  254B 2F          	mov bl, al				; save al
0455+  254C 19 00       	mov al, 0
0456+  254E 05 03       	syscall sys_io				; display AH
0457+  2550 24          	mov ah, bl				; retrieve al
0458+  2551 19 00       	mov al, 0
0459+  2553 05 03       	syscall sys_io				; display AL
0460+  2555             
0461+  2555 EA          	pop bl
0462+  2556 07 75 23    	call itoa				; convert bh to char in A
0463+  2559 2F          	mov bl, al				; save al
0464+  255A 19 00       	mov al, 0
0465+  255C 05 03       	syscall sys_io				; display AH
0466+  255E 24          	mov ah, bl				; retrieve al
0467+  255F 19 00       	mov al, 0
0468+  2561 05 03       	syscall sys_io				; display AL
0469+  2563             
0470+  2563 E5          	pop b
0471+  2564 E4          	pop a
0472+  2565 09          	ret
0473+  2566             
0474+  2566             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  2566             ; INPUT 16BIT HEX INTEGER
0476+  2566             ; read 16bit integer into A
0477+  2566             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  2566             scan_u16x:
0479+  2566 F8 10 00    	enter 16
0480+  2569 D8          	push b
0481+  256A DA          	push d
0482+  256B             
0483+  256B FA F1 FF    	lea d, [bp + -15]
0484+  256E 07 B5 23    	call gets				; get number
0485+  2571             
0486+  2571 32          	mov bl, [d]
0487+  2572 37          	mov bh, bl
0488+  2573 33 01 00    	mov bl, [d + 1]
0489+  2576 07 63 23    	call atoi				; convert to int in AL
0490+  2579 23          	mov ah, al				; move to AH
0491+  257A             
0492+  257A 33 02 00    	mov bl, [d + 2]
0493+  257D 37          	mov bh, bl
0494+  257E 33 03 00    	mov bl, [d + 3]
0495+  2581 07 63 23    	call atoi				; convert to int in AL
0496+  2584             
0497+  2584 E7          	pop d
0498+  2585 E5          	pop b
0499+  2586 F9          	leave
0500+  2587 09          	ret
0501+  2588             
0502+  2588             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  2588             ; PRINT 8bit HEX INTEGER
0504+  2588             ; integer value in reg bl
0505+  2588             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  2588             print_u8x:
0507+  2588 D7          	push a
0508+  2589 DD          	push bl
0509+  258A             
0510+  258A 07 75 23    	call itoa				; convert bl to char in A
0511+  258D 2F          	mov bl, al				; save al
0512+  258E 19 00       	mov al, 0
0513+  2590 05 03       	syscall sys_io				; display AH
0514+  2592 24          	mov ah, bl				; retrieve al
0515+  2593 19 00       	mov al, 0
0516+  2595 05 03       	syscall sys_io				; display AL
0517+  2597             
0518+  2597 EA          	pop bl
0519+  2598 E4          	pop a
0520+  2599 09          	ret
0521+  259A             
0522+  259A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  259A             ; print 8bit decimal unsigned number
0524+  259A             ; input number in AL
0525+  259A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  259A             print_u8d:
0527+  259A D7          	push a
0528+  259B D8          	push b
0529+  259C             
0530+  259C 22 00       	mov ah, 0
0531+  259E 26 64 00    	mov b, 100
0532+  25A1 AE          	div a, b
0533+  25A2 D8          	push b			; save remainder
0534+  25A3 B9 00       	cmp al, 0
0535+  25A5 C6 AF 25    	je skip100
0536+  25A8 6A 30       	add al, $30
0537+  25AA 23          	mov ah, al
0538+  25AB 19 00       	mov al, 0
0539+  25AD 05 03       	syscall sys_io	; print coeff
0540+  25AF             skip100:
0541+  25AF E4          	pop a
0542+  25B0 22 00       	mov ah, 0
0543+  25B2 26 0A 00    	mov b, 10
0544+  25B5 AE          	div a, b
0545+  25B6 D8          	push b			; save remainder
0546+  25B7 B9 00       	cmp al, 0
0547+  25B9 C6 C3 25    	je skip10
0548+  25BC 6A 30       	add al, $30
0549+  25BE 23          	mov ah, al
0550+  25BF 19 00       	mov al, 0
0551+  25C1 05 03       	syscall sys_io	; print coeff
0552+  25C3             skip10:
0553+  25C3 E4          	pop a
0554+  25C4 1B          	mov al, bl
0555+  25C5 6A 30       	add al, $30
0556+  25C7 23          	mov ah, al
0557+  25C8 19 00       	mov al, 0
0558+  25CA 05 03       	syscall sys_io	; print coeff
0559+  25CC E5          	pop b
0560+  25CD E4          	pop a
0561+  25CE 09          	ret
0562+  25CF             
0563+  25CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  25CF             ; INPUT 8BIT HEX INTEGER
0565+  25CF             ; read 8bit integer into AL
0566+  25CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  25CF             scan_u8x:
0568+  25CF F8 04 00    	enter 4
0569+  25D2 D8          	push b
0570+  25D3 DA          	push d
0571+  25D4             
0572+  25D4 FA FD FF    	lea d, [bp + -3]
0573+  25D7 07 B5 23    	call gets				; get number
0574+  25DA             
0575+  25DA 32          	mov bl, [d]
0576+  25DB 37          	mov bh, bl
0577+  25DC 33 01 00    	mov bl, [d + 1]
0578+  25DF 07 63 23    	call atoi				; convert to int in AL
0579+  25E2             
0580+  25E2 E7          	pop d
0581+  25E3 E5          	pop b
0582+  25E4 F9          	leave
0583+  25E5 09          	ret
0584+  25E6             
0585+  25E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  25E6             ; input decimal number
0587+  25E6             ; result in A
0588+  25E6             ; 655'\0'
0589+  25E6             ; low--------high
0590+  25E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  25E6             scan_u16d:
0592+  25E6 F8 08 00    	enter 8
0593+  25E9 E2          	push si
0594+  25EA D8          	push b
0595+  25EB D9          	push c
0596+  25EC DA          	push d
0597+  25ED FA F9 FF    	lea d, [bp +- 7]
0598+  25F0 07 B5 23    	call gets
0599+  25F3 07 EB 22    	call strlen			; get string length in C
0600+  25F6 7E          	dec c
0601+  25F7 FD 4E       	mov si, d
0602+  25F9 12          	mov a, c
0603+  25FA FD 99       	shl a
0604+  25FC 3B 4B 23    	mov d, table_power
0605+  25FF 59          	add d, a
0606+  2600 38 00 00    	mov c, 0
0607+  2603             mul_loop:
0608+  2603 F6          	lodsb			; load ASCII to al
0609+  2604 B9 00       	cmp al, 0
0610+  2606 C6 19 26    	je mul_exit
0611+  2609 6F 30       	sub al, $30		; make into integer
0612+  260B 22 00       	mov ah, 0
0613+  260D 2A          	mov b, [d]
0614+  260E AC          	mul a, b			; result in B since it fits in 16bits
0615+  260F 11          	mov a, b
0616+  2610 28          	mov b, c
0617+  2611 54          	add a, b
0618+  2612 39          	mov c, a
0619+  2613 63 02 00    	sub d, 2
0620+  2616 0A 03 26    	jmp mul_loop
0621+  2619             mul_exit:
0622+  2619 12          	mov a, c
0623+  261A E7          	pop d
0624+  261B E6          	pop c
0625+  261C E5          	pop b
0626+  261D EF          	pop si
0627+  261E F9          	leave
0628+  261F 09          	ret
0917   2620             ; --- END INCLUDE BLOCK
0918   2620             
0919   2620             
0920   2620             .end
tasm: Number of errors = 0
