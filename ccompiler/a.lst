0001   0000             ; --- FILENAME: fact.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; n
0010   0405 52 02 00      sub sp, 2 ; result
0011   0408 26 BE 04      mov b, _string_0
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 07 A3 04      call print
0015   0411 51 02 00      add sp, 2
0016   0414 07 AE 04      call getn
0017   0417 D7            push a
0018   0418 11            mov a, b
0019   0419 45 FF FF      mov [bp + -1], a ; n
0020   041C E4            pop a
0021   041D 2C FF FF      mov b, [bp + -1] ; n
0022   0420 FD AB         swp b
0023   0422 D8            push b
0024   0423 07 56 04      call fact
0025   0426 51 02 00      add sp, 2
0026   0429 D7            push a
0027   042A 11            mov a, b
0028   042B 45 FD FF      mov [bp + -3], a ; result
0029   042E E4            pop a
0030   042F 26 CD 04      mov b, _string_1
0031   0432 FD AB         swp b
0032   0434 D8            push b
0033   0435 07 A3 04      call print
0034   0438 51 02 00      add sp, 2
0035   043B 2C FD FF      mov b, [bp + -3] ; result
0036   043E FD AB         swp b
0037   0440 D8            push b
0038   0441 07 99 04      call printn
0039   0444 51 02 00      add sp, 2
0040   0447 26 D7 04      mov b, _string_2
0041   044A FD AB         swp b
0042   044C D8            push b
0043   044D 07 A3 04      call print
0044   0450 51 02 00      add sp, 2
0045   0453 F9            leave
0046   0454 05 0B         syscall sys_terminate_proc
0047   0456             fact:
0048   0456 D2            push bp
0049   0457 9B            mov bp, sp
0050   0458             _if1_cond:
0051   0458 2C 05 00      mov b, [bp + 5] ; n
0052   045B D7            push a
0053   045C 11            mov a, b
0054   045D 26 01 00      mov b, 1
0055   0460 B0            cmp a, b
0056   0461 0E            lodflgs
0057   0462 87 01         and al, %00000001 ; ==
0058   0464 B9 00         cmp al, 0
0059   0466 0E            lodflgs
0060   0467 96            not al
0061   0468 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0062   046A 22 00         mov ah, 0
0063   046C 27            mov b, a
0064   046D E4            pop a
0065   046E C0 00 00      cmp b, 0
0066   0471 C6 7C 04      je _if1_else
0067   0474             _if1_true:
0068   0474 26 01 00      mov b, 1
0069   0477 F9            leave
0070   0478 09            ret
0071   0479 0A 99 04      jmp _if1_exit
0072   047C             _if1_else:
0073   047C 2C 05 00      mov b, [bp + 5] ; n
0074   047F D7            push a
0075   0480 11            mov a, b
0076   0481 2C 05 00      mov b, [bp + 5] ; n
0077   0484 D7            push a
0078   0485 11            mov a, b
0079   0486 26 01 00      mov b, 1
0080   0489 60            sub a, b
0081   048A 27            mov b, a
0082   048B E4            pop a
0083   048C FD AB         swp b
0084   048E D8            push b
0085   048F 07 56 04      call fact
0086   0492 51 02 00      add sp, 2
0087   0495 AC            mul a, b
0088   0496 E4            pop a
0089   0497 F9            leave
0090   0498 09            ret
0091   0499             _if1_exit:
0092   0499             printn:
0093   0499 D2            push bp
0094   049A 9B            mov bp, sp
0095   049B             
0096   049B             ; --- BEGIN INLINE ASM BLOCK
0097   049B 17 05 00      mov a, [bp + 5]
0098   049E 07 4E 07      call print_u16d
0099   04A1             ; --- END INLINE ASM BLOCK
0100   04A1             
0101   04A1 F9            leave
0102   04A2 09            ret
0103   04A3             print:
0104   04A3 D2            push bp
0105   04A4 9B            mov bp, sp
0106   04A5             
0107   04A5             ; --- BEGIN INLINE ASM BLOCK
0108   04A5 17 05 00      mov a, [bp + 5]
0109   04A8 3C            mov d, a
0110   04A9 07 25 07      call puts
0111   04AC             ; --- END INLINE ASM BLOCK
0112   04AC             
0113   04AC F9            leave
0114   04AD 09            ret
0115   04AE             getn:
0116   04AE D2            push bp
0117   04AF 9B            mov bp, sp
0118   04B0 52 02 00      sub sp, 2 ; n
0119   04B3             
0120   04B3             ; --- BEGIN INLINE ASM BLOCK
0121   04B3 07 23 08      call scan_u16d
0122   04B6 45 FF FF      mov [bp + -1], a
0123   04B9             ; --- END INLINE ASM BLOCK
0124   04B9             
0125   04B9 2C FF FF      mov b, [bp + -1] ; n
0126   04BC F9            leave
0127   04BD 09            ret
0128   04BE             ; --- END TEXT BLOCK
0129   04BE             
0130   04BE             ; --- BEGIN DATA BLOCK
0131   04BE 46 61 63 74 _string_0: .db "Factorial of: ", 0
0131   04C2 6F 72 69 61 
0131   04C6 6C 20 6F 66 
0131   04CA 3A 20 00 
0132   04CD 0A 52 65 73 _string_1: .db "\nResult: ", 0
0132   04D1 75 6C 74 3A 
0132   04D5 20 00 
0133   04D7 0A 00       _string_2: .db "\n", 0
0134   04D9             ; --- END DATA BLOCK
0135   04D9             
0136   04D9             ; --- BEGIN INCLUDE BLOCK
0137   04D9             .include "lib/stdio.asm"
0001+  04D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  04D9             ; stdio.s
0003+  04D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  04D9             .include "lib/string.asm"
0001++ 04D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 04D9             ; string.s
0003++ 04D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 04D9             
0005++ 04D9             
0006++ 04D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 04D9             ; strrev
0008++ 04D9             ; reverse a string
0009++ 04D9             ; D = string address
0010++ 04D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 04D9             ; 01234
0012++ 04D9             strrev:
0013++ 04D9 4B          	pusha
0014++ 04DA 07 20 05    	call strlen	; length in C
0015++ 04DD 12          	mov a, c
0016++ 04DE AF 01 00    	cmp a, 1
0017++ 04E1 D0 FB 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 04E4 7D          	dec a
0019++ 04E5 FD 4E       	mov si, d	; beginning of string
0020++ 04E7 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 04E9 59          	add d, a	; end of string
0022++ 04EA 12          	mov a, c
0023++ 04EB FD 9B       	shr a		; divide by 2
0024++ 04ED 39          	mov c, a	; C now counts the steps
0025++ 04EE             strrev_L0:
0026++ 04EE 32          	mov bl, [d]	; save load right-side char into BL
0027++ 04EF F6          	lodsb		; load left-side char into AL; increase SI
0028++ 04F0 3E          	mov [d], al	; store left char into right side
0029++ 04F1 1B          	mov al, bl
0030++ 04F2 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 04F3 7E          	dec c
0032++ 04F4 7F          	dec d
0033++ 04F5 C2 00 00    	cmp c, 0
0034++ 04F8 C7 EE 04    	jne strrev_L0
0035++ 04FB             strrev_end:
0036++ 04FB 4C          	popa
0037++ 04FC 09          	ret
0038++ 04FD             	
0039++ 04FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 04FD             ; strchr
0041++ 04FD             ; search string in D for char in AL
0042++ 04FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 04FD             strchr:
0044++ 04FD             strchr_L0:
0045++ 04FD 32          	mov bl, [d]
0046++ 04FE C1 00       	cmp bl, 0
0047++ 0500 C6 0B 05    	je strchr_end
0048++ 0503 BA          	cmp al, bl
0049++ 0504 C6 0B 05    	je strchr_end
0050++ 0507 79          	inc d
0051++ 0508 0A FD 04    	jmp strchr_L0
0052++ 050B             strchr_end:
0053++ 050B 1B          	mov al, bl
0054++ 050C 09          	ret
0055++ 050D             
0056++ 050D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 050D             ; strstr
0058++ 050D             ; find sub-string
0059++ 050D             ; str1 in SI
0060++ 050D             ; str2 in DI
0061++ 050D             ; SI points to end of source string
0062++ 050D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 050D             strstr:
0064++ 050D DB          	push al
0065++ 050E DA          	push d
0066++ 050F E3          	push di
0067++ 0510             strstr_loop:
0068++ 0510 F3          	cmpsb					; compare a byte of the strings
0069++ 0511 C7 1C 05    	jne strstr_ret
0070++ 0514 FC 00 00    	lea d, [di + 0]
0071++ 0517 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0519 C7 10 05    	jne strstr_loop				; equal chars but not at end
0073++ 051C             strstr_ret:
0074++ 051C F0          	pop di
0075++ 051D E7          	pop d
0076++ 051E E8          	pop al
0077++ 051F 09          	ret
0078++ 0520             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0520             ; length of null terminated string
0080++ 0520             ; result in C
0081++ 0520             ; pointer in D
0082++ 0520             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0520             strlen:
0084++ 0520 DA          	push d
0085++ 0521 38 00 00    	mov c, 0
0086++ 0524             strlen_L1:
0087++ 0524 BD 00       	cmp byte [d], 0
0088++ 0526 C6 2E 05    	je strlen_ret
0089++ 0529 79          	inc d
0090++ 052A 78          	inc c
0091++ 052B 0A 24 05    	jmp strlen_L1
0092++ 052E             strlen_ret:
0093++ 052E E7          	pop d
0094++ 052F 09          	ret
0095++ 0530             
0096++ 0530             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0530             ; STRCMP
0098++ 0530             ; compare two strings
0099++ 0530             ; str1 in SI
0100++ 0530             ; str2 in DI
0101++ 0530             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0530             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0530             strcmp:
0104++ 0530 DB          	push al
0105++ 0531 DA          	push d
0106++ 0532 E3          	push di
0107++ 0533 E2          	push si
0108++ 0534             strcmp_loop:
0109++ 0534 F3          	cmpsb					; compare a byte of the strings
0110++ 0535 C7 40 05    	jne strcmp_ret
0111++ 0538 FB FF FF    	lea d, [si +- 1]
0112++ 053B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 053D C7 34 05    	jne strcmp_loop				; equal chars but not at end
0114++ 0540             strcmp_ret:
0115++ 0540 EF          	pop si
0116++ 0541 F0          	pop di
0117++ 0542 E7          	pop d
0118++ 0543 E8          	pop al
0119++ 0544 09          	ret
0120++ 0545             
0121++ 0545             
0122++ 0545             ; STRCPY
0123++ 0545             ; copy null terminated string from SI to DI
0124++ 0545             ; source in SI
0125++ 0545             ; destination in DI
0126++ 0545             strcpy:
0127++ 0545 E2          	push si
0128++ 0546 E3          	push di
0129++ 0547 DB          	push al
0130++ 0548             strcpy_L1:
0131++ 0548 F6          	lodsb
0132++ 0549 F7          	stosb
0133++ 054A B9 00       	cmp al, 0
0134++ 054C C7 48 05    	jne strcpy_L1
0135++ 054F             strcpy_end:
0136++ 054F E8          	pop al
0137++ 0550 F0          	pop di
0138++ 0551 EF          	pop si
0139++ 0552 09          	ret
0140++ 0553             
0141++ 0553             ; STRCAT
0142++ 0553             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0553             ; source in SI
0144++ 0553             ; destination in DI
0145++ 0553             strcat:
0146++ 0553 E2          	push si
0147++ 0554 E3          	push di
0148++ 0555 D7          	push a
0149++ 0556 DA          	push d
0150++ 0557 50          	mov a, di
0151++ 0558 3C          	mov d, a
0152++ 0559             strcat_goto_end_L1:
0153++ 0559 BD 00       	cmp byte[d], 0
0154++ 055B C6 62 05    	je strcat_start
0155++ 055E 79          	inc d
0156++ 055F 0A 59 05    	jmp strcat_goto_end_L1
0157++ 0562             strcat_start:
0158++ 0562 FD 50       	mov di, d
0159++ 0564             strcat_L1:
0160++ 0564 F6          	lodsb
0161++ 0565 F7          	stosb
0162++ 0566 B9 00       	cmp al, 0
0163++ 0568 C7 64 05    	jne strcat_L1
0164++ 056B             strcat_end:
0165++ 056B E7          	pop d
0166++ 056C E4          	pop a
0167++ 056D F0          	pop di
0168++ 056E EF          	pop si
0169++ 056F 09          	ret
0005+  0570             
0006+  0570 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0574 34 35 36 37 
0006+  0578 38 39 41 42 
0006+  057C 43 44 45 46 
0007+  0580 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0584 1B 5B 48 00 
0008+  0588             
0009+  0588 01 00       table_power:.dw 1
0010+  058A 0A 00       			.dw 10
0011+  058C 64 00       			.dw 100
0012+  058E E8 03       			.dw 1000
0013+  0590 10 27       			.dw 10000
0014+  0592             
0015+  0592             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0592             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0592             ; ASCII in BL
0018+  0592             ; result in AL
0019+  0592             ; ascii for F = 0100 0110
0020+  0592             ; ascii for 9 = 0011 1001
0021+  0592             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0592             hex_ascii_encode:
0023+  0592 1B          	mov al, bl
0024+  0593 93 40       	test al, $40				; test if letter or number
0025+  0595 C7 9B 05    	jnz hex_letter
0026+  0598 87 0F       	and al, $0F				; get number
0027+  059A 09          	ret
0028+  059B             hex_letter:
0029+  059B 87 0F       	and al, $0F				; get letter
0030+  059D 6A 09       	add al, 9
0031+  059F 09          	ret
0032+  05A0             
0033+  05A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  05A0             ; ATOI
0035+  05A0             ; 2 letter hex string in B
0036+  05A0             ; 8bit integer returned in AL
0037+  05A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  05A0             atoi:
0039+  05A0 D8          	push b
0040+  05A1 07 92 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  05A4 30          	mov bl, bh
0042+  05A5 DB          	push al					; save a
0043+  05A6 07 92 05    	call hex_ascii_encode
0044+  05A9 EA          	pop bl	
0045+  05AA FD 9E 04    	shl al, 4
0046+  05AD 8C          	or al, bl
0047+  05AE E5          	pop b
0048+  05AF 09          	ret	
0049+  05B0             
0050+  05B0             
0051+  05B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  05B0             ; printf
0053+  05B0             ; no need for explanations!
0054+  05B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  05B0             printf:
0056+  05B0 09          	ret
0057+  05B1             
0058+  05B1             
0059+  05B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  05B1             ; scanf
0061+  05B1             ; no need for explanations!
0062+  05B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  05B1             scanf:
0064+  05B1 09          	ret
0065+  05B2             
0066+  05B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  05B2             ; ITOA
0068+  05B2             ; 8bit value in BL
0069+  05B2             ; 2 byte ASCII result in A
0070+  05B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  05B2             itoa:
0072+  05B2 DA          	push d
0073+  05B3 D8          	push b
0074+  05B4 A7 00       	mov bh, 0
0075+  05B6 FD A4 04    	shr bl, 4	
0076+  05B9 74          	mov d, b
0077+  05BA 1F 70 05    	mov al, [d + s_hex_digits]
0078+  05BD 23          	mov ah, al
0079+  05BE             	
0080+  05BE E5          	pop b
0081+  05BF D8          	push b
0082+  05C0 A7 00       	mov bh, 0
0083+  05C2 FD 87 0F    	and bl, $0F
0084+  05C5 74          	mov d, b
0085+  05C6 1F 70 05    	mov al, [d + s_hex_digits]
0086+  05C9 E5          	pop b
0087+  05CA E7          	pop d
0088+  05CB 09          	ret
0089+  05CC             
0090+  05CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  05CC             ; HEX STRING TO BINARY
0092+  05CC             ; di = destination address
0093+  05CC             ; si = source
0094+  05CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  05CC             hex_to_int:
0096+  05CC             hex_to_int_L1:
0097+  05CC F6          	lodsb					; load from [SI] to AL
0098+  05CD B9 00       	cmp al, 0				; check if ASCII 0
0099+  05CF C6 DC 05    	jz hex_to_int_ret
0100+  05D2 36          	mov bh, al
0101+  05D3 F6          	lodsb
0102+  05D4 2F          	mov bl, al
0103+  05D5 07 A0 05    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  05D8 F7          	stosb					; store AL to [DI]
0105+  05D9 0A CC 05    	jmp hex_to_int_L1
0106+  05DC             hex_to_int_ret:
0107+  05DC 09          	ret		
0108+  05DD             
0109+  05DD             
0110+  05DD             
0111+  05DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  05DD             ; GETCHAR
0113+  05DD             ; char in ah
0114+  05DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  05DD             getchar:
0116+  05DD DB          	push al
0117+  05DE             getchar_retry:
0118+  05DE FD 0C       	sti
0119+  05E0 19 01       	mov al, 1
0120+  05E2 05 03       	syscall sys_io			; receive in AH
0121+  05E4 B9 00       	cmp al, 0			; check if any char was receive
0122+  05E6 C6 DE 05    	je getchar_retry
0123+  05E9 E8          	pop al
0124+  05EA 09          	ret
0125+  05EB             
0126+  05EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  05EB             ; PUTCHAR
0128+  05EB             ; char in ah
0129+  05EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  05EB             putchar:
0131+  05EB D7          	push a
0132+  05EC 19 00       	mov al, 0
0133+  05EE 05 03       	syscall sys_io			; char in AH
0134+  05F0 E4          	pop a
0135+  05F1 09          	ret
0136+  05F2             
0137+  05F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  05F2             ;; INPUT A STRING
0139+  05F2             ;; terminates with null
0140+  05F2             ;; pointer in D
0141+  05F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  05F2             gets:
0143+  05F2 D7          	push a
0144+  05F3 DA          	push d
0145+  05F4             gets_loop:
0146+  05F4 FD 0C       	sti
0147+  05F6 19 01       	mov al, 1
0148+  05F8 05 03       	syscall sys_io			; receive in AH
0149+  05FA B9 00       	cmp al, 0				; check error code (AL)
0150+  05FC C6 F4 05    	je gets_loop			; if no char received, retry
0151+  05FF             
0152+  05FF 76 1B       	cmp ah, 27
0153+  0601 C6 22 06    	je gets_telnet_escape
0154+  0604 76 0A       	cmp ah, $0A				; LF
0155+  0606 C6 7B 06    	je gets_end
0156+  0609 76 0D       	cmp ah, $0D				; CR
0157+  060B C6 7B 06    	je gets_end
0158+  060E 76 5C       	cmp ah, $5C				; '\\'
0159+  0610 C6 52 06    	je gets_escape
0160+  0613             	
0161+  0613 76 08       	cmp ah, $08			; check for backspace
0162+  0615 C6 1E 06    	je gets_backspace
0163+  0618             
0164+  0618 1A          	mov al, ah
0165+  0619 3E          	mov [d], al
0166+  061A 79          	inc d
0167+  061B 0A F4 05    	jmp gets_loop
0168+  061E             gets_backspace:
0169+  061E 7F          	dec d
0170+  061F 0A F4 05    	jmp gets_loop
0171+  0622             gets_telnet_escape:
0172+  0622 FD 0C       	sti
0173+  0624 19 01       	mov al, 1
0174+  0626 05 03       	syscall sys_io				; receive in AH without echo
0175+  0628 B9 00       	cmp al, 0					; check error code (AL)
0176+  062A C6 22 06    	je gets_telnet_escape		; if no char received, retry
0177+  062D 76 5B       	cmp ah, '['
0178+  062F C7 F4 05    	jne gets_loop
0179+  0632             gets_telnet_escape_phase2:
0180+  0632 FD 0C       	sti
0181+  0634 19 01       	mov al, 1
0182+  0636 05 03       	syscall sys_io					; receive in AH without echo
0183+  0638 B9 00       	cmp al, 0						; check error code (AL)
0184+  063A C6 32 06    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  063D 76 44       	cmp ah, 'D'
0186+  063F C6 4A 06    	je gets_left_arrow
0187+  0642 76 43       	cmp ah, 'C'
0188+  0644 C6 4E 06    	je gets_right_arrow
0189+  0647 0A F4 05    	jmp gets_loop
0190+  064A             gets_left_arrow:
0191+  064A 7F          	dec d
0192+  064B 0A F4 05    	jmp gets_loop
0193+  064E             gets_right_arrow:
0194+  064E 79          	inc d
0195+  064F 0A F4 05    	jmp gets_loop
0196+  0652             gets_escape:
0197+  0652 FD 0C       	sti
0198+  0654 19 01       	mov al, 1
0199+  0656 05 03       	syscall sys_io			; receive in AH
0200+  0658 B9 00       	cmp al, 0				; check error code (AL)
0201+  065A C6 52 06    	je gets_escape			; if no char received, retry
0202+  065D 76 6E       	cmp ah, 'n'
0203+  065F C6 6D 06    	je gets_LF
0204+  0662 76 72       	cmp ah, 'r'
0205+  0664 C6 74 06    	je gets_CR
0206+  0667 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0668 3E          	mov [d], al
0208+  0669 79          	inc d
0209+  066A 0A F4 05    	jmp gets_loop
0210+  066D             gets_LF:
0211+  066D 19 0A       	mov al, $0A
0212+  066F 3E          	mov [d], al
0213+  0670 79          	inc d
0214+  0671 0A F4 05    	jmp gets_loop
0215+  0674             gets_CR:
0216+  0674 19 0D       	mov al, $0D
0217+  0676 3E          	mov [d], al
0218+  0677 79          	inc d
0219+  0678 0A F4 05    	jmp gets_loop
0220+  067B             gets_end:
0221+  067B 19 00       	mov al, 0
0222+  067D 3E          	mov [d], al				; terminate string
0223+  067E E7          	pop d
0224+  067F E4          	pop a
0225+  0680 09          	ret
0226+  0681             
0227+  0681             
0228+  0681             
0229+  0681             
0230+  0681             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0681             ;; INPUT TEXT
0232+  0681             ;; terminated with CTRL+D
0233+  0681             ;; pointer in D
0234+  0681             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0681             gettxt:
0236+  0681 D7          	push a
0237+  0682 DA          	push d
0238+  0683             gettxt_loop:
0239+  0683 19 01       	mov al, 1
0240+  0685 05 03       	syscall sys_io			; receive in AH
0241+  0687 B9 00       	cmp al, 0				; check error code (AL)
0242+  0689 C6 83 06    	je gettxt_loop		; if no char received, retry
0243+  068C 76 04       	cmp ah, 4			; EOT
0244+  068E C6 CC 06    	je gettxt_end
0245+  0691 76 08       	cmp ah, $08			; check for backspace
0246+  0693 C6 C8 06    	je gettxt_backspace
0247+  0696 76 5C       	cmp ah, $5C				; '\\'
0248+  0698 C6 A1 06    	je gettxt_escape
0249+  069B 1A          	mov al, ah
0250+  069C 3E          	mov [d], al
0251+  069D 79          	inc d
0252+  069E 0A 83 06    	jmp gettxt_loop
0253+  06A1             gettxt_escape:
0254+  06A1 19 01       	mov al, 1
0255+  06A3 05 03       	syscall sys_io			; receive in AH
0256+  06A5 B9 00       	cmp al, 0				; check error code (AL)
0257+  06A7 C6 A1 06    	je gettxt_escape		; if no char received, retry
0258+  06AA 76 6E       	cmp ah, 'n'
0259+  06AC C6 BA 06    	je gettxt_LF
0260+  06AF 76 72       	cmp ah, 'r'
0261+  06B1 C6 C1 06    	je gettxt_CR
0262+  06B4 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  06B5 3E          	mov [d], al
0264+  06B6 79          	inc d
0265+  06B7 0A 83 06    	jmp gettxt_loop
0266+  06BA             gettxt_LF:
0267+  06BA 19 0A       	mov al, $0A
0268+  06BC 3E          	mov [d], al
0269+  06BD 79          	inc d
0270+  06BE 0A 83 06    	jmp gettxt_loop
0271+  06C1             gettxt_CR:
0272+  06C1 19 0D       	mov al, $0D
0273+  06C3 3E          	mov [d], al
0274+  06C4 79          	inc d
0275+  06C5 0A 83 06    	jmp gettxt_loop
0276+  06C8             gettxt_backspace:
0277+  06C8 7F          	dec d
0278+  06C9 0A 83 06    	jmp gettxt_loop
0279+  06CC             gettxt_end:
0280+  06CC 19 00       	mov al, 0
0281+  06CE 3E          	mov [d], al				; terminate string
0282+  06CF E7          	pop d
0283+  06D0 E4          	pop a
0284+  06D1 09          	ret
0285+  06D2             
0286+  06D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  06D2             ; PRINT NEW LINE
0288+  06D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  06D2             printnl:
0290+  06D2 D7          	push a
0291+  06D3 10 00 0A    	mov a, $0A00
0292+  06D6 05 03       	syscall sys_io
0293+  06D8 10 00 0D    	mov a, $0D00
0294+  06DB 05 03       	syscall sys_io
0295+  06DD E4          	pop a
0296+  06DE 09          	ret
0297+  06DF             
0298+  06DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  06DF             ; strtoint
0300+  06DF             ; 4 digit hex string number in d
0301+  06DF             ; integer returned in A
0302+  06DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  06DF             strtointx:
0304+  06DF D8          	push b
0305+  06E0 32          	mov bl, [d]
0306+  06E1 37          	mov bh, bl
0307+  06E2 33 01 00    	mov bl, [d + 1]
0308+  06E5 07 A0 05    	call atoi				; convert to int in AL
0309+  06E8 23          	mov ah, al				; move to AH
0310+  06E9 33 02 00    	mov bl, [d + 2]
0311+  06EC 37          	mov bh, bl
0312+  06ED 33 03 00    	mov bl, [d + 3]
0313+  06F0 07 A0 05    	call atoi				; convert to int in AL
0314+  06F3 E5          	pop b
0315+  06F4 09          	ret
0316+  06F5             
0317+  06F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  06F5             ; strtoint
0319+  06F5             ; 5 digit base10 string number in d
0320+  06F5             ; integer returned in A
0321+  06F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  06F5             strtoint:
0323+  06F5 E2          	push si
0324+  06F6 D8          	push b
0325+  06F7 D9          	push c
0326+  06F8 DA          	push d
0327+  06F9 07 20 05    	call strlen			; get string length in C
0328+  06FC 7E          	dec c
0329+  06FD FD 4E       	mov si, d
0330+  06FF 12          	mov a, c
0331+  0700 FD 99       	shl a
0332+  0702 3B 88 05    	mov d, table_power
0333+  0705 59          	add d, a
0334+  0706 38 00 00    	mov c, 0
0335+  0709             strtoint_L0:
0336+  0709 F6          	lodsb			; load ASCII to al
0337+  070A B9 00       	cmp al, 0
0338+  070C C6 1F 07    	je strtoint_end
0339+  070F 6F 30       	sub al, $30		; make into integer
0340+  0711 22 00       	mov ah, 0
0341+  0713 2A          	mov b, [d]
0342+  0714 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0715 11          	mov a, b
0344+  0716 28          	mov b, c
0345+  0717 54          	add a, b
0346+  0718 39          	mov c, a
0347+  0719 63 02 00    	sub d, 2
0348+  071C 0A 09 07    	jmp strtoint_L0
0349+  071F             strtoint_end:
0350+  071F 12          	mov a, c
0351+  0720 E7          	pop d
0352+  0721 E6          	pop c
0353+  0722 E5          	pop b
0354+  0723 EF          	pop si
0355+  0724 09          	ret
0356+  0725             
0357+  0725             
0358+  0725             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0725             ; PRINT NULL TERMINATED STRING
0360+  0725             ; pointer in D
0361+  0725             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0725             puts:
0363+  0725 D7          	push a
0364+  0726 DA          	push d
0365+  0727             puts_L1:
0366+  0727 1E          	mov al, [d]
0367+  0728 B9 00       	cmp al, 0
0368+  072A C6 36 07    	jz puts_END
0369+  072D 23          	mov ah, al
0370+  072E 19 00       	mov al, 0
0371+  0730 05 03       	syscall sys_io
0372+  0732 79          	inc d
0373+  0733 0A 27 07    	jmp puts_L1
0374+  0736             puts_END:
0375+  0736 E7          	pop d
0376+  0737 E4          	pop a
0377+  0738 09          	ret
0378+  0739             
0379+  0739             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0739             ; PRINT N SIZE STRING
0381+  0739             ; pointer in D
0382+  0739             ; size in C
0383+  0739             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0739             putsn:
0385+  0739 DB          	push al
0386+  073A DA          	push d
0387+  073B D9          	push c
0388+  073C             putsn_L0:
0389+  073C 1E          	mov al, [d]
0390+  073D 23          	mov ah, al
0391+  073E 19 00       	mov al, 0
0392+  0740 05 03       	syscall sys_io
0393+  0742 79          	inc d
0394+  0743 7E          	dec c	
0395+  0744 C2 00 00    	cmp c, 0
0396+  0747 C7 3C 07    	jne putsn_L0
0397+  074A             putsn_end:
0398+  074A E6          	pop c
0399+  074B E7          	pop d
0400+  074C E8          	pop al
0401+  074D 09          	ret
0402+  074E             
0403+  074E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  074E             ; print 16bit decimal number
0405+  074E             ; input number in A
0406+  074E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  074E             print_u16d:
0408+  074E D7          	push a
0409+  074F D8          	push b
0410+  0750 26 10 27    	mov b, 10000
0411+  0753 AE          	div a, b			; get 10000 coeff.
0412+  0754 07 7A 07    	call print_number
0413+  0757 11          	mov a, b
0414+  0758 26 E8 03    	mov b, 1000
0415+  075B AE          	div a, b			; get 10000 coeff.
0416+  075C 07 7A 07    	call print_number
0417+  075F 11          	mov a, b
0418+  0760 26 64 00    	mov b, 100
0419+  0763 AE          	div a, b
0420+  0764 07 7A 07    	call print_number
0421+  0767 11          	mov a, b
0422+  0768 26 0A 00    	mov b, 10
0423+  076B AE          	div a, b
0424+  076C 07 7A 07    	call print_number
0425+  076F 11          	mov a, b
0426+  0770 6A 30       	add al, $30
0427+  0772 23          	mov ah, al
0428+  0773 19 00       	mov al, 0
0429+  0775 05 03       	syscall sys_io	; print coeff
0430+  0777 E5          	pop b
0431+  0778 E4          	pop a
0432+  0779 09          	ret
0433+  077A             
0434+  077A             
0435+  077A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  077A             ; if A == 0, print space
0437+  077A             ; else print A
0438+  077A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  077A             print_number:
0440+  077A 6A 30       	add al, $30
0441+  077C 23          	mov ah, al
0442+  077D 07 EB 05    	call putchar
0443+  0780 09          	ret
0444+  0781             
0445+  0781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0781             ; PRINT 16BIT HEX INTEGER
0447+  0781             ; integer value in reg B
0448+  0781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0781             print_u16x:
0450+  0781 D7          	push a
0451+  0782 D8          	push b
0452+  0783 DD          	push bl
0453+  0784 30          	mov bl, bh
0454+  0785 07 B2 05    	call itoa				; convert bh to char in A
0455+  0788 2F          	mov bl, al				; save al
0456+  0789 19 00       	mov al, 0
0457+  078B 05 03       	syscall sys_io				; display AH
0458+  078D 24          	mov ah, bl				; retrieve al
0459+  078E 19 00       	mov al, 0
0460+  0790 05 03       	syscall sys_io				; display AL
0461+  0792             
0462+  0792 EA          	pop bl
0463+  0793 07 B2 05    	call itoa				; convert bh to char in A
0464+  0796 2F          	mov bl, al				; save al
0465+  0797 19 00       	mov al, 0
0466+  0799 05 03       	syscall sys_io				; display AH
0467+  079B 24          	mov ah, bl				; retrieve al
0468+  079C 19 00       	mov al, 0
0469+  079E 05 03       	syscall sys_io				; display AL
0470+  07A0             
0471+  07A0 E5          	pop b
0472+  07A1 E4          	pop a
0473+  07A2 09          	ret
0474+  07A3             
0475+  07A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  07A3             ; INPUT 16BIT HEX INTEGER
0477+  07A3             ; read 16bit integer into A
0478+  07A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  07A3             scan_u16x:
0480+  07A3 F8 10 00    	enter 16
0481+  07A6 D8          	push b
0482+  07A7 DA          	push d
0483+  07A8             
0484+  07A8 FA F1 FF    	lea d, [bp + -15]
0485+  07AB 07 F2 05    	call gets				; get number
0486+  07AE             
0487+  07AE 32          	mov bl, [d]
0488+  07AF 37          	mov bh, bl
0489+  07B0 33 01 00    	mov bl, [d + 1]
0490+  07B3 07 A0 05    	call atoi				; convert to int in AL
0491+  07B6 23          	mov ah, al				; move to AH
0492+  07B7             
0493+  07B7 33 02 00    	mov bl, [d + 2]
0494+  07BA 37          	mov bh, bl
0495+  07BB 33 03 00    	mov bl, [d + 3]
0496+  07BE 07 A0 05    	call atoi				; convert to int in AL
0497+  07C1             
0498+  07C1 E7          	pop d
0499+  07C2 E5          	pop b
0500+  07C3 F9          	leave
0501+  07C4 09          	ret
0502+  07C5             
0503+  07C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  07C5             ; PRINT 8bit HEX INTEGER
0505+  07C5             ; integer value in reg bl
0506+  07C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  07C5             print_u8x:
0508+  07C5 D7          	push a
0509+  07C6 DD          	push bl
0510+  07C7             
0511+  07C7 07 B2 05    	call itoa				; convert bl to char in A
0512+  07CA 2F          	mov bl, al				; save al
0513+  07CB 19 00       	mov al, 0
0514+  07CD 05 03       	syscall sys_io				; display AH
0515+  07CF 24          	mov ah, bl				; retrieve al
0516+  07D0 19 00       	mov al, 0
0517+  07D2 05 03       	syscall sys_io				; display AL
0518+  07D4             
0519+  07D4 EA          	pop bl
0520+  07D5 E4          	pop a
0521+  07D6 09          	ret
0522+  07D7             
0523+  07D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  07D7             ; print 8bit decimal unsigned number
0525+  07D7             ; input number in AL
0526+  07D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  07D7             print_u8d:
0528+  07D7 D7          	push a
0529+  07D8 D8          	push b
0530+  07D9             
0531+  07D9 22 00       	mov ah, 0
0532+  07DB 26 64 00    	mov b, 100
0533+  07DE AE          	div a, b
0534+  07DF D8          	push b			; save remainder
0535+  07E0 B9 00       	cmp al, 0
0536+  07E2 C6 EC 07    	je skip100
0537+  07E5 6A 30       	add al, $30
0538+  07E7 23          	mov ah, al
0539+  07E8 19 00       	mov al, 0
0540+  07EA 05 03       	syscall sys_io	; print coeff
0541+  07EC             skip100:
0542+  07EC E4          	pop a
0543+  07ED 22 00       	mov ah, 0
0544+  07EF 26 0A 00    	mov b, 10
0545+  07F2 AE          	div a, b
0546+  07F3 D8          	push b			; save remainder
0547+  07F4 B9 00       	cmp al, 0
0548+  07F6 C6 00 08    	je skip10
0549+  07F9 6A 30       	add al, $30
0550+  07FB 23          	mov ah, al
0551+  07FC 19 00       	mov al, 0
0552+  07FE 05 03       	syscall sys_io	; print coeff
0553+  0800             skip10:
0554+  0800 E4          	pop a
0555+  0801 1B          	mov al, bl
0556+  0802 6A 30       	add al, $30
0557+  0804 23          	mov ah, al
0558+  0805 19 00       	mov al, 0
0559+  0807 05 03       	syscall sys_io	; print coeff
0560+  0809 E5          	pop b
0561+  080A E4          	pop a
0562+  080B 09          	ret
0563+  080C             
0564+  080C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  080C             ; INPUT 8BIT HEX INTEGER
0566+  080C             ; read 8bit integer into AL
0567+  080C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  080C             scan_u8x:
0569+  080C F8 04 00    	enter 4
0570+  080F D8          	push b
0571+  0810 DA          	push d
0572+  0811             
0573+  0811 FA FD FF    	lea d, [bp + -3]
0574+  0814 07 F2 05    	call gets				; get number
0575+  0817             
0576+  0817 32          	mov bl, [d]
0577+  0818 37          	mov bh, bl
0578+  0819 33 01 00    	mov bl, [d + 1]
0579+  081C 07 A0 05    	call atoi				; convert to int in AL
0580+  081F             
0581+  081F E7          	pop d
0582+  0820 E5          	pop b
0583+  0821 F9          	leave
0584+  0822 09          	ret
0585+  0823             
0586+  0823             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0823             ; input decimal number
0588+  0823             ; result in A
0589+  0823             ; 655'\0'
0590+  0823             ; low--------high
0591+  0823             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  0823             scan_u16d:
0593+  0823 F8 08 00    	enter 8
0594+  0826 E2          	push si
0595+  0827 D8          	push b
0596+  0828 D9          	push c
0597+  0829 DA          	push d
0598+  082A FA F9 FF    	lea d, [bp +- 7]
0599+  082D 07 F2 05    	call gets
0600+  0830 07 20 05    	call strlen			; get string length in C
0601+  0833 7E          	dec c
0602+  0834 FD 4E       	mov si, d
0603+  0836 12          	mov a, c
0604+  0837 FD 99       	shl a
0605+  0839 3B 88 05    	mov d, table_power
0606+  083C 59          	add d, a
0607+  083D 38 00 00    	mov c, 0
0608+  0840             mul_loop:
0609+  0840 F6          	lodsb			; load ASCII to al
0610+  0841 B9 00       	cmp al, 0
0611+  0843 C6 56 08    	je mul_exit
0612+  0846 6F 30       	sub al, $30		; make into integer
0613+  0848 22 00       	mov ah, 0
0614+  084A 2A          	mov b, [d]
0615+  084B AC          	mul a, b			; result in B since it fits in 16bits
0616+  084C 11          	mov a, b
0617+  084D 28          	mov b, c
0618+  084E 54          	add a, b
0619+  084F 39          	mov c, a
0620+  0850 63 02 00    	sub d, 2
0621+  0853 0A 40 08    	jmp mul_loop
0622+  0856             mul_exit:
0623+  0856 12          	mov a, c
0624+  0857 E7          	pop d
0625+  0858 E6          	pop c
0626+  0859 E5          	pop b
0627+  085A EF          	pop si
0628+  085B F9          	leave
0629+  085C 09          	ret
0138   085D             ; --- END INCLUDE BLOCK
0139   085D             
0140   085D             
0141   085D             .end
tasm: Number of errors = 0
