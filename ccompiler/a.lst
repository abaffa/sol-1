0001   0000             ; --- FILENAME: largenumnSol1.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402             _for1_init:
0011   0402 26 00 00      mov b, 0
0012   0405 FD 42 AF 30   mov [pos], b
0013   0409             _for1_cond:
0014   0409 29 AF 30      mov b, [pos] ; pos
0015   040C D7            push a
0016   040D 11            mov a, b
0017   040E 26 3C 00      mov b, 60
0018   0411 B0            cmp a, b
0019   0412 0E            lodflgs
0020   0413 87 02         and al, %00000010 ; <
0021   0415 FD 9C         shr al
0022   0417 22 00         mov ah, 0
0023   0419 27            mov b, a
0024   041A E4            pop a
0025   041B C0 00 00      cmp b, 0
0026   041E C6 3B 04      je _for1_exit
0027   0421             _for1_block:
0028   0421 26 00 00      mov b, 0
0029   0424 FD AB         swp b
0030   0426 D8            push b
0031   0427 07 B6 13      call prnnum
0032   042A 51 02 00      add sp, 2
0033   042D             _for1_update:
0034   042D 29 AF 30      mov b, [pos] ; pos
0035   0430 11            mov a, b
0036   0431 FD 77         inc b
0037   0433 FD 42 AF 30   mov [pos], b
0038   0437 27            mov b, a
0039   0438 0A 09 04      jmp _for1_cond
0040   043B             _for1_exit:
0041   043B 07 C0 13      call prnnl
0042   043E             _for2_init:
0043   043E 26 06 00      mov b, 6
0044   0441 FD 42 AF 30   mov [pos], b
0045   0445             _for2_cond:
0046   0445 29 AF 30      mov b, [pos] ; pos
0047   0448 D7            push a
0048   0449 11            mov a, b
0049   044A 26 00 00      mov b, 0
0050   044D B0            cmp a, b
0051   044E 0E            lodflgs
0052   044F 87 03         and al, %00000011
0053   0451 B9 00         cmp al, 0
0054   0453 0E            lodflgs
0055   0454 22 00         mov ah, 0
0056   0456 27            mov b, a
0057   0457 E4            pop a
0058   0458 C0 00 00      cmp b, 0
0059   045B C6 CE 05      je _for2_exit
0060   045E             _for2_block:
0061   045E 07 95 13      call readint
0062   0461 FD 42 89 2F   mov [ionr], b
0063   0465 29 89 2F      mov b, [ionr] ; ionr
0064   0468 D7            push a
0065   0469 11            mov a, b
0066   046A 26 10 27      mov b, 10000
0067   046D AE            div a, b
0068   046E FD 78         mov g, a
0069   0470 11            mov a, b
0070   0471 FD 27         mov b, g
0071   0473 E4            pop a
0072   0474 FD 42 8B 2F   mov [ioshift], b
0073   0478 29 8B 2F      mov b, [ioshift] ; ioshift
0074   047B D7            push a
0075   047C 11            mov a, b
0076   047D 26 10 27      mov b, 10000
0077   0480 AC            mul a, b
0078   0481 E4            pop a
0079   0482 FD 42 8B 2F   mov [ioshift], b
0080   0486 29 89 2F      mov b, [ionr] ; ionr
0081   0489 D7            push a
0082   048A 11            mov a, b
0083   048B 29 8B 2F      mov b, [ioshift] ; ioshift
0084   048E 60            sub a, b
0085   048F 27            mov b, a
0086   0490 E4            pop a
0087   0491 FD 42 89 2F   mov [ionr], b
0088   0495 29 87 2F      mov b, [ionum]
0089   0498 74            mov d, b
0090   0499 DA            push d
0091   049A 29 AF 30      mov b, [pos] ; pos
0092   049D D7            push a
0093   049E 11            mov a, b
0094   049F 26 01 00      mov b, 1
0095   04A2 60            sub a, b
0096   04A3 27            mov b, a
0097   04A4 E4            pop a
0098   04A5 E7            pop d
0099   04A6 10 02 00      mov a, 2
0100   04A9 AC            mul a, b
0101   04AA 5A            add d, b
0102   04AB DA            push d
0103   04AC 29 89 2F      mov b, [ionr] ; ionr
0104   04AF E7            pop d
0105   04B0 11            mov a, b
0106   04B1 43            mov [d], a
0107   04B2             _for3_init:
0108   04B2 26 06 00      mov b, 6
0109   04B5 FD 42 D7 2F   mov [datumpos], b
0110   04B9             _for3_cond:
0111   04B9 29 D7 2F      mov b, [datumpos] ; datumpos
0112   04BC D7            push a
0113   04BD 11            mov a, b
0114   04BE 29 AF 30      mov b, [pos] ; pos
0115   04C1 B0            cmp a, b
0116   04C2 0E            lodflgs
0117   04C3 87 03         and al, %00000011
0118   04C5 8F 02         xor al, %00000010 ; >=
0119   04C7 B9 00         cmp al, 0
0120   04C9 0E            lodflgs
0121   04CA 8F 01         xor al, %00000001
0122   04CC 22 00         mov ah, 0
0123   04CE 27            mov b, a
0124   04CF E4            pop a
0125   04D0 C0 00 00      cmp b, 0
0126   04D3 C6 BD 05      je _for3_exit
0127   04D6             _for3_block:
0128   04D6             _if4_cond:
0129   04D6 29 87 2F      mov b, [ionum]
0130   04D9 D7            push a
0131   04DA 74            mov d, b
0132   04DB DA            push d
0133   04DC 29 D7 2F      mov b, [datumpos] ; datumpos
0134   04DF D7            push a
0135   04E0 11            mov a, b
0136   04E1 26 01 00      mov b, 1
0137   04E4 60            sub a, b
0138   04E5 27            mov b, a
0139   04E6 E4            pop a
0140   04E7 E7            pop d
0141   04E8 10 02 00      mov a, 2
0142   04EB AC            mul a, b
0143   04EC 5A            add d, b
0144   04ED 2A            mov b, [d]
0145   04EE E4            pop a
0146   04EF D7            push a
0147   04F0 11            mov a, b
0148   04F1 26 E8 03      mov b, 1000
0149   04F4 B0            cmp a, b
0150   04F5 0E            lodflgs
0151   04F6 87 02         and al, %00000010 ; <
0152   04F8 FD 9C         shr al
0153   04FA 22 00         mov ah, 0
0154   04FC 27            mov b, a
0155   04FD E4            pop a
0156   04FE C0 00 00      cmp b, 0
0157   0501 C6 13 05      je _if4_exit
0158   0504             _if4_true:
0159   0504 26 00 00      mov b, 0
0160   0507 FD AB         swp b
0161   0509 D8            push b
0162   050A 07 B6 13      call prnnum
0163   050D 51 02 00      add sp, 2
0164   0510 0A 13 05      jmp _if4_exit
0165   0513             _if4_exit:
0166   0513             _if5_cond:
0167   0513 29 87 2F      mov b, [ionum]
0168   0516 D7            push a
0169   0517 74            mov d, b
0170   0518 DA            push d
0171   0519 29 D7 2F      mov b, [datumpos] ; datumpos
0172   051C D7            push a
0173   051D 11            mov a, b
0174   051E 26 01 00      mov b, 1
0175   0521 60            sub a, b
0176   0522 27            mov b, a
0177   0523 E4            pop a
0178   0524 E7            pop d
0179   0525 10 02 00      mov a, 2
0180   0528 AC            mul a, b
0181   0529 5A            add d, b
0182   052A 2A            mov b, [d]
0183   052B E4            pop a
0184   052C D7            push a
0185   052D 11            mov a, b
0186   052E 26 64 00      mov b, 100
0187   0531 B0            cmp a, b
0188   0532 0E            lodflgs
0189   0533 87 02         and al, %00000010 ; <
0190   0535 FD 9C         shr al
0191   0537 22 00         mov ah, 0
0192   0539 27            mov b, a
0193   053A E4            pop a
0194   053B C0 00 00      cmp b, 0
0195   053E C6 50 05      je _if5_exit
0196   0541             _if5_true:
0197   0541 26 00 00      mov b, 0
0198   0544 FD AB         swp b
0199   0546 D8            push b
0200   0547 07 B6 13      call prnnum
0201   054A 51 02 00      add sp, 2
0202   054D 0A 50 05      jmp _if5_exit
0203   0550             _if5_exit:
0204   0550             _if6_cond:
0205   0550 29 87 2F      mov b, [ionum]
0206   0553 D7            push a
0207   0554 74            mov d, b
0208   0555 DA            push d
0209   0556 29 D7 2F      mov b, [datumpos] ; datumpos
0210   0559 D7            push a
0211   055A 11            mov a, b
0212   055B 26 01 00      mov b, 1
0213   055E 60            sub a, b
0214   055F 27            mov b, a
0215   0560 E4            pop a
0216   0561 E7            pop d
0217   0562 10 02 00      mov a, 2
0218   0565 AC            mul a, b
0219   0566 5A            add d, b
0220   0567 2A            mov b, [d]
0221   0568 E4            pop a
0222   0569 D7            push a
0223   056A 11            mov a, b
0224   056B 26 0A 00      mov b, 10
0225   056E B0            cmp a, b
0226   056F 0E            lodflgs
0227   0570 87 02         and al, %00000010 ; <
0228   0572 FD 9C         shr al
0229   0574 22 00         mov ah, 0
0230   0576 27            mov b, a
0231   0577 E4            pop a
0232   0578 C0 00 00      cmp b, 0
0233   057B C6 8D 05      je _if6_exit
0234   057E             _if6_true:
0235   057E 26 00 00      mov b, 0
0236   0581 FD AB         swp b
0237   0583 D8            push b
0238   0584 07 B6 13      call prnnum
0239   0587 51 02 00      add sp, 2
0240   058A 0A 8D 05      jmp _if6_exit
0241   058D             _if6_exit:
0242   058D 29 87 2F      mov b, [ionum]
0243   0590 D7            push a
0244   0591 74            mov d, b
0245   0592 DA            push d
0246   0593 29 D7 2F      mov b, [datumpos] ; datumpos
0247   0596 D7            push a
0248   0597 11            mov a, b
0249   0598 26 01 00      mov b, 1
0250   059B 60            sub a, b
0251   059C 27            mov b, a
0252   059D E4            pop a
0253   059E E7            pop d
0254   059F 10 02 00      mov a, 2
0255   05A2 AC            mul a, b
0256   05A3 5A            add d, b
0257   05A4 2A            mov b, [d]
0258   05A5 E4            pop a
0259   05A6 FD AB         swp b
0260   05A8 D8            push b
0261   05A9 07 B6 13      call prnnum
0262   05AC 51 02 00      add sp, 2
0263   05AF             _for3_update:
0264   05AF 29 D7 2F      mov b, [datumpos] ; datumpos
0265   05B2 11            mov a, b
0266   05B3 FD 7D         dec b
0267   05B5 FD 42 D7 2F   mov [datumpos], b
0268   05B9 27            mov b, a
0269   05BA 0A B9 04      jmp _for3_cond
0270   05BD             _for3_exit:
0271   05BD 07 C0 13      call prnnl
0272   05C0             _for2_update:
0273   05C0 29 AF 30      mov b, [pos] ; pos
0274   05C3 11            mov a, b
0275   05C4 FD 7D         dec b
0276   05C6 FD 42 AF 30   mov [pos], b
0277   05CA 27            mov b, a
0278   05CB 0A 45 04      jmp _for2_cond
0279   05CE             _for2_exit:
0280   05CE 26 00 00      mov b, 0
0281   05D1 FD 42 D7 2F   mov [datumpos], b
0282   05D5             _for7_init:
0283   05D5 29 D7 2F      mov b, [datumpos] ; datumpos
0284   05D8 D7            push a
0285   05D9 11            mov a, b
0286   05DA 26 06 00      mov b, 6
0287   05DD AC            mul a, b
0288   05DE E4            pop a
0289   05DF FD 42 AF 30   mov [pos], b
0290   05E3             _for7_cond:
0291   05E3 29 AF 30      mov b, [pos] ; pos
0292   05E6 D7            push a
0293   05E7 11            mov a, b
0294   05E8 29 D7 2F      mov b, [datumpos] ; datumpos
0295   05EB D7            push a
0296   05EC 11            mov a, b
0297   05ED 26 06 00      mov b, 6
0298   05F0 AC            mul a, b
0299   05F1 E4            pop a
0300   05F2 D7            push a
0301   05F3 11            mov a, b
0302   05F4 26 06 00      mov b, 6
0303   05F7 54            add a, b
0304   05F8 27            mov b, a
0305   05F9 E4            pop a
0306   05FA B0            cmp a, b
0307   05FB 0E            lodflgs
0308   05FC 87 02         and al, %00000010 ; <
0309   05FE FD 9C         shr al
0310   0600 22 00         mov ah, 0
0311   0602 27            mov b, a
0312   0603 E4            pop a
0313   0604 C0 00 00      cmp b, 0
0314   0607 C6 4A 06      je _for7_exit
0315   060A             _for7_block:
0316   060A 29 D5 2F      mov b, [datum]
0317   060D 74            mov d, b
0318   060E DA            push d
0319   060F 29 AF 30      mov b, [pos] ; pos
0320   0612 E7            pop d
0321   0613 10 02 00      mov a, 2
0322   0616 AC            mul a, b
0323   0617 5A            add d, b
0324   0618 DA            push d
0325   0619 29 87 2F      mov b, [ionum]
0326   061C D7            push a
0327   061D 74            mov d, b
0328   061E DA            push d
0329   061F 29 AF 30      mov b, [pos] ; pos
0330   0622 D7            push a
0331   0623 11            mov a, b
0332   0624 29 D7 2F      mov b, [datumpos] ; datumpos
0333   0627 D7            push a
0334   0628 11            mov a, b
0335   0629 26 06 00      mov b, 6
0336   062C AC            mul a, b
0337   062D E4            pop a
0338   062E 60            sub a, b
0339   062F 27            mov b, a
0340   0630 E4            pop a
0341   0631 E7            pop d
0342   0632 10 02 00      mov a, 2
0343   0635 AC            mul a, b
0344   0636 5A            add d, b
0345   0637 2A            mov b, [d]
0346   0638 E4            pop a
0347   0639 E7            pop d
0348   063A 11            mov a, b
0349   063B 43            mov [d], a
0350   063C             _for7_update:
0351   063C 29 AF 30      mov b, [pos] ; pos
0352   063F 11            mov a, b
0353   0640 FD 77         inc b
0354   0642 FD 42 AF 30   mov [pos], b
0355   0646 27            mov b, a
0356   0647 0A E3 05      jmp _for7_cond
0357   064A             _for7_exit:
0358   064A             _for8_init:
0359   064A 26 00 00      mov b, 0
0360   064D FD 42 AF 30   mov [pos], b
0361   0651             _for8_cond:
0362   0651 29 AF 30      mov b, [pos] ; pos
0363   0654 D7            push a
0364   0655 11            mov a, b
0365   0656 26 3C 00      mov b, 60
0366   0659 B0            cmp a, b
0367   065A 0E            lodflgs
0368   065B 87 02         and al, %00000010 ; <
0369   065D FD 9C         shr al
0370   065F 22 00         mov ah, 0
0371   0661 27            mov b, a
0372   0662 E4            pop a
0373   0663 C0 00 00      cmp b, 0
0374   0666 C6 83 06      je _for8_exit
0375   0669             _for8_block:
0376   0669 26 00 00      mov b, 0
0377   066C FD AB         swp b
0378   066E D8            push b
0379   066F 07 B6 13      call prnnum
0380   0672 51 02 00      add sp, 2
0381   0675             _for8_update:
0382   0675 29 AF 30      mov b, [pos] ; pos
0383   0678 11            mov a, b
0384   0679 FD 77         inc b
0385   067B FD 42 AF 30   mov [pos], b
0386   067F 27            mov b, a
0387   0680 0A 51 06      jmp _for8_cond
0388   0683             _for8_exit:
0389   0683 07 C0 13      call prnnl
0390   0686             _for9_init:
0391   0686 26 06 00      mov b, 6
0392   0689 FD 42 AF 30   mov [pos], b
0393   068D             _for9_cond:
0394   068D 29 AF 30      mov b, [pos] ; pos
0395   0690 D7            push a
0396   0691 11            mov a, b
0397   0692 26 00 00      mov b, 0
0398   0695 B0            cmp a, b
0399   0696 0E            lodflgs
0400   0697 87 03         and al, %00000011
0401   0699 B9 00         cmp al, 0
0402   069B 0E            lodflgs
0403   069C 22 00         mov ah, 0
0404   069E 27            mov b, a
0405   069F E4            pop a
0406   06A0 C0 00 00      cmp b, 0
0407   06A3 C6 16 08      je _for9_exit
0408   06A6             _for9_block:
0409   06A6 07 95 13      call readint
0410   06A9 FD 42 89 2F   mov [ionr], b
0411   06AD 29 89 2F      mov b, [ionr] ; ionr
0412   06B0 D7            push a
0413   06B1 11            mov a, b
0414   06B2 26 10 27      mov b, 10000
0415   06B5 AE            div a, b
0416   06B6 FD 78         mov g, a
0417   06B8 11            mov a, b
0418   06B9 FD 27         mov b, g
0419   06BB E4            pop a
0420   06BC FD 42 8B 2F   mov [ioshift], b
0421   06C0 29 8B 2F      mov b, [ioshift] ; ioshift
0422   06C3 D7            push a
0423   06C4 11            mov a, b
0424   06C5 26 10 27      mov b, 10000
0425   06C8 AC            mul a, b
0426   06C9 E4            pop a
0427   06CA FD 42 8B 2F   mov [ioshift], b
0428   06CE 29 89 2F      mov b, [ionr] ; ionr
0429   06D1 D7            push a
0430   06D2 11            mov a, b
0431   06D3 29 8B 2F      mov b, [ioshift] ; ioshift
0432   06D6 60            sub a, b
0433   06D7 27            mov b, a
0434   06D8 E4            pop a
0435   06D9 FD 42 89 2F   mov [ionr], b
0436   06DD 29 87 2F      mov b, [ionum]
0437   06E0 74            mov d, b
0438   06E1 DA            push d
0439   06E2 29 AF 30      mov b, [pos] ; pos
0440   06E5 D7            push a
0441   06E6 11            mov a, b
0442   06E7 26 01 00      mov b, 1
0443   06EA 60            sub a, b
0444   06EB 27            mov b, a
0445   06EC E4            pop a
0446   06ED E7            pop d
0447   06EE 10 02 00      mov a, 2
0448   06F1 AC            mul a, b
0449   06F2 5A            add d, b
0450   06F3 DA            push d
0451   06F4 29 89 2F      mov b, [ionr] ; ionr
0452   06F7 E7            pop d
0453   06F8 11            mov a, b
0454   06F9 43            mov [d], a
0455   06FA             _for10_init:
0456   06FA 26 06 00      mov b, 6
0457   06FD FD 42 D7 2F   mov [datumpos], b
0458   0701             _for10_cond:
0459   0701 29 D7 2F      mov b, [datumpos] ; datumpos
0460   0704 D7            push a
0461   0705 11            mov a, b
0462   0706 29 AF 30      mov b, [pos] ; pos
0463   0709 B0            cmp a, b
0464   070A 0E            lodflgs
0465   070B 87 03         and al, %00000011
0466   070D 8F 02         xor al, %00000010 ; >=
0467   070F B9 00         cmp al, 0
0468   0711 0E            lodflgs
0469   0712 8F 01         xor al, %00000001
0470   0714 22 00         mov ah, 0
0471   0716 27            mov b, a
0472   0717 E4            pop a
0473   0718 C0 00 00      cmp b, 0
0474   071B C6 05 08      je _for10_exit
0475   071E             _for10_block:
0476   071E             _if11_cond:
0477   071E 29 87 2F      mov b, [ionum]
0478   0721 D7            push a
0479   0722 74            mov d, b
0480   0723 DA            push d
0481   0724 29 D7 2F      mov b, [datumpos] ; datumpos
0482   0727 D7            push a
0483   0728 11            mov a, b
0484   0729 26 01 00      mov b, 1
0485   072C 60            sub a, b
0486   072D 27            mov b, a
0487   072E E4            pop a
0488   072F E7            pop d
0489   0730 10 02 00      mov a, 2
0490   0733 AC            mul a, b
0491   0734 5A            add d, b
0492   0735 2A            mov b, [d]
0493   0736 E4            pop a
0494   0737 D7            push a
0495   0738 11            mov a, b
0496   0739 26 E8 03      mov b, 1000
0497   073C B0            cmp a, b
0498   073D 0E            lodflgs
0499   073E 87 02         and al, %00000010 ; <
0500   0740 FD 9C         shr al
0501   0742 22 00         mov ah, 0
0502   0744 27            mov b, a
0503   0745 E4            pop a
0504   0746 C0 00 00      cmp b, 0
0505   0749 C6 5B 07      je _if11_exit
0506   074C             _if11_true:
0507   074C 26 00 00      mov b, 0
0508   074F FD AB         swp b
0509   0751 D8            push b
0510   0752 07 B6 13      call prnnum
0511   0755 51 02 00      add sp, 2
0512   0758 0A 5B 07      jmp _if11_exit
0513   075B             _if11_exit:
0514   075B             _if12_cond:
0515   075B 29 87 2F      mov b, [ionum]
0516   075E D7            push a
0517   075F 74            mov d, b
0518   0760 DA            push d
0519   0761 29 D7 2F      mov b, [datumpos] ; datumpos
0520   0764 D7            push a
0521   0765 11            mov a, b
0522   0766 26 01 00      mov b, 1
0523   0769 60            sub a, b
0524   076A 27            mov b, a
0525   076B E4            pop a
0526   076C E7            pop d
0527   076D 10 02 00      mov a, 2
0528   0770 AC            mul a, b
0529   0771 5A            add d, b
0530   0772 2A            mov b, [d]
0531   0773 E4            pop a
0532   0774 D7            push a
0533   0775 11            mov a, b
0534   0776 26 64 00      mov b, 100
0535   0779 B0            cmp a, b
0536   077A 0E            lodflgs
0537   077B 87 02         and al, %00000010 ; <
0538   077D FD 9C         shr al
0539   077F 22 00         mov ah, 0
0540   0781 27            mov b, a
0541   0782 E4            pop a
0542   0783 C0 00 00      cmp b, 0
0543   0786 C6 98 07      je _if12_exit
0544   0789             _if12_true:
0545   0789 26 00 00      mov b, 0
0546   078C FD AB         swp b
0547   078E D8            push b
0548   078F 07 B6 13      call prnnum
0549   0792 51 02 00      add sp, 2
0550   0795 0A 98 07      jmp _if12_exit
0551   0798             _if12_exit:
0552   0798             _if13_cond:
0553   0798 29 87 2F      mov b, [ionum]
0554   079B D7            push a
0555   079C 74            mov d, b
0556   079D DA            push d
0557   079E 29 D7 2F      mov b, [datumpos] ; datumpos
0558   07A1 D7            push a
0559   07A2 11            mov a, b
0560   07A3 26 01 00      mov b, 1
0561   07A6 60            sub a, b
0562   07A7 27            mov b, a
0563   07A8 E4            pop a
0564   07A9 E7            pop d
0565   07AA 10 02 00      mov a, 2
0566   07AD AC            mul a, b
0567   07AE 5A            add d, b
0568   07AF 2A            mov b, [d]
0569   07B0 E4            pop a
0570   07B1 D7            push a
0571   07B2 11            mov a, b
0572   07B3 26 0A 00      mov b, 10
0573   07B6 B0            cmp a, b
0574   07B7 0E            lodflgs
0575   07B8 87 02         and al, %00000010 ; <
0576   07BA FD 9C         shr al
0577   07BC 22 00         mov ah, 0
0578   07BE 27            mov b, a
0579   07BF E4            pop a
0580   07C0 C0 00 00      cmp b, 0
0581   07C3 C6 D5 07      je _if13_exit
0582   07C6             _if13_true:
0583   07C6 26 00 00      mov b, 0
0584   07C9 FD AB         swp b
0585   07CB D8            push b
0586   07CC 07 B6 13      call prnnum
0587   07CF 51 02 00      add sp, 2
0588   07D2 0A D5 07      jmp _if13_exit
0589   07D5             _if13_exit:
0590   07D5 29 87 2F      mov b, [ionum]
0591   07D8 D7            push a
0592   07D9 74            mov d, b
0593   07DA DA            push d
0594   07DB 29 D7 2F      mov b, [datumpos] ; datumpos
0595   07DE D7            push a
0596   07DF 11            mov a, b
0597   07E0 26 01 00      mov b, 1
0598   07E3 60            sub a, b
0599   07E4 27            mov b, a
0600   07E5 E4            pop a
0601   07E6 E7            pop d
0602   07E7 10 02 00      mov a, 2
0603   07EA AC            mul a, b
0604   07EB 5A            add d, b
0605   07EC 2A            mov b, [d]
0606   07ED E4            pop a
0607   07EE FD AB         swp b
0608   07F0 D8            push b
0609   07F1 07 B6 13      call prnnum
0610   07F4 51 02 00      add sp, 2
0611   07F7             _for10_update:
0612   07F7 29 D7 2F      mov b, [datumpos] ; datumpos
0613   07FA 11            mov a, b
0614   07FB FD 7D         dec b
0615   07FD FD 42 D7 2F   mov [datumpos], b
0616   0801 27            mov b, a
0617   0802 0A 01 07      jmp _for10_cond
0618   0805             _for10_exit:
0619   0805 07 C0 13      call prnnl
0620   0808             _for9_update:
0621   0808 29 AF 30      mov b, [pos] ; pos
0622   080B 11            mov a, b
0623   080C FD 7D         dec b
0624   080E FD 42 AF 30   mov [pos], b
0625   0812 27            mov b, a
0626   0813 0A 8D 06      jmp _for9_cond
0627   0816             _for9_exit:
0628   0816 26 01 00      mov b, 1
0629   0819 FD 42 D7 2F   mov [datumpos], b
0630   081D             _for14_init:
0631   081D 29 D7 2F      mov b, [datumpos] ; datumpos
0632   0820 D7            push a
0633   0821 11            mov a, b
0634   0822 26 06 00      mov b, 6
0635   0825 AC            mul a, b
0636   0826 E4            pop a
0637   0827 FD 42 AF 30   mov [pos], b
0638   082B             _for14_cond:
0639   082B 29 AF 30      mov b, [pos] ; pos
0640   082E D7            push a
0641   082F 11            mov a, b
0642   0830 29 D7 2F      mov b, [datumpos] ; datumpos
0643   0833 D7            push a
0644   0834 11            mov a, b
0645   0835 26 06 00      mov b, 6
0646   0838 AC            mul a, b
0647   0839 E4            pop a
0648   083A D7            push a
0649   083B 11            mov a, b
0650   083C 26 06 00      mov b, 6
0651   083F 54            add a, b
0652   0840 27            mov b, a
0653   0841 E4            pop a
0654   0842 B0            cmp a, b
0655   0843 0E            lodflgs
0656   0844 87 02         and al, %00000010 ; <
0657   0846 FD 9C         shr al
0658   0848 22 00         mov ah, 0
0659   084A 27            mov b, a
0660   084B E4            pop a
0661   084C C0 00 00      cmp b, 0
0662   084F C6 92 08      je _for14_exit
0663   0852             _for14_block:
0664   0852 29 D5 2F      mov b, [datum]
0665   0855 74            mov d, b
0666   0856 DA            push d
0667   0857 29 AF 30      mov b, [pos] ; pos
0668   085A E7            pop d
0669   085B 10 02 00      mov a, 2
0670   085E AC            mul a, b
0671   085F 5A            add d, b
0672   0860 DA            push d
0673   0861 29 87 2F      mov b, [ionum]
0674   0864 D7            push a
0675   0865 74            mov d, b
0676   0866 DA            push d
0677   0867 29 AF 30      mov b, [pos] ; pos
0678   086A D7            push a
0679   086B 11            mov a, b
0680   086C 29 D7 2F      mov b, [datumpos] ; datumpos
0681   086F D7            push a
0682   0870 11            mov a, b
0683   0871 26 06 00      mov b, 6
0684   0874 AC            mul a, b
0685   0875 E4            pop a
0686   0876 60            sub a, b
0687   0877 27            mov b, a
0688   0878 E4            pop a
0689   0879 E7            pop d
0690   087A 10 02 00      mov a, 2
0691   087D AC            mul a, b
0692   087E 5A            add d, b
0693   087F 2A            mov b, [d]
0694   0880 E4            pop a
0695   0881 E7            pop d
0696   0882 11            mov a, b
0697   0883 43            mov [d], a
0698   0884             _for14_update:
0699   0884 29 AF 30      mov b, [pos] ; pos
0700   0887 11            mov a, b
0701   0888 FD 77         inc b
0702   088A FD 42 AF 30   mov [pos], b
0703   088E 27            mov b, a
0704   088F 0A 2B 08      jmp _for14_cond
0705   0892             _for14_exit:
0706   0892 26 00 00      mov b, 0
0707   0895 FD 42 D7 2F   mov [datumpos], b
0708   0899             _for15_init:
0709   0899 29 D7 2F      mov b, [datumpos] ; datumpos
0710   089C D7            push a
0711   089D 11            mov a, b
0712   089E 26 06 00      mov b, 6
0713   08A1 AC            mul a, b
0714   08A2 E4            pop a
0715   08A3 FD 42 AF 30   mov [pos], b
0716   08A7             _for15_cond:
0717   08A7 29 AF 30      mov b, [pos] ; pos
0718   08AA D7            push a
0719   08AB 11            mov a, b
0720   08AC 29 D7 2F      mov b, [datumpos] ; datumpos
0721   08AF D7            push a
0722   08B0 11            mov a, b
0723   08B1 26 06 00      mov b, 6
0724   08B4 AC            mul a, b
0725   08B5 E4            pop a
0726   08B6 D7            push a
0727   08B7 11            mov a, b
0728   08B8 26 06 00      mov b, 6
0729   08BB 54            add a, b
0730   08BC 27            mov b, a
0731   08BD E4            pop a
0732   08BE B0            cmp a, b
0733   08BF 0E            lodflgs
0734   08C0 87 02         and al, %00000010 ; <
0735   08C2 FD 9C         shr al
0736   08C4 22 00         mov ah, 0
0737   08C6 27            mov b, a
0738   08C7 E4            pop a
0739   08C8 C0 00 00      cmp b, 0
0740   08CB C6 78 09      je _for15_exit
0741   08CE             _for15_block:
0742   08CE 29 D5 2F      mov b, [datum]
0743   08D1 D7            push a
0744   08D2 74            mov d, b
0745   08D3 DA            push d
0746   08D4 29 AF 30      mov b, [pos] ; pos
0747   08D7 E7            pop d
0748   08D8 10 02 00      mov a, 2
0749   08DB AC            mul a, b
0750   08DC 5A            add d, b
0751   08DD 2A            mov b, [d]
0752   08DE E4            pop a
0753   08DF D7            push a
0754   08E0 11            mov a, b
0755   08E1 26 64 00      mov b, 100
0756   08E4 AE            div a, b
0757   08E5 FD 78         mov g, a
0758   08E7 11            mov a, b
0759   08E8 FD 27         mov b, g
0760   08EA E4            pop a
0761   08EB FD 42 8B 2F   mov [ioshift], b
0762   08EF 29 F1 2F      mov b, [anarr]
0763   08F2 74            mov d, b
0764   08F3 DA            push d
0765   08F4 29 AF 30      mov b, [pos] ; pos
0766   08F7 D7            push a
0767   08F8 11            mov a, b
0768   08F9 29 D7 2F      mov b, [datumpos] ; datumpos
0769   08FC D7            push a
0770   08FD 11            mov a, b
0771   08FE 26 06 00      mov b, 6
0772   0901 AC            mul a, b
0773   0902 E4            pop a
0774   0903 60            sub a, b
0775   0904 27            mov b, a
0776   0905 E4            pop a
0777   0906 D7            push a
0778   0907 11            mov a, b
0779   0908 26 02 00      mov b, 2
0780   090B AC            mul a, b
0781   090C E4            pop a
0782   090D D7            push a
0783   090E 11            mov a, b
0784   090F 26 01 00      mov b, 1
0785   0912 54            add a, b
0786   0913 27            mov b, a
0787   0914 E4            pop a
0788   0915 E7            pop d
0789   0916 10 02 00      mov a, 2
0790   0919 AC            mul a, b
0791   091A 5A            add d, b
0792   091B DA            push d
0793   091C 29 8B 2F      mov b, [ioshift] ; ioshift
0794   091F E7            pop d
0795   0920 11            mov a, b
0796   0921 43            mov [d], a
0797   0922 29 F1 2F      mov b, [anarr]
0798   0925 74            mov d, b
0799   0926 DA            push d
0800   0927 29 AF 30      mov b, [pos] ; pos
0801   092A D7            push a
0802   092B 11            mov a, b
0803   092C 29 D7 2F      mov b, [datumpos] ; datumpos
0804   092F D7            push a
0805   0930 11            mov a, b
0806   0931 26 06 00      mov b, 6
0807   0934 AC            mul a, b
0808   0935 E4            pop a
0809   0936 60            sub a, b
0810   0937 27            mov b, a
0811   0938 E4            pop a
0812   0939 D7            push a
0813   093A 11            mov a, b
0814   093B 26 02 00      mov b, 2
0815   093E AC            mul a, b
0816   093F E4            pop a
0817   0940 E7            pop d
0818   0941 10 02 00      mov a, 2
0819   0944 AC            mul a, b
0820   0945 5A            add d, b
0821   0946 DA            push d
0822   0947 29 D5 2F      mov b, [datum]
0823   094A D7            push a
0824   094B 74            mov d, b
0825   094C DA            push d
0826   094D 29 AF 30      mov b, [pos] ; pos
0827   0950 E7            pop d
0828   0951 10 02 00      mov a, 2
0829   0954 AC            mul a, b
0830   0955 5A            add d, b
0831   0956 2A            mov b, [d]
0832   0957 E4            pop a
0833   0958 D7            push a
0834   0959 11            mov a, b
0835   095A 29 8B 2F      mov b, [ioshift] ; ioshift
0836   095D D7            push a
0837   095E 11            mov a, b
0838   095F 26 64 00      mov b, 100
0839   0962 AC            mul a, b
0840   0963 E4            pop a
0841   0964 60            sub a, b
0842   0965 27            mov b, a
0843   0966 E4            pop a
0844   0967 E7            pop d
0845   0968 11            mov a, b
0846   0969 43            mov [d], a
0847   096A             _for15_update:
0848   096A 29 AF 30      mov b, [pos] ; pos
0849   096D 11            mov a, b
0850   096E FD 77         inc b
0851   0970 FD 42 AF 30   mov [pos], b
0852   0974 27            mov b, a
0853   0975 0A A7 08      jmp _for15_cond
0854   0978             _for15_exit:
0855   0978 26 01 00      mov b, 1
0856   097B FD 42 D7 2F   mov [datumpos], b
0857   097F             _for16_init:
0858   097F 29 D7 2F      mov b, [datumpos] ; datumpos
0859   0982 D7            push a
0860   0983 11            mov a, b
0861   0984 26 06 00      mov b, 6
0862   0987 AC            mul a, b
0863   0988 E4            pop a
0864   0989 FD 42 AF 30   mov [pos], b
0865   098D             _for16_cond:
0866   098D 29 AF 30      mov b, [pos] ; pos
0867   0990 D7            push a
0868   0991 11            mov a, b
0869   0992 29 D7 2F      mov b, [datumpos] ; datumpos
0870   0995 D7            push a
0871   0996 11            mov a, b
0872   0997 26 06 00      mov b, 6
0873   099A AC            mul a, b
0874   099B E4            pop a
0875   099C D7            push a
0876   099D 11            mov a, b
0877   099E 26 06 00      mov b, 6
0878   09A1 54            add a, b
0879   09A2 27            mov b, a
0880   09A3 E4            pop a
0881   09A4 B0            cmp a, b
0882   09A5 0E            lodflgs
0883   09A6 87 02         and al, %00000010 ; <
0884   09A8 FD 9C         shr al
0885   09AA 22 00         mov ah, 0
0886   09AC 27            mov b, a
0887   09AD E4            pop a
0888   09AE C0 00 00      cmp b, 0
0889   09B1 C6 5E 0A      je _for16_exit
0890   09B4             _for16_block:
0891   09B4 29 D5 2F      mov b, [datum]
0892   09B7 D7            push a
0893   09B8 74            mov d, b
0894   09B9 DA            push d
0895   09BA 29 AF 30      mov b, [pos] ; pos
0896   09BD E7            pop d
0897   09BE 10 02 00      mov a, 2
0898   09C1 AC            mul a, b
0899   09C2 5A            add d, b
0900   09C3 2A            mov b, [d]
0901   09C4 E4            pop a
0902   09C5 D7            push a
0903   09C6 11            mov a, b
0904   09C7 26 64 00      mov b, 100
0905   09CA AE            div a, b
0906   09CB FD 78         mov g, a
0907   09CD 11            mov a, b
0908   09CE FD 27         mov b, g
0909   09D0 E4            pop a
0910   09D1 FD 42 8B 2F   mov [ioshift], b
0911   09D5 29 0B 30      mov b, [bnarr]
0912   09D8 74            mov d, b
0913   09D9 DA            push d
0914   09DA 29 AF 30      mov b, [pos] ; pos
0915   09DD D7            push a
0916   09DE 11            mov a, b
0917   09DF 29 D7 2F      mov b, [datumpos] ; datumpos
0918   09E2 D7            push a
0919   09E3 11            mov a, b
0920   09E4 26 06 00      mov b, 6
0921   09E7 AC            mul a, b
0922   09E8 E4            pop a
0923   09E9 60            sub a, b
0924   09EA 27            mov b, a
0925   09EB E4            pop a
0926   09EC D7            push a
0927   09ED 11            mov a, b
0928   09EE 26 02 00      mov b, 2
0929   09F1 AC            mul a, b
0930   09F2 E4            pop a
0931   09F3 D7            push a
0932   09F4 11            mov a, b
0933   09F5 26 01 00      mov b, 1
0934   09F8 54            add a, b
0935   09F9 27            mov b, a
0936   09FA E4            pop a
0937   09FB E7            pop d
0938   09FC 10 02 00      mov a, 2
0939   09FF AC            mul a, b
0940   0A00 5A            add d, b
0941   0A01 DA            push d
0942   0A02 29 8B 2F      mov b, [ioshift] ; ioshift
0943   0A05 E7            pop d
0944   0A06 11            mov a, b
0945   0A07 43            mov [d], a
0946   0A08 29 0B 30      mov b, [bnarr]
0947   0A0B 74            mov d, b
0948   0A0C DA            push d
0949   0A0D 29 AF 30      mov b, [pos] ; pos
0950   0A10 D7            push a
0951   0A11 11            mov a, b
0952   0A12 29 D7 2F      mov b, [datumpos] ; datumpos
0953   0A15 D7            push a
0954   0A16 11            mov a, b
0955   0A17 26 06 00      mov b, 6
0956   0A1A AC            mul a, b
0957   0A1B E4            pop a
0958   0A1C 60            sub a, b
0959   0A1D 27            mov b, a
0960   0A1E E4            pop a
0961   0A1F D7            push a
0962   0A20 11            mov a, b
0963   0A21 26 02 00      mov b, 2
0964   0A24 AC            mul a, b
0965   0A25 E4            pop a
0966   0A26 E7            pop d
0967   0A27 10 02 00      mov a, 2
0968   0A2A AC            mul a, b
0969   0A2B 5A            add d, b
0970   0A2C DA            push d
0971   0A2D 29 D5 2F      mov b, [datum]
0972   0A30 D7            push a
0973   0A31 74            mov d, b
0974   0A32 DA            push d
0975   0A33 29 AF 30      mov b, [pos] ; pos
0976   0A36 E7            pop d
0977   0A37 10 02 00      mov a, 2
0978   0A3A AC            mul a, b
0979   0A3B 5A            add d, b
0980   0A3C 2A            mov b, [d]
0981   0A3D E4            pop a
0982   0A3E D7            push a
0983   0A3F 11            mov a, b
0984   0A40 29 8B 2F      mov b, [ioshift] ; ioshift
0985   0A43 D7            push a
0986   0A44 11            mov a, b
0987   0A45 26 64 00      mov b, 100
0988   0A48 AC            mul a, b
0989   0A49 E4            pop a
0990   0A4A 60            sub a, b
0991   0A4B 27            mov b, a
0992   0A4C E4            pop a
0993   0A4D E7            pop d
0994   0A4E 11            mov a, b
0995   0A4F 43            mov [d], a
0996   0A50             _for16_update:
0997   0A50 29 AF 30      mov b, [pos] ; pos
0998   0A53 11            mov a, b
0999   0A54 FD 77         inc b
1000   0A56 FD 42 AF 30   mov [pos], b
1001   0A5A 27            mov b, a
1002   0A5B 0A 8D 09      jmp _for16_cond
1003   0A5E             _for16_exit:
1004   0A5E             _for17_init:
1005   0A5E 26 00 00      mov b, 0
1006   0A61 FD 42 AF 30   mov [pos], b
1007   0A65             _for17_cond:
1008   0A65 29 AF 30      mov b, [pos] ; pos
1009   0A68 D7            push a
1010   0A69 11            mov a, b
1011   0A6A 26 0C 00      mov b, 12
1012   0A6D B0            cmp a, b
1013   0A6E 0E            lodflgs
1014   0A6F 87 02         and al, %00000010 ; <
1015   0A71 FD 9C         shr al
1016   0A73 22 00         mov ah, 0
1017   0A75 27            mov b, a
1018   0A76 E4            pop a
1019   0A77 C0 00 00      cmp b, 0
1020   0A7A C6 D1 0A      je _for17_exit
1021   0A7D             _for17_block:
1022   0A7D 29 25 30      mov b, [anarrbkp]
1023   0A80 74            mov d, b
1024   0A81 DA            push d
1025   0A82 29 AF 30      mov b, [pos] ; pos
1026   0A85 E7            pop d
1027   0A86 10 02 00      mov a, 2
1028   0A89 AC            mul a, b
1029   0A8A 5A            add d, b
1030   0A8B DA            push d
1031   0A8C 29 F1 2F      mov b, [anarr]
1032   0A8F D7            push a
1033   0A90 74            mov d, b
1034   0A91 DA            push d
1035   0A92 29 AF 30      mov b, [pos] ; pos
1036   0A95 E7            pop d
1037   0A96 10 02 00      mov a, 2
1038   0A99 AC            mul a, b
1039   0A9A 5A            add d, b
1040   0A9B 2A            mov b, [d]
1041   0A9C E4            pop a
1042   0A9D E7            pop d
1043   0A9E 11            mov a, b
1044   0A9F 43            mov [d], a
1045   0AA0 29 3F 30      mov b, [bnarrbkp]
1046   0AA3 74            mov d, b
1047   0AA4 DA            push d
1048   0AA5 29 AF 30      mov b, [pos] ; pos
1049   0AA8 E7            pop d
1050   0AA9 10 02 00      mov a, 2
1051   0AAC AC            mul a, b
1052   0AAD 5A            add d, b
1053   0AAE DA            push d
1054   0AAF 29 0B 30      mov b, [bnarr]
1055   0AB2 D7            push a
1056   0AB3 74            mov d, b
1057   0AB4 DA            push d
1058   0AB5 29 AF 30      mov b, [pos] ; pos
1059   0AB8 E7            pop d
1060   0AB9 10 02 00      mov a, 2
1061   0ABC AC            mul a, b
1062   0ABD 5A            add d, b
1063   0ABE 2A            mov b, [d]
1064   0ABF E4            pop a
1065   0AC0 E7            pop d
1066   0AC1 11            mov a, b
1067   0AC2 43            mov [d], a
1068   0AC3             _for17_update:
1069   0AC3 29 AF 30      mov b, [pos] ; pos
1070   0AC6 11            mov a, b
1071   0AC7 FD 77         inc b
1072   0AC9 FD 42 AF 30   mov [pos], b
1073   0ACD 27            mov b, a
1074   0ACE 0A 65 0A      jmp _for17_cond
1075   0AD1             _for17_exit:
1076   0AD1             _for18_init:
1077   0AD1 26 00 00      mov b, 0
1078   0AD4 FD 42 AF 30   mov [pos], b
1079   0AD8             _for18_cond:
1080   0AD8 29 AF 30      mov b, [pos] ; pos
1081   0ADB D7            push a
1082   0ADC 11            mov a, b
1083   0ADD 26 3C 00      mov b, 60
1084   0AE0 B0            cmp a, b
1085   0AE1 0E            lodflgs
1086   0AE2 87 02         and al, %00000010 ; <
1087   0AE4 FD 9C         shr al
1088   0AE6 22 00         mov ah, 0
1089   0AE8 27            mov b, a
1090   0AE9 E4            pop a
1091   0AEA C0 00 00      cmp b, 0
1092   0AED C6 0A 0B      je _for18_exit
1093   0AF0             _for18_block:
1094   0AF0 26 00 00      mov b, 0
1095   0AF3 FD AB         swp b
1096   0AF5 D8            push b
1097   0AF6 07 B6 13      call prnnum
1098   0AF9 51 02 00      add sp, 2
1099   0AFC             _for18_update:
1100   0AFC 29 AF 30      mov b, [pos] ; pos
1101   0AFF 11            mov a, b
1102   0B00 FD 77         inc b
1103   0B02 FD 42 AF 30   mov [pos], b
1104   0B06 27            mov b, a
1105   0B07 0A D8 0A      jmp _for18_cond
1106   0B0A             _for18_exit:
1107   0B0A 07 C0 13      call prnnl
1108   0B0D 07 D0 21      call plus
1109   0B10 26 02 00      mov b, 2
1110   0B13 FD 42 D7 2F   mov [datumpos], b
1111   0B17             _for19_init:
1112   0B17 29 D7 2F      mov b, [datumpos] ; datumpos
1113   0B1A D7            push a
1114   0B1B 11            mov a, b
1115   0B1C 26 06 00      mov b, 6
1116   0B1F AC            mul a, b
1117   0B20 E4            pop a
1118   0B21 FD 42 AF 30   mov [pos], b
1119   0B25             _for19_cond:
1120   0B25 29 AF 30      mov b, [pos] ; pos
1121   0B28 D7            push a
1122   0B29 11            mov a, b
1123   0B2A 29 D7 2F      mov b, [datumpos] ; datumpos
1124   0B2D D7            push a
1125   0B2E 11            mov a, b
1126   0B2F 26 06 00      mov b, 6
1127   0B32 AC            mul a, b
1128   0B33 E4            pop a
1129   0B34 D7            push a
1130   0B35 11            mov a, b
1131   0B36 26 06 00      mov b, 6
1132   0B39 54            add a, b
1133   0B3A 27            mov b, a
1134   0B3B E4            pop a
1135   0B3C B0            cmp a, b
1136   0B3D 0E            lodflgs
1137   0B3E 87 02         and al, %00000010 ; <
1138   0B40 FD 9C         shr al
1139   0B42 22 00         mov ah, 0
1140   0B44 27            mov b, a
1141   0B45 E4            pop a
1142   0B46 C0 00 00      cmp b, 0
1143   0B49 C6 CE 0B      je _for19_exit
1144   0B4C             _for19_block:
1145   0B4C 29 D5 2F      mov b, [datum]
1146   0B4F 74            mov d, b
1147   0B50 DA            push d
1148   0B51 29 AF 30      mov b, [pos] ; pos
1149   0B54 E7            pop d
1150   0B55 10 02 00      mov a, 2
1151   0B58 AC            mul a, b
1152   0B59 5A            add d, b
1153   0B5A DA            push d
1154   0B5B 29 59 30      mov b, [cnarr]
1155   0B5E D7            push a
1156   0B5F 74            mov d, b
1157   0B60 DA            push d
1158   0B61 29 AF 30      mov b, [pos] ; pos
1159   0B64 D7            push a
1160   0B65 11            mov a, b
1161   0B66 29 D7 2F      mov b, [datumpos] ; datumpos
1162   0B69 D7            push a
1163   0B6A 11            mov a, b
1164   0B6B 26 06 00      mov b, 6
1165   0B6E AC            mul a, b
1166   0B6F E4            pop a
1167   0B70 60            sub a, b
1168   0B71 27            mov b, a
1169   0B72 E4            pop a
1170   0B73 D7            push a
1171   0B74 11            mov a, b
1172   0B75 26 02 00      mov b, 2
1173   0B78 AC            mul a, b
1174   0B79 E4            pop a
1175   0B7A D7            push a
1176   0B7B 11            mov a, b
1177   0B7C 26 01 00      mov b, 1
1178   0B7F 54            add a, b
1179   0B80 27            mov b, a
1180   0B81 E4            pop a
1181   0B82 E7            pop d
1182   0B83 10 02 00      mov a, 2
1183   0B86 AC            mul a, b
1184   0B87 5A            add d, b
1185   0B88 2A            mov b, [d]
1186   0B89 E4            pop a
1187   0B8A D7            push a
1188   0B8B 11            mov a, b
1189   0B8C 26 64 00      mov b, 100
1190   0B8F AC            mul a, b
1191   0B90 E4            pop a
1192   0B91 D7            push a
1193   0B92 11            mov a, b
1194   0B93 29 59 30      mov b, [cnarr]
1195   0B96 D7            push a
1196   0B97 74            mov d, b
1197   0B98 DA            push d
1198   0B99 29 AF 30      mov b, [pos] ; pos
1199   0B9C D7            push a
1200   0B9D 11            mov a, b
1201   0B9E 29 D7 2F      mov b, [datumpos] ; datumpos
1202   0BA1 D7            push a
1203   0BA2 11            mov a, b
1204   0BA3 26 06 00      mov b, 6
1205   0BA6 AC            mul a, b
1206   0BA7 E4            pop a
1207   0BA8 60            sub a, b
1208   0BA9 27            mov b, a
1209   0BAA E4            pop a
1210   0BAB D7            push a
1211   0BAC 11            mov a, b
1212   0BAD 26 02 00      mov b, 2
1213   0BB0 AC            mul a, b
1214   0BB1 E4            pop a
1215   0BB2 E7            pop d
1216   0BB3 10 02 00      mov a, 2
1217   0BB6 AC            mul a, b
1218   0BB7 5A            add d, b
1219   0BB8 2A            mov b, [d]
1220   0BB9 E4            pop a
1221   0BBA 54            add a, b
1222   0BBB 27            mov b, a
1223   0BBC E4            pop a
1224   0BBD E7            pop d
1225   0BBE 11            mov a, b
1226   0BBF 43            mov [d], a
1227   0BC0             _for19_update:
1228   0BC0 29 AF 30      mov b, [pos] ; pos
1229   0BC3 11            mov a, b
1230   0BC4 FD 77         inc b
1231   0BC6 FD 42 AF 30   mov [pos], b
1232   0BCA 27            mov b, a
1233   0BCB 0A 25 0B      jmp _for19_cond
1234   0BCE             _for19_exit:
1235   0BCE             _for20_init:
1236   0BCE 26 12 00      mov b, 18
1237   0BD1 FD 42 AF 30   mov [pos], b
1238   0BD5             _for20_cond:
1239   0BD5 29 AF 30      mov b, [pos] ; pos
1240   0BD8 D7            push a
1241   0BD9 11            mov a, b
1242   0BDA 26 0C 00      mov b, 12
1243   0BDD B0            cmp a, b
1244   0BDE 0E            lodflgs
1245   0BDF 87 03         and al, %00000011
1246   0BE1 B9 00         cmp al, 0
1247   0BE3 0E            lodflgs
1248   0BE4 22 00         mov ah, 0
1249   0BE6 27            mov b, a
1250   0BE7 E4            pop a
1251   0BE8 C0 00 00      cmp b, 0
1252   0BEB C6 D5 0C      je _for20_exit
1253   0BEE             _for20_block:
1254   0BEE             _if21_cond:
1255   0BEE 29 D5 2F      mov b, [datum]
1256   0BF1 D7            push a
1257   0BF2 74            mov d, b
1258   0BF3 DA            push d
1259   0BF4 29 AF 30      mov b, [pos] ; pos
1260   0BF7 D7            push a
1261   0BF8 11            mov a, b
1262   0BF9 26 01 00      mov b, 1
1263   0BFC 60            sub a, b
1264   0BFD 27            mov b, a
1265   0BFE E4            pop a
1266   0BFF E7            pop d
1267   0C00 10 02 00      mov a, 2
1268   0C03 AC            mul a, b
1269   0C04 5A            add d, b
1270   0C05 2A            mov b, [d]
1271   0C06 E4            pop a
1272   0C07 D7            push a
1273   0C08 11            mov a, b
1274   0C09 26 E8 03      mov b, 1000
1275   0C0C B0            cmp a, b
1276   0C0D 0E            lodflgs
1277   0C0E 87 02         and al, %00000010 ; <
1278   0C10 FD 9C         shr al
1279   0C12 22 00         mov ah, 0
1280   0C14 27            mov b, a
1281   0C15 E4            pop a
1282   0C16 C0 00 00      cmp b, 0
1283   0C19 C6 2B 0C      je _if21_exit
1284   0C1C             _if21_true:
1285   0C1C 26 00 00      mov b, 0
1286   0C1F FD AB         swp b
1287   0C21 D8            push b
1288   0C22 07 B6 13      call prnnum
1289   0C25 51 02 00      add sp, 2
1290   0C28 0A 2B 0C      jmp _if21_exit
1291   0C2B             _if21_exit:
1292   0C2B             _if22_cond:
1293   0C2B 29 D5 2F      mov b, [datum]
1294   0C2E D7            push a
1295   0C2F 74            mov d, b
1296   0C30 DA            push d
1297   0C31 29 AF 30      mov b, [pos] ; pos
1298   0C34 D7            push a
1299   0C35 11            mov a, b
1300   0C36 26 01 00      mov b, 1
1301   0C39 60            sub a, b
1302   0C3A 27            mov b, a
1303   0C3B E4            pop a
1304   0C3C E7            pop d
1305   0C3D 10 02 00      mov a, 2
1306   0C40 AC            mul a, b
1307   0C41 5A            add d, b
1308   0C42 2A            mov b, [d]
1309   0C43 E4            pop a
1310   0C44 D7            push a
1311   0C45 11            mov a, b
1312   0C46 26 64 00      mov b, 100
1313   0C49 B0            cmp a, b
1314   0C4A 0E            lodflgs
1315   0C4B 87 02         and al, %00000010 ; <
1316   0C4D FD 9C         shr al
1317   0C4F 22 00         mov ah, 0
1318   0C51 27            mov b, a
1319   0C52 E4            pop a
1320   0C53 C0 00 00      cmp b, 0
1321   0C56 C6 68 0C      je _if22_exit
1322   0C59             _if22_true:
1323   0C59 26 00 00      mov b, 0
1324   0C5C FD AB         swp b
1325   0C5E D8            push b
1326   0C5F 07 B6 13      call prnnum
1327   0C62 51 02 00      add sp, 2
1328   0C65 0A 68 0C      jmp _if22_exit
1329   0C68             _if22_exit:
1330   0C68             _if23_cond:
1331   0C68 29 D5 2F      mov b, [datum]
1332   0C6B D7            push a
1333   0C6C 74            mov d, b
1334   0C6D DA            push d
1335   0C6E 29 AF 30      mov b, [pos] ; pos
1336   0C71 D7            push a
1337   0C72 11            mov a, b
1338   0C73 26 01 00      mov b, 1
1339   0C76 60            sub a, b
1340   0C77 27            mov b, a
1341   0C78 E4            pop a
1342   0C79 E7            pop d
1343   0C7A 10 02 00      mov a, 2
1344   0C7D AC            mul a, b
1345   0C7E 5A            add d, b
1346   0C7F 2A            mov b, [d]
1347   0C80 E4            pop a
1348   0C81 D7            push a
1349   0C82 11            mov a, b
1350   0C83 26 0A 00      mov b, 10
1351   0C86 B0            cmp a, b
1352   0C87 0E            lodflgs
1353   0C88 87 02         and al, %00000010 ; <
1354   0C8A FD 9C         shr al
1355   0C8C 22 00         mov ah, 0
1356   0C8E 27            mov b, a
1357   0C8F E4            pop a
1358   0C90 C0 00 00      cmp b, 0
1359   0C93 C6 A5 0C      je _if23_exit
1360   0C96             _if23_true:
1361   0C96 26 00 00      mov b, 0
1362   0C99 FD AB         swp b
1363   0C9B D8            push b
1364   0C9C 07 B6 13      call prnnum
1365   0C9F 51 02 00      add sp, 2
1366   0CA2 0A A5 0C      jmp _if23_exit
1367   0CA5             _if23_exit:
1368   0CA5 29 D5 2F      mov b, [datum]
1369   0CA8 D7            push a
1370   0CA9 74            mov d, b
1371   0CAA DA            push d
1372   0CAB 29 AF 30      mov b, [pos] ; pos
1373   0CAE D7            push a
1374   0CAF 11            mov a, b
1375   0CB0 26 01 00      mov b, 1
1376   0CB3 60            sub a, b
1377   0CB4 27            mov b, a
1378   0CB5 E4            pop a
1379   0CB6 E7            pop d
1380   0CB7 10 02 00      mov a, 2
1381   0CBA AC            mul a, b
1382   0CBB 5A            add d, b
1383   0CBC 2A            mov b, [d]
1384   0CBD E4            pop a
1385   0CBE FD AB         swp b
1386   0CC0 D8            push b
1387   0CC1 07 A5 13      call prnnumspace
1388   0CC4 51 02 00      add sp, 2
1389   0CC7             _for20_update:
1390   0CC7 29 AF 30      mov b, [pos] ; pos
1391   0CCA 11            mov a, b
1392   0CCB FD 7D         dec b
1393   0CCD FD 42 AF 30   mov [pos], b
1394   0CD1 27            mov b, a
1395   0CD2 0A D5 0B      jmp _for20_cond
1396   0CD5             _for20_exit:
1397   0CD5 07 C0 13      call prnnl
1398   0CD8             _for24_init:
1399   0CD8 26 00 00      mov b, 0
1400   0CDB FD 42 AF 30   mov [pos], b
1401   0CDF             _for24_cond:
1402   0CDF 29 AF 30      mov b, [pos] ; pos
1403   0CE2 D7            push a
1404   0CE3 11            mov a, b
1405   0CE4 26 0C 00      mov b, 12
1406   0CE7 B0            cmp a, b
1407   0CE8 0E            lodflgs
1408   0CE9 87 02         and al, %00000010 ; <
1409   0CEB FD 9C         shr al
1410   0CED 22 00         mov ah, 0
1411   0CEF 27            mov b, a
1412   0CF0 E4            pop a
1413   0CF1 C0 00 00      cmp b, 0
1414   0CF4 C6 4B 0D      je _for24_exit
1415   0CF7             _for24_block:
1416   0CF7 29 F1 2F      mov b, [anarr]
1417   0CFA 74            mov d, b
1418   0CFB DA            push d
1419   0CFC 29 AF 30      mov b, [pos] ; pos
1420   0CFF E7            pop d
1421   0D00 10 02 00      mov a, 2
1422   0D03 AC            mul a, b
1423   0D04 5A            add d, b
1424   0D05 DA            push d
1425   0D06 29 25 30      mov b, [anarrbkp]
1426   0D09 D7            push a
1427   0D0A 74            mov d, b
1428   0D0B DA            push d
1429   0D0C 29 AF 30      mov b, [pos] ; pos
1430   0D0F E7            pop d
1431   0D10 10 02 00      mov a, 2
1432   0D13 AC            mul a, b
1433   0D14 5A            add d, b
1434   0D15 2A            mov b, [d]
1435   0D16 E4            pop a
1436   0D17 E7            pop d
1437   0D18 11            mov a, b
1438   0D19 43            mov [d], a
1439   0D1A 29 0B 30      mov b, [bnarr]
1440   0D1D 74            mov d, b
1441   0D1E DA            push d
1442   0D1F 29 AF 30      mov b, [pos] ; pos
1443   0D22 E7            pop d
1444   0D23 10 02 00      mov a, 2
1445   0D26 AC            mul a, b
1446   0D27 5A            add d, b
1447   0D28 DA            push d
1448   0D29 29 3F 30      mov b, [bnarrbkp]
1449   0D2C D7            push a
1450   0D2D 74            mov d, b
1451   0D2E DA            push d
1452   0D2F 29 AF 30      mov b, [pos] ; pos
1453   0D32 E7            pop d
1454   0D33 10 02 00      mov a, 2
1455   0D36 AC            mul a, b
1456   0D37 5A            add d, b
1457   0D38 2A            mov b, [d]
1458   0D39 E4            pop a
1459   0D3A E7            pop d
1460   0D3B 11            mov a, b
1461   0D3C 43            mov [d], a
1462   0D3D             _for24_update:
1463   0D3D 29 AF 30      mov b, [pos] ; pos
1464   0D40 11            mov a, b
1465   0D41 FD 77         inc b
1466   0D43 FD 42 AF 30   mov [pos], b
1467   0D47 27            mov b, a
1468   0D48 0A DF 0C      jmp _for24_cond
1469   0D4B             _for24_exit:
1470   0D4B 07 6E 1D      call minus
1471   0D4E 26 02 00      mov b, 2
1472   0D51 FD 42 D7 2F   mov [datumpos], b
1473   0D55             _for25_init:
1474   0D55 29 D7 2F      mov b, [datumpos] ; datumpos
1475   0D58 D7            push a
1476   0D59 11            mov a, b
1477   0D5A 26 06 00      mov b, 6
1478   0D5D AC            mul a, b
1479   0D5E E4            pop a
1480   0D5F FD 42 AF 30   mov [pos], b
1481   0D63             _for25_cond:
1482   0D63 29 AF 30      mov b, [pos] ; pos
1483   0D66 D7            push a
1484   0D67 11            mov a, b
1485   0D68 29 D7 2F      mov b, [datumpos] ; datumpos
1486   0D6B D7            push a
1487   0D6C 11            mov a, b
1488   0D6D 26 06 00      mov b, 6
1489   0D70 AC            mul a, b
1490   0D71 E4            pop a
1491   0D72 D7            push a
1492   0D73 11            mov a, b
1493   0D74 26 06 00      mov b, 6
1494   0D77 54            add a, b
1495   0D78 27            mov b, a
1496   0D79 E4            pop a
1497   0D7A B0            cmp a, b
1498   0D7B 0E            lodflgs
1499   0D7C 87 02         and al, %00000010 ; <
1500   0D7E FD 9C         shr al
1501   0D80 22 00         mov ah, 0
1502   0D82 27            mov b, a
1503   0D83 E4            pop a
1504   0D84 C0 00 00      cmp b, 0
1505   0D87 C6 0C 0E      je _for25_exit
1506   0D8A             _for25_block:
1507   0D8A 29 D5 2F      mov b, [datum]
1508   0D8D 74            mov d, b
1509   0D8E DA            push d
1510   0D8F 29 AF 30      mov b, [pos] ; pos
1511   0D92 E7            pop d
1512   0D93 10 02 00      mov a, 2
1513   0D96 AC            mul a, b
1514   0D97 5A            add d, b
1515   0D98 DA            push d
1516   0D99 29 59 30      mov b, [cnarr]
1517   0D9C D7            push a
1518   0D9D 74            mov d, b
1519   0D9E DA            push d
1520   0D9F 29 AF 30      mov b, [pos] ; pos
1521   0DA2 D7            push a
1522   0DA3 11            mov a, b
1523   0DA4 29 D7 2F      mov b, [datumpos] ; datumpos
1524   0DA7 D7            push a
1525   0DA8 11            mov a, b
1526   0DA9 26 06 00      mov b, 6
1527   0DAC AC            mul a, b
1528   0DAD E4            pop a
1529   0DAE 60            sub a, b
1530   0DAF 27            mov b, a
1531   0DB0 E4            pop a
1532   0DB1 D7            push a
1533   0DB2 11            mov a, b
1534   0DB3 26 02 00      mov b, 2
1535   0DB6 AC            mul a, b
1536   0DB7 E4            pop a
1537   0DB8 D7            push a
1538   0DB9 11            mov a, b
1539   0DBA 26 01 00      mov b, 1
1540   0DBD 54            add a, b
1541   0DBE 27            mov b, a
1542   0DBF E4            pop a
1543   0DC0 E7            pop d
1544   0DC1 10 02 00      mov a, 2
1545   0DC4 AC            mul a, b
1546   0DC5 5A            add d, b
1547   0DC6 2A            mov b, [d]
1548   0DC7 E4            pop a
1549   0DC8 D7            push a
1550   0DC9 11            mov a, b
1551   0DCA 26 64 00      mov b, 100
1552   0DCD AC            mul a, b
1553   0DCE E4            pop a
1554   0DCF D7            push a
1555   0DD0 11            mov a, b
1556   0DD1 29 59 30      mov b, [cnarr]
1557   0DD4 D7            push a
1558   0DD5 74            mov d, b
1559   0DD6 DA            push d
1560   0DD7 29 AF 30      mov b, [pos] ; pos
1561   0DDA D7            push a
1562   0DDB 11            mov a, b
1563   0DDC 29 D7 2F      mov b, [datumpos] ; datumpos
1564   0DDF D7            push a
1565   0DE0 11            mov a, b
1566   0DE1 26 06 00      mov b, 6
1567   0DE4 AC            mul a, b
1568   0DE5 E4            pop a
1569   0DE6 60            sub a, b
1570   0DE7 27            mov b, a
1571   0DE8 E4            pop a
1572   0DE9 D7            push a
1573   0DEA 11            mov a, b
1574   0DEB 26 02 00      mov b, 2
1575   0DEE AC            mul a, b
1576   0DEF E4            pop a
1577   0DF0 E7            pop d
1578   0DF1 10 02 00      mov a, 2
1579   0DF4 AC            mul a, b
1580   0DF5 5A            add d, b
1581   0DF6 2A            mov b, [d]
1582   0DF7 E4            pop a
1583   0DF8 54            add a, b
1584   0DF9 27            mov b, a
1585   0DFA E4            pop a
1586   0DFB E7            pop d
1587   0DFC 11            mov a, b
1588   0DFD 43            mov [d], a
1589   0DFE             _for25_update:
1590   0DFE 29 AF 30      mov b, [pos] ; pos
1591   0E01 11            mov a, b
1592   0E02 FD 77         inc b
1593   0E04 FD 42 AF 30   mov [pos], b
1594   0E08 27            mov b, a
1595   0E09 0A 63 0D      jmp _for25_cond
1596   0E0C             _for25_exit:
1597   0E0C             _for26_init:
1598   0E0C 26 12 00      mov b, 18
1599   0E0F FD 42 AF 30   mov [pos], b
1600   0E13             _for26_cond:
1601   0E13 29 AF 30      mov b, [pos] ; pos
1602   0E16 D7            push a
1603   0E17 11            mov a, b
1604   0E18 26 0C 00      mov b, 12
1605   0E1B B0            cmp a, b
1606   0E1C 0E            lodflgs
1607   0E1D 87 03         and al, %00000011
1608   0E1F B9 00         cmp al, 0
1609   0E21 0E            lodflgs
1610   0E22 22 00         mov ah, 0
1611   0E24 27            mov b, a
1612   0E25 E4            pop a
1613   0E26 C0 00 00      cmp b, 0
1614   0E29 C6 13 0F      je _for26_exit
1615   0E2C             _for26_block:
1616   0E2C             _if27_cond:
1617   0E2C 29 D5 2F      mov b, [datum]
1618   0E2F D7            push a
1619   0E30 74            mov d, b
1620   0E31 DA            push d
1621   0E32 29 AF 30      mov b, [pos] ; pos
1622   0E35 D7            push a
1623   0E36 11            mov a, b
1624   0E37 26 01 00      mov b, 1
1625   0E3A 60            sub a, b
1626   0E3B 27            mov b, a
1627   0E3C E4            pop a
1628   0E3D E7            pop d
1629   0E3E 10 02 00      mov a, 2
1630   0E41 AC            mul a, b
1631   0E42 5A            add d, b
1632   0E43 2A            mov b, [d]
1633   0E44 E4            pop a
1634   0E45 D7            push a
1635   0E46 11            mov a, b
1636   0E47 26 E8 03      mov b, 1000
1637   0E4A B0            cmp a, b
1638   0E4B 0E            lodflgs
1639   0E4C 87 02         and al, %00000010 ; <
1640   0E4E FD 9C         shr al
1641   0E50 22 00         mov ah, 0
1642   0E52 27            mov b, a
1643   0E53 E4            pop a
1644   0E54 C0 00 00      cmp b, 0
1645   0E57 C6 69 0E      je _if27_exit
1646   0E5A             _if27_true:
1647   0E5A 26 00 00      mov b, 0
1648   0E5D FD AB         swp b
1649   0E5F D8            push b
1650   0E60 07 B6 13      call prnnum
1651   0E63 51 02 00      add sp, 2
1652   0E66 0A 69 0E      jmp _if27_exit
1653   0E69             _if27_exit:
1654   0E69             _if28_cond:
1655   0E69 29 D5 2F      mov b, [datum]
1656   0E6C D7            push a
1657   0E6D 74            mov d, b
1658   0E6E DA            push d
1659   0E6F 29 AF 30      mov b, [pos] ; pos
1660   0E72 D7            push a
1661   0E73 11            mov a, b
1662   0E74 26 01 00      mov b, 1
1663   0E77 60            sub a, b
1664   0E78 27            mov b, a
1665   0E79 E4            pop a
1666   0E7A E7            pop d
1667   0E7B 10 02 00      mov a, 2
1668   0E7E AC            mul a, b
1669   0E7F 5A            add d, b
1670   0E80 2A            mov b, [d]
1671   0E81 E4            pop a
1672   0E82 D7            push a
1673   0E83 11            mov a, b
1674   0E84 26 64 00      mov b, 100
1675   0E87 B0            cmp a, b
1676   0E88 0E            lodflgs
1677   0E89 87 02         and al, %00000010 ; <
1678   0E8B FD 9C         shr al
1679   0E8D 22 00         mov ah, 0
1680   0E8F 27            mov b, a
1681   0E90 E4            pop a
1682   0E91 C0 00 00      cmp b, 0
1683   0E94 C6 A6 0E      je _if28_exit
1684   0E97             _if28_true:
1685   0E97 26 00 00      mov b, 0
1686   0E9A FD AB         swp b
1687   0E9C D8            push b
1688   0E9D 07 B6 13      call prnnum
1689   0EA0 51 02 00      add sp, 2
1690   0EA3 0A A6 0E      jmp _if28_exit
1691   0EA6             _if28_exit:
1692   0EA6             _if29_cond:
1693   0EA6 29 D5 2F      mov b, [datum]
1694   0EA9 D7            push a
1695   0EAA 74            mov d, b
1696   0EAB DA            push d
1697   0EAC 29 AF 30      mov b, [pos] ; pos
1698   0EAF D7            push a
1699   0EB0 11            mov a, b
1700   0EB1 26 01 00      mov b, 1
1701   0EB4 60            sub a, b
1702   0EB5 27            mov b, a
1703   0EB6 E4            pop a
1704   0EB7 E7            pop d
1705   0EB8 10 02 00      mov a, 2
1706   0EBB AC            mul a, b
1707   0EBC 5A            add d, b
1708   0EBD 2A            mov b, [d]
1709   0EBE E4            pop a
1710   0EBF D7            push a
1711   0EC0 11            mov a, b
1712   0EC1 26 0A 00      mov b, 10
1713   0EC4 B0            cmp a, b
1714   0EC5 0E            lodflgs
1715   0EC6 87 02         and al, %00000010 ; <
1716   0EC8 FD 9C         shr al
1717   0ECA 22 00         mov ah, 0
1718   0ECC 27            mov b, a
1719   0ECD E4            pop a
1720   0ECE C0 00 00      cmp b, 0
1721   0ED1 C6 E3 0E      je _if29_exit
1722   0ED4             _if29_true:
1723   0ED4 26 00 00      mov b, 0
1724   0ED7 FD AB         swp b
1725   0ED9 D8            push b
1726   0EDA 07 B6 13      call prnnum
1727   0EDD 51 02 00      add sp, 2
1728   0EE0 0A E3 0E      jmp _if29_exit
1729   0EE3             _if29_exit:
1730   0EE3 29 D5 2F      mov b, [datum]
1731   0EE6 D7            push a
1732   0EE7 74            mov d, b
1733   0EE8 DA            push d
1734   0EE9 29 AF 30      mov b, [pos] ; pos
1735   0EEC D7            push a
1736   0EED 11            mov a, b
1737   0EEE 26 01 00      mov b, 1
1738   0EF1 60            sub a, b
1739   0EF2 27            mov b, a
1740   0EF3 E4            pop a
1741   0EF4 E7            pop d
1742   0EF5 10 02 00      mov a, 2
1743   0EF8 AC            mul a, b
1744   0EF9 5A            add d, b
1745   0EFA 2A            mov b, [d]
1746   0EFB E4            pop a
1747   0EFC FD AB         swp b
1748   0EFE D8            push b
1749   0EFF 07 A5 13      call prnnumspace
1750   0F02 51 02 00      add sp, 2
1751   0F05             _for26_update:
1752   0F05 29 AF 30      mov b, [pos] ; pos
1753   0F08 11            mov a, b
1754   0F09 FD 7D         dec b
1755   0F0B FD 42 AF 30   mov [pos], b
1756   0F0F 27            mov b, a
1757   0F10 0A 13 0E      jmp _for26_cond
1758   0F13             _for26_exit:
1759   0F13 07 C0 13      call prnnl
1760   0F16             _for30_init:
1761   0F16 26 00 00      mov b, 0
1762   0F19 FD 42 AF 30   mov [pos], b
1763   0F1D             _for30_cond:
1764   0F1D 29 AF 30      mov b, [pos] ; pos
1765   0F20 D7            push a
1766   0F21 11            mov a, b
1767   0F22 26 0C 00      mov b, 12
1768   0F25 B0            cmp a, b
1769   0F26 0E            lodflgs
1770   0F27 87 02         and al, %00000010 ; <
1771   0F29 FD 9C         shr al
1772   0F2B 22 00         mov ah, 0
1773   0F2D 27            mov b, a
1774   0F2E E4            pop a
1775   0F2F C0 00 00      cmp b, 0
1776   0F32 C6 89 0F      je _for30_exit
1777   0F35             _for30_block:
1778   0F35 29 F1 2F      mov b, [anarr]
1779   0F38 74            mov d, b
1780   0F39 DA            push d
1781   0F3A 29 AF 30      mov b, [pos] ; pos
1782   0F3D E7            pop d
1783   0F3E 10 02 00      mov a, 2
1784   0F41 AC            mul a, b
1785   0F42 5A            add d, b
1786   0F43 DA            push d
1787   0F44 29 25 30      mov b, [anarrbkp]
1788   0F47 D7            push a
1789   0F48 74            mov d, b
1790   0F49 DA            push d
1791   0F4A 29 AF 30      mov b, [pos] ; pos
1792   0F4D E7            pop d
1793   0F4E 10 02 00      mov a, 2
1794   0F51 AC            mul a, b
1795   0F52 5A            add d, b
1796   0F53 2A            mov b, [d]
1797   0F54 E4            pop a
1798   0F55 E7            pop d
1799   0F56 11            mov a, b
1800   0F57 43            mov [d], a
1801   0F58 29 0B 30      mov b, [bnarr]
1802   0F5B 74            mov d, b
1803   0F5C DA            push d
1804   0F5D 29 AF 30      mov b, [pos] ; pos
1805   0F60 E7            pop d
1806   0F61 10 02 00      mov a, 2
1807   0F64 AC            mul a, b
1808   0F65 5A            add d, b
1809   0F66 DA            push d
1810   0F67 29 3F 30      mov b, [bnarrbkp]
1811   0F6A D7            push a
1812   0F6B 74            mov d, b
1813   0F6C DA            push d
1814   0F6D 29 AF 30      mov b, [pos] ; pos
1815   0F70 E7            pop d
1816   0F71 10 02 00      mov a, 2
1817   0F74 AC            mul a, b
1818   0F75 5A            add d, b
1819   0F76 2A            mov b, [d]
1820   0F77 E4            pop a
1821   0F78 E7            pop d
1822   0F79 11            mov a, b
1823   0F7A 43            mov [d], a
1824   0F7B             _for30_update:
1825   0F7B 29 AF 30      mov b, [pos] ; pos
1826   0F7E 11            mov a, b
1827   0F7F FD 77         inc b
1828   0F81 FD 42 AF 30   mov [pos], b
1829   0F85 27            mov b, a
1830   0F86 0A 1D 0F      jmp _for30_cond
1831   0F89             _for30_exit:
1832   0F89 07 BE 2C      call times
1833   0F8C 26 02 00      mov b, 2
1834   0F8F FD 42 D7 2F   mov [datumpos], b
1835   0F93             _for31_init:
1836   0F93 29 D7 2F      mov b, [datumpos] ; datumpos
1837   0F96 D7            push a
1838   0F97 11            mov a, b
1839   0F98 26 06 00      mov b, 6
1840   0F9B AC            mul a, b
1841   0F9C E4            pop a
1842   0F9D FD 42 AF 30   mov [pos], b
1843   0FA1             _for31_cond:
1844   0FA1 29 AF 30      mov b, [pos] ; pos
1845   0FA4 D7            push a
1846   0FA5 11            mov a, b
1847   0FA6 29 D7 2F      mov b, [datumpos] ; datumpos
1848   0FA9 D7            push a
1849   0FAA 11            mov a, b
1850   0FAB 26 06 00      mov b, 6
1851   0FAE AC            mul a, b
1852   0FAF E4            pop a
1853   0FB0 D7            push a
1854   0FB1 11            mov a, b
1855   0FB2 26 06 00      mov b, 6
1856   0FB5 54            add a, b
1857   0FB6 27            mov b, a
1858   0FB7 E4            pop a
1859   0FB8 B0            cmp a, b
1860   0FB9 0E            lodflgs
1861   0FBA 87 02         and al, %00000010 ; <
1862   0FBC FD 9C         shr al
1863   0FBE 22 00         mov ah, 0
1864   0FC0 27            mov b, a
1865   0FC1 E4            pop a
1866   0FC2 C0 00 00      cmp b, 0
1867   0FC5 C6 4A 10      je _for31_exit
1868   0FC8             _for31_block:
1869   0FC8 29 D5 2F      mov b, [datum]
1870   0FCB 74            mov d, b
1871   0FCC DA            push d
1872   0FCD 29 AF 30      mov b, [pos] ; pos
1873   0FD0 E7            pop d
1874   0FD1 10 02 00      mov a, 2
1875   0FD4 AC            mul a, b
1876   0FD5 5A            add d, b
1877   0FD6 DA            push d
1878   0FD7 29 59 30      mov b, [cnarr]
1879   0FDA D7            push a
1880   0FDB 74            mov d, b
1881   0FDC DA            push d
1882   0FDD 29 AF 30      mov b, [pos] ; pos
1883   0FE0 D7            push a
1884   0FE1 11            mov a, b
1885   0FE2 29 D7 2F      mov b, [datumpos] ; datumpos
1886   0FE5 D7            push a
1887   0FE6 11            mov a, b
1888   0FE7 26 06 00      mov b, 6
1889   0FEA AC            mul a, b
1890   0FEB E4            pop a
1891   0FEC 60            sub a, b
1892   0FED 27            mov b, a
1893   0FEE E4            pop a
1894   0FEF D7            push a
1895   0FF0 11            mov a, b
1896   0FF1 26 02 00      mov b, 2
1897   0FF4 AC            mul a, b
1898   0FF5 E4            pop a
1899   0FF6 D7            push a
1900   0FF7 11            mov a, b
1901   0FF8 26 01 00      mov b, 1
1902   0FFB 54            add a, b
1903   0FFC 27            mov b, a
1904   0FFD E4            pop a
1905   0FFE E7            pop d
1906   0FFF 10 02 00      mov a, 2
1907   1002 AC            mul a, b
1908   1003 5A            add d, b
1909   1004 2A            mov b, [d]
1910   1005 E4            pop a
1911   1006 D7            push a
1912   1007 11            mov a, b
1913   1008 26 64 00      mov b, 100
1914   100B AC            mul a, b
1915   100C E4            pop a
1916   100D D7            push a
1917   100E 11            mov a, b
1918   100F 29 59 30      mov b, [cnarr]
1919   1012 D7            push a
1920   1013 74            mov d, b
1921   1014 DA            push d
1922   1015 29 AF 30      mov b, [pos] ; pos
1923   1018 D7            push a
1924   1019 11            mov a, b
1925   101A 29 D7 2F      mov b, [datumpos] ; datumpos
1926   101D D7            push a
1927   101E 11            mov a, b
1928   101F 26 06 00      mov b, 6
1929   1022 AC            mul a, b
1930   1023 E4            pop a
1931   1024 60            sub a, b
1932   1025 27            mov b, a
1933   1026 E4            pop a
1934   1027 D7            push a
1935   1028 11            mov a, b
1936   1029 26 02 00      mov b, 2
1937   102C AC            mul a, b
1938   102D E4            pop a
1939   102E E7            pop d
1940   102F 10 02 00      mov a, 2
1941   1032 AC            mul a, b
1942   1033 5A            add d, b
1943   1034 2A            mov b, [d]
1944   1035 E4            pop a
1945   1036 54            add a, b
1946   1037 27            mov b, a
1947   1038 E4            pop a
1948   1039 E7            pop d
1949   103A 11            mov a, b
1950   103B 43            mov [d], a
1951   103C             _for31_update:
1952   103C 29 AF 30      mov b, [pos] ; pos
1953   103F 11            mov a, b
1954   1040 FD 77         inc b
1955   1042 FD 42 AF 30   mov [pos], b
1956   1046 27            mov b, a
1957   1047 0A A1 0F      jmp _for31_cond
1958   104A             _for31_exit:
1959   104A             _for32_init:
1960   104A 26 12 00      mov b, 18
1961   104D FD 42 AF 30   mov [pos], b
1962   1051             _for32_cond:
1963   1051 29 AF 30      mov b, [pos] ; pos
1964   1054 D7            push a
1965   1055 11            mov a, b
1966   1056 26 0C 00      mov b, 12
1967   1059 B0            cmp a, b
1968   105A 0E            lodflgs
1969   105B 87 03         and al, %00000011
1970   105D B9 00         cmp al, 0
1971   105F 0E            lodflgs
1972   1060 22 00         mov ah, 0
1973   1062 27            mov b, a
1974   1063 E4            pop a
1975   1064 C0 00 00      cmp b, 0
1976   1067 C6 51 11      je _for32_exit
1977   106A             _for32_block:
1978   106A             _if33_cond:
1979   106A 29 D5 2F      mov b, [datum]
1980   106D D7            push a
1981   106E 74            mov d, b
1982   106F DA            push d
1983   1070 29 AF 30      mov b, [pos] ; pos
1984   1073 D7            push a
1985   1074 11            mov a, b
1986   1075 26 01 00      mov b, 1
1987   1078 60            sub a, b
1988   1079 27            mov b, a
1989   107A E4            pop a
1990   107B E7            pop d
1991   107C 10 02 00      mov a, 2
1992   107F AC            mul a, b
1993   1080 5A            add d, b
1994   1081 2A            mov b, [d]
1995   1082 E4            pop a
1996   1083 D7            push a
1997   1084 11            mov a, b
1998   1085 26 E8 03      mov b, 1000
1999   1088 B0            cmp a, b
2000   1089 0E            lodflgs
2001   108A 87 02         and al, %00000010 ; <
2002   108C FD 9C         shr al
2003   108E 22 00         mov ah, 0
2004   1090 27            mov b, a
2005   1091 E4            pop a
2006   1092 C0 00 00      cmp b, 0
2007   1095 C6 A7 10      je _if33_exit
2008   1098             _if33_true:
2009   1098 26 00 00      mov b, 0
2010   109B FD AB         swp b
2011   109D D8            push b
2012   109E 07 B6 13      call prnnum
2013   10A1 51 02 00      add sp, 2
2014   10A4 0A A7 10      jmp _if33_exit
2015   10A7             _if33_exit:
2016   10A7             _if34_cond:
2017   10A7 29 D5 2F      mov b, [datum]
2018   10AA D7            push a
2019   10AB 74            mov d, b
2020   10AC DA            push d
2021   10AD 29 AF 30      mov b, [pos] ; pos
2022   10B0 D7            push a
2023   10B1 11            mov a, b
2024   10B2 26 01 00      mov b, 1
2025   10B5 60            sub a, b
2026   10B6 27            mov b, a
2027   10B7 E4            pop a
2028   10B8 E7            pop d
2029   10B9 10 02 00      mov a, 2
2030   10BC AC            mul a, b
2031   10BD 5A            add d, b
2032   10BE 2A            mov b, [d]
2033   10BF E4            pop a
2034   10C0 D7            push a
2035   10C1 11            mov a, b
2036   10C2 26 64 00      mov b, 100
2037   10C5 B0            cmp a, b
2038   10C6 0E            lodflgs
2039   10C7 87 02         and al, %00000010 ; <
2040   10C9 FD 9C         shr al
2041   10CB 22 00         mov ah, 0
2042   10CD 27            mov b, a
2043   10CE E4            pop a
2044   10CF C0 00 00      cmp b, 0
2045   10D2 C6 E4 10      je _if34_exit
2046   10D5             _if34_true:
2047   10D5 26 00 00      mov b, 0
2048   10D8 FD AB         swp b
2049   10DA D8            push b
2050   10DB 07 B6 13      call prnnum
2051   10DE 51 02 00      add sp, 2
2052   10E1 0A E4 10      jmp _if34_exit
2053   10E4             _if34_exit:
2054   10E4             _if35_cond:
2055   10E4 29 D5 2F      mov b, [datum]
2056   10E7 D7            push a
2057   10E8 74            mov d, b
2058   10E9 DA            push d
2059   10EA 29 AF 30      mov b, [pos] ; pos
2060   10ED D7            push a
2061   10EE 11            mov a, b
2062   10EF 26 01 00      mov b, 1
2063   10F2 60            sub a, b
2064   10F3 27            mov b, a
2065   10F4 E4            pop a
2066   10F5 E7            pop d
2067   10F6 10 02 00      mov a, 2
2068   10F9 AC            mul a, b
2069   10FA 5A            add d, b
2070   10FB 2A            mov b, [d]
2071   10FC E4            pop a
2072   10FD D7            push a
2073   10FE 11            mov a, b
2074   10FF 26 0A 00      mov b, 10
2075   1102 B0            cmp a, b
2076   1103 0E            lodflgs
2077   1104 87 02         and al, %00000010 ; <
2078   1106 FD 9C         shr al
2079   1108 22 00         mov ah, 0
2080   110A 27            mov b, a
2081   110B E4            pop a
2082   110C C0 00 00      cmp b, 0
2083   110F C6 21 11      je _if35_exit
2084   1112             _if35_true:
2085   1112 26 00 00      mov b, 0
2086   1115 FD AB         swp b
2087   1117 D8            push b
2088   1118 07 B6 13      call prnnum
2089   111B 51 02 00      add sp, 2
2090   111E 0A 21 11      jmp _if35_exit
2091   1121             _if35_exit:
2092   1121 29 D5 2F      mov b, [datum]
2093   1124 D7            push a
2094   1125 74            mov d, b
2095   1126 DA            push d
2096   1127 29 AF 30      mov b, [pos] ; pos
2097   112A D7            push a
2098   112B 11            mov a, b
2099   112C 26 01 00      mov b, 1
2100   112F 60            sub a, b
2101   1130 27            mov b, a
2102   1131 E4            pop a
2103   1132 E7            pop d
2104   1133 10 02 00      mov a, 2
2105   1136 AC            mul a, b
2106   1137 5A            add d, b
2107   1138 2A            mov b, [d]
2108   1139 E4            pop a
2109   113A FD AB         swp b
2110   113C D8            push b
2111   113D 07 A5 13      call prnnumspace
2112   1140 51 02 00      add sp, 2
2113   1143             _for32_update:
2114   1143 29 AF 30      mov b, [pos] ; pos
2115   1146 11            mov a, b
2116   1147 FD 7D         dec b
2117   1149 FD 42 AF 30   mov [pos], b
2118   114D 27            mov b, a
2119   114E 0A 51 10      jmp _for32_cond
2120   1151             _for32_exit:
2121   1151 07 C0 13      call prnnl
2122   1154             _for36_init:
2123   1154 26 00 00      mov b, 0
2124   1157 FD 42 AF 30   mov [pos], b
2125   115B             _for36_cond:
2126   115B 29 AF 30      mov b, [pos] ; pos
2127   115E D7            push a
2128   115F 11            mov a, b
2129   1160 26 0C 00      mov b, 12
2130   1163 B0            cmp a, b
2131   1164 0E            lodflgs
2132   1165 87 02         and al, %00000010 ; <
2133   1167 FD 9C         shr al
2134   1169 22 00         mov ah, 0
2135   116B 27            mov b, a
2136   116C E4            pop a
2137   116D C0 00 00      cmp b, 0
2138   1170 C6 C7 11      je _for36_exit
2139   1173             _for36_block:
2140   1173 29 F1 2F      mov b, [anarr]
2141   1176 74            mov d, b
2142   1177 DA            push d
2143   1178 29 AF 30      mov b, [pos] ; pos
2144   117B E7            pop d
2145   117C 10 02 00      mov a, 2
2146   117F AC            mul a, b
2147   1180 5A            add d, b
2148   1181 DA            push d
2149   1182 29 25 30      mov b, [anarrbkp]
2150   1185 D7            push a
2151   1186 74            mov d, b
2152   1187 DA            push d
2153   1188 29 AF 30      mov b, [pos] ; pos
2154   118B E7            pop d
2155   118C 10 02 00      mov a, 2
2156   118F AC            mul a, b
2157   1190 5A            add d, b
2158   1191 2A            mov b, [d]
2159   1192 E4            pop a
2160   1193 E7            pop d
2161   1194 11            mov a, b
2162   1195 43            mov [d], a
2163   1196 29 0B 30      mov b, [bnarr]
2164   1199 74            mov d, b
2165   119A DA            push d
2166   119B 29 AF 30      mov b, [pos] ; pos
2167   119E E7            pop d
2168   119F 10 02 00      mov a, 2
2169   11A2 AC            mul a, b
2170   11A3 5A            add d, b
2171   11A4 DA            push d
2172   11A5 29 3F 30      mov b, [bnarrbkp]
2173   11A8 D7            push a
2174   11A9 74            mov d, b
2175   11AA DA            push d
2176   11AB 29 AF 30      mov b, [pos] ; pos
2177   11AE E7            pop d
2178   11AF 10 02 00      mov a, 2
2179   11B2 AC            mul a, b
2180   11B3 5A            add d, b
2181   11B4 2A            mov b, [d]
2182   11B5 E4            pop a
2183   11B6 E7            pop d
2184   11B7 11            mov a, b
2185   11B8 43            mov [d], a
2186   11B9             _for36_update:
2187   11B9 29 AF 30      mov b, [pos] ; pos
2188   11BC 11            mov a, b
2189   11BD FD 77         inc b
2190   11BF FD 42 AF 30   mov [pos], b
2191   11C3 27            mov b, a
2192   11C4 0A 5B 11      jmp _for36_cond
2193   11C7             _for36_exit:
2194   11C7 07 46 2E      call dividedby
2195   11CA 26 02 00      mov b, 2
2196   11CD FD 42 D7 2F   mov [datumpos], b
2197   11D1             _for37_init:
2198   11D1 29 D7 2F      mov b, [datumpos] ; datumpos
2199   11D4 D7            push a
2200   11D5 11            mov a, b
2201   11D6 26 06 00      mov b, 6
2202   11D9 AC            mul a, b
2203   11DA E4            pop a
2204   11DB FD 42 AF 30   mov [pos], b
2205   11DF             _for37_cond:
2206   11DF 29 AF 30      mov b, [pos] ; pos
2207   11E2 D7            push a
2208   11E3 11            mov a, b
2209   11E4 29 D7 2F      mov b, [datumpos] ; datumpos
2210   11E7 D7            push a
2211   11E8 11            mov a, b
2212   11E9 26 06 00      mov b, 6
2213   11EC AC            mul a, b
2214   11ED E4            pop a
2215   11EE D7            push a
2216   11EF 11            mov a, b
2217   11F0 26 06 00      mov b, 6
2218   11F3 54            add a, b
2219   11F4 27            mov b, a
2220   11F5 E4            pop a
2221   11F6 B0            cmp a, b
2222   11F7 0E            lodflgs
2223   11F8 87 02         and al, %00000010 ; <
2224   11FA FD 9C         shr al
2225   11FC 22 00         mov ah, 0
2226   11FE 27            mov b, a
2227   11FF E4            pop a
2228   1200 C0 00 00      cmp b, 0
2229   1203 C6 88 12      je _for37_exit
2230   1206             _for37_block:
2231   1206 29 D5 2F      mov b, [datum]
2232   1209 74            mov d, b
2233   120A DA            push d
2234   120B 29 AF 30      mov b, [pos] ; pos
2235   120E E7            pop d
2236   120F 10 02 00      mov a, 2
2237   1212 AC            mul a, b
2238   1213 5A            add d, b
2239   1214 DA            push d
2240   1215 29 59 30      mov b, [cnarr]
2241   1218 D7            push a
2242   1219 74            mov d, b
2243   121A DA            push d
2244   121B 29 AF 30      mov b, [pos] ; pos
2245   121E D7            push a
2246   121F 11            mov a, b
2247   1220 29 D7 2F      mov b, [datumpos] ; datumpos
2248   1223 D7            push a
2249   1224 11            mov a, b
2250   1225 26 06 00      mov b, 6
2251   1228 AC            mul a, b
2252   1229 E4            pop a
2253   122A 60            sub a, b
2254   122B 27            mov b, a
2255   122C E4            pop a
2256   122D D7            push a
2257   122E 11            mov a, b
2258   122F 26 02 00      mov b, 2
2259   1232 AC            mul a, b
2260   1233 E4            pop a
2261   1234 D7            push a
2262   1235 11            mov a, b
2263   1236 26 01 00      mov b, 1
2264   1239 54            add a, b
2265   123A 27            mov b, a
2266   123B E4            pop a
2267   123C E7            pop d
2268   123D 10 02 00      mov a, 2
2269   1240 AC            mul a, b
2270   1241 5A            add d, b
2271   1242 2A            mov b, [d]
2272   1243 E4            pop a
2273   1244 D7            push a
2274   1245 11            mov a, b
2275   1246 26 64 00      mov b, 100
2276   1249 AC            mul a, b
2277   124A E4            pop a
2278   124B D7            push a
2279   124C 11            mov a, b
2280   124D 29 59 30      mov b, [cnarr]
2281   1250 D7            push a
2282   1251 74            mov d, b
2283   1252 DA            push d
2284   1253 29 AF 30      mov b, [pos] ; pos
2285   1256 D7            push a
2286   1257 11            mov a, b
2287   1258 29 D7 2F      mov b, [datumpos] ; datumpos
2288   125B D7            push a
2289   125C 11            mov a, b
2290   125D 26 06 00      mov b, 6
2291   1260 AC            mul a, b
2292   1261 E4            pop a
2293   1262 60            sub a, b
2294   1263 27            mov b, a
2295   1264 E4            pop a
2296   1265 D7            push a
2297   1266 11            mov a, b
2298   1267 26 02 00      mov b, 2
2299   126A AC            mul a, b
2300   126B E4            pop a
2301   126C E7            pop d
2302   126D 10 02 00      mov a, 2
2303   1270 AC            mul a, b
2304   1271 5A            add d, b
2305   1272 2A            mov b, [d]
2306   1273 E4            pop a
2307   1274 54            add a, b
2308   1275 27            mov b, a
2309   1276 E4            pop a
2310   1277 E7            pop d
2311   1278 11            mov a, b
2312   1279 43            mov [d], a
2313   127A             _for37_update:
2314   127A 29 AF 30      mov b, [pos] ; pos
2315   127D 11            mov a, b
2316   127E FD 77         inc b
2317   1280 FD 42 AF 30   mov [pos], b
2318   1284 27            mov b, a
2319   1285 0A DF 11      jmp _for37_cond
2320   1288             _for37_exit:
2321   1288             _for38_init:
2322   1288 26 12 00      mov b, 18
2323   128B FD 42 AF 30   mov [pos], b
2324   128F             _for38_cond:
2325   128F 29 AF 30      mov b, [pos] ; pos
2326   1292 D7            push a
2327   1293 11            mov a, b
2328   1294 26 0C 00      mov b, 12
2329   1297 B0            cmp a, b
2330   1298 0E            lodflgs
2331   1299 87 03         and al, %00000011
2332   129B B9 00         cmp al, 0
2333   129D 0E            lodflgs
2334   129E 22 00         mov ah, 0
2335   12A0 27            mov b, a
2336   12A1 E4            pop a
2337   12A2 C0 00 00      cmp b, 0
2338   12A5 C6 8F 13      je _for38_exit
2339   12A8             _for38_block:
2340   12A8             _if39_cond:
2341   12A8 29 D5 2F      mov b, [datum]
2342   12AB D7            push a
2343   12AC 74            mov d, b
2344   12AD DA            push d
2345   12AE 29 AF 30      mov b, [pos] ; pos
2346   12B1 D7            push a
2347   12B2 11            mov a, b
2348   12B3 26 01 00      mov b, 1
2349   12B6 60            sub a, b
2350   12B7 27            mov b, a
2351   12B8 E4            pop a
2352   12B9 E7            pop d
2353   12BA 10 02 00      mov a, 2
2354   12BD AC            mul a, b
2355   12BE 5A            add d, b
2356   12BF 2A            mov b, [d]
2357   12C0 E4            pop a
2358   12C1 D7            push a
2359   12C2 11            mov a, b
2360   12C3 26 E8 03      mov b, 1000
2361   12C6 B0            cmp a, b
2362   12C7 0E            lodflgs
2363   12C8 87 02         and al, %00000010 ; <
2364   12CA FD 9C         shr al
2365   12CC 22 00         mov ah, 0
2366   12CE 27            mov b, a
2367   12CF E4            pop a
2368   12D0 C0 00 00      cmp b, 0
2369   12D3 C6 E5 12      je _if39_exit
2370   12D6             _if39_true:
2371   12D6 26 00 00      mov b, 0
2372   12D9 FD AB         swp b
2373   12DB D8            push b
2374   12DC 07 B6 13      call prnnum
2375   12DF 51 02 00      add sp, 2
2376   12E2 0A E5 12      jmp _if39_exit
2377   12E5             _if39_exit:
2378   12E5             _if40_cond:
2379   12E5 29 D5 2F      mov b, [datum]
2380   12E8 D7            push a
2381   12E9 74            mov d, b
2382   12EA DA            push d
2383   12EB 29 AF 30      mov b, [pos] ; pos
2384   12EE D7            push a
2385   12EF 11            mov a, b
2386   12F0 26 01 00      mov b, 1
2387   12F3 60            sub a, b
2388   12F4 27            mov b, a
2389   12F5 E4            pop a
2390   12F6 E7            pop d
2391   12F7 10 02 00      mov a, 2
2392   12FA AC            mul a, b
2393   12FB 5A            add d, b
2394   12FC 2A            mov b, [d]
2395   12FD E4            pop a
2396   12FE D7            push a
2397   12FF 11            mov a, b
2398   1300 26 64 00      mov b, 100
2399   1303 B0            cmp a, b
2400   1304 0E            lodflgs
2401   1305 87 02         and al, %00000010 ; <
2402   1307 FD 9C         shr al
2403   1309 22 00         mov ah, 0
2404   130B 27            mov b, a
2405   130C E4            pop a
2406   130D C0 00 00      cmp b, 0
2407   1310 C6 22 13      je _if40_exit
2408   1313             _if40_true:
2409   1313 26 00 00      mov b, 0
2410   1316 FD AB         swp b
2411   1318 D8            push b
2412   1319 07 B6 13      call prnnum
2413   131C 51 02 00      add sp, 2
2414   131F 0A 22 13      jmp _if40_exit
2415   1322             _if40_exit:
2416   1322             _if41_cond:
2417   1322 29 D5 2F      mov b, [datum]
2418   1325 D7            push a
2419   1326 74            mov d, b
2420   1327 DA            push d
2421   1328 29 AF 30      mov b, [pos] ; pos
2422   132B D7            push a
2423   132C 11            mov a, b
2424   132D 26 01 00      mov b, 1
2425   1330 60            sub a, b
2426   1331 27            mov b, a
2427   1332 E4            pop a
2428   1333 E7            pop d
2429   1334 10 02 00      mov a, 2
2430   1337 AC            mul a, b
2431   1338 5A            add d, b
2432   1339 2A            mov b, [d]
2433   133A E4            pop a
2434   133B D7            push a
2435   133C 11            mov a, b
2436   133D 26 0A 00      mov b, 10
2437   1340 B0            cmp a, b
2438   1341 0E            lodflgs
2439   1342 87 02         and al, %00000010 ; <
2440   1344 FD 9C         shr al
2441   1346 22 00         mov ah, 0
2442   1348 27            mov b, a
2443   1349 E4            pop a
2444   134A C0 00 00      cmp b, 0
2445   134D C6 5F 13      je _if41_exit
2446   1350             _if41_true:
2447   1350 26 00 00      mov b, 0
2448   1353 FD AB         swp b
2449   1355 D8            push b
2450   1356 07 B6 13      call prnnum
2451   1359 51 02 00      add sp, 2
2452   135C 0A 5F 13      jmp _if41_exit
2453   135F             _if41_exit:
2454   135F 29 D5 2F      mov b, [datum]
2455   1362 D7            push a
2456   1363 74            mov d, b
2457   1364 DA            push d
2458   1365 29 AF 30      mov b, [pos] ; pos
2459   1368 D7            push a
2460   1369 11            mov a, b
2461   136A 26 01 00      mov b, 1
2462   136D 60            sub a, b
2463   136E 27            mov b, a
2464   136F E4            pop a
2465   1370 E7            pop d
2466   1371 10 02 00      mov a, 2
2467   1374 AC            mul a, b
2468   1375 5A            add d, b
2469   1376 2A            mov b, [d]
2470   1377 E4            pop a
2471   1378 FD AB         swp b
2472   137A D8            push b
2473   137B 07 A5 13      call prnnumspace
2474   137E 51 02 00      add sp, 2
2475   1381             _for38_update:
2476   1381 29 AF 30      mov b, [pos] ; pos
2477   1384 11            mov a, b
2478   1385 FD 7D         dec b
2479   1387 FD 42 AF 30   mov [pos], b
2480   138B 27            mov b, a
2481   138C 0A 8F 12      jmp _for38_cond
2482   138F             _for38_exit:
2483   138F 07 C0 13      call prnnl
2484   1392 F9            leave
2485   1393 05 0B         syscall sys_terminate_proc
2486   1395             
2487   1395             readint:
2488   1395 D2            push bp
2489   1396 9B            mov bp, sp
2490   1397 52 02 00      sub sp, 2 ; n
2491   139A             
2492   139A             ; --- BEGIN INLINE ASM BLOCK
2493   139A 07 31 34      call scan_u16d
2494   139D 45 FF FF      mov [bp + -1], a
2495   13A0             ; --- END INLINE ASM BLOCK
2496   13A0             
2497   13A0 2C FF FF      mov b, [bp + -1] ; n
2498   13A3 F9            leave
2499   13A4 09            ret
2500   13A5             
2501   13A5             prnnumspace:
2502   13A5 D2            push bp
2503   13A6 9B            mov bp, sp
2504   13A7             
2505   13A7             ; --- BEGIN INLINE ASM BLOCK
2506   13A7 17 05 00      mov a, [bp + 5]
2507   13AA 07 5C 33      call print_u16d
2508   13AD 14 79 2F      mov a, [sp]
2509   13B0 3C            mov d, a
2510   13B1 07 33 33      call puts
2511   13B4             ; --- END INLINE ASM BLOCK
2512   13B4             
2513   13B4 F9            leave
2514   13B5 09            ret
2515   13B6             
2516   13B6             prnnum:
2517   13B6 D2            push bp
2518   13B7 9B            mov bp, sp
2519   13B8             
2520   13B8             ; --- BEGIN INLINE ASM BLOCK
2521   13B8 17 05 00      mov a, [bp + 5]
2522   13BB 07 5C 33      call print_u16d
2523   13BE             ; --- END INLINE ASM BLOCK
2524   13BE             
2525   13BE F9            leave
2526   13BF 09            ret
2527   13C0             
2528   13C0             prnnl:
2529   13C0 D2            push bp
2530   13C1 9B            mov bp, sp
2531   13C2             
2532   13C2             ; --- BEGIN INLINE ASM BLOCK
2533   13C2 14 75 2F      mov a, [ss]
2534   13C5 3C            mov d, a
2535   13C6 07 33 33      call puts
2536   13C9             ; --- END INLINE ASM BLOCK
2537   13C9             
2538   13C9 F9            leave
2539   13CA 09            ret
2540   13CB             
2541   13CB             prnsp:
2542   13CB D2            push bp
2543   13CC 9B            mov bp, sp
2544   13CD             
2545   13CD             ; --- BEGIN INLINE ASM BLOCK
2546   13CD 14 79 2F      mov a, [sp]
2547   13D0 3C            mov d, a
2548   13D1 07 33 33      call puts
2549   13D4             ; --- END INLINE ASM BLOCK
2550   13D4             
2551   13D4 F9            leave
2552   13D5 09            ret
2553   13D6             
2554   13D6             fixsignin:
2555   13D6 D2            push bp
2556   13D7 9B            mov bp, sp
2557   13D8 26 00 00      mov b, 0
2558   13DB FD 42 A7 30   mov [asign], b
2559   13DF 26 00 00      mov b, 0
2560   13E2 FD 42 A9 30   mov [bsign], b
2561   13E6 26 00 00      mov b, 0
2562   13E9 FD 42 AB 30   mov [csign], b
2563   13ED             _if42_cond:
2564   13ED 29 F1 2F      mov b, [anarr]
2565   13F0 D7            push a
2566   13F1 74            mov d, b
2567   13F2 DA            push d
2568   13F3 26 0B 00      mov b, 11
2569   13F6 E7            pop d
2570   13F7 10 02 00      mov a, 2
2571   13FA AC            mul a, b
2572   13FB 5A            add d, b
2573   13FC 2A            mov b, [d]
2574   13FD E4            pop a
2575   13FE D7            push a
2576   13FF 11            mov a, b
2577   1400 26 09 00      mov b, 9
2578   1403 B0            cmp a, b
2579   1404 0E            lodflgs
2580   1405 87 03         and al, %00000011
2581   1407 B9 00         cmp al, 0
2582   1409 0E            lodflgs
2583   140A 22 00         mov ah, 0
2584   140C 27            mov b, a
2585   140D E4            pop a
2586   140E C0 00 00      cmp b, 0
2587   1411 C6 71 14      je _if42_exit
2588   1414             _if42_true:
2589   1414 29 F1 2F      mov b, [anarr]
2590   1417 D7            push a
2591   1418 74            mov d, b
2592   1419 DA            push d
2593   141A 26 0B 00      mov b, 11
2594   141D E7            pop d
2595   141E 10 02 00      mov a, 2
2596   1421 AC            mul a, b
2597   1422 5A            add d, b
2598   1423 2A            mov b, [d]
2599   1424 E4            pop a
2600   1425 D7            push a
2601   1426 11            mov a, b
2602   1427 26 0A 00      mov b, 10
2603   142A AE            div a, b
2604   142B FD 78         mov g, a
2605   142D 11            mov a, b
2606   142E FD 27         mov b, g
2607   1430 E4            pop a
2608   1431 FD 42 AF 30   mov [pos], b
2609   1435 29 F1 2F      mov b, [anarr]
2610   1438 74            mov d, b
2611   1439 DA            push d
2612   143A 26 0B 00      mov b, 11
2613   143D E7            pop d
2614   143E 10 02 00      mov a, 2
2615   1441 AC            mul a, b
2616   1442 5A            add d, b
2617   1443 DA            push d
2618   1444 29 F1 2F      mov b, [anarr]
2619   1447 D7            push a
2620   1448 74            mov d, b
2621   1449 DA            push d
2622   144A 26 0B 00      mov b, 11
2623   144D E7            pop d
2624   144E 10 02 00      mov a, 2
2625   1451 AC            mul a, b
2626   1452 5A            add d, b
2627   1453 2A            mov b, [d]
2628   1454 E4            pop a
2629   1455 D7            push a
2630   1456 11            mov a, b
2631   1457 29 AF 30      mov b, [pos] ; pos
2632   145A D7            push a
2633   145B 11            mov a, b
2634   145C 26 0A 00      mov b, 10
2635   145F AC            mul a, b
2636   1460 E4            pop a
2637   1461 60            sub a, b
2638   1462 27            mov b, a
2639   1463 E4            pop a
2640   1464 E7            pop d
2641   1465 11            mov a, b
2642   1466 43            mov [d], a
2643   1467 26 01 00      mov b, 1
2644   146A FD 42 A7 30   mov [asign], b
2645   146E 0A 71 14      jmp _if42_exit
2646   1471             _if42_exit:
2647   1471             _if43_cond:
2648   1471 29 0B 30      mov b, [bnarr]
2649   1474 D7            push a
2650   1475 74            mov d, b
2651   1476 DA            push d
2652   1477 26 0B 00      mov b, 11
2653   147A E7            pop d
2654   147B 10 02 00      mov a, 2
2655   147E AC            mul a, b
2656   147F 5A            add d, b
2657   1480 2A            mov b, [d]
2658   1481 E4            pop a
2659   1482 D7            push a
2660   1483 11            mov a, b
2661   1484 26 09 00      mov b, 9
2662   1487 B0            cmp a, b
2663   1488 0E            lodflgs
2664   1489 87 03         and al, %00000011
2665   148B B9 00         cmp al, 0
2666   148D 0E            lodflgs
2667   148E 22 00         mov ah, 0
2668   1490 27            mov b, a
2669   1491 E4            pop a
2670   1492 C0 00 00      cmp b, 0
2671   1495 C6 F5 14      je _if43_exit
2672   1498             _if43_true:
2673   1498 29 0B 30      mov b, [bnarr]
2674   149B D7            push a
2675   149C 74            mov d, b
2676   149D DA            push d
2677   149E 26 0B 00      mov b, 11
2678   14A1 E7            pop d
2679   14A2 10 02 00      mov a, 2
2680   14A5 AC            mul a, b
2681   14A6 5A            add d, b
2682   14A7 2A            mov b, [d]
2683   14A8 E4            pop a
2684   14A9 D7            push a
2685   14AA 11            mov a, b
2686   14AB 26 0A 00      mov b, 10
2687   14AE AE            div a, b
2688   14AF FD 78         mov g, a
2689   14B1 11            mov a, b
2690   14B2 FD 27         mov b, g
2691   14B4 E4            pop a
2692   14B5 FD 42 AF 30   mov [pos], b
2693   14B9 29 0B 30      mov b, [bnarr]
2694   14BC 74            mov d, b
2695   14BD DA            push d
2696   14BE 26 0B 00      mov b, 11
2697   14C1 E7            pop d
2698   14C2 10 02 00      mov a, 2
2699   14C5 AC            mul a, b
2700   14C6 5A            add d, b
2701   14C7 DA            push d
2702   14C8 29 0B 30      mov b, [bnarr]
2703   14CB D7            push a
2704   14CC 74            mov d, b
2705   14CD DA            push d
2706   14CE 26 0B 00      mov b, 11
2707   14D1 E7            pop d
2708   14D2 10 02 00      mov a, 2
2709   14D5 AC            mul a, b
2710   14D6 5A            add d, b
2711   14D7 2A            mov b, [d]
2712   14D8 E4            pop a
2713   14D9 D7            push a
2714   14DA 11            mov a, b
2715   14DB 29 AF 30      mov b, [pos] ; pos
2716   14DE D7            push a
2717   14DF 11            mov a, b
2718   14E0 26 0A 00      mov b, 10
2719   14E3 AC            mul a, b
2720   14E4 E4            pop a
2721   14E5 60            sub a, b
2722   14E6 27            mov b, a
2723   14E7 E4            pop a
2724   14E8 E7            pop d
2725   14E9 11            mov a, b
2726   14EA 43            mov [d], a
2727   14EB 26 01 00      mov b, 1
2728   14EE FD 42 A9 30   mov [bsign], b
2729   14F2 0A F5 14      jmp _if43_exit
2730   14F5             _if43_exit:
2731   14F5 F9            leave
2732   14F6 09            ret
2733   14F7             
2734   14F7             fixsignout:
2735   14F7 D2            push bp
2736   14F8 9B            mov bp, sp
2737   14F9             _if44_cond:
2738   14F9 29 AB 30      mov b, [csign] ; csign
2739   14FC D7            push a
2740   14FD 11            mov a, b
2741   14FE 26 01 00      mov b, 1
2742   1501 B0            cmp a, b
2743   1502 0E            lodflgs
2744   1503 87 01         and al, %00000001 ; ==
2745   1505 22 00         mov ah, 0
2746   1507 27            mov b, a
2747   1508 E4            pop a
2748   1509 C0 00 00      cmp b, 0
2749   150C C6 44 15      je _if44_exit
2750   150F             _if44_true:
2751   150F 29 59 30      mov b, [cnarr]
2752   1512 74            mov d, b
2753   1513 DA            push d
2754   1514 26 0B 00      mov b, 11
2755   1517 E7            pop d
2756   1518 10 02 00      mov a, 2
2757   151B AC            mul a, b
2758   151C 5A            add d, b
2759   151D DA            push d
2760   151E 29 59 30      mov b, [cnarr]
2761   1521 D7            push a
2762   1522 74            mov d, b
2763   1523 DA            push d
2764   1524 26 0B 00      mov b, 11
2765   1527 E7            pop d
2766   1528 10 02 00      mov a, 2
2767   152B AC            mul a, b
2768   152C 5A            add d, b
2769   152D 2A            mov b, [d]
2770   152E E4            pop a
2771   152F D7            push a
2772   1530 11            mov a, b
2773   1531 26 0A 00      mov b, 10
2774   1534 54            add a, b
2775   1535 27            mov b, a
2776   1536 E4            pop a
2777   1537 E7            pop d
2778   1538 11            mov a, b
2779   1539 43            mov [d], a
2780   153A 26 00 00      mov b, 0
2781   153D FD 42 AB 30   mov [csign], b
2782   1541 0A 44 15      jmp _if44_exit
2783   1544             _if44_exit:
2784   1544 F9            leave
2785   1545 09            ret
2786   1546             
2787   1546             fixcsizezero:
2788   1546 D2            push bp
2789   1547 9B            mov bp, sp
2790   1548 26 01 00      mov b, 1
2791   154B FD 42 E1 30   mov [allzeroes], b
2792   154F             _for45_init:
2793   154F 26 01 00      mov b, 1
2794   1552 FD 42 AF 30   mov [pos], b
2795   1556             _for45_cond:
2796   1556 29 AF 30      mov b, [pos] ; pos
2797   1559 D7            push a
2798   155A 11            mov a, b
2799   155B 26 0C 00      mov b, 12
2800   155E B0            cmp a, b
2801   155F 0E            lodflgs
2802   1560 87 02         and al, %00000010 ; <
2803   1562 FD 9C         shr al
2804   1564 22 00         mov ah, 0
2805   1566 27            mov b, a
2806   1567 E4            pop a
2807   1568 C0 00 00      cmp b, 0
2808   156B C6 AF 15      je _for45_exit
2809   156E             _for45_block:
2810   156E             _if46_cond:
2811   156E 29 59 30      mov b, [cnarr]
2812   1571 D7            push a
2813   1572 74            mov d, b
2814   1573 DA            push d
2815   1574 29 AF 30      mov b, [pos] ; pos
2816   1577 E7            pop d
2817   1578 10 02 00      mov a, 2
2818   157B AC            mul a, b
2819   157C 5A            add d, b
2820   157D 2A            mov b, [d]
2821   157E E4            pop a
2822   157F D7            push a
2823   1580 11            mov a, b
2824   1581 26 00 00      mov b, 0
2825   1584 B0            cmp a, b
2826   1585 0E            lodflgs
2827   1586 87 01         and al, %00000001
2828   1588 8F 01         xor al, %00000001 ; !=
2829   158A 22 00         mov ah, 0
2830   158C 27            mov b, a
2831   158D E4            pop a
2832   158E C0 00 00      cmp b, 0
2833   1591 C6 A1 15      je _if46_exit
2834   1594             _if46_true:
2835   1594 26 00 00      mov b, 0
2836   1597 FD 42 E1 30   mov [allzeroes], b
2837   159B 0A AF 15      jmp _for45_exit ; for break
2838   159E 0A A1 15      jmp _if46_exit
2839   15A1             _if46_exit:
2840   15A1             _for45_update:
2841   15A1 29 AF 30      mov b, [pos] ; pos
2842   15A4 11            mov a, b
2843   15A5 FD 77         inc b
2844   15A7 FD 42 AF 30   mov [pos], b
2845   15AB 27            mov b, a
2846   15AC 0A 56 15      jmp _for45_cond
2847   15AF             _for45_exit:
2848   15AF             _if47_cond:
2849   15AF 29 E1 30      mov b, [allzeroes] ; allzeroes
2850   15B2 D7            push a
2851   15B3 11            mov a, b
2852   15B4 26 01 00      mov b, 1
2853   15B7 B0            cmp a, b
2854   15B8 0E            lodflgs
2855   15B9 87 01         and al, %00000001 ; ==
2856   15BB 22 00         mov ah, 0
2857   15BD 27            mov b, a
2858   15BE E4            pop a
2859   15BF C0 00 00      cmp b, 0
2860   15C2 C6 CF 15      je _if47_exit
2861   15C5             _if47_true:
2862   15C5 26 00 00      mov b, 0
2863   15C8 FD 42 AB 30   mov [csign], b
2864   15CC 0A CF 15      jmp _if47_exit
2865   15CF             _if47_exit:
2866   15CF             _if48_cond:
2867   15CF 29 59 30      mov b, [cnarr]
2868   15D2 D7            push a
2869   15D3 74            mov d, b
2870   15D4 DA            push d
2871   15D5 26 0B 00      mov b, 11
2872   15D8 E7            pop d
2873   15D9 10 02 00      mov a, 2
2874   15DC AC            mul a, b
2875   15DD 5A            add d, b
2876   15DE 2A            mov b, [d]
2877   15DF E4            pop a
2878   15E0 D7            push a
2879   15E1 11            mov a, b
2880   15E2 26 09 00      mov b, 9
2881   15E5 B0            cmp a, b
2882   15E6 0E            lodflgs
2883   15E7 87 03         and al, %00000011
2884   15E9 B9 00         cmp al, 0
2885   15EB 0E            lodflgs
2886   15EC 22 00         mov ah, 0
2887   15EE 27            mov b, a
2888   15EF E4            pop a
2889   15F0 C0 00 00      cmp b, 0
2890   15F3 C6 42 16      je _if48_exit
2891   15F6             _if48_true:
2892   15F6 26 00 00      mov b, 0
2893   15F9 FD 42 AB 30   mov [csign], b
2894   15FD             _for49_init:
2895   15FD 26 01 00      mov b, 1
2896   1600 FD 42 AF 30   mov [pos], b
2897   1604             _for49_cond:
2898   1604 29 AF 30      mov b, [pos] ; pos
2899   1607 D7            push a
2900   1608 11            mov a, b
2901   1609 26 0C 00      mov b, 12
2902   160C B0            cmp a, b
2903   160D 0E            lodflgs
2904   160E 87 02         and al, %00000010 ; <
2905   1610 FD 9C         shr al
2906   1612 22 00         mov ah, 0
2907   1614 27            mov b, a
2908   1615 E4            pop a
2909   1616 C0 00 00      cmp b, 0
2910   1619 C6 3F 16      je _for49_exit
2911   161C             _for49_block:
2912   161C 29 59 30      mov b, [cnarr]
2913   161F 74            mov d, b
2914   1620 DA            push d
2915   1621 29 AF 30      mov b, [pos] ; pos
2916   1624 E7            pop d
2917   1625 10 02 00      mov a, 2
2918   1628 AC            mul a, b
2919   1629 5A            add d, b
2920   162A DA            push d
2921   162B 26 00 00      mov b, 0
2922   162E E7            pop d
2923   162F 11            mov a, b
2924   1630 43            mov [d], a
2925   1631             _for49_update:
2926   1631 29 AF 30      mov b, [pos] ; pos
2927   1634 11            mov a, b
2928   1635 FD 77         inc b
2929   1637 FD 42 AF 30   mov [pos], b
2930   163B 27            mov b, a
2931   163C 0A 04 16      jmp _for49_cond
2932   163F             _for49_exit:
2933   163F 0A 42 16      jmp _if48_exit
2934   1642             _if48_exit:
2935   1642 F9            leave
2936   1643 09            ret
2937   1644             
2938   1644             swapab:
2939   1644 D2            push bp
2940   1645 9B            mov bp, sp
2941   1646             _for50_init:
2942   1646 26 00 00      mov b, 0
2943   1649 FD 42 C7 30   mov [swappos], b
2944   164D             _for50_cond:
2945   164D 29 C7 30      mov b, [swappos] ; swappos
2946   1650 D7            push a
2947   1651 11            mov a, b
2948   1652 26 0C 00      mov b, 12
2949   1655 B0            cmp a, b
2950   1656 0E            lodflgs
2951   1657 87 02         and al, %00000010 ; <
2952   1659 FD 9C         shr al
2953   165B 22 00         mov ah, 0
2954   165D 27            mov b, a
2955   165E E4            pop a
2956   165F C0 00 00      cmp b, 0
2957   1662 C6 1E 17      je _for50_exit
2958   1665             _for50_block:
2959   1665 29 F1 2F      mov b, [anarr]
2960   1668 74            mov d, b
2961   1669 DA            push d
2962   166A 29 C7 30      mov b, [swappos] ; swappos
2963   166D E7            pop d
2964   166E 10 02 00      mov a, 2
2965   1671 AC            mul a, b
2966   1672 5A            add d, b
2967   1673 DA            push d
2968   1674 29 F1 2F      mov b, [anarr]
2969   1677 D7            push a
2970   1678 74            mov d, b
2971   1679 DA            push d
2972   167A 29 C7 30      mov b, [swappos] ; swappos
2973   167D E7            pop d
2974   167E 10 02 00      mov a, 2
2975   1681 AC            mul a, b
2976   1682 5A            add d, b
2977   1683 2A            mov b, [d]
2978   1684 E4            pop a
2979   1685 D7            push a
2980   1686 11            mov a, b
2981   1687 29 0B 30      mov b, [bnarr]
2982   168A D7            push a
2983   168B 74            mov d, b
2984   168C DA            push d
2985   168D 29 C7 30      mov b, [swappos] ; swappos
2986   1690 E7            pop d
2987   1691 10 02 00      mov a, 2
2988   1694 AC            mul a, b
2989   1695 5A            add d, b
2990   1696 2A            mov b, [d]
2991   1697 E4            pop a
2992   1698 54            add a, b
2993   1699 27            mov b, a
2994   169A E4            pop a
2995   169B E7            pop d
2996   169C 11            mov a, b
2997   169D 43            mov [d], a
2998   169E 29 0B 30      mov b, [bnarr]
2999   16A1 74            mov d, b
3000   16A2 DA            push d
3001   16A3 29 C7 30      mov b, [swappos] ; swappos
3002   16A6 E7            pop d
3003   16A7 10 02 00      mov a, 2
3004   16AA AC            mul a, b
3005   16AB 5A            add d, b
3006   16AC DA            push d
3007   16AD 29 F1 2F      mov b, [anarr]
3008   16B0 D7            push a
3009   16B1 74            mov d, b
3010   16B2 DA            push d
3011   16B3 29 C7 30      mov b, [swappos] ; swappos
3012   16B6 E7            pop d
3013   16B7 10 02 00      mov a, 2
3014   16BA AC            mul a, b
3015   16BB 5A            add d, b
3016   16BC 2A            mov b, [d]
3017   16BD E4            pop a
3018   16BE D7            push a
3019   16BF 11            mov a, b
3020   16C0 29 0B 30      mov b, [bnarr]
3021   16C3 D7            push a
3022   16C4 74            mov d, b
3023   16C5 DA            push d
3024   16C6 29 C7 30      mov b, [swappos] ; swappos
3025   16C9 E7            pop d
3026   16CA 10 02 00      mov a, 2
3027   16CD AC            mul a, b
3028   16CE 5A            add d, b
3029   16CF 2A            mov b, [d]
3030   16D0 E4            pop a
3031   16D1 60            sub a, b
3032   16D2 27            mov b, a
3033   16D3 E4            pop a
3034   16D4 E7            pop d
3035   16D5 11            mov a, b
3036   16D6 43            mov [d], a
3037   16D7 29 F1 2F      mov b, [anarr]
3038   16DA 74            mov d, b
3039   16DB DA            push d
3040   16DC 29 C7 30      mov b, [swappos] ; swappos
3041   16DF E7            pop d
3042   16E0 10 02 00      mov a, 2
3043   16E3 AC            mul a, b
3044   16E4 5A            add d, b
3045   16E5 DA            push d
3046   16E6 29 F1 2F      mov b, [anarr]
3047   16E9 D7            push a
3048   16EA 74            mov d, b
3049   16EB DA            push d
3050   16EC 29 C7 30      mov b, [swappos] ; swappos
3051   16EF E7            pop d
3052   16F0 10 02 00      mov a, 2
3053   16F3 AC            mul a, b
3054   16F4 5A            add d, b
3055   16F5 2A            mov b, [d]
3056   16F6 E4            pop a
3057   16F7 D7            push a
3058   16F8 11            mov a, b
3059   16F9 29 0B 30      mov b, [bnarr]
3060   16FC D7            push a
3061   16FD 74            mov d, b
3062   16FE DA            push d
3063   16FF 29 C7 30      mov b, [swappos] ; swappos
3064   1702 E7            pop d
3065   1703 10 02 00      mov a, 2
3066   1706 AC            mul a, b
3067   1707 5A            add d, b
3068   1708 2A            mov b, [d]
3069   1709 E4            pop a
3070   170A 60            sub a, b
3071   170B 27            mov b, a
3072   170C E4            pop a
3073   170D E7            pop d
3074   170E 11            mov a, b
3075   170F 43            mov [d], a
3076   1710             _for50_update:
3077   1710 29 C7 30      mov b, [swappos] ; swappos
3078   1713 11            mov a, b
3079   1714 FD 77         inc b
3080   1716 FD 42 C7 30   mov [swappos], b
3081   171A 27            mov b, a
3082   171B 0A 4D 16      jmp _for50_cond
3083   171E             _for50_exit:
3084   171E F9            leave
3085   171F 09            ret
3086   1720             
3087   1720             checkabsabsize:
3088   1720 D2            push bp
3089   1721 9B            mov bp, sp
3090   1722 26 00 00      mov b, 0
3091   1725 FD 42 B5 30   mov [agtb], b
3092   1729 26 00 00      mov b, 0
3093   172C FD 42 B7 30   mov [bgta], b
3094   1730 26 00 00      mov b, 0
3095   1733 FD 42 BD 30   mov [ageb], b
3096   1737 26 00 00      mov b, 0
3097   173A FD 42 BF 30   mov [bgea], b
3098   173E 26 00 00      mov b, 0
3099   1741 FD 42 B9 30   mov [aeqb], b
3100   1745 26 00 00      mov b, 0
3101   1748 FD 42 BB 30   mov [aneqb], b
3102   174C             _for51_init:
3103   174C 26 0C 00      mov b, 12
3104   174F FD 42 C5 30   mov [psizepos], b
3105   1753             _for51_cond:
3106   1753 29 C5 30      mov b, [psizepos] ; psizepos
3107   1756 D7            push a
3108   1757 11            mov a, b
3109   1758 26 00 00      mov b, 0
3110   175B B0            cmp a, b
3111   175C 0E            lodflgs
3112   175D 87 03         and al, %00000011
3113   175F B9 00         cmp al, 0
3114   1761 0E            lodflgs
3115   1762 22 00         mov ah, 0
3116   1764 27            mov b, a
3117   1765 E4            pop a
3118   1766 C0 00 00      cmp b, 0
3119   1769 C6 3E 18      je _for51_exit
3120   176C             _for51_block:
3121   176C 29 C5 30      mov b, [psizepos] ; psizepos
3122   176F D7            push a
3123   1770 11            mov a, b
3124   1771 26 01 00      mov b, 1
3125   1774 60            sub a, b
3126   1775 27            mov b, a
3127   1776 E4            pop a
3128   1777 FD 42 C3 30   mov [sizepos], b
3129   177B             _if52_cond:
3130   177B 29 F1 2F      mov b, [anarr]
3131   177E D7            push a
3132   177F 74            mov d, b
3133   1780 DA            push d
3134   1781 29 C3 30      mov b, [sizepos] ; sizepos
3135   1784 E7            pop d
3136   1785 10 02 00      mov a, 2
3137   1788 AC            mul a, b
3138   1789 5A            add d, b
3139   178A 2A            mov b, [d]
3140   178B E4            pop a
3141   178C D7            push a
3142   178D 11            mov a, b
3143   178E 29 0B 30      mov b, [bnarr]
3144   1791 D7            push a
3145   1792 74            mov d, b
3146   1793 DA            push d
3147   1794 29 C3 30      mov b, [sizepos] ; sizepos
3148   1797 E7            pop d
3149   1798 10 02 00      mov a, 2
3150   179B AC            mul a, b
3151   179C 5A            add d, b
3152   179D 2A            mov b, [d]
3153   179E E4            pop a
3154   179F B0            cmp a, b
3155   17A0 0E            lodflgs
3156   17A1 87 03         and al, %00000011
3157   17A3 B9 00         cmp al, 0
3158   17A5 0E            lodflgs
3159   17A6 22 00         mov ah, 0
3160   17A8 27            mov b, a
3161   17A9 E4            pop a
3162   17AA C0 00 00      cmp b, 0
3163   17AD C6 C8 17      je _if52_exit
3164   17B0             _if52_true:
3165   17B0 26 01 00      mov b, 1
3166   17B3 FD 42 BB 30   mov [aneqb], b
3167   17B7 26 01 00      mov b, 1
3168   17BA FD 42 B5 30   mov [agtb], b
3169   17BE 26 01 00      mov b, 1
3170   17C1 FD 42 BD 30   mov [ageb], b
3171   17C5 0A C8 17      jmp _if52_exit
3172   17C8             _if52_exit:
3173   17C8             _if53_cond:
3174   17C8 29 F1 2F      mov b, [anarr]
3175   17CB D7            push a
3176   17CC 74            mov d, b
3177   17CD DA            push d
3178   17CE 29 C3 30      mov b, [sizepos] ; sizepos
3179   17D1 E7            pop d
3180   17D2 10 02 00      mov a, 2
3181   17D5 AC            mul a, b
3182   17D6 5A            add d, b
3183   17D7 2A            mov b, [d]
3184   17D8 E4            pop a
3185   17D9 D7            push a
3186   17DA 11            mov a, b
3187   17DB 29 0B 30      mov b, [bnarr]
3188   17DE D7            push a
3189   17DF 74            mov d, b
3190   17E0 DA            push d
3191   17E1 29 C3 30      mov b, [sizepos] ; sizepos
3192   17E4 E7            pop d
3193   17E5 10 02 00      mov a, 2
3194   17E8 AC            mul a, b
3195   17E9 5A            add d, b
3196   17EA 2A            mov b, [d]
3197   17EB E4            pop a
3198   17EC B0            cmp a, b
3199   17ED 0E            lodflgs
3200   17EE 87 02         and al, %00000010 ; <
3201   17F0 FD 9C         shr al
3202   17F2 22 00         mov ah, 0
3203   17F4 27            mov b, a
3204   17F5 E4            pop a
3205   17F6 C0 00 00      cmp b, 0
3206   17F9 C6 14 18      je _if53_exit
3207   17FC             _if53_true:
3208   17FC 26 01 00      mov b, 1
3209   17FF FD 42 BB 30   mov [aneqb], b
3210   1803 26 01 00      mov b, 1
3211   1806 FD 42 B7 30   mov [bgta], b
3212   180A 26 01 00      mov b, 1
3213   180D FD 42 BF 30   mov [bgea], b
3214   1811 0A 14 18      jmp _if53_exit
3215   1814             _if53_exit:
3216   1814             _if54_cond:
3217   1814 29 BB 30      mov b, [aneqb] ; aneqb
3218   1817 D7            push a
3219   1818 11            mov a, b
3220   1819 26 01 00      mov b, 1
3221   181C B0            cmp a, b
3222   181D 0E            lodflgs
3223   181E 87 01         and al, %00000001 ; ==
3224   1820 22 00         mov ah, 0
3225   1822 27            mov b, a
3226   1823 E4            pop a
3227   1824 C0 00 00      cmp b, 0
3228   1827 C6 30 18      je _if54_exit
3229   182A             _if54_true:
3230   182A 0A 3E 18      jmp _for51_exit ; for break
3231   182D 0A 30 18      jmp _if54_exit
3232   1830             _if54_exit:
3233   1830             _for51_update:
3234   1830 29 C5 30      mov b, [psizepos] ; psizepos
3235   1833 11            mov a, b
3236   1834 FD 7D         dec b
3237   1836 FD 42 C5 30   mov [psizepos], b
3238   183A 27            mov b, a
3239   183B 0A 53 17      jmp _for51_cond
3240   183E             _for51_exit:
3241   183E             _if55_cond:
3242   183E 29 BB 30      mov b, [aneqb] ; aneqb
3243   1841 D7            push a
3244   1842 11            mov a, b
3245   1843 26 00 00      mov b, 0
3246   1846 B0            cmp a, b
3247   1847 0E            lodflgs
3248   1848 87 01         and al, %00000001 ; ==
3249   184A 22 00         mov ah, 0
3250   184C 27            mov b, a
3251   184D E4            pop a
3252   184E C0 00 00      cmp b, 0
3253   1851 C6 6C 18      je _if55_exit
3254   1854             _if55_true:
3255   1854 26 01 00      mov b, 1
3256   1857 FD 42 B9 30   mov [aeqb], b
3257   185B 26 01 00      mov b, 1
3258   185E FD 42 BD 30   mov [ageb], b
3259   1862 26 01 00      mov b, 1
3260   1865 FD 42 BF 30   mov [bgea], b
3261   1869 0A 6C 18      jmp _if55_exit
3262   186C             _if55_exit:
3263   186C F9            leave
3264   186D 09            ret
3265   186E             
3266   186E             protoplus:
3267   186E D2            push bp
3268   186F 9B            mov bp, sp
3269   1870 26 00 00      mov b, 0
3270   1873 FD 42 B1 30   mov [carry], b
3271   1877             _for56_init:
3272   1877 26 00 00      mov b, 0
3273   187A FD 42 AF 30   mov [pos], b
3274   187E             _for56_cond:
3275   187E 29 AF 30      mov b, [pos] ; pos
3276   1881 D7            push a
3277   1882 11            mov a, b
3278   1883 26 0C 00      mov b, 12
3279   1886 B0            cmp a, b
3280   1887 0E            lodflgs
3281   1888 87 02         and al, %00000010 ; <
3282   188A FD 9C         shr al
3283   188C 22 00         mov ah, 0
3284   188E 27            mov b, a
3285   188F E4            pop a
3286   1890 C0 00 00      cmp b, 0
3287   1893 C6 48 19      je _for56_exit
3288   1896             _for56_block:
3289   1896 29 59 30      mov b, [cnarr]
3290   1899 74            mov d, b
3291   189A DA            push d
3292   189B 29 AF 30      mov b, [pos] ; pos
3293   189E E7            pop d
3294   189F 10 02 00      mov a, 2
3295   18A2 AC            mul a, b
3296   18A3 5A            add d, b
3297   18A4 DA            push d
3298   18A5 29 F1 2F      mov b, [anarr]
3299   18A8 D7            push a
3300   18A9 74            mov d, b
3301   18AA DA            push d
3302   18AB 29 AF 30      mov b, [pos] ; pos
3303   18AE E7            pop d
3304   18AF 10 02 00      mov a, 2
3305   18B2 AC            mul a, b
3306   18B3 5A            add d, b
3307   18B4 2A            mov b, [d]
3308   18B5 E4            pop a
3309   18B6 D7            push a
3310   18B7 11            mov a, b
3311   18B8 29 0B 30      mov b, [bnarr]
3312   18BB D7            push a
3313   18BC 74            mov d, b
3314   18BD DA            push d
3315   18BE 29 AF 30      mov b, [pos] ; pos
3316   18C1 E7            pop d
3317   18C2 10 02 00      mov a, 2
3318   18C5 AC            mul a, b
3319   18C6 5A            add d, b
3320   18C7 2A            mov b, [d]
3321   18C8 E4            pop a
3322   18C9 54            add a, b
3323   18CA 27            mov b, a
3324   18CB E4            pop a
3325   18CC D7            push a
3326   18CD 11            mov a, b
3327   18CE 29 B1 30      mov b, [carry] ; carry
3328   18D1 54            add a, b
3329   18D2 27            mov b, a
3330   18D3 E4            pop a
3331   18D4 E7            pop d
3332   18D5 11            mov a, b
3333   18D6 43            mov [d], a
3334   18D7 26 00 00      mov b, 0
3335   18DA FD 42 B1 30   mov [carry], b
3336   18DE             _if57_cond:
3337   18DE 29 59 30      mov b, [cnarr]
3338   18E1 D7            push a
3339   18E2 74            mov d, b
3340   18E3 DA            push d
3341   18E4 29 AF 30      mov b, [pos] ; pos
3342   18E7 E7            pop d
3343   18E8 10 02 00      mov a, 2
3344   18EB AC            mul a, b
3345   18EC 5A            add d, b
3346   18ED 2A            mov b, [d]
3347   18EE E4            pop a
3348   18EF D7            push a
3349   18F0 11            mov a, b
3350   18F1 26 63 00      mov b, 99
3351   18F4 B0            cmp a, b
3352   18F5 0E            lodflgs
3353   18F6 87 03         and al, %00000011
3354   18F8 B9 00         cmp al, 0
3355   18FA 0E            lodflgs
3356   18FB 22 00         mov ah, 0
3357   18FD 27            mov b, a
3358   18FE E4            pop a
3359   18FF C0 00 00      cmp b, 0
3360   1902 C6 3A 19      je _if57_exit
3361   1905             _if57_true:
3362   1905 26 01 00      mov b, 1
3363   1908 FD 42 B1 30   mov [carry], b
3364   190C 29 59 30      mov b, [cnarr]
3365   190F 74            mov d, b
3366   1910 DA            push d
3367   1911 29 AF 30      mov b, [pos] ; pos
3368   1914 E7            pop d
3369   1915 10 02 00      mov a, 2
3370   1918 AC            mul a, b
3371   1919 5A            add d, b
3372   191A DA            push d
3373   191B 29 59 30      mov b, [cnarr]
3374   191E D7            push a
3375   191F 74            mov d, b
3376   1920 DA            push d
3377   1921 29 AF 30      mov b, [pos] ; pos
3378   1924 E7            pop d
3379   1925 10 02 00      mov a, 2
3380   1928 AC            mul a, b
3381   1929 5A            add d, b
3382   192A 2A            mov b, [d]
3383   192B E4            pop a
3384   192C D7            push a
3385   192D 11            mov a, b
3386   192E 26 64 00      mov b, 100
3387   1931 60            sub a, b
3388   1932 27            mov b, a
3389   1933 E4            pop a
3390   1934 E7            pop d
3391   1935 11            mov a, b
3392   1936 43            mov [d], a
3393   1937 0A 3A 19      jmp _if57_exit
3394   193A             _if57_exit:
3395   193A             _for56_update:
3396   193A 29 AF 30      mov b, [pos] ; pos
3397   193D 11            mov a, b
3398   193E FD 77         inc b
3399   1940 FD 42 AF 30   mov [pos], b
3400   1944 27            mov b, a
3401   1945 0A 7E 18      jmp _for56_cond
3402   1948             _for56_exit:
3403   1948 F9            leave
3404   1949 09            ret
3405   194A             
3406   194A             protominus:
3407   194A D2            push bp
3408   194B 9B            mov bp, sp
3409   194C 26 00 00      mov b, 0
3410   194F FD 42 B1 30   mov [carry], b
3411   1953             _for58_init:
3412   1953 26 00 00      mov b, 0
3413   1956 FD 42 AF 30   mov [pos], b
3414   195A             _for58_cond:
3415   195A 29 AF 30      mov b, [pos] ; pos
3416   195D D7            push a
3417   195E 11            mov a, b
3418   195F 26 0C 00      mov b, 12
3419   1962 B0            cmp a, b
3420   1963 0E            lodflgs
3421   1964 87 02         and al, %00000010 ; <
3422   1966 FD 9C         shr al
3423   1968 22 00         mov ah, 0
3424   196A 27            mov b, a
3425   196B E4            pop a
3426   196C C0 00 00      cmp b, 0
3427   196F C6 41 1A      je _for58_exit
3428   1972             _for58_block:
3429   1972 26 00 00      mov b, 0
3430   1975 FD 42 B3 30   mov [nextcarry], b
3431   1979             _if59_cond:
3432   1979 29 0B 30      mov b, [bnarr]
3433   197C D7            push a
3434   197D 74            mov d, b
3435   197E DA            push d
3436   197F 29 AF 30      mov b, [pos] ; pos
3437   1982 E7            pop d
3438   1983 10 02 00      mov a, 2
3439   1986 AC            mul a, b
3440   1987 5A            add d, b
3441   1988 2A            mov b, [d]
3442   1989 E4            pop a
3443   198A D7            push a
3444   198B 11            mov a, b
3445   198C 29 B1 30      mov b, [carry] ; carry
3446   198F 54            add a, b
3447   1990 27            mov b, a
3448   1991 E4            pop a
3449   1992 D7            push a
3450   1993 11            mov a, b
3451   1994 29 F1 2F      mov b, [anarr]
3452   1997 D7            push a
3453   1998 74            mov d, b
3454   1999 DA            push d
3455   199A 29 AF 30      mov b, [pos] ; pos
3456   199D E7            pop d
3457   199E 10 02 00      mov a, 2
3458   19A1 AC            mul a, b
3459   19A2 5A            add d, b
3460   19A3 2A            mov b, [d]
3461   19A4 E4            pop a
3462   19A5 B0            cmp a, b
3463   19A6 0E            lodflgs
3464   19A7 87 03         and al, %00000011
3465   19A9 B9 00         cmp al, 0
3466   19AB 0E            lodflgs
3467   19AC 22 00         mov ah, 0
3468   19AE 27            mov b, a
3469   19AF E4            pop a
3470   19B0 C0 00 00      cmp b, 0
3471   19B3 C6 EB 19      je _if59_exit
3472   19B6             _if59_true:
3473   19B6 29 F1 2F      mov b, [anarr]
3474   19B9 74            mov d, b
3475   19BA DA            push d
3476   19BB 29 AF 30      mov b, [pos] ; pos
3477   19BE E7            pop d
3478   19BF 10 02 00      mov a, 2
3479   19C2 AC            mul a, b
3480   19C3 5A            add d, b
3481   19C4 DA            push d
3482   19C5 29 F1 2F      mov b, [anarr]
3483   19C8 D7            push a
3484   19C9 74            mov d, b
3485   19CA DA            push d
3486   19CB 29 AF 30      mov b, [pos] ; pos
3487   19CE E7            pop d
3488   19CF 10 02 00      mov a, 2
3489   19D2 AC            mul a, b
3490   19D3 5A            add d, b
3491   19D4 2A            mov b, [d]
3492   19D5 E4            pop a
3493   19D6 D7            push a
3494   19D7 11            mov a, b
3495   19D8 26 64 00      mov b, 100
3496   19DB 54            add a, b
3497   19DC 27            mov b, a
3498   19DD E4            pop a
3499   19DE E7            pop d
3500   19DF 11            mov a, b
3501   19E0 43            mov [d], a
3502   19E1 26 01 00      mov b, 1
3503   19E4 FD 42 B3 30   mov [nextcarry], b
3504   19E8 0A EB 19      jmp _if59_exit
3505   19EB             _if59_exit:
3506   19EB 29 59 30      mov b, [cnarr]
3507   19EE 74            mov d, b
3508   19EF DA            push d
3509   19F0 29 AF 30      mov b, [pos] ; pos
3510   19F3 E7            pop d
3511   19F4 10 02 00      mov a, 2
3512   19F7 AC            mul a, b
3513   19F8 5A            add d, b
3514   19F9 DA            push d
3515   19FA 29 F1 2F      mov b, [anarr]
3516   19FD D7            push a
3517   19FE 74            mov d, b
3518   19FF DA            push d
3519   1A00 29 AF 30      mov b, [pos] ; pos
3520   1A03 E7            pop d
3521   1A04 10 02 00      mov a, 2
3522   1A07 AC            mul a, b
3523   1A08 5A            add d, b
3524   1A09 2A            mov b, [d]
3525   1A0A E4            pop a
3526   1A0B D7            push a
3527   1A0C 11            mov a, b
3528   1A0D 29 0B 30      mov b, [bnarr]
3529   1A10 D7            push a
3530   1A11 74            mov d, b
3531   1A12 DA            push d
3532   1A13 29 AF 30      mov b, [pos] ; pos
3533   1A16 E7            pop d
3534   1A17 10 02 00      mov a, 2
3535   1A1A AC            mul a, b
3536   1A1B 5A            add d, b
3537   1A1C 2A            mov b, [d]
3538   1A1D E4            pop a
3539   1A1E 60            sub a, b
3540   1A1F 27            mov b, a
3541   1A20 E4            pop a
3542   1A21 D7            push a
3543   1A22 11            mov a, b
3544   1A23 29 B1 30      mov b, [carry] ; carry
3545   1A26 60            sub a, b
3546   1A27 27            mov b, a
3547   1A28 E4            pop a
3548   1A29 E7            pop d
3549   1A2A 11            mov a, b
3550   1A2B 43            mov [d], a
3551   1A2C 29 B3 30      mov b, [nextcarry] ; nextcarry
3552   1A2F FD 42 B1 30   mov [carry], b
3553   1A33             _for58_update:
3554   1A33 29 AF 30      mov b, [pos] ; pos
3555   1A36 11            mov a, b
3556   1A37 FD 77         inc b
3557   1A39 FD 42 AF 30   mov [pos], b
3558   1A3D 27            mov b, a
3559   1A3E 0A 5A 19      jmp _for58_cond
3560   1A41             _for58_exit:
3561   1A41             _if60_cond:
3562   1A41 29 B1 30      mov b, [carry] ; carry
3563   1A44 D7            push a
3564   1A45 11            mov a, b
3565   1A46 26 01 00      mov b, 1
3566   1A49 B0            cmp a, b
3567   1A4A 0E            lodflgs
3568   1A4B 87 01         and al, %00000001 ; ==
3569   1A4D 22 00         mov ah, 0
3570   1A4F 27            mov b, a
3571   1A50 E4            pop a
3572   1A51 C0 00 00      cmp b, 0
3573   1A54 C6 68 1A      je _if60_exit
3574   1A57             _if60_true:
3575   1A57 26 01 00      mov b, 1
3576   1A5A FD 42 AB 30   mov [csign], b
3577   1A5E 26 00 00      mov b, 0
3578   1A61 FD 42 B1 30   mov [carry], b
3579   1A65 0A 68 1A      jmp _if60_exit
3580   1A68             _if60_exit:
3581   1A68 F9            leave
3582   1A69 09            ret
3583   1A6A             
3584   1A6A             pminus:
3585   1A6A D2            push bp
3586   1A6B 9B            mov bp, sp
3587   1A6C             _for61_init:
3588   1A6C 26 00 00      mov b, 0
3589   1A6F FD 42 DF 30   mov [divi], b
3590   1A73             _for61_cond:
3591   1A73 29 DF 30      mov b, [divi] ; divi
3592   1A76 D7            push a
3593   1A77 11            mov a, b
3594   1A78 26 0C 00      mov b, 12
3595   1A7B B0            cmp a, b
3596   1A7C 0E            lodflgs
3597   1A7D 87 02         and al, %00000010 ; <
3598   1A7F FD 9C         shr al
3599   1A81 22 00         mov ah, 0
3600   1A83 27            mov b, a
3601   1A84 E4            pop a
3602   1A85 C0 00 00      cmp b, 0
3603   1A88 C6 AE 1A      je _for61_exit
3604   1A8B             _for61_block:
3605   1A8B 29 59 30      mov b, [cnarr]
3606   1A8E 74            mov d, b
3607   1A8F DA            push d
3608   1A90 29 DF 30      mov b, [divi] ; divi
3609   1A93 E7            pop d
3610   1A94 10 02 00      mov a, 2
3611   1A97 AC            mul a, b
3612   1A98 5A            add d, b
3613   1A99 DA            push d
3614   1A9A 26 00 00      mov b, 0
3615   1A9D E7            pop d
3616   1A9E 11            mov a, b
3617   1A9F 43            mov [d], a
3618   1AA0             _for61_update:
3619   1AA0 29 DF 30      mov b, [divi] ; divi
3620   1AA3 11            mov a, b
3621   1AA4 FD 77         inc b
3622   1AA6 FD 42 DF 30   mov [divi], b
3623   1AAA 27            mov b, a
3624   1AAB 0A 73 1A      jmp _for61_cond
3625   1AAE             _for61_exit:
3626   1AAE 07 20 17      call checkabsabsize
3627   1AB1             _if62_cond:
3628   1AB1 29 A7 30      mov b, [asign] ; asign
3629   1AB4 D7            push a
3630   1AB5 11            mov a, b
3631   1AB6 29 A9 30      mov b, [bsign] ; bsign
3632   1AB9 B0            cmp a, b
3633   1ABA 0E            lodflgs
3634   1ABB 87 01         and al, %00000001 ; ==
3635   1ABD 22 00         mov ah, 0
3636   1ABF 27            mov b, a
3637   1AC0 E4            pop a
3638   1AC1 D7            push a
3639   1AC2 11            mov a, b
3640   1AC3 AF 00 00      cmp a, 0
3641   1AC6 0E            lodflgs
3642   1AC7 8F 01         xor al, %00000001
3643   1AC9 29 B9 30      mov b, [aeqb] ; aeqb
3644   1ACC D7            push a
3645   1ACD 11            mov a, b
3646   1ACE 26 01 00      mov b, 1
3647   1AD1 B0            cmp a, b
3648   1AD2 0E            lodflgs
3649   1AD3 87 01         and al, %00000001 ; ==
3650   1AD5 22 00         mov ah, 0
3651   1AD7 27            mov b, a
3652   1AD8 E4            pop a
3653   1AD9 DB            push al
3654   1ADA C0 00 00      cmp b, 0
3655   1ADD 0E            lodflgs
3656   1ADE 8F 01         xor al, %00000001
3657   1AE0 EA            pop bl
3658   1AE1 A7 00         mov bh, 0
3659   1AE3 E4            pop a
3660   1AE4 C0 00 00      cmp b, 0
3661   1AE7 C6 36 1B      je _if62_exit
3662   1AEA             _if62_true:
3663   1AEA 26 00 00      mov b, 0
3664   1AED FD 42 AB 30   mov [csign], b
3665   1AF1             _for63_init:
3666   1AF1 26 01 00      mov b, 1
3667   1AF4 FD 42 AF 30   mov [pos], b
3668   1AF8             _for63_cond:
3669   1AF8 29 AF 30      mov b, [pos] ; pos
3670   1AFB D7            push a
3671   1AFC 11            mov a, b
3672   1AFD 26 0C 00      mov b, 12
3673   1B00 B0            cmp a, b
3674   1B01 0E            lodflgs
3675   1B02 87 02         and al, %00000010 ; <
3676   1B04 FD 9C         shr al
3677   1B06 22 00         mov ah, 0
3678   1B08 27            mov b, a
3679   1B09 E4            pop a
3680   1B0A C0 00 00      cmp b, 0
3681   1B0D C6 33 1B      je _for63_exit
3682   1B10             _for63_block:
3683   1B10 29 59 30      mov b, [cnarr]
3684   1B13 74            mov d, b
3685   1B14 DA            push d
3686   1B15 29 AF 30      mov b, [pos] ; pos
3687   1B18 E7            pop d
3688   1B19 10 02 00      mov a, 2
3689   1B1C AC            mul a, b
3690   1B1D 5A            add d, b
3691   1B1E DA            push d
3692   1B1F 26 00 00      mov b, 0
3693   1B22 E7            pop d
3694   1B23 11            mov a, b
3695   1B24 43            mov [d], a
3696   1B25             _for63_update:
3697   1B25 29 AF 30      mov b, [pos] ; pos
3698   1B28 11            mov a, b
3699   1B29 FD 77         inc b
3700   1B2B FD 42 AF 30   mov [pos], b
3701   1B2F 27            mov b, a
3702   1B30 0A F8 1A      jmp _for63_cond
3703   1B33             _for63_exit:
3704   1B33 0A 36 1B      jmp _if62_exit
3705   1B36             _if62_exit:
3706   1B36             _if64_cond:
3707   1B36 29 A7 30      mov b, [asign] ; asign
3708   1B39 D7            push a
3709   1B3A 11            mov a, b
3710   1B3B 26 00 00      mov b, 0
3711   1B3E B0            cmp a, b
3712   1B3F 0E            lodflgs
3713   1B40 87 01         and al, %00000001 ; ==
3714   1B42 22 00         mov ah, 0
3715   1B44 27            mov b, a
3716   1B45 E4            pop a
3717   1B46 D7            push a
3718   1B47 11            mov a, b
3719   1B48 AF 00 00      cmp a, 0
3720   1B4B 0E            lodflgs
3721   1B4C 8F 01         xor al, %00000001
3722   1B4E 29 A9 30      mov b, [bsign] ; bsign
3723   1B51 D7            push a
3724   1B52 11            mov a, b
3725   1B53 26 00 00      mov b, 0
3726   1B56 B0            cmp a, b
3727   1B57 0E            lodflgs
3728   1B58 87 01         and al, %00000001 ; ==
3729   1B5A 22 00         mov ah, 0
3730   1B5C 27            mov b, a
3731   1B5D E4            pop a
3732   1B5E DB            push al
3733   1B5F C0 00 00      cmp b, 0
3734   1B62 0E            lodflgs
3735   1B63 8F 01         xor al, %00000001
3736   1B65 EA            pop bl
3737   1B66 A7 00         mov bh, 0
3738   1B68 E4            pop a
3739   1B69 D7            push a
3740   1B6A 11            mov a, b
3741   1B6B AF 00 00      cmp a, 0
3742   1B6E 0E            lodflgs
3743   1B6F 8F 01         xor al, %00000001
3744   1B71 29 BD 30      mov b, [ageb] ; ageb
3745   1B74 D7            push a
3746   1B75 11            mov a, b
3747   1B76 26 01 00      mov b, 1
3748   1B79 B0            cmp a, b
3749   1B7A 0E            lodflgs
3750   1B7B 87 01         and al, %00000001 ; ==
3751   1B7D 22 00         mov ah, 0
3752   1B7F 27            mov b, a
3753   1B80 E4            pop a
3754   1B81 DB            push al
3755   1B82 C0 00 00      cmp b, 0
3756   1B85 0E            lodflgs
3757   1B86 8F 01         xor al, %00000001
3758   1B88 EA            pop bl
3759   1B89 A7 00         mov bh, 0
3760   1B8B E4            pop a
3761   1B8C C0 00 00      cmp b, 0
3762   1B8F C6 9F 1B      je _if64_exit
3763   1B92             _if64_true:
3764   1B92 26 00 00      mov b, 0
3765   1B95 FD 42 AB 30   mov [csign], b
3766   1B99 07 4A 19      call protominus
3767   1B9C 0A 9F 1B      jmp _if64_exit
3768   1B9F             _if64_exit:
3769   1B9F             _if65_cond:
3770   1B9F 29 A7 30      mov b, [asign] ; asign
3771   1BA2 D7            push a
3772   1BA3 11            mov a, b
3773   1BA4 26 00 00      mov b, 0
3774   1BA7 B0            cmp a, b
3775   1BA8 0E            lodflgs
3776   1BA9 87 01         and al, %00000001 ; ==
3777   1BAB 22 00         mov ah, 0
3778   1BAD 27            mov b, a
3779   1BAE E4            pop a
3780   1BAF D7            push a
3781   1BB0 11            mov a, b
3782   1BB1 AF 00 00      cmp a, 0
3783   1BB4 0E            lodflgs
3784   1BB5 8F 01         xor al, %00000001
3785   1BB7 29 A9 30      mov b, [bsign] ; bsign
3786   1BBA D7            push a
3787   1BBB 11            mov a, b
3788   1BBC 26 00 00      mov b, 0
3789   1BBF B0            cmp a, b
3790   1BC0 0E            lodflgs
3791   1BC1 87 01         and al, %00000001 ; ==
3792   1BC3 22 00         mov ah, 0
3793   1BC5 27            mov b, a
3794   1BC6 E4            pop a
3795   1BC7 DB            push al
3796   1BC8 C0 00 00      cmp b, 0
3797   1BCB 0E            lodflgs
3798   1BCC 8F 01         xor al, %00000001
3799   1BCE EA            pop bl
3800   1BCF A7 00         mov bh, 0
3801   1BD1 E4            pop a
3802   1BD2 D7            push a
3803   1BD3 11            mov a, b
3804   1BD4 AF 00 00      cmp a, 0
3805   1BD7 0E            lodflgs
3806   1BD8 8F 01         xor al, %00000001
3807   1BDA 29 B7 30      mov b, [bgta] ; bgta
3808   1BDD D7            push a
3809   1BDE 11            mov a, b
3810   1BDF 26 01 00      mov b, 1
3811   1BE2 B0            cmp a, b
3812   1BE3 0E            lodflgs
3813   1BE4 87 01         and al, %00000001 ; ==
3814   1BE6 22 00         mov ah, 0
3815   1BE8 27            mov b, a
3816   1BE9 E4            pop a
3817   1BEA DB            push al
3818   1BEB C0 00 00      cmp b, 0
3819   1BEE 0E            lodflgs
3820   1BEF 8F 01         xor al, %00000001
3821   1BF1 EA            pop bl
3822   1BF2 A7 00         mov bh, 0
3823   1BF4 E4            pop a
3824   1BF5 C0 00 00      cmp b, 0
3825   1BF8 C6 0B 1C      je _if65_exit
3826   1BFB             _if65_true:
3827   1BFB 26 01 00      mov b, 1
3828   1BFE FD 42 AB 30   mov [csign], b
3829   1C02 07 44 16      call swapab
3830   1C05 07 4A 19      call protominus
3831   1C08 0A 0B 1C      jmp _if65_exit
3832   1C0B             _if65_exit:
3833   1C0B             _if66_cond:
3834   1C0B 29 A7 30      mov b, [asign] ; asign
3835   1C0E D7            push a
3836   1C0F 11            mov a, b
3837   1C10 26 01 00      mov b, 1
3838   1C13 B0            cmp a, b
3839   1C14 0E            lodflgs
3840   1C15 87 01         and al, %00000001 ; ==
3841   1C17 22 00         mov ah, 0
3842   1C19 27            mov b, a
3843   1C1A E4            pop a
3844   1C1B D7            push a
3845   1C1C 11            mov a, b
3846   1C1D AF 00 00      cmp a, 0
3847   1C20 0E            lodflgs
3848   1C21 8F 01         xor al, %00000001
3849   1C23 29 A9 30      mov b, [bsign] ; bsign
3850   1C26 D7            push a
3851   1C27 11            mov a, b
3852   1C28 26 01 00      mov b, 1
3853   1C2B B0            cmp a, b
3854   1C2C 0E            lodflgs
3855   1C2D 87 01         and al, %00000001 ; ==
3856   1C2F 22 00         mov ah, 0
3857   1C31 27            mov b, a
3858   1C32 E4            pop a
3859   1C33 DB            push al
3860   1C34 C0 00 00      cmp b, 0
3861   1C37 0E            lodflgs
3862   1C38 8F 01         xor al, %00000001
3863   1C3A EA            pop bl
3864   1C3B A7 00         mov bh, 0
3865   1C3D E4            pop a
3866   1C3E D7            push a
3867   1C3F 11            mov a, b
3868   1C40 AF 00 00      cmp a, 0
3869   1C43 0E            lodflgs
3870   1C44 8F 01         xor al, %00000001
3871   1C46 29 BD 30      mov b, [ageb] ; ageb
3872   1C49 D7            push a
3873   1C4A 11            mov a, b
3874   1C4B 26 01 00      mov b, 1
3875   1C4E B0            cmp a, b
3876   1C4F 0E            lodflgs
3877   1C50 87 01         and al, %00000001 ; ==
3878   1C52 22 00         mov ah, 0
3879   1C54 27            mov b, a
3880   1C55 E4            pop a
3881   1C56 DB            push al
3882   1C57 C0 00 00      cmp b, 0
3883   1C5A 0E            lodflgs
3884   1C5B 8F 01         xor al, %00000001
3885   1C5D EA            pop bl
3886   1C5E A7 00         mov bh, 0
3887   1C60 E4            pop a
3888   1C61 C0 00 00      cmp b, 0
3889   1C64 C6 74 1C      je _if66_exit
3890   1C67             _if66_true:
3891   1C67 26 01 00      mov b, 1
3892   1C6A FD 42 AB 30   mov [csign], b
3893   1C6E 07 4A 19      call protominus
3894   1C71 0A 74 1C      jmp _if66_exit
3895   1C74             _if66_exit:
3896   1C74             _if67_cond:
3897   1C74 29 A7 30      mov b, [asign] ; asign
3898   1C77 D7            push a
3899   1C78 11            mov a, b
3900   1C79 26 01 00      mov b, 1
3901   1C7C B0            cmp a, b
3902   1C7D 0E            lodflgs
3903   1C7E 87 01         and al, %00000001 ; ==
3904   1C80 22 00         mov ah, 0
3905   1C82 27            mov b, a
3906   1C83 E4            pop a
3907   1C84 D7            push a
3908   1C85 11            mov a, b
3909   1C86 AF 00 00      cmp a, 0
3910   1C89 0E            lodflgs
3911   1C8A 8F 01         xor al, %00000001
3912   1C8C 29 A9 30      mov b, [bsign] ; bsign
3913   1C8F D7            push a
3914   1C90 11            mov a, b
3915   1C91 26 01 00      mov b, 1
3916   1C94 B0            cmp a, b
3917   1C95 0E            lodflgs
3918   1C96 87 01         and al, %00000001 ; ==
3919   1C98 22 00         mov ah, 0
3920   1C9A 27            mov b, a
3921   1C9B E4            pop a
3922   1C9C DB            push al
3923   1C9D C0 00 00      cmp b, 0
3924   1CA0 0E            lodflgs
3925   1CA1 8F 01         xor al, %00000001
3926   1CA3 EA            pop bl
3927   1CA4 A7 00         mov bh, 0
3928   1CA6 E4            pop a
3929   1CA7 D7            push a
3930   1CA8 11            mov a, b
3931   1CA9 AF 00 00      cmp a, 0
3932   1CAC 0E            lodflgs
3933   1CAD 8F 01         xor al, %00000001
3934   1CAF 29 B7 30      mov b, [bgta] ; bgta
3935   1CB2 D7            push a
3936   1CB3 11            mov a, b
3937   1CB4 26 01 00      mov b, 1
3938   1CB7 B0            cmp a, b
3939   1CB8 0E            lodflgs
3940   1CB9 87 01         and al, %00000001 ; ==
3941   1CBB 22 00         mov ah, 0
3942   1CBD 27            mov b, a
3943   1CBE E4            pop a
3944   1CBF DB            push al
3945   1CC0 C0 00 00      cmp b, 0
3946   1CC3 0E            lodflgs
3947   1CC4 8F 01         xor al, %00000001
3948   1CC6 EA            pop bl
3949   1CC7 A7 00         mov bh, 0
3950   1CC9 E4            pop a
3951   1CCA C0 00 00      cmp b, 0
3952   1CCD C6 E0 1C      je _if67_exit
3953   1CD0             _if67_true:
3954   1CD0 26 00 00      mov b, 0
3955   1CD3 FD 42 AB 30   mov [csign], b
3956   1CD7 07 44 16      call swapab
3957   1CDA 07 4A 19      call protominus
3958   1CDD 0A E0 1C      jmp _if67_exit
3959   1CE0             _if67_exit:
3960   1CE0             _if68_cond:
3961   1CE0 29 A7 30      mov b, [asign] ; asign
3962   1CE3 D7            push a
3963   1CE4 11            mov a, b
3964   1CE5 26 00 00      mov b, 0
3965   1CE8 B0            cmp a, b
3966   1CE9 0E            lodflgs
3967   1CEA 87 01         and al, %00000001 ; ==
3968   1CEC 22 00         mov ah, 0
3969   1CEE 27            mov b, a
3970   1CEF E4            pop a
3971   1CF0 D7            push a
3972   1CF1 11            mov a, b
3973   1CF2 AF 00 00      cmp a, 0
3974   1CF5 0E            lodflgs
3975   1CF6 8F 01         xor al, %00000001
3976   1CF8 29 A9 30      mov b, [bsign] ; bsign
3977   1CFB D7            push a
3978   1CFC 11            mov a, b
3979   1CFD 26 01 00      mov b, 1
3980   1D00 B0            cmp a, b
3981   1D01 0E            lodflgs
3982   1D02 87 01         and al, %00000001 ; ==
3983   1D04 22 00         mov ah, 0
3984   1D06 27            mov b, a
3985   1D07 E4            pop a
3986   1D08 DB            push al
3987   1D09 C0 00 00      cmp b, 0
3988   1D0C 0E            lodflgs
3989   1D0D 8F 01         xor al, %00000001
3990   1D0F EA            pop bl
3991   1D10 A7 00         mov bh, 0
3992   1D12 E4            pop a
3993   1D13 C0 00 00      cmp b, 0
3994   1D16 C6 26 1D      je _if68_exit
3995   1D19             _if68_true:
3996   1D19 26 00 00      mov b, 0
3997   1D1C FD 42 AB 30   mov [csign], b
3998   1D20 07 6E 18      call protoplus
3999   1D23 0A 26 1D      jmp _if68_exit
4000   1D26             _if68_exit:
4001   1D26             _if69_cond:
4002   1D26 29 A7 30      mov b, [asign] ; asign
4003   1D29 D7            push a
4004   1D2A 11            mov a, b
4005   1D2B 26 01 00      mov b, 1
4006   1D2E B0            cmp a, b
4007   1D2F 0E            lodflgs
4008   1D30 87 01         and al, %00000001 ; ==
4009   1D32 22 00         mov ah, 0
4010   1D34 27            mov b, a
4011   1D35 E4            pop a
4012   1D36 D7            push a
4013   1D37 11            mov a, b
4014   1D38 AF 00 00      cmp a, 0
4015   1D3B 0E            lodflgs
4016   1D3C 8F 01         xor al, %00000001
4017   1D3E 29 A9 30      mov b, [bsign] ; bsign
4018   1D41 D7            push a
4019   1D42 11            mov a, b
4020   1D43 26 00 00      mov b, 0
4021   1D46 B0            cmp a, b
4022   1D47 0E            lodflgs
4023   1D48 87 01         and al, %00000001 ; ==
4024   1D4A 22 00         mov ah, 0
4025   1D4C 27            mov b, a
4026   1D4D E4            pop a
4027   1D4E DB            push al
4028   1D4F C0 00 00      cmp b, 0
4029   1D52 0E            lodflgs
4030   1D53 8F 01         xor al, %00000001
4031   1D55 EA            pop bl
4032   1D56 A7 00         mov bh, 0
4033   1D58 E4            pop a
4034   1D59 C0 00 00      cmp b, 0
4035   1D5C C6 6C 1D      je _if69_exit
4036   1D5F             _if69_true:
4037   1D5F 26 01 00      mov b, 1
4038   1D62 FD 42 AB 30   mov [csign], b
4039   1D66 07 6E 18      call protoplus
4040   1D69 0A 6C 1D      jmp _if69_exit
4041   1D6C             _if69_exit:
4042   1D6C F9            leave
4043   1D6D 09            ret
4044   1D6E             
4045   1D6E             minus:
4046   1D6E D2            push bp
4047   1D6F 9B            mov bp, sp
4048   1D70 07 D6 13      call fixsignin
4049   1D73 07 6A 1A      call pminus
4050   1D76 07 46 15      call fixcsizezero
4051   1D79 07 F7 14      call fixsignout
4052   1D7C F9            leave
4053   1D7D 09            ret
4054   1D7E             
4055   1D7E             pplus:
4056   1D7E D2            push bp
4057   1D7F 9B            mov bp, sp
4058   1D80             _for70_init:
4059   1D80 26 00 00      mov b, 0
4060   1D83 FD 42 DF 30   mov [divi], b
4061   1D87             _for70_cond:
4062   1D87 29 DF 30      mov b, [divi] ; divi
4063   1D8A D7            push a
4064   1D8B 11            mov a, b
4065   1D8C 26 0C 00      mov b, 12
4066   1D8F B0            cmp a, b
4067   1D90 0E            lodflgs
4068   1D91 87 02         and al, %00000010 ; <
4069   1D93 FD 9C         shr al
4070   1D95 22 00         mov ah, 0
4071   1D97 27            mov b, a
4072   1D98 E4            pop a
4073   1D99 C0 00 00      cmp b, 0
4074   1D9C C6 C2 1D      je _for70_exit
4075   1D9F             _for70_block:
4076   1D9F 29 59 30      mov b, [cnarr]
4077   1DA2 74            mov d, b
4078   1DA3 DA            push d
4079   1DA4 29 DF 30      mov b, [divi] ; divi
4080   1DA7 E7            pop d
4081   1DA8 10 02 00      mov a, 2
4082   1DAB AC            mul a, b
4083   1DAC 5A            add d, b
4084   1DAD DA            push d
4085   1DAE 26 00 00      mov b, 0
4086   1DB1 E7            pop d
4087   1DB2 11            mov a, b
4088   1DB3 43            mov [d], a
4089   1DB4             _for70_update:
4090   1DB4 29 DF 30      mov b, [divi] ; divi
4091   1DB7 11            mov a, b
4092   1DB8 FD 77         inc b
4093   1DBA FD 42 DF 30   mov [divi], b
4094   1DBE 27            mov b, a
4095   1DBF 0A 87 1D      jmp _for70_cond
4096   1DC2             _for70_exit:
4097   1DC2 07 20 17      call checkabsabsize
4098   1DC5             _if71_cond:
4099   1DC5 29 A7 30      mov b, [asign] ; asign
4100   1DC8 D7            push a
4101   1DC9 11            mov a, b
4102   1DCA 26 00 00      mov b, 0
4103   1DCD B0            cmp a, b
4104   1DCE 0E            lodflgs
4105   1DCF 87 01         and al, %00000001 ; ==
4106   1DD1 22 00         mov ah, 0
4107   1DD3 27            mov b, a
4108   1DD4 E4            pop a
4109   1DD5 D7            push a
4110   1DD6 11            mov a, b
4111   1DD7 AF 00 00      cmp a, 0
4112   1DDA 0E            lodflgs
4113   1DDB 8F 01         xor al, %00000001
4114   1DDD 29 A9 30      mov b, [bsign] ; bsign
4115   1DE0 D7            push a
4116   1DE1 11            mov a, b
4117   1DE2 26 01 00      mov b, 1
4118   1DE5 B0            cmp a, b
4119   1DE6 0E            lodflgs
4120   1DE7 87 01         and al, %00000001 ; ==
4121   1DE9 22 00         mov ah, 0
4122   1DEB 27            mov b, a
4123   1DEC E4            pop a
4124   1DED DB            push al
4125   1DEE C0 00 00      cmp b, 0
4126   1DF1 0E            lodflgs
4127   1DF2 8F 01         xor al, %00000001
4128   1DF4 EA            pop bl
4129   1DF5 A7 00         mov bh, 0
4130   1DF7 E4            pop a
4131   1DF8 D7            push a
4132   1DF9 11            mov a, b
4133   1DFA AF 00 00      cmp a, 0
4134   1DFD 0E            lodflgs
4135   1DFE 8F 01         xor al, %00000001
4136   1E00 29 B9 30      mov b, [aeqb] ; aeqb
4137   1E03 D7            push a
4138   1E04 11            mov a, b
4139   1E05 26 01 00      mov b, 1
4140   1E08 B0            cmp a, b
4141   1E09 0E            lodflgs
4142   1E0A 87 01         and al, %00000001 ; ==
4143   1E0C 22 00         mov ah, 0
4144   1E0E 27            mov b, a
4145   1E0F E4            pop a
4146   1E10 DB            push al
4147   1E11 C0 00 00      cmp b, 0
4148   1E14 0E            lodflgs
4149   1E15 8F 01         xor al, %00000001
4150   1E17 EA            pop bl
4151   1E18 A7 00         mov bh, 0
4152   1E1A E4            pop a
4153   1E1B C0 00 00      cmp b, 0
4154   1E1E C6 7D 1E      je _if71_exit
4155   1E21             _if71_true:
4156   1E21 26 00 00      mov b, 0
4157   1E24 FD 42 A7 30   mov [asign], b
4158   1E28 26 00 00      mov b, 0
4159   1E2B FD 42 A9 30   mov [bsign], b
4160   1E2F 26 00 00      mov b, 0
4161   1E32 FD 42 AB 30   mov [csign], b
4162   1E36             _for72_init:
4163   1E36 26 01 00      mov b, 1
4164   1E39 FD 42 AF 30   mov [pos], b
4165   1E3D             _for72_cond:
4166   1E3D 29 AF 30      mov b, [pos] ; pos
4167   1E40 D7            push a
4168   1E41 11            mov a, b
4169   1E42 26 0C 00      mov b, 12
4170   1E45 B0            cmp a, b
4171   1E46 0E            lodflgs
4172   1E47 87 02         and al, %00000010 ; <
4173   1E49 FD 9C         shr al
4174   1E4B 22 00         mov ah, 0
4175   1E4D 27            mov b, a
4176   1E4E E4            pop a
4177   1E4F C0 00 00      cmp b, 0
4178   1E52 C6 78 1E      je _for72_exit
4179   1E55             _for72_block:
4180   1E55 29 59 30      mov b, [cnarr]
4181   1E58 74            mov d, b
4182   1E59 DA            push d
4183   1E5A 29 AF 30      mov b, [pos] ; pos
4184   1E5D E7            pop d
4185   1E5E 10 02 00      mov a, 2
4186   1E61 AC            mul a, b
4187   1E62 5A            add d, b
4188   1E63 DA            push d
4189   1E64 26 00 00      mov b, 0
4190   1E67 E7            pop d
4191   1E68 11            mov a, b
4192   1E69 43            mov [d], a
4193   1E6A             _for72_update:
4194   1E6A 29 AF 30      mov b, [pos] ; pos
4195   1E6D 11            mov a, b
4196   1E6E FD 77         inc b
4197   1E70 FD 42 AF 30   mov [pos], b
4198   1E74 27            mov b, a
4199   1E75 0A 3D 1E      jmp _for72_cond
4200   1E78             _for72_exit:
4201   1E78 F9            leave
4202   1E79 09            ret
4203   1E7A 0A 7D 1E      jmp _if71_exit
4204   1E7D             _if71_exit:
4205   1E7D             _if73_cond:
4206   1E7D 29 A7 30      mov b, [asign] ; asign
4207   1E80 D7            push a
4208   1E81 11            mov a, b
4209   1E82 26 01 00      mov b, 1
4210   1E85 B0            cmp a, b
4211   1E86 0E            lodflgs
4212   1E87 87 01         and al, %00000001 ; ==
4213   1E89 22 00         mov ah, 0
4214   1E8B 27            mov b, a
4215   1E8C E4            pop a
4216   1E8D D7            push a
4217   1E8E 11            mov a, b
4218   1E8F AF 00 00      cmp a, 0
4219   1E92 0E            lodflgs
4220   1E93 8F 01         xor al, %00000001
4221   1E95 29 A9 30      mov b, [bsign] ; bsign
4222   1E98 D7            push a
4223   1E99 11            mov a, b
4224   1E9A 26 00 00      mov b, 0
4225   1E9D B0            cmp a, b
4226   1E9E 0E            lodflgs
4227   1E9F 87 01         and al, %00000001 ; ==
4228   1EA1 22 00         mov ah, 0
4229   1EA3 27            mov b, a
4230   1EA4 E4            pop a
4231   1EA5 DB            push al
4232   1EA6 C0 00 00      cmp b, 0
4233   1EA9 0E            lodflgs
4234   1EAA 8F 01         xor al, %00000001
4235   1EAC EA            pop bl
4236   1EAD A7 00         mov bh, 0
4237   1EAF E4            pop a
4238   1EB0 D7            push a
4239   1EB1 11            mov a, b
4240   1EB2 AF 00 00      cmp a, 0
4241   1EB5 0E            lodflgs
4242   1EB6 8F 01         xor al, %00000001
4243   1EB8 29 B9 30      mov b, [aeqb] ; aeqb
4244   1EBB D7            push a
4245   1EBC 11            mov a, b
4246   1EBD 26 01 00      mov b, 1
4247   1EC0 B0            cmp a, b
4248   1EC1 0E            lodflgs
4249   1EC2 87 01         and al, %00000001 ; ==
4250   1EC4 22 00         mov ah, 0
4251   1EC6 27            mov b, a
4252   1EC7 E4            pop a
4253   1EC8 DB            push al
4254   1EC9 C0 00 00      cmp b, 0
4255   1ECC 0E            lodflgs
4256   1ECD 8F 01         xor al, %00000001
4257   1ECF EA            pop bl
4258   1ED0 A7 00         mov bh, 0
4259   1ED2 E4            pop a
4260   1ED3 C0 00 00      cmp b, 0
4261   1ED6 C6 35 1F      je _if73_exit
4262   1ED9             _if73_true:
4263   1ED9 26 00 00      mov b, 0
4264   1EDC FD 42 A7 30   mov [asign], b
4265   1EE0 26 00 00      mov b, 0
4266   1EE3 FD 42 A9 30   mov [bsign], b
4267   1EE7 26 00 00      mov b, 0
4268   1EEA FD 42 AB 30   mov [csign], b
4269   1EEE             _for74_init:
4270   1EEE 26 01 00      mov b, 1
4271   1EF1 FD 42 AF 30   mov [pos], b
4272   1EF5             _for74_cond:
4273   1EF5 29 AF 30      mov b, [pos] ; pos
4274   1EF8 D7            push a
4275   1EF9 11            mov a, b
4276   1EFA 26 0C 00      mov b, 12
4277   1EFD B0            cmp a, b
4278   1EFE 0E            lodflgs
4279   1EFF 87 02         and al, %00000010 ; <
4280   1F01 FD 9C         shr al
4281   1F03 22 00         mov ah, 0
4282   1F05 27            mov b, a
4283   1F06 E4            pop a
4284   1F07 C0 00 00      cmp b, 0
4285   1F0A C6 30 1F      je _for74_exit
4286   1F0D             _for74_block:
4287   1F0D 29 59 30      mov b, [cnarr]
4288   1F10 74            mov d, b
4289   1F11 DA            push d
4290   1F12 29 AF 30      mov b, [pos] ; pos
4291   1F15 E7            pop d
4292   1F16 10 02 00      mov a, 2
4293   1F19 AC            mul a, b
4294   1F1A 5A            add d, b
4295   1F1B DA            push d
4296   1F1C 26 00 00      mov b, 0
4297   1F1F E7            pop d
4298   1F20 11            mov a, b
4299   1F21 43            mov [d], a
4300   1F22             _for74_update:
4301   1F22 29 AF 30      mov b, [pos] ; pos
4302   1F25 11            mov a, b
4303   1F26 FD 77         inc b
4304   1F28 FD 42 AF 30   mov [pos], b
4305   1F2C 27            mov b, a
4306   1F2D 0A F5 1E      jmp _for74_cond
4307   1F30             _for74_exit:
4308   1F30 F9            leave
4309   1F31 09            ret
4310   1F32 0A 35 1F      jmp _if73_exit
4311   1F35             _if73_exit:
4312   1F35             _if75_cond:
4313   1F35 29 A7 30      mov b, [asign] ; asign
4314   1F38 D7            push a
4315   1F39 11            mov a, b
4316   1F3A 26 00 00      mov b, 0
4317   1F3D B0            cmp a, b
4318   1F3E 0E            lodflgs
4319   1F3F 87 01         and al, %00000001 ; ==
4320   1F41 22 00         mov ah, 0
4321   1F43 27            mov b, a
4322   1F44 E4            pop a
4323   1F45 D7            push a
4324   1F46 11            mov a, b
4325   1F47 AF 00 00      cmp a, 0
4326   1F4A 0E            lodflgs
4327   1F4B 8F 01         xor al, %00000001
4328   1F4D 29 A9 30      mov b, [bsign] ; bsign
4329   1F50 D7            push a
4330   1F51 11            mov a, b
4331   1F52 26 00 00      mov b, 0
4332   1F55 B0            cmp a, b
4333   1F56 0E            lodflgs
4334   1F57 87 01         and al, %00000001 ; ==
4335   1F59 22 00         mov ah, 0
4336   1F5B 27            mov b, a
4337   1F5C E4            pop a
4338   1F5D DB            push al
4339   1F5E C0 00 00      cmp b, 0
4340   1F61 0E            lodflgs
4341   1F62 8F 01         xor al, %00000001
4342   1F64 EA            pop bl
4343   1F65 A7 00         mov bh, 0
4344   1F67 E4            pop a
4345   1F68 C0 00 00      cmp b, 0
4346   1F6B C6 8B 1F      je _if75_exit
4347   1F6E             _if75_true:
4348   1F6E 26 00 00      mov b, 0
4349   1F71 FD 42 A7 30   mov [asign], b
4350   1F75 26 00 00      mov b, 0
4351   1F78 FD 42 A9 30   mov [bsign], b
4352   1F7C 26 00 00      mov b, 0
4353   1F7F FD 42 AB 30   mov [csign], b
4354   1F83 07 6E 18      call protoplus
4355   1F86 F9            leave
4356   1F87 09            ret
4357   1F88 0A 8B 1F      jmp _if75_exit
4358   1F8B             _if75_exit:
4359   1F8B             _if76_cond:
4360   1F8B 29 A7 30      mov b, [asign] ; asign
4361   1F8E D7            push a
4362   1F8F 11            mov a, b
4363   1F90 26 01 00      mov b, 1
4364   1F93 B0            cmp a, b
4365   1F94 0E            lodflgs
4366   1F95 87 01         and al, %00000001 ; ==
4367   1F97 22 00         mov ah, 0
4368   1F99 27            mov b, a
4369   1F9A E4            pop a
4370   1F9B D7            push a
4371   1F9C 11            mov a, b
4372   1F9D AF 00 00      cmp a, 0
4373   1FA0 0E            lodflgs
4374   1FA1 8F 01         xor al, %00000001
4375   1FA3 29 A9 30      mov b, [bsign] ; bsign
4376   1FA6 D7            push a
4377   1FA7 11            mov a, b
4378   1FA8 26 01 00      mov b, 1
4379   1FAB B0            cmp a, b
4380   1FAC 0E            lodflgs
4381   1FAD 87 01         and al, %00000001 ; ==
4382   1FAF 22 00         mov ah, 0
4383   1FB1 27            mov b, a
4384   1FB2 E4            pop a
4385   1FB3 DB            push al
4386   1FB4 C0 00 00      cmp b, 0
4387   1FB7 0E            lodflgs
4388   1FB8 8F 01         xor al, %00000001
4389   1FBA EA            pop bl
4390   1FBB A7 00         mov bh, 0
4391   1FBD E4            pop a
4392   1FBE C0 00 00      cmp b, 0
4393   1FC1 C6 E1 1F      je _if76_exit
4394   1FC4             _if76_true:
4395   1FC4 26 00 00      mov b, 0
4396   1FC7 FD 42 A7 30   mov [asign], b
4397   1FCB 26 00 00      mov b, 0
4398   1FCE FD 42 A9 30   mov [bsign], b
4399   1FD2 26 01 00      mov b, 1
4400   1FD5 FD 42 AB 30   mov [csign], b
4401   1FD9 07 6E 18      call protoplus
4402   1FDC F9            leave
4403   1FDD 09            ret
4404   1FDE 0A E1 1F      jmp _if76_exit
4405   1FE1             _if76_exit:
4406   1FE1             _if77_cond:
4407   1FE1 29 A7 30      mov b, [asign] ; asign
4408   1FE4 D7            push a
4409   1FE5 11            mov a, b
4410   1FE6 26 00 00      mov b, 0
4411   1FE9 B0            cmp a, b
4412   1FEA 0E            lodflgs
4413   1FEB 87 01         and al, %00000001 ; ==
4414   1FED 22 00         mov ah, 0
4415   1FEF 27            mov b, a
4416   1FF0 E4            pop a
4417   1FF1 D7            push a
4418   1FF2 11            mov a, b
4419   1FF3 AF 00 00      cmp a, 0
4420   1FF6 0E            lodflgs
4421   1FF7 8F 01         xor al, %00000001
4422   1FF9 29 A9 30      mov b, [bsign] ; bsign
4423   1FFC D7            push a
4424   1FFD 11            mov a, b
4425   1FFE 26 01 00      mov b, 1
4426   2001 B0            cmp a, b
4427   2002 0E            lodflgs
4428   2003 87 01         and al, %00000001 ; ==
4429   2005 22 00         mov ah, 0
4430   2007 27            mov b, a
4431   2008 E4            pop a
4432   2009 DB            push al
4433   200A C0 00 00      cmp b, 0
4434   200D 0E            lodflgs
4435   200E 8F 01         xor al, %00000001
4436   2010 EA            pop bl
4437   2011 A7 00         mov bh, 0
4438   2013 E4            pop a
4439   2014 D7            push a
4440   2015 11            mov a, b
4441   2016 AF 00 00      cmp a, 0
4442   2019 0E            lodflgs
4443   201A 8F 01         xor al, %00000001
4444   201C 29 B5 30      mov b, [agtb] ; agtb
4445   201F D7            push a
4446   2020 11            mov a, b
4447   2021 26 01 00      mov b, 1
4448   2024 B0            cmp a, b
4449   2025 0E            lodflgs
4450   2026 87 01         and al, %00000001 ; ==
4451   2028 22 00         mov ah, 0
4452   202A 27            mov b, a
4453   202B E4            pop a
4454   202C DB            push al
4455   202D C0 00 00      cmp b, 0
4456   2030 0E            lodflgs
4457   2031 8F 01         xor al, %00000001
4458   2033 EA            pop bl
4459   2034 A7 00         mov bh, 0
4460   2036 E4            pop a
4461   2037 C0 00 00      cmp b, 0
4462   203A C6 5A 20      je _if77_exit
4463   203D             _if77_true:
4464   203D 26 00 00      mov b, 0
4465   2040 FD 42 A7 30   mov [asign], b
4466   2044 26 00 00      mov b, 0
4467   2047 FD 42 A9 30   mov [bsign], b
4468   204B 26 00 00      mov b, 0
4469   204E FD 42 AB 30   mov [csign], b
4470   2052 07 4A 19      call protominus
4471   2055 F9            leave
4472   2056 09            ret
4473   2057 0A 5A 20      jmp _if77_exit
4474   205A             _if77_exit:
4475   205A             _if78_cond:
4476   205A 29 A7 30      mov b, [asign] ; asign
4477   205D D7            push a
4478   205E 11            mov a, b
4479   205F 26 00 00      mov b, 0
4480   2062 B0            cmp a, b
4481   2063 0E            lodflgs
4482   2064 87 01         and al, %00000001 ; ==
4483   2066 22 00         mov ah, 0
4484   2068 27            mov b, a
4485   2069 E4            pop a
4486   206A D7            push a
4487   206B 11            mov a, b
4488   206C AF 00 00      cmp a, 0
4489   206F 0E            lodflgs
4490   2070 8F 01         xor al, %00000001
4491   2072 29 A9 30      mov b, [bsign] ; bsign
4492   2075 D7            push a
4493   2076 11            mov a, b
4494   2077 26 01 00      mov b, 1
4495   207A B0            cmp a, b
4496   207B 0E            lodflgs
4497   207C 87 01         and al, %00000001 ; ==
4498   207E 22 00         mov ah, 0
4499   2080 27            mov b, a
4500   2081 E4            pop a
4501   2082 DB            push al
4502   2083 C0 00 00      cmp b, 0
4503   2086 0E            lodflgs
4504   2087 8F 01         xor al, %00000001
4505   2089 EA            pop bl
4506   208A A7 00         mov bh, 0
4507   208C E4            pop a
4508   208D D7            push a
4509   208E 11            mov a, b
4510   208F AF 00 00      cmp a, 0
4511   2092 0E            lodflgs
4512   2093 8F 01         xor al, %00000001
4513   2095 29 B7 30      mov b, [bgta] ; bgta
4514   2098 D7            push a
4515   2099 11            mov a, b
4516   209A 26 01 00      mov b, 1
4517   209D B0            cmp a, b
4518   209E 0E            lodflgs
4519   209F 87 01         and al, %00000001 ; ==
4520   20A1 22 00         mov ah, 0
4521   20A3 27            mov b, a
4522   20A4 E4            pop a
4523   20A5 DB            push al
4524   20A6 C0 00 00      cmp b, 0
4525   20A9 0E            lodflgs
4526   20AA 8F 01         xor al, %00000001
4527   20AC EA            pop bl
4528   20AD A7 00         mov bh, 0
4529   20AF E4            pop a
4530   20B0 C0 00 00      cmp b, 0
4531   20B3 C6 D6 20      je _if78_exit
4532   20B6             _if78_true:
4533   20B6 26 00 00      mov b, 0
4534   20B9 FD 42 A7 30   mov [asign], b
4535   20BD 26 00 00      mov b, 0
4536   20C0 FD 42 A9 30   mov [bsign], b
4537   20C4 26 01 00      mov b, 1
4538   20C7 FD 42 AB 30   mov [csign], b
4539   20CB 07 44 16      call swapab
4540   20CE 07 4A 19      call protominus
4541   20D1 F9            leave
4542   20D2 09            ret
4543   20D3 0A D6 20      jmp _if78_exit
4544   20D6             _if78_exit:
4545   20D6             _if79_cond:
4546   20D6 29 A7 30      mov b, [asign] ; asign
4547   20D9 D7            push a
4548   20DA 11            mov a, b
4549   20DB 26 01 00      mov b, 1
4550   20DE B0            cmp a, b
4551   20DF 0E            lodflgs
4552   20E0 87 01         and al, %00000001 ; ==
4553   20E2 22 00         mov ah, 0
4554   20E4 27            mov b, a
4555   20E5 E4            pop a
4556   20E6 D7            push a
4557   20E7 11            mov a, b
4558   20E8 AF 00 00      cmp a, 0
4559   20EB 0E            lodflgs
4560   20EC 8F 01         xor al, %00000001
4561   20EE 29 A9 30      mov b, [bsign] ; bsign
4562   20F1 D7            push a
4563   20F2 11            mov a, b
4564   20F3 26 00 00      mov b, 0
4565   20F6 B0            cmp a, b
4566   20F7 0E            lodflgs
4567   20F8 87 01         and al, %00000001 ; ==
4568   20FA 22 00         mov ah, 0
4569   20FC 27            mov b, a
4570   20FD E4            pop a
4571   20FE DB            push al
4572   20FF C0 00 00      cmp b, 0
4573   2102 0E            lodflgs
4574   2103 8F 01         xor al, %00000001
4575   2105 EA            pop bl
4576   2106 A7 00         mov bh, 0
4577   2108 E4            pop a
4578   2109 D7            push a
4579   210A 11            mov a, b
4580   210B AF 00 00      cmp a, 0
4581   210E 0E            lodflgs
4582   210F 8F 01         xor al, %00000001
4583   2111 29 B5 30      mov b, [agtb] ; agtb
4584   2114 D7            push a
4585   2115 11            mov a, b
4586   2116 26 01 00      mov b, 1
4587   2119 B0            cmp a, b
4588   211A 0E            lodflgs
4589   211B 87 01         and al, %00000001 ; ==
4590   211D 22 00         mov ah, 0
4591   211F 27            mov b, a
4592   2120 E4            pop a
4593   2121 DB            push al
4594   2122 C0 00 00      cmp b, 0
4595   2125 0E            lodflgs
4596   2126 8F 01         xor al, %00000001
4597   2128 EA            pop bl
4598   2129 A7 00         mov bh, 0
4599   212B E4            pop a
4600   212C C0 00 00      cmp b, 0
4601   212F C6 52 21      je _if79_exit
4602   2132             _if79_true:
4603   2132 26 01 00      mov b, 1
4604   2135 FD 42 AB 30   mov [csign], b
4605   2139 07 44 16      call swapab
4606   213C 26 00 00      mov b, 0
4607   213F FD 42 A7 30   mov [asign], b
4608   2143 26 00 00      mov b, 0
4609   2146 FD 42 A9 30   mov [bsign], b
4610   214A 07 6A 1A      call pminus
4611   214D F9            leave
4612   214E 09            ret
4613   214F 0A 52 21      jmp _if79_exit
4614   2152             _if79_exit:
4615   2152             _if80_cond:
4616   2152 29 A7 30      mov b, [asign] ; asign
4617   2155 D7            push a
4618   2156 11            mov a, b
4619   2157 26 01 00      mov b, 1
4620   215A B0            cmp a, b
4621   215B 0E            lodflgs
4622   215C 87 01         and al, %00000001 ; ==
4623   215E 22 00         mov ah, 0
4624   2160 27            mov b, a
4625   2161 E4            pop a
4626   2162 D7            push a
4627   2163 11            mov a, b
4628   2164 AF 00 00      cmp a, 0
4629   2167 0E            lodflgs
4630   2168 8F 01         xor al, %00000001
4631   216A 29 A9 30      mov b, [bsign] ; bsign
4632   216D D7            push a
4633   216E 11            mov a, b
4634   216F 26 00 00      mov b, 0
4635   2172 B0            cmp a, b
4636   2173 0E            lodflgs
4637   2174 87 01         and al, %00000001 ; ==
4638   2176 22 00         mov ah, 0
4639   2178 27            mov b, a
4640   2179 E4            pop a
4641   217A DB            push al
4642   217B C0 00 00      cmp b, 0
4643   217E 0E            lodflgs
4644   217F 8F 01         xor al, %00000001
4645   2181 EA            pop bl
4646   2182 A7 00         mov bh, 0
4647   2184 E4            pop a
4648   2185 D7            push a
4649   2186 11            mov a, b
4650   2187 AF 00 00      cmp a, 0
4651   218A 0E            lodflgs
4652   218B 8F 01         xor al, %00000001
4653   218D 29 B7 30      mov b, [bgta] ; bgta
4654   2190 D7            push a
4655   2191 11            mov a, b
4656   2192 26 01 00      mov b, 1
4657   2195 B0            cmp a, b
4658   2196 0E            lodflgs
4659   2197 87 01         and al, %00000001 ; ==
4660   2199 22 00         mov ah, 0
4661   219B 27            mov b, a
4662   219C E4            pop a
4663   219D DB            push al
4664   219E C0 00 00      cmp b, 0
4665   21A1 0E            lodflgs
4666   21A2 8F 01         xor al, %00000001
4667   21A4 EA            pop bl
4668   21A5 A7 00         mov bh, 0
4669   21A7 E4            pop a
4670   21A8 C0 00 00      cmp b, 0
4671   21AB C6 CE 21      je _if80_exit
4672   21AE             _if80_true:
4673   21AE 26 00 00      mov b, 0
4674   21B1 FD 42 A7 30   mov [asign], b
4675   21B5 26 00 00      mov b, 0
4676   21B8 FD 42 A9 30   mov [bsign], b
4677   21BC 26 00 00      mov b, 0
4678   21BF FD 42 AB 30   mov [csign], b
4679   21C3 07 44 16      call swapab
4680   21C6 07 4A 19      call protominus
4681   21C9 F9            leave
4682   21CA 09            ret
4683   21CB 0A CE 21      jmp _if80_exit
4684   21CE             _if80_exit:
4685   21CE F9            leave
4686   21CF 09            ret
4687   21D0             
4688   21D0             plus:
4689   21D0 D2            push bp
4690   21D1 9B            mov bp, sp
4691   21D2 07 D6 13      call fixsignin
4692   21D5 07 7E 1D      call pplus
4693   21D8 07 46 15      call fixcsizezero
4694   21DB 07 F7 14      call fixsignout
4695   21DE F9            leave
4696   21DF 09            ret
4697   21E0             
4698   21E0             normmulres:
4699   21E0 D2            push bp
4700   21E1 9B            mov bp, sp
4701   21E2             _if81_cond:
4702   21E2 29 8B 30      mov b, [mulres]
4703   21E5 D7            push a
4704   21E6 74            mov d, b
4705   21E7 DA            push d
4706   21E8 26 17 00      mov b, 23
4707   21EB E7            pop d
4708   21EC 10 02 00      mov a, 2
4709   21EF AC            mul a, b
4710   21F0 5A            add d, b
4711   21F1 2A            mov b, [d]
4712   21F2 E4            pop a
4713   21F3 D7            push a
4714   21F4 11            mov a, b
4715   21F5 26 63 00      mov b, 99
4716   21F8 B0            cmp a, b
4717   21F9 0E            lodflgs
4718   21FA 87 03         and al, %00000011
4719   21FC B9 00         cmp al, 0
4720   21FE 0E            lodflgs
4721   21FF 22 00         mov ah, 0
4722   2201 27            mov b, a
4723   2202 E4            pop a
4724   2203 C0 00 00      cmp b, 0
4725   2206 C6 5F 22      je _if81_exit
4726   2209             _if81_true:
4727   2209 29 8B 30      mov b, [mulres]
4728   220C D7            push a
4729   220D 74            mov d, b
4730   220E DA            push d
4731   220F 26 17 00      mov b, 23
4732   2212 E7            pop d
4733   2213 10 02 00      mov a, 2
4734   2216 AC            mul a, b
4735   2217 5A            add d, b
4736   2218 2A            mov b, [d]
4737   2219 E4            pop a
4738   221A D7            push a
4739   221B 11            mov a, b
4740   221C 26 64 00      mov b, 100
4741   221F AE            div a, b
4742   2220 FD 78         mov g, a
4743   2222 11            mov a, b
4744   2223 FD 27         mov b, g
4745   2225 E4            pop a
4746   2226 FD 42 CB 30   mov [toolarge], b
4747   222A 29 8B 30      mov b, [mulres]
4748   222D 74            mov d, b
4749   222E DA            push d
4750   222F 26 17 00      mov b, 23
4751   2232 E7            pop d
4752   2233 10 02 00      mov a, 2
4753   2236 AC            mul a, b
4754   2237 5A            add d, b
4755   2238 DA            push d
4756   2239 29 8B 30      mov b, [mulres]
4757   223C D7            push a
4758   223D 74            mov d, b
4759   223E DA            push d
4760   223F 26 17 00      mov b, 23
4761   2242 E7            pop d
4762   2243 10 02 00      mov a, 2
4763   2246 AC            mul a, b
4764   2247 5A            add d, b
4765   2248 2A            mov b, [d]
4766   2249 E4            pop a
4767   224A D7            push a
4768   224B 11            mov a, b
4769   224C 29 CB 30      mov b, [toolarge] ; toolarge
4770   224F D7            push a
4771   2250 11            mov a, b
4772   2251 26 64 00      mov b, 100
4773   2254 AC            mul a, b
4774   2255 E4            pop a
4775   2256 60            sub a, b
4776   2257 27            mov b, a
4777   2258 E4            pop a
4778   2259 E7            pop d
4779   225A 11            mov a, b
4780   225B 43            mov [d], a
4781   225C 0A 5F 22      jmp _if81_exit
4782   225F             _if81_exit:
4783   225F 26 00 00      mov b, 0
4784   2262 FD 42 CD 30   mov [normal], b
4785   2266             _while82_cond:
4786   2266 29 CD 30      mov b, [normal] ; normal
4787   2269 D7            push a
4788   226A 11            mov a, b
4789   226B 26 00 00      mov b, 0
4790   226E B0            cmp a, b
4791   226F 0E            lodflgs
4792   2270 87 01         and al, %00000001 ; ==
4793   2272 22 00         mov ah, 0
4794   2274 27            mov b, a
4795   2275 E4            pop a
4796   2276 C0 00 00      cmp b, 0
4797   2279 C6 81 23      je _while82_exit
4798   227C             _while82_block:
4799   227C 26 01 00      mov b, 1
4800   227F FD 42 CD 30   mov [normal], b
4801   2283             _for83_init:
4802   2283 26 00 00      mov b, 0
4803   2286 FD 42 AD 30   mov [protopos], b
4804   228A             _for83_cond:
4805   228A 29 AD 30      mov b, [protopos] ; protopos
4806   228D D7            push a
4807   228E 11            mov a, b
4808   228F 26 17 00      mov b, 23
4809   2292 B0            cmp a, b
4810   2293 0E            lodflgs
4811   2294 87 02         and al, %00000010 ; <
4812   2296 FD 9C         shr al
4813   2298 22 00         mov ah, 0
4814   229A 27            mov b, a
4815   229B E4            pop a
4816   229C C0 00 00      cmp b, 0
4817   229F C6 7E 23      je _for83_exit
4818   22A2             _for83_block:
4819   22A2 26 16 00      mov b, 22
4820   22A5 D7            push a
4821   22A6 11            mov a, b
4822   22A7 29 AD 30      mov b, [protopos] ; protopos
4823   22AA 60            sub a, b
4824   22AB 27            mov b, a
4825   22AC E4            pop a
4826   22AD FD 42 AF 30   mov [pos], b
4827   22B1             _if84_cond:
4828   22B1 29 8B 30      mov b, [mulres]
4829   22B4 D7            push a
4830   22B5 74            mov d, b
4831   22B6 DA            push d
4832   22B7 29 AF 30      mov b, [pos] ; pos
4833   22BA E7            pop d
4834   22BB 10 02 00      mov a, 2
4835   22BE AC            mul a, b
4836   22BF 5A            add d, b
4837   22C0 2A            mov b, [d]
4838   22C1 E4            pop a
4839   22C2 D7            push a
4840   22C3 11            mov a, b
4841   22C4 26 63 00      mov b, 99
4842   22C7 B0            cmp a, b
4843   22C8 0E            lodflgs
4844   22C9 87 03         and al, %00000011
4845   22CB B9 00         cmp al, 0
4846   22CD 0E            lodflgs
4847   22CE 22 00         mov ah, 0
4848   22D0 27            mov b, a
4849   22D1 E4            pop a
4850   22D2 C0 00 00      cmp b, 0
4851   22D5 C6 70 23      je _if84_exit
4852   22D8             _if84_true:
4853   22D8 26 00 00      mov b, 0
4854   22DB FD 42 CD 30   mov [normal], b
4855   22DF 29 8B 30      mov b, [mulres]
4856   22E2 D7            push a
4857   22E3 74            mov d, b
4858   22E4 DA            push d
4859   22E5 29 AF 30      mov b, [pos] ; pos
4860   22E8 E7            pop d
4861   22E9 10 02 00      mov a, 2
4862   22EC AC            mul a, b
4863   22ED 5A            add d, b
4864   22EE 2A            mov b, [d]
4865   22EF E4            pop a
4866   22F0 D7            push a
4867   22F1 11            mov a, b
4868   22F2 26 64 00      mov b, 100
4869   22F5 AE            div a, b
4870   22F6 FD 78         mov g, a
4871   22F8 11            mov a, b
4872   22F9 FD 27         mov b, g
4873   22FB E4            pop a
4874   22FC FD 42 CB 30   mov [toolarge], b
4875   2300 29 8B 30      mov b, [mulres]
4876   2303 74            mov d, b
4877   2304 DA            push d
4878   2305 29 AF 30      mov b, [pos] ; pos
4879   2308 E7            pop d
4880   2309 10 02 00      mov a, 2
4881   230C AC            mul a, b
4882   230D 5A            add d, b
4883   230E DA            push d
4884   230F 29 8B 30      mov b, [mulres]
4885   2312 D7            push a
4886   2313 74            mov d, b
4887   2314 DA            push d
4888   2315 29 AF 30      mov b, [pos] ; pos
4889   2318 E7            pop d
4890   2319 10 02 00      mov a, 2
4891   231C AC            mul a, b
4892   231D 5A            add d, b
4893   231E 2A            mov b, [d]
4894   231F E4            pop a
4895   2320 D7            push a
4896   2321 11            mov a, b
4897   2322 29 CB 30      mov b, [toolarge] ; toolarge
4898   2325 D7            push a
4899   2326 11            mov a, b
4900   2327 26 64 00      mov b, 100
4901   232A AC            mul a, b
4902   232B E4            pop a
4903   232C 60            sub a, b
4904   232D 27            mov b, a
4905   232E E4            pop a
4906   232F E7            pop d
4907   2330 11            mov a, b
4908   2331 43            mov [d], a
4909   2332 29 8B 30      mov b, [mulres]
4910   2335 74            mov d, b
4911   2336 DA            push d
4912   2337 29 AF 30      mov b, [pos] ; pos
4913   233A D7            push a
4914   233B 11            mov a, b
4915   233C 26 01 00      mov b, 1
4916   233F 54            add a, b
4917   2340 27            mov b, a
4918   2341 E4            pop a
4919   2342 E7            pop d
4920   2343 10 02 00      mov a, 2
4921   2346 AC            mul a, b
4922   2347 5A            add d, b
4923   2348 DA            push d
4924   2349 29 8B 30      mov b, [mulres]
4925   234C D7            push a
4926   234D 74            mov d, b
4927   234E DA            push d
4928   234F 29 AF 30      mov b, [pos] ; pos
4929   2352 D7            push a
4930   2353 11            mov a, b
4931   2354 26 01 00      mov b, 1
4932   2357 54            add a, b
4933   2358 27            mov b, a
4934   2359 E4            pop a
4935   235A E7            pop d
4936   235B 10 02 00      mov a, 2
4937   235E AC            mul a, b
4938   235F 5A            add d, b
4939   2360 2A            mov b, [d]
4940   2361 E4            pop a
4941   2362 D7            push a
4942   2363 11            mov a, b
4943   2364 29 CB 30      mov b, [toolarge] ; toolarge
4944   2367 54            add a, b
4945   2368 27            mov b, a
4946   2369 E4            pop a
4947   236A E7            pop d
4948   236B 11            mov a, b
4949   236C 43            mov [d], a
4950   236D 0A 70 23      jmp _if84_exit
4951   2370             _if84_exit:
4952   2370             _for83_update:
4953   2370 29 AD 30      mov b, [protopos] ; protopos
4954   2373 11            mov a, b
4955   2374 FD 77         inc b
4956   2376 FD 42 AD 30   mov [protopos], b
4957   237A 27            mov b, a
4958   237B 0A 8A 22      jmp _for83_cond
4959   237E             _for83_exit:
4960   237E 0A 66 22      jmp _while82_cond
4961   2381             _while82_exit:
4962   2381             _if85_cond:
4963   2381 29 8B 30      mov b, [mulres]
4964   2384 D7            push a
4965   2385 74            mov d, b
4966   2386 DA            push d
4967   2387 26 17 00      mov b, 23
4968   238A E7            pop d
4969   238B 10 02 00      mov a, 2
4970   238E AC            mul a, b
4971   238F 5A            add d, b
4972   2390 2A            mov b, [d]
4973   2391 E4            pop a
4974   2392 D7            push a
4975   2393 11            mov a, b
4976   2394 26 63 00      mov b, 99
4977   2397 B0            cmp a, b
4978   2398 0E            lodflgs
4979   2399 87 03         and al, %00000011
4980   239B B9 00         cmp al, 0
4981   239D 0E            lodflgs
4982   239E 22 00         mov ah, 0
4983   23A0 27            mov b, a
4984   23A1 E4            pop a
4985   23A2 C0 00 00      cmp b, 0
4986   23A5 C6 FE 23      je _if85_exit
4987   23A8             _if85_true:
4988   23A8 29 8B 30      mov b, [mulres]
4989   23AB D7            push a
4990   23AC 74            mov d, b
4991   23AD DA            push d
4992   23AE 26 17 00      mov b, 23
4993   23B1 E7            pop d
4994   23B2 10 02 00      mov a, 2
4995   23B5 AC            mul a, b
4996   23B6 5A            add d, b
4997   23B7 2A            mov b, [d]
4998   23B8 E4            pop a
4999   23B9 D7            push a
5000   23BA 11            mov a, b
5001   23BB 26 64 00      mov b, 100
5002   23BE AE            div a, b
5003   23BF FD 78         mov g, a
5004   23C1 11            mov a, b
5005   23C2 FD 27         mov b, g
5006   23C4 E4            pop a
5007   23C5 FD 42 CB 30   mov [toolarge], b
5008   23C9 29 8B 30      mov b, [mulres]
5009   23CC 74            mov d, b
5010   23CD DA            push d
5011   23CE 26 17 00      mov b, 23
5012   23D1 E7            pop d
5013   23D2 10 02 00      mov a, 2
5014   23D5 AC            mul a, b
5015   23D6 5A            add d, b
5016   23D7 DA            push d
5017   23D8 29 8B 30      mov b, [mulres]
5018   23DB D7            push a
5019   23DC 74            mov d, b
5020   23DD DA            push d
5021   23DE 26 17 00      mov b, 23
5022   23E1 E7            pop d
5023   23E2 10 02 00      mov a, 2
5024   23E5 AC            mul a, b
5025   23E6 5A            add d, b
5026   23E7 2A            mov b, [d]
5027   23E8 E4            pop a
5028   23E9 D7            push a
5029   23EA 11            mov a, b
5030   23EB 29 CB 30      mov b, [toolarge] ; toolarge
5031   23EE D7            push a
5032   23EF 11            mov a, b
5033   23F0 26 64 00      mov b, 100
5034   23F3 AC            mul a, b
5035   23F4 E4            pop a
5036   23F5 60            sub a, b
5037   23F6 27            mov b, a
5038   23F7 E4            pop a
5039   23F8 E7            pop d
5040   23F9 11            mov a, b
5041   23FA 43            mov [d], a
5042   23FB 0A FE 23      jmp _if85_exit
5043   23FE             _if85_exit:
5044   23FE F9            leave
5045   23FF 09            ret
5046   2400             
5047   2400             prototimes:
5048   2400 D2            push bp
5049   2401 9B            mov bp, sp
5050   2402             _for86_init:
5051   2402 26 00 00      mov b, 0
5052   2405 FD 42 DF 30   mov [divi], b
5053   2409             _for86_cond:
5054   2409 29 DF 30      mov b, [divi] ; divi
5055   240C D7            push a
5056   240D 11            mov a, b
5057   240E 26 0C 00      mov b, 12
5058   2411 B0            cmp a, b
5059   2412 0E            lodflgs
5060   2413 87 02         and al, %00000010 ; <
5061   2415 FD 9C         shr al
5062   2417 22 00         mov ah, 0
5063   2419 27            mov b, a
5064   241A E4            pop a
5065   241B C0 00 00      cmp b, 0
5066   241E C6 44 24      je _for86_exit
5067   2421             _for86_block:
5068   2421 29 59 30      mov b, [cnarr]
5069   2424 74            mov d, b
5070   2425 DA            push d
5071   2426 29 DF 30      mov b, [divi] ; divi
5072   2429 E7            pop d
5073   242A 10 02 00      mov a, 2
5074   242D AC            mul a, b
5075   242E 5A            add d, b
5076   242F DA            push d
5077   2430 26 00 00      mov b, 0
5078   2433 E7            pop d
5079   2434 11            mov a, b
5080   2435 43            mov [d], a
5081   2436             _for86_update:
5082   2436 29 DF 30      mov b, [divi] ; divi
5083   2439 11            mov a, b
5084   243A FD 77         inc b
5085   243C FD 42 DF 30   mov [divi], b
5086   2440 27            mov b, a
5087   2441 0A 09 24      jmp _for86_cond
5088   2444             _for86_exit:
5089   2444             _for87_init:
5090   2444 26 00 00      mov b, 0
5091   2447 FD 42 DF 30   mov [divi], b
5092   244B             _for87_cond:
5093   244B 29 DF 30      mov b, [divi] ; divi
5094   244E D7            push a
5095   244F 11            mov a, b
5096   2450 26 18 00      mov b, 24
5097   2453 B0            cmp a, b
5098   2454 0E            lodflgs
5099   2455 87 02         and al, %00000010 ; <
5100   2457 FD 9C         shr al
5101   2459 22 00         mov ah, 0
5102   245B 27            mov b, a
5103   245C E4            pop a
5104   245D C0 00 00      cmp b, 0
5105   2460 C6 86 24      je _for87_exit
5106   2463             _for87_block:
5107   2463 29 8B 30      mov b, [mulres]
5108   2466 74            mov d, b
5109   2467 DA            push d
5110   2468 29 DF 30      mov b, [divi] ; divi
5111   246B E7            pop d
5112   246C 10 02 00      mov a, 2
5113   246F AC            mul a, b
5114   2470 5A            add d, b
5115   2471 DA            push d
5116   2472 26 00 00      mov b, 0
5117   2475 E7            pop d
5118   2476 11            mov a, b
5119   2477 43            mov [d], a
5120   2478             _for87_update:
5121   2478 29 DF 30      mov b, [divi] ; divi
5122   247B 11            mov a, b
5123   247C FD 77         inc b
5124   247E FD 42 DF 30   mov [divi], b
5125   2482 27            mov b, a
5126   2483 0A 4B 24      jmp _for87_cond
5127   2486             _for87_exit:
5128   2486             _for88_init:
5129   2486 26 00 00      mov b, 0
5130   2489 FD 42 CF 30   mov [mulpos1], b
5131   248D             _for88_cond:
5132   248D 29 CF 30      mov b, [mulpos1] ; mulpos1
5133   2490 D7            push a
5134   2491 11            mov a, b
5135   2492 26 0C 00      mov b, 12
5136   2495 B0            cmp a, b
5137   2496 0E            lodflgs
5138   2497 87 02         and al, %00000010 ; <
5139   2499 FD 9C         shr al
5140   249B 22 00         mov ah, 0
5141   249D 27            mov b, a
5142   249E E4            pop a
5143   249F C0 00 00      cmp b, 0
5144   24A2 C6 41 25      je _for88_exit
5145   24A5             _for88_block:
5146   24A5             _for89_init:
5147   24A5 26 00 00      mov b, 0
5148   24A8 FD 42 D1 30   mov [mulpos2], b
5149   24AC             _for89_cond:
5150   24AC 29 D1 30      mov b, [mulpos2] ; mulpos2
5151   24AF D7            push a
5152   24B0 11            mov a, b
5153   24B1 26 0C 00      mov b, 12
5154   24B4 B0            cmp a, b
5155   24B5 0E            lodflgs
5156   24B6 87 02         and al, %00000010 ; <
5157   24B8 FD 9C         shr al
5158   24BA 22 00         mov ah, 0
5159   24BC 27            mov b, a
5160   24BD E4            pop a
5161   24BE C0 00 00      cmp b, 0
5162   24C1 C6 30 25      je _for89_exit
5163   24C4             _for89_block:
5164   24C4 29 8B 30      mov b, [mulres]
5165   24C7 74            mov d, b
5166   24C8 DA            push d
5167   24C9 29 CF 30      mov b, [mulpos1] ; mulpos1
5168   24CC D7            push a
5169   24CD 11            mov a, b
5170   24CE 29 D1 30      mov b, [mulpos2] ; mulpos2
5171   24D1 54            add a, b
5172   24D2 27            mov b, a
5173   24D3 E4            pop a
5174   24D4 E7            pop d
5175   24D5 10 02 00      mov a, 2
5176   24D8 AC            mul a, b
5177   24D9 5A            add d, b
5178   24DA DA            push d
5179   24DB 29 8B 30      mov b, [mulres]
5180   24DE D7            push a
5181   24DF 74            mov d, b
5182   24E0 DA            push d
5183   24E1 29 CF 30      mov b, [mulpos1] ; mulpos1
5184   24E4 D7            push a
5185   24E5 11            mov a, b
5186   24E6 29 D1 30      mov b, [mulpos2] ; mulpos2
5187   24E9 54            add a, b
5188   24EA 27            mov b, a
5189   24EB E4            pop a
5190   24EC E7            pop d
5191   24ED 10 02 00      mov a, 2
5192   24F0 AC            mul a, b
5193   24F1 5A            add d, b
5194   24F2 2A            mov b, [d]
5195   24F3 E4            pop a
5196   24F4 D7            push a
5197   24F5 11            mov a, b
5198   24F6 29 0B 30      mov b, [bnarr]
5199   24F9 D7            push a
5200   24FA 74            mov d, b
5201   24FB DA            push d
5202   24FC 29 D1 30      mov b, [mulpos2] ; mulpos2
5203   24FF E7            pop d
5204   2500 10 02 00      mov a, 2
5205   2503 AC            mul a, b
5206   2504 5A            add d, b
5207   2505 2A            mov b, [d]
5208   2506 E4            pop a
5209   2507 D7            push a
5210   2508 11            mov a, b
5211   2509 29 F1 2F      mov b, [anarr]
5212   250C D7            push a
5213   250D 74            mov d, b
5214   250E DA            push d
5215   250F 29 CF 30      mov b, [mulpos1] ; mulpos1
5216   2512 E7            pop d
5217   2513 10 02 00      mov a, 2
5218   2516 AC            mul a, b
5219   2517 5A            add d, b
5220   2518 2A            mov b, [d]
5221   2519 E4            pop a
5222   251A AC            mul a, b
5223   251B E4            pop a
5224   251C 54            add a, b
5225   251D 27            mov b, a
5226   251E E4            pop a
5227   251F E7            pop d
5228   2520 11            mov a, b
5229   2521 43            mov [d], a
5230   2522             _for89_update:
5231   2522 29 D1 30      mov b, [mulpos2] ; mulpos2
5232   2525 11            mov a, b
5233   2526 FD 77         inc b
5234   2528 FD 42 D1 30   mov [mulpos2], b
5235   252C 27            mov b, a
5236   252D 0A AC 24      jmp _for89_cond
5237   2530             _for89_exit:
5238   2530 07 E0 21      call normmulres
5239   2533             _for88_update:
5240   2533 29 CF 30      mov b, [mulpos1] ; mulpos1
5241   2536 11            mov a, b
5242   2537 FD 77         inc b
5243   2539 FD 42 CF 30   mov [mulpos1], b
5244   253D 27            mov b, a
5245   253E 0A 8D 24      jmp _for88_cond
5246   2541             _for88_exit:
5247   2541 F9            leave
5248   2542 09            ret
5249   2543             
5250   2543             protodividedby:
5251   2543 D2            push bp
5252   2544 9B            mov bp, sp
5253   2545 26 00 00      mov b, 0
5254   2548 FD 42 D5 30   mov [brshift], b
5255   254C 26 00 00      mov b, 0
5256   254F FD 42 D7 30   mov [blshift], b
5257   2553 26 00 00      mov b, 0
5258   2556 FD 42 D9 30   mov [alshift], b
5259   255A 26 00 00      mov b, 0
5260   255D FD 42 DB 30   mov [divcounter], b
5261   2561 26 00 00      mov b, 0
5262   2564 FD 42 DD 30   mov [segmentcounter], b
5263   2568 26 01 00      mov b, 1
5264   256B FD 42 E1 30   mov [allzeroes], b
5265   256F             _for90_init:
5266   256F 26 00 00      mov b, 0
5267   2572 FD 42 DF 30   mov [divi], b
5268   2576             _for90_cond:
5269   2576 29 DF 30      mov b, [divi] ; divi
5270   2579 D7            push a
5271   257A 11            mov a, b
5272   257B 26 0C 00      mov b, 12
5273   257E B0            cmp a, b
5274   257F 0E            lodflgs
5275   2580 87 02         and al, %00000010 ; <
5276   2582 FD 9C         shr al
5277   2584 22 00         mov ah, 0
5278   2586 27            mov b, a
5279   2587 E4            pop a
5280   2588 C0 00 00      cmp b, 0
5281   258B C6 F6 25      je _for90_exit
5282   258E             _for90_block:
5283   258E 29 59 30      mov b, [cnarr]
5284   2591 74            mov d, b
5285   2592 DA            push d
5286   2593 29 DF 30      mov b, [divi] ; divi
5287   2596 E7            pop d
5288   2597 10 02 00      mov a, 2
5289   259A AC            mul a, b
5290   259B 5A            add d, b
5291   259C DA            push d
5292   259D 26 00 00      mov b, 0
5293   25A0 E7            pop d
5294   25A1 11            mov a, b
5295   25A2 43            mov [d], a
5296   25A3 29 A5 30      mov b, [divres]
5297   25A6 74            mov d, b
5298   25A7 DA            push d
5299   25A8 29 DF 30      mov b, [divi] ; divi
5300   25AB E7            pop d
5301   25AC 10 02 00      mov a, 2
5302   25AF AC            mul a, b
5303   25B0 5A            add d, b
5304   25B1 DA            push d
5305   25B2 26 00 00      mov b, 0
5306   25B5 E7            pop d
5307   25B6 11            mov a, b
5308   25B7 43            mov [d], a
5309   25B8             _if91_cond:
5310   25B8 29 0B 30      mov b, [bnarr]
5311   25BB D7            push a
5312   25BC 74            mov d, b
5313   25BD DA            push d
5314   25BE 29 DF 30      mov b, [divi] ; divi
5315   25C1 E7            pop d
5316   25C2 10 02 00      mov a, 2
5317   25C5 AC            mul a, b
5318   25C6 5A            add d, b
5319   25C7 2A            mov b, [d]
5320   25C8 E4            pop a
5321   25C9 D7            push a
5322   25CA 11            mov a, b
5323   25CB 26 00 00      mov b, 0
5324   25CE B0            cmp a, b
5325   25CF 0E            lodflgs
5326   25D0 87 01         and al, %00000001
5327   25D2 8F 01         xor al, %00000001 ; !=
5328   25D4 22 00         mov ah, 0
5329   25D6 27            mov b, a
5330   25D7 E4            pop a
5331   25D8 C0 00 00      cmp b, 0
5332   25DB C6 E8 25      je _if91_exit
5333   25DE             _if91_true:
5334   25DE 26 00 00      mov b, 0
5335   25E1 FD 42 E1 30   mov [allzeroes], b
5336   25E5 0A E8 25      jmp _if91_exit
5337   25E8             _if91_exit:
5338   25E8             _for90_update:
5339   25E8 29 DF 30      mov b, [divi] ; divi
5340   25EB 11            mov a, b
5341   25EC FD 77         inc b
5342   25EE FD 42 DF 30   mov [divi], b
5343   25F2 27            mov b, a
5344   25F3 0A 76 25      jmp _for90_cond
5345   25F6             _for90_exit:
5346   25F6             _if92_cond:
5347   25F6 29 E1 30      mov b, [allzeroes] ; allzeroes
5348   25F9 D7            push a
5349   25FA 11            mov a, b
5350   25FB 26 01 00      mov b, 1
5351   25FE B0            cmp a, b
5352   25FF 0E            lodflgs
5353   2600 87 01         and al, %00000001 ; ==
5354   2602 22 00         mov ah, 0
5355   2604 27            mov b, a
5356   2605 E4            pop a
5357   2606 C0 00 00      cmp b, 0
5358   2609 C6 11 26      je _if92_exit
5359   260C             _if92_true:
5360   260C F9            leave
5361   260D 09            ret
5362   260E 0A 11 26      jmp _if92_exit
5363   2611             _if92_exit:
5364   2611             _if93_cond:
5365   2611 29 0B 30      mov b, [bnarr]
5366   2614 D7            push a
5367   2615 74            mov d, b
5368   2616 DA            push d
5369   2617 26 0B 00      mov b, 11
5370   261A E7            pop d
5371   261B 10 02 00      mov a, 2
5372   261E AC            mul a, b
5373   261F 5A            add d, b
5374   2620 2A            mov b, [d]
5375   2621 E4            pop a
5376   2622 D7            push a
5377   2623 11            mov a, b
5378   2624 26 00 00      mov b, 0
5379   2627 B0            cmp a, b
5380   2628 0E            lodflgs
5381   2629 87 01         and al, %00000001
5382   262B 8F 01         xor al, %00000001 ; !=
5383   262D 22 00         mov ah, 0
5384   262F 27            mov b, a
5385   2630 E4            pop a
5386   2631 C0 00 00      cmp b, 0
5387   2634 C6 AE 26      je _if93_exit
5388   2637             _if93_true:
5389   2637             _for94_init:
5390   2637 26 00 00      mov b, 0
5391   263A FD 42 DF 30   mov [divi], b
5392   263E             _for94_cond:
5393   263E 29 DF 30      mov b, [divi] ; divi
5394   2641 D7            push a
5395   2642 11            mov a, b
5396   2643 26 0B 00      mov b, 11
5397   2646 B0            cmp a, b
5398   2647 0E            lodflgs
5399   2648 87 02         and al, %00000010 ; <
5400   264A FD 9C         shr al
5401   264C 22 00         mov ah, 0
5402   264E 27            mov b, a
5403   264F E4            pop a
5404   2650 C0 00 00      cmp b, 0
5405   2653 C6 8F 26      je _for94_exit
5406   2656             _for94_block:
5407   2656 29 0B 30      mov b, [bnarr]
5408   2659 74            mov d, b
5409   265A DA            push d
5410   265B 29 DF 30      mov b, [divi] ; divi
5411   265E E7            pop d
5412   265F 10 02 00      mov a, 2
5413   2662 AC            mul a, b
5414   2663 5A            add d, b
5415   2664 DA            push d
5416   2665 29 0B 30      mov b, [bnarr]
5417   2668 D7            push a
5418   2669 74            mov d, b
5419   266A DA            push d
5420   266B 29 DF 30      mov b, [divi] ; divi
5421   266E D7            push a
5422   266F 11            mov a, b
5423   2670 26 01 00      mov b, 1
5424   2673 54            add a, b
5425   2674 27            mov b, a
5426   2675 E4            pop a
5427   2676 E7            pop d
5428   2677 10 02 00      mov a, 2
5429   267A AC            mul a, b
5430   267B 5A            add d, b
5431   267C 2A            mov b, [d]
5432   267D E4            pop a
5433   267E E7            pop d
5434   267F 11            mov a, b
5435   2680 43            mov [d], a
5436   2681             _for94_update:
5437   2681 29 DF 30      mov b, [divi] ; divi
5438   2684 11            mov a, b
5439   2685 FD 77         inc b
5440   2687 FD 42 DF 30   mov [divi], b
5441   268B 27            mov b, a
5442   268C 0A 3E 26      jmp _for94_cond
5443   268F             _for94_exit:
5444   268F 26 01 00      mov b, 1
5445   2692 FD 42 D5 30   mov [brshift], b
5446   2696 29 0B 30      mov b, [bnarr]
5447   2699 74            mov d, b
5448   269A DA            push d
5449   269B 26 0B 00      mov b, 11
5450   269E E7            pop d
5451   269F 10 02 00      mov a, 2
5452   26A2 AC            mul a, b
5453   26A3 5A            add d, b
5454   26A4 DA            push d
5455   26A5 26 00 00      mov b, 0
5456   26A8 E7            pop d
5457   26A9 11            mov a, b
5458   26AA 43            mov [d], a
5459   26AB 0A AE 26      jmp _if93_exit
5460   26AE             _if93_exit:
5461   26AE             _while95_cond:
5462   26AE 29 0B 30      mov b, [bnarr]
5463   26B1 D7            push a
5464   26B2 74            mov d, b
5465   26B3 DA            push d
5466   26B4 26 0A 00      mov b, 10
5467   26B7 E7            pop d
5468   26B8 10 02 00      mov a, 2
5469   26BB AC            mul a, b
5470   26BC 5A            add d, b
5471   26BD 2A            mov b, [d]
5472   26BE E4            pop a
5473   26BF D7            push a
5474   26C0 11            mov a, b
5475   26C1 26 00 00      mov b, 0
5476   26C4 B0            cmp a, b
5477   26C5 0E            lodflgs
5478   26C6 87 01         and al, %00000001 ; ==
5479   26C8 22 00         mov ah, 0
5480   26CA 27            mov b, a
5481   26CB E4            pop a
5482   26CC C0 00 00      cmp b, 0
5483   26CF C6 5D 27      je _while95_exit
5484   26D2             _while95_block:
5485   26D2             _for96_init:
5486   26D2 26 00 00      mov b, 0
5487   26D5 FD 42 DF 30   mov [divi], b
5488   26D9             _for96_cond:
5489   26D9 29 DF 30      mov b, [divi] ; divi
5490   26DC D7            push a
5491   26DD 11            mov a, b
5492   26DE 26 0A 00      mov b, 10
5493   26E1 B0            cmp a, b
5494   26E2 0E            lodflgs
5495   26E3 87 02         and al, %00000010 ; <
5496   26E5 FD 9C         shr al
5497   26E7 22 00         mov ah, 0
5498   26E9 27            mov b, a
5499   26EA E4            pop a
5500   26EB C0 00 00      cmp b, 0
5501   26EE C6 3A 27      je _for96_exit
5502   26F1             _for96_block:
5503   26F1 29 0B 30      mov b, [bnarr]
5504   26F4 74            mov d, b
5505   26F5 DA            push d
5506   26F6 26 0A 00      mov b, 10
5507   26F9 D7            push a
5508   26FA 11            mov a, b
5509   26FB 29 DF 30      mov b, [divi] ; divi
5510   26FE 60            sub a, b
5511   26FF 27            mov b, a
5512   2700 E4            pop a
5513   2701 E7            pop d
5514   2702 10 02 00      mov a, 2
5515   2705 AC            mul a, b
5516   2706 5A            add d, b
5517   2707 DA            push d
5518   2708 29 0B 30      mov b, [bnarr]
5519   270B D7            push a
5520   270C 74            mov d, b
5521   270D DA            push d
5522   270E 26 0A 00      mov b, 10
5523   2711 D7            push a
5524   2712 11            mov a, b
5525   2713 29 DF 30      mov b, [divi] ; divi
5526   2716 60            sub a, b
5527   2717 27            mov b, a
5528   2718 E4            pop a
5529   2719 D7            push a
5530   271A 11            mov a, b
5531   271B 26 01 00      mov b, 1
5532   271E 60            sub a, b
5533   271F 27            mov b, a
5534   2720 E4            pop a
5535   2721 E7            pop d
5536   2722 10 02 00      mov a, 2
5537   2725 AC            mul a, b
5538   2726 5A            add d, b
5539   2727 2A            mov b, [d]
5540   2728 E4            pop a
5541   2729 E7            pop d
5542   272A 11            mov a, b
5543   272B 43            mov [d], a
5544   272C             _for96_update:
5545   272C 29 DF 30      mov b, [divi] ; divi
5546   272F 11            mov a, b
5547   2730 FD 77         inc b
5548   2732 FD 42 DF 30   mov [divi], b
5549   2736 27            mov b, a
5550   2737 0A D9 26      jmp _for96_cond
5551   273A             _for96_exit:
5552   273A 29 0B 30      mov b, [bnarr]
5553   273D 74            mov d, b
5554   273E DA            push d
5555   273F 26 00 00      mov b, 0
5556   2742 E7            pop d
5557   2743 10 02 00      mov a, 2
5558   2746 AC            mul a, b
5559   2747 5A            add d, b
5560   2748 DA            push d
5561   2749 26 00 00      mov b, 0
5562   274C E7            pop d
5563   274D 11            mov a, b
5564   274E 43            mov [d], a
5565   274F 29 D7 30      mov b, [blshift] ; blshift
5566   2752 11            mov a, b
5567   2753 FD 77         inc b
5568   2755 FD 42 D7 30   mov [blshift], b
5569   2759 27            mov b, a
5570   275A 0A AE 26      jmp _while95_cond
5571   275D             _while95_exit:
5572   275D 26 01 00      mov b, 1
5573   2760 FD 42 E1 30   mov [allzeroes], b
5574   2764             _for97_init:
5575   2764 26 00 00      mov b, 0
5576   2767 FD 42 DF 30   mov [divi], b
5577   276B             _for97_cond:
5578   276B 29 DF 30      mov b, [divi] ; divi
5579   276E D7            push a
5580   276F 11            mov a, b
5581   2770 26 0C 00      mov b, 12
5582   2773 B0            cmp a, b
5583   2774 0E            lodflgs
5584   2775 87 02         and al, %00000010 ; <
5585   2777 FD 9C         shr al
5586   2779 22 00         mov ah, 0
5587   277B 27            mov b, a
5588   277C E4            pop a
5589   277D C0 00 00      cmp b, 0
5590   2780 C6 C1 27      je _for97_exit
5591   2783             _for97_block:
5592   2783             _if98_cond:
5593   2783 29 F1 2F      mov b, [anarr]
5594   2786 D7            push a
5595   2787 74            mov d, b
5596   2788 DA            push d
5597   2789 29 DF 30      mov b, [divi] ; divi
5598   278C E7            pop d
5599   278D 10 02 00      mov a, 2
5600   2790 AC            mul a, b
5601   2791 5A            add d, b
5602   2792 2A            mov b, [d]
5603   2793 E4            pop a
5604   2794 D7            push a
5605   2795 11            mov a, b
5606   2796 26 00 00      mov b, 0
5607   2799 B0            cmp a, b
5608   279A 0E            lodflgs
5609   279B 87 01         and al, %00000001
5610   279D 8F 01         xor al, %00000001 ; !=
5611   279F 22 00         mov ah, 0
5612   27A1 27            mov b, a
5613   27A2 E4            pop a
5614   27A3 C0 00 00      cmp b, 0
5615   27A6 C6 B3 27      je _if98_exit
5616   27A9             _if98_true:
5617   27A9 26 00 00      mov b, 0
5618   27AC FD 42 E1 30   mov [allzeroes], b
5619   27B0 0A B3 27      jmp _if98_exit
5620   27B3             _if98_exit:
5621   27B3             _for97_update:
5622   27B3 29 DF 30      mov b, [divi] ; divi
5623   27B6 11            mov a, b
5624   27B7 FD 77         inc b
5625   27B9 FD 42 DF 30   mov [divi], b
5626   27BD 27            mov b, a
5627   27BE 0A 6B 27      jmp _for97_cond
5628   27C1             _for97_exit:
5629   27C1             _if99_cond:
5630   27C1 29 E1 30      mov b, [allzeroes] ; allzeroes
5631   27C4 D7            push a
5632   27C5 11            mov a, b
5633   27C6 26 01 00      mov b, 1
5634   27C9 B0            cmp a, b
5635   27CA 0E            lodflgs
5636   27CB 87 01         and al, %00000001 ; ==
5637   27CD 22 00         mov ah, 0
5638   27CF 27            mov b, a
5639   27D0 E4            pop a
5640   27D1 C0 00 00      cmp b, 0
5641   27D4 C6 DC 27      je _if99_exit
5642   27D7             _if99_true:
5643   27D7 F9            leave
5644   27D8 09            ret
5645   27D9 0A DC 27      jmp _if99_exit
5646   27DC             _if99_exit:
5647   27DC             _while100_cond:
5648   27DC 29 F1 2F      mov b, [anarr]
5649   27DF D7            push a
5650   27E0 74            mov d, b
5651   27E1 DA            push d
5652   27E2 26 0B 00      mov b, 11
5653   27E5 E7            pop d
5654   27E6 10 02 00      mov a, 2
5655   27E9 AC            mul a, b
5656   27EA 5A            add d, b
5657   27EB 2A            mov b, [d]
5658   27EC E4            pop a
5659   27ED D7            push a
5660   27EE 11            mov a, b
5661   27EF 26 00 00      mov b, 0
5662   27F2 B0            cmp a, b
5663   27F3 0E            lodflgs
5664   27F4 87 01         and al, %00000001 ; ==
5665   27F6 22 00         mov ah, 0
5666   27F8 27            mov b, a
5667   27F9 E4            pop a
5668   27FA C0 00 00      cmp b, 0
5669   27FD C6 8B 28      je _while100_exit
5670   2800             _while100_block:
5671   2800             _for101_init:
5672   2800 26 00 00      mov b, 0
5673   2803 FD 42 DF 30   mov [divi], b
5674   2807             _for101_cond:
5675   2807 29 DF 30      mov b, [divi] ; divi
5676   280A D7            push a
5677   280B 11            mov a, b
5678   280C 26 0C 00      mov b, 12
5679   280F B0            cmp a, b
5680   2810 0E            lodflgs
5681   2811 87 02         and al, %00000010 ; <
5682   2813 FD 9C         shr al
5683   2815 22 00         mov ah, 0
5684   2817 27            mov b, a
5685   2818 E4            pop a
5686   2819 C0 00 00      cmp b, 0
5687   281C C6 68 28      je _for101_exit
5688   281F             _for101_block:
5689   281F 29 F1 2F      mov b, [anarr]
5690   2822 74            mov d, b
5691   2823 DA            push d
5692   2824 26 0B 00      mov b, 11
5693   2827 D7            push a
5694   2828 11            mov a, b
5695   2829 29 DF 30      mov b, [divi] ; divi
5696   282C 60            sub a, b
5697   282D 27            mov b, a
5698   282E E4            pop a
5699   282F E7            pop d
5700   2830 10 02 00      mov a, 2
5701   2833 AC            mul a, b
5702   2834 5A            add d, b
5703   2835 DA            push d
5704   2836 29 F1 2F      mov b, [anarr]
5705   2839 D7            push a
5706   283A 74            mov d, b
5707   283B DA            push d
5708   283C 26 0B 00      mov b, 11
5709   283F D7            push a
5710   2840 11            mov a, b
5711   2841 29 DF 30      mov b, [divi] ; divi
5712   2844 60            sub a, b
5713   2845 27            mov b, a
5714   2846 E4            pop a
5715   2847 D7            push a
5716   2848 11            mov a, b
5717   2849 26 01 00      mov b, 1
5718   284C 60            sub a, b
5719   284D 27            mov b, a
5720   284E E4            pop a
5721   284F E7            pop d
5722   2850 10 02 00      mov a, 2
5723   2853 AC            mul a, b
5724   2854 5A            add d, b
5725   2855 2A            mov b, [d]
5726   2856 E4            pop a
5727   2857 E7            pop d
5728   2858 11            mov a, b
5729   2859 43            mov [d], a
5730   285A             _for101_update:
5731   285A 29 DF 30      mov b, [divi] ; divi
5732   285D 11            mov a, b
5733   285E FD 77         inc b
5734   2860 FD 42 DF 30   mov [divi], b
5735   2864 27            mov b, a
5736   2865 0A 07 28      jmp _for101_cond
5737   2868             _for101_exit:
5738   2868 29 F1 2F      mov b, [anarr]
5739   286B 74            mov d, b
5740   286C DA            push d
5741   286D 26 00 00      mov b, 0
5742   2870 E7            pop d
5743   2871 10 02 00      mov a, 2
5744   2874 AC            mul a, b
5745   2875 5A            add d, b
5746   2876 DA            push d
5747   2877 26 00 00      mov b, 0
5748   287A E7            pop d
5749   287B 11            mov a, b
5750   287C 43            mov [d], a
5751   287D 29 D9 30      mov b, [alshift] ; alshift
5752   2880 11            mov a, b
5753   2881 FD 77         inc b
5754   2883 FD 42 D9 30   mov [alshift], b
5755   2887 27            mov b, a
5756   2888 0A DC 27      jmp _while100_cond
5757   288B             _while100_exit:
5758   288B 26 00 00      mov b, 0
5759   288E FD 42 DD 30   mov [segmentcounter], b
5760   2892 26 00 00      mov b, 0
5761   2895 FD 42 DB 30   mov [divcounter], b
5762   2899             _while102_cond:
5763   2899 29 DD 30      mov b, [segmentcounter] ; segmentcounter
5764   289C D7            push a
5765   289D 11            mov a, b
5766   289E 26 0C 00      mov b, 12
5767   28A1 B0            cmp a, b
5768   28A2 0E            lodflgs
5769   28A3 87 02         and al, %00000010 ; <
5770   28A5 FD 9C         shr al
5771   28A7 22 00         mov ah, 0
5772   28A9 27            mov b, a
5773   28AA E4            pop a
5774   28AB C0 00 00      cmp b, 0
5775   28AE C6 21 2B      je _while102_exit
5776   28B1             _while102_block:
5777   28B1             _while103_cond:
5778   28B1 29 F1 2F      mov b, [anarr]
5779   28B4 D7            push a
5780   28B5 74            mov d, b
5781   28B6 DA            push d
5782   28B7 26 0B 00      mov b, 11
5783   28BA E7            pop d
5784   28BB 10 02 00      mov a, 2
5785   28BE AC            mul a, b
5786   28BF 5A            add d, b
5787   28C0 2A            mov b, [d]
5788   28C1 E4            pop a
5789   28C2 D7            push a
5790   28C3 11            mov a, b
5791   28C4 26 00 00      mov b, 0
5792   28C7 B0            cmp a, b
5793   28C8 0E            lodflgs
5794   28C9 87 01         and al, %00000001
5795   28CB 8F 01         xor al, %00000001 ; !=
5796   28CD 22 00         mov ah, 0
5797   28CF 27            mov b, a
5798   28D0 E4            pop a
5799   28D1 C0 00 00      cmp b, 0
5800   28D4 C6 4D 29      je _while103_exit
5801   28D7             _while103_block:
5802   28D7 07 6A 1A      call pminus
5803   28DA 29 DB 30      mov b, [divcounter] ; divcounter
5804   28DD 11            mov a, b
5805   28DE FD 77         inc b
5806   28E0 FD 42 DB 30   mov [divcounter], b
5807   28E4 27            mov b, a
5808   28E5             _for104_init:
5809   28E5 26 00 00      mov b, 0
5810   28E8 FD 42 DF 30   mov [divi], b
5811   28EC             _for104_cond:
5812   28EC 29 DF 30      mov b, [divi] ; divi
5813   28EF D7            push a
5814   28F0 11            mov a, b
5815   28F1 26 0C 00      mov b, 12
5816   28F4 B0            cmp a, b
5817   28F5 0E            lodflgs
5818   28F6 87 02         and al, %00000010 ; <
5819   28F8 FD 9C         shr al
5820   28FA 22 00         mov ah, 0
5821   28FC 27            mov b, a
5822   28FD E4            pop a
5823   28FE C0 00 00      cmp b, 0
5824   2901 C6 4A 29      je _for104_exit
5825   2904             _for104_block:
5826   2904 29 F1 2F      mov b, [anarr]
5827   2907 74            mov d, b
5828   2908 DA            push d
5829   2909 29 DF 30      mov b, [divi] ; divi
5830   290C E7            pop d
5831   290D 10 02 00      mov a, 2
5832   2910 AC            mul a, b
5833   2911 5A            add d, b
5834   2912 DA            push d
5835   2913 29 59 30      mov b, [cnarr]
5836   2916 D7            push a
5837   2917 74            mov d, b
5838   2918 DA            push d
5839   2919 29 DF 30      mov b, [divi] ; divi
5840   291C E7            pop d
5841   291D 10 02 00      mov a, 2
5842   2920 AC            mul a, b
5843   2921 5A            add d, b
5844   2922 2A            mov b, [d]
5845   2923 E4            pop a
5846   2924 E7            pop d
5847   2925 11            mov a, b
5848   2926 43            mov [d], a
5849   2927 29 59 30      mov b, [cnarr]
5850   292A 74            mov d, b
5851   292B DA            push d
5852   292C 29 DF 30      mov b, [divi] ; divi
5853   292F E7            pop d
5854   2930 10 02 00      mov a, 2
5855   2933 AC            mul a, b
5856   2934 5A            add d, b
5857   2935 DA            push d
5858   2936 26 00 00      mov b, 0
5859   2939 E7            pop d
5860   293A 11            mov a, b
5861   293B 43            mov [d], a
5862   293C             _for104_update:
5863   293C 29 DF 30      mov b, [divi] ; divi
5864   293F 11            mov a, b
5865   2940 FD 77         inc b
5866   2942 FD 42 DF 30   mov [divi], b
5867   2946 27            mov b, a
5868   2947 0A EC 28      jmp _for104_cond
5869   294A             _for104_exit:
5870   294A 0A B1 28      jmp _while103_cond
5871   294D             _while103_exit:
5872   294D 29 A5 30      mov b, [divres]
5873   2950 74            mov d, b
5874   2951 DA            push d
5875   2952 26 0B 00      mov b, 11
5876   2955 D7            push a
5877   2956 11            mov a, b
5878   2957 29 DD 30      mov b, [segmentcounter] ; segmentcounter
5879   295A 60            sub a, b
5880   295B 27            mov b, a
5881   295C E4            pop a
5882   295D E7            pop d
5883   295E 10 02 00      mov a, 2
5884   2961 AC            mul a, b
5885   2962 5A            add d, b
5886   2963 DA            push d
5887   2964 29 DB 30      mov b, [divcounter] ; divcounter
5888   2967 E7            pop d
5889   2968 11            mov a, b
5890   2969 43            mov [d], a
5891   296A 26 00 00      mov b, 0
5892   296D FD 42 DB 30   mov [divcounter], b
5893   2971 29 DD 30      mov b, [segmentcounter] ; segmentcounter
5894   2974 11            mov a, b
5895   2975 FD 77         inc b
5896   2977 FD 42 DD 30   mov [segmentcounter], b
5897   297B 27            mov b, a
5898   297C 26 01 00      mov b, 1
5899   297F FD 42 E1 30   mov [allzeroes], b
5900   2983             _for105_init:
5901   2983 26 00 00      mov b, 0
5902   2986 FD 42 DF 30   mov [divi], b
5903   298A             _for105_cond:
5904   298A 29 DF 30      mov b, [divi] ; divi
5905   298D D7            push a
5906   298E 11            mov a, b
5907   298F 26 0C 00      mov b, 12
5908   2992 B0            cmp a, b
5909   2993 0E            lodflgs
5910   2994 87 02         and al, %00000010 ; <
5911   2996 FD 9C         shr al
5912   2998 22 00         mov ah, 0
5913   299A 27            mov b, a
5914   299B E4            pop a
5915   299C C0 00 00      cmp b, 0
5916   299F C6 E0 29      je _for105_exit
5917   29A2             _for105_block:
5918   29A2             _if106_cond:
5919   29A2 29 F1 2F      mov b, [anarr]
5920   29A5 D7            push a
5921   29A6 74            mov d, b
5922   29A7 DA            push d
5923   29A8 29 DF 30      mov b, [divi] ; divi
5924   29AB E7            pop d
5925   29AC 10 02 00      mov a, 2
5926   29AF AC            mul a, b
5927   29B0 5A            add d, b
5928   29B1 2A            mov b, [d]
5929   29B2 E4            pop a
5930   29B3 D7            push a
5931   29B4 11            mov a, b
5932   29B5 26 00 00      mov b, 0
5933   29B8 B0            cmp a, b
5934   29B9 0E            lodflgs
5935   29BA 87 01         and al, %00000001
5936   29BC 8F 01         xor al, %00000001 ; !=
5937   29BE 22 00         mov ah, 0
5938   29C0 27            mov b, a
5939   29C1 E4            pop a
5940   29C2 C0 00 00      cmp b, 0
5941   29C5 C6 D2 29      je _if106_exit
5942   29C8             _if106_true:
5943   29C8 26 00 00      mov b, 0
5944   29CB FD 42 E1 30   mov [allzeroes], b
5945   29CF 0A D2 29      jmp _if106_exit
5946   29D2             _if106_exit:
5947   29D2             _for105_update:
5948   29D2 29 DF 30      mov b, [divi] ; divi
5949   29D5 11            mov a, b
5950   29D6 FD 77         inc b
5951   29D8 FD 42 DF 30   mov [divi], b
5952   29DC 27            mov b, a
5953   29DD 0A 8A 29      jmp _for105_cond
5954   29E0             _for105_exit:
5955   29E0             _if107_cond:
5956   29E0 29 E1 30      mov b, [allzeroes] ; allzeroes
5957   29E3 D7            push a
5958   29E4 11            mov a, b
5959   29E5 26 01 00      mov b, 1
5960   29E8 B0            cmp a, b
5961   29E9 0E            lodflgs
5962   29EA 87 01         and al, %00000001 ; ==
5963   29EC 22 00         mov ah, 0
5964   29EE 27            mov b, a
5965   29EF E4            pop a
5966   29F0 C0 00 00      cmp b, 0
5967   29F3 C6 FB 29      je _if107_exit
5968   29F6             _if107_true:
5969   29F6 F9            leave
5970   29F7 09            ret
5971   29F8 0A FB 29      jmp _if107_exit
5972   29FB             _if107_exit:
5973   29FB             _while108_cond:
5974   29FB 29 F1 2F      mov b, [anarr]
5975   29FE D7            push a
5976   29FF 74            mov d, b
5977   2A00 DA            push d
5978   2A01 26 0B 00      mov b, 11
5979   2A04 E7            pop d
5980   2A05 10 02 00      mov a, 2
5981   2A08 AC            mul a, b
5982   2A09 5A            add d, b
5983   2A0A 2A            mov b, [d]
5984   2A0B E4            pop a
5985   2A0C D7            push a
5986   2A0D 11            mov a, b
5987   2A0E 26 00 00      mov b, 0
5988   2A11 B0            cmp a, b
5989   2A12 0E            lodflgs
5990   2A13 87 01         and al, %00000001 ; ==
5991   2A15 22 00         mov ah, 0
5992   2A17 27            mov b, a
5993   2A18 E4            pop a
5994   2A19 C0 00 00      cmp b, 0
5995   2A1C C6 1E 2B      je _while108_exit
5996   2A1F             _while108_block:
5997   2A1F             _for109_init:
5998   2A1F 26 00 00      mov b, 0
5999   2A22 FD 42 DF 30   mov [divi], b
6000   2A26             _for109_cond:
6001   2A26 29 DF 30      mov b, [divi] ; divi
6002   2A29 D7            push a
6003   2A2A 11            mov a, b
6004   2A2B 26 0C 00      mov b, 12
6005   2A2E B0            cmp a, b
6006   2A2F 0E            lodflgs
6007   2A30 87 02         and al, %00000010 ; <
6008   2A32 FD 9C         shr al
6009   2A34 22 00         mov ah, 0
6010   2A36 27            mov b, a
6011   2A37 E4            pop a
6012   2A38 C0 00 00      cmp b, 0
6013   2A3B C6 87 2A      je _for109_exit
6014   2A3E             _for109_block:
6015   2A3E 29 F1 2F      mov b, [anarr]
6016   2A41 74            mov d, b
6017   2A42 DA            push d
6018   2A43 26 0B 00      mov b, 11
6019   2A46 D7            push a
6020   2A47 11            mov a, b
6021   2A48 29 DF 30      mov b, [divi] ; divi
6022   2A4B 60            sub a, b
6023   2A4C 27            mov b, a
6024   2A4D E4            pop a
6025   2A4E E7            pop d
6026   2A4F 10 02 00      mov a, 2
6027   2A52 AC            mul a, b
6028   2A53 5A            add d, b
6029   2A54 DA            push d
6030   2A55 29 F1 2F      mov b, [anarr]
6031   2A58 D7            push a
6032   2A59 74            mov d, b
6033   2A5A DA            push d
6034   2A5B 26 0B 00      mov b, 11
6035   2A5E D7            push a
6036   2A5F 11            mov a, b
6037   2A60 29 DF 30      mov b, [divi] ; divi
6038   2A63 60            sub a, b
6039   2A64 27            mov b, a
6040   2A65 E4            pop a
6041   2A66 D7            push a
6042   2A67 11            mov a, b
6043   2A68 26 01 00      mov b, 1
6044   2A6B 60            sub a, b
6045   2A6C 27            mov b, a
6046   2A6D E4            pop a
6047   2A6E E7            pop d
6048   2A6F 10 02 00      mov a, 2
6049   2A72 AC            mul a, b
6050   2A73 5A            add d, b
6051   2A74 2A            mov b, [d]
6052   2A75 E4            pop a
6053   2A76 E7            pop d
6054   2A77 11            mov a, b
6055   2A78 43            mov [d], a
6056   2A79             _for109_update:
6057   2A79 29 DF 30      mov b, [divi] ; divi
6058   2A7C 11            mov a, b
6059   2A7D FD 77         inc b
6060   2A7F FD 42 DF 30   mov [divi], b
6061   2A83 27            mov b, a
6062   2A84 0A 26 2A      jmp _for109_cond
6063   2A87             _for109_exit:
6064   2A87 29 F1 2F      mov b, [anarr]
6065   2A8A 74            mov d, b
6066   2A8B DA            push d
6067   2A8C 26 00 00      mov b, 0
6068   2A8F E7            pop d
6069   2A90 10 02 00      mov a, 2
6070   2A93 AC            mul a, b
6071   2A94 5A            add d, b
6072   2A95 DA            push d
6073   2A96 26 00 00      mov b, 0
6074   2A99 E7            pop d
6075   2A9A 11            mov a, b
6076   2A9B 43            mov [d], a
6077   2A9C             _if110_cond:
6078   2A9C 29 F1 2F      mov b, [anarr]
6079   2A9F D7            push a
6080   2AA0 74            mov d, b
6081   2AA1 DA            push d
6082   2AA2 26 0B 00      mov b, 11
6083   2AA5 E7            pop d
6084   2AA6 10 02 00      mov a, 2
6085   2AA9 AC            mul a, b
6086   2AAA 5A            add d, b
6087   2AAB 2A            mov b, [d]
6088   2AAC E4            pop a
6089   2AAD D7            push a
6090   2AAE 11            mov a, b
6091   2AAF 26 00 00      mov b, 0
6092   2AB2 B0            cmp a, b
6093   2AB3 0E            lodflgs
6094   2AB4 87 01         and al, %00000001 ; ==
6095   2AB6 22 00         mov ah, 0
6096   2AB8 27            mov b, a
6097   2AB9 E4            pop a
6098   2ABA C0 00 00      cmp b, 0
6099   2ABD C6 1B 2B      je _if110_exit
6100   2AC0             _if110_true:
6101   2AC0 29 A5 30      mov b, [divres]
6102   2AC3 74            mov d, b
6103   2AC4 DA            push d
6104   2AC5 26 0B 00      mov b, 11
6105   2AC8 D7            push a
6106   2AC9 11            mov a, b
6107   2ACA 29 DD 30      mov b, [segmentcounter] ; segmentcounter
6108   2ACD 60            sub a, b
6109   2ACE 27            mov b, a
6110   2ACF E4            pop a
6111   2AD0 E7            pop d
6112   2AD1 10 02 00      mov a, 2
6113   2AD4 AC            mul a, b
6114   2AD5 5A            add d, b
6115   2AD6 DA            push d
6116   2AD7 26 00 00      mov b, 0
6117   2ADA E7            pop d
6118   2ADB 11            mov a, b
6119   2ADC 43            mov [d], a
6120   2ADD 29 F1 2F      mov b, [anarr]
6121   2AE0 74            mov d, b
6122   2AE1 DA            push d
6123   2AE2 26 00 00      mov b, 0
6124   2AE5 E7            pop d
6125   2AE6 10 02 00      mov a, 2
6126   2AE9 AC            mul a, b
6127   2AEA 5A            add d, b
6128   2AEB DA            push d
6129   2AEC 26 00 00      mov b, 0
6130   2AEF E7            pop d
6131   2AF0 11            mov a, b
6132   2AF1 43            mov [d], a
6133   2AF2 29 DD 30      mov b, [segmentcounter] ; segmentcounter
6134   2AF5 11            mov a, b
6135   2AF6 FD 77         inc b
6136   2AF8 FD 42 DD 30   mov [segmentcounter], b
6137   2AFC 27            mov b, a
6138   2AFD             _if111_cond:
6139   2AFD 29 DD 30      mov b, [segmentcounter] ; segmentcounter
6140   2B00 D7            push a
6141   2B01 11            mov a, b
6142   2B02 26 0C 00      mov b, 12
6143   2B05 B0            cmp a, b
6144   2B06 0E            lodflgs
6145   2B07 87 01         and al, %00000001 ; ==
6146   2B09 22 00         mov ah, 0
6147   2B0B 27            mov b, a
6148   2B0C E4            pop a
6149   2B0D C0 00 00      cmp b, 0
6150   2B10 C6 18 2B      je _if111_exit
6151   2B13             _if111_true:
6152   2B13 F9            leave
6153   2B14 09            ret
6154   2B15 0A 18 2B      jmp _if111_exit
6155   2B18             _if111_exit:
6156   2B18 0A 1B 2B      jmp _if110_exit
6157   2B1B             _if110_exit:
6158   2B1B 0A FB 29      jmp _while108_cond
6159   2B1E             _while108_exit:
6160   2B1E 0A 99 28      jmp _while102_cond
6161   2B21             _while102_exit:
6162   2B21 F9            leave
6163   2B22 09            ret
6164   2B23             
6165   2B23             normdivres:
6166   2B23 D2            push bp
6167   2B24 9B            mov bp, sp
6168   2B25             _for112_init:
6169   2B25 26 0C 00      mov b, 12
6170   2B28 FD 42 DF 30   mov [divi], b
6171   2B2C             _for112_cond:
6172   2B2C 29 DF 30      mov b, [divi] ; divi
6173   2B2F D7            push a
6174   2B30 11            mov a, b
6175   2B31 26 18 00      mov b, 24
6176   2B34 B0            cmp a, b
6177   2B35 0E            lodflgs
6178   2B36 87 02         and al, %00000010 ; <
6179   2B38 FD 9C         shr al
6180   2B3A 22 00         mov ah, 0
6181   2B3C 27            mov b, a
6182   2B3D E4            pop a
6183   2B3E C0 00 00      cmp b, 0
6184   2B41 C6 67 2B      je _for112_exit
6185   2B44             _for112_block:
6186   2B44 29 8B 30      mov b, [mulres]
6187   2B47 74            mov d, b
6188   2B48 DA            push d
6189   2B49 29 DF 30      mov b, [divi] ; divi
6190   2B4C E7            pop d
6191   2B4D 10 02 00      mov a, 2
6192   2B50 AC            mul a, b
6193   2B51 5A            add d, b
6194   2B52 DA            push d
6195   2B53 26 00 00      mov b, 0
6196   2B56 E7            pop d
6197   2B57 11            mov a, b
6198   2B58 43            mov [d], a
6199   2B59             _for112_update:
6200   2B59 29 DF 30      mov b, [divi] ; divi
6201   2B5C 11            mov a, b
6202   2B5D FD 77         inc b
6203   2B5F FD 42 DF 30   mov [divi], b
6204   2B63 27            mov b, a
6205   2B64 0A 2C 2B      jmp _for112_cond
6206   2B67             _for112_exit:
6207   2B67             _for113_init:
6208   2B67 26 00 00      mov b, 0
6209   2B6A FD 42 DF 30   mov [divi], b
6210   2B6E             _for113_cond:
6211   2B6E 29 DF 30      mov b, [divi] ; divi
6212   2B71 D7            push a
6213   2B72 11            mov a, b
6214   2B73 26 0C 00      mov b, 12
6215   2B76 B0            cmp a, b
6216   2B77 0E            lodflgs
6217   2B78 87 02         and al, %00000010 ; <
6218   2B7A FD 9C         shr al
6219   2B7C 22 00         mov ah, 0
6220   2B7E 27            mov b, a
6221   2B7F E4            pop a
6222   2B80 C0 00 00      cmp b, 0
6223   2B83 C6 B7 2B      je _for113_exit
6224   2B86             _for113_block:
6225   2B86 29 8B 30      mov b, [mulres]
6226   2B89 74            mov d, b
6227   2B8A DA            push d
6228   2B8B 29 DF 30      mov b, [divi] ; divi
6229   2B8E E7            pop d
6230   2B8F 10 02 00      mov a, 2
6231   2B92 AC            mul a, b
6232   2B93 5A            add d, b
6233   2B94 DA            push d
6234   2B95 29 A5 30      mov b, [divres]
6235   2B98 D7            push a
6236   2B99 74            mov d, b
6237   2B9A DA            push d
6238   2B9B 29 DF 30      mov b, [divi] ; divi
6239   2B9E E7            pop d
6240   2B9F 10 02 00      mov a, 2
6241   2BA2 AC            mul a, b
6242   2BA3 5A            add d, b
6243   2BA4 2A            mov b, [d]
6244   2BA5 E4            pop a
6245   2BA6 E7            pop d
6246   2BA7 11            mov a, b
6247   2BA8 43            mov [d], a
6248   2BA9             _for113_update:
6249   2BA9 29 DF 30      mov b, [divi] ; divi
6250   2BAC 11            mov a, b
6251   2BAD FD 77         inc b
6252   2BAF FD 42 DF 30   mov [divi], b
6253   2BB3 27            mov b, a
6254   2BB4 0A 6E 2B      jmp _for113_cond
6255   2BB7             _for113_exit:
6256   2BB7 07 E0 21      call normmulres
6257   2BBA             _for114_init:
6258   2BBA 26 00 00      mov b, 0
6259   2BBD FD 42 E5 30   mov [divshift], b
6260   2BC1             _for114_cond:
6261   2BC1 29 E5 30      mov b, [divshift] ; divshift
6262   2BC4 D7            push a
6263   2BC5 11            mov a, b
6264   2BC6 26 0B 00      mov b, 11
6265   2BC9 B0            cmp a, b
6266   2BCA 0E            lodflgs
6267   2BCB 87 02         and al, %00000010 ; <
6268   2BCD FD 9C         shr al
6269   2BCF 22 00         mov ah, 0
6270   2BD1 27            mov b, a
6271   2BD2 E4            pop a
6272   2BD3 C0 00 00      cmp b, 0
6273   2BD6 C6 64 2C      je _for114_exit
6274   2BD9             _for114_block:
6275   2BD9             _for115_init:
6276   2BD9 26 00 00      mov b, 0
6277   2BDC FD 42 DF 30   mov [divi], b
6278   2BE0             _for115_cond:
6279   2BE0 29 DF 30      mov b, [divi] ; divi
6280   2BE3 D7            push a
6281   2BE4 11            mov a, b
6282   2BE5 26 18 00      mov b, 24
6283   2BE8 B0            cmp a, b
6284   2BE9 0E            lodflgs
6285   2BEA 87 02         and al, %00000010 ; <
6286   2BEC FD 9C         shr al
6287   2BEE 22 00         mov ah, 0
6288   2BF0 27            mov b, a
6289   2BF1 E4            pop a
6290   2BF2 C0 00 00      cmp b, 0
6291   2BF5 C6 41 2C      je _for115_exit
6292   2BF8             _for115_block:
6293   2BF8 29 8B 30      mov b, [mulres]
6294   2BFB 74            mov d, b
6295   2BFC DA            push d
6296   2BFD 26 17 00      mov b, 23
6297   2C00 D7            push a
6298   2C01 11            mov a, b
6299   2C02 29 DF 30      mov b, [divi] ; divi
6300   2C05 60            sub a, b
6301   2C06 27            mov b, a
6302   2C07 E4            pop a
6303   2C08 E7            pop d
6304   2C09 10 02 00      mov a, 2
6305   2C0C AC            mul a, b
6306   2C0D 5A            add d, b
6307   2C0E DA            push d
6308   2C0F 29 8B 30      mov b, [mulres]
6309   2C12 D7            push a
6310   2C13 74            mov d, b
6311   2C14 DA            push d
6312   2C15 26 17 00      mov b, 23
6313   2C18 D7            push a
6314   2C19 11            mov a, b
6315   2C1A 29 DF 30      mov b, [divi] ; divi
6316   2C1D 60            sub a, b
6317   2C1E 27            mov b, a
6318   2C1F E4            pop a
6319   2C20 D7            push a
6320   2C21 11            mov a, b
6321   2C22 26 01 00      mov b, 1
6322   2C25 60            sub a, b
6323   2C26 27            mov b, a
6324   2C27 E4            pop a
6325   2C28 E7            pop d
6326   2C29 10 02 00      mov a, 2
6327   2C2C AC            mul a, b
6328   2C2D 5A            add d, b
6329   2C2E 2A            mov b, [d]
6330   2C2F E4            pop a
6331   2C30 E7            pop d
6332   2C31 11            mov a, b
6333   2C32 43            mov [d], a
6334   2C33             _for115_update:
6335   2C33 29 DF 30      mov b, [divi] ; divi
6336   2C36 11            mov a, b
6337   2C37 FD 77         inc b
6338   2C39 FD 42 DF 30   mov [divi], b
6339   2C3D 27            mov b, a
6340   2C3E 0A E0 2B      jmp _for115_cond
6341   2C41             _for115_exit:
6342   2C41 29 8B 30      mov b, [mulres]
6343   2C44 74            mov d, b
6344   2C45 DA            push d
6345   2C46 26 00 00      mov b, 0
6346   2C49 E7            pop d
6347   2C4A 10 02 00      mov a, 2
6348   2C4D AC            mul a, b
6349   2C4E 5A            add d, b
6350   2C4F DA            push d
6351   2C50 26 00 00      mov b, 0
6352   2C53 E7            pop d
6353   2C54 11            mov a, b
6354   2C55 43            mov [d], a
6355   2C56             _for114_update:
6356   2C56 29 E5 30      mov b, [divshift] ; divshift
6357   2C59 11            mov a, b
6358   2C5A FD 77         inc b
6359   2C5C FD 42 E5 30   mov [divshift], b
6360   2C60 27            mov b, a
6361   2C61 0A C1 2B      jmp _for114_cond
6362   2C64             _for114_exit:
6363   2C64             _for116_init:
6364   2C64 26 00 00      mov b, 0
6365   2C67 FD 42 DF 30   mov [divi], b
6366   2C6B             _for116_cond:
6367   2C6B 29 DF 30      mov b, [divi] ; divi
6368   2C6E D7            push a
6369   2C6F 11            mov a, b
6370   2C70 26 0C 00      mov b, 12
6371   2C73 B0            cmp a, b
6372   2C74 0E            lodflgs
6373   2C75 87 02         and al, %00000010 ; <
6374   2C77 FD 9C         shr al
6375   2C79 22 00         mov ah, 0
6376   2C7B 27            mov b, a
6377   2C7C E4            pop a
6378   2C7D C0 00 00      cmp b, 0
6379   2C80 C6 BC 2C      je _for116_exit
6380   2C83             _for116_block:
6381   2C83 29 A5 30      mov b, [divres]
6382   2C86 74            mov d, b
6383   2C87 DA            push d
6384   2C88 29 DF 30      mov b, [divi] ; divi
6385   2C8B E7            pop d
6386   2C8C 10 02 00      mov a, 2
6387   2C8F AC            mul a, b
6388   2C90 5A            add d, b
6389   2C91 DA            push d
6390   2C92 29 8B 30      mov b, [mulres]
6391   2C95 D7            push a
6392   2C96 74            mov d, b
6393   2C97 DA            push d
6394   2C98 29 DF 30      mov b, [divi] ; divi
6395   2C9B D7            push a
6396   2C9C 11            mov a, b
6397   2C9D 26 0C 00      mov b, 12
6398   2CA0 54            add a, b
6399   2CA1 27            mov b, a
6400   2CA2 E4            pop a
6401   2CA3 E7            pop d
6402   2CA4 10 02 00      mov a, 2
6403   2CA7 AC            mul a, b
6404   2CA8 5A            add d, b
6405   2CA9 2A            mov b, [d]
6406   2CAA E4            pop a
6407   2CAB E7            pop d
6408   2CAC 11            mov a, b
6409   2CAD 43            mov [d], a
6410   2CAE             _for116_update:
6411   2CAE 29 DF 30      mov b, [divi] ; divi
6412   2CB1 11            mov a, b
6413   2CB2 FD 77         inc b
6414   2CB4 FD 42 DF 30   mov [divi], b
6415   2CB8 27            mov b, a
6416   2CB9 0A 6B 2C      jmp _for116_cond
6417   2CBC             _for116_exit:
6418   2CBC F9            leave
6419   2CBD 09            ret
6420   2CBE             
6421   2CBE             times:
6422   2CBE D2            push bp
6423   2CBF 9B            mov bp, sp
6424   2CC0 07 D6 13      call fixsignin
6425   2CC3 26 00 00      mov b, 0
6426   2CC6 FD 42 AB 30   mov [csign], b
6427   2CCA             _if117_cond:
6428   2CCA 29 A7 30      mov b, [asign] ; asign
6429   2CCD D7            push a
6430   2CCE 11            mov a, b
6431   2CCF 29 A9 30      mov b, [bsign] ; bsign
6432   2CD2 B0            cmp a, b
6433   2CD3 0E            lodflgs
6434   2CD4 87 01         and al, %00000001
6435   2CD6 8F 01         xor al, %00000001 ; !=
6436   2CD8 22 00         mov ah, 0
6437   2CDA 27            mov b, a
6438   2CDB E4            pop a
6439   2CDC C0 00 00      cmp b, 0
6440   2CDF C6 EC 2C      je _if117_exit
6441   2CE2             _if117_true:
6442   2CE2 26 01 00      mov b, 1
6443   2CE5 FD 42 AB 30   mov [csign], b
6444   2CE9 0A EC 2C      jmp _if117_exit
6445   2CEC             _if117_exit:
6446   2CEC 26 00 00      mov b, 0
6447   2CEF FD 42 A7 30   mov [asign], b
6448   2CF3 26 00 00      mov b, 0
6449   2CF6 FD 42 A9 30   mov [bsign], b
6450   2CFA 07 00 24      call prototimes
6451   2CFD 26 01 00      mov b, 1
6452   2D00 FD 42 E1 30   mov [allzeroes], b
6453   2D04             _for118_init:
6454   2D04 26 0F 00      mov b, 15
6455   2D07 FD 42 AF 30   mov [pos], b
6456   2D0B             _for118_cond:
6457   2D0B 29 AF 30      mov b, [pos] ; pos
6458   2D0E D7            push a
6459   2D0F 11            mov a, b
6460   2D10 26 18 00      mov b, 24
6461   2D13 B0            cmp a, b
6462   2D14 0E            lodflgs
6463   2D15 87 02         and al, %00000010 ; <
6464   2D17 FD 9C         shr al
6465   2D19 22 00         mov ah, 0
6466   2D1B 27            mov b, a
6467   2D1C E4            pop a
6468   2D1D C0 00 00      cmp b, 0
6469   2D20 C6 61 2D      je _for118_exit
6470   2D23             _for118_block:
6471   2D23             _if119_cond:
6472   2D23 29 8B 30      mov b, [mulres]
6473   2D26 D7            push a
6474   2D27 74            mov d, b
6475   2D28 DA            push d
6476   2D29 29 AF 30      mov b, [pos] ; pos
6477   2D2C E7            pop d
6478   2D2D 10 02 00      mov a, 2
6479   2D30 AC            mul a, b
6480   2D31 5A            add d, b
6481   2D32 2A            mov b, [d]
6482   2D33 E4            pop a
6483   2D34 D7            push a
6484   2D35 11            mov a, b
6485   2D36 26 00 00      mov b, 0
6486   2D39 B0            cmp a, b
6487   2D3A 0E            lodflgs
6488   2D3B 87 01         and al, %00000001
6489   2D3D 8F 01         xor al, %00000001 ; !=
6490   2D3F 22 00         mov ah, 0
6491   2D41 27            mov b, a
6492   2D42 E4            pop a
6493   2D43 C0 00 00      cmp b, 0
6494   2D46 C6 53 2D      je _if119_exit
6495   2D49             _if119_true:
6496   2D49 26 00 00      mov b, 0
6497   2D4C FD 42 E1 30   mov [allzeroes], b
6498   2D50 0A 53 2D      jmp _if119_exit
6499   2D53             _if119_exit:
6500   2D53             _for118_update:
6501   2D53 29 AF 30      mov b, [pos] ; pos
6502   2D56 11            mov a, b
6503   2D57 FD 77         inc b
6504   2D59 FD 42 AF 30   mov [pos], b
6505   2D5D 27            mov b, a
6506   2D5E 0A 0B 2D      jmp _for118_cond
6507   2D61             _for118_exit:
6508   2D61             _if120_cond:
6509   2D61 29 E1 30      mov b, [allzeroes] ; allzeroes
6510   2D64 D7            push a
6511   2D65 11            mov a, b
6512   2D66 26 01 00      mov b, 1
6513   2D69 B0            cmp a, b
6514   2D6A 0E            lodflgs
6515   2D6B 87 01         and al, %00000001 ; ==
6516   2D6D 22 00         mov ah, 0
6517   2D6F 27            mov b, a
6518   2D70 E4            pop a
6519   2D71 C0 00 00      cmp b, 0
6520   2D74 C6 D2 2D      je _if120_exit
6521   2D77             _if120_true:
6522   2D77             _for121_init:
6523   2D77 26 04 00      mov b, 4
6524   2D7A FD 42 AF 30   mov [pos], b
6525   2D7E             _for121_cond:
6526   2D7E 29 AF 30      mov b, [pos] ; pos
6527   2D81 D7            push a
6528   2D82 11            mov a, b
6529   2D83 26 0F 00      mov b, 15
6530   2D86 B0            cmp a, b
6531   2D87 0E            lodflgs
6532   2D88 87 02         and al, %00000010 ; <
6533   2D8A FD 9C         shr al
6534   2D8C 22 00         mov ah, 0
6535   2D8E 27            mov b, a
6536   2D8F E4            pop a
6537   2D90 C0 00 00      cmp b, 0
6538   2D93 C6 CF 2D      je _for121_exit
6539   2D96             _for121_block:
6540   2D96 29 59 30      mov b, [cnarr]
6541   2D99 74            mov d, b
6542   2D9A DA            push d
6543   2D9B 29 AF 30      mov b, [pos] ; pos
6544   2D9E D7            push a
6545   2D9F 11            mov a, b
6546   2DA0 26 04 00      mov b, 4
6547   2DA3 60            sub a, b
6548   2DA4 27            mov b, a
6549   2DA5 E4            pop a
6550   2DA6 E7            pop d
6551   2DA7 10 02 00      mov a, 2
6552   2DAA AC            mul a, b
6553   2DAB 5A            add d, b
6554   2DAC DA            push d
6555   2DAD 29 8B 30      mov b, [mulres]
6556   2DB0 D7            push a
6557   2DB1 74            mov d, b
6558   2DB2 DA            push d
6559   2DB3 29 AF 30      mov b, [pos] ; pos
6560   2DB6 E7            pop d
6561   2DB7 10 02 00      mov a, 2
6562   2DBA AC            mul a, b
6563   2DBB 5A            add d, b
6564   2DBC 2A            mov b, [d]
6565   2DBD E4            pop a
6566   2DBE E7            pop d
6567   2DBF 11            mov a, b
6568   2DC0 43            mov [d], a
6569   2DC1             _for121_update:
6570   2DC1 29 AF 30      mov b, [pos] ; pos
6571   2DC4 11            mov a, b
6572   2DC5 FD 77         inc b
6573   2DC7 FD 42 AF 30   mov [pos], b
6574   2DCB 27            mov b, a
6575   2DCC 0A 7E 2D      jmp _for121_cond
6576   2DCF             _for121_exit:
6577   2DCF 0A D2 2D      jmp _if120_exit
6578   2DD2             _if120_exit:
6579   2DD2             _if122_cond:
6580   2DD2 29 59 30      mov b, [cnarr]
6581   2DD5 D7            push a
6582   2DD6 74            mov d, b
6583   2DD7 DA            push d
6584   2DD8 26 0B 00      mov b, 11
6585   2DDB E7            pop d
6586   2DDC 10 02 00      mov a, 2
6587   2DDF AC            mul a, b
6588   2DE0 5A            add d, b
6589   2DE1 2A            mov b, [d]
6590   2DE2 E4            pop a
6591   2DE3 D7            push a
6592   2DE4 11            mov a, b
6593   2DE5 26 09 00      mov b, 9
6594   2DE8 B0            cmp a, b
6595   2DE9 0E            lodflgs
6596   2DEA 87 03         and al, %00000011
6597   2DEC B9 00         cmp al, 0
6598   2DEE 0E            lodflgs
6599   2DEF 22 00         mov ah, 0
6600   2DF1 27            mov b, a
6601   2DF2 E4            pop a
6602   2DF3 C0 00 00      cmp b, 0
6603   2DF6 C6 3E 2E      je _if122_exit
6604   2DF9             _if122_true:
6605   2DF9             _for123_init:
6606   2DF9 26 00 00      mov b, 0
6607   2DFC FD 42 AF 30   mov [pos], b
6608   2E00             _for123_cond:
6609   2E00 29 AF 30      mov b, [pos] ; pos
6610   2E03 D7            push a
6611   2E04 11            mov a, b
6612   2E05 26 0A 00      mov b, 10
6613   2E08 B0            cmp a, b
6614   2E09 0E            lodflgs
6615   2E0A 87 02         and al, %00000010 ; <
6616   2E0C FD 9C         shr al
6617   2E0E 22 00         mov ah, 0
6618   2E10 27            mov b, a
6619   2E11 E4            pop a
6620   2E12 C0 00 00      cmp b, 0
6621   2E15 C6 3B 2E      je _for123_exit
6622   2E18             _for123_block:
6623   2E18 29 59 30      mov b, [cnarr]
6624   2E1B 74            mov d, b
6625   2E1C DA            push d
6626   2E1D 29 AF 30      mov b, [pos] ; pos
6627   2E20 E7            pop d
6628   2E21 10 02 00      mov a, 2
6629   2E24 AC            mul a, b
6630   2E25 5A            add d, b
6631   2E26 DA            push d
6632   2E27 26 00 00      mov b, 0
6633   2E2A E7            pop d
6634   2E2B 11            mov a, b
6635   2E2C 43            mov [d], a
6636   2E2D             _for123_update:
6637   2E2D 29 AF 30      mov b, [pos] ; pos
6638   2E30 11            mov a, b
6639   2E31 FD 77         inc b
6640   2E33 FD 42 AF 30   mov [pos], b
6641   2E37 27            mov b, a
6642   2E38 0A 00 2E      jmp _for123_cond
6643   2E3B             _for123_exit:
6644   2E3B 0A 3E 2E      jmp _if122_exit
6645   2E3E             _if122_exit:
6646   2E3E 07 46 15      call fixcsizezero
6647   2E41 07 F7 14      call fixsignout
6648   2E44 F9            leave
6649   2E45 09            ret
6650   2E46             
6651   2E46             dividedby:
6652   2E46 D2            push bp
6653   2E47 9B            mov bp, sp
6654   2E48 07 D6 13      call fixsignin
6655   2E4B 26 00 00      mov b, 0
6656   2E4E FD 42 AB 30   mov [csign], b
6657   2E52             _if124_cond:
6658   2E52 29 A7 30      mov b, [asign] ; asign
6659   2E55 D7            push a
6660   2E56 11            mov a, b
6661   2E57 29 A9 30      mov b, [bsign] ; bsign
6662   2E5A B0            cmp a, b
6663   2E5B 0E            lodflgs
6664   2E5C 87 01         and al, %00000001
6665   2E5E 8F 01         xor al, %00000001 ; !=
6666   2E60 22 00         mov ah, 0
6667   2E62 27            mov b, a
6668   2E63 E4            pop a
6669   2E64 C0 00 00      cmp b, 0
6670   2E67 C6 74 2E      je _if124_exit
6671   2E6A             _if124_true:
6672   2E6A 26 01 00      mov b, 1
6673   2E6D FD 42 AB 30   mov [csign], b
6674   2E71 0A 74 2E      jmp _if124_exit
6675   2E74             _if124_exit:
6676   2E74 26 00 00      mov b, 0
6677   2E77 FD 42 A7 30   mov [asign], b
6678   2E7B 26 00 00      mov b, 0
6679   2E7E FD 42 A9 30   mov [bsign], b
6680   2E82 29 AB 30      mov b, [csign] ; csign
6681   2E85 FD 42 E3 30   mov [bkpcsign], b
6682   2E89 07 43 25      call protodividedby
6683   2E8C 07 23 2B      call normdivres
6684   2E8F             _if125_cond:
6685   2E8F 29 D7 30      mov b, [blshift] ; blshift
6686   2E92 D7            push a
6687   2E93 11            mov a, b
6688   2E94 26 06 00      mov b, 6
6689   2E97 54            add a, b
6690   2E98 27            mov b, a
6691   2E99 E4            pop a
6692   2E9A D7            push a
6693   2E9B 11            mov a, b
6694   2E9C 29 D9 30      mov b, [alshift] ; alshift
6695   2E9F D7            push a
6696   2EA0 11            mov a, b
6697   2EA1 29 D5 30      mov b, [brshift] ; brshift
6698   2EA4 54            add a, b
6699   2EA5 27            mov b, a
6700   2EA6 E4            pop a
6701   2EA7 B0            cmp a, b
6702   2EA8 0E            lodflgs
6703   2EA9 87 03         and al, %00000011
6704   2EAB B9 00         cmp al, 0
6705   2EAD 0E            lodflgs
6706   2EAE 22 00         mov ah, 0
6707   2EB0 27            mov b, a
6708   2EB1 E4            pop a
6709   2EB2 C0 00 00      cmp b, 0
6710   2EB5 C6 64 2F      je _if125_exit
6711   2EB8             _if125_true:
6712   2EB8 29 D7 30      mov b, [blshift] ; blshift
6713   2EBB D7            push a
6714   2EBC 11            mov a, b
6715   2EBD 26 06 00      mov b, 6
6716   2EC0 54            add a, b
6717   2EC1 27            mov b, a
6718   2EC2 E4            pop a
6719   2EC3 D7            push a
6720   2EC4 11            mov a, b
6721   2EC5 29 D9 30      mov b, [alshift] ; alshift
6722   2EC8 60            sub a, b
6723   2EC9 27            mov b, a
6724   2ECA E4            pop a
6725   2ECB D7            push a
6726   2ECC 11            mov a, b
6727   2ECD 29 D5 30      mov b, [brshift] ; brshift
6728   2ED0 60            sub a, b
6729   2ED1 27            mov b, a
6730   2ED2 E4            pop a
6731   2ED3 FD 42 D7 30   mov [blshift], b
6732   2ED7 26 0C 00      mov b, 12
6733   2EDA D7            push a
6734   2EDB 11            mov a, b
6735   2EDC 29 D7 30      mov b, [blshift] ; blshift
6736   2EDF 60            sub a, b
6737   2EE0 27            mov b, a
6738   2EE1 E4            pop a
6739   2EE2 FD 42 DF 30   mov [divi], b
6740   2EE6             _for126_init:
6741   2EE6 26 00 00      mov b, 0
6742   2EE9 FD 42 AF 30   mov [pos], b
6743   2EED             _for126_cond:
6744   2EED 29 AF 30      mov b, [pos] ; pos
6745   2EF0 D7            push a
6746   2EF1 11            mov a, b
6747   2EF2 29 D7 30      mov b, [blshift] ; blshift
6748   2EF5 B0            cmp a, b
6749   2EF6 0E            lodflgs
6750   2EF7 87 02         and al, %00000010 ; <
6751   2EF9 FD 9C         shr al
6752   2EFB 22 00         mov ah, 0
6753   2EFD 27            mov b, a
6754   2EFE E4            pop a
6755   2EFF C0 00 00      cmp b, 0
6756   2F02 C6 61 2F      je _for126_exit
6757   2F05             _for126_block:
6758   2F05             _if127_cond:
6759   2F05 29 AF 30      mov b, [pos] ; pos
6760   2F08 D7            push a
6761   2F09 11            mov a, b
6762   2F0A 29 DF 30      mov b, [divi] ; divi
6763   2F0D 54            add a, b
6764   2F0E 27            mov b, a
6765   2F0F E4            pop a
6766   2F10 D7            push a
6767   2F11 11            mov a, b
6768   2F12 26 0C 00      mov b, 12
6769   2F15 B0            cmp a, b
6770   2F16 0E            lodflgs
6771   2F17 87 02         and al, %00000010 ; <
6772   2F19 FD 9C         shr al
6773   2F1B 22 00         mov ah, 0
6774   2F1D 27            mov b, a
6775   2F1E E4            pop a
6776   2F1F C0 00 00      cmp b, 0
6777   2F22 C6 53 2F      je _if127_exit
6778   2F25             _if127_true:
6779   2F25 29 59 30      mov b, [cnarr]
6780   2F28 74            mov d, b
6781   2F29 DA            push d
6782   2F2A 29 AF 30      mov b, [pos] ; pos
6783   2F2D E7            pop d
6784   2F2E 10 02 00      mov a, 2
6785   2F31 AC            mul a, b
6786   2F32 5A            add d, b
6787   2F33 DA            push d
6788   2F34 29 A5 30      mov b, [divres]
6789   2F37 D7            push a
6790   2F38 74            mov d, b
6791   2F39 DA            push d
6792   2F3A 29 AF 30      mov b, [pos] ; pos
6793   2F3D D7            push a
6794   2F3E 11            mov a, b
6795   2F3F 29 DF 30      mov b, [divi] ; divi
6796   2F42 54            add a, b
6797   2F43 27            mov b, a
6798   2F44 E4            pop a
6799   2F45 E7            pop d
6800   2F46 10 02 00      mov a, 2
6801   2F49 AC            mul a, b
6802   2F4A 5A            add d, b
6803   2F4B 2A            mov b, [d]
6804   2F4C E4            pop a
6805   2F4D E7            pop d
6806   2F4E 11            mov a, b
6807   2F4F 43            mov [d], a
6808   2F50 0A 53 2F      jmp _if127_exit
6809   2F53             _if127_exit:
6810   2F53             _for126_update:
6811   2F53 29 AF 30      mov b, [pos] ; pos
6812   2F56 11            mov a, b
6813   2F57 FD 77         inc b
6814   2F59 FD 42 AF 30   mov [pos], b
6815   2F5D 27            mov b, a
6816   2F5E 0A ED 2E      jmp _for126_cond
6817   2F61             _for126_exit:
6818   2F61 0A 64 2F      jmp _if125_exit
6819   2F64             _if125_exit:
6820   2F64 29 E3 30      mov b, [bkpcsign] ; bkpcsign
6821   2F67 FD 42 AB 30   mov [csign], b
6822   2F6B 07 46 15      call fixcsizezero
6823   2F6E 07 F7 14      call fixsignout
6824   2F71 F9            leave
6825   2F72 09            ret
6826   2F73             ; --- END TEXT BLOCK
6827   2F73             
6828   2F73             ; --- BEGIN DATA BLOCK
6829   2F73 0A 00       ss_data: .db "\n", 0
6830   2F75 73 2F       ss: .dw ss_data
6831   2F77 20 00       sp_data: .db " ", 0
6832   2F79 77 2F       sp: .dw sp_data
6833   2F7B             ionum_data: 
6834   2F7B 00 00 00 00 .dw 0,0,0,0,0,0,
6834   2F7F 00 00 00 00 
6834   2F83 00 00 00 00 
6835   2F87             .fill 0, 0
6836   2F87 7B 2F       ionum: .dw ionum_data
6837   2F89 00 00       ionr: .dw 0
6838   2F8B 00 00       ioshift: .dw 0
6839   2F8D             datum_data: 
6840   2F8D 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
6840   2F91 00 00 00 00 
6840   2F95 00 00 00 00 
6840   2F99 00 00 00 00 
6840   2F9D 00 00 00 00 
6840   2FA1 00 00 00 00 
6840   2FA5 00 00 00 00 
6840   2FA9 00 00 00 00 
6840   2FAD 00 00 00 00 
6841   2FB1 00 00 00 00 .fill 36, 0
6841   2FB5 00 00 00 00 
6841   2FB9 00 00 00 00 
6841   2FBD 00 00 00 00 
6841   2FC1 00 00 00 00 
6841   2FC5 00 00 00 00 
6841   2FC9 00 00 00 00 
6841   2FCD 00 00 00 00 
6841   2FD1 00 00 00 00 
6842   2FD5 8D 2F       datum: .dw datum_data
6843   2FD7 00 00       datumpos: .dw 0
6844   2FD9             anarr_data: 
6845   2FD9 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,
6845   2FDD 00 00 00 00 
6845   2FE1 00 00 00 00 
6845   2FE5 00 00 00 00 
6845   2FE9 00 00 00 00 
6845   2FED 00 00 00 00 
6846   2FF1             .fill 0, 0
6847   2FF1 D9 2F       anarr: .dw anarr_data
6848   2FF3             bnarr_data: 
6849   2FF3 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,
6849   2FF7 00 00 00 00 
6849   2FFB 00 00 00 00 
6849   2FFF 00 00 00 00 
6849   3003 00 00 00 00 
6849   3007 00 00 00 00 
6850   300B             .fill 0, 0
6851   300B F3 2F       bnarr: .dw bnarr_data
6852   300D             anarrbkp_data: 
6853   300D 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,
6853   3011 00 00 00 00 
6853   3015 00 00 00 00 
6853   3019 00 00 00 00 
6853   301D 00 00 00 00 
6853   3021 00 00 00 00 
6854   3025             .fill 0, 0
6855   3025 0D 30       anarrbkp: .dw anarrbkp_data
6856   3027             bnarrbkp_data: 
6857   3027 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,
6857   302B 00 00 00 00 
6857   302F 00 00 00 00 
6857   3033 00 00 00 00 
6857   3037 00 00 00 00 
6857   303B 00 00 00 00 
6858   303F             .fill 0, 0
6859   303F 27 30       bnarrbkp: .dw bnarrbkp_data
6860   3041             cnarr_data: 
6861   3041 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,
6861   3045 00 00 00 00 
6861   3049 00 00 00 00 
6861   304D 00 00 00 00 
6861   3051 00 00 00 00 
6861   3055 00 00 00 00 
6862   3059             .fill 0, 0
6863   3059 41 30       cnarr: .dw cnarr_data
6864   305B             mulres_data: 
6865   305B 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
6865   305F 00 00 00 00 
6865   3063 00 00 00 00 
6865   3067 00 00 00 00 
6865   306B 00 00 00 00 
6865   306F 00 00 00 00 
6865   3073 00 00 00 00 
6865   3077 00 00 00 00 
6865   307B 00 00 00 00 
6865   307F 00 00 00 00 
6865   3083 00 00 00 00 
6865   3087 00 00 00 00 
6866   308B             .fill 0, 0
6867   308B 5B 30       mulres: .dw mulres_data
6868   308D             divres_data: 
6869   308D 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,
6869   3091 00 00 00 00 
6869   3095 00 00 00 00 
6869   3099 00 00 00 00 
6869   309D 00 00 00 00 
6869   30A1 00 00 00 00 
6870   30A5             .fill 0, 0
6871   30A5 8D 30       divres: .dw divres_data
6872   30A7 00 00       asign: .dw 0
6873   30A9 00 00       bsign: .dw 0
6874   30AB 00 00       csign: .dw 0
6875   30AD 00 00       protopos: .dw 0
6876   30AF 00 00       pos: .dw 0
6877   30B1 00 00       carry: .dw 0
6878   30B3 00 00       nextcarry: .dw 0
6879   30B5 00 00       agtb: .dw 0
6880   30B7 00 00       bgta: .dw 0
6881   30B9 00 00       aeqb: .dw 0
6882   30BB 00 00       aneqb: .dw 0
6883   30BD 00 00       ageb: .dw 0
6884   30BF 00 00       bgea: .dw 0
6885   30C1 00 00       eqflag: .dw 0
6886   30C3 00 00       sizepos: .dw 0
6887   30C5 00 00       psizepos: .dw 0
6888   30C7 00 00       swappos: .dw 0
6889   30C9 00 00       swaptmp: .dw 0
6890   30CB 00 00       toolarge: .dw 0
6891   30CD 00 00       normal: .dw 0
6892   30CF 00 00       mulpos1: .dw 0
6893   30D1 00 00       mulpos2: .dw 0
6894   30D3 00 00       mulpos3: .dw 0
6895   30D5 00 00       brshift: .dw 0
6896   30D7 00 00       blshift: .dw 0
6897   30D9 00 00       alshift: .dw 0
6898   30DB 00 00       divcounter: .dw 0
6899   30DD 00 00       segmentcounter: .dw 0
6900   30DF 00 00       divi: .dw 0
6901   30E1 00 00       allzeroes: .dw 0
6902   30E3 00 00       bkpcsign: .dw 0
6903   30E5 00 00       divshift: .dw 0
6904   30E7             ; --- END DATA BLOCK
6905   30E7             
6906   30E7             ; --- BEGIN INCLUDE BLOCK
6907   30E7             .include "lib/stdio.asm"
0001+  30E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  30E7             ; stdio.s
0003+  30E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  30E7             .include "lib/string.asm"
0001++ 30E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 30E7             ; string.s
0003++ 30E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 30E7             
0005++ 30E7             
0006++ 30E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 30E7             ; strrev
0008++ 30E7             ; reverse a string
0009++ 30E7             ; D = string address
0010++ 30E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 30E7             ; 01234
0012++ 30E7             strrev:
0013++ 30E7 4B          	pusha
0014++ 30E8 07 2E 31    	call strlen	; length in C
0015++ 30EB 12          	mov a, c
0016++ 30EC AF 01 00    	cmp a, 1
0017++ 30EF D0 09 31    	jleu strrev_end	; check string length. string len must be > 1
0018++ 30F2 7D          	dec a
0019++ 30F3 FD 4E       	mov si, d	; beginning of string
0020++ 30F5 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 30F7 59          	add d, a	; end of string
0022++ 30F8 12          	mov a, c
0023++ 30F9 FD 9B       	shr a		; divide by 2
0024++ 30FB 39          	mov c, a	; C now counts the steps
0025++ 30FC             strrev_L0:
0026++ 30FC 32          	mov bl, [d]	; save load right-side char into BL
0027++ 30FD F6          	lodsb		; load left-side char into AL; increase SI
0028++ 30FE 3E          	mov [d], al	; store left char into right side
0029++ 30FF 1B          	mov al, bl
0030++ 3100 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 3101 7E          	dec c
0032++ 3102 7F          	dec d
0033++ 3103 C2 00 00    	cmp c, 0
0034++ 3106 C7 FC 30    	jne strrev_L0
0035++ 3109             strrev_end:
0036++ 3109 4C          	popa
0037++ 310A 09          	ret
0038++ 310B             	
0039++ 310B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 310B             ; strchr
0041++ 310B             ; search string in D for char in AL
0042++ 310B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 310B             strchr:
0044++ 310B             strchr_L0:
0045++ 310B 32          	mov bl, [d]
0046++ 310C C1 00       	cmp bl, 0
0047++ 310E C6 19 31    	je strchr_end
0048++ 3111 BA          	cmp al, bl
0049++ 3112 C6 19 31    	je strchr_end
0050++ 3115 79          	inc d
0051++ 3116 0A 0B 31    	jmp strchr_L0
0052++ 3119             strchr_end:
0053++ 3119 1B          	mov al, bl
0054++ 311A 09          	ret
0055++ 311B             
0056++ 311B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 311B             ; strstr
0058++ 311B             ; find sub-string
0059++ 311B             ; str1 in SI
0060++ 311B             ; str2 in DI
0061++ 311B             ; SI points to end of source string
0062++ 311B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 311B             strstr:
0064++ 311B DB          	push al
0065++ 311C DA          	push d
0066++ 311D E3          	push di
0067++ 311E             strstr_loop:
0068++ 311E F3          	cmpsb					; compare a byte of the strings
0069++ 311F C7 2A 31    	jne strstr_ret
0070++ 3122 FC 00 00    	lea d, [di + 0]
0071++ 3125 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 3127 C7 1E 31    	jne strstr_loop				; equal chars but not at end
0073++ 312A             strstr_ret:
0074++ 312A F0          	pop di
0075++ 312B E7          	pop d
0076++ 312C E8          	pop al
0077++ 312D 09          	ret
0078++ 312E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 312E             ; length of null terminated string
0080++ 312E             ; result in C
0081++ 312E             ; pointer in D
0082++ 312E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 312E             strlen:
0084++ 312E DA          	push d
0085++ 312F 38 00 00    	mov c, 0
0086++ 3132             strlen_L1:
0087++ 3132 BD 00       	cmp byte [d], 0
0088++ 3134 C6 3C 31    	je strlen_ret
0089++ 3137 79          	inc d
0090++ 3138 78          	inc c
0091++ 3139 0A 32 31    	jmp strlen_L1
0092++ 313C             strlen_ret:
0093++ 313C E7          	pop d
0094++ 313D 09          	ret
0095++ 313E             
0096++ 313E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 313E             ; STRCMP
0098++ 313E             ; compare two strings
0099++ 313E             ; str1 in SI
0100++ 313E             ; str2 in DI
0101++ 313E             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 313E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 313E             strcmp:
0104++ 313E DB          	push al
0105++ 313F DA          	push d
0106++ 3140 E3          	push di
0107++ 3141 E2          	push si
0108++ 3142             strcmp_loop:
0109++ 3142 F3          	cmpsb					; compare a byte of the strings
0110++ 3143 C7 4E 31    	jne strcmp_ret
0111++ 3146 FB FF FF    	lea d, [si +- 1]
0112++ 3149 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 314B C7 42 31    	jne strcmp_loop				; equal chars but not at end
0114++ 314E             strcmp_ret:
0115++ 314E EF          	pop si
0116++ 314F F0          	pop di
0117++ 3150 E7          	pop d
0118++ 3151 E8          	pop al
0119++ 3152 09          	ret
0120++ 3153             
0121++ 3153             
0122++ 3153             ; STRCPY
0123++ 3153             ; copy null terminated string from SI to DI
0124++ 3153             ; source in SI
0125++ 3153             ; destination in DI
0126++ 3153             strcpy:
0127++ 3153 E2          	push si
0128++ 3154 E3          	push di
0129++ 3155 DB          	push al
0130++ 3156             strcpy_L1:
0131++ 3156 F6          	lodsb
0132++ 3157 F7          	stosb
0133++ 3158 B9 00       	cmp al, 0
0134++ 315A C7 56 31    	jne strcpy_L1
0135++ 315D             strcpy_end:
0136++ 315D E8          	pop al
0137++ 315E F0          	pop di
0138++ 315F EF          	pop si
0139++ 3160 09          	ret
0140++ 3161             
0141++ 3161             ; STRCAT
0142++ 3161             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 3161             ; source in SI
0144++ 3161             ; destination in DI
0145++ 3161             strcat:
0146++ 3161 E2          	push si
0147++ 3162 E3          	push di
0148++ 3163 D7          	push a
0149++ 3164 DA          	push d
0150++ 3165 50          	mov a, di
0151++ 3166 3C          	mov d, a
0152++ 3167             strcat_goto_end_L1:
0153++ 3167 BD 00       	cmp byte[d], 0
0154++ 3169 C6 70 31    	je strcat_start
0155++ 316C 79          	inc d
0156++ 316D 0A 67 31    	jmp strcat_goto_end_L1
0157++ 3170             strcat_start:
0158++ 3170 FD 50       	mov di, d
0159++ 3172             strcat_L1:
0160++ 3172 F6          	lodsb
0161++ 3173 F7          	stosb
0162++ 3174 B9 00       	cmp al, 0
0163++ 3176 C7 72 31    	jne strcat_L1
0164++ 3179             strcat_end:
0165++ 3179 E7          	pop d
0166++ 317A E4          	pop a
0167++ 317B F0          	pop di
0168++ 317C EF          	pop si
0169++ 317D 09          	ret
0005+  317E             
0006+  317E 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  3182 34 35 36 37 
0006+  3186 38 39 41 42 
0006+  318A 43 44 45 46 
0007+  318E 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  3192 1B 5B 48 00 
0008+  3196             
0009+  3196 01 00       table_power:.dw 1
0010+  3198 0A 00       			.dw 10
0011+  319A 64 00       			.dw 100
0012+  319C E8 03       			.dw 1000
0013+  319E 10 27       			.dw 10000
0014+  31A0             
0015+  31A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  31A0             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  31A0             ; ASCII in BL
0018+  31A0             ; result in AL
0019+  31A0             ; ascii for F = 0100 0110
0020+  31A0             ; ascii for 9 = 0011 1001
0021+  31A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  31A0             hex_ascii_encode:
0023+  31A0 1B          	mov al, bl
0024+  31A1 93 40       	test al, $40				; test if letter or number
0025+  31A3 C7 A9 31    	jnz hex_letter
0026+  31A6 87 0F       	and al, $0F				; get number
0027+  31A8 09          	ret
0028+  31A9             hex_letter:
0029+  31A9 87 0F       	and al, $0F				; get letter
0030+  31AB 6A 09       	add al, 9
0031+  31AD 09          	ret
0032+  31AE             
0033+  31AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  31AE             ; ATOI
0035+  31AE             ; 2 letter hex string in B
0036+  31AE             ; 8bit integer returned in AL
0037+  31AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  31AE             atoi:
0039+  31AE D8          	push b
0040+  31AF 07 A0 31    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  31B2 30          	mov bl, bh
0042+  31B3 DB          	push al					; save a
0043+  31B4 07 A0 31    	call hex_ascii_encode
0044+  31B7 EA          	pop bl	
0045+  31B8 FD 9E 04    	shl al, 4
0046+  31BB 8C          	or al, bl
0047+  31BC E5          	pop b
0048+  31BD 09          	ret	
0049+  31BE             
0050+  31BE             
0051+  31BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  31BE             ; printf
0053+  31BE             ; no need for explanations!
0054+  31BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  31BE             printf:
0056+  31BE 09          	ret
0057+  31BF             
0058+  31BF             
0059+  31BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  31BF             ; scanf
0061+  31BF             ; no need for explanations!
0062+  31BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  31BF             scanf:
0064+  31BF 09          	ret
0065+  31C0             
0066+  31C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  31C0             ; ITOA
0068+  31C0             ; 8bit value in BL
0069+  31C0             ; 2 byte ASCII result in A
0070+  31C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  31C0             itoa:
0072+  31C0 DA          	push d
0073+  31C1 D8          	push b
0074+  31C2 A7 00       	mov bh, 0
0075+  31C4 FD A4 04    	shr bl, 4	
0076+  31C7 74          	mov d, b
0077+  31C8 1F 7E 31    	mov al, [d + s_hex_digits]
0078+  31CB 23          	mov ah, al
0079+  31CC             	
0080+  31CC E5          	pop b
0081+  31CD D8          	push b
0082+  31CE A7 00       	mov bh, 0
0083+  31D0 FD 87 0F    	and bl, $0F
0084+  31D3 74          	mov d, b
0085+  31D4 1F 7E 31    	mov al, [d + s_hex_digits]
0086+  31D7 E5          	pop b
0087+  31D8 E7          	pop d
0088+  31D9 09          	ret
0089+  31DA             
0090+  31DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  31DA             ; HEX STRING TO BINARY
0092+  31DA             ; di = destination address
0093+  31DA             ; si = source
0094+  31DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  31DA             hex_to_int:
0096+  31DA             hex_to_int_L1:
0097+  31DA F6          	lodsb					; load from [SI] to AL
0098+  31DB B9 00       	cmp al, 0				; check if ASCII 0
0099+  31DD C6 EA 31    	jz hex_to_int_ret
0100+  31E0 36          	mov bh, al
0101+  31E1 F6          	lodsb
0102+  31E2 2F          	mov bl, al
0103+  31E3 07 AE 31    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  31E6 F7          	stosb					; store AL to [DI]
0105+  31E7 0A DA 31    	jmp hex_to_int_L1
0106+  31EA             hex_to_int_ret:
0107+  31EA 09          	ret		
0108+  31EB             
0109+  31EB             
0110+  31EB             
0111+  31EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  31EB             ; GETCHAR
0113+  31EB             ; char in ah
0114+  31EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  31EB             getchar:
0116+  31EB DB          	push al
0117+  31EC             getchar_retry:
0118+  31EC FD 0C       	sti
0119+  31EE 19 01       	mov al, 1
0120+  31F0 05 03       	syscall sys_io			; receive in AH
0121+  31F2 B9 00       	cmp al, 0			; check if any char was receive
0122+  31F4 C6 EC 31    	je getchar_retry
0123+  31F7 E8          	pop al
0124+  31F8 09          	ret
0125+  31F9             
0126+  31F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  31F9             ; PUTCHAR
0128+  31F9             ; char in ah
0129+  31F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  31F9             putchar:
0131+  31F9 D7          	push a
0132+  31FA 19 00       	mov al, 0
0133+  31FC 05 03       	syscall sys_io			; char in AH
0134+  31FE E4          	pop a
0135+  31FF 09          	ret
0136+  3200             
0137+  3200             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  3200             ;; INPUT A STRING
0139+  3200             ;; terminates with null
0140+  3200             ;; pointer in D
0141+  3200             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  3200             gets:
0143+  3200 D7          	push a
0144+  3201 DA          	push d
0145+  3202             gets_loop:
0146+  3202 FD 0C       	sti
0147+  3204 19 01       	mov al, 1
0148+  3206 05 03       	syscall sys_io			; receive in AH
0149+  3208 B9 00       	cmp al, 0				; check error code (AL)
0150+  320A C6 02 32    	je gets_loop			; if no char received, retry
0151+  320D             
0152+  320D 76 1B       	cmp ah, 27
0153+  320F C6 30 32    	je gets_telnet_escape
0154+  3212 76 0A       	cmp ah, $0A				; LF
0155+  3214 C6 89 32    	je gets_end
0156+  3217 76 0D       	cmp ah, $0D				; CR
0157+  3219 C6 89 32    	je gets_end
0158+  321C 76 5C       	cmp ah, $5C				; '\\'
0159+  321E C6 60 32    	je gets_escape
0160+  3221             	
0161+  3221 76 08       	cmp ah, $08			; check for backspace
0162+  3223 C6 2C 32    	je gets_backspace
0163+  3226             
0164+  3226 1A          	mov al, ah
0165+  3227 3E          	mov [d], al
0166+  3228 79          	inc d
0167+  3229 0A 02 32    	jmp gets_loop
0168+  322C             gets_backspace:
0169+  322C 7F          	dec d
0170+  322D 0A 02 32    	jmp gets_loop
0171+  3230             gets_telnet_escape:
0172+  3230 FD 0C       	sti
0173+  3232 19 01       	mov al, 1
0174+  3234 05 03       	syscall sys_io				; receive in AH without echo
0175+  3236 B9 00       	cmp al, 0					; check error code (AL)
0176+  3238 C6 30 32    	je gets_telnet_escape		; if no char received, retry
0177+  323B 76 5B       	cmp ah, '['
0178+  323D C7 02 32    	jne gets_loop
0179+  3240             gets_telnet_escape_phase2:
0180+  3240 FD 0C       	sti
0181+  3242 19 01       	mov al, 1
0182+  3244 05 03       	syscall sys_io					; receive in AH without echo
0183+  3246 B9 00       	cmp al, 0						; check error code (AL)
0184+  3248 C6 40 32    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  324B 76 44       	cmp ah, 'D'
0186+  324D C6 58 32    	je gets_left_arrow
0187+  3250 76 43       	cmp ah, 'C'
0188+  3252 C6 5C 32    	je gets_right_arrow
0189+  3255 0A 02 32    	jmp gets_loop
0190+  3258             gets_left_arrow:
0191+  3258 7F          	dec d
0192+  3259 0A 02 32    	jmp gets_loop
0193+  325C             gets_right_arrow:
0194+  325C 79          	inc d
0195+  325D 0A 02 32    	jmp gets_loop
0196+  3260             gets_escape:
0197+  3260 FD 0C       	sti
0198+  3262 19 01       	mov al, 1
0199+  3264 05 03       	syscall sys_io			; receive in AH
0200+  3266 B9 00       	cmp al, 0				; check error code (AL)
0201+  3268 C6 60 32    	je gets_escape			; if no char received, retry
0202+  326B 76 6E       	cmp ah, 'n'
0203+  326D C6 7B 32    	je gets_LF
0204+  3270 76 72       	cmp ah, 'r'
0205+  3272 C6 82 32    	je gets_CR
0206+  3275 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  3276 3E          	mov [d], al
0208+  3277 79          	inc d
0209+  3278 0A 02 32    	jmp gets_loop
0210+  327B             gets_LF:
0211+  327B 19 0A       	mov al, $0A
0212+  327D 3E          	mov [d], al
0213+  327E 79          	inc d
0214+  327F 0A 02 32    	jmp gets_loop
0215+  3282             gets_CR:
0216+  3282 19 0D       	mov al, $0D
0217+  3284 3E          	mov [d], al
0218+  3285 79          	inc d
0219+  3286 0A 02 32    	jmp gets_loop
0220+  3289             gets_end:
0221+  3289 19 00       	mov al, 0
0222+  328B 3E          	mov [d], al				; terminate string
0223+  328C E7          	pop d
0224+  328D E4          	pop a
0225+  328E 09          	ret
0226+  328F             
0227+  328F             
0228+  328F             
0229+  328F             
0230+  328F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  328F             ;; INPUT TEXT
0232+  328F             ;; terminated with CTRL+D
0233+  328F             ;; pointer in D
0234+  328F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  328F             gettxt:
0236+  328F D7          	push a
0237+  3290 DA          	push d
0238+  3291             gettxt_loop:
0239+  3291 19 01       	mov al, 1
0240+  3293 05 03       	syscall sys_io			; receive in AH
0241+  3295 B9 00       	cmp al, 0				; check error code (AL)
0242+  3297 C6 91 32    	je gettxt_loop		; if no char received, retry
0243+  329A 76 04       	cmp ah, 4			; EOT
0244+  329C C6 DA 32    	je gettxt_end
0245+  329F 76 08       	cmp ah, $08			; check for backspace
0246+  32A1 C6 D6 32    	je gettxt_backspace
0247+  32A4 76 5C       	cmp ah, $5C				; '\\'
0248+  32A6 C6 AF 32    	je gettxt_escape
0249+  32A9 1A          	mov al, ah
0250+  32AA 3E          	mov [d], al
0251+  32AB 79          	inc d
0252+  32AC 0A 91 32    	jmp gettxt_loop
0253+  32AF             gettxt_escape:
0254+  32AF 19 01       	mov al, 1
0255+  32B1 05 03       	syscall sys_io			; receive in AH
0256+  32B3 B9 00       	cmp al, 0				; check error code (AL)
0257+  32B5 C6 AF 32    	je gettxt_escape		; if no char received, retry
0258+  32B8 76 6E       	cmp ah, 'n'
0259+  32BA C6 C8 32    	je gettxt_LF
0260+  32BD 76 72       	cmp ah, 'r'
0261+  32BF C6 CF 32    	je gettxt_CR
0262+  32C2 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  32C3 3E          	mov [d], al
0264+  32C4 79          	inc d
0265+  32C5 0A 91 32    	jmp gettxt_loop
0266+  32C8             gettxt_LF:
0267+  32C8 19 0A       	mov al, $0A
0268+  32CA 3E          	mov [d], al
0269+  32CB 79          	inc d
0270+  32CC 0A 91 32    	jmp gettxt_loop
0271+  32CF             gettxt_CR:
0272+  32CF 19 0D       	mov al, $0D
0273+  32D1 3E          	mov [d], al
0274+  32D2 79          	inc d
0275+  32D3 0A 91 32    	jmp gettxt_loop
0276+  32D6             gettxt_backspace:
0277+  32D6 7F          	dec d
0278+  32D7 0A 91 32    	jmp gettxt_loop
0279+  32DA             gettxt_end:
0280+  32DA 19 00       	mov al, 0
0281+  32DC 3E          	mov [d], al				; terminate string
0282+  32DD E7          	pop d
0283+  32DE E4          	pop a
0284+  32DF 09          	ret
0285+  32E0             
0286+  32E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  32E0             ; PRINT NEW LINE
0288+  32E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  32E0             printnl:
0290+  32E0 D7          	push a
0291+  32E1 10 00 0A    	mov a, $0A00
0292+  32E4 05 03       	syscall sys_io
0293+  32E6 10 00 0D    	mov a, $0D00
0294+  32E9 05 03       	syscall sys_io
0295+  32EB E4          	pop a
0296+  32EC 09          	ret
0297+  32ED             
0298+  32ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  32ED             ; strtoint
0300+  32ED             ; 4 digit hex string number in d
0301+  32ED             ; integer returned in A
0302+  32ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  32ED             strtointx:
0304+  32ED D8          	push b
0305+  32EE 32          	mov bl, [d]
0306+  32EF 37          	mov bh, bl
0307+  32F0 33 01 00    	mov bl, [d + 1]
0308+  32F3 07 AE 31    	call atoi				; convert to int in AL
0309+  32F6 23          	mov ah, al				; move to AH
0310+  32F7 33 02 00    	mov bl, [d + 2]
0311+  32FA 37          	mov bh, bl
0312+  32FB 33 03 00    	mov bl, [d + 3]
0313+  32FE 07 AE 31    	call atoi				; convert to int in AL
0314+  3301 E5          	pop b
0315+  3302 09          	ret
0316+  3303             
0317+  3303             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  3303             ; strtoint
0319+  3303             ; 5 digit base10 string number in d
0320+  3303             ; integer returned in A
0321+  3303             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  3303             strtoint:
0323+  3303 E2          	push si
0324+  3304 D8          	push b
0325+  3305 D9          	push c
0326+  3306 DA          	push d
0327+  3307 07 2E 31    	call strlen			; get string length in C
0328+  330A 7E          	dec c
0329+  330B FD 4E       	mov si, d
0330+  330D 12          	mov a, c
0331+  330E FD 99       	shl a
0332+  3310 3B 96 31    	mov d, table_power
0333+  3313 59          	add d, a
0334+  3314 38 00 00    	mov c, 0
0335+  3317             strtoint_L0:
0336+  3317 F6          	lodsb			; load ASCII to al
0337+  3318 B9 00       	cmp al, 0
0338+  331A C6 2D 33    	je strtoint_end
0339+  331D 6F 30       	sub al, $30		; make into integer
0340+  331F 22 00       	mov ah, 0
0341+  3321 2A          	mov b, [d]
0342+  3322 AC          	mul a, b			; result in B since it fits in 16bits
0343+  3323 11          	mov a, b
0344+  3324 28          	mov b, c
0345+  3325 54          	add a, b
0346+  3326 39          	mov c, a
0347+  3327 63 02 00    	sub d, 2
0348+  332A 0A 17 33    	jmp strtoint_L0
0349+  332D             strtoint_end:
0350+  332D 12          	mov a, c
0351+  332E E7          	pop d
0352+  332F E6          	pop c
0353+  3330 E5          	pop b
0354+  3331 EF          	pop si
0355+  3332 09          	ret
0356+  3333             
0357+  3333             
0358+  3333             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  3333             ; PRINT NULL TERMINATED STRING
0360+  3333             ; pointer in D
0361+  3333             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  3333             puts:
0363+  3333 D7          	push a
0364+  3334 DA          	push d
0365+  3335             puts_L1:
0366+  3335 1E          	mov al, [d]
0367+  3336 B9 00       	cmp al, 0
0368+  3338 C6 44 33    	jz puts_END
0369+  333B 23          	mov ah, al
0370+  333C 19 00       	mov al, 0
0371+  333E 05 03       	syscall sys_io
0372+  3340 79          	inc d
0373+  3341 0A 35 33    	jmp puts_L1
0374+  3344             puts_END:
0375+  3344 E7          	pop d
0376+  3345 E4          	pop a
0377+  3346 09          	ret
0378+  3347             
0379+  3347             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  3347             ; PRINT N SIZE STRING
0381+  3347             ; pointer in D
0382+  3347             ; size in C
0383+  3347             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  3347             putsn:
0385+  3347 DB          	push al
0386+  3348 DA          	push d
0387+  3349 D9          	push c
0388+  334A             putsn_L0:
0389+  334A 1E          	mov al, [d]
0390+  334B 23          	mov ah, al
0391+  334C 19 00       	mov al, 0
0392+  334E 05 03       	syscall sys_io
0393+  3350 79          	inc d
0394+  3351 7E          	dec c	
0395+  3352 C2 00 00    	cmp c, 0
0396+  3355 C7 4A 33    	jne putsn_L0
0397+  3358             putsn_end:
0398+  3358 E6          	pop c
0399+  3359 E7          	pop d
0400+  335A E8          	pop al
0401+  335B 09          	ret
0402+  335C             
0403+  335C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  335C             ; print 16bit decimal number
0405+  335C             ; input number in A
0406+  335C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  335C             print_u16d:
0408+  335C D7          	push a
0409+  335D D8          	push b
0410+  335E 26 10 27    	mov b, 10000
0411+  3361 AE          	div a, b			; get 10000 coeff.
0412+  3362 07 88 33    	call print_number
0413+  3365 11          	mov a, b
0414+  3366 26 E8 03    	mov b, 1000
0415+  3369 AE          	div a, b			; get 10000 coeff.
0416+  336A 07 88 33    	call print_number
0417+  336D 11          	mov a, b
0418+  336E 26 64 00    	mov b, 100
0419+  3371 AE          	div a, b
0420+  3372 07 88 33    	call print_number
0421+  3375 11          	mov a, b
0422+  3376 26 0A 00    	mov b, 10
0423+  3379 AE          	div a, b
0424+  337A 07 88 33    	call print_number
0425+  337D 11          	mov a, b
0426+  337E 6A 30       	add al, $30
0427+  3380 23          	mov ah, al
0428+  3381 19 00       	mov al, 0
0429+  3383 05 03       	syscall sys_io	; print coeff
0430+  3385 E5          	pop b
0431+  3386 E4          	pop a
0432+  3387 09          	ret
0433+  3388             
0434+  3388             
0435+  3388             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  3388             ; if A == 0, print space
0437+  3388             ; else print A
0438+  3388             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  3388             print_number:
0440+  3388 6A 30       	add al, $30
0441+  338A 23          	mov ah, al
0442+  338B 07 F9 31    	call putchar
0443+  338E 09          	ret
0444+  338F             
0445+  338F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  338F             ; PRINT 16BIT HEX INTEGER
0447+  338F             ; integer value in reg B
0448+  338F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  338F             print_u16x:
0450+  338F D7          	push a
0451+  3390 D8          	push b
0452+  3391 DD          	push bl
0453+  3392 30          	mov bl, bh
0454+  3393 07 C0 31    	call itoa				; convert bh to char in A
0455+  3396 2F          	mov bl, al				; save al
0456+  3397 19 00       	mov al, 0
0457+  3399 05 03       	syscall sys_io				; display AH
0458+  339B 24          	mov ah, bl				; retrieve al
0459+  339C 19 00       	mov al, 0
0460+  339E 05 03       	syscall sys_io				; display AL
0461+  33A0             
0462+  33A0 EA          	pop bl
0463+  33A1 07 C0 31    	call itoa				; convert bh to char in A
0464+  33A4 2F          	mov bl, al				; save al
0465+  33A5 19 00       	mov al, 0
0466+  33A7 05 03       	syscall sys_io				; display AH
0467+  33A9 24          	mov ah, bl				; retrieve al
0468+  33AA 19 00       	mov al, 0
0469+  33AC 05 03       	syscall sys_io				; display AL
0470+  33AE             
0471+  33AE E5          	pop b
0472+  33AF E4          	pop a
0473+  33B0 09          	ret
0474+  33B1             
0475+  33B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  33B1             ; INPUT 16BIT HEX INTEGER
0477+  33B1             ; read 16bit integer into A
0478+  33B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  33B1             scan_u16x:
0480+  33B1 F8 10 00    	enter 16
0481+  33B4 D8          	push b
0482+  33B5 DA          	push d
0483+  33B6             
0484+  33B6 FA F1 FF    	lea d, [bp + -15]
0485+  33B9 07 00 32    	call gets				; get number
0486+  33BC             
0487+  33BC 32          	mov bl, [d]
0488+  33BD 37          	mov bh, bl
0489+  33BE 33 01 00    	mov bl, [d + 1]
0490+  33C1 07 AE 31    	call atoi				; convert to int in AL
0491+  33C4 23          	mov ah, al				; move to AH
0492+  33C5             
0493+  33C5 33 02 00    	mov bl, [d + 2]
0494+  33C8 37          	mov bh, bl
0495+  33C9 33 03 00    	mov bl, [d + 3]
0496+  33CC 07 AE 31    	call atoi				; convert to int in AL
0497+  33CF             
0498+  33CF E7          	pop d
0499+  33D0 E5          	pop b
0500+  33D1 F9          	leave
0501+  33D2 09          	ret
0502+  33D3             
0503+  33D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  33D3             ; PRINT 8bit HEX INTEGER
0505+  33D3             ; integer value in reg bl
0506+  33D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  33D3             print_u8x:
0508+  33D3 D7          	push a
0509+  33D4 DD          	push bl
0510+  33D5             
0511+  33D5 07 C0 31    	call itoa				; convert bl to char in A
0512+  33D8 2F          	mov bl, al				; save al
0513+  33D9 19 00       	mov al, 0
0514+  33DB 05 03       	syscall sys_io				; display AH
0515+  33DD 24          	mov ah, bl				; retrieve al
0516+  33DE 19 00       	mov al, 0
0517+  33E0 05 03       	syscall sys_io				; display AL
0518+  33E2             
0519+  33E2 EA          	pop bl
0520+  33E3 E4          	pop a
0521+  33E4 09          	ret
0522+  33E5             
0523+  33E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  33E5             ; print 8bit decimal unsigned number
0525+  33E5             ; input number in AL
0526+  33E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  33E5             print_u8d:
0528+  33E5 D7          	push a
0529+  33E6 D8          	push b
0530+  33E7             
0531+  33E7 22 00       	mov ah, 0
0532+  33E9 26 64 00    	mov b, 100
0533+  33EC AE          	div a, b
0534+  33ED D8          	push b			; save remainder
0535+  33EE B9 00       	cmp al, 0
0536+  33F0 C6 FA 33    	je skip100
0537+  33F3 6A 30       	add al, $30
0538+  33F5 23          	mov ah, al
0539+  33F6 19 00       	mov al, 0
0540+  33F8 05 03       	syscall sys_io	; print coeff
0541+  33FA             skip100:
0542+  33FA E4          	pop a
0543+  33FB 22 00       	mov ah, 0
0544+  33FD 26 0A 00    	mov b, 10
0545+  3400 AE          	div a, b
0546+  3401 D8          	push b			; save remainder
0547+  3402 B9 00       	cmp al, 0
0548+  3404 C6 0E 34    	je skip10
0549+  3407 6A 30       	add al, $30
0550+  3409 23          	mov ah, al
0551+  340A 19 00       	mov al, 0
0552+  340C 05 03       	syscall sys_io	; print coeff
0553+  340E             skip10:
0554+  340E E4          	pop a
0555+  340F 1B          	mov al, bl
0556+  3410 6A 30       	add al, $30
0557+  3412 23          	mov ah, al
0558+  3413 19 00       	mov al, 0
0559+  3415 05 03       	syscall sys_io	; print coeff
0560+  3417 E5          	pop b
0561+  3418 E4          	pop a
0562+  3419 09          	ret
0563+  341A             
0564+  341A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  341A             ; INPUT 8BIT HEX INTEGER
0566+  341A             ; read 8bit integer into AL
0567+  341A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  341A             scan_u8x:
0569+  341A F8 04 00    	enter 4
0570+  341D D8          	push b
0571+  341E DA          	push d
0572+  341F             
0573+  341F FA FD FF    	lea d, [bp + -3]
0574+  3422 07 00 32    	call gets				; get number
0575+  3425             
0576+  3425 32          	mov bl, [d]
0577+  3426 37          	mov bh, bl
0578+  3427 33 01 00    	mov bl, [d + 1]
0579+  342A 07 AE 31    	call atoi				; convert to int in AL
0580+  342D             
0581+  342D E7          	pop d
0582+  342E E5          	pop b
0583+  342F F9          	leave
0584+  3430 09          	ret
0585+  3431             
0586+  3431             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  3431             ; input decimal number
0588+  3431             ; result in A
0589+  3431             ; 655'\0'
0590+  3431             ; low--------high
0591+  3431             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  3431             scan_u16d:
0593+  3431 F8 08 00    	enter 8
0594+  3434 E2          	push si
0595+  3435 D8          	push b
0596+  3436 D9          	push c
0597+  3437 DA          	push d
0598+  3438 FA F9 FF    	lea d, [bp +- 7]
0599+  343B 07 00 32    	call gets
0600+  343E 07 2E 31    	call strlen			; get string length in C
0601+  3441 7E          	dec c
0602+  3442 FD 4E       	mov si, d
0603+  3444 12          	mov a, c
0604+  3445 FD 99       	shl a
0605+  3447 3B 96 31    	mov d, table_power
0606+  344A 59          	add d, a
0607+  344B 38 00 00    	mov c, 0
0608+  344E             mul_loop:
0609+  344E F6          	lodsb			; load ASCII to al
0610+  344F B9 00       	cmp al, 0
0611+  3451 C6 64 34    	je mul_exit
0612+  3454 6F 30       	sub al, $30		; make into integer
0613+  3456 22 00       	mov ah, 0
0614+  3458 2A          	mov b, [d]
0615+  3459 AC          	mul a, b			; result in B since it fits in 16bits
0616+  345A 11          	mov a, b
0617+  345B 28          	mov b, c
0618+  345C 54          	add a, b
0619+  345D 39          	mov c, a
0620+  345E 63 02 00    	sub d, 2
0621+  3461 0A 4E 34    	jmp mul_loop
0622+  3464             mul_exit:
0623+  3464 12          	mov a, c
0624+  3465 E7          	pop d
0625+  3466 E6          	pop c
0626+  3467 E5          	pop b
0627+  3468 EF          	pop si
0628+  3469 F9          	leave
0629+  346A 09          	ret
6908   346B             ; --- END INCLUDE BLOCK
6909   346B             
6910   346B             
6911   346B             .end
tasm: Number of errors = 0
