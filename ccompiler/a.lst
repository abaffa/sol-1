0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; a
0010   0405 FA FF FF      lea d, [bp + -1]
0011   0408 2D            mov b, d
0012   0409 FD AB         swp b
0013   040B D8            push b
0014   040C 07 24 04      call scann
0015   040F 51 02 00      add sp, 2
0016   0412 2C FF FF      mov b, [bp + -1] ; a
0017   0415 FD AB         swp b
0018   0417 D8            push b
0019   0418 07 3B 04      call printn
0020   041B 51 02 00      add sp, 2
0021   041E 26 00 00      mov b, 0
0022   0421 F9            leave
0023   0422 05 0B         syscall sys_terminate_proc
0024   0424             scann:
0025   0424 D2            push bp
0026   0425 9B            mov bp, sp
0027   0426 52 02 00      sub sp, 2 ; m
0028   0429             
0029   0429             ; --- BEGIN INLINE ASM BLOCK
0030   0429 07 9A 07      call scan_u16d
0031   042C 45 FF FF      mov [bp + -1], a
0032   042F             ; --- END INLINE ASM BLOCK
0033   042F             
0034   042F FA 05 00      lea d, [bp + 5] ; n
0035   0432 2A            mov b, [d]
0036   0433 74            mov d, b
0037   0434 2C FF FF      mov b, [bp + -1] ; m
0038   0437 11            mov a, b
0039   0438 43            mov [d], a
0040   0439 F9            leave
0041   043A 09            ret
0042   043B             printn:
0043   043B D2            push bp
0044   043C 9B            mov bp, sp
0045   043D             
0046   043D             ; --- BEGIN INLINE ASM BLOCK
0047   043D 17 05 00      mov a, [bp + 5]
0048   0440 07 C5 06      call print_u16d
0049   0443             ; --- END INLINE ASM BLOCK
0050   0443             
0051   0443 F9            leave
0052   0444 09            ret
0053   0445             print:
0054   0445 D2            push bp
0055   0446 9B            mov bp, sp
0056   0447             
0057   0447             ; --- BEGIN INLINE ASM BLOCK
0058   0447 17 05 00      mov a, [bp + 5]
0059   044A 3C            mov d, a
0060   044B 07 9C 06      call puts
0061   044E             ; --- END INLINE ASM BLOCK
0062   044E             
0063   044E F9            leave
0064   044F 09            ret
0065   0450             ; --- END TEXT BLOCK
0066   0450             
0067   0450             ; --- BEGIN DATA BLOCK
0068   0450             ; --- END DATA BLOCK
0069   0450             
0070   0450             ; --- BEGIN INCLUDE BLOCK
0071   0450             .include "lib/stdio.asm"
0001+  0450             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0450             ; stdio.s
0003+  0450             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0450             .include "lib/string.asm"
0001++ 0450             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0450             ; string.s
0003++ 0450             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0450             
0005++ 0450             
0006++ 0450             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0450             ; strrev
0008++ 0450             ; reverse a string
0009++ 0450             ; D = string address
0010++ 0450             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0450             ; 01234
0012++ 0450             strrev:
0013++ 0450 4B          	pusha
0014++ 0451 07 97 04    	call strlen	; length in C
0015++ 0454 12          	mov a, c
0016++ 0455 AF 01 00    	cmp a, 1
0017++ 0458 D0 72 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 045B 7D          	dec a
0019++ 045C FD 4E       	mov si, d	; beginning of string
0020++ 045E FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0460 59          	add d, a	; end of string
0022++ 0461 12          	mov a, c
0023++ 0462 FD 9B       	shr a		; divide by 2
0024++ 0464 39          	mov c, a	; C now counts the steps
0025++ 0465             strrev_L0:
0026++ 0465 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0466 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0467 3E          	mov [d], al	; store left char into right side
0029++ 0468 1B          	mov al, bl
0030++ 0469 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 046A 7E          	dec c
0032++ 046B 7F          	dec d
0033++ 046C C2 00 00    	cmp c, 0
0034++ 046F C7 65 04    	jne strrev_L0
0035++ 0472             strrev_end:
0036++ 0472 4C          	popa
0037++ 0473 09          	ret
0038++ 0474             	
0039++ 0474             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0474             ; strchr
0041++ 0474             ; search string in D for char in AL
0042++ 0474             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0474             strchr:
0044++ 0474             strchr_L0:
0045++ 0474 32          	mov bl, [d]
0046++ 0475 C1 00       	cmp bl, 0
0047++ 0477 C6 82 04    	je strchr_end
0048++ 047A BA          	cmp al, bl
0049++ 047B C6 82 04    	je strchr_end
0050++ 047E 79          	inc d
0051++ 047F 0A 74 04    	jmp strchr_L0
0052++ 0482             strchr_end:
0053++ 0482 1B          	mov al, bl
0054++ 0483 09          	ret
0055++ 0484             
0056++ 0484             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0484             ; strstr
0058++ 0484             ; find sub-string
0059++ 0484             ; str1 in SI
0060++ 0484             ; str2 in DI
0061++ 0484             ; SI points to end of source string
0062++ 0484             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0484             strstr:
0064++ 0484 DB          	push al
0065++ 0485 DA          	push d
0066++ 0486 E3          	push di
0067++ 0487             strstr_loop:
0068++ 0487 F3          	cmpsb					; compare a byte of the strings
0069++ 0488 C7 93 04    	jne strstr_ret
0070++ 048B FC 00 00    	lea d, [di + 0]
0071++ 048E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0490 C7 87 04    	jne strstr_loop				; equal chars but not at end
0073++ 0493             strstr_ret:
0074++ 0493 F0          	pop di
0075++ 0494 E7          	pop d
0076++ 0495 E8          	pop al
0077++ 0496 09          	ret
0078++ 0497             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0497             ; length of null terminated string
0080++ 0497             ; result in C
0081++ 0497             ; pointer in D
0082++ 0497             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0497             strlen:
0084++ 0497 DA          	push d
0085++ 0498 38 00 00    	mov c, 0
0086++ 049B             strlen_L1:
0087++ 049B BD 00       	cmp byte [d], 0
0088++ 049D C6 A5 04    	je strlen_ret
0089++ 04A0 79          	inc d
0090++ 04A1 78          	inc c
0091++ 04A2 0A 9B 04    	jmp strlen_L1
0092++ 04A5             strlen_ret:
0093++ 04A5 E7          	pop d
0094++ 04A6 09          	ret
0095++ 04A7             
0096++ 04A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04A7             ; STRCMP
0098++ 04A7             ; compare two strings
0099++ 04A7             ; str1 in SI
0100++ 04A7             ; str2 in DI
0101++ 04A7             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04A7             strcmp:
0104++ 04A7 DB          	push al
0105++ 04A8 DA          	push d
0106++ 04A9 E3          	push di
0107++ 04AA E2          	push si
0108++ 04AB             strcmp_loop:
0109++ 04AB F3          	cmpsb					; compare a byte of the strings
0110++ 04AC C7 B7 04    	jne strcmp_ret
0111++ 04AF FB FF FF    	lea d, [si +- 1]
0112++ 04B2 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04B4 C7 AB 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04B7             strcmp_ret:
0115++ 04B7 EF          	pop si
0116++ 04B8 F0          	pop di
0117++ 04B9 E7          	pop d
0118++ 04BA E8          	pop al
0119++ 04BB 09          	ret
0120++ 04BC             
0121++ 04BC             
0122++ 04BC             ; STRCPY
0123++ 04BC             ; copy null terminated string from SI to DI
0124++ 04BC             ; source in SI
0125++ 04BC             ; destination in DI
0126++ 04BC             strcpy:
0127++ 04BC E2          	push si
0128++ 04BD E3          	push di
0129++ 04BE DB          	push al
0130++ 04BF             strcpy_L1:
0131++ 04BF F6          	lodsb
0132++ 04C0 F7          	stosb
0133++ 04C1 B9 00       	cmp al, 0
0134++ 04C3 C7 BF 04    	jne strcpy_L1
0135++ 04C6             strcpy_end:
0136++ 04C6 E8          	pop al
0137++ 04C7 F0          	pop di
0138++ 04C8 EF          	pop si
0139++ 04C9 09          	ret
0140++ 04CA             
0141++ 04CA             ; STRCAT
0142++ 04CA             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04CA             ; source in SI
0144++ 04CA             ; destination in DI
0145++ 04CA             strcat:
0146++ 04CA E2          	push si
0147++ 04CB E3          	push di
0148++ 04CC D7          	push a
0149++ 04CD DA          	push d
0150++ 04CE 50          	mov a, di
0151++ 04CF 3C          	mov d, a
0152++ 04D0             strcat_goto_end_L1:
0153++ 04D0 BD 00       	cmp byte[d], 0
0154++ 04D2 C6 D9 04    	je strcat_start
0155++ 04D5 79          	inc d
0156++ 04D6 0A D0 04    	jmp strcat_goto_end_L1
0157++ 04D9             strcat_start:
0158++ 04D9 FD 50       	mov di, d
0159++ 04DB             strcat_L1:
0160++ 04DB F6          	lodsb
0161++ 04DC F7          	stosb
0162++ 04DD B9 00       	cmp al, 0
0163++ 04DF C7 DB 04    	jne strcat_L1
0164++ 04E2             strcat_end:
0165++ 04E2 E7          	pop d
0166++ 04E3 E4          	pop a
0167++ 04E4 F0          	pop di
0168++ 04E5 EF          	pop si
0169++ 04E6 09          	ret
0005+  04E7             
0006+  04E7 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  04EB 34 35 36 37 
0006+  04EF 38 39 41 42 
0006+  04F3 43 44 45 46 
0007+  04F7 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  04FB 1B 5B 48 00 
0008+  04FF             
0009+  04FF 01 00       table_power:.dw 1
0010+  0501 0A 00       			.dw 10
0011+  0503 64 00       			.dw 100
0012+  0505 E8 03       			.dw 1000
0013+  0507 10 27       			.dw 10000
0014+  0509             
0015+  0509             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0509             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0509             ; ASCII in BL
0018+  0509             ; result in AL
0019+  0509             ; ascii for F = 0100 0110
0020+  0509             ; ascii for 9 = 0011 1001
0021+  0509             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0509             hex_ascii_encode:
0023+  0509 1B          	mov al, bl
0024+  050A 93 40       	test al, $40				; test if letter or number
0025+  050C C7 12 05    	jnz hex_letter
0026+  050F 87 0F       	and al, $0F				; get number
0027+  0511 09          	ret
0028+  0512             hex_letter:
0029+  0512 87 0F       	and al, $0F				; get letter
0030+  0514 6A 09       	add al, 9
0031+  0516 09          	ret
0032+  0517             
0033+  0517             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0517             ; ATOI
0035+  0517             ; 2 letter hex string in B
0036+  0517             ; 8bit integer returned in AL
0037+  0517             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0517             atoi:
0039+  0517 D8          	push b
0040+  0518 07 09 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  051B 30          	mov bl, bh
0042+  051C DB          	push al					; save a
0043+  051D 07 09 05    	call hex_ascii_encode
0044+  0520 EA          	pop bl	
0045+  0521 FD 9E 04    	shl al, 4
0046+  0524 8C          	or al, bl
0047+  0525 E5          	pop b
0048+  0526 09          	ret	
0049+  0527             
0050+  0527             
0051+  0527             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0527             ; printf
0053+  0527             ; no need for explanations!
0054+  0527             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0527             printf:
0056+  0527 09          	ret
0057+  0528             
0058+  0528             
0059+  0528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0528             ; scanf
0061+  0528             ; no need for explanations!
0062+  0528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0528             scanf:
0064+  0528 09          	ret
0065+  0529             
0066+  0529             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0529             ; ITOA
0068+  0529             ; 8bit value in BL
0069+  0529             ; 2 byte ASCII result in A
0070+  0529             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0529             itoa:
0072+  0529 DA          	push d
0073+  052A D8          	push b
0074+  052B A7 00       	mov bh, 0
0075+  052D FD A4 04    	shr bl, 4	
0076+  0530 74          	mov d, b
0077+  0531 1F E7 04    	mov al, [d + s_hex_digits]
0078+  0534 23          	mov ah, al
0079+  0535             	
0080+  0535 E5          	pop b
0081+  0536 D8          	push b
0082+  0537 A7 00       	mov bh, 0
0083+  0539 FD 87 0F    	and bl, $0F
0084+  053C 74          	mov d, b
0085+  053D 1F E7 04    	mov al, [d + s_hex_digits]
0086+  0540 E5          	pop b
0087+  0541 E7          	pop d
0088+  0542 09          	ret
0089+  0543             
0090+  0543             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0543             ; HEX STRING TO BINARY
0092+  0543             ; di = destination address
0093+  0543             ; si = source
0094+  0543             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0543             hex_to_int:
0096+  0543             hex_to_int_L1:
0097+  0543 F6          	lodsb					; load from [SI] to AL
0098+  0544 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0546 C6 53 05    	jz hex_to_int_ret
0100+  0549 36          	mov bh, al
0101+  054A F6          	lodsb
0102+  054B 2F          	mov bl, al
0103+  054C 07 17 05    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  054F F7          	stosb					; store AL to [DI]
0105+  0550 0A 43 05    	jmp hex_to_int_L1
0106+  0553             hex_to_int_ret:
0107+  0553 09          	ret		
0108+  0554             
0109+  0554             
0110+  0554             
0111+  0554             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0554             ; GETCHAR
0113+  0554             ; char in ah
0114+  0554             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0554             getchar:
0116+  0554 DB          	push al
0117+  0555             getchar_retry:
0118+  0555 FD 0C       	sti
0119+  0557 19 01       	mov al, 1
0120+  0559 05 03       	syscall sys_io			; receive in AH
0121+  055B B9 00       	cmp al, 0			; check if any char was receive
0122+  055D C6 55 05    	je getchar_retry
0123+  0560 E8          	pop al
0124+  0561 09          	ret
0125+  0562             
0126+  0562             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0562             ; PUTCHAR
0128+  0562             ; char in ah
0129+  0562             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0562             putchar:
0131+  0562 D7          	push a
0132+  0563 19 00       	mov al, 0
0133+  0565 05 03       	syscall sys_io			; char in AH
0134+  0567 E4          	pop a
0135+  0568 09          	ret
0136+  0569             
0137+  0569             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0569             ;; INPUT A STRING
0139+  0569             ;; terminates with null
0140+  0569             ;; pointer in D
0141+  0569             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0569             gets:
0143+  0569 D7          	push a
0144+  056A DA          	push d
0145+  056B             gets_loop:
0146+  056B FD 0C       	sti
0147+  056D 19 01       	mov al, 1
0148+  056F 05 03       	syscall sys_io			; receive in AH
0149+  0571 B9 00       	cmp al, 0				; check error code (AL)
0150+  0573 C6 6B 05    	je gets_loop			; if no char received, retry
0151+  0576             
0152+  0576 76 1B       	cmp ah, 27
0153+  0578 C6 99 05    	je gets_telnet_escape
0154+  057B 76 0A       	cmp ah, $0A				; LF
0155+  057D C6 F2 05    	je gets_end
0156+  0580 76 0D       	cmp ah, $0D				; CR
0157+  0582 C6 F2 05    	je gets_end
0158+  0585 76 5C       	cmp ah, $5C				; '\\'
0159+  0587 C6 C9 05    	je gets_escape
0160+  058A             	
0161+  058A 76 08       	cmp ah, $08			; check for backspace
0162+  058C C6 95 05    	je gets_backspace
0163+  058F             
0164+  058F 1A          	mov al, ah
0165+  0590 3E          	mov [d], al
0166+  0591 79          	inc d
0167+  0592 0A 6B 05    	jmp gets_loop
0168+  0595             gets_backspace:
0169+  0595 7F          	dec d
0170+  0596 0A 6B 05    	jmp gets_loop
0171+  0599             gets_telnet_escape:
0172+  0599 FD 0C       	sti
0173+  059B 19 01       	mov al, 1
0174+  059D 05 03       	syscall sys_io				; receive in AH without echo
0175+  059F B9 00       	cmp al, 0					; check error code (AL)
0176+  05A1 C6 99 05    	je gets_telnet_escape		; if no char received, retry
0177+  05A4 76 5B       	cmp ah, '['
0178+  05A6 C7 6B 05    	jne gets_loop
0179+  05A9             gets_telnet_escape_phase2:
0180+  05A9 FD 0C       	sti
0181+  05AB 19 01       	mov al, 1
0182+  05AD 05 03       	syscall sys_io					; receive in AH without echo
0183+  05AF B9 00       	cmp al, 0						; check error code (AL)
0184+  05B1 C6 A9 05    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  05B4 76 44       	cmp ah, 'D'
0186+  05B6 C6 C1 05    	je gets_left_arrow
0187+  05B9 76 43       	cmp ah, 'C'
0188+  05BB C6 C5 05    	je gets_right_arrow
0189+  05BE 0A 6B 05    	jmp gets_loop
0190+  05C1             gets_left_arrow:
0191+  05C1 7F          	dec d
0192+  05C2 0A 6B 05    	jmp gets_loop
0193+  05C5             gets_right_arrow:
0194+  05C5 79          	inc d
0195+  05C6 0A 6B 05    	jmp gets_loop
0196+  05C9             gets_escape:
0197+  05C9 FD 0C       	sti
0198+  05CB 19 01       	mov al, 1
0199+  05CD 05 03       	syscall sys_io			; receive in AH
0200+  05CF B9 00       	cmp al, 0				; check error code (AL)
0201+  05D1 C6 C9 05    	je gets_escape			; if no char received, retry
0202+  05D4 76 6E       	cmp ah, 'n'
0203+  05D6 C6 E4 05    	je gets_LF
0204+  05D9 76 72       	cmp ah, 'r'
0205+  05DB C6 EB 05    	je gets_CR
0206+  05DE 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  05DF 3E          	mov [d], al
0208+  05E0 79          	inc d
0209+  05E1 0A 6B 05    	jmp gets_loop
0210+  05E4             gets_LF:
0211+  05E4 19 0A       	mov al, $0A
0212+  05E6 3E          	mov [d], al
0213+  05E7 79          	inc d
0214+  05E8 0A 6B 05    	jmp gets_loop
0215+  05EB             gets_CR:
0216+  05EB 19 0D       	mov al, $0D
0217+  05ED 3E          	mov [d], al
0218+  05EE 79          	inc d
0219+  05EF 0A 6B 05    	jmp gets_loop
0220+  05F2             gets_end:
0221+  05F2 19 00       	mov al, 0
0222+  05F4 3E          	mov [d], al				; terminate string
0223+  05F5 E7          	pop d
0224+  05F6 E4          	pop a
0225+  05F7 09          	ret
0226+  05F8             
0227+  05F8             
0228+  05F8             
0229+  05F8             
0230+  05F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  05F8             ;; INPUT TEXT
0232+  05F8             ;; terminated with CTRL+D
0233+  05F8             ;; pointer in D
0234+  05F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  05F8             gettxt:
0236+  05F8 D7          	push a
0237+  05F9 DA          	push d
0238+  05FA             gettxt_loop:
0239+  05FA 19 01       	mov al, 1
0240+  05FC 05 03       	syscall sys_io			; receive in AH
0241+  05FE B9 00       	cmp al, 0				; check error code (AL)
0242+  0600 C6 FA 05    	je gettxt_loop		; if no char received, retry
0243+  0603 76 04       	cmp ah, 4			; EOT
0244+  0605 C6 43 06    	je gettxt_end
0245+  0608 76 08       	cmp ah, $08			; check for backspace
0246+  060A C6 3F 06    	je gettxt_backspace
0247+  060D 76 5C       	cmp ah, $5C				; '\\'
0248+  060F C6 18 06    	je gettxt_escape
0249+  0612 1A          	mov al, ah
0250+  0613 3E          	mov [d], al
0251+  0614 79          	inc d
0252+  0615 0A FA 05    	jmp gettxt_loop
0253+  0618             gettxt_escape:
0254+  0618 19 01       	mov al, 1
0255+  061A 05 03       	syscall sys_io			; receive in AH
0256+  061C B9 00       	cmp al, 0				; check error code (AL)
0257+  061E C6 18 06    	je gettxt_escape		; if no char received, retry
0258+  0621 76 6E       	cmp ah, 'n'
0259+  0623 C6 31 06    	je gettxt_LF
0260+  0626 76 72       	cmp ah, 'r'
0261+  0628 C6 38 06    	je gettxt_CR
0262+  062B 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  062C 3E          	mov [d], al
0264+  062D 79          	inc d
0265+  062E 0A FA 05    	jmp gettxt_loop
0266+  0631             gettxt_LF:
0267+  0631 19 0A       	mov al, $0A
0268+  0633 3E          	mov [d], al
0269+  0634 79          	inc d
0270+  0635 0A FA 05    	jmp gettxt_loop
0271+  0638             gettxt_CR:
0272+  0638 19 0D       	mov al, $0D
0273+  063A 3E          	mov [d], al
0274+  063B 79          	inc d
0275+  063C 0A FA 05    	jmp gettxt_loop
0276+  063F             gettxt_backspace:
0277+  063F 7F          	dec d
0278+  0640 0A FA 05    	jmp gettxt_loop
0279+  0643             gettxt_end:
0280+  0643 19 00       	mov al, 0
0281+  0645 3E          	mov [d], al				; terminate string
0282+  0646 E7          	pop d
0283+  0647 E4          	pop a
0284+  0648 09          	ret
0285+  0649             
0286+  0649             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0649             ; PRINT NEW LINE
0288+  0649             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0649             printnl:
0290+  0649 D7          	push a
0291+  064A 10 00 0A    	mov a, $0A00
0292+  064D 05 03       	syscall sys_io
0293+  064F 10 00 0D    	mov a, $0D00
0294+  0652 05 03       	syscall sys_io
0295+  0654 E4          	pop a
0296+  0655 09          	ret
0297+  0656             
0298+  0656             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0656             ; strtoint
0300+  0656             ; 4 digit hex string number in d
0301+  0656             ; integer returned in A
0302+  0656             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0656             strtointx:
0304+  0656 D8          	push b
0305+  0657 32          	mov bl, [d]
0306+  0658 37          	mov bh, bl
0307+  0659 33 01 00    	mov bl, [d + 1]
0308+  065C 07 17 05    	call atoi				; convert to int in AL
0309+  065F 23          	mov ah, al				; move to AH
0310+  0660 33 02 00    	mov bl, [d + 2]
0311+  0663 37          	mov bh, bl
0312+  0664 33 03 00    	mov bl, [d + 3]
0313+  0667 07 17 05    	call atoi				; convert to int in AL
0314+  066A E5          	pop b
0315+  066B 09          	ret
0316+  066C             
0317+  066C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  066C             ; strtoint
0319+  066C             ; 5 digit base10 string number in d
0320+  066C             ; integer returned in A
0321+  066C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  066C             strtoint:
0323+  066C E2          	push si
0324+  066D D8          	push b
0325+  066E D9          	push c
0326+  066F DA          	push d
0327+  0670 07 97 04    	call strlen			; get string length in C
0328+  0673 7E          	dec c
0329+  0674 FD 4E       	mov si, d
0330+  0676 12          	mov a, c
0331+  0677 FD 99       	shl a
0332+  0679 3B FF 04    	mov d, table_power
0333+  067C 59          	add d, a
0334+  067D 38 00 00    	mov c, 0
0335+  0680             strtoint_L0:
0336+  0680 F6          	lodsb			; load ASCII to al
0337+  0681 B9 00       	cmp al, 0
0338+  0683 C6 96 06    	je strtoint_end
0339+  0686 6F 30       	sub al, $30		; make into integer
0340+  0688 22 00       	mov ah, 0
0341+  068A 2A          	mov b, [d]
0342+  068B AC          	mul a, b			; result in B since it fits in 16bits
0343+  068C 11          	mov a, b
0344+  068D 28          	mov b, c
0345+  068E 54          	add a, b
0346+  068F 39          	mov c, a
0347+  0690 63 02 00    	sub d, 2
0348+  0693 0A 80 06    	jmp strtoint_L0
0349+  0696             strtoint_end:
0350+  0696 12          	mov a, c
0351+  0697 E7          	pop d
0352+  0698 E6          	pop c
0353+  0699 E5          	pop b
0354+  069A EF          	pop si
0355+  069B 09          	ret
0356+  069C             
0357+  069C             
0358+  069C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  069C             ; PRINT NULL TERMINATED STRING
0360+  069C             ; pointer in D
0361+  069C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  069C             puts:
0363+  069C D7          	push a
0364+  069D DA          	push d
0365+  069E             puts_L1:
0366+  069E 1E          	mov al, [d]
0367+  069F B9 00       	cmp al, 0
0368+  06A1 C6 AD 06    	jz puts_END
0369+  06A4 23          	mov ah, al
0370+  06A5 19 00       	mov al, 0
0371+  06A7 05 03       	syscall sys_io
0372+  06A9 79          	inc d
0373+  06AA 0A 9E 06    	jmp puts_L1
0374+  06AD             puts_END:
0375+  06AD E7          	pop d
0376+  06AE E4          	pop a
0377+  06AF 09          	ret
0378+  06B0             
0379+  06B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  06B0             ; PRINT N SIZE STRING
0381+  06B0             ; pointer in D
0382+  06B0             ; size in C
0383+  06B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  06B0             putsn:
0385+  06B0 DB          	push al
0386+  06B1 DA          	push d
0387+  06B2 D9          	push c
0388+  06B3             putsn_L0:
0389+  06B3 1E          	mov al, [d]
0390+  06B4 23          	mov ah, al
0391+  06B5 19 00       	mov al, 0
0392+  06B7 05 03       	syscall sys_io
0393+  06B9 79          	inc d
0394+  06BA 7E          	dec c	
0395+  06BB C2 00 00    	cmp c, 0
0396+  06BE C7 B3 06    	jne putsn_L0
0397+  06C1             putsn_end:
0398+  06C1 E6          	pop c
0399+  06C2 E7          	pop d
0400+  06C3 E8          	pop al
0401+  06C4 09          	ret
0402+  06C5             
0403+  06C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  06C5             ; print 16bit decimal number
0405+  06C5             ; input number in A
0406+  06C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  06C5             print_u16d:
0408+  06C5 D7          	push a
0409+  06C6 D8          	push b
0410+  06C7 26 10 27    	mov b, 10000
0411+  06CA AE          	div a, b			; get 10000 coeff.
0412+  06CB 07 F1 06    	call print_number
0413+  06CE 11          	mov a, b
0414+  06CF 26 E8 03    	mov b, 1000
0415+  06D2 AE          	div a, b			; get 10000 coeff.
0416+  06D3 07 F1 06    	call print_number
0417+  06D6 11          	mov a, b
0418+  06D7 26 64 00    	mov b, 100
0419+  06DA AE          	div a, b
0420+  06DB 07 F1 06    	call print_number
0421+  06DE 11          	mov a, b
0422+  06DF 26 0A 00    	mov b, 10
0423+  06E2 AE          	div a, b
0424+  06E3 07 F1 06    	call print_number
0425+  06E6 11          	mov a, b
0426+  06E7 6A 30       	add al, $30
0427+  06E9 23          	mov ah, al
0428+  06EA 19 00       	mov al, 0
0429+  06EC 05 03       	syscall sys_io	; print coeff
0430+  06EE E5          	pop b
0431+  06EF E4          	pop a
0432+  06F0 09          	ret
0433+  06F1             
0434+  06F1             
0435+  06F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  06F1             ; if A == 0, print space
0437+  06F1             ; else print A
0438+  06F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  06F1             print_number:
0440+  06F1 6A 30       	add al, $30
0441+  06F3 23          	mov ah, al
0442+  06F4 07 62 05    	call putchar
0443+  06F7 09          	ret
0444+  06F8             
0445+  06F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  06F8             ; PRINT 16BIT HEX INTEGER
0447+  06F8             ; integer value in reg B
0448+  06F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  06F8             print_u16x:
0450+  06F8 D7          	push a
0451+  06F9 D8          	push b
0452+  06FA DD          	push bl
0453+  06FB 30          	mov bl, bh
0454+  06FC 07 29 05    	call itoa				; convert bh to char in A
0455+  06FF 2F          	mov bl, al				; save al
0456+  0700 19 00       	mov al, 0
0457+  0702 05 03       	syscall sys_io				; display AH
0458+  0704 24          	mov ah, bl				; retrieve al
0459+  0705 19 00       	mov al, 0
0460+  0707 05 03       	syscall sys_io				; display AL
0461+  0709             
0462+  0709 EA          	pop bl
0463+  070A 07 29 05    	call itoa				; convert bh to char in A
0464+  070D 2F          	mov bl, al				; save al
0465+  070E 19 00       	mov al, 0
0466+  0710 05 03       	syscall sys_io				; display AH
0467+  0712 24          	mov ah, bl				; retrieve al
0468+  0713 19 00       	mov al, 0
0469+  0715 05 03       	syscall sys_io				; display AL
0470+  0717             
0471+  0717 E5          	pop b
0472+  0718 E4          	pop a
0473+  0719 09          	ret
0474+  071A             
0475+  071A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  071A             ; INPUT 16BIT HEX INTEGER
0477+  071A             ; read 16bit integer into A
0478+  071A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  071A             scan_u16x:
0480+  071A F8 10 00    	enter 16
0481+  071D D8          	push b
0482+  071E DA          	push d
0483+  071F             
0484+  071F FA F1 FF    	lea d, [bp + -15]
0485+  0722 07 69 05    	call gets				; get number
0486+  0725             
0487+  0725 32          	mov bl, [d]
0488+  0726 37          	mov bh, bl
0489+  0727 33 01 00    	mov bl, [d + 1]
0490+  072A 07 17 05    	call atoi				; convert to int in AL
0491+  072D 23          	mov ah, al				; move to AH
0492+  072E             
0493+  072E 33 02 00    	mov bl, [d + 2]
0494+  0731 37          	mov bh, bl
0495+  0732 33 03 00    	mov bl, [d + 3]
0496+  0735 07 17 05    	call atoi				; convert to int in AL
0497+  0738             
0498+  0738 E7          	pop d
0499+  0739 E5          	pop b
0500+  073A F9          	leave
0501+  073B 09          	ret
0502+  073C             
0503+  073C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  073C             ; PRINT 8bit HEX INTEGER
0505+  073C             ; integer value in reg bl
0506+  073C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  073C             print_u8x:
0508+  073C D7          	push a
0509+  073D DD          	push bl
0510+  073E             
0511+  073E 07 29 05    	call itoa				; convert bl to char in A
0512+  0741 2F          	mov bl, al				; save al
0513+  0742 19 00       	mov al, 0
0514+  0744 05 03       	syscall sys_io				; display AH
0515+  0746 24          	mov ah, bl				; retrieve al
0516+  0747 19 00       	mov al, 0
0517+  0749 05 03       	syscall sys_io				; display AL
0518+  074B             
0519+  074B EA          	pop bl
0520+  074C E4          	pop a
0521+  074D 09          	ret
0522+  074E             
0523+  074E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  074E             ; print 8bit decimal unsigned number
0525+  074E             ; input number in AL
0526+  074E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  074E             print_u8d:
0528+  074E D7          	push a
0529+  074F D8          	push b
0530+  0750             
0531+  0750 22 00       	mov ah, 0
0532+  0752 26 64 00    	mov b, 100
0533+  0755 AE          	div a, b
0534+  0756 D8          	push b			; save remainder
0535+  0757 B9 00       	cmp al, 0
0536+  0759 C6 63 07    	je skip100
0537+  075C 6A 30       	add al, $30
0538+  075E 23          	mov ah, al
0539+  075F 19 00       	mov al, 0
0540+  0761 05 03       	syscall sys_io	; print coeff
0541+  0763             skip100:
0542+  0763 E4          	pop a
0543+  0764 22 00       	mov ah, 0
0544+  0766 26 0A 00    	mov b, 10
0545+  0769 AE          	div a, b
0546+  076A D8          	push b			; save remainder
0547+  076B B9 00       	cmp al, 0
0548+  076D C6 77 07    	je skip10
0549+  0770 6A 30       	add al, $30
0550+  0772 23          	mov ah, al
0551+  0773 19 00       	mov al, 0
0552+  0775 05 03       	syscall sys_io	; print coeff
0553+  0777             skip10:
0554+  0777 E4          	pop a
0555+  0778 1B          	mov al, bl
0556+  0779 6A 30       	add al, $30
0557+  077B 23          	mov ah, al
0558+  077C 19 00       	mov al, 0
0559+  077E 05 03       	syscall sys_io	; print coeff
0560+  0780 E5          	pop b
0561+  0781 E4          	pop a
0562+  0782 09          	ret
0563+  0783             
0564+  0783             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0783             ; INPUT 8BIT HEX INTEGER
0566+  0783             ; read 8bit integer into AL
0567+  0783             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0783             scan_u8x:
0569+  0783 F8 04 00    	enter 4
0570+  0786 D8          	push b
0571+  0787 DA          	push d
0572+  0788             
0573+  0788 FA FD FF    	lea d, [bp + -3]
0574+  078B 07 69 05    	call gets				; get number
0575+  078E             
0576+  078E 32          	mov bl, [d]
0577+  078F 37          	mov bh, bl
0578+  0790 33 01 00    	mov bl, [d + 1]
0579+  0793 07 17 05    	call atoi				; convert to int in AL
0580+  0796             
0581+  0796 E7          	pop d
0582+  0797 E5          	pop b
0583+  0798 F9          	leave
0584+  0799 09          	ret
0585+  079A             
0586+  079A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  079A             ; input decimal number
0588+  079A             ; result in A
0589+  079A             ; 655'\0'
0590+  079A             ; low--------high
0591+  079A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  079A             scan_u16d:
0593+  079A F8 08 00    	enter 8
0594+  079D E2          	push si
0595+  079E D8          	push b
0596+  079F D9          	push c
0597+  07A0 DA          	push d
0598+  07A1 FA F9 FF    	lea d, [bp +- 7]
0599+  07A4 07 69 05    	call gets
0600+  07A7 07 97 04    	call strlen			; get string length in C
0601+  07AA 7E          	dec c
0602+  07AB FD 4E       	mov si, d
0603+  07AD 12          	mov a, c
0604+  07AE FD 99       	shl a
0605+  07B0 3B FF 04    	mov d, table_power
0606+  07B3 59          	add d, a
0607+  07B4 38 00 00    	mov c, 0
0608+  07B7             mul_loop:
0609+  07B7 F6          	lodsb			; load ASCII to al
0610+  07B8 B9 00       	cmp al, 0
0611+  07BA C6 CD 07    	je mul_exit
0612+  07BD 6F 30       	sub al, $30		; make into integer
0613+  07BF 22 00       	mov ah, 0
0614+  07C1 2A          	mov b, [d]
0615+  07C2 AC          	mul a, b			; result in B since it fits in 16bits
0616+  07C3 11          	mov a, b
0617+  07C4 28          	mov b, c
0618+  07C5 54          	add a, b
0619+  07C6 39          	mov c, a
0620+  07C7 63 02 00    	sub d, 2
0621+  07CA 0A B7 07    	jmp mul_loop
0622+  07CD             mul_exit:
0623+  07CD 12          	mov a, c
0624+  07CE E7          	pop d
0625+  07CF E6          	pop c
0626+  07D0 E5          	pop b
0627+  07D1 EF          	pop si
0628+  07D2 F9          	leave
0629+  07D3 09          	ret
0072   07D4             ; --- END INCLUDE BLOCK
0073   07D4             
0074   07D4             
0075   07D4             .end
tasm: Number of errors = 0
