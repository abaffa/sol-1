0001   0000             ; --- Filename: test.c
0002   0000             
0003   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0004   0000             
0005   0400             .org PROC_TEXT_ORG
0006   0400             
0007   0400             ; --- begin text block
0008   0400             main:
0009   0400 D2            push bp
0010   0401 9B            mov bp, sp
0011   0402             _switch1_expr:
0012   0402 29 0E 04      mov b, [i]
0013   0405 C0 7C 00      cmp b, 124
0014   0408 C0 37 00      cmp b, 55
0015   040B             _switch1_exit:
0016   040B F9            leave
0017   040C 05 0B         syscall sys_terminate_proc
0018   040E             ; --- end text block
0019   040E             
0020   040E             ; --- begin data block
0021   040E 37 00       i: .dw 55
0022   0410             ; --- end data block
0023   0410             ; --- begin include block
0024   0410             .include "lib/stdio.asm"
0001+  0410             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0410             ; stdio.s
0003+  0410             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0410             .include "lib/string.asm"
0001++ 0410             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0410             ; string.s
0003++ 0410             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0410             
0005++ 0410             
0006++ 0410             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0410             ; strrev
0008++ 0410             ; reverse a string
0009++ 0410             ; D = string address
0010++ 0410             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0410             ; 01234
0012++ 0410             strrev:
0013++ 0410 4B          	pusha
0014++ 0411 07 57 04    	call strlen	; length in C
0015++ 0414 12          	mov a, c
0016++ 0415 AF 01 00    	cmp a, 1
0017++ 0418 D0 32 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 041B 7D          	dec a
0019++ 041C FD 4E       	mov si, d	; beginning of string
0020++ 041E FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0420 59          	add d, a	; end of string
0022++ 0421 12          	mov a, c
0023++ 0422 FD 9B       	shr a		; divide by 2
0024++ 0424 39          	mov c, a	; C now counts the steps
0025++ 0425             strrev_L0:
0026++ 0425 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0426 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0427 3E          	mov [d], al	; store left char into right side
0029++ 0428 1B          	mov al, bl
0030++ 0429 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 042A 7E          	dec c
0032++ 042B 7F          	dec d
0033++ 042C C2 00 00    	cmp c, 0
0034++ 042F C7 25 04    	jne strrev_L0
0035++ 0432             strrev_end:
0036++ 0432 4C          	popa
0037++ 0433 09          	ret
0038++ 0434             	
0039++ 0434             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0434             ; strchr
0041++ 0434             ; search string in D for char in AL
0042++ 0434             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0434             strchr:
0044++ 0434             strchr_L0:
0045++ 0434 32          	mov bl, [d]
0046++ 0435 C1 00       	cmp bl, 0
0047++ 0437 C6 42 04    	je strchr_end
0048++ 043A BA          	cmp al, bl
0049++ 043B C6 42 04    	je strchr_end
0050++ 043E 79          	inc d
0051++ 043F 0A 34 04    	jmp strchr_L0
0052++ 0442             strchr_end:
0053++ 0442 1B          	mov al, bl
0054++ 0443 09          	ret
0055++ 0444             
0056++ 0444             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0444             ; strstr
0058++ 0444             ; find sub-string
0059++ 0444             ; str1 in SI
0060++ 0444             ; str2 in DI
0061++ 0444             ; SI points to end of source string
0062++ 0444             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0444             strstr:
0064++ 0444 DB          	push al
0065++ 0445 DA          	push d
0066++ 0446 E3          	push di
0067++ 0447             strstr_loop:
0068++ 0447 F3          	cmpsb					; compare a byte of the strings
0069++ 0448 C7 53 04    	jne strstr_ret
0070++ 044B FC 00 00    	lea d, [di + 0]
0071++ 044E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0450 C7 47 04    	jne strstr_loop				; equal chars but not at end
0073++ 0453             strstr_ret:
0074++ 0453 F0          	pop di
0075++ 0454 E7          	pop d
0076++ 0455 E8          	pop al
0077++ 0456 09          	ret
0078++ 0457             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0457             ; length of null terminated string
0080++ 0457             ; result in C
0081++ 0457             ; pointer in D
0082++ 0457             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0457             strlen:
0084++ 0457 DA          	push d
0085++ 0458 38 00 00    	mov c, 0
0086++ 045B             strlen_L1:
0087++ 045B BD 00       	cmp byte [d], 0
0088++ 045D C6 65 04    	je strlen_ret
0089++ 0460 79          	inc d
0090++ 0461 78          	inc c
0091++ 0462 0A 5B 04    	jmp strlen_L1
0092++ 0465             strlen_ret:
0093++ 0465 E7          	pop d
0094++ 0466 09          	ret
0095++ 0467             
0096++ 0467             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0467             ; STRCMP
0098++ 0467             ; compare two strings
0099++ 0467             ; str1 in SI
0100++ 0467             ; str2 in DI
0101++ 0467             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0467             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0467             strcmp:
0104++ 0467 DB          	push al
0105++ 0468 DA          	push d
0106++ 0469 E3          	push di
0107++ 046A E2          	push si
0108++ 046B             strcmp_loop:
0109++ 046B F3          	cmpsb					; compare a byte of the strings
0110++ 046C C7 77 04    	jne strcmp_ret
0111++ 046F FB FF FF    	lea d, [si +- 1]
0112++ 0472 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0474 C7 6B 04    	jne strcmp_loop				; equal chars but not at end
0114++ 0477             strcmp_ret:
0115++ 0477 EF          	pop si
0116++ 0478 F0          	pop di
0117++ 0479 E7          	pop d
0118++ 047A E8          	pop al
0119++ 047B 09          	ret
0120++ 047C             
0121++ 047C             
0122++ 047C             ; STRCPY
0123++ 047C             ; copy null terminated string from SI to DI
0124++ 047C             ; source in SI
0125++ 047C             ; destination in DI
0126++ 047C             strcpy:
0127++ 047C E2          	push si
0128++ 047D E3          	push di
0129++ 047E DB          	push al
0130++ 047F             strcpy_L1:
0131++ 047F F6          	lodsb
0132++ 0480 F7          	stosb
0133++ 0481 B9 00       	cmp al, 0
0134++ 0483 C7 7F 04    	jne strcpy_L1
0135++ 0486             strcpy_end:
0136++ 0486 E8          	pop al
0137++ 0487 F0          	pop di
0138++ 0488 EF          	pop si
0139++ 0489 09          	ret
0140++ 048A             
0141++ 048A             ; STRCAT
0142++ 048A             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 048A             ; source in SI
0144++ 048A             ; destination in DI
0145++ 048A             strcat:
0146++ 048A E2          	push si
0147++ 048B E3          	push di
0148++ 048C D7          	push a
0149++ 048D DA          	push d
0150++ 048E 50          	mov a, di
0151++ 048F 3C          	mov d, a
0152++ 0490             strcat_goto_end_L1:
0153++ 0490 BD 00       	cmp byte[d], 0
0154++ 0492 C6 99 04    	je strcat_start
0155++ 0495 79          	inc d
0156++ 0496 0A 90 04    	jmp strcat_goto_end_L1
0157++ 0499             strcat_start:
0158++ 0499 FD 50       	mov di, d
0159++ 049B             strcat_L1:
0160++ 049B F6          	lodsb
0161++ 049C F7          	stosb
0162++ 049D B9 00       	cmp al, 0
0163++ 049F C7 9B 04    	jne strcat_L1
0164++ 04A2             strcat_end:
0165++ 04A2 E7          	pop d
0166++ 04A3 E4          	pop a
0167++ 04A4 F0          	pop di
0168++ 04A5 EF          	pop si
0169++ 04A6 09          	ret
0005+  04A7             
0006+  04A7 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  04AB 34 35 36 37 
0006+  04AF 38 39 41 42 
0006+  04B3 43 44 45 46 
0007+  04B7             
0008+  04B7 01 00       table_power:.dw 1
0009+  04B9 0A 00       			.dw 10
0010+  04BB 64 00       			.dw 100
0011+  04BD E8 03       			.dw 1000
0012+  04BF 10 27       			.dw 10000
0013+  04C1             
0014+  04C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  04C1             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  04C1             ; ASCII in BL
0017+  04C1             ; result in AL
0018+  04C1             ; ascii for F = 0100 0110
0019+  04C1             ; ascii for 9 = 0011 1001
0020+  04C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  04C1             hex_ascii_encode:
0022+  04C1 1B          	mov al, bl
0023+  04C2 93 40       	test al, $40				; test if letter or number
0024+  04C4 C7 CA 04    	jnz hex_letter
0025+  04C7 87 0F       	and al, $0F				; get number
0026+  04C9 09          	ret
0027+  04CA             hex_letter:
0028+  04CA 87 0F       	and al, $0F				; get letter
0029+  04CC 6A 09       	add al, 9
0030+  04CE 09          	ret
0031+  04CF             
0032+  04CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  04CF             ; ATOI
0034+  04CF             ; 2 letter hex string in B
0035+  04CF             ; 8bit integer returned in AL
0036+  04CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  04CF             atoi:
0038+  04CF D8          	push b
0039+  04D0 07 C1 04    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  04D3 30          	mov bl, bh
0041+  04D4 DB          	push al					; save a
0042+  04D5 07 C1 04    	call hex_ascii_encode
0043+  04D8 EA          	pop bl	
0044+  04D9 FD 9E 04    	shl al, 4
0045+  04DC 8C          	or al, bl
0046+  04DD E5          	pop b
0047+  04DE 09          	ret	
0048+  04DF             
0049+  04DF             
0050+  04DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04DF             ; printf
0052+  04DF             ; no need for explanations!
0053+  04DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  04DF             printf:
0055+  04DF 09          	ret
0056+  04E0             
0057+  04E0             
0058+  04E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  04E0             ; scanf
0060+  04E0             ; no need for explanations!
0061+  04E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  04E0             scanf:
0063+  04E0 09          	ret
0064+  04E1             
0065+  04E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  04E1             ; ITOA
0067+  04E1             ; 8bit value in BL
0068+  04E1             ; 2 byte ASCII result in A
0069+  04E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  04E1             itoa:
0071+  04E1 DA          	push d
0072+  04E2 D8          	push b
0073+  04E3 A7 00       	mov bh, 0
0074+  04E5 FD A4 04    	shr bl, 4	
0075+  04E8 74          	mov d, b
0076+  04E9 1F A7 04    	mov al, [d + s_hex_digits]
0077+  04EC 23          	mov ah, al
0078+  04ED             	
0079+  04ED E5          	pop b
0080+  04EE D8          	push b
0081+  04EF A7 00       	mov bh, 0
0082+  04F1 FD 87 0F    	and bl, $0F
0083+  04F4 74          	mov d, b
0084+  04F5 1F A7 04    	mov al, [d + s_hex_digits]
0085+  04F8 E5          	pop b
0086+  04F9 E7          	pop d
0087+  04FA 09          	ret
0088+  04FB             
0089+  04FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  04FB             ; HEX STRING TO BINARY
0091+  04FB             ; di = destination address
0092+  04FB             ; si = source
0093+  04FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  04FB             hex_to_int:
0095+  04FB             hex_to_int_L1:
0096+  04FB F6          	lodsb					; load from [SI] to AL
0097+  04FC B9 00       	cmp al, 0				; check if ASCII 0
0098+  04FE C6 0B 05    	jz hex_to_int_ret
0099+  0501 36          	mov bh, al
0100+  0502 F6          	lodsb
0101+  0503 2F          	mov bl, al
0102+  0504 07 CF 04    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0507 F7          	stosb					; store AL to [DI]
0104+  0508 0A FB 04    	jmp hex_to_int_L1
0105+  050B             hex_to_int_ret:
0106+  050B 09          	ret		
0107+  050C             
0108+  050C             
0109+  050C             
0110+  050C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  050C             ; GETCHAR
0112+  050C             ; char in ah
0113+  050C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  050C             getchar:
0115+  050C DB          	push al
0116+  050D             getchar_retry:
0117+  050D FD 0C       	sti
0118+  050F 19 01       	mov al, 1
0119+  0511 05 03       	syscall sys_io			; receive in AH
0120+  0513 B9 00       	cmp al, 0			; check if any char was receive
0121+  0515 C6 0D 05    	je getchar_retry
0122+  0518 E8          	pop al
0123+  0519 09          	ret
0124+  051A             
0125+  051A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  051A             ; PUTCHAR
0127+  051A             ; char in ah
0128+  051A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  051A             putchar:
0130+  051A D7          	push a
0131+  051B 19 00       	mov al, 0
0132+  051D 05 03       	syscall sys_io			; char in AH
0133+  051F E4          	pop a
0134+  0520 09          	ret
0135+  0521             
0136+  0521             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  0521             ;; INPUT A STRING
0138+  0521             ;; terminates with null
0139+  0521             ;; pointer in D
0140+  0521             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0521             gets:
0142+  0521 D7          	push a
0143+  0522 DA          	push d
0144+  0523             gets_loop:
0145+  0523 FD 0C       	sti
0146+  0525 19 01       	mov al, 1
0147+  0527 05 03       	syscall sys_io			; receive in AH
0148+  0529 B9 00       	cmp al, 0				; check error code (AL)
0149+  052B C6 23 05    	je gets_loop			; if no char received, retry
0150+  052E             
0151+  052E 76 1B       	cmp ah, 27
0152+  0530 C6 51 05    	je gets_telnet_escape
0153+  0533 76 0A       	cmp ah, $0A				; LF
0154+  0535 C6 AA 05    	je gets_end
0155+  0538 76 0D       	cmp ah, $0D				; CR
0156+  053A C6 AA 05    	je gets_end
0157+  053D 76 5C       	cmp ah, $5C				; '\\'
0158+  053F C6 81 05    	je gets_escape
0159+  0542             	
0160+  0542 76 08       	cmp ah, $08			; check for backspace
0161+  0544 C6 4D 05    	je gets_backspace
0162+  0547             
0163+  0547 1A          	mov al, ah
0164+  0548 3E          	mov [d], al
0165+  0549 79          	inc d
0166+  054A 0A 23 05    	jmp gets_loop
0167+  054D             gets_backspace:
0168+  054D 7F          	dec d
0169+  054E 0A 23 05    	jmp gets_loop
0170+  0551             gets_telnet_escape:
0171+  0551 FD 0C       	sti
0172+  0553 19 01       	mov al, 1
0173+  0555 05 03       	syscall sys_io				; receive in AH without echo
0174+  0557 B9 00       	cmp al, 0					; check error code (AL)
0175+  0559 C6 51 05    	je gets_telnet_escape		; if no char received, retry
0176+  055C 76 5B       	cmp ah, '['
0177+  055E C7 23 05    	jne gets_loop
0178+  0561             gets_telnet_escape_phase2:
0179+  0561 FD 0C       	sti
0180+  0563 19 01       	mov al, 1
0181+  0565 05 03       	syscall sys_io					; receive in AH without echo
0182+  0567 B9 00       	cmp al, 0						; check error code (AL)
0183+  0569 C6 61 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  056C 76 44       	cmp ah, 'D'
0185+  056E C6 79 05    	je gets_left_arrow
0186+  0571 76 43       	cmp ah, 'C'
0187+  0573 C6 7D 05    	je gets_right_arrow
0188+  0576 0A 23 05    	jmp gets_loop
0189+  0579             gets_left_arrow:
0190+  0579 7F          	dec d
0191+  057A 0A 23 05    	jmp gets_loop
0192+  057D             gets_right_arrow:
0193+  057D 79          	inc d
0194+  057E 0A 23 05    	jmp gets_loop
0195+  0581             gets_escape:
0196+  0581 FD 0C       	sti
0197+  0583 19 01       	mov al, 1
0198+  0585 05 03       	syscall sys_io			; receive in AH
0199+  0587 B9 00       	cmp al, 0				; check error code (AL)
0200+  0589 C6 81 05    	je gets_escape			; if no char received, retry
0201+  058C 76 6E       	cmp ah, 'n'
0202+  058E C6 9C 05    	je gets_LF
0203+  0591 76 72       	cmp ah, 'r'
0204+  0593 C6 A3 05    	je gets_CR
0205+  0596 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  0597 3E          	mov [d], al
0207+  0598 79          	inc d
0208+  0599 0A 23 05    	jmp gets_loop
0209+  059C             gets_LF:
0210+  059C 19 0A       	mov al, $0A
0211+  059E 3E          	mov [d], al
0212+  059F 79          	inc d
0213+  05A0 0A 23 05    	jmp gets_loop
0214+  05A3             gets_CR:
0215+  05A3 19 0D       	mov al, $0D
0216+  05A5 3E          	mov [d], al
0217+  05A6 79          	inc d
0218+  05A7 0A 23 05    	jmp gets_loop
0219+  05AA             gets_end:
0220+  05AA 19 00       	mov al, 0
0221+  05AC 3E          	mov [d], al				; terminate string
0222+  05AD E7          	pop d
0223+  05AE E4          	pop a
0224+  05AF 09          	ret
0225+  05B0             
0226+  05B0             
0227+  05B0             
0228+  05B0             
0229+  05B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  05B0             ;; INPUT TEXT
0231+  05B0             ;; terminated with CTRL+D
0232+  05B0             ;; pointer in D
0233+  05B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  05B0             gettxt:
0235+  05B0 D7          	push a
0236+  05B1 DA          	push d
0237+  05B2             gettxt_loop:
0238+  05B2 19 01       	mov al, 1
0239+  05B4 05 03       	syscall sys_io			; receive in AH
0240+  05B6 B9 00       	cmp al, 0				; check error code (AL)
0241+  05B8 C6 B2 05    	je gettxt_loop		; if no char received, retry
0242+  05BB 76 04       	cmp ah, 4			; EOT
0243+  05BD C6 FB 05    	je gettxt_end
0244+  05C0 76 08       	cmp ah, $08			; check for backspace
0245+  05C2 C6 F7 05    	je gettxt_backspace
0246+  05C5 76 5C       	cmp ah, $5C				; '\\'
0247+  05C7 C6 D0 05    	je gettxt_escape
0248+  05CA 1A          	mov al, ah
0249+  05CB 3E          	mov [d], al
0250+  05CC 79          	inc d
0251+  05CD 0A B2 05    	jmp gettxt_loop
0252+  05D0             gettxt_escape:
0253+  05D0 19 01       	mov al, 1
0254+  05D2 05 03       	syscall sys_io			; receive in AH
0255+  05D4 B9 00       	cmp al, 0				; check error code (AL)
0256+  05D6 C6 D0 05    	je gettxt_escape		; if no char received, retry
0257+  05D9 76 6E       	cmp ah, 'n'
0258+  05DB C6 E9 05    	je gettxt_LF
0259+  05DE 76 72       	cmp ah, 'r'
0260+  05E0 C6 F0 05    	je gettxt_CR
0261+  05E3 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  05E4 3E          	mov [d], al
0263+  05E5 79          	inc d
0264+  05E6 0A B2 05    	jmp gettxt_loop
0265+  05E9             gettxt_LF:
0266+  05E9 19 0A       	mov al, $0A
0267+  05EB 3E          	mov [d], al
0268+  05EC 79          	inc d
0269+  05ED 0A B2 05    	jmp gettxt_loop
0270+  05F0             gettxt_CR:
0271+  05F0 19 0D       	mov al, $0D
0272+  05F2 3E          	mov [d], al
0273+  05F3 79          	inc d
0274+  05F4 0A B2 05    	jmp gettxt_loop
0275+  05F7             gettxt_backspace:
0276+  05F7 7F          	dec d
0277+  05F8 0A B2 05    	jmp gettxt_loop
0278+  05FB             gettxt_end:
0279+  05FB 19 00       	mov al, 0
0280+  05FD 3E          	mov [d], al				; terminate string
0281+  05FE E7          	pop d
0282+  05FF E4          	pop a
0283+  0600 09          	ret
0284+  0601             
0285+  0601             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0601             ; PRINT NEW LINE
0287+  0601             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  0601             printnl:
0289+  0601 D7          	push a
0290+  0602 10 00 0A    	mov a, $0A00
0291+  0605 05 03       	syscall sys_io
0292+  0607 10 00 0D    	mov a, $0D00
0293+  060A 05 03       	syscall sys_io
0294+  060C E4          	pop a
0295+  060D 09          	ret
0296+  060E             
0297+  060E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  060E             ; strtoint
0299+  060E             ; 4 digit hex string number in d
0300+  060E             ; integer returned in A
0301+  060E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  060E             strtointx:
0303+  060E D8          	push b
0304+  060F 32          	mov bl, [d]
0305+  0610 37          	mov bh, bl
0306+  0611 33 01 00    	mov bl, [d + 1]
0307+  0614 07 CF 04    	call atoi				; convert to int in AL
0308+  0617 23          	mov ah, al				; move to AH
0309+  0618 33 02 00    	mov bl, [d + 2]
0310+  061B 37          	mov bh, bl
0311+  061C 33 03 00    	mov bl, [d + 3]
0312+  061F 07 CF 04    	call atoi				; convert to int in AL
0313+  0622 E5          	pop b
0314+  0623 09          	ret
0315+  0624             
0316+  0624             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  0624             ; strtoint
0318+  0624             ; 5 digit base10 string number in d
0319+  0624             ; integer returned in A
0320+  0624             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  0624             strtoint:
0322+  0624 E2          	push si
0323+  0625 D8          	push b
0324+  0626 D9          	push c
0325+  0627 DA          	push d
0326+  0628 07 57 04    	call strlen			; get string length in C
0327+  062B 7E          	dec c
0328+  062C FD 4E       	mov si, d
0329+  062E 12          	mov a, c
0330+  062F FD 99       	shl a
0331+  0631 3B B7 04    	mov d, table_power
0332+  0634 59          	add d, a
0333+  0635 38 00 00    	mov c, 0
0334+  0638             strtoint_L0:
0335+  0638 F6          	lodsb			; load ASCII to al
0336+  0639 B9 00       	cmp al, 0
0337+  063B C6 4E 06    	je strtoint_end
0338+  063E 6F 30       	sub al, $30		; make into integer
0339+  0640 22 00       	mov ah, 0
0340+  0642 2A          	mov b, [d]
0341+  0643 AC          	mul a, b			; result in B since it fits in 16bits
0342+  0644 11          	mov a, b
0343+  0645 28          	mov b, c
0344+  0646 54          	add a, b
0345+  0647 39          	mov c, a
0346+  0648 63 02 00    	sub d, 2
0347+  064B 0A 38 06    	jmp strtoint_L0
0348+  064E             strtoint_end:
0349+  064E 12          	mov a, c
0350+  064F E7          	pop d
0351+  0650 E6          	pop c
0352+  0651 E5          	pop b
0353+  0652 EF          	pop si
0354+  0653 09          	ret
0355+  0654             
0356+  0654             
0357+  0654             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  0654             ; PRINT NULL TERMINATED STRING
0359+  0654             ; pointer in D
0360+  0654             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  0654             puts:
0362+  0654 D7          	push a
0363+  0655 DA          	push d
0364+  0656             puts_L1:
0365+  0656 1E          	mov al, [d]
0366+  0657 B9 00       	cmp al, 0
0367+  0659 C6 65 06    	jz puts_END
0368+  065C 23          	mov ah, al
0369+  065D 19 00       	mov al, 0
0370+  065F 05 03       	syscall sys_io
0371+  0661 79          	inc d
0372+  0662 0A 56 06    	jmp puts_L1
0373+  0665             puts_END:
0374+  0665 E7          	pop d
0375+  0666 E4          	pop a
0376+  0667 09          	ret
0377+  0668             
0378+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0668             ; PRINT N SIZE STRING
0380+  0668             ; pointer in D
0381+  0668             ; size in C
0382+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  0668             putsn:
0384+  0668 DB          	push al
0385+  0669 DA          	push d
0386+  066A D9          	push c
0387+  066B             putsn_L0:
0388+  066B 1E          	mov al, [d]
0389+  066C 23          	mov ah, al
0390+  066D 19 00       	mov al, 0
0391+  066F 05 03       	syscall sys_io
0392+  0671 79          	inc d
0393+  0672 7E          	dec c	
0394+  0673 C2 00 00    	cmp c, 0
0395+  0676 C7 6B 06    	jne putsn_L0
0396+  0679             putsn_end:
0397+  0679 E6          	pop c
0398+  067A E7          	pop d
0399+  067B E8          	pop al
0400+  067C 09          	ret
0401+  067D             
0402+  067D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  067D             ; print 16bit decimal number
0404+  067D             ; input number in A
0405+  067D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  067D             print_u16d:
0407+  067D D7          	push a
0408+  067E D8          	push b
0409+  067F 26 10 27    	mov b, 10000
0410+  0682 AE          	div a, b			; get 10000 coeff.
0411+  0683 07 A9 06    	call print_number
0412+  0686 11          	mov a, b
0413+  0687 26 E8 03    	mov b, 1000
0414+  068A AE          	div a, b			; get 10000 coeff.
0415+  068B 07 A9 06    	call print_number
0416+  068E 11          	mov a, b
0417+  068F 26 64 00    	mov b, 100
0418+  0692 AE          	div a, b
0419+  0693 07 A9 06    	call print_number
0420+  0696 11          	mov a, b
0421+  0697 26 0A 00    	mov b, 10
0422+  069A AE          	div a, b
0423+  069B 07 A9 06    	call print_number
0424+  069E 11          	mov a, b
0425+  069F 6A 30       	add al, $30
0426+  06A1 23          	mov ah, al
0427+  06A2 19 00       	mov al, 0
0428+  06A4 05 03       	syscall sys_io	; print coeff
0429+  06A6 E5          	pop b
0430+  06A7 E4          	pop a
0431+  06A8 09          	ret
0432+  06A9             
0433+  06A9             
0434+  06A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  06A9             ; if A == 0, print space
0436+  06A9             ; else print A
0437+  06A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  06A9             print_number:
0439+  06A9 6A 30       	add al, $30
0440+  06AB 23          	mov ah, al
0441+  06AC 07 1A 05    	call putchar
0442+  06AF 09          	ret
0443+  06B0             
0444+  06B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06B0             ; PRINT 16BIT HEX INTEGER
0446+  06B0             ; integer value in reg B
0447+  06B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06B0             print_u16x:
0449+  06B0 D7          	push a
0450+  06B1 D8          	push b
0451+  06B2 DD          	push bl
0452+  06B3 30          	mov bl, bh
0453+  06B4 07 E1 04    	call itoa				; convert bh to char in A
0454+  06B7 2F          	mov bl, al				; save al
0455+  06B8 19 00       	mov al, 0
0456+  06BA 05 03       	syscall sys_io				; display AH
0457+  06BC 24          	mov ah, bl				; retrieve al
0458+  06BD 19 00       	mov al, 0
0459+  06BF 05 03       	syscall sys_io				; display AL
0460+  06C1             
0461+  06C1 EA          	pop bl
0462+  06C2 07 E1 04    	call itoa				; convert bh to char in A
0463+  06C5 2F          	mov bl, al				; save al
0464+  06C6 19 00       	mov al, 0
0465+  06C8 05 03       	syscall sys_io				; display AH
0466+  06CA 24          	mov ah, bl				; retrieve al
0467+  06CB 19 00       	mov al, 0
0468+  06CD 05 03       	syscall sys_io				; display AL
0469+  06CF             
0470+  06CF E5          	pop b
0471+  06D0 E4          	pop a
0472+  06D1 09          	ret
0473+  06D2             
0474+  06D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  06D2             ; INPUT 16BIT HEX INTEGER
0476+  06D2             ; read 16bit integer into A
0477+  06D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  06D2             scan_u16x:
0479+  06D2 F8 10 00    	enter 16
0480+  06D5 D8          	push b
0481+  06D6 DA          	push d
0482+  06D7             
0483+  06D7 FA F1 FF    	lea d, [bp + -15]
0484+  06DA 07 21 05    	call gets				; get number
0485+  06DD             
0486+  06DD 32          	mov bl, [d]
0487+  06DE 37          	mov bh, bl
0488+  06DF 33 01 00    	mov bl, [d + 1]
0489+  06E2 07 CF 04    	call atoi				; convert to int in AL
0490+  06E5 23          	mov ah, al				; move to AH
0491+  06E6             
0492+  06E6 33 02 00    	mov bl, [d + 2]
0493+  06E9 37          	mov bh, bl
0494+  06EA 33 03 00    	mov bl, [d + 3]
0495+  06ED 07 CF 04    	call atoi				; convert to int in AL
0496+  06F0             
0497+  06F0 E7          	pop d
0498+  06F1 E5          	pop b
0499+  06F2 F9          	leave
0500+  06F3 09          	ret
0501+  06F4             
0502+  06F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  06F4             ; PRINT 8bit HEX INTEGER
0504+  06F4             ; integer value in reg bl
0505+  06F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  06F4             print_u8x:
0507+  06F4 D7          	push a
0508+  06F5 DD          	push bl
0509+  06F6             
0510+  06F6 07 E1 04    	call itoa				; convert bl to char in A
0511+  06F9 2F          	mov bl, al				; save al
0512+  06FA 19 00       	mov al, 0
0513+  06FC 05 03       	syscall sys_io				; display AH
0514+  06FE 24          	mov ah, bl				; retrieve al
0515+  06FF 19 00       	mov al, 0
0516+  0701 05 03       	syscall sys_io				; display AL
0517+  0703             
0518+  0703 EA          	pop bl
0519+  0704 E4          	pop a
0520+  0705 09          	ret
0521+  0706             
0522+  0706             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0706             ; print 8bit decimal unsigned number
0524+  0706             ; input number in AL
0525+  0706             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0706             print_u8d:
0527+  0706 D7          	push a
0528+  0707 D8          	push b
0529+  0708             
0530+  0708 22 00       	mov ah, 0
0531+  070A 26 64 00    	mov b, 100
0532+  070D AE          	div a, b
0533+  070E D8          	push b			; save remainder
0534+  070F B9 00       	cmp al, 0
0535+  0711 C6 1B 07    	je skip100
0536+  0714 6A 30       	add al, $30
0537+  0716 23          	mov ah, al
0538+  0717 19 00       	mov al, 0
0539+  0719 05 03       	syscall sys_io	; print coeff
0540+  071B             skip100:
0541+  071B E4          	pop a
0542+  071C 22 00       	mov ah, 0
0543+  071E 26 0A 00    	mov b, 10
0544+  0721 AE          	div a, b
0545+  0722 D8          	push b			; save remainder
0546+  0723 B9 00       	cmp al, 0
0547+  0725 C6 2F 07    	je skip10
0548+  0728 6A 30       	add al, $30
0549+  072A 23          	mov ah, al
0550+  072B 19 00       	mov al, 0
0551+  072D 05 03       	syscall sys_io	; print coeff
0552+  072F             skip10:
0553+  072F E4          	pop a
0554+  0730 1B          	mov al, bl
0555+  0731 6A 30       	add al, $30
0556+  0733 23          	mov ah, al
0557+  0734 19 00       	mov al, 0
0558+  0736 05 03       	syscall sys_io	; print coeff
0559+  0738 E5          	pop b
0560+  0739 E4          	pop a
0561+  073A 09          	ret
0562+  073B             
0563+  073B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  073B             ; INPUT 8BIT HEX INTEGER
0565+  073B             ; read 8bit integer into AL
0566+  073B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  073B             scan_u8x:
0568+  073B F8 04 00    	enter 4
0569+  073E D8          	push b
0570+  073F DA          	push d
0571+  0740             
0572+  0740 FA FD FF    	lea d, [bp + -3]
0573+  0743 07 21 05    	call gets				; get number
0574+  0746             
0575+  0746 32          	mov bl, [d]
0576+  0747 37          	mov bh, bl
0577+  0748 33 01 00    	mov bl, [d + 1]
0578+  074B 07 CF 04    	call atoi				; convert to int in AL
0579+  074E             
0580+  074E E7          	pop d
0581+  074F E5          	pop b
0582+  0750 F9          	leave
0583+  0751 09          	ret
0584+  0752             
0585+  0752             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  0752             ; input decimal number
0587+  0752             ; result in A
0588+  0752             ; 655'\0'
0589+  0752             ; low--------high
0590+  0752             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  0752             scan_u16d:
0592+  0752 F8 08 00    	enter 8
0593+  0755 E2          	push si
0594+  0756 D8          	push b
0595+  0757 D9          	push c
0596+  0758 DA          	push d
0597+  0759 FA F9 FF    	lea d, [bp +- 7]
0598+  075C 07 21 05    	call gets
0599+  075F 07 57 04    	call strlen			; get string length in C
0600+  0762 7E          	dec c
0601+  0763 FD 4E       	mov si, d
0602+  0765 12          	mov a, c
0603+  0766 FD 99       	shl a
0604+  0768 3B B7 04    	mov d, table_power
0605+  076B 59          	add d, a
0606+  076C 38 00 00    	mov c, 0
0607+  076F             mul_loop:
0608+  076F F6          	lodsb			; load ASCII to al
0609+  0770 B9 00       	cmp al, 0
0610+  0772 C6 85 07    	je mul_exit
0611+  0775 6F 30       	sub al, $30		; make into integer
0612+  0777 22 00       	mov ah, 0
0613+  0779 2A          	mov b, [d]
0614+  077A AC          	mul a, b			; result in B since it fits in 16bits
0615+  077B 11          	mov a, b
0616+  077C 28          	mov b, c
0617+  077D 54          	add a, b
0618+  077E 39          	mov c, a
0619+  077F 63 02 00    	sub d, 2
0620+  0782 0A 6F 07    	jmp mul_loop
0621+  0785             mul_exit:
0622+  0785 12          	mov a, c
0623+  0786 E7          	pop d
0624+  0787 E6          	pop c
0625+  0788 E5          	pop b
0626+  0789 EF          	pop si
0627+  078A F9          	leave
0628+  078B 09          	ret
0025   078C             ; --- end include block
0026   078C             
0027   078C             .end
tasm: Number of errors = 0
