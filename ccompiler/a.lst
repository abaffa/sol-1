0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 26 01 00      mov b, 1
0011   0405 D7            push a
0012   0406 11            mov a, b
0013   0407 26 01 00      mov b, 1
0014   040A 54            add a, b
0015   040B 27            mov b, a
0016   040C E4            pop a
0017   040D 26 0A 00      mov b, 10
0018   0410 FD AB         swp b
0019   0412 D8            push b
0020   0413 07 8D 04      call print_num
0021   0416 51 02 00      add sp, 2
0022   0419 52 02 00      sub sp, 2 ; i
0023   041C 26 37 00      mov b, 55
0024   041F D7            push a
0025   0420 11            mov a, b
0026   0421 45 FF FF      mov [bp + -1], a ; i
0027   0424 E4            pop a
0028   0425 2C FF FF      mov b, [bp + -1] ; i
0029   0428 FD AB         swp b
0030   042A D8            push b
0031   042B 07 8D 04      call print_num
0032   042E 51 02 00      add sp, 2
0033   0431 F9            leave
0034   0432 05 0B         syscall sys_terminate_proc
0035   0434             
0036   0434             _gets:
0037   0434 D2            push bp
0038   0435 9B            mov bp, sp
0039   0436             
0040   0436             ; --- BEGIN INLINE ASM BLOCK
0041   0436 17 05 00      mov a, [bp + 5]
0042   0439 3C            mov d, a
0043   043A 07 D1 06      call gets
0044   043D             ; --- END INLINE ASM BLOCK
0045   043D             
0046   043D F9            leave
0047   043E 09            ret
0048   043F             
0049   043F             _strlen:
0050   043F D2            push bp
0051   0440 9B            mov bp, sp
0052   0441 52 02 00      sub sp, 2 ; length
0053   0444 26 00 00      mov b, 0
0054   0447 D7            push a
0055   0448 11            mov a, b
0056   0449 45 FF FF      mov [bp + -1], a ; length
0057   044C E4            pop a
0058   044D             _while1_cond:
0059   044D FA 05 00      lea d, [bp + 5] ; str
0060   0450 2A            mov b, [d]
0061   0451 D7            push a
0062   0452 74            mov d, b
0063   0453 DA            push d
0064   0454 2C FF FF      mov b, [bp + -1] ; length
0065   0457 E7            pop d
0066   0458 10 01 00      mov a, 1
0067   045B AC            mul a, b
0068   045C 5A            add d, b
0069   045D E4            pop a
0070   045E 32            mov bl, [d]
0071   045F A7 00         mov bh, 0
0072   0461 D7            push a
0073   0462 11            mov a, b
0074   0463 26 00 00      mov b, 0
0075   0466 B0            cmp a, b
0076   0467 0E            lodflgs
0077   0468 87 01         and al, %00000001
0078   046A 8F 01         xor al, %00000001 ; !=
0079   046C 22 00         mov ah, 0
0080   046E 27            mov b, a
0081   046F E4            pop a
0082   0470 C0 00 00      cmp b, 0
0083   0473 C6 88 04      je _while1_exit
0084   0476             _while1_block:
0085   0476 2C FF FF      mov b, [bp + -1] ; length
0086   0479 D7            push a
0087   047A 11            mov a, b
0088   047B FD 77         inc b
0089   047D D7            push a
0090   047E 11            mov a, b
0091   047F 45 FF FF      mov [bp + -1], a ; length
0092   0482 E4            pop a
0093   0483 27            mov b, a
0094   0484 E4            pop a
0095   0485 0A 4D 04      jmp _while1_cond
0096   0488             _while1_exit:
0097   0488 2C FF FF      mov b, [bp + -1] ; length
0098   048B F9            leave
0099   048C 09            ret
0100   048D             
0101   048D             print_num:
0102   048D D2            push bp
0103   048E 9B            mov bp, sp
0104   048F 52 05 00      sub sp, 5 ; digits
0105   0492 52 02 00      sub sp, 2 ; i
0106   0495 26 00 00      mov b, 0
0107   0498 D7            push a
0108   0499 11            mov a, b
0109   049A 45 FA FF      mov [bp + -6], a ; i
0110   049D E4            pop a
0111   049E             _if2_cond:
0112   049E 2C 05 00      mov b, [bp + 5] ; num
0113   04A1 D7            push a
0114   04A2 11            mov a, b
0115   04A3 26 00 00      mov b, 0
0116   04A6 B0            cmp a, b
0117   04A7 0E            lodflgs
0118   04A8 87 01         and al, %00000001 ; ==
0119   04AA 22 00         mov ah, 0
0120   04AC 27            mov b, a
0121   04AD E4            pop a
0122   04AE C0 00 00      cmp b, 0
0123   04B1 C6 C3 04      je _if2_exit
0124   04B4             _if2_true:
0125   04B4 26 30 00      mov b, $30
0126   04B7 DD            push bl
0127   04B8 07 92 05      call _putchar
0128   04BB 51 01 00      add sp, 1
0129   04BE F9            leave
0130   04BF 09            ret
0131   04C0 0A C3 04      jmp _if2_exit
0132   04C3             _if2_exit:
0133   04C3             _while3_cond:
0134   04C3 2C 05 00      mov b, [bp + 5] ; num
0135   04C6 D7            push a
0136   04C7 11            mov a, b
0137   04C8 26 00 00      mov b, 0
0138   04CB B0            cmp a, b
0139   04CC 0E            lodflgs
0140   04CD 2F            mov bl, al
0141   04CE FD 78         mov g, a
0142   04D0 FD A2 03      shr al, 3
0143   04D3 FD A4 02      shr bl, 2
0144   04D6 FD 87 01      and bl, %00000001
0145   04D9 90            xor al, bl
0146   04DA FD 27         mov b, g
0147   04DC FD 87 01      and bl, %00000001
0148   04DF 8C            or al, bl
0149   04E0 8F 01         xor al, %00000001 ; > (signed)
0150   04E2 22 00         mov ah, 0
0151   04E4 27            mov b, a
0152   04E5 E4            pop a
0153   04E6 C0 00 00      cmp b, 0
0154   04E9 C6 3A 05      je _while3_exit
0155   04EC             _while3_block:
0156   04EC FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0157   04EF 2D            mov b, d
0158   04F0 D7            push a
0159   04F1 74            mov d, b
0160   04F2 DA            push d
0161   04F3 2C FA FF      mov b, [bp + -6] ; i
0162   04F6 E7            pop d
0163   04F7 10 01 00      mov a, 1
0164   04FA AC            mul a, b
0165   04FB 5A            add d, b
0166   04FC E4            pop a
0167   04FD DA            push d
0168   04FE 26 30 00      mov b, $30
0169   0501 D7            push a
0170   0502 11            mov a, b
0171   0503 2C 05 00      mov b, [bp + 5] ; num
0172   0506 D7            push a
0173   0507 11            mov a, b
0174   0508 26 0A 00      mov b, 10
0175   050B AE            div a, b
0176   050C E4            pop a
0177   050D 54            add a, b
0178   050E 27            mov b, a
0179   050F E4            pop a
0180   0510 E7            pop d
0181   0511 FD 3E         mov [d], bl
0182   0513 2C 05 00      mov b, [bp + 5] ; num
0183   0516 D7            push a
0184   0517 11            mov a, b
0185   0518 26 0A 00      mov b, 10
0186   051B AE            div a, b
0187   051C FD 78         mov g, a
0188   051E 11            mov a, b
0189   051F FD 27         mov b, g
0190   0521 E4            pop a
0191   0522 D7            push a
0192   0523 11            mov a, b
0193   0524 45 05 00      mov [bp + 5], a ; num
0194   0527 E4            pop a
0195   0528 2C FA FF      mov b, [bp + -6] ; i
0196   052B D7            push a
0197   052C 11            mov a, b
0198   052D FD 77         inc b
0199   052F D7            push a
0200   0530 11            mov a, b
0201   0531 45 FA FF      mov [bp + -6], a ; i
0202   0534 E4            pop a
0203   0535 27            mov b, a
0204   0536 E4            pop a
0205   0537 0A C3 04      jmp _while3_cond
0206   053A             _while3_exit:
0207   053A             _while4_cond:
0208   053A 2C FA FF      mov b, [bp + -6] ; i
0209   053D D7            push a
0210   053E 11            mov a, b
0211   053F 26 00 00      mov b, 0
0212   0542 B0            cmp a, b
0213   0543 0E            lodflgs
0214   0544 2F            mov bl, al
0215   0545 FD 78         mov g, a
0216   0547 FD A2 03      shr al, 3
0217   054A FD A4 02      shr bl, 2
0218   054D FD 87 01      and bl, %00000001
0219   0550 90            xor al, bl
0220   0551 FD 27         mov b, g
0221   0553 FD 87 01      and bl, %00000001
0222   0556 8C            or al, bl
0223   0557 8F 01         xor al, %00000001 ; > (signed)
0224   0559 22 00         mov ah, 0
0225   055B 27            mov b, a
0226   055C E4            pop a
0227   055D C0 00 00      cmp b, 0
0228   0560 C6 90 05      je _while4_exit
0229   0563             _while4_block:
0230   0563 2C FA FF      mov b, [bp + -6] ; i
0231   0566 D7            push a
0232   0567 11            mov a, b
0233   0568 FD 7D         dec b
0234   056A D7            push a
0235   056B 11            mov a, b
0236   056C 45 FA FF      mov [bp + -6], a ; i
0237   056F E4            pop a
0238   0570 27            mov b, a
0239   0571 E4            pop a
0240   0572 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0241   0575 2D            mov b, d
0242   0576 D7            push a
0243   0577 74            mov d, b
0244   0578 DA            push d
0245   0579 2C FA FF      mov b, [bp + -6] ; i
0246   057C E7            pop d
0247   057D 10 01 00      mov a, 1
0248   0580 AC            mul a, b
0249   0581 5A            add d, b
0250   0582 E4            pop a
0251   0583 32            mov bl, [d]
0252   0584 A7 00         mov bh, 0
0253   0586 DD            push bl
0254   0587 07 92 05      call _putchar
0255   058A 51 01 00      add sp, 1
0256   058D 0A 3A 05      jmp _while4_cond
0257   0590             _while4_exit:
0258   0590 F9            leave
0259   0591 09            ret
0260   0592             
0261   0592             _putchar:
0262   0592 D2            push bp
0263   0593 9B            mov bp, sp
0264   0594             
0265   0594             ; --- BEGIN INLINE ASM BLOCK
0266   0594 20 05 00      mov al, [bp + 5]
0267   0597 23            mov ah, al
0268   0598 07 CA 06      call putchar
0269   059B             ; --- END INLINE ASM BLOCK
0270   059B             
0271   059B F9            leave
0272   059C 09            ret
0273   059D             
0274   059D             scann:
0275   059D D2            push bp
0276   059E 9B            mov bp, sp
0277   059F 52 02 00      sub sp, 2 ; m
0278   05A2             
0279   05A2             ; --- BEGIN INLINE ASM BLOCK
0280   05A2 07 02 09      call scan_u16d
0281   05A5 45 FF FF      mov [bp + -1], a
0282   05A8             ; --- END INLINE ASM BLOCK
0283   05A8             
0284   05A8 2C FF FF      mov b, [bp + -1] ; m
0285   05AB F9            leave
0286   05AC 09            ret
0287   05AD             
0288   05AD             print:
0289   05AD D2            push bp
0290   05AE 9B            mov bp, sp
0291   05AF             
0292   05AF             ; --- BEGIN INLINE ASM BLOCK
0293   05AF 17 05 00      mov a, [bp + 5]
0294   05B2 3C            mov d, a
0295   05B3 07 04 08      call puts
0296   05B6             ; --- END INLINE ASM BLOCK
0297   05B6             
0298   05B6 F9            leave
0299   05B7 09            ret
0300   05B8             ; --- END TEXT BLOCK
0301   05B8             
0302   05B8             ; --- BEGIN DATA BLOCK
0303   05B8             ; --- END DATA BLOCK
0304   05B8             
0305   05B8             ; --- BEGIN INCLUDE BLOCK
0306   05B8             .include "lib/stdio.asm"
0001+  05B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  05B8             ; stdio.s
0003+  05B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  05B8             .include "lib/string.asm"
0001++ 05B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 05B8             ; string.s
0003++ 05B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 05B8             
0005++ 05B8             
0006++ 05B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 05B8             ; strrev
0008++ 05B8             ; reverse a string
0009++ 05B8             ; D = string address
0010++ 05B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 05B8             ; 01234
0012++ 05B8             strrev:
0013++ 05B8 4B          	pusha
0014++ 05B9 07 FF 05    	call strlen	; length in C
0015++ 05BC 12          	mov a, c
0016++ 05BD AF 01 00    	cmp a, 1
0017++ 05C0 D0 DA 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 05C3 7D          	dec a
0019++ 05C4 FD 4E       	mov si, d	; beginning of string
0020++ 05C6 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 05C8 59          	add d, a	; end of string
0022++ 05C9 12          	mov a, c
0023++ 05CA FD 9B       	shr a		; divide by 2
0024++ 05CC 39          	mov c, a	; C now counts the steps
0025++ 05CD             strrev_L0:
0026++ 05CD 32          	mov bl, [d]	; save load right-side char into BL
0027++ 05CE F6          	lodsb		; load left-side char into AL; increase SI
0028++ 05CF 3E          	mov [d], al	; store left char into right side
0029++ 05D0 1B          	mov al, bl
0030++ 05D1 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 05D2 7E          	dec c
0032++ 05D3 7F          	dec d
0033++ 05D4 C2 00 00    	cmp c, 0
0034++ 05D7 C7 CD 05    	jne strrev_L0
0035++ 05DA             strrev_end:
0036++ 05DA 4C          	popa
0037++ 05DB 09          	ret
0038++ 05DC             	
0039++ 05DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 05DC             ; strchr
0041++ 05DC             ; search string in D for char in AL
0042++ 05DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 05DC             strchr:
0044++ 05DC             strchr_L0:
0045++ 05DC 32          	mov bl, [d]
0046++ 05DD C1 00       	cmp bl, 0
0047++ 05DF C6 EA 05    	je strchr_end
0048++ 05E2 BA          	cmp al, bl
0049++ 05E3 C6 EA 05    	je strchr_end
0050++ 05E6 79          	inc d
0051++ 05E7 0A DC 05    	jmp strchr_L0
0052++ 05EA             strchr_end:
0053++ 05EA 1B          	mov al, bl
0054++ 05EB 09          	ret
0055++ 05EC             
0056++ 05EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 05EC             ; strstr
0058++ 05EC             ; find sub-string
0059++ 05EC             ; str1 in SI
0060++ 05EC             ; str2 in DI
0061++ 05EC             ; SI points to end of source string
0062++ 05EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 05EC             strstr:
0064++ 05EC DB          	push al
0065++ 05ED DA          	push d
0066++ 05EE E3          	push di
0067++ 05EF             strstr_loop:
0068++ 05EF F3          	cmpsb					; compare a byte of the strings
0069++ 05F0 C7 FB 05    	jne strstr_ret
0070++ 05F3 FC 00 00    	lea d, [di + 0]
0071++ 05F6 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 05F8 C7 EF 05    	jne strstr_loop				; equal chars but not at end
0073++ 05FB             strstr_ret:
0074++ 05FB F0          	pop di
0075++ 05FC E7          	pop d
0076++ 05FD E8          	pop al
0077++ 05FE 09          	ret
0078++ 05FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 05FF             ; length of null terminated string
0080++ 05FF             ; result in C
0081++ 05FF             ; pointer in D
0082++ 05FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 05FF             strlen:
0084++ 05FF DA          	push d
0085++ 0600 38 00 00    	mov c, 0
0086++ 0603             strlen_L1:
0087++ 0603 BD 00       	cmp byte [d], 0
0088++ 0605 C6 0D 06    	je strlen_ret
0089++ 0608 79          	inc d
0090++ 0609 78          	inc c
0091++ 060A 0A 03 06    	jmp strlen_L1
0092++ 060D             strlen_ret:
0093++ 060D E7          	pop d
0094++ 060E 09          	ret
0095++ 060F             
0096++ 060F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 060F             ; STRCMP
0098++ 060F             ; compare two strings
0099++ 060F             ; str1 in SI
0100++ 060F             ; str2 in DI
0101++ 060F             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 060F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 060F             strcmp:
0104++ 060F DB          	push al
0105++ 0610 DA          	push d
0106++ 0611 E3          	push di
0107++ 0612 E2          	push si
0108++ 0613             strcmp_loop:
0109++ 0613 F3          	cmpsb					; compare a byte of the strings
0110++ 0614 C7 1F 06    	jne strcmp_ret
0111++ 0617 FB FF FF    	lea d, [si +- 1]
0112++ 061A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 061C C7 13 06    	jne strcmp_loop				; equal chars but not at end
0114++ 061F             strcmp_ret:
0115++ 061F EF          	pop si
0116++ 0620 F0          	pop di
0117++ 0621 E7          	pop d
0118++ 0622 E8          	pop al
0119++ 0623 09          	ret
0120++ 0624             
0121++ 0624             
0122++ 0624             ; STRCPY
0123++ 0624             ; copy null terminated string from SI to DI
0124++ 0624             ; source in SI
0125++ 0624             ; destination in DI
0126++ 0624             strcpy:
0127++ 0624 E2          	push si
0128++ 0625 E3          	push di
0129++ 0626 DB          	push al
0130++ 0627             strcpy_L1:
0131++ 0627 F6          	lodsb
0132++ 0628 F7          	stosb
0133++ 0629 B9 00       	cmp al, 0
0134++ 062B C7 27 06    	jne strcpy_L1
0135++ 062E             strcpy_end:
0136++ 062E E8          	pop al
0137++ 062F F0          	pop di
0138++ 0630 EF          	pop si
0139++ 0631 09          	ret
0140++ 0632             
0141++ 0632             ; STRCAT
0142++ 0632             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0632             ; source in SI
0144++ 0632             ; destination in DI
0145++ 0632             strcat:
0146++ 0632 E2          	push si
0147++ 0633 E3          	push di
0148++ 0634 D7          	push a
0149++ 0635 DA          	push d
0150++ 0636 50          	mov a, di
0151++ 0637 3C          	mov d, a
0152++ 0638             strcat_goto_end_L1:
0153++ 0638 BD 00       	cmp byte[d], 0
0154++ 063A C6 41 06    	je strcat_start
0155++ 063D 79          	inc d
0156++ 063E 0A 38 06    	jmp strcat_goto_end_L1
0157++ 0641             strcat_start:
0158++ 0641 FD 50       	mov di, d
0159++ 0643             strcat_L1:
0160++ 0643 F6          	lodsb
0161++ 0644 F7          	stosb
0162++ 0645 B9 00       	cmp al, 0
0163++ 0647 C7 43 06    	jne strcat_L1
0164++ 064A             strcat_end:
0165++ 064A E7          	pop d
0166++ 064B E4          	pop a
0167++ 064C F0          	pop di
0168++ 064D EF          	pop si
0169++ 064E 09          	ret
0005+  064F             
0006+  064F 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0653 34 35 36 37 
0006+  0657 38 39 41 42 
0006+  065B 43 44 45 46 
0007+  065F 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0663 1B 5B 48 00 
0008+  0667             
0009+  0667 01 00       table_power:.dw 1
0010+  0669 0A 00       			.dw 10
0011+  066B 64 00       			.dw 100
0012+  066D E8 03       			.dw 1000
0013+  066F 10 27       			.dw 10000
0014+  0671             
0015+  0671             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0671             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0671             ; ASCII in BL
0018+  0671             ; result in AL
0019+  0671             ; ascii for F = 0100 0110
0020+  0671             ; ascii for 9 = 0011 1001
0021+  0671             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0671             hex_ascii_encode:
0023+  0671 1B          	mov al, bl
0024+  0672 93 40       	test al, $40				; test if letter or number
0025+  0674 C7 7A 06    	jnz hex_letter
0026+  0677 87 0F       	and al, $0F				; get number
0027+  0679 09          	ret
0028+  067A             hex_letter:
0029+  067A 87 0F       	and al, $0F				; get letter
0030+  067C 6A 09       	add al, 9
0031+  067E 09          	ret
0032+  067F             
0033+  067F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  067F             ; ATOI
0035+  067F             ; 2 letter hex string in B
0036+  067F             ; 8bit integer returned in AL
0037+  067F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  067F             atoi:
0039+  067F D8          	push b
0040+  0680 07 71 06    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0683 30          	mov bl, bh
0042+  0684 DB          	push al					; save a
0043+  0685 07 71 06    	call hex_ascii_encode
0044+  0688 EA          	pop bl	
0045+  0689 FD 9E 04    	shl al, 4
0046+  068C 8C          	or al, bl
0047+  068D E5          	pop b
0048+  068E 09          	ret	
0049+  068F             
0050+  068F             
0051+  068F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  068F             ; printf
0053+  068F             ; no need for explanations!
0054+  068F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  068F             printf:
0056+  068F 09          	ret
0057+  0690             
0058+  0690             
0059+  0690             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0690             ; scanf
0061+  0690             ; no need for explanations!
0062+  0690             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0690             scanf:
0064+  0690 09          	ret
0065+  0691             
0066+  0691             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0691             ; ITOA
0068+  0691             ; 8bit value in BL
0069+  0691             ; 2 byte ASCII result in A
0070+  0691             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0691             itoa:
0072+  0691 DA          	push d
0073+  0692 D8          	push b
0074+  0693 A7 00       	mov bh, 0
0075+  0695 FD A4 04    	shr bl, 4	
0076+  0698 74          	mov d, b
0077+  0699 1F 4F 06    	mov al, [d + s_hex_digits]
0078+  069C 23          	mov ah, al
0079+  069D             	
0080+  069D E5          	pop b
0081+  069E D8          	push b
0082+  069F A7 00       	mov bh, 0
0083+  06A1 FD 87 0F    	and bl, $0F
0084+  06A4 74          	mov d, b
0085+  06A5 1F 4F 06    	mov al, [d + s_hex_digits]
0086+  06A8 E5          	pop b
0087+  06A9 E7          	pop d
0088+  06AA 09          	ret
0089+  06AB             
0090+  06AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  06AB             ; HEX STRING TO BINARY
0092+  06AB             ; di = destination address
0093+  06AB             ; si = source
0094+  06AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  06AB             hex_to_int:
0096+  06AB             hex_to_int_L1:
0097+  06AB F6          	lodsb					; load from [SI] to AL
0098+  06AC B9 00       	cmp al, 0				; check if ASCII 0
0099+  06AE C6 BB 06    	jz hex_to_int_ret
0100+  06B1 36          	mov bh, al
0101+  06B2 F6          	lodsb
0102+  06B3 2F          	mov bl, al
0103+  06B4 07 7F 06    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  06B7 F7          	stosb					; store AL to [DI]
0105+  06B8 0A AB 06    	jmp hex_to_int_L1
0106+  06BB             hex_to_int_ret:
0107+  06BB 09          	ret		
0108+  06BC             
0109+  06BC             
0110+  06BC             
0111+  06BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  06BC             ; GETCHAR
0113+  06BC             ; char in ah
0114+  06BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  06BC             getchar:
0116+  06BC DB          	push al
0117+  06BD             getchar_retry:
0118+  06BD FD 0C       	sti
0119+  06BF 19 01       	mov al, 1
0120+  06C1 05 03       	syscall sys_io			; receive in AH
0121+  06C3 B9 00       	cmp al, 0			; check if any char was receive
0122+  06C5 C6 BD 06    	je getchar_retry
0123+  06C8 E8          	pop al
0124+  06C9 09          	ret
0125+  06CA             
0126+  06CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  06CA             ; PUTCHAR
0128+  06CA             ; char in ah
0129+  06CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  06CA             putchar:
0131+  06CA D7          	push a
0132+  06CB 19 00       	mov al, 0
0133+  06CD 05 03       	syscall sys_io			; char in AH
0134+  06CF E4          	pop a
0135+  06D0 09          	ret
0136+  06D1             
0137+  06D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  06D1             ;; INPUT A STRING
0139+  06D1             ;; terminates with null
0140+  06D1             ;; pointer in D
0141+  06D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  06D1             gets:
0143+  06D1 D7          	push a
0144+  06D2 DA          	push d
0145+  06D3             gets_loop:
0146+  06D3 FD 0C       	sti
0147+  06D5 19 01       	mov al, 1
0148+  06D7 05 03       	syscall sys_io			; receive in AH
0149+  06D9 B9 00       	cmp al, 0				; check error code (AL)
0150+  06DB C6 D3 06    	je gets_loop			; if no char received, retry
0151+  06DE             
0152+  06DE 76 1B       	cmp ah, 27
0153+  06E0 C6 01 07    	je gets_telnet_escape
0154+  06E3 76 0A       	cmp ah, $0A				; LF
0155+  06E5 C6 5A 07    	je gets_end
0156+  06E8 76 0D       	cmp ah, $0D				; CR
0157+  06EA C6 5A 07    	je gets_end
0158+  06ED 76 5C       	cmp ah, $5C				; '\\'
0159+  06EF C6 31 07    	je gets_escape
0160+  06F2             	
0161+  06F2 76 08       	cmp ah, $08			; check for backspace
0162+  06F4 C6 FD 06    	je gets_backspace
0163+  06F7             
0164+  06F7 1A          	mov al, ah
0165+  06F8 3E          	mov [d], al
0166+  06F9 79          	inc d
0167+  06FA 0A D3 06    	jmp gets_loop
0168+  06FD             gets_backspace:
0169+  06FD 7F          	dec d
0170+  06FE 0A D3 06    	jmp gets_loop
0171+  0701             gets_telnet_escape:
0172+  0701 FD 0C       	sti
0173+  0703 19 01       	mov al, 1
0174+  0705 05 03       	syscall sys_io				; receive in AH without echo
0175+  0707 B9 00       	cmp al, 0					; check error code (AL)
0176+  0709 C6 01 07    	je gets_telnet_escape		; if no char received, retry
0177+  070C 76 5B       	cmp ah, '['
0178+  070E C7 D3 06    	jne gets_loop
0179+  0711             gets_telnet_escape_phase2:
0180+  0711 FD 0C       	sti
0181+  0713 19 01       	mov al, 1
0182+  0715 05 03       	syscall sys_io					; receive in AH without echo
0183+  0717 B9 00       	cmp al, 0						; check error code (AL)
0184+  0719 C6 11 07    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  071C 76 44       	cmp ah, 'D'
0186+  071E C6 29 07    	je gets_left_arrow
0187+  0721 76 43       	cmp ah, 'C'
0188+  0723 C6 2D 07    	je gets_right_arrow
0189+  0726 0A D3 06    	jmp gets_loop
0190+  0729             gets_left_arrow:
0191+  0729 7F          	dec d
0192+  072A 0A D3 06    	jmp gets_loop
0193+  072D             gets_right_arrow:
0194+  072D 79          	inc d
0195+  072E 0A D3 06    	jmp gets_loop
0196+  0731             gets_escape:
0197+  0731 FD 0C       	sti
0198+  0733 19 01       	mov al, 1
0199+  0735 05 03       	syscall sys_io			; receive in AH
0200+  0737 B9 00       	cmp al, 0				; check error code (AL)
0201+  0739 C6 31 07    	je gets_escape			; if no char received, retry
0202+  073C 76 6E       	cmp ah, 'n'
0203+  073E C6 4C 07    	je gets_LF
0204+  0741 76 72       	cmp ah, 'r'
0205+  0743 C6 53 07    	je gets_CR
0206+  0746 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0747 3E          	mov [d], al
0208+  0748 79          	inc d
0209+  0749 0A D3 06    	jmp gets_loop
0210+  074C             gets_LF:
0211+  074C 19 0A       	mov al, $0A
0212+  074E 3E          	mov [d], al
0213+  074F 79          	inc d
0214+  0750 0A D3 06    	jmp gets_loop
0215+  0753             gets_CR:
0216+  0753 19 0D       	mov al, $0D
0217+  0755 3E          	mov [d], al
0218+  0756 79          	inc d
0219+  0757 0A D3 06    	jmp gets_loop
0220+  075A             gets_end:
0221+  075A 19 00       	mov al, 0
0222+  075C 3E          	mov [d], al				; terminate string
0223+  075D E7          	pop d
0224+  075E E4          	pop a
0225+  075F 09          	ret
0226+  0760             
0227+  0760             
0228+  0760             
0229+  0760             
0230+  0760             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0760             ;; INPUT TEXT
0232+  0760             ;; terminated with CTRL+D
0233+  0760             ;; pointer in D
0234+  0760             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0760             gettxt:
0236+  0760 D7          	push a
0237+  0761 DA          	push d
0238+  0762             gettxt_loop:
0239+  0762 19 01       	mov al, 1
0240+  0764 05 03       	syscall sys_io			; receive in AH
0241+  0766 B9 00       	cmp al, 0				; check error code (AL)
0242+  0768 C6 62 07    	je gettxt_loop		; if no char received, retry
0243+  076B 76 04       	cmp ah, 4			; EOT
0244+  076D C6 AB 07    	je gettxt_end
0245+  0770 76 08       	cmp ah, $08			; check for backspace
0246+  0772 C6 A7 07    	je gettxt_backspace
0247+  0775 76 5C       	cmp ah, $5C				; '\\'
0248+  0777 C6 80 07    	je gettxt_escape
0249+  077A 1A          	mov al, ah
0250+  077B 3E          	mov [d], al
0251+  077C 79          	inc d
0252+  077D 0A 62 07    	jmp gettxt_loop
0253+  0780             gettxt_escape:
0254+  0780 19 01       	mov al, 1
0255+  0782 05 03       	syscall sys_io			; receive in AH
0256+  0784 B9 00       	cmp al, 0				; check error code (AL)
0257+  0786 C6 80 07    	je gettxt_escape		; if no char received, retry
0258+  0789 76 6E       	cmp ah, 'n'
0259+  078B C6 99 07    	je gettxt_LF
0260+  078E 76 72       	cmp ah, 'r'
0261+  0790 C6 A0 07    	je gettxt_CR
0262+  0793 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0794 3E          	mov [d], al
0264+  0795 79          	inc d
0265+  0796 0A 62 07    	jmp gettxt_loop
0266+  0799             gettxt_LF:
0267+  0799 19 0A       	mov al, $0A
0268+  079B 3E          	mov [d], al
0269+  079C 79          	inc d
0270+  079D 0A 62 07    	jmp gettxt_loop
0271+  07A0             gettxt_CR:
0272+  07A0 19 0D       	mov al, $0D
0273+  07A2 3E          	mov [d], al
0274+  07A3 79          	inc d
0275+  07A4 0A 62 07    	jmp gettxt_loop
0276+  07A7             gettxt_backspace:
0277+  07A7 7F          	dec d
0278+  07A8 0A 62 07    	jmp gettxt_loop
0279+  07AB             gettxt_end:
0280+  07AB 19 00       	mov al, 0
0281+  07AD 3E          	mov [d], al				; terminate string
0282+  07AE E7          	pop d
0283+  07AF E4          	pop a
0284+  07B0 09          	ret
0285+  07B1             
0286+  07B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  07B1             ; PRINT NEW LINE
0288+  07B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  07B1             printnl:
0290+  07B1 D7          	push a
0291+  07B2 10 00 0A    	mov a, $0A00
0292+  07B5 05 03       	syscall sys_io
0293+  07B7 10 00 0D    	mov a, $0D00
0294+  07BA 05 03       	syscall sys_io
0295+  07BC E4          	pop a
0296+  07BD 09          	ret
0297+  07BE             
0298+  07BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  07BE             ; strtoint
0300+  07BE             ; 4 digit hex string number in d
0301+  07BE             ; integer returned in A
0302+  07BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  07BE             strtointx:
0304+  07BE D8          	push b
0305+  07BF 32          	mov bl, [d]
0306+  07C0 37          	mov bh, bl
0307+  07C1 33 01 00    	mov bl, [d + 1]
0308+  07C4 07 7F 06    	call atoi				; convert to int in AL
0309+  07C7 23          	mov ah, al				; move to AH
0310+  07C8 33 02 00    	mov bl, [d + 2]
0311+  07CB 37          	mov bh, bl
0312+  07CC 33 03 00    	mov bl, [d + 3]
0313+  07CF 07 7F 06    	call atoi				; convert to int in AL
0314+  07D2 E5          	pop b
0315+  07D3 09          	ret
0316+  07D4             
0317+  07D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  07D4             ; strtoint
0319+  07D4             ; 5 digit base10 string number in d
0320+  07D4             ; integer returned in A
0321+  07D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  07D4             strtoint:
0323+  07D4 E2          	push si
0324+  07D5 D8          	push b
0325+  07D6 D9          	push c
0326+  07D7 DA          	push d
0327+  07D8 07 FF 05    	call strlen			; get string length in C
0328+  07DB 7E          	dec c
0329+  07DC FD 4E       	mov si, d
0330+  07DE 12          	mov a, c
0331+  07DF FD 99       	shl a
0332+  07E1 3B 67 06    	mov d, table_power
0333+  07E4 59          	add d, a
0334+  07E5 38 00 00    	mov c, 0
0335+  07E8             strtoint_L0:
0336+  07E8 F6          	lodsb			; load ASCII to al
0337+  07E9 B9 00       	cmp al, 0
0338+  07EB C6 FE 07    	je strtoint_end
0339+  07EE 6F 30       	sub al, $30		; make into integer
0340+  07F0 22 00       	mov ah, 0
0341+  07F2 2A          	mov b, [d]
0342+  07F3 AC          	mul a, b			; result in B since it fits in 16bits
0343+  07F4 11          	mov a, b
0344+  07F5 28          	mov b, c
0345+  07F6 54          	add a, b
0346+  07F7 39          	mov c, a
0347+  07F8 63 02 00    	sub d, 2
0348+  07FB 0A E8 07    	jmp strtoint_L0
0349+  07FE             strtoint_end:
0350+  07FE 12          	mov a, c
0351+  07FF E7          	pop d
0352+  0800 E6          	pop c
0353+  0801 E5          	pop b
0354+  0802 EF          	pop si
0355+  0803 09          	ret
0356+  0804             
0357+  0804             
0358+  0804             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0804             ; PRINT NULL TERMINATED STRING
0360+  0804             ; pointer in D
0361+  0804             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0804             puts:
0363+  0804 D7          	push a
0364+  0805 DA          	push d
0365+  0806             puts_L1:
0366+  0806 1E          	mov al, [d]
0367+  0807 B9 00       	cmp al, 0
0368+  0809 C6 15 08    	jz puts_END
0369+  080C 23          	mov ah, al
0370+  080D 19 00       	mov al, 0
0371+  080F 05 03       	syscall sys_io
0372+  0811 79          	inc d
0373+  0812 0A 06 08    	jmp puts_L1
0374+  0815             puts_END:
0375+  0815 E7          	pop d
0376+  0816 E4          	pop a
0377+  0817 09          	ret
0378+  0818             
0379+  0818             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0818             ; PRINT N SIZE STRING
0381+  0818             ; pointer in D
0382+  0818             ; size in C
0383+  0818             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0818             putsn:
0385+  0818 DB          	push al
0386+  0819 DA          	push d
0387+  081A D9          	push c
0388+  081B             putsn_L0:
0389+  081B 1E          	mov al, [d]
0390+  081C 23          	mov ah, al
0391+  081D 19 00       	mov al, 0
0392+  081F 05 03       	syscall sys_io
0393+  0821 79          	inc d
0394+  0822 7E          	dec c	
0395+  0823 C2 00 00    	cmp c, 0
0396+  0826 C7 1B 08    	jne putsn_L0
0397+  0829             putsn_end:
0398+  0829 E6          	pop c
0399+  082A E7          	pop d
0400+  082B E8          	pop al
0401+  082C 09          	ret
0402+  082D             
0403+  082D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  082D             ; print 16bit decimal number
0405+  082D             ; input number in A
0406+  082D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  082D             print_u16d:
0408+  082D D7          	push a
0409+  082E D8          	push b
0410+  082F 26 10 27    	mov b, 10000
0411+  0832 AE          	div a, b			; get 10000 coeff.
0412+  0833 07 59 08    	call print_number
0413+  0836 11          	mov a, b
0414+  0837 26 E8 03    	mov b, 1000
0415+  083A AE          	div a, b			; get 10000 coeff.
0416+  083B 07 59 08    	call print_number
0417+  083E 11          	mov a, b
0418+  083F 26 64 00    	mov b, 100
0419+  0842 AE          	div a, b
0420+  0843 07 59 08    	call print_number
0421+  0846 11          	mov a, b
0422+  0847 26 0A 00    	mov b, 10
0423+  084A AE          	div a, b
0424+  084B 07 59 08    	call print_number
0425+  084E 11          	mov a, b
0426+  084F 6A 30       	add al, $30
0427+  0851 23          	mov ah, al
0428+  0852 19 00       	mov al, 0
0429+  0854 05 03       	syscall sys_io	; print coeff
0430+  0856 E5          	pop b
0431+  0857 E4          	pop a
0432+  0858 09          	ret
0433+  0859             
0434+  0859             
0435+  0859             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0859             ; if A == 0, print space
0437+  0859             ; else print A
0438+  0859             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  0859             print_number:
0440+  0859 6A 30       	add al, $30
0441+  085B 23          	mov ah, al
0442+  085C 07 CA 06    	call putchar
0443+  085F 09          	ret
0444+  0860             
0445+  0860             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0860             ; PRINT 16BIT HEX INTEGER
0447+  0860             ; integer value in reg B
0448+  0860             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0860             print_u16x:
0450+  0860 D7          	push a
0451+  0861 D8          	push b
0452+  0862 DD          	push bl
0453+  0863 30          	mov bl, bh
0454+  0864 07 91 06    	call itoa				; convert bh to char in A
0455+  0867 2F          	mov bl, al				; save al
0456+  0868 19 00       	mov al, 0
0457+  086A 05 03       	syscall sys_io				; display AH
0458+  086C 24          	mov ah, bl				; retrieve al
0459+  086D 19 00       	mov al, 0
0460+  086F 05 03       	syscall sys_io				; display AL
0461+  0871             
0462+  0871 EA          	pop bl
0463+  0872 07 91 06    	call itoa				; convert bh to char in A
0464+  0875 2F          	mov bl, al				; save al
0465+  0876 19 00       	mov al, 0
0466+  0878 05 03       	syscall sys_io				; display AH
0467+  087A 24          	mov ah, bl				; retrieve al
0468+  087B 19 00       	mov al, 0
0469+  087D 05 03       	syscall sys_io				; display AL
0470+  087F             
0471+  087F E5          	pop b
0472+  0880 E4          	pop a
0473+  0881 09          	ret
0474+  0882             
0475+  0882             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0882             ; INPUT 16BIT HEX INTEGER
0477+  0882             ; read 16bit integer into A
0478+  0882             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0882             scan_u16x:
0480+  0882 F8 10 00    	enter 16
0481+  0885 D8          	push b
0482+  0886 DA          	push d
0483+  0887             
0484+  0887 FA F1 FF    	lea d, [bp + -15]
0485+  088A 07 D1 06    	call gets				; get number
0486+  088D             
0487+  088D 32          	mov bl, [d]
0488+  088E 37          	mov bh, bl
0489+  088F 33 01 00    	mov bl, [d + 1]
0490+  0892 07 7F 06    	call atoi				; convert to int in AL
0491+  0895 23          	mov ah, al				; move to AH
0492+  0896             
0493+  0896 33 02 00    	mov bl, [d + 2]
0494+  0899 37          	mov bh, bl
0495+  089A 33 03 00    	mov bl, [d + 3]
0496+  089D 07 7F 06    	call atoi				; convert to int in AL
0497+  08A0             
0498+  08A0 E7          	pop d
0499+  08A1 E5          	pop b
0500+  08A2 F9          	leave
0501+  08A3 09          	ret
0502+  08A4             
0503+  08A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  08A4             ; PRINT 8bit HEX INTEGER
0505+  08A4             ; integer value in reg bl
0506+  08A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  08A4             print_u8x:
0508+  08A4 D7          	push a
0509+  08A5 DD          	push bl
0510+  08A6             
0511+  08A6 07 91 06    	call itoa				; convert bl to char in A
0512+  08A9 2F          	mov bl, al				; save al
0513+  08AA 19 00       	mov al, 0
0514+  08AC 05 03       	syscall sys_io				; display AH
0515+  08AE 24          	mov ah, bl				; retrieve al
0516+  08AF 19 00       	mov al, 0
0517+  08B1 05 03       	syscall sys_io				; display AL
0518+  08B3             
0519+  08B3 EA          	pop bl
0520+  08B4 E4          	pop a
0521+  08B5 09          	ret
0522+  08B6             
0523+  08B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  08B6             ; print 8bit decimal unsigned number
0525+  08B6             ; input number in AL
0526+  08B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  08B6             print_u8d:
0528+  08B6 D7          	push a
0529+  08B7 D8          	push b
0530+  08B8             
0531+  08B8 22 00       	mov ah, 0
0532+  08BA 26 64 00    	mov b, 100
0533+  08BD AE          	div a, b
0534+  08BE D8          	push b			; save remainder
0535+  08BF B9 00       	cmp al, 0
0536+  08C1 C6 CB 08    	je skip100
0537+  08C4 6A 30       	add al, $30
0538+  08C6 23          	mov ah, al
0539+  08C7 19 00       	mov al, 0
0540+  08C9 05 03       	syscall sys_io	; print coeff
0541+  08CB             skip100:
0542+  08CB E4          	pop a
0543+  08CC 22 00       	mov ah, 0
0544+  08CE 26 0A 00    	mov b, 10
0545+  08D1 AE          	div a, b
0546+  08D2 D8          	push b			; save remainder
0547+  08D3 B9 00       	cmp al, 0
0548+  08D5 C6 DF 08    	je skip10
0549+  08D8 6A 30       	add al, $30
0550+  08DA 23          	mov ah, al
0551+  08DB 19 00       	mov al, 0
0552+  08DD 05 03       	syscall sys_io	; print coeff
0553+  08DF             skip10:
0554+  08DF E4          	pop a
0555+  08E0 1B          	mov al, bl
0556+  08E1 6A 30       	add al, $30
0557+  08E3 23          	mov ah, al
0558+  08E4 19 00       	mov al, 0
0559+  08E6 05 03       	syscall sys_io	; print coeff
0560+  08E8 E5          	pop b
0561+  08E9 E4          	pop a
0562+  08EA 09          	ret
0563+  08EB             
0564+  08EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  08EB             ; INPUT 8BIT HEX INTEGER
0566+  08EB             ; read 8bit integer into AL
0567+  08EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  08EB             scan_u8x:
0569+  08EB F8 04 00    	enter 4
0570+  08EE D8          	push b
0571+  08EF DA          	push d
0572+  08F0             
0573+  08F0 FA FD FF    	lea d, [bp + -3]
0574+  08F3 07 D1 06    	call gets				; get number
0575+  08F6             
0576+  08F6 32          	mov bl, [d]
0577+  08F7 37          	mov bh, bl
0578+  08F8 33 01 00    	mov bl, [d + 1]
0579+  08FB 07 7F 06    	call atoi				; convert to int in AL
0580+  08FE             
0581+  08FE E7          	pop d
0582+  08FF E5          	pop b
0583+  0900 F9          	leave
0584+  0901 09          	ret
0585+  0902             
0586+  0902             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0902             ; input decimal number
0588+  0902             ; result in A
0589+  0902             ; 655'\0'
0590+  0902             ; low--------high
0591+  0902             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  0902             scan_u16d:
0593+  0902 F8 08 00    	enter 8
0594+  0905 E2          	push si
0595+  0906 D8          	push b
0596+  0907 D9          	push c
0597+  0908 DA          	push d
0598+  0909 FA F9 FF    	lea d, [bp +- 7]
0599+  090C 07 D1 06    	call gets
0600+  090F 07 FF 05    	call strlen			; get string length in C
0601+  0912 7E          	dec c
0602+  0913 FD 4E       	mov si, d
0603+  0915 12          	mov a, c
0604+  0916 FD 99       	shl a
0605+  0918 3B 67 06    	mov d, table_power
0606+  091B 59          	add d, a
0607+  091C 38 00 00    	mov c, 0
0608+  091F             mul_loop:
0609+  091F F6          	lodsb			; load ASCII to al
0610+  0920 B9 00       	cmp al, 0
0611+  0922 C6 35 09    	je mul_exit
0612+  0925 6F 30       	sub al, $30		; make into integer
0613+  0927 22 00       	mov ah, 0
0614+  0929 2A          	mov b, [d]
0615+  092A AC          	mul a, b			; result in B since it fits in 16bits
0616+  092B 11          	mov a, b
0617+  092C 28          	mov b, c
0618+  092D 54          	add a, b
0619+  092E 39          	mov c, a
0620+  092F 63 02 00    	sub d, 2
0621+  0932 0A 1F 09    	jmp mul_loop
0622+  0935             mul_exit:
0623+  0935 12          	mov a, c
0624+  0936 E7          	pop d
0625+  0937 E6          	pop c
0626+  0938 E5          	pop b
0627+  0939 EF          	pop si
0628+  093A F9          	leave
0629+  093B 09          	ret
0307   093C             ; --- END INCLUDE BLOCK
0308   093C             
0309   093C             
0310   093C             .end
tasm: Number of errors = 0
