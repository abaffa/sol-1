0001   0000             ; --- FILENAME: largenumSol1.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402             _for1_init:
0011   0402 26 00 00      mov b, 0
0012   0405 FD 42 94 31   mov [__pos], b
0013   0409             _for1_cond:
0014   0409 29 94 31      mov b, [__pos] ; pos
0015   040C D7            push a
0016   040D 11            mov a, b
0017   040E 26 3C 00      mov b, 60
0018   0411 B0            cmp a, b
0019   0412 0E            lodflgs
0020   0413 87 02         and al, %00000010 ; <
0021   0415 FD 9C         shr al
0022   0417 22 00         mov ah, 0
0023   0419 27            mov b, a
0024   041A E4            pop a
0025   041B C0 00 00      cmp b, 0
0026   041E C6 3D 04      je _for1_exit
0027   0421             _for1_block:
0028   0421 26 00 00      mov b, 0
0029   0424 FD AB         swp b
0030   0426 D8            push b
0031   0427 07 0C 14      call prnnum
0032   042A 51 02 00      add sp, 2
0033   042D             _for1_update:
0034   042D 29 94 31      mov b, [__pos] ; pos
0035   0430 D7            push a
0036   0431 11            mov a, b
0037   0432 FD 77         inc b
0038   0434 FD 42 94 31   mov [__pos], b
0039   0438 27            mov b, a
0040   0439 E4            pop a
0041   043A 0A 09 04      jmp _for1_cond
0042   043D             _for1_exit:
0043   043D 07 16 14      call prnnl
0044   0440             _for2_init:
0045   0440 26 06 00      mov b, 6
0046   0443 FD 42 94 31   mov [__pos], b
0047   0447             _for2_cond:
0048   0447 29 94 31      mov b, [__pos] ; pos
0049   044A D7            push a
0050   044B 11            mov a, b
0051   044C 26 00 00      mov b, 0
0052   044F B0            cmp a, b
0053   0450 0E            lodflgs
0054   0451 87 03         and al, %00000011
0055   0453 B9 00         cmp al, 0
0056   0455 0E            lodflgs
0057   0456 22 00         mov ah, 0
0058   0458 27            mov b, a
0059   0459 E4            pop a
0060   045A C0 00 00      cmp b, 0
0061   045D C6 D6 05      je _for2_exit
0062   0460             _for2_block:
0063   0460 07 EB 13      call readint
0064   0463 FD 42 6E 30   mov [__ionr], b
0065   0467 29 6E 30      mov b, [__ionr] ; ionr
0066   046A D7            push a
0067   046B 11            mov a, b
0068   046C 26 10 27      mov b, 10000
0069   046F AE            div a, b
0070   0470 FD 78         mov g, a
0071   0472 11            mov a, b
0072   0473 FD 27         mov b, g
0073   0475 E4            pop a
0074   0476 FD 42 70 30   mov [__ioshift], b
0075   047A 29 70 30      mov b, [__ioshift] ; ioshift
0076   047D D7            push a
0077   047E 11            mov a, b
0078   047F 26 10 27      mov b, 10000
0079   0482 AC            mul a, b
0080   0483 E4            pop a
0081   0484 FD 42 70 30   mov [__ioshift], b
0082   0488 29 6E 30      mov b, [__ionr] ; ionr
0083   048B D7            push a
0084   048C 11            mov a, b
0085   048D 29 70 30      mov b, [__ioshift] ; ioshift
0086   0490 60            sub a, b
0087   0491 27            mov b, a
0088   0492 E4            pop a
0089   0493 FD 42 6E 30   mov [__ionr], b
0090   0497 29 6C 30      mov b, [__ionum]
0091   049A D7            push a
0092   049B 74            mov d, b
0093   049C DA            push d
0094   049D 29 94 31      mov b, [__pos] ; pos
0095   04A0 D7            push a
0096   04A1 11            mov a, b
0097   04A2 26 01 00      mov b, 1
0098   04A5 60            sub a, b
0099   04A6 27            mov b, a
0100   04A7 E4            pop a
0101   04A8 E7            pop d
0102   04A9 10 02 00      mov a, 2
0103   04AC AC            mul a, b
0104   04AD 5A            add d, b
0105   04AE E4            pop a
0106   04AF DA            push d
0107   04B0 29 6E 30      mov b, [__ionr] ; ionr
0108   04B3 E7            pop d
0109   04B4 FD 43         mov [d], b
0110   04B6             _for3_init:
0111   04B6 26 06 00      mov b, 6
0112   04B9 FD 42 BC 30   mov [__datumpos], b
0113   04BD             _for3_cond:
0114   04BD 29 BC 30      mov b, [__datumpos] ; datumpos
0115   04C0 D7            push a
0116   04C1 11            mov a, b
0117   04C2 29 94 31      mov b, [__pos] ; pos
0118   04C5 B0            cmp a, b
0119   04C6 0E            lodflgs
0120   04C7 87 03         and al, %00000011
0121   04C9 8F 02         xor al, %00000010 ; >=
0122   04CB B9 00         cmp al, 0
0123   04CD 0E            lodflgs
0124   04CE 8F 01         xor al, %00000001
0125   04D0 22 00         mov ah, 0
0126   04D2 27            mov b, a
0127   04D3 E4            pop a
0128   04D4 C0 00 00      cmp b, 0
0129   04D7 C6 C3 05      je _for3_exit
0130   04DA             _for3_block:
0131   04DA             _if4_cond:
0132   04DA 29 6C 30      mov b, [__ionum]
0133   04DD D7            push a
0134   04DE 74            mov d, b
0135   04DF DA            push d
0136   04E0 29 BC 30      mov b, [__datumpos] ; datumpos
0137   04E3 D7            push a
0138   04E4 11            mov a, b
0139   04E5 26 01 00      mov b, 1
0140   04E8 60            sub a, b
0141   04E9 27            mov b, a
0142   04EA E4            pop a
0143   04EB E7            pop d
0144   04EC 10 02 00      mov a, 2
0145   04EF AC            mul a, b
0146   04F0 5A            add d, b
0147   04F1 2A            mov b, [d]
0148   04F2 E4            pop a
0149   04F3 D7            push a
0150   04F4 11            mov a, b
0151   04F5 26 E8 03      mov b, 1000
0152   04F8 B0            cmp a, b
0153   04F9 0E            lodflgs
0154   04FA 87 02         and al, %00000010 ; <
0155   04FC FD 9C         shr al
0156   04FE 22 00         mov ah, 0
0157   0500 27            mov b, a
0158   0501 E4            pop a
0159   0502 C0 00 00      cmp b, 0
0160   0505 C6 17 05      je _if4_exit
0161   0508             _if4_true:
0162   0508 26 00 00      mov b, 0
0163   050B FD AB         swp b
0164   050D D8            push b
0165   050E 07 0C 14      call prnnum
0166   0511 51 02 00      add sp, 2
0167   0514 0A 17 05      jmp _if4_exit
0168   0517             _if4_exit:
0169   0517             _if5_cond:
0170   0517 29 6C 30      mov b, [__ionum]
0171   051A D7            push a
0172   051B 74            mov d, b
0173   051C DA            push d
0174   051D 29 BC 30      mov b, [__datumpos] ; datumpos
0175   0520 D7            push a
0176   0521 11            mov a, b
0177   0522 26 01 00      mov b, 1
0178   0525 60            sub a, b
0179   0526 27            mov b, a
0180   0527 E4            pop a
0181   0528 E7            pop d
0182   0529 10 02 00      mov a, 2
0183   052C AC            mul a, b
0184   052D 5A            add d, b
0185   052E 2A            mov b, [d]
0186   052F E4            pop a
0187   0530 D7            push a
0188   0531 11            mov a, b
0189   0532 26 64 00      mov b, 100
0190   0535 B0            cmp a, b
0191   0536 0E            lodflgs
0192   0537 87 02         and al, %00000010 ; <
0193   0539 FD 9C         shr al
0194   053B 22 00         mov ah, 0
0195   053D 27            mov b, a
0196   053E E4            pop a
0197   053F C0 00 00      cmp b, 0
0198   0542 C6 54 05      je _if5_exit
0199   0545             _if5_true:
0200   0545 26 00 00      mov b, 0
0201   0548 FD AB         swp b
0202   054A D8            push b
0203   054B 07 0C 14      call prnnum
0204   054E 51 02 00      add sp, 2
0205   0551 0A 54 05      jmp _if5_exit
0206   0554             _if5_exit:
0207   0554             _if6_cond:
0208   0554 29 6C 30      mov b, [__ionum]
0209   0557 D7            push a
0210   0558 74            mov d, b
0211   0559 DA            push d
0212   055A 29 BC 30      mov b, [__datumpos] ; datumpos
0213   055D D7            push a
0214   055E 11            mov a, b
0215   055F 26 01 00      mov b, 1
0216   0562 60            sub a, b
0217   0563 27            mov b, a
0218   0564 E4            pop a
0219   0565 E7            pop d
0220   0566 10 02 00      mov a, 2
0221   0569 AC            mul a, b
0222   056A 5A            add d, b
0223   056B 2A            mov b, [d]
0224   056C E4            pop a
0225   056D D7            push a
0226   056E 11            mov a, b
0227   056F 26 0A 00      mov b, 10
0228   0572 B0            cmp a, b
0229   0573 0E            lodflgs
0230   0574 87 02         and al, %00000010 ; <
0231   0576 FD 9C         shr al
0232   0578 22 00         mov ah, 0
0233   057A 27            mov b, a
0234   057B E4            pop a
0235   057C C0 00 00      cmp b, 0
0236   057F C6 91 05      je _if6_exit
0237   0582             _if6_true:
0238   0582 26 00 00      mov b, 0
0239   0585 FD AB         swp b
0240   0587 D8            push b
0241   0588 07 0C 14      call prnnum
0242   058B 51 02 00      add sp, 2
0243   058E 0A 91 05      jmp _if6_exit
0244   0591             _if6_exit:
0245   0591 29 6C 30      mov b, [__ionum]
0246   0594 D7            push a
0247   0595 74            mov d, b
0248   0596 DA            push d
0249   0597 29 BC 30      mov b, [__datumpos] ; datumpos
0250   059A D7            push a
0251   059B 11            mov a, b
0252   059C 26 01 00      mov b, 1
0253   059F 60            sub a, b
0254   05A0 27            mov b, a
0255   05A1 E4            pop a
0256   05A2 E7            pop d
0257   05A3 10 02 00      mov a, 2
0258   05A6 AC            mul a, b
0259   05A7 5A            add d, b
0260   05A8 2A            mov b, [d]
0261   05A9 E4            pop a
0262   05AA FD AB         swp b
0263   05AC D8            push b
0264   05AD 07 0C 14      call prnnum
0265   05B0 51 02 00      add sp, 2
0266   05B3             _for3_update:
0267   05B3 29 BC 30      mov b, [__datumpos] ; datumpos
0268   05B6 D7            push a
0269   05B7 11            mov a, b
0270   05B8 FD 7D         dec b
0271   05BA FD 42 BC 30   mov [__datumpos], b
0272   05BE 27            mov b, a
0273   05BF E4            pop a
0274   05C0 0A BD 04      jmp _for3_cond
0275   05C3             _for3_exit:
0276   05C3 07 16 14      call prnnl
0277   05C6             _for2_update:
0278   05C6 29 94 31      mov b, [__pos] ; pos
0279   05C9 D7            push a
0280   05CA 11            mov a, b
0281   05CB FD 7D         dec b
0282   05CD FD 42 94 31   mov [__pos], b
0283   05D1 27            mov b, a
0284   05D2 E4            pop a
0285   05D3 0A 47 04      jmp _for2_cond
0286   05D6             _for2_exit:
0287   05D6 26 00 00      mov b, 0
0288   05D9 FD 42 BC 30   mov [__datumpos], b
0289   05DD             _for7_init:
0290   05DD 29 BC 30      mov b, [__datumpos] ; datumpos
0291   05E0 D7            push a
0292   05E1 11            mov a, b
0293   05E2 26 06 00      mov b, 6
0294   05E5 AC            mul a, b
0295   05E6 E4            pop a
0296   05E7 FD 42 94 31   mov [__pos], b
0297   05EB             _for7_cond:
0298   05EB 29 94 31      mov b, [__pos] ; pos
0299   05EE D7            push a
0300   05EF 11            mov a, b
0301   05F0 29 BC 30      mov b, [__datumpos] ; datumpos
0302   05F3 D7            push a
0303   05F4 11            mov a, b
0304   05F5 26 06 00      mov b, 6
0305   05F8 AC            mul a, b
0306   05F9 E4            pop a
0307   05FA D7            push a
0308   05FB 11            mov a, b
0309   05FC 26 06 00      mov b, 6
0310   05FF 54            add a, b
0311   0600 27            mov b, a
0312   0601 E4            pop a
0313   0602 B0            cmp a, b
0314   0603 0E            lodflgs
0315   0604 87 02         and al, %00000010 ; <
0316   0606 FD 9C         shr al
0317   0608 22 00         mov ah, 0
0318   060A 27            mov b, a
0319   060B E4            pop a
0320   060C C0 00 00      cmp b, 0
0321   060F C6 56 06      je _for7_exit
0322   0612             _for7_block:
0323   0612 29 BA 30      mov b, [__datum]
0324   0615 D7            push a
0325   0616 74            mov d, b
0326   0617 DA            push d
0327   0618 29 94 31      mov b, [__pos] ; pos
0328   061B E7            pop d
0329   061C 10 02 00      mov a, 2
0330   061F AC            mul a, b
0331   0620 5A            add d, b
0332   0621 E4            pop a
0333   0622 DA            push d
0334   0623 29 6C 30      mov b, [__ionum]
0335   0626 D7            push a
0336   0627 74            mov d, b
0337   0628 DA            push d
0338   0629 29 94 31      mov b, [__pos] ; pos
0339   062C D7            push a
0340   062D 11            mov a, b
0341   062E 29 BC 30      mov b, [__datumpos] ; datumpos
0342   0631 D7            push a
0343   0632 11            mov a, b
0344   0633 26 06 00      mov b, 6
0345   0636 AC            mul a, b
0346   0637 E4            pop a
0347   0638 60            sub a, b
0348   0639 27            mov b, a
0349   063A E4            pop a
0350   063B E7            pop d
0351   063C 10 02 00      mov a, 2
0352   063F AC            mul a, b
0353   0640 5A            add d, b
0354   0641 2A            mov b, [d]
0355   0642 E4            pop a
0356   0643 E7            pop d
0357   0644 FD 43         mov [d], b
0358   0646             _for7_update:
0359   0646 29 94 31      mov b, [__pos] ; pos
0360   0649 D7            push a
0361   064A 11            mov a, b
0362   064B FD 77         inc b
0363   064D FD 42 94 31   mov [__pos], b
0364   0651 27            mov b, a
0365   0652 E4            pop a
0366   0653 0A EB 05      jmp _for7_cond
0367   0656             _for7_exit:
0368   0656             _for8_init:
0369   0656 26 00 00      mov b, 0
0370   0659 FD 42 94 31   mov [__pos], b
0371   065D             _for8_cond:
0372   065D 29 94 31      mov b, [__pos] ; pos
0373   0660 D7            push a
0374   0661 11            mov a, b
0375   0662 26 3C 00      mov b, 60
0376   0665 B0            cmp a, b
0377   0666 0E            lodflgs
0378   0667 87 02         and al, %00000010 ; <
0379   0669 FD 9C         shr al
0380   066B 22 00         mov ah, 0
0381   066D 27            mov b, a
0382   066E E4            pop a
0383   066F C0 00 00      cmp b, 0
0384   0672 C6 91 06      je _for8_exit
0385   0675             _for8_block:
0386   0675 26 00 00      mov b, 0
0387   0678 FD AB         swp b
0388   067A D8            push b
0389   067B 07 0C 14      call prnnum
0390   067E 51 02 00      add sp, 2
0391   0681             _for8_update:
0392   0681 29 94 31      mov b, [__pos] ; pos
0393   0684 D7            push a
0394   0685 11            mov a, b
0395   0686 FD 77         inc b
0396   0688 FD 42 94 31   mov [__pos], b
0397   068C 27            mov b, a
0398   068D E4            pop a
0399   068E 0A 5D 06      jmp _for8_cond
0400   0691             _for8_exit:
0401   0691 07 16 14      call prnnl
0402   0694             _for9_init:
0403   0694 26 06 00      mov b, 6
0404   0697 FD 42 94 31   mov [__pos], b
0405   069B             _for9_cond:
0406   069B 29 94 31      mov b, [__pos] ; pos
0407   069E D7            push a
0408   069F 11            mov a, b
0409   06A0 26 00 00      mov b, 0
0410   06A3 B0            cmp a, b
0411   06A4 0E            lodflgs
0412   06A5 87 03         and al, %00000011
0413   06A7 B9 00         cmp al, 0
0414   06A9 0E            lodflgs
0415   06AA 22 00         mov ah, 0
0416   06AC 27            mov b, a
0417   06AD E4            pop a
0418   06AE C0 00 00      cmp b, 0
0419   06B1 C6 2A 08      je _for9_exit
0420   06B4             _for9_block:
0421   06B4 07 EB 13      call readint
0422   06B7 FD 42 6E 30   mov [__ionr], b
0423   06BB 29 6E 30      mov b, [__ionr] ; ionr
0424   06BE D7            push a
0425   06BF 11            mov a, b
0426   06C0 26 10 27      mov b, 10000
0427   06C3 AE            div a, b
0428   06C4 FD 78         mov g, a
0429   06C6 11            mov a, b
0430   06C7 FD 27         mov b, g
0431   06C9 E4            pop a
0432   06CA FD 42 70 30   mov [__ioshift], b
0433   06CE 29 70 30      mov b, [__ioshift] ; ioshift
0434   06D1 D7            push a
0435   06D2 11            mov a, b
0436   06D3 26 10 27      mov b, 10000
0437   06D6 AC            mul a, b
0438   06D7 E4            pop a
0439   06D8 FD 42 70 30   mov [__ioshift], b
0440   06DC 29 6E 30      mov b, [__ionr] ; ionr
0441   06DF D7            push a
0442   06E0 11            mov a, b
0443   06E1 29 70 30      mov b, [__ioshift] ; ioshift
0444   06E4 60            sub a, b
0445   06E5 27            mov b, a
0446   06E6 E4            pop a
0447   06E7 FD 42 6E 30   mov [__ionr], b
0448   06EB 29 6C 30      mov b, [__ionum]
0449   06EE D7            push a
0450   06EF 74            mov d, b
0451   06F0 DA            push d
0452   06F1 29 94 31      mov b, [__pos] ; pos
0453   06F4 D7            push a
0454   06F5 11            mov a, b
0455   06F6 26 01 00      mov b, 1
0456   06F9 60            sub a, b
0457   06FA 27            mov b, a
0458   06FB E4            pop a
0459   06FC E7            pop d
0460   06FD 10 02 00      mov a, 2
0461   0700 AC            mul a, b
0462   0701 5A            add d, b
0463   0702 E4            pop a
0464   0703 DA            push d
0465   0704 29 6E 30      mov b, [__ionr] ; ionr
0466   0707 E7            pop d
0467   0708 FD 43         mov [d], b
0468   070A             _for10_init:
0469   070A 26 06 00      mov b, 6
0470   070D FD 42 BC 30   mov [__datumpos], b
0471   0711             _for10_cond:
0472   0711 29 BC 30      mov b, [__datumpos] ; datumpos
0473   0714 D7            push a
0474   0715 11            mov a, b
0475   0716 29 94 31      mov b, [__pos] ; pos
0476   0719 B0            cmp a, b
0477   071A 0E            lodflgs
0478   071B 87 03         and al, %00000011
0479   071D 8F 02         xor al, %00000010 ; >=
0480   071F B9 00         cmp al, 0
0481   0721 0E            lodflgs
0482   0722 8F 01         xor al, %00000001
0483   0724 22 00         mov ah, 0
0484   0726 27            mov b, a
0485   0727 E4            pop a
0486   0728 C0 00 00      cmp b, 0
0487   072B C6 17 08      je _for10_exit
0488   072E             _for10_block:
0489   072E             _if11_cond:
0490   072E 29 6C 30      mov b, [__ionum]
0491   0731 D7            push a
0492   0732 74            mov d, b
0493   0733 DA            push d
0494   0734 29 BC 30      mov b, [__datumpos] ; datumpos
0495   0737 D7            push a
0496   0738 11            mov a, b
0497   0739 26 01 00      mov b, 1
0498   073C 60            sub a, b
0499   073D 27            mov b, a
0500   073E E4            pop a
0501   073F E7            pop d
0502   0740 10 02 00      mov a, 2
0503   0743 AC            mul a, b
0504   0744 5A            add d, b
0505   0745 2A            mov b, [d]
0506   0746 E4            pop a
0507   0747 D7            push a
0508   0748 11            mov a, b
0509   0749 26 E8 03      mov b, 1000
0510   074C B0            cmp a, b
0511   074D 0E            lodflgs
0512   074E 87 02         and al, %00000010 ; <
0513   0750 FD 9C         shr al
0514   0752 22 00         mov ah, 0
0515   0754 27            mov b, a
0516   0755 E4            pop a
0517   0756 C0 00 00      cmp b, 0
0518   0759 C6 6B 07      je _if11_exit
0519   075C             _if11_true:
0520   075C 26 00 00      mov b, 0
0521   075F FD AB         swp b
0522   0761 D8            push b
0523   0762 07 0C 14      call prnnum
0524   0765 51 02 00      add sp, 2
0525   0768 0A 6B 07      jmp _if11_exit
0526   076B             _if11_exit:
0527   076B             _if12_cond:
0528   076B 29 6C 30      mov b, [__ionum]
0529   076E D7            push a
0530   076F 74            mov d, b
0531   0770 DA            push d
0532   0771 29 BC 30      mov b, [__datumpos] ; datumpos
0533   0774 D7            push a
0534   0775 11            mov a, b
0535   0776 26 01 00      mov b, 1
0536   0779 60            sub a, b
0537   077A 27            mov b, a
0538   077B E4            pop a
0539   077C E7            pop d
0540   077D 10 02 00      mov a, 2
0541   0780 AC            mul a, b
0542   0781 5A            add d, b
0543   0782 2A            mov b, [d]
0544   0783 E4            pop a
0545   0784 D7            push a
0546   0785 11            mov a, b
0547   0786 26 64 00      mov b, 100
0548   0789 B0            cmp a, b
0549   078A 0E            lodflgs
0550   078B 87 02         and al, %00000010 ; <
0551   078D FD 9C         shr al
0552   078F 22 00         mov ah, 0
0553   0791 27            mov b, a
0554   0792 E4            pop a
0555   0793 C0 00 00      cmp b, 0
0556   0796 C6 A8 07      je _if12_exit
0557   0799             _if12_true:
0558   0799 26 00 00      mov b, 0
0559   079C FD AB         swp b
0560   079E D8            push b
0561   079F 07 0C 14      call prnnum
0562   07A2 51 02 00      add sp, 2
0563   07A5 0A A8 07      jmp _if12_exit
0564   07A8             _if12_exit:
0565   07A8             _if13_cond:
0566   07A8 29 6C 30      mov b, [__ionum]
0567   07AB D7            push a
0568   07AC 74            mov d, b
0569   07AD DA            push d
0570   07AE 29 BC 30      mov b, [__datumpos] ; datumpos
0571   07B1 D7            push a
0572   07B2 11            mov a, b
0573   07B3 26 01 00      mov b, 1
0574   07B6 60            sub a, b
0575   07B7 27            mov b, a
0576   07B8 E4            pop a
0577   07B9 E7            pop d
0578   07BA 10 02 00      mov a, 2
0579   07BD AC            mul a, b
0580   07BE 5A            add d, b
0581   07BF 2A            mov b, [d]
0582   07C0 E4            pop a
0583   07C1 D7            push a
0584   07C2 11            mov a, b
0585   07C3 26 0A 00      mov b, 10
0586   07C6 B0            cmp a, b
0587   07C7 0E            lodflgs
0588   07C8 87 02         and al, %00000010 ; <
0589   07CA FD 9C         shr al
0590   07CC 22 00         mov ah, 0
0591   07CE 27            mov b, a
0592   07CF E4            pop a
0593   07D0 C0 00 00      cmp b, 0
0594   07D3 C6 E5 07      je _if13_exit
0595   07D6             _if13_true:
0596   07D6 26 00 00      mov b, 0
0597   07D9 FD AB         swp b
0598   07DB D8            push b
0599   07DC 07 0C 14      call prnnum
0600   07DF 51 02 00      add sp, 2
0601   07E2 0A E5 07      jmp _if13_exit
0602   07E5             _if13_exit:
0603   07E5 29 6C 30      mov b, [__ionum]
0604   07E8 D7            push a
0605   07E9 74            mov d, b
0606   07EA DA            push d
0607   07EB 29 BC 30      mov b, [__datumpos] ; datumpos
0608   07EE D7            push a
0609   07EF 11            mov a, b
0610   07F0 26 01 00      mov b, 1
0611   07F3 60            sub a, b
0612   07F4 27            mov b, a
0613   07F5 E4            pop a
0614   07F6 E7            pop d
0615   07F7 10 02 00      mov a, 2
0616   07FA AC            mul a, b
0617   07FB 5A            add d, b
0618   07FC 2A            mov b, [d]
0619   07FD E4            pop a
0620   07FE FD AB         swp b
0621   0800 D8            push b
0622   0801 07 0C 14      call prnnum
0623   0804 51 02 00      add sp, 2
0624   0807             _for10_update:
0625   0807 29 BC 30      mov b, [__datumpos] ; datumpos
0626   080A D7            push a
0627   080B 11            mov a, b
0628   080C FD 7D         dec b
0629   080E FD 42 BC 30   mov [__datumpos], b
0630   0812 27            mov b, a
0631   0813 E4            pop a
0632   0814 0A 11 07      jmp _for10_cond
0633   0817             _for10_exit:
0634   0817 07 16 14      call prnnl
0635   081A             _for9_update:
0636   081A 29 94 31      mov b, [__pos] ; pos
0637   081D D7            push a
0638   081E 11            mov a, b
0639   081F FD 7D         dec b
0640   0821 FD 42 94 31   mov [__pos], b
0641   0825 27            mov b, a
0642   0826 E4            pop a
0643   0827 0A 9B 06      jmp _for9_cond
0644   082A             _for9_exit:
0645   082A 26 01 00      mov b, 1
0646   082D FD 42 BC 30   mov [__datumpos], b
0647   0831             _for14_init:
0648   0831 29 BC 30      mov b, [__datumpos] ; datumpos
0649   0834 D7            push a
0650   0835 11            mov a, b
0651   0836 26 06 00      mov b, 6
0652   0839 AC            mul a, b
0653   083A E4            pop a
0654   083B FD 42 94 31   mov [__pos], b
0655   083F             _for14_cond:
0656   083F 29 94 31      mov b, [__pos] ; pos
0657   0842 D7            push a
0658   0843 11            mov a, b
0659   0844 29 BC 30      mov b, [__datumpos] ; datumpos
0660   0847 D7            push a
0661   0848 11            mov a, b
0662   0849 26 06 00      mov b, 6
0663   084C AC            mul a, b
0664   084D E4            pop a
0665   084E D7            push a
0666   084F 11            mov a, b
0667   0850 26 06 00      mov b, 6
0668   0853 54            add a, b
0669   0854 27            mov b, a
0670   0855 E4            pop a
0671   0856 B0            cmp a, b
0672   0857 0E            lodflgs
0673   0858 87 02         and al, %00000010 ; <
0674   085A FD 9C         shr al
0675   085C 22 00         mov ah, 0
0676   085E 27            mov b, a
0677   085F E4            pop a
0678   0860 C0 00 00      cmp b, 0
0679   0863 C6 AA 08      je _for14_exit
0680   0866             _for14_block:
0681   0866 29 BA 30      mov b, [__datum]
0682   0869 D7            push a
0683   086A 74            mov d, b
0684   086B DA            push d
0685   086C 29 94 31      mov b, [__pos] ; pos
0686   086F E7            pop d
0687   0870 10 02 00      mov a, 2
0688   0873 AC            mul a, b
0689   0874 5A            add d, b
0690   0875 E4            pop a
0691   0876 DA            push d
0692   0877 29 6C 30      mov b, [__ionum]
0693   087A D7            push a
0694   087B 74            mov d, b
0695   087C DA            push d
0696   087D 29 94 31      mov b, [__pos] ; pos
0697   0880 D7            push a
0698   0881 11            mov a, b
0699   0882 29 BC 30      mov b, [__datumpos] ; datumpos
0700   0885 D7            push a
0701   0886 11            mov a, b
0702   0887 26 06 00      mov b, 6
0703   088A AC            mul a, b
0704   088B E4            pop a
0705   088C 60            sub a, b
0706   088D 27            mov b, a
0707   088E E4            pop a
0708   088F E7            pop d
0709   0890 10 02 00      mov a, 2
0710   0893 AC            mul a, b
0711   0894 5A            add d, b
0712   0895 2A            mov b, [d]
0713   0896 E4            pop a
0714   0897 E7            pop d
0715   0898 FD 43         mov [d], b
0716   089A             _for14_update:
0717   089A 29 94 31      mov b, [__pos] ; pos
0718   089D D7            push a
0719   089E 11            mov a, b
0720   089F FD 77         inc b
0721   08A1 FD 42 94 31   mov [__pos], b
0722   08A5 27            mov b, a
0723   08A6 E4            pop a
0724   08A7 0A 3F 08      jmp _for14_cond
0725   08AA             _for14_exit:
0726   08AA 26 00 00      mov b, 0
0727   08AD FD 42 BC 30   mov [__datumpos], b
0728   08B1             _for15_init:
0729   08B1 29 BC 30      mov b, [__datumpos] ; datumpos
0730   08B4 D7            push a
0731   08B5 11            mov a, b
0732   08B6 26 06 00      mov b, 6
0733   08B9 AC            mul a, b
0734   08BA E4            pop a
0735   08BB FD 42 94 31   mov [__pos], b
0736   08BF             _for15_cond:
0737   08BF 29 94 31      mov b, [__pos] ; pos
0738   08C2 D7            push a
0739   08C3 11            mov a, b
0740   08C4 29 BC 30      mov b, [__datumpos] ; datumpos
0741   08C7 D7            push a
0742   08C8 11            mov a, b
0743   08C9 26 06 00      mov b, 6
0744   08CC AC            mul a, b
0745   08CD E4            pop a
0746   08CE D7            push a
0747   08CF 11            mov a, b
0748   08D0 26 06 00      mov b, 6
0749   08D3 54            add a, b
0750   08D4 27            mov b, a
0751   08D5 E4            pop a
0752   08D6 B0            cmp a, b
0753   08D7 0E            lodflgs
0754   08D8 87 02         and al, %00000010 ; <
0755   08DA FD 9C         shr al
0756   08DC 22 00         mov ah, 0
0757   08DE 27            mov b, a
0758   08DF E4            pop a
0759   08E0 C0 00 00      cmp b, 0
0760   08E3 C6 96 09      je _for15_exit
0761   08E6             _for15_block:
0762   08E6 29 BA 30      mov b, [__datum]
0763   08E9 D7            push a
0764   08EA 74            mov d, b
0765   08EB DA            push d
0766   08EC 29 94 31      mov b, [__pos] ; pos
0767   08EF E7            pop d
0768   08F0 10 02 00      mov a, 2
0769   08F3 AC            mul a, b
0770   08F4 5A            add d, b
0771   08F5 2A            mov b, [d]
0772   08F6 E4            pop a
0773   08F7 D7            push a
0774   08F8 11            mov a, b
0775   08F9 26 64 00      mov b, 100
0776   08FC AE            div a, b
0777   08FD FD 78         mov g, a
0778   08FF 11            mov a, b
0779   0900 FD 27         mov b, g
0780   0902 E4            pop a
0781   0903 FD 42 70 30   mov [__ioshift], b
0782   0907 29 D6 30      mov b, [__anarr]
0783   090A D7            push a
0784   090B 74            mov d, b
0785   090C DA            push d
0786   090D 29 94 31      mov b, [__pos] ; pos
0787   0910 D7            push a
0788   0911 11            mov a, b
0789   0912 29 BC 30      mov b, [__datumpos] ; datumpos
0790   0915 D7            push a
0791   0916 11            mov a, b
0792   0917 26 06 00      mov b, 6
0793   091A AC            mul a, b
0794   091B E4            pop a
0795   091C 60            sub a, b
0796   091D 27            mov b, a
0797   091E E4            pop a
0798   091F D7            push a
0799   0920 11            mov a, b
0800   0921 26 02 00      mov b, 2
0801   0924 AC            mul a, b
0802   0925 E4            pop a
0803   0926 D7            push a
0804   0927 11            mov a, b
0805   0928 26 01 00      mov b, 1
0806   092B 54            add a, b
0807   092C 27            mov b, a
0808   092D E4            pop a
0809   092E E7            pop d
0810   092F 10 02 00      mov a, 2
0811   0932 AC            mul a, b
0812   0933 5A            add d, b
0813   0934 E4            pop a
0814   0935 DA            push d
0815   0936 29 70 30      mov b, [__ioshift] ; ioshift
0816   0939 E7            pop d
0817   093A FD 43         mov [d], b
0818   093C 29 D6 30      mov b, [__anarr]
0819   093F D7            push a
0820   0940 74            mov d, b
0821   0941 DA            push d
0822   0942 29 94 31      mov b, [__pos] ; pos
0823   0945 D7            push a
0824   0946 11            mov a, b
0825   0947 29 BC 30      mov b, [__datumpos] ; datumpos
0826   094A D7            push a
0827   094B 11            mov a, b
0828   094C 26 06 00      mov b, 6
0829   094F AC            mul a, b
0830   0950 E4            pop a
0831   0951 60            sub a, b
0832   0952 27            mov b, a
0833   0953 E4            pop a
0834   0954 D7            push a
0835   0955 11            mov a, b
0836   0956 26 02 00      mov b, 2
0837   0959 AC            mul a, b
0838   095A E4            pop a
0839   095B E7            pop d
0840   095C 10 02 00      mov a, 2
0841   095F AC            mul a, b
0842   0960 5A            add d, b
0843   0961 E4            pop a
0844   0962 DA            push d
0845   0963 29 BA 30      mov b, [__datum]
0846   0966 D7            push a
0847   0967 74            mov d, b
0848   0968 DA            push d
0849   0969 29 94 31      mov b, [__pos] ; pos
0850   096C E7            pop d
0851   096D 10 02 00      mov a, 2
0852   0970 AC            mul a, b
0853   0971 5A            add d, b
0854   0972 2A            mov b, [d]
0855   0973 E4            pop a
0856   0974 D7            push a
0857   0975 11            mov a, b
0858   0976 29 70 30      mov b, [__ioshift] ; ioshift
0859   0979 D7            push a
0860   097A 11            mov a, b
0861   097B 26 64 00      mov b, 100
0862   097E AC            mul a, b
0863   097F E4            pop a
0864   0980 60            sub a, b
0865   0981 27            mov b, a
0866   0982 E4            pop a
0867   0983 E7            pop d
0868   0984 FD 43         mov [d], b
0869   0986             _for15_update:
0870   0986 29 94 31      mov b, [__pos] ; pos
0871   0989 D7            push a
0872   098A 11            mov a, b
0873   098B FD 77         inc b
0874   098D FD 42 94 31   mov [__pos], b
0875   0991 27            mov b, a
0876   0992 E4            pop a
0877   0993 0A BF 08      jmp _for15_cond
0878   0996             _for15_exit:
0879   0996 26 01 00      mov b, 1
0880   0999 FD 42 BC 30   mov [__datumpos], b
0881   099D             _for16_init:
0882   099D 29 BC 30      mov b, [__datumpos] ; datumpos
0883   09A0 D7            push a
0884   09A1 11            mov a, b
0885   09A2 26 06 00      mov b, 6
0886   09A5 AC            mul a, b
0887   09A6 E4            pop a
0888   09A7 FD 42 94 31   mov [__pos], b
0889   09AB             _for16_cond:
0890   09AB 29 94 31      mov b, [__pos] ; pos
0891   09AE D7            push a
0892   09AF 11            mov a, b
0893   09B0 29 BC 30      mov b, [__datumpos] ; datumpos
0894   09B3 D7            push a
0895   09B4 11            mov a, b
0896   09B5 26 06 00      mov b, 6
0897   09B8 AC            mul a, b
0898   09B9 E4            pop a
0899   09BA D7            push a
0900   09BB 11            mov a, b
0901   09BC 26 06 00      mov b, 6
0902   09BF 54            add a, b
0903   09C0 27            mov b, a
0904   09C1 E4            pop a
0905   09C2 B0            cmp a, b
0906   09C3 0E            lodflgs
0907   09C4 87 02         and al, %00000010 ; <
0908   09C6 FD 9C         shr al
0909   09C8 22 00         mov ah, 0
0910   09CA 27            mov b, a
0911   09CB E4            pop a
0912   09CC C0 00 00      cmp b, 0
0913   09CF C6 82 0A      je _for16_exit
0914   09D2             _for16_block:
0915   09D2 29 BA 30      mov b, [__datum]
0916   09D5 D7            push a
0917   09D6 74            mov d, b
0918   09D7 DA            push d
0919   09D8 29 94 31      mov b, [__pos] ; pos
0920   09DB E7            pop d
0921   09DC 10 02 00      mov a, 2
0922   09DF AC            mul a, b
0923   09E0 5A            add d, b
0924   09E1 2A            mov b, [d]
0925   09E2 E4            pop a
0926   09E3 D7            push a
0927   09E4 11            mov a, b
0928   09E5 26 64 00      mov b, 100
0929   09E8 AE            div a, b
0930   09E9 FD 78         mov g, a
0931   09EB 11            mov a, b
0932   09EC FD 27         mov b, g
0933   09EE E4            pop a
0934   09EF FD 42 70 30   mov [__ioshift], b
0935   09F3 29 F0 30      mov b, [__bnarr]
0936   09F6 D7            push a
0937   09F7 74            mov d, b
0938   09F8 DA            push d
0939   09F9 29 94 31      mov b, [__pos] ; pos
0940   09FC D7            push a
0941   09FD 11            mov a, b
0942   09FE 29 BC 30      mov b, [__datumpos] ; datumpos
0943   0A01 D7            push a
0944   0A02 11            mov a, b
0945   0A03 26 06 00      mov b, 6
0946   0A06 AC            mul a, b
0947   0A07 E4            pop a
0948   0A08 60            sub a, b
0949   0A09 27            mov b, a
0950   0A0A E4            pop a
0951   0A0B D7            push a
0952   0A0C 11            mov a, b
0953   0A0D 26 02 00      mov b, 2
0954   0A10 AC            mul a, b
0955   0A11 E4            pop a
0956   0A12 D7            push a
0957   0A13 11            mov a, b
0958   0A14 26 01 00      mov b, 1
0959   0A17 54            add a, b
0960   0A18 27            mov b, a
0961   0A19 E4            pop a
0962   0A1A E7            pop d
0963   0A1B 10 02 00      mov a, 2
0964   0A1E AC            mul a, b
0965   0A1F 5A            add d, b
0966   0A20 E4            pop a
0967   0A21 DA            push d
0968   0A22 29 70 30      mov b, [__ioshift] ; ioshift
0969   0A25 E7            pop d
0970   0A26 FD 43         mov [d], b
0971   0A28 29 F0 30      mov b, [__bnarr]
0972   0A2B D7            push a
0973   0A2C 74            mov d, b
0974   0A2D DA            push d
0975   0A2E 29 94 31      mov b, [__pos] ; pos
0976   0A31 D7            push a
0977   0A32 11            mov a, b
0978   0A33 29 BC 30      mov b, [__datumpos] ; datumpos
0979   0A36 D7            push a
0980   0A37 11            mov a, b
0981   0A38 26 06 00      mov b, 6
0982   0A3B AC            mul a, b
0983   0A3C E4            pop a
0984   0A3D 60            sub a, b
0985   0A3E 27            mov b, a
0986   0A3F E4            pop a
0987   0A40 D7            push a
0988   0A41 11            mov a, b
0989   0A42 26 02 00      mov b, 2
0990   0A45 AC            mul a, b
0991   0A46 E4            pop a
0992   0A47 E7            pop d
0993   0A48 10 02 00      mov a, 2
0994   0A4B AC            mul a, b
0995   0A4C 5A            add d, b
0996   0A4D E4            pop a
0997   0A4E DA            push d
0998   0A4F 29 BA 30      mov b, [__datum]
0999   0A52 D7            push a
1000   0A53 74            mov d, b
1001   0A54 DA            push d
1002   0A55 29 94 31      mov b, [__pos] ; pos
1003   0A58 E7            pop d
1004   0A59 10 02 00      mov a, 2
1005   0A5C AC            mul a, b
1006   0A5D 5A            add d, b
1007   0A5E 2A            mov b, [d]
1008   0A5F E4            pop a
1009   0A60 D7            push a
1010   0A61 11            mov a, b
1011   0A62 29 70 30      mov b, [__ioshift] ; ioshift
1012   0A65 D7            push a
1013   0A66 11            mov a, b
1014   0A67 26 64 00      mov b, 100
1015   0A6A AC            mul a, b
1016   0A6B E4            pop a
1017   0A6C 60            sub a, b
1018   0A6D 27            mov b, a
1019   0A6E E4            pop a
1020   0A6F E7            pop d
1021   0A70 FD 43         mov [d], b
1022   0A72             _for16_update:
1023   0A72 29 94 31      mov b, [__pos] ; pos
1024   0A75 D7            push a
1025   0A76 11            mov a, b
1026   0A77 FD 77         inc b
1027   0A79 FD 42 94 31   mov [__pos], b
1028   0A7D 27            mov b, a
1029   0A7E E4            pop a
1030   0A7F 0A AB 09      jmp _for16_cond
1031   0A82             _for16_exit:
1032   0A82             _for17_init:
1033   0A82 26 00 00      mov b, 0
1034   0A85 FD 42 94 31   mov [__pos], b
1035   0A89             _for17_cond:
1036   0A89 29 94 31      mov b, [__pos] ; pos
1037   0A8C D7            push a
1038   0A8D 11            mov a, b
1039   0A8E 26 0C 00      mov b, 12
1040   0A91 B0            cmp a, b
1041   0A92 0E            lodflgs
1042   0A93 87 02         and al, %00000010 ; <
1043   0A95 FD 9C         shr al
1044   0A97 22 00         mov ah, 0
1045   0A99 27            mov b, a
1046   0A9A E4            pop a
1047   0A9B C0 00 00      cmp b, 0
1048   0A9E C6 FB 0A      je _for17_exit
1049   0AA1             _for17_block:
1050   0AA1 29 0A 31      mov b, [__anarrbkp]
1051   0AA4 D7            push a
1052   0AA5 74            mov d, b
1053   0AA6 DA            push d
1054   0AA7 29 94 31      mov b, [__pos] ; pos
1055   0AAA E7            pop d
1056   0AAB 10 02 00      mov a, 2
1057   0AAE AC            mul a, b
1058   0AAF 5A            add d, b
1059   0AB0 E4            pop a
1060   0AB1 DA            push d
1061   0AB2 29 D6 30      mov b, [__anarr]
1062   0AB5 D7            push a
1063   0AB6 74            mov d, b
1064   0AB7 DA            push d
1065   0AB8 29 94 31      mov b, [__pos] ; pos
1066   0ABB E7            pop d
1067   0ABC 10 02 00      mov a, 2
1068   0ABF AC            mul a, b
1069   0AC0 5A            add d, b
1070   0AC1 2A            mov b, [d]
1071   0AC2 E4            pop a
1072   0AC3 E7            pop d
1073   0AC4 FD 43         mov [d], b
1074   0AC6 29 24 31      mov b, [__bnarrbkp]
1075   0AC9 D7            push a
1076   0ACA 74            mov d, b
1077   0ACB DA            push d
1078   0ACC 29 94 31      mov b, [__pos] ; pos
1079   0ACF E7            pop d
1080   0AD0 10 02 00      mov a, 2
1081   0AD3 AC            mul a, b
1082   0AD4 5A            add d, b
1083   0AD5 E4            pop a
1084   0AD6 DA            push d
1085   0AD7 29 F0 30      mov b, [__bnarr]
1086   0ADA D7            push a
1087   0ADB 74            mov d, b
1088   0ADC DA            push d
1089   0ADD 29 94 31      mov b, [__pos] ; pos
1090   0AE0 E7            pop d
1091   0AE1 10 02 00      mov a, 2
1092   0AE4 AC            mul a, b
1093   0AE5 5A            add d, b
1094   0AE6 2A            mov b, [d]
1095   0AE7 E4            pop a
1096   0AE8 E7            pop d
1097   0AE9 FD 43         mov [d], b
1098   0AEB             _for17_update:
1099   0AEB 29 94 31      mov b, [__pos] ; pos
1100   0AEE D7            push a
1101   0AEF 11            mov a, b
1102   0AF0 FD 77         inc b
1103   0AF2 FD 42 94 31   mov [__pos], b
1104   0AF6 27            mov b, a
1105   0AF7 E4            pop a
1106   0AF8 0A 89 0A      jmp _for17_cond
1107   0AFB             _for17_exit:
1108   0AFB             _for18_init:
1109   0AFB 26 00 00      mov b, 0
1110   0AFE FD 42 94 31   mov [__pos], b
1111   0B02             _for18_cond:
1112   0B02 29 94 31      mov b, [__pos] ; pos
1113   0B05 D7            push a
1114   0B06 11            mov a, b
1115   0B07 26 3C 00      mov b, 60
1116   0B0A B0            cmp a, b
1117   0B0B 0E            lodflgs
1118   0B0C 87 02         and al, %00000010 ; <
1119   0B0E FD 9C         shr al
1120   0B10 22 00         mov ah, 0
1121   0B12 27            mov b, a
1122   0B13 E4            pop a
1123   0B14 C0 00 00      cmp b, 0
1124   0B17 C6 36 0B      je _for18_exit
1125   0B1A             _for18_block:
1126   0B1A 26 00 00      mov b, 0
1127   0B1D FD AB         swp b
1128   0B1F D8            push b
1129   0B20 07 0C 14      call prnnum
1130   0B23 51 02 00      add sp, 2
1131   0B26             _for18_update:
1132   0B26 29 94 31      mov b, [__pos] ; pos
1133   0B29 D7            push a
1134   0B2A 11            mov a, b
1135   0B2B FD 77         inc b
1136   0B2D FD 42 94 31   mov [__pos], b
1137   0B31 27            mov b, a
1138   0B32 E4            pop a
1139   0B33 0A 02 0B      jmp _for18_cond
1140   0B36             _for18_exit:
1141   0B36 07 16 14      call prnnl
1142   0B39 07 43 22      call plus
1143   0B3C 26 02 00      mov b, 2
1144   0B3F FD 42 BC 30   mov [__datumpos], b
1145   0B43             _for19_init:
1146   0B43 29 BC 30      mov b, [__datumpos] ; datumpos
1147   0B46 D7            push a
1148   0B47 11            mov a, b
1149   0B48 26 06 00      mov b, 6
1150   0B4B AC            mul a, b
1151   0B4C E4            pop a
1152   0B4D FD 42 94 31   mov [__pos], b
1153   0B51             _for19_cond:
1154   0B51 29 94 31      mov b, [__pos] ; pos
1155   0B54 D7            push a
1156   0B55 11            mov a, b
1157   0B56 29 BC 30      mov b, [__datumpos] ; datumpos
1158   0B59 D7            push a
1159   0B5A 11            mov a, b
1160   0B5B 26 06 00      mov b, 6
1161   0B5E AC            mul a, b
1162   0B5F E4            pop a
1163   0B60 D7            push a
1164   0B61 11            mov a, b
1165   0B62 26 06 00      mov b, 6
1166   0B65 54            add a, b
1167   0B66 27            mov b, a
1168   0B67 E4            pop a
1169   0B68 B0            cmp a, b
1170   0B69 0E            lodflgs
1171   0B6A 87 02         and al, %00000010 ; <
1172   0B6C FD 9C         shr al
1173   0B6E 22 00         mov ah, 0
1174   0B70 27            mov b, a
1175   0B71 E4            pop a
1176   0B72 C0 00 00      cmp b, 0
1177   0B75 C6 FE 0B      je _for19_exit
1178   0B78             _for19_block:
1179   0B78 29 BA 30      mov b, [__datum]
1180   0B7B D7            push a
1181   0B7C 74            mov d, b
1182   0B7D DA            push d
1183   0B7E 29 94 31      mov b, [__pos] ; pos
1184   0B81 E7            pop d
1185   0B82 10 02 00      mov a, 2
1186   0B85 AC            mul a, b
1187   0B86 5A            add d, b
1188   0B87 E4            pop a
1189   0B88 DA            push d
1190   0B89 29 3E 31      mov b, [__cnarr]
1191   0B8C D7            push a
1192   0B8D 74            mov d, b
1193   0B8E DA            push d
1194   0B8F 29 94 31      mov b, [__pos] ; pos
1195   0B92 D7            push a
1196   0B93 11            mov a, b
1197   0B94 29 BC 30      mov b, [__datumpos] ; datumpos
1198   0B97 D7            push a
1199   0B98 11            mov a, b
1200   0B99 26 06 00      mov b, 6
1201   0B9C AC            mul a, b
1202   0B9D E4            pop a
1203   0B9E 60            sub a, b
1204   0B9F 27            mov b, a
1205   0BA0 E4            pop a
1206   0BA1 D7            push a
1207   0BA2 11            mov a, b
1208   0BA3 26 02 00      mov b, 2
1209   0BA6 AC            mul a, b
1210   0BA7 E4            pop a
1211   0BA8 D7            push a
1212   0BA9 11            mov a, b
1213   0BAA 26 01 00      mov b, 1
1214   0BAD 54            add a, b
1215   0BAE 27            mov b, a
1216   0BAF E4            pop a
1217   0BB0 E7            pop d
1218   0BB1 10 02 00      mov a, 2
1219   0BB4 AC            mul a, b
1220   0BB5 5A            add d, b
1221   0BB6 2A            mov b, [d]
1222   0BB7 E4            pop a
1223   0BB8 D7            push a
1224   0BB9 11            mov a, b
1225   0BBA 26 64 00      mov b, 100
1226   0BBD AC            mul a, b
1227   0BBE E4            pop a
1228   0BBF D7            push a
1229   0BC0 11            mov a, b
1230   0BC1 29 3E 31      mov b, [__cnarr]
1231   0BC4 D7            push a
1232   0BC5 74            mov d, b
1233   0BC6 DA            push d
1234   0BC7 29 94 31      mov b, [__pos] ; pos
1235   0BCA D7            push a
1236   0BCB 11            mov a, b
1237   0BCC 29 BC 30      mov b, [__datumpos] ; datumpos
1238   0BCF D7            push a
1239   0BD0 11            mov a, b
1240   0BD1 26 06 00      mov b, 6
1241   0BD4 AC            mul a, b
1242   0BD5 E4            pop a
1243   0BD6 60            sub a, b
1244   0BD7 27            mov b, a
1245   0BD8 E4            pop a
1246   0BD9 D7            push a
1247   0BDA 11            mov a, b
1248   0BDB 26 02 00      mov b, 2
1249   0BDE AC            mul a, b
1250   0BDF E4            pop a
1251   0BE0 E7            pop d
1252   0BE1 10 02 00      mov a, 2
1253   0BE4 AC            mul a, b
1254   0BE5 5A            add d, b
1255   0BE6 2A            mov b, [d]
1256   0BE7 E4            pop a
1257   0BE8 54            add a, b
1258   0BE9 27            mov b, a
1259   0BEA E4            pop a
1260   0BEB E7            pop d
1261   0BEC FD 43         mov [d], b
1262   0BEE             _for19_update:
1263   0BEE 29 94 31      mov b, [__pos] ; pos
1264   0BF1 D7            push a
1265   0BF2 11            mov a, b
1266   0BF3 FD 77         inc b
1267   0BF5 FD 42 94 31   mov [__pos], b
1268   0BF9 27            mov b, a
1269   0BFA E4            pop a
1270   0BFB 0A 51 0B      jmp _for19_cond
1271   0BFE             _for19_exit:
1272   0BFE             _for20_init:
1273   0BFE 26 12 00      mov b, 18
1274   0C01 FD 42 94 31   mov [__pos], b
1275   0C05             _for20_cond:
1276   0C05 29 94 31      mov b, [__pos] ; pos
1277   0C08 D7            push a
1278   0C09 11            mov a, b
1279   0C0A 26 0C 00      mov b, 12
1280   0C0D B0            cmp a, b
1281   0C0E 0E            lodflgs
1282   0C0F 87 03         and al, %00000011
1283   0C11 B9 00         cmp al, 0
1284   0C13 0E            lodflgs
1285   0C14 22 00         mov ah, 0
1286   0C16 27            mov b, a
1287   0C17 E4            pop a
1288   0C18 C0 00 00      cmp b, 0
1289   0C1B C6 07 0D      je _for20_exit
1290   0C1E             _for20_block:
1291   0C1E             _if21_cond:
1292   0C1E 29 BA 30      mov b, [__datum]
1293   0C21 D7            push a
1294   0C22 74            mov d, b
1295   0C23 DA            push d
1296   0C24 29 94 31      mov b, [__pos] ; pos
1297   0C27 D7            push a
1298   0C28 11            mov a, b
1299   0C29 26 01 00      mov b, 1
1300   0C2C 60            sub a, b
1301   0C2D 27            mov b, a
1302   0C2E E4            pop a
1303   0C2F E7            pop d
1304   0C30 10 02 00      mov a, 2
1305   0C33 AC            mul a, b
1306   0C34 5A            add d, b
1307   0C35 2A            mov b, [d]
1308   0C36 E4            pop a
1309   0C37 D7            push a
1310   0C38 11            mov a, b
1311   0C39 26 E8 03      mov b, 1000
1312   0C3C B0            cmp a, b
1313   0C3D 0E            lodflgs
1314   0C3E 87 02         and al, %00000010 ; <
1315   0C40 FD 9C         shr al
1316   0C42 22 00         mov ah, 0
1317   0C44 27            mov b, a
1318   0C45 E4            pop a
1319   0C46 C0 00 00      cmp b, 0
1320   0C49 C6 5B 0C      je _if21_exit
1321   0C4C             _if21_true:
1322   0C4C 26 00 00      mov b, 0
1323   0C4F FD AB         swp b
1324   0C51 D8            push b
1325   0C52 07 0C 14      call prnnum
1326   0C55 51 02 00      add sp, 2
1327   0C58 0A 5B 0C      jmp _if21_exit
1328   0C5B             _if21_exit:
1329   0C5B             _if22_cond:
1330   0C5B 29 BA 30      mov b, [__datum]
1331   0C5E D7            push a
1332   0C5F 74            mov d, b
1333   0C60 DA            push d
1334   0C61 29 94 31      mov b, [__pos] ; pos
1335   0C64 D7            push a
1336   0C65 11            mov a, b
1337   0C66 26 01 00      mov b, 1
1338   0C69 60            sub a, b
1339   0C6A 27            mov b, a
1340   0C6B E4            pop a
1341   0C6C E7            pop d
1342   0C6D 10 02 00      mov a, 2
1343   0C70 AC            mul a, b
1344   0C71 5A            add d, b
1345   0C72 2A            mov b, [d]
1346   0C73 E4            pop a
1347   0C74 D7            push a
1348   0C75 11            mov a, b
1349   0C76 26 64 00      mov b, 100
1350   0C79 B0            cmp a, b
1351   0C7A 0E            lodflgs
1352   0C7B 87 02         and al, %00000010 ; <
1353   0C7D FD 9C         shr al
1354   0C7F 22 00         mov ah, 0
1355   0C81 27            mov b, a
1356   0C82 E4            pop a
1357   0C83 C0 00 00      cmp b, 0
1358   0C86 C6 98 0C      je _if22_exit
1359   0C89             _if22_true:
1360   0C89 26 00 00      mov b, 0
1361   0C8C FD AB         swp b
1362   0C8E D8            push b
1363   0C8F 07 0C 14      call prnnum
1364   0C92 51 02 00      add sp, 2
1365   0C95 0A 98 0C      jmp _if22_exit
1366   0C98             _if22_exit:
1367   0C98             _if23_cond:
1368   0C98 29 BA 30      mov b, [__datum]
1369   0C9B D7            push a
1370   0C9C 74            mov d, b
1371   0C9D DA            push d
1372   0C9E 29 94 31      mov b, [__pos] ; pos
1373   0CA1 D7            push a
1374   0CA2 11            mov a, b
1375   0CA3 26 01 00      mov b, 1
1376   0CA6 60            sub a, b
1377   0CA7 27            mov b, a
1378   0CA8 E4            pop a
1379   0CA9 E7            pop d
1380   0CAA 10 02 00      mov a, 2
1381   0CAD AC            mul a, b
1382   0CAE 5A            add d, b
1383   0CAF 2A            mov b, [d]
1384   0CB0 E4            pop a
1385   0CB1 D7            push a
1386   0CB2 11            mov a, b
1387   0CB3 26 0A 00      mov b, 10
1388   0CB6 B0            cmp a, b
1389   0CB7 0E            lodflgs
1390   0CB8 87 02         and al, %00000010 ; <
1391   0CBA FD 9C         shr al
1392   0CBC 22 00         mov ah, 0
1393   0CBE 27            mov b, a
1394   0CBF E4            pop a
1395   0CC0 C0 00 00      cmp b, 0
1396   0CC3 C6 D5 0C      je _if23_exit
1397   0CC6             _if23_true:
1398   0CC6 26 00 00      mov b, 0
1399   0CC9 FD AB         swp b
1400   0CCB D8            push b
1401   0CCC 07 0C 14      call prnnum
1402   0CCF 51 02 00      add sp, 2
1403   0CD2 0A D5 0C      jmp _if23_exit
1404   0CD5             _if23_exit:
1405   0CD5 29 BA 30      mov b, [__datum]
1406   0CD8 D7            push a
1407   0CD9 74            mov d, b
1408   0CDA DA            push d
1409   0CDB 29 94 31      mov b, [__pos] ; pos
1410   0CDE D7            push a
1411   0CDF 11            mov a, b
1412   0CE0 26 01 00      mov b, 1
1413   0CE3 60            sub a, b
1414   0CE4 27            mov b, a
1415   0CE5 E4            pop a
1416   0CE6 E7            pop d
1417   0CE7 10 02 00      mov a, 2
1418   0CEA AC            mul a, b
1419   0CEB 5A            add d, b
1420   0CEC 2A            mov b, [d]
1421   0CED E4            pop a
1422   0CEE FD AB         swp b
1423   0CF0 D8            push b
1424   0CF1 07 FB 13      call prnnumspace
1425   0CF4 51 02 00      add sp, 2
1426   0CF7             _for20_update:
1427   0CF7 29 94 31      mov b, [__pos] ; pos
1428   0CFA D7            push a
1429   0CFB 11            mov a, b
1430   0CFC FD 7D         dec b
1431   0CFE FD 42 94 31   mov [__pos], b
1432   0D02 27            mov b, a
1433   0D03 E4            pop a
1434   0D04 0A 05 0C      jmp _for20_cond
1435   0D07             _for20_exit:
1436   0D07 07 16 14      call prnnl
1437   0D0A             _for24_init:
1438   0D0A 26 00 00      mov b, 0
1439   0D0D FD 42 94 31   mov [__pos], b
1440   0D11             _for24_cond:
1441   0D11 29 94 31      mov b, [__pos] ; pos
1442   0D14 D7            push a
1443   0D15 11            mov a, b
1444   0D16 26 0C 00      mov b, 12
1445   0D19 B0            cmp a, b
1446   0D1A 0E            lodflgs
1447   0D1B 87 02         and al, %00000010 ; <
1448   0D1D FD 9C         shr al
1449   0D1F 22 00         mov ah, 0
1450   0D21 27            mov b, a
1451   0D22 E4            pop a
1452   0D23 C0 00 00      cmp b, 0
1453   0D26 C6 83 0D      je _for24_exit
1454   0D29             _for24_block:
1455   0D29 29 D6 30      mov b, [__anarr]
1456   0D2C D7            push a
1457   0D2D 74            mov d, b
1458   0D2E DA            push d
1459   0D2F 29 94 31      mov b, [__pos] ; pos
1460   0D32 E7            pop d
1461   0D33 10 02 00      mov a, 2
1462   0D36 AC            mul a, b
1463   0D37 5A            add d, b
1464   0D38 E4            pop a
1465   0D39 DA            push d
1466   0D3A 29 0A 31      mov b, [__anarrbkp]
1467   0D3D D7            push a
1468   0D3E 74            mov d, b
1469   0D3F DA            push d
1470   0D40 29 94 31      mov b, [__pos] ; pos
1471   0D43 E7            pop d
1472   0D44 10 02 00      mov a, 2
1473   0D47 AC            mul a, b
1474   0D48 5A            add d, b
1475   0D49 2A            mov b, [d]
1476   0D4A E4            pop a
1477   0D4B E7            pop d
1478   0D4C FD 43         mov [d], b
1479   0D4E 29 F0 30      mov b, [__bnarr]
1480   0D51 D7            push a
1481   0D52 74            mov d, b
1482   0D53 DA            push d
1483   0D54 29 94 31      mov b, [__pos] ; pos
1484   0D57 E7            pop d
1485   0D58 10 02 00      mov a, 2
1486   0D5B AC            mul a, b
1487   0D5C 5A            add d, b
1488   0D5D E4            pop a
1489   0D5E DA            push d
1490   0D5F 29 24 31      mov b, [__bnarrbkp]
1491   0D62 D7            push a
1492   0D63 74            mov d, b
1493   0D64 DA            push d
1494   0D65 29 94 31      mov b, [__pos] ; pos
1495   0D68 E7            pop d
1496   0D69 10 02 00      mov a, 2
1497   0D6C AC            mul a, b
1498   0D6D 5A            add d, b
1499   0D6E 2A            mov b, [d]
1500   0D6F E4            pop a
1501   0D70 E7            pop d
1502   0D71 FD 43         mov [d], b
1503   0D73             _for24_update:
1504   0D73 29 94 31      mov b, [__pos] ; pos
1505   0D76 D7            push a
1506   0D77 11            mov a, b
1507   0D78 FD 77         inc b
1508   0D7A FD 42 94 31   mov [__pos], b
1509   0D7E 27            mov b, a
1510   0D7F E4            pop a
1511   0D80 0A 11 0D      jmp _for24_cond
1512   0D83             _for24_exit:
1513   0D83 07 E3 1D      call minus
1514   0D86 26 02 00      mov b, 2
1515   0D89 FD 42 BC 30   mov [__datumpos], b
1516   0D8D             _for25_init:
1517   0D8D 29 BC 30      mov b, [__datumpos] ; datumpos
1518   0D90 D7            push a
1519   0D91 11            mov a, b
1520   0D92 26 06 00      mov b, 6
1521   0D95 AC            mul a, b
1522   0D96 E4            pop a
1523   0D97 FD 42 94 31   mov [__pos], b
1524   0D9B             _for25_cond:
1525   0D9B 29 94 31      mov b, [__pos] ; pos
1526   0D9E D7            push a
1527   0D9F 11            mov a, b
1528   0DA0 29 BC 30      mov b, [__datumpos] ; datumpos
1529   0DA3 D7            push a
1530   0DA4 11            mov a, b
1531   0DA5 26 06 00      mov b, 6
1532   0DA8 AC            mul a, b
1533   0DA9 E4            pop a
1534   0DAA D7            push a
1535   0DAB 11            mov a, b
1536   0DAC 26 06 00      mov b, 6
1537   0DAF 54            add a, b
1538   0DB0 27            mov b, a
1539   0DB1 E4            pop a
1540   0DB2 B0            cmp a, b
1541   0DB3 0E            lodflgs
1542   0DB4 87 02         and al, %00000010 ; <
1543   0DB6 FD 9C         shr al
1544   0DB8 22 00         mov ah, 0
1545   0DBA 27            mov b, a
1546   0DBB E4            pop a
1547   0DBC C0 00 00      cmp b, 0
1548   0DBF C6 48 0E      je _for25_exit
1549   0DC2             _for25_block:
1550   0DC2 29 BA 30      mov b, [__datum]
1551   0DC5 D7            push a
1552   0DC6 74            mov d, b
1553   0DC7 DA            push d
1554   0DC8 29 94 31      mov b, [__pos] ; pos
1555   0DCB E7            pop d
1556   0DCC 10 02 00      mov a, 2
1557   0DCF AC            mul a, b
1558   0DD0 5A            add d, b
1559   0DD1 E4            pop a
1560   0DD2 DA            push d
1561   0DD3 29 3E 31      mov b, [__cnarr]
1562   0DD6 D7            push a
1563   0DD7 74            mov d, b
1564   0DD8 DA            push d
1565   0DD9 29 94 31      mov b, [__pos] ; pos
1566   0DDC D7            push a
1567   0DDD 11            mov a, b
1568   0DDE 29 BC 30      mov b, [__datumpos] ; datumpos
1569   0DE1 D7            push a
1570   0DE2 11            mov a, b
1571   0DE3 26 06 00      mov b, 6
1572   0DE6 AC            mul a, b
1573   0DE7 E4            pop a
1574   0DE8 60            sub a, b
1575   0DE9 27            mov b, a
1576   0DEA E4            pop a
1577   0DEB D7            push a
1578   0DEC 11            mov a, b
1579   0DED 26 02 00      mov b, 2
1580   0DF0 AC            mul a, b
1581   0DF1 E4            pop a
1582   0DF2 D7            push a
1583   0DF3 11            mov a, b
1584   0DF4 26 01 00      mov b, 1
1585   0DF7 54            add a, b
1586   0DF8 27            mov b, a
1587   0DF9 E4            pop a
1588   0DFA E7            pop d
1589   0DFB 10 02 00      mov a, 2
1590   0DFE AC            mul a, b
1591   0DFF 5A            add d, b
1592   0E00 2A            mov b, [d]
1593   0E01 E4            pop a
1594   0E02 D7            push a
1595   0E03 11            mov a, b
1596   0E04 26 64 00      mov b, 100
1597   0E07 AC            mul a, b
1598   0E08 E4            pop a
1599   0E09 D7            push a
1600   0E0A 11            mov a, b
1601   0E0B 29 3E 31      mov b, [__cnarr]
1602   0E0E D7            push a
1603   0E0F 74            mov d, b
1604   0E10 DA            push d
1605   0E11 29 94 31      mov b, [__pos] ; pos
1606   0E14 D7            push a
1607   0E15 11            mov a, b
1608   0E16 29 BC 30      mov b, [__datumpos] ; datumpos
1609   0E19 D7            push a
1610   0E1A 11            mov a, b
1611   0E1B 26 06 00      mov b, 6
1612   0E1E AC            mul a, b
1613   0E1F E4            pop a
1614   0E20 60            sub a, b
1615   0E21 27            mov b, a
1616   0E22 E4            pop a
1617   0E23 D7            push a
1618   0E24 11            mov a, b
1619   0E25 26 02 00      mov b, 2
1620   0E28 AC            mul a, b
1621   0E29 E4            pop a
1622   0E2A E7            pop d
1623   0E2B 10 02 00      mov a, 2
1624   0E2E AC            mul a, b
1625   0E2F 5A            add d, b
1626   0E30 2A            mov b, [d]
1627   0E31 E4            pop a
1628   0E32 54            add a, b
1629   0E33 27            mov b, a
1630   0E34 E4            pop a
1631   0E35 E7            pop d
1632   0E36 FD 43         mov [d], b
1633   0E38             _for25_update:
1634   0E38 29 94 31      mov b, [__pos] ; pos
1635   0E3B D7            push a
1636   0E3C 11            mov a, b
1637   0E3D FD 77         inc b
1638   0E3F FD 42 94 31   mov [__pos], b
1639   0E43 27            mov b, a
1640   0E44 E4            pop a
1641   0E45 0A 9B 0D      jmp _for25_cond
1642   0E48             _for25_exit:
1643   0E48             _for26_init:
1644   0E48 26 12 00      mov b, 18
1645   0E4B FD 42 94 31   mov [__pos], b
1646   0E4F             _for26_cond:
1647   0E4F 29 94 31      mov b, [__pos] ; pos
1648   0E52 D7            push a
1649   0E53 11            mov a, b
1650   0E54 26 0C 00      mov b, 12
1651   0E57 B0            cmp a, b
1652   0E58 0E            lodflgs
1653   0E59 87 03         and al, %00000011
1654   0E5B B9 00         cmp al, 0
1655   0E5D 0E            lodflgs
1656   0E5E 22 00         mov ah, 0
1657   0E60 27            mov b, a
1658   0E61 E4            pop a
1659   0E62 C0 00 00      cmp b, 0
1660   0E65 C6 51 0F      je _for26_exit
1661   0E68             _for26_block:
1662   0E68             _if27_cond:
1663   0E68 29 BA 30      mov b, [__datum]
1664   0E6B D7            push a
1665   0E6C 74            mov d, b
1666   0E6D DA            push d
1667   0E6E 29 94 31      mov b, [__pos] ; pos
1668   0E71 D7            push a
1669   0E72 11            mov a, b
1670   0E73 26 01 00      mov b, 1
1671   0E76 60            sub a, b
1672   0E77 27            mov b, a
1673   0E78 E4            pop a
1674   0E79 E7            pop d
1675   0E7A 10 02 00      mov a, 2
1676   0E7D AC            mul a, b
1677   0E7E 5A            add d, b
1678   0E7F 2A            mov b, [d]
1679   0E80 E4            pop a
1680   0E81 D7            push a
1681   0E82 11            mov a, b
1682   0E83 26 E8 03      mov b, 1000
1683   0E86 B0            cmp a, b
1684   0E87 0E            lodflgs
1685   0E88 87 02         and al, %00000010 ; <
1686   0E8A FD 9C         shr al
1687   0E8C 22 00         mov ah, 0
1688   0E8E 27            mov b, a
1689   0E8F E4            pop a
1690   0E90 C0 00 00      cmp b, 0
1691   0E93 C6 A5 0E      je _if27_exit
1692   0E96             _if27_true:
1693   0E96 26 00 00      mov b, 0
1694   0E99 FD AB         swp b
1695   0E9B D8            push b
1696   0E9C 07 0C 14      call prnnum
1697   0E9F 51 02 00      add sp, 2
1698   0EA2 0A A5 0E      jmp _if27_exit
1699   0EA5             _if27_exit:
1700   0EA5             _if28_cond:
1701   0EA5 29 BA 30      mov b, [__datum]
1702   0EA8 D7            push a
1703   0EA9 74            mov d, b
1704   0EAA DA            push d
1705   0EAB 29 94 31      mov b, [__pos] ; pos
1706   0EAE D7            push a
1707   0EAF 11            mov a, b
1708   0EB0 26 01 00      mov b, 1
1709   0EB3 60            sub a, b
1710   0EB4 27            mov b, a
1711   0EB5 E4            pop a
1712   0EB6 E7            pop d
1713   0EB7 10 02 00      mov a, 2
1714   0EBA AC            mul a, b
1715   0EBB 5A            add d, b
1716   0EBC 2A            mov b, [d]
1717   0EBD E4            pop a
1718   0EBE D7            push a
1719   0EBF 11            mov a, b
1720   0EC0 26 64 00      mov b, 100
1721   0EC3 B0            cmp a, b
1722   0EC4 0E            lodflgs
1723   0EC5 87 02         and al, %00000010 ; <
1724   0EC7 FD 9C         shr al
1725   0EC9 22 00         mov ah, 0
1726   0ECB 27            mov b, a
1727   0ECC E4            pop a
1728   0ECD C0 00 00      cmp b, 0
1729   0ED0 C6 E2 0E      je _if28_exit
1730   0ED3             _if28_true:
1731   0ED3 26 00 00      mov b, 0
1732   0ED6 FD AB         swp b
1733   0ED8 D8            push b
1734   0ED9 07 0C 14      call prnnum
1735   0EDC 51 02 00      add sp, 2
1736   0EDF 0A E2 0E      jmp _if28_exit
1737   0EE2             _if28_exit:
1738   0EE2             _if29_cond:
1739   0EE2 29 BA 30      mov b, [__datum]
1740   0EE5 D7            push a
1741   0EE6 74            mov d, b
1742   0EE7 DA            push d
1743   0EE8 29 94 31      mov b, [__pos] ; pos
1744   0EEB D7            push a
1745   0EEC 11            mov a, b
1746   0EED 26 01 00      mov b, 1
1747   0EF0 60            sub a, b
1748   0EF1 27            mov b, a
1749   0EF2 E4            pop a
1750   0EF3 E7            pop d
1751   0EF4 10 02 00      mov a, 2
1752   0EF7 AC            mul a, b
1753   0EF8 5A            add d, b
1754   0EF9 2A            mov b, [d]
1755   0EFA E4            pop a
1756   0EFB D7            push a
1757   0EFC 11            mov a, b
1758   0EFD 26 0A 00      mov b, 10
1759   0F00 B0            cmp a, b
1760   0F01 0E            lodflgs
1761   0F02 87 02         and al, %00000010 ; <
1762   0F04 FD 9C         shr al
1763   0F06 22 00         mov ah, 0
1764   0F08 27            mov b, a
1765   0F09 E4            pop a
1766   0F0A C0 00 00      cmp b, 0
1767   0F0D C6 1F 0F      je _if29_exit
1768   0F10             _if29_true:
1769   0F10 26 00 00      mov b, 0
1770   0F13 FD AB         swp b
1771   0F15 D8            push b
1772   0F16 07 0C 14      call prnnum
1773   0F19 51 02 00      add sp, 2
1774   0F1C 0A 1F 0F      jmp _if29_exit
1775   0F1F             _if29_exit:
1776   0F1F 29 BA 30      mov b, [__datum]
1777   0F22 D7            push a
1778   0F23 74            mov d, b
1779   0F24 DA            push d
1780   0F25 29 94 31      mov b, [__pos] ; pos
1781   0F28 D7            push a
1782   0F29 11            mov a, b
1783   0F2A 26 01 00      mov b, 1
1784   0F2D 60            sub a, b
1785   0F2E 27            mov b, a
1786   0F2F E4            pop a
1787   0F30 E7            pop d
1788   0F31 10 02 00      mov a, 2
1789   0F34 AC            mul a, b
1790   0F35 5A            add d, b
1791   0F36 2A            mov b, [d]
1792   0F37 E4            pop a
1793   0F38 FD AB         swp b
1794   0F3A D8            push b
1795   0F3B 07 FB 13      call prnnumspace
1796   0F3E 51 02 00      add sp, 2
1797   0F41             _for26_update:
1798   0F41 29 94 31      mov b, [__pos] ; pos
1799   0F44 D7            push a
1800   0F45 11            mov a, b
1801   0F46 FD 7D         dec b
1802   0F48 FD 42 94 31   mov [__pos], b
1803   0F4C 27            mov b, a
1804   0F4D E4            pop a
1805   0F4E 0A 4F 0E      jmp _for26_cond
1806   0F51             _for26_exit:
1807   0F51 07 16 14      call prnnl
1808   0F54             _for30_init:
1809   0F54 26 00 00      mov b, 0
1810   0F57 FD 42 94 31   mov [__pos], b
1811   0F5B             _for30_cond:
1812   0F5B 29 94 31      mov b, [__pos] ; pos
1813   0F5E D7            push a
1814   0F5F 11            mov a, b
1815   0F60 26 0C 00      mov b, 12
1816   0F63 B0            cmp a, b
1817   0F64 0E            lodflgs
1818   0F65 87 02         and al, %00000010 ; <
1819   0F67 FD 9C         shr al
1820   0F69 22 00         mov ah, 0
1821   0F6B 27            mov b, a
1822   0F6C E4            pop a
1823   0F6D C0 00 00      cmp b, 0
1824   0F70 C6 CD 0F      je _for30_exit
1825   0F73             _for30_block:
1826   0F73 29 D6 30      mov b, [__anarr]
1827   0F76 D7            push a
1828   0F77 74            mov d, b
1829   0F78 DA            push d
1830   0F79 29 94 31      mov b, [__pos] ; pos
1831   0F7C E7            pop d
1832   0F7D 10 02 00      mov a, 2
1833   0F80 AC            mul a, b
1834   0F81 5A            add d, b
1835   0F82 E4            pop a
1836   0F83 DA            push d
1837   0F84 29 0A 31      mov b, [__anarrbkp]
1838   0F87 D7            push a
1839   0F88 74            mov d, b
1840   0F89 DA            push d
1841   0F8A 29 94 31      mov b, [__pos] ; pos
1842   0F8D E7            pop d
1843   0F8E 10 02 00      mov a, 2
1844   0F91 AC            mul a, b
1845   0F92 5A            add d, b
1846   0F93 2A            mov b, [d]
1847   0F94 E4            pop a
1848   0F95 E7            pop d
1849   0F96 FD 43         mov [d], b
1850   0F98 29 F0 30      mov b, [__bnarr]
1851   0F9B D7            push a
1852   0F9C 74            mov d, b
1853   0F9D DA            push d
1854   0F9E 29 94 31      mov b, [__pos] ; pos
1855   0FA1 E7            pop d
1856   0FA2 10 02 00      mov a, 2
1857   0FA5 AC            mul a, b
1858   0FA6 5A            add d, b
1859   0FA7 E4            pop a
1860   0FA8 DA            push d
1861   0FA9 29 24 31      mov b, [__bnarrbkp]
1862   0FAC D7            push a
1863   0FAD 74            mov d, b
1864   0FAE DA            push d
1865   0FAF 29 94 31      mov b, [__pos] ; pos
1866   0FB2 E7            pop d
1867   0FB3 10 02 00      mov a, 2
1868   0FB6 AC            mul a, b
1869   0FB7 5A            add d, b
1870   0FB8 2A            mov b, [d]
1871   0FB9 E4            pop a
1872   0FBA E7            pop d
1873   0FBB FD 43         mov [d], b
1874   0FBD             _for30_update:
1875   0FBD 29 94 31      mov b, [__pos] ; pos
1876   0FC0 D7            push a
1877   0FC1 11            mov a, b
1878   0FC2 FD 77         inc b
1879   0FC4 FD 42 94 31   mov [__pos], b
1880   0FC8 27            mov b, a
1881   0FC9 E4            pop a
1882   0FCA 0A 5B 0F      jmp _for30_cond
1883   0FCD             _for30_exit:
1884   0FCD 07 95 2D      call times
1885   0FD0 26 02 00      mov b, 2
1886   0FD3 FD 42 BC 30   mov [__datumpos], b
1887   0FD7             _for31_init:
1888   0FD7 29 BC 30      mov b, [__datumpos] ; datumpos
1889   0FDA D7            push a
1890   0FDB 11            mov a, b
1891   0FDC 26 06 00      mov b, 6
1892   0FDF AC            mul a, b
1893   0FE0 E4            pop a
1894   0FE1 FD 42 94 31   mov [__pos], b
1895   0FE5             _for31_cond:
1896   0FE5 29 94 31      mov b, [__pos] ; pos
1897   0FE8 D7            push a
1898   0FE9 11            mov a, b
1899   0FEA 29 BC 30      mov b, [__datumpos] ; datumpos
1900   0FED D7            push a
1901   0FEE 11            mov a, b
1902   0FEF 26 06 00      mov b, 6
1903   0FF2 AC            mul a, b
1904   0FF3 E4            pop a
1905   0FF4 D7            push a
1906   0FF5 11            mov a, b
1907   0FF6 26 06 00      mov b, 6
1908   0FF9 54            add a, b
1909   0FFA 27            mov b, a
1910   0FFB E4            pop a
1911   0FFC B0            cmp a, b
1912   0FFD 0E            lodflgs
1913   0FFE 87 02         and al, %00000010 ; <
1914   1000 FD 9C         shr al
1915   1002 22 00         mov ah, 0
1916   1004 27            mov b, a
1917   1005 E4            pop a
1918   1006 C0 00 00      cmp b, 0
1919   1009 C6 92 10      je _for31_exit
1920   100C             _for31_block:
1921   100C 29 BA 30      mov b, [__datum]
1922   100F D7            push a
1923   1010 74            mov d, b
1924   1011 DA            push d
1925   1012 29 94 31      mov b, [__pos] ; pos
1926   1015 E7            pop d
1927   1016 10 02 00      mov a, 2
1928   1019 AC            mul a, b
1929   101A 5A            add d, b
1930   101B E4            pop a
1931   101C DA            push d
1932   101D 29 3E 31      mov b, [__cnarr]
1933   1020 D7            push a
1934   1021 74            mov d, b
1935   1022 DA            push d
1936   1023 29 94 31      mov b, [__pos] ; pos
1937   1026 D7            push a
1938   1027 11            mov a, b
1939   1028 29 BC 30      mov b, [__datumpos] ; datumpos
1940   102B D7            push a
1941   102C 11            mov a, b
1942   102D 26 06 00      mov b, 6
1943   1030 AC            mul a, b
1944   1031 E4            pop a
1945   1032 60            sub a, b
1946   1033 27            mov b, a
1947   1034 E4            pop a
1948   1035 D7            push a
1949   1036 11            mov a, b
1950   1037 26 02 00      mov b, 2
1951   103A AC            mul a, b
1952   103B E4            pop a
1953   103C D7            push a
1954   103D 11            mov a, b
1955   103E 26 01 00      mov b, 1
1956   1041 54            add a, b
1957   1042 27            mov b, a
1958   1043 E4            pop a
1959   1044 E7            pop d
1960   1045 10 02 00      mov a, 2
1961   1048 AC            mul a, b
1962   1049 5A            add d, b
1963   104A 2A            mov b, [d]
1964   104B E4            pop a
1965   104C D7            push a
1966   104D 11            mov a, b
1967   104E 26 64 00      mov b, 100
1968   1051 AC            mul a, b
1969   1052 E4            pop a
1970   1053 D7            push a
1971   1054 11            mov a, b
1972   1055 29 3E 31      mov b, [__cnarr]
1973   1058 D7            push a
1974   1059 74            mov d, b
1975   105A DA            push d
1976   105B 29 94 31      mov b, [__pos] ; pos
1977   105E D7            push a
1978   105F 11            mov a, b
1979   1060 29 BC 30      mov b, [__datumpos] ; datumpos
1980   1063 D7            push a
1981   1064 11            mov a, b
1982   1065 26 06 00      mov b, 6
1983   1068 AC            mul a, b
1984   1069 E4            pop a
1985   106A 60            sub a, b
1986   106B 27            mov b, a
1987   106C E4            pop a
1988   106D D7            push a
1989   106E 11            mov a, b
1990   106F 26 02 00      mov b, 2
1991   1072 AC            mul a, b
1992   1073 E4            pop a
1993   1074 E7            pop d
1994   1075 10 02 00      mov a, 2
1995   1078 AC            mul a, b
1996   1079 5A            add d, b
1997   107A 2A            mov b, [d]
1998   107B E4            pop a
1999   107C 54            add a, b
2000   107D 27            mov b, a
2001   107E E4            pop a
2002   107F E7            pop d
2003   1080 FD 43         mov [d], b
2004   1082             _for31_update:
2005   1082 29 94 31      mov b, [__pos] ; pos
2006   1085 D7            push a
2007   1086 11            mov a, b
2008   1087 FD 77         inc b
2009   1089 FD 42 94 31   mov [__pos], b
2010   108D 27            mov b, a
2011   108E E4            pop a
2012   108F 0A E5 0F      jmp _for31_cond
2013   1092             _for31_exit:
2014   1092             _for32_init:
2015   1092 26 12 00      mov b, 18
2016   1095 FD 42 94 31   mov [__pos], b
2017   1099             _for32_cond:
2018   1099 29 94 31      mov b, [__pos] ; pos
2019   109C D7            push a
2020   109D 11            mov a, b
2021   109E 26 0C 00      mov b, 12
2022   10A1 B0            cmp a, b
2023   10A2 0E            lodflgs
2024   10A3 87 03         and al, %00000011
2025   10A5 B9 00         cmp al, 0
2026   10A7 0E            lodflgs
2027   10A8 22 00         mov ah, 0
2028   10AA 27            mov b, a
2029   10AB E4            pop a
2030   10AC C0 00 00      cmp b, 0
2031   10AF C6 9B 11      je _for32_exit
2032   10B2             _for32_block:
2033   10B2             _if33_cond:
2034   10B2 29 BA 30      mov b, [__datum]
2035   10B5 D7            push a
2036   10B6 74            mov d, b
2037   10B7 DA            push d
2038   10B8 29 94 31      mov b, [__pos] ; pos
2039   10BB D7            push a
2040   10BC 11            mov a, b
2041   10BD 26 01 00      mov b, 1
2042   10C0 60            sub a, b
2043   10C1 27            mov b, a
2044   10C2 E4            pop a
2045   10C3 E7            pop d
2046   10C4 10 02 00      mov a, 2
2047   10C7 AC            mul a, b
2048   10C8 5A            add d, b
2049   10C9 2A            mov b, [d]
2050   10CA E4            pop a
2051   10CB D7            push a
2052   10CC 11            mov a, b
2053   10CD 26 E8 03      mov b, 1000
2054   10D0 B0            cmp a, b
2055   10D1 0E            lodflgs
2056   10D2 87 02         and al, %00000010 ; <
2057   10D4 FD 9C         shr al
2058   10D6 22 00         mov ah, 0
2059   10D8 27            mov b, a
2060   10D9 E4            pop a
2061   10DA C0 00 00      cmp b, 0
2062   10DD C6 EF 10      je _if33_exit
2063   10E0             _if33_true:
2064   10E0 26 00 00      mov b, 0
2065   10E3 FD AB         swp b
2066   10E5 D8            push b
2067   10E6 07 0C 14      call prnnum
2068   10E9 51 02 00      add sp, 2
2069   10EC 0A EF 10      jmp _if33_exit
2070   10EF             _if33_exit:
2071   10EF             _if34_cond:
2072   10EF 29 BA 30      mov b, [__datum]
2073   10F2 D7            push a
2074   10F3 74            mov d, b
2075   10F4 DA            push d
2076   10F5 29 94 31      mov b, [__pos] ; pos
2077   10F8 D7            push a
2078   10F9 11            mov a, b
2079   10FA 26 01 00      mov b, 1
2080   10FD 60            sub a, b
2081   10FE 27            mov b, a
2082   10FF E4            pop a
2083   1100 E7            pop d
2084   1101 10 02 00      mov a, 2
2085   1104 AC            mul a, b
2086   1105 5A            add d, b
2087   1106 2A            mov b, [d]
2088   1107 E4            pop a
2089   1108 D7            push a
2090   1109 11            mov a, b
2091   110A 26 64 00      mov b, 100
2092   110D B0            cmp a, b
2093   110E 0E            lodflgs
2094   110F 87 02         and al, %00000010 ; <
2095   1111 FD 9C         shr al
2096   1113 22 00         mov ah, 0
2097   1115 27            mov b, a
2098   1116 E4            pop a
2099   1117 C0 00 00      cmp b, 0
2100   111A C6 2C 11      je _if34_exit
2101   111D             _if34_true:
2102   111D 26 00 00      mov b, 0
2103   1120 FD AB         swp b
2104   1122 D8            push b
2105   1123 07 0C 14      call prnnum
2106   1126 51 02 00      add sp, 2
2107   1129 0A 2C 11      jmp _if34_exit
2108   112C             _if34_exit:
2109   112C             _if35_cond:
2110   112C 29 BA 30      mov b, [__datum]
2111   112F D7            push a
2112   1130 74            mov d, b
2113   1131 DA            push d
2114   1132 29 94 31      mov b, [__pos] ; pos
2115   1135 D7            push a
2116   1136 11            mov a, b
2117   1137 26 01 00      mov b, 1
2118   113A 60            sub a, b
2119   113B 27            mov b, a
2120   113C E4            pop a
2121   113D E7            pop d
2122   113E 10 02 00      mov a, 2
2123   1141 AC            mul a, b
2124   1142 5A            add d, b
2125   1143 2A            mov b, [d]
2126   1144 E4            pop a
2127   1145 D7            push a
2128   1146 11            mov a, b
2129   1147 26 0A 00      mov b, 10
2130   114A B0            cmp a, b
2131   114B 0E            lodflgs
2132   114C 87 02         and al, %00000010 ; <
2133   114E FD 9C         shr al
2134   1150 22 00         mov ah, 0
2135   1152 27            mov b, a
2136   1153 E4            pop a
2137   1154 C0 00 00      cmp b, 0
2138   1157 C6 69 11      je _if35_exit
2139   115A             _if35_true:
2140   115A 26 00 00      mov b, 0
2141   115D FD AB         swp b
2142   115F D8            push b
2143   1160 07 0C 14      call prnnum
2144   1163 51 02 00      add sp, 2
2145   1166 0A 69 11      jmp _if35_exit
2146   1169             _if35_exit:
2147   1169 29 BA 30      mov b, [__datum]
2148   116C D7            push a
2149   116D 74            mov d, b
2150   116E DA            push d
2151   116F 29 94 31      mov b, [__pos] ; pos
2152   1172 D7            push a
2153   1173 11            mov a, b
2154   1174 26 01 00      mov b, 1
2155   1177 60            sub a, b
2156   1178 27            mov b, a
2157   1179 E4            pop a
2158   117A E7            pop d
2159   117B 10 02 00      mov a, 2
2160   117E AC            mul a, b
2161   117F 5A            add d, b
2162   1180 2A            mov b, [d]
2163   1181 E4            pop a
2164   1182 FD AB         swp b
2165   1184 D8            push b
2166   1185 07 FB 13      call prnnumspace
2167   1188 51 02 00      add sp, 2
2168   118B             _for32_update:
2169   118B 29 94 31      mov b, [__pos] ; pos
2170   118E D7            push a
2171   118F 11            mov a, b
2172   1190 FD 7D         dec b
2173   1192 FD 42 94 31   mov [__pos], b
2174   1196 27            mov b, a
2175   1197 E4            pop a
2176   1198 0A 99 10      jmp _for32_cond
2177   119B             _for32_exit:
2178   119B 07 16 14      call prnnl
2179   119E             _for36_init:
2180   119E 26 00 00      mov b, 0
2181   11A1 FD 42 94 31   mov [__pos], b
2182   11A5             _for36_cond:
2183   11A5 29 94 31      mov b, [__pos] ; pos
2184   11A8 D7            push a
2185   11A9 11            mov a, b
2186   11AA 26 0C 00      mov b, 12
2187   11AD B0            cmp a, b
2188   11AE 0E            lodflgs
2189   11AF 87 02         and al, %00000010 ; <
2190   11B1 FD 9C         shr al
2191   11B3 22 00         mov ah, 0
2192   11B5 27            mov b, a
2193   11B6 E4            pop a
2194   11B7 C0 00 00      cmp b, 0
2195   11BA C6 17 12      je _for36_exit
2196   11BD             _for36_block:
2197   11BD 29 D6 30      mov b, [__anarr]
2198   11C0 D7            push a
2199   11C1 74            mov d, b
2200   11C2 DA            push d
2201   11C3 29 94 31      mov b, [__pos] ; pos
2202   11C6 E7            pop d
2203   11C7 10 02 00      mov a, 2
2204   11CA AC            mul a, b
2205   11CB 5A            add d, b
2206   11CC E4            pop a
2207   11CD DA            push d
2208   11CE 29 0A 31      mov b, [__anarrbkp]
2209   11D1 D7            push a
2210   11D2 74            mov d, b
2211   11D3 DA            push d
2212   11D4 29 94 31      mov b, [__pos] ; pos
2213   11D7 E7            pop d
2214   11D8 10 02 00      mov a, 2
2215   11DB AC            mul a, b
2216   11DC 5A            add d, b
2217   11DD 2A            mov b, [d]
2218   11DE E4            pop a
2219   11DF E7            pop d
2220   11E0 FD 43         mov [d], b
2221   11E2 29 F0 30      mov b, [__bnarr]
2222   11E5 D7            push a
2223   11E6 74            mov d, b
2224   11E7 DA            push d
2225   11E8 29 94 31      mov b, [__pos] ; pos
2226   11EB E7            pop d
2227   11EC 10 02 00      mov a, 2
2228   11EF AC            mul a, b
2229   11F0 5A            add d, b
2230   11F1 E4            pop a
2231   11F2 DA            push d
2232   11F3 29 24 31      mov b, [__bnarrbkp]
2233   11F6 D7            push a
2234   11F7 74            mov d, b
2235   11F8 DA            push d
2236   11F9 29 94 31      mov b, [__pos] ; pos
2237   11FC E7            pop d
2238   11FD 10 02 00      mov a, 2
2239   1200 AC            mul a, b
2240   1201 5A            add d, b
2241   1202 2A            mov b, [d]
2242   1203 E4            pop a
2243   1204 E7            pop d
2244   1205 FD 43         mov [d], b
2245   1207             _for36_update:
2246   1207 29 94 31      mov b, [__pos] ; pos
2247   120A D7            push a
2248   120B 11            mov a, b
2249   120C FD 77         inc b
2250   120E FD 42 94 31   mov [__pos], b
2251   1212 27            mov b, a
2252   1213 E4            pop a
2253   1214 0A A5 11      jmp _for36_cond
2254   1217             _for36_exit:
2255   1217 07 27 2F      call dividedby
2256   121A 26 02 00      mov b, 2
2257   121D FD 42 BC 30   mov [__datumpos], b
2258   1221             _for37_init:
2259   1221 29 BC 30      mov b, [__datumpos] ; datumpos
2260   1224 D7            push a
2261   1225 11            mov a, b
2262   1226 26 06 00      mov b, 6
2263   1229 AC            mul a, b
2264   122A E4            pop a
2265   122B FD 42 94 31   mov [__pos], b
2266   122F             _for37_cond:
2267   122F 29 94 31      mov b, [__pos] ; pos
2268   1232 D7            push a
2269   1233 11            mov a, b
2270   1234 29 BC 30      mov b, [__datumpos] ; datumpos
2271   1237 D7            push a
2272   1238 11            mov a, b
2273   1239 26 06 00      mov b, 6
2274   123C AC            mul a, b
2275   123D E4            pop a
2276   123E D7            push a
2277   123F 11            mov a, b
2278   1240 26 06 00      mov b, 6
2279   1243 54            add a, b
2280   1244 27            mov b, a
2281   1245 E4            pop a
2282   1246 B0            cmp a, b
2283   1247 0E            lodflgs
2284   1248 87 02         and al, %00000010 ; <
2285   124A FD 9C         shr al
2286   124C 22 00         mov ah, 0
2287   124E 27            mov b, a
2288   124F E4            pop a
2289   1250 C0 00 00      cmp b, 0
2290   1253 C6 DC 12      je _for37_exit
2291   1256             _for37_block:
2292   1256 29 BA 30      mov b, [__datum]
2293   1259 D7            push a
2294   125A 74            mov d, b
2295   125B DA            push d
2296   125C 29 94 31      mov b, [__pos] ; pos
2297   125F E7            pop d
2298   1260 10 02 00      mov a, 2
2299   1263 AC            mul a, b
2300   1264 5A            add d, b
2301   1265 E4            pop a
2302   1266 DA            push d
2303   1267 29 3E 31      mov b, [__cnarr]
2304   126A D7            push a
2305   126B 74            mov d, b
2306   126C DA            push d
2307   126D 29 94 31      mov b, [__pos] ; pos
2308   1270 D7            push a
2309   1271 11            mov a, b
2310   1272 29 BC 30      mov b, [__datumpos] ; datumpos
2311   1275 D7            push a
2312   1276 11            mov a, b
2313   1277 26 06 00      mov b, 6
2314   127A AC            mul a, b
2315   127B E4            pop a
2316   127C 60            sub a, b
2317   127D 27            mov b, a
2318   127E E4            pop a
2319   127F D7            push a
2320   1280 11            mov a, b
2321   1281 26 02 00      mov b, 2
2322   1284 AC            mul a, b
2323   1285 E4            pop a
2324   1286 D7            push a
2325   1287 11            mov a, b
2326   1288 26 01 00      mov b, 1
2327   128B 54            add a, b
2328   128C 27            mov b, a
2329   128D E4            pop a
2330   128E E7            pop d
2331   128F 10 02 00      mov a, 2
2332   1292 AC            mul a, b
2333   1293 5A            add d, b
2334   1294 2A            mov b, [d]
2335   1295 E4            pop a
2336   1296 D7            push a
2337   1297 11            mov a, b
2338   1298 26 64 00      mov b, 100
2339   129B AC            mul a, b
2340   129C E4            pop a
2341   129D D7            push a
2342   129E 11            mov a, b
2343   129F 29 3E 31      mov b, [__cnarr]
2344   12A2 D7            push a
2345   12A3 74            mov d, b
2346   12A4 DA            push d
2347   12A5 29 94 31      mov b, [__pos] ; pos
2348   12A8 D7            push a
2349   12A9 11            mov a, b
2350   12AA 29 BC 30      mov b, [__datumpos] ; datumpos
2351   12AD D7            push a
2352   12AE 11            mov a, b
2353   12AF 26 06 00      mov b, 6
2354   12B2 AC            mul a, b
2355   12B3 E4            pop a
2356   12B4 60            sub a, b
2357   12B5 27            mov b, a
2358   12B6 E4            pop a
2359   12B7 D7            push a
2360   12B8 11            mov a, b
2361   12B9 26 02 00      mov b, 2
2362   12BC AC            mul a, b
2363   12BD E4            pop a
2364   12BE E7            pop d
2365   12BF 10 02 00      mov a, 2
2366   12C2 AC            mul a, b
2367   12C3 5A            add d, b
2368   12C4 2A            mov b, [d]
2369   12C5 E4            pop a
2370   12C6 54            add a, b
2371   12C7 27            mov b, a
2372   12C8 E4            pop a
2373   12C9 E7            pop d
2374   12CA FD 43         mov [d], b
2375   12CC             _for37_update:
2376   12CC 29 94 31      mov b, [__pos] ; pos
2377   12CF D7            push a
2378   12D0 11            mov a, b
2379   12D1 FD 77         inc b
2380   12D3 FD 42 94 31   mov [__pos], b
2381   12D7 27            mov b, a
2382   12D8 E4            pop a
2383   12D9 0A 2F 12      jmp _for37_cond
2384   12DC             _for37_exit:
2385   12DC             _for38_init:
2386   12DC 26 12 00      mov b, 18
2387   12DF FD 42 94 31   mov [__pos], b
2388   12E3             _for38_cond:
2389   12E3 29 94 31      mov b, [__pos] ; pos
2390   12E6 D7            push a
2391   12E7 11            mov a, b
2392   12E8 26 0C 00      mov b, 12
2393   12EB B0            cmp a, b
2394   12EC 0E            lodflgs
2395   12ED 87 03         and al, %00000011
2396   12EF B9 00         cmp al, 0
2397   12F1 0E            lodflgs
2398   12F2 22 00         mov ah, 0
2399   12F4 27            mov b, a
2400   12F5 E4            pop a
2401   12F6 C0 00 00      cmp b, 0
2402   12F9 C6 E5 13      je _for38_exit
2403   12FC             _for38_block:
2404   12FC             _if39_cond:
2405   12FC 29 BA 30      mov b, [__datum]
2406   12FF D7            push a
2407   1300 74            mov d, b
2408   1301 DA            push d
2409   1302 29 94 31      mov b, [__pos] ; pos
2410   1305 D7            push a
2411   1306 11            mov a, b
2412   1307 26 01 00      mov b, 1
2413   130A 60            sub a, b
2414   130B 27            mov b, a
2415   130C E4            pop a
2416   130D E7            pop d
2417   130E 10 02 00      mov a, 2
2418   1311 AC            mul a, b
2419   1312 5A            add d, b
2420   1313 2A            mov b, [d]
2421   1314 E4            pop a
2422   1315 D7            push a
2423   1316 11            mov a, b
2424   1317 26 E8 03      mov b, 1000
2425   131A B0            cmp a, b
2426   131B 0E            lodflgs
2427   131C 87 02         and al, %00000010 ; <
2428   131E FD 9C         shr al
2429   1320 22 00         mov ah, 0
2430   1322 27            mov b, a
2431   1323 E4            pop a
2432   1324 C0 00 00      cmp b, 0
2433   1327 C6 39 13      je _if39_exit
2434   132A             _if39_true:
2435   132A 26 00 00      mov b, 0
2436   132D FD AB         swp b
2437   132F D8            push b
2438   1330 07 0C 14      call prnnum
2439   1333 51 02 00      add sp, 2
2440   1336 0A 39 13      jmp _if39_exit
2441   1339             _if39_exit:
2442   1339             _if40_cond:
2443   1339 29 BA 30      mov b, [__datum]
2444   133C D7            push a
2445   133D 74            mov d, b
2446   133E DA            push d
2447   133F 29 94 31      mov b, [__pos] ; pos
2448   1342 D7            push a
2449   1343 11            mov a, b
2450   1344 26 01 00      mov b, 1
2451   1347 60            sub a, b
2452   1348 27            mov b, a
2453   1349 E4            pop a
2454   134A E7            pop d
2455   134B 10 02 00      mov a, 2
2456   134E AC            mul a, b
2457   134F 5A            add d, b
2458   1350 2A            mov b, [d]
2459   1351 E4            pop a
2460   1352 D7            push a
2461   1353 11            mov a, b
2462   1354 26 64 00      mov b, 100
2463   1357 B0            cmp a, b
2464   1358 0E            lodflgs
2465   1359 87 02         and al, %00000010 ; <
2466   135B FD 9C         shr al
2467   135D 22 00         mov ah, 0
2468   135F 27            mov b, a
2469   1360 E4            pop a
2470   1361 C0 00 00      cmp b, 0
2471   1364 C6 76 13      je _if40_exit
2472   1367             _if40_true:
2473   1367 26 00 00      mov b, 0
2474   136A FD AB         swp b
2475   136C D8            push b
2476   136D 07 0C 14      call prnnum
2477   1370 51 02 00      add sp, 2
2478   1373 0A 76 13      jmp _if40_exit
2479   1376             _if40_exit:
2480   1376             _if41_cond:
2481   1376 29 BA 30      mov b, [__datum]
2482   1379 D7            push a
2483   137A 74            mov d, b
2484   137B DA            push d
2485   137C 29 94 31      mov b, [__pos] ; pos
2486   137F D7            push a
2487   1380 11            mov a, b
2488   1381 26 01 00      mov b, 1
2489   1384 60            sub a, b
2490   1385 27            mov b, a
2491   1386 E4            pop a
2492   1387 E7            pop d
2493   1388 10 02 00      mov a, 2
2494   138B AC            mul a, b
2495   138C 5A            add d, b
2496   138D 2A            mov b, [d]
2497   138E E4            pop a
2498   138F D7            push a
2499   1390 11            mov a, b
2500   1391 26 0A 00      mov b, 10
2501   1394 B0            cmp a, b
2502   1395 0E            lodflgs
2503   1396 87 02         and al, %00000010 ; <
2504   1398 FD 9C         shr al
2505   139A 22 00         mov ah, 0
2506   139C 27            mov b, a
2507   139D E4            pop a
2508   139E C0 00 00      cmp b, 0
2509   13A1 C6 B3 13      je _if41_exit
2510   13A4             _if41_true:
2511   13A4 26 00 00      mov b, 0
2512   13A7 FD AB         swp b
2513   13A9 D8            push b
2514   13AA 07 0C 14      call prnnum
2515   13AD 51 02 00      add sp, 2
2516   13B0 0A B3 13      jmp _if41_exit
2517   13B3             _if41_exit:
2518   13B3 29 BA 30      mov b, [__datum]
2519   13B6 D7            push a
2520   13B7 74            mov d, b
2521   13B8 DA            push d
2522   13B9 29 94 31      mov b, [__pos] ; pos
2523   13BC D7            push a
2524   13BD 11            mov a, b
2525   13BE 26 01 00      mov b, 1
2526   13C1 60            sub a, b
2527   13C2 27            mov b, a
2528   13C3 E4            pop a
2529   13C4 E7            pop d
2530   13C5 10 02 00      mov a, 2
2531   13C8 AC            mul a, b
2532   13C9 5A            add d, b
2533   13CA 2A            mov b, [d]
2534   13CB E4            pop a
2535   13CC FD AB         swp b
2536   13CE D8            push b
2537   13CF 07 FB 13      call prnnumspace
2538   13D2 51 02 00      add sp, 2
2539   13D5             _for38_update:
2540   13D5 29 94 31      mov b, [__pos] ; pos
2541   13D8 D7            push a
2542   13D9 11            mov a, b
2543   13DA FD 7D         dec b
2544   13DC FD 42 94 31   mov [__pos], b
2545   13E0 27            mov b, a
2546   13E1 E4            pop a
2547   13E2 0A E3 12      jmp _for38_cond
2548   13E5             _for38_exit:
2549   13E5 07 16 14      call prnnl
2550   13E8 F9            leave
2551   13E9 05 0B         syscall sys_terminate_proc
2552   13EB             
2553   13EB             readint:
2554   13EB D2            push bp
2555   13EC 9B            mov bp, sp
2556   13ED 52 02 00      sub sp, 2 ; n
2557   13F0             
2558   13F0             ; --- BEGIN INLINE ASM BLOCK
2559   13F0 07 16 35      call scan_u16d
2560   13F3 45 FF FF      mov [bp + -1], a
2561   13F6             ; --- END INLINE ASM BLOCK
2562   13F6             
2563   13F6 2C FF FF      mov b, [bp + -1] ; n
2564   13F9 F9            leave
2565   13FA 09            ret
2566   13FB             
2567   13FB             prnnumspace:
2568   13FB D2            push bp
2569   13FC 9B            mov bp, sp
2570   13FD             
2571   13FD             ; --- BEGIN INLINE ASM BLOCK
2572   13FD 17 05 00      mov a, [bp + 5]
2573   1400 07 41 34      call print_u16d
2574   1403 14 5E 30      mov a, [__sp]
2575   1406 3C            mov d, a
2576   1407 07 18 34      call puts
2577   140A             ; --- END INLINE ASM BLOCK
2578   140A             
2579   140A F9            leave
2580   140B 09            ret
2581   140C             
2582   140C             prnnum:
2583   140C D2            push bp
2584   140D 9B            mov bp, sp
2585   140E             
2586   140E             ; --- BEGIN INLINE ASM BLOCK
2587   140E 17 05 00      mov a, [bp + 5]
2588   1411 07 41 34      call print_u16d
2589   1414             ; --- END INLINE ASM BLOCK
2590   1414             
2591   1414 F9            leave
2592   1415 09            ret
2593   1416             
2594   1416             prnnl:
2595   1416 D2            push bp
2596   1417 9B            mov bp, sp
2597   1418             
2598   1418             ; --- BEGIN INLINE ASM BLOCK
2599   1418 14 5A 30      mov a, [__ss]
2600   141B 3C            mov d, a
2601   141C 07 18 34      call puts
2602   141F             ; --- END INLINE ASM BLOCK
2603   141F             
2604   141F F9            leave
2605   1420 09            ret
2606   1421             
2607   1421             prnsp:
2608   1421 D2            push bp
2609   1422 9B            mov bp, sp
2610   1423             
2611   1423             ; --- BEGIN INLINE ASM BLOCK
2612   1423 14 5E 30      mov a, [__sp]
2613   1426 3C            mov d, a
2614   1427 07 18 34      call puts
2615   142A             ; --- END INLINE ASM BLOCK
2616   142A             
2617   142A F9            leave
2618   142B 09            ret
2619   142C             
2620   142C             fixsignin:
2621   142C D2            push bp
2622   142D 9B            mov bp, sp
2623   142E 26 00 00      mov b, 0
2624   1431 FD 42 8C 31   mov [__asign], b
2625   1435 26 00 00      mov b, 0
2626   1438 FD 42 8E 31   mov [__bsign], b
2627   143C 26 00 00      mov b, 0
2628   143F FD 42 90 31   mov [__csign], b
2629   1443             _if42_cond:
2630   1443 29 D6 30      mov b, [__anarr]
2631   1446 D7            push a
2632   1447 74            mov d, b
2633   1448 DA            push d
2634   1449 26 0B 00      mov b, 11
2635   144C E7            pop d
2636   144D 10 02 00      mov a, 2
2637   1450 AC            mul a, b
2638   1451 5A            add d, b
2639   1452 2A            mov b, [d]
2640   1453 E4            pop a
2641   1454 D7            push a
2642   1455 11            mov a, b
2643   1456 26 09 00      mov b, 9
2644   1459 B0            cmp a, b
2645   145A 0E            lodflgs
2646   145B 87 03         and al, %00000011
2647   145D B9 00         cmp al, 0
2648   145F 0E            lodflgs
2649   1460 22 00         mov ah, 0
2650   1462 27            mov b, a
2651   1463 E4            pop a
2652   1464 C0 00 00      cmp b, 0
2653   1467 C6 C9 14      je _if42_exit
2654   146A             _if42_true:
2655   146A 29 D6 30      mov b, [__anarr]
2656   146D D7            push a
2657   146E 74            mov d, b
2658   146F DA            push d
2659   1470 26 0B 00      mov b, 11
2660   1473 E7            pop d
2661   1474 10 02 00      mov a, 2
2662   1477 AC            mul a, b
2663   1478 5A            add d, b
2664   1479 2A            mov b, [d]
2665   147A E4            pop a
2666   147B D7            push a
2667   147C 11            mov a, b
2668   147D 26 0A 00      mov b, 10
2669   1480 AE            div a, b
2670   1481 FD 78         mov g, a
2671   1483 11            mov a, b
2672   1484 FD 27         mov b, g
2673   1486 E4            pop a
2674   1487 FD 42 94 31   mov [__pos], b
2675   148B 29 D6 30      mov b, [__anarr]
2676   148E D7            push a
2677   148F 74            mov d, b
2678   1490 DA            push d
2679   1491 26 0B 00      mov b, 11
2680   1494 E7            pop d
2681   1495 10 02 00      mov a, 2
2682   1498 AC            mul a, b
2683   1499 5A            add d, b
2684   149A E4            pop a
2685   149B DA            push d
2686   149C 29 D6 30      mov b, [__anarr]
2687   149F D7            push a
2688   14A0 74            mov d, b
2689   14A1 DA            push d
2690   14A2 26 0B 00      mov b, 11
2691   14A5 E7            pop d
2692   14A6 10 02 00      mov a, 2
2693   14A9 AC            mul a, b
2694   14AA 5A            add d, b
2695   14AB 2A            mov b, [d]
2696   14AC E4            pop a
2697   14AD D7            push a
2698   14AE 11            mov a, b
2699   14AF 29 94 31      mov b, [__pos] ; pos
2700   14B2 D7            push a
2701   14B3 11            mov a, b
2702   14B4 26 0A 00      mov b, 10
2703   14B7 AC            mul a, b
2704   14B8 E4            pop a
2705   14B9 60            sub a, b
2706   14BA 27            mov b, a
2707   14BB E4            pop a
2708   14BC E7            pop d
2709   14BD FD 43         mov [d], b
2710   14BF 26 01 00      mov b, 1
2711   14C2 FD 42 8C 31   mov [__asign], b
2712   14C6 0A C9 14      jmp _if42_exit
2713   14C9             _if42_exit:
2714   14C9             _if43_cond:
2715   14C9 29 F0 30      mov b, [__bnarr]
2716   14CC D7            push a
2717   14CD 74            mov d, b
2718   14CE DA            push d
2719   14CF 26 0B 00      mov b, 11
2720   14D2 E7            pop d
2721   14D3 10 02 00      mov a, 2
2722   14D6 AC            mul a, b
2723   14D7 5A            add d, b
2724   14D8 2A            mov b, [d]
2725   14D9 E4            pop a
2726   14DA D7            push a
2727   14DB 11            mov a, b
2728   14DC 26 09 00      mov b, 9
2729   14DF B0            cmp a, b
2730   14E0 0E            lodflgs
2731   14E1 87 03         and al, %00000011
2732   14E3 B9 00         cmp al, 0
2733   14E5 0E            lodflgs
2734   14E6 22 00         mov ah, 0
2735   14E8 27            mov b, a
2736   14E9 E4            pop a
2737   14EA C0 00 00      cmp b, 0
2738   14ED C6 4F 15      je _if43_exit
2739   14F0             _if43_true:
2740   14F0 29 F0 30      mov b, [__bnarr]
2741   14F3 D7            push a
2742   14F4 74            mov d, b
2743   14F5 DA            push d
2744   14F6 26 0B 00      mov b, 11
2745   14F9 E7            pop d
2746   14FA 10 02 00      mov a, 2
2747   14FD AC            mul a, b
2748   14FE 5A            add d, b
2749   14FF 2A            mov b, [d]
2750   1500 E4            pop a
2751   1501 D7            push a
2752   1502 11            mov a, b
2753   1503 26 0A 00      mov b, 10
2754   1506 AE            div a, b
2755   1507 FD 78         mov g, a
2756   1509 11            mov a, b
2757   150A FD 27         mov b, g
2758   150C E4            pop a
2759   150D FD 42 94 31   mov [__pos], b
2760   1511 29 F0 30      mov b, [__bnarr]
2761   1514 D7            push a
2762   1515 74            mov d, b
2763   1516 DA            push d
2764   1517 26 0B 00      mov b, 11
2765   151A E7            pop d
2766   151B 10 02 00      mov a, 2
2767   151E AC            mul a, b
2768   151F 5A            add d, b
2769   1520 E4            pop a
2770   1521 DA            push d
2771   1522 29 F0 30      mov b, [__bnarr]
2772   1525 D7            push a
2773   1526 74            mov d, b
2774   1527 DA            push d
2775   1528 26 0B 00      mov b, 11
2776   152B E7            pop d
2777   152C 10 02 00      mov a, 2
2778   152F AC            mul a, b
2779   1530 5A            add d, b
2780   1531 2A            mov b, [d]
2781   1532 E4            pop a
2782   1533 D7            push a
2783   1534 11            mov a, b
2784   1535 29 94 31      mov b, [__pos] ; pos
2785   1538 D7            push a
2786   1539 11            mov a, b
2787   153A 26 0A 00      mov b, 10
2788   153D AC            mul a, b
2789   153E E4            pop a
2790   153F 60            sub a, b
2791   1540 27            mov b, a
2792   1541 E4            pop a
2793   1542 E7            pop d
2794   1543 FD 43         mov [d], b
2795   1545 26 01 00      mov b, 1
2796   1548 FD 42 8E 31   mov [__bsign], b
2797   154C 0A 4F 15      jmp _if43_exit
2798   154F             _if43_exit:
2799   154F F9            leave
2800   1550 09            ret
2801   1551             
2802   1551             fixsignout:
2803   1551 D2            push bp
2804   1552 9B            mov bp, sp
2805   1553             _if44_cond:
2806   1553 29 90 31      mov b, [__csign] ; csign
2807   1556 D7            push a
2808   1557 11            mov a, b
2809   1558 26 01 00      mov b, 1
2810   155B B0            cmp a, b
2811   155C 0E            lodflgs
2812   155D 87 01         and al, %00000001 ; ==
2813   155F 22 00         mov ah, 0
2814   1561 27            mov b, a
2815   1562 E4            pop a
2816   1563 C0 00 00      cmp b, 0
2817   1566 C6 A0 15      je _if44_exit
2818   1569             _if44_true:
2819   1569 29 3E 31      mov b, [__cnarr]
2820   156C D7            push a
2821   156D 74            mov d, b
2822   156E DA            push d
2823   156F 26 0B 00      mov b, 11
2824   1572 E7            pop d
2825   1573 10 02 00      mov a, 2
2826   1576 AC            mul a, b
2827   1577 5A            add d, b
2828   1578 E4            pop a
2829   1579 DA            push d
2830   157A 29 3E 31      mov b, [__cnarr]
2831   157D D7            push a
2832   157E 74            mov d, b
2833   157F DA            push d
2834   1580 26 0B 00      mov b, 11
2835   1583 E7            pop d
2836   1584 10 02 00      mov a, 2
2837   1587 AC            mul a, b
2838   1588 5A            add d, b
2839   1589 2A            mov b, [d]
2840   158A E4            pop a
2841   158B D7            push a
2842   158C 11            mov a, b
2843   158D 26 0A 00      mov b, 10
2844   1590 54            add a, b
2845   1591 27            mov b, a
2846   1592 E4            pop a
2847   1593 E7            pop d
2848   1594 FD 43         mov [d], b
2849   1596 26 00 00      mov b, 0
2850   1599 FD 42 90 31   mov [__csign], b
2851   159D 0A A0 15      jmp _if44_exit
2852   15A0             _if44_exit:
2853   15A0 F9            leave
2854   15A1 09            ret
2855   15A2             
2856   15A2             fixcsizezero:
2857   15A2 D2            push bp
2858   15A3 9B            mov bp, sp
2859   15A4 26 01 00      mov b, 1
2860   15A7 FD 42 C6 31   mov [__allzeroes], b
2861   15AB             _for45_init:
2862   15AB 26 01 00      mov b, 1
2863   15AE FD 42 94 31   mov [__pos], b
2864   15B2             _for45_cond:
2865   15B2 29 94 31      mov b, [__pos] ; pos
2866   15B5 D7            push a
2867   15B6 11            mov a, b
2868   15B7 26 0C 00      mov b, 12
2869   15BA B0            cmp a, b
2870   15BB 0E            lodflgs
2871   15BC 87 02         and al, %00000010 ; <
2872   15BE FD 9C         shr al
2873   15C0 22 00         mov ah, 0
2874   15C2 27            mov b, a
2875   15C3 E4            pop a
2876   15C4 C0 00 00      cmp b, 0
2877   15C7 C6 0D 16      je _for45_exit
2878   15CA             _for45_block:
2879   15CA             _if46_cond:
2880   15CA 29 3E 31      mov b, [__cnarr]
2881   15CD D7            push a
2882   15CE 74            mov d, b
2883   15CF DA            push d
2884   15D0 29 94 31      mov b, [__pos] ; pos
2885   15D3 E7            pop d
2886   15D4 10 02 00      mov a, 2
2887   15D7 AC            mul a, b
2888   15D8 5A            add d, b
2889   15D9 2A            mov b, [d]
2890   15DA E4            pop a
2891   15DB D7            push a
2892   15DC 11            mov a, b
2893   15DD 26 00 00      mov b, 0
2894   15E0 B0            cmp a, b
2895   15E1 0E            lodflgs
2896   15E2 87 01         and al, %00000001
2897   15E4 8F 01         xor al, %00000001 ; !=
2898   15E6 22 00         mov ah, 0
2899   15E8 27            mov b, a
2900   15E9 E4            pop a
2901   15EA C0 00 00      cmp b, 0
2902   15ED C6 FD 15      je _if46_exit
2903   15F0             _if46_true:
2904   15F0 26 00 00      mov b, 0
2905   15F3 FD 42 C6 31   mov [__allzeroes], b
2906   15F7 0A 0D 16      jmp _for45_exit ; for break
2907   15FA 0A FD 15      jmp _if46_exit
2908   15FD             _if46_exit:
2909   15FD             _for45_update:
2910   15FD 29 94 31      mov b, [__pos] ; pos
2911   1600 D7            push a
2912   1601 11            mov a, b
2913   1602 FD 77         inc b
2914   1604 FD 42 94 31   mov [__pos], b
2915   1608 27            mov b, a
2916   1609 E4            pop a
2917   160A 0A B2 15      jmp _for45_cond
2918   160D             _for45_exit:
2919   160D             _if47_cond:
2920   160D 29 C6 31      mov b, [__allzeroes] ; allzeroes
2921   1610 D7            push a
2922   1611 11            mov a, b
2923   1612 26 01 00      mov b, 1
2924   1615 B0            cmp a, b
2925   1616 0E            lodflgs
2926   1617 87 01         and al, %00000001 ; ==
2927   1619 22 00         mov ah, 0
2928   161B 27            mov b, a
2929   161C E4            pop a
2930   161D C0 00 00      cmp b, 0
2931   1620 C6 2D 16      je _if47_exit
2932   1623             _if47_true:
2933   1623 26 00 00      mov b, 0
2934   1626 FD 42 90 31   mov [__csign], b
2935   162A 0A 2D 16      jmp _if47_exit
2936   162D             _if47_exit:
2937   162D             _if48_cond:
2938   162D 29 3E 31      mov b, [__cnarr]
2939   1630 D7            push a
2940   1631 74            mov d, b
2941   1632 DA            push d
2942   1633 26 0B 00      mov b, 11
2943   1636 E7            pop d
2944   1637 10 02 00      mov a, 2
2945   163A AC            mul a, b
2946   163B 5A            add d, b
2947   163C 2A            mov b, [d]
2948   163D E4            pop a
2949   163E D7            push a
2950   163F 11            mov a, b
2951   1640 26 09 00      mov b, 9
2952   1643 B0            cmp a, b
2953   1644 0E            lodflgs
2954   1645 87 03         and al, %00000011
2955   1647 B9 00         cmp al, 0
2956   1649 0E            lodflgs
2957   164A 22 00         mov ah, 0
2958   164C 27            mov b, a
2959   164D E4            pop a
2960   164E C0 00 00      cmp b, 0
2961   1651 C6 A4 16      je _if48_exit
2962   1654             _if48_true:
2963   1654 26 00 00      mov b, 0
2964   1657 FD 42 90 31   mov [__csign], b
2965   165B             _for49_init:
2966   165B 26 01 00      mov b, 1
2967   165E FD 42 94 31   mov [__pos], b
2968   1662             _for49_cond:
2969   1662 29 94 31      mov b, [__pos] ; pos
2970   1665 D7            push a
2971   1666 11            mov a, b
2972   1667 26 0C 00      mov b, 12
2973   166A B0            cmp a, b
2974   166B 0E            lodflgs
2975   166C 87 02         and al, %00000010 ; <
2976   166E FD 9C         shr al
2977   1670 22 00         mov ah, 0
2978   1672 27            mov b, a
2979   1673 E4            pop a
2980   1674 C0 00 00      cmp b, 0
2981   1677 C6 A1 16      je _for49_exit
2982   167A             _for49_block:
2983   167A 29 3E 31      mov b, [__cnarr]
2984   167D D7            push a
2985   167E 74            mov d, b
2986   167F DA            push d
2987   1680 29 94 31      mov b, [__pos] ; pos
2988   1683 E7            pop d
2989   1684 10 02 00      mov a, 2
2990   1687 AC            mul a, b
2991   1688 5A            add d, b
2992   1689 E4            pop a
2993   168A DA            push d
2994   168B 26 00 00      mov b, 0
2995   168E E7            pop d
2996   168F FD 43         mov [d], b
2997   1691             _for49_update:
2998   1691 29 94 31      mov b, [__pos] ; pos
2999   1694 D7            push a
3000   1695 11            mov a, b
3001   1696 FD 77         inc b
3002   1698 FD 42 94 31   mov [__pos], b
3003   169C 27            mov b, a
3004   169D E4            pop a
3005   169E 0A 62 16      jmp _for49_cond
3006   16A1             _for49_exit:
3007   16A1 0A A4 16      jmp _if48_exit
3008   16A4             _if48_exit:
3009   16A4 F9            leave
3010   16A5 09            ret
3011   16A6             
3012   16A6             swapab:
3013   16A6 D2            push bp
3014   16A7 9B            mov bp, sp
3015   16A8             _for50_init:
3016   16A8 26 00 00      mov b, 0
3017   16AB FD 42 AC 31   mov [__swappos], b
3018   16AF             _for50_cond:
3019   16AF 29 AC 31      mov b, [__swappos] ; swappos
3020   16B2 D7            push a
3021   16B3 11            mov a, b
3022   16B4 26 0C 00      mov b, 12
3023   16B7 B0            cmp a, b
3024   16B8 0E            lodflgs
3025   16B9 87 02         and al, %00000010 ; <
3026   16BB FD 9C         shr al
3027   16BD 22 00         mov ah, 0
3028   16BF 27            mov b, a
3029   16C0 E4            pop a
3030   16C1 C0 00 00      cmp b, 0
3031   16C4 C6 88 17      je _for50_exit
3032   16C7             _for50_block:
3033   16C7 29 D6 30      mov b, [__anarr]
3034   16CA D7            push a
3035   16CB 74            mov d, b
3036   16CC DA            push d
3037   16CD 29 AC 31      mov b, [__swappos] ; swappos
3038   16D0 E7            pop d
3039   16D1 10 02 00      mov a, 2
3040   16D4 AC            mul a, b
3041   16D5 5A            add d, b
3042   16D6 E4            pop a
3043   16D7 DA            push d
3044   16D8 29 D6 30      mov b, [__anarr]
3045   16DB D7            push a
3046   16DC 74            mov d, b
3047   16DD DA            push d
3048   16DE 29 AC 31      mov b, [__swappos] ; swappos
3049   16E1 E7            pop d
3050   16E2 10 02 00      mov a, 2
3051   16E5 AC            mul a, b
3052   16E6 5A            add d, b
3053   16E7 2A            mov b, [d]
3054   16E8 E4            pop a
3055   16E9 D7            push a
3056   16EA 11            mov a, b
3057   16EB 29 F0 30      mov b, [__bnarr]
3058   16EE D7            push a
3059   16EF 74            mov d, b
3060   16F0 DA            push d
3061   16F1 29 AC 31      mov b, [__swappos] ; swappos
3062   16F4 E7            pop d
3063   16F5 10 02 00      mov a, 2
3064   16F8 AC            mul a, b
3065   16F9 5A            add d, b
3066   16FA 2A            mov b, [d]
3067   16FB E4            pop a
3068   16FC 54            add a, b
3069   16FD 27            mov b, a
3070   16FE E4            pop a
3071   16FF E7            pop d
3072   1700 FD 43         mov [d], b
3073   1702 29 F0 30      mov b, [__bnarr]
3074   1705 D7            push a
3075   1706 74            mov d, b
3076   1707 DA            push d
3077   1708 29 AC 31      mov b, [__swappos] ; swappos
3078   170B E7            pop d
3079   170C 10 02 00      mov a, 2
3080   170F AC            mul a, b
3081   1710 5A            add d, b
3082   1711 E4            pop a
3083   1712 DA            push d
3084   1713 29 D6 30      mov b, [__anarr]
3085   1716 D7            push a
3086   1717 74            mov d, b
3087   1718 DA            push d
3088   1719 29 AC 31      mov b, [__swappos] ; swappos
3089   171C E7            pop d
3090   171D 10 02 00      mov a, 2
3091   1720 AC            mul a, b
3092   1721 5A            add d, b
3093   1722 2A            mov b, [d]
3094   1723 E4            pop a
3095   1724 D7            push a
3096   1725 11            mov a, b
3097   1726 29 F0 30      mov b, [__bnarr]
3098   1729 D7            push a
3099   172A 74            mov d, b
3100   172B DA            push d
3101   172C 29 AC 31      mov b, [__swappos] ; swappos
3102   172F E7            pop d
3103   1730 10 02 00      mov a, 2
3104   1733 AC            mul a, b
3105   1734 5A            add d, b
3106   1735 2A            mov b, [d]
3107   1736 E4            pop a
3108   1737 60            sub a, b
3109   1738 27            mov b, a
3110   1739 E4            pop a
3111   173A E7            pop d
3112   173B FD 43         mov [d], b
3113   173D 29 D6 30      mov b, [__anarr]
3114   1740 D7            push a
3115   1741 74            mov d, b
3116   1742 DA            push d
3117   1743 29 AC 31      mov b, [__swappos] ; swappos
3118   1746 E7            pop d
3119   1747 10 02 00      mov a, 2
3120   174A AC            mul a, b
3121   174B 5A            add d, b
3122   174C E4            pop a
3123   174D DA            push d
3124   174E 29 D6 30      mov b, [__anarr]
3125   1751 D7            push a
3126   1752 74            mov d, b
3127   1753 DA            push d
3128   1754 29 AC 31      mov b, [__swappos] ; swappos
3129   1757 E7            pop d
3130   1758 10 02 00      mov a, 2
3131   175B AC            mul a, b
3132   175C 5A            add d, b
3133   175D 2A            mov b, [d]
3134   175E E4            pop a
3135   175F D7            push a
3136   1760 11            mov a, b
3137   1761 29 F0 30      mov b, [__bnarr]
3138   1764 D7            push a
3139   1765 74            mov d, b
3140   1766 DA            push d
3141   1767 29 AC 31      mov b, [__swappos] ; swappos
3142   176A E7            pop d
3143   176B 10 02 00      mov a, 2
3144   176E AC            mul a, b
3145   176F 5A            add d, b
3146   1770 2A            mov b, [d]
3147   1771 E4            pop a
3148   1772 60            sub a, b
3149   1773 27            mov b, a
3150   1774 E4            pop a
3151   1775 E7            pop d
3152   1776 FD 43         mov [d], b
3153   1778             _for50_update:
3154   1778 29 AC 31      mov b, [__swappos] ; swappos
3155   177B D7            push a
3156   177C 11            mov a, b
3157   177D FD 77         inc b
3158   177F FD 42 AC 31   mov [__swappos], b
3159   1783 27            mov b, a
3160   1784 E4            pop a
3161   1785 0A AF 16      jmp _for50_cond
3162   1788             _for50_exit:
3163   1788 F9            leave
3164   1789 09            ret
3165   178A             
3166   178A             checkabsabsize:
3167   178A D2            push bp
3168   178B 9B            mov bp, sp
3169   178C 26 00 00      mov b, 0
3170   178F FD 42 9A 31   mov [__agtb], b
3171   1793 26 00 00      mov b, 0
3172   1796 FD 42 9C 31   mov [__bgta], b
3173   179A 26 00 00      mov b, 0
3174   179D FD 42 A2 31   mov [__ageb], b
3175   17A1 26 00 00      mov b, 0
3176   17A4 FD 42 A4 31   mov [__bgea], b
3177   17A8 26 00 00      mov b, 0
3178   17AB FD 42 9E 31   mov [__aeqb], b
3179   17AF 26 00 00      mov b, 0
3180   17B2 FD 42 A0 31   mov [__aneqb], b
3181   17B6             _for51_init:
3182   17B6 26 0C 00      mov b, 12
3183   17B9 FD 42 AA 31   mov [__psizepos], b
3184   17BD             _for51_cond:
3185   17BD 29 AA 31      mov b, [__psizepos] ; psizepos
3186   17C0 D7            push a
3187   17C1 11            mov a, b
3188   17C2 26 00 00      mov b, 0
3189   17C5 B0            cmp a, b
3190   17C6 0E            lodflgs
3191   17C7 87 03         and al, %00000011
3192   17C9 B9 00         cmp al, 0
3193   17CB 0E            lodflgs
3194   17CC 22 00         mov ah, 0
3195   17CE 27            mov b, a
3196   17CF E4            pop a
3197   17D0 C0 00 00      cmp b, 0
3198   17D3 C6 AA 18      je _for51_exit
3199   17D6             _for51_block:
3200   17D6 29 AA 31      mov b, [__psizepos] ; psizepos
3201   17D9 D7            push a
3202   17DA 11            mov a, b
3203   17DB 26 01 00      mov b, 1
3204   17DE 60            sub a, b
3205   17DF 27            mov b, a
3206   17E0 E4            pop a
3207   17E1 FD 42 A8 31   mov [__sizepos], b
3208   17E5             _if52_cond:
3209   17E5 29 D6 30      mov b, [__anarr]
3210   17E8 D7            push a
3211   17E9 74            mov d, b
3212   17EA DA            push d
3213   17EB 29 A8 31      mov b, [__sizepos] ; sizepos
3214   17EE E7            pop d
3215   17EF 10 02 00      mov a, 2
3216   17F2 AC            mul a, b
3217   17F3 5A            add d, b
3218   17F4 2A            mov b, [d]
3219   17F5 E4            pop a
3220   17F6 D7            push a
3221   17F7 11            mov a, b
3222   17F8 29 F0 30      mov b, [__bnarr]
3223   17FB D7            push a
3224   17FC 74            mov d, b
3225   17FD DA            push d
3226   17FE 29 A8 31      mov b, [__sizepos] ; sizepos
3227   1801 E7            pop d
3228   1802 10 02 00      mov a, 2
3229   1805 AC            mul a, b
3230   1806 5A            add d, b
3231   1807 2A            mov b, [d]
3232   1808 E4            pop a
3233   1809 B0            cmp a, b
3234   180A 0E            lodflgs
3235   180B 87 03         and al, %00000011
3236   180D B9 00         cmp al, 0
3237   180F 0E            lodflgs
3238   1810 22 00         mov ah, 0
3239   1812 27            mov b, a
3240   1813 E4            pop a
3241   1814 C0 00 00      cmp b, 0
3242   1817 C6 32 18      je _if52_exit
3243   181A             _if52_true:
3244   181A 26 01 00      mov b, 1
3245   181D FD 42 A0 31   mov [__aneqb], b
3246   1821 26 01 00      mov b, 1
3247   1824 FD 42 9A 31   mov [__agtb], b
3248   1828 26 01 00      mov b, 1
3249   182B FD 42 A2 31   mov [__ageb], b
3250   182F 0A 32 18      jmp _if52_exit
3251   1832             _if52_exit:
3252   1832             _if53_cond:
3253   1832 29 D6 30      mov b, [__anarr]
3254   1835 D7            push a
3255   1836 74            mov d, b
3256   1837 DA            push d
3257   1838 29 A8 31      mov b, [__sizepos] ; sizepos
3258   183B E7            pop d
3259   183C 10 02 00      mov a, 2
3260   183F AC            mul a, b
3261   1840 5A            add d, b
3262   1841 2A            mov b, [d]
3263   1842 E4            pop a
3264   1843 D7            push a
3265   1844 11            mov a, b
3266   1845 29 F0 30      mov b, [__bnarr]
3267   1848 D7            push a
3268   1849 74            mov d, b
3269   184A DA            push d
3270   184B 29 A8 31      mov b, [__sizepos] ; sizepos
3271   184E E7            pop d
3272   184F 10 02 00      mov a, 2
3273   1852 AC            mul a, b
3274   1853 5A            add d, b
3275   1854 2A            mov b, [d]
3276   1855 E4            pop a
3277   1856 B0            cmp a, b
3278   1857 0E            lodflgs
3279   1858 87 02         and al, %00000010 ; <
3280   185A FD 9C         shr al
3281   185C 22 00         mov ah, 0
3282   185E 27            mov b, a
3283   185F E4            pop a
3284   1860 C0 00 00      cmp b, 0
3285   1863 C6 7E 18      je _if53_exit
3286   1866             _if53_true:
3287   1866 26 01 00      mov b, 1
3288   1869 FD 42 A0 31   mov [__aneqb], b
3289   186D 26 01 00      mov b, 1
3290   1870 FD 42 9C 31   mov [__bgta], b
3291   1874 26 01 00      mov b, 1
3292   1877 FD 42 A4 31   mov [__bgea], b
3293   187B 0A 7E 18      jmp _if53_exit
3294   187E             _if53_exit:
3295   187E             _if54_cond:
3296   187E 29 A0 31      mov b, [__aneqb] ; aneqb
3297   1881 D7            push a
3298   1882 11            mov a, b
3299   1883 26 01 00      mov b, 1
3300   1886 B0            cmp a, b
3301   1887 0E            lodflgs
3302   1888 87 01         and al, %00000001 ; ==
3303   188A 22 00         mov ah, 0
3304   188C 27            mov b, a
3305   188D E4            pop a
3306   188E C0 00 00      cmp b, 0
3307   1891 C6 9A 18      je _if54_exit
3308   1894             _if54_true:
3309   1894 0A AA 18      jmp _for51_exit ; for break
3310   1897 0A 9A 18      jmp _if54_exit
3311   189A             _if54_exit:
3312   189A             _for51_update:
3313   189A 29 AA 31      mov b, [__psizepos] ; psizepos
3314   189D D7            push a
3315   189E 11            mov a, b
3316   189F FD 7D         dec b
3317   18A1 FD 42 AA 31   mov [__psizepos], b
3318   18A5 27            mov b, a
3319   18A6 E4            pop a
3320   18A7 0A BD 17      jmp _for51_cond
3321   18AA             _for51_exit:
3322   18AA             _if55_cond:
3323   18AA 29 A0 31      mov b, [__aneqb] ; aneqb
3324   18AD D7            push a
3325   18AE 11            mov a, b
3326   18AF 26 00 00      mov b, 0
3327   18B2 B0            cmp a, b
3328   18B3 0E            lodflgs
3329   18B4 87 01         and al, %00000001 ; ==
3330   18B6 22 00         mov ah, 0
3331   18B8 27            mov b, a
3332   18B9 E4            pop a
3333   18BA C0 00 00      cmp b, 0
3334   18BD C6 D8 18      je _if55_exit
3335   18C0             _if55_true:
3336   18C0 26 01 00      mov b, 1
3337   18C3 FD 42 9E 31   mov [__aeqb], b
3338   18C7 26 01 00      mov b, 1
3339   18CA FD 42 A2 31   mov [__ageb], b
3340   18CE 26 01 00      mov b, 1
3341   18D1 FD 42 A4 31   mov [__bgea], b
3342   18D5 0A D8 18      jmp _if55_exit
3343   18D8             _if55_exit:
3344   18D8 F9            leave
3345   18D9 09            ret
3346   18DA             
3347   18DA             protoplus:
3348   18DA D2            push bp
3349   18DB 9B            mov bp, sp
3350   18DC 26 00 00      mov b, 0
3351   18DF FD 42 96 31   mov [__carry], b
3352   18E3             _for56_init:
3353   18E3 26 00 00      mov b, 0
3354   18E6 FD 42 94 31   mov [__pos], b
3355   18EA             _for56_cond:
3356   18EA 29 94 31      mov b, [__pos] ; pos
3357   18ED D7            push a
3358   18EE 11            mov a, b
3359   18EF 26 0C 00      mov b, 12
3360   18F2 B0            cmp a, b
3361   18F3 0E            lodflgs
3362   18F4 87 02         and al, %00000010 ; <
3363   18F6 FD 9C         shr al
3364   18F8 22 00         mov ah, 0
3365   18FA 27            mov b, a
3366   18FB E4            pop a
3367   18FC C0 00 00      cmp b, 0
3368   18FF C6 BA 19      je _for56_exit
3369   1902             _for56_block:
3370   1902 29 3E 31      mov b, [__cnarr]
3371   1905 D7            push a
3372   1906 74            mov d, b
3373   1907 DA            push d
3374   1908 29 94 31      mov b, [__pos] ; pos
3375   190B E7            pop d
3376   190C 10 02 00      mov a, 2
3377   190F AC            mul a, b
3378   1910 5A            add d, b
3379   1911 E4            pop a
3380   1912 DA            push d
3381   1913 29 D6 30      mov b, [__anarr]
3382   1916 D7            push a
3383   1917 74            mov d, b
3384   1918 DA            push d
3385   1919 29 94 31      mov b, [__pos] ; pos
3386   191C E7            pop d
3387   191D 10 02 00      mov a, 2
3388   1920 AC            mul a, b
3389   1921 5A            add d, b
3390   1922 2A            mov b, [d]
3391   1923 E4            pop a
3392   1924 D7            push a
3393   1925 11            mov a, b
3394   1926 29 F0 30      mov b, [__bnarr]
3395   1929 D7            push a
3396   192A 74            mov d, b
3397   192B DA            push d
3398   192C 29 94 31      mov b, [__pos] ; pos
3399   192F E7            pop d
3400   1930 10 02 00      mov a, 2
3401   1933 AC            mul a, b
3402   1934 5A            add d, b
3403   1935 2A            mov b, [d]
3404   1936 E4            pop a
3405   1937 54            add a, b
3406   1938 27            mov b, a
3407   1939 E4            pop a
3408   193A D7            push a
3409   193B 11            mov a, b
3410   193C 29 96 31      mov b, [__carry] ; carry
3411   193F 54            add a, b
3412   1940 27            mov b, a
3413   1941 E4            pop a
3414   1942 E7            pop d
3415   1943 FD 43         mov [d], b
3416   1945 26 00 00      mov b, 0
3417   1948 FD 42 96 31   mov [__carry], b
3418   194C             _if57_cond:
3419   194C 29 3E 31      mov b, [__cnarr]
3420   194F D7            push a
3421   1950 74            mov d, b
3422   1951 DA            push d
3423   1952 29 94 31      mov b, [__pos] ; pos
3424   1955 E7            pop d
3425   1956 10 02 00      mov a, 2
3426   1959 AC            mul a, b
3427   195A 5A            add d, b
3428   195B 2A            mov b, [d]
3429   195C E4            pop a
3430   195D D7            push a
3431   195E 11            mov a, b
3432   195F 26 63 00      mov b, 99
3433   1962 B0            cmp a, b
3434   1963 0E            lodflgs
3435   1964 87 03         and al, %00000011
3436   1966 B9 00         cmp al, 0
3437   1968 0E            lodflgs
3438   1969 22 00         mov ah, 0
3439   196B 27            mov b, a
3440   196C E4            pop a
3441   196D C0 00 00      cmp b, 0
3442   1970 C6 AA 19      je _if57_exit
3443   1973             _if57_true:
3444   1973 26 01 00      mov b, 1
3445   1976 FD 42 96 31   mov [__carry], b
3446   197A 29 3E 31      mov b, [__cnarr]
3447   197D D7            push a
3448   197E 74            mov d, b
3449   197F DA            push d
3450   1980 29 94 31      mov b, [__pos] ; pos
3451   1983 E7            pop d
3452   1984 10 02 00      mov a, 2
3453   1987 AC            mul a, b
3454   1988 5A            add d, b
3455   1989 E4            pop a
3456   198A DA            push d
3457   198B 29 3E 31      mov b, [__cnarr]
3458   198E D7            push a
3459   198F 74            mov d, b
3460   1990 DA            push d
3461   1991 29 94 31      mov b, [__pos] ; pos
3462   1994 E7            pop d
3463   1995 10 02 00      mov a, 2
3464   1998 AC            mul a, b
3465   1999 5A            add d, b
3466   199A 2A            mov b, [d]
3467   199B E4            pop a
3468   199C D7            push a
3469   199D 11            mov a, b
3470   199E 26 64 00      mov b, 100
3471   19A1 60            sub a, b
3472   19A2 27            mov b, a
3473   19A3 E4            pop a
3474   19A4 E7            pop d
3475   19A5 FD 43         mov [d], b
3476   19A7 0A AA 19      jmp _if57_exit
3477   19AA             _if57_exit:
3478   19AA             _for56_update:
3479   19AA 29 94 31      mov b, [__pos] ; pos
3480   19AD D7            push a
3481   19AE 11            mov a, b
3482   19AF FD 77         inc b
3483   19B1 FD 42 94 31   mov [__pos], b
3484   19B5 27            mov b, a
3485   19B6 E4            pop a
3486   19B7 0A EA 18      jmp _for56_cond
3487   19BA             _for56_exit:
3488   19BA F9            leave
3489   19BB 09            ret
3490   19BC             
3491   19BC             protominus:
3492   19BC D2            push bp
3493   19BD 9B            mov bp, sp
3494   19BE 26 00 00      mov b, 0
3495   19C1 FD 42 96 31   mov [__carry], b
3496   19C5             _for58_init:
3497   19C5 26 00 00      mov b, 0
3498   19C8 FD 42 94 31   mov [__pos], b
3499   19CC             _for58_cond:
3500   19CC 29 94 31      mov b, [__pos] ; pos
3501   19CF D7            push a
3502   19D0 11            mov a, b
3503   19D1 26 0C 00      mov b, 12
3504   19D4 B0            cmp a, b
3505   19D5 0E            lodflgs
3506   19D6 87 02         and al, %00000010 ; <
3507   19D8 FD 9C         shr al
3508   19DA 22 00         mov ah, 0
3509   19DC 27            mov b, a
3510   19DD E4            pop a
3511   19DE C0 00 00      cmp b, 0
3512   19E1 C6 B9 1A      je _for58_exit
3513   19E4             _for58_block:
3514   19E4 26 00 00      mov b, 0
3515   19E7 FD 42 98 31   mov [__nextcarry], b
3516   19EB             _if59_cond:
3517   19EB 29 F0 30      mov b, [__bnarr]
3518   19EE D7            push a
3519   19EF 74            mov d, b
3520   19F0 DA            push d
3521   19F1 29 94 31      mov b, [__pos] ; pos
3522   19F4 E7            pop d
3523   19F5 10 02 00      mov a, 2
3524   19F8 AC            mul a, b
3525   19F9 5A            add d, b
3526   19FA 2A            mov b, [d]
3527   19FB E4            pop a
3528   19FC D7            push a
3529   19FD 11            mov a, b
3530   19FE 29 96 31      mov b, [__carry] ; carry
3531   1A01 54            add a, b
3532   1A02 27            mov b, a
3533   1A03 E4            pop a
3534   1A04 D7            push a
3535   1A05 11            mov a, b
3536   1A06 29 D6 30      mov b, [__anarr]
3537   1A09 D7            push a
3538   1A0A 74            mov d, b
3539   1A0B DA            push d
3540   1A0C 29 94 31      mov b, [__pos] ; pos
3541   1A0F E7            pop d
3542   1A10 10 02 00      mov a, 2
3543   1A13 AC            mul a, b
3544   1A14 5A            add d, b
3545   1A15 2A            mov b, [d]
3546   1A16 E4            pop a
3547   1A17 B0            cmp a, b
3548   1A18 0E            lodflgs
3549   1A19 87 03         and al, %00000011
3550   1A1B B9 00         cmp al, 0
3551   1A1D 0E            lodflgs
3552   1A1E 22 00         mov ah, 0
3553   1A20 27            mov b, a
3554   1A21 E4            pop a
3555   1A22 C0 00 00      cmp b, 0
3556   1A25 C6 5F 1A      je _if59_exit
3557   1A28             _if59_true:
3558   1A28 29 D6 30      mov b, [__anarr]
3559   1A2B D7            push a
3560   1A2C 74            mov d, b
3561   1A2D DA            push d
3562   1A2E 29 94 31      mov b, [__pos] ; pos
3563   1A31 E7            pop d
3564   1A32 10 02 00      mov a, 2
3565   1A35 AC            mul a, b
3566   1A36 5A            add d, b
3567   1A37 E4            pop a
3568   1A38 DA            push d
3569   1A39 29 D6 30      mov b, [__anarr]
3570   1A3C D7            push a
3571   1A3D 74            mov d, b
3572   1A3E DA            push d
3573   1A3F 29 94 31      mov b, [__pos] ; pos
3574   1A42 E7            pop d
3575   1A43 10 02 00      mov a, 2
3576   1A46 AC            mul a, b
3577   1A47 5A            add d, b
3578   1A48 2A            mov b, [d]
3579   1A49 E4            pop a
3580   1A4A D7            push a
3581   1A4B 11            mov a, b
3582   1A4C 26 64 00      mov b, 100
3583   1A4F 54            add a, b
3584   1A50 27            mov b, a
3585   1A51 E4            pop a
3586   1A52 E7            pop d
3587   1A53 FD 43         mov [d], b
3588   1A55 26 01 00      mov b, 1
3589   1A58 FD 42 98 31   mov [__nextcarry], b
3590   1A5C 0A 5F 1A      jmp _if59_exit
3591   1A5F             _if59_exit:
3592   1A5F 29 3E 31      mov b, [__cnarr]
3593   1A62 D7            push a
3594   1A63 74            mov d, b
3595   1A64 DA            push d
3596   1A65 29 94 31      mov b, [__pos] ; pos
3597   1A68 E7            pop d
3598   1A69 10 02 00      mov a, 2
3599   1A6C AC            mul a, b
3600   1A6D 5A            add d, b
3601   1A6E E4            pop a
3602   1A6F DA            push d
3603   1A70 29 D6 30      mov b, [__anarr]
3604   1A73 D7            push a
3605   1A74 74            mov d, b
3606   1A75 DA            push d
3607   1A76 29 94 31      mov b, [__pos] ; pos
3608   1A79 E7            pop d
3609   1A7A 10 02 00      mov a, 2
3610   1A7D AC            mul a, b
3611   1A7E 5A            add d, b
3612   1A7F 2A            mov b, [d]
3613   1A80 E4            pop a
3614   1A81 D7            push a
3615   1A82 11            mov a, b
3616   1A83 29 F0 30      mov b, [__bnarr]
3617   1A86 D7            push a
3618   1A87 74            mov d, b
3619   1A88 DA            push d
3620   1A89 29 94 31      mov b, [__pos] ; pos
3621   1A8C E7            pop d
3622   1A8D 10 02 00      mov a, 2
3623   1A90 AC            mul a, b
3624   1A91 5A            add d, b
3625   1A92 2A            mov b, [d]
3626   1A93 E4            pop a
3627   1A94 60            sub a, b
3628   1A95 27            mov b, a
3629   1A96 E4            pop a
3630   1A97 D7            push a
3631   1A98 11            mov a, b
3632   1A99 29 96 31      mov b, [__carry] ; carry
3633   1A9C 60            sub a, b
3634   1A9D 27            mov b, a
3635   1A9E E4            pop a
3636   1A9F E7            pop d
3637   1AA0 FD 43         mov [d], b
3638   1AA2 29 98 31      mov b, [__nextcarry] ; nextcarry
3639   1AA5 FD 42 96 31   mov [__carry], b
3640   1AA9             _for58_update:
3641   1AA9 29 94 31      mov b, [__pos] ; pos
3642   1AAC D7            push a
3643   1AAD 11            mov a, b
3644   1AAE FD 77         inc b
3645   1AB0 FD 42 94 31   mov [__pos], b
3646   1AB4 27            mov b, a
3647   1AB5 E4            pop a
3648   1AB6 0A CC 19      jmp _for58_cond
3649   1AB9             _for58_exit:
3650   1AB9             _if60_cond:
3651   1AB9 29 96 31      mov b, [__carry] ; carry
3652   1ABC D7            push a
3653   1ABD 11            mov a, b
3654   1ABE 26 01 00      mov b, 1
3655   1AC1 B0            cmp a, b
3656   1AC2 0E            lodflgs
3657   1AC3 87 01         and al, %00000001 ; ==
3658   1AC5 22 00         mov ah, 0
3659   1AC7 27            mov b, a
3660   1AC8 E4            pop a
3661   1AC9 C0 00 00      cmp b, 0
3662   1ACC C6 E0 1A      je _if60_exit
3663   1ACF             _if60_true:
3664   1ACF 26 01 00      mov b, 1
3665   1AD2 FD 42 90 31   mov [__csign], b
3666   1AD6 26 00 00      mov b, 0
3667   1AD9 FD 42 96 31   mov [__carry], b
3668   1ADD 0A E0 1A      jmp _if60_exit
3669   1AE0             _if60_exit:
3670   1AE0 F9            leave
3671   1AE1 09            ret
3672   1AE2             
3673   1AE2             pminus:
3674   1AE2 D2            push bp
3675   1AE3 9B            mov bp, sp
3676   1AE4             _for61_init:
3677   1AE4 26 00 00      mov b, 0
3678   1AE7 FD 42 C4 31   mov [__divi], b
3679   1AEB             _for61_cond:
3680   1AEB 29 C4 31      mov b, [__divi] ; divi
3681   1AEE D7            push a
3682   1AEF 11            mov a, b
3683   1AF0 26 0C 00      mov b, 12
3684   1AF3 B0            cmp a, b
3685   1AF4 0E            lodflgs
3686   1AF5 87 02         and al, %00000010 ; <
3687   1AF7 FD 9C         shr al
3688   1AF9 22 00         mov ah, 0
3689   1AFB 27            mov b, a
3690   1AFC E4            pop a
3691   1AFD C0 00 00      cmp b, 0
3692   1B00 C6 2A 1B      je _for61_exit
3693   1B03             _for61_block:
3694   1B03 29 3E 31      mov b, [__cnarr]
3695   1B06 D7            push a
3696   1B07 74            mov d, b
3697   1B08 DA            push d
3698   1B09 29 C4 31      mov b, [__divi] ; divi
3699   1B0C E7            pop d
3700   1B0D 10 02 00      mov a, 2
3701   1B10 AC            mul a, b
3702   1B11 5A            add d, b
3703   1B12 E4            pop a
3704   1B13 DA            push d
3705   1B14 26 00 00      mov b, 0
3706   1B17 E7            pop d
3707   1B18 FD 43         mov [d], b
3708   1B1A             _for61_update:
3709   1B1A 29 C4 31      mov b, [__divi] ; divi
3710   1B1D D7            push a
3711   1B1E 11            mov a, b
3712   1B1F FD 77         inc b
3713   1B21 FD 42 C4 31   mov [__divi], b
3714   1B25 27            mov b, a
3715   1B26 E4            pop a
3716   1B27 0A EB 1A      jmp _for61_cond
3717   1B2A             _for61_exit:
3718   1B2A 07 8A 17      call checkabsabsize
3719   1B2D             _if62_cond:
3720   1B2D 29 8C 31      mov b, [__asign] ; asign
3721   1B30 D7            push a
3722   1B31 11            mov a, b
3723   1B32 29 8E 31      mov b, [__bsign] ; bsign
3724   1B35 B0            cmp a, b
3725   1B36 0E            lodflgs
3726   1B37 87 01         and al, %00000001 ; ==
3727   1B39 22 00         mov ah, 0
3728   1B3B 27            mov b, a
3729   1B3C E4            pop a
3730   1B3D DB            push al
3731   1B3E C0 00 00      cmp b, 0
3732   1B41 0E            lodflgs
3733   1B42 29 9E 31      mov b, [__aeqb] ; aeqb
3734   1B45 D7            push a
3735   1B46 11            mov a, b
3736   1B47 26 01 00      mov b, 1
3737   1B4A B0            cmp a, b
3738   1B4B 0E            lodflgs
3739   1B4C 87 01         and al, %00000001 ; ==
3740   1B4E 22 00         mov ah, 0
3741   1B50 27            mov b, a
3742   1B51 E4            pop a
3743   1B52 DB            push al
3744   1B53 C0 00 00      cmp b, 0
3745   1B56 0E            lodflgs
3746   1B57 EA            pop bl ; matches previous 'pop al'
3747   1B58 8C            or al, bl
3748   1B59 8F 01         xor al, %00000001
3749   1B5B 2F            mov bl, al
3750   1B5C A7 00         mov bh, 0
3751   1B5E E8            pop al
3752   1B5F C0 00 00      cmp b, 0
3753   1B62 C6 B5 1B      je _if62_exit
3754   1B65             _if62_true:
3755   1B65 26 00 00      mov b, 0
3756   1B68 FD 42 90 31   mov [__csign], b
3757   1B6C             _for63_init:
3758   1B6C 26 01 00      mov b, 1
3759   1B6F FD 42 94 31   mov [__pos], b
3760   1B73             _for63_cond:
3761   1B73 29 94 31      mov b, [__pos] ; pos
3762   1B76 D7            push a
3763   1B77 11            mov a, b
3764   1B78 26 0C 00      mov b, 12
3765   1B7B B0            cmp a, b
3766   1B7C 0E            lodflgs
3767   1B7D 87 02         and al, %00000010 ; <
3768   1B7F FD 9C         shr al
3769   1B81 22 00         mov ah, 0
3770   1B83 27            mov b, a
3771   1B84 E4            pop a
3772   1B85 C0 00 00      cmp b, 0
3773   1B88 C6 B2 1B      je _for63_exit
3774   1B8B             _for63_block:
3775   1B8B 29 3E 31      mov b, [__cnarr]
3776   1B8E D7            push a
3777   1B8F 74            mov d, b
3778   1B90 DA            push d
3779   1B91 29 94 31      mov b, [__pos] ; pos
3780   1B94 E7            pop d
3781   1B95 10 02 00      mov a, 2
3782   1B98 AC            mul a, b
3783   1B99 5A            add d, b
3784   1B9A E4            pop a
3785   1B9B DA            push d
3786   1B9C 26 00 00      mov b, 0
3787   1B9F E7            pop d
3788   1BA0 FD 43         mov [d], b
3789   1BA2             _for63_update:
3790   1BA2 29 94 31      mov b, [__pos] ; pos
3791   1BA5 D7            push a
3792   1BA6 11            mov a, b
3793   1BA7 FD 77         inc b
3794   1BA9 FD 42 94 31   mov [__pos], b
3795   1BAD 27            mov b, a
3796   1BAE E4            pop a
3797   1BAF 0A 73 1B      jmp _for63_cond
3798   1BB2             _for63_exit:
3799   1BB2 0A B5 1B      jmp _if62_exit
3800   1BB5             _if62_exit:
3801   1BB5             _if64_cond:
3802   1BB5 29 8C 31      mov b, [__asign] ; asign
3803   1BB8 D7            push a
3804   1BB9 11            mov a, b
3805   1BBA 26 00 00      mov b, 0
3806   1BBD B0            cmp a, b
3807   1BBE 0E            lodflgs
3808   1BBF 87 01         and al, %00000001 ; ==
3809   1BC1 22 00         mov ah, 0
3810   1BC3 27            mov b, a
3811   1BC4 E4            pop a
3812   1BC5 DB            push al
3813   1BC6 C0 00 00      cmp b, 0
3814   1BC9 0E            lodflgs
3815   1BCA 29 8E 31      mov b, [__bsign] ; bsign
3816   1BCD D7            push a
3817   1BCE 11            mov a, b
3818   1BCF 26 00 00      mov b, 0
3819   1BD2 B0            cmp a, b
3820   1BD3 0E            lodflgs
3821   1BD4 87 01         and al, %00000001 ; ==
3822   1BD6 22 00         mov ah, 0
3823   1BD8 27            mov b, a
3824   1BD9 E4            pop a
3825   1BDA DB            push al
3826   1BDB C0 00 00      cmp b, 0
3827   1BDE 0E            lodflgs
3828   1BDF EA            pop bl ; matches previous 'pop al'
3829   1BE0 8C            or al, bl
3830   1BE1 8F 01         xor al, %00000001
3831   1BE3 2F            mov bl, al
3832   1BE4 A7 00         mov bh, 0
3833   1BE6 E8            pop al
3834   1BE7 DB            push al
3835   1BE8 C0 00 00      cmp b, 0
3836   1BEB 0E            lodflgs
3837   1BEC 29 A2 31      mov b, [__ageb] ; ageb
3838   1BEF D7            push a
3839   1BF0 11            mov a, b
3840   1BF1 26 01 00      mov b, 1
3841   1BF4 B0            cmp a, b
3842   1BF5 0E            lodflgs
3843   1BF6 87 01         and al, %00000001 ; ==
3844   1BF8 22 00         mov ah, 0
3845   1BFA 27            mov b, a
3846   1BFB E4            pop a
3847   1BFC DB            push al
3848   1BFD C0 00 00      cmp b, 0
3849   1C00 0E            lodflgs
3850   1C01 EA            pop bl ; matches previous 'pop al'
3851   1C02 8C            or al, bl
3852   1C03 8F 01         xor al, %00000001
3853   1C05 2F            mov bl, al
3854   1C06 A7 00         mov bh, 0
3855   1C08 E8            pop al
3856   1C09 C0 00 00      cmp b, 0
3857   1C0C C6 1C 1C      je _if64_exit
3858   1C0F             _if64_true:
3859   1C0F 26 00 00      mov b, 0
3860   1C12 FD 42 90 31   mov [__csign], b
3861   1C16 07 BC 19      call protominus
3862   1C19 0A 1C 1C      jmp _if64_exit
3863   1C1C             _if64_exit:
3864   1C1C             _if65_cond:
3865   1C1C 29 8C 31      mov b, [__asign] ; asign
3866   1C1F D7            push a
3867   1C20 11            mov a, b
3868   1C21 26 00 00      mov b, 0
3869   1C24 B0            cmp a, b
3870   1C25 0E            lodflgs
3871   1C26 87 01         and al, %00000001 ; ==
3872   1C28 22 00         mov ah, 0
3873   1C2A 27            mov b, a
3874   1C2B E4            pop a
3875   1C2C DB            push al
3876   1C2D C0 00 00      cmp b, 0
3877   1C30 0E            lodflgs
3878   1C31 29 8E 31      mov b, [__bsign] ; bsign
3879   1C34 D7            push a
3880   1C35 11            mov a, b
3881   1C36 26 00 00      mov b, 0
3882   1C39 B0            cmp a, b
3883   1C3A 0E            lodflgs
3884   1C3B 87 01         and al, %00000001 ; ==
3885   1C3D 22 00         mov ah, 0
3886   1C3F 27            mov b, a
3887   1C40 E4            pop a
3888   1C41 DB            push al
3889   1C42 C0 00 00      cmp b, 0
3890   1C45 0E            lodflgs
3891   1C46 EA            pop bl ; matches previous 'pop al'
3892   1C47 8C            or al, bl
3893   1C48 8F 01         xor al, %00000001
3894   1C4A 2F            mov bl, al
3895   1C4B A7 00         mov bh, 0
3896   1C4D E8            pop al
3897   1C4E DB            push al
3898   1C4F C0 00 00      cmp b, 0
3899   1C52 0E            lodflgs
3900   1C53 29 9C 31      mov b, [__bgta] ; bgta
3901   1C56 D7            push a
3902   1C57 11            mov a, b
3903   1C58 26 01 00      mov b, 1
3904   1C5B B0            cmp a, b
3905   1C5C 0E            lodflgs
3906   1C5D 87 01         and al, %00000001 ; ==
3907   1C5F 22 00         mov ah, 0
3908   1C61 27            mov b, a
3909   1C62 E4            pop a
3910   1C63 DB            push al
3911   1C64 C0 00 00      cmp b, 0
3912   1C67 0E            lodflgs
3913   1C68 EA            pop bl ; matches previous 'pop al'
3914   1C69 8C            or al, bl
3915   1C6A 8F 01         xor al, %00000001
3916   1C6C 2F            mov bl, al
3917   1C6D A7 00         mov bh, 0
3918   1C6F E8            pop al
3919   1C70 C0 00 00      cmp b, 0
3920   1C73 C6 86 1C      je _if65_exit
3921   1C76             _if65_true:
3922   1C76 26 01 00      mov b, 1
3923   1C79 FD 42 90 31   mov [__csign], b
3924   1C7D 07 A6 16      call swapab
3925   1C80 07 BC 19      call protominus
3926   1C83 0A 86 1C      jmp _if65_exit
3927   1C86             _if65_exit:
3928   1C86             _if66_cond:
3929   1C86 29 8C 31      mov b, [__asign] ; asign
3930   1C89 D7            push a
3931   1C8A 11            mov a, b
3932   1C8B 26 01 00      mov b, 1
3933   1C8E B0            cmp a, b
3934   1C8F 0E            lodflgs
3935   1C90 87 01         and al, %00000001 ; ==
3936   1C92 22 00         mov ah, 0
3937   1C94 27            mov b, a
3938   1C95 E4            pop a
3939   1C96 DB            push al
3940   1C97 C0 00 00      cmp b, 0
3941   1C9A 0E            lodflgs
3942   1C9B 29 8E 31      mov b, [__bsign] ; bsign
3943   1C9E D7            push a
3944   1C9F 11            mov a, b
3945   1CA0 26 01 00      mov b, 1
3946   1CA3 B0            cmp a, b
3947   1CA4 0E            lodflgs
3948   1CA5 87 01         and al, %00000001 ; ==
3949   1CA7 22 00         mov ah, 0
3950   1CA9 27            mov b, a
3951   1CAA E4            pop a
3952   1CAB DB            push al
3953   1CAC C0 00 00      cmp b, 0
3954   1CAF 0E            lodflgs
3955   1CB0 EA            pop bl ; matches previous 'pop al'
3956   1CB1 8C            or al, bl
3957   1CB2 8F 01         xor al, %00000001
3958   1CB4 2F            mov bl, al
3959   1CB5 A7 00         mov bh, 0
3960   1CB7 E8            pop al
3961   1CB8 DB            push al
3962   1CB9 C0 00 00      cmp b, 0
3963   1CBC 0E            lodflgs
3964   1CBD 29 A2 31      mov b, [__ageb] ; ageb
3965   1CC0 D7            push a
3966   1CC1 11            mov a, b
3967   1CC2 26 01 00      mov b, 1
3968   1CC5 B0            cmp a, b
3969   1CC6 0E            lodflgs
3970   1CC7 87 01         and al, %00000001 ; ==
3971   1CC9 22 00         mov ah, 0
3972   1CCB 27            mov b, a
3973   1CCC E4            pop a
3974   1CCD DB            push al
3975   1CCE C0 00 00      cmp b, 0
3976   1CD1 0E            lodflgs
3977   1CD2 EA            pop bl ; matches previous 'pop al'
3978   1CD3 8C            or al, bl
3979   1CD4 8F 01         xor al, %00000001
3980   1CD6 2F            mov bl, al
3981   1CD7 A7 00         mov bh, 0
3982   1CD9 E8            pop al
3983   1CDA C0 00 00      cmp b, 0
3984   1CDD C6 ED 1C      je _if66_exit
3985   1CE0             _if66_true:
3986   1CE0 26 01 00      mov b, 1
3987   1CE3 FD 42 90 31   mov [__csign], b
3988   1CE7 07 BC 19      call protominus
3989   1CEA 0A ED 1C      jmp _if66_exit
3990   1CED             _if66_exit:
3991   1CED             _if67_cond:
3992   1CED 29 8C 31      mov b, [__asign] ; asign
3993   1CF0 D7            push a
3994   1CF1 11            mov a, b
3995   1CF2 26 01 00      mov b, 1
3996   1CF5 B0            cmp a, b
3997   1CF6 0E            lodflgs
3998   1CF7 87 01         and al, %00000001 ; ==
3999   1CF9 22 00         mov ah, 0
4000   1CFB 27            mov b, a
4001   1CFC E4            pop a
4002   1CFD DB            push al
4003   1CFE C0 00 00      cmp b, 0
4004   1D01 0E            lodflgs
4005   1D02 29 8E 31      mov b, [__bsign] ; bsign
4006   1D05 D7            push a
4007   1D06 11            mov a, b
4008   1D07 26 01 00      mov b, 1
4009   1D0A B0            cmp a, b
4010   1D0B 0E            lodflgs
4011   1D0C 87 01         and al, %00000001 ; ==
4012   1D0E 22 00         mov ah, 0
4013   1D10 27            mov b, a
4014   1D11 E4            pop a
4015   1D12 DB            push al
4016   1D13 C0 00 00      cmp b, 0
4017   1D16 0E            lodflgs
4018   1D17 EA            pop bl ; matches previous 'pop al'
4019   1D18 8C            or al, bl
4020   1D19 8F 01         xor al, %00000001
4021   1D1B 2F            mov bl, al
4022   1D1C A7 00         mov bh, 0
4023   1D1E E8            pop al
4024   1D1F DB            push al
4025   1D20 C0 00 00      cmp b, 0
4026   1D23 0E            lodflgs
4027   1D24 29 9C 31      mov b, [__bgta] ; bgta
4028   1D27 D7            push a
4029   1D28 11            mov a, b
4030   1D29 26 01 00      mov b, 1
4031   1D2C B0            cmp a, b
4032   1D2D 0E            lodflgs
4033   1D2E 87 01         and al, %00000001 ; ==
4034   1D30 22 00         mov ah, 0
4035   1D32 27            mov b, a
4036   1D33 E4            pop a
4037   1D34 DB            push al
4038   1D35 C0 00 00      cmp b, 0
4039   1D38 0E            lodflgs
4040   1D39 EA            pop bl ; matches previous 'pop al'
4041   1D3A 8C            or al, bl
4042   1D3B 8F 01         xor al, %00000001
4043   1D3D 2F            mov bl, al
4044   1D3E A7 00         mov bh, 0
4045   1D40 E8            pop al
4046   1D41 C0 00 00      cmp b, 0
4047   1D44 C6 57 1D      je _if67_exit
4048   1D47             _if67_true:
4049   1D47 26 00 00      mov b, 0
4050   1D4A FD 42 90 31   mov [__csign], b
4051   1D4E 07 A6 16      call swapab
4052   1D51 07 BC 19      call protominus
4053   1D54 0A 57 1D      jmp _if67_exit
4054   1D57             _if67_exit:
4055   1D57             _if68_cond:
4056   1D57 29 8C 31      mov b, [__asign] ; asign
4057   1D5A D7            push a
4058   1D5B 11            mov a, b
4059   1D5C 26 00 00      mov b, 0
4060   1D5F B0            cmp a, b
4061   1D60 0E            lodflgs
4062   1D61 87 01         and al, %00000001 ; ==
4063   1D63 22 00         mov ah, 0
4064   1D65 27            mov b, a
4065   1D66 E4            pop a
4066   1D67 DB            push al
4067   1D68 C0 00 00      cmp b, 0
4068   1D6B 0E            lodflgs
4069   1D6C 29 8E 31      mov b, [__bsign] ; bsign
4070   1D6F D7            push a
4071   1D70 11            mov a, b
4072   1D71 26 01 00      mov b, 1
4073   1D74 B0            cmp a, b
4074   1D75 0E            lodflgs
4075   1D76 87 01         and al, %00000001 ; ==
4076   1D78 22 00         mov ah, 0
4077   1D7A 27            mov b, a
4078   1D7B E4            pop a
4079   1D7C DB            push al
4080   1D7D C0 00 00      cmp b, 0
4081   1D80 0E            lodflgs
4082   1D81 EA            pop bl ; matches previous 'pop al'
4083   1D82 8C            or al, bl
4084   1D83 8F 01         xor al, %00000001
4085   1D85 2F            mov bl, al
4086   1D86 A7 00         mov bh, 0
4087   1D88 E8            pop al
4088   1D89 C0 00 00      cmp b, 0
4089   1D8C C6 9C 1D      je _if68_exit
4090   1D8F             _if68_true:
4091   1D8F 26 00 00      mov b, 0
4092   1D92 FD 42 90 31   mov [__csign], b
4093   1D96 07 DA 18      call protoplus
4094   1D99 0A 9C 1D      jmp _if68_exit
4095   1D9C             _if68_exit:
4096   1D9C             _if69_cond:
4097   1D9C 29 8C 31      mov b, [__asign] ; asign
4098   1D9F D7            push a
4099   1DA0 11            mov a, b
4100   1DA1 26 01 00      mov b, 1
4101   1DA4 B0            cmp a, b
4102   1DA5 0E            lodflgs
4103   1DA6 87 01         and al, %00000001 ; ==
4104   1DA8 22 00         mov ah, 0
4105   1DAA 27            mov b, a
4106   1DAB E4            pop a
4107   1DAC DB            push al
4108   1DAD C0 00 00      cmp b, 0
4109   1DB0 0E            lodflgs
4110   1DB1 29 8E 31      mov b, [__bsign] ; bsign
4111   1DB4 D7            push a
4112   1DB5 11            mov a, b
4113   1DB6 26 00 00      mov b, 0
4114   1DB9 B0            cmp a, b
4115   1DBA 0E            lodflgs
4116   1DBB 87 01         and al, %00000001 ; ==
4117   1DBD 22 00         mov ah, 0
4118   1DBF 27            mov b, a
4119   1DC0 E4            pop a
4120   1DC1 DB            push al
4121   1DC2 C0 00 00      cmp b, 0
4122   1DC5 0E            lodflgs
4123   1DC6 EA            pop bl ; matches previous 'pop al'
4124   1DC7 8C            or al, bl
4125   1DC8 8F 01         xor al, %00000001
4126   1DCA 2F            mov bl, al
4127   1DCB A7 00         mov bh, 0
4128   1DCD E8            pop al
4129   1DCE C0 00 00      cmp b, 0
4130   1DD1 C6 E1 1D      je _if69_exit
4131   1DD4             _if69_true:
4132   1DD4 26 01 00      mov b, 1
4133   1DD7 FD 42 90 31   mov [__csign], b
4134   1DDB 07 DA 18      call protoplus
4135   1DDE 0A E1 1D      jmp _if69_exit
4136   1DE1             _if69_exit:
4137   1DE1 F9            leave
4138   1DE2 09            ret
4139   1DE3             
4140   1DE3             minus:
4141   1DE3 D2            push bp
4142   1DE4 9B            mov bp, sp
4143   1DE5 07 2C 14      call fixsignin
4144   1DE8 07 E2 1A      call pminus
4145   1DEB 07 A2 15      call fixcsizezero
4146   1DEE 07 51 15      call fixsignout
4147   1DF1 F9            leave
4148   1DF2 09            ret
4149   1DF3             
4150   1DF3             pplus:
4151   1DF3 D2            push bp
4152   1DF4 9B            mov bp, sp
4153   1DF5             _for70_init:
4154   1DF5 26 00 00      mov b, 0
4155   1DF8 FD 42 C4 31   mov [__divi], b
4156   1DFC             _for70_cond:
4157   1DFC 29 C4 31      mov b, [__divi] ; divi
4158   1DFF D7            push a
4159   1E00 11            mov a, b
4160   1E01 26 0C 00      mov b, 12
4161   1E04 B0            cmp a, b
4162   1E05 0E            lodflgs
4163   1E06 87 02         and al, %00000010 ; <
4164   1E08 FD 9C         shr al
4165   1E0A 22 00         mov ah, 0
4166   1E0C 27            mov b, a
4167   1E0D E4            pop a
4168   1E0E C0 00 00      cmp b, 0
4169   1E11 C6 3B 1E      je _for70_exit
4170   1E14             _for70_block:
4171   1E14 29 3E 31      mov b, [__cnarr]
4172   1E17 D7            push a
4173   1E18 74            mov d, b
4174   1E19 DA            push d
4175   1E1A 29 C4 31      mov b, [__divi] ; divi
4176   1E1D E7            pop d
4177   1E1E 10 02 00      mov a, 2
4178   1E21 AC            mul a, b
4179   1E22 5A            add d, b
4180   1E23 E4            pop a
4181   1E24 DA            push d
4182   1E25 26 00 00      mov b, 0
4183   1E28 E7            pop d
4184   1E29 FD 43         mov [d], b
4185   1E2B             _for70_update:
4186   1E2B 29 C4 31      mov b, [__divi] ; divi
4187   1E2E D7            push a
4188   1E2F 11            mov a, b
4189   1E30 FD 77         inc b
4190   1E32 FD 42 C4 31   mov [__divi], b
4191   1E36 27            mov b, a
4192   1E37 E4            pop a
4193   1E38 0A FC 1D      jmp _for70_cond
4194   1E3B             _for70_exit:
4195   1E3B 07 8A 17      call checkabsabsize
4196   1E3E             _if71_cond:
4197   1E3E 29 8C 31      mov b, [__asign] ; asign
4198   1E41 D7            push a
4199   1E42 11            mov a, b
4200   1E43 26 00 00      mov b, 0
4201   1E46 B0            cmp a, b
4202   1E47 0E            lodflgs
4203   1E48 87 01         and al, %00000001 ; ==
4204   1E4A 22 00         mov ah, 0
4205   1E4C 27            mov b, a
4206   1E4D E4            pop a
4207   1E4E DB            push al
4208   1E4F C0 00 00      cmp b, 0
4209   1E52 0E            lodflgs
4210   1E53 29 8E 31      mov b, [__bsign] ; bsign
4211   1E56 D7            push a
4212   1E57 11            mov a, b
4213   1E58 26 01 00      mov b, 1
4214   1E5B B0            cmp a, b
4215   1E5C 0E            lodflgs
4216   1E5D 87 01         and al, %00000001 ; ==
4217   1E5F 22 00         mov ah, 0
4218   1E61 27            mov b, a
4219   1E62 E4            pop a
4220   1E63 DB            push al
4221   1E64 C0 00 00      cmp b, 0
4222   1E67 0E            lodflgs
4223   1E68 EA            pop bl ; matches previous 'pop al'
4224   1E69 8C            or al, bl
4225   1E6A 8F 01         xor al, %00000001
4226   1E6C 2F            mov bl, al
4227   1E6D A7 00         mov bh, 0
4228   1E6F E8            pop al
4229   1E70 DB            push al
4230   1E71 C0 00 00      cmp b, 0
4231   1E74 0E            lodflgs
4232   1E75 29 9E 31      mov b, [__aeqb] ; aeqb
4233   1E78 D7            push a
4234   1E79 11            mov a, b
4235   1E7A 26 01 00      mov b, 1
4236   1E7D B0            cmp a, b
4237   1E7E 0E            lodflgs
4238   1E7F 87 01         and al, %00000001 ; ==
4239   1E81 22 00         mov ah, 0
4240   1E83 27            mov b, a
4241   1E84 E4            pop a
4242   1E85 DB            push al
4243   1E86 C0 00 00      cmp b, 0
4244   1E89 0E            lodflgs
4245   1E8A EA            pop bl ; matches previous 'pop al'
4246   1E8B 8C            or al, bl
4247   1E8C 8F 01         xor al, %00000001
4248   1E8E 2F            mov bl, al
4249   1E8F A7 00         mov bh, 0
4250   1E91 E8            pop al
4251   1E92 C0 00 00      cmp b, 0
4252   1E95 C6 F8 1E      je _if71_exit
4253   1E98             _if71_true:
4254   1E98 26 00 00      mov b, 0
4255   1E9B FD 42 8C 31   mov [__asign], b
4256   1E9F 26 00 00      mov b, 0
4257   1EA2 FD 42 8E 31   mov [__bsign], b
4258   1EA6 26 00 00      mov b, 0
4259   1EA9 FD 42 90 31   mov [__csign], b
4260   1EAD             _for72_init:
4261   1EAD 26 01 00      mov b, 1
4262   1EB0 FD 42 94 31   mov [__pos], b
4263   1EB4             _for72_cond:
4264   1EB4 29 94 31      mov b, [__pos] ; pos
4265   1EB7 D7            push a
4266   1EB8 11            mov a, b
4267   1EB9 26 0C 00      mov b, 12
4268   1EBC B0            cmp a, b
4269   1EBD 0E            lodflgs
4270   1EBE 87 02         and al, %00000010 ; <
4271   1EC0 FD 9C         shr al
4272   1EC2 22 00         mov ah, 0
4273   1EC4 27            mov b, a
4274   1EC5 E4            pop a
4275   1EC6 C0 00 00      cmp b, 0
4276   1EC9 C6 F3 1E      je _for72_exit
4277   1ECC             _for72_block:
4278   1ECC 29 3E 31      mov b, [__cnarr]
4279   1ECF D7            push a
4280   1ED0 74            mov d, b
4281   1ED1 DA            push d
4282   1ED2 29 94 31      mov b, [__pos] ; pos
4283   1ED5 E7            pop d
4284   1ED6 10 02 00      mov a, 2
4285   1ED9 AC            mul a, b
4286   1EDA 5A            add d, b
4287   1EDB E4            pop a
4288   1EDC DA            push d
4289   1EDD 26 00 00      mov b, 0
4290   1EE0 E7            pop d
4291   1EE1 FD 43         mov [d], b
4292   1EE3             _for72_update:
4293   1EE3 29 94 31      mov b, [__pos] ; pos
4294   1EE6 D7            push a
4295   1EE7 11            mov a, b
4296   1EE8 FD 77         inc b
4297   1EEA FD 42 94 31   mov [__pos], b
4298   1EEE 27            mov b, a
4299   1EEF E4            pop a
4300   1EF0 0A B4 1E      jmp _for72_cond
4301   1EF3             _for72_exit:
4302   1EF3 F9            leave
4303   1EF4 09            ret
4304   1EF5 0A F8 1E      jmp _if71_exit
4305   1EF8             _if71_exit:
4306   1EF8             _if73_cond:
4307   1EF8 29 8C 31      mov b, [__asign] ; asign
4308   1EFB D7            push a
4309   1EFC 11            mov a, b
4310   1EFD 26 01 00      mov b, 1
4311   1F00 B0            cmp a, b
4312   1F01 0E            lodflgs
4313   1F02 87 01         and al, %00000001 ; ==
4314   1F04 22 00         mov ah, 0
4315   1F06 27            mov b, a
4316   1F07 E4            pop a
4317   1F08 DB            push al
4318   1F09 C0 00 00      cmp b, 0
4319   1F0C 0E            lodflgs
4320   1F0D 29 8E 31      mov b, [__bsign] ; bsign
4321   1F10 D7            push a
4322   1F11 11            mov a, b
4323   1F12 26 00 00      mov b, 0
4324   1F15 B0            cmp a, b
4325   1F16 0E            lodflgs
4326   1F17 87 01         and al, %00000001 ; ==
4327   1F19 22 00         mov ah, 0
4328   1F1B 27            mov b, a
4329   1F1C E4            pop a
4330   1F1D DB            push al
4331   1F1E C0 00 00      cmp b, 0
4332   1F21 0E            lodflgs
4333   1F22 EA            pop bl ; matches previous 'pop al'
4334   1F23 8C            or al, bl
4335   1F24 8F 01         xor al, %00000001
4336   1F26 2F            mov bl, al
4337   1F27 A7 00         mov bh, 0
4338   1F29 E8            pop al
4339   1F2A DB            push al
4340   1F2B C0 00 00      cmp b, 0
4341   1F2E 0E            lodflgs
4342   1F2F 29 9E 31      mov b, [__aeqb] ; aeqb
4343   1F32 D7            push a
4344   1F33 11            mov a, b
4345   1F34 26 01 00      mov b, 1
4346   1F37 B0            cmp a, b
4347   1F38 0E            lodflgs
4348   1F39 87 01         and al, %00000001 ; ==
4349   1F3B 22 00         mov ah, 0
4350   1F3D 27            mov b, a
4351   1F3E E4            pop a
4352   1F3F DB            push al
4353   1F40 C0 00 00      cmp b, 0
4354   1F43 0E            lodflgs
4355   1F44 EA            pop bl ; matches previous 'pop al'
4356   1F45 8C            or al, bl
4357   1F46 8F 01         xor al, %00000001
4358   1F48 2F            mov bl, al
4359   1F49 A7 00         mov bh, 0
4360   1F4B E8            pop al
4361   1F4C C0 00 00      cmp b, 0
4362   1F4F C6 B2 1F      je _if73_exit
4363   1F52             _if73_true:
4364   1F52 26 00 00      mov b, 0
4365   1F55 FD 42 8C 31   mov [__asign], b
4366   1F59 26 00 00      mov b, 0
4367   1F5C FD 42 8E 31   mov [__bsign], b
4368   1F60 26 00 00      mov b, 0
4369   1F63 FD 42 90 31   mov [__csign], b
4370   1F67             _for74_init:
4371   1F67 26 01 00      mov b, 1
4372   1F6A FD 42 94 31   mov [__pos], b
4373   1F6E             _for74_cond:
4374   1F6E 29 94 31      mov b, [__pos] ; pos
4375   1F71 D7            push a
4376   1F72 11            mov a, b
4377   1F73 26 0C 00      mov b, 12
4378   1F76 B0            cmp a, b
4379   1F77 0E            lodflgs
4380   1F78 87 02         and al, %00000010 ; <
4381   1F7A FD 9C         shr al
4382   1F7C 22 00         mov ah, 0
4383   1F7E 27            mov b, a
4384   1F7F E4            pop a
4385   1F80 C0 00 00      cmp b, 0
4386   1F83 C6 AD 1F      je _for74_exit
4387   1F86             _for74_block:
4388   1F86 29 3E 31      mov b, [__cnarr]
4389   1F89 D7            push a
4390   1F8A 74            mov d, b
4391   1F8B DA            push d
4392   1F8C 29 94 31      mov b, [__pos] ; pos
4393   1F8F E7            pop d
4394   1F90 10 02 00      mov a, 2
4395   1F93 AC            mul a, b
4396   1F94 5A            add d, b
4397   1F95 E4            pop a
4398   1F96 DA            push d
4399   1F97 26 00 00      mov b, 0
4400   1F9A E7            pop d
4401   1F9B FD 43         mov [d], b
4402   1F9D             _for74_update:
4403   1F9D 29 94 31      mov b, [__pos] ; pos
4404   1FA0 D7            push a
4405   1FA1 11            mov a, b
4406   1FA2 FD 77         inc b
4407   1FA4 FD 42 94 31   mov [__pos], b
4408   1FA8 27            mov b, a
4409   1FA9 E4            pop a
4410   1FAA 0A 6E 1F      jmp _for74_cond
4411   1FAD             _for74_exit:
4412   1FAD F9            leave
4413   1FAE 09            ret
4414   1FAF 0A B2 1F      jmp _if73_exit
4415   1FB2             _if73_exit:
4416   1FB2             _if75_cond:
4417   1FB2 29 8C 31      mov b, [__asign] ; asign
4418   1FB5 D7            push a
4419   1FB6 11            mov a, b
4420   1FB7 26 00 00      mov b, 0
4421   1FBA B0            cmp a, b
4422   1FBB 0E            lodflgs
4423   1FBC 87 01         and al, %00000001 ; ==
4424   1FBE 22 00         mov ah, 0
4425   1FC0 27            mov b, a
4426   1FC1 E4            pop a
4427   1FC2 DB            push al
4428   1FC3 C0 00 00      cmp b, 0
4429   1FC6 0E            lodflgs
4430   1FC7 29 8E 31      mov b, [__bsign] ; bsign
4431   1FCA D7            push a
4432   1FCB 11            mov a, b
4433   1FCC 26 00 00      mov b, 0
4434   1FCF B0            cmp a, b
4435   1FD0 0E            lodflgs
4436   1FD1 87 01         and al, %00000001 ; ==
4437   1FD3 22 00         mov ah, 0
4438   1FD5 27            mov b, a
4439   1FD6 E4            pop a
4440   1FD7 DB            push al
4441   1FD8 C0 00 00      cmp b, 0
4442   1FDB 0E            lodflgs
4443   1FDC EA            pop bl ; matches previous 'pop al'
4444   1FDD 8C            or al, bl
4445   1FDE 8F 01         xor al, %00000001
4446   1FE0 2F            mov bl, al
4447   1FE1 A7 00         mov bh, 0
4448   1FE3 E8            pop al
4449   1FE4 C0 00 00      cmp b, 0
4450   1FE7 C6 07 20      je _if75_exit
4451   1FEA             _if75_true:
4452   1FEA 26 00 00      mov b, 0
4453   1FED FD 42 8C 31   mov [__asign], b
4454   1FF1 26 00 00      mov b, 0
4455   1FF4 FD 42 8E 31   mov [__bsign], b
4456   1FF8 26 00 00      mov b, 0
4457   1FFB FD 42 90 31   mov [__csign], b
4458   1FFF 07 DA 18      call protoplus
4459   2002 F9            leave
4460   2003 09            ret
4461   2004 0A 07 20      jmp _if75_exit
4462   2007             _if75_exit:
4463   2007             _if76_cond:
4464   2007 29 8C 31      mov b, [__asign] ; asign
4465   200A D7            push a
4466   200B 11            mov a, b
4467   200C 26 01 00      mov b, 1
4468   200F B0            cmp a, b
4469   2010 0E            lodflgs
4470   2011 87 01         and al, %00000001 ; ==
4471   2013 22 00         mov ah, 0
4472   2015 27            mov b, a
4473   2016 E4            pop a
4474   2017 DB            push al
4475   2018 C0 00 00      cmp b, 0
4476   201B 0E            lodflgs
4477   201C 29 8E 31      mov b, [__bsign] ; bsign
4478   201F D7            push a
4479   2020 11            mov a, b
4480   2021 26 01 00      mov b, 1
4481   2024 B0            cmp a, b
4482   2025 0E            lodflgs
4483   2026 87 01         and al, %00000001 ; ==
4484   2028 22 00         mov ah, 0
4485   202A 27            mov b, a
4486   202B E4            pop a
4487   202C DB            push al
4488   202D C0 00 00      cmp b, 0
4489   2030 0E            lodflgs
4490   2031 EA            pop bl ; matches previous 'pop al'
4491   2032 8C            or al, bl
4492   2033 8F 01         xor al, %00000001
4493   2035 2F            mov bl, al
4494   2036 A7 00         mov bh, 0
4495   2038 E8            pop al
4496   2039 C0 00 00      cmp b, 0
4497   203C C6 5C 20      je _if76_exit
4498   203F             _if76_true:
4499   203F 26 00 00      mov b, 0
4500   2042 FD 42 8C 31   mov [__asign], b
4501   2046 26 00 00      mov b, 0
4502   2049 FD 42 8E 31   mov [__bsign], b
4503   204D 26 01 00      mov b, 1
4504   2050 FD 42 90 31   mov [__csign], b
4505   2054 07 DA 18      call protoplus
4506   2057 F9            leave
4507   2058 09            ret
4508   2059 0A 5C 20      jmp _if76_exit
4509   205C             _if76_exit:
4510   205C             _if77_cond:
4511   205C 29 8C 31      mov b, [__asign] ; asign
4512   205F D7            push a
4513   2060 11            mov a, b
4514   2061 26 00 00      mov b, 0
4515   2064 B0            cmp a, b
4516   2065 0E            lodflgs
4517   2066 87 01         and al, %00000001 ; ==
4518   2068 22 00         mov ah, 0
4519   206A 27            mov b, a
4520   206B E4            pop a
4521   206C DB            push al
4522   206D C0 00 00      cmp b, 0
4523   2070 0E            lodflgs
4524   2071 29 8E 31      mov b, [__bsign] ; bsign
4525   2074 D7            push a
4526   2075 11            mov a, b
4527   2076 26 01 00      mov b, 1
4528   2079 B0            cmp a, b
4529   207A 0E            lodflgs
4530   207B 87 01         and al, %00000001 ; ==
4531   207D 22 00         mov ah, 0
4532   207F 27            mov b, a
4533   2080 E4            pop a
4534   2081 DB            push al
4535   2082 C0 00 00      cmp b, 0
4536   2085 0E            lodflgs
4537   2086 EA            pop bl ; matches previous 'pop al'
4538   2087 8C            or al, bl
4539   2088 8F 01         xor al, %00000001
4540   208A 2F            mov bl, al
4541   208B A7 00         mov bh, 0
4542   208D E8            pop al
4543   208E DB            push al
4544   208F C0 00 00      cmp b, 0
4545   2092 0E            lodflgs
4546   2093 29 9A 31      mov b, [__agtb] ; agtb
4547   2096 D7            push a
4548   2097 11            mov a, b
4549   2098 26 01 00      mov b, 1
4550   209B B0            cmp a, b
4551   209C 0E            lodflgs
4552   209D 87 01         and al, %00000001 ; ==
4553   209F 22 00         mov ah, 0
4554   20A1 27            mov b, a
4555   20A2 E4            pop a
4556   20A3 DB            push al
4557   20A4 C0 00 00      cmp b, 0
4558   20A7 0E            lodflgs
4559   20A8 EA            pop bl ; matches previous 'pop al'
4560   20A9 8C            or al, bl
4561   20AA 8F 01         xor al, %00000001
4562   20AC 2F            mov bl, al
4563   20AD A7 00         mov bh, 0
4564   20AF E8            pop al
4565   20B0 C0 00 00      cmp b, 0
4566   20B3 C6 D3 20      je _if77_exit
4567   20B6             _if77_true:
4568   20B6 26 00 00      mov b, 0
4569   20B9 FD 42 8C 31   mov [__asign], b
4570   20BD 26 00 00      mov b, 0
4571   20C0 FD 42 8E 31   mov [__bsign], b
4572   20C4 26 00 00      mov b, 0
4573   20C7 FD 42 90 31   mov [__csign], b
4574   20CB 07 BC 19      call protominus
4575   20CE F9            leave
4576   20CF 09            ret
4577   20D0 0A D3 20      jmp _if77_exit
4578   20D3             _if77_exit:
4579   20D3             _if78_cond:
4580   20D3 29 8C 31      mov b, [__asign] ; asign
4581   20D6 D7            push a
4582   20D7 11            mov a, b
4583   20D8 26 00 00      mov b, 0
4584   20DB B0            cmp a, b
4585   20DC 0E            lodflgs
4586   20DD 87 01         and al, %00000001 ; ==
4587   20DF 22 00         mov ah, 0
4588   20E1 27            mov b, a
4589   20E2 E4            pop a
4590   20E3 DB            push al
4591   20E4 C0 00 00      cmp b, 0
4592   20E7 0E            lodflgs
4593   20E8 29 8E 31      mov b, [__bsign] ; bsign
4594   20EB D7            push a
4595   20EC 11            mov a, b
4596   20ED 26 01 00      mov b, 1
4597   20F0 B0            cmp a, b
4598   20F1 0E            lodflgs
4599   20F2 87 01         and al, %00000001 ; ==
4600   20F4 22 00         mov ah, 0
4601   20F6 27            mov b, a
4602   20F7 E4            pop a
4603   20F8 DB            push al
4604   20F9 C0 00 00      cmp b, 0
4605   20FC 0E            lodflgs
4606   20FD EA            pop bl ; matches previous 'pop al'
4607   20FE 8C            or al, bl
4608   20FF 8F 01         xor al, %00000001
4609   2101 2F            mov bl, al
4610   2102 A7 00         mov bh, 0
4611   2104 E8            pop al
4612   2105 DB            push al
4613   2106 C0 00 00      cmp b, 0
4614   2109 0E            lodflgs
4615   210A 29 9C 31      mov b, [__bgta] ; bgta
4616   210D D7            push a
4617   210E 11            mov a, b
4618   210F 26 01 00      mov b, 1
4619   2112 B0            cmp a, b
4620   2113 0E            lodflgs
4621   2114 87 01         and al, %00000001 ; ==
4622   2116 22 00         mov ah, 0
4623   2118 27            mov b, a
4624   2119 E4            pop a
4625   211A DB            push al
4626   211B C0 00 00      cmp b, 0
4627   211E 0E            lodflgs
4628   211F EA            pop bl ; matches previous 'pop al'
4629   2120 8C            or al, bl
4630   2121 8F 01         xor al, %00000001
4631   2123 2F            mov bl, al
4632   2124 A7 00         mov bh, 0
4633   2126 E8            pop al
4634   2127 C0 00 00      cmp b, 0
4635   212A C6 4D 21      je _if78_exit
4636   212D             _if78_true:
4637   212D 26 00 00      mov b, 0
4638   2130 FD 42 8C 31   mov [__asign], b
4639   2134 26 00 00      mov b, 0
4640   2137 FD 42 8E 31   mov [__bsign], b
4641   213B 26 01 00      mov b, 1
4642   213E FD 42 90 31   mov [__csign], b
4643   2142 07 A6 16      call swapab
4644   2145 07 BC 19      call protominus
4645   2148 F9            leave
4646   2149 09            ret
4647   214A 0A 4D 21      jmp _if78_exit
4648   214D             _if78_exit:
4649   214D             _if79_cond:
4650   214D 29 8C 31      mov b, [__asign] ; asign
4651   2150 D7            push a
4652   2151 11            mov a, b
4653   2152 26 01 00      mov b, 1
4654   2155 B0            cmp a, b
4655   2156 0E            lodflgs
4656   2157 87 01         and al, %00000001 ; ==
4657   2159 22 00         mov ah, 0
4658   215B 27            mov b, a
4659   215C E4            pop a
4660   215D DB            push al
4661   215E C0 00 00      cmp b, 0
4662   2161 0E            lodflgs
4663   2162 29 8E 31      mov b, [__bsign] ; bsign
4664   2165 D7            push a
4665   2166 11            mov a, b
4666   2167 26 00 00      mov b, 0
4667   216A B0            cmp a, b
4668   216B 0E            lodflgs
4669   216C 87 01         and al, %00000001 ; ==
4670   216E 22 00         mov ah, 0
4671   2170 27            mov b, a
4672   2171 E4            pop a
4673   2172 DB            push al
4674   2173 C0 00 00      cmp b, 0
4675   2176 0E            lodflgs
4676   2177 EA            pop bl ; matches previous 'pop al'
4677   2178 8C            or al, bl
4678   2179 8F 01         xor al, %00000001
4679   217B 2F            mov bl, al
4680   217C A7 00         mov bh, 0
4681   217E E8            pop al
4682   217F DB            push al
4683   2180 C0 00 00      cmp b, 0
4684   2183 0E            lodflgs
4685   2184 29 9A 31      mov b, [__agtb] ; agtb
4686   2187 D7            push a
4687   2188 11            mov a, b
4688   2189 26 01 00      mov b, 1
4689   218C B0            cmp a, b
4690   218D 0E            lodflgs
4691   218E 87 01         and al, %00000001 ; ==
4692   2190 22 00         mov ah, 0
4693   2192 27            mov b, a
4694   2193 E4            pop a
4695   2194 DB            push al
4696   2195 C0 00 00      cmp b, 0
4697   2198 0E            lodflgs
4698   2199 EA            pop bl ; matches previous 'pop al'
4699   219A 8C            or al, bl
4700   219B 8F 01         xor al, %00000001
4701   219D 2F            mov bl, al
4702   219E A7 00         mov bh, 0
4703   21A0 E8            pop al
4704   21A1 C0 00 00      cmp b, 0
4705   21A4 C6 C7 21      je _if79_exit
4706   21A7             _if79_true:
4707   21A7 26 01 00      mov b, 1
4708   21AA FD 42 90 31   mov [__csign], b
4709   21AE 07 A6 16      call swapab
4710   21B1 26 00 00      mov b, 0
4711   21B4 FD 42 8C 31   mov [__asign], b
4712   21B8 26 00 00      mov b, 0
4713   21BB FD 42 8E 31   mov [__bsign], b
4714   21BF 07 E2 1A      call pminus
4715   21C2 F9            leave
4716   21C3 09            ret
4717   21C4 0A C7 21      jmp _if79_exit
4718   21C7             _if79_exit:
4719   21C7             _if80_cond:
4720   21C7 29 8C 31      mov b, [__asign] ; asign
4721   21CA D7            push a
4722   21CB 11            mov a, b
4723   21CC 26 01 00      mov b, 1
4724   21CF B0            cmp a, b
4725   21D0 0E            lodflgs
4726   21D1 87 01         and al, %00000001 ; ==
4727   21D3 22 00         mov ah, 0
4728   21D5 27            mov b, a
4729   21D6 E4            pop a
4730   21D7 DB            push al
4731   21D8 C0 00 00      cmp b, 0
4732   21DB 0E            lodflgs
4733   21DC 29 8E 31      mov b, [__bsign] ; bsign
4734   21DF D7            push a
4735   21E0 11            mov a, b
4736   21E1 26 00 00      mov b, 0
4737   21E4 B0            cmp a, b
4738   21E5 0E            lodflgs
4739   21E6 87 01         and al, %00000001 ; ==
4740   21E8 22 00         mov ah, 0
4741   21EA 27            mov b, a
4742   21EB E4            pop a
4743   21EC DB            push al
4744   21ED C0 00 00      cmp b, 0
4745   21F0 0E            lodflgs
4746   21F1 EA            pop bl ; matches previous 'pop al'
4747   21F2 8C            or al, bl
4748   21F3 8F 01         xor al, %00000001
4749   21F5 2F            mov bl, al
4750   21F6 A7 00         mov bh, 0
4751   21F8 E8            pop al
4752   21F9 DB            push al
4753   21FA C0 00 00      cmp b, 0
4754   21FD 0E            lodflgs
4755   21FE 29 9C 31      mov b, [__bgta] ; bgta
4756   2201 D7            push a
4757   2202 11            mov a, b
4758   2203 26 01 00      mov b, 1
4759   2206 B0            cmp a, b
4760   2207 0E            lodflgs
4761   2208 87 01         and al, %00000001 ; ==
4762   220A 22 00         mov ah, 0
4763   220C 27            mov b, a
4764   220D E4            pop a
4765   220E DB            push al
4766   220F C0 00 00      cmp b, 0
4767   2212 0E            lodflgs
4768   2213 EA            pop bl ; matches previous 'pop al'
4769   2214 8C            or al, bl
4770   2215 8F 01         xor al, %00000001
4771   2217 2F            mov bl, al
4772   2218 A7 00         mov bh, 0
4773   221A E8            pop al
4774   221B C0 00 00      cmp b, 0
4775   221E C6 41 22      je _if80_exit
4776   2221             _if80_true:
4777   2221 26 00 00      mov b, 0
4778   2224 FD 42 8C 31   mov [__asign], b
4779   2228 26 00 00      mov b, 0
4780   222B FD 42 8E 31   mov [__bsign], b
4781   222F 26 00 00      mov b, 0
4782   2232 FD 42 90 31   mov [__csign], b
4783   2236 07 A6 16      call swapab
4784   2239 07 BC 19      call protominus
4785   223C F9            leave
4786   223D 09            ret
4787   223E 0A 41 22      jmp _if80_exit
4788   2241             _if80_exit:
4789   2241 F9            leave
4790   2242 09            ret
4791   2243             
4792   2243             plus:
4793   2243 D2            push bp
4794   2244 9B            mov bp, sp
4795   2245 07 2C 14      call fixsignin
4796   2248 07 F3 1D      call pplus
4797   224B 07 A2 15      call fixcsizezero
4798   224E 07 51 15      call fixsignout
4799   2251 F9            leave
4800   2252 09            ret
4801   2253             
4802   2253             normmulres:
4803   2253 D2            push bp
4804   2254 9B            mov bp, sp
4805   2255             _if81_cond:
4806   2255 29 70 31      mov b, [__mulres]
4807   2258 D7            push a
4808   2259 74            mov d, b
4809   225A DA            push d
4810   225B 26 17 00      mov b, 23
4811   225E E7            pop d
4812   225F 10 02 00      mov a, 2
4813   2262 AC            mul a, b
4814   2263 5A            add d, b
4815   2264 2A            mov b, [d]
4816   2265 E4            pop a
4817   2266 D7            push a
4818   2267 11            mov a, b
4819   2268 26 63 00      mov b, 99
4820   226B B0            cmp a, b
4821   226C 0E            lodflgs
4822   226D 87 03         and al, %00000011
4823   226F B9 00         cmp al, 0
4824   2271 0E            lodflgs
4825   2272 22 00         mov ah, 0
4826   2274 27            mov b, a
4827   2275 E4            pop a
4828   2276 C0 00 00      cmp b, 0
4829   2279 C6 D4 22      je _if81_exit
4830   227C             _if81_true:
4831   227C 29 70 31      mov b, [__mulres]
4832   227F D7            push a
4833   2280 74            mov d, b
4834   2281 DA            push d
4835   2282 26 17 00      mov b, 23
4836   2285 E7            pop d
4837   2286 10 02 00      mov a, 2
4838   2289 AC            mul a, b
4839   228A 5A            add d, b
4840   228B 2A            mov b, [d]
4841   228C E4            pop a
4842   228D D7            push a
4843   228E 11            mov a, b
4844   228F 26 64 00      mov b, 100
4845   2292 AE            div a, b
4846   2293 FD 78         mov g, a
4847   2295 11            mov a, b
4848   2296 FD 27         mov b, g
4849   2298 E4            pop a
4850   2299 FD 42 B0 31   mov [__toolarge], b
4851   229D 29 70 31      mov b, [__mulres]
4852   22A0 D7            push a
4853   22A1 74            mov d, b
4854   22A2 DA            push d
4855   22A3 26 17 00      mov b, 23
4856   22A6 E7            pop d
4857   22A7 10 02 00      mov a, 2
4858   22AA AC            mul a, b
4859   22AB 5A            add d, b
4860   22AC E4            pop a
4861   22AD DA            push d
4862   22AE 29 70 31      mov b, [__mulres]
4863   22B1 D7            push a
4864   22B2 74            mov d, b
4865   22B3 DA            push d
4866   22B4 26 17 00      mov b, 23
4867   22B7 E7            pop d
4868   22B8 10 02 00      mov a, 2
4869   22BB AC            mul a, b
4870   22BC 5A            add d, b
4871   22BD 2A            mov b, [d]
4872   22BE E4            pop a
4873   22BF D7            push a
4874   22C0 11            mov a, b
4875   22C1 29 B0 31      mov b, [__toolarge] ; toolarge
4876   22C4 D7            push a
4877   22C5 11            mov a, b
4878   22C6 26 64 00      mov b, 100
4879   22C9 AC            mul a, b
4880   22CA E4            pop a
4881   22CB 60            sub a, b
4882   22CC 27            mov b, a
4883   22CD E4            pop a
4884   22CE E7            pop d
4885   22CF FD 43         mov [d], b
4886   22D1 0A D4 22      jmp _if81_exit
4887   22D4             _if81_exit:
4888   22D4 26 00 00      mov b, 0
4889   22D7 FD 42 B2 31   mov [__normal], b
4890   22DB             _while82_cond:
4891   22DB 29 B2 31      mov b, [__normal] ; normal
4892   22DE D7            push a
4893   22DF 11            mov a, b
4894   22E0 26 00 00      mov b, 0
4895   22E3 B0            cmp a, b
4896   22E4 0E            lodflgs
4897   22E5 87 01         and al, %00000001 ; ==
4898   22E7 22 00         mov ah, 0
4899   22E9 27            mov b, a
4900   22EA E4            pop a
4901   22EB C0 00 00      cmp b, 0
4902   22EE C6 FC 23      je _while82_exit
4903   22F1             _while82_block:
4904   22F1 26 01 00      mov b, 1
4905   22F4 FD 42 B2 31   mov [__normal], b
4906   22F8             _for83_init:
4907   22F8 26 00 00      mov b, 0
4908   22FB FD 42 92 31   mov [__protopos], b
4909   22FF             _for83_cond:
4910   22FF 29 92 31      mov b, [__protopos] ; protopos
4911   2302 D7            push a
4912   2303 11            mov a, b
4913   2304 26 17 00      mov b, 23
4914   2307 B0            cmp a, b
4915   2308 0E            lodflgs
4916   2309 87 02         and al, %00000010 ; <
4917   230B FD 9C         shr al
4918   230D 22 00         mov ah, 0
4919   230F 27            mov b, a
4920   2310 E4            pop a
4921   2311 C0 00 00      cmp b, 0
4922   2314 C6 F9 23      je _for83_exit
4923   2317             _for83_block:
4924   2317 26 16 00      mov b, 22
4925   231A D7            push a
4926   231B 11            mov a, b
4927   231C 29 92 31      mov b, [__protopos] ; protopos
4928   231F 60            sub a, b
4929   2320 27            mov b, a
4930   2321 E4            pop a
4931   2322 FD 42 94 31   mov [__pos], b
4932   2326             _if84_cond:
4933   2326 29 70 31      mov b, [__mulres]
4934   2329 D7            push a
4935   232A 74            mov d, b
4936   232B DA            push d
4937   232C 29 94 31      mov b, [__pos] ; pos
4938   232F E7            pop d
4939   2330 10 02 00      mov a, 2
4940   2333 AC            mul a, b
4941   2334 5A            add d, b
4942   2335 2A            mov b, [d]
4943   2336 E4            pop a
4944   2337 D7            push a
4945   2338 11            mov a, b
4946   2339 26 63 00      mov b, 99
4947   233C B0            cmp a, b
4948   233D 0E            lodflgs
4949   233E 87 03         and al, %00000011
4950   2340 B9 00         cmp al, 0
4951   2342 0E            lodflgs
4952   2343 22 00         mov ah, 0
4953   2345 27            mov b, a
4954   2346 E4            pop a
4955   2347 C0 00 00      cmp b, 0
4956   234A C6 E9 23      je _if84_exit
4957   234D             _if84_true:
4958   234D 26 00 00      mov b, 0
4959   2350 FD 42 B2 31   mov [__normal], b
4960   2354 29 70 31      mov b, [__mulres]
4961   2357 D7            push a
4962   2358 74            mov d, b
4963   2359 DA            push d
4964   235A 29 94 31      mov b, [__pos] ; pos
4965   235D E7            pop d
4966   235E 10 02 00      mov a, 2
4967   2361 AC            mul a, b
4968   2362 5A            add d, b
4969   2363 2A            mov b, [d]
4970   2364 E4            pop a
4971   2365 D7            push a
4972   2366 11            mov a, b
4973   2367 26 64 00      mov b, 100
4974   236A AE            div a, b
4975   236B FD 78         mov g, a
4976   236D 11            mov a, b
4977   236E FD 27         mov b, g
4978   2370 E4            pop a
4979   2371 FD 42 B0 31   mov [__toolarge], b
4980   2375 29 70 31      mov b, [__mulres]
4981   2378 D7            push a
4982   2379 74            mov d, b
4983   237A DA            push d
4984   237B 29 94 31      mov b, [__pos] ; pos
4985   237E E7            pop d
4986   237F 10 02 00      mov a, 2
4987   2382 AC            mul a, b
4988   2383 5A            add d, b
4989   2384 E4            pop a
4990   2385 DA            push d
4991   2386 29 70 31      mov b, [__mulres]
4992   2389 D7            push a
4993   238A 74            mov d, b
4994   238B DA            push d
4995   238C 29 94 31      mov b, [__pos] ; pos
4996   238F E7            pop d
4997   2390 10 02 00      mov a, 2
4998   2393 AC            mul a, b
4999   2394 5A            add d, b
5000   2395 2A            mov b, [d]
5001   2396 E4            pop a
5002   2397 D7            push a
5003   2398 11            mov a, b
5004   2399 29 B0 31      mov b, [__toolarge] ; toolarge
5005   239C D7            push a
5006   239D 11            mov a, b
5007   239E 26 64 00      mov b, 100
5008   23A1 AC            mul a, b
5009   23A2 E4            pop a
5010   23A3 60            sub a, b
5011   23A4 27            mov b, a
5012   23A5 E4            pop a
5013   23A6 E7            pop d
5014   23A7 FD 43         mov [d], b
5015   23A9 29 70 31      mov b, [__mulres]
5016   23AC D7            push a
5017   23AD 74            mov d, b
5018   23AE DA            push d
5019   23AF 29 94 31      mov b, [__pos] ; pos
5020   23B2 D7            push a
5021   23B3 11            mov a, b
5022   23B4 26 01 00      mov b, 1
5023   23B7 54            add a, b
5024   23B8 27            mov b, a
5025   23B9 E4            pop a
5026   23BA E7            pop d
5027   23BB 10 02 00      mov a, 2
5028   23BE AC            mul a, b
5029   23BF 5A            add d, b
5030   23C0 E4            pop a
5031   23C1 DA            push d
5032   23C2 29 70 31      mov b, [__mulres]
5033   23C5 D7            push a
5034   23C6 74            mov d, b
5035   23C7 DA            push d
5036   23C8 29 94 31      mov b, [__pos] ; pos
5037   23CB D7            push a
5038   23CC 11            mov a, b
5039   23CD 26 01 00      mov b, 1
5040   23D0 54            add a, b
5041   23D1 27            mov b, a
5042   23D2 E4            pop a
5043   23D3 E7            pop d
5044   23D4 10 02 00      mov a, 2
5045   23D7 AC            mul a, b
5046   23D8 5A            add d, b
5047   23D9 2A            mov b, [d]
5048   23DA E4            pop a
5049   23DB D7            push a
5050   23DC 11            mov a, b
5051   23DD 29 B0 31      mov b, [__toolarge] ; toolarge
5052   23E0 54            add a, b
5053   23E1 27            mov b, a
5054   23E2 E4            pop a
5055   23E3 E7            pop d
5056   23E4 FD 43         mov [d], b
5057   23E6 0A E9 23      jmp _if84_exit
5058   23E9             _if84_exit:
5059   23E9             _for83_update:
5060   23E9 29 92 31      mov b, [__protopos] ; protopos
5061   23EC D7            push a
5062   23ED 11            mov a, b
5063   23EE FD 77         inc b
5064   23F0 FD 42 92 31   mov [__protopos], b
5065   23F4 27            mov b, a
5066   23F5 E4            pop a
5067   23F6 0A FF 22      jmp _for83_cond
5068   23F9             _for83_exit:
5069   23F9 0A DB 22      jmp _while82_cond
5070   23FC             _while82_exit:
5071   23FC             _if85_cond:
5072   23FC 29 70 31      mov b, [__mulres]
5073   23FF D7            push a
5074   2400 74            mov d, b
5075   2401 DA            push d
5076   2402 26 17 00      mov b, 23
5077   2405 E7            pop d
5078   2406 10 02 00      mov a, 2
5079   2409 AC            mul a, b
5080   240A 5A            add d, b
5081   240B 2A            mov b, [d]
5082   240C E4            pop a
5083   240D D7            push a
5084   240E 11            mov a, b
5085   240F 26 63 00      mov b, 99
5086   2412 B0            cmp a, b
5087   2413 0E            lodflgs
5088   2414 87 03         and al, %00000011
5089   2416 B9 00         cmp al, 0
5090   2418 0E            lodflgs
5091   2419 22 00         mov ah, 0
5092   241B 27            mov b, a
5093   241C E4            pop a
5094   241D C0 00 00      cmp b, 0
5095   2420 C6 7B 24      je _if85_exit
5096   2423             _if85_true:
5097   2423 29 70 31      mov b, [__mulres]
5098   2426 D7            push a
5099   2427 74            mov d, b
5100   2428 DA            push d
5101   2429 26 17 00      mov b, 23
5102   242C E7            pop d
5103   242D 10 02 00      mov a, 2
5104   2430 AC            mul a, b
5105   2431 5A            add d, b
5106   2432 2A            mov b, [d]
5107   2433 E4            pop a
5108   2434 D7            push a
5109   2435 11            mov a, b
5110   2436 26 64 00      mov b, 100
5111   2439 AE            div a, b
5112   243A FD 78         mov g, a
5113   243C 11            mov a, b
5114   243D FD 27         mov b, g
5115   243F E4            pop a
5116   2440 FD 42 B0 31   mov [__toolarge], b
5117   2444 29 70 31      mov b, [__mulres]
5118   2447 D7            push a
5119   2448 74            mov d, b
5120   2449 DA            push d
5121   244A 26 17 00      mov b, 23
5122   244D E7            pop d
5123   244E 10 02 00      mov a, 2
5124   2451 AC            mul a, b
5125   2452 5A            add d, b
5126   2453 E4            pop a
5127   2454 DA            push d
5128   2455 29 70 31      mov b, [__mulres]
5129   2458 D7            push a
5130   2459 74            mov d, b
5131   245A DA            push d
5132   245B 26 17 00      mov b, 23
5133   245E E7            pop d
5134   245F 10 02 00      mov a, 2
5135   2462 AC            mul a, b
5136   2463 5A            add d, b
5137   2464 2A            mov b, [d]
5138   2465 E4            pop a
5139   2466 D7            push a
5140   2467 11            mov a, b
5141   2468 29 B0 31      mov b, [__toolarge] ; toolarge
5142   246B D7            push a
5143   246C 11            mov a, b
5144   246D 26 64 00      mov b, 100
5145   2470 AC            mul a, b
5146   2471 E4            pop a
5147   2472 60            sub a, b
5148   2473 27            mov b, a
5149   2474 E4            pop a
5150   2475 E7            pop d
5151   2476 FD 43         mov [d], b
5152   2478 0A 7B 24      jmp _if85_exit
5153   247B             _if85_exit:
5154   247B F9            leave
5155   247C 09            ret
5156   247D             
5157   247D             prototimes:
5158   247D D2            push bp
5159   247E 9B            mov bp, sp
5160   247F             _for86_init:
5161   247F 26 00 00      mov b, 0
5162   2482 FD 42 C4 31   mov [__divi], b
5163   2486             _for86_cond:
5164   2486 29 C4 31      mov b, [__divi] ; divi
5165   2489 D7            push a
5166   248A 11            mov a, b
5167   248B 26 0C 00      mov b, 12
5168   248E B0            cmp a, b
5169   248F 0E            lodflgs
5170   2490 87 02         and al, %00000010 ; <
5171   2492 FD 9C         shr al
5172   2494 22 00         mov ah, 0
5173   2496 27            mov b, a
5174   2497 E4            pop a
5175   2498 C0 00 00      cmp b, 0
5176   249B C6 C5 24      je _for86_exit
5177   249E             _for86_block:
5178   249E 29 3E 31      mov b, [__cnarr]
5179   24A1 D7            push a
5180   24A2 74            mov d, b
5181   24A3 DA            push d
5182   24A4 29 C4 31      mov b, [__divi] ; divi
5183   24A7 E7            pop d
5184   24A8 10 02 00      mov a, 2
5185   24AB AC            mul a, b
5186   24AC 5A            add d, b
5187   24AD E4            pop a
5188   24AE DA            push d
5189   24AF 26 00 00      mov b, 0
5190   24B2 E7            pop d
5191   24B3 FD 43         mov [d], b
5192   24B5             _for86_update:
5193   24B5 29 C4 31      mov b, [__divi] ; divi
5194   24B8 D7            push a
5195   24B9 11            mov a, b
5196   24BA FD 77         inc b
5197   24BC FD 42 C4 31   mov [__divi], b
5198   24C0 27            mov b, a
5199   24C1 E4            pop a
5200   24C2 0A 86 24      jmp _for86_cond
5201   24C5             _for86_exit:
5202   24C5             _for87_init:
5203   24C5 26 00 00      mov b, 0
5204   24C8 FD 42 C4 31   mov [__divi], b
5205   24CC             _for87_cond:
5206   24CC 29 C4 31      mov b, [__divi] ; divi
5207   24CF D7            push a
5208   24D0 11            mov a, b
5209   24D1 26 18 00      mov b, 24
5210   24D4 B0            cmp a, b
5211   24D5 0E            lodflgs
5212   24D6 87 02         and al, %00000010 ; <
5213   24D8 FD 9C         shr al
5214   24DA 22 00         mov ah, 0
5215   24DC 27            mov b, a
5216   24DD E4            pop a
5217   24DE C0 00 00      cmp b, 0
5218   24E1 C6 0B 25      je _for87_exit
5219   24E4             _for87_block:
5220   24E4 29 70 31      mov b, [__mulres]
5221   24E7 D7            push a
5222   24E8 74            mov d, b
5223   24E9 DA            push d
5224   24EA 29 C4 31      mov b, [__divi] ; divi
5225   24ED E7            pop d
5226   24EE 10 02 00      mov a, 2
5227   24F1 AC            mul a, b
5228   24F2 5A            add d, b
5229   24F3 E4            pop a
5230   24F4 DA            push d
5231   24F5 26 00 00      mov b, 0
5232   24F8 E7            pop d
5233   24F9 FD 43         mov [d], b
5234   24FB             _for87_update:
5235   24FB 29 C4 31      mov b, [__divi] ; divi
5236   24FE D7            push a
5237   24FF 11            mov a, b
5238   2500 FD 77         inc b
5239   2502 FD 42 C4 31   mov [__divi], b
5240   2506 27            mov b, a
5241   2507 E4            pop a
5242   2508 0A CC 24      jmp _for87_cond
5243   250B             _for87_exit:
5244   250B             _for88_init:
5245   250B 26 00 00      mov b, 0
5246   250E FD 42 B4 31   mov [__mulpos1], b
5247   2512             _for88_cond:
5248   2512 29 B4 31      mov b, [__mulpos1] ; mulpos1
5249   2515 D7            push a
5250   2516 11            mov a, b
5251   2517 26 0C 00      mov b, 12
5252   251A B0            cmp a, b
5253   251B 0E            lodflgs
5254   251C 87 02         and al, %00000010 ; <
5255   251E FD 9C         shr al
5256   2520 22 00         mov ah, 0
5257   2522 27            mov b, a
5258   2523 E4            pop a
5259   2524 C0 00 00      cmp b, 0
5260   2527 C6 CC 25      je _for88_exit
5261   252A             _for88_block:
5262   252A             _for89_init:
5263   252A 26 00 00      mov b, 0
5264   252D FD 42 B6 31   mov [__mulpos2], b
5265   2531             _for89_cond:
5266   2531 29 B6 31      mov b, [__mulpos2] ; mulpos2
5267   2534 D7            push a
5268   2535 11            mov a, b
5269   2536 26 0C 00      mov b, 12
5270   2539 B0            cmp a, b
5271   253A 0E            lodflgs
5272   253B 87 02         and al, %00000010 ; <
5273   253D FD 9C         shr al
5274   253F 22 00         mov ah, 0
5275   2541 27            mov b, a
5276   2542 E4            pop a
5277   2543 C0 00 00      cmp b, 0
5278   2546 C6 B9 25      je _for89_exit
5279   2549             _for89_block:
5280   2549 29 70 31      mov b, [__mulres]
5281   254C D7            push a
5282   254D 74            mov d, b
5283   254E DA            push d
5284   254F 29 B4 31      mov b, [__mulpos1] ; mulpos1
5285   2552 D7            push a
5286   2553 11            mov a, b
5287   2554 29 B6 31      mov b, [__mulpos2] ; mulpos2
5288   2557 54            add a, b
5289   2558 27            mov b, a
5290   2559 E4            pop a
5291   255A E7            pop d
5292   255B 10 02 00      mov a, 2
5293   255E AC            mul a, b
5294   255F 5A            add d, b
5295   2560 E4            pop a
5296   2561 DA            push d
5297   2562 29 70 31      mov b, [__mulres]
5298   2565 D7            push a
5299   2566 74            mov d, b
5300   2567 DA            push d
5301   2568 29 B4 31      mov b, [__mulpos1] ; mulpos1
5302   256B D7            push a
5303   256C 11            mov a, b
5304   256D 29 B6 31      mov b, [__mulpos2] ; mulpos2
5305   2570 54            add a, b
5306   2571 27            mov b, a
5307   2572 E4            pop a
5308   2573 E7            pop d
5309   2574 10 02 00      mov a, 2
5310   2577 AC            mul a, b
5311   2578 5A            add d, b
5312   2579 2A            mov b, [d]
5313   257A E4            pop a
5314   257B D7            push a
5315   257C 11            mov a, b
5316   257D 29 F0 30      mov b, [__bnarr]
5317   2580 D7            push a
5318   2581 74            mov d, b
5319   2582 DA            push d
5320   2583 29 B6 31      mov b, [__mulpos2] ; mulpos2
5321   2586 E7            pop d
5322   2587 10 02 00      mov a, 2
5323   258A AC            mul a, b
5324   258B 5A            add d, b
5325   258C 2A            mov b, [d]
5326   258D E4            pop a
5327   258E D7            push a
5328   258F 11            mov a, b
5329   2590 29 D6 30      mov b, [__anarr]
5330   2593 D7            push a
5331   2594 74            mov d, b
5332   2595 DA            push d
5333   2596 29 B4 31      mov b, [__mulpos1] ; mulpos1
5334   2599 E7            pop d
5335   259A 10 02 00      mov a, 2
5336   259D AC            mul a, b
5337   259E 5A            add d, b
5338   259F 2A            mov b, [d]
5339   25A0 E4            pop a
5340   25A1 AC            mul a, b
5341   25A2 E4            pop a
5342   25A3 54            add a, b
5343   25A4 27            mov b, a
5344   25A5 E4            pop a
5345   25A6 E7            pop d
5346   25A7 FD 43         mov [d], b
5347   25A9             _for89_update:
5348   25A9 29 B6 31      mov b, [__mulpos2] ; mulpos2
5349   25AC D7            push a
5350   25AD 11            mov a, b
5351   25AE FD 77         inc b
5352   25B0 FD 42 B6 31   mov [__mulpos2], b
5353   25B4 27            mov b, a
5354   25B5 E4            pop a
5355   25B6 0A 31 25      jmp _for89_cond
5356   25B9             _for89_exit:
5357   25B9 07 53 22      call normmulres
5358   25BC             _for88_update:
5359   25BC 29 B4 31      mov b, [__mulpos1] ; mulpos1
5360   25BF D7            push a
5361   25C0 11            mov a, b
5362   25C1 FD 77         inc b
5363   25C3 FD 42 B4 31   mov [__mulpos1], b
5364   25C7 27            mov b, a
5365   25C8 E4            pop a
5366   25C9 0A 12 25      jmp _for88_cond
5367   25CC             _for88_exit:
5368   25CC F9            leave
5369   25CD 09            ret
5370   25CE             
5371   25CE             protodividedby:
5372   25CE D2            push bp
5373   25CF 9B            mov bp, sp
5374   25D0 26 00 00      mov b, 0
5375   25D3 FD 42 BA 31   mov [__brshift], b
5376   25D7 26 00 00      mov b, 0
5377   25DA FD 42 BC 31   mov [__blshift], b
5378   25DE 26 00 00      mov b, 0
5379   25E1 FD 42 BE 31   mov [__alshift], b
5380   25E5 26 00 00      mov b, 0
5381   25E8 FD 42 C0 31   mov [__divcounter], b
5382   25EC 26 00 00      mov b, 0
5383   25EF FD 42 C2 31   mov [__segmentcounter], b
5384   25F3 26 01 00      mov b, 1
5385   25F6 FD 42 C6 31   mov [__allzeroes], b
5386   25FA             _for90_init:
5387   25FA 26 00 00      mov b, 0
5388   25FD FD 42 C4 31   mov [__divi], b
5389   2601             _for90_cond:
5390   2601 29 C4 31      mov b, [__divi] ; divi
5391   2604 D7            push a
5392   2605 11            mov a, b
5393   2606 26 0C 00      mov b, 12
5394   2609 B0            cmp a, b
5395   260A 0E            lodflgs
5396   260B 87 02         and al, %00000010 ; <
5397   260D FD 9C         shr al
5398   260F 22 00         mov ah, 0
5399   2611 27            mov b, a
5400   2612 E4            pop a
5401   2613 C0 00 00      cmp b, 0
5402   2616 C6 87 26      je _for90_exit
5403   2619             _for90_block:
5404   2619 29 3E 31      mov b, [__cnarr]
5405   261C D7            push a
5406   261D 74            mov d, b
5407   261E DA            push d
5408   261F 29 C4 31      mov b, [__divi] ; divi
5409   2622 E7            pop d
5410   2623 10 02 00      mov a, 2
5411   2626 AC            mul a, b
5412   2627 5A            add d, b
5413   2628 E4            pop a
5414   2629 DA            push d
5415   262A 26 00 00      mov b, 0
5416   262D E7            pop d
5417   262E FD 43         mov [d], b
5418   2630 29 8A 31      mov b, [__divres]
5419   2633 D7            push a
5420   2634 74            mov d, b
5421   2635 DA            push d
5422   2636 29 C4 31      mov b, [__divi] ; divi
5423   2639 E7            pop d
5424   263A 10 02 00      mov a, 2
5425   263D AC            mul a, b
5426   263E 5A            add d, b
5427   263F E4            pop a
5428   2640 DA            push d
5429   2641 26 00 00      mov b, 0
5430   2644 E7            pop d
5431   2645 FD 43         mov [d], b
5432   2647             _if91_cond:
5433   2647 29 F0 30      mov b, [__bnarr]
5434   264A D7            push a
5435   264B 74            mov d, b
5436   264C DA            push d
5437   264D 29 C4 31      mov b, [__divi] ; divi
5438   2650 E7            pop d
5439   2651 10 02 00      mov a, 2
5440   2654 AC            mul a, b
5441   2655 5A            add d, b
5442   2656 2A            mov b, [d]
5443   2657 E4            pop a
5444   2658 D7            push a
5445   2659 11            mov a, b
5446   265A 26 00 00      mov b, 0
5447   265D B0            cmp a, b
5448   265E 0E            lodflgs
5449   265F 87 01         and al, %00000001
5450   2661 8F 01         xor al, %00000001 ; !=
5451   2663 22 00         mov ah, 0
5452   2665 27            mov b, a
5453   2666 E4            pop a
5454   2667 C0 00 00      cmp b, 0
5455   266A C6 77 26      je _if91_exit
5456   266D             _if91_true:
5457   266D 26 00 00      mov b, 0
5458   2670 FD 42 C6 31   mov [__allzeroes], b
5459   2674 0A 77 26      jmp _if91_exit
5460   2677             _if91_exit:
5461   2677             _for90_update:
5462   2677 29 C4 31      mov b, [__divi] ; divi
5463   267A D7            push a
5464   267B 11            mov a, b
5465   267C FD 77         inc b
5466   267E FD 42 C4 31   mov [__divi], b
5467   2682 27            mov b, a
5468   2683 E4            pop a
5469   2684 0A 01 26      jmp _for90_cond
5470   2687             _for90_exit:
5471   2687             _if92_cond:
5472   2687 29 C6 31      mov b, [__allzeroes] ; allzeroes
5473   268A D7            push a
5474   268B 11            mov a, b
5475   268C 26 01 00      mov b, 1
5476   268F B0            cmp a, b
5477   2690 0E            lodflgs
5478   2691 87 01         and al, %00000001 ; ==
5479   2693 22 00         mov ah, 0
5480   2695 27            mov b, a
5481   2696 E4            pop a
5482   2697 C0 00 00      cmp b, 0
5483   269A C6 A2 26      je _if92_exit
5484   269D             _if92_true:
5485   269D F9            leave
5486   269E 09            ret
5487   269F 0A A2 26      jmp _if92_exit
5488   26A2             _if92_exit:
5489   26A2             _if93_cond:
5490   26A2 29 F0 30      mov b, [__bnarr]
5491   26A5 D7            push a
5492   26A6 74            mov d, b
5493   26A7 DA            push d
5494   26A8 26 0B 00      mov b, 11
5495   26AB E7            pop d
5496   26AC 10 02 00      mov a, 2
5497   26AF AC            mul a, b
5498   26B0 5A            add d, b
5499   26B1 2A            mov b, [d]
5500   26B2 E4            pop a
5501   26B3 D7            push a
5502   26B4 11            mov a, b
5503   26B5 26 00 00      mov b, 0
5504   26B8 B0            cmp a, b
5505   26B9 0E            lodflgs
5506   26BA 87 01         and al, %00000001
5507   26BC 8F 01         xor al, %00000001 ; !=
5508   26BE 22 00         mov ah, 0
5509   26C0 27            mov b, a
5510   26C1 E4            pop a
5511   26C2 C0 00 00      cmp b, 0
5512   26C5 C6 45 27      je _if93_exit
5513   26C8             _if93_true:
5514   26C8             _for94_init:
5515   26C8 26 00 00      mov b, 0
5516   26CB FD 42 C4 31   mov [__divi], b
5517   26CF             _for94_cond:
5518   26CF 29 C4 31      mov b, [__divi] ; divi
5519   26D2 D7            push a
5520   26D3 11            mov a, b
5521   26D4 26 0B 00      mov b, 11
5522   26D7 B0            cmp a, b
5523   26D8 0E            lodflgs
5524   26D9 87 02         and al, %00000010 ; <
5525   26DB FD 9C         shr al
5526   26DD 22 00         mov ah, 0
5527   26DF 27            mov b, a
5528   26E0 E4            pop a
5529   26E1 C0 00 00      cmp b, 0
5530   26E4 C6 24 27      je _for94_exit
5531   26E7             _for94_block:
5532   26E7 29 F0 30      mov b, [__bnarr]
5533   26EA D7            push a
5534   26EB 74            mov d, b
5535   26EC DA            push d
5536   26ED 29 C4 31      mov b, [__divi] ; divi
5537   26F0 E7            pop d
5538   26F1 10 02 00      mov a, 2
5539   26F4 AC            mul a, b
5540   26F5 5A            add d, b
5541   26F6 E4            pop a
5542   26F7 DA            push d
5543   26F8 29 F0 30      mov b, [__bnarr]
5544   26FB D7            push a
5545   26FC 74            mov d, b
5546   26FD DA            push d
5547   26FE 29 C4 31      mov b, [__divi] ; divi
5548   2701 D7            push a
5549   2702 11            mov a, b
5550   2703 26 01 00      mov b, 1
5551   2706 54            add a, b
5552   2707 27            mov b, a
5553   2708 E4            pop a
5554   2709 E7            pop d
5555   270A 10 02 00      mov a, 2
5556   270D AC            mul a, b
5557   270E 5A            add d, b
5558   270F 2A            mov b, [d]
5559   2710 E4            pop a
5560   2711 E7            pop d
5561   2712 FD 43         mov [d], b
5562   2714             _for94_update:
5563   2714 29 C4 31      mov b, [__divi] ; divi
5564   2717 D7            push a
5565   2718 11            mov a, b
5566   2719 FD 77         inc b
5567   271B FD 42 C4 31   mov [__divi], b
5568   271F 27            mov b, a
5569   2720 E4            pop a
5570   2721 0A CF 26      jmp _for94_cond
5571   2724             _for94_exit:
5572   2724 26 01 00      mov b, 1
5573   2727 FD 42 BA 31   mov [__brshift], b
5574   272B 29 F0 30      mov b, [__bnarr]
5575   272E D7            push a
5576   272F 74            mov d, b
5577   2730 DA            push d
5578   2731 26 0B 00      mov b, 11
5579   2734 E7            pop d
5580   2735 10 02 00      mov a, 2
5581   2738 AC            mul a, b
5582   2739 5A            add d, b
5583   273A E4            pop a
5584   273B DA            push d
5585   273C 26 00 00      mov b, 0
5586   273F E7            pop d
5587   2740 FD 43         mov [d], b
5588   2742 0A 45 27      jmp _if93_exit
5589   2745             _if93_exit:
5590   2745             _while95_cond:
5591   2745 29 F0 30      mov b, [__bnarr]
5592   2748 D7            push a
5593   2749 74            mov d, b
5594   274A DA            push d
5595   274B 26 0A 00      mov b, 10
5596   274E E7            pop d
5597   274F 10 02 00      mov a, 2
5598   2752 AC            mul a, b
5599   2753 5A            add d, b
5600   2754 2A            mov b, [d]
5601   2755 E4            pop a
5602   2756 D7            push a
5603   2757 11            mov a, b
5604   2758 26 00 00      mov b, 0
5605   275B B0            cmp a, b
5606   275C 0E            lodflgs
5607   275D 87 01         and al, %00000001 ; ==
5608   275F 22 00         mov ah, 0
5609   2761 27            mov b, a
5610   2762 E4            pop a
5611   2763 C0 00 00      cmp b, 0
5612   2766 C6 FC 27      je _while95_exit
5613   2769             _while95_block:
5614   2769             _for96_init:
5615   2769 26 00 00      mov b, 0
5616   276C FD 42 C4 31   mov [__divi], b
5617   2770             _for96_cond:
5618   2770 29 C4 31      mov b, [__divi] ; divi
5619   2773 D7            push a
5620   2774 11            mov a, b
5621   2775 26 0A 00      mov b, 10
5622   2778 B0            cmp a, b
5623   2779 0E            lodflgs
5624   277A 87 02         and al, %00000010 ; <
5625   277C FD 9C         shr al
5626   277E 22 00         mov ah, 0
5627   2780 27            mov b, a
5628   2781 E4            pop a
5629   2782 C0 00 00      cmp b, 0
5630   2785 C6 D5 27      je _for96_exit
5631   2788             _for96_block:
5632   2788 29 F0 30      mov b, [__bnarr]
5633   278B D7            push a
5634   278C 74            mov d, b
5635   278D DA            push d
5636   278E 26 0A 00      mov b, 10
5637   2791 D7            push a
5638   2792 11            mov a, b
5639   2793 29 C4 31      mov b, [__divi] ; divi
5640   2796 60            sub a, b
5641   2797 27            mov b, a
5642   2798 E4            pop a
5643   2799 E7            pop d
5644   279A 10 02 00      mov a, 2
5645   279D AC            mul a, b
5646   279E 5A            add d, b
5647   279F E4            pop a
5648   27A0 DA            push d
5649   27A1 29 F0 30      mov b, [__bnarr]
5650   27A4 D7            push a
5651   27A5 74            mov d, b
5652   27A6 DA            push d
5653   27A7 26 0A 00      mov b, 10
5654   27AA D7            push a
5655   27AB 11            mov a, b
5656   27AC 29 C4 31      mov b, [__divi] ; divi
5657   27AF 60            sub a, b
5658   27B0 27            mov b, a
5659   27B1 E4            pop a
5660   27B2 D7            push a
5661   27B3 11            mov a, b
5662   27B4 26 01 00      mov b, 1
5663   27B7 60            sub a, b
5664   27B8 27            mov b, a
5665   27B9 E4            pop a
5666   27BA E7            pop d
5667   27BB 10 02 00      mov a, 2
5668   27BE AC            mul a, b
5669   27BF 5A            add d, b
5670   27C0 2A            mov b, [d]
5671   27C1 E4            pop a
5672   27C2 E7            pop d
5673   27C3 FD 43         mov [d], b
5674   27C5             _for96_update:
5675   27C5 29 C4 31      mov b, [__divi] ; divi
5676   27C8 D7            push a
5677   27C9 11            mov a, b
5678   27CA FD 77         inc b
5679   27CC FD 42 C4 31   mov [__divi], b
5680   27D0 27            mov b, a
5681   27D1 E4            pop a
5682   27D2 0A 70 27      jmp _for96_cond
5683   27D5             _for96_exit:
5684   27D5 29 F0 30      mov b, [__bnarr]
5685   27D8 D7            push a
5686   27D9 74            mov d, b
5687   27DA DA            push d
5688   27DB 26 00 00      mov b, 0
5689   27DE E7            pop d
5690   27DF 10 02 00      mov a, 2
5691   27E2 AC            mul a, b
5692   27E3 5A            add d, b
5693   27E4 E4            pop a
5694   27E5 DA            push d
5695   27E6 26 00 00      mov b, 0
5696   27E9 E7            pop d
5697   27EA FD 43         mov [d], b
5698   27EC 29 BC 31      mov b, [__blshift] ; blshift
5699   27EF D7            push a
5700   27F0 11            mov a, b
5701   27F1 FD 77         inc b
5702   27F3 FD 42 BC 31   mov [__blshift], b
5703   27F7 27            mov b, a
5704   27F8 E4            pop a
5705   27F9 0A 45 27      jmp _while95_cond
5706   27FC             _while95_exit:
5707   27FC 26 01 00      mov b, 1
5708   27FF FD 42 C6 31   mov [__allzeroes], b
5709   2803             _for97_init:
5710   2803 26 00 00      mov b, 0
5711   2806 FD 42 C4 31   mov [__divi], b
5712   280A             _for97_cond:
5713   280A 29 C4 31      mov b, [__divi] ; divi
5714   280D D7            push a
5715   280E 11            mov a, b
5716   280F 26 0C 00      mov b, 12
5717   2812 B0            cmp a, b
5718   2813 0E            lodflgs
5719   2814 87 02         and al, %00000010 ; <
5720   2816 FD 9C         shr al
5721   2818 22 00         mov ah, 0
5722   281A 27            mov b, a
5723   281B E4            pop a
5724   281C C0 00 00      cmp b, 0
5725   281F C6 62 28      je _for97_exit
5726   2822             _for97_block:
5727   2822             _if98_cond:
5728   2822 29 D6 30      mov b, [__anarr]
5729   2825 D7            push a
5730   2826 74            mov d, b
5731   2827 DA            push d
5732   2828 29 C4 31      mov b, [__divi] ; divi
5733   282B E7            pop d
5734   282C 10 02 00      mov a, 2
5735   282F AC            mul a, b
5736   2830 5A            add d, b
5737   2831 2A            mov b, [d]
5738   2832 E4            pop a
5739   2833 D7            push a
5740   2834 11            mov a, b
5741   2835 26 00 00      mov b, 0
5742   2838 B0            cmp a, b
5743   2839 0E            lodflgs
5744   283A 87 01         and al, %00000001
5745   283C 8F 01         xor al, %00000001 ; !=
5746   283E 22 00         mov ah, 0
5747   2840 27            mov b, a
5748   2841 E4            pop a
5749   2842 C0 00 00      cmp b, 0
5750   2845 C6 52 28      je _if98_exit
5751   2848             _if98_true:
5752   2848 26 00 00      mov b, 0
5753   284B FD 42 C6 31   mov [__allzeroes], b
5754   284F 0A 52 28      jmp _if98_exit
5755   2852             _if98_exit:
5756   2852             _for97_update:
5757   2852 29 C4 31      mov b, [__divi] ; divi
5758   2855 D7            push a
5759   2856 11            mov a, b
5760   2857 FD 77         inc b
5761   2859 FD 42 C4 31   mov [__divi], b
5762   285D 27            mov b, a
5763   285E E4            pop a
5764   285F 0A 0A 28      jmp _for97_cond
5765   2862             _for97_exit:
5766   2862             _if99_cond:
5767   2862 29 C6 31      mov b, [__allzeroes] ; allzeroes
5768   2865 D7            push a
5769   2866 11            mov a, b
5770   2867 26 01 00      mov b, 1
5771   286A B0            cmp a, b
5772   286B 0E            lodflgs
5773   286C 87 01         and al, %00000001 ; ==
5774   286E 22 00         mov ah, 0
5775   2870 27            mov b, a
5776   2871 E4            pop a
5777   2872 C0 00 00      cmp b, 0
5778   2875 C6 7D 28      je _if99_exit
5779   2878             _if99_true:
5780   2878 F9            leave
5781   2879 09            ret
5782   287A 0A 7D 28      jmp _if99_exit
5783   287D             _if99_exit:
5784   287D             _while100_cond:
5785   287D 29 D6 30      mov b, [__anarr]
5786   2880 D7            push a
5787   2881 74            mov d, b
5788   2882 DA            push d
5789   2883 26 0B 00      mov b, 11
5790   2886 E7            pop d
5791   2887 10 02 00      mov a, 2
5792   288A AC            mul a, b
5793   288B 5A            add d, b
5794   288C 2A            mov b, [d]
5795   288D E4            pop a
5796   288E D7            push a
5797   288F 11            mov a, b
5798   2890 26 00 00      mov b, 0
5799   2893 B0            cmp a, b
5800   2894 0E            lodflgs
5801   2895 87 01         and al, %00000001 ; ==
5802   2897 22 00         mov ah, 0
5803   2899 27            mov b, a
5804   289A E4            pop a
5805   289B C0 00 00      cmp b, 0
5806   289E C6 34 29      je _while100_exit
5807   28A1             _while100_block:
5808   28A1             _for101_init:
5809   28A1 26 00 00      mov b, 0
5810   28A4 FD 42 C4 31   mov [__divi], b
5811   28A8             _for101_cond:
5812   28A8 29 C4 31      mov b, [__divi] ; divi
5813   28AB D7            push a
5814   28AC 11            mov a, b
5815   28AD 26 0B 00      mov b, 11
5816   28B0 B0            cmp a, b
5817   28B1 0E            lodflgs
5818   28B2 87 02         and al, %00000010 ; <
5819   28B4 FD 9C         shr al
5820   28B6 22 00         mov ah, 0
5821   28B8 27            mov b, a
5822   28B9 E4            pop a
5823   28BA C0 00 00      cmp b, 0
5824   28BD C6 0D 29      je _for101_exit
5825   28C0             _for101_block:
5826   28C0 29 D6 30      mov b, [__anarr]
5827   28C3 D7            push a
5828   28C4 74            mov d, b
5829   28C5 DA            push d
5830   28C6 26 0B 00      mov b, 11
5831   28C9 D7            push a
5832   28CA 11            mov a, b
5833   28CB 29 C4 31      mov b, [__divi] ; divi
5834   28CE 60            sub a, b
5835   28CF 27            mov b, a
5836   28D0 E4            pop a
5837   28D1 E7            pop d
5838   28D2 10 02 00      mov a, 2
5839   28D5 AC            mul a, b
5840   28D6 5A            add d, b
5841   28D7 E4            pop a
5842   28D8 DA            push d
5843   28D9 29 D6 30      mov b, [__anarr]
5844   28DC D7            push a
5845   28DD 74            mov d, b
5846   28DE DA            push d
5847   28DF 26 0B 00      mov b, 11
5848   28E2 D7            push a
5849   28E3 11            mov a, b
5850   28E4 29 C4 31      mov b, [__divi] ; divi
5851   28E7 60            sub a, b
5852   28E8 27            mov b, a
5853   28E9 E4            pop a
5854   28EA D7            push a
5855   28EB 11            mov a, b
5856   28EC 26 01 00      mov b, 1
5857   28EF 60            sub a, b
5858   28F0 27            mov b, a
5859   28F1 E4            pop a
5860   28F2 E7            pop d
5861   28F3 10 02 00      mov a, 2
5862   28F6 AC            mul a, b
5863   28F7 5A            add d, b
5864   28F8 2A            mov b, [d]
5865   28F9 E4            pop a
5866   28FA E7            pop d
5867   28FB FD 43         mov [d], b
5868   28FD             _for101_update:
5869   28FD 29 C4 31      mov b, [__divi] ; divi
5870   2900 D7            push a
5871   2901 11            mov a, b
5872   2902 FD 77         inc b
5873   2904 FD 42 C4 31   mov [__divi], b
5874   2908 27            mov b, a
5875   2909 E4            pop a
5876   290A 0A A8 28      jmp _for101_cond
5877   290D             _for101_exit:
5878   290D 29 D6 30      mov b, [__anarr]
5879   2910 D7            push a
5880   2911 74            mov d, b
5881   2912 DA            push d
5882   2913 26 00 00      mov b, 0
5883   2916 E7            pop d
5884   2917 10 02 00      mov a, 2
5885   291A AC            mul a, b
5886   291B 5A            add d, b
5887   291C E4            pop a
5888   291D DA            push d
5889   291E 26 00 00      mov b, 0
5890   2921 E7            pop d
5891   2922 FD 43         mov [d], b
5892   2924 29 BE 31      mov b, [__alshift] ; alshift
5893   2927 D7            push a
5894   2928 11            mov a, b
5895   2929 FD 77         inc b
5896   292B FD 42 BE 31   mov [__alshift], b
5897   292F 27            mov b, a
5898   2930 E4            pop a
5899   2931 0A 7D 28      jmp _while100_cond
5900   2934             _while100_exit:
5901   2934 26 00 00      mov b, 0
5902   2937 FD 42 C2 31   mov [__segmentcounter], b
5903   293B 26 00 00      mov b, 0
5904   293E FD 42 C0 31   mov [__divcounter], b
5905   2942             _while102_cond:
5906   2942 29 C2 31      mov b, [__segmentcounter] ; segmentcounter
5907   2945 D7            push a
5908   2946 11            mov a, b
5909   2947 26 0C 00      mov b, 12
5910   294A B0            cmp a, b
5911   294B 0E            lodflgs
5912   294C 87 02         and al, %00000010 ; <
5913   294E FD 9C         shr al
5914   2950 22 00         mov ah, 0
5915   2952 27            mov b, a
5916   2953 E4            pop a
5917   2954 C0 00 00      cmp b, 0
5918   2957 C6 E4 2B      je _while102_exit
5919   295A             _while102_block:
5920   295A             _while103_cond:
5921   295A 29 D6 30      mov b, [__anarr]
5922   295D D7            push a
5923   295E 74            mov d, b
5924   295F DA            push d
5925   2960 26 0B 00      mov b, 11
5926   2963 E7            pop d
5927   2964 10 02 00      mov a, 2
5928   2967 AC            mul a, b
5929   2968 5A            add d, b
5930   2969 2A            mov b, [d]
5931   296A E4            pop a
5932   296B D7            push a
5933   296C 11            mov a, b
5934   296D 26 00 00      mov b, 0
5935   2970 B0            cmp a, b
5936   2971 0E            lodflgs
5937   2972 87 01         and al, %00000001
5938   2974 8F 01         xor al, %00000001 ; !=
5939   2976 22 00         mov ah, 0
5940   2978 27            mov b, a
5941   2979 E4            pop a
5942   297A C0 00 00      cmp b, 0
5943   297D C6 FE 29      je _while103_exit
5944   2980             _while103_block:
5945   2980 07 E2 1A      call pminus
5946   2983 29 C0 31      mov b, [__divcounter] ; divcounter
5947   2986 D7            push a
5948   2987 11            mov a, b
5949   2988 FD 77         inc b
5950   298A FD 42 C0 31   mov [__divcounter], b
5951   298E 27            mov b, a
5952   298F E4            pop a
5953   2990             _for104_init:
5954   2990 26 00 00      mov b, 0
5955   2993 FD 42 C4 31   mov [__divi], b
5956   2997             _for104_cond:
5957   2997 29 C4 31      mov b, [__divi] ; divi
5958   299A D7            push a
5959   299B 11            mov a, b
5960   299C 26 0C 00      mov b, 12
5961   299F B0            cmp a, b
5962   29A0 0E            lodflgs
5963   29A1 87 02         and al, %00000010 ; <
5964   29A3 FD 9C         shr al
5965   29A5 22 00         mov ah, 0
5966   29A7 27            mov b, a
5967   29A8 E4            pop a
5968   29A9 C0 00 00      cmp b, 0
5969   29AC C6 FB 29      je _for104_exit
5970   29AF             _for104_block:
5971   29AF 29 D6 30      mov b, [__anarr]
5972   29B2 D7            push a
5973   29B3 74            mov d, b
5974   29B4 DA            push d
5975   29B5 29 C4 31      mov b, [__divi] ; divi
5976   29B8 E7            pop d
5977   29B9 10 02 00      mov a, 2
5978   29BC AC            mul a, b
5979   29BD 5A            add d, b
5980   29BE E4            pop a
5981   29BF DA            push d
5982   29C0 29 3E 31      mov b, [__cnarr]
5983   29C3 D7            push a
5984   29C4 74            mov d, b
5985   29C5 DA            push d
5986   29C6 29 C4 31      mov b, [__divi] ; divi
5987   29C9 E7            pop d
5988   29CA 10 02 00      mov a, 2
5989   29CD AC            mul a, b
5990   29CE 5A            add d, b
5991   29CF 2A            mov b, [d]
5992   29D0 E4            pop a
5993   29D1 E7            pop d
5994   29D2 FD 43         mov [d], b
5995   29D4 29 3E 31      mov b, [__cnarr]
5996   29D7 D7            push a
5997   29D8 74            mov d, b
5998   29D9 DA            push d
5999   29DA 29 C4 31      mov b, [__divi] ; divi
6000   29DD E7            pop d
6001   29DE 10 02 00      mov a, 2
6002   29E1 AC            mul a, b
6003   29E2 5A            add d, b
6004   29E3 E4            pop a
6005   29E4 DA            push d
6006   29E5 26 00 00      mov b, 0
6007   29E8 E7            pop d
6008   29E9 FD 43         mov [d], b
6009   29EB             _for104_update:
6010   29EB 29 C4 31      mov b, [__divi] ; divi
6011   29EE D7            push a
6012   29EF 11            mov a, b
6013   29F0 FD 77         inc b
6014   29F2 FD 42 C4 31   mov [__divi], b
6015   29F6 27            mov b, a
6016   29F7 E4            pop a
6017   29F8 0A 97 29      jmp _for104_cond
6018   29FB             _for104_exit:
6019   29FB 0A 5A 29      jmp _while103_cond
6020   29FE             _while103_exit:
6021   29FE 29 8A 31      mov b, [__divres]
6022   2A01 D7            push a
6023   2A02 74            mov d, b
6024   2A03 DA            push d
6025   2A04 26 0B 00      mov b, 11
6026   2A07 D7            push a
6027   2A08 11            mov a, b
6028   2A09 29 C2 31      mov b, [__segmentcounter] ; segmentcounter
6029   2A0C 60            sub a, b
6030   2A0D 27            mov b, a
6031   2A0E E4            pop a
6032   2A0F E7            pop d
6033   2A10 10 02 00      mov a, 2
6034   2A13 AC            mul a, b
6035   2A14 5A            add d, b
6036   2A15 E4            pop a
6037   2A16 DA            push d
6038   2A17 29 C0 31      mov b, [__divcounter] ; divcounter
6039   2A1A E7            pop d
6040   2A1B FD 43         mov [d], b
6041   2A1D 26 00 00      mov b, 0
6042   2A20 FD 42 C0 31   mov [__divcounter], b
6043   2A24 29 C2 31      mov b, [__segmentcounter] ; segmentcounter
6044   2A27 D7            push a
6045   2A28 11            mov a, b
6046   2A29 FD 77         inc b
6047   2A2B FD 42 C2 31   mov [__segmentcounter], b
6048   2A2F 27            mov b, a
6049   2A30 E4            pop a
6050   2A31 26 01 00      mov b, 1
6051   2A34 FD 42 C6 31   mov [__allzeroes], b
6052   2A38             _for105_init:
6053   2A38 26 00 00      mov b, 0
6054   2A3B FD 42 C4 31   mov [__divi], b
6055   2A3F             _for105_cond:
6056   2A3F 29 C4 31      mov b, [__divi] ; divi
6057   2A42 D7            push a
6058   2A43 11            mov a, b
6059   2A44 26 0C 00      mov b, 12
6060   2A47 B0            cmp a, b
6061   2A48 0E            lodflgs
6062   2A49 87 02         and al, %00000010 ; <
6063   2A4B FD 9C         shr al
6064   2A4D 22 00         mov ah, 0
6065   2A4F 27            mov b, a
6066   2A50 E4            pop a
6067   2A51 C0 00 00      cmp b, 0
6068   2A54 C6 97 2A      je _for105_exit
6069   2A57             _for105_block:
6070   2A57             _if106_cond:
6071   2A57 29 D6 30      mov b, [__anarr]
6072   2A5A D7            push a
6073   2A5B 74            mov d, b
6074   2A5C DA            push d
6075   2A5D 29 C4 31      mov b, [__divi] ; divi
6076   2A60 E7            pop d
6077   2A61 10 02 00      mov a, 2
6078   2A64 AC            mul a, b
6079   2A65 5A            add d, b
6080   2A66 2A            mov b, [d]
6081   2A67 E4            pop a
6082   2A68 D7            push a
6083   2A69 11            mov a, b
6084   2A6A 26 00 00      mov b, 0
6085   2A6D B0            cmp a, b
6086   2A6E 0E            lodflgs
6087   2A6F 87 01         and al, %00000001
6088   2A71 8F 01         xor al, %00000001 ; !=
6089   2A73 22 00         mov ah, 0
6090   2A75 27            mov b, a
6091   2A76 E4            pop a
6092   2A77 C0 00 00      cmp b, 0
6093   2A7A C6 87 2A      je _if106_exit
6094   2A7D             _if106_true:
6095   2A7D 26 00 00      mov b, 0
6096   2A80 FD 42 C6 31   mov [__allzeroes], b
6097   2A84 0A 87 2A      jmp _if106_exit
6098   2A87             _if106_exit:
6099   2A87             _for105_update:
6100   2A87 29 C4 31      mov b, [__divi] ; divi
6101   2A8A D7            push a
6102   2A8B 11            mov a, b
6103   2A8C FD 77         inc b
6104   2A8E FD 42 C4 31   mov [__divi], b
6105   2A92 27            mov b, a
6106   2A93 E4            pop a
6107   2A94 0A 3F 2A      jmp _for105_cond
6108   2A97             _for105_exit:
6109   2A97             _if107_cond:
6110   2A97 29 C6 31      mov b, [__allzeroes] ; allzeroes
6111   2A9A D7            push a
6112   2A9B 11            mov a, b
6113   2A9C 26 01 00      mov b, 1
6114   2A9F B0            cmp a, b
6115   2AA0 0E            lodflgs
6116   2AA1 87 01         and al, %00000001 ; ==
6117   2AA3 22 00         mov ah, 0
6118   2AA5 27            mov b, a
6119   2AA6 E4            pop a
6120   2AA7 C0 00 00      cmp b, 0
6121   2AAA C6 B2 2A      je _if107_exit
6122   2AAD             _if107_true:
6123   2AAD F9            leave
6124   2AAE 09            ret
6125   2AAF 0A B2 2A      jmp _if107_exit
6126   2AB2             _if107_exit:
6127   2AB2             _while108_cond:
6128   2AB2 29 D6 30      mov b, [__anarr]
6129   2AB5 D7            push a
6130   2AB6 74            mov d, b
6131   2AB7 DA            push d
6132   2AB8 26 0B 00      mov b, 11
6133   2ABB E7            pop d
6134   2ABC 10 02 00      mov a, 2
6135   2ABF AC            mul a, b
6136   2AC0 5A            add d, b
6137   2AC1 2A            mov b, [d]
6138   2AC2 E4            pop a
6139   2AC3 D7            push a
6140   2AC4 11            mov a, b
6141   2AC5 26 00 00      mov b, 0
6142   2AC8 B0            cmp a, b
6143   2AC9 0E            lodflgs
6144   2ACA 87 01         and al, %00000001 ; ==
6145   2ACC 22 00         mov ah, 0
6146   2ACE 27            mov b, a
6147   2ACF E4            pop a
6148   2AD0 C0 00 00      cmp b, 0
6149   2AD3 C6 E1 2B      je _while108_exit
6150   2AD6             _while108_block:
6151   2AD6             _for109_init:
6152   2AD6 26 00 00      mov b, 0
6153   2AD9 FD 42 C4 31   mov [__divi], b
6154   2ADD             _for109_cond:
6155   2ADD 29 C4 31      mov b, [__divi] ; divi
6156   2AE0 D7            push a
6157   2AE1 11            mov a, b
6158   2AE2 26 0B 00      mov b, 11
6159   2AE5 B0            cmp a, b
6160   2AE6 0E            lodflgs
6161   2AE7 87 02         and al, %00000010 ; <
6162   2AE9 FD 9C         shr al
6163   2AEB 22 00         mov ah, 0
6164   2AED 27            mov b, a
6165   2AEE E4            pop a
6166   2AEF C0 00 00      cmp b, 0
6167   2AF2 C6 42 2B      je _for109_exit
6168   2AF5             _for109_block:
6169   2AF5 29 D6 30      mov b, [__anarr]
6170   2AF8 D7            push a
6171   2AF9 74            mov d, b
6172   2AFA DA            push d
6173   2AFB 26 0B 00      mov b, 11
6174   2AFE D7            push a
6175   2AFF 11            mov a, b
6176   2B00 29 C4 31      mov b, [__divi] ; divi
6177   2B03 60            sub a, b
6178   2B04 27            mov b, a
6179   2B05 E4            pop a
6180   2B06 E7            pop d
6181   2B07 10 02 00      mov a, 2
6182   2B0A AC            mul a, b
6183   2B0B 5A            add d, b
6184   2B0C E4            pop a
6185   2B0D DA            push d
6186   2B0E 29 D6 30      mov b, [__anarr]
6187   2B11 D7            push a
6188   2B12 74            mov d, b
6189   2B13 DA            push d
6190   2B14 26 0B 00      mov b, 11
6191   2B17 D7            push a
6192   2B18 11            mov a, b
6193   2B19 29 C4 31      mov b, [__divi] ; divi
6194   2B1C 60            sub a, b
6195   2B1D 27            mov b, a
6196   2B1E E4            pop a
6197   2B1F D7            push a
6198   2B20 11            mov a, b
6199   2B21 26 01 00      mov b, 1
6200   2B24 60            sub a, b
6201   2B25 27            mov b, a
6202   2B26 E4            pop a
6203   2B27 E7            pop d
6204   2B28 10 02 00      mov a, 2
6205   2B2B AC            mul a, b
6206   2B2C 5A            add d, b
6207   2B2D 2A            mov b, [d]
6208   2B2E E4            pop a
6209   2B2F E7            pop d
6210   2B30 FD 43         mov [d], b
6211   2B32             _for109_update:
6212   2B32 29 C4 31      mov b, [__divi] ; divi
6213   2B35 D7            push a
6214   2B36 11            mov a, b
6215   2B37 FD 77         inc b
6216   2B39 FD 42 C4 31   mov [__divi], b
6217   2B3D 27            mov b, a
6218   2B3E E4            pop a
6219   2B3F 0A DD 2A      jmp _for109_cond
6220   2B42             _for109_exit:
6221   2B42 29 D6 30      mov b, [__anarr]
6222   2B45 D7            push a
6223   2B46 74            mov d, b
6224   2B47 DA            push d
6225   2B48 26 00 00      mov b, 0
6226   2B4B E7            pop d
6227   2B4C 10 02 00      mov a, 2
6228   2B4F AC            mul a, b
6229   2B50 5A            add d, b
6230   2B51 E4            pop a
6231   2B52 DA            push d
6232   2B53 26 00 00      mov b, 0
6233   2B56 E7            pop d
6234   2B57 FD 43         mov [d], b
6235   2B59             _if110_cond:
6236   2B59 29 D6 30      mov b, [__anarr]
6237   2B5C D7            push a
6238   2B5D 74            mov d, b
6239   2B5E DA            push d
6240   2B5F 26 0B 00      mov b, 11
6241   2B62 E7            pop d
6242   2B63 10 02 00      mov a, 2
6243   2B66 AC            mul a, b
6244   2B67 5A            add d, b
6245   2B68 2A            mov b, [d]
6246   2B69 E4            pop a
6247   2B6A D7            push a
6248   2B6B 11            mov a, b
6249   2B6C 26 00 00      mov b, 0
6250   2B6F B0            cmp a, b
6251   2B70 0E            lodflgs
6252   2B71 87 01         and al, %00000001 ; ==
6253   2B73 22 00         mov ah, 0
6254   2B75 27            mov b, a
6255   2B76 E4            pop a
6256   2B77 C0 00 00      cmp b, 0
6257   2B7A C6 DE 2B      je _if110_exit
6258   2B7D             _if110_true:
6259   2B7D 29 8A 31      mov b, [__divres]
6260   2B80 D7            push a
6261   2B81 74            mov d, b
6262   2B82 DA            push d
6263   2B83 26 0B 00      mov b, 11
6264   2B86 D7            push a
6265   2B87 11            mov a, b
6266   2B88 29 C2 31      mov b, [__segmentcounter] ; segmentcounter
6267   2B8B 60            sub a, b
6268   2B8C 27            mov b, a
6269   2B8D E4            pop a
6270   2B8E E7            pop d
6271   2B8F 10 02 00      mov a, 2
6272   2B92 AC            mul a, b
6273   2B93 5A            add d, b
6274   2B94 E4            pop a
6275   2B95 DA            push d
6276   2B96 26 00 00      mov b, 0
6277   2B99 E7            pop d
6278   2B9A FD 43         mov [d], b
6279   2B9C 29 D6 30      mov b, [__anarr]
6280   2B9F D7            push a
6281   2BA0 74            mov d, b
6282   2BA1 DA            push d
6283   2BA2 26 00 00      mov b, 0
6284   2BA5 E7            pop d
6285   2BA6 10 02 00      mov a, 2
6286   2BA9 AC            mul a, b
6287   2BAA 5A            add d, b
6288   2BAB E4            pop a
6289   2BAC DA            push d
6290   2BAD 26 00 00      mov b, 0
6291   2BB0 E7            pop d
6292   2BB1 FD 43         mov [d], b
6293   2BB3 29 C2 31      mov b, [__segmentcounter] ; segmentcounter
6294   2BB6 D7            push a
6295   2BB7 11            mov a, b
6296   2BB8 FD 77         inc b
6297   2BBA FD 42 C2 31   mov [__segmentcounter], b
6298   2BBE 27            mov b, a
6299   2BBF E4            pop a
6300   2BC0             _if111_cond:
6301   2BC0 29 C2 31      mov b, [__segmentcounter] ; segmentcounter
6302   2BC3 D7            push a
6303   2BC4 11            mov a, b
6304   2BC5 26 0C 00      mov b, 12
6305   2BC8 B0            cmp a, b
6306   2BC9 0E            lodflgs
6307   2BCA 87 01         and al, %00000001 ; ==
6308   2BCC 22 00         mov ah, 0
6309   2BCE 27            mov b, a
6310   2BCF E4            pop a
6311   2BD0 C0 00 00      cmp b, 0
6312   2BD3 C6 DB 2B      je _if111_exit
6313   2BD6             _if111_true:
6314   2BD6 F9            leave
6315   2BD7 09            ret
6316   2BD8 0A DB 2B      jmp _if111_exit
6317   2BDB             _if111_exit:
6318   2BDB 0A DE 2B      jmp _if110_exit
6319   2BDE             _if110_exit:
6320   2BDE 0A B2 2A      jmp _while108_cond
6321   2BE1             _while108_exit:
6322   2BE1 0A 42 29      jmp _while102_cond
6323   2BE4             _while102_exit:
6324   2BE4 F9            leave
6325   2BE5 09            ret
6326   2BE6             
6327   2BE6             normdivres:
6328   2BE6 D2            push bp
6329   2BE7 9B            mov bp, sp
6330   2BE8             _for112_init:
6331   2BE8 26 0C 00      mov b, 12
6332   2BEB FD 42 C4 31   mov [__divi], b
6333   2BEF             _for112_cond:
6334   2BEF 29 C4 31      mov b, [__divi] ; divi
6335   2BF2 D7            push a
6336   2BF3 11            mov a, b
6337   2BF4 26 18 00      mov b, 24
6338   2BF7 B0            cmp a, b
6339   2BF8 0E            lodflgs
6340   2BF9 87 02         and al, %00000010 ; <
6341   2BFB FD 9C         shr al
6342   2BFD 22 00         mov ah, 0
6343   2BFF 27            mov b, a
6344   2C00 E4            pop a
6345   2C01 C0 00 00      cmp b, 0
6346   2C04 C6 2E 2C      je _for112_exit
6347   2C07             _for112_block:
6348   2C07 29 70 31      mov b, [__mulres]
6349   2C0A D7            push a
6350   2C0B 74            mov d, b
6351   2C0C DA            push d
6352   2C0D 29 C4 31      mov b, [__divi] ; divi
6353   2C10 E7            pop d
6354   2C11 10 02 00      mov a, 2
6355   2C14 AC            mul a, b
6356   2C15 5A            add d, b
6357   2C16 E4            pop a
6358   2C17 DA            push d
6359   2C18 26 00 00      mov b, 0
6360   2C1B E7            pop d
6361   2C1C FD 43         mov [d], b
6362   2C1E             _for112_update:
6363   2C1E 29 C4 31      mov b, [__divi] ; divi
6364   2C21 D7            push a
6365   2C22 11            mov a, b
6366   2C23 FD 77         inc b
6367   2C25 FD 42 C4 31   mov [__divi], b
6368   2C29 27            mov b, a
6369   2C2A E4            pop a
6370   2C2B 0A EF 2B      jmp _for112_cond
6371   2C2E             _for112_exit:
6372   2C2E             _for113_init:
6373   2C2E 26 00 00      mov b, 0
6374   2C31 FD 42 C4 31   mov [__divi], b
6375   2C35             _for113_cond:
6376   2C35 29 C4 31      mov b, [__divi] ; divi
6377   2C38 D7            push a
6378   2C39 11            mov a, b
6379   2C3A 26 0C 00      mov b, 12
6380   2C3D B0            cmp a, b
6381   2C3E 0E            lodflgs
6382   2C3F 87 02         and al, %00000010 ; <
6383   2C41 FD 9C         shr al
6384   2C43 22 00         mov ah, 0
6385   2C45 27            mov b, a
6386   2C46 E4            pop a
6387   2C47 C0 00 00      cmp b, 0
6388   2C4A C6 82 2C      je _for113_exit
6389   2C4D             _for113_block:
6390   2C4D 29 70 31      mov b, [__mulres]
6391   2C50 D7            push a
6392   2C51 74            mov d, b
6393   2C52 DA            push d
6394   2C53 29 C4 31      mov b, [__divi] ; divi
6395   2C56 E7            pop d
6396   2C57 10 02 00      mov a, 2
6397   2C5A AC            mul a, b
6398   2C5B 5A            add d, b
6399   2C5C E4            pop a
6400   2C5D DA            push d
6401   2C5E 29 8A 31      mov b, [__divres]
6402   2C61 D7            push a
6403   2C62 74            mov d, b
6404   2C63 DA            push d
6405   2C64 29 C4 31      mov b, [__divi] ; divi
6406   2C67 E7            pop d
6407   2C68 10 02 00      mov a, 2
6408   2C6B AC            mul a, b
6409   2C6C 5A            add d, b
6410   2C6D 2A            mov b, [d]
6411   2C6E E4            pop a
6412   2C6F E7            pop d
6413   2C70 FD 43         mov [d], b
6414   2C72             _for113_update:
6415   2C72 29 C4 31      mov b, [__divi] ; divi
6416   2C75 D7            push a
6417   2C76 11            mov a, b
6418   2C77 FD 77         inc b
6419   2C79 FD 42 C4 31   mov [__divi], b
6420   2C7D 27            mov b, a
6421   2C7E E4            pop a
6422   2C7F 0A 35 2C      jmp _for113_cond
6423   2C82             _for113_exit:
6424   2C82 07 53 22      call normmulres
6425   2C85             _for114_init:
6426   2C85 26 00 00      mov b, 0
6427   2C88 FD 42 CA 31   mov [__divshift], b
6428   2C8C             _for114_cond:
6429   2C8C 29 CA 31      mov b, [__divshift] ; divshift
6430   2C8F D7            push a
6431   2C90 11            mov a, b
6432   2C91 26 0B 00      mov b, 11
6433   2C94 B0            cmp a, b
6434   2C95 0E            lodflgs
6435   2C96 87 02         and al, %00000010 ; <
6436   2C98 FD 9C         shr al
6437   2C9A 22 00         mov ah, 0
6438   2C9C 27            mov b, a
6439   2C9D E4            pop a
6440   2C9E C0 00 00      cmp b, 0
6441   2CA1 C6 37 2D      je _for114_exit
6442   2CA4             _for114_block:
6443   2CA4             _for115_init:
6444   2CA4 26 00 00      mov b, 0
6445   2CA7 FD 42 C4 31   mov [__divi], b
6446   2CAB             _for115_cond:
6447   2CAB 29 C4 31      mov b, [__divi] ; divi
6448   2CAE D7            push a
6449   2CAF 11            mov a, b
6450   2CB0 26 17 00      mov b, 23
6451   2CB3 B0            cmp a, b
6452   2CB4 0E            lodflgs
6453   2CB5 87 02         and al, %00000010 ; <
6454   2CB7 FD 9C         shr al
6455   2CB9 22 00         mov ah, 0
6456   2CBB 27            mov b, a
6457   2CBC E4            pop a
6458   2CBD C0 00 00      cmp b, 0
6459   2CC0 C6 10 2D      je _for115_exit
6460   2CC3             _for115_block:
6461   2CC3 29 70 31      mov b, [__mulres]
6462   2CC6 D7            push a
6463   2CC7 74            mov d, b
6464   2CC8 DA            push d
6465   2CC9 26 17 00      mov b, 23
6466   2CCC D7            push a
6467   2CCD 11            mov a, b
6468   2CCE 29 C4 31      mov b, [__divi] ; divi
6469   2CD1 60            sub a, b
6470   2CD2 27            mov b, a
6471   2CD3 E4            pop a
6472   2CD4 E7            pop d
6473   2CD5 10 02 00      mov a, 2
6474   2CD8 AC            mul a, b
6475   2CD9 5A            add d, b
6476   2CDA E4            pop a
6477   2CDB DA            push d
6478   2CDC 29 70 31      mov b, [__mulres]
6479   2CDF D7            push a
6480   2CE0 74            mov d, b
6481   2CE1 DA            push d
6482   2CE2 26 17 00      mov b, 23
6483   2CE5 D7            push a
6484   2CE6 11            mov a, b
6485   2CE7 29 C4 31      mov b, [__divi] ; divi
6486   2CEA 60            sub a, b
6487   2CEB 27            mov b, a
6488   2CEC E4            pop a
6489   2CED D7            push a
6490   2CEE 11            mov a, b
6491   2CEF 26 01 00      mov b, 1
6492   2CF2 60            sub a, b
6493   2CF3 27            mov b, a
6494   2CF4 E4            pop a
6495   2CF5 E7            pop d
6496   2CF6 10 02 00      mov a, 2
6497   2CF9 AC            mul a, b
6498   2CFA 5A            add d, b
6499   2CFB 2A            mov b, [d]
6500   2CFC E4            pop a
6501   2CFD E7            pop d
6502   2CFE FD 43         mov [d], b
6503   2D00             _for115_update:
6504   2D00 29 C4 31      mov b, [__divi] ; divi
6505   2D03 D7            push a
6506   2D04 11            mov a, b
6507   2D05 FD 77         inc b
6508   2D07 FD 42 C4 31   mov [__divi], b
6509   2D0B 27            mov b, a
6510   2D0C E4            pop a
6511   2D0D 0A AB 2C      jmp _for115_cond
6512   2D10             _for115_exit:
6513   2D10 29 70 31      mov b, [__mulres]
6514   2D13 D7            push a
6515   2D14 74            mov d, b
6516   2D15 DA            push d
6517   2D16 26 00 00      mov b, 0
6518   2D19 E7            pop d
6519   2D1A 10 02 00      mov a, 2
6520   2D1D AC            mul a, b
6521   2D1E 5A            add d, b
6522   2D1F E4            pop a
6523   2D20 DA            push d
6524   2D21 26 00 00      mov b, 0
6525   2D24 E7            pop d
6526   2D25 FD 43         mov [d], b
6527   2D27             _for114_update:
6528   2D27 29 CA 31      mov b, [__divshift] ; divshift
6529   2D2A D7            push a
6530   2D2B 11            mov a, b
6531   2D2C FD 77         inc b
6532   2D2E FD 42 CA 31   mov [__divshift], b
6533   2D32 27            mov b, a
6534   2D33 E4            pop a
6535   2D34 0A 8C 2C      jmp _for114_cond
6536   2D37             _for114_exit:
6537   2D37             _for116_init:
6538   2D37 26 00 00      mov b, 0
6539   2D3A FD 42 C4 31   mov [__divi], b
6540   2D3E             _for116_cond:
6541   2D3E 29 C4 31      mov b, [__divi] ; divi
6542   2D41 D7            push a
6543   2D42 11            mov a, b
6544   2D43 26 0C 00      mov b, 12
6545   2D46 B0            cmp a, b
6546   2D47 0E            lodflgs
6547   2D48 87 02         and al, %00000010 ; <
6548   2D4A FD 9C         shr al
6549   2D4C 22 00         mov ah, 0
6550   2D4E 27            mov b, a
6551   2D4F E4            pop a
6552   2D50 C0 00 00      cmp b, 0
6553   2D53 C6 93 2D      je _for116_exit
6554   2D56             _for116_block:
6555   2D56 29 8A 31      mov b, [__divres]
6556   2D59 D7            push a
6557   2D5A 74            mov d, b
6558   2D5B DA            push d
6559   2D5C 29 C4 31      mov b, [__divi] ; divi
6560   2D5F E7            pop d
6561   2D60 10 02 00      mov a, 2
6562   2D63 AC            mul a, b
6563   2D64 5A            add d, b
6564   2D65 E4            pop a
6565   2D66 DA            push d
6566   2D67 29 70 31      mov b, [__mulres]
6567   2D6A D7            push a
6568   2D6B 74            mov d, b
6569   2D6C DA            push d
6570   2D6D 29 C4 31      mov b, [__divi] ; divi
6571   2D70 D7            push a
6572   2D71 11            mov a, b
6573   2D72 26 0C 00      mov b, 12
6574   2D75 54            add a, b
6575   2D76 27            mov b, a
6576   2D77 E4            pop a
6577   2D78 E7            pop d
6578   2D79 10 02 00      mov a, 2
6579   2D7C AC            mul a, b
6580   2D7D 5A            add d, b
6581   2D7E 2A            mov b, [d]
6582   2D7F E4            pop a
6583   2D80 E7            pop d
6584   2D81 FD 43         mov [d], b
6585   2D83             _for116_update:
6586   2D83 29 C4 31      mov b, [__divi] ; divi
6587   2D86 D7            push a
6588   2D87 11            mov a, b
6589   2D88 FD 77         inc b
6590   2D8A FD 42 C4 31   mov [__divi], b
6591   2D8E 27            mov b, a
6592   2D8F E4            pop a
6593   2D90 0A 3E 2D      jmp _for116_cond
6594   2D93             _for116_exit:
6595   2D93 F9            leave
6596   2D94 09            ret
6597   2D95             
6598   2D95             times:
6599   2D95 D2            push bp
6600   2D96 9B            mov bp, sp
6601   2D97 07 2C 14      call fixsignin
6602   2D9A 26 00 00      mov b, 0
6603   2D9D FD 42 90 31   mov [__csign], b
6604   2DA1             _if117_cond:
6605   2DA1 29 8C 31      mov b, [__asign] ; asign
6606   2DA4 D7            push a
6607   2DA5 11            mov a, b
6608   2DA6 29 8E 31      mov b, [__bsign] ; bsign
6609   2DA9 B0            cmp a, b
6610   2DAA 0E            lodflgs
6611   2DAB 87 01         and al, %00000001
6612   2DAD 8F 01         xor al, %00000001 ; !=
6613   2DAF 22 00         mov ah, 0
6614   2DB1 27            mov b, a
6615   2DB2 E4            pop a
6616   2DB3 C0 00 00      cmp b, 0
6617   2DB6 C6 C3 2D      je _if117_exit
6618   2DB9             _if117_true:
6619   2DB9 26 01 00      mov b, 1
6620   2DBC FD 42 90 31   mov [__csign], b
6621   2DC0 0A C3 2D      jmp _if117_exit
6622   2DC3             _if117_exit:
6623   2DC3 26 00 00      mov b, 0
6624   2DC6 FD 42 8C 31   mov [__asign], b
6625   2DCA 26 00 00      mov b, 0
6626   2DCD FD 42 8E 31   mov [__bsign], b
6627   2DD1 07 7D 24      call prototimes
6628   2DD4 26 01 00      mov b, 1
6629   2DD7 FD 42 C6 31   mov [__allzeroes], b
6630   2DDB             _for118_init:
6631   2DDB 26 0F 00      mov b, 15
6632   2DDE FD 42 94 31   mov [__pos], b
6633   2DE2             _for118_cond:
6634   2DE2 29 94 31      mov b, [__pos] ; pos
6635   2DE5 D7            push a
6636   2DE6 11            mov a, b
6637   2DE7 26 18 00      mov b, 24
6638   2DEA B0            cmp a, b
6639   2DEB 0E            lodflgs
6640   2DEC 87 02         and al, %00000010 ; <
6641   2DEE FD 9C         shr al
6642   2DF0 22 00         mov ah, 0
6643   2DF2 27            mov b, a
6644   2DF3 E4            pop a
6645   2DF4 C0 00 00      cmp b, 0
6646   2DF7 C6 3A 2E      je _for118_exit
6647   2DFA             _for118_block:
6648   2DFA             _if119_cond:
6649   2DFA 29 70 31      mov b, [__mulres]
6650   2DFD D7            push a
6651   2DFE 74            mov d, b
6652   2DFF DA            push d
6653   2E00 29 94 31      mov b, [__pos] ; pos
6654   2E03 E7            pop d
6655   2E04 10 02 00      mov a, 2
6656   2E07 AC            mul a, b
6657   2E08 5A            add d, b
6658   2E09 2A            mov b, [d]
6659   2E0A E4            pop a
6660   2E0B D7            push a
6661   2E0C 11            mov a, b
6662   2E0D 26 00 00      mov b, 0
6663   2E10 B0            cmp a, b
6664   2E11 0E            lodflgs
6665   2E12 87 01         and al, %00000001
6666   2E14 8F 01         xor al, %00000001 ; !=
6667   2E16 22 00         mov ah, 0
6668   2E18 27            mov b, a
6669   2E19 E4            pop a
6670   2E1A C0 00 00      cmp b, 0
6671   2E1D C6 2A 2E      je _if119_exit
6672   2E20             _if119_true:
6673   2E20 26 00 00      mov b, 0
6674   2E23 FD 42 C6 31   mov [__allzeroes], b
6675   2E27 0A 2A 2E      jmp _if119_exit
6676   2E2A             _if119_exit:
6677   2E2A             _for118_update:
6678   2E2A 29 94 31      mov b, [__pos] ; pos
6679   2E2D D7            push a
6680   2E2E 11            mov a, b
6681   2E2F FD 77         inc b
6682   2E31 FD 42 94 31   mov [__pos], b
6683   2E35 27            mov b, a
6684   2E36 E4            pop a
6685   2E37 0A E2 2D      jmp _for118_cond
6686   2E3A             _for118_exit:
6687   2E3A             _if120_cond:
6688   2E3A 29 C6 31      mov b, [__allzeroes] ; allzeroes
6689   2E3D D7            push a
6690   2E3E 11            mov a, b
6691   2E3F 26 01 00      mov b, 1
6692   2E42 B0            cmp a, b
6693   2E43 0E            lodflgs
6694   2E44 87 01         and al, %00000001 ; ==
6695   2E46 22 00         mov ah, 0
6696   2E48 27            mov b, a
6697   2E49 E4            pop a
6698   2E4A C0 00 00      cmp b, 0
6699   2E4D C6 AF 2E      je _if120_exit
6700   2E50             _if120_true:
6701   2E50             _for121_init:
6702   2E50 26 04 00      mov b, 4
6703   2E53 FD 42 94 31   mov [__pos], b
6704   2E57             _for121_cond:
6705   2E57 29 94 31      mov b, [__pos] ; pos
6706   2E5A D7            push a
6707   2E5B 11            mov a, b
6708   2E5C 26 0F 00      mov b, 15
6709   2E5F B0            cmp a, b
6710   2E60 0E            lodflgs
6711   2E61 87 02         and al, %00000010 ; <
6712   2E63 FD 9C         shr al
6713   2E65 22 00         mov ah, 0
6714   2E67 27            mov b, a
6715   2E68 E4            pop a
6716   2E69 C0 00 00      cmp b, 0
6717   2E6C C6 AC 2E      je _for121_exit
6718   2E6F             _for121_block:
6719   2E6F 29 3E 31      mov b, [__cnarr]
6720   2E72 D7            push a
6721   2E73 74            mov d, b
6722   2E74 DA            push d
6723   2E75 29 94 31      mov b, [__pos] ; pos
6724   2E78 D7            push a
6725   2E79 11            mov a, b
6726   2E7A 26 04 00      mov b, 4
6727   2E7D 60            sub a, b
6728   2E7E 27            mov b, a
6729   2E7F E4            pop a
6730   2E80 E7            pop d
6731   2E81 10 02 00      mov a, 2
6732   2E84 AC            mul a, b
6733   2E85 5A            add d, b
6734   2E86 E4            pop a
6735   2E87 DA            push d
6736   2E88 29 70 31      mov b, [__mulres]
6737   2E8B D7            push a
6738   2E8C 74            mov d, b
6739   2E8D DA            push d
6740   2E8E 29 94 31      mov b, [__pos] ; pos
6741   2E91 E7            pop d
6742   2E92 10 02 00      mov a, 2
6743   2E95 AC            mul a, b
6744   2E96 5A            add d, b
6745   2E97 2A            mov b, [d]
6746   2E98 E4            pop a
6747   2E99 E7            pop d
6748   2E9A FD 43         mov [d], b
6749   2E9C             _for121_update:
6750   2E9C 29 94 31      mov b, [__pos] ; pos
6751   2E9F D7            push a
6752   2EA0 11            mov a, b
6753   2EA1 FD 77         inc b
6754   2EA3 FD 42 94 31   mov [__pos], b
6755   2EA7 27            mov b, a
6756   2EA8 E4            pop a
6757   2EA9 0A 57 2E      jmp _for121_cond
6758   2EAC             _for121_exit:
6759   2EAC 0A AF 2E      jmp _if120_exit
6760   2EAF             _if120_exit:
6761   2EAF             _if122_cond:
6762   2EAF 29 3E 31      mov b, [__cnarr]
6763   2EB2 D7            push a
6764   2EB3 74            mov d, b
6765   2EB4 DA            push d
6766   2EB5 26 0B 00      mov b, 11
6767   2EB8 E7            pop d
6768   2EB9 10 02 00      mov a, 2
6769   2EBC AC            mul a, b
6770   2EBD 5A            add d, b
6771   2EBE 2A            mov b, [d]
6772   2EBF E4            pop a
6773   2EC0 D7            push a
6774   2EC1 11            mov a, b
6775   2EC2 26 09 00      mov b, 9
6776   2EC5 B0            cmp a, b
6777   2EC6 0E            lodflgs
6778   2EC7 87 03         and al, %00000011
6779   2EC9 B9 00         cmp al, 0
6780   2ECB 0E            lodflgs
6781   2ECC 22 00         mov ah, 0
6782   2ECE 27            mov b, a
6783   2ECF E4            pop a
6784   2ED0 C0 00 00      cmp b, 0
6785   2ED3 C6 1F 2F      je _if122_exit
6786   2ED6             _if122_true:
6787   2ED6             _for123_init:
6788   2ED6 26 00 00      mov b, 0
6789   2ED9 FD 42 94 31   mov [__pos], b
6790   2EDD             _for123_cond:
6791   2EDD 29 94 31      mov b, [__pos] ; pos
6792   2EE0 D7            push a
6793   2EE1 11            mov a, b
6794   2EE2 26 0A 00      mov b, 10
6795   2EE5 B0            cmp a, b
6796   2EE6 0E            lodflgs
6797   2EE7 87 02         and al, %00000010 ; <
6798   2EE9 FD 9C         shr al
6799   2EEB 22 00         mov ah, 0
6800   2EED 27            mov b, a
6801   2EEE E4            pop a
6802   2EEF C0 00 00      cmp b, 0
6803   2EF2 C6 1C 2F      je _for123_exit
6804   2EF5             _for123_block:
6805   2EF5 29 3E 31      mov b, [__cnarr]
6806   2EF8 D7            push a
6807   2EF9 74            mov d, b
6808   2EFA DA            push d
6809   2EFB 29 94 31      mov b, [__pos] ; pos
6810   2EFE E7            pop d
6811   2EFF 10 02 00      mov a, 2
6812   2F02 AC            mul a, b
6813   2F03 5A            add d, b
6814   2F04 E4            pop a
6815   2F05 DA            push d
6816   2F06 26 00 00      mov b, 0
6817   2F09 E7            pop d
6818   2F0A FD 43         mov [d], b
6819   2F0C             _for123_update:
6820   2F0C 29 94 31      mov b, [__pos] ; pos
6821   2F0F D7            push a
6822   2F10 11            mov a, b
6823   2F11 FD 77         inc b
6824   2F13 FD 42 94 31   mov [__pos], b
6825   2F17 27            mov b, a
6826   2F18 E4            pop a
6827   2F19 0A DD 2E      jmp _for123_cond
6828   2F1C             _for123_exit:
6829   2F1C 0A 1F 2F      jmp _if122_exit
6830   2F1F             _if122_exit:
6831   2F1F 07 A2 15      call fixcsizezero
6832   2F22 07 51 15      call fixsignout
6833   2F25 F9            leave
6834   2F26 09            ret
6835   2F27             
6836   2F27             dividedby:
6837   2F27 D2            push bp
6838   2F28 9B            mov bp, sp
6839   2F29 07 2C 14      call fixsignin
6840   2F2C 26 00 00      mov b, 0
6841   2F2F FD 42 90 31   mov [__csign], b
6842   2F33             _if124_cond:
6843   2F33 29 8C 31      mov b, [__asign] ; asign
6844   2F36 D7            push a
6845   2F37 11            mov a, b
6846   2F38 29 8E 31      mov b, [__bsign] ; bsign
6847   2F3B B0            cmp a, b
6848   2F3C 0E            lodflgs
6849   2F3D 87 01         and al, %00000001
6850   2F3F 8F 01         xor al, %00000001 ; !=
6851   2F41 22 00         mov ah, 0
6852   2F43 27            mov b, a
6853   2F44 E4            pop a
6854   2F45 C0 00 00      cmp b, 0
6855   2F48 C6 55 2F      je _if124_exit
6856   2F4B             _if124_true:
6857   2F4B 26 01 00      mov b, 1
6858   2F4E FD 42 90 31   mov [__csign], b
6859   2F52 0A 55 2F      jmp _if124_exit
6860   2F55             _if124_exit:
6861   2F55 26 00 00      mov b, 0
6862   2F58 FD 42 8C 31   mov [__asign], b
6863   2F5C 26 00 00      mov b, 0
6864   2F5F FD 42 8E 31   mov [__bsign], b
6865   2F63 29 90 31      mov b, [__csign] ; csign
6866   2F66 FD 42 C8 31   mov [__bkpcsign], b
6867   2F6A 07 CE 25      call protodividedby
6868   2F6D 07 E6 2B      call normdivres
6869   2F70             _if125_cond:
6870   2F70 29 BC 31      mov b, [__blshift] ; blshift
6871   2F73 D7            push a
6872   2F74 11            mov a, b
6873   2F75 26 06 00      mov b, 6
6874   2F78 54            add a, b
6875   2F79 27            mov b, a
6876   2F7A E4            pop a
6877   2F7B D7            push a
6878   2F7C 11            mov a, b
6879   2F7D 29 BE 31      mov b, [__alshift] ; alshift
6880   2F80 D7            push a
6881   2F81 11            mov a, b
6882   2F82 29 BA 31      mov b, [__brshift] ; brshift
6883   2F85 54            add a, b
6884   2F86 27            mov b, a
6885   2F87 E4            pop a
6886   2F88 B0            cmp a, b
6887   2F89 0E            lodflgs
6888   2F8A 87 03         and al, %00000011
6889   2F8C B9 00         cmp al, 0
6890   2F8E 0E            lodflgs
6891   2F8F 22 00         mov ah, 0
6892   2F91 27            mov b, a
6893   2F92 E4            pop a
6894   2F93 C0 00 00      cmp b, 0
6895   2F96 C6 49 30      je _if125_exit
6896   2F99             _if125_true:
6897   2F99 29 BC 31      mov b, [__blshift] ; blshift
6898   2F9C D7            push a
6899   2F9D 11            mov a, b
6900   2F9E 26 06 00      mov b, 6
6901   2FA1 54            add a, b
6902   2FA2 27            mov b, a
6903   2FA3 E4            pop a
6904   2FA4 D7            push a
6905   2FA5 11            mov a, b
6906   2FA6 29 BE 31      mov b, [__alshift] ; alshift
6907   2FA9 60            sub a, b
6908   2FAA 27            mov b, a
6909   2FAB E4            pop a
6910   2FAC D7            push a
6911   2FAD 11            mov a, b
6912   2FAE 29 BA 31      mov b, [__brshift] ; brshift
6913   2FB1 60            sub a, b
6914   2FB2 27            mov b, a
6915   2FB3 E4            pop a
6916   2FB4 FD 42 BC 31   mov [__blshift], b
6917   2FB8 26 0C 00      mov b, 12
6918   2FBB D7            push a
6919   2FBC 11            mov a, b
6920   2FBD 29 BC 31      mov b, [__blshift] ; blshift
6921   2FC0 60            sub a, b
6922   2FC1 27            mov b, a
6923   2FC2 E4            pop a
6924   2FC3 FD 42 C4 31   mov [__divi], b
6925   2FC7             _for126_init:
6926   2FC7 26 00 00      mov b, 0
6927   2FCA FD 42 94 31   mov [__pos], b
6928   2FCE             _for126_cond:
6929   2FCE 29 94 31      mov b, [__pos] ; pos
6930   2FD1 D7            push a
6931   2FD2 11            mov a, b
6932   2FD3 29 BC 31      mov b, [__blshift] ; blshift
6933   2FD6 B0            cmp a, b
6934   2FD7 0E            lodflgs
6935   2FD8 87 02         and al, %00000010 ; <
6936   2FDA FD 9C         shr al
6937   2FDC 22 00         mov ah, 0
6938   2FDE 27            mov b, a
6939   2FDF E4            pop a
6940   2FE0 C0 00 00      cmp b, 0
6941   2FE3 C6 46 30      je _for126_exit
6942   2FE6             _for126_block:
6943   2FE6             _if127_cond:
6944   2FE6 29 94 31      mov b, [__pos] ; pos
6945   2FE9 D7            push a
6946   2FEA 11            mov a, b
6947   2FEB 29 C4 31      mov b, [__divi] ; divi
6948   2FEE 54            add a, b
6949   2FEF 27            mov b, a
6950   2FF0 E4            pop a
6951   2FF1 D7            push a
6952   2FF2 11            mov a, b
6953   2FF3 26 0C 00      mov b, 12
6954   2FF6 B0            cmp a, b
6955   2FF7 0E            lodflgs
6956   2FF8 87 02         and al, %00000010 ; <
6957   2FFA FD 9C         shr al
6958   2FFC 22 00         mov ah, 0
6959   2FFE 27            mov b, a
6960   2FFF E4            pop a
6961   3000 C0 00 00      cmp b, 0
6962   3003 C6 36 30      je _if127_exit
6963   3006             _if127_true:
6964   3006 29 3E 31      mov b, [__cnarr]
6965   3009 D7            push a
6966   300A 74            mov d, b
6967   300B DA            push d
6968   300C 29 94 31      mov b, [__pos] ; pos
6969   300F E7            pop d
6970   3010 10 02 00      mov a, 2
6971   3013 AC            mul a, b
6972   3014 5A            add d, b
6973   3015 E4            pop a
6974   3016 DA            push d
6975   3017 29 8A 31      mov b, [__divres]
6976   301A D7            push a
6977   301B 74            mov d, b
6978   301C DA            push d
6979   301D 29 94 31      mov b, [__pos] ; pos
6980   3020 D7            push a
6981   3021 11            mov a, b
6982   3022 29 C4 31      mov b, [__divi] ; divi
6983   3025 54            add a, b
6984   3026 27            mov b, a
6985   3027 E4            pop a
6986   3028 E7            pop d
6987   3029 10 02 00      mov a, 2
6988   302C AC            mul a, b
6989   302D 5A            add d, b
6990   302E 2A            mov b, [d]
6991   302F E4            pop a
6992   3030 E7            pop d
6993   3031 FD 43         mov [d], b
6994   3033 0A 36 30      jmp _if127_exit
6995   3036             _if127_exit:
6996   3036             _for126_update:
6997   3036 29 94 31      mov b, [__pos] ; pos
6998   3039 D7            push a
6999   303A 11            mov a, b
7000   303B FD 77         inc b
7001   303D FD 42 94 31   mov [__pos], b
7002   3041 27            mov b, a
7003   3042 E4            pop a
7004   3043 0A CE 2F      jmp _for126_cond
7005   3046             _for126_exit:
7006   3046 0A 49 30      jmp _if125_exit
7007   3049             _if125_exit:
7008   3049 29 C8 31      mov b, [__bkpcsign] ; bkpcsign
7009   304C FD 42 90 31   mov [__csign], b
7010   3050 07 A2 15      call fixcsizezero
7011   3053 07 51 15      call fixsignout
7012   3056 F9            leave
7013   3057 09            ret
7014   3058             ; --- END TEXT BLOCK
7015   3058             
7016   3058             ; --- BEGIN DATA BLOCK
7017   3058 0A 00       __ss_data: .db "\n", 0
7018   305A 58 30       __ss: .dw __ss_data
7019   305C 20 00       __sp_data: .db " ", 0
7020   305E 5C 30       __sp: .dw __sp_data
7021   3060             __ionum_data: 
7022   3060 00 00 00 00 .dw 0,0,0,0,0,0,
7022   3064 00 00 00 00 
7022   3068 00 00 00 00 
7023   306C             .fill 0, 0
7024   306C 60 30       __ionum: .dw __ionum_data
7025   306E 00 00       __ionr: .dw 0
7026   3070 00 00       __ioshift: .dw 0
7027   3072             __datum_data: 
7028   3072 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
7028   3076 00 00 00 00 
7028   307A 00 00 00 00 
7028   307E 00 00 00 00 
7028   3082 00 00 00 00 
7028   3086 00 00 00 00 
7028   308A 00 00 00 00 
7028   308E 00 00 00 00 
7028   3092 00 00 00 00 
7029   3096 00 00 00 00 .fill 36, 0
7029   309A 00 00 00 00 
7029   309E 00 00 00 00 
7029   30A2 00 00 00 00 
7029   30A6 00 00 00 00 
7029   30AA 00 00 00 00 
7029   30AE 00 00 00 00 
7029   30B2 00 00 00 00 
7029   30B6 00 00 00 00 
7030   30BA 72 30       __datum: .dw __datum_data
7031   30BC 00 00       __datumpos: .dw 0
7032   30BE             __anarr_data: 
7033   30BE 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,
7033   30C2 00 00 00 00 
7033   30C6 00 00 00 00 
7033   30CA 00 00 00 00 
7033   30CE 00 00 00 00 
7033   30D2 00 00 00 00 
7034   30D6             .fill 0, 0
7035   30D6 BE 30       __anarr: .dw __anarr_data
7036   30D8             __bnarr_data: 
7037   30D8 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,
7037   30DC 00 00 00 00 
7037   30E0 00 00 00 00 
7037   30E4 00 00 00 00 
7037   30E8 00 00 00 00 
7037   30EC 00 00 00 00 
7038   30F0             .fill 0, 0
7039   30F0 D8 30       __bnarr: .dw __bnarr_data
7040   30F2             __anarrbkp_data: 
7041   30F2 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,
7041   30F6 00 00 00 00 
7041   30FA 00 00 00 00 
7041   30FE 00 00 00 00 
7041   3102 00 00 00 00 
7041   3106 00 00 00 00 
7042   310A             .fill 0, 0
7043   310A F2 30       __anarrbkp: .dw __anarrbkp_data
7044   310C             __bnarrbkp_data: 
7045   310C 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,
7045   3110 00 00 00 00 
7045   3114 00 00 00 00 
7045   3118 00 00 00 00 
7045   311C 00 00 00 00 
7045   3120 00 00 00 00 
7046   3124             .fill 0, 0
7047   3124 0C 31       __bnarrbkp: .dw __bnarrbkp_data
7048   3126             __cnarr_data: 
7049   3126 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,
7049   312A 00 00 00 00 
7049   312E 00 00 00 00 
7049   3132 00 00 00 00 
7049   3136 00 00 00 00 
7049   313A 00 00 00 00 
7050   313E             .fill 0, 0
7051   313E 26 31       __cnarr: .dw __cnarr_data
7052   3140             __mulres_data: 
7053   3140 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
7053   3144 00 00 00 00 
7053   3148 00 00 00 00 
7053   314C 00 00 00 00 
7053   3150 00 00 00 00 
7053   3154 00 00 00 00 
7053   3158 00 00 00 00 
7053   315C 00 00 00 00 
7053   3160 00 00 00 00 
7053   3164 00 00 00 00 
7053   3168 00 00 00 00 
7053   316C 00 00 00 00 
7054   3170             .fill 0, 0
7055   3170 40 31       __mulres: .dw __mulres_data
7056   3172             __divres_data: 
7057   3172 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,
7057   3176 00 00 00 00 
7057   317A 00 00 00 00 
7057   317E 00 00 00 00 
7057   3182 00 00 00 00 
7057   3186 00 00 00 00 
7058   318A             .fill 0, 0
7059   318A 72 31       __divres: .dw __divres_data
7060   318C 00 00       __asign: .dw 0
7061   318E 00 00       __bsign: .dw 0
7062   3190 00 00       __csign: .dw 0
7063   3192 00 00       __protopos: .dw 0
7064   3194 00 00       __pos: .dw 0
7065   3196 00 00       __carry: .dw 0
7066   3198 00 00       __nextcarry: .dw 0
7067   319A 00 00       __agtb: .dw 0
7068   319C 00 00       __bgta: .dw 0
7069   319E 00 00       __aeqb: .dw 0
7070   31A0 00 00       __aneqb: .dw 0
7071   31A2 00 00       __ageb: .dw 0
7072   31A4 00 00       __bgea: .dw 0
7073   31A6 00 00       __eqflag: .dw 0
7074   31A8 00 00       __sizepos: .dw 0
7075   31AA 00 00       __psizepos: .dw 0
7076   31AC 00 00       __swappos: .dw 0
7077   31AE 00 00       __swaptmp: .dw 0
7078   31B0 00 00       __toolarge: .dw 0
7079   31B2 00 00       __normal: .dw 0
7080   31B4 00 00       __mulpos1: .dw 0
7081   31B6 00 00       __mulpos2: .dw 0
7082   31B8 00 00       __mulpos3: .dw 0
7083   31BA 00 00       __brshift: .dw 0
7084   31BC 00 00       __blshift: .dw 0
7085   31BE 00 00       __alshift: .dw 0
7086   31C0 00 00       __divcounter: .dw 0
7087   31C2 00 00       __segmentcounter: .dw 0
7088   31C4 00 00       __divi: .dw 0
7089   31C6 00 00       __allzeroes: .dw 0
7090   31C8 00 00       __bkpcsign: .dw 0
7091   31CA 00 00       __divshift: .dw 0
7092   31CC             ; --- END DATA BLOCK
7093   31CC             
7094   31CC             ; --- BEGIN INCLUDE BLOCK
7095   31CC             .include "lib/stdio.asm"
0001+  31CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  31CC             ; stdio.s
0003+  31CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  31CC             .include "lib/string.asm"
0001++ 31CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 31CC             ; string.s
0003++ 31CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 31CC             
0005++ 31CC             
0006++ 31CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 31CC             ; strrev
0008++ 31CC             ; reverse a string
0009++ 31CC             ; D = string address
0010++ 31CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 31CC             ; 01234
0012++ 31CC             strrev:
0013++ 31CC 4B          	pusha
0014++ 31CD 07 13 32    	call strlen	; length in C
0015++ 31D0 12          	mov a, c
0016++ 31D1 AF 01 00    	cmp a, 1
0017++ 31D4 D0 EE 31    	jleu strrev_end	; check string length. string len must be > 1
0018++ 31D7 7D          	dec a
0019++ 31D8 FD 4E       	mov si, d	; beginning of string
0020++ 31DA FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 31DC 59          	add d, a	; end of string
0022++ 31DD 12          	mov a, c
0023++ 31DE FD 9B       	shr a		; divide by 2
0024++ 31E0 39          	mov c, a	; C now counts the steps
0025++ 31E1             strrev_L0:
0026++ 31E1 32          	mov bl, [d]	; save load right-side char into BL
0027++ 31E2 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 31E3 3E          	mov [d], al	; store left char into right side
0029++ 31E4 1B          	mov al, bl
0030++ 31E5 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 31E6 7E          	dec c
0032++ 31E7 7F          	dec d
0033++ 31E8 C2 00 00    	cmp c, 0
0034++ 31EB C7 E1 31    	jne strrev_L0
0035++ 31EE             strrev_end:
0036++ 31EE 4C          	popa
0037++ 31EF 09          	ret
0038++ 31F0             	
0039++ 31F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 31F0             ; strchr
0041++ 31F0             ; search string in D for char in AL
0042++ 31F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 31F0             strchr:
0044++ 31F0             strchr_L0:
0045++ 31F0 32          	mov bl, [d]
0046++ 31F1 C1 00       	cmp bl, 0
0047++ 31F3 C6 FE 31    	je strchr_end
0048++ 31F6 BA          	cmp al, bl
0049++ 31F7 C6 FE 31    	je strchr_end
0050++ 31FA 79          	inc d
0051++ 31FB 0A F0 31    	jmp strchr_L0
0052++ 31FE             strchr_end:
0053++ 31FE 1B          	mov al, bl
0054++ 31FF 09          	ret
0055++ 3200             
0056++ 3200             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 3200             ; strstr
0058++ 3200             ; find sub-string
0059++ 3200             ; str1 in SI
0060++ 3200             ; str2 in DI
0061++ 3200             ; SI points to end of source string
0062++ 3200             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 3200             strstr:
0064++ 3200 DB          	push al
0065++ 3201 DA          	push d
0066++ 3202 E3          	push di
0067++ 3203             strstr_loop:
0068++ 3203 F3          	cmpsb					; compare a byte of the strings
0069++ 3204 C7 0F 32    	jne strstr_ret
0070++ 3207 FC 00 00    	lea d, [di + 0]
0071++ 320A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 320C C7 03 32    	jne strstr_loop				; equal chars but not at end
0073++ 320F             strstr_ret:
0074++ 320F F0          	pop di
0075++ 3210 E7          	pop d
0076++ 3211 E8          	pop al
0077++ 3212 09          	ret
0078++ 3213             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 3213             ; length of null terminated string
0080++ 3213             ; result in C
0081++ 3213             ; pointer in D
0082++ 3213             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 3213             strlen:
0084++ 3213 DA          	push d
0085++ 3214 38 00 00    	mov c, 0
0086++ 3217             strlen_L1:
0087++ 3217 BD 00       	cmp byte [d], 0
0088++ 3219 C6 21 32    	je strlen_ret
0089++ 321C 79          	inc d
0090++ 321D 78          	inc c
0091++ 321E 0A 17 32    	jmp strlen_L1
0092++ 3221             strlen_ret:
0093++ 3221 E7          	pop d
0094++ 3222 09          	ret
0095++ 3223             
0096++ 3223             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 3223             ; STRCMP
0098++ 3223             ; compare two strings
0099++ 3223             ; str1 in SI
0100++ 3223             ; str2 in DI
0101++ 3223             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 3223             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 3223             strcmp:
0104++ 3223 DB          	push al
0105++ 3224 DA          	push d
0106++ 3225 E3          	push di
0107++ 3226 E2          	push si
0108++ 3227             strcmp_loop:
0109++ 3227 F3          	cmpsb					; compare a byte of the strings
0110++ 3228 C7 33 32    	jne strcmp_ret
0111++ 322B FB FF FF    	lea d, [si +- 1]
0112++ 322E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 3230 C7 27 32    	jne strcmp_loop				; equal chars but not at end
0114++ 3233             strcmp_ret:
0115++ 3233 EF          	pop si
0116++ 3234 F0          	pop di
0117++ 3235 E7          	pop d
0118++ 3236 E8          	pop al
0119++ 3237 09          	ret
0120++ 3238             
0121++ 3238             
0122++ 3238             ; STRCPY
0123++ 3238             ; copy null terminated string from SI to DI
0124++ 3238             ; source in SI
0125++ 3238             ; destination in DI
0126++ 3238             strcpy:
0127++ 3238 E2          	push si
0128++ 3239 E3          	push di
0129++ 323A DB          	push al
0130++ 323B             strcpy_L1:
0131++ 323B F6          	lodsb
0132++ 323C F7          	stosb
0133++ 323D B9 00       	cmp al, 0
0134++ 323F C7 3B 32    	jne strcpy_L1
0135++ 3242             strcpy_end:
0136++ 3242 E8          	pop al
0137++ 3243 F0          	pop di
0138++ 3244 EF          	pop si
0139++ 3245 09          	ret
0140++ 3246             
0141++ 3246             ; STRCAT
0142++ 3246             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 3246             ; source in SI
0144++ 3246             ; destination in DI
0145++ 3246             strcat:
0146++ 3246 E2          	push si
0147++ 3247 E3          	push di
0148++ 3248 D7          	push a
0149++ 3249 DA          	push d
0150++ 324A 50          	mov a, di
0151++ 324B 3C          	mov d, a
0152++ 324C             strcat_goto_end_L1:
0153++ 324C BD 00       	cmp byte[d], 0
0154++ 324E C6 55 32    	je strcat_start
0155++ 3251 79          	inc d
0156++ 3252 0A 4C 32    	jmp strcat_goto_end_L1
0157++ 3255             strcat_start:
0158++ 3255 FD 50       	mov di, d
0159++ 3257             strcat_L1:
0160++ 3257 F6          	lodsb
0161++ 3258 F7          	stosb
0162++ 3259 B9 00       	cmp al, 0
0163++ 325B C7 57 32    	jne strcat_L1
0164++ 325E             strcat_end:
0165++ 325E E7          	pop d
0166++ 325F E4          	pop a
0167++ 3260 F0          	pop di
0168++ 3261 EF          	pop si
0169++ 3262 09          	ret
0005+  3263             
0006+  3263 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  3267 34 35 36 37 
0006+  326B 38 39 41 42 
0006+  326F 43 44 45 46 
0007+  3273 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  3277 1B 5B 48 00 
0008+  327B             
0009+  327B 01 00       table_power:.dw 1
0010+  327D 0A 00       			.dw 10
0011+  327F 64 00       			.dw 100
0012+  3281 E8 03       			.dw 1000
0013+  3283 10 27       			.dw 10000
0014+  3285             
0015+  3285             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  3285             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  3285             ; ASCII in BL
0018+  3285             ; result in AL
0019+  3285             ; ascii for F = 0100 0110
0020+  3285             ; ascii for 9 = 0011 1001
0021+  3285             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  3285             hex_ascii_encode:
0023+  3285 1B          	mov al, bl
0024+  3286 93 40       	test al, $40				; test if letter or number
0025+  3288 C7 8E 32    	jnz hex_letter
0026+  328B 87 0F       	and al, $0F				; get number
0027+  328D 09          	ret
0028+  328E             hex_letter:
0029+  328E 87 0F       	and al, $0F				; get letter
0030+  3290 6A 09       	add al, 9
0031+  3292 09          	ret
0032+  3293             
0033+  3293             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  3293             ; ATOI
0035+  3293             ; 2 letter hex string in B
0036+  3293             ; 8bit integer returned in AL
0037+  3293             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  3293             atoi:
0039+  3293 D8          	push b
0040+  3294 07 85 32    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  3297 30          	mov bl, bh
0042+  3298 DB          	push al					; save a
0043+  3299 07 85 32    	call hex_ascii_encode
0044+  329C EA          	pop bl	
0045+  329D FD 9E 04    	shl al, 4
0046+  32A0 8C          	or al, bl
0047+  32A1 E5          	pop b
0048+  32A2 09          	ret	
0049+  32A3             
0050+  32A3             
0051+  32A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  32A3             ; printf
0053+  32A3             ; no need for explanations!
0054+  32A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  32A3             printf:
0056+  32A3 09          	ret
0057+  32A4             
0058+  32A4             
0059+  32A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  32A4             ; scanf
0061+  32A4             ; no need for explanations!
0062+  32A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  32A4             scanf:
0064+  32A4 09          	ret
0065+  32A5             
0066+  32A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  32A5             ; ITOA
0068+  32A5             ; 8bit value in BL
0069+  32A5             ; 2 byte ASCII result in A
0070+  32A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  32A5             itoa:
0072+  32A5 DA          	push d
0073+  32A6 D8          	push b
0074+  32A7 A7 00       	mov bh, 0
0075+  32A9 FD A4 04    	shr bl, 4	
0076+  32AC 74          	mov d, b
0077+  32AD 1F 63 32    	mov al, [d + s_hex_digits]
0078+  32B0 23          	mov ah, al
0079+  32B1             	
0080+  32B1 E5          	pop b
0081+  32B2 D8          	push b
0082+  32B3 A7 00       	mov bh, 0
0083+  32B5 FD 87 0F    	and bl, $0F
0084+  32B8 74          	mov d, b
0085+  32B9 1F 63 32    	mov al, [d + s_hex_digits]
0086+  32BC E5          	pop b
0087+  32BD E7          	pop d
0088+  32BE 09          	ret
0089+  32BF             
0090+  32BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  32BF             ; HEX STRING TO BINARY
0092+  32BF             ; di = destination address
0093+  32BF             ; si = source
0094+  32BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  32BF             hex_to_int:
0096+  32BF             hex_to_int_L1:
0097+  32BF F6          	lodsb					; load from [SI] to AL
0098+  32C0 B9 00       	cmp al, 0				; check if ASCII 0
0099+  32C2 C6 CF 32    	jz hex_to_int_ret
0100+  32C5 36          	mov bh, al
0101+  32C6 F6          	lodsb
0102+  32C7 2F          	mov bl, al
0103+  32C8 07 93 32    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  32CB F7          	stosb					; store AL to [DI]
0105+  32CC 0A BF 32    	jmp hex_to_int_L1
0106+  32CF             hex_to_int_ret:
0107+  32CF 09          	ret		
0108+  32D0             
0109+  32D0             
0110+  32D0             
0111+  32D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  32D0             ; GETCHAR
0113+  32D0             ; char in ah
0114+  32D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  32D0             getchar:
0116+  32D0 DB          	push al
0117+  32D1             getchar_retry:
0118+  32D1 FD 0C       	sti
0119+  32D3 19 01       	mov al, 1
0120+  32D5 05 03       	syscall sys_io			; receive in AH
0121+  32D7 B9 00       	cmp al, 0			; check if any char was receive
0122+  32D9 C6 D1 32    	je getchar_retry
0123+  32DC E8          	pop al
0124+  32DD 09          	ret
0125+  32DE             
0126+  32DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  32DE             ; PUTCHAR
0128+  32DE             ; char in ah
0129+  32DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  32DE             putchar:
0131+  32DE D7          	push a
0132+  32DF 19 00       	mov al, 0
0133+  32E1 05 03       	syscall sys_io			; char in AH
0134+  32E3 E4          	pop a
0135+  32E4 09          	ret
0136+  32E5             
0137+  32E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  32E5             ;; INPUT A STRING
0139+  32E5             ;; terminates with null
0140+  32E5             ;; pointer in D
0141+  32E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  32E5             gets:
0143+  32E5 D7          	push a
0144+  32E6 DA          	push d
0145+  32E7             gets_loop:
0146+  32E7 FD 0C       	sti
0147+  32E9 19 01       	mov al, 1
0148+  32EB 05 03       	syscall sys_io			; receive in AH
0149+  32ED B9 00       	cmp al, 0				; check error code (AL)
0150+  32EF C6 E7 32    	je gets_loop			; if no char received, retry
0151+  32F2             
0152+  32F2 76 1B       	cmp ah, 27
0153+  32F4 C6 15 33    	je gets_telnet_escape
0154+  32F7 76 0A       	cmp ah, $0A				; LF
0155+  32F9 C6 6E 33    	je gets_end
0156+  32FC 76 0D       	cmp ah, $0D				; CR
0157+  32FE C6 6E 33    	je gets_end
0158+  3301 76 5C       	cmp ah, $5C				; '\\'
0159+  3303 C6 45 33    	je gets_escape
0160+  3306             	
0161+  3306 76 08       	cmp ah, $08			; check for backspace
0162+  3308 C6 11 33    	je gets_backspace
0163+  330B             
0164+  330B 1A          	mov al, ah
0165+  330C 3E          	mov [d], al
0166+  330D 79          	inc d
0167+  330E 0A E7 32    	jmp gets_loop
0168+  3311             gets_backspace:
0169+  3311 7F          	dec d
0170+  3312 0A E7 32    	jmp gets_loop
0171+  3315             gets_telnet_escape:
0172+  3315 FD 0C       	sti
0173+  3317 19 01       	mov al, 1
0174+  3319 05 03       	syscall sys_io				; receive in AH without echo
0175+  331B B9 00       	cmp al, 0					; check error code (AL)
0176+  331D C6 15 33    	je gets_telnet_escape		; if no char received, retry
0177+  3320 76 5B       	cmp ah, '['
0178+  3322 C7 E7 32    	jne gets_loop
0179+  3325             gets_telnet_escape_phase2:
0180+  3325 FD 0C       	sti
0181+  3327 19 01       	mov al, 1
0182+  3329 05 03       	syscall sys_io					; receive in AH without echo
0183+  332B B9 00       	cmp al, 0						; check error code (AL)
0184+  332D C6 25 33    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  3330 76 44       	cmp ah, 'D'
0186+  3332 C6 3D 33    	je gets_left_arrow
0187+  3335 76 43       	cmp ah, 'C'
0188+  3337 C6 41 33    	je gets_right_arrow
0189+  333A 0A E7 32    	jmp gets_loop
0190+  333D             gets_left_arrow:
0191+  333D 7F          	dec d
0192+  333E 0A E7 32    	jmp gets_loop
0193+  3341             gets_right_arrow:
0194+  3341 79          	inc d
0195+  3342 0A E7 32    	jmp gets_loop
0196+  3345             gets_escape:
0197+  3345 FD 0C       	sti
0198+  3347 19 01       	mov al, 1
0199+  3349 05 03       	syscall sys_io			; receive in AH
0200+  334B B9 00       	cmp al, 0				; check error code (AL)
0201+  334D C6 45 33    	je gets_escape			; if no char received, retry
0202+  3350 76 6E       	cmp ah, 'n'
0203+  3352 C6 60 33    	je gets_LF
0204+  3355 76 72       	cmp ah, 'r'
0205+  3357 C6 67 33    	je gets_CR
0206+  335A 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  335B 3E          	mov [d], al
0208+  335C 79          	inc d
0209+  335D 0A E7 32    	jmp gets_loop
0210+  3360             gets_LF:
0211+  3360 19 0A       	mov al, $0A
0212+  3362 3E          	mov [d], al
0213+  3363 79          	inc d
0214+  3364 0A E7 32    	jmp gets_loop
0215+  3367             gets_CR:
0216+  3367 19 0D       	mov al, $0D
0217+  3369 3E          	mov [d], al
0218+  336A 79          	inc d
0219+  336B 0A E7 32    	jmp gets_loop
0220+  336E             gets_end:
0221+  336E 19 00       	mov al, 0
0222+  3370 3E          	mov [d], al				; terminate string
0223+  3371 E7          	pop d
0224+  3372 E4          	pop a
0225+  3373 09          	ret
0226+  3374             
0227+  3374             
0228+  3374             
0229+  3374             
0230+  3374             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  3374             ;; INPUT TEXT
0232+  3374             ;; terminated with CTRL+D
0233+  3374             ;; pointer in D
0234+  3374             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  3374             gettxt:
0236+  3374 D7          	push a
0237+  3375 DA          	push d
0238+  3376             gettxt_loop:
0239+  3376 19 01       	mov al, 1
0240+  3378 05 03       	syscall sys_io			; receive in AH
0241+  337A B9 00       	cmp al, 0				; check error code (AL)
0242+  337C C6 76 33    	je gettxt_loop		; if no char received, retry
0243+  337F 76 04       	cmp ah, 4			; EOT
0244+  3381 C6 BF 33    	je gettxt_end
0245+  3384 76 08       	cmp ah, $08			; check for backspace
0246+  3386 C6 BB 33    	je gettxt_backspace
0247+  3389 76 5C       	cmp ah, $5C				; '\\'
0248+  338B C6 94 33    	je gettxt_escape
0249+  338E 1A          	mov al, ah
0250+  338F 3E          	mov [d], al
0251+  3390 79          	inc d
0252+  3391 0A 76 33    	jmp gettxt_loop
0253+  3394             gettxt_escape:
0254+  3394 19 01       	mov al, 1
0255+  3396 05 03       	syscall sys_io			; receive in AH
0256+  3398 B9 00       	cmp al, 0				; check error code (AL)
0257+  339A C6 94 33    	je gettxt_escape		; if no char received, retry
0258+  339D 76 6E       	cmp ah, 'n'
0259+  339F C6 AD 33    	je gettxt_LF
0260+  33A2 76 72       	cmp ah, 'r'
0261+  33A4 C6 B4 33    	je gettxt_CR
0262+  33A7 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  33A8 3E          	mov [d], al
0264+  33A9 79          	inc d
0265+  33AA 0A 76 33    	jmp gettxt_loop
0266+  33AD             gettxt_LF:
0267+  33AD 19 0A       	mov al, $0A
0268+  33AF 3E          	mov [d], al
0269+  33B0 79          	inc d
0270+  33B1 0A 76 33    	jmp gettxt_loop
0271+  33B4             gettxt_CR:
0272+  33B4 19 0D       	mov al, $0D
0273+  33B6 3E          	mov [d], al
0274+  33B7 79          	inc d
0275+  33B8 0A 76 33    	jmp gettxt_loop
0276+  33BB             gettxt_backspace:
0277+  33BB 7F          	dec d
0278+  33BC 0A 76 33    	jmp gettxt_loop
0279+  33BF             gettxt_end:
0280+  33BF 19 00       	mov al, 0
0281+  33C1 3E          	mov [d], al				; terminate string
0282+  33C2 E7          	pop d
0283+  33C3 E4          	pop a
0284+  33C4 09          	ret
0285+  33C5             
0286+  33C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  33C5             ; PRINT NEW LINE
0288+  33C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  33C5             printnl:
0290+  33C5 D7          	push a
0291+  33C6 10 00 0A    	mov a, $0A00
0292+  33C9 05 03       	syscall sys_io
0293+  33CB 10 00 0D    	mov a, $0D00
0294+  33CE 05 03       	syscall sys_io
0295+  33D0 E4          	pop a
0296+  33D1 09          	ret
0297+  33D2             
0298+  33D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  33D2             ; strtoint
0300+  33D2             ; 4 digit hex string number in d
0301+  33D2             ; integer returned in A
0302+  33D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  33D2             strtointx:
0304+  33D2 D8          	push b
0305+  33D3 32          	mov bl, [d]
0306+  33D4 37          	mov bh, bl
0307+  33D5 33 01 00    	mov bl, [d + 1]
0308+  33D8 07 93 32    	call atoi				; convert to int in AL
0309+  33DB 23          	mov ah, al				; move to AH
0310+  33DC 33 02 00    	mov bl, [d + 2]
0311+  33DF 37          	mov bh, bl
0312+  33E0 33 03 00    	mov bl, [d + 3]
0313+  33E3 07 93 32    	call atoi				; convert to int in AL
0314+  33E6 E5          	pop b
0315+  33E7 09          	ret
0316+  33E8             
0317+  33E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  33E8             ; strtoint
0319+  33E8             ; 5 digit base10 string number in d
0320+  33E8             ; integer returned in A
0321+  33E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  33E8             strtoint:
0323+  33E8 E2          	push si
0324+  33E9 D8          	push b
0325+  33EA D9          	push c
0326+  33EB DA          	push d
0327+  33EC 07 13 32    	call strlen			; get string length in C
0328+  33EF 7E          	dec c
0329+  33F0 FD 4E       	mov si, d
0330+  33F2 12          	mov a, c
0331+  33F3 FD 99       	shl a
0332+  33F5 3B 7B 32    	mov d, table_power
0333+  33F8 59          	add d, a
0334+  33F9 38 00 00    	mov c, 0
0335+  33FC             strtoint_L0:
0336+  33FC F6          	lodsb			; load ASCII to al
0337+  33FD B9 00       	cmp al, 0
0338+  33FF C6 12 34    	je strtoint_end
0339+  3402 6F 30       	sub al, $30		; make into integer
0340+  3404 22 00       	mov ah, 0
0341+  3406 2A          	mov b, [d]
0342+  3407 AC          	mul a, b			; result in B since it fits in 16bits
0343+  3408 11          	mov a, b
0344+  3409 28          	mov b, c
0345+  340A 54          	add a, b
0346+  340B 39          	mov c, a
0347+  340C 63 02 00    	sub d, 2
0348+  340F 0A FC 33    	jmp strtoint_L0
0349+  3412             strtoint_end:
0350+  3412 12          	mov a, c
0351+  3413 E7          	pop d
0352+  3414 E6          	pop c
0353+  3415 E5          	pop b
0354+  3416 EF          	pop si
0355+  3417 09          	ret
0356+  3418             
0357+  3418             
0358+  3418             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  3418             ; PRINT NULL TERMINATED STRING
0360+  3418             ; pointer in D
0361+  3418             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  3418             puts:
0363+  3418 D7          	push a
0364+  3419 DA          	push d
0365+  341A             puts_L1:
0366+  341A 1E          	mov al, [d]
0367+  341B B9 00       	cmp al, 0
0368+  341D C6 29 34    	jz puts_END
0369+  3420 23          	mov ah, al
0370+  3421 19 00       	mov al, 0
0371+  3423 05 03       	syscall sys_io
0372+  3425 79          	inc d
0373+  3426 0A 1A 34    	jmp puts_L1
0374+  3429             puts_END:
0375+  3429 E7          	pop d
0376+  342A E4          	pop a
0377+  342B 09          	ret
0378+  342C             
0379+  342C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  342C             ; PRINT N SIZE STRING
0381+  342C             ; pointer in D
0382+  342C             ; size in C
0383+  342C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  342C             putsn:
0385+  342C DB          	push al
0386+  342D DA          	push d
0387+  342E D9          	push c
0388+  342F             putsn_L0:
0389+  342F 1E          	mov al, [d]
0390+  3430 23          	mov ah, al
0391+  3431 19 00       	mov al, 0
0392+  3433 05 03       	syscall sys_io
0393+  3435 79          	inc d
0394+  3436 7E          	dec c	
0395+  3437 C2 00 00    	cmp c, 0
0396+  343A C7 2F 34    	jne putsn_L0
0397+  343D             putsn_end:
0398+  343D E6          	pop c
0399+  343E E7          	pop d
0400+  343F E8          	pop al
0401+  3440 09          	ret
0402+  3441             
0403+  3441             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  3441             ; print 16bit decimal number
0405+  3441             ; input number in A
0406+  3441             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  3441             print_u16d:
0408+  3441 D7          	push a
0409+  3442 D8          	push b
0410+  3443 26 10 27    	mov b, 10000
0411+  3446 AE          	div a, b			; get 10000 coeff.
0412+  3447 07 6D 34    	call print_number
0413+  344A 11          	mov a, b
0414+  344B 26 E8 03    	mov b, 1000
0415+  344E AE          	div a, b			; get 10000 coeff.
0416+  344F 07 6D 34    	call print_number
0417+  3452 11          	mov a, b
0418+  3453 26 64 00    	mov b, 100
0419+  3456 AE          	div a, b
0420+  3457 07 6D 34    	call print_number
0421+  345A 11          	mov a, b
0422+  345B 26 0A 00    	mov b, 10
0423+  345E AE          	div a, b
0424+  345F 07 6D 34    	call print_number
0425+  3462 11          	mov a, b
0426+  3463 6A 30       	add al, $30
0427+  3465 23          	mov ah, al
0428+  3466 19 00       	mov al, 0
0429+  3468 05 03       	syscall sys_io	; print coeff
0430+  346A E5          	pop b
0431+  346B E4          	pop a
0432+  346C 09          	ret
0433+  346D             
0434+  346D             
0435+  346D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  346D             ; if A == 0, print space
0437+  346D             ; else print A
0438+  346D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  346D             print_number:
0440+  346D 6A 30       	add al, $30
0441+  346F 23          	mov ah, al
0442+  3470 07 DE 32    	call putchar
0443+  3473 09          	ret
0444+  3474             
0445+  3474             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  3474             ; PRINT 16BIT HEX INTEGER
0447+  3474             ; integer value in reg B
0448+  3474             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  3474             print_u16x:
0450+  3474 D7          	push a
0451+  3475 D8          	push b
0452+  3476 DD          	push bl
0453+  3477 30          	mov bl, bh
0454+  3478 07 A5 32    	call itoa				; convert bh to char in A
0455+  347B 2F          	mov bl, al				; save al
0456+  347C 19 00       	mov al, 0
0457+  347E 05 03       	syscall sys_io				; display AH
0458+  3480 24          	mov ah, bl				; retrieve al
0459+  3481 19 00       	mov al, 0
0460+  3483 05 03       	syscall sys_io				; display AL
0461+  3485             
0462+  3485 EA          	pop bl
0463+  3486 07 A5 32    	call itoa				; convert bh to char in A
0464+  3489 2F          	mov bl, al				; save al
0465+  348A 19 00       	mov al, 0
0466+  348C 05 03       	syscall sys_io				; display AH
0467+  348E 24          	mov ah, bl				; retrieve al
0468+  348F 19 00       	mov al, 0
0469+  3491 05 03       	syscall sys_io				; display AL
0470+  3493             
0471+  3493 E5          	pop b
0472+  3494 E4          	pop a
0473+  3495 09          	ret
0474+  3496             
0475+  3496             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  3496             ; INPUT 16BIT HEX INTEGER
0477+  3496             ; read 16bit integer into A
0478+  3496             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  3496             scan_u16x:
0480+  3496 F8 10 00    	enter 16
0481+  3499 D8          	push b
0482+  349A DA          	push d
0483+  349B             
0484+  349B FA F1 FF    	lea d, [bp + -15]
0485+  349E 07 E5 32    	call gets				; get number
0486+  34A1             
0487+  34A1 32          	mov bl, [d]
0488+  34A2 37          	mov bh, bl
0489+  34A3 33 01 00    	mov bl, [d + 1]
0490+  34A6 07 93 32    	call atoi				; convert to int in AL
0491+  34A9 23          	mov ah, al				; move to AH
0492+  34AA             
0493+  34AA 33 02 00    	mov bl, [d + 2]
0494+  34AD 37          	mov bh, bl
0495+  34AE 33 03 00    	mov bl, [d + 3]
0496+  34B1 07 93 32    	call atoi				; convert to int in AL
0497+  34B4             
0498+  34B4 E7          	pop d
0499+  34B5 E5          	pop b
0500+  34B6 F9          	leave
0501+  34B7 09          	ret
0502+  34B8             
0503+  34B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  34B8             ; PRINT 8bit HEX INTEGER
0505+  34B8             ; integer value in reg bl
0506+  34B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  34B8             print_u8x:
0508+  34B8 D7          	push a
0509+  34B9 DD          	push bl
0510+  34BA             
0511+  34BA 07 A5 32    	call itoa				; convert bl to char in A
0512+  34BD 2F          	mov bl, al				; save al
0513+  34BE 19 00       	mov al, 0
0514+  34C0 05 03       	syscall sys_io				; display AH
0515+  34C2 24          	mov ah, bl				; retrieve al
0516+  34C3 19 00       	mov al, 0
0517+  34C5 05 03       	syscall sys_io				; display AL
0518+  34C7             
0519+  34C7 EA          	pop bl
0520+  34C8 E4          	pop a
0521+  34C9 09          	ret
0522+  34CA             
0523+  34CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  34CA             ; print 8bit decimal unsigned number
0525+  34CA             ; input number in AL
0526+  34CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  34CA             print_u8d:
0528+  34CA D7          	push a
0529+  34CB D8          	push b
0530+  34CC             
0531+  34CC 22 00       	mov ah, 0
0532+  34CE 26 64 00    	mov b, 100
0533+  34D1 AE          	div a, b
0534+  34D2 D8          	push b			; save remainder
0535+  34D3 B9 00       	cmp al, 0
0536+  34D5 C6 DF 34    	je skip100
0537+  34D8 6A 30       	add al, $30
0538+  34DA 23          	mov ah, al
0539+  34DB 19 00       	mov al, 0
0540+  34DD 05 03       	syscall sys_io	; print coeff
0541+  34DF             skip100:
0542+  34DF E4          	pop a
0543+  34E0 22 00       	mov ah, 0
0544+  34E2 26 0A 00    	mov b, 10
0545+  34E5 AE          	div a, b
0546+  34E6 D8          	push b			; save remainder
0547+  34E7 B9 00       	cmp al, 0
0548+  34E9 C6 F3 34    	je skip10
0549+  34EC 6A 30       	add al, $30
0550+  34EE 23          	mov ah, al
0551+  34EF 19 00       	mov al, 0
0552+  34F1 05 03       	syscall sys_io	; print coeff
0553+  34F3             skip10:
0554+  34F3 E4          	pop a
0555+  34F4 1B          	mov al, bl
0556+  34F5 6A 30       	add al, $30
0557+  34F7 23          	mov ah, al
0558+  34F8 19 00       	mov al, 0
0559+  34FA 05 03       	syscall sys_io	; print coeff
0560+  34FC E5          	pop b
0561+  34FD E4          	pop a
0562+  34FE 09          	ret
0563+  34FF             
0564+  34FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  34FF             ; INPUT 8BIT HEX INTEGER
0566+  34FF             ; read 8bit integer into AL
0567+  34FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  34FF             scan_u8x:
0569+  34FF F8 04 00    	enter 4
0570+  3502 D8          	push b
0571+  3503 DA          	push d
0572+  3504             
0573+  3504 FA FD FF    	lea d, [bp + -3]
0574+  3507 07 E5 32    	call gets				; get number
0575+  350A             
0576+  350A 32          	mov bl, [d]
0577+  350B 37          	mov bh, bl
0578+  350C 33 01 00    	mov bl, [d + 1]
0579+  350F 07 93 32    	call atoi				; convert to int in AL
0580+  3512             
0581+  3512 E7          	pop d
0582+  3513 E5          	pop b
0583+  3514 F9          	leave
0584+  3515 09          	ret
0585+  3516             
0586+  3516             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  3516             ; input decimal number
0588+  3516             ; result in A
0589+  3516             ; 655'\0'
0590+  3516             ; low--------high
0591+  3516             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  3516             scan_u16d:
0593+  3516 F8 08 00    	enter 8
0594+  3519 E2          	push si
0595+  351A D8          	push b
0596+  351B D9          	push c
0597+  351C DA          	push d
0598+  351D FA F9 FF    	lea d, [bp +- 7]
0599+  3520 07 E5 32    	call gets
0600+  3523 07 13 32    	call strlen			; get string length in C
0601+  3526 7E          	dec c
0602+  3527 FD 4E       	mov si, d
0603+  3529 12          	mov a, c
0604+  352A FD 99       	shl a
0605+  352C 3B 7B 32    	mov d, table_power
0606+  352F 59          	add d, a
0607+  3530 38 00 00    	mov c, 0
0608+  3533             mul_loop:
0609+  3533 F6          	lodsb			; load ASCII to al
0610+  3534 B9 00       	cmp al, 0
0611+  3536 C6 49 35    	je mul_exit
0612+  3539 6F 30       	sub al, $30		; make into integer
0613+  353B 22 00       	mov ah, 0
0614+  353D 2A          	mov b, [d]
0615+  353E AC          	mul a, b			; result in B since it fits in 16bits
0616+  353F 11          	mov a, b
0617+  3540 28          	mov b, c
0618+  3541 54          	add a, b
0619+  3542 39          	mov c, a
0620+  3543 63 02 00    	sub d, 2
0621+  3546 0A 33 35    	jmp mul_loop
0622+  3549             mul_exit:
0623+  3549 12          	mov a, c
0624+  354A E7          	pop d
0625+  354B E6          	pop c
0626+  354C E5          	pop b
0627+  354D EF          	pop si
0628+  354E F9          	leave
0629+  354F 09          	ret
7096   3550             ; --- END INCLUDE BLOCK
7097   3550             
7098   3550             
7099   3550             .end
tasm: Number of errors = 0
