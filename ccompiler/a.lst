0001   0000             ; --- Filename: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- begin text block
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; j
0010   0405 52 02 00      sub sp, 2 ; i
0011   0408 52 02 00      sub sp, 2 ; k
0012   040B 26 05 00      mov b, 5
0013   040E D7            push a
0014   040F 11            mov a, b
0015   0410 45 FB FF      mov [bp + -5], a ; k
0016   0413 E4            pop a
0017   0414 26 0A 00      mov b, 10
0018   0417 D7            push a
0019   0418 11            mov a, b
0020   0419 45 FF FF      mov [bp + -1], a ; j
0021   041C E4            pop a
0022   041D             _ternary1_cond:
0023   041D 2C FF FF      mov b, [bp + -1] ; j
0024   0420 D7            push a
0025   0421 11            mov a, b
0026   0422 26 0A 00      mov b, 10
0027   0425 B0            cmp a, b
0028   0426 0E            lodflgs
0029   0427 87 03         and al, %00000011
0030   0429 22 00         mov ah, 0
0031   042B 27            mov b, a
0032   042C E4            pop a
0033   042D C0 00 00      cmp b, 0
0034   0430 C6 55 04      je _ternary1_false
0035   0433             _ternary1_true:
0036   0433             _ternary2_cond:
0037   0433 2C FB FF      mov b, [bp + -5] ; k
0038   0436 D7            push a
0039   0437 11            mov a, b
0040   0438 26 02 00      mov b, 2
0041   043B B0            cmp a, b
0042   043C 0E            lodflgs
0043   043D 87 02         and al, %00000010
0044   043F 22 00         mov ah, 0
0045   0441 27            mov b, a
0046   0442 E4            pop a
0047   0443 C0 00 00      cmp b, 0
0048   0446 C6 4F 04      je _ternary3_false
0049   0449             _ternary3_true:
0050   0449 26 0B 00      mov b, 11
0051   044C 0A 52 04      jmp _ternary3_exit
0052   044F             _ternary3_false:
0053   044F 26 17 00      mov b, 23
0054   0452             _ternary3_exit:
0055   0452 0A 58 04      jmp _ternary1_exit
0056   0455             _ternary1_false:
0057   0455 26 42 00      mov b, 66
0058   0458             _ternary1_exit:
0059   0458             ; --- begin inline asm block
0060   0458 17 FD FF        mov a, [bp + -3]
0061   045B 07 D2 06        call print_u16d
0062   045E               ; --- end inline asm block
0063   045E F9            leave
0064   045F 05 0B         syscall sys_terminate_proc
0065   0461             ; --- end text block
0066   0461             
0067   0461             ; --- begin data block
0068   0461 0A 00       s_data: .db "\n", 0
0069   0463 61 04       s: .dw s_data
0070   0465             ; --- end data block
0071   0465             ; --- begin include block
0072   0465             .include "lib/stdio.asm"
0001+  0465             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0465             ; stdio.s
0003+  0465             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0465             .include "lib/string.asm"
0001++ 0465             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0465             ; string.s
0003++ 0465             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0465             
0005++ 0465             
0006++ 0465             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0465             ; strrev
0008++ 0465             ; reverse a string
0009++ 0465             ; D = string address
0010++ 0465             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0465             ; 01234
0012++ 0465             strrev:
0013++ 0465 4B          	pusha
0014++ 0466 07 AC 04    	call strlen	; length in C
0015++ 0469 12          	mov a, c
0016++ 046A AF 01 00    	cmp a, 1
0017++ 046D D0 87 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0470 7D          	dec a
0019++ 0471 FD 4E       	mov si, d	; beginning of string
0020++ 0473 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0475 59          	add d, a	; end of string
0022++ 0476 12          	mov a, c
0023++ 0477 FD 9B       	shr a		; divide by 2
0024++ 0479 39          	mov c, a	; C now counts the steps
0025++ 047A             strrev_L0:
0026++ 047A 32          	mov bl, [d]	; save load right-side char into BL
0027++ 047B F6          	lodsb		; load left-side char into AL; increase SI
0028++ 047C 3E          	mov [d], al	; store left char into right side
0029++ 047D 1B          	mov al, bl
0030++ 047E F7          	stosb		; store right-side char into left-side; increase DI
0031++ 047F 7E          	dec c
0032++ 0480 7F          	dec d
0033++ 0481 C2 00 00    	cmp c, 0
0034++ 0484 C7 7A 04    	jne strrev_L0
0035++ 0487             strrev_end:
0036++ 0487 4C          	popa
0037++ 0488 09          	ret
0038++ 0489             	
0039++ 0489             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0489             ; strchr
0041++ 0489             ; search string in D for char in AL
0042++ 0489             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0489             strchr:
0044++ 0489             strchr_L0:
0045++ 0489 32          	mov bl, [d]
0046++ 048A C1 00       	cmp bl, 0
0047++ 048C C6 97 04    	je strchr_end
0048++ 048F BA          	cmp al, bl
0049++ 0490 C6 97 04    	je strchr_end
0050++ 0493 79          	inc d
0051++ 0494 0A 89 04    	jmp strchr_L0
0052++ 0497             strchr_end:
0053++ 0497 1B          	mov al, bl
0054++ 0498 09          	ret
0055++ 0499             
0056++ 0499             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0499             ; strstr
0058++ 0499             ; find sub-string
0059++ 0499             ; str1 in SI
0060++ 0499             ; str2 in DI
0061++ 0499             ; SI points to end of source string
0062++ 0499             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0499             strstr:
0064++ 0499 DB          	push al
0065++ 049A DA          	push d
0066++ 049B E3          	push di
0067++ 049C             strstr_loop:
0068++ 049C F3          	cmpsb					; compare a byte of the strings
0069++ 049D C7 A8 04    	jne strstr_ret
0070++ 04A0 FC 00 00    	lea d, [di + 0]
0071++ 04A3 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 04A5 C7 9C 04    	jne strstr_loop				; equal chars but not at end
0073++ 04A8             strstr_ret:
0074++ 04A8 F0          	pop di
0075++ 04A9 E7          	pop d
0076++ 04AA E8          	pop al
0077++ 04AB 09          	ret
0078++ 04AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 04AC             ; length of null terminated string
0080++ 04AC             ; result in C
0081++ 04AC             ; pointer in D
0082++ 04AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 04AC             strlen:
0084++ 04AC DA          	push d
0085++ 04AD 38 00 00    	mov c, 0
0086++ 04B0             strlen_L1:
0087++ 04B0 BD 00       	cmp byte [d], 0
0088++ 04B2 C6 BA 04    	je strlen_ret
0089++ 04B5 79          	inc d
0090++ 04B6 78          	inc c
0091++ 04B7 0A B0 04    	jmp strlen_L1
0092++ 04BA             strlen_ret:
0093++ 04BA E7          	pop d
0094++ 04BB 09          	ret
0095++ 04BC             
0096++ 04BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04BC             ; STRCMP
0098++ 04BC             ; compare two strings
0099++ 04BC             ; str1 in SI
0100++ 04BC             ; str2 in DI
0101++ 04BC             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04BC             strcmp:
0104++ 04BC DB          	push al
0105++ 04BD DA          	push d
0106++ 04BE E3          	push di
0107++ 04BF E2          	push si
0108++ 04C0             strcmp_loop:
0109++ 04C0 F3          	cmpsb					; compare a byte of the strings
0110++ 04C1 C7 CC 04    	jne strcmp_ret
0111++ 04C4 FB FF FF    	lea d, [si +- 1]
0112++ 04C7 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04C9 C7 C0 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04CC             strcmp_ret:
0115++ 04CC EF          	pop si
0116++ 04CD F0          	pop di
0117++ 04CE E7          	pop d
0118++ 04CF E8          	pop al
0119++ 04D0 09          	ret
0120++ 04D1             
0121++ 04D1             
0122++ 04D1             ; STRCPY
0123++ 04D1             ; copy null terminated string from SI to DI
0124++ 04D1             ; source in SI
0125++ 04D1             ; destination in DI
0126++ 04D1             strcpy:
0127++ 04D1 E2          	push si
0128++ 04D2 E3          	push di
0129++ 04D3 DB          	push al
0130++ 04D4             strcpy_L1:
0131++ 04D4 F6          	lodsb
0132++ 04D5 F7          	stosb
0133++ 04D6 B9 00       	cmp al, 0
0134++ 04D8 C7 D4 04    	jne strcpy_L1
0135++ 04DB             strcpy_end:
0136++ 04DB E8          	pop al
0137++ 04DC F0          	pop di
0138++ 04DD EF          	pop si
0139++ 04DE 09          	ret
0140++ 04DF             
0141++ 04DF             ; STRCAT
0142++ 04DF             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04DF             ; source in SI
0144++ 04DF             ; destination in DI
0145++ 04DF             strcat:
0146++ 04DF E2          	push si
0147++ 04E0 E3          	push di
0148++ 04E1 D7          	push a
0149++ 04E2 DA          	push d
0150++ 04E3 50          	mov a, di
0151++ 04E4 3C          	mov d, a
0152++ 04E5             strcat_goto_end_L1:
0153++ 04E5 BD 00       	cmp byte[d], 0
0154++ 04E7 C6 EE 04    	je strcat_start
0155++ 04EA 79          	inc d
0156++ 04EB 0A E5 04    	jmp strcat_goto_end_L1
0157++ 04EE             strcat_start:
0158++ 04EE FD 50       	mov di, d
0159++ 04F0             strcat_L1:
0160++ 04F0 F6          	lodsb
0161++ 04F1 F7          	stosb
0162++ 04F2 B9 00       	cmp al, 0
0163++ 04F4 C7 F0 04    	jne strcat_L1
0164++ 04F7             strcat_end:
0165++ 04F7 E7          	pop d
0166++ 04F8 E4          	pop a
0167++ 04F9 F0          	pop di
0168++ 04FA EF          	pop si
0169++ 04FB 09          	ret
0005+  04FC             
0006+  04FC 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0500 34 35 36 37 
0006+  0504 38 39 41 42 
0006+  0508 43 44 45 46 
0007+  050C             
0008+  050C 01 00       table_power:.dw 1
0009+  050E 0A 00       			.dw 10
0010+  0510 64 00       			.dw 100
0011+  0512 E8 03       			.dw 1000
0012+  0514 10 27       			.dw 10000
0013+  0516             
0014+  0516             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  0516             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  0516             ; ASCII in BL
0017+  0516             ; result in AL
0018+  0516             ; ascii for F = 0100 0110
0019+  0516             ; ascii for 9 = 0011 1001
0020+  0516             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  0516             hex_ascii_encode:
0022+  0516 1B          	mov al, bl
0023+  0517 93 40       	test al, $40				; test if letter or number
0024+  0519 C7 1F 05    	jnz hex_letter
0025+  051C 87 0F       	and al, $0F				; get number
0026+  051E 09          	ret
0027+  051F             hex_letter:
0028+  051F 87 0F       	and al, $0F				; get letter
0029+  0521 6A 09       	add al, 9
0030+  0523 09          	ret
0031+  0524             
0032+  0524             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  0524             ; ATOI
0034+  0524             ; 2 letter hex string in B
0035+  0524             ; 8bit integer returned in AL
0036+  0524             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  0524             atoi:
0038+  0524 D8          	push b
0039+  0525 07 16 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  0528 30          	mov bl, bh
0041+  0529 DB          	push al					; save a
0042+  052A 07 16 05    	call hex_ascii_encode
0043+  052D EA          	pop bl	
0044+  052E FD 9E 04    	shl al, 4
0045+  0531 8C          	or al, bl
0046+  0532 E5          	pop b
0047+  0533 09          	ret	
0048+  0534             
0049+  0534             
0050+  0534             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0534             ; printf
0052+  0534             ; no need for explanations!
0053+  0534             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  0534             printf:
0055+  0534 09          	ret
0056+  0535             
0057+  0535             
0058+  0535             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0535             ; scanf
0060+  0535             ; no need for explanations!
0061+  0535             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0535             scanf:
0063+  0535 09          	ret
0064+  0536             
0065+  0536             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0536             ; ITOA
0067+  0536             ; 8bit value in BL
0068+  0536             ; 2 byte ASCII result in A
0069+  0536             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  0536             itoa:
0071+  0536 DA          	push d
0072+  0537 D8          	push b
0073+  0538 A7 00       	mov bh, 0
0074+  053A FD A4 04    	shr bl, 4	
0075+  053D 74          	mov d, b
0076+  053E 1F FC 04    	mov al, [d + s_hex_digits]
0077+  0541 23          	mov ah, al
0078+  0542             	
0079+  0542 E5          	pop b
0080+  0543 D8          	push b
0081+  0544 A7 00       	mov bh, 0
0082+  0546 FD 87 0F    	and bl, $0F
0083+  0549 74          	mov d, b
0084+  054A 1F FC 04    	mov al, [d + s_hex_digits]
0085+  054D E5          	pop b
0086+  054E E7          	pop d
0087+  054F 09          	ret
0088+  0550             
0089+  0550             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0550             ; HEX STRING TO BINARY
0091+  0550             ; di = destination address
0092+  0550             ; si = source
0093+  0550             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0550             hex_to_int:
0095+  0550             hex_to_int_L1:
0096+  0550 F6          	lodsb					; load from [SI] to AL
0097+  0551 B9 00       	cmp al, 0				; check if ASCII 0
0098+  0553 C6 60 05    	jz hex_to_int_ret
0099+  0556 36          	mov bh, al
0100+  0557 F6          	lodsb
0101+  0558 2F          	mov bl, al
0102+  0559 07 24 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  055C F7          	stosb					; store AL to [DI]
0104+  055D 0A 50 05    	jmp hex_to_int_L1
0105+  0560             hex_to_int_ret:
0106+  0560 09          	ret		
0107+  0561             
0108+  0561             
0109+  0561             
0110+  0561             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0561             ; GETCHAR
0112+  0561             ; char in ah
0113+  0561             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0561             getchar:
0115+  0561 DB          	push al
0116+  0562             getchar_retry:
0117+  0562 FD 0C       	sti
0118+  0564 19 01       	mov al, 1
0119+  0566 05 03       	syscall sys_io			; receive in AH
0120+  0568 B9 00       	cmp al, 0			; check if any char was receive
0121+  056A C6 62 05    	je getchar_retry
0122+  056D E8          	pop al
0123+  056E 09          	ret
0124+  056F             
0125+  056F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  056F             ; PUTCHAR
0127+  056F             ; char in ah
0128+  056F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  056F             putchar:
0130+  056F D7          	push a
0131+  0570 19 00       	mov al, 0
0132+  0572 05 03       	syscall sys_io			; char in AH
0133+  0574 E4          	pop a
0134+  0575 09          	ret
0135+  0576             
0136+  0576             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  0576             ;; INPUT A STRING
0138+  0576             ;; terminates with null
0139+  0576             ;; pointer in D
0140+  0576             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0576             gets:
0142+  0576 D7          	push a
0143+  0577 DA          	push d
0144+  0578             gets_loop:
0145+  0578 FD 0C       	sti
0146+  057A 19 01       	mov al, 1
0147+  057C 05 03       	syscall sys_io			; receive in AH
0148+  057E B9 00       	cmp al, 0				; check error code (AL)
0149+  0580 C6 78 05    	je gets_loop			; if no char received, retry
0150+  0583             
0151+  0583 76 1B       	cmp ah, 27
0152+  0585 C6 A6 05    	je gets_telnet_escape
0153+  0588 76 0A       	cmp ah, $0A				; LF
0154+  058A C6 FF 05    	je gets_end
0155+  058D 76 0D       	cmp ah, $0D				; CR
0156+  058F C6 FF 05    	je gets_end
0157+  0592 76 5C       	cmp ah, $5C				; '\\'
0158+  0594 C6 D6 05    	je gets_escape
0159+  0597             	
0160+  0597 76 08       	cmp ah, $08			; check for backspace
0161+  0599 C6 A2 05    	je gets_backspace
0162+  059C             
0163+  059C 1A          	mov al, ah
0164+  059D 3E          	mov [d], al
0165+  059E 79          	inc d
0166+  059F 0A 78 05    	jmp gets_loop
0167+  05A2             gets_backspace:
0168+  05A2 7F          	dec d
0169+  05A3 0A 78 05    	jmp gets_loop
0170+  05A6             gets_telnet_escape:
0171+  05A6 FD 0C       	sti
0172+  05A8 19 01       	mov al, 1
0173+  05AA 05 03       	syscall sys_io				; receive in AH without echo
0174+  05AC B9 00       	cmp al, 0					; check error code (AL)
0175+  05AE C6 A6 05    	je gets_telnet_escape		; if no char received, retry
0176+  05B1 76 5B       	cmp ah, '['
0177+  05B3 C7 78 05    	jne gets_loop
0178+  05B6             gets_telnet_escape_phase2:
0179+  05B6 FD 0C       	sti
0180+  05B8 19 01       	mov al, 1
0181+  05BA 05 03       	syscall sys_io					; receive in AH without echo
0182+  05BC B9 00       	cmp al, 0						; check error code (AL)
0183+  05BE C6 B6 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  05C1 76 44       	cmp ah, 'D'
0185+  05C3 C6 CE 05    	je gets_left_arrow
0186+  05C6 76 43       	cmp ah, 'C'
0187+  05C8 C6 D2 05    	je gets_right_arrow
0188+  05CB 0A 78 05    	jmp gets_loop
0189+  05CE             gets_left_arrow:
0190+  05CE 7F          	dec d
0191+  05CF 0A 78 05    	jmp gets_loop
0192+  05D2             gets_right_arrow:
0193+  05D2 79          	inc d
0194+  05D3 0A 78 05    	jmp gets_loop
0195+  05D6             gets_escape:
0196+  05D6 FD 0C       	sti
0197+  05D8 19 01       	mov al, 1
0198+  05DA 05 03       	syscall sys_io			; receive in AH
0199+  05DC B9 00       	cmp al, 0				; check error code (AL)
0200+  05DE C6 D6 05    	je gets_escape			; if no char received, retry
0201+  05E1 76 6E       	cmp ah, 'n'
0202+  05E3 C6 F1 05    	je gets_LF
0203+  05E6 76 72       	cmp ah, 'r'
0204+  05E8 C6 F8 05    	je gets_CR
0205+  05EB 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  05EC 3E          	mov [d], al
0207+  05ED 79          	inc d
0208+  05EE 0A 78 05    	jmp gets_loop
0209+  05F1             gets_LF:
0210+  05F1 19 0A       	mov al, $0A
0211+  05F3 3E          	mov [d], al
0212+  05F4 79          	inc d
0213+  05F5 0A 78 05    	jmp gets_loop
0214+  05F8             gets_CR:
0215+  05F8 19 0D       	mov al, $0D
0216+  05FA 3E          	mov [d], al
0217+  05FB 79          	inc d
0218+  05FC 0A 78 05    	jmp gets_loop
0219+  05FF             gets_end:
0220+  05FF 19 00       	mov al, 0
0221+  0601 3E          	mov [d], al				; terminate string
0222+  0602 E7          	pop d
0223+  0603 E4          	pop a
0224+  0604 09          	ret
0225+  0605             
0226+  0605             
0227+  0605             
0228+  0605             
0229+  0605             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  0605             ;; INPUT TEXT
0231+  0605             ;; terminated with CTRL+D
0232+  0605             ;; pointer in D
0233+  0605             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  0605             gettxt:
0235+  0605 D7          	push a
0236+  0606 DA          	push d
0237+  0607             gettxt_loop:
0238+  0607 19 01       	mov al, 1
0239+  0609 05 03       	syscall sys_io			; receive in AH
0240+  060B B9 00       	cmp al, 0				; check error code (AL)
0241+  060D C6 07 06    	je gettxt_loop		; if no char received, retry
0242+  0610 76 04       	cmp ah, 4			; EOT
0243+  0612 C6 50 06    	je gettxt_end
0244+  0615 76 08       	cmp ah, $08			; check for backspace
0245+  0617 C6 4C 06    	je gettxt_backspace
0246+  061A 76 5C       	cmp ah, $5C				; '\\'
0247+  061C C6 25 06    	je gettxt_escape
0248+  061F 1A          	mov al, ah
0249+  0620 3E          	mov [d], al
0250+  0621 79          	inc d
0251+  0622 0A 07 06    	jmp gettxt_loop
0252+  0625             gettxt_escape:
0253+  0625 19 01       	mov al, 1
0254+  0627 05 03       	syscall sys_io			; receive in AH
0255+  0629 B9 00       	cmp al, 0				; check error code (AL)
0256+  062B C6 25 06    	je gettxt_escape		; if no char received, retry
0257+  062E 76 6E       	cmp ah, 'n'
0258+  0630 C6 3E 06    	je gettxt_LF
0259+  0633 76 72       	cmp ah, 'r'
0260+  0635 C6 45 06    	je gettxt_CR
0261+  0638 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  0639 3E          	mov [d], al
0263+  063A 79          	inc d
0264+  063B 0A 07 06    	jmp gettxt_loop
0265+  063E             gettxt_LF:
0266+  063E 19 0A       	mov al, $0A
0267+  0640 3E          	mov [d], al
0268+  0641 79          	inc d
0269+  0642 0A 07 06    	jmp gettxt_loop
0270+  0645             gettxt_CR:
0271+  0645 19 0D       	mov al, $0D
0272+  0647 3E          	mov [d], al
0273+  0648 79          	inc d
0274+  0649 0A 07 06    	jmp gettxt_loop
0275+  064C             gettxt_backspace:
0276+  064C 7F          	dec d
0277+  064D 0A 07 06    	jmp gettxt_loop
0278+  0650             gettxt_end:
0279+  0650 19 00       	mov al, 0
0280+  0652 3E          	mov [d], al				; terminate string
0281+  0653 E7          	pop d
0282+  0654 E4          	pop a
0283+  0655 09          	ret
0284+  0656             
0285+  0656             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0656             ; PRINT NEW LINE
0287+  0656             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  0656             printnl:
0289+  0656 D7          	push a
0290+  0657 10 00 0A    	mov a, $0A00
0291+  065A 05 03       	syscall sys_io
0292+  065C 10 00 0D    	mov a, $0D00
0293+  065F 05 03       	syscall sys_io
0294+  0661 E4          	pop a
0295+  0662 09          	ret
0296+  0663             
0297+  0663             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  0663             ; strtoint
0299+  0663             ; 4 digit hex string number in d
0300+  0663             ; integer returned in A
0301+  0663             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  0663             strtointx:
0303+  0663 D8          	push b
0304+  0664 32          	mov bl, [d]
0305+  0665 37          	mov bh, bl
0306+  0666 33 01 00    	mov bl, [d + 1]
0307+  0669 07 24 05    	call atoi				; convert to int in AL
0308+  066C 23          	mov ah, al				; move to AH
0309+  066D 33 02 00    	mov bl, [d + 2]
0310+  0670 37          	mov bh, bl
0311+  0671 33 03 00    	mov bl, [d + 3]
0312+  0674 07 24 05    	call atoi				; convert to int in AL
0313+  0677 E5          	pop b
0314+  0678 09          	ret
0315+  0679             
0316+  0679             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  0679             ; strtoint
0318+  0679             ; 5 digit base10 string number in d
0319+  0679             ; integer returned in A
0320+  0679             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  0679             strtoint:
0322+  0679 E2          	push si
0323+  067A D8          	push b
0324+  067B D9          	push c
0325+  067C DA          	push d
0326+  067D 07 AC 04    	call strlen			; get string length in C
0327+  0680 7E          	dec c
0328+  0681 FD 4E       	mov si, d
0329+  0683 12          	mov a, c
0330+  0684 FD 99       	shl a
0331+  0686 3B 0C 05    	mov d, table_power
0332+  0689 59          	add d, a
0333+  068A 38 00 00    	mov c, 0
0334+  068D             strtoint_L0:
0335+  068D F6          	lodsb			; load ASCII to al
0336+  068E B9 00       	cmp al, 0
0337+  0690 C6 A3 06    	je strtoint_end
0338+  0693 6F 30       	sub al, $30		; make into integer
0339+  0695 22 00       	mov ah, 0
0340+  0697 2A          	mov b, [d]
0341+  0698 AC          	mul a, b			; result in B since it fits in 16bits
0342+  0699 11          	mov a, b
0343+  069A 28          	mov b, c
0344+  069B 54          	add a, b
0345+  069C 39          	mov c, a
0346+  069D 63 02 00    	sub d, 2
0347+  06A0 0A 8D 06    	jmp strtoint_L0
0348+  06A3             strtoint_end:
0349+  06A3 12          	mov a, c
0350+  06A4 E7          	pop d
0351+  06A5 E6          	pop c
0352+  06A6 E5          	pop b
0353+  06A7 EF          	pop si
0354+  06A8 09          	ret
0355+  06A9             
0356+  06A9             
0357+  06A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  06A9             ; PRINT NULL TERMINATED STRING
0359+  06A9             ; pointer in D
0360+  06A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  06A9             puts:
0362+  06A9 D7          	push a
0363+  06AA DA          	push d
0364+  06AB             puts_L1:
0365+  06AB 1E          	mov al, [d]
0366+  06AC B9 00       	cmp al, 0
0367+  06AE C6 BA 06    	jz puts_END
0368+  06B1 23          	mov ah, al
0369+  06B2 19 00       	mov al, 0
0370+  06B4 05 03       	syscall sys_io
0371+  06B6 79          	inc d
0372+  06B7 0A AB 06    	jmp puts_L1
0373+  06BA             puts_END:
0374+  06BA E7          	pop d
0375+  06BB E4          	pop a
0376+  06BC 09          	ret
0377+  06BD             
0378+  06BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  06BD             ; PRINT N SIZE STRING
0380+  06BD             ; pointer in D
0381+  06BD             ; size in C
0382+  06BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  06BD             putsn:
0384+  06BD DB          	push al
0385+  06BE DA          	push d
0386+  06BF D9          	push c
0387+  06C0             putsn_L0:
0388+  06C0 1E          	mov al, [d]
0389+  06C1 23          	mov ah, al
0390+  06C2 19 00       	mov al, 0
0391+  06C4 05 03       	syscall sys_io
0392+  06C6 79          	inc d
0393+  06C7 7E          	dec c	
0394+  06C8 C2 00 00    	cmp c, 0
0395+  06CB C7 C0 06    	jne putsn_L0
0396+  06CE             putsn_end:
0397+  06CE E6          	pop c
0398+  06CF E7          	pop d
0399+  06D0 E8          	pop al
0400+  06D1 09          	ret
0401+  06D2             
0402+  06D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  06D2             ; print 16bit decimal number
0404+  06D2             ; input number in A
0405+  06D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  06D2             print_u16d:
0407+  06D2 D7          	push a
0408+  06D3 D8          	push b
0409+  06D4 26 10 27    	mov b, 10000
0410+  06D7 AE          	div a, b			; get 10000 coeff.
0411+  06D8 07 FE 06    	call print_number
0412+  06DB 11          	mov a, b
0413+  06DC 26 E8 03    	mov b, 1000
0414+  06DF AE          	div a, b			; get 10000 coeff.
0415+  06E0 07 FE 06    	call print_number
0416+  06E3 11          	mov a, b
0417+  06E4 26 64 00    	mov b, 100
0418+  06E7 AE          	div a, b
0419+  06E8 07 FE 06    	call print_number
0420+  06EB 11          	mov a, b
0421+  06EC 26 0A 00    	mov b, 10
0422+  06EF AE          	div a, b
0423+  06F0 07 FE 06    	call print_number
0424+  06F3 11          	mov a, b
0425+  06F4 6A 30       	add al, $30
0426+  06F6 23          	mov ah, al
0427+  06F7 19 00       	mov al, 0
0428+  06F9 05 03       	syscall sys_io	; print coeff
0429+  06FB E5          	pop b
0430+  06FC E4          	pop a
0431+  06FD 09          	ret
0432+  06FE             
0433+  06FE             
0434+  06FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  06FE             ; if A == 0, print space
0436+  06FE             ; else print A
0437+  06FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  06FE             print_number:
0439+  06FE 6A 30       	add al, $30
0440+  0700 23          	mov ah, al
0441+  0701 07 6F 05    	call putchar
0442+  0704 09          	ret
0443+  0705             
0444+  0705             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  0705             ; PRINT 16BIT HEX INTEGER
0446+  0705             ; integer value in reg B
0447+  0705             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  0705             print_u16x:
0449+  0705 D7          	push a
0450+  0706 D8          	push b
0451+  0707 DD          	push bl
0452+  0708 30          	mov bl, bh
0453+  0709 07 36 05    	call itoa				; convert bh to char in A
0454+  070C 2F          	mov bl, al				; save al
0455+  070D 19 00       	mov al, 0
0456+  070F 05 03       	syscall sys_io				; display AH
0457+  0711 24          	mov ah, bl				; retrieve al
0458+  0712 19 00       	mov al, 0
0459+  0714 05 03       	syscall sys_io				; display AL
0460+  0716             
0461+  0716 EA          	pop bl
0462+  0717 07 36 05    	call itoa				; convert bh to char in A
0463+  071A 2F          	mov bl, al				; save al
0464+  071B 19 00       	mov al, 0
0465+  071D 05 03       	syscall sys_io				; display AH
0466+  071F 24          	mov ah, bl				; retrieve al
0467+  0720 19 00       	mov al, 0
0468+  0722 05 03       	syscall sys_io				; display AL
0469+  0724             
0470+  0724 E5          	pop b
0471+  0725 E4          	pop a
0472+  0726 09          	ret
0473+  0727             
0474+  0727             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  0727             ; INPUT 16BIT HEX INTEGER
0476+  0727             ; read 16bit integer into A
0477+  0727             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  0727             scan_u16x:
0479+  0727 F8 10 00    	enter 16
0480+  072A D8          	push b
0481+  072B DA          	push d
0482+  072C             
0483+  072C FA F1 FF    	lea d, [bp + -15]
0484+  072F 07 76 05    	call gets				; get number
0485+  0732             
0486+  0732 32          	mov bl, [d]
0487+  0733 37          	mov bh, bl
0488+  0734 33 01 00    	mov bl, [d + 1]
0489+  0737 07 24 05    	call atoi				; convert to int in AL
0490+  073A 23          	mov ah, al				; move to AH
0491+  073B             
0492+  073B 33 02 00    	mov bl, [d + 2]
0493+  073E 37          	mov bh, bl
0494+  073F 33 03 00    	mov bl, [d + 3]
0495+  0742 07 24 05    	call atoi				; convert to int in AL
0496+  0745             
0497+  0745 E7          	pop d
0498+  0746 E5          	pop b
0499+  0747 F9          	leave
0500+  0748 09          	ret
0501+  0749             
0502+  0749             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  0749             ; PRINT 8bit HEX INTEGER
0504+  0749             ; integer value in reg bl
0505+  0749             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  0749             print_u8x:
0507+  0749 D7          	push a
0508+  074A DD          	push bl
0509+  074B             
0510+  074B 07 36 05    	call itoa				; convert bl to char in A
0511+  074E 2F          	mov bl, al				; save al
0512+  074F 19 00       	mov al, 0
0513+  0751 05 03       	syscall sys_io				; display AH
0514+  0753 24          	mov ah, bl				; retrieve al
0515+  0754 19 00       	mov al, 0
0516+  0756 05 03       	syscall sys_io				; display AL
0517+  0758             
0518+  0758 EA          	pop bl
0519+  0759 E4          	pop a
0520+  075A 09          	ret
0521+  075B             
0522+  075B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  075B             ; print 8bit decimal unsigned number
0524+  075B             ; input number in AL
0525+  075B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  075B             print_u8d:
0527+  075B D7          	push a
0528+  075C D8          	push b
0529+  075D             
0530+  075D 22 00       	mov ah, 0
0531+  075F 26 64 00    	mov b, 100
0532+  0762 AE          	div a, b
0533+  0763 D8          	push b			; save remainder
0534+  0764 B9 00       	cmp al, 0
0535+  0766 C6 70 07    	je skip100
0536+  0769 6A 30       	add al, $30
0537+  076B 23          	mov ah, al
0538+  076C 19 00       	mov al, 0
0539+  076E 05 03       	syscall sys_io	; print coeff
0540+  0770             skip100:
0541+  0770 E4          	pop a
0542+  0771 22 00       	mov ah, 0
0543+  0773 26 0A 00    	mov b, 10
0544+  0776 AE          	div a, b
0545+  0777 D8          	push b			; save remainder
0546+  0778 B9 00       	cmp al, 0
0547+  077A C6 84 07    	je skip10
0548+  077D 6A 30       	add al, $30
0549+  077F 23          	mov ah, al
0550+  0780 19 00       	mov al, 0
0551+  0782 05 03       	syscall sys_io	; print coeff
0552+  0784             skip10:
0553+  0784 E4          	pop a
0554+  0785 1B          	mov al, bl
0555+  0786 6A 30       	add al, $30
0556+  0788 23          	mov ah, al
0557+  0789 19 00       	mov al, 0
0558+  078B 05 03       	syscall sys_io	; print coeff
0559+  078D E5          	pop b
0560+  078E E4          	pop a
0561+  078F 09          	ret
0562+  0790             
0563+  0790             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  0790             ; INPUT 8BIT HEX INTEGER
0565+  0790             ; read 8bit integer into AL
0566+  0790             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  0790             scan_u8x:
0568+  0790 F8 04 00    	enter 4
0569+  0793 D8          	push b
0570+  0794 DA          	push d
0571+  0795             
0572+  0795 FA FD FF    	lea d, [bp + -3]
0573+  0798 07 76 05    	call gets				; get number
0574+  079B             
0575+  079B 32          	mov bl, [d]
0576+  079C 37          	mov bh, bl
0577+  079D 33 01 00    	mov bl, [d + 1]
0578+  07A0 07 24 05    	call atoi				; convert to int in AL
0579+  07A3             
0580+  07A3 E7          	pop d
0581+  07A4 E5          	pop b
0582+  07A5 F9          	leave
0583+  07A6 09          	ret
0584+  07A7             
0585+  07A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  07A7             ; input decimal number
0587+  07A7             ; result in A
0588+  07A7             ; 655'\0'
0589+  07A7             ; low--------high
0590+  07A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  07A7             scan_u16d:
0592+  07A7 F8 08 00    	enter 8
0593+  07AA E2          	push si
0594+  07AB D8          	push b
0595+  07AC D9          	push c
0596+  07AD DA          	push d
0597+  07AE FA F9 FF    	lea d, [bp +- 7]
0598+  07B1 07 76 05    	call gets
0599+  07B4 07 AC 04    	call strlen			; get string length in C
0600+  07B7 7E          	dec c
0601+  07B8 FD 4E       	mov si, d
0602+  07BA 12          	mov a, c
0603+  07BB FD 99       	shl a
0604+  07BD 3B 0C 05    	mov d, table_power
0605+  07C0 59          	add d, a
0606+  07C1 38 00 00    	mov c, 0
0607+  07C4             mul_loop:
0608+  07C4 F6          	lodsb			; load ASCII to al
0609+  07C5 B9 00       	cmp al, 0
0610+  07C7 C6 DA 07    	je mul_exit
0611+  07CA 6F 30       	sub al, $30		; make into integer
0612+  07CC 22 00       	mov ah, 0
0613+  07CE 2A          	mov b, [d]
0614+  07CF AC          	mul a, b			; result in B since it fits in 16bits
0615+  07D0 11          	mov a, b
0616+  07D1 28          	mov b, c
0617+  07D2 54          	add a, b
0618+  07D3 39          	mov c, a
0619+  07D4 63 02 00    	sub d, 2
0620+  07D7 0A C4 07    	jmp mul_loop
0621+  07DA             mul_exit:
0622+  07DA 12          	mov a, c
0623+  07DB E7          	pop d
0624+  07DC E6          	pop c
0625+  07DD E5          	pop b
0626+  07DE EF          	pop si
0627+  07DF F9          	leave
0628+  07E0 09          	ret
0073   07E1             ; --- end include block
0074   07E1             
0075   07E1             .end
tasm: Number of errors = 0
