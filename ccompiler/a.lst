0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 29 52 05      mov b, [__m]
0011   0405 D7            push a
0012   0406 74            mov d, b
0013   0407 DA            push d
0014   0408 26 00 00      mov b, 0
0015   040B E7            pop d
0016   040C 10 02 00      mov a, 2
0017   040F AC            mul a, b
0018   0410 5A            add d, b
0019   0411 E4            pop a
0020   0412 DA            push d
0021   0413 26 02 00      mov b, 2
0022   0416 E7            pop d
0023   0417 FD 43         mov [d], b
0024   0419 29 52 05      mov b, [__m]
0025   041C D7            push a
0026   041D 74            mov d, b
0027   041E DA            push d
0028   041F 26 01 00      mov b, 1
0029   0422 E7            pop d
0030   0423 10 02 00      mov a, 2
0031   0426 AC            mul a, b
0032   0427 5A            add d, b
0033   0428 E4            pop a
0034   0429 DA            push d
0035   042A 26 01 00      mov b, 1
0036   042D E7            pop d
0037   042E FD 43         mov [d], b
0038   0430 29 52 05      mov b, [__m]
0039   0433 D7            push a
0040   0434 74            mov d, b
0041   0435 DA            push d
0042   0436 29 52 05      mov b, [__m]
0043   0439 D7            push a
0044   043A 74            mov d, b
0045   043B DA            push d
0046   043C 26 00 00      mov b, 0
0047   043F E7            pop d
0048   0440 10 02 00      mov a, 2
0049   0443 AC            mul a, b
0050   0444 5A            add d, b
0051   0445 2A            mov b, [d]
0052   0446 E4            pop a
0053   0447 E7            pop d
0054   0448 10 02 00      mov a, 2
0055   044B AC            mul a, b
0056   044C 5A            add d, b
0057   044D E4            pop a
0058   044E DA            push d
0059   044F 26 37 00      mov b, 55
0060   0452 E7            pop d
0061   0453 FD 43         mov [d], b
0062   0455 29 52 05      mov b, [__m]
0063   0458 D7            push a
0064   0459 74            mov d, b
0065   045A DA            push d
0066   045B 29 52 05      mov b, [__m]
0067   045E D7            push a
0068   045F 74            mov d, b
0069   0460 DA            push d
0070   0461 26 00 00      mov b, 0
0071   0464 E7            pop d
0072   0465 10 02 00      mov a, 2
0073   0468 AC            mul a, b
0074   0469 5A            add d, b
0075   046A 2A            mov b, [d]
0076   046B E4            pop a
0077   046C D7            push a
0078   046D 11            mov a, b
0079   046E 29 52 05      mov b, [__m]
0080   0471 D7            push a
0081   0472 74            mov d, b
0082   0473 DA            push d
0083   0474 26 01 00      mov b, 1
0084   0477 E7            pop d
0085   0478 10 02 00      mov a, 2
0086   047B AC            mul a, b
0087   047C 5A            add d, b
0088   047D 2A            mov b, [d]
0089   047E E4            pop a
0090   047F 54            add a, b
0091   0480 27            mov b, a
0092   0481 E4            pop a
0093   0482 E7            pop d
0094   0483 10 02 00      mov a, 2
0095   0486 AC            mul a, b
0096   0487 5A            add d, b
0097   0488 E4            pop a
0098   0489 DA            push d
0099   048A 26 4D 00      mov b, 77
0100   048D E7            pop d
0101   048E FD 43         mov [d], b
0102   0490 29 52 05      mov b, [__m]
0103   0493 D7            push a
0104   0494 74            mov d, b
0105   0495 DA            push d
0106   0496 29 52 05      mov b, [__m]
0107   0499 D7            push a
0108   049A 74            mov d, b
0109   049B DA            push d
0110   049C 26 00 00      mov b, 0
0111   049F E7            pop d
0112   04A0 10 02 00      mov a, 2
0113   04A3 AC            mul a, b
0114   04A4 5A            add d, b
0115   04A5 2A            mov b, [d]
0116   04A6 E4            pop a
0117   04A7 E7            pop d
0118   04A8 10 02 00      mov a, 2
0119   04AB AC            mul a, b
0120   04AC 5A            add d, b
0121   04AD 2A            mov b, [d]
0122   04AE E4            pop a
0123   04AF FD AB         swp b
0124   04B1 D8            push b
0125   04B2 07 29 05      call printn
0126   04B5 51 02 00      add sp, 2
0127   04B8 26 54 05      mov b, __string_0 ; "\n"
0128   04BB FD AB         swp b
0129   04BD D8            push b
0130   04BE 07 33 05      call print
0131   04C1 51 02 00      add sp, 2
0132   04C4 29 52 05      mov b, [__m]
0133   04C7 D7            push a
0134   04C8 74            mov d, b
0135   04C9 DA            push d
0136   04CA 29 52 05      mov b, [__m]
0137   04CD D7            push a
0138   04CE 74            mov d, b
0139   04CF DA            push d
0140   04D0 26 00 00      mov b, 0
0141   04D3 E7            pop d
0142   04D4 10 02 00      mov a, 2
0143   04D7 AC            mul a, b
0144   04D8 5A            add d, b
0145   04D9 2A            mov b, [d]
0146   04DA E4            pop a
0147   04DB D7            push a
0148   04DC 11            mov a, b
0149   04DD 29 52 05      mov b, [__m]
0150   04E0 D7            push a
0151   04E1 74            mov d, b
0152   04E2 DA            push d
0153   04E3 26 01 00      mov b, 1
0154   04E6 E7            pop d
0155   04E7 10 02 00      mov a, 2
0156   04EA AC            mul a, b
0157   04EB 5A            add d, b
0158   04EC 2A            mov b, [d]
0159   04ED E4            pop a
0160   04EE 54            add a, b
0161   04EF 27            mov b, a
0162   04F0 E4            pop a
0163   04F1 E7            pop d
0164   04F2 10 02 00      mov a, 2
0165   04F5 AC            mul a, b
0166   04F6 5A            add d, b
0167   04F7 2A            mov b, [d]
0168   04F8 E4            pop a
0169   04F9 FD AB         swp b
0170   04FB D8            push b
0171   04FC 07 29 05      call printn
0172   04FF 51 02 00      add sp, 2
0173   0502 26 54 05      mov b, __string_0 ; "\n"
0174   0505 FD AB         swp b
0175   0507 D8            push b
0176   0508 07 33 05      call print
0177   050B 51 02 00      add sp, 2
0178   050E F9            leave
0179   050F 05 0B         syscall sys_terminate_proc
0180   0511             
0181   0511             scann:
0182   0511 D2            push bp
0183   0512 9B            mov bp, sp
0184   0513 52 02 00      sub sp, 2 ; m
0185   0516             
0186   0516             ; --- BEGIN INLINE ASM BLOCK
0187   0516 07 A0 08      call scan_u16d
0188   0519 45 FF FF      mov [bp + -1], a
0189   051C             ; --- END INLINE ASM BLOCK
0190   051C             
0191   051C FA 05 00      lea d, [bp + 5] ; n
0192   051F 2A            mov b, [d]
0193   0520 D8            push b
0194   0521 2C FF FF      mov b, [bp + -1] ; m
0195   0524 E7            pop d
0196   0525 11            mov a, b
0197   0526 43            mov [d], a
0198   0527 F9            leave
0199   0528 09            ret
0200   0529             
0201   0529             printn:
0202   0529 D2            push bp
0203   052A 9B            mov bp, sp
0204   052B             
0205   052B             ; --- BEGIN INLINE ASM BLOCK
0206   052B 17 05 00      mov a, [bp + 5]
0207   052E 07 CB 07      call print_u16d
0208   0531             ; --- END INLINE ASM BLOCK
0209   0531             
0210   0531 F9            leave
0211   0532 09            ret
0212   0533             
0213   0533             print:
0214   0533 D2            push bp
0215   0534 9B            mov bp, sp
0216   0535             
0217   0535             ; --- BEGIN INLINE ASM BLOCK
0218   0535 17 05 00      mov a, [bp + 5]
0219   0538 3C            mov d, a
0220   0539 07 A2 07      call puts
0221   053C             ; --- END INLINE ASM BLOCK
0222   053C             
0223   053C F9            leave
0224   053D 09            ret
0225   053E             ; --- END TEXT BLOCK
0226   053E             
0227   053E             ; --- BEGIN DATA BLOCK
0228   053E 00 00 00 00 __m_data: .fill 20, 0
0228   0542 00 00 00 00 
0228   0546 00 00 00 00 
0228   054A 00 00 00 00 
0228   054E 00 00 00 00 
0229   0552 3E 05       __m: .dw __m_data
0230   0554 0A 00       __string_0: .db "\n", 0
0231   0556             ; --- END DATA BLOCK
0232   0556             
0233   0556             ; --- BEGIN INCLUDE BLOCK
0234   0556             .include "lib/stdio.asm"
0001+  0556             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0556             ; stdio.s
0003+  0556             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0556             .include "lib/string.asm"
0001++ 0556             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0556             ; string.s
0003++ 0556             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0556             
0005++ 0556             
0006++ 0556             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0556             ; strrev
0008++ 0556             ; reverse a string
0009++ 0556             ; D = string address
0010++ 0556             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0556             ; 01234
0012++ 0556             strrev:
0013++ 0556 4B          	pusha
0014++ 0557 07 9D 05    	call strlen	; length in C
0015++ 055A 12          	mov a, c
0016++ 055B AF 01 00    	cmp a, 1
0017++ 055E D0 78 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0561 7D          	dec a
0019++ 0562 FD 4E       	mov si, d	; beginning of string
0020++ 0564 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0566 59          	add d, a	; end of string
0022++ 0567 12          	mov a, c
0023++ 0568 FD 9B       	shr a		; divide by 2
0024++ 056A 39          	mov c, a	; C now counts the steps
0025++ 056B             strrev_L0:
0026++ 056B 32          	mov bl, [d]	; save load right-side char into BL
0027++ 056C F6          	lodsb		; load left-side char into AL; increase SI
0028++ 056D 3E          	mov [d], al	; store left char into right side
0029++ 056E 1B          	mov al, bl
0030++ 056F F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0570 7E          	dec c
0032++ 0571 7F          	dec d
0033++ 0572 C2 00 00    	cmp c, 0
0034++ 0575 C7 6B 05    	jne strrev_L0
0035++ 0578             strrev_end:
0036++ 0578 4C          	popa
0037++ 0579 09          	ret
0038++ 057A             	
0039++ 057A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 057A             ; strchr
0041++ 057A             ; search string in D for char in AL
0042++ 057A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 057A             strchr:
0044++ 057A             strchr_L0:
0045++ 057A 32          	mov bl, [d]
0046++ 057B C1 00       	cmp bl, 0
0047++ 057D C6 88 05    	je strchr_end
0048++ 0580 BA          	cmp al, bl
0049++ 0581 C6 88 05    	je strchr_end
0050++ 0584 79          	inc d
0051++ 0585 0A 7A 05    	jmp strchr_L0
0052++ 0588             strchr_end:
0053++ 0588 1B          	mov al, bl
0054++ 0589 09          	ret
0055++ 058A             
0056++ 058A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 058A             ; strstr
0058++ 058A             ; find sub-string
0059++ 058A             ; str1 in SI
0060++ 058A             ; str2 in DI
0061++ 058A             ; SI points to end of source string
0062++ 058A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 058A             strstr:
0064++ 058A DB          	push al
0065++ 058B DA          	push d
0066++ 058C E3          	push di
0067++ 058D             strstr_loop:
0068++ 058D F3          	cmpsb					; compare a byte of the strings
0069++ 058E C7 99 05    	jne strstr_ret
0070++ 0591 FC 00 00    	lea d, [di + 0]
0071++ 0594 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0596 C7 8D 05    	jne strstr_loop				; equal chars but not at end
0073++ 0599             strstr_ret:
0074++ 0599 F0          	pop di
0075++ 059A E7          	pop d
0076++ 059B E8          	pop al
0077++ 059C 09          	ret
0078++ 059D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 059D             ; length of null terminated string
0080++ 059D             ; result in C
0081++ 059D             ; pointer in D
0082++ 059D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 059D             strlen:
0084++ 059D DA          	push d
0085++ 059E 38 00 00    	mov c, 0
0086++ 05A1             strlen_L1:
0087++ 05A1 BD 00       	cmp byte [d], 0
0088++ 05A3 C6 AB 05    	je strlen_ret
0089++ 05A6 79          	inc d
0090++ 05A7 78          	inc c
0091++ 05A8 0A A1 05    	jmp strlen_L1
0092++ 05AB             strlen_ret:
0093++ 05AB E7          	pop d
0094++ 05AC 09          	ret
0095++ 05AD             
0096++ 05AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 05AD             ; STRCMP
0098++ 05AD             ; compare two strings
0099++ 05AD             ; str1 in SI
0100++ 05AD             ; str2 in DI
0101++ 05AD             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 05AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 05AD             strcmp:
0104++ 05AD DB          	push al
0105++ 05AE DA          	push d
0106++ 05AF E3          	push di
0107++ 05B0 E2          	push si
0108++ 05B1             strcmp_loop:
0109++ 05B1 F3          	cmpsb					; compare a byte of the strings
0110++ 05B2 C7 BD 05    	jne strcmp_ret
0111++ 05B5 FB FF FF    	lea d, [si +- 1]
0112++ 05B8 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 05BA C7 B1 05    	jne strcmp_loop				; equal chars but not at end
0114++ 05BD             strcmp_ret:
0115++ 05BD EF          	pop si
0116++ 05BE F0          	pop di
0117++ 05BF E7          	pop d
0118++ 05C0 E8          	pop al
0119++ 05C1 09          	ret
0120++ 05C2             
0121++ 05C2             
0122++ 05C2             ; STRCPY
0123++ 05C2             ; copy null terminated string from SI to DI
0124++ 05C2             ; source in SI
0125++ 05C2             ; destination in DI
0126++ 05C2             strcpy:
0127++ 05C2 E2          	push si
0128++ 05C3 E3          	push di
0129++ 05C4 DB          	push al
0130++ 05C5             strcpy_L1:
0131++ 05C5 F6          	lodsb
0132++ 05C6 F7          	stosb
0133++ 05C7 B9 00       	cmp al, 0
0134++ 05C9 C7 C5 05    	jne strcpy_L1
0135++ 05CC             strcpy_end:
0136++ 05CC E8          	pop al
0137++ 05CD F0          	pop di
0138++ 05CE EF          	pop si
0139++ 05CF 09          	ret
0140++ 05D0             
0141++ 05D0             ; STRCAT
0142++ 05D0             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 05D0             ; source in SI
0144++ 05D0             ; destination in DI
0145++ 05D0             strcat:
0146++ 05D0 E2          	push si
0147++ 05D1 E3          	push di
0148++ 05D2 D7          	push a
0149++ 05D3 DA          	push d
0150++ 05D4 50          	mov a, di
0151++ 05D5 3C          	mov d, a
0152++ 05D6             strcat_goto_end_L1:
0153++ 05D6 BD 00       	cmp byte[d], 0
0154++ 05D8 C6 DF 05    	je strcat_start
0155++ 05DB 79          	inc d
0156++ 05DC 0A D6 05    	jmp strcat_goto_end_L1
0157++ 05DF             strcat_start:
0158++ 05DF FD 50       	mov di, d
0159++ 05E1             strcat_L1:
0160++ 05E1 F6          	lodsb
0161++ 05E2 F7          	stosb
0162++ 05E3 B9 00       	cmp al, 0
0163++ 05E5 C7 E1 05    	jne strcat_L1
0164++ 05E8             strcat_end:
0165++ 05E8 E7          	pop d
0166++ 05E9 E4          	pop a
0167++ 05EA F0          	pop di
0168++ 05EB EF          	pop si
0169++ 05EC 09          	ret
0005+  05ED             
0006+  05ED 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  05F1 34 35 36 37 
0006+  05F5 38 39 41 42 
0006+  05F9 43 44 45 46 
0007+  05FD 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0601 1B 5B 48 00 
0008+  0605             
0009+  0605 01 00       table_power:.dw 1
0010+  0607 0A 00       			.dw 10
0011+  0609 64 00       			.dw 100
0012+  060B E8 03       			.dw 1000
0013+  060D 10 27       			.dw 10000
0014+  060F             
0015+  060F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  060F             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  060F             ; ASCII in BL
0018+  060F             ; result in AL
0019+  060F             ; ascii for F = 0100 0110
0020+  060F             ; ascii for 9 = 0011 1001
0021+  060F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  060F             hex_ascii_encode:
0023+  060F 1B          	mov al, bl
0024+  0610 93 40       	test al, $40				; test if letter or number
0025+  0612 C7 18 06    	jnz hex_letter
0026+  0615 87 0F       	and al, $0F				; get number
0027+  0617 09          	ret
0028+  0618             hex_letter:
0029+  0618 87 0F       	and al, $0F				; get letter
0030+  061A 6A 09       	add al, 9
0031+  061C 09          	ret
0032+  061D             
0033+  061D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  061D             ; ATOI
0035+  061D             ; 2 letter hex string in B
0036+  061D             ; 8bit integer returned in AL
0037+  061D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  061D             atoi:
0039+  061D D8          	push b
0040+  061E 07 0F 06    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0621 30          	mov bl, bh
0042+  0622 DB          	push al					; save a
0043+  0623 07 0F 06    	call hex_ascii_encode
0044+  0626 EA          	pop bl	
0045+  0627 FD 9E 04    	shl al, 4
0046+  062A 8C          	or al, bl
0047+  062B E5          	pop b
0048+  062C 09          	ret	
0049+  062D             
0050+  062D             
0051+  062D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  062D             ; printf
0053+  062D             ; no need for explanations!
0054+  062D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  062D             printf:
0056+  062D 09          	ret
0057+  062E             
0058+  062E             
0059+  062E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  062E             ; scanf
0061+  062E             ; no need for explanations!
0062+  062E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  062E             scanf:
0064+  062E 09          	ret
0065+  062F             
0066+  062F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  062F             ; ITOA
0068+  062F             ; 8bit value in BL
0069+  062F             ; 2 byte ASCII result in A
0070+  062F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  062F             itoa:
0072+  062F DA          	push d
0073+  0630 D8          	push b
0074+  0631 A7 00       	mov bh, 0
0075+  0633 FD A4 04    	shr bl, 4	
0076+  0636 74          	mov d, b
0077+  0637 1F ED 05    	mov al, [d + s_hex_digits]
0078+  063A 23          	mov ah, al
0079+  063B             	
0080+  063B E5          	pop b
0081+  063C D8          	push b
0082+  063D A7 00       	mov bh, 0
0083+  063F FD 87 0F    	and bl, $0F
0084+  0642 74          	mov d, b
0085+  0643 1F ED 05    	mov al, [d + s_hex_digits]
0086+  0646 E5          	pop b
0087+  0647 E7          	pop d
0088+  0648 09          	ret
0089+  0649             
0090+  0649             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0649             ; HEX STRING TO BINARY
0092+  0649             ; di = destination address
0093+  0649             ; si = source
0094+  0649             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0649             hex_to_int:
0096+  0649             hex_to_int_L1:
0097+  0649 F6          	lodsb					; load from [SI] to AL
0098+  064A B9 00       	cmp al, 0				; check if ASCII 0
0099+  064C C6 59 06    	jz hex_to_int_ret
0100+  064F 36          	mov bh, al
0101+  0650 F6          	lodsb
0102+  0651 2F          	mov bl, al
0103+  0652 07 1D 06    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0655 F7          	stosb					; store AL to [DI]
0105+  0656 0A 49 06    	jmp hex_to_int_L1
0106+  0659             hex_to_int_ret:
0107+  0659 09          	ret		
0108+  065A             
0109+  065A             
0110+  065A             
0111+  065A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  065A             ; GETCHAR
0113+  065A             ; char in ah
0114+  065A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  065A             getchar:
0116+  065A DB          	push al
0117+  065B             getchar_retry:
0118+  065B FD 0C       	sti
0119+  065D 19 01       	mov al, 1
0120+  065F 05 03       	syscall sys_io			; receive in AH
0121+  0661 B9 00       	cmp al, 0			; check if any char was receive
0122+  0663 C6 5B 06    	je getchar_retry
0123+  0666 E8          	pop al
0124+  0667 09          	ret
0125+  0668             
0126+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0668             ; PUTCHAR
0128+  0668             ; char in ah
0129+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0668             putchar:
0131+  0668 D7          	push a
0132+  0669 19 00       	mov al, 0
0133+  066B 05 03       	syscall sys_io			; char in AH
0134+  066D E4          	pop a
0135+  066E 09          	ret
0136+  066F             
0137+  066F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  066F             ;; INPUT A STRING
0139+  066F             ;; terminates with null
0140+  066F             ;; pointer in D
0141+  066F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  066F             gets:
0143+  066F D7          	push a
0144+  0670 DA          	push d
0145+  0671             gets_loop:
0146+  0671 FD 0C       	sti
0147+  0673 19 01       	mov al, 1
0148+  0675 05 03       	syscall sys_io			; receive in AH
0149+  0677 B9 00       	cmp al, 0				; check error code (AL)
0150+  0679 C6 71 06    	je gets_loop			; if no char received, retry
0151+  067C             
0152+  067C 76 1B       	cmp ah, 27
0153+  067E C6 9F 06    	je gets_telnet_escape
0154+  0681 76 0A       	cmp ah, $0A				; LF
0155+  0683 C6 F8 06    	je gets_end
0156+  0686 76 0D       	cmp ah, $0D				; CR
0157+  0688 C6 F8 06    	je gets_end
0158+  068B 76 5C       	cmp ah, $5C				; '\\'
0159+  068D C6 CF 06    	je gets_escape
0160+  0690             	
0161+  0690 76 08       	cmp ah, $08			; check for backspace
0162+  0692 C6 9B 06    	je gets_backspace
0163+  0695             
0164+  0695 1A          	mov al, ah
0165+  0696 3E          	mov [d], al
0166+  0697 79          	inc d
0167+  0698 0A 71 06    	jmp gets_loop
0168+  069B             gets_backspace:
0169+  069B 7F          	dec d
0170+  069C 0A 71 06    	jmp gets_loop
0171+  069F             gets_telnet_escape:
0172+  069F FD 0C       	sti
0173+  06A1 19 01       	mov al, 1
0174+  06A3 05 03       	syscall sys_io				; receive in AH without echo
0175+  06A5 B9 00       	cmp al, 0					; check error code (AL)
0176+  06A7 C6 9F 06    	je gets_telnet_escape		; if no char received, retry
0177+  06AA 76 5B       	cmp ah, '['
0178+  06AC C7 71 06    	jne gets_loop
0179+  06AF             gets_telnet_escape_phase2:
0180+  06AF FD 0C       	sti
0181+  06B1 19 01       	mov al, 1
0182+  06B3 05 03       	syscall sys_io					; receive in AH without echo
0183+  06B5 B9 00       	cmp al, 0						; check error code (AL)
0184+  06B7 C6 AF 06    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  06BA 76 44       	cmp ah, 'D'
0186+  06BC C6 C7 06    	je gets_left_arrow
0187+  06BF 76 43       	cmp ah, 'C'
0188+  06C1 C6 CB 06    	je gets_right_arrow
0189+  06C4 0A 71 06    	jmp gets_loop
0190+  06C7             gets_left_arrow:
0191+  06C7 7F          	dec d
0192+  06C8 0A 71 06    	jmp gets_loop
0193+  06CB             gets_right_arrow:
0194+  06CB 79          	inc d
0195+  06CC 0A 71 06    	jmp gets_loop
0196+  06CF             gets_escape:
0197+  06CF FD 0C       	sti
0198+  06D1 19 01       	mov al, 1
0199+  06D3 05 03       	syscall sys_io			; receive in AH
0200+  06D5 B9 00       	cmp al, 0				; check error code (AL)
0201+  06D7 C6 CF 06    	je gets_escape			; if no char received, retry
0202+  06DA 76 6E       	cmp ah, 'n'
0203+  06DC C6 EA 06    	je gets_LF
0204+  06DF 76 72       	cmp ah, 'r'
0205+  06E1 C6 F1 06    	je gets_CR
0206+  06E4 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  06E5 3E          	mov [d], al
0208+  06E6 79          	inc d
0209+  06E7 0A 71 06    	jmp gets_loop
0210+  06EA             gets_LF:
0211+  06EA 19 0A       	mov al, $0A
0212+  06EC 3E          	mov [d], al
0213+  06ED 79          	inc d
0214+  06EE 0A 71 06    	jmp gets_loop
0215+  06F1             gets_CR:
0216+  06F1 19 0D       	mov al, $0D
0217+  06F3 3E          	mov [d], al
0218+  06F4 79          	inc d
0219+  06F5 0A 71 06    	jmp gets_loop
0220+  06F8             gets_end:
0221+  06F8 19 00       	mov al, 0
0222+  06FA 3E          	mov [d], al				; terminate string
0223+  06FB E7          	pop d
0224+  06FC E4          	pop a
0225+  06FD 09          	ret
0226+  06FE             
0227+  06FE             
0228+  06FE             
0229+  06FE             
0230+  06FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  06FE             ;; INPUT TEXT
0232+  06FE             ;; terminated with CTRL+D
0233+  06FE             ;; pointer in D
0234+  06FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  06FE             gettxt:
0236+  06FE D7          	push a
0237+  06FF DA          	push d
0238+  0700             gettxt_loop:
0239+  0700 19 01       	mov al, 1
0240+  0702 05 03       	syscall sys_io			; receive in AH
0241+  0704 B9 00       	cmp al, 0				; check error code (AL)
0242+  0706 C6 00 07    	je gettxt_loop		; if no char received, retry
0243+  0709 76 04       	cmp ah, 4			; EOT
0244+  070B C6 49 07    	je gettxt_end
0245+  070E 76 08       	cmp ah, $08			; check for backspace
0246+  0710 C6 45 07    	je gettxt_backspace
0247+  0713 76 5C       	cmp ah, $5C				; '\\'
0248+  0715 C6 1E 07    	je gettxt_escape
0249+  0718 1A          	mov al, ah
0250+  0719 3E          	mov [d], al
0251+  071A 79          	inc d
0252+  071B 0A 00 07    	jmp gettxt_loop
0253+  071E             gettxt_escape:
0254+  071E 19 01       	mov al, 1
0255+  0720 05 03       	syscall sys_io			; receive in AH
0256+  0722 B9 00       	cmp al, 0				; check error code (AL)
0257+  0724 C6 1E 07    	je gettxt_escape		; if no char received, retry
0258+  0727 76 6E       	cmp ah, 'n'
0259+  0729 C6 37 07    	je gettxt_LF
0260+  072C 76 72       	cmp ah, 'r'
0261+  072E C6 3E 07    	je gettxt_CR
0262+  0731 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0732 3E          	mov [d], al
0264+  0733 79          	inc d
0265+  0734 0A 00 07    	jmp gettxt_loop
0266+  0737             gettxt_LF:
0267+  0737 19 0A       	mov al, $0A
0268+  0739 3E          	mov [d], al
0269+  073A 79          	inc d
0270+  073B 0A 00 07    	jmp gettxt_loop
0271+  073E             gettxt_CR:
0272+  073E 19 0D       	mov al, $0D
0273+  0740 3E          	mov [d], al
0274+  0741 79          	inc d
0275+  0742 0A 00 07    	jmp gettxt_loop
0276+  0745             gettxt_backspace:
0277+  0745 7F          	dec d
0278+  0746 0A 00 07    	jmp gettxt_loop
0279+  0749             gettxt_end:
0280+  0749 19 00       	mov al, 0
0281+  074B 3E          	mov [d], al				; terminate string
0282+  074C E7          	pop d
0283+  074D E4          	pop a
0284+  074E 09          	ret
0285+  074F             
0286+  074F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  074F             ; PRINT NEW LINE
0288+  074F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  074F             printnl:
0290+  074F D7          	push a
0291+  0750 10 00 0A    	mov a, $0A00
0292+  0753 05 03       	syscall sys_io
0293+  0755 10 00 0D    	mov a, $0D00
0294+  0758 05 03       	syscall sys_io
0295+  075A E4          	pop a
0296+  075B 09          	ret
0297+  075C             
0298+  075C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  075C             ; strtoint
0300+  075C             ; 4 digit hex string number in d
0301+  075C             ; integer returned in A
0302+  075C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  075C             strtointx:
0304+  075C D8          	push b
0305+  075D 32          	mov bl, [d]
0306+  075E 37          	mov bh, bl
0307+  075F 33 01 00    	mov bl, [d + 1]
0308+  0762 07 1D 06    	call atoi				; convert to int in AL
0309+  0765 23          	mov ah, al				; move to AH
0310+  0766 33 02 00    	mov bl, [d + 2]
0311+  0769 37          	mov bh, bl
0312+  076A 33 03 00    	mov bl, [d + 3]
0313+  076D 07 1D 06    	call atoi				; convert to int in AL
0314+  0770 E5          	pop b
0315+  0771 09          	ret
0316+  0772             
0317+  0772             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0772             ; strtoint
0319+  0772             ; 5 digit base10 string number in d
0320+  0772             ; integer returned in A
0321+  0772             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0772             strtoint:
0323+  0772 E2          	push si
0324+  0773 D8          	push b
0325+  0774 D9          	push c
0326+  0775 DA          	push d
0327+  0776 07 9D 05    	call strlen			; get string length in C
0328+  0779 7E          	dec c
0329+  077A FD 4E       	mov si, d
0330+  077C 12          	mov a, c
0331+  077D FD 99       	shl a
0332+  077F 3B 05 06    	mov d, table_power
0333+  0782 59          	add d, a
0334+  0783 38 00 00    	mov c, 0
0335+  0786             strtoint_L0:
0336+  0786 F6          	lodsb			; load ASCII to al
0337+  0787 B9 00       	cmp al, 0
0338+  0789 C6 9C 07    	je strtoint_end
0339+  078C 6F 30       	sub al, $30		; make into integer
0340+  078E 22 00       	mov ah, 0
0341+  0790 2A          	mov b, [d]
0342+  0791 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0792 11          	mov a, b
0344+  0793 28          	mov b, c
0345+  0794 54          	add a, b
0346+  0795 39          	mov c, a
0347+  0796 63 02 00    	sub d, 2
0348+  0799 0A 86 07    	jmp strtoint_L0
0349+  079C             strtoint_end:
0350+  079C 12          	mov a, c
0351+  079D E7          	pop d
0352+  079E E6          	pop c
0353+  079F E5          	pop b
0354+  07A0 EF          	pop si
0355+  07A1 09          	ret
0356+  07A2             
0357+  07A2             
0358+  07A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  07A2             ; PRINT NULL TERMINATED STRING
0360+  07A2             ; pointer in D
0361+  07A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  07A2             puts:
0363+  07A2 D7          	push a
0364+  07A3 DA          	push d
0365+  07A4             puts_L1:
0366+  07A4 1E          	mov al, [d]
0367+  07A5 B9 00       	cmp al, 0
0368+  07A7 C6 B3 07    	jz puts_END
0369+  07AA 23          	mov ah, al
0370+  07AB 19 00       	mov al, 0
0371+  07AD 05 03       	syscall sys_io
0372+  07AF 79          	inc d
0373+  07B0 0A A4 07    	jmp puts_L1
0374+  07B3             puts_END:
0375+  07B3 E7          	pop d
0376+  07B4 E4          	pop a
0377+  07B5 09          	ret
0378+  07B6             
0379+  07B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  07B6             ; PRINT N SIZE STRING
0381+  07B6             ; pointer in D
0382+  07B6             ; size in C
0383+  07B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  07B6             putsn:
0385+  07B6 DB          	push al
0386+  07B7 DA          	push d
0387+  07B8 D9          	push c
0388+  07B9             putsn_L0:
0389+  07B9 1E          	mov al, [d]
0390+  07BA 23          	mov ah, al
0391+  07BB 19 00       	mov al, 0
0392+  07BD 05 03       	syscall sys_io
0393+  07BF 79          	inc d
0394+  07C0 7E          	dec c	
0395+  07C1 C2 00 00    	cmp c, 0
0396+  07C4 C7 B9 07    	jne putsn_L0
0397+  07C7             putsn_end:
0398+  07C7 E6          	pop c
0399+  07C8 E7          	pop d
0400+  07C9 E8          	pop al
0401+  07CA 09          	ret
0402+  07CB             
0403+  07CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  07CB             ; print 16bit decimal number
0405+  07CB             ; input number in A
0406+  07CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  07CB             print_u16d:
0408+  07CB D7          	push a
0409+  07CC D8          	push b
0410+  07CD 26 10 27    	mov b, 10000
0411+  07D0 AE          	div a, b			; get 10000 coeff.
0412+  07D1 07 F7 07    	call print_number
0413+  07D4 11          	mov a, b
0414+  07D5 26 E8 03    	mov b, 1000
0415+  07D8 AE          	div a, b			; get 10000 coeff.
0416+  07D9 07 F7 07    	call print_number
0417+  07DC 11          	mov a, b
0418+  07DD 26 64 00    	mov b, 100
0419+  07E0 AE          	div a, b
0420+  07E1 07 F7 07    	call print_number
0421+  07E4 11          	mov a, b
0422+  07E5 26 0A 00    	mov b, 10
0423+  07E8 AE          	div a, b
0424+  07E9 07 F7 07    	call print_number
0425+  07EC 11          	mov a, b
0426+  07ED 6A 30       	add al, $30
0427+  07EF 23          	mov ah, al
0428+  07F0 19 00       	mov al, 0
0429+  07F2 05 03       	syscall sys_io	; print coeff
0430+  07F4 E5          	pop b
0431+  07F5 E4          	pop a
0432+  07F6 09          	ret
0433+  07F7             
0434+  07F7             
0435+  07F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  07F7             ; if A == 0, print space
0437+  07F7             ; else print A
0438+  07F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  07F7             print_number:
0440+  07F7 6A 30       	add al, $30
0441+  07F9 23          	mov ah, al
0442+  07FA 07 68 06    	call putchar
0443+  07FD 09          	ret
0444+  07FE             
0445+  07FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  07FE             ; PRINT 16BIT HEX INTEGER
0447+  07FE             ; integer value in reg B
0448+  07FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  07FE             print_u16x:
0450+  07FE D7          	push a
0451+  07FF D8          	push b
0452+  0800 DD          	push bl
0453+  0801 30          	mov bl, bh
0454+  0802 07 2F 06    	call itoa				; convert bh to char in A
0455+  0805 2F          	mov bl, al				; save al
0456+  0806 19 00       	mov al, 0
0457+  0808 05 03       	syscall sys_io				; display AH
0458+  080A 24          	mov ah, bl				; retrieve al
0459+  080B 19 00       	mov al, 0
0460+  080D 05 03       	syscall sys_io				; display AL
0461+  080F             
0462+  080F EA          	pop bl
0463+  0810 07 2F 06    	call itoa				; convert bh to char in A
0464+  0813 2F          	mov bl, al				; save al
0465+  0814 19 00       	mov al, 0
0466+  0816 05 03       	syscall sys_io				; display AH
0467+  0818 24          	mov ah, bl				; retrieve al
0468+  0819 19 00       	mov al, 0
0469+  081B 05 03       	syscall sys_io				; display AL
0470+  081D             
0471+  081D E5          	pop b
0472+  081E E4          	pop a
0473+  081F 09          	ret
0474+  0820             
0475+  0820             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0820             ; INPUT 16BIT HEX INTEGER
0477+  0820             ; read 16bit integer into A
0478+  0820             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0820             scan_u16x:
0480+  0820 F8 10 00    	enter 16
0481+  0823 D8          	push b
0482+  0824 DA          	push d
0483+  0825             
0484+  0825 FA F1 FF    	lea d, [bp + -15]
0485+  0828 07 6F 06    	call gets				; get number
0486+  082B             
0487+  082B 32          	mov bl, [d]
0488+  082C 37          	mov bh, bl
0489+  082D 33 01 00    	mov bl, [d + 1]
0490+  0830 07 1D 06    	call atoi				; convert to int in AL
0491+  0833 23          	mov ah, al				; move to AH
0492+  0834             
0493+  0834 33 02 00    	mov bl, [d + 2]
0494+  0837 37          	mov bh, bl
0495+  0838 33 03 00    	mov bl, [d + 3]
0496+  083B 07 1D 06    	call atoi				; convert to int in AL
0497+  083E             
0498+  083E E7          	pop d
0499+  083F E5          	pop b
0500+  0840 F9          	leave
0501+  0841 09          	ret
0502+  0842             
0503+  0842             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0842             ; PRINT 8bit HEX INTEGER
0505+  0842             ; integer value in reg bl
0506+  0842             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0842             print_u8x:
0508+  0842 D7          	push a
0509+  0843 DD          	push bl
0510+  0844             
0511+  0844 07 2F 06    	call itoa				; convert bl to char in A
0512+  0847 2F          	mov bl, al				; save al
0513+  0848 19 00       	mov al, 0
0514+  084A 05 03       	syscall sys_io				; display AH
0515+  084C 24          	mov ah, bl				; retrieve al
0516+  084D 19 00       	mov al, 0
0517+  084F 05 03       	syscall sys_io				; display AL
0518+  0851             
0519+  0851 EA          	pop bl
0520+  0852 E4          	pop a
0521+  0853 09          	ret
0522+  0854             
0523+  0854             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0854             ; print 8bit decimal unsigned number
0525+  0854             ; input number in AL
0526+  0854             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0854             print_u8d:
0528+  0854 D7          	push a
0529+  0855 D8          	push b
0530+  0856             
0531+  0856 22 00       	mov ah, 0
0532+  0858 26 64 00    	mov b, 100
0533+  085B AE          	div a, b
0534+  085C D8          	push b			; save remainder
0535+  085D B9 00       	cmp al, 0
0536+  085F C6 69 08    	je skip100
0537+  0862 6A 30       	add al, $30
0538+  0864 23          	mov ah, al
0539+  0865 19 00       	mov al, 0
0540+  0867 05 03       	syscall sys_io	; print coeff
0541+  0869             skip100:
0542+  0869 E4          	pop a
0543+  086A 22 00       	mov ah, 0
0544+  086C 26 0A 00    	mov b, 10
0545+  086F AE          	div a, b
0546+  0870 D8          	push b			; save remainder
0547+  0871 B9 00       	cmp al, 0
0548+  0873 C6 7D 08    	je skip10
0549+  0876 6A 30       	add al, $30
0550+  0878 23          	mov ah, al
0551+  0879 19 00       	mov al, 0
0552+  087B 05 03       	syscall sys_io	; print coeff
0553+  087D             skip10:
0554+  087D E4          	pop a
0555+  087E 1B          	mov al, bl
0556+  087F 6A 30       	add al, $30
0557+  0881 23          	mov ah, al
0558+  0882 19 00       	mov al, 0
0559+  0884 05 03       	syscall sys_io	; print coeff
0560+  0886 E5          	pop b
0561+  0887 E4          	pop a
0562+  0888 09          	ret
0563+  0889             
0564+  0889             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0889             ; INPUT 8BIT HEX INTEGER
0566+  0889             ; read 8bit integer into AL
0567+  0889             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0889             scan_u8x:
0569+  0889 F8 04 00    	enter 4
0570+  088C D8          	push b
0571+  088D DA          	push d
0572+  088E             
0573+  088E FA FD FF    	lea d, [bp + -3]
0574+  0891 07 6F 06    	call gets				; get number
0575+  0894             
0576+  0894 32          	mov bl, [d]
0577+  0895 37          	mov bh, bl
0578+  0896 33 01 00    	mov bl, [d + 1]
0579+  0899 07 1D 06    	call atoi				; convert to int in AL
0580+  089C             
0581+  089C E7          	pop d
0582+  089D E5          	pop b
0583+  089E F9          	leave
0584+  089F 09          	ret
0585+  08A0             
0586+  08A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  08A0             ; input decimal number
0588+  08A0             ; result in A
0589+  08A0             ; 655'\0'
0590+  08A0             ; low--------high
0591+  08A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  08A0             scan_u16d:
0593+  08A0 F8 08 00    	enter 8
0594+  08A3 E2          	push si
0595+  08A4 D8          	push b
0596+  08A5 D9          	push c
0597+  08A6 DA          	push d
0598+  08A7 FA F9 FF    	lea d, [bp +- 7]
0599+  08AA 07 6F 06    	call gets
0600+  08AD 07 9D 05    	call strlen			; get string length in C
0601+  08B0 7E          	dec c
0602+  08B1 FD 4E       	mov si, d
0603+  08B3 12          	mov a, c
0604+  08B4 FD 99       	shl a
0605+  08B6 3B 05 06    	mov d, table_power
0606+  08B9 59          	add d, a
0607+  08BA 38 00 00    	mov c, 0
0608+  08BD             mul_loop:
0609+  08BD F6          	lodsb			; load ASCII to al
0610+  08BE B9 00       	cmp al, 0
0611+  08C0 C6 D3 08    	je mul_exit
0612+  08C3 6F 30       	sub al, $30		; make into integer
0613+  08C5 22 00       	mov ah, 0
0614+  08C7 2A          	mov b, [d]
0615+  08C8 AC          	mul a, b			; result in B since it fits in 16bits
0616+  08C9 11          	mov a, b
0617+  08CA 28          	mov b, c
0618+  08CB 54          	add a, b
0619+  08CC 39          	mov c, a
0620+  08CD 63 02 00    	sub d, 2
0621+  08D0 0A BD 08    	jmp mul_loop
0622+  08D3             mul_exit:
0623+  08D3 12          	mov a, c
0624+  08D4 E7          	pop d
0625+  08D5 E6          	pop c
0626+  08D6 E5          	pop b
0627+  08D7 EF          	pop si
0628+  08D8 F9          	leave
0629+  08D9 09          	ret
0235   08DA             ; --- END INCLUDE BLOCK
0236   08DA             
0237   08DA             
0238   08DA             .end
tasm: Number of errors = 0
