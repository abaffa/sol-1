0001   0000             ; --- Filename: test.c
0002   0000             
0003   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0004   0000             
0005   0400             .org PROC_TEXT_ORG
0006   0400             
0007   0400             ; --- begin text block
0008   0400             main:
0009   0400 D2          	push bp
0010   0401 9B          	mov bp, sp
0011   0402 FD D7 00 00   push word 0 ; b
0012   0406 FD D7 00 00   push word 0 ; c
0013   040A 26 01 00      mov b, 1
0014   040D 11            mov a, b
0015   040E FD AA         swp a
0016   0410 45 FF FF      mov [bp + -1], a ; b
0017   0413 F9            leave
0018   0414 05 0B         syscall sys_terminate_proc
0019   0416             test:
0020   0416 D2          	push bp
0021   0417 9B          	mov bp, sp
0022   0418 FD D7 05 00   push word 5 ; ii
0023   041C FD D7 43 00   push word 67 ; yy
0024   0420 2C 05 00      mov b, [bp + 5] ; a
0025   0423 FD AB         swp b
0026   0425 F9            leave
0027   0426 09            ret
0028   0427             ; --- end text block
0029   0427             
0030   0427             ; --- begin data block
0031   0427             ; --- end data block
0032   0427             ; --- begin include block
0033   0427             .include "lib/stdio.asm"
0001+  0427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0427             ; stdio.s
0003+  0427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0427             .include "lib/string.asm"
0001++ 0427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0427             ; string.s
0003++ 0427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0427             
0005++ 0427             
0006++ 0427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0427             ; strrev
0008++ 0427             ; reverse a string
0009++ 0427             ; D = string address
0010++ 0427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0427             ; 01234
0012++ 0427             strrev:
0013++ 0427 4B          	pusha
0014++ 0428 07 6E 04    	call strlen	; length in C
0015++ 042B 12          	mov a, c
0016++ 042C AF 01 00    	cmp a, 1
0017++ 042F D0 49 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0432 7D          	dec a
0019++ 0433 FD 4E       	mov si, d	; beginning of string
0020++ 0435 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0437 59          	add d, a	; end of string
0022++ 0438 12          	mov a, c
0023++ 0439 FD 9B       	shr a		; divide by 2
0024++ 043B 39          	mov c, a	; C now counts the steps
0025++ 043C             strrev_L0:
0026++ 043C 32          	mov bl, [d]	; save load right-side char into BL
0027++ 043D F6          	lodsb		; load left-side char into AL; increase SI
0028++ 043E 3E          	mov [d], al	; store left char into right side
0029++ 043F 1B          	mov al, bl
0030++ 0440 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0441 7E          	dec c
0032++ 0442 7F          	dec d
0033++ 0443 C2 00 00    	cmp c, 0
0034++ 0446 C7 3C 04    	jne strrev_L0
0035++ 0449             strrev_end:
0036++ 0449 4C          	popa
0037++ 044A 09          	ret
0038++ 044B             	
0039++ 044B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 044B             ; strchr
0041++ 044B             ; search string in D for char in AL
0042++ 044B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 044B             strchr:
0044++ 044B             strchr_L0:
0045++ 044B 32          	mov bl, [d]
0046++ 044C C1 00       	cmp bl, 0
0047++ 044E C6 59 04    	je strchr_end
0048++ 0451 BA          	cmp al, bl
0049++ 0452 C6 59 04    	je strchr_end
0050++ 0455 79          	inc d
0051++ 0456 0A 4B 04    	jmp strchr_L0
0052++ 0459             strchr_end:
0053++ 0459 1B          	mov al, bl
0054++ 045A 09          	ret
0055++ 045B             
0056++ 045B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 045B             ; strstr
0058++ 045B             ; find sub-string
0059++ 045B             ; str1 in SI
0060++ 045B             ; str2 in DI
0061++ 045B             ; SI points to end of source string
0062++ 045B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 045B             strstr:
0064++ 045B DB          	push al
0065++ 045C DA          	push d
0066++ 045D E3          	push di
0067++ 045E             strstr_loop:
0068++ 045E F3          	cmpsb					; compare a byte of the strings
0069++ 045F C7 6A 04    	jne strstr_ret
0070++ 0462 FC 00 00    	lea d, [di + 0]
0071++ 0465 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0467 C7 5E 04    	jne strstr_loop				; equal chars but not at end
0073++ 046A             strstr_ret:
0074++ 046A F0          	pop di
0075++ 046B E7          	pop d
0076++ 046C E8          	pop al
0077++ 046D 09          	ret
0078++ 046E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 046E             ; length of null terminated string
0080++ 046E             ; result in C
0081++ 046E             ; pointer in D
0082++ 046E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 046E             strlen:
0084++ 046E DA          	push d
0085++ 046F 38 00 00    	mov c, 0
0086++ 0472             strlen_L1:
0087++ 0472 BD 00       	cmp byte [d], 0
0088++ 0474 C6 7C 04    	je strlen_ret
0089++ 0477 79          	inc d
0090++ 0478 78          	inc c
0091++ 0479 0A 72 04    	jmp strlen_L1
0092++ 047C             strlen_ret:
0093++ 047C E7          	pop d
0094++ 047D 09          	ret
0095++ 047E             
0096++ 047E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 047E             ; STRCMP
0098++ 047E             ; compare two strings
0099++ 047E             ; str1 in SI
0100++ 047E             ; str2 in DI
0101++ 047E             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 047E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 047E             strcmp:
0104++ 047E DB          	push al
0105++ 047F DA          	push d
0106++ 0480 E3          	push di
0107++ 0481 E2          	push si
0108++ 0482             strcmp_loop:
0109++ 0482 F3          	cmpsb					; compare a byte of the strings
0110++ 0483 C7 8E 04    	jne strcmp_ret
0111++ 0486 FB FF FF    	lea d, [si +- 1]
0112++ 0489 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 048B C7 82 04    	jne strcmp_loop				; equal chars but not at end
0114++ 048E             strcmp_ret:
0115++ 048E EF          	pop si
0116++ 048F F0          	pop di
0117++ 0490 E7          	pop d
0118++ 0491 E8          	pop al
0119++ 0492 09          	ret
0120++ 0493             
0121++ 0493             
0122++ 0493             ; STRCPY
0123++ 0493             ; copy null terminated string from SI to DI
0124++ 0493             ; source in SI
0125++ 0493             ; destination in DI
0126++ 0493             strcpy:
0127++ 0493 E2          	push si
0128++ 0494 E3          	push di
0129++ 0495 DB          	push al
0130++ 0496             strcpy_L1:
0131++ 0496 F6          	lodsb
0132++ 0497 F7          	stosb
0133++ 0498 B9 00       	cmp al, 0
0134++ 049A C7 96 04    	jne strcpy_L1
0135++ 049D             strcpy_end:
0136++ 049D E8          	pop al
0137++ 049E F0          	pop di
0138++ 049F EF          	pop si
0139++ 04A0 09          	ret
0140++ 04A1             
0141++ 04A1             ; STRCAT
0142++ 04A1             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04A1             ; source in SI
0144++ 04A1             ; destination in DI
0145++ 04A1             strcat:
0146++ 04A1 E2          	push si
0147++ 04A2 E3          	push di
0148++ 04A3 D7          	push a
0149++ 04A4 DA          	push d
0150++ 04A5 50          	mov a, di
0151++ 04A6 3C          	mov d, a
0152++ 04A7             strcat_goto_end_L1:
0153++ 04A7 BD 00       	cmp byte[d], 0
0154++ 04A9 C6 B0 04    	je strcat_start
0155++ 04AC 79          	inc d
0156++ 04AD 0A A7 04    	jmp strcat_goto_end_L1
0157++ 04B0             strcat_start:
0158++ 04B0 FD 50       	mov di, d
0159++ 04B2             strcat_L1:
0160++ 04B2 F6          	lodsb
0161++ 04B3 F7          	stosb
0162++ 04B4 B9 00       	cmp al, 0
0163++ 04B6 C7 B2 04    	jne strcat_L1
0164++ 04B9             strcat_end:
0165++ 04B9 E7          	pop d
0166++ 04BA E4          	pop a
0167++ 04BB F0          	pop di
0168++ 04BC EF          	pop si
0169++ 04BD 09          	ret
0005+  04BE             
0006+  04BE 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  04C2 34 35 36 37 
0006+  04C6 38 39 41 42 
0006+  04CA 43 44 45 46 
0007+  04CE             
0008+  04CE 01 00       table_power:.dw 1
0009+  04D0 0A 00       			.dw 10
0010+  04D2 64 00       			.dw 100
0011+  04D4 E8 03       			.dw 1000
0012+  04D6 10 27       			.dw 10000
0013+  04D8             
0014+  04D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  04D8             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  04D8             ; ASCII in BL
0017+  04D8             ; result in AL
0018+  04D8             ; ascii for F = 0100 0110
0019+  04D8             ; ascii for 9 = 0011 1001
0020+  04D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  04D8             hex_ascii_encode:
0022+  04D8 1B          	mov al, bl
0023+  04D9 93 40       	test al, $40				; test if letter or number
0024+  04DB C7 E1 04    	jnz hex_letter
0025+  04DE 87 0F       	and al, $0F				; get number
0026+  04E0 09          	ret
0027+  04E1             hex_letter:
0028+  04E1 87 0F       	and al, $0F				; get letter
0029+  04E3 6A 09       	add al, 9
0030+  04E5 09          	ret
0031+  04E6             
0032+  04E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  04E6             ; ATOI
0034+  04E6             ; 2 letter hex string in B
0035+  04E6             ; 8bit integer returned in AL
0036+  04E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  04E6             atoi:
0038+  04E6 D8          	push b
0039+  04E7 07 D8 04    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  04EA 30          	mov bl, bh
0041+  04EB DB          	push al					; save a
0042+  04EC 07 D8 04    	call hex_ascii_encode
0043+  04EF EA          	pop bl	
0044+  04F0 FD 9E 04    	shl al, 4
0045+  04F3 8C          	or al, bl
0046+  04F4 E5          	pop b
0047+  04F5 09          	ret	
0048+  04F6             
0049+  04F6             
0050+  04F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04F6             ; printf
0052+  04F6             ; no need for explanations!
0053+  04F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  04F6             printf:
0055+  04F6 09          	ret
0056+  04F7             
0057+  04F7             
0058+  04F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  04F7             ; scanf
0060+  04F7             ; no need for explanations!
0061+  04F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  04F7             scanf:
0063+  04F7 09          	ret
0064+  04F8             
0065+  04F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  04F8             ; ITOA
0067+  04F8             ; 8bit value in BL
0068+  04F8             ; 2 byte ASCII result in A
0069+  04F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  04F8             itoa:
0071+  04F8 DA          	push d
0072+  04F9 D8          	push b
0073+  04FA A7 00       	mov bh, 0
0074+  04FC FD A4 04    	shr bl, 4	
0075+  04FF 74          	mov d, b
0076+  0500 1F BE 04    	mov al, [d + s_hex_digits]
0077+  0503 23          	mov ah, al
0078+  0504             	
0079+  0504 E5          	pop b
0080+  0505 D8          	push b
0081+  0506 A7 00       	mov bh, 0
0082+  0508 FD 87 0F    	and bl, $0F
0083+  050B 74          	mov d, b
0084+  050C 1F BE 04    	mov al, [d + s_hex_digits]
0085+  050F E5          	pop b
0086+  0510 E7          	pop d
0087+  0511 09          	ret
0088+  0512             
0089+  0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0512             ; HEX STRING TO BINARY
0091+  0512             ; di = destination address
0092+  0512             ; si = source
0093+  0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0512             hex_to_int:
0095+  0512             hex_to_int_L1:
0096+  0512 F6          	lodsb					; load from [SI] to AL
0097+  0513 B9 00       	cmp al, 0				; check if ASCII 0
0098+  0515 C6 22 05    	jz hex_to_int_ret
0099+  0518 36          	mov bh, al
0100+  0519 F6          	lodsb
0101+  051A 2F          	mov bl, al
0102+  051B 07 E6 04    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  051E F7          	stosb					; store AL to [DI]
0104+  051F 0A 12 05    	jmp hex_to_int_L1
0105+  0522             hex_to_int_ret:
0106+  0522 09          	ret		
0107+  0523             
0108+  0523             
0109+  0523             
0110+  0523             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0523             ; GETCHAR
0112+  0523             ; char in ah
0113+  0523             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0523             getchar:
0115+  0523 DB          	push al
0116+  0524             getchar_retry:
0117+  0524 FD 0C       	sti
0118+  0526 19 01       	mov al, 1
0119+  0528 05 03       	syscall sys_io			; receive in AH
0120+  052A B9 00       	cmp al, 0			; check if any char was receive
0121+  052C C6 24 05    	je getchar_retry
0122+  052F E8          	pop al
0123+  0530 09          	ret
0124+  0531             
0125+  0531             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0531             ; PUTCHAR
0127+  0531             ; char in ah
0128+  0531             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0531             putchar:
0130+  0531 D7          	push a
0131+  0532 19 00       	mov al, 0
0132+  0534 05 03       	syscall sys_io			; char in AH
0133+  0536 E4          	pop a
0134+  0537 09          	ret
0135+  0538             
0136+  0538             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  0538             ;; INPUT A STRING
0138+  0538             ;; terminates with null
0139+  0538             ;; pointer in D
0140+  0538             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0538             gets:
0142+  0538 D7          	push a
0143+  0539 DA          	push d
0144+  053A             gets_loop:
0145+  053A FD 0C       	sti
0146+  053C 19 01       	mov al, 1
0147+  053E 05 03       	syscall sys_io			; receive in AH
0148+  0540 B9 00       	cmp al, 0				; check error code (AL)
0149+  0542 C6 3A 05    	je gets_loop			; if no char received, retry
0150+  0545             
0151+  0545 76 1B       	cmp ah, 27
0152+  0547 C6 68 05    	je gets_telnet_escape
0153+  054A 76 0A       	cmp ah, $0A				; LF
0154+  054C C6 C1 05    	je gets_end
0155+  054F 76 0D       	cmp ah, $0D				; CR
0156+  0551 C6 C1 05    	je gets_end
0157+  0554 76 5C       	cmp ah, $5C				; '\\'
0158+  0556 C6 98 05    	je gets_escape
0159+  0559             	
0160+  0559 76 08       	cmp ah, $08			; check for backspace
0161+  055B C6 64 05    	je gets_backspace
0162+  055E             
0163+  055E 1A          	mov al, ah
0164+  055F 3E          	mov [d], al
0165+  0560 79          	inc d
0166+  0561 0A 3A 05    	jmp gets_loop
0167+  0564             gets_backspace:
0168+  0564 7F          	dec d
0169+  0565 0A 3A 05    	jmp gets_loop
0170+  0568             gets_telnet_escape:
0171+  0568 FD 0C       	sti
0172+  056A 19 01       	mov al, 1
0173+  056C 05 03       	syscall sys_io				; receive in AH without echo
0174+  056E B9 00       	cmp al, 0					; check error code (AL)
0175+  0570 C6 68 05    	je gets_telnet_escape		; if no char received, retry
0176+  0573 76 5B       	cmp ah, '['
0177+  0575 C7 3A 05    	jne gets_loop
0178+  0578             gets_telnet_escape_phase2:
0179+  0578 FD 0C       	sti
0180+  057A 19 01       	mov al, 1
0181+  057C 05 03       	syscall sys_io					; receive in AH without echo
0182+  057E B9 00       	cmp al, 0						; check error code (AL)
0183+  0580 C6 78 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  0583 76 44       	cmp ah, 'D'
0185+  0585 C6 90 05    	je gets_left_arrow
0186+  0588 76 43       	cmp ah, 'C'
0187+  058A C6 94 05    	je gets_right_arrow
0188+  058D 0A 3A 05    	jmp gets_loop
0189+  0590             gets_left_arrow:
0190+  0590 7F          	dec d
0191+  0591 0A 3A 05    	jmp gets_loop
0192+  0594             gets_right_arrow:
0193+  0594 79          	inc d
0194+  0595 0A 3A 05    	jmp gets_loop
0195+  0598             gets_escape:
0196+  0598 FD 0C       	sti
0197+  059A 19 01       	mov al, 1
0198+  059C 05 03       	syscall sys_io			; receive in AH
0199+  059E B9 00       	cmp al, 0				; check error code (AL)
0200+  05A0 C6 98 05    	je gets_escape			; if no char received, retry
0201+  05A3 76 6E       	cmp ah, 'n'
0202+  05A5 C6 B3 05    	je gets_LF
0203+  05A8 76 72       	cmp ah, 'r'
0204+  05AA C6 BA 05    	je gets_CR
0205+  05AD 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  05AE 3E          	mov [d], al
0207+  05AF 79          	inc d
0208+  05B0 0A 3A 05    	jmp gets_loop
0209+  05B3             gets_LF:
0210+  05B3 19 0A       	mov al, $0A
0211+  05B5 3E          	mov [d], al
0212+  05B6 79          	inc d
0213+  05B7 0A 3A 05    	jmp gets_loop
0214+  05BA             gets_CR:
0215+  05BA 19 0D       	mov al, $0D
0216+  05BC 3E          	mov [d], al
0217+  05BD 79          	inc d
0218+  05BE 0A 3A 05    	jmp gets_loop
0219+  05C1             gets_end:
0220+  05C1 19 00       	mov al, 0
0221+  05C3 3E          	mov [d], al				; terminate string
0222+  05C4 E7          	pop d
0223+  05C5 E4          	pop a
0224+  05C6 09          	ret
0225+  05C7             
0226+  05C7             
0227+  05C7             
0228+  05C7             
0229+  05C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  05C7             ;; INPUT TEXT
0231+  05C7             ;; terminated with CTRL+D
0232+  05C7             ;; pointer in D
0233+  05C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  05C7             gettxt:
0235+  05C7 D7          	push a
0236+  05C8 DA          	push d
0237+  05C9             gettxt_loop:
0238+  05C9 19 01       	mov al, 1
0239+  05CB 05 03       	syscall sys_io			; receive in AH
0240+  05CD B9 00       	cmp al, 0				; check error code (AL)
0241+  05CF C6 C9 05    	je gettxt_loop		; if no char received, retry
0242+  05D2 76 04       	cmp ah, 4			; EOT
0243+  05D4 C6 12 06    	je gettxt_end
0244+  05D7 76 08       	cmp ah, $08			; check for backspace
0245+  05D9 C6 0E 06    	je gettxt_backspace
0246+  05DC 76 5C       	cmp ah, $5C				; '\\'
0247+  05DE C6 E7 05    	je gettxt_escape
0248+  05E1 1A          	mov al, ah
0249+  05E2 3E          	mov [d], al
0250+  05E3 79          	inc d
0251+  05E4 0A C9 05    	jmp gettxt_loop
0252+  05E7             gettxt_escape:
0253+  05E7 19 01       	mov al, 1
0254+  05E9 05 03       	syscall sys_io			; receive in AH
0255+  05EB B9 00       	cmp al, 0				; check error code (AL)
0256+  05ED C6 E7 05    	je gettxt_escape		; if no char received, retry
0257+  05F0 76 6E       	cmp ah, 'n'
0258+  05F2 C6 00 06    	je gettxt_LF
0259+  05F5 76 72       	cmp ah, 'r'
0260+  05F7 C6 07 06    	je gettxt_CR
0261+  05FA 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  05FB 3E          	mov [d], al
0263+  05FC 79          	inc d
0264+  05FD 0A C9 05    	jmp gettxt_loop
0265+  0600             gettxt_LF:
0266+  0600 19 0A       	mov al, $0A
0267+  0602 3E          	mov [d], al
0268+  0603 79          	inc d
0269+  0604 0A C9 05    	jmp gettxt_loop
0270+  0607             gettxt_CR:
0271+  0607 19 0D       	mov al, $0D
0272+  0609 3E          	mov [d], al
0273+  060A 79          	inc d
0274+  060B 0A C9 05    	jmp gettxt_loop
0275+  060E             gettxt_backspace:
0276+  060E 7F          	dec d
0277+  060F 0A C9 05    	jmp gettxt_loop
0278+  0612             gettxt_end:
0279+  0612 19 00       	mov al, 0
0280+  0614 3E          	mov [d], al				; terminate string
0281+  0615 E7          	pop d
0282+  0616 E4          	pop a
0283+  0617 09          	ret
0284+  0618             
0285+  0618             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0618             ; PRINT NEW LINE
0287+  0618             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  0618             printnl:
0289+  0618 D7          	push a
0290+  0619 10 00 0A    	mov a, $0A00
0291+  061C 05 03       	syscall sys_io
0292+  061E 10 00 0D    	mov a, $0D00
0293+  0621 05 03       	syscall sys_io
0294+  0623 E4          	pop a
0295+  0624 09          	ret
0296+  0625             
0297+  0625             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  0625             ; strtoint
0299+  0625             ; 4 digit hex string number in d
0300+  0625             ; integer returned in A
0301+  0625             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  0625             strtointx:
0303+  0625 D8          	push b
0304+  0626 32          	mov bl, [d]
0305+  0627 37          	mov bh, bl
0306+  0628 33 01 00    	mov bl, [d + 1]
0307+  062B 07 E6 04    	call atoi				; convert to int in AL
0308+  062E 23          	mov ah, al				; move to AH
0309+  062F 33 02 00    	mov bl, [d + 2]
0310+  0632 37          	mov bh, bl
0311+  0633 33 03 00    	mov bl, [d + 3]
0312+  0636 07 E6 04    	call atoi				; convert to int in AL
0313+  0639 E5          	pop b
0314+  063A 09          	ret
0315+  063B             
0316+  063B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  063B             ; strtoint
0318+  063B             ; 5 digit base10 string number in d
0319+  063B             ; integer returned in A
0320+  063B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  063B             strtoint:
0322+  063B E2          	push si
0323+  063C D8          	push b
0324+  063D D9          	push c
0325+  063E DA          	push d
0326+  063F 07 6E 04    	call strlen			; get string length in C
0327+  0642 7E          	dec c
0328+  0643 FD 4E       	mov si, d
0329+  0645 12          	mov a, c
0330+  0646 FD 99       	shl a
0331+  0648 3B CE 04    	mov d, table_power
0332+  064B 59          	add d, a
0333+  064C 38 00 00    	mov c, 0
0334+  064F             strtoint_L0:
0335+  064F F6          	lodsb			; load ASCII to al
0336+  0650 B9 00       	cmp al, 0
0337+  0652 C6 65 06    	je strtoint_end
0338+  0655 6F 30       	sub al, $30		; make into integer
0339+  0657 22 00       	mov ah, 0
0340+  0659 2A          	mov b, [d]
0341+  065A AC          	mul a, b			; result in B since it fits in 16bits
0342+  065B 11          	mov a, b
0343+  065C 28          	mov b, c
0344+  065D 54          	add a, b
0345+  065E 39          	mov c, a
0346+  065F 63 02 00    	sub d, 2
0347+  0662 0A 4F 06    	jmp strtoint_L0
0348+  0665             strtoint_end:
0349+  0665 12          	mov a, c
0350+  0666 E7          	pop d
0351+  0667 E6          	pop c
0352+  0668 E5          	pop b
0353+  0669 EF          	pop si
0354+  066A 09          	ret
0355+  066B             
0356+  066B             
0357+  066B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  066B             ; PRINT NULL TERMINATED STRING
0359+  066B             ; pointer in D
0360+  066B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  066B             puts:
0362+  066B D7          	push a
0363+  066C DA          	push d
0364+  066D             puts_L1:
0365+  066D 1E          	mov al, [d]
0366+  066E B9 00       	cmp al, 0
0367+  0670 C6 7C 06    	jz puts_END
0368+  0673 23          	mov ah, al
0369+  0674 19 00       	mov al, 0
0370+  0676 05 03       	syscall sys_io
0371+  0678 79          	inc d
0372+  0679 0A 6D 06    	jmp puts_L1
0373+  067C             puts_END:
0374+  067C E7          	pop d
0375+  067D E4          	pop a
0376+  067E 09          	ret
0377+  067F             
0378+  067F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  067F             ; PRINT N SIZE STRING
0380+  067F             ; pointer in D
0381+  067F             ; size in C
0382+  067F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  067F             putsn:
0384+  067F DB          	push al
0385+  0680 DA          	push d
0386+  0681 D9          	push c
0387+  0682             putsn_L0:
0388+  0682 1E          	mov al, [d]
0389+  0683 23          	mov ah, al
0390+  0684 19 00       	mov al, 0
0391+  0686 05 03       	syscall sys_io
0392+  0688 79          	inc d
0393+  0689 7E          	dec c	
0394+  068A C2 00 00    	cmp c, 0
0395+  068D C7 82 06    	jne putsn_L0
0396+  0690             putsn_end:
0397+  0690 E6          	pop c
0398+  0691 E7          	pop d
0399+  0692 E8          	pop al
0400+  0693 09          	ret
0401+  0694             
0402+  0694             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  0694             ; print 16bit decimal number
0404+  0694             ; input number in A
0405+  0694             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  0694             print_u16d:
0407+  0694 D7          	push a
0408+  0695 D8          	push b
0409+  0696 26 10 27    	mov b, 10000
0410+  0699 AE          	div a, b			; get 10000 coeff.
0411+  069A 07 C0 06    	call print_number
0412+  069D 11          	mov a, b
0413+  069E 26 E8 03    	mov b, 1000
0414+  06A1 AE          	div a, b			; get 10000 coeff.
0415+  06A2 07 C0 06    	call print_number
0416+  06A5 11          	mov a, b
0417+  06A6 26 64 00    	mov b, 100
0418+  06A9 AE          	div a, b
0419+  06AA 07 C0 06    	call print_number
0420+  06AD 11          	mov a, b
0421+  06AE 26 0A 00    	mov b, 10
0422+  06B1 AE          	div a, b
0423+  06B2 07 C0 06    	call print_number
0424+  06B5 11          	mov a, b
0425+  06B6 6A 30       	add al, $30
0426+  06B8 23          	mov ah, al
0427+  06B9 19 00       	mov al, 0
0428+  06BB 05 03       	syscall sys_io	; print coeff
0429+  06BD E5          	pop b
0430+  06BE E4          	pop a
0431+  06BF 09          	ret
0432+  06C0             
0433+  06C0             
0434+  06C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  06C0             ; if A == 0, print space
0436+  06C0             ; else print A
0437+  06C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  06C0             print_number:
0439+  06C0 6A 30       	add al, $30
0440+  06C2 23          	mov ah, al
0441+  06C3 07 31 05    	call putchar
0442+  06C6 09          	ret
0443+  06C7             
0444+  06C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06C7             ; PRINT 16BIT HEX INTEGER
0446+  06C7             ; integer value in reg B
0447+  06C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06C7             print_u16x:
0449+  06C7 D7          	push a
0450+  06C8 D8          	push b
0451+  06C9 DD          	push bl
0452+  06CA 30          	mov bl, bh
0453+  06CB 07 F8 04    	call itoa				; convert bh to char in A
0454+  06CE 2F          	mov bl, al				; save al
0455+  06CF 19 00       	mov al, 0
0456+  06D1 05 03       	syscall sys_io				; display AH
0457+  06D3 24          	mov ah, bl				; retrieve al
0458+  06D4 19 00       	mov al, 0
0459+  06D6 05 03       	syscall sys_io				; display AL
0460+  06D8             
0461+  06D8 EA          	pop bl
0462+  06D9 07 F8 04    	call itoa				; convert bh to char in A
0463+  06DC 2F          	mov bl, al				; save al
0464+  06DD 19 00       	mov al, 0
0465+  06DF 05 03       	syscall sys_io				; display AH
0466+  06E1 24          	mov ah, bl				; retrieve al
0467+  06E2 19 00       	mov al, 0
0468+  06E4 05 03       	syscall sys_io				; display AL
0469+  06E6             
0470+  06E6 E5          	pop b
0471+  06E7 E4          	pop a
0472+  06E8 09          	ret
0473+  06E9             
0474+  06E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  06E9             ; INPUT 16BIT HEX INTEGER
0476+  06E9             ; read 16bit integer into A
0477+  06E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  06E9             scan_u16x:
0479+  06E9 F8 10 00    	enter 16
0480+  06EC D8          	push b
0481+  06ED DA          	push d
0482+  06EE             
0483+  06EE FA F1 FF    	lea d, [bp + -15]
0484+  06F1 07 38 05    	call gets				; get number
0485+  06F4             
0486+  06F4 32          	mov bl, [d]
0487+  06F5 37          	mov bh, bl
0488+  06F6 33 01 00    	mov bl, [d + 1]
0489+  06F9 07 E6 04    	call atoi				; convert to int in AL
0490+  06FC 23          	mov ah, al				; move to AH
0491+  06FD             
0492+  06FD 33 02 00    	mov bl, [d + 2]
0493+  0700 37          	mov bh, bl
0494+  0701 33 03 00    	mov bl, [d + 3]
0495+  0704 07 E6 04    	call atoi				; convert to int in AL
0496+  0707             
0497+  0707 E7          	pop d
0498+  0708 E5          	pop b
0499+  0709 F9          	leave
0500+  070A 09          	ret
0501+  070B             
0502+  070B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  070B             ; PRINT 8bit HEX INTEGER
0504+  070B             ; integer value in reg bl
0505+  070B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  070B             print_u8x:
0507+  070B D7          	push a
0508+  070C DD          	push bl
0509+  070D             
0510+  070D 07 F8 04    	call itoa				; convert bl to char in A
0511+  0710 2F          	mov bl, al				; save al
0512+  0711 19 00       	mov al, 0
0513+  0713 05 03       	syscall sys_io				; display AH
0514+  0715 24          	mov ah, bl				; retrieve al
0515+  0716 19 00       	mov al, 0
0516+  0718 05 03       	syscall sys_io				; display AL
0517+  071A             
0518+  071A EA          	pop bl
0519+  071B E4          	pop a
0520+  071C 09          	ret
0521+  071D             
0522+  071D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  071D             ; print 8bit decimal unsigned number
0524+  071D             ; input number in AL
0525+  071D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  071D             print_u8d:
0527+  071D D7          	push a
0528+  071E D8          	push b
0529+  071F             
0530+  071F 22 00       	mov ah, 0
0531+  0721 26 64 00    	mov b, 100
0532+  0724 AE          	div a, b
0533+  0725 D8          	push b			; save remainder
0534+  0726 B9 00       	cmp al, 0
0535+  0728 C6 32 07    	je skip100
0536+  072B 6A 30       	add al, $30
0537+  072D 23          	mov ah, al
0538+  072E 19 00       	mov al, 0
0539+  0730 05 03       	syscall sys_io	; print coeff
0540+  0732             skip100:
0541+  0732 E4          	pop a
0542+  0733 22 00       	mov ah, 0
0543+  0735 26 0A 00    	mov b, 10
0544+  0738 AE          	div a, b
0545+  0739 D8          	push b			; save remainder
0546+  073A B9 00       	cmp al, 0
0547+  073C C6 46 07    	je skip10
0548+  073F 6A 30       	add al, $30
0549+  0741 23          	mov ah, al
0550+  0742 19 00       	mov al, 0
0551+  0744 05 03       	syscall sys_io	; print coeff
0552+  0746             skip10:
0553+  0746 E4          	pop a
0554+  0747 1B          	mov al, bl
0555+  0748 6A 30       	add al, $30
0556+  074A 23          	mov ah, al
0557+  074B 19 00       	mov al, 0
0558+  074D 05 03       	syscall sys_io	; print coeff
0559+  074F E5          	pop b
0560+  0750 E4          	pop a
0561+  0751 09          	ret
0562+  0752             
0563+  0752             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  0752             ; INPUT 8BIT HEX INTEGER
0565+  0752             ; read 8bit integer into AL
0566+  0752             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  0752             scan_u8x:
0568+  0752 F8 04 00    	enter 4
0569+  0755 D8          	push b
0570+  0756 DA          	push d
0571+  0757             
0572+  0757 FA FD FF    	lea d, [bp + -3]
0573+  075A 07 38 05    	call gets				; get number
0574+  075D             
0575+  075D 32          	mov bl, [d]
0576+  075E 37          	mov bh, bl
0577+  075F 33 01 00    	mov bl, [d + 1]
0578+  0762 07 E6 04    	call atoi				; convert to int in AL
0579+  0765             
0580+  0765 E7          	pop d
0581+  0766 E5          	pop b
0582+  0767 F9          	leave
0583+  0768 09          	ret
0584+  0769             
0585+  0769             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  0769             ; input decimal number
0587+  0769             ; result in A
0588+  0769             ; 655'\0'
0589+  0769             ; low--------high
0590+  0769             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  0769             scan_u16d:
0592+  0769 F8 08 00    	enter 8
0593+  076C E2          	push si
0594+  076D D8          	push b
0595+  076E D9          	push c
0596+  076F DA          	push d
0597+  0770 FA F9 FF    	lea d, [bp +- 7]
0598+  0773 07 38 05    	call gets
0599+  0776 07 6E 04    	call strlen			; get string length in C
0600+  0779 7E          	dec c
0601+  077A FD 4E       	mov si, d
0602+  077C 12          	mov a, c
0603+  077D FD 99       	shl a
0604+  077F 3B CE 04    	mov d, table_power
0605+  0782 59          	add d, a
0606+  0783 38 00 00    	mov c, 0
0607+  0786             mul_loop:
0608+  0786 F6          	lodsb			; load ASCII to al
0609+  0787 B9 00       	cmp al, 0
0610+  0789 C6 9C 07    	je mul_exit
0611+  078C 6F 30       	sub al, $30		; make into integer
0612+  078E 22 00       	mov ah, 0
0613+  0790 2A          	mov b, [d]
0614+  0791 AC          	mul a, b			; result in B since it fits in 16bits
0615+  0792 11          	mov a, b
0616+  0793 28          	mov b, c
0617+  0794 54          	add a, b
0618+  0795 39          	mov c, a
0619+  0796 63 02 00    	sub d, 2
0620+  0799 0A 86 07    	jmp mul_loop
0621+  079C             mul_exit:
0622+  079C 12          	mov a, c
0623+  079D E7          	pop d
0624+  079E E6          	pop c
0625+  079F E5          	pop b
0626+  07A0 EF          	pop si
0627+  07A1 F9          	leave
0628+  07A2 09          	ret
0034   07A3             ; --- end include block
0035   07A3             
0036   07A3             .end
tasm: Number of errors = 0
