0001   0000             ; --- FILENAME: life2.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 52 02 00      sub sp, 2 ; j
0012   0408 52 02 00      sub sp, 2 ; n
0013   040B             _for1_init:
0014   040B             _for1_cond:
0015   040B             _for1_block:
0016   040B 07 2B 05      call show
0017   040E             _for2_init:
0018   040E 26 01 00      mov b, 1
0019   0411 D7            push a
0020   0412 11            mov a, b
0021   0413 45 FF FF      mov [bp + -1], a ; i
0022   0416 E4            pop a
0023   0417             _for2_cond:
0024   0417 2C FF FF      mov b, [bp + -1] ; i
0025   041A D7            push a
0026   041B 11            mov a, b
0027   041C 26 28 00      mov b, 40
0028   041F D7            push a
0029   0420 11            mov a, b
0030   0421 26 01 00      mov b, 1
0031   0424 60            sub a, b
0032   0425 27            mov b, a
0033   0426 E4            pop a
0034   0427 B0            cmp a, b
0035   0428 0E            lodflgs
0036   0429 87 02         and al, %00000010 ; <
0037   042B FD 9C         shr al
0038   042D 22 00         mov ah, 0
0039   042F 27            mov b, a
0040   0430 E4            pop a
0041   0431 C0 00 00      cmp b, 0
0042   0434 C6 22 05      je _for2_exit
0043   0437             _for2_block:
0044   0437             _for3_init:
0045   0437 26 01 00      mov b, 1
0046   043A D7            push a
0047   043B 11            mov a, b
0048   043C 45 FD FF      mov [bp + -3], a ; j
0049   043F E4            pop a
0050   0440             _for3_cond:
0051   0440 2C FD FF      mov b, [bp + -3] ; j
0052   0443 D7            push a
0053   0444 11            mov a, b
0054   0445 26 28 00      mov b, 40
0055   0448 D7            push a
0056   0449 11            mov a, b
0057   044A 26 01 00      mov b, 1
0058   044D 60            sub a, b
0059   044E 27            mov b, a
0060   044F E4            pop a
0061   0450 B0            cmp a, b
0062   0451 0E            lodflgs
0063   0452 87 02         and al, %00000010 ; <
0064   0454 FD 9C         shr al
0065   0456 22 00         mov ah, 0
0066   0458 27            mov b, a
0067   0459 E4            pop a
0068   045A C0 00 00      cmp b, 0
0069   045D C6 12 05      je _for3_exit
0070   0460             _for3_block:
0071   0460 2C FF FF      mov b, [bp + -1] ; i
0072   0463 FD AB         swp b
0073   0465 D8            push b
0074   0466 2C FD FF      mov b, [bp + -3] ; j
0075   0469 FD AB         swp b
0076   046B D8            push b
0077   046C 07 04 06      call neighbours
0078   046F 51 04 00      add sp, 4
0079   0472 D7            push a
0080   0473 11            mov a, b
0081   0474 45 FB FF      mov [bp + -5], a ; n
0082   0477 E4            pop a
0083   0478             _if4_cond:
0084   0478 2C FB FF      mov b, [bp + -5] ; n
0085   047B D7            push a
0086   047C 11            mov a, b
0087   047D 26 02 00      mov b, 2
0088   0480 B0            cmp a, b
0089   0481 0E            lodflgs
0090   0482 87 02         and al, %00000010 ; <
0091   0484 FD 9C         shr al
0092   0486 22 00         mov ah, 0
0093   0488 27            mov b, a
0094   0489 E4            pop a
0095   048A D7            push a
0096   048B 11            mov a, b
0097   048C 2C FB FF      mov b, [bp + -5] ; n
0098   048F D7            push a
0099   0490 11            mov a, b
0100   0491 26 04 00      mov b, 4
0101   0494 B0            cmp a, b
0102   0495 0E            lodflgs
0103   0496 87 03         and al, %00000011
0104   0498 B9 00         cmp al, %00000000
0105   049A 0E            lodflgs
0106   049B 22 00         mov ah, 0
0107   049D 27            mov b, a
0108   049E E4            pop a
0109   049F 8A            or a, b
0110   04A0 27            mov b, a
0111   04A1 E4            pop a
0112   04A2 C0 00 00      cmp b, 0
0113   04A5 C6 CA 04      je _if4_else
0114   04A8             _if4_true:
0115   04A8 29 0D 0E      mov b, [cells]
0116   04AB 74            mov d, b
0117   04AC DA            push d
0118   04AD 2C FF FF      mov b, [bp + -1] ; i
0119   04B0 E7            pop d
0120   04B1 10 28 00      mov a, 40
0121   04B4 AC            mul a, b
0122   04B5 5A            add d, b
0123   04B6 DA            push d
0124   04B7 2C FD FF      mov b, [bp + -3] ; j
0125   04BA E7            pop d
0126   04BB 10 01 00      mov a, 1
0127   04BE AC            mul a, b
0128   04BF 5A            add d, b
0129   04C0 DA            push d
0130   04C1 26 20 00      mov b, ' '
0131   04C4 E7            pop d
0132   04C5 1B            mov al, bl
0133   04C6 3E            mov [d], al
0134   04C7 0A 02 05      jmp _if4_exit
0135   04CA             _if4_else:
0136   04CA             _if5_cond:
0137   04CA 2C FB FF      mov b, [bp + -5] ; n
0138   04CD D7            push a
0139   04CE 11            mov a, b
0140   04CF 26 03 00      mov b, 3
0141   04D2 B0            cmp a, b
0142   04D3 0E            lodflgs
0143   04D4 87 01         and al, %00000001 ; ==
0144   04D6 22 00         mov ah, 0
0145   04D8 27            mov b, a
0146   04D9 E4            pop a
0147   04DA C0 00 00      cmp b, 0
0148   04DD C6 02 05      je _if5_exit
0149   04E0             _if5_true:
0150   04E0 29 0D 0E      mov b, [cells]
0151   04E3 74            mov d, b
0152   04E4 DA            push d
0153   04E5 2C FF FF      mov b, [bp + -1] ; i
0154   04E8 E7            pop d
0155   04E9 10 28 00      mov a, 40
0156   04EC AC            mul a, b
0157   04ED 5A            add d, b
0158   04EE DA            push d
0159   04EF 2C FD FF      mov b, [bp + -3] ; j
0160   04F2 E7            pop d
0161   04F3 10 01 00      mov a, 1
0162   04F6 AC            mul a, b
0163   04F7 5A            add d, b
0164   04F8 DA            push d
0165   04F9 26 40 00      mov b, '@'
0166   04FC E7            pop d
0167   04FD 1B            mov al, bl
0168   04FE 3E            mov [d], al
0169   04FF 0A 02 05      jmp _if5_exit
0170   0502             _if5_exit:
0171   0502             _if4_exit:
0172   0502             _for3_update:
0173   0502 2C FD FF      mov b, [bp + -3] ; j
0174   0505 11            mov a, b
0175   0506 FD 77         inc b
0176   0508 D7            push a
0177   0509 11            mov a, b
0178   050A 45 FD FF      mov [bp + -3], a ; j
0179   050D E4            pop a
0180   050E 27            mov b, a
0181   050F 0A 40 04      jmp _for3_cond
0182   0512             _for3_exit:
0183   0512             _for2_update:
0184   0512 2C FF FF      mov b, [bp + -1] ; i
0185   0515 11            mov a, b
0186   0516 FD 77         inc b
0187   0518 D7            push a
0188   0519 11            mov a, b
0189   051A 45 FF FF      mov [bp + -1], a ; i
0190   051D E4            pop a
0191   051E 27            mov b, a
0192   051F 0A 17 04      jmp _for2_cond
0193   0522             _for2_exit:
0194   0522             _for1_update:
0195   0522 0A 0B 04      jmp _for1_cond
0196   0525             _for1_exit:
0197   0525 26 00 00      mov b, 0
0198   0528 F9            leave
0199   0529 05 0B         syscall sys_terminate_proc
0200   052B             
0201   052B             show:
0202   052B D2            push bp
0203   052C 9B            mov bp, sp
0204   052D 52 02 00      sub sp, 2 ; i
0205   0530 52 02 00      sub sp, 2 ; j
0206   0533             _for6_init:
0207   0533 26 00 00      mov b, 0
0208   0536 D7            push a
0209   0537 11            mov a, b
0210   0538 45 FF FF      mov [bp + -1], a ; i
0211   053B E4            pop a
0212   053C             _for6_cond:
0213   053C 2C FF FF      mov b, [bp + -1] ; i
0214   053F D7            push a
0215   0540 11            mov a, b
0216   0541 26 28 00      mov b, 40
0217   0544 B0            cmp a, b
0218   0545 0E            lodflgs
0219   0546 87 02         and al, %00000010 ; <
0220   0548 FD 9C         shr al
0221   054A 22 00         mov ah, 0
0222   054C 27            mov b, a
0223   054D E4            pop a
0224   054E C0 00 00      cmp b, 0
0225   0551 C6 C3 05      je _for6_exit
0226   0554             _for6_block:
0227   0554             _for7_init:
0228   0554 26 00 00      mov b, 0
0229   0557 D7            push a
0230   0558 11            mov a, b
0231   0559 45 FD FF      mov [bp + -3], a ; j
0232   055C E4            pop a
0233   055D             _for7_cond:
0234   055D 2C FD FF      mov b, [bp + -3] ; j
0235   0560 D7            push a
0236   0561 11            mov a, b
0237   0562 26 28 00      mov b, 40
0238   0565 B0            cmp a, b
0239   0566 0E            lodflgs
0240   0567 87 02         and al, %00000010 ; <
0241   0569 FD 9C         shr al
0242   056B 22 00         mov ah, 0
0243   056D 27            mov b, a
0244   056E E4            pop a
0245   056F C0 00 00      cmp b, 0
0246   0572 C6 A9 05      je _for7_exit
0247   0575             _for7_block:
0248   0575 29 0D 0E      mov b, [cells]
0249   0578 D7            push a
0250   0579 74            mov d, b
0251   057A DA            push d
0252   057B 2C FF FF      mov b, [bp + -1] ; i
0253   057E E7            pop d
0254   057F 10 28 00      mov a, 40
0255   0582 AC            mul a, b
0256   0583 5A            add d, b
0257   0584 DA            push d
0258   0585 2C FD FF      mov b, [bp + -3] ; j
0259   0588 E7            pop d
0260   0589 10 01 00      mov a, 1
0261   058C AC            mul a, b
0262   058D 5A            add d, b
0263   058E 32            mov bl, [d]
0264   058F A7 00         mov bh, 0
0265   0591 E4            pop a
0266   0592 DD            push bl
0267   0593 07 C2 07      call _putchar
0268   0596 51 01 00      add sp, 1
0269   0599             _for7_update:
0270   0599 2C FD FF      mov b, [bp + -3] ; j
0271   059C 11            mov a, b
0272   059D FD 77         inc b
0273   059F D7            push a
0274   05A0 11            mov a, b
0275   05A1 45 FD FF      mov [bp + -3], a ; j
0276   05A4 E4            pop a
0277   05A5 27            mov b, a
0278   05A6 0A 5D 05      jmp _for7_cond
0279   05A9             _for7_exit:
0280   05A9 26 0A 00      mov b, 10
0281   05AC DD            push bl
0282   05AD 07 C2 07      call _putchar
0283   05B0 51 01 00      add sp, 1
0284   05B3             _for6_update:
0285   05B3 2C FF FF      mov b, [bp + -1] ; i
0286   05B6 11            mov a, b
0287   05B7 FD 77         inc b
0288   05B9 D7            push a
0289   05BA 11            mov a, b
0290   05BB 45 FF FF      mov [bp + -1], a ; i
0291   05BE E4            pop a
0292   05BF 27            mov b, a
0293   05C0 0A 3C 05      jmp _for6_cond
0294   05C3             _for6_exit:
0295   05C3 F9            leave
0296   05C4 09            ret
0297   05C5             
0298   05C5             alive:
0299   05C5 D2            push bp
0300   05C6 9B            mov bp, sp
0301   05C7             _if8_cond:
0302   05C7 29 0D 0E      mov b, [cells]
0303   05CA D7            push a
0304   05CB 74            mov d, b
0305   05CC DA            push d
0306   05CD 2C 07 00      mov b, [bp + 7] ; i
0307   05D0 E7            pop d
0308   05D1 10 28 00      mov a, 40
0309   05D4 AC            mul a, b
0310   05D5 5A            add d, b
0311   05D6 DA            push d
0312   05D7 2C 05 00      mov b, [bp + 5] ; j
0313   05DA E7            pop d
0314   05DB 10 01 00      mov a, 1
0315   05DE AC            mul a, b
0316   05DF 5A            add d, b
0317   05E0 32            mov bl, [d]
0318   05E1 A7 00         mov bh, 0
0319   05E3 E4            pop a
0320   05E4 D7            push a
0321   05E5 11            mov a, b
0322   05E6 26 40 00      mov b, '@'
0323   05E9 B0            cmp a, b
0324   05EA 0E            lodflgs
0325   05EB 87 01         and al, %00000001 ; ==
0326   05ED 22 00         mov ah, 0
0327   05EF 27            mov b, a
0328   05F0 E4            pop a
0329   05F1 C0 00 00      cmp b, 0
0330   05F4 C6 FF 05      je _if8_else
0331   05F7             _if8_true:
0332   05F7 26 01 00      mov b, 1
0333   05FA F9            leave
0334   05FB 09            ret
0335   05FC 0A 04 06      jmp _if8_exit
0336   05FF             _if8_else:
0337   05FF 26 00 00      mov b, 0
0338   0602 F9            leave
0339   0603 09            ret
0340   0604             _if8_exit:
0341   0604             
0342   0604             neighbours:
0343   0604 D2            push bp
0344   0605 9B            mov bp, sp
0345   0606 52 02 00      sub sp, 2 ; count
0346   0609 26 00 00      mov b, 0
0347   060C D7            push a
0348   060D 11            mov a, b
0349   060E 45 FF FF      mov [bp + -1], a ; count
0350   0611 E4            pop a
0351   0612             _if9_cond:
0352   0612 2C 07 00      mov b, [bp + 7] ; i
0353   0615 D7            push a
0354   0616 11            mov a, b
0355   0617 26 01 00      mov b, 1
0356   061A 60            sub a, b
0357   061B 27            mov b, a
0358   061C E4            pop a
0359   061D FD AB         swp b
0360   061F D8            push b
0361   0620 2C 05 00      mov b, [bp + 5] ; j
0362   0623 FD AB         swp b
0363   0625 D8            push b
0364   0626 07 C5 05      call alive
0365   0629 51 04 00      add sp, 4
0366   062C C0 00 00      cmp b, 0
0367   062F C6 42 06      je _if9_exit
0368   0632             _if9_true:
0369   0632 2C FF FF      mov b, [bp + -1] ; count
0370   0635 11            mov a, b
0371   0636 FD 77         inc b
0372   0638 D7            push a
0373   0639 11            mov a, b
0374   063A 45 FF FF      mov [bp + -1], a ; count
0375   063D E4            pop a
0376   063E 27            mov b, a
0377   063F 0A 42 06      jmp _if9_exit
0378   0642             _if9_exit:
0379   0642             _if10_cond:
0380   0642 2C 07 00      mov b, [bp + 7] ; i
0381   0645 D7            push a
0382   0646 11            mov a, b
0383   0647 26 01 00      mov b, 1
0384   064A 60            sub a, b
0385   064B 27            mov b, a
0386   064C E4            pop a
0387   064D FD AB         swp b
0388   064F D8            push b
0389   0650 2C 05 00      mov b, [bp + 5] ; j
0390   0653 D7            push a
0391   0654 11            mov a, b
0392   0655 26 01 00      mov b, 1
0393   0658 60            sub a, b
0394   0659 27            mov b, a
0395   065A E4            pop a
0396   065B FD AB         swp b
0397   065D D8            push b
0398   065E 07 C5 05      call alive
0399   0661 51 04 00      add sp, 4
0400   0664 C0 00 00      cmp b, 0
0401   0667 C6 7A 06      je _if10_exit
0402   066A             _if10_true:
0403   066A 2C FF FF      mov b, [bp + -1] ; count
0404   066D 11            mov a, b
0405   066E FD 77         inc b
0406   0670 D7            push a
0407   0671 11            mov a, b
0408   0672 45 FF FF      mov [bp + -1], a ; count
0409   0675 E4            pop a
0410   0676 27            mov b, a
0411   0677 0A 7A 06      jmp _if10_exit
0412   067A             _if10_exit:
0413   067A             _if11_cond:
0414   067A 2C 07 00      mov b, [bp + 7] ; i
0415   067D D7            push a
0416   067E 11            mov a, b
0417   067F 26 01 00      mov b, 1
0418   0682 60            sub a, b
0419   0683 27            mov b, a
0420   0684 E4            pop a
0421   0685 FD AB         swp b
0422   0687 D8            push b
0423   0688 2C 05 00      mov b, [bp + 5] ; j
0424   068B D7            push a
0425   068C 11            mov a, b
0426   068D 26 01 00      mov b, 1
0427   0690 54            add a, b
0428   0691 27            mov b, a
0429   0692 E4            pop a
0430   0693 FD AB         swp b
0431   0695 D8            push b
0432   0696 07 C5 05      call alive
0433   0699 51 04 00      add sp, 4
0434   069C C0 00 00      cmp b, 0
0435   069F C6 B2 06      je _if11_exit
0436   06A2             _if11_true:
0437   06A2 2C FF FF      mov b, [bp + -1] ; count
0438   06A5 11            mov a, b
0439   06A6 FD 77         inc b
0440   06A8 D7            push a
0441   06A9 11            mov a, b
0442   06AA 45 FF FF      mov [bp + -1], a ; count
0443   06AD E4            pop a
0444   06AE 27            mov b, a
0445   06AF 0A B2 06      jmp _if11_exit
0446   06B2             _if11_exit:
0447   06B2             _if12_cond:
0448   06B2 2C 07 00      mov b, [bp + 7] ; i
0449   06B5 FD AB         swp b
0450   06B7 D8            push b
0451   06B8 2C 05 00      mov b, [bp + 5] ; j
0452   06BB D7            push a
0453   06BC 11            mov a, b
0454   06BD 26 01 00      mov b, 1
0455   06C0 60            sub a, b
0456   06C1 27            mov b, a
0457   06C2 E4            pop a
0458   06C3 FD AB         swp b
0459   06C5 D8            push b
0460   06C6 07 C5 05      call alive
0461   06C9 51 04 00      add sp, 4
0462   06CC C0 00 00      cmp b, 0
0463   06CF C6 E2 06      je _if12_exit
0464   06D2             _if12_true:
0465   06D2 2C FF FF      mov b, [bp + -1] ; count
0466   06D5 11            mov a, b
0467   06D6 FD 77         inc b
0468   06D8 D7            push a
0469   06D9 11            mov a, b
0470   06DA 45 FF FF      mov [bp + -1], a ; count
0471   06DD E4            pop a
0472   06DE 27            mov b, a
0473   06DF 0A E2 06      jmp _if12_exit
0474   06E2             _if12_exit:
0475   06E2             _if13_cond:
0476   06E2 2C 07 00      mov b, [bp + 7] ; i
0477   06E5 FD AB         swp b
0478   06E7 D8            push b
0479   06E8 2C 05 00      mov b, [bp + 5] ; j
0480   06EB D7            push a
0481   06EC 11            mov a, b
0482   06ED 26 01 00      mov b, 1
0483   06F0 54            add a, b
0484   06F1 27            mov b, a
0485   06F2 E4            pop a
0486   06F3 FD AB         swp b
0487   06F5 D8            push b
0488   06F6 07 C5 05      call alive
0489   06F9 51 04 00      add sp, 4
0490   06FC C0 00 00      cmp b, 0
0491   06FF C6 12 07      je _if13_exit
0492   0702             _if13_true:
0493   0702 2C FF FF      mov b, [bp + -1] ; count
0494   0705 11            mov a, b
0495   0706 FD 77         inc b
0496   0708 D7            push a
0497   0709 11            mov a, b
0498   070A 45 FF FF      mov [bp + -1], a ; count
0499   070D E4            pop a
0500   070E 27            mov b, a
0501   070F 0A 12 07      jmp _if13_exit
0502   0712             _if13_exit:
0503   0712             _if14_cond:
0504   0712 2C 07 00      mov b, [bp + 7] ; i
0505   0715 D7            push a
0506   0716 11            mov a, b
0507   0717 26 01 00      mov b, 1
0508   071A 54            add a, b
0509   071B 27            mov b, a
0510   071C E4            pop a
0511   071D FD AB         swp b
0512   071F D8            push b
0513   0720 2C 05 00      mov b, [bp + 5] ; j
0514   0723 D7            push a
0515   0724 11            mov a, b
0516   0725 26 01 00      mov b, 1
0517   0728 60            sub a, b
0518   0729 27            mov b, a
0519   072A E4            pop a
0520   072B FD AB         swp b
0521   072D D8            push b
0522   072E 07 C5 05      call alive
0523   0731 51 04 00      add sp, 4
0524   0734 C0 00 00      cmp b, 0
0525   0737 C6 4A 07      je _if14_exit
0526   073A             _if14_true:
0527   073A 2C FF FF      mov b, [bp + -1] ; count
0528   073D 11            mov a, b
0529   073E FD 77         inc b
0530   0740 D7            push a
0531   0741 11            mov a, b
0532   0742 45 FF FF      mov [bp + -1], a ; count
0533   0745 E4            pop a
0534   0746 27            mov b, a
0535   0747 0A 4A 07      jmp _if14_exit
0536   074A             _if14_exit:
0537   074A             _if15_cond:
0538   074A 2C 07 00      mov b, [bp + 7] ; i
0539   074D D7            push a
0540   074E 11            mov a, b
0541   074F 26 01 00      mov b, 1
0542   0752 54            add a, b
0543   0753 27            mov b, a
0544   0754 E4            pop a
0545   0755 FD AB         swp b
0546   0757 D8            push b
0547   0758 2C 05 00      mov b, [bp + 5] ; j
0548   075B FD AB         swp b
0549   075D D8            push b
0550   075E 07 C5 05      call alive
0551   0761 51 04 00      add sp, 4
0552   0764 C0 00 00      cmp b, 0
0553   0767 C6 7A 07      je _if15_exit
0554   076A             _if15_true:
0555   076A 2C FF FF      mov b, [bp + -1] ; count
0556   076D 11            mov a, b
0557   076E FD 77         inc b
0558   0770 D7            push a
0559   0771 11            mov a, b
0560   0772 45 FF FF      mov [bp + -1], a ; count
0561   0775 E4            pop a
0562   0776 27            mov b, a
0563   0777 0A 7A 07      jmp _if15_exit
0564   077A             _if15_exit:
0565   077A             _if16_cond:
0566   077A 2C 07 00      mov b, [bp + 7] ; i
0567   077D D7            push a
0568   077E 11            mov a, b
0569   077F 26 01 00      mov b, 1
0570   0782 54            add a, b
0571   0783 27            mov b, a
0572   0784 E4            pop a
0573   0785 FD AB         swp b
0574   0787 D8            push b
0575   0788 2C 05 00      mov b, [bp + 5] ; j
0576   078B D7            push a
0577   078C 11            mov a, b
0578   078D 26 01 00      mov b, 1
0579   0790 54            add a, b
0580   0791 27            mov b, a
0581   0792 E4            pop a
0582   0793 FD AB         swp b
0583   0795 D8            push b
0584   0796 07 C5 05      call alive
0585   0799 51 04 00      add sp, 4
0586   079C C0 00 00      cmp b, 0
0587   079F C6 B2 07      je _if16_exit
0588   07A2             _if16_true:
0589   07A2 2C FF FF      mov b, [bp + -1] ; count
0590   07A5 11            mov a, b
0591   07A6 FD 77         inc b
0592   07A8 D7            push a
0593   07A9 11            mov a, b
0594   07AA 45 FF FF      mov [bp + -1], a ; count
0595   07AD E4            pop a
0596   07AE 27            mov b, a
0597   07AF 0A B2 07      jmp _if16_exit
0598   07B2             _if16_exit:
0599   07B2 2C FF FF      mov b, [bp + -1] ; count
0600   07B5 F9            leave
0601   07B6 09            ret
0602   07B7             
0603   07B7             print:
0604   07B7 D2            push bp
0605   07B8 9B            mov bp, sp
0606   07B9             
0607   07B9             ; --- BEGIN INLINE ASM BLOCK
0608   07B9 17 05 00      mov a, [bp + 5]
0609   07BC 3C            mov d, a
0610   07BD 07 5B 10      call puts
0611   07C0             ; --- END INLINE ASM BLOCK
0612   07C0             
0613   07C0 F9            leave
0614   07C1 09            ret
0615   07C2             
0616   07C2             _putchar:
0617   07C2 D2            push bp
0618   07C3 9B            mov bp, sp
0619   07C4             
0620   07C4             ; --- BEGIN INLINE ASM BLOCK
0621   07C4 20 05 00      mov al, [bp + 5]
0622   07C7 23            mov ah, al
0623   07C8 07 21 0F      call putchar
0624   07CB             ; --- END INLINE ASM BLOCK
0625   07CB             
0626   07CB F9            leave
0627   07CC 09            ret
0628   07CD             ; --- END TEXT BLOCK
0629   07CD             
0630   07CD             ; --- BEGIN DATA BLOCK
0631   07CD             cells_data: 
0632   07CD 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0632   07D1 20 20 20 20 
0632   07D5 20 20 20 20 
0632   07D9 20 20 20 20 
0632   07DD 20 20 20 20 
0632   07E1 20 20 20 20 
0632   07E5 20 20 20 20 
0632   07E9 20 20 
0633   07EB 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0633   07EF 20 20 20 20 
0633   07F3 20 20 20 20 
0633   07F7 20 20 20 20 
0633   07FB 20 20 20 20 
0633   07FF 20 20 20 20 
0633   0803 20 20 20 20 
0633   0807 20 20 
0634   0809 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0634   080D 20 20 20 20 
0634   0811 20 20 20 20 
0634   0815 20 20 20 20 
0634   0819 20 20 20 20 
0634   081D 20 20 20 20 
0634   0821 20 20 20 20 
0634   0825 20 20 
0635   0827 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0635   082B 20 20 20 20 
0635   082F 20 20 20 20 
0635   0833 20 20 20 20 
0635   0837 20 20 20 20 
0635   083B 20 20 20 20 
0635   083F 20 20 20 20 
0635   0843 20 20 
0636   0845 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', 
0636   0849 20 20 20 20 
0636   084D 20 20 20 20 
0636   0851 20 20 20 20 
0636   0855 20 20 20 20 
0636   0859 20 20 20 20 
0636   085D 20 20 20 40 
0636   0861 20 20 
0637   0863 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0637   0867 20 20 20 20 
0637   086B 20 20 20 20 
0637   086F 20 20 20 20 
0637   0873 20 20 20 20 
0637   0877 20 20 20 20 
0637   087B 20 20 20 20 
0637   087F 20 20 
0638   0881 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', '@', ' ', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0638   0885 20 40 20 40 
0638   0889 20 20 20 20 
0638   088D 20 20 20 20 
0638   0891 20 20 20 20 
0638   0895 20 20 20 20 
0638   0899 20 20 20 20 
0638   089D 20 20 
0639   089F 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', 
0639   08A3 20 40 40 20 
0639   08A7 20 20 20 20 
0639   08AB 20 40 40 20 
0639   08AF 20 20 20 20 
0639   08B3 20 20 20 20 
0639   08B7 20 20 20 40 
0639   08BB 40 20 
0640   08BD 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', '@', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', 
0640   08C1 20 20 20 20 
0640   08C5 20 20 20 20 
0640   08C9 20 20 40 20 
0640   08CD 20 20 40 20 
0640   08D1 20 20 20 40 
0640   08D5 40 20 20 20 
0640   08D9 20 20 
0641   08DB 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', ' ', ' ', '@', 
0641   08DF 20 20 20 40 
0641   08E3 40 20 20 20 
0641   08E7 20 40 40 20 
0641   08EB 20 20 20 20 
0641   08EF 20 20 20 40 
0641   08F3 20 20 20 20 
0641   08F7 20 40 
0642   08F9 20 20 20 40 .db ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', 
0642   08FD 40 20 20 20 
0642   0901 20 20 20 20 
0642   0905 20 20 20 20 
0642   0909 20 20 20 20 
0642   090D 20 20 20 40 
0642   0911 40 20 20 20 
0642   0915 20 20 
0643   0917 20 20 20 40 .db ' ', ' ', ' ', '@', ' ', ' ', ' ', '@', ' ', '@', '@', ' ', ' ', ' ', ' ', '@', ' ', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0643   091B 20 20 20 40 
0643   091F 20 40 40 20 
0643   0923 20 20 20 40 
0643   0927 20 40 20 20 
0643   092B 20 20 20 20 
0643   092F 20 20 20 20 
0643   0933 20 20 
0644   0935 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', 
0644   0939 20 20 20 20 
0644   093D 20 20 20 20 
0644   0941 20 40 20 20 
0644   0945 20 20 20 40 
0644   0949 20 20 20 20 
0644   094D 20 20 20 40 
0644   0951 20 20 
0645   0953 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', '@', ' ', 
0645   0957 20 20 20 20 
0645   095B 20 20 20 20 
0645   095F 20 20 20 20 
0645   0963 20 20 20 20 
0645   0967 20 20 20 20 
0645   096B 40 20 20 20 
0645   096F 40 20 
0646   0971 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0646   0975 20 20 20 20 
0646   0979 20 20 20 20 
0646   097D 20 20 20 20 
0646   0981 20 20 20 20 
0646   0985 20 20 20 20 
0646   0989 20 20 20 20 
0646   098D 20 20 
0647   098F 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0647   0993 20 40 40 20 
0647   0997 20 20 20 20 
0647   099B 20 20 20 20 
0647   099F 20 20 20 20 
0647   09A3 20 20 20 20 
0647   09A7 20 20 20 20 
0647   09AB 20 20 
0648   09AD 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0648   09B1 20 20 20 20 
0648   09B5 20 20 20 20 
0648   09B9 20 20 20 20 
0648   09BD 20 20 20 20 
0648   09C1 20 20 20 20 
0648   09C5 20 20 20 20 
0648   09C9 20 20 
0649   09CB 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0649   09CF 20 20 20 20 
0649   09D3 20 20 20 20 
0649   09D7 20 20 20 20 
0649   09DB 20 20 20 20 
0649   09DF 20 20 20 20 
0649   09E3 20 20 20 20 
0649   09E7 20 20 
0650   09E9 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0650   09ED 20 20 20 20 
0650   09F1 20 20 20 20 
0650   09F5 20 20 20 20 
0650   09F9 20 20 20 20 
0650   09FD 20 20 20 20 
0650   0A01 20 20 20 20 
0650   0A05 20 20 
0651   0A07 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0651   0A0B 20 20 20 20 
0651   0A0F 20 20 20 20 
0651   0A13 20 20 20 20 
0651   0A17 20 20 20 20 
0651   0A1B 20 20 20 20 
0651   0A1F 20 20 20 20 
0651   0A23 20 20 
0652   0A25 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0652   0A29 20 20 20 20 
0652   0A2D 20 20 20 20 
0652   0A31 20 20 20 20 
0652   0A35 20 20 20 20 
0652   0A39 20 20 20 20 
0652   0A3D 20 20 20 20 
0652   0A41 20 20 
0653   0A43 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0653   0A47 20 20 20 20 
0653   0A4B 20 20 20 20 
0653   0A4F 20 20 20 20 
0653   0A53 20 20 20 20 
0653   0A57 20 20 20 20 
0653   0A5B 20 20 20 20 
0653   0A5F 20 20 
0654   0A61 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0654   0A65 20 20 20 20 
0654   0A69 20 20 20 20 
0654   0A6D 20 20 20 20 
0654   0A71 20 20 20 20 
0654   0A75 20 20 20 20 
0654   0A79 20 20 20 20 
0654   0A7D 20 20 
0655   0A7F 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0655   0A83 20 20 20 20 
0655   0A87 20 20 20 20 
0655   0A8B 20 20 20 20 
0655   0A8F 20 20 20 20 
0655   0A93 20 20 20 20 
0655   0A97 20 20 20 20 
0655   0A9B 20 20 
0656   0A9D 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0656   0AA1 20 20 20 20 
0656   0AA5 20 20 20 20 
0656   0AA9 20 20 20 20 
0656   0AAD 20 20 20 20 
0656   0AB1 20 20 20 20 
0656   0AB5 20 20 20 20 
0656   0AB9 20 20 
0657   0ABB 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0657   0ABF 20 20 20 20 
0657   0AC3 20 20 20 20 
0657   0AC7 20 20 20 20 
0657   0ACB 20 20 20 20 
0657   0ACF 20 20 20 20 
0657   0AD3 20 20 20 20 
0657   0AD7 20 20 
0658   0AD9 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
0658   0ADD 20 20 20 20 
0658   0AE1 20 20 20 20 
0658   0AE5 20 20 20 20 
0658   0AE9 20 20 20 20 
0659   0AED 00 00 00 00 .fill 800, 0
0659   0AF1 00 00 00 00 
0659   0AF5 00 00 00 00 
0659   0AF9 00 00 00 00 
0659   0AFD 00 00 00 00 
0659   0B01 00 00 00 00 
0659   0B05 00 00 00 00 
0659   0B09 00 00 00 00 
0659   0B0D 00 00 00 00 
0659   0B11 00 00 00 00 
0659   0B15 00 00 00 00 
0659   0B19 00 00 00 00 
0659   0B1D 00 00 00 00 
0659   0B21 00 00 00 00 
0659   0B25 00 00 00 00 
0659   0B29 00 00 00 00 
0659   0B2D 00 00 00 00 
0659   0B31 00 00 00 00 
0659   0B35 00 00 00 00 
0659   0B39 00 00 00 00 
0659   0B3D 00 00 00 00 
0659   0B41 00 00 00 00 
0659   0B45 00 00 00 00 
0659   0B49 00 00 00 00 
0659   0B4D 00 00 00 00 
0659   0B51 00 00 00 00 
0659   0B55 00 00 00 00 
0659   0B59 00 00 00 00 
0659   0B5D 00 00 00 00 
0659   0B61 00 00 00 00 
0659   0B65 00 00 00 00 
0659   0B69 00 00 00 00 
0659   0B6D 00 00 00 00 
0659   0B71 00 00 00 00 
0659   0B75 00 00 00 00 
0659   0B79 00 00 00 00 
0659   0B7D 00 00 00 00 
0659   0B81 00 00 00 00 
0659   0B85 00 00 00 00 
0659   0B89 00 00 00 00 
0659   0B8D 00 00 00 00 
0659   0B91 00 00 00 00 
0659   0B95 00 00 00 00 
0659   0B99 00 00 00 00 
0659   0B9D 00 00 00 00 
0659   0BA1 00 00 00 00 
0659   0BA5 00 00 00 00 
0659   0BA9 00 00 00 00 
0659   0BAD 00 00 00 00 
0659   0BB1 00 00 00 00 
0659   0BB5 00 00 00 00 
0659   0BB9 00 00 00 00 
0659   0BBD 00 00 00 00 
0659   0BC1 00 00 00 00 
0659   0BC5 00 00 00 00 
0659   0BC9 00 00 00 00 
0659   0BCD 00 00 00 00 
0659   0BD1 00 00 00 00 
0659   0BD5 00 00 00 00 
0659   0BD9 00 00 00 00 
0659   0BDD 00 00 00 00 
0659   0BE1 00 00 00 00 
0659   0BE5 00 00 00 00 
0659   0BE9 00 00 00 00 
0659   0BED 00 00 00 00 
0659   0BF1 00 00 00 00 
0659   0BF5 00 00 00 00 
0659   0BF9 00 00 00 00 
0659   0BFD 00 00 00 00 
0659   0C01 00 00 00 00 
0659   0C05 00 00 00 00 
0659   0C09 00 00 00 00 
0659   0C0D 00 00 00 00 
0659   0C11 00 00 00 00 
0659   0C15 00 00 00 00 
0659   0C19 00 00 00 00 
0659   0C1D 00 00 00 00 
0659   0C21 00 00 00 00 
0659   0C25 00 00 00 00 
0659   0C29 00 00 00 00 
0659   0C2D 00 00 00 00 
0659   0C31 00 00 00 00 
0659   0C35 00 00 00 00 
0659   0C39 00 00 00 00 
0659   0C3D 00 00 00 00 
0659   0C41 00 00 00 00 
0659   0C45 00 00 00 00 
0659   0C49 00 00 00 00 
0659   0C4D 00 00 00 00 
0659   0C51 00 00 00 00 
0659   0C55 00 00 00 00 
0659   0C59 00 00 00 00 
0659   0C5D 00 00 00 00 
0659   0C61 00 00 00 00 
0659   0C65 00 00 00 00 
0659   0C69 00 00 00 00 
0659   0C6D 00 00 00 00 
0659   0C71 00 00 00 00 
0659   0C75 00 00 00 00 
0659   0C79 00 00 00 00 
0659   0C7D 00 00 00 00 
0659   0C81 00 00 00 00 
0659   0C85 00 00 00 00 
0659   0C89 00 00 00 00 
0659   0C8D 00 00 00 00 
0659   0C91 00 00 00 00 
0659   0C95 00 00 00 00 
0659   0C99 00 00 00 00 
0659   0C9D 00 00 00 00 
0659   0CA1 00 00 00 00 
0659   0CA5 00 00 00 00 
0659   0CA9 00 00 00 00 
0659   0CAD 00 00 00 00 
0659   0CB1 00 00 00 00 
0659   0CB5 00 00 00 00 
0659   0CB9 00 00 00 00 
0659   0CBD 00 00 00 00 
0659   0CC1 00 00 00 00 
0659   0CC5 00 00 00 00 
0659   0CC9 00 00 00 00 
0659   0CCD 00 00 00 00 
0659   0CD1 00 00 00 00 
0659   0CD5 00 00 00 00 
0659   0CD9 00 00 00 00 
0659   0CDD 00 00 00 00 
0659   0CE1 00 00 00 00 
0659   0CE5 00 00 00 00 
0659   0CE9 00 00 00 00 
0659   0CED 00 00 00 00 
0659   0CF1 00 00 00 00 
0659   0CF5 00 00 00 00 
0659   0CF9 00 00 00 00 
0659   0CFD 00 00 00 00 
0659   0D01 00 00 00 00 
0659   0D05 00 00 00 00 
0659   0D09 00 00 00 00 
0659   0D0D 00 00 00 00 
0659   0D11 00 00 00 00 
0659   0D15 00 00 00 00 
0659   0D19 00 00 00 00 
0659   0D1D 00 00 00 00 
0659   0D21 00 00 00 00 
0659   0D25 00 00 00 00 
0659   0D29 00 00 00 00 
0659   0D2D 00 00 00 00 
0659   0D31 00 00 00 00 
0659   0D35 00 00 00 00 
0659   0D39 00 00 00 00 
0659   0D3D 00 00 00 00 
0659   0D41 00 00 00 00 
0659   0D45 00 00 00 00 
0659   0D49 00 00 00 00 
0659   0D4D 00 00 00 00 
0659   0D51 00 00 00 00 
0659   0D55 00 00 00 00 
0659   0D59 00 00 00 00 
0659   0D5D 00 00 00 00 
0659   0D61 00 00 00 00 
0659   0D65 00 00 00 00 
0659   0D69 00 00 00 00 
0659   0D6D 00 00 00 00 
0659   0D71 00 00 00 00 
0659   0D75 00 00 00 00 
0659   0D79 00 00 00 00 
0659   0D7D 00 00 00 00 
0659   0D81 00 00 00 00 
0659   0D85 00 00 00 00 
0659   0D89 00 00 00 00 
0659   0D8D 00 00 00 00 
0659   0D91 00 00 00 00 
0659   0D95 00 00 00 00 
0659   0D99 00 00 00 00 
0659   0D9D 00 00 00 00 
0659   0DA1 00 00 00 00 
0659   0DA5 00 00 00 00 
0659   0DA9 00 00 00 00 
0659   0DAD 00 00 00 00 
0659   0DB1 00 00 00 00 
0659   0DB5 00 00 00 00 
0659   0DB9 00 00 00 00 
0659   0DBD 00 00 00 00 
0659   0DC1 00 00 00 00 
0659   0DC5 00 00 00 00 
0659   0DC9 00 00 00 00 
0659   0DCD 00 00 00 00 
0659   0DD1 00 00 00 00 
0659   0DD5 00 00 00 00 
0659   0DD9 00 00 00 00 
0659   0DDD 00 00 00 00 
0659   0DE1 00 00 00 00 
0659   0DE5 00 00 00 00 
0659   0DE9 00 00 00 00 
0659   0DED 00 00 00 00 
0659   0DF1 00 00 00 00 
0659   0DF5 00 00 00 00 
0659   0DF9 00 00 00 00 
0659   0DFD 00 00 00 00 
0659   0E01 00 00 00 00 
0659   0E05 00 00 00 00 
0659   0E09 00 00 00 00 
0660   0E0D CD 07       cells: .dw cells_data
0661   0E0F             ; --- END DATA BLOCK
0662   0E0F             
0663   0E0F             ; --- BEGIN INCLUDE BLOCK
0664   0E0F             .include "lib/stdio.asm"
0001+  0E0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0E0F             ; stdio.s
0003+  0E0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0E0F             .include "lib/string.asm"
0001++ 0E0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0E0F             ; string.s
0003++ 0E0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0E0F             
0005++ 0E0F             
0006++ 0E0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0E0F             ; strrev
0008++ 0E0F             ; reverse a string
0009++ 0E0F             ; D = string address
0010++ 0E0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0E0F             ; 01234
0012++ 0E0F             strrev:
0013++ 0E0F 4B          	pusha
0014++ 0E10 07 56 0E    	call strlen	; length in C
0015++ 0E13 12          	mov a, c
0016++ 0E14 AF 01 00    	cmp a, 1
0017++ 0E17 D0 31 0E    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0E1A 7D          	dec a
0019++ 0E1B FD 4E       	mov si, d	; beginning of string
0020++ 0E1D FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0E1F 59          	add d, a	; end of string
0022++ 0E20 12          	mov a, c
0023++ 0E21 FD 9B       	shr a		; divide by 2
0024++ 0E23 39          	mov c, a	; C now counts the steps
0025++ 0E24             strrev_L0:
0026++ 0E24 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0E25 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0E26 3E          	mov [d], al	; store left char into right side
0029++ 0E27 1B          	mov al, bl
0030++ 0E28 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0E29 7E          	dec c
0032++ 0E2A 7F          	dec d
0033++ 0E2B C2 00 00    	cmp c, 0
0034++ 0E2E C7 24 0E    	jne strrev_L0
0035++ 0E31             strrev_end:
0036++ 0E31 4C          	popa
0037++ 0E32 09          	ret
0038++ 0E33             	
0039++ 0E33             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0E33             ; strchr
0041++ 0E33             ; search string in D for char in AL
0042++ 0E33             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0E33             strchr:
0044++ 0E33             strchr_L0:
0045++ 0E33 32          	mov bl, [d]
0046++ 0E34 C1 00       	cmp bl, 0
0047++ 0E36 C6 41 0E    	je strchr_end
0048++ 0E39 BA          	cmp al, bl
0049++ 0E3A C6 41 0E    	je strchr_end
0050++ 0E3D 79          	inc d
0051++ 0E3E 0A 33 0E    	jmp strchr_L0
0052++ 0E41             strchr_end:
0053++ 0E41 1B          	mov al, bl
0054++ 0E42 09          	ret
0055++ 0E43             
0056++ 0E43             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0E43             ; strstr
0058++ 0E43             ; find sub-string
0059++ 0E43             ; str1 in SI
0060++ 0E43             ; str2 in DI
0061++ 0E43             ; SI points to end of source string
0062++ 0E43             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0E43             strstr:
0064++ 0E43 DB          	push al
0065++ 0E44 DA          	push d
0066++ 0E45 E3          	push di
0067++ 0E46             strstr_loop:
0068++ 0E46 F3          	cmpsb					; compare a byte of the strings
0069++ 0E47 C7 52 0E    	jne strstr_ret
0070++ 0E4A FC 00 00    	lea d, [di + 0]
0071++ 0E4D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0E4F C7 46 0E    	jne strstr_loop				; equal chars but not at end
0073++ 0E52             strstr_ret:
0074++ 0E52 F0          	pop di
0075++ 0E53 E7          	pop d
0076++ 0E54 E8          	pop al
0077++ 0E55 09          	ret
0078++ 0E56             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0E56             ; length of null terminated string
0080++ 0E56             ; result in C
0081++ 0E56             ; pointer in D
0082++ 0E56             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0E56             strlen:
0084++ 0E56 DA          	push d
0085++ 0E57 38 00 00    	mov c, 0
0086++ 0E5A             strlen_L1:
0087++ 0E5A BD 00       	cmp byte [d], 0
0088++ 0E5C C6 64 0E    	je strlen_ret
0089++ 0E5F 79          	inc d
0090++ 0E60 78          	inc c
0091++ 0E61 0A 5A 0E    	jmp strlen_L1
0092++ 0E64             strlen_ret:
0093++ 0E64 E7          	pop d
0094++ 0E65 09          	ret
0095++ 0E66             
0096++ 0E66             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0E66             ; STRCMP
0098++ 0E66             ; compare two strings
0099++ 0E66             ; str1 in SI
0100++ 0E66             ; str2 in DI
0101++ 0E66             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0E66             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0E66             strcmp:
0104++ 0E66 DB          	push al
0105++ 0E67 DA          	push d
0106++ 0E68 E3          	push di
0107++ 0E69 E2          	push si
0108++ 0E6A             strcmp_loop:
0109++ 0E6A F3          	cmpsb					; compare a byte of the strings
0110++ 0E6B C7 76 0E    	jne strcmp_ret
0111++ 0E6E FB FF FF    	lea d, [si +- 1]
0112++ 0E71 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0E73 C7 6A 0E    	jne strcmp_loop				; equal chars but not at end
0114++ 0E76             strcmp_ret:
0115++ 0E76 EF          	pop si
0116++ 0E77 F0          	pop di
0117++ 0E78 E7          	pop d
0118++ 0E79 E8          	pop al
0119++ 0E7A 09          	ret
0120++ 0E7B             
0121++ 0E7B             
0122++ 0E7B             ; STRCPY
0123++ 0E7B             ; copy null terminated string from SI to DI
0124++ 0E7B             ; source in SI
0125++ 0E7B             ; destination in DI
0126++ 0E7B             strcpy:
0127++ 0E7B E2          	push si
0128++ 0E7C E3          	push di
0129++ 0E7D DB          	push al
0130++ 0E7E             strcpy_L1:
0131++ 0E7E F6          	lodsb
0132++ 0E7F F7          	stosb
0133++ 0E80 B9 00       	cmp al, 0
0134++ 0E82 C7 7E 0E    	jne strcpy_L1
0135++ 0E85             strcpy_end:
0136++ 0E85 E8          	pop al
0137++ 0E86 F0          	pop di
0138++ 0E87 EF          	pop si
0139++ 0E88 09          	ret
0140++ 0E89             
0141++ 0E89             ; STRCAT
0142++ 0E89             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0E89             ; source in SI
0144++ 0E89             ; destination in DI
0145++ 0E89             strcat:
0146++ 0E89 E2          	push si
0147++ 0E8A E3          	push di
0148++ 0E8B D7          	push a
0149++ 0E8C DA          	push d
0150++ 0E8D 50          	mov a, di
0151++ 0E8E 3C          	mov d, a
0152++ 0E8F             strcat_goto_end_L1:
0153++ 0E8F BD 00       	cmp byte[d], 0
0154++ 0E91 C6 98 0E    	je strcat_start
0155++ 0E94 79          	inc d
0156++ 0E95 0A 8F 0E    	jmp strcat_goto_end_L1
0157++ 0E98             strcat_start:
0158++ 0E98 FD 50       	mov di, d
0159++ 0E9A             strcat_L1:
0160++ 0E9A F6          	lodsb
0161++ 0E9B F7          	stosb
0162++ 0E9C B9 00       	cmp al, 0
0163++ 0E9E C7 9A 0E    	jne strcat_L1
0164++ 0EA1             strcat_end:
0165++ 0EA1 E7          	pop d
0166++ 0EA2 E4          	pop a
0167++ 0EA3 F0          	pop di
0168++ 0EA4 EF          	pop si
0169++ 0EA5 09          	ret
0005+  0EA6             
0006+  0EA6 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0EAA 34 35 36 37 
0006+  0EAE 38 39 41 42 
0006+  0EB2 43 44 45 46 
0007+  0EB6 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0EBA 1B 5B 48 00 
0008+  0EBE             
0009+  0EBE 01 00       table_power:.dw 1
0010+  0EC0 0A 00       			.dw 10
0011+  0EC2 64 00       			.dw 100
0012+  0EC4 E8 03       			.dw 1000
0013+  0EC6 10 27       			.dw 10000
0014+  0EC8             
0015+  0EC8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0EC8             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0EC8             ; ASCII in BL
0018+  0EC8             ; result in AL
0019+  0EC8             ; ascii for F = 0100 0110
0020+  0EC8             ; ascii for 9 = 0011 1001
0021+  0EC8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0EC8             hex_ascii_encode:
0023+  0EC8 1B          	mov al, bl
0024+  0EC9 93 40       	test al, $40				; test if letter or number
0025+  0ECB C7 D1 0E    	jnz hex_letter
0026+  0ECE 87 0F       	and al, $0F				; get number
0027+  0ED0 09          	ret
0028+  0ED1             hex_letter:
0029+  0ED1 87 0F       	and al, $0F				; get letter
0030+  0ED3 6A 09       	add al, 9
0031+  0ED5 09          	ret
0032+  0ED6             
0033+  0ED6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0ED6             ; ATOI
0035+  0ED6             ; 2 letter hex string in B
0036+  0ED6             ; 8bit integer returned in AL
0037+  0ED6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0ED6             atoi:
0039+  0ED6 D8          	push b
0040+  0ED7 07 C8 0E    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0EDA 30          	mov bl, bh
0042+  0EDB DB          	push al					; save a
0043+  0EDC 07 C8 0E    	call hex_ascii_encode
0044+  0EDF EA          	pop bl	
0045+  0EE0 FD 9E 04    	shl al, 4
0046+  0EE3 8C          	or al, bl
0047+  0EE4 E5          	pop b
0048+  0EE5 09          	ret	
0049+  0EE6             
0050+  0EE6             
0051+  0EE6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0EE6             ; printf
0053+  0EE6             ; no need for explanations!
0054+  0EE6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0EE6             printf:
0056+  0EE6 09          	ret
0057+  0EE7             
0058+  0EE7             
0059+  0EE7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0EE7             ; scanf
0061+  0EE7             ; no need for explanations!
0062+  0EE7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0EE7             scanf:
0064+  0EE7 09          	ret
0065+  0EE8             
0066+  0EE8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0EE8             ; ITOA
0068+  0EE8             ; 8bit value in BL
0069+  0EE8             ; 2 byte ASCII result in A
0070+  0EE8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0EE8             itoa:
0072+  0EE8 DA          	push d
0073+  0EE9 D8          	push b
0074+  0EEA A7 00       	mov bh, 0
0075+  0EEC FD A4 04    	shr bl, 4	
0076+  0EEF 74          	mov d, b
0077+  0EF0 1F A6 0E    	mov al, [d + s_hex_digits]
0078+  0EF3 23          	mov ah, al
0079+  0EF4             	
0080+  0EF4 E5          	pop b
0081+  0EF5 D8          	push b
0082+  0EF6 A7 00       	mov bh, 0
0083+  0EF8 FD 87 0F    	and bl, $0F
0084+  0EFB 74          	mov d, b
0085+  0EFC 1F A6 0E    	mov al, [d + s_hex_digits]
0086+  0EFF E5          	pop b
0087+  0F00 E7          	pop d
0088+  0F01 09          	ret
0089+  0F02             
0090+  0F02             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0F02             ; HEX STRING TO BINARY
0092+  0F02             ; di = destination address
0093+  0F02             ; si = source
0094+  0F02             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0F02             hex_to_int:
0096+  0F02             hex_to_int_L1:
0097+  0F02 F6          	lodsb					; load from [SI] to AL
0098+  0F03 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0F05 C6 12 0F    	jz hex_to_int_ret
0100+  0F08 36          	mov bh, al
0101+  0F09 F6          	lodsb
0102+  0F0A 2F          	mov bl, al
0103+  0F0B 07 D6 0E    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0F0E F7          	stosb					; store AL to [DI]
0105+  0F0F 0A 02 0F    	jmp hex_to_int_L1
0106+  0F12             hex_to_int_ret:
0107+  0F12 09          	ret		
0108+  0F13             
0109+  0F13             
0110+  0F13             
0111+  0F13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0F13             ; GETCHAR
0113+  0F13             ; char in ah
0114+  0F13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0F13             getchar:
0116+  0F13 DB          	push al
0117+  0F14             getchar_retry:
0118+  0F14 FD 0C       	sti
0119+  0F16 19 01       	mov al, 1
0120+  0F18 05 03       	syscall sys_io			; receive in AH
0121+  0F1A B9 00       	cmp al, 0			; check if any char was receive
0122+  0F1C C6 14 0F    	je getchar_retry
0123+  0F1F E8          	pop al
0124+  0F20 09          	ret
0125+  0F21             
0126+  0F21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0F21             ; PUTCHAR
0128+  0F21             ; char in ah
0129+  0F21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0F21             putchar:
0131+  0F21 D7          	push a
0132+  0F22 19 00       	mov al, 0
0133+  0F24 05 03       	syscall sys_io			; char in AH
0134+  0F26 E4          	pop a
0135+  0F27 09          	ret
0136+  0F28             
0137+  0F28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0F28             ;; INPUT A STRING
0139+  0F28             ;; terminates with null
0140+  0F28             ;; pointer in D
0141+  0F28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0F28             gets:
0143+  0F28 D7          	push a
0144+  0F29 DA          	push d
0145+  0F2A             gets_loop:
0146+  0F2A FD 0C       	sti
0147+  0F2C 19 01       	mov al, 1
0148+  0F2E 05 03       	syscall sys_io			; receive in AH
0149+  0F30 B9 00       	cmp al, 0				; check error code (AL)
0150+  0F32 C6 2A 0F    	je gets_loop			; if no char received, retry
0151+  0F35             
0152+  0F35 76 1B       	cmp ah, 27
0153+  0F37 C6 58 0F    	je gets_telnet_escape
0154+  0F3A 76 0A       	cmp ah, $0A				; LF
0155+  0F3C C6 B1 0F    	je gets_end
0156+  0F3F 76 0D       	cmp ah, $0D				; CR
0157+  0F41 C6 B1 0F    	je gets_end
0158+  0F44 76 5C       	cmp ah, $5C				; '\\'
0159+  0F46 C6 88 0F    	je gets_escape
0160+  0F49             	
0161+  0F49 76 08       	cmp ah, $08			; check for backspace
0162+  0F4B C6 54 0F    	je gets_backspace
0163+  0F4E             
0164+  0F4E 1A          	mov al, ah
0165+  0F4F 3E          	mov [d], al
0166+  0F50 79          	inc d
0167+  0F51 0A 2A 0F    	jmp gets_loop
0168+  0F54             gets_backspace:
0169+  0F54 7F          	dec d
0170+  0F55 0A 2A 0F    	jmp gets_loop
0171+  0F58             gets_telnet_escape:
0172+  0F58 FD 0C       	sti
0173+  0F5A 19 01       	mov al, 1
0174+  0F5C 05 03       	syscall sys_io				; receive in AH without echo
0175+  0F5E B9 00       	cmp al, 0					; check error code (AL)
0176+  0F60 C6 58 0F    	je gets_telnet_escape		; if no char received, retry
0177+  0F63 76 5B       	cmp ah, '['
0178+  0F65 C7 2A 0F    	jne gets_loop
0179+  0F68             gets_telnet_escape_phase2:
0180+  0F68 FD 0C       	sti
0181+  0F6A 19 01       	mov al, 1
0182+  0F6C 05 03       	syscall sys_io					; receive in AH without echo
0183+  0F6E B9 00       	cmp al, 0						; check error code (AL)
0184+  0F70 C6 68 0F    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0F73 76 44       	cmp ah, 'D'
0186+  0F75 C6 80 0F    	je gets_left_arrow
0187+  0F78 76 43       	cmp ah, 'C'
0188+  0F7A C6 84 0F    	je gets_right_arrow
0189+  0F7D 0A 2A 0F    	jmp gets_loop
0190+  0F80             gets_left_arrow:
0191+  0F80 7F          	dec d
0192+  0F81 0A 2A 0F    	jmp gets_loop
0193+  0F84             gets_right_arrow:
0194+  0F84 79          	inc d
0195+  0F85 0A 2A 0F    	jmp gets_loop
0196+  0F88             gets_escape:
0197+  0F88 FD 0C       	sti
0198+  0F8A 19 01       	mov al, 1
0199+  0F8C 05 03       	syscall sys_io			; receive in AH
0200+  0F8E B9 00       	cmp al, 0				; check error code (AL)
0201+  0F90 C6 88 0F    	je gets_escape			; if no char received, retry
0202+  0F93 76 6E       	cmp ah, 'n'
0203+  0F95 C6 A3 0F    	je gets_LF
0204+  0F98 76 72       	cmp ah, 'r'
0205+  0F9A C6 AA 0F    	je gets_CR
0206+  0F9D 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0F9E 3E          	mov [d], al
0208+  0F9F 79          	inc d
0209+  0FA0 0A 2A 0F    	jmp gets_loop
0210+  0FA3             gets_LF:
0211+  0FA3 19 0A       	mov al, $0A
0212+  0FA5 3E          	mov [d], al
0213+  0FA6 79          	inc d
0214+  0FA7 0A 2A 0F    	jmp gets_loop
0215+  0FAA             gets_CR:
0216+  0FAA 19 0D       	mov al, $0D
0217+  0FAC 3E          	mov [d], al
0218+  0FAD 79          	inc d
0219+  0FAE 0A 2A 0F    	jmp gets_loop
0220+  0FB1             gets_end:
0221+  0FB1 19 00       	mov al, 0
0222+  0FB3 3E          	mov [d], al				; terminate string
0223+  0FB4 E7          	pop d
0224+  0FB5 E4          	pop a
0225+  0FB6 09          	ret
0226+  0FB7             
0227+  0FB7             
0228+  0FB7             
0229+  0FB7             
0230+  0FB7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0FB7             ;; INPUT TEXT
0232+  0FB7             ;; terminated with CTRL+D
0233+  0FB7             ;; pointer in D
0234+  0FB7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0FB7             gettxt:
0236+  0FB7 D7          	push a
0237+  0FB8 DA          	push d
0238+  0FB9             gettxt_loop:
0239+  0FB9 19 01       	mov al, 1
0240+  0FBB 05 03       	syscall sys_io			; receive in AH
0241+  0FBD B9 00       	cmp al, 0				; check error code (AL)
0242+  0FBF C6 B9 0F    	je gettxt_loop		; if no char received, retry
0243+  0FC2 76 04       	cmp ah, 4			; EOT
0244+  0FC4 C6 02 10    	je gettxt_end
0245+  0FC7 76 08       	cmp ah, $08			; check for backspace
0246+  0FC9 C6 FE 0F    	je gettxt_backspace
0247+  0FCC 76 5C       	cmp ah, $5C				; '\\'
0248+  0FCE C6 D7 0F    	je gettxt_escape
0249+  0FD1 1A          	mov al, ah
0250+  0FD2 3E          	mov [d], al
0251+  0FD3 79          	inc d
0252+  0FD4 0A B9 0F    	jmp gettxt_loop
0253+  0FD7             gettxt_escape:
0254+  0FD7 19 01       	mov al, 1
0255+  0FD9 05 03       	syscall sys_io			; receive in AH
0256+  0FDB B9 00       	cmp al, 0				; check error code (AL)
0257+  0FDD C6 D7 0F    	je gettxt_escape		; if no char received, retry
0258+  0FE0 76 6E       	cmp ah, 'n'
0259+  0FE2 C6 F0 0F    	je gettxt_LF
0260+  0FE5 76 72       	cmp ah, 'r'
0261+  0FE7 C6 F7 0F    	je gettxt_CR
0262+  0FEA 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0FEB 3E          	mov [d], al
0264+  0FEC 79          	inc d
0265+  0FED 0A B9 0F    	jmp gettxt_loop
0266+  0FF0             gettxt_LF:
0267+  0FF0 19 0A       	mov al, $0A
0268+  0FF2 3E          	mov [d], al
0269+  0FF3 79          	inc d
0270+  0FF4 0A B9 0F    	jmp gettxt_loop
0271+  0FF7             gettxt_CR:
0272+  0FF7 19 0D       	mov al, $0D
0273+  0FF9 3E          	mov [d], al
0274+  0FFA 79          	inc d
0275+  0FFB 0A B9 0F    	jmp gettxt_loop
0276+  0FFE             gettxt_backspace:
0277+  0FFE 7F          	dec d
0278+  0FFF 0A B9 0F    	jmp gettxt_loop
0279+  1002             gettxt_end:
0280+  1002 19 00       	mov al, 0
0281+  1004 3E          	mov [d], al				; terminate string
0282+  1005 E7          	pop d
0283+  1006 E4          	pop a
0284+  1007 09          	ret
0285+  1008             
0286+  1008             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  1008             ; PRINT NEW LINE
0288+  1008             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  1008             printnl:
0290+  1008 D7          	push a
0291+  1009 10 00 0A    	mov a, $0A00
0292+  100C 05 03       	syscall sys_io
0293+  100E 10 00 0D    	mov a, $0D00
0294+  1011 05 03       	syscall sys_io
0295+  1013 E4          	pop a
0296+  1014 09          	ret
0297+  1015             
0298+  1015             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  1015             ; strtoint
0300+  1015             ; 4 digit hex string number in d
0301+  1015             ; integer returned in A
0302+  1015             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  1015             strtointx:
0304+  1015 D8          	push b
0305+  1016 32          	mov bl, [d]
0306+  1017 37          	mov bh, bl
0307+  1018 33 01 00    	mov bl, [d + 1]
0308+  101B 07 D6 0E    	call atoi				; convert to int in AL
0309+  101E 23          	mov ah, al				; move to AH
0310+  101F 33 02 00    	mov bl, [d + 2]
0311+  1022 37          	mov bh, bl
0312+  1023 33 03 00    	mov bl, [d + 3]
0313+  1026 07 D6 0E    	call atoi				; convert to int in AL
0314+  1029 E5          	pop b
0315+  102A 09          	ret
0316+  102B             
0317+  102B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  102B             ; strtoint
0319+  102B             ; 5 digit base10 string number in d
0320+  102B             ; integer returned in A
0321+  102B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  102B             strtoint:
0323+  102B E2          	push si
0324+  102C D8          	push b
0325+  102D D9          	push c
0326+  102E DA          	push d
0327+  102F 07 56 0E    	call strlen			; get string length in C
0328+  1032 7E          	dec c
0329+  1033 FD 4E       	mov si, d
0330+  1035 12          	mov a, c
0331+  1036 FD 99       	shl a
0332+  1038 3B BE 0E    	mov d, table_power
0333+  103B 59          	add d, a
0334+  103C 38 00 00    	mov c, 0
0335+  103F             strtoint_L0:
0336+  103F F6          	lodsb			; load ASCII to al
0337+  1040 B9 00       	cmp al, 0
0338+  1042 C6 55 10    	je strtoint_end
0339+  1045 6F 30       	sub al, $30		; make into integer
0340+  1047 22 00       	mov ah, 0
0341+  1049 2A          	mov b, [d]
0342+  104A AC          	mul a, b			; result in B since it fits in 16bits
0343+  104B 11          	mov a, b
0344+  104C 28          	mov b, c
0345+  104D 54          	add a, b
0346+  104E 39          	mov c, a
0347+  104F 63 02 00    	sub d, 2
0348+  1052 0A 3F 10    	jmp strtoint_L0
0349+  1055             strtoint_end:
0350+  1055 12          	mov a, c
0351+  1056 E7          	pop d
0352+  1057 E6          	pop c
0353+  1058 E5          	pop b
0354+  1059 EF          	pop si
0355+  105A 09          	ret
0356+  105B             
0357+  105B             
0358+  105B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  105B             ; PRINT NULL TERMINATED STRING
0360+  105B             ; pointer in D
0361+  105B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  105B             puts:
0363+  105B D7          	push a
0364+  105C DA          	push d
0365+  105D             puts_L1:
0366+  105D 1E          	mov al, [d]
0367+  105E B9 00       	cmp al, 0
0368+  1060 C6 6C 10    	jz puts_END
0369+  1063 23          	mov ah, al
0370+  1064 19 00       	mov al, 0
0371+  1066 05 03       	syscall sys_io
0372+  1068 79          	inc d
0373+  1069 0A 5D 10    	jmp puts_L1
0374+  106C             puts_END:
0375+  106C E7          	pop d
0376+  106D E4          	pop a
0377+  106E 09          	ret
0378+  106F             
0379+  106F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  106F             ; PRINT N SIZE STRING
0381+  106F             ; pointer in D
0382+  106F             ; size in C
0383+  106F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  106F             putsn:
0385+  106F DB          	push al
0386+  1070 DA          	push d
0387+  1071 D9          	push c
0388+  1072             putsn_L0:
0389+  1072 1E          	mov al, [d]
0390+  1073 23          	mov ah, al
0391+  1074 19 00       	mov al, 0
0392+  1076 05 03       	syscall sys_io
0393+  1078 79          	inc d
0394+  1079 7E          	dec c	
0395+  107A C2 00 00    	cmp c, 0
0396+  107D C7 72 10    	jne putsn_L0
0397+  1080             putsn_end:
0398+  1080 E6          	pop c
0399+  1081 E7          	pop d
0400+  1082 E8          	pop al
0401+  1083 09          	ret
0402+  1084             
0403+  1084             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  1084             ; print 16bit decimal number
0405+  1084             ; input number in A
0406+  1084             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  1084             print_u16d:
0408+  1084 D7          	push a
0409+  1085 D8          	push b
0410+  1086 26 10 27    	mov b, 10000
0411+  1089 AE          	div a, b			; get 10000 coeff.
0412+  108A 07 B0 10    	call print_number
0413+  108D 11          	mov a, b
0414+  108E 26 E8 03    	mov b, 1000
0415+  1091 AE          	div a, b			; get 10000 coeff.
0416+  1092 07 B0 10    	call print_number
0417+  1095 11          	mov a, b
0418+  1096 26 64 00    	mov b, 100
0419+  1099 AE          	div a, b
0420+  109A 07 B0 10    	call print_number
0421+  109D 11          	mov a, b
0422+  109E 26 0A 00    	mov b, 10
0423+  10A1 AE          	div a, b
0424+  10A2 07 B0 10    	call print_number
0425+  10A5 11          	mov a, b
0426+  10A6 6A 30       	add al, $30
0427+  10A8 23          	mov ah, al
0428+  10A9 19 00       	mov al, 0
0429+  10AB 05 03       	syscall sys_io	; print coeff
0430+  10AD E5          	pop b
0431+  10AE E4          	pop a
0432+  10AF 09          	ret
0433+  10B0             
0434+  10B0             
0435+  10B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  10B0             ; if A == 0, print space
0437+  10B0             ; else print A
0438+  10B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  10B0             print_number:
0440+  10B0 6A 30       	add al, $30
0441+  10B2 23          	mov ah, al
0442+  10B3 07 21 0F    	call putchar
0443+  10B6 09          	ret
0444+  10B7             
0445+  10B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  10B7             ; PRINT 16BIT HEX INTEGER
0447+  10B7             ; integer value in reg B
0448+  10B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  10B7             print_u16x:
0450+  10B7 D7          	push a
0451+  10B8 D8          	push b
0452+  10B9 DD          	push bl
0453+  10BA 30          	mov bl, bh
0454+  10BB 07 E8 0E    	call itoa				; convert bh to char in A
0455+  10BE 2F          	mov bl, al				; save al
0456+  10BF 19 00       	mov al, 0
0457+  10C1 05 03       	syscall sys_io				; display AH
0458+  10C3 24          	mov ah, bl				; retrieve al
0459+  10C4 19 00       	mov al, 0
0460+  10C6 05 03       	syscall sys_io				; display AL
0461+  10C8             
0462+  10C8 EA          	pop bl
0463+  10C9 07 E8 0E    	call itoa				; convert bh to char in A
0464+  10CC 2F          	mov bl, al				; save al
0465+  10CD 19 00       	mov al, 0
0466+  10CF 05 03       	syscall sys_io				; display AH
0467+  10D1 24          	mov ah, bl				; retrieve al
0468+  10D2 19 00       	mov al, 0
0469+  10D4 05 03       	syscall sys_io				; display AL
0470+  10D6             
0471+  10D6 E5          	pop b
0472+  10D7 E4          	pop a
0473+  10D8 09          	ret
0474+  10D9             
0475+  10D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  10D9             ; INPUT 16BIT HEX INTEGER
0477+  10D9             ; read 16bit integer into A
0478+  10D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  10D9             scan_u16x:
0480+  10D9 F8 10 00    	enter 16
0481+  10DC D8          	push b
0482+  10DD DA          	push d
0483+  10DE             
0484+  10DE FA F1 FF    	lea d, [bp + -15]
0485+  10E1 07 28 0F    	call gets				; get number
0486+  10E4             
0487+  10E4 32          	mov bl, [d]
0488+  10E5 37          	mov bh, bl
0489+  10E6 33 01 00    	mov bl, [d + 1]
0490+  10E9 07 D6 0E    	call atoi				; convert to int in AL
0491+  10EC 23          	mov ah, al				; move to AH
0492+  10ED             
0493+  10ED 33 02 00    	mov bl, [d + 2]
0494+  10F0 37          	mov bh, bl
0495+  10F1 33 03 00    	mov bl, [d + 3]
0496+  10F4 07 D6 0E    	call atoi				; convert to int in AL
0497+  10F7             
0498+  10F7 E7          	pop d
0499+  10F8 E5          	pop b
0500+  10F9 F9          	leave
0501+  10FA 09          	ret
0502+  10FB             
0503+  10FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  10FB             ; PRINT 8bit HEX INTEGER
0505+  10FB             ; integer value in reg bl
0506+  10FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  10FB             print_u8x:
0508+  10FB D7          	push a
0509+  10FC DD          	push bl
0510+  10FD             
0511+  10FD 07 E8 0E    	call itoa				; convert bl to char in A
0512+  1100 2F          	mov bl, al				; save al
0513+  1101 19 00       	mov al, 0
0514+  1103 05 03       	syscall sys_io				; display AH
0515+  1105 24          	mov ah, bl				; retrieve al
0516+  1106 19 00       	mov al, 0
0517+  1108 05 03       	syscall sys_io				; display AL
0518+  110A             
0519+  110A EA          	pop bl
0520+  110B E4          	pop a
0521+  110C 09          	ret
0522+  110D             
0523+  110D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  110D             ; print 8bit decimal unsigned number
0525+  110D             ; input number in AL
0526+  110D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  110D             print_u8d:
0528+  110D D7          	push a
0529+  110E D8          	push b
0530+  110F             
0531+  110F 22 00       	mov ah, 0
0532+  1111 26 64 00    	mov b, 100
0533+  1114 AE          	div a, b
0534+  1115 D8          	push b			; save remainder
0535+  1116 B9 00       	cmp al, 0
0536+  1118 C6 22 11    	je skip100
0537+  111B 6A 30       	add al, $30
0538+  111D 23          	mov ah, al
0539+  111E 19 00       	mov al, 0
0540+  1120 05 03       	syscall sys_io	; print coeff
0541+  1122             skip100:
0542+  1122 E4          	pop a
0543+  1123 22 00       	mov ah, 0
0544+  1125 26 0A 00    	mov b, 10
0545+  1128 AE          	div a, b
0546+  1129 D8          	push b			; save remainder
0547+  112A B9 00       	cmp al, 0
0548+  112C C6 36 11    	je skip10
0549+  112F 6A 30       	add al, $30
0550+  1131 23          	mov ah, al
0551+  1132 19 00       	mov al, 0
0552+  1134 05 03       	syscall sys_io	; print coeff
0553+  1136             skip10:
0554+  1136 E4          	pop a
0555+  1137 1B          	mov al, bl
0556+  1138 6A 30       	add al, $30
0557+  113A 23          	mov ah, al
0558+  113B 19 00       	mov al, 0
0559+  113D 05 03       	syscall sys_io	; print coeff
0560+  113F E5          	pop b
0561+  1140 E4          	pop a
0562+  1141 09          	ret
0563+  1142             
0564+  1142             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  1142             ; INPUT 8BIT HEX INTEGER
0566+  1142             ; read 8bit integer into AL
0567+  1142             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  1142             scan_u8x:
0569+  1142 F8 04 00    	enter 4
0570+  1145 D8          	push b
0571+  1146 DA          	push d
0572+  1147             
0573+  1147 FA FD FF    	lea d, [bp + -3]
0574+  114A 07 28 0F    	call gets				; get number
0575+  114D             
0576+  114D 32          	mov bl, [d]
0577+  114E 37          	mov bh, bl
0578+  114F 33 01 00    	mov bl, [d + 1]
0579+  1152 07 D6 0E    	call atoi				; convert to int in AL
0580+  1155             
0581+  1155 E7          	pop d
0582+  1156 E5          	pop b
0583+  1157 F9          	leave
0584+  1158 09          	ret
0585+  1159             
0586+  1159             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  1159             ; input decimal number
0588+  1159             ; result in A
0589+  1159             ; 655'\0'
0590+  1159             ; low--------high
0591+  1159             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  1159             scan_u16d:
0593+  1159 F8 08 00    	enter 8
0594+  115C E2          	push si
0595+  115D D8          	push b
0596+  115E D9          	push c
0597+  115F DA          	push d
0598+  1160 FA F9 FF    	lea d, [bp +- 7]
0599+  1163 07 28 0F    	call gets
0600+  1166 07 56 0E    	call strlen			; get string length in C
0601+  1169 7E          	dec c
0602+  116A FD 4E       	mov si, d
0603+  116C 12          	mov a, c
0604+  116D FD 99       	shl a
0605+  116F 3B BE 0E    	mov d, table_power
0606+  1172 59          	add d, a
0607+  1173 38 00 00    	mov c, 0
0608+  1176             mul_loop:
0609+  1176 F6          	lodsb			; load ASCII to al
0610+  1177 B9 00       	cmp al, 0
0611+  1179 C6 8C 11    	je mul_exit
0612+  117C 6F 30       	sub al, $30		; make into integer
0613+  117E 22 00       	mov ah, 0
0614+  1180 2A          	mov b, [d]
0615+  1181 AC          	mul a, b			; result in B since it fits in 16bits
0616+  1182 11          	mov a, b
0617+  1183 28          	mov b, c
0618+  1184 54          	add a, b
0619+  1185 39          	mov c, a
0620+  1186 63 02 00    	sub d, 2
0621+  1189 0A 76 11    	jmp mul_loop
0622+  118C             mul_exit:
0623+  118C 12          	mov a, c
0624+  118D E7          	pop d
0625+  118E E6          	pop c
0626+  118F E5          	pop b
0627+  1190 EF          	pop si
0628+  1191 F9          	leave
0629+  1192 09          	ret
0665   1193             ; --- END INCLUDE BLOCK
0666   1193             
0667   1193             
0668   1193             .end
tasm: Number of errors = 0
