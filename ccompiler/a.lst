0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 26 01 00      mov b, 1
0012   0408 D7            push a
0013   0409 11            mov a, b
0014   040A 26 01 00      mov b, 1
0015   040D B0            cmp a, b
0016   040E 0E            lodflgs
0017   040F 87 01         and al, %00000001 ; ==
0018   0411 22 00         mov ah, 0
0019   0413 27            mov b, a
0020   0414 E4            pop a
0021   0415 FD AB         swp b
0022   0417 D8            push b
0023   0418 07 64 06      call printn
0024   041B 51 02 00      add sp, 2
0025   041E 26 83 06      mov b, __string_0 ; "\n"
0026   0421 FD AB         swp b
0027   0423 D8            push b
0028   0424 07 6E 06      call print
0029   0427 51 02 00      add sp, 2
0030   042A 26 0A 00      mov b, 10
0031   042D D7            push a
0032   042E 11            mov a, b
0033   042F 26 01 00      mov b, 1
0034   0432 B0            cmp a, b
0035   0433 0E            lodflgs
0036   0434 87 01         and al, %00000001 ; ==
0037   0436 22 00         mov ah, 0
0038   0438 27            mov b, a
0039   0439 E4            pop a
0040   043A FD AB         swp b
0041   043C D8            push b
0042   043D 07 64 06      call printn
0043   0440 51 02 00      add sp, 2
0044   0443 26 83 06      mov b, __string_0 ; "\n"
0045   0446 FD AB         swp b
0046   0448 D8            push b
0047   0449 07 6E 06      call print
0048   044C 51 02 00      add sp, 2
0049   044F 26 01 00      mov b, 1
0050   0452 D7            push a
0051   0453 11            mov a, b
0052   0454 26 01 00      mov b, 1
0053   0457 B0            cmp a, b
0054   0458 0E            lodflgs
0055   0459 87 01         and al, %00000001
0056   045B 8F 01         xor al, %00000001 ; !=
0057   045D 22 00         mov ah, 0
0058   045F 27            mov b, a
0059   0460 E4            pop a
0060   0461 FD AB         swp b
0061   0463 D8            push b
0062   0464 07 64 06      call printn
0063   0467 51 02 00      add sp, 2
0064   046A 26 83 06      mov b, __string_0 ; "\n"
0065   046D FD AB         swp b
0066   046F D8            push b
0067   0470 07 6E 06      call print
0068   0473 51 02 00      add sp, 2
0069   0476 26 0A 00      mov b, 10
0070   0479 D7            push a
0071   047A 11            mov a, b
0072   047B 26 01 00      mov b, 1
0073   047E B0            cmp a, b
0074   047F 0E            lodflgs
0075   0480 87 01         and al, %00000001
0076   0482 8F 01         xor al, %00000001 ; !=
0077   0484 22 00         mov ah, 0
0078   0486 27            mov b, a
0079   0487 E4            pop a
0080   0488 FD AB         swp b
0081   048A D8            push b
0082   048B 07 64 06      call printn
0083   048E 51 02 00      add sp, 2
0084   0491 26 83 06      mov b, __string_0 ; "\n"
0085   0494 FD AB         swp b
0086   0496 D8            push b
0087   0497 07 6E 06      call print
0088   049A 51 02 00      add sp, 2
0089   049D 26 01 00      mov b, 1
0090   04A0 D7            push a
0091   04A1 11            mov a, b
0092   04A2 26 0A 00      mov b, 10
0093   04A5 B0            cmp a, b
0094   04A6 0E            lodflgs
0095   04A7 87 02         and al, %00000010 ; <
0096   04A9 FD 9C         shr al
0097   04AB 22 00         mov ah, 0
0098   04AD 27            mov b, a
0099   04AE E4            pop a
0100   04AF FD AB         swp b
0101   04B1 D8            push b
0102   04B2 07 64 06      call printn
0103   04B5 51 02 00      add sp, 2
0104   04B8 26 83 06      mov b, __string_0 ; "\n"
0105   04BB FD AB         swp b
0106   04BD D8            push b
0107   04BE 07 6E 06      call print
0108   04C1 51 02 00      add sp, 2
0109   04C4 26 14 00      mov b, 20
0110   04C7 D7            push a
0111   04C8 11            mov a, b
0112   04C9 26 0A 00      mov b, 10
0113   04CC B0            cmp a, b
0114   04CD 0E            lodflgs
0115   04CE 87 02         and al, %00000010 ; <
0116   04D0 FD 9C         shr al
0117   04D2 22 00         mov ah, 0
0118   04D4 27            mov b, a
0119   04D5 E4            pop a
0120   04D6 FD AB         swp b
0121   04D8 D8            push b
0122   04D9 07 64 06      call printn
0123   04DC 51 02 00      add sp, 2
0124   04DF 26 83 06      mov b, __string_0 ; "\n"
0125   04E2 FD AB         swp b
0126   04E4 D8            push b
0127   04E5 07 6E 06      call print
0128   04E8 51 02 00      add sp, 2
0129   04EB 26 01 00      mov b, 1
0130   04EE D7            push a
0131   04EF 11            mov a, b
0132   04F0 26 0A 00      mov b, 10
0133   04F3 B0            cmp a, b
0134   04F4 0E            lodflgs
0135   04F5 87 03         and al, %00000011 ; <=
0136   04F7 B9 00         cmp al, 0
0137   04F9 0E            lodflgs
0138   04FA 8F 01         xor al, %00000001
0139   04FC 22 00         mov ah, 0
0140   04FE 27            mov b, a
0141   04FF E4            pop a
0142   0500 FD AB         swp b
0143   0502 D8            push b
0144   0503 07 64 06      call printn
0145   0506 51 02 00      add sp, 2
0146   0509 26 83 06      mov b, __string_0 ; "\n"
0147   050C FD AB         swp b
0148   050E D8            push b
0149   050F 07 6E 06      call print
0150   0512 51 02 00      add sp, 2
0151   0515 26 0A 00      mov b, 10
0152   0518 D7            push a
0153   0519 11            mov a, b
0154   051A 26 0A 00      mov b, 10
0155   051D B0            cmp a, b
0156   051E 0E            lodflgs
0157   051F 87 03         and al, %00000011 ; <=
0158   0521 B9 00         cmp al, 0
0159   0523 0E            lodflgs
0160   0524 8F 01         xor al, %00000001
0161   0526 22 00         mov ah, 0
0162   0528 27            mov b, a
0163   0529 E4            pop a
0164   052A FD AB         swp b
0165   052C D8            push b
0166   052D 07 64 06      call printn
0167   0530 51 02 00      add sp, 2
0168   0533 26 83 06      mov b, __string_0 ; "\n"
0169   0536 FD AB         swp b
0170   0538 D8            push b
0171   0539 07 6E 06      call print
0172   053C 51 02 00      add sp, 2
0173   053F 26 14 00      mov b, 20
0174   0542 D7            push a
0175   0543 11            mov a, b
0176   0544 26 0A 00      mov b, 10
0177   0547 B0            cmp a, b
0178   0548 0E            lodflgs
0179   0549 87 03         and al, %00000011 ; <=
0180   054B B9 00         cmp al, 0
0181   054D 0E            lodflgs
0182   054E 8F 01         xor al, %00000001
0183   0550 22 00         mov ah, 0
0184   0552 27            mov b, a
0185   0553 E4            pop a
0186   0554 FD AB         swp b
0187   0556 D8            push b
0188   0557 07 64 06      call printn
0189   055A 51 02 00      add sp, 2
0190   055D 26 83 06      mov b, __string_0 ; "\n"
0191   0560 FD AB         swp b
0192   0562 D8            push b
0193   0563 07 6E 06      call print
0194   0566 51 02 00      add sp, 2
0195   0569 26 0A 00      mov b, 10
0196   056C D7            push a
0197   056D 11            mov a, b
0198   056E 26 01 00      mov b, 1
0199   0571 B0            cmp a, b
0200   0572 0E            lodflgs
0201   0573 87 03         and al, %00000011
0202   0575 B9 00         cmp al, 0
0203   0577 0E            lodflgs
0204   0578 22 00         mov ah, 0
0205   057A 27            mov b, a
0206   057B E4            pop a
0207   057C FD AB         swp b
0208   057E D8            push b
0209   057F 07 64 06      call printn
0210   0582 51 02 00      add sp, 2
0211   0585 26 83 06      mov b, __string_0 ; "\n"
0212   0588 FD AB         swp b
0213   058A D8            push b
0214   058B 07 6E 06      call print
0215   058E 51 02 00      add sp, 2
0216   0591 26 01 00      mov b, 1
0217   0594 D7            push a
0218   0595 11            mov a, b
0219   0596 26 0A 00      mov b, 10
0220   0599 B0            cmp a, b
0221   059A 0E            lodflgs
0222   059B 87 03         and al, %00000011
0223   059D B9 00         cmp al, 0
0224   059F 0E            lodflgs
0225   05A0 22 00         mov ah, 0
0226   05A2 27            mov b, a
0227   05A3 E4            pop a
0228   05A4 FD AB         swp b
0229   05A6 D8            push b
0230   05A7 07 64 06      call printn
0231   05AA 51 02 00      add sp, 2
0232   05AD 26 83 06      mov b, __string_0 ; "\n"
0233   05B0 FD AB         swp b
0234   05B2 D8            push b
0235   05B3 07 6E 06      call print
0236   05B6 51 02 00      add sp, 2
0237   05B9 26 0A 00      mov b, 10
0238   05BC D7            push a
0239   05BD 11            mov a, b
0240   05BE 26 01 00      mov b, 1
0241   05C1 B0            cmp a, b
0242   05C2 0E            lodflgs
0243   05C3 87 03         and al, %00000011
0244   05C5 8F 02         xor al, %00000010 ; >=
0245   05C7 B9 00         cmp al, 0
0246   05C9 0E            lodflgs
0247   05CA 8F 01         xor al, %00000001
0248   05CC 22 00         mov ah, 0
0249   05CE 27            mov b, a
0250   05CF E4            pop a
0251   05D0 FD AB         swp b
0252   05D2 D8            push b
0253   05D3 07 64 06      call printn
0254   05D6 51 02 00      add sp, 2
0255   05D9 26 83 06      mov b, __string_0 ; "\n"
0256   05DC FD AB         swp b
0257   05DE D8            push b
0258   05DF 07 6E 06      call print
0259   05E2 51 02 00      add sp, 2
0260   05E5 26 0A 00      mov b, 10
0261   05E8 D7            push a
0262   05E9 11            mov a, b
0263   05EA 26 0A 00      mov b, 10
0264   05ED B0            cmp a, b
0265   05EE 0E            lodflgs
0266   05EF 87 03         and al, %00000011
0267   05F1 8F 02         xor al, %00000010 ; >=
0268   05F3 B9 00         cmp al, 0
0269   05F5 0E            lodflgs
0270   05F6 8F 01         xor al, %00000001
0271   05F8 22 00         mov ah, 0
0272   05FA 27            mov b, a
0273   05FB E4            pop a
0274   05FC FD AB         swp b
0275   05FE D8            push b
0276   05FF 07 64 06      call printn
0277   0602 51 02 00      add sp, 2
0278   0605 26 83 06      mov b, __string_0 ; "\n"
0279   0608 FD AB         swp b
0280   060A D8            push b
0281   060B 07 6E 06      call print
0282   060E 51 02 00      add sp, 2
0283   0611 26 01 00      mov b, 1
0284   0614 D7            push a
0285   0615 11            mov a, b
0286   0616 26 0A 00      mov b, 10
0287   0619 B0            cmp a, b
0288   061A 0E            lodflgs
0289   061B 87 03         and al, %00000011
0290   061D 8F 02         xor al, %00000010 ; >=
0291   061F B9 00         cmp al, 0
0292   0621 0E            lodflgs
0293   0622 8F 01         xor al, %00000001
0294   0624 22 00         mov ah, 0
0295   0626 27            mov b, a
0296   0627 E4            pop a
0297   0628 FD AB         swp b
0298   062A D8            push b
0299   062B 07 64 06      call printn
0300   062E 51 02 00      add sp, 2
0301   0631 26 83 06      mov b, __string_0 ; "\n"
0302   0634 FD AB         swp b
0303   0636 D8            push b
0304   0637 07 6E 06      call print
0305   063A 51 02 00      add sp, 2
0306   063D 26 85 06      mov b, __string_1 ; "HEllo"
0307   0640 FD AB         swp b
0308   0642 D8            push b
0309   0643 07 6E 06      call print
0310   0646 51 02 00      add sp, 2
0311   0649 F9            leave
0312   064A 05 0B         syscall sys_terminate_proc
0313   064C             
0314   064C             scann:
0315   064C D2            push bp
0316   064D 9B            mov bp, sp
0317   064E 52 02 00      sub sp, 2 ; m
0318   0651             
0319   0651             ; --- BEGIN INLINE ASM BLOCK
0320   0651 07 D5 09      call scan_u16d
0321   0654 45 FF FF      mov [bp + -1], a
0322   0657             ; --- END INLINE ASM BLOCK
0323   0657             
0324   0657 FA 05 00      lea d, [bp + 5] ; n
0325   065A 2A            mov b, [d]
0326   065B D8            push b
0327   065C 2C FF FF      mov b, [bp + -1] ; m
0328   065F E7            pop d
0329   0660 11            mov a, b
0330   0661 43            mov [d], a
0331   0662 F9            leave
0332   0663 09            ret
0333   0664             
0334   0664             printn:
0335   0664 D2            push bp
0336   0665 9B            mov bp, sp
0337   0666             
0338   0666             ; --- BEGIN INLINE ASM BLOCK
0339   0666 17 05 00      mov a, [bp + 5]
0340   0669 07 00 09      call print_u16d
0341   066C             ; --- END INLINE ASM BLOCK
0342   066C             
0343   066C F9            leave
0344   066D 09            ret
0345   066E             
0346   066E             print:
0347   066E D2            push bp
0348   066F 9B            mov bp, sp
0349   0670             
0350   0670             ; --- BEGIN INLINE ASM BLOCK
0351   0670 17 05 00      mov a, [bp + 5]
0352   0673 3C            mov d, a
0353   0674 07 D7 08      call puts
0354   0677             ; --- END INLINE ASM BLOCK
0355   0677             
0356   0677 F9            leave
0357   0678 09            ret
0358   0679             ; --- END TEXT BLOCK
0359   0679             
0360   0679             ; --- BEGIN DATA BLOCK
0361   0679 02 00       __j: .dw 2
0362   067B 48 65 6C 6C __s_data: .db "Hello", 0
0362   067F 6F 00 
0363   0681 7B 06       __s: .dw __s_data
0364   0683 0A 00       __string_0: .db "\n", 0
0365   0685 48 45 6C 6C __string_1: .db "HEllo", 0
0365   0689 6F 00 
0366   068B             ; --- END DATA BLOCK
0367   068B             
0368   068B             ; --- BEGIN INCLUDE BLOCK
0369   068B             .include "lib/stdio.asm"
0001+  068B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  068B             ; stdio.s
0003+  068B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  068B             .include "lib/string.asm"
0001++ 068B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 068B             ; string.s
0003++ 068B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 068B             
0005++ 068B             
0006++ 068B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 068B             ; strrev
0008++ 068B             ; reverse a string
0009++ 068B             ; D = string address
0010++ 068B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 068B             ; 01234
0012++ 068B             strrev:
0013++ 068B 4B          	pusha
0014++ 068C 07 D2 06    	call strlen	; length in C
0015++ 068F 12          	mov a, c
0016++ 0690 AF 01 00    	cmp a, 1
0017++ 0693 D0 AD 06    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0696 7D          	dec a
0019++ 0697 FD 4E       	mov si, d	; beginning of string
0020++ 0699 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 069B 59          	add d, a	; end of string
0022++ 069C 12          	mov a, c
0023++ 069D FD 9B       	shr a		; divide by 2
0024++ 069F 39          	mov c, a	; C now counts the steps
0025++ 06A0             strrev_L0:
0026++ 06A0 32          	mov bl, [d]	; save load right-side char into BL
0027++ 06A1 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 06A2 3E          	mov [d], al	; store left char into right side
0029++ 06A3 1B          	mov al, bl
0030++ 06A4 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 06A5 7E          	dec c
0032++ 06A6 7F          	dec d
0033++ 06A7 C2 00 00    	cmp c, 0
0034++ 06AA C7 A0 06    	jne strrev_L0
0035++ 06AD             strrev_end:
0036++ 06AD 4C          	popa
0037++ 06AE 09          	ret
0038++ 06AF             	
0039++ 06AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 06AF             ; strchr
0041++ 06AF             ; search string in D for char in AL
0042++ 06AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 06AF             strchr:
0044++ 06AF             strchr_L0:
0045++ 06AF 32          	mov bl, [d]
0046++ 06B0 C1 00       	cmp bl, 0
0047++ 06B2 C6 BD 06    	je strchr_end
0048++ 06B5 BA          	cmp al, bl
0049++ 06B6 C6 BD 06    	je strchr_end
0050++ 06B9 79          	inc d
0051++ 06BA 0A AF 06    	jmp strchr_L0
0052++ 06BD             strchr_end:
0053++ 06BD 1B          	mov al, bl
0054++ 06BE 09          	ret
0055++ 06BF             
0056++ 06BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 06BF             ; strstr
0058++ 06BF             ; find sub-string
0059++ 06BF             ; str1 in SI
0060++ 06BF             ; str2 in DI
0061++ 06BF             ; SI points to end of source string
0062++ 06BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 06BF             strstr:
0064++ 06BF DB          	push al
0065++ 06C0 DA          	push d
0066++ 06C1 E3          	push di
0067++ 06C2             strstr_loop:
0068++ 06C2 F3          	cmpsb					; compare a byte of the strings
0069++ 06C3 C7 CE 06    	jne strstr_ret
0070++ 06C6 FC 00 00    	lea d, [di + 0]
0071++ 06C9 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 06CB C7 C2 06    	jne strstr_loop				; equal chars but not at end
0073++ 06CE             strstr_ret:
0074++ 06CE F0          	pop di
0075++ 06CF E7          	pop d
0076++ 06D0 E8          	pop al
0077++ 06D1 09          	ret
0078++ 06D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 06D2             ; length of null terminated string
0080++ 06D2             ; result in C
0081++ 06D2             ; pointer in D
0082++ 06D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 06D2             strlen:
0084++ 06D2 DA          	push d
0085++ 06D3 38 00 00    	mov c, 0
0086++ 06D6             strlen_L1:
0087++ 06D6 BD 00       	cmp byte [d], 0
0088++ 06D8 C6 E0 06    	je strlen_ret
0089++ 06DB 79          	inc d
0090++ 06DC 78          	inc c
0091++ 06DD 0A D6 06    	jmp strlen_L1
0092++ 06E0             strlen_ret:
0093++ 06E0 E7          	pop d
0094++ 06E1 09          	ret
0095++ 06E2             
0096++ 06E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 06E2             ; STRCMP
0098++ 06E2             ; compare two strings
0099++ 06E2             ; str1 in SI
0100++ 06E2             ; str2 in DI
0101++ 06E2             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 06E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 06E2             strcmp:
0104++ 06E2 DB          	push al
0105++ 06E3 DA          	push d
0106++ 06E4 E3          	push di
0107++ 06E5 E2          	push si
0108++ 06E6             strcmp_loop:
0109++ 06E6 F3          	cmpsb					; compare a byte of the strings
0110++ 06E7 C7 F2 06    	jne strcmp_ret
0111++ 06EA FB FF FF    	lea d, [si +- 1]
0112++ 06ED BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 06EF C7 E6 06    	jne strcmp_loop				; equal chars but not at end
0114++ 06F2             strcmp_ret:
0115++ 06F2 EF          	pop si
0116++ 06F3 F0          	pop di
0117++ 06F4 E7          	pop d
0118++ 06F5 E8          	pop al
0119++ 06F6 09          	ret
0120++ 06F7             
0121++ 06F7             
0122++ 06F7             ; STRCPY
0123++ 06F7             ; copy null terminated string from SI to DI
0124++ 06F7             ; source in SI
0125++ 06F7             ; destination in DI
0126++ 06F7             strcpy:
0127++ 06F7 E2          	push si
0128++ 06F8 E3          	push di
0129++ 06F9 DB          	push al
0130++ 06FA             strcpy_L1:
0131++ 06FA F6          	lodsb
0132++ 06FB F7          	stosb
0133++ 06FC B9 00       	cmp al, 0
0134++ 06FE C7 FA 06    	jne strcpy_L1
0135++ 0701             strcpy_end:
0136++ 0701 E8          	pop al
0137++ 0702 F0          	pop di
0138++ 0703 EF          	pop si
0139++ 0704 09          	ret
0140++ 0705             
0141++ 0705             ; STRCAT
0142++ 0705             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0705             ; source in SI
0144++ 0705             ; destination in DI
0145++ 0705             strcat:
0146++ 0705 E2          	push si
0147++ 0706 E3          	push di
0148++ 0707 D7          	push a
0149++ 0708 DA          	push d
0150++ 0709 50          	mov a, di
0151++ 070A 3C          	mov d, a
0152++ 070B             strcat_goto_end_L1:
0153++ 070B BD 00       	cmp byte[d], 0
0154++ 070D C6 14 07    	je strcat_start
0155++ 0710 79          	inc d
0156++ 0711 0A 0B 07    	jmp strcat_goto_end_L1
0157++ 0714             strcat_start:
0158++ 0714 FD 50       	mov di, d
0159++ 0716             strcat_L1:
0160++ 0716 F6          	lodsb
0161++ 0717 F7          	stosb
0162++ 0718 B9 00       	cmp al, 0
0163++ 071A C7 16 07    	jne strcat_L1
0164++ 071D             strcat_end:
0165++ 071D E7          	pop d
0166++ 071E E4          	pop a
0167++ 071F F0          	pop di
0168++ 0720 EF          	pop si
0169++ 0721 09          	ret
0005+  0722             
0006+  0722 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0726 34 35 36 37 
0006+  072A 38 39 41 42 
0006+  072E 43 44 45 46 
0007+  0732 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0736 1B 5B 48 00 
0008+  073A             
0009+  073A 01 00       table_power:.dw 1
0010+  073C 0A 00       			.dw 10
0011+  073E 64 00       			.dw 100
0012+  0740 E8 03       			.dw 1000
0013+  0742 10 27       			.dw 10000
0014+  0744             
0015+  0744             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0744             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0744             ; ASCII in BL
0018+  0744             ; result in AL
0019+  0744             ; ascii for F = 0100 0110
0020+  0744             ; ascii for 9 = 0011 1001
0021+  0744             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0744             hex_ascii_encode:
0023+  0744 1B          	mov al, bl
0024+  0745 93 40       	test al, $40				; test if letter or number
0025+  0747 C7 4D 07    	jnz hex_letter
0026+  074A 87 0F       	and al, $0F				; get number
0027+  074C 09          	ret
0028+  074D             hex_letter:
0029+  074D 87 0F       	and al, $0F				; get letter
0030+  074F 6A 09       	add al, 9
0031+  0751 09          	ret
0032+  0752             
0033+  0752             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0752             ; ATOI
0035+  0752             ; 2 letter hex string in B
0036+  0752             ; 8bit integer returned in AL
0037+  0752             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0752             atoi:
0039+  0752 D8          	push b
0040+  0753 07 44 07    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0756 30          	mov bl, bh
0042+  0757 DB          	push al					; save a
0043+  0758 07 44 07    	call hex_ascii_encode
0044+  075B EA          	pop bl	
0045+  075C FD 9E 04    	shl al, 4
0046+  075F 8C          	or al, bl
0047+  0760 E5          	pop b
0048+  0761 09          	ret	
0049+  0762             
0050+  0762             
0051+  0762             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0762             ; printf
0053+  0762             ; no need for explanations!
0054+  0762             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0762             printf:
0056+  0762 09          	ret
0057+  0763             
0058+  0763             
0059+  0763             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0763             ; scanf
0061+  0763             ; no need for explanations!
0062+  0763             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0763             scanf:
0064+  0763 09          	ret
0065+  0764             
0066+  0764             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0764             ; ITOA
0068+  0764             ; 8bit value in BL
0069+  0764             ; 2 byte ASCII result in A
0070+  0764             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0764             itoa:
0072+  0764 DA          	push d
0073+  0765 D8          	push b
0074+  0766 A7 00       	mov bh, 0
0075+  0768 FD A4 04    	shr bl, 4	
0076+  076B 74          	mov d, b
0077+  076C 1F 22 07    	mov al, [d + s_hex_digits]
0078+  076F 23          	mov ah, al
0079+  0770             	
0080+  0770 E5          	pop b
0081+  0771 D8          	push b
0082+  0772 A7 00       	mov bh, 0
0083+  0774 FD 87 0F    	and bl, $0F
0084+  0777 74          	mov d, b
0085+  0778 1F 22 07    	mov al, [d + s_hex_digits]
0086+  077B E5          	pop b
0087+  077C E7          	pop d
0088+  077D 09          	ret
0089+  077E             
0090+  077E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  077E             ; HEX STRING TO BINARY
0092+  077E             ; di = destination address
0093+  077E             ; si = source
0094+  077E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  077E             hex_to_int:
0096+  077E             hex_to_int_L1:
0097+  077E F6          	lodsb					; load from [SI] to AL
0098+  077F B9 00       	cmp al, 0				; check if ASCII 0
0099+  0781 C6 8E 07    	jz hex_to_int_ret
0100+  0784 36          	mov bh, al
0101+  0785 F6          	lodsb
0102+  0786 2F          	mov bl, al
0103+  0787 07 52 07    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  078A F7          	stosb					; store AL to [DI]
0105+  078B 0A 7E 07    	jmp hex_to_int_L1
0106+  078E             hex_to_int_ret:
0107+  078E 09          	ret		
0108+  078F             
0109+  078F             
0110+  078F             
0111+  078F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  078F             ; GETCHAR
0113+  078F             ; char in ah
0114+  078F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  078F             getchar:
0116+  078F DB          	push al
0117+  0790             getchar_retry:
0118+  0790 FD 0C       	sti
0119+  0792 19 01       	mov al, 1
0120+  0794 05 03       	syscall sys_io			; receive in AH
0121+  0796 B9 00       	cmp al, 0			; check if any char was receive
0122+  0798 C6 90 07    	je getchar_retry
0123+  079B E8          	pop al
0124+  079C 09          	ret
0125+  079D             
0126+  079D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  079D             ; PUTCHAR
0128+  079D             ; char in ah
0129+  079D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  079D             putchar:
0131+  079D D7          	push a
0132+  079E 19 00       	mov al, 0
0133+  07A0 05 03       	syscall sys_io			; char in AH
0134+  07A2 E4          	pop a
0135+  07A3 09          	ret
0136+  07A4             
0137+  07A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  07A4             ;; INPUT A STRING
0139+  07A4             ;; terminates with null
0140+  07A4             ;; pointer in D
0141+  07A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  07A4             gets:
0143+  07A4 D7          	push a
0144+  07A5 DA          	push d
0145+  07A6             gets_loop:
0146+  07A6 FD 0C       	sti
0147+  07A8 19 01       	mov al, 1
0148+  07AA 05 03       	syscall sys_io			; receive in AH
0149+  07AC B9 00       	cmp al, 0				; check error code (AL)
0150+  07AE C6 A6 07    	je gets_loop			; if no char received, retry
0151+  07B1             
0152+  07B1 76 1B       	cmp ah, 27
0153+  07B3 C6 D4 07    	je gets_telnet_escape
0154+  07B6 76 0A       	cmp ah, $0A				; LF
0155+  07B8 C6 2D 08    	je gets_end
0156+  07BB 76 0D       	cmp ah, $0D				; CR
0157+  07BD C6 2D 08    	je gets_end
0158+  07C0 76 5C       	cmp ah, $5C				; '\\'
0159+  07C2 C6 04 08    	je gets_escape
0160+  07C5             	
0161+  07C5 76 08       	cmp ah, $08			; check for backspace
0162+  07C7 C6 D0 07    	je gets_backspace
0163+  07CA             
0164+  07CA 1A          	mov al, ah
0165+  07CB 3E          	mov [d], al
0166+  07CC 79          	inc d
0167+  07CD 0A A6 07    	jmp gets_loop
0168+  07D0             gets_backspace:
0169+  07D0 7F          	dec d
0170+  07D1 0A A6 07    	jmp gets_loop
0171+  07D4             gets_telnet_escape:
0172+  07D4 FD 0C       	sti
0173+  07D6 19 01       	mov al, 1
0174+  07D8 05 03       	syscall sys_io				; receive in AH without echo
0175+  07DA B9 00       	cmp al, 0					; check error code (AL)
0176+  07DC C6 D4 07    	je gets_telnet_escape		; if no char received, retry
0177+  07DF 76 5B       	cmp ah, '['
0178+  07E1 C7 A6 07    	jne gets_loop
0179+  07E4             gets_telnet_escape_phase2:
0180+  07E4 FD 0C       	sti
0181+  07E6 19 01       	mov al, 1
0182+  07E8 05 03       	syscall sys_io					; receive in AH without echo
0183+  07EA B9 00       	cmp al, 0						; check error code (AL)
0184+  07EC C6 E4 07    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  07EF 76 44       	cmp ah, 'D'
0186+  07F1 C6 FC 07    	je gets_left_arrow
0187+  07F4 76 43       	cmp ah, 'C'
0188+  07F6 C6 00 08    	je gets_right_arrow
0189+  07F9 0A A6 07    	jmp gets_loop
0190+  07FC             gets_left_arrow:
0191+  07FC 7F          	dec d
0192+  07FD 0A A6 07    	jmp gets_loop
0193+  0800             gets_right_arrow:
0194+  0800 79          	inc d
0195+  0801 0A A6 07    	jmp gets_loop
0196+  0804             gets_escape:
0197+  0804 FD 0C       	sti
0198+  0806 19 01       	mov al, 1
0199+  0808 05 03       	syscall sys_io			; receive in AH
0200+  080A B9 00       	cmp al, 0				; check error code (AL)
0201+  080C C6 04 08    	je gets_escape			; if no char received, retry
0202+  080F 76 6E       	cmp ah, 'n'
0203+  0811 C6 1F 08    	je gets_LF
0204+  0814 76 72       	cmp ah, 'r'
0205+  0816 C6 26 08    	je gets_CR
0206+  0819 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  081A 3E          	mov [d], al
0208+  081B 79          	inc d
0209+  081C 0A A6 07    	jmp gets_loop
0210+  081F             gets_LF:
0211+  081F 19 0A       	mov al, $0A
0212+  0821 3E          	mov [d], al
0213+  0822 79          	inc d
0214+  0823 0A A6 07    	jmp gets_loop
0215+  0826             gets_CR:
0216+  0826 19 0D       	mov al, $0D
0217+  0828 3E          	mov [d], al
0218+  0829 79          	inc d
0219+  082A 0A A6 07    	jmp gets_loop
0220+  082D             gets_end:
0221+  082D 19 00       	mov al, 0
0222+  082F 3E          	mov [d], al				; terminate string
0223+  0830 E7          	pop d
0224+  0831 E4          	pop a
0225+  0832 09          	ret
0226+  0833             
0227+  0833             
0228+  0833             
0229+  0833             
0230+  0833             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0833             ;; INPUT TEXT
0232+  0833             ;; terminated with CTRL+D
0233+  0833             ;; pointer in D
0234+  0833             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0833             gettxt:
0236+  0833 D7          	push a
0237+  0834 DA          	push d
0238+  0835             gettxt_loop:
0239+  0835 19 01       	mov al, 1
0240+  0837 05 03       	syscall sys_io			; receive in AH
0241+  0839 B9 00       	cmp al, 0				; check error code (AL)
0242+  083B C6 35 08    	je gettxt_loop		; if no char received, retry
0243+  083E 76 04       	cmp ah, 4			; EOT
0244+  0840 C6 7E 08    	je gettxt_end
0245+  0843 76 08       	cmp ah, $08			; check for backspace
0246+  0845 C6 7A 08    	je gettxt_backspace
0247+  0848 76 5C       	cmp ah, $5C				; '\\'
0248+  084A C6 53 08    	je gettxt_escape
0249+  084D 1A          	mov al, ah
0250+  084E 3E          	mov [d], al
0251+  084F 79          	inc d
0252+  0850 0A 35 08    	jmp gettxt_loop
0253+  0853             gettxt_escape:
0254+  0853 19 01       	mov al, 1
0255+  0855 05 03       	syscall sys_io			; receive in AH
0256+  0857 B9 00       	cmp al, 0				; check error code (AL)
0257+  0859 C6 53 08    	je gettxt_escape		; if no char received, retry
0258+  085C 76 6E       	cmp ah, 'n'
0259+  085E C6 6C 08    	je gettxt_LF
0260+  0861 76 72       	cmp ah, 'r'
0261+  0863 C6 73 08    	je gettxt_CR
0262+  0866 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0867 3E          	mov [d], al
0264+  0868 79          	inc d
0265+  0869 0A 35 08    	jmp gettxt_loop
0266+  086C             gettxt_LF:
0267+  086C 19 0A       	mov al, $0A
0268+  086E 3E          	mov [d], al
0269+  086F 79          	inc d
0270+  0870 0A 35 08    	jmp gettxt_loop
0271+  0873             gettxt_CR:
0272+  0873 19 0D       	mov al, $0D
0273+  0875 3E          	mov [d], al
0274+  0876 79          	inc d
0275+  0877 0A 35 08    	jmp gettxt_loop
0276+  087A             gettxt_backspace:
0277+  087A 7F          	dec d
0278+  087B 0A 35 08    	jmp gettxt_loop
0279+  087E             gettxt_end:
0280+  087E 19 00       	mov al, 0
0281+  0880 3E          	mov [d], al				; terminate string
0282+  0881 E7          	pop d
0283+  0882 E4          	pop a
0284+  0883 09          	ret
0285+  0884             
0286+  0884             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0884             ; PRINT NEW LINE
0288+  0884             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0884             printnl:
0290+  0884 D7          	push a
0291+  0885 10 00 0A    	mov a, $0A00
0292+  0888 05 03       	syscall sys_io
0293+  088A 10 00 0D    	mov a, $0D00
0294+  088D 05 03       	syscall sys_io
0295+  088F E4          	pop a
0296+  0890 09          	ret
0297+  0891             
0298+  0891             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0891             ; strtoint
0300+  0891             ; 4 digit hex string number in d
0301+  0891             ; integer returned in A
0302+  0891             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0891             strtointx:
0304+  0891 D8          	push b
0305+  0892 32          	mov bl, [d]
0306+  0893 37          	mov bh, bl
0307+  0894 33 01 00    	mov bl, [d + 1]
0308+  0897 07 52 07    	call atoi				; convert to int in AL
0309+  089A 23          	mov ah, al				; move to AH
0310+  089B 33 02 00    	mov bl, [d + 2]
0311+  089E 37          	mov bh, bl
0312+  089F 33 03 00    	mov bl, [d + 3]
0313+  08A2 07 52 07    	call atoi				; convert to int in AL
0314+  08A5 E5          	pop b
0315+  08A6 09          	ret
0316+  08A7             
0317+  08A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  08A7             ; strtoint
0319+  08A7             ; 5 digit base10 string number in d
0320+  08A7             ; integer returned in A
0321+  08A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  08A7             strtoint:
0323+  08A7 E2          	push si
0324+  08A8 D8          	push b
0325+  08A9 D9          	push c
0326+  08AA DA          	push d
0327+  08AB 07 D2 06    	call strlen			; get string length in C
0328+  08AE 7E          	dec c
0329+  08AF FD 4E       	mov si, d
0330+  08B1 12          	mov a, c
0331+  08B2 FD 99       	shl a
0332+  08B4 3B 3A 07    	mov d, table_power
0333+  08B7 59          	add d, a
0334+  08B8 38 00 00    	mov c, 0
0335+  08BB             strtoint_L0:
0336+  08BB F6          	lodsb			; load ASCII to al
0337+  08BC B9 00       	cmp al, 0
0338+  08BE C6 D1 08    	je strtoint_end
0339+  08C1 6F 30       	sub al, $30		; make into integer
0340+  08C3 22 00       	mov ah, 0
0341+  08C5 2A          	mov b, [d]
0342+  08C6 AC          	mul a, b			; result in B since it fits in 16bits
0343+  08C7 11          	mov a, b
0344+  08C8 28          	mov b, c
0345+  08C9 54          	add a, b
0346+  08CA 39          	mov c, a
0347+  08CB 63 02 00    	sub d, 2
0348+  08CE 0A BB 08    	jmp strtoint_L0
0349+  08D1             strtoint_end:
0350+  08D1 12          	mov a, c
0351+  08D2 E7          	pop d
0352+  08D3 E6          	pop c
0353+  08D4 E5          	pop b
0354+  08D5 EF          	pop si
0355+  08D6 09          	ret
0356+  08D7             
0357+  08D7             
0358+  08D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  08D7             ; PRINT NULL TERMINATED STRING
0360+  08D7             ; pointer in D
0361+  08D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  08D7             puts:
0363+  08D7 D7          	push a
0364+  08D8 DA          	push d
0365+  08D9             puts_L1:
0366+  08D9 1E          	mov al, [d]
0367+  08DA B9 00       	cmp al, 0
0368+  08DC C6 E8 08    	jz puts_END
0369+  08DF 23          	mov ah, al
0370+  08E0 19 00       	mov al, 0
0371+  08E2 05 03       	syscall sys_io
0372+  08E4 79          	inc d
0373+  08E5 0A D9 08    	jmp puts_L1
0374+  08E8             puts_END:
0375+  08E8 E7          	pop d
0376+  08E9 E4          	pop a
0377+  08EA 09          	ret
0378+  08EB             
0379+  08EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  08EB             ; PRINT N SIZE STRING
0381+  08EB             ; pointer in D
0382+  08EB             ; size in C
0383+  08EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  08EB             putsn:
0385+  08EB DB          	push al
0386+  08EC DA          	push d
0387+  08ED D9          	push c
0388+  08EE             putsn_L0:
0389+  08EE 1E          	mov al, [d]
0390+  08EF 23          	mov ah, al
0391+  08F0 19 00       	mov al, 0
0392+  08F2 05 03       	syscall sys_io
0393+  08F4 79          	inc d
0394+  08F5 7E          	dec c	
0395+  08F6 C2 00 00    	cmp c, 0
0396+  08F9 C7 EE 08    	jne putsn_L0
0397+  08FC             putsn_end:
0398+  08FC E6          	pop c
0399+  08FD E7          	pop d
0400+  08FE E8          	pop al
0401+  08FF 09          	ret
0402+  0900             
0403+  0900             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0900             ; print 16bit decimal number
0405+  0900             ; input number in A
0406+  0900             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0900             print_u16d:
0408+  0900 D7          	push a
0409+  0901 D8          	push b
0410+  0902 26 10 27    	mov b, 10000
0411+  0905 AE          	div a, b			; get 10000 coeff.
0412+  0906 07 2C 09    	call print_number
0413+  0909 11          	mov a, b
0414+  090A 26 E8 03    	mov b, 1000
0415+  090D AE          	div a, b			; get 10000 coeff.
0416+  090E 07 2C 09    	call print_number
0417+  0911 11          	mov a, b
0418+  0912 26 64 00    	mov b, 100
0419+  0915 AE          	div a, b
0420+  0916 07 2C 09    	call print_number
0421+  0919 11          	mov a, b
0422+  091A 26 0A 00    	mov b, 10
0423+  091D AE          	div a, b
0424+  091E 07 2C 09    	call print_number
0425+  0921 11          	mov a, b
0426+  0922 6A 30       	add al, $30
0427+  0924 23          	mov ah, al
0428+  0925 19 00       	mov al, 0
0429+  0927 05 03       	syscall sys_io	; print coeff
0430+  0929 E5          	pop b
0431+  092A E4          	pop a
0432+  092B 09          	ret
0433+  092C             
0434+  092C             
0435+  092C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  092C             ; if A == 0, print space
0437+  092C             ; else print A
0438+  092C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  092C             print_number:
0440+  092C 6A 30       	add al, $30
0441+  092E 23          	mov ah, al
0442+  092F 07 9D 07    	call putchar
0443+  0932 09          	ret
0444+  0933             
0445+  0933             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0933             ; PRINT 16BIT HEX INTEGER
0447+  0933             ; integer value in reg B
0448+  0933             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0933             print_u16x:
0450+  0933 D7          	push a
0451+  0934 D8          	push b
0452+  0935 DD          	push bl
0453+  0936 30          	mov bl, bh
0454+  0937 07 64 07    	call itoa				; convert bh to char in A
0455+  093A 2F          	mov bl, al				; save al
0456+  093B 19 00       	mov al, 0
0457+  093D 05 03       	syscall sys_io				; display AH
0458+  093F 24          	mov ah, bl				; retrieve al
0459+  0940 19 00       	mov al, 0
0460+  0942 05 03       	syscall sys_io				; display AL
0461+  0944             
0462+  0944 EA          	pop bl
0463+  0945 07 64 07    	call itoa				; convert bh to char in A
0464+  0948 2F          	mov bl, al				; save al
0465+  0949 19 00       	mov al, 0
0466+  094B 05 03       	syscall sys_io				; display AH
0467+  094D 24          	mov ah, bl				; retrieve al
0468+  094E 19 00       	mov al, 0
0469+  0950 05 03       	syscall sys_io				; display AL
0470+  0952             
0471+  0952 E5          	pop b
0472+  0953 E4          	pop a
0473+  0954 09          	ret
0474+  0955             
0475+  0955             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0955             ; INPUT 16BIT HEX INTEGER
0477+  0955             ; read 16bit integer into A
0478+  0955             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0955             scan_u16x:
0480+  0955 F8 10 00    	enter 16
0481+  0958 D8          	push b
0482+  0959 DA          	push d
0483+  095A             
0484+  095A FA F1 FF    	lea d, [bp + -15]
0485+  095D 07 A4 07    	call gets				; get number
0486+  0960             
0487+  0960 32          	mov bl, [d]
0488+  0961 37          	mov bh, bl
0489+  0962 33 01 00    	mov bl, [d + 1]
0490+  0965 07 52 07    	call atoi				; convert to int in AL
0491+  0968 23          	mov ah, al				; move to AH
0492+  0969             
0493+  0969 33 02 00    	mov bl, [d + 2]
0494+  096C 37          	mov bh, bl
0495+  096D 33 03 00    	mov bl, [d + 3]
0496+  0970 07 52 07    	call atoi				; convert to int in AL
0497+  0973             
0498+  0973 E7          	pop d
0499+  0974 E5          	pop b
0500+  0975 F9          	leave
0501+  0976 09          	ret
0502+  0977             
0503+  0977             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0977             ; PRINT 8bit HEX INTEGER
0505+  0977             ; integer value in reg bl
0506+  0977             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0977             print_u8x:
0508+  0977 D7          	push a
0509+  0978 DD          	push bl
0510+  0979             
0511+  0979 07 64 07    	call itoa				; convert bl to char in A
0512+  097C 2F          	mov bl, al				; save al
0513+  097D 19 00       	mov al, 0
0514+  097F 05 03       	syscall sys_io				; display AH
0515+  0981 24          	mov ah, bl				; retrieve al
0516+  0982 19 00       	mov al, 0
0517+  0984 05 03       	syscall sys_io				; display AL
0518+  0986             
0519+  0986 EA          	pop bl
0520+  0987 E4          	pop a
0521+  0988 09          	ret
0522+  0989             
0523+  0989             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0989             ; print 8bit decimal unsigned number
0525+  0989             ; input number in AL
0526+  0989             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0989             print_u8d:
0528+  0989 D7          	push a
0529+  098A D8          	push b
0530+  098B             
0531+  098B 22 00       	mov ah, 0
0532+  098D 26 64 00    	mov b, 100
0533+  0990 AE          	div a, b
0534+  0991 D8          	push b			; save remainder
0535+  0992 B9 00       	cmp al, 0
0536+  0994 C6 9E 09    	je skip100
0537+  0997 6A 30       	add al, $30
0538+  0999 23          	mov ah, al
0539+  099A 19 00       	mov al, 0
0540+  099C 05 03       	syscall sys_io	; print coeff
0541+  099E             skip100:
0542+  099E E4          	pop a
0543+  099F 22 00       	mov ah, 0
0544+  09A1 26 0A 00    	mov b, 10
0545+  09A4 AE          	div a, b
0546+  09A5 D8          	push b			; save remainder
0547+  09A6 B9 00       	cmp al, 0
0548+  09A8 C6 B2 09    	je skip10
0549+  09AB 6A 30       	add al, $30
0550+  09AD 23          	mov ah, al
0551+  09AE 19 00       	mov al, 0
0552+  09B0 05 03       	syscall sys_io	; print coeff
0553+  09B2             skip10:
0554+  09B2 E4          	pop a
0555+  09B3 1B          	mov al, bl
0556+  09B4 6A 30       	add al, $30
0557+  09B6 23          	mov ah, al
0558+  09B7 19 00       	mov al, 0
0559+  09B9 05 03       	syscall sys_io	; print coeff
0560+  09BB E5          	pop b
0561+  09BC E4          	pop a
0562+  09BD 09          	ret
0563+  09BE             
0564+  09BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  09BE             ; INPUT 8BIT HEX INTEGER
0566+  09BE             ; read 8bit integer into AL
0567+  09BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  09BE             scan_u8x:
0569+  09BE F8 04 00    	enter 4
0570+  09C1 D8          	push b
0571+  09C2 DA          	push d
0572+  09C3             
0573+  09C3 FA FD FF    	lea d, [bp + -3]
0574+  09C6 07 A4 07    	call gets				; get number
0575+  09C9             
0576+  09C9 32          	mov bl, [d]
0577+  09CA 37          	mov bh, bl
0578+  09CB 33 01 00    	mov bl, [d + 1]
0579+  09CE 07 52 07    	call atoi				; convert to int in AL
0580+  09D1             
0581+  09D1 E7          	pop d
0582+  09D2 E5          	pop b
0583+  09D3 F9          	leave
0584+  09D4 09          	ret
0585+  09D5             
0586+  09D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  09D5             ; input decimal number
0588+  09D5             ; result in A
0589+  09D5             ; 655'\0'
0590+  09D5             ; low--------high
0591+  09D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  09D5             scan_u16d:
0593+  09D5 F8 08 00    	enter 8
0594+  09D8 E2          	push si
0595+  09D9 D8          	push b
0596+  09DA D9          	push c
0597+  09DB DA          	push d
0598+  09DC FA F9 FF    	lea d, [bp +- 7]
0599+  09DF 07 A4 07    	call gets
0600+  09E2 07 D2 06    	call strlen			; get string length in C
0601+  09E5 7E          	dec c
0602+  09E6 FD 4E       	mov si, d
0603+  09E8 12          	mov a, c
0604+  09E9 FD 99       	shl a
0605+  09EB 3B 3A 07    	mov d, table_power
0606+  09EE 59          	add d, a
0607+  09EF 38 00 00    	mov c, 0
0608+  09F2             mul_loop:
0609+  09F2 F6          	lodsb			; load ASCII to al
0610+  09F3 B9 00       	cmp al, 0
0611+  09F5 C6 08 0A    	je mul_exit
0612+  09F8 6F 30       	sub al, $30		; make into integer
0613+  09FA 22 00       	mov ah, 0
0614+  09FC 2A          	mov b, [d]
0615+  09FD AC          	mul a, b			; result in B since it fits in 16bits
0616+  09FE 11          	mov a, b
0617+  09FF 28          	mov b, c
0618+  0A00 54          	add a, b
0619+  0A01 39          	mov c, a
0620+  0A02 63 02 00    	sub d, 2
0621+  0A05 0A F2 09    	jmp mul_loop
0622+  0A08             mul_exit:
0623+  0A08 12          	mov a, c
0624+  0A09 E7          	pop d
0625+  0A0A E6          	pop c
0626+  0A0B E5          	pop b
0627+  0A0C EF          	pop si
0628+  0A0D F9          	leave
0629+  0A0E 09          	ret
0370   0A0F             ; --- END INCLUDE BLOCK
0371   0A0F             
0372   0A0F             
0373   0A0F             .end
tasm: Number of errors = 0
