0001   0000             ; --- Filename: clock.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- begin text block
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 07 08 04      call gen_clk
0010   0405 F9            leave
0011   0406 05 0B         syscall sys_terminate_proc
0012   0408             gen_clk:
0013   0408 D2            push bp
0014   0409 9B            mov bp, sp
0015   040A 52 02 00      sub sp, 2 ; clk
0016   040D 52 02 00      sub sp, 2 ; count
0017   0410 26 00 00      mov b, 0
0018   0413 D7            push a
0019   0414 11            mov a, b
0020   0415 45 FF FF      mov [bp + -1], a ; clk
0021   0418 E4            pop a
0022   0419             _for1_init:
0023   0419 26 00 00      mov b, 0
0024   041C D7            push a
0025   041D 11            mov a, b
0026   041E 45 FD FF      mov [bp + -3], a ; count
0027   0421 E4            pop a
0028   0422             _for1_cond:
0029   0422 2C FD FF      mov b, [bp + -3] ; count
0030   0425 D7            push a
0031   0426 11            mov a, b
0032   0427 26 14 00      mov b, 20
0033   042A B0            cmp a, b
0034   042B 0E            lodflgs
0035   042C 87 02         and al, %00000010
0036   042E 22 00         mov ah, 0
0037   0430 27            mov b, a
0038   0431 E4            pop a
0039   0432 C0 00 00      cmp b, 0
0040   0435 C6 7D 04      je _for1_exit
0041   0438             _for1_block:
0042   0438             _if2_cond:
0043   0438 2C FF FF      mov b, [bp + -1] ; clk
0044   043B D7            push a
0045   043C 11            mov a, b
0046   043D 26 00 00      mov b, 0
0047   0440 B0            cmp a, b
0048   0441 0E            lodflgs
0049   0442 87 01         and al, %00000001
0050   0444 22 00         mov ah, 0
0051   0446 27            mov b, a
0052   0447 E4            pop a
0053   0448 C0 00 00      cmp b, 0
0054   044B C6 5A 04      je _if2_else
0055   044E             _if2_true:
0056   044E 26 01 00      mov b, 1
0057   0451 D7            push a
0058   0452 11            mov a, b
0059   0453 45 FF FF      mov [bp + -1], a ; clk
0060   0456 E4            pop a
0061   0457 0A 63 04      jmp _if2_exit
0062   045A             _if2_else:
0063   045A 26 00 00      mov b, 0
0064   045D D7            push a
0065   045E 11            mov a, b
0066   045F 45 FF FF      mov [bp + -1], a ; clk
0067   0462 E4            pop a
0068   0463             _if2_exit:
0069   0463 2C FF FF      mov b, [bp + -1] ; clk
0070   0466 FD AB         swp b
0071   0468 D8            push b
0072   0469 07 7F 04      call print
0073   046C 51 02 00      add sp, 2
0074   046F             _for1_update:
0075   046F 2C FD FF      mov b, [bp + -3] ; count
0076   0472 FD 77         inc b
0077   0474 D7            push a
0078   0475 11            mov a, b
0079   0476 45 FD FF      mov [bp + -3], a ; count
0080   0479 E4            pop a
0081   047A 0A 22 04      jmp _for1_cond
0082   047D             _for1_exit:
0083   047D F9            leave
0084   047E 09            ret
0085   047F             print:
0086   047F D2            push bp
0087   0480 9B            mov bp, sp
0088   0481             ; --- begin inline asm block
0089   0481 17 05 00        mov a, [bp + 5]
0090   0484 07 FB 06        call print_u16d
0091   0487 22 0A           mov ah, $0A
0092   0489 07 98 05        call putchar
0093   048C               ; --- end inline asm block
0094   048C F9            leave
0095   048D 09            ret
0096   048E             ; --- end text block
0097   048E             
0098   048E             ; --- begin data block
0099   048E             ; --- end data block
0100   048E             ; --- begin include block
0101   048E             .include "lib/stdio.asm"
0001+  048E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  048E             ; stdio.s
0003+  048E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  048E             .include "lib/string.asm"
0001++ 048E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 048E             ; string.s
0003++ 048E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 048E             
0005++ 048E             
0006++ 048E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 048E             ; strrev
0008++ 048E             ; reverse a string
0009++ 048E             ; D = string address
0010++ 048E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 048E             ; 01234
0012++ 048E             strrev:
0013++ 048E 4B          	pusha
0014++ 048F 07 D5 04    	call strlen	; length in C
0015++ 0492 12          	mov a, c
0016++ 0493 AF 01 00    	cmp a, 1
0017++ 0496 D0 B0 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0499 7D          	dec a
0019++ 049A FD 4E       	mov si, d	; beginning of string
0020++ 049C FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 049E 59          	add d, a	; end of string
0022++ 049F 12          	mov a, c
0023++ 04A0 FD 9B       	shr a		; divide by 2
0024++ 04A2 39          	mov c, a	; C now counts the steps
0025++ 04A3             strrev_L0:
0026++ 04A3 32          	mov bl, [d]	; save load right-side char into BL
0027++ 04A4 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 04A5 3E          	mov [d], al	; store left char into right side
0029++ 04A6 1B          	mov al, bl
0030++ 04A7 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 04A8 7E          	dec c
0032++ 04A9 7F          	dec d
0033++ 04AA C2 00 00    	cmp c, 0
0034++ 04AD C7 A3 04    	jne strrev_L0
0035++ 04B0             strrev_end:
0036++ 04B0 4C          	popa
0037++ 04B1 09          	ret
0038++ 04B2             	
0039++ 04B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 04B2             ; strchr
0041++ 04B2             ; search string in D for char in AL
0042++ 04B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 04B2             strchr:
0044++ 04B2             strchr_L0:
0045++ 04B2 32          	mov bl, [d]
0046++ 04B3 C1 00       	cmp bl, 0
0047++ 04B5 C6 C0 04    	je strchr_end
0048++ 04B8 BA          	cmp al, bl
0049++ 04B9 C6 C0 04    	je strchr_end
0050++ 04BC 79          	inc d
0051++ 04BD 0A B2 04    	jmp strchr_L0
0052++ 04C0             strchr_end:
0053++ 04C0 1B          	mov al, bl
0054++ 04C1 09          	ret
0055++ 04C2             
0056++ 04C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 04C2             ; strstr
0058++ 04C2             ; find sub-string
0059++ 04C2             ; str1 in SI
0060++ 04C2             ; str2 in DI
0061++ 04C2             ; SI points to end of source string
0062++ 04C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 04C2             strstr:
0064++ 04C2 DB          	push al
0065++ 04C3 DA          	push d
0066++ 04C4 E3          	push di
0067++ 04C5             strstr_loop:
0068++ 04C5 F3          	cmpsb					; compare a byte of the strings
0069++ 04C6 C7 D1 04    	jne strstr_ret
0070++ 04C9 FC 00 00    	lea d, [di + 0]
0071++ 04CC BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 04CE C7 C5 04    	jne strstr_loop				; equal chars but not at end
0073++ 04D1             strstr_ret:
0074++ 04D1 F0          	pop di
0075++ 04D2 E7          	pop d
0076++ 04D3 E8          	pop al
0077++ 04D4 09          	ret
0078++ 04D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 04D5             ; length of null terminated string
0080++ 04D5             ; result in C
0081++ 04D5             ; pointer in D
0082++ 04D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 04D5             strlen:
0084++ 04D5 DA          	push d
0085++ 04D6 38 00 00    	mov c, 0
0086++ 04D9             strlen_L1:
0087++ 04D9 BD 00       	cmp byte [d], 0
0088++ 04DB C6 E3 04    	je strlen_ret
0089++ 04DE 79          	inc d
0090++ 04DF 78          	inc c
0091++ 04E0 0A D9 04    	jmp strlen_L1
0092++ 04E3             strlen_ret:
0093++ 04E3 E7          	pop d
0094++ 04E4 09          	ret
0095++ 04E5             
0096++ 04E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04E5             ; STRCMP
0098++ 04E5             ; compare two strings
0099++ 04E5             ; str1 in SI
0100++ 04E5             ; str2 in DI
0101++ 04E5             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04E5             strcmp:
0104++ 04E5 DB          	push al
0105++ 04E6 DA          	push d
0106++ 04E7 E3          	push di
0107++ 04E8 E2          	push si
0108++ 04E9             strcmp_loop:
0109++ 04E9 F3          	cmpsb					; compare a byte of the strings
0110++ 04EA C7 F5 04    	jne strcmp_ret
0111++ 04ED FB FF FF    	lea d, [si +- 1]
0112++ 04F0 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04F2 C7 E9 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04F5             strcmp_ret:
0115++ 04F5 EF          	pop si
0116++ 04F6 F0          	pop di
0117++ 04F7 E7          	pop d
0118++ 04F8 E8          	pop al
0119++ 04F9 09          	ret
0120++ 04FA             
0121++ 04FA             
0122++ 04FA             ; STRCPY
0123++ 04FA             ; copy null terminated string from SI to DI
0124++ 04FA             ; source in SI
0125++ 04FA             ; destination in DI
0126++ 04FA             strcpy:
0127++ 04FA E2          	push si
0128++ 04FB E3          	push di
0129++ 04FC DB          	push al
0130++ 04FD             strcpy_L1:
0131++ 04FD F6          	lodsb
0132++ 04FE F7          	stosb
0133++ 04FF B9 00       	cmp al, 0
0134++ 0501 C7 FD 04    	jne strcpy_L1
0135++ 0504             strcpy_end:
0136++ 0504 E8          	pop al
0137++ 0505 F0          	pop di
0138++ 0506 EF          	pop si
0139++ 0507 09          	ret
0140++ 0508             
0141++ 0508             ; STRCAT
0142++ 0508             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0508             ; source in SI
0144++ 0508             ; destination in DI
0145++ 0508             strcat:
0146++ 0508 E2          	push si
0147++ 0509 E3          	push di
0148++ 050A D7          	push a
0149++ 050B DA          	push d
0150++ 050C 50          	mov a, di
0151++ 050D 3C          	mov d, a
0152++ 050E             strcat_goto_end_L1:
0153++ 050E BD 00       	cmp byte[d], 0
0154++ 0510 C6 17 05    	je strcat_start
0155++ 0513 79          	inc d
0156++ 0514 0A 0E 05    	jmp strcat_goto_end_L1
0157++ 0517             strcat_start:
0158++ 0517 FD 50       	mov di, d
0159++ 0519             strcat_L1:
0160++ 0519 F6          	lodsb
0161++ 051A F7          	stosb
0162++ 051B B9 00       	cmp al, 0
0163++ 051D C7 19 05    	jne strcat_L1
0164++ 0520             strcat_end:
0165++ 0520 E7          	pop d
0166++ 0521 E4          	pop a
0167++ 0522 F0          	pop di
0168++ 0523 EF          	pop si
0169++ 0524 09          	ret
0005+  0525             
0006+  0525 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0529 34 35 36 37 
0006+  052D 38 39 41 42 
0006+  0531 43 44 45 46 
0007+  0535             
0008+  0535 01 00       table_power:.dw 1
0009+  0537 0A 00       			.dw 10
0010+  0539 64 00       			.dw 100
0011+  053B E8 03       			.dw 1000
0012+  053D 10 27       			.dw 10000
0013+  053F             
0014+  053F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  053F             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  053F             ; ASCII in BL
0017+  053F             ; result in AL
0018+  053F             ; ascii for F = 0100 0110
0019+  053F             ; ascii for 9 = 0011 1001
0020+  053F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  053F             hex_ascii_encode:
0022+  053F 1B          	mov al, bl
0023+  0540 93 40       	test al, $40				; test if letter or number
0024+  0542 C7 48 05    	jnz hex_letter
0025+  0545 87 0F       	and al, $0F				; get number
0026+  0547 09          	ret
0027+  0548             hex_letter:
0028+  0548 87 0F       	and al, $0F				; get letter
0029+  054A 6A 09       	add al, 9
0030+  054C 09          	ret
0031+  054D             
0032+  054D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  054D             ; ATOI
0034+  054D             ; 2 letter hex string in B
0035+  054D             ; 8bit integer returned in AL
0036+  054D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  054D             atoi:
0038+  054D D8          	push b
0039+  054E 07 3F 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  0551 30          	mov bl, bh
0041+  0552 DB          	push al					; save a
0042+  0553 07 3F 05    	call hex_ascii_encode
0043+  0556 EA          	pop bl	
0044+  0557 FD 9E 04    	shl al, 4
0045+  055A 8C          	or al, bl
0046+  055B E5          	pop b
0047+  055C 09          	ret	
0048+  055D             
0049+  055D             
0050+  055D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  055D             ; printf
0052+  055D             ; no need for explanations!
0053+  055D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  055D             printf:
0055+  055D 09          	ret
0056+  055E             
0057+  055E             
0058+  055E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  055E             ; scanf
0060+  055E             ; no need for explanations!
0061+  055E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  055E             scanf:
0063+  055E 09          	ret
0064+  055F             
0065+  055F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  055F             ; ITOA
0067+  055F             ; 8bit value in BL
0068+  055F             ; 2 byte ASCII result in A
0069+  055F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  055F             itoa:
0071+  055F DA          	push d
0072+  0560 D8          	push b
0073+  0561 A7 00       	mov bh, 0
0074+  0563 FD A4 04    	shr bl, 4	
0075+  0566 74          	mov d, b
0076+  0567 1F 25 05    	mov al, [d + s_hex_digits]
0077+  056A 23          	mov ah, al
0078+  056B             	
0079+  056B E5          	pop b
0080+  056C D8          	push b
0081+  056D A7 00       	mov bh, 0
0082+  056F FD 87 0F    	and bl, $0F
0083+  0572 74          	mov d, b
0084+  0573 1F 25 05    	mov al, [d + s_hex_digits]
0085+  0576 E5          	pop b
0086+  0577 E7          	pop d
0087+  0578 09          	ret
0088+  0579             
0089+  0579             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0579             ; HEX STRING TO BINARY
0091+  0579             ; di = destination address
0092+  0579             ; si = source
0093+  0579             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0579             hex_to_int:
0095+  0579             hex_to_int_L1:
0096+  0579 F6          	lodsb					; load from [SI] to AL
0097+  057A B9 00       	cmp al, 0				; check if ASCII 0
0098+  057C C6 89 05    	jz hex_to_int_ret
0099+  057F 36          	mov bh, al
0100+  0580 F6          	lodsb
0101+  0581 2F          	mov bl, al
0102+  0582 07 4D 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0585 F7          	stosb					; store AL to [DI]
0104+  0586 0A 79 05    	jmp hex_to_int_L1
0105+  0589             hex_to_int_ret:
0106+  0589 09          	ret		
0107+  058A             
0108+  058A             
0109+  058A             
0110+  058A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  058A             ; GETCHAR
0112+  058A             ; char in ah
0113+  058A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  058A             getchar:
0115+  058A DB          	push al
0116+  058B             getchar_retry:
0117+  058B FD 0C       	sti
0118+  058D 19 01       	mov al, 1
0119+  058F 05 03       	syscall sys_io			; receive in AH
0120+  0591 B9 00       	cmp al, 0			; check if any char was receive
0121+  0593 C6 8B 05    	je getchar_retry
0122+  0596 E8          	pop al
0123+  0597 09          	ret
0124+  0598             
0125+  0598             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0598             ; PUTCHAR
0127+  0598             ; char in ah
0128+  0598             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0598             putchar:
0130+  0598 D7          	push a
0131+  0599 19 00       	mov al, 0
0132+  059B 05 03       	syscall sys_io			; char in AH
0133+  059D E4          	pop a
0134+  059E 09          	ret
0135+  059F             
0136+  059F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  059F             ;; INPUT A STRING
0138+  059F             ;; terminates with null
0139+  059F             ;; pointer in D
0140+  059F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  059F             gets:
0142+  059F D7          	push a
0143+  05A0 DA          	push d
0144+  05A1             gets_loop:
0145+  05A1 FD 0C       	sti
0146+  05A3 19 01       	mov al, 1
0147+  05A5 05 03       	syscall sys_io			; receive in AH
0148+  05A7 B9 00       	cmp al, 0				; check error code (AL)
0149+  05A9 C6 A1 05    	je gets_loop			; if no char received, retry
0150+  05AC             
0151+  05AC 76 1B       	cmp ah, 27
0152+  05AE C6 CF 05    	je gets_telnet_escape
0153+  05B1 76 0A       	cmp ah, $0A				; LF
0154+  05B3 C6 28 06    	je gets_end
0155+  05B6 76 0D       	cmp ah, $0D				; CR
0156+  05B8 C6 28 06    	je gets_end
0157+  05BB 76 5C       	cmp ah, $5C				; '\\'
0158+  05BD C6 FF 05    	je gets_escape
0159+  05C0             	
0160+  05C0 76 08       	cmp ah, $08			; check for backspace
0161+  05C2 C6 CB 05    	je gets_backspace
0162+  05C5             
0163+  05C5 1A          	mov al, ah
0164+  05C6 3E          	mov [d], al
0165+  05C7 79          	inc d
0166+  05C8 0A A1 05    	jmp gets_loop
0167+  05CB             gets_backspace:
0168+  05CB 7F          	dec d
0169+  05CC 0A A1 05    	jmp gets_loop
0170+  05CF             gets_telnet_escape:
0171+  05CF FD 0C       	sti
0172+  05D1 19 01       	mov al, 1
0173+  05D3 05 03       	syscall sys_io				; receive in AH without echo
0174+  05D5 B9 00       	cmp al, 0					; check error code (AL)
0175+  05D7 C6 CF 05    	je gets_telnet_escape		; if no char received, retry
0176+  05DA 76 5B       	cmp ah, '['
0177+  05DC C7 A1 05    	jne gets_loop
0178+  05DF             gets_telnet_escape_phase2:
0179+  05DF FD 0C       	sti
0180+  05E1 19 01       	mov al, 1
0181+  05E3 05 03       	syscall sys_io					; receive in AH without echo
0182+  05E5 B9 00       	cmp al, 0						; check error code (AL)
0183+  05E7 C6 DF 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  05EA 76 44       	cmp ah, 'D'
0185+  05EC C6 F7 05    	je gets_left_arrow
0186+  05EF 76 43       	cmp ah, 'C'
0187+  05F1 C6 FB 05    	je gets_right_arrow
0188+  05F4 0A A1 05    	jmp gets_loop
0189+  05F7             gets_left_arrow:
0190+  05F7 7F          	dec d
0191+  05F8 0A A1 05    	jmp gets_loop
0192+  05FB             gets_right_arrow:
0193+  05FB 79          	inc d
0194+  05FC 0A A1 05    	jmp gets_loop
0195+  05FF             gets_escape:
0196+  05FF FD 0C       	sti
0197+  0601 19 01       	mov al, 1
0198+  0603 05 03       	syscall sys_io			; receive in AH
0199+  0605 B9 00       	cmp al, 0				; check error code (AL)
0200+  0607 C6 FF 05    	je gets_escape			; if no char received, retry
0201+  060A 76 6E       	cmp ah, 'n'
0202+  060C C6 1A 06    	je gets_LF
0203+  060F 76 72       	cmp ah, 'r'
0204+  0611 C6 21 06    	je gets_CR
0205+  0614 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  0615 3E          	mov [d], al
0207+  0616 79          	inc d
0208+  0617 0A A1 05    	jmp gets_loop
0209+  061A             gets_LF:
0210+  061A 19 0A       	mov al, $0A
0211+  061C 3E          	mov [d], al
0212+  061D 79          	inc d
0213+  061E 0A A1 05    	jmp gets_loop
0214+  0621             gets_CR:
0215+  0621 19 0D       	mov al, $0D
0216+  0623 3E          	mov [d], al
0217+  0624 79          	inc d
0218+  0625 0A A1 05    	jmp gets_loop
0219+  0628             gets_end:
0220+  0628 19 00       	mov al, 0
0221+  062A 3E          	mov [d], al				; terminate string
0222+  062B E7          	pop d
0223+  062C E4          	pop a
0224+  062D 09          	ret
0225+  062E             
0226+  062E             
0227+  062E             
0228+  062E             
0229+  062E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  062E             ;; INPUT TEXT
0231+  062E             ;; terminated with CTRL+D
0232+  062E             ;; pointer in D
0233+  062E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  062E             gettxt:
0235+  062E D7          	push a
0236+  062F DA          	push d
0237+  0630             gettxt_loop:
0238+  0630 19 01       	mov al, 1
0239+  0632 05 03       	syscall sys_io			; receive in AH
0240+  0634 B9 00       	cmp al, 0				; check error code (AL)
0241+  0636 C6 30 06    	je gettxt_loop		; if no char received, retry
0242+  0639 76 04       	cmp ah, 4			; EOT
0243+  063B C6 79 06    	je gettxt_end
0244+  063E 76 08       	cmp ah, $08			; check for backspace
0245+  0640 C6 75 06    	je gettxt_backspace
0246+  0643 76 5C       	cmp ah, $5C				; '\\'
0247+  0645 C6 4E 06    	je gettxt_escape
0248+  0648 1A          	mov al, ah
0249+  0649 3E          	mov [d], al
0250+  064A 79          	inc d
0251+  064B 0A 30 06    	jmp gettxt_loop
0252+  064E             gettxt_escape:
0253+  064E 19 01       	mov al, 1
0254+  0650 05 03       	syscall sys_io			; receive in AH
0255+  0652 B9 00       	cmp al, 0				; check error code (AL)
0256+  0654 C6 4E 06    	je gettxt_escape		; if no char received, retry
0257+  0657 76 6E       	cmp ah, 'n'
0258+  0659 C6 67 06    	je gettxt_LF
0259+  065C 76 72       	cmp ah, 'r'
0260+  065E C6 6E 06    	je gettxt_CR
0261+  0661 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  0662 3E          	mov [d], al
0263+  0663 79          	inc d
0264+  0664 0A 30 06    	jmp gettxt_loop
0265+  0667             gettxt_LF:
0266+  0667 19 0A       	mov al, $0A
0267+  0669 3E          	mov [d], al
0268+  066A 79          	inc d
0269+  066B 0A 30 06    	jmp gettxt_loop
0270+  066E             gettxt_CR:
0271+  066E 19 0D       	mov al, $0D
0272+  0670 3E          	mov [d], al
0273+  0671 79          	inc d
0274+  0672 0A 30 06    	jmp gettxt_loop
0275+  0675             gettxt_backspace:
0276+  0675 7F          	dec d
0277+  0676 0A 30 06    	jmp gettxt_loop
0278+  0679             gettxt_end:
0279+  0679 19 00       	mov al, 0
0280+  067B 3E          	mov [d], al				; terminate string
0281+  067C E7          	pop d
0282+  067D E4          	pop a
0283+  067E 09          	ret
0284+  067F             
0285+  067F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  067F             ; PRINT NEW LINE
0287+  067F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  067F             printnl:
0289+  067F D7          	push a
0290+  0680 10 00 0A    	mov a, $0A00
0291+  0683 05 03       	syscall sys_io
0292+  0685 10 00 0D    	mov a, $0D00
0293+  0688 05 03       	syscall sys_io
0294+  068A E4          	pop a
0295+  068B 09          	ret
0296+  068C             
0297+  068C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  068C             ; strtoint
0299+  068C             ; 4 digit hex string number in d
0300+  068C             ; integer returned in A
0301+  068C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  068C             strtointx:
0303+  068C D8          	push b
0304+  068D 32          	mov bl, [d]
0305+  068E 37          	mov bh, bl
0306+  068F 33 01 00    	mov bl, [d + 1]
0307+  0692 07 4D 05    	call atoi				; convert to int in AL
0308+  0695 23          	mov ah, al				; move to AH
0309+  0696 33 02 00    	mov bl, [d + 2]
0310+  0699 37          	mov bh, bl
0311+  069A 33 03 00    	mov bl, [d + 3]
0312+  069D 07 4D 05    	call atoi				; convert to int in AL
0313+  06A0 E5          	pop b
0314+  06A1 09          	ret
0315+  06A2             
0316+  06A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  06A2             ; strtoint
0318+  06A2             ; 5 digit base10 string number in d
0319+  06A2             ; integer returned in A
0320+  06A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  06A2             strtoint:
0322+  06A2 E2          	push si
0323+  06A3 D8          	push b
0324+  06A4 D9          	push c
0325+  06A5 DA          	push d
0326+  06A6 07 D5 04    	call strlen			; get string length in C
0327+  06A9 7E          	dec c
0328+  06AA FD 4E       	mov si, d
0329+  06AC 12          	mov a, c
0330+  06AD FD 99       	shl a
0331+  06AF 3B 35 05    	mov d, table_power
0332+  06B2 59          	add d, a
0333+  06B3 38 00 00    	mov c, 0
0334+  06B6             strtoint_L0:
0335+  06B6 F6          	lodsb			; load ASCII to al
0336+  06B7 B9 00       	cmp al, 0
0337+  06B9 C6 CC 06    	je strtoint_end
0338+  06BC 6F 30       	sub al, $30		; make into integer
0339+  06BE 22 00       	mov ah, 0
0340+  06C0 2A          	mov b, [d]
0341+  06C1 AC          	mul a, b			; result in B since it fits in 16bits
0342+  06C2 11          	mov a, b
0343+  06C3 28          	mov b, c
0344+  06C4 54          	add a, b
0345+  06C5 39          	mov c, a
0346+  06C6 63 02 00    	sub d, 2
0347+  06C9 0A B6 06    	jmp strtoint_L0
0348+  06CC             strtoint_end:
0349+  06CC 12          	mov a, c
0350+  06CD E7          	pop d
0351+  06CE E6          	pop c
0352+  06CF E5          	pop b
0353+  06D0 EF          	pop si
0354+  06D1 09          	ret
0355+  06D2             
0356+  06D2             
0357+  06D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  06D2             ; PRINT NULL TERMINATED STRING
0359+  06D2             ; pointer in D
0360+  06D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  06D2             puts:
0362+  06D2 D7          	push a
0363+  06D3 DA          	push d
0364+  06D4             puts_L1:
0365+  06D4 1E          	mov al, [d]
0366+  06D5 B9 00       	cmp al, 0
0367+  06D7 C6 E3 06    	jz puts_END
0368+  06DA 23          	mov ah, al
0369+  06DB 19 00       	mov al, 0
0370+  06DD 05 03       	syscall sys_io
0371+  06DF 79          	inc d
0372+  06E0 0A D4 06    	jmp puts_L1
0373+  06E3             puts_END:
0374+  06E3 E7          	pop d
0375+  06E4 E4          	pop a
0376+  06E5 09          	ret
0377+  06E6             
0378+  06E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  06E6             ; PRINT N SIZE STRING
0380+  06E6             ; pointer in D
0381+  06E6             ; size in C
0382+  06E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  06E6             putsn:
0384+  06E6 DB          	push al
0385+  06E7 DA          	push d
0386+  06E8 D9          	push c
0387+  06E9             putsn_L0:
0388+  06E9 1E          	mov al, [d]
0389+  06EA 23          	mov ah, al
0390+  06EB 19 00       	mov al, 0
0391+  06ED 05 03       	syscall sys_io
0392+  06EF 79          	inc d
0393+  06F0 7E          	dec c	
0394+  06F1 C2 00 00    	cmp c, 0
0395+  06F4 C7 E9 06    	jne putsn_L0
0396+  06F7             putsn_end:
0397+  06F7 E6          	pop c
0398+  06F8 E7          	pop d
0399+  06F9 E8          	pop al
0400+  06FA 09          	ret
0401+  06FB             
0402+  06FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  06FB             ; print 16bit decimal number
0404+  06FB             ; input number in A
0405+  06FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  06FB             print_u16d:
0407+  06FB D7          	push a
0408+  06FC D8          	push b
0409+  06FD 26 10 27    	mov b, 10000
0410+  0700 AE          	div a, b			; get 10000 coeff.
0411+  0701 07 27 07    	call print_number
0412+  0704 11          	mov a, b
0413+  0705 26 E8 03    	mov b, 1000
0414+  0708 AE          	div a, b			; get 10000 coeff.
0415+  0709 07 27 07    	call print_number
0416+  070C 11          	mov a, b
0417+  070D 26 64 00    	mov b, 100
0418+  0710 AE          	div a, b
0419+  0711 07 27 07    	call print_number
0420+  0714 11          	mov a, b
0421+  0715 26 0A 00    	mov b, 10
0422+  0718 AE          	div a, b
0423+  0719 07 27 07    	call print_number
0424+  071C 11          	mov a, b
0425+  071D 6A 30       	add al, $30
0426+  071F 23          	mov ah, al
0427+  0720 19 00       	mov al, 0
0428+  0722 05 03       	syscall sys_io	; print coeff
0429+  0724 E5          	pop b
0430+  0725 E4          	pop a
0431+  0726 09          	ret
0432+  0727             
0433+  0727             
0434+  0727             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  0727             ; if A == 0, print space
0436+  0727             ; else print A
0437+  0727             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  0727             print_number:
0439+  0727 6A 30       	add al, $30
0440+  0729 23          	mov ah, al
0441+  072A 07 98 05    	call putchar
0442+  072D 09          	ret
0443+  072E             
0444+  072E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  072E             ; PRINT 16BIT HEX INTEGER
0446+  072E             ; integer value in reg B
0447+  072E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  072E             print_u16x:
0449+  072E D7          	push a
0450+  072F D8          	push b
0451+  0730 DD          	push bl
0452+  0731 30          	mov bl, bh
0453+  0732 07 5F 05    	call itoa				; convert bh to char in A
0454+  0735 2F          	mov bl, al				; save al
0455+  0736 19 00       	mov al, 0
0456+  0738 05 03       	syscall sys_io				; display AH
0457+  073A 24          	mov ah, bl				; retrieve al
0458+  073B 19 00       	mov al, 0
0459+  073D 05 03       	syscall sys_io				; display AL
0460+  073F             
0461+  073F EA          	pop bl
0462+  0740 07 5F 05    	call itoa				; convert bh to char in A
0463+  0743 2F          	mov bl, al				; save al
0464+  0744 19 00       	mov al, 0
0465+  0746 05 03       	syscall sys_io				; display AH
0466+  0748 24          	mov ah, bl				; retrieve al
0467+  0749 19 00       	mov al, 0
0468+  074B 05 03       	syscall sys_io				; display AL
0469+  074D             
0470+  074D E5          	pop b
0471+  074E E4          	pop a
0472+  074F 09          	ret
0473+  0750             
0474+  0750             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  0750             ; INPUT 16BIT HEX INTEGER
0476+  0750             ; read 16bit integer into A
0477+  0750             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  0750             scan_u16x:
0479+  0750 F8 10 00    	enter 16
0480+  0753 D8          	push b
0481+  0754 DA          	push d
0482+  0755             
0483+  0755 FA F1 FF    	lea d, [bp + -15]
0484+  0758 07 9F 05    	call gets				; get number
0485+  075B             
0486+  075B 32          	mov bl, [d]
0487+  075C 37          	mov bh, bl
0488+  075D 33 01 00    	mov bl, [d + 1]
0489+  0760 07 4D 05    	call atoi				; convert to int in AL
0490+  0763 23          	mov ah, al				; move to AH
0491+  0764             
0492+  0764 33 02 00    	mov bl, [d + 2]
0493+  0767 37          	mov bh, bl
0494+  0768 33 03 00    	mov bl, [d + 3]
0495+  076B 07 4D 05    	call atoi				; convert to int in AL
0496+  076E             
0497+  076E E7          	pop d
0498+  076F E5          	pop b
0499+  0770 F9          	leave
0500+  0771 09          	ret
0501+  0772             
0502+  0772             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  0772             ; PRINT 8bit HEX INTEGER
0504+  0772             ; integer value in reg bl
0505+  0772             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  0772             print_u8x:
0507+  0772 D7          	push a
0508+  0773 DD          	push bl
0509+  0774             
0510+  0774 07 5F 05    	call itoa				; convert bl to char in A
0511+  0777 2F          	mov bl, al				; save al
0512+  0778 19 00       	mov al, 0
0513+  077A 05 03       	syscall sys_io				; display AH
0514+  077C 24          	mov ah, bl				; retrieve al
0515+  077D 19 00       	mov al, 0
0516+  077F 05 03       	syscall sys_io				; display AL
0517+  0781             
0518+  0781 EA          	pop bl
0519+  0782 E4          	pop a
0520+  0783 09          	ret
0521+  0784             
0522+  0784             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0784             ; print 8bit decimal unsigned number
0524+  0784             ; input number in AL
0525+  0784             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0784             print_u8d:
0527+  0784 D7          	push a
0528+  0785 D8          	push b
0529+  0786             
0530+  0786 22 00       	mov ah, 0
0531+  0788 26 64 00    	mov b, 100
0532+  078B AE          	div a, b
0533+  078C D8          	push b			; save remainder
0534+  078D B9 00       	cmp al, 0
0535+  078F C6 99 07    	je skip100
0536+  0792 6A 30       	add al, $30
0537+  0794 23          	mov ah, al
0538+  0795 19 00       	mov al, 0
0539+  0797 05 03       	syscall sys_io	; print coeff
0540+  0799             skip100:
0541+  0799 E4          	pop a
0542+  079A 22 00       	mov ah, 0
0543+  079C 26 0A 00    	mov b, 10
0544+  079F AE          	div a, b
0545+  07A0 D8          	push b			; save remainder
0546+  07A1 B9 00       	cmp al, 0
0547+  07A3 C6 AD 07    	je skip10
0548+  07A6 6A 30       	add al, $30
0549+  07A8 23          	mov ah, al
0550+  07A9 19 00       	mov al, 0
0551+  07AB 05 03       	syscall sys_io	; print coeff
0552+  07AD             skip10:
0553+  07AD E4          	pop a
0554+  07AE 1B          	mov al, bl
0555+  07AF 6A 30       	add al, $30
0556+  07B1 23          	mov ah, al
0557+  07B2 19 00       	mov al, 0
0558+  07B4 05 03       	syscall sys_io	; print coeff
0559+  07B6 E5          	pop b
0560+  07B7 E4          	pop a
0561+  07B8 09          	ret
0562+  07B9             
0563+  07B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  07B9             ; INPUT 8BIT HEX INTEGER
0565+  07B9             ; read 8bit integer into AL
0566+  07B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  07B9             scan_u8x:
0568+  07B9 F8 04 00    	enter 4
0569+  07BC D8          	push b
0570+  07BD DA          	push d
0571+  07BE             
0572+  07BE FA FD FF    	lea d, [bp + -3]
0573+  07C1 07 9F 05    	call gets				; get number
0574+  07C4             
0575+  07C4 32          	mov bl, [d]
0576+  07C5 37          	mov bh, bl
0577+  07C6 33 01 00    	mov bl, [d + 1]
0578+  07C9 07 4D 05    	call atoi				; convert to int in AL
0579+  07CC             
0580+  07CC E7          	pop d
0581+  07CD E5          	pop b
0582+  07CE F9          	leave
0583+  07CF 09          	ret
0584+  07D0             
0585+  07D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  07D0             ; input decimal number
0587+  07D0             ; result in A
0588+  07D0             ; 655'\0'
0589+  07D0             ; low--------high
0590+  07D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  07D0             scan_u16d:
0592+  07D0 F8 08 00    	enter 8
0593+  07D3 E2          	push si
0594+  07D4 D8          	push b
0595+  07D5 D9          	push c
0596+  07D6 DA          	push d
0597+  07D7 FA F9 FF    	lea d, [bp +- 7]
0598+  07DA 07 9F 05    	call gets
0599+  07DD 07 D5 04    	call strlen			; get string length in C
0600+  07E0 7E          	dec c
0601+  07E1 FD 4E       	mov si, d
0602+  07E3 12          	mov a, c
0603+  07E4 FD 99       	shl a
0604+  07E6 3B 35 05    	mov d, table_power
0605+  07E9 59          	add d, a
0606+  07EA 38 00 00    	mov c, 0
0607+  07ED             mul_loop:
0608+  07ED F6          	lodsb			; load ASCII to al
0609+  07EE B9 00       	cmp al, 0
0610+  07F0 C6 03 08    	je mul_exit
0611+  07F3 6F 30       	sub al, $30		; make into integer
0612+  07F5 22 00       	mov ah, 0
0613+  07F7 2A          	mov b, [d]
0614+  07F8 AC          	mul a, b			; result in B since it fits in 16bits
0615+  07F9 11          	mov a, b
0616+  07FA 28          	mov b, c
0617+  07FB 54          	add a, b
0618+  07FC 39          	mov c, a
0619+  07FD 63 02 00    	sub d, 2
0620+  0800 0A ED 07    	jmp mul_loop
0621+  0803             mul_exit:
0622+  0803 12          	mov a, c
0623+  0804 E7          	pop d
0624+  0805 E6          	pop c
0625+  0806 E5          	pop b
0626+  0807 EF          	pop si
0627+  0808 F9          	leave
0628+  0809 09          	ret
0102   080A             ; --- end include block
0103   080A             
0104   080A             .end
tasm: Number of errors = 0
