0001   0000             ; --- FILENAME: largenumSol1.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402             _for1_init:
0011   0402 26 00 00      mov b, 0
0012   0405 FD 42 93 3C   mov [__pos], b
0013   0409             _for1_cond:
0014   0409 29 93 3C      mov b, [__pos] ; pos
0015   040C D7            push a
0016   040D 11            mov a, b
0017   040E 26 3C 00      mov b, 60
0018   0411 B0            cmp a, b
0019   0412 0E            lodflgs
0020   0413 2F            mov bl, al
0021   0414 FD A2 03      shr al, 3
0022   0417 FD A4 02      shr bl, 2
0023   041A FD 87 01      and bl, %00000001
0024   041D 90            xor al, bl ; < (signed)
0025   041E 22 00         mov ah, 0
0026   0420 27            mov b, a
0027   0421 E4            pop a
0028   0422 C0 00 00      cmp b, 0
0029   0425 C6 44 04      je _for1_exit
0030   0428             _for1_block:
0031   0428 26 00 00      mov b, 0
0032   042B FD AB         swp b
0033   042D D8            push b
0034   042E 07 C2 15      call prnnum
0035   0431 51 02 00      add sp, 2
0036   0434             _for1_update:
0037   0434 29 93 3C      mov b, [__pos] ; pos
0038   0437 D7            push a
0039   0438 11            mov a, b
0040   0439 FD 77         inc b
0041   043B FD 42 93 3C   mov [__pos], b
0042   043F 27            mov b, a
0043   0440 E4            pop a
0044   0441 0A 09 04      jmp _for1_cond
0045   0444             _for1_exit:
0046   0444 26 D1 3C      mov b, __string_0 ; "\n"
0047   0447 FD AB         swp b
0048   0449 D8            push b
0049   044A 07 8B 15      call print
0050   044D 51 02 00      add sp, 2
0051   0450             _for2_init:
0052   0450 26 06 00      mov b, 6
0053   0453 FD 42 93 3C   mov [__pos], b
0054   0457             _for2_cond:
0055   0457 29 93 3C      mov b, [__pos] ; pos
0056   045A D7            push a
0057   045B 11            mov a, b
0058   045C 26 00 00      mov b, 0
0059   045F B0            cmp a, b
0060   0460 0E            lodflgs
0061   0461 2F            mov bl, al
0062   0462 FD 78         mov g, a
0063   0464 FD A2 03      shr al, 3
0064   0467 FD A4 02      shr bl, 2
0065   046A FD 87 01      and bl, %00000001
0066   046D 90            xor al, bl
0067   046E FD 27         mov b, g
0068   0470 FD 87 01      and bl, %00000001
0069   0473 8C            or al, bl
0070   0474 8F 01         xor al, %00000001 ; > (signed)
0071   0476 22 00         mov ah, 0
0072   0478 27            mov b, a
0073   0479 E4            pop a
0074   047A C0 00 00      cmp b, 0
0075   047D C6 18 06      je _for2_exit
0076   0480             _for2_block:
0077   0480 07 96 15      call readint
0078   0483 FD 42 6D 3B   mov [__ionr], b
0079   0487 29 6D 3B      mov b, [__ionr] ; ionr
0080   048A D7            push a
0081   048B 11            mov a, b
0082   048C 26 10 27      mov b, 10000
0083   048F AE            div a, b
0084   0490 FD 78         mov g, a
0085   0492 11            mov a, b
0086   0493 FD 27         mov b, g
0087   0495 E4            pop a
0088   0496 FD 42 6F 3B   mov [__ioshift], b
0089   049A 29 6F 3B      mov b, [__ioshift] ; ioshift
0090   049D D7            push a
0091   049E 11            mov a, b
0092   049F 26 10 27      mov b, 10000
0093   04A2 AC            mul a, b
0094   04A3 E4            pop a
0095   04A4 FD 42 6F 3B   mov [__ioshift], b
0096   04A8 29 6D 3B      mov b, [__ionr] ; ionr
0097   04AB D7            push a
0098   04AC 11            mov a, b
0099   04AD 29 6F 3B      mov b, [__ioshift] ; ioshift
0100   04B0 60            sub a, b
0101   04B1 27            mov b, a
0102   04B2 E4            pop a
0103   04B3 FD 42 6D 3B   mov [__ionr], b
0104   04B7 29 6B 3B      mov b, [__ionum] ; ionum
0105   04BA D7            push a
0106   04BB 74            mov d, b
0107   04BC DA            push d
0108   04BD 29 93 3C      mov b, [__pos] ; pos
0109   04C0 D7            push a
0110   04C1 11            mov a, b
0111   04C2 26 01 00      mov b, 1
0112   04C5 60            sub a, b
0113   04C6 27            mov b, a
0114   04C7 E4            pop a
0115   04C8 E7            pop d
0116   04C9 10 02 00      mov a, 2
0117   04CC AC            mul a, b
0118   04CD 5A            add d, b
0119   04CE E4            pop a
0120   04CF DA            push d
0121   04D0 29 6D 3B      mov b, [__ionr] ; ionr
0122   04D3 E7            pop d
0123   04D4 FD 43         mov [d], b
0124   04D6             _for3_init:
0125   04D6 26 06 00      mov b, 6
0126   04D9 FD 42 BB 3B   mov [__datumpos], b
0127   04DD             _for3_cond:
0128   04DD 29 BB 3B      mov b, [__datumpos] ; datumpos
0129   04E0 D7            push a
0130   04E1 11            mov a, b
0131   04E2 29 93 3C      mov b, [__pos] ; pos
0132   04E5 B0            cmp a, b
0133   04E6 0E            lodflgs
0134   04E7 2F            mov bl, al
0135   04E8 FD A2 03      shr al, 3
0136   04EB FD A4 02      shr bl, 2
0137   04EE FD 87 01      and bl, %00000001
0138   04F1 90            xor al, bl
0139   04F2 8F 01         xor al, %00000001 ; >= (signed)
0140   04F4 22 00         mov ah, 0
0141   04F6 27            mov b, a
0142   04F7 E4            pop a
0143   04F8 C0 00 00      cmp b, 0
0144   04FB C6 FC 05      je _for3_exit
0145   04FE             _for3_block:
0146   04FE             _if4_cond:
0147   04FE 29 6B 3B      mov b, [__ionum] ; ionum
0148   0501 D7            push a
0149   0502 74            mov d, b
0150   0503 DA            push d
0151   0504 29 BB 3B      mov b, [__datumpos] ; datumpos
0152   0507 D7            push a
0153   0508 11            mov a, b
0154   0509 26 01 00      mov b, 1
0155   050C 60            sub a, b
0156   050D 27            mov b, a
0157   050E E4            pop a
0158   050F E7            pop d
0159   0510 10 02 00      mov a, 2
0160   0513 AC            mul a, b
0161   0514 5A            add d, b
0162   0515 E4            pop a
0163   0516 2A            mov b, [d]
0164   0517 D7            push a
0165   0518 11            mov a, b
0166   0519 26 E8 03      mov b, 1000
0167   051C B0            cmp a, b
0168   051D 0E            lodflgs
0169   051E 2F            mov bl, al
0170   051F FD A2 03      shr al, 3
0171   0522 FD A4 02      shr bl, 2
0172   0525 FD 87 01      and bl, %00000001
0173   0528 90            xor al, bl ; < (signed)
0174   0529 22 00         mov ah, 0
0175   052B 27            mov b, a
0176   052C E4            pop a
0177   052D C0 00 00      cmp b, 0
0178   0530 C6 42 05      je _if4_exit
0179   0533             _if4_true:
0180   0533 26 00 00      mov b, 0
0181   0536 FD AB         swp b
0182   0538 D8            push b
0183   0539 07 C2 15      call prnnum
0184   053C 51 02 00      add sp, 2
0185   053F 0A 42 05      jmp _if4_exit
0186   0542             _if4_exit:
0187   0542             _if5_cond:
0188   0542 29 6B 3B      mov b, [__ionum] ; ionum
0189   0545 D7            push a
0190   0546 74            mov d, b
0191   0547 DA            push d
0192   0548 29 BB 3B      mov b, [__datumpos] ; datumpos
0193   054B D7            push a
0194   054C 11            mov a, b
0195   054D 26 01 00      mov b, 1
0196   0550 60            sub a, b
0197   0551 27            mov b, a
0198   0552 E4            pop a
0199   0553 E7            pop d
0200   0554 10 02 00      mov a, 2
0201   0557 AC            mul a, b
0202   0558 5A            add d, b
0203   0559 E4            pop a
0204   055A 2A            mov b, [d]
0205   055B D7            push a
0206   055C 11            mov a, b
0207   055D 26 64 00      mov b, 100
0208   0560 B0            cmp a, b
0209   0561 0E            lodflgs
0210   0562 2F            mov bl, al
0211   0563 FD A2 03      shr al, 3
0212   0566 FD A4 02      shr bl, 2
0213   0569 FD 87 01      and bl, %00000001
0214   056C 90            xor al, bl ; < (signed)
0215   056D 22 00         mov ah, 0
0216   056F 27            mov b, a
0217   0570 E4            pop a
0218   0571 C0 00 00      cmp b, 0
0219   0574 C6 86 05      je _if5_exit
0220   0577             _if5_true:
0221   0577 26 00 00      mov b, 0
0222   057A FD AB         swp b
0223   057C D8            push b
0224   057D 07 C2 15      call prnnum
0225   0580 51 02 00      add sp, 2
0226   0583 0A 86 05      jmp _if5_exit
0227   0586             _if5_exit:
0228   0586             _if6_cond:
0229   0586 29 6B 3B      mov b, [__ionum] ; ionum
0230   0589 D7            push a
0231   058A 74            mov d, b
0232   058B DA            push d
0233   058C 29 BB 3B      mov b, [__datumpos] ; datumpos
0234   058F D7            push a
0235   0590 11            mov a, b
0236   0591 26 01 00      mov b, 1
0237   0594 60            sub a, b
0238   0595 27            mov b, a
0239   0596 E4            pop a
0240   0597 E7            pop d
0241   0598 10 02 00      mov a, 2
0242   059B AC            mul a, b
0243   059C 5A            add d, b
0244   059D E4            pop a
0245   059E 2A            mov b, [d]
0246   059F D7            push a
0247   05A0 11            mov a, b
0248   05A1 26 0A 00      mov b, 10
0249   05A4 B0            cmp a, b
0250   05A5 0E            lodflgs
0251   05A6 2F            mov bl, al
0252   05A7 FD A2 03      shr al, 3
0253   05AA FD A4 02      shr bl, 2
0254   05AD FD 87 01      and bl, %00000001
0255   05B0 90            xor al, bl ; < (signed)
0256   05B1 22 00         mov ah, 0
0257   05B3 27            mov b, a
0258   05B4 E4            pop a
0259   05B5 C0 00 00      cmp b, 0
0260   05B8 C6 CA 05      je _if6_exit
0261   05BB             _if6_true:
0262   05BB 26 00 00      mov b, 0
0263   05BE FD AB         swp b
0264   05C0 D8            push b
0265   05C1 07 C2 15      call prnnum
0266   05C4 51 02 00      add sp, 2
0267   05C7 0A CA 05      jmp _if6_exit
0268   05CA             _if6_exit:
0269   05CA 29 6B 3B      mov b, [__ionum] ; ionum
0270   05CD D7            push a
0271   05CE 74            mov d, b
0272   05CF DA            push d
0273   05D0 29 BB 3B      mov b, [__datumpos] ; datumpos
0274   05D3 D7            push a
0275   05D4 11            mov a, b
0276   05D5 26 01 00      mov b, 1
0277   05D8 60            sub a, b
0278   05D9 27            mov b, a
0279   05DA E4            pop a
0280   05DB E7            pop d
0281   05DC 10 02 00      mov a, 2
0282   05DF AC            mul a, b
0283   05E0 5A            add d, b
0284   05E1 E4            pop a
0285   05E2 2A            mov b, [d]
0286   05E3 FD AB         swp b
0287   05E5 D8            push b
0288   05E6 07 C2 15      call prnnum
0289   05E9 51 02 00      add sp, 2
0290   05EC             _for3_update:
0291   05EC 29 BB 3B      mov b, [__datumpos] ; datumpos
0292   05EF D7            push a
0293   05F0 11            mov a, b
0294   05F1 FD 7D         dec b
0295   05F3 FD 42 BB 3B   mov [__datumpos], b
0296   05F7 27            mov b, a
0297   05F8 E4            pop a
0298   05F9 0A DD 04      jmp _for3_cond
0299   05FC             _for3_exit:
0300   05FC 26 D1 3C      mov b, __string_0 ; "\n"
0301   05FF FD AB         swp b
0302   0601 D8            push b
0303   0602 07 8B 15      call print
0304   0605 51 02 00      add sp, 2
0305   0608             _for2_update:
0306   0608 29 93 3C      mov b, [__pos] ; pos
0307   060B D7            push a
0308   060C 11            mov a, b
0309   060D FD 7D         dec b
0310   060F FD 42 93 3C   mov [__pos], b
0311   0613 27            mov b, a
0312   0614 E4            pop a
0313   0615 0A 57 04      jmp _for2_cond
0314   0618             _for2_exit:
0315   0618 26 00 00      mov b, 0
0316   061B FD 42 BB 3B   mov [__datumpos], b
0317   061F             _for7_init:
0318   061F 29 BB 3B      mov b, [__datumpos] ; datumpos
0319   0622 D7            push a
0320   0623 11            mov a, b
0321   0624 26 06 00      mov b, 6
0322   0627 AC            mul a, b
0323   0628 E4            pop a
0324   0629 FD 42 93 3C   mov [__pos], b
0325   062D             _for7_cond:
0326   062D 29 93 3C      mov b, [__pos] ; pos
0327   0630 D7            push a
0328   0631 11            mov a, b
0329   0632 29 BB 3B      mov b, [__datumpos] ; datumpos
0330   0635 D7            push a
0331   0636 11            mov a, b
0332   0637 26 06 00      mov b, 6
0333   063A AC            mul a, b
0334   063B E4            pop a
0335   063C D7            push a
0336   063D 11            mov a, b
0337   063E 26 06 00      mov b, 6
0338   0641 54            add a, b
0339   0642 27            mov b, a
0340   0643 E4            pop a
0341   0644 B0            cmp a, b
0342   0645 0E            lodflgs
0343   0646 2F            mov bl, al
0344   0647 FD A2 03      shr al, 3
0345   064A FD A4 02      shr bl, 2
0346   064D FD 87 01      and bl, %00000001
0347   0650 90            xor al, bl ; < (signed)
0348   0651 22 00         mov ah, 0
0349   0653 27            mov b, a
0350   0654 E4            pop a
0351   0655 C0 00 00      cmp b, 0
0352   0658 C6 9F 06      je _for7_exit
0353   065B             _for7_block:
0354   065B 29 B9 3B      mov b, [__datum] ; datum
0355   065E D7            push a
0356   065F 74            mov d, b
0357   0660 DA            push d
0358   0661 29 93 3C      mov b, [__pos] ; pos
0359   0664 E7            pop d
0360   0665 10 02 00      mov a, 2
0361   0668 AC            mul a, b
0362   0669 5A            add d, b
0363   066A E4            pop a
0364   066B DA            push d
0365   066C 29 6B 3B      mov b, [__ionum] ; ionum
0366   066F D7            push a
0367   0670 74            mov d, b
0368   0671 DA            push d
0369   0672 29 93 3C      mov b, [__pos] ; pos
0370   0675 D7            push a
0371   0676 11            mov a, b
0372   0677 29 BB 3B      mov b, [__datumpos] ; datumpos
0373   067A D7            push a
0374   067B 11            mov a, b
0375   067C 26 06 00      mov b, 6
0376   067F AC            mul a, b
0377   0680 E4            pop a
0378   0681 60            sub a, b
0379   0682 27            mov b, a
0380   0683 E4            pop a
0381   0684 E7            pop d
0382   0685 10 02 00      mov a, 2
0383   0688 AC            mul a, b
0384   0689 5A            add d, b
0385   068A E4            pop a
0386   068B 2A            mov b, [d]
0387   068C E7            pop d
0388   068D FD 43         mov [d], b
0389   068F             _for7_update:
0390   068F 29 93 3C      mov b, [__pos] ; pos
0391   0692 D7            push a
0392   0693 11            mov a, b
0393   0694 FD 77         inc b
0394   0696 FD 42 93 3C   mov [__pos], b
0395   069A 27            mov b, a
0396   069B E4            pop a
0397   069C 0A 2D 06      jmp _for7_cond
0398   069F             _for7_exit:
0399   069F             _for8_init:
0400   069F 26 00 00      mov b, 0
0401   06A2 FD 42 93 3C   mov [__pos], b
0402   06A6             _for8_cond:
0403   06A6 29 93 3C      mov b, [__pos] ; pos
0404   06A9 D7            push a
0405   06AA 11            mov a, b
0406   06AB 26 3C 00      mov b, 60
0407   06AE B0            cmp a, b
0408   06AF 0E            lodflgs
0409   06B0 2F            mov bl, al
0410   06B1 FD A2 03      shr al, 3
0411   06B4 FD A4 02      shr bl, 2
0412   06B7 FD 87 01      and bl, %00000001
0413   06BA 90            xor al, bl ; < (signed)
0414   06BB 22 00         mov ah, 0
0415   06BD 27            mov b, a
0416   06BE E4            pop a
0417   06BF C0 00 00      cmp b, 0
0418   06C2 C6 E1 06      je _for8_exit
0419   06C5             _for8_block:
0420   06C5 26 00 00      mov b, 0
0421   06C8 FD AB         swp b
0422   06CA D8            push b
0423   06CB 07 C2 15      call prnnum
0424   06CE 51 02 00      add sp, 2
0425   06D1             _for8_update:
0426   06D1 29 93 3C      mov b, [__pos] ; pos
0427   06D4 D7            push a
0428   06D5 11            mov a, b
0429   06D6 FD 77         inc b
0430   06D8 FD 42 93 3C   mov [__pos], b
0431   06DC 27            mov b, a
0432   06DD E4            pop a
0433   06DE 0A A6 06      jmp _for8_cond
0434   06E1             _for8_exit:
0435   06E1 26 D1 3C      mov b, __string_0 ; "\n"
0436   06E4 FD AB         swp b
0437   06E6 D8            push b
0438   06E7 07 8B 15      call print
0439   06EA 51 02 00      add sp, 2
0440   06ED             _for9_init:
0441   06ED 26 06 00      mov b, 6
0442   06F0 FD 42 93 3C   mov [__pos], b
0443   06F4             _for9_cond:
0444   06F4 29 93 3C      mov b, [__pos] ; pos
0445   06F7 D7            push a
0446   06F8 11            mov a, b
0447   06F9 26 00 00      mov b, 0
0448   06FC B0            cmp a, b
0449   06FD 0E            lodflgs
0450   06FE 2F            mov bl, al
0451   06FF FD 78         mov g, a
0452   0701 FD A2 03      shr al, 3
0453   0704 FD A4 02      shr bl, 2
0454   0707 FD 87 01      and bl, %00000001
0455   070A 90            xor al, bl
0456   070B FD 27         mov b, g
0457   070D FD 87 01      and bl, %00000001
0458   0710 8C            or al, bl
0459   0711 8F 01         xor al, %00000001 ; > (signed)
0460   0713 22 00         mov ah, 0
0461   0715 27            mov b, a
0462   0716 E4            pop a
0463   0717 C0 00 00      cmp b, 0
0464   071A C6 B5 08      je _for9_exit
0465   071D             _for9_block:
0466   071D 07 96 15      call readint
0467   0720 FD 42 6D 3B   mov [__ionr], b
0468   0724 29 6D 3B      mov b, [__ionr] ; ionr
0469   0727 D7            push a
0470   0728 11            mov a, b
0471   0729 26 10 27      mov b, 10000
0472   072C AE            div a, b
0473   072D FD 78         mov g, a
0474   072F 11            mov a, b
0475   0730 FD 27         mov b, g
0476   0732 E4            pop a
0477   0733 FD 42 6F 3B   mov [__ioshift], b
0478   0737 29 6F 3B      mov b, [__ioshift] ; ioshift
0479   073A D7            push a
0480   073B 11            mov a, b
0481   073C 26 10 27      mov b, 10000
0482   073F AC            mul a, b
0483   0740 E4            pop a
0484   0741 FD 42 6F 3B   mov [__ioshift], b
0485   0745 29 6D 3B      mov b, [__ionr] ; ionr
0486   0748 D7            push a
0487   0749 11            mov a, b
0488   074A 29 6F 3B      mov b, [__ioshift] ; ioshift
0489   074D 60            sub a, b
0490   074E 27            mov b, a
0491   074F E4            pop a
0492   0750 FD 42 6D 3B   mov [__ionr], b
0493   0754 29 6B 3B      mov b, [__ionum] ; ionum
0494   0757 D7            push a
0495   0758 74            mov d, b
0496   0759 DA            push d
0497   075A 29 93 3C      mov b, [__pos] ; pos
0498   075D D7            push a
0499   075E 11            mov a, b
0500   075F 26 01 00      mov b, 1
0501   0762 60            sub a, b
0502   0763 27            mov b, a
0503   0764 E4            pop a
0504   0765 E7            pop d
0505   0766 10 02 00      mov a, 2
0506   0769 AC            mul a, b
0507   076A 5A            add d, b
0508   076B E4            pop a
0509   076C DA            push d
0510   076D 29 6D 3B      mov b, [__ionr] ; ionr
0511   0770 E7            pop d
0512   0771 FD 43         mov [d], b
0513   0773             _for10_init:
0514   0773 26 06 00      mov b, 6
0515   0776 FD 42 BB 3B   mov [__datumpos], b
0516   077A             _for10_cond:
0517   077A 29 BB 3B      mov b, [__datumpos] ; datumpos
0518   077D D7            push a
0519   077E 11            mov a, b
0520   077F 29 93 3C      mov b, [__pos] ; pos
0521   0782 B0            cmp a, b
0522   0783 0E            lodflgs
0523   0784 2F            mov bl, al
0524   0785 FD A2 03      shr al, 3
0525   0788 FD A4 02      shr bl, 2
0526   078B FD 87 01      and bl, %00000001
0527   078E 90            xor al, bl
0528   078F 8F 01         xor al, %00000001 ; >= (signed)
0529   0791 22 00         mov ah, 0
0530   0793 27            mov b, a
0531   0794 E4            pop a
0532   0795 C0 00 00      cmp b, 0
0533   0798 C6 99 08      je _for10_exit
0534   079B             _for10_block:
0535   079B             _if11_cond:
0536   079B 29 6B 3B      mov b, [__ionum] ; ionum
0537   079E D7            push a
0538   079F 74            mov d, b
0539   07A0 DA            push d
0540   07A1 29 BB 3B      mov b, [__datumpos] ; datumpos
0541   07A4 D7            push a
0542   07A5 11            mov a, b
0543   07A6 26 01 00      mov b, 1
0544   07A9 60            sub a, b
0545   07AA 27            mov b, a
0546   07AB E4            pop a
0547   07AC E7            pop d
0548   07AD 10 02 00      mov a, 2
0549   07B0 AC            mul a, b
0550   07B1 5A            add d, b
0551   07B2 E4            pop a
0552   07B3 2A            mov b, [d]
0553   07B4 D7            push a
0554   07B5 11            mov a, b
0555   07B6 26 E8 03      mov b, 1000
0556   07B9 B0            cmp a, b
0557   07BA 0E            lodflgs
0558   07BB 2F            mov bl, al
0559   07BC FD A2 03      shr al, 3
0560   07BF FD A4 02      shr bl, 2
0561   07C2 FD 87 01      and bl, %00000001
0562   07C5 90            xor al, bl ; < (signed)
0563   07C6 22 00         mov ah, 0
0564   07C8 27            mov b, a
0565   07C9 E4            pop a
0566   07CA C0 00 00      cmp b, 0
0567   07CD C6 DF 07      je _if11_exit
0568   07D0             _if11_true:
0569   07D0 26 00 00      mov b, 0
0570   07D3 FD AB         swp b
0571   07D5 D8            push b
0572   07D6 07 C2 15      call prnnum
0573   07D9 51 02 00      add sp, 2
0574   07DC 0A DF 07      jmp _if11_exit
0575   07DF             _if11_exit:
0576   07DF             _if12_cond:
0577   07DF 29 6B 3B      mov b, [__ionum] ; ionum
0578   07E2 D7            push a
0579   07E3 74            mov d, b
0580   07E4 DA            push d
0581   07E5 29 BB 3B      mov b, [__datumpos] ; datumpos
0582   07E8 D7            push a
0583   07E9 11            mov a, b
0584   07EA 26 01 00      mov b, 1
0585   07ED 60            sub a, b
0586   07EE 27            mov b, a
0587   07EF E4            pop a
0588   07F0 E7            pop d
0589   07F1 10 02 00      mov a, 2
0590   07F4 AC            mul a, b
0591   07F5 5A            add d, b
0592   07F6 E4            pop a
0593   07F7 2A            mov b, [d]
0594   07F8 D7            push a
0595   07F9 11            mov a, b
0596   07FA 26 64 00      mov b, 100
0597   07FD B0            cmp a, b
0598   07FE 0E            lodflgs
0599   07FF 2F            mov bl, al
0600   0800 FD A2 03      shr al, 3
0601   0803 FD A4 02      shr bl, 2
0602   0806 FD 87 01      and bl, %00000001
0603   0809 90            xor al, bl ; < (signed)
0604   080A 22 00         mov ah, 0
0605   080C 27            mov b, a
0606   080D E4            pop a
0607   080E C0 00 00      cmp b, 0
0608   0811 C6 23 08      je _if12_exit
0609   0814             _if12_true:
0610   0814 26 00 00      mov b, 0
0611   0817 FD AB         swp b
0612   0819 D8            push b
0613   081A 07 C2 15      call prnnum
0614   081D 51 02 00      add sp, 2
0615   0820 0A 23 08      jmp _if12_exit
0616   0823             _if12_exit:
0617   0823             _if13_cond:
0618   0823 29 6B 3B      mov b, [__ionum] ; ionum
0619   0826 D7            push a
0620   0827 74            mov d, b
0621   0828 DA            push d
0622   0829 29 BB 3B      mov b, [__datumpos] ; datumpos
0623   082C D7            push a
0624   082D 11            mov a, b
0625   082E 26 01 00      mov b, 1
0626   0831 60            sub a, b
0627   0832 27            mov b, a
0628   0833 E4            pop a
0629   0834 E7            pop d
0630   0835 10 02 00      mov a, 2
0631   0838 AC            mul a, b
0632   0839 5A            add d, b
0633   083A E4            pop a
0634   083B 2A            mov b, [d]
0635   083C D7            push a
0636   083D 11            mov a, b
0637   083E 26 0A 00      mov b, 10
0638   0841 B0            cmp a, b
0639   0842 0E            lodflgs
0640   0843 2F            mov bl, al
0641   0844 FD A2 03      shr al, 3
0642   0847 FD A4 02      shr bl, 2
0643   084A FD 87 01      and bl, %00000001
0644   084D 90            xor al, bl ; < (signed)
0645   084E 22 00         mov ah, 0
0646   0850 27            mov b, a
0647   0851 E4            pop a
0648   0852 C0 00 00      cmp b, 0
0649   0855 C6 67 08      je _if13_exit
0650   0858             _if13_true:
0651   0858 26 00 00      mov b, 0
0652   085B FD AB         swp b
0653   085D D8            push b
0654   085E 07 C2 15      call prnnum
0655   0861 51 02 00      add sp, 2
0656   0864 0A 67 08      jmp _if13_exit
0657   0867             _if13_exit:
0658   0867 29 6B 3B      mov b, [__ionum] ; ionum
0659   086A D7            push a
0660   086B 74            mov d, b
0661   086C DA            push d
0662   086D 29 BB 3B      mov b, [__datumpos] ; datumpos
0663   0870 D7            push a
0664   0871 11            mov a, b
0665   0872 26 01 00      mov b, 1
0666   0875 60            sub a, b
0667   0876 27            mov b, a
0668   0877 E4            pop a
0669   0878 E7            pop d
0670   0879 10 02 00      mov a, 2
0671   087C AC            mul a, b
0672   087D 5A            add d, b
0673   087E E4            pop a
0674   087F 2A            mov b, [d]
0675   0880 FD AB         swp b
0676   0882 D8            push b
0677   0883 07 C2 15      call prnnum
0678   0886 51 02 00      add sp, 2
0679   0889             _for10_update:
0680   0889 29 BB 3B      mov b, [__datumpos] ; datumpos
0681   088C D7            push a
0682   088D 11            mov a, b
0683   088E FD 7D         dec b
0684   0890 FD 42 BB 3B   mov [__datumpos], b
0685   0894 27            mov b, a
0686   0895 E4            pop a
0687   0896 0A 7A 07      jmp _for10_cond
0688   0899             _for10_exit:
0689   0899 26 D1 3C      mov b, __string_0 ; "\n"
0690   089C FD AB         swp b
0691   089E D8            push b
0692   089F 07 8B 15      call print
0693   08A2 51 02 00      add sp, 2
0694   08A5             _for9_update:
0695   08A5 29 93 3C      mov b, [__pos] ; pos
0696   08A8 D7            push a
0697   08A9 11            mov a, b
0698   08AA FD 7D         dec b
0699   08AC FD 42 93 3C   mov [__pos], b
0700   08B0 27            mov b, a
0701   08B1 E4            pop a
0702   08B2 0A F4 06      jmp _for9_cond
0703   08B5             _for9_exit:
0704   08B5 26 01 00      mov b, 1
0705   08B8 FD 42 BB 3B   mov [__datumpos], b
0706   08BC             _for14_init:
0707   08BC 29 BB 3B      mov b, [__datumpos] ; datumpos
0708   08BF D7            push a
0709   08C0 11            mov a, b
0710   08C1 26 06 00      mov b, 6
0711   08C4 AC            mul a, b
0712   08C5 E4            pop a
0713   08C6 FD 42 93 3C   mov [__pos], b
0714   08CA             _for14_cond:
0715   08CA 29 93 3C      mov b, [__pos] ; pos
0716   08CD D7            push a
0717   08CE 11            mov a, b
0718   08CF 29 BB 3B      mov b, [__datumpos] ; datumpos
0719   08D2 D7            push a
0720   08D3 11            mov a, b
0721   08D4 26 06 00      mov b, 6
0722   08D7 AC            mul a, b
0723   08D8 E4            pop a
0724   08D9 D7            push a
0725   08DA 11            mov a, b
0726   08DB 26 06 00      mov b, 6
0727   08DE 54            add a, b
0728   08DF 27            mov b, a
0729   08E0 E4            pop a
0730   08E1 B0            cmp a, b
0731   08E2 0E            lodflgs
0732   08E3 2F            mov bl, al
0733   08E4 FD A2 03      shr al, 3
0734   08E7 FD A4 02      shr bl, 2
0735   08EA FD 87 01      and bl, %00000001
0736   08ED 90            xor al, bl ; < (signed)
0737   08EE 22 00         mov ah, 0
0738   08F0 27            mov b, a
0739   08F1 E4            pop a
0740   08F2 C0 00 00      cmp b, 0
0741   08F5 C6 3C 09      je _for14_exit
0742   08F8             _for14_block:
0743   08F8 29 B9 3B      mov b, [__datum] ; datum
0744   08FB D7            push a
0745   08FC 74            mov d, b
0746   08FD DA            push d
0747   08FE 29 93 3C      mov b, [__pos] ; pos
0748   0901 E7            pop d
0749   0902 10 02 00      mov a, 2
0750   0905 AC            mul a, b
0751   0906 5A            add d, b
0752   0907 E4            pop a
0753   0908 DA            push d
0754   0909 29 6B 3B      mov b, [__ionum] ; ionum
0755   090C D7            push a
0756   090D 74            mov d, b
0757   090E DA            push d
0758   090F 29 93 3C      mov b, [__pos] ; pos
0759   0912 D7            push a
0760   0913 11            mov a, b
0761   0914 29 BB 3B      mov b, [__datumpos] ; datumpos
0762   0917 D7            push a
0763   0918 11            mov a, b
0764   0919 26 06 00      mov b, 6
0765   091C AC            mul a, b
0766   091D E4            pop a
0767   091E 60            sub a, b
0768   091F 27            mov b, a
0769   0920 E4            pop a
0770   0921 E7            pop d
0771   0922 10 02 00      mov a, 2
0772   0925 AC            mul a, b
0773   0926 5A            add d, b
0774   0927 E4            pop a
0775   0928 2A            mov b, [d]
0776   0929 E7            pop d
0777   092A FD 43         mov [d], b
0778   092C             _for14_update:
0779   092C 29 93 3C      mov b, [__pos] ; pos
0780   092F D7            push a
0781   0930 11            mov a, b
0782   0931 FD 77         inc b
0783   0933 FD 42 93 3C   mov [__pos], b
0784   0937 27            mov b, a
0785   0938 E4            pop a
0786   0939 0A CA 08      jmp _for14_cond
0787   093C             _for14_exit:
0788   093C 26 00 00      mov b, 0
0789   093F FD 42 BB 3B   mov [__datumpos], b
0790   0943             _for15_init:
0791   0943 29 BB 3B      mov b, [__datumpos] ; datumpos
0792   0946 D7            push a
0793   0947 11            mov a, b
0794   0948 26 06 00      mov b, 6
0795   094B AC            mul a, b
0796   094C E4            pop a
0797   094D FD 42 93 3C   mov [__pos], b
0798   0951             _for15_cond:
0799   0951 29 93 3C      mov b, [__pos] ; pos
0800   0954 D7            push a
0801   0955 11            mov a, b
0802   0956 29 BB 3B      mov b, [__datumpos] ; datumpos
0803   0959 D7            push a
0804   095A 11            mov a, b
0805   095B 26 06 00      mov b, 6
0806   095E AC            mul a, b
0807   095F E4            pop a
0808   0960 D7            push a
0809   0961 11            mov a, b
0810   0962 26 06 00      mov b, 6
0811   0965 54            add a, b
0812   0966 27            mov b, a
0813   0967 E4            pop a
0814   0968 B0            cmp a, b
0815   0969 0E            lodflgs
0816   096A 2F            mov bl, al
0817   096B FD A2 03      shr al, 3
0818   096E FD A4 02      shr bl, 2
0819   0971 FD 87 01      and bl, %00000001
0820   0974 90            xor al, bl ; < (signed)
0821   0975 22 00         mov ah, 0
0822   0977 27            mov b, a
0823   0978 E4            pop a
0824   0979 C0 00 00      cmp b, 0
0825   097C C6 2F 0A      je _for15_exit
0826   097F             _for15_block:
0827   097F 29 B9 3B      mov b, [__datum] ; datum
0828   0982 D7            push a
0829   0983 74            mov d, b
0830   0984 DA            push d
0831   0985 29 93 3C      mov b, [__pos] ; pos
0832   0988 E7            pop d
0833   0989 10 02 00      mov a, 2
0834   098C AC            mul a, b
0835   098D 5A            add d, b
0836   098E E4            pop a
0837   098F 2A            mov b, [d]
0838   0990 D7            push a
0839   0991 11            mov a, b
0840   0992 26 64 00      mov b, 100
0841   0995 AE            div a, b
0842   0996 FD 78         mov g, a
0843   0998 11            mov a, b
0844   0999 FD 27         mov b, g
0845   099B E4            pop a
0846   099C FD 42 6F 3B   mov [__ioshift], b
0847   09A0 29 D5 3B      mov b, [__anarr] ; anarr
0848   09A3 D7            push a
0849   09A4 74            mov d, b
0850   09A5 DA            push d
0851   09A6 29 93 3C      mov b, [__pos] ; pos
0852   09A9 D7            push a
0853   09AA 11            mov a, b
0854   09AB 29 BB 3B      mov b, [__datumpos] ; datumpos
0855   09AE D7            push a
0856   09AF 11            mov a, b
0857   09B0 26 06 00      mov b, 6
0858   09B3 AC            mul a, b
0859   09B4 E4            pop a
0860   09B5 60            sub a, b
0861   09B6 27            mov b, a
0862   09B7 E4            pop a
0863   09B8 D7            push a
0864   09B9 11            mov a, b
0865   09BA 26 02 00      mov b, 2
0866   09BD AC            mul a, b
0867   09BE E4            pop a
0868   09BF D7            push a
0869   09C0 11            mov a, b
0870   09C1 26 01 00      mov b, 1
0871   09C4 54            add a, b
0872   09C5 27            mov b, a
0873   09C6 E4            pop a
0874   09C7 E7            pop d
0875   09C8 10 02 00      mov a, 2
0876   09CB AC            mul a, b
0877   09CC 5A            add d, b
0878   09CD E4            pop a
0879   09CE DA            push d
0880   09CF 29 6F 3B      mov b, [__ioshift] ; ioshift
0881   09D2 E7            pop d
0882   09D3 FD 43         mov [d], b
0883   09D5 29 D5 3B      mov b, [__anarr] ; anarr
0884   09D8 D7            push a
0885   09D9 74            mov d, b
0886   09DA DA            push d
0887   09DB 29 93 3C      mov b, [__pos] ; pos
0888   09DE D7            push a
0889   09DF 11            mov a, b
0890   09E0 29 BB 3B      mov b, [__datumpos] ; datumpos
0891   09E3 D7            push a
0892   09E4 11            mov a, b
0893   09E5 26 06 00      mov b, 6
0894   09E8 AC            mul a, b
0895   09E9 E4            pop a
0896   09EA 60            sub a, b
0897   09EB 27            mov b, a
0898   09EC E4            pop a
0899   09ED D7            push a
0900   09EE 11            mov a, b
0901   09EF 26 02 00      mov b, 2
0902   09F2 AC            mul a, b
0903   09F3 E4            pop a
0904   09F4 E7            pop d
0905   09F5 10 02 00      mov a, 2
0906   09F8 AC            mul a, b
0907   09F9 5A            add d, b
0908   09FA E4            pop a
0909   09FB DA            push d
0910   09FC 29 B9 3B      mov b, [__datum] ; datum
0911   09FF D7            push a
0912   0A00 74            mov d, b
0913   0A01 DA            push d
0914   0A02 29 93 3C      mov b, [__pos] ; pos
0915   0A05 E7            pop d
0916   0A06 10 02 00      mov a, 2
0917   0A09 AC            mul a, b
0918   0A0A 5A            add d, b
0919   0A0B E4            pop a
0920   0A0C 2A            mov b, [d]
0921   0A0D D7            push a
0922   0A0E 11            mov a, b
0923   0A0F 29 6F 3B      mov b, [__ioshift] ; ioshift
0924   0A12 D7            push a
0925   0A13 11            mov a, b
0926   0A14 26 64 00      mov b, 100
0927   0A17 AC            mul a, b
0928   0A18 E4            pop a
0929   0A19 60            sub a, b
0930   0A1A 27            mov b, a
0931   0A1B E4            pop a
0932   0A1C E7            pop d
0933   0A1D FD 43         mov [d], b
0934   0A1F             _for15_update:
0935   0A1F 29 93 3C      mov b, [__pos] ; pos
0936   0A22 D7            push a
0937   0A23 11            mov a, b
0938   0A24 FD 77         inc b
0939   0A26 FD 42 93 3C   mov [__pos], b
0940   0A2A 27            mov b, a
0941   0A2B E4            pop a
0942   0A2C 0A 51 09      jmp _for15_cond
0943   0A2F             _for15_exit:
0944   0A2F 26 01 00      mov b, 1
0945   0A32 FD 42 BB 3B   mov [__datumpos], b
0946   0A36             _for16_init:
0947   0A36 29 BB 3B      mov b, [__datumpos] ; datumpos
0948   0A39 D7            push a
0949   0A3A 11            mov a, b
0950   0A3B 26 06 00      mov b, 6
0951   0A3E AC            mul a, b
0952   0A3F E4            pop a
0953   0A40 FD 42 93 3C   mov [__pos], b
0954   0A44             _for16_cond:
0955   0A44 29 93 3C      mov b, [__pos] ; pos
0956   0A47 D7            push a
0957   0A48 11            mov a, b
0958   0A49 29 BB 3B      mov b, [__datumpos] ; datumpos
0959   0A4C D7            push a
0960   0A4D 11            mov a, b
0961   0A4E 26 06 00      mov b, 6
0962   0A51 AC            mul a, b
0963   0A52 E4            pop a
0964   0A53 D7            push a
0965   0A54 11            mov a, b
0966   0A55 26 06 00      mov b, 6
0967   0A58 54            add a, b
0968   0A59 27            mov b, a
0969   0A5A E4            pop a
0970   0A5B B0            cmp a, b
0971   0A5C 0E            lodflgs
0972   0A5D 2F            mov bl, al
0973   0A5E FD A2 03      shr al, 3
0974   0A61 FD A4 02      shr bl, 2
0975   0A64 FD 87 01      and bl, %00000001
0976   0A67 90            xor al, bl ; < (signed)
0977   0A68 22 00         mov ah, 0
0978   0A6A 27            mov b, a
0979   0A6B E4            pop a
0980   0A6C C0 00 00      cmp b, 0
0981   0A6F C6 22 0B      je _for16_exit
0982   0A72             _for16_block:
0983   0A72 29 B9 3B      mov b, [__datum] ; datum
0984   0A75 D7            push a
0985   0A76 74            mov d, b
0986   0A77 DA            push d
0987   0A78 29 93 3C      mov b, [__pos] ; pos
0988   0A7B E7            pop d
0989   0A7C 10 02 00      mov a, 2
0990   0A7F AC            mul a, b
0991   0A80 5A            add d, b
0992   0A81 E4            pop a
0993   0A82 2A            mov b, [d]
0994   0A83 D7            push a
0995   0A84 11            mov a, b
0996   0A85 26 64 00      mov b, 100
0997   0A88 AE            div a, b
0998   0A89 FD 78         mov g, a
0999   0A8B 11            mov a, b
1000   0A8C FD 27         mov b, g
1001   0A8E E4            pop a
1002   0A8F FD 42 6F 3B   mov [__ioshift], b
1003   0A93 29 EF 3B      mov b, [__bnarr] ; bnarr
1004   0A96 D7            push a
1005   0A97 74            mov d, b
1006   0A98 DA            push d
1007   0A99 29 93 3C      mov b, [__pos] ; pos
1008   0A9C D7            push a
1009   0A9D 11            mov a, b
1010   0A9E 29 BB 3B      mov b, [__datumpos] ; datumpos
1011   0AA1 D7            push a
1012   0AA2 11            mov a, b
1013   0AA3 26 06 00      mov b, 6
1014   0AA6 AC            mul a, b
1015   0AA7 E4            pop a
1016   0AA8 60            sub a, b
1017   0AA9 27            mov b, a
1018   0AAA E4            pop a
1019   0AAB D7            push a
1020   0AAC 11            mov a, b
1021   0AAD 26 02 00      mov b, 2
1022   0AB0 AC            mul a, b
1023   0AB1 E4            pop a
1024   0AB2 D7            push a
1025   0AB3 11            mov a, b
1026   0AB4 26 01 00      mov b, 1
1027   0AB7 54            add a, b
1028   0AB8 27            mov b, a
1029   0AB9 E4            pop a
1030   0ABA E7            pop d
1031   0ABB 10 02 00      mov a, 2
1032   0ABE AC            mul a, b
1033   0ABF 5A            add d, b
1034   0AC0 E4            pop a
1035   0AC1 DA            push d
1036   0AC2 29 6F 3B      mov b, [__ioshift] ; ioshift
1037   0AC5 E7            pop d
1038   0AC6 FD 43         mov [d], b
1039   0AC8 29 EF 3B      mov b, [__bnarr] ; bnarr
1040   0ACB D7            push a
1041   0ACC 74            mov d, b
1042   0ACD DA            push d
1043   0ACE 29 93 3C      mov b, [__pos] ; pos
1044   0AD1 D7            push a
1045   0AD2 11            mov a, b
1046   0AD3 29 BB 3B      mov b, [__datumpos] ; datumpos
1047   0AD6 D7            push a
1048   0AD7 11            mov a, b
1049   0AD8 26 06 00      mov b, 6
1050   0ADB AC            mul a, b
1051   0ADC E4            pop a
1052   0ADD 60            sub a, b
1053   0ADE 27            mov b, a
1054   0ADF E4            pop a
1055   0AE0 D7            push a
1056   0AE1 11            mov a, b
1057   0AE2 26 02 00      mov b, 2
1058   0AE5 AC            mul a, b
1059   0AE6 E4            pop a
1060   0AE7 E7            pop d
1061   0AE8 10 02 00      mov a, 2
1062   0AEB AC            mul a, b
1063   0AEC 5A            add d, b
1064   0AED E4            pop a
1065   0AEE DA            push d
1066   0AEF 29 B9 3B      mov b, [__datum] ; datum
1067   0AF2 D7            push a
1068   0AF3 74            mov d, b
1069   0AF4 DA            push d
1070   0AF5 29 93 3C      mov b, [__pos] ; pos
1071   0AF8 E7            pop d
1072   0AF9 10 02 00      mov a, 2
1073   0AFC AC            mul a, b
1074   0AFD 5A            add d, b
1075   0AFE E4            pop a
1076   0AFF 2A            mov b, [d]
1077   0B00 D7            push a
1078   0B01 11            mov a, b
1079   0B02 29 6F 3B      mov b, [__ioshift] ; ioshift
1080   0B05 D7            push a
1081   0B06 11            mov a, b
1082   0B07 26 64 00      mov b, 100
1083   0B0A AC            mul a, b
1084   0B0B E4            pop a
1085   0B0C 60            sub a, b
1086   0B0D 27            mov b, a
1087   0B0E E4            pop a
1088   0B0F E7            pop d
1089   0B10 FD 43         mov [d], b
1090   0B12             _for16_update:
1091   0B12 29 93 3C      mov b, [__pos] ; pos
1092   0B15 D7            push a
1093   0B16 11            mov a, b
1094   0B17 FD 77         inc b
1095   0B19 FD 42 93 3C   mov [__pos], b
1096   0B1D 27            mov b, a
1097   0B1E E4            pop a
1098   0B1F 0A 44 0A      jmp _for16_cond
1099   0B22             _for16_exit:
1100   0B22             _for17_init:
1101   0B22 26 00 00      mov b, 0
1102   0B25 FD 42 93 3C   mov [__pos], b
1103   0B29             _for17_cond:
1104   0B29 29 93 3C      mov b, [__pos] ; pos
1105   0B2C D7            push a
1106   0B2D 11            mov a, b
1107   0B2E 26 0C 00      mov b, 12
1108   0B31 B0            cmp a, b
1109   0B32 0E            lodflgs
1110   0B33 2F            mov bl, al
1111   0B34 FD A2 03      shr al, 3
1112   0B37 FD A4 02      shr bl, 2
1113   0B3A FD 87 01      and bl, %00000001
1114   0B3D 90            xor al, bl ; < (signed)
1115   0B3E 22 00         mov ah, 0
1116   0B40 27            mov b, a
1117   0B41 E4            pop a
1118   0B42 C0 00 00      cmp b, 0
1119   0B45 C6 A2 0B      je _for17_exit
1120   0B48             _for17_block:
1121   0B48 29 09 3C      mov b, [__anarrbkp] ; anarrbkp
1122   0B4B D7            push a
1123   0B4C 74            mov d, b
1124   0B4D DA            push d
1125   0B4E 29 93 3C      mov b, [__pos] ; pos
1126   0B51 E7            pop d
1127   0B52 10 02 00      mov a, 2
1128   0B55 AC            mul a, b
1129   0B56 5A            add d, b
1130   0B57 E4            pop a
1131   0B58 DA            push d
1132   0B59 29 D5 3B      mov b, [__anarr] ; anarr
1133   0B5C D7            push a
1134   0B5D 74            mov d, b
1135   0B5E DA            push d
1136   0B5F 29 93 3C      mov b, [__pos] ; pos
1137   0B62 E7            pop d
1138   0B63 10 02 00      mov a, 2
1139   0B66 AC            mul a, b
1140   0B67 5A            add d, b
1141   0B68 E4            pop a
1142   0B69 2A            mov b, [d]
1143   0B6A E7            pop d
1144   0B6B FD 43         mov [d], b
1145   0B6D 29 23 3C      mov b, [__bnarrbkp] ; bnarrbkp
1146   0B70 D7            push a
1147   0B71 74            mov d, b
1148   0B72 DA            push d
1149   0B73 29 93 3C      mov b, [__pos] ; pos
1150   0B76 E7            pop d
1151   0B77 10 02 00      mov a, 2
1152   0B7A AC            mul a, b
1153   0B7B 5A            add d, b
1154   0B7C E4            pop a
1155   0B7D DA            push d
1156   0B7E 29 EF 3B      mov b, [__bnarr] ; bnarr
1157   0B81 D7            push a
1158   0B82 74            mov d, b
1159   0B83 DA            push d
1160   0B84 29 93 3C      mov b, [__pos] ; pos
1161   0B87 E7            pop d
1162   0B88 10 02 00      mov a, 2
1163   0B8B AC            mul a, b
1164   0B8C 5A            add d, b
1165   0B8D E4            pop a
1166   0B8E 2A            mov b, [d]
1167   0B8F E7            pop d
1168   0B90 FD 43         mov [d], b
1169   0B92             _for17_update:
1170   0B92 29 93 3C      mov b, [__pos] ; pos
1171   0B95 D7            push a
1172   0B96 11            mov a, b
1173   0B97 FD 77         inc b
1174   0B99 FD 42 93 3C   mov [__pos], b
1175   0B9D 27            mov b, a
1176   0B9E E4            pop a
1177   0B9F 0A 29 0B      jmp _for17_cond
1178   0BA2             _for17_exit:
1179   0BA2             _for18_init:
1180   0BA2 26 00 00      mov b, 0
1181   0BA5 FD 42 93 3C   mov [__pos], b
1182   0BA9             _for18_cond:
1183   0BA9 29 93 3C      mov b, [__pos] ; pos
1184   0BAC D7            push a
1185   0BAD 11            mov a, b
1186   0BAE 26 3C 00      mov b, 60
1187   0BB1 B0            cmp a, b
1188   0BB2 0E            lodflgs
1189   0BB3 2F            mov bl, al
1190   0BB4 FD A2 03      shr al, 3
1191   0BB7 FD A4 02      shr bl, 2
1192   0BBA FD 87 01      and bl, %00000001
1193   0BBD 90            xor al, bl ; < (signed)
1194   0BBE 22 00         mov ah, 0
1195   0BC0 27            mov b, a
1196   0BC1 E4            pop a
1197   0BC2 C0 00 00      cmp b, 0
1198   0BC5 C6 E4 0B      je _for18_exit
1199   0BC8             _for18_block:
1200   0BC8 26 00 00      mov b, 0
1201   0BCB FD AB         swp b
1202   0BCD D8            push b
1203   0BCE 07 C2 15      call prnnum
1204   0BD1 51 02 00      add sp, 2
1205   0BD4             _for18_update:
1206   0BD4 29 93 3C      mov b, [__pos] ; pos
1207   0BD7 D7            push a
1208   0BD8 11            mov a, b
1209   0BD9 FD 77         inc b
1210   0BDB FD 42 93 3C   mov [__pos], b
1211   0BDF 27            mov b, a
1212   0BE0 E4            pop a
1213   0BE1 0A A9 0B      jmp _for18_cond
1214   0BE4             _for18_exit:
1215   0BE4 26 D1 3C      mov b, __string_0 ; "\n"
1216   0BE7 FD AB         swp b
1217   0BE9 D8            push b
1218   0BEA 07 8B 15      call print
1219   0BED 51 02 00      add sp, 2
1220   0BF0 07 A6 25      call plus
1221   0BF3 26 02 00      mov b, 2
1222   0BF6 FD 42 BB 3B   mov [__datumpos], b
1223   0BFA             _for19_init:
1224   0BFA 29 BB 3B      mov b, [__datumpos] ; datumpos
1225   0BFD D7            push a
1226   0BFE 11            mov a, b
1227   0BFF 26 06 00      mov b, 6
1228   0C02 AC            mul a, b
1229   0C03 E4            pop a
1230   0C04 FD 42 93 3C   mov [__pos], b
1231   0C08             _for19_cond:
1232   0C08 29 93 3C      mov b, [__pos] ; pos
1233   0C0B D7            push a
1234   0C0C 11            mov a, b
1235   0C0D 29 BB 3B      mov b, [__datumpos] ; datumpos
1236   0C10 D7            push a
1237   0C11 11            mov a, b
1238   0C12 26 06 00      mov b, 6
1239   0C15 AC            mul a, b
1240   0C16 E4            pop a
1241   0C17 D7            push a
1242   0C18 11            mov a, b
1243   0C19 26 06 00      mov b, 6
1244   0C1C 54            add a, b
1245   0C1D 27            mov b, a
1246   0C1E E4            pop a
1247   0C1F B0            cmp a, b
1248   0C20 0E            lodflgs
1249   0C21 2F            mov bl, al
1250   0C22 FD A2 03      shr al, 3
1251   0C25 FD A4 02      shr bl, 2
1252   0C28 FD 87 01      and bl, %00000001
1253   0C2B 90            xor al, bl ; < (signed)
1254   0C2C 22 00         mov ah, 0
1255   0C2E 27            mov b, a
1256   0C2F E4            pop a
1257   0C30 C0 00 00      cmp b, 0
1258   0C33 C6 BC 0C      je _for19_exit
1259   0C36             _for19_block:
1260   0C36 29 B9 3B      mov b, [__datum] ; datum
1261   0C39 D7            push a
1262   0C3A 74            mov d, b
1263   0C3B DA            push d
1264   0C3C 29 93 3C      mov b, [__pos] ; pos
1265   0C3F E7            pop d
1266   0C40 10 02 00      mov a, 2
1267   0C43 AC            mul a, b
1268   0C44 5A            add d, b
1269   0C45 E4            pop a
1270   0C46 DA            push d
1271   0C47 29 3D 3C      mov b, [__cnarr] ; cnarr
1272   0C4A D7            push a
1273   0C4B 74            mov d, b
1274   0C4C DA            push d
1275   0C4D 29 93 3C      mov b, [__pos] ; pos
1276   0C50 D7            push a
1277   0C51 11            mov a, b
1278   0C52 29 BB 3B      mov b, [__datumpos] ; datumpos
1279   0C55 D7            push a
1280   0C56 11            mov a, b
1281   0C57 26 06 00      mov b, 6
1282   0C5A AC            mul a, b
1283   0C5B E4            pop a
1284   0C5C 60            sub a, b
1285   0C5D 27            mov b, a
1286   0C5E E4            pop a
1287   0C5F D7            push a
1288   0C60 11            mov a, b
1289   0C61 26 02 00      mov b, 2
1290   0C64 AC            mul a, b
1291   0C65 E4            pop a
1292   0C66 D7            push a
1293   0C67 11            mov a, b
1294   0C68 26 01 00      mov b, 1
1295   0C6B 54            add a, b
1296   0C6C 27            mov b, a
1297   0C6D E4            pop a
1298   0C6E E7            pop d
1299   0C6F 10 02 00      mov a, 2
1300   0C72 AC            mul a, b
1301   0C73 5A            add d, b
1302   0C74 E4            pop a
1303   0C75 2A            mov b, [d]
1304   0C76 D7            push a
1305   0C77 11            mov a, b
1306   0C78 26 64 00      mov b, 100
1307   0C7B AC            mul a, b
1308   0C7C E4            pop a
1309   0C7D D7            push a
1310   0C7E 11            mov a, b
1311   0C7F 29 3D 3C      mov b, [__cnarr] ; cnarr
1312   0C82 D7            push a
1313   0C83 74            mov d, b
1314   0C84 DA            push d
1315   0C85 29 93 3C      mov b, [__pos] ; pos
1316   0C88 D7            push a
1317   0C89 11            mov a, b
1318   0C8A 29 BB 3B      mov b, [__datumpos] ; datumpos
1319   0C8D D7            push a
1320   0C8E 11            mov a, b
1321   0C8F 26 06 00      mov b, 6
1322   0C92 AC            mul a, b
1323   0C93 E4            pop a
1324   0C94 60            sub a, b
1325   0C95 27            mov b, a
1326   0C96 E4            pop a
1327   0C97 D7            push a
1328   0C98 11            mov a, b
1329   0C99 26 02 00      mov b, 2
1330   0C9C AC            mul a, b
1331   0C9D E4            pop a
1332   0C9E E7            pop d
1333   0C9F 10 02 00      mov a, 2
1334   0CA2 AC            mul a, b
1335   0CA3 5A            add d, b
1336   0CA4 E4            pop a
1337   0CA5 2A            mov b, [d]
1338   0CA6 54            add a, b
1339   0CA7 27            mov b, a
1340   0CA8 E4            pop a
1341   0CA9 E7            pop d
1342   0CAA FD 43         mov [d], b
1343   0CAC             _for19_update:
1344   0CAC 29 93 3C      mov b, [__pos] ; pos
1345   0CAF D7            push a
1346   0CB0 11            mov a, b
1347   0CB1 FD 77         inc b
1348   0CB3 FD 42 93 3C   mov [__pos], b
1349   0CB7 27            mov b, a
1350   0CB8 E4            pop a
1351   0CB9 0A 08 0C      jmp _for19_cond
1352   0CBC             _for19_exit:
1353   0CBC             _for20_init:
1354   0CBC 26 12 00      mov b, 18
1355   0CBF FD 42 93 3C   mov [__pos], b
1356   0CC3             _for20_cond:
1357   0CC3 29 93 3C      mov b, [__pos] ; pos
1358   0CC6 D7            push a
1359   0CC7 11            mov a, b
1360   0CC8 26 0C 00      mov b, 12
1361   0CCB B0            cmp a, b
1362   0CCC 0E            lodflgs
1363   0CCD 2F            mov bl, al
1364   0CCE FD 78         mov g, a
1365   0CD0 FD A2 03      shr al, 3
1366   0CD3 FD A4 02      shr bl, 2
1367   0CD6 FD 87 01      and bl, %00000001
1368   0CD9 90            xor al, bl
1369   0CDA FD 27         mov b, g
1370   0CDC FD 87 01      and bl, %00000001
1371   0CDF 8C            or al, bl
1372   0CE0 8F 01         xor al, %00000001 ; > (signed)
1373   0CE2 22 00         mov ah, 0
1374   0CE4 27            mov b, a
1375   0CE5 E4            pop a
1376   0CE6 C0 00 00      cmp b, 0
1377   0CE9 C6 EA 0D      je _for20_exit
1378   0CEC             _for20_block:
1379   0CEC             _if21_cond:
1380   0CEC 29 B9 3B      mov b, [__datum] ; datum
1381   0CEF D7            push a
1382   0CF0 74            mov d, b
1383   0CF1 DA            push d
1384   0CF2 29 93 3C      mov b, [__pos] ; pos
1385   0CF5 D7            push a
1386   0CF6 11            mov a, b
1387   0CF7 26 01 00      mov b, 1
1388   0CFA 60            sub a, b
1389   0CFB 27            mov b, a
1390   0CFC E4            pop a
1391   0CFD E7            pop d
1392   0CFE 10 02 00      mov a, 2
1393   0D01 AC            mul a, b
1394   0D02 5A            add d, b
1395   0D03 E4            pop a
1396   0D04 2A            mov b, [d]
1397   0D05 D7            push a
1398   0D06 11            mov a, b
1399   0D07 26 E8 03      mov b, 1000
1400   0D0A B0            cmp a, b
1401   0D0B 0E            lodflgs
1402   0D0C 2F            mov bl, al
1403   0D0D FD A2 03      shr al, 3
1404   0D10 FD A4 02      shr bl, 2
1405   0D13 FD 87 01      and bl, %00000001
1406   0D16 90            xor al, bl ; < (signed)
1407   0D17 22 00         mov ah, 0
1408   0D19 27            mov b, a
1409   0D1A E4            pop a
1410   0D1B C0 00 00      cmp b, 0
1411   0D1E C6 30 0D      je _if21_exit
1412   0D21             _if21_true:
1413   0D21 26 00 00      mov b, 0
1414   0D24 FD AB         swp b
1415   0D26 D8            push b
1416   0D27 07 C2 15      call prnnum
1417   0D2A 51 02 00      add sp, 2
1418   0D2D 0A 30 0D      jmp _if21_exit
1419   0D30             _if21_exit:
1420   0D30             _if22_cond:
1421   0D30 29 B9 3B      mov b, [__datum] ; datum
1422   0D33 D7            push a
1423   0D34 74            mov d, b
1424   0D35 DA            push d
1425   0D36 29 93 3C      mov b, [__pos] ; pos
1426   0D39 D7            push a
1427   0D3A 11            mov a, b
1428   0D3B 26 01 00      mov b, 1
1429   0D3E 60            sub a, b
1430   0D3F 27            mov b, a
1431   0D40 E4            pop a
1432   0D41 E7            pop d
1433   0D42 10 02 00      mov a, 2
1434   0D45 AC            mul a, b
1435   0D46 5A            add d, b
1436   0D47 E4            pop a
1437   0D48 2A            mov b, [d]
1438   0D49 D7            push a
1439   0D4A 11            mov a, b
1440   0D4B 26 64 00      mov b, 100
1441   0D4E B0            cmp a, b
1442   0D4F 0E            lodflgs
1443   0D50 2F            mov bl, al
1444   0D51 FD A2 03      shr al, 3
1445   0D54 FD A4 02      shr bl, 2
1446   0D57 FD 87 01      and bl, %00000001
1447   0D5A 90            xor al, bl ; < (signed)
1448   0D5B 22 00         mov ah, 0
1449   0D5D 27            mov b, a
1450   0D5E E4            pop a
1451   0D5F C0 00 00      cmp b, 0
1452   0D62 C6 74 0D      je _if22_exit
1453   0D65             _if22_true:
1454   0D65 26 00 00      mov b, 0
1455   0D68 FD AB         swp b
1456   0D6A D8            push b
1457   0D6B 07 C2 15      call prnnum
1458   0D6E 51 02 00      add sp, 2
1459   0D71 0A 74 0D      jmp _if22_exit
1460   0D74             _if22_exit:
1461   0D74             _if23_cond:
1462   0D74 29 B9 3B      mov b, [__datum] ; datum
1463   0D77 D7            push a
1464   0D78 74            mov d, b
1465   0D79 DA            push d
1466   0D7A 29 93 3C      mov b, [__pos] ; pos
1467   0D7D D7            push a
1468   0D7E 11            mov a, b
1469   0D7F 26 01 00      mov b, 1
1470   0D82 60            sub a, b
1471   0D83 27            mov b, a
1472   0D84 E4            pop a
1473   0D85 E7            pop d
1474   0D86 10 02 00      mov a, 2
1475   0D89 AC            mul a, b
1476   0D8A 5A            add d, b
1477   0D8B E4            pop a
1478   0D8C 2A            mov b, [d]
1479   0D8D D7            push a
1480   0D8E 11            mov a, b
1481   0D8F 26 0A 00      mov b, 10
1482   0D92 B0            cmp a, b
1483   0D93 0E            lodflgs
1484   0D94 2F            mov bl, al
1485   0D95 FD A2 03      shr al, 3
1486   0D98 FD A4 02      shr bl, 2
1487   0D9B FD 87 01      and bl, %00000001
1488   0D9E 90            xor al, bl ; < (signed)
1489   0D9F 22 00         mov ah, 0
1490   0DA1 27            mov b, a
1491   0DA2 E4            pop a
1492   0DA3 C0 00 00      cmp b, 0
1493   0DA6 C6 B8 0D      je _if23_exit
1494   0DA9             _if23_true:
1495   0DA9 26 00 00      mov b, 0
1496   0DAC FD AB         swp b
1497   0DAE D8            push b
1498   0DAF 07 C2 15      call prnnum
1499   0DB2 51 02 00      add sp, 2
1500   0DB5 0A B8 0D      jmp _if23_exit
1501   0DB8             _if23_exit:
1502   0DB8 29 B9 3B      mov b, [__datum] ; datum
1503   0DBB D7            push a
1504   0DBC 74            mov d, b
1505   0DBD DA            push d
1506   0DBE 29 93 3C      mov b, [__pos] ; pos
1507   0DC1 D7            push a
1508   0DC2 11            mov a, b
1509   0DC3 26 01 00      mov b, 1
1510   0DC6 60            sub a, b
1511   0DC7 27            mov b, a
1512   0DC8 E4            pop a
1513   0DC9 E7            pop d
1514   0DCA 10 02 00      mov a, 2
1515   0DCD AC            mul a, b
1516   0DCE 5A            add d, b
1517   0DCF E4            pop a
1518   0DD0 2A            mov b, [d]
1519   0DD1 FD AB         swp b
1520   0DD3 D8            push b
1521   0DD4 07 A6 15      call prnnumspace
1522   0DD7 51 02 00      add sp, 2
1523   0DDA             _for20_update:
1524   0DDA 29 93 3C      mov b, [__pos] ; pos
1525   0DDD D7            push a
1526   0DDE 11            mov a, b
1527   0DDF FD 7D         dec b
1528   0DE1 FD 42 93 3C   mov [__pos], b
1529   0DE5 27            mov b, a
1530   0DE6 E4            pop a
1531   0DE7 0A C3 0C      jmp _for20_cond
1532   0DEA             _for20_exit:
1533   0DEA 26 D1 3C      mov b, __string_0 ; "\n"
1534   0DED FD AB         swp b
1535   0DEF D8            push b
1536   0DF0 07 8B 15      call print
1537   0DF3 51 02 00      add sp, 2
1538   0DF6             _for24_init:
1539   0DF6 26 00 00      mov b, 0
1540   0DF9 FD 42 93 3C   mov [__pos], b
1541   0DFD             _for24_cond:
1542   0DFD 29 93 3C      mov b, [__pos] ; pos
1543   0E00 D7            push a
1544   0E01 11            mov a, b
1545   0E02 26 0C 00      mov b, 12
1546   0E05 B0            cmp a, b
1547   0E06 0E            lodflgs
1548   0E07 2F            mov bl, al
1549   0E08 FD A2 03      shr al, 3
1550   0E0B FD A4 02      shr bl, 2
1551   0E0E FD 87 01      and bl, %00000001
1552   0E11 90            xor al, bl ; < (signed)
1553   0E12 22 00         mov ah, 0
1554   0E14 27            mov b, a
1555   0E15 E4            pop a
1556   0E16 C0 00 00      cmp b, 0
1557   0E19 C6 76 0E      je _for24_exit
1558   0E1C             _for24_block:
1559   0E1C 29 D5 3B      mov b, [__anarr] ; anarr
1560   0E1F D7            push a
1561   0E20 74            mov d, b
1562   0E21 DA            push d
1563   0E22 29 93 3C      mov b, [__pos] ; pos
1564   0E25 E7            pop d
1565   0E26 10 02 00      mov a, 2
1566   0E29 AC            mul a, b
1567   0E2A 5A            add d, b
1568   0E2B E4            pop a
1569   0E2C DA            push d
1570   0E2D 29 09 3C      mov b, [__anarrbkp] ; anarrbkp
1571   0E30 D7            push a
1572   0E31 74            mov d, b
1573   0E32 DA            push d
1574   0E33 29 93 3C      mov b, [__pos] ; pos
1575   0E36 E7            pop d
1576   0E37 10 02 00      mov a, 2
1577   0E3A AC            mul a, b
1578   0E3B 5A            add d, b
1579   0E3C E4            pop a
1580   0E3D 2A            mov b, [d]
1581   0E3E E7            pop d
1582   0E3F FD 43         mov [d], b
1583   0E41 29 EF 3B      mov b, [__bnarr] ; bnarr
1584   0E44 D7            push a
1585   0E45 74            mov d, b
1586   0E46 DA            push d
1587   0E47 29 93 3C      mov b, [__pos] ; pos
1588   0E4A E7            pop d
1589   0E4B 10 02 00      mov a, 2
1590   0E4E AC            mul a, b
1591   0E4F 5A            add d, b
1592   0E50 E4            pop a
1593   0E51 DA            push d
1594   0E52 29 23 3C      mov b, [__bnarrbkp] ; bnarrbkp
1595   0E55 D7            push a
1596   0E56 74            mov d, b
1597   0E57 DA            push d
1598   0E58 29 93 3C      mov b, [__pos] ; pos
1599   0E5B E7            pop d
1600   0E5C 10 02 00      mov a, 2
1601   0E5F AC            mul a, b
1602   0E60 5A            add d, b
1603   0E61 E4            pop a
1604   0E62 2A            mov b, [d]
1605   0E63 E7            pop d
1606   0E64 FD 43         mov [d], b
1607   0E66             _for24_update:
1608   0E66 29 93 3C      mov b, [__pos] ; pos
1609   0E69 D7            push a
1610   0E6A 11            mov a, b
1611   0E6B FD 77         inc b
1612   0E6D FD 42 93 3C   mov [__pos], b
1613   0E71 27            mov b, a
1614   0E72 E4            pop a
1615   0E73 0A FD 0D      jmp _for24_cond
1616   0E76             _for24_exit:
1617   0E76 07 31 21      call minus
1618   0E79 26 02 00      mov b, 2
1619   0E7C FD 42 BB 3B   mov [__datumpos], b
1620   0E80             _for25_init:
1621   0E80 29 BB 3B      mov b, [__datumpos] ; datumpos
1622   0E83 D7            push a
1623   0E84 11            mov a, b
1624   0E85 26 06 00      mov b, 6
1625   0E88 AC            mul a, b
1626   0E89 E4            pop a
1627   0E8A FD 42 93 3C   mov [__pos], b
1628   0E8E             _for25_cond:
1629   0E8E 29 93 3C      mov b, [__pos] ; pos
1630   0E91 D7            push a
1631   0E92 11            mov a, b
1632   0E93 29 BB 3B      mov b, [__datumpos] ; datumpos
1633   0E96 D7            push a
1634   0E97 11            mov a, b
1635   0E98 26 06 00      mov b, 6
1636   0E9B AC            mul a, b
1637   0E9C E4            pop a
1638   0E9D D7            push a
1639   0E9E 11            mov a, b
1640   0E9F 26 06 00      mov b, 6
1641   0EA2 54            add a, b
1642   0EA3 27            mov b, a
1643   0EA4 E4            pop a
1644   0EA5 B0            cmp a, b
1645   0EA6 0E            lodflgs
1646   0EA7 2F            mov bl, al
1647   0EA8 FD A2 03      shr al, 3
1648   0EAB FD A4 02      shr bl, 2
1649   0EAE FD 87 01      and bl, %00000001
1650   0EB1 90            xor al, bl ; < (signed)
1651   0EB2 22 00         mov ah, 0
1652   0EB4 27            mov b, a
1653   0EB5 E4            pop a
1654   0EB6 C0 00 00      cmp b, 0
1655   0EB9 C6 42 0F      je _for25_exit
1656   0EBC             _for25_block:
1657   0EBC 29 B9 3B      mov b, [__datum] ; datum
1658   0EBF D7            push a
1659   0EC0 74            mov d, b
1660   0EC1 DA            push d
1661   0EC2 29 93 3C      mov b, [__pos] ; pos
1662   0EC5 E7            pop d
1663   0EC6 10 02 00      mov a, 2
1664   0EC9 AC            mul a, b
1665   0ECA 5A            add d, b
1666   0ECB E4            pop a
1667   0ECC DA            push d
1668   0ECD 29 3D 3C      mov b, [__cnarr] ; cnarr
1669   0ED0 D7            push a
1670   0ED1 74            mov d, b
1671   0ED2 DA            push d
1672   0ED3 29 93 3C      mov b, [__pos] ; pos
1673   0ED6 D7            push a
1674   0ED7 11            mov a, b
1675   0ED8 29 BB 3B      mov b, [__datumpos] ; datumpos
1676   0EDB D7            push a
1677   0EDC 11            mov a, b
1678   0EDD 26 06 00      mov b, 6
1679   0EE0 AC            mul a, b
1680   0EE1 E4            pop a
1681   0EE2 60            sub a, b
1682   0EE3 27            mov b, a
1683   0EE4 E4            pop a
1684   0EE5 D7            push a
1685   0EE6 11            mov a, b
1686   0EE7 26 02 00      mov b, 2
1687   0EEA AC            mul a, b
1688   0EEB E4            pop a
1689   0EEC D7            push a
1690   0EED 11            mov a, b
1691   0EEE 26 01 00      mov b, 1
1692   0EF1 54            add a, b
1693   0EF2 27            mov b, a
1694   0EF3 E4            pop a
1695   0EF4 E7            pop d
1696   0EF5 10 02 00      mov a, 2
1697   0EF8 AC            mul a, b
1698   0EF9 5A            add d, b
1699   0EFA E4            pop a
1700   0EFB 2A            mov b, [d]
1701   0EFC D7            push a
1702   0EFD 11            mov a, b
1703   0EFE 26 64 00      mov b, 100
1704   0F01 AC            mul a, b
1705   0F02 E4            pop a
1706   0F03 D7            push a
1707   0F04 11            mov a, b
1708   0F05 29 3D 3C      mov b, [__cnarr] ; cnarr
1709   0F08 D7            push a
1710   0F09 74            mov d, b
1711   0F0A DA            push d
1712   0F0B 29 93 3C      mov b, [__pos] ; pos
1713   0F0E D7            push a
1714   0F0F 11            mov a, b
1715   0F10 29 BB 3B      mov b, [__datumpos] ; datumpos
1716   0F13 D7            push a
1717   0F14 11            mov a, b
1718   0F15 26 06 00      mov b, 6
1719   0F18 AC            mul a, b
1720   0F19 E4            pop a
1721   0F1A 60            sub a, b
1722   0F1B 27            mov b, a
1723   0F1C E4            pop a
1724   0F1D D7            push a
1725   0F1E 11            mov a, b
1726   0F1F 26 02 00      mov b, 2
1727   0F22 AC            mul a, b
1728   0F23 E4            pop a
1729   0F24 E7            pop d
1730   0F25 10 02 00      mov a, 2
1731   0F28 AC            mul a, b
1732   0F29 5A            add d, b
1733   0F2A E4            pop a
1734   0F2B 2A            mov b, [d]
1735   0F2C 54            add a, b
1736   0F2D 27            mov b, a
1737   0F2E E4            pop a
1738   0F2F E7            pop d
1739   0F30 FD 43         mov [d], b
1740   0F32             _for25_update:
1741   0F32 29 93 3C      mov b, [__pos] ; pos
1742   0F35 D7            push a
1743   0F36 11            mov a, b
1744   0F37 FD 77         inc b
1745   0F39 FD 42 93 3C   mov [__pos], b
1746   0F3D 27            mov b, a
1747   0F3E E4            pop a
1748   0F3F 0A 8E 0E      jmp _for25_cond
1749   0F42             _for25_exit:
1750   0F42             _for26_init:
1751   0F42 26 12 00      mov b, 18
1752   0F45 FD 42 93 3C   mov [__pos], b
1753   0F49             _for26_cond:
1754   0F49 29 93 3C      mov b, [__pos] ; pos
1755   0F4C D7            push a
1756   0F4D 11            mov a, b
1757   0F4E 26 0C 00      mov b, 12
1758   0F51 B0            cmp a, b
1759   0F52 0E            lodflgs
1760   0F53 2F            mov bl, al
1761   0F54 FD 78         mov g, a
1762   0F56 FD A2 03      shr al, 3
1763   0F59 FD A4 02      shr bl, 2
1764   0F5C FD 87 01      and bl, %00000001
1765   0F5F 90            xor al, bl
1766   0F60 FD 27         mov b, g
1767   0F62 FD 87 01      and bl, %00000001
1768   0F65 8C            or al, bl
1769   0F66 8F 01         xor al, %00000001 ; > (signed)
1770   0F68 22 00         mov ah, 0
1771   0F6A 27            mov b, a
1772   0F6B E4            pop a
1773   0F6C C0 00 00      cmp b, 0
1774   0F6F C6 70 10      je _for26_exit
1775   0F72             _for26_block:
1776   0F72             _if27_cond:
1777   0F72 29 B9 3B      mov b, [__datum] ; datum
1778   0F75 D7            push a
1779   0F76 74            mov d, b
1780   0F77 DA            push d
1781   0F78 29 93 3C      mov b, [__pos] ; pos
1782   0F7B D7            push a
1783   0F7C 11            mov a, b
1784   0F7D 26 01 00      mov b, 1
1785   0F80 60            sub a, b
1786   0F81 27            mov b, a
1787   0F82 E4            pop a
1788   0F83 E7            pop d
1789   0F84 10 02 00      mov a, 2
1790   0F87 AC            mul a, b
1791   0F88 5A            add d, b
1792   0F89 E4            pop a
1793   0F8A 2A            mov b, [d]
1794   0F8B D7            push a
1795   0F8C 11            mov a, b
1796   0F8D 26 E8 03      mov b, 1000
1797   0F90 B0            cmp a, b
1798   0F91 0E            lodflgs
1799   0F92 2F            mov bl, al
1800   0F93 FD A2 03      shr al, 3
1801   0F96 FD A4 02      shr bl, 2
1802   0F99 FD 87 01      and bl, %00000001
1803   0F9C 90            xor al, bl ; < (signed)
1804   0F9D 22 00         mov ah, 0
1805   0F9F 27            mov b, a
1806   0FA0 E4            pop a
1807   0FA1 C0 00 00      cmp b, 0
1808   0FA4 C6 B6 0F      je _if27_exit
1809   0FA7             _if27_true:
1810   0FA7 26 00 00      mov b, 0
1811   0FAA FD AB         swp b
1812   0FAC D8            push b
1813   0FAD 07 C2 15      call prnnum
1814   0FB0 51 02 00      add sp, 2
1815   0FB3 0A B6 0F      jmp _if27_exit
1816   0FB6             _if27_exit:
1817   0FB6             _if28_cond:
1818   0FB6 29 B9 3B      mov b, [__datum] ; datum
1819   0FB9 D7            push a
1820   0FBA 74            mov d, b
1821   0FBB DA            push d
1822   0FBC 29 93 3C      mov b, [__pos] ; pos
1823   0FBF D7            push a
1824   0FC0 11            mov a, b
1825   0FC1 26 01 00      mov b, 1
1826   0FC4 60            sub a, b
1827   0FC5 27            mov b, a
1828   0FC6 E4            pop a
1829   0FC7 E7            pop d
1830   0FC8 10 02 00      mov a, 2
1831   0FCB AC            mul a, b
1832   0FCC 5A            add d, b
1833   0FCD E4            pop a
1834   0FCE 2A            mov b, [d]
1835   0FCF D7            push a
1836   0FD0 11            mov a, b
1837   0FD1 26 64 00      mov b, 100
1838   0FD4 B0            cmp a, b
1839   0FD5 0E            lodflgs
1840   0FD6 2F            mov bl, al
1841   0FD7 FD A2 03      shr al, 3
1842   0FDA FD A4 02      shr bl, 2
1843   0FDD FD 87 01      and bl, %00000001
1844   0FE0 90            xor al, bl ; < (signed)
1845   0FE1 22 00         mov ah, 0
1846   0FE3 27            mov b, a
1847   0FE4 E4            pop a
1848   0FE5 C0 00 00      cmp b, 0
1849   0FE8 C6 FA 0F      je _if28_exit
1850   0FEB             _if28_true:
1851   0FEB 26 00 00      mov b, 0
1852   0FEE FD AB         swp b
1853   0FF0 D8            push b
1854   0FF1 07 C2 15      call prnnum
1855   0FF4 51 02 00      add sp, 2
1856   0FF7 0A FA 0F      jmp _if28_exit
1857   0FFA             _if28_exit:
1858   0FFA             _if29_cond:
1859   0FFA 29 B9 3B      mov b, [__datum] ; datum
1860   0FFD D7            push a
1861   0FFE 74            mov d, b
1862   0FFF DA            push d
1863   1000 29 93 3C      mov b, [__pos] ; pos
1864   1003 D7            push a
1865   1004 11            mov a, b
1866   1005 26 01 00      mov b, 1
1867   1008 60            sub a, b
1868   1009 27            mov b, a
1869   100A E4            pop a
1870   100B E7            pop d
1871   100C 10 02 00      mov a, 2
1872   100F AC            mul a, b
1873   1010 5A            add d, b
1874   1011 E4            pop a
1875   1012 2A            mov b, [d]
1876   1013 D7            push a
1877   1014 11            mov a, b
1878   1015 26 0A 00      mov b, 10
1879   1018 B0            cmp a, b
1880   1019 0E            lodflgs
1881   101A 2F            mov bl, al
1882   101B FD A2 03      shr al, 3
1883   101E FD A4 02      shr bl, 2
1884   1021 FD 87 01      and bl, %00000001
1885   1024 90            xor al, bl ; < (signed)
1886   1025 22 00         mov ah, 0
1887   1027 27            mov b, a
1888   1028 E4            pop a
1889   1029 C0 00 00      cmp b, 0
1890   102C C6 3E 10      je _if29_exit
1891   102F             _if29_true:
1892   102F 26 00 00      mov b, 0
1893   1032 FD AB         swp b
1894   1034 D8            push b
1895   1035 07 C2 15      call prnnum
1896   1038 51 02 00      add sp, 2
1897   103B 0A 3E 10      jmp _if29_exit
1898   103E             _if29_exit:
1899   103E 29 B9 3B      mov b, [__datum] ; datum
1900   1041 D7            push a
1901   1042 74            mov d, b
1902   1043 DA            push d
1903   1044 29 93 3C      mov b, [__pos] ; pos
1904   1047 D7            push a
1905   1048 11            mov a, b
1906   1049 26 01 00      mov b, 1
1907   104C 60            sub a, b
1908   104D 27            mov b, a
1909   104E E4            pop a
1910   104F E7            pop d
1911   1050 10 02 00      mov a, 2
1912   1053 AC            mul a, b
1913   1054 5A            add d, b
1914   1055 E4            pop a
1915   1056 2A            mov b, [d]
1916   1057 FD AB         swp b
1917   1059 D8            push b
1918   105A 07 A6 15      call prnnumspace
1919   105D 51 02 00      add sp, 2
1920   1060             _for26_update:
1921   1060 29 93 3C      mov b, [__pos] ; pos
1922   1063 D7            push a
1923   1064 11            mov a, b
1924   1065 FD 7D         dec b
1925   1067 FD 42 93 3C   mov [__pos], b
1926   106B 27            mov b, a
1927   106C E4            pop a
1928   106D 0A 49 0F      jmp _for26_cond
1929   1070             _for26_exit:
1930   1070 26 D1 3C      mov b, __string_0 ; "\n"
1931   1073 FD AB         swp b
1932   1075 D8            push b
1933   1076 07 8B 15      call print
1934   1079 51 02 00      add sp, 2
1935   107C             _for30_init:
1936   107C 26 00 00      mov b, 0
1937   107F FD 42 93 3C   mov [__pos], b
1938   1083             _for30_cond:
1939   1083 29 93 3C      mov b, [__pos] ; pos
1940   1086 D7            push a
1941   1087 11            mov a, b
1942   1088 26 0C 00      mov b, 12
1943   108B B0            cmp a, b
1944   108C 0E            lodflgs
1945   108D 2F            mov bl, al
1946   108E FD A2 03      shr al, 3
1947   1091 FD A4 02      shr bl, 2
1948   1094 FD 87 01      and bl, %00000001
1949   1097 90            xor al, bl ; < (signed)
1950   1098 22 00         mov ah, 0
1951   109A 27            mov b, a
1952   109B E4            pop a
1953   109C C0 00 00      cmp b, 0
1954   109F C6 FC 10      je _for30_exit
1955   10A2             _for30_block:
1956   10A2 29 D5 3B      mov b, [__anarr] ; anarr
1957   10A5 D7            push a
1958   10A6 74            mov d, b
1959   10A7 DA            push d
1960   10A8 29 93 3C      mov b, [__pos] ; pos
1961   10AB E7            pop d
1962   10AC 10 02 00      mov a, 2
1963   10AF AC            mul a, b
1964   10B0 5A            add d, b
1965   10B1 E4            pop a
1966   10B2 DA            push d
1967   10B3 29 09 3C      mov b, [__anarrbkp] ; anarrbkp
1968   10B6 D7            push a
1969   10B7 74            mov d, b
1970   10B8 DA            push d
1971   10B9 29 93 3C      mov b, [__pos] ; pos
1972   10BC E7            pop d
1973   10BD 10 02 00      mov a, 2
1974   10C0 AC            mul a, b
1975   10C1 5A            add d, b
1976   10C2 E4            pop a
1977   10C3 2A            mov b, [d]
1978   10C4 E7            pop d
1979   10C5 FD 43         mov [d], b
1980   10C7 29 EF 3B      mov b, [__bnarr] ; bnarr
1981   10CA D7            push a
1982   10CB 74            mov d, b
1983   10CC DA            push d
1984   10CD 29 93 3C      mov b, [__pos] ; pos
1985   10D0 E7            pop d
1986   10D1 10 02 00      mov a, 2
1987   10D4 AC            mul a, b
1988   10D5 5A            add d, b
1989   10D6 E4            pop a
1990   10D7 DA            push d
1991   10D8 29 23 3C      mov b, [__bnarrbkp] ; bnarrbkp
1992   10DB D7            push a
1993   10DC 74            mov d, b
1994   10DD DA            push d
1995   10DE 29 93 3C      mov b, [__pos] ; pos
1996   10E1 E7            pop d
1997   10E2 10 02 00      mov a, 2
1998   10E5 AC            mul a, b
1999   10E6 5A            add d, b
2000   10E7 E4            pop a
2001   10E8 2A            mov b, [d]
2002   10E9 E7            pop d
2003   10EA FD 43         mov [d], b
2004   10EC             _for30_update:
2005   10EC 29 93 3C      mov b, [__pos] ; pos
2006   10EF D7            push a
2007   10F0 11            mov a, b
2008   10F1 FD 77         inc b
2009   10F3 FD 42 93 3C   mov [__pos], b
2010   10F7 27            mov b, a
2011   10F8 E4            pop a
2012   10F9 0A 83 10      jmp _for30_cond
2013   10FC             _for30_exit:
2014   10FC 07 91 37      call times
2015   10FF 26 02 00      mov b, 2
2016   1102 FD 42 BB 3B   mov [__datumpos], b
2017   1106             _for31_init:
2018   1106 29 BB 3B      mov b, [__datumpos] ; datumpos
2019   1109 D7            push a
2020   110A 11            mov a, b
2021   110B 26 06 00      mov b, 6
2022   110E AC            mul a, b
2023   110F E4            pop a
2024   1110 FD 42 93 3C   mov [__pos], b
2025   1114             _for31_cond:
2026   1114 29 93 3C      mov b, [__pos] ; pos
2027   1117 D7            push a
2028   1118 11            mov a, b
2029   1119 29 BB 3B      mov b, [__datumpos] ; datumpos
2030   111C D7            push a
2031   111D 11            mov a, b
2032   111E 26 06 00      mov b, 6
2033   1121 AC            mul a, b
2034   1122 E4            pop a
2035   1123 D7            push a
2036   1124 11            mov a, b
2037   1125 26 06 00      mov b, 6
2038   1128 54            add a, b
2039   1129 27            mov b, a
2040   112A E4            pop a
2041   112B B0            cmp a, b
2042   112C 0E            lodflgs
2043   112D 2F            mov bl, al
2044   112E FD A2 03      shr al, 3
2045   1131 FD A4 02      shr bl, 2
2046   1134 FD 87 01      and bl, %00000001
2047   1137 90            xor al, bl ; < (signed)
2048   1138 22 00         mov ah, 0
2049   113A 27            mov b, a
2050   113B E4            pop a
2051   113C C0 00 00      cmp b, 0
2052   113F C6 C8 11      je _for31_exit
2053   1142             _for31_block:
2054   1142 29 B9 3B      mov b, [__datum] ; datum
2055   1145 D7            push a
2056   1146 74            mov d, b
2057   1147 DA            push d
2058   1148 29 93 3C      mov b, [__pos] ; pos
2059   114B E7            pop d
2060   114C 10 02 00      mov a, 2
2061   114F AC            mul a, b
2062   1150 5A            add d, b
2063   1151 E4            pop a
2064   1152 DA            push d
2065   1153 29 3D 3C      mov b, [__cnarr] ; cnarr
2066   1156 D7            push a
2067   1157 74            mov d, b
2068   1158 DA            push d
2069   1159 29 93 3C      mov b, [__pos] ; pos
2070   115C D7            push a
2071   115D 11            mov a, b
2072   115E 29 BB 3B      mov b, [__datumpos] ; datumpos
2073   1161 D7            push a
2074   1162 11            mov a, b
2075   1163 26 06 00      mov b, 6
2076   1166 AC            mul a, b
2077   1167 E4            pop a
2078   1168 60            sub a, b
2079   1169 27            mov b, a
2080   116A E4            pop a
2081   116B D7            push a
2082   116C 11            mov a, b
2083   116D 26 02 00      mov b, 2
2084   1170 AC            mul a, b
2085   1171 E4            pop a
2086   1172 D7            push a
2087   1173 11            mov a, b
2088   1174 26 01 00      mov b, 1
2089   1177 54            add a, b
2090   1178 27            mov b, a
2091   1179 E4            pop a
2092   117A E7            pop d
2093   117B 10 02 00      mov a, 2
2094   117E AC            mul a, b
2095   117F 5A            add d, b
2096   1180 E4            pop a
2097   1181 2A            mov b, [d]
2098   1182 D7            push a
2099   1183 11            mov a, b
2100   1184 26 64 00      mov b, 100
2101   1187 AC            mul a, b
2102   1188 E4            pop a
2103   1189 D7            push a
2104   118A 11            mov a, b
2105   118B 29 3D 3C      mov b, [__cnarr] ; cnarr
2106   118E D7            push a
2107   118F 74            mov d, b
2108   1190 DA            push d
2109   1191 29 93 3C      mov b, [__pos] ; pos
2110   1194 D7            push a
2111   1195 11            mov a, b
2112   1196 29 BB 3B      mov b, [__datumpos] ; datumpos
2113   1199 D7            push a
2114   119A 11            mov a, b
2115   119B 26 06 00      mov b, 6
2116   119E AC            mul a, b
2117   119F E4            pop a
2118   11A0 60            sub a, b
2119   11A1 27            mov b, a
2120   11A2 E4            pop a
2121   11A3 D7            push a
2122   11A4 11            mov a, b
2123   11A5 26 02 00      mov b, 2
2124   11A8 AC            mul a, b
2125   11A9 E4            pop a
2126   11AA E7            pop d
2127   11AB 10 02 00      mov a, 2
2128   11AE AC            mul a, b
2129   11AF 5A            add d, b
2130   11B0 E4            pop a
2131   11B1 2A            mov b, [d]
2132   11B2 54            add a, b
2133   11B3 27            mov b, a
2134   11B4 E4            pop a
2135   11B5 E7            pop d
2136   11B6 FD 43         mov [d], b
2137   11B8             _for31_update:
2138   11B8 29 93 3C      mov b, [__pos] ; pos
2139   11BB D7            push a
2140   11BC 11            mov a, b
2141   11BD FD 77         inc b
2142   11BF FD 42 93 3C   mov [__pos], b
2143   11C3 27            mov b, a
2144   11C4 E4            pop a
2145   11C5 0A 14 11      jmp _for31_cond
2146   11C8             _for31_exit:
2147   11C8             _for32_init:
2148   11C8 26 12 00      mov b, 18
2149   11CB FD 42 93 3C   mov [__pos], b
2150   11CF             _for32_cond:
2151   11CF 29 93 3C      mov b, [__pos] ; pos
2152   11D2 D7            push a
2153   11D3 11            mov a, b
2154   11D4 26 0C 00      mov b, 12
2155   11D7 B0            cmp a, b
2156   11D8 0E            lodflgs
2157   11D9 2F            mov bl, al
2158   11DA FD 78         mov g, a
2159   11DC FD A2 03      shr al, 3
2160   11DF FD A4 02      shr bl, 2
2161   11E2 FD 87 01      and bl, %00000001
2162   11E5 90            xor al, bl
2163   11E6 FD 27         mov b, g
2164   11E8 FD 87 01      and bl, %00000001
2165   11EB 8C            or al, bl
2166   11EC 8F 01         xor al, %00000001 ; > (signed)
2167   11EE 22 00         mov ah, 0
2168   11F0 27            mov b, a
2169   11F1 E4            pop a
2170   11F2 C0 00 00      cmp b, 0
2171   11F5 C6 F6 12      je _for32_exit
2172   11F8             _for32_block:
2173   11F8             _if33_cond:
2174   11F8 29 B9 3B      mov b, [__datum] ; datum
2175   11FB D7            push a
2176   11FC 74            mov d, b
2177   11FD DA            push d
2178   11FE 29 93 3C      mov b, [__pos] ; pos
2179   1201 D7            push a
2180   1202 11            mov a, b
2181   1203 26 01 00      mov b, 1
2182   1206 60            sub a, b
2183   1207 27            mov b, a
2184   1208 E4            pop a
2185   1209 E7            pop d
2186   120A 10 02 00      mov a, 2
2187   120D AC            mul a, b
2188   120E 5A            add d, b
2189   120F E4            pop a
2190   1210 2A            mov b, [d]
2191   1211 D7            push a
2192   1212 11            mov a, b
2193   1213 26 E8 03      mov b, 1000
2194   1216 B0            cmp a, b
2195   1217 0E            lodflgs
2196   1218 2F            mov bl, al
2197   1219 FD A2 03      shr al, 3
2198   121C FD A4 02      shr bl, 2
2199   121F FD 87 01      and bl, %00000001
2200   1222 90            xor al, bl ; < (signed)
2201   1223 22 00         mov ah, 0
2202   1225 27            mov b, a
2203   1226 E4            pop a
2204   1227 C0 00 00      cmp b, 0
2205   122A C6 3C 12      je _if33_exit
2206   122D             _if33_true:
2207   122D 26 00 00      mov b, 0
2208   1230 FD AB         swp b
2209   1232 D8            push b
2210   1233 07 C2 15      call prnnum
2211   1236 51 02 00      add sp, 2
2212   1239 0A 3C 12      jmp _if33_exit
2213   123C             _if33_exit:
2214   123C             _if34_cond:
2215   123C 29 B9 3B      mov b, [__datum] ; datum
2216   123F D7            push a
2217   1240 74            mov d, b
2218   1241 DA            push d
2219   1242 29 93 3C      mov b, [__pos] ; pos
2220   1245 D7            push a
2221   1246 11            mov a, b
2222   1247 26 01 00      mov b, 1
2223   124A 60            sub a, b
2224   124B 27            mov b, a
2225   124C E4            pop a
2226   124D E7            pop d
2227   124E 10 02 00      mov a, 2
2228   1251 AC            mul a, b
2229   1252 5A            add d, b
2230   1253 E4            pop a
2231   1254 2A            mov b, [d]
2232   1255 D7            push a
2233   1256 11            mov a, b
2234   1257 26 64 00      mov b, 100
2235   125A B0            cmp a, b
2236   125B 0E            lodflgs
2237   125C 2F            mov bl, al
2238   125D FD A2 03      shr al, 3
2239   1260 FD A4 02      shr bl, 2
2240   1263 FD 87 01      and bl, %00000001
2241   1266 90            xor al, bl ; < (signed)
2242   1267 22 00         mov ah, 0
2243   1269 27            mov b, a
2244   126A E4            pop a
2245   126B C0 00 00      cmp b, 0
2246   126E C6 80 12      je _if34_exit
2247   1271             _if34_true:
2248   1271 26 00 00      mov b, 0
2249   1274 FD AB         swp b
2250   1276 D8            push b
2251   1277 07 C2 15      call prnnum
2252   127A 51 02 00      add sp, 2
2253   127D 0A 80 12      jmp _if34_exit
2254   1280             _if34_exit:
2255   1280             _if35_cond:
2256   1280 29 B9 3B      mov b, [__datum] ; datum
2257   1283 D7            push a
2258   1284 74            mov d, b
2259   1285 DA            push d
2260   1286 29 93 3C      mov b, [__pos] ; pos
2261   1289 D7            push a
2262   128A 11            mov a, b
2263   128B 26 01 00      mov b, 1
2264   128E 60            sub a, b
2265   128F 27            mov b, a
2266   1290 E4            pop a
2267   1291 E7            pop d
2268   1292 10 02 00      mov a, 2
2269   1295 AC            mul a, b
2270   1296 5A            add d, b
2271   1297 E4            pop a
2272   1298 2A            mov b, [d]
2273   1299 D7            push a
2274   129A 11            mov a, b
2275   129B 26 0A 00      mov b, 10
2276   129E B0            cmp a, b
2277   129F 0E            lodflgs
2278   12A0 2F            mov bl, al
2279   12A1 FD A2 03      shr al, 3
2280   12A4 FD A4 02      shr bl, 2
2281   12A7 FD 87 01      and bl, %00000001
2282   12AA 90            xor al, bl ; < (signed)
2283   12AB 22 00         mov ah, 0
2284   12AD 27            mov b, a
2285   12AE E4            pop a
2286   12AF C0 00 00      cmp b, 0
2287   12B2 C6 C4 12      je _if35_exit
2288   12B5             _if35_true:
2289   12B5 26 00 00      mov b, 0
2290   12B8 FD AB         swp b
2291   12BA D8            push b
2292   12BB 07 C2 15      call prnnum
2293   12BE 51 02 00      add sp, 2
2294   12C1 0A C4 12      jmp _if35_exit
2295   12C4             _if35_exit:
2296   12C4 29 B9 3B      mov b, [__datum] ; datum
2297   12C7 D7            push a
2298   12C8 74            mov d, b
2299   12C9 DA            push d
2300   12CA 29 93 3C      mov b, [__pos] ; pos
2301   12CD D7            push a
2302   12CE 11            mov a, b
2303   12CF 26 01 00      mov b, 1
2304   12D2 60            sub a, b
2305   12D3 27            mov b, a
2306   12D4 E4            pop a
2307   12D5 E7            pop d
2308   12D6 10 02 00      mov a, 2
2309   12D9 AC            mul a, b
2310   12DA 5A            add d, b
2311   12DB E4            pop a
2312   12DC 2A            mov b, [d]
2313   12DD FD AB         swp b
2314   12DF D8            push b
2315   12E0 07 A6 15      call prnnumspace
2316   12E3 51 02 00      add sp, 2
2317   12E6             _for32_update:
2318   12E6 29 93 3C      mov b, [__pos] ; pos
2319   12E9 D7            push a
2320   12EA 11            mov a, b
2321   12EB FD 7D         dec b
2322   12ED FD 42 93 3C   mov [__pos], b
2323   12F1 27            mov b, a
2324   12F2 E4            pop a
2325   12F3 0A CF 11      jmp _for32_cond
2326   12F6             _for32_exit:
2327   12F6 26 D1 3C      mov b, __string_0 ; "\n"
2328   12F9 FD AB         swp b
2329   12FB D8            push b
2330   12FC 07 8B 15      call print
2331   12FF 51 02 00      add sp, 2
2332   1302             _for36_init:
2333   1302 26 00 00      mov b, 0
2334   1305 FD 42 93 3C   mov [__pos], b
2335   1309             _for36_cond:
2336   1309 29 93 3C      mov b, [__pos] ; pos
2337   130C D7            push a
2338   130D 11            mov a, b
2339   130E 26 0C 00      mov b, 12
2340   1311 B0            cmp a, b
2341   1312 0E            lodflgs
2342   1313 2F            mov bl, al
2343   1314 FD A2 03      shr al, 3
2344   1317 FD A4 02      shr bl, 2
2345   131A FD 87 01      and bl, %00000001
2346   131D 90            xor al, bl ; < (signed)
2347   131E 22 00         mov ah, 0
2348   1320 27            mov b, a
2349   1321 E4            pop a
2350   1322 C0 00 00      cmp b, 0
2351   1325 C6 82 13      je _for36_exit
2352   1328             _for36_block:
2353   1328 29 D5 3B      mov b, [__anarr] ; anarr
2354   132B D7            push a
2355   132C 74            mov d, b
2356   132D DA            push d
2357   132E 29 93 3C      mov b, [__pos] ; pos
2358   1331 E7            pop d
2359   1332 10 02 00      mov a, 2
2360   1335 AC            mul a, b
2361   1336 5A            add d, b
2362   1337 E4            pop a
2363   1338 DA            push d
2364   1339 29 09 3C      mov b, [__anarrbkp] ; anarrbkp
2365   133C D7            push a
2366   133D 74            mov d, b
2367   133E DA            push d
2368   133F 29 93 3C      mov b, [__pos] ; pos
2369   1342 E7            pop d
2370   1343 10 02 00      mov a, 2
2371   1346 AC            mul a, b
2372   1347 5A            add d, b
2373   1348 E4            pop a
2374   1349 2A            mov b, [d]
2375   134A E7            pop d
2376   134B FD 43         mov [d], b
2377   134D 29 EF 3B      mov b, [__bnarr] ; bnarr
2378   1350 D7            push a
2379   1351 74            mov d, b
2380   1352 DA            push d
2381   1353 29 93 3C      mov b, [__pos] ; pos
2382   1356 E7            pop d
2383   1357 10 02 00      mov a, 2
2384   135A AC            mul a, b
2385   135B 5A            add d, b
2386   135C E4            pop a
2387   135D DA            push d
2388   135E 29 23 3C      mov b, [__bnarrbkp] ; bnarrbkp
2389   1361 D7            push a
2390   1362 74            mov d, b
2391   1363 DA            push d
2392   1364 29 93 3C      mov b, [__pos] ; pos
2393   1367 E7            pop d
2394   1368 10 02 00      mov a, 2
2395   136B AC            mul a, b
2396   136C 5A            add d, b
2397   136D E4            pop a
2398   136E 2A            mov b, [d]
2399   136F E7            pop d
2400   1370 FD 43         mov [d], b
2401   1372             _for36_update:
2402   1372 29 93 3C      mov b, [__pos] ; pos
2403   1375 D7            push a
2404   1376 11            mov a, b
2405   1377 FD 77         inc b
2406   1379 FD 42 93 3C   mov [__pos], b
2407   137D 27            mov b, a
2408   137E E4            pop a
2409   137F 0A 09 13      jmp _for36_cond
2410   1382             _for36_exit:
2411   1382 07 48 39      call dividedby
2412   1385 26 02 00      mov b, 2
2413   1388 FD 42 BB 3B   mov [__datumpos], b
2414   138C             _for37_init:
2415   138C 29 BB 3B      mov b, [__datumpos] ; datumpos
2416   138F D7            push a
2417   1390 11            mov a, b
2418   1391 26 06 00      mov b, 6
2419   1394 AC            mul a, b
2420   1395 E4            pop a
2421   1396 FD 42 93 3C   mov [__pos], b
2422   139A             _for37_cond:
2423   139A 29 93 3C      mov b, [__pos] ; pos
2424   139D D7            push a
2425   139E 11            mov a, b
2426   139F 29 BB 3B      mov b, [__datumpos] ; datumpos
2427   13A2 D7            push a
2428   13A3 11            mov a, b
2429   13A4 26 06 00      mov b, 6
2430   13A7 AC            mul a, b
2431   13A8 E4            pop a
2432   13A9 D7            push a
2433   13AA 11            mov a, b
2434   13AB 26 06 00      mov b, 6
2435   13AE 54            add a, b
2436   13AF 27            mov b, a
2437   13B0 E4            pop a
2438   13B1 B0            cmp a, b
2439   13B2 0E            lodflgs
2440   13B3 2F            mov bl, al
2441   13B4 FD A2 03      shr al, 3
2442   13B7 FD A4 02      shr bl, 2
2443   13BA FD 87 01      and bl, %00000001
2444   13BD 90            xor al, bl ; < (signed)
2445   13BE 22 00         mov ah, 0
2446   13C0 27            mov b, a
2447   13C1 E4            pop a
2448   13C2 C0 00 00      cmp b, 0
2449   13C5 C6 4E 14      je _for37_exit
2450   13C8             _for37_block:
2451   13C8 29 B9 3B      mov b, [__datum] ; datum
2452   13CB D7            push a
2453   13CC 74            mov d, b
2454   13CD DA            push d
2455   13CE 29 93 3C      mov b, [__pos] ; pos
2456   13D1 E7            pop d
2457   13D2 10 02 00      mov a, 2
2458   13D5 AC            mul a, b
2459   13D6 5A            add d, b
2460   13D7 E4            pop a
2461   13D8 DA            push d
2462   13D9 29 3D 3C      mov b, [__cnarr] ; cnarr
2463   13DC D7            push a
2464   13DD 74            mov d, b
2465   13DE DA            push d
2466   13DF 29 93 3C      mov b, [__pos] ; pos
2467   13E2 D7            push a
2468   13E3 11            mov a, b
2469   13E4 29 BB 3B      mov b, [__datumpos] ; datumpos
2470   13E7 D7            push a
2471   13E8 11            mov a, b
2472   13E9 26 06 00      mov b, 6
2473   13EC AC            mul a, b
2474   13ED E4            pop a
2475   13EE 60            sub a, b
2476   13EF 27            mov b, a
2477   13F0 E4            pop a
2478   13F1 D7            push a
2479   13F2 11            mov a, b
2480   13F3 26 02 00      mov b, 2
2481   13F6 AC            mul a, b
2482   13F7 E4            pop a
2483   13F8 D7            push a
2484   13F9 11            mov a, b
2485   13FA 26 01 00      mov b, 1
2486   13FD 54            add a, b
2487   13FE 27            mov b, a
2488   13FF E4            pop a
2489   1400 E7            pop d
2490   1401 10 02 00      mov a, 2
2491   1404 AC            mul a, b
2492   1405 5A            add d, b
2493   1406 E4            pop a
2494   1407 2A            mov b, [d]
2495   1408 D7            push a
2496   1409 11            mov a, b
2497   140A 26 64 00      mov b, 100
2498   140D AC            mul a, b
2499   140E E4            pop a
2500   140F D7            push a
2501   1410 11            mov a, b
2502   1411 29 3D 3C      mov b, [__cnarr] ; cnarr
2503   1414 D7            push a
2504   1415 74            mov d, b
2505   1416 DA            push d
2506   1417 29 93 3C      mov b, [__pos] ; pos
2507   141A D7            push a
2508   141B 11            mov a, b
2509   141C 29 BB 3B      mov b, [__datumpos] ; datumpos
2510   141F D7            push a
2511   1420 11            mov a, b
2512   1421 26 06 00      mov b, 6
2513   1424 AC            mul a, b
2514   1425 E4            pop a
2515   1426 60            sub a, b
2516   1427 27            mov b, a
2517   1428 E4            pop a
2518   1429 D7            push a
2519   142A 11            mov a, b
2520   142B 26 02 00      mov b, 2
2521   142E AC            mul a, b
2522   142F E4            pop a
2523   1430 E7            pop d
2524   1431 10 02 00      mov a, 2
2525   1434 AC            mul a, b
2526   1435 5A            add d, b
2527   1436 E4            pop a
2528   1437 2A            mov b, [d]
2529   1438 54            add a, b
2530   1439 27            mov b, a
2531   143A E4            pop a
2532   143B E7            pop d
2533   143C FD 43         mov [d], b
2534   143E             _for37_update:
2535   143E 29 93 3C      mov b, [__pos] ; pos
2536   1441 D7            push a
2537   1442 11            mov a, b
2538   1443 FD 77         inc b
2539   1445 FD 42 93 3C   mov [__pos], b
2540   1449 27            mov b, a
2541   144A E4            pop a
2542   144B 0A 9A 13      jmp _for37_cond
2543   144E             _for37_exit:
2544   144E             _for38_init:
2545   144E 26 12 00      mov b, 18
2546   1451 FD 42 93 3C   mov [__pos], b
2547   1455             _for38_cond:
2548   1455 29 93 3C      mov b, [__pos] ; pos
2549   1458 D7            push a
2550   1459 11            mov a, b
2551   145A 26 0C 00      mov b, 12
2552   145D B0            cmp a, b
2553   145E 0E            lodflgs
2554   145F 2F            mov bl, al
2555   1460 FD 78         mov g, a
2556   1462 FD A2 03      shr al, 3
2557   1465 FD A4 02      shr bl, 2
2558   1468 FD 87 01      and bl, %00000001
2559   146B 90            xor al, bl
2560   146C FD 27         mov b, g
2561   146E FD 87 01      and bl, %00000001
2562   1471 8C            or al, bl
2563   1472 8F 01         xor al, %00000001 ; > (signed)
2564   1474 22 00         mov ah, 0
2565   1476 27            mov b, a
2566   1477 E4            pop a
2567   1478 C0 00 00      cmp b, 0
2568   147B C6 7C 15      je _for38_exit
2569   147E             _for38_block:
2570   147E             _if39_cond:
2571   147E 29 B9 3B      mov b, [__datum] ; datum
2572   1481 D7            push a
2573   1482 74            mov d, b
2574   1483 DA            push d
2575   1484 29 93 3C      mov b, [__pos] ; pos
2576   1487 D7            push a
2577   1488 11            mov a, b
2578   1489 26 01 00      mov b, 1
2579   148C 60            sub a, b
2580   148D 27            mov b, a
2581   148E E4            pop a
2582   148F E7            pop d
2583   1490 10 02 00      mov a, 2
2584   1493 AC            mul a, b
2585   1494 5A            add d, b
2586   1495 E4            pop a
2587   1496 2A            mov b, [d]
2588   1497 D7            push a
2589   1498 11            mov a, b
2590   1499 26 E8 03      mov b, 1000
2591   149C B0            cmp a, b
2592   149D 0E            lodflgs
2593   149E 2F            mov bl, al
2594   149F FD A2 03      shr al, 3
2595   14A2 FD A4 02      shr bl, 2
2596   14A5 FD 87 01      and bl, %00000001
2597   14A8 90            xor al, bl ; < (signed)
2598   14A9 22 00         mov ah, 0
2599   14AB 27            mov b, a
2600   14AC E4            pop a
2601   14AD C0 00 00      cmp b, 0
2602   14B0 C6 C2 14      je _if39_exit
2603   14B3             _if39_true:
2604   14B3 26 00 00      mov b, 0
2605   14B6 FD AB         swp b
2606   14B8 D8            push b
2607   14B9 07 C2 15      call prnnum
2608   14BC 51 02 00      add sp, 2
2609   14BF 0A C2 14      jmp _if39_exit
2610   14C2             _if39_exit:
2611   14C2             _if40_cond:
2612   14C2 29 B9 3B      mov b, [__datum] ; datum
2613   14C5 D7            push a
2614   14C6 74            mov d, b
2615   14C7 DA            push d
2616   14C8 29 93 3C      mov b, [__pos] ; pos
2617   14CB D7            push a
2618   14CC 11            mov a, b
2619   14CD 26 01 00      mov b, 1
2620   14D0 60            sub a, b
2621   14D1 27            mov b, a
2622   14D2 E4            pop a
2623   14D3 E7            pop d
2624   14D4 10 02 00      mov a, 2
2625   14D7 AC            mul a, b
2626   14D8 5A            add d, b
2627   14D9 E4            pop a
2628   14DA 2A            mov b, [d]
2629   14DB D7            push a
2630   14DC 11            mov a, b
2631   14DD 26 64 00      mov b, 100
2632   14E0 B0            cmp a, b
2633   14E1 0E            lodflgs
2634   14E2 2F            mov bl, al
2635   14E3 FD A2 03      shr al, 3
2636   14E6 FD A4 02      shr bl, 2
2637   14E9 FD 87 01      and bl, %00000001
2638   14EC 90            xor al, bl ; < (signed)
2639   14ED 22 00         mov ah, 0
2640   14EF 27            mov b, a
2641   14F0 E4            pop a
2642   14F1 C0 00 00      cmp b, 0
2643   14F4 C6 06 15      je _if40_exit
2644   14F7             _if40_true:
2645   14F7 26 00 00      mov b, 0
2646   14FA FD AB         swp b
2647   14FC D8            push b
2648   14FD 07 C2 15      call prnnum
2649   1500 51 02 00      add sp, 2
2650   1503 0A 06 15      jmp _if40_exit
2651   1506             _if40_exit:
2652   1506             _if41_cond:
2653   1506 29 B9 3B      mov b, [__datum] ; datum
2654   1509 D7            push a
2655   150A 74            mov d, b
2656   150B DA            push d
2657   150C 29 93 3C      mov b, [__pos] ; pos
2658   150F D7            push a
2659   1510 11            mov a, b
2660   1511 26 01 00      mov b, 1
2661   1514 60            sub a, b
2662   1515 27            mov b, a
2663   1516 E4            pop a
2664   1517 E7            pop d
2665   1518 10 02 00      mov a, 2
2666   151B AC            mul a, b
2667   151C 5A            add d, b
2668   151D E4            pop a
2669   151E 2A            mov b, [d]
2670   151F D7            push a
2671   1520 11            mov a, b
2672   1521 26 0A 00      mov b, 10
2673   1524 B0            cmp a, b
2674   1525 0E            lodflgs
2675   1526 2F            mov bl, al
2676   1527 FD A2 03      shr al, 3
2677   152A FD A4 02      shr bl, 2
2678   152D FD 87 01      and bl, %00000001
2679   1530 90            xor al, bl ; < (signed)
2680   1531 22 00         mov ah, 0
2681   1533 27            mov b, a
2682   1534 E4            pop a
2683   1535 C0 00 00      cmp b, 0
2684   1538 C6 4A 15      je _if41_exit
2685   153B             _if41_true:
2686   153B 26 00 00      mov b, 0
2687   153E FD AB         swp b
2688   1540 D8            push b
2689   1541 07 C2 15      call prnnum
2690   1544 51 02 00      add sp, 2
2691   1547 0A 4A 15      jmp _if41_exit
2692   154A             _if41_exit:
2693   154A 29 B9 3B      mov b, [__datum] ; datum
2694   154D D7            push a
2695   154E 74            mov d, b
2696   154F DA            push d
2697   1550 29 93 3C      mov b, [__pos] ; pos
2698   1553 D7            push a
2699   1554 11            mov a, b
2700   1555 26 01 00      mov b, 1
2701   1558 60            sub a, b
2702   1559 27            mov b, a
2703   155A E4            pop a
2704   155B E7            pop d
2705   155C 10 02 00      mov a, 2
2706   155F AC            mul a, b
2707   1560 5A            add d, b
2708   1561 E4            pop a
2709   1562 2A            mov b, [d]
2710   1563 FD AB         swp b
2711   1565 D8            push b
2712   1566 07 A6 15      call prnnumspace
2713   1569 51 02 00      add sp, 2
2714   156C             _for38_update:
2715   156C 29 93 3C      mov b, [__pos] ; pos
2716   156F D7            push a
2717   1570 11            mov a, b
2718   1571 FD 7D         dec b
2719   1573 FD 42 93 3C   mov [__pos], b
2720   1577 27            mov b, a
2721   1578 E4            pop a
2722   1579 0A 55 14      jmp _for38_cond
2723   157C             _for38_exit:
2724   157C 26 D1 3C      mov b, __string_0 ; "\n"
2725   157F FD AB         swp b
2726   1581 D8            push b
2727   1582 07 8B 15      call print
2728   1585 51 02 00      add sp, 2
2729   1588 F9            leave
2730   1589 05 0B         syscall sys_terminate_proc
2731   158B             
2732   158B             print:
2733   158B D2            push bp
2734   158C 9B            mov bp, sp
2735   158D             
2736   158D             ; --- BEGIN INLINE ASM BLOCK
2737   158D 17 05 00      mov a, [bp + 5]
2738   1590 3C            mov d, a
2739   1591 07 21 3F      call puts
2740   1594             ; --- END INLINE ASM BLOCK
2741   1594             
2742   1594 F9            leave
2743   1595 09            ret
2744   1596             
2745   1596             readint:
2746   1596 D2            push bp
2747   1597 9B            mov bp, sp
2748   1598 52 02 00      sub sp, 2 ; n
2749   159B             
2750   159B             ; --- BEGIN INLINE ASM BLOCK
2751   159B 07 1F 40      call scan_u16d
2752   159E 45 FF FF      mov [bp + -1], a
2753   15A1             ; --- END INLINE ASM BLOCK
2754   15A1             
2755   15A1 2C FF FF      mov b, [bp + -1] ; n
2756   15A4 F9            leave
2757   15A5 09            ret
2758   15A6             
2759   15A6             prnnumspace:
2760   15A6 D2            push bp
2761   15A7 9B            mov bp, sp
2762   15A8 2C 05 00      mov b, [bp + 5] ; n
2763   15AB FD AB         swp b
2764   15AD D8            push b
2765   15AE 07 C2 15      call prnnum
2766   15B1 51 02 00      add sp, 2
2767   15B4 26 D3 3C      mov b, __string_1 ; " "
2768   15B7 FD AB         swp b
2769   15B9 D8            push b
2770   15BA 07 8B 15      call print
2771   15BD 51 02 00      add sp, 2
2772   15C0 F9            leave
2773   15C1 09            ret
2774   15C2             
2775   15C2             prnnum:
2776   15C2 D2            push bp
2777   15C3 9B            mov bp, sp
2778   15C4 52 05 00      sub sp, 5 ; digits
2779   15C7 52 02 00      sub sp, 2 ; i
2780   15CA 26 00 00      mov b, 0
2781   15CD D7            push a
2782   15CE 11            mov a, b
2783   15CF 45 FA FF      mov [bp + -6], a ; i
2784   15D2 E4            pop a
2785   15D3             _if42_cond:
2786   15D3 2C 05 00      mov b, [bp + 5] ; num
2787   15D6 D7            push a
2788   15D7 11            mov a, b
2789   15D8 26 00 00      mov b, 0
2790   15DB B0            cmp a, b
2791   15DC 0E            lodflgs
2792   15DD 87 01         and al, %00000001 ; ==
2793   15DF 22 00         mov ah, 0
2794   15E1 27            mov b, a
2795   15E2 E4            pop a
2796   15E3 C0 00 00      cmp b, 0
2797   15E6 C6 F8 15      je _if42_exit
2798   15E9             _if42_true:
2799   15E9 26 30 00      mov b, '0'
2800   15EC DD            push bl
2801   15ED 07 C7 16      call _putchar
2802   15F0 51 01 00      add sp, 1
2803   15F3 F9            leave
2804   15F4 09            ret
2805   15F5 0A F8 15      jmp _if42_exit
2806   15F8             _if42_exit:
2807   15F8             _while43_cond:
2808   15F8 2C 05 00      mov b, [bp + 5] ; num
2809   15FB D7            push a
2810   15FC 11            mov a, b
2811   15FD 26 00 00      mov b, 0
2812   1600 B0            cmp a, b
2813   1601 0E            lodflgs
2814   1602 2F            mov bl, al
2815   1603 FD 78         mov g, a
2816   1605 FD A2 03      shr al, 3
2817   1608 FD A4 02      shr bl, 2
2818   160B FD 87 01      and bl, %00000001
2819   160E 90            xor al, bl
2820   160F FD 27         mov b, g
2821   1611 FD 87 01      and bl, %00000001
2822   1614 8C            or al, bl
2823   1615 8F 01         xor al, %00000001 ; > (signed)
2824   1617 22 00         mov ah, 0
2825   1619 27            mov b, a
2826   161A E4            pop a
2827   161B C0 00 00      cmp b, 0
2828   161E C6 6F 16      je _while43_exit
2829   1621             _while43_block:
2830   1621 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
2831   1624 2D            mov b, d
2832   1625 D7            push a
2833   1626 74            mov d, b
2834   1627 DA            push d
2835   1628 2C FA FF      mov b, [bp + -6] ; i
2836   162B E7            pop d
2837   162C 10 01 00      mov a, 1
2838   162F AC            mul a, b
2839   1630 5A            add d, b
2840   1631 E4            pop a
2841   1632 DA            push d
2842   1633 26 30 00      mov b, '0'
2843   1636 D7            push a
2844   1637 11            mov a, b
2845   1638 2C 05 00      mov b, [bp + 5] ; num
2846   163B D7            push a
2847   163C 11            mov a, b
2848   163D 26 0A 00      mov b, 10
2849   1640 AE            div a, b
2850   1641 E4            pop a
2851   1642 54            add a, b
2852   1643 27            mov b, a
2853   1644 E4            pop a
2854   1645 E7            pop d
2855   1646 FD 3E         mov [d], bl
2856   1648 2C 05 00      mov b, [bp + 5] ; num
2857   164B D7            push a
2858   164C 11            mov a, b
2859   164D 26 0A 00      mov b, 10
2860   1650 AE            div a, b
2861   1651 FD 78         mov g, a
2862   1653 11            mov a, b
2863   1654 FD 27         mov b, g
2864   1656 E4            pop a
2865   1657 D7            push a
2866   1658 11            mov a, b
2867   1659 45 05 00      mov [bp + 5], a ; num
2868   165C E4            pop a
2869   165D 2C FA FF      mov b, [bp + -6] ; i
2870   1660 D7            push a
2871   1661 11            mov a, b
2872   1662 FD 77         inc b
2873   1664 D7            push a
2874   1665 11            mov a, b
2875   1666 45 FA FF      mov [bp + -6], a ; i
2876   1669 E4            pop a
2877   166A 27            mov b, a
2878   166B E4            pop a
2879   166C 0A F8 15      jmp _while43_cond
2880   166F             _while43_exit:
2881   166F             _while44_cond:
2882   166F 2C FA FF      mov b, [bp + -6] ; i
2883   1672 D7            push a
2884   1673 11            mov a, b
2885   1674 26 00 00      mov b, 0
2886   1677 B0            cmp a, b
2887   1678 0E            lodflgs
2888   1679 2F            mov bl, al
2889   167A FD 78         mov g, a
2890   167C FD A2 03      shr al, 3
2891   167F FD A4 02      shr bl, 2
2892   1682 FD 87 01      and bl, %00000001
2893   1685 90            xor al, bl
2894   1686 FD 27         mov b, g
2895   1688 FD 87 01      and bl, %00000001
2896   168B 8C            or al, bl
2897   168C 8F 01         xor al, %00000001 ; > (signed)
2898   168E 22 00         mov ah, 0
2899   1690 27            mov b, a
2900   1691 E4            pop a
2901   1692 C0 00 00      cmp b, 0
2902   1695 C6 C5 16      je _while44_exit
2903   1698             _while44_block:
2904   1698 2C FA FF      mov b, [bp + -6] ; i
2905   169B D7            push a
2906   169C 11            mov a, b
2907   169D FD 7D         dec b
2908   169F D7            push a
2909   16A0 11            mov a, b
2910   16A1 45 FA FF      mov [bp + -6], a ; i
2911   16A4 E4            pop a
2912   16A5 27            mov b, a
2913   16A6 E4            pop a
2914   16A7 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
2915   16AA 2D            mov b, d
2916   16AB D7            push a
2917   16AC 74            mov d, b
2918   16AD DA            push d
2919   16AE 2C FA FF      mov b, [bp + -6] ; i
2920   16B1 E7            pop d
2921   16B2 10 01 00      mov a, 1
2922   16B5 AC            mul a, b
2923   16B6 5A            add d, b
2924   16B7 E4            pop a
2925   16B8 32            mov bl, [d]
2926   16B9 A7 00         mov bh, 0
2927   16BB DD            push bl
2928   16BC 07 C7 16      call _putchar
2929   16BF 51 01 00      add sp, 1
2930   16C2 0A 6F 16      jmp _while44_cond
2931   16C5             _while44_exit:
2932   16C5 F9            leave
2933   16C6 09            ret
2934   16C7             
2935   16C7             _putchar:
2936   16C7 D2            push bp
2937   16C8 9B            mov bp, sp
2938   16C9             
2939   16C9             ; --- BEGIN INLINE ASM BLOCK
2940   16C9 20 05 00      mov al, [bp + 5]
2941   16CC 23            mov ah, al
2942   16CD 07 E7 3D      call putchar
2943   16D0             ; --- END INLINE ASM BLOCK
2944   16D0             
2945   16D0 F9            leave
2946   16D1 09            ret
2947   16D2             
2948   16D2             fixsignin:
2949   16D2 D2            push bp
2950   16D3 9B            mov bp, sp
2951   16D4 26 00 00      mov b, 0
2952   16D7 FD 42 8B 3C   mov [__asign], b
2953   16DB 26 00 00      mov b, 0
2954   16DE FD 42 8D 3C   mov [__bsign], b
2955   16E2 26 00 00      mov b, 0
2956   16E5 FD 42 8F 3C   mov [__csign], b
2957   16E9             _if45_cond:
2958   16E9 29 D5 3B      mov b, [__anarr] ; anarr
2959   16EC D7            push a
2960   16ED 74            mov d, b
2961   16EE DA            push d
2962   16EF 26 0B 00      mov b, 11
2963   16F2 E7            pop d
2964   16F3 10 02 00      mov a, 2
2965   16F6 AC            mul a, b
2966   16F7 5A            add d, b
2967   16F8 E4            pop a
2968   16F9 2A            mov b, [d]
2969   16FA D7            push a
2970   16FB 11            mov a, b
2971   16FC 26 09 00      mov b, 9
2972   16FF B0            cmp a, b
2973   1700 0E            lodflgs
2974   1701 2F            mov bl, al
2975   1702 FD 78         mov g, a
2976   1704 FD A2 03      shr al, 3
2977   1707 FD A4 02      shr bl, 2
2978   170A FD 87 01      and bl, %00000001
2979   170D 90            xor al, bl
2980   170E FD 27         mov b, g
2981   1710 FD 87 01      and bl, %00000001
2982   1713 8C            or al, bl
2983   1714 8F 01         xor al, %00000001 ; > (signed)
2984   1716 22 00         mov ah, 0
2985   1718 27            mov b, a
2986   1719 E4            pop a
2987   171A C0 00 00      cmp b, 0
2988   171D C6 7F 17      je _if45_exit
2989   1720             _if45_true:
2990   1720 29 D5 3B      mov b, [__anarr] ; anarr
2991   1723 D7            push a
2992   1724 74            mov d, b
2993   1725 DA            push d
2994   1726 26 0B 00      mov b, 11
2995   1729 E7            pop d
2996   172A 10 02 00      mov a, 2
2997   172D AC            mul a, b
2998   172E 5A            add d, b
2999   172F E4            pop a
3000   1730 2A            mov b, [d]
3001   1731 D7            push a
3002   1732 11            mov a, b
3003   1733 26 0A 00      mov b, 10
3004   1736 AE            div a, b
3005   1737 FD 78         mov g, a
3006   1739 11            mov a, b
3007   173A FD 27         mov b, g
3008   173C E4            pop a
3009   173D FD 42 93 3C   mov [__pos], b
3010   1741 29 D5 3B      mov b, [__anarr] ; anarr
3011   1744 D7            push a
3012   1745 74            mov d, b
3013   1746 DA            push d
3014   1747 26 0B 00      mov b, 11
3015   174A E7            pop d
3016   174B 10 02 00      mov a, 2
3017   174E AC            mul a, b
3018   174F 5A            add d, b
3019   1750 E4            pop a
3020   1751 DA            push d
3021   1752 29 D5 3B      mov b, [__anarr] ; anarr
3022   1755 D7            push a
3023   1756 74            mov d, b
3024   1757 DA            push d
3025   1758 26 0B 00      mov b, 11
3026   175B E7            pop d
3027   175C 10 02 00      mov a, 2
3028   175F AC            mul a, b
3029   1760 5A            add d, b
3030   1761 E4            pop a
3031   1762 2A            mov b, [d]
3032   1763 D7            push a
3033   1764 11            mov a, b
3034   1765 29 93 3C      mov b, [__pos] ; pos
3035   1768 D7            push a
3036   1769 11            mov a, b
3037   176A 26 0A 00      mov b, 10
3038   176D AC            mul a, b
3039   176E E4            pop a
3040   176F 60            sub a, b
3041   1770 27            mov b, a
3042   1771 E4            pop a
3043   1772 E7            pop d
3044   1773 FD 43         mov [d], b
3045   1775 26 01 00      mov b, 1
3046   1778 FD 42 8B 3C   mov [__asign], b
3047   177C 0A 7F 17      jmp _if45_exit
3048   177F             _if45_exit:
3049   177F             _if46_cond:
3050   177F 29 EF 3B      mov b, [__bnarr] ; bnarr
3051   1782 D7            push a
3052   1783 74            mov d, b
3053   1784 DA            push d
3054   1785 26 0B 00      mov b, 11
3055   1788 E7            pop d
3056   1789 10 02 00      mov a, 2
3057   178C AC            mul a, b
3058   178D 5A            add d, b
3059   178E E4            pop a
3060   178F 2A            mov b, [d]
3061   1790 D7            push a
3062   1791 11            mov a, b
3063   1792 26 09 00      mov b, 9
3064   1795 B0            cmp a, b
3065   1796 0E            lodflgs
3066   1797 2F            mov bl, al
3067   1798 FD 78         mov g, a
3068   179A FD A2 03      shr al, 3
3069   179D FD A4 02      shr bl, 2
3070   17A0 FD 87 01      and bl, %00000001
3071   17A3 90            xor al, bl
3072   17A4 FD 27         mov b, g
3073   17A6 FD 87 01      and bl, %00000001
3074   17A9 8C            or al, bl
3075   17AA 8F 01         xor al, %00000001 ; > (signed)
3076   17AC 22 00         mov ah, 0
3077   17AE 27            mov b, a
3078   17AF E4            pop a
3079   17B0 C0 00 00      cmp b, 0
3080   17B3 C6 15 18      je _if46_exit
3081   17B6             _if46_true:
3082   17B6 29 EF 3B      mov b, [__bnarr] ; bnarr
3083   17B9 D7            push a
3084   17BA 74            mov d, b
3085   17BB DA            push d
3086   17BC 26 0B 00      mov b, 11
3087   17BF E7            pop d
3088   17C0 10 02 00      mov a, 2
3089   17C3 AC            mul a, b
3090   17C4 5A            add d, b
3091   17C5 E4            pop a
3092   17C6 2A            mov b, [d]
3093   17C7 D7            push a
3094   17C8 11            mov a, b
3095   17C9 26 0A 00      mov b, 10
3096   17CC AE            div a, b
3097   17CD FD 78         mov g, a
3098   17CF 11            mov a, b
3099   17D0 FD 27         mov b, g
3100   17D2 E4            pop a
3101   17D3 FD 42 93 3C   mov [__pos], b
3102   17D7 29 EF 3B      mov b, [__bnarr] ; bnarr
3103   17DA D7            push a
3104   17DB 74            mov d, b
3105   17DC DA            push d
3106   17DD 26 0B 00      mov b, 11
3107   17E0 E7            pop d
3108   17E1 10 02 00      mov a, 2
3109   17E4 AC            mul a, b
3110   17E5 5A            add d, b
3111   17E6 E4            pop a
3112   17E7 DA            push d
3113   17E8 29 EF 3B      mov b, [__bnarr] ; bnarr
3114   17EB D7            push a
3115   17EC 74            mov d, b
3116   17ED DA            push d
3117   17EE 26 0B 00      mov b, 11
3118   17F1 E7            pop d
3119   17F2 10 02 00      mov a, 2
3120   17F5 AC            mul a, b
3121   17F6 5A            add d, b
3122   17F7 E4            pop a
3123   17F8 2A            mov b, [d]
3124   17F9 D7            push a
3125   17FA 11            mov a, b
3126   17FB 29 93 3C      mov b, [__pos] ; pos
3127   17FE D7            push a
3128   17FF 11            mov a, b
3129   1800 26 0A 00      mov b, 10
3130   1803 AC            mul a, b
3131   1804 E4            pop a
3132   1805 60            sub a, b
3133   1806 27            mov b, a
3134   1807 E4            pop a
3135   1808 E7            pop d
3136   1809 FD 43         mov [d], b
3137   180B 26 01 00      mov b, 1
3138   180E FD 42 8D 3C   mov [__bsign], b
3139   1812 0A 15 18      jmp _if46_exit
3140   1815             _if46_exit:
3141   1815 F9            leave
3142   1816 09            ret
3143   1817             
3144   1817             fixsignout:
3145   1817 D2            push bp
3146   1818 9B            mov bp, sp
3147   1819             _if47_cond:
3148   1819 29 8F 3C      mov b, [__csign] ; csign
3149   181C D7            push a
3150   181D 11            mov a, b
3151   181E 26 01 00      mov b, 1
3152   1821 B0            cmp a, b
3153   1822 0E            lodflgs
3154   1823 87 01         and al, %00000001 ; ==
3155   1825 22 00         mov ah, 0
3156   1827 27            mov b, a
3157   1828 E4            pop a
3158   1829 C0 00 00      cmp b, 0
3159   182C C6 66 18      je _if47_exit
3160   182F             _if47_true:
3161   182F 29 3D 3C      mov b, [__cnarr] ; cnarr
3162   1832 D7            push a
3163   1833 74            mov d, b
3164   1834 DA            push d
3165   1835 26 0B 00      mov b, 11
3166   1838 E7            pop d
3167   1839 10 02 00      mov a, 2
3168   183C AC            mul a, b
3169   183D 5A            add d, b
3170   183E E4            pop a
3171   183F DA            push d
3172   1840 29 3D 3C      mov b, [__cnarr] ; cnarr
3173   1843 D7            push a
3174   1844 74            mov d, b
3175   1845 DA            push d
3176   1846 26 0B 00      mov b, 11
3177   1849 E7            pop d
3178   184A 10 02 00      mov a, 2
3179   184D AC            mul a, b
3180   184E 5A            add d, b
3181   184F E4            pop a
3182   1850 2A            mov b, [d]
3183   1851 D7            push a
3184   1852 11            mov a, b
3185   1853 26 0A 00      mov b, 10
3186   1856 54            add a, b
3187   1857 27            mov b, a
3188   1858 E4            pop a
3189   1859 E7            pop d
3190   185A FD 43         mov [d], b
3191   185C 26 00 00      mov b, 0
3192   185F FD 42 8F 3C   mov [__csign], b
3193   1863 0A 66 18      jmp _if47_exit
3194   1866             _if47_exit:
3195   1866 F9            leave
3196   1867 09            ret
3197   1868             
3198   1868             fixcsizezero:
3199   1868 D2            push bp
3200   1869 9B            mov bp, sp
3201   186A 26 01 00      mov b, 1
3202   186D FD 42 C7 3C   mov [__allzeroes], b
3203   1871             _for48_init:
3204   1871 26 01 00      mov b, 1
3205   1874 FD 42 93 3C   mov [__pos], b
3206   1878             _for48_cond:
3207   1878 29 93 3C      mov b, [__pos] ; pos
3208   187B D7            push a
3209   187C 11            mov a, b
3210   187D 26 0C 00      mov b, 12
3211   1880 B0            cmp a, b
3212   1881 0E            lodflgs
3213   1882 2F            mov bl, al
3214   1883 FD A2 03      shr al, 3
3215   1886 FD A4 02      shr bl, 2
3216   1889 FD 87 01      and bl, %00000001
3217   188C 90            xor al, bl ; < (signed)
3218   188D 22 00         mov ah, 0
3219   188F 27            mov b, a
3220   1890 E4            pop a
3221   1891 C0 00 00      cmp b, 0
3222   1894 C6 DA 18      je _for48_exit
3223   1897             _for48_block:
3224   1897             _if49_cond:
3225   1897 29 3D 3C      mov b, [__cnarr] ; cnarr
3226   189A D7            push a
3227   189B 74            mov d, b
3228   189C DA            push d
3229   189D 29 93 3C      mov b, [__pos] ; pos
3230   18A0 E7            pop d
3231   18A1 10 02 00      mov a, 2
3232   18A4 AC            mul a, b
3233   18A5 5A            add d, b
3234   18A6 E4            pop a
3235   18A7 2A            mov b, [d]
3236   18A8 D7            push a
3237   18A9 11            mov a, b
3238   18AA 26 00 00      mov b, 0
3239   18AD B0            cmp a, b
3240   18AE 0E            lodflgs
3241   18AF 87 01         and al, %00000001
3242   18B1 8F 01         xor al, %00000001 ; !=
3243   18B3 22 00         mov ah, 0
3244   18B5 27            mov b, a
3245   18B6 E4            pop a
3246   18B7 C0 00 00      cmp b, 0
3247   18BA C6 CA 18      je _if49_exit
3248   18BD             _if49_true:
3249   18BD 26 00 00      mov b, 0
3250   18C0 FD 42 C7 3C   mov [__allzeroes], b
3251   18C4 0A DA 18      jmp _for48_exit ; for break
3252   18C7 0A CA 18      jmp _if49_exit
3253   18CA             _if49_exit:
3254   18CA             _for48_update:
3255   18CA 29 93 3C      mov b, [__pos] ; pos
3256   18CD D7            push a
3257   18CE 11            mov a, b
3258   18CF FD 77         inc b
3259   18D1 FD 42 93 3C   mov [__pos], b
3260   18D5 27            mov b, a
3261   18D6 E4            pop a
3262   18D7 0A 78 18      jmp _for48_cond
3263   18DA             _for48_exit:
3264   18DA             _if50_cond:
3265   18DA 29 C7 3C      mov b, [__allzeroes] ; allzeroes
3266   18DD D7            push a
3267   18DE 11            mov a, b
3268   18DF 26 01 00      mov b, 1
3269   18E2 B0            cmp a, b
3270   18E3 0E            lodflgs
3271   18E4 87 01         and al, %00000001 ; ==
3272   18E6 22 00         mov ah, 0
3273   18E8 27            mov b, a
3274   18E9 E4            pop a
3275   18EA C0 00 00      cmp b, 0
3276   18ED C6 FA 18      je _if50_exit
3277   18F0             _if50_true:
3278   18F0 26 00 00      mov b, 0
3279   18F3 FD 42 8F 3C   mov [__csign], b
3280   18F7 0A FA 18      jmp _if50_exit
3281   18FA             _if50_exit:
3282   18FA             _if51_cond:
3283   18FA 29 3D 3C      mov b, [__cnarr] ; cnarr
3284   18FD D7            push a
3285   18FE 74            mov d, b
3286   18FF DA            push d
3287   1900 26 0B 00      mov b, 11
3288   1903 E7            pop d
3289   1904 10 02 00      mov a, 2
3290   1907 AC            mul a, b
3291   1908 5A            add d, b
3292   1909 E4            pop a
3293   190A 2A            mov b, [d]
3294   190B D7            push a
3295   190C 11            mov a, b
3296   190D 26 09 00      mov b, 9
3297   1910 B0            cmp a, b
3298   1911 0E            lodflgs
3299   1912 2F            mov bl, al
3300   1913 FD 78         mov g, a
3301   1915 FD A2 03      shr al, 3
3302   1918 FD A4 02      shr bl, 2
3303   191B FD 87 01      and bl, %00000001
3304   191E 90            xor al, bl
3305   191F FD 27         mov b, g
3306   1921 FD 87 01      and bl, %00000001
3307   1924 8C            or al, bl
3308   1925 8F 01         xor al, %00000001 ; > (signed)
3309   1927 22 00         mov ah, 0
3310   1929 27            mov b, a
3311   192A E4            pop a
3312   192B C0 00 00      cmp b, 0
3313   192E C6 88 19      je _if51_exit
3314   1931             _if51_true:
3315   1931 26 00 00      mov b, 0
3316   1934 FD 42 8F 3C   mov [__csign], b
3317   1938             _for52_init:
3318   1938 26 01 00      mov b, 1
3319   193B FD 42 93 3C   mov [__pos], b
3320   193F             _for52_cond:
3321   193F 29 93 3C      mov b, [__pos] ; pos
3322   1942 D7            push a
3323   1943 11            mov a, b
3324   1944 26 0C 00      mov b, 12
3325   1947 B0            cmp a, b
3326   1948 0E            lodflgs
3327   1949 2F            mov bl, al
3328   194A FD A2 03      shr al, 3
3329   194D FD A4 02      shr bl, 2
3330   1950 FD 87 01      and bl, %00000001
3331   1953 90            xor al, bl ; < (signed)
3332   1954 22 00         mov ah, 0
3333   1956 27            mov b, a
3334   1957 E4            pop a
3335   1958 C0 00 00      cmp b, 0
3336   195B C6 85 19      je _for52_exit
3337   195E             _for52_block:
3338   195E 29 3D 3C      mov b, [__cnarr] ; cnarr
3339   1961 D7            push a
3340   1962 74            mov d, b
3341   1963 DA            push d
3342   1964 29 93 3C      mov b, [__pos] ; pos
3343   1967 E7            pop d
3344   1968 10 02 00      mov a, 2
3345   196B AC            mul a, b
3346   196C 5A            add d, b
3347   196D E4            pop a
3348   196E DA            push d
3349   196F 26 00 00      mov b, 0
3350   1972 E7            pop d
3351   1973 FD 43         mov [d], b
3352   1975             _for52_update:
3353   1975 29 93 3C      mov b, [__pos] ; pos
3354   1978 D7            push a
3355   1979 11            mov a, b
3356   197A FD 77         inc b
3357   197C FD 42 93 3C   mov [__pos], b
3358   1980 27            mov b, a
3359   1981 E4            pop a
3360   1982 0A 3F 19      jmp _for52_cond
3361   1985             _for52_exit:
3362   1985 0A 88 19      jmp _if51_exit
3363   1988             _if51_exit:
3364   1988 F9            leave
3365   1989 09            ret
3366   198A             
3367   198A             swapab:
3368   198A D2            push bp
3369   198B 9B            mov bp, sp
3370   198C             _for53_init:
3371   198C 26 00 00      mov b, 0
3372   198F FD 42 AB 3C   mov [__swappos], b
3373   1993             _for53_cond:
3374   1993 29 AB 3C      mov b, [__swappos] ; swappos
3375   1996 D7            push a
3376   1997 11            mov a, b
3377   1998 26 0C 00      mov b, 12
3378   199B B0            cmp a, b
3379   199C 0E            lodflgs
3380   199D 2F            mov bl, al
3381   199E FD A2 03      shr al, 3
3382   19A1 FD A4 02      shr bl, 2
3383   19A4 FD 87 01      and bl, %00000001
3384   19A7 90            xor al, bl ; < (signed)
3385   19A8 22 00         mov ah, 0
3386   19AA 27            mov b, a
3387   19AB E4            pop a
3388   19AC C0 00 00      cmp b, 0
3389   19AF C6 73 1A      je _for53_exit
3390   19B2             _for53_block:
3391   19B2 29 D5 3B      mov b, [__anarr] ; anarr
3392   19B5 D7            push a
3393   19B6 74            mov d, b
3394   19B7 DA            push d
3395   19B8 29 AB 3C      mov b, [__swappos] ; swappos
3396   19BB E7            pop d
3397   19BC 10 02 00      mov a, 2
3398   19BF AC            mul a, b
3399   19C0 5A            add d, b
3400   19C1 E4            pop a
3401   19C2 DA            push d
3402   19C3 29 D5 3B      mov b, [__anarr] ; anarr
3403   19C6 D7            push a
3404   19C7 74            mov d, b
3405   19C8 DA            push d
3406   19C9 29 AB 3C      mov b, [__swappos] ; swappos
3407   19CC E7            pop d
3408   19CD 10 02 00      mov a, 2
3409   19D0 AC            mul a, b
3410   19D1 5A            add d, b
3411   19D2 E4            pop a
3412   19D3 2A            mov b, [d]
3413   19D4 D7            push a
3414   19D5 11            mov a, b
3415   19D6 29 EF 3B      mov b, [__bnarr] ; bnarr
3416   19D9 D7            push a
3417   19DA 74            mov d, b
3418   19DB DA            push d
3419   19DC 29 AB 3C      mov b, [__swappos] ; swappos
3420   19DF E7            pop d
3421   19E0 10 02 00      mov a, 2
3422   19E3 AC            mul a, b
3423   19E4 5A            add d, b
3424   19E5 E4            pop a
3425   19E6 2A            mov b, [d]
3426   19E7 54            add a, b
3427   19E8 27            mov b, a
3428   19E9 E4            pop a
3429   19EA E7            pop d
3430   19EB FD 43         mov [d], b
3431   19ED 29 EF 3B      mov b, [__bnarr] ; bnarr
3432   19F0 D7            push a
3433   19F1 74            mov d, b
3434   19F2 DA            push d
3435   19F3 29 AB 3C      mov b, [__swappos] ; swappos
3436   19F6 E7            pop d
3437   19F7 10 02 00      mov a, 2
3438   19FA AC            mul a, b
3439   19FB 5A            add d, b
3440   19FC E4            pop a
3441   19FD DA            push d
3442   19FE 29 D5 3B      mov b, [__anarr] ; anarr
3443   1A01 D7            push a
3444   1A02 74            mov d, b
3445   1A03 DA            push d
3446   1A04 29 AB 3C      mov b, [__swappos] ; swappos
3447   1A07 E7            pop d
3448   1A08 10 02 00      mov a, 2
3449   1A0B AC            mul a, b
3450   1A0C 5A            add d, b
3451   1A0D E4            pop a
3452   1A0E 2A            mov b, [d]
3453   1A0F D7            push a
3454   1A10 11            mov a, b
3455   1A11 29 EF 3B      mov b, [__bnarr] ; bnarr
3456   1A14 D7            push a
3457   1A15 74            mov d, b
3458   1A16 DA            push d
3459   1A17 29 AB 3C      mov b, [__swappos] ; swappos
3460   1A1A E7            pop d
3461   1A1B 10 02 00      mov a, 2
3462   1A1E AC            mul a, b
3463   1A1F 5A            add d, b
3464   1A20 E4            pop a
3465   1A21 2A            mov b, [d]
3466   1A22 60            sub a, b
3467   1A23 27            mov b, a
3468   1A24 E4            pop a
3469   1A25 E7            pop d
3470   1A26 FD 43         mov [d], b
3471   1A28 29 D5 3B      mov b, [__anarr] ; anarr
3472   1A2B D7            push a
3473   1A2C 74            mov d, b
3474   1A2D DA            push d
3475   1A2E 29 AB 3C      mov b, [__swappos] ; swappos
3476   1A31 E7            pop d
3477   1A32 10 02 00      mov a, 2
3478   1A35 AC            mul a, b
3479   1A36 5A            add d, b
3480   1A37 E4            pop a
3481   1A38 DA            push d
3482   1A39 29 D5 3B      mov b, [__anarr] ; anarr
3483   1A3C D7            push a
3484   1A3D 74            mov d, b
3485   1A3E DA            push d
3486   1A3F 29 AB 3C      mov b, [__swappos] ; swappos
3487   1A42 E7            pop d
3488   1A43 10 02 00      mov a, 2
3489   1A46 AC            mul a, b
3490   1A47 5A            add d, b
3491   1A48 E4            pop a
3492   1A49 2A            mov b, [d]
3493   1A4A D7            push a
3494   1A4B 11            mov a, b
3495   1A4C 29 EF 3B      mov b, [__bnarr] ; bnarr
3496   1A4F D7            push a
3497   1A50 74            mov d, b
3498   1A51 DA            push d
3499   1A52 29 AB 3C      mov b, [__swappos] ; swappos
3500   1A55 E7            pop d
3501   1A56 10 02 00      mov a, 2
3502   1A59 AC            mul a, b
3503   1A5A 5A            add d, b
3504   1A5B E4            pop a
3505   1A5C 2A            mov b, [d]
3506   1A5D 60            sub a, b
3507   1A5E 27            mov b, a
3508   1A5F E4            pop a
3509   1A60 E7            pop d
3510   1A61 FD 43         mov [d], b
3511   1A63             _for53_update:
3512   1A63 29 AB 3C      mov b, [__swappos] ; swappos
3513   1A66 D7            push a
3514   1A67 11            mov a, b
3515   1A68 FD 77         inc b
3516   1A6A FD 42 AB 3C   mov [__swappos], b
3517   1A6E 27            mov b, a
3518   1A6F E4            pop a
3519   1A70 0A 93 19      jmp _for53_cond
3520   1A73             _for53_exit:
3521   1A73 F9            leave
3522   1A74 09            ret
3523   1A75             
3524   1A75             checkabsabsize:
3525   1A75 D2            push bp
3526   1A76 9B            mov bp, sp
3527   1A77 26 00 00      mov b, 0
3528   1A7A FD 42 99 3C   mov [__agtb], b
3529   1A7E 26 00 00      mov b, 0
3530   1A81 FD 42 9B 3C   mov [__bgta], b
3531   1A85 26 00 00      mov b, 0
3532   1A88 FD 42 A1 3C   mov [__ageb], b
3533   1A8C 26 00 00      mov b, 0
3534   1A8F FD 42 A3 3C   mov [__bgea], b
3535   1A93 26 00 00      mov b, 0
3536   1A96 FD 42 9D 3C   mov [__aeqb], b
3537   1A9A 26 00 00      mov b, 0
3538   1A9D FD 42 9F 3C   mov [__aneqb], b
3539   1AA1             _for54_init:
3540   1AA1 26 0C 00      mov b, 12
3541   1AA4 FD 42 A9 3C   mov [__psizepos], b
3542   1AA8             _for54_cond:
3543   1AA8 29 A9 3C      mov b, [__psizepos] ; psizepos
3544   1AAB D7            push a
3545   1AAC 11            mov a, b
3546   1AAD 26 00 00      mov b, 0
3547   1AB0 B0            cmp a, b
3548   1AB1 0E            lodflgs
3549   1AB2 2F            mov bl, al
3550   1AB3 FD 78         mov g, a
3551   1AB5 FD A2 03      shr al, 3
3552   1AB8 FD A4 02      shr bl, 2
3553   1ABB FD 87 01      and bl, %00000001
3554   1ABE 90            xor al, bl
3555   1ABF FD 27         mov b, g
3556   1AC1 FD 87 01      and bl, %00000001
3557   1AC4 8C            or al, bl
3558   1AC5 8F 01         xor al, %00000001 ; > (signed)
3559   1AC7 22 00         mov ah, 0
3560   1AC9 27            mov b, a
3561   1ACA E4            pop a
3562   1ACB C0 00 00      cmp b, 0
3563   1ACE C6 BC 1B      je _for54_exit
3564   1AD1             _for54_block:
3565   1AD1 29 A9 3C      mov b, [__psizepos] ; psizepos
3566   1AD4 D7            push a
3567   1AD5 11            mov a, b
3568   1AD6 26 01 00      mov b, 1
3569   1AD9 60            sub a, b
3570   1ADA 27            mov b, a
3571   1ADB E4            pop a
3572   1ADC FD 42 A7 3C   mov [__sizepos], b
3573   1AE0             _if55_cond:
3574   1AE0 29 D5 3B      mov b, [__anarr] ; anarr
3575   1AE3 D7            push a
3576   1AE4 74            mov d, b
3577   1AE5 DA            push d
3578   1AE6 29 A7 3C      mov b, [__sizepos] ; sizepos
3579   1AE9 E7            pop d
3580   1AEA 10 02 00      mov a, 2
3581   1AED AC            mul a, b
3582   1AEE 5A            add d, b
3583   1AEF E4            pop a
3584   1AF0 2A            mov b, [d]
3585   1AF1 D7            push a
3586   1AF2 11            mov a, b
3587   1AF3 29 EF 3B      mov b, [__bnarr] ; bnarr
3588   1AF6 D7            push a
3589   1AF7 74            mov d, b
3590   1AF8 DA            push d
3591   1AF9 29 A7 3C      mov b, [__sizepos] ; sizepos
3592   1AFC E7            pop d
3593   1AFD 10 02 00      mov a, 2
3594   1B00 AC            mul a, b
3595   1B01 5A            add d, b
3596   1B02 E4            pop a
3597   1B03 2A            mov b, [d]
3598   1B04 B0            cmp a, b
3599   1B05 0E            lodflgs
3600   1B06 2F            mov bl, al
3601   1B07 FD 78         mov g, a
3602   1B09 FD A2 03      shr al, 3
3603   1B0C FD A4 02      shr bl, 2
3604   1B0F FD 87 01      and bl, %00000001
3605   1B12 90            xor al, bl
3606   1B13 FD 27         mov b, g
3607   1B15 FD 87 01      and bl, %00000001
3608   1B18 8C            or al, bl
3609   1B19 8F 01         xor al, %00000001 ; > (signed)
3610   1B1B 22 00         mov ah, 0
3611   1B1D 27            mov b, a
3612   1B1E E4            pop a
3613   1B1F C0 00 00      cmp b, 0
3614   1B22 C6 3D 1B      je _if55_exit
3615   1B25             _if55_true:
3616   1B25 26 01 00      mov b, 1
3617   1B28 FD 42 9F 3C   mov [__aneqb], b
3618   1B2C 26 01 00      mov b, 1
3619   1B2F FD 42 99 3C   mov [__agtb], b
3620   1B33 26 01 00      mov b, 1
3621   1B36 FD 42 A1 3C   mov [__ageb], b
3622   1B3A 0A 3D 1B      jmp _if55_exit
3623   1B3D             _if55_exit:
3624   1B3D             _if56_cond:
3625   1B3D 29 D5 3B      mov b, [__anarr] ; anarr
3626   1B40 D7            push a
3627   1B41 74            mov d, b
3628   1B42 DA            push d
3629   1B43 29 A7 3C      mov b, [__sizepos] ; sizepos
3630   1B46 E7            pop d
3631   1B47 10 02 00      mov a, 2
3632   1B4A AC            mul a, b
3633   1B4B 5A            add d, b
3634   1B4C E4            pop a
3635   1B4D 2A            mov b, [d]
3636   1B4E D7            push a
3637   1B4F 11            mov a, b
3638   1B50 29 EF 3B      mov b, [__bnarr] ; bnarr
3639   1B53 D7            push a
3640   1B54 74            mov d, b
3641   1B55 DA            push d
3642   1B56 29 A7 3C      mov b, [__sizepos] ; sizepos
3643   1B59 E7            pop d
3644   1B5A 10 02 00      mov a, 2
3645   1B5D AC            mul a, b
3646   1B5E 5A            add d, b
3647   1B5F E4            pop a
3648   1B60 2A            mov b, [d]
3649   1B61 B0            cmp a, b
3650   1B62 0E            lodflgs
3651   1B63 2F            mov bl, al
3652   1B64 FD A2 03      shr al, 3
3653   1B67 FD A4 02      shr bl, 2
3654   1B6A FD 87 01      and bl, %00000001
3655   1B6D 90            xor al, bl ; < (signed)
3656   1B6E 22 00         mov ah, 0
3657   1B70 27            mov b, a
3658   1B71 E4            pop a
3659   1B72 C0 00 00      cmp b, 0
3660   1B75 C6 90 1B      je _if56_exit
3661   1B78             _if56_true:
3662   1B78 26 01 00      mov b, 1
3663   1B7B FD 42 9F 3C   mov [__aneqb], b
3664   1B7F 26 01 00      mov b, 1
3665   1B82 FD 42 9B 3C   mov [__bgta], b
3666   1B86 26 01 00      mov b, 1
3667   1B89 FD 42 A3 3C   mov [__bgea], b
3668   1B8D 0A 90 1B      jmp _if56_exit
3669   1B90             _if56_exit:
3670   1B90             _if57_cond:
3671   1B90 29 9F 3C      mov b, [__aneqb] ; aneqb
3672   1B93 D7            push a
3673   1B94 11            mov a, b
3674   1B95 26 01 00      mov b, 1
3675   1B98 B0            cmp a, b
3676   1B99 0E            lodflgs
3677   1B9A 87 01         and al, %00000001 ; ==
3678   1B9C 22 00         mov ah, 0
3679   1B9E 27            mov b, a
3680   1B9F E4            pop a
3681   1BA0 C0 00 00      cmp b, 0
3682   1BA3 C6 AC 1B      je _if57_exit
3683   1BA6             _if57_true:
3684   1BA6 0A BC 1B      jmp _for54_exit ; for break
3685   1BA9 0A AC 1B      jmp _if57_exit
3686   1BAC             _if57_exit:
3687   1BAC             _for54_update:
3688   1BAC 29 A9 3C      mov b, [__psizepos] ; psizepos
3689   1BAF D7            push a
3690   1BB0 11            mov a, b
3691   1BB1 FD 7D         dec b
3692   1BB3 FD 42 A9 3C   mov [__psizepos], b
3693   1BB7 27            mov b, a
3694   1BB8 E4            pop a
3695   1BB9 0A A8 1A      jmp _for54_cond
3696   1BBC             _for54_exit:
3697   1BBC             _if58_cond:
3698   1BBC 29 9F 3C      mov b, [__aneqb] ; aneqb
3699   1BBF D7            push a
3700   1BC0 11            mov a, b
3701   1BC1 26 00 00      mov b, 0
3702   1BC4 B0            cmp a, b
3703   1BC5 0E            lodflgs
3704   1BC6 87 01         and al, %00000001 ; ==
3705   1BC8 22 00         mov ah, 0
3706   1BCA 27            mov b, a
3707   1BCB E4            pop a
3708   1BCC C0 00 00      cmp b, 0
3709   1BCF C6 EA 1B      je _if58_exit
3710   1BD2             _if58_true:
3711   1BD2 26 01 00      mov b, 1
3712   1BD5 FD 42 9D 3C   mov [__aeqb], b
3713   1BD9 26 01 00      mov b, 1
3714   1BDC FD 42 A1 3C   mov [__ageb], b
3715   1BE0 26 01 00      mov b, 1
3716   1BE3 FD 42 A3 3C   mov [__bgea], b
3717   1BE7 0A EA 1B      jmp _if58_exit
3718   1BEA             _if58_exit:
3719   1BEA F9            leave
3720   1BEB 09            ret
3721   1BEC             
3722   1BEC             protoplus:
3723   1BEC D2            push bp
3724   1BED 9B            mov bp, sp
3725   1BEE 26 00 00      mov b, 0
3726   1BF1 FD 42 95 3C   mov [__carry], b
3727   1BF5             _for59_init:
3728   1BF5 26 00 00      mov b, 0
3729   1BF8 FD 42 93 3C   mov [__pos], b
3730   1BFC             _for59_cond:
3731   1BFC 29 93 3C      mov b, [__pos] ; pos
3732   1BFF D7            push a
3733   1C00 11            mov a, b
3734   1C01 26 0C 00      mov b, 12
3735   1C04 B0            cmp a, b
3736   1C05 0E            lodflgs
3737   1C06 2F            mov bl, al
3738   1C07 FD A2 03      shr al, 3
3739   1C0A FD A4 02      shr bl, 2
3740   1C0D FD 87 01      and bl, %00000001
3741   1C10 90            xor al, bl ; < (signed)
3742   1C11 22 00         mov ah, 0
3743   1C13 27            mov b, a
3744   1C14 E4            pop a
3745   1C15 C0 00 00      cmp b, 0
3746   1C18 C6 E3 1C      je _for59_exit
3747   1C1B             _for59_block:
3748   1C1B 29 3D 3C      mov b, [__cnarr] ; cnarr
3749   1C1E D7            push a
3750   1C1F 74            mov d, b
3751   1C20 DA            push d
3752   1C21 29 93 3C      mov b, [__pos] ; pos
3753   1C24 E7            pop d
3754   1C25 10 02 00      mov a, 2
3755   1C28 AC            mul a, b
3756   1C29 5A            add d, b
3757   1C2A E4            pop a
3758   1C2B DA            push d
3759   1C2C 29 D5 3B      mov b, [__anarr] ; anarr
3760   1C2F D7            push a
3761   1C30 74            mov d, b
3762   1C31 DA            push d
3763   1C32 29 93 3C      mov b, [__pos] ; pos
3764   1C35 E7            pop d
3765   1C36 10 02 00      mov a, 2
3766   1C39 AC            mul a, b
3767   1C3A 5A            add d, b
3768   1C3B E4            pop a
3769   1C3C 2A            mov b, [d]
3770   1C3D D7            push a
3771   1C3E 11            mov a, b
3772   1C3F 29 EF 3B      mov b, [__bnarr] ; bnarr
3773   1C42 D7            push a
3774   1C43 74            mov d, b
3775   1C44 DA            push d
3776   1C45 29 93 3C      mov b, [__pos] ; pos
3777   1C48 E7            pop d
3778   1C49 10 02 00      mov a, 2
3779   1C4C AC            mul a, b
3780   1C4D 5A            add d, b
3781   1C4E E4            pop a
3782   1C4F 2A            mov b, [d]
3783   1C50 54            add a, b
3784   1C51 27            mov b, a
3785   1C52 E4            pop a
3786   1C53 D7            push a
3787   1C54 11            mov a, b
3788   1C55 29 95 3C      mov b, [__carry] ; carry
3789   1C58 54            add a, b
3790   1C59 27            mov b, a
3791   1C5A E4            pop a
3792   1C5B E7            pop d
3793   1C5C FD 43         mov [d], b
3794   1C5E 26 00 00      mov b, 0
3795   1C61 FD 42 95 3C   mov [__carry], b
3796   1C65             _if60_cond:
3797   1C65 29 3D 3C      mov b, [__cnarr] ; cnarr
3798   1C68 D7            push a
3799   1C69 74            mov d, b
3800   1C6A DA            push d
3801   1C6B 29 93 3C      mov b, [__pos] ; pos
3802   1C6E E7            pop d
3803   1C6F 10 02 00      mov a, 2
3804   1C72 AC            mul a, b
3805   1C73 5A            add d, b
3806   1C74 E4            pop a
3807   1C75 2A            mov b, [d]
3808   1C76 D7            push a
3809   1C77 11            mov a, b
3810   1C78 26 63 00      mov b, 99
3811   1C7B B0            cmp a, b
3812   1C7C 0E            lodflgs
3813   1C7D 2F            mov bl, al
3814   1C7E FD 78         mov g, a
3815   1C80 FD A2 03      shr al, 3
3816   1C83 FD A4 02      shr bl, 2
3817   1C86 FD 87 01      and bl, %00000001
3818   1C89 90            xor al, bl
3819   1C8A FD 27         mov b, g
3820   1C8C FD 87 01      and bl, %00000001
3821   1C8F 8C            or al, bl
3822   1C90 8F 01         xor al, %00000001 ; > (signed)
3823   1C92 22 00         mov ah, 0
3824   1C94 27            mov b, a
3825   1C95 E4            pop a
3826   1C96 C0 00 00      cmp b, 0
3827   1C99 C6 D3 1C      je _if60_exit
3828   1C9C             _if60_true:
3829   1C9C 26 01 00      mov b, 1
3830   1C9F FD 42 95 3C   mov [__carry], b
3831   1CA3 29 3D 3C      mov b, [__cnarr] ; cnarr
3832   1CA6 D7            push a
3833   1CA7 74            mov d, b
3834   1CA8 DA            push d
3835   1CA9 29 93 3C      mov b, [__pos] ; pos
3836   1CAC E7            pop d
3837   1CAD 10 02 00      mov a, 2
3838   1CB0 AC            mul a, b
3839   1CB1 5A            add d, b
3840   1CB2 E4            pop a
3841   1CB3 DA            push d
3842   1CB4 29 3D 3C      mov b, [__cnarr] ; cnarr
3843   1CB7 D7            push a
3844   1CB8 74            mov d, b
3845   1CB9 DA            push d
3846   1CBA 29 93 3C      mov b, [__pos] ; pos
3847   1CBD E7            pop d
3848   1CBE 10 02 00      mov a, 2
3849   1CC1 AC            mul a, b
3850   1CC2 5A            add d, b
3851   1CC3 E4            pop a
3852   1CC4 2A            mov b, [d]
3853   1CC5 D7            push a
3854   1CC6 11            mov a, b
3855   1CC7 26 64 00      mov b, 100
3856   1CCA 60            sub a, b
3857   1CCB 27            mov b, a
3858   1CCC E4            pop a
3859   1CCD E7            pop d
3860   1CCE FD 43         mov [d], b
3861   1CD0 0A D3 1C      jmp _if60_exit
3862   1CD3             _if60_exit:
3863   1CD3             _for59_update:
3864   1CD3 29 93 3C      mov b, [__pos] ; pos
3865   1CD6 D7            push a
3866   1CD7 11            mov a, b
3867   1CD8 FD 77         inc b
3868   1CDA FD 42 93 3C   mov [__pos], b
3869   1CDE 27            mov b, a
3870   1CDF E4            pop a
3871   1CE0 0A FC 1B      jmp _for59_cond
3872   1CE3             _for59_exit:
3873   1CE3 F9            leave
3874   1CE4 09            ret
3875   1CE5             
3876   1CE5             protominus:
3877   1CE5 D2            push bp
3878   1CE6 9B            mov bp, sp
3879   1CE7 26 00 00      mov b, 0
3880   1CEA FD 42 95 3C   mov [__carry], b
3881   1CEE             _for61_init:
3882   1CEE 26 00 00      mov b, 0
3883   1CF1 FD 42 93 3C   mov [__pos], b
3884   1CF5             _for61_cond:
3885   1CF5 29 93 3C      mov b, [__pos] ; pos
3886   1CF8 D7            push a
3887   1CF9 11            mov a, b
3888   1CFA 26 0C 00      mov b, 12
3889   1CFD B0            cmp a, b
3890   1CFE 0E            lodflgs
3891   1CFF 2F            mov bl, al
3892   1D00 FD A2 03      shr al, 3
3893   1D03 FD A4 02      shr bl, 2
3894   1D06 FD 87 01      and bl, %00000001
3895   1D09 90            xor al, bl ; < (signed)
3896   1D0A 22 00         mov ah, 0
3897   1D0C 27            mov b, a
3898   1D0D E4            pop a
3899   1D0E C0 00 00      cmp b, 0
3900   1D11 C6 F9 1D      je _for61_exit
3901   1D14             _for61_block:
3902   1D14 26 00 00      mov b, 0
3903   1D17 FD 42 97 3C   mov [__nextcarry], b
3904   1D1B             _if62_cond:
3905   1D1B 29 EF 3B      mov b, [__bnarr] ; bnarr
3906   1D1E D7            push a
3907   1D1F 74            mov d, b
3908   1D20 DA            push d
3909   1D21 29 93 3C      mov b, [__pos] ; pos
3910   1D24 E7            pop d
3911   1D25 10 02 00      mov a, 2
3912   1D28 AC            mul a, b
3913   1D29 5A            add d, b
3914   1D2A E4            pop a
3915   1D2B 2A            mov b, [d]
3916   1D2C D7            push a
3917   1D2D 11            mov a, b
3918   1D2E 29 95 3C      mov b, [__carry] ; carry
3919   1D31 54            add a, b
3920   1D32 27            mov b, a
3921   1D33 E4            pop a
3922   1D34 D7            push a
3923   1D35 11            mov a, b
3924   1D36 29 D5 3B      mov b, [__anarr] ; anarr
3925   1D39 D7            push a
3926   1D3A 74            mov d, b
3927   1D3B DA            push d
3928   1D3C 29 93 3C      mov b, [__pos] ; pos
3929   1D3F E7            pop d
3930   1D40 10 02 00      mov a, 2
3931   1D43 AC            mul a, b
3932   1D44 5A            add d, b
3933   1D45 E4            pop a
3934   1D46 2A            mov b, [d]
3935   1D47 B0            cmp a, b
3936   1D48 0E            lodflgs
3937   1D49 2F            mov bl, al
3938   1D4A FD 78         mov g, a
3939   1D4C FD A2 03      shr al, 3
3940   1D4F FD A4 02      shr bl, 2
3941   1D52 FD 87 01      and bl, %00000001
3942   1D55 90            xor al, bl
3943   1D56 FD 27         mov b, g
3944   1D58 FD 87 01      and bl, %00000001
3945   1D5B 8C            or al, bl
3946   1D5C 8F 01         xor al, %00000001 ; > (signed)
3947   1D5E 22 00         mov ah, 0
3948   1D60 27            mov b, a
3949   1D61 E4            pop a
3950   1D62 C0 00 00      cmp b, 0
3951   1D65 C6 9F 1D      je _if62_exit
3952   1D68             _if62_true:
3953   1D68 29 D5 3B      mov b, [__anarr] ; anarr
3954   1D6B D7            push a
3955   1D6C 74            mov d, b
3956   1D6D DA            push d
3957   1D6E 29 93 3C      mov b, [__pos] ; pos
3958   1D71 E7            pop d
3959   1D72 10 02 00      mov a, 2
3960   1D75 AC            mul a, b
3961   1D76 5A            add d, b
3962   1D77 E4            pop a
3963   1D78 DA            push d
3964   1D79 29 D5 3B      mov b, [__anarr] ; anarr
3965   1D7C D7            push a
3966   1D7D 74            mov d, b
3967   1D7E DA            push d
3968   1D7F 29 93 3C      mov b, [__pos] ; pos
3969   1D82 E7            pop d
3970   1D83 10 02 00      mov a, 2
3971   1D86 AC            mul a, b
3972   1D87 5A            add d, b
3973   1D88 E4            pop a
3974   1D89 2A            mov b, [d]
3975   1D8A D7            push a
3976   1D8B 11            mov a, b
3977   1D8C 26 64 00      mov b, 100
3978   1D8F 54            add a, b
3979   1D90 27            mov b, a
3980   1D91 E4            pop a
3981   1D92 E7            pop d
3982   1D93 FD 43         mov [d], b
3983   1D95 26 01 00      mov b, 1
3984   1D98 FD 42 97 3C   mov [__nextcarry], b
3985   1D9C 0A 9F 1D      jmp _if62_exit
3986   1D9F             _if62_exit:
3987   1D9F 29 3D 3C      mov b, [__cnarr] ; cnarr
3988   1DA2 D7            push a
3989   1DA3 74            mov d, b
3990   1DA4 DA            push d
3991   1DA5 29 93 3C      mov b, [__pos] ; pos
3992   1DA8 E7            pop d
3993   1DA9 10 02 00      mov a, 2
3994   1DAC AC            mul a, b
3995   1DAD 5A            add d, b
3996   1DAE E4            pop a
3997   1DAF DA            push d
3998   1DB0 29 D5 3B      mov b, [__anarr] ; anarr
3999   1DB3 D7            push a
4000   1DB4 74            mov d, b
4001   1DB5 DA            push d
4002   1DB6 29 93 3C      mov b, [__pos] ; pos
4003   1DB9 E7            pop d
4004   1DBA 10 02 00      mov a, 2
4005   1DBD AC            mul a, b
4006   1DBE 5A            add d, b
4007   1DBF E4            pop a
4008   1DC0 2A            mov b, [d]
4009   1DC1 D7            push a
4010   1DC2 11            mov a, b
4011   1DC3 29 EF 3B      mov b, [__bnarr] ; bnarr
4012   1DC6 D7            push a
4013   1DC7 74            mov d, b
4014   1DC8 DA            push d
4015   1DC9 29 93 3C      mov b, [__pos] ; pos
4016   1DCC E7            pop d
4017   1DCD 10 02 00      mov a, 2
4018   1DD0 AC            mul a, b
4019   1DD1 5A            add d, b
4020   1DD2 E4            pop a
4021   1DD3 2A            mov b, [d]
4022   1DD4 60            sub a, b
4023   1DD5 27            mov b, a
4024   1DD6 E4            pop a
4025   1DD7 D7            push a
4026   1DD8 11            mov a, b
4027   1DD9 29 95 3C      mov b, [__carry] ; carry
4028   1DDC 60            sub a, b
4029   1DDD 27            mov b, a
4030   1DDE E4            pop a
4031   1DDF E7            pop d
4032   1DE0 FD 43         mov [d], b
4033   1DE2 29 97 3C      mov b, [__nextcarry] ; nextcarry
4034   1DE5 FD 42 95 3C   mov [__carry], b
4035   1DE9             _for61_update:
4036   1DE9 29 93 3C      mov b, [__pos] ; pos
4037   1DEC D7            push a
4038   1DED 11            mov a, b
4039   1DEE FD 77         inc b
4040   1DF0 FD 42 93 3C   mov [__pos], b
4041   1DF4 27            mov b, a
4042   1DF5 E4            pop a
4043   1DF6 0A F5 1C      jmp _for61_cond
4044   1DF9             _for61_exit:
4045   1DF9             _if63_cond:
4046   1DF9 29 95 3C      mov b, [__carry] ; carry
4047   1DFC D7            push a
4048   1DFD 11            mov a, b
4049   1DFE 26 01 00      mov b, 1
4050   1E01 B0            cmp a, b
4051   1E02 0E            lodflgs
4052   1E03 87 01         and al, %00000001 ; ==
4053   1E05 22 00         mov ah, 0
4054   1E07 27            mov b, a
4055   1E08 E4            pop a
4056   1E09 C0 00 00      cmp b, 0
4057   1E0C C6 20 1E      je _if63_exit
4058   1E0F             _if63_true:
4059   1E0F 26 01 00      mov b, 1
4060   1E12 FD 42 8F 3C   mov [__csign], b
4061   1E16 26 00 00      mov b, 0
4062   1E19 FD 42 95 3C   mov [__carry], b
4063   1E1D 0A 20 1E      jmp _if63_exit
4064   1E20             _if63_exit:
4065   1E20 F9            leave
4066   1E21 09            ret
4067   1E22             
4068   1E22             pminus:
4069   1E22 D2            push bp
4070   1E23 9B            mov bp, sp
4071   1E24             _for64_init:
4072   1E24 26 00 00      mov b, 0
4073   1E27 FD 42 C5 3C   mov [__divi], b
4074   1E2B             _for64_cond:
4075   1E2B 29 C5 3C      mov b, [__divi] ; divi
4076   1E2E D7            push a
4077   1E2F 11            mov a, b
4078   1E30 26 0C 00      mov b, 12
4079   1E33 B0            cmp a, b
4080   1E34 0E            lodflgs
4081   1E35 2F            mov bl, al
4082   1E36 FD A2 03      shr al, 3
4083   1E39 FD A4 02      shr bl, 2
4084   1E3C FD 87 01      and bl, %00000001
4085   1E3F 90            xor al, bl ; < (signed)
4086   1E40 22 00         mov ah, 0
4087   1E42 27            mov b, a
4088   1E43 E4            pop a
4089   1E44 C0 00 00      cmp b, 0
4090   1E47 C6 71 1E      je _for64_exit
4091   1E4A             _for64_block:
4092   1E4A 29 3D 3C      mov b, [__cnarr] ; cnarr
4093   1E4D D7            push a
4094   1E4E 74            mov d, b
4095   1E4F DA            push d
4096   1E50 29 C5 3C      mov b, [__divi] ; divi
4097   1E53 E7            pop d
4098   1E54 10 02 00      mov a, 2
4099   1E57 AC            mul a, b
4100   1E58 5A            add d, b
4101   1E59 E4            pop a
4102   1E5A DA            push d
4103   1E5B 26 00 00      mov b, 0
4104   1E5E E7            pop d
4105   1E5F FD 43         mov [d], b
4106   1E61             _for64_update:
4107   1E61 29 C5 3C      mov b, [__divi] ; divi
4108   1E64 D7            push a
4109   1E65 11            mov a, b
4110   1E66 FD 77         inc b
4111   1E68 FD 42 C5 3C   mov [__divi], b
4112   1E6C 27            mov b, a
4113   1E6D E4            pop a
4114   1E6E 0A 2B 1E      jmp _for64_cond
4115   1E71             _for64_exit:
4116   1E71 07 75 1A      call checkabsabsize
4117   1E74             _if65_cond:
4118   1E74 29 8B 3C      mov b, [__asign] ; asign
4119   1E77 D7            push a
4120   1E78 11            mov a, b
4121   1E79 29 8D 3C      mov b, [__bsign] ; bsign
4122   1E7C B0            cmp a, b
4123   1E7D 0E            lodflgs
4124   1E7E 87 01         and al, %00000001 ; ==
4125   1E80 22 00         mov ah, 0
4126   1E82 27            mov b, a
4127   1E83 E4            pop a
4128   1E84 DB            push al
4129   1E85 C0 00 00      cmp b, 0
4130   1E88 0E            lodflgs ; transform condition into a single bit
4131   1E89 29 9D 3C      mov b, [__aeqb] ; aeqb
4132   1E8C D7            push a
4133   1E8D 11            mov a, b
4134   1E8E 26 01 00      mov b, 1
4135   1E91 B0            cmp a, b
4136   1E92 0E            lodflgs
4137   1E93 87 01         and al, %00000001 ; ==
4138   1E95 22 00         mov ah, 0
4139   1E97 27            mov b, a
4140   1E98 E4            pop a
4141   1E99 DB            push al
4142   1E9A C0 00 00      cmp b, 0
4143   1E9D 0E            lodflgs
4144   1E9E EA            pop bl ; matches previous 'push al'
4145   1E9F 8C            or al, bl
4146   1EA0 8F 01         xor al, %00000001
4147   1EA2 2F            mov bl, al
4148   1EA3 A7 00         mov bh, 0
4149   1EA5 E8            pop al
4150   1EA6 C0 00 00      cmp b, 0
4151   1EA9 C6 03 1F      je _if65_exit
4152   1EAC             _if65_true:
4153   1EAC 26 00 00      mov b, 0
4154   1EAF FD 42 8F 3C   mov [__csign], b
4155   1EB3             _for66_init:
4156   1EB3 26 01 00      mov b, 1
4157   1EB6 FD 42 93 3C   mov [__pos], b
4158   1EBA             _for66_cond:
4159   1EBA 29 93 3C      mov b, [__pos] ; pos
4160   1EBD D7            push a
4161   1EBE 11            mov a, b
4162   1EBF 26 0C 00      mov b, 12
4163   1EC2 B0            cmp a, b
4164   1EC3 0E            lodflgs
4165   1EC4 2F            mov bl, al
4166   1EC5 FD A2 03      shr al, 3
4167   1EC8 FD A4 02      shr bl, 2
4168   1ECB FD 87 01      and bl, %00000001
4169   1ECE 90            xor al, bl ; < (signed)
4170   1ECF 22 00         mov ah, 0
4171   1ED1 27            mov b, a
4172   1ED2 E4            pop a
4173   1ED3 C0 00 00      cmp b, 0
4174   1ED6 C6 00 1F      je _for66_exit
4175   1ED9             _for66_block:
4176   1ED9 29 3D 3C      mov b, [__cnarr] ; cnarr
4177   1EDC D7            push a
4178   1EDD 74            mov d, b
4179   1EDE DA            push d
4180   1EDF 29 93 3C      mov b, [__pos] ; pos
4181   1EE2 E7            pop d
4182   1EE3 10 02 00      mov a, 2
4183   1EE6 AC            mul a, b
4184   1EE7 5A            add d, b
4185   1EE8 E4            pop a
4186   1EE9 DA            push d
4187   1EEA 26 00 00      mov b, 0
4188   1EED E7            pop d
4189   1EEE FD 43         mov [d], b
4190   1EF0             _for66_update:
4191   1EF0 29 93 3C      mov b, [__pos] ; pos
4192   1EF3 D7            push a
4193   1EF4 11            mov a, b
4194   1EF5 FD 77         inc b
4195   1EF7 FD 42 93 3C   mov [__pos], b
4196   1EFB 27            mov b, a
4197   1EFC E4            pop a
4198   1EFD 0A BA 1E      jmp _for66_cond
4199   1F00             _for66_exit:
4200   1F00 0A 03 1F      jmp _if65_exit
4201   1F03             _if65_exit:
4202   1F03             _if67_cond:
4203   1F03 29 8B 3C      mov b, [__asign] ; asign
4204   1F06 D7            push a
4205   1F07 11            mov a, b
4206   1F08 26 00 00      mov b, 0
4207   1F0B B0            cmp a, b
4208   1F0C 0E            lodflgs
4209   1F0D 87 01         and al, %00000001 ; ==
4210   1F0F 22 00         mov ah, 0
4211   1F11 27            mov b, a
4212   1F12 E4            pop a
4213   1F13 DB            push al
4214   1F14 C0 00 00      cmp b, 0
4215   1F17 0E            lodflgs ; transform condition into a single bit
4216   1F18 29 8D 3C      mov b, [__bsign] ; bsign
4217   1F1B D7            push a
4218   1F1C 11            mov a, b
4219   1F1D 26 00 00      mov b, 0
4220   1F20 B0            cmp a, b
4221   1F21 0E            lodflgs
4222   1F22 87 01         and al, %00000001 ; ==
4223   1F24 22 00         mov ah, 0
4224   1F26 27            mov b, a
4225   1F27 E4            pop a
4226   1F28 DB            push al
4227   1F29 C0 00 00      cmp b, 0
4228   1F2C 0E            lodflgs
4229   1F2D EA            pop bl ; matches previous 'push al'
4230   1F2E 8C            or al, bl
4231   1F2F 8F 01         xor al, %00000001
4232   1F31 2F            mov bl, al
4233   1F32 A7 00         mov bh, 0
4234   1F34 E8            pop al
4235   1F35 DB            push al
4236   1F36 C0 00 00      cmp b, 0
4237   1F39 0E            lodflgs ; transform condition into a single bit
4238   1F3A 29 A1 3C      mov b, [__ageb] ; ageb
4239   1F3D D7            push a
4240   1F3E 11            mov a, b
4241   1F3F 26 01 00      mov b, 1
4242   1F42 B0            cmp a, b
4243   1F43 0E            lodflgs
4244   1F44 87 01         and al, %00000001 ; ==
4245   1F46 22 00         mov ah, 0
4246   1F48 27            mov b, a
4247   1F49 E4            pop a
4248   1F4A DB            push al
4249   1F4B C0 00 00      cmp b, 0
4250   1F4E 0E            lodflgs
4251   1F4F EA            pop bl ; matches previous 'push al'
4252   1F50 8C            or al, bl
4253   1F51 8F 01         xor al, %00000001
4254   1F53 2F            mov bl, al
4255   1F54 A7 00         mov bh, 0
4256   1F56 E8            pop al
4257   1F57 C0 00 00      cmp b, 0
4258   1F5A C6 6A 1F      je _if67_exit
4259   1F5D             _if67_true:
4260   1F5D 26 00 00      mov b, 0
4261   1F60 FD 42 8F 3C   mov [__csign], b
4262   1F64 07 E5 1C      call protominus
4263   1F67 0A 6A 1F      jmp _if67_exit
4264   1F6A             _if67_exit:
4265   1F6A             _if68_cond:
4266   1F6A 29 8B 3C      mov b, [__asign] ; asign
4267   1F6D D7            push a
4268   1F6E 11            mov a, b
4269   1F6F 26 00 00      mov b, 0
4270   1F72 B0            cmp a, b
4271   1F73 0E            lodflgs
4272   1F74 87 01         and al, %00000001 ; ==
4273   1F76 22 00         mov ah, 0
4274   1F78 27            mov b, a
4275   1F79 E4            pop a
4276   1F7A DB            push al
4277   1F7B C0 00 00      cmp b, 0
4278   1F7E 0E            lodflgs ; transform condition into a single bit
4279   1F7F 29 8D 3C      mov b, [__bsign] ; bsign
4280   1F82 D7            push a
4281   1F83 11            mov a, b
4282   1F84 26 00 00      mov b, 0
4283   1F87 B0            cmp a, b
4284   1F88 0E            lodflgs
4285   1F89 87 01         and al, %00000001 ; ==
4286   1F8B 22 00         mov ah, 0
4287   1F8D 27            mov b, a
4288   1F8E E4            pop a
4289   1F8F DB            push al
4290   1F90 C0 00 00      cmp b, 0
4291   1F93 0E            lodflgs
4292   1F94 EA            pop bl ; matches previous 'push al'
4293   1F95 8C            or al, bl
4294   1F96 8F 01         xor al, %00000001
4295   1F98 2F            mov bl, al
4296   1F99 A7 00         mov bh, 0
4297   1F9B E8            pop al
4298   1F9C DB            push al
4299   1F9D C0 00 00      cmp b, 0
4300   1FA0 0E            lodflgs ; transform condition into a single bit
4301   1FA1 29 9B 3C      mov b, [__bgta] ; bgta
4302   1FA4 D7            push a
4303   1FA5 11            mov a, b
4304   1FA6 26 01 00      mov b, 1
4305   1FA9 B0            cmp a, b
4306   1FAA 0E            lodflgs
4307   1FAB 87 01         and al, %00000001 ; ==
4308   1FAD 22 00         mov ah, 0
4309   1FAF 27            mov b, a
4310   1FB0 E4            pop a
4311   1FB1 DB            push al
4312   1FB2 C0 00 00      cmp b, 0
4313   1FB5 0E            lodflgs
4314   1FB6 EA            pop bl ; matches previous 'push al'
4315   1FB7 8C            or al, bl
4316   1FB8 8F 01         xor al, %00000001
4317   1FBA 2F            mov bl, al
4318   1FBB A7 00         mov bh, 0
4319   1FBD E8            pop al
4320   1FBE C0 00 00      cmp b, 0
4321   1FC1 C6 D4 1F      je _if68_exit
4322   1FC4             _if68_true:
4323   1FC4 26 01 00      mov b, 1
4324   1FC7 FD 42 8F 3C   mov [__csign], b
4325   1FCB 07 8A 19      call swapab
4326   1FCE 07 E5 1C      call protominus
4327   1FD1 0A D4 1F      jmp _if68_exit
4328   1FD4             _if68_exit:
4329   1FD4             _if69_cond:
4330   1FD4 29 8B 3C      mov b, [__asign] ; asign
4331   1FD7 D7            push a
4332   1FD8 11            mov a, b
4333   1FD9 26 01 00      mov b, 1
4334   1FDC B0            cmp a, b
4335   1FDD 0E            lodflgs
4336   1FDE 87 01         and al, %00000001 ; ==
4337   1FE0 22 00         mov ah, 0
4338   1FE2 27            mov b, a
4339   1FE3 E4            pop a
4340   1FE4 DB            push al
4341   1FE5 C0 00 00      cmp b, 0
4342   1FE8 0E            lodflgs ; transform condition into a single bit
4343   1FE9 29 8D 3C      mov b, [__bsign] ; bsign
4344   1FEC D7            push a
4345   1FED 11            mov a, b
4346   1FEE 26 01 00      mov b, 1
4347   1FF1 B0            cmp a, b
4348   1FF2 0E            lodflgs
4349   1FF3 87 01         and al, %00000001 ; ==
4350   1FF5 22 00         mov ah, 0
4351   1FF7 27            mov b, a
4352   1FF8 E4            pop a
4353   1FF9 DB            push al
4354   1FFA C0 00 00      cmp b, 0
4355   1FFD 0E            lodflgs
4356   1FFE EA            pop bl ; matches previous 'push al'
4357   1FFF 8C            or al, bl
4358   2000 8F 01         xor al, %00000001
4359   2002 2F            mov bl, al
4360   2003 A7 00         mov bh, 0
4361   2005 E8            pop al
4362   2006 DB            push al
4363   2007 C0 00 00      cmp b, 0
4364   200A 0E            lodflgs ; transform condition into a single bit
4365   200B 29 A1 3C      mov b, [__ageb] ; ageb
4366   200E D7            push a
4367   200F 11            mov a, b
4368   2010 26 01 00      mov b, 1
4369   2013 B0            cmp a, b
4370   2014 0E            lodflgs
4371   2015 87 01         and al, %00000001 ; ==
4372   2017 22 00         mov ah, 0
4373   2019 27            mov b, a
4374   201A E4            pop a
4375   201B DB            push al
4376   201C C0 00 00      cmp b, 0
4377   201F 0E            lodflgs
4378   2020 EA            pop bl ; matches previous 'push al'
4379   2021 8C            or al, bl
4380   2022 8F 01         xor al, %00000001
4381   2024 2F            mov bl, al
4382   2025 A7 00         mov bh, 0
4383   2027 E8            pop al
4384   2028 C0 00 00      cmp b, 0
4385   202B C6 3B 20      je _if69_exit
4386   202E             _if69_true:
4387   202E 26 01 00      mov b, 1
4388   2031 FD 42 8F 3C   mov [__csign], b
4389   2035 07 E5 1C      call protominus
4390   2038 0A 3B 20      jmp _if69_exit
4391   203B             _if69_exit:
4392   203B             _if70_cond:
4393   203B 29 8B 3C      mov b, [__asign] ; asign
4394   203E D7            push a
4395   203F 11            mov a, b
4396   2040 26 01 00      mov b, 1
4397   2043 B0            cmp a, b
4398   2044 0E            lodflgs
4399   2045 87 01         and al, %00000001 ; ==
4400   2047 22 00         mov ah, 0
4401   2049 27            mov b, a
4402   204A E4            pop a
4403   204B DB            push al
4404   204C C0 00 00      cmp b, 0
4405   204F 0E            lodflgs ; transform condition into a single bit
4406   2050 29 8D 3C      mov b, [__bsign] ; bsign
4407   2053 D7            push a
4408   2054 11            mov a, b
4409   2055 26 01 00      mov b, 1
4410   2058 B0            cmp a, b
4411   2059 0E            lodflgs
4412   205A 87 01         and al, %00000001 ; ==
4413   205C 22 00         mov ah, 0
4414   205E 27            mov b, a
4415   205F E4            pop a
4416   2060 DB            push al
4417   2061 C0 00 00      cmp b, 0
4418   2064 0E            lodflgs
4419   2065 EA            pop bl ; matches previous 'push al'
4420   2066 8C            or al, bl
4421   2067 8F 01         xor al, %00000001
4422   2069 2F            mov bl, al
4423   206A A7 00         mov bh, 0
4424   206C E8            pop al
4425   206D DB            push al
4426   206E C0 00 00      cmp b, 0
4427   2071 0E            lodflgs ; transform condition into a single bit
4428   2072 29 9B 3C      mov b, [__bgta] ; bgta
4429   2075 D7            push a
4430   2076 11            mov a, b
4431   2077 26 01 00      mov b, 1
4432   207A B0            cmp a, b
4433   207B 0E            lodflgs
4434   207C 87 01         and al, %00000001 ; ==
4435   207E 22 00         mov ah, 0
4436   2080 27            mov b, a
4437   2081 E4            pop a
4438   2082 DB            push al
4439   2083 C0 00 00      cmp b, 0
4440   2086 0E            lodflgs
4441   2087 EA            pop bl ; matches previous 'push al'
4442   2088 8C            or al, bl
4443   2089 8F 01         xor al, %00000001
4444   208B 2F            mov bl, al
4445   208C A7 00         mov bh, 0
4446   208E E8            pop al
4447   208F C0 00 00      cmp b, 0
4448   2092 C6 A5 20      je _if70_exit
4449   2095             _if70_true:
4450   2095 26 00 00      mov b, 0
4451   2098 FD 42 8F 3C   mov [__csign], b
4452   209C 07 8A 19      call swapab
4453   209F 07 E5 1C      call protominus
4454   20A2 0A A5 20      jmp _if70_exit
4455   20A5             _if70_exit:
4456   20A5             _if71_cond:
4457   20A5 29 8B 3C      mov b, [__asign] ; asign
4458   20A8 D7            push a
4459   20A9 11            mov a, b
4460   20AA 26 00 00      mov b, 0
4461   20AD B0            cmp a, b
4462   20AE 0E            lodflgs
4463   20AF 87 01         and al, %00000001 ; ==
4464   20B1 22 00         mov ah, 0
4465   20B3 27            mov b, a
4466   20B4 E4            pop a
4467   20B5 DB            push al
4468   20B6 C0 00 00      cmp b, 0
4469   20B9 0E            lodflgs ; transform condition into a single bit
4470   20BA 29 8D 3C      mov b, [__bsign] ; bsign
4471   20BD D7            push a
4472   20BE 11            mov a, b
4473   20BF 26 01 00      mov b, 1
4474   20C2 B0            cmp a, b
4475   20C3 0E            lodflgs
4476   20C4 87 01         and al, %00000001 ; ==
4477   20C6 22 00         mov ah, 0
4478   20C8 27            mov b, a
4479   20C9 E4            pop a
4480   20CA DB            push al
4481   20CB C0 00 00      cmp b, 0
4482   20CE 0E            lodflgs
4483   20CF EA            pop bl ; matches previous 'push al'
4484   20D0 8C            or al, bl
4485   20D1 8F 01         xor al, %00000001
4486   20D3 2F            mov bl, al
4487   20D4 A7 00         mov bh, 0
4488   20D6 E8            pop al
4489   20D7 C0 00 00      cmp b, 0
4490   20DA C6 EA 20      je _if71_exit
4491   20DD             _if71_true:
4492   20DD 26 00 00      mov b, 0
4493   20E0 FD 42 8F 3C   mov [__csign], b
4494   20E4 07 EC 1B      call protoplus
4495   20E7 0A EA 20      jmp _if71_exit
4496   20EA             _if71_exit:
4497   20EA             _if72_cond:
4498   20EA 29 8B 3C      mov b, [__asign] ; asign
4499   20ED D7            push a
4500   20EE 11            mov a, b
4501   20EF 26 01 00      mov b, 1
4502   20F2 B0            cmp a, b
4503   20F3 0E            lodflgs
4504   20F4 87 01         and al, %00000001 ; ==
4505   20F6 22 00         mov ah, 0
4506   20F8 27            mov b, a
4507   20F9 E4            pop a
4508   20FA DB            push al
4509   20FB C0 00 00      cmp b, 0
4510   20FE 0E            lodflgs ; transform condition into a single bit
4511   20FF 29 8D 3C      mov b, [__bsign] ; bsign
4512   2102 D7            push a
4513   2103 11            mov a, b
4514   2104 26 00 00      mov b, 0
4515   2107 B0            cmp a, b
4516   2108 0E            lodflgs
4517   2109 87 01         and al, %00000001 ; ==
4518   210B 22 00         mov ah, 0
4519   210D 27            mov b, a
4520   210E E4            pop a
4521   210F DB            push al
4522   2110 C0 00 00      cmp b, 0
4523   2113 0E            lodflgs
4524   2114 EA            pop bl ; matches previous 'push al'
4525   2115 8C            or al, bl
4526   2116 8F 01         xor al, %00000001
4527   2118 2F            mov bl, al
4528   2119 A7 00         mov bh, 0
4529   211B E8            pop al
4530   211C C0 00 00      cmp b, 0
4531   211F C6 2F 21      je _if72_exit
4532   2122             _if72_true:
4533   2122 26 01 00      mov b, 1
4534   2125 FD 42 8F 3C   mov [__csign], b
4535   2129 07 EC 1B      call protoplus
4536   212C 0A 2F 21      jmp _if72_exit
4537   212F             _if72_exit:
4538   212F F9            leave
4539   2130 09            ret
4540   2131             
4541   2131             minus:
4542   2131 D2            push bp
4543   2132 9B            mov bp, sp
4544   2133 07 D2 16      call fixsignin
4545   2136 07 22 1E      call pminus
4546   2139 07 68 18      call fixcsizezero
4547   213C 07 17 18      call fixsignout
4548   213F F9            leave
4549   2140 09            ret
4550   2141             
4551   2141             pplus:
4552   2141 D2            push bp
4553   2142 9B            mov bp, sp
4554   2143             _for73_init:
4555   2143 26 00 00      mov b, 0
4556   2146 FD 42 C5 3C   mov [__divi], b
4557   214A             _for73_cond:
4558   214A 29 C5 3C      mov b, [__divi] ; divi
4559   214D D7            push a
4560   214E 11            mov a, b
4561   214F 26 0C 00      mov b, 12
4562   2152 B0            cmp a, b
4563   2153 0E            lodflgs
4564   2154 2F            mov bl, al
4565   2155 FD A2 03      shr al, 3
4566   2158 FD A4 02      shr bl, 2
4567   215B FD 87 01      and bl, %00000001
4568   215E 90            xor al, bl ; < (signed)
4569   215F 22 00         mov ah, 0
4570   2161 27            mov b, a
4571   2162 E4            pop a
4572   2163 C0 00 00      cmp b, 0
4573   2166 C6 90 21      je _for73_exit
4574   2169             _for73_block:
4575   2169 29 3D 3C      mov b, [__cnarr] ; cnarr
4576   216C D7            push a
4577   216D 74            mov d, b
4578   216E DA            push d
4579   216F 29 C5 3C      mov b, [__divi] ; divi
4580   2172 E7            pop d
4581   2173 10 02 00      mov a, 2
4582   2176 AC            mul a, b
4583   2177 5A            add d, b
4584   2178 E4            pop a
4585   2179 DA            push d
4586   217A 26 00 00      mov b, 0
4587   217D E7            pop d
4588   217E FD 43         mov [d], b
4589   2180             _for73_update:
4590   2180 29 C5 3C      mov b, [__divi] ; divi
4591   2183 D7            push a
4592   2184 11            mov a, b
4593   2185 FD 77         inc b
4594   2187 FD 42 C5 3C   mov [__divi], b
4595   218B 27            mov b, a
4596   218C E4            pop a
4597   218D 0A 4A 21      jmp _for73_cond
4598   2190             _for73_exit:
4599   2190 07 75 1A      call checkabsabsize
4600   2193             _if74_cond:
4601   2193 29 8B 3C      mov b, [__asign] ; asign
4602   2196 D7            push a
4603   2197 11            mov a, b
4604   2198 26 00 00      mov b, 0
4605   219B B0            cmp a, b
4606   219C 0E            lodflgs
4607   219D 87 01         and al, %00000001 ; ==
4608   219F 22 00         mov ah, 0
4609   21A1 27            mov b, a
4610   21A2 E4            pop a
4611   21A3 DB            push al
4612   21A4 C0 00 00      cmp b, 0
4613   21A7 0E            lodflgs ; transform condition into a single bit
4614   21A8 29 8D 3C      mov b, [__bsign] ; bsign
4615   21AB D7            push a
4616   21AC 11            mov a, b
4617   21AD 26 01 00      mov b, 1
4618   21B0 B0            cmp a, b
4619   21B1 0E            lodflgs
4620   21B2 87 01         and al, %00000001 ; ==
4621   21B4 22 00         mov ah, 0
4622   21B6 27            mov b, a
4623   21B7 E4            pop a
4624   21B8 DB            push al
4625   21B9 C0 00 00      cmp b, 0
4626   21BC 0E            lodflgs
4627   21BD EA            pop bl ; matches previous 'push al'
4628   21BE 8C            or al, bl
4629   21BF 8F 01         xor al, %00000001
4630   21C1 2F            mov bl, al
4631   21C2 A7 00         mov bh, 0
4632   21C4 E8            pop al
4633   21C5 DB            push al
4634   21C6 C0 00 00      cmp b, 0
4635   21C9 0E            lodflgs ; transform condition into a single bit
4636   21CA 29 9D 3C      mov b, [__aeqb] ; aeqb
4637   21CD D7            push a
4638   21CE 11            mov a, b
4639   21CF 26 01 00      mov b, 1
4640   21D2 B0            cmp a, b
4641   21D3 0E            lodflgs
4642   21D4 87 01         and al, %00000001 ; ==
4643   21D6 22 00         mov ah, 0
4644   21D8 27            mov b, a
4645   21D9 E4            pop a
4646   21DA DB            push al
4647   21DB C0 00 00      cmp b, 0
4648   21DE 0E            lodflgs
4649   21DF EA            pop bl ; matches previous 'push al'
4650   21E0 8C            or al, bl
4651   21E1 8F 01         xor al, %00000001
4652   21E3 2F            mov bl, al
4653   21E4 A7 00         mov bh, 0
4654   21E6 E8            pop al
4655   21E7 C0 00 00      cmp b, 0
4656   21EA C6 54 22      je _if74_exit
4657   21ED             _if74_true:
4658   21ED 26 00 00      mov b, 0
4659   21F0 FD 42 8B 3C   mov [__asign], b
4660   21F4 26 00 00      mov b, 0
4661   21F7 FD 42 8D 3C   mov [__bsign], b
4662   21FB 26 00 00      mov b, 0
4663   21FE FD 42 8F 3C   mov [__csign], b
4664   2202             _for75_init:
4665   2202 26 01 00      mov b, 1
4666   2205 FD 42 93 3C   mov [__pos], b
4667   2209             _for75_cond:
4668   2209 29 93 3C      mov b, [__pos] ; pos
4669   220C D7            push a
4670   220D 11            mov a, b
4671   220E 26 0C 00      mov b, 12
4672   2211 B0            cmp a, b
4673   2212 0E            lodflgs
4674   2213 2F            mov bl, al
4675   2214 FD A2 03      shr al, 3
4676   2217 FD A4 02      shr bl, 2
4677   221A FD 87 01      and bl, %00000001
4678   221D 90            xor al, bl ; < (signed)
4679   221E 22 00         mov ah, 0
4680   2220 27            mov b, a
4681   2221 E4            pop a
4682   2222 C0 00 00      cmp b, 0
4683   2225 C6 4F 22      je _for75_exit
4684   2228             _for75_block:
4685   2228 29 3D 3C      mov b, [__cnarr] ; cnarr
4686   222B D7            push a
4687   222C 74            mov d, b
4688   222D DA            push d
4689   222E 29 93 3C      mov b, [__pos] ; pos
4690   2231 E7            pop d
4691   2232 10 02 00      mov a, 2
4692   2235 AC            mul a, b
4693   2236 5A            add d, b
4694   2237 E4            pop a
4695   2238 DA            push d
4696   2239 26 00 00      mov b, 0
4697   223C E7            pop d
4698   223D FD 43         mov [d], b
4699   223F             _for75_update:
4700   223F 29 93 3C      mov b, [__pos] ; pos
4701   2242 D7            push a
4702   2243 11            mov a, b
4703   2244 FD 77         inc b
4704   2246 FD 42 93 3C   mov [__pos], b
4705   224A 27            mov b, a
4706   224B E4            pop a
4707   224C 0A 09 22      jmp _for75_cond
4708   224F             _for75_exit:
4709   224F F9            leave
4710   2250 09            ret
4711   2251 0A 54 22      jmp _if74_exit
4712   2254             _if74_exit:
4713   2254             _if76_cond:
4714   2254 29 8B 3C      mov b, [__asign] ; asign
4715   2257 D7            push a
4716   2258 11            mov a, b
4717   2259 26 01 00      mov b, 1
4718   225C B0            cmp a, b
4719   225D 0E            lodflgs
4720   225E 87 01         and al, %00000001 ; ==
4721   2260 22 00         mov ah, 0
4722   2262 27            mov b, a
4723   2263 E4            pop a
4724   2264 DB            push al
4725   2265 C0 00 00      cmp b, 0
4726   2268 0E            lodflgs ; transform condition into a single bit
4727   2269 29 8D 3C      mov b, [__bsign] ; bsign
4728   226C D7            push a
4729   226D 11            mov a, b
4730   226E 26 00 00      mov b, 0
4731   2271 B0            cmp a, b
4732   2272 0E            lodflgs
4733   2273 87 01         and al, %00000001 ; ==
4734   2275 22 00         mov ah, 0
4735   2277 27            mov b, a
4736   2278 E4            pop a
4737   2279 DB            push al
4738   227A C0 00 00      cmp b, 0
4739   227D 0E            lodflgs
4740   227E EA            pop bl ; matches previous 'push al'
4741   227F 8C            or al, bl
4742   2280 8F 01         xor al, %00000001
4743   2282 2F            mov bl, al
4744   2283 A7 00         mov bh, 0
4745   2285 E8            pop al
4746   2286 DB            push al
4747   2287 C0 00 00      cmp b, 0
4748   228A 0E            lodflgs ; transform condition into a single bit
4749   228B 29 9D 3C      mov b, [__aeqb] ; aeqb
4750   228E D7            push a
4751   228F 11            mov a, b
4752   2290 26 01 00      mov b, 1
4753   2293 B0            cmp a, b
4754   2294 0E            lodflgs
4755   2295 87 01         and al, %00000001 ; ==
4756   2297 22 00         mov ah, 0
4757   2299 27            mov b, a
4758   229A E4            pop a
4759   229B DB            push al
4760   229C C0 00 00      cmp b, 0
4761   229F 0E            lodflgs
4762   22A0 EA            pop bl ; matches previous 'push al'
4763   22A1 8C            or al, bl
4764   22A2 8F 01         xor al, %00000001
4765   22A4 2F            mov bl, al
4766   22A5 A7 00         mov bh, 0
4767   22A7 E8            pop al
4768   22A8 C0 00 00      cmp b, 0
4769   22AB C6 15 23      je _if76_exit
4770   22AE             _if76_true:
4771   22AE 26 00 00      mov b, 0
4772   22B1 FD 42 8B 3C   mov [__asign], b
4773   22B5 26 00 00      mov b, 0
4774   22B8 FD 42 8D 3C   mov [__bsign], b
4775   22BC 26 00 00      mov b, 0
4776   22BF FD 42 8F 3C   mov [__csign], b
4777   22C3             _for77_init:
4778   22C3 26 01 00      mov b, 1
4779   22C6 FD 42 93 3C   mov [__pos], b
4780   22CA             _for77_cond:
4781   22CA 29 93 3C      mov b, [__pos] ; pos
4782   22CD D7            push a
4783   22CE 11            mov a, b
4784   22CF 26 0C 00      mov b, 12
4785   22D2 B0            cmp a, b
4786   22D3 0E            lodflgs
4787   22D4 2F            mov bl, al
4788   22D5 FD A2 03      shr al, 3
4789   22D8 FD A4 02      shr bl, 2
4790   22DB FD 87 01      and bl, %00000001
4791   22DE 90            xor al, bl ; < (signed)
4792   22DF 22 00         mov ah, 0
4793   22E1 27            mov b, a
4794   22E2 E4            pop a
4795   22E3 C0 00 00      cmp b, 0
4796   22E6 C6 10 23      je _for77_exit
4797   22E9             _for77_block:
4798   22E9 29 3D 3C      mov b, [__cnarr] ; cnarr
4799   22EC D7            push a
4800   22ED 74            mov d, b
4801   22EE DA            push d
4802   22EF 29 93 3C      mov b, [__pos] ; pos
4803   22F2 E7            pop d
4804   22F3 10 02 00      mov a, 2
4805   22F6 AC            mul a, b
4806   22F7 5A            add d, b
4807   22F8 E4            pop a
4808   22F9 DA            push d
4809   22FA 26 00 00      mov b, 0
4810   22FD E7            pop d
4811   22FE FD 43         mov [d], b
4812   2300             _for77_update:
4813   2300 29 93 3C      mov b, [__pos] ; pos
4814   2303 D7            push a
4815   2304 11            mov a, b
4816   2305 FD 77         inc b
4817   2307 FD 42 93 3C   mov [__pos], b
4818   230B 27            mov b, a
4819   230C E4            pop a
4820   230D 0A CA 22      jmp _for77_cond
4821   2310             _for77_exit:
4822   2310 F9            leave
4823   2311 09            ret
4824   2312 0A 15 23      jmp _if76_exit
4825   2315             _if76_exit:
4826   2315             _if78_cond:
4827   2315 29 8B 3C      mov b, [__asign] ; asign
4828   2318 D7            push a
4829   2319 11            mov a, b
4830   231A 26 00 00      mov b, 0
4831   231D B0            cmp a, b
4832   231E 0E            lodflgs
4833   231F 87 01         and al, %00000001 ; ==
4834   2321 22 00         mov ah, 0
4835   2323 27            mov b, a
4836   2324 E4            pop a
4837   2325 DB            push al
4838   2326 C0 00 00      cmp b, 0
4839   2329 0E            lodflgs ; transform condition into a single bit
4840   232A 29 8D 3C      mov b, [__bsign] ; bsign
4841   232D D7            push a
4842   232E 11            mov a, b
4843   232F 26 00 00      mov b, 0
4844   2332 B0            cmp a, b
4845   2333 0E            lodflgs
4846   2334 87 01         and al, %00000001 ; ==
4847   2336 22 00         mov ah, 0
4848   2338 27            mov b, a
4849   2339 E4            pop a
4850   233A DB            push al
4851   233B C0 00 00      cmp b, 0
4852   233E 0E            lodflgs
4853   233F EA            pop bl ; matches previous 'push al'
4854   2340 8C            or al, bl
4855   2341 8F 01         xor al, %00000001
4856   2343 2F            mov bl, al
4857   2344 A7 00         mov bh, 0
4858   2346 E8            pop al
4859   2347 C0 00 00      cmp b, 0
4860   234A C6 6A 23      je _if78_exit
4861   234D             _if78_true:
4862   234D 26 00 00      mov b, 0
4863   2350 FD 42 8B 3C   mov [__asign], b
4864   2354 26 00 00      mov b, 0
4865   2357 FD 42 8D 3C   mov [__bsign], b
4866   235B 26 00 00      mov b, 0
4867   235E FD 42 8F 3C   mov [__csign], b
4868   2362 07 EC 1B      call protoplus
4869   2365 F9            leave
4870   2366 09            ret
4871   2367 0A 6A 23      jmp _if78_exit
4872   236A             _if78_exit:
4873   236A             _if79_cond:
4874   236A 29 8B 3C      mov b, [__asign] ; asign
4875   236D D7            push a
4876   236E 11            mov a, b
4877   236F 26 01 00      mov b, 1
4878   2372 B0            cmp a, b
4879   2373 0E            lodflgs
4880   2374 87 01         and al, %00000001 ; ==
4881   2376 22 00         mov ah, 0
4882   2378 27            mov b, a
4883   2379 E4            pop a
4884   237A DB            push al
4885   237B C0 00 00      cmp b, 0
4886   237E 0E            lodflgs ; transform condition into a single bit
4887   237F 29 8D 3C      mov b, [__bsign] ; bsign
4888   2382 D7            push a
4889   2383 11            mov a, b
4890   2384 26 01 00      mov b, 1
4891   2387 B0            cmp a, b
4892   2388 0E            lodflgs
4893   2389 87 01         and al, %00000001 ; ==
4894   238B 22 00         mov ah, 0
4895   238D 27            mov b, a
4896   238E E4            pop a
4897   238F DB            push al
4898   2390 C0 00 00      cmp b, 0
4899   2393 0E            lodflgs
4900   2394 EA            pop bl ; matches previous 'push al'
4901   2395 8C            or al, bl
4902   2396 8F 01         xor al, %00000001
4903   2398 2F            mov bl, al
4904   2399 A7 00         mov bh, 0
4905   239B E8            pop al
4906   239C C0 00 00      cmp b, 0
4907   239F C6 BF 23      je _if79_exit
4908   23A2             _if79_true:
4909   23A2 26 00 00      mov b, 0
4910   23A5 FD 42 8B 3C   mov [__asign], b
4911   23A9 26 00 00      mov b, 0
4912   23AC FD 42 8D 3C   mov [__bsign], b
4913   23B0 26 01 00      mov b, 1
4914   23B3 FD 42 8F 3C   mov [__csign], b
4915   23B7 07 EC 1B      call protoplus
4916   23BA F9            leave
4917   23BB 09            ret
4918   23BC 0A BF 23      jmp _if79_exit
4919   23BF             _if79_exit:
4920   23BF             _if80_cond:
4921   23BF 29 8B 3C      mov b, [__asign] ; asign
4922   23C2 D7            push a
4923   23C3 11            mov a, b
4924   23C4 26 00 00      mov b, 0
4925   23C7 B0            cmp a, b
4926   23C8 0E            lodflgs
4927   23C9 87 01         and al, %00000001 ; ==
4928   23CB 22 00         mov ah, 0
4929   23CD 27            mov b, a
4930   23CE E4            pop a
4931   23CF DB            push al
4932   23D0 C0 00 00      cmp b, 0
4933   23D3 0E            lodflgs ; transform condition into a single bit
4934   23D4 29 8D 3C      mov b, [__bsign] ; bsign
4935   23D7 D7            push a
4936   23D8 11            mov a, b
4937   23D9 26 01 00      mov b, 1
4938   23DC B0            cmp a, b
4939   23DD 0E            lodflgs
4940   23DE 87 01         and al, %00000001 ; ==
4941   23E0 22 00         mov ah, 0
4942   23E2 27            mov b, a
4943   23E3 E4            pop a
4944   23E4 DB            push al
4945   23E5 C0 00 00      cmp b, 0
4946   23E8 0E            lodflgs
4947   23E9 EA            pop bl ; matches previous 'push al'
4948   23EA 8C            or al, bl
4949   23EB 8F 01         xor al, %00000001
4950   23ED 2F            mov bl, al
4951   23EE A7 00         mov bh, 0
4952   23F0 E8            pop al
4953   23F1 DB            push al
4954   23F2 C0 00 00      cmp b, 0
4955   23F5 0E            lodflgs ; transform condition into a single bit
4956   23F6 29 99 3C      mov b, [__agtb] ; agtb
4957   23F9 D7            push a
4958   23FA 11            mov a, b
4959   23FB 26 01 00      mov b, 1
4960   23FE B0            cmp a, b
4961   23FF 0E            lodflgs
4962   2400 87 01         and al, %00000001 ; ==
4963   2402 22 00         mov ah, 0
4964   2404 27            mov b, a
4965   2405 E4            pop a
4966   2406 DB            push al
4967   2407 C0 00 00      cmp b, 0
4968   240A 0E            lodflgs
4969   240B EA            pop bl ; matches previous 'push al'
4970   240C 8C            or al, bl
4971   240D 8F 01         xor al, %00000001
4972   240F 2F            mov bl, al
4973   2410 A7 00         mov bh, 0
4974   2412 E8            pop al
4975   2413 C0 00 00      cmp b, 0
4976   2416 C6 36 24      je _if80_exit
4977   2419             _if80_true:
4978   2419 26 00 00      mov b, 0
4979   241C FD 42 8B 3C   mov [__asign], b
4980   2420 26 00 00      mov b, 0
4981   2423 FD 42 8D 3C   mov [__bsign], b
4982   2427 26 00 00      mov b, 0
4983   242A FD 42 8F 3C   mov [__csign], b
4984   242E 07 E5 1C      call protominus
4985   2431 F9            leave
4986   2432 09            ret
4987   2433 0A 36 24      jmp _if80_exit
4988   2436             _if80_exit:
4989   2436             _if81_cond:
4990   2436 29 8B 3C      mov b, [__asign] ; asign
4991   2439 D7            push a
4992   243A 11            mov a, b
4993   243B 26 00 00      mov b, 0
4994   243E B0            cmp a, b
4995   243F 0E            lodflgs
4996   2440 87 01         and al, %00000001 ; ==
4997   2442 22 00         mov ah, 0
4998   2444 27            mov b, a
4999   2445 E4            pop a
5000   2446 DB            push al
5001   2447 C0 00 00      cmp b, 0
5002   244A 0E            lodflgs ; transform condition into a single bit
5003   244B 29 8D 3C      mov b, [__bsign] ; bsign
5004   244E D7            push a
5005   244F 11            mov a, b
5006   2450 26 01 00      mov b, 1
5007   2453 B0            cmp a, b
5008   2454 0E            lodflgs
5009   2455 87 01         and al, %00000001 ; ==
5010   2457 22 00         mov ah, 0
5011   2459 27            mov b, a
5012   245A E4            pop a
5013   245B DB            push al
5014   245C C0 00 00      cmp b, 0
5015   245F 0E            lodflgs
5016   2460 EA            pop bl ; matches previous 'push al'
5017   2461 8C            or al, bl
5018   2462 8F 01         xor al, %00000001
5019   2464 2F            mov bl, al
5020   2465 A7 00         mov bh, 0
5021   2467 E8            pop al
5022   2468 DB            push al
5023   2469 C0 00 00      cmp b, 0
5024   246C 0E            lodflgs ; transform condition into a single bit
5025   246D 29 9B 3C      mov b, [__bgta] ; bgta
5026   2470 D7            push a
5027   2471 11            mov a, b
5028   2472 26 01 00      mov b, 1
5029   2475 B0            cmp a, b
5030   2476 0E            lodflgs
5031   2477 87 01         and al, %00000001 ; ==
5032   2479 22 00         mov ah, 0
5033   247B 27            mov b, a
5034   247C E4            pop a
5035   247D DB            push al
5036   247E C0 00 00      cmp b, 0
5037   2481 0E            lodflgs
5038   2482 EA            pop bl ; matches previous 'push al'
5039   2483 8C            or al, bl
5040   2484 8F 01         xor al, %00000001
5041   2486 2F            mov bl, al
5042   2487 A7 00         mov bh, 0
5043   2489 E8            pop al
5044   248A C0 00 00      cmp b, 0
5045   248D C6 B0 24      je _if81_exit
5046   2490             _if81_true:
5047   2490 26 00 00      mov b, 0
5048   2493 FD 42 8B 3C   mov [__asign], b
5049   2497 26 00 00      mov b, 0
5050   249A FD 42 8D 3C   mov [__bsign], b
5051   249E 26 01 00      mov b, 1
5052   24A1 FD 42 8F 3C   mov [__csign], b
5053   24A5 07 8A 19      call swapab
5054   24A8 07 E5 1C      call protominus
5055   24AB F9            leave
5056   24AC 09            ret
5057   24AD 0A B0 24      jmp _if81_exit
5058   24B0             _if81_exit:
5059   24B0             _if82_cond:
5060   24B0 29 8B 3C      mov b, [__asign] ; asign
5061   24B3 D7            push a
5062   24B4 11            mov a, b
5063   24B5 26 01 00      mov b, 1
5064   24B8 B0            cmp a, b
5065   24B9 0E            lodflgs
5066   24BA 87 01         and al, %00000001 ; ==
5067   24BC 22 00         mov ah, 0
5068   24BE 27            mov b, a
5069   24BF E4            pop a
5070   24C0 DB            push al
5071   24C1 C0 00 00      cmp b, 0
5072   24C4 0E            lodflgs ; transform condition into a single bit
5073   24C5 29 8D 3C      mov b, [__bsign] ; bsign
5074   24C8 D7            push a
5075   24C9 11            mov a, b
5076   24CA 26 00 00      mov b, 0
5077   24CD B0            cmp a, b
5078   24CE 0E            lodflgs
5079   24CF 87 01         and al, %00000001 ; ==
5080   24D1 22 00         mov ah, 0
5081   24D3 27            mov b, a
5082   24D4 E4            pop a
5083   24D5 DB            push al
5084   24D6 C0 00 00      cmp b, 0
5085   24D9 0E            lodflgs
5086   24DA EA            pop bl ; matches previous 'push al'
5087   24DB 8C            or al, bl
5088   24DC 8F 01         xor al, %00000001
5089   24DE 2F            mov bl, al
5090   24DF A7 00         mov bh, 0
5091   24E1 E8            pop al
5092   24E2 DB            push al
5093   24E3 C0 00 00      cmp b, 0
5094   24E6 0E            lodflgs ; transform condition into a single bit
5095   24E7 29 99 3C      mov b, [__agtb] ; agtb
5096   24EA D7            push a
5097   24EB 11            mov a, b
5098   24EC 26 01 00      mov b, 1
5099   24EF B0            cmp a, b
5100   24F0 0E            lodflgs
5101   24F1 87 01         and al, %00000001 ; ==
5102   24F3 22 00         mov ah, 0
5103   24F5 27            mov b, a
5104   24F6 E4            pop a
5105   24F7 DB            push al
5106   24F8 C0 00 00      cmp b, 0
5107   24FB 0E            lodflgs
5108   24FC EA            pop bl ; matches previous 'push al'
5109   24FD 8C            or al, bl
5110   24FE 8F 01         xor al, %00000001
5111   2500 2F            mov bl, al
5112   2501 A7 00         mov bh, 0
5113   2503 E8            pop al
5114   2504 C0 00 00      cmp b, 0
5115   2507 C6 2A 25      je _if82_exit
5116   250A             _if82_true:
5117   250A 26 01 00      mov b, 1
5118   250D FD 42 8F 3C   mov [__csign], b
5119   2511 07 8A 19      call swapab
5120   2514 26 00 00      mov b, 0
5121   2517 FD 42 8B 3C   mov [__asign], b
5122   251B 26 00 00      mov b, 0
5123   251E FD 42 8D 3C   mov [__bsign], b
5124   2522 07 22 1E      call pminus
5125   2525 F9            leave
5126   2526 09            ret
5127   2527 0A 2A 25      jmp _if82_exit
5128   252A             _if82_exit:
5129   252A             _if83_cond:
5130   252A 29 8B 3C      mov b, [__asign] ; asign
5131   252D D7            push a
5132   252E 11            mov a, b
5133   252F 26 01 00      mov b, 1
5134   2532 B0            cmp a, b
5135   2533 0E            lodflgs
5136   2534 87 01         and al, %00000001 ; ==
5137   2536 22 00         mov ah, 0
5138   2538 27            mov b, a
5139   2539 E4            pop a
5140   253A DB            push al
5141   253B C0 00 00      cmp b, 0
5142   253E 0E            lodflgs ; transform condition into a single bit
5143   253F 29 8D 3C      mov b, [__bsign] ; bsign
5144   2542 D7            push a
5145   2543 11            mov a, b
5146   2544 26 00 00      mov b, 0
5147   2547 B0            cmp a, b
5148   2548 0E            lodflgs
5149   2549 87 01         and al, %00000001 ; ==
5150   254B 22 00         mov ah, 0
5151   254D 27            mov b, a
5152   254E E4            pop a
5153   254F DB            push al
5154   2550 C0 00 00      cmp b, 0
5155   2553 0E            lodflgs
5156   2554 EA            pop bl ; matches previous 'push al'
5157   2555 8C            or al, bl
5158   2556 8F 01         xor al, %00000001
5159   2558 2F            mov bl, al
5160   2559 A7 00         mov bh, 0
5161   255B E8            pop al
5162   255C DB            push al
5163   255D C0 00 00      cmp b, 0
5164   2560 0E            lodflgs ; transform condition into a single bit
5165   2561 29 9B 3C      mov b, [__bgta] ; bgta
5166   2564 D7            push a
5167   2565 11            mov a, b
5168   2566 26 01 00      mov b, 1
5169   2569 B0            cmp a, b
5170   256A 0E            lodflgs
5171   256B 87 01         and al, %00000001 ; ==
5172   256D 22 00         mov ah, 0
5173   256F 27            mov b, a
5174   2570 E4            pop a
5175   2571 DB            push al
5176   2572 C0 00 00      cmp b, 0
5177   2575 0E            lodflgs
5178   2576 EA            pop bl ; matches previous 'push al'
5179   2577 8C            or al, bl
5180   2578 8F 01         xor al, %00000001
5181   257A 2F            mov bl, al
5182   257B A7 00         mov bh, 0
5183   257D E8            pop al
5184   257E C0 00 00      cmp b, 0
5185   2581 C6 A4 25      je _if83_exit
5186   2584             _if83_true:
5187   2584 26 00 00      mov b, 0
5188   2587 FD 42 8B 3C   mov [__asign], b
5189   258B 26 00 00      mov b, 0
5190   258E FD 42 8D 3C   mov [__bsign], b
5191   2592 26 00 00      mov b, 0
5192   2595 FD 42 8F 3C   mov [__csign], b
5193   2599 07 8A 19      call swapab
5194   259C 07 E5 1C      call protominus
5195   259F F9            leave
5196   25A0 09            ret
5197   25A1 0A A4 25      jmp _if83_exit
5198   25A4             _if83_exit:
5199   25A4 F9            leave
5200   25A5 09            ret
5201   25A6             
5202   25A6             plus:
5203   25A6 D2            push bp
5204   25A7 9B            mov bp, sp
5205   25A8 07 D2 16      call fixsignin
5206   25AB 07 41 21      call pplus
5207   25AE 07 68 18      call fixcsizezero
5208   25B1 07 17 18      call fixsignout
5209   25B4 F9            leave
5210   25B5 09            ret
5211   25B6             
5212   25B6             normmulres:
5213   25B6 D2            push bp
5214   25B7 9B            mov bp, sp
5215   25B8             _if84_cond:
5216   25B8 29 6F 3C      mov b, [__mulres] ; mulres
5217   25BB D7            push a
5218   25BC 74            mov d, b
5219   25BD DA            push d
5220   25BE 26 17 00      mov b, 23
5221   25C1 E7            pop d
5222   25C2 10 02 00      mov a, 2
5223   25C5 AC            mul a, b
5224   25C6 5A            add d, b
5225   25C7 E4            pop a
5226   25C8 2A            mov b, [d]
5227   25C9 D7            push a
5228   25CA 11            mov a, b
5229   25CB 26 63 00      mov b, 99
5230   25CE B0            cmp a, b
5231   25CF 0E            lodflgs
5232   25D0 2F            mov bl, al
5233   25D1 FD 78         mov g, a
5234   25D3 FD A2 03      shr al, 3
5235   25D6 FD A4 02      shr bl, 2
5236   25D9 FD 87 01      and bl, %00000001
5237   25DC 90            xor al, bl
5238   25DD FD 27         mov b, g
5239   25DF FD 87 01      and bl, %00000001
5240   25E2 8C            or al, bl
5241   25E3 8F 01         xor al, %00000001 ; > (signed)
5242   25E5 22 00         mov ah, 0
5243   25E7 27            mov b, a
5244   25E8 E4            pop a
5245   25E9 C0 00 00      cmp b, 0
5246   25EC C6 47 26      je _if84_exit
5247   25EF             _if84_true:
5248   25EF 29 6F 3C      mov b, [__mulres] ; mulres
5249   25F2 D7            push a
5250   25F3 74            mov d, b
5251   25F4 DA            push d
5252   25F5 26 17 00      mov b, 23
5253   25F8 E7            pop d
5254   25F9 10 02 00      mov a, 2
5255   25FC AC            mul a, b
5256   25FD 5A            add d, b
5257   25FE E4            pop a
5258   25FF 2A            mov b, [d]
5259   2600 D7            push a
5260   2601 11            mov a, b
5261   2602 26 64 00      mov b, 100
5262   2605 AE            div a, b
5263   2606 FD 78         mov g, a
5264   2608 11            mov a, b
5265   2609 FD 27         mov b, g
5266   260B E4            pop a
5267   260C FD 42 AF 3C   mov [__toolarge], b
5268   2610 29 6F 3C      mov b, [__mulres] ; mulres
5269   2613 D7            push a
5270   2614 74            mov d, b
5271   2615 DA            push d
5272   2616 26 17 00      mov b, 23
5273   2619 E7            pop d
5274   261A 10 02 00      mov a, 2
5275   261D AC            mul a, b
5276   261E 5A            add d, b
5277   261F E4            pop a
5278   2620 DA            push d
5279   2621 29 6F 3C      mov b, [__mulres] ; mulres
5280   2624 D7            push a
5281   2625 74            mov d, b
5282   2626 DA            push d
5283   2627 26 17 00      mov b, 23
5284   262A E7            pop d
5285   262B 10 02 00      mov a, 2
5286   262E AC            mul a, b
5287   262F 5A            add d, b
5288   2630 E4            pop a
5289   2631 2A            mov b, [d]
5290   2632 D7            push a
5291   2633 11            mov a, b
5292   2634 29 AF 3C      mov b, [__toolarge] ; toolarge
5293   2637 D7            push a
5294   2638 11            mov a, b
5295   2639 26 64 00      mov b, 100
5296   263C AC            mul a, b
5297   263D E4            pop a
5298   263E 60            sub a, b
5299   263F 27            mov b, a
5300   2640 E4            pop a
5301   2641 E7            pop d
5302   2642 FD 43         mov [d], b
5303   2644 0A 47 26      jmp _if84_exit
5304   2647             _if84_exit:
5305   2647 26 00 00      mov b, 0
5306   264A FD 42 B1 3C   mov [__normal], b
5307   264E             _while85_cond:
5308   264E 29 B1 3C      mov b, [__normal] ; normal
5309   2651 D7            push a
5310   2652 11            mov a, b
5311   2653 26 00 00      mov b, 0
5312   2656 B0            cmp a, b
5313   2657 0E            lodflgs
5314   2658 87 01         and al, %00000001 ; ==
5315   265A 22 00         mov ah, 0
5316   265C 27            mov b, a
5317   265D E4            pop a
5318   265E C0 00 00      cmp b, 0
5319   2661 C6 86 27      je _while85_exit
5320   2664             _while85_block:
5321   2664 26 01 00      mov b, 1
5322   2667 FD 42 B1 3C   mov [__normal], b
5323   266B             _for86_init:
5324   266B 26 00 00      mov b, 0
5325   266E FD 42 91 3C   mov [__protopos], b
5326   2672             _for86_cond:
5327   2672 29 91 3C      mov b, [__protopos] ; protopos
5328   2675 D7            push a
5329   2676 11            mov a, b
5330   2677 26 17 00      mov b, 23
5331   267A B0            cmp a, b
5332   267B 0E            lodflgs
5333   267C 2F            mov bl, al
5334   267D FD A2 03      shr al, 3
5335   2680 FD A4 02      shr bl, 2
5336   2683 FD 87 01      and bl, %00000001
5337   2686 90            xor al, bl ; < (signed)
5338   2687 22 00         mov ah, 0
5339   2689 27            mov b, a
5340   268A E4            pop a
5341   268B C0 00 00      cmp b, 0
5342   268E C6 83 27      je _for86_exit
5343   2691             _for86_block:
5344   2691 26 16 00      mov b, 22
5345   2694 D7            push a
5346   2695 11            mov a, b
5347   2696 29 91 3C      mov b, [__protopos] ; protopos
5348   2699 60            sub a, b
5349   269A 27            mov b, a
5350   269B E4            pop a
5351   269C FD 42 93 3C   mov [__pos], b
5352   26A0             _if87_cond:
5353   26A0 29 6F 3C      mov b, [__mulres] ; mulres
5354   26A3 D7            push a
5355   26A4 74            mov d, b
5356   26A5 DA            push d
5357   26A6 29 93 3C      mov b, [__pos] ; pos
5358   26A9 E7            pop d
5359   26AA 10 02 00      mov a, 2
5360   26AD AC            mul a, b
5361   26AE 5A            add d, b
5362   26AF E4            pop a
5363   26B0 2A            mov b, [d]
5364   26B1 D7            push a
5365   26B2 11            mov a, b
5366   26B3 26 63 00      mov b, 99
5367   26B6 B0            cmp a, b
5368   26B7 0E            lodflgs
5369   26B8 2F            mov bl, al
5370   26B9 FD 78         mov g, a
5371   26BB FD A2 03      shr al, 3
5372   26BE FD A4 02      shr bl, 2
5373   26C1 FD 87 01      and bl, %00000001
5374   26C4 90            xor al, bl
5375   26C5 FD 27         mov b, g
5376   26C7 FD 87 01      and bl, %00000001
5377   26CA 8C            or al, bl
5378   26CB 8F 01         xor al, %00000001 ; > (signed)
5379   26CD 22 00         mov ah, 0
5380   26CF 27            mov b, a
5381   26D0 E4            pop a
5382   26D1 C0 00 00      cmp b, 0
5383   26D4 C6 73 27      je _if87_exit
5384   26D7             _if87_true:
5385   26D7 26 00 00      mov b, 0
5386   26DA FD 42 B1 3C   mov [__normal], b
5387   26DE 29 6F 3C      mov b, [__mulres] ; mulres
5388   26E1 D7            push a
5389   26E2 74            mov d, b
5390   26E3 DA            push d
5391   26E4 29 93 3C      mov b, [__pos] ; pos
5392   26E7 E7            pop d
5393   26E8 10 02 00      mov a, 2
5394   26EB AC            mul a, b
5395   26EC 5A            add d, b
5396   26ED E4            pop a
5397   26EE 2A            mov b, [d]
5398   26EF D7            push a
5399   26F0 11            mov a, b
5400   26F1 26 64 00      mov b, 100
5401   26F4 AE            div a, b
5402   26F5 FD 78         mov g, a
5403   26F7 11            mov a, b
5404   26F8 FD 27         mov b, g
5405   26FA E4            pop a
5406   26FB FD 42 AF 3C   mov [__toolarge], b
5407   26FF 29 6F 3C      mov b, [__mulres] ; mulres
5408   2702 D7            push a
5409   2703 74            mov d, b
5410   2704 DA            push d
5411   2705 29 93 3C      mov b, [__pos] ; pos
5412   2708 E7            pop d
5413   2709 10 02 00      mov a, 2
5414   270C AC            mul a, b
5415   270D 5A            add d, b
5416   270E E4            pop a
5417   270F DA            push d
5418   2710 29 6F 3C      mov b, [__mulres] ; mulres
5419   2713 D7            push a
5420   2714 74            mov d, b
5421   2715 DA            push d
5422   2716 29 93 3C      mov b, [__pos] ; pos
5423   2719 E7            pop d
5424   271A 10 02 00      mov a, 2
5425   271D AC            mul a, b
5426   271E 5A            add d, b
5427   271F E4            pop a
5428   2720 2A            mov b, [d]
5429   2721 D7            push a
5430   2722 11            mov a, b
5431   2723 29 AF 3C      mov b, [__toolarge] ; toolarge
5432   2726 D7            push a
5433   2727 11            mov a, b
5434   2728 26 64 00      mov b, 100
5435   272B AC            mul a, b
5436   272C E4            pop a
5437   272D 60            sub a, b
5438   272E 27            mov b, a
5439   272F E4            pop a
5440   2730 E7            pop d
5441   2731 FD 43         mov [d], b
5442   2733 29 6F 3C      mov b, [__mulres] ; mulres
5443   2736 D7            push a
5444   2737 74            mov d, b
5445   2738 DA            push d
5446   2739 29 93 3C      mov b, [__pos] ; pos
5447   273C D7            push a
5448   273D 11            mov a, b
5449   273E 26 01 00      mov b, 1
5450   2741 54            add a, b
5451   2742 27            mov b, a
5452   2743 E4            pop a
5453   2744 E7            pop d
5454   2745 10 02 00      mov a, 2
5455   2748 AC            mul a, b
5456   2749 5A            add d, b
5457   274A E4            pop a
5458   274B DA            push d
5459   274C 29 6F 3C      mov b, [__mulres] ; mulres
5460   274F D7            push a
5461   2750 74            mov d, b
5462   2751 DA            push d
5463   2752 29 93 3C      mov b, [__pos] ; pos
5464   2755 D7            push a
5465   2756 11            mov a, b
5466   2757 26 01 00      mov b, 1
5467   275A 54            add a, b
5468   275B 27            mov b, a
5469   275C E4            pop a
5470   275D E7            pop d
5471   275E 10 02 00      mov a, 2
5472   2761 AC            mul a, b
5473   2762 5A            add d, b
5474   2763 E4            pop a
5475   2764 2A            mov b, [d]
5476   2765 D7            push a
5477   2766 11            mov a, b
5478   2767 29 AF 3C      mov b, [__toolarge] ; toolarge
5479   276A 54            add a, b
5480   276B 27            mov b, a
5481   276C E4            pop a
5482   276D E7            pop d
5483   276E FD 43         mov [d], b
5484   2770 0A 73 27      jmp _if87_exit
5485   2773             _if87_exit:
5486   2773             _for86_update:
5487   2773 29 91 3C      mov b, [__protopos] ; protopos
5488   2776 D7            push a
5489   2777 11            mov a, b
5490   2778 FD 77         inc b
5491   277A FD 42 91 3C   mov [__protopos], b
5492   277E 27            mov b, a
5493   277F E4            pop a
5494   2780 0A 72 26      jmp _for86_cond
5495   2783             _for86_exit:
5496   2783 0A 4E 26      jmp _while85_cond
5497   2786             _while85_exit:
5498   2786             _if88_cond:
5499   2786 29 6F 3C      mov b, [__mulres] ; mulres
5500   2789 D7            push a
5501   278A 74            mov d, b
5502   278B DA            push d
5503   278C 26 17 00      mov b, 23
5504   278F E7            pop d
5505   2790 10 02 00      mov a, 2
5506   2793 AC            mul a, b
5507   2794 5A            add d, b
5508   2795 E4            pop a
5509   2796 2A            mov b, [d]
5510   2797 D7            push a
5511   2798 11            mov a, b
5512   2799 26 63 00      mov b, 99
5513   279C B0            cmp a, b
5514   279D 0E            lodflgs
5515   279E 2F            mov bl, al
5516   279F FD 78         mov g, a
5517   27A1 FD A2 03      shr al, 3
5518   27A4 FD A4 02      shr bl, 2
5519   27A7 FD 87 01      and bl, %00000001
5520   27AA 90            xor al, bl
5521   27AB FD 27         mov b, g
5522   27AD FD 87 01      and bl, %00000001
5523   27B0 8C            or al, bl
5524   27B1 8F 01         xor al, %00000001 ; > (signed)
5525   27B3 22 00         mov ah, 0
5526   27B5 27            mov b, a
5527   27B6 E4            pop a
5528   27B7 C0 00 00      cmp b, 0
5529   27BA C6 15 28      je _if88_exit
5530   27BD             _if88_true:
5531   27BD 29 6F 3C      mov b, [__mulres] ; mulres
5532   27C0 D7            push a
5533   27C1 74            mov d, b
5534   27C2 DA            push d
5535   27C3 26 17 00      mov b, 23
5536   27C6 E7            pop d
5537   27C7 10 02 00      mov a, 2
5538   27CA AC            mul a, b
5539   27CB 5A            add d, b
5540   27CC E4            pop a
5541   27CD 2A            mov b, [d]
5542   27CE D7            push a
5543   27CF 11            mov a, b
5544   27D0 26 64 00      mov b, 100
5545   27D3 AE            div a, b
5546   27D4 FD 78         mov g, a
5547   27D6 11            mov a, b
5548   27D7 FD 27         mov b, g
5549   27D9 E4            pop a
5550   27DA FD 42 AF 3C   mov [__toolarge], b
5551   27DE 29 6F 3C      mov b, [__mulres] ; mulres
5552   27E1 D7            push a
5553   27E2 74            mov d, b
5554   27E3 DA            push d
5555   27E4 26 17 00      mov b, 23
5556   27E7 E7            pop d
5557   27E8 10 02 00      mov a, 2
5558   27EB AC            mul a, b
5559   27EC 5A            add d, b
5560   27ED E4            pop a
5561   27EE DA            push d
5562   27EF 29 6F 3C      mov b, [__mulres] ; mulres
5563   27F2 D7            push a
5564   27F3 74            mov d, b
5565   27F4 DA            push d
5566   27F5 26 17 00      mov b, 23
5567   27F8 E7            pop d
5568   27F9 10 02 00      mov a, 2
5569   27FC AC            mul a, b
5570   27FD 5A            add d, b
5571   27FE E4            pop a
5572   27FF 2A            mov b, [d]
5573   2800 D7            push a
5574   2801 11            mov a, b
5575   2802 29 AF 3C      mov b, [__toolarge] ; toolarge
5576   2805 D7            push a
5577   2806 11            mov a, b
5578   2807 26 64 00      mov b, 100
5579   280A AC            mul a, b
5580   280B E4            pop a
5581   280C 60            sub a, b
5582   280D 27            mov b, a
5583   280E E4            pop a
5584   280F E7            pop d
5585   2810 FD 43         mov [d], b
5586   2812 0A 15 28      jmp _if88_exit
5587   2815             _if88_exit:
5588   2815 F9            leave
5589   2816 09            ret
5590   2817             
5591   2817             prototimes:
5592   2817 D2            push bp
5593   2818 9B            mov bp, sp
5594   2819             _for89_init:
5595   2819 26 00 00      mov b, 0
5596   281C FD 42 C5 3C   mov [__divi], b
5597   2820             _for89_cond:
5598   2820 29 C5 3C      mov b, [__divi] ; divi
5599   2823 D7            push a
5600   2824 11            mov a, b
5601   2825 26 0C 00      mov b, 12
5602   2828 B0            cmp a, b
5603   2829 0E            lodflgs
5604   282A 2F            mov bl, al
5605   282B FD A2 03      shr al, 3
5606   282E FD A4 02      shr bl, 2
5607   2831 FD 87 01      and bl, %00000001
5608   2834 90            xor al, bl ; < (signed)
5609   2835 22 00         mov ah, 0
5610   2837 27            mov b, a
5611   2838 E4            pop a
5612   2839 C0 00 00      cmp b, 0
5613   283C C6 66 28      je _for89_exit
5614   283F             _for89_block:
5615   283F 29 3D 3C      mov b, [__cnarr] ; cnarr
5616   2842 D7            push a
5617   2843 74            mov d, b
5618   2844 DA            push d
5619   2845 29 C5 3C      mov b, [__divi] ; divi
5620   2848 E7            pop d
5621   2849 10 02 00      mov a, 2
5622   284C AC            mul a, b
5623   284D 5A            add d, b
5624   284E E4            pop a
5625   284F DA            push d
5626   2850 26 00 00      mov b, 0
5627   2853 E7            pop d
5628   2854 FD 43         mov [d], b
5629   2856             _for89_update:
5630   2856 29 C5 3C      mov b, [__divi] ; divi
5631   2859 D7            push a
5632   285A 11            mov a, b
5633   285B FD 77         inc b
5634   285D FD 42 C5 3C   mov [__divi], b
5635   2861 27            mov b, a
5636   2862 E4            pop a
5637   2863 0A 20 28      jmp _for89_cond
5638   2866             _for89_exit:
5639   2866             _for90_init:
5640   2866 26 00 00      mov b, 0
5641   2869 FD 42 C5 3C   mov [__divi], b
5642   286D             _for90_cond:
5643   286D 29 C5 3C      mov b, [__divi] ; divi
5644   2870 D7            push a
5645   2871 11            mov a, b
5646   2872 26 18 00      mov b, 24
5647   2875 B0            cmp a, b
5648   2876 0E            lodflgs
5649   2877 2F            mov bl, al
5650   2878 FD A2 03      shr al, 3
5651   287B FD A4 02      shr bl, 2
5652   287E FD 87 01      and bl, %00000001
5653   2881 90            xor al, bl ; < (signed)
5654   2882 22 00         mov ah, 0
5655   2884 27            mov b, a
5656   2885 E4            pop a
5657   2886 C0 00 00      cmp b, 0
5658   2889 C6 B3 28      je _for90_exit
5659   288C             _for90_block:
5660   288C 29 6F 3C      mov b, [__mulres] ; mulres
5661   288F D7            push a
5662   2890 74            mov d, b
5663   2891 DA            push d
5664   2892 29 C5 3C      mov b, [__divi] ; divi
5665   2895 E7            pop d
5666   2896 10 02 00      mov a, 2
5667   2899 AC            mul a, b
5668   289A 5A            add d, b
5669   289B E4            pop a
5670   289C DA            push d
5671   289D 26 00 00      mov b, 0
5672   28A0 E7            pop d
5673   28A1 FD 43         mov [d], b
5674   28A3             _for90_update:
5675   28A3 29 C5 3C      mov b, [__divi] ; divi
5676   28A6 D7            push a
5677   28A7 11            mov a, b
5678   28A8 FD 77         inc b
5679   28AA FD 42 C5 3C   mov [__divi], b
5680   28AE 27            mov b, a
5681   28AF E4            pop a
5682   28B0 0A 6D 28      jmp _for90_cond
5683   28B3             _for90_exit:
5684   28B3             _for91_init:
5685   28B3 26 00 00      mov b, 0
5686   28B6 FD 42 B3 3C   mov [__mulpos1], b
5687   28BA             _for91_cond:
5688   28BA 29 B3 3C      mov b, [__mulpos1] ; mulpos1
5689   28BD D7            push a
5690   28BE 11            mov a, b
5691   28BF 26 0C 00      mov b, 12
5692   28C2 B0            cmp a, b
5693   28C3 0E            lodflgs
5694   28C4 2F            mov bl, al
5695   28C5 FD A2 03      shr al, 3
5696   28C8 FD A4 02      shr bl, 2
5697   28CB FD 87 01      and bl, %00000001
5698   28CE 90            xor al, bl ; < (signed)
5699   28CF 22 00         mov ah, 0
5700   28D1 27            mov b, a
5701   28D2 E4            pop a
5702   28D3 C0 00 00      cmp b, 0
5703   28D6 C6 82 29      je _for91_exit
5704   28D9             _for91_block:
5705   28D9             _for92_init:
5706   28D9 26 00 00      mov b, 0
5707   28DC FD 42 B5 3C   mov [__mulpos2], b
5708   28E0             _for92_cond:
5709   28E0 29 B5 3C      mov b, [__mulpos2] ; mulpos2
5710   28E3 D7            push a
5711   28E4 11            mov a, b
5712   28E5 26 0C 00      mov b, 12
5713   28E8 B0            cmp a, b
5714   28E9 0E            lodflgs
5715   28EA 2F            mov bl, al
5716   28EB FD A2 03      shr al, 3
5717   28EE FD A4 02      shr bl, 2
5718   28F1 FD 87 01      and bl, %00000001
5719   28F4 90            xor al, bl ; < (signed)
5720   28F5 22 00         mov ah, 0
5721   28F7 27            mov b, a
5722   28F8 E4            pop a
5723   28F9 C0 00 00      cmp b, 0
5724   28FC C6 6F 29      je _for92_exit
5725   28FF             _for92_block:
5726   28FF 29 6F 3C      mov b, [__mulres] ; mulres
5727   2902 D7            push a
5728   2903 74            mov d, b
5729   2904 DA            push d
5730   2905 29 B3 3C      mov b, [__mulpos1] ; mulpos1
5731   2908 D7            push a
5732   2909 11            mov a, b
5733   290A 29 B5 3C      mov b, [__mulpos2] ; mulpos2
5734   290D 54            add a, b
5735   290E 27            mov b, a
5736   290F E4            pop a
5737   2910 E7            pop d
5738   2911 10 02 00      mov a, 2
5739   2914 AC            mul a, b
5740   2915 5A            add d, b
5741   2916 E4            pop a
5742   2917 DA            push d
5743   2918 29 6F 3C      mov b, [__mulres] ; mulres
5744   291B D7            push a
5745   291C 74            mov d, b
5746   291D DA            push d
5747   291E 29 B3 3C      mov b, [__mulpos1] ; mulpos1
5748   2921 D7            push a
5749   2922 11            mov a, b
5750   2923 29 B5 3C      mov b, [__mulpos2] ; mulpos2
5751   2926 54            add a, b
5752   2927 27            mov b, a
5753   2928 E4            pop a
5754   2929 E7            pop d
5755   292A 10 02 00      mov a, 2
5756   292D AC            mul a, b
5757   292E 5A            add d, b
5758   292F E4            pop a
5759   2930 2A            mov b, [d]
5760   2931 D7            push a
5761   2932 11            mov a, b
5762   2933 29 EF 3B      mov b, [__bnarr] ; bnarr
5763   2936 D7            push a
5764   2937 74            mov d, b
5765   2938 DA            push d
5766   2939 29 B5 3C      mov b, [__mulpos2] ; mulpos2
5767   293C E7            pop d
5768   293D 10 02 00      mov a, 2
5769   2940 AC            mul a, b
5770   2941 5A            add d, b
5771   2942 E4            pop a
5772   2943 2A            mov b, [d]
5773   2944 D7            push a
5774   2945 11            mov a, b
5775   2946 29 D5 3B      mov b, [__anarr] ; anarr
5776   2949 D7            push a
5777   294A 74            mov d, b
5778   294B DA            push d
5779   294C 29 B3 3C      mov b, [__mulpos1] ; mulpos1
5780   294F E7            pop d
5781   2950 10 02 00      mov a, 2
5782   2953 AC            mul a, b
5783   2954 5A            add d, b
5784   2955 E4            pop a
5785   2956 2A            mov b, [d]
5786   2957 AC            mul a, b
5787   2958 E4            pop a
5788   2959 54            add a, b
5789   295A 27            mov b, a
5790   295B E4            pop a
5791   295C E7            pop d
5792   295D FD 43         mov [d], b
5793   295F             _for92_update:
5794   295F 29 B5 3C      mov b, [__mulpos2] ; mulpos2
5795   2962 D7            push a
5796   2963 11            mov a, b
5797   2964 FD 77         inc b
5798   2966 FD 42 B5 3C   mov [__mulpos2], b
5799   296A 27            mov b, a
5800   296B E4            pop a
5801   296C 0A E0 28      jmp _for92_cond
5802   296F             _for92_exit:
5803   296F 07 B6 25      call normmulres
5804   2972             _for91_update:
5805   2972 29 B3 3C      mov b, [__mulpos1] ; mulpos1
5806   2975 D7            push a
5807   2976 11            mov a, b
5808   2977 FD 77         inc b
5809   2979 FD 42 B3 3C   mov [__mulpos1], b
5810   297D 27            mov b, a
5811   297E E4            pop a
5812   297F 0A BA 28      jmp _for91_cond
5813   2982             _for91_exit:
5814   2982 F9            leave
5815   2983 09            ret
5816   2984             
5817   2984             aincrease:
5818   2984 D2            push bp
5819   2985 9B            mov bp, sp
5820   2986             _for93_init:
5821   2986 26 0C 00      mov b, 12
5822   2989 FD 42 C5 3C   mov [__divi], b
5823   298D             _for93_cond:
5824   298D 29 C5 3C      mov b, [__divi] ; divi
5825   2990 D7            push a
5826   2991 11            mov a, b
5827   2992 26 01 00      mov b, 1
5828   2995 B0            cmp a, b
5829   2996 0E            lodflgs
5830   2997 2F            mov bl, al
5831   2998 FD 78         mov g, a
5832   299A FD A2 03      shr al, 3
5833   299D FD A4 02      shr bl, 2
5834   29A0 FD 87 01      and bl, %00000001
5835   29A3 90            xor al, bl
5836   29A4 FD 27         mov b, g
5837   29A6 FD 87 01      and bl, %00000001
5838   29A9 8C            or al, bl
5839   29AA 8F 01         xor al, %00000001 ; > (signed)
5840   29AC 22 00         mov ah, 0
5841   29AE 27            mov b, a
5842   29AF E4            pop a
5843   29B0 C0 00 00      cmp b, 0
5844   29B3 C6 DC 2A      je _for93_exit
5845   29B6             _for93_block:
5846   29B6 29 D5 3B      mov b, [__anarr] ; anarr
5847   29B9 D7            push a
5848   29BA 74            mov d, b
5849   29BB DA            push d
5850   29BC 29 C5 3C      mov b, [__divi] ; divi
5851   29BF D7            push a
5852   29C0 11            mov a, b
5853   29C1 26 01 00      mov b, 1
5854   29C4 60            sub a, b
5855   29C5 27            mov b, a
5856   29C6 E4            pop a
5857   29C7 E7            pop d
5858   29C8 10 02 00      mov a, 2
5859   29CB AC            mul a, b
5860   29CC 5A            add d, b
5861   29CD E4            pop a
5862   29CE 2A            mov b, [d]
5863   29CF D7            push a
5864   29D0 11            mov a, b
5865   29D1 26 0A 00      mov b, 10
5866   29D4 AE            div a, b
5867   29D5 FD 78         mov g, a
5868   29D7 11            mov a, b
5869   29D8 FD 27         mov b, g
5870   29DA E4            pop a
5871   29DB FD 42 CD 3C   mov [__subi], b
5872   29DF 29 CD 3C      mov b, [__subi] ; subi
5873   29E2 D7            push a
5874   29E3 11            mov a, b
5875   29E4 26 0A 00      mov b, 10
5876   29E7 AC            mul a, b
5877   29E8 E4            pop a
5878   29E9 FD 42 CD 3C   mov [__subi], b
5879   29ED 29 D5 3B      mov b, [__anarr] ; anarr
5880   29F0 D7            push a
5881   29F1 74            mov d, b
5882   29F2 DA            push d
5883   29F3 29 C5 3C      mov b, [__divi] ; divi
5884   29F6 D7            push a
5885   29F7 11            mov a, b
5886   29F8 26 01 00      mov b, 1
5887   29FB 60            sub a, b
5888   29FC 27            mov b, a
5889   29FD E4            pop a
5890   29FE E7            pop d
5891   29FF 10 02 00      mov a, 2
5892   2A02 AC            mul a, b
5893   2A03 5A            add d, b
5894   2A04 E4            pop a
5895   2A05 DA            push d
5896   2A06 29 D5 3B      mov b, [__anarr] ; anarr
5897   2A09 D7            push a
5898   2A0A 74            mov d, b
5899   2A0B DA            push d
5900   2A0C 29 C5 3C      mov b, [__divi] ; divi
5901   2A0F D7            push a
5902   2A10 11            mov a, b
5903   2A11 26 01 00      mov b, 1
5904   2A14 60            sub a, b
5905   2A15 27            mov b, a
5906   2A16 E4            pop a
5907   2A17 E7            pop d
5908   2A18 10 02 00      mov a, 2
5909   2A1B AC            mul a, b
5910   2A1C 5A            add d, b
5911   2A1D E4            pop a
5912   2A1E 2A            mov b, [d]
5913   2A1F D7            push a
5914   2A20 11            mov a, b
5915   2A21 29 CD 3C      mov b, [__subi] ; subi
5916   2A24 60            sub a, b
5917   2A25 27            mov b, a
5918   2A26 E4            pop a
5919   2A27 E7            pop d
5920   2A28 FD 43         mov [d], b
5921   2A2A 29 D5 3B      mov b, [__anarr] ; anarr
5922   2A2D D7            push a
5923   2A2E 74            mov d, b
5924   2A2F DA            push d
5925   2A30 29 C5 3C      mov b, [__divi] ; divi
5926   2A33 D7            push a
5927   2A34 11            mov a, b
5928   2A35 26 01 00      mov b, 1
5929   2A38 60            sub a, b
5930   2A39 27            mov b, a
5931   2A3A E4            pop a
5932   2A3B E7            pop d
5933   2A3C 10 02 00      mov a, 2
5934   2A3F AC            mul a, b
5935   2A40 5A            add d, b
5936   2A41 E4            pop a
5937   2A42 DA            push d
5938   2A43 29 D5 3B      mov b, [__anarr] ; anarr
5939   2A46 D7            push a
5940   2A47 74            mov d, b
5941   2A48 DA            push d
5942   2A49 29 C5 3C      mov b, [__divi] ; divi
5943   2A4C D7            push a
5944   2A4D 11            mov a, b
5945   2A4E 26 01 00      mov b, 1
5946   2A51 60            sub a, b
5947   2A52 27            mov b, a
5948   2A53 E4            pop a
5949   2A54 E7            pop d
5950   2A55 10 02 00      mov a, 2
5951   2A58 AC            mul a, b
5952   2A59 5A            add d, b
5953   2A5A E4            pop a
5954   2A5B 2A            mov b, [d]
5955   2A5C D7            push a
5956   2A5D 11            mov a, b
5957   2A5E 26 0A 00      mov b, 10
5958   2A61 AC            mul a, b
5959   2A62 E4            pop a
5960   2A63 E7            pop d
5961   2A64 FD 43         mov [d], b
5962   2A66 29 D5 3B      mov b, [__anarr] ; anarr
5963   2A69 D7            push a
5964   2A6A 74            mov d, b
5965   2A6B DA            push d
5966   2A6C 29 C5 3C      mov b, [__divi] ; divi
5967   2A6F D7            push a
5968   2A70 11            mov a, b
5969   2A71 26 02 00      mov b, 2
5970   2A74 60            sub a, b
5971   2A75 27            mov b, a
5972   2A76 E4            pop a
5973   2A77 E7            pop d
5974   2A78 10 02 00      mov a, 2
5975   2A7B AC            mul a, b
5976   2A7C 5A            add d, b
5977   2A7D E4            pop a
5978   2A7E 2A            mov b, [d]
5979   2A7F D7            push a
5980   2A80 11            mov a, b
5981   2A81 26 0A 00      mov b, 10
5982   2A84 AE            div a, b
5983   2A85 FD 78         mov g, a
5984   2A87 11            mov a, b
5985   2A88 FD 27         mov b, g
5986   2A8A E4            pop a
5987   2A8B FD 42 CD 3C   mov [__subi], b
5988   2A8F 29 D5 3B      mov b, [__anarr] ; anarr
5989   2A92 D7            push a
5990   2A93 74            mov d, b
5991   2A94 DA            push d
5992   2A95 29 C5 3C      mov b, [__divi] ; divi
5993   2A98 D7            push a
5994   2A99 11            mov a, b
5995   2A9A 26 01 00      mov b, 1
5996   2A9D 60            sub a, b
5997   2A9E 27            mov b, a
5998   2A9F E4            pop a
5999   2AA0 E7            pop d
6000   2AA1 10 02 00      mov a, 2
6001   2AA4 AC            mul a, b
6002   2AA5 5A            add d, b
6003   2AA6 E4            pop a
6004   2AA7 DA            push d
6005   2AA8 29 D5 3B      mov b, [__anarr] ; anarr
6006   2AAB D7            push a
6007   2AAC 74            mov d, b
6008   2AAD DA            push d
6009   2AAE 29 C5 3C      mov b, [__divi] ; divi
6010   2AB1 D7            push a
6011   2AB2 11            mov a, b
6012   2AB3 26 01 00      mov b, 1
6013   2AB6 60            sub a, b
6014   2AB7 27            mov b, a
6015   2AB8 E4            pop a
6016   2AB9 E7            pop d
6017   2ABA 10 02 00      mov a, 2
6018   2ABD AC            mul a, b
6019   2ABE 5A            add d, b
6020   2ABF E4            pop a
6021   2AC0 2A            mov b, [d]
6022   2AC1 D7            push a
6023   2AC2 11            mov a, b
6024   2AC3 29 CD 3C      mov b, [__subi] ; subi
6025   2AC6 54            add a, b
6026   2AC7 27            mov b, a
6027   2AC8 E4            pop a
6028   2AC9 E7            pop d
6029   2ACA FD 43         mov [d], b
6030   2ACC             _for93_update:
6031   2ACC 29 C5 3C      mov b, [__divi] ; divi
6032   2ACF D7            push a
6033   2AD0 11            mov a, b
6034   2AD1 FD 7D         dec b
6035   2AD3 FD 42 C5 3C   mov [__divi], b
6036   2AD7 27            mov b, a
6037   2AD8 E4            pop a
6038   2AD9 0A 8D 29      jmp _for93_cond
6039   2ADC             _for93_exit:
6040   2ADC 29 D5 3B      mov b, [__anarr] ; anarr
6041   2ADF D7            push a
6042   2AE0 74            mov d, b
6043   2AE1 DA            push d
6044   2AE2 26 00 00      mov b, 0
6045   2AE5 E7            pop d
6046   2AE6 10 02 00      mov a, 2
6047   2AE9 AC            mul a, b
6048   2AEA 5A            add d, b
6049   2AEB E4            pop a
6050   2AEC 2A            mov b, [d]
6051   2AED FD 42 CD 3C   mov [__subi], b
6052   2AF1 29 D5 3B      mov b, [__anarr] ; anarr
6053   2AF4 D7            push a
6054   2AF5 74            mov d, b
6055   2AF6 DA            push d
6056   2AF7 26 00 00      mov b, 0
6057   2AFA E7            pop d
6058   2AFB 10 02 00      mov a, 2
6059   2AFE AC            mul a, b
6060   2AFF 5A            add d, b
6061   2B00 E4            pop a
6062   2B01 DA            push d
6063   2B02 29 D5 3B      mov b, [__anarr] ; anarr
6064   2B05 D7            push a
6065   2B06 74            mov d, b
6066   2B07 DA            push d
6067   2B08 26 00 00      mov b, 0
6068   2B0B E7            pop d
6069   2B0C 10 02 00      mov a, 2
6070   2B0F AC            mul a, b
6071   2B10 5A            add d, b
6072   2B11 E4            pop a
6073   2B12 2A            mov b, [d]
6074   2B13 D7            push a
6075   2B14 11            mov a, b
6076   2B15 26 0A 00      mov b, 10
6077   2B18 AE            div a, b
6078   2B19 FD 78         mov g, a
6079   2B1B 11            mov a, b
6080   2B1C FD 27         mov b, g
6081   2B1E E4            pop a
6082   2B1F E7            pop d
6083   2B20 FD 43         mov [d], b
6084   2B22 29 D5 3B      mov b, [__anarr] ; anarr
6085   2B25 D7            push a
6086   2B26 74            mov d, b
6087   2B27 DA            push d
6088   2B28 26 00 00      mov b, 0
6089   2B2B E7            pop d
6090   2B2C 10 02 00      mov a, 2
6091   2B2F AC            mul a, b
6092   2B30 5A            add d, b
6093   2B31 E4            pop a
6094   2B32 DA            push d
6095   2B33 29 D5 3B      mov b, [__anarr] ; anarr
6096   2B36 D7            push a
6097   2B37 74            mov d, b
6098   2B38 DA            push d
6099   2B39 26 00 00      mov b, 0
6100   2B3C E7            pop d
6101   2B3D 10 02 00      mov a, 2
6102   2B40 AC            mul a, b
6103   2B41 5A            add d, b
6104   2B42 E4            pop a
6105   2B43 2A            mov b, [d]
6106   2B44 D7            push a
6107   2B45 11            mov a, b
6108   2B46 26 0A 00      mov b, 10
6109   2B49 AC            mul a, b
6110   2B4A E4            pop a
6111   2B4B E7            pop d
6112   2B4C FD 43         mov [d], b
6113   2B4E 29 D5 3B      mov b, [__anarr] ; anarr
6114   2B51 D7            push a
6115   2B52 74            mov d, b
6116   2B53 DA            push d
6117   2B54 26 00 00      mov b, 0
6118   2B57 E7            pop d
6119   2B58 10 02 00      mov a, 2
6120   2B5B AC            mul a, b
6121   2B5C 5A            add d, b
6122   2B5D E4            pop a
6123   2B5E DA            push d
6124   2B5F 29 CD 3C      mov b, [__subi] ; subi
6125   2B62 D7            push a
6126   2B63 11            mov a, b
6127   2B64 29 D5 3B      mov b, [__anarr] ; anarr
6128   2B67 D7            push a
6129   2B68 74            mov d, b
6130   2B69 DA            push d
6131   2B6A 26 00 00      mov b, 0
6132   2B6D E7            pop d
6133   2B6E 10 02 00      mov a, 2
6134   2B71 AC            mul a, b
6135   2B72 5A            add d, b
6136   2B73 E4            pop a
6137   2B74 2A            mov b, [d]
6138   2B75 60            sub a, b
6139   2B76 27            mov b, a
6140   2B77 E4            pop a
6141   2B78 E7            pop d
6142   2B79 FD 43         mov [d], b
6143   2B7B 29 D5 3B      mov b, [__anarr] ; anarr
6144   2B7E D7            push a
6145   2B7F 74            mov d, b
6146   2B80 DA            push d
6147   2B81 26 00 00      mov b, 0
6148   2B84 E7            pop d
6149   2B85 10 02 00      mov a, 2
6150   2B88 AC            mul a, b
6151   2B89 5A            add d, b
6152   2B8A E4            pop a
6153   2B8B DA            push d
6154   2B8C 29 D5 3B      mov b, [__anarr] ; anarr
6155   2B8F D7            push a
6156   2B90 74            mov d, b
6157   2B91 DA            push d
6158   2B92 26 00 00      mov b, 0
6159   2B95 E7            pop d
6160   2B96 10 02 00      mov a, 2
6161   2B99 AC            mul a, b
6162   2B9A 5A            add d, b
6163   2B9B E4            pop a
6164   2B9C 2A            mov b, [d]
6165   2B9D D7            push a
6166   2B9E 11            mov a, b
6167   2B9F 26 0A 00      mov b, 10
6168   2BA2 AC            mul a, b
6169   2BA3 E4            pop a
6170   2BA4 E7            pop d
6171   2BA5 FD 43         mov [d], b
6172   2BA7 F9            leave
6173   2BA8 09            ret
6174   2BA9             
6175   2BA9             bincrease:
6176   2BA9 D2            push bp
6177   2BAA 9B            mov bp, sp
6178   2BAB             _for94_init:
6179   2BAB 26 0C 00      mov b, 12
6180   2BAE FD 42 C5 3C   mov [__divi], b
6181   2BB2             _for94_cond:
6182   2BB2 29 C5 3C      mov b, [__divi] ; divi
6183   2BB5 D7            push a
6184   2BB6 11            mov a, b
6185   2BB7 26 01 00      mov b, 1
6186   2BBA B0            cmp a, b
6187   2BBB 0E            lodflgs
6188   2BBC 2F            mov bl, al
6189   2BBD FD 78         mov g, a
6190   2BBF FD A2 03      shr al, 3
6191   2BC2 FD A4 02      shr bl, 2
6192   2BC5 FD 87 01      and bl, %00000001
6193   2BC8 90            xor al, bl
6194   2BC9 FD 27         mov b, g
6195   2BCB FD 87 01      and bl, %00000001
6196   2BCE 8C            or al, bl
6197   2BCF 8F 01         xor al, %00000001 ; > (signed)
6198   2BD1 22 00         mov ah, 0
6199   2BD3 27            mov b, a
6200   2BD4 E4            pop a
6201   2BD5 C0 00 00      cmp b, 0
6202   2BD8 C6 01 2D      je _for94_exit
6203   2BDB             _for94_block:
6204   2BDB 29 EF 3B      mov b, [__bnarr] ; bnarr
6205   2BDE D7            push a
6206   2BDF 74            mov d, b
6207   2BE0 DA            push d
6208   2BE1 29 C5 3C      mov b, [__divi] ; divi
6209   2BE4 D7            push a
6210   2BE5 11            mov a, b
6211   2BE6 26 01 00      mov b, 1
6212   2BE9 60            sub a, b
6213   2BEA 27            mov b, a
6214   2BEB E4            pop a
6215   2BEC E7            pop d
6216   2BED 10 02 00      mov a, 2
6217   2BF0 AC            mul a, b
6218   2BF1 5A            add d, b
6219   2BF2 E4            pop a
6220   2BF3 2A            mov b, [d]
6221   2BF4 D7            push a
6222   2BF5 11            mov a, b
6223   2BF6 26 0A 00      mov b, 10
6224   2BF9 AE            div a, b
6225   2BFA FD 78         mov g, a
6226   2BFC 11            mov a, b
6227   2BFD FD 27         mov b, g
6228   2BFF E4            pop a
6229   2C00 FD 42 CD 3C   mov [__subi], b
6230   2C04 29 CD 3C      mov b, [__subi] ; subi
6231   2C07 D7            push a
6232   2C08 11            mov a, b
6233   2C09 26 0A 00      mov b, 10
6234   2C0C AC            mul a, b
6235   2C0D E4            pop a
6236   2C0E FD 42 CD 3C   mov [__subi], b
6237   2C12 29 EF 3B      mov b, [__bnarr] ; bnarr
6238   2C15 D7            push a
6239   2C16 74            mov d, b
6240   2C17 DA            push d
6241   2C18 29 C5 3C      mov b, [__divi] ; divi
6242   2C1B D7            push a
6243   2C1C 11            mov a, b
6244   2C1D 26 01 00      mov b, 1
6245   2C20 60            sub a, b
6246   2C21 27            mov b, a
6247   2C22 E4            pop a
6248   2C23 E7            pop d
6249   2C24 10 02 00      mov a, 2
6250   2C27 AC            mul a, b
6251   2C28 5A            add d, b
6252   2C29 E4            pop a
6253   2C2A DA            push d
6254   2C2B 29 EF 3B      mov b, [__bnarr] ; bnarr
6255   2C2E D7            push a
6256   2C2F 74            mov d, b
6257   2C30 DA            push d
6258   2C31 29 C5 3C      mov b, [__divi] ; divi
6259   2C34 D7            push a
6260   2C35 11            mov a, b
6261   2C36 26 01 00      mov b, 1
6262   2C39 60            sub a, b
6263   2C3A 27            mov b, a
6264   2C3B E4            pop a
6265   2C3C E7            pop d
6266   2C3D 10 02 00      mov a, 2
6267   2C40 AC            mul a, b
6268   2C41 5A            add d, b
6269   2C42 E4            pop a
6270   2C43 2A            mov b, [d]
6271   2C44 D7            push a
6272   2C45 11            mov a, b
6273   2C46 29 CD 3C      mov b, [__subi] ; subi
6274   2C49 60            sub a, b
6275   2C4A 27            mov b, a
6276   2C4B E4            pop a
6277   2C4C E7            pop d
6278   2C4D FD 43         mov [d], b
6279   2C4F 29 EF 3B      mov b, [__bnarr] ; bnarr
6280   2C52 D7            push a
6281   2C53 74            mov d, b
6282   2C54 DA            push d
6283   2C55 29 C5 3C      mov b, [__divi] ; divi
6284   2C58 D7            push a
6285   2C59 11            mov a, b
6286   2C5A 26 01 00      mov b, 1
6287   2C5D 60            sub a, b
6288   2C5E 27            mov b, a
6289   2C5F E4            pop a
6290   2C60 E7            pop d
6291   2C61 10 02 00      mov a, 2
6292   2C64 AC            mul a, b
6293   2C65 5A            add d, b
6294   2C66 E4            pop a
6295   2C67 DA            push d
6296   2C68 29 EF 3B      mov b, [__bnarr] ; bnarr
6297   2C6B D7            push a
6298   2C6C 74            mov d, b
6299   2C6D DA            push d
6300   2C6E 29 C5 3C      mov b, [__divi] ; divi
6301   2C71 D7            push a
6302   2C72 11            mov a, b
6303   2C73 26 01 00      mov b, 1
6304   2C76 60            sub a, b
6305   2C77 27            mov b, a
6306   2C78 E4            pop a
6307   2C79 E7            pop d
6308   2C7A 10 02 00      mov a, 2
6309   2C7D AC            mul a, b
6310   2C7E 5A            add d, b
6311   2C7F E4            pop a
6312   2C80 2A            mov b, [d]
6313   2C81 D7            push a
6314   2C82 11            mov a, b
6315   2C83 26 0A 00      mov b, 10
6316   2C86 AC            mul a, b
6317   2C87 E4            pop a
6318   2C88 E7            pop d
6319   2C89 FD 43         mov [d], b
6320   2C8B 29 EF 3B      mov b, [__bnarr] ; bnarr
6321   2C8E D7            push a
6322   2C8F 74            mov d, b
6323   2C90 DA            push d
6324   2C91 29 C5 3C      mov b, [__divi] ; divi
6325   2C94 D7            push a
6326   2C95 11            mov a, b
6327   2C96 26 02 00      mov b, 2
6328   2C99 60            sub a, b
6329   2C9A 27            mov b, a
6330   2C9B E4            pop a
6331   2C9C E7            pop d
6332   2C9D 10 02 00      mov a, 2
6333   2CA0 AC            mul a, b
6334   2CA1 5A            add d, b
6335   2CA2 E4            pop a
6336   2CA3 2A            mov b, [d]
6337   2CA4 D7            push a
6338   2CA5 11            mov a, b
6339   2CA6 26 0A 00      mov b, 10
6340   2CA9 AE            div a, b
6341   2CAA FD 78         mov g, a
6342   2CAC 11            mov a, b
6343   2CAD FD 27         mov b, g
6344   2CAF E4            pop a
6345   2CB0 FD 42 CD 3C   mov [__subi], b
6346   2CB4 29 EF 3B      mov b, [__bnarr] ; bnarr
6347   2CB7 D7            push a
6348   2CB8 74            mov d, b
6349   2CB9 DA            push d
6350   2CBA 29 C5 3C      mov b, [__divi] ; divi
6351   2CBD D7            push a
6352   2CBE 11            mov a, b
6353   2CBF 26 01 00      mov b, 1
6354   2CC2 60            sub a, b
6355   2CC3 27            mov b, a
6356   2CC4 E4            pop a
6357   2CC5 E7            pop d
6358   2CC6 10 02 00      mov a, 2
6359   2CC9 AC            mul a, b
6360   2CCA 5A            add d, b
6361   2CCB E4            pop a
6362   2CCC DA            push d
6363   2CCD 29 EF 3B      mov b, [__bnarr] ; bnarr
6364   2CD0 D7            push a
6365   2CD1 74            mov d, b
6366   2CD2 DA            push d
6367   2CD3 29 C5 3C      mov b, [__divi] ; divi
6368   2CD6 D7            push a
6369   2CD7 11            mov a, b
6370   2CD8 26 01 00      mov b, 1
6371   2CDB 60            sub a, b
6372   2CDC 27            mov b, a
6373   2CDD E4            pop a
6374   2CDE E7            pop d
6375   2CDF 10 02 00      mov a, 2
6376   2CE2 AC            mul a, b
6377   2CE3 5A            add d, b
6378   2CE4 E4            pop a
6379   2CE5 2A            mov b, [d]
6380   2CE6 D7            push a
6381   2CE7 11            mov a, b
6382   2CE8 29 CD 3C      mov b, [__subi] ; subi
6383   2CEB 54            add a, b
6384   2CEC 27            mov b, a
6385   2CED E4            pop a
6386   2CEE E7            pop d
6387   2CEF FD 43         mov [d], b
6388   2CF1             _for94_update:
6389   2CF1 29 C5 3C      mov b, [__divi] ; divi
6390   2CF4 D7            push a
6391   2CF5 11            mov a, b
6392   2CF6 FD 7D         dec b
6393   2CF8 FD 42 C5 3C   mov [__divi], b
6394   2CFC 27            mov b, a
6395   2CFD E4            pop a
6396   2CFE 0A B2 2B      jmp _for94_cond
6397   2D01             _for94_exit:
6398   2D01 29 EF 3B      mov b, [__bnarr] ; bnarr
6399   2D04 D7            push a
6400   2D05 74            mov d, b
6401   2D06 DA            push d
6402   2D07 26 00 00      mov b, 0
6403   2D0A E7            pop d
6404   2D0B 10 02 00      mov a, 2
6405   2D0E AC            mul a, b
6406   2D0F 5A            add d, b
6407   2D10 E4            pop a
6408   2D11 2A            mov b, [d]
6409   2D12 FD 42 CD 3C   mov [__subi], b
6410   2D16 29 EF 3B      mov b, [__bnarr] ; bnarr
6411   2D19 D7            push a
6412   2D1A 74            mov d, b
6413   2D1B DA            push d
6414   2D1C 26 00 00      mov b, 0
6415   2D1F E7            pop d
6416   2D20 10 02 00      mov a, 2
6417   2D23 AC            mul a, b
6418   2D24 5A            add d, b
6419   2D25 E4            pop a
6420   2D26 DA            push d
6421   2D27 29 EF 3B      mov b, [__bnarr] ; bnarr
6422   2D2A D7            push a
6423   2D2B 74            mov d, b
6424   2D2C DA            push d
6425   2D2D 26 00 00      mov b, 0
6426   2D30 E7            pop d
6427   2D31 10 02 00      mov a, 2
6428   2D34 AC            mul a, b
6429   2D35 5A            add d, b
6430   2D36 E4            pop a
6431   2D37 2A            mov b, [d]
6432   2D38 D7            push a
6433   2D39 11            mov a, b
6434   2D3A 26 0A 00      mov b, 10
6435   2D3D AE            div a, b
6436   2D3E FD 78         mov g, a
6437   2D40 11            mov a, b
6438   2D41 FD 27         mov b, g
6439   2D43 E4            pop a
6440   2D44 E7            pop d
6441   2D45 FD 43         mov [d], b
6442   2D47 29 EF 3B      mov b, [__bnarr] ; bnarr
6443   2D4A D7            push a
6444   2D4B 74            mov d, b
6445   2D4C DA            push d
6446   2D4D 26 00 00      mov b, 0
6447   2D50 E7            pop d
6448   2D51 10 02 00      mov a, 2
6449   2D54 AC            mul a, b
6450   2D55 5A            add d, b
6451   2D56 E4            pop a
6452   2D57 DA            push d
6453   2D58 29 EF 3B      mov b, [__bnarr] ; bnarr
6454   2D5B D7            push a
6455   2D5C 74            mov d, b
6456   2D5D DA            push d
6457   2D5E 26 00 00      mov b, 0
6458   2D61 E7            pop d
6459   2D62 10 02 00      mov a, 2
6460   2D65 AC            mul a, b
6461   2D66 5A            add d, b
6462   2D67 E4            pop a
6463   2D68 2A            mov b, [d]
6464   2D69 D7            push a
6465   2D6A 11            mov a, b
6466   2D6B 26 0A 00      mov b, 10
6467   2D6E AC            mul a, b
6468   2D6F E4            pop a
6469   2D70 E7            pop d
6470   2D71 FD 43         mov [d], b
6471   2D73 29 EF 3B      mov b, [__bnarr] ; bnarr
6472   2D76 D7            push a
6473   2D77 74            mov d, b
6474   2D78 DA            push d
6475   2D79 26 00 00      mov b, 0
6476   2D7C E7            pop d
6477   2D7D 10 02 00      mov a, 2
6478   2D80 AC            mul a, b
6479   2D81 5A            add d, b
6480   2D82 E4            pop a
6481   2D83 DA            push d
6482   2D84 29 CD 3C      mov b, [__subi] ; subi
6483   2D87 D7            push a
6484   2D88 11            mov a, b
6485   2D89 29 EF 3B      mov b, [__bnarr] ; bnarr
6486   2D8C D7            push a
6487   2D8D 74            mov d, b
6488   2D8E DA            push d
6489   2D8F 26 00 00      mov b, 0
6490   2D92 E7            pop d
6491   2D93 10 02 00      mov a, 2
6492   2D96 AC            mul a, b
6493   2D97 5A            add d, b
6494   2D98 E4            pop a
6495   2D99 2A            mov b, [d]
6496   2D9A 60            sub a, b
6497   2D9B 27            mov b, a
6498   2D9C E4            pop a
6499   2D9D E7            pop d
6500   2D9E FD 43         mov [d], b
6501   2DA0 29 EF 3B      mov b, [__bnarr] ; bnarr
6502   2DA3 D7            push a
6503   2DA4 74            mov d, b
6504   2DA5 DA            push d
6505   2DA6 26 00 00      mov b, 0
6506   2DA9 E7            pop d
6507   2DAA 10 02 00      mov a, 2
6508   2DAD AC            mul a, b
6509   2DAE 5A            add d, b
6510   2DAF E4            pop a
6511   2DB0 DA            push d
6512   2DB1 29 EF 3B      mov b, [__bnarr] ; bnarr
6513   2DB4 D7            push a
6514   2DB5 74            mov d, b
6515   2DB6 DA            push d
6516   2DB7 26 00 00      mov b, 0
6517   2DBA E7            pop d
6518   2DBB 10 02 00      mov a, 2
6519   2DBE AC            mul a, b
6520   2DBF 5A            add d, b
6521   2DC0 E4            pop a
6522   2DC1 2A            mov b, [d]
6523   2DC2 D7            push a
6524   2DC3 11            mov a, b
6525   2DC4 26 0A 00      mov b, 10
6526   2DC7 AC            mul a, b
6527   2DC8 E4            pop a
6528   2DC9 E7            pop d
6529   2DCA FD 43         mov [d], b
6530   2DCC F9            leave
6531   2DCD 09            ret
6532   2DCE             
6533   2DCE             adecrease:
6534   2DCE D2            push bp
6535   2DCF 9B            mov bp, sp
6536   2DD0             _for95_init:
6537   2DD0 26 00 00      mov b, 0
6538   2DD3 FD 42 C5 3C   mov [__divi], b
6539   2DD7             _for95_cond:
6540   2DD7 29 C5 3C      mov b, [__divi] ; divi
6541   2DDA D7            push a
6542   2DDB 11            mov a, b
6543   2DDC 26 0B 00      mov b, 11
6544   2DDF B0            cmp a, b
6545   2DE0 0E            lodflgs
6546   2DE1 2F            mov bl, al
6547   2DE2 FD A2 03      shr al, 3
6548   2DE5 FD A4 02      shr bl, 2
6549   2DE8 FD 87 01      and bl, %00000001
6550   2DEB 90            xor al, bl ; < (signed)
6551   2DEC 22 00         mov ah, 0
6552   2DEE 27            mov b, a
6553   2DEF E4            pop a
6554   2DF0 C0 00 00      cmp b, 0
6555   2DF3 C6 A9 2E      je _for95_exit
6556   2DF6             _for95_block:
6557   2DF6 29 D5 3B      mov b, [__anarr] ; anarr
6558   2DF9 D7            push a
6559   2DFA 74            mov d, b
6560   2DFB DA            push d
6561   2DFC 29 C5 3C      mov b, [__divi] ; divi
6562   2DFF D7            push a
6563   2E00 11            mov a, b
6564   2E01 26 01 00      mov b, 1
6565   2E04 54            add a, b
6566   2E05 27            mov b, a
6567   2E06 E4            pop a
6568   2E07 E7            pop d
6569   2E08 10 02 00      mov a, 2
6570   2E0B AC            mul a, b
6571   2E0C 5A            add d, b
6572   2E0D E4            pop a
6573   2E0E 2A            mov b, [d]
6574   2E0F D7            push a
6575   2E10 11            mov a, b
6576   2E11 26 0A 00      mov b, 10
6577   2E14 AE            div a, b
6578   2E15 FD 78         mov g, a
6579   2E17 11            mov a, b
6580   2E18 FD 27         mov b, g
6581   2E1A E4            pop a
6582   2E1B FD 42 CD 3C   mov [__subi], b
6583   2E1F 29 CD 3C      mov b, [__subi] ; subi
6584   2E22 D7            push a
6585   2E23 11            mov a, b
6586   2E24 26 0A 00      mov b, 10
6587   2E27 AC            mul a, b
6588   2E28 E4            pop a
6589   2E29 FD 42 CD 3C   mov [__subi], b
6590   2E2D 29 D5 3B      mov b, [__anarr] ; anarr
6591   2E30 D7            push a
6592   2E31 74            mov d, b
6593   2E32 DA            push d
6594   2E33 29 C5 3C      mov b, [__divi] ; divi
6595   2E36 D7            push a
6596   2E37 11            mov a, b
6597   2E38 26 01 00      mov b, 1
6598   2E3B 54            add a, b
6599   2E3C 27            mov b, a
6600   2E3D E4            pop a
6601   2E3E E7            pop d
6602   2E3F 10 02 00      mov a, 2
6603   2E42 AC            mul a, b
6604   2E43 5A            add d, b
6605   2E44 E4            pop a
6606   2E45 2A            mov b, [d]
6607   2E46 D7            push a
6608   2E47 11            mov a, b
6609   2E48 29 CD 3C      mov b, [__subi] ; subi
6610   2E4B 60            sub a, b
6611   2E4C 27            mov b, a
6612   2E4D E4            pop a
6613   2E4E FD 42 CD 3C   mov [__subi], b
6614   2E52 29 CD 3C      mov b, [__subi] ; subi
6615   2E55 D7            push a
6616   2E56 11            mov a, b
6617   2E57 26 0A 00      mov b, 10
6618   2E5A AC            mul a, b
6619   2E5B E4            pop a
6620   2E5C FD 42 CD 3C   mov [__subi], b
6621   2E60 29 D5 3B      mov b, [__anarr] ; anarr
6622   2E63 D7            push a
6623   2E64 74            mov d, b
6624   2E65 DA            push d
6625   2E66 29 C5 3C      mov b, [__divi] ; divi
6626   2E69 E7            pop d
6627   2E6A 10 02 00      mov a, 2
6628   2E6D AC            mul a, b
6629   2E6E 5A            add d, b
6630   2E6F E4            pop a
6631   2E70 DA            push d
6632   2E71 29 CD 3C      mov b, [__subi] ; subi
6633   2E74 D7            push a
6634   2E75 11            mov a, b
6635   2E76 29 D5 3B      mov b, [__anarr] ; anarr
6636   2E79 D7            push a
6637   2E7A 74            mov d, b
6638   2E7B DA            push d
6639   2E7C 29 C5 3C      mov b, [__divi] ; divi
6640   2E7F E7            pop d
6641   2E80 10 02 00      mov a, 2
6642   2E83 AC            mul a, b
6643   2E84 5A            add d, b
6644   2E85 E4            pop a
6645   2E86 2A            mov b, [d]
6646   2E87 D7            push a
6647   2E88 11            mov a, b
6648   2E89 26 0A 00      mov b, 10
6649   2E8C AE            div a, b
6650   2E8D FD 78         mov g, a
6651   2E8F 11            mov a, b
6652   2E90 FD 27         mov b, g
6653   2E92 E4            pop a
6654   2E93 54            add a, b
6655   2E94 27            mov b, a
6656   2E95 E4            pop a
6657   2E96 E7            pop d
6658   2E97 FD 43         mov [d], b
6659   2E99             _for95_update:
6660   2E99 29 C5 3C      mov b, [__divi] ; divi
6661   2E9C D7            push a
6662   2E9D 11            mov a, b
6663   2E9E FD 77         inc b
6664   2EA0 FD 42 C5 3C   mov [__divi], b
6665   2EA4 27            mov b, a
6666   2EA5 E4            pop a
6667   2EA6 0A D7 2D      jmp _for95_cond
6668   2EA9             _for95_exit:
6669   2EA9 29 D5 3B      mov b, [__anarr] ; anarr
6670   2EAC D7            push a
6671   2EAD 74            mov d, b
6672   2EAE DA            push d
6673   2EAF 26 0B 00      mov b, 11
6674   2EB2 E7            pop d
6675   2EB3 10 02 00      mov a, 2
6676   2EB6 AC            mul a, b
6677   2EB7 5A            add d, b
6678   2EB8 E4            pop a
6679   2EB9 DA            push d
6680   2EBA 29 D5 3B      mov b, [__anarr] ; anarr
6681   2EBD D7            push a
6682   2EBE 74            mov d, b
6683   2EBF DA            push d
6684   2EC0 26 0B 00      mov b, 11
6685   2EC3 E7            pop d
6686   2EC4 10 02 00      mov a, 2
6687   2EC7 AC            mul a, b
6688   2EC8 5A            add d, b
6689   2EC9 E4            pop a
6690   2ECA 2A            mov b, [d]
6691   2ECB D7            push a
6692   2ECC 11            mov a, b
6693   2ECD 26 0A 00      mov b, 10
6694   2ED0 AE            div a, b
6695   2ED1 FD 78         mov g, a
6696   2ED3 11            mov a, b
6697   2ED4 FD 27         mov b, g
6698   2ED6 E4            pop a
6699   2ED7 E7            pop d
6700   2ED8 FD 43         mov [d], b
6701   2EDA F9            leave
6702   2EDB 09            ret
6703   2EDC             
6704   2EDC             bdecrease:
6705   2EDC D2            push bp
6706   2EDD 9B            mov bp, sp
6707   2EDE             _for96_init:
6708   2EDE 26 00 00      mov b, 0
6709   2EE1 FD 42 C5 3C   mov [__divi], b
6710   2EE5             _for96_cond:
6711   2EE5 29 C5 3C      mov b, [__divi] ; divi
6712   2EE8 D7            push a
6713   2EE9 11            mov a, b
6714   2EEA 26 0B 00      mov b, 11
6715   2EED B0            cmp a, b
6716   2EEE 0E            lodflgs
6717   2EEF 2F            mov bl, al
6718   2EF0 FD A2 03      shr al, 3
6719   2EF3 FD A4 02      shr bl, 2
6720   2EF6 FD 87 01      and bl, %00000001
6721   2EF9 90            xor al, bl ; < (signed)
6722   2EFA 22 00         mov ah, 0
6723   2EFC 27            mov b, a
6724   2EFD E4            pop a
6725   2EFE C0 00 00      cmp b, 0
6726   2F01 C6 B7 2F      je _for96_exit
6727   2F04             _for96_block:
6728   2F04 29 EF 3B      mov b, [__bnarr] ; bnarr
6729   2F07 D7            push a
6730   2F08 74            mov d, b
6731   2F09 DA            push d
6732   2F0A 29 C5 3C      mov b, [__divi] ; divi
6733   2F0D D7            push a
6734   2F0E 11            mov a, b
6735   2F0F 26 01 00      mov b, 1
6736   2F12 54            add a, b
6737   2F13 27            mov b, a
6738   2F14 E4            pop a
6739   2F15 E7            pop d
6740   2F16 10 02 00      mov a, 2
6741   2F19 AC            mul a, b
6742   2F1A 5A            add d, b
6743   2F1B E4            pop a
6744   2F1C 2A            mov b, [d]
6745   2F1D D7            push a
6746   2F1E 11            mov a, b
6747   2F1F 26 0A 00      mov b, 10
6748   2F22 AE            div a, b
6749   2F23 FD 78         mov g, a
6750   2F25 11            mov a, b
6751   2F26 FD 27         mov b, g
6752   2F28 E4            pop a
6753   2F29 FD 42 CD 3C   mov [__subi], b
6754   2F2D 29 CD 3C      mov b, [__subi] ; subi
6755   2F30 D7            push a
6756   2F31 11            mov a, b
6757   2F32 26 0A 00      mov b, 10
6758   2F35 AC            mul a, b
6759   2F36 E4            pop a
6760   2F37 FD 42 CD 3C   mov [__subi], b
6761   2F3B 29 EF 3B      mov b, [__bnarr] ; bnarr
6762   2F3E D7            push a
6763   2F3F 74            mov d, b
6764   2F40 DA            push d
6765   2F41 29 C5 3C      mov b, [__divi] ; divi
6766   2F44 D7            push a
6767   2F45 11            mov a, b
6768   2F46 26 01 00      mov b, 1
6769   2F49 54            add a, b
6770   2F4A 27            mov b, a
6771   2F4B E4            pop a
6772   2F4C E7            pop d
6773   2F4D 10 02 00      mov a, 2
6774   2F50 AC            mul a, b
6775   2F51 5A            add d, b
6776   2F52 E4            pop a
6777   2F53 2A            mov b, [d]
6778   2F54 D7            push a
6779   2F55 11            mov a, b
6780   2F56 29 CD 3C      mov b, [__subi] ; subi
6781   2F59 60            sub a, b
6782   2F5A 27            mov b, a
6783   2F5B E4            pop a
6784   2F5C FD 42 CD 3C   mov [__subi], b
6785   2F60 29 CD 3C      mov b, [__subi] ; subi
6786   2F63 D7            push a
6787   2F64 11            mov a, b
6788   2F65 26 0A 00      mov b, 10
6789   2F68 AC            mul a, b
6790   2F69 E4            pop a
6791   2F6A FD 42 CD 3C   mov [__subi], b
6792   2F6E 29 EF 3B      mov b, [__bnarr] ; bnarr
6793   2F71 D7            push a
6794   2F72 74            mov d, b
6795   2F73 DA            push d
6796   2F74 29 C5 3C      mov b, [__divi] ; divi
6797   2F77 E7            pop d
6798   2F78 10 02 00      mov a, 2
6799   2F7B AC            mul a, b
6800   2F7C 5A            add d, b
6801   2F7D E4            pop a
6802   2F7E DA            push d
6803   2F7F 29 CD 3C      mov b, [__subi] ; subi
6804   2F82 D7            push a
6805   2F83 11            mov a, b
6806   2F84 29 EF 3B      mov b, [__bnarr] ; bnarr
6807   2F87 D7            push a
6808   2F88 74            mov d, b
6809   2F89 DA            push d
6810   2F8A 29 C5 3C      mov b, [__divi] ; divi
6811   2F8D E7            pop d
6812   2F8E 10 02 00      mov a, 2
6813   2F91 AC            mul a, b
6814   2F92 5A            add d, b
6815   2F93 E4            pop a
6816   2F94 2A            mov b, [d]
6817   2F95 D7            push a
6818   2F96 11            mov a, b
6819   2F97 26 0A 00      mov b, 10
6820   2F9A AE            div a, b
6821   2F9B FD 78         mov g, a
6822   2F9D 11            mov a, b
6823   2F9E FD 27         mov b, g
6824   2FA0 E4            pop a
6825   2FA1 54            add a, b
6826   2FA2 27            mov b, a
6827   2FA3 E4            pop a
6828   2FA4 E7            pop d
6829   2FA5 FD 43         mov [d], b
6830   2FA7             _for96_update:
6831   2FA7 29 C5 3C      mov b, [__divi] ; divi
6832   2FAA D7            push a
6833   2FAB 11            mov a, b
6834   2FAC FD 77         inc b
6835   2FAE FD 42 C5 3C   mov [__divi], b
6836   2FB2 27            mov b, a
6837   2FB3 E4            pop a
6838   2FB4 0A E5 2E      jmp _for96_cond
6839   2FB7             _for96_exit:
6840   2FB7 29 EF 3B      mov b, [__bnarr] ; bnarr
6841   2FBA D7            push a
6842   2FBB 74            mov d, b
6843   2FBC DA            push d
6844   2FBD 26 0B 00      mov b, 11
6845   2FC0 E7            pop d
6846   2FC1 10 02 00      mov a, 2
6847   2FC4 AC            mul a, b
6848   2FC5 5A            add d, b
6849   2FC6 E4            pop a
6850   2FC7 DA            push d
6851   2FC8 29 EF 3B      mov b, [__bnarr] ; bnarr
6852   2FCB D7            push a
6853   2FCC 74            mov d, b
6854   2FCD DA            push d
6855   2FCE 26 0B 00      mov b, 11
6856   2FD1 E7            pop d
6857   2FD2 10 02 00      mov a, 2
6858   2FD5 AC            mul a, b
6859   2FD6 5A            add d, b
6860   2FD7 E4            pop a
6861   2FD8 2A            mov b, [d]
6862   2FD9 D7            push a
6863   2FDA 11            mov a, b
6864   2FDB 26 0A 00      mov b, 10
6865   2FDE AE            div a, b
6866   2FDF FD 78         mov g, a
6867   2FE1 11            mov a, b
6868   2FE2 FD 27         mov b, g
6869   2FE4 E4            pop a
6870   2FE5 E7            pop d
6871   2FE6 FD 43         mov [d], b
6872   2FE8 F9            leave
6873   2FE9 09            ret
6874   2FEA             
6875   2FEA             protodividedby:
6876   2FEA D2            push bp
6877   2FEB 9B            mov bp, sp
6878   2FEC 26 00 00      mov b, 0
6879   2FEF FD 42 CF 3C   mov [__posflag], b
6880   2FF3 26 00 00      mov b, 0
6881   2FF6 FD 42 B9 3C   mov [__brshift], b
6882   2FFA 26 00 00      mov b, 0
6883   2FFD FD 42 BB 3C   mov [__blshift], b
6884   3001 26 00 00      mov b, 0
6885   3004 FD 42 BD 3C   mov [__alshift], b
6886   3008 26 00 00      mov b, 0
6887   300B FD 42 BF 3C   mov [__divcounter1], b
6888   300F 26 00 00      mov b, 0
6889   3012 FD 42 C1 3C   mov [__divcounter2], b
6890   3016 26 00 00      mov b, 0
6891   3019 FD 42 C3 3C   mov [__segmentcounter], b
6892   301D 26 01 00      mov b, 1
6893   3020 FD 42 C7 3C   mov [__allzeroes], b
6894   3024             _for97_init:
6895   3024 26 00 00      mov b, 0
6896   3027 FD 42 C5 3C   mov [__divi], b
6897   302B             _for97_cond:
6898   302B 29 C5 3C      mov b, [__divi] ; divi
6899   302E D7            push a
6900   302F 11            mov a, b
6901   3030 26 0C 00      mov b, 12
6902   3033 B0            cmp a, b
6903   3034 0E            lodflgs
6904   3035 2F            mov bl, al
6905   3036 FD A2 03      shr al, 3
6906   3039 FD A4 02      shr bl, 2
6907   303C FD 87 01      and bl, %00000001
6908   303F 90            xor al, bl ; < (signed)
6909   3040 22 00         mov ah, 0
6910   3042 27            mov b, a
6911   3043 E4            pop a
6912   3044 C0 00 00      cmp b, 0
6913   3047 C6 B8 30      je _for97_exit
6914   304A             _for97_block:
6915   304A 29 3D 3C      mov b, [__cnarr] ; cnarr
6916   304D D7            push a
6917   304E 74            mov d, b
6918   304F DA            push d
6919   3050 29 C5 3C      mov b, [__divi] ; divi
6920   3053 E7            pop d
6921   3054 10 02 00      mov a, 2
6922   3057 AC            mul a, b
6923   3058 5A            add d, b
6924   3059 E4            pop a
6925   305A DA            push d
6926   305B 26 00 00      mov b, 0
6927   305E E7            pop d
6928   305F FD 43         mov [d], b
6929   3061 29 89 3C      mov b, [__divres] ; divres
6930   3064 D7            push a
6931   3065 74            mov d, b
6932   3066 DA            push d
6933   3067 29 C5 3C      mov b, [__divi] ; divi
6934   306A E7            pop d
6935   306B 10 02 00      mov a, 2
6936   306E AC            mul a, b
6937   306F 5A            add d, b
6938   3070 E4            pop a
6939   3071 DA            push d
6940   3072 26 00 00      mov b, 0
6941   3075 E7            pop d
6942   3076 FD 43         mov [d], b
6943   3078             _if98_cond:
6944   3078 29 EF 3B      mov b, [__bnarr] ; bnarr
6945   307B D7            push a
6946   307C 74            mov d, b
6947   307D DA            push d
6948   307E 29 C5 3C      mov b, [__divi] ; divi
6949   3081 E7            pop d
6950   3082 10 02 00      mov a, 2
6951   3085 AC            mul a, b
6952   3086 5A            add d, b
6953   3087 E4            pop a
6954   3088 2A            mov b, [d]
6955   3089 D7            push a
6956   308A 11            mov a, b
6957   308B 26 00 00      mov b, 0
6958   308E B0            cmp a, b
6959   308F 0E            lodflgs
6960   3090 87 01         and al, %00000001
6961   3092 8F 01         xor al, %00000001 ; !=
6962   3094 22 00         mov ah, 0
6963   3096 27            mov b, a
6964   3097 E4            pop a
6965   3098 C0 00 00      cmp b, 0
6966   309B C6 A8 30      je _if98_exit
6967   309E             _if98_true:
6968   309E 26 00 00      mov b, 0
6969   30A1 FD 42 C7 3C   mov [__allzeroes], b
6970   30A5 0A A8 30      jmp _if98_exit
6971   30A8             _if98_exit:
6972   30A8             _for97_update:
6973   30A8 29 C5 3C      mov b, [__divi] ; divi
6974   30AB D7            push a
6975   30AC 11            mov a, b
6976   30AD FD 77         inc b
6977   30AF FD 42 C5 3C   mov [__divi], b
6978   30B3 27            mov b, a
6979   30B4 E4            pop a
6980   30B5 0A 2B 30      jmp _for97_cond
6981   30B8             _for97_exit:
6982   30B8             _if99_cond:
6983   30B8 29 C7 3C      mov b, [__allzeroes] ; allzeroes
6984   30BB D7            push a
6985   30BC 11            mov a, b
6986   30BD 26 01 00      mov b, 1
6987   30C0 B0            cmp a, b
6988   30C1 0E            lodflgs
6989   30C2 87 01         and al, %00000001 ; ==
6990   30C4 22 00         mov ah, 0
6991   30C6 27            mov b, a
6992   30C7 E4            pop a
6993   30C8 C0 00 00      cmp b, 0
6994   30CB C6 D3 30      je _if99_exit
6995   30CE             _if99_true:
6996   30CE F9            leave
6997   30CF 09            ret
6998   30D0 0A D3 30      jmp _if99_exit
6999   30D3             _if99_exit:
7000   30D3             _while100_cond:
7001   30D3 29 EF 3B      mov b, [__bnarr] ; bnarr
7002   30D6 D7            push a
7003   30D7 74            mov d, b
7004   30D8 DA            push d
7005   30D9 26 0B 00      mov b, 11
7006   30DC E7            pop d
7007   30DD 10 02 00      mov a, 2
7008   30E0 AC            mul a, b
7009   30E1 5A            add d, b
7010   30E2 E4            pop a
7011   30E3 2A            mov b, [d]
7012   30E4 D7            push a
7013   30E5 11            mov a, b
7014   30E6 26 00 00      mov b, 0
7015   30E9 B0            cmp a, b
7016   30EA 0E            lodflgs
7017   30EB 87 01         and al, %00000001 ; ==
7018   30ED 22 00         mov ah, 0
7019   30EF 27            mov b, a
7020   30F0 E4            pop a
7021   30F1 C0 00 00      cmp b, 0
7022   30F4 C6 8D 31      je _while100_exit
7023   30F7             _while100_block:
7024   30F7             _for101_init:
7025   30F7 26 0B 00      mov b, 11
7026   30FA FD 42 C5 3C   mov [__divi], b
7027   30FE             _for101_cond:
7028   30FE 29 C5 3C      mov b, [__divi] ; divi
7029   3101 D7            push a
7030   3102 11            mov a, b
7031   3103 26 00 00      mov b, 0
7032   3106 B0            cmp a, b
7033   3107 0E            lodflgs
7034   3108 2F            mov bl, al
7035   3109 FD 78         mov g, a
7036   310B FD A2 03      shr al, 3
7037   310E FD A4 02      shr bl, 2
7038   3111 FD 87 01      and bl, %00000001
7039   3114 90            xor al, bl
7040   3115 FD 27         mov b, g
7041   3117 FD 87 01      and bl, %00000001
7042   311A 8C            or al, bl
7043   311B 8F 01         xor al, %00000001 ; > (signed)
7044   311D 22 00         mov ah, 0
7045   311F 27            mov b, a
7046   3120 E4            pop a
7047   3121 C0 00 00      cmp b, 0
7048   3124 C6 64 31      je _for101_exit
7049   3127             _for101_block:
7050   3127 29 EF 3B      mov b, [__bnarr] ; bnarr
7051   312A D7            push a
7052   312B 74            mov d, b
7053   312C DA            push d
7054   312D 29 C5 3C      mov b, [__divi] ; divi
7055   3130 E7            pop d
7056   3131 10 02 00      mov a, 2
7057   3134 AC            mul a, b
7058   3135 5A            add d, b
7059   3136 E4            pop a
7060   3137 DA            push d
7061   3138 29 EF 3B      mov b, [__bnarr] ; bnarr
7062   313B D7            push a
7063   313C 74            mov d, b
7064   313D DA            push d
7065   313E 29 C5 3C      mov b, [__divi] ; divi
7066   3141 D7            push a
7067   3142 11            mov a, b
7068   3143 26 01 00      mov b, 1
7069   3146 60            sub a, b
7070   3147 27            mov b, a
7071   3148 E4            pop a
7072   3149 E7            pop d
7073   314A 10 02 00      mov a, 2
7074   314D AC            mul a, b
7075   314E 5A            add d, b
7076   314F E4            pop a
7077   3150 2A            mov b, [d]
7078   3151 E7            pop d
7079   3152 FD 43         mov [d], b
7080   3154             _for101_update:
7081   3154 29 C5 3C      mov b, [__divi] ; divi
7082   3157 D7            push a
7083   3158 11            mov a, b
7084   3159 FD 7D         dec b
7085   315B FD 42 C5 3C   mov [__divi], b
7086   315F 27            mov b, a
7087   3160 E4            pop a
7088   3161 0A FE 30      jmp _for101_cond
7089   3164             _for101_exit:
7090   3164 29 EF 3B      mov b, [__bnarr] ; bnarr
7091   3167 D7            push a
7092   3168 74            mov d, b
7093   3169 DA            push d
7094   316A 26 00 00      mov b, 0
7095   316D E7            pop d
7096   316E 10 02 00      mov a, 2
7097   3171 AC            mul a, b
7098   3172 5A            add d, b
7099   3173 E4            pop a
7100   3174 DA            push d
7101   3175 26 00 00      mov b, 0
7102   3178 E7            pop d
7103   3179 FD 43         mov [d], b
7104   317B 29 BB 3C      mov b, [__blshift] ; blshift
7105   317E D7            push a
7106   317F 11            mov a, b
7107   3180 26 02 00      mov b, 2
7108   3183 54            add a, b
7109   3184 27            mov b, a
7110   3185 E4            pop a
7111   3186 FD 42 BB 3C   mov [__blshift], b
7112   318A 0A D3 30      jmp _while100_cond
7113   318D             _while100_exit:
7114   318D 26 01 00      mov b, 1
7115   3190 FD 42 C7 3C   mov [__allzeroes], b
7116   3194             _for102_init:
7117   3194 26 00 00      mov b, 0
7118   3197 FD 42 C5 3C   mov [__divi], b
7119   319B             _for102_cond:
7120   319B 29 C5 3C      mov b, [__divi] ; divi
7121   319E D7            push a
7122   319F 11            mov a, b
7123   31A0 26 0C 00      mov b, 12
7124   31A3 B0            cmp a, b
7125   31A4 0E            lodflgs
7126   31A5 2F            mov bl, al
7127   31A6 FD A2 03      shr al, 3
7128   31A9 FD A4 02      shr bl, 2
7129   31AC FD 87 01      and bl, %00000001
7130   31AF 90            xor al, bl ; < (signed)
7131   31B0 22 00         mov ah, 0
7132   31B2 27            mov b, a
7133   31B3 E4            pop a
7134   31B4 C0 00 00      cmp b, 0
7135   31B7 C6 FA 31      je _for102_exit
7136   31BA             _for102_block:
7137   31BA             _if103_cond:
7138   31BA 29 D5 3B      mov b, [__anarr] ; anarr
7139   31BD D7            push a
7140   31BE 74            mov d, b
7141   31BF DA            push d
7142   31C0 29 C5 3C      mov b, [__divi] ; divi
7143   31C3 E7            pop d
7144   31C4 10 02 00      mov a, 2
7145   31C7 AC            mul a, b
7146   31C8 5A            add d, b
7147   31C9 E4            pop a
7148   31CA 2A            mov b, [d]
7149   31CB D7            push a
7150   31CC 11            mov a, b
7151   31CD 26 00 00      mov b, 0
7152   31D0 B0            cmp a, b
7153   31D1 0E            lodflgs
7154   31D2 87 01         and al, %00000001
7155   31D4 8F 01         xor al, %00000001 ; !=
7156   31D6 22 00         mov ah, 0
7157   31D8 27            mov b, a
7158   31D9 E4            pop a
7159   31DA C0 00 00      cmp b, 0
7160   31DD C6 EA 31      je _if103_exit
7161   31E0             _if103_true:
7162   31E0 26 00 00      mov b, 0
7163   31E3 FD 42 C7 3C   mov [__allzeroes], b
7164   31E7 0A EA 31      jmp _if103_exit
7165   31EA             _if103_exit:
7166   31EA             _for102_update:
7167   31EA 29 C5 3C      mov b, [__divi] ; divi
7168   31ED D7            push a
7169   31EE 11            mov a, b
7170   31EF FD 77         inc b
7171   31F1 FD 42 C5 3C   mov [__divi], b
7172   31F5 27            mov b, a
7173   31F6 E4            pop a
7174   31F7 0A 9B 31      jmp _for102_cond
7175   31FA             _for102_exit:
7176   31FA             _if104_cond:
7177   31FA 29 C7 3C      mov b, [__allzeroes] ; allzeroes
7178   31FD D7            push a
7179   31FE 11            mov a, b
7180   31FF 26 01 00      mov b, 1
7181   3202 B0            cmp a, b
7182   3203 0E            lodflgs
7183   3204 87 01         and al, %00000001 ; ==
7184   3206 22 00         mov ah, 0
7185   3208 27            mov b, a
7186   3209 E4            pop a
7187   320A C0 00 00      cmp b, 0
7188   320D C6 15 32      je _if104_exit
7189   3210             _if104_true:
7190   3210 F9            leave
7191   3211 09            ret
7192   3212 0A 15 32      jmp _if104_exit
7193   3215             _if104_exit:
7194   3215             _while105_cond:
7195   3215 29 D5 3B      mov b, [__anarr] ; anarr
7196   3218 D7            push a
7197   3219 74            mov d, b
7198   321A DA            push d
7199   321B 26 0B 00      mov b, 11
7200   321E E7            pop d
7201   321F 10 02 00      mov a, 2
7202   3222 AC            mul a, b
7203   3223 5A            add d, b
7204   3224 E4            pop a
7205   3225 2A            mov b, [d]
7206   3226 D7            push a
7207   3227 11            mov a, b
7208   3228 26 00 00      mov b, 0
7209   322B B0            cmp a, b
7210   322C 0E            lodflgs
7211   322D 87 01         and al, %00000001 ; ==
7212   322F 22 00         mov ah, 0
7213   3231 27            mov b, a
7214   3232 E4            pop a
7215   3233 C0 00 00      cmp b, 0
7216   3236 C6 D5 32      je _while105_exit
7217   3239             _while105_block:
7218   3239             _for106_init:
7219   3239 26 00 00      mov b, 0
7220   323C FD 42 C5 3C   mov [__divi], b
7221   3240             _for106_cond:
7222   3240 29 C5 3C      mov b, [__divi] ; divi
7223   3243 D7            push a
7224   3244 11            mov a, b
7225   3245 26 0B 00      mov b, 11
7226   3248 B0            cmp a, b
7227   3249 0E            lodflgs
7228   324A 2F            mov bl, al
7229   324B FD A2 03      shr al, 3
7230   324E FD A4 02      shr bl, 2
7231   3251 FD 87 01      and bl, %00000001
7232   3254 90            xor al, bl ; < (signed)
7233   3255 22 00         mov ah, 0
7234   3257 27            mov b, a
7235   3258 E4            pop a
7236   3259 C0 00 00      cmp b, 0
7237   325C C6 AC 32      je _for106_exit
7238   325F             _for106_block:
7239   325F 29 D5 3B      mov b, [__anarr] ; anarr
7240   3262 D7            push a
7241   3263 74            mov d, b
7242   3264 DA            push d
7243   3265 26 0B 00      mov b, 11
7244   3268 D7            push a
7245   3269 11            mov a, b
7246   326A 29 C5 3C      mov b, [__divi] ; divi
7247   326D 60            sub a, b
7248   326E 27            mov b, a
7249   326F E4            pop a
7250   3270 E7            pop d
7251   3271 10 02 00      mov a, 2
7252   3274 AC            mul a, b
7253   3275 5A            add d, b
7254   3276 E4            pop a
7255   3277 DA            push d
7256   3278 29 D5 3B      mov b, [__anarr] ; anarr
7257   327B D7            push a
7258   327C 74            mov d, b
7259   327D DA            push d
7260   327E 26 0B 00      mov b, 11
7261   3281 D7            push a
7262   3282 11            mov a, b
7263   3283 29 C5 3C      mov b, [__divi] ; divi
7264   3286 60            sub a, b
7265   3287 27            mov b, a
7266   3288 E4            pop a
7267   3289 D7            push a
7268   328A 11            mov a, b
7269   328B 26 01 00      mov b, 1
7270   328E 60            sub a, b
7271   328F 27            mov b, a
7272   3290 E4            pop a
7273   3291 E7            pop d
7274   3292 10 02 00      mov a, 2
7275   3295 AC            mul a, b
7276   3296 5A            add d, b
7277   3297 E4            pop a
7278   3298 2A            mov b, [d]
7279   3299 E7            pop d
7280   329A FD 43         mov [d], b
7281   329C             _for106_update:
7282   329C 29 C5 3C      mov b, [__divi] ; divi
7283   329F D7            push a
7284   32A0 11            mov a, b
7285   32A1 FD 77         inc b
7286   32A3 FD 42 C5 3C   mov [__divi], b
7287   32A7 27            mov b, a
7288   32A8 E4            pop a
7289   32A9 0A 40 32      jmp _for106_cond
7290   32AC             _for106_exit:
7291   32AC 29 D5 3B      mov b, [__anarr] ; anarr
7292   32AF D7            push a
7293   32B0 74            mov d, b
7294   32B1 DA            push d
7295   32B2 26 00 00      mov b, 0
7296   32B5 E7            pop d
7297   32B6 10 02 00      mov a, 2
7298   32B9 AC            mul a, b
7299   32BA 5A            add d, b
7300   32BB E4            pop a
7301   32BC DA            push d
7302   32BD 26 00 00      mov b, 0
7303   32C0 E7            pop d
7304   32C1 FD 43         mov [d], b
7305   32C3 29 BD 3C      mov b, [__alshift] ; alshift
7306   32C6 D7            push a
7307   32C7 11            mov a, b
7308   32C8 26 02 00      mov b, 2
7309   32CB 54            add a, b
7310   32CC 27            mov b, a
7311   32CD E4            pop a
7312   32CE FD 42 BD 3C   mov [__alshift], b
7313   32D2 0A 15 32      jmp _while105_cond
7314   32D5             _while105_exit:
7315   32D5             _if107_cond:
7316   32D5 29 D5 3B      mov b, [__anarr] ; anarr
7317   32D8 D7            push a
7318   32D9 74            mov d, b
7319   32DA DA            push d
7320   32DB 26 0B 00      mov b, 11
7321   32DE E7            pop d
7322   32DF 10 02 00      mov a, 2
7323   32E2 AC            mul a, b
7324   32E3 5A            add d, b
7325   32E4 E4            pop a
7326   32E5 2A            mov b, [d]
7327   32E6 D7            push a
7328   32E7 11            mov a, b
7329   32E8 26 0A 00      mov b, 10
7330   32EB B0            cmp a, b
7331   32EC 0E            lodflgs
7332   32ED 2F            mov bl, al
7333   32EE FD A2 03      shr al, 3
7334   32F1 FD A4 02      shr bl, 2
7335   32F4 FD 87 01      and bl, %00000001
7336   32F7 90            xor al, bl ; < (signed)
7337   32F8 22 00         mov ah, 0
7338   32FA 27            mov b, a
7339   32FB E4            pop a
7340   32FC C0 00 00      cmp b, 0
7341   32FF C6 15 33      je _if107_exit
7342   3302             _if107_true:
7343   3302 29 BD 3C      mov b, [__alshift] ; alshift
7344   3305 D7            push a
7345   3306 11            mov a, b
7346   3307 FD 77         inc b
7347   3309 FD 42 BD 3C   mov [__alshift], b
7348   330D 27            mov b, a
7349   330E E4            pop a
7350   330F 07 84 29      call aincrease
7351   3312 0A 15 33      jmp _if107_exit
7352   3315             _if107_exit:
7353   3315             _if108_cond:
7354   3315 29 EF 3B      mov b, [__bnarr] ; bnarr
7355   3318 D7            push a
7356   3319 74            mov d, b
7357   331A DA            push d
7358   331B 26 0B 00      mov b, 11
7359   331E E7            pop d
7360   331F 10 02 00      mov a, 2
7361   3322 AC            mul a, b
7362   3323 5A            add d, b
7363   3324 E4            pop a
7364   3325 2A            mov b, [d]
7365   3326 D7            push a
7366   3327 11            mov a, b
7367   3328 26 0A 00      mov b, 10
7368   332B B0            cmp a, b
7369   332C 0E            lodflgs
7370   332D 2F            mov bl, al
7371   332E FD A2 03      shr al, 3
7372   3331 FD A4 02      shr bl, 2
7373   3334 FD 87 01      and bl, %00000001
7374   3337 90            xor al, bl
7375   3338 8F 01         xor al, %00000001 ; >= (signed)
7376   333A 22 00         mov ah, 0
7377   333C 27            mov b, a
7378   333D E4            pop a
7379   333E C0 00 00      cmp b, 0
7380   3341 C6 57 33      je _if108_exit
7381   3344             _if108_true:
7382   3344 29 B9 3C      mov b, [__brshift] ; brshift
7383   3347 D7            push a
7384   3348 11            mov a, b
7385   3349 FD 77         inc b
7386   334B FD 42 B9 3C   mov [__brshift], b
7387   334F 27            mov b, a
7388   3350 E4            pop a
7389   3351 07 DC 2E      call bdecrease
7390   3354 0A 57 33      jmp _if108_exit
7391   3357             _if108_exit:
7392   3357 26 00 00      mov b, 0
7393   335A FD 42 C3 3C   mov [__segmentcounter], b
7394   335E 26 00 00      mov b, 0
7395   3361 FD 42 BF 3C   mov [__divcounter1], b
7396   3365 26 00 00      mov b, 0
7397   3368 FD 42 C1 3C   mov [__divcounter2], b
7398   336C 26 00 00      mov b, 0
7399   336F FD 42 CF 3C   mov [__posflag], b
7400   3373             _if109_cond:
7401   3373 29 D5 3B      mov b, [__anarr] ; anarr
7402   3376 D7            push a
7403   3377 74            mov d, b
7404   3378 DA            push d
7405   3379 26 0B 00      mov b, 11
7406   337C E7            pop d
7407   337D 10 02 00      mov a, 2
7408   3380 AC            mul a, b
7409   3381 5A            add d, b
7410   3382 E4            pop a
7411   3383 2A            mov b, [d]
7412   3384 D7            push a
7413   3385 11            mov a, b
7414   3386 29 EF 3B      mov b, [__bnarr] ; bnarr
7415   3389 D7            push a
7416   338A 74            mov d, b
7417   338B DA            push d
7418   338C 26 0B 00      mov b, 11
7419   338F E7            pop d
7420   3390 10 02 00      mov a, 2
7421   3393 AC            mul a, b
7422   3394 5A            add d, b
7423   3395 E4            pop a
7424   3396 2A            mov b, [d]
7425   3397 D7            push a
7426   3398 11            mov a, b
7427   3399 26 0A 00      mov b, 10
7428   339C AC            mul a, b
7429   339D E4            pop a
7430   339E B0            cmp a, b
7431   339F 0E            lodflgs
7432   33A0 2F            mov bl, al
7433   33A1 FD 78         mov g, a
7434   33A3 FD A2 03      shr al, 3
7435   33A6 FD A4 02      shr bl, 2
7436   33A9 FD 87 01      and bl, %00000001
7437   33AC 90            xor al, bl
7438   33AD FD 27         mov b, g
7439   33AF FD 87 01      and bl, %00000001
7440   33B2 8C            or al, bl
7441   33B3 8F 01         xor al, %00000001 ; > (signed)
7442   33B5 22 00         mov ah, 0
7443   33B7 27            mov b, a
7444   33B8 E4            pop a
7445   33B9 C0 00 00      cmp b, 0
7446   33BC C6 D2 33      je _if109_exit
7447   33BF             _if109_true:
7448   33BF 29 BB 3C      mov b, [__blshift] ; blshift
7449   33C2 D7            push a
7450   33C3 11            mov a, b
7451   33C4 FD 77         inc b
7452   33C6 FD 42 BB 3C   mov [__blshift], b
7453   33CA 27            mov b, a
7454   33CB E4            pop a
7455   33CC 07 CE 2D      call adecrease
7456   33CF 0A D2 33      jmp _if109_exit
7457   33D2             _if109_exit:
7458   33D2             _while110_cond:
7459   33D2 29 C3 3C      mov b, [__segmentcounter] ; segmentcounter
7460   33D5 D7            push a
7461   33D6 11            mov a, b
7462   33D7 26 0C 00      mov b, 12
7463   33DA B0            cmp a, b
7464   33DB 0E            lodflgs
7465   33DC 2F            mov bl, al
7466   33DD FD A2 03      shr al, 3
7467   33E0 FD A4 02      shr bl, 2
7468   33E3 FD 87 01      and bl, %00000001
7469   33E6 90            xor al, bl ; < (signed)
7470   33E7 22 00         mov ah, 0
7471   33E9 27            mov b, a
7472   33EA E4            pop a
7473   33EB C0 00 00      cmp b, 0
7474   33EE C6 BD 35      je _while110_exit
7475   33F1             _while110_block:
7476   33F1 07 75 1A      call checkabsabsize
7477   33F4             _while111_cond:
7478   33F4 29 A1 3C      mov b, [__ageb] ; ageb
7479   33F7 D7            push a
7480   33F8 11            mov a, b
7481   33F9 26 01 00      mov b, 1
7482   33FC B0            cmp a, b
7483   33FD 0E            lodflgs
7484   33FE 87 01         and al, %00000001 ; ==
7485   3400 22 00         mov ah, 0
7486   3402 27            mov b, a
7487   3403 E4            pop a
7488   3404 C0 00 00      cmp b, 0
7489   3407 C6 92 34      je _while111_exit
7490   340A             _while111_block:
7491   340A 07 E5 1C      call protominus
7492   340D 29 BF 3C      mov b, [__divcounter1] ; divcounter1
7493   3410 D7            push a
7494   3411 11            mov a, b
7495   3412 FD 77         inc b
7496   3414 FD 42 BF 3C   mov [__divcounter1], b
7497   3418 27            mov b, a
7498   3419 E4            pop a
7499   341A             _for112_init:
7500   341A 26 00 00      mov b, 0
7501   341D FD 42 C5 3C   mov [__divi], b
7502   3421             _for112_cond:
7503   3421 29 C5 3C      mov b, [__divi] ; divi
7504   3424 D7            push a
7505   3425 11            mov a, b
7506   3426 26 0C 00      mov b, 12
7507   3429 B0            cmp a, b
7508   342A 0E            lodflgs
7509   342B 2F            mov bl, al
7510   342C FD A2 03      shr al, 3
7511   342F FD A4 02      shr bl, 2
7512   3432 FD 87 01      and bl, %00000001
7513   3435 90            xor al, bl ; < (signed)
7514   3436 22 00         mov ah, 0
7515   3438 27            mov b, a
7516   3439 E4            pop a
7517   343A C0 00 00      cmp b, 0
7518   343D C6 8C 34      je _for112_exit
7519   3440             _for112_block:
7520   3440 29 D5 3B      mov b, [__anarr] ; anarr
7521   3443 D7            push a
7522   3444 74            mov d, b
7523   3445 DA            push d
7524   3446 29 C5 3C      mov b, [__divi] ; divi
7525   3449 E7            pop d
7526   344A 10 02 00      mov a, 2
7527   344D AC            mul a, b
7528   344E 5A            add d, b
7529   344F E4            pop a
7530   3450 DA            push d
7531   3451 29 3D 3C      mov b, [__cnarr] ; cnarr
7532   3454 D7            push a
7533   3455 74            mov d, b
7534   3456 DA            push d
7535   3457 29 C5 3C      mov b, [__divi] ; divi
7536   345A E7            pop d
7537   345B 10 02 00      mov a, 2
7538   345E AC            mul a, b
7539   345F 5A            add d, b
7540   3460 E4            pop a
7541   3461 2A            mov b, [d]
7542   3462 E7            pop d
7543   3463 FD 43         mov [d], b
7544   3465 29 3D 3C      mov b, [__cnarr] ; cnarr
7545   3468 D7            push a
7546   3469 74            mov d, b
7547   346A DA            push d
7548   346B 29 C5 3C      mov b, [__divi] ; divi
7549   346E E7            pop d
7550   346F 10 02 00      mov a, 2
7551   3472 AC            mul a, b
7552   3473 5A            add d, b
7553   3474 E4            pop a
7554   3475 DA            push d
7555   3476 26 00 00      mov b, 0
7556   3479 E7            pop d
7557   347A FD 43         mov [d], b
7558   347C             _for112_update:
7559   347C 29 C5 3C      mov b, [__divi] ; divi
7560   347F D7            push a
7561   3480 11            mov a, b
7562   3481 FD 77         inc b
7563   3483 FD 42 C5 3C   mov [__divi], b
7564   3487 27            mov b, a
7565   3488 E4            pop a
7566   3489 0A 21 34      jmp _for112_cond
7567   348C             _for112_exit:
7568   348C 07 75 1A      call checkabsabsize
7569   348F 0A F4 33      jmp _while111_cond
7570   3492             _while111_exit:
7571   3492 29 CF 3C      mov b, [__posflag] ; posflag
7572   3495 D7            push a
7573   3496 11            mov a, b
7574   3497 FD 77         inc b
7575   3499 FD 42 CF 3C   mov [__posflag], b
7576   349D 27            mov b, a
7577   349E E4            pop a
7578   349F             _if113_cond:
7579   349F 29 CF 3C      mov b, [__posflag] ; posflag
7580   34A2 D7            push a
7581   34A3 11            mov a, b
7582   34A4 26 01 00      mov b, 1
7583   34A7 B0            cmp a, b
7584   34A8 0E            lodflgs
7585   34A9 87 01         and al, %00000001 ; ==
7586   34AB 22 00         mov ah, 0
7587   34AD 27            mov b, a
7588   34AE E4            pop a
7589   34AF C0 00 00      cmp b, 0
7590   34B2 C6 CD 34      je _if113_exit
7591   34B5             _if113_true:
7592   34B5 29 BF 3C      mov b, [__divcounter1] ; divcounter1
7593   34B8 D7            push a
7594   34B9 11            mov a, b
7595   34BA 26 0A 00      mov b, 10
7596   34BD AC            mul a, b
7597   34BE E4            pop a
7598   34BF FD 42 C1 3C   mov [__divcounter2], b
7599   34C3 26 00 00      mov b, 0
7600   34C6 FD 42 BF 3C   mov [__divcounter1], b
7601   34CA 0A CD 34      jmp _if113_exit
7602   34CD             _if113_exit:
7603   34CD 07 84 29      call aincrease
7604   34D0             _if114_cond:
7605   34D0 29 CF 3C      mov b, [__posflag] ; posflag
7606   34D3 D7            push a
7607   34D4 11            mov a, b
7608   34D5 26 02 00      mov b, 2
7609   34D8 B0            cmp a, b
7610   34D9 0E            lodflgs
7611   34DA 87 01         and al, %00000001 ; ==
7612   34DC 22 00         mov ah, 0
7613   34DE 27            mov b, a
7614   34DF E4            pop a
7615   34E0 C0 00 00      cmp b, 0
7616   34E3 C6 BA 35      je _if114_exit
7617   34E6             _if114_true:
7618   34E6 26 00 00      mov b, 0
7619   34E9 FD 42 CF 3C   mov [__posflag], b
7620   34ED 29 89 3C      mov b, [__divres] ; divres
7621   34F0 D7            push a
7622   34F1 74            mov d, b
7623   34F2 DA            push d
7624   34F3 26 0B 00      mov b, 11
7625   34F6 D7            push a
7626   34F7 11            mov a, b
7627   34F8 29 C3 3C      mov b, [__segmentcounter] ; segmentcounter
7628   34FB 60            sub a, b
7629   34FC 27            mov b, a
7630   34FD E4            pop a
7631   34FE E7            pop d
7632   34FF 10 02 00      mov a, 2
7633   3502 AC            mul a, b
7634   3503 5A            add d, b
7635   3504 E4            pop a
7636   3505 DA            push d
7637   3506 29 C1 3C      mov b, [__divcounter2] ; divcounter2
7638   3509 D7            push a
7639   350A 11            mov a, b
7640   350B 29 BF 3C      mov b, [__divcounter1] ; divcounter1
7641   350E 54            add a, b
7642   350F 27            mov b, a
7643   3510 E4            pop a
7644   3511 E7            pop d
7645   3512 FD 43         mov [d], b
7646   3514 26 00 00      mov b, 0
7647   3517 FD 42 BF 3C   mov [__divcounter1], b
7648   351B 26 00 00      mov b, 0
7649   351E FD 42 C1 3C   mov [__divcounter2], b
7650   3522 29 C3 3C      mov b, [__segmentcounter] ; segmentcounter
7651   3525 D7            push a
7652   3526 11            mov a, b
7653   3527 FD 77         inc b
7654   3529 FD 42 C3 3C   mov [__segmentcounter], b
7655   352D 27            mov b, a
7656   352E E4            pop a
7657   352F 26 01 00      mov b, 1
7658   3532 FD 42 C7 3C   mov [__allzeroes], b
7659   3536             _for115_init:
7660   3536 26 00 00      mov b, 0
7661   3539 FD 42 C5 3C   mov [__divi], b
7662   353D             _for115_cond:
7663   353D 29 C5 3C      mov b, [__divi] ; divi
7664   3540 D7            push a
7665   3541 11            mov a, b
7666   3542 26 0C 00      mov b, 12
7667   3545 B0            cmp a, b
7668   3546 0E            lodflgs
7669   3547 2F            mov bl, al
7670   3548 FD A2 03      shr al, 3
7671   354B FD A4 02      shr bl, 2
7672   354E FD 87 01      and bl, %00000001
7673   3551 90            xor al, bl ; < (signed)
7674   3552 22 00         mov ah, 0
7675   3554 27            mov b, a
7676   3555 E4            pop a
7677   3556 C0 00 00      cmp b, 0
7678   3559 C6 9C 35      je _for115_exit
7679   355C             _for115_block:
7680   355C             _if116_cond:
7681   355C 29 D5 3B      mov b, [__anarr] ; anarr
7682   355F D7            push a
7683   3560 74            mov d, b
7684   3561 DA            push d
7685   3562 29 C5 3C      mov b, [__divi] ; divi
7686   3565 E7            pop d
7687   3566 10 02 00      mov a, 2
7688   3569 AC            mul a, b
7689   356A 5A            add d, b
7690   356B E4            pop a
7691   356C 2A            mov b, [d]
7692   356D D7            push a
7693   356E 11            mov a, b
7694   356F 26 00 00      mov b, 0
7695   3572 B0            cmp a, b
7696   3573 0E            lodflgs
7697   3574 87 01         and al, %00000001
7698   3576 8F 01         xor al, %00000001 ; !=
7699   3578 22 00         mov ah, 0
7700   357A 27            mov b, a
7701   357B E4            pop a
7702   357C C0 00 00      cmp b, 0
7703   357F C6 8C 35      je _if116_exit
7704   3582             _if116_true:
7705   3582 26 00 00      mov b, 0
7706   3585 FD 42 C7 3C   mov [__allzeroes], b
7707   3589 0A 8C 35      jmp _if116_exit
7708   358C             _if116_exit:
7709   358C             _for115_update:
7710   358C 29 C5 3C      mov b, [__divi] ; divi
7711   358F D7            push a
7712   3590 11            mov a, b
7713   3591 FD 77         inc b
7714   3593 FD 42 C5 3C   mov [__divi], b
7715   3597 27            mov b, a
7716   3598 E4            pop a
7717   3599 0A 3D 35      jmp _for115_cond
7718   359C             _for115_exit:
7719   359C             _if117_cond:
7720   359C 29 C7 3C      mov b, [__allzeroes] ; allzeroes
7721   359F D7            push a
7722   35A0 11            mov a, b
7723   35A1 26 01 00      mov b, 1
7724   35A4 B0            cmp a, b
7725   35A5 0E            lodflgs
7726   35A6 87 01         and al, %00000001 ; ==
7727   35A8 22 00         mov ah, 0
7728   35AA 27            mov b, a
7729   35AB E4            pop a
7730   35AC C0 00 00      cmp b, 0
7731   35AF C6 B7 35      je _if117_exit
7732   35B2             _if117_true:
7733   35B2 F9            leave
7734   35B3 09            ret
7735   35B4 0A B7 35      jmp _if117_exit
7736   35B7             _if117_exit:
7737   35B7 0A BA 35      jmp _if114_exit
7738   35BA             _if114_exit:
7739   35BA 0A D2 33      jmp _while110_cond
7740   35BD             _while110_exit:
7741   35BD F9            leave
7742   35BE 09            ret
7743   35BF             
7744   35BF             normdivres:
7745   35BF D2            push bp
7746   35C0 9B            mov bp, sp
7747   35C1             _for118_init:
7748   35C1 26 0C 00      mov b, 12
7749   35C4 FD 42 C5 3C   mov [__divi], b
7750   35C8             _for118_cond:
7751   35C8 29 C5 3C      mov b, [__divi] ; divi
7752   35CB D7            push a
7753   35CC 11            mov a, b
7754   35CD 26 18 00      mov b, 24
7755   35D0 B0            cmp a, b
7756   35D1 0E            lodflgs
7757   35D2 2F            mov bl, al
7758   35D3 FD A2 03      shr al, 3
7759   35D6 FD A4 02      shr bl, 2
7760   35D9 FD 87 01      and bl, %00000001
7761   35DC 90            xor al, bl ; < (signed)
7762   35DD 22 00         mov ah, 0
7763   35DF 27            mov b, a
7764   35E0 E4            pop a
7765   35E1 C0 00 00      cmp b, 0
7766   35E4 C6 0E 36      je _for118_exit
7767   35E7             _for118_block:
7768   35E7 29 6F 3C      mov b, [__mulres] ; mulres
7769   35EA D7            push a
7770   35EB 74            mov d, b
7771   35EC DA            push d
7772   35ED 29 C5 3C      mov b, [__divi] ; divi
7773   35F0 E7            pop d
7774   35F1 10 02 00      mov a, 2
7775   35F4 AC            mul a, b
7776   35F5 5A            add d, b
7777   35F6 E4            pop a
7778   35F7 DA            push d
7779   35F8 26 00 00      mov b, 0
7780   35FB E7            pop d
7781   35FC FD 43         mov [d], b
7782   35FE             _for118_update:
7783   35FE 29 C5 3C      mov b, [__divi] ; divi
7784   3601 D7            push a
7785   3602 11            mov a, b
7786   3603 FD 77         inc b
7787   3605 FD 42 C5 3C   mov [__divi], b
7788   3609 27            mov b, a
7789   360A E4            pop a
7790   360B 0A C8 35      jmp _for118_cond
7791   360E             _for118_exit:
7792   360E             _for119_init:
7793   360E 26 00 00      mov b, 0
7794   3611 FD 42 C5 3C   mov [__divi], b
7795   3615             _for119_cond:
7796   3615 29 C5 3C      mov b, [__divi] ; divi
7797   3618 D7            push a
7798   3619 11            mov a, b
7799   361A 26 0C 00      mov b, 12
7800   361D B0            cmp a, b
7801   361E 0E            lodflgs
7802   361F 2F            mov bl, al
7803   3620 FD A2 03      shr al, 3
7804   3623 FD A4 02      shr bl, 2
7805   3626 FD 87 01      and bl, %00000001
7806   3629 90            xor al, bl ; < (signed)
7807   362A 22 00         mov ah, 0
7808   362C 27            mov b, a
7809   362D E4            pop a
7810   362E C0 00 00      cmp b, 0
7811   3631 C6 69 36      je _for119_exit
7812   3634             _for119_block:
7813   3634 29 6F 3C      mov b, [__mulres] ; mulres
7814   3637 D7            push a
7815   3638 74            mov d, b
7816   3639 DA            push d
7817   363A 29 C5 3C      mov b, [__divi] ; divi
7818   363D E7            pop d
7819   363E 10 02 00      mov a, 2
7820   3641 AC            mul a, b
7821   3642 5A            add d, b
7822   3643 E4            pop a
7823   3644 DA            push d
7824   3645 29 89 3C      mov b, [__divres] ; divres
7825   3648 D7            push a
7826   3649 74            mov d, b
7827   364A DA            push d
7828   364B 29 C5 3C      mov b, [__divi] ; divi
7829   364E E7            pop d
7830   364F 10 02 00      mov a, 2
7831   3652 AC            mul a, b
7832   3653 5A            add d, b
7833   3654 E4            pop a
7834   3655 2A            mov b, [d]
7835   3656 E7            pop d
7836   3657 FD 43         mov [d], b
7837   3659             _for119_update:
7838   3659 29 C5 3C      mov b, [__divi] ; divi
7839   365C D7            push a
7840   365D 11            mov a, b
7841   365E FD 77         inc b
7842   3660 FD 42 C5 3C   mov [__divi], b
7843   3664 27            mov b, a
7844   3665 E4            pop a
7845   3666 0A 15 36      jmp _for119_cond
7846   3669             _for119_exit:
7847   3669 07 B6 25      call normmulres
7848   366C             _for120_init:
7849   366C 26 00 00      mov b, 0
7850   366F FD 42 CB 3C   mov [__divshift], b
7851   3673             _for120_cond:
7852   3673 29 CB 3C      mov b, [__divshift] ; divshift
7853   3676 D7            push a
7854   3677 11            mov a, b
7855   3678 26 0B 00      mov b, 11
7856   367B B0            cmp a, b
7857   367C 0E            lodflgs
7858   367D 2F            mov bl, al
7859   367E FD A2 03      shr al, 3
7860   3681 FD A4 02      shr bl, 2
7861   3684 FD 87 01      and bl, %00000001
7862   3687 90            xor al, bl ; < (signed)
7863   3688 22 00         mov ah, 0
7864   368A 27            mov b, a
7865   368B E4            pop a
7866   368C C0 00 00      cmp b, 0
7867   368F C6 2C 37      je _for120_exit
7868   3692             _for120_block:
7869   3692             _for121_init:
7870   3692 26 00 00      mov b, 0
7871   3695 FD 42 C5 3C   mov [__divi], b
7872   3699             _for121_cond:
7873   3699 29 C5 3C      mov b, [__divi] ; divi
7874   369C D7            push a
7875   369D 11            mov a, b
7876   369E 26 17 00      mov b, 23
7877   36A1 B0            cmp a, b
7878   36A2 0E            lodflgs
7879   36A3 2F            mov bl, al
7880   36A4 FD A2 03      shr al, 3
7881   36A7 FD A4 02      shr bl, 2
7882   36AA FD 87 01      and bl, %00000001
7883   36AD 90            xor al, bl ; < (signed)
7884   36AE 22 00         mov ah, 0
7885   36B0 27            mov b, a
7886   36B1 E4            pop a
7887   36B2 C0 00 00      cmp b, 0
7888   36B5 C6 05 37      je _for121_exit
7889   36B8             _for121_block:
7890   36B8 29 6F 3C      mov b, [__mulres] ; mulres
7891   36BB D7            push a
7892   36BC 74            mov d, b
7893   36BD DA            push d
7894   36BE 26 17 00      mov b, 23
7895   36C1 D7            push a
7896   36C2 11            mov a, b
7897   36C3 29 C5 3C      mov b, [__divi] ; divi
7898   36C6 60            sub a, b
7899   36C7 27            mov b, a
7900   36C8 E4            pop a
7901   36C9 E7            pop d
7902   36CA 10 02 00      mov a, 2
7903   36CD AC            mul a, b
7904   36CE 5A            add d, b
7905   36CF E4            pop a
7906   36D0 DA            push d
7907   36D1 29 6F 3C      mov b, [__mulres] ; mulres
7908   36D4 D7            push a
7909   36D5 74            mov d, b
7910   36D6 DA            push d
7911   36D7 26 17 00      mov b, 23
7912   36DA D7            push a
7913   36DB 11            mov a, b
7914   36DC 29 C5 3C      mov b, [__divi] ; divi
7915   36DF 60            sub a, b
7916   36E0 27            mov b, a
7917   36E1 E4            pop a
7918   36E2 D7            push a
7919   36E3 11            mov a, b
7920   36E4 26 01 00      mov b, 1
7921   36E7 60            sub a, b
7922   36E8 27            mov b, a
7923   36E9 E4            pop a
7924   36EA E7            pop d
7925   36EB 10 02 00      mov a, 2
7926   36EE AC            mul a, b
7927   36EF 5A            add d, b
7928   36F0 E4            pop a
7929   36F1 2A            mov b, [d]
7930   36F2 E7            pop d
7931   36F3 FD 43         mov [d], b
7932   36F5             _for121_update:
7933   36F5 29 C5 3C      mov b, [__divi] ; divi
7934   36F8 D7            push a
7935   36F9 11            mov a, b
7936   36FA FD 77         inc b
7937   36FC FD 42 C5 3C   mov [__divi], b
7938   3700 27            mov b, a
7939   3701 E4            pop a
7940   3702 0A 99 36      jmp _for121_cond
7941   3705             _for121_exit:
7942   3705 29 6F 3C      mov b, [__mulres] ; mulres
7943   3708 D7            push a
7944   3709 74            mov d, b
7945   370A DA            push d
7946   370B 26 00 00      mov b, 0
7947   370E E7            pop d
7948   370F 10 02 00      mov a, 2
7949   3712 AC            mul a, b
7950   3713 5A            add d, b
7951   3714 E4            pop a
7952   3715 DA            push d
7953   3716 26 00 00      mov b, 0
7954   3719 E7            pop d
7955   371A FD 43         mov [d], b
7956   371C             _for120_update:
7957   371C 29 CB 3C      mov b, [__divshift] ; divshift
7958   371F D7            push a
7959   3720 11            mov a, b
7960   3721 FD 77         inc b
7961   3723 FD 42 CB 3C   mov [__divshift], b
7962   3727 27            mov b, a
7963   3728 E4            pop a
7964   3729 0A 73 36      jmp _for120_cond
7965   372C             _for120_exit:
7966   372C             _for122_init:
7967   372C 26 00 00      mov b, 0
7968   372F FD 42 C5 3C   mov [__divi], b
7969   3733             _for122_cond:
7970   3733 29 C5 3C      mov b, [__divi] ; divi
7971   3736 D7            push a
7972   3737 11            mov a, b
7973   3738 26 0C 00      mov b, 12
7974   373B B0            cmp a, b
7975   373C 0E            lodflgs
7976   373D 2F            mov bl, al
7977   373E FD A2 03      shr al, 3
7978   3741 FD A4 02      shr bl, 2
7979   3744 FD 87 01      and bl, %00000001
7980   3747 90            xor al, bl ; < (signed)
7981   3748 22 00         mov ah, 0
7982   374A 27            mov b, a
7983   374B E4            pop a
7984   374C C0 00 00      cmp b, 0
7985   374F C6 8F 37      je _for122_exit
7986   3752             _for122_block:
7987   3752 29 89 3C      mov b, [__divres] ; divres
7988   3755 D7            push a
7989   3756 74            mov d, b
7990   3757 DA            push d
7991   3758 29 C5 3C      mov b, [__divi] ; divi
7992   375B E7            pop d
7993   375C 10 02 00      mov a, 2
7994   375F AC            mul a, b
7995   3760 5A            add d, b
7996   3761 E4            pop a
7997   3762 DA            push d
7998   3763 29 6F 3C      mov b, [__mulres] ; mulres
7999   3766 D7            push a
8000   3767 74            mov d, b
8001   3768 DA            push d
8002   3769 29 C5 3C      mov b, [__divi] ; divi
8003   376C D7            push a
8004   376D 11            mov a, b
8005   376E 26 0C 00      mov b, 12
8006   3771 54            add a, b
8007   3772 27            mov b, a
8008   3773 E4            pop a
8009   3774 E7            pop d
8010   3775 10 02 00      mov a, 2
8011   3778 AC            mul a, b
8012   3779 5A            add d, b
8013   377A E4            pop a
8014   377B 2A            mov b, [d]
8015   377C E7            pop d
8016   377D FD 43         mov [d], b
8017   377F             _for122_update:
8018   377F 29 C5 3C      mov b, [__divi] ; divi
8019   3782 D7            push a
8020   3783 11            mov a, b
8021   3784 FD 77         inc b
8022   3786 FD 42 C5 3C   mov [__divi], b
8023   378A 27            mov b, a
8024   378B E4            pop a
8025   378C 0A 33 37      jmp _for122_cond
8026   378F             _for122_exit:
8027   378F F9            leave
8028   3790 09            ret
8029   3791             
8030   3791             times:
8031   3791 D2            push bp
8032   3792 9B            mov bp, sp
8033   3793 07 D2 16      call fixsignin
8034   3796 26 00 00      mov b, 0
8035   3799 FD 42 8F 3C   mov [__csign], b
8036   379D             _if123_cond:
8037   379D 29 8B 3C      mov b, [__asign] ; asign
8038   37A0 D7            push a
8039   37A1 11            mov a, b
8040   37A2 29 8D 3C      mov b, [__bsign] ; bsign
8041   37A5 B0            cmp a, b
8042   37A6 0E            lodflgs
8043   37A7 87 01         and al, %00000001
8044   37A9 8F 01         xor al, %00000001 ; !=
8045   37AB 22 00         mov ah, 0
8046   37AD 27            mov b, a
8047   37AE E4            pop a
8048   37AF C0 00 00      cmp b, 0
8049   37B2 C6 BF 37      je _if123_exit
8050   37B5             _if123_true:
8051   37B5 26 01 00      mov b, 1
8052   37B8 FD 42 8F 3C   mov [__csign], b
8053   37BC 0A BF 37      jmp _if123_exit
8054   37BF             _if123_exit:
8055   37BF 26 00 00      mov b, 0
8056   37C2 FD 42 8B 3C   mov [__asign], b
8057   37C6 26 00 00      mov b, 0
8058   37C9 FD 42 8D 3C   mov [__bsign], b
8059   37CD 07 17 28      call prototimes
8060   37D0 26 01 00      mov b, 1
8061   37D3 FD 42 C7 3C   mov [__allzeroes], b
8062   37D7             _for124_init:
8063   37D7 26 0F 00      mov b, 15
8064   37DA FD 42 93 3C   mov [__pos], b
8065   37DE             _for124_cond:
8066   37DE 29 93 3C      mov b, [__pos] ; pos
8067   37E1 D7            push a
8068   37E2 11            mov a, b
8069   37E3 26 18 00      mov b, 24
8070   37E6 B0            cmp a, b
8071   37E7 0E            lodflgs
8072   37E8 2F            mov bl, al
8073   37E9 FD A2 03      shr al, 3
8074   37EC FD A4 02      shr bl, 2
8075   37EF FD 87 01      and bl, %00000001
8076   37F2 90            xor al, bl ; < (signed)
8077   37F3 22 00         mov ah, 0
8078   37F5 27            mov b, a
8079   37F6 E4            pop a
8080   37F7 C0 00 00      cmp b, 0
8081   37FA C6 3D 38      je _for124_exit
8082   37FD             _for124_block:
8083   37FD             _if125_cond:
8084   37FD 29 6F 3C      mov b, [__mulres] ; mulres
8085   3800 D7            push a
8086   3801 74            mov d, b
8087   3802 DA            push d
8088   3803 29 93 3C      mov b, [__pos] ; pos
8089   3806 E7            pop d
8090   3807 10 02 00      mov a, 2
8091   380A AC            mul a, b
8092   380B 5A            add d, b
8093   380C E4            pop a
8094   380D 2A            mov b, [d]
8095   380E D7            push a
8096   380F 11            mov a, b
8097   3810 26 00 00      mov b, 0
8098   3813 B0            cmp a, b
8099   3814 0E            lodflgs
8100   3815 87 01         and al, %00000001
8101   3817 8F 01         xor al, %00000001 ; !=
8102   3819 22 00         mov ah, 0
8103   381B 27            mov b, a
8104   381C E4            pop a
8105   381D C0 00 00      cmp b, 0
8106   3820 C6 2D 38      je _if125_exit
8107   3823             _if125_true:
8108   3823 26 00 00      mov b, 0
8109   3826 FD 42 C7 3C   mov [__allzeroes], b
8110   382A 0A 2D 38      jmp _if125_exit
8111   382D             _if125_exit:
8112   382D             _for124_update:
8113   382D 29 93 3C      mov b, [__pos] ; pos
8114   3830 D7            push a
8115   3831 11            mov a, b
8116   3832 FD 77         inc b
8117   3834 FD 42 93 3C   mov [__pos], b
8118   3838 27            mov b, a
8119   3839 E4            pop a
8120   383A 0A DE 37      jmp _for124_cond
8121   383D             _for124_exit:
8122   383D             _if126_cond:
8123   383D 29 C7 3C      mov b, [__allzeroes] ; allzeroes
8124   3840 D7            push a
8125   3841 11            mov a, b
8126   3842 26 01 00      mov b, 1
8127   3845 B0            cmp a, b
8128   3846 0E            lodflgs
8129   3847 87 01         and al, %00000001 ; ==
8130   3849 22 00         mov ah, 0
8131   384B 27            mov b, a
8132   384C E4            pop a
8133   384D C0 00 00      cmp b, 0
8134   3850 C6 B9 38      je _if126_exit
8135   3853             _if126_true:
8136   3853             _for127_init:
8137   3853 26 04 00      mov b, 4
8138   3856 FD 42 93 3C   mov [__pos], b
8139   385A             _for127_cond:
8140   385A 29 93 3C      mov b, [__pos] ; pos
8141   385D D7            push a
8142   385E 11            mov a, b
8143   385F 26 0F 00      mov b, 15
8144   3862 B0            cmp a, b
8145   3863 0E            lodflgs
8146   3864 2F            mov bl, al
8147   3865 FD A2 03      shr al, 3
8148   3868 FD A4 02      shr bl, 2
8149   386B FD 87 01      and bl, %00000001
8150   386E 90            xor al, bl ; < (signed)
8151   386F 22 00         mov ah, 0
8152   3871 27            mov b, a
8153   3872 E4            pop a
8154   3873 C0 00 00      cmp b, 0
8155   3876 C6 B6 38      je _for127_exit
8156   3879             _for127_block:
8157   3879 29 3D 3C      mov b, [__cnarr] ; cnarr
8158   387C D7            push a
8159   387D 74            mov d, b
8160   387E DA            push d
8161   387F 29 93 3C      mov b, [__pos] ; pos
8162   3882 D7            push a
8163   3883 11            mov a, b
8164   3884 26 04 00      mov b, 4
8165   3887 60            sub a, b
8166   3888 27            mov b, a
8167   3889 E4            pop a
8168   388A E7            pop d
8169   388B 10 02 00      mov a, 2
8170   388E AC            mul a, b
8171   388F 5A            add d, b
8172   3890 E4            pop a
8173   3891 DA            push d
8174   3892 29 6F 3C      mov b, [__mulres] ; mulres
8175   3895 D7            push a
8176   3896 74            mov d, b
8177   3897 DA            push d
8178   3898 29 93 3C      mov b, [__pos] ; pos
8179   389B E7            pop d
8180   389C 10 02 00      mov a, 2
8181   389F AC            mul a, b
8182   38A0 5A            add d, b
8183   38A1 E4            pop a
8184   38A2 2A            mov b, [d]
8185   38A3 E7            pop d
8186   38A4 FD 43         mov [d], b
8187   38A6             _for127_update:
8188   38A6 29 93 3C      mov b, [__pos] ; pos
8189   38A9 D7            push a
8190   38AA 11            mov a, b
8191   38AB FD 77         inc b
8192   38AD FD 42 93 3C   mov [__pos], b
8193   38B1 27            mov b, a
8194   38B2 E4            pop a
8195   38B3 0A 5A 38      jmp _for127_cond
8196   38B6             _for127_exit:
8197   38B6 0A B9 38      jmp _if126_exit
8198   38B9             _if126_exit:
8199   38B9             _if128_cond:
8200   38B9 29 3D 3C      mov b, [__cnarr] ; cnarr
8201   38BC D7            push a
8202   38BD 74            mov d, b
8203   38BE DA            push d
8204   38BF 26 0B 00      mov b, 11
8205   38C2 E7            pop d
8206   38C3 10 02 00      mov a, 2
8207   38C6 AC            mul a, b
8208   38C7 5A            add d, b
8209   38C8 E4            pop a
8210   38C9 2A            mov b, [d]
8211   38CA D7            push a
8212   38CB 11            mov a, b
8213   38CC 26 09 00      mov b, 9
8214   38CF B0            cmp a, b
8215   38D0 0E            lodflgs
8216   38D1 2F            mov bl, al
8217   38D2 FD 78         mov g, a
8218   38D4 FD A2 03      shr al, 3
8219   38D7 FD A4 02      shr bl, 2
8220   38DA FD 87 01      and bl, %00000001
8221   38DD 90            xor al, bl
8222   38DE FD 27         mov b, g
8223   38E0 FD 87 01      and bl, %00000001
8224   38E3 8C            or al, bl
8225   38E4 8F 01         xor al, %00000001 ; > (signed)
8226   38E6 22 00         mov ah, 0
8227   38E8 27            mov b, a
8228   38E9 E4            pop a
8229   38EA C0 00 00      cmp b, 0
8230   38ED C6 40 39      je _if128_exit
8231   38F0             _if128_true:
8232   38F0             _for129_init:
8233   38F0 26 00 00      mov b, 0
8234   38F3 FD 42 93 3C   mov [__pos], b
8235   38F7             _for129_cond:
8236   38F7 29 93 3C      mov b, [__pos] ; pos
8237   38FA D7            push a
8238   38FB 11            mov a, b
8239   38FC 26 0A 00      mov b, 10
8240   38FF B0            cmp a, b
8241   3900 0E            lodflgs
8242   3901 2F            mov bl, al
8243   3902 FD A2 03      shr al, 3
8244   3905 FD A4 02      shr bl, 2
8245   3908 FD 87 01      and bl, %00000001
8246   390B 90            xor al, bl ; < (signed)
8247   390C 22 00         mov ah, 0
8248   390E 27            mov b, a
8249   390F E4            pop a
8250   3910 C0 00 00      cmp b, 0
8251   3913 C6 3D 39      je _for129_exit
8252   3916             _for129_block:
8253   3916 29 3D 3C      mov b, [__cnarr] ; cnarr
8254   3919 D7            push a
8255   391A 74            mov d, b
8256   391B DA            push d
8257   391C 29 93 3C      mov b, [__pos] ; pos
8258   391F E7            pop d
8259   3920 10 02 00      mov a, 2
8260   3923 AC            mul a, b
8261   3924 5A            add d, b
8262   3925 E4            pop a
8263   3926 DA            push d
8264   3927 26 00 00      mov b, 0
8265   392A E7            pop d
8266   392B FD 43         mov [d], b
8267   392D             _for129_update:
8268   392D 29 93 3C      mov b, [__pos] ; pos
8269   3930 D7            push a
8270   3931 11            mov a, b
8271   3932 FD 77         inc b
8272   3934 FD 42 93 3C   mov [__pos], b
8273   3938 27            mov b, a
8274   3939 E4            pop a
8275   393A 0A F7 38      jmp _for129_cond
8276   393D             _for129_exit:
8277   393D 0A 40 39      jmp _if128_exit
8278   3940             _if128_exit:
8279   3940 07 68 18      call fixcsizezero
8280   3943 07 17 18      call fixsignout
8281   3946 F9            leave
8282   3947 09            ret
8283   3948             
8284   3948             dividedby:
8285   3948 D2            push bp
8286   3949 9B            mov bp, sp
8287   394A 07 D2 16      call fixsignin
8288   394D 26 00 00      mov b, 0
8289   3950 FD 42 8F 3C   mov [__csign], b
8290   3954             _if130_cond:
8291   3954 29 8B 3C      mov b, [__asign] ; asign
8292   3957 D7            push a
8293   3958 11            mov a, b
8294   3959 29 8D 3C      mov b, [__bsign] ; bsign
8295   395C B0            cmp a, b
8296   395D 0E            lodflgs
8297   395E 87 01         and al, %00000001
8298   3960 8F 01         xor al, %00000001 ; !=
8299   3962 22 00         mov ah, 0
8300   3964 27            mov b, a
8301   3965 E4            pop a
8302   3966 C0 00 00      cmp b, 0
8303   3969 C6 76 39      je _if130_exit
8304   396C             _if130_true:
8305   396C 26 01 00      mov b, 1
8306   396F FD 42 8F 3C   mov [__csign], b
8307   3973 0A 76 39      jmp _if130_exit
8308   3976             _if130_exit:
8309   3976 26 00 00      mov b, 0
8310   3979 FD 42 8B 3C   mov [__asign], b
8311   397D 26 00 00      mov b, 0
8312   3980 FD 42 8D 3C   mov [__bsign], b
8313   3984 29 8F 3C      mov b, [__csign] ; csign
8314   3987 FD 42 C9 3C   mov [__bkpcsign], b
8315   398B 07 EA 2F      call protodividedby
8316   398E 07 BF 35      call normdivres
8317   3991             _for131_init:
8318   3991 26 00 00      mov b, 0
8319   3994 FD 42 93 3C   mov [__pos], b
8320   3998             _for131_cond:
8321   3998 29 93 3C      mov b, [__pos] ; pos
8322   399B D7            push a
8323   399C 11            mov a, b
8324   399D 26 0C 00      mov b, 12
8325   39A0 B0            cmp a, b
8326   39A1 0E            lodflgs
8327   39A2 2F            mov bl, al
8328   39A3 FD A2 03      shr al, 3
8329   39A6 FD A4 02      shr bl, 2
8330   39A9 FD 87 01      and bl, %00000001
8331   39AC 90            xor al, bl ; < (signed)
8332   39AD 22 00         mov ah, 0
8333   39AF 27            mov b, a
8334   39B0 E4            pop a
8335   39B1 C0 00 00      cmp b, 0
8336   39B4 C6 EC 39      je _for131_exit
8337   39B7             _for131_block:
8338   39B7 29 3D 3C      mov b, [__cnarr] ; cnarr
8339   39BA D7            push a
8340   39BB 74            mov d, b
8341   39BC DA            push d
8342   39BD 29 93 3C      mov b, [__pos] ; pos
8343   39C0 E7            pop d
8344   39C1 10 02 00      mov a, 2
8345   39C4 AC            mul a, b
8346   39C5 5A            add d, b
8347   39C6 E4            pop a
8348   39C7 DA            push d
8349   39C8 29 89 3C      mov b, [__divres] ; divres
8350   39CB D7            push a
8351   39CC 74            mov d, b
8352   39CD DA            push d
8353   39CE 29 93 3C      mov b, [__pos] ; pos
8354   39D1 E7            pop d
8355   39D2 10 02 00      mov a, 2
8356   39D5 AC            mul a, b
8357   39D6 5A            add d, b
8358   39D7 E4            pop a
8359   39D8 2A            mov b, [d]
8360   39D9 E7            pop d
8361   39DA FD 43         mov [d], b
8362   39DC             _for131_update:
8363   39DC 29 93 3C      mov b, [__pos] ; pos
8364   39DF D7            push a
8365   39E0 11            mov a, b
8366   39E1 FD 77         inc b
8367   39E3 FD 42 93 3C   mov [__pos], b
8368   39E7 27            mov b, a
8369   39E8 E4            pop a
8370   39E9 0A 98 39      jmp _for131_cond
8371   39EC             _for131_exit:
8372   39EC             _for132_init:
8373   39EC 26 00 00      mov b, 0
8374   39EF FD 42 93 3C   mov [__pos], b
8375   39F3             _for132_cond:
8376   39F3 29 93 3C      mov b, [__pos] ; pos
8377   39F6 D7            push a
8378   39F7 11            mov a, b
8379   39F8 29 BD 3C      mov b, [__alshift] ; alshift
8380   39FB D7            push a
8381   39FC 11            mov a, b
8382   39FD 29 B9 3C      mov b, [__brshift] ; brshift
8383   3A00 54            add a, b
8384   3A01 27            mov b, a
8385   3A02 E4            pop a
8386   3A03 D7            push a
8387   3A04 11            mov a, b
8388   3A05 26 0C 00      mov b, 12
8389   3A08 54            add a, b
8390   3A09 27            mov b, a
8391   3A0A E4            pop a
8392   3A0B D7            push a
8393   3A0C 11            mov a, b
8394   3A0D 29 BB 3C      mov b, [__blshift] ; blshift
8395   3A10 60            sub a, b
8396   3A11 27            mov b, a
8397   3A12 E4            pop a
8398   3A13 B0            cmp a, b
8399   3A14 0E            lodflgs
8400   3A15 2F            mov bl, al
8401   3A16 FD 78         mov g, a
8402   3A18 FD A2 03      shr al, 3
8403   3A1B FD A4 02      shr bl, 2
8404   3A1E FD 87 01      and bl, %00000001
8405   3A21 90            xor al, bl
8406   3A22 FD 27         mov b, g
8407   3A24 FD 87 01      and bl, %00000001
8408   3A27 8C            or al, bl ; <= (signed)
8409   3A28 22 00         mov ah, 0
8410   3A2A 27            mov b, a
8411   3A2B E4            pop a
8412   3A2C C0 00 00      cmp b, 0
8413   3A2F C6 4C 3B      je _for132_exit
8414   3A32             _for132_block:
8415   3A32             _for133_init:
8416   3A32 26 00 00      mov b, 0
8417   3A35 FD 42 C5 3C   mov [__divi], b
8418   3A39             _for133_cond:
8419   3A39 29 C5 3C      mov b, [__divi] ; divi
8420   3A3C D7            push a
8421   3A3D 11            mov a, b
8422   3A3E 26 0B 00      mov b, 11
8423   3A41 B0            cmp a, b
8424   3A42 0E            lodflgs
8425   3A43 2F            mov bl, al
8426   3A44 FD A2 03      shr al, 3
8427   3A47 FD A4 02      shr bl, 2
8428   3A4A FD 87 01      and bl, %00000001
8429   3A4D 90            xor al, bl ; < (signed)
8430   3A4E 22 00         mov ah, 0
8431   3A50 27            mov b, a
8432   3A51 E4            pop a
8433   3A52 C0 00 00      cmp b, 0
8434   3A55 C6 0B 3B      je _for133_exit
8435   3A58             _for133_block:
8436   3A58 29 3D 3C      mov b, [__cnarr] ; cnarr
8437   3A5B D7            push a
8438   3A5C 74            mov d, b
8439   3A5D DA            push d
8440   3A5E 29 C5 3C      mov b, [__divi] ; divi
8441   3A61 D7            push a
8442   3A62 11            mov a, b
8443   3A63 26 01 00      mov b, 1
8444   3A66 54            add a, b
8445   3A67 27            mov b, a
8446   3A68 E4            pop a
8447   3A69 E7            pop d
8448   3A6A 10 02 00      mov a, 2
8449   3A6D AC            mul a, b
8450   3A6E 5A            add d, b
8451   3A6F E4            pop a
8452   3A70 2A            mov b, [d]
8453   3A71 D7            push a
8454   3A72 11            mov a, b
8455   3A73 26 0A 00      mov b, 10
8456   3A76 AE            div a, b
8457   3A77 FD 78         mov g, a
8458   3A79 11            mov a, b
8459   3A7A FD 27         mov b, g
8460   3A7C E4            pop a
8461   3A7D FD 42 CD 3C   mov [__subi], b
8462   3A81 29 CD 3C      mov b, [__subi] ; subi
8463   3A84 D7            push a
8464   3A85 11            mov a, b
8465   3A86 26 0A 00      mov b, 10
8466   3A89 AC            mul a, b
8467   3A8A E4            pop a
8468   3A8B FD 42 CD 3C   mov [__subi], b
8469   3A8F 29 3D 3C      mov b, [__cnarr] ; cnarr
8470   3A92 D7            push a
8471   3A93 74            mov d, b
8472   3A94 DA            push d
8473   3A95 29 C5 3C      mov b, [__divi] ; divi
8474   3A98 D7            push a
8475   3A99 11            mov a, b
8476   3A9A 26 01 00      mov b, 1
8477   3A9D 54            add a, b
8478   3A9E 27            mov b, a
8479   3A9F E4            pop a
8480   3AA0 E7            pop d
8481   3AA1 10 02 00      mov a, 2
8482   3AA4 AC            mul a, b
8483   3AA5 5A            add d, b
8484   3AA6 E4            pop a
8485   3AA7 2A            mov b, [d]
8486   3AA8 D7            push a
8487   3AA9 11            mov a, b
8488   3AAA 29 CD 3C      mov b, [__subi] ; subi
8489   3AAD 60            sub a, b
8490   3AAE 27            mov b, a
8491   3AAF E4            pop a
8492   3AB0 FD 42 CD 3C   mov [__subi], b
8493   3AB4 29 CD 3C      mov b, [__subi] ; subi
8494   3AB7 D7            push a
8495   3AB8 11            mov a, b
8496   3AB9 26 0A 00      mov b, 10
8497   3ABC AC            mul a, b
8498   3ABD E4            pop a
8499   3ABE FD 42 CD 3C   mov [__subi], b
8500   3AC2 29 3D 3C      mov b, [__cnarr] ; cnarr
8501   3AC5 D7            push a
8502   3AC6 74            mov d, b
8503   3AC7 DA            push d
8504   3AC8 29 C5 3C      mov b, [__divi] ; divi
8505   3ACB E7            pop d
8506   3ACC 10 02 00      mov a, 2
8507   3ACF AC            mul a, b
8508   3AD0 5A            add d, b
8509   3AD1 E4            pop a
8510   3AD2 DA            push d
8511   3AD3 29 CD 3C      mov b, [__subi] ; subi
8512   3AD6 D7            push a
8513   3AD7 11            mov a, b
8514   3AD8 29 3D 3C      mov b, [__cnarr] ; cnarr
8515   3ADB D7            push a
8516   3ADC 74            mov d, b
8517   3ADD DA            push d
8518   3ADE 29 C5 3C      mov b, [__divi] ; divi
8519   3AE1 E7            pop d
8520   3AE2 10 02 00      mov a, 2
8521   3AE5 AC            mul a, b
8522   3AE6 5A            add d, b
8523   3AE7 E4            pop a
8524   3AE8 2A            mov b, [d]
8525   3AE9 D7            push a
8526   3AEA 11            mov a, b
8527   3AEB 26 0A 00      mov b, 10
8528   3AEE AE            div a, b
8529   3AEF FD 78         mov g, a
8530   3AF1 11            mov a, b
8531   3AF2 FD 27         mov b, g
8532   3AF4 E4            pop a
8533   3AF5 54            add a, b
8534   3AF6 27            mov b, a
8535   3AF7 E4            pop a
8536   3AF8 E7            pop d
8537   3AF9 FD 43         mov [d], b
8538   3AFB             _for133_update:
8539   3AFB 29 C5 3C      mov b, [__divi] ; divi
8540   3AFE D7            push a
8541   3AFF 11            mov a, b
8542   3B00 FD 77         inc b
8543   3B02 FD 42 C5 3C   mov [__divi], b
8544   3B06 27            mov b, a
8545   3B07 E4            pop a
8546   3B08 0A 39 3A      jmp _for133_cond
8547   3B0B             _for133_exit:
8548   3B0B 29 3D 3C      mov b, [__cnarr] ; cnarr
8549   3B0E D7            push a
8550   3B0F 74            mov d, b
8551   3B10 DA            push d
8552   3B11 26 0B 00      mov b, 11
8553   3B14 E7            pop d
8554   3B15 10 02 00      mov a, 2
8555   3B18 AC            mul a, b
8556   3B19 5A            add d, b
8557   3B1A E4            pop a
8558   3B1B DA            push d
8559   3B1C 29 3D 3C      mov b, [__cnarr] ; cnarr
8560   3B1F D7            push a
8561   3B20 74            mov d, b
8562   3B21 DA            push d
8563   3B22 26 0B 00      mov b, 11
8564   3B25 E7            pop d
8565   3B26 10 02 00      mov a, 2
8566   3B29 AC            mul a, b
8567   3B2A 5A            add d, b
8568   3B2B E4            pop a
8569   3B2C 2A            mov b, [d]
8570   3B2D D7            push a
8571   3B2E 11            mov a, b
8572   3B2F 26 0A 00      mov b, 10
8573   3B32 AE            div a, b
8574   3B33 FD 78         mov g, a
8575   3B35 11            mov a, b
8576   3B36 FD 27         mov b, g
8577   3B38 E4            pop a
8578   3B39 E7            pop d
8579   3B3A FD 43         mov [d], b
8580   3B3C             _for132_update:
8581   3B3C 29 93 3C      mov b, [__pos] ; pos
8582   3B3F D7            push a
8583   3B40 11            mov a, b
8584   3B41 FD 77         inc b
8585   3B43 FD 42 93 3C   mov [__pos], b
8586   3B47 27            mov b, a
8587   3B48 E4            pop a
8588   3B49 0A F3 39      jmp _for132_cond
8589   3B4C             _for132_exit:
8590   3B4C 29 C9 3C      mov b, [__bkpcsign] ; bkpcsign
8591   3B4F FD 42 8F 3C   mov [__csign], b
8592   3B53 07 68 18      call fixcsizezero
8593   3B56 07 17 18      call fixsignout
8594   3B59 F9            leave
8595   3B5A 09            ret
8596   3B5B             ; --- END TEXT BLOCK
8597   3B5B             
8598   3B5B             ; --- BEGIN DATA BLOCK
8599   3B5B 20 00       __sp_data: .db " ", 0
8600   3B5D 5B 3B       __sp: .dw __sp_data
8601   3B5F 00 00 00 00 __ionum_data: .fill 12, 0
8601   3B63 00 00 00 00 
8601   3B67 00 00 00 00 
8602   3B6B 5F 3B       __ionum: .dw __ionum_data
8603   3B6D 00 00       __ionr: .dw 0
8604   3B6F 00 00       __ioshift: .dw 0
8605   3B71 00 00 00 00 __datum_data: .fill 72, 0
8605   3B75 00 00 00 00 
8605   3B79 00 00 00 00 
8605   3B7D 00 00 00 00 
8605   3B81 00 00 00 00 
8605   3B85 00 00 00 00 
8605   3B89 00 00 00 00 
8605   3B8D 00 00 00 00 
8605   3B91 00 00 00 00 
8605   3B95 00 00 00 00 
8605   3B99 00 00 00 00 
8605   3B9D 00 00 00 00 
8605   3BA1 00 00 00 00 
8605   3BA5 00 00 00 00 
8605   3BA9 00 00 00 00 
8605   3BAD 00 00 00 00 
8605   3BB1 00 00 00 00 
8605   3BB5 00 00 00 00 
8606   3BB9 71 3B       __datum: .dw __datum_data
8607   3BBB 00 00       __datumpos: .fill 2, 0
8608   3BBD 00 00 00 00 __anarr_data: .fill 24, 0
8608   3BC1 00 00 00 00 
8608   3BC5 00 00 00 00 
8608   3BC9 00 00 00 00 
8608   3BCD 00 00 00 00 
8608   3BD1 00 00 00 00 
8609   3BD5 BD 3B       __anarr: .dw __anarr_data
8610   3BD7 00 00 00 00 __bnarr_data: .fill 24, 0
8610   3BDB 00 00 00 00 
8610   3BDF 00 00 00 00 
8610   3BE3 00 00 00 00 
8610   3BE7 00 00 00 00 
8610   3BEB 00 00 00 00 
8611   3BEF D7 3B       __bnarr: .dw __bnarr_data
8612   3BF1 00 00 00 00 __anarrbkp_data: .fill 24, 0
8612   3BF5 00 00 00 00 
8612   3BF9 00 00 00 00 
8612   3BFD 00 00 00 00 
8612   3C01 00 00 00 00 
8612   3C05 00 00 00 00 
8613   3C09 F1 3B       __anarrbkp: .dw __anarrbkp_data
8614   3C0B 00 00 00 00 __bnarrbkp_data: .fill 24, 0
8614   3C0F 00 00 00 00 
8614   3C13 00 00 00 00 
8614   3C17 00 00 00 00 
8614   3C1B 00 00 00 00 
8614   3C1F 00 00 00 00 
8615   3C23 0B 3C       __bnarrbkp: .dw __bnarrbkp_data
8616   3C25 00 00 00 00 __cnarr_data: .fill 24, 0
8616   3C29 00 00 00 00 
8616   3C2D 00 00 00 00 
8616   3C31 00 00 00 00 
8616   3C35 00 00 00 00 
8616   3C39 00 00 00 00 
8617   3C3D 25 3C       __cnarr: .dw __cnarr_data
8618   3C3F 00 00 00 00 __mulres_data: .fill 48, 0
8618   3C43 00 00 00 00 
8618   3C47 00 00 00 00 
8618   3C4B 00 00 00 00 
8618   3C4F 00 00 00 00 
8618   3C53 00 00 00 00 
8618   3C57 00 00 00 00 
8618   3C5B 00 00 00 00 
8618   3C5F 00 00 00 00 
8618   3C63 00 00 00 00 
8618   3C67 00 00 00 00 
8618   3C6B 00 00 00 00 
8619   3C6F 3F 3C       __mulres: .dw __mulres_data
8620   3C71 00 00 00 00 __divres_data: .fill 24, 0
8620   3C75 00 00 00 00 
8620   3C79 00 00 00 00 
8620   3C7D 00 00 00 00 
8620   3C81 00 00 00 00 
8620   3C85 00 00 00 00 
8621   3C89 71 3C       __divres: .dw __divres_data
8622   3C8B 00 00       __asign: .dw 0
8623   3C8D 00 00       __bsign: .dw 0
8624   3C8F 00 00       __csign: .dw 0
8625   3C91 00 00       __protopos: .dw 0
8626   3C93 00 00       __pos: .dw 0
8627   3C95 00 00       __carry: .dw 0
8628   3C97 00 00       __nextcarry: .dw 0
8629   3C99 00 00       __agtb: .dw 0
8630   3C9B 00 00       __bgta: .dw 0
8631   3C9D 00 00       __aeqb: .dw 0
8632   3C9F 00 00       __aneqb: .dw 0
8633   3CA1 00 00       __ageb: .dw 0
8634   3CA3 00 00       __bgea: .dw 0
8635   3CA5 00 00       __eqflag: .dw 0
8636   3CA7 00 00       __sizepos: .dw 0
8637   3CA9 00 00       __psizepos: .dw 0
8638   3CAB 00 00       __swappos: .dw 0
8639   3CAD 00 00       __swaptmp: .dw 0
8640   3CAF 00 00       __toolarge: .dw 0
8641   3CB1 00 00       __normal: .dw 0
8642   3CB3 00 00       __mulpos1: .dw 0
8643   3CB5 00 00       __mulpos2: .dw 0
8644   3CB7 00 00       __mulpos3: .dw 0
8645   3CB9 00 00       __brshift: .dw 0
8646   3CBB 00 00       __blshift: .dw 0
8647   3CBD 00 00       __alshift: .dw 0
8648   3CBF 00 00       __divcounter1: .dw 0
8649   3CC1 00 00       __divcounter2: .dw 0
8650   3CC3 00 00       __segmentcounter: .dw 0
8651   3CC5 00 00       __divi: .dw 0
8652   3CC7 00 00       __allzeroes: .dw 0
8653   3CC9 00 00       __bkpcsign: .dw 0
8654   3CCB 00 00       __divshift: .dw 0
8655   3CCD 00 00       __subi: .dw 0
8656   3CCF 00 00       __posflag: .dw 0
8657   3CD1 0A 00       __string_0: .db "\n", 0
8658   3CD3 20 00       __string_1: .db " ", 0
8659   3CD5             ; --- END DATA BLOCK
8660   3CD5             
8661   3CD5             ; --- BEGIN INCLUDE BLOCK
8662   3CD5             .include "lib/stdio.asm"
0001+  3CD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  3CD5             ; stdio.s
0003+  3CD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  3CD5             .include "lib/string.asm"
0001++ 3CD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 3CD5             ; string.s
0003++ 3CD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 3CD5             
0005++ 3CD5             
0006++ 3CD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 3CD5             ; strrev
0008++ 3CD5             ; reverse a string
0009++ 3CD5             ; D = string address
0010++ 3CD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 3CD5             ; 01234
0012++ 3CD5             strrev:
0013++ 3CD5 4B          	pusha
0014++ 3CD6 07 1C 3D    	call strlen	; length in C
0015++ 3CD9 12          	mov a, c
0016++ 3CDA AF 01 00    	cmp a, 1
0017++ 3CDD D0 F7 3C    	jleu strrev_end	; check string length. string len must be > 1
0018++ 3CE0 7D          	dec a
0019++ 3CE1 FD 4E       	mov si, d	; beginning of string
0020++ 3CE3 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 3CE5 59          	add d, a	; end of string
0022++ 3CE6 12          	mov a, c
0023++ 3CE7 FD 9B       	shr a		; divide by 2
0024++ 3CE9 39          	mov c, a	; C now counts the steps
0025++ 3CEA             strrev_L0:
0026++ 3CEA 32          	mov bl, [d]	; save load right-side char into BL
0027++ 3CEB F6          	lodsb		; load left-side char into AL; increase SI
0028++ 3CEC 3E          	mov [d], al	; store left char into right side
0029++ 3CED 1B          	mov al, bl
0030++ 3CEE F7          	stosb		; store right-side char into left-side; increase DI
0031++ 3CEF 7E          	dec c
0032++ 3CF0 7F          	dec d
0033++ 3CF1 C2 00 00    	cmp c, 0
0034++ 3CF4 C7 EA 3C    	jne strrev_L0
0035++ 3CF7             strrev_end:
0036++ 3CF7 4C          	popa
0037++ 3CF8 09          	ret
0038++ 3CF9             	
0039++ 3CF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 3CF9             ; strchr
0041++ 3CF9             ; search string in D for char in AL
0042++ 3CF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 3CF9             strchr:
0044++ 3CF9             strchr_L0:
0045++ 3CF9 32          	mov bl, [d]
0046++ 3CFA C1 00       	cmp bl, 0
0047++ 3CFC C6 07 3D    	je strchr_end
0048++ 3CFF BA          	cmp al, bl
0049++ 3D00 C6 07 3D    	je strchr_end
0050++ 3D03 79          	inc d
0051++ 3D04 0A F9 3C    	jmp strchr_L0
0052++ 3D07             strchr_end:
0053++ 3D07 1B          	mov al, bl
0054++ 3D08 09          	ret
0055++ 3D09             
0056++ 3D09             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 3D09             ; strstr
0058++ 3D09             ; find sub-string
0059++ 3D09             ; str1 in SI
0060++ 3D09             ; str2 in DI
0061++ 3D09             ; SI points to end of source string
0062++ 3D09             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 3D09             strstr:
0064++ 3D09 DB          	push al
0065++ 3D0A DA          	push d
0066++ 3D0B E3          	push di
0067++ 3D0C             strstr_loop:
0068++ 3D0C F3          	cmpsb					; compare a byte of the strings
0069++ 3D0D C7 18 3D    	jne strstr_ret
0070++ 3D10 FC 00 00    	lea d, [di + 0]
0071++ 3D13 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 3D15 C7 0C 3D    	jne strstr_loop				; equal chars but not at end
0073++ 3D18             strstr_ret:
0074++ 3D18 F0          	pop di
0075++ 3D19 E7          	pop d
0076++ 3D1A E8          	pop al
0077++ 3D1B 09          	ret
0078++ 3D1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 3D1C             ; length of null terminated string
0080++ 3D1C             ; result in C
0081++ 3D1C             ; pointer in D
0082++ 3D1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 3D1C             strlen:
0084++ 3D1C DA          	push d
0085++ 3D1D 38 00 00    	mov c, 0
0086++ 3D20             strlen_L1:
0087++ 3D20 BD 00       	cmp byte [d], 0
0088++ 3D22 C6 2A 3D    	je strlen_ret
0089++ 3D25 79          	inc d
0090++ 3D26 78          	inc c
0091++ 3D27 0A 20 3D    	jmp strlen_L1
0092++ 3D2A             strlen_ret:
0093++ 3D2A E7          	pop d
0094++ 3D2B 09          	ret
0095++ 3D2C             
0096++ 3D2C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 3D2C             ; STRCMP
0098++ 3D2C             ; compare two strings
0099++ 3D2C             ; str1 in SI
0100++ 3D2C             ; str2 in DI
0101++ 3D2C             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 3D2C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 3D2C             strcmp:
0104++ 3D2C DB          	push al
0105++ 3D2D DA          	push d
0106++ 3D2E E3          	push di
0107++ 3D2F E2          	push si
0108++ 3D30             strcmp_loop:
0109++ 3D30 F3          	cmpsb					; compare a byte of the strings
0110++ 3D31 C7 3C 3D    	jne strcmp_ret
0111++ 3D34 FB FF FF    	lea d, [si +- 1]
0112++ 3D37 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 3D39 C7 30 3D    	jne strcmp_loop				; equal chars but not at end
0114++ 3D3C             strcmp_ret:
0115++ 3D3C EF          	pop si
0116++ 3D3D F0          	pop di
0117++ 3D3E E7          	pop d
0118++ 3D3F E8          	pop al
0119++ 3D40 09          	ret
0120++ 3D41             
0121++ 3D41             
0122++ 3D41             ; STRCPY
0123++ 3D41             ; copy null terminated string from SI to DI
0124++ 3D41             ; source in SI
0125++ 3D41             ; destination in DI
0126++ 3D41             strcpy:
0127++ 3D41 E2          	push si
0128++ 3D42 E3          	push di
0129++ 3D43 DB          	push al
0130++ 3D44             strcpy_L1:
0131++ 3D44 F6          	lodsb
0132++ 3D45 F7          	stosb
0133++ 3D46 B9 00       	cmp al, 0
0134++ 3D48 C7 44 3D    	jne strcpy_L1
0135++ 3D4B             strcpy_end:
0136++ 3D4B E8          	pop al
0137++ 3D4C F0          	pop di
0138++ 3D4D EF          	pop si
0139++ 3D4E 09          	ret
0140++ 3D4F             
0141++ 3D4F             ; STRCAT
0142++ 3D4F             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 3D4F             ; source in SI
0144++ 3D4F             ; destination in DI
0145++ 3D4F             strcat:
0146++ 3D4F E2          	push si
0147++ 3D50 E3          	push di
0148++ 3D51 D7          	push a
0149++ 3D52 DA          	push d
0150++ 3D53 50          	mov a, di
0151++ 3D54 3C          	mov d, a
0152++ 3D55             strcat_goto_end_L1:
0153++ 3D55 BD 00       	cmp byte[d], 0
0154++ 3D57 C6 5E 3D    	je strcat_start
0155++ 3D5A 79          	inc d
0156++ 3D5B 0A 55 3D    	jmp strcat_goto_end_L1
0157++ 3D5E             strcat_start:
0158++ 3D5E FD 50       	mov di, d
0159++ 3D60             strcat_L1:
0160++ 3D60 F6          	lodsb
0161++ 3D61 F7          	stosb
0162++ 3D62 B9 00       	cmp al, 0
0163++ 3D64 C7 60 3D    	jne strcat_L1
0164++ 3D67             strcat_end:
0165++ 3D67 E7          	pop d
0166++ 3D68 E4          	pop a
0167++ 3D69 F0          	pop di
0168++ 3D6A EF          	pop si
0169++ 3D6B 09          	ret
0005+  3D6C             
0006+  3D6C 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  3D70 34 35 36 37 
0006+  3D74 38 39 41 42 
0006+  3D78 43 44 45 46 
0007+  3D7C 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  3D80 1B 5B 48 00 
0008+  3D84             
0009+  3D84 01 00       table_power:.dw 1
0010+  3D86 0A 00       			.dw 10
0011+  3D88 64 00       			.dw 100
0012+  3D8A E8 03       			.dw 1000
0013+  3D8C 10 27       			.dw 10000
0014+  3D8E             
0015+  3D8E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  3D8E             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  3D8E             ; ASCII in BL
0018+  3D8E             ; result in AL
0019+  3D8E             ; ascii for F = 0100 0110
0020+  3D8E             ; ascii for 9 = 0011 1001
0021+  3D8E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  3D8E             hex_ascii_encode:
0023+  3D8E 1B          	mov al, bl
0024+  3D8F 93 40       	test al, $40				; test if letter or number
0025+  3D91 C7 97 3D    	jnz hex_letter
0026+  3D94 87 0F       	and al, $0F				; get number
0027+  3D96 09          	ret
0028+  3D97             hex_letter:
0029+  3D97 87 0F       	and al, $0F				; get letter
0030+  3D99 6A 09       	add al, 9
0031+  3D9B 09          	ret
0032+  3D9C             
0033+  3D9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  3D9C             ; ATOI
0035+  3D9C             ; 2 letter hex string in B
0036+  3D9C             ; 8bit integer returned in AL
0037+  3D9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  3D9C             atoi:
0039+  3D9C D8          	push b
0040+  3D9D 07 8E 3D    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  3DA0 30          	mov bl, bh
0042+  3DA1 DB          	push al					; save a
0043+  3DA2 07 8E 3D    	call hex_ascii_encode
0044+  3DA5 EA          	pop bl	
0045+  3DA6 FD 9E 04    	shl al, 4
0046+  3DA9 8C          	or al, bl
0047+  3DAA E5          	pop b
0048+  3DAB 09          	ret	
0049+  3DAC             
0050+  3DAC             
0051+  3DAC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  3DAC             ; printf
0053+  3DAC             ; no need for explanations!
0054+  3DAC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  3DAC             printf:
0056+  3DAC 09          	ret
0057+  3DAD             
0058+  3DAD             
0059+  3DAD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  3DAD             ; scanf
0061+  3DAD             ; no need for explanations!
0062+  3DAD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  3DAD             scanf:
0064+  3DAD 09          	ret
0065+  3DAE             
0066+  3DAE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  3DAE             ; ITOA
0068+  3DAE             ; 8bit value in BL
0069+  3DAE             ; 2 byte ASCII result in A
0070+  3DAE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  3DAE             itoa:
0072+  3DAE DA          	push d
0073+  3DAF D8          	push b
0074+  3DB0 A7 00       	mov bh, 0
0075+  3DB2 FD A4 04    	shr bl, 4	
0076+  3DB5 74          	mov d, b
0077+  3DB6 1F 6C 3D    	mov al, [d + s_hex_digits]
0078+  3DB9 23          	mov ah, al
0079+  3DBA             	
0080+  3DBA E5          	pop b
0081+  3DBB D8          	push b
0082+  3DBC A7 00       	mov bh, 0
0083+  3DBE FD 87 0F    	and bl, $0F
0084+  3DC1 74          	mov d, b
0085+  3DC2 1F 6C 3D    	mov al, [d + s_hex_digits]
0086+  3DC5 E5          	pop b
0087+  3DC6 E7          	pop d
0088+  3DC7 09          	ret
0089+  3DC8             
0090+  3DC8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  3DC8             ; HEX STRING TO BINARY
0092+  3DC8             ; di = destination address
0093+  3DC8             ; si = source
0094+  3DC8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  3DC8             hex_to_int:
0096+  3DC8             hex_to_int_L1:
0097+  3DC8 F6          	lodsb					; load from [SI] to AL
0098+  3DC9 B9 00       	cmp al, 0				; check if ASCII 0
0099+  3DCB C6 D8 3D    	jz hex_to_int_ret
0100+  3DCE 36          	mov bh, al
0101+  3DCF F6          	lodsb
0102+  3DD0 2F          	mov bl, al
0103+  3DD1 07 9C 3D    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  3DD4 F7          	stosb					; store AL to [DI]
0105+  3DD5 0A C8 3D    	jmp hex_to_int_L1
0106+  3DD8             hex_to_int_ret:
0107+  3DD8 09          	ret		
0108+  3DD9             
0109+  3DD9             
0110+  3DD9             
0111+  3DD9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  3DD9             ; GETCHAR
0113+  3DD9             ; char in ah
0114+  3DD9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  3DD9             getchar:
0116+  3DD9 DB          	push al
0117+  3DDA             getchar_retry:
0118+  3DDA FD 0C       	sti
0119+  3DDC 19 01       	mov al, 1
0120+  3DDE 05 03       	syscall sys_io			; receive in AH
0121+  3DE0 B9 00       	cmp al, 0			; check if any char was receive
0122+  3DE2 C6 DA 3D    	je getchar_retry
0123+  3DE5 E8          	pop al
0124+  3DE6 09          	ret
0125+  3DE7             
0126+  3DE7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  3DE7             ; PUTCHAR
0128+  3DE7             ; char in ah
0129+  3DE7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  3DE7             putchar:
0131+  3DE7 D7          	push a
0132+  3DE8 19 00       	mov al, 0
0133+  3DEA 05 03       	syscall sys_io			; char in AH
0134+  3DEC E4          	pop a
0135+  3DED 09          	ret
0136+  3DEE             
0137+  3DEE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  3DEE             ;; INPUT A STRING
0139+  3DEE             ;; terminates with null
0140+  3DEE             ;; pointer in D
0141+  3DEE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  3DEE             gets:
0143+  3DEE D7          	push a
0144+  3DEF DA          	push d
0145+  3DF0             gets_loop:
0146+  3DF0 FD 0C       	sti
0147+  3DF2 19 01       	mov al, 1
0148+  3DF4 05 03       	syscall sys_io			; receive in AH
0149+  3DF6 B9 00       	cmp al, 0				; check error code (AL)
0150+  3DF8 C6 F0 3D    	je gets_loop			; if no char received, retry
0151+  3DFB             
0152+  3DFB 76 1B       	cmp ah, 27
0153+  3DFD C6 1E 3E    	je gets_telnet_escape
0154+  3E00 76 0A       	cmp ah, $0A				; LF
0155+  3E02 C6 77 3E    	je gets_end
0156+  3E05 76 0D       	cmp ah, $0D				; CR
0157+  3E07 C6 77 3E    	je gets_end
0158+  3E0A 76 5C       	cmp ah, $5C				; '\\'
0159+  3E0C C6 4E 3E    	je gets_escape
0160+  3E0F             	
0161+  3E0F 76 08       	cmp ah, $08			; check for backspace
0162+  3E11 C6 1A 3E    	je gets_backspace
0163+  3E14             
0164+  3E14 1A          	mov al, ah
0165+  3E15 3E          	mov [d], al
0166+  3E16 79          	inc d
0167+  3E17 0A F0 3D    	jmp gets_loop
0168+  3E1A             gets_backspace:
0169+  3E1A 7F          	dec d
0170+  3E1B 0A F0 3D    	jmp gets_loop
0171+  3E1E             gets_telnet_escape:
0172+  3E1E FD 0C       	sti
0173+  3E20 19 01       	mov al, 1
0174+  3E22 05 03       	syscall sys_io				; receive in AH without echo
0175+  3E24 B9 00       	cmp al, 0					; check error code (AL)
0176+  3E26 C6 1E 3E    	je gets_telnet_escape		; if no char received, retry
0177+  3E29 76 5B       	cmp ah, '['
0178+  3E2B C7 F0 3D    	jne gets_loop
0179+  3E2E             gets_telnet_escape_phase2:
0180+  3E2E FD 0C       	sti
0181+  3E30 19 01       	mov al, 1
0182+  3E32 05 03       	syscall sys_io					; receive in AH without echo
0183+  3E34 B9 00       	cmp al, 0						; check error code (AL)
0184+  3E36 C6 2E 3E    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  3E39 76 44       	cmp ah, 'D'
0186+  3E3B C6 46 3E    	je gets_left_arrow
0187+  3E3E 76 43       	cmp ah, 'C'
0188+  3E40 C6 4A 3E    	je gets_right_arrow
0189+  3E43 0A F0 3D    	jmp gets_loop
0190+  3E46             gets_left_arrow:
0191+  3E46 7F          	dec d
0192+  3E47 0A F0 3D    	jmp gets_loop
0193+  3E4A             gets_right_arrow:
0194+  3E4A 79          	inc d
0195+  3E4B 0A F0 3D    	jmp gets_loop
0196+  3E4E             gets_escape:
0197+  3E4E FD 0C       	sti
0198+  3E50 19 01       	mov al, 1
0199+  3E52 05 03       	syscall sys_io			; receive in AH
0200+  3E54 B9 00       	cmp al, 0				; check error code (AL)
0201+  3E56 C6 4E 3E    	je gets_escape			; if no char received, retry
0202+  3E59 76 6E       	cmp ah, 'n'
0203+  3E5B C6 69 3E    	je gets_LF
0204+  3E5E 76 72       	cmp ah, 'r'
0205+  3E60 C6 70 3E    	je gets_CR
0206+  3E63 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  3E64 3E          	mov [d], al
0208+  3E65 79          	inc d
0209+  3E66 0A F0 3D    	jmp gets_loop
0210+  3E69             gets_LF:
0211+  3E69 19 0A       	mov al, $0A
0212+  3E6B 3E          	mov [d], al
0213+  3E6C 79          	inc d
0214+  3E6D 0A F0 3D    	jmp gets_loop
0215+  3E70             gets_CR:
0216+  3E70 19 0D       	mov al, $0D
0217+  3E72 3E          	mov [d], al
0218+  3E73 79          	inc d
0219+  3E74 0A F0 3D    	jmp gets_loop
0220+  3E77             gets_end:
0221+  3E77 19 00       	mov al, 0
0222+  3E79 3E          	mov [d], al				; terminate string
0223+  3E7A E7          	pop d
0224+  3E7B E4          	pop a
0225+  3E7C 09          	ret
0226+  3E7D             
0227+  3E7D             
0228+  3E7D             
0229+  3E7D             
0230+  3E7D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  3E7D             ;; INPUT TEXT
0232+  3E7D             ;; terminated with CTRL+D
0233+  3E7D             ;; pointer in D
0234+  3E7D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  3E7D             gettxt:
0236+  3E7D D7          	push a
0237+  3E7E DA          	push d
0238+  3E7F             gettxt_loop:
0239+  3E7F 19 01       	mov al, 1
0240+  3E81 05 03       	syscall sys_io			; receive in AH
0241+  3E83 B9 00       	cmp al, 0				; check error code (AL)
0242+  3E85 C6 7F 3E    	je gettxt_loop		; if no char received, retry
0243+  3E88 76 04       	cmp ah, 4			; EOT
0244+  3E8A C6 C8 3E    	je gettxt_end
0245+  3E8D 76 08       	cmp ah, $08			; check for backspace
0246+  3E8F C6 C4 3E    	je gettxt_backspace
0247+  3E92 76 5C       	cmp ah, $5C				; '\\'
0248+  3E94 C6 9D 3E    	je gettxt_escape
0249+  3E97 1A          	mov al, ah
0250+  3E98 3E          	mov [d], al
0251+  3E99 79          	inc d
0252+  3E9A 0A 7F 3E    	jmp gettxt_loop
0253+  3E9D             gettxt_escape:
0254+  3E9D 19 01       	mov al, 1
0255+  3E9F 05 03       	syscall sys_io			; receive in AH
0256+  3EA1 B9 00       	cmp al, 0				; check error code (AL)
0257+  3EA3 C6 9D 3E    	je gettxt_escape		; if no char received, retry
0258+  3EA6 76 6E       	cmp ah, 'n'
0259+  3EA8 C6 B6 3E    	je gettxt_LF
0260+  3EAB 76 72       	cmp ah, 'r'
0261+  3EAD C6 BD 3E    	je gettxt_CR
0262+  3EB0 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  3EB1 3E          	mov [d], al
0264+  3EB2 79          	inc d
0265+  3EB3 0A 7F 3E    	jmp gettxt_loop
0266+  3EB6             gettxt_LF:
0267+  3EB6 19 0A       	mov al, $0A
0268+  3EB8 3E          	mov [d], al
0269+  3EB9 79          	inc d
0270+  3EBA 0A 7F 3E    	jmp gettxt_loop
0271+  3EBD             gettxt_CR:
0272+  3EBD 19 0D       	mov al, $0D
0273+  3EBF 3E          	mov [d], al
0274+  3EC0 79          	inc d
0275+  3EC1 0A 7F 3E    	jmp gettxt_loop
0276+  3EC4             gettxt_backspace:
0277+  3EC4 7F          	dec d
0278+  3EC5 0A 7F 3E    	jmp gettxt_loop
0279+  3EC8             gettxt_end:
0280+  3EC8 19 00       	mov al, 0
0281+  3ECA 3E          	mov [d], al				; terminate string
0282+  3ECB E7          	pop d
0283+  3ECC E4          	pop a
0284+  3ECD 09          	ret
0285+  3ECE             
0286+  3ECE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  3ECE             ; PRINT NEW LINE
0288+  3ECE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  3ECE             printnl:
0290+  3ECE D7          	push a
0291+  3ECF 10 00 0A    	mov a, $0A00
0292+  3ED2 05 03       	syscall sys_io
0293+  3ED4 10 00 0D    	mov a, $0D00
0294+  3ED7 05 03       	syscall sys_io
0295+  3ED9 E4          	pop a
0296+  3EDA 09          	ret
0297+  3EDB             
0298+  3EDB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  3EDB             ; strtoint
0300+  3EDB             ; 4 digit hex string number in d
0301+  3EDB             ; integer returned in A
0302+  3EDB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  3EDB             strtointx:
0304+  3EDB D8          	push b
0305+  3EDC 32          	mov bl, [d]
0306+  3EDD 37          	mov bh, bl
0307+  3EDE 33 01 00    	mov bl, [d + 1]
0308+  3EE1 07 9C 3D    	call atoi				; convert to int in AL
0309+  3EE4 23          	mov ah, al				; move to AH
0310+  3EE5 33 02 00    	mov bl, [d + 2]
0311+  3EE8 37          	mov bh, bl
0312+  3EE9 33 03 00    	mov bl, [d + 3]
0313+  3EEC 07 9C 3D    	call atoi				; convert to int in AL
0314+  3EEF E5          	pop b
0315+  3EF0 09          	ret
0316+  3EF1             
0317+  3EF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  3EF1             ; strtoint
0319+  3EF1             ; 5 digit base10 string number in d
0320+  3EF1             ; integer returned in A
0321+  3EF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  3EF1             strtoint:
0323+  3EF1 E2          	push si
0324+  3EF2 D8          	push b
0325+  3EF3 D9          	push c
0326+  3EF4 DA          	push d
0327+  3EF5 07 1C 3D    	call strlen			; get string length in C
0328+  3EF8 7E          	dec c
0329+  3EF9 FD 4E       	mov si, d
0330+  3EFB 12          	mov a, c
0331+  3EFC FD 99       	shl a
0332+  3EFE 3B 84 3D    	mov d, table_power
0333+  3F01 59          	add d, a
0334+  3F02 38 00 00    	mov c, 0
0335+  3F05             strtoint_L0:
0336+  3F05 F6          	lodsb			; load ASCII to al
0337+  3F06 B9 00       	cmp al, 0
0338+  3F08 C6 1B 3F    	je strtoint_end
0339+  3F0B 6F 30       	sub al, $30		; make into integer
0340+  3F0D 22 00       	mov ah, 0
0341+  3F0F 2A          	mov b, [d]
0342+  3F10 AC          	mul a, b			; result in B since it fits in 16bits
0343+  3F11 11          	mov a, b
0344+  3F12 28          	mov b, c
0345+  3F13 54          	add a, b
0346+  3F14 39          	mov c, a
0347+  3F15 63 02 00    	sub d, 2
0348+  3F18 0A 05 3F    	jmp strtoint_L0
0349+  3F1B             strtoint_end:
0350+  3F1B 12          	mov a, c
0351+  3F1C E7          	pop d
0352+  3F1D E6          	pop c
0353+  3F1E E5          	pop b
0354+  3F1F EF          	pop si
0355+  3F20 09          	ret
0356+  3F21             
0357+  3F21             
0358+  3F21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  3F21             ; PRINT NULL TERMINATED STRING
0360+  3F21             ; pointer in D
0361+  3F21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  3F21             puts:
0363+  3F21 D7          	push a
0364+  3F22 DA          	push d
0365+  3F23             puts_L1:
0366+  3F23 1E          	mov al, [d]
0367+  3F24 B9 00       	cmp al, 0
0368+  3F26 C6 32 3F    	jz puts_END
0369+  3F29 23          	mov ah, al
0370+  3F2A 19 00       	mov al, 0
0371+  3F2C 05 03       	syscall sys_io
0372+  3F2E 79          	inc d
0373+  3F2F 0A 23 3F    	jmp puts_L1
0374+  3F32             puts_END:
0375+  3F32 E7          	pop d
0376+  3F33 E4          	pop a
0377+  3F34 09          	ret
0378+  3F35             
0379+  3F35             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  3F35             ; PRINT N SIZE STRING
0381+  3F35             ; pointer in D
0382+  3F35             ; size in C
0383+  3F35             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  3F35             putsn:
0385+  3F35 DB          	push al
0386+  3F36 DA          	push d
0387+  3F37 D9          	push c
0388+  3F38             putsn_L0:
0389+  3F38 1E          	mov al, [d]
0390+  3F39 23          	mov ah, al
0391+  3F3A 19 00       	mov al, 0
0392+  3F3C 05 03       	syscall sys_io
0393+  3F3E 79          	inc d
0394+  3F3F 7E          	dec c	
0395+  3F40 C2 00 00    	cmp c, 0
0396+  3F43 C7 38 3F    	jne putsn_L0
0397+  3F46             putsn_end:
0398+  3F46 E6          	pop c
0399+  3F47 E7          	pop d
0400+  3F48 E8          	pop al
0401+  3F49 09          	ret
0402+  3F4A             
0403+  3F4A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  3F4A             ; print 16bit decimal number
0405+  3F4A             ; input number in A
0406+  3F4A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  3F4A             print_u16d:
0408+  3F4A D7          	push a
0409+  3F4B D8          	push b
0410+  3F4C 26 10 27    	mov b, 10000
0411+  3F4F AE          	div a, b			; get 10000 coeff.
0412+  3F50 07 76 3F    	call print_number
0413+  3F53 11          	mov a, b
0414+  3F54 26 E8 03    	mov b, 1000
0415+  3F57 AE          	div a, b			; get 10000 coeff.
0416+  3F58 07 76 3F    	call print_number
0417+  3F5B 11          	mov a, b
0418+  3F5C 26 64 00    	mov b, 100
0419+  3F5F AE          	div a, b
0420+  3F60 07 76 3F    	call print_number
0421+  3F63 11          	mov a, b
0422+  3F64 26 0A 00    	mov b, 10
0423+  3F67 AE          	div a, b
0424+  3F68 07 76 3F    	call print_number
0425+  3F6B 11          	mov a, b
0426+  3F6C 6A 30       	add al, $30
0427+  3F6E 23          	mov ah, al
0428+  3F6F 19 00       	mov al, 0
0429+  3F71 05 03       	syscall sys_io	; print coeff
0430+  3F73 E5          	pop b
0431+  3F74 E4          	pop a
0432+  3F75 09          	ret
0433+  3F76             
0434+  3F76             
0435+  3F76             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  3F76             ; if A == 0, print space
0437+  3F76             ; else print A
0438+  3F76             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  3F76             print_number:
0440+  3F76 6A 30       	add al, $30
0441+  3F78 23          	mov ah, al
0442+  3F79 07 E7 3D    	call putchar
0443+  3F7C 09          	ret
0444+  3F7D             
0445+  3F7D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  3F7D             ; PRINT 16BIT HEX INTEGER
0447+  3F7D             ; integer value in reg B
0448+  3F7D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  3F7D             print_u16x:
0450+  3F7D D7          	push a
0451+  3F7E D8          	push b
0452+  3F7F DD          	push bl
0453+  3F80 30          	mov bl, bh
0454+  3F81 07 AE 3D    	call itoa				; convert bh to char in A
0455+  3F84 2F          	mov bl, al				; save al
0456+  3F85 19 00       	mov al, 0
0457+  3F87 05 03       	syscall sys_io				; display AH
0458+  3F89 24          	mov ah, bl				; retrieve al
0459+  3F8A 19 00       	mov al, 0
0460+  3F8C 05 03       	syscall sys_io				; display AL
0461+  3F8E             
0462+  3F8E EA          	pop bl
0463+  3F8F 07 AE 3D    	call itoa				; convert bh to char in A
0464+  3F92 2F          	mov bl, al				; save al
0465+  3F93 19 00       	mov al, 0
0466+  3F95 05 03       	syscall sys_io				; display AH
0467+  3F97 24          	mov ah, bl				; retrieve al
0468+  3F98 19 00       	mov al, 0
0469+  3F9A 05 03       	syscall sys_io				; display AL
0470+  3F9C             
0471+  3F9C E5          	pop b
0472+  3F9D E4          	pop a
0473+  3F9E 09          	ret
0474+  3F9F             
0475+  3F9F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  3F9F             ; INPUT 16BIT HEX INTEGER
0477+  3F9F             ; read 16bit integer into A
0478+  3F9F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  3F9F             scan_u16x:
0480+  3F9F F8 10 00    	enter 16
0481+  3FA2 D8          	push b
0482+  3FA3 DA          	push d
0483+  3FA4             
0484+  3FA4 FA F1 FF    	lea d, [bp + -15]
0485+  3FA7 07 EE 3D    	call gets				; get number
0486+  3FAA             
0487+  3FAA 32          	mov bl, [d]
0488+  3FAB 37          	mov bh, bl
0489+  3FAC 33 01 00    	mov bl, [d + 1]
0490+  3FAF 07 9C 3D    	call atoi				; convert to int in AL
0491+  3FB2 23          	mov ah, al				; move to AH
0492+  3FB3             
0493+  3FB3 33 02 00    	mov bl, [d + 2]
0494+  3FB6 37          	mov bh, bl
0495+  3FB7 33 03 00    	mov bl, [d + 3]
0496+  3FBA 07 9C 3D    	call atoi				; convert to int in AL
0497+  3FBD             
0498+  3FBD E7          	pop d
0499+  3FBE E5          	pop b
0500+  3FBF F9          	leave
0501+  3FC0 09          	ret
0502+  3FC1             
0503+  3FC1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  3FC1             ; PRINT 8bit HEX INTEGER
0505+  3FC1             ; integer value in reg bl
0506+  3FC1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  3FC1             print_u8x:
0508+  3FC1 D7          	push a
0509+  3FC2 DD          	push bl
0510+  3FC3             
0511+  3FC3 07 AE 3D    	call itoa				; convert bl to char in A
0512+  3FC6 2F          	mov bl, al				; save al
0513+  3FC7 19 00       	mov al, 0
0514+  3FC9 05 03       	syscall sys_io				; display AH
0515+  3FCB 24          	mov ah, bl				; retrieve al
0516+  3FCC 19 00       	mov al, 0
0517+  3FCE 05 03       	syscall sys_io				; display AL
0518+  3FD0             
0519+  3FD0 EA          	pop bl
0520+  3FD1 E4          	pop a
0521+  3FD2 09          	ret
0522+  3FD3             
0523+  3FD3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  3FD3             ; print 8bit decimal unsigned number
0525+  3FD3             ; input number in AL
0526+  3FD3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  3FD3             print_u8d:
0528+  3FD3 D7          	push a
0529+  3FD4 D8          	push b
0530+  3FD5             
0531+  3FD5 22 00       	mov ah, 0
0532+  3FD7 26 64 00    	mov b, 100
0533+  3FDA AE          	div a, b
0534+  3FDB D8          	push b			; save remainder
0535+  3FDC B9 00       	cmp al, 0
0536+  3FDE C6 E8 3F    	je skip100
0537+  3FE1 6A 30       	add al, $30
0538+  3FE3 23          	mov ah, al
0539+  3FE4 19 00       	mov al, 0
0540+  3FE6 05 03       	syscall sys_io	; print coeff
0541+  3FE8             skip100:
0542+  3FE8 E4          	pop a
0543+  3FE9 22 00       	mov ah, 0
0544+  3FEB 26 0A 00    	mov b, 10
0545+  3FEE AE          	div a, b
0546+  3FEF D8          	push b			; save remainder
0547+  3FF0 B9 00       	cmp al, 0
0548+  3FF2 C6 FC 3F    	je skip10
0549+  3FF5 6A 30       	add al, $30
0550+  3FF7 23          	mov ah, al
0551+  3FF8 19 00       	mov al, 0
0552+  3FFA 05 03       	syscall sys_io	; print coeff
0553+  3FFC             skip10:
0554+  3FFC E4          	pop a
0555+  3FFD 1B          	mov al, bl
0556+  3FFE 6A 30       	add al, $30
0557+  4000 23          	mov ah, al
0558+  4001 19 00       	mov al, 0
0559+  4003 05 03       	syscall sys_io	; print coeff
0560+  4005 E5          	pop b
0561+  4006 E4          	pop a
0562+  4007 09          	ret
0563+  4008             
0564+  4008             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  4008             ; INPUT 8BIT HEX INTEGER
0566+  4008             ; read 8bit integer into AL
0567+  4008             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  4008             scan_u8x:
0569+  4008 F8 04 00    	enter 4
0570+  400B D8          	push b
0571+  400C DA          	push d
0572+  400D             
0573+  400D FA FD FF    	lea d, [bp + -3]
0574+  4010 07 EE 3D    	call gets				; get number
0575+  4013             
0576+  4013 32          	mov bl, [d]
0577+  4014 37          	mov bh, bl
0578+  4015 33 01 00    	mov bl, [d + 1]
0579+  4018 07 9C 3D    	call atoi				; convert to int in AL
0580+  401B             
0581+  401B E7          	pop d
0582+  401C E5          	pop b
0583+  401D F9          	leave
0584+  401E 09          	ret
0585+  401F             
0586+  401F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  401F             ; input decimal number
0588+  401F             ; result in A
0589+  401F             ; 655'\0'
0590+  401F             ; low--------high
0591+  401F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  401F             scan_u16d:
0593+  401F F8 08 00    	enter 8
0594+  4022 E2          	push si
0595+  4023 D8          	push b
0596+  4024 D9          	push c
0597+  4025 DA          	push d
0598+  4026 FA F9 FF    	lea d, [bp +- 7]
0599+  4029 07 EE 3D    	call gets
0600+  402C 07 1C 3D    	call strlen			; get string length in C
0601+  402F 7E          	dec c
0602+  4030 FD 4E       	mov si, d
0603+  4032 12          	mov a, c
0604+  4033 FD 99       	shl a
0605+  4035 3B 84 3D    	mov d, table_power
0606+  4038 59          	add d, a
0607+  4039 38 00 00    	mov c, 0
0608+  403C             mul_loop:
0609+  403C F6          	lodsb			; load ASCII to al
0610+  403D B9 00       	cmp al, 0
0611+  403F C6 52 40    	je mul_exit
0612+  4042 6F 30       	sub al, $30		; make into integer
0613+  4044 22 00       	mov ah, 0
0614+  4046 2A          	mov b, [d]
0615+  4047 AC          	mul a, b			; result in B since it fits in 16bits
0616+  4048 11          	mov a, b
0617+  4049 28          	mov b, c
0618+  404A 54          	add a, b
0619+  404B 39          	mov c, a
0620+  404C 63 02 00    	sub d, 2
0621+  404F 0A 3C 40    	jmp mul_loop
0622+  4052             mul_exit:
0623+  4052 12          	mov a, c
0624+  4053 E7          	pop d
0625+  4054 E6          	pop c
0626+  4055 E5          	pop b
0627+  4056 EF          	pop si
0628+  4057 F9          	leave
0629+  4058 09          	ret
8663   4059             ; --- END INCLUDE BLOCK
8664   4059             
8665   4059             
8666   4059             .end
tasm: Number of errors = 0
