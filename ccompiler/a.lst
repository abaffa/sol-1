0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 29 81 04      mov b, [__m]
0011   0405 D7            push a
0012   0406 74            mov d, b
0013   0407 DA            push d
0014   0408 29 81 04      mov b, [__m]
0015   040B D7            push a
0016   040C 74            mov d, b
0017   040D DA            push d
0018   040E 26 00 00      mov b, 0
0019   0411 E7            pop d
0020   0412 10 02 00      mov a, 2
0021   0415 AC            mul a, b
0022   0416 5A            add d, b
0023   0417 2A            mov b, [d]
0024   0418 E4            pop a
0025   0419 D7            push a
0026   041A 11            mov a, b
0027   041B 29 81 04      mov b, [__m]
0028   041E D7            push a
0029   041F 74            mov d, b
0030   0420 DA            push d
0031   0421 26 01 00      mov b, 1
0032   0424 E7            pop d
0033   0425 10 02 00      mov a, 2
0034   0428 AC            mul a, b
0035   0429 5A            add d, b
0036   042A 2A            mov b, [d]
0037   042B E4            pop a
0038   042C 54            add a, b
0039   042D 27            mov b, a
0040   042E E4            pop a
0041   042F E7            pop d
0042   0430 10 02 00      mov a, 2
0043   0433 AC            mul a, b
0044   0434 5A            add d, b
0045   0435 E4            pop a
0046   0436 DA            push d
0047   0437 26 4D 00      mov b, 77
0048   043A E7            pop d
0049   043B FD 43         mov [d], b
0050   043D F9            leave
0051   043E 05 0B         syscall sys_terminate_proc
0052   0440             
0053   0440             scann:
0054   0440 D2            push bp
0055   0441 9B            mov bp, sp
0056   0442 52 02 00      sub sp, 2 ; m
0057   0445             
0058   0445             ; --- BEGIN INLINE ASM BLOCK
0059   0445 07 CD 07      call scan_u16d
0060   0448 45 FF FF      mov [bp + -1], a
0061   044B             ; --- END INLINE ASM BLOCK
0062   044B             
0063   044B FA 05 00      lea d, [bp + 5] ; n
0064   044E 2A            mov b, [d]
0065   044F D8            push b
0066   0450 2C FF FF      mov b, [bp + -1] ; m
0067   0453 E7            pop d
0068   0454 11            mov a, b
0069   0455 43            mov [d], a
0070   0456 F9            leave
0071   0457 09            ret
0072   0458             
0073   0458             printn:
0074   0458 D2            push bp
0075   0459 9B            mov bp, sp
0076   045A             
0077   045A             ; --- BEGIN INLINE ASM BLOCK
0078   045A 17 05 00      mov a, [bp + 5]
0079   045D 07 F8 06      call print_u16d
0080   0460             ; --- END INLINE ASM BLOCK
0081   0460             
0082   0460 F9            leave
0083   0461 09            ret
0084   0462             
0085   0462             print:
0086   0462 D2            push bp
0087   0463 9B            mov bp, sp
0088   0464             
0089   0464             ; --- BEGIN INLINE ASM BLOCK
0090   0464 17 05 00      mov a, [bp + 5]
0091   0467 3C            mov d, a
0092   0468 07 CF 06      call puts
0093   046B             ; --- END INLINE ASM BLOCK
0094   046B             
0095   046B F9            leave
0096   046C 09            ret
0097   046D             ; --- END TEXT BLOCK
0098   046D             
0099   046D             ; --- BEGIN DATA BLOCK
0100   046D 00 00 00 00 __m_data: .fill 20, 0
0100   0471 00 00 00 00 
0100   0475 00 00 00 00 
0100   0479 00 00 00 00 
0100   047D 00 00 00 00 
0101   0481 6D 04       __m: .dw __m_data
0102   0483             ; --- END DATA BLOCK
0103   0483             
0104   0483             ; --- BEGIN INCLUDE BLOCK
0105   0483             .include "lib/stdio.asm"
0001+  0483             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0483             ; stdio.s
0003+  0483             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0483             .include "lib/string.asm"
0001++ 0483             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0483             ; string.s
0003++ 0483             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0483             
0005++ 0483             
0006++ 0483             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0483             ; strrev
0008++ 0483             ; reverse a string
0009++ 0483             ; D = string address
0010++ 0483             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0483             ; 01234
0012++ 0483             strrev:
0013++ 0483 4B          	pusha
0014++ 0484 07 CA 04    	call strlen	; length in C
0015++ 0487 12          	mov a, c
0016++ 0488 AF 01 00    	cmp a, 1
0017++ 048B D0 A5 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 048E 7D          	dec a
0019++ 048F FD 4E       	mov si, d	; beginning of string
0020++ 0491 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0493 59          	add d, a	; end of string
0022++ 0494 12          	mov a, c
0023++ 0495 FD 9B       	shr a		; divide by 2
0024++ 0497 39          	mov c, a	; C now counts the steps
0025++ 0498             strrev_L0:
0026++ 0498 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0499 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 049A 3E          	mov [d], al	; store left char into right side
0029++ 049B 1B          	mov al, bl
0030++ 049C F7          	stosb		; store right-side char into left-side; increase DI
0031++ 049D 7E          	dec c
0032++ 049E 7F          	dec d
0033++ 049F C2 00 00    	cmp c, 0
0034++ 04A2 C7 98 04    	jne strrev_L0
0035++ 04A5             strrev_end:
0036++ 04A5 4C          	popa
0037++ 04A6 09          	ret
0038++ 04A7             	
0039++ 04A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 04A7             ; strchr
0041++ 04A7             ; search string in D for char in AL
0042++ 04A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 04A7             strchr:
0044++ 04A7             strchr_L0:
0045++ 04A7 32          	mov bl, [d]
0046++ 04A8 C1 00       	cmp bl, 0
0047++ 04AA C6 B5 04    	je strchr_end
0048++ 04AD BA          	cmp al, bl
0049++ 04AE C6 B5 04    	je strchr_end
0050++ 04B1 79          	inc d
0051++ 04B2 0A A7 04    	jmp strchr_L0
0052++ 04B5             strchr_end:
0053++ 04B5 1B          	mov al, bl
0054++ 04B6 09          	ret
0055++ 04B7             
0056++ 04B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 04B7             ; strstr
0058++ 04B7             ; find sub-string
0059++ 04B7             ; str1 in SI
0060++ 04B7             ; str2 in DI
0061++ 04B7             ; SI points to end of source string
0062++ 04B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 04B7             strstr:
0064++ 04B7 DB          	push al
0065++ 04B8 DA          	push d
0066++ 04B9 E3          	push di
0067++ 04BA             strstr_loop:
0068++ 04BA F3          	cmpsb					; compare a byte of the strings
0069++ 04BB C7 C6 04    	jne strstr_ret
0070++ 04BE FC 00 00    	lea d, [di + 0]
0071++ 04C1 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 04C3 C7 BA 04    	jne strstr_loop				; equal chars but not at end
0073++ 04C6             strstr_ret:
0074++ 04C6 F0          	pop di
0075++ 04C7 E7          	pop d
0076++ 04C8 E8          	pop al
0077++ 04C9 09          	ret
0078++ 04CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 04CA             ; length of null terminated string
0080++ 04CA             ; result in C
0081++ 04CA             ; pointer in D
0082++ 04CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 04CA             strlen:
0084++ 04CA DA          	push d
0085++ 04CB 38 00 00    	mov c, 0
0086++ 04CE             strlen_L1:
0087++ 04CE BD 00       	cmp byte [d], 0
0088++ 04D0 C6 D8 04    	je strlen_ret
0089++ 04D3 79          	inc d
0090++ 04D4 78          	inc c
0091++ 04D5 0A CE 04    	jmp strlen_L1
0092++ 04D8             strlen_ret:
0093++ 04D8 E7          	pop d
0094++ 04D9 09          	ret
0095++ 04DA             
0096++ 04DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04DA             ; STRCMP
0098++ 04DA             ; compare two strings
0099++ 04DA             ; str1 in SI
0100++ 04DA             ; str2 in DI
0101++ 04DA             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04DA             strcmp:
0104++ 04DA DB          	push al
0105++ 04DB DA          	push d
0106++ 04DC E3          	push di
0107++ 04DD E2          	push si
0108++ 04DE             strcmp_loop:
0109++ 04DE F3          	cmpsb					; compare a byte of the strings
0110++ 04DF C7 EA 04    	jne strcmp_ret
0111++ 04E2 FB FF FF    	lea d, [si +- 1]
0112++ 04E5 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04E7 C7 DE 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04EA             strcmp_ret:
0115++ 04EA EF          	pop si
0116++ 04EB F0          	pop di
0117++ 04EC E7          	pop d
0118++ 04ED E8          	pop al
0119++ 04EE 09          	ret
0120++ 04EF             
0121++ 04EF             
0122++ 04EF             ; STRCPY
0123++ 04EF             ; copy null terminated string from SI to DI
0124++ 04EF             ; source in SI
0125++ 04EF             ; destination in DI
0126++ 04EF             strcpy:
0127++ 04EF E2          	push si
0128++ 04F0 E3          	push di
0129++ 04F1 DB          	push al
0130++ 04F2             strcpy_L1:
0131++ 04F2 F6          	lodsb
0132++ 04F3 F7          	stosb
0133++ 04F4 B9 00       	cmp al, 0
0134++ 04F6 C7 F2 04    	jne strcpy_L1
0135++ 04F9             strcpy_end:
0136++ 04F9 E8          	pop al
0137++ 04FA F0          	pop di
0138++ 04FB EF          	pop si
0139++ 04FC 09          	ret
0140++ 04FD             
0141++ 04FD             ; STRCAT
0142++ 04FD             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04FD             ; source in SI
0144++ 04FD             ; destination in DI
0145++ 04FD             strcat:
0146++ 04FD E2          	push si
0147++ 04FE E3          	push di
0148++ 04FF D7          	push a
0149++ 0500 DA          	push d
0150++ 0501 50          	mov a, di
0151++ 0502 3C          	mov d, a
0152++ 0503             strcat_goto_end_L1:
0153++ 0503 BD 00       	cmp byte[d], 0
0154++ 0505 C6 0C 05    	je strcat_start
0155++ 0508 79          	inc d
0156++ 0509 0A 03 05    	jmp strcat_goto_end_L1
0157++ 050C             strcat_start:
0158++ 050C FD 50       	mov di, d
0159++ 050E             strcat_L1:
0160++ 050E F6          	lodsb
0161++ 050F F7          	stosb
0162++ 0510 B9 00       	cmp al, 0
0163++ 0512 C7 0E 05    	jne strcat_L1
0164++ 0515             strcat_end:
0165++ 0515 E7          	pop d
0166++ 0516 E4          	pop a
0167++ 0517 F0          	pop di
0168++ 0518 EF          	pop si
0169++ 0519 09          	ret
0005+  051A             
0006+  051A 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  051E 34 35 36 37 
0006+  0522 38 39 41 42 
0006+  0526 43 44 45 46 
0007+  052A 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  052E 1B 5B 48 00 
0008+  0532             
0009+  0532 01 00       table_power:.dw 1
0010+  0534 0A 00       			.dw 10
0011+  0536 64 00       			.dw 100
0012+  0538 E8 03       			.dw 1000
0013+  053A 10 27       			.dw 10000
0014+  053C             
0015+  053C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  053C             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  053C             ; ASCII in BL
0018+  053C             ; result in AL
0019+  053C             ; ascii for F = 0100 0110
0020+  053C             ; ascii for 9 = 0011 1001
0021+  053C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  053C             hex_ascii_encode:
0023+  053C 1B          	mov al, bl
0024+  053D 93 40       	test al, $40				; test if letter or number
0025+  053F C7 45 05    	jnz hex_letter
0026+  0542 87 0F       	and al, $0F				; get number
0027+  0544 09          	ret
0028+  0545             hex_letter:
0029+  0545 87 0F       	and al, $0F				; get letter
0030+  0547 6A 09       	add al, 9
0031+  0549 09          	ret
0032+  054A             
0033+  054A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  054A             ; ATOI
0035+  054A             ; 2 letter hex string in B
0036+  054A             ; 8bit integer returned in AL
0037+  054A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  054A             atoi:
0039+  054A D8          	push b
0040+  054B 07 3C 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  054E 30          	mov bl, bh
0042+  054F DB          	push al					; save a
0043+  0550 07 3C 05    	call hex_ascii_encode
0044+  0553 EA          	pop bl	
0045+  0554 FD 9E 04    	shl al, 4
0046+  0557 8C          	or al, bl
0047+  0558 E5          	pop b
0048+  0559 09          	ret	
0049+  055A             
0050+  055A             
0051+  055A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  055A             ; printf
0053+  055A             ; no need for explanations!
0054+  055A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  055A             printf:
0056+  055A 09          	ret
0057+  055B             
0058+  055B             
0059+  055B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  055B             ; scanf
0061+  055B             ; no need for explanations!
0062+  055B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  055B             scanf:
0064+  055B 09          	ret
0065+  055C             
0066+  055C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  055C             ; ITOA
0068+  055C             ; 8bit value in BL
0069+  055C             ; 2 byte ASCII result in A
0070+  055C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  055C             itoa:
0072+  055C DA          	push d
0073+  055D D8          	push b
0074+  055E A7 00       	mov bh, 0
0075+  0560 FD A4 04    	shr bl, 4	
0076+  0563 74          	mov d, b
0077+  0564 1F 1A 05    	mov al, [d + s_hex_digits]
0078+  0567 23          	mov ah, al
0079+  0568             	
0080+  0568 E5          	pop b
0081+  0569 D8          	push b
0082+  056A A7 00       	mov bh, 0
0083+  056C FD 87 0F    	and bl, $0F
0084+  056F 74          	mov d, b
0085+  0570 1F 1A 05    	mov al, [d + s_hex_digits]
0086+  0573 E5          	pop b
0087+  0574 E7          	pop d
0088+  0575 09          	ret
0089+  0576             
0090+  0576             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0576             ; HEX STRING TO BINARY
0092+  0576             ; di = destination address
0093+  0576             ; si = source
0094+  0576             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0576             hex_to_int:
0096+  0576             hex_to_int_L1:
0097+  0576 F6          	lodsb					; load from [SI] to AL
0098+  0577 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0579 C6 86 05    	jz hex_to_int_ret
0100+  057C 36          	mov bh, al
0101+  057D F6          	lodsb
0102+  057E 2F          	mov bl, al
0103+  057F 07 4A 05    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0582 F7          	stosb					; store AL to [DI]
0105+  0583 0A 76 05    	jmp hex_to_int_L1
0106+  0586             hex_to_int_ret:
0107+  0586 09          	ret		
0108+  0587             
0109+  0587             
0110+  0587             
0111+  0587             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0587             ; GETCHAR
0113+  0587             ; char in ah
0114+  0587             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0587             getchar:
0116+  0587 DB          	push al
0117+  0588             getchar_retry:
0118+  0588 FD 0C       	sti
0119+  058A 19 01       	mov al, 1
0120+  058C 05 03       	syscall sys_io			; receive in AH
0121+  058E B9 00       	cmp al, 0			; check if any char was receive
0122+  0590 C6 88 05    	je getchar_retry
0123+  0593 E8          	pop al
0124+  0594 09          	ret
0125+  0595             
0126+  0595             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0595             ; PUTCHAR
0128+  0595             ; char in ah
0129+  0595             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0595             putchar:
0131+  0595 D7          	push a
0132+  0596 19 00       	mov al, 0
0133+  0598 05 03       	syscall sys_io			; char in AH
0134+  059A E4          	pop a
0135+  059B 09          	ret
0136+  059C             
0137+  059C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  059C             ;; INPUT A STRING
0139+  059C             ;; terminates with null
0140+  059C             ;; pointer in D
0141+  059C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  059C             gets:
0143+  059C D7          	push a
0144+  059D DA          	push d
0145+  059E             gets_loop:
0146+  059E FD 0C       	sti
0147+  05A0 19 01       	mov al, 1
0148+  05A2 05 03       	syscall sys_io			; receive in AH
0149+  05A4 B9 00       	cmp al, 0				; check error code (AL)
0150+  05A6 C6 9E 05    	je gets_loop			; if no char received, retry
0151+  05A9             
0152+  05A9 76 1B       	cmp ah, 27
0153+  05AB C6 CC 05    	je gets_telnet_escape
0154+  05AE 76 0A       	cmp ah, $0A				; LF
0155+  05B0 C6 25 06    	je gets_end
0156+  05B3 76 0D       	cmp ah, $0D				; CR
0157+  05B5 C6 25 06    	je gets_end
0158+  05B8 76 5C       	cmp ah, $5C				; '\\'
0159+  05BA C6 FC 05    	je gets_escape
0160+  05BD             	
0161+  05BD 76 08       	cmp ah, $08			; check for backspace
0162+  05BF C6 C8 05    	je gets_backspace
0163+  05C2             
0164+  05C2 1A          	mov al, ah
0165+  05C3 3E          	mov [d], al
0166+  05C4 79          	inc d
0167+  05C5 0A 9E 05    	jmp gets_loop
0168+  05C8             gets_backspace:
0169+  05C8 7F          	dec d
0170+  05C9 0A 9E 05    	jmp gets_loop
0171+  05CC             gets_telnet_escape:
0172+  05CC FD 0C       	sti
0173+  05CE 19 01       	mov al, 1
0174+  05D0 05 03       	syscall sys_io				; receive in AH without echo
0175+  05D2 B9 00       	cmp al, 0					; check error code (AL)
0176+  05D4 C6 CC 05    	je gets_telnet_escape		; if no char received, retry
0177+  05D7 76 5B       	cmp ah, '['
0178+  05D9 C7 9E 05    	jne gets_loop
0179+  05DC             gets_telnet_escape_phase2:
0180+  05DC FD 0C       	sti
0181+  05DE 19 01       	mov al, 1
0182+  05E0 05 03       	syscall sys_io					; receive in AH without echo
0183+  05E2 B9 00       	cmp al, 0						; check error code (AL)
0184+  05E4 C6 DC 05    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  05E7 76 44       	cmp ah, 'D'
0186+  05E9 C6 F4 05    	je gets_left_arrow
0187+  05EC 76 43       	cmp ah, 'C'
0188+  05EE C6 F8 05    	je gets_right_arrow
0189+  05F1 0A 9E 05    	jmp gets_loop
0190+  05F4             gets_left_arrow:
0191+  05F4 7F          	dec d
0192+  05F5 0A 9E 05    	jmp gets_loop
0193+  05F8             gets_right_arrow:
0194+  05F8 79          	inc d
0195+  05F9 0A 9E 05    	jmp gets_loop
0196+  05FC             gets_escape:
0197+  05FC FD 0C       	sti
0198+  05FE 19 01       	mov al, 1
0199+  0600 05 03       	syscall sys_io			; receive in AH
0200+  0602 B9 00       	cmp al, 0				; check error code (AL)
0201+  0604 C6 FC 05    	je gets_escape			; if no char received, retry
0202+  0607 76 6E       	cmp ah, 'n'
0203+  0609 C6 17 06    	je gets_LF
0204+  060C 76 72       	cmp ah, 'r'
0205+  060E C6 1E 06    	je gets_CR
0206+  0611 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0612 3E          	mov [d], al
0208+  0613 79          	inc d
0209+  0614 0A 9E 05    	jmp gets_loop
0210+  0617             gets_LF:
0211+  0617 19 0A       	mov al, $0A
0212+  0619 3E          	mov [d], al
0213+  061A 79          	inc d
0214+  061B 0A 9E 05    	jmp gets_loop
0215+  061E             gets_CR:
0216+  061E 19 0D       	mov al, $0D
0217+  0620 3E          	mov [d], al
0218+  0621 79          	inc d
0219+  0622 0A 9E 05    	jmp gets_loop
0220+  0625             gets_end:
0221+  0625 19 00       	mov al, 0
0222+  0627 3E          	mov [d], al				; terminate string
0223+  0628 E7          	pop d
0224+  0629 E4          	pop a
0225+  062A 09          	ret
0226+  062B             
0227+  062B             
0228+  062B             
0229+  062B             
0230+  062B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  062B             ;; INPUT TEXT
0232+  062B             ;; terminated with CTRL+D
0233+  062B             ;; pointer in D
0234+  062B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  062B             gettxt:
0236+  062B D7          	push a
0237+  062C DA          	push d
0238+  062D             gettxt_loop:
0239+  062D 19 01       	mov al, 1
0240+  062F 05 03       	syscall sys_io			; receive in AH
0241+  0631 B9 00       	cmp al, 0				; check error code (AL)
0242+  0633 C6 2D 06    	je gettxt_loop		; if no char received, retry
0243+  0636 76 04       	cmp ah, 4			; EOT
0244+  0638 C6 76 06    	je gettxt_end
0245+  063B 76 08       	cmp ah, $08			; check for backspace
0246+  063D C6 72 06    	je gettxt_backspace
0247+  0640 76 5C       	cmp ah, $5C				; '\\'
0248+  0642 C6 4B 06    	je gettxt_escape
0249+  0645 1A          	mov al, ah
0250+  0646 3E          	mov [d], al
0251+  0647 79          	inc d
0252+  0648 0A 2D 06    	jmp gettxt_loop
0253+  064B             gettxt_escape:
0254+  064B 19 01       	mov al, 1
0255+  064D 05 03       	syscall sys_io			; receive in AH
0256+  064F B9 00       	cmp al, 0				; check error code (AL)
0257+  0651 C6 4B 06    	je gettxt_escape		; if no char received, retry
0258+  0654 76 6E       	cmp ah, 'n'
0259+  0656 C6 64 06    	je gettxt_LF
0260+  0659 76 72       	cmp ah, 'r'
0261+  065B C6 6B 06    	je gettxt_CR
0262+  065E 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  065F 3E          	mov [d], al
0264+  0660 79          	inc d
0265+  0661 0A 2D 06    	jmp gettxt_loop
0266+  0664             gettxt_LF:
0267+  0664 19 0A       	mov al, $0A
0268+  0666 3E          	mov [d], al
0269+  0667 79          	inc d
0270+  0668 0A 2D 06    	jmp gettxt_loop
0271+  066B             gettxt_CR:
0272+  066B 19 0D       	mov al, $0D
0273+  066D 3E          	mov [d], al
0274+  066E 79          	inc d
0275+  066F 0A 2D 06    	jmp gettxt_loop
0276+  0672             gettxt_backspace:
0277+  0672 7F          	dec d
0278+  0673 0A 2D 06    	jmp gettxt_loop
0279+  0676             gettxt_end:
0280+  0676 19 00       	mov al, 0
0281+  0678 3E          	mov [d], al				; terminate string
0282+  0679 E7          	pop d
0283+  067A E4          	pop a
0284+  067B 09          	ret
0285+  067C             
0286+  067C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  067C             ; PRINT NEW LINE
0288+  067C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  067C             printnl:
0290+  067C D7          	push a
0291+  067D 10 00 0A    	mov a, $0A00
0292+  0680 05 03       	syscall sys_io
0293+  0682 10 00 0D    	mov a, $0D00
0294+  0685 05 03       	syscall sys_io
0295+  0687 E4          	pop a
0296+  0688 09          	ret
0297+  0689             
0298+  0689             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0689             ; strtoint
0300+  0689             ; 4 digit hex string number in d
0301+  0689             ; integer returned in A
0302+  0689             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0689             strtointx:
0304+  0689 D8          	push b
0305+  068A 32          	mov bl, [d]
0306+  068B 37          	mov bh, bl
0307+  068C 33 01 00    	mov bl, [d + 1]
0308+  068F 07 4A 05    	call atoi				; convert to int in AL
0309+  0692 23          	mov ah, al				; move to AH
0310+  0693 33 02 00    	mov bl, [d + 2]
0311+  0696 37          	mov bh, bl
0312+  0697 33 03 00    	mov bl, [d + 3]
0313+  069A 07 4A 05    	call atoi				; convert to int in AL
0314+  069D E5          	pop b
0315+  069E 09          	ret
0316+  069F             
0317+  069F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  069F             ; strtoint
0319+  069F             ; 5 digit base10 string number in d
0320+  069F             ; integer returned in A
0321+  069F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  069F             strtoint:
0323+  069F E2          	push si
0324+  06A0 D8          	push b
0325+  06A1 D9          	push c
0326+  06A2 DA          	push d
0327+  06A3 07 CA 04    	call strlen			; get string length in C
0328+  06A6 7E          	dec c
0329+  06A7 FD 4E       	mov si, d
0330+  06A9 12          	mov a, c
0331+  06AA FD 99       	shl a
0332+  06AC 3B 32 05    	mov d, table_power
0333+  06AF 59          	add d, a
0334+  06B0 38 00 00    	mov c, 0
0335+  06B3             strtoint_L0:
0336+  06B3 F6          	lodsb			; load ASCII to al
0337+  06B4 B9 00       	cmp al, 0
0338+  06B6 C6 C9 06    	je strtoint_end
0339+  06B9 6F 30       	sub al, $30		; make into integer
0340+  06BB 22 00       	mov ah, 0
0341+  06BD 2A          	mov b, [d]
0342+  06BE AC          	mul a, b			; result in B since it fits in 16bits
0343+  06BF 11          	mov a, b
0344+  06C0 28          	mov b, c
0345+  06C1 54          	add a, b
0346+  06C2 39          	mov c, a
0347+  06C3 63 02 00    	sub d, 2
0348+  06C6 0A B3 06    	jmp strtoint_L0
0349+  06C9             strtoint_end:
0350+  06C9 12          	mov a, c
0351+  06CA E7          	pop d
0352+  06CB E6          	pop c
0353+  06CC E5          	pop b
0354+  06CD EF          	pop si
0355+  06CE 09          	ret
0356+  06CF             
0357+  06CF             
0358+  06CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  06CF             ; PRINT NULL TERMINATED STRING
0360+  06CF             ; pointer in D
0361+  06CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  06CF             puts:
0363+  06CF D7          	push a
0364+  06D0 DA          	push d
0365+  06D1             puts_L1:
0366+  06D1 1E          	mov al, [d]
0367+  06D2 B9 00       	cmp al, 0
0368+  06D4 C6 E0 06    	jz puts_END
0369+  06D7 23          	mov ah, al
0370+  06D8 19 00       	mov al, 0
0371+  06DA 05 03       	syscall sys_io
0372+  06DC 79          	inc d
0373+  06DD 0A D1 06    	jmp puts_L1
0374+  06E0             puts_END:
0375+  06E0 E7          	pop d
0376+  06E1 E4          	pop a
0377+  06E2 09          	ret
0378+  06E3             
0379+  06E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  06E3             ; PRINT N SIZE STRING
0381+  06E3             ; pointer in D
0382+  06E3             ; size in C
0383+  06E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  06E3             putsn:
0385+  06E3 DB          	push al
0386+  06E4 DA          	push d
0387+  06E5 D9          	push c
0388+  06E6             putsn_L0:
0389+  06E6 1E          	mov al, [d]
0390+  06E7 23          	mov ah, al
0391+  06E8 19 00       	mov al, 0
0392+  06EA 05 03       	syscall sys_io
0393+  06EC 79          	inc d
0394+  06ED 7E          	dec c	
0395+  06EE C2 00 00    	cmp c, 0
0396+  06F1 C7 E6 06    	jne putsn_L0
0397+  06F4             putsn_end:
0398+  06F4 E6          	pop c
0399+  06F5 E7          	pop d
0400+  06F6 E8          	pop al
0401+  06F7 09          	ret
0402+  06F8             
0403+  06F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  06F8             ; print 16bit decimal number
0405+  06F8             ; input number in A
0406+  06F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  06F8             print_u16d:
0408+  06F8 D7          	push a
0409+  06F9 D8          	push b
0410+  06FA 26 10 27    	mov b, 10000
0411+  06FD AE          	div a, b			; get 10000 coeff.
0412+  06FE 07 24 07    	call print_number
0413+  0701 11          	mov a, b
0414+  0702 26 E8 03    	mov b, 1000
0415+  0705 AE          	div a, b			; get 10000 coeff.
0416+  0706 07 24 07    	call print_number
0417+  0709 11          	mov a, b
0418+  070A 26 64 00    	mov b, 100
0419+  070D AE          	div a, b
0420+  070E 07 24 07    	call print_number
0421+  0711 11          	mov a, b
0422+  0712 26 0A 00    	mov b, 10
0423+  0715 AE          	div a, b
0424+  0716 07 24 07    	call print_number
0425+  0719 11          	mov a, b
0426+  071A 6A 30       	add al, $30
0427+  071C 23          	mov ah, al
0428+  071D 19 00       	mov al, 0
0429+  071F 05 03       	syscall sys_io	; print coeff
0430+  0721 E5          	pop b
0431+  0722 E4          	pop a
0432+  0723 09          	ret
0433+  0724             
0434+  0724             
0435+  0724             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0724             ; if A == 0, print space
0437+  0724             ; else print A
0438+  0724             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  0724             print_number:
0440+  0724 6A 30       	add al, $30
0441+  0726 23          	mov ah, al
0442+  0727 07 95 05    	call putchar
0443+  072A 09          	ret
0444+  072B             
0445+  072B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  072B             ; PRINT 16BIT HEX INTEGER
0447+  072B             ; integer value in reg B
0448+  072B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  072B             print_u16x:
0450+  072B D7          	push a
0451+  072C D8          	push b
0452+  072D DD          	push bl
0453+  072E 30          	mov bl, bh
0454+  072F 07 5C 05    	call itoa				; convert bh to char in A
0455+  0732 2F          	mov bl, al				; save al
0456+  0733 19 00       	mov al, 0
0457+  0735 05 03       	syscall sys_io				; display AH
0458+  0737 24          	mov ah, bl				; retrieve al
0459+  0738 19 00       	mov al, 0
0460+  073A 05 03       	syscall sys_io				; display AL
0461+  073C             
0462+  073C EA          	pop bl
0463+  073D 07 5C 05    	call itoa				; convert bh to char in A
0464+  0740 2F          	mov bl, al				; save al
0465+  0741 19 00       	mov al, 0
0466+  0743 05 03       	syscall sys_io				; display AH
0467+  0745 24          	mov ah, bl				; retrieve al
0468+  0746 19 00       	mov al, 0
0469+  0748 05 03       	syscall sys_io				; display AL
0470+  074A             
0471+  074A E5          	pop b
0472+  074B E4          	pop a
0473+  074C 09          	ret
0474+  074D             
0475+  074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  074D             ; INPUT 16BIT HEX INTEGER
0477+  074D             ; read 16bit integer into A
0478+  074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  074D             scan_u16x:
0480+  074D F8 10 00    	enter 16
0481+  0750 D8          	push b
0482+  0751 DA          	push d
0483+  0752             
0484+  0752 FA F1 FF    	lea d, [bp + -15]
0485+  0755 07 9C 05    	call gets				; get number
0486+  0758             
0487+  0758 32          	mov bl, [d]
0488+  0759 37          	mov bh, bl
0489+  075A 33 01 00    	mov bl, [d + 1]
0490+  075D 07 4A 05    	call atoi				; convert to int in AL
0491+  0760 23          	mov ah, al				; move to AH
0492+  0761             
0493+  0761 33 02 00    	mov bl, [d + 2]
0494+  0764 37          	mov bh, bl
0495+  0765 33 03 00    	mov bl, [d + 3]
0496+  0768 07 4A 05    	call atoi				; convert to int in AL
0497+  076B             
0498+  076B E7          	pop d
0499+  076C E5          	pop b
0500+  076D F9          	leave
0501+  076E 09          	ret
0502+  076F             
0503+  076F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  076F             ; PRINT 8bit HEX INTEGER
0505+  076F             ; integer value in reg bl
0506+  076F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  076F             print_u8x:
0508+  076F D7          	push a
0509+  0770 DD          	push bl
0510+  0771             
0511+  0771 07 5C 05    	call itoa				; convert bl to char in A
0512+  0774 2F          	mov bl, al				; save al
0513+  0775 19 00       	mov al, 0
0514+  0777 05 03       	syscall sys_io				; display AH
0515+  0779 24          	mov ah, bl				; retrieve al
0516+  077A 19 00       	mov al, 0
0517+  077C 05 03       	syscall sys_io				; display AL
0518+  077E             
0519+  077E EA          	pop bl
0520+  077F E4          	pop a
0521+  0780 09          	ret
0522+  0781             
0523+  0781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0781             ; print 8bit decimal unsigned number
0525+  0781             ; input number in AL
0526+  0781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0781             print_u8d:
0528+  0781 D7          	push a
0529+  0782 D8          	push b
0530+  0783             
0531+  0783 22 00       	mov ah, 0
0532+  0785 26 64 00    	mov b, 100
0533+  0788 AE          	div a, b
0534+  0789 D8          	push b			; save remainder
0535+  078A B9 00       	cmp al, 0
0536+  078C C6 96 07    	je skip100
0537+  078F 6A 30       	add al, $30
0538+  0791 23          	mov ah, al
0539+  0792 19 00       	mov al, 0
0540+  0794 05 03       	syscall sys_io	; print coeff
0541+  0796             skip100:
0542+  0796 E4          	pop a
0543+  0797 22 00       	mov ah, 0
0544+  0799 26 0A 00    	mov b, 10
0545+  079C AE          	div a, b
0546+  079D D8          	push b			; save remainder
0547+  079E B9 00       	cmp al, 0
0548+  07A0 C6 AA 07    	je skip10
0549+  07A3 6A 30       	add al, $30
0550+  07A5 23          	mov ah, al
0551+  07A6 19 00       	mov al, 0
0552+  07A8 05 03       	syscall sys_io	; print coeff
0553+  07AA             skip10:
0554+  07AA E4          	pop a
0555+  07AB 1B          	mov al, bl
0556+  07AC 6A 30       	add al, $30
0557+  07AE 23          	mov ah, al
0558+  07AF 19 00       	mov al, 0
0559+  07B1 05 03       	syscall sys_io	; print coeff
0560+  07B3 E5          	pop b
0561+  07B4 E4          	pop a
0562+  07B5 09          	ret
0563+  07B6             
0564+  07B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  07B6             ; INPUT 8BIT HEX INTEGER
0566+  07B6             ; read 8bit integer into AL
0567+  07B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  07B6             scan_u8x:
0569+  07B6 F8 04 00    	enter 4
0570+  07B9 D8          	push b
0571+  07BA DA          	push d
0572+  07BB             
0573+  07BB FA FD FF    	lea d, [bp + -3]
0574+  07BE 07 9C 05    	call gets				; get number
0575+  07C1             
0576+  07C1 32          	mov bl, [d]
0577+  07C2 37          	mov bh, bl
0578+  07C3 33 01 00    	mov bl, [d + 1]
0579+  07C6 07 4A 05    	call atoi				; convert to int in AL
0580+  07C9             
0581+  07C9 E7          	pop d
0582+  07CA E5          	pop b
0583+  07CB F9          	leave
0584+  07CC 09          	ret
0585+  07CD             
0586+  07CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  07CD             ; input decimal number
0588+  07CD             ; result in A
0589+  07CD             ; 655'\0'
0590+  07CD             ; low--------high
0591+  07CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  07CD             scan_u16d:
0593+  07CD F8 08 00    	enter 8
0594+  07D0 E2          	push si
0595+  07D1 D8          	push b
0596+  07D2 D9          	push c
0597+  07D3 DA          	push d
0598+  07D4 FA F9 FF    	lea d, [bp +- 7]
0599+  07D7 07 9C 05    	call gets
0600+  07DA 07 CA 04    	call strlen			; get string length in C
0601+  07DD 7E          	dec c
0602+  07DE FD 4E       	mov si, d
0603+  07E0 12          	mov a, c
0604+  07E1 FD 99       	shl a
0605+  07E3 3B 32 05    	mov d, table_power
0606+  07E6 59          	add d, a
0607+  07E7 38 00 00    	mov c, 0
0608+  07EA             mul_loop:
0609+  07EA F6          	lodsb			; load ASCII to al
0610+  07EB B9 00       	cmp al, 0
0611+  07ED C6 00 08    	je mul_exit
0612+  07F0 6F 30       	sub al, $30		; make into integer
0613+  07F2 22 00       	mov ah, 0
0614+  07F4 2A          	mov b, [d]
0615+  07F5 AC          	mul a, b			; result in B since it fits in 16bits
0616+  07F6 11          	mov a, b
0617+  07F7 28          	mov b, c
0618+  07F8 54          	add a, b
0619+  07F9 39          	mov c, a
0620+  07FA 63 02 00    	sub d, 2
0621+  07FD 0A EA 07    	jmp mul_loop
0622+  0800             mul_exit:
0623+  0800 12          	mov a, c
0624+  0801 E7          	pop d
0625+  0802 E6          	pop c
0626+  0803 E5          	pop b
0627+  0804 EF          	pop si
0628+  0805 F9          	leave
0629+  0806 09          	ret
0106   0807             ; --- END INCLUDE BLOCK
0107   0807             
0108   0807             
0109   0807             .end
tasm: Number of errors = 0
