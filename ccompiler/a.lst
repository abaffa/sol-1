0001   0000             ; --- FILENAME: life.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; n
0011   0408 26 76 22      mov b, _string_0
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 07 F0 04      call print
0015   0411 51 02 00      add sp, 2
0016   0414 07 FB 04      call getn
0017   0417 D7            push a
0018   0418 11            mov a, b
0019   0419 45 FD FF      mov [bp + -3], a ; n
0020   041C E4            pop a
0021   041D 07 65 04      call init_game
0022   0420             _for1_init:
0023   0420 26 00 00      mov b, 0
0024   0423 D7            push a
0025   0424 11            mov a, b
0026   0425 45 FF FF      mov [bp + -1], a ; i
0027   0428 E4            pop a
0028   0429             _for1_cond:
0029   0429 2C FF FF      mov b, [bp + -1] ; i
0030   042C D7            push a
0031   042D 11            mov a, b
0032   042E 2C FD FF      mov b, [bp + -3] ; n
0033   0431 B0            cmp a, b
0034   0432 0E            lodflgs
0035   0433 87 02         and al, %00000010 ; <
0036   0435 B9 00         cmp al, 0
0037   0437 0E            lodflgs
0038   0438 96            not al
0039   0439 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0040   043B 22 00         mov ah, 0
0041   043D 27            mov b, a
0042   043E E4            pop a
0043   043F C0 00 00      cmp b, 0
0044   0442 C6 5F 04      je _for1_exit
0045   0445             _for1_block:
0046   0445             
0047   0445             ; --- BEGIN INLINE ASM BLOCK
0048   0445 3B 33 23      mov d, s_telnet_clear
0049   0448 07 D8 24      call puts
0050   044B             ; --- END INLINE ASM BLOCK
0051   044B             
0052   044B 07 0B 05      call print_game
0053   044E 07 BF 05      call update_game
0054   0451             _for1_update:
0055   0451 2C FF FF      mov b, [bp + -1] ; i
0056   0454 FD 77         inc b
0057   0456 D7            push a
0058   0457 11            mov a, b
0059   0458 45 FF FF      mov [bp + -1], a ; i
0060   045B E4            pop a
0061   045C 0A 29 04      jmp _for1_cond
0062   045F             _for1_exit:
0063   045F 26 00 00      mov b, 0
0064   0462 F9            leave
0065   0463 05 0B         syscall sys_terminate_proc
0066   0465             init_game:
0067   0465 D2            push bp
0068   0466 9B            mov bp, sp
0069   0467 29 F2 15      mov b, [curr_state]
0070   046A 74            mov d, b
0071   046B 26 04 00      mov b, 4
0072   046E 10 50 00      mov a, 80
0073   0471 AC            mul a, b
0074   0472 5A            add d, b
0075   0473 26 04 00      mov b, 4
0076   0476 10 02 00      mov a, 2
0077   0479 AC            mul a, b
0078   047A 5A            add d, b
0079   047B DA            push d
0080   047C 26 01 00      mov b, 1
0081   047F E7            pop d
0082   0480 11            mov a, b
0083   0481 43            mov [d], a
0084   0482 29 F2 15      mov b, [curr_state]
0085   0485 74            mov d, b
0086   0486 26 04 00      mov b, 4
0087   0489 10 50 00      mov a, 80
0088   048C AC            mul a, b
0089   048D 5A            add d, b
0090   048E 26 05 00      mov b, 5
0091   0491 10 02 00      mov a, 2
0092   0494 AC            mul a, b
0093   0495 5A            add d, b
0094   0496 DA            push d
0095   0497 26 01 00      mov b, 1
0096   049A E7            pop d
0097   049B 11            mov a, b
0098   049C 43            mov [d], a
0099   049D 29 F2 15      mov b, [curr_state]
0100   04A0 74            mov d, b
0101   04A1 26 04 00      mov b, 4
0102   04A4 10 50 00      mov a, 80
0103   04A7 AC            mul a, b
0104   04A8 5A            add d, b
0105   04A9 26 06 00      mov b, 6
0106   04AC 10 02 00      mov a, 2
0107   04AF AC            mul a, b
0108   04B0 5A            add d, b
0109   04B1 DA            push d
0110   04B2 26 01 00      mov b, 1
0111   04B5 E7            pop d
0112   04B6 11            mov a, b
0113   04B7 43            mov [d], a
0114   04B8 29 F2 15      mov b, [curr_state]
0115   04BB 74            mov d, b
0116   04BC 26 03 00      mov b, 3
0117   04BF 10 50 00      mov a, 80
0118   04C2 AC            mul a, b
0119   04C3 5A            add d, b
0120   04C4 26 06 00      mov b, 6
0121   04C7 10 02 00      mov a, 2
0122   04CA AC            mul a, b
0123   04CB 5A            add d, b
0124   04CC DA            push d
0125   04CD 26 01 00      mov b, 1
0126   04D0 E7            pop d
0127   04D1 11            mov a, b
0128   04D2 43            mov [d], a
0129   04D3 29 F2 15      mov b, [curr_state]
0130   04D6 74            mov d, b
0131   04D7 26 02 00      mov b, 2
0132   04DA 10 50 00      mov a, 80
0133   04DD AC            mul a, b
0134   04DE 5A            add d, b
0135   04DF 26 05 00      mov b, 5
0136   04E2 10 02 00      mov a, 2
0137   04E5 AC            mul a, b
0138   04E6 5A            add d, b
0139   04E7 DA            push d
0140   04E8 26 01 00      mov b, 1
0141   04EB E7            pop d
0142   04EC 11            mov a, b
0143   04ED 43            mov [d], a
0144   04EE F9            leave
0145   04EF 09            ret
0146   04F0             print:
0147   04F0 D2            push bp
0148   04F1 9B            mov bp, sp
0149   04F2             
0150   04F2             ; --- BEGIN INLINE ASM BLOCK
0151   04F2 17 05 00      mov a, [bp + 5]
0152   04F5 3C            mov d, a
0153   04F6 07 D8 24      call puts
0154   04F9             ; --- END INLINE ASM BLOCK
0155   04F9             
0156   04F9 F9            leave
0157   04FA 09            ret
0158   04FB             getn:
0159   04FB D2            push bp
0160   04FC 9B            mov bp, sp
0161   04FD 52 02 00      sub sp, 2 ; n
0162   0500             
0163   0500             ; --- BEGIN INLINE ASM BLOCK
0164   0500 07 D6 25      call scan_u16d
0165   0503 45 FF FF      mov [bp + -1], a
0166   0506             ; --- END INLINE ASM BLOCK
0167   0506             
0168   0506 2C FF FF      mov b, [bp + -1] ; n
0169   0509 F9            leave
0170   050A 09            ret
0171   050B             print_game:
0172   050B D2            push bp
0173   050C 9B            mov bp, sp
0174   050D 52 02 00      sub sp, 2 ; i
0175   0510 52 02 00      sub sp, 2 ; j
0176   0513             _for2_init:
0177   0513 26 00 00      mov b, 0
0178   0516 D7            push a
0179   0517 11            mov a, b
0180   0518 45 FF FF      mov [bp + -1], a ; i
0181   051B E4            pop a
0182   051C             _for2_cond:
0183   051C 2C FF FF      mov b, [bp + -1] ; i
0184   051F D7            push a
0185   0520 11            mov a, b
0186   0521 26 28 00      mov b, 40
0187   0524 B0            cmp a, b
0188   0525 0E            lodflgs
0189   0526 87 02         and al, %00000010 ; <
0190   0528 B9 00         cmp al, 0
0191   052A 0E            lodflgs
0192   052B 96            not al
0193   052C 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0194   052E 22 00         mov ah, 0
0195   0530 27            mov b, a
0196   0531 E4            pop a
0197   0532 C0 00 00      cmp b, 0
0198   0535 C6 BD 05      je _for2_exit
0199   0538             _for2_block:
0200   0538             _for3_init:
0201   0538 26 00 00      mov b, 0
0202   053B D7            push a
0203   053C 11            mov a, b
0204   053D 45 FD FF      mov [bp + -3], a ; j
0205   0540 E4            pop a
0206   0541             _for3_cond:
0207   0541 2C FD FF      mov b, [bp + -3] ; j
0208   0544 D7            push a
0209   0545 11            mov a, b
0210   0546 26 28 00      mov b, 40
0211   0549 B0            cmp a, b
0212   054A 0E            lodflgs
0213   054B 87 02         and al, %00000010 ; <
0214   054D B9 00         cmp al, 0
0215   054F 0E            lodflgs
0216   0550 96            not al
0217   0551 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0218   0553 22 00         mov ah, 0
0219   0555 27            mov b, a
0220   0556 E4            pop a
0221   0557 C0 00 00      cmp b, 0
0222   055A C6 A3 05      je _for3_exit
0223   055D             _for3_block:
0224   055D             _if4_cond:
0225   055D 29 F2 15      mov b, [curr_state]
0226   0560 D7            push a
0227   0561 74            mov d, b
0228   0562 2C FF FF      mov b, [bp + -1] ; i
0229   0565 10 50 00      mov a, 80
0230   0568 AC            mul a, b
0231   0569 5A            add d, b
0232   056A 2C FD FF      mov b, [bp + -3] ; j
0233   056D 10 02 00      mov a, 2
0234   0570 AC            mul a, b
0235   0571 5A            add d, b
0236   0572 2A            mov b, [d]
0237   0573 E4            pop a
0238   0574 C0 00 00      cmp b, 0
0239   0577 C6 89 05      je _if4_else
0240   057A             _if4_true:
0241   057A 26 84 22      mov b, _string_1
0242   057D FD AB         swp b
0243   057F D8            push b
0244   0580 07 F0 04      call print
0245   0583 51 02 00      add sp, 2
0246   0586 0A 95 05      jmp _if4_exit
0247   0589             _if4_else:
0248   0589 26 87 22      mov b, _string_2
0249   058C FD AB         swp b
0250   058E D8            push b
0251   058F 07 F0 04      call print
0252   0592 51 02 00      add sp, 2
0253   0595             _if4_exit:
0254   0595             _for3_update:
0255   0595 2C FD FF      mov b, [bp + -3] ; j
0256   0598 FD 77         inc b
0257   059A D7            push a
0258   059B 11            mov a, b
0259   059C 45 FD FF      mov [bp + -3], a ; j
0260   059F E4            pop a
0261   05A0 0A 41 05      jmp _for3_cond
0262   05A3             _for3_exit:
0263   05A3 26 8A 22      mov b, _string_3
0264   05A6 FD AB         swp b
0265   05A8 D8            push b
0266   05A9 07 F0 04      call print
0267   05AC 51 02 00      add sp, 2
0268   05AF             _for2_update:
0269   05AF 2C FF FF      mov b, [bp + -1] ; i
0270   05B2 FD 77         inc b
0271   05B4 D7            push a
0272   05B5 11            mov a, b
0273   05B6 45 FF FF      mov [bp + -1], a ; i
0274   05B9 E4            pop a
0275   05BA 0A 1C 05      jmp _for2_cond
0276   05BD             _for2_exit:
0277   05BD F9            leave
0278   05BE 09            ret
0279   05BF             update_game:
0280   05BF D2            push bp
0281   05C0 9B            mov bp, sp
0282   05C1 52 02 00      sub sp, 2 ; i
0283   05C4 52 02 00      sub sp, 2 ; j
0284   05C7 52 02 00      sub sp, 2 ; ni
0285   05CA 52 02 00      sub sp, 2 ; nj
0286   05CD 52 02 00      sub sp, 2 ; count
0287   05D0             _for5_init:
0288   05D0 26 00 00      mov b, 0
0289   05D3 D7            push a
0290   05D4 11            mov a, b
0291   05D5 45 FF FF      mov [bp + -1], a ; i
0292   05D8 E4            pop a
0293   05D9             _for5_cond:
0294   05D9 2C FF FF      mov b, [bp + -1] ; i
0295   05DC D7            push a
0296   05DD 11            mov a, b
0297   05DE 26 28 00      mov b, 40
0298   05E1 B0            cmp a, b
0299   05E2 0E            lodflgs
0300   05E3 87 02         and al, %00000010 ; <
0301   05E5 B9 00         cmp al, 0
0302   05E7 0E            lodflgs
0303   05E8 96            not al
0304   05E9 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0305   05EB 22 00         mov ah, 0
0306   05ED 27            mov b, a
0307   05EE E4            pop a
0308   05EF C0 00 00      cmp b, 0
0309   05F2 C6 65 06      je _for5_exit
0310   05F5             _for5_block:
0311   05F5             _for6_init:
0312   05F5 26 00 00      mov b, 0
0313   05F8 D7            push a
0314   05F9 11            mov a, b
0315   05FA 45 FD FF      mov [bp + -3], a ; j
0316   05FD E4            pop a
0317   05FE             _for6_cond:
0318   05FE 2C FD FF      mov b, [bp + -3] ; j
0319   0601 D7            push a
0320   0602 11            mov a, b
0321   0603 26 28 00      mov b, 40
0322   0606 B0            cmp a, b
0323   0607 0E            lodflgs
0324   0608 87 02         and al, %00000010 ; <
0325   060A B9 00         cmp al, 0
0326   060C 0E            lodflgs
0327   060D 96            not al
0328   060E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0329   0610 22 00         mov ah, 0
0330   0612 27            mov b, a
0331   0613 E4            pop a
0332   0614 C0 00 00      cmp b, 0
0333   0617 C6 57 06      je _for6_exit
0334   061A             _for6_block:
0335   061A 29 74 22      mov b, [next_state]
0336   061D 74            mov d, b
0337   061E 2C FF FF      mov b, [bp + -1] ; i
0338   0621 10 50 00      mov a, 80
0339   0624 AC            mul a, b
0340   0625 5A            add d, b
0341   0626 2C FD FF      mov b, [bp + -3] ; j
0342   0629 10 02 00      mov a, 2
0343   062C AC            mul a, b
0344   062D 5A            add d, b
0345   062E DA            push d
0346   062F 29 F2 15      mov b, [curr_state]
0347   0632 D7            push a
0348   0633 74            mov d, b
0349   0634 2C FF FF      mov b, [bp + -1] ; i
0350   0637 10 50 00      mov a, 80
0351   063A AC            mul a, b
0352   063B 5A            add d, b
0353   063C 2C FD FF      mov b, [bp + -3] ; j
0354   063F 10 02 00      mov a, 2
0355   0642 AC            mul a, b
0356   0643 5A            add d, b
0357   0644 2A            mov b, [d]
0358   0645 E4            pop a
0359   0646 E7            pop d
0360   0647 11            mov a, b
0361   0648 43            mov [d], a
0362   0649             _for6_update:
0363   0649 2C FD FF      mov b, [bp + -3] ; j
0364   064C FD 77         inc b
0365   064E D7            push a
0366   064F 11            mov a, b
0367   0650 45 FD FF      mov [bp + -3], a ; j
0368   0653 E4            pop a
0369   0654 0A FE 05      jmp _for6_cond
0370   0657             _for6_exit:
0371   0657             _for5_update:
0372   0657 2C FF FF      mov b, [bp + -1] ; i
0373   065A FD 77         inc b
0374   065C D7            push a
0375   065D 11            mov a, b
0376   065E 45 FF FF      mov [bp + -1], a ; i
0377   0661 E4            pop a
0378   0662 0A D9 05      jmp _for5_cond
0379   0665             _for5_exit:
0380   0665             _for7_init:
0381   0665 26 01 00      mov b, 1
0382   0668 D7            push a
0383   0669 11            mov a, b
0384   066A 45 FF FF      mov [bp + -1], a ; i
0385   066D E4            pop a
0386   066E             _for7_cond:
0387   066E 2C FF FF      mov b, [bp + -1] ; i
0388   0671 D7            push a
0389   0672 11            mov a, b
0390   0673 26 28 00      mov b, 40
0391   0676 D7            push a
0392   0677 11            mov a, b
0393   0678 26 01 00      mov b, 1
0394   067B 60            sub a, b
0395   067C 27            mov b, a
0396   067D E4            pop a
0397   067E B0            cmp a, b
0398   067F 0E            lodflgs
0399   0680 87 02         and al, %00000010 ; <
0400   0682 B9 00         cmp al, 0
0401   0684 0E            lodflgs
0402   0685 96            not al
0403   0686 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0404   0688 22 00         mov ah, 0
0405   068A 27            mov b, a
0406   068B E4            pop a
0407   068C C0 00 00      cmp b, 0
0408   068F C6 D9 08      je _for7_exit
0409   0692             _for7_block:
0410   0692             _for8_init:
0411   0692 26 01 00      mov b, 1
0412   0695 D7            push a
0413   0696 11            mov a, b
0414   0697 45 FD FF      mov [bp + -3], a ; j
0415   069A E4            pop a
0416   069B             _for8_cond:
0417   069B 2C FD FF      mov b, [bp + -3] ; j
0418   069E D7            push a
0419   069F 11            mov a, b
0420   06A0 26 28 00      mov b, 40
0421   06A3 D7            push a
0422   06A4 11            mov a, b
0423   06A5 26 01 00      mov b, 1
0424   06A8 60            sub a, b
0425   06A9 27            mov b, a
0426   06AA E4            pop a
0427   06AB B0            cmp a, b
0428   06AC 0E            lodflgs
0429   06AD 87 02         and al, %00000010 ; <
0430   06AF B9 00         cmp al, 0
0431   06B1 0E            lodflgs
0432   06B2 96            not al
0433   06B3 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0434   06B5 22 00         mov ah, 0
0435   06B7 27            mov b, a
0436   06B8 E4            pop a
0437   06B9 C0 00 00      cmp b, 0
0438   06BC C6 CB 08      je _for8_exit
0439   06BF             _for8_block:
0440   06BF 26 00 00      mov b, 0
0441   06C2 D7            push a
0442   06C3 11            mov a, b
0443   06C4 45 F7 FF      mov [bp + -9], a ; count
0444   06C7 E4            pop a
0445   06C8             _for9_init:
0446   06C8 2C FF FF      mov b, [bp + -1] ; i
0447   06CB D7            push a
0448   06CC 11            mov a, b
0449   06CD 26 01 00      mov b, 1
0450   06D0 60            sub a, b
0451   06D1 27            mov b, a
0452   06D2 11            mov a, b
0453   06D3 45 FB FF      mov [bp + -5], a ; ni
0454   06D6 E4            pop a
0455   06D7             _for9_cond:
0456   06D7 2C FB FF      mov b, [bp + -5] ; ni
0457   06DA D7            push a
0458   06DB 11            mov a, b
0459   06DC 2C FF FF      mov b, [bp + -1] ; i
0460   06DF D7            push a
0461   06E0 11            mov a, b
0462   06E1 26 01 00      mov b, 1
0463   06E4 54            add a, b
0464   06E5 27            mov b, a
0465   06E6 E4            pop a
0466   06E7 B0            cmp a, b
0467   06E8 0E            lodflgs
0468   06E9 87 03         and al, %00000011 ; <=
0469   06EB B9 00         cmp al, 0
0470   06ED 0E            lodflgs
0471   06EE 96            not al
0472   06EF 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0473   06F1 22 00         mov ah, 0
0474   06F3 27            mov b, a
0475   06F4 E4            pop a
0476   06F5 C0 00 00      cmp b, 0
0477   06F8 C6 F2 07      je _for9_exit
0478   06FB             _for9_block:
0479   06FB             _for10_init:
0480   06FB 2C FD FF      mov b, [bp + -3] ; j
0481   06FE D7            push a
0482   06FF 11            mov a, b
0483   0700 26 01 00      mov b, 1
0484   0703 60            sub a, b
0485   0704 27            mov b, a
0486   0705 11            mov a, b
0487   0706 45 F9 FF      mov [bp + -7], a ; nj
0488   0709 E4            pop a
0489   070A             _for10_cond:
0490   070A 2C F9 FF      mov b, [bp + -7] ; nj
0491   070D D7            push a
0492   070E 11            mov a, b
0493   070F 2C FD FF      mov b, [bp + -3] ; j
0494   0712 D7            push a
0495   0713 11            mov a, b
0496   0714 26 01 00      mov b, 1
0497   0717 54            add a, b
0498   0718 27            mov b, a
0499   0719 E4            pop a
0500   071A B0            cmp a, b
0501   071B 0E            lodflgs
0502   071C 87 03         and al, %00000011 ; <=
0503   071E B9 00         cmp al, 0
0504   0720 0E            lodflgs
0505   0721 96            not al
0506   0722 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0507   0724 22 00         mov ah, 0
0508   0726 27            mov b, a
0509   0727 E4            pop a
0510   0728 C0 00 00      cmp b, 0
0511   072B C6 E4 07      je _for10_exit
0512   072E             _for10_block:
0513   072E             _if11_cond:
0514   072E 2C FB FF      mov b, [bp + -5] ; ni
0515   0731 D7            push a
0516   0732 11            mov a, b
0517   0733 26 28 00      mov b, 40
0518   0736 B0            cmp a, b
0519   0737 0E            lodflgs
0520   0738 87 02         and al, %00000010 ; <
0521   073A B9 00         cmp al, 0
0522   073C 0E            lodflgs
0523   073D 96            not al
0524   073E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0525   0740 22 00         mov ah, 0
0526   0742 27            mov b, a
0527   0743 11            mov a, b
0528   0744 AF 00 00      cmp a, 0
0529   0747 0E            lodflgs
0530   0748 96            not al
0531   0749 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0532   074B 2C F9 FF      mov b, [bp + -7] ; nj
0533   074E D7            push a
0534   074F 11            mov a, b
0535   0750 26 28 00      mov b, 40
0536   0753 B0            cmp a, b
0537   0754 0E            lodflgs
0538   0755 87 02         and al, %00000010 ; <
0539   0757 B9 00         cmp al, 0
0540   0759 0E            lodflgs
0541   075A 96            not al
0542   075B 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0543   075D 22 00         mov ah, 0
0544   075F 27            mov b, a
0545   0760 C0 00 00      cmp b, 0
0546   0763 0E            lodflgs
0547   0764 96            not al
0548   0765 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0549   0767 22 00         mov ah, 0
0550   0769 27            mov b, a
0551   076A E4            pop a
0552   076B 86            and a, b
0553   076C 27            mov b, a
0554   076D E4            pop a
0555   076E C0 00 00      cmp b, 0
0556   0771 C6 D6 07      je _if11_exit
0557   0774             _if11_true:
0558   0774             _if12_cond:
0559   0774 2C FB FF      mov b, [bp + -5] ; ni
0560   0777 D7            push a
0561   0778 11            mov a, b
0562   0779 2C FF FF      mov b, [bp + -1] ; i
0563   077C B0            cmp a, b
0564   077D 0E            lodflgs
0565   077E 87 01         and al, %00000001
0566   0780 8F 01         xor al, %00000001 ; !=
0567   0782 B9 00         cmp al, 0
0568   0784 0E            lodflgs
0569   0785 96            not al
0570   0786 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0571   0788 22 00         mov ah, 0
0572   078A 27            mov b, a
0573   078B 11            mov a, b
0574   078C 2C F9 FF      mov b, [bp + -7] ; nj
0575   078F D7            push a
0576   0790 11            mov a, b
0577   0791 2C FD FF      mov b, [bp + -3] ; j
0578   0794 B0            cmp a, b
0579   0795 0E            lodflgs
0580   0796 87 01         and al, %00000001
0581   0798 8F 01         xor al, %00000001 ; !=
0582   079A B9 00         cmp al, 0
0583   079C 0E            lodflgs
0584   079D 96            not al
0585   079E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0586   07A0 22 00         mov ah, 0
0587   07A2 27            mov b, a
0588   07A3 E4            pop a
0589   07A4 8A            or a, b
0590   07A5 27            mov b, a
0591   07A6 E4            pop a
0592   07A7 C0 00 00      cmp b, 0
0593   07AA C6 D3 07      je _if12_exit
0594   07AD             _if12_true:
0595   07AD 2C F7 FF      mov b, [bp + -9] ; count
0596   07B0 D7            push a
0597   07B1 11            mov a, b
0598   07B2 29 F2 15      mov b, [curr_state]
0599   07B5 D7            push a
0600   07B6 74            mov d, b
0601   07B7 2C FB FF      mov b, [bp + -5] ; ni
0602   07BA 10 50 00      mov a, 80
0603   07BD AC            mul a, b
0604   07BE 5A            add d, b
0605   07BF 2C F9 FF      mov b, [bp + -7] ; nj
0606   07C2 10 02 00      mov a, 2
0607   07C5 AC            mul a, b
0608   07C6 5A            add d, b
0609   07C7 2A            mov b, [d]
0610   07C8 E4            pop a
0611   07C9 54            add a, b
0612   07CA 27            mov b, a
0613   07CB 11            mov a, b
0614   07CC 45 F7 FF      mov [bp + -9], a ; count
0615   07CF E4            pop a
0616   07D0 0A D3 07      jmp _if12_exit
0617   07D3             _if12_exit:
0618   07D3 0A D6 07      jmp _if11_exit
0619   07D6             _if11_exit:
0620   07D6             _for10_update:
0621   07D6 2C F9 FF      mov b, [bp + -7] ; nj
0622   07D9 FD 77         inc b
0623   07DB D7            push a
0624   07DC 11            mov a, b
0625   07DD 45 F9 FF      mov [bp + -7], a ; nj
0626   07E0 E4            pop a
0627   07E1 0A 0A 07      jmp _for10_cond
0628   07E4             _for10_exit:
0629   07E4             _for9_update:
0630   07E4 2C FB FF      mov b, [bp + -5] ; ni
0631   07E7 FD 77         inc b
0632   07E9 D7            push a
0633   07EA 11            mov a, b
0634   07EB 45 FB FF      mov [bp + -5], a ; ni
0635   07EE E4            pop a
0636   07EF 0A D7 06      jmp _for9_cond
0637   07F2             _for9_exit:
0638   07F2             _if13_cond:
0639   07F2 29 F2 15      mov b, [curr_state]
0640   07F5 D7            push a
0641   07F6 74            mov d, b
0642   07F7 2C FF FF      mov b, [bp + -1] ; i
0643   07FA 10 50 00      mov a, 80
0644   07FD AC            mul a, b
0645   07FE 5A            add d, b
0646   07FF 2C FD FF      mov b, [bp + -3] ; j
0647   0802 10 02 00      mov a, 2
0648   0805 AC            mul a, b
0649   0806 5A            add d, b
0650   0807 2A            mov b, [d]
0651   0808 E4            pop a
0652   0809 C0 00 00      cmp b, 0
0653   080C C6 6A 08      je _if13_else
0654   080F             _if13_true:
0655   080F             _if14_cond:
0656   080F 2C F7 FF      mov b, [bp + -9] ; count
0657   0812 D7            push a
0658   0813 11            mov a, b
0659   0814 26 02 00      mov b, 2
0660   0817 B0            cmp a, b
0661   0818 0E            lodflgs
0662   0819 87 02         and al, %00000010 ; <
0663   081B B9 00         cmp al, 0
0664   081D 0E            lodflgs
0665   081E 96            not al
0666   081F 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0667   0821 22 00         mov ah, 0
0668   0823 27            mov b, a
0669   0824 11            mov a, b
0670   0825 2C F7 FF      mov b, [bp + -9] ; count
0671   0828 D7            push a
0672   0829 11            mov a, b
0673   082A 26 04 00      mov b, 4
0674   082D B0            cmp a, b
0675   082E 0E            lodflgs
0676   082F 87 03         and al, %00000011
0677   0831 B9 00         cmp al, %00000000
0678   0833 0E            lodflgs
0679   0834 87 01         and al, %00000001 ; >
0680   0836 B9 00         cmp al, 0
0681   0838 0E            lodflgs
0682   0839 96            not al
0683   083A 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0684   083C 22 00         mov ah, 0
0685   083E 27            mov b, a
0686   083F E4            pop a
0687   0840 8A            or a, b
0688   0841 27            mov b, a
0689   0842 E4            pop a
0690   0843 C0 00 00      cmp b, 0
0691   0846 C6 67 08      je _if14_exit
0692   0849             _if14_true:
0693   0849 29 74 22      mov b, [next_state]
0694   084C 74            mov d, b
0695   084D 2C FF FF      mov b, [bp + -1] ; i
0696   0850 10 50 00      mov a, 80
0697   0853 AC            mul a, b
0698   0854 5A            add d, b
0699   0855 2C FD FF      mov b, [bp + -3] ; j
0700   0858 10 02 00      mov a, 2
0701   085B AC            mul a, b
0702   085C 5A            add d, b
0703   085D DA            push d
0704   085E 26 00 00      mov b, 0
0705   0861 E7            pop d
0706   0862 11            mov a, b
0707   0863 43            mov [d], a
0708   0864 0A 67 08      jmp _if14_exit
0709   0867             _if14_exit:
0710   0867 0A BD 08      jmp _if13_exit
0711   086A             _if13_else:
0712   086A             _if15_cond:
0713   086A 2C F7 FF      mov b, [bp + -9] ; count
0714   086D D7            push a
0715   086E 11            mov a, b
0716   086F 26 03 00      mov b, 3
0717   0872 B0            cmp a, b
0718   0873 0E            lodflgs
0719   0874 87 01         and al, %00000001 ; ==
0720   0876 B9 00         cmp al, 0
0721   0878 0E            lodflgs
0722   0879 96            not al
0723   087A 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0724   087C 22 00         mov ah, 0
0725   087E 27            mov b, a
0726   087F 11            mov a, b
0727   0880 2C F7 FF      mov b, [bp + -9] ; count
0728   0883 D7            push a
0729   0884 11            mov a, b
0730   0885 26 04 00      mov b, 4
0731   0888 B0            cmp a, b
0732   0889 0E            lodflgs
0733   088A 87 01         and al, %00000001 ; ==
0734   088C B9 00         cmp al, 0
0735   088E 0E            lodflgs
0736   088F 96            not al
0737   0890 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0738   0892 22 00         mov ah, 0
0739   0894 27            mov b, a
0740   0895 E4            pop a
0741   0896 8A            or a, b
0742   0897 27            mov b, a
0743   0898 E4            pop a
0744   0899 C0 00 00      cmp b, 0
0745   089C C6 BD 08      je _if15_exit
0746   089F             _if15_true:
0747   089F 29 74 22      mov b, [next_state]
0748   08A2 74            mov d, b
0749   08A3 2C FF FF      mov b, [bp + -1] ; i
0750   08A6 10 50 00      mov a, 80
0751   08A9 AC            mul a, b
0752   08AA 5A            add d, b
0753   08AB 2C FD FF      mov b, [bp + -3] ; j
0754   08AE 10 02 00      mov a, 2
0755   08B1 AC            mul a, b
0756   08B2 5A            add d, b
0757   08B3 DA            push d
0758   08B4 26 01 00      mov b, 1
0759   08B7 E7            pop d
0760   08B8 11            mov a, b
0761   08B9 43            mov [d], a
0762   08BA 0A BD 08      jmp _if15_exit
0763   08BD             _if15_exit:
0764   08BD             _if13_exit:
0765   08BD             _for8_update:
0766   08BD 2C FD FF      mov b, [bp + -3] ; j
0767   08C0 FD 77         inc b
0768   08C2 D7            push a
0769   08C3 11            mov a, b
0770   08C4 45 FD FF      mov [bp + -3], a ; j
0771   08C7 E4            pop a
0772   08C8 0A 9B 06      jmp _for8_cond
0773   08CB             _for8_exit:
0774   08CB             _for7_update:
0775   08CB 2C FF FF      mov b, [bp + -1] ; i
0776   08CE FD 77         inc b
0777   08D0 D7            push a
0778   08D1 11            mov a, b
0779   08D2 45 FF FF      mov [bp + -1], a ; i
0780   08D5 E4            pop a
0781   08D6 0A 6E 06      jmp _for7_cond
0782   08D9             _for7_exit:
0783   08D9             _for16_init:
0784   08D9 26 00 00      mov b, 0
0785   08DC D7            push a
0786   08DD 11            mov a, b
0787   08DE 45 FF FF      mov [bp + -1], a ; i
0788   08E1 E4            pop a
0789   08E2             _for16_cond:
0790   08E2 2C FF FF      mov b, [bp + -1] ; i
0791   08E5 D7            push a
0792   08E6 11            mov a, b
0793   08E7 26 28 00      mov b, 40
0794   08EA B0            cmp a, b
0795   08EB 0E            lodflgs
0796   08EC 87 02         and al, %00000010 ; <
0797   08EE B9 00         cmp al, 0
0798   08F0 0E            lodflgs
0799   08F1 96            not al
0800   08F2 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0801   08F4 22 00         mov ah, 0
0802   08F6 27            mov b, a
0803   08F7 E4            pop a
0804   08F8 C0 00 00      cmp b, 0
0805   08FB C6 6E 09      je _for16_exit
0806   08FE             _for16_block:
0807   08FE             _for17_init:
0808   08FE 26 00 00      mov b, 0
0809   0901 D7            push a
0810   0902 11            mov a, b
0811   0903 45 FD FF      mov [bp + -3], a ; j
0812   0906 E4            pop a
0813   0907             _for17_cond:
0814   0907 2C FD FF      mov b, [bp + -3] ; j
0815   090A D7            push a
0816   090B 11            mov a, b
0817   090C 26 28 00      mov b, 40
0818   090F B0            cmp a, b
0819   0910 0E            lodflgs
0820   0911 87 02         and al, %00000010 ; <
0821   0913 B9 00         cmp al, 0
0822   0915 0E            lodflgs
0823   0916 96            not al
0824   0917 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0825   0919 22 00         mov ah, 0
0826   091B 27            mov b, a
0827   091C E4            pop a
0828   091D C0 00 00      cmp b, 0
0829   0920 C6 60 09      je _for17_exit
0830   0923             _for17_block:
0831   0923 29 F2 15      mov b, [curr_state]
0832   0926 74            mov d, b
0833   0927 2C FF FF      mov b, [bp + -1] ; i
0834   092A 10 50 00      mov a, 80
0835   092D AC            mul a, b
0836   092E 5A            add d, b
0837   092F 2C FD FF      mov b, [bp + -3] ; j
0838   0932 10 02 00      mov a, 2
0839   0935 AC            mul a, b
0840   0936 5A            add d, b
0841   0937 DA            push d
0842   0938 29 74 22      mov b, [next_state]
0843   093B D7            push a
0844   093C 74            mov d, b
0845   093D 2C FF FF      mov b, [bp + -1] ; i
0846   0940 10 50 00      mov a, 80
0847   0943 AC            mul a, b
0848   0944 5A            add d, b
0849   0945 2C FD FF      mov b, [bp + -3] ; j
0850   0948 10 02 00      mov a, 2
0851   094B AC            mul a, b
0852   094C 5A            add d, b
0853   094D 2A            mov b, [d]
0854   094E E4            pop a
0855   094F E7            pop d
0856   0950 11            mov a, b
0857   0951 43            mov [d], a
0858   0952             _for17_update:
0859   0952 2C FD FF      mov b, [bp + -3] ; j
0860   0955 FD 77         inc b
0861   0957 D7            push a
0862   0958 11            mov a, b
0863   0959 45 FD FF      mov [bp + -3], a ; j
0864   095C E4            pop a
0865   095D 0A 07 09      jmp _for17_cond
0866   0960             _for17_exit:
0867   0960             _for16_update:
0868   0960 2C FF FF      mov b, [bp + -1] ; i
0869   0963 FD 77         inc b
0870   0965 D7            push a
0871   0966 11            mov a, b
0872   0967 45 FF FF      mov [bp + -1], a ; i
0873   096A E4            pop a
0874   096B 0A E2 08      jmp _for16_cond
0875   096E             _for16_exit:
0876   096E F9            leave
0877   096F 09            ret
0878   0970             ; --- END TEXT BLOCK
0879   0970             
0880   0970             ; --- BEGIN DATA BLOCK
0881   0970             curr_state_data: 
0882   0970 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0882   0974 00 00 00 00 
0882   0978 00 00 00 00 
0882   097C 00 00 00 00 
0882   0980 00 00 00 00 
0882   0984 00 00 00 00 
0882   0988 00 00 00 00 
0882   098C 00 00 00 00 
0882   0990 00 00 00 00 
0882   0994 00 00 00 00 
0882   0998 00 00 00 00 
0882   099C 00 00 00 00 
0882   09A0 00 00 00 00 
0882   09A4 00 00 00 00 
0882   09A8 00 00 00 00 
0883   09AC 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 
0883   09B0 00 00 01 00 
0883   09B4 01 00 01 00 
0883   09B8 01 00 01 00 
0883   09BC 00 00 00 00 
0883   09C0 01 00 00 00 
0883   09C4 01 00 01 00 
0883   09C8 00 00 00 00 
0883   09CC 01 00 00 00 
0883   09D0 00 00 01 00 
0883   09D4 01 00 01 00 
0883   09D8 01 00 00 00 
0883   09DC 01 00 00 00 
0883   09E0 01 00 00 00 
0883   09E4 00 00 00 00 
0884   09E8 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 
0884   09EC 00 00 01 00 
0884   09F0 01 00 00 00 
0884   09F4 00 00 00 00 
0884   09F8 00 00 01 00 
0884   09FC 01 00 01 00 
0884   0A00 01 00 01 00 
0884   0A04 00 00 00 00 
0884   0A08 00 00 00 00 
0884   0A0C 00 00 01 00 
0884   0A10 01 00 01 00 
0884   0A14 01 00 00 00 
0884   0A18 01 00 00 00 
0884   0A1C 01 00 00 00 
0884   0A20 01 00 00 00 
0885   0A24 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0885   0A28 01 00 01 00 
0885   0A2C 01 00 00 00 
0885   0A30 01 00 01 00 
0885   0A34 00 00 01 00 
0885   0A38 01 00 00 00 
0885   0A3C 00 00 01 00 
0885   0A40 00 00 00 00 
0885   0A44 00 00 00 00 
0885   0A48 00 00 00 00 
0885   0A4C 00 00 00 00 
0885   0A50 01 00 01 00 
0885   0A54 01 00 00 00 
0885   0A58 01 00 01 00 
0885   0A5C 01 00 00 00 
0886   0A60 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0886   0A64 00 00 01 00 
0886   0A68 01 00 00 00 
0886   0A6C 01 00 00 00 
0886   0A70 00 00 01 00 
0886   0A74 01 00 00 00 
0886   0A78 00 00 01 00 
0886   0A7C 01 00 01 00 
0886   0A80 01 00 01 00 
0886   0A84 00 00 00 00 
0886   0A88 00 00 00 00 
0886   0A8C 01 00 01 00 
0886   0A90 01 00 00 00 
0886   0A94 01 00 01 00 
0886   0A98 01 00 00 00 
0887   0A9C 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0887   0AA0 00 00 01 00 
0887   0AA4 00 00 00 00 
0887   0AA8 01 00 00 00 
0887   0AAC 00 00 01 00 
0887   0AB0 01 00 01 00 
0887   0AB4 01 00 01 00 
0887   0AB8 01 00 00 00 
0887   0ABC 00 00 01 00 
0887   0AC0 01 00 01 00 
0887   0AC4 00 00 00 00 
0887   0AC8 01 00 01 00 
0887   0ACC 01 00 00 00 
0887   0AD0 01 00 01 00 
0887   0AD4 01 00 00 00 
0888   0AD8 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 
0888   0ADC 00 00 01 00 
0888   0AE0 00 00 00 00 
0888   0AE4 01 00 00 00 
0888   0AE8 00 00 00 00 
0888   0AEC 01 00 00 00 
0888   0AF0 00 00 00 00 
0888   0AF4 01 00 00 00 
0888   0AF8 00 00 00 00 
0888   0AFC 00 00 00 00 
0888   0B00 00 00 00 00 
0888   0B04 01 00 01 00 
0888   0B08 01 00 00 00 
0888   0B0C 00 00 01 00 
0888   0B10 01 00 00 00 
0889   0B14 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 
0889   0B18 00 00 01 00 
0889   0B1C 00 00 00 00 
0889   0B20 00 00 00 00 
0889   0B24 00 00 00 00 
0889   0B28 01 00 01 00 
0889   0B2C 00 00 01 00 
0889   0B30 01 00 00 00 
0889   0B34 01 00 00 00 
0889   0B38 00 00 01 00 
0889   0B3C 01 00 01 00 
0889   0B40 01 00 01 00 
0889   0B44 01 00 00 00 
0889   0B48 00 00 01 00 
0889   0B4C 01 00 00 00 
0890   0B50 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 
0890   0B54 00 00 01 00 
0890   0B58 01 00 01 00 
0890   0B5C 01 00 01 00 
0890   0B60 00 00 00 00 
0890   0B64 01 00 01 00 
0890   0B68 01 00 01 00 
0890   0B6C 00 00 00 00 
0890   0B70 01 00 00 00 
0890   0B74 00 00 01 00 
0890   0B78 01 00 01 00 
0890   0B7C 01 00 00 00 
0890   0B80 01 00 00 00 
0890   0B84 01 00 01 00 
0890   0B88 00 00 00 00 
0891   0B8C 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 
0891   0B90 00 00 01 00 
0891   0B94 01 00 00 00 
0891   0B98 00 00 00 00 
0891   0B9C 00 00 01 00 
0891   0BA0 01 00 01 00 
0891   0BA4 01 00 01 00 
0891   0BA8 00 00 00 00 
0891   0BAC 01 00 00 00 
0891   0BB0 00 00 01 00 
0891   0BB4 01 00 01 00 
0891   0BB8 01 00 00 00 
0891   0BBC 01 00 00 00 
0891   0BC0 01 00 01 00 
0891   0BC4 00 00 00 00 
0892   0BC8 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 
0892   0BCC 01 00 01 00 
0892   0BD0 01 00 00 00 
0892   0BD4 01 00 01 00 
0892   0BD8 00 00 01 00 
0892   0BDC 01 00 01 00 
0892   0BE0 00 00 01 00 
0892   0BE4 00 00 00 00 
0892   0BE8 00 00 00 00 
0892   0BEC 00 00 00 00 
0892   0BF0 00 00 00 00 
0892   0BF4 01 00 01 00 
0892   0BF8 01 00 00 00 
0892   0BFC 01 00 01 00 
0892   0C00 00 00 00 00 
0893   0C04 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0893   0C08 00 00 01 00 
0893   0C0C 01 00 00 00 
0893   0C10 01 00 00 00 
0893   0C14 00 00 01 00 
0893   0C18 01 00 01 00 
0893   0C1C 00 00 01 00 
0893   0C20 01 00 01 00 
0893   0C24 01 00 01 00 
0893   0C28 00 00 00 00 
0893   0C2C 00 00 00 00 
0893   0C30 01 00 01 00 
0893   0C34 01 00 00 00 
0893   0C38 01 00 01 00 
0893   0C3C 01 00 00 00 
0894   0C40 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 
0894   0C44 00 00 01 00 
0894   0C48 00 00 00 00 
0894   0C4C 00 00 00 00 
0894   0C50 00 00 00 00 
0894   0C54 01 00 01 00 
0894   0C58 00 00 01 00 
0894   0C5C 01 00 01 00 
0894   0C60 01 00 01 00 
0894   0C64 01 00 01 00 
0894   0C68 01 00 01 00 
0894   0C6C 01 00 01 00 
0894   0C70 01 00 00 00 
0894   0C74 00 00 01 00 
0894   0C78 01 00 00 00 
0895   0C7C 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 
0895   0C80 00 00 01 00 
0895   0C84 01 00 01 00 
0895   0C88 01 00 01 00 
0895   0C8C 00 00 00 00 
0895   0C90 01 00 01 00 
0895   0C94 01 00 01 00 
0895   0C98 00 00 00 00 
0895   0C9C 01 00 00 00 
0895   0CA0 00 00 01 00 
0895   0CA4 01 00 01 00 
0895   0CA8 01 00 00 00 
0895   0CAC 01 00 00 00 
0895   0CB0 01 00 01 00 
0895   0CB4 01 00 00 00 
0896   0CB8 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 
0896   0CBC 00 00 01 00 
0896   0CC0 01 00 00 00 
0896   0CC4 00 00 00 00 
0896   0CC8 00 00 01 00 
0896   0CCC 01 00 01 00 
0896   0CD0 01 00 01 00 
0896   0CD4 00 00 00 00 
0896   0CD8 01 00 00 00 
0896   0CDC 00 00 01 00 
0896   0CE0 01 00 01 00 
0896   0CE4 01 00 00 00 
0896   0CE8 01 00 00 00 
0896   0CEC 01 00 01 00 
0896   0CF0 01 00 00 00 
0897   0CF4 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 
0897   0CF8 00 00 01 00 
0897   0CFC 01 00 01 00 
0897   0D00 01 00 01 00 
0897   0D04 00 00 00 00 
0897   0D08 01 00 00 00 
0897   0D0C 01 00 01 00 
0897   0D10 00 00 00 00 
0897   0D14 01 00 00 00 
0897   0D18 00 00 01 00 
0897   0D1C 01 00 01 00 
0897   0D20 01 00 00 00 
0897   0D24 01 00 00 00 
0897   0D28 01 00 01 00 
0897   0D2C 01 00 00 00 
0898   0D30 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 
0898   0D34 00 00 01 00 
0898   0D38 01 00 00 00 
0898   0D3C 00 00 00 00 
0898   0D40 00 00 01 00 
0898   0D44 01 00 01 00 
0898   0D48 01 00 01 00 
0898   0D4C 00 00 00 00 
0898   0D50 01 00 00 00 
0898   0D54 00 00 01 00 
0898   0D58 01 00 01 00 
0898   0D5C 01 00 00 00 
0898   0D60 01 00 00 00 
0898   0D64 01 00 01 00 
0898   0D68 01 00 00 00 
0899   0D6C 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 
0899   0D70 01 00 01 00 
0899   0D74 01 00 00 00 
0899   0D78 01 00 01 00 
0899   0D7C 00 00 01 00 
0899   0D80 01 00 00 00 
0899   0D84 00 00 01 00 
0899   0D88 00 00 00 00 
0899   0D8C 01 00 00 00 
0899   0D90 00 00 01 00 
0899   0D94 01 00 00 00 
0899   0D98 00 00 01 00 
0899   0D9C 01 00 00 00 
0899   0DA0 01 00 01 00 
0899   0DA4 01 00 00 00 
0900   0DA8 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0900   0DAC 00 00 01 00 
0900   0DB0 01 00 00 00 
0900   0DB4 01 00 00 00 
0900   0DB8 00 00 01 00 
0900   0DBC 01 00 00 00 
0900   0DC0 00 00 01 00 
0900   0DC4 01 00 01 00 
0900   0DC8 01 00 01 00 
0900   0DCC 00 00 01 00 
0900   0DD0 01 00 00 00 
0900   0DD4 01 00 01 00 
0900   0DD8 01 00 00 00 
0900   0DDC 01 00 01 00 
0900   0DE0 01 00 00 00 
0901   0DE4 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0901   0DE8 00 00 01 00 
0901   0DEC 01 00 00 00 
0901   0DF0 01 00 00 00 
0901   0DF4 00 00 01 00 
0901   0DF8 01 00 00 00 
0901   0DFC 00 00 01 00 
0901   0E00 01 00 01 00 
0901   0E04 01 00 01 00 
0901   0E08 00 00 01 00 
0901   0E0C 01 00 00 00 
0901   0E10 01 00 01 00 
0901   0E14 01 00 00 00 
0901   0E18 01 00 01 00 
0901   0E1C 01 00 00 00 
0902   0E20 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0902   0E24 00 00 01 00 
0902   0E28 01 00 00 00 
0902   0E2C 01 00 00 00 
0902   0E30 00 00 01 00 
0902   0E34 01 00 00 00 
0902   0E38 00 00 01 00 
0902   0E3C 01 00 01 00 
0902   0E40 01 00 01 00 
0902   0E44 00 00 01 00 
0902   0E48 01 00 00 00 
0902   0E4C 01 00 01 00 
0902   0E50 01 00 00 00 
0902   0E54 01 00 01 00 
0902   0E58 01 00 00 00 
0903   0E5C 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0903   0E60 00 00 01 00 
0903   0E64 01 00 00 00 
0903   0E68 01 00 00 00 
0903   0E6C 00 00 01 00 
0903   0E70 01 00 00 00 
0903   0E74 00 00 01 00 
0903   0E78 01 00 01 00 
0903   0E7C 01 00 01 00 
0903   0E80 00 00 01 00 
0903   0E84 01 00 00 00 
0903   0E88 01 00 01 00 
0903   0E8C 01 00 00 00 
0903   0E90 01 00 01 00 
0903   0E94 01 00 00 00 
0904   0E98 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 
0904   0E9C 00 00 01 00 
0904   0EA0 01 00 00 00 
0904   0EA4 01 00 00 00 
0904   0EA8 00 00 01 00 
0904   0EAC 01 00 00 00 
0904   0EB0 00 00 01 00 
0904   0EB4 01 00 01 00 
0904   0EB8 01 00 01 00 
0904   0EBC 00 00 00 00 
0904   0EC0 00 00 00 00 
0904   0EC4 00 00 01 00 
0904   0EC8 01 00 00 00 
0904   0ECC 01 00 01 00 
0904   0ED0 01 00 00 00 
0905   0ED4 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 
0905   0ED8 00 00 01 00 
0905   0EDC 01 00 01 00 
0905   0EE0 01 00 01 00 
0905   0EE4 00 00 00 00 
0905   0EE8 01 00 00 00 
0905   0EEC 01 00 01 00 
0905   0EF0 00 00 00 00 
0905   0EF4 00 00 00 00 
0905   0EF8 00 00 01 00 
0905   0EFC 01 00 01 00 
0905   0F00 01 00 00 00 
0905   0F04 01 00 00 00 
0905   0F08 01 00 01 00 
0905   0F0C 01 00 00 00 
0906   0F10 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 
0906   0F14 00 00 01 00 
0906   0F18 01 00 00 00 
0906   0F1C 00 00 00 00 
0906   0F20 00 00 01 00 
0906   0F24 01 00 01 00 
0906   0F28 01 00 01 00 
0906   0F2C 00 00 00 00 
0906   0F30 00 00 00 00 
0906   0F34 00 00 01 00 
0906   0F38 01 00 01 00 
0906   0F3C 01 00 00 00 
0906   0F40 01 00 00 00 
0906   0F44 01 00 01 00 
0906   0F48 01 00 00 00 
0907   0F4C 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 
0907   0F50 01 00 01 00 
0907   0F54 01 00 00 00 
0907   0F58 01 00 01 00 
0907   0F5C 00 00 01 00 
0907   0F60 01 00 00 00 
0907   0F64 00 00 01 00 
0907   0F68 00 00 00 00 
0907   0F6C 00 00 00 00 
0907   0F70 00 00 01 00 
0907   0F74 00 00 00 00 
0907   0F78 00 00 01 00 
0907   0F7C 01 00 00 00 
0907   0F80 01 00 00 00 
0907   0F84 00 00 00 00 
0908   0F88 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 
0908   0F8C 00 00 01 00 
0908   0F90 01 00 00 00 
0908   0F94 01 00 00 00 
0908   0F98 00 00 01 00 
0908   0F9C 01 00 00 00 
0908   0FA0 00 00 01 00 
0908   0FA4 01 00 01 00 
0908   0FA8 01 00 01 00 
0908   0FAC 00 00 01 00 
0908   0FB0 00 00 00 00 
0908   0FB4 00 00 01 00 
0908   0FB8 01 00 00 00 
0908   0FBC 01 00 00 00 
0908   0FC0 00 00 00 00 
0909   0FC4 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 
0909   0FC8 01 00 01 00 
0909   0FCC 01 00 00 00 
0909   0FD0 01 00 01 00 
0909   0FD4 00 00 01 00 
0909   0FD8 01 00 00 00 
0909   0FDC 00 00 01 00 
0909   0FE0 00 00 00 00 
0909   0FE4 00 00 00 00 
0909   0FE8 00 00 01 00 
0909   0FEC 00 00 00 00 
0909   0FF0 00 00 01 00 
0909   0FF4 01 00 00 00 
0909   0FF8 01 00 00 00 
0909   0FFC 00 00 00 00 
0910   1000 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 
0910   1004 00 00 01 00 
0910   1008 01 00 00 00 
0910   100C 01 00 00 00 
0910   1010 00 00 01 00 
0910   1014 01 00 00 00 
0910   1018 00 00 01 00 
0910   101C 01 00 01 00 
0910   1020 01 00 01 00 
0910   1024 00 00 01 00 
0910   1028 00 00 00 00 
0910   102C 00 00 01 00 
0910   1030 01 00 00 00 
0910   1034 01 00 00 00 
0910   1038 00 00 00 00 
0911   103C 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0911   1040 00 00 00 00 
0911   1044 00 00 00 00 
0911   1048 00 00 00 00 
0911   104C 00 00 00 00 
0911   1050 00 00 00 00 
0911   1054 00 00 00 00 
0911   1058 00 00 00 00 
0911   105C 00 00 00 00 
0911   1060 00 00 00 00 
0911   1064 00 00 00 00 
0911   1068 00 00 00 00 
0911   106C 00 00 00 00 
0911   1070 00 00 00 00 
0911   1074 00 00 00 00 
0912   1078 00 00       .dw 
0913   107A 00 00 00 00 .fill 1400, 0
0913   107E 00 00 00 00 
0913   1082 00 00 00 00 
0913   1086 00 00 00 00 
0913   108A 00 00 00 00 
0913   108E 00 00 00 00 
0913   1092 00 00 00 00 
0913   1096 00 00 00 00 
0913   109A 00 00 00 00 
0913   109E 00 00 00 00 
0913   10A2 00 00 00 00 
0913   10A6 00 00 00 00 
0913   10AA 00 00 00 00 
0913   10AE 00 00 00 00 
0913   10B2 00 00 00 00 
0913   10B6 00 00 00 00 
0913   10BA 00 00 00 00 
0913   10BE 00 00 00 00 
0913   10C2 00 00 00 00 
0913   10C6 00 00 00 00 
0913   10CA 00 00 00 00 
0913   10CE 00 00 00 00 
0913   10D2 00 00 00 00 
0913   10D6 00 00 00 00 
0913   10DA 00 00 00 00 
0913   10DE 00 00 00 00 
0913   10E2 00 00 00 00 
0913   10E6 00 00 00 00 
0913   10EA 00 00 00 00 
0913   10EE 00 00 00 00 
0913   10F2 00 00 00 00 
0913   10F6 00 00 00 00 
0913   10FA 00 00 00 00 
0913   10FE 00 00 00 00 
0913   1102 00 00 00 00 
0913   1106 00 00 00 00 
0913   110A 00 00 00 00 
0913   110E 00 00 00 00 
0913   1112 00 00 00 00 
0913   1116 00 00 00 00 
0913   111A 00 00 00 00 
0913   111E 00 00 00 00 
0913   1122 00 00 00 00 
0913   1126 00 00 00 00 
0913   112A 00 00 00 00 
0913   112E 00 00 00 00 
0913   1132 00 00 00 00 
0913   1136 00 00 00 00 
0913   113A 00 00 00 00 
0913   113E 00 00 00 00 
0913   1142 00 00 00 00 
0913   1146 00 00 00 00 
0913   114A 00 00 00 00 
0913   114E 00 00 00 00 
0913   1152 00 00 00 00 
0913   1156 00 00 00 00 
0913   115A 00 00 00 00 
0913   115E 00 00 00 00 
0913   1162 00 00 00 00 
0913   1166 00 00 00 00 
0913   116A 00 00 00 00 
0913   116E 00 00 00 00 
0913   1172 00 00 00 00 
0913   1176 00 00 00 00 
0913   117A 00 00 00 00 
0913   117E 00 00 00 00 
0913   1182 00 00 00 00 
0913   1186 00 00 00 00 
0913   118A 00 00 00 00 
0913   118E 00 00 00 00 
0913   1192 00 00 00 00 
0913   1196 00 00 00 00 
0913   119A 00 00 00 00 
0913   119E 00 00 00 00 
0913   11A2 00 00 00 00 
0913   11A6 00 00 00 00 
0913   11AA 00 00 00 00 
0913   11AE 00 00 00 00 
0913   11B2 00 00 00 00 
0913   11B6 00 00 00 00 
0913   11BA 00 00 00 00 
0913   11BE 00 00 00 00 
0913   11C2 00 00 00 00 
0913   11C6 00 00 00 00 
0913   11CA 00 00 00 00 
0913   11CE 00 00 00 00 
0913   11D2 00 00 00 00 
0913   11D6 00 00 00 00 
0913   11DA 00 00 00 00 
0913   11DE 00 00 00 00 
0913   11E2 00 00 00 00 
0913   11E6 00 00 00 00 
0913   11EA 00 00 00 00 
0913   11EE 00 00 00 00 
0913   11F2 00 00 00 00 
0913   11F6 00 00 00 00 
0913   11FA 00 00 00 00 
0913   11FE 00 00 00 00 
0913   1202 00 00 00 00 
0913   1206 00 00 00 00 
0913   120A 00 00 00 00 
0913   120E 00 00 00 00 
0913   1212 00 00 00 00 
0913   1216 00 00 00 00 
0913   121A 00 00 00 00 
0913   121E 00 00 00 00 
0913   1222 00 00 00 00 
0913   1226 00 00 00 00 
0913   122A 00 00 00 00 
0913   122E 00 00 00 00 
0913   1232 00 00 00 00 
0913   1236 00 00 00 00 
0913   123A 00 00 00 00 
0913   123E 00 00 00 00 
0913   1242 00 00 00 00 
0913   1246 00 00 00 00 
0913   124A 00 00 00 00 
0913   124E 00 00 00 00 
0913   1252 00 00 00 00 
0913   1256 00 00 00 00 
0913   125A 00 00 00 00 
0913   125E 00 00 00 00 
0913   1262 00 00 00 00 
0913   1266 00 00 00 00 
0913   126A 00 00 00 00 
0913   126E 00 00 00 00 
0913   1272 00 00 00 00 
0913   1276 00 00 00 00 
0913   127A 00 00 00 00 
0913   127E 00 00 00 00 
0913   1282 00 00 00 00 
0913   1286 00 00 00 00 
0913   128A 00 00 00 00 
0913   128E 00 00 00 00 
0913   1292 00 00 00 00 
0913   1296 00 00 00 00 
0913   129A 00 00 00 00 
0913   129E 00 00 00 00 
0913   12A2 00 00 00 00 
0913   12A6 00 00 00 00 
0913   12AA 00 00 00 00 
0913   12AE 00 00 00 00 
0913   12B2 00 00 00 00 
0913   12B6 00 00 00 00 
0913   12BA 00 00 00 00 
0913   12BE 00 00 00 00 
0913   12C2 00 00 00 00 
0913   12C6 00 00 00 00 
0913   12CA 00 00 00 00 
0913   12CE 00 00 00 00 
0913   12D2 00 00 00 00 
0913   12D6 00 00 00 00 
0913   12DA 00 00 00 00 
0913   12DE 00 00 00 00 
0913   12E2 00 00 00 00 
0913   12E6 00 00 00 00 
0913   12EA 00 00 00 00 
0913   12EE 00 00 00 00 
0913   12F2 00 00 00 00 
0913   12F6 00 00 00 00 
0913   12FA 00 00 00 00 
0913   12FE 00 00 00 00 
0913   1302 00 00 00 00 
0913   1306 00 00 00 00 
0913   130A 00 00 00 00 
0913   130E 00 00 00 00 
0913   1312 00 00 00 00 
0913   1316 00 00 00 00 
0913   131A 00 00 00 00 
0913   131E 00 00 00 00 
0913   1322 00 00 00 00 
0913   1326 00 00 00 00 
0913   132A 00 00 00 00 
0913   132E 00 00 00 00 
0913   1332 00 00 00 00 
0913   1336 00 00 00 00 
0913   133A 00 00 00 00 
0913   133E 00 00 00 00 
0913   1342 00 00 00 00 
0913   1346 00 00 00 00 
0913   134A 00 00 00 00 
0913   134E 00 00 00 00 
0913   1352 00 00 00 00 
0913   1356 00 00 00 00 
0913   135A 00 00 00 00 
0913   135E 00 00 00 00 
0913   1362 00 00 00 00 
0913   1366 00 00 00 00 
0913   136A 00 00 00 00 
0913   136E 00 00 00 00 
0913   1372 00 00 00 00 
0913   1376 00 00 00 00 
0913   137A 00 00 00 00 
0913   137E 00 00 00 00 
0913   1382 00 00 00 00 
0913   1386 00 00 00 00 
0913   138A 00 00 00 00 
0913   138E 00 00 00 00 
0913   1392 00 00 00 00 
0913   1396 00 00 00 00 
0913   139A 00 00 00 00 
0913   139E 00 00 00 00 
0913   13A2 00 00 00 00 
0913   13A6 00 00 00 00 
0913   13AA 00 00 00 00 
0913   13AE 00 00 00 00 
0913   13B2 00 00 00 00 
0913   13B6 00 00 00 00 
0913   13BA 00 00 00 00 
0913   13BE 00 00 00 00 
0913   13C2 00 00 00 00 
0913   13C6 00 00 00 00 
0913   13CA 00 00 00 00 
0913   13CE 00 00 00 00 
0913   13D2 00 00 00 00 
0913   13D6 00 00 00 00 
0913   13DA 00 00 00 00 
0913   13DE 00 00 00 00 
0913   13E2 00 00 00 00 
0913   13E6 00 00 00 00 
0913   13EA 00 00 00 00 
0913   13EE 00 00 00 00 
0913   13F2 00 00 00 00 
0913   13F6 00 00 00 00 
0913   13FA 00 00 00 00 
0913   13FE 00 00 00 00 
0913   1402 00 00 00 00 
0913   1406 00 00 00 00 
0913   140A 00 00 00 00 
0913   140E 00 00 00 00 
0913   1412 00 00 00 00 
0913   1416 00 00 00 00 
0913   141A 00 00 00 00 
0913   141E 00 00 00 00 
0913   1422 00 00 00 00 
0913   1426 00 00 00 00 
0913   142A 00 00 00 00 
0913   142E 00 00 00 00 
0913   1432 00 00 00 00 
0913   1436 00 00 00 00 
0913   143A 00 00 00 00 
0913   143E 00 00 00 00 
0913   1442 00 00 00 00 
0913   1446 00 00 00 00 
0913   144A 00 00 00 00 
0913   144E 00 00 00 00 
0913   1452 00 00 00 00 
0913   1456 00 00 00 00 
0913   145A 00 00 00 00 
0913   145E 00 00 00 00 
0913   1462 00 00 00 00 
0913   1466 00 00 00 00 
0913   146A 00 00 00 00 
0913   146E 00 00 00 00 
0913   1472 00 00 00 00 
0913   1476 00 00 00 00 
0913   147A 00 00 00 00 
0913   147E 00 00 00 00 
0913   1482 00 00 00 00 
0913   1486 00 00 00 00 
0913   148A 00 00 00 00 
0913   148E 00 00 00 00 
0913   1492 00 00 00 00 
0913   1496 00 00 00 00 
0913   149A 00 00 00 00 
0913   149E 00 00 00 00 
0913   14A2 00 00 00 00 
0913   14A6 00 00 00 00 
0913   14AA 00 00 00 00 
0913   14AE 00 00 00 00 
0913   14B2 00 00 00 00 
0913   14B6 00 00 00 00 
0913   14BA 00 00 00 00 
0913   14BE 00 00 00 00 
0913   14C2 00 00 00 00 
0913   14C6 00 00 00 00 
0913   14CA 00 00 00 00 
0913   14CE 00 00 00 00 
0913   14D2 00 00 00 00 
0913   14D6 00 00 00 00 
0913   14DA 00 00 00 00 
0913   14DE 00 00 00 00 
0913   14E2 00 00 00 00 
0913   14E6 00 00 00 00 
0913   14EA 00 00 00 00 
0913   14EE 00 00 00 00 
0913   14F2 00 00 00 00 
0913   14F6 00 00 00 00 
0913   14FA 00 00 00 00 
0913   14FE 00 00 00 00 
0913   1502 00 00 00 00 
0913   1506 00 00 00 00 
0913   150A 00 00 00 00 
0913   150E 00 00 00 00 
0913   1512 00 00 00 00 
0913   1516 00 00 00 00 
0913   151A 00 00 00 00 
0913   151E 00 00 00 00 
0913   1522 00 00 00 00 
0913   1526 00 00 00 00 
0913   152A 00 00 00 00 
0913   152E 00 00 00 00 
0913   1532 00 00 00 00 
0913   1536 00 00 00 00 
0913   153A 00 00 00 00 
0913   153E 00 00 00 00 
0913   1542 00 00 00 00 
0913   1546 00 00 00 00 
0913   154A 00 00 00 00 
0913   154E 00 00 00 00 
0913   1552 00 00 00 00 
0913   1556 00 00 00 00 
0913   155A 00 00 00 00 
0913   155E 00 00 00 00 
0913   1562 00 00 00 00 
0913   1566 00 00 00 00 
0913   156A 00 00 00 00 
0913   156E 00 00 00 00 
0913   1572 00 00 00 00 
0913   1576 00 00 00 00 
0913   157A 00 00 00 00 
0913   157E 00 00 00 00 
0913   1582 00 00 00 00 
0913   1586 00 00 00 00 
0913   158A 00 00 00 00 
0913   158E 00 00 00 00 
0913   1592 00 00 00 00 
0913   1596 00 00 00 00 
0913   159A 00 00 00 00 
0913   159E 00 00 00 00 
0913   15A2 00 00 00 00 
0913   15A6 00 00 00 00 
0913   15AA 00 00 00 00 
0913   15AE 00 00 00 00 
0913   15B2 00 00 00 00 
0913   15B6 00 00 00 00 
0913   15BA 00 00 00 00 
0913   15BE 00 00 00 00 
0913   15C2 00 00 00 00 
0913   15C6 00 00 00 00 
0913   15CA 00 00 00 00 
0913   15CE 00 00 00 00 
0913   15D2 00 00 00 00 
0913   15D6 00 00 00 00 
0913   15DA 00 00 00 00 
0913   15DE 00 00 00 00 
0913   15E2 00 00 00 00 
0913   15E6 00 00 00 00 
0913   15EA 00 00 00 00 
0913   15EE 00 00 00 00 
0914   15F2 70 09       curr_state: .dw curr_state_data
0915   15F4 00 00 00 00 next_state_data: .fill 3200, 0
0915   15F8 00 00 00 00 
0915   15FC 00 00 00 00 
0915   1600 00 00 00 00 
0915   1604 00 00 00 00 
0915   1608 00 00 00 00 
0915   160C 00 00 00 00 
0915   1610 00 00 00 00 
0915   1614 00 00 00 00 
0915   1618 00 00 00 00 
0915   161C 00 00 00 00 
0915   1620 00 00 00 00 
0915   1624 00 00 00 00 
0915   1628 00 00 00 00 
0915   162C 00 00 00 00 
0915   1630 00 00 00 00 
0915   1634 00 00 00 00 
0915   1638 00 00 00 00 
0915   163C 00 00 00 00 
0915   1640 00 00 00 00 
0915   1644 00 00 00 00 
0915   1648 00 00 00 00 
0915   164C 00 00 00 00 
0915   1650 00 00 00 00 
0915   1654 00 00 00 00 
0915   1658 00 00 00 00 
0915   165C 00 00 00 00 
0915   1660 00 00 00 00 
0915   1664 00 00 00 00 
0915   1668 00 00 00 00 
0915   166C 00 00 00 00 
0915   1670 00 00 00 00 
0915   1674 00 00 00 00 
0915   1678 00 00 00 00 
0915   167C 00 00 00 00 
0915   1680 00 00 00 00 
0915   1684 00 00 00 00 
0915   1688 00 00 00 00 
0915   168C 00 00 00 00 
0915   1690 00 00 00 00 
0915   1694 00 00 00 00 
0915   1698 00 00 00 00 
0915   169C 00 00 00 00 
0915   16A0 00 00 00 00 
0915   16A4 00 00 00 00 
0915   16A8 00 00 00 00 
0915   16AC 00 00 00 00 
0915   16B0 00 00 00 00 
0915   16B4 00 00 00 00 
0915   16B8 00 00 00 00 
0915   16BC 00 00 00 00 
0915   16C0 00 00 00 00 
0915   16C4 00 00 00 00 
0915   16C8 00 00 00 00 
0915   16CC 00 00 00 00 
0915   16D0 00 00 00 00 
0915   16D4 00 00 00 00 
0915   16D8 00 00 00 00 
0915   16DC 00 00 00 00 
0915   16E0 00 00 00 00 
0915   16E4 00 00 00 00 
0915   16E8 00 00 00 00 
0915   16EC 00 00 00 00 
0915   16F0 00 00 00 00 
0915   16F4 00 00 00 00 
0915   16F8 00 00 00 00 
0915   16FC 00 00 00 00 
0915   1700 00 00 00 00 
0915   1704 00 00 00 00 
0915   1708 00 00 00 00 
0915   170C 00 00 00 00 
0915   1710 00 00 00 00 
0915   1714 00 00 00 00 
0915   1718 00 00 00 00 
0915   171C 00 00 00 00 
0915   1720 00 00 00 00 
0915   1724 00 00 00 00 
0915   1728 00 00 00 00 
0915   172C 00 00 00 00 
0915   1730 00 00 00 00 
0915   1734 00 00 00 00 
0915   1738 00 00 00 00 
0915   173C 00 00 00 00 
0915   1740 00 00 00 00 
0915   1744 00 00 00 00 
0915   1748 00 00 00 00 
0915   174C 00 00 00 00 
0915   1750 00 00 00 00 
0915   1754 00 00 00 00 
0915   1758 00 00 00 00 
0915   175C 00 00 00 00 
0915   1760 00 00 00 00 
0915   1764 00 00 00 00 
0915   1768 00 00 00 00 
0915   176C 00 00 00 00 
0915   1770 00 00 00 00 
0915   1774 00 00 00 00 
0915   1778 00 00 00 00 
0915   177C 00 00 00 00 
0915   1780 00 00 00 00 
0915   1784 00 00 00 00 
0915   1788 00 00 00 00 
0915   178C 00 00 00 00 
0915   1790 00 00 00 00 
0915   1794 00 00 00 00 
0915   1798 00 00 00 00 
0915   179C 00 00 00 00 
0915   17A0 00 00 00 00 
0915   17A4 00 00 00 00 
0915   17A8 00 00 00 00 
0915   17AC 00 00 00 00 
0915   17B0 00 00 00 00 
0915   17B4 00 00 00 00 
0915   17B8 00 00 00 00 
0915   17BC 00 00 00 00 
0915   17C0 00 00 00 00 
0915   17C4 00 00 00 00 
0915   17C8 00 00 00 00 
0915   17CC 00 00 00 00 
0915   17D0 00 00 00 00 
0915   17D4 00 00 00 00 
0915   17D8 00 00 00 00 
0915   17DC 00 00 00 00 
0915   17E0 00 00 00 00 
0915   17E4 00 00 00 00 
0915   17E8 00 00 00 00 
0915   17EC 00 00 00 00 
0915   17F0 00 00 00 00 
0915   17F4 00 00 00 00 
0915   17F8 00 00 00 00 
0915   17FC 00 00 00 00 
0915   1800 00 00 00 00 
0915   1804 00 00 00 00 
0915   1808 00 00 00 00 
0915   180C 00 00 00 00 
0915   1810 00 00 00 00 
0915   1814 00 00 00 00 
0915   1818 00 00 00 00 
0915   181C 00 00 00 00 
0915   1820 00 00 00 00 
0915   1824 00 00 00 00 
0915   1828 00 00 00 00 
0915   182C 00 00 00 00 
0915   1830 00 00 00 00 
0915   1834 00 00 00 00 
0915   1838 00 00 00 00 
0915   183C 00 00 00 00 
0915   1840 00 00 00 00 
0915   1844 00 00 00 00 
0915   1848 00 00 00 00 
0915   184C 00 00 00 00 
0915   1850 00 00 00 00 
0915   1854 00 00 00 00 
0915   1858 00 00 00 00 
0915   185C 00 00 00 00 
0915   1860 00 00 00 00 
0915   1864 00 00 00 00 
0915   1868 00 00 00 00 
0915   186C 00 00 00 00 
0915   1870 00 00 00 00 
0915   1874 00 00 00 00 
0915   1878 00 00 00 00 
0915   187C 00 00 00 00 
0915   1880 00 00 00 00 
0915   1884 00 00 00 00 
0915   1888 00 00 00 00 
0915   188C 00 00 00 00 
0915   1890 00 00 00 00 
0915   1894 00 00 00 00 
0915   1898 00 00 00 00 
0915   189C 00 00 00 00 
0915   18A0 00 00 00 00 
0915   18A4 00 00 00 00 
0915   18A8 00 00 00 00 
0915   18AC 00 00 00 00 
0915   18B0 00 00 00 00 
0915   18B4 00 00 00 00 
0915   18B8 00 00 00 00 
0915   18BC 00 00 00 00 
0915   18C0 00 00 00 00 
0915   18C4 00 00 00 00 
0915   18C8 00 00 00 00 
0915   18CC 00 00 00 00 
0915   18D0 00 00 00 00 
0915   18D4 00 00 00 00 
0915   18D8 00 00 00 00 
0915   18DC 00 00 00 00 
0915   18E0 00 00 00 00 
0915   18E4 00 00 00 00 
0915   18E8 00 00 00 00 
0915   18EC 00 00 00 00 
0915   18F0 00 00 00 00 
0915   18F4 00 00 00 00 
0915   18F8 00 00 00 00 
0915   18FC 00 00 00 00 
0915   1900 00 00 00 00 
0915   1904 00 00 00 00 
0915   1908 00 00 00 00 
0915   190C 00 00 00 00 
0915   1910 00 00 00 00 
0915   1914 00 00 00 00 
0915   1918 00 00 00 00 
0915   191C 00 00 00 00 
0915   1920 00 00 00 00 
0915   1924 00 00 00 00 
0915   1928 00 00 00 00 
0915   192C 00 00 00 00 
0915   1930 00 00 00 00 
0915   1934 00 00 00 00 
0915   1938 00 00 00 00 
0915   193C 00 00 00 00 
0915   1940 00 00 00 00 
0915   1944 00 00 00 00 
0915   1948 00 00 00 00 
0915   194C 00 00 00 00 
0915   1950 00 00 00 00 
0915   1954 00 00 00 00 
0915   1958 00 00 00 00 
0915   195C 00 00 00 00 
0915   1960 00 00 00 00 
0915   1964 00 00 00 00 
0915   1968 00 00 00 00 
0915   196C 00 00 00 00 
0915   1970 00 00 00 00 
0915   1974 00 00 00 00 
0915   1978 00 00 00 00 
0915   197C 00 00 00 00 
0915   1980 00 00 00 00 
0915   1984 00 00 00 00 
0915   1988 00 00 00 00 
0915   198C 00 00 00 00 
0915   1990 00 00 00 00 
0915   1994 00 00 00 00 
0915   1998 00 00 00 00 
0915   199C 00 00 00 00 
0915   19A0 00 00 00 00 
0915   19A4 00 00 00 00 
0915   19A8 00 00 00 00 
0915   19AC 00 00 00 00 
0915   19B0 00 00 00 00 
0915   19B4 00 00 00 00 
0915   19B8 00 00 00 00 
0915   19BC 00 00 00 00 
0915   19C0 00 00 00 00 
0915   19C4 00 00 00 00 
0915   19C8 00 00 00 00 
0915   19CC 00 00 00 00 
0915   19D0 00 00 00 00 
0915   19D4 00 00 00 00 
0915   19D8 00 00 00 00 
0915   19DC 00 00 00 00 
0915   19E0 00 00 00 00 
0915   19E4 00 00 00 00 
0915   19E8 00 00 00 00 
0915   19EC 00 00 00 00 
0915   19F0 00 00 00 00 
0915   19F4 00 00 00 00 
0915   19F8 00 00 00 00 
0915   19FC 00 00 00 00 
0915   1A00 00 00 00 00 
0915   1A04 00 00 00 00 
0915   1A08 00 00 00 00 
0915   1A0C 00 00 00 00 
0915   1A10 00 00 00 00 
0915   1A14 00 00 00 00 
0915   1A18 00 00 00 00 
0915   1A1C 00 00 00 00 
0915   1A20 00 00 00 00 
0915   1A24 00 00 00 00 
0915   1A28 00 00 00 00 
0915   1A2C 00 00 00 00 
0915   1A30 00 00 00 00 
0915   1A34 00 00 00 00 
0915   1A38 00 00 00 00 
0915   1A3C 00 00 00 00 
0915   1A40 00 00 00 00 
0915   1A44 00 00 00 00 
0915   1A48 00 00 00 00 
0915   1A4C 00 00 00 00 
0915   1A50 00 00 00 00 
0915   1A54 00 00 00 00 
0915   1A58 00 00 00 00 
0915   1A5C 00 00 00 00 
0915   1A60 00 00 00 00 
0915   1A64 00 00 00 00 
0915   1A68 00 00 00 00 
0915   1A6C 00 00 00 00 
0915   1A70 00 00 00 00 
0915   1A74 00 00 00 00 
0915   1A78 00 00 00 00 
0915   1A7C 00 00 00 00 
0915   1A80 00 00 00 00 
0915   1A84 00 00 00 00 
0915   1A88 00 00 00 00 
0915   1A8C 00 00 00 00 
0915   1A90 00 00 00 00 
0915   1A94 00 00 00 00 
0915   1A98 00 00 00 00 
0915   1A9C 00 00 00 00 
0915   1AA0 00 00 00 00 
0915   1AA4 00 00 00 00 
0915   1AA8 00 00 00 00 
0915   1AAC 00 00 00 00 
0915   1AB0 00 00 00 00 
0915   1AB4 00 00 00 00 
0915   1AB8 00 00 00 00 
0915   1ABC 00 00 00 00 
0915   1AC0 00 00 00 00 
0915   1AC4 00 00 00 00 
0915   1AC8 00 00 00 00 
0915   1ACC 00 00 00 00 
0915   1AD0 00 00 00 00 
0915   1AD4 00 00 00 00 
0915   1AD8 00 00 00 00 
0915   1ADC 00 00 00 00 
0915   1AE0 00 00 00 00 
0915   1AE4 00 00 00 00 
0915   1AE8 00 00 00 00 
0915   1AEC 00 00 00 00 
0915   1AF0 00 00 00 00 
0915   1AF4 00 00 00 00 
0915   1AF8 00 00 00 00 
0915   1AFC 00 00 00 00 
0915   1B00 00 00 00 00 
0915   1B04 00 00 00 00 
0915   1B08 00 00 00 00 
0915   1B0C 00 00 00 00 
0915   1B10 00 00 00 00 
0915   1B14 00 00 00 00 
0915   1B18 00 00 00 00 
0915   1B1C 00 00 00 00 
0915   1B20 00 00 00 00 
0915   1B24 00 00 00 00 
0915   1B28 00 00 00 00 
0915   1B2C 00 00 00 00 
0915   1B30 00 00 00 00 
0915   1B34 00 00 00 00 
0915   1B38 00 00 00 00 
0915   1B3C 00 00 00 00 
0915   1B40 00 00 00 00 
0915   1B44 00 00 00 00 
0915   1B48 00 00 00 00 
0915   1B4C 00 00 00 00 
0915   1B50 00 00 00 00 
0915   1B54 00 00 00 00 
0915   1B58 00 00 00 00 
0915   1B5C 00 00 00 00 
0915   1B60 00 00 00 00 
0915   1B64 00 00 00 00 
0915   1B68 00 00 00 00 
0915   1B6C 00 00 00 00 
0915   1B70 00 00 00 00 
0915   1B74 00 00 00 00 
0915   1B78 00 00 00 00 
0915   1B7C 00 00 00 00 
0915   1B80 00 00 00 00 
0915   1B84 00 00 00 00 
0915   1B88 00 00 00 00 
0915   1B8C 00 00 00 00 
0915   1B90 00 00 00 00 
0915   1B94 00 00 00 00 
0915   1B98 00 00 00 00 
0915   1B9C 00 00 00 00 
0915   1BA0 00 00 00 00 
0915   1BA4 00 00 00 00 
0915   1BA8 00 00 00 00 
0915   1BAC 00 00 00 00 
0915   1BB0 00 00 00 00 
0915   1BB4 00 00 00 00 
0915   1BB8 00 00 00 00 
0915   1BBC 00 00 00 00 
0915   1BC0 00 00 00 00 
0915   1BC4 00 00 00 00 
0915   1BC8 00 00 00 00 
0915   1BCC 00 00 00 00 
0915   1BD0 00 00 00 00 
0915   1BD4 00 00 00 00 
0915   1BD8 00 00 00 00 
0915   1BDC 00 00 00 00 
0915   1BE0 00 00 00 00 
0915   1BE4 00 00 00 00 
0915   1BE8 00 00 00 00 
0915   1BEC 00 00 00 00 
0915   1BF0 00 00 00 00 
0915   1BF4 00 00 00 00 
0915   1BF8 00 00 00 00 
0915   1BFC 00 00 00 00 
0915   1C00 00 00 00 00 
0915   1C04 00 00 00 00 
0915   1C08 00 00 00 00 
0915   1C0C 00 00 00 00 
0915   1C10 00 00 00 00 
0915   1C14 00 00 00 00 
0915   1C18 00 00 00 00 
0915   1C1C 00 00 00 00 
0915   1C20 00 00 00 00 
0915   1C24 00 00 00 00 
0915   1C28 00 00 00 00 
0915   1C2C 00 00 00 00 
0915   1C30 00 00 00 00 
0915   1C34 00 00 00 00 
0915   1C38 00 00 00 00 
0915   1C3C 00 00 00 00 
0915   1C40 00 00 00 00 
0915   1C44 00 00 00 00 
0915   1C48 00 00 00 00 
0915   1C4C 00 00 00 00 
0915   1C50 00 00 00 00 
0915   1C54 00 00 00 00 
0915   1C58 00 00 00 00 
0915   1C5C 00 00 00 00 
0915   1C60 00 00 00 00 
0915   1C64 00 00 00 00 
0915   1C68 00 00 00 00 
0915   1C6C 00 00 00 00 
0915   1C70 00 00 00 00 
0915   1C74 00 00 00 00 
0915   1C78 00 00 00 00 
0915   1C7C 00 00 00 00 
0915   1C80 00 00 00 00 
0915   1C84 00 00 00 00 
0915   1C88 00 00 00 00 
0915   1C8C 00 00 00 00 
0915   1C90 00 00 00 00 
0915   1C94 00 00 00 00 
0915   1C98 00 00 00 00 
0915   1C9C 00 00 00 00 
0915   1CA0 00 00 00 00 
0915   1CA4 00 00 00 00 
0915   1CA8 00 00 00 00 
0915   1CAC 00 00 00 00 
0915   1CB0 00 00 00 00 
0915   1CB4 00 00 00 00 
0915   1CB8 00 00 00 00 
0915   1CBC 00 00 00 00 
0915   1CC0 00 00 00 00 
0915   1CC4 00 00 00 00 
0915   1CC8 00 00 00 00 
0915   1CCC 00 00 00 00 
0915   1CD0 00 00 00 00 
0915   1CD4 00 00 00 00 
0915   1CD8 00 00 00 00 
0915   1CDC 00 00 00 00 
0915   1CE0 00 00 00 00 
0915   1CE4 00 00 00 00 
0915   1CE8 00 00 00 00 
0915   1CEC 00 00 00 00 
0915   1CF0 00 00 00 00 
0915   1CF4 00 00 00 00 
0915   1CF8 00 00 00 00 
0915   1CFC 00 00 00 00 
0915   1D00 00 00 00 00 
0915   1D04 00 00 00 00 
0915   1D08 00 00 00 00 
0915   1D0C 00 00 00 00 
0915   1D10 00 00 00 00 
0915   1D14 00 00 00 00 
0915   1D18 00 00 00 00 
0915   1D1C 00 00 00 00 
0915   1D20 00 00 00 00 
0915   1D24 00 00 00 00 
0915   1D28 00 00 00 00 
0915   1D2C 00 00 00 00 
0915   1D30 00 00 00 00 
0915   1D34 00 00 00 00 
0915   1D38 00 00 00 00 
0915   1D3C 00 00 00 00 
0915   1D40 00 00 00 00 
0915   1D44 00 00 00 00 
0915   1D48 00 00 00 00 
0915   1D4C 00 00 00 00 
0915   1D50 00 00 00 00 
0915   1D54 00 00 00 00 
0915   1D58 00 00 00 00 
0915   1D5C 00 00 00 00 
0915   1D60 00 00 00 00 
0915   1D64 00 00 00 00 
0915   1D68 00 00 00 00 
0915   1D6C 00 00 00 00 
0915   1D70 00 00 00 00 
0915   1D74 00 00 00 00 
0915   1D78 00 00 00 00 
0915   1D7C 00 00 00 00 
0915   1D80 00 00 00 00 
0915   1D84 00 00 00 00 
0915   1D88 00 00 00 00 
0915   1D8C 00 00 00 00 
0915   1D90 00 00 00 00 
0915   1D94 00 00 00 00 
0915   1D98 00 00 00 00 
0915   1D9C 00 00 00 00 
0915   1DA0 00 00 00 00 
0915   1DA4 00 00 00 00 
0915   1DA8 00 00 00 00 
0915   1DAC 00 00 00 00 
0915   1DB0 00 00 00 00 
0915   1DB4 00 00 00 00 
0915   1DB8 00 00 00 00 
0915   1DBC 00 00 00 00 
0915   1DC0 00 00 00 00 
0915   1DC4 00 00 00 00 
0915   1DC8 00 00 00 00 
0915   1DCC 00 00 00 00 
0915   1DD0 00 00 00 00 
0915   1DD4 00 00 00 00 
0915   1DD8 00 00 00 00 
0915   1DDC 00 00 00 00 
0915   1DE0 00 00 00 00 
0915   1DE4 00 00 00 00 
0915   1DE8 00 00 00 00 
0915   1DEC 00 00 00 00 
0915   1DF0 00 00 00 00 
0915   1DF4 00 00 00 00 
0915   1DF8 00 00 00 00 
0915   1DFC 00 00 00 00 
0915   1E00 00 00 00 00 
0915   1E04 00 00 00 00 
0915   1E08 00 00 00 00 
0915   1E0C 00 00 00 00 
0915   1E10 00 00 00 00 
0915   1E14 00 00 00 00 
0915   1E18 00 00 00 00 
0915   1E1C 00 00 00 00 
0915   1E20 00 00 00 00 
0915   1E24 00 00 00 00 
0915   1E28 00 00 00 00 
0915   1E2C 00 00 00 00 
0915   1E30 00 00 00 00 
0915   1E34 00 00 00 00 
0915   1E38 00 00 00 00 
0915   1E3C 00 00 00 00 
0915   1E40 00 00 00 00 
0915   1E44 00 00 00 00 
0915   1E48 00 00 00 00 
0915   1E4C 00 00 00 00 
0915   1E50 00 00 00 00 
0915   1E54 00 00 00 00 
0915   1E58 00 00 00 00 
0915   1E5C 00 00 00 00 
0915   1E60 00 00 00 00 
0915   1E64 00 00 00 00 
0915   1E68 00 00 00 00 
0915   1E6C 00 00 00 00 
0915   1E70 00 00 00 00 
0915   1E74 00 00 00 00 
0915   1E78 00 00 00 00 
0915   1E7C 00 00 00 00 
0915   1E80 00 00 00 00 
0915   1E84 00 00 00 00 
0915   1E88 00 00 00 00 
0915   1E8C 00 00 00 00 
0915   1E90 00 00 00 00 
0915   1E94 00 00 00 00 
0915   1E98 00 00 00 00 
0915   1E9C 00 00 00 00 
0915   1EA0 00 00 00 00 
0915   1EA4 00 00 00 00 
0915   1EA8 00 00 00 00 
0915   1EAC 00 00 00 00 
0915   1EB0 00 00 00 00 
0915   1EB4 00 00 00 00 
0915   1EB8 00 00 00 00 
0915   1EBC 00 00 00 00 
0915   1EC0 00 00 00 00 
0915   1EC4 00 00 00 00 
0915   1EC8 00 00 00 00 
0915   1ECC 00 00 00 00 
0915   1ED0 00 00 00 00 
0915   1ED4 00 00 00 00 
0915   1ED8 00 00 00 00 
0915   1EDC 00 00 00 00 
0915   1EE0 00 00 00 00 
0915   1EE4 00 00 00 00 
0915   1EE8 00 00 00 00 
0915   1EEC 00 00 00 00 
0915   1EF0 00 00 00 00 
0915   1EF4 00 00 00 00 
0915   1EF8 00 00 00 00 
0915   1EFC 00 00 00 00 
0915   1F00 00 00 00 00 
0915   1F04 00 00 00 00 
0915   1F08 00 00 00 00 
0915   1F0C 00 00 00 00 
0915   1F10 00 00 00 00 
0915   1F14 00 00 00 00 
0915   1F18 00 00 00 00 
0915   1F1C 00 00 00 00 
0915   1F20 00 00 00 00 
0915   1F24 00 00 00 00 
0915   1F28 00 00 00 00 
0915   1F2C 00 00 00 00 
0915   1F30 00 00 00 00 
0915   1F34 00 00 00 00 
0915   1F38 00 00 00 00 
0915   1F3C 00 00 00 00 
0915   1F40 00 00 00 00 
0915   1F44 00 00 00 00 
0915   1F48 00 00 00 00 
0915   1F4C 00 00 00 00 
0915   1F50 00 00 00 00 
0915   1F54 00 00 00 00 
0915   1F58 00 00 00 00 
0915   1F5C 00 00 00 00 
0915   1F60 00 00 00 00 
0915   1F64 00 00 00 00 
0915   1F68 00 00 00 00 
0915   1F6C 00 00 00 00 
0915   1F70 00 00 00 00 
0915   1F74 00 00 00 00 
0915   1F78 00 00 00 00 
0915   1F7C 00 00 00 00 
0915   1F80 00 00 00 00 
0915   1F84 00 00 00 00 
0915   1F88 00 00 00 00 
0915   1F8C 00 00 00 00 
0915   1F90 00 00 00 00 
0915   1F94 00 00 00 00 
0915   1F98 00 00 00 00 
0915   1F9C 00 00 00 00 
0915   1FA0 00 00 00 00 
0915   1FA4 00 00 00 00 
0915   1FA8 00 00 00 00 
0915   1FAC 00 00 00 00 
0915   1FB0 00 00 00 00 
0915   1FB4 00 00 00 00 
0915   1FB8 00 00 00 00 
0915   1FBC 00 00 00 00 
0915   1FC0 00 00 00 00 
0915   1FC4 00 00 00 00 
0915   1FC8 00 00 00 00 
0915   1FCC 00 00 00 00 
0915   1FD0 00 00 00 00 
0915   1FD4 00 00 00 00 
0915   1FD8 00 00 00 00 
0915   1FDC 00 00 00 00 
0915   1FE0 00 00 00 00 
0915   1FE4 00 00 00 00 
0915   1FE8 00 00 00 00 
0915   1FEC 00 00 00 00 
0915   1FF0 00 00 00 00 
0915   1FF4 00 00 00 00 
0915   1FF8 00 00 00 00 
0915   1FFC 00 00 00 00 
0915   2000 00 00 00 00 
0915   2004 00 00 00 00 
0915   2008 00 00 00 00 
0915   200C 00 00 00 00 
0915   2010 00 00 00 00 
0915   2014 00 00 00 00 
0915   2018 00 00 00 00 
0915   201C 00 00 00 00 
0915   2020 00 00 00 00 
0915   2024 00 00 00 00 
0915   2028 00 00 00 00 
0915   202C 00 00 00 00 
0915   2030 00 00 00 00 
0915   2034 00 00 00 00 
0915   2038 00 00 00 00 
0915   203C 00 00 00 00 
0915   2040 00 00 00 00 
0915   2044 00 00 00 00 
0915   2048 00 00 00 00 
0915   204C 00 00 00 00 
0915   2050 00 00 00 00 
0915   2054 00 00 00 00 
0915   2058 00 00 00 00 
0915   205C 00 00 00 00 
0915   2060 00 00 00 00 
0915   2064 00 00 00 00 
0915   2068 00 00 00 00 
0915   206C 00 00 00 00 
0915   2070 00 00 00 00 
0915   2074 00 00 00 00 
0915   2078 00 00 00 00 
0915   207C 00 00 00 00 
0915   2080 00 00 00 00 
0915   2084 00 00 00 00 
0915   2088 00 00 00 00 
0915   208C 00 00 00 00 
0915   2090 00 00 00 00 
0915   2094 00 00 00 00 
0915   2098 00 00 00 00 
0915   209C 00 00 00 00 
0915   20A0 00 00 00 00 
0915   20A4 00 00 00 00 
0915   20A8 00 00 00 00 
0915   20AC 00 00 00 00 
0915   20B0 00 00 00 00 
0915   20B4 00 00 00 00 
0915   20B8 00 00 00 00 
0915   20BC 00 00 00 00 
0915   20C0 00 00 00 00 
0915   20C4 00 00 00 00 
0915   20C8 00 00 00 00 
0915   20CC 00 00 00 00 
0915   20D0 00 00 00 00 
0915   20D4 00 00 00 00 
0915   20D8 00 00 00 00 
0915   20DC 00 00 00 00 
0915   20E0 00 00 00 00 
0915   20E4 00 00 00 00 
0915   20E8 00 00 00 00 
0915   20EC 00 00 00 00 
0915   20F0 00 00 00 00 
0915   20F4 00 00 00 00 
0915   20F8 00 00 00 00 
0915   20FC 00 00 00 00 
0915   2100 00 00 00 00 
0915   2104 00 00 00 00 
0915   2108 00 00 00 00 
0915   210C 00 00 00 00 
0915   2110 00 00 00 00 
0915   2114 00 00 00 00 
0915   2118 00 00 00 00 
0915   211C 00 00 00 00 
0915   2120 00 00 00 00 
0915   2124 00 00 00 00 
0915   2128 00 00 00 00 
0915   212C 00 00 00 00 
0915   2130 00 00 00 00 
0915   2134 00 00 00 00 
0915   2138 00 00 00 00 
0915   213C 00 00 00 00 
0915   2140 00 00 00 00 
0915   2144 00 00 00 00 
0915   2148 00 00 00 00 
0915   214C 00 00 00 00 
0915   2150 00 00 00 00 
0915   2154 00 00 00 00 
0915   2158 00 00 00 00 
0915   215C 00 00 00 00 
0915   2160 00 00 00 00 
0915   2164 00 00 00 00 
0915   2168 00 00 00 00 
0915   216C 00 00 00 00 
0915   2170 00 00 00 00 
0915   2174 00 00 00 00 
0915   2178 00 00 00 00 
0915   217C 00 00 00 00 
0915   2180 00 00 00 00 
0915   2184 00 00 00 00 
0915   2188 00 00 00 00 
0915   218C 00 00 00 00 
0915   2190 00 00 00 00 
0915   2194 00 00 00 00 
0915   2198 00 00 00 00 
0915   219C 00 00 00 00 
0915   21A0 00 00 00 00 
0915   21A4 00 00 00 00 
0915   21A8 00 00 00 00 
0915   21AC 00 00 00 00 
0915   21B0 00 00 00 00 
0915   21B4 00 00 00 00 
0915   21B8 00 00 00 00 
0915   21BC 00 00 00 00 
0915   21C0 00 00 00 00 
0915   21C4 00 00 00 00 
0915   21C8 00 00 00 00 
0915   21CC 00 00 00 00 
0915   21D0 00 00 00 00 
0915   21D4 00 00 00 00 
0915   21D8 00 00 00 00 
0915   21DC 00 00 00 00 
0915   21E0 00 00 00 00 
0915   21E4 00 00 00 00 
0915   21E8 00 00 00 00 
0915   21EC 00 00 00 00 
0915   21F0 00 00 00 00 
0915   21F4 00 00 00 00 
0915   21F8 00 00 00 00 
0915   21FC 00 00 00 00 
0915   2200 00 00 00 00 
0915   2204 00 00 00 00 
0915   2208 00 00 00 00 
0915   220C 00 00 00 00 
0915   2210 00 00 00 00 
0915   2214 00 00 00 00 
0915   2218 00 00 00 00 
0915   221C 00 00 00 00 
0915   2220 00 00 00 00 
0915   2224 00 00 00 00 
0915   2228 00 00 00 00 
0915   222C 00 00 00 00 
0915   2230 00 00 00 00 
0915   2234 00 00 00 00 
0915   2238 00 00 00 00 
0915   223C 00 00 00 00 
0915   2240 00 00 00 00 
0915   2244 00 00 00 00 
0915   2248 00 00 00 00 
0915   224C 00 00 00 00 
0915   2250 00 00 00 00 
0915   2254 00 00 00 00 
0915   2258 00 00 00 00 
0915   225C 00 00 00 00 
0915   2260 00 00 00 00 
0915   2264 00 00 00 00 
0915   2268 00 00 00 00 
0915   226C 00 00 00 00 
0915   2270 00 00 00 00 
0916   2274 F4 15       next_state: .dw next_state_data
0917   2276 47 65 6E 65 _string_0: .db "Generations: ", 0
0917   227A 72 61 74 69 
0917   227E 6F 6E 73 3A 
0917   2282 20 00 
0918   2284 40 20 00    _string_1: .db "@ ", 0
0919   2287 2E 20 00    _string_2: .db ". ", 0
0920   228A 0A 00       _string_3: .db "\n", 0
0921   228C             ; --- END DATA BLOCK
0922   228C             
0923   228C             ; --- BEGIN INCLUDE BLOCK
0924   228C             .include "lib/stdio.asm"
0001+  228C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  228C             ; stdio.s
0003+  228C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  228C             .include "lib/string.asm"
0001++ 228C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 228C             ; string.s
0003++ 228C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 228C             
0005++ 228C             
0006++ 228C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 228C             ; strrev
0008++ 228C             ; reverse a string
0009++ 228C             ; D = string address
0010++ 228C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 228C             ; 01234
0012++ 228C             strrev:
0013++ 228C 4B          	pusha
0014++ 228D 07 D3 22    	call strlen	; length in C
0015++ 2290 12          	mov a, c
0016++ 2291 AF 01 00    	cmp a, 1
0017++ 2294 D0 AE 22    	jleu strrev_end	; check string length. string len must be > 1
0018++ 2297 7D          	dec a
0019++ 2298 FD 4E       	mov si, d	; beginning of string
0020++ 229A FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 229C 59          	add d, a	; end of string
0022++ 229D 12          	mov a, c
0023++ 229E FD 9B       	shr a		; divide by 2
0024++ 22A0 39          	mov c, a	; C now counts the steps
0025++ 22A1             strrev_L0:
0026++ 22A1 32          	mov bl, [d]	; save load right-side char into BL
0027++ 22A2 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 22A3 3E          	mov [d], al	; store left char into right side
0029++ 22A4 1B          	mov al, bl
0030++ 22A5 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 22A6 7E          	dec c
0032++ 22A7 7F          	dec d
0033++ 22A8 C2 00 00    	cmp c, 0
0034++ 22AB C7 A1 22    	jne strrev_L0
0035++ 22AE             strrev_end:
0036++ 22AE 4C          	popa
0037++ 22AF 09          	ret
0038++ 22B0             	
0039++ 22B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 22B0             ; strchr
0041++ 22B0             ; search string in D for char in AL
0042++ 22B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 22B0             strchr:
0044++ 22B0             strchr_L0:
0045++ 22B0 32          	mov bl, [d]
0046++ 22B1 C1 00       	cmp bl, 0
0047++ 22B3 C6 BE 22    	je strchr_end
0048++ 22B6 BA          	cmp al, bl
0049++ 22B7 C6 BE 22    	je strchr_end
0050++ 22BA 79          	inc d
0051++ 22BB 0A B0 22    	jmp strchr_L0
0052++ 22BE             strchr_end:
0053++ 22BE 1B          	mov al, bl
0054++ 22BF 09          	ret
0055++ 22C0             
0056++ 22C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 22C0             ; strstr
0058++ 22C0             ; find sub-string
0059++ 22C0             ; str1 in SI
0060++ 22C0             ; str2 in DI
0061++ 22C0             ; SI points to end of source string
0062++ 22C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 22C0             strstr:
0064++ 22C0 DB          	push al
0065++ 22C1 DA          	push d
0066++ 22C2 E3          	push di
0067++ 22C3             strstr_loop:
0068++ 22C3 F3          	cmpsb					; compare a byte of the strings
0069++ 22C4 C7 CF 22    	jne strstr_ret
0070++ 22C7 FC 00 00    	lea d, [di + 0]
0071++ 22CA BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 22CC C7 C3 22    	jne strstr_loop				; equal chars but not at end
0073++ 22CF             strstr_ret:
0074++ 22CF F0          	pop di
0075++ 22D0 E7          	pop d
0076++ 22D1 E8          	pop al
0077++ 22D2 09          	ret
0078++ 22D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 22D3             ; length of null terminated string
0080++ 22D3             ; result in C
0081++ 22D3             ; pointer in D
0082++ 22D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 22D3             strlen:
0084++ 22D3 DA          	push d
0085++ 22D4 38 00 00    	mov c, 0
0086++ 22D7             strlen_L1:
0087++ 22D7 BD 00       	cmp byte [d], 0
0088++ 22D9 C6 E1 22    	je strlen_ret
0089++ 22DC 79          	inc d
0090++ 22DD 78          	inc c
0091++ 22DE 0A D7 22    	jmp strlen_L1
0092++ 22E1             strlen_ret:
0093++ 22E1 E7          	pop d
0094++ 22E2 09          	ret
0095++ 22E3             
0096++ 22E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 22E3             ; STRCMP
0098++ 22E3             ; compare two strings
0099++ 22E3             ; str1 in SI
0100++ 22E3             ; str2 in DI
0101++ 22E3             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 22E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 22E3             strcmp:
0104++ 22E3 DB          	push al
0105++ 22E4 DA          	push d
0106++ 22E5 E3          	push di
0107++ 22E6 E2          	push si
0108++ 22E7             strcmp_loop:
0109++ 22E7 F3          	cmpsb					; compare a byte of the strings
0110++ 22E8 C7 F3 22    	jne strcmp_ret
0111++ 22EB FB FF FF    	lea d, [si +- 1]
0112++ 22EE BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 22F0 C7 E7 22    	jne strcmp_loop				; equal chars but not at end
0114++ 22F3             strcmp_ret:
0115++ 22F3 EF          	pop si
0116++ 22F4 F0          	pop di
0117++ 22F5 E7          	pop d
0118++ 22F6 E8          	pop al
0119++ 22F7 09          	ret
0120++ 22F8             
0121++ 22F8             
0122++ 22F8             ; STRCPY
0123++ 22F8             ; copy null terminated string from SI to DI
0124++ 22F8             ; source in SI
0125++ 22F8             ; destination in DI
0126++ 22F8             strcpy:
0127++ 22F8 E2          	push si
0128++ 22F9 E3          	push di
0129++ 22FA DB          	push al
0130++ 22FB             strcpy_L1:
0131++ 22FB F6          	lodsb
0132++ 22FC F7          	stosb
0133++ 22FD B9 00       	cmp al, 0
0134++ 22FF C7 FB 22    	jne strcpy_L1
0135++ 2302             strcpy_end:
0136++ 2302 E8          	pop al
0137++ 2303 F0          	pop di
0138++ 2304 EF          	pop si
0139++ 2305 09          	ret
0140++ 2306             
0141++ 2306             ; STRCAT
0142++ 2306             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 2306             ; source in SI
0144++ 2306             ; destination in DI
0145++ 2306             strcat:
0146++ 2306 E2          	push si
0147++ 2307 E3          	push di
0148++ 2308 D7          	push a
0149++ 2309 DA          	push d
0150++ 230A 50          	mov a, di
0151++ 230B 3C          	mov d, a
0152++ 230C             strcat_goto_end_L1:
0153++ 230C BD 00       	cmp byte[d], 0
0154++ 230E C6 15 23    	je strcat_start
0155++ 2311 79          	inc d
0156++ 2312 0A 0C 23    	jmp strcat_goto_end_L1
0157++ 2315             strcat_start:
0158++ 2315 FD 50       	mov di, d
0159++ 2317             strcat_L1:
0160++ 2317 F6          	lodsb
0161++ 2318 F7          	stosb
0162++ 2319 B9 00       	cmp al, 0
0163++ 231B C7 17 23    	jne strcat_L1
0164++ 231E             strcat_end:
0165++ 231E E7          	pop d
0166++ 231F E4          	pop a
0167++ 2320 F0          	pop di
0168++ 2321 EF          	pop si
0169++ 2322 09          	ret
0005+  2323             
0006+  2323 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  2327 34 35 36 37 
0006+  232B 38 39 41 42 
0006+  232F 43 44 45 46 
0007+  2333 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  2337 1B 5B 48 00 
0008+  233B             
0009+  233B 01 00       table_power:.dw 1
0010+  233D 0A 00       			.dw 10
0011+  233F 64 00       			.dw 100
0012+  2341 E8 03       			.dw 1000
0013+  2343 10 27       			.dw 10000
0014+  2345             
0015+  2345             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  2345             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  2345             ; ASCII in BL
0018+  2345             ; result in AL
0019+  2345             ; ascii for F = 0100 0110
0020+  2345             ; ascii for 9 = 0011 1001
0021+  2345             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  2345             hex_ascii_encode:
0023+  2345 1B          	mov al, bl
0024+  2346 93 40       	test al, $40				; test if letter or number
0025+  2348 C7 4E 23    	jnz hex_letter
0026+  234B 87 0F       	and al, $0F				; get number
0027+  234D 09          	ret
0028+  234E             hex_letter:
0029+  234E 87 0F       	and al, $0F				; get letter
0030+  2350 6A 09       	add al, 9
0031+  2352 09          	ret
0032+  2353             
0033+  2353             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  2353             ; ATOI
0035+  2353             ; 2 letter hex string in B
0036+  2353             ; 8bit integer returned in AL
0037+  2353             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  2353             atoi:
0039+  2353 D8          	push b
0040+  2354 07 45 23    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  2357 30          	mov bl, bh
0042+  2358 DB          	push al					; save a
0043+  2359 07 45 23    	call hex_ascii_encode
0044+  235C EA          	pop bl	
0045+  235D FD 9E 04    	shl al, 4
0046+  2360 8C          	or al, bl
0047+  2361 E5          	pop b
0048+  2362 09          	ret	
0049+  2363             
0050+  2363             
0051+  2363             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  2363             ; printf
0053+  2363             ; no need for explanations!
0054+  2363             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  2363             printf:
0056+  2363 09          	ret
0057+  2364             
0058+  2364             
0059+  2364             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  2364             ; scanf
0061+  2364             ; no need for explanations!
0062+  2364             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  2364             scanf:
0064+  2364 09          	ret
0065+  2365             
0066+  2365             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  2365             ; ITOA
0068+  2365             ; 8bit value in BL
0069+  2365             ; 2 byte ASCII result in A
0070+  2365             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  2365             itoa:
0072+  2365 DA          	push d
0073+  2366 D8          	push b
0074+  2367 A7 00       	mov bh, 0
0075+  2369 FD A4 04    	shr bl, 4	
0076+  236C 74          	mov d, b
0077+  236D 1F 23 23    	mov al, [d + s_hex_digits]
0078+  2370 23          	mov ah, al
0079+  2371             	
0080+  2371 E5          	pop b
0081+  2372 D8          	push b
0082+  2373 A7 00       	mov bh, 0
0083+  2375 FD 87 0F    	and bl, $0F
0084+  2378 74          	mov d, b
0085+  2379 1F 23 23    	mov al, [d + s_hex_digits]
0086+  237C E5          	pop b
0087+  237D E7          	pop d
0088+  237E 09          	ret
0089+  237F             
0090+  237F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  237F             ; HEX STRING TO BINARY
0092+  237F             ; di = destination address
0093+  237F             ; si = source
0094+  237F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  237F             hex_to_int:
0096+  237F             hex_to_int_L1:
0097+  237F F6          	lodsb					; load from [SI] to AL
0098+  2380 B9 00       	cmp al, 0				; check if ASCII 0
0099+  2382 C6 8F 23    	jz hex_to_int_ret
0100+  2385 36          	mov bh, al
0101+  2386 F6          	lodsb
0102+  2387 2F          	mov bl, al
0103+  2388 07 53 23    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  238B F7          	stosb					; store AL to [DI]
0105+  238C 0A 7F 23    	jmp hex_to_int_L1
0106+  238F             hex_to_int_ret:
0107+  238F 09          	ret		
0108+  2390             
0109+  2390             
0110+  2390             
0111+  2390             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  2390             ; GETCHAR
0113+  2390             ; char in ah
0114+  2390             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  2390             getchar:
0116+  2390 DB          	push al
0117+  2391             getchar_retry:
0118+  2391 FD 0C       	sti
0119+  2393 19 01       	mov al, 1
0120+  2395 05 03       	syscall sys_io			; receive in AH
0121+  2397 B9 00       	cmp al, 0			; check if any char was receive
0122+  2399 C6 91 23    	je getchar_retry
0123+  239C E8          	pop al
0124+  239D 09          	ret
0125+  239E             
0126+  239E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  239E             ; PUTCHAR
0128+  239E             ; char in ah
0129+  239E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  239E             putchar:
0131+  239E D7          	push a
0132+  239F 19 00       	mov al, 0
0133+  23A1 05 03       	syscall sys_io			; char in AH
0134+  23A3 E4          	pop a
0135+  23A4 09          	ret
0136+  23A5             
0137+  23A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  23A5             ;; INPUT A STRING
0139+  23A5             ;; terminates with null
0140+  23A5             ;; pointer in D
0141+  23A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  23A5             gets:
0143+  23A5 D7          	push a
0144+  23A6 DA          	push d
0145+  23A7             gets_loop:
0146+  23A7 FD 0C       	sti
0147+  23A9 19 01       	mov al, 1
0148+  23AB 05 03       	syscall sys_io			; receive in AH
0149+  23AD B9 00       	cmp al, 0				; check error code (AL)
0150+  23AF C6 A7 23    	je gets_loop			; if no char received, retry
0151+  23B2             
0152+  23B2 76 1B       	cmp ah, 27
0153+  23B4 C6 D5 23    	je gets_telnet_escape
0154+  23B7 76 0A       	cmp ah, $0A				; LF
0155+  23B9 C6 2E 24    	je gets_end
0156+  23BC 76 0D       	cmp ah, $0D				; CR
0157+  23BE C6 2E 24    	je gets_end
0158+  23C1 76 5C       	cmp ah, $5C				; '\\'
0159+  23C3 C6 05 24    	je gets_escape
0160+  23C6             	
0161+  23C6 76 08       	cmp ah, $08			; check for backspace
0162+  23C8 C6 D1 23    	je gets_backspace
0163+  23CB             
0164+  23CB 1A          	mov al, ah
0165+  23CC 3E          	mov [d], al
0166+  23CD 79          	inc d
0167+  23CE 0A A7 23    	jmp gets_loop
0168+  23D1             gets_backspace:
0169+  23D1 7F          	dec d
0170+  23D2 0A A7 23    	jmp gets_loop
0171+  23D5             gets_telnet_escape:
0172+  23D5 FD 0C       	sti
0173+  23D7 19 01       	mov al, 1
0174+  23D9 05 03       	syscall sys_io				; receive in AH without echo
0175+  23DB B9 00       	cmp al, 0					; check error code (AL)
0176+  23DD C6 D5 23    	je gets_telnet_escape		; if no char received, retry
0177+  23E0 76 5B       	cmp ah, '['
0178+  23E2 C7 A7 23    	jne gets_loop
0179+  23E5             gets_telnet_escape_phase2:
0180+  23E5 FD 0C       	sti
0181+  23E7 19 01       	mov al, 1
0182+  23E9 05 03       	syscall sys_io					; receive in AH without echo
0183+  23EB B9 00       	cmp al, 0						; check error code (AL)
0184+  23ED C6 E5 23    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  23F0 76 44       	cmp ah, 'D'
0186+  23F2 C6 FD 23    	je gets_left_arrow
0187+  23F5 76 43       	cmp ah, 'C'
0188+  23F7 C6 01 24    	je gets_right_arrow
0189+  23FA 0A A7 23    	jmp gets_loop
0190+  23FD             gets_left_arrow:
0191+  23FD 7F          	dec d
0192+  23FE 0A A7 23    	jmp gets_loop
0193+  2401             gets_right_arrow:
0194+  2401 79          	inc d
0195+  2402 0A A7 23    	jmp gets_loop
0196+  2405             gets_escape:
0197+  2405 FD 0C       	sti
0198+  2407 19 01       	mov al, 1
0199+  2409 05 03       	syscall sys_io			; receive in AH
0200+  240B B9 00       	cmp al, 0				; check error code (AL)
0201+  240D C6 05 24    	je gets_escape			; if no char received, retry
0202+  2410 76 6E       	cmp ah, 'n'
0203+  2412 C6 20 24    	je gets_LF
0204+  2415 76 72       	cmp ah, 'r'
0205+  2417 C6 27 24    	je gets_CR
0206+  241A 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  241B 3E          	mov [d], al
0208+  241C 79          	inc d
0209+  241D 0A A7 23    	jmp gets_loop
0210+  2420             gets_LF:
0211+  2420 19 0A       	mov al, $0A
0212+  2422 3E          	mov [d], al
0213+  2423 79          	inc d
0214+  2424 0A A7 23    	jmp gets_loop
0215+  2427             gets_CR:
0216+  2427 19 0D       	mov al, $0D
0217+  2429 3E          	mov [d], al
0218+  242A 79          	inc d
0219+  242B 0A A7 23    	jmp gets_loop
0220+  242E             gets_end:
0221+  242E 19 00       	mov al, 0
0222+  2430 3E          	mov [d], al				; terminate string
0223+  2431 E7          	pop d
0224+  2432 E4          	pop a
0225+  2433 09          	ret
0226+  2434             
0227+  2434             
0228+  2434             
0229+  2434             
0230+  2434             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  2434             ;; INPUT TEXT
0232+  2434             ;; terminated with CTRL+D
0233+  2434             ;; pointer in D
0234+  2434             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  2434             gettxt:
0236+  2434 D7          	push a
0237+  2435 DA          	push d
0238+  2436             gettxt_loop:
0239+  2436 19 01       	mov al, 1
0240+  2438 05 03       	syscall sys_io			; receive in AH
0241+  243A B9 00       	cmp al, 0				; check error code (AL)
0242+  243C C6 36 24    	je gettxt_loop		; if no char received, retry
0243+  243F 76 04       	cmp ah, 4			; EOT
0244+  2441 C6 7F 24    	je gettxt_end
0245+  2444 76 08       	cmp ah, $08			; check for backspace
0246+  2446 C6 7B 24    	je gettxt_backspace
0247+  2449 76 5C       	cmp ah, $5C				; '\\'
0248+  244B C6 54 24    	je gettxt_escape
0249+  244E 1A          	mov al, ah
0250+  244F 3E          	mov [d], al
0251+  2450 79          	inc d
0252+  2451 0A 36 24    	jmp gettxt_loop
0253+  2454             gettxt_escape:
0254+  2454 19 01       	mov al, 1
0255+  2456 05 03       	syscall sys_io			; receive in AH
0256+  2458 B9 00       	cmp al, 0				; check error code (AL)
0257+  245A C6 54 24    	je gettxt_escape		; if no char received, retry
0258+  245D 76 6E       	cmp ah, 'n'
0259+  245F C6 6D 24    	je gettxt_LF
0260+  2462 76 72       	cmp ah, 'r'
0261+  2464 C6 74 24    	je gettxt_CR
0262+  2467 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  2468 3E          	mov [d], al
0264+  2469 79          	inc d
0265+  246A 0A 36 24    	jmp gettxt_loop
0266+  246D             gettxt_LF:
0267+  246D 19 0A       	mov al, $0A
0268+  246F 3E          	mov [d], al
0269+  2470 79          	inc d
0270+  2471 0A 36 24    	jmp gettxt_loop
0271+  2474             gettxt_CR:
0272+  2474 19 0D       	mov al, $0D
0273+  2476 3E          	mov [d], al
0274+  2477 79          	inc d
0275+  2478 0A 36 24    	jmp gettxt_loop
0276+  247B             gettxt_backspace:
0277+  247B 7F          	dec d
0278+  247C 0A 36 24    	jmp gettxt_loop
0279+  247F             gettxt_end:
0280+  247F 19 00       	mov al, 0
0281+  2481 3E          	mov [d], al				; terminate string
0282+  2482 E7          	pop d
0283+  2483 E4          	pop a
0284+  2484 09          	ret
0285+  2485             
0286+  2485             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  2485             ; PRINT NEW LINE
0288+  2485             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  2485             printnl:
0290+  2485 D7          	push a
0291+  2486 10 00 0A    	mov a, $0A00
0292+  2489 05 03       	syscall sys_io
0293+  248B 10 00 0D    	mov a, $0D00
0294+  248E 05 03       	syscall sys_io
0295+  2490 E4          	pop a
0296+  2491 09          	ret
0297+  2492             
0298+  2492             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  2492             ; strtoint
0300+  2492             ; 4 digit hex string number in d
0301+  2492             ; integer returned in A
0302+  2492             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  2492             strtointx:
0304+  2492 D8          	push b
0305+  2493 32          	mov bl, [d]
0306+  2494 37          	mov bh, bl
0307+  2495 33 01 00    	mov bl, [d + 1]
0308+  2498 07 53 23    	call atoi				; convert to int in AL
0309+  249B 23          	mov ah, al				; move to AH
0310+  249C 33 02 00    	mov bl, [d + 2]
0311+  249F 37          	mov bh, bl
0312+  24A0 33 03 00    	mov bl, [d + 3]
0313+  24A3 07 53 23    	call atoi				; convert to int in AL
0314+  24A6 E5          	pop b
0315+  24A7 09          	ret
0316+  24A8             
0317+  24A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  24A8             ; strtoint
0319+  24A8             ; 5 digit base10 string number in d
0320+  24A8             ; integer returned in A
0321+  24A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  24A8             strtoint:
0323+  24A8 E2          	push si
0324+  24A9 D8          	push b
0325+  24AA D9          	push c
0326+  24AB DA          	push d
0327+  24AC 07 D3 22    	call strlen			; get string length in C
0328+  24AF 7E          	dec c
0329+  24B0 FD 4E       	mov si, d
0330+  24B2 12          	mov a, c
0331+  24B3 FD 99       	shl a
0332+  24B5 3B 3B 23    	mov d, table_power
0333+  24B8 59          	add d, a
0334+  24B9 38 00 00    	mov c, 0
0335+  24BC             strtoint_L0:
0336+  24BC F6          	lodsb			; load ASCII to al
0337+  24BD B9 00       	cmp al, 0
0338+  24BF C6 D2 24    	je strtoint_end
0339+  24C2 6F 30       	sub al, $30		; make into integer
0340+  24C4 22 00       	mov ah, 0
0341+  24C6 2A          	mov b, [d]
0342+  24C7 AC          	mul a, b			; result in B since it fits in 16bits
0343+  24C8 11          	mov a, b
0344+  24C9 28          	mov b, c
0345+  24CA 54          	add a, b
0346+  24CB 39          	mov c, a
0347+  24CC 63 02 00    	sub d, 2
0348+  24CF 0A BC 24    	jmp strtoint_L0
0349+  24D2             strtoint_end:
0350+  24D2 12          	mov a, c
0351+  24D3 E7          	pop d
0352+  24D4 E6          	pop c
0353+  24D5 E5          	pop b
0354+  24D6 EF          	pop si
0355+  24D7 09          	ret
0356+  24D8             
0357+  24D8             
0358+  24D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  24D8             ; PRINT NULL TERMINATED STRING
0360+  24D8             ; pointer in D
0361+  24D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  24D8             puts:
0363+  24D8 D7          	push a
0364+  24D9 DA          	push d
0365+  24DA             puts_L1:
0366+  24DA 1E          	mov al, [d]
0367+  24DB B9 00       	cmp al, 0
0368+  24DD C6 E9 24    	jz puts_END
0369+  24E0 23          	mov ah, al
0370+  24E1 19 00       	mov al, 0
0371+  24E3 05 03       	syscall sys_io
0372+  24E5 79          	inc d
0373+  24E6 0A DA 24    	jmp puts_L1
0374+  24E9             puts_END:
0375+  24E9 E7          	pop d
0376+  24EA E4          	pop a
0377+  24EB 09          	ret
0378+  24EC             
0379+  24EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  24EC             ; PRINT N SIZE STRING
0381+  24EC             ; pointer in D
0382+  24EC             ; size in C
0383+  24EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  24EC             putsn:
0385+  24EC DB          	push al
0386+  24ED DA          	push d
0387+  24EE D9          	push c
0388+  24EF             putsn_L0:
0389+  24EF 1E          	mov al, [d]
0390+  24F0 23          	mov ah, al
0391+  24F1 19 00       	mov al, 0
0392+  24F3 05 03       	syscall sys_io
0393+  24F5 79          	inc d
0394+  24F6 7E          	dec c	
0395+  24F7 C2 00 00    	cmp c, 0
0396+  24FA C7 EF 24    	jne putsn_L0
0397+  24FD             putsn_end:
0398+  24FD E6          	pop c
0399+  24FE E7          	pop d
0400+  24FF E8          	pop al
0401+  2500 09          	ret
0402+  2501             
0403+  2501             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  2501             ; print 16bit decimal number
0405+  2501             ; input number in A
0406+  2501             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  2501             print_u16d:
0408+  2501 D7          	push a
0409+  2502 D8          	push b
0410+  2503 26 10 27    	mov b, 10000
0411+  2506 AE          	div a, b			; get 10000 coeff.
0412+  2507 07 2D 25    	call print_number
0413+  250A 11          	mov a, b
0414+  250B 26 E8 03    	mov b, 1000
0415+  250E AE          	div a, b			; get 10000 coeff.
0416+  250F 07 2D 25    	call print_number
0417+  2512 11          	mov a, b
0418+  2513 26 64 00    	mov b, 100
0419+  2516 AE          	div a, b
0420+  2517 07 2D 25    	call print_number
0421+  251A 11          	mov a, b
0422+  251B 26 0A 00    	mov b, 10
0423+  251E AE          	div a, b
0424+  251F 07 2D 25    	call print_number
0425+  2522 11          	mov a, b
0426+  2523 6A 30       	add al, $30
0427+  2525 23          	mov ah, al
0428+  2526 19 00       	mov al, 0
0429+  2528 05 03       	syscall sys_io	; print coeff
0430+  252A E5          	pop b
0431+  252B E4          	pop a
0432+  252C 09          	ret
0433+  252D             
0434+  252D             
0435+  252D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  252D             ; if A == 0, print space
0437+  252D             ; else print A
0438+  252D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  252D             print_number:
0440+  252D 6A 30       	add al, $30
0441+  252F 23          	mov ah, al
0442+  2530 07 9E 23    	call putchar
0443+  2533 09          	ret
0444+  2534             
0445+  2534             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  2534             ; PRINT 16BIT HEX INTEGER
0447+  2534             ; integer value in reg B
0448+  2534             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  2534             print_u16x:
0450+  2534 D7          	push a
0451+  2535 D8          	push b
0452+  2536 DD          	push bl
0453+  2537 30          	mov bl, bh
0454+  2538 07 65 23    	call itoa				; convert bh to char in A
0455+  253B 2F          	mov bl, al				; save al
0456+  253C 19 00       	mov al, 0
0457+  253E 05 03       	syscall sys_io				; display AH
0458+  2540 24          	mov ah, bl				; retrieve al
0459+  2541 19 00       	mov al, 0
0460+  2543 05 03       	syscall sys_io				; display AL
0461+  2545             
0462+  2545 EA          	pop bl
0463+  2546 07 65 23    	call itoa				; convert bh to char in A
0464+  2549 2F          	mov bl, al				; save al
0465+  254A 19 00       	mov al, 0
0466+  254C 05 03       	syscall sys_io				; display AH
0467+  254E 24          	mov ah, bl				; retrieve al
0468+  254F 19 00       	mov al, 0
0469+  2551 05 03       	syscall sys_io				; display AL
0470+  2553             
0471+  2553 E5          	pop b
0472+  2554 E4          	pop a
0473+  2555 09          	ret
0474+  2556             
0475+  2556             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  2556             ; INPUT 16BIT HEX INTEGER
0477+  2556             ; read 16bit integer into A
0478+  2556             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  2556             scan_u16x:
0480+  2556 F8 10 00    	enter 16
0481+  2559 D8          	push b
0482+  255A DA          	push d
0483+  255B             
0484+  255B FA F1 FF    	lea d, [bp + -15]
0485+  255E 07 A5 23    	call gets				; get number
0486+  2561             
0487+  2561 32          	mov bl, [d]
0488+  2562 37          	mov bh, bl
0489+  2563 33 01 00    	mov bl, [d + 1]
0490+  2566 07 53 23    	call atoi				; convert to int in AL
0491+  2569 23          	mov ah, al				; move to AH
0492+  256A             
0493+  256A 33 02 00    	mov bl, [d + 2]
0494+  256D 37          	mov bh, bl
0495+  256E 33 03 00    	mov bl, [d + 3]
0496+  2571 07 53 23    	call atoi				; convert to int in AL
0497+  2574             
0498+  2574 E7          	pop d
0499+  2575 E5          	pop b
0500+  2576 F9          	leave
0501+  2577 09          	ret
0502+  2578             
0503+  2578             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  2578             ; PRINT 8bit HEX INTEGER
0505+  2578             ; integer value in reg bl
0506+  2578             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  2578             print_u8x:
0508+  2578 D7          	push a
0509+  2579 DD          	push bl
0510+  257A             
0511+  257A 07 65 23    	call itoa				; convert bl to char in A
0512+  257D 2F          	mov bl, al				; save al
0513+  257E 19 00       	mov al, 0
0514+  2580 05 03       	syscall sys_io				; display AH
0515+  2582 24          	mov ah, bl				; retrieve al
0516+  2583 19 00       	mov al, 0
0517+  2585 05 03       	syscall sys_io				; display AL
0518+  2587             
0519+  2587 EA          	pop bl
0520+  2588 E4          	pop a
0521+  2589 09          	ret
0522+  258A             
0523+  258A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  258A             ; print 8bit decimal unsigned number
0525+  258A             ; input number in AL
0526+  258A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  258A             print_u8d:
0528+  258A D7          	push a
0529+  258B D8          	push b
0530+  258C             
0531+  258C 22 00       	mov ah, 0
0532+  258E 26 64 00    	mov b, 100
0533+  2591 AE          	div a, b
0534+  2592 D8          	push b			; save remainder
0535+  2593 B9 00       	cmp al, 0
0536+  2595 C6 9F 25    	je skip100
0537+  2598 6A 30       	add al, $30
0538+  259A 23          	mov ah, al
0539+  259B 19 00       	mov al, 0
0540+  259D 05 03       	syscall sys_io	; print coeff
0541+  259F             skip100:
0542+  259F E4          	pop a
0543+  25A0 22 00       	mov ah, 0
0544+  25A2 26 0A 00    	mov b, 10
0545+  25A5 AE          	div a, b
0546+  25A6 D8          	push b			; save remainder
0547+  25A7 B9 00       	cmp al, 0
0548+  25A9 C6 B3 25    	je skip10
0549+  25AC 6A 30       	add al, $30
0550+  25AE 23          	mov ah, al
0551+  25AF 19 00       	mov al, 0
0552+  25B1 05 03       	syscall sys_io	; print coeff
0553+  25B3             skip10:
0554+  25B3 E4          	pop a
0555+  25B4 1B          	mov al, bl
0556+  25B5 6A 30       	add al, $30
0557+  25B7 23          	mov ah, al
0558+  25B8 19 00       	mov al, 0
0559+  25BA 05 03       	syscall sys_io	; print coeff
0560+  25BC E5          	pop b
0561+  25BD E4          	pop a
0562+  25BE 09          	ret
0563+  25BF             
0564+  25BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  25BF             ; INPUT 8BIT HEX INTEGER
0566+  25BF             ; read 8bit integer into AL
0567+  25BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  25BF             scan_u8x:
0569+  25BF F8 04 00    	enter 4
0570+  25C2 D8          	push b
0571+  25C3 DA          	push d
0572+  25C4             
0573+  25C4 FA FD FF    	lea d, [bp + -3]
0574+  25C7 07 A5 23    	call gets				; get number
0575+  25CA             
0576+  25CA 32          	mov bl, [d]
0577+  25CB 37          	mov bh, bl
0578+  25CC 33 01 00    	mov bl, [d + 1]
0579+  25CF 07 53 23    	call atoi				; convert to int in AL
0580+  25D2             
0581+  25D2 E7          	pop d
0582+  25D3 E5          	pop b
0583+  25D4 F9          	leave
0584+  25D5 09          	ret
0585+  25D6             
0586+  25D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  25D6             ; input decimal number
0588+  25D6             ; result in A
0589+  25D6             ; 655'\0'
0590+  25D6             ; low--------high
0591+  25D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  25D6             scan_u16d:
0593+  25D6 F8 08 00    	enter 8
0594+  25D9 E2          	push si
0595+  25DA D8          	push b
0596+  25DB D9          	push c
0597+  25DC DA          	push d
0598+  25DD FA F9 FF    	lea d, [bp +- 7]
0599+  25E0 07 A5 23    	call gets
0600+  25E3 07 D3 22    	call strlen			; get string length in C
0601+  25E6 7E          	dec c
0602+  25E7 FD 4E       	mov si, d
0603+  25E9 12          	mov a, c
0604+  25EA FD 99       	shl a
0605+  25EC 3B 3B 23    	mov d, table_power
0606+  25EF 59          	add d, a
0607+  25F0 38 00 00    	mov c, 0
0608+  25F3             mul_loop:
0609+  25F3 F6          	lodsb			; load ASCII to al
0610+  25F4 B9 00       	cmp al, 0
0611+  25F6 C6 09 26    	je mul_exit
0612+  25F9 6F 30       	sub al, $30		; make into integer
0613+  25FB 22 00       	mov ah, 0
0614+  25FD 2A          	mov b, [d]
0615+  25FE AC          	mul a, b			; result in B since it fits in 16bits
0616+  25FF 11          	mov a, b
0617+  2600 28          	mov b, c
0618+  2601 54          	add a, b
0619+  2602 39          	mov c, a
0620+  2603 63 02 00    	sub d, 2
0621+  2606 0A F3 25    	jmp mul_loop
0622+  2609             mul_exit:
0623+  2609 12          	mov a, c
0624+  260A E7          	pop d
0625+  260B E6          	pop c
0626+  260C E5          	pop b
0627+  260D EF          	pop si
0628+  260E F9          	leave
0629+  260F 09          	ret
0925   2610             ; --- END INCLUDE BLOCK
0926   2610             
0927   2610             
0928   2610             .end
tasm: Number of errors = 0
