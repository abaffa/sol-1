0001   0000             ; --- FILENAME: life.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; n
0011   0408 26 FA 21      mov b, _string_0
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 07 8E 04      call print
0015   0411 51 02 00      add sp, 2
0016   0414 07 99 04      call getn
0017   0417 D7            push a
0018   0418 11            mov a, b
0019   0419 45 FD FF      mov [bp + -3], a ; n
0020   041C E4            pop a
0021   041D             _for1_init:
0022   041D 26 00 00      mov b, 0
0023   0420 D7            push a
0024   0421 11            mov a, b
0025   0422 45 FF FF      mov [bp + -1], a ; i
0026   0425 E4            pop a
0027   0426             _for1_cond:
0028   0426 2C FF FF      mov b, [bp + -1] ; i
0029   0429 D7            push a
0030   042A 11            mov a, b
0031   042B 2C FD FF      mov b, [bp + -3] ; n
0032   042E B0            cmp a, b
0033   042F 0E            lodflgs
0034   0430 87 02         and al, %00000010 ; <
0035   0432 B9 00         cmp al, 0
0036   0434 0E            lodflgs
0037   0435 96            not al
0038   0436 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0039   0438 22 00         mov ah, 0
0040   043A 27            mov b, a
0041   043B E4            pop a
0042   043C C0 00 00      cmp b, 0
0043   043F C6 88 04      je _for1_exit
0044   0442             _for1_block:
0045   0442             
0046   0442             ; --- BEGIN INLINE ASM BLOCK
0047   0442 3B C9 22      mov d, s_telnet_clear
0048   0445 07 6E 24      call puts
0049   0448             ; --- END INLINE ASM BLOCK
0050   0448             
0051   0448 26 08 22      mov b, _string_1
0052   044B FD AB         swp b
0053   044D D8            push b
0054   044E 07 8E 04      call print
0055   0451 51 02 00      add sp, 2
0056   0454             
0057   0454             ; --- BEGIN INLINE ASM BLOCK
0058   0454 17 FF FF      mov a, [bp + -1]
0059   0457 07 97 24      call print_u16d
0060   045A 22 0A         mov ah, $0A
0061   045C 07 34 23      call putchar
0062   045F             ; --- END INLINE ASM BLOCK
0063   045F             
0064   045F 26 15 22      mov b, _string_2
0065   0462 FD AB         swp b
0066   0464 D8            push b
0067   0465 07 8E 04      call print
0068   0468 51 02 00      add sp, 2
0069   046B             
0070   046B             ; --- BEGIN INLINE ASM BLOCK
0071   046B 48            mov a, sp
0072   046C 07 97 24      call print_u16d
0073   046F 22 0A         mov ah, $0A
0074   0471 07 34 23      call putchar
0075   0474             ; --- END INLINE ASM BLOCK
0076   0474             
0077   0474 07 A9 04      call print_game
0078   0477 07 5D 05      call update_game
0079   047A             _for1_update:
0080   047A 2C FF FF      mov b, [bp + -1] ; i
0081   047D FD 77         inc b
0082   047F D7            push a
0083   0480 11            mov a, b
0084   0481 45 FF FF      mov [bp + -1], a ; i
0085   0484 E4            pop a
0086   0485 0A 26 04      jmp _for1_cond
0087   0488             _for1_exit:
0088   0488 26 00 00      mov b, 0
0089   048B F9            leave
0090   048C 05 0B         syscall sys_terminate_proc
0091   048E             print:
0092   048E D2            push bp
0093   048F 9B            mov bp, sp
0094   0490             
0095   0490             ; --- BEGIN INLINE ASM BLOCK
0096   0490 17 05 00      mov a, [bp + 5]
0097   0493 3C            mov d, a
0098   0494 07 6E 24      call puts
0099   0497             ; --- END INLINE ASM BLOCK
0100   0497             
0101   0497 F9            leave
0102   0498 09            ret
0103   0499             getn:
0104   0499 D2            push bp
0105   049A 9B            mov bp, sp
0106   049B 52 02 00      sub sp, 2 ; n
0107   049E             
0108   049E             ; --- BEGIN INLINE ASM BLOCK
0109   049E 07 6C 25      call scan_u16d
0110   04A1 45 FF FF      mov [bp + -1], a
0111   04A4             ; --- END INLINE ASM BLOCK
0112   04A4             
0113   04A4 2C FF FF      mov b, [bp + -1] ; n
0114   04A7 F9            leave
0115   04A8 09            ret
0116   04A9             print_game:
0117   04A9 D2            push bp
0118   04AA 9B            mov bp, sp
0119   04AB 52 02 00      sub sp, 2 ; i
0120   04AE 52 02 00      sub sp, 2 ; j
0121   04B1             _for2_init:
0122   04B1 26 00 00      mov b, 0
0123   04B4 D7            push a
0124   04B5 11            mov a, b
0125   04B6 45 FF FF      mov [bp + -1], a ; i
0126   04B9 E4            pop a
0127   04BA             _for2_cond:
0128   04BA 2C FF FF      mov b, [bp + -1] ; i
0129   04BD D7            push a
0130   04BE 11            mov a, b
0131   04BF 26 28 00      mov b, 40
0132   04C2 B0            cmp a, b
0133   04C3 0E            lodflgs
0134   04C4 87 02         and al, %00000010 ; <
0135   04C6 B9 00         cmp al, 0
0136   04C8 0E            lodflgs
0137   04C9 96            not al
0138   04CA 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0139   04CC 22 00         mov ah, 0
0140   04CE 27            mov b, a
0141   04CF E4            pop a
0142   04D0 C0 00 00      cmp b, 0
0143   04D3 C6 5B 05      je _for2_exit
0144   04D6             _for2_block:
0145   04D6             _for3_init:
0146   04D6 26 00 00      mov b, 0
0147   04D9 D7            push a
0148   04DA 11            mov a, b
0149   04DB 45 FD FF      mov [bp + -3], a ; j
0150   04DE E4            pop a
0151   04DF             _for3_cond:
0152   04DF 2C FD FF      mov b, [bp + -3] ; j
0153   04E2 D7            push a
0154   04E3 11            mov a, b
0155   04E4 26 28 00      mov b, 40
0156   04E7 B0            cmp a, b
0157   04E8 0E            lodflgs
0158   04E9 87 02         and al, %00000010 ; <
0159   04EB B9 00         cmp al, 0
0160   04ED 0E            lodflgs
0161   04EE 96            not al
0162   04EF 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0163   04F1 22 00         mov ah, 0
0164   04F3 27            mov b, a
0165   04F4 E4            pop a
0166   04F5 C0 00 00      cmp b, 0
0167   04F8 C6 41 05      je _for3_exit
0168   04FB             _for3_block:
0169   04FB             _if4_cond:
0170   04FB 29 76 15      mov b, [curr_state]
0171   04FE D7            push a
0172   04FF 74            mov d, b
0173   0500 2C FF FF      mov b, [bp + -1] ; i
0174   0503 10 50 00      mov a, 80
0175   0506 AC            mul a, b
0176   0507 5A            add d, b
0177   0508 2C FD FF      mov b, [bp + -3] ; j
0178   050B 10 02 00      mov a, 2
0179   050E AC            mul a, b
0180   050F 5A            add d, b
0181   0510 2A            mov b, [d]
0182   0511 E4            pop a
0183   0512 C0 00 00      cmp b, 0
0184   0515 C6 27 05      je _if4_else
0185   0518             _if4_true:
0186   0518 26 1A 22      mov b, _string_3
0187   051B FD AB         swp b
0188   051D D8            push b
0189   051E 07 8E 04      call print
0190   0521 51 02 00      add sp, 2
0191   0524 0A 33 05      jmp _if4_exit
0192   0527             _if4_else:
0193   0527 26 1D 22      mov b, _string_4
0194   052A FD AB         swp b
0195   052C D8            push b
0196   052D 07 8E 04      call print
0197   0530 51 02 00      add sp, 2
0198   0533             _if4_exit:
0199   0533             _for3_update:
0200   0533 2C FD FF      mov b, [bp + -3] ; j
0201   0536 FD 77         inc b
0202   0538 D7            push a
0203   0539 11            mov a, b
0204   053A 45 FD FF      mov [bp + -3], a ; j
0205   053D E4            pop a
0206   053E 0A DF 04      jmp _for3_cond
0207   0541             _for3_exit:
0208   0541 26 20 22      mov b, _string_5
0209   0544 FD AB         swp b
0210   0546 D8            push b
0211   0547 07 8E 04      call print
0212   054A 51 02 00      add sp, 2
0213   054D             _for2_update:
0214   054D 2C FF FF      mov b, [bp + -1] ; i
0215   0550 FD 77         inc b
0216   0552 D7            push a
0217   0553 11            mov a, b
0218   0554 45 FF FF      mov [bp + -1], a ; i
0219   0557 E4            pop a
0220   0558 0A BA 04      jmp _for2_cond
0221   055B             _for2_exit:
0222   055B F9            leave
0223   055C 09            ret
0224   055D             update_game:
0225   055D D2            push bp
0226   055E 9B            mov bp, sp
0227   055F 52 02 00      sub sp, 2 ; i
0228   0562 52 02 00      sub sp, 2 ; j
0229   0565 52 02 00      sub sp, 2 ; ni
0230   0568 52 02 00      sub sp, 2 ; nj
0231   056B 52 02 00      sub sp, 2 ; count
0232   056E             _for5_init:
0233   056E 26 00 00      mov b, 0
0234   0571 D7            push a
0235   0572 11            mov a, b
0236   0573 45 FF FF      mov [bp + -1], a ; i
0237   0576 E4            pop a
0238   0577             _for5_cond:
0239   0577 2C FF FF      mov b, [bp + -1] ; i
0240   057A D7            push a
0241   057B 11            mov a, b
0242   057C 26 28 00      mov b, 40
0243   057F B0            cmp a, b
0244   0580 0E            lodflgs
0245   0581 87 02         and al, %00000010 ; <
0246   0583 B9 00         cmp al, 0
0247   0585 0E            lodflgs
0248   0586 96            not al
0249   0587 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0250   0589 22 00         mov ah, 0
0251   058B 27            mov b, a
0252   058C E4            pop a
0253   058D C0 00 00      cmp b, 0
0254   0590 C6 03 06      je _for5_exit
0255   0593             _for5_block:
0256   0593             _for6_init:
0257   0593 26 00 00      mov b, 0
0258   0596 D7            push a
0259   0597 11            mov a, b
0260   0598 45 FD FF      mov [bp + -3], a ; j
0261   059B E4            pop a
0262   059C             _for6_cond:
0263   059C 2C FD FF      mov b, [bp + -3] ; j
0264   059F D7            push a
0265   05A0 11            mov a, b
0266   05A1 26 28 00      mov b, 40
0267   05A4 B0            cmp a, b
0268   05A5 0E            lodflgs
0269   05A6 87 02         and al, %00000010 ; <
0270   05A8 B9 00         cmp al, 0
0271   05AA 0E            lodflgs
0272   05AB 96            not al
0273   05AC 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0274   05AE 22 00         mov ah, 0
0275   05B0 27            mov b, a
0276   05B1 E4            pop a
0277   05B2 C0 00 00      cmp b, 0
0278   05B5 C6 F5 05      je _for6_exit
0279   05B8             _for6_block:
0280   05B8 29 F8 21      mov b, [next_state]
0281   05BB 74            mov d, b
0282   05BC 2C FF FF      mov b, [bp + -1] ; i
0283   05BF 10 50 00      mov a, 80
0284   05C2 AC            mul a, b
0285   05C3 5A            add d, b
0286   05C4 2C FD FF      mov b, [bp + -3] ; j
0287   05C7 10 02 00      mov a, 2
0288   05CA AC            mul a, b
0289   05CB 5A            add d, b
0290   05CC DA            push d
0291   05CD 29 76 15      mov b, [curr_state]
0292   05D0 D7            push a
0293   05D1 74            mov d, b
0294   05D2 2C FF FF      mov b, [bp + -1] ; i
0295   05D5 10 50 00      mov a, 80
0296   05D8 AC            mul a, b
0297   05D9 5A            add d, b
0298   05DA 2C FD FF      mov b, [bp + -3] ; j
0299   05DD 10 02 00      mov a, 2
0300   05E0 AC            mul a, b
0301   05E1 5A            add d, b
0302   05E2 2A            mov b, [d]
0303   05E3 E4            pop a
0304   05E4 E7            pop d
0305   05E5 11            mov a, b
0306   05E6 43            mov [d], a
0307   05E7             _for6_update:
0308   05E7 2C FD FF      mov b, [bp + -3] ; j
0309   05EA FD 77         inc b
0310   05EC D7            push a
0311   05ED 11            mov a, b
0312   05EE 45 FD FF      mov [bp + -3], a ; j
0313   05F1 E4            pop a
0314   05F2 0A 9C 05      jmp _for6_cond
0315   05F5             _for6_exit:
0316   05F5             _for5_update:
0317   05F5 2C FF FF      mov b, [bp + -1] ; i
0318   05F8 FD 77         inc b
0319   05FA D7            push a
0320   05FB 11            mov a, b
0321   05FC 45 FF FF      mov [bp + -1], a ; i
0322   05FF E4            pop a
0323   0600 0A 77 05      jmp _for5_cond
0324   0603             _for5_exit:
0325   0603             _for7_init:
0326   0603 26 01 00      mov b, 1
0327   0606 D7            push a
0328   0607 11            mov a, b
0329   0608 45 FF FF      mov [bp + -1], a ; i
0330   060B E4            pop a
0331   060C             _for7_cond:
0332   060C 2C FF FF      mov b, [bp + -1] ; i
0333   060F D7            push a
0334   0610 11            mov a, b
0335   0611 26 28 00      mov b, 40
0336   0614 D7            push a
0337   0615 11            mov a, b
0338   0616 26 01 00      mov b, 1
0339   0619 60            sub a, b
0340   061A 27            mov b, a
0341   061B E4            pop a
0342   061C B0            cmp a, b
0343   061D 0E            lodflgs
0344   061E 87 02         and al, %00000010 ; <
0345   0620 B9 00         cmp al, 0
0346   0622 0E            lodflgs
0347   0623 96            not al
0348   0624 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0349   0626 22 00         mov ah, 0
0350   0628 27            mov b, a
0351   0629 E4            pop a
0352   062A C0 00 00      cmp b, 0
0353   062D C6 5F 08      je _for7_exit
0354   0630             _for7_block:
0355   0630             _for8_init:
0356   0630 26 01 00      mov b, 1
0357   0633 D7            push a
0358   0634 11            mov a, b
0359   0635 45 FD FF      mov [bp + -3], a ; j
0360   0638 E4            pop a
0361   0639             _for8_cond:
0362   0639 2C FD FF      mov b, [bp + -3] ; j
0363   063C D7            push a
0364   063D 11            mov a, b
0365   063E 26 28 00      mov b, 40
0366   0641 D7            push a
0367   0642 11            mov a, b
0368   0643 26 01 00      mov b, 1
0369   0646 60            sub a, b
0370   0647 27            mov b, a
0371   0648 E4            pop a
0372   0649 B0            cmp a, b
0373   064A 0E            lodflgs
0374   064B 87 02         and al, %00000010 ; <
0375   064D B9 00         cmp al, 0
0376   064F 0E            lodflgs
0377   0650 96            not al
0378   0651 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0379   0653 22 00         mov ah, 0
0380   0655 27            mov b, a
0381   0656 E4            pop a
0382   0657 C0 00 00      cmp b, 0
0383   065A C6 51 08      je _for8_exit
0384   065D             _for8_block:
0385   065D 26 00 00      mov b, 0
0386   0660 D7            push a
0387   0661 11            mov a, b
0388   0662 45 F7 FF      mov [bp + -9], a ; count
0389   0665 E4            pop a
0390   0666             _for9_init:
0391   0666 2C FF FF      mov b, [bp + -1] ; i
0392   0669 D7            push a
0393   066A 11            mov a, b
0394   066B 26 01 00      mov b, 1
0395   066E 60            sub a, b
0396   066F 27            mov b, a
0397   0670 11            mov a, b
0398   0671 45 FB FF      mov [bp + -5], a ; ni
0399   0674 E4            pop a
0400   0675             _for9_cond:
0401   0675 2C FB FF      mov b, [bp + -5] ; ni
0402   0678 D7            push a
0403   0679 11            mov a, b
0404   067A 2C FF FF      mov b, [bp + -1] ; i
0405   067D D7            push a
0406   067E 11            mov a, b
0407   067F 26 01 00      mov b, 1
0408   0682 54            add a, b
0409   0683 27            mov b, a
0410   0684 E4            pop a
0411   0685 B0            cmp a, b
0412   0686 0E            lodflgs
0413   0687 87 03         and al, %00000011 ; <=
0414   0689 B9 00         cmp al, 0
0415   068B 0E            lodflgs
0416   068C 96            not al
0417   068D 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0418   068F 22 00         mov ah, 0
0419   0691 27            mov b, a
0420   0692 E4            pop a
0421   0693 C0 00 00      cmp b, 0
0422   0696 C6 91 07      je _for9_exit
0423   0699             _for9_block:
0424   0699             _for10_init:
0425   0699 2C FD FF      mov b, [bp + -3] ; j
0426   069C D7            push a
0427   069D 11            mov a, b
0428   069E 26 01 00      mov b, 1
0429   06A1 60            sub a, b
0430   06A2 27            mov b, a
0431   06A3 11            mov a, b
0432   06A4 45 F9 FF      mov [bp + -7], a ; nj
0433   06A7 E4            pop a
0434   06A8             _for10_cond:
0435   06A8 2C F9 FF      mov b, [bp + -7] ; nj
0436   06AB D7            push a
0437   06AC 11            mov a, b
0438   06AD 2C FD FF      mov b, [bp + -3] ; j
0439   06B0 D7            push a
0440   06B1 11            mov a, b
0441   06B2 26 01 00      mov b, 1
0442   06B5 54            add a, b
0443   06B6 27            mov b, a
0444   06B7 E4            pop a
0445   06B8 B0            cmp a, b
0446   06B9 0E            lodflgs
0447   06BA 87 03         and al, %00000011 ; <=
0448   06BC B9 00         cmp al, 0
0449   06BE 0E            lodflgs
0450   06BF 96            not al
0451   06C0 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0452   06C2 22 00         mov ah, 0
0453   06C4 27            mov b, a
0454   06C5 E4            pop a
0455   06C6 C0 00 00      cmp b, 0
0456   06C9 C6 83 07      je _for10_exit
0457   06CC             _for10_block:
0458   06CC             _if11_cond:
0459   06CC 2C FB FF      mov b, [bp + -5] ; ni
0460   06CF D7            push a
0461   06D0 11            mov a, b
0462   06D1 26 28 00      mov b, 40
0463   06D4 B0            cmp a, b
0464   06D5 0E            lodflgs
0465   06D6 87 02         and al, %00000010 ; <
0466   06D8 B9 00         cmp al, 0
0467   06DA 0E            lodflgs
0468   06DB 96            not al
0469   06DC 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0470   06DE 22 00         mov ah, 0
0471   06E0 27            mov b, a
0472   06E1 11            mov a, b
0473   06E2 AF 00 00      cmp a, 0
0474   06E5 0E            lodflgs
0475   06E6 96            not al
0476   06E7 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0477   06E9 2C F9 FF      mov b, [bp + -7] ; nj
0478   06EC D7            push a
0479   06ED 11            mov a, b
0480   06EE 26 28 00      mov b, 40
0481   06F1 B0            cmp a, b
0482   06F2 0E            lodflgs
0483   06F3 87 02         and al, %00000010 ; <
0484   06F5 B9 00         cmp al, 0
0485   06F7 0E            lodflgs
0486   06F8 96            not al
0487   06F9 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0488   06FB 22 00         mov ah, 0
0489   06FD 27            mov b, a
0490   06FE E4            pop a
0491   06FF DB            push al
0492   0700 C0 00 00      cmp b, 0
0493   0703 0E            lodflgs
0494   0704 96            not al
0495   0705 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0496   0707 EA            pop bl
0497   0708 88            and al, bl
0498   0709 2F            mov bl, al
0499   070A A7 00         mov bh, 0
0500   070C E4            pop a
0501   070D C0 00 00      cmp b, 0
0502   0710 C6 75 07      je _if11_exit
0503   0713             _if11_true:
0504   0713             _if12_cond:
0505   0713 2C FB FF      mov b, [bp + -5] ; ni
0506   0716 D7            push a
0507   0717 11            mov a, b
0508   0718 2C FF FF      mov b, [bp + -1] ; i
0509   071B B0            cmp a, b
0510   071C 0E            lodflgs
0511   071D 87 01         and al, %00000001
0512   071F 8F 01         xor al, %00000001 ; !=
0513   0721 B9 00         cmp al, 0
0514   0723 0E            lodflgs
0515   0724 96            not al
0516   0725 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0517   0727 22 00         mov ah, 0
0518   0729 27            mov b, a
0519   072A 11            mov a, b
0520   072B 2C F9 FF      mov b, [bp + -7] ; nj
0521   072E D7            push a
0522   072F 11            mov a, b
0523   0730 2C FD FF      mov b, [bp + -3] ; j
0524   0733 B0            cmp a, b
0525   0734 0E            lodflgs
0526   0735 87 01         and al, %00000001
0527   0737 8F 01         xor al, %00000001 ; !=
0528   0739 B9 00         cmp al, 0
0529   073B 0E            lodflgs
0530   073C 96            not al
0531   073D 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0532   073F 22 00         mov ah, 0
0533   0741 27            mov b, a
0534   0742 E4            pop a
0535   0743 8A            or a, b
0536   0744 27            mov b, a
0537   0745 E4            pop a
0538   0746 C0 00 00      cmp b, 0
0539   0749 C6 72 07      je _if12_exit
0540   074C             _if12_true:
0541   074C 2C F7 FF      mov b, [bp + -9] ; count
0542   074F D7            push a
0543   0750 11            mov a, b
0544   0751 29 76 15      mov b, [curr_state]
0545   0754 D7            push a
0546   0755 74            mov d, b
0547   0756 2C FB FF      mov b, [bp + -5] ; ni
0548   0759 10 50 00      mov a, 80
0549   075C AC            mul a, b
0550   075D 5A            add d, b
0551   075E 2C F9 FF      mov b, [bp + -7] ; nj
0552   0761 10 02 00      mov a, 2
0553   0764 AC            mul a, b
0554   0765 5A            add d, b
0555   0766 2A            mov b, [d]
0556   0767 E4            pop a
0557   0768 54            add a, b
0558   0769 27            mov b, a
0559   076A 11            mov a, b
0560   076B 45 F7 FF      mov [bp + -9], a ; count
0561   076E E4            pop a
0562   076F 0A 72 07      jmp _if12_exit
0563   0772             _if12_exit:
0564   0772 0A 75 07      jmp _if11_exit
0565   0775             _if11_exit:
0566   0775             _for10_update:
0567   0775 2C F9 FF      mov b, [bp + -7] ; nj
0568   0778 FD 77         inc b
0569   077A D7            push a
0570   077B 11            mov a, b
0571   077C 45 F9 FF      mov [bp + -7], a ; nj
0572   077F E4            pop a
0573   0780 0A A8 06      jmp _for10_cond
0574   0783             _for10_exit:
0575   0783             _for9_update:
0576   0783 2C FB FF      mov b, [bp + -5] ; ni
0577   0786 FD 77         inc b
0578   0788 D7            push a
0579   0789 11            mov a, b
0580   078A 45 FB FF      mov [bp + -5], a ; ni
0581   078D E4            pop a
0582   078E 0A 75 06      jmp _for9_cond
0583   0791             _for9_exit:
0584   0791             _if13_cond:
0585   0791 29 76 15      mov b, [curr_state]
0586   0794 D7            push a
0587   0795 74            mov d, b
0588   0796 2C FF FF      mov b, [bp + -1] ; i
0589   0799 10 50 00      mov a, 80
0590   079C AC            mul a, b
0591   079D 5A            add d, b
0592   079E 2C FD FF      mov b, [bp + -3] ; j
0593   07A1 10 02 00      mov a, 2
0594   07A4 AC            mul a, b
0595   07A5 5A            add d, b
0596   07A6 2A            mov b, [d]
0597   07A7 E4            pop a
0598   07A8 C0 00 00      cmp b, 0
0599   07AB C6 09 08      je _if13_else
0600   07AE             _if13_true:
0601   07AE             _if14_cond:
0602   07AE 2C F7 FF      mov b, [bp + -9] ; count
0603   07B1 D7            push a
0604   07B2 11            mov a, b
0605   07B3 26 02 00      mov b, 2
0606   07B6 B0            cmp a, b
0607   07B7 0E            lodflgs
0608   07B8 87 02         and al, %00000010 ; <
0609   07BA B9 00         cmp al, 0
0610   07BC 0E            lodflgs
0611   07BD 96            not al
0612   07BE 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0613   07C0 22 00         mov ah, 0
0614   07C2 27            mov b, a
0615   07C3 11            mov a, b
0616   07C4 2C F7 FF      mov b, [bp + -9] ; count
0617   07C7 D7            push a
0618   07C8 11            mov a, b
0619   07C9 26 03 00      mov b, 3
0620   07CC B0            cmp a, b
0621   07CD 0E            lodflgs
0622   07CE 87 03         and al, %00000011
0623   07D0 B9 00         cmp al, %00000000
0624   07D2 0E            lodflgs
0625   07D3 87 01         and al, %00000001 ; >
0626   07D5 B9 00         cmp al, 0
0627   07D7 0E            lodflgs
0628   07D8 96            not al
0629   07D9 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0630   07DB 22 00         mov ah, 0
0631   07DD 27            mov b, a
0632   07DE E4            pop a
0633   07DF 8A            or a, b
0634   07E0 27            mov b, a
0635   07E1 E4            pop a
0636   07E2 C0 00 00      cmp b, 0
0637   07E5 C6 06 08      je _if14_exit
0638   07E8             _if14_true:
0639   07E8 29 F8 21      mov b, [next_state]
0640   07EB 74            mov d, b
0641   07EC 2C FF FF      mov b, [bp + -1] ; i
0642   07EF 10 50 00      mov a, 80
0643   07F2 AC            mul a, b
0644   07F3 5A            add d, b
0645   07F4 2C FD FF      mov b, [bp + -3] ; j
0646   07F7 10 02 00      mov a, 2
0647   07FA AC            mul a, b
0648   07FB 5A            add d, b
0649   07FC DA            push d
0650   07FD 26 00 00      mov b, 0
0651   0800 E7            pop d
0652   0801 11            mov a, b
0653   0802 43            mov [d], a
0654   0803 0A 06 08      jmp _if14_exit
0655   0806             _if14_exit:
0656   0806 0A 43 08      jmp _if13_exit
0657   0809             _if13_else:
0658   0809             _if15_cond:
0659   0809 2C F7 FF      mov b, [bp + -9] ; count
0660   080C D7            push a
0661   080D 11            mov a, b
0662   080E 26 03 00      mov b, 3
0663   0811 B0            cmp a, b
0664   0812 0E            lodflgs
0665   0813 87 01         and al, %00000001 ; ==
0666   0815 B9 00         cmp al, 0
0667   0817 0E            lodflgs
0668   0818 96            not al
0669   0819 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0670   081B 22 00         mov ah, 0
0671   081D 27            mov b, a
0672   081E E4            pop a
0673   081F C0 00 00      cmp b, 0
0674   0822 C6 43 08      je _if15_exit
0675   0825             _if15_true:
0676   0825 29 F8 21      mov b, [next_state]
0677   0828 74            mov d, b
0678   0829 2C FF FF      mov b, [bp + -1] ; i
0679   082C 10 50 00      mov a, 80
0680   082F AC            mul a, b
0681   0830 5A            add d, b
0682   0831 2C FD FF      mov b, [bp + -3] ; j
0683   0834 10 02 00      mov a, 2
0684   0837 AC            mul a, b
0685   0838 5A            add d, b
0686   0839 DA            push d
0687   083A 26 01 00      mov b, 1
0688   083D E7            pop d
0689   083E 11            mov a, b
0690   083F 43            mov [d], a
0691   0840 0A 43 08      jmp _if15_exit
0692   0843             _if15_exit:
0693   0843             _if13_exit:
0694   0843             _for8_update:
0695   0843 2C FD FF      mov b, [bp + -3] ; j
0696   0846 FD 77         inc b
0697   0848 D7            push a
0698   0849 11            mov a, b
0699   084A 45 FD FF      mov [bp + -3], a ; j
0700   084D E4            pop a
0701   084E 0A 39 06      jmp _for8_cond
0702   0851             _for8_exit:
0703   0851             _for7_update:
0704   0851 2C FF FF      mov b, [bp + -1] ; i
0705   0854 FD 77         inc b
0706   0856 D7            push a
0707   0857 11            mov a, b
0708   0858 45 FF FF      mov [bp + -1], a ; i
0709   085B E4            pop a
0710   085C 0A 0C 06      jmp _for7_cond
0711   085F             _for7_exit:
0712   085F             _for16_init:
0713   085F 26 00 00      mov b, 0
0714   0862 D7            push a
0715   0863 11            mov a, b
0716   0864 45 FF FF      mov [bp + -1], a ; i
0717   0867 E4            pop a
0718   0868             _for16_cond:
0719   0868 2C FF FF      mov b, [bp + -1] ; i
0720   086B D7            push a
0721   086C 11            mov a, b
0722   086D 26 28 00      mov b, 40
0723   0870 B0            cmp a, b
0724   0871 0E            lodflgs
0725   0872 87 02         and al, %00000010 ; <
0726   0874 B9 00         cmp al, 0
0727   0876 0E            lodflgs
0728   0877 96            not al
0729   0878 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0730   087A 22 00         mov ah, 0
0731   087C 27            mov b, a
0732   087D E4            pop a
0733   087E C0 00 00      cmp b, 0
0734   0881 C6 F4 08      je _for16_exit
0735   0884             _for16_block:
0736   0884             _for17_init:
0737   0884 26 00 00      mov b, 0
0738   0887 D7            push a
0739   0888 11            mov a, b
0740   0889 45 FD FF      mov [bp + -3], a ; j
0741   088C E4            pop a
0742   088D             _for17_cond:
0743   088D 2C FD FF      mov b, [bp + -3] ; j
0744   0890 D7            push a
0745   0891 11            mov a, b
0746   0892 26 28 00      mov b, 40
0747   0895 B0            cmp a, b
0748   0896 0E            lodflgs
0749   0897 87 02         and al, %00000010 ; <
0750   0899 B9 00         cmp al, 0
0751   089B 0E            lodflgs
0752   089C 96            not al
0753   089D 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0754   089F 22 00         mov ah, 0
0755   08A1 27            mov b, a
0756   08A2 E4            pop a
0757   08A3 C0 00 00      cmp b, 0
0758   08A6 C6 E6 08      je _for17_exit
0759   08A9             _for17_block:
0760   08A9 29 76 15      mov b, [curr_state]
0761   08AC 74            mov d, b
0762   08AD 2C FF FF      mov b, [bp + -1] ; i
0763   08B0 10 50 00      mov a, 80
0764   08B3 AC            mul a, b
0765   08B4 5A            add d, b
0766   08B5 2C FD FF      mov b, [bp + -3] ; j
0767   08B8 10 02 00      mov a, 2
0768   08BB AC            mul a, b
0769   08BC 5A            add d, b
0770   08BD DA            push d
0771   08BE 29 F8 21      mov b, [next_state]
0772   08C1 D7            push a
0773   08C2 74            mov d, b
0774   08C3 2C FF FF      mov b, [bp + -1] ; i
0775   08C6 10 50 00      mov a, 80
0776   08C9 AC            mul a, b
0777   08CA 5A            add d, b
0778   08CB 2C FD FF      mov b, [bp + -3] ; j
0779   08CE 10 02 00      mov a, 2
0780   08D1 AC            mul a, b
0781   08D2 5A            add d, b
0782   08D3 2A            mov b, [d]
0783   08D4 E4            pop a
0784   08D5 E7            pop d
0785   08D6 11            mov a, b
0786   08D7 43            mov [d], a
0787   08D8             _for17_update:
0788   08D8 2C FD FF      mov b, [bp + -3] ; j
0789   08DB FD 77         inc b
0790   08DD D7            push a
0791   08DE 11            mov a, b
0792   08DF 45 FD FF      mov [bp + -3], a ; j
0793   08E2 E4            pop a
0794   08E3 0A 8D 08      jmp _for17_cond
0795   08E6             _for17_exit:
0796   08E6             _for16_update:
0797   08E6 2C FF FF      mov b, [bp + -1] ; i
0798   08E9 FD 77         inc b
0799   08EB D7            push a
0800   08EC 11            mov a, b
0801   08ED 45 FF FF      mov [bp + -1], a ; i
0802   08F0 E4            pop a
0803   08F1 0A 68 08      jmp _for16_cond
0804   08F4             _for16_exit:
0805   08F4 F9            leave
0806   08F5 09            ret
0807   08F6             ; --- END TEXT BLOCK
0808   08F6             
0809   08F6             ; --- BEGIN DATA BLOCK
0810   08F6             curr_state_data: 
0811   08F6 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0811   08FA 00 00 00 00 
0811   08FE 00 00 00 00 
0811   0902 00 00 00 00 
0811   0906 00 00 00 00 
0811   090A 00 00 00 00 
0811   090E 00 00 00 00 
0811   0912 00 00 00 00 
0811   0916 00 00 00 00 
0811   091A 00 00 00 00 
0811   091E 00 00 00 00 
0811   0922 00 00 00 00 
0811   0926 00 00 00 00 
0811   092A 00 00 00 00 
0811   092E 00 00 00 00 
0812   0932 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0812   0936 00 00 00 00 
0812   093A 00 00 00 00 
0812   093E 00 00 00 00 
0812   0942 00 00 00 00 
0812   0946 00 00 00 00 
0812   094A 00 00 00 00 
0812   094E 00 00 00 00 
0812   0952 00 00 00 00 
0812   0956 00 00 00 00 
0812   095A 00 00 00 00 
0812   095E 00 00 00 00 
0812   0962 00 00 00 00 
0812   0966 00 00 00 00 
0812   096A 00 00 00 00 
0813   096E 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0813   0972 00 00 00 00 
0813   0976 00 00 00 00 
0813   097A 00 00 00 00 
0813   097E 00 00 00 00 
0813   0982 00 00 00 00 
0813   0986 00 00 00 00 
0813   098A 00 00 00 00 
0813   098E 00 00 00 00 
0813   0992 00 00 00 00 
0813   0996 00 00 00 00 
0813   099A 00 00 00 00 
0813   099E 00 00 00 00 
0813   09A2 00 00 00 00 
0813   09A6 00 00 00 00 
0814   09AA 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0814   09AE 00 00 00 00 
0814   09B2 00 00 00 00 
0814   09B6 00 00 00 00 
0814   09BA 00 00 00 00 
0814   09BE 00 00 00 00 
0814   09C2 00 00 00 00 
0814   09C6 00 00 00 00 
0814   09CA 00 00 00 00 
0814   09CE 00 00 00 00 
0814   09D2 00 00 00 00 
0814   09D6 00 00 00 00 
0814   09DA 00 00 00 00 
0814   09DE 00 00 00 00 
0814   09E2 00 00 00 00 
0815   09E6 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
0815   09EA 00 00 00 00 
0815   09EE 00 00 00 00 
0815   09F2 00 00 00 00 
0815   09F6 00 00 00 00 
0815   09FA 00 00 00 00 
0815   09FE 00 00 00 00 
0815   0A02 00 00 00 00 
0815   0A06 00 00 00 00 
0815   0A0A 00 00 00 00 
0815   0A0E 00 00 00 00 
0815   0A12 00 00 00 00 
0815   0A16 00 00 00 00 
0815   0A1A 00 00 01 00 
0815   0A1E 00 00 00 00 
0816   0A22 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0816   0A26 00 00 00 00 
0816   0A2A 00 00 00 00 
0816   0A2E 00 00 00 00 
0816   0A32 00 00 00 00 
0816   0A36 00 00 00 00 
0816   0A3A 00 00 00 00 
0816   0A3E 00 00 00 00 
0816   0A42 00 00 00 00 
0816   0A46 00 00 00 00 
0816   0A4A 00 00 00 00 
0816   0A4E 00 00 00 00 
0816   0A52 00 00 00 00 
0816   0A56 00 00 00 00 
0816   0A5A 00 00 00 00 
0817   0A5E 00 00 00 00 .dw 0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0817   0A62 00 00 00 00 
0817   0A66 00 00 01 00 
0817   0A6A 00 00 01 00 
0817   0A6E 00 00 00 00 
0817   0A72 00 00 00 00 
0817   0A76 00 00 00 00 
0817   0A7A 00 00 00 00 
0817   0A7E 00 00 00 00 
0817   0A82 00 00 00 00 
0817   0A86 00 00 00 00 
0817   0A8A 00 00 00 00 
0817   0A8E 00 00 00 00 
0817   0A92 00 00 00 00 
0817   0A96 00 00 00 00 
0818   0A9A 00 00 00 00 .dw 0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
0818   0A9E 00 00 00 00 
0818   0AA2 00 00 01 00 
0818   0AA6 01 00 00 00 
0818   0AAA 00 00 00 00 
0818   0AAE 00 00 00 00 
0818   0AB2 00 00 01 00 
0818   0AB6 01 00 00 00 
0818   0ABA 00 00 00 00 
0818   0ABE 00 00 00 00 
0818   0AC2 00 00 00 00 
0818   0AC6 00 00 00 00 
0818   0ACA 00 00 00 00 
0818   0ACE 00 00 01 00 
0818   0AD2 01 00 00 00 
0819   0AD6 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,
0819   0ADA 00 00 00 00 
0819   0ADE 00 00 00 00 
0819   0AE2 00 00 00 00 
0819   0AE6 00 00 00 00 
0819   0AEA 00 00 00 00 
0819   0AEE 00 00 00 00 
0819   0AF2 01 00 00 00 
0819   0AF6 00 00 00 00 
0819   0AFA 01 00 00 00 
0819   0AFE 00 00 00 00 
0819   0B02 00 00 01 00 
0819   0B06 01 00 00 00 
0819   0B0A 00 00 00 00 
0819   0B0E 00 00 00 00 
0820   0B12 00 00 00 00 .dw 0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
0820   0B16 00 00 00 00 
0820   0B1A 00 00 00 00 
0820   0B1E 00 00 01 00 
0820   0B22 01 00 00 00 
0820   0B26 00 00 00 00 
0820   0B2A 00 00 01 00 
0820   0B2E 01 00 00 00 
0820   0B32 00 00 00 00 
0820   0B36 00 00 00 00 
0820   0B3A 00 00 00 00 
0820   0B3E 00 00 01 00 
0820   0B42 00 00 00 00 
0820   0B46 00 00 00 00 
0820   0B4A 00 00 01 00 
0821   0B4E 00 00 00 00 .dw 0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
0821   0B52 00 00 01 00 
0821   0B56 01 00 00 00 
0821   0B5A 00 00 00 00 
0821   0B5E 00 00 00 00 
0821   0B62 00 00 00 00 
0821   0B66 00 00 00 00 
0821   0B6A 00 00 00 00 
0821   0B6E 00 00 00 00 
0821   0B72 00 00 00 00 
0821   0B76 00 00 00 00 
0821   0B7A 00 00 01 00 
0821   0B7E 01 00 00 00 
0821   0B82 00 00 00 00 
0821   0B86 00 00 00 00 
0822   0B8A 00 00 00 00 .dw 0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0822   0B8E 00 00 01 00 
0822   0B92 00 00 00 00 
0822   0B96 00 00 01 00 
0822   0B9A 00 00 01 00 
0822   0B9E 01 00 00 00 
0822   0BA2 00 00 00 00 
0822   0BA6 00 00 01 00 
0822   0BAA 00 00 01 00 
0822   0BAE 00 00 00 00 
0822   0BB2 00 00 00 00 
0822   0BB6 00 00 00 00 
0822   0BBA 00 00 00 00 
0822   0BBE 00 00 00 00 
0822   0BC2 00 00 00 00 
0823   0BC6 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,
0823   0BCA 00 00 00 00 
0823   0BCE 00 00 00 00 
0823   0BD2 00 00 00 00 
0823   0BD6 00 00 00 00 
0823   0BDA 00 00 00 00 
0823   0BDE 00 00 01 00 
0823   0BE2 00 00 00 00 
0823   0BE6 00 00 00 00 
0823   0BEA 00 00 01 00 
0823   0BEE 00 00 00 00 
0823   0BF2 00 00 00 00 
0823   0BF6 00 00 00 00 
0823   0BFA 00 00 01 00 
0823   0BFE 00 00 00 00 
0824   0C02 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,
0824   0C06 00 00 00 00 
0824   0C0A 00 00 00 00 
0824   0C0E 00 00 00 00 
0824   0C12 00 00 00 00 
0824   0C16 00 00 00 00 
0824   0C1A 00 00 00 00 
0824   0C1E 00 00 00 00 
0824   0C22 00 00 00 00 
0824   0C26 00 00 00 00 
0824   0C2A 00 00 00 00 
0824   0C2E 00 00 00 00 
0824   0C32 01 00 00 00 
0824   0C36 00 00 00 00 
0824   0C3A 01 00 00 00 
0825   0C3E 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0825   0C42 00 00 00 00 
0825   0C46 00 00 00 00 
0825   0C4A 00 00 00 00 
0825   0C4E 00 00 00 00 
0825   0C52 00 00 00 00 
0825   0C56 00 00 00 00 
0825   0C5A 00 00 00 00 
0825   0C5E 00 00 00 00 
0825   0C62 00 00 00 00 
0825   0C66 00 00 00 00 
0825   0C6A 00 00 00 00 
0825   0C6E 00 00 00 00 
0825   0C72 00 00 00 00 
0825   0C76 00 00 00 00 
0826   0C7A 00 00 00 00 .dw 0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0826   0C7E 00 00 00 00 
0826   0C82 00 00 01 00 
0826   0C86 01 00 00 00 
0826   0C8A 00 00 00 00 
0826   0C8E 00 00 00 00 
0826   0C92 00 00 00 00 
0826   0C96 00 00 00 00 
0826   0C9A 00 00 00 00 
0826   0C9E 00 00 00 00 
0826   0CA2 00 00 00 00 
0826   0CA6 00 00 00 00 
0826   0CAA 00 00 00 00 
0826   0CAE 00 00 00 00 
0826   0CB2 00 00 00 00 
0827   0CB6 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0827   0CBA 00 00 00 00 
0827   0CBE 00 00 00 00 
0827   0CC2 00 00 00 00 
0827   0CC6 00 00 00 00 
0827   0CCA 00 00 00 00 
0827   0CCE 00 00 00 00 
0827   0CD2 00 00 00 00 
0827   0CD6 00 00 00 00 
0827   0CDA 00 00 00 00 
0827   0CDE 00 00 00 00 
0827   0CE2 00 00 00 00 
0827   0CE6 00 00 00 00 
0827   0CEA 00 00 00 00 
0827   0CEE 00 00 00 00 
0828   0CF2 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0828   0CF6 00 00 00 00 
0828   0CFA 00 00 00 00 
0828   0CFE 00 00 00 00 
0828   0D02 00 00 00 00 
0828   0D06 00 00 00 00 
0828   0D0A 00 00 00 00 
0828   0D0E 00 00 00 00 
0828   0D12 00 00 00 00 
0828   0D16 00 00 00 00 
0828   0D1A 00 00 00 00 
0828   0D1E 00 00 00 00 
0828   0D22 00 00 00 00 
0828   0D26 00 00 00 00 
0828   0D2A 00 00 00 00 
0829   0D2E 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0829   0D32 00 00 00 00 
0829   0D36 00 00 00 00 
0829   0D3A 00 00 00 00 
0829   0D3E 00 00 00 00 
0829   0D42 00 00 00 00 
0829   0D46 00 00 00 00 
0829   0D4A 00 00 00 00 
0829   0D4E 00 00 00 00 
0829   0D52 00 00 00 00 
0829   0D56 00 00 00 00 
0829   0D5A 00 00 00 00 
0829   0D5E 00 00 00 00 
0829   0D62 00 00 00 00 
0829   0D66 00 00 00 00 
0830   0D6A 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0830   0D6E 00 00 00 00 
0830   0D72 00 00 00 00 
0830   0D76 00 00 00 00 
0830   0D7A 00 00 00 00 
0830   0D7E 00 00 00 00 
0830   0D82 00 00 00 00 
0830   0D86 00 00 00 00 
0830   0D8A 00 00 00 00 
0830   0D8E 00 00 00 00 
0830   0D92 00 00 00 00 
0830   0D96 00 00 00 00 
0830   0D9A 00 00 00 00 
0830   0D9E 00 00 00 00 
0830   0DA2 00 00 00 00 
0831   0DA6 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0831   0DAA 00 00 00 00 
0831   0DAE 00 00 00 00 
0831   0DB2 00 00 00 00 
0831   0DB6 00 00 00 00 
0831   0DBA 00 00 00 00 
0831   0DBE 00 00 00 00 
0831   0DC2 00 00 00 00 
0831   0DC6 00 00 00 00 
0831   0DCA 00 00 00 00 
0831   0DCE 00 00 00 00 
0831   0DD2 00 00 00 00 
0831   0DD6 00 00 00 00 
0831   0DDA 00 00 00 00 
0831   0DDE 00 00 00 00 
0832   0DE2 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0832   0DE6 00 00 00 00 
0832   0DEA 00 00 00 00 
0832   0DEE 00 00 00 00 
0832   0DF2 00 00 00 00 
0832   0DF6 00 00 00 00 
0832   0DFA 00 00 00 00 
0832   0DFE 00 00 00 00 
0832   0E02 00 00 00 00 
0832   0E06 00 00 00 00 
0832   0E0A 00 00 00 00 
0832   0E0E 00 00 00 00 
0832   0E12 00 00 00 00 
0832   0E16 00 00 00 00 
0832   0E1A 00 00 00 00 
0833   0E1E 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0833   0E22 00 00 00 00 
0833   0E26 00 00 00 00 
0833   0E2A 00 00 00 00 
0833   0E2E 00 00 00 00 
0833   0E32 00 00 00 00 
0833   0E36 00 00 00 00 
0833   0E3A 00 00 00 00 
0833   0E3E 00 00 00 00 
0833   0E42 00 00 00 00 
0833   0E46 00 00 00 00 
0833   0E4A 00 00 00 00 
0833   0E4E 00 00 00 00 
0833   0E52 00 00 00 00 
0833   0E56 00 00 00 00 
0834   0E5A 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0834   0E5E 00 00 00 00 
0834   0E62 00 00 00 00 
0834   0E66 00 00 00 00 
0834   0E6A 00 00 00 00 
0834   0E6E 00 00 00 00 
0834   0E72 00 00 00 00 
0834   0E76 00 00 00 00 
0834   0E7A 00 00 00 00 
0834   0E7E 00 00 00 00 
0834   0E82 00 00 00 00 
0834   0E86 00 00 00 00 
0834   0E8A 00 00 00 00 
0834   0E8E 00 00 00 00 
0834   0E92 00 00 00 00 
0835   0E96 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0835   0E9A 00 00 00 00 
0835   0E9E 00 00 00 00 
0835   0EA2 00 00 00 00 
0835   0EA6 00 00 00 00 
0835   0EAA 00 00 00 00 
0835   0EAE 00 00 00 00 
0835   0EB2 00 00 00 00 
0835   0EB6 00 00 00 00 
0835   0EBA 00 00 00 00 
0835   0EBE 00 00 00 00 
0835   0EC2 00 00 00 00 
0835   0EC6 00 00 00 00 
0835   0ECA 00 00 00 00 
0835   0ECE 00 00 00 00 
0836   0ED2 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0836   0ED6 00 00 00 00 
0836   0EDA 00 00 00 00 
0836   0EDE 00 00 00 00 
0836   0EE2 00 00 00 00 
0836   0EE6 00 00 00 00 
0836   0EEA 00 00 00 00 
0836   0EEE 00 00 00 00 
0836   0EF2 00 00 00 00 
0836   0EF6 00 00 00 00 
0836   0EFA 00 00 00 00 
0836   0EFE 00 00 00 00 
0836   0F02 00 00 00 00 
0836   0F06 00 00 00 00 
0836   0F0A 00 00 00 00 
0837   0F0E 00 00 00 00 .dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0837   0F12 00 00 00 00 
0837   0F16 00 00 00 00 
0837   0F1A 00 00 00 00 
0837   0F1E 00 00 00 00 
0837   0F22 00 00 00 00 
0837   0F26 00 00 00 00 
0837   0F2A 00 00 00 00 
0837   0F2E 00 00 00 00 
0837   0F32 00 00 00 00 
0838   0F36 00 00 00 00 .fill 1600, 0
0838   0F3A 00 00 00 00 
0838   0F3E 00 00 00 00 
0838   0F42 00 00 00 00 
0838   0F46 00 00 00 00 
0838   0F4A 00 00 00 00 
0838   0F4E 00 00 00 00 
0838   0F52 00 00 00 00 
0838   0F56 00 00 00 00 
0838   0F5A 00 00 00 00 
0838   0F5E 00 00 00 00 
0838   0F62 00 00 00 00 
0838   0F66 00 00 00 00 
0838   0F6A 00 00 00 00 
0838   0F6E 00 00 00 00 
0838   0F72 00 00 00 00 
0838   0F76 00 00 00 00 
0838   0F7A 00 00 00 00 
0838   0F7E 00 00 00 00 
0838   0F82 00 00 00 00 
0838   0F86 00 00 00 00 
0838   0F8A 00 00 00 00 
0838   0F8E 00 00 00 00 
0838   0F92 00 00 00 00 
0838   0F96 00 00 00 00 
0838   0F9A 00 00 00 00 
0838   0F9E 00 00 00 00 
0838   0FA2 00 00 00 00 
0838   0FA6 00 00 00 00 
0838   0FAA 00 00 00 00 
0838   0FAE 00 00 00 00 
0838   0FB2 00 00 00 00 
0838   0FB6 00 00 00 00 
0838   0FBA 00 00 00 00 
0838   0FBE 00 00 00 00 
0838   0FC2 00 00 00 00 
0838   0FC6 00 00 00 00 
0838   0FCA 00 00 00 00 
0838   0FCE 00 00 00 00 
0838   0FD2 00 00 00 00 
0838   0FD6 00 00 00 00 
0838   0FDA 00 00 00 00 
0838   0FDE 00 00 00 00 
0838   0FE2 00 00 00 00 
0838   0FE6 00 00 00 00 
0838   0FEA 00 00 00 00 
0838   0FEE 00 00 00 00 
0838   0FF2 00 00 00 00 
0838   0FF6 00 00 00 00 
0838   0FFA 00 00 00 00 
0838   0FFE 00 00 00 00 
0838   1002 00 00 00 00 
0838   1006 00 00 00 00 
0838   100A 00 00 00 00 
0838   100E 00 00 00 00 
0838   1012 00 00 00 00 
0838   1016 00 00 00 00 
0838   101A 00 00 00 00 
0838   101E 00 00 00 00 
0838   1022 00 00 00 00 
0838   1026 00 00 00 00 
0838   102A 00 00 00 00 
0838   102E 00 00 00 00 
0838   1032 00 00 00 00 
0838   1036 00 00 00 00 
0838   103A 00 00 00 00 
0838   103E 00 00 00 00 
0838   1042 00 00 00 00 
0838   1046 00 00 00 00 
0838   104A 00 00 00 00 
0838   104E 00 00 00 00 
0838   1052 00 00 00 00 
0838   1056 00 00 00 00 
0838   105A 00 00 00 00 
0838   105E 00 00 00 00 
0838   1062 00 00 00 00 
0838   1066 00 00 00 00 
0838   106A 00 00 00 00 
0838   106E 00 00 00 00 
0838   1072 00 00 00 00 
0838   1076 00 00 00 00 
0838   107A 00 00 00 00 
0838   107E 00 00 00 00 
0838   1082 00 00 00 00 
0838   1086 00 00 00 00 
0838   108A 00 00 00 00 
0838   108E 00 00 00 00 
0838   1092 00 00 00 00 
0838   1096 00 00 00 00 
0838   109A 00 00 00 00 
0838   109E 00 00 00 00 
0838   10A2 00 00 00 00 
0838   10A6 00 00 00 00 
0838   10AA 00 00 00 00 
0838   10AE 00 00 00 00 
0838   10B2 00 00 00 00 
0838   10B6 00 00 00 00 
0838   10BA 00 00 00 00 
0838   10BE 00 00 00 00 
0838   10C2 00 00 00 00 
0838   10C6 00 00 00 00 
0838   10CA 00 00 00 00 
0838   10CE 00 00 00 00 
0838   10D2 00 00 00 00 
0838   10D6 00 00 00 00 
0838   10DA 00 00 00 00 
0838   10DE 00 00 00 00 
0838   10E2 00 00 00 00 
0838   10E6 00 00 00 00 
0838   10EA 00 00 00 00 
0838   10EE 00 00 00 00 
0838   10F2 00 00 00 00 
0838   10F6 00 00 00 00 
0838   10FA 00 00 00 00 
0838   10FE 00 00 00 00 
0838   1102 00 00 00 00 
0838   1106 00 00 00 00 
0838   110A 00 00 00 00 
0838   110E 00 00 00 00 
0838   1112 00 00 00 00 
0838   1116 00 00 00 00 
0838   111A 00 00 00 00 
0838   111E 00 00 00 00 
0838   1122 00 00 00 00 
0838   1126 00 00 00 00 
0838   112A 00 00 00 00 
0838   112E 00 00 00 00 
0838   1132 00 00 00 00 
0838   1136 00 00 00 00 
0838   113A 00 00 00 00 
0838   113E 00 00 00 00 
0838   1142 00 00 00 00 
0838   1146 00 00 00 00 
0838   114A 00 00 00 00 
0838   114E 00 00 00 00 
0838   1152 00 00 00 00 
0838   1156 00 00 00 00 
0838   115A 00 00 00 00 
0838   115E 00 00 00 00 
0838   1162 00 00 00 00 
0838   1166 00 00 00 00 
0838   116A 00 00 00 00 
0838   116E 00 00 00 00 
0838   1172 00 00 00 00 
0838   1176 00 00 00 00 
0838   117A 00 00 00 00 
0838   117E 00 00 00 00 
0838   1182 00 00 00 00 
0838   1186 00 00 00 00 
0838   118A 00 00 00 00 
0838   118E 00 00 00 00 
0838   1192 00 00 00 00 
0838   1196 00 00 00 00 
0838   119A 00 00 00 00 
0838   119E 00 00 00 00 
0838   11A2 00 00 00 00 
0838   11A6 00 00 00 00 
0838   11AA 00 00 00 00 
0838   11AE 00 00 00 00 
0838   11B2 00 00 00 00 
0838   11B6 00 00 00 00 
0838   11BA 00 00 00 00 
0838   11BE 00 00 00 00 
0838   11C2 00 00 00 00 
0838   11C6 00 00 00 00 
0838   11CA 00 00 00 00 
0838   11CE 00 00 00 00 
0838   11D2 00 00 00 00 
0838   11D6 00 00 00 00 
0838   11DA 00 00 00 00 
0838   11DE 00 00 00 00 
0838   11E2 00 00 00 00 
0838   11E6 00 00 00 00 
0838   11EA 00 00 00 00 
0838   11EE 00 00 00 00 
0838   11F2 00 00 00 00 
0838   11F6 00 00 00 00 
0838   11FA 00 00 00 00 
0838   11FE 00 00 00 00 
0838   1202 00 00 00 00 
0838   1206 00 00 00 00 
0838   120A 00 00 00 00 
0838   120E 00 00 00 00 
0838   1212 00 00 00 00 
0838   1216 00 00 00 00 
0838   121A 00 00 00 00 
0838   121E 00 00 00 00 
0838   1222 00 00 00 00 
0838   1226 00 00 00 00 
0838   122A 00 00 00 00 
0838   122E 00 00 00 00 
0838   1232 00 00 00 00 
0838   1236 00 00 00 00 
0838   123A 00 00 00 00 
0838   123E 00 00 00 00 
0838   1242 00 00 00 00 
0838   1246 00 00 00 00 
0838   124A 00 00 00 00 
0838   124E 00 00 00 00 
0838   1252 00 00 00 00 
0838   1256 00 00 00 00 
0838   125A 00 00 00 00 
0838   125E 00 00 00 00 
0838   1262 00 00 00 00 
0838   1266 00 00 00 00 
0838   126A 00 00 00 00 
0838   126E 00 00 00 00 
0838   1272 00 00 00 00 
0838   1276 00 00 00 00 
0838   127A 00 00 00 00 
0838   127E 00 00 00 00 
0838   1282 00 00 00 00 
0838   1286 00 00 00 00 
0838   128A 00 00 00 00 
0838   128E 00 00 00 00 
0838   1292 00 00 00 00 
0838   1296 00 00 00 00 
0838   129A 00 00 00 00 
0838   129E 00 00 00 00 
0838   12A2 00 00 00 00 
0838   12A6 00 00 00 00 
0838   12AA 00 00 00 00 
0838   12AE 00 00 00 00 
0838   12B2 00 00 00 00 
0838   12B6 00 00 00 00 
0838   12BA 00 00 00 00 
0838   12BE 00 00 00 00 
0838   12C2 00 00 00 00 
0838   12C6 00 00 00 00 
0838   12CA 00 00 00 00 
0838   12CE 00 00 00 00 
0838   12D2 00 00 00 00 
0838   12D6 00 00 00 00 
0838   12DA 00 00 00 00 
0838   12DE 00 00 00 00 
0838   12E2 00 00 00 00 
0838   12E6 00 00 00 00 
0838   12EA 00 00 00 00 
0838   12EE 00 00 00 00 
0838   12F2 00 00 00 00 
0838   12F6 00 00 00 00 
0838   12FA 00 00 00 00 
0838   12FE 00 00 00 00 
0838   1302 00 00 00 00 
0838   1306 00 00 00 00 
0838   130A 00 00 00 00 
0838   130E 00 00 00 00 
0838   1312 00 00 00 00 
0838   1316 00 00 00 00 
0838   131A 00 00 00 00 
0838   131E 00 00 00 00 
0838   1322 00 00 00 00 
0838   1326 00 00 00 00 
0838   132A 00 00 00 00 
0838   132E 00 00 00 00 
0838   1332 00 00 00 00 
0838   1336 00 00 00 00 
0838   133A 00 00 00 00 
0838   133E 00 00 00 00 
0838   1342 00 00 00 00 
0838   1346 00 00 00 00 
0838   134A 00 00 00 00 
0838   134E 00 00 00 00 
0838   1352 00 00 00 00 
0838   1356 00 00 00 00 
0838   135A 00 00 00 00 
0838   135E 00 00 00 00 
0838   1362 00 00 00 00 
0838   1366 00 00 00 00 
0838   136A 00 00 00 00 
0838   136E 00 00 00 00 
0838   1372 00 00 00 00 
0838   1376 00 00 00 00 
0838   137A 00 00 00 00 
0838   137E 00 00 00 00 
0838   1382 00 00 00 00 
0838   1386 00 00 00 00 
0838   138A 00 00 00 00 
0838   138E 00 00 00 00 
0838   1392 00 00 00 00 
0838   1396 00 00 00 00 
0838   139A 00 00 00 00 
0838   139E 00 00 00 00 
0838   13A2 00 00 00 00 
0838   13A6 00 00 00 00 
0838   13AA 00 00 00 00 
0838   13AE 00 00 00 00 
0838   13B2 00 00 00 00 
0838   13B6 00 00 00 00 
0838   13BA 00 00 00 00 
0838   13BE 00 00 00 00 
0838   13C2 00 00 00 00 
0838   13C6 00 00 00 00 
0838   13CA 00 00 00 00 
0838   13CE 00 00 00 00 
0838   13D2 00 00 00 00 
0838   13D6 00 00 00 00 
0838   13DA 00 00 00 00 
0838   13DE 00 00 00 00 
0838   13E2 00 00 00 00 
0838   13E6 00 00 00 00 
0838   13EA 00 00 00 00 
0838   13EE 00 00 00 00 
0838   13F2 00 00 00 00 
0838   13F6 00 00 00 00 
0838   13FA 00 00 00 00 
0838   13FE 00 00 00 00 
0838   1402 00 00 00 00 
0838   1406 00 00 00 00 
0838   140A 00 00 00 00 
0838   140E 00 00 00 00 
0838   1412 00 00 00 00 
0838   1416 00 00 00 00 
0838   141A 00 00 00 00 
0838   141E 00 00 00 00 
0838   1422 00 00 00 00 
0838   1426 00 00 00 00 
0838   142A 00 00 00 00 
0838   142E 00 00 00 00 
0838   1432 00 00 00 00 
0838   1436 00 00 00 00 
0838   143A 00 00 00 00 
0838   143E 00 00 00 00 
0838   1442 00 00 00 00 
0838   1446 00 00 00 00 
0838   144A 00 00 00 00 
0838   144E 00 00 00 00 
0838   1452 00 00 00 00 
0838   1456 00 00 00 00 
0838   145A 00 00 00 00 
0838   145E 00 00 00 00 
0838   1462 00 00 00 00 
0838   1466 00 00 00 00 
0838   146A 00 00 00 00 
0838   146E 00 00 00 00 
0838   1472 00 00 00 00 
0838   1476 00 00 00 00 
0838   147A 00 00 00 00 
0838   147E 00 00 00 00 
0838   1482 00 00 00 00 
0838   1486 00 00 00 00 
0838   148A 00 00 00 00 
0838   148E 00 00 00 00 
0838   1492 00 00 00 00 
0838   1496 00 00 00 00 
0838   149A 00 00 00 00 
0838   149E 00 00 00 00 
0838   14A2 00 00 00 00 
0838   14A6 00 00 00 00 
0838   14AA 00 00 00 00 
0838   14AE 00 00 00 00 
0838   14B2 00 00 00 00 
0838   14B6 00 00 00 00 
0838   14BA 00 00 00 00 
0838   14BE 00 00 00 00 
0838   14C2 00 00 00 00 
0838   14C6 00 00 00 00 
0838   14CA 00 00 00 00 
0838   14CE 00 00 00 00 
0838   14D2 00 00 00 00 
0838   14D6 00 00 00 00 
0838   14DA 00 00 00 00 
0838   14DE 00 00 00 00 
0838   14E2 00 00 00 00 
0838   14E6 00 00 00 00 
0838   14EA 00 00 00 00 
0838   14EE 00 00 00 00 
0838   14F2 00 00 00 00 
0838   14F6 00 00 00 00 
0838   14FA 00 00 00 00 
0838   14FE 00 00 00 00 
0838   1502 00 00 00 00 
0838   1506 00 00 00 00 
0838   150A 00 00 00 00 
0838   150E 00 00 00 00 
0838   1512 00 00 00 00 
0838   1516 00 00 00 00 
0838   151A 00 00 00 00 
0838   151E 00 00 00 00 
0838   1522 00 00 00 00 
0838   1526 00 00 00 00 
0838   152A 00 00 00 00 
0838   152E 00 00 00 00 
0838   1532 00 00 00 00 
0838   1536 00 00 00 00 
0838   153A 00 00 00 00 
0838   153E 00 00 00 00 
0838   1542 00 00 00 00 
0838   1546 00 00 00 00 
0838   154A 00 00 00 00 
0838   154E 00 00 00 00 
0838   1552 00 00 00 00 
0838   1556 00 00 00 00 
0838   155A 00 00 00 00 
0838   155E 00 00 00 00 
0838   1562 00 00 00 00 
0838   1566 00 00 00 00 
0838   156A 00 00 00 00 
0838   156E 00 00 00 00 
0838   1572 00 00 00 00 
0839   1576 F6 08       curr_state: .dw curr_state_data
0840   1578 00 00 00 00 next_state_data: .fill 3200, 0
0840   157C 00 00 00 00 
0840   1580 00 00 00 00 
0840   1584 00 00 00 00 
0840   1588 00 00 00 00 
0840   158C 00 00 00 00 
0840   1590 00 00 00 00 
0840   1594 00 00 00 00 
0840   1598 00 00 00 00 
0840   159C 00 00 00 00 
0840   15A0 00 00 00 00 
0840   15A4 00 00 00 00 
0840   15A8 00 00 00 00 
0840   15AC 00 00 00 00 
0840   15B0 00 00 00 00 
0840   15B4 00 00 00 00 
0840   15B8 00 00 00 00 
0840   15BC 00 00 00 00 
0840   15C0 00 00 00 00 
0840   15C4 00 00 00 00 
0840   15C8 00 00 00 00 
0840   15CC 00 00 00 00 
0840   15D0 00 00 00 00 
0840   15D4 00 00 00 00 
0840   15D8 00 00 00 00 
0840   15DC 00 00 00 00 
0840   15E0 00 00 00 00 
0840   15E4 00 00 00 00 
0840   15E8 00 00 00 00 
0840   15EC 00 00 00 00 
0840   15F0 00 00 00 00 
0840   15F4 00 00 00 00 
0840   15F8 00 00 00 00 
0840   15FC 00 00 00 00 
0840   1600 00 00 00 00 
0840   1604 00 00 00 00 
0840   1608 00 00 00 00 
0840   160C 00 00 00 00 
0840   1610 00 00 00 00 
0840   1614 00 00 00 00 
0840   1618 00 00 00 00 
0840   161C 00 00 00 00 
0840   1620 00 00 00 00 
0840   1624 00 00 00 00 
0840   1628 00 00 00 00 
0840   162C 00 00 00 00 
0840   1630 00 00 00 00 
0840   1634 00 00 00 00 
0840   1638 00 00 00 00 
0840   163C 00 00 00 00 
0840   1640 00 00 00 00 
0840   1644 00 00 00 00 
0840   1648 00 00 00 00 
0840   164C 00 00 00 00 
0840   1650 00 00 00 00 
0840   1654 00 00 00 00 
0840   1658 00 00 00 00 
0840   165C 00 00 00 00 
0840   1660 00 00 00 00 
0840   1664 00 00 00 00 
0840   1668 00 00 00 00 
0840   166C 00 00 00 00 
0840   1670 00 00 00 00 
0840   1674 00 00 00 00 
0840   1678 00 00 00 00 
0840   167C 00 00 00 00 
0840   1680 00 00 00 00 
0840   1684 00 00 00 00 
0840   1688 00 00 00 00 
0840   168C 00 00 00 00 
0840   1690 00 00 00 00 
0840   1694 00 00 00 00 
0840   1698 00 00 00 00 
0840   169C 00 00 00 00 
0840   16A0 00 00 00 00 
0840   16A4 00 00 00 00 
0840   16A8 00 00 00 00 
0840   16AC 00 00 00 00 
0840   16B0 00 00 00 00 
0840   16B4 00 00 00 00 
0840   16B8 00 00 00 00 
0840   16BC 00 00 00 00 
0840   16C0 00 00 00 00 
0840   16C4 00 00 00 00 
0840   16C8 00 00 00 00 
0840   16CC 00 00 00 00 
0840   16D0 00 00 00 00 
0840   16D4 00 00 00 00 
0840   16D8 00 00 00 00 
0840   16DC 00 00 00 00 
0840   16E0 00 00 00 00 
0840   16E4 00 00 00 00 
0840   16E8 00 00 00 00 
0840   16EC 00 00 00 00 
0840   16F0 00 00 00 00 
0840   16F4 00 00 00 00 
0840   16F8 00 00 00 00 
0840   16FC 00 00 00 00 
0840   1700 00 00 00 00 
0840   1704 00 00 00 00 
0840   1708 00 00 00 00 
0840   170C 00 00 00 00 
0840   1710 00 00 00 00 
0840   1714 00 00 00 00 
0840   1718 00 00 00 00 
0840   171C 00 00 00 00 
0840   1720 00 00 00 00 
0840   1724 00 00 00 00 
0840   1728 00 00 00 00 
0840   172C 00 00 00 00 
0840   1730 00 00 00 00 
0840   1734 00 00 00 00 
0840   1738 00 00 00 00 
0840   173C 00 00 00 00 
0840   1740 00 00 00 00 
0840   1744 00 00 00 00 
0840   1748 00 00 00 00 
0840   174C 00 00 00 00 
0840   1750 00 00 00 00 
0840   1754 00 00 00 00 
0840   1758 00 00 00 00 
0840   175C 00 00 00 00 
0840   1760 00 00 00 00 
0840   1764 00 00 00 00 
0840   1768 00 00 00 00 
0840   176C 00 00 00 00 
0840   1770 00 00 00 00 
0840   1774 00 00 00 00 
0840   1778 00 00 00 00 
0840   177C 00 00 00 00 
0840   1780 00 00 00 00 
0840   1784 00 00 00 00 
0840   1788 00 00 00 00 
0840   178C 00 00 00 00 
0840   1790 00 00 00 00 
0840   1794 00 00 00 00 
0840   1798 00 00 00 00 
0840   179C 00 00 00 00 
0840   17A0 00 00 00 00 
0840   17A4 00 00 00 00 
0840   17A8 00 00 00 00 
0840   17AC 00 00 00 00 
0840   17B0 00 00 00 00 
0840   17B4 00 00 00 00 
0840   17B8 00 00 00 00 
0840   17BC 00 00 00 00 
0840   17C0 00 00 00 00 
0840   17C4 00 00 00 00 
0840   17C8 00 00 00 00 
0840   17CC 00 00 00 00 
0840   17D0 00 00 00 00 
0840   17D4 00 00 00 00 
0840   17D8 00 00 00 00 
0840   17DC 00 00 00 00 
0840   17E0 00 00 00 00 
0840   17E4 00 00 00 00 
0840   17E8 00 00 00 00 
0840   17EC 00 00 00 00 
0840   17F0 00 00 00 00 
0840   17F4 00 00 00 00 
0840   17F8 00 00 00 00 
0840   17FC 00 00 00 00 
0840   1800 00 00 00 00 
0840   1804 00 00 00 00 
0840   1808 00 00 00 00 
0840   180C 00 00 00 00 
0840   1810 00 00 00 00 
0840   1814 00 00 00 00 
0840   1818 00 00 00 00 
0840   181C 00 00 00 00 
0840   1820 00 00 00 00 
0840   1824 00 00 00 00 
0840   1828 00 00 00 00 
0840   182C 00 00 00 00 
0840   1830 00 00 00 00 
0840   1834 00 00 00 00 
0840   1838 00 00 00 00 
0840   183C 00 00 00 00 
0840   1840 00 00 00 00 
0840   1844 00 00 00 00 
0840   1848 00 00 00 00 
0840   184C 00 00 00 00 
0840   1850 00 00 00 00 
0840   1854 00 00 00 00 
0840   1858 00 00 00 00 
0840   185C 00 00 00 00 
0840   1860 00 00 00 00 
0840   1864 00 00 00 00 
0840   1868 00 00 00 00 
0840   186C 00 00 00 00 
0840   1870 00 00 00 00 
0840   1874 00 00 00 00 
0840   1878 00 00 00 00 
0840   187C 00 00 00 00 
0840   1880 00 00 00 00 
0840   1884 00 00 00 00 
0840   1888 00 00 00 00 
0840   188C 00 00 00 00 
0840   1890 00 00 00 00 
0840   1894 00 00 00 00 
0840   1898 00 00 00 00 
0840   189C 00 00 00 00 
0840   18A0 00 00 00 00 
0840   18A4 00 00 00 00 
0840   18A8 00 00 00 00 
0840   18AC 00 00 00 00 
0840   18B0 00 00 00 00 
0840   18B4 00 00 00 00 
0840   18B8 00 00 00 00 
0840   18BC 00 00 00 00 
0840   18C0 00 00 00 00 
0840   18C4 00 00 00 00 
0840   18C8 00 00 00 00 
0840   18CC 00 00 00 00 
0840   18D0 00 00 00 00 
0840   18D4 00 00 00 00 
0840   18D8 00 00 00 00 
0840   18DC 00 00 00 00 
0840   18E0 00 00 00 00 
0840   18E4 00 00 00 00 
0840   18E8 00 00 00 00 
0840   18EC 00 00 00 00 
0840   18F0 00 00 00 00 
0840   18F4 00 00 00 00 
0840   18F8 00 00 00 00 
0840   18FC 00 00 00 00 
0840   1900 00 00 00 00 
0840   1904 00 00 00 00 
0840   1908 00 00 00 00 
0840   190C 00 00 00 00 
0840   1910 00 00 00 00 
0840   1914 00 00 00 00 
0840   1918 00 00 00 00 
0840   191C 00 00 00 00 
0840   1920 00 00 00 00 
0840   1924 00 00 00 00 
0840   1928 00 00 00 00 
0840   192C 00 00 00 00 
0840   1930 00 00 00 00 
0840   1934 00 00 00 00 
0840   1938 00 00 00 00 
0840   193C 00 00 00 00 
0840   1940 00 00 00 00 
0840   1944 00 00 00 00 
0840   1948 00 00 00 00 
0840   194C 00 00 00 00 
0840   1950 00 00 00 00 
0840   1954 00 00 00 00 
0840   1958 00 00 00 00 
0840   195C 00 00 00 00 
0840   1960 00 00 00 00 
0840   1964 00 00 00 00 
0840   1968 00 00 00 00 
0840   196C 00 00 00 00 
0840   1970 00 00 00 00 
0840   1974 00 00 00 00 
0840   1978 00 00 00 00 
0840   197C 00 00 00 00 
0840   1980 00 00 00 00 
0840   1984 00 00 00 00 
0840   1988 00 00 00 00 
0840   198C 00 00 00 00 
0840   1990 00 00 00 00 
0840   1994 00 00 00 00 
0840   1998 00 00 00 00 
0840   199C 00 00 00 00 
0840   19A0 00 00 00 00 
0840   19A4 00 00 00 00 
0840   19A8 00 00 00 00 
0840   19AC 00 00 00 00 
0840   19B0 00 00 00 00 
0840   19B4 00 00 00 00 
0840   19B8 00 00 00 00 
0840   19BC 00 00 00 00 
0840   19C0 00 00 00 00 
0840   19C4 00 00 00 00 
0840   19C8 00 00 00 00 
0840   19CC 00 00 00 00 
0840   19D0 00 00 00 00 
0840   19D4 00 00 00 00 
0840   19D8 00 00 00 00 
0840   19DC 00 00 00 00 
0840   19E0 00 00 00 00 
0840   19E4 00 00 00 00 
0840   19E8 00 00 00 00 
0840   19EC 00 00 00 00 
0840   19F0 00 00 00 00 
0840   19F4 00 00 00 00 
0840   19F8 00 00 00 00 
0840   19FC 00 00 00 00 
0840   1A00 00 00 00 00 
0840   1A04 00 00 00 00 
0840   1A08 00 00 00 00 
0840   1A0C 00 00 00 00 
0840   1A10 00 00 00 00 
0840   1A14 00 00 00 00 
0840   1A18 00 00 00 00 
0840   1A1C 00 00 00 00 
0840   1A20 00 00 00 00 
0840   1A24 00 00 00 00 
0840   1A28 00 00 00 00 
0840   1A2C 00 00 00 00 
0840   1A30 00 00 00 00 
0840   1A34 00 00 00 00 
0840   1A38 00 00 00 00 
0840   1A3C 00 00 00 00 
0840   1A40 00 00 00 00 
0840   1A44 00 00 00 00 
0840   1A48 00 00 00 00 
0840   1A4C 00 00 00 00 
0840   1A50 00 00 00 00 
0840   1A54 00 00 00 00 
0840   1A58 00 00 00 00 
0840   1A5C 00 00 00 00 
0840   1A60 00 00 00 00 
0840   1A64 00 00 00 00 
0840   1A68 00 00 00 00 
0840   1A6C 00 00 00 00 
0840   1A70 00 00 00 00 
0840   1A74 00 00 00 00 
0840   1A78 00 00 00 00 
0840   1A7C 00 00 00 00 
0840   1A80 00 00 00 00 
0840   1A84 00 00 00 00 
0840   1A88 00 00 00 00 
0840   1A8C 00 00 00 00 
0840   1A90 00 00 00 00 
0840   1A94 00 00 00 00 
0840   1A98 00 00 00 00 
0840   1A9C 00 00 00 00 
0840   1AA0 00 00 00 00 
0840   1AA4 00 00 00 00 
0840   1AA8 00 00 00 00 
0840   1AAC 00 00 00 00 
0840   1AB0 00 00 00 00 
0840   1AB4 00 00 00 00 
0840   1AB8 00 00 00 00 
0840   1ABC 00 00 00 00 
0840   1AC0 00 00 00 00 
0840   1AC4 00 00 00 00 
0840   1AC8 00 00 00 00 
0840   1ACC 00 00 00 00 
0840   1AD0 00 00 00 00 
0840   1AD4 00 00 00 00 
0840   1AD8 00 00 00 00 
0840   1ADC 00 00 00 00 
0840   1AE0 00 00 00 00 
0840   1AE4 00 00 00 00 
0840   1AE8 00 00 00 00 
0840   1AEC 00 00 00 00 
0840   1AF0 00 00 00 00 
0840   1AF4 00 00 00 00 
0840   1AF8 00 00 00 00 
0840   1AFC 00 00 00 00 
0840   1B00 00 00 00 00 
0840   1B04 00 00 00 00 
0840   1B08 00 00 00 00 
0840   1B0C 00 00 00 00 
0840   1B10 00 00 00 00 
0840   1B14 00 00 00 00 
0840   1B18 00 00 00 00 
0840   1B1C 00 00 00 00 
0840   1B20 00 00 00 00 
0840   1B24 00 00 00 00 
0840   1B28 00 00 00 00 
0840   1B2C 00 00 00 00 
0840   1B30 00 00 00 00 
0840   1B34 00 00 00 00 
0840   1B38 00 00 00 00 
0840   1B3C 00 00 00 00 
0840   1B40 00 00 00 00 
0840   1B44 00 00 00 00 
0840   1B48 00 00 00 00 
0840   1B4C 00 00 00 00 
0840   1B50 00 00 00 00 
0840   1B54 00 00 00 00 
0840   1B58 00 00 00 00 
0840   1B5C 00 00 00 00 
0840   1B60 00 00 00 00 
0840   1B64 00 00 00 00 
0840   1B68 00 00 00 00 
0840   1B6C 00 00 00 00 
0840   1B70 00 00 00 00 
0840   1B74 00 00 00 00 
0840   1B78 00 00 00 00 
0840   1B7C 00 00 00 00 
0840   1B80 00 00 00 00 
0840   1B84 00 00 00 00 
0840   1B88 00 00 00 00 
0840   1B8C 00 00 00 00 
0840   1B90 00 00 00 00 
0840   1B94 00 00 00 00 
0840   1B98 00 00 00 00 
0840   1B9C 00 00 00 00 
0840   1BA0 00 00 00 00 
0840   1BA4 00 00 00 00 
0840   1BA8 00 00 00 00 
0840   1BAC 00 00 00 00 
0840   1BB0 00 00 00 00 
0840   1BB4 00 00 00 00 
0840   1BB8 00 00 00 00 
0840   1BBC 00 00 00 00 
0840   1BC0 00 00 00 00 
0840   1BC4 00 00 00 00 
0840   1BC8 00 00 00 00 
0840   1BCC 00 00 00 00 
0840   1BD0 00 00 00 00 
0840   1BD4 00 00 00 00 
0840   1BD8 00 00 00 00 
0840   1BDC 00 00 00 00 
0840   1BE0 00 00 00 00 
0840   1BE4 00 00 00 00 
0840   1BE8 00 00 00 00 
0840   1BEC 00 00 00 00 
0840   1BF0 00 00 00 00 
0840   1BF4 00 00 00 00 
0840   1BF8 00 00 00 00 
0840   1BFC 00 00 00 00 
0840   1C00 00 00 00 00 
0840   1C04 00 00 00 00 
0840   1C08 00 00 00 00 
0840   1C0C 00 00 00 00 
0840   1C10 00 00 00 00 
0840   1C14 00 00 00 00 
0840   1C18 00 00 00 00 
0840   1C1C 00 00 00 00 
0840   1C20 00 00 00 00 
0840   1C24 00 00 00 00 
0840   1C28 00 00 00 00 
0840   1C2C 00 00 00 00 
0840   1C30 00 00 00 00 
0840   1C34 00 00 00 00 
0840   1C38 00 00 00 00 
0840   1C3C 00 00 00 00 
0840   1C40 00 00 00 00 
0840   1C44 00 00 00 00 
0840   1C48 00 00 00 00 
0840   1C4C 00 00 00 00 
0840   1C50 00 00 00 00 
0840   1C54 00 00 00 00 
0840   1C58 00 00 00 00 
0840   1C5C 00 00 00 00 
0840   1C60 00 00 00 00 
0840   1C64 00 00 00 00 
0840   1C68 00 00 00 00 
0840   1C6C 00 00 00 00 
0840   1C70 00 00 00 00 
0840   1C74 00 00 00 00 
0840   1C78 00 00 00 00 
0840   1C7C 00 00 00 00 
0840   1C80 00 00 00 00 
0840   1C84 00 00 00 00 
0840   1C88 00 00 00 00 
0840   1C8C 00 00 00 00 
0840   1C90 00 00 00 00 
0840   1C94 00 00 00 00 
0840   1C98 00 00 00 00 
0840   1C9C 00 00 00 00 
0840   1CA0 00 00 00 00 
0840   1CA4 00 00 00 00 
0840   1CA8 00 00 00 00 
0840   1CAC 00 00 00 00 
0840   1CB0 00 00 00 00 
0840   1CB4 00 00 00 00 
0840   1CB8 00 00 00 00 
0840   1CBC 00 00 00 00 
0840   1CC0 00 00 00 00 
0840   1CC4 00 00 00 00 
0840   1CC8 00 00 00 00 
0840   1CCC 00 00 00 00 
0840   1CD0 00 00 00 00 
0840   1CD4 00 00 00 00 
0840   1CD8 00 00 00 00 
0840   1CDC 00 00 00 00 
0840   1CE0 00 00 00 00 
0840   1CE4 00 00 00 00 
0840   1CE8 00 00 00 00 
0840   1CEC 00 00 00 00 
0840   1CF0 00 00 00 00 
0840   1CF4 00 00 00 00 
0840   1CF8 00 00 00 00 
0840   1CFC 00 00 00 00 
0840   1D00 00 00 00 00 
0840   1D04 00 00 00 00 
0840   1D08 00 00 00 00 
0840   1D0C 00 00 00 00 
0840   1D10 00 00 00 00 
0840   1D14 00 00 00 00 
0840   1D18 00 00 00 00 
0840   1D1C 00 00 00 00 
0840   1D20 00 00 00 00 
0840   1D24 00 00 00 00 
0840   1D28 00 00 00 00 
0840   1D2C 00 00 00 00 
0840   1D30 00 00 00 00 
0840   1D34 00 00 00 00 
0840   1D38 00 00 00 00 
0840   1D3C 00 00 00 00 
0840   1D40 00 00 00 00 
0840   1D44 00 00 00 00 
0840   1D48 00 00 00 00 
0840   1D4C 00 00 00 00 
0840   1D50 00 00 00 00 
0840   1D54 00 00 00 00 
0840   1D58 00 00 00 00 
0840   1D5C 00 00 00 00 
0840   1D60 00 00 00 00 
0840   1D64 00 00 00 00 
0840   1D68 00 00 00 00 
0840   1D6C 00 00 00 00 
0840   1D70 00 00 00 00 
0840   1D74 00 00 00 00 
0840   1D78 00 00 00 00 
0840   1D7C 00 00 00 00 
0840   1D80 00 00 00 00 
0840   1D84 00 00 00 00 
0840   1D88 00 00 00 00 
0840   1D8C 00 00 00 00 
0840   1D90 00 00 00 00 
0840   1D94 00 00 00 00 
0840   1D98 00 00 00 00 
0840   1D9C 00 00 00 00 
0840   1DA0 00 00 00 00 
0840   1DA4 00 00 00 00 
0840   1DA8 00 00 00 00 
0840   1DAC 00 00 00 00 
0840   1DB0 00 00 00 00 
0840   1DB4 00 00 00 00 
0840   1DB8 00 00 00 00 
0840   1DBC 00 00 00 00 
0840   1DC0 00 00 00 00 
0840   1DC4 00 00 00 00 
0840   1DC8 00 00 00 00 
0840   1DCC 00 00 00 00 
0840   1DD0 00 00 00 00 
0840   1DD4 00 00 00 00 
0840   1DD8 00 00 00 00 
0840   1DDC 00 00 00 00 
0840   1DE0 00 00 00 00 
0840   1DE4 00 00 00 00 
0840   1DE8 00 00 00 00 
0840   1DEC 00 00 00 00 
0840   1DF0 00 00 00 00 
0840   1DF4 00 00 00 00 
0840   1DF8 00 00 00 00 
0840   1DFC 00 00 00 00 
0840   1E00 00 00 00 00 
0840   1E04 00 00 00 00 
0840   1E08 00 00 00 00 
0840   1E0C 00 00 00 00 
0840   1E10 00 00 00 00 
0840   1E14 00 00 00 00 
0840   1E18 00 00 00 00 
0840   1E1C 00 00 00 00 
0840   1E20 00 00 00 00 
0840   1E24 00 00 00 00 
0840   1E28 00 00 00 00 
0840   1E2C 00 00 00 00 
0840   1E30 00 00 00 00 
0840   1E34 00 00 00 00 
0840   1E38 00 00 00 00 
0840   1E3C 00 00 00 00 
0840   1E40 00 00 00 00 
0840   1E44 00 00 00 00 
0840   1E48 00 00 00 00 
0840   1E4C 00 00 00 00 
0840   1E50 00 00 00 00 
0840   1E54 00 00 00 00 
0840   1E58 00 00 00 00 
0840   1E5C 00 00 00 00 
0840   1E60 00 00 00 00 
0840   1E64 00 00 00 00 
0840   1E68 00 00 00 00 
0840   1E6C 00 00 00 00 
0840   1E70 00 00 00 00 
0840   1E74 00 00 00 00 
0840   1E78 00 00 00 00 
0840   1E7C 00 00 00 00 
0840   1E80 00 00 00 00 
0840   1E84 00 00 00 00 
0840   1E88 00 00 00 00 
0840   1E8C 00 00 00 00 
0840   1E90 00 00 00 00 
0840   1E94 00 00 00 00 
0840   1E98 00 00 00 00 
0840   1E9C 00 00 00 00 
0840   1EA0 00 00 00 00 
0840   1EA4 00 00 00 00 
0840   1EA8 00 00 00 00 
0840   1EAC 00 00 00 00 
0840   1EB0 00 00 00 00 
0840   1EB4 00 00 00 00 
0840   1EB8 00 00 00 00 
0840   1EBC 00 00 00 00 
0840   1EC0 00 00 00 00 
0840   1EC4 00 00 00 00 
0840   1EC8 00 00 00 00 
0840   1ECC 00 00 00 00 
0840   1ED0 00 00 00 00 
0840   1ED4 00 00 00 00 
0840   1ED8 00 00 00 00 
0840   1EDC 00 00 00 00 
0840   1EE0 00 00 00 00 
0840   1EE4 00 00 00 00 
0840   1EE8 00 00 00 00 
0840   1EEC 00 00 00 00 
0840   1EF0 00 00 00 00 
0840   1EF4 00 00 00 00 
0840   1EF8 00 00 00 00 
0840   1EFC 00 00 00 00 
0840   1F00 00 00 00 00 
0840   1F04 00 00 00 00 
0840   1F08 00 00 00 00 
0840   1F0C 00 00 00 00 
0840   1F10 00 00 00 00 
0840   1F14 00 00 00 00 
0840   1F18 00 00 00 00 
0840   1F1C 00 00 00 00 
0840   1F20 00 00 00 00 
0840   1F24 00 00 00 00 
0840   1F28 00 00 00 00 
0840   1F2C 00 00 00 00 
0840   1F30 00 00 00 00 
0840   1F34 00 00 00 00 
0840   1F38 00 00 00 00 
0840   1F3C 00 00 00 00 
0840   1F40 00 00 00 00 
0840   1F44 00 00 00 00 
0840   1F48 00 00 00 00 
0840   1F4C 00 00 00 00 
0840   1F50 00 00 00 00 
0840   1F54 00 00 00 00 
0840   1F58 00 00 00 00 
0840   1F5C 00 00 00 00 
0840   1F60 00 00 00 00 
0840   1F64 00 00 00 00 
0840   1F68 00 00 00 00 
0840   1F6C 00 00 00 00 
0840   1F70 00 00 00 00 
0840   1F74 00 00 00 00 
0840   1F78 00 00 00 00 
0840   1F7C 00 00 00 00 
0840   1F80 00 00 00 00 
0840   1F84 00 00 00 00 
0840   1F88 00 00 00 00 
0840   1F8C 00 00 00 00 
0840   1F90 00 00 00 00 
0840   1F94 00 00 00 00 
0840   1F98 00 00 00 00 
0840   1F9C 00 00 00 00 
0840   1FA0 00 00 00 00 
0840   1FA4 00 00 00 00 
0840   1FA8 00 00 00 00 
0840   1FAC 00 00 00 00 
0840   1FB0 00 00 00 00 
0840   1FB4 00 00 00 00 
0840   1FB8 00 00 00 00 
0840   1FBC 00 00 00 00 
0840   1FC0 00 00 00 00 
0840   1FC4 00 00 00 00 
0840   1FC8 00 00 00 00 
0840   1FCC 00 00 00 00 
0840   1FD0 00 00 00 00 
0840   1FD4 00 00 00 00 
0840   1FD8 00 00 00 00 
0840   1FDC 00 00 00 00 
0840   1FE0 00 00 00 00 
0840   1FE4 00 00 00 00 
0840   1FE8 00 00 00 00 
0840   1FEC 00 00 00 00 
0840   1FF0 00 00 00 00 
0840   1FF4 00 00 00 00 
0840   1FF8 00 00 00 00 
0840   1FFC 00 00 00 00 
0840   2000 00 00 00 00 
0840   2004 00 00 00 00 
0840   2008 00 00 00 00 
0840   200C 00 00 00 00 
0840   2010 00 00 00 00 
0840   2014 00 00 00 00 
0840   2018 00 00 00 00 
0840   201C 00 00 00 00 
0840   2020 00 00 00 00 
0840   2024 00 00 00 00 
0840   2028 00 00 00 00 
0840   202C 00 00 00 00 
0840   2030 00 00 00 00 
0840   2034 00 00 00 00 
0840   2038 00 00 00 00 
0840   203C 00 00 00 00 
0840   2040 00 00 00 00 
0840   2044 00 00 00 00 
0840   2048 00 00 00 00 
0840   204C 00 00 00 00 
0840   2050 00 00 00 00 
0840   2054 00 00 00 00 
0840   2058 00 00 00 00 
0840   205C 00 00 00 00 
0840   2060 00 00 00 00 
0840   2064 00 00 00 00 
0840   2068 00 00 00 00 
0840   206C 00 00 00 00 
0840   2070 00 00 00 00 
0840   2074 00 00 00 00 
0840   2078 00 00 00 00 
0840   207C 00 00 00 00 
0840   2080 00 00 00 00 
0840   2084 00 00 00 00 
0840   2088 00 00 00 00 
0840   208C 00 00 00 00 
0840   2090 00 00 00 00 
0840   2094 00 00 00 00 
0840   2098 00 00 00 00 
0840   209C 00 00 00 00 
0840   20A0 00 00 00 00 
0840   20A4 00 00 00 00 
0840   20A8 00 00 00 00 
0840   20AC 00 00 00 00 
0840   20B0 00 00 00 00 
0840   20B4 00 00 00 00 
0840   20B8 00 00 00 00 
0840   20BC 00 00 00 00 
0840   20C0 00 00 00 00 
0840   20C4 00 00 00 00 
0840   20C8 00 00 00 00 
0840   20CC 00 00 00 00 
0840   20D0 00 00 00 00 
0840   20D4 00 00 00 00 
0840   20D8 00 00 00 00 
0840   20DC 00 00 00 00 
0840   20E0 00 00 00 00 
0840   20E4 00 00 00 00 
0840   20E8 00 00 00 00 
0840   20EC 00 00 00 00 
0840   20F0 00 00 00 00 
0840   20F4 00 00 00 00 
0840   20F8 00 00 00 00 
0840   20FC 00 00 00 00 
0840   2100 00 00 00 00 
0840   2104 00 00 00 00 
0840   2108 00 00 00 00 
0840   210C 00 00 00 00 
0840   2110 00 00 00 00 
0840   2114 00 00 00 00 
0840   2118 00 00 00 00 
0840   211C 00 00 00 00 
0840   2120 00 00 00 00 
0840   2124 00 00 00 00 
0840   2128 00 00 00 00 
0840   212C 00 00 00 00 
0840   2130 00 00 00 00 
0840   2134 00 00 00 00 
0840   2138 00 00 00 00 
0840   213C 00 00 00 00 
0840   2140 00 00 00 00 
0840   2144 00 00 00 00 
0840   2148 00 00 00 00 
0840   214C 00 00 00 00 
0840   2150 00 00 00 00 
0840   2154 00 00 00 00 
0840   2158 00 00 00 00 
0840   215C 00 00 00 00 
0840   2160 00 00 00 00 
0840   2164 00 00 00 00 
0840   2168 00 00 00 00 
0840   216C 00 00 00 00 
0840   2170 00 00 00 00 
0840   2174 00 00 00 00 
0840   2178 00 00 00 00 
0840   217C 00 00 00 00 
0840   2180 00 00 00 00 
0840   2184 00 00 00 00 
0840   2188 00 00 00 00 
0840   218C 00 00 00 00 
0840   2190 00 00 00 00 
0840   2194 00 00 00 00 
0840   2198 00 00 00 00 
0840   219C 00 00 00 00 
0840   21A0 00 00 00 00 
0840   21A4 00 00 00 00 
0840   21A8 00 00 00 00 
0840   21AC 00 00 00 00 
0840   21B0 00 00 00 00 
0840   21B4 00 00 00 00 
0840   21B8 00 00 00 00 
0840   21BC 00 00 00 00 
0840   21C0 00 00 00 00 
0840   21C4 00 00 00 00 
0840   21C8 00 00 00 00 
0840   21CC 00 00 00 00 
0840   21D0 00 00 00 00 
0840   21D4 00 00 00 00 
0840   21D8 00 00 00 00 
0840   21DC 00 00 00 00 
0840   21E0 00 00 00 00 
0840   21E4 00 00 00 00 
0840   21E8 00 00 00 00 
0840   21EC 00 00 00 00 
0840   21F0 00 00 00 00 
0840   21F4 00 00 00 00 
0841   21F8 78 15       next_state: .dw next_state_data
0842   21FA 47 65 6E 65 _string_0: .db "Generations: ", 0
0842   21FE 72 61 74 69 
0842   2202 6F 6E 73 3A 
0842   2206 20 00 
0843   2208 47 65 6E 65 _string_1: .db "Generation: ", 0
0843   220C 72 61 74 69 
0843   2210 6F 6E 3A 20 
0843   2214 00 
0844   2215 53 50 3A 20 _string_2: .db "SP: ", 0
0844   2219 00 
0845   221A 40 20 00    _string_3: .db "@ ", 0
0846   221D 2E 20 00    _string_4: .db ". ", 0
0847   2220 0A 00       _string_5: .db "\n", 0
0848   2222             ; --- END DATA BLOCK
0849   2222             
0850   2222             ; --- BEGIN INCLUDE BLOCK
0851   2222             .include "lib/stdio.asm"
0001+  2222             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  2222             ; stdio.s
0003+  2222             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  2222             .include "lib/string.asm"
0001++ 2222             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 2222             ; string.s
0003++ 2222             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 2222             
0005++ 2222             
0006++ 2222             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 2222             ; strrev
0008++ 2222             ; reverse a string
0009++ 2222             ; D = string address
0010++ 2222             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 2222             ; 01234
0012++ 2222             strrev:
0013++ 2222 4B          	pusha
0014++ 2223 07 69 22    	call strlen	; length in C
0015++ 2226 12          	mov a, c
0016++ 2227 AF 01 00    	cmp a, 1
0017++ 222A D0 44 22    	jleu strrev_end	; check string length. string len must be > 1
0018++ 222D 7D          	dec a
0019++ 222E FD 4E       	mov si, d	; beginning of string
0020++ 2230 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 2232 59          	add d, a	; end of string
0022++ 2233 12          	mov a, c
0023++ 2234 FD 9B       	shr a		; divide by 2
0024++ 2236 39          	mov c, a	; C now counts the steps
0025++ 2237             strrev_L0:
0026++ 2237 32          	mov bl, [d]	; save load right-side char into BL
0027++ 2238 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 2239 3E          	mov [d], al	; store left char into right side
0029++ 223A 1B          	mov al, bl
0030++ 223B F7          	stosb		; store right-side char into left-side; increase DI
0031++ 223C 7E          	dec c
0032++ 223D 7F          	dec d
0033++ 223E C2 00 00    	cmp c, 0
0034++ 2241 C7 37 22    	jne strrev_L0
0035++ 2244             strrev_end:
0036++ 2244 4C          	popa
0037++ 2245 09          	ret
0038++ 2246             	
0039++ 2246             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 2246             ; strchr
0041++ 2246             ; search string in D for char in AL
0042++ 2246             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 2246             strchr:
0044++ 2246             strchr_L0:
0045++ 2246 32          	mov bl, [d]
0046++ 2247 C1 00       	cmp bl, 0
0047++ 2249 C6 54 22    	je strchr_end
0048++ 224C BA          	cmp al, bl
0049++ 224D C6 54 22    	je strchr_end
0050++ 2250 79          	inc d
0051++ 2251 0A 46 22    	jmp strchr_L0
0052++ 2254             strchr_end:
0053++ 2254 1B          	mov al, bl
0054++ 2255 09          	ret
0055++ 2256             
0056++ 2256             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 2256             ; strstr
0058++ 2256             ; find sub-string
0059++ 2256             ; str1 in SI
0060++ 2256             ; str2 in DI
0061++ 2256             ; SI points to end of source string
0062++ 2256             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 2256             strstr:
0064++ 2256 DB          	push al
0065++ 2257 DA          	push d
0066++ 2258 E3          	push di
0067++ 2259             strstr_loop:
0068++ 2259 F3          	cmpsb					; compare a byte of the strings
0069++ 225A C7 65 22    	jne strstr_ret
0070++ 225D FC 00 00    	lea d, [di + 0]
0071++ 2260 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 2262 C7 59 22    	jne strstr_loop				; equal chars but not at end
0073++ 2265             strstr_ret:
0074++ 2265 F0          	pop di
0075++ 2266 E7          	pop d
0076++ 2267 E8          	pop al
0077++ 2268 09          	ret
0078++ 2269             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 2269             ; length of null terminated string
0080++ 2269             ; result in C
0081++ 2269             ; pointer in D
0082++ 2269             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 2269             strlen:
0084++ 2269 DA          	push d
0085++ 226A 38 00 00    	mov c, 0
0086++ 226D             strlen_L1:
0087++ 226D BD 00       	cmp byte [d], 0
0088++ 226F C6 77 22    	je strlen_ret
0089++ 2272 79          	inc d
0090++ 2273 78          	inc c
0091++ 2274 0A 6D 22    	jmp strlen_L1
0092++ 2277             strlen_ret:
0093++ 2277 E7          	pop d
0094++ 2278 09          	ret
0095++ 2279             
0096++ 2279             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 2279             ; STRCMP
0098++ 2279             ; compare two strings
0099++ 2279             ; str1 in SI
0100++ 2279             ; str2 in DI
0101++ 2279             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 2279             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 2279             strcmp:
0104++ 2279 DB          	push al
0105++ 227A DA          	push d
0106++ 227B E3          	push di
0107++ 227C E2          	push si
0108++ 227D             strcmp_loop:
0109++ 227D F3          	cmpsb					; compare a byte of the strings
0110++ 227E C7 89 22    	jne strcmp_ret
0111++ 2281 FB FF FF    	lea d, [si +- 1]
0112++ 2284 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 2286 C7 7D 22    	jne strcmp_loop				; equal chars but not at end
0114++ 2289             strcmp_ret:
0115++ 2289 EF          	pop si
0116++ 228A F0          	pop di
0117++ 228B E7          	pop d
0118++ 228C E8          	pop al
0119++ 228D 09          	ret
0120++ 228E             
0121++ 228E             
0122++ 228E             ; STRCPY
0123++ 228E             ; copy null terminated string from SI to DI
0124++ 228E             ; source in SI
0125++ 228E             ; destination in DI
0126++ 228E             strcpy:
0127++ 228E E2          	push si
0128++ 228F E3          	push di
0129++ 2290 DB          	push al
0130++ 2291             strcpy_L1:
0131++ 2291 F6          	lodsb
0132++ 2292 F7          	stosb
0133++ 2293 B9 00       	cmp al, 0
0134++ 2295 C7 91 22    	jne strcpy_L1
0135++ 2298             strcpy_end:
0136++ 2298 E8          	pop al
0137++ 2299 F0          	pop di
0138++ 229A EF          	pop si
0139++ 229B 09          	ret
0140++ 229C             
0141++ 229C             ; STRCAT
0142++ 229C             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 229C             ; source in SI
0144++ 229C             ; destination in DI
0145++ 229C             strcat:
0146++ 229C E2          	push si
0147++ 229D E3          	push di
0148++ 229E D7          	push a
0149++ 229F DA          	push d
0150++ 22A0 50          	mov a, di
0151++ 22A1 3C          	mov d, a
0152++ 22A2             strcat_goto_end_L1:
0153++ 22A2 BD 00       	cmp byte[d], 0
0154++ 22A4 C6 AB 22    	je strcat_start
0155++ 22A7 79          	inc d
0156++ 22A8 0A A2 22    	jmp strcat_goto_end_L1
0157++ 22AB             strcat_start:
0158++ 22AB FD 50       	mov di, d
0159++ 22AD             strcat_L1:
0160++ 22AD F6          	lodsb
0161++ 22AE F7          	stosb
0162++ 22AF B9 00       	cmp al, 0
0163++ 22B1 C7 AD 22    	jne strcat_L1
0164++ 22B4             strcat_end:
0165++ 22B4 E7          	pop d
0166++ 22B5 E4          	pop a
0167++ 22B6 F0          	pop di
0168++ 22B7 EF          	pop si
0169++ 22B8 09          	ret
0005+  22B9             
0006+  22B9 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  22BD 34 35 36 37 
0006+  22C1 38 39 41 42 
0006+  22C5 43 44 45 46 
0007+  22C9 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  22CD 1B 5B 48 00 
0008+  22D1             
0009+  22D1 01 00       table_power:.dw 1
0010+  22D3 0A 00       			.dw 10
0011+  22D5 64 00       			.dw 100
0012+  22D7 E8 03       			.dw 1000
0013+  22D9 10 27       			.dw 10000
0014+  22DB             
0015+  22DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  22DB             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  22DB             ; ASCII in BL
0018+  22DB             ; result in AL
0019+  22DB             ; ascii for F = 0100 0110
0020+  22DB             ; ascii for 9 = 0011 1001
0021+  22DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  22DB             hex_ascii_encode:
0023+  22DB 1B          	mov al, bl
0024+  22DC 93 40       	test al, $40				; test if letter or number
0025+  22DE C7 E4 22    	jnz hex_letter
0026+  22E1 87 0F       	and al, $0F				; get number
0027+  22E3 09          	ret
0028+  22E4             hex_letter:
0029+  22E4 87 0F       	and al, $0F				; get letter
0030+  22E6 6A 09       	add al, 9
0031+  22E8 09          	ret
0032+  22E9             
0033+  22E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  22E9             ; ATOI
0035+  22E9             ; 2 letter hex string in B
0036+  22E9             ; 8bit integer returned in AL
0037+  22E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  22E9             atoi:
0039+  22E9 D8          	push b
0040+  22EA 07 DB 22    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  22ED 30          	mov bl, bh
0042+  22EE DB          	push al					; save a
0043+  22EF 07 DB 22    	call hex_ascii_encode
0044+  22F2 EA          	pop bl	
0045+  22F3 FD 9E 04    	shl al, 4
0046+  22F6 8C          	or al, bl
0047+  22F7 E5          	pop b
0048+  22F8 09          	ret	
0049+  22F9             
0050+  22F9             
0051+  22F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  22F9             ; printf
0053+  22F9             ; no need for explanations!
0054+  22F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  22F9             printf:
0056+  22F9 09          	ret
0057+  22FA             
0058+  22FA             
0059+  22FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  22FA             ; scanf
0061+  22FA             ; no need for explanations!
0062+  22FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  22FA             scanf:
0064+  22FA 09          	ret
0065+  22FB             
0066+  22FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  22FB             ; ITOA
0068+  22FB             ; 8bit value in BL
0069+  22FB             ; 2 byte ASCII result in A
0070+  22FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  22FB             itoa:
0072+  22FB DA          	push d
0073+  22FC D8          	push b
0074+  22FD A7 00       	mov bh, 0
0075+  22FF FD A4 04    	shr bl, 4	
0076+  2302 74          	mov d, b
0077+  2303 1F B9 22    	mov al, [d + s_hex_digits]
0078+  2306 23          	mov ah, al
0079+  2307             	
0080+  2307 E5          	pop b
0081+  2308 D8          	push b
0082+  2309 A7 00       	mov bh, 0
0083+  230B FD 87 0F    	and bl, $0F
0084+  230E 74          	mov d, b
0085+  230F 1F B9 22    	mov al, [d + s_hex_digits]
0086+  2312 E5          	pop b
0087+  2313 E7          	pop d
0088+  2314 09          	ret
0089+  2315             
0090+  2315             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  2315             ; HEX STRING TO BINARY
0092+  2315             ; di = destination address
0093+  2315             ; si = source
0094+  2315             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  2315             hex_to_int:
0096+  2315             hex_to_int_L1:
0097+  2315 F6          	lodsb					; load from [SI] to AL
0098+  2316 B9 00       	cmp al, 0				; check if ASCII 0
0099+  2318 C6 25 23    	jz hex_to_int_ret
0100+  231B 36          	mov bh, al
0101+  231C F6          	lodsb
0102+  231D 2F          	mov bl, al
0103+  231E 07 E9 22    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  2321 F7          	stosb					; store AL to [DI]
0105+  2322 0A 15 23    	jmp hex_to_int_L1
0106+  2325             hex_to_int_ret:
0107+  2325 09          	ret		
0108+  2326             
0109+  2326             
0110+  2326             
0111+  2326             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  2326             ; GETCHAR
0113+  2326             ; char in ah
0114+  2326             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  2326             getchar:
0116+  2326 DB          	push al
0117+  2327             getchar_retry:
0118+  2327 FD 0C       	sti
0119+  2329 19 01       	mov al, 1
0120+  232B 05 03       	syscall sys_io			; receive in AH
0121+  232D B9 00       	cmp al, 0			; check if any char was receive
0122+  232F C6 27 23    	je getchar_retry
0123+  2332 E8          	pop al
0124+  2333 09          	ret
0125+  2334             
0126+  2334             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  2334             ; PUTCHAR
0128+  2334             ; char in ah
0129+  2334             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  2334             putchar:
0131+  2334 D7          	push a
0132+  2335 19 00       	mov al, 0
0133+  2337 05 03       	syscall sys_io			; char in AH
0134+  2339 E4          	pop a
0135+  233A 09          	ret
0136+  233B             
0137+  233B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  233B             ;; INPUT A STRING
0139+  233B             ;; terminates with null
0140+  233B             ;; pointer in D
0141+  233B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  233B             gets:
0143+  233B D7          	push a
0144+  233C DA          	push d
0145+  233D             gets_loop:
0146+  233D FD 0C       	sti
0147+  233F 19 01       	mov al, 1
0148+  2341 05 03       	syscall sys_io			; receive in AH
0149+  2343 B9 00       	cmp al, 0				; check error code (AL)
0150+  2345 C6 3D 23    	je gets_loop			; if no char received, retry
0151+  2348             
0152+  2348 76 1B       	cmp ah, 27
0153+  234A C6 6B 23    	je gets_telnet_escape
0154+  234D 76 0A       	cmp ah, $0A				; LF
0155+  234F C6 C4 23    	je gets_end
0156+  2352 76 0D       	cmp ah, $0D				; CR
0157+  2354 C6 C4 23    	je gets_end
0158+  2357 76 5C       	cmp ah, $5C				; '\\'
0159+  2359 C6 9B 23    	je gets_escape
0160+  235C             	
0161+  235C 76 08       	cmp ah, $08			; check for backspace
0162+  235E C6 67 23    	je gets_backspace
0163+  2361             
0164+  2361 1A          	mov al, ah
0165+  2362 3E          	mov [d], al
0166+  2363 79          	inc d
0167+  2364 0A 3D 23    	jmp gets_loop
0168+  2367             gets_backspace:
0169+  2367 7F          	dec d
0170+  2368 0A 3D 23    	jmp gets_loop
0171+  236B             gets_telnet_escape:
0172+  236B FD 0C       	sti
0173+  236D 19 01       	mov al, 1
0174+  236F 05 03       	syscall sys_io				; receive in AH without echo
0175+  2371 B9 00       	cmp al, 0					; check error code (AL)
0176+  2373 C6 6B 23    	je gets_telnet_escape		; if no char received, retry
0177+  2376 76 5B       	cmp ah, '['
0178+  2378 C7 3D 23    	jne gets_loop
0179+  237B             gets_telnet_escape_phase2:
0180+  237B FD 0C       	sti
0181+  237D 19 01       	mov al, 1
0182+  237F 05 03       	syscall sys_io					; receive in AH without echo
0183+  2381 B9 00       	cmp al, 0						; check error code (AL)
0184+  2383 C6 7B 23    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  2386 76 44       	cmp ah, 'D'
0186+  2388 C6 93 23    	je gets_left_arrow
0187+  238B 76 43       	cmp ah, 'C'
0188+  238D C6 97 23    	je gets_right_arrow
0189+  2390 0A 3D 23    	jmp gets_loop
0190+  2393             gets_left_arrow:
0191+  2393 7F          	dec d
0192+  2394 0A 3D 23    	jmp gets_loop
0193+  2397             gets_right_arrow:
0194+  2397 79          	inc d
0195+  2398 0A 3D 23    	jmp gets_loop
0196+  239B             gets_escape:
0197+  239B FD 0C       	sti
0198+  239D 19 01       	mov al, 1
0199+  239F 05 03       	syscall sys_io			; receive in AH
0200+  23A1 B9 00       	cmp al, 0				; check error code (AL)
0201+  23A3 C6 9B 23    	je gets_escape			; if no char received, retry
0202+  23A6 76 6E       	cmp ah, 'n'
0203+  23A8 C6 B6 23    	je gets_LF
0204+  23AB 76 72       	cmp ah, 'r'
0205+  23AD C6 BD 23    	je gets_CR
0206+  23B0 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  23B1 3E          	mov [d], al
0208+  23B2 79          	inc d
0209+  23B3 0A 3D 23    	jmp gets_loop
0210+  23B6             gets_LF:
0211+  23B6 19 0A       	mov al, $0A
0212+  23B8 3E          	mov [d], al
0213+  23B9 79          	inc d
0214+  23BA 0A 3D 23    	jmp gets_loop
0215+  23BD             gets_CR:
0216+  23BD 19 0D       	mov al, $0D
0217+  23BF 3E          	mov [d], al
0218+  23C0 79          	inc d
0219+  23C1 0A 3D 23    	jmp gets_loop
0220+  23C4             gets_end:
0221+  23C4 19 00       	mov al, 0
0222+  23C6 3E          	mov [d], al				; terminate string
0223+  23C7 E7          	pop d
0224+  23C8 E4          	pop a
0225+  23C9 09          	ret
0226+  23CA             
0227+  23CA             
0228+  23CA             
0229+  23CA             
0230+  23CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  23CA             ;; INPUT TEXT
0232+  23CA             ;; terminated with CTRL+D
0233+  23CA             ;; pointer in D
0234+  23CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  23CA             gettxt:
0236+  23CA D7          	push a
0237+  23CB DA          	push d
0238+  23CC             gettxt_loop:
0239+  23CC 19 01       	mov al, 1
0240+  23CE 05 03       	syscall sys_io			; receive in AH
0241+  23D0 B9 00       	cmp al, 0				; check error code (AL)
0242+  23D2 C6 CC 23    	je gettxt_loop		; if no char received, retry
0243+  23D5 76 04       	cmp ah, 4			; EOT
0244+  23D7 C6 15 24    	je gettxt_end
0245+  23DA 76 08       	cmp ah, $08			; check for backspace
0246+  23DC C6 11 24    	je gettxt_backspace
0247+  23DF 76 5C       	cmp ah, $5C				; '\\'
0248+  23E1 C6 EA 23    	je gettxt_escape
0249+  23E4 1A          	mov al, ah
0250+  23E5 3E          	mov [d], al
0251+  23E6 79          	inc d
0252+  23E7 0A CC 23    	jmp gettxt_loop
0253+  23EA             gettxt_escape:
0254+  23EA 19 01       	mov al, 1
0255+  23EC 05 03       	syscall sys_io			; receive in AH
0256+  23EE B9 00       	cmp al, 0				; check error code (AL)
0257+  23F0 C6 EA 23    	je gettxt_escape		; if no char received, retry
0258+  23F3 76 6E       	cmp ah, 'n'
0259+  23F5 C6 03 24    	je gettxt_LF
0260+  23F8 76 72       	cmp ah, 'r'
0261+  23FA C6 0A 24    	je gettxt_CR
0262+  23FD 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  23FE 3E          	mov [d], al
0264+  23FF 79          	inc d
0265+  2400 0A CC 23    	jmp gettxt_loop
0266+  2403             gettxt_LF:
0267+  2403 19 0A       	mov al, $0A
0268+  2405 3E          	mov [d], al
0269+  2406 79          	inc d
0270+  2407 0A CC 23    	jmp gettxt_loop
0271+  240A             gettxt_CR:
0272+  240A 19 0D       	mov al, $0D
0273+  240C 3E          	mov [d], al
0274+  240D 79          	inc d
0275+  240E 0A CC 23    	jmp gettxt_loop
0276+  2411             gettxt_backspace:
0277+  2411 7F          	dec d
0278+  2412 0A CC 23    	jmp gettxt_loop
0279+  2415             gettxt_end:
0280+  2415 19 00       	mov al, 0
0281+  2417 3E          	mov [d], al				; terminate string
0282+  2418 E7          	pop d
0283+  2419 E4          	pop a
0284+  241A 09          	ret
0285+  241B             
0286+  241B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  241B             ; PRINT NEW LINE
0288+  241B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  241B             printnl:
0290+  241B D7          	push a
0291+  241C 10 00 0A    	mov a, $0A00
0292+  241F 05 03       	syscall sys_io
0293+  2421 10 00 0D    	mov a, $0D00
0294+  2424 05 03       	syscall sys_io
0295+  2426 E4          	pop a
0296+  2427 09          	ret
0297+  2428             
0298+  2428             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  2428             ; strtoint
0300+  2428             ; 4 digit hex string number in d
0301+  2428             ; integer returned in A
0302+  2428             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  2428             strtointx:
0304+  2428 D8          	push b
0305+  2429 32          	mov bl, [d]
0306+  242A 37          	mov bh, bl
0307+  242B 33 01 00    	mov bl, [d + 1]
0308+  242E 07 E9 22    	call atoi				; convert to int in AL
0309+  2431 23          	mov ah, al				; move to AH
0310+  2432 33 02 00    	mov bl, [d + 2]
0311+  2435 37          	mov bh, bl
0312+  2436 33 03 00    	mov bl, [d + 3]
0313+  2439 07 E9 22    	call atoi				; convert to int in AL
0314+  243C E5          	pop b
0315+  243D 09          	ret
0316+  243E             
0317+  243E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  243E             ; strtoint
0319+  243E             ; 5 digit base10 string number in d
0320+  243E             ; integer returned in A
0321+  243E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  243E             strtoint:
0323+  243E E2          	push si
0324+  243F D8          	push b
0325+  2440 D9          	push c
0326+  2441 DA          	push d
0327+  2442 07 69 22    	call strlen			; get string length in C
0328+  2445 7E          	dec c
0329+  2446 FD 4E       	mov si, d
0330+  2448 12          	mov a, c
0331+  2449 FD 99       	shl a
0332+  244B 3B D1 22    	mov d, table_power
0333+  244E 59          	add d, a
0334+  244F 38 00 00    	mov c, 0
0335+  2452             strtoint_L0:
0336+  2452 F6          	lodsb			; load ASCII to al
0337+  2453 B9 00       	cmp al, 0
0338+  2455 C6 68 24    	je strtoint_end
0339+  2458 6F 30       	sub al, $30		; make into integer
0340+  245A 22 00       	mov ah, 0
0341+  245C 2A          	mov b, [d]
0342+  245D AC          	mul a, b			; result in B since it fits in 16bits
0343+  245E 11          	mov a, b
0344+  245F 28          	mov b, c
0345+  2460 54          	add a, b
0346+  2461 39          	mov c, a
0347+  2462 63 02 00    	sub d, 2
0348+  2465 0A 52 24    	jmp strtoint_L0
0349+  2468             strtoint_end:
0350+  2468 12          	mov a, c
0351+  2469 E7          	pop d
0352+  246A E6          	pop c
0353+  246B E5          	pop b
0354+  246C EF          	pop si
0355+  246D 09          	ret
0356+  246E             
0357+  246E             
0358+  246E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  246E             ; PRINT NULL TERMINATED STRING
0360+  246E             ; pointer in D
0361+  246E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  246E             puts:
0363+  246E D7          	push a
0364+  246F DA          	push d
0365+  2470             puts_L1:
0366+  2470 1E          	mov al, [d]
0367+  2471 B9 00       	cmp al, 0
0368+  2473 C6 7F 24    	jz puts_END
0369+  2476 23          	mov ah, al
0370+  2477 19 00       	mov al, 0
0371+  2479 05 03       	syscall sys_io
0372+  247B 79          	inc d
0373+  247C 0A 70 24    	jmp puts_L1
0374+  247F             puts_END:
0375+  247F E7          	pop d
0376+  2480 E4          	pop a
0377+  2481 09          	ret
0378+  2482             
0379+  2482             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  2482             ; PRINT N SIZE STRING
0381+  2482             ; pointer in D
0382+  2482             ; size in C
0383+  2482             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  2482             putsn:
0385+  2482 DB          	push al
0386+  2483 DA          	push d
0387+  2484 D9          	push c
0388+  2485             putsn_L0:
0389+  2485 1E          	mov al, [d]
0390+  2486 23          	mov ah, al
0391+  2487 19 00       	mov al, 0
0392+  2489 05 03       	syscall sys_io
0393+  248B 79          	inc d
0394+  248C 7E          	dec c	
0395+  248D C2 00 00    	cmp c, 0
0396+  2490 C7 85 24    	jne putsn_L0
0397+  2493             putsn_end:
0398+  2493 E6          	pop c
0399+  2494 E7          	pop d
0400+  2495 E8          	pop al
0401+  2496 09          	ret
0402+  2497             
0403+  2497             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  2497             ; print 16bit decimal number
0405+  2497             ; input number in A
0406+  2497             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  2497             print_u16d:
0408+  2497 D7          	push a
0409+  2498 D8          	push b
0410+  2499 26 10 27    	mov b, 10000
0411+  249C AE          	div a, b			; get 10000 coeff.
0412+  249D 07 C3 24    	call print_number
0413+  24A0 11          	mov a, b
0414+  24A1 26 E8 03    	mov b, 1000
0415+  24A4 AE          	div a, b			; get 10000 coeff.
0416+  24A5 07 C3 24    	call print_number
0417+  24A8 11          	mov a, b
0418+  24A9 26 64 00    	mov b, 100
0419+  24AC AE          	div a, b
0420+  24AD 07 C3 24    	call print_number
0421+  24B0 11          	mov a, b
0422+  24B1 26 0A 00    	mov b, 10
0423+  24B4 AE          	div a, b
0424+  24B5 07 C3 24    	call print_number
0425+  24B8 11          	mov a, b
0426+  24B9 6A 30       	add al, $30
0427+  24BB 23          	mov ah, al
0428+  24BC 19 00       	mov al, 0
0429+  24BE 05 03       	syscall sys_io	; print coeff
0430+  24C0 E5          	pop b
0431+  24C1 E4          	pop a
0432+  24C2 09          	ret
0433+  24C3             
0434+  24C3             
0435+  24C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  24C3             ; if A == 0, print space
0437+  24C3             ; else print A
0438+  24C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  24C3             print_number:
0440+  24C3 6A 30       	add al, $30
0441+  24C5 23          	mov ah, al
0442+  24C6 07 34 23    	call putchar
0443+  24C9 09          	ret
0444+  24CA             
0445+  24CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  24CA             ; PRINT 16BIT HEX INTEGER
0447+  24CA             ; integer value in reg B
0448+  24CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  24CA             print_u16x:
0450+  24CA D7          	push a
0451+  24CB D8          	push b
0452+  24CC DD          	push bl
0453+  24CD 30          	mov bl, bh
0454+  24CE 07 FB 22    	call itoa				; convert bh to char in A
0455+  24D1 2F          	mov bl, al				; save al
0456+  24D2 19 00       	mov al, 0
0457+  24D4 05 03       	syscall sys_io				; display AH
0458+  24D6 24          	mov ah, bl				; retrieve al
0459+  24D7 19 00       	mov al, 0
0460+  24D9 05 03       	syscall sys_io				; display AL
0461+  24DB             
0462+  24DB EA          	pop bl
0463+  24DC 07 FB 22    	call itoa				; convert bh to char in A
0464+  24DF 2F          	mov bl, al				; save al
0465+  24E0 19 00       	mov al, 0
0466+  24E2 05 03       	syscall sys_io				; display AH
0467+  24E4 24          	mov ah, bl				; retrieve al
0468+  24E5 19 00       	mov al, 0
0469+  24E7 05 03       	syscall sys_io				; display AL
0470+  24E9             
0471+  24E9 E5          	pop b
0472+  24EA E4          	pop a
0473+  24EB 09          	ret
0474+  24EC             
0475+  24EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  24EC             ; INPUT 16BIT HEX INTEGER
0477+  24EC             ; read 16bit integer into A
0478+  24EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  24EC             scan_u16x:
0480+  24EC F8 10 00    	enter 16
0481+  24EF D8          	push b
0482+  24F0 DA          	push d
0483+  24F1             
0484+  24F1 FA F1 FF    	lea d, [bp + -15]
0485+  24F4 07 3B 23    	call gets				; get number
0486+  24F7             
0487+  24F7 32          	mov bl, [d]
0488+  24F8 37          	mov bh, bl
0489+  24F9 33 01 00    	mov bl, [d + 1]
0490+  24FC 07 E9 22    	call atoi				; convert to int in AL
0491+  24FF 23          	mov ah, al				; move to AH
0492+  2500             
0493+  2500 33 02 00    	mov bl, [d + 2]
0494+  2503 37          	mov bh, bl
0495+  2504 33 03 00    	mov bl, [d + 3]
0496+  2507 07 E9 22    	call atoi				; convert to int in AL
0497+  250A             
0498+  250A E7          	pop d
0499+  250B E5          	pop b
0500+  250C F9          	leave
0501+  250D 09          	ret
0502+  250E             
0503+  250E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  250E             ; PRINT 8bit HEX INTEGER
0505+  250E             ; integer value in reg bl
0506+  250E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  250E             print_u8x:
0508+  250E D7          	push a
0509+  250F DD          	push bl
0510+  2510             
0511+  2510 07 FB 22    	call itoa				; convert bl to char in A
0512+  2513 2F          	mov bl, al				; save al
0513+  2514 19 00       	mov al, 0
0514+  2516 05 03       	syscall sys_io				; display AH
0515+  2518 24          	mov ah, bl				; retrieve al
0516+  2519 19 00       	mov al, 0
0517+  251B 05 03       	syscall sys_io				; display AL
0518+  251D             
0519+  251D EA          	pop bl
0520+  251E E4          	pop a
0521+  251F 09          	ret
0522+  2520             
0523+  2520             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  2520             ; print 8bit decimal unsigned number
0525+  2520             ; input number in AL
0526+  2520             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  2520             print_u8d:
0528+  2520 D7          	push a
0529+  2521 D8          	push b
0530+  2522             
0531+  2522 22 00       	mov ah, 0
0532+  2524 26 64 00    	mov b, 100
0533+  2527 AE          	div a, b
0534+  2528 D8          	push b			; save remainder
0535+  2529 B9 00       	cmp al, 0
0536+  252B C6 35 25    	je skip100
0537+  252E 6A 30       	add al, $30
0538+  2530 23          	mov ah, al
0539+  2531 19 00       	mov al, 0
0540+  2533 05 03       	syscall sys_io	; print coeff
0541+  2535             skip100:
0542+  2535 E4          	pop a
0543+  2536 22 00       	mov ah, 0
0544+  2538 26 0A 00    	mov b, 10
0545+  253B AE          	div a, b
0546+  253C D8          	push b			; save remainder
0547+  253D B9 00       	cmp al, 0
0548+  253F C6 49 25    	je skip10
0549+  2542 6A 30       	add al, $30
0550+  2544 23          	mov ah, al
0551+  2545 19 00       	mov al, 0
0552+  2547 05 03       	syscall sys_io	; print coeff
0553+  2549             skip10:
0554+  2549 E4          	pop a
0555+  254A 1B          	mov al, bl
0556+  254B 6A 30       	add al, $30
0557+  254D 23          	mov ah, al
0558+  254E 19 00       	mov al, 0
0559+  2550 05 03       	syscall sys_io	; print coeff
0560+  2552 E5          	pop b
0561+  2553 E4          	pop a
0562+  2554 09          	ret
0563+  2555             
0564+  2555             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  2555             ; INPUT 8BIT HEX INTEGER
0566+  2555             ; read 8bit integer into AL
0567+  2555             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  2555             scan_u8x:
0569+  2555 F8 04 00    	enter 4
0570+  2558 D8          	push b
0571+  2559 DA          	push d
0572+  255A             
0573+  255A FA FD FF    	lea d, [bp + -3]
0574+  255D 07 3B 23    	call gets				; get number
0575+  2560             
0576+  2560 32          	mov bl, [d]
0577+  2561 37          	mov bh, bl
0578+  2562 33 01 00    	mov bl, [d + 1]
0579+  2565 07 E9 22    	call atoi				; convert to int in AL
0580+  2568             
0581+  2568 E7          	pop d
0582+  2569 E5          	pop b
0583+  256A F9          	leave
0584+  256B 09          	ret
0585+  256C             
0586+  256C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  256C             ; input decimal number
0588+  256C             ; result in A
0589+  256C             ; 655'\0'
0590+  256C             ; low--------high
0591+  256C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  256C             scan_u16d:
0593+  256C F8 08 00    	enter 8
0594+  256F E2          	push si
0595+  2570 D8          	push b
0596+  2571 D9          	push c
0597+  2572 DA          	push d
0598+  2573 FA F9 FF    	lea d, [bp +- 7]
0599+  2576 07 3B 23    	call gets
0600+  2579 07 69 22    	call strlen			; get string length in C
0601+  257C 7E          	dec c
0602+  257D FD 4E       	mov si, d
0603+  257F 12          	mov a, c
0604+  2580 FD 99       	shl a
0605+  2582 3B D1 22    	mov d, table_power
0606+  2585 59          	add d, a
0607+  2586 38 00 00    	mov c, 0
0608+  2589             mul_loop:
0609+  2589 F6          	lodsb			; load ASCII to al
0610+  258A B9 00       	cmp al, 0
0611+  258C C6 9F 25    	je mul_exit
0612+  258F 6F 30       	sub al, $30		; make into integer
0613+  2591 22 00       	mov ah, 0
0614+  2593 2A          	mov b, [d]
0615+  2594 AC          	mul a, b			; result in B since it fits in 16bits
0616+  2595 11          	mov a, b
0617+  2596 28          	mov b, c
0618+  2597 54          	add a, b
0619+  2598 39          	mov c, a
0620+  2599 63 02 00    	sub d, 2
0621+  259C 0A 89 25    	jmp mul_loop
0622+  259F             mul_exit:
0623+  259F 12          	mov a, c
0624+  25A0 E7          	pop d
0625+  25A1 E6          	pop c
0626+  25A2 E5          	pop b
0627+  25A3 EF          	pop si
0628+  25A4 F9          	leave
0629+  25A5 09          	ret
0852   25A6             ; --- END INCLUDE BLOCK
0853   25A6             
0854   25A6             
0855   25A6             .end
tasm: Number of errors = 0
