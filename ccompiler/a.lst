0001   0000             ; --- FILENAME: largenumtSol1a.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402             _for1_init:
0011   0402 26 00 00      mov b, 0
0012   0405 FD 42 2F 39   mov [__pos], b
0013   0409             _for1_cond:
0014   0409 29 2F 39      mov b, [__pos] ; pos
0015   040C D7            push a
0016   040D 11            mov a, b
0017   040E 26 3C 00      mov b, 60
0018   0411 B0            cmp a, b
0019   0412 0E            lodflgs
0020   0413 87 02         and al, %00000010 ; <
0021   0415 FD 9C         shr al
0022   0417 22 00         mov ah, 0
0023   0419 27            mov b, a
0024   041A E4            pop a
0025   041B C0 00 00      cmp b, 0
0026   041E C6 3D 04      je _for1_exit
0027   0421             _for1_block:
0028   0421 26 00 00      mov b, 0
0029   0424 FD AB         swp b
0030   0426 D8            push b
0031   0427 07 73 14      call prnnum
0032   042A 51 02 00      add sp, 2
0033   042D             _for1_update:
0034   042D 29 2F 39      mov b, [__pos] ; pos
0035   0430 D7            push a
0036   0431 11            mov a, b
0037   0432 FD 77         inc b
0038   0434 FD 42 2F 39   mov [__pos], b
0039   0438 27            mov b, a
0040   0439 E4            pop a
0041   043A 0A 09 04      jmp _for1_cond
0042   043D             _for1_exit:
0043   043D 26 6D 39      mov b, __string_0 ; "\n"
0044   0440 FD AB         swp b
0045   0442 D8            push b
0046   0443 07 3C 14      call print
0047   0446 51 02 00      add sp, 2
0048   0449             _for2_init:
0049   0449 26 06 00      mov b, 6
0050   044C FD 42 2F 39   mov [__pos], b
0051   0450             _for2_cond:
0052   0450 29 2F 39      mov b, [__pos] ; pos
0053   0453 D7            push a
0054   0454 11            mov a, b
0055   0455 26 00 00      mov b, 0
0056   0458 B0            cmp a, b
0057   0459 0E            lodflgs
0058   045A 87 03         and al, %00000011
0059   045C B9 00         cmp al, 0
0060   045E 0E            lodflgs
0061   045F 22 00         mov ah, 0
0062   0461 27            mov b, a
0063   0462 E4            pop a
0064   0463 C0 00 00      cmp b, 0
0065   0466 C6 E8 05      je _for2_exit
0066   0469             _for2_block:
0067   0469 07 47 14      call readint
0068   046C FD 42 09 38   mov [__ionr], b
0069   0470 29 09 38      mov b, [__ionr] ; ionr
0070   0473 D7            push a
0071   0474 11            mov a, b
0072   0475 26 10 27      mov b, 10000
0073   0478 AE            div a, b
0074   0479 FD 78         mov g, a
0075   047B 11            mov a, b
0076   047C FD 27         mov b, g
0077   047E E4            pop a
0078   047F FD 42 0B 38   mov [__ioshift], b
0079   0483 29 0B 38      mov b, [__ioshift] ; ioshift
0080   0486 D7            push a
0081   0487 11            mov a, b
0082   0488 26 10 27      mov b, 10000
0083   048B AC            mul a, b
0084   048C E4            pop a
0085   048D FD 42 0B 38   mov [__ioshift], b
0086   0491 29 09 38      mov b, [__ionr] ; ionr
0087   0494 D7            push a
0088   0495 11            mov a, b
0089   0496 29 0B 38      mov b, [__ioshift] ; ioshift
0090   0499 60            sub a, b
0091   049A 27            mov b, a
0092   049B E4            pop a
0093   049C FD 42 09 38   mov [__ionr], b
0094   04A0 29 07 38      mov b, [__ionum] ; ionum
0095   04A3 D7            push a
0096   04A4 74            mov d, b
0097   04A5 DA            push d
0098   04A6 29 2F 39      mov b, [__pos] ; pos
0099   04A9 D7            push a
0100   04AA 11            mov a, b
0101   04AB 26 01 00      mov b, 1
0102   04AE 60            sub a, b
0103   04AF 27            mov b, a
0104   04B0 E4            pop a
0105   04B1 E7            pop d
0106   04B2 10 02 00      mov a, 2
0107   04B5 AC            mul a, b
0108   04B6 5A            add d, b
0109   04B7 E4            pop a
0110   04B8 DA            push d
0111   04B9 29 09 38      mov b, [__ionr] ; ionr
0112   04BC E7            pop d
0113   04BD FD 43         mov [d], b
0114   04BF             _for3_init:
0115   04BF 26 06 00      mov b, 6
0116   04C2 FD 42 57 38   mov [__datumpos], b
0117   04C6             _for3_cond:
0118   04C6 29 57 38      mov b, [__datumpos] ; datumpos
0119   04C9 D7            push a
0120   04CA 11            mov a, b
0121   04CB 29 2F 39      mov b, [__pos] ; pos
0122   04CE B0            cmp a, b
0123   04CF 0E            lodflgs
0124   04D0 87 03         and al, %00000011
0125   04D2 8F 02         xor al, %00000010 ; >=
0126   04D4 B9 00         cmp al, 0
0127   04D6 0E            lodflgs
0128   04D7 8F 01         xor al, %00000001
0129   04D9 22 00         mov ah, 0
0130   04DB 27            mov b, a
0131   04DC E4            pop a
0132   04DD C0 00 00      cmp b, 0
0133   04E0 C6 CC 05      je _for3_exit
0134   04E3             _for3_block:
0135   04E3             _if4_cond:
0136   04E3 29 07 38      mov b, [__ionum] ; ionum
0137   04E6 D7            push a
0138   04E7 74            mov d, b
0139   04E8 DA            push d
0140   04E9 29 57 38      mov b, [__datumpos] ; datumpos
0141   04EC D7            push a
0142   04ED 11            mov a, b
0143   04EE 26 01 00      mov b, 1
0144   04F1 60            sub a, b
0145   04F2 27            mov b, a
0146   04F3 E4            pop a
0147   04F4 E7            pop d
0148   04F5 10 02 00      mov a, 2
0149   04F8 AC            mul a, b
0150   04F9 5A            add d, b
0151   04FA E4            pop a
0152   04FB 2A            mov b, [d]
0153   04FC D7            push a
0154   04FD 11            mov a, b
0155   04FE 26 E8 03      mov b, 1000
0156   0501 B0            cmp a, b
0157   0502 0E            lodflgs
0158   0503 87 02         and al, %00000010 ; <
0159   0505 FD 9C         shr al
0160   0507 22 00         mov ah, 0
0161   0509 27            mov b, a
0162   050A E4            pop a
0163   050B C0 00 00      cmp b, 0
0164   050E C6 20 05      je _if4_exit
0165   0511             _if4_true:
0166   0511 26 00 00      mov b, 0
0167   0514 FD AB         swp b
0168   0516 D8            push b
0169   0517 07 73 14      call prnnum
0170   051A 51 02 00      add sp, 2
0171   051D 0A 20 05      jmp _if4_exit
0172   0520             _if4_exit:
0173   0520             _if5_cond:
0174   0520 29 07 38      mov b, [__ionum] ; ionum
0175   0523 D7            push a
0176   0524 74            mov d, b
0177   0525 DA            push d
0178   0526 29 57 38      mov b, [__datumpos] ; datumpos
0179   0529 D7            push a
0180   052A 11            mov a, b
0181   052B 26 01 00      mov b, 1
0182   052E 60            sub a, b
0183   052F 27            mov b, a
0184   0530 E4            pop a
0185   0531 E7            pop d
0186   0532 10 02 00      mov a, 2
0187   0535 AC            mul a, b
0188   0536 5A            add d, b
0189   0537 E4            pop a
0190   0538 2A            mov b, [d]
0191   0539 D7            push a
0192   053A 11            mov a, b
0193   053B 26 64 00      mov b, 100
0194   053E B0            cmp a, b
0195   053F 0E            lodflgs
0196   0540 87 02         and al, %00000010 ; <
0197   0542 FD 9C         shr al
0198   0544 22 00         mov ah, 0
0199   0546 27            mov b, a
0200   0547 E4            pop a
0201   0548 C0 00 00      cmp b, 0
0202   054B C6 5D 05      je _if5_exit
0203   054E             _if5_true:
0204   054E 26 00 00      mov b, 0
0205   0551 FD AB         swp b
0206   0553 D8            push b
0207   0554 07 73 14      call prnnum
0208   0557 51 02 00      add sp, 2
0209   055A 0A 5D 05      jmp _if5_exit
0210   055D             _if5_exit:
0211   055D             _if6_cond:
0212   055D 29 07 38      mov b, [__ionum] ; ionum
0213   0560 D7            push a
0214   0561 74            mov d, b
0215   0562 DA            push d
0216   0563 29 57 38      mov b, [__datumpos] ; datumpos
0217   0566 D7            push a
0218   0567 11            mov a, b
0219   0568 26 01 00      mov b, 1
0220   056B 60            sub a, b
0221   056C 27            mov b, a
0222   056D E4            pop a
0223   056E E7            pop d
0224   056F 10 02 00      mov a, 2
0225   0572 AC            mul a, b
0226   0573 5A            add d, b
0227   0574 E4            pop a
0228   0575 2A            mov b, [d]
0229   0576 D7            push a
0230   0577 11            mov a, b
0231   0578 26 0A 00      mov b, 10
0232   057B B0            cmp a, b
0233   057C 0E            lodflgs
0234   057D 87 02         and al, %00000010 ; <
0235   057F FD 9C         shr al
0236   0581 22 00         mov ah, 0
0237   0583 27            mov b, a
0238   0584 E4            pop a
0239   0585 C0 00 00      cmp b, 0
0240   0588 C6 9A 05      je _if6_exit
0241   058B             _if6_true:
0242   058B 26 00 00      mov b, 0
0243   058E FD AB         swp b
0244   0590 D8            push b
0245   0591 07 73 14      call prnnum
0246   0594 51 02 00      add sp, 2
0247   0597 0A 9A 05      jmp _if6_exit
0248   059A             _if6_exit:
0249   059A 29 07 38      mov b, [__ionum] ; ionum
0250   059D D7            push a
0251   059E 74            mov d, b
0252   059F DA            push d
0253   05A0 29 57 38      mov b, [__datumpos] ; datumpos
0254   05A3 D7            push a
0255   05A4 11            mov a, b
0256   05A5 26 01 00      mov b, 1
0257   05A8 60            sub a, b
0258   05A9 27            mov b, a
0259   05AA E4            pop a
0260   05AB E7            pop d
0261   05AC 10 02 00      mov a, 2
0262   05AF AC            mul a, b
0263   05B0 5A            add d, b
0264   05B1 E4            pop a
0265   05B2 2A            mov b, [d]
0266   05B3 FD AB         swp b
0267   05B5 D8            push b
0268   05B6 07 73 14      call prnnum
0269   05B9 51 02 00      add sp, 2
0270   05BC             _for3_update:
0271   05BC 29 57 38      mov b, [__datumpos] ; datumpos
0272   05BF D7            push a
0273   05C0 11            mov a, b
0274   05C1 FD 7D         dec b
0275   05C3 FD 42 57 38   mov [__datumpos], b
0276   05C7 27            mov b, a
0277   05C8 E4            pop a
0278   05C9 0A C6 04      jmp _for3_cond
0279   05CC             _for3_exit:
0280   05CC 26 6D 39      mov b, __string_0 ; "\n"
0281   05CF FD AB         swp b
0282   05D1 D8            push b
0283   05D2 07 3C 14      call print
0284   05D5 51 02 00      add sp, 2
0285   05D8             _for2_update:
0286   05D8 29 2F 39      mov b, [__pos] ; pos
0287   05DB D7            push a
0288   05DC 11            mov a, b
0289   05DD FD 7D         dec b
0290   05DF FD 42 2F 39   mov [__pos], b
0291   05E3 27            mov b, a
0292   05E4 E4            pop a
0293   05E5 0A 50 04      jmp _for2_cond
0294   05E8             _for2_exit:
0295   05E8 26 00 00      mov b, 0
0296   05EB FD 42 57 38   mov [__datumpos], b
0297   05EF             _for7_init:
0298   05EF 29 57 38      mov b, [__datumpos] ; datumpos
0299   05F2 D7            push a
0300   05F3 11            mov a, b
0301   05F4 26 06 00      mov b, 6
0302   05F7 AC            mul a, b
0303   05F8 E4            pop a
0304   05F9 FD 42 2F 39   mov [__pos], b
0305   05FD             _for7_cond:
0306   05FD 29 2F 39      mov b, [__pos] ; pos
0307   0600 D7            push a
0308   0601 11            mov a, b
0309   0602 29 57 38      mov b, [__datumpos] ; datumpos
0310   0605 D7            push a
0311   0606 11            mov a, b
0312   0607 26 06 00      mov b, 6
0313   060A AC            mul a, b
0314   060B E4            pop a
0315   060C D7            push a
0316   060D 11            mov a, b
0317   060E 26 06 00      mov b, 6
0318   0611 54            add a, b
0319   0612 27            mov b, a
0320   0613 E4            pop a
0321   0614 B0            cmp a, b
0322   0615 0E            lodflgs
0323   0616 87 02         and al, %00000010 ; <
0324   0618 FD 9C         shr al
0325   061A 22 00         mov ah, 0
0326   061C 27            mov b, a
0327   061D E4            pop a
0328   061E C0 00 00      cmp b, 0
0329   0621 C6 68 06      je _for7_exit
0330   0624             _for7_block:
0331   0624 29 55 38      mov b, [__datum] ; datum
0332   0627 D7            push a
0333   0628 74            mov d, b
0334   0629 DA            push d
0335   062A 29 2F 39      mov b, [__pos] ; pos
0336   062D E7            pop d
0337   062E 10 02 00      mov a, 2
0338   0631 AC            mul a, b
0339   0632 5A            add d, b
0340   0633 E4            pop a
0341   0634 DA            push d
0342   0635 29 07 38      mov b, [__ionum] ; ionum
0343   0638 D7            push a
0344   0639 74            mov d, b
0345   063A DA            push d
0346   063B 29 2F 39      mov b, [__pos] ; pos
0347   063E D7            push a
0348   063F 11            mov a, b
0349   0640 29 57 38      mov b, [__datumpos] ; datumpos
0350   0643 D7            push a
0351   0644 11            mov a, b
0352   0645 26 06 00      mov b, 6
0353   0648 AC            mul a, b
0354   0649 E4            pop a
0355   064A 60            sub a, b
0356   064B 27            mov b, a
0357   064C E4            pop a
0358   064D E7            pop d
0359   064E 10 02 00      mov a, 2
0360   0651 AC            mul a, b
0361   0652 5A            add d, b
0362   0653 E4            pop a
0363   0654 2A            mov b, [d]
0364   0655 E7            pop d
0365   0656 FD 43         mov [d], b
0366   0658             _for7_update:
0367   0658 29 2F 39      mov b, [__pos] ; pos
0368   065B D7            push a
0369   065C 11            mov a, b
0370   065D FD 77         inc b
0371   065F FD 42 2F 39   mov [__pos], b
0372   0663 27            mov b, a
0373   0664 E4            pop a
0374   0665 0A FD 05      jmp _for7_cond
0375   0668             _for7_exit:
0376   0668             _for8_init:
0377   0668 26 00 00      mov b, 0
0378   066B FD 42 2F 39   mov [__pos], b
0379   066F             _for8_cond:
0380   066F 29 2F 39      mov b, [__pos] ; pos
0381   0672 D7            push a
0382   0673 11            mov a, b
0383   0674 26 3C 00      mov b, 60
0384   0677 B0            cmp a, b
0385   0678 0E            lodflgs
0386   0679 87 02         and al, %00000010 ; <
0387   067B FD 9C         shr al
0388   067D 22 00         mov ah, 0
0389   067F 27            mov b, a
0390   0680 E4            pop a
0391   0681 C0 00 00      cmp b, 0
0392   0684 C6 A3 06      je _for8_exit
0393   0687             _for8_block:
0394   0687 26 00 00      mov b, 0
0395   068A FD AB         swp b
0396   068C D8            push b
0397   068D 07 73 14      call prnnum
0398   0690 51 02 00      add sp, 2
0399   0693             _for8_update:
0400   0693 29 2F 39      mov b, [__pos] ; pos
0401   0696 D7            push a
0402   0697 11            mov a, b
0403   0698 FD 77         inc b
0404   069A FD 42 2F 39   mov [__pos], b
0405   069E 27            mov b, a
0406   069F E4            pop a
0407   06A0 0A 6F 06      jmp _for8_cond
0408   06A3             _for8_exit:
0409   06A3 26 6D 39      mov b, __string_0 ; "\n"
0410   06A6 FD AB         swp b
0411   06A8 D8            push b
0412   06A9 07 3C 14      call print
0413   06AC 51 02 00      add sp, 2
0414   06AF             _for9_init:
0415   06AF 26 06 00      mov b, 6
0416   06B2 FD 42 2F 39   mov [__pos], b
0417   06B6             _for9_cond:
0418   06B6 29 2F 39      mov b, [__pos] ; pos
0419   06B9 D7            push a
0420   06BA 11            mov a, b
0421   06BB 26 00 00      mov b, 0
0422   06BE B0            cmp a, b
0423   06BF 0E            lodflgs
0424   06C0 87 03         and al, %00000011
0425   06C2 B9 00         cmp al, 0
0426   06C4 0E            lodflgs
0427   06C5 22 00         mov ah, 0
0428   06C7 27            mov b, a
0429   06C8 E4            pop a
0430   06C9 C0 00 00      cmp b, 0
0431   06CC C6 4E 08      je _for9_exit
0432   06CF             _for9_block:
0433   06CF 07 47 14      call readint
0434   06D2 FD 42 09 38   mov [__ionr], b
0435   06D6 29 09 38      mov b, [__ionr] ; ionr
0436   06D9 D7            push a
0437   06DA 11            mov a, b
0438   06DB 26 10 27      mov b, 10000
0439   06DE AE            div a, b
0440   06DF FD 78         mov g, a
0441   06E1 11            mov a, b
0442   06E2 FD 27         mov b, g
0443   06E4 E4            pop a
0444   06E5 FD 42 0B 38   mov [__ioshift], b
0445   06E9 29 0B 38      mov b, [__ioshift] ; ioshift
0446   06EC D7            push a
0447   06ED 11            mov a, b
0448   06EE 26 10 27      mov b, 10000
0449   06F1 AC            mul a, b
0450   06F2 E4            pop a
0451   06F3 FD 42 0B 38   mov [__ioshift], b
0452   06F7 29 09 38      mov b, [__ionr] ; ionr
0453   06FA D7            push a
0454   06FB 11            mov a, b
0455   06FC 29 0B 38      mov b, [__ioshift] ; ioshift
0456   06FF 60            sub a, b
0457   0700 27            mov b, a
0458   0701 E4            pop a
0459   0702 FD 42 09 38   mov [__ionr], b
0460   0706 29 07 38      mov b, [__ionum] ; ionum
0461   0709 D7            push a
0462   070A 74            mov d, b
0463   070B DA            push d
0464   070C 29 2F 39      mov b, [__pos] ; pos
0465   070F D7            push a
0466   0710 11            mov a, b
0467   0711 26 01 00      mov b, 1
0468   0714 60            sub a, b
0469   0715 27            mov b, a
0470   0716 E4            pop a
0471   0717 E7            pop d
0472   0718 10 02 00      mov a, 2
0473   071B AC            mul a, b
0474   071C 5A            add d, b
0475   071D E4            pop a
0476   071E DA            push d
0477   071F 29 09 38      mov b, [__ionr] ; ionr
0478   0722 E7            pop d
0479   0723 FD 43         mov [d], b
0480   0725             _for10_init:
0481   0725 26 06 00      mov b, 6
0482   0728 FD 42 57 38   mov [__datumpos], b
0483   072C             _for10_cond:
0484   072C 29 57 38      mov b, [__datumpos] ; datumpos
0485   072F D7            push a
0486   0730 11            mov a, b
0487   0731 29 2F 39      mov b, [__pos] ; pos
0488   0734 B0            cmp a, b
0489   0735 0E            lodflgs
0490   0736 87 03         and al, %00000011
0491   0738 8F 02         xor al, %00000010 ; >=
0492   073A B9 00         cmp al, 0
0493   073C 0E            lodflgs
0494   073D 8F 01         xor al, %00000001
0495   073F 22 00         mov ah, 0
0496   0741 27            mov b, a
0497   0742 E4            pop a
0498   0743 C0 00 00      cmp b, 0
0499   0746 C6 32 08      je _for10_exit
0500   0749             _for10_block:
0501   0749             _if11_cond:
0502   0749 29 07 38      mov b, [__ionum] ; ionum
0503   074C D7            push a
0504   074D 74            mov d, b
0505   074E DA            push d
0506   074F 29 57 38      mov b, [__datumpos] ; datumpos
0507   0752 D7            push a
0508   0753 11            mov a, b
0509   0754 26 01 00      mov b, 1
0510   0757 60            sub a, b
0511   0758 27            mov b, a
0512   0759 E4            pop a
0513   075A E7            pop d
0514   075B 10 02 00      mov a, 2
0515   075E AC            mul a, b
0516   075F 5A            add d, b
0517   0760 E4            pop a
0518   0761 2A            mov b, [d]
0519   0762 D7            push a
0520   0763 11            mov a, b
0521   0764 26 E8 03      mov b, 1000
0522   0767 B0            cmp a, b
0523   0768 0E            lodflgs
0524   0769 87 02         and al, %00000010 ; <
0525   076B FD 9C         shr al
0526   076D 22 00         mov ah, 0
0527   076F 27            mov b, a
0528   0770 E4            pop a
0529   0771 C0 00 00      cmp b, 0
0530   0774 C6 86 07      je _if11_exit
0531   0777             _if11_true:
0532   0777 26 00 00      mov b, 0
0533   077A FD AB         swp b
0534   077C D8            push b
0535   077D 07 73 14      call prnnum
0536   0780 51 02 00      add sp, 2
0537   0783 0A 86 07      jmp _if11_exit
0538   0786             _if11_exit:
0539   0786             _if12_cond:
0540   0786 29 07 38      mov b, [__ionum] ; ionum
0541   0789 D7            push a
0542   078A 74            mov d, b
0543   078B DA            push d
0544   078C 29 57 38      mov b, [__datumpos] ; datumpos
0545   078F D7            push a
0546   0790 11            mov a, b
0547   0791 26 01 00      mov b, 1
0548   0794 60            sub a, b
0549   0795 27            mov b, a
0550   0796 E4            pop a
0551   0797 E7            pop d
0552   0798 10 02 00      mov a, 2
0553   079B AC            mul a, b
0554   079C 5A            add d, b
0555   079D E4            pop a
0556   079E 2A            mov b, [d]
0557   079F D7            push a
0558   07A0 11            mov a, b
0559   07A1 26 64 00      mov b, 100
0560   07A4 B0            cmp a, b
0561   07A5 0E            lodflgs
0562   07A6 87 02         and al, %00000010 ; <
0563   07A8 FD 9C         shr al
0564   07AA 22 00         mov ah, 0
0565   07AC 27            mov b, a
0566   07AD E4            pop a
0567   07AE C0 00 00      cmp b, 0
0568   07B1 C6 C3 07      je _if12_exit
0569   07B4             _if12_true:
0570   07B4 26 00 00      mov b, 0
0571   07B7 FD AB         swp b
0572   07B9 D8            push b
0573   07BA 07 73 14      call prnnum
0574   07BD 51 02 00      add sp, 2
0575   07C0 0A C3 07      jmp _if12_exit
0576   07C3             _if12_exit:
0577   07C3             _if13_cond:
0578   07C3 29 07 38      mov b, [__ionum] ; ionum
0579   07C6 D7            push a
0580   07C7 74            mov d, b
0581   07C8 DA            push d
0582   07C9 29 57 38      mov b, [__datumpos] ; datumpos
0583   07CC D7            push a
0584   07CD 11            mov a, b
0585   07CE 26 01 00      mov b, 1
0586   07D1 60            sub a, b
0587   07D2 27            mov b, a
0588   07D3 E4            pop a
0589   07D4 E7            pop d
0590   07D5 10 02 00      mov a, 2
0591   07D8 AC            mul a, b
0592   07D9 5A            add d, b
0593   07DA E4            pop a
0594   07DB 2A            mov b, [d]
0595   07DC D7            push a
0596   07DD 11            mov a, b
0597   07DE 26 0A 00      mov b, 10
0598   07E1 B0            cmp a, b
0599   07E2 0E            lodflgs
0600   07E3 87 02         and al, %00000010 ; <
0601   07E5 FD 9C         shr al
0602   07E7 22 00         mov ah, 0
0603   07E9 27            mov b, a
0604   07EA E4            pop a
0605   07EB C0 00 00      cmp b, 0
0606   07EE C6 00 08      je _if13_exit
0607   07F1             _if13_true:
0608   07F1 26 00 00      mov b, 0
0609   07F4 FD AB         swp b
0610   07F6 D8            push b
0611   07F7 07 73 14      call prnnum
0612   07FA 51 02 00      add sp, 2
0613   07FD 0A 00 08      jmp _if13_exit
0614   0800             _if13_exit:
0615   0800 29 07 38      mov b, [__ionum] ; ionum
0616   0803 D7            push a
0617   0804 74            mov d, b
0618   0805 DA            push d
0619   0806 29 57 38      mov b, [__datumpos] ; datumpos
0620   0809 D7            push a
0621   080A 11            mov a, b
0622   080B 26 01 00      mov b, 1
0623   080E 60            sub a, b
0624   080F 27            mov b, a
0625   0810 E4            pop a
0626   0811 E7            pop d
0627   0812 10 02 00      mov a, 2
0628   0815 AC            mul a, b
0629   0816 5A            add d, b
0630   0817 E4            pop a
0631   0818 2A            mov b, [d]
0632   0819 FD AB         swp b
0633   081B D8            push b
0634   081C 07 73 14      call prnnum
0635   081F 51 02 00      add sp, 2
0636   0822             _for10_update:
0637   0822 29 57 38      mov b, [__datumpos] ; datumpos
0638   0825 D7            push a
0639   0826 11            mov a, b
0640   0827 FD 7D         dec b
0641   0829 FD 42 57 38   mov [__datumpos], b
0642   082D 27            mov b, a
0643   082E E4            pop a
0644   082F 0A 2C 07      jmp _for10_cond
0645   0832             _for10_exit:
0646   0832 26 6D 39      mov b, __string_0 ; "\n"
0647   0835 FD AB         swp b
0648   0837 D8            push b
0649   0838 07 3C 14      call print
0650   083B 51 02 00      add sp, 2
0651   083E             _for9_update:
0652   083E 29 2F 39      mov b, [__pos] ; pos
0653   0841 D7            push a
0654   0842 11            mov a, b
0655   0843 FD 7D         dec b
0656   0845 FD 42 2F 39   mov [__pos], b
0657   0849 27            mov b, a
0658   084A E4            pop a
0659   084B 0A B6 06      jmp _for9_cond
0660   084E             _for9_exit:
0661   084E 26 01 00      mov b, 1
0662   0851 FD 42 57 38   mov [__datumpos], b
0663   0855             _for14_init:
0664   0855 29 57 38      mov b, [__datumpos] ; datumpos
0665   0858 D7            push a
0666   0859 11            mov a, b
0667   085A 26 06 00      mov b, 6
0668   085D AC            mul a, b
0669   085E E4            pop a
0670   085F FD 42 2F 39   mov [__pos], b
0671   0863             _for14_cond:
0672   0863 29 2F 39      mov b, [__pos] ; pos
0673   0866 D7            push a
0674   0867 11            mov a, b
0675   0868 29 57 38      mov b, [__datumpos] ; datumpos
0676   086B D7            push a
0677   086C 11            mov a, b
0678   086D 26 06 00      mov b, 6
0679   0870 AC            mul a, b
0680   0871 E4            pop a
0681   0872 D7            push a
0682   0873 11            mov a, b
0683   0874 26 06 00      mov b, 6
0684   0877 54            add a, b
0685   0878 27            mov b, a
0686   0879 E4            pop a
0687   087A B0            cmp a, b
0688   087B 0E            lodflgs
0689   087C 87 02         and al, %00000010 ; <
0690   087E FD 9C         shr al
0691   0880 22 00         mov ah, 0
0692   0882 27            mov b, a
0693   0883 E4            pop a
0694   0884 C0 00 00      cmp b, 0
0695   0887 C6 CE 08      je _for14_exit
0696   088A             _for14_block:
0697   088A 29 55 38      mov b, [__datum] ; datum
0698   088D D7            push a
0699   088E 74            mov d, b
0700   088F DA            push d
0701   0890 29 2F 39      mov b, [__pos] ; pos
0702   0893 E7            pop d
0703   0894 10 02 00      mov a, 2
0704   0897 AC            mul a, b
0705   0898 5A            add d, b
0706   0899 E4            pop a
0707   089A DA            push d
0708   089B 29 07 38      mov b, [__ionum] ; ionum
0709   089E D7            push a
0710   089F 74            mov d, b
0711   08A0 DA            push d
0712   08A1 29 2F 39      mov b, [__pos] ; pos
0713   08A4 D7            push a
0714   08A5 11            mov a, b
0715   08A6 29 57 38      mov b, [__datumpos] ; datumpos
0716   08A9 D7            push a
0717   08AA 11            mov a, b
0718   08AB 26 06 00      mov b, 6
0719   08AE AC            mul a, b
0720   08AF E4            pop a
0721   08B0 60            sub a, b
0722   08B1 27            mov b, a
0723   08B2 E4            pop a
0724   08B3 E7            pop d
0725   08B4 10 02 00      mov a, 2
0726   08B7 AC            mul a, b
0727   08B8 5A            add d, b
0728   08B9 E4            pop a
0729   08BA 2A            mov b, [d]
0730   08BB E7            pop d
0731   08BC FD 43         mov [d], b
0732   08BE             _for14_update:
0733   08BE 29 2F 39      mov b, [__pos] ; pos
0734   08C1 D7            push a
0735   08C2 11            mov a, b
0736   08C3 FD 77         inc b
0737   08C5 FD 42 2F 39   mov [__pos], b
0738   08C9 27            mov b, a
0739   08CA E4            pop a
0740   08CB 0A 63 08      jmp _for14_cond
0741   08CE             _for14_exit:
0742   08CE 26 00 00      mov b, 0
0743   08D1 FD 42 57 38   mov [__datumpos], b
0744   08D5             _for15_init:
0745   08D5 29 57 38      mov b, [__datumpos] ; datumpos
0746   08D8 D7            push a
0747   08D9 11            mov a, b
0748   08DA 26 06 00      mov b, 6
0749   08DD AC            mul a, b
0750   08DE E4            pop a
0751   08DF FD 42 2F 39   mov [__pos], b
0752   08E3             _for15_cond:
0753   08E3 29 2F 39      mov b, [__pos] ; pos
0754   08E6 D7            push a
0755   08E7 11            mov a, b
0756   08E8 29 57 38      mov b, [__datumpos] ; datumpos
0757   08EB D7            push a
0758   08EC 11            mov a, b
0759   08ED 26 06 00      mov b, 6
0760   08F0 AC            mul a, b
0761   08F1 E4            pop a
0762   08F2 D7            push a
0763   08F3 11            mov a, b
0764   08F4 26 06 00      mov b, 6
0765   08F7 54            add a, b
0766   08F8 27            mov b, a
0767   08F9 E4            pop a
0768   08FA B0            cmp a, b
0769   08FB 0E            lodflgs
0770   08FC 87 02         and al, %00000010 ; <
0771   08FE FD 9C         shr al
0772   0900 22 00         mov ah, 0
0773   0902 27            mov b, a
0774   0903 E4            pop a
0775   0904 C0 00 00      cmp b, 0
0776   0907 C6 BA 09      je _for15_exit
0777   090A             _for15_block:
0778   090A 29 55 38      mov b, [__datum] ; datum
0779   090D D7            push a
0780   090E 74            mov d, b
0781   090F DA            push d
0782   0910 29 2F 39      mov b, [__pos] ; pos
0783   0913 E7            pop d
0784   0914 10 02 00      mov a, 2
0785   0917 AC            mul a, b
0786   0918 5A            add d, b
0787   0919 E4            pop a
0788   091A 2A            mov b, [d]
0789   091B D7            push a
0790   091C 11            mov a, b
0791   091D 26 64 00      mov b, 100
0792   0920 AE            div a, b
0793   0921 FD 78         mov g, a
0794   0923 11            mov a, b
0795   0924 FD 27         mov b, g
0796   0926 E4            pop a
0797   0927 FD 42 0B 38   mov [__ioshift], b
0798   092B 29 71 38      mov b, [__anarr] ; anarr
0799   092E D7            push a
0800   092F 74            mov d, b
0801   0930 DA            push d
0802   0931 29 2F 39      mov b, [__pos] ; pos
0803   0934 D7            push a
0804   0935 11            mov a, b
0805   0936 29 57 38      mov b, [__datumpos] ; datumpos
0806   0939 D7            push a
0807   093A 11            mov a, b
0808   093B 26 06 00      mov b, 6
0809   093E AC            mul a, b
0810   093F E4            pop a
0811   0940 60            sub a, b
0812   0941 27            mov b, a
0813   0942 E4            pop a
0814   0943 D7            push a
0815   0944 11            mov a, b
0816   0945 26 02 00      mov b, 2
0817   0948 AC            mul a, b
0818   0949 E4            pop a
0819   094A D7            push a
0820   094B 11            mov a, b
0821   094C 26 01 00      mov b, 1
0822   094F 54            add a, b
0823   0950 27            mov b, a
0824   0951 E4            pop a
0825   0952 E7            pop d
0826   0953 10 02 00      mov a, 2
0827   0956 AC            mul a, b
0828   0957 5A            add d, b
0829   0958 E4            pop a
0830   0959 DA            push d
0831   095A 29 0B 38      mov b, [__ioshift] ; ioshift
0832   095D E7            pop d
0833   095E FD 43         mov [d], b
0834   0960 29 71 38      mov b, [__anarr] ; anarr
0835   0963 D7            push a
0836   0964 74            mov d, b
0837   0965 DA            push d
0838   0966 29 2F 39      mov b, [__pos] ; pos
0839   0969 D7            push a
0840   096A 11            mov a, b
0841   096B 29 57 38      mov b, [__datumpos] ; datumpos
0842   096E D7            push a
0843   096F 11            mov a, b
0844   0970 26 06 00      mov b, 6
0845   0973 AC            mul a, b
0846   0974 E4            pop a
0847   0975 60            sub a, b
0848   0976 27            mov b, a
0849   0977 E4            pop a
0850   0978 D7            push a
0851   0979 11            mov a, b
0852   097A 26 02 00      mov b, 2
0853   097D AC            mul a, b
0854   097E E4            pop a
0855   097F E7            pop d
0856   0980 10 02 00      mov a, 2
0857   0983 AC            mul a, b
0858   0984 5A            add d, b
0859   0985 E4            pop a
0860   0986 DA            push d
0861   0987 29 55 38      mov b, [__datum] ; datum
0862   098A D7            push a
0863   098B 74            mov d, b
0864   098C DA            push d
0865   098D 29 2F 39      mov b, [__pos] ; pos
0866   0990 E7            pop d
0867   0991 10 02 00      mov a, 2
0868   0994 AC            mul a, b
0869   0995 5A            add d, b
0870   0996 E4            pop a
0871   0997 2A            mov b, [d]
0872   0998 D7            push a
0873   0999 11            mov a, b
0874   099A 29 0B 38      mov b, [__ioshift] ; ioshift
0875   099D D7            push a
0876   099E 11            mov a, b
0877   099F 26 64 00      mov b, 100
0878   09A2 AC            mul a, b
0879   09A3 E4            pop a
0880   09A4 60            sub a, b
0881   09A5 27            mov b, a
0882   09A6 E4            pop a
0883   09A7 E7            pop d
0884   09A8 FD 43         mov [d], b
0885   09AA             _for15_update:
0886   09AA 29 2F 39      mov b, [__pos] ; pos
0887   09AD D7            push a
0888   09AE 11            mov a, b
0889   09AF FD 77         inc b
0890   09B1 FD 42 2F 39   mov [__pos], b
0891   09B5 27            mov b, a
0892   09B6 E4            pop a
0893   09B7 0A E3 08      jmp _for15_cond
0894   09BA             _for15_exit:
0895   09BA 26 01 00      mov b, 1
0896   09BD FD 42 57 38   mov [__datumpos], b
0897   09C1             _for16_init:
0898   09C1 29 57 38      mov b, [__datumpos] ; datumpos
0899   09C4 D7            push a
0900   09C5 11            mov a, b
0901   09C6 26 06 00      mov b, 6
0902   09C9 AC            mul a, b
0903   09CA E4            pop a
0904   09CB FD 42 2F 39   mov [__pos], b
0905   09CF             _for16_cond:
0906   09CF 29 2F 39      mov b, [__pos] ; pos
0907   09D2 D7            push a
0908   09D3 11            mov a, b
0909   09D4 29 57 38      mov b, [__datumpos] ; datumpos
0910   09D7 D7            push a
0911   09D8 11            mov a, b
0912   09D9 26 06 00      mov b, 6
0913   09DC AC            mul a, b
0914   09DD E4            pop a
0915   09DE D7            push a
0916   09DF 11            mov a, b
0917   09E0 26 06 00      mov b, 6
0918   09E3 54            add a, b
0919   09E4 27            mov b, a
0920   09E5 E4            pop a
0921   09E6 B0            cmp a, b
0922   09E7 0E            lodflgs
0923   09E8 87 02         and al, %00000010 ; <
0924   09EA FD 9C         shr al
0925   09EC 22 00         mov ah, 0
0926   09EE 27            mov b, a
0927   09EF E4            pop a
0928   09F0 C0 00 00      cmp b, 0
0929   09F3 C6 A6 0A      je _for16_exit
0930   09F6             _for16_block:
0931   09F6 29 55 38      mov b, [__datum] ; datum
0932   09F9 D7            push a
0933   09FA 74            mov d, b
0934   09FB DA            push d
0935   09FC 29 2F 39      mov b, [__pos] ; pos
0936   09FF E7            pop d
0937   0A00 10 02 00      mov a, 2
0938   0A03 AC            mul a, b
0939   0A04 5A            add d, b
0940   0A05 E4            pop a
0941   0A06 2A            mov b, [d]
0942   0A07 D7            push a
0943   0A08 11            mov a, b
0944   0A09 26 64 00      mov b, 100
0945   0A0C AE            div a, b
0946   0A0D FD 78         mov g, a
0947   0A0F 11            mov a, b
0948   0A10 FD 27         mov b, g
0949   0A12 E4            pop a
0950   0A13 FD 42 0B 38   mov [__ioshift], b
0951   0A17 29 8B 38      mov b, [__bnarr] ; bnarr
0952   0A1A D7            push a
0953   0A1B 74            mov d, b
0954   0A1C DA            push d
0955   0A1D 29 2F 39      mov b, [__pos] ; pos
0956   0A20 D7            push a
0957   0A21 11            mov a, b
0958   0A22 29 57 38      mov b, [__datumpos] ; datumpos
0959   0A25 D7            push a
0960   0A26 11            mov a, b
0961   0A27 26 06 00      mov b, 6
0962   0A2A AC            mul a, b
0963   0A2B E4            pop a
0964   0A2C 60            sub a, b
0965   0A2D 27            mov b, a
0966   0A2E E4            pop a
0967   0A2F D7            push a
0968   0A30 11            mov a, b
0969   0A31 26 02 00      mov b, 2
0970   0A34 AC            mul a, b
0971   0A35 E4            pop a
0972   0A36 D7            push a
0973   0A37 11            mov a, b
0974   0A38 26 01 00      mov b, 1
0975   0A3B 54            add a, b
0976   0A3C 27            mov b, a
0977   0A3D E4            pop a
0978   0A3E E7            pop d
0979   0A3F 10 02 00      mov a, 2
0980   0A42 AC            mul a, b
0981   0A43 5A            add d, b
0982   0A44 E4            pop a
0983   0A45 DA            push d
0984   0A46 29 0B 38      mov b, [__ioshift] ; ioshift
0985   0A49 E7            pop d
0986   0A4A FD 43         mov [d], b
0987   0A4C 29 8B 38      mov b, [__bnarr] ; bnarr
0988   0A4F D7            push a
0989   0A50 74            mov d, b
0990   0A51 DA            push d
0991   0A52 29 2F 39      mov b, [__pos] ; pos
0992   0A55 D7            push a
0993   0A56 11            mov a, b
0994   0A57 29 57 38      mov b, [__datumpos] ; datumpos
0995   0A5A D7            push a
0996   0A5B 11            mov a, b
0997   0A5C 26 06 00      mov b, 6
0998   0A5F AC            mul a, b
0999   0A60 E4            pop a
1000   0A61 60            sub a, b
1001   0A62 27            mov b, a
1002   0A63 E4            pop a
1003   0A64 D7            push a
1004   0A65 11            mov a, b
1005   0A66 26 02 00      mov b, 2
1006   0A69 AC            mul a, b
1007   0A6A E4            pop a
1008   0A6B E7            pop d
1009   0A6C 10 02 00      mov a, 2
1010   0A6F AC            mul a, b
1011   0A70 5A            add d, b
1012   0A71 E4            pop a
1013   0A72 DA            push d
1014   0A73 29 55 38      mov b, [__datum] ; datum
1015   0A76 D7            push a
1016   0A77 74            mov d, b
1017   0A78 DA            push d
1018   0A79 29 2F 39      mov b, [__pos] ; pos
1019   0A7C E7            pop d
1020   0A7D 10 02 00      mov a, 2
1021   0A80 AC            mul a, b
1022   0A81 5A            add d, b
1023   0A82 E4            pop a
1024   0A83 2A            mov b, [d]
1025   0A84 D7            push a
1026   0A85 11            mov a, b
1027   0A86 29 0B 38      mov b, [__ioshift] ; ioshift
1028   0A89 D7            push a
1029   0A8A 11            mov a, b
1030   0A8B 26 64 00      mov b, 100
1031   0A8E AC            mul a, b
1032   0A8F E4            pop a
1033   0A90 60            sub a, b
1034   0A91 27            mov b, a
1035   0A92 E4            pop a
1036   0A93 E7            pop d
1037   0A94 FD 43         mov [d], b
1038   0A96             _for16_update:
1039   0A96 29 2F 39      mov b, [__pos] ; pos
1040   0A99 D7            push a
1041   0A9A 11            mov a, b
1042   0A9B FD 77         inc b
1043   0A9D FD 42 2F 39   mov [__pos], b
1044   0AA1 27            mov b, a
1045   0AA2 E4            pop a
1046   0AA3 0A CF 09      jmp _for16_cond
1047   0AA6             _for16_exit:
1048   0AA6             _for17_init:
1049   0AA6 26 00 00      mov b, 0
1050   0AA9 FD 42 2F 39   mov [__pos], b
1051   0AAD             _for17_cond:
1052   0AAD 29 2F 39      mov b, [__pos] ; pos
1053   0AB0 D7            push a
1054   0AB1 11            mov a, b
1055   0AB2 26 0C 00      mov b, 12
1056   0AB5 B0            cmp a, b
1057   0AB6 0E            lodflgs
1058   0AB7 87 02         and al, %00000010 ; <
1059   0AB9 FD 9C         shr al
1060   0ABB 22 00         mov ah, 0
1061   0ABD 27            mov b, a
1062   0ABE E4            pop a
1063   0ABF C0 00 00      cmp b, 0
1064   0AC2 C6 1F 0B      je _for17_exit
1065   0AC5             _for17_block:
1066   0AC5 29 A5 38      mov b, [__anarrbkp] ; anarrbkp
1067   0AC8 D7            push a
1068   0AC9 74            mov d, b
1069   0ACA DA            push d
1070   0ACB 29 2F 39      mov b, [__pos] ; pos
1071   0ACE E7            pop d
1072   0ACF 10 02 00      mov a, 2
1073   0AD2 AC            mul a, b
1074   0AD3 5A            add d, b
1075   0AD4 E4            pop a
1076   0AD5 DA            push d
1077   0AD6 29 71 38      mov b, [__anarr] ; anarr
1078   0AD9 D7            push a
1079   0ADA 74            mov d, b
1080   0ADB DA            push d
1081   0ADC 29 2F 39      mov b, [__pos] ; pos
1082   0ADF E7            pop d
1083   0AE0 10 02 00      mov a, 2
1084   0AE3 AC            mul a, b
1085   0AE4 5A            add d, b
1086   0AE5 E4            pop a
1087   0AE6 2A            mov b, [d]
1088   0AE7 E7            pop d
1089   0AE8 FD 43         mov [d], b
1090   0AEA 29 BF 38      mov b, [__bnarrbkp] ; bnarrbkp
1091   0AED D7            push a
1092   0AEE 74            mov d, b
1093   0AEF DA            push d
1094   0AF0 29 2F 39      mov b, [__pos] ; pos
1095   0AF3 E7            pop d
1096   0AF4 10 02 00      mov a, 2
1097   0AF7 AC            mul a, b
1098   0AF8 5A            add d, b
1099   0AF9 E4            pop a
1100   0AFA DA            push d
1101   0AFB 29 8B 38      mov b, [__bnarr] ; bnarr
1102   0AFE D7            push a
1103   0AFF 74            mov d, b
1104   0B00 DA            push d
1105   0B01 29 2F 39      mov b, [__pos] ; pos
1106   0B04 E7            pop d
1107   0B05 10 02 00      mov a, 2
1108   0B08 AC            mul a, b
1109   0B09 5A            add d, b
1110   0B0A E4            pop a
1111   0B0B 2A            mov b, [d]
1112   0B0C E7            pop d
1113   0B0D FD 43         mov [d], b
1114   0B0F             _for17_update:
1115   0B0F 29 2F 39      mov b, [__pos] ; pos
1116   0B12 D7            push a
1117   0B13 11            mov a, b
1118   0B14 FD 77         inc b
1119   0B16 FD 42 2F 39   mov [__pos], b
1120   0B1A 27            mov b, a
1121   0B1B E4            pop a
1122   0B1C 0A AD 0A      jmp _for17_cond
1123   0B1F             _for17_exit:
1124   0B1F             _for18_init:
1125   0B1F 26 00 00      mov b, 0
1126   0B22 FD 42 2F 39   mov [__pos], b
1127   0B26             _for18_cond:
1128   0B26 29 2F 39      mov b, [__pos] ; pos
1129   0B29 D7            push a
1130   0B2A 11            mov a, b
1131   0B2B 26 3C 00      mov b, 60
1132   0B2E B0            cmp a, b
1133   0B2F 0E            lodflgs
1134   0B30 87 02         and al, %00000010 ; <
1135   0B32 FD 9C         shr al
1136   0B34 22 00         mov ah, 0
1137   0B36 27            mov b, a
1138   0B37 E4            pop a
1139   0B38 C0 00 00      cmp b, 0
1140   0B3B C6 5A 0B      je _for18_exit
1141   0B3E             _for18_block:
1142   0B3E 26 00 00      mov b, 0
1143   0B41 FD AB         swp b
1144   0B43 D8            push b
1145   0B44 07 73 14      call prnnum
1146   0B47 51 02 00      add sp, 2
1147   0B4A             _for18_update:
1148   0B4A 29 2F 39      mov b, [__pos] ; pos
1149   0B4D D7            push a
1150   0B4E 11            mov a, b
1151   0B4F FD 77         inc b
1152   0B51 FD 42 2F 39   mov [__pos], b
1153   0B55 27            mov b, a
1154   0B56 E4            pop a
1155   0B57 0A 26 0B      jmp _for18_cond
1156   0B5A             _for18_exit:
1157   0B5A 26 6D 39      mov b, __string_0 ; "\n"
1158   0B5D FD AB         swp b
1159   0B5F D8            push b
1160   0B60 07 3C 14      call print
1161   0B63 51 02 00      add sp, 2
1162   0B66 07 7A 23      call plus
1163   0B69 26 02 00      mov b, 2
1164   0B6C FD 42 57 38   mov [__datumpos], b
1165   0B70             _for19_init:
1166   0B70 29 57 38      mov b, [__datumpos] ; datumpos
1167   0B73 D7            push a
1168   0B74 11            mov a, b
1169   0B75 26 06 00      mov b, 6
1170   0B78 AC            mul a, b
1171   0B79 E4            pop a
1172   0B7A FD 42 2F 39   mov [__pos], b
1173   0B7E             _for19_cond:
1174   0B7E 29 2F 39      mov b, [__pos] ; pos
1175   0B81 D7            push a
1176   0B82 11            mov a, b
1177   0B83 29 57 38      mov b, [__datumpos] ; datumpos
1178   0B86 D7            push a
1179   0B87 11            mov a, b
1180   0B88 26 06 00      mov b, 6
1181   0B8B AC            mul a, b
1182   0B8C E4            pop a
1183   0B8D D7            push a
1184   0B8E 11            mov a, b
1185   0B8F 26 06 00      mov b, 6
1186   0B92 54            add a, b
1187   0B93 27            mov b, a
1188   0B94 E4            pop a
1189   0B95 B0            cmp a, b
1190   0B96 0E            lodflgs
1191   0B97 87 02         and al, %00000010 ; <
1192   0B99 FD 9C         shr al
1193   0B9B 22 00         mov ah, 0
1194   0B9D 27            mov b, a
1195   0B9E E4            pop a
1196   0B9F C0 00 00      cmp b, 0
1197   0BA2 C6 2B 0C      je _for19_exit
1198   0BA5             _for19_block:
1199   0BA5 29 55 38      mov b, [__datum] ; datum
1200   0BA8 D7            push a
1201   0BA9 74            mov d, b
1202   0BAA DA            push d
1203   0BAB 29 2F 39      mov b, [__pos] ; pos
1204   0BAE E7            pop d
1205   0BAF 10 02 00      mov a, 2
1206   0BB2 AC            mul a, b
1207   0BB3 5A            add d, b
1208   0BB4 E4            pop a
1209   0BB5 DA            push d
1210   0BB6 29 D9 38      mov b, [__cnarr] ; cnarr
1211   0BB9 D7            push a
1212   0BBA 74            mov d, b
1213   0BBB DA            push d
1214   0BBC 29 2F 39      mov b, [__pos] ; pos
1215   0BBF D7            push a
1216   0BC0 11            mov a, b
1217   0BC1 29 57 38      mov b, [__datumpos] ; datumpos
1218   0BC4 D7            push a
1219   0BC5 11            mov a, b
1220   0BC6 26 06 00      mov b, 6
1221   0BC9 AC            mul a, b
1222   0BCA E4            pop a
1223   0BCB 60            sub a, b
1224   0BCC 27            mov b, a
1225   0BCD E4            pop a
1226   0BCE D7            push a
1227   0BCF 11            mov a, b
1228   0BD0 26 02 00      mov b, 2
1229   0BD3 AC            mul a, b
1230   0BD4 E4            pop a
1231   0BD5 D7            push a
1232   0BD6 11            mov a, b
1233   0BD7 26 01 00      mov b, 1
1234   0BDA 54            add a, b
1235   0BDB 27            mov b, a
1236   0BDC E4            pop a
1237   0BDD E7            pop d
1238   0BDE 10 02 00      mov a, 2
1239   0BE1 AC            mul a, b
1240   0BE2 5A            add d, b
1241   0BE3 E4            pop a
1242   0BE4 2A            mov b, [d]
1243   0BE5 D7            push a
1244   0BE6 11            mov a, b
1245   0BE7 26 64 00      mov b, 100
1246   0BEA AC            mul a, b
1247   0BEB E4            pop a
1248   0BEC D7            push a
1249   0BED 11            mov a, b
1250   0BEE 29 D9 38      mov b, [__cnarr] ; cnarr
1251   0BF1 D7            push a
1252   0BF2 74            mov d, b
1253   0BF3 DA            push d
1254   0BF4 29 2F 39      mov b, [__pos] ; pos
1255   0BF7 D7            push a
1256   0BF8 11            mov a, b
1257   0BF9 29 57 38      mov b, [__datumpos] ; datumpos
1258   0BFC D7            push a
1259   0BFD 11            mov a, b
1260   0BFE 26 06 00      mov b, 6
1261   0C01 AC            mul a, b
1262   0C02 E4            pop a
1263   0C03 60            sub a, b
1264   0C04 27            mov b, a
1265   0C05 E4            pop a
1266   0C06 D7            push a
1267   0C07 11            mov a, b
1268   0C08 26 02 00      mov b, 2
1269   0C0B AC            mul a, b
1270   0C0C E4            pop a
1271   0C0D E7            pop d
1272   0C0E 10 02 00      mov a, 2
1273   0C11 AC            mul a, b
1274   0C12 5A            add d, b
1275   0C13 E4            pop a
1276   0C14 2A            mov b, [d]
1277   0C15 54            add a, b
1278   0C16 27            mov b, a
1279   0C17 E4            pop a
1280   0C18 E7            pop d
1281   0C19 FD 43         mov [d], b
1282   0C1B             _for19_update:
1283   0C1B 29 2F 39      mov b, [__pos] ; pos
1284   0C1E D7            push a
1285   0C1F 11            mov a, b
1286   0C20 FD 77         inc b
1287   0C22 FD 42 2F 39   mov [__pos], b
1288   0C26 27            mov b, a
1289   0C27 E4            pop a
1290   0C28 0A 7E 0B      jmp _for19_cond
1291   0C2B             _for19_exit:
1292   0C2B             _for20_init:
1293   0C2B 26 12 00      mov b, 18
1294   0C2E FD 42 2F 39   mov [__pos], b
1295   0C32             _for20_cond:
1296   0C32 29 2F 39      mov b, [__pos] ; pos
1297   0C35 D7            push a
1298   0C36 11            mov a, b
1299   0C37 26 0C 00      mov b, 12
1300   0C3A B0            cmp a, b
1301   0C3B 0E            lodflgs
1302   0C3C 87 03         and al, %00000011
1303   0C3E B9 00         cmp al, 0
1304   0C40 0E            lodflgs
1305   0C41 22 00         mov ah, 0
1306   0C43 27            mov b, a
1307   0C44 E4            pop a
1308   0C45 C0 00 00      cmp b, 0
1309   0C48 C6 34 0D      je _for20_exit
1310   0C4B             _for20_block:
1311   0C4B             _if21_cond:
1312   0C4B 29 55 38      mov b, [__datum] ; datum
1313   0C4E D7            push a
1314   0C4F 74            mov d, b
1315   0C50 DA            push d
1316   0C51 29 2F 39      mov b, [__pos] ; pos
1317   0C54 D7            push a
1318   0C55 11            mov a, b
1319   0C56 26 01 00      mov b, 1
1320   0C59 60            sub a, b
1321   0C5A 27            mov b, a
1322   0C5B E4            pop a
1323   0C5C E7            pop d
1324   0C5D 10 02 00      mov a, 2
1325   0C60 AC            mul a, b
1326   0C61 5A            add d, b
1327   0C62 E4            pop a
1328   0C63 2A            mov b, [d]
1329   0C64 D7            push a
1330   0C65 11            mov a, b
1331   0C66 26 E8 03      mov b, 1000
1332   0C69 B0            cmp a, b
1333   0C6A 0E            lodflgs
1334   0C6B 87 02         and al, %00000010 ; <
1335   0C6D FD 9C         shr al
1336   0C6F 22 00         mov ah, 0
1337   0C71 27            mov b, a
1338   0C72 E4            pop a
1339   0C73 C0 00 00      cmp b, 0
1340   0C76 C6 88 0C      je _if21_exit
1341   0C79             _if21_true:
1342   0C79 26 00 00      mov b, 0
1343   0C7C FD AB         swp b
1344   0C7E D8            push b
1345   0C7F 07 73 14      call prnnum
1346   0C82 51 02 00      add sp, 2
1347   0C85 0A 88 0C      jmp _if21_exit
1348   0C88             _if21_exit:
1349   0C88             _if22_cond:
1350   0C88 29 55 38      mov b, [__datum] ; datum
1351   0C8B D7            push a
1352   0C8C 74            mov d, b
1353   0C8D DA            push d
1354   0C8E 29 2F 39      mov b, [__pos] ; pos
1355   0C91 D7            push a
1356   0C92 11            mov a, b
1357   0C93 26 01 00      mov b, 1
1358   0C96 60            sub a, b
1359   0C97 27            mov b, a
1360   0C98 E4            pop a
1361   0C99 E7            pop d
1362   0C9A 10 02 00      mov a, 2
1363   0C9D AC            mul a, b
1364   0C9E 5A            add d, b
1365   0C9F E4            pop a
1366   0CA0 2A            mov b, [d]
1367   0CA1 D7            push a
1368   0CA2 11            mov a, b
1369   0CA3 26 64 00      mov b, 100
1370   0CA6 B0            cmp a, b
1371   0CA7 0E            lodflgs
1372   0CA8 87 02         and al, %00000010 ; <
1373   0CAA FD 9C         shr al
1374   0CAC 22 00         mov ah, 0
1375   0CAE 27            mov b, a
1376   0CAF E4            pop a
1377   0CB0 C0 00 00      cmp b, 0
1378   0CB3 C6 C5 0C      je _if22_exit
1379   0CB6             _if22_true:
1380   0CB6 26 00 00      mov b, 0
1381   0CB9 FD AB         swp b
1382   0CBB D8            push b
1383   0CBC 07 73 14      call prnnum
1384   0CBF 51 02 00      add sp, 2
1385   0CC2 0A C5 0C      jmp _if22_exit
1386   0CC5             _if22_exit:
1387   0CC5             _if23_cond:
1388   0CC5 29 55 38      mov b, [__datum] ; datum
1389   0CC8 D7            push a
1390   0CC9 74            mov d, b
1391   0CCA DA            push d
1392   0CCB 29 2F 39      mov b, [__pos] ; pos
1393   0CCE D7            push a
1394   0CCF 11            mov a, b
1395   0CD0 26 01 00      mov b, 1
1396   0CD3 60            sub a, b
1397   0CD4 27            mov b, a
1398   0CD5 E4            pop a
1399   0CD6 E7            pop d
1400   0CD7 10 02 00      mov a, 2
1401   0CDA AC            mul a, b
1402   0CDB 5A            add d, b
1403   0CDC E4            pop a
1404   0CDD 2A            mov b, [d]
1405   0CDE D7            push a
1406   0CDF 11            mov a, b
1407   0CE0 26 0A 00      mov b, 10
1408   0CE3 B0            cmp a, b
1409   0CE4 0E            lodflgs
1410   0CE5 87 02         and al, %00000010 ; <
1411   0CE7 FD 9C         shr al
1412   0CE9 22 00         mov ah, 0
1413   0CEB 27            mov b, a
1414   0CEC E4            pop a
1415   0CED C0 00 00      cmp b, 0
1416   0CF0 C6 02 0D      je _if23_exit
1417   0CF3             _if23_true:
1418   0CF3 26 00 00      mov b, 0
1419   0CF6 FD AB         swp b
1420   0CF8 D8            push b
1421   0CF9 07 73 14      call prnnum
1422   0CFC 51 02 00      add sp, 2
1423   0CFF 0A 02 0D      jmp _if23_exit
1424   0D02             _if23_exit:
1425   0D02 29 55 38      mov b, [__datum] ; datum
1426   0D05 D7            push a
1427   0D06 74            mov d, b
1428   0D07 DA            push d
1429   0D08 29 2F 39      mov b, [__pos] ; pos
1430   0D0B D7            push a
1431   0D0C 11            mov a, b
1432   0D0D 26 01 00      mov b, 1
1433   0D10 60            sub a, b
1434   0D11 27            mov b, a
1435   0D12 E4            pop a
1436   0D13 E7            pop d
1437   0D14 10 02 00      mov a, 2
1438   0D17 AC            mul a, b
1439   0D18 5A            add d, b
1440   0D19 E4            pop a
1441   0D1A 2A            mov b, [d]
1442   0D1B FD AB         swp b
1443   0D1D D8            push b
1444   0D1E 07 57 14      call prnnumspace
1445   0D21 51 02 00      add sp, 2
1446   0D24             _for20_update:
1447   0D24 29 2F 39      mov b, [__pos] ; pos
1448   0D27 D7            push a
1449   0D28 11            mov a, b
1450   0D29 FD 7D         dec b
1451   0D2B FD 42 2F 39   mov [__pos], b
1452   0D2F 27            mov b, a
1453   0D30 E4            pop a
1454   0D31 0A 32 0C      jmp _for20_cond
1455   0D34             _for20_exit:
1456   0D34 26 6D 39      mov b, __string_0 ; "\n"
1457   0D37 FD AB         swp b
1458   0D39 D8            push b
1459   0D3A 07 3C 14      call print
1460   0D3D 51 02 00      add sp, 2
1461   0D40             _for24_init:
1462   0D40 26 00 00      mov b, 0
1463   0D43 FD 42 2F 39   mov [__pos], b
1464   0D47             _for24_cond:
1465   0D47 29 2F 39      mov b, [__pos] ; pos
1466   0D4A D7            push a
1467   0D4B 11            mov a, b
1468   0D4C 26 0C 00      mov b, 12
1469   0D4F B0            cmp a, b
1470   0D50 0E            lodflgs
1471   0D51 87 02         and al, %00000010 ; <
1472   0D53 FD 9C         shr al
1473   0D55 22 00         mov ah, 0
1474   0D57 27            mov b, a
1475   0D58 E4            pop a
1476   0D59 C0 00 00      cmp b, 0
1477   0D5C C6 B9 0D      je _for24_exit
1478   0D5F             _for24_block:
1479   0D5F 29 71 38      mov b, [__anarr] ; anarr
1480   0D62 D7            push a
1481   0D63 74            mov d, b
1482   0D64 DA            push d
1483   0D65 29 2F 39      mov b, [__pos] ; pos
1484   0D68 E7            pop d
1485   0D69 10 02 00      mov a, 2
1486   0D6C AC            mul a, b
1487   0D6D 5A            add d, b
1488   0D6E E4            pop a
1489   0D6F DA            push d
1490   0D70 29 A5 38      mov b, [__anarrbkp] ; anarrbkp
1491   0D73 D7            push a
1492   0D74 74            mov d, b
1493   0D75 DA            push d
1494   0D76 29 2F 39      mov b, [__pos] ; pos
1495   0D79 E7            pop d
1496   0D7A 10 02 00      mov a, 2
1497   0D7D AC            mul a, b
1498   0D7E 5A            add d, b
1499   0D7F E4            pop a
1500   0D80 2A            mov b, [d]
1501   0D81 E7            pop d
1502   0D82 FD 43         mov [d], b
1503   0D84 29 8B 38      mov b, [__bnarr] ; bnarr
1504   0D87 D7            push a
1505   0D88 74            mov d, b
1506   0D89 DA            push d
1507   0D8A 29 2F 39      mov b, [__pos] ; pos
1508   0D8D E7            pop d
1509   0D8E 10 02 00      mov a, 2
1510   0D91 AC            mul a, b
1511   0D92 5A            add d, b
1512   0D93 E4            pop a
1513   0D94 DA            push d
1514   0D95 29 BF 38      mov b, [__bnarrbkp] ; bnarrbkp
1515   0D98 D7            push a
1516   0D99 74            mov d, b
1517   0D9A DA            push d
1518   0D9B 29 2F 39      mov b, [__pos] ; pos
1519   0D9E E7            pop d
1520   0D9F 10 02 00      mov a, 2
1521   0DA2 AC            mul a, b
1522   0DA3 5A            add d, b
1523   0DA4 E4            pop a
1524   0DA5 2A            mov b, [d]
1525   0DA6 E7            pop d
1526   0DA7 FD 43         mov [d], b
1527   0DA9             _for24_update:
1528   0DA9 29 2F 39      mov b, [__pos] ; pos
1529   0DAC D7            push a
1530   0DAD 11            mov a, b
1531   0DAE FD 77         inc b
1532   0DB0 FD 42 2F 39   mov [__pos], b
1533   0DB4 27            mov b, a
1534   0DB5 E4            pop a
1535   0DB6 0A 47 0D      jmp _for24_cond
1536   0DB9             _for24_exit:
1537   0DB9 07 1A 1F      call minus
1538   0DBC 26 02 00      mov b, 2
1539   0DBF FD 42 57 38   mov [__datumpos], b
1540   0DC3             _for25_init:
1541   0DC3 29 57 38      mov b, [__datumpos] ; datumpos
1542   0DC6 D7            push a
1543   0DC7 11            mov a, b
1544   0DC8 26 06 00      mov b, 6
1545   0DCB AC            mul a, b
1546   0DCC E4            pop a
1547   0DCD FD 42 2F 39   mov [__pos], b
1548   0DD1             _for25_cond:
1549   0DD1 29 2F 39      mov b, [__pos] ; pos
1550   0DD4 D7            push a
1551   0DD5 11            mov a, b
1552   0DD6 29 57 38      mov b, [__datumpos] ; datumpos
1553   0DD9 D7            push a
1554   0DDA 11            mov a, b
1555   0DDB 26 06 00      mov b, 6
1556   0DDE AC            mul a, b
1557   0DDF E4            pop a
1558   0DE0 D7            push a
1559   0DE1 11            mov a, b
1560   0DE2 26 06 00      mov b, 6
1561   0DE5 54            add a, b
1562   0DE6 27            mov b, a
1563   0DE7 E4            pop a
1564   0DE8 B0            cmp a, b
1565   0DE9 0E            lodflgs
1566   0DEA 87 02         and al, %00000010 ; <
1567   0DEC FD 9C         shr al
1568   0DEE 22 00         mov ah, 0
1569   0DF0 27            mov b, a
1570   0DF1 E4            pop a
1571   0DF2 C0 00 00      cmp b, 0
1572   0DF5 C6 7E 0E      je _for25_exit
1573   0DF8             _for25_block:
1574   0DF8 29 55 38      mov b, [__datum] ; datum
1575   0DFB D7            push a
1576   0DFC 74            mov d, b
1577   0DFD DA            push d
1578   0DFE 29 2F 39      mov b, [__pos] ; pos
1579   0E01 E7            pop d
1580   0E02 10 02 00      mov a, 2
1581   0E05 AC            mul a, b
1582   0E06 5A            add d, b
1583   0E07 E4            pop a
1584   0E08 DA            push d
1585   0E09 29 D9 38      mov b, [__cnarr] ; cnarr
1586   0E0C D7            push a
1587   0E0D 74            mov d, b
1588   0E0E DA            push d
1589   0E0F 29 2F 39      mov b, [__pos] ; pos
1590   0E12 D7            push a
1591   0E13 11            mov a, b
1592   0E14 29 57 38      mov b, [__datumpos] ; datumpos
1593   0E17 D7            push a
1594   0E18 11            mov a, b
1595   0E19 26 06 00      mov b, 6
1596   0E1C AC            mul a, b
1597   0E1D E4            pop a
1598   0E1E 60            sub a, b
1599   0E1F 27            mov b, a
1600   0E20 E4            pop a
1601   0E21 D7            push a
1602   0E22 11            mov a, b
1603   0E23 26 02 00      mov b, 2
1604   0E26 AC            mul a, b
1605   0E27 E4            pop a
1606   0E28 D7            push a
1607   0E29 11            mov a, b
1608   0E2A 26 01 00      mov b, 1
1609   0E2D 54            add a, b
1610   0E2E 27            mov b, a
1611   0E2F E4            pop a
1612   0E30 E7            pop d
1613   0E31 10 02 00      mov a, 2
1614   0E34 AC            mul a, b
1615   0E35 5A            add d, b
1616   0E36 E4            pop a
1617   0E37 2A            mov b, [d]
1618   0E38 D7            push a
1619   0E39 11            mov a, b
1620   0E3A 26 64 00      mov b, 100
1621   0E3D AC            mul a, b
1622   0E3E E4            pop a
1623   0E3F D7            push a
1624   0E40 11            mov a, b
1625   0E41 29 D9 38      mov b, [__cnarr] ; cnarr
1626   0E44 D7            push a
1627   0E45 74            mov d, b
1628   0E46 DA            push d
1629   0E47 29 2F 39      mov b, [__pos] ; pos
1630   0E4A D7            push a
1631   0E4B 11            mov a, b
1632   0E4C 29 57 38      mov b, [__datumpos] ; datumpos
1633   0E4F D7            push a
1634   0E50 11            mov a, b
1635   0E51 26 06 00      mov b, 6
1636   0E54 AC            mul a, b
1637   0E55 E4            pop a
1638   0E56 60            sub a, b
1639   0E57 27            mov b, a
1640   0E58 E4            pop a
1641   0E59 D7            push a
1642   0E5A 11            mov a, b
1643   0E5B 26 02 00      mov b, 2
1644   0E5E AC            mul a, b
1645   0E5F E4            pop a
1646   0E60 E7            pop d
1647   0E61 10 02 00      mov a, 2
1648   0E64 AC            mul a, b
1649   0E65 5A            add d, b
1650   0E66 E4            pop a
1651   0E67 2A            mov b, [d]
1652   0E68 54            add a, b
1653   0E69 27            mov b, a
1654   0E6A E4            pop a
1655   0E6B E7            pop d
1656   0E6C FD 43         mov [d], b
1657   0E6E             _for25_update:
1658   0E6E 29 2F 39      mov b, [__pos] ; pos
1659   0E71 D7            push a
1660   0E72 11            mov a, b
1661   0E73 FD 77         inc b
1662   0E75 FD 42 2F 39   mov [__pos], b
1663   0E79 27            mov b, a
1664   0E7A E4            pop a
1665   0E7B 0A D1 0D      jmp _for25_cond
1666   0E7E             _for25_exit:
1667   0E7E             _for26_init:
1668   0E7E 26 12 00      mov b, 18
1669   0E81 FD 42 2F 39   mov [__pos], b
1670   0E85             _for26_cond:
1671   0E85 29 2F 39      mov b, [__pos] ; pos
1672   0E88 D7            push a
1673   0E89 11            mov a, b
1674   0E8A 26 0C 00      mov b, 12
1675   0E8D B0            cmp a, b
1676   0E8E 0E            lodflgs
1677   0E8F 87 03         and al, %00000011
1678   0E91 B9 00         cmp al, 0
1679   0E93 0E            lodflgs
1680   0E94 22 00         mov ah, 0
1681   0E96 27            mov b, a
1682   0E97 E4            pop a
1683   0E98 C0 00 00      cmp b, 0
1684   0E9B C6 87 0F      je _for26_exit
1685   0E9E             _for26_block:
1686   0E9E             _if27_cond:
1687   0E9E 29 55 38      mov b, [__datum] ; datum
1688   0EA1 D7            push a
1689   0EA2 74            mov d, b
1690   0EA3 DA            push d
1691   0EA4 29 2F 39      mov b, [__pos] ; pos
1692   0EA7 D7            push a
1693   0EA8 11            mov a, b
1694   0EA9 26 01 00      mov b, 1
1695   0EAC 60            sub a, b
1696   0EAD 27            mov b, a
1697   0EAE E4            pop a
1698   0EAF E7            pop d
1699   0EB0 10 02 00      mov a, 2
1700   0EB3 AC            mul a, b
1701   0EB4 5A            add d, b
1702   0EB5 E4            pop a
1703   0EB6 2A            mov b, [d]
1704   0EB7 D7            push a
1705   0EB8 11            mov a, b
1706   0EB9 26 E8 03      mov b, 1000
1707   0EBC B0            cmp a, b
1708   0EBD 0E            lodflgs
1709   0EBE 87 02         and al, %00000010 ; <
1710   0EC0 FD 9C         shr al
1711   0EC2 22 00         mov ah, 0
1712   0EC4 27            mov b, a
1713   0EC5 E4            pop a
1714   0EC6 C0 00 00      cmp b, 0
1715   0EC9 C6 DB 0E      je _if27_exit
1716   0ECC             _if27_true:
1717   0ECC 26 00 00      mov b, 0
1718   0ECF FD AB         swp b
1719   0ED1 D8            push b
1720   0ED2 07 73 14      call prnnum
1721   0ED5 51 02 00      add sp, 2
1722   0ED8 0A DB 0E      jmp _if27_exit
1723   0EDB             _if27_exit:
1724   0EDB             _if28_cond:
1725   0EDB 29 55 38      mov b, [__datum] ; datum
1726   0EDE D7            push a
1727   0EDF 74            mov d, b
1728   0EE0 DA            push d
1729   0EE1 29 2F 39      mov b, [__pos] ; pos
1730   0EE4 D7            push a
1731   0EE5 11            mov a, b
1732   0EE6 26 01 00      mov b, 1
1733   0EE9 60            sub a, b
1734   0EEA 27            mov b, a
1735   0EEB E4            pop a
1736   0EEC E7            pop d
1737   0EED 10 02 00      mov a, 2
1738   0EF0 AC            mul a, b
1739   0EF1 5A            add d, b
1740   0EF2 E4            pop a
1741   0EF3 2A            mov b, [d]
1742   0EF4 D7            push a
1743   0EF5 11            mov a, b
1744   0EF6 26 64 00      mov b, 100
1745   0EF9 B0            cmp a, b
1746   0EFA 0E            lodflgs
1747   0EFB 87 02         and al, %00000010 ; <
1748   0EFD FD 9C         shr al
1749   0EFF 22 00         mov ah, 0
1750   0F01 27            mov b, a
1751   0F02 E4            pop a
1752   0F03 C0 00 00      cmp b, 0
1753   0F06 C6 18 0F      je _if28_exit
1754   0F09             _if28_true:
1755   0F09 26 00 00      mov b, 0
1756   0F0C FD AB         swp b
1757   0F0E D8            push b
1758   0F0F 07 73 14      call prnnum
1759   0F12 51 02 00      add sp, 2
1760   0F15 0A 18 0F      jmp _if28_exit
1761   0F18             _if28_exit:
1762   0F18             _if29_cond:
1763   0F18 29 55 38      mov b, [__datum] ; datum
1764   0F1B D7            push a
1765   0F1C 74            mov d, b
1766   0F1D DA            push d
1767   0F1E 29 2F 39      mov b, [__pos] ; pos
1768   0F21 D7            push a
1769   0F22 11            mov a, b
1770   0F23 26 01 00      mov b, 1
1771   0F26 60            sub a, b
1772   0F27 27            mov b, a
1773   0F28 E4            pop a
1774   0F29 E7            pop d
1775   0F2A 10 02 00      mov a, 2
1776   0F2D AC            mul a, b
1777   0F2E 5A            add d, b
1778   0F2F E4            pop a
1779   0F30 2A            mov b, [d]
1780   0F31 D7            push a
1781   0F32 11            mov a, b
1782   0F33 26 0A 00      mov b, 10
1783   0F36 B0            cmp a, b
1784   0F37 0E            lodflgs
1785   0F38 87 02         and al, %00000010 ; <
1786   0F3A FD 9C         shr al
1787   0F3C 22 00         mov ah, 0
1788   0F3E 27            mov b, a
1789   0F3F E4            pop a
1790   0F40 C0 00 00      cmp b, 0
1791   0F43 C6 55 0F      je _if29_exit
1792   0F46             _if29_true:
1793   0F46 26 00 00      mov b, 0
1794   0F49 FD AB         swp b
1795   0F4B D8            push b
1796   0F4C 07 73 14      call prnnum
1797   0F4F 51 02 00      add sp, 2
1798   0F52 0A 55 0F      jmp _if29_exit
1799   0F55             _if29_exit:
1800   0F55 29 55 38      mov b, [__datum] ; datum
1801   0F58 D7            push a
1802   0F59 74            mov d, b
1803   0F5A DA            push d
1804   0F5B 29 2F 39      mov b, [__pos] ; pos
1805   0F5E D7            push a
1806   0F5F 11            mov a, b
1807   0F60 26 01 00      mov b, 1
1808   0F63 60            sub a, b
1809   0F64 27            mov b, a
1810   0F65 E4            pop a
1811   0F66 E7            pop d
1812   0F67 10 02 00      mov a, 2
1813   0F6A AC            mul a, b
1814   0F6B 5A            add d, b
1815   0F6C E4            pop a
1816   0F6D 2A            mov b, [d]
1817   0F6E FD AB         swp b
1818   0F70 D8            push b
1819   0F71 07 57 14      call prnnumspace
1820   0F74 51 02 00      add sp, 2
1821   0F77             _for26_update:
1822   0F77 29 2F 39      mov b, [__pos] ; pos
1823   0F7A D7            push a
1824   0F7B 11            mov a, b
1825   0F7C FD 7D         dec b
1826   0F7E FD 42 2F 39   mov [__pos], b
1827   0F82 27            mov b, a
1828   0F83 E4            pop a
1829   0F84 0A 85 0E      jmp _for26_cond
1830   0F87             _for26_exit:
1831   0F87 26 6D 39      mov b, __string_0 ; "\n"
1832   0F8A FD AB         swp b
1833   0F8C D8            push b
1834   0F8D 07 3C 14      call print
1835   0F90 51 02 00      add sp, 2
1836   0F93             _for30_init:
1837   0F93 26 00 00      mov b, 0
1838   0F96 FD 42 2F 39   mov [__pos], b
1839   0F9A             _for30_cond:
1840   0F9A 29 2F 39      mov b, [__pos] ; pos
1841   0F9D D7            push a
1842   0F9E 11            mov a, b
1843   0F9F 26 0C 00      mov b, 12
1844   0FA2 B0            cmp a, b
1845   0FA3 0E            lodflgs
1846   0FA4 87 02         and al, %00000010 ; <
1847   0FA6 FD 9C         shr al
1848   0FA8 22 00         mov ah, 0
1849   0FAA 27            mov b, a
1850   0FAB E4            pop a
1851   0FAC C0 00 00      cmp b, 0
1852   0FAF C6 0C 10      je _for30_exit
1853   0FB2             _for30_block:
1854   0FB2 29 71 38      mov b, [__anarr] ; anarr
1855   0FB5 D7            push a
1856   0FB6 74            mov d, b
1857   0FB7 DA            push d
1858   0FB8 29 2F 39      mov b, [__pos] ; pos
1859   0FBB E7            pop d
1860   0FBC 10 02 00      mov a, 2
1861   0FBF AC            mul a, b
1862   0FC0 5A            add d, b
1863   0FC1 E4            pop a
1864   0FC2 DA            push d
1865   0FC3 29 A5 38      mov b, [__anarrbkp] ; anarrbkp
1866   0FC6 D7            push a
1867   0FC7 74            mov d, b
1868   0FC8 DA            push d
1869   0FC9 29 2F 39      mov b, [__pos] ; pos
1870   0FCC E7            pop d
1871   0FCD 10 02 00      mov a, 2
1872   0FD0 AC            mul a, b
1873   0FD1 5A            add d, b
1874   0FD2 E4            pop a
1875   0FD3 2A            mov b, [d]
1876   0FD4 E7            pop d
1877   0FD5 FD 43         mov [d], b
1878   0FD7 29 8B 38      mov b, [__bnarr] ; bnarr
1879   0FDA D7            push a
1880   0FDB 74            mov d, b
1881   0FDC DA            push d
1882   0FDD 29 2F 39      mov b, [__pos] ; pos
1883   0FE0 E7            pop d
1884   0FE1 10 02 00      mov a, 2
1885   0FE4 AC            mul a, b
1886   0FE5 5A            add d, b
1887   0FE6 E4            pop a
1888   0FE7 DA            push d
1889   0FE8 29 BF 38      mov b, [__bnarrbkp] ; bnarrbkp
1890   0FEB D7            push a
1891   0FEC 74            mov d, b
1892   0FED DA            push d
1893   0FEE 29 2F 39      mov b, [__pos] ; pos
1894   0FF1 E7            pop d
1895   0FF2 10 02 00      mov a, 2
1896   0FF5 AC            mul a, b
1897   0FF6 5A            add d, b
1898   0FF7 E4            pop a
1899   0FF8 2A            mov b, [d]
1900   0FF9 E7            pop d
1901   0FFA FD 43         mov [d], b
1902   0FFC             _for30_update:
1903   0FFC 29 2F 39      mov b, [__pos] ; pos
1904   0FFF D7            push a
1905   1000 11            mov a, b
1906   1001 FD 77         inc b
1907   1003 FD 42 2F 39   mov [__pos], b
1908   1007 27            mov b, a
1909   1008 E4            pop a
1910   1009 0A 9A 0F      jmp _for30_cond
1911   100C             _for30_exit:
1912   100C 07 6C 34      call times
1913   100F 26 02 00      mov b, 2
1914   1012 FD 42 57 38   mov [__datumpos], b
1915   1016             _for31_init:
1916   1016 29 57 38      mov b, [__datumpos] ; datumpos
1917   1019 D7            push a
1918   101A 11            mov a, b
1919   101B 26 06 00      mov b, 6
1920   101E AC            mul a, b
1921   101F E4            pop a
1922   1020 FD 42 2F 39   mov [__pos], b
1923   1024             _for31_cond:
1924   1024 29 2F 39      mov b, [__pos] ; pos
1925   1027 D7            push a
1926   1028 11            mov a, b
1927   1029 29 57 38      mov b, [__datumpos] ; datumpos
1928   102C D7            push a
1929   102D 11            mov a, b
1930   102E 26 06 00      mov b, 6
1931   1031 AC            mul a, b
1932   1032 E4            pop a
1933   1033 D7            push a
1934   1034 11            mov a, b
1935   1035 26 06 00      mov b, 6
1936   1038 54            add a, b
1937   1039 27            mov b, a
1938   103A E4            pop a
1939   103B B0            cmp a, b
1940   103C 0E            lodflgs
1941   103D 87 02         and al, %00000010 ; <
1942   103F FD 9C         shr al
1943   1041 22 00         mov ah, 0
1944   1043 27            mov b, a
1945   1044 E4            pop a
1946   1045 C0 00 00      cmp b, 0
1947   1048 C6 D1 10      je _for31_exit
1948   104B             _for31_block:
1949   104B 29 55 38      mov b, [__datum] ; datum
1950   104E D7            push a
1951   104F 74            mov d, b
1952   1050 DA            push d
1953   1051 29 2F 39      mov b, [__pos] ; pos
1954   1054 E7            pop d
1955   1055 10 02 00      mov a, 2
1956   1058 AC            mul a, b
1957   1059 5A            add d, b
1958   105A E4            pop a
1959   105B DA            push d
1960   105C 29 D9 38      mov b, [__cnarr] ; cnarr
1961   105F D7            push a
1962   1060 74            mov d, b
1963   1061 DA            push d
1964   1062 29 2F 39      mov b, [__pos] ; pos
1965   1065 D7            push a
1966   1066 11            mov a, b
1967   1067 29 57 38      mov b, [__datumpos] ; datumpos
1968   106A D7            push a
1969   106B 11            mov a, b
1970   106C 26 06 00      mov b, 6
1971   106F AC            mul a, b
1972   1070 E4            pop a
1973   1071 60            sub a, b
1974   1072 27            mov b, a
1975   1073 E4            pop a
1976   1074 D7            push a
1977   1075 11            mov a, b
1978   1076 26 02 00      mov b, 2
1979   1079 AC            mul a, b
1980   107A E4            pop a
1981   107B D7            push a
1982   107C 11            mov a, b
1983   107D 26 01 00      mov b, 1
1984   1080 54            add a, b
1985   1081 27            mov b, a
1986   1082 E4            pop a
1987   1083 E7            pop d
1988   1084 10 02 00      mov a, 2
1989   1087 AC            mul a, b
1990   1088 5A            add d, b
1991   1089 E4            pop a
1992   108A 2A            mov b, [d]
1993   108B D7            push a
1994   108C 11            mov a, b
1995   108D 26 64 00      mov b, 100
1996   1090 AC            mul a, b
1997   1091 E4            pop a
1998   1092 D7            push a
1999   1093 11            mov a, b
2000   1094 29 D9 38      mov b, [__cnarr] ; cnarr
2001   1097 D7            push a
2002   1098 74            mov d, b
2003   1099 DA            push d
2004   109A 29 2F 39      mov b, [__pos] ; pos
2005   109D D7            push a
2006   109E 11            mov a, b
2007   109F 29 57 38      mov b, [__datumpos] ; datumpos
2008   10A2 D7            push a
2009   10A3 11            mov a, b
2010   10A4 26 06 00      mov b, 6
2011   10A7 AC            mul a, b
2012   10A8 E4            pop a
2013   10A9 60            sub a, b
2014   10AA 27            mov b, a
2015   10AB E4            pop a
2016   10AC D7            push a
2017   10AD 11            mov a, b
2018   10AE 26 02 00      mov b, 2
2019   10B1 AC            mul a, b
2020   10B2 E4            pop a
2021   10B3 E7            pop d
2022   10B4 10 02 00      mov a, 2
2023   10B7 AC            mul a, b
2024   10B8 5A            add d, b
2025   10B9 E4            pop a
2026   10BA 2A            mov b, [d]
2027   10BB 54            add a, b
2028   10BC 27            mov b, a
2029   10BD E4            pop a
2030   10BE E7            pop d
2031   10BF FD 43         mov [d], b
2032   10C1             _for31_update:
2033   10C1 29 2F 39      mov b, [__pos] ; pos
2034   10C4 D7            push a
2035   10C5 11            mov a, b
2036   10C6 FD 77         inc b
2037   10C8 FD 42 2F 39   mov [__pos], b
2038   10CC 27            mov b, a
2039   10CD E4            pop a
2040   10CE 0A 24 10      jmp _for31_cond
2041   10D1             _for31_exit:
2042   10D1             _for32_init:
2043   10D1 26 12 00      mov b, 18
2044   10D4 FD 42 2F 39   mov [__pos], b
2045   10D8             _for32_cond:
2046   10D8 29 2F 39      mov b, [__pos] ; pos
2047   10DB D7            push a
2048   10DC 11            mov a, b
2049   10DD 26 0C 00      mov b, 12
2050   10E0 B0            cmp a, b
2051   10E1 0E            lodflgs
2052   10E2 87 03         and al, %00000011
2053   10E4 B9 00         cmp al, 0
2054   10E6 0E            lodflgs
2055   10E7 22 00         mov ah, 0
2056   10E9 27            mov b, a
2057   10EA E4            pop a
2058   10EB C0 00 00      cmp b, 0
2059   10EE C6 DA 11      je _for32_exit
2060   10F1             _for32_block:
2061   10F1             _if33_cond:
2062   10F1 29 55 38      mov b, [__datum] ; datum
2063   10F4 D7            push a
2064   10F5 74            mov d, b
2065   10F6 DA            push d
2066   10F7 29 2F 39      mov b, [__pos] ; pos
2067   10FA D7            push a
2068   10FB 11            mov a, b
2069   10FC 26 01 00      mov b, 1
2070   10FF 60            sub a, b
2071   1100 27            mov b, a
2072   1101 E4            pop a
2073   1102 E7            pop d
2074   1103 10 02 00      mov a, 2
2075   1106 AC            mul a, b
2076   1107 5A            add d, b
2077   1108 E4            pop a
2078   1109 2A            mov b, [d]
2079   110A D7            push a
2080   110B 11            mov a, b
2081   110C 26 E8 03      mov b, 1000
2082   110F B0            cmp a, b
2083   1110 0E            lodflgs
2084   1111 87 02         and al, %00000010 ; <
2085   1113 FD 9C         shr al
2086   1115 22 00         mov ah, 0
2087   1117 27            mov b, a
2088   1118 E4            pop a
2089   1119 C0 00 00      cmp b, 0
2090   111C C6 2E 11      je _if33_exit
2091   111F             _if33_true:
2092   111F 26 00 00      mov b, 0
2093   1122 FD AB         swp b
2094   1124 D8            push b
2095   1125 07 73 14      call prnnum
2096   1128 51 02 00      add sp, 2
2097   112B 0A 2E 11      jmp _if33_exit
2098   112E             _if33_exit:
2099   112E             _if34_cond:
2100   112E 29 55 38      mov b, [__datum] ; datum
2101   1131 D7            push a
2102   1132 74            mov d, b
2103   1133 DA            push d
2104   1134 29 2F 39      mov b, [__pos] ; pos
2105   1137 D7            push a
2106   1138 11            mov a, b
2107   1139 26 01 00      mov b, 1
2108   113C 60            sub a, b
2109   113D 27            mov b, a
2110   113E E4            pop a
2111   113F E7            pop d
2112   1140 10 02 00      mov a, 2
2113   1143 AC            mul a, b
2114   1144 5A            add d, b
2115   1145 E4            pop a
2116   1146 2A            mov b, [d]
2117   1147 D7            push a
2118   1148 11            mov a, b
2119   1149 26 64 00      mov b, 100
2120   114C B0            cmp a, b
2121   114D 0E            lodflgs
2122   114E 87 02         and al, %00000010 ; <
2123   1150 FD 9C         shr al
2124   1152 22 00         mov ah, 0
2125   1154 27            mov b, a
2126   1155 E4            pop a
2127   1156 C0 00 00      cmp b, 0
2128   1159 C6 6B 11      je _if34_exit
2129   115C             _if34_true:
2130   115C 26 00 00      mov b, 0
2131   115F FD AB         swp b
2132   1161 D8            push b
2133   1162 07 73 14      call prnnum
2134   1165 51 02 00      add sp, 2
2135   1168 0A 6B 11      jmp _if34_exit
2136   116B             _if34_exit:
2137   116B             _if35_cond:
2138   116B 29 55 38      mov b, [__datum] ; datum
2139   116E D7            push a
2140   116F 74            mov d, b
2141   1170 DA            push d
2142   1171 29 2F 39      mov b, [__pos] ; pos
2143   1174 D7            push a
2144   1175 11            mov a, b
2145   1176 26 01 00      mov b, 1
2146   1179 60            sub a, b
2147   117A 27            mov b, a
2148   117B E4            pop a
2149   117C E7            pop d
2150   117D 10 02 00      mov a, 2
2151   1180 AC            mul a, b
2152   1181 5A            add d, b
2153   1182 E4            pop a
2154   1183 2A            mov b, [d]
2155   1184 D7            push a
2156   1185 11            mov a, b
2157   1186 26 0A 00      mov b, 10
2158   1189 B0            cmp a, b
2159   118A 0E            lodflgs
2160   118B 87 02         and al, %00000010 ; <
2161   118D FD 9C         shr al
2162   118F 22 00         mov ah, 0
2163   1191 27            mov b, a
2164   1192 E4            pop a
2165   1193 C0 00 00      cmp b, 0
2166   1196 C6 A8 11      je _if35_exit
2167   1199             _if35_true:
2168   1199 26 00 00      mov b, 0
2169   119C FD AB         swp b
2170   119E D8            push b
2171   119F 07 73 14      call prnnum
2172   11A2 51 02 00      add sp, 2
2173   11A5 0A A8 11      jmp _if35_exit
2174   11A8             _if35_exit:
2175   11A8 29 55 38      mov b, [__datum] ; datum
2176   11AB D7            push a
2177   11AC 74            mov d, b
2178   11AD DA            push d
2179   11AE 29 2F 39      mov b, [__pos] ; pos
2180   11B1 D7            push a
2181   11B2 11            mov a, b
2182   11B3 26 01 00      mov b, 1
2183   11B6 60            sub a, b
2184   11B7 27            mov b, a
2185   11B8 E4            pop a
2186   11B9 E7            pop d
2187   11BA 10 02 00      mov a, 2
2188   11BD AC            mul a, b
2189   11BE 5A            add d, b
2190   11BF E4            pop a
2191   11C0 2A            mov b, [d]
2192   11C1 FD AB         swp b
2193   11C3 D8            push b
2194   11C4 07 57 14      call prnnumspace
2195   11C7 51 02 00      add sp, 2
2196   11CA             _for32_update:
2197   11CA 29 2F 39      mov b, [__pos] ; pos
2198   11CD D7            push a
2199   11CE 11            mov a, b
2200   11CF FD 7D         dec b
2201   11D1 FD 42 2F 39   mov [__pos], b
2202   11D5 27            mov b, a
2203   11D6 E4            pop a
2204   11D7 0A D8 10      jmp _for32_cond
2205   11DA             _for32_exit:
2206   11DA 26 6D 39      mov b, __string_0 ; "\n"
2207   11DD FD AB         swp b
2208   11DF D8            push b
2209   11E0 07 3C 14      call print
2210   11E3 51 02 00      add sp, 2
2211   11E6             _for36_init:
2212   11E6 26 00 00      mov b, 0
2213   11E9 FD 42 2F 39   mov [__pos], b
2214   11ED             _for36_cond:
2215   11ED 29 2F 39      mov b, [__pos] ; pos
2216   11F0 D7            push a
2217   11F1 11            mov a, b
2218   11F2 26 0C 00      mov b, 12
2219   11F5 B0            cmp a, b
2220   11F6 0E            lodflgs
2221   11F7 87 02         and al, %00000010 ; <
2222   11F9 FD 9C         shr al
2223   11FB 22 00         mov ah, 0
2224   11FD 27            mov b, a
2225   11FE E4            pop a
2226   11FF C0 00 00      cmp b, 0
2227   1202 C6 5F 12      je _for36_exit
2228   1205             _for36_block:
2229   1205 29 71 38      mov b, [__anarr] ; anarr
2230   1208 D7            push a
2231   1209 74            mov d, b
2232   120A DA            push d
2233   120B 29 2F 39      mov b, [__pos] ; pos
2234   120E E7            pop d
2235   120F 10 02 00      mov a, 2
2236   1212 AC            mul a, b
2237   1213 5A            add d, b
2238   1214 E4            pop a
2239   1215 DA            push d
2240   1216 29 A5 38      mov b, [__anarrbkp] ; anarrbkp
2241   1219 D7            push a
2242   121A 74            mov d, b
2243   121B DA            push d
2244   121C 29 2F 39      mov b, [__pos] ; pos
2245   121F E7            pop d
2246   1220 10 02 00      mov a, 2
2247   1223 AC            mul a, b
2248   1224 5A            add d, b
2249   1225 E4            pop a
2250   1226 2A            mov b, [d]
2251   1227 E7            pop d
2252   1228 FD 43         mov [d], b
2253   122A 29 8B 38      mov b, [__bnarr] ; bnarr
2254   122D D7            push a
2255   122E 74            mov d, b
2256   122F DA            push d
2257   1230 29 2F 39      mov b, [__pos] ; pos
2258   1233 E7            pop d
2259   1234 10 02 00      mov a, 2
2260   1237 AC            mul a, b
2261   1238 5A            add d, b
2262   1239 E4            pop a
2263   123A DA            push d
2264   123B 29 BF 38      mov b, [__bnarrbkp] ; bnarrbkp
2265   123E D7            push a
2266   123F 74            mov d, b
2267   1240 DA            push d
2268   1241 29 2F 39      mov b, [__pos] ; pos
2269   1244 E7            pop d
2270   1245 10 02 00      mov a, 2
2271   1248 AC            mul a, b
2272   1249 5A            add d, b
2273   124A E4            pop a
2274   124B 2A            mov b, [d]
2275   124C E7            pop d
2276   124D FD 43         mov [d], b
2277   124F             _for36_update:
2278   124F 29 2F 39      mov b, [__pos] ; pos
2279   1252 D7            push a
2280   1253 11            mov a, b
2281   1254 FD 77         inc b
2282   1256 FD 42 2F 39   mov [__pos], b
2283   125A 27            mov b, a
2284   125B E4            pop a
2285   125C 0A ED 11      jmp _for36_cond
2286   125F             _for36_exit:
2287   125F 07 FE 35      call dividedby
2288   1262 26 02 00      mov b, 2
2289   1265 FD 42 57 38   mov [__datumpos], b
2290   1269             _for37_init:
2291   1269 29 57 38      mov b, [__datumpos] ; datumpos
2292   126C D7            push a
2293   126D 11            mov a, b
2294   126E 26 06 00      mov b, 6
2295   1271 AC            mul a, b
2296   1272 E4            pop a
2297   1273 FD 42 2F 39   mov [__pos], b
2298   1277             _for37_cond:
2299   1277 29 2F 39      mov b, [__pos] ; pos
2300   127A D7            push a
2301   127B 11            mov a, b
2302   127C 29 57 38      mov b, [__datumpos] ; datumpos
2303   127F D7            push a
2304   1280 11            mov a, b
2305   1281 26 06 00      mov b, 6
2306   1284 AC            mul a, b
2307   1285 E4            pop a
2308   1286 D7            push a
2309   1287 11            mov a, b
2310   1288 26 06 00      mov b, 6
2311   128B 54            add a, b
2312   128C 27            mov b, a
2313   128D E4            pop a
2314   128E B0            cmp a, b
2315   128F 0E            lodflgs
2316   1290 87 02         and al, %00000010 ; <
2317   1292 FD 9C         shr al
2318   1294 22 00         mov ah, 0
2319   1296 27            mov b, a
2320   1297 E4            pop a
2321   1298 C0 00 00      cmp b, 0
2322   129B C6 24 13      je _for37_exit
2323   129E             _for37_block:
2324   129E 29 55 38      mov b, [__datum] ; datum
2325   12A1 D7            push a
2326   12A2 74            mov d, b
2327   12A3 DA            push d
2328   12A4 29 2F 39      mov b, [__pos] ; pos
2329   12A7 E7            pop d
2330   12A8 10 02 00      mov a, 2
2331   12AB AC            mul a, b
2332   12AC 5A            add d, b
2333   12AD E4            pop a
2334   12AE DA            push d
2335   12AF 29 D9 38      mov b, [__cnarr] ; cnarr
2336   12B2 D7            push a
2337   12B3 74            mov d, b
2338   12B4 DA            push d
2339   12B5 29 2F 39      mov b, [__pos] ; pos
2340   12B8 D7            push a
2341   12B9 11            mov a, b
2342   12BA 29 57 38      mov b, [__datumpos] ; datumpos
2343   12BD D7            push a
2344   12BE 11            mov a, b
2345   12BF 26 06 00      mov b, 6
2346   12C2 AC            mul a, b
2347   12C3 E4            pop a
2348   12C4 60            sub a, b
2349   12C5 27            mov b, a
2350   12C6 E4            pop a
2351   12C7 D7            push a
2352   12C8 11            mov a, b
2353   12C9 26 02 00      mov b, 2
2354   12CC AC            mul a, b
2355   12CD E4            pop a
2356   12CE D7            push a
2357   12CF 11            mov a, b
2358   12D0 26 01 00      mov b, 1
2359   12D3 54            add a, b
2360   12D4 27            mov b, a
2361   12D5 E4            pop a
2362   12D6 E7            pop d
2363   12D7 10 02 00      mov a, 2
2364   12DA AC            mul a, b
2365   12DB 5A            add d, b
2366   12DC E4            pop a
2367   12DD 2A            mov b, [d]
2368   12DE D7            push a
2369   12DF 11            mov a, b
2370   12E0 26 64 00      mov b, 100
2371   12E3 AC            mul a, b
2372   12E4 E4            pop a
2373   12E5 D7            push a
2374   12E6 11            mov a, b
2375   12E7 29 D9 38      mov b, [__cnarr] ; cnarr
2376   12EA D7            push a
2377   12EB 74            mov d, b
2378   12EC DA            push d
2379   12ED 29 2F 39      mov b, [__pos] ; pos
2380   12F0 D7            push a
2381   12F1 11            mov a, b
2382   12F2 29 57 38      mov b, [__datumpos] ; datumpos
2383   12F5 D7            push a
2384   12F6 11            mov a, b
2385   12F7 26 06 00      mov b, 6
2386   12FA AC            mul a, b
2387   12FB E4            pop a
2388   12FC 60            sub a, b
2389   12FD 27            mov b, a
2390   12FE E4            pop a
2391   12FF D7            push a
2392   1300 11            mov a, b
2393   1301 26 02 00      mov b, 2
2394   1304 AC            mul a, b
2395   1305 E4            pop a
2396   1306 E7            pop d
2397   1307 10 02 00      mov a, 2
2398   130A AC            mul a, b
2399   130B 5A            add d, b
2400   130C E4            pop a
2401   130D 2A            mov b, [d]
2402   130E 54            add a, b
2403   130F 27            mov b, a
2404   1310 E4            pop a
2405   1311 E7            pop d
2406   1312 FD 43         mov [d], b
2407   1314             _for37_update:
2408   1314 29 2F 39      mov b, [__pos] ; pos
2409   1317 D7            push a
2410   1318 11            mov a, b
2411   1319 FD 77         inc b
2412   131B FD 42 2F 39   mov [__pos], b
2413   131F 27            mov b, a
2414   1320 E4            pop a
2415   1321 0A 77 12      jmp _for37_cond
2416   1324             _for37_exit:
2417   1324             _for38_init:
2418   1324 26 12 00      mov b, 18
2419   1327 FD 42 2F 39   mov [__pos], b
2420   132B             _for38_cond:
2421   132B 29 2F 39      mov b, [__pos] ; pos
2422   132E D7            push a
2423   132F 11            mov a, b
2424   1330 26 0C 00      mov b, 12
2425   1333 B0            cmp a, b
2426   1334 0E            lodflgs
2427   1335 87 03         and al, %00000011
2428   1337 B9 00         cmp al, 0
2429   1339 0E            lodflgs
2430   133A 22 00         mov ah, 0
2431   133C 27            mov b, a
2432   133D E4            pop a
2433   133E C0 00 00      cmp b, 0
2434   1341 C6 2D 14      je _for38_exit
2435   1344             _for38_block:
2436   1344             _if39_cond:
2437   1344 29 55 38      mov b, [__datum] ; datum
2438   1347 D7            push a
2439   1348 74            mov d, b
2440   1349 DA            push d
2441   134A 29 2F 39      mov b, [__pos] ; pos
2442   134D D7            push a
2443   134E 11            mov a, b
2444   134F 26 01 00      mov b, 1
2445   1352 60            sub a, b
2446   1353 27            mov b, a
2447   1354 E4            pop a
2448   1355 E7            pop d
2449   1356 10 02 00      mov a, 2
2450   1359 AC            mul a, b
2451   135A 5A            add d, b
2452   135B E4            pop a
2453   135C 2A            mov b, [d]
2454   135D D7            push a
2455   135E 11            mov a, b
2456   135F 26 E8 03      mov b, 1000
2457   1362 B0            cmp a, b
2458   1363 0E            lodflgs
2459   1364 87 02         and al, %00000010 ; <
2460   1366 FD 9C         shr al
2461   1368 22 00         mov ah, 0
2462   136A 27            mov b, a
2463   136B E4            pop a
2464   136C C0 00 00      cmp b, 0
2465   136F C6 81 13      je _if39_exit
2466   1372             _if39_true:
2467   1372 26 00 00      mov b, 0
2468   1375 FD AB         swp b
2469   1377 D8            push b
2470   1378 07 73 14      call prnnum
2471   137B 51 02 00      add sp, 2
2472   137E 0A 81 13      jmp _if39_exit
2473   1381             _if39_exit:
2474   1381             _if40_cond:
2475   1381 29 55 38      mov b, [__datum] ; datum
2476   1384 D7            push a
2477   1385 74            mov d, b
2478   1386 DA            push d
2479   1387 29 2F 39      mov b, [__pos] ; pos
2480   138A D7            push a
2481   138B 11            mov a, b
2482   138C 26 01 00      mov b, 1
2483   138F 60            sub a, b
2484   1390 27            mov b, a
2485   1391 E4            pop a
2486   1392 E7            pop d
2487   1393 10 02 00      mov a, 2
2488   1396 AC            mul a, b
2489   1397 5A            add d, b
2490   1398 E4            pop a
2491   1399 2A            mov b, [d]
2492   139A D7            push a
2493   139B 11            mov a, b
2494   139C 26 64 00      mov b, 100
2495   139F B0            cmp a, b
2496   13A0 0E            lodflgs
2497   13A1 87 02         and al, %00000010 ; <
2498   13A3 FD 9C         shr al
2499   13A5 22 00         mov ah, 0
2500   13A7 27            mov b, a
2501   13A8 E4            pop a
2502   13A9 C0 00 00      cmp b, 0
2503   13AC C6 BE 13      je _if40_exit
2504   13AF             _if40_true:
2505   13AF 26 00 00      mov b, 0
2506   13B2 FD AB         swp b
2507   13B4 D8            push b
2508   13B5 07 73 14      call prnnum
2509   13B8 51 02 00      add sp, 2
2510   13BB 0A BE 13      jmp _if40_exit
2511   13BE             _if40_exit:
2512   13BE             _if41_cond:
2513   13BE 29 55 38      mov b, [__datum] ; datum
2514   13C1 D7            push a
2515   13C2 74            mov d, b
2516   13C3 DA            push d
2517   13C4 29 2F 39      mov b, [__pos] ; pos
2518   13C7 D7            push a
2519   13C8 11            mov a, b
2520   13C9 26 01 00      mov b, 1
2521   13CC 60            sub a, b
2522   13CD 27            mov b, a
2523   13CE E4            pop a
2524   13CF E7            pop d
2525   13D0 10 02 00      mov a, 2
2526   13D3 AC            mul a, b
2527   13D4 5A            add d, b
2528   13D5 E4            pop a
2529   13D6 2A            mov b, [d]
2530   13D7 D7            push a
2531   13D8 11            mov a, b
2532   13D9 26 0A 00      mov b, 10
2533   13DC B0            cmp a, b
2534   13DD 0E            lodflgs
2535   13DE 87 02         and al, %00000010 ; <
2536   13E0 FD 9C         shr al
2537   13E2 22 00         mov ah, 0
2538   13E4 27            mov b, a
2539   13E5 E4            pop a
2540   13E6 C0 00 00      cmp b, 0
2541   13E9 C6 FB 13      je _if41_exit
2542   13EC             _if41_true:
2543   13EC 26 00 00      mov b, 0
2544   13EF FD AB         swp b
2545   13F1 D8            push b
2546   13F2 07 73 14      call prnnum
2547   13F5 51 02 00      add sp, 2
2548   13F8 0A FB 13      jmp _if41_exit
2549   13FB             _if41_exit:
2550   13FB 29 55 38      mov b, [__datum] ; datum
2551   13FE D7            push a
2552   13FF 74            mov d, b
2553   1400 DA            push d
2554   1401 29 2F 39      mov b, [__pos] ; pos
2555   1404 D7            push a
2556   1405 11            mov a, b
2557   1406 26 01 00      mov b, 1
2558   1409 60            sub a, b
2559   140A 27            mov b, a
2560   140B E4            pop a
2561   140C E7            pop d
2562   140D 10 02 00      mov a, 2
2563   1410 AC            mul a, b
2564   1411 5A            add d, b
2565   1412 E4            pop a
2566   1413 2A            mov b, [d]
2567   1414 FD AB         swp b
2568   1416 D8            push b
2569   1417 07 57 14      call prnnumspace
2570   141A 51 02 00      add sp, 2
2571   141D             _for38_update:
2572   141D 29 2F 39      mov b, [__pos] ; pos
2573   1420 D7            push a
2574   1421 11            mov a, b
2575   1422 FD 7D         dec b
2576   1424 FD 42 2F 39   mov [__pos], b
2577   1428 27            mov b, a
2578   1429 E4            pop a
2579   142A 0A 2B 13      jmp _for38_cond
2580   142D             _for38_exit:
2581   142D 26 6D 39      mov b, __string_0 ; "\n"
2582   1430 FD AB         swp b
2583   1432 D8            push b
2584   1433 07 3C 14      call print
2585   1436 51 02 00      add sp, 2
2586   1439 F9            leave
2587   143A 05 0B         syscall sys_terminate_proc
2588   143C             
2589   143C             print:
2590   143C D2            push bp
2591   143D 9B            mov bp, sp
2592   143E             
2593   143E             ; --- BEGIN INLINE ASM BLOCK
2594   143E 17 05 00      mov a, [bp + 5]
2595   1441 3C            mov d, a
2596   1442 07 BD 3B      call puts
2597   1445             ; --- END INLINE ASM BLOCK
2598   1445             
2599   1445 F9            leave
2600   1446 09            ret
2601   1447             
2602   1447             readint:
2603   1447 D2            push bp
2604   1448 9B            mov bp, sp
2605   1449 52 02 00      sub sp, 2 ; n
2606   144C             
2607   144C             ; --- BEGIN INLINE ASM BLOCK
2608   144C 07 BB 3C      call scan_u16d
2609   144F 45 FF FF      mov [bp + -1], a
2610   1452             ; --- END INLINE ASM BLOCK
2611   1452             
2612   1452 2C FF FF      mov b, [bp + -1] ; n
2613   1455 F9            leave
2614   1456 09            ret
2615   1457             
2616   1457             prnnumspace:
2617   1457 D2            push bp
2618   1458 9B            mov bp, sp
2619   1459 2C 05 00      mov b, [bp + 5] ; n
2620   145C FD AB         swp b
2621   145E D8            push b
2622   145F 07 73 14      call prnnum
2623   1462 51 02 00      add sp, 2
2624   1465 26 6F 39      mov b, __string_1 ; " "
2625   1468 FD AB         swp b
2626   146A D8            push b
2627   146B 07 3C 14      call print
2628   146E 51 02 00      add sp, 2
2629   1471 F9            leave
2630   1472 09            ret
2631   1473             
2632   1473             prnnum:
2633   1473 D2            push bp
2634   1474 9B            mov bp, sp
2635   1475 52 05 00      sub sp, 5 ; digits
2636   1478 52 02 00      sub sp, 2 ; i
2637   147B 26 00 00      mov b, 0
2638   147E D7            push a
2639   147F 11            mov a, b
2640   1480 45 FA FF      mov [bp + -6], a ; i
2641   1483 E4            pop a
2642   1484             _if42_cond:
2643   1484 2C 05 00      mov b, [bp + 5] ; num
2644   1487 D7            push a
2645   1488 11            mov a, b
2646   1489 26 00 00      mov b, 0
2647   148C B0            cmp a, b
2648   148D 0E            lodflgs
2649   148E 87 01         and al, %00000001 ; ==
2650   1490 22 00         mov ah, 0
2651   1492 27            mov b, a
2652   1493 E4            pop a
2653   1494 C0 00 00      cmp b, 0
2654   1497 C6 A9 14      je _if42_exit
2655   149A             _if42_true:
2656   149A 26 30 00      mov b, '0'
2657   149D DD            push bl
2658   149E 07 58 15      call _putchar
2659   14A1 51 01 00      add sp, 1
2660   14A4 F9            leave
2661   14A5 09            ret
2662   14A6 0A A9 14      jmp _if42_exit
2663   14A9             _if42_exit:
2664   14A9             _while43_cond:
2665   14A9 2C 05 00      mov b, [bp + 5] ; num
2666   14AC D7            push a
2667   14AD 11            mov a, b
2668   14AE 26 00 00      mov b, 0
2669   14B1 B0            cmp a, b
2670   14B2 0E            lodflgs
2671   14B3 87 03         and al, %00000011
2672   14B5 B9 00         cmp al, 0
2673   14B7 0E            lodflgs
2674   14B8 22 00         mov ah, 0
2675   14BA 27            mov b, a
2676   14BB E4            pop a
2677   14BC C0 00 00      cmp b, 0
2678   14BF C6 10 15      je _while43_exit
2679   14C2             _while43_block:
2680   14C2 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
2681   14C5 2D            mov b, d
2682   14C6 D7            push a
2683   14C7 74            mov d, b
2684   14C8 DA            push d
2685   14C9 2C FA FF      mov b, [bp + -6] ; i
2686   14CC E7            pop d
2687   14CD 10 01 00      mov a, 1
2688   14D0 AC            mul a, b
2689   14D1 5A            add d, b
2690   14D2 E4            pop a
2691   14D3 DA            push d
2692   14D4 26 30 00      mov b, '0'
2693   14D7 D7            push a
2694   14D8 11            mov a, b
2695   14D9 2C 05 00      mov b, [bp + 5] ; num
2696   14DC D7            push a
2697   14DD 11            mov a, b
2698   14DE 26 0A 00      mov b, 10
2699   14E1 AE            div a, b
2700   14E2 E4            pop a
2701   14E3 54            add a, b
2702   14E4 27            mov b, a
2703   14E5 E4            pop a
2704   14E6 E7            pop d
2705   14E7 FD 3E         mov [d], bl
2706   14E9 2C 05 00      mov b, [bp + 5] ; num
2707   14EC D7            push a
2708   14ED 11            mov a, b
2709   14EE 26 0A 00      mov b, 10
2710   14F1 AE            div a, b
2711   14F2 FD 78         mov g, a
2712   14F4 11            mov a, b
2713   14F5 FD 27         mov b, g
2714   14F7 E4            pop a
2715   14F8 D7            push a
2716   14F9 11            mov a, b
2717   14FA 45 05 00      mov [bp + 5], a ; num
2718   14FD E4            pop a
2719   14FE 2C FA FF      mov b, [bp + -6] ; i
2720   1501 D7            push a
2721   1502 11            mov a, b
2722   1503 FD 77         inc b
2723   1505 D7            push a
2724   1506 11            mov a, b
2725   1507 45 FA FF      mov [bp + -6], a ; i
2726   150A E4            pop a
2727   150B 27            mov b, a
2728   150C E4            pop a
2729   150D 0A A9 14      jmp _while43_cond
2730   1510             _while43_exit:
2731   1510             _while44_cond:
2732   1510 2C FA FF      mov b, [bp + -6] ; i
2733   1513 D7            push a
2734   1514 11            mov a, b
2735   1515 26 00 00      mov b, 0
2736   1518 B0            cmp a, b
2737   1519 0E            lodflgs
2738   151A 87 03         and al, %00000011
2739   151C B9 00         cmp al, 0
2740   151E 0E            lodflgs
2741   151F 22 00         mov ah, 0
2742   1521 27            mov b, a
2743   1522 E4            pop a
2744   1523 C0 00 00      cmp b, 0
2745   1526 C6 56 15      je _while44_exit
2746   1529             _while44_block:
2747   1529 2C FA FF      mov b, [bp + -6] ; i
2748   152C D7            push a
2749   152D 11            mov a, b
2750   152E FD 7D         dec b
2751   1530 D7            push a
2752   1531 11            mov a, b
2753   1532 45 FA FF      mov [bp + -6], a ; i
2754   1535 E4            pop a
2755   1536 27            mov b, a
2756   1537 E4            pop a
2757   1538 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
2758   153B 2D            mov b, d
2759   153C D7            push a
2760   153D 74            mov d, b
2761   153E DA            push d
2762   153F 2C FA FF      mov b, [bp + -6] ; i
2763   1542 E7            pop d
2764   1543 10 01 00      mov a, 1
2765   1546 AC            mul a, b
2766   1547 5A            add d, b
2767   1548 E4            pop a
2768   1549 32            mov bl, [d]
2769   154A A7 00         mov bh, 0
2770   154C DD            push bl
2771   154D 07 58 15      call _putchar
2772   1550 51 01 00      add sp, 1
2773   1553 0A 10 15      jmp _while44_cond
2774   1556             _while44_exit:
2775   1556 F9            leave
2776   1557 09            ret
2777   1558             
2778   1558             _putchar:
2779   1558 D2            push bp
2780   1559 9B            mov bp, sp
2781   155A             
2782   155A             ; --- BEGIN INLINE ASM BLOCK
2783   155A 20 05 00      mov al, [bp + 5]
2784   155D 23            mov ah, al
2785   155E 07 83 3A      call putchar
2786   1561             ; --- END INLINE ASM BLOCK
2787   1561             
2788   1561 F9            leave
2789   1562 09            ret
2790   1563             
2791   1563             fixsignin:
2792   1563 D2            push bp
2793   1564 9B            mov bp, sp
2794   1565 26 00 00      mov b, 0
2795   1568 FD 42 27 39   mov [__asign], b
2796   156C 26 00 00      mov b, 0
2797   156F FD 42 29 39   mov [__bsign], b
2798   1573 26 00 00      mov b, 0
2799   1576 FD 42 2B 39   mov [__csign], b
2800   157A             _if45_cond:
2801   157A 29 71 38      mov b, [__anarr] ; anarr
2802   157D D7            push a
2803   157E 74            mov d, b
2804   157F DA            push d
2805   1580 26 0B 00      mov b, 11
2806   1583 E7            pop d
2807   1584 10 02 00      mov a, 2
2808   1587 AC            mul a, b
2809   1588 5A            add d, b
2810   1589 E4            pop a
2811   158A 2A            mov b, [d]
2812   158B D7            push a
2813   158C 11            mov a, b
2814   158D 26 09 00      mov b, 9
2815   1590 B0            cmp a, b
2816   1591 0E            lodflgs
2817   1592 87 03         and al, %00000011
2818   1594 B9 00         cmp al, 0
2819   1596 0E            lodflgs
2820   1597 22 00         mov ah, 0
2821   1599 27            mov b, a
2822   159A E4            pop a
2823   159B C0 00 00      cmp b, 0
2824   159E C6 00 16      je _if45_exit
2825   15A1             _if45_true:
2826   15A1 29 71 38      mov b, [__anarr] ; anarr
2827   15A4 D7            push a
2828   15A5 74            mov d, b
2829   15A6 DA            push d
2830   15A7 26 0B 00      mov b, 11
2831   15AA E7            pop d
2832   15AB 10 02 00      mov a, 2
2833   15AE AC            mul a, b
2834   15AF 5A            add d, b
2835   15B0 E4            pop a
2836   15B1 2A            mov b, [d]
2837   15B2 D7            push a
2838   15B3 11            mov a, b
2839   15B4 26 0A 00      mov b, 10
2840   15B7 AE            div a, b
2841   15B8 FD 78         mov g, a
2842   15BA 11            mov a, b
2843   15BB FD 27         mov b, g
2844   15BD E4            pop a
2845   15BE FD 42 2F 39   mov [__pos], b
2846   15C2 29 71 38      mov b, [__anarr] ; anarr
2847   15C5 D7            push a
2848   15C6 74            mov d, b
2849   15C7 DA            push d
2850   15C8 26 0B 00      mov b, 11
2851   15CB E7            pop d
2852   15CC 10 02 00      mov a, 2
2853   15CF AC            mul a, b
2854   15D0 5A            add d, b
2855   15D1 E4            pop a
2856   15D2 DA            push d
2857   15D3 29 71 38      mov b, [__anarr] ; anarr
2858   15D6 D7            push a
2859   15D7 74            mov d, b
2860   15D8 DA            push d
2861   15D9 26 0B 00      mov b, 11
2862   15DC E7            pop d
2863   15DD 10 02 00      mov a, 2
2864   15E0 AC            mul a, b
2865   15E1 5A            add d, b
2866   15E2 E4            pop a
2867   15E3 2A            mov b, [d]
2868   15E4 D7            push a
2869   15E5 11            mov a, b
2870   15E6 29 2F 39      mov b, [__pos] ; pos
2871   15E9 D7            push a
2872   15EA 11            mov a, b
2873   15EB 26 0A 00      mov b, 10
2874   15EE AC            mul a, b
2875   15EF E4            pop a
2876   15F0 60            sub a, b
2877   15F1 27            mov b, a
2878   15F2 E4            pop a
2879   15F3 E7            pop d
2880   15F4 FD 43         mov [d], b
2881   15F6 26 01 00      mov b, 1
2882   15F9 FD 42 27 39   mov [__asign], b
2883   15FD 0A 00 16      jmp _if45_exit
2884   1600             _if45_exit:
2885   1600             _if46_cond:
2886   1600 29 8B 38      mov b, [__bnarr] ; bnarr
2887   1603 D7            push a
2888   1604 74            mov d, b
2889   1605 DA            push d
2890   1606 26 0B 00      mov b, 11
2891   1609 E7            pop d
2892   160A 10 02 00      mov a, 2
2893   160D AC            mul a, b
2894   160E 5A            add d, b
2895   160F E4            pop a
2896   1610 2A            mov b, [d]
2897   1611 D7            push a
2898   1612 11            mov a, b
2899   1613 26 09 00      mov b, 9
2900   1616 B0            cmp a, b
2901   1617 0E            lodflgs
2902   1618 87 03         and al, %00000011
2903   161A B9 00         cmp al, 0
2904   161C 0E            lodflgs
2905   161D 22 00         mov ah, 0
2906   161F 27            mov b, a
2907   1620 E4            pop a
2908   1621 C0 00 00      cmp b, 0
2909   1624 C6 86 16      je _if46_exit
2910   1627             _if46_true:
2911   1627 29 8B 38      mov b, [__bnarr] ; bnarr
2912   162A D7            push a
2913   162B 74            mov d, b
2914   162C DA            push d
2915   162D 26 0B 00      mov b, 11
2916   1630 E7            pop d
2917   1631 10 02 00      mov a, 2
2918   1634 AC            mul a, b
2919   1635 5A            add d, b
2920   1636 E4            pop a
2921   1637 2A            mov b, [d]
2922   1638 D7            push a
2923   1639 11            mov a, b
2924   163A 26 0A 00      mov b, 10
2925   163D AE            div a, b
2926   163E FD 78         mov g, a
2927   1640 11            mov a, b
2928   1641 FD 27         mov b, g
2929   1643 E4            pop a
2930   1644 FD 42 2F 39   mov [__pos], b
2931   1648 29 8B 38      mov b, [__bnarr] ; bnarr
2932   164B D7            push a
2933   164C 74            mov d, b
2934   164D DA            push d
2935   164E 26 0B 00      mov b, 11
2936   1651 E7            pop d
2937   1652 10 02 00      mov a, 2
2938   1655 AC            mul a, b
2939   1656 5A            add d, b
2940   1657 E4            pop a
2941   1658 DA            push d
2942   1659 29 8B 38      mov b, [__bnarr] ; bnarr
2943   165C D7            push a
2944   165D 74            mov d, b
2945   165E DA            push d
2946   165F 26 0B 00      mov b, 11
2947   1662 E7            pop d
2948   1663 10 02 00      mov a, 2
2949   1666 AC            mul a, b
2950   1667 5A            add d, b
2951   1668 E4            pop a
2952   1669 2A            mov b, [d]
2953   166A D7            push a
2954   166B 11            mov a, b
2955   166C 29 2F 39      mov b, [__pos] ; pos
2956   166F D7            push a
2957   1670 11            mov a, b
2958   1671 26 0A 00      mov b, 10
2959   1674 AC            mul a, b
2960   1675 E4            pop a
2961   1676 60            sub a, b
2962   1677 27            mov b, a
2963   1678 E4            pop a
2964   1679 E7            pop d
2965   167A FD 43         mov [d], b
2966   167C 26 01 00      mov b, 1
2967   167F FD 42 29 39   mov [__bsign], b
2968   1683 0A 86 16      jmp _if46_exit
2969   1686             _if46_exit:
2970   1686 F9            leave
2971   1687 09            ret
2972   1688             
2973   1688             fixsignout:
2974   1688 D2            push bp
2975   1689 9B            mov bp, sp
2976   168A             _if47_cond:
2977   168A 29 2B 39      mov b, [__csign] ; csign
2978   168D D7            push a
2979   168E 11            mov a, b
2980   168F 26 01 00      mov b, 1
2981   1692 B0            cmp a, b
2982   1693 0E            lodflgs
2983   1694 87 01         and al, %00000001 ; ==
2984   1696 22 00         mov ah, 0
2985   1698 27            mov b, a
2986   1699 E4            pop a
2987   169A C0 00 00      cmp b, 0
2988   169D C6 D7 16      je _if47_exit
2989   16A0             _if47_true:
2990   16A0 29 D9 38      mov b, [__cnarr] ; cnarr
2991   16A3 D7            push a
2992   16A4 74            mov d, b
2993   16A5 DA            push d
2994   16A6 26 0B 00      mov b, 11
2995   16A9 E7            pop d
2996   16AA 10 02 00      mov a, 2
2997   16AD AC            mul a, b
2998   16AE 5A            add d, b
2999   16AF E4            pop a
3000   16B0 DA            push d
3001   16B1 29 D9 38      mov b, [__cnarr] ; cnarr
3002   16B4 D7            push a
3003   16B5 74            mov d, b
3004   16B6 DA            push d
3005   16B7 26 0B 00      mov b, 11
3006   16BA E7            pop d
3007   16BB 10 02 00      mov a, 2
3008   16BE AC            mul a, b
3009   16BF 5A            add d, b
3010   16C0 E4            pop a
3011   16C1 2A            mov b, [d]
3012   16C2 D7            push a
3013   16C3 11            mov a, b
3014   16C4 26 0A 00      mov b, 10
3015   16C7 54            add a, b
3016   16C8 27            mov b, a
3017   16C9 E4            pop a
3018   16CA E7            pop d
3019   16CB FD 43         mov [d], b
3020   16CD 26 00 00      mov b, 0
3021   16D0 FD 42 2B 39   mov [__csign], b
3022   16D4 0A D7 16      jmp _if47_exit
3023   16D7             _if47_exit:
3024   16D7 F9            leave
3025   16D8 09            ret
3026   16D9             
3027   16D9             fixcsizezero:
3028   16D9 D2            push bp
3029   16DA 9B            mov bp, sp
3030   16DB 26 01 00      mov b, 1
3031   16DE FD 42 63 39   mov [__allzeroes], b
3032   16E2             _for48_init:
3033   16E2 26 01 00      mov b, 1
3034   16E5 FD 42 2F 39   mov [__pos], b
3035   16E9             _for48_cond:
3036   16E9 29 2F 39      mov b, [__pos] ; pos
3037   16EC D7            push a
3038   16ED 11            mov a, b
3039   16EE 26 0C 00      mov b, 12
3040   16F1 B0            cmp a, b
3041   16F2 0E            lodflgs
3042   16F3 87 02         and al, %00000010 ; <
3043   16F5 FD 9C         shr al
3044   16F7 22 00         mov ah, 0
3045   16F9 27            mov b, a
3046   16FA E4            pop a
3047   16FB C0 00 00      cmp b, 0
3048   16FE C6 44 17      je _for48_exit
3049   1701             _for48_block:
3050   1701             _if49_cond:
3051   1701 29 D9 38      mov b, [__cnarr] ; cnarr
3052   1704 D7            push a
3053   1705 74            mov d, b
3054   1706 DA            push d
3055   1707 29 2F 39      mov b, [__pos] ; pos
3056   170A E7            pop d
3057   170B 10 02 00      mov a, 2
3058   170E AC            mul a, b
3059   170F 5A            add d, b
3060   1710 E4            pop a
3061   1711 2A            mov b, [d]
3062   1712 D7            push a
3063   1713 11            mov a, b
3064   1714 26 00 00      mov b, 0
3065   1717 B0            cmp a, b
3066   1718 0E            lodflgs
3067   1719 87 01         and al, %00000001
3068   171B 8F 01         xor al, %00000001 ; !=
3069   171D 22 00         mov ah, 0
3070   171F 27            mov b, a
3071   1720 E4            pop a
3072   1721 C0 00 00      cmp b, 0
3073   1724 C6 34 17      je _if49_exit
3074   1727             _if49_true:
3075   1727 26 00 00      mov b, 0
3076   172A FD 42 63 39   mov [__allzeroes], b
3077   172E 0A 44 17      jmp _for48_exit ; for break
3078   1731 0A 34 17      jmp _if49_exit
3079   1734             _if49_exit:
3080   1734             _for48_update:
3081   1734 29 2F 39      mov b, [__pos] ; pos
3082   1737 D7            push a
3083   1738 11            mov a, b
3084   1739 FD 77         inc b
3085   173B FD 42 2F 39   mov [__pos], b
3086   173F 27            mov b, a
3087   1740 E4            pop a
3088   1741 0A E9 16      jmp _for48_cond
3089   1744             _for48_exit:
3090   1744             _if50_cond:
3091   1744 29 63 39      mov b, [__allzeroes] ; allzeroes
3092   1747 D7            push a
3093   1748 11            mov a, b
3094   1749 26 01 00      mov b, 1
3095   174C B0            cmp a, b
3096   174D 0E            lodflgs
3097   174E 87 01         and al, %00000001 ; ==
3098   1750 22 00         mov ah, 0
3099   1752 27            mov b, a
3100   1753 E4            pop a
3101   1754 C0 00 00      cmp b, 0
3102   1757 C6 64 17      je _if50_exit
3103   175A             _if50_true:
3104   175A 26 00 00      mov b, 0
3105   175D FD 42 2B 39   mov [__csign], b
3106   1761 0A 64 17      jmp _if50_exit
3107   1764             _if50_exit:
3108   1764             _if51_cond:
3109   1764 29 D9 38      mov b, [__cnarr] ; cnarr
3110   1767 D7            push a
3111   1768 74            mov d, b
3112   1769 DA            push d
3113   176A 26 0B 00      mov b, 11
3114   176D E7            pop d
3115   176E 10 02 00      mov a, 2
3116   1771 AC            mul a, b
3117   1772 5A            add d, b
3118   1773 E4            pop a
3119   1774 2A            mov b, [d]
3120   1775 D7            push a
3121   1776 11            mov a, b
3122   1777 26 09 00      mov b, 9
3123   177A B0            cmp a, b
3124   177B 0E            lodflgs
3125   177C 87 03         and al, %00000011
3126   177E B9 00         cmp al, 0
3127   1780 0E            lodflgs
3128   1781 22 00         mov ah, 0
3129   1783 27            mov b, a
3130   1784 E4            pop a
3131   1785 C0 00 00      cmp b, 0
3132   1788 C6 DB 17      je _if51_exit
3133   178B             _if51_true:
3134   178B 26 00 00      mov b, 0
3135   178E FD 42 2B 39   mov [__csign], b
3136   1792             _for52_init:
3137   1792 26 01 00      mov b, 1
3138   1795 FD 42 2F 39   mov [__pos], b
3139   1799             _for52_cond:
3140   1799 29 2F 39      mov b, [__pos] ; pos
3141   179C D7            push a
3142   179D 11            mov a, b
3143   179E 26 0C 00      mov b, 12
3144   17A1 B0            cmp a, b
3145   17A2 0E            lodflgs
3146   17A3 87 02         and al, %00000010 ; <
3147   17A5 FD 9C         shr al
3148   17A7 22 00         mov ah, 0
3149   17A9 27            mov b, a
3150   17AA E4            pop a
3151   17AB C0 00 00      cmp b, 0
3152   17AE C6 D8 17      je _for52_exit
3153   17B1             _for52_block:
3154   17B1 29 D9 38      mov b, [__cnarr] ; cnarr
3155   17B4 D7            push a
3156   17B5 74            mov d, b
3157   17B6 DA            push d
3158   17B7 29 2F 39      mov b, [__pos] ; pos
3159   17BA E7            pop d
3160   17BB 10 02 00      mov a, 2
3161   17BE AC            mul a, b
3162   17BF 5A            add d, b
3163   17C0 E4            pop a
3164   17C1 DA            push d
3165   17C2 26 00 00      mov b, 0
3166   17C5 E7            pop d
3167   17C6 FD 43         mov [d], b
3168   17C8             _for52_update:
3169   17C8 29 2F 39      mov b, [__pos] ; pos
3170   17CB D7            push a
3171   17CC 11            mov a, b
3172   17CD FD 77         inc b
3173   17CF FD 42 2F 39   mov [__pos], b
3174   17D3 27            mov b, a
3175   17D4 E4            pop a
3176   17D5 0A 99 17      jmp _for52_cond
3177   17D8             _for52_exit:
3178   17D8 0A DB 17      jmp _if51_exit
3179   17DB             _if51_exit:
3180   17DB F9            leave
3181   17DC 09            ret
3182   17DD             
3183   17DD             swapab:
3184   17DD D2            push bp
3185   17DE 9B            mov bp, sp
3186   17DF             _for53_init:
3187   17DF 26 00 00      mov b, 0
3188   17E2 FD 42 47 39   mov [__swappos], b
3189   17E6             _for53_cond:
3190   17E6 29 47 39      mov b, [__swappos] ; swappos
3191   17E9 D7            push a
3192   17EA 11            mov a, b
3193   17EB 26 0C 00      mov b, 12
3194   17EE B0            cmp a, b
3195   17EF 0E            lodflgs
3196   17F0 87 02         and al, %00000010 ; <
3197   17F2 FD 9C         shr al
3198   17F4 22 00         mov ah, 0
3199   17F6 27            mov b, a
3200   17F7 E4            pop a
3201   17F8 C0 00 00      cmp b, 0
3202   17FB C6 BF 18      je _for53_exit
3203   17FE             _for53_block:
3204   17FE 29 71 38      mov b, [__anarr] ; anarr
3205   1801 D7            push a
3206   1802 74            mov d, b
3207   1803 DA            push d
3208   1804 29 47 39      mov b, [__swappos] ; swappos
3209   1807 E7            pop d
3210   1808 10 02 00      mov a, 2
3211   180B AC            mul a, b
3212   180C 5A            add d, b
3213   180D E4            pop a
3214   180E DA            push d
3215   180F 29 71 38      mov b, [__anarr] ; anarr
3216   1812 D7            push a
3217   1813 74            mov d, b
3218   1814 DA            push d
3219   1815 29 47 39      mov b, [__swappos] ; swappos
3220   1818 E7            pop d
3221   1819 10 02 00      mov a, 2
3222   181C AC            mul a, b
3223   181D 5A            add d, b
3224   181E E4            pop a
3225   181F 2A            mov b, [d]
3226   1820 D7            push a
3227   1821 11            mov a, b
3228   1822 29 8B 38      mov b, [__bnarr] ; bnarr
3229   1825 D7            push a
3230   1826 74            mov d, b
3231   1827 DA            push d
3232   1828 29 47 39      mov b, [__swappos] ; swappos
3233   182B E7            pop d
3234   182C 10 02 00      mov a, 2
3235   182F AC            mul a, b
3236   1830 5A            add d, b
3237   1831 E4            pop a
3238   1832 2A            mov b, [d]
3239   1833 54            add a, b
3240   1834 27            mov b, a
3241   1835 E4            pop a
3242   1836 E7            pop d
3243   1837 FD 43         mov [d], b
3244   1839 29 8B 38      mov b, [__bnarr] ; bnarr
3245   183C D7            push a
3246   183D 74            mov d, b
3247   183E DA            push d
3248   183F 29 47 39      mov b, [__swappos] ; swappos
3249   1842 E7            pop d
3250   1843 10 02 00      mov a, 2
3251   1846 AC            mul a, b
3252   1847 5A            add d, b
3253   1848 E4            pop a
3254   1849 DA            push d
3255   184A 29 71 38      mov b, [__anarr] ; anarr
3256   184D D7            push a
3257   184E 74            mov d, b
3258   184F DA            push d
3259   1850 29 47 39      mov b, [__swappos] ; swappos
3260   1853 E7            pop d
3261   1854 10 02 00      mov a, 2
3262   1857 AC            mul a, b
3263   1858 5A            add d, b
3264   1859 E4            pop a
3265   185A 2A            mov b, [d]
3266   185B D7            push a
3267   185C 11            mov a, b
3268   185D 29 8B 38      mov b, [__bnarr] ; bnarr
3269   1860 D7            push a
3270   1861 74            mov d, b
3271   1862 DA            push d
3272   1863 29 47 39      mov b, [__swappos] ; swappos
3273   1866 E7            pop d
3274   1867 10 02 00      mov a, 2
3275   186A AC            mul a, b
3276   186B 5A            add d, b
3277   186C E4            pop a
3278   186D 2A            mov b, [d]
3279   186E 60            sub a, b
3280   186F 27            mov b, a
3281   1870 E4            pop a
3282   1871 E7            pop d
3283   1872 FD 43         mov [d], b
3284   1874 29 71 38      mov b, [__anarr] ; anarr
3285   1877 D7            push a
3286   1878 74            mov d, b
3287   1879 DA            push d
3288   187A 29 47 39      mov b, [__swappos] ; swappos
3289   187D E7            pop d
3290   187E 10 02 00      mov a, 2
3291   1881 AC            mul a, b
3292   1882 5A            add d, b
3293   1883 E4            pop a
3294   1884 DA            push d
3295   1885 29 71 38      mov b, [__anarr] ; anarr
3296   1888 D7            push a
3297   1889 74            mov d, b
3298   188A DA            push d
3299   188B 29 47 39      mov b, [__swappos] ; swappos
3300   188E E7            pop d
3301   188F 10 02 00      mov a, 2
3302   1892 AC            mul a, b
3303   1893 5A            add d, b
3304   1894 E4            pop a
3305   1895 2A            mov b, [d]
3306   1896 D7            push a
3307   1897 11            mov a, b
3308   1898 29 8B 38      mov b, [__bnarr] ; bnarr
3309   189B D7            push a
3310   189C 74            mov d, b
3311   189D DA            push d
3312   189E 29 47 39      mov b, [__swappos] ; swappos
3313   18A1 E7            pop d
3314   18A2 10 02 00      mov a, 2
3315   18A5 AC            mul a, b
3316   18A6 5A            add d, b
3317   18A7 E4            pop a
3318   18A8 2A            mov b, [d]
3319   18A9 60            sub a, b
3320   18AA 27            mov b, a
3321   18AB E4            pop a
3322   18AC E7            pop d
3323   18AD FD 43         mov [d], b
3324   18AF             _for53_update:
3325   18AF 29 47 39      mov b, [__swappos] ; swappos
3326   18B2 D7            push a
3327   18B3 11            mov a, b
3328   18B4 FD 77         inc b
3329   18B6 FD 42 47 39   mov [__swappos], b
3330   18BA 27            mov b, a
3331   18BB E4            pop a
3332   18BC 0A E6 17      jmp _for53_cond
3333   18BF             _for53_exit:
3334   18BF F9            leave
3335   18C0 09            ret
3336   18C1             
3337   18C1             checkabsabsize:
3338   18C1 D2            push bp
3339   18C2 9B            mov bp, sp
3340   18C3 26 00 00      mov b, 0
3341   18C6 FD 42 35 39   mov [__agtb], b
3342   18CA 26 00 00      mov b, 0
3343   18CD FD 42 37 39   mov [__bgta], b
3344   18D1 26 00 00      mov b, 0
3345   18D4 FD 42 3D 39   mov [__ageb], b
3346   18D8 26 00 00      mov b, 0
3347   18DB FD 42 3F 39   mov [__bgea], b
3348   18DF 26 00 00      mov b, 0
3349   18E2 FD 42 39 39   mov [__aeqb], b
3350   18E6 26 00 00      mov b, 0
3351   18E9 FD 42 3B 39   mov [__aneqb], b
3352   18ED             _for54_init:
3353   18ED 26 0C 00      mov b, 12
3354   18F0 FD 42 45 39   mov [__psizepos], b
3355   18F4             _for54_cond:
3356   18F4 29 45 39      mov b, [__psizepos] ; psizepos
3357   18F7 D7            push a
3358   18F8 11            mov a, b
3359   18F9 26 00 00      mov b, 0
3360   18FC B0            cmp a, b
3361   18FD 0E            lodflgs
3362   18FE 87 03         and al, %00000011
3363   1900 B9 00         cmp al, 0
3364   1902 0E            lodflgs
3365   1903 22 00         mov ah, 0
3366   1905 27            mov b, a
3367   1906 E4            pop a
3368   1907 C0 00 00      cmp b, 0
3369   190A C6 E1 19      je _for54_exit
3370   190D             _for54_block:
3371   190D 29 45 39      mov b, [__psizepos] ; psizepos
3372   1910 D7            push a
3373   1911 11            mov a, b
3374   1912 26 01 00      mov b, 1
3375   1915 60            sub a, b
3376   1916 27            mov b, a
3377   1917 E4            pop a
3378   1918 FD 42 43 39   mov [__sizepos], b
3379   191C             _if55_cond:
3380   191C 29 71 38      mov b, [__anarr] ; anarr
3381   191F D7            push a
3382   1920 74            mov d, b
3383   1921 DA            push d
3384   1922 29 43 39      mov b, [__sizepos] ; sizepos
3385   1925 E7            pop d
3386   1926 10 02 00      mov a, 2
3387   1929 AC            mul a, b
3388   192A 5A            add d, b
3389   192B E4            pop a
3390   192C 2A            mov b, [d]
3391   192D D7            push a
3392   192E 11            mov a, b
3393   192F 29 8B 38      mov b, [__bnarr] ; bnarr
3394   1932 D7            push a
3395   1933 74            mov d, b
3396   1934 DA            push d
3397   1935 29 43 39      mov b, [__sizepos] ; sizepos
3398   1938 E7            pop d
3399   1939 10 02 00      mov a, 2
3400   193C AC            mul a, b
3401   193D 5A            add d, b
3402   193E E4            pop a
3403   193F 2A            mov b, [d]
3404   1940 B0            cmp a, b
3405   1941 0E            lodflgs
3406   1942 87 03         and al, %00000011
3407   1944 B9 00         cmp al, 0
3408   1946 0E            lodflgs
3409   1947 22 00         mov ah, 0
3410   1949 27            mov b, a
3411   194A E4            pop a
3412   194B C0 00 00      cmp b, 0
3413   194E C6 69 19      je _if55_exit
3414   1951             _if55_true:
3415   1951 26 01 00      mov b, 1
3416   1954 FD 42 3B 39   mov [__aneqb], b
3417   1958 26 01 00      mov b, 1
3418   195B FD 42 35 39   mov [__agtb], b
3419   195F 26 01 00      mov b, 1
3420   1962 FD 42 3D 39   mov [__ageb], b
3421   1966 0A 69 19      jmp _if55_exit
3422   1969             _if55_exit:
3423   1969             _if56_cond:
3424   1969 29 71 38      mov b, [__anarr] ; anarr
3425   196C D7            push a
3426   196D 74            mov d, b
3427   196E DA            push d
3428   196F 29 43 39      mov b, [__sizepos] ; sizepos
3429   1972 E7            pop d
3430   1973 10 02 00      mov a, 2
3431   1976 AC            mul a, b
3432   1977 5A            add d, b
3433   1978 E4            pop a
3434   1979 2A            mov b, [d]
3435   197A D7            push a
3436   197B 11            mov a, b
3437   197C 29 8B 38      mov b, [__bnarr] ; bnarr
3438   197F D7            push a
3439   1980 74            mov d, b
3440   1981 DA            push d
3441   1982 29 43 39      mov b, [__sizepos] ; sizepos
3442   1985 E7            pop d
3443   1986 10 02 00      mov a, 2
3444   1989 AC            mul a, b
3445   198A 5A            add d, b
3446   198B E4            pop a
3447   198C 2A            mov b, [d]
3448   198D B0            cmp a, b
3449   198E 0E            lodflgs
3450   198F 87 02         and al, %00000010 ; <
3451   1991 FD 9C         shr al
3452   1993 22 00         mov ah, 0
3453   1995 27            mov b, a
3454   1996 E4            pop a
3455   1997 C0 00 00      cmp b, 0
3456   199A C6 B5 19      je _if56_exit
3457   199D             _if56_true:
3458   199D 26 01 00      mov b, 1
3459   19A0 FD 42 3B 39   mov [__aneqb], b
3460   19A4 26 01 00      mov b, 1
3461   19A7 FD 42 37 39   mov [__bgta], b
3462   19AB 26 01 00      mov b, 1
3463   19AE FD 42 3F 39   mov [__bgea], b
3464   19B2 0A B5 19      jmp _if56_exit
3465   19B5             _if56_exit:
3466   19B5             _if57_cond:
3467   19B5 29 3B 39      mov b, [__aneqb] ; aneqb
3468   19B8 D7            push a
3469   19B9 11            mov a, b
3470   19BA 26 01 00      mov b, 1
3471   19BD B0            cmp a, b
3472   19BE 0E            lodflgs
3473   19BF 87 01         and al, %00000001 ; ==
3474   19C1 22 00         mov ah, 0
3475   19C3 27            mov b, a
3476   19C4 E4            pop a
3477   19C5 C0 00 00      cmp b, 0
3478   19C8 C6 D1 19      je _if57_exit
3479   19CB             _if57_true:
3480   19CB 0A E1 19      jmp _for54_exit ; for break
3481   19CE 0A D1 19      jmp _if57_exit
3482   19D1             _if57_exit:
3483   19D1             _for54_update:
3484   19D1 29 45 39      mov b, [__psizepos] ; psizepos
3485   19D4 D7            push a
3486   19D5 11            mov a, b
3487   19D6 FD 7D         dec b
3488   19D8 FD 42 45 39   mov [__psizepos], b
3489   19DC 27            mov b, a
3490   19DD E4            pop a
3491   19DE 0A F4 18      jmp _for54_cond
3492   19E1             _for54_exit:
3493   19E1             _if58_cond:
3494   19E1 29 3B 39      mov b, [__aneqb] ; aneqb
3495   19E4 D7            push a
3496   19E5 11            mov a, b
3497   19E6 26 00 00      mov b, 0
3498   19E9 B0            cmp a, b
3499   19EA 0E            lodflgs
3500   19EB 87 01         and al, %00000001 ; ==
3501   19ED 22 00         mov ah, 0
3502   19EF 27            mov b, a
3503   19F0 E4            pop a
3504   19F1 C0 00 00      cmp b, 0
3505   19F4 C6 0F 1A      je _if58_exit
3506   19F7             _if58_true:
3507   19F7 26 01 00      mov b, 1
3508   19FA FD 42 39 39   mov [__aeqb], b
3509   19FE 26 01 00      mov b, 1
3510   1A01 FD 42 3D 39   mov [__ageb], b
3511   1A05 26 01 00      mov b, 1
3512   1A08 FD 42 3F 39   mov [__bgea], b
3513   1A0C 0A 0F 1A      jmp _if58_exit
3514   1A0F             _if58_exit:
3515   1A0F F9            leave
3516   1A10 09            ret
3517   1A11             
3518   1A11             protoplus:
3519   1A11 D2            push bp
3520   1A12 9B            mov bp, sp
3521   1A13 26 00 00      mov b, 0
3522   1A16 FD 42 31 39   mov [__carry], b
3523   1A1A             _for59_init:
3524   1A1A 26 00 00      mov b, 0
3525   1A1D FD 42 2F 39   mov [__pos], b
3526   1A21             _for59_cond:
3527   1A21 29 2F 39      mov b, [__pos] ; pos
3528   1A24 D7            push a
3529   1A25 11            mov a, b
3530   1A26 26 0C 00      mov b, 12
3531   1A29 B0            cmp a, b
3532   1A2A 0E            lodflgs
3533   1A2B 87 02         and al, %00000010 ; <
3534   1A2D FD 9C         shr al
3535   1A2F 22 00         mov ah, 0
3536   1A31 27            mov b, a
3537   1A32 E4            pop a
3538   1A33 C0 00 00      cmp b, 0
3539   1A36 C6 F1 1A      je _for59_exit
3540   1A39             _for59_block:
3541   1A39 29 D9 38      mov b, [__cnarr] ; cnarr
3542   1A3C D7            push a
3543   1A3D 74            mov d, b
3544   1A3E DA            push d
3545   1A3F 29 2F 39      mov b, [__pos] ; pos
3546   1A42 E7            pop d
3547   1A43 10 02 00      mov a, 2
3548   1A46 AC            mul a, b
3549   1A47 5A            add d, b
3550   1A48 E4            pop a
3551   1A49 DA            push d
3552   1A4A 29 71 38      mov b, [__anarr] ; anarr
3553   1A4D D7            push a
3554   1A4E 74            mov d, b
3555   1A4F DA            push d
3556   1A50 29 2F 39      mov b, [__pos] ; pos
3557   1A53 E7            pop d
3558   1A54 10 02 00      mov a, 2
3559   1A57 AC            mul a, b
3560   1A58 5A            add d, b
3561   1A59 E4            pop a
3562   1A5A 2A            mov b, [d]
3563   1A5B D7            push a
3564   1A5C 11            mov a, b
3565   1A5D 29 8B 38      mov b, [__bnarr] ; bnarr
3566   1A60 D7            push a
3567   1A61 74            mov d, b
3568   1A62 DA            push d
3569   1A63 29 2F 39      mov b, [__pos] ; pos
3570   1A66 E7            pop d
3571   1A67 10 02 00      mov a, 2
3572   1A6A AC            mul a, b
3573   1A6B 5A            add d, b
3574   1A6C E4            pop a
3575   1A6D 2A            mov b, [d]
3576   1A6E 54            add a, b
3577   1A6F 27            mov b, a
3578   1A70 E4            pop a
3579   1A71 D7            push a
3580   1A72 11            mov a, b
3581   1A73 29 31 39      mov b, [__carry] ; carry
3582   1A76 54            add a, b
3583   1A77 27            mov b, a
3584   1A78 E4            pop a
3585   1A79 E7            pop d
3586   1A7A FD 43         mov [d], b
3587   1A7C 26 00 00      mov b, 0
3588   1A7F FD 42 31 39   mov [__carry], b
3589   1A83             _if60_cond:
3590   1A83 29 D9 38      mov b, [__cnarr] ; cnarr
3591   1A86 D7            push a
3592   1A87 74            mov d, b
3593   1A88 DA            push d
3594   1A89 29 2F 39      mov b, [__pos] ; pos
3595   1A8C E7            pop d
3596   1A8D 10 02 00      mov a, 2
3597   1A90 AC            mul a, b
3598   1A91 5A            add d, b
3599   1A92 E4            pop a
3600   1A93 2A            mov b, [d]
3601   1A94 D7            push a
3602   1A95 11            mov a, b
3603   1A96 26 63 00      mov b, 99
3604   1A99 B0            cmp a, b
3605   1A9A 0E            lodflgs
3606   1A9B 87 03         and al, %00000011
3607   1A9D B9 00         cmp al, 0
3608   1A9F 0E            lodflgs
3609   1AA0 22 00         mov ah, 0
3610   1AA2 27            mov b, a
3611   1AA3 E4            pop a
3612   1AA4 C0 00 00      cmp b, 0
3613   1AA7 C6 E1 1A      je _if60_exit
3614   1AAA             _if60_true:
3615   1AAA 26 01 00      mov b, 1
3616   1AAD FD 42 31 39   mov [__carry], b
3617   1AB1 29 D9 38      mov b, [__cnarr] ; cnarr
3618   1AB4 D7            push a
3619   1AB5 74            mov d, b
3620   1AB6 DA            push d
3621   1AB7 29 2F 39      mov b, [__pos] ; pos
3622   1ABA E7            pop d
3623   1ABB 10 02 00      mov a, 2
3624   1ABE AC            mul a, b
3625   1ABF 5A            add d, b
3626   1AC0 E4            pop a
3627   1AC1 DA            push d
3628   1AC2 29 D9 38      mov b, [__cnarr] ; cnarr
3629   1AC5 D7            push a
3630   1AC6 74            mov d, b
3631   1AC7 DA            push d
3632   1AC8 29 2F 39      mov b, [__pos] ; pos
3633   1ACB E7            pop d
3634   1ACC 10 02 00      mov a, 2
3635   1ACF AC            mul a, b
3636   1AD0 5A            add d, b
3637   1AD1 E4            pop a
3638   1AD2 2A            mov b, [d]
3639   1AD3 D7            push a
3640   1AD4 11            mov a, b
3641   1AD5 26 64 00      mov b, 100
3642   1AD8 60            sub a, b
3643   1AD9 27            mov b, a
3644   1ADA E4            pop a
3645   1ADB E7            pop d
3646   1ADC FD 43         mov [d], b
3647   1ADE 0A E1 1A      jmp _if60_exit
3648   1AE1             _if60_exit:
3649   1AE1             _for59_update:
3650   1AE1 29 2F 39      mov b, [__pos] ; pos
3651   1AE4 D7            push a
3652   1AE5 11            mov a, b
3653   1AE6 FD 77         inc b
3654   1AE8 FD 42 2F 39   mov [__pos], b
3655   1AEC 27            mov b, a
3656   1AED E4            pop a
3657   1AEE 0A 21 1A      jmp _for59_cond
3658   1AF1             _for59_exit:
3659   1AF1 F9            leave
3660   1AF2 09            ret
3661   1AF3             
3662   1AF3             protominus:
3663   1AF3 D2            push bp
3664   1AF4 9B            mov bp, sp
3665   1AF5 26 00 00      mov b, 0
3666   1AF8 FD 42 31 39   mov [__carry], b
3667   1AFC             _for61_init:
3668   1AFC 26 00 00      mov b, 0
3669   1AFF FD 42 2F 39   mov [__pos], b
3670   1B03             _for61_cond:
3671   1B03 29 2F 39      mov b, [__pos] ; pos
3672   1B06 D7            push a
3673   1B07 11            mov a, b
3674   1B08 26 0C 00      mov b, 12
3675   1B0B B0            cmp a, b
3676   1B0C 0E            lodflgs
3677   1B0D 87 02         and al, %00000010 ; <
3678   1B0F FD 9C         shr al
3679   1B11 22 00         mov ah, 0
3680   1B13 27            mov b, a
3681   1B14 E4            pop a
3682   1B15 C0 00 00      cmp b, 0
3683   1B18 C6 F0 1B      je _for61_exit
3684   1B1B             _for61_block:
3685   1B1B 26 00 00      mov b, 0
3686   1B1E FD 42 33 39   mov [__nextcarry], b
3687   1B22             _if62_cond:
3688   1B22 29 8B 38      mov b, [__bnarr] ; bnarr
3689   1B25 D7            push a
3690   1B26 74            mov d, b
3691   1B27 DA            push d
3692   1B28 29 2F 39      mov b, [__pos] ; pos
3693   1B2B E7            pop d
3694   1B2C 10 02 00      mov a, 2
3695   1B2F AC            mul a, b
3696   1B30 5A            add d, b
3697   1B31 E4            pop a
3698   1B32 2A            mov b, [d]
3699   1B33 D7            push a
3700   1B34 11            mov a, b
3701   1B35 29 31 39      mov b, [__carry] ; carry
3702   1B38 54            add a, b
3703   1B39 27            mov b, a
3704   1B3A E4            pop a
3705   1B3B D7            push a
3706   1B3C 11            mov a, b
3707   1B3D 29 71 38      mov b, [__anarr] ; anarr
3708   1B40 D7            push a
3709   1B41 74            mov d, b
3710   1B42 DA            push d
3711   1B43 29 2F 39      mov b, [__pos] ; pos
3712   1B46 E7            pop d
3713   1B47 10 02 00      mov a, 2
3714   1B4A AC            mul a, b
3715   1B4B 5A            add d, b
3716   1B4C E4            pop a
3717   1B4D 2A            mov b, [d]
3718   1B4E B0            cmp a, b
3719   1B4F 0E            lodflgs
3720   1B50 87 03         and al, %00000011
3721   1B52 B9 00         cmp al, 0
3722   1B54 0E            lodflgs
3723   1B55 22 00         mov ah, 0
3724   1B57 27            mov b, a
3725   1B58 E4            pop a
3726   1B59 C0 00 00      cmp b, 0
3727   1B5C C6 96 1B      je _if62_exit
3728   1B5F             _if62_true:
3729   1B5F 29 71 38      mov b, [__anarr] ; anarr
3730   1B62 D7            push a
3731   1B63 74            mov d, b
3732   1B64 DA            push d
3733   1B65 29 2F 39      mov b, [__pos] ; pos
3734   1B68 E7            pop d
3735   1B69 10 02 00      mov a, 2
3736   1B6C AC            mul a, b
3737   1B6D 5A            add d, b
3738   1B6E E4            pop a
3739   1B6F DA            push d
3740   1B70 29 71 38      mov b, [__anarr] ; anarr
3741   1B73 D7            push a
3742   1B74 74            mov d, b
3743   1B75 DA            push d
3744   1B76 29 2F 39      mov b, [__pos] ; pos
3745   1B79 E7            pop d
3746   1B7A 10 02 00      mov a, 2
3747   1B7D AC            mul a, b
3748   1B7E 5A            add d, b
3749   1B7F E4            pop a
3750   1B80 2A            mov b, [d]
3751   1B81 D7            push a
3752   1B82 11            mov a, b
3753   1B83 26 64 00      mov b, 100
3754   1B86 54            add a, b
3755   1B87 27            mov b, a
3756   1B88 E4            pop a
3757   1B89 E7            pop d
3758   1B8A FD 43         mov [d], b
3759   1B8C 26 01 00      mov b, 1
3760   1B8F FD 42 33 39   mov [__nextcarry], b
3761   1B93 0A 96 1B      jmp _if62_exit
3762   1B96             _if62_exit:
3763   1B96 29 D9 38      mov b, [__cnarr] ; cnarr
3764   1B99 D7            push a
3765   1B9A 74            mov d, b
3766   1B9B DA            push d
3767   1B9C 29 2F 39      mov b, [__pos] ; pos
3768   1B9F E7            pop d
3769   1BA0 10 02 00      mov a, 2
3770   1BA3 AC            mul a, b
3771   1BA4 5A            add d, b
3772   1BA5 E4            pop a
3773   1BA6 DA            push d
3774   1BA7 29 71 38      mov b, [__anarr] ; anarr
3775   1BAA D7            push a
3776   1BAB 74            mov d, b
3777   1BAC DA            push d
3778   1BAD 29 2F 39      mov b, [__pos] ; pos
3779   1BB0 E7            pop d
3780   1BB1 10 02 00      mov a, 2
3781   1BB4 AC            mul a, b
3782   1BB5 5A            add d, b
3783   1BB6 E4            pop a
3784   1BB7 2A            mov b, [d]
3785   1BB8 D7            push a
3786   1BB9 11            mov a, b
3787   1BBA 29 8B 38      mov b, [__bnarr] ; bnarr
3788   1BBD D7            push a
3789   1BBE 74            mov d, b
3790   1BBF DA            push d
3791   1BC0 29 2F 39      mov b, [__pos] ; pos
3792   1BC3 E7            pop d
3793   1BC4 10 02 00      mov a, 2
3794   1BC7 AC            mul a, b
3795   1BC8 5A            add d, b
3796   1BC9 E4            pop a
3797   1BCA 2A            mov b, [d]
3798   1BCB 60            sub a, b
3799   1BCC 27            mov b, a
3800   1BCD E4            pop a
3801   1BCE D7            push a
3802   1BCF 11            mov a, b
3803   1BD0 29 31 39      mov b, [__carry] ; carry
3804   1BD3 60            sub a, b
3805   1BD4 27            mov b, a
3806   1BD5 E4            pop a
3807   1BD6 E7            pop d
3808   1BD7 FD 43         mov [d], b
3809   1BD9 29 33 39      mov b, [__nextcarry] ; nextcarry
3810   1BDC FD 42 31 39   mov [__carry], b
3811   1BE0             _for61_update:
3812   1BE0 29 2F 39      mov b, [__pos] ; pos
3813   1BE3 D7            push a
3814   1BE4 11            mov a, b
3815   1BE5 FD 77         inc b
3816   1BE7 FD 42 2F 39   mov [__pos], b
3817   1BEB 27            mov b, a
3818   1BEC E4            pop a
3819   1BED 0A 03 1B      jmp _for61_cond
3820   1BF0             _for61_exit:
3821   1BF0             _if63_cond:
3822   1BF0 29 31 39      mov b, [__carry] ; carry
3823   1BF3 D7            push a
3824   1BF4 11            mov a, b
3825   1BF5 26 01 00      mov b, 1
3826   1BF8 B0            cmp a, b
3827   1BF9 0E            lodflgs
3828   1BFA 87 01         and al, %00000001 ; ==
3829   1BFC 22 00         mov ah, 0
3830   1BFE 27            mov b, a
3831   1BFF E4            pop a
3832   1C00 C0 00 00      cmp b, 0
3833   1C03 C6 17 1C      je _if63_exit
3834   1C06             _if63_true:
3835   1C06 26 01 00      mov b, 1
3836   1C09 FD 42 2B 39   mov [__csign], b
3837   1C0D 26 00 00      mov b, 0
3838   1C10 FD 42 31 39   mov [__carry], b
3839   1C14 0A 17 1C      jmp _if63_exit
3840   1C17             _if63_exit:
3841   1C17 F9            leave
3842   1C18 09            ret
3843   1C19             
3844   1C19             pminus:
3845   1C19 D2            push bp
3846   1C1A 9B            mov bp, sp
3847   1C1B             _for64_init:
3848   1C1B 26 00 00      mov b, 0
3849   1C1E FD 42 61 39   mov [__divi], b
3850   1C22             _for64_cond:
3851   1C22 29 61 39      mov b, [__divi] ; divi
3852   1C25 D7            push a
3853   1C26 11            mov a, b
3854   1C27 26 0C 00      mov b, 12
3855   1C2A B0            cmp a, b
3856   1C2B 0E            lodflgs
3857   1C2C 87 02         and al, %00000010 ; <
3858   1C2E FD 9C         shr al
3859   1C30 22 00         mov ah, 0
3860   1C32 27            mov b, a
3861   1C33 E4            pop a
3862   1C34 C0 00 00      cmp b, 0
3863   1C37 C6 61 1C      je _for64_exit
3864   1C3A             _for64_block:
3865   1C3A 29 D9 38      mov b, [__cnarr] ; cnarr
3866   1C3D D7            push a
3867   1C3E 74            mov d, b
3868   1C3F DA            push d
3869   1C40 29 61 39      mov b, [__divi] ; divi
3870   1C43 E7            pop d
3871   1C44 10 02 00      mov a, 2
3872   1C47 AC            mul a, b
3873   1C48 5A            add d, b
3874   1C49 E4            pop a
3875   1C4A DA            push d
3876   1C4B 26 00 00      mov b, 0
3877   1C4E E7            pop d
3878   1C4F FD 43         mov [d], b
3879   1C51             _for64_update:
3880   1C51 29 61 39      mov b, [__divi] ; divi
3881   1C54 D7            push a
3882   1C55 11            mov a, b
3883   1C56 FD 77         inc b
3884   1C58 FD 42 61 39   mov [__divi], b
3885   1C5C 27            mov b, a
3886   1C5D E4            pop a
3887   1C5E 0A 22 1C      jmp _for64_cond
3888   1C61             _for64_exit:
3889   1C61 07 C1 18      call checkabsabsize
3890   1C64             _if65_cond:
3891   1C64 29 27 39      mov b, [__asign] ; asign
3892   1C67 D7            push a
3893   1C68 11            mov a, b
3894   1C69 29 29 39      mov b, [__bsign] ; bsign
3895   1C6C B0            cmp a, b
3896   1C6D 0E            lodflgs
3897   1C6E 87 01         and al, %00000001 ; ==
3898   1C70 22 00         mov ah, 0
3899   1C72 27            mov b, a
3900   1C73 E4            pop a
3901   1C74 DB            push al
3902   1C75 C0 00 00      cmp b, 0
3903   1C78 0E            lodflgs ; transform condition into a single bit
3904   1C79 29 39 39      mov b, [__aeqb] ; aeqb
3905   1C7C D7            push a
3906   1C7D 11            mov a, b
3907   1C7E 26 01 00      mov b, 1
3908   1C81 B0            cmp a, b
3909   1C82 0E            lodflgs
3910   1C83 87 01         and al, %00000001 ; ==
3911   1C85 22 00         mov ah, 0
3912   1C87 27            mov b, a
3913   1C88 E4            pop a
3914   1C89 DB            push al
3915   1C8A C0 00 00      cmp b, 0
3916   1C8D 0E            lodflgs
3917   1C8E EA            pop bl ; matches previous 'push al'
3918   1C8F 8C            or al, bl
3919   1C90 8F 01         xor al, %00000001
3920   1C92 2F            mov bl, al
3921   1C93 A7 00         mov bh, 0
3922   1C95 E8            pop al
3923   1C96 C0 00 00      cmp b, 0
3924   1C99 C6 EC 1C      je _if65_exit
3925   1C9C             _if65_true:
3926   1C9C 26 00 00      mov b, 0
3927   1C9F FD 42 2B 39   mov [__csign], b
3928   1CA3             _for66_init:
3929   1CA3 26 01 00      mov b, 1
3930   1CA6 FD 42 2F 39   mov [__pos], b
3931   1CAA             _for66_cond:
3932   1CAA 29 2F 39      mov b, [__pos] ; pos
3933   1CAD D7            push a
3934   1CAE 11            mov a, b
3935   1CAF 26 0C 00      mov b, 12
3936   1CB2 B0            cmp a, b
3937   1CB3 0E            lodflgs
3938   1CB4 87 02         and al, %00000010 ; <
3939   1CB6 FD 9C         shr al
3940   1CB8 22 00         mov ah, 0
3941   1CBA 27            mov b, a
3942   1CBB E4            pop a
3943   1CBC C0 00 00      cmp b, 0
3944   1CBF C6 E9 1C      je _for66_exit
3945   1CC2             _for66_block:
3946   1CC2 29 D9 38      mov b, [__cnarr] ; cnarr
3947   1CC5 D7            push a
3948   1CC6 74            mov d, b
3949   1CC7 DA            push d
3950   1CC8 29 2F 39      mov b, [__pos] ; pos
3951   1CCB E7            pop d
3952   1CCC 10 02 00      mov a, 2
3953   1CCF AC            mul a, b
3954   1CD0 5A            add d, b
3955   1CD1 E4            pop a
3956   1CD2 DA            push d
3957   1CD3 26 00 00      mov b, 0
3958   1CD6 E7            pop d
3959   1CD7 FD 43         mov [d], b
3960   1CD9             _for66_update:
3961   1CD9 29 2F 39      mov b, [__pos] ; pos
3962   1CDC D7            push a
3963   1CDD 11            mov a, b
3964   1CDE FD 77         inc b
3965   1CE0 FD 42 2F 39   mov [__pos], b
3966   1CE4 27            mov b, a
3967   1CE5 E4            pop a
3968   1CE6 0A AA 1C      jmp _for66_cond
3969   1CE9             _for66_exit:
3970   1CE9 0A EC 1C      jmp _if65_exit
3971   1CEC             _if65_exit:
3972   1CEC             _if67_cond:
3973   1CEC 29 27 39      mov b, [__asign] ; asign
3974   1CEF D7            push a
3975   1CF0 11            mov a, b
3976   1CF1 26 00 00      mov b, 0
3977   1CF4 B0            cmp a, b
3978   1CF5 0E            lodflgs
3979   1CF6 87 01         and al, %00000001 ; ==
3980   1CF8 22 00         mov ah, 0
3981   1CFA 27            mov b, a
3982   1CFB E4            pop a
3983   1CFC DB            push al
3984   1CFD C0 00 00      cmp b, 0
3985   1D00 0E            lodflgs ; transform condition into a single bit
3986   1D01 29 29 39      mov b, [__bsign] ; bsign
3987   1D04 D7            push a
3988   1D05 11            mov a, b
3989   1D06 26 00 00      mov b, 0
3990   1D09 B0            cmp a, b
3991   1D0A 0E            lodflgs
3992   1D0B 87 01         and al, %00000001 ; ==
3993   1D0D 22 00         mov ah, 0
3994   1D0F 27            mov b, a
3995   1D10 E4            pop a
3996   1D11 DB            push al
3997   1D12 C0 00 00      cmp b, 0
3998   1D15 0E            lodflgs
3999   1D16 EA            pop bl ; matches previous 'push al'
4000   1D17 8C            or al, bl
4001   1D18 8F 01         xor al, %00000001
4002   1D1A 2F            mov bl, al
4003   1D1B A7 00         mov bh, 0
4004   1D1D E8            pop al
4005   1D1E DB            push al
4006   1D1F C0 00 00      cmp b, 0
4007   1D22 0E            lodflgs ; transform condition into a single bit
4008   1D23 29 3D 39      mov b, [__ageb] ; ageb
4009   1D26 D7            push a
4010   1D27 11            mov a, b
4011   1D28 26 01 00      mov b, 1
4012   1D2B B0            cmp a, b
4013   1D2C 0E            lodflgs
4014   1D2D 87 01         and al, %00000001 ; ==
4015   1D2F 22 00         mov ah, 0
4016   1D31 27            mov b, a
4017   1D32 E4            pop a
4018   1D33 DB            push al
4019   1D34 C0 00 00      cmp b, 0
4020   1D37 0E            lodflgs
4021   1D38 EA            pop bl ; matches previous 'push al'
4022   1D39 8C            or al, bl
4023   1D3A 8F 01         xor al, %00000001
4024   1D3C 2F            mov bl, al
4025   1D3D A7 00         mov bh, 0
4026   1D3F E8            pop al
4027   1D40 C0 00 00      cmp b, 0
4028   1D43 C6 53 1D      je _if67_exit
4029   1D46             _if67_true:
4030   1D46 26 00 00      mov b, 0
4031   1D49 FD 42 2B 39   mov [__csign], b
4032   1D4D 07 F3 1A      call protominus
4033   1D50 0A 53 1D      jmp _if67_exit
4034   1D53             _if67_exit:
4035   1D53             _if68_cond:
4036   1D53 29 27 39      mov b, [__asign] ; asign
4037   1D56 D7            push a
4038   1D57 11            mov a, b
4039   1D58 26 00 00      mov b, 0
4040   1D5B B0            cmp a, b
4041   1D5C 0E            lodflgs
4042   1D5D 87 01         and al, %00000001 ; ==
4043   1D5F 22 00         mov ah, 0
4044   1D61 27            mov b, a
4045   1D62 E4            pop a
4046   1D63 DB            push al
4047   1D64 C0 00 00      cmp b, 0
4048   1D67 0E            lodflgs ; transform condition into a single bit
4049   1D68 29 29 39      mov b, [__bsign] ; bsign
4050   1D6B D7            push a
4051   1D6C 11            mov a, b
4052   1D6D 26 00 00      mov b, 0
4053   1D70 B0            cmp a, b
4054   1D71 0E            lodflgs
4055   1D72 87 01         and al, %00000001 ; ==
4056   1D74 22 00         mov ah, 0
4057   1D76 27            mov b, a
4058   1D77 E4            pop a
4059   1D78 DB            push al
4060   1D79 C0 00 00      cmp b, 0
4061   1D7C 0E            lodflgs
4062   1D7D EA            pop bl ; matches previous 'push al'
4063   1D7E 8C            or al, bl
4064   1D7F 8F 01         xor al, %00000001
4065   1D81 2F            mov bl, al
4066   1D82 A7 00         mov bh, 0
4067   1D84 E8            pop al
4068   1D85 DB            push al
4069   1D86 C0 00 00      cmp b, 0
4070   1D89 0E            lodflgs ; transform condition into a single bit
4071   1D8A 29 37 39      mov b, [__bgta] ; bgta
4072   1D8D D7            push a
4073   1D8E 11            mov a, b
4074   1D8F 26 01 00      mov b, 1
4075   1D92 B0            cmp a, b
4076   1D93 0E            lodflgs
4077   1D94 87 01         and al, %00000001 ; ==
4078   1D96 22 00         mov ah, 0
4079   1D98 27            mov b, a
4080   1D99 E4            pop a
4081   1D9A DB            push al
4082   1D9B C0 00 00      cmp b, 0
4083   1D9E 0E            lodflgs
4084   1D9F EA            pop bl ; matches previous 'push al'
4085   1DA0 8C            or al, bl
4086   1DA1 8F 01         xor al, %00000001
4087   1DA3 2F            mov bl, al
4088   1DA4 A7 00         mov bh, 0
4089   1DA6 E8            pop al
4090   1DA7 C0 00 00      cmp b, 0
4091   1DAA C6 BD 1D      je _if68_exit
4092   1DAD             _if68_true:
4093   1DAD 26 01 00      mov b, 1
4094   1DB0 FD 42 2B 39   mov [__csign], b
4095   1DB4 07 DD 17      call swapab
4096   1DB7 07 F3 1A      call protominus
4097   1DBA 0A BD 1D      jmp _if68_exit
4098   1DBD             _if68_exit:
4099   1DBD             _if69_cond:
4100   1DBD 29 27 39      mov b, [__asign] ; asign
4101   1DC0 D7            push a
4102   1DC1 11            mov a, b
4103   1DC2 26 01 00      mov b, 1
4104   1DC5 B0            cmp a, b
4105   1DC6 0E            lodflgs
4106   1DC7 87 01         and al, %00000001 ; ==
4107   1DC9 22 00         mov ah, 0
4108   1DCB 27            mov b, a
4109   1DCC E4            pop a
4110   1DCD DB            push al
4111   1DCE C0 00 00      cmp b, 0
4112   1DD1 0E            lodflgs ; transform condition into a single bit
4113   1DD2 29 29 39      mov b, [__bsign] ; bsign
4114   1DD5 D7            push a
4115   1DD6 11            mov a, b
4116   1DD7 26 01 00      mov b, 1
4117   1DDA B0            cmp a, b
4118   1DDB 0E            lodflgs
4119   1DDC 87 01         and al, %00000001 ; ==
4120   1DDE 22 00         mov ah, 0
4121   1DE0 27            mov b, a
4122   1DE1 E4            pop a
4123   1DE2 DB            push al
4124   1DE3 C0 00 00      cmp b, 0
4125   1DE6 0E            lodflgs
4126   1DE7 EA            pop bl ; matches previous 'push al'
4127   1DE8 8C            or al, bl
4128   1DE9 8F 01         xor al, %00000001
4129   1DEB 2F            mov bl, al
4130   1DEC A7 00         mov bh, 0
4131   1DEE E8            pop al
4132   1DEF DB            push al
4133   1DF0 C0 00 00      cmp b, 0
4134   1DF3 0E            lodflgs ; transform condition into a single bit
4135   1DF4 29 3D 39      mov b, [__ageb] ; ageb
4136   1DF7 D7            push a
4137   1DF8 11            mov a, b
4138   1DF9 26 01 00      mov b, 1
4139   1DFC B0            cmp a, b
4140   1DFD 0E            lodflgs
4141   1DFE 87 01         and al, %00000001 ; ==
4142   1E00 22 00         mov ah, 0
4143   1E02 27            mov b, a
4144   1E03 E4            pop a
4145   1E04 DB            push al
4146   1E05 C0 00 00      cmp b, 0
4147   1E08 0E            lodflgs
4148   1E09 EA            pop bl ; matches previous 'push al'
4149   1E0A 8C            or al, bl
4150   1E0B 8F 01         xor al, %00000001
4151   1E0D 2F            mov bl, al
4152   1E0E A7 00         mov bh, 0
4153   1E10 E8            pop al
4154   1E11 C0 00 00      cmp b, 0
4155   1E14 C6 24 1E      je _if69_exit
4156   1E17             _if69_true:
4157   1E17 26 01 00      mov b, 1
4158   1E1A FD 42 2B 39   mov [__csign], b
4159   1E1E 07 F3 1A      call protominus
4160   1E21 0A 24 1E      jmp _if69_exit
4161   1E24             _if69_exit:
4162   1E24             _if70_cond:
4163   1E24 29 27 39      mov b, [__asign] ; asign
4164   1E27 D7            push a
4165   1E28 11            mov a, b
4166   1E29 26 01 00      mov b, 1
4167   1E2C B0            cmp a, b
4168   1E2D 0E            lodflgs
4169   1E2E 87 01         and al, %00000001 ; ==
4170   1E30 22 00         mov ah, 0
4171   1E32 27            mov b, a
4172   1E33 E4            pop a
4173   1E34 DB            push al
4174   1E35 C0 00 00      cmp b, 0
4175   1E38 0E            lodflgs ; transform condition into a single bit
4176   1E39 29 29 39      mov b, [__bsign] ; bsign
4177   1E3C D7            push a
4178   1E3D 11            mov a, b
4179   1E3E 26 01 00      mov b, 1
4180   1E41 B0            cmp a, b
4181   1E42 0E            lodflgs
4182   1E43 87 01         and al, %00000001 ; ==
4183   1E45 22 00         mov ah, 0
4184   1E47 27            mov b, a
4185   1E48 E4            pop a
4186   1E49 DB            push al
4187   1E4A C0 00 00      cmp b, 0
4188   1E4D 0E            lodflgs
4189   1E4E EA            pop bl ; matches previous 'push al'
4190   1E4F 8C            or al, bl
4191   1E50 8F 01         xor al, %00000001
4192   1E52 2F            mov bl, al
4193   1E53 A7 00         mov bh, 0
4194   1E55 E8            pop al
4195   1E56 DB            push al
4196   1E57 C0 00 00      cmp b, 0
4197   1E5A 0E            lodflgs ; transform condition into a single bit
4198   1E5B 29 37 39      mov b, [__bgta] ; bgta
4199   1E5E D7            push a
4200   1E5F 11            mov a, b
4201   1E60 26 01 00      mov b, 1
4202   1E63 B0            cmp a, b
4203   1E64 0E            lodflgs
4204   1E65 87 01         and al, %00000001 ; ==
4205   1E67 22 00         mov ah, 0
4206   1E69 27            mov b, a
4207   1E6A E4            pop a
4208   1E6B DB            push al
4209   1E6C C0 00 00      cmp b, 0
4210   1E6F 0E            lodflgs
4211   1E70 EA            pop bl ; matches previous 'push al'
4212   1E71 8C            or al, bl
4213   1E72 8F 01         xor al, %00000001
4214   1E74 2F            mov bl, al
4215   1E75 A7 00         mov bh, 0
4216   1E77 E8            pop al
4217   1E78 C0 00 00      cmp b, 0
4218   1E7B C6 8E 1E      je _if70_exit
4219   1E7E             _if70_true:
4220   1E7E 26 00 00      mov b, 0
4221   1E81 FD 42 2B 39   mov [__csign], b
4222   1E85 07 DD 17      call swapab
4223   1E88 07 F3 1A      call protominus
4224   1E8B 0A 8E 1E      jmp _if70_exit
4225   1E8E             _if70_exit:
4226   1E8E             _if71_cond:
4227   1E8E 29 27 39      mov b, [__asign] ; asign
4228   1E91 D7            push a
4229   1E92 11            mov a, b
4230   1E93 26 00 00      mov b, 0
4231   1E96 B0            cmp a, b
4232   1E97 0E            lodflgs
4233   1E98 87 01         and al, %00000001 ; ==
4234   1E9A 22 00         mov ah, 0
4235   1E9C 27            mov b, a
4236   1E9D E4            pop a
4237   1E9E DB            push al
4238   1E9F C0 00 00      cmp b, 0
4239   1EA2 0E            lodflgs ; transform condition into a single bit
4240   1EA3 29 29 39      mov b, [__bsign] ; bsign
4241   1EA6 D7            push a
4242   1EA7 11            mov a, b
4243   1EA8 26 01 00      mov b, 1
4244   1EAB B0            cmp a, b
4245   1EAC 0E            lodflgs
4246   1EAD 87 01         and al, %00000001 ; ==
4247   1EAF 22 00         mov ah, 0
4248   1EB1 27            mov b, a
4249   1EB2 E4            pop a
4250   1EB3 DB            push al
4251   1EB4 C0 00 00      cmp b, 0
4252   1EB7 0E            lodflgs
4253   1EB8 EA            pop bl ; matches previous 'push al'
4254   1EB9 8C            or al, bl
4255   1EBA 8F 01         xor al, %00000001
4256   1EBC 2F            mov bl, al
4257   1EBD A7 00         mov bh, 0
4258   1EBF E8            pop al
4259   1EC0 C0 00 00      cmp b, 0
4260   1EC3 C6 D3 1E      je _if71_exit
4261   1EC6             _if71_true:
4262   1EC6 26 00 00      mov b, 0
4263   1EC9 FD 42 2B 39   mov [__csign], b
4264   1ECD 07 11 1A      call protoplus
4265   1ED0 0A D3 1E      jmp _if71_exit
4266   1ED3             _if71_exit:
4267   1ED3             _if72_cond:
4268   1ED3 29 27 39      mov b, [__asign] ; asign
4269   1ED6 D7            push a
4270   1ED7 11            mov a, b
4271   1ED8 26 01 00      mov b, 1
4272   1EDB B0            cmp a, b
4273   1EDC 0E            lodflgs
4274   1EDD 87 01         and al, %00000001 ; ==
4275   1EDF 22 00         mov ah, 0
4276   1EE1 27            mov b, a
4277   1EE2 E4            pop a
4278   1EE3 DB            push al
4279   1EE4 C0 00 00      cmp b, 0
4280   1EE7 0E            lodflgs ; transform condition into a single bit
4281   1EE8 29 29 39      mov b, [__bsign] ; bsign
4282   1EEB D7            push a
4283   1EEC 11            mov a, b
4284   1EED 26 00 00      mov b, 0
4285   1EF0 B0            cmp a, b
4286   1EF1 0E            lodflgs
4287   1EF2 87 01         and al, %00000001 ; ==
4288   1EF4 22 00         mov ah, 0
4289   1EF6 27            mov b, a
4290   1EF7 E4            pop a
4291   1EF8 DB            push al
4292   1EF9 C0 00 00      cmp b, 0
4293   1EFC 0E            lodflgs
4294   1EFD EA            pop bl ; matches previous 'push al'
4295   1EFE 8C            or al, bl
4296   1EFF 8F 01         xor al, %00000001
4297   1F01 2F            mov bl, al
4298   1F02 A7 00         mov bh, 0
4299   1F04 E8            pop al
4300   1F05 C0 00 00      cmp b, 0
4301   1F08 C6 18 1F      je _if72_exit
4302   1F0B             _if72_true:
4303   1F0B 26 01 00      mov b, 1
4304   1F0E FD 42 2B 39   mov [__csign], b
4305   1F12 07 11 1A      call protoplus
4306   1F15 0A 18 1F      jmp _if72_exit
4307   1F18             _if72_exit:
4308   1F18 F9            leave
4309   1F19 09            ret
4310   1F1A             
4311   1F1A             minus:
4312   1F1A D2            push bp
4313   1F1B 9B            mov bp, sp
4314   1F1C 07 63 15      call fixsignin
4315   1F1F 07 19 1C      call pminus
4316   1F22 07 D9 16      call fixcsizezero
4317   1F25 07 88 16      call fixsignout
4318   1F28 F9            leave
4319   1F29 09            ret
4320   1F2A             
4321   1F2A             pplus:
4322   1F2A D2            push bp
4323   1F2B 9B            mov bp, sp
4324   1F2C             _for73_init:
4325   1F2C 26 00 00      mov b, 0
4326   1F2F FD 42 61 39   mov [__divi], b
4327   1F33             _for73_cond:
4328   1F33 29 61 39      mov b, [__divi] ; divi
4329   1F36 D7            push a
4330   1F37 11            mov a, b
4331   1F38 26 0C 00      mov b, 12
4332   1F3B B0            cmp a, b
4333   1F3C 0E            lodflgs
4334   1F3D 87 02         and al, %00000010 ; <
4335   1F3F FD 9C         shr al
4336   1F41 22 00         mov ah, 0
4337   1F43 27            mov b, a
4338   1F44 E4            pop a
4339   1F45 C0 00 00      cmp b, 0
4340   1F48 C6 72 1F      je _for73_exit
4341   1F4B             _for73_block:
4342   1F4B 29 D9 38      mov b, [__cnarr] ; cnarr
4343   1F4E D7            push a
4344   1F4F 74            mov d, b
4345   1F50 DA            push d
4346   1F51 29 61 39      mov b, [__divi] ; divi
4347   1F54 E7            pop d
4348   1F55 10 02 00      mov a, 2
4349   1F58 AC            mul a, b
4350   1F59 5A            add d, b
4351   1F5A E4            pop a
4352   1F5B DA            push d
4353   1F5C 26 00 00      mov b, 0
4354   1F5F E7            pop d
4355   1F60 FD 43         mov [d], b
4356   1F62             _for73_update:
4357   1F62 29 61 39      mov b, [__divi] ; divi
4358   1F65 D7            push a
4359   1F66 11            mov a, b
4360   1F67 FD 77         inc b
4361   1F69 FD 42 61 39   mov [__divi], b
4362   1F6D 27            mov b, a
4363   1F6E E4            pop a
4364   1F6F 0A 33 1F      jmp _for73_cond
4365   1F72             _for73_exit:
4366   1F72 07 C1 18      call checkabsabsize
4367   1F75             _if74_cond:
4368   1F75 29 27 39      mov b, [__asign] ; asign
4369   1F78 D7            push a
4370   1F79 11            mov a, b
4371   1F7A 26 00 00      mov b, 0
4372   1F7D B0            cmp a, b
4373   1F7E 0E            lodflgs
4374   1F7F 87 01         and al, %00000001 ; ==
4375   1F81 22 00         mov ah, 0
4376   1F83 27            mov b, a
4377   1F84 E4            pop a
4378   1F85 DB            push al
4379   1F86 C0 00 00      cmp b, 0
4380   1F89 0E            lodflgs ; transform condition into a single bit
4381   1F8A 29 29 39      mov b, [__bsign] ; bsign
4382   1F8D D7            push a
4383   1F8E 11            mov a, b
4384   1F8F 26 01 00      mov b, 1
4385   1F92 B0            cmp a, b
4386   1F93 0E            lodflgs
4387   1F94 87 01         and al, %00000001 ; ==
4388   1F96 22 00         mov ah, 0
4389   1F98 27            mov b, a
4390   1F99 E4            pop a
4391   1F9A DB            push al
4392   1F9B C0 00 00      cmp b, 0
4393   1F9E 0E            lodflgs
4394   1F9F EA            pop bl ; matches previous 'push al'
4395   1FA0 8C            or al, bl
4396   1FA1 8F 01         xor al, %00000001
4397   1FA3 2F            mov bl, al
4398   1FA4 A7 00         mov bh, 0
4399   1FA6 E8            pop al
4400   1FA7 DB            push al
4401   1FA8 C0 00 00      cmp b, 0
4402   1FAB 0E            lodflgs ; transform condition into a single bit
4403   1FAC 29 39 39      mov b, [__aeqb] ; aeqb
4404   1FAF D7            push a
4405   1FB0 11            mov a, b
4406   1FB1 26 01 00      mov b, 1
4407   1FB4 B0            cmp a, b
4408   1FB5 0E            lodflgs
4409   1FB6 87 01         and al, %00000001 ; ==
4410   1FB8 22 00         mov ah, 0
4411   1FBA 27            mov b, a
4412   1FBB E4            pop a
4413   1FBC DB            push al
4414   1FBD C0 00 00      cmp b, 0
4415   1FC0 0E            lodflgs
4416   1FC1 EA            pop bl ; matches previous 'push al'
4417   1FC2 8C            or al, bl
4418   1FC3 8F 01         xor al, %00000001
4419   1FC5 2F            mov bl, al
4420   1FC6 A7 00         mov bh, 0
4421   1FC8 E8            pop al
4422   1FC9 C0 00 00      cmp b, 0
4423   1FCC C6 2F 20      je _if74_exit
4424   1FCF             _if74_true:
4425   1FCF 26 00 00      mov b, 0
4426   1FD2 FD 42 27 39   mov [__asign], b
4427   1FD6 26 00 00      mov b, 0
4428   1FD9 FD 42 29 39   mov [__bsign], b
4429   1FDD 26 00 00      mov b, 0
4430   1FE0 FD 42 2B 39   mov [__csign], b
4431   1FE4             _for75_init:
4432   1FE4 26 01 00      mov b, 1
4433   1FE7 FD 42 2F 39   mov [__pos], b
4434   1FEB             _for75_cond:
4435   1FEB 29 2F 39      mov b, [__pos] ; pos
4436   1FEE D7            push a
4437   1FEF 11            mov a, b
4438   1FF0 26 0C 00      mov b, 12
4439   1FF3 B0            cmp a, b
4440   1FF4 0E            lodflgs
4441   1FF5 87 02         and al, %00000010 ; <
4442   1FF7 FD 9C         shr al
4443   1FF9 22 00         mov ah, 0
4444   1FFB 27            mov b, a
4445   1FFC E4            pop a
4446   1FFD C0 00 00      cmp b, 0
4447   2000 C6 2A 20      je _for75_exit
4448   2003             _for75_block:
4449   2003 29 D9 38      mov b, [__cnarr] ; cnarr
4450   2006 D7            push a
4451   2007 74            mov d, b
4452   2008 DA            push d
4453   2009 29 2F 39      mov b, [__pos] ; pos
4454   200C E7            pop d
4455   200D 10 02 00      mov a, 2
4456   2010 AC            mul a, b
4457   2011 5A            add d, b
4458   2012 E4            pop a
4459   2013 DA            push d
4460   2014 26 00 00      mov b, 0
4461   2017 E7            pop d
4462   2018 FD 43         mov [d], b
4463   201A             _for75_update:
4464   201A 29 2F 39      mov b, [__pos] ; pos
4465   201D D7            push a
4466   201E 11            mov a, b
4467   201F FD 77         inc b
4468   2021 FD 42 2F 39   mov [__pos], b
4469   2025 27            mov b, a
4470   2026 E4            pop a
4471   2027 0A EB 1F      jmp _for75_cond
4472   202A             _for75_exit:
4473   202A F9            leave
4474   202B 09            ret
4475   202C 0A 2F 20      jmp _if74_exit
4476   202F             _if74_exit:
4477   202F             _if76_cond:
4478   202F 29 27 39      mov b, [__asign] ; asign
4479   2032 D7            push a
4480   2033 11            mov a, b
4481   2034 26 01 00      mov b, 1
4482   2037 B0            cmp a, b
4483   2038 0E            lodflgs
4484   2039 87 01         and al, %00000001 ; ==
4485   203B 22 00         mov ah, 0
4486   203D 27            mov b, a
4487   203E E4            pop a
4488   203F DB            push al
4489   2040 C0 00 00      cmp b, 0
4490   2043 0E            lodflgs ; transform condition into a single bit
4491   2044 29 29 39      mov b, [__bsign] ; bsign
4492   2047 D7            push a
4493   2048 11            mov a, b
4494   2049 26 00 00      mov b, 0
4495   204C B0            cmp a, b
4496   204D 0E            lodflgs
4497   204E 87 01         and al, %00000001 ; ==
4498   2050 22 00         mov ah, 0
4499   2052 27            mov b, a
4500   2053 E4            pop a
4501   2054 DB            push al
4502   2055 C0 00 00      cmp b, 0
4503   2058 0E            lodflgs
4504   2059 EA            pop bl ; matches previous 'push al'
4505   205A 8C            or al, bl
4506   205B 8F 01         xor al, %00000001
4507   205D 2F            mov bl, al
4508   205E A7 00         mov bh, 0
4509   2060 E8            pop al
4510   2061 DB            push al
4511   2062 C0 00 00      cmp b, 0
4512   2065 0E            lodflgs ; transform condition into a single bit
4513   2066 29 39 39      mov b, [__aeqb] ; aeqb
4514   2069 D7            push a
4515   206A 11            mov a, b
4516   206B 26 01 00      mov b, 1
4517   206E B0            cmp a, b
4518   206F 0E            lodflgs
4519   2070 87 01         and al, %00000001 ; ==
4520   2072 22 00         mov ah, 0
4521   2074 27            mov b, a
4522   2075 E4            pop a
4523   2076 DB            push al
4524   2077 C0 00 00      cmp b, 0
4525   207A 0E            lodflgs
4526   207B EA            pop bl ; matches previous 'push al'
4527   207C 8C            or al, bl
4528   207D 8F 01         xor al, %00000001
4529   207F 2F            mov bl, al
4530   2080 A7 00         mov bh, 0
4531   2082 E8            pop al
4532   2083 C0 00 00      cmp b, 0
4533   2086 C6 E9 20      je _if76_exit
4534   2089             _if76_true:
4535   2089 26 00 00      mov b, 0
4536   208C FD 42 27 39   mov [__asign], b
4537   2090 26 00 00      mov b, 0
4538   2093 FD 42 29 39   mov [__bsign], b
4539   2097 26 00 00      mov b, 0
4540   209A FD 42 2B 39   mov [__csign], b
4541   209E             _for77_init:
4542   209E 26 01 00      mov b, 1
4543   20A1 FD 42 2F 39   mov [__pos], b
4544   20A5             _for77_cond:
4545   20A5 29 2F 39      mov b, [__pos] ; pos
4546   20A8 D7            push a
4547   20A9 11            mov a, b
4548   20AA 26 0C 00      mov b, 12
4549   20AD B0            cmp a, b
4550   20AE 0E            lodflgs
4551   20AF 87 02         and al, %00000010 ; <
4552   20B1 FD 9C         shr al
4553   20B3 22 00         mov ah, 0
4554   20B5 27            mov b, a
4555   20B6 E4            pop a
4556   20B7 C0 00 00      cmp b, 0
4557   20BA C6 E4 20      je _for77_exit
4558   20BD             _for77_block:
4559   20BD 29 D9 38      mov b, [__cnarr] ; cnarr
4560   20C0 D7            push a
4561   20C1 74            mov d, b
4562   20C2 DA            push d
4563   20C3 29 2F 39      mov b, [__pos] ; pos
4564   20C6 E7            pop d
4565   20C7 10 02 00      mov a, 2
4566   20CA AC            mul a, b
4567   20CB 5A            add d, b
4568   20CC E4            pop a
4569   20CD DA            push d
4570   20CE 26 00 00      mov b, 0
4571   20D1 E7            pop d
4572   20D2 FD 43         mov [d], b
4573   20D4             _for77_update:
4574   20D4 29 2F 39      mov b, [__pos] ; pos
4575   20D7 D7            push a
4576   20D8 11            mov a, b
4577   20D9 FD 77         inc b
4578   20DB FD 42 2F 39   mov [__pos], b
4579   20DF 27            mov b, a
4580   20E0 E4            pop a
4581   20E1 0A A5 20      jmp _for77_cond
4582   20E4             _for77_exit:
4583   20E4 F9            leave
4584   20E5 09            ret
4585   20E6 0A E9 20      jmp _if76_exit
4586   20E9             _if76_exit:
4587   20E9             _if78_cond:
4588   20E9 29 27 39      mov b, [__asign] ; asign
4589   20EC D7            push a
4590   20ED 11            mov a, b
4591   20EE 26 00 00      mov b, 0
4592   20F1 B0            cmp a, b
4593   20F2 0E            lodflgs
4594   20F3 87 01         and al, %00000001 ; ==
4595   20F5 22 00         mov ah, 0
4596   20F7 27            mov b, a
4597   20F8 E4            pop a
4598   20F9 DB            push al
4599   20FA C0 00 00      cmp b, 0
4600   20FD 0E            lodflgs ; transform condition into a single bit
4601   20FE 29 29 39      mov b, [__bsign] ; bsign
4602   2101 D7            push a
4603   2102 11            mov a, b
4604   2103 26 00 00      mov b, 0
4605   2106 B0            cmp a, b
4606   2107 0E            lodflgs
4607   2108 87 01         and al, %00000001 ; ==
4608   210A 22 00         mov ah, 0
4609   210C 27            mov b, a
4610   210D E4            pop a
4611   210E DB            push al
4612   210F C0 00 00      cmp b, 0
4613   2112 0E            lodflgs
4614   2113 EA            pop bl ; matches previous 'push al'
4615   2114 8C            or al, bl
4616   2115 8F 01         xor al, %00000001
4617   2117 2F            mov bl, al
4618   2118 A7 00         mov bh, 0
4619   211A E8            pop al
4620   211B C0 00 00      cmp b, 0
4621   211E C6 3E 21      je _if78_exit
4622   2121             _if78_true:
4623   2121 26 00 00      mov b, 0
4624   2124 FD 42 27 39   mov [__asign], b
4625   2128 26 00 00      mov b, 0
4626   212B FD 42 29 39   mov [__bsign], b
4627   212F 26 00 00      mov b, 0
4628   2132 FD 42 2B 39   mov [__csign], b
4629   2136 07 11 1A      call protoplus
4630   2139 F9            leave
4631   213A 09            ret
4632   213B 0A 3E 21      jmp _if78_exit
4633   213E             _if78_exit:
4634   213E             _if79_cond:
4635   213E 29 27 39      mov b, [__asign] ; asign
4636   2141 D7            push a
4637   2142 11            mov a, b
4638   2143 26 01 00      mov b, 1
4639   2146 B0            cmp a, b
4640   2147 0E            lodflgs
4641   2148 87 01         and al, %00000001 ; ==
4642   214A 22 00         mov ah, 0
4643   214C 27            mov b, a
4644   214D E4            pop a
4645   214E DB            push al
4646   214F C0 00 00      cmp b, 0
4647   2152 0E            lodflgs ; transform condition into a single bit
4648   2153 29 29 39      mov b, [__bsign] ; bsign
4649   2156 D7            push a
4650   2157 11            mov a, b
4651   2158 26 01 00      mov b, 1
4652   215B B0            cmp a, b
4653   215C 0E            lodflgs
4654   215D 87 01         and al, %00000001 ; ==
4655   215F 22 00         mov ah, 0
4656   2161 27            mov b, a
4657   2162 E4            pop a
4658   2163 DB            push al
4659   2164 C0 00 00      cmp b, 0
4660   2167 0E            lodflgs
4661   2168 EA            pop bl ; matches previous 'push al'
4662   2169 8C            or al, bl
4663   216A 8F 01         xor al, %00000001
4664   216C 2F            mov bl, al
4665   216D A7 00         mov bh, 0
4666   216F E8            pop al
4667   2170 C0 00 00      cmp b, 0
4668   2173 C6 93 21      je _if79_exit
4669   2176             _if79_true:
4670   2176 26 00 00      mov b, 0
4671   2179 FD 42 27 39   mov [__asign], b
4672   217D 26 00 00      mov b, 0
4673   2180 FD 42 29 39   mov [__bsign], b
4674   2184 26 01 00      mov b, 1
4675   2187 FD 42 2B 39   mov [__csign], b
4676   218B 07 11 1A      call protoplus
4677   218E F9            leave
4678   218F 09            ret
4679   2190 0A 93 21      jmp _if79_exit
4680   2193             _if79_exit:
4681   2193             _if80_cond:
4682   2193 29 27 39      mov b, [__asign] ; asign
4683   2196 D7            push a
4684   2197 11            mov a, b
4685   2198 26 00 00      mov b, 0
4686   219B B0            cmp a, b
4687   219C 0E            lodflgs
4688   219D 87 01         and al, %00000001 ; ==
4689   219F 22 00         mov ah, 0
4690   21A1 27            mov b, a
4691   21A2 E4            pop a
4692   21A3 DB            push al
4693   21A4 C0 00 00      cmp b, 0
4694   21A7 0E            lodflgs ; transform condition into a single bit
4695   21A8 29 29 39      mov b, [__bsign] ; bsign
4696   21AB D7            push a
4697   21AC 11            mov a, b
4698   21AD 26 01 00      mov b, 1
4699   21B0 B0            cmp a, b
4700   21B1 0E            lodflgs
4701   21B2 87 01         and al, %00000001 ; ==
4702   21B4 22 00         mov ah, 0
4703   21B6 27            mov b, a
4704   21B7 E4            pop a
4705   21B8 DB            push al
4706   21B9 C0 00 00      cmp b, 0
4707   21BC 0E            lodflgs
4708   21BD EA            pop bl ; matches previous 'push al'
4709   21BE 8C            or al, bl
4710   21BF 8F 01         xor al, %00000001
4711   21C1 2F            mov bl, al
4712   21C2 A7 00         mov bh, 0
4713   21C4 E8            pop al
4714   21C5 DB            push al
4715   21C6 C0 00 00      cmp b, 0
4716   21C9 0E            lodflgs ; transform condition into a single bit
4717   21CA 29 35 39      mov b, [__agtb] ; agtb
4718   21CD D7            push a
4719   21CE 11            mov a, b
4720   21CF 26 01 00      mov b, 1
4721   21D2 B0            cmp a, b
4722   21D3 0E            lodflgs
4723   21D4 87 01         and al, %00000001 ; ==
4724   21D6 22 00         mov ah, 0
4725   21D8 27            mov b, a
4726   21D9 E4            pop a
4727   21DA DB            push al
4728   21DB C0 00 00      cmp b, 0
4729   21DE 0E            lodflgs
4730   21DF EA            pop bl ; matches previous 'push al'
4731   21E0 8C            or al, bl
4732   21E1 8F 01         xor al, %00000001
4733   21E3 2F            mov bl, al
4734   21E4 A7 00         mov bh, 0
4735   21E6 E8            pop al
4736   21E7 C0 00 00      cmp b, 0
4737   21EA C6 0A 22      je _if80_exit
4738   21ED             _if80_true:
4739   21ED 26 00 00      mov b, 0
4740   21F0 FD 42 27 39   mov [__asign], b
4741   21F4 26 00 00      mov b, 0
4742   21F7 FD 42 29 39   mov [__bsign], b
4743   21FB 26 00 00      mov b, 0
4744   21FE FD 42 2B 39   mov [__csign], b
4745   2202 07 F3 1A      call protominus
4746   2205 F9            leave
4747   2206 09            ret
4748   2207 0A 0A 22      jmp _if80_exit
4749   220A             _if80_exit:
4750   220A             _if81_cond:
4751   220A 29 27 39      mov b, [__asign] ; asign
4752   220D D7            push a
4753   220E 11            mov a, b
4754   220F 26 00 00      mov b, 0
4755   2212 B0            cmp a, b
4756   2213 0E            lodflgs
4757   2214 87 01         and al, %00000001 ; ==
4758   2216 22 00         mov ah, 0
4759   2218 27            mov b, a
4760   2219 E4            pop a
4761   221A DB            push al
4762   221B C0 00 00      cmp b, 0
4763   221E 0E            lodflgs ; transform condition into a single bit
4764   221F 29 29 39      mov b, [__bsign] ; bsign
4765   2222 D7            push a
4766   2223 11            mov a, b
4767   2224 26 01 00      mov b, 1
4768   2227 B0            cmp a, b
4769   2228 0E            lodflgs
4770   2229 87 01         and al, %00000001 ; ==
4771   222B 22 00         mov ah, 0
4772   222D 27            mov b, a
4773   222E E4            pop a
4774   222F DB            push al
4775   2230 C0 00 00      cmp b, 0
4776   2233 0E            lodflgs
4777   2234 EA            pop bl ; matches previous 'push al'
4778   2235 8C            or al, bl
4779   2236 8F 01         xor al, %00000001
4780   2238 2F            mov bl, al
4781   2239 A7 00         mov bh, 0
4782   223B E8            pop al
4783   223C DB            push al
4784   223D C0 00 00      cmp b, 0
4785   2240 0E            lodflgs ; transform condition into a single bit
4786   2241 29 37 39      mov b, [__bgta] ; bgta
4787   2244 D7            push a
4788   2245 11            mov a, b
4789   2246 26 01 00      mov b, 1
4790   2249 B0            cmp a, b
4791   224A 0E            lodflgs
4792   224B 87 01         and al, %00000001 ; ==
4793   224D 22 00         mov ah, 0
4794   224F 27            mov b, a
4795   2250 E4            pop a
4796   2251 DB            push al
4797   2252 C0 00 00      cmp b, 0
4798   2255 0E            lodflgs
4799   2256 EA            pop bl ; matches previous 'push al'
4800   2257 8C            or al, bl
4801   2258 8F 01         xor al, %00000001
4802   225A 2F            mov bl, al
4803   225B A7 00         mov bh, 0
4804   225D E8            pop al
4805   225E C0 00 00      cmp b, 0
4806   2261 C6 84 22      je _if81_exit
4807   2264             _if81_true:
4808   2264 26 00 00      mov b, 0
4809   2267 FD 42 27 39   mov [__asign], b
4810   226B 26 00 00      mov b, 0
4811   226E FD 42 29 39   mov [__bsign], b
4812   2272 26 01 00      mov b, 1
4813   2275 FD 42 2B 39   mov [__csign], b
4814   2279 07 DD 17      call swapab
4815   227C 07 F3 1A      call protominus
4816   227F F9            leave
4817   2280 09            ret
4818   2281 0A 84 22      jmp _if81_exit
4819   2284             _if81_exit:
4820   2284             _if82_cond:
4821   2284 29 27 39      mov b, [__asign] ; asign
4822   2287 D7            push a
4823   2288 11            mov a, b
4824   2289 26 01 00      mov b, 1
4825   228C B0            cmp a, b
4826   228D 0E            lodflgs
4827   228E 87 01         and al, %00000001 ; ==
4828   2290 22 00         mov ah, 0
4829   2292 27            mov b, a
4830   2293 E4            pop a
4831   2294 DB            push al
4832   2295 C0 00 00      cmp b, 0
4833   2298 0E            lodflgs ; transform condition into a single bit
4834   2299 29 29 39      mov b, [__bsign] ; bsign
4835   229C D7            push a
4836   229D 11            mov a, b
4837   229E 26 00 00      mov b, 0
4838   22A1 B0            cmp a, b
4839   22A2 0E            lodflgs
4840   22A3 87 01         and al, %00000001 ; ==
4841   22A5 22 00         mov ah, 0
4842   22A7 27            mov b, a
4843   22A8 E4            pop a
4844   22A9 DB            push al
4845   22AA C0 00 00      cmp b, 0
4846   22AD 0E            lodflgs
4847   22AE EA            pop bl ; matches previous 'push al'
4848   22AF 8C            or al, bl
4849   22B0 8F 01         xor al, %00000001
4850   22B2 2F            mov bl, al
4851   22B3 A7 00         mov bh, 0
4852   22B5 E8            pop al
4853   22B6 DB            push al
4854   22B7 C0 00 00      cmp b, 0
4855   22BA 0E            lodflgs ; transform condition into a single bit
4856   22BB 29 35 39      mov b, [__agtb] ; agtb
4857   22BE D7            push a
4858   22BF 11            mov a, b
4859   22C0 26 01 00      mov b, 1
4860   22C3 B0            cmp a, b
4861   22C4 0E            lodflgs
4862   22C5 87 01         and al, %00000001 ; ==
4863   22C7 22 00         mov ah, 0
4864   22C9 27            mov b, a
4865   22CA E4            pop a
4866   22CB DB            push al
4867   22CC C0 00 00      cmp b, 0
4868   22CF 0E            lodflgs
4869   22D0 EA            pop bl ; matches previous 'push al'
4870   22D1 8C            or al, bl
4871   22D2 8F 01         xor al, %00000001
4872   22D4 2F            mov bl, al
4873   22D5 A7 00         mov bh, 0
4874   22D7 E8            pop al
4875   22D8 C0 00 00      cmp b, 0
4876   22DB C6 FE 22      je _if82_exit
4877   22DE             _if82_true:
4878   22DE 26 01 00      mov b, 1
4879   22E1 FD 42 2B 39   mov [__csign], b
4880   22E5 07 DD 17      call swapab
4881   22E8 26 00 00      mov b, 0
4882   22EB FD 42 27 39   mov [__asign], b
4883   22EF 26 00 00      mov b, 0
4884   22F2 FD 42 29 39   mov [__bsign], b
4885   22F6 07 19 1C      call pminus
4886   22F9 F9            leave
4887   22FA 09            ret
4888   22FB 0A FE 22      jmp _if82_exit
4889   22FE             _if82_exit:
4890   22FE             _if83_cond:
4891   22FE 29 27 39      mov b, [__asign] ; asign
4892   2301 D7            push a
4893   2302 11            mov a, b
4894   2303 26 01 00      mov b, 1
4895   2306 B0            cmp a, b
4896   2307 0E            lodflgs
4897   2308 87 01         and al, %00000001 ; ==
4898   230A 22 00         mov ah, 0
4899   230C 27            mov b, a
4900   230D E4            pop a
4901   230E DB            push al
4902   230F C0 00 00      cmp b, 0
4903   2312 0E            lodflgs ; transform condition into a single bit
4904   2313 29 29 39      mov b, [__bsign] ; bsign
4905   2316 D7            push a
4906   2317 11            mov a, b
4907   2318 26 00 00      mov b, 0
4908   231B B0            cmp a, b
4909   231C 0E            lodflgs
4910   231D 87 01         and al, %00000001 ; ==
4911   231F 22 00         mov ah, 0
4912   2321 27            mov b, a
4913   2322 E4            pop a
4914   2323 DB            push al
4915   2324 C0 00 00      cmp b, 0
4916   2327 0E            lodflgs
4917   2328 EA            pop bl ; matches previous 'push al'
4918   2329 8C            or al, bl
4919   232A 8F 01         xor al, %00000001
4920   232C 2F            mov bl, al
4921   232D A7 00         mov bh, 0
4922   232F E8            pop al
4923   2330 DB            push al
4924   2331 C0 00 00      cmp b, 0
4925   2334 0E            lodflgs ; transform condition into a single bit
4926   2335 29 37 39      mov b, [__bgta] ; bgta
4927   2338 D7            push a
4928   2339 11            mov a, b
4929   233A 26 01 00      mov b, 1
4930   233D B0            cmp a, b
4931   233E 0E            lodflgs
4932   233F 87 01         and al, %00000001 ; ==
4933   2341 22 00         mov ah, 0
4934   2343 27            mov b, a
4935   2344 E4            pop a
4936   2345 DB            push al
4937   2346 C0 00 00      cmp b, 0
4938   2349 0E            lodflgs
4939   234A EA            pop bl ; matches previous 'push al'
4940   234B 8C            or al, bl
4941   234C 8F 01         xor al, %00000001
4942   234E 2F            mov bl, al
4943   234F A7 00         mov bh, 0
4944   2351 E8            pop al
4945   2352 C0 00 00      cmp b, 0
4946   2355 C6 78 23      je _if83_exit
4947   2358             _if83_true:
4948   2358 26 00 00      mov b, 0
4949   235B FD 42 27 39   mov [__asign], b
4950   235F 26 00 00      mov b, 0
4951   2362 FD 42 29 39   mov [__bsign], b
4952   2366 26 00 00      mov b, 0
4953   2369 FD 42 2B 39   mov [__csign], b
4954   236D 07 DD 17      call swapab
4955   2370 07 F3 1A      call protominus
4956   2373 F9            leave
4957   2374 09            ret
4958   2375 0A 78 23      jmp _if83_exit
4959   2378             _if83_exit:
4960   2378 F9            leave
4961   2379 09            ret
4962   237A             
4963   237A             plus:
4964   237A D2            push bp
4965   237B 9B            mov bp, sp
4966   237C 07 63 15      call fixsignin
4967   237F 07 2A 1F      call pplus
4968   2382 07 D9 16      call fixcsizezero
4969   2385 07 88 16      call fixsignout
4970   2388 F9            leave
4971   2389 09            ret
4972   238A             
4973   238A             normmulres:
4974   238A D2            push bp
4975   238B 9B            mov bp, sp
4976   238C             _if84_cond:
4977   238C 29 0B 39      mov b, [__mulres] ; mulres
4978   238F D7            push a
4979   2390 74            mov d, b
4980   2391 DA            push d
4981   2392 26 17 00      mov b, 23
4982   2395 E7            pop d
4983   2396 10 02 00      mov a, 2
4984   2399 AC            mul a, b
4985   239A 5A            add d, b
4986   239B E4            pop a
4987   239C 2A            mov b, [d]
4988   239D D7            push a
4989   239E 11            mov a, b
4990   239F 26 63 00      mov b, 99
4991   23A2 B0            cmp a, b
4992   23A3 0E            lodflgs
4993   23A4 87 03         and al, %00000011
4994   23A6 B9 00         cmp al, 0
4995   23A8 0E            lodflgs
4996   23A9 22 00         mov ah, 0
4997   23AB 27            mov b, a
4998   23AC E4            pop a
4999   23AD C0 00 00      cmp b, 0
5000   23B0 C6 0B 24      je _if84_exit
5001   23B3             _if84_true:
5002   23B3 29 0B 39      mov b, [__mulres] ; mulres
5003   23B6 D7            push a
5004   23B7 74            mov d, b
5005   23B8 DA            push d
5006   23B9 26 17 00      mov b, 23
5007   23BC E7            pop d
5008   23BD 10 02 00      mov a, 2
5009   23C0 AC            mul a, b
5010   23C1 5A            add d, b
5011   23C2 E4            pop a
5012   23C3 2A            mov b, [d]
5013   23C4 D7            push a
5014   23C5 11            mov a, b
5015   23C6 26 64 00      mov b, 100
5016   23C9 AE            div a, b
5017   23CA FD 78         mov g, a
5018   23CC 11            mov a, b
5019   23CD FD 27         mov b, g
5020   23CF E4            pop a
5021   23D0 FD 42 4B 39   mov [__toolarge], b
5022   23D4 29 0B 39      mov b, [__mulres] ; mulres
5023   23D7 D7            push a
5024   23D8 74            mov d, b
5025   23D9 DA            push d
5026   23DA 26 17 00      mov b, 23
5027   23DD E7            pop d
5028   23DE 10 02 00      mov a, 2
5029   23E1 AC            mul a, b
5030   23E2 5A            add d, b
5031   23E3 E4            pop a
5032   23E4 DA            push d
5033   23E5 29 0B 39      mov b, [__mulres] ; mulres
5034   23E8 D7            push a
5035   23E9 74            mov d, b
5036   23EA DA            push d
5037   23EB 26 17 00      mov b, 23
5038   23EE E7            pop d
5039   23EF 10 02 00      mov a, 2
5040   23F2 AC            mul a, b
5041   23F3 5A            add d, b
5042   23F4 E4            pop a
5043   23F5 2A            mov b, [d]
5044   23F6 D7            push a
5045   23F7 11            mov a, b
5046   23F8 29 4B 39      mov b, [__toolarge] ; toolarge
5047   23FB D7            push a
5048   23FC 11            mov a, b
5049   23FD 26 64 00      mov b, 100
5050   2400 AC            mul a, b
5051   2401 E4            pop a
5052   2402 60            sub a, b
5053   2403 27            mov b, a
5054   2404 E4            pop a
5055   2405 E7            pop d
5056   2406 FD 43         mov [d], b
5057   2408 0A 0B 24      jmp _if84_exit
5058   240B             _if84_exit:
5059   240B 26 00 00      mov b, 0
5060   240E FD 42 4D 39   mov [__normal], b
5061   2412             _while85_cond:
5062   2412 29 4D 39      mov b, [__normal] ; normal
5063   2415 D7            push a
5064   2416 11            mov a, b
5065   2417 26 00 00      mov b, 0
5066   241A B0            cmp a, b
5067   241B 0E            lodflgs
5068   241C 87 01         and al, %00000001 ; ==
5069   241E 22 00         mov ah, 0
5070   2420 27            mov b, a
5071   2421 E4            pop a
5072   2422 C0 00 00      cmp b, 0
5073   2425 C6 33 25      je _while85_exit
5074   2428             _while85_block:
5075   2428 26 01 00      mov b, 1
5076   242B FD 42 4D 39   mov [__normal], b
5077   242F             _for86_init:
5078   242F 26 00 00      mov b, 0
5079   2432 FD 42 2D 39   mov [__protopos], b
5080   2436             _for86_cond:
5081   2436 29 2D 39      mov b, [__protopos] ; protopos
5082   2439 D7            push a
5083   243A 11            mov a, b
5084   243B 26 17 00      mov b, 23
5085   243E B0            cmp a, b
5086   243F 0E            lodflgs
5087   2440 87 02         and al, %00000010 ; <
5088   2442 FD 9C         shr al
5089   2444 22 00         mov ah, 0
5090   2446 27            mov b, a
5091   2447 E4            pop a
5092   2448 C0 00 00      cmp b, 0
5093   244B C6 30 25      je _for86_exit
5094   244E             _for86_block:
5095   244E 26 16 00      mov b, 22
5096   2451 D7            push a
5097   2452 11            mov a, b
5098   2453 29 2D 39      mov b, [__protopos] ; protopos
5099   2456 60            sub a, b
5100   2457 27            mov b, a
5101   2458 E4            pop a
5102   2459 FD 42 2F 39   mov [__pos], b
5103   245D             _if87_cond:
5104   245D 29 0B 39      mov b, [__mulres] ; mulres
5105   2460 D7            push a
5106   2461 74            mov d, b
5107   2462 DA            push d
5108   2463 29 2F 39      mov b, [__pos] ; pos
5109   2466 E7            pop d
5110   2467 10 02 00      mov a, 2
5111   246A AC            mul a, b
5112   246B 5A            add d, b
5113   246C E4            pop a
5114   246D 2A            mov b, [d]
5115   246E D7            push a
5116   246F 11            mov a, b
5117   2470 26 63 00      mov b, 99
5118   2473 B0            cmp a, b
5119   2474 0E            lodflgs
5120   2475 87 03         and al, %00000011
5121   2477 B9 00         cmp al, 0
5122   2479 0E            lodflgs
5123   247A 22 00         mov ah, 0
5124   247C 27            mov b, a
5125   247D E4            pop a
5126   247E C0 00 00      cmp b, 0
5127   2481 C6 20 25      je _if87_exit
5128   2484             _if87_true:
5129   2484 26 00 00      mov b, 0
5130   2487 FD 42 4D 39   mov [__normal], b
5131   248B 29 0B 39      mov b, [__mulres] ; mulres
5132   248E D7            push a
5133   248F 74            mov d, b
5134   2490 DA            push d
5135   2491 29 2F 39      mov b, [__pos] ; pos
5136   2494 E7            pop d
5137   2495 10 02 00      mov a, 2
5138   2498 AC            mul a, b
5139   2499 5A            add d, b
5140   249A E4            pop a
5141   249B 2A            mov b, [d]
5142   249C D7            push a
5143   249D 11            mov a, b
5144   249E 26 64 00      mov b, 100
5145   24A1 AE            div a, b
5146   24A2 FD 78         mov g, a
5147   24A4 11            mov a, b
5148   24A5 FD 27         mov b, g
5149   24A7 E4            pop a
5150   24A8 FD 42 4B 39   mov [__toolarge], b
5151   24AC 29 0B 39      mov b, [__mulres] ; mulres
5152   24AF D7            push a
5153   24B0 74            mov d, b
5154   24B1 DA            push d
5155   24B2 29 2F 39      mov b, [__pos] ; pos
5156   24B5 E7            pop d
5157   24B6 10 02 00      mov a, 2
5158   24B9 AC            mul a, b
5159   24BA 5A            add d, b
5160   24BB E4            pop a
5161   24BC DA            push d
5162   24BD 29 0B 39      mov b, [__mulres] ; mulres
5163   24C0 D7            push a
5164   24C1 74            mov d, b
5165   24C2 DA            push d
5166   24C3 29 2F 39      mov b, [__pos] ; pos
5167   24C6 E7            pop d
5168   24C7 10 02 00      mov a, 2
5169   24CA AC            mul a, b
5170   24CB 5A            add d, b
5171   24CC E4            pop a
5172   24CD 2A            mov b, [d]
5173   24CE D7            push a
5174   24CF 11            mov a, b
5175   24D0 29 4B 39      mov b, [__toolarge] ; toolarge
5176   24D3 D7            push a
5177   24D4 11            mov a, b
5178   24D5 26 64 00      mov b, 100
5179   24D8 AC            mul a, b
5180   24D9 E4            pop a
5181   24DA 60            sub a, b
5182   24DB 27            mov b, a
5183   24DC E4            pop a
5184   24DD E7            pop d
5185   24DE FD 43         mov [d], b
5186   24E0 29 0B 39      mov b, [__mulres] ; mulres
5187   24E3 D7            push a
5188   24E4 74            mov d, b
5189   24E5 DA            push d
5190   24E6 29 2F 39      mov b, [__pos] ; pos
5191   24E9 D7            push a
5192   24EA 11            mov a, b
5193   24EB 26 01 00      mov b, 1
5194   24EE 54            add a, b
5195   24EF 27            mov b, a
5196   24F0 E4            pop a
5197   24F1 E7            pop d
5198   24F2 10 02 00      mov a, 2
5199   24F5 AC            mul a, b
5200   24F6 5A            add d, b
5201   24F7 E4            pop a
5202   24F8 DA            push d
5203   24F9 29 0B 39      mov b, [__mulres] ; mulres
5204   24FC D7            push a
5205   24FD 74            mov d, b
5206   24FE DA            push d
5207   24FF 29 2F 39      mov b, [__pos] ; pos
5208   2502 D7            push a
5209   2503 11            mov a, b
5210   2504 26 01 00      mov b, 1
5211   2507 54            add a, b
5212   2508 27            mov b, a
5213   2509 E4            pop a
5214   250A E7            pop d
5215   250B 10 02 00      mov a, 2
5216   250E AC            mul a, b
5217   250F 5A            add d, b
5218   2510 E4            pop a
5219   2511 2A            mov b, [d]
5220   2512 D7            push a
5221   2513 11            mov a, b
5222   2514 29 4B 39      mov b, [__toolarge] ; toolarge
5223   2517 54            add a, b
5224   2518 27            mov b, a
5225   2519 E4            pop a
5226   251A E7            pop d
5227   251B FD 43         mov [d], b
5228   251D 0A 20 25      jmp _if87_exit
5229   2520             _if87_exit:
5230   2520             _for86_update:
5231   2520 29 2D 39      mov b, [__protopos] ; protopos
5232   2523 D7            push a
5233   2524 11            mov a, b
5234   2525 FD 77         inc b
5235   2527 FD 42 2D 39   mov [__protopos], b
5236   252B 27            mov b, a
5237   252C E4            pop a
5238   252D 0A 36 24      jmp _for86_cond
5239   2530             _for86_exit:
5240   2530 0A 12 24      jmp _while85_cond
5241   2533             _while85_exit:
5242   2533             _if88_cond:
5243   2533 29 0B 39      mov b, [__mulres] ; mulres
5244   2536 D7            push a
5245   2537 74            mov d, b
5246   2538 DA            push d
5247   2539 26 17 00      mov b, 23
5248   253C E7            pop d
5249   253D 10 02 00      mov a, 2
5250   2540 AC            mul a, b
5251   2541 5A            add d, b
5252   2542 E4            pop a
5253   2543 2A            mov b, [d]
5254   2544 D7            push a
5255   2545 11            mov a, b
5256   2546 26 63 00      mov b, 99
5257   2549 B0            cmp a, b
5258   254A 0E            lodflgs
5259   254B 87 03         and al, %00000011
5260   254D B9 00         cmp al, 0
5261   254F 0E            lodflgs
5262   2550 22 00         mov ah, 0
5263   2552 27            mov b, a
5264   2553 E4            pop a
5265   2554 C0 00 00      cmp b, 0
5266   2557 C6 B2 25      je _if88_exit
5267   255A             _if88_true:
5268   255A 29 0B 39      mov b, [__mulres] ; mulres
5269   255D D7            push a
5270   255E 74            mov d, b
5271   255F DA            push d
5272   2560 26 17 00      mov b, 23
5273   2563 E7            pop d
5274   2564 10 02 00      mov a, 2
5275   2567 AC            mul a, b
5276   2568 5A            add d, b
5277   2569 E4            pop a
5278   256A 2A            mov b, [d]
5279   256B D7            push a
5280   256C 11            mov a, b
5281   256D 26 64 00      mov b, 100
5282   2570 AE            div a, b
5283   2571 FD 78         mov g, a
5284   2573 11            mov a, b
5285   2574 FD 27         mov b, g
5286   2576 E4            pop a
5287   2577 FD 42 4B 39   mov [__toolarge], b
5288   257B 29 0B 39      mov b, [__mulres] ; mulres
5289   257E D7            push a
5290   257F 74            mov d, b
5291   2580 DA            push d
5292   2581 26 17 00      mov b, 23
5293   2584 E7            pop d
5294   2585 10 02 00      mov a, 2
5295   2588 AC            mul a, b
5296   2589 5A            add d, b
5297   258A E4            pop a
5298   258B DA            push d
5299   258C 29 0B 39      mov b, [__mulres] ; mulres
5300   258F D7            push a
5301   2590 74            mov d, b
5302   2591 DA            push d
5303   2592 26 17 00      mov b, 23
5304   2595 E7            pop d
5305   2596 10 02 00      mov a, 2
5306   2599 AC            mul a, b
5307   259A 5A            add d, b
5308   259B E4            pop a
5309   259C 2A            mov b, [d]
5310   259D D7            push a
5311   259E 11            mov a, b
5312   259F 29 4B 39      mov b, [__toolarge] ; toolarge
5313   25A2 D7            push a
5314   25A3 11            mov a, b
5315   25A4 26 64 00      mov b, 100
5316   25A7 AC            mul a, b
5317   25A8 E4            pop a
5318   25A9 60            sub a, b
5319   25AA 27            mov b, a
5320   25AB E4            pop a
5321   25AC E7            pop d
5322   25AD FD 43         mov [d], b
5323   25AF 0A B2 25      jmp _if88_exit
5324   25B2             _if88_exit:
5325   25B2 F9            leave
5326   25B3 09            ret
5327   25B4             
5328   25B4             prototimes:
5329   25B4 D2            push bp
5330   25B5 9B            mov bp, sp
5331   25B6             _for89_init:
5332   25B6 26 00 00      mov b, 0
5333   25B9 FD 42 61 39   mov [__divi], b
5334   25BD             _for89_cond:
5335   25BD 29 61 39      mov b, [__divi] ; divi
5336   25C0 D7            push a
5337   25C1 11            mov a, b
5338   25C2 26 0C 00      mov b, 12
5339   25C5 B0            cmp a, b
5340   25C6 0E            lodflgs
5341   25C7 87 02         and al, %00000010 ; <
5342   25C9 FD 9C         shr al
5343   25CB 22 00         mov ah, 0
5344   25CD 27            mov b, a
5345   25CE E4            pop a
5346   25CF C0 00 00      cmp b, 0
5347   25D2 C6 FC 25      je _for89_exit
5348   25D5             _for89_block:
5349   25D5 29 D9 38      mov b, [__cnarr] ; cnarr
5350   25D8 D7            push a
5351   25D9 74            mov d, b
5352   25DA DA            push d
5353   25DB 29 61 39      mov b, [__divi] ; divi
5354   25DE E7            pop d
5355   25DF 10 02 00      mov a, 2
5356   25E2 AC            mul a, b
5357   25E3 5A            add d, b
5358   25E4 E4            pop a
5359   25E5 DA            push d
5360   25E6 26 00 00      mov b, 0
5361   25E9 E7            pop d
5362   25EA FD 43         mov [d], b
5363   25EC             _for89_update:
5364   25EC 29 61 39      mov b, [__divi] ; divi
5365   25EF D7            push a
5366   25F0 11            mov a, b
5367   25F1 FD 77         inc b
5368   25F3 FD 42 61 39   mov [__divi], b
5369   25F7 27            mov b, a
5370   25F8 E4            pop a
5371   25F9 0A BD 25      jmp _for89_cond
5372   25FC             _for89_exit:
5373   25FC             _for90_init:
5374   25FC 26 00 00      mov b, 0
5375   25FF FD 42 61 39   mov [__divi], b
5376   2603             _for90_cond:
5377   2603 29 61 39      mov b, [__divi] ; divi
5378   2606 D7            push a
5379   2607 11            mov a, b
5380   2608 26 18 00      mov b, 24
5381   260B B0            cmp a, b
5382   260C 0E            lodflgs
5383   260D 87 02         and al, %00000010 ; <
5384   260F FD 9C         shr al
5385   2611 22 00         mov ah, 0
5386   2613 27            mov b, a
5387   2614 E4            pop a
5388   2615 C0 00 00      cmp b, 0
5389   2618 C6 42 26      je _for90_exit
5390   261B             _for90_block:
5391   261B 29 0B 39      mov b, [__mulres] ; mulres
5392   261E D7            push a
5393   261F 74            mov d, b
5394   2620 DA            push d
5395   2621 29 61 39      mov b, [__divi] ; divi
5396   2624 E7            pop d
5397   2625 10 02 00      mov a, 2
5398   2628 AC            mul a, b
5399   2629 5A            add d, b
5400   262A E4            pop a
5401   262B DA            push d
5402   262C 26 00 00      mov b, 0
5403   262F E7            pop d
5404   2630 FD 43         mov [d], b
5405   2632             _for90_update:
5406   2632 29 61 39      mov b, [__divi] ; divi
5407   2635 D7            push a
5408   2636 11            mov a, b
5409   2637 FD 77         inc b
5410   2639 FD 42 61 39   mov [__divi], b
5411   263D 27            mov b, a
5412   263E E4            pop a
5413   263F 0A 03 26      jmp _for90_cond
5414   2642             _for90_exit:
5415   2642             _for91_init:
5416   2642 26 00 00      mov b, 0
5417   2645 FD 42 4F 39   mov [__mulpos1], b
5418   2649             _for91_cond:
5419   2649 29 4F 39      mov b, [__mulpos1] ; mulpos1
5420   264C D7            push a
5421   264D 11            mov a, b
5422   264E 26 0C 00      mov b, 12
5423   2651 B0            cmp a, b
5424   2652 0E            lodflgs
5425   2653 87 02         and al, %00000010 ; <
5426   2655 FD 9C         shr al
5427   2657 22 00         mov ah, 0
5428   2659 27            mov b, a
5429   265A E4            pop a
5430   265B C0 00 00      cmp b, 0
5431   265E C6 03 27      je _for91_exit
5432   2661             _for91_block:
5433   2661             _for92_init:
5434   2661 26 00 00      mov b, 0
5435   2664 FD 42 51 39   mov [__mulpos2], b
5436   2668             _for92_cond:
5437   2668 29 51 39      mov b, [__mulpos2] ; mulpos2
5438   266B D7            push a
5439   266C 11            mov a, b
5440   266D 26 0C 00      mov b, 12
5441   2670 B0            cmp a, b
5442   2671 0E            lodflgs
5443   2672 87 02         and al, %00000010 ; <
5444   2674 FD 9C         shr al
5445   2676 22 00         mov ah, 0
5446   2678 27            mov b, a
5447   2679 E4            pop a
5448   267A C0 00 00      cmp b, 0
5449   267D C6 F0 26      je _for92_exit
5450   2680             _for92_block:
5451   2680 29 0B 39      mov b, [__mulres] ; mulres
5452   2683 D7            push a
5453   2684 74            mov d, b
5454   2685 DA            push d
5455   2686 29 4F 39      mov b, [__mulpos1] ; mulpos1
5456   2689 D7            push a
5457   268A 11            mov a, b
5458   268B 29 51 39      mov b, [__mulpos2] ; mulpos2
5459   268E 54            add a, b
5460   268F 27            mov b, a
5461   2690 E4            pop a
5462   2691 E7            pop d
5463   2692 10 02 00      mov a, 2
5464   2695 AC            mul a, b
5465   2696 5A            add d, b
5466   2697 E4            pop a
5467   2698 DA            push d
5468   2699 29 0B 39      mov b, [__mulres] ; mulres
5469   269C D7            push a
5470   269D 74            mov d, b
5471   269E DA            push d
5472   269F 29 4F 39      mov b, [__mulpos1] ; mulpos1
5473   26A2 D7            push a
5474   26A3 11            mov a, b
5475   26A4 29 51 39      mov b, [__mulpos2] ; mulpos2
5476   26A7 54            add a, b
5477   26A8 27            mov b, a
5478   26A9 E4            pop a
5479   26AA E7            pop d
5480   26AB 10 02 00      mov a, 2
5481   26AE AC            mul a, b
5482   26AF 5A            add d, b
5483   26B0 E4            pop a
5484   26B1 2A            mov b, [d]
5485   26B2 D7            push a
5486   26B3 11            mov a, b
5487   26B4 29 8B 38      mov b, [__bnarr] ; bnarr
5488   26B7 D7            push a
5489   26B8 74            mov d, b
5490   26B9 DA            push d
5491   26BA 29 51 39      mov b, [__mulpos2] ; mulpos2
5492   26BD E7            pop d
5493   26BE 10 02 00      mov a, 2
5494   26C1 AC            mul a, b
5495   26C2 5A            add d, b
5496   26C3 E4            pop a
5497   26C4 2A            mov b, [d]
5498   26C5 D7            push a
5499   26C6 11            mov a, b
5500   26C7 29 71 38      mov b, [__anarr] ; anarr
5501   26CA D7            push a
5502   26CB 74            mov d, b
5503   26CC DA            push d
5504   26CD 29 4F 39      mov b, [__mulpos1] ; mulpos1
5505   26D0 E7            pop d
5506   26D1 10 02 00      mov a, 2
5507   26D4 AC            mul a, b
5508   26D5 5A            add d, b
5509   26D6 E4            pop a
5510   26D7 2A            mov b, [d]
5511   26D8 AC            mul a, b
5512   26D9 E4            pop a
5513   26DA 54            add a, b
5514   26DB 27            mov b, a
5515   26DC E4            pop a
5516   26DD E7            pop d
5517   26DE FD 43         mov [d], b
5518   26E0             _for92_update:
5519   26E0 29 51 39      mov b, [__mulpos2] ; mulpos2
5520   26E3 D7            push a
5521   26E4 11            mov a, b
5522   26E5 FD 77         inc b
5523   26E7 FD 42 51 39   mov [__mulpos2], b
5524   26EB 27            mov b, a
5525   26EC E4            pop a
5526   26ED 0A 68 26      jmp _for92_cond
5527   26F0             _for92_exit:
5528   26F0 07 8A 23      call normmulres
5529   26F3             _for91_update:
5530   26F3 29 4F 39      mov b, [__mulpos1] ; mulpos1
5531   26F6 D7            push a
5532   26F7 11            mov a, b
5533   26F8 FD 77         inc b
5534   26FA FD 42 4F 39   mov [__mulpos1], b
5535   26FE 27            mov b, a
5536   26FF E4            pop a
5537   2700 0A 49 26      jmp _for91_cond
5538   2703             _for91_exit:
5539   2703 F9            leave
5540   2704 09            ret
5541   2705             
5542   2705             aincrease:
5543   2705 D2            push bp
5544   2706 9B            mov bp, sp
5545   2707             _for93_init:
5546   2707 26 0C 00      mov b, 12
5547   270A FD 42 61 39   mov [__divi], b
5548   270E             _for93_cond:
5549   270E 29 61 39      mov b, [__divi] ; divi
5550   2711 D7            push a
5551   2712 11            mov a, b
5552   2713 26 01 00      mov b, 1
5553   2716 B0            cmp a, b
5554   2717 0E            lodflgs
5555   2718 87 03         and al, %00000011
5556   271A B9 00         cmp al, 0
5557   271C 0E            lodflgs
5558   271D 22 00         mov ah, 0
5559   271F 27            mov b, a
5560   2720 E4            pop a
5561   2721 C0 00 00      cmp b, 0
5562   2724 C6 4D 28      je _for93_exit
5563   2727             _for93_block:
5564   2727 29 71 38      mov b, [__anarr] ; anarr
5565   272A D7            push a
5566   272B 74            mov d, b
5567   272C DA            push d
5568   272D 29 61 39      mov b, [__divi] ; divi
5569   2730 D7            push a
5570   2731 11            mov a, b
5571   2732 26 01 00      mov b, 1
5572   2735 60            sub a, b
5573   2736 27            mov b, a
5574   2737 E4            pop a
5575   2738 E7            pop d
5576   2739 10 02 00      mov a, 2
5577   273C AC            mul a, b
5578   273D 5A            add d, b
5579   273E E4            pop a
5580   273F 2A            mov b, [d]
5581   2740 D7            push a
5582   2741 11            mov a, b
5583   2742 26 0A 00      mov b, 10
5584   2745 AE            div a, b
5585   2746 FD 78         mov g, a
5586   2748 11            mov a, b
5587   2749 FD 27         mov b, g
5588   274B E4            pop a
5589   274C FD 42 69 39   mov [__subi], b
5590   2750 29 69 39      mov b, [__subi] ; subi
5591   2753 D7            push a
5592   2754 11            mov a, b
5593   2755 26 0A 00      mov b, 10
5594   2758 AC            mul a, b
5595   2759 E4            pop a
5596   275A FD 42 69 39   mov [__subi], b
5597   275E 29 71 38      mov b, [__anarr] ; anarr
5598   2761 D7            push a
5599   2762 74            mov d, b
5600   2763 DA            push d
5601   2764 29 61 39      mov b, [__divi] ; divi
5602   2767 D7            push a
5603   2768 11            mov a, b
5604   2769 26 01 00      mov b, 1
5605   276C 60            sub a, b
5606   276D 27            mov b, a
5607   276E E4            pop a
5608   276F E7            pop d
5609   2770 10 02 00      mov a, 2
5610   2773 AC            mul a, b
5611   2774 5A            add d, b
5612   2775 E4            pop a
5613   2776 DA            push d
5614   2777 29 71 38      mov b, [__anarr] ; anarr
5615   277A D7            push a
5616   277B 74            mov d, b
5617   277C DA            push d
5618   277D 29 61 39      mov b, [__divi] ; divi
5619   2780 D7            push a
5620   2781 11            mov a, b
5621   2782 26 01 00      mov b, 1
5622   2785 60            sub a, b
5623   2786 27            mov b, a
5624   2787 E4            pop a
5625   2788 E7            pop d
5626   2789 10 02 00      mov a, 2
5627   278C AC            mul a, b
5628   278D 5A            add d, b
5629   278E E4            pop a
5630   278F 2A            mov b, [d]
5631   2790 D7            push a
5632   2791 11            mov a, b
5633   2792 29 69 39      mov b, [__subi] ; subi
5634   2795 60            sub a, b
5635   2796 27            mov b, a
5636   2797 E4            pop a
5637   2798 E7            pop d
5638   2799 FD 43         mov [d], b
5639   279B 29 71 38      mov b, [__anarr] ; anarr
5640   279E D7            push a
5641   279F 74            mov d, b
5642   27A0 DA            push d
5643   27A1 29 61 39      mov b, [__divi] ; divi
5644   27A4 D7            push a
5645   27A5 11            mov a, b
5646   27A6 26 01 00      mov b, 1
5647   27A9 60            sub a, b
5648   27AA 27            mov b, a
5649   27AB E4            pop a
5650   27AC E7            pop d
5651   27AD 10 02 00      mov a, 2
5652   27B0 AC            mul a, b
5653   27B1 5A            add d, b
5654   27B2 E4            pop a
5655   27B3 DA            push d
5656   27B4 29 71 38      mov b, [__anarr] ; anarr
5657   27B7 D7            push a
5658   27B8 74            mov d, b
5659   27B9 DA            push d
5660   27BA 29 61 39      mov b, [__divi] ; divi
5661   27BD D7            push a
5662   27BE 11            mov a, b
5663   27BF 26 01 00      mov b, 1
5664   27C2 60            sub a, b
5665   27C3 27            mov b, a
5666   27C4 E4            pop a
5667   27C5 E7            pop d
5668   27C6 10 02 00      mov a, 2
5669   27C9 AC            mul a, b
5670   27CA 5A            add d, b
5671   27CB E4            pop a
5672   27CC 2A            mov b, [d]
5673   27CD D7            push a
5674   27CE 11            mov a, b
5675   27CF 26 0A 00      mov b, 10
5676   27D2 AC            mul a, b
5677   27D3 E4            pop a
5678   27D4 E7            pop d
5679   27D5 FD 43         mov [d], b
5680   27D7 29 71 38      mov b, [__anarr] ; anarr
5681   27DA D7            push a
5682   27DB 74            mov d, b
5683   27DC DA            push d
5684   27DD 29 61 39      mov b, [__divi] ; divi
5685   27E0 D7            push a
5686   27E1 11            mov a, b
5687   27E2 26 02 00      mov b, 2
5688   27E5 60            sub a, b
5689   27E6 27            mov b, a
5690   27E7 E4            pop a
5691   27E8 E7            pop d
5692   27E9 10 02 00      mov a, 2
5693   27EC AC            mul a, b
5694   27ED 5A            add d, b
5695   27EE E4            pop a
5696   27EF 2A            mov b, [d]
5697   27F0 D7            push a
5698   27F1 11            mov a, b
5699   27F2 26 0A 00      mov b, 10
5700   27F5 AE            div a, b
5701   27F6 FD 78         mov g, a
5702   27F8 11            mov a, b
5703   27F9 FD 27         mov b, g
5704   27FB E4            pop a
5705   27FC FD 42 69 39   mov [__subi], b
5706   2800 29 71 38      mov b, [__anarr] ; anarr
5707   2803 D7            push a
5708   2804 74            mov d, b
5709   2805 DA            push d
5710   2806 29 61 39      mov b, [__divi] ; divi
5711   2809 D7            push a
5712   280A 11            mov a, b
5713   280B 26 01 00      mov b, 1
5714   280E 60            sub a, b
5715   280F 27            mov b, a
5716   2810 E4            pop a
5717   2811 E7            pop d
5718   2812 10 02 00      mov a, 2
5719   2815 AC            mul a, b
5720   2816 5A            add d, b
5721   2817 E4            pop a
5722   2818 DA            push d
5723   2819 29 71 38      mov b, [__anarr] ; anarr
5724   281C D7            push a
5725   281D 74            mov d, b
5726   281E DA            push d
5727   281F 29 61 39      mov b, [__divi] ; divi
5728   2822 D7            push a
5729   2823 11            mov a, b
5730   2824 26 01 00      mov b, 1
5731   2827 60            sub a, b
5732   2828 27            mov b, a
5733   2829 E4            pop a
5734   282A E7            pop d
5735   282B 10 02 00      mov a, 2
5736   282E AC            mul a, b
5737   282F 5A            add d, b
5738   2830 E4            pop a
5739   2831 2A            mov b, [d]
5740   2832 D7            push a
5741   2833 11            mov a, b
5742   2834 29 69 39      mov b, [__subi] ; subi
5743   2837 54            add a, b
5744   2838 27            mov b, a
5745   2839 E4            pop a
5746   283A E7            pop d
5747   283B FD 43         mov [d], b
5748   283D             _for93_update:
5749   283D 29 61 39      mov b, [__divi] ; divi
5750   2840 D7            push a
5751   2841 11            mov a, b
5752   2842 FD 7D         dec b
5753   2844 FD 42 61 39   mov [__divi], b
5754   2848 27            mov b, a
5755   2849 E4            pop a
5756   284A 0A 0E 27      jmp _for93_cond
5757   284D             _for93_exit:
5758   284D 29 71 38      mov b, [__anarr] ; anarr
5759   2850 D7            push a
5760   2851 74            mov d, b
5761   2852 DA            push d
5762   2853 26 00 00      mov b, 0
5763   2856 E7            pop d
5764   2857 10 02 00      mov a, 2
5765   285A AC            mul a, b
5766   285B 5A            add d, b
5767   285C E4            pop a
5768   285D 2A            mov b, [d]
5769   285E FD 42 69 39   mov [__subi], b
5770   2862 29 71 38      mov b, [__anarr] ; anarr
5771   2865 D7            push a
5772   2866 74            mov d, b
5773   2867 DA            push d
5774   2868 26 00 00      mov b, 0
5775   286B E7            pop d
5776   286C 10 02 00      mov a, 2
5777   286F AC            mul a, b
5778   2870 5A            add d, b
5779   2871 E4            pop a
5780   2872 DA            push d
5781   2873 29 71 38      mov b, [__anarr] ; anarr
5782   2876 D7            push a
5783   2877 74            mov d, b
5784   2878 DA            push d
5785   2879 26 00 00      mov b, 0
5786   287C E7            pop d
5787   287D 10 02 00      mov a, 2
5788   2880 AC            mul a, b
5789   2881 5A            add d, b
5790   2882 E4            pop a
5791   2883 2A            mov b, [d]
5792   2884 D7            push a
5793   2885 11            mov a, b
5794   2886 26 0A 00      mov b, 10
5795   2889 AE            div a, b
5796   288A FD 78         mov g, a
5797   288C 11            mov a, b
5798   288D FD 27         mov b, g
5799   288F E4            pop a
5800   2890 E7            pop d
5801   2891 FD 43         mov [d], b
5802   2893 29 71 38      mov b, [__anarr] ; anarr
5803   2896 D7            push a
5804   2897 74            mov d, b
5805   2898 DA            push d
5806   2899 26 00 00      mov b, 0
5807   289C E7            pop d
5808   289D 10 02 00      mov a, 2
5809   28A0 AC            mul a, b
5810   28A1 5A            add d, b
5811   28A2 E4            pop a
5812   28A3 DA            push d
5813   28A4 29 71 38      mov b, [__anarr] ; anarr
5814   28A7 D7            push a
5815   28A8 74            mov d, b
5816   28A9 DA            push d
5817   28AA 26 00 00      mov b, 0
5818   28AD E7            pop d
5819   28AE 10 02 00      mov a, 2
5820   28B1 AC            mul a, b
5821   28B2 5A            add d, b
5822   28B3 E4            pop a
5823   28B4 2A            mov b, [d]
5824   28B5 D7            push a
5825   28B6 11            mov a, b
5826   28B7 26 0A 00      mov b, 10
5827   28BA AC            mul a, b
5828   28BB E4            pop a
5829   28BC E7            pop d
5830   28BD FD 43         mov [d], b
5831   28BF 29 71 38      mov b, [__anarr] ; anarr
5832   28C2 D7            push a
5833   28C3 74            mov d, b
5834   28C4 DA            push d
5835   28C5 26 00 00      mov b, 0
5836   28C8 E7            pop d
5837   28C9 10 02 00      mov a, 2
5838   28CC AC            mul a, b
5839   28CD 5A            add d, b
5840   28CE E4            pop a
5841   28CF DA            push d
5842   28D0 29 69 39      mov b, [__subi] ; subi
5843   28D3 D7            push a
5844   28D4 11            mov a, b
5845   28D5 29 71 38      mov b, [__anarr] ; anarr
5846   28D8 D7            push a
5847   28D9 74            mov d, b
5848   28DA DA            push d
5849   28DB 26 00 00      mov b, 0
5850   28DE E7            pop d
5851   28DF 10 02 00      mov a, 2
5852   28E2 AC            mul a, b
5853   28E3 5A            add d, b
5854   28E4 E4            pop a
5855   28E5 2A            mov b, [d]
5856   28E6 60            sub a, b
5857   28E7 27            mov b, a
5858   28E8 E4            pop a
5859   28E9 E7            pop d
5860   28EA FD 43         mov [d], b
5861   28EC 29 71 38      mov b, [__anarr] ; anarr
5862   28EF D7            push a
5863   28F0 74            mov d, b
5864   28F1 DA            push d
5865   28F2 26 00 00      mov b, 0
5866   28F5 E7            pop d
5867   28F6 10 02 00      mov a, 2
5868   28F9 AC            mul a, b
5869   28FA 5A            add d, b
5870   28FB E4            pop a
5871   28FC DA            push d
5872   28FD 29 71 38      mov b, [__anarr] ; anarr
5873   2900 D7            push a
5874   2901 74            mov d, b
5875   2902 DA            push d
5876   2903 26 00 00      mov b, 0
5877   2906 E7            pop d
5878   2907 10 02 00      mov a, 2
5879   290A AC            mul a, b
5880   290B 5A            add d, b
5881   290C E4            pop a
5882   290D 2A            mov b, [d]
5883   290E D7            push a
5884   290F 11            mov a, b
5885   2910 26 0A 00      mov b, 10
5886   2913 AC            mul a, b
5887   2914 E4            pop a
5888   2915 E7            pop d
5889   2916 FD 43         mov [d], b
5890   2918 F9            leave
5891   2919 09            ret
5892   291A             
5893   291A             bincrease:
5894   291A D2            push bp
5895   291B 9B            mov bp, sp
5896   291C             _for94_init:
5897   291C 26 0C 00      mov b, 12
5898   291F FD 42 61 39   mov [__divi], b
5899   2923             _for94_cond:
5900   2923 29 61 39      mov b, [__divi] ; divi
5901   2926 D7            push a
5902   2927 11            mov a, b
5903   2928 26 01 00      mov b, 1
5904   292B B0            cmp a, b
5905   292C 0E            lodflgs
5906   292D 87 03         and al, %00000011
5907   292F B9 00         cmp al, 0
5908   2931 0E            lodflgs
5909   2932 22 00         mov ah, 0
5910   2934 27            mov b, a
5911   2935 E4            pop a
5912   2936 C0 00 00      cmp b, 0
5913   2939 C6 62 2A      je _for94_exit
5914   293C             _for94_block:
5915   293C 29 8B 38      mov b, [__bnarr] ; bnarr
5916   293F D7            push a
5917   2940 74            mov d, b
5918   2941 DA            push d
5919   2942 29 61 39      mov b, [__divi] ; divi
5920   2945 D7            push a
5921   2946 11            mov a, b
5922   2947 26 01 00      mov b, 1
5923   294A 60            sub a, b
5924   294B 27            mov b, a
5925   294C E4            pop a
5926   294D E7            pop d
5927   294E 10 02 00      mov a, 2
5928   2951 AC            mul a, b
5929   2952 5A            add d, b
5930   2953 E4            pop a
5931   2954 2A            mov b, [d]
5932   2955 D7            push a
5933   2956 11            mov a, b
5934   2957 26 0A 00      mov b, 10
5935   295A AE            div a, b
5936   295B FD 78         mov g, a
5937   295D 11            mov a, b
5938   295E FD 27         mov b, g
5939   2960 E4            pop a
5940   2961 FD 42 69 39   mov [__subi], b
5941   2965 29 69 39      mov b, [__subi] ; subi
5942   2968 D7            push a
5943   2969 11            mov a, b
5944   296A 26 0A 00      mov b, 10
5945   296D AC            mul a, b
5946   296E E4            pop a
5947   296F FD 42 69 39   mov [__subi], b
5948   2973 29 8B 38      mov b, [__bnarr] ; bnarr
5949   2976 D7            push a
5950   2977 74            mov d, b
5951   2978 DA            push d
5952   2979 29 61 39      mov b, [__divi] ; divi
5953   297C D7            push a
5954   297D 11            mov a, b
5955   297E 26 01 00      mov b, 1
5956   2981 60            sub a, b
5957   2982 27            mov b, a
5958   2983 E4            pop a
5959   2984 E7            pop d
5960   2985 10 02 00      mov a, 2
5961   2988 AC            mul a, b
5962   2989 5A            add d, b
5963   298A E4            pop a
5964   298B DA            push d
5965   298C 29 8B 38      mov b, [__bnarr] ; bnarr
5966   298F D7            push a
5967   2990 74            mov d, b
5968   2991 DA            push d
5969   2992 29 61 39      mov b, [__divi] ; divi
5970   2995 D7            push a
5971   2996 11            mov a, b
5972   2997 26 01 00      mov b, 1
5973   299A 60            sub a, b
5974   299B 27            mov b, a
5975   299C E4            pop a
5976   299D E7            pop d
5977   299E 10 02 00      mov a, 2
5978   29A1 AC            mul a, b
5979   29A2 5A            add d, b
5980   29A3 E4            pop a
5981   29A4 2A            mov b, [d]
5982   29A5 D7            push a
5983   29A6 11            mov a, b
5984   29A7 29 69 39      mov b, [__subi] ; subi
5985   29AA 60            sub a, b
5986   29AB 27            mov b, a
5987   29AC E4            pop a
5988   29AD E7            pop d
5989   29AE FD 43         mov [d], b
5990   29B0 29 8B 38      mov b, [__bnarr] ; bnarr
5991   29B3 D7            push a
5992   29B4 74            mov d, b
5993   29B5 DA            push d
5994   29B6 29 61 39      mov b, [__divi] ; divi
5995   29B9 D7            push a
5996   29BA 11            mov a, b
5997   29BB 26 01 00      mov b, 1
5998   29BE 60            sub a, b
5999   29BF 27            mov b, a
6000   29C0 E4            pop a
6001   29C1 E7            pop d
6002   29C2 10 02 00      mov a, 2
6003   29C5 AC            mul a, b
6004   29C6 5A            add d, b
6005   29C7 E4            pop a
6006   29C8 DA            push d
6007   29C9 29 8B 38      mov b, [__bnarr] ; bnarr
6008   29CC D7            push a
6009   29CD 74            mov d, b
6010   29CE DA            push d
6011   29CF 29 61 39      mov b, [__divi] ; divi
6012   29D2 D7            push a
6013   29D3 11            mov a, b
6014   29D4 26 01 00      mov b, 1
6015   29D7 60            sub a, b
6016   29D8 27            mov b, a
6017   29D9 E4            pop a
6018   29DA E7            pop d
6019   29DB 10 02 00      mov a, 2
6020   29DE AC            mul a, b
6021   29DF 5A            add d, b
6022   29E0 E4            pop a
6023   29E1 2A            mov b, [d]
6024   29E2 D7            push a
6025   29E3 11            mov a, b
6026   29E4 26 0A 00      mov b, 10
6027   29E7 AC            mul a, b
6028   29E8 E4            pop a
6029   29E9 E7            pop d
6030   29EA FD 43         mov [d], b
6031   29EC 29 8B 38      mov b, [__bnarr] ; bnarr
6032   29EF D7            push a
6033   29F0 74            mov d, b
6034   29F1 DA            push d
6035   29F2 29 61 39      mov b, [__divi] ; divi
6036   29F5 D7            push a
6037   29F6 11            mov a, b
6038   29F7 26 02 00      mov b, 2
6039   29FA 60            sub a, b
6040   29FB 27            mov b, a
6041   29FC E4            pop a
6042   29FD E7            pop d
6043   29FE 10 02 00      mov a, 2
6044   2A01 AC            mul a, b
6045   2A02 5A            add d, b
6046   2A03 E4            pop a
6047   2A04 2A            mov b, [d]
6048   2A05 D7            push a
6049   2A06 11            mov a, b
6050   2A07 26 0A 00      mov b, 10
6051   2A0A AE            div a, b
6052   2A0B FD 78         mov g, a
6053   2A0D 11            mov a, b
6054   2A0E FD 27         mov b, g
6055   2A10 E4            pop a
6056   2A11 FD 42 69 39   mov [__subi], b
6057   2A15 29 8B 38      mov b, [__bnarr] ; bnarr
6058   2A18 D7            push a
6059   2A19 74            mov d, b
6060   2A1A DA            push d
6061   2A1B 29 61 39      mov b, [__divi] ; divi
6062   2A1E D7            push a
6063   2A1F 11            mov a, b
6064   2A20 26 01 00      mov b, 1
6065   2A23 60            sub a, b
6066   2A24 27            mov b, a
6067   2A25 E4            pop a
6068   2A26 E7            pop d
6069   2A27 10 02 00      mov a, 2
6070   2A2A AC            mul a, b
6071   2A2B 5A            add d, b
6072   2A2C E4            pop a
6073   2A2D DA            push d
6074   2A2E 29 8B 38      mov b, [__bnarr] ; bnarr
6075   2A31 D7            push a
6076   2A32 74            mov d, b
6077   2A33 DA            push d
6078   2A34 29 61 39      mov b, [__divi] ; divi
6079   2A37 D7            push a
6080   2A38 11            mov a, b
6081   2A39 26 01 00      mov b, 1
6082   2A3C 60            sub a, b
6083   2A3D 27            mov b, a
6084   2A3E E4            pop a
6085   2A3F E7            pop d
6086   2A40 10 02 00      mov a, 2
6087   2A43 AC            mul a, b
6088   2A44 5A            add d, b
6089   2A45 E4            pop a
6090   2A46 2A            mov b, [d]
6091   2A47 D7            push a
6092   2A48 11            mov a, b
6093   2A49 29 69 39      mov b, [__subi] ; subi
6094   2A4C 54            add a, b
6095   2A4D 27            mov b, a
6096   2A4E E4            pop a
6097   2A4F E7            pop d
6098   2A50 FD 43         mov [d], b
6099   2A52             _for94_update:
6100   2A52 29 61 39      mov b, [__divi] ; divi
6101   2A55 D7            push a
6102   2A56 11            mov a, b
6103   2A57 FD 7D         dec b
6104   2A59 FD 42 61 39   mov [__divi], b
6105   2A5D 27            mov b, a
6106   2A5E E4            pop a
6107   2A5F 0A 23 29      jmp _for94_cond
6108   2A62             _for94_exit:
6109   2A62 29 8B 38      mov b, [__bnarr] ; bnarr
6110   2A65 D7            push a
6111   2A66 74            mov d, b
6112   2A67 DA            push d
6113   2A68 26 00 00      mov b, 0
6114   2A6B E7            pop d
6115   2A6C 10 02 00      mov a, 2
6116   2A6F AC            mul a, b
6117   2A70 5A            add d, b
6118   2A71 E4            pop a
6119   2A72 2A            mov b, [d]
6120   2A73 FD 42 69 39   mov [__subi], b
6121   2A77 29 8B 38      mov b, [__bnarr] ; bnarr
6122   2A7A D7            push a
6123   2A7B 74            mov d, b
6124   2A7C DA            push d
6125   2A7D 26 00 00      mov b, 0
6126   2A80 E7            pop d
6127   2A81 10 02 00      mov a, 2
6128   2A84 AC            mul a, b
6129   2A85 5A            add d, b
6130   2A86 E4            pop a
6131   2A87 DA            push d
6132   2A88 29 8B 38      mov b, [__bnarr] ; bnarr
6133   2A8B D7            push a
6134   2A8C 74            mov d, b
6135   2A8D DA            push d
6136   2A8E 26 00 00      mov b, 0
6137   2A91 E7            pop d
6138   2A92 10 02 00      mov a, 2
6139   2A95 AC            mul a, b
6140   2A96 5A            add d, b
6141   2A97 E4            pop a
6142   2A98 2A            mov b, [d]
6143   2A99 D7            push a
6144   2A9A 11            mov a, b
6145   2A9B 26 0A 00      mov b, 10
6146   2A9E AE            div a, b
6147   2A9F FD 78         mov g, a
6148   2AA1 11            mov a, b
6149   2AA2 FD 27         mov b, g
6150   2AA4 E4            pop a
6151   2AA5 E7            pop d
6152   2AA6 FD 43         mov [d], b
6153   2AA8 29 8B 38      mov b, [__bnarr] ; bnarr
6154   2AAB D7            push a
6155   2AAC 74            mov d, b
6156   2AAD DA            push d
6157   2AAE 26 00 00      mov b, 0
6158   2AB1 E7            pop d
6159   2AB2 10 02 00      mov a, 2
6160   2AB5 AC            mul a, b
6161   2AB6 5A            add d, b
6162   2AB7 E4            pop a
6163   2AB8 DA            push d
6164   2AB9 29 8B 38      mov b, [__bnarr] ; bnarr
6165   2ABC D7            push a
6166   2ABD 74            mov d, b
6167   2ABE DA            push d
6168   2ABF 26 00 00      mov b, 0
6169   2AC2 E7            pop d
6170   2AC3 10 02 00      mov a, 2
6171   2AC6 AC            mul a, b
6172   2AC7 5A            add d, b
6173   2AC8 E4            pop a
6174   2AC9 2A            mov b, [d]
6175   2ACA D7            push a
6176   2ACB 11            mov a, b
6177   2ACC 26 0A 00      mov b, 10
6178   2ACF AC            mul a, b
6179   2AD0 E4            pop a
6180   2AD1 E7            pop d
6181   2AD2 FD 43         mov [d], b
6182   2AD4 29 8B 38      mov b, [__bnarr] ; bnarr
6183   2AD7 D7            push a
6184   2AD8 74            mov d, b
6185   2AD9 DA            push d
6186   2ADA 26 00 00      mov b, 0
6187   2ADD E7            pop d
6188   2ADE 10 02 00      mov a, 2
6189   2AE1 AC            mul a, b
6190   2AE2 5A            add d, b
6191   2AE3 E4            pop a
6192   2AE4 DA            push d
6193   2AE5 29 69 39      mov b, [__subi] ; subi
6194   2AE8 D7            push a
6195   2AE9 11            mov a, b
6196   2AEA 29 8B 38      mov b, [__bnarr] ; bnarr
6197   2AED D7            push a
6198   2AEE 74            mov d, b
6199   2AEF DA            push d
6200   2AF0 26 00 00      mov b, 0
6201   2AF3 E7            pop d
6202   2AF4 10 02 00      mov a, 2
6203   2AF7 AC            mul a, b
6204   2AF8 5A            add d, b
6205   2AF9 E4            pop a
6206   2AFA 2A            mov b, [d]
6207   2AFB 60            sub a, b
6208   2AFC 27            mov b, a
6209   2AFD E4            pop a
6210   2AFE E7            pop d
6211   2AFF FD 43         mov [d], b
6212   2B01 29 8B 38      mov b, [__bnarr] ; bnarr
6213   2B04 D7            push a
6214   2B05 74            mov d, b
6215   2B06 DA            push d
6216   2B07 26 00 00      mov b, 0
6217   2B0A E7            pop d
6218   2B0B 10 02 00      mov a, 2
6219   2B0E AC            mul a, b
6220   2B0F 5A            add d, b
6221   2B10 E4            pop a
6222   2B11 DA            push d
6223   2B12 29 8B 38      mov b, [__bnarr] ; bnarr
6224   2B15 D7            push a
6225   2B16 74            mov d, b
6226   2B17 DA            push d
6227   2B18 26 00 00      mov b, 0
6228   2B1B E7            pop d
6229   2B1C 10 02 00      mov a, 2
6230   2B1F AC            mul a, b
6231   2B20 5A            add d, b
6232   2B21 E4            pop a
6233   2B22 2A            mov b, [d]
6234   2B23 D7            push a
6235   2B24 11            mov a, b
6236   2B25 26 0A 00      mov b, 10
6237   2B28 AC            mul a, b
6238   2B29 E4            pop a
6239   2B2A E7            pop d
6240   2B2B FD 43         mov [d], b
6241   2B2D F9            leave
6242   2B2E 09            ret
6243   2B2F             
6244   2B2F             adecrease:
6245   2B2F D2            push bp
6246   2B30 9B            mov bp, sp
6247   2B31             _for95_init:
6248   2B31 26 00 00      mov b, 0
6249   2B34 FD 42 61 39   mov [__divi], b
6250   2B38             _for95_cond:
6251   2B38 29 61 39      mov b, [__divi] ; divi
6252   2B3B D7            push a
6253   2B3C 11            mov a, b
6254   2B3D 26 0B 00      mov b, 11
6255   2B40 B0            cmp a, b
6256   2B41 0E            lodflgs
6257   2B42 87 02         and al, %00000010 ; <
6258   2B44 FD 9C         shr al
6259   2B46 22 00         mov ah, 0
6260   2B48 27            mov b, a
6261   2B49 E4            pop a
6262   2B4A C0 00 00      cmp b, 0
6263   2B4D C6 03 2C      je _for95_exit
6264   2B50             _for95_block:
6265   2B50 29 71 38      mov b, [__anarr] ; anarr
6266   2B53 D7            push a
6267   2B54 74            mov d, b
6268   2B55 DA            push d
6269   2B56 29 61 39      mov b, [__divi] ; divi
6270   2B59 D7            push a
6271   2B5A 11            mov a, b
6272   2B5B 26 01 00      mov b, 1
6273   2B5E 54            add a, b
6274   2B5F 27            mov b, a
6275   2B60 E4            pop a
6276   2B61 E7            pop d
6277   2B62 10 02 00      mov a, 2
6278   2B65 AC            mul a, b
6279   2B66 5A            add d, b
6280   2B67 E4            pop a
6281   2B68 2A            mov b, [d]
6282   2B69 D7            push a
6283   2B6A 11            mov a, b
6284   2B6B 26 0A 00      mov b, 10
6285   2B6E AE            div a, b
6286   2B6F FD 78         mov g, a
6287   2B71 11            mov a, b
6288   2B72 FD 27         mov b, g
6289   2B74 E4            pop a
6290   2B75 FD 42 69 39   mov [__subi], b
6291   2B79 29 69 39      mov b, [__subi] ; subi
6292   2B7C D7            push a
6293   2B7D 11            mov a, b
6294   2B7E 26 0A 00      mov b, 10
6295   2B81 AC            mul a, b
6296   2B82 E4            pop a
6297   2B83 FD 42 69 39   mov [__subi], b
6298   2B87 29 71 38      mov b, [__anarr] ; anarr
6299   2B8A D7            push a
6300   2B8B 74            mov d, b
6301   2B8C DA            push d
6302   2B8D 29 61 39      mov b, [__divi] ; divi
6303   2B90 D7            push a
6304   2B91 11            mov a, b
6305   2B92 26 01 00      mov b, 1
6306   2B95 54            add a, b
6307   2B96 27            mov b, a
6308   2B97 E4            pop a
6309   2B98 E7            pop d
6310   2B99 10 02 00      mov a, 2
6311   2B9C AC            mul a, b
6312   2B9D 5A            add d, b
6313   2B9E E4            pop a
6314   2B9F 2A            mov b, [d]
6315   2BA0 D7            push a
6316   2BA1 11            mov a, b
6317   2BA2 29 69 39      mov b, [__subi] ; subi
6318   2BA5 60            sub a, b
6319   2BA6 27            mov b, a
6320   2BA7 E4            pop a
6321   2BA8 FD 42 69 39   mov [__subi], b
6322   2BAC 29 69 39      mov b, [__subi] ; subi
6323   2BAF D7            push a
6324   2BB0 11            mov a, b
6325   2BB1 26 0A 00      mov b, 10
6326   2BB4 AC            mul a, b
6327   2BB5 E4            pop a
6328   2BB6 FD 42 69 39   mov [__subi], b
6329   2BBA 29 71 38      mov b, [__anarr] ; anarr
6330   2BBD D7            push a
6331   2BBE 74            mov d, b
6332   2BBF DA            push d
6333   2BC0 29 61 39      mov b, [__divi] ; divi
6334   2BC3 E7            pop d
6335   2BC4 10 02 00      mov a, 2
6336   2BC7 AC            mul a, b
6337   2BC8 5A            add d, b
6338   2BC9 E4            pop a
6339   2BCA DA            push d
6340   2BCB 29 69 39      mov b, [__subi] ; subi
6341   2BCE D7            push a
6342   2BCF 11            mov a, b
6343   2BD0 29 71 38      mov b, [__anarr] ; anarr
6344   2BD3 D7            push a
6345   2BD4 74            mov d, b
6346   2BD5 DA            push d
6347   2BD6 29 61 39      mov b, [__divi] ; divi
6348   2BD9 E7            pop d
6349   2BDA 10 02 00      mov a, 2
6350   2BDD AC            mul a, b
6351   2BDE 5A            add d, b
6352   2BDF E4            pop a
6353   2BE0 2A            mov b, [d]
6354   2BE1 D7            push a
6355   2BE2 11            mov a, b
6356   2BE3 26 0A 00      mov b, 10
6357   2BE6 AE            div a, b
6358   2BE7 FD 78         mov g, a
6359   2BE9 11            mov a, b
6360   2BEA FD 27         mov b, g
6361   2BEC E4            pop a
6362   2BED 54            add a, b
6363   2BEE 27            mov b, a
6364   2BEF E4            pop a
6365   2BF0 E7            pop d
6366   2BF1 FD 43         mov [d], b
6367   2BF3             _for95_update:
6368   2BF3 29 61 39      mov b, [__divi] ; divi
6369   2BF6 D7            push a
6370   2BF7 11            mov a, b
6371   2BF8 FD 77         inc b
6372   2BFA FD 42 61 39   mov [__divi], b
6373   2BFE 27            mov b, a
6374   2BFF E4            pop a
6375   2C00 0A 38 2B      jmp _for95_cond
6376   2C03             _for95_exit:
6377   2C03 29 71 38      mov b, [__anarr] ; anarr
6378   2C06 D7            push a
6379   2C07 74            mov d, b
6380   2C08 DA            push d
6381   2C09 26 0B 00      mov b, 11
6382   2C0C E7            pop d
6383   2C0D 10 02 00      mov a, 2
6384   2C10 AC            mul a, b
6385   2C11 5A            add d, b
6386   2C12 E4            pop a
6387   2C13 DA            push d
6388   2C14 29 71 38      mov b, [__anarr] ; anarr
6389   2C17 D7            push a
6390   2C18 74            mov d, b
6391   2C19 DA            push d
6392   2C1A 26 0B 00      mov b, 11
6393   2C1D E7            pop d
6394   2C1E 10 02 00      mov a, 2
6395   2C21 AC            mul a, b
6396   2C22 5A            add d, b
6397   2C23 E4            pop a
6398   2C24 2A            mov b, [d]
6399   2C25 D7            push a
6400   2C26 11            mov a, b
6401   2C27 26 0A 00      mov b, 10
6402   2C2A AE            div a, b
6403   2C2B FD 78         mov g, a
6404   2C2D 11            mov a, b
6405   2C2E FD 27         mov b, g
6406   2C30 E4            pop a
6407   2C31 E7            pop d
6408   2C32 FD 43         mov [d], b
6409   2C34 F9            leave
6410   2C35 09            ret
6411   2C36             
6412   2C36             bdecrease:
6413   2C36 D2            push bp
6414   2C37 9B            mov bp, sp
6415   2C38             _for96_init:
6416   2C38 26 00 00      mov b, 0
6417   2C3B FD 42 61 39   mov [__divi], b
6418   2C3F             _for96_cond:
6419   2C3F 29 61 39      mov b, [__divi] ; divi
6420   2C42 D7            push a
6421   2C43 11            mov a, b
6422   2C44 26 0B 00      mov b, 11
6423   2C47 B0            cmp a, b
6424   2C48 0E            lodflgs
6425   2C49 87 02         and al, %00000010 ; <
6426   2C4B FD 9C         shr al
6427   2C4D 22 00         mov ah, 0
6428   2C4F 27            mov b, a
6429   2C50 E4            pop a
6430   2C51 C0 00 00      cmp b, 0
6431   2C54 C6 0A 2D      je _for96_exit
6432   2C57             _for96_block:
6433   2C57 29 8B 38      mov b, [__bnarr] ; bnarr
6434   2C5A D7            push a
6435   2C5B 74            mov d, b
6436   2C5C DA            push d
6437   2C5D 29 61 39      mov b, [__divi] ; divi
6438   2C60 D7            push a
6439   2C61 11            mov a, b
6440   2C62 26 01 00      mov b, 1
6441   2C65 54            add a, b
6442   2C66 27            mov b, a
6443   2C67 E4            pop a
6444   2C68 E7            pop d
6445   2C69 10 02 00      mov a, 2
6446   2C6C AC            mul a, b
6447   2C6D 5A            add d, b
6448   2C6E E4            pop a
6449   2C6F 2A            mov b, [d]
6450   2C70 D7            push a
6451   2C71 11            mov a, b
6452   2C72 26 0A 00      mov b, 10
6453   2C75 AE            div a, b
6454   2C76 FD 78         mov g, a
6455   2C78 11            mov a, b
6456   2C79 FD 27         mov b, g
6457   2C7B E4            pop a
6458   2C7C FD 42 69 39   mov [__subi], b
6459   2C80 29 69 39      mov b, [__subi] ; subi
6460   2C83 D7            push a
6461   2C84 11            mov a, b
6462   2C85 26 0A 00      mov b, 10
6463   2C88 AC            mul a, b
6464   2C89 E4            pop a
6465   2C8A FD 42 69 39   mov [__subi], b
6466   2C8E 29 8B 38      mov b, [__bnarr] ; bnarr
6467   2C91 D7            push a
6468   2C92 74            mov d, b
6469   2C93 DA            push d
6470   2C94 29 61 39      mov b, [__divi] ; divi
6471   2C97 D7            push a
6472   2C98 11            mov a, b
6473   2C99 26 01 00      mov b, 1
6474   2C9C 54            add a, b
6475   2C9D 27            mov b, a
6476   2C9E E4            pop a
6477   2C9F E7            pop d
6478   2CA0 10 02 00      mov a, 2
6479   2CA3 AC            mul a, b
6480   2CA4 5A            add d, b
6481   2CA5 E4            pop a
6482   2CA6 2A            mov b, [d]
6483   2CA7 D7            push a
6484   2CA8 11            mov a, b
6485   2CA9 29 69 39      mov b, [__subi] ; subi
6486   2CAC 60            sub a, b
6487   2CAD 27            mov b, a
6488   2CAE E4            pop a
6489   2CAF FD 42 69 39   mov [__subi], b
6490   2CB3 29 69 39      mov b, [__subi] ; subi
6491   2CB6 D7            push a
6492   2CB7 11            mov a, b
6493   2CB8 26 0A 00      mov b, 10
6494   2CBB AC            mul a, b
6495   2CBC E4            pop a
6496   2CBD FD 42 69 39   mov [__subi], b
6497   2CC1 29 8B 38      mov b, [__bnarr] ; bnarr
6498   2CC4 D7            push a
6499   2CC5 74            mov d, b
6500   2CC6 DA            push d
6501   2CC7 29 61 39      mov b, [__divi] ; divi
6502   2CCA E7            pop d
6503   2CCB 10 02 00      mov a, 2
6504   2CCE AC            mul a, b
6505   2CCF 5A            add d, b
6506   2CD0 E4            pop a
6507   2CD1 DA            push d
6508   2CD2 29 69 39      mov b, [__subi] ; subi
6509   2CD5 D7            push a
6510   2CD6 11            mov a, b
6511   2CD7 29 8B 38      mov b, [__bnarr] ; bnarr
6512   2CDA D7            push a
6513   2CDB 74            mov d, b
6514   2CDC DA            push d
6515   2CDD 29 61 39      mov b, [__divi] ; divi
6516   2CE0 E7            pop d
6517   2CE1 10 02 00      mov a, 2
6518   2CE4 AC            mul a, b
6519   2CE5 5A            add d, b
6520   2CE6 E4            pop a
6521   2CE7 2A            mov b, [d]
6522   2CE8 D7            push a
6523   2CE9 11            mov a, b
6524   2CEA 26 0A 00      mov b, 10
6525   2CED AE            div a, b
6526   2CEE FD 78         mov g, a
6527   2CF0 11            mov a, b
6528   2CF1 FD 27         mov b, g
6529   2CF3 E4            pop a
6530   2CF4 54            add a, b
6531   2CF5 27            mov b, a
6532   2CF6 E4            pop a
6533   2CF7 E7            pop d
6534   2CF8 FD 43         mov [d], b
6535   2CFA             _for96_update:
6536   2CFA 29 61 39      mov b, [__divi] ; divi
6537   2CFD D7            push a
6538   2CFE 11            mov a, b
6539   2CFF FD 77         inc b
6540   2D01 FD 42 61 39   mov [__divi], b
6541   2D05 27            mov b, a
6542   2D06 E4            pop a
6543   2D07 0A 3F 2C      jmp _for96_cond
6544   2D0A             _for96_exit:
6545   2D0A 29 8B 38      mov b, [__bnarr] ; bnarr
6546   2D0D D7            push a
6547   2D0E 74            mov d, b
6548   2D0F DA            push d
6549   2D10 26 0B 00      mov b, 11
6550   2D13 E7            pop d
6551   2D14 10 02 00      mov a, 2
6552   2D17 AC            mul a, b
6553   2D18 5A            add d, b
6554   2D19 E4            pop a
6555   2D1A DA            push d
6556   2D1B 29 8B 38      mov b, [__bnarr] ; bnarr
6557   2D1E D7            push a
6558   2D1F 74            mov d, b
6559   2D20 DA            push d
6560   2D21 26 0B 00      mov b, 11
6561   2D24 E7            pop d
6562   2D25 10 02 00      mov a, 2
6563   2D28 AC            mul a, b
6564   2D29 5A            add d, b
6565   2D2A E4            pop a
6566   2D2B 2A            mov b, [d]
6567   2D2C D7            push a
6568   2D2D 11            mov a, b
6569   2D2E 26 0A 00      mov b, 10
6570   2D31 AE            div a, b
6571   2D32 FD 78         mov g, a
6572   2D34 11            mov a, b
6573   2D35 FD 27         mov b, g
6574   2D37 E4            pop a
6575   2D38 E7            pop d
6576   2D39 FD 43         mov [d], b
6577   2D3B F9            leave
6578   2D3C 09            ret
6579   2D3D             
6580   2D3D             protodividedby:
6581   2D3D D2            push bp
6582   2D3E 9B            mov bp, sp
6583   2D3F 26 00 00      mov b, 0
6584   2D42 FD 42 6B 39   mov [__posflag], b
6585   2D46 26 00 00      mov b, 0
6586   2D49 FD 42 55 39   mov [__brshift], b
6587   2D4D 26 00 00      mov b, 0
6588   2D50 FD 42 57 39   mov [__blshift], b
6589   2D54 26 00 00      mov b, 0
6590   2D57 FD 42 59 39   mov [__alshift], b
6591   2D5B 26 00 00      mov b, 0
6592   2D5E FD 42 5B 39   mov [__divcounter1], b
6593   2D62 26 00 00      mov b, 0
6594   2D65 FD 42 5D 39   mov [__divcounter2], b
6595   2D69 26 00 00      mov b, 0
6596   2D6C FD 42 5F 39   mov [__segmentcounter], b
6597   2D70 26 01 00      mov b, 1
6598   2D73 FD 42 63 39   mov [__allzeroes], b
6599   2D77             _for97_init:
6600   2D77 26 00 00      mov b, 0
6601   2D7A FD 42 61 39   mov [__divi], b
6602   2D7E             _for97_cond:
6603   2D7E 29 61 39      mov b, [__divi] ; divi
6604   2D81 D7            push a
6605   2D82 11            mov a, b
6606   2D83 26 0C 00      mov b, 12
6607   2D86 B0            cmp a, b
6608   2D87 0E            lodflgs
6609   2D88 87 02         and al, %00000010 ; <
6610   2D8A FD 9C         shr al
6611   2D8C 22 00         mov ah, 0
6612   2D8E 27            mov b, a
6613   2D8F E4            pop a
6614   2D90 C0 00 00      cmp b, 0
6615   2D93 C6 04 2E      je _for97_exit
6616   2D96             _for97_block:
6617   2D96 29 D9 38      mov b, [__cnarr] ; cnarr
6618   2D99 D7            push a
6619   2D9A 74            mov d, b
6620   2D9B DA            push d
6621   2D9C 29 61 39      mov b, [__divi] ; divi
6622   2D9F E7            pop d
6623   2DA0 10 02 00      mov a, 2
6624   2DA3 AC            mul a, b
6625   2DA4 5A            add d, b
6626   2DA5 E4            pop a
6627   2DA6 DA            push d
6628   2DA7 26 00 00      mov b, 0
6629   2DAA E7            pop d
6630   2DAB FD 43         mov [d], b
6631   2DAD 29 25 39      mov b, [__divres] ; divres
6632   2DB0 D7            push a
6633   2DB1 74            mov d, b
6634   2DB2 DA            push d
6635   2DB3 29 61 39      mov b, [__divi] ; divi
6636   2DB6 E7            pop d
6637   2DB7 10 02 00      mov a, 2
6638   2DBA AC            mul a, b
6639   2DBB 5A            add d, b
6640   2DBC E4            pop a
6641   2DBD DA            push d
6642   2DBE 26 00 00      mov b, 0
6643   2DC1 E7            pop d
6644   2DC2 FD 43         mov [d], b
6645   2DC4             _if98_cond:
6646   2DC4 29 8B 38      mov b, [__bnarr] ; bnarr
6647   2DC7 D7            push a
6648   2DC8 74            mov d, b
6649   2DC9 DA            push d
6650   2DCA 29 61 39      mov b, [__divi] ; divi
6651   2DCD E7            pop d
6652   2DCE 10 02 00      mov a, 2
6653   2DD1 AC            mul a, b
6654   2DD2 5A            add d, b
6655   2DD3 E4            pop a
6656   2DD4 2A            mov b, [d]
6657   2DD5 D7            push a
6658   2DD6 11            mov a, b
6659   2DD7 26 00 00      mov b, 0
6660   2DDA B0            cmp a, b
6661   2DDB 0E            lodflgs
6662   2DDC 87 01         and al, %00000001
6663   2DDE 8F 01         xor al, %00000001 ; !=
6664   2DE0 22 00         mov ah, 0
6665   2DE2 27            mov b, a
6666   2DE3 E4            pop a
6667   2DE4 C0 00 00      cmp b, 0
6668   2DE7 C6 F4 2D      je _if98_exit
6669   2DEA             _if98_true:
6670   2DEA 26 00 00      mov b, 0
6671   2DED FD 42 63 39   mov [__allzeroes], b
6672   2DF1 0A F4 2D      jmp _if98_exit
6673   2DF4             _if98_exit:
6674   2DF4             _for97_update:
6675   2DF4 29 61 39      mov b, [__divi] ; divi
6676   2DF7 D7            push a
6677   2DF8 11            mov a, b
6678   2DF9 FD 77         inc b
6679   2DFB FD 42 61 39   mov [__divi], b
6680   2DFF 27            mov b, a
6681   2E00 E4            pop a
6682   2E01 0A 7E 2D      jmp _for97_cond
6683   2E04             _for97_exit:
6684   2E04             _if99_cond:
6685   2E04 29 63 39      mov b, [__allzeroes] ; allzeroes
6686   2E07 D7            push a
6687   2E08 11            mov a, b
6688   2E09 26 01 00      mov b, 1
6689   2E0C B0            cmp a, b
6690   2E0D 0E            lodflgs
6691   2E0E 87 01         and al, %00000001 ; ==
6692   2E10 22 00         mov ah, 0
6693   2E12 27            mov b, a
6694   2E13 E4            pop a
6695   2E14 C0 00 00      cmp b, 0
6696   2E17 C6 1F 2E      je _if99_exit
6697   2E1A             _if99_true:
6698   2E1A F9            leave
6699   2E1B 09            ret
6700   2E1C 0A 1F 2E      jmp _if99_exit
6701   2E1F             _if99_exit:
6702   2E1F             _while100_cond:
6703   2E1F 29 8B 38      mov b, [__bnarr] ; bnarr
6704   2E22 D7            push a
6705   2E23 74            mov d, b
6706   2E24 DA            push d
6707   2E25 26 0B 00      mov b, 11
6708   2E28 E7            pop d
6709   2E29 10 02 00      mov a, 2
6710   2E2C AC            mul a, b
6711   2E2D 5A            add d, b
6712   2E2E E4            pop a
6713   2E2F 2A            mov b, [d]
6714   2E30 D7            push a
6715   2E31 11            mov a, b
6716   2E32 26 00 00      mov b, 0
6717   2E35 B0            cmp a, b
6718   2E36 0E            lodflgs
6719   2E37 87 01         and al, %00000001 ; ==
6720   2E39 22 00         mov ah, 0
6721   2E3B 27            mov b, a
6722   2E3C E4            pop a
6723   2E3D C0 00 00      cmp b, 0
6724   2E40 C6 C9 2E      je _while100_exit
6725   2E43             _while100_block:
6726   2E43             _for101_init:
6727   2E43 26 0B 00      mov b, 11
6728   2E46 FD 42 61 39   mov [__divi], b
6729   2E4A             _for101_cond:
6730   2E4A 29 61 39      mov b, [__divi] ; divi
6731   2E4D D7            push a
6732   2E4E 11            mov a, b
6733   2E4F 26 00 00      mov b, 0
6734   2E52 B0            cmp a, b
6735   2E53 0E            lodflgs
6736   2E54 87 03         and al, %00000011
6737   2E56 B9 00         cmp al, 0
6738   2E58 0E            lodflgs
6739   2E59 22 00         mov ah, 0
6740   2E5B 27            mov b, a
6741   2E5C E4            pop a
6742   2E5D C0 00 00      cmp b, 0
6743   2E60 C6 A0 2E      je _for101_exit
6744   2E63             _for101_block:
6745   2E63 29 8B 38      mov b, [__bnarr] ; bnarr
6746   2E66 D7            push a
6747   2E67 74            mov d, b
6748   2E68 DA            push d
6749   2E69 29 61 39      mov b, [__divi] ; divi
6750   2E6C E7            pop d
6751   2E6D 10 02 00      mov a, 2
6752   2E70 AC            mul a, b
6753   2E71 5A            add d, b
6754   2E72 E4            pop a
6755   2E73 DA            push d
6756   2E74 29 8B 38      mov b, [__bnarr] ; bnarr
6757   2E77 D7            push a
6758   2E78 74            mov d, b
6759   2E79 DA            push d
6760   2E7A 29 61 39      mov b, [__divi] ; divi
6761   2E7D D7            push a
6762   2E7E 11            mov a, b
6763   2E7F 26 01 00      mov b, 1
6764   2E82 60            sub a, b
6765   2E83 27            mov b, a
6766   2E84 E4            pop a
6767   2E85 E7            pop d
6768   2E86 10 02 00      mov a, 2
6769   2E89 AC            mul a, b
6770   2E8A 5A            add d, b
6771   2E8B E4            pop a
6772   2E8C 2A            mov b, [d]
6773   2E8D E7            pop d
6774   2E8E FD 43         mov [d], b
6775   2E90             _for101_update:
6776   2E90 29 61 39      mov b, [__divi] ; divi
6777   2E93 D7            push a
6778   2E94 11            mov a, b
6779   2E95 FD 7D         dec b
6780   2E97 FD 42 61 39   mov [__divi], b
6781   2E9B 27            mov b, a
6782   2E9C E4            pop a
6783   2E9D 0A 4A 2E      jmp _for101_cond
6784   2EA0             _for101_exit:
6785   2EA0 29 8B 38      mov b, [__bnarr] ; bnarr
6786   2EA3 D7            push a
6787   2EA4 74            mov d, b
6788   2EA5 DA            push d
6789   2EA6 26 00 00      mov b, 0
6790   2EA9 E7            pop d
6791   2EAA 10 02 00      mov a, 2
6792   2EAD AC            mul a, b
6793   2EAE 5A            add d, b
6794   2EAF E4            pop a
6795   2EB0 DA            push d
6796   2EB1 26 00 00      mov b, 0
6797   2EB4 E7            pop d
6798   2EB5 FD 43         mov [d], b
6799   2EB7 29 57 39      mov b, [__blshift] ; blshift
6800   2EBA D7            push a
6801   2EBB 11            mov a, b
6802   2EBC 26 02 00      mov b, 2
6803   2EBF 54            add a, b
6804   2EC0 27            mov b, a
6805   2EC1 E4            pop a
6806   2EC2 FD 42 57 39   mov [__blshift], b
6807   2EC6 0A 1F 2E      jmp _while100_cond
6808   2EC9             _while100_exit:
6809   2EC9 26 01 00      mov b, 1
6810   2ECC FD 42 63 39   mov [__allzeroes], b
6811   2ED0             _for102_init:
6812   2ED0 26 00 00      mov b, 0
6813   2ED3 FD 42 61 39   mov [__divi], b
6814   2ED7             _for102_cond:
6815   2ED7 29 61 39      mov b, [__divi] ; divi
6816   2EDA D7            push a
6817   2EDB 11            mov a, b
6818   2EDC 26 0C 00      mov b, 12
6819   2EDF B0            cmp a, b
6820   2EE0 0E            lodflgs
6821   2EE1 87 02         and al, %00000010 ; <
6822   2EE3 FD 9C         shr al
6823   2EE5 22 00         mov ah, 0
6824   2EE7 27            mov b, a
6825   2EE8 E4            pop a
6826   2EE9 C0 00 00      cmp b, 0
6827   2EEC C6 2F 2F      je _for102_exit
6828   2EEF             _for102_block:
6829   2EEF             _if103_cond:
6830   2EEF 29 71 38      mov b, [__anarr] ; anarr
6831   2EF2 D7            push a
6832   2EF3 74            mov d, b
6833   2EF4 DA            push d
6834   2EF5 29 61 39      mov b, [__divi] ; divi
6835   2EF8 E7            pop d
6836   2EF9 10 02 00      mov a, 2
6837   2EFC AC            mul a, b
6838   2EFD 5A            add d, b
6839   2EFE E4            pop a
6840   2EFF 2A            mov b, [d]
6841   2F00 D7            push a
6842   2F01 11            mov a, b
6843   2F02 26 00 00      mov b, 0
6844   2F05 B0            cmp a, b
6845   2F06 0E            lodflgs
6846   2F07 87 01         and al, %00000001
6847   2F09 8F 01         xor al, %00000001 ; !=
6848   2F0B 22 00         mov ah, 0
6849   2F0D 27            mov b, a
6850   2F0E E4            pop a
6851   2F0F C0 00 00      cmp b, 0
6852   2F12 C6 1F 2F      je _if103_exit
6853   2F15             _if103_true:
6854   2F15 26 00 00      mov b, 0
6855   2F18 FD 42 63 39   mov [__allzeroes], b
6856   2F1C 0A 1F 2F      jmp _if103_exit
6857   2F1F             _if103_exit:
6858   2F1F             _for102_update:
6859   2F1F 29 61 39      mov b, [__divi] ; divi
6860   2F22 D7            push a
6861   2F23 11            mov a, b
6862   2F24 FD 77         inc b
6863   2F26 FD 42 61 39   mov [__divi], b
6864   2F2A 27            mov b, a
6865   2F2B E4            pop a
6866   2F2C 0A D7 2E      jmp _for102_cond
6867   2F2F             _for102_exit:
6868   2F2F             _if104_cond:
6869   2F2F 29 63 39      mov b, [__allzeroes] ; allzeroes
6870   2F32 D7            push a
6871   2F33 11            mov a, b
6872   2F34 26 01 00      mov b, 1
6873   2F37 B0            cmp a, b
6874   2F38 0E            lodflgs
6875   2F39 87 01         and al, %00000001 ; ==
6876   2F3B 22 00         mov ah, 0
6877   2F3D 27            mov b, a
6878   2F3E E4            pop a
6879   2F3F C0 00 00      cmp b, 0
6880   2F42 C6 4A 2F      je _if104_exit
6881   2F45             _if104_true:
6882   2F45 F9            leave
6883   2F46 09            ret
6884   2F47 0A 4A 2F      jmp _if104_exit
6885   2F4A             _if104_exit:
6886   2F4A             _while105_cond:
6887   2F4A 29 71 38      mov b, [__anarr] ; anarr
6888   2F4D D7            push a
6889   2F4E 74            mov d, b
6890   2F4F DA            push d
6891   2F50 26 0B 00      mov b, 11
6892   2F53 E7            pop d
6893   2F54 10 02 00      mov a, 2
6894   2F57 AC            mul a, b
6895   2F58 5A            add d, b
6896   2F59 E4            pop a
6897   2F5A 2A            mov b, [d]
6898   2F5B D7            push a
6899   2F5C 11            mov a, b
6900   2F5D 26 00 00      mov b, 0
6901   2F60 B0            cmp a, b
6902   2F61 0E            lodflgs
6903   2F62 87 01         and al, %00000001 ; ==
6904   2F64 22 00         mov ah, 0
6905   2F66 27            mov b, a
6906   2F67 E4            pop a
6907   2F68 C0 00 00      cmp b, 0
6908   2F6B C6 03 30      je _while105_exit
6909   2F6E             _while105_block:
6910   2F6E             _for106_init:
6911   2F6E 26 00 00      mov b, 0
6912   2F71 FD 42 61 39   mov [__divi], b
6913   2F75             _for106_cond:
6914   2F75 29 61 39      mov b, [__divi] ; divi
6915   2F78 D7            push a
6916   2F79 11            mov a, b
6917   2F7A 26 0B 00      mov b, 11
6918   2F7D B0            cmp a, b
6919   2F7E 0E            lodflgs
6920   2F7F 87 02         and al, %00000010 ; <
6921   2F81 FD 9C         shr al
6922   2F83 22 00         mov ah, 0
6923   2F85 27            mov b, a
6924   2F86 E4            pop a
6925   2F87 C0 00 00      cmp b, 0
6926   2F8A C6 DA 2F      je _for106_exit
6927   2F8D             _for106_block:
6928   2F8D 29 71 38      mov b, [__anarr] ; anarr
6929   2F90 D7            push a
6930   2F91 74            mov d, b
6931   2F92 DA            push d
6932   2F93 26 0B 00      mov b, 11
6933   2F96 D7            push a
6934   2F97 11            mov a, b
6935   2F98 29 61 39      mov b, [__divi] ; divi
6936   2F9B 60            sub a, b
6937   2F9C 27            mov b, a
6938   2F9D E4            pop a
6939   2F9E E7            pop d
6940   2F9F 10 02 00      mov a, 2
6941   2FA2 AC            mul a, b
6942   2FA3 5A            add d, b
6943   2FA4 E4            pop a
6944   2FA5 DA            push d
6945   2FA6 29 71 38      mov b, [__anarr] ; anarr
6946   2FA9 D7            push a
6947   2FAA 74            mov d, b
6948   2FAB DA            push d
6949   2FAC 26 0B 00      mov b, 11
6950   2FAF D7            push a
6951   2FB0 11            mov a, b
6952   2FB1 29 61 39      mov b, [__divi] ; divi
6953   2FB4 60            sub a, b
6954   2FB5 27            mov b, a
6955   2FB6 E4            pop a
6956   2FB7 D7            push a
6957   2FB8 11            mov a, b
6958   2FB9 26 01 00      mov b, 1
6959   2FBC 60            sub a, b
6960   2FBD 27            mov b, a
6961   2FBE E4            pop a
6962   2FBF E7            pop d
6963   2FC0 10 02 00      mov a, 2
6964   2FC3 AC            mul a, b
6965   2FC4 5A            add d, b
6966   2FC5 E4            pop a
6967   2FC6 2A            mov b, [d]
6968   2FC7 E7            pop d
6969   2FC8 FD 43         mov [d], b
6970   2FCA             _for106_update:
6971   2FCA 29 61 39      mov b, [__divi] ; divi
6972   2FCD D7            push a
6973   2FCE 11            mov a, b
6974   2FCF FD 77         inc b
6975   2FD1 FD 42 61 39   mov [__divi], b
6976   2FD5 27            mov b, a
6977   2FD6 E4            pop a
6978   2FD7 0A 75 2F      jmp _for106_cond
6979   2FDA             _for106_exit:
6980   2FDA 29 71 38      mov b, [__anarr] ; anarr
6981   2FDD D7            push a
6982   2FDE 74            mov d, b
6983   2FDF DA            push d
6984   2FE0 26 00 00      mov b, 0
6985   2FE3 E7            pop d
6986   2FE4 10 02 00      mov a, 2
6987   2FE7 AC            mul a, b
6988   2FE8 5A            add d, b
6989   2FE9 E4            pop a
6990   2FEA DA            push d
6991   2FEB 26 00 00      mov b, 0
6992   2FEE E7            pop d
6993   2FEF FD 43         mov [d], b
6994   2FF1 29 59 39      mov b, [__alshift] ; alshift
6995   2FF4 D7            push a
6996   2FF5 11            mov a, b
6997   2FF6 26 02 00      mov b, 2
6998   2FF9 54            add a, b
6999   2FFA 27            mov b, a
7000   2FFB E4            pop a
7001   2FFC FD 42 59 39   mov [__alshift], b
7002   3000 0A 4A 2F      jmp _while105_cond
7003   3003             _while105_exit:
7004   3003             _if107_cond:
7005   3003 29 71 38      mov b, [__anarr] ; anarr
7006   3006 D7            push a
7007   3007 74            mov d, b
7008   3008 DA            push d
7009   3009 26 0B 00      mov b, 11
7010   300C E7            pop d
7011   300D 10 02 00      mov a, 2
7012   3010 AC            mul a, b
7013   3011 5A            add d, b
7014   3012 E4            pop a
7015   3013 2A            mov b, [d]
7016   3014 D7            push a
7017   3015 11            mov a, b
7018   3016 26 0A 00      mov b, 10
7019   3019 B0            cmp a, b
7020   301A 0E            lodflgs
7021   301B 87 02         and al, %00000010 ; <
7022   301D FD 9C         shr al
7023   301F 22 00         mov ah, 0
7024   3021 27            mov b, a
7025   3022 E4            pop a
7026   3023 C0 00 00      cmp b, 0
7027   3026 C6 3C 30      je _if107_exit
7028   3029             _if107_true:
7029   3029 29 59 39      mov b, [__alshift] ; alshift
7030   302C D7            push a
7031   302D 11            mov a, b
7032   302E FD 77         inc b
7033   3030 FD 42 59 39   mov [__alshift], b
7034   3034 27            mov b, a
7035   3035 E4            pop a
7036   3036 07 05 27      call aincrease
7037   3039 0A 3C 30      jmp _if107_exit
7038   303C             _if107_exit:
7039   303C             _if108_cond:
7040   303C 29 8B 38      mov b, [__bnarr] ; bnarr
7041   303F D7            push a
7042   3040 74            mov d, b
7043   3041 DA            push d
7044   3042 26 0B 00      mov b, 11
7045   3045 E7            pop d
7046   3046 10 02 00      mov a, 2
7047   3049 AC            mul a, b
7048   304A 5A            add d, b
7049   304B E4            pop a
7050   304C 2A            mov b, [d]
7051   304D D7            push a
7052   304E 11            mov a, b
7053   304F 26 0A 00      mov b, 10
7054   3052 B0            cmp a, b
7055   3053 0E            lodflgs
7056   3054 87 03         and al, %00000011
7057   3056 8F 02         xor al, %00000010 ; >=
7058   3058 B9 00         cmp al, 0
7059   305A 0E            lodflgs
7060   305B 8F 01         xor al, %00000001
7061   305D 22 00         mov ah, 0
7062   305F 27            mov b, a
7063   3060 E4            pop a
7064   3061 C0 00 00      cmp b, 0
7065   3064 C6 7A 30      je _if108_exit
7066   3067             _if108_true:
7067   3067 29 55 39      mov b, [__brshift] ; brshift
7068   306A D7            push a
7069   306B 11            mov a, b
7070   306C FD 77         inc b
7071   306E FD 42 55 39   mov [__brshift], b
7072   3072 27            mov b, a
7073   3073 E4            pop a
7074   3074 07 36 2C      call bdecrease
7075   3077 0A 7A 30      jmp _if108_exit
7076   307A             _if108_exit:
7077   307A 26 00 00      mov b, 0
7078   307D FD 42 5F 39   mov [__segmentcounter], b
7079   3081 26 00 00      mov b, 0
7080   3084 FD 42 5B 39   mov [__divcounter1], b
7081   3088 26 00 00      mov b, 0
7082   308B FD 42 5D 39   mov [__divcounter2], b
7083   308F 26 00 00      mov b, 0
7084   3092 FD 42 6B 39   mov [__posflag], b
7085   3096             _if109_cond:
7086   3096 29 71 38      mov b, [__anarr] ; anarr
7087   3099 D7            push a
7088   309A 74            mov d, b
7089   309B DA            push d
7090   309C 26 0B 00      mov b, 11
7091   309F E7            pop d
7092   30A0 10 02 00      mov a, 2
7093   30A3 AC            mul a, b
7094   30A4 5A            add d, b
7095   30A5 E4            pop a
7096   30A6 2A            mov b, [d]
7097   30A7 D7            push a
7098   30A8 11            mov a, b
7099   30A9 29 8B 38      mov b, [__bnarr] ; bnarr
7100   30AC D7            push a
7101   30AD 74            mov d, b
7102   30AE DA            push d
7103   30AF 26 0B 00      mov b, 11
7104   30B2 E7            pop d
7105   30B3 10 02 00      mov a, 2
7106   30B6 AC            mul a, b
7107   30B7 5A            add d, b
7108   30B8 E4            pop a
7109   30B9 2A            mov b, [d]
7110   30BA D7            push a
7111   30BB 11            mov a, b
7112   30BC 26 0A 00      mov b, 10
7113   30BF AC            mul a, b
7114   30C0 E4            pop a
7115   30C1 B0            cmp a, b
7116   30C2 0E            lodflgs
7117   30C3 87 03         and al, %00000011
7118   30C5 B9 00         cmp al, 0
7119   30C7 0E            lodflgs
7120   30C8 22 00         mov ah, 0
7121   30CA 27            mov b, a
7122   30CB E4            pop a
7123   30CC C0 00 00      cmp b, 0
7124   30CF C6 E5 30      je _if109_exit
7125   30D2             _if109_true:
7126   30D2 29 57 39      mov b, [__blshift] ; blshift
7127   30D5 D7            push a
7128   30D6 11            mov a, b
7129   30D7 FD 77         inc b
7130   30D9 FD 42 57 39   mov [__blshift], b
7131   30DD 27            mov b, a
7132   30DE E4            pop a
7133   30DF 07 2F 2B      call adecrease
7134   30E2 0A E5 30      jmp _if109_exit
7135   30E5             _if109_exit:
7136   30E5             _while110_cond:
7137   30E5 29 5F 39      mov b, [__segmentcounter] ; segmentcounter
7138   30E8 D7            push a
7139   30E9 11            mov a, b
7140   30EA 26 0C 00      mov b, 12
7141   30ED B0            cmp a, b
7142   30EE 0E            lodflgs
7143   30EF 87 02         and al, %00000010 ; <
7144   30F1 FD 9C         shr al
7145   30F3 22 00         mov ah, 0
7146   30F5 27            mov b, a
7147   30F6 E4            pop a
7148   30F7 C0 00 00      cmp b, 0
7149   30FA C6 BB 32      je _while110_exit
7150   30FD             _while110_block:
7151   30FD 07 C1 18      call checkabsabsize
7152   3100             _while111_cond:
7153   3100 29 3D 39      mov b, [__ageb] ; ageb
7154   3103 D7            push a
7155   3104 11            mov a, b
7156   3105 26 01 00      mov b, 1
7157   3108 B0            cmp a, b
7158   3109 0E            lodflgs
7159   310A 87 01         and al, %00000001 ; ==
7160   310C 22 00         mov ah, 0
7161   310E 27            mov b, a
7162   310F E4            pop a
7163   3110 C0 00 00      cmp b, 0
7164   3113 C6 97 31      je _while111_exit
7165   3116             _while111_block:
7166   3116 07 F3 1A      call protominus
7167   3119 29 5B 39      mov b, [__divcounter1] ; divcounter1
7168   311C D7            push a
7169   311D 11            mov a, b
7170   311E FD 77         inc b
7171   3120 FD 42 5B 39   mov [__divcounter1], b
7172   3124 27            mov b, a
7173   3125 E4            pop a
7174   3126             _for112_init:
7175   3126 26 00 00      mov b, 0
7176   3129 FD 42 61 39   mov [__divi], b
7177   312D             _for112_cond:
7178   312D 29 61 39      mov b, [__divi] ; divi
7179   3130 D7            push a
7180   3131 11            mov a, b
7181   3132 26 0C 00      mov b, 12
7182   3135 B0            cmp a, b
7183   3136 0E            lodflgs
7184   3137 87 02         and al, %00000010 ; <
7185   3139 FD 9C         shr al
7186   313B 22 00         mov ah, 0
7187   313D 27            mov b, a
7188   313E E4            pop a
7189   313F C0 00 00      cmp b, 0
7190   3142 C6 91 31      je _for112_exit
7191   3145             _for112_block:
7192   3145 29 71 38      mov b, [__anarr] ; anarr
7193   3148 D7            push a
7194   3149 74            mov d, b
7195   314A DA            push d
7196   314B 29 61 39      mov b, [__divi] ; divi
7197   314E E7            pop d
7198   314F 10 02 00      mov a, 2
7199   3152 AC            mul a, b
7200   3153 5A            add d, b
7201   3154 E4            pop a
7202   3155 DA            push d
7203   3156 29 D9 38      mov b, [__cnarr] ; cnarr
7204   3159 D7            push a
7205   315A 74            mov d, b
7206   315B DA            push d
7207   315C 29 61 39      mov b, [__divi] ; divi
7208   315F E7            pop d
7209   3160 10 02 00      mov a, 2
7210   3163 AC            mul a, b
7211   3164 5A            add d, b
7212   3165 E4            pop a
7213   3166 2A            mov b, [d]
7214   3167 E7            pop d
7215   3168 FD 43         mov [d], b
7216   316A 29 D9 38      mov b, [__cnarr] ; cnarr
7217   316D D7            push a
7218   316E 74            mov d, b
7219   316F DA            push d
7220   3170 29 61 39      mov b, [__divi] ; divi
7221   3173 E7            pop d
7222   3174 10 02 00      mov a, 2
7223   3177 AC            mul a, b
7224   3178 5A            add d, b
7225   3179 E4            pop a
7226   317A DA            push d
7227   317B 26 00 00      mov b, 0
7228   317E E7            pop d
7229   317F FD 43         mov [d], b
7230   3181             _for112_update:
7231   3181 29 61 39      mov b, [__divi] ; divi
7232   3184 D7            push a
7233   3185 11            mov a, b
7234   3186 FD 77         inc b
7235   3188 FD 42 61 39   mov [__divi], b
7236   318C 27            mov b, a
7237   318D E4            pop a
7238   318E 0A 2D 31      jmp _for112_cond
7239   3191             _for112_exit:
7240   3191 07 C1 18      call checkabsabsize
7241   3194 0A 00 31      jmp _while111_cond
7242   3197             _while111_exit:
7243   3197 29 6B 39      mov b, [__posflag] ; posflag
7244   319A D7            push a
7245   319B 11            mov a, b
7246   319C FD 77         inc b
7247   319E FD 42 6B 39   mov [__posflag], b
7248   31A2 27            mov b, a
7249   31A3 E4            pop a
7250   31A4             _if113_cond:
7251   31A4 29 6B 39      mov b, [__posflag] ; posflag
7252   31A7 D7            push a
7253   31A8 11            mov a, b
7254   31A9 26 01 00      mov b, 1
7255   31AC B0            cmp a, b
7256   31AD 0E            lodflgs
7257   31AE 87 01         and al, %00000001 ; ==
7258   31B0 22 00         mov ah, 0
7259   31B2 27            mov b, a
7260   31B3 E4            pop a
7261   31B4 C0 00 00      cmp b, 0
7262   31B7 C6 D2 31      je _if113_exit
7263   31BA             _if113_true:
7264   31BA 29 5B 39      mov b, [__divcounter1] ; divcounter1
7265   31BD D7            push a
7266   31BE 11            mov a, b
7267   31BF 26 0A 00      mov b, 10
7268   31C2 AC            mul a, b
7269   31C3 E4            pop a
7270   31C4 FD 42 5D 39   mov [__divcounter2], b
7271   31C8 26 00 00      mov b, 0
7272   31CB FD 42 5B 39   mov [__divcounter1], b
7273   31CF 0A D2 31      jmp _if113_exit
7274   31D2             _if113_exit:
7275   31D2 07 05 27      call aincrease
7276   31D5             _if114_cond:
7277   31D5 29 6B 39      mov b, [__posflag] ; posflag
7278   31D8 D7            push a
7279   31D9 11            mov a, b
7280   31DA 26 02 00      mov b, 2
7281   31DD B0            cmp a, b
7282   31DE 0E            lodflgs
7283   31DF 87 01         and al, %00000001 ; ==
7284   31E1 22 00         mov ah, 0
7285   31E3 27            mov b, a
7286   31E4 E4            pop a
7287   31E5 C0 00 00      cmp b, 0
7288   31E8 C6 B8 32      je _if114_exit
7289   31EB             _if114_true:
7290   31EB 26 00 00      mov b, 0
7291   31EE FD 42 6B 39   mov [__posflag], b
7292   31F2 29 25 39      mov b, [__divres] ; divres
7293   31F5 D7            push a
7294   31F6 74            mov d, b
7295   31F7 DA            push d
7296   31F8 26 0B 00      mov b, 11
7297   31FB D7            push a
7298   31FC 11            mov a, b
7299   31FD 29 5F 39      mov b, [__segmentcounter] ; segmentcounter
7300   3200 60            sub a, b
7301   3201 27            mov b, a
7302   3202 E4            pop a
7303   3203 E7            pop d
7304   3204 10 02 00      mov a, 2
7305   3207 AC            mul a, b
7306   3208 5A            add d, b
7307   3209 E4            pop a
7308   320A DA            push d
7309   320B 29 5D 39      mov b, [__divcounter2] ; divcounter2
7310   320E D7            push a
7311   320F 11            mov a, b
7312   3210 29 5B 39      mov b, [__divcounter1] ; divcounter1
7313   3213 54            add a, b
7314   3214 27            mov b, a
7315   3215 E4            pop a
7316   3216 E7            pop d
7317   3217 FD 43         mov [d], b
7318   3219 26 00 00      mov b, 0
7319   321C FD 42 5B 39   mov [__divcounter1], b
7320   3220 26 00 00      mov b, 0
7321   3223 FD 42 5D 39   mov [__divcounter2], b
7322   3227 29 5F 39      mov b, [__segmentcounter] ; segmentcounter
7323   322A D7            push a
7324   322B 11            mov a, b
7325   322C FD 77         inc b
7326   322E FD 42 5F 39   mov [__segmentcounter], b
7327   3232 27            mov b, a
7328   3233 E4            pop a
7329   3234 26 01 00      mov b, 1
7330   3237 FD 42 63 39   mov [__allzeroes], b
7331   323B             _for115_init:
7332   323B 26 00 00      mov b, 0
7333   323E FD 42 61 39   mov [__divi], b
7334   3242             _for115_cond:
7335   3242 29 61 39      mov b, [__divi] ; divi
7336   3245 D7            push a
7337   3246 11            mov a, b
7338   3247 26 0C 00      mov b, 12
7339   324A B0            cmp a, b
7340   324B 0E            lodflgs
7341   324C 87 02         and al, %00000010 ; <
7342   324E FD 9C         shr al
7343   3250 22 00         mov ah, 0
7344   3252 27            mov b, a
7345   3253 E4            pop a
7346   3254 C0 00 00      cmp b, 0
7347   3257 C6 9A 32      je _for115_exit
7348   325A             _for115_block:
7349   325A             _if116_cond:
7350   325A 29 71 38      mov b, [__anarr] ; anarr
7351   325D D7            push a
7352   325E 74            mov d, b
7353   325F DA            push d
7354   3260 29 61 39      mov b, [__divi] ; divi
7355   3263 E7            pop d
7356   3264 10 02 00      mov a, 2
7357   3267 AC            mul a, b
7358   3268 5A            add d, b
7359   3269 E4            pop a
7360   326A 2A            mov b, [d]
7361   326B D7            push a
7362   326C 11            mov a, b
7363   326D 26 00 00      mov b, 0
7364   3270 B0            cmp a, b
7365   3271 0E            lodflgs
7366   3272 87 01         and al, %00000001
7367   3274 8F 01         xor al, %00000001 ; !=
7368   3276 22 00         mov ah, 0
7369   3278 27            mov b, a
7370   3279 E4            pop a
7371   327A C0 00 00      cmp b, 0
7372   327D C6 8A 32      je _if116_exit
7373   3280             _if116_true:
7374   3280 26 00 00      mov b, 0
7375   3283 FD 42 63 39   mov [__allzeroes], b
7376   3287 0A 8A 32      jmp _if116_exit
7377   328A             _if116_exit:
7378   328A             _for115_update:
7379   328A 29 61 39      mov b, [__divi] ; divi
7380   328D D7            push a
7381   328E 11            mov a, b
7382   328F FD 77         inc b
7383   3291 FD 42 61 39   mov [__divi], b
7384   3295 27            mov b, a
7385   3296 E4            pop a
7386   3297 0A 42 32      jmp _for115_cond
7387   329A             _for115_exit:
7388   329A             _if117_cond:
7389   329A 29 63 39      mov b, [__allzeroes] ; allzeroes
7390   329D D7            push a
7391   329E 11            mov a, b
7392   329F 26 01 00      mov b, 1
7393   32A2 B0            cmp a, b
7394   32A3 0E            lodflgs
7395   32A4 87 01         and al, %00000001 ; ==
7396   32A6 22 00         mov ah, 0
7397   32A8 27            mov b, a
7398   32A9 E4            pop a
7399   32AA C0 00 00      cmp b, 0
7400   32AD C6 B5 32      je _if117_exit
7401   32B0             _if117_true:
7402   32B0 F9            leave
7403   32B1 09            ret
7404   32B2 0A B5 32      jmp _if117_exit
7405   32B5             _if117_exit:
7406   32B5 0A B8 32      jmp _if114_exit
7407   32B8             _if114_exit:
7408   32B8 0A E5 30      jmp _while110_cond
7409   32BB             _while110_exit:
7410   32BB F9            leave
7411   32BC 09            ret
7412   32BD             
7413   32BD             normdivres:
7414   32BD D2            push bp
7415   32BE 9B            mov bp, sp
7416   32BF             _for118_init:
7417   32BF 26 0C 00      mov b, 12
7418   32C2 FD 42 61 39   mov [__divi], b
7419   32C6             _for118_cond:
7420   32C6 29 61 39      mov b, [__divi] ; divi
7421   32C9 D7            push a
7422   32CA 11            mov a, b
7423   32CB 26 18 00      mov b, 24
7424   32CE B0            cmp a, b
7425   32CF 0E            lodflgs
7426   32D0 87 02         and al, %00000010 ; <
7427   32D2 FD 9C         shr al
7428   32D4 22 00         mov ah, 0
7429   32D6 27            mov b, a
7430   32D7 E4            pop a
7431   32D8 C0 00 00      cmp b, 0
7432   32DB C6 05 33      je _for118_exit
7433   32DE             _for118_block:
7434   32DE 29 0B 39      mov b, [__mulres] ; mulres
7435   32E1 D7            push a
7436   32E2 74            mov d, b
7437   32E3 DA            push d
7438   32E4 29 61 39      mov b, [__divi] ; divi
7439   32E7 E7            pop d
7440   32E8 10 02 00      mov a, 2
7441   32EB AC            mul a, b
7442   32EC 5A            add d, b
7443   32ED E4            pop a
7444   32EE DA            push d
7445   32EF 26 00 00      mov b, 0
7446   32F2 E7            pop d
7447   32F3 FD 43         mov [d], b
7448   32F5             _for118_update:
7449   32F5 29 61 39      mov b, [__divi] ; divi
7450   32F8 D7            push a
7451   32F9 11            mov a, b
7452   32FA FD 77         inc b
7453   32FC FD 42 61 39   mov [__divi], b
7454   3300 27            mov b, a
7455   3301 E4            pop a
7456   3302 0A C6 32      jmp _for118_cond
7457   3305             _for118_exit:
7458   3305             _for119_init:
7459   3305 26 00 00      mov b, 0
7460   3308 FD 42 61 39   mov [__divi], b
7461   330C             _for119_cond:
7462   330C 29 61 39      mov b, [__divi] ; divi
7463   330F D7            push a
7464   3310 11            mov a, b
7465   3311 26 0C 00      mov b, 12
7466   3314 B0            cmp a, b
7467   3315 0E            lodflgs
7468   3316 87 02         and al, %00000010 ; <
7469   3318 FD 9C         shr al
7470   331A 22 00         mov ah, 0
7471   331C 27            mov b, a
7472   331D E4            pop a
7473   331E C0 00 00      cmp b, 0
7474   3321 C6 59 33      je _for119_exit
7475   3324             _for119_block:
7476   3324 29 0B 39      mov b, [__mulres] ; mulres
7477   3327 D7            push a
7478   3328 74            mov d, b
7479   3329 DA            push d
7480   332A 29 61 39      mov b, [__divi] ; divi
7481   332D E7            pop d
7482   332E 10 02 00      mov a, 2
7483   3331 AC            mul a, b
7484   3332 5A            add d, b
7485   3333 E4            pop a
7486   3334 DA            push d
7487   3335 29 25 39      mov b, [__divres] ; divres
7488   3338 D7            push a
7489   3339 74            mov d, b
7490   333A DA            push d
7491   333B 29 61 39      mov b, [__divi] ; divi
7492   333E E7            pop d
7493   333F 10 02 00      mov a, 2
7494   3342 AC            mul a, b
7495   3343 5A            add d, b
7496   3344 E4            pop a
7497   3345 2A            mov b, [d]
7498   3346 E7            pop d
7499   3347 FD 43         mov [d], b
7500   3349             _for119_update:
7501   3349 29 61 39      mov b, [__divi] ; divi
7502   334C D7            push a
7503   334D 11            mov a, b
7504   334E FD 77         inc b
7505   3350 FD 42 61 39   mov [__divi], b
7506   3354 27            mov b, a
7507   3355 E4            pop a
7508   3356 0A 0C 33      jmp _for119_cond
7509   3359             _for119_exit:
7510   3359 07 8A 23      call normmulres
7511   335C             _for120_init:
7512   335C 26 00 00      mov b, 0
7513   335F FD 42 67 39   mov [__divshift], b
7514   3363             _for120_cond:
7515   3363 29 67 39      mov b, [__divshift] ; divshift
7516   3366 D7            push a
7517   3367 11            mov a, b
7518   3368 26 0B 00      mov b, 11
7519   336B B0            cmp a, b
7520   336C 0E            lodflgs
7521   336D 87 02         and al, %00000010 ; <
7522   336F FD 9C         shr al
7523   3371 22 00         mov ah, 0
7524   3373 27            mov b, a
7525   3374 E4            pop a
7526   3375 C0 00 00      cmp b, 0
7527   3378 C6 0E 34      je _for120_exit
7528   337B             _for120_block:
7529   337B             _for121_init:
7530   337B 26 00 00      mov b, 0
7531   337E FD 42 61 39   mov [__divi], b
7532   3382             _for121_cond:
7533   3382 29 61 39      mov b, [__divi] ; divi
7534   3385 D7            push a
7535   3386 11            mov a, b
7536   3387 26 17 00      mov b, 23
7537   338A B0            cmp a, b
7538   338B 0E            lodflgs
7539   338C 87 02         and al, %00000010 ; <
7540   338E FD 9C         shr al
7541   3390 22 00         mov ah, 0
7542   3392 27            mov b, a
7543   3393 E4            pop a
7544   3394 C0 00 00      cmp b, 0
7545   3397 C6 E7 33      je _for121_exit
7546   339A             _for121_block:
7547   339A 29 0B 39      mov b, [__mulres] ; mulres
7548   339D D7            push a
7549   339E 74            mov d, b
7550   339F DA            push d
7551   33A0 26 17 00      mov b, 23
7552   33A3 D7            push a
7553   33A4 11            mov a, b
7554   33A5 29 61 39      mov b, [__divi] ; divi
7555   33A8 60            sub a, b
7556   33A9 27            mov b, a
7557   33AA E4            pop a
7558   33AB E7            pop d
7559   33AC 10 02 00      mov a, 2
7560   33AF AC            mul a, b
7561   33B0 5A            add d, b
7562   33B1 E4            pop a
7563   33B2 DA            push d
7564   33B3 29 0B 39      mov b, [__mulres] ; mulres
7565   33B6 D7            push a
7566   33B7 74            mov d, b
7567   33B8 DA            push d
7568   33B9 26 17 00      mov b, 23
7569   33BC D7            push a
7570   33BD 11            mov a, b
7571   33BE 29 61 39      mov b, [__divi] ; divi
7572   33C1 60            sub a, b
7573   33C2 27            mov b, a
7574   33C3 E4            pop a
7575   33C4 D7            push a
7576   33C5 11            mov a, b
7577   33C6 26 01 00      mov b, 1
7578   33C9 60            sub a, b
7579   33CA 27            mov b, a
7580   33CB E4            pop a
7581   33CC E7            pop d
7582   33CD 10 02 00      mov a, 2
7583   33D0 AC            mul a, b
7584   33D1 5A            add d, b
7585   33D2 E4            pop a
7586   33D3 2A            mov b, [d]
7587   33D4 E7            pop d
7588   33D5 FD 43         mov [d], b
7589   33D7             _for121_update:
7590   33D7 29 61 39      mov b, [__divi] ; divi
7591   33DA D7            push a
7592   33DB 11            mov a, b
7593   33DC FD 77         inc b
7594   33DE FD 42 61 39   mov [__divi], b
7595   33E2 27            mov b, a
7596   33E3 E4            pop a
7597   33E4 0A 82 33      jmp _for121_cond
7598   33E7             _for121_exit:
7599   33E7 29 0B 39      mov b, [__mulres] ; mulres
7600   33EA D7            push a
7601   33EB 74            mov d, b
7602   33EC DA            push d
7603   33ED 26 00 00      mov b, 0
7604   33F0 E7            pop d
7605   33F1 10 02 00      mov a, 2
7606   33F4 AC            mul a, b
7607   33F5 5A            add d, b
7608   33F6 E4            pop a
7609   33F7 DA            push d
7610   33F8 26 00 00      mov b, 0
7611   33FB E7            pop d
7612   33FC FD 43         mov [d], b
7613   33FE             _for120_update:
7614   33FE 29 67 39      mov b, [__divshift] ; divshift
7615   3401 D7            push a
7616   3402 11            mov a, b
7617   3403 FD 77         inc b
7618   3405 FD 42 67 39   mov [__divshift], b
7619   3409 27            mov b, a
7620   340A E4            pop a
7621   340B 0A 63 33      jmp _for120_cond
7622   340E             _for120_exit:
7623   340E             _for122_init:
7624   340E 26 00 00      mov b, 0
7625   3411 FD 42 61 39   mov [__divi], b
7626   3415             _for122_cond:
7627   3415 29 61 39      mov b, [__divi] ; divi
7628   3418 D7            push a
7629   3419 11            mov a, b
7630   341A 26 0C 00      mov b, 12
7631   341D B0            cmp a, b
7632   341E 0E            lodflgs
7633   341F 87 02         and al, %00000010 ; <
7634   3421 FD 9C         shr al
7635   3423 22 00         mov ah, 0
7636   3425 27            mov b, a
7637   3426 E4            pop a
7638   3427 C0 00 00      cmp b, 0
7639   342A C6 6A 34      je _for122_exit
7640   342D             _for122_block:
7641   342D 29 25 39      mov b, [__divres] ; divres
7642   3430 D7            push a
7643   3431 74            mov d, b
7644   3432 DA            push d
7645   3433 29 61 39      mov b, [__divi] ; divi
7646   3436 E7            pop d
7647   3437 10 02 00      mov a, 2
7648   343A AC            mul a, b
7649   343B 5A            add d, b
7650   343C E4            pop a
7651   343D DA            push d
7652   343E 29 0B 39      mov b, [__mulres] ; mulres
7653   3441 D7            push a
7654   3442 74            mov d, b
7655   3443 DA            push d
7656   3444 29 61 39      mov b, [__divi] ; divi
7657   3447 D7            push a
7658   3448 11            mov a, b
7659   3449 26 0C 00      mov b, 12
7660   344C 54            add a, b
7661   344D 27            mov b, a
7662   344E E4            pop a
7663   344F E7            pop d
7664   3450 10 02 00      mov a, 2
7665   3453 AC            mul a, b
7666   3454 5A            add d, b
7667   3455 E4            pop a
7668   3456 2A            mov b, [d]
7669   3457 E7            pop d
7670   3458 FD 43         mov [d], b
7671   345A             _for122_update:
7672   345A 29 61 39      mov b, [__divi] ; divi
7673   345D D7            push a
7674   345E 11            mov a, b
7675   345F FD 77         inc b
7676   3461 FD 42 61 39   mov [__divi], b
7677   3465 27            mov b, a
7678   3466 E4            pop a
7679   3467 0A 15 34      jmp _for122_cond
7680   346A             _for122_exit:
7681   346A F9            leave
7682   346B 09            ret
7683   346C             
7684   346C             times:
7685   346C D2            push bp
7686   346D 9B            mov bp, sp
7687   346E 07 63 15      call fixsignin
7688   3471 26 00 00      mov b, 0
7689   3474 FD 42 2B 39   mov [__csign], b
7690   3478             _if123_cond:
7691   3478 29 27 39      mov b, [__asign] ; asign
7692   347B D7            push a
7693   347C 11            mov a, b
7694   347D 29 29 39      mov b, [__bsign] ; bsign
7695   3480 B0            cmp a, b
7696   3481 0E            lodflgs
7697   3482 87 01         and al, %00000001
7698   3484 8F 01         xor al, %00000001 ; !=
7699   3486 22 00         mov ah, 0
7700   3488 27            mov b, a
7701   3489 E4            pop a
7702   348A C0 00 00      cmp b, 0
7703   348D C6 9A 34      je _if123_exit
7704   3490             _if123_true:
7705   3490 26 01 00      mov b, 1
7706   3493 FD 42 2B 39   mov [__csign], b
7707   3497 0A 9A 34      jmp _if123_exit
7708   349A             _if123_exit:
7709   349A 26 00 00      mov b, 0
7710   349D FD 42 27 39   mov [__asign], b
7711   34A1 26 00 00      mov b, 0
7712   34A4 FD 42 29 39   mov [__bsign], b
7713   34A8 07 B4 25      call prototimes
7714   34AB 26 01 00      mov b, 1
7715   34AE FD 42 63 39   mov [__allzeroes], b
7716   34B2             _for124_init:
7717   34B2 26 0F 00      mov b, 15
7718   34B5 FD 42 2F 39   mov [__pos], b
7719   34B9             _for124_cond:
7720   34B9 29 2F 39      mov b, [__pos] ; pos
7721   34BC D7            push a
7722   34BD 11            mov a, b
7723   34BE 26 18 00      mov b, 24
7724   34C1 B0            cmp a, b
7725   34C2 0E            lodflgs
7726   34C3 87 02         and al, %00000010 ; <
7727   34C5 FD 9C         shr al
7728   34C7 22 00         mov ah, 0
7729   34C9 27            mov b, a
7730   34CA E4            pop a
7731   34CB C0 00 00      cmp b, 0
7732   34CE C6 11 35      je _for124_exit
7733   34D1             _for124_block:
7734   34D1             _if125_cond:
7735   34D1 29 0B 39      mov b, [__mulres] ; mulres
7736   34D4 D7            push a
7737   34D5 74            mov d, b
7738   34D6 DA            push d
7739   34D7 29 2F 39      mov b, [__pos] ; pos
7740   34DA E7            pop d
7741   34DB 10 02 00      mov a, 2
7742   34DE AC            mul a, b
7743   34DF 5A            add d, b
7744   34E0 E4            pop a
7745   34E1 2A            mov b, [d]
7746   34E2 D7            push a
7747   34E3 11            mov a, b
7748   34E4 26 00 00      mov b, 0
7749   34E7 B0            cmp a, b
7750   34E8 0E            lodflgs
7751   34E9 87 01         and al, %00000001
7752   34EB 8F 01         xor al, %00000001 ; !=
7753   34ED 22 00         mov ah, 0
7754   34EF 27            mov b, a
7755   34F0 E4            pop a
7756   34F1 C0 00 00      cmp b, 0
7757   34F4 C6 01 35      je _if125_exit
7758   34F7             _if125_true:
7759   34F7 26 00 00      mov b, 0
7760   34FA FD 42 63 39   mov [__allzeroes], b
7761   34FE 0A 01 35      jmp _if125_exit
7762   3501             _if125_exit:
7763   3501             _for124_update:
7764   3501 29 2F 39      mov b, [__pos] ; pos
7765   3504 D7            push a
7766   3505 11            mov a, b
7767   3506 FD 77         inc b
7768   3508 FD 42 2F 39   mov [__pos], b
7769   350C 27            mov b, a
7770   350D E4            pop a
7771   350E 0A B9 34      jmp _for124_cond
7772   3511             _for124_exit:
7773   3511             _if126_cond:
7774   3511 29 63 39      mov b, [__allzeroes] ; allzeroes
7775   3514 D7            push a
7776   3515 11            mov a, b
7777   3516 26 01 00      mov b, 1
7778   3519 B0            cmp a, b
7779   351A 0E            lodflgs
7780   351B 87 01         and al, %00000001 ; ==
7781   351D 22 00         mov ah, 0
7782   351F 27            mov b, a
7783   3520 E4            pop a
7784   3521 C0 00 00      cmp b, 0
7785   3524 C6 86 35      je _if126_exit
7786   3527             _if126_true:
7787   3527             _for127_init:
7788   3527 26 04 00      mov b, 4
7789   352A FD 42 2F 39   mov [__pos], b
7790   352E             _for127_cond:
7791   352E 29 2F 39      mov b, [__pos] ; pos
7792   3531 D7            push a
7793   3532 11            mov a, b
7794   3533 26 0F 00      mov b, 15
7795   3536 B0            cmp a, b
7796   3537 0E            lodflgs
7797   3538 87 02         and al, %00000010 ; <
7798   353A FD 9C         shr al
7799   353C 22 00         mov ah, 0
7800   353E 27            mov b, a
7801   353F E4            pop a
7802   3540 C0 00 00      cmp b, 0
7803   3543 C6 83 35      je _for127_exit
7804   3546             _for127_block:
7805   3546 29 D9 38      mov b, [__cnarr] ; cnarr
7806   3549 D7            push a
7807   354A 74            mov d, b
7808   354B DA            push d
7809   354C 29 2F 39      mov b, [__pos] ; pos
7810   354F D7            push a
7811   3550 11            mov a, b
7812   3551 26 04 00      mov b, 4
7813   3554 60            sub a, b
7814   3555 27            mov b, a
7815   3556 E4            pop a
7816   3557 E7            pop d
7817   3558 10 02 00      mov a, 2
7818   355B AC            mul a, b
7819   355C 5A            add d, b
7820   355D E4            pop a
7821   355E DA            push d
7822   355F 29 0B 39      mov b, [__mulres] ; mulres
7823   3562 D7            push a
7824   3563 74            mov d, b
7825   3564 DA            push d
7826   3565 29 2F 39      mov b, [__pos] ; pos
7827   3568 E7            pop d
7828   3569 10 02 00      mov a, 2
7829   356C AC            mul a, b
7830   356D 5A            add d, b
7831   356E E4            pop a
7832   356F 2A            mov b, [d]
7833   3570 E7            pop d
7834   3571 FD 43         mov [d], b
7835   3573             _for127_update:
7836   3573 29 2F 39      mov b, [__pos] ; pos
7837   3576 D7            push a
7838   3577 11            mov a, b
7839   3578 FD 77         inc b
7840   357A FD 42 2F 39   mov [__pos], b
7841   357E 27            mov b, a
7842   357F E4            pop a
7843   3580 0A 2E 35      jmp _for127_cond
7844   3583             _for127_exit:
7845   3583 0A 86 35      jmp _if126_exit
7846   3586             _if126_exit:
7847   3586             _if128_cond:
7848   3586 29 D9 38      mov b, [__cnarr] ; cnarr
7849   3589 D7            push a
7850   358A 74            mov d, b
7851   358B DA            push d
7852   358C 26 0B 00      mov b, 11
7853   358F E7            pop d
7854   3590 10 02 00      mov a, 2
7855   3593 AC            mul a, b
7856   3594 5A            add d, b
7857   3595 E4            pop a
7858   3596 2A            mov b, [d]
7859   3597 D7            push a
7860   3598 11            mov a, b
7861   3599 26 09 00      mov b, 9
7862   359C B0            cmp a, b
7863   359D 0E            lodflgs
7864   359E 87 03         and al, %00000011
7865   35A0 B9 00         cmp al, 0
7866   35A2 0E            lodflgs
7867   35A3 22 00         mov ah, 0
7868   35A5 27            mov b, a
7869   35A6 E4            pop a
7870   35A7 C0 00 00      cmp b, 0
7871   35AA C6 F6 35      je _if128_exit
7872   35AD             _if128_true:
7873   35AD             _for129_init:
7874   35AD 26 00 00      mov b, 0
7875   35B0 FD 42 2F 39   mov [__pos], b
7876   35B4             _for129_cond:
7877   35B4 29 2F 39      mov b, [__pos] ; pos
7878   35B7 D7            push a
7879   35B8 11            mov a, b
7880   35B9 26 0A 00      mov b, 10
7881   35BC B0            cmp a, b
7882   35BD 0E            lodflgs
7883   35BE 87 02         and al, %00000010 ; <
7884   35C0 FD 9C         shr al
7885   35C2 22 00         mov ah, 0
7886   35C4 27            mov b, a
7887   35C5 E4            pop a
7888   35C6 C0 00 00      cmp b, 0
7889   35C9 C6 F3 35      je _for129_exit
7890   35CC             _for129_block:
7891   35CC 29 D9 38      mov b, [__cnarr] ; cnarr
7892   35CF D7            push a
7893   35D0 74            mov d, b
7894   35D1 DA            push d
7895   35D2 29 2F 39      mov b, [__pos] ; pos
7896   35D5 E7            pop d
7897   35D6 10 02 00      mov a, 2
7898   35D9 AC            mul a, b
7899   35DA 5A            add d, b
7900   35DB E4            pop a
7901   35DC DA            push d
7902   35DD 26 00 00      mov b, 0
7903   35E0 E7            pop d
7904   35E1 FD 43         mov [d], b
7905   35E3             _for129_update:
7906   35E3 29 2F 39      mov b, [__pos] ; pos
7907   35E6 D7            push a
7908   35E7 11            mov a, b
7909   35E8 FD 77         inc b
7910   35EA FD 42 2F 39   mov [__pos], b
7911   35EE 27            mov b, a
7912   35EF E4            pop a
7913   35F0 0A B4 35      jmp _for129_cond
7914   35F3             _for129_exit:
7915   35F3 0A F6 35      jmp _if128_exit
7916   35F6             _if128_exit:
7917   35F6 07 D9 16      call fixcsizezero
7918   35F9 07 88 16      call fixsignout
7919   35FC F9            leave
7920   35FD 09            ret
7921   35FE             
7922   35FE             dividedby:
7923   35FE D2            push bp
7924   35FF 9B            mov bp, sp
7925   3600 07 63 15      call fixsignin
7926   3603 26 00 00      mov b, 0
7927   3606 FD 42 2B 39   mov [__csign], b
7928   360A             _if130_cond:
7929   360A 29 27 39      mov b, [__asign] ; asign
7930   360D D7            push a
7931   360E 11            mov a, b
7932   360F 29 29 39      mov b, [__bsign] ; bsign
7933   3612 B0            cmp a, b
7934   3613 0E            lodflgs
7935   3614 87 01         and al, %00000001
7936   3616 8F 01         xor al, %00000001 ; !=
7937   3618 22 00         mov ah, 0
7938   361A 27            mov b, a
7939   361B E4            pop a
7940   361C C0 00 00      cmp b, 0
7941   361F C6 2C 36      je _if130_exit
7942   3622             _if130_true:
7943   3622 26 01 00      mov b, 1
7944   3625 FD 42 2B 39   mov [__csign], b
7945   3629 0A 2C 36      jmp _if130_exit
7946   362C             _if130_exit:
7947   362C 26 00 00      mov b, 0
7948   362F FD 42 27 39   mov [__asign], b
7949   3633 26 00 00      mov b, 0
7950   3636 FD 42 29 39   mov [__bsign], b
7951   363A 29 2B 39      mov b, [__csign] ; csign
7952   363D FD 42 65 39   mov [__bkpcsign], b
7953   3641 07 3D 2D      call protodividedby
7954   3644 07 BD 32      call normdivres
7955   3647             _for131_init:
7956   3647 26 00 00      mov b, 0
7957   364A FD 42 2F 39   mov [__pos], b
7958   364E             _for131_cond:
7959   364E 29 2F 39      mov b, [__pos] ; pos
7960   3651 D7            push a
7961   3652 11            mov a, b
7962   3653 26 0C 00      mov b, 12
7963   3656 B0            cmp a, b
7964   3657 0E            lodflgs
7965   3658 87 02         and al, %00000010 ; <
7966   365A FD 9C         shr al
7967   365C 22 00         mov ah, 0
7968   365E 27            mov b, a
7969   365F E4            pop a
7970   3660 C0 00 00      cmp b, 0
7971   3663 C6 9B 36      je _for131_exit
7972   3666             _for131_block:
7973   3666 29 D9 38      mov b, [__cnarr] ; cnarr
7974   3669 D7            push a
7975   366A 74            mov d, b
7976   366B DA            push d
7977   366C 29 2F 39      mov b, [__pos] ; pos
7978   366F E7            pop d
7979   3670 10 02 00      mov a, 2
7980   3673 AC            mul a, b
7981   3674 5A            add d, b
7982   3675 E4            pop a
7983   3676 DA            push d
7984   3677 29 25 39      mov b, [__divres] ; divres
7985   367A D7            push a
7986   367B 74            mov d, b
7987   367C DA            push d
7988   367D 29 2F 39      mov b, [__pos] ; pos
7989   3680 E7            pop d
7990   3681 10 02 00      mov a, 2
7991   3684 AC            mul a, b
7992   3685 5A            add d, b
7993   3686 E4            pop a
7994   3687 2A            mov b, [d]
7995   3688 E7            pop d
7996   3689 FD 43         mov [d], b
7997   368B             _for131_update:
7998   368B 29 2F 39      mov b, [__pos] ; pos
7999   368E D7            push a
8000   368F 11            mov a, b
8001   3690 FD 77         inc b
8002   3692 FD 42 2F 39   mov [__pos], b
8003   3696 27            mov b, a
8004   3697 E4            pop a
8005   3698 0A 4E 36      jmp _for131_cond
8006   369B             _for131_exit:
8007   369B             _for132_init:
8008   369B 26 00 00      mov b, 0
8009   369E FD 42 2F 39   mov [__pos], b
8010   36A2             _for132_cond:
8011   36A2 29 2F 39      mov b, [__pos] ; pos
8012   36A5 D7            push a
8013   36A6 11            mov a, b
8014   36A7 29 59 39      mov b, [__alshift] ; alshift
8015   36AA D7            push a
8016   36AB 11            mov a, b
8017   36AC 29 55 39      mov b, [__brshift] ; brshift
8018   36AF 54            add a, b
8019   36B0 27            mov b, a
8020   36B1 E4            pop a
8021   36B2 D7            push a
8022   36B3 11            mov a, b
8023   36B4 26 0C 00      mov b, 12
8024   36B7 54            add a, b
8025   36B8 27            mov b, a
8026   36B9 E4            pop a
8027   36BA D7            push a
8028   36BB 11            mov a, b
8029   36BC 29 57 39      mov b, [__blshift] ; blshift
8030   36BF 60            sub a, b
8031   36C0 27            mov b, a
8032   36C1 E4            pop a
8033   36C2 B0            cmp a, b
8034   36C3 0E            lodflgs
8035   36C4 87 03         and al, %00000011 ; <=
8036   36C6 B9 00         cmp al, 0
8037   36C8 0E            lodflgs
8038   36C9 8F 01         xor al, %00000001
8039   36CB 22 00         mov ah, 0
8040   36CD 27            mov b, a
8041   36CE E4            pop a
8042   36CF C0 00 00      cmp b, 0
8043   36D2 C6 E8 37      je _for132_exit
8044   36D5             _for132_block:
8045   36D5             _for133_init:
8046   36D5 26 00 00      mov b, 0
8047   36D8 FD 42 61 39   mov [__divi], b
8048   36DC             _for133_cond:
8049   36DC 29 61 39      mov b, [__divi] ; divi
8050   36DF D7            push a
8051   36E0 11            mov a, b
8052   36E1 26 0B 00      mov b, 11
8053   36E4 B0            cmp a, b
8054   36E5 0E            lodflgs
8055   36E6 87 02         and al, %00000010 ; <
8056   36E8 FD 9C         shr al
8057   36EA 22 00         mov ah, 0
8058   36EC 27            mov b, a
8059   36ED E4            pop a
8060   36EE C0 00 00      cmp b, 0
8061   36F1 C6 A7 37      je _for133_exit
8062   36F4             _for133_block:
8063   36F4 29 D9 38      mov b, [__cnarr] ; cnarr
8064   36F7 D7            push a
8065   36F8 74            mov d, b
8066   36F9 DA            push d
8067   36FA 29 61 39      mov b, [__divi] ; divi
8068   36FD D7            push a
8069   36FE 11            mov a, b
8070   36FF 26 01 00      mov b, 1
8071   3702 54            add a, b
8072   3703 27            mov b, a
8073   3704 E4            pop a
8074   3705 E7            pop d
8075   3706 10 02 00      mov a, 2
8076   3709 AC            mul a, b
8077   370A 5A            add d, b
8078   370B E4            pop a
8079   370C 2A            mov b, [d]
8080   370D D7            push a
8081   370E 11            mov a, b
8082   370F 26 0A 00      mov b, 10
8083   3712 AE            div a, b
8084   3713 FD 78         mov g, a
8085   3715 11            mov a, b
8086   3716 FD 27         mov b, g
8087   3718 E4            pop a
8088   3719 FD 42 69 39   mov [__subi], b
8089   371D 29 69 39      mov b, [__subi] ; subi
8090   3720 D7            push a
8091   3721 11            mov a, b
8092   3722 26 0A 00      mov b, 10
8093   3725 AC            mul a, b
8094   3726 E4            pop a
8095   3727 FD 42 69 39   mov [__subi], b
8096   372B 29 D9 38      mov b, [__cnarr] ; cnarr
8097   372E D7            push a
8098   372F 74            mov d, b
8099   3730 DA            push d
8100   3731 29 61 39      mov b, [__divi] ; divi
8101   3734 D7            push a
8102   3735 11            mov a, b
8103   3736 26 01 00      mov b, 1
8104   3739 54            add a, b
8105   373A 27            mov b, a
8106   373B E4            pop a
8107   373C E7            pop d
8108   373D 10 02 00      mov a, 2
8109   3740 AC            mul a, b
8110   3741 5A            add d, b
8111   3742 E4            pop a
8112   3743 2A            mov b, [d]
8113   3744 D7            push a
8114   3745 11            mov a, b
8115   3746 29 69 39      mov b, [__subi] ; subi
8116   3749 60            sub a, b
8117   374A 27            mov b, a
8118   374B E4            pop a
8119   374C FD 42 69 39   mov [__subi], b
8120   3750 29 69 39      mov b, [__subi] ; subi
8121   3753 D7            push a
8122   3754 11            mov a, b
8123   3755 26 0A 00      mov b, 10
8124   3758 AC            mul a, b
8125   3759 E4            pop a
8126   375A FD 42 69 39   mov [__subi], b
8127   375E 29 D9 38      mov b, [__cnarr] ; cnarr
8128   3761 D7            push a
8129   3762 74            mov d, b
8130   3763 DA            push d
8131   3764 29 61 39      mov b, [__divi] ; divi
8132   3767 E7            pop d
8133   3768 10 02 00      mov a, 2
8134   376B AC            mul a, b
8135   376C 5A            add d, b
8136   376D E4            pop a
8137   376E DA            push d
8138   376F 29 69 39      mov b, [__subi] ; subi
8139   3772 D7            push a
8140   3773 11            mov a, b
8141   3774 29 D9 38      mov b, [__cnarr] ; cnarr
8142   3777 D7            push a
8143   3778 74            mov d, b
8144   3779 DA            push d
8145   377A 29 61 39      mov b, [__divi] ; divi
8146   377D E7            pop d
8147   377E 10 02 00      mov a, 2
8148   3781 AC            mul a, b
8149   3782 5A            add d, b
8150   3783 E4            pop a
8151   3784 2A            mov b, [d]
8152   3785 D7            push a
8153   3786 11            mov a, b
8154   3787 26 0A 00      mov b, 10
8155   378A AE            div a, b
8156   378B FD 78         mov g, a
8157   378D 11            mov a, b
8158   378E FD 27         mov b, g
8159   3790 E4            pop a
8160   3791 54            add a, b
8161   3792 27            mov b, a
8162   3793 E4            pop a
8163   3794 E7            pop d
8164   3795 FD 43         mov [d], b
8165   3797             _for133_update:
8166   3797 29 61 39      mov b, [__divi] ; divi
8167   379A D7            push a
8168   379B 11            mov a, b
8169   379C FD 77         inc b
8170   379E FD 42 61 39   mov [__divi], b
8171   37A2 27            mov b, a
8172   37A3 E4            pop a
8173   37A4 0A DC 36      jmp _for133_cond
8174   37A7             _for133_exit:
8175   37A7 29 D9 38      mov b, [__cnarr] ; cnarr
8176   37AA D7            push a
8177   37AB 74            mov d, b
8178   37AC DA            push d
8179   37AD 26 0B 00      mov b, 11
8180   37B0 E7            pop d
8181   37B1 10 02 00      mov a, 2
8182   37B4 AC            mul a, b
8183   37B5 5A            add d, b
8184   37B6 E4            pop a
8185   37B7 DA            push d
8186   37B8 29 D9 38      mov b, [__cnarr] ; cnarr
8187   37BB D7            push a
8188   37BC 74            mov d, b
8189   37BD DA            push d
8190   37BE 26 0B 00      mov b, 11
8191   37C1 E7            pop d
8192   37C2 10 02 00      mov a, 2
8193   37C5 AC            mul a, b
8194   37C6 5A            add d, b
8195   37C7 E4            pop a
8196   37C8 2A            mov b, [d]
8197   37C9 D7            push a
8198   37CA 11            mov a, b
8199   37CB 26 0A 00      mov b, 10
8200   37CE AE            div a, b
8201   37CF FD 78         mov g, a
8202   37D1 11            mov a, b
8203   37D2 FD 27         mov b, g
8204   37D4 E4            pop a
8205   37D5 E7            pop d
8206   37D6 FD 43         mov [d], b
8207   37D8             _for132_update:
8208   37D8 29 2F 39      mov b, [__pos] ; pos
8209   37DB D7            push a
8210   37DC 11            mov a, b
8211   37DD FD 77         inc b
8212   37DF FD 42 2F 39   mov [__pos], b
8213   37E3 27            mov b, a
8214   37E4 E4            pop a
8215   37E5 0A A2 36      jmp _for132_cond
8216   37E8             _for132_exit:
8217   37E8 29 65 39      mov b, [__bkpcsign] ; bkpcsign
8218   37EB FD 42 2B 39   mov [__csign], b
8219   37EF 07 D9 16      call fixcsizezero
8220   37F2 07 88 16      call fixsignout
8221   37F5 F9            leave
8222   37F6 09            ret
8223   37F7             ; --- END TEXT BLOCK
8224   37F7             
8225   37F7             ; --- BEGIN DATA BLOCK
8226   37F7 20 00       __sp_data: .db " ", 0
8227   37F9 F7 37       __sp: .dw __sp_data
8228   37FB 00 00 00 00 __ionum_data: .fill 12, 0
8228   37FF 00 00 00 00 
8228   3803 00 00 00 00 
8229   3807 FB 37       __ionum: .dw __ionum_data
8230   3809 00 00       __ionr: .dw 0
8231   380B 00 00       __ioshift: .dw 0
8232   380D 00 00 00 00 __datum_data: .fill 72, 0
8232   3811 00 00 00 00 
8232   3815 00 00 00 00 
8232   3819 00 00 00 00 
8232   381D 00 00 00 00 
8232   3821 00 00 00 00 
8232   3825 00 00 00 00 
8232   3829 00 00 00 00 
8232   382D 00 00 00 00 
8232   3831 00 00 00 00 
8232   3835 00 00 00 00 
8232   3839 00 00 00 00 
8232   383D 00 00 00 00 
8232   3841 00 00 00 00 
8232   3845 00 00 00 00 
8232   3849 00 00 00 00 
8232   384D 00 00 00 00 
8232   3851 00 00 00 00 
8233   3855 0D 38       __datum: .dw __datum_data
8234   3857 00 00       __datumpos: .fill 2, 0
8235   3859 00 00 00 00 __anarr_data: .fill 24, 0
8235   385D 00 00 00 00 
8235   3861 00 00 00 00 
8235   3865 00 00 00 00 
8235   3869 00 00 00 00 
8235   386D 00 00 00 00 
8236   3871 59 38       __anarr: .dw __anarr_data
8237   3873 00 00 00 00 __bnarr_data: .fill 24, 0
8237   3877 00 00 00 00 
8237   387B 00 00 00 00 
8237   387F 00 00 00 00 
8237   3883 00 00 00 00 
8237   3887 00 00 00 00 
8238   388B 73 38       __bnarr: .dw __bnarr_data
8239   388D 00 00 00 00 __anarrbkp_data: .fill 24, 0
8239   3891 00 00 00 00 
8239   3895 00 00 00 00 
8239   3899 00 00 00 00 
8239   389D 00 00 00 00 
8239   38A1 00 00 00 00 
8240   38A5 8D 38       __anarrbkp: .dw __anarrbkp_data
8241   38A7 00 00 00 00 __bnarrbkp_data: .fill 24, 0
8241   38AB 00 00 00 00 
8241   38AF 00 00 00 00 
8241   38B3 00 00 00 00 
8241   38B7 00 00 00 00 
8241   38BB 00 00 00 00 
8242   38BF A7 38       __bnarrbkp: .dw __bnarrbkp_data
8243   38C1 00 00 00 00 __cnarr_data: .fill 24, 0
8243   38C5 00 00 00 00 
8243   38C9 00 00 00 00 
8243   38CD 00 00 00 00 
8243   38D1 00 00 00 00 
8243   38D5 00 00 00 00 
8244   38D9 C1 38       __cnarr: .dw __cnarr_data
8245   38DB 00 00 00 00 __mulres_data: .fill 48, 0
8245   38DF 00 00 00 00 
8245   38E3 00 00 00 00 
8245   38E7 00 00 00 00 
8245   38EB 00 00 00 00 
8245   38EF 00 00 00 00 
8245   38F3 00 00 00 00 
8245   38F7 00 00 00 00 
8245   38FB 00 00 00 00 
8245   38FF 00 00 00 00 
8245   3903 00 00 00 00 
8245   3907 00 00 00 00 
8246   390B DB 38       __mulres: .dw __mulres_data
8247   390D 00 00 00 00 __divres_data: .fill 24, 0
8247   3911 00 00 00 00 
8247   3915 00 00 00 00 
8247   3919 00 00 00 00 
8247   391D 00 00 00 00 
8247   3921 00 00 00 00 
8248   3925 0D 39       __divres: .dw __divres_data
8249   3927 00 00       __asign: .dw 0
8250   3929 00 00       __bsign: .dw 0
8251   392B 00 00       __csign: .dw 0
8252   392D 00 00       __protopos: .dw 0
8253   392F 00 00       __pos: .dw 0
8254   3931 00 00       __carry: .dw 0
8255   3933 00 00       __nextcarry: .dw 0
8256   3935 00 00       __agtb: .dw 0
8257   3937 00 00       __bgta: .dw 0
8258   3939 00 00       __aeqb: .dw 0
8259   393B 00 00       __aneqb: .dw 0
8260   393D 00 00       __ageb: .dw 0
8261   393F 00 00       __bgea: .dw 0
8262   3941 00 00       __eqflag: .dw 0
8263   3943 00 00       __sizepos: .dw 0
8264   3945 00 00       __psizepos: .dw 0
8265   3947 00 00       __swappos: .dw 0
8266   3949 00 00       __swaptmp: .dw 0
8267   394B 00 00       __toolarge: .dw 0
8268   394D 00 00       __normal: .dw 0
8269   394F 00 00       __mulpos1: .dw 0
8270   3951 00 00       __mulpos2: .dw 0
8271   3953 00 00       __mulpos3: .dw 0
8272   3955 00 00       __brshift: .dw 0
8273   3957 00 00       __blshift: .dw 0
8274   3959 00 00       __alshift: .dw 0
8275   395B 00 00       __divcounter1: .dw 0
8276   395D 00 00       __divcounter2: .dw 0
8277   395F 00 00       __segmentcounter: .dw 0
8278   3961 00 00       __divi: .dw 0
8279   3963 00 00       __allzeroes: .dw 0
8280   3965 00 00       __bkpcsign: .dw 0
8281   3967 00 00       __divshift: .dw 0
8282   3969 00 00       __subi: .dw 0
8283   396B 00 00       __posflag: .dw 0
8284   396D 0A 00       __string_0: .db "\n", 0
8285   396F 20 00       __string_1: .db " ", 0
8286   3971             ; --- END DATA BLOCK
8287   3971             
8288   3971             ; --- BEGIN INCLUDE BLOCK
8289   3971             .include "lib/stdio.asm"
0001+  3971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  3971             ; stdio.s
0003+  3971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  3971             .include "lib/string.asm"
0001++ 3971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 3971             ; string.s
0003++ 3971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 3971             
0005++ 3971             
0006++ 3971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 3971             ; strrev
0008++ 3971             ; reverse a string
0009++ 3971             ; D = string address
0010++ 3971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 3971             ; 01234
0012++ 3971             strrev:
0013++ 3971 4B          	pusha
0014++ 3972 07 B8 39    	call strlen	; length in C
0015++ 3975 12          	mov a, c
0016++ 3976 AF 01 00    	cmp a, 1
0017++ 3979 D0 93 39    	jleu strrev_end	; check string length. string len must be > 1
0018++ 397C 7D          	dec a
0019++ 397D FD 4E       	mov si, d	; beginning of string
0020++ 397F FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 3981 59          	add d, a	; end of string
0022++ 3982 12          	mov a, c
0023++ 3983 FD 9B       	shr a		; divide by 2
0024++ 3985 39          	mov c, a	; C now counts the steps
0025++ 3986             strrev_L0:
0026++ 3986 32          	mov bl, [d]	; save load right-side char into BL
0027++ 3987 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 3988 3E          	mov [d], al	; store left char into right side
0029++ 3989 1B          	mov al, bl
0030++ 398A F7          	stosb		; store right-side char into left-side; increase DI
0031++ 398B 7E          	dec c
0032++ 398C 7F          	dec d
0033++ 398D C2 00 00    	cmp c, 0
0034++ 3990 C7 86 39    	jne strrev_L0
0035++ 3993             strrev_end:
0036++ 3993 4C          	popa
0037++ 3994 09          	ret
0038++ 3995             	
0039++ 3995             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 3995             ; strchr
0041++ 3995             ; search string in D for char in AL
0042++ 3995             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 3995             strchr:
0044++ 3995             strchr_L0:
0045++ 3995 32          	mov bl, [d]
0046++ 3996 C1 00       	cmp bl, 0
0047++ 3998 C6 A3 39    	je strchr_end
0048++ 399B BA          	cmp al, bl
0049++ 399C C6 A3 39    	je strchr_end
0050++ 399F 79          	inc d
0051++ 39A0 0A 95 39    	jmp strchr_L0
0052++ 39A3             strchr_end:
0053++ 39A3 1B          	mov al, bl
0054++ 39A4 09          	ret
0055++ 39A5             
0056++ 39A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 39A5             ; strstr
0058++ 39A5             ; find sub-string
0059++ 39A5             ; str1 in SI
0060++ 39A5             ; str2 in DI
0061++ 39A5             ; SI points to end of source string
0062++ 39A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 39A5             strstr:
0064++ 39A5 DB          	push al
0065++ 39A6 DA          	push d
0066++ 39A7 E3          	push di
0067++ 39A8             strstr_loop:
0068++ 39A8 F3          	cmpsb					; compare a byte of the strings
0069++ 39A9 C7 B4 39    	jne strstr_ret
0070++ 39AC FC 00 00    	lea d, [di + 0]
0071++ 39AF BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 39B1 C7 A8 39    	jne strstr_loop				; equal chars but not at end
0073++ 39B4             strstr_ret:
0074++ 39B4 F0          	pop di
0075++ 39B5 E7          	pop d
0076++ 39B6 E8          	pop al
0077++ 39B7 09          	ret
0078++ 39B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 39B8             ; length of null terminated string
0080++ 39B8             ; result in C
0081++ 39B8             ; pointer in D
0082++ 39B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 39B8             strlen:
0084++ 39B8 DA          	push d
0085++ 39B9 38 00 00    	mov c, 0
0086++ 39BC             strlen_L1:
0087++ 39BC BD 00       	cmp byte [d], 0
0088++ 39BE C6 C6 39    	je strlen_ret
0089++ 39C1 79          	inc d
0090++ 39C2 78          	inc c
0091++ 39C3 0A BC 39    	jmp strlen_L1
0092++ 39C6             strlen_ret:
0093++ 39C6 E7          	pop d
0094++ 39C7 09          	ret
0095++ 39C8             
0096++ 39C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 39C8             ; STRCMP
0098++ 39C8             ; compare two strings
0099++ 39C8             ; str1 in SI
0100++ 39C8             ; str2 in DI
0101++ 39C8             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 39C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 39C8             strcmp:
0104++ 39C8 DB          	push al
0105++ 39C9 DA          	push d
0106++ 39CA E3          	push di
0107++ 39CB E2          	push si
0108++ 39CC             strcmp_loop:
0109++ 39CC F3          	cmpsb					; compare a byte of the strings
0110++ 39CD C7 D8 39    	jne strcmp_ret
0111++ 39D0 FB FF FF    	lea d, [si +- 1]
0112++ 39D3 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 39D5 C7 CC 39    	jne strcmp_loop				; equal chars but not at end
0114++ 39D8             strcmp_ret:
0115++ 39D8 EF          	pop si
0116++ 39D9 F0          	pop di
0117++ 39DA E7          	pop d
0118++ 39DB E8          	pop al
0119++ 39DC 09          	ret
0120++ 39DD             
0121++ 39DD             
0122++ 39DD             ; STRCPY
0123++ 39DD             ; copy null terminated string from SI to DI
0124++ 39DD             ; source in SI
0125++ 39DD             ; destination in DI
0126++ 39DD             strcpy:
0127++ 39DD E2          	push si
0128++ 39DE E3          	push di
0129++ 39DF DB          	push al
0130++ 39E0             strcpy_L1:
0131++ 39E0 F6          	lodsb
0132++ 39E1 F7          	stosb
0133++ 39E2 B9 00       	cmp al, 0
0134++ 39E4 C7 E0 39    	jne strcpy_L1
0135++ 39E7             strcpy_end:
0136++ 39E7 E8          	pop al
0137++ 39E8 F0          	pop di
0138++ 39E9 EF          	pop si
0139++ 39EA 09          	ret
0140++ 39EB             
0141++ 39EB             ; STRCAT
0142++ 39EB             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 39EB             ; source in SI
0144++ 39EB             ; destination in DI
0145++ 39EB             strcat:
0146++ 39EB E2          	push si
0147++ 39EC E3          	push di
0148++ 39ED D7          	push a
0149++ 39EE DA          	push d
0150++ 39EF 50          	mov a, di
0151++ 39F0 3C          	mov d, a
0152++ 39F1             strcat_goto_end_L1:
0153++ 39F1 BD 00       	cmp byte[d], 0
0154++ 39F3 C6 FA 39    	je strcat_start
0155++ 39F6 79          	inc d
0156++ 39F7 0A F1 39    	jmp strcat_goto_end_L1
0157++ 39FA             strcat_start:
0158++ 39FA FD 50       	mov di, d
0159++ 39FC             strcat_L1:
0160++ 39FC F6          	lodsb
0161++ 39FD F7          	stosb
0162++ 39FE B9 00       	cmp al, 0
0163++ 3A00 C7 FC 39    	jne strcat_L1
0164++ 3A03             strcat_end:
0165++ 3A03 E7          	pop d
0166++ 3A04 E4          	pop a
0167++ 3A05 F0          	pop di
0168++ 3A06 EF          	pop si
0169++ 3A07 09          	ret
0005+  3A08             
0006+  3A08 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  3A0C 34 35 36 37 
0006+  3A10 38 39 41 42 
0006+  3A14 43 44 45 46 
0007+  3A18 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  3A1C 1B 5B 48 00 
0008+  3A20             
0009+  3A20 01 00       table_power:.dw 1
0010+  3A22 0A 00       			.dw 10
0011+  3A24 64 00       			.dw 100
0012+  3A26 E8 03       			.dw 1000
0013+  3A28 10 27       			.dw 10000
0014+  3A2A             
0015+  3A2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  3A2A             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  3A2A             ; ASCII in BL
0018+  3A2A             ; result in AL
0019+  3A2A             ; ascii for F = 0100 0110
0020+  3A2A             ; ascii for 9 = 0011 1001
0021+  3A2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  3A2A             hex_ascii_encode:
0023+  3A2A 1B          	mov al, bl
0024+  3A2B 93 40       	test al, $40				; test if letter or number
0025+  3A2D C7 33 3A    	jnz hex_letter
0026+  3A30 87 0F       	and al, $0F				; get number
0027+  3A32 09          	ret
0028+  3A33             hex_letter:
0029+  3A33 87 0F       	and al, $0F				; get letter
0030+  3A35 6A 09       	add al, 9
0031+  3A37 09          	ret
0032+  3A38             
0033+  3A38             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  3A38             ; ATOI
0035+  3A38             ; 2 letter hex string in B
0036+  3A38             ; 8bit integer returned in AL
0037+  3A38             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  3A38             atoi:
0039+  3A38 D8          	push b
0040+  3A39 07 2A 3A    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  3A3C 30          	mov bl, bh
0042+  3A3D DB          	push al					; save a
0043+  3A3E 07 2A 3A    	call hex_ascii_encode
0044+  3A41 EA          	pop bl	
0045+  3A42 FD 9E 04    	shl al, 4
0046+  3A45 8C          	or al, bl
0047+  3A46 E5          	pop b
0048+  3A47 09          	ret	
0049+  3A48             
0050+  3A48             
0051+  3A48             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  3A48             ; printf
0053+  3A48             ; no need for explanations!
0054+  3A48             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  3A48             printf:
0056+  3A48 09          	ret
0057+  3A49             
0058+  3A49             
0059+  3A49             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  3A49             ; scanf
0061+  3A49             ; no need for explanations!
0062+  3A49             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  3A49             scanf:
0064+  3A49 09          	ret
0065+  3A4A             
0066+  3A4A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  3A4A             ; ITOA
0068+  3A4A             ; 8bit value in BL
0069+  3A4A             ; 2 byte ASCII result in A
0070+  3A4A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  3A4A             itoa:
0072+  3A4A DA          	push d
0073+  3A4B D8          	push b
0074+  3A4C A7 00       	mov bh, 0
0075+  3A4E FD A4 04    	shr bl, 4	
0076+  3A51 74          	mov d, b
0077+  3A52 1F 08 3A    	mov al, [d + s_hex_digits]
0078+  3A55 23          	mov ah, al
0079+  3A56             	
0080+  3A56 E5          	pop b
0081+  3A57 D8          	push b
0082+  3A58 A7 00       	mov bh, 0
0083+  3A5A FD 87 0F    	and bl, $0F
0084+  3A5D 74          	mov d, b
0085+  3A5E 1F 08 3A    	mov al, [d + s_hex_digits]
0086+  3A61 E5          	pop b
0087+  3A62 E7          	pop d
0088+  3A63 09          	ret
0089+  3A64             
0090+  3A64             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  3A64             ; HEX STRING TO BINARY
0092+  3A64             ; di = destination address
0093+  3A64             ; si = source
0094+  3A64             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  3A64             hex_to_int:
0096+  3A64             hex_to_int_L1:
0097+  3A64 F6          	lodsb					; load from [SI] to AL
0098+  3A65 B9 00       	cmp al, 0				; check if ASCII 0
0099+  3A67 C6 74 3A    	jz hex_to_int_ret
0100+  3A6A 36          	mov bh, al
0101+  3A6B F6          	lodsb
0102+  3A6C 2F          	mov bl, al
0103+  3A6D 07 38 3A    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  3A70 F7          	stosb					; store AL to [DI]
0105+  3A71 0A 64 3A    	jmp hex_to_int_L1
0106+  3A74             hex_to_int_ret:
0107+  3A74 09          	ret		
0108+  3A75             
0109+  3A75             
0110+  3A75             
0111+  3A75             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  3A75             ; GETCHAR
0113+  3A75             ; char in ah
0114+  3A75             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  3A75             getchar:
0116+  3A75 DB          	push al
0117+  3A76             getchar_retry:
0118+  3A76 FD 0C       	sti
0119+  3A78 19 01       	mov al, 1
0120+  3A7A 05 03       	syscall sys_io			; receive in AH
0121+  3A7C B9 00       	cmp al, 0			; check if any char was receive
0122+  3A7E C6 76 3A    	je getchar_retry
0123+  3A81 E8          	pop al
0124+  3A82 09          	ret
0125+  3A83             
0126+  3A83             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  3A83             ; PUTCHAR
0128+  3A83             ; char in ah
0129+  3A83             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  3A83             putchar:
0131+  3A83 D7          	push a
0132+  3A84 19 00       	mov al, 0
0133+  3A86 05 03       	syscall sys_io			; char in AH
0134+  3A88 E4          	pop a
0135+  3A89 09          	ret
0136+  3A8A             
0137+  3A8A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  3A8A             ;; INPUT A STRING
0139+  3A8A             ;; terminates with null
0140+  3A8A             ;; pointer in D
0141+  3A8A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  3A8A             gets:
0143+  3A8A D7          	push a
0144+  3A8B DA          	push d
0145+  3A8C             gets_loop:
0146+  3A8C FD 0C       	sti
0147+  3A8E 19 01       	mov al, 1
0148+  3A90 05 03       	syscall sys_io			; receive in AH
0149+  3A92 B9 00       	cmp al, 0				; check error code (AL)
0150+  3A94 C6 8C 3A    	je gets_loop			; if no char received, retry
0151+  3A97             
0152+  3A97 76 1B       	cmp ah, 27
0153+  3A99 C6 BA 3A    	je gets_telnet_escape
0154+  3A9C 76 0A       	cmp ah, $0A				; LF
0155+  3A9E C6 13 3B    	je gets_end
0156+  3AA1 76 0D       	cmp ah, $0D				; CR
0157+  3AA3 C6 13 3B    	je gets_end
0158+  3AA6 76 5C       	cmp ah, $5C				; '\\'
0159+  3AA8 C6 EA 3A    	je gets_escape
0160+  3AAB             	
0161+  3AAB 76 08       	cmp ah, $08			; check for backspace
0162+  3AAD C6 B6 3A    	je gets_backspace
0163+  3AB0             
0164+  3AB0 1A          	mov al, ah
0165+  3AB1 3E          	mov [d], al
0166+  3AB2 79          	inc d
0167+  3AB3 0A 8C 3A    	jmp gets_loop
0168+  3AB6             gets_backspace:
0169+  3AB6 7F          	dec d
0170+  3AB7 0A 8C 3A    	jmp gets_loop
0171+  3ABA             gets_telnet_escape:
0172+  3ABA FD 0C       	sti
0173+  3ABC 19 01       	mov al, 1
0174+  3ABE 05 03       	syscall sys_io				; receive in AH without echo
0175+  3AC0 B9 00       	cmp al, 0					; check error code (AL)
0176+  3AC2 C6 BA 3A    	je gets_telnet_escape		; if no char received, retry
0177+  3AC5 76 5B       	cmp ah, '['
0178+  3AC7 C7 8C 3A    	jne gets_loop
0179+  3ACA             gets_telnet_escape_phase2:
0180+  3ACA FD 0C       	sti
0181+  3ACC 19 01       	mov al, 1
0182+  3ACE 05 03       	syscall sys_io					; receive in AH without echo
0183+  3AD0 B9 00       	cmp al, 0						; check error code (AL)
0184+  3AD2 C6 CA 3A    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  3AD5 76 44       	cmp ah, 'D'
0186+  3AD7 C6 E2 3A    	je gets_left_arrow
0187+  3ADA 76 43       	cmp ah, 'C'
0188+  3ADC C6 E6 3A    	je gets_right_arrow
0189+  3ADF 0A 8C 3A    	jmp gets_loop
0190+  3AE2             gets_left_arrow:
0191+  3AE2 7F          	dec d
0192+  3AE3 0A 8C 3A    	jmp gets_loop
0193+  3AE6             gets_right_arrow:
0194+  3AE6 79          	inc d
0195+  3AE7 0A 8C 3A    	jmp gets_loop
0196+  3AEA             gets_escape:
0197+  3AEA FD 0C       	sti
0198+  3AEC 19 01       	mov al, 1
0199+  3AEE 05 03       	syscall sys_io			; receive in AH
0200+  3AF0 B9 00       	cmp al, 0				; check error code (AL)
0201+  3AF2 C6 EA 3A    	je gets_escape			; if no char received, retry
0202+  3AF5 76 6E       	cmp ah, 'n'
0203+  3AF7 C6 05 3B    	je gets_LF
0204+  3AFA 76 72       	cmp ah, 'r'
0205+  3AFC C6 0C 3B    	je gets_CR
0206+  3AFF 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  3B00 3E          	mov [d], al
0208+  3B01 79          	inc d
0209+  3B02 0A 8C 3A    	jmp gets_loop
0210+  3B05             gets_LF:
0211+  3B05 19 0A       	mov al, $0A
0212+  3B07 3E          	mov [d], al
0213+  3B08 79          	inc d
0214+  3B09 0A 8C 3A    	jmp gets_loop
0215+  3B0C             gets_CR:
0216+  3B0C 19 0D       	mov al, $0D
0217+  3B0E 3E          	mov [d], al
0218+  3B0F 79          	inc d
0219+  3B10 0A 8C 3A    	jmp gets_loop
0220+  3B13             gets_end:
0221+  3B13 19 00       	mov al, 0
0222+  3B15 3E          	mov [d], al				; terminate string
0223+  3B16 E7          	pop d
0224+  3B17 E4          	pop a
0225+  3B18 09          	ret
0226+  3B19             
0227+  3B19             
0228+  3B19             
0229+  3B19             
0230+  3B19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  3B19             ;; INPUT TEXT
0232+  3B19             ;; terminated with CTRL+D
0233+  3B19             ;; pointer in D
0234+  3B19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  3B19             gettxt:
0236+  3B19 D7          	push a
0237+  3B1A DA          	push d
0238+  3B1B             gettxt_loop:
0239+  3B1B 19 01       	mov al, 1
0240+  3B1D 05 03       	syscall sys_io			; receive in AH
0241+  3B1F B9 00       	cmp al, 0				; check error code (AL)
0242+  3B21 C6 1B 3B    	je gettxt_loop		; if no char received, retry
0243+  3B24 76 04       	cmp ah, 4			; EOT
0244+  3B26 C6 64 3B    	je gettxt_end
0245+  3B29 76 08       	cmp ah, $08			; check for backspace
0246+  3B2B C6 60 3B    	je gettxt_backspace
0247+  3B2E 76 5C       	cmp ah, $5C				; '\\'
0248+  3B30 C6 39 3B    	je gettxt_escape
0249+  3B33 1A          	mov al, ah
0250+  3B34 3E          	mov [d], al
0251+  3B35 79          	inc d
0252+  3B36 0A 1B 3B    	jmp gettxt_loop
0253+  3B39             gettxt_escape:
0254+  3B39 19 01       	mov al, 1
0255+  3B3B 05 03       	syscall sys_io			; receive in AH
0256+  3B3D B9 00       	cmp al, 0				; check error code (AL)
0257+  3B3F C6 39 3B    	je gettxt_escape		; if no char received, retry
0258+  3B42 76 6E       	cmp ah, 'n'
0259+  3B44 C6 52 3B    	je gettxt_LF
0260+  3B47 76 72       	cmp ah, 'r'
0261+  3B49 C6 59 3B    	je gettxt_CR
0262+  3B4C 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  3B4D 3E          	mov [d], al
0264+  3B4E 79          	inc d
0265+  3B4F 0A 1B 3B    	jmp gettxt_loop
0266+  3B52             gettxt_LF:
0267+  3B52 19 0A       	mov al, $0A
0268+  3B54 3E          	mov [d], al
0269+  3B55 79          	inc d
0270+  3B56 0A 1B 3B    	jmp gettxt_loop
0271+  3B59             gettxt_CR:
0272+  3B59 19 0D       	mov al, $0D
0273+  3B5B 3E          	mov [d], al
0274+  3B5C 79          	inc d
0275+  3B5D 0A 1B 3B    	jmp gettxt_loop
0276+  3B60             gettxt_backspace:
0277+  3B60 7F          	dec d
0278+  3B61 0A 1B 3B    	jmp gettxt_loop
0279+  3B64             gettxt_end:
0280+  3B64 19 00       	mov al, 0
0281+  3B66 3E          	mov [d], al				; terminate string
0282+  3B67 E7          	pop d
0283+  3B68 E4          	pop a
0284+  3B69 09          	ret
0285+  3B6A             
0286+  3B6A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  3B6A             ; PRINT NEW LINE
0288+  3B6A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  3B6A             printnl:
0290+  3B6A D7          	push a
0291+  3B6B 10 00 0A    	mov a, $0A00
0292+  3B6E 05 03       	syscall sys_io
0293+  3B70 10 00 0D    	mov a, $0D00
0294+  3B73 05 03       	syscall sys_io
0295+  3B75 E4          	pop a
0296+  3B76 09          	ret
0297+  3B77             
0298+  3B77             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  3B77             ; strtoint
0300+  3B77             ; 4 digit hex string number in d
0301+  3B77             ; integer returned in A
0302+  3B77             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  3B77             strtointx:
0304+  3B77 D8          	push b
0305+  3B78 32          	mov bl, [d]
0306+  3B79 37          	mov bh, bl
0307+  3B7A 33 01 00    	mov bl, [d + 1]
0308+  3B7D 07 38 3A    	call atoi				; convert to int in AL
0309+  3B80 23          	mov ah, al				; move to AH
0310+  3B81 33 02 00    	mov bl, [d + 2]
0311+  3B84 37          	mov bh, bl
0312+  3B85 33 03 00    	mov bl, [d + 3]
0313+  3B88 07 38 3A    	call atoi				; convert to int in AL
0314+  3B8B E5          	pop b
0315+  3B8C 09          	ret
0316+  3B8D             
0317+  3B8D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  3B8D             ; strtoint
0319+  3B8D             ; 5 digit base10 string number in d
0320+  3B8D             ; integer returned in A
0321+  3B8D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  3B8D             strtoint:
0323+  3B8D E2          	push si
0324+  3B8E D8          	push b
0325+  3B8F D9          	push c
0326+  3B90 DA          	push d
0327+  3B91 07 B8 39    	call strlen			; get string length in C
0328+  3B94 7E          	dec c
0329+  3B95 FD 4E       	mov si, d
0330+  3B97 12          	mov a, c
0331+  3B98 FD 99       	shl a
0332+  3B9A 3B 20 3A    	mov d, table_power
0333+  3B9D 59          	add d, a
0334+  3B9E 38 00 00    	mov c, 0
0335+  3BA1             strtoint_L0:
0336+  3BA1 F6          	lodsb			; load ASCII to al
0337+  3BA2 B9 00       	cmp al, 0
0338+  3BA4 C6 B7 3B    	je strtoint_end
0339+  3BA7 6F 30       	sub al, $30		; make into integer
0340+  3BA9 22 00       	mov ah, 0
0341+  3BAB 2A          	mov b, [d]
0342+  3BAC AC          	mul a, b			; result in B since it fits in 16bits
0343+  3BAD 11          	mov a, b
0344+  3BAE 28          	mov b, c
0345+  3BAF 54          	add a, b
0346+  3BB0 39          	mov c, a
0347+  3BB1 63 02 00    	sub d, 2
0348+  3BB4 0A A1 3B    	jmp strtoint_L0
0349+  3BB7             strtoint_end:
0350+  3BB7 12          	mov a, c
0351+  3BB8 E7          	pop d
0352+  3BB9 E6          	pop c
0353+  3BBA E5          	pop b
0354+  3BBB EF          	pop si
0355+  3BBC 09          	ret
0356+  3BBD             
0357+  3BBD             
0358+  3BBD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  3BBD             ; PRINT NULL TERMINATED STRING
0360+  3BBD             ; pointer in D
0361+  3BBD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  3BBD             puts:
0363+  3BBD D7          	push a
0364+  3BBE DA          	push d
0365+  3BBF             puts_L1:
0366+  3BBF 1E          	mov al, [d]
0367+  3BC0 B9 00       	cmp al, 0
0368+  3BC2 C6 CE 3B    	jz puts_END
0369+  3BC5 23          	mov ah, al
0370+  3BC6 19 00       	mov al, 0
0371+  3BC8 05 03       	syscall sys_io
0372+  3BCA 79          	inc d
0373+  3BCB 0A BF 3B    	jmp puts_L1
0374+  3BCE             puts_END:
0375+  3BCE E7          	pop d
0376+  3BCF E4          	pop a
0377+  3BD0 09          	ret
0378+  3BD1             
0379+  3BD1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  3BD1             ; PRINT N SIZE STRING
0381+  3BD1             ; pointer in D
0382+  3BD1             ; size in C
0383+  3BD1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  3BD1             putsn:
0385+  3BD1 DB          	push al
0386+  3BD2 DA          	push d
0387+  3BD3 D9          	push c
0388+  3BD4             putsn_L0:
0389+  3BD4 1E          	mov al, [d]
0390+  3BD5 23          	mov ah, al
0391+  3BD6 19 00       	mov al, 0
0392+  3BD8 05 03       	syscall sys_io
0393+  3BDA 79          	inc d
0394+  3BDB 7E          	dec c	
0395+  3BDC C2 00 00    	cmp c, 0
0396+  3BDF C7 D4 3B    	jne putsn_L0
0397+  3BE2             putsn_end:
0398+  3BE2 E6          	pop c
0399+  3BE3 E7          	pop d
0400+  3BE4 E8          	pop al
0401+  3BE5 09          	ret
0402+  3BE6             
0403+  3BE6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  3BE6             ; print 16bit decimal number
0405+  3BE6             ; input number in A
0406+  3BE6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  3BE6             print_u16d:
0408+  3BE6 D7          	push a
0409+  3BE7 D8          	push b
0410+  3BE8 26 10 27    	mov b, 10000
0411+  3BEB AE          	div a, b			; get 10000 coeff.
0412+  3BEC 07 12 3C    	call print_number
0413+  3BEF 11          	mov a, b
0414+  3BF0 26 E8 03    	mov b, 1000
0415+  3BF3 AE          	div a, b			; get 10000 coeff.
0416+  3BF4 07 12 3C    	call print_number
0417+  3BF7 11          	mov a, b
0418+  3BF8 26 64 00    	mov b, 100
0419+  3BFB AE          	div a, b
0420+  3BFC 07 12 3C    	call print_number
0421+  3BFF 11          	mov a, b
0422+  3C00 26 0A 00    	mov b, 10
0423+  3C03 AE          	div a, b
0424+  3C04 07 12 3C    	call print_number
0425+  3C07 11          	mov a, b
0426+  3C08 6A 30       	add al, $30
0427+  3C0A 23          	mov ah, al
0428+  3C0B 19 00       	mov al, 0
0429+  3C0D 05 03       	syscall sys_io	; print coeff
0430+  3C0F E5          	pop b
0431+  3C10 E4          	pop a
0432+  3C11 09          	ret
0433+  3C12             
0434+  3C12             
0435+  3C12             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  3C12             ; if A == 0, print space
0437+  3C12             ; else print A
0438+  3C12             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  3C12             print_number:
0440+  3C12 6A 30       	add al, $30
0441+  3C14 23          	mov ah, al
0442+  3C15 07 83 3A    	call putchar
0443+  3C18 09          	ret
0444+  3C19             
0445+  3C19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  3C19             ; PRINT 16BIT HEX INTEGER
0447+  3C19             ; integer value in reg B
0448+  3C19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  3C19             print_u16x:
0450+  3C19 D7          	push a
0451+  3C1A D8          	push b
0452+  3C1B DD          	push bl
0453+  3C1C 30          	mov bl, bh
0454+  3C1D 07 4A 3A    	call itoa				; convert bh to char in A
0455+  3C20 2F          	mov bl, al				; save al
0456+  3C21 19 00       	mov al, 0
0457+  3C23 05 03       	syscall sys_io				; display AH
0458+  3C25 24          	mov ah, bl				; retrieve al
0459+  3C26 19 00       	mov al, 0
0460+  3C28 05 03       	syscall sys_io				; display AL
0461+  3C2A             
0462+  3C2A EA          	pop bl
0463+  3C2B 07 4A 3A    	call itoa				; convert bh to char in A
0464+  3C2E 2F          	mov bl, al				; save al
0465+  3C2F 19 00       	mov al, 0
0466+  3C31 05 03       	syscall sys_io				; display AH
0467+  3C33 24          	mov ah, bl				; retrieve al
0468+  3C34 19 00       	mov al, 0
0469+  3C36 05 03       	syscall sys_io				; display AL
0470+  3C38             
0471+  3C38 E5          	pop b
0472+  3C39 E4          	pop a
0473+  3C3A 09          	ret
0474+  3C3B             
0475+  3C3B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  3C3B             ; INPUT 16BIT HEX INTEGER
0477+  3C3B             ; read 16bit integer into A
0478+  3C3B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  3C3B             scan_u16x:
0480+  3C3B F8 10 00    	enter 16
0481+  3C3E D8          	push b
0482+  3C3F DA          	push d
0483+  3C40             
0484+  3C40 FA F1 FF    	lea d, [bp + -15]
0485+  3C43 07 8A 3A    	call gets				; get number
0486+  3C46             
0487+  3C46 32          	mov bl, [d]
0488+  3C47 37          	mov bh, bl
0489+  3C48 33 01 00    	mov bl, [d + 1]
0490+  3C4B 07 38 3A    	call atoi				; convert to int in AL
0491+  3C4E 23          	mov ah, al				; move to AH
0492+  3C4F             
0493+  3C4F 33 02 00    	mov bl, [d + 2]
0494+  3C52 37          	mov bh, bl
0495+  3C53 33 03 00    	mov bl, [d + 3]
0496+  3C56 07 38 3A    	call atoi				; convert to int in AL
0497+  3C59             
0498+  3C59 E7          	pop d
0499+  3C5A E5          	pop b
0500+  3C5B F9          	leave
0501+  3C5C 09          	ret
0502+  3C5D             
0503+  3C5D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  3C5D             ; PRINT 8bit HEX INTEGER
0505+  3C5D             ; integer value in reg bl
0506+  3C5D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  3C5D             print_u8x:
0508+  3C5D D7          	push a
0509+  3C5E DD          	push bl
0510+  3C5F             
0511+  3C5F 07 4A 3A    	call itoa				; convert bl to char in A
0512+  3C62 2F          	mov bl, al				; save al
0513+  3C63 19 00       	mov al, 0
0514+  3C65 05 03       	syscall sys_io				; display AH
0515+  3C67 24          	mov ah, bl				; retrieve al
0516+  3C68 19 00       	mov al, 0
0517+  3C6A 05 03       	syscall sys_io				; display AL
0518+  3C6C             
0519+  3C6C EA          	pop bl
0520+  3C6D E4          	pop a
0521+  3C6E 09          	ret
0522+  3C6F             
0523+  3C6F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  3C6F             ; print 8bit decimal unsigned number
0525+  3C6F             ; input number in AL
0526+  3C6F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  3C6F             print_u8d:
0528+  3C6F D7          	push a
0529+  3C70 D8          	push b
0530+  3C71             
0531+  3C71 22 00       	mov ah, 0
0532+  3C73 26 64 00    	mov b, 100
0533+  3C76 AE          	div a, b
0534+  3C77 D8          	push b			; save remainder
0535+  3C78 B9 00       	cmp al, 0
0536+  3C7A C6 84 3C    	je skip100
0537+  3C7D 6A 30       	add al, $30
0538+  3C7F 23          	mov ah, al
0539+  3C80 19 00       	mov al, 0
0540+  3C82 05 03       	syscall sys_io	; print coeff
0541+  3C84             skip100:
0542+  3C84 E4          	pop a
0543+  3C85 22 00       	mov ah, 0
0544+  3C87 26 0A 00    	mov b, 10
0545+  3C8A AE          	div a, b
0546+  3C8B D8          	push b			; save remainder
0547+  3C8C B9 00       	cmp al, 0
0548+  3C8E C6 98 3C    	je skip10
0549+  3C91 6A 30       	add al, $30
0550+  3C93 23          	mov ah, al
0551+  3C94 19 00       	mov al, 0
0552+  3C96 05 03       	syscall sys_io	; print coeff
0553+  3C98             skip10:
0554+  3C98 E4          	pop a
0555+  3C99 1B          	mov al, bl
0556+  3C9A 6A 30       	add al, $30
0557+  3C9C 23          	mov ah, al
0558+  3C9D 19 00       	mov al, 0
0559+  3C9F 05 03       	syscall sys_io	; print coeff
0560+  3CA1 E5          	pop b
0561+  3CA2 E4          	pop a
0562+  3CA3 09          	ret
0563+  3CA4             
0564+  3CA4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  3CA4             ; INPUT 8BIT HEX INTEGER
0566+  3CA4             ; read 8bit integer into AL
0567+  3CA4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  3CA4             scan_u8x:
0569+  3CA4 F8 04 00    	enter 4
0570+  3CA7 D8          	push b
0571+  3CA8 DA          	push d
0572+  3CA9             
0573+  3CA9 FA FD FF    	lea d, [bp + -3]
0574+  3CAC 07 8A 3A    	call gets				; get number
0575+  3CAF             
0576+  3CAF 32          	mov bl, [d]
0577+  3CB0 37          	mov bh, bl
0578+  3CB1 33 01 00    	mov bl, [d + 1]
0579+  3CB4 07 38 3A    	call atoi				; convert to int in AL
0580+  3CB7             
0581+  3CB7 E7          	pop d
0582+  3CB8 E5          	pop b
0583+  3CB9 F9          	leave
0584+  3CBA 09          	ret
0585+  3CBB             
0586+  3CBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  3CBB             ; input decimal number
0588+  3CBB             ; result in A
0589+  3CBB             ; 655'\0'
0590+  3CBB             ; low--------high
0591+  3CBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  3CBB             scan_u16d:
0593+  3CBB F8 08 00    	enter 8
0594+  3CBE E2          	push si
0595+  3CBF D8          	push b
0596+  3CC0 D9          	push c
0597+  3CC1 DA          	push d
0598+  3CC2 FA F9 FF    	lea d, [bp +- 7]
0599+  3CC5 07 8A 3A    	call gets
0600+  3CC8 07 B8 39    	call strlen			; get string length in C
0601+  3CCB 7E          	dec c
0602+  3CCC FD 4E       	mov si, d
0603+  3CCE 12          	mov a, c
0604+  3CCF FD 99       	shl a
0605+  3CD1 3B 20 3A    	mov d, table_power
0606+  3CD4 59          	add d, a
0607+  3CD5 38 00 00    	mov c, 0
0608+  3CD8             mul_loop:
0609+  3CD8 F6          	lodsb			; load ASCII to al
0610+  3CD9 B9 00       	cmp al, 0
0611+  3CDB C6 EE 3C    	je mul_exit
0612+  3CDE 6F 30       	sub al, $30		; make into integer
0613+  3CE0 22 00       	mov ah, 0
0614+  3CE2 2A          	mov b, [d]
0615+  3CE3 AC          	mul a, b			; result in B since it fits in 16bits
0616+  3CE4 11          	mov a, b
0617+  3CE5 28          	mov b, c
0618+  3CE6 54          	add a, b
0619+  3CE7 39          	mov c, a
0620+  3CE8 63 02 00    	sub d, 2
0621+  3CEB 0A D8 3C    	jmp mul_loop
0622+  3CEE             mul_exit:
0623+  3CEE 12          	mov a, c
0624+  3CEF E7          	pop d
0625+  3CF0 E6          	pop c
0626+  3CF1 E5          	pop b
0627+  3CF2 EF          	pop si
0628+  3CF3 F9          	leave
0629+  3CF4 09          	ret
8290   3CF5             ; --- END INCLUDE BLOCK
8291   3CF5             
8292   3CF5             
8293   3CF5             .end
tasm: Number of errors = 0
