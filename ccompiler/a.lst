0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 26 01 00      mov b, 1
0011   0405 D7            push a
0012   0406 11            mov a, b
0013   0407 26 02 00      mov b, 2
0014   040A B0            cmp a, b
0015   040B 0E            lodflgs
0016   040C FD 78         mov g, a
0017   040E 2F            mov bl, al
0018   040F FD 9C         shr al
0019   0411               xor bl, al
a.s line 0019: unrecognized argument.             (bl,al)
0020   0411 FD A2 02      shr al, 2
0021   0414 FD 27         mov b, g
0022   0416 FD 87 01      and bl, %00000001
0023   0419 8C            or al, bl
0024   041A 8F 01         xor al, %00000001 ; > (signed)
0025   041C 22 00         mov ah, 0
0026   041E 27            mov b, a
0027   041F E4            pop a
0028   0420 26 01 00      mov b, 1
0029   0423 D7            push a
0030   0424 11            mov a, b
0031   0425 26 02 00      mov b, 2
0032   0428 B0            cmp a, b
0033   0429 0E            lodflgs
0034   042A 2F            mov bl, al
0035   042B FD 9C         shr al
0036   042D 90            xor al, bl
0037   042E FD A2 02      shr al, 2
0038   0431 8F 01         xor al, %00000001 ; >= (signed)
0039   0433 22 00         mov ah, 0
0040   0435 27            mov b, a
0041   0436 E4            pop a
0042   0437 26 01 00      mov b, 1
0043   043A D7            push a
0044   043B 11            mov a, b
0045   043C 26 02 00      mov b, 2
0046   043F B0            cmp a, b
0047   0440 0E            lodflgs
0048   0441 2F            mov bl, al
0049   0442 FD 9C         shr al
0050   0444 90            xor al, bl
0051   0445 FD A2 02      shr al, 2
0052   0448 90            xor al, bl ; < (signed)
0053   0449 22 00         mov ah, 0
0054   044B 27            mov b, a
0055   044C E4            pop a
0056   044D 26 01 00      mov b, 1
0057   0450 D7            push a
0058   0451 11            mov a, b
0059   0452 26 02 00      mov b, 2
0060   0455 B0            cmp a, b
0061   0456 0E            lodflgs
0062   0457 FD 78         mov g, a
0063   0459 2F            mov bl, al
0064   045A FD 9C         shr al
0065   045C 90            xor al, bl
0066   045D FD A2 02      shr al, 2
0067   0460 FD 27         mov b, g
0068   0462 FD 87 01      and bl, %00000001
0069   0465 8C            or al, bl ; <= (signed)
0070   0466 22 00         mov ah, 0
0071   0468 27            mov b, a
0072   0469 E4            pop a
0073   046A F9            leave
0074   046B 05 0B         syscall sys_terminate_proc
0075   046D             ; --- END TEXT BLOCK
0076   046D             
0077   046D             ; --- BEGIN DATA BLOCK
0078   046D             ; --- END DATA BLOCK
0079   046D             
0080   046D             ; --- BEGIN INCLUDE BLOCK
0081   046D             .include "lib/stdio.asm"
0001+  046D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  046D             ; stdio.s
0003+  046D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  046D             .include "lib/string.asm"
0001++ 046D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 046D             ; string.s
0003++ 046D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 046D             
0005++ 046D             
0006++ 046D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 046D             ; strrev
0008++ 046D             ; reverse a string
0009++ 046D             ; D = string address
0010++ 046D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 046D             ; 01234
0012++ 046D             strrev:
0013++ 046D 4B          	pusha
0014++ 046E 07 B4 04    	call strlen	; length in C
0015++ 0471 12          	mov a, c
0016++ 0472 AF 01 00    	cmp a, 1
0017++ 0475 D0 8F 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0478 7D          	dec a
0019++ 0479 FD 4E       	mov si, d	; beginning of string
0020++ 047B FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 047D 59          	add d, a	; end of string
0022++ 047E 12          	mov a, c
0023++ 047F FD 9B       	shr a		; divide by 2
0024++ 0481 39          	mov c, a	; C now counts the steps
0025++ 0482             strrev_L0:
0026++ 0482 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0483 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0484 3E          	mov [d], al	; store left char into right side
0029++ 0485 1B          	mov al, bl
0030++ 0486 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0487 7E          	dec c
0032++ 0488 7F          	dec d
0033++ 0489 C2 00 00    	cmp c, 0
0034++ 048C C7 82 04    	jne strrev_L0
0035++ 048F             strrev_end:
0036++ 048F 4C          	popa
0037++ 0490 09          	ret
0038++ 0491             	
0039++ 0491             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0491             ; strchr
0041++ 0491             ; search string in D for char in AL
0042++ 0491             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0491             strchr:
0044++ 0491             strchr_L0:
0045++ 0491 32          	mov bl, [d]
0046++ 0492 C1 00       	cmp bl, 0
0047++ 0494 C6 9F 04    	je strchr_end
0048++ 0497 BA          	cmp al, bl
0049++ 0498 C6 9F 04    	je strchr_end
0050++ 049B 79          	inc d
0051++ 049C 0A 91 04    	jmp strchr_L0
0052++ 049F             strchr_end:
0053++ 049F 1B          	mov al, bl
0054++ 04A0 09          	ret
0055++ 04A1             
0056++ 04A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 04A1             ; strstr
0058++ 04A1             ; find sub-string
0059++ 04A1             ; str1 in SI
0060++ 04A1             ; str2 in DI
0061++ 04A1             ; SI points to end of source string
0062++ 04A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 04A1             strstr:
0064++ 04A1 DB          	push al
0065++ 04A2 DA          	push d
0066++ 04A3 E3          	push di
0067++ 04A4             strstr_loop:
0068++ 04A4 F3          	cmpsb					; compare a byte of the strings
0069++ 04A5 C7 B0 04    	jne strstr_ret
0070++ 04A8 FC 00 00    	lea d, [di + 0]
0071++ 04AB BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 04AD C7 A4 04    	jne strstr_loop				; equal chars but not at end
0073++ 04B0             strstr_ret:
0074++ 04B0 F0          	pop di
0075++ 04B1 E7          	pop d
0076++ 04B2 E8          	pop al
0077++ 04B3 09          	ret
0078++ 04B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 04B4             ; length of null terminated string
0080++ 04B4             ; result in C
0081++ 04B4             ; pointer in D
0082++ 04B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 04B4             strlen:
0084++ 04B4 DA          	push d
0085++ 04B5 38 00 00    	mov c, 0
0086++ 04B8             strlen_L1:
0087++ 04B8 BD 00       	cmp byte [d], 0
0088++ 04BA C6 C2 04    	je strlen_ret
0089++ 04BD 79          	inc d
0090++ 04BE 78          	inc c
0091++ 04BF 0A B8 04    	jmp strlen_L1
0092++ 04C2             strlen_ret:
0093++ 04C2 E7          	pop d
0094++ 04C3 09          	ret
0095++ 04C4             
0096++ 04C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04C4             ; STRCMP
0098++ 04C4             ; compare two strings
0099++ 04C4             ; str1 in SI
0100++ 04C4             ; str2 in DI
0101++ 04C4             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04C4             strcmp:
0104++ 04C4 DB          	push al
0105++ 04C5 DA          	push d
0106++ 04C6 E3          	push di
0107++ 04C7 E2          	push si
0108++ 04C8             strcmp_loop:
0109++ 04C8 F3          	cmpsb					; compare a byte of the strings
0110++ 04C9 C7 D4 04    	jne strcmp_ret
0111++ 04CC FB FF FF    	lea d, [si +- 1]
0112++ 04CF BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04D1 C7 C8 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04D4             strcmp_ret:
0115++ 04D4 EF          	pop si
0116++ 04D5 F0          	pop di
0117++ 04D6 E7          	pop d
0118++ 04D7 E8          	pop al
0119++ 04D8 09          	ret
0120++ 04D9             
0121++ 04D9             
0122++ 04D9             ; STRCPY
0123++ 04D9             ; copy null terminated string from SI to DI
0124++ 04D9             ; source in SI
0125++ 04D9             ; destination in DI
0126++ 04D9             strcpy:
0127++ 04D9 E2          	push si
0128++ 04DA E3          	push di
0129++ 04DB DB          	push al
0130++ 04DC             strcpy_L1:
0131++ 04DC F6          	lodsb
0132++ 04DD F7          	stosb
0133++ 04DE B9 00       	cmp al, 0
0134++ 04E0 C7 DC 04    	jne strcpy_L1
0135++ 04E3             strcpy_end:
0136++ 04E3 E8          	pop al
0137++ 04E4 F0          	pop di
0138++ 04E5 EF          	pop si
0139++ 04E6 09          	ret
0140++ 04E7             
0141++ 04E7             ; STRCAT
0142++ 04E7             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04E7             ; source in SI
0144++ 04E7             ; destination in DI
0145++ 04E7             strcat:
0146++ 04E7 E2          	push si
0147++ 04E8 E3          	push di
0148++ 04E9 D7          	push a
0149++ 04EA DA          	push d
0150++ 04EB 50          	mov a, di
0151++ 04EC 3C          	mov d, a
0152++ 04ED             strcat_goto_end_L1:
0153++ 04ED BD 00       	cmp byte[d], 0
0154++ 04EF C6 F6 04    	je strcat_start
0155++ 04F2 79          	inc d
0156++ 04F3 0A ED 04    	jmp strcat_goto_end_L1
0157++ 04F6             strcat_start:
0158++ 04F6 FD 50       	mov di, d
0159++ 04F8             strcat_L1:
0160++ 04F8 F6          	lodsb
0161++ 04F9 F7          	stosb
0162++ 04FA B9 00       	cmp al, 0
0163++ 04FC C7 F8 04    	jne strcat_L1
0164++ 04FF             strcat_end:
0165++ 04FF E7          	pop d
0166++ 0500 E4          	pop a
0167++ 0501 F0          	pop di
0168++ 0502 EF          	pop si
0169++ 0503 09          	ret
0005+  0504             
0006+  0504 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0508 34 35 36 37 
0006+  050C 38 39 41 42 
0006+  0510 43 44 45 46 
0007+  0514 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0518 1B 5B 48 00 
0008+  051C             
0009+  051C 01 00       table_power:.dw 1
0010+  051E 0A 00       			.dw 10
0011+  0520 64 00       			.dw 100
0012+  0522 E8 03       			.dw 1000
0013+  0524 10 27       			.dw 10000
0014+  0526             
0015+  0526             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0526             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0526             ; ASCII in BL
0018+  0526             ; result in AL
0019+  0526             ; ascii for F = 0100 0110
0020+  0526             ; ascii for 9 = 0011 1001
0021+  0526             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0526             hex_ascii_encode:
0023+  0526 1B          	mov al, bl
0024+  0527 93 40       	test al, $40				; test if letter or number
0025+  0529 C7 2F 05    	jnz hex_letter
0026+  052C 87 0F       	and al, $0F				; get number
0027+  052E 09          	ret
0028+  052F             hex_letter:
0029+  052F 87 0F       	and al, $0F				; get letter
0030+  0531 6A 09       	add al, 9
0031+  0533 09          	ret
0032+  0534             
0033+  0534             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0534             ; ATOI
0035+  0534             ; 2 letter hex string in B
0036+  0534             ; 8bit integer returned in AL
0037+  0534             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0534             atoi:
0039+  0534 D8          	push b
0040+  0535 07 26 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0538 30          	mov bl, bh
0042+  0539 DB          	push al					; save a
0043+  053A 07 26 05    	call hex_ascii_encode
0044+  053D EA          	pop bl	
0045+  053E FD 9E 04    	shl al, 4
0046+  0541 8C          	or al, bl
0047+  0542 E5          	pop b
0048+  0543 09          	ret	
0049+  0544             
0050+  0544             
0051+  0544             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0544             ; printf
0053+  0544             ; no need for explanations!
0054+  0544             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0544             printf:
0056+  0544 09          	ret
0057+  0545             
0058+  0545             
0059+  0545             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0545             ; scanf
0061+  0545             ; no need for explanations!
0062+  0545             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0545             scanf:
0064+  0545 09          	ret
0065+  0546             
0066+  0546             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0546             ; ITOA
0068+  0546             ; 8bit value in BL
0069+  0546             ; 2 byte ASCII result in A
0070+  0546             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0546             itoa:
0072+  0546 DA          	push d
0073+  0547 D8          	push b
0074+  0548 A7 00       	mov bh, 0
0075+  054A FD A4 04    	shr bl, 4	
0076+  054D 74          	mov d, b
0077+  054E 1F 04 05    	mov al, [d + s_hex_digits]
0078+  0551 23          	mov ah, al
0079+  0552             	
0080+  0552 E5          	pop b
0081+  0553 D8          	push b
0082+  0554 A7 00       	mov bh, 0
0083+  0556 FD 87 0F    	and bl, $0F
0084+  0559 74          	mov d, b
0085+  055A 1F 04 05    	mov al, [d + s_hex_digits]
0086+  055D E5          	pop b
0087+  055E E7          	pop d
0088+  055F 09          	ret
0089+  0560             
0090+  0560             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0560             ; HEX STRING TO BINARY
0092+  0560             ; di = destination address
0093+  0560             ; si = source
0094+  0560             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0560             hex_to_int:
0096+  0560             hex_to_int_L1:
0097+  0560 F6          	lodsb					; load from [SI] to AL
0098+  0561 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0563 C6 70 05    	jz hex_to_int_ret
0100+  0566 36          	mov bh, al
0101+  0567 F6          	lodsb
0102+  0568 2F          	mov bl, al
0103+  0569 07 34 05    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  056C F7          	stosb					; store AL to [DI]
0105+  056D 0A 60 05    	jmp hex_to_int_L1
0106+  0570             hex_to_int_ret:
0107+  0570 09          	ret		
0108+  0571             
0109+  0571             
0110+  0571             
0111+  0571             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0571             ; GETCHAR
0113+  0571             ; char in ah
0114+  0571             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0571             getchar:
0116+  0571 DB          	push al
0117+  0572             getchar_retry:
0118+  0572 FD 0C       	sti
0119+  0574 19 01       	mov al, 1
0120+  0576 05 03       	syscall sys_io			; receive in AH
0121+  0578 B9 00       	cmp al, 0			; check if any char was receive
0122+  057A C6 72 05    	je getchar_retry
0123+  057D E8          	pop al
0124+  057E 09          	ret
0125+  057F             
0126+  057F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  057F             ; PUTCHAR
0128+  057F             ; char in ah
0129+  057F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  057F             putchar:
0131+  057F D7          	push a
0132+  0580 19 00       	mov al, 0
0133+  0582 05 03       	syscall sys_io			; char in AH
0134+  0584 E4          	pop a
0135+  0585 09          	ret
0136+  0586             
0137+  0586             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0586             ;; INPUT A STRING
0139+  0586             ;; terminates with null
0140+  0586             ;; pointer in D
0141+  0586             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0586             gets:
0143+  0586 D7          	push a
0144+  0587 DA          	push d
0145+  0588             gets_loop:
0146+  0588 FD 0C       	sti
0147+  058A 19 01       	mov al, 1
0148+  058C 05 03       	syscall sys_io			; receive in AH
0149+  058E B9 00       	cmp al, 0				; check error code (AL)
0150+  0590 C6 88 05    	je gets_loop			; if no char received, retry
0151+  0593             
0152+  0593 76 1B       	cmp ah, 27
0153+  0595 C6 B6 05    	je gets_telnet_escape
0154+  0598 76 0A       	cmp ah, $0A				; LF
0155+  059A C6 0F 06    	je gets_end
0156+  059D 76 0D       	cmp ah, $0D				; CR
0157+  059F C6 0F 06    	je gets_end
0158+  05A2 76 5C       	cmp ah, $5C				; '\\'
0159+  05A4 C6 E6 05    	je gets_escape
0160+  05A7             	
0161+  05A7 76 08       	cmp ah, $08			; check for backspace
0162+  05A9 C6 B2 05    	je gets_backspace
0163+  05AC             
0164+  05AC 1A          	mov al, ah
0165+  05AD 3E          	mov [d], al
0166+  05AE 79          	inc d
0167+  05AF 0A 88 05    	jmp gets_loop
0168+  05B2             gets_backspace:
0169+  05B2 7F          	dec d
0170+  05B3 0A 88 05    	jmp gets_loop
0171+  05B6             gets_telnet_escape:
0172+  05B6 FD 0C       	sti
0173+  05B8 19 01       	mov al, 1
0174+  05BA 05 03       	syscall sys_io				; receive in AH without echo
0175+  05BC B9 00       	cmp al, 0					; check error code (AL)
0176+  05BE C6 B6 05    	je gets_telnet_escape		; if no char received, retry
0177+  05C1 76 5B       	cmp ah, '['
0178+  05C3 C7 88 05    	jne gets_loop
0179+  05C6             gets_telnet_escape_phase2:
0180+  05C6 FD 0C       	sti
0181+  05C8 19 01       	mov al, 1
0182+  05CA 05 03       	syscall sys_io					; receive in AH without echo
0183+  05CC B9 00       	cmp al, 0						; check error code (AL)
0184+  05CE C6 C6 05    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  05D1 76 44       	cmp ah, 'D'
0186+  05D3 C6 DE 05    	je gets_left_arrow
0187+  05D6 76 43       	cmp ah, 'C'
0188+  05D8 C6 E2 05    	je gets_right_arrow
0189+  05DB 0A 88 05    	jmp gets_loop
0190+  05DE             gets_left_arrow:
0191+  05DE 7F          	dec d
0192+  05DF 0A 88 05    	jmp gets_loop
0193+  05E2             gets_right_arrow:
0194+  05E2 79          	inc d
0195+  05E3 0A 88 05    	jmp gets_loop
0196+  05E6             gets_escape:
0197+  05E6 FD 0C       	sti
0198+  05E8 19 01       	mov al, 1
0199+  05EA 05 03       	syscall sys_io			; receive in AH
0200+  05EC B9 00       	cmp al, 0				; check error code (AL)
0201+  05EE C6 E6 05    	je gets_escape			; if no char received, retry
0202+  05F1 76 6E       	cmp ah, 'n'
0203+  05F3 C6 01 06    	je gets_LF
0204+  05F6 76 72       	cmp ah, 'r'
0205+  05F8 C6 08 06    	je gets_CR
0206+  05FB 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  05FC 3E          	mov [d], al
0208+  05FD 79          	inc d
0209+  05FE 0A 88 05    	jmp gets_loop
0210+  0601             gets_LF:
0211+  0601 19 0A       	mov al, $0A
0212+  0603 3E          	mov [d], al
0213+  0604 79          	inc d
0214+  0605 0A 88 05    	jmp gets_loop
0215+  0608             gets_CR:
0216+  0608 19 0D       	mov al, $0D
0217+  060A 3E          	mov [d], al
0218+  060B 79          	inc d
0219+  060C 0A 88 05    	jmp gets_loop
0220+  060F             gets_end:
0221+  060F 19 00       	mov al, 0
0222+  0611 3E          	mov [d], al				; terminate string
0223+  0612 E7          	pop d
0224+  0613 E4          	pop a
0225+  0614 09          	ret
0226+  0615             
0227+  0615             
0228+  0615             
0229+  0615             
0230+  0615             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0615             ;; INPUT TEXT
0232+  0615             ;; terminated with CTRL+D
0233+  0615             ;; pointer in D
0234+  0615             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0615             gettxt:
0236+  0615 D7          	push a
0237+  0616 DA          	push d
0238+  0617             gettxt_loop:
0239+  0617 19 01       	mov al, 1
0240+  0619 05 03       	syscall sys_io			; receive in AH
0241+  061B B9 00       	cmp al, 0				; check error code (AL)
0242+  061D C6 17 06    	je gettxt_loop		; if no char received, retry
0243+  0620 76 04       	cmp ah, 4			; EOT
0244+  0622 C6 60 06    	je gettxt_end
0245+  0625 76 08       	cmp ah, $08			; check for backspace
0246+  0627 C6 5C 06    	je gettxt_backspace
0247+  062A 76 5C       	cmp ah, $5C				; '\\'
0248+  062C C6 35 06    	je gettxt_escape
0249+  062F 1A          	mov al, ah
0250+  0630 3E          	mov [d], al
0251+  0631 79          	inc d
0252+  0632 0A 17 06    	jmp gettxt_loop
0253+  0635             gettxt_escape:
0254+  0635 19 01       	mov al, 1
0255+  0637 05 03       	syscall sys_io			; receive in AH
0256+  0639 B9 00       	cmp al, 0				; check error code (AL)
0257+  063B C6 35 06    	je gettxt_escape		; if no char received, retry
0258+  063E 76 6E       	cmp ah, 'n'
0259+  0640 C6 4E 06    	je gettxt_LF
0260+  0643 76 72       	cmp ah, 'r'
0261+  0645 C6 55 06    	je gettxt_CR
0262+  0648 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0649 3E          	mov [d], al
0264+  064A 79          	inc d
0265+  064B 0A 17 06    	jmp gettxt_loop
0266+  064E             gettxt_LF:
0267+  064E 19 0A       	mov al, $0A
0268+  0650 3E          	mov [d], al
0269+  0651 79          	inc d
0270+  0652 0A 17 06    	jmp gettxt_loop
0271+  0655             gettxt_CR:
0272+  0655 19 0D       	mov al, $0D
0273+  0657 3E          	mov [d], al
0274+  0658 79          	inc d
0275+  0659 0A 17 06    	jmp gettxt_loop
0276+  065C             gettxt_backspace:
0277+  065C 7F          	dec d
0278+  065D 0A 17 06    	jmp gettxt_loop
0279+  0660             gettxt_end:
0280+  0660 19 00       	mov al, 0
0281+  0662 3E          	mov [d], al				; terminate string
0282+  0663 E7          	pop d
0283+  0664 E4          	pop a
0284+  0665 09          	ret
0285+  0666             
0286+  0666             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0666             ; PRINT NEW LINE
0288+  0666             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0666             printnl:
0290+  0666 D7          	push a
0291+  0667 10 00 0A    	mov a, $0A00
0292+  066A 05 03       	syscall sys_io
0293+  066C 10 00 0D    	mov a, $0D00
0294+  066F 05 03       	syscall sys_io
0295+  0671 E4          	pop a
0296+  0672 09          	ret
0297+  0673             
0298+  0673             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0673             ; strtoint
0300+  0673             ; 4 digit hex string number in d
0301+  0673             ; integer returned in A
0302+  0673             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0673             strtointx:
0304+  0673 D8          	push b
0305+  0674 32          	mov bl, [d]
0306+  0675 37          	mov bh, bl
0307+  0676 33 01 00    	mov bl, [d + 1]
0308+  0679 07 34 05    	call atoi				; convert to int in AL
0309+  067C 23          	mov ah, al				; move to AH
0310+  067D 33 02 00    	mov bl, [d + 2]
0311+  0680 37          	mov bh, bl
0312+  0681 33 03 00    	mov bl, [d + 3]
0313+  0684 07 34 05    	call atoi				; convert to int in AL
0314+  0687 E5          	pop b
0315+  0688 09          	ret
0316+  0689             
0317+  0689             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0689             ; strtoint
0319+  0689             ; 5 digit base10 string number in d
0320+  0689             ; integer returned in A
0321+  0689             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0689             strtoint:
0323+  0689 E2          	push si
0324+  068A D8          	push b
0325+  068B D9          	push c
0326+  068C DA          	push d
0327+  068D 07 B4 04    	call strlen			; get string length in C
0328+  0690 7E          	dec c
0329+  0691 FD 4E       	mov si, d
0330+  0693 12          	mov a, c
0331+  0694 FD 99       	shl a
0332+  0696 3B 1C 05    	mov d, table_power
0333+  0699 59          	add d, a
0334+  069A 38 00 00    	mov c, 0
0335+  069D             strtoint_L0:
0336+  069D F6          	lodsb			; load ASCII to al
0337+  069E B9 00       	cmp al, 0
0338+  06A0 C6 B3 06    	je strtoint_end
0339+  06A3 6F 30       	sub al, $30		; make into integer
0340+  06A5 22 00       	mov ah, 0
0341+  06A7 2A          	mov b, [d]
0342+  06A8 AC          	mul a, b			; result in B since it fits in 16bits
0343+  06A9 11          	mov a, b
0344+  06AA 28          	mov b, c
0345+  06AB 54          	add a, b
0346+  06AC 39          	mov c, a
0347+  06AD 63 02 00    	sub d, 2
0348+  06B0 0A 9D 06    	jmp strtoint_L0
0349+  06B3             strtoint_end:
0350+  06B3 12          	mov a, c
0351+  06B4 E7          	pop d
0352+  06B5 E6          	pop c
0353+  06B6 E5          	pop b
0354+  06B7 EF          	pop si
0355+  06B8 09          	ret
0356+  06B9             
0357+  06B9             
0358+  06B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  06B9             ; PRINT NULL TERMINATED STRING
0360+  06B9             ; pointer in D
0361+  06B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  06B9             puts:
0363+  06B9 D7          	push a
0364+  06BA DA          	push d
0365+  06BB             puts_L1:
0366+  06BB 1E          	mov al, [d]
0367+  06BC B9 00       	cmp al, 0
0368+  06BE C6 CA 06    	jz puts_END
0369+  06C1 23          	mov ah, al
0370+  06C2 19 00       	mov al, 0
0371+  06C4 05 03       	syscall sys_io
0372+  06C6 79          	inc d
0373+  06C7 0A BB 06    	jmp puts_L1
0374+  06CA             puts_END:
0375+  06CA E7          	pop d
0376+  06CB E4          	pop a
0377+  06CC 09          	ret
0378+  06CD             
0379+  06CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  06CD             ; PRINT N SIZE STRING
0381+  06CD             ; pointer in D
0382+  06CD             ; size in C
0383+  06CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  06CD             putsn:
0385+  06CD DB          	push al
0386+  06CE DA          	push d
0387+  06CF D9          	push c
0388+  06D0             putsn_L0:
0389+  06D0 1E          	mov al, [d]
0390+  06D1 23          	mov ah, al
0391+  06D2 19 00       	mov al, 0
0392+  06D4 05 03       	syscall sys_io
0393+  06D6 79          	inc d
0394+  06D7 7E          	dec c	
0395+  06D8 C2 00 00    	cmp c, 0
0396+  06DB C7 D0 06    	jne putsn_L0
0397+  06DE             putsn_end:
0398+  06DE E6          	pop c
0399+  06DF E7          	pop d
0400+  06E0 E8          	pop al
0401+  06E1 09          	ret
0402+  06E2             
0403+  06E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  06E2             ; print 16bit decimal number
0405+  06E2             ; input number in A
0406+  06E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  06E2             print_u16d:
0408+  06E2 D7          	push a
0409+  06E3 D8          	push b
0410+  06E4 26 10 27    	mov b, 10000
0411+  06E7 AE          	div a, b			; get 10000's coeff.
0412+  06E8 07 0A 07    	call print_number
0413+  06EB 11          	mov a, b
0414+  06EC 26 E8 03    	mov b, 1000
0415+  06EF AE          	div a, b			; get 1000's coeff.
0416+  06F0 07 0A 07    	call print_number
0417+  06F3 11          	mov a, b
0418+  06F4 26 64 00    	mov b, 100
0419+  06F7 AE          	div a, b
0420+  06F8 07 0A 07    	call print_number
0421+  06FB 11          	mov a, b
0422+  06FC 26 0A 00    	mov b, 10
0423+  06FF AE          	div a, b
0424+  0700 07 0A 07    	call print_number
0425+  0703 1B          	mov al, bl			; 1's coeff in bl
0426+  0704 07 0A 07    	call print_number
0427+  0707 E5          	pop b
0428+  0708 E4          	pop a
0429+  0709 09          	ret
0430+  070A             
0431+  070A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0432+  070A             ; print AL
0433+  070A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0434+  070A             print_number:
0435+  070A 6A 30       	add al, $30
0436+  070C 23          	mov ah, al
0437+  070D 07 7F 05    	call putchar
0438+  0710 09          	ret
0439+  0711             
0440+  0711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0441+  0711             ; PRINT 16BIT HEX INTEGER
0442+  0711             ; integer value in reg B
0443+  0711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0444+  0711             print_u16x:
0445+  0711 D7          	push a
0446+  0712 D8          	push b
0447+  0713 DD          	push bl
0448+  0714 30          	mov bl, bh
0449+  0715 07 46 05    	call itoa				; convert bh to char in A
0450+  0718 2F          	mov bl, al				; save al
0451+  0719 19 00       	mov al, 0
0452+  071B 05 03       	syscall sys_io				; display AH
0453+  071D 24          	mov ah, bl				; retrieve al
0454+  071E 19 00       	mov al, 0
0455+  0720 05 03       	syscall sys_io				; display AL
0456+  0722             
0457+  0722 EA          	pop bl
0458+  0723 07 46 05    	call itoa				; convert bh to char in A
0459+  0726 2F          	mov bl, al				; save al
0460+  0727 19 00       	mov al, 0
0461+  0729 05 03       	syscall sys_io				; display AH
0462+  072B 24          	mov ah, bl				; retrieve al
0463+  072C 19 00       	mov al, 0
0464+  072E 05 03       	syscall sys_io				; display AL
0465+  0730             
0466+  0730 E5          	pop b
0467+  0731 E4          	pop a
0468+  0732 09          	ret
0469+  0733             
0470+  0733             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0471+  0733             ; INPUT 16BIT HEX INTEGER
0472+  0733             ; read 16bit integer into A
0473+  0733             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0474+  0733             scan_u16x:
0475+  0733 F8 10 00    	enter 16
0476+  0736 D8          	push b
0477+  0737 DA          	push d
0478+  0738             
0479+  0738 FA F1 FF    	lea d, [bp + -15]
0480+  073B 07 86 05    	call gets				; get number
0481+  073E             
0482+  073E 32          	mov bl, [d]
0483+  073F 37          	mov bh, bl
0484+  0740 33 01 00    	mov bl, [d + 1]
0485+  0743 07 34 05    	call atoi				; convert to int in AL
0486+  0746 23          	mov ah, al				; move to AH
0487+  0747             
0488+  0747 33 02 00    	mov bl, [d + 2]
0489+  074A 37          	mov bh, bl
0490+  074B 33 03 00    	mov bl, [d + 3]
0491+  074E 07 34 05    	call atoi				; convert to int in AL
0492+  0751             
0493+  0751 E7          	pop d
0494+  0752 E5          	pop b
0495+  0753 F9          	leave
0496+  0754 09          	ret
0497+  0755             
0498+  0755             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0499+  0755             ; PRINT 8bit HEX INTEGER
0500+  0755             ; integer value in reg bl
0501+  0755             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0502+  0755             print_u8x:
0503+  0755 D7          	push a
0504+  0756 DD          	push bl
0505+  0757             
0506+  0757 07 46 05    	call itoa				; convert bl to char in A
0507+  075A 2F          	mov bl, al				; save al
0508+  075B 19 00       	mov al, 0
0509+  075D 05 03       	syscall sys_io				; display AH
0510+  075F 24          	mov ah, bl				; retrieve al
0511+  0760 19 00       	mov al, 0
0512+  0762 05 03       	syscall sys_io				; display AL
0513+  0764             
0514+  0764 EA          	pop bl
0515+  0765 E4          	pop a
0516+  0766 09          	ret
0517+  0767             
0518+  0767             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0519+  0767             ; print 8bit decimal unsigned number
0520+  0767             ; input number in AL
0521+  0767             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0522+  0767             print_u8d:
0523+  0767 D7          	push a
0524+  0768 D8          	push b
0525+  0769             
0526+  0769 22 00       	mov ah, 0
0527+  076B 26 64 00    	mov b, 100
0528+  076E AE          	div a, b
0529+  076F D8          	push b			; save remainder
0530+  0770 B9 00       	cmp al, 0
0531+  0772 C6 7C 07    	je skip100
0532+  0775 6A 30       	add al, $30
0533+  0777 23          	mov ah, al
0534+  0778 19 00       	mov al, 0
0535+  077A 05 03       	syscall sys_io	; print coeff
0536+  077C             skip100:
0537+  077C E4          	pop a
0538+  077D 22 00       	mov ah, 0
0539+  077F 26 0A 00    	mov b, 10
0540+  0782 AE          	div a, b
0541+  0783 D8          	push b			; save remainder
0542+  0784 B9 00       	cmp al, 0
0543+  0786 C6 90 07    	je skip10
0544+  0789 6A 30       	add al, $30
0545+  078B 23          	mov ah, al
0546+  078C 19 00       	mov al, 0
0547+  078E 05 03       	syscall sys_io	; print coeff
0548+  0790             skip10:
0549+  0790 E4          	pop a
0550+  0791 1B          	mov al, bl
0551+  0792 6A 30       	add al, $30
0552+  0794 23          	mov ah, al
0553+  0795 19 00       	mov al, 0
0554+  0797 05 03       	syscall sys_io	; print coeff
0555+  0799 E5          	pop b
0556+  079A E4          	pop a
0557+  079B 09          	ret
0558+  079C             
0559+  079C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0560+  079C             ; INPUT 8BIT HEX INTEGER
0561+  079C             ; read 8bit integer into AL
0562+  079C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0563+  079C             scan_u8x:
0564+  079C F8 04 00    	enter 4
0565+  079F D8          	push b
0566+  07A0 DA          	push d
0567+  07A1             
0568+  07A1 FA FD FF    	lea d, [bp + -3]
0569+  07A4 07 86 05    	call gets				; get number
0570+  07A7             
0571+  07A7 32          	mov bl, [d]
0572+  07A8 37          	mov bh, bl
0573+  07A9 33 01 00    	mov bl, [d + 1]
0574+  07AC 07 34 05    	call atoi				; convert to int in AL
0575+  07AF             
0576+  07AF E7          	pop d
0577+  07B0 E5          	pop b
0578+  07B1 F9          	leave
0579+  07B2 09          	ret
0580+  07B3             
0581+  07B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0582+  07B3             ; input decimal number
0583+  07B3             ; result in A
0584+  07B3             ; 655'\0'
0585+  07B3             ; low--------high
0586+  07B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  07B3             scan_u16d:
0588+  07B3 F8 08 00    	enter 8
0589+  07B6 E2          	push si
0590+  07B7 D8          	push b
0591+  07B8 D9          	push c
0592+  07B9 DA          	push d
0593+  07BA FA F9 FF    	lea d, [bp +- 7]
0594+  07BD 07 86 05    	call gets
0595+  07C0 07 B4 04    	call strlen			; get string length in C
0596+  07C3 7E          	dec c
0597+  07C4 FD 4E       	mov si, d
0598+  07C6 12          	mov a, c
0599+  07C7 FD 99       	shl a
0600+  07C9 3B 1C 05    	mov d, table_power
0601+  07CC 59          	add d, a
0602+  07CD 38 00 00    	mov c, 0
0603+  07D0             mul_loop:
0604+  07D0 F6          	lodsb			; load ASCII to al
0605+  07D1 B9 00       	cmp al, 0
0606+  07D3 C6 E6 07    	je mul_exit
0607+  07D6 6F 30       	sub al, $30		; make into integer
0608+  07D8 22 00       	mov ah, 0
0609+  07DA 2A          	mov b, [d]
0610+  07DB AC          	mul a, b			; result in B since it fits in 16bits
0611+  07DC 11          	mov a, b
0612+  07DD 28          	mov b, c
0613+  07DE 54          	add a, b
0614+  07DF 39          	mov c, a
0615+  07E0 63 02 00    	sub d, 2
0616+  07E3 0A D0 07    	jmp mul_loop
0617+  07E6             mul_exit:
0618+  07E6 12          	mov a, c
0619+  07E7 E7          	pop d
0620+  07E8 E6          	pop c
0621+  07E9 E5          	pop b
0622+  07EA EF          	pop si
0623+  07EB F9          	leave
0624+  07EC 09          	ret
0082   07ED             ; --- END INCLUDE BLOCK
0083   07ED             
0084   07ED             
0085   07ED             .end
tasm: Number of errors = 1
