0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 52 02 00      sub sp, 2 ; j
0012   0408 52 02 00      sub sp, 2 ; k
0013   040B 26 03 00      mov b, 3
0014   040E D7            push a
0015   040F 11            mov a, b
0016   0410 45 FF FF      mov [bp + -1], a ; i
0017   0413 E4            pop a
0018   0414 26 32 00      mov b, 50
0019   0417 D7            push a
0020   0418 11            mov a, b
0021   0419 45 FD FF      mov [bp + -3], a ; j
0022   041C E4            pop a
0023   041D 26 05 00      mov b, 5
0024   0420 D7            push a
0025   0421 11            mov a, b
0026   0422 45 FB FF      mov [bp + -5], a ; k
0027   0425 E4            pop a
0028   0426             _switch1_expr:
0029   0426 2C FF FF      mov b, [bp + -1] ; i
0030   0429             _switch1_comparisons:
0031   0429 C0 01 00      cmp b, 1
0032   042C C6 3E 04      je _switch1_case0
0033   042F C0 02 00      cmp b, 2
0034   0432 C6 4A 04      je _switch1_case1
0035   0435 C0 03 00      cmp b, 3
0036   0438 C6 56 04      je _switch1_case2
0037   043B 0A 6E 04      jmp _switch1_default
0038   043E             _switch1_case0:
0039   043E 26 D9 04      mov b, _string_0 ; "1"
0040   0441 FD AB         swp b
0041   0443 D8            push b
0042   0444 07 A2 04      call print
0043   0447 51 02 00      add sp, 2
0044   044A             _switch1_case1:
0045   044A 26 DB 04      mov b, _string_1 ; "2"
0046   044D FD AB         swp b
0047   044F D8            push b
0048   0450 07 A2 04      call print
0049   0453 51 02 00      add sp, 2
0050   0456             _switch1_case2:
0051   0456 26 DD 04      mov b, _string_2 ; "3"
0052   0459 FD AB         swp b
0053   045B D8            push b
0054   045C 07 A2 04      call print
0055   045F 51 02 00      add sp, 2
0056   0462 26 DF 04      mov b, _string_3 ; "Inside block"
0057   0465 FD AB         swp b
0058   0467 D8            push b
0059   0468 07 A2 04      call print
0060   046B 51 02 00      add sp, 2
0061   046E             _switch1_default:
0062   046E 26 EC 04      mov b, _string_4 ; "Default"
0063   0471 FD AB         swp b
0064   0473 D8            push b
0065   0474 07 A2 04      call print
0066   0477 51 02 00      add sp, 2
0067   047A             _switch1_exit:
0068   047A 26 00 00      mov b, 0
0069   047D F9            leave
0070   047E 05 0B         syscall sys_terminate_proc
0071   0480             
0072   0480             scann:
0073   0480 D2            push bp
0074   0481 9B            mov bp, sp
0075   0482 52 02 00      sub sp, 2 ; m
0076   0485             
0077   0485             ; --- BEGIN INLINE ASM BLOCK
0078   0485 07 3E 08      call scan_u16d
0079   0488 45 FF FF      mov [bp + -1], a
0080   048B             ; --- END INLINE ASM BLOCK
0081   048B             
0082   048B FA 05 00      lea d, [bp + 5] ; n
0083   048E 2A            mov b, [d]
0084   048F D8            push b
0085   0490 2C FF FF      mov b, [bp + -1] ; m
0086   0493 E7            pop d
0087   0494 11            mov a, b
0088   0495 43            mov [d], a
0089   0496 F9            leave
0090   0497 09            ret
0091   0498             
0092   0498             printn:
0093   0498 D2            push bp
0094   0499 9B            mov bp, sp
0095   049A             
0096   049A             ; --- BEGIN INLINE ASM BLOCK
0097   049A 17 05 00      mov a, [bp + 5]
0098   049D 07 69 07      call print_u16d
0099   04A0             ; --- END INLINE ASM BLOCK
0100   04A0             
0101   04A0 F9            leave
0102   04A1 09            ret
0103   04A2             
0104   04A2             print:
0105   04A2 D2            push bp
0106   04A3 9B            mov bp, sp
0107   04A4             
0108   04A4             ; --- BEGIN INLINE ASM BLOCK
0109   04A4 17 05 00      mov a, [bp + 5]
0110   04A7 3C            mov d, a
0111   04A8 07 40 07      call puts
0112   04AB             ; --- END INLINE ASM BLOCK
0113   04AB             
0114   04AB F9            leave
0115   04AC 09            ret
0116   04AD             ; --- END TEXT BLOCK
0117   04AD             
0118   04AD             ; --- BEGIN DATA BLOCK
0119   04AD             m1_data: 
0120   04AD 7B 00 6F 00 .dw 123,111,123,
0120   04B1 7B 00 
0121   04B3 00 00 00 00 .fill 14, 0
0121   04B7 00 00 00 00 
0121   04BB 00 00 00 00 
0121   04BF 00 00 
0122   04C1 AD 04       m1: .dw m1_data
0123   04C3             m2_data: 
0124   04C3 00 00 01 00 .dw 0,1,2,
0124   04C7 02 00 
0125   04C9 00 00 00 00 .fill 14, 0
0125   04CD 00 00 00 00 
0125   04D1 00 00 00 00 
0125   04D5 00 00 
0126   04D7 C3 04       m2: .dw m2_data
0127   04D9 31 00       _string_0: .db "1", 0
0128   04DB 32 00       _string_1: .db "2", 0
0129   04DD 33 00       _string_2: .db "3", 0
0130   04DF 49 6E 73 69 _string_3: .db "Inside block", 0
0130   04E3 64 65 20 62 
0130   04E7 6C 6F 63 6B 
0130   04EB 00 
0131   04EC 44 65 66 61 _string_4: .db "Default", 0
0131   04F0 75 6C 74 00 
0132   04F4             ; --- END DATA BLOCK
0133   04F4             
0134   04F4             ; --- BEGIN INCLUDE BLOCK
0135   04F4             .include "lib/stdio.asm"
0001+  04F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  04F4             ; stdio.s
0003+  04F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  04F4             .include "lib/string.asm"
0001++ 04F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 04F4             ; string.s
0003++ 04F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 04F4             
0005++ 04F4             
0006++ 04F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 04F4             ; strrev
0008++ 04F4             ; reverse a string
0009++ 04F4             ; D = string address
0010++ 04F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 04F4             ; 01234
0012++ 04F4             strrev:
0013++ 04F4 4B          	pusha
0014++ 04F5 07 3B 05    	call strlen	; length in C
0015++ 04F8 12          	mov a, c
0016++ 04F9 AF 01 00    	cmp a, 1
0017++ 04FC D0 16 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 04FF 7D          	dec a
0019++ 0500 FD 4E       	mov si, d	; beginning of string
0020++ 0502 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0504 59          	add d, a	; end of string
0022++ 0505 12          	mov a, c
0023++ 0506 FD 9B       	shr a		; divide by 2
0024++ 0508 39          	mov c, a	; C now counts the steps
0025++ 0509             strrev_L0:
0026++ 0509 32          	mov bl, [d]	; save load right-side char into BL
0027++ 050A F6          	lodsb		; load left-side char into AL; increase SI
0028++ 050B 3E          	mov [d], al	; store left char into right side
0029++ 050C 1B          	mov al, bl
0030++ 050D F7          	stosb		; store right-side char into left-side; increase DI
0031++ 050E 7E          	dec c
0032++ 050F 7F          	dec d
0033++ 0510 C2 00 00    	cmp c, 0
0034++ 0513 C7 09 05    	jne strrev_L0
0035++ 0516             strrev_end:
0036++ 0516 4C          	popa
0037++ 0517 09          	ret
0038++ 0518             	
0039++ 0518             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0518             ; strchr
0041++ 0518             ; search string in D for char in AL
0042++ 0518             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0518             strchr:
0044++ 0518             strchr_L0:
0045++ 0518 32          	mov bl, [d]
0046++ 0519 C1 00       	cmp bl, 0
0047++ 051B C6 26 05    	je strchr_end
0048++ 051E BA          	cmp al, bl
0049++ 051F C6 26 05    	je strchr_end
0050++ 0522 79          	inc d
0051++ 0523 0A 18 05    	jmp strchr_L0
0052++ 0526             strchr_end:
0053++ 0526 1B          	mov al, bl
0054++ 0527 09          	ret
0055++ 0528             
0056++ 0528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0528             ; strstr
0058++ 0528             ; find sub-string
0059++ 0528             ; str1 in SI
0060++ 0528             ; str2 in DI
0061++ 0528             ; SI points to end of source string
0062++ 0528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0528             strstr:
0064++ 0528 DB          	push al
0065++ 0529 DA          	push d
0066++ 052A E3          	push di
0067++ 052B             strstr_loop:
0068++ 052B F3          	cmpsb					; compare a byte of the strings
0069++ 052C C7 37 05    	jne strstr_ret
0070++ 052F FC 00 00    	lea d, [di + 0]
0071++ 0532 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0534 C7 2B 05    	jne strstr_loop				; equal chars but not at end
0073++ 0537             strstr_ret:
0074++ 0537 F0          	pop di
0075++ 0538 E7          	pop d
0076++ 0539 E8          	pop al
0077++ 053A 09          	ret
0078++ 053B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 053B             ; length of null terminated string
0080++ 053B             ; result in C
0081++ 053B             ; pointer in D
0082++ 053B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 053B             strlen:
0084++ 053B DA          	push d
0085++ 053C 38 00 00    	mov c, 0
0086++ 053F             strlen_L1:
0087++ 053F BD 00       	cmp byte [d], 0
0088++ 0541 C6 49 05    	je strlen_ret
0089++ 0544 79          	inc d
0090++ 0545 78          	inc c
0091++ 0546 0A 3F 05    	jmp strlen_L1
0092++ 0549             strlen_ret:
0093++ 0549 E7          	pop d
0094++ 054A 09          	ret
0095++ 054B             
0096++ 054B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 054B             ; STRCMP
0098++ 054B             ; compare two strings
0099++ 054B             ; str1 in SI
0100++ 054B             ; str2 in DI
0101++ 054B             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 054B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 054B             strcmp:
0104++ 054B DB          	push al
0105++ 054C DA          	push d
0106++ 054D E3          	push di
0107++ 054E E2          	push si
0108++ 054F             strcmp_loop:
0109++ 054F F3          	cmpsb					; compare a byte of the strings
0110++ 0550 C7 5B 05    	jne strcmp_ret
0111++ 0553 FB FF FF    	lea d, [si +- 1]
0112++ 0556 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0558 C7 4F 05    	jne strcmp_loop				; equal chars but not at end
0114++ 055B             strcmp_ret:
0115++ 055B EF          	pop si
0116++ 055C F0          	pop di
0117++ 055D E7          	pop d
0118++ 055E E8          	pop al
0119++ 055F 09          	ret
0120++ 0560             
0121++ 0560             
0122++ 0560             ; STRCPY
0123++ 0560             ; copy null terminated string from SI to DI
0124++ 0560             ; source in SI
0125++ 0560             ; destination in DI
0126++ 0560             strcpy:
0127++ 0560 E2          	push si
0128++ 0561 E3          	push di
0129++ 0562 DB          	push al
0130++ 0563             strcpy_L1:
0131++ 0563 F6          	lodsb
0132++ 0564 F7          	stosb
0133++ 0565 B9 00       	cmp al, 0
0134++ 0567 C7 63 05    	jne strcpy_L1
0135++ 056A             strcpy_end:
0136++ 056A E8          	pop al
0137++ 056B F0          	pop di
0138++ 056C EF          	pop si
0139++ 056D 09          	ret
0140++ 056E             
0141++ 056E             ; STRCAT
0142++ 056E             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 056E             ; source in SI
0144++ 056E             ; destination in DI
0145++ 056E             strcat:
0146++ 056E E2          	push si
0147++ 056F E3          	push di
0148++ 0570 D7          	push a
0149++ 0571 DA          	push d
0150++ 0572 50          	mov a, di
0151++ 0573 3C          	mov d, a
0152++ 0574             strcat_goto_end_L1:
0153++ 0574 BD 00       	cmp byte[d], 0
0154++ 0576 C6 7D 05    	je strcat_start
0155++ 0579 79          	inc d
0156++ 057A 0A 74 05    	jmp strcat_goto_end_L1
0157++ 057D             strcat_start:
0158++ 057D FD 50       	mov di, d
0159++ 057F             strcat_L1:
0160++ 057F F6          	lodsb
0161++ 0580 F7          	stosb
0162++ 0581 B9 00       	cmp al, 0
0163++ 0583 C7 7F 05    	jne strcat_L1
0164++ 0586             strcat_end:
0165++ 0586 E7          	pop d
0166++ 0587 E4          	pop a
0167++ 0588 F0          	pop di
0168++ 0589 EF          	pop si
0169++ 058A 09          	ret
0005+  058B             
0006+  058B 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  058F 34 35 36 37 
0006+  0593 38 39 41 42 
0006+  0597 43 44 45 46 
0007+  059B 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  059F 1B 5B 48 00 
0008+  05A3             
0009+  05A3 01 00       table_power:.dw 1
0010+  05A5 0A 00       			.dw 10
0011+  05A7 64 00       			.dw 100
0012+  05A9 E8 03       			.dw 1000
0013+  05AB 10 27       			.dw 10000
0014+  05AD             
0015+  05AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  05AD             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  05AD             ; ASCII in BL
0018+  05AD             ; result in AL
0019+  05AD             ; ascii for F = 0100 0110
0020+  05AD             ; ascii for 9 = 0011 1001
0021+  05AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  05AD             hex_ascii_encode:
0023+  05AD 1B          	mov al, bl
0024+  05AE 93 40       	test al, $40				; test if letter or number
0025+  05B0 C7 B6 05    	jnz hex_letter
0026+  05B3 87 0F       	and al, $0F				; get number
0027+  05B5 09          	ret
0028+  05B6             hex_letter:
0029+  05B6 87 0F       	and al, $0F				; get letter
0030+  05B8 6A 09       	add al, 9
0031+  05BA 09          	ret
0032+  05BB             
0033+  05BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  05BB             ; ATOI
0035+  05BB             ; 2 letter hex string in B
0036+  05BB             ; 8bit integer returned in AL
0037+  05BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  05BB             atoi:
0039+  05BB D8          	push b
0040+  05BC 07 AD 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  05BF 30          	mov bl, bh
0042+  05C0 DB          	push al					; save a
0043+  05C1 07 AD 05    	call hex_ascii_encode
0044+  05C4 EA          	pop bl	
0045+  05C5 FD 9E 04    	shl al, 4
0046+  05C8 8C          	or al, bl
0047+  05C9 E5          	pop b
0048+  05CA 09          	ret	
0049+  05CB             
0050+  05CB             
0051+  05CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  05CB             ; printf
0053+  05CB             ; no need for explanations!
0054+  05CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  05CB             printf:
0056+  05CB 09          	ret
0057+  05CC             
0058+  05CC             
0059+  05CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  05CC             ; scanf
0061+  05CC             ; no need for explanations!
0062+  05CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  05CC             scanf:
0064+  05CC 09          	ret
0065+  05CD             
0066+  05CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  05CD             ; ITOA
0068+  05CD             ; 8bit value in BL
0069+  05CD             ; 2 byte ASCII result in A
0070+  05CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  05CD             itoa:
0072+  05CD DA          	push d
0073+  05CE D8          	push b
0074+  05CF A7 00       	mov bh, 0
0075+  05D1 FD A4 04    	shr bl, 4	
0076+  05D4 74          	mov d, b
0077+  05D5 1F 8B 05    	mov al, [d + s_hex_digits]
0078+  05D8 23          	mov ah, al
0079+  05D9             	
0080+  05D9 E5          	pop b
0081+  05DA D8          	push b
0082+  05DB A7 00       	mov bh, 0
0083+  05DD FD 87 0F    	and bl, $0F
0084+  05E0 74          	mov d, b
0085+  05E1 1F 8B 05    	mov al, [d + s_hex_digits]
0086+  05E4 E5          	pop b
0087+  05E5 E7          	pop d
0088+  05E6 09          	ret
0089+  05E7             
0090+  05E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  05E7             ; HEX STRING TO BINARY
0092+  05E7             ; di = destination address
0093+  05E7             ; si = source
0094+  05E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  05E7             hex_to_int:
0096+  05E7             hex_to_int_L1:
0097+  05E7 F6          	lodsb					; load from [SI] to AL
0098+  05E8 B9 00       	cmp al, 0				; check if ASCII 0
0099+  05EA C6 F7 05    	jz hex_to_int_ret
0100+  05ED 36          	mov bh, al
0101+  05EE F6          	lodsb
0102+  05EF 2F          	mov bl, al
0103+  05F0 07 BB 05    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  05F3 F7          	stosb					; store AL to [DI]
0105+  05F4 0A E7 05    	jmp hex_to_int_L1
0106+  05F7             hex_to_int_ret:
0107+  05F7 09          	ret		
0108+  05F8             
0109+  05F8             
0110+  05F8             
0111+  05F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  05F8             ; GETCHAR
0113+  05F8             ; char in ah
0114+  05F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  05F8             getchar:
0116+  05F8 DB          	push al
0117+  05F9             getchar_retry:
0118+  05F9 FD 0C       	sti
0119+  05FB 19 01       	mov al, 1
0120+  05FD 05 03       	syscall sys_io			; receive in AH
0121+  05FF B9 00       	cmp al, 0			; check if any char was receive
0122+  0601 C6 F9 05    	je getchar_retry
0123+  0604 E8          	pop al
0124+  0605 09          	ret
0125+  0606             
0126+  0606             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0606             ; PUTCHAR
0128+  0606             ; char in ah
0129+  0606             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0606             putchar:
0131+  0606 D7          	push a
0132+  0607 19 00       	mov al, 0
0133+  0609 05 03       	syscall sys_io			; char in AH
0134+  060B E4          	pop a
0135+  060C 09          	ret
0136+  060D             
0137+  060D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  060D             ;; INPUT A STRING
0139+  060D             ;; terminates with null
0140+  060D             ;; pointer in D
0141+  060D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  060D             gets:
0143+  060D D7          	push a
0144+  060E DA          	push d
0145+  060F             gets_loop:
0146+  060F FD 0C       	sti
0147+  0611 19 01       	mov al, 1
0148+  0613 05 03       	syscall sys_io			; receive in AH
0149+  0615 B9 00       	cmp al, 0				; check error code (AL)
0150+  0617 C6 0F 06    	je gets_loop			; if no char received, retry
0151+  061A             
0152+  061A 76 1B       	cmp ah, 27
0153+  061C C6 3D 06    	je gets_telnet_escape
0154+  061F 76 0A       	cmp ah, $0A				; LF
0155+  0621 C6 96 06    	je gets_end
0156+  0624 76 0D       	cmp ah, $0D				; CR
0157+  0626 C6 96 06    	je gets_end
0158+  0629 76 5C       	cmp ah, $5C				; '\\'
0159+  062B C6 6D 06    	je gets_escape
0160+  062E             	
0161+  062E 76 08       	cmp ah, $08			; check for backspace
0162+  0630 C6 39 06    	je gets_backspace
0163+  0633             
0164+  0633 1A          	mov al, ah
0165+  0634 3E          	mov [d], al
0166+  0635 79          	inc d
0167+  0636 0A 0F 06    	jmp gets_loop
0168+  0639             gets_backspace:
0169+  0639 7F          	dec d
0170+  063A 0A 0F 06    	jmp gets_loop
0171+  063D             gets_telnet_escape:
0172+  063D FD 0C       	sti
0173+  063F 19 01       	mov al, 1
0174+  0641 05 03       	syscall sys_io				; receive in AH without echo
0175+  0643 B9 00       	cmp al, 0					; check error code (AL)
0176+  0645 C6 3D 06    	je gets_telnet_escape		; if no char received, retry
0177+  0648 76 5B       	cmp ah, '['
0178+  064A C7 0F 06    	jne gets_loop
0179+  064D             gets_telnet_escape_phase2:
0180+  064D FD 0C       	sti
0181+  064F 19 01       	mov al, 1
0182+  0651 05 03       	syscall sys_io					; receive in AH without echo
0183+  0653 B9 00       	cmp al, 0						; check error code (AL)
0184+  0655 C6 4D 06    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0658 76 44       	cmp ah, 'D'
0186+  065A C6 65 06    	je gets_left_arrow
0187+  065D 76 43       	cmp ah, 'C'
0188+  065F C6 69 06    	je gets_right_arrow
0189+  0662 0A 0F 06    	jmp gets_loop
0190+  0665             gets_left_arrow:
0191+  0665 7F          	dec d
0192+  0666 0A 0F 06    	jmp gets_loop
0193+  0669             gets_right_arrow:
0194+  0669 79          	inc d
0195+  066A 0A 0F 06    	jmp gets_loop
0196+  066D             gets_escape:
0197+  066D FD 0C       	sti
0198+  066F 19 01       	mov al, 1
0199+  0671 05 03       	syscall sys_io			; receive in AH
0200+  0673 B9 00       	cmp al, 0				; check error code (AL)
0201+  0675 C6 6D 06    	je gets_escape			; if no char received, retry
0202+  0678 76 6E       	cmp ah, 'n'
0203+  067A C6 88 06    	je gets_LF
0204+  067D 76 72       	cmp ah, 'r'
0205+  067F C6 8F 06    	je gets_CR
0206+  0682 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0683 3E          	mov [d], al
0208+  0684 79          	inc d
0209+  0685 0A 0F 06    	jmp gets_loop
0210+  0688             gets_LF:
0211+  0688 19 0A       	mov al, $0A
0212+  068A 3E          	mov [d], al
0213+  068B 79          	inc d
0214+  068C 0A 0F 06    	jmp gets_loop
0215+  068F             gets_CR:
0216+  068F 19 0D       	mov al, $0D
0217+  0691 3E          	mov [d], al
0218+  0692 79          	inc d
0219+  0693 0A 0F 06    	jmp gets_loop
0220+  0696             gets_end:
0221+  0696 19 00       	mov al, 0
0222+  0698 3E          	mov [d], al				; terminate string
0223+  0699 E7          	pop d
0224+  069A E4          	pop a
0225+  069B 09          	ret
0226+  069C             
0227+  069C             
0228+  069C             
0229+  069C             
0230+  069C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  069C             ;; INPUT TEXT
0232+  069C             ;; terminated with CTRL+D
0233+  069C             ;; pointer in D
0234+  069C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  069C             gettxt:
0236+  069C D7          	push a
0237+  069D DA          	push d
0238+  069E             gettxt_loop:
0239+  069E 19 01       	mov al, 1
0240+  06A0 05 03       	syscall sys_io			; receive in AH
0241+  06A2 B9 00       	cmp al, 0				; check error code (AL)
0242+  06A4 C6 9E 06    	je gettxt_loop		; if no char received, retry
0243+  06A7 76 04       	cmp ah, 4			; EOT
0244+  06A9 C6 E7 06    	je gettxt_end
0245+  06AC 76 08       	cmp ah, $08			; check for backspace
0246+  06AE C6 E3 06    	je gettxt_backspace
0247+  06B1 76 5C       	cmp ah, $5C				; '\\'
0248+  06B3 C6 BC 06    	je gettxt_escape
0249+  06B6 1A          	mov al, ah
0250+  06B7 3E          	mov [d], al
0251+  06B8 79          	inc d
0252+  06B9 0A 9E 06    	jmp gettxt_loop
0253+  06BC             gettxt_escape:
0254+  06BC 19 01       	mov al, 1
0255+  06BE 05 03       	syscall sys_io			; receive in AH
0256+  06C0 B9 00       	cmp al, 0				; check error code (AL)
0257+  06C2 C6 BC 06    	je gettxt_escape		; if no char received, retry
0258+  06C5 76 6E       	cmp ah, 'n'
0259+  06C7 C6 D5 06    	je gettxt_LF
0260+  06CA 76 72       	cmp ah, 'r'
0261+  06CC C6 DC 06    	je gettxt_CR
0262+  06CF 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  06D0 3E          	mov [d], al
0264+  06D1 79          	inc d
0265+  06D2 0A 9E 06    	jmp gettxt_loop
0266+  06D5             gettxt_LF:
0267+  06D5 19 0A       	mov al, $0A
0268+  06D7 3E          	mov [d], al
0269+  06D8 79          	inc d
0270+  06D9 0A 9E 06    	jmp gettxt_loop
0271+  06DC             gettxt_CR:
0272+  06DC 19 0D       	mov al, $0D
0273+  06DE 3E          	mov [d], al
0274+  06DF 79          	inc d
0275+  06E0 0A 9E 06    	jmp gettxt_loop
0276+  06E3             gettxt_backspace:
0277+  06E3 7F          	dec d
0278+  06E4 0A 9E 06    	jmp gettxt_loop
0279+  06E7             gettxt_end:
0280+  06E7 19 00       	mov al, 0
0281+  06E9 3E          	mov [d], al				; terminate string
0282+  06EA E7          	pop d
0283+  06EB E4          	pop a
0284+  06EC 09          	ret
0285+  06ED             
0286+  06ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  06ED             ; PRINT NEW LINE
0288+  06ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  06ED             printnl:
0290+  06ED D7          	push a
0291+  06EE 10 00 0A    	mov a, $0A00
0292+  06F1 05 03       	syscall sys_io
0293+  06F3 10 00 0D    	mov a, $0D00
0294+  06F6 05 03       	syscall sys_io
0295+  06F8 E4          	pop a
0296+  06F9 09          	ret
0297+  06FA             
0298+  06FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  06FA             ; strtoint
0300+  06FA             ; 4 digit hex string number in d
0301+  06FA             ; integer returned in A
0302+  06FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  06FA             strtointx:
0304+  06FA D8          	push b
0305+  06FB 32          	mov bl, [d]
0306+  06FC 37          	mov bh, bl
0307+  06FD 33 01 00    	mov bl, [d + 1]
0308+  0700 07 BB 05    	call atoi				; convert to int in AL
0309+  0703 23          	mov ah, al				; move to AH
0310+  0704 33 02 00    	mov bl, [d + 2]
0311+  0707 37          	mov bh, bl
0312+  0708 33 03 00    	mov bl, [d + 3]
0313+  070B 07 BB 05    	call atoi				; convert to int in AL
0314+  070E E5          	pop b
0315+  070F 09          	ret
0316+  0710             
0317+  0710             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0710             ; strtoint
0319+  0710             ; 5 digit base10 string number in d
0320+  0710             ; integer returned in A
0321+  0710             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0710             strtoint:
0323+  0710 E2          	push si
0324+  0711 D8          	push b
0325+  0712 D9          	push c
0326+  0713 DA          	push d
0327+  0714 07 3B 05    	call strlen			; get string length in C
0328+  0717 7E          	dec c
0329+  0718 FD 4E       	mov si, d
0330+  071A 12          	mov a, c
0331+  071B FD 99       	shl a
0332+  071D 3B A3 05    	mov d, table_power
0333+  0720 59          	add d, a
0334+  0721 38 00 00    	mov c, 0
0335+  0724             strtoint_L0:
0336+  0724 F6          	lodsb			; load ASCII to al
0337+  0725 B9 00       	cmp al, 0
0338+  0727 C6 3A 07    	je strtoint_end
0339+  072A 6F 30       	sub al, $30		; make into integer
0340+  072C 22 00       	mov ah, 0
0341+  072E 2A          	mov b, [d]
0342+  072F AC          	mul a, b			; result in B since it fits in 16bits
0343+  0730 11          	mov a, b
0344+  0731 28          	mov b, c
0345+  0732 54          	add a, b
0346+  0733 39          	mov c, a
0347+  0734 63 02 00    	sub d, 2
0348+  0737 0A 24 07    	jmp strtoint_L0
0349+  073A             strtoint_end:
0350+  073A 12          	mov a, c
0351+  073B E7          	pop d
0352+  073C E6          	pop c
0353+  073D E5          	pop b
0354+  073E EF          	pop si
0355+  073F 09          	ret
0356+  0740             
0357+  0740             
0358+  0740             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0740             ; PRINT NULL TERMINATED STRING
0360+  0740             ; pointer in D
0361+  0740             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0740             puts:
0363+  0740 D7          	push a
0364+  0741 DA          	push d
0365+  0742             puts_L1:
0366+  0742 1E          	mov al, [d]
0367+  0743 B9 00       	cmp al, 0
0368+  0745 C6 51 07    	jz puts_END
0369+  0748 23          	mov ah, al
0370+  0749 19 00       	mov al, 0
0371+  074B 05 03       	syscall sys_io
0372+  074D 79          	inc d
0373+  074E 0A 42 07    	jmp puts_L1
0374+  0751             puts_END:
0375+  0751 E7          	pop d
0376+  0752 E4          	pop a
0377+  0753 09          	ret
0378+  0754             
0379+  0754             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0754             ; PRINT N SIZE STRING
0381+  0754             ; pointer in D
0382+  0754             ; size in C
0383+  0754             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0754             putsn:
0385+  0754 DB          	push al
0386+  0755 DA          	push d
0387+  0756 D9          	push c
0388+  0757             putsn_L0:
0389+  0757 1E          	mov al, [d]
0390+  0758 23          	mov ah, al
0391+  0759 19 00       	mov al, 0
0392+  075B 05 03       	syscall sys_io
0393+  075D 79          	inc d
0394+  075E 7E          	dec c	
0395+  075F C2 00 00    	cmp c, 0
0396+  0762 C7 57 07    	jne putsn_L0
0397+  0765             putsn_end:
0398+  0765 E6          	pop c
0399+  0766 E7          	pop d
0400+  0767 E8          	pop al
0401+  0768 09          	ret
0402+  0769             
0403+  0769             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0769             ; print 16bit decimal number
0405+  0769             ; input number in A
0406+  0769             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0769             print_u16d:
0408+  0769 D7          	push a
0409+  076A D8          	push b
0410+  076B 26 10 27    	mov b, 10000
0411+  076E AE          	div a, b			; get 10000 coeff.
0412+  076F 07 95 07    	call print_number
0413+  0772 11          	mov a, b
0414+  0773 26 E8 03    	mov b, 1000
0415+  0776 AE          	div a, b			; get 10000 coeff.
0416+  0777 07 95 07    	call print_number
0417+  077A 11          	mov a, b
0418+  077B 26 64 00    	mov b, 100
0419+  077E AE          	div a, b
0420+  077F 07 95 07    	call print_number
0421+  0782 11          	mov a, b
0422+  0783 26 0A 00    	mov b, 10
0423+  0786 AE          	div a, b
0424+  0787 07 95 07    	call print_number
0425+  078A 11          	mov a, b
0426+  078B 6A 30       	add al, $30
0427+  078D 23          	mov ah, al
0428+  078E 19 00       	mov al, 0
0429+  0790 05 03       	syscall sys_io	; print coeff
0430+  0792 E5          	pop b
0431+  0793 E4          	pop a
0432+  0794 09          	ret
0433+  0795             
0434+  0795             
0435+  0795             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0795             ; if A == 0, print space
0437+  0795             ; else print A
0438+  0795             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  0795             print_number:
0440+  0795 6A 30       	add al, $30
0441+  0797 23          	mov ah, al
0442+  0798 07 06 06    	call putchar
0443+  079B 09          	ret
0444+  079C             
0445+  079C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  079C             ; PRINT 16BIT HEX INTEGER
0447+  079C             ; integer value in reg B
0448+  079C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  079C             print_u16x:
0450+  079C D7          	push a
0451+  079D D8          	push b
0452+  079E DD          	push bl
0453+  079F 30          	mov bl, bh
0454+  07A0 07 CD 05    	call itoa				; convert bh to char in A
0455+  07A3 2F          	mov bl, al				; save al
0456+  07A4 19 00       	mov al, 0
0457+  07A6 05 03       	syscall sys_io				; display AH
0458+  07A8 24          	mov ah, bl				; retrieve al
0459+  07A9 19 00       	mov al, 0
0460+  07AB 05 03       	syscall sys_io				; display AL
0461+  07AD             
0462+  07AD EA          	pop bl
0463+  07AE 07 CD 05    	call itoa				; convert bh to char in A
0464+  07B1 2F          	mov bl, al				; save al
0465+  07B2 19 00       	mov al, 0
0466+  07B4 05 03       	syscall sys_io				; display AH
0467+  07B6 24          	mov ah, bl				; retrieve al
0468+  07B7 19 00       	mov al, 0
0469+  07B9 05 03       	syscall sys_io				; display AL
0470+  07BB             
0471+  07BB E5          	pop b
0472+  07BC E4          	pop a
0473+  07BD 09          	ret
0474+  07BE             
0475+  07BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  07BE             ; INPUT 16BIT HEX INTEGER
0477+  07BE             ; read 16bit integer into A
0478+  07BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  07BE             scan_u16x:
0480+  07BE F8 10 00    	enter 16
0481+  07C1 D8          	push b
0482+  07C2 DA          	push d
0483+  07C3             
0484+  07C3 FA F1 FF    	lea d, [bp + -15]
0485+  07C6 07 0D 06    	call gets				; get number
0486+  07C9             
0487+  07C9 32          	mov bl, [d]
0488+  07CA 37          	mov bh, bl
0489+  07CB 33 01 00    	mov bl, [d + 1]
0490+  07CE 07 BB 05    	call atoi				; convert to int in AL
0491+  07D1 23          	mov ah, al				; move to AH
0492+  07D2             
0493+  07D2 33 02 00    	mov bl, [d + 2]
0494+  07D5 37          	mov bh, bl
0495+  07D6 33 03 00    	mov bl, [d + 3]
0496+  07D9 07 BB 05    	call atoi				; convert to int in AL
0497+  07DC             
0498+  07DC E7          	pop d
0499+  07DD E5          	pop b
0500+  07DE F9          	leave
0501+  07DF 09          	ret
0502+  07E0             
0503+  07E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  07E0             ; PRINT 8bit HEX INTEGER
0505+  07E0             ; integer value in reg bl
0506+  07E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  07E0             print_u8x:
0508+  07E0 D7          	push a
0509+  07E1 DD          	push bl
0510+  07E2             
0511+  07E2 07 CD 05    	call itoa				; convert bl to char in A
0512+  07E5 2F          	mov bl, al				; save al
0513+  07E6 19 00       	mov al, 0
0514+  07E8 05 03       	syscall sys_io				; display AH
0515+  07EA 24          	mov ah, bl				; retrieve al
0516+  07EB 19 00       	mov al, 0
0517+  07ED 05 03       	syscall sys_io				; display AL
0518+  07EF             
0519+  07EF EA          	pop bl
0520+  07F0 E4          	pop a
0521+  07F1 09          	ret
0522+  07F2             
0523+  07F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  07F2             ; print 8bit decimal unsigned number
0525+  07F2             ; input number in AL
0526+  07F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  07F2             print_u8d:
0528+  07F2 D7          	push a
0529+  07F3 D8          	push b
0530+  07F4             
0531+  07F4 22 00       	mov ah, 0
0532+  07F6 26 64 00    	mov b, 100
0533+  07F9 AE          	div a, b
0534+  07FA D8          	push b			; save remainder
0535+  07FB B9 00       	cmp al, 0
0536+  07FD C6 07 08    	je skip100
0537+  0800 6A 30       	add al, $30
0538+  0802 23          	mov ah, al
0539+  0803 19 00       	mov al, 0
0540+  0805 05 03       	syscall sys_io	; print coeff
0541+  0807             skip100:
0542+  0807 E4          	pop a
0543+  0808 22 00       	mov ah, 0
0544+  080A 26 0A 00    	mov b, 10
0545+  080D AE          	div a, b
0546+  080E D8          	push b			; save remainder
0547+  080F B9 00       	cmp al, 0
0548+  0811 C6 1B 08    	je skip10
0549+  0814 6A 30       	add al, $30
0550+  0816 23          	mov ah, al
0551+  0817 19 00       	mov al, 0
0552+  0819 05 03       	syscall sys_io	; print coeff
0553+  081B             skip10:
0554+  081B E4          	pop a
0555+  081C 1B          	mov al, bl
0556+  081D 6A 30       	add al, $30
0557+  081F 23          	mov ah, al
0558+  0820 19 00       	mov al, 0
0559+  0822 05 03       	syscall sys_io	; print coeff
0560+  0824 E5          	pop b
0561+  0825 E4          	pop a
0562+  0826 09          	ret
0563+  0827             
0564+  0827             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0827             ; INPUT 8BIT HEX INTEGER
0566+  0827             ; read 8bit integer into AL
0567+  0827             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0827             scan_u8x:
0569+  0827 F8 04 00    	enter 4
0570+  082A D8          	push b
0571+  082B DA          	push d
0572+  082C             
0573+  082C FA FD FF    	lea d, [bp + -3]
0574+  082F 07 0D 06    	call gets				; get number
0575+  0832             
0576+  0832 32          	mov bl, [d]
0577+  0833 37          	mov bh, bl
0578+  0834 33 01 00    	mov bl, [d + 1]
0579+  0837 07 BB 05    	call atoi				; convert to int in AL
0580+  083A             
0581+  083A E7          	pop d
0582+  083B E5          	pop b
0583+  083C F9          	leave
0584+  083D 09          	ret
0585+  083E             
0586+  083E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  083E             ; input decimal number
0588+  083E             ; result in A
0589+  083E             ; 655'\0'
0590+  083E             ; low--------high
0591+  083E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  083E             scan_u16d:
0593+  083E F8 08 00    	enter 8
0594+  0841 E2          	push si
0595+  0842 D8          	push b
0596+  0843 D9          	push c
0597+  0844 DA          	push d
0598+  0845 FA F9 FF    	lea d, [bp +- 7]
0599+  0848 07 0D 06    	call gets
0600+  084B 07 3B 05    	call strlen			; get string length in C
0601+  084E 7E          	dec c
0602+  084F FD 4E       	mov si, d
0603+  0851 12          	mov a, c
0604+  0852 FD 99       	shl a
0605+  0854 3B A3 05    	mov d, table_power
0606+  0857 59          	add d, a
0607+  0858 38 00 00    	mov c, 0
0608+  085B             mul_loop:
0609+  085B F6          	lodsb			; load ASCII to al
0610+  085C B9 00       	cmp al, 0
0611+  085E C6 71 08    	je mul_exit
0612+  0861 6F 30       	sub al, $30		; make into integer
0613+  0863 22 00       	mov ah, 0
0614+  0865 2A          	mov b, [d]
0615+  0866 AC          	mul a, b			; result in B since it fits in 16bits
0616+  0867 11          	mov a, b
0617+  0868 28          	mov b, c
0618+  0869 54          	add a, b
0619+  086A 39          	mov c, a
0620+  086B 63 02 00    	sub d, 2
0621+  086E 0A 5B 08    	jmp mul_loop
0622+  0871             mul_exit:
0623+  0871 12          	mov a, c
0624+  0872 E7          	pop d
0625+  0873 E6          	pop c
0626+  0874 E5          	pop b
0627+  0875 EF          	pop si
0628+  0876 F9          	leave
0629+  0877 09          	ret
0136   0878             ; --- END INCLUDE BLOCK
0137   0878             
0138   0878             
0139   0878             .end
tasm: Number of errors = 0
