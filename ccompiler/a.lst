0001   0000             ; --- FILENAME: wireworld.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 29 C5 12      mov b, [__grid] ; grid
0012   0408 D7            push a
0013   0409 74            mov d, b
0014   040A DA            push d
0015   040B 26 05 00      mov b, 5
0016   040E E7            pop d
0017   040F 10 50 00      mov a, 80
0018   0412 AC            mul a, b
0019   0413 5A            add d, b
0020   0414 DA            push d
0021   0415 26 05 00      mov b, 5
0022   0418 E7            pop d
0023   0419 10 02 00      mov a, 2
0024   041C AC            mul a, b
0025   041D 5A            add d, b
0026   041E E4            pop a
0027   041F DA            push d
0028   0420 26 01 00      mov b, 1; CONDUCTOR
0029   0423 E7            pop d
0030   0424 FD 43         mov [d], b
0031   0426 29 C5 12      mov b, [__grid] ; grid
0032   0429 D7            push a
0033   042A 74            mov d, b
0034   042B DA            push d
0035   042C 26 06 00      mov b, 6
0036   042F E7            pop d
0037   0430 10 50 00      mov a, 80
0038   0433 AC            mul a, b
0039   0434 5A            add d, b
0040   0435 DA            push d
0041   0436 26 05 00      mov b, 5
0042   0439 E7            pop d
0043   043A 10 02 00      mov a, 2
0044   043D AC            mul a, b
0045   043E 5A            add d, b
0046   043F E4            pop a
0047   0440 DA            push d
0048   0441 26 02 00      mov b, 2; ELECTRON_HEAD
0049   0444 E7            pop d
0050   0445 FD 43         mov [d], b
0051   0447 29 C5 12      mov b, [__grid] ; grid
0052   044A D7            push a
0053   044B 74            mov d, b
0054   044C DA            push d
0055   044D 26 07 00      mov b, 7
0056   0450 E7            pop d
0057   0451 10 50 00      mov a, 80
0058   0454 AC            mul a, b
0059   0455 5A            add d, b
0060   0456 DA            push d
0061   0457 26 05 00      mov b, 5
0062   045A E7            pop d
0063   045B 10 02 00      mov a, 2
0064   045E AC            mul a, b
0065   045F 5A            add d, b
0066   0460 E4            pop a
0067   0461 DA            push d
0068   0462 26 01 00      mov b, 1; CONDUCTOR
0069   0465 E7            pop d
0070   0466 FD 43         mov [d], b
0071   0468 29 C5 12      mov b, [__grid] ; grid
0072   046B D7            push a
0073   046C 74            mov d, b
0074   046D DA            push d
0075   046E 26 06 00      mov b, 6
0076   0471 E7            pop d
0077   0472 10 50 00      mov a, 80
0078   0475 AC            mul a, b
0079   0476 5A            add d, b
0080   0477 DA            push d
0081   0478 26 06 00      mov b, 6
0082   047B E7            pop d
0083   047C 10 02 00      mov a, 2
0084   047F AC            mul a, b
0085   0480 5A            add d, b
0086   0481 E4            pop a
0087   0482 DA            push d
0088   0483 26 03 00      mov b, 3; ELECTRON_TAIL
0089   0486 E7            pop d
0090   0487 FD 43         mov [d], b
0091   0489 29 C5 12      mov b, [__grid] ; grid
0092   048C D7            push a
0093   048D 74            mov d, b
0094   048E DA            push d
0095   048F 26 06 00      mov b, 6
0096   0492 E7            pop d
0097   0493 10 50 00      mov a, 80
0098   0496 AC            mul a, b
0099   0497 5A            add d, b
0100   0498 DA            push d
0101   0499 26 07 00      mov b, 7
0102   049C E7            pop d
0103   049D 10 02 00      mov a, 2
0104   04A0 AC            mul a, b
0105   04A1 5A            add d, b
0106   04A2 E4            pop a
0107   04A3 DA            push d
0108   04A4 26 01 00      mov b, 1; CONDUCTOR
0109   04A7 E7            pop d
0110   04A8 FD 43         mov [d], b
0111   04AA 29 C5 12      mov b, [__grid] ; grid
0112   04AD D7            push a
0113   04AE 74            mov d, b
0114   04AF DA            push d
0115   04B0 26 05 00      mov b, 5
0116   04B3 E7            pop d
0117   04B4 10 50 00      mov a, 80
0118   04B7 AC            mul a, b
0119   04B8 5A            add d, b
0120   04B9 DA            push d
0121   04BA 26 0A 00      mov b, 10
0122   04BD E7            pop d
0123   04BE 10 02 00      mov a, 2
0124   04C1 AC            mul a, b
0125   04C2 5A            add d, b
0126   04C3 E4            pop a
0127   04C4 DA            push d
0128   04C5 26 01 00      mov b, 1; CONDUCTOR
0129   04C8 E7            pop d
0130   04C9 FD 43         mov [d], b
0131   04CB 29 C5 12      mov b, [__grid] ; grid
0132   04CE D7            push a
0133   04CF 74            mov d, b
0134   04D0 DA            push d
0135   04D1 26 06 00      mov b, 6
0136   04D4 E7            pop d
0137   04D5 10 50 00      mov a, 80
0138   04D8 AC            mul a, b
0139   04D9 5A            add d, b
0140   04DA DA            push d
0141   04DB 26 0A 00      mov b, 10
0142   04DE E7            pop d
0143   04DF 10 02 00      mov a, 2
0144   04E2 AC            mul a, b
0145   04E3 5A            add d, b
0146   04E4 E4            pop a
0147   04E5 DA            push d
0148   04E6 26 02 00      mov b, 2; ELECTRON_HEAD
0149   04E9 E7            pop d
0150   04EA FD 43         mov [d], b
0151   04EC 29 C5 12      mov b, [__grid] ; grid
0152   04EF D7            push a
0153   04F0 74            mov d, b
0154   04F1 DA            push d
0155   04F2 26 07 00      mov b, 7
0156   04F5 E7            pop d
0157   04F6 10 50 00      mov a, 80
0158   04F9 AC            mul a, b
0159   04FA 5A            add d, b
0160   04FB DA            push d
0161   04FC 26 0A 00      mov b, 10
0162   04FF E7            pop d
0163   0500 10 02 00      mov a, 2
0164   0503 AC            mul a, b
0165   0504 5A            add d, b
0166   0505 E4            pop a
0167   0506 DA            push d
0168   0507 26 01 00      mov b, 1; CONDUCTOR
0169   050A E7            pop d
0170   050B FD 43         mov [d], b
0171   050D 29 C5 12      mov b, [__grid] ; grid
0172   0510 D7            push a
0173   0511 74            mov d, b
0174   0512 DA            push d
0175   0513 26 06 00      mov b, 6
0176   0516 E7            pop d
0177   0517 10 50 00      mov a, 80
0178   051A AC            mul a, b
0179   051B 5A            add d, b
0180   051C DA            push d
0181   051D 26 0B 00      mov b, 11
0182   0520 E7            pop d
0183   0521 10 02 00      mov a, 2
0184   0524 AC            mul a, b
0185   0525 5A            add d, b
0186   0526 E4            pop a
0187   0527 DA            push d
0188   0528 26 03 00      mov b, 3; ELECTRON_TAIL
0189   052B E7            pop d
0190   052C FD 43         mov [d], b
0191   052E 29 C5 12      mov b, [__grid] ; grid
0192   0531 D7            push a
0193   0532 74            mov d, b
0194   0533 DA            push d
0195   0534 26 06 00      mov b, 6
0196   0537 E7            pop d
0197   0538 10 50 00      mov a, 80
0198   053B AC            mul a, b
0199   053C 5A            add d, b
0200   053D DA            push d
0201   053E 26 0C 00      mov b, 12
0202   0541 E7            pop d
0203   0542 10 02 00      mov a, 2
0204   0545 AC            mul a, b
0205   0546 5A            add d, b
0206   0547 E4            pop a
0207   0548 DA            push d
0208   0549 26 01 00      mov b, 1; CONDUCTOR
0209   054C E7            pop d
0210   054D FD 43         mov [d], b
0211   054F             _for1_init:
0212   054F 26 08 00      mov b, 8
0213   0552 D7            push a
0214   0553 11            mov a, b
0215   0554 45 FF FF      mov [bp + -1], a ; i
0216   0557 E4            pop a
0217   0558             _for1_cond:
0218   0558 2C FF FF      mov b, [bp + -1] ; i
0219   055B D7            push a
0220   055C 11            mov a, b
0221   055D 26 0E 00      mov b, 14
0222   0560 B0            cmp a, b
0223   0561 0E            lodflgs
0224   0562 2F            mov bl, al
0225   0563 FD 78         mov g, a
0226   0565 FD A2 03      shr al, 3
0227   0568 FD A4 02      shr bl, 2
0228   056B FD 87 01      and bl, %00000001
0229   056E 90            xor al, bl
0230   056F FD 27         mov b, g
0231   0571 FD 87 01      and bl, %00000001
0232   0574 8C            or al, bl ; <= (signed)
0233   0575 22 00         mov ah, 0
0234   0577 27            mov b, a
0235   0578 E4            pop a
0236   0579 C0 00 00      cmp b, 0
0237   057C C6 B2 05      je _for1_exit
0238   057F             _for1_block:
0239   057F 29 C5 12      mov b, [__grid] ; grid
0240   0582 D7            push a
0241   0583 74            mov d, b
0242   0584 DA            push d
0243   0585 26 07 00      mov b, 7
0244   0588 E7            pop d
0245   0589 10 50 00      mov a, 80
0246   058C AC            mul a, b
0247   058D 5A            add d, b
0248   058E DA            push d
0249   058F 2C FF FF      mov b, [bp + -1] ; i
0250   0592 E7            pop d
0251   0593 10 02 00      mov a, 2
0252   0596 AC            mul a, b
0253   0597 5A            add d, b
0254   0598 E4            pop a
0255   0599 DA            push d
0256   059A 26 01 00      mov b, 1; CONDUCTOR
0257   059D E7            pop d
0258   059E FD 43         mov [d], b
0259   05A0             _for1_update:
0260   05A0 2C FF FF      mov b, [bp + -1] ; i
0261   05A3 D7            push a
0262   05A4 11            mov a, b
0263   05A5 FD 77         inc b
0264   05A7 D7            push a
0265   05A8 11            mov a, b
0266   05A9 45 FF FF      mov [bp + -1], a ; i
0267   05AC E4            pop a
0268   05AD 27            mov b, a
0269   05AE E4            pop a
0270   05AF 0A 58 05      jmp _for1_cond
0271   05B2             _for1_exit:
0272   05B2 29 C5 12      mov b, [__grid] ; grid
0273   05B5 D7            push a
0274   05B6 74            mov d, b
0275   05B7 DA            push d
0276   05B8 26 07 00      mov b, 7
0277   05BB E7            pop d
0278   05BC 10 50 00      mov a, 80
0279   05BF AC            mul a, b
0280   05C0 5A            add d, b
0281   05C1 DA            push d
0282   05C2 26 0F 00      mov b, 15
0283   05C5 E7            pop d
0284   05C6 10 02 00      mov a, 2
0285   05C9 AC            mul a, b
0286   05CA 5A            add d, b
0287   05CB E4            pop a
0288   05CC DA            push d
0289   05CD 26 01 00      mov b, 1; CONDUCTOR
0290   05D0 E7            pop d
0291   05D1 FD 43         mov [d], b
0292   05D3 29 C5 12      mov b, [__grid] ; grid
0293   05D6 D7            push a
0294   05D7 74            mov d, b
0295   05D8 DA            push d
0296   05D9 26 06 00      mov b, 6
0297   05DC E7            pop d
0298   05DD 10 50 00      mov a, 80
0299   05E0 AC            mul a, b
0300   05E1 5A            add d, b
0301   05E2 DA            push d
0302   05E3 26 0F 00      mov b, 15
0303   05E6 E7            pop d
0304   05E7 10 02 00      mov a, 2
0305   05EA AC            mul a, b
0306   05EB 5A            add d, b
0307   05EC E4            pop a
0308   05ED DA            push d
0309   05EE 26 03 00      mov b, 3; ELECTRON_TAIL
0310   05F1 E7            pop d
0311   05F2 FD 43         mov [d], b
0312   05F4 29 C5 12      mov b, [__grid] ; grid
0313   05F7 D7            push a
0314   05F8 74            mov d, b
0315   05F9 DA            push d
0316   05FA 26 08 00      mov b, 8
0317   05FD E7            pop d
0318   05FE 10 50 00      mov a, 80
0319   0601 AC            mul a, b
0320   0602 5A            add d, b
0321   0603 DA            push d
0322   0604 26 0F 00      mov b, 15
0323   0607 E7            pop d
0324   0608 10 02 00      mov a, 2
0325   060B AC            mul a, b
0326   060C 5A            add d, b
0327   060D E4            pop a
0328   060E DA            push d
0329   060F 26 03 00      mov b, 3; ELECTRON_TAIL
0330   0612 E7            pop d
0331   0613 FD 43         mov [d], b
0332   0615 29 C5 12      mov b, [__grid] ; grid
0333   0618 D7            push a
0334   0619 74            mov d, b
0335   061A DA            push d
0336   061B 26 06 00      mov b, 6
0337   061E E7            pop d
0338   061F 10 50 00      mov a, 80
0339   0622 AC            mul a, b
0340   0623 5A            add d, b
0341   0624 DA            push d
0342   0625 26 10 00      mov b, 16
0343   0628 E7            pop d
0344   0629 10 02 00      mov a, 2
0345   062C AC            mul a, b
0346   062D 5A            add d, b
0347   062E E4            pop a
0348   062F DA            push d
0349   0630 26 01 00      mov b, 1; CONDUCTOR
0350   0633 E7            pop d
0351   0634 FD 43         mov [d], b
0352   0636 29 C5 12      mov b, [__grid] ; grid
0353   0639 D7            push a
0354   063A 74            mov d, b
0355   063B DA            push d
0356   063C 26 08 00      mov b, 8
0357   063F E7            pop d
0358   0640 10 50 00      mov a, 80
0359   0643 AC            mul a, b
0360   0644 5A            add d, b
0361   0645 DA            push d
0362   0646 26 10 00      mov b, 16
0363   0649 E7            pop d
0364   064A 10 02 00      mov a, 2
0365   064D AC            mul a, b
0366   064E 5A            add d, b
0367   064F E4            pop a
0368   0650 DA            push d
0369   0651 26 01 00      mov b, 1; CONDUCTOR
0370   0654 E7            pop d
0371   0655 FD 43         mov [d], b
0372   0657             _for2_init:
0373   0657 26 11 00      mov b, 17
0374   065A D7            push a
0375   065B 11            mov a, b
0376   065C 45 FF FF      mov [bp + -1], a ; i
0377   065F E4            pop a
0378   0660             _for2_cond:
0379   0660 2C FF FF      mov b, [bp + -1] ; i
0380   0663 D7            push a
0381   0664 11            mov a, b
0382   0665 26 19 00      mov b, 25
0383   0668 B0            cmp a, b
0384   0669 0E            lodflgs
0385   066A 2F            mov bl, al
0386   066B FD 78         mov g, a
0387   066D FD A2 03      shr al, 3
0388   0670 FD A4 02      shr bl, 2
0389   0673 FD 87 01      and bl, %00000001
0390   0676 90            xor al, bl
0391   0677 FD 27         mov b, g
0392   0679 FD 87 01      and bl, %00000001
0393   067C 8C            or al, bl ; <= (signed)
0394   067D 22 00         mov ah, 0
0395   067F 27            mov b, a
0396   0680 E4            pop a
0397   0681 C0 00 00      cmp b, 0
0398   0684 C6 BA 06      je _for2_exit
0399   0687             _for2_block:
0400   0687 29 C5 12      mov b, [__grid] ; grid
0401   068A D7            push a
0402   068B 74            mov d, b
0403   068C DA            push d
0404   068D 26 07 00      mov b, 7
0405   0690 E7            pop d
0406   0691 10 50 00      mov a, 80
0407   0694 AC            mul a, b
0408   0695 5A            add d, b
0409   0696 DA            push d
0410   0697 2C FF FF      mov b, [bp + -1] ; i
0411   069A E7            pop d
0412   069B 10 02 00      mov a, 2
0413   069E AC            mul a, b
0414   069F 5A            add d, b
0415   06A0 E4            pop a
0416   06A1 DA            push d
0417   06A2 26 01 00      mov b, 1; CONDUCTOR
0418   06A5 E7            pop d
0419   06A6 FD 43         mov [d], b
0420   06A8             _for2_update:
0421   06A8 2C FF FF      mov b, [bp + -1] ; i
0422   06AB D7            push a
0423   06AC 11            mov a, b
0424   06AD FD 77         inc b
0425   06AF D7            push a
0426   06B0 11            mov a, b
0427   06B1 45 FF FF      mov [bp + -1], a ; i
0428   06B4 E4            pop a
0429   06B5 27            mov b, a
0430   06B6 E4            pop a
0431   06B7 0A 60 06      jmp _for2_cond
0432   06BA             _for2_exit:
0433   06BA             _while3_cond:
0434   06BA 26 01 00      mov b, 1
0435   06BD C0 00 00      cmp b, 0
0436   06C0 C6 CC 06      je _while3_exit
0437   06C3             _while3_block:
0438   06C3 07 D2 06      call print_grid
0439   06C6 07 AB 07      call iterate
0440   06C9 0A BA 06      jmp _while3_cond
0441   06CC             _while3_exit:
0442   06CC 26 00 00      mov b, 0
0443   06CF F9            leave
0444   06D0 05 0B         syscall sys_terminate_proc
0445   06D2             
0446   06D2             print_grid:
0447   06D2 D2            push bp
0448   06D3 9B            mov bp, sp
0449   06D4             _for4_init:
0450   06D4 26 00 00      mov b, 0
0451   06D7 FD 42 0B 19   mov [__y], b
0452   06DB             _for4_cond:
0453   06DB 29 0B 19      mov b, [__y] ; y
0454   06DE D7            push a
0455   06DF 11            mov a, b
0456   06E0 26 14 00      mov b, 20
0457   06E3 B0            cmp a, b
0458   06E4 0E            lodflgs
0459   06E5 2F            mov bl, al
0460   06E6 FD A2 03      shr al, 3
0461   06E9 FD A4 02      shr bl, 2
0462   06EC FD 87 01      and bl, %00000001
0463   06EF 90            xor al, bl ; < (signed)
0464   06F0 22 00         mov ah, 0
0465   06F2 27            mov b, a
0466   06F3 E4            pop a
0467   06F4 C0 00 00      cmp b, 0
0468   06F7 C6 A9 07      je _for4_exit
0469   06FA             _for4_block:
0470   06FA             _for5_init:
0471   06FA 26 00 00      mov b, 0
0472   06FD FD 42 09 19   mov [__x], b
0473   0701             _for5_cond:
0474   0701 29 09 19      mov b, [__x] ; x
0475   0704 D7            push a
0476   0705 11            mov a, b
0477   0706 26 28 00      mov b, 40
0478   0709 B0            cmp a, b
0479   070A 0E            lodflgs
0480   070B 2F            mov bl, al
0481   070C FD A2 03      shr al, 3
0482   070F FD A4 02      shr bl, 2
0483   0712 FD 87 01      and bl, %00000001
0484   0715 90            xor al, bl ; < (signed)
0485   0716 22 00         mov ah, 0
0486   0718 27            mov b, a
0487   0719 E4            pop a
0488   071A C0 00 00      cmp b, 0
0489   071D C6 93 07      je _for5_exit
0490   0720             _for5_block:
0491   0720             _switch6_expr:
0492   0720 29 C5 12      mov b, [__grid] ; grid
0493   0723 D7            push a
0494   0724 74            mov d, b
0495   0725 DA            push d
0496   0726 29 0B 19      mov b, [__y] ; y
0497   0729 E7            pop d
0498   072A 10 50 00      mov a, 80
0499   072D AC            mul a, b
0500   072E 5A            add d, b
0501   072F DA            push d
0502   0730 29 09 19      mov b, [__x] ; x
0503   0733 E7            pop d
0504   0734 10 02 00      mov a, 2
0505   0737 AC            mul a, b
0506   0738 5A            add d, b
0507   0739 E4            pop a
0508   073A 2A            mov b, [d]
0509   073B             _switch6_comparisons:
0510   073B C0 00 00      cmp b, 0
0511   073E C6 53 07      je _switch6_case0
0512   0741 C0 01 00      cmp b, 1
0513   0744 C6 5D 07      je _switch6_case1
0514   0747 C0 02 00      cmp b, 2
0515   074A C6 67 07      je _switch6_case2
0516   074D C0 03 00      cmp b, 3
0517   0750 C6 71 07      je _switch6_case3
0518   0753             _switch6_case0:
0519   0753 26 20 00      mov b, $20
0520   0756 FD 3D 17 19   mov [__c], bl
0521   075A 0A 7B 07      jmp _switch6_exit ; case break
0522   075D             _switch6_case1:
0523   075D 26 2A 00      mov b, $2a
0524   0760 FD 3D 17 19   mov [__c], bl
0525   0764 0A 7B 07      jmp _switch6_exit ; case break
0526   0767             _switch6_case2:
0527   0767 26 48 00      mov b, $48
0528   076A FD 3D 17 19   mov [__c], bl
0529   076E 0A 7B 07      jmp _switch6_exit ; case break
0530   0771             _switch6_case3:
0531   0771 26 54 00      mov b, $54
0532   0774 FD 3D 17 19   mov [__c], bl
0533   0778 0A 7B 07      jmp _switch6_exit ; case break
0534   077B             _switch6_exit:
0535   077B 31 17 19      mov bl, [__c] ; c
0536   077E A7 00         mov bh, 0
0537   0780 DD            push bl
0538   0781 07 75 0B      call _putchar
0539   0784 51 01 00      add sp, 1
0540   0787             _for5_update:
0541   0787 29 09 19      mov b, [__x] ; x
0542   078A FD 77         inc b
0543   078C FD 42 09 19   mov [__x], b
0544   0790 0A 01 07      jmp _for5_cond
0545   0793             _for5_exit:
0546   0793 26 0A 00      mov b, $a
0547   0796 DD            push bl
0548   0797 07 75 0B      call _putchar
0549   079A 51 01 00      add sp, 1
0550   079D             _for4_update:
0551   079D 29 0B 19      mov b, [__y] ; y
0552   07A0 FD 77         inc b
0553   07A2 FD 42 0B 19   mov [__y], b
0554   07A6 0A DB 06      jmp _for4_cond
0555   07A9             _for4_exit:
0556   07A9 F9            leave
0557   07AA 09            ret
0558   07AB             
0559   07AB             iterate:
0560   07AB D2            push bp
0561   07AC 9B            mov bp, sp
0562   07AD             _for7_init:
0563   07AD 26 00 00      mov b, 0
0564   07B0 FD 42 0B 19   mov [__y], b
0565   07B4             _for7_cond:
0566   07B4 29 0B 19      mov b, [__y] ; y
0567   07B7 D7            push a
0568   07B8 11            mov a, b
0569   07B9 26 14 00      mov b, 20
0570   07BC B0            cmp a, b
0571   07BD 0E            lodflgs
0572   07BE 2F            mov bl, al
0573   07BF FD A2 03      shr al, 3
0574   07C2 FD A4 02      shr bl, 2
0575   07C5 FD 87 01      and bl, %00000001
0576   07C8 90            xor al, bl ; < (signed)
0577   07C9 22 00         mov ah, 0
0578   07CB 27            mov b, a
0579   07CC E4            pop a
0580   07CD C0 00 00      cmp b, 0
0581   07D0 C6 D6 0A      je _for7_exit
0582   07D3             _for7_block:
0583   07D3             _for8_init:
0584   07D3 26 00 00      mov b, 0
0585   07D6 FD 42 09 19   mov [__x], b
0586   07DA             _for8_cond:
0587   07DA 29 09 19      mov b, [__x] ; x
0588   07DD D7            push a
0589   07DE 11            mov a, b
0590   07DF 26 28 00      mov b, 40
0591   07E2 B0            cmp a, b
0592   07E3 0E            lodflgs
0593   07E4 2F            mov bl, al
0594   07E5 FD A2 03      shr al, 3
0595   07E8 FD A4 02      shr bl, 2
0596   07EB FD 87 01      and bl, %00000001
0597   07EE 90            xor al, bl ; < (signed)
0598   07EF 22 00         mov ah, 0
0599   07F1 27            mov b, a
0600   07F2 E4            pop a
0601   07F3 C0 00 00      cmp b, 0
0602   07F6 C6 CA 0A      je _for8_exit
0603   07F9             _for8_block:
0604   07F9 26 00 00      mov b, 0
0605   07FC FD 42 15 19   mov [__head_count], b
0606   0800             _for9_init:
0607   0800 26 01 00      mov b, 1
0608   0803 FD 97         neg b
0609   0805 FD 42 0F 19   mov [__dy], b
0610   0809             _for9_cond:
0611   0809 29 0F 19      mov b, [__dy] ; dy
0612   080C D7            push a
0613   080D 11            mov a, b
0614   080E 26 01 00      mov b, 1
0615   0811 B0            cmp a, b
0616   0812 0E            lodflgs
0617   0813 2F            mov bl, al
0618   0814 FD 78         mov g, a
0619   0816 FD A2 03      shr al, 3
0620   0819 FD A4 02      shr bl, 2
0621   081C FD 87 01      and bl, %00000001
0622   081F 90            xor al, bl
0623   0820 FD 27         mov b, g
0624   0822 FD 87 01      and bl, %00000001
0625   0825 8C            or al, bl ; <= (signed)
0626   0826 22 00         mov ah, 0
0627   0828 27            mov b, a
0628   0829 E4            pop a
0629   082A C0 00 00      cmp b, 0
0630   082D C6 CA 09      je _for9_exit
0631   0830             _for9_block:
0632   0830             _for10_init:
0633   0830 26 01 00      mov b, 1
0634   0833 FD 97         neg b
0635   0835 FD 42 0D 19   mov [__dx], b
0636   0839             _for10_cond:
0637   0839 29 0D 19      mov b, [__dx] ; dx
0638   083C D7            push a
0639   083D 11            mov a, b
0640   083E 26 01 00      mov b, 1
0641   0841 B0            cmp a, b
0642   0842 0E            lodflgs
0643   0843 2F            mov bl, al
0644   0844 FD 78         mov g, a
0645   0846 FD A2 03      shr al, 3
0646   0849 FD A4 02      shr bl, 2
0647   084C FD 87 01      and bl, %00000001
0648   084F 90            xor al, bl
0649   0850 FD 27         mov b, g
0650   0852 FD 87 01      and bl, %00000001
0651   0855 8C            or al, bl ; <= (signed)
0652   0856 22 00         mov ah, 0
0653   0858 27            mov b, a
0654   0859 E4            pop a
0655   085A C0 00 00      cmp b, 0
0656   085D C6 BA 09      je _for10_exit
0657   0860             _for10_block:
0658   0860             _if11_cond:
0659   0860 29 0D 19      mov b, [__dx] ; dx
0660   0863 D7            push a
0661   0864 11            mov a, b
0662   0865 26 00 00      mov b, 0
0663   0868 B0            cmp a, b
0664   0869 0E            lodflgs
0665   086A 87 01         and al, %00000001 ; ==
0666   086C 22 00         mov ah, 0
0667   086E 27            mov b, a
0668   086F E4            pop a
0669   0870 DB            push al
0670   0871 C0 00 00      cmp b, 0
0671   0874 0E            lodflgs ; transform condition into a single bit
0672   0875 29 0F 19      mov b, [__dy] ; dy
0673   0878 D7            push a
0674   0879 11            mov a, b
0675   087A 26 00 00      mov b, 0
0676   087D B0            cmp a, b
0677   087E 0E            lodflgs
0678   087F 87 01         and al, %00000001 ; ==
0679   0881 22 00         mov ah, 0
0680   0883 27            mov b, a
0681   0884 E4            pop a
0682   0885 DB            push al
0683   0886 C0 00 00      cmp b, 0
0684   0889 0E            lodflgs
0685   088A EA            pop bl ; matches previous 'push al'
0686   088B 8C            or al, bl
0687   088C 8F 01         xor al, %00000001
0688   088E 2F            mov bl, al
0689   088F A7 00         mov bh, 0
0690   0891 E8            pop al
0691   0892 C0 00 00      cmp b, 0
0692   0895 C6 9E 08      je _if11_exit
0693   0898             _if11_true:
0694   0898 0A AA 09      jmp _for10_update ; for continue
0695   089B 0A 9E 08      jmp _if11_exit
0696   089E             _if11_exit:
0697   089E 29 09 19      mov b, [__x] ; x
0698   08A1 D7            push a
0699   08A2 11            mov a, b
0700   08A3 29 0D 19      mov b, [__dx] ; dx
0701   08A6 54            add a, b
0702   08A7 27            mov b, a
0703   08A8 E4            pop a
0704   08A9 FD 42 11 19   mov [__nx], b
0705   08AD 29 0B 19      mov b, [__y] ; y
0706   08B0 D7            push a
0707   08B1 11            mov a, b
0708   08B2 29 0F 19      mov b, [__dy] ; dy
0709   08B5 54            add a, b
0710   08B6 27            mov b, a
0711   08B7 E4            pop a
0712   08B8 FD 42 13 19   mov [__ny], b
0713   08BC             _if12_cond:
0714   08BC 29 11 19      mov b, [__nx] ; nx
0715   08BF D7            push a
0716   08C0 11            mov a, b
0717   08C1 26 00 00      mov b, 0
0718   08C4 B0            cmp a, b
0719   08C5 0E            lodflgs
0720   08C6 2F            mov bl, al
0721   08C7 FD A2 03      shr al, 3
0722   08CA FD A4 02      shr bl, 2
0723   08CD FD 87 01      and bl, %00000001
0724   08D0 90            xor al, bl
0725   08D1 8F 01         xor al, %00000001 ; >= (signed)
0726   08D3 22 00         mov ah, 0
0727   08D5 27            mov b, a
0728   08D6 E4            pop a
0729   08D7 DB            push al
0730   08D8 C0 00 00      cmp b, 0
0731   08DB 0E            lodflgs ; transform condition into a single bit
0732   08DC 29 11 19      mov b, [__nx] ; nx
0733   08DF D7            push a
0734   08E0 11            mov a, b
0735   08E1 26 28 00      mov b, 40
0736   08E4 B0            cmp a, b
0737   08E5 0E            lodflgs
0738   08E6 2F            mov bl, al
0739   08E7 FD A2 03      shr al, 3
0740   08EA FD A4 02      shr bl, 2
0741   08ED FD 87 01      and bl, %00000001
0742   08F0 90            xor al, bl ; < (signed)
0743   08F1 22 00         mov ah, 0
0744   08F3 27            mov b, a
0745   08F4 E4            pop a
0746   08F5 DB            push al
0747   08F6 C0 00 00      cmp b, 0
0748   08F9 0E            lodflgs
0749   08FA EA            pop bl ; matches previous 'push al'
0750   08FB 8C            or al, bl
0751   08FC 8F 01         xor al, %00000001
0752   08FE 2F            mov bl, al
0753   08FF A7 00         mov bh, 0
0754   0901 E8            pop al
0755   0902 DB            push al
0756   0903 C0 00 00      cmp b, 0
0757   0906 0E            lodflgs ; transform condition into a single bit
0758   0907 29 13 19      mov b, [__ny] ; ny
0759   090A D7            push a
0760   090B 11            mov a, b
0761   090C 26 00 00      mov b, 0
0762   090F B0            cmp a, b
0763   0910 0E            lodflgs
0764   0911 2F            mov bl, al
0765   0912 FD A2 03      shr al, 3
0766   0915 FD A4 02      shr bl, 2
0767   0918 FD 87 01      and bl, %00000001
0768   091B 90            xor al, bl
0769   091C 8F 01         xor al, %00000001 ; >= (signed)
0770   091E 22 00         mov ah, 0
0771   0920 27            mov b, a
0772   0921 E4            pop a
0773   0922 DB            push al
0774   0923 C0 00 00      cmp b, 0
0775   0926 0E            lodflgs
0776   0927 EA            pop bl ; matches previous 'push al'
0777   0928 8C            or al, bl
0778   0929 8F 01         xor al, %00000001
0779   092B 2F            mov bl, al
0780   092C A7 00         mov bh, 0
0781   092E E8            pop al
0782   092F DB            push al
0783   0930 C0 00 00      cmp b, 0
0784   0933 0E            lodflgs ; transform condition into a single bit
0785   0934 29 13 19      mov b, [__ny] ; ny
0786   0937 D7            push a
0787   0938 11            mov a, b
0788   0939 26 14 00      mov b, 20
0789   093C B0            cmp a, b
0790   093D 0E            lodflgs
0791   093E 2F            mov bl, al
0792   093F FD A2 03      shr al, 3
0793   0942 FD A4 02      shr bl, 2
0794   0945 FD 87 01      and bl, %00000001
0795   0948 90            xor al, bl ; < (signed)
0796   0949 22 00         mov ah, 0
0797   094B 27            mov b, a
0798   094C E4            pop a
0799   094D DB            push al
0800   094E C0 00 00      cmp b, 0
0801   0951 0E            lodflgs
0802   0952 EA            pop bl ; matches previous 'push al'
0803   0953 8C            or al, bl
0804   0954 8F 01         xor al, %00000001
0805   0956 2F            mov bl, al
0806   0957 A7 00         mov bh, 0
0807   0959 E8            pop al
0808   095A DB            push al
0809   095B C0 00 00      cmp b, 0
0810   095E 0E            lodflgs ; transform condition into a single bit
0811   095F 29 C5 12      mov b, [__grid] ; grid
0812   0962 D7            push a
0813   0963 74            mov d, b
0814   0964 DA            push d
0815   0965 29 13 19      mov b, [__ny] ; ny
0816   0968 E7            pop d
0817   0969 10 50 00      mov a, 80
0818   096C AC            mul a, b
0819   096D 5A            add d, b
0820   096E DA            push d
0821   096F 29 11 19      mov b, [__nx] ; nx
0822   0972 E7            pop d
0823   0973 10 02 00      mov a, 2
0824   0976 AC            mul a, b
0825   0977 5A            add d, b
0826   0978 E4            pop a
0827   0979 2A            mov b, [d]
0828   097A D7            push a
0829   097B 11            mov a, b
0830   097C 26 02 00      mov b, 2; ELECTRON_HEAD
0831   097F B0            cmp a, b
0832   0980 0E            lodflgs
0833   0981 87 01         and al, %00000001 ; ==
0834   0983 22 00         mov ah, 0
0835   0985 27            mov b, a
0836   0986 E4            pop a
0837   0987 DB            push al
0838   0988 C0 00 00      cmp b, 0
0839   098B 0E            lodflgs
0840   098C EA            pop bl ; matches previous 'push al'
0841   098D 8C            or al, bl
0842   098E 8F 01         xor al, %00000001
0843   0990 2F            mov bl, al
0844   0991 A7 00         mov bh, 0
0845   0993 E8            pop al
0846   0994 C0 00 00      cmp b, 0
0847   0997 C6 AA 09      je _if12_exit
0848   099A             _if12_true:
0849   099A 29 15 19      mov b, [__head_count] ; head_count
0850   099D D7            push a
0851   099E 11            mov a, b
0852   099F FD 77         inc b
0853   09A1 FD 42 15 19   mov [__head_count], b
0854   09A5 27            mov b, a
0855   09A6 E4            pop a
0856   09A7 0A AA 09      jmp _if12_exit
0857   09AA             _if12_exit:
0858   09AA             _for10_update:
0859   09AA 29 0D 19      mov b, [__dx] ; dx
0860   09AD D7            push a
0861   09AE 11            mov a, b
0862   09AF FD 77         inc b
0863   09B1 FD 42 0D 19   mov [__dx], b
0864   09B5 27            mov b, a
0865   09B6 E4            pop a
0866   09B7 0A 39 08      jmp _for10_cond
0867   09BA             _for10_exit:
0868   09BA             _for9_update:
0869   09BA 29 0F 19      mov b, [__dy] ; dy
0870   09BD D7            push a
0871   09BE 11            mov a, b
0872   09BF FD 77         inc b
0873   09C1 FD 42 0F 19   mov [__dy], b
0874   09C5 27            mov b, a
0875   09C6 E4            pop a
0876   09C7 0A 09 08      jmp _for9_cond
0877   09CA             _for9_exit:
0878   09CA             _switch13_expr:
0879   09CA 29 C5 12      mov b, [__grid] ; grid
0880   09CD D7            push a
0881   09CE 74            mov d, b
0882   09CF DA            push d
0883   09D0 29 0B 19      mov b, [__y] ; y
0884   09D3 E7            pop d
0885   09D4 10 50 00      mov a, 80
0886   09D7 AC            mul a, b
0887   09D8 5A            add d, b
0888   09D9 DA            push d
0889   09DA 29 09 19      mov b, [__x] ; x
0890   09DD E7            pop d
0891   09DE 10 02 00      mov a, 2
0892   09E1 AC            mul a, b
0893   09E2 5A            add d, b
0894   09E3 E4            pop a
0895   09E4 2A            mov b, [d]
0896   09E5             _switch13_comparisons:
0897   09E5 C0 00 00      cmp b, 0
0898   09E8 C6 FD 09      je _switch13_case0
0899   09EB C0 01 00      cmp b, 1
0900   09EE C6 21 0A      je _switch13_case1
0901   09F1 C0 02 00      cmp b, 2
0902   09F4 C6 76 0A      je _switch13_case2
0903   09F7 C0 03 00      cmp b, 3
0904   09FA C6 9A 0A      je _switch13_case3
0905   09FD             _switch13_case0:
0906   09FD 29 07 19      mov b, [__new_grid] ; new_grid
0907   0A00 D7            push a
0908   0A01 74            mov d, b
0909   0A02 DA            push d
0910   0A03 29 0B 19      mov b, [__y] ; y
0911   0A06 E7            pop d
0912   0A07 10 50 00      mov a, 80
0913   0A0A AC            mul a, b
0914   0A0B 5A            add d, b
0915   0A0C DA            push d
0916   0A0D 29 09 19      mov b, [__x] ; x
0917   0A10 E7            pop d
0918   0A11 10 02 00      mov a, 2
0919   0A14 AC            mul a, b
0920   0A15 5A            add d, b
0921   0A16 E4            pop a
0922   0A17 DA            push d
0923   0A18 26 00 00      mov b, 0; EMPTY
0924   0A1B E7            pop d
0925   0A1C FD 43         mov [d], b
0926   0A1E 0A BE 0A      jmp _switch13_exit ; case break
0927   0A21             _switch13_case1:
0928   0A21 29 07 19      mov b, [__new_grid] ; new_grid
0929   0A24 D7            push a
0930   0A25 74            mov d, b
0931   0A26 DA            push d
0932   0A27 29 0B 19      mov b, [__y] ; y
0933   0A2A E7            pop d
0934   0A2B 10 50 00      mov a, 80
0935   0A2E AC            mul a, b
0936   0A2F 5A            add d, b
0937   0A30 DA            push d
0938   0A31 29 09 19      mov b, [__x] ; x
0939   0A34 E7            pop d
0940   0A35 10 02 00      mov a, 2
0941   0A38 AC            mul a, b
0942   0A39 5A            add d, b
0943   0A3A E4            pop a
0944   0A3B DA            push d
0945   0A3C             _ternary14_cond:
0946   0A3C 29 15 19      mov b, [__head_count] ; head_count
0947   0A3F D7            push a
0948   0A40 11            mov a, b
0949   0A41 26 01 00      mov b, 1
0950   0A44 B0            cmp a, b
0951   0A45 0E            lodflgs
0952   0A46 87 01         and al, %00000001 ; ==
0953   0A48 22 00         mov ah, 0
0954   0A4A 27            mov b, a
0955   0A4B E4            pop a
0956   0A4C D7            push a
0957   0A4D 11            mov a, b
0958   0A4E 29 15 19      mov b, [__head_count] ; head_count
0959   0A51 D7            push a
0960   0A52 11            mov a, b
0961   0A53 26 02 00      mov b, 2
0962   0A56 B0            cmp a, b
0963   0A57 0E            lodflgs
0964   0A58 87 01         and al, %00000001 ; ==
0965   0A5A 22 00         mov ah, 0
0966   0A5C 27            mov b, a
0967   0A5D E4            pop a
0968   0A5E 8A            or a, b
0969   0A5F 27            mov b, a
0970   0A60 E4            pop a
0971   0A61 C0 00 00      cmp b, 0
0972   0A64 C6 6D 0A      je _ternary14_false
0973   0A67             _ternary14_true:
0974   0A67 26 02 00      mov b, 2; ELECTRON_HEAD
0975   0A6A 0A 70 0A      jmp _ternary14_exit
0976   0A6D             _ternary14_false:
0977   0A6D 26 01 00      mov b, 1; CONDUCTOR
0978   0A70             _ternary14_exit:
0979   0A70 E7            pop d
0980   0A71 FD 43         mov [d], b
0981   0A73 0A BE 0A      jmp _switch13_exit ; case break
0982   0A76             _switch13_case2:
0983   0A76 29 07 19      mov b, [__new_grid] ; new_grid
0984   0A79 D7            push a
0985   0A7A 74            mov d, b
0986   0A7B DA            push d
0987   0A7C 29 0B 19      mov b, [__y] ; y
0988   0A7F E7            pop d
0989   0A80 10 50 00      mov a, 80
0990   0A83 AC            mul a, b
0991   0A84 5A            add d, b
0992   0A85 DA            push d
0993   0A86 29 09 19      mov b, [__x] ; x
0994   0A89 E7            pop d
0995   0A8A 10 02 00      mov a, 2
0996   0A8D AC            mul a, b
0997   0A8E 5A            add d, b
0998   0A8F E4            pop a
0999   0A90 DA            push d
1000   0A91 26 03 00      mov b, 3; ELECTRON_TAIL
1001   0A94 E7            pop d
1002   0A95 FD 43         mov [d], b
1003   0A97 0A BE 0A      jmp _switch13_exit ; case break
1004   0A9A             _switch13_case3:
1005   0A9A 29 07 19      mov b, [__new_grid] ; new_grid
1006   0A9D D7            push a
1007   0A9E 74            mov d, b
1008   0A9F DA            push d
1009   0AA0 29 0B 19      mov b, [__y] ; y
1010   0AA3 E7            pop d
1011   0AA4 10 50 00      mov a, 80
1012   0AA7 AC            mul a, b
1013   0AA8 5A            add d, b
1014   0AA9 DA            push d
1015   0AAA 29 09 19      mov b, [__x] ; x
1016   0AAD E7            pop d
1017   0AAE 10 02 00      mov a, 2
1018   0AB1 AC            mul a, b
1019   0AB2 5A            add d, b
1020   0AB3 E4            pop a
1021   0AB4 DA            push d
1022   0AB5 26 01 00      mov b, 1; CONDUCTOR
1023   0AB8 E7            pop d
1024   0AB9 FD 43         mov [d], b
1025   0ABB 0A BE 0A      jmp _switch13_exit ; case break
1026   0ABE             _switch13_exit:
1027   0ABE             _for8_update:
1028   0ABE 29 09 19      mov b, [__x] ; x
1029   0AC1 FD 77         inc b
1030   0AC3 FD 42 09 19   mov [__x], b
1031   0AC7 0A DA 07      jmp _for8_cond
1032   0ACA             _for8_exit:
1033   0ACA             _for7_update:
1034   0ACA 29 0B 19      mov b, [__y] ; y
1035   0ACD FD 77         inc b
1036   0ACF FD 42 0B 19   mov [__y], b
1037   0AD3 0A B4 07      jmp _for7_cond
1038   0AD6             _for7_exit:
1039   0AD6             _for15_init:
1040   0AD6 26 00 00      mov b, 0
1041   0AD9 FD 42 0B 19   mov [__y], b
1042   0ADD             _for15_cond:
1043   0ADD 29 0B 19      mov b, [__y] ; y
1044   0AE0 D7            push a
1045   0AE1 11            mov a, b
1046   0AE2 26 14 00      mov b, 20
1047   0AE5 B0            cmp a, b
1048   0AE6 0E            lodflgs
1049   0AE7 2F            mov bl, al
1050   0AE8 FD A2 03      shr al, 3
1051   0AEB FD A4 02      shr bl, 2
1052   0AEE FD 87 01      and bl, %00000001
1053   0AF1 90            xor al, bl ; < (signed)
1054   0AF2 22 00         mov ah, 0
1055   0AF4 27            mov b, a
1056   0AF5 E4            pop a
1057   0AF6 C0 00 00      cmp b, 0
1058   0AF9 C6 73 0B      je _for15_exit
1059   0AFC             _for15_block:
1060   0AFC             _for16_init:
1061   0AFC 26 00 00      mov b, 0
1062   0AFF FD 42 09 19   mov [__x], b
1063   0B03             _for16_cond:
1064   0B03 29 09 19      mov b, [__x] ; x
1065   0B06 D7            push a
1066   0B07 11            mov a, b
1067   0B08 26 28 00      mov b, 40
1068   0B0B B0            cmp a, b
1069   0B0C 0E            lodflgs
1070   0B0D 2F            mov bl, al
1071   0B0E FD A2 03      shr al, 3
1072   0B11 FD A4 02      shr bl, 2
1073   0B14 FD 87 01      and bl, %00000001
1074   0B17 90            xor al, bl ; < (signed)
1075   0B18 22 00         mov ah, 0
1076   0B1A 27            mov b, a
1077   0B1B E4            pop a
1078   0B1C C0 00 00      cmp b, 0
1079   0B1F C6 67 0B      je _for16_exit
1080   0B22             _for16_block:
1081   0B22 29 C5 12      mov b, [__grid] ; grid
1082   0B25 D7            push a
1083   0B26 74            mov d, b
1084   0B27 DA            push d
1085   0B28 29 0B 19      mov b, [__y] ; y
1086   0B2B E7            pop d
1087   0B2C 10 50 00      mov a, 80
1088   0B2F AC            mul a, b
1089   0B30 5A            add d, b
1090   0B31 DA            push d
1091   0B32 29 09 19      mov b, [__x] ; x
1092   0B35 E7            pop d
1093   0B36 10 02 00      mov a, 2
1094   0B39 AC            mul a, b
1095   0B3A 5A            add d, b
1096   0B3B E4            pop a
1097   0B3C DA            push d
1098   0B3D 29 07 19      mov b, [__new_grid] ; new_grid
1099   0B40 D7            push a
1100   0B41 74            mov d, b
1101   0B42 DA            push d
1102   0B43 29 0B 19      mov b, [__y] ; y
1103   0B46 E7            pop d
1104   0B47 10 50 00      mov a, 80
1105   0B4A AC            mul a, b
1106   0B4B 5A            add d, b
1107   0B4C DA            push d
1108   0B4D 29 09 19      mov b, [__x] ; x
1109   0B50 E7            pop d
1110   0B51 10 02 00      mov a, 2
1111   0B54 AC            mul a, b
1112   0B55 5A            add d, b
1113   0B56 E4            pop a
1114   0B57 2A            mov b, [d]
1115   0B58 E7            pop d
1116   0B59 FD 43         mov [d], b
1117   0B5B             _for16_update:
1118   0B5B 29 09 19      mov b, [__x] ; x
1119   0B5E FD 77         inc b
1120   0B60 FD 42 09 19   mov [__x], b
1121   0B64 0A 03 0B      jmp _for16_cond
1122   0B67             _for16_exit:
1123   0B67             _for15_update:
1124   0B67 29 0B 19      mov b, [__y] ; y
1125   0B6A FD 77         inc b
1126   0B6C FD 42 0B 19   mov [__y], b
1127   0B70 0A DD 0A      jmp _for15_cond
1128   0B73             _for15_exit:
1129   0B73 F9            leave
1130   0B74 09            ret
1131   0B75             
1132   0B75             _putchar:
1133   0B75 D2            push bp
1134   0B76 9B            mov bp, sp
1135   0B77             
1136   0B77             ; --- BEGIN INLINE ASM BLOCK
1137   0B77 20 05 00      mov al, [bp + 5]
1138   0B7A 23            mov ah, al
1139   0B7B 07 2A 1A      call putchar
1140   0B7E             ; --- END INLINE ASM BLOCK
1141   0B7E             
1142   0B7E F9            leave
1143   0B7F 09            ret
1144   0B80             
1145   0B80             print_num:
1146   0B80 D2            push bp
1147   0B81 9B            mov bp, sp
1148   0B82 52 05 00      sub sp, 5 ; digits
1149   0B85 52 02 00      sub sp, 2 ; i
1150   0B88 26 00 00      mov b, 0
1151   0B8B D7            push a
1152   0B8C 11            mov a, b
1153   0B8D 45 FA FF      mov [bp + -6], a ; i
1154   0B90 E4            pop a
1155   0B91             _if17_cond:
1156   0B91 2C 05 00      mov b, [bp + 5] ; num
1157   0B94 D7            push a
1158   0B95 11            mov a, b
1159   0B96 26 00 00      mov b, 0
1160   0B99 B0            cmp a, b
1161   0B9A 0E            lodflgs
1162   0B9B 87 01         and al, %00000001 ; ==
1163   0B9D 22 00         mov ah, 0
1164   0B9F 27            mov b, a
1165   0BA0 E4            pop a
1166   0BA1 C0 00 00      cmp b, 0
1167   0BA4 C6 B6 0B      je _if17_exit
1168   0BA7             _if17_true:
1169   0BA7 26 30 00      mov b, $30
1170   0BAA DD            push bl
1171   0BAB 07 75 0B      call _putchar
1172   0BAE 51 01 00      add sp, 1
1173   0BB1 F9            leave
1174   0BB2 09            ret
1175   0BB3 0A B6 0B      jmp _if17_exit
1176   0BB6             _if17_exit:
1177   0BB6             _while18_cond:
1178   0BB6 2C 05 00      mov b, [bp + 5] ; num
1179   0BB9 D7            push a
1180   0BBA 11            mov a, b
1181   0BBB 26 00 00      mov b, 0
1182   0BBE B0            cmp a, b
1183   0BBF 0E            lodflgs
1184   0BC0 2F            mov bl, al
1185   0BC1 FD 78         mov g, a
1186   0BC3 FD A2 03      shr al, 3
1187   0BC6 FD A4 02      shr bl, 2
1188   0BC9 FD 87 01      and bl, %00000001
1189   0BCC 90            xor al, bl
1190   0BCD FD 27         mov b, g
1191   0BCF FD 87 01      and bl, %00000001
1192   0BD2 8C            or al, bl
1193   0BD3 8F 01         xor al, %00000001 ; > (signed)
1194   0BD5 22 00         mov ah, 0
1195   0BD7 27            mov b, a
1196   0BD8 E4            pop a
1197   0BD9 C0 00 00      cmp b, 0
1198   0BDC C6 2D 0C      je _while18_exit
1199   0BDF             _while18_block:
1200   0BDF FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
1201   0BE2 2D            mov b, d
1202   0BE3 D7            push a
1203   0BE4 74            mov d, b
1204   0BE5 DA            push d
1205   0BE6 2C FA FF      mov b, [bp + -6] ; i
1206   0BE9 E7            pop d
1207   0BEA 10 01 00      mov a, 1
1208   0BED AC            mul a, b
1209   0BEE 5A            add d, b
1210   0BEF E4            pop a
1211   0BF0 DA            push d
1212   0BF1 26 30 00      mov b, $30
1213   0BF4 D7            push a
1214   0BF5 11            mov a, b
1215   0BF6 2C 05 00      mov b, [bp + 5] ; num
1216   0BF9 D7            push a
1217   0BFA 11            mov a, b
1218   0BFB 26 0A 00      mov b, 10
1219   0BFE AE            div a, b
1220   0BFF E4            pop a
1221   0C00 54            add a, b
1222   0C01 27            mov b, a
1223   0C02 E4            pop a
1224   0C03 E7            pop d
1225   0C04 FD 3E         mov [d], bl
1226   0C06 2C 05 00      mov b, [bp + 5] ; num
1227   0C09 D7            push a
1228   0C0A 11            mov a, b
1229   0C0B 26 0A 00      mov b, 10
1230   0C0E AE            div a, b
1231   0C0F FD 78         mov g, a
1232   0C11 11            mov a, b
1233   0C12 FD 27         mov b, g
1234   0C14 E4            pop a
1235   0C15 D7            push a
1236   0C16 11            mov a, b
1237   0C17 45 05 00      mov [bp + 5], a ; num
1238   0C1A E4            pop a
1239   0C1B 2C FA FF      mov b, [bp + -6] ; i
1240   0C1E D7            push a
1241   0C1F 11            mov a, b
1242   0C20 FD 77         inc b
1243   0C22 D7            push a
1244   0C23 11            mov a, b
1245   0C24 45 FA FF      mov [bp + -6], a ; i
1246   0C27 E4            pop a
1247   0C28 27            mov b, a
1248   0C29 E4            pop a
1249   0C2A 0A B6 0B      jmp _while18_cond
1250   0C2D             _while18_exit:
1251   0C2D             _while19_cond:
1252   0C2D 2C FA FF      mov b, [bp + -6] ; i
1253   0C30 D7            push a
1254   0C31 11            mov a, b
1255   0C32 26 00 00      mov b, 0
1256   0C35 B0            cmp a, b
1257   0C36 0E            lodflgs
1258   0C37 2F            mov bl, al
1259   0C38 FD 78         mov g, a
1260   0C3A FD A2 03      shr al, 3
1261   0C3D FD A4 02      shr bl, 2
1262   0C40 FD 87 01      and bl, %00000001
1263   0C43 90            xor al, bl
1264   0C44 FD 27         mov b, g
1265   0C46 FD 87 01      and bl, %00000001
1266   0C49 8C            or al, bl
1267   0C4A 8F 01         xor al, %00000001 ; > (signed)
1268   0C4C 22 00         mov ah, 0
1269   0C4E 27            mov b, a
1270   0C4F E4            pop a
1271   0C50 C0 00 00      cmp b, 0
1272   0C53 C6 83 0C      je _while19_exit
1273   0C56             _while19_block:
1274   0C56 2C FA FF      mov b, [bp + -6] ; i
1275   0C59 D7            push a
1276   0C5A 11            mov a, b
1277   0C5B FD 7D         dec b
1278   0C5D D7            push a
1279   0C5E 11            mov a, b
1280   0C5F 45 FA FF      mov [bp + -6], a ; i
1281   0C62 E4            pop a
1282   0C63 27            mov b, a
1283   0C64 E4            pop a
1284   0C65 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
1285   0C68 2D            mov b, d
1286   0C69 D7            push a
1287   0C6A 74            mov d, b
1288   0C6B DA            push d
1289   0C6C 2C FA FF      mov b, [bp + -6] ; i
1290   0C6F E7            pop d
1291   0C70 10 01 00      mov a, 1
1292   0C73 AC            mul a, b
1293   0C74 5A            add d, b
1294   0C75 E4            pop a
1295   0C76 32            mov bl, [d]
1296   0C77 A7 00         mov bh, 0
1297   0C79 DD            push bl
1298   0C7A 07 75 0B      call _putchar
1299   0C7D 51 01 00      add sp, 1
1300   0C80 0A 2D 0C      jmp _while19_cond
1301   0C83             _while19_exit:
1302   0C83 F9            leave
1303   0C84 09            ret
1304   0C85             ; --- END TEXT BLOCK
1305   0C85             
1306   0C85             ; --- BEGIN DATA BLOCK
1307   0C85 00 00 00 00 __grid_data: .fill 1600, 0
1307   0C89 00 00 00 00 
1307   0C8D 00 00 00 00 
1307   0C91 00 00 00 00 
1307   0C95 00 00 00 00 
1307   0C99 00 00 00 00 
1307   0C9D 00 00 00 00 
1307   0CA1 00 00 00 00 
1307   0CA5 00 00 00 00 
1307   0CA9 00 00 00 00 
1307   0CAD 00 00 00 00 
1307   0CB1 00 00 00 00 
1307   0CB5 00 00 00 00 
1307   0CB9 00 00 00 00 
1307   0CBD 00 00 00 00 
1307   0CC1 00 00 00 00 
1307   0CC5 00 00 00 00 
1307   0CC9 00 00 00 00 
1307   0CCD 00 00 00 00 
1307   0CD1 00 00 00 00 
1307   0CD5 00 00 00 00 
1307   0CD9 00 00 00 00 
1307   0CDD 00 00 00 00 
1307   0CE1 00 00 00 00 
1307   0CE5 00 00 00 00 
1307   0CE9 00 00 00 00 
1307   0CED 00 00 00 00 
1307   0CF1 00 00 00 00 
1307   0CF5 00 00 00 00 
1307   0CF9 00 00 00 00 
1307   0CFD 00 00 00 00 
1307   0D01 00 00 00 00 
1307   0D05 00 00 00 00 
1307   0D09 00 00 00 00 
1307   0D0D 00 00 00 00 
1307   0D11 00 00 00 00 
1307   0D15 00 00 00 00 
1307   0D19 00 00 00 00 
1307   0D1D 00 00 00 00 
1307   0D21 00 00 00 00 
1307   0D25 00 00 00 00 
1307   0D29 00 00 00 00 
1307   0D2D 00 00 00 00 
1307   0D31 00 00 00 00 
1307   0D35 00 00 00 00 
1307   0D39 00 00 00 00 
1307   0D3D 00 00 00 00 
1307   0D41 00 00 00 00 
1307   0D45 00 00 00 00 
1307   0D49 00 00 00 00 
1307   0D4D 00 00 00 00 
1307   0D51 00 00 00 00 
1307   0D55 00 00 00 00 
1307   0D59 00 00 00 00 
1307   0D5D 00 00 00 00 
1307   0D61 00 00 00 00 
1307   0D65 00 00 00 00 
1307   0D69 00 00 00 00 
1307   0D6D 00 00 00 00 
1307   0D71 00 00 00 00 
1307   0D75 00 00 00 00 
1307   0D79 00 00 00 00 
1307   0D7D 00 00 00 00 
1307   0D81 00 00 00 00 
1307   0D85 00 00 00 00 
1307   0D89 00 00 00 00 
1307   0D8D 00 00 00 00 
1307   0D91 00 00 00 00 
1307   0D95 00 00 00 00 
1307   0D99 00 00 00 00 
1307   0D9D 00 00 00 00 
1307   0DA1 00 00 00 00 
1307   0DA5 00 00 00 00 
1307   0DA9 00 00 00 00 
1307   0DAD 00 00 00 00 
1307   0DB1 00 00 00 00 
1307   0DB5 00 00 00 00 
1307   0DB9 00 00 00 00 
1307   0DBD 00 00 00 00 
1307   0DC1 00 00 00 00 
1307   0DC5 00 00 00 00 
1307   0DC9 00 00 00 00 
1307   0DCD 00 00 00 00 
1307   0DD1 00 00 00 00 
1307   0DD5 00 00 00 00 
1307   0DD9 00 00 00 00 
1307   0DDD 00 00 00 00 
1307   0DE1 00 00 00 00 
1307   0DE5 00 00 00 00 
1307   0DE9 00 00 00 00 
1307   0DED 00 00 00 00 
1307   0DF1 00 00 00 00 
1307   0DF5 00 00 00 00 
1307   0DF9 00 00 00 00 
1307   0DFD 00 00 00 00 
1307   0E01 00 00 00 00 
1307   0E05 00 00 00 00 
1307   0E09 00 00 00 00 
1307   0E0D 00 00 00 00 
1307   0E11 00 00 00 00 
1307   0E15 00 00 00 00 
1307   0E19 00 00 00 00 
1307   0E1D 00 00 00 00 
1307   0E21 00 00 00 00 
1307   0E25 00 00 00 00 
1307   0E29 00 00 00 00 
1307   0E2D 00 00 00 00 
1307   0E31 00 00 00 00 
1307   0E35 00 00 00 00 
1307   0E39 00 00 00 00 
1307   0E3D 00 00 00 00 
1307   0E41 00 00 00 00 
1307   0E45 00 00 00 00 
1307   0E49 00 00 00 00 
1307   0E4D 00 00 00 00 
1307   0E51 00 00 00 00 
1307   0E55 00 00 00 00 
1307   0E59 00 00 00 00 
1307   0E5D 00 00 00 00 
1307   0E61 00 00 00 00 
1307   0E65 00 00 00 00 
1307   0E69 00 00 00 00 
1307   0E6D 00 00 00 00 
1307   0E71 00 00 00 00 
1307   0E75 00 00 00 00 
1307   0E79 00 00 00 00 
1307   0E7D 00 00 00 00 
1307   0E81 00 00 00 00 
1307   0E85 00 00 00 00 
1307   0E89 00 00 00 00 
1307   0E8D 00 00 00 00 
1307   0E91 00 00 00 00 
1307   0E95 00 00 00 00 
1307   0E99 00 00 00 00 
1307   0E9D 00 00 00 00 
1307   0EA1 00 00 00 00 
1307   0EA5 00 00 00 00 
1307   0EA9 00 00 00 00 
1307   0EAD 00 00 00 00 
1307   0EB1 00 00 00 00 
1307   0EB5 00 00 00 00 
1307   0EB9 00 00 00 00 
1307   0EBD 00 00 00 00 
1307   0EC1 00 00 00 00 
1307   0EC5 00 00 00 00 
1307   0EC9 00 00 00 00 
1307   0ECD 00 00 00 00 
1307   0ED1 00 00 00 00 
1307   0ED5 00 00 00 00 
1307   0ED9 00 00 00 00 
1307   0EDD 00 00 00 00 
1307   0EE1 00 00 00 00 
1307   0EE5 00 00 00 00 
1307   0EE9 00 00 00 00 
1307   0EED 00 00 00 00 
1307   0EF1 00 00 00 00 
1307   0EF5 00 00 00 00 
1307   0EF9 00 00 00 00 
1307   0EFD 00 00 00 00 
1307   0F01 00 00 00 00 
1307   0F05 00 00 00 00 
1307   0F09 00 00 00 00 
1307   0F0D 00 00 00 00 
1307   0F11 00 00 00 00 
1307   0F15 00 00 00 00 
1307   0F19 00 00 00 00 
1307   0F1D 00 00 00 00 
1307   0F21 00 00 00 00 
1307   0F25 00 00 00 00 
1307   0F29 00 00 00 00 
1307   0F2D 00 00 00 00 
1307   0F31 00 00 00 00 
1307   0F35 00 00 00 00 
1307   0F39 00 00 00 00 
1307   0F3D 00 00 00 00 
1307   0F41 00 00 00 00 
1307   0F45 00 00 00 00 
1307   0F49 00 00 00 00 
1307   0F4D 00 00 00 00 
1307   0F51 00 00 00 00 
1307   0F55 00 00 00 00 
1307   0F59 00 00 00 00 
1307   0F5D 00 00 00 00 
1307   0F61 00 00 00 00 
1307   0F65 00 00 00 00 
1307   0F69 00 00 00 00 
1307   0F6D 00 00 00 00 
1307   0F71 00 00 00 00 
1307   0F75 00 00 00 00 
1307   0F79 00 00 00 00 
1307   0F7D 00 00 00 00 
1307   0F81 00 00 00 00 
1307   0F85 00 00 00 00 
1307   0F89 00 00 00 00 
1307   0F8D 00 00 00 00 
1307   0F91 00 00 00 00 
1307   0F95 00 00 00 00 
1307   0F99 00 00 00 00 
1307   0F9D 00 00 00 00 
1307   0FA1 00 00 00 00 
1307   0FA5 00 00 00 00 
1307   0FA9 00 00 00 00 
1307   0FAD 00 00 00 00 
1307   0FB1 00 00 00 00 
1307   0FB5 00 00 00 00 
1307   0FB9 00 00 00 00 
1307   0FBD 00 00 00 00 
1307   0FC1 00 00 00 00 
1307   0FC5 00 00 00 00 
1307   0FC9 00 00 00 00 
1307   0FCD 00 00 00 00 
1307   0FD1 00 00 00 00 
1307   0FD5 00 00 00 00 
1307   0FD9 00 00 00 00 
1307   0FDD 00 00 00 00 
1307   0FE1 00 00 00 00 
1307   0FE5 00 00 00 00 
1307   0FE9 00 00 00 00 
1307   0FED 00 00 00 00 
1307   0FF1 00 00 00 00 
1307   0FF5 00 00 00 00 
1307   0FF9 00 00 00 00 
1307   0FFD 00 00 00 00 
1307   1001 00 00 00 00 
1307   1005 00 00 00 00 
1307   1009 00 00 00 00 
1307   100D 00 00 00 00 
1307   1011 00 00 00 00 
1307   1015 00 00 00 00 
1307   1019 00 00 00 00 
1307   101D 00 00 00 00 
1307   1021 00 00 00 00 
1307   1025 00 00 00 00 
1307   1029 00 00 00 00 
1307   102D 00 00 00 00 
1307   1031 00 00 00 00 
1307   1035 00 00 00 00 
1307   1039 00 00 00 00 
1307   103D 00 00 00 00 
1307   1041 00 00 00 00 
1307   1045 00 00 00 00 
1307   1049 00 00 00 00 
1307   104D 00 00 00 00 
1307   1051 00 00 00 00 
1307   1055 00 00 00 00 
1307   1059 00 00 00 00 
1307   105D 00 00 00 00 
1307   1061 00 00 00 00 
1307   1065 00 00 00 00 
1307   1069 00 00 00 00 
1307   106D 00 00 00 00 
1307   1071 00 00 00 00 
1307   1075 00 00 00 00 
1307   1079 00 00 00 00 
1307   107D 00 00 00 00 
1307   1081 00 00 00 00 
1307   1085 00 00 00 00 
1307   1089 00 00 00 00 
1307   108D 00 00 00 00 
1307   1091 00 00 00 00 
1307   1095 00 00 00 00 
1307   1099 00 00 00 00 
1307   109D 00 00 00 00 
1307   10A1 00 00 00 00 
1307   10A5 00 00 00 00 
1307   10A9 00 00 00 00 
1307   10AD 00 00 00 00 
1307   10B1 00 00 00 00 
1307   10B5 00 00 00 00 
1307   10B9 00 00 00 00 
1307   10BD 00 00 00 00 
1307   10C1 00 00 00 00 
1307   10C5 00 00 00 00 
1307   10C9 00 00 00 00 
1307   10CD 00 00 00 00 
1307   10D1 00 00 00 00 
1307   10D5 00 00 00 00 
1307   10D9 00 00 00 00 
1307   10DD 00 00 00 00 
1307   10E1 00 00 00 00 
1307   10E5 00 00 00 00 
1307   10E9 00 00 00 00 
1307   10ED 00 00 00 00 
1307   10F1 00 00 00 00 
1307   10F5 00 00 00 00 
1307   10F9 00 00 00 00 
1307   10FD 00 00 00 00 
1307   1101 00 00 00 00 
1307   1105 00 00 00 00 
1307   1109 00 00 00 00 
1307   110D 00 00 00 00 
1307   1111 00 00 00 00 
1307   1115 00 00 00 00 
1307   1119 00 00 00 00 
1307   111D 00 00 00 00 
1307   1121 00 00 00 00 
1307   1125 00 00 00 00 
1307   1129 00 00 00 00 
1307   112D 00 00 00 00 
1307   1131 00 00 00 00 
1307   1135 00 00 00 00 
1307   1139 00 00 00 00 
1307   113D 00 00 00 00 
1307   1141 00 00 00 00 
1307   1145 00 00 00 00 
1307   1149 00 00 00 00 
1307   114D 00 00 00 00 
1307   1151 00 00 00 00 
1307   1155 00 00 00 00 
1307   1159 00 00 00 00 
1307   115D 00 00 00 00 
1307   1161 00 00 00 00 
1307   1165 00 00 00 00 
1307   1169 00 00 00 00 
1307   116D 00 00 00 00 
1307   1171 00 00 00 00 
1307   1175 00 00 00 00 
1307   1179 00 00 00 00 
1307   117D 00 00 00 00 
1307   1181 00 00 00 00 
1307   1185 00 00 00 00 
1307   1189 00 00 00 00 
1307   118D 00 00 00 00 
1307   1191 00 00 00 00 
1307   1195 00 00 00 00 
1307   1199 00 00 00 00 
1307   119D 00 00 00 00 
1307   11A1 00 00 00 00 
1307   11A5 00 00 00 00 
1307   11A9 00 00 00 00 
1307   11AD 00 00 00 00 
1307   11B1 00 00 00 00 
1307   11B5 00 00 00 00 
1307   11B9 00 00 00 00 
1307   11BD 00 00 00 00 
1307   11C1 00 00 00 00 
1307   11C5 00 00 00 00 
1307   11C9 00 00 00 00 
1307   11CD 00 00 00 00 
1307   11D1 00 00 00 00 
1307   11D5 00 00 00 00 
1307   11D9 00 00 00 00 
1307   11DD 00 00 00 00 
1307   11E1 00 00 00 00 
1307   11E5 00 00 00 00 
1307   11E9 00 00 00 00 
1307   11ED 00 00 00 00 
1307   11F1 00 00 00 00 
1307   11F5 00 00 00 00 
1307   11F9 00 00 00 00 
1307   11FD 00 00 00 00 
1307   1201 00 00 00 00 
1307   1205 00 00 00 00 
1307   1209 00 00 00 00 
1307   120D 00 00 00 00 
1307   1211 00 00 00 00 
1307   1215 00 00 00 00 
1307   1219 00 00 00 00 
1307   121D 00 00 00 00 
1307   1221 00 00 00 00 
1307   1225 00 00 00 00 
1307   1229 00 00 00 00 
1307   122D 00 00 00 00 
1307   1231 00 00 00 00 
1307   1235 00 00 00 00 
1307   1239 00 00 00 00 
1307   123D 00 00 00 00 
1307   1241 00 00 00 00 
1307   1245 00 00 00 00 
1307   1249 00 00 00 00 
1307   124D 00 00 00 00 
1307   1251 00 00 00 00 
1307   1255 00 00 00 00 
1307   1259 00 00 00 00 
1307   125D 00 00 00 00 
1307   1261 00 00 00 00 
1307   1265 00 00 00 00 
1307   1269 00 00 00 00 
1307   126D 00 00 00 00 
1307   1271 00 00 00 00 
1307   1275 00 00 00 00 
1307   1279 00 00 00 00 
1307   127D 00 00 00 00 
1307   1281 00 00 00 00 
1307   1285 00 00 00 00 
1307   1289 00 00 00 00 
1307   128D 00 00 00 00 
1307   1291 00 00 00 00 
1307   1295 00 00 00 00 
1307   1299 00 00 00 00 
1307   129D 00 00 00 00 
1307   12A1 00 00 00 00 
1307   12A5 00 00 00 00 
1307   12A9 00 00 00 00 
1307   12AD 00 00 00 00 
1307   12B1 00 00 00 00 
1307   12B5 00 00 00 00 
1307   12B9 00 00 00 00 
1307   12BD 00 00 00 00 
1307   12C1 00 00 00 00 
1308   12C5 85 0C       __grid: .dw __grid_data
1309   12C7 00 00 00 00 __new_grid_data: .fill 1600, 0
1309   12CB 00 00 00 00 
1309   12CF 00 00 00 00 
1309   12D3 00 00 00 00 
1309   12D7 00 00 00 00 
1309   12DB 00 00 00 00 
1309   12DF 00 00 00 00 
1309   12E3 00 00 00 00 
1309   12E7 00 00 00 00 
1309   12EB 00 00 00 00 
1309   12EF 00 00 00 00 
1309   12F3 00 00 00 00 
1309   12F7 00 00 00 00 
1309   12FB 00 00 00 00 
1309   12FF 00 00 00 00 
1309   1303 00 00 00 00 
1309   1307 00 00 00 00 
1309   130B 00 00 00 00 
1309   130F 00 00 00 00 
1309   1313 00 00 00 00 
1309   1317 00 00 00 00 
1309   131B 00 00 00 00 
1309   131F 00 00 00 00 
1309   1323 00 00 00 00 
1309   1327 00 00 00 00 
1309   132B 00 00 00 00 
1309   132F 00 00 00 00 
1309   1333 00 00 00 00 
1309   1337 00 00 00 00 
1309   133B 00 00 00 00 
1309   133F 00 00 00 00 
1309   1343 00 00 00 00 
1309   1347 00 00 00 00 
1309   134B 00 00 00 00 
1309   134F 00 00 00 00 
1309   1353 00 00 00 00 
1309   1357 00 00 00 00 
1309   135B 00 00 00 00 
1309   135F 00 00 00 00 
1309   1363 00 00 00 00 
1309   1367 00 00 00 00 
1309   136B 00 00 00 00 
1309   136F 00 00 00 00 
1309   1373 00 00 00 00 
1309   1377 00 00 00 00 
1309   137B 00 00 00 00 
1309   137F 00 00 00 00 
1309   1383 00 00 00 00 
1309   1387 00 00 00 00 
1309   138B 00 00 00 00 
1309   138F 00 00 00 00 
1309   1393 00 00 00 00 
1309   1397 00 00 00 00 
1309   139B 00 00 00 00 
1309   139F 00 00 00 00 
1309   13A3 00 00 00 00 
1309   13A7 00 00 00 00 
1309   13AB 00 00 00 00 
1309   13AF 00 00 00 00 
1309   13B3 00 00 00 00 
1309   13B7 00 00 00 00 
1309   13BB 00 00 00 00 
1309   13BF 00 00 00 00 
1309   13C3 00 00 00 00 
1309   13C7 00 00 00 00 
1309   13CB 00 00 00 00 
1309   13CF 00 00 00 00 
1309   13D3 00 00 00 00 
1309   13D7 00 00 00 00 
1309   13DB 00 00 00 00 
1309   13DF 00 00 00 00 
1309   13E3 00 00 00 00 
1309   13E7 00 00 00 00 
1309   13EB 00 00 00 00 
1309   13EF 00 00 00 00 
1309   13F3 00 00 00 00 
1309   13F7 00 00 00 00 
1309   13FB 00 00 00 00 
1309   13FF 00 00 00 00 
1309   1403 00 00 00 00 
1309   1407 00 00 00 00 
1309   140B 00 00 00 00 
1309   140F 00 00 00 00 
1309   1413 00 00 00 00 
1309   1417 00 00 00 00 
1309   141B 00 00 00 00 
1309   141F 00 00 00 00 
1309   1423 00 00 00 00 
1309   1427 00 00 00 00 
1309   142B 00 00 00 00 
1309   142F 00 00 00 00 
1309   1433 00 00 00 00 
1309   1437 00 00 00 00 
1309   143B 00 00 00 00 
1309   143F 00 00 00 00 
1309   1443 00 00 00 00 
1309   1447 00 00 00 00 
1309   144B 00 00 00 00 
1309   144F 00 00 00 00 
1309   1453 00 00 00 00 
1309   1457 00 00 00 00 
1309   145B 00 00 00 00 
1309   145F 00 00 00 00 
1309   1463 00 00 00 00 
1309   1467 00 00 00 00 
1309   146B 00 00 00 00 
1309   146F 00 00 00 00 
1309   1473 00 00 00 00 
1309   1477 00 00 00 00 
1309   147B 00 00 00 00 
1309   147F 00 00 00 00 
1309   1483 00 00 00 00 
1309   1487 00 00 00 00 
1309   148B 00 00 00 00 
1309   148F 00 00 00 00 
1309   1493 00 00 00 00 
1309   1497 00 00 00 00 
1309   149B 00 00 00 00 
1309   149F 00 00 00 00 
1309   14A3 00 00 00 00 
1309   14A7 00 00 00 00 
1309   14AB 00 00 00 00 
1309   14AF 00 00 00 00 
1309   14B3 00 00 00 00 
1309   14B7 00 00 00 00 
1309   14BB 00 00 00 00 
1309   14BF 00 00 00 00 
1309   14C3 00 00 00 00 
1309   14C7 00 00 00 00 
1309   14CB 00 00 00 00 
1309   14CF 00 00 00 00 
1309   14D3 00 00 00 00 
1309   14D7 00 00 00 00 
1309   14DB 00 00 00 00 
1309   14DF 00 00 00 00 
1309   14E3 00 00 00 00 
1309   14E7 00 00 00 00 
1309   14EB 00 00 00 00 
1309   14EF 00 00 00 00 
1309   14F3 00 00 00 00 
1309   14F7 00 00 00 00 
1309   14FB 00 00 00 00 
1309   14FF 00 00 00 00 
1309   1503 00 00 00 00 
1309   1507 00 00 00 00 
1309   150B 00 00 00 00 
1309   150F 00 00 00 00 
1309   1513 00 00 00 00 
1309   1517 00 00 00 00 
1309   151B 00 00 00 00 
1309   151F 00 00 00 00 
1309   1523 00 00 00 00 
1309   1527 00 00 00 00 
1309   152B 00 00 00 00 
1309   152F 00 00 00 00 
1309   1533 00 00 00 00 
1309   1537 00 00 00 00 
1309   153B 00 00 00 00 
1309   153F 00 00 00 00 
1309   1543 00 00 00 00 
1309   1547 00 00 00 00 
1309   154B 00 00 00 00 
1309   154F 00 00 00 00 
1309   1553 00 00 00 00 
1309   1557 00 00 00 00 
1309   155B 00 00 00 00 
1309   155F 00 00 00 00 
1309   1563 00 00 00 00 
1309   1567 00 00 00 00 
1309   156B 00 00 00 00 
1309   156F 00 00 00 00 
1309   1573 00 00 00 00 
1309   1577 00 00 00 00 
1309   157B 00 00 00 00 
1309   157F 00 00 00 00 
1309   1583 00 00 00 00 
1309   1587 00 00 00 00 
1309   158B 00 00 00 00 
1309   158F 00 00 00 00 
1309   1593 00 00 00 00 
1309   1597 00 00 00 00 
1309   159B 00 00 00 00 
1309   159F 00 00 00 00 
1309   15A3 00 00 00 00 
1309   15A7 00 00 00 00 
1309   15AB 00 00 00 00 
1309   15AF 00 00 00 00 
1309   15B3 00 00 00 00 
1309   15B7 00 00 00 00 
1309   15BB 00 00 00 00 
1309   15BF 00 00 00 00 
1309   15C3 00 00 00 00 
1309   15C7 00 00 00 00 
1309   15CB 00 00 00 00 
1309   15CF 00 00 00 00 
1309   15D3 00 00 00 00 
1309   15D7 00 00 00 00 
1309   15DB 00 00 00 00 
1309   15DF 00 00 00 00 
1309   15E3 00 00 00 00 
1309   15E7 00 00 00 00 
1309   15EB 00 00 00 00 
1309   15EF 00 00 00 00 
1309   15F3 00 00 00 00 
1309   15F7 00 00 00 00 
1309   15FB 00 00 00 00 
1309   15FF 00 00 00 00 
1309   1603 00 00 00 00 
1309   1607 00 00 00 00 
1309   160B 00 00 00 00 
1309   160F 00 00 00 00 
1309   1613 00 00 00 00 
1309   1617 00 00 00 00 
1309   161B 00 00 00 00 
1309   161F 00 00 00 00 
1309   1623 00 00 00 00 
1309   1627 00 00 00 00 
1309   162B 00 00 00 00 
1309   162F 00 00 00 00 
1309   1633 00 00 00 00 
1309   1637 00 00 00 00 
1309   163B 00 00 00 00 
1309   163F 00 00 00 00 
1309   1643 00 00 00 00 
1309   1647 00 00 00 00 
1309   164B 00 00 00 00 
1309   164F 00 00 00 00 
1309   1653 00 00 00 00 
1309   1657 00 00 00 00 
1309   165B 00 00 00 00 
1309   165F 00 00 00 00 
1309   1663 00 00 00 00 
1309   1667 00 00 00 00 
1309   166B 00 00 00 00 
1309   166F 00 00 00 00 
1309   1673 00 00 00 00 
1309   1677 00 00 00 00 
1309   167B 00 00 00 00 
1309   167F 00 00 00 00 
1309   1683 00 00 00 00 
1309   1687 00 00 00 00 
1309   168B 00 00 00 00 
1309   168F 00 00 00 00 
1309   1693 00 00 00 00 
1309   1697 00 00 00 00 
1309   169B 00 00 00 00 
1309   169F 00 00 00 00 
1309   16A3 00 00 00 00 
1309   16A7 00 00 00 00 
1309   16AB 00 00 00 00 
1309   16AF 00 00 00 00 
1309   16B3 00 00 00 00 
1309   16B7 00 00 00 00 
1309   16BB 00 00 00 00 
1309   16BF 00 00 00 00 
1309   16C3 00 00 00 00 
1309   16C7 00 00 00 00 
1309   16CB 00 00 00 00 
1309   16CF 00 00 00 00 
1309   16D3 00 00 00 00 
1309   16D7 00 00 00 00 
1309   16DB 00 00 00 00 
1309   16DF 00 00 00 00 
1309   16E3 00 00 00 00 
1309   16E7 00 00 00 00 
1309   16EB 00 00 00 00 
1309   16EF 00 00 00 00 
1309   16F3 00 00 00 00 
1309   16F7 00 00 00 00 
1309   16FB 00 00 00 00 
1309   16FF 00 00 00 00 
1309   1703 00 00 00 00 
1309   1707 00 00 00 00 
1309   170B 00 00 00 00 
1309   170F 00 00 00 00 
1309   1713 00 00 00 00 
1309   1717 00 00 00 00 
1309   171B 00 00 00 00 
1309   171F 00 00 00 00 
1309   1723 00 00 00 00 
1309   1727 00 00 00 00 
1309   172B 00 00 00 00 
1309   172F 00 00 00 00 
1309   1733 00 00 00 00 
1309   1737 00 00 00 00 
1309   173B 00 00 00 00 
1309   173F 00 00 00 00 
1309   1743 00 00 00 00 
1309   1747 00 00 00 00 
1309   174B 00 00 00 00 
1309   174F 00 00 00 00 
1309   1753 00 00 00 00 
1309   1757 00 00 00 00 
1309   175B 00 00 00 00 
1309   175F 00 00 00 00 
1309   1763 00 00 00 00 
1309   1767 00 00 00 00 
1309   176B 00 00 00 00 
1309   176F 00 00 00 00 
1309   1773 00 00 00 00 
1309   1777 00 00 00 00 
1309   177B 00 00 00 00 
1309   177F 00 00 00 00 
1309   1783 00 00 00 00 
1309   1787 00 00 00 00 
1309   178B 00 00 00 00 
1309   178F 00 00 00 00 
1309   1793 00 00 00 00 
1309   1797 00 00 00 00 
1309   179B 00 00 00 00 
1309   179F 00 00 00 00 
1309   17A3 00 00 00 00 
1309   17A7 00 00 00 00 
1309   17AB 00 00 00 00 
1309   17AF 00 00 00 00 
1309   17B3 00 00 00 00 
1309   17B7 00 00 00 00 
1309   17BB 00 00 00 00 
1309   17BF 00 00 00 00 
1309   17C3 00 00 00 00 
1309   17C7 00 00 00 00 
1309   17CB 00 00 00 00 
1309   17CF 00 00 00 00 
1309   17D3 00 00 00 00 
1309   17D7 00 00 00 00 
1309   17DB 00 00 00 00 
1309   17DF 00 00 00 00 
1309   17E3 00 00 00 00 
1309   17E7 00 00 00 00 
1309   17EB 00 00 00 00 
1309   17EF 00 00 00 00 
1309   17F3 00 00 00 00 
1309   17F7 00 00 00 00 
1309   17FB 00 00 00 00 
1309   17FF 00 00 00 00 
1309   1803 00 00 00 00 
1309   1807 00 00 00 00 
1309   180B 00 00 00 00 
1309   180F 00 00 00 00 
1309   1813 00 00 00 00 
1309   1817 00 00 00 00 
1309   181B 00 00 00 00 
1309   181F 00 00 00 00 
1309   1823 00 00 00 00 
1309   1827 00 00 00 00 
1309   182B 00 00 00 00 
1309   182F 00 00 00 00 
1309   1833 00 00 00 00 
1309   1837 00 00 00 00 
1309   183B 00 00 00 00 
1309   183F 00 00 00 00 
1309   1843 00 00 00 00 
1309   1847 00 00 00 00 
1309   184B 00 00 00 00 
1309   184F 00 00 00 00 
1309   1853 00 00 00 00 
1309   1857 00 00 00 00 
1309   185B 00 00 00 00 
1309   185F 00 00 00 00 
1309   1863 00 00 00 00 
1309   1867 00 00 00 00 
1309   186B 00 00 00 00 
1309   186F 00 00 00 00 
1309   1873 00 00 00 00 
1309   1877 00 00 00 00 
1309   187B 00 00 00 00 
1309   187F 00 00 00 00 
1309   1883 00 00 00 00 
1309   1887 00 00 00 00 
1309   188B 00 00 00 00 
1309   188F 00 00 00 00 
1309   1893 00 00 00 00 
1309   1897 00 00 00 00 
1309   189B 00 00 00 00 
1309   189F 00 00 00 00 
1309   18A3 00 00 00 00 
1309   18A7 00 00 00 00 
1309   18AB 00 00 00 00 
1309   18AF 00 00 00 00 
1309   18B3 00 00 00 00 
1309   18B7 00 00 00 00 
1309   18BB 00 00 00 00 
1309   18BF 00 00 00 00 
1309   18C3 00 00 00 00 
1309   18C7 00 00 00 00 
1309   18CB 00 00 00 00 
1309   18CF 00 00 00 00 
1309   18D3 00 00 00 00 
1309   18D7 00 00 00 00 
1309   18DB 00 00 00 00 
1309   18DF 00 00 00 00 
1309   18E3 00 00 00 00 
1309   18E7 00 00 00 00 
1309   18EB 00 00 00 00 
1309   18EF 00 00 00 00 
1309   18F3 00 00 00 00 
1309   18F7 00 00 00 00 
1309   18FB 00 00 00 00 
1309   18FF 00 00 00 00 
1309   1903 00 00 00 00 
1310   1907 C7 12       __new_grid: .dw __new_grid_data
1311   1909 00 00       __x: .fill 2, 0
1312   190B 00 00       __y: .fill 2, 0
1313   190D 00 00       __dx: .fill 2, 0
1314   190F 00 00       __dy: .fill 2, 0
1315   1911 00 00       __nx: .fill 2, 0
1316   1913 00 00       __ny: .fill 2, 0
1317   1915 00 00       __head_count: .fill 2, 0
1318   1917 00          __c: .fill 1, 0
1319   1918             ; --- END DATA BLOCK
1320   1918             
1321   1918             ; --- BEGIN INCLUDE BLOCK
1322   1918             .include "lib/stdio.asm"
0001+  1918             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1918             ; stdio.s
0003+  1918             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1918             .include "lib/string.asm"
0001++ 1918             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1918             ; string.s
0003++ 1918             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1918             
0005++ 1918             
0006++ 1918             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1918             ; strrev
0008++ 1918             ; reverse a string
0009++ 1918             ; D = string address
0010++ 1918             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1918             ; 01234
0012++ 1918             strrev:
0013++ 1918 4B          	pusha
0014++ 1919 07 5F 19    	call strlen	; length in C
0015++ 191C 12          	mov a, c
0016++ 191D AF 01 00    	cmp a, 1
0017++ 1920 D0 3A 19    	jleu strrev_end	; check string length. string len must be > 1
0018++ 1923 7D          	dec a
0019++ 1924 FD 4E       	mov si, d	; beginning of string
0020++ 1926 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1928 59          	add d, a	; end of string
0022++ 1929 12          	mov a, c
0023++ 192A FD 9B       	shr a		; divide by 2
0024++ 192C 39          	mov c, a	; C now counts the steps
0025++ 192D             strrev_L0:
0026++ 192D 32          	mov bl, [d]	; save load right-side char into BL
0027++ 192E F6          	lodsb		; load left-side char into AL; increase SI
0028++ 192F 3E          	mov [d], al	; store left char into right side
0029++ 1930 1B          	mov al, bl
0030++ 1931 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1932 7E          	dec c
0032++ 1933 7F          	dec d
0033++ 1934 C2 00 00    	cmp c, 0
0034++ 1937 C7 2D 19    	jne strrev_L0
0035++ 193A             strrev_end:
0036++ 193A 4C          	popa
0037++ 193B 09          	ret
0038++ 193C             	
0039++ 193C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 193C             ; strchr
0041++ 193C             ; search string in D for char in AL
0042++ 193C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 193C             strchr:
0044++ 193C             strchr_L0:
0045++ 193C 32          	mov bl, [d]
0046++ 193D C1 00       	cmp bl, 0
0047++ 193F C6 4A 19    	je strchr_end
0048++ 1942 BA          	cmp al, bl
0049++ 1943 C6 4A 19    	je strchr_end
0050++ 1946 79          	inc d
0051++ 1947 0A 3C 19    	jmp strchr_L0
0052++ 194A             strchr_end:
0053++ 194A 1B          	mov al, bl
0054++ 194B 09          	ret
0055++ 194C             
0056++ 194C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 194C             ; strstr
0058++ 194C             ; find sub-string
0059++ 194C             ; str1 in SI
0060++ 194C             ; str2 in DI
0061++ 194C             ; SI points to end of source string
0062++ 194C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 194C             strstr:
0064++ 194C DB          	push al
0065++ 194D DA          	push d
0066++ 194E E3          	push di
0067++ 194F             strstr_loop:
0068++ 194F F3          	cmpsb					; compare a byte of the strings
0069++ 1950 C7 5B 19    	jne strstr_ret
0070++ 1953 FC 00 00    	lea d, [di + 0]
0071++ 1956 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1958 C7 4F 19    	jne strstr_loop				; equal chars but not at end
0073++ 195B             strstr_ret:
0074++ 195B F0          	pop di
0075++ 195C E7          	pop d
0076++ 195D E8          	pop al
0077++ 195E 09          	ret
0078++ 195F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 195F             ; length of null terminated string
0080++ 195F             ; result in C
0081++ 195F             ; pointer in D
0082++ 195F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 195F             strlen:
0084++ 195F DA          	push d
0085++ 1960 38 00 00    	mov c, 0
0086++ 1963             strlen_L1:
0087++ 1963 BD 00       	cmp byte [d], 0
0088++ 1965 C6 6D 19    	je strlen_ret
0089++ 1968 79          	inc d
0090++ 1969 78          	inc c
0091++ 196A 0A 63 19    	jmp strlen_L1
0092++ 196D             strlen_ret:
0093++ 196D E7          	pop d
0094++ 196E 09          	ret
0095++ 196F             
0096++ 196F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 196F             ; STRCMP
0098++ 196F             ; compare two strings
0099++ 196F             ; str1 in SI
0100++ 196F             ; str2 in DI
0101++ 196F             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 196F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 196F             strcmp:
0104++ 196F DB          	push al
0105++ 1970 DA          	push d
0106++ 1971 E3          	push di
0107++ 1972 E2          	push si
0108++ 1973             strcmp_loop:
0109++ 1973 F3          	cmpsb					; compare a byte of the strings
0110++ 1974 C7 7F 19    	jne strcmp_ret
0111++ 1977 FB FF FF    	lea d, [si +- 1]
0112++ 197A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 197C C7 73 19    	jne strcmp_loop				; equal chars but not at end
0114++ 197F             strcmp_ret:
0115++ 197F EF          	pop si
0116++ 1980 F0          	pop di
0117++ 1981 E7          	pop d
0118++ 1982 E8          	pop al
0119++ 1983 09          	ret
0120++ 1984             
0121++ 1984             
0122++ 1984             ; STRCPY
0123++ 1984             ; copy null terminated string from SI to DI
0124++ 1984             ; source in SI
0125++ 1984             ; destination in DI
0126++ 1984             strcpy:
0127++ 1984 E2          	push si
0128++ 1985 E3          	push di
0129++ 1986 DB          	push al
0130++ 1987             strcpy_L1:
0131++ 1987 F6          	lodsb
0132++ 1988 F7          	stosb
0133++ 1989 B9 00       	cmp al, 0
0134++ 198B C7 87 19    	jne strcpy_L1
0135++ 198E             strcpy_end:
0136++ 198E E8          	pop al
0137++ 198F F0          	pop di
0138++ 1990 EF          	pop si
0139++ 1991 09          	ret
0140++ 1992             
0141++ 1992             ; STRCAT
0142++ 1992             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1992             ; source in SI
0144++ 1992             ; destination in DI
0145++ 1992             strcat:
0146++ 1992 E2          	push si
0147++ 1993 E3          	push di
0148++ 1994 D7          	push a
0149++ 1995 DA          	push d
0150++ 1996 50          	mov a, di
0151++ 1997 3C          	mov d, a
0152++ 1998             strcat_goto_end_L1:
0153++ 1998 BD 00       	cmp byte[d], 0
0154++ 199A C6 A1 19    	je strcat_start
0155++ 199D 79          	inc d
0156++ 199E 0A 98 19    	jmp strcat_goto_end_L1
0157++ 19A1             strcat_start:
0158++ 19A1 FD 50       	mov di, d
0159++ 19A3             strcat_L1:
0160++ 19A3 F6          	lodsb
0161++ 19A4 F7          	stosb
0162++ 19A5 B9 00       	cmp al, 0
0163++ 19A7 C7 A3 19    	jne strcat_L1
0164++ 19AA             strcat_end:
0165++ 19AA E7          	pop d
0166++ 19AB E4          	pop a
0167++ 19AC F0          	pop di
0168++ 19AD EF          	pop si
0169++ 19AE 09          	ret
0005+  19AF             
0006+  19AF 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  19B3 34 35 36 37 
0006+  19B7 38 39 41 42 
0006+  19BB 43 44 45 46 
0007+  19BF 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  19C3 1B 5B 48 00 
0008+  19C7             
0009+  19C7 01 00       table_power:.dw 1
0010+  19C9 0A 00       			.dw 10
0011+  19CB 64 00       			.dw 100
0012+  19CD E8 03       			.dw 1000
0013+  19CF 10 27       			.dw 10000
0014+  19D1             
0015+  19D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  19D1             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  19D1             ; ASCII in BL
0018+  19D1             ; result in AL
0019+  19D1             ; ascii for F = 0100 0110
0020+  19D1             ; ascii for 9 = 0011 1001
0021+  19D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  19D1             hex_ascii_encode:
0023+  19D1 1B          	mov al, bl
0024+  19D2 93 40       	test al, $40				; test if letter or number
0025+  19D4 C7 DA 19    	jnz hex_letter
0026+  19D7 87 0F       	and al, $0F				; get number
0027+  19D9 09          	ret
0028+  19DA             hex_letter:
0029+  19DA 87 0F       	and al, $0F				; get letter
0030+  19DC 6A 09       	add al, 9
0031+  19DE 09          	ret
0032+  19DF             
0033+  19DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  19DF             ; ATOI
0035+  19DF             ; 2 letter hex string in B
0036+  19DF             ; 8bit integer returned in AL
0037+  19DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  19DF             atoi:
0039+  19DF D8          	push b
0040+  19E0 07 D1 19    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  19E3 30          	mov bl, bh
0042+  19E4 DB          	push al					; save a
0043+  19E5 07 D1 19    	call hex_ascii_encode
0044+  19E8 EA          	pop bl	
0045+  19E9 FD 9E 04    	shl al, 4
0046+  19EC 8C          	or al, bl
0047+  19ED E5          	pop b
0048+  19EE 09          	ret	
0049+  19EF             
0050+  19EF             
0051+  19EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  19EF             ; printf
0053+  19EF             ; no need for explanations!
0054+  19EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  19EF             printf:
0056+  19EF 09          	ret
0057+  19F0             
0058+  19F0             
0059+  19F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  19F0             ; scanf
0061+  19F0             ; no need for explanations!
0062+  19F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  19F0             scanf:
0064+  19F0 09          	ret
0065+  19F1             
0066+  19F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  19F1             ; ITOA
0068+  19F1             ; 8bit value in BL
0069+  19F1             ; 2 byte ASCII result in A
0070+  19F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  19F1             itoa:
0072+  19F1 DA          	push d
0073+  19F2 D8          	push b
0074+  19F3 A7 00       	mov bh, 0
0075+  19F5 FD A4 04    	shr bl, 4	
0076+  19F8 74          	mov d, b
0077+  19F9 1F AF 19    	mov al, [d + s_hex_digits]
0078+  19FC 23          	mov ah, al
0079+  19FD             	
0080+  19FD E5          	pop b
0081+  19FE D8          	push b
0082+  19FF A7 00       	mov bh, 0
0083+  1A01 FD 87 0F    	and bl, $0F
0084+  1A04 74          	mov d, b
0085+  1A05 1F AF 19    	mov al, [d + s_hex_digits]
0086+  1A08 E5          	pop b
0087+  1A09 E7          	pop d
0088+  1A0A 09          	ret
0089+  1A0B             
0090+  1A0B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  1A0B             ; HEX STRING TO BINARY
0092+  1A0B             ; di = destination address
0093+  1A0B             ; si = source
0094+  1A0B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  1A0B             hex_to_int:
0096+  1A0B             hex_to_int_L1:
0097+  1A0B F6          	lodsb					; load from [SI] to AL
0098+  1A0C B9 00       	cmp al, 0				; check if ASCII 0
0099+  1A0E C6 1B 1A    	jz hex_to_int_ret
0100+  1A11 36          	mov bh, al
0101+  1A12 F6          	lodsb
0102+  1A13 2F          	mov bl, al
0103+  1A14 07 DF 19    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  1A17 F7          	stosb					; store AL to [DI]
0105+  1A18 0A 0B 1A    	jmp hex_to_int_L1
0106+  1A1B             hex_to_int_ret:
0107+  1A1B 09          	ret		
0108+  1A1C             
0109+  1A1C             
0110+  1A1C             
0111+  1A1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  1A1C             ; GETCHAR
0113+  1A1C             ; char in ah
0114+  1A1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  1A1C             getchar:
0116+  1A1C DB          	push al
0117+  1A1D             getchar_retry:
0118+  1A1D FD 0C       	sti
0119+  1A1F 19 01       	mov al, 1
0120+  1A21 05 03       	syscall sys_io			; receive in AH
0121+  1A23 B9 00       	cmp al, 0			; check if any char was receive
0122+  1A25 C6 1D 1A    	je getchar_retry
0123+  1A28 E8          	pop al
0124+  1A29 09          	ret
0125+  1A2A             
0126+  1A2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  1A2A             ; PUTCHAR
0128+  1A2A             ; char in ah
0129+  1A2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1A2A             putchar:
0131+  1A2A D7          	push a
0132+  1A2B 19 00       	mov al, 0
0133+  1A2D 05 03       	syscall sys_io			; char in AH
0134+  1A2F E4          	pop a
0135+  1A30 09          	ret
0136+  1A31             
0137+  1A31             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  1A31             ;; INPUT A STRING
0139+  1A31             ;; terminates with null
0140+  1A31             ;; pointer in D
0141+  1A31             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  1A31             gets:
0143+  1A31 D7          	push a
0144+  1A32 DA          	push d
0145+  1A33             gets_loop:
0146+  1A33 FD 0C       	sti
0147+  1A35 19 01       	mov al, 1
0148+  1A37 05 03       	syscall sys_io			; receive in AH
0149+  1A39 B9 00       	cmp al, 0				; check error code (AL)
0150+  1A3B C6 33 1A    	je gets_loop			; if no char received, retry
0151+  1A3E             
0152+  1A3E 76 1B       	cmp ah, 27
0153+  1A40 C6 61 1A    	je gets_telnet_escape
0154+  1A43 76 0A       	cmp ah, $0A				; LF
0155+  1A45 C6 BA 1A    	je gets_end
0156+  1A48 76 0D       	cmp ah, $0D				; CR
0157+  1A4A C6 BA 1A    	je gets_end
0158+  1A4D 76 5C       	cmp ah, $5C				; '\\'
0159+  1A4F C6 91 1A    	je gets_escape
0160+  1A52             	
0161+  1A52 76 08       	cmp ah, $08			; check for backspace
0162+  1A54 C6 5D 1A    	je gets_backspace
0163+  1A57             
0164+  1A57 1A          	mov al, ah
0165+  1A58 3E          	mov [d], al
0166+  1A59 79          	inc d
0167+  1A5A 0A 33 1A    	jmp gets_loop
0168+  1A5D             gets_backspace:
0169+  1A5D 7F          	dec d
0170+  1A5E 0A 33 1A    	jmp gets_loop
0171+  1A61             gets_telnet_escape:
0172+  1A61 FD 0C       	sti
0173+  1A63 19 01       	mov al, 1
0174+  1A65 05 03       	syscall sys_io				; receive in AH without echo
0175+  1A67 B9 00       	cmp al, 0					; check error code (AL)
0176+  1A69 C6 61 1A    	je gets_telnet_escape		; if no char received, retry
0177+  1A6C 76 5B       	cmp ah, '['
0178+  1A6E C7 33 1A    	jne gets_loop
0179+  1A71             gets_telnet_escape_phase2:
0180+  1A71 FD 0C       	sti
0181+  1A73 19 01       	mov al, 1
0182+  1A75 05 03       	syscall sys_io					; receive in AH without echo
0183+  1A77 B9 00       	cmp al, 0						; check error code (AL)
0184+  1A79 C6 71 1A    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  1A7C 76 44       	cmp ah, 'D'
0186+  1A7E C6 89 1A    	je gets_left_arrow
0187+  1A81 76 43       	cmp ah, 'C'
0188+  1A83 C6 8D 1A    	je gets_right_arrow
0189+  1A86 0A 33 1A    	jmp gets_loop
0190+  1A89             gets_left_arrow:
0191+  1A89 7F          	dec d
0192+  1A8A 0A 33 1A    	jmp gets_loop
0193+  1A8D             gets_right_arrow:
0194+  1A8D 79          	inc d
0195+  1A8E 0A 33 1A    	jmp gets_loop
0196+  1A91             gets_escape:
0197+  1A91 FD 0C       	sti
0198+  1A93 19 01       	mov al, 1
0199+  1A95 05 03       	syscall sys_io			; receive in AH
0200+  1A97 B9 00       	cmp al, 0				; check error code (AL)
0201+  1A99 C6 91 1A    	je gets_escape			; if no char received, retry
0202+  1A9C 76 6E       	cmp ah, 'n'
0203+  1A9E C6 AC 1A    	je gets_LF
0204+  1AA1 76 72       	cmp ah, 'r'
0205+  1AA3 C6 B3 1A    	je gets_CR
0206+  1AA6 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  1AA7 3E          	mov [d], al
0208+  1AA8 79          	inc d
0209+  1AA9 0A 33 1A    	jmp gets_loop
0210+  1AAC             gets_LF:
0211+  1AAC 19 0A       	mov al, $0A
0212+  1AAE 3E          	mov [d], al
0213+  1AAF 79          	inc d
0214+  1AB0 0A 33 1A    	jmp gets_loop
0215+  1AB3             gets_CR:
0216+  1AB3 19 0D       	mov al, $0D
0217+  1AB5 3E          	mov [d], al
0218+  1AB6 79          	inc d
0219+  1AB7 0A 33 1A    	jmp gets_loop
0220+  1ABA             gets_end:
0221+  1ABA 19 00       	mov al, 0
0222+  1ABC 3E          	mov [d], al				; terminate string
0223+  1ABD E7          	pop d
0224+  1ABE E4          	pop a
0225+  1ABF 09          	ret
0226+  1AC0             
0227+  1AC0             
0228+  1AC0             
0229+  1AC0             
0230+  1AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  1AC0             ;; INPUT TEXT
0232+  1AC0             ;; terminated with CTRL+D
0233+  1AC0             ;; pointer in D
0234+  1AC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  1AC0             gettxt:
0236+  1AC0 D7          	push a
0237+  1AC1 DA          	push d
0238+  1AC2             gettxt_loop:
0239+  1AC2 19 01       	mov al, 1
0240+  1AC4 05 03       	syscall sys_io			; receive in AH
0241+  1AC6 B9 00       	cmp al, 0				; check error code (AL)
0242+  1AC8 C6 C2 1A    	je gettxt_loop		; if no char received, retry
0243+  1ACB 76 04       	cmp ah, 4			; EOT
0244+  1ACD C6 0B 1B    	je gettxt_end
0245+  1AD0 76 08       	cmp ah, $08			; check for backspace
0246+  1AD2 C6 07 1B    	je gettxt_backspace
0247+  1AD5 76 5C       	cmp ah, $5C				; '\\'
0248+  1AD7 C6 E0 1A    	je gettxt_escape
0249+  1ADA 1A          	mov al, ah
0250+  1ADB 3E          	mov [d], al
0251+  1ADC 79          	inc d
0252+  1ADD 0A C2 1A    	jmp gettxt_loop
0253+  1AE0             gettxt_escape:
0254+  1AE0 19 01       	mov al, 1
0255+  1AE2 05 03       	syscall sys_io			; receive in AH
0256+  1AE4 B9 00       	cmp al, 0				; check error code (AL)
0257+  1AE6 C6 E0 1A    	je gettxt_escape		; if no char received, retry
0258+  1AE9 76 6E       	cmp ah, 'n'
0259+  1AEB C6 F9 1A    	je gettxt_LF
0260+  1AEE 76 72       	cmp ah, 'r'
0261+  1AF0 C6 00 1B    	je gettxt_CR
0262+  1AF3 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  1AF4 3E          	mov [d], al
0264+  1AF5 79          	inc d
0265+  1AF6 0A C2 1A    	jmp gettxt_loop
0266+  1AF9             gettxt_LF:
0267+  1AF9 19 0A       	mov al, $0A
0268+  1AFB 3E          	mov [d], al
0269+  1AFC 79          	inc d
0270+  1AFD 0A C2 1A    	jmp gettxt_loop
0271+  1B00             gettxt_CR:
0272+  1B00 19 0D       	mov al, $0D
0273+  1B02 3E          	mov [d], al
0274+  1B03 79          	inc d
0275+  1B04 0A C2 1A    	jmp gettxt_loop
0276+  1B07             gettxt_backspace:
0277+  1B07 7F          	dec d
0278+  1B08 0A C2 1A    	jmp gettxt_loop
0279+  1B0B             gettxt_end:
0280+  1B0B 19 00       	mov al, 0
0281+  1B0D 3E          	mov [d], al				; terminate string
0282+  1B0E E7          	pop d
0283+  1B0F E4          	pop a
0284+  1B10 09          	ret
0285+  1B11             
0286+  1B11             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  1B11             ; PRINT NEW LINE
0288+  1B11             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  1B11             printnl:
0290+  1B11 D7          	push a
0291+  1B12 10 00 0A    	mov a, $0A00
0292+  1B15 05 03       	syscall sys_io
0293+  1B17 10 00 0D    	mov a, $0D00
0294+  1B1A 05 03       	syscall sys_io
0295+  1B1C E4          	pop a
0296+  1B1D 09          	ret
0297+  1B1E             
0298+  1B1E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  1B1E             ; strtoint
0300+  1B1E             ; 4 digit hex string number in d
0301+  1B1E             ; integer returned in A
0302+  1B1E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  1B1E             strtointx:
0304+  1B1E D8          	push b
0305+  1B1F 32          	mov bl, [d]
0306+  1B20 37          	mov bh, bl
0307+  1B21 33 01 00    	mov bl, [d + 1]
0308+  1B24 07 DF 19    	call atoi				; convert to int in AL
0309+  1B27 23          	mov ah, al				; move to AH
0310+  1B28 33 02 00    	mov bl, [d + 2]
0311+  1B2B 37          	mov bh, bl
0312+  1B2C 33 03 00    	mov bl, [d + 3]
0313+  1B2F 07 DF 19    	call atoi				; convert to int in AL
0314+  1B32 E5          	pop b
0315+  1B33 09          	ret
0316+  1B34             
0317+  1B34             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  1B34             ; strtoint
0319+  1B34             ; 5 digit base10 string number in d
0320+  1B34             ; integer returned in A
0321+  1B34             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  1B34             strtoint:
0323+  1B34 E2          	push si
0324+  1B35 D8          	push b
0325+  1B36 D9          	push c
0326+  1B37 DA          	push d
0327+  1B38 07 5F 19    	call strlen			; get string length in C
0328+  1B3B 7E          	dec c
0329+  1B3C FD 4E       	mov si, d
0330+  1B3E 12          	mov a, c
0331+  1B3F FD 99       	shl a
0332+  1B41 3B C7 19    	mov d, table_power
0333+  1B44 59          	add d, a
0334+  1B45 38 00 00    	mov c, 0
0335+  1B48             strtoint_L0:
0336+  1B48 F6          	lodsb			; load ASCII to al
0337+  1B49 B9 00       	cmp al, 0
0338+  1B4B C6 5E 1B    	je strtoint_end
0339+  1B4E 6F 30       	sub al, $30		; make into integer
0340+  1B50 22 00       	mov ah, 0
0341+  1B52 2A          	mov b, [d]
0342+  1B53 AC          	mul a, b			; result in B since it fits in 16bits
0343+  1B54 11          	mov a, b
0344+  1B55 28          	mov b, c
0345+  1B56 54          	add a, b
0346+  1B57 39          	mov c, a
0347+  1B58 63 02 00    	sub d, 2
0348+  1B5B 0A 48 1B    	jmp strtoint_L0
0349+  1B5E             strtoint_end:
0350+  1B5E 12          	mov a, c
0351+  1B5F E7          	pop d
0352+  1B60 E6          	pop c
0353+  1B61 E5          	pop b
0354+  1B62 EF          	pop si
0355+  1B63 09          	ret
0356+  1B64             
0357+  1B64             
0358+  1B64             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  1B64             ; PRINT NULL TERMINATED STRING
0360+  1B64             ; pointer in D
0361+  1B64             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  1B64             puts:
0363+  1B64 D7          	push a
0364+  1B65 DA          	push d
0365+  1B66             puts_L1:
0366+  1B66 1E          	mov al, [d]
0367+  1B67 B9 00       	cmp al, 0
0368+  1B69 C6 75 1B    	jz puts_END
0369+  1B6C 23          	mov ah, al
0370+  1B6D 19 00       	mov al, 0
0371+  1B6F 05 03       	syscall sys_io
0372+  1B71 79          	inc d
0373+  1B72 0A 66 1B    	jmp puts_L1
0374+  1B75             puts_END:
0375+  1B75 E7          	pop d
0376+  1B76 E4          	pop a
0377+  1B77 09          	ret
0378+  1B78             
0379+  1B78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  1B78             ; PRINT N SIZE STRING
0381+  1B78             ; pointer in D
0382+  1B78             ; size in C
0383+  1B78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  1B78             putsn:
0385+  1B78 DB          	push al
0386+  1B79 DA          	push d
0387+  1B7A D9          	push c
0388+  1B7B             putsn_L0:
0389+  1B7B 1E          	mov al, [d]
0390+  1B7C 23          	mov ah, al
0391+  1B7D 19 00       	mov al, 0
0392+  1B7F 05 03       	syscall sys_io
0393+  1B81 79          	inc d
0394+  1B82 7E          	dec c	
0395+  1B83 C2 00 00    	cmp c, 0
0396+  1B86 C7 7B 1B    	jne putsn_L0
0397+  1B89             putsn_end:
0398+  1B89 E6          	pop c
0399+  1B8A E7          	pop d
0400+  1B8B E8          	pop al
0401+  1B8C 09          	ret
0402+  1B8D             
0403+  1B8D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  1B8D             ; print 16bit decimal number
0405+  1B8D             ; input number in A
0406+  1B8D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  1B8D             print_u16d:
0408+  1B8D D7          	push a
0409+  1B8E D8          	push b
0410+  1B8F 26 10 27    	mov b, 10000
0411+  1B92 AE          	div a, b			; get 10000 coeff.
0412+  1B93 07 B9 1B    	call print_number
0413+  1B96 11          	mov a, b
0414+  1B97 26 E8 03    	mov b, 1000
0415+  1B9A AE          	div a, b			; get 10000 coeff.
0416+  1B9B 07 B9 1B    	call print_number
0417+  1B9E 11          	mov a, b
0418+  1B9F 26 64 00    	mov b, 100
0419+  1BA2 AE          	div a, b
0420+  1BA3 07 B9 1B    	call print_number
0421+  1BA6 11          	mov a, b
0422+  1BA7 26 0A 00    	mov b, 10
0423+  1BAA AE          	div a, b
0424+  1BAB 07 B9 1B    	call print_number
0425+  1BAE 11          	mov a, b
0426+  1BAF 6A 30       	add al, $30
0427+  1BB1 23          	mov ah, al
0428+  1BB2 19 00       	mov al, 0
0429+  1BB4 05 03       	syscall sys_io	; print coeff
0430+  1BB6 E5          	pop b
0431+  1BB7 E4          	pop a
0432+  1BB8 09          	ret
0433+  1BB9             
0434+  1BB9             
0435+  1BB9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  1BB9             ; if A == 0, print space
0437+  1BB9             ; else print A
0438+  1BB9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  1BB9             print_number:
0440+  1BB9 6A 30       	add al, $30
0441+  1BBB 23          	mov ah, al
0442+  1BBC 07 2A 1A    	call putchar
0443+  1BBF 09          	ret
0444+  1BC0             
0445+  1BC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  1BC0             ; PRINT 16BIT HEX INTEGER
0447+  1BC0             ; integer value in reg B
0448+  1BC0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  1BC0             print_u16x:
0450+  1BC0 D7          	push a
0451+  1BC1 D8          	push b
0452+  1BC2 DD          	push bl
0453+  1BC3 30          	mov bl, bh
0454+  1BC4 07 F1 19    	call itoa				; convert bh to char in A
0455+  1BC7 2F          	mov bl, al				; save al
0456+  1BC8 19 00       	mov al, 0
0457+  1BCA 05 03       	syscall sys_io				; display AH
0458+  1BCC 24          	mov ah, bl				; retrieve al
0459+  1BCD 19 00       	mov al, 0
0460+  1BCF 05 03       	syscall sys_io				; display AL
0461+  1BD1             
0462+  1BD1 EA          	pop bl
0463+  1BD2 07 F1 19    	call itoa				; convert bh to char in A
0464+  1BD5 2F          	mov bl, al				; save al
0465+  1BD6 19 00       	mov al, 0
0466+  1BD8 05 03       	syscall sys_io				; display AH
0467+  1BDA 24          	mov ah, bl				; retrieve al
0468+  1BDB 19 00       	mov al, 0
0469+  1BDD 05 03       	syscall sys_io				; display AL
0470+  1BDF             
0471+  1BDF E5          	pop b
0472+  1BE0 E4          	pop a
0473+  1BE1 09          	ret
0474+  1BE2             
0475+  1BE2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  1BE2             ; INPUT 16BIT HEX INTEGER
0477+  1BE2             ; read 16bit integer into A
0478+  1BE2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  1BE2             scan_u16x:
0480+  1BE2 F8 10 00    	enter 16
0481+  1BE5 D8          	push b
0482+  1BE6 DA          	push d
0483+  1BE7             
0484+  1BE7 FA F1 FF    	lea d, [bp + -15]
0485+  1BEA 07 31 1A    	call gets				; get number
0486+  1BED             
0487+  1BED 32          	mov bl, [d]
0488+  1BEE 37          	mov bh, bl
0489+  1BEF 33 01 00    	mov bl, [d + 1]
0490+  1BF2 07 DF 19    	call atoi				; convert to int in AL
0491+  1BF5 23          	mov ah, al				; move to AH
0492+  1BF6             
0493+  1BF6 33 02 00    	mov bl, [d + 2]
0494+  1BF9 37          	mov bh, bl
0495+  1BFA 33 03 00    	mov bl, [d + 3]
0496+  1BFD 07 DF 19    	call atoi				; convert to int in AL
0497+  1C00             
0498+  1C00 E7          	pop d
0499+  1C01 E5          	pop b
0500+  1C02 F9          	leave
0501+  1C03 09          	ret
0502+  1C04             
0503+  1C04             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  1C04             ; PRINT 8bit HEX INTEGER
0505+  1C04             ; integer value in reg bl
0506+  1C04             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  1C04             print_u8x:
0508+  1C04 D7          	push a
0509+  1C05 DD          	push bl
0510+  1C06             
0511+  1C06 07 F1 19    	call itoa				; convert bl to char in A
0512+  1C09 2F          	mov bl, al				; save al
0513+  1C0A 19 00       	mov al, 0
0514+  1C0C 05 03       	syscall sys_io				; display AH
0515+  1C0E 24          	mov ah, bl				; retrieve al
0516+  1C0F 19 00       	mov al, 0
0517+  1C11 05 03       	syscall sys_io				; display AL
0518+  1C13             
0519+  1C13 EA          	pop bl
0520+  1C14 E4          	pop a
0521+  1C15 09          	ret
0522+  1C16             
0523+  1C16             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  1C16             ; print 8bit decimal unsigned number
0525+  1C16             ; input number in AL
0526+  1C16             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  1C16             print_u8d:
0528+  1C16 D7          	push a
0529+  1C17 D8          	push b
0530+  1C18             
0531+  1C18 22 00       	mov ah, 0
0532+  1C1A 26 64 00    	mov b, 100
0533+  1C1D AE          	div a, b
0534+  1C1E D8          	push b			; save remainder
0535+  1C1F B9 00       	cmp al, 0
0536+  1C21 C6 2B 1C    	je skip100
0537+  1C24 6A 30       	add al, $30
0538+  1C26 23          	mov ah, al
0539+  1C27 19 00       	mov al, 0
0540+  1C29 05 03       	syscall sys_io	; print coeff
0541+  1C2B             skip100:
0542+  1C2B E4          	pop a
0543+  1C2C 22 00       	mov ah, 0
0544+  1C2E 26 0A 00    	mov b, 10
0545+  1C31 AE          	div a, b
0546+  1C32 D8          	push b			; save remainder
0547+  1C33 B9 00       	cmp al, 0
0548+  1C35 C6 3F 1C    	je skip10
0549+  1C38 6A 30       	add al, $30
0550+  1C3A 23          	mov ah, al
0551+  1C3B 19 00       	mov al, 0
0552+  1C3D 05 03       	syscall sys_io	; print coeff
0553+  1C3F             skip10:
0554+  1C3F E4          	pop a
0555+  1C40 1B          	mov al, bl
0556+  1C41 6A 30       	add al, $30
0557+  1C43 23          	mov ah, al
0558+  1C44 19 00       	mov al, 0
0559+  1C46 05 03       	syscall sys_io	; print coeff
0560+  1C48 E5          	pop b
0561+  1C49 E4          	pop a
0562+  1C4A 09          	ret
0563+  1C4B             
0564+  1C4B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  1C4B             ; INPUT 8BIT HEX INTEGER
0566+  1C4B             ; read 8bit integer into AL
0567+  1C4B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  1C4B             scan_u8x:
0569+  1C4B F8 04 00    	enter 4
0570+  1C4E D8          	push b
0571+  1C4F DA          	push d
0572+  1C50             
0573+  1C50 FA FD FF    	lea d, [bp + -3]
0574+  1C53 07 31 1A    	call gets				; get number
0575+  1C56             
0576+  1C56 32          	mov bl, [d]
0577+  1C57 37          	mov bh, bl
0578+  1C58 33 01 00    	mov bl, [d + 1]
0579+  1C5B 07 DF 19    	call atoi				; convert to int in AL
0580+  1C5E             
0581+  1C5E E7          	pop d
0582+  1C5F E5          	pop b
0583+  1C60 F9          	leave
0584+  1C61 09          	ret
0585+  1C62             
0586+  1C62             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  1C62             ; input decimal number
0588+  1C62             ; result in A
0589+  1C62             ; 655'\0'
0590+  1C62             ; low--------high
0591+  1C62             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  1C62             scan_u16d:
0593+  1C62 F8 08 00    	enter 8
0594+  1C65 E2          	push si
0595+  1C66 D8          	push b
0596+  1C67 D9          	push c
0597+  1C68 DA          	push d
0598+  1C69 FA F9 FF    	lea d, [bp +- 7]
0599+  1C6C 07 31 1A    	call gets
0600+  1C6F 07 5F 19    	call strlen			; get string length in C
0601+  1C72 7E          	dec c
0602+  1C73 FD 4E       	mov si, d
0603+  1C75 12          	mov a, c
0604+  1C76 FD 99       	shl a
0605+  1C78 3B C7 19    	mov d, table_power
0606+  1C7B 59          	add d, a
0607+  1C7C 38 00 00    	mov c, 0
0608+  1C7F             mul_loop:
0609+  1C7F F6          	lodsb			; load ASCII to al
0610+  1C80 B9 00       	cmp al, 0
0611+  1C82 C6 95 1C    	je mul_exit
0612+  1C85 6F 30       	sub al, $30		; make into integer
0613+  1C87 22 00       	mov ah, 0
0614+  1C89 2A          	mov b, [d]
0615+  1C8A AC          	mul a, b			; result in B since it fits in 16bits
0616+  1C8B 11          	mov a, b
0617+  1C8C 28          	mov b, c
0618+  1C8D 54          	add a, b
0619+  1C8E 39          	mov c, a
0620+  1C8F 63 02 00    	sub d, 2
0621+  1C92 0A 7F 1C    	jmp mul_loop
0622+  1C95             mul_exit:
0623+  1C95 12          	mov a, c
0624+  1C96 E7          	pop d
0625+  1C97 E6          	pop c
0626+  1C98 E5          	pop b
0627+  1C99 EF          	pop si
0628+  1C9A F9          	leave
0629+  1C9B 09          	ret
1323   1C9C             ; --- END INCLUDE BLOCK
1324   1C9C             
1325   1C9C             
1326   1C9C             .end
tasm: Number of errors = 0
