0001   0000             ; --- Filename: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- begin text block
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; j
0010   0405 52 02 00      sub sp, 2 ; i
0011   0408 52 02 00      sub sp, 2 ; k
0012   040B 26 05 00      mov b, 5
0013   040E D7            push a
0014   040F 11            mov a, b
0015   0410 45 FB FF      mov [bp + -5], a ; k
0016   0413 E4            pop a
0017   0414 26 0A 00      mov b, 10
0018   0417 D7            push a
0019   0418 11            mov a, b
0020   0419 45 FF FF      mov [bp + -1], a ; j
0021   041C E4            pop a
0022   041D             _ternary1_cond:
0023   041D 2C FF FF      mov b, [bp + -1] ; j
0024   0420 D7            push a
0025   0421 11            mov a, b
0026   0422 26 0A 00      mov b, 10
0027   0425 B0            cmp a, b
0028   0426 0E            lodflgs
0029   0427 87 03         and al, %00000011
0030   0429 B9 00         cmp al, %00000000
0031   042B 0E            lodflgs
0032   042C 87 01         and al, %00000001
0033   042E 22 00         mov ah, 0
0034   0430 27            mov b, a
0035   0431 E4            pop a
0036   0432 C0 00 00      cmp b, 0
0037   0435 C6 5A 04      je _ternary1_false
0038   0438             _ternary1_true:
0039   0438             _ternary2_cond:
0040   0438 2C FB FF      mov b, [bp + -5] ; k
0041   043B D7            push a
0042   043C 11            mov a, b
0043   043D 26 02 00      mov b, 2
0044   0440 B0            cmp a, b
0045   0441 0E            lodflgs
0046   0442 87 02         and al, %00000010
0047   0444 22 00         mov ah, 0
0048   0446 27            mov b, a
0049   0447 E4            pop a
0050   0448 C0 00 00      cmp b, 0
0051   044B C6 54 04      je _ternary3_false
0052   044E             _ternary3_true:
0053   044E 26 0B 00      mov b, 11
0054   0451 0A 57 04      jmp _ternary3_exit
0055   0454             _ternary3_false:
0056   0454 26 17 00      mov b, 23
0057   0457             _ternary3_exit:
0058   0457 0A 5D 04      jmp _ternary1_exit
0059   045A             _ternary1_false:
0060   045A 26 42 00      mov b, 66
0061   045D             _ternary1_exit:
0062   045D             ; --- begin inline asm block
0063   045D 17 FD FF        mov a, [bp + -3]
0064   0460 07 D7 06        call print_u16d
0065   0463               ; --- end inline asm block
0066   0463 F9            leave
0067   0464 05 0B         syscall sys_terminate_proc
0068   0466             ; --- end text block
0069   0466             
0070   0466             ; --- begin data block
0071   0466 0A 00       s_data: .db "\n", 0
0072   0468 66 04       s: .dw s_data
0073   046A             ; --- end data block
0074   046A             ; --- begin include block
0075   046A             .include "lib/stdio.asm"
0001+  046A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  046A             ; stdio.s
0003+  046A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  046A             .include "lib/string.asm"
0001++ 046A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 046A             ; string.s
0003++ 046A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 046A             
0005++ 046A             
0006++ 046A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 046A             ; strrev
0008++ 046A             ; reverse a string
0009++ 046A             ; D = string address
0010++ 046A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 046A             ; 01234
0012++ 046A             strrev:
0013++ 046A 4B          	pusha
0014++ 046B 07 B1 04    	call strlen	; length in C
0015++ 046E 12          	mov a, c
0016++ 046F AF 01 00    	cmp a, 1
0017++ 0472 D0 8C 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0475 7D          	dec a
0019++ 0476 FD 4E       	mov si, d	; beginning of string
0020++ 0478 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 047A 59          	add d, a	; end of string
0022++ 047B 12          	mov a, c
0023++ 047C FD 9B       	shr a		; divide by 2
0024++ 047E 39          	mov c, a	; C now counts the steps
0025++ 047F             strrev_L0:
0026++ 047F 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0480 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0481 3E          	mov [d], al	; store left char into right side
0029++ 0482 1B          	mov al, bl
0030++ 0483 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0484 7E          	dec c
0032++ 0485 7F          	dec d
0033++ 0486 C2 00 00    	cmp c, 0
0034++ 0489 C7 7F 04    	jne strrev_L0
0035++ 048C             strrev_end:
0036++ 048C 4C          	popa
0037++ 048D 09          	ret
0038++ 048E             	
0039++ 048E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 048E             ; strchr
0041++ 048E             ; search string in D for char in AL
0042++ 048E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 048E             strchr:
0044++ 048E             strchr_L0:
0045++ 048E 32          	mov bl, [d]
0046++ 048F C1 00       	cmp bl, 0
0047++ 0491 C6 9C 04    	je strchr_end
0048++ 0494 BA          	cmp al, bl
0049++ 0495 C6 9C 04    	je strchr_end
0050++ 0498 79          	inc d
0051++ 0499 0A 8E 04    	jmp strchr_L0
0052++ 049C             strchr_end:
0053++ 049C 1B          	mov al, bl
0054++ 049D 09          	ret
0055++ 049E             
0056++ 049E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 049E             ; strstr
0058++ 049E             ; find sub-string
0059++ 049E             ; str1 in SI
0060++ 049E             ; str2 in DI
0061++ 049E             ; SI points to end of source string
0062++ 049E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 049E             strstr:
0064++ 049E DB          	push al
0065++ 049F DA          	push d
0066++ 04A0 E3          	push di
0067++ 04A1             strstr_loop:
0068++ 04A1 F3          	cmpsb					; compare a byte of the strings
0069++ 04A2 C7 AD 04    	jne strstr_ret
0070++ 04A5 FC 00 00    	lea d, [di + 0]
0071++ 04A8 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 04AA C7 A1 04    	jne strstr_loop				; equal chars but not at end
0073++ 04AD             strstr_ret:
0074++ 04AD F0          	pop di
0075++ 04AE E7          	pop d
0076++ 04AF E8          	pop al
0077++ 04B0 09          	ret
0078++ 04B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 04B1             ; length of null terminated string
0080++ 04B1             ; result in C
0081++ 04B1             ; pointer in D
0082++ 04B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 04B1             strlen:
0084++ 04B1 DA          	push d
0085++ 04B2 38 00 00    	mov c, 0
0086++ 04B5             strlen_L1:
0087++ 04B5 BD 00       	cmp byte [d], 0
0088++ 04B7 C6 BF 04    	je strlen_ret
0089++ 04BA 79          	inc d
0090++ 04BB 78          	inc c
0091++ 04BC 0A B5 04    	jmp strlen_L1
0092++ 04BF             strlen_ret:
0093++ 04BF E7          	pop d
0094++ 04C0 09          	ret
0095++ 04C1             
0096++ 04C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04C1             ; STRCMP
0098++ 04C1             ; compare two strings
0099++ 04C1             ; str1 in SI
0100++ 04C1             ; str2 in DI
0101++ 04C1             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04C1             strcmp:
0104++ 04C1 DB          	push al
0105++ 04C2 DA          	push d
0106++ 04C3 E3          	push di
0107++ 04C4 E2          	push si
0108++ 04C5             strcmp_loop:
0109++ 04C5 F3          	cmpsb					; compare a byte of the strings
0110++ 04C6 C7 D1 04    	jne strcmp_ret
0111++ 04C9 FB FF FF    	lea d, [si +- 1]
0112++ 04CC BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04CE C7 C5 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04D1             strcmp_ret:
0115++ 04D1 EF          	pop si
0116++ 04D2 F0          	pop di
0117++ 04D3 E7          	pop d
0118++ 04D4 E8          	pop al
0119++ 04D5 09          	ret
0120++ 04D6             
0121++ 04D6             
0122++ 04D6             ; STRCPY
0123++ 04D6             ; copy null terminated string from SI to DI
0124++ 04D6             ; source in SI
0125++ 04D6             ; destination in DI
0126++ 04D6             strcpy:
0127++ 04D6 E2          	push si
0128++ 04D7 E3          	push di
0129++ 04D8 DB          	push al
0130++ 04D9             strcpy_L1:
0131++ 04D9 F6          	lodsb
0132++ 04DA F7          	stosb
0133++ 04DB B9 00       	cmp al, 0
0134++ 04DD C7 D9 04    	jne strcpy_L1
0135++ 04E0             strcpy_end:
0136++ 04E0 E8          	pop al
0137++ 04E1 F0          	pop di
0138++ 04E2 EF          	pop si
0139++ 04E3 09          	ret
0140++ 04E4             
0141++ 04E4             ; STRCAT
0142++ 04E4             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04E4             ; source in SI
0144++ 04E4             ; destination in DI
0145++ 04E4             strcat:
0146++ 04E4 E2          	push si
0147++ 04E5 E3          	push di
0148++ 04E6 D7          	push a
0149++ 04E7 DA          	push d
0150++ 04E8 50          	mov a, di
0151++ 04E9 3C          	mov d, a
0152++ 04EA             strcat_goto_end_L1:
0153++ 04EA BD 00       	cmp byte[d], 0
0154++ 04EC C6 F3 04    	je strcat_start
0155++ 04EF 79          	inc d
0156++ 04F0 0A EA 04    	jmp strcat_goto_end_L1
0157++ 04F3             strcat_start:
0158++ 04F3 FD 50       	mov di, d
0159++ 04F5             strcat_L1:
0160++ 04F5 F6          	lodsb
0161++ 04F6 F7          	stosb
0162++ 04F7 B9 00       	cmp al, 0
0163++ 04F9 C7 F5 04    	jne strcat_L1
0164++ 04FC             strcat_end:
0165++ 04FC E7          	pop d
0166++ 04FD E4          	pop a
0167++ 04FE F0          	pop di
0168++ 04FF EF          	pop si
0169++ 0500 09          	ret
0005+  0501             
0006+  0501 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0505 34 35 36 37 
0006+  0509 38 39 41 42 
0006+  050D 43 44 45 46 
0007+  0511             
0008+  0511 01 00       table_power:.dw 1
0009+  0513 0A 00       			.dw 10
0010+  0515 64 00       			.dw 100
0011+  0517 E8 03       			.dw 1000
0012+  0519 10 27       			.dw 10000
0013+  051B             
0014+  051B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  051B             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  051B             ; ASCII in BL
0017+  051B             ; result in AL
0018+  051B             ; ascii for F = 0100 0110
0019+  051B             ; ascii for 9 = 0011 1001
0020+  051B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  051B             hex_ascii_encode:
0022+  051B 1B          	mov al, bl
0023+  051C 93 40       	test al, $40				; test if letter or number
0024+  051E C7 24 05    	jnz hex_letter
0025+  0521 87 0F       	and al, $0F				; get number
0026+  0523 09          	ret
0027+  0524             hex_letter:
0028+  0524 87 0F       	and al, $0F				; get letter
0029+  0526 6A 09       	add al, 9
0030+  0528 09          	ret
0031+  0529             
0032+  0529             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  0529             ; ATOI
0034+  0529             ; 2 letter hex string in B
0035+  0529             ; 8bit integer returned in AL
0036+  0529             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  0529             atoi:
0038+  0529 D8          	push b
0039+  052A 07 1B 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  052D 30          	mov bl, bh
0041+  052E DB          	push al					; save a
0042+  052F 07 1B 05    	call hex_ascii_encode
0043+  0532 EA          	pop bl	
0044+  0533 FD 9E 04    	shl al, 4
0045+  0536 8C          	or al, bl
0046+  0537 E5          	pop b
0047+  0538 09          	ret	
0048+  0539             
0049+  0539             
0050+  0539             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0539             ; printf
0052+  0539             ; no need for explanations!
0053+  0539             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  0539             printf:
0055+  0539 09          	ret
0056+  053A             
0057+  053A             
0058+  053A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  053A             ; scanf
0060+  053A             ; no need for explanations!
0061+  053A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  053A             scanf:
0063+  053A 09          	ret
0064+  053B             
0065+  053B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  053B             ; ITOA
0067+  053B             ; 8bit value in BL
0068+  053B             ; 2 byte ASCII result in A
0069+  053B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  053B             itoa:
0071+  053B DA          	push d
0072+  053C D8          	push b
0073+  053D A7 00       	mov bh, 0
0074+  053F FD A4 04    	shr bl, 4	
0075+  0542 74          	mov d, b
0076+  0543 1F 01 05    	mov al, [d + s_hex_digits]
0077+  0546 23          	mov ah, al
0078+  0547             	
0079+  0547 E5          	pop b
0080+  0548 D8          	push b
0081+  0549 A7 00       	mov bh, 0
0082+  054B FD 87 0F    	and bl, $0F
0083+  054E 74          	mov d, b
0084+  054F 1F 01 05    	mov al, [d + s_hex_digits]
0085+  0552 E5          	pop b
0086+  0553 E7          	pop d
0087+  0554 09          	ret
0088+  0555             
0089+  0555             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0555             ; HEX STRING TO BINARY
0091+  0555             ; di = destination address
0092+  0555             ; si = source
0093+  0555             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0555             hex_to_int:
0095+  0555             hex_to_int_L1:
0096+  0555 F6          	lodsb					; load from [SI] to AL
0097+  0556 B9 00       	cmp al, 0				; check if ASCII 0
0098+  0558 C6 65 05    	jz hex_to_int_ret
0099+  055B 36          	mov bh, al
0100+  055C F6          	lodsb
0101+  055D 2F          	mov bl, al
0102+  055E 07 29 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0561 F7          	stosb					; store AL to [DI]
0104+  0562 0A 55 05    	jmp hex_to_int_L1
0105+  0565             hex_to_int_ret:
0106+  0565 09          	ret		
0107+  0566             
0108+  0566             
0109+  0566             
0110+  0566             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0566             ; GETCHAR
0112+  0566             ; char in ah
0113+  0566             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0566             getchar:
0115+  0566 DB          	push al
0116+  0567             getchar_retry:
0117+  0567 FD 0C       	sti
0118+  0569 19 01       	mov al, 1
0119+  056B 05 03       	syscall sys_io			; receive in AH
0120+  056D B9 00       	cmp al, 0			; check if any char was receive
0121+  056F C6 67 05    	je getchar_retry
0122+  0572 E8          	pop al
0123+  0573 09          	ret
0124+  0574             
0125+  0574             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0574             ; PUTCHAR
0127+  0574             ; char in ah
0128+  0574             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0574             putchar:
0130+  0574 D7          	push a
0131+  0575 19 00       	mov al, 0
0132+  0577 05 03       	syscall sys_io			; char in AH
0133+  0579 E4          	pop a
0134+  057A 09          	ret
0135+  057B             
0136+  057B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  057B             ;; INPUT A STRING
0138+  057B             ;; terminates with null
0139+  057B             ;; pointer in D
0140+  057B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  057B             gets:
0142+  057B D7          	push a
0143+  057C DA          	push d
0144+  057D             gets_loop:
0145+  057D FD 0C       	sti
0146+  057F 19 01       	mov al, 1
0147+  0581 05 03       	syscall sys_io			; receive in AH
0148+  0583 B9 00       	cmp al, 0				; check error code (AL)
0149+  0585 C6 7D 05    	je gets_loop			; if no char received, retry
0150+  0588             
0151+  0588 76 1B       	cmp ah, 27
0152+  058A C6 AB 05    	je gets_telnet_escape
0153+  058D 76 0A       	cmp ah, $0A				; LF
0154+  058F C6 04 06    	je gets_end
0155+  0592 76 0D       	cmp ah, $0D				; CR
0156+  0594 C6 04 06    	je gets_end
0157+  0597 76 5C       	cmp ah, $5C				; '\\'
0158+  0599 C6 DB 05    	je gets_escape
0159+  059C             	
0160+  059C 76 08       	cmp ah, $08			; check for backspace
0161+  059E C6 A7 05    	je gets_backspace
0162+  05A1             
0163+  05A1 1A          	mov al, ah
0164+  05A2 3E          	mov [d], al
0165+  05A3 79          	inc d
0166+  05A4 0A 7D 05    	jmp gets_loop
0167+  05A7             gets_backspace:
0168+  05A7 7F          	dec d
0169+  05A8 0A 7D 05    	jmp gets_loop
0170+  05AB             gets_telnet_escape:
0171+  05AB FD 0C       	sti
0172+  05AD 19 01       	mov al, 1
0173+  05AF 05 03       	syscall sys_io				; receive in AH without echo
0174+  05B1 B9 00       	cmp al, 0					; check error code (AL)
0175+  05B3 C6 AB 05    	je gets_telnet_escape		; if no char received, retry
0176+  05B6 76 5B       	cmp ah, '['
0177+  05B8 C7 7D 05    	jne gets_loop
0178+  05BB             gets_telnet_escape_phase2:
0179+  05BB FD 0C       	sti
0180+  05BD 19 01       	mov al, 1
0181+  05BF 05 03       	syscall sys_io					; receive in AH without echo
0182+  05C1 B9 00       	cmp al, 0						; check error code (AL)
0183+  05C3 C6 BB 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  05C6 76 44       	cmp ah, 'D'
0185+  05C8 C6 D3 05    	je gets_left_arrow
0186+  05CB 76 43       	cmp ah, 'C'
0187+  05CD C6 D7 05    	je gets_right_arrow
0188+  05D0 0A 7D 05    	jmp gets_loop
0189+  05D3             gets_left_arrow:
0190+  05D3 7F          	dec d
0191+  05D4 0A 7D 05    	jmp gets_loop
0192+  05D7             gets_right_arrow:
0193+  05D7 79          	inc d
0194+  05D8 0A 7D 05    	jmp gets_loop
0195+  05DB             gets_escape:
0196+  05DB FD 0C       	sti
0197+  05DD 19 01       	mov al, 1
0198+  05DF 05 03       	syscall sys_io			; receive in AH
0199+  05E1 B9 00       	cmp al, 0				; check error code (AL)
0200+  05E3 C6 DB 05    	je gets_escape			; if no char received, retry
0201+  05E6 76 6E       	cmp ah, 'n'
0202+  05E8 C6 F6 05    	je gets_LF
0203+  05EB 76 72       	cmp ah, 'r'
0204+  05ED C6 FD 05    	je gets_CR
0205+  05F0 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  05F1 3E          	mov [d], al
0207+  05F2 79          	inc d
0208+  05F3 0A 7D 05    	jmp gets_loop
0209+  05F6             gets_LF:
0210+  05F6 19 0A       	mov al, $0A
0211+  05F8 3E          	mov [d], al
0212+  05F9 79          	inc d
0213+  05FA 0A 7D 05    	jmp gets_loop
0214+  05FD             gets_CR:
0215+  05FD 19 0D       	mov al, $0D
0216+  05FF 3E          	mov [d], al
0217+  0600 79          	inc d
0218+  0601 0A 7D 05    	jmp gets_loop
0219+  0604             gets_end:
0220+  0604 19 00       	mov al, 0
0221+  0606 3E          	mov [d], al				; terminate string
0222+  0607 E7          	pop d
0223+  0608 E4          	pop a
0224+  0609 09          	ret
0225+  060A             
0226+  060A             
0227+  060A             
0228+  060A             
0229+  060A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  060A             ;; INPUT TEXT
0231+  060A             ;; terminated with CTRL+D
0232+  060A             ;; pointer in D
0233+  060A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  060A             gettxt:
0235+  060A D7          	push a
0236+  060B DA          	push d
0237+  060C             gettxt_loop:
0238+  060C 19 01       	mov al, 1
0239+  060E 05 03       	syscall sys_io			; receive in AH
0240+  0610 B9 00       	cmp al, 0				; check error code (AL)
0241+  0612 C6 0C 06    	je gettxt_loop		; if no char received, retry
0242+  0615 76 04       	cmp ah, 4			; EOT
0243+  0617 C6 55 06    	je gettxt_end
0244+  061A 76 08       	cmp ah, $08			; check for backspace
0245+  061C C6 51 06    	je gettxt_backspace
0246+  061F 76 5C       	cmp ah, $5C				; '\\'
0247+  0621 C6 2A 06    	je gettxt_escape
0248+  0624 1A          	mov al, ah
0249+  0625 3E          	mov [d], al
0250+  0626 79          	inc d
0251+  0627 0A 0C 06    	jmp gettxt_loop
0252+  062A             gettxt_escape:
0253+  062A 19 01       	mov al, 1
0254+  062C 05 03       	syscall sys_io			; receive in AH
0255+  062E B9 00       	cmp al, 0				; check error code (AL)
0256+  0630 C6 2A 06    	je gettxt_escape		; if no char received, retry
0257+  0633 76 6E       	cmp ah, 'n'
0258+  0635 C6 43 06    	je gettxt_LF
0259+  0638 76 72       	cmp ah, 'r'
0260+  063A C6 4A 06    	je gettxt_CR
0261+  063D 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  063E 3E          	mov [d], al
0263+  063F 79          	inc d
0264+  0640 0A 0C 06    	jmp gettxt_loop
0265+  0643             gettxt_LF:
0266+  0643 19 0A       	mov al, $0A
0267+  0645 3E          	mov [d], al
0268+  0646 79          	inc d
0269+  0647 0A 0C 06    	jmp gettxt_loop
0270+  064A             gettxt_CR:
0271+  064A 19 0D       	mov al, $0D
0272+  064C 3E          	mov [d], al
0273+  064D 79          	inc d
0274+  064E 0A 0C 06    	jmp gettxt_loop
0275+  0651             gettxt_backspace:
0276+  0651 7F          	dec d
0277+  0652 0A 0C 06    	jmp gettxt_loop
0278+  0655             gettxt_end:
0279+  0655 19 00       	mov al, 0
0280+  0657 3E          	mov [d], al				; terminate string
0281+  0658 E7          	pop d
0282+  0659 E4          	pop a
0283+  065A 09          	ret
0284+  065B             
0285+  065B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  065B             ; PRINT NEW LINE
0287+  065B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  065B             printnl:
0289+  065B D7          	push a
0290+  065C 10 00 0A    	mov a, $0A00
0291+  065F 05 03       	syscall sys_io
0292+  0661 10 00 0D    	mov a, $0D00
0293+  0664 05 03       	syscall sys_io
0294+  0666 E4          	pop a
0295+  0667 09          	ret
0296+  0668             
0297+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  0668             ; strtoint
0299+  0668             ; 4 digit hex string number in d
0300+  0668             ; integer returned in A
0301+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  0668             strtointx:
0303+  0668 D8          	push b
0304+  0669 32          	mov bl, [d]
0305+  066A 37          	mov bh, bl
0306+  066B 33 01 00    	mov bl, [d + 1]
0307+  066E 07 29 05    	call atoi				; convert to int in AL
0308+  0671 23          	mov ah, al				; move to AH
0309+  0672 33 02 00    	mov bl, [d + 2]
0310+  0675 37          	mov bh, bl
0311+  0676 33 03 00    	mov bl, [d + 3]
0312+  0679 07 29 05    	call atoi				; convert to int in AL
0313+  067C E5          	pop b
0314+  067D 09          	ret
0315+  067E             
0316+  067E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  067E             ; strtoint
0318+  067E             ; 5 digit base10 string number in d
0319+  067E             ; integer returned in A
0320+  067E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  067E             strtoint:
0322+  067E E2          	push si
0323+  067F D8          	push b
0324+  0680 D9          	push c
0325+  0681 DA          	push d
0326+  0682 07 B1 04    	call strlen			; get string length in C
0327+  0685 7E          	dec c
0328+  0686 FD 4E       	mov si, d
0329+  0688 12          	mov a, c
0330+  0689 FD 99       	shl a
0331+  068B 3B 11 05    	mov d, table_power
0332+  068E 59          	add d, a
0333+  068F 38 00 00    	mov c, 0
0334+  0692             strtoint_L0:
0335+  0692 F6          	lodsb			; load ASCII to al
0336+  0693 B9 00       	cmp al, 0
0337+  0695 C6 A8 06    	je strtoint_end
0338+  0698 6F 30       	sub al, $30		; make into integer
0339+  069A 22 00       	mov ah, 0
0340+  069C 2A          	mov b, [d]
0341+  069D AC          	mul a, b			; result in B since it fits in 16bits
0342+  069E 11          	mov a, b
0343+  069F 28          	mov b, c
0344+  06A0 54          	add a, b
0345+  06A1 39          	mov c, a
0346+  06A2 63 02 00    	sub d, 2
0347+  06A5 0A 92 06    	jmp strtoint_L0
0348+  06A8             strtoint_end:
0349+  06A8 12          	mov a, c
0350+  06A9 E7          	pop d
0351+  06AA E6          	pop c
0352+  06AB E5          	pop b
0353+  06AC EF          	pop si
0354+  06AD 09          	ret
0355+  06AE             
0356+  06AE             
0357+  06AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  06AE             ; PRINT NULL TERMINATED STRING
0359+  06AE             ; pointer in D
0360+  06AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  06AE             puts:
0362+  06AE D7          	push a
0363+  06AF DA          	push d
0364+  06B0             puts_L1:
0365+  06B0 1E          	mov al, [d]
0366+  06B1 B9 00       	cmp al, 0
0367+  06B3 C6 BF 06    	jz puts_END
0368+  06B6 23          	mov ah, al
0369+  06B7 19 00       	mov al, 0
0370+  06B9 05 03       	syscall sys_io
0371+  06BB 79          	inc d
0372+  06BC 0A B0 06    	jmp puts_L1
0373+  06BF             puts_END:
0374+  06BF E7          	pop d
0375+  06C0 E4          	pop a
0376+  06C1 09          	ret
0377+  06C2             
0378+  06C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  06C2             ; PRINT N SIZE STRING
0380+  06C2             ; pointer in D
0381+  06C2             ; size in C
0382+  06C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  06C2             putsn:
0384+  06C2 DB          	push al
0385+  06C3 DA          	push d
0386+  06C4 D9          	push c
0387+  06C5             putsn_L0:
0388+  06C5 1E          	mov al, [d]
0389+  06C6 23          	mov ah, al
0390+  06C7 19 00       	mov al, 0
0391+  06C9 05 03       	syscall sys_io
0392+  06CB 79          	inc d
0393+  06CC 7E          	dec c	
0394+  06CD C2 00 00    	cmp c, 0
0395+  06D0 C7 C5 06    	jne putsn_L0
0396+  06D3             putsn_end:
0397+  06D3 E6          	pop c
0398+  06D4 E7          	pop d
0399+  06D5 E8          	pop al
0400+  06D6 09          	ret
0401+  06D7             
0402+  06D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  06D7             ; print 16bit decimal number
0404+  06D7             ; input number in A
0405+  06D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  06D7             print_u16d:
0407+  06D7 D7          	push a
0408+  06D8 D8          	push b
0409+  06D9 26 10 27    	mov b, 10000
0410+  06DC AE          	div a, b			; get 10000 coeff.
0411+  06DD 07 03 07    	call print_number
0412+  06E0 11          	mov a, b
0413+  06E1 26 E8 03    	mov b, 1000
0414+  06E4 AE          	div a, b			; get 10000 coeff.
0415+  06E5 07 03 07    	call print_number
0416+  06E8 11          	mov a, b
0417+  06E9 26 64 00    	mov b, 100
0418+  06EC AE          	div a, b
0419+  06ED 07 03 07    	call print_number
0420+  06F0 11          	mov a, b
0421+  06F1 26 0A 00    	mov b, 10
0422+  06F4 AE          	div a, b
0423+  06F5 07 03 07    	call print_number
0424+  06F8 11          	mov a, b
0425+  06F9 6A 30       	add al, $30
0426+  06FB 23          	mov ah, al
0427+  06FC 19 00       	mov al, 0
0428+  06FE 05 03       	syscall sys_io	; print coeff
0429+  0700 E5          	pop b
0430+  0701 E4          	pop a
0431+  0702 09          	ret
0432+  0703             
0433+  0703             
0434+  0703             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  0703             ; if A == 0, print space
0436+  0703             ; else print A
0437+  0703             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  0703             print_number:
0439+  0703 6A 30       	add al, $30
0440+  0705 23          	mov ah, al
0441+  0706 07 74 05    	call putchar
0442+  0709 09          	ret
0443+  070A             
0444+  070A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  070A             ; PRINT 16BIT HEX INTEGER
0446+  070A             ; integer value in reg B
0447+  070A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  070A             print_u16x:
0449+  070A D7          	push a
0450+  070B D8          	push b
0451+  070C DD          	push bl
0452+  070D 30          	mov bl, bh
0453+  070E 07 3B 05    	call itoa				; convert bh to char in A
0454+  0711 2F          	mov bl, al				; save al
0455+  0712 19 00       	mov al, 0
0456+  0714 05 03       	syscall sys_io				; display AH
0457+  0716 24          	mov ah, bl				; retrieve al
0458+  0717 19 00       	mov al, 0
0459+  0719 05 03       	syscall sys_io				; display AL
0460+  071B             
0461+  071B EA          	pop bl
0462+  071C 07 3B 05    	call itoa				; convert bh to char in A
0463+  071F 2F          	mov bl, al				; save al
0464+  0720 19 00       	mov al, 0
0465+  0722 05 03       	syscall sys_io				; display AH
0466+  0724 24          	mov ah, bl				; retrieve al
0467+  0725 19 00       	mov al, 0
0468+  0727 05 03       	syscall sys_io				; display AL
0469+  0729             
0470+  0729 E5          	pop b
0471+  072A E4          	pop a
0472+  072B 09          	ret
0473+  072C             
0474+  072C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  072C             ; INPUT 16BIT HEX INTEGER
0476+  072C             ; read 16bit integer into A
0477+  072C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  072C             scan_u16x:
0479+  072C F8 10 00    	enter 16
0480+  072F D8          	push b
0481+  0730 DA          	push d
0482+  0731             
0483+  0731 FA F1 FF    	lea d, [bp + -15]
0484+  0734 07 7B 05    	call gets				; get number
0485+  0737             
0486+  0737 32          	mov bl, [d]
0487+  0738 37          	mov bh, bl
0488+  0739 33 01 00    	mov bl, [d + 1]
0489+  073C 07 29 05    	call atoi				; convert to int in AL
0490+  073F 23          	mov ah, al				; move to AH
0491+  0740             
0492+  0740 33 02 00    	mov bl, [d + 2]
0493+  0743 37          	mov bh, bl
0494+  0744 33 03 00    	mov bl, [d + 3]
0495+  0747 07 29 05    	call atoi				; convert to int in AL
0496+  074A             
0497+  074A E7          	pop d
0498+  074B E5          	pop b
0499+  074C F9          	leave
0500+  074D 09          	ret
0501+  074E             
0502+  074E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  074E             ; PRINT 8bit HEX INTEGER
0504+  074E             ; integer value in reg bl
0505+  074E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  074E             print_u8x:
0507+  074E D7          	push a
0508+  074F DD          	push bl
0509+  0750             
0510+  0750 07 3B 05    	call itoa				; convert bl to char in A
0511+  0753 2F          	mov bl, al				; save al
0512+  0754 19 00       	mov al, 0
0513+  0756 05 03       	syscall sys_io				; display AH
0514+  0758 24          	mov ah, bl				; retrieve al
0515+  0759 19 00       	mov al, 0
0516+  075B 05 03       	syscall sys_io				; display AL
0517+  075D             
0518+  075D EA          	pop bl
0519+  075E E4          	pop a
0520+  075F 09          	ret
0521+  0760             
0522+  0760             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0760             ; print 8bit decimal unsigned number
0524+  0760             ; input number in AL
0525+  0760             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0760             print_u8d:
0527+  0760 D7          	push a
0528+  0761 D8          	push b
0529+  0762             
0530+  0762 22 00       	mov ah, 0
0531+  0764 26 64 00    	mov b, 100
0532+  0767 AE          	div a, b
0533+  0768 D8          	push b			; save remainder
0534+  0769 B9 00       	cmp al, 0
0535+  076B C6 75 07    	je skip100
0536+  076E 6A 30       	add al, $30
0537+  0770 23          	mov ah, al
0538+  0771 19 00       	mov al, 0
0539+  0773 05 03       	syscall sys_io	; print coeff
0540+  0775             skip100:
0541+  0775 E4          	pop a
0542+  0776 22 00       	mov ah, 0
0543+  0778 26 0A 00    	mov b, 10
0544+  077B AE          	div a, b
0545+  077C D8          	push b			; save remainder
0546+  077D B9 00       	cmp al, 0
0547+  077F C6 89 07    	je skip10
0548+  0782 6A 30       	add al, $30
0549+  0784 23          	mov ah, al
0550+  0785 19 00       	mov al, 0
0551+  0787 05 03       	syscall sys_io	; print coeff
0552+  0789             skip10:
0553+  0789 E4          	pop a
0554+  078A 1B          	mov al, bl
0555+  078B 6A 30       	add al, $30
0556+  078D 23          	mov ah, al
0557+  078E 19 00       	mov al, 0
0558+  0790 05 03       	syscall sys_io	; print coeff
0559+  0792 E5          	pop b
0560+  0793 E4          	pop a
0561+  0794 09          	ret
0562+  0795             
0563+  0795             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  0795             ; INPUT 8BIT HEX INTEGER
0565+  0795             ; read 8bit integer into AL
0566+  0795             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  0795             scan_u8x:
0568+  0795 F8 04 00    	enter 4
0569+  0798 D8          	push b
0570+  0799 DA          	push d
0571+  079A             
0572+  079A FA FD FF    	lea d, [bp + -3]
0573+  079D 07 7B 05    	call gets				; get number
0574+  07A0             
0575+  07A0 32          	mov bl, [d]
0576+  07A1 37          	mov bh, bl
0577+  07A2 33 01 00    	mov bl, [d + 1]
0578+  07A5 07 29 05    	call atoi				; convert to int in AL
0579+  07A8             
0580+  07A8 E7          	pop d
0581+  07A9 E5          	pop b
0582+  07AA F9          	leave
0583+  07AB 09          	ret
0584+  07AC             
0585+  07AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  07AC             ; input decimal number
0587+  07AC             ; result in A
0588+  07AC             ; 655'\0'
0589+  07AC             ; low--------high
0590+  07AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  07AC             scan_u16d:
0592+  07AC F8 08 00    	enter 8
0593+  07AF E2          	push si
0594+  07B0 D8          	push b
0595+  07B1 D9          	push c
0596+  07B2 DA          	push d
0597+  07B3 FA F9 FF    	lea d, [bp +- 7]
0598+  07B6 07 7B 05    	call gets
0599+  07B9 07 B1 04    	call strlen			; get string length in C
0600+  07BC 7E          	dec c
0601+  07BD FD 4E       	mov si, d
0602+  07BF 12          	mov a, c
0603+  07C0 FD 99       	shl a
0604+  07C2 3B 11 05    	mov d, table_power
0605+  07C5 59          	add d, a
0606+  07C6 38 00 00    	mov c, 0
0607+  07C9             mul_loop:
0608+  07C9 F6          	lodsb			; load ASCII to al
0609+  07CA B9 00       	cmp al, 0
0610+  07CC C6 DF 07    	je mul_exit
0611+  07CF 6F 30       	sub al, $30		; make into integer
0612+  07D1 22 00       	mov ah, 0
0613+  07D3 2A          	mov b, [d]
0614+  07D4 AC          	mul a, b			; result in B since it fits in 16bits
0615+  07D5 11          	mov a, b
0616+  07D6 28          	mov b, c
0617+  07D7 54          	add a, b
0618+  07D8 39          	mov c, a
0619+  07D9 63 02 00    	sub d, 2
0620+  07DC 0A C9 07    	jmp mul_loop
0621+  07DF             mul_exit:
0622+  07DF 12          	mov a, c
0623+  07E0 E7          	pop d
0624+  07E1 E6          	pop c
0625+  07E2 E5          	pop b
0626+  07E3 EF          	pop si
0627+  07E4 F9          	leave
0628+  07E5 09          	ret
0076   07E6             ; --- end include block
0077   07E6             
0078   07E6             .end
tasm: Number of errors = 0
