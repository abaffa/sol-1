0001   0000             ; --- Filename: primes.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- begin text block
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 07 07 04      call primes
0010   0405             ; --- begin inline asm block
0011   0405 05 0B       		syscall sys_terminate_proc
0012   0407             	; --- end inline asm block
0013   0407             primes:
0014   0407 D2            push bp
0015   0408 9B            mov bp, sp
0016   0409 26 02 00      mov b, 2
0017   040C FD 42 F9 04   mov [n], b
0018   0410             _while1_cond:
0019   0410 29 F9 04      mov b, [n]
0020   0413 D7            push a
0021   0414 11            mov a, b
0022   0415 26 F4 01      mov b, 500
0023   0418 B0            cmp a, b
0024   0419 0E            lodflgs
0025   041A 87 02         and al, %00000010
0026   041C 22 00         mov ah, 0
0027   041E 27            mov b, a
0028   041F E4            pop a
0029   0420 C0 00 00      cmp b, 0
0030   0423 C6 F1 04      je _while1_exit
0031   0426             _while1_block:
0032   0426 29 F9 04      mov b, [n]
0033   0429 FD 42 FF 04   mov [s], b
0034   042D 26 00 00      mov b, 0
0035   0430 FD 42 03 05   mov [divides], b
0036   0434 26 02 00      mov b, 2
0037   0437 FD 42 FB 04   mov [i], b
0038   043B             _while2_cond:
0039   043B 29 FB 04      mov b, [i]
0040   043E D7            push a
0041   043F 11            mov a, b
0042   0440 29 FF 04      mov b, [s]
0043   0443 B0            cmp a, b
0044   0444 0E            lodflgs
0045   0445 87 02         and al, %00000010
0046   0447 22 00         mov ah, 0
0047   0449 27            mov b, a
0048   044A E4            pop a
0049   044B C0 00 00      cmp b, 0
0050   044E C6 A9 04      je _while2_exit
0051   0451             _while2_block:
0052   0451             _if3_cond:
0053   0451 29 F9 04      mov b, [n]
0054   0454 D7            push a
0055   0455 11            mov a, b
0056   0456 29 FB 04      mov b, [i]
0057   0459 AE            div a, b
0058   045A E4            pop a
0059   045B D7            push a
0060   045C 11            mov a, b
0061   045D 26 00 00      mov b, 0
0062   0460 B0            cmp a, b
0063   0461 0E            lodflgs
0064   0462 87 01         and al, %00000001
0065   0464 22 00         mov ah, 0
0066   0466 27            mov b, a
0067   0467 E4            pop a
0068   0468 C0 00 00      cmp b, 0
0069   046B C6 7B 04      je _if3_exit
0070   046E             _if3_true:
0071   046E 26 01 00      mov b, 1
0072   0471 FD 42 03 05   mov [divides], b
0073   0475 0A A9 04      jmp _while2_exit
0074   0478 0A 7B 04      jmp _if3_exit
0075   047B             _if3_exit:
0076   047B 29 FB 04      mov b, [i]
0077   047E D7            push a
0078   047F 11            mov a, b
0079   0480 26 01 00      mov b, 1
0080   0483 54            add a, b
0081   0484 27            mov b, a
0082   0485 E4            pop a
0083   0486 FD 42 FB 04   mov [i], b
0084   048A             _if4_cond:
0085   048A 29 FB 04      mov b, [i]
0086   048D D7            push a
0087   048E 11            mov a, b
0088   048F 29 F9 04      mov b, [n]
0089   0492 B0            cmp a, b
0090   0493 0E            lodflgs
0091   0494 87 01         and al, %00000001
0092   0496 22 00         mov ah, 0
0093   0498 27            mov b, a
0094   0499 E4            pop a
0095   049A C0 00 00      cmp b, 0
0096   049D C6 A6 04      je _if4_exit
0097   04A0             _if4_true:
0098   04A0 0A A9 04      jmp _while2_exit
0099   04A3 0A A6 04      jmp _if4_exit
0100   04A6             _if4_exit:
0101   04A6 0A 3B 04      jmp _while2_cond
0102   04A9             _while2_exit:
0103   04A9             _if5_cond:
0104   04A9 29 03 05      mov b, [divides]
0105   04AC D7            push a
0106   04AD 11            mov a, b
0107   04AE 26 00 00      mov b, 0
0108   04B1 B0            cmp a, b
0109   04B2 0E            lodflgs
0110   04B3 87 01         and al, %00000001
0111   04B5 22 00         mov ah, 0
0112   04B7 27            mov b, a
0113   04B8 E4            pop a
0114   04B9 C0 00 00      cmp b, 0
0115   04BC C6 DF 04      je _if5_exit
0116   04BF             _if5_true:
0117   04BF 29 01 05      mov b, [count]
0118   04C2 D7            push a
0119   04C3 11            mov a, b
0120   04C4 26 01 00      mov b, 1
0121   04C7 54            add a, b
0122   04C8 27            mov b, a
0123   04C9 E4            pop a
0124   04CA FD 42 01 05   mov [count], b
0125   04CE             ; --- begin inline asm block
0126   04CE 14 F9 04    				mov a, [n]
0127   04D1 07 7D 07    				call print_u16d
0128   04D4 3B 07 05    				mov d, newline
0129   04D7 15          				mov a, [d]
0130   04D8 3C          				mov d, a
0131   04D9 07 54 07    				call puts
0132   04DC             			; --- end inline asm block
0133   04DC 0A DF 04      jmp _if5_exit
0134   04DF             _if5_exit:
0135   04DF 29 F9 04      mov b, [n]
0136   04E2 D7            push a
0137   04E3 11            mov a, b
0138   04E4 26 01 00      mov b, 1
0139   04E7 54            add a, b
0140   04E8 27            mov b, a
0141   04E9 E4            pop a
0142   04EA FD 42 F9 04   mov [n], b
0143   04EE 0A 10 04      jmp _while1_cond
0144   04F1             _while1_exit:
0145   04F1 F9            leave
0146   04F2 09            ret
0147   04F3             ; --- end text block
0148   04F3             
0149   04F3             ; --- begin data block
0150   04F3 00 00       x: .fill 2, 00
0151   04F5 00 00       y: .fill 2, 00
0152   04F7 00 00       z: .fill 2, 00
0153   04F9 00 00       n: .fill 2, 00
0154   04FB 00 00       i: .fill 2, 00
0155   04FD 00 00       j: .fill 2, 00
0156   04FF 00 00       s: .fill 2, 00
0157   0501 00 00       count: .fill 2, 00
0158   0503 00 00       divides: .fill 2, 00
0159   0505 0A 00       newline_data: .db "\n", 0
0160   0507 05 05       newline: .dw newline_data
0161   0509 54 52 55 45 s1_data: .db "TRUE", 0
0161   050D 00 
0162   050E 09 05       s1: .dw s1_data
0163   0510             ; --- end data block
0164   0510             ; --- begin include block
0165   0510             .include "lib/stdio.asm"
0001+  0510             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0510             ; stdio.s
0003+  0510             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0510             .include "lib/string.asm"
0001++ 0510             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0510             ; string.s
0003++ 0510             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0510             
0005++ 0510             
0006++ 0510             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0510             ; strrev
0008++ 0510             ; reverse a string
0009++ 0510             ; D = string address
0010++ 0510             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0510             ; 01234
0012++ 0510             strrev:
0013++ 0510 4B          	pusha
0014++ 0511 07 57 05    	call strlen	; length in C
0015++ 0514 12          	mov a, c
0016++ 0515 AF 01 00    	cmp a, 1
0017++ 0518 D0 32 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 051B 7D          	dec a
0019++ 051C FD 4E       	mov si, d	; beginning of string
0020++ 051E FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0520 59          	add d, a	; end of string
0022++ 0521 12          	mov a, c
0023++ 0522 FD 9B       	shr a		; divide by 2
0024++ 0524 39          	mov c, a	; C now counts the steps
0025++ 0525             strrev_L0:
0026++ 0525 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0526 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0527 3E          	mov [d], al	; store left char into right side
0029++ 0528 1B          	mov al, bl
0030++ 0529 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 052A 7E          	dec c
0032++ 052B 7F          	dec d
0033++ 052C C2 00 00    	cmp c, 0
0034++ 052F C7 25 05    	jne strrev_L0
0035++ 0532             strrev_end:
0036++ 0532 4C          	popa
0037++ 0533 09          	ret
0038++ 0534             	
0039++ 0534             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0534             ; strchr
0041++ 0534             ; search string in D for char in AL
0042++ 0534             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0534             strchr:
0044++ 0534             strchr_L0:
0045++ 0534 32          	mov bl, [d]
0046++ 0535 C1 00       	cmp bl, 0
0047++ 0537 C6 42 05    	je strchr_end
0048++ 053A BA          	cmp al, bl
0049++ 053B C6 42 05    	je strchr_end
0050++ 053E 79          	inc d
0051++ 053F 0A 34 05    	jmp strchr_L0
0052++ 0542             strchr_end:
0053++ 0542 1B          	mov al, bl
0054++ 0543 09          	ret
0055++ 0544             
0056++ 0544             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0544             ; strstr
0058++ 0544             ; find sub-string
0059++ 0544             ; str1 in SI
0060++ 0544             ; str2 in DI
0061++ 0544             ; SI points to end of source string
0062++ 0544             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0544             strstr:
0064++ 0544 DB          	push al
0065++ 0545 DA          	push d
0066++ 0546 E3          	push di
0067++ 0547             strstr_loop:
0068++ 0547 F3          	cmpsb					; compare a byte of the strings
0069++ 0548 C7 53 05    	jne strstr_ret
0070++ 054B FC 00 00    	lea d, [di + 0]
0071++ 054E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0550 C7 47 05    	jne strstr_loop				; equal chars but not at end
0073++ 0553             strstr_ret:
0074++ 0553 F0          	pop di
0075++ 0554 E7          	pop d
0076++ 0555 E8          	pop al
0077++ 0556 09          	ret
0078++ 0557             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0557             ; length of null terminated string
0080++ 0557             ; result in C
0081++ 0557             ; pointer in D
0082++ 0557             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0557             strlen:
0084++ 0557 DA          	push d
0085++ 0558 38 00 00    	mov c, 0
0086++ 055B             strlen_L1:
0087++ 055B BD 00       	cmp byte [d], 0
0088++ 055D C6 65 05    	je strlen_ret
0089++ 0560 79          	inc d
0090++ 0561 78          	inc c
0091++ 0562 0A 5B 05    	jmp strlen_L1
0092++ 0565             strlen_ret:
0093++ 0565 E7          	pop d
0094++ 0566 09          	ret
0095++ 0567             
0096++ 0567             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0567             ; STRCMP
0098++ 0567             ; compare two strings
0099++ 0567             ; str1 in SI
0100++ 0567             ; str2 in DI
0101++ 0567             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0567             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0567             strcmp:
0104++ 0567 DB          	push al
0105++ 0568 DA          	push d
0106++ 0569 E3          	push di
0107++ 056A E2          	push si
0108++ 056B             strcmp_loop:
0109++ 056B F3          	cmpsb					; compare a byte of the strings
0110++ 056C C7 77 05    	jne strcmp_ret
0111++ 056F FB FF FF    	lea d, [si +- 1]
0112++ 0572 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0574 C7 6B 05    	jne strcmp_loop				; equal chars but not at end
0114++ 0577             strcmp_ret:
0115++ 0577 EF          	pop si
0116++ 0578 F0          	pop di
0117++ 0579 E7          	pop d
0118++ 057A E8          	pop al
0119++ 057B 09          	ret
0120++ 057C             
0121++ 057C             
0122++ 057C             ; STRCPY
0123++ 057C             ; copy null terminated string from SI to DI
0124++ 057C             ; source in SI
0125++ 057C             ; destination in DI
0126++ 057C             strcpy:
0127++ 057C E2          	push si
0128++ 057D E3          	push di
0129++ 057E DB          	push al
0130++ 057F             strcpy_L1:
0131++ 057F F6          	lodsb
0132++ 0580 F7          	stosb
0133++ 0581 B9 00       	cmp al, 0
0134++ 0583 C7 7F 05    	jne strcpy_L1
0135++ 0586             strcpy_end:
0136++ 0586 E8          	pop al
0137++ 0587 F0          	pop di
0138++ 0588 EF          	pop si
0139++ 0589 09          	ret
0140++ 058A             
0141++ 058A             ; STRCAT
0142++ 058A             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 058A             ; source in SI
0144++ 058A             ; destination in DI
0145++ 058A             strcat:
0146++ 058A E2          	push si
0147++ 058B E3          	push di
0148++ 058C D7          	push a
0149++ 058D DA          	push d
0150++ 058E 50          	mov a, di
0151++ 058F 3C          	mov d, a
0152++ 0590             strcat_goto_end_L1:
0153++ 0590 BD 00       	cmp byte[d], 0
0154++ 0592 C6 99 05    	je strcat_start
0155++ 0595 79          	inc d
0156++ 0596 0A 90 05    	jmp strcat_goto_end_L1
0157++ 0599             strcat_start:
0158++ 0599 FD 50       	mov di, d
0159++ 059B             strcat_L1:
0160++ 059B F6          	lodsb
0161++ 059C F7          	stosb
0162++ 059D B9 00       	cmp al, 0
0163++ 059F C7 9B 05    	jne strcat_L1
0164++ 05A2             strcat_end:
0165++ 05A2 E7          	pop d
0166++ 05A3 E4          	pop a
0167++ 05A4 F0          	pop di
0168++ 05A5 EF          	pop si
0169++ 05A6 09          	ret
0005+  05A7             
0006+  05A7 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  05AB 34 35 36 37 
0006+  05AF 38 39 41 42 
0006+  05B3 43 44 45 46 
0007+  05B7             
0008+  05B7 01 00       table_power:.dw 1
0009+  05B9 0A 00       			.dw 10
0010+  05BB 64 00       			.dw 100
0011+  05BD E8 03       			.dw 1000
0012+  05BF 10 27       			.dw 10000
0013+  05C1             
0014+  05C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  05C1             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  05C1             ; ASCII in BL
0017+  05C1             ; result in AL
0018+  05C1             ; ascii for F = 0100 0110
0019+  05C1             ; ascii for 9 = 0011 1001
0020+  05C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  05C1             hex_ascii_encode:
0022+  05C1 1B          	mov al, bl
0023+  05C2 93 40       	test al, $40				; test if letter or number
0024+  05C4 C7 CA 05    	jnz hex_letter
0025+  05C7 87 0F       	and al, $0F				; get number
0026+  05C9 09          	ret
0027+  05CA             hex_letter:
0028+  05CA 87 0F       	and al, $0F				; get letter
0029+  05CC 6A 09       	add al, 9
0030+  05CE 09          	ret
0031+  05CF             
0032+  05CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  05CF             ; ATOI
0034+  05CF             ; 2 letter hex string in B
0035+  05CF             ; 8bit integer returned in AL
0036+  05CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  05CF             atoi:
0038+  05CF D8          	push b
0039+  05D0 07 C1 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  05D3 30          	mov bl, bh
0041+  05D4 DB          	push al					; save a
0042+  05D5 07 C1 05    	call hex_ascii_encode
0043+  05D8 EA          	pop bl	
0044+  05D9 FD 9E 04    	shl al, 4
0045+  05DC 8C          	or al, bl
0046+  05DD E5          	pop b
0047+  05DE 09          	ret	
0048+  05DF             
0049+  05DF             
0050+  05DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  05DF             ; printf
0052+  05DF             ; no need for explanations!
0053+  05DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  05DF             printf:
0055+  05DF 09          	ret
0056+  05E0             
0057+  05E0             
0058+  05E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  05E0             ; scanf
0060+  05E0             ; no need for explanations!
0061+  05E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  05E0             scanf:
0063+  05E0 09          	ret
0064+  05E1             
0065+  05E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  05E1             ; ITOA
0067+  05E1             ; 8bit value in BL
0068+  05E1             ; 2 byte ASCII result in A
0069+  05E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  05E1             itoa:
0071+  05E1 DA          	push d
0072+  05E2 D8          	push b
0073+  05E3 A7 00       	mov bh, 0
0074+  05E5 FD A4 04    	shr bl, 4	
0075+  05E8 74          	mov d, b
0076+  05E9 1F A7 05    	mov al, [d + s_hex_digits]
0077+  05EC 23          	mov ah, al
0078+  05ED             	
0079+  05ED E5          	pop b
0080+  05EE D8          	push b
0081+  05EF A7 00       	mov bh, 0
0082+  05F1 FD 87 0F    	and bl, $0F
0083+  05F4 74          	mov d, b
0084+  05F5 1F A7 05    	mov al, [d + s_hex_digits]
0085+  05F8 E5          	pop b
0086+  05F9 E7          	pop d
0087+  05FA 09          	ret
0088+  05FB             
0089+  05FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  05FB             ; HEX STRING TO BINARY
0091+  05FB             ; di = destination address
0092+  05FB             ; si = source
0093+  05FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  05FB             hex_to_int:
0095+  05FB             hex_to_int_L1:
0096+  05FB F6          	lodsb					; load from [SI] to AL
0097+  05FC B9 00       	cmp al, 0				; check if ASCII 0
0098+  05FE C6 0B 06    	jz hex_to_int_ret
0099+  0601 36          	mov bh, al
0100+  0602 F6          	lodsb
0101+  0603 2F          	mov bl, al
0102+  0604 07 CF 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0607 F7          	stosb					; store AL to [DI]
0104+  0608 0A FB 05    	jmp hex_to_int_L1
0105+  060B             hex_to_int_ret:
0106+  060B 09          	ret		
0107+  060C             
0108+  060C             
0109+  060C             
0110+  060C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  060C             ; GETCHAR
0112+  060C             ; char in ah
0113+  060C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  060C             getchar:
0115+  060C DB          	push al
0116+  060D             getchar_retry:
0117+  060D FD 0C       	sti
0118+  060F 19 01       	mov al, 1
0119+  0611 05 03       	syscall sys_io			; receive in AH
0120+  0613 B9 00       	cmp al, 0			; check if any char was receive
0121+  0615 C6 0D 06    	je getchar_retry
0122+  0618 E8          	pop al
0123+  0619 09          	ret
0124+  061A             
0125+  061A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  061A             ; PUTCHAR
0127+  061A             ; char in ah
0128+  061A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  061A             putchar:
0130+  061A D7          	push a
0131+  061B 19 00       	mov al, 0
0132+  061D 05 03       	syscall sys_io			; char in AH
0133+  061F E4          	pop a
0134+  0620 09          	ret
0135+  0621             
0136+  0621             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  0621             ;; INPUT A STRING
0138+  0621             ;; terminates with null
0139+  0621             ;; pointer in D
0140+  0621             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0621             gets:
0142+  0621 D7          	push a
0143+  0622 DA          	push d
0144+  0623             gets_loop:
0145+  0623 FD 0C       	sti
0146+  0625 19 01       	mov al, 1
0147+  0627 05 03       	syscall sys_io			; receive in AH
0148+  0629 B9 00       	cmp al, 0				; check error code (AL)
0149+  062B C6 23 06    	je gets_loop			; if no char received, retry
0150+  062E             
0151+  062E 76 1B       	cmp ah, 27
0152+  0630 C6 51 06    	je gets_telnet_escape
0153+  0633 76 0A       	cmp ah, $0A				; LF
0154+  0635 C6 AA 06    	je gets_end
0155+  0638 76 0D       	cmp ah, $0D				; CR
0156+  063A C6 AA 06    	je gets_end
0157+  063D 76 5C       	cmp ah, $5C				; '\\'
0158+  063F C6 81 06    	je gets_escape
0159+  0642             	
0160+  0642 76 08       	cmp ah, $08			; check for backspace
0161+  0644 C6 4D 06    	je gets_backspace
0162+  0647             
0163+  0647 1A          	mov al, ah
0164+  0648 3E          	mov [d], al
0165+  0649 79          	inc d
0166+  064A 0A 23 06    	jmp gets_loop
0167+  064D             gets_backspace:
0168+  064D 7F          	dec d
0169+  064E 0A 23 06    	jmp gets_loop
0170+  0651             gets_telnet_escape:
0171+  0651 FD 0C       	sti
0172+  0653 19 01       	mov al, 1
0173+  0655 05 03       	syscall sys_io				; receive in AH without echo
0174+  0657 B9 00       	cmp al, 0					; check error code (AL)
0175+  0659 C6 51 06    	je gets_telnet_escape		; if no char received, retry
0176+  065C 76 5B       	cmp ah, '['
0177+  065E C7 23 06    	jne gets_loop
0178+  0661             gets_telnet_escape_phase2:
0179+  0661 FD 0C       	sti
0180+  0663 19 01       	mov al, 1
0181+  0665 05 03       	syscall sys_io					; receive in AH without echo
0182+  0667 B9 00       	cmp al, 0						; check error code (AL)
0183+  0669 C6 61 06    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  066C 76 44       	cmp ah, 'D'
0185+  066E C6 79 06    	je gets_left_arrow
0186+  0671 76 43       	cmp ah, 'C'
0187+  0673 C6 7D 06    	je gets_right_arrow
0188+  0676 0A 23 06    	jmp gets_loop
0189+  0679             gets_left_arrow:
0190+  0679 7F          	dec d
0191+  067A 0A 23 06    	jmp gets_loop
0192+  067D             gets_right_arrow:
0193+  067D 79          	inc d
0194+  067E 0A 23 06    	jmp gets_loop
0195+  0681             gets_escape:
0196+  0681 FD 0C       	sti
0197+  0683 19 01       	mov al, 1
0198+  0685 05 03       	syscall sys_io			; receive in AH
0199+  0687 B9 00       	cmp al, 0				; check error code (AL)
0200+  0689 C6 81 06    	je gets_escape			; if no char received, retry
0201+  068C 76 6E       	cmp ah, 'n'
0202+  068E C6 9C 06    	je gets_LF
0203+  0691 76 72       	cmp ah, 'r'
0204+  0693 C6 A3 06    	je gets_CR
0205+  0696 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  0697 3E          	mov [d], al
0207+  0698 79          	inc d
0208+  0699 0A 23 06    	jmp gets_loop
0209+  069C             gets_LF:
0210+  069C 19 0A       	mov al, $0A
0211+  069E 3E          	mov [d], al
0212+  069F 79          	inc d
0213+  06A0 0A 23 06    	jmp gets_loop
0214+  06A3             gets_CR:
0215+  06A3 19 0D       	mov al, $0D
0216+  06A5 3E          	mov [d], al
0217+  06A6 79          	inc d
0218+  06A7 0A 23 06    	jmp gets_loop
0219+  06AA             gets_end:
0220+  06AA 19 00       	mov al, 0
0221+  06AC 3E          	mov [d], al				; terminate string
0222+  06AD E7          	pop d
0223+  06AE E4          	pop a
0224+  06AF 09          	ret
0225+  06B0             
0226+  06B0             
0227+  06B0             
0228+  06B0             
0229+  06B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  06B0             ;; INPUT TEXT
0231+  06B0             ;; terminated with CTRL+D
0232+  06B0             ;; pointer in D
0233+  06B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  06B0             gettxt:
0235+  06B0 D7          	push a
0236+  06B1 DA          	push d
0237+  06B2             gettxt_loop:
0238+  06B2 19 01       	mov al, 1
0239+  06B4 05 03       	syscall sys_io			; receive in AH
0240+  06B6 B9 00       	cmp al, 0				; check error code (AL)
0241+  06B8 C6 B2 06    	je gettxt_loop		; if no char received, retry
0242+  06BB 76 04       	cmp ah, 4			; EOT
0243+  06BD C6 FB 06    	je gettxt_end
0244+  06C0 76 08       	cmp ah, $08			; check for backspace
0245+  06C2 C6 F7 06    	je gettxt_backspace
0246+  06C5 76 5C       	cmp ah, $5C				; '\\'
0247+  06C7 C6 D0 06    	je gettxt_escape
0248+  06CA 1A          	mov al, ah
0249+  06CB 3E          	mov [d], al
0250+  06CC 79          	inc d
0251+  06CD 0A B2 06    	jmp gettxt_loop
0252+  06D0             gettxt_escape:
0253+  06D0 19 01       	mov al, 1
0254+  06D2 05 03       	syscall sys_io			; receive in AH
0255+  06D4 B9 00       	cmp al, 0				; check error code (AL)
0256+  06D6 C6 D0 06    	je gettxt_escape		; if no char received, retry
0257+  06D9 76 6E       	cmp ah, 'n'
0258+  06DB C6 E9 06    	je gettxt_LF
0259+  06DE 76 72       	cmp ah, 'r'
0260+  06E0 C6 F0 06    	je gettxt_CR
0261+  06E3 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  06E4 3E          	mov [d], al
0263+  06E5 79          	inc d
0264+  06E6 0A B2 06    	jmp gettxt_loop
0265+  06E9             gettxt_LF:
0266+  06E9 19 0A       	mov al, $0A
0267+  06EB 3E          	mov [d], al
0268+  06EC 79          	inc d
0269+  06ED 0A B2 06    	jmp gettxt_loop
0270+  06F0             gettxt_CR:
0271+  06F0 19 0D       	mov al, $0D
0272+  06F2 3E          	mov [d], al
0273+  06F3 79          	inc d
0274+  06F4 0A B2 06    	jmp gettxt_loop
0275+  06F7             gettxt_backspace:
0276+  06F7 7F          	dec d
0277+  06F8 0A B2 06    	jmp gettxt_loop
0278+  06FB             gettxt_end:
0279+  06FB 19 00       	mov al, 0
0280+  06FD 3E          	mov [d], al				; terminate string
0281+  06FE E7          	pop d
0282+  06FF E4          	pop a
0283+  0700 09          	ret
0284+  0701             
0285+  0701             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0701             ; PRINT NEW LINE
0287+  0701             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  0701             printnl:
0289+  0701 D7          	push a
0290+  0702 10 00 0A    	mov a, $0A00
0291+  0705 05 03       	syscall sys_io
0292+  0707 10 00 0D    	mov a, $0D00
0293+  070A 05 03       	syscall sys_io
0294+  070C E4          	pop a
0295+  070D 09          	ret
0296+  070E             
0297+  070E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  070E             ; strtoint
0299+  070E             ; 4 digit hex string number in d
0300+  070E             ; integer returned in A
0301+  070E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  070E             strtointx:
0303+  070E D8          	push b
0304+  070F 32          	mov bl, [d]
0305+  0710 37          	mov bh, bl
0306+  0711 33 01 00    	mov bl, [d + 1]
0307+  0714 07 CF 05    	call atoi				; convert to int in AL
0308+  0717 23          	mov ah, al				; move to AH
0309+  0718 33 02 00    	mov bl, [d + 2]
0310+  071B 37          	mov bh, bl
0311+  071C 33 03 00    	mov bl, [d + 3]
0312+  071F 07 CF 05    	call atoi				; convert to int in AL
0313+  0722 E5          	pop b
0314+  0723 09          	ret
0315+  0724             
0316+  0724             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  0724             ; strtoint
0318+  0724             ; 5 digit base10 string number in d
0319+  0724             ; integer returned in A
0320+  0724             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  0724             strtoint:
0322+  0724 E2          	push si
0323+  0725 D8          	push b
0324+  0726 D9          	push c
0325+  0727 DA          	push d
0326+  0728 07 57 05    	call strlen			; get string length in C
0327+  072B 7E          	dec c
0328+  072C FD 4E       	mov si, d
0329+  072E 12          	mov a, c
0330+  072F FD 99       	shl a
0331+  0731 3B B7 05    	mov d, table_power
0332+  0734 59          	add d, a
0333+  0735 38 00 00    	mov c, 0
0334+  0738             strtoint_L0:
0335+  0738 F6          	lodsb			; load ASCII to al
0336+  0739 B9 00       	cmp al, 0
0337+  073B C6 4E 07    	je strtoint_end
0338+  073E 6F 30       	sub al, $30		; make into integer
0339+  0740 22 00       	mov ah, 0
0340+  0742 2A          	mov b, [d]
0341+  0743 AC          	mul a, b			; result in B since it fits in 16bits
0342+  0744 11          	mov a, b
0343+  0745 28          	mov b, c
0344+  0746 54          	add a, b
0345+  0747 39          	mov c, a
0346+  0748 63 02 00    	sub d, 2
0347+  074B 0A 38 07    	jmp strtoint_L0
0348+  074E             strtoint_end:
0349+  074E 12          	mov a, c
0350+  074F E7          	pop d
0351+  0750 E6          	pop c
0352+  0751 E5          	pop b
0353+  0752 EF          	pop si
0354+  0753 09          	ret
0355+  0754             
0356+  0754             
0357+  0754             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  0754             ; PRINT NULL TERMINATED STRING
0359+  0754             ; pointer in D
0360+  0754             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  0754             puts:
0362+  0754 D7          	push a
0363+  0755 DA          	push d
0364+  0756             puts_L1:
0365+  0756 1E          	mov al, [d]
0366+  0757 B9 00       	cmp al, 0
0367+  0759 C6 65 07    	jz puts_END
0368+  075C 23          	mov ah, al
0369+  075D 19 00       	mov al, 0
0370+  075F 05 03       	syscall sys_io
0371+  0761 79          	inc d
0372+  0762 0A 56 07    	jmp puts_L1
0373+  0765             puts_END:
0374+  0765 E7          	pop d
0375+  0766 E4          	pop a
0376+  0767 09          	ret
0377+  0768             
0378+  0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0768             ; PRINT N SIZE STRING
0380+  0768             ; pointer in D
0381+  0768             ; size in C
0382+  0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  0768             putsn:
0384+  0768 DB          	push al
0385+  0769 DA          	push d
0386+  076A D9          	push c
0387+  076B             putsn_L0:
0388+  076B 1E          	mov al, [d]
0389+  076C 23          	mov ah, al
0390+  076D 19 00       	mov al, 0
0391+  076F 05 03       	syscall sys_io
0392+  0771 79          	inc d
0393+  0772 7E          	dec c	
0394+  0773 C2 00 00    	cmp c, 0
0395+  0776 C7 6B 07    	jne putsn_L0
0396+  0779             putsn_end:
0397+  0779 E6          	pop c
0398+  077A E7          	pop d
0399+  077B E8          	pop al
0400+  077C 09          	ret
0401+  077D             
0402+  077D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  077D             ; print 16bit decimal number
0404+  077D             ; input number in A
0405+  077D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  077D             print_u16d:
0407+  077D D7          	push a
0408+  077E D8          	push b
0409+  077F 26 10 27    	mov b, 10000
0410+  0782 AE          	div a, b			; get 10000 coeff.
0411+  0783 07 A9 07    	call print_number
0412+  0786 11          	mov a, b
0413+  0787 26 E8 03    	mov b, 1000
0414+  078A AE          	div a, b			; get 10000 coeff.
0415+  078B 07 A9 07    	call print_number
0416+  078E 11          	mov a, b
0417+  078F 26 64 00    	mov b, 100
0418+  0792 AE          	div a, b
0419+  0793 07 A9 07    	call print_number
0420+  0796 11          	mov a, b
0421+  0797 26 0A 00    	mov b, 10
0422+  079A AE          	div a, b
0423+  079B 07 A9 07    	call print_number
0424+  079E 11          	mov a, b
0425+  079F 6A 30       	add al, $30
0426+  07A1 23          	mov ah, al
0427+  07A2 19 00       	mov al, 0
0428+  07A4 05 03       	syscall sys_io	; print coeff
0429+  07A6 E5          	pop b
0430+  07A7 E4          	pop a
0431+  07A8 09          	ret
0432+  07A9             
0433+  07A9             
0434+  07A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  07A9             ; if A == 0, print space
0436+  07A9             ; else print A
0437+  07A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  07A9             print_number:
0439+  07A9 6A 30       	add al, $30
0440+  07AB 23          	mov ah, al
0441+  07AC 07 1A 06    	call putchar
0442+  07AF 09          	ret
0443+  07B0             
0444+  07B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  07B0             ; PRINT 16BIT HEX INTEGER
0446+  07B0             ; integer value in reg B
0447+  07B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  07B0             print_u16x:
0449+  07B0 D7          	push a
0450+  07B1 D8          	push b
0451+  07B2 DD          	push bl
0452+  07B3 30          	mov bl, bh
0453+  07B4 07 E1 05    	call itoa				; convert bh to char in A
0454+  07B7 2F          	mov bl, al				; save al
0455+  07B8 19 00       	mov al, 0
0456+  07BA 05 03       	syscall sys_io				; display AH
0457+  07BC 24          	mov ah, bl				; retrieve al
0458+  07BD 19 00       	mov al, 0
0459+  07BF 05 03       	syscall sys_io				; display AL
0460+  07C1             
0461+  07C1 EA          	pop bl
0462+  07C2 07 E1 05    	call itoa				; convert bh to char in A
0463+  07C5 2F          	mov bl, al				; save al
0464+  07C6 19 00       	mov al, 0
0465+  07C8 05 03       	syscall sys_io				; display AH
0466+  07CA 24          	mov ah, bl				; retrieve al
0467+  07CB 19 00       	mov al, 0
0468+  07CD 05 03       	syscall sys_io				; display AL
0469+  07CF             
0470+  07CF E5          	pop b
0471+  07D0 E4          	pop a
0472+  07D1 09          	ret
0473+  07D2             
0474+  07D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  07D2             ; INPUT 16BIT HEX INTEGER
0476+  07D2             ; read 16bit integer into A
0477+  07D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  07D2             scan_u16x:
0479+  07D2 F8 10 00    	enter 16
0480+  07D5 D8          	push b
0481+  07D6 DA          	push d
0482+  07D7             
0483+  07D7 FA F1 FF    	lea d, [bp + -15]
0484+  07DA 07 21 06    	call gets				; get number
0485+  07DD             
0486+  07DD 32          	mov bl, [d]
0487+  07DE 37          	mov bh, bl
0488+  07DF 33 01 00    	mov bl, [d + 1]
0489+  07E2 07 CF 05    	call atoi				; convert to int in AL
0490+  07E5 23          	mov ah, al				; move to AH
0491+  07E6             
0492+  07E6 33 02 00    	mov bl, [d + 2]
0493+  07E9 37          	mov bh, bl
0494+  07EA 33 03 00    	mov bl, [d + 3]
0495+  07ED 07 CF 05    	call atoi				; convert to int in AL
0496+  07F0             
0497+  07F0 E7          	pop d
0498+  07F1 E5          	pop b
0499+  07F2 F9          	leave
0500+  07F3 09          	ret
0501+  07F4             
0502+  07F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  07F4             ; PRINT 8bit HEX INTEGER
0504+  07F4             ; integer value in reg bl
0505+  07F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  07F4             print_u8x:
0507+  07F4 D7          	push a
0508+  07F5 DD          	push bl
0509+  07F6             
0510+  07F6 07 E1 05    	call itoa				; convert bl to char in A
0511+  07F9 2F          	mov bl, al				; save al
0512+  07FA 19 00       	mov al, 0
0513+  07FC 05 03       	syscall sys_io				; display AH
0514+  07FE 24          	mov ah, bl				; retrieve al
0515+  07FF 19 00       	mov al, 0
0516+  0801 05 03       	syscall sys_io				; display AL
0517+  0803             
0518+  0803 EA          	pop bl
0519+  0804 E4          	pop a
0520+  0805 09          	ret
0521+  0806             
0522+  0806             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0806             ; print 8bit decimal unsigned number
0524+  0806             ; input number in AL
0525+  0806             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0806             print_u8d:
0527+  0806 D7          	push a
0528+  0807 D8          	push b
0529+  0808             
0530+  0808 22 00       	mov ah, 0
0531+  080A 26 64 00    	mov b, 100
0532+  080D AE          	div a, b
0533+  080E D8          	push b			; save remainder
0534+  080F B9 00       	cmp al, 0
0535+  0811 C6 1B 08    	je skip100
0536+  0814 6A 30       	add al, $30
0537+  0816 23          	mov ah, al
0538+  0817 19 00       	mov al, 0
0539+  0819 05 03       	syscall sys_io	; print coeff
0540+  081B             skip100:
0541+  081B E4          	pop a
0542+  081C 22 00       	mov ah, 0
0543+  081E 26 0A 00    	mov b, 10
0544+  0821 AE          	div a, b
0545+  0822 D8          	push b			; save remainder
0546+  0823 B9 00       	cmp al, 0
0547+  0825 C6 2F 08    	je skip10
0548+  0828 6A 30       	add al, $30
0549+  082A 23          	mov ah, al
0550+  082B 19 00       	mov al, 0
0551+  082D 05 03       	syscall sys_io	; print coeff
0552+  082F             skip10:
0553+  082F E4          	pop a
0554+  0830 1B          	mov al, bl
0555+  0831 6A 30       	add al, $30
0556+  0833 23          	mov ah, al
0557+  0834 19 00       	mov al, 0
0558+  0836 05 03       	syscall sys_io	; print coeff
0559+  0838 E5          	pop b
0560+  0839 E4          	pop a
0561+  083A 09          	ret
0562+  083B             
0563+  083B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  083B             ; INPUT 8BIT HEX INTEGER
0565+  083B             ; read 8bit integer into AL
0566+  083B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  083B             scan_u8x:
0568+  083B F8 04 00    	enter 4
0569+  083E D8          	push b
0570+  083F DA          	push d
0571+  0840             
0572+  0840 FA FD FF    	lea d, [bp + -3]
0573+  0843 07 21 06    	call gets				; get number
0574+  0846             
0575+  0846 32          	mov bl, [d]
0576+  0847 37          	mov bh, bl
0577+  0848 33 01 00    	mov bl, [d + 1]
0578+  084B 07 CF 05    	call atoi				; convert to int in AL
0579+  084E             
0580+  084E E7          	pop d
0581+  084F E5          	pop b
0582+  0850 F9          	leave
0583+  0851 09          	ret
0584+  0852             
0585+  0852             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  0852             ; input decimal number
0587+  0852             ; result in A
0588+  0852             ; 655'\0'
0589+  0852             ; low--------high
0590+  0852             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  0852             scan_u16d:
0592+  0852 F8 08 00    	enter 8
0593+  0855 E2          	push si
0594+  0856 D8          	push b
0595+  0857 D9          	push c
0596+  0858 DA          	push d
0597+  0859 FA F9 FF    	lea d, [bp +- 7]
0598+  085C 07 21 06    	call gets
0599+  085F 07 57 05    	call strlen			; get string length in C
0600+  0862 7E          	dec c
0601+  0863 FD 4E       	mov si, d
0602+  0865 12          	mov a, c
0603+  0866 FD 99       	shl a
0604+  0868 3B B7 05    	mov d, table_power
0605+  086B 59          	add d, a
0606+  086C 38 00 00    	mov c, 0
0607+  086F             mul_loop:
0608+  086F F6          	lodsb			; load ASCII to al
0609+  0870 B9 00       	cmp al, 0
0610+  0872 C6 85 08    	je mul_exit
0611+  0875 6F 30       	sub al, $30		; make into integer
0612+  0877 22 00       	mov ah, 0
0613+  0879 2A          	mov b, [d]
0614+  087A AC          	mul a, b			; result in B since it fits in 16bits
0615+  087B 11          	mov a, b
0616+  087C 28          	mov b, c
0617+  087D 54          	add a, b
0618+  087E 39          	mov c, a
0619+  087F 63 02 00    	sub d, 2
0620+  0882 0A 6F 08    	jmp mul_loop
0621+  0885             mul_exit:
0622+  0885 12          	mov a, c
0623+  0886 E7          	pop d
0624+  0887 E6          	pop c
0625+  0888 E5          	pop b
0626+  0889 EF          	pop si
0627+  088A F9          	leave
0628+  088B 09          	ret
0166   088C             ; --- end include block
0167   088C             
0168   088C             .end
tasm: Number of errors = 0
