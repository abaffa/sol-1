0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 F9            leave
0011   0403 05 0B         syscall sys_terminate_proc
0012   0405             
0013   0405             _gets:
0014   0405 D2            push bp
0015   0406 9B            mov bp, sp
0016   0407             
0017   0407             ; --- BEGIN INLINE ASM BLOCK
0018   0407 17 05 00      mov a, [bp + 5]
0019   040A 3C            mov d, a
0020   040B 07 A2 06      call gets
0021   040E             ; --- END INLINE ASM BLOCK
0022   040E             
0023   040E F9            leave
0024   040F 09            ret
0025   0410             
0026   0410             _strlen:
0027   0410 D2            push bp
0028   0411 9B            mov bp, sp
0029   0412 52 02 00      sub sp, 2 ; length
0030   0415 26 00 00      mov b, 0
0031   0418 D7            push a
0032   0419 11            mov a, b
0033   041A 45 FF FF      mov [bp + -1], a ; length
0034   041D E4            pop a
0035   041E             _while1_cond:
0036   041E FA 05 00      lea d, [bp + 5] ; str
0037   0421 2A            mov b, [d]
0038   0422 D7            push a
0039   0423 74            mov d, b
0040   0424 DA            push d
0041   0425 2C FF FF      mov b, [bp + -1] ; length
0042   0428 E7            pop d
0043   0429 10 01 00      mov a, 1
0044   042C AC            mul a, b
0045   042D 5A            add d, b
0046   042E E4            pop a
0047   042F 32            mov bl, [d]
0048   0430 A7 00         mov bh, 0
0049   0432 D7            push a
0050   0433 11            mov a, b
0051   0434 26 00 00      mov b, 0
0052   0437 B0            cmp a, b
0053   0438 0E            lodflgs
0054   0439 87 01         and al, %00000001
0055   043B 8F 01         xor al, %00000001 ; !=
0056   043D 22 00         mov ah, 0
0057   043F 27            mov b, a
0058   0440 E4            pop a
0059   0441 C0 00 00      cmp b, 0
0060   0444 C6 59 04      je _while1_exit
0061   0447             _while1_block:
0062   0447 2C FF FF      mov b, [bp + -1] ; length
0063   044A D7            push a
0064   044B 11            mov a, b
0065   044C FD 77         inc b
0066   044E D7            push a
0067   044F 11            mov a, b
0068   0450 45 FF FF      mov [bp + -1], a ; length
0069   0453 E4            pop a
0070   0454 27            mov b, a
0071   0455 E4            pop a
0072   0456 0A 1E 04      jmp _while1_cond
0073   0459             _while1_exit:
0074   0459 2C FF FF      mov b, [bp + -1] ; length
0075   045C F9            leave
0076   045D 09            ret
0077   045E             
0078   045E             print_num:
0079   045E D2            push bp
0080   045F 9B            mov bp, sp
0081   0460 52 05 00      sub sp, 5 ; digits
0082   0463 52 02 00      sub sp, 2 ; i
0083   0466 26 00 00      mov b, 0
0084   0469 D7            push a
0085   046A 11            mov a, b
0086   046B 45 FA FF      mov [bp + -6], a ; i
0087   046E E4            pop a
0088   046F             _if2_cond:
0089   046F 2C 05 00      mov b, [bp + 5] ; num
0090   0472 D7            push a
0091   0473 11            mov a, b
0092   0474 26 00 00      mov b, 0
0093   0477 B0            cmp a, b
0094   0478 0E            lodflgs
0095   0479 87 01         and al, %00000001 ; ==
0096   047B 22 00         mov ah, 0
0097   047D 27            mov b, a
0098   047E E4            pop a
0099   047F C0 00 00      cmp b, 0
0100   0482 C6 94 04      je _if2_exit
0101   0485             _if2_true:
0102   0485 26 30 00      mov b, $30
0103   0488 DD            push bl
0104   0489 07 63 05      call _putchar
0105   048C 51 01 00      add sp, 1
0106   048F F9            leave
0107   0490 09            ret
0108   0491 0A 94 04      jmp _if2_exit
0109   0494             _if2_exit:
0110   0494             _while3_cond:
0111   0494 2C 05 00      mov b, [bp + 5] ; num
0112   0497 D7            push a
0113   0498 11            mov a, b
0114   0499 26 00 00      mov b, 0
0115   049C B0            cmp a, b
0116   049D 0E            lodflgs
0117   049E 2F            mov bl, al
0118   049F FD 78         mov g, a
0119   04A1 FD A2 03      shr al, 3
0120   04A4 FD A4 02      shr bl, 2
0121   04A7 FD 87 01      and bl, %00000001
0122   04AA 90            xor al, bl
0123   04AB FD 27         mov b, g
0124   04AD FD 87 01      and bl, %00000001
0125   04B0 8C            or al, bl
0126   04B1 8F 01         xor al, %00000001 ; > (signed)
0127   04B3 22 00         mov ah, 0
0128   04B5 27            mov b, a
0129   04B6 E4            pop a
0130   04B7 C0 00 00      cmp b, 0
0131   04BA C6 0B 05      je _while3_exit
0132   04BD             _while3_block:
0133   04BD FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0134   04C0 2D            mov b, d
0135   04C1 D7            push a
0136   04C2 74            mov d, b
0137   04C3 DA            push d
0138   04C4 2C FA FF      mov b, [bp + -6] ; i
0139   04C7 E7            pop d
0140   04C8 10 01 00      mov a, 1
0141   04CB AC            mul a, b
0142   04CC 5A            add d, b
0143   04CD E4            pop a
0144   04CE DA            push d
0145   04CF 26 30 00      mov b, $30
0146   04D2 D7            push a
0147   04D3 11            mov a, b
0148   04D4 2C 05 00      mov b, [bp + 5] ; num
0149   04D7 D7            push a
0150   04D8 11            mov a, b
0151   04D9 26 0A 00      mov b, 10
0152   04DC AE            div a, b
0153   04DD E4            pop a
0154   04DE 54            add a, b
0155   04DF 27            mov b, a
0156   04E0 E4            pop a
0157   04E1 E7            pop d
0158   04E2 FD 3E         mov [d], bl
0159   04E4 2C 05 00      mov b, [bp + 5] ; num
0160   04E7 D7            push a
0161   04E8 11            mov a, b
0162   04E9 26 0A 00      mov b, 10
0163   04EC AE            div a, b
0164   04ED FD 78         mov g, a
0165   04EF 11            mov a, b
0166   04F0 FD 27         mov b, g
0167   04F2 E4            pop a
0168   04F3 D7            push a
0169   04F4 11            mov a, b
0170   04F5 45 05 00      mov [bp + 5], a ; num
0171   04F8 E4            pop a
0172   04F9 2C FA FF      mov b, [bp + -6] ; i
0173   04FC D7            push a
0174   04FD 11            mov a, b
0175   04FE FD 77         inc b
0176   0500 D7            push a
0177   0501 11            mov a, b
0178   0502 45 FA FF      mov [bp + -6], a ; i
0179   0505 E4            pop a
0180   0506 27            mov b, a
0181   0507 E4            pop a
0182   0508 0A 94 04      jmp _while3_cond
0183   050B             _while3_exit:
0184   050B             _while4_cond:
0185   050B 2C FA FF      mov b, [bp + -6] ; i
0186   050E D7            push a
0187   050F 11            mov a, b
0188   0510 26 00 00      mov b, 0
0189   0513 B0            cmp a, b
0190   0514 0E            lodflgs
0191   0515 2F            mov bl, al
0192   0516 FD 78         mov g, a
0193   0518 FD A2 03      shr al, 3
0194   051B FD A4 02      shr bl, 2
0195   051E FD 87 01      and bl, %00000001
0196   0521 90            xor al, bl
0197   0522 FD 27         mov b, g
0198   0524 FD 87 01      and bl, %00000001
0199   0527 8C            or al, bl
0200   0528 8F 01         xor al, %00000001 ; > (signed)
0201   052A 22 00         mov ah, 0
0202   052C 27            mov b, a
0203   052D E4            pop a
0204   052E C0 00 00      cmp b, 0
0205   0531 C6 61 05      je _while4_exit
0206   0534             _while4_block:
0207   0534 2C FA FF      mov b, [bp + -6] ; i
0208   0537 D7            push a
0209   0538 11            mov a, b
0210   0539 FD 7D         dec b
0211   053B D7            push a
0212   053C 11            mov a, b
0213   053D 45 FA FF      mov [bp + -6], a ; i
0214   0540 E4            pop a
0215   0541 27            mov b, a
0216   0542 E4            pop a
0217   0543 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0218   0546 2D            mov b, d
0219   0547 D7            push a
0220   0548 74            mov d, b
0221   0549 DA            push d
0222   054A 2C FA FF      mov b, [bp + -6] ; i
0223   054D E7            pop d
0224   054E 10 01 00      mov a, 1
0225   0551 AC            mul a, b
0226   0552 5A            add d, b
0227   0553 E4            pop a
0228   0554 32            mov bl, [d]
0229   0555 A7 00         mov bh, 0
0230   0557 DD            push bl
0231   0558 07 63 05      call _putchar
0232   055B 51 01 00      add sp, 1
0233   055E 0A 0B 05      jmp _while4_cond
0234   0561             _while4_exit:
0235   0561 F9            leave
0236   0562 09            ret
0237   0563             
0238   0563             _putchar:
0239   0563 D2            push bp
0240   0564 9B            mov bp, sp
0241   0565             
0242   0565             ; --- BEGIN INLINE ASM BLOCK
0243   0565 20 05 00      mov al, [bp + 5]
0244   0568 23            mov ah, al
0245   0569 07 9B 06      call putchar
0246   056C             ; --- END INLINE ASM BLOCK
0247   056C             
0248   056C F9            leave
0249   056D 09            ret
0250   056E             
0251   056E             scann:
0252   056E D2            push bp
0253   056F 9B            mov bp, sp
0254   0570 52 02 00      sub sp, 2 ; m
0255   0573             
0256   0573             ; --- BEGIN INLINE ASM BLOCK
0257   0573 07 D3 08      call scan_u16d
0258   0576 45 FF FF      mov [bp + -1], a
0259   0579             ; --- END INLINE ASM BLOCK
0260   0579             
0261   0579 2C FF FF      mov b, [bp + -1] ; m
0262   057C F9            leave
0263   057D 09            ret
0264   057E             
0265   057E             print:
0266   057E D2            push bp
0267   057F 9B            mov bp, sp
0268   0580             
0269   0580             ; --- BEGIN INLINE ASM BLOCK
0270   0580 17 05 00      mov a, [bp + 5]
0271   0583 3C            mov d, a
0272   0584 07 D5 07      call puts
0273   0587             ; --- END INLINE ASM BLOCK
0274   0587             
0275   0587 F9            leave
0276   0588 09            ret
0277   0589             ; --- END TEXT BLOCK
0278   0589             
0279   0589             ; --- BEGIN DATA BLOCK
0280   0589             ; --- END DATA BLOCK
0281   0589             
0282   0589             ; --- BEGIN INCLUDE BLOCK
0283   0589             .include "lib/stdio.asm"
0001+  0589             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0589             ; stdio.s
0003+  0589             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0589             .include "lib/string.asm"
0001++ 0589             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0589             ; string.s
0003++ 0589             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0589             
0005++ 0589             
0006++ 0589             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0589             ; strrev
0008++ 0589             ; reverse a string
0009++ 0589             ; D = string address
0010++ 0589             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0589             ; 01234
0012++ 0589             strrev:
0013++ 0589 4B          	pusha
0014++ 058A 07 D0 05    	call strlen	; length in C
0015++ 058D 12          	mov a, c
0016++ 058E AF 01 00    	cmp a, 1
0017++ 0591 D0 AB 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0594 7D          	dec a
0019++ 0595 FD 4E       	mov si, d	; beginning of string
0020++ 0597 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0599 59          	add d, a	; end of string
0022++ 059A 12          	mov a, c
0023++ 059B FD 9B       	shr a		; divide by 2
0024++ 059D 39          	mov c, a	; C now counts the steps
0025++ 059E             strrev_L0:
0026++ 059E 32          	mov bl, [d]	; save load right-side char into BL
0027++ 059F F6          	lodsb		; load left-side char into AL; increase SI
0028++ 05A0 3E          	mov [d], al	; store left char into right side
0029++ 05A1 1B          	mov al, bl
0030++ 05A2 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 05A3 7E          	dec c
0032++ 05A4 7F          	dec d
0033++ 05A5 C2 00 00    	cmp c, 0
0034++ 05A8 C7 9E 05    	jne strrev_L0
0035++ 05AB             strrev_end:
0036++ 05AB 4C          	popa
0037++ 05AC 09          	ret
0038++ 05AD             	
0039++ 05AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 05AD             ; strchr
0041++ 05AD             ; search string in D for char in AL
0042++ 05AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 05AD             strchr:
0044++ 05AD             strchr_L0:
0045++ 05AD 32          	mov bl, [d]
0046++ 05AE C1 00       	cmp bl, 0
0047++ 05B0 C6 BB 05    	je strchr_end
0048++ 05B3 BA          	cmp al, bl
0049++ 05B4 C6 BB 05    	je strchr_end
0050++ 05B7 79          	inc d
0051++ 05B8 0A AD 05    	jmp strchr_L0
0052++ 05BB             strchr_end:
0053++ 05BB 1B          	mov al, bl
0054++ 05BC 09          	ret
0055++ 05BD             
0056++ 05BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 05BD             ; strstr
0058++ 05BD             ; find sub-string
0059++ 05BD             ; str1 in SI
0060++ 05BD             ; str2 in DI
0061++ 05BD             ; SI points to end of source string
0062++ 05BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 05BD             strstr:
0064++ 05BD DB          	push al
0065++ 05BE DA          	push d
0066++ 05BF E3          	push di
0067++ 05C0             strstr_loop:
0068++ 05C0 F3          	cmpsb					; compare a byte of the strings
0069++ 05C1 C7 CC 05    	jne strstr_ret
0070++ 05C4 FC 00 00    	lea d, [di + 0]
0071++ 05C7 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 05C9 C7 C0 05    	jne strstr_loop				; equal chars but not at end
0073++ 05CC             strstr_ret:
0074++ 05CC F0          	pop di
0075++ 05CD E7          	pop d
0076++ 05CE E8          	pop al
0077++ 05CF 09          	ret
0078++ 05D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 05D0             ; length of null terminated string
0080++ 05D0             ; result in C
0081++ 05D0             ; pointer in D
0082++ 05D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 05D0             strlen:
0084++ 05D0 DA          	push d
0085++ 05D1 38 00 00    	mov c, 0
0086++ 05D4             strlen_L1:
0087++ 05D4 BD 00       	cmp byte [d], 0
0088++ 05D6 C6 DE 05    	je strlen_ret
0089++ 05D9 79          	inc d
0090++ 05DA 78          	inc c
0091++ 05DB 0A D4 05    	jmp strlen_L1
0092++ 05DE             strlen_ret:
0093++ 05DE E7          	pop d
0094++ 05DF 09          	ret
0095++ 05E0             
0096++ 05E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 05E0             ; STRCMP
0098++ 05E0             ; compare two strings
0099++ 05E0             ; str1 in SI
0100++ 05E0             ; str2 in DI
0101++ 05E0             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 05E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 05E0             strcmp:
0104++ 05E0 DB          	push al
0105++ 05E1 DA          	push d
0106++ 05E2 E3          	push di
0107++ 05E3 E2          	push si
0108++ 05E4             strcmp_loop:
0109++ 05E4 F3          	cmpsb					; compare a byte of the strings
0110++ 05E5 C7 F0 05    	jne strcmp_ret
0111++ 05E8 FB FF FF    	lea d, [si +- 1]
0112++ 05EB BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 05ED C7 E4 05    	jne strcmp_loop				; equal chars but not at end
0114++ 05F0             strcmp_ret:
0115++ 05F0 EF          	pop si
0116++ 05F1 F0          	pop di
0117++ 05F2 E7          	pop d
0118++ 05F3 E8          	pop al
0119++ 05F4 09          	ret
0120++ 05F5             
0121++ 05F5             
0122++ 05F5             ; STRCPY
0123++ 05F5             ; copy null terminated string from SI to DI
0124++ 05F5             ; source in SI
0125++ 05F5             ; destination in DI
0126++ 05F5             strcpy:
0127++ 05F5 E2          	push si
0128++ 05F6 E3          	push di
0129++ 05F7 DB          	push al
0130++ 05F8             strcpy_L1:
0131++ 05F8 F6          	lodsb
0132++ 05F9 F7          	stosb
0133++ 05FA B9 00       	cmp al, 0
0134++ 05FC C7 F8 05    	jne strcpy_L1
0135++ 05FF             strcpy_end:
0136++ 05FF E8          	pop al
0137++ 0600 F0          	pop di
0138++ 0601 EF          	pop si
0139++ 0602 09          	ret
0140++ 0603             
0141++ 0603             ; STRCAT
0142++ 0603             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0603             ; source in SI
0144++ 0603             ; destination in DI
0145++ 0603             strcat:
0146++ 0603 E2          	push si
0147++ 0604 E3          	push di
0148++ 0605 D7          	push a
0149++ 0606 DA          	push d
0150++ 0607 50          	mov a, di
0151++ 0608 3C          	mov d, a
0152++ 0609             strcat_goto_end_L1:
0153++ 0609 BD 00       	cmp byte[d], 0
0154++ 060B C6 12 06    	je strcat_start
0155++ 060E 79          	inc d
0156++ 060F 0A 09 06    	jmp strcat_goto_end_L1
0157++ 0612             strcat_start:
0158++ 0612 FD 50       	mov di, d
0159++ 0614             strcat_L1:
0160++ 0614 F6          	lodsb
0161++ 0615 F7          	stosb
0162++ 0616 B9 00       	cmp al, 0
0163++ 0618 C7 14 06    	jne strcat_L1
0164++ 061B             strcat_end:
0165++ 061B E7          	pop d
0166++ 061C E4          	pop a
0167++ 061D F0          	pop di
0168++ 061E EF          	pop si
0169++ 061F 09          	ret
0005+  0620             
0006+  0620 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0624 34 35 36 37 
0006+  0628 38 39 41 42 
0006+  062C 43 44 45 46 
0007+  0630 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0634 1B 5B 48 00 
0008+  0638             
0009+  0638 01 00       table_power:.dw 1
0010+  063A 0A 00       			.dw 10
0011+  063C 64 00       			.dw 100
0012+  063E E8 03       			.dw 1000
0013+  0640 10 27       			.dw 10000
0014+  0642             
0015+  0642             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0642             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0642             ; ASCII in BL
0018+  0642             ; result in AL
0019+  0642             ; ascii for F = 0100 0110
0020+  0642             ; ascii for 9 = 0011 1001
0021+  0642             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0642             hex_ascii_encode:
0023+  0642 1B          	mov al, bl
0024+  0643 93 40       	test al, $40				; test if letter or number
0025+  0645 C7 4B 06    	jnz hex_letter
0026+  0648 87 0F       	and al, $0F				; get number
0027+  064A 09          	ret
0028+  064B             hex_letter:
0029+  064B 87 0F       	and al, $0F				; get letter
0030+  064D 6A 09       	add al, 9
0031+  064F 09          	ret
0032+  0650             
0033+  0650             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0650             ; ATOI
0035+  0650             ; 2 letter hex string in B
0036+  0650             ; 8bit integer returned in AL
0037+  0650             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0650             atoi:
0039+  0650 D8          	push b
0040+  0651 07 42 06    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0654 30          	mov bl, bh
0042+  0655 DB          	push al					; save a
0043+  0656 07 42 06    	call hex_ascii_encode
0044+  0659 EA          	pop bl	
0045+  065A FD 9E 04    	shl al, 4
0046+  065D 8C          	or al, bl
0047+  065E E5          	pop b
0048+  065F 09          	ret	
0049+  0660             
0050+  0660             
0051+  0660             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0660             ; printf
0053+  0660             ; no need for explanations!
0054+  0660             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0660             printf:
0056+  0660 09          	ret
0057+  0661             
0058+  0661             
0059+  0661             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0661             ; scanf
0061+  0661             ; no need for explanations!
0062+  0661             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0661             scanf:
0064+  0661 09          	ret
0065+  0662             
0066+  0662             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0662             ; ITOA
0068+  0662             ; 8bit value in BL
0069+  0662             ; 2 byte ASCII result in A
0070+  0662             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0662             itoa:
0072+  0662 DA          	push d
0073+  0663 D8          	push b
0074+  0664 A7 00       	mov bh, 0
0075+  0666 FD A4 04    	shr bl, 4	
0076+  0669 74          	mov d, b
0077+  066A 1F 20 06    	mov al, [d + s_hex_digits]
0078+  066D 23          	mov ah, al
0079+  066E             	
0080+  066E E5          	pop b
0081+  066F D8          	push b
0082+  0670 A7 00       	mov bh, 0
0083+  0672 FD 87 0F    	and bl, $0F
0084+  0675 74          	mov d, b
0085+  0676 1F 20 06    	mov al, [d + s_hex_digits]
0086+  0679 E5          	pop b
0087+  067A E7          	pop d
0088+  067B 09          	ret
0089+  067C             
0090+  067C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  067C             ; HEX STRING TO BINARY
0092+  067C             ; di = destination address
0093+  067C             ; si = source
0094+  067C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  067C             hex_to_int:
0096+  067C             hex_to_int_L1:
0097+  067C F6          	lodsb					; load from [SI] to AL
0098+  067D B9 00       	cmp al, 0				; check if ASCII 0
0099+  067F C6 8C 06    	jz hex_to_int_ret
0100+  0682 36          	mov bh, al
0101+  0683 F6          	lodsb
0102+  0684 2F          	mov bl, al
0103+  0685 07 50 06    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0688 F7          	stosb					; store AL to [DI]
0105+  0689 0A 7C 06    	jmp hex_to_int_L1
0106+  068C             hex_to_int_ret:
0107+  068C 09          	ret		
0108+  068D             
0109+  068D             
0110+  068D             
0111+  068D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  068D             ; GETCHAR
0113+  068D             ; char in ah
0114+  068D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  068D             getchar:
0116+  068D DB          	push al
0117+  068E             getchar_retry:
0118+  068E FD 0C       	sti
0119+  0690 19 01       	mov al, 1
0120+  0692 05 03       	syscall sys_io			; receive in AH
0121+  0694 B9 00       	cmp al, 0			; check if any char was receive
0122+  0696 C6 8E 06    	je getchar_retry
0123+  0699 E8          	pop al
0124+  069A 09          	ret
0125+  069B             
0126+  069B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  069B             ; PUTCHAR
0128+  069B             ; char in ah
0129+  069B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  069B             putchar:
0131+  069B D7          	push a
0132+  069C 19 00       	mov al, 0
0133+  069E 05 03       	syscall sys_io			; char in AH
0134+  06A0 E4          	pop a
0135+  06A1 09          	ret
0136+  06A2             
0137+  06A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  06A2             ;; INPUT A STRING
0139+  06A2             ;; terminates with null
0140+  06A2             ;; pointer in D
0141+  06A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  06A2             gets:
0143+  06A2 D7          	push a
0144+  06A3 DA          	push d
0145+  06A4             gets_loop:
0146+  06A4 FD 0C       	sti
0147+  06A6 19 01       	mov al, 1
0148+  06A8 05 03       	syscall sys_io			; receive in AH
0149+  06AA B9 00       	cmp al, 0				; check error code (AL)
0150+  06AC C6 A4 06    	je gets_loop			; if no char received, retry
0151+  06AF             
0152+  06AF 76 1B       	cmp ah, 27
0153+  06B1 C6 D2 06    	je gets_telnet_escape
0154+  06B4 76 0A       	cmp ah, $0A				; LF
0155+  06B6 C6 2B 07    	je gets_end
0156+  06B9 76 0D       	cmp ah, $0D				; CR
0157+  06BB C6 2B 07    	je gets_end
0158+  06BE 76 5C       	cmp ah, $5C				; '\\'
0159+  06C0 C6 02 07    	je gets_escape
0160+  06C3             	
0161+  06C3 76 08       	cmp ah, $08			; check for backspace
0162+  06C5 C6 CE 06    	je gets_backspace
0163+  06C8             
0164+  06C8 1A          	mov al, ah
0165+  06C9 3E          	mov [d], al
0166+  06CA 79          	inc d
0167+  06CB 0A A4 06    	jmp gets_loop
0168+  06CE             gets_backspace:
0169+  06CE 7F          	dec d
0170+  06CF 0A A4 06    	jmp gets_loop
0171+  06D2             gets_telnet_escape:
0172+  06D2 FD 0C       	sti
0173+  06D4 19 01       	mov al, 1
0174+  06D6 05 03       	syscall sys_io				; receive in AH without echo
0175+  06D8 B9 00       	cmp al, 0					; check error code (AL)
0176+  06DA C6 D2 06    	je gets_telnet_escape		; if no char received, retry
0177+  06DD 76 5B       	cmp ah, '['
0178+  06DF C7 A4 06    	jne gets_loop
0179+  06E2             gets_telnet_escape_phase2:
0180+  06E2 FD 0C       	sti
0181+  06E4 19 01       	mov al, 1
0182+  06E6 05 03       	syscall sys_io					; receive in AH without echo
0183+  06E8 B9 00       	cmp al, 0						; check error code (AL)
0184+  06EA C6 E2 06    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  06ED 76 44       	cmp ah, 'D'
0186+  06EF C6 FA 06    	je gets_left_arrow
0187+  06F2 76 43       	cmp ah, 'C'
0188+  06F4 C6 FE 06    	je gets_right_arrow
0189+  06F7 0A A4 06    	jmp gets_loop
0190+  06FA             gets_left_arrow:
0191+  06FA 7F          	dec d
0192+  06FB 0A A4 06    	jmp gets_loop
0193+  06FE             gets_right_arrow:
0194+  06FE 79          	inc d
0195+  06FF 0A A4 06    	jmp gets_loop
0196+  0702             gets_escape:
0197+  0702 FD 0C       	sti
0198+  0704 19 01       	mov al, 1
0199+  0706 05 03       	syscall sys_io			; receive in AH
0200+  0708 B9 00       	cmp al, 0				; check error code (AL)
0201+  070A C6 02 07    	je gets_escape			; if no char received, retry
0202+  070D 76 6E       	cmp ah, 'n'
0203+  070F C6 1D 07    	je gets_LF
0204+  0712 76 72       	cmp ah, 'r'
0205+  0714 C6 24 07    	je gets_CR
0206+  0717 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0718 3E          	mov [d], al
0208+  0719 79          	inc d
0209+  071A 0A A4 06    	jmp gets_loop
0210+  071D             gets_LF:
0211+  071D 19 0A       	mov al, $0A
0212+  071F 3E          	mov [d], al
0213+  0720 79          	inc d
0214+  0721 0A A4 06    	jmp gets_loop
0215+  0724             gets_CR:
0216+  0724 19 0D       	mov al, $0D
0217+  0726 3E          	mov [d], al
0218+  0727 79          	inc d
0219+  0728 0A A4 06    	jmp gets_loop
0220+  072B             gets_end:
0221+  072B 19 00       	mov al, 0
0222+  072D 3E          	mov [d], al				; terminate string
0223+  072E E7          	pop d
0224+  072F E4          	pop a
0225+  0730 09          	ret
0226+  0731             
0227+  0731             
0228+  0731             
0229+  0731             
0230+  0731             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0731             ;; INPUT TEXT
0232+  0731             ;; terminated with CTRL+D
0233+  0731             ;; pointer in D
0234+  0731             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0731             gettxt:
0236+  0731 D7          	push a
0237+  0732 DA          	push d
0238+  0733             gettxt_loop:
0239+  0733 19 01       	mov al, 1
0240+  0735 05 03       	syscall sys_io			; receive in AH
0241+  0737 B9 00       	cmp al, 0				; check error code (AL)
0242+  0739 C6 33 07    	je gettxt_loop		; if no char received, retry
0243+  073C 76 04       	cmp ah, 4			; EOT
0244+  073E C6 7C 07    	je gettxt_end
0245+  0741 76 08       	cmp ah, $08			; check for backspace
0246+  0743 C6 78 07    	je gettxt_backspace
0247+  0746 76 5C       	cmp ah, $5C				; '\\'
0248+  0748 C6 51 07    	je gettxt_escape
0249+  074B 1A          	mov al, ah
0250+  074C 3E          	mov [d], al
0251+  074D 79          	inc d
0252+  074E 0A 33 07    	jmp gettxt_loop
0253+  0751             gettxt_escape:
0254+  0751 19 01       	mov al, 1
0255+  0753 05 03       	syscall sys_io			; receive in AH
0256+  0755 B9 00       	cmp al, 0				; check error code (AL)
0257+  0757 C6 51 07    	je gettxt_escape		; if no char received, retry
0258+  075A 76 6E       	cmp ah, 'n'
0259+  075C C6 6A 07    	je gettxt_LF
0260+  075F 76 72       	cmp ah, 'r'
0261+  0761 C6 71 07    	je gettxt_CR
0262+  0764 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0765 3E          	mov [d], al
0264+  0766 79          	inc d
0265+  0767 0A 33 07    	jmp gettxt_loop
0266+  076A             gettxt_LF:
0267+  076A 19 0A       	mov al, $0A
0268+  076C 3E          	mov [d], al
0269+  076D 79          	inc d
0270+  076E 0A 33 07    	jmp gettxt_loop
0271+  0771             gettxt_CR:
0272+  0771 19 0D       	mov al, $0D
0273+  0773 3E          	mov [d], al
0274+  0774 79          	inc d
0275+  0775 0A 33 07    	jmp gettxt_loop
0276+  0778             gettxt_backspace:
0277+  0778 7F          	dec d
0278+  0779 0A 33 07    	jmp gettxt_loop
0279+  077C             gettxt_end:
0280+  077C 19 00       	mov al, 0
0281+  077E 3E          	mov [d], al				; terminate string
0282+  077F E7          	pop d
0283+  0780 E4          	pop a
0284+  0781 09          	ret
0285+  0782             
0286+  0782             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0782             ; PRINT NEW LINE
0288+  0782             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0782             printnl:
0290+  0782 D7          	push a
0291+  0783 10 00 0A    	mov a, $0A00
0292+  0786 05 03       	syscall sys_io
0293+  0788 10 00 0D    	mov a, $0D00
0294+  078B 05 03       	syscall sys_io
0295+  078D E4          	pop a
0296+  078E 09          	ret
0297+  078F             
0298+  078F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  078F             ; strtoint
0300+  078F             ; 4 digit hex string number in d
0301+  078F             ; integer returned in A
0302+  078F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  078F             strtointx:
0304+  078F D8          	push b
0305+  0790 32          	mov bl, [d]
0306+  0791 37          	mov bh, bl
0307+  0792 33 01 00    	mov bl, [d + 1]
0308+  0795 07 50 06    	call atoi				; convert to int in AL
0309+  0798 23          	mov ah, al				; move to AH
0310+  0799 33 02 00    	mov bl, [d + 2]
0311+  079C 37          	mov bh, bl
0312+  079D 33 03 00    	mov bl, [d + 3]
0313+  07A0 07 50 06    	call atoi				; convert to int in AL
0314+  07A3 E5          	pop b
0315+  07A4 09          	ret
0316+  07A5             
0317+  07A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  07A5             ; strtoint
0319+  07A5             ; 5 digit base10 string number in d
0320+  07A5             ; integer returned in A
0321+  07A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  07A5             strtoint:
0323+  07A5 E2          	push si
0324+  07A6 D8          	push b
0325+  07A7 D9          	push c
0326+  07A8 DA          	push d
0327+  07A9 07 D0 05    	call strlen			; get string length in C
0328+  07AC 7E          	dec c
0329+  07AD FD 4E       	mov si, d
0330+  07AF 12          	mov a, c
0331+  07B0 FD 99       	shl a
0332+  07B2 3B 38 06    	mov d, table_power
0333+  07B5 59          	add d, a
0334+  07B6 38 00 00    	mov c, 0
0335+  07B9             strtoint_L0:
0336+  07B9 F6          	lodsb			; load ASCII to al
0337+  07BA B9 00       	cmp al, 0
0338+  07BC C6 CF 07    	je strtoint_end
0339+  07BF 6F 30       	sub al, $30		; make into integer
0340+  07C1 22 00       	mov ah, 0
0341+  07C3 2A          	mov b, [d]
0342+  07C4 AC          	mul a, b			; result in B since it fits in 16bits
0343+  07C5 11          	mov a, b
0344+  07C6 28          	mov b, c
0345+  07C7 54          	add a, b
0346+  07C8 39          	mov c, a
0347+  07C9 63 02 00    	sub d, 2
0348+  07CC 0A B9 07    	jmp strtoint_L0
0349+  07CF             strtoint_end:
0350+  07CF 12          	mov a, c
0351+  07D0 E7          	pop d
0352+  07D1 E6          	pop c
0353+  07D2 E5          	pop b
0354+  07D3 EF          	pop si
0355+  07D4 09          	ret
0356+  07D5             
0357+  07D5             
0358+  07D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  07D5             ; PRINT NULL TERMINATED STRING
0360+  07D5             ; pointer in D
0361+  07D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  07D5             puts:
0363+  07D5 D7          	push a
0364+  07D6 DA          	push d
0365+  07D7             puts_L1:
0366+  07D7 1E          	mov al, [d]
0367+  07D8 B9 00       	cmp al, 0
0368+  07DA C6 E6 07    	jz puts_END
0369+  07DD 23          	mov ah, al
0370+  07DE 19 00       	mov al, 0
0371+  07E0 05 03       	syscall sys_io
0372+  07E2 79          	inc d
0373+  07E3 0A D7 07    	jmp puts_L1
0374+  07E6             puts_END:
0375+  07E6 E7          	pop d
0376+  07E7 E4          	pop a
0377+  07E8 09          	ret
0378+  07E9             
0379+  07E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  07E9             ; PRINT N SIZE STRING
0381+  07E9             ; pointer in D
0382+  07E9             ; size in C
0383+  07E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  07E9             putsn:
0385+  07E9 DB          	push al
0386+  07EA DA          	push d
0387+  07EB D9          	push c
0388+  07EC             putsn_L0:
0389+  07EC 1E          	mov al, [d]
0390+  07ED 23          	mov ah, al
0391+  07EE 19 00       	mov al, 0
0392+  07F0 05 03       	syscall sys_io
0393+  07F2 79          	inc d
0394+  07F3 7E          	dec c	
0395+  07F4 C2 00 00    	cmp c, 0
0396+  07F7 C7 EC 07    	jne putsn_L0
0397+  07FA             putsn_end:
0398+  07FA E6          	pop c
0399+  07FB E7          	pop d
0400+  07FC E8          	pop al
0401+  07FD 09          	ret
0402+  07FE             
0403+  07FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  07FE             ; print 16bit decimal number
0405+  07FE             ; input number in A
0406+  07FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  07FE             print_u16d:
0408+  07FE D7          	push a
0409+  07FF D8          	push b
0410+  0800 26 10 27    	mov b, 10000
0411+  0803 AE          	div a, b			; get 10000 coeff.
0412+  0804 07 2A 08    	call print_number
0413+  0807 11          	mov a, b
0414+  0808 26 E8 03    	mov b, 1000
0415+  080B AE          	div a, b			; get 10000 coeff.
0416+  080C 07 2A 08    	call print_number
0417+  080F 11          	mov a, b
0418+  0810 26 64 00    	mov b, 100
0419+  0813 AE          	div a, b
0420+  0814 07 2A 08    	call print_number
0421+  0817 11          	mov a, b
0422+  0818 26 0A 00    	mov b, 10
0423+  081B AE          	div a, b
0424+  081C 07 2A 08    	call print_number
0425+  081F 11          	mov a, b
0426+  0820 6A 30       	add al, $30
0427+  0822 23          	mov ah, al
0428+  0823 19 00       	mov al, 0
0429+  0825 05 03       	syscall sys_io	; print coeff
0430+  0827 E5          	pop b
0431+  0828 E4          	pop a
0432+  0829 09          	ret
0433+  082A             
0434+  082A             
0435+  082A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  082A             ; if A == 0, print space
0437+  082A             ; else print A
0438+  082A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  082A             print_number:
0440+  082A 6A 30       	add al, $30
0441+  082C 23          	mov ah, al
0442+  082D 07 9B 06    	call putchar
0443+  0830 09          	ret
0444+  0831             
0445+  0831             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0831             ; PRINT 16BIT HEX INTEGER
0447+  0831             ; integer value in reg B
0448+  0831             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0831             print_u16x:
0450+  0831 D7          	push a
0451+  0832 D8          	push b
0452+  0833 DD          	push bl
0453+  0834 30          	mov bl, bh
0454+  0835 07 62 06    	call itoa				; convert bh to char in A
0455+  0838 2F          	mov bl, al				; save al
0456+  0839 19 00       	mov al, 0
0457+  083B 05 03       	syscall sys_io				; display AH
0458+  083D 24          	mov ah, bl				; retrieve al
0459+  083E 19 00       	mov al, 0
0460+  0840 05 03       	syscall sys_io				; display AL
0461+  0842             
0462+  0842 EA          	pop bl
0463+  0843 07 62 06    	call itoa				; convert bh to char in A
0464+  0846 2F          	mov bl, al				; save al
0465+  0847 19 00       	mov al, 0
0466+  0849 05 03       	syscall sys_io				; display AH
0467+  084B 24          	mov ah, bl				; retrieve al
0468+  084C 19 00       	mov al, 0
0469+  084E 05 03       	syscall sys_io				; display AL
0470+  0850             
0471+  0850 E5          	pop b
0472+  0851 E4          	pop a
0473+  0852 09          	ret
0474+  0853             
0475+  0853             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0853             ; INPUT 16BIT HEX INTEGER
0477+  0853             ; read 16bit integer into A
0478+  0853             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0853             scan_u16x:
0480+  0853 F8 10 00    	enter 16
0481+  0856 D8          	push b
0482+  0857 DA          	push d
0483+  0858             
0484+  0858 FA F1 FF    	lea d, [bp + -15]
0485+  085B 07 A2 06    	call gets				; get number
0486+  085E             
0487+  085E 32          	mov bl, [d]
0488+  085F 37          	mov bh, bl
0489+  0860 33 01 00    	mov bl, [d + 1]
0490+  0863 07 50 06    	call atoi				; convert to int in AL
0491+  0866 23          	mov ah, al				; move to AH
0492+  0867             
0493+  0867 33 02 00    	mov bl, [d + 2]
0494+  086A 37          	mov bh, bl
0495+  086B 33 03 00    	mov bl, [d + 3]
0496+  086E 07 50 06    	call atoi				; convert to int in AL
0497+  0871             
0498+  0871 E7          	pop d
0499+  0872 E5          	pop b
0500+  0873 F9          	leave
0501+  0874 09          	ret
0502+  0875             
0503+  0875             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0875             ; PRINT 8bit HEX INTEGER
0505+  0875             ; integer value in reg bl
0506+  0875             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0875             print_u8x:
0508+  0875 D7          	push a
0509+  0876 DD          	push bl
0510+  0877             
0511+  0877 07 62 06    	call itoa				; convert bl to char in A
0512+  087A 2F          	mov bl, al				; save al
0513+  087B 19 00       	mov al, 0
0514+  087D 05 03       	syscall sys_io				; display AH
0515+  087F 24          	mov ah, bl				; retrieve al
0516+  0880 19 00       	mov al, 0
0517+  0882 05 03       	syscall sys_io				; display AL
0518+  0884             
0519+  0884 EA          	pop bl
0520+  0885 E4          	pop a
0521+  0886 09          	ret
0522+  0887             
0523+  0887             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0887             ; print 8bit decimal unsigned number
0525+  0887             ; input number in AL
0526+  0887             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0887             print_u8d:
0528+  0887 D7          	push a
0529+  0888 D8          	push b
0530+  0889             
0531+  0889 22 00       	mov ah, 0
0532+  088B 26 64 00    	mov b, 100
0533+  088E AE          	div a, b
0534+  088F D8          	push b			; save remainder
0535+  0890 B9 00       	cmp al, 0
0536+  0892 C6 9C 08    	je skip100
0537+  0895 6A 30       	add al, $30
0538+  0897 23          	mov ah, al
0539+  0898 19 00       	mov al, 0
0540+  089A 05 03       	syscall sys_io	; print coeff
0541+  089C             skip100:
0542+  089C E4          	pop a
0543+  089D 22 00       	mov ah, 0
0544+  089F 26 0A 00    	mov b, 10
0545+  08A2 AE          	div a, b
0546+  08A3 D8          	push b			; save remainder
0547+  08A4 B9 00       	cmp al, 0
0548+  08A6 C6 B0 08    	je skip10
0549+  08A9 6A 30       	add al, $30
0550+  08AB 23          	mov ah, al
0551+  08AC 19 00       	mov al, 0
0552+  08AE 05 03       	syscall sys_io	; print coeff
0553+  08B0             skip10:
0554+  08B0 E4          	pop a
0555+  08B1 1B          	mov al, bl
0556+  08B2 6A 30       	add al, $30
0557+  08B4 23          	mov ah, al
0558+  08B5 19 00       	mov al, 0
0559+  08B7 05 03       	syscall sys_io	; print coeff
0560+  08B9 E5          	pop b
0561+  08BA E4          	pop a
0562+  08BB 09          	ret
0563+  08BC             
0564+  08BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  08BC             ; INPUT 8BIT HEX INTEGER
0566+  08BC             ; read 8bit integer into AL
0567+  08BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  08BC             scan_u8x:
0569+  08BC F8 04 00    	enter 4
0570+  08BF D8          	push b
0571+  08C0 DA          	push d
0572+  08C1             
0573+  08C1 FA FD FF    	lea d, [bp + -3]
0574+  08C4 07 A2 06    	call gets				; get number
0575+  08C7             
0576+  08C7 32          	mov bl, [d]
0577+  08C8 37          	mov bh, bl
0578+  08C9 33 01 00    	mov bl, [d + 1]
0579+  08CC 07 50 06    	call atoi				; convert to int in AL
0580+  08CF             
0581+  08CF E7          	pop d
0582+  08D0 E5          	pop b
0583+  08D1 F9          	leave
0584+  08D2 09          	ret
0585+  08D3             
0586+  08D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  08D3             ; input decimal number
0588+  08D3             ; result in A
0589+  08D3             ; 655'\0'
0590+  08D3             ; low--------high
0591+  08D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  08D3             scan_u16d:
0593+  08D3 F8 08 00    	enter 8
0594+  08D6 E2          	push si
0595+  08D7 D8          	push b
0596+  08D8 D9          	push c
0597+  08D9 DA          	push d
0598+  08DA FA F9 FF    	lea d, [bp +- 7]
0599+  08DD 07 A2 06    	call gets
0600+  08E0 07 D0 05    	call strlen			; get string length in C
0601+  08E3 7E          	dec c
0602+  08E4 FD 4E       	mov si, d
0603+  08E6 12          	mov a, c
0604+  08E7 FD 99       	shl a
0605+  08E9 3B 38 06    	mov d, table_power
0606+  08EC 59          	add d, a
0607+  08ED 38 00 00    	mov c, 0
0608+  08F0             mul_loop:
0609+  08F0 F6          	lodsb			; load ASCII to al
0610+  08F1 B9 00       	cmp al, 0
0611+  08F3 C6 06 09    	je mul_exit
0612+  08F6 6F 30       	sub al, $30		; make into integer
0613+  08F8 22 00       	mov ah, 0
0614+  08FA 2A          	mov b, [d]
0615+  08FB AC          	mul a, b			; result in B since it fits in 16bits
0616+  08FC 11          	mov a, b
0617+  08FD 28          	mov b, c
0618+  08FE 54          	add a, b
0619+  08FF 39          	mov c, a
0620+  0900 63 02 00    	sub d, 2
0621+  0903 0A F0 08    	jmp mul_loop
0622+  0906             mul_exit:
0623+  0906 12          	mov a, c
0624+  0907 E7          	pop d
0625+  0908 E6          	pop c
0626+  0909 E5          	pop b
0627+  090A EF          	pop si
0628+  090B F9          	leave
0629+  090C 09          	ret
0284   090D             ; --- END INCLUDE BLOCK
0285   090D             
0286   090D             
0287   090D             .end
tasm: Number of errors = 0
