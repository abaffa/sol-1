0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402             
0011   0402             ; --- BEGIN INLINE ASM BLOCK
0012   0402 B8 AD 05 FF   mov word[__aa], $FFFF
0012   0406 00 
0013   0407 14 AD 05      mov a, [__aa]
0014   040A 07 24 08      call print_u16d
0015   040D B8 AD 05 55   mov word[__aa], $5555
0015   0411 00 
0016   0412 14 AD 05      mov a, [__aa]
0017   0415 07 24 08      call print_u16d
0018   0418 B8 AD 05 AA   mov word[__aa], $AAAA
0018   041C 00 
0019   041D 14 AD 05      mov a, [__aa]
0020   0420 07 24 08      call print_u16d
0021   0423             ; --- END INLINE ASM BLOCK
0022   0423             
0023   0423 26 00 00      mov b, 0
0024   0426 F9            leave
0025   0427 05 0B         syscall sys_terminate_proc
0026   0429             
0027   0429             _gets:
0028   0429 D2            push bp
0029   042A 9B            mov bp, sp
0030   042B             
0031   042B             ; --- BEGIN INLINE ASM BLOCK
0032   042B 17 05 00      mov a, [bp + 5]
0033   042E 3C            mov d, a
0034   042F 07 C8 06      call gets
0035   0432             ; --- END INLINE ASM BLOCK
0036   0432             
0037   0432 F9            leave
0038   0433 09            ret
0039   0434             
0040   0434             _strlen:
0041   0434 D2            push bp
0042   0435 9B            mov bp, sp
0043   0436 52 02 00      sub sp, 2 ; length
0044   0439 26 00 00      mov b, 0
0045   043C D7            push a
0046   043D 11            mov a, b
0047   043E 45 FF FF      mov [bp + -1], a ; length
0048   0441 E4            pop a
0049   0442             _while1_cond:
0050   0442 FA 05 00      lea d, [bp + 5] ; str
0051   0445 2A            mov b, [d]
0052   0446 D7            push a
0053   0447 74            mov d, b
0054   0448 DA            push d
0055   0449 2C FF FF      mov b, [bp + -1] ; length
0056   044C E7            pop d
0057   044D 10 01 00      mov a, 1
0058   0450 AC            mul a, b
0059   0451 5A            add d, b
0060   0452 E4            pop a
0061   0453 32            mov bl, [d]
0062   0454 A7 00         mov bh, 0
0063   0456 D7            push a
0064   0457 11            mov a, b
0065   0458 26 00 00      mov b, 0
0066   045B B0            cmp a, b
0067   045C 0E            lodflgs
0068   045D 87 01         and al, %00000001
0069   045F 8F 01         xor al, %00000001 ; !=
0070   0461 22 00         mov ah, 0
0071   0463 27            mov b, a
0072   0464 E4            pop a
0073   0465 C0 00 00      cmp b, 0
0074   0468 C6 7D 04      je _while1_exit
0075   046B             _while1_block:
0076   046B 2C FF FF      mov b, [bp + -1] ; length
0077   046E D7            push a
0078   046F 11            mov a, b
0079   0470 FD 77         inc b
0080   0472 D7            push a
0081   0473 11            mov a, b
0082   0474 45 FF FF      mov [bp + -1], a ; length
0083   0477 E4            pop a
0084   0478 27            mov b, a
0085   0479 E4            pop a
0086   047A 0A 42 04      jmp _while1_cond
0087   047D             _while1_exit:
0088   047D 2C FF FF      mov b, [bp + -1] ; length
0089   0480 F9            leave
0090   0481 09            ret
0091   0482             
0092   0482             print_num:
0093   0482 D2            push bp
0094   0483 9B            mov bp, sp
0095   0484 52 05 00      sub sp, 5 ; digits
0096   0487 52 02 00      sub sp, 2 ; i
0097   048A 26 00 00      mov b, 0
0098   048D D7            push a
0099   048E 11            mov a, b
0100   048F 45 FA FF      mov [bp + -6], a ; i
0101   0492 E4            pop a
0102   0493             _if2_cond:
0103   0493 2C 05 00      mov b, [bp + 5] ; num
0104   0496 D7            push a
0105   0497 11            mov a, b
0106   0498 26 00 00      mov b, 0
0107   049B B0            cmp a, b
0108   049C 0E            lodflgs
0109   049D 87 01         and al, %00000001 ; ==
0110   049F 22 00         mov ah, 0
0111   04A1 27            mov b, a
0112   04A2 E4            pop a
0113   04A3 C0 00 00      cmp b, 0
0114   04A6 C6 B8 04      je _if2_exit
0115   04A9             _if2_true:
0116   04A9 26 30 00      mov b, '0'
0117   04AC DD            push bl
0118   04AD 07 87 05      call _putchar
0119   04B0 51 01 00      add sp, 1
0120   04B3 F9            leave
0121   04B4 09            ret
0122   04B5 0A B8 04      jmp _if2_exit
0123   04B8             _if2_exit:
0124   04B8             _while3_cond:
0125   04B8 2C 05 00      mov b, [bp + 5] ; num
0126   04BB D7            push a
0127   04BC 11            mov a, b
0128   04BD 26 00 00      mov b, 0
0129   04C0 B0            cmp a, b
0130   04C1 0E            lodflgs
0131   04C2 2F            mov bl, al
0132   04C3 FD 78         mov g, a
0133   04C5 FD A2 03      shr al, 3
0134   04C8 FD A4 02      shr bl, 2
0135   04CB FD 87 01      and bl, %00000001
0136   04CE 90            xor al, bl
0137   04CF FD 27         mov b, g
0138   04D1 FD 87 01      and bl, %00000001
0139   04D4 8C            or al, bl
0140   04D5 8F 01         xor al, %00000001 ; > (signed)
0141   04D7 22 00         mov ah, 0
0142   04D9 27            mov b, a
0143   04DA E4            pop a
0144   04DB C0 00 00      cmp b, 0
0145   04DE C6 2F 05      je _while3_exit
0146   04E1             _while3_block:
0147   04E1 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0148   04E4 2D            mov b, d
0149   04E5 D7            push a
0150   04E6 74            mov d, b
0151   04E7 DA            push d
0152   04E8 2C FA FF      mov b, [bp + -6] ; i
0153   04EB E7            pop d
0154   04EC 10 01 00      mov a, 1
0155   04EF AC            mul a, b
0156   04F0 5A            add d, b
0157   04F1 E4            pop a
0158   04F2 DA            push d
0159   04F3 26 30 00      mov b, '0'
0160   04F6 D7            push a
0161   04F7 11            mov a, b
0162   04F8 2C 05 00      mov b, [bp + 5] ; num
0163   04FB D7            push a
0164   04FC 11            mov a, b
0165   04FD 26 0A 00      mov b, 10
0166   0500 AE            div a, b
0167   0501 E4            pop a
0168   0502 54            add a, b
0169   0503 27            mov b, a
0170   0504 E4            pop a
0171   0505 E7            pop d
0172   0506 FD 3E         mov [d], bl
0173   0508 2C 05 00      mov b, [bp + 5] ; num
0174   050B D7            push a
0175   050C 11            mov a, b
0176   050D 26 0A 00      mov b, 10
0177   0510 AE            div a, b
0178   0511 FD 78         mov g, a
0179   0513 11            mov a, b
0180   0514 FD 27         mov b, g
0181   0516 E4            pop a
0182   0517 D7            push a
0183   0518 11            mov a, b
0184   0519 45 05 00      mov [bp + 5], a ; num
0185   051C E4            pop a
0186   051D 2C FA FF      mov b, [bp + -6] ; i
0187   0520 D7            push a
0188   0521 11            mov a, b
0189   0522 FD 77         inc b
0190   0524 D7            push a
0191   0525 11            mov a, b
0192   0526 45 FA FF      mov [bp + -6], a ; i
0193   0529 E4            pop a
0194   052A 27            mov b, a
0195   052B E4            pop a
0196   052C 0A B8 04      jmp _while3_cond
0197   052F             _while3_exit:
0198   052F             _while4_cond:
0199   052F 2C FA FF      mov b, [bp + -6] ; i
0200   0532 D7            push a
0201   0533 11            mov a, b
0202   0534 26 00 00      mov b, 0
0203   0537 B0            cmp a, b
0204   0538 0E            lodflgs
0205   0539 2F            mov bl, al
0206   053A FD 78         mov g, a
0207   053C FD A2 03      shr al, 3
0208   053F FD A4 02      shr bl, 2
0209   0542 FD 87 01      and bl, %00000001
0210   0545 90            xor al, bl
0211   0546 FD 27         mov b, g
0212   0548 FD 87 01      and bl, %00000001
0213   054B 8C            or al, bl
0214   054C 8F 01         xor al, %00000001 ; > (signed)
0215   054E 22 00         mov ah, 0
0216   0550 27            mov b, a
0217   0551 E4            pop a
0218   0552 C0 00 00      cmp b, 0
0219   0555 C6 85 05      je _while4_exit
0220   0558             _while4_block:
0221   0558 2C FA FF      mov b, [bp + -6] ; i
0222   055B D7            push a
0223   055C 11            mov a, b
0224   055D FD 7D         dec b
0225   055F D7            push a
0226   0560 11            mov a, b
0227   0561 45 FA FF      mov [bp + -6], a ; i
0228   0564 E4            pop a
0229   0565 27            mov b, a
0230   0566 E4            pop a
0231   0567 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0232   056A 2D            mov b, d
0233   056B D7            push a
0234   056C 74            mov d, b
0235   056D DA            push d
0236   056E 2C FA FF      mov b, [bp + -6] ; i
0237   0571 E7            pop d
0238   0572 10 01 00      mov a, 1
0239   0575 AC            mul a, b
0240   0576 5A            add d, b
0241   0577 E4            pop a
0242   0578 32            mov bl, [d]
0243   0579 A7 00         mov bh, 0
0244   057B DD            push bl
0245   057C 07 87 05      call _putchar
0246   057F 51 01 00      add sp, 1
0247   0582 0A 2F 05      jmp _while4_cond
0248   0585             _while4_exit:
0249   0585 F9            leave
0250   0586 09            ret
0251   0587             
0252   0587             _putchar:
0253   0587 D2            push bp
0254   0588 9B            mov bp, sp
0255   0589             
0256   0589             ; --- BEGIN INLINE ASM BLOCK
0257   0589 20 05 00      mov al, [bp + 5]
0258   058C 23            mov ah, al
0259   058D 07 C1 06      call putchar
0260   0590             ; --- END INLINE ASM BLOCK
0261   0590             
0262   0590 F9            leave
0263   0591 09            ret
0264   0592             
0265   0592             scann:
0266   0592 D2            push bp
0267   0593 9B            mov bp, sp
0268   0594 52 02 00      sub sp, 2 ; m
0269   0597             
0270   0597             ; --- BEGIN INLINE ASM BLOCK
0271   0597 07 F9 08      call scan_u16d
0272   059A 45 FF FF      mov [bp + -1], a
0273   059D             ; --- END INLINE ASM BLOCK
0274   059D             
0275   059D 2C FF FF      mov b, [bp + -1] ; m
0276   05A0 F9            leave
0277   05A1 09            ret
0278   05A2             
0279   05A2             print:
0280   05A2 D2            push bp
0281   05A3 9B            mov bp, sp
0282   05A4             
0283   05A4             ; --- BEGIN INLINE ASM BLOCK
0284   05A4 17 05 00      mov a, [bp + 5]
0285   05A7 3C            mov d, a
0286   05A8 07 FB 07      call puts
0287   05AB             ; --- END INLINE ASM BLOCK
0288   05AB             
0289   05AB F9            leave
0290   05AC 09            ret
0291   05AD             ; --- END TEXT BLOCK
0292   05AD             
0293   05AD             ; --- BEGIN DATA BLOCK
0294   05AD 00 00       __aa: .fill 2, 0
0295   05AF             ; --- END DATA BLOCK
0296   05AF             
0297   05AF             ; --- BEGIN INCLUDE BLOCK
0298   05AF             .include "lib/stdio.asm"
0001+  05AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  05AF             ; stdio.s
0003+  05AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  05AF             .include "lib/string.asm"
0001++ 05AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 05AF             ; string.s
0003++ 05AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 05AF             
0005++ 05AF             
0006++ 05AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 05AF             ; strrev
0008++ 05AF             ; reverse a string
0009++ 05AF             ; D = string address
0010++ 05AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 05AF             ; 01234
0012++ 05AF             strrev:
0013++ 05AF 4B          	pusha
0014++ 05B0 07 F6 05    	call strlen	; length in C
0015++ 05B3 12          	mov a, c
0016++ 05B4 AF 01 00    	cmp a, 1
0017++ 05B7 D0 D1 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 05BA 7D          	dec a
0019++ 05BB FD 4E       	mov si, d	; beginning of string
0020++ 05BD FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 05BF 59          	add d, a	; end of string
0022++ 05C0 12          	mov a, c
0023++ 05C1 FD 9B       	shr a		; divide by 2
0024++ 05C3 39          	mov c, a	; C now counts the steps
0025++ 05C4             strrev_L0:
0026++ 05C4 32          	mov bl, [d]	; save load right-side char into BL
0027++ 05C5 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 05C6 3E          	mov [d], al	; store left char into right side
0029++ 05C7 1B          	mov al, bl
0030++ 05C8 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 05C9 7E          	dec c
0032++ 05CA 7F          	dec d
0033++ 05CB C2 00 00    	cmp c, 0
0034++ 05CE C7 C4 05    	jne strrev_L0
0035++ 05D1             strrev_end:
0036++ 05D1 4C          	popa
0037++ 05D2 09          	ret
0038++ 05D3             	
0039++ 05D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 05D3             ; strchr
0041++ 05D3             ; search string in D for char in AL
0042++ 05D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 05D3             strchr:
0044++ 05D3             strchr_L0:
0045++ 05D3 32          	mov bl, [d]
0046++ 05D4 C1 00       	cmp bl, 0
0047++ 05D6 C6 E1 05    	je strchr_end
0048++ 05D9 BA          	cmp al, bl
0049++ 05DA C6 E1 05    	je strchr_end
0050++ 05DD 79          	inc d
0051++ 05DE 0A D3 05    	jmp strchr_L0
0052++ 05E1             strchr_end:
0053++ 05E1 1B          	mov al, bl
0054++ 05E2 09          	ret
0055++ 05E3             
0056++ 05E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 05E3             ; strstr
0058++ 05E3             ; find sub-string
0059++ 05E3             ; str1 in SI
0060++ 05E3             ; str2 in DI
0061++ 05E3             ; SI points to end of source string
0062++ 05E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 05E3             strstr:
0064++ 05E3 DB          	push al
0065++ 05E4 DA          	push d
0066++ 05E5 E3          	push di
0067++ 05E6             strstr_loop:
0068++ 05E6 F3          	cmpsb					; compare a byte of the strings
0069++ 05E7 C7 F2 05    	jne strstr_ret
0070++ 05EA FC 00 00    	lea d, [di + 0]
0071++ 05ED BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 05EF C7 E6 05    	jne strstr_loop				; equal chars but not at end
0073++ 05F2             strstr_ret:
0074++ 05F2 F0          	pop di
0075++ 05F3 E7          	pop d
0076++ 05F4 E8          	pop al
0077++ 05F5 09          	ret
0078++ 05F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 05F6             ; length of null terminated string
0080++ 05F6             ; result in C
0081++ 05F6             ; pointer in D
0082++ 05F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 05F6             strlen:
0084++ 05F6 DA          	push d
0085++ 05F7 38 00 00    	mov c, 0
0086++ 05FA             strlen_L1:
0087++ 05FA BD 00       	cmp byte [d], 0
0088++ 05FC C6 04 06    	je strlen_ret
0089++ 05FF 79          	inc d
0090++ 0600 78          	inc c
0091++ 0601 0A FA 05    	jmp strlen_L1
0092++ 0604             strlen_ret:
0093++ 0604 E7          	pop d
0094++ 0605 09          	ret
0095++ 0606             
0096++ 0606             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0606             ; STRCMP
0098++ 0606             ; compare two strings
0099++ 0606             ; str1 in SI
0100++ 0606             ; str2 in DI
0101++ 0606             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0606             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0606             strcmp:
0104++ 0606 DB          	push al
0105++ 0607 DA          	push d
0106++ 0608 E3          	push di
0107++ 0609 E2          	push si
0108++ 060A             strcmp_loop:
0109++ 060A F3          	cmpsb					; compare a byte of the strings
0110++ 060B C7 16 06    	jne strcmp_ret
0111++ 060E FB FF FF    	lea d, [si +- 1]
0112++ 0611 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0613 C7 0A 06    	jne strcmp_loop				; equal chars but not at end
0114++ 0616             strcmp_ret:
0115++ 0616 EF          	pop si
0116++ 0617 F0          	pop di
0117++ 0618 E7          	pop d
0118++ 0619 E8          	pop al
0119++ 061A 09          	ret
0120++ 061B             
0121++ 061B             
0122++ 061B             ; STRCPY
0123++ 061B             ; copy null terminated string from SI to DI
0124++ 061B             ; source in SI
0125++ 061B             ; destination in DI
0126++ 061B             strcpy:
0127++ 061B E2          	push si
0128++ 061C E3          	push di
0129++ 061D DB          	push al
0130++ 061E             strcpy_L1:
0131++ 061E F6          	lodsb
0132++ 061F F7          	stosb
0133++ 0620 B9 00       	cmp al, 0
0134++ 0622 C7 1E 06    	jne strcpy_L1
0135++ 0625             strcpy_end:
0136++ 0625 E8          	pop al
0137++ 0626 F0          	pop di
0138++ 0627 EF          	pop si
0139++ 0628 09          	ret
0140++ 0629             
0141++ 0629             ; STRCAT
0142++ 0629             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0629             ; source in SI
0144++ 0629             ; destination in DI
0145++ 0629             strcat:
0146++ 0629 E2          	push si
0147++ 062A E3          	push di
0148++ 062B D7          	push a
0149++ 062C DA          	push d
0150++ 062D 50          	mov a, di
0151++ 062E 3C          	mov d, a
0152++ 062F             strcat_goto_end_L1:
0153++ 062F BD 00       	cmp byte[d], 0
0154++ 0631 C6 38 06    	je strcat_start
0155++ 0634 79          	inc d
0156++ 0635 0A 2F 06    	jmp strcat_goto_end_L1
0157++ 0638             strcat_start:
0158++ 0638 FD 50       	mov di, d
0159++ 063A             strcat_L1:
0160++ 063A F6          	lodsb
0161++ 063B F7          	stosb
0162++ 063C B9 00       	cmp al, 0
0163++ 063E C7 3A 06    	jne strcat_L1
0164++ 0641             strcat_end:
0165++ 0641 E7          	pop d
0166++ 0642 E4          	pop a
0167++ 0643 F0          	pop di
0168++ 0644 EF          	pop si
0169++ 0645 09          	ret
0005+  0646             
0006+  0646 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  064A 34 35 36 37 
0006+  064E 38 39 41 42 
0006+  0652 43 44 45 46 
0007+  0656 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  065A 1B 5B 48 00 
0008+  065E             
0009+  065E 01 00       table_power:.dw 1
0010+  0660 0A 00       			.dw 10
0011+  0662 64 00       			.dw 100
0012+  0664 E8 03       			.dw 1000
0013+  0666 10 27       			.dw 10000
0014+  0668             
0015+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0668             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0668             ; ASCII in BL
0018+  0668             ; result in AL
0019+  0668             ; ascii for F = 0100 0110
0020+  0668             ; ascii for 9 = 0011 1001
0021+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0668             hex_ascii_encode:
0023+  0668 1B          	mov al, bl
0024+  0669 93 40       	test al, $40				; test if letter or number
0025+  066B C7 71 06    	jnz hex_letter
0026+  066E 87 0F       	and al, $0F				; get number
0027+  0670 09          	ret
0028+  0671             hex_letter:
0029+  0671 87 0F       	and al, $0F				; get letter
0030+  0673 6A 09       	add al, 9
0031+  0675 09          	ret
0032+  0676             
0033+  0676             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0676             ; ATOI
0035+  0676             ; 2 letter hex string in B
0036+  0676             ; 8bit integer returned in AL
0037+  0676             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0676             atoi:
0039+  0676 D8          	push b
0040+  0677 07 68 06    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  067A 30          	mov bl, bh
0042+  067B DB          	push al					; save a
0043+  067C 07 68 06    	call hex_ascii_encode
0044+  067F EA          	pop bl	
0045+  0680 FD 9E 04    	shl al, 4
0046+  0683 8C          	or al, bl
0047+  0684 E5          	pop b
0048+  0685 09          	ret	
0049+  0686             
0050+  0686             
0051+  0686             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0686             ; printf
0053+  0686             ; no need for explanations!
0054+  0686             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0686             printf:
0056+  0686 09          	ret
0057+  0687             
0058+  0687             
0059+  0687             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0687             ; scanf
0061+  0687             ; no need for explanations!
0062+  0687             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0687             scanf:
0064+  0687 09          	ret
0065+  0688             
0066+  0688             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0688             ; ITOA
0068+  0688             ; 8bit value in BL
0069+  0688             ; 2 byte ASCII result in A
0070+  0688             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0688             itoa:
0072+  0688 DA          	push d
0073+  0689 D8          	push b
0074+  068A A7 00       	mov bh, 0
0075+  068C FD A4 04    	shr bl, 4	
0076+  068F 74          	mov d, b
0077+  0690 1F 46 06    	mov al, [d + s_hex_digits]
0078+  0693 23          	mov ah, al
0079+  0694             	
0080+  0694 E5          	pop b
0081+  0695 D8          	push b
0082+  0696 A7 00       	mov bh, 0
0083+  0698 FD 87 0F    	and bl, $0F
0084+  069B 74          	mov d, b
0085+  069C 1F 46 06    	mov al, [d + s_hex_digits]
0086+  069F E5          	pop b
0087+  06A0 E7          	pop d
0088+  06A1 09          	ret
0089+  06A2             
0090+  06A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  06A2             ; HEX STRING TO BINARY
0092+  06A2             ; di = destination address
0093+  06A2             ; si = source
0094+  06A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  06A2             hex_to_int:
0096+  06A2             hex_to_int_L1:
0097+  06A2 F6          	lodsb					; load from [SI] to AL
0098+  06A3 B9 00       	cmp al, 0				; check if ASCII 0
0099+  06A5 C6 B2 06    	jz hex_to_int_ret
0100+  06A8 36          	mov bh, al
0101+  06A9 F6          	lodsb
0102+  06AA 2F          	mov bl, al
0103+  06AB 07 76 06    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  06AE F7          	stosb					; store AL to [DI]
0105+  06AF 0A A2 06    	jmp hex_to_int_L1
0106+  06B2             hex_to_int_ret:
0107+  06B2 09          	ret		
0108+  06B3             
0109+  06B3             
0110+  06B3             
0111+  06B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  06B3             ; GETCHAR
0113+  06B3             ; char in ah
0114+  06B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  06B3             getchar:
0116+  06B3 DB          	push al
0117+  06B4             getchar_retry:
0118+  06B4 FD 0C       	sti
0119+  06B6 19 01       	mov al, 1
0120+  06B8 05 03       	syscall sys_io			; receive in AH
0121+  06BA B9 00       	cmp al, 0			; check if any char was receive
0122+  06BC C6 B4 06    	je getchar_retry
0123+  06BF E8          	pop al
0124+  06C0 09          	ret
0125+  06C1             
0126+  06C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  06C1             ; PUTCHAR
0128+  06C1             ; char in ah
0129+  06C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  06C1             putchar:
0131+  06C1 D7          	push a
0132+  06C2 19 00       	mov al, 0
0133+  06C4 05 03       	syscall sys_io			; char in AH
0134+  06C6 E4          	pop a
0135+  06C7 09          	ret
0136+  06C8             
0137+  06C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  06C8             ;; INPUT A STRING
0139+  06C8             ;; terminates with null
0140+  06C8             ;; pointer in D
0141+  06C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  06C8             gets:
0143+  06C8 D7          	push a
0144+  06C9 DA          	push d
0145+  06CA             gets_loop:
0146+  06CA FD 0C       	sti
0147+  06CC 19 01       	mov al, 1
0148+  06CE 05 03       	syscall sys_io			; receive in AH
0149+  06D0 B9 00       	cmp al, 0				; check error code (AL)
0150+  06D2 C6 CA 06    	je gets_loop			; if no char received, retry
0151+  06D5             
0152+  06D5 76 1B       	cmp ah, 27
0153+  06D7 C6 F8 06    	je gets_telnet_escape
0154+  06DA 76 0A       	cmp ah, $0A				; LF
0155+  06DC C6 51 07    	je gets_end
0156+  06DF 76 0D       	cmp ah, $0D				; CR
0157+  06E1 C6 51 07    	je gets_end
0158+  06E4 76 5C       	cmp ah, $5C				; '\\'
0159+  06E6 C6 28 07    	je gets_escape
0160+  06E9             	
0161+  06E9 76 08       	cmp ah, $08			; check for backspace
0162+  06EB C6 F4 06    	je gets_backspace
0163+  06EE             
0164+  06EE 1A          	mov al, ah
0165+  06EF 3E          	mov [d], al
0166+  06F0 79          	inc d
0167+  06F1 0A CA 06    	jmp gets_loop
0168+  06F4             gets_backspace:
0169+  06F4 7F          	dec d
0170+  06F5 0A CA 06    	jmp gets_loop
0171+  06F8             gets_telnet_escape:
0172+  06F8 FD 0C       	sti
0173+  06FA 19 01       	mov al, 1
0174+  06FC 05 03       	syscall sys_io				; receive in AH without echo
0175+  06FE B9 00       	cmp al, 0					; check error code (AL)
0176+  0700 C6 F8 06    	je gets_telnet_escape		; if no char received, retry
0177+  0703 76 5B       	cmp ah, '['
0178+  0705 C7 CA 06    	jne gets_loop
0179+  0708             gets_telnet_escape_phase2:
0180+  0708 FD 0C       	sti
0181+  070A 19 01       	mov al, 1
0182+  070C 05 03       	syscall sys_io					; receive in AH without echo
0183+  070E B9 00       	cmp al, 0						; check error code (AL)
0184+  0710 C6 08 07    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0713 76 44       	cmp ah, 'D'
0186+  0715 C6 20 07    	je gets_left_arrow
0187+  0718 76 43       	cmp ah, 'C'
0188+  071A C6 24 07    	je gets_right_arrow
0189+  071D 0A CA 06    	jmp gets_loop
0190+  0720             gets_left_arrow:
0191+  0720 7F          	dec d
0192+  0721 0A CA 06    	jmp gets_loop
0193+  0724             gets_right_arrow:
0194+  0724 79          	inc d
0195+  0725 0A CA 06    	jmp gets_loop
0196+  0728             gets_escape:
0197+  0728 FD 0C       	sti
0198+  072A 19 01       	mov al, 1
0199+  072C 05 03       	syscall sys_io			; receive in AH
0200+  072E B9 00       	cmp al, 0				; check error code (AL)
0201+  0730 C6 28 07    	je gets_escape			; if no char received, retry
0202+  0733 76 6E       	cmp ah, 'n'
0203+  0735 C6 43 07    	je gets_LF
0204+  0738 76 72       	cmp ah, 'r'
0205+  073A C6 4A 07    	je gets_CR
0206+  073D 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  073E 3E          	mov [d], al
0208+  073F 79          	inc d
0209+  0740 0A CA 06    	jmp gets_loop
0210+  0743             gets_LF:
0211+  0743 19 0A       	mov al, $0A
0212+  0745 3E          	mov [d], al
0213+  0746 79          	inc d
0214+  0747 0A CA 06    	jmp gets_loop
0215+  074A             gets_CR:
0216+  074A 19 0D       	mov al, $0D
0217+  074C 3E          	mov [d], al
0218+  074D 79          	inc d
0219+  074E 0A CA 06    	jmp gets_loop
0220+  0751             gets_end:
0221+  0751 19 00       	mov al, 0
0222+  0753 3E          	mov [d], al				; terminate string
0223+  0754 E7          	pop d
0224+  0755 E4          	pop a
0225+  0756 09          	ret
0226+  0757             
0227+  0757             
0228+  0757             
0229+  0757             
0230+  0757             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0757             ;; INPUT TEXT
0232+  0757             ;; terminated with CTRL+D
0233+  0757             ;; pointer in D
0234+  0757             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0757             gettxt:
0236+  0757 D7          	push a
0237+  0758 DA          	push d
0238+  0759             gettxt_loop:
0239+  0759 19 01       	mov al, 1
0240+  075B 05 03       	syscall sys_io			; receive in AH
0241+  075D B9 00       	cmp al, 0				; check error code (AL)
0242+  075F C6 59 07    	je gettxt_loop		; if no char received, retry
0243+  0762 76 04       	cmp ah, 4			; EOT
0244+  0764 C6 A2 07    	je gettxt_end
0245+  0767 76 08       	cmp ah, $08			; check for backspace
0246+  0769 C6 9E 07    	je gettxt_backspace
0247+  076C 76 5C       	cmp ah, $5C				; '\\'
0248+  076E C6 77 07    	je gettxt_escape
0249+  0771 1A          	mov al, ah
0250+  0772 3E          	mov [d], al
0251+  0773 79          	inc d
0252+  0774 0A 59 07    	jmp gettxt_loop
0253+  0777             gettxt_escape:
0254+  0777 19 01       	mov al, 1
0255+  0779 05 03       	syscall sys_io			; receive in AH
0256+  077B B9 00       	cmp al, 0				; check error code (AL)
0257+  077D C6 77 07    	je gettxt_escape		; if no char received, retry
0258+  0780 76 6E       	cmp ah, 'n'
0259+  0782 C6 90 07    	je gettxt_LF
0260+  0785 76 72       	cmp ah, 'r'
0261+  0787 C6 97 07    	je gettxt_CR
0262+  078A 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  078B 3E          	mov [d], al
0264+  078C 79          	inc d
0265+  078D 0A 59 07    	jmp gettxt_loop
0266+  0790             gettxt_LF:
0267+  0790 19 0A       	mov al, $0A
0268+  0792 3E          	mov [d], al
0269+  0793 79          	inc d
0270+  0794 0A 59 07    	jmp gettxt_loop
0271+  0797             gettxt_CR:
0272+  0797 19 0D       	mov al, $0D
0273+  0799 3E          	mov [d], al
0274+  079A 79          	inc d
0275+  079B 0A 59 07    	jmp gettxt_loop
0276+  079E             gettxt_backspace:
0277+  079E 7F          	dec d
0278+  079F 0A 59 07    	jmp gettxt_loop
0279+  07A2             gettxt_end:
0280+  07A2 19 00       	mov al, 0
0281+  07A4 3E          	mov [d], al				; terminate string
0282+  07A5 E7          	pop d
0283+  07A6 E4          	pop a
0284+  07A7 09          	ret
0285+  07A8             
0286+  07A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  07A8             ; PRINT NEW LINE
0288+  07A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  07A8             printnl:
0290+  07A8 D7          	push a
0291+  07A9 10 00 0A    	mov a, $0A00
0292+  07AC 05 03       	syscall sys_io
0293+  07AE 10 00 0D    	mov a, $0D00
0294+  07B1 05 03       	syscall sys_io
0295+  07B3 E4          	pop a
0296+  07B4 09          	ret
0297+  07B5             
0298+  07B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  07B5             ; strtoint
0300+  07B5             ; 4 digit hex string number in d
0301+  07B5             ; integer returned in A
0302+  07B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  07B5             strtointx:
0304+  07B5 D8          	push b
0305+  07B6 32          	mov bl, [d]
0306+  07B7 37          	mov bh, bl
0307+  07B8 33 01 00    	mov bl, [d + 1]
0308+  07BB 07 76 06    	call atoi				; convert to int in AL
0309+  07BE 23          	mov ah, al				; move to AH
0310+  07BF 33 02 00    	mov bl, [d + 2]
0311+  07C2 37          	mov bh, bl
0312+  07C3 33 03 00    	mov bl, [d + 3]
0313+  07C6 07 76 06    	call atoi				; convert to int in AL
0314+  07C9 E5          	pop b
0315+  07CA 09          	ret
0316+  07CB             
0317+  07CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  07CB             ; strtoint
0319+  07CB             ; 5 digit base10 string number in d
0320+  07CB             ; integer returned in A
0321+  07CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  07CB             strtoint:
0323+  07CB E2          	push si
0324+  07CC D8          	push b
0325+  07CD D9          	push c
0326+  07CE DA          	push d
0327+  07CF 07 F6 05    	call strlen			; get string length in C
0328+  07D2 7E          	dec c
0329+  07D3 FD 4E       	mov si, d
0330+  07D5 12          	mov a, c
0331+  07D6 FD 99       	shl a
0332+  07D8 3B 5E 06    	mov d, table_power
0333+  07DB 59          	add d, a
0334+  07DC 38 00 00    	mov c, 0
0335+  07DF             strtoint_L0:
0336+  07DF F6          	lodsb			; load ASCII to al
0337+  07E0 B9 00       	cmp al, 0
0338+  07E2 C6 F5 07    	je strtoint_end
0339+  07E5 6F 30       	sub al, $30		; make into integer
0340+  07E7 22 00       	mov ah, 0
0341+  07E9 2A          	mov b, [d]
0342+  07EA AC          	mul a, b			; result in B since it fits in 16bits
0343+  07EB 11          	mov a, b
0344+  07EC 28          	mov b, c
0345+  07ED 54          	add a, b
0346+  07EE 39          	mov c, a
0347+  07EF 63 02 00    	sub d, 2
0348+  07F2 0A DF 07    	jmp strtoint_L0
0349+  07F5             strtoint_end:
0350+  07F5 12          	mov a, c
0351+  07F6 E7          	pop d
0352+  07F7 E6          	pop c
0353+  07F8 E5          	pop b
0354+  07F9 EF          	pop si
0355+  07FA 09          	ret
0356+  07FB             
0357+  07FB             
0358+  07FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  07FB             ; PRINT NULL TERMINATED STRING
0360+  07FB             ; pointer in D
0361+  07FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  07FB             puts:
0363+  07FB D7          	push a
0364+  07FC DA          	push d
0365+  07FD             puts_L1:
0366+  07FD 1E          	mov al, [d]
0367+  07FE B9 00       	cmp al, 0
0368+  0800 C6 0C 08    	jz puts_END
0369+  0803 23          	mov ah, al
0370+  0804 19 00       	mov al, 0
0371+  0806 05 03       	syscall sys_io
0372+  0808 79          	inc d
0373+  0809 0A FD 07    	jmp puts_L1
0374+  080C             puts_END:
0375+  080C E7          	pop d
0376+  080D E4          	pop a
0377+  080E 09          	ret
0378+  080F             
0379+  080F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  080F             ; PRINT N SIZE STRING
0381+  080F             ; pointer in D
0382+  080F             ; size in C
0383+  080F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  080F             putsn:
0385+  080F DB          	push al
0386+  0810 DA          	push d
0387+  0811 D9          	push c
0388+  0812             putsn_L0:
0389+  0812 1E          	mov al, [d]
0390+  0813 23          	mov ah, al
0391+  0814 19 00       	mov al, 0
0392+  0816 05 03       	syscall sys_io
0393+  0818 79          	inc d
0394+  0819 7E          	dec c	
0395+  081A C2 00 00    	cmp c, 0
0396+  081D C7 12 08    	jne putsn_L0
0397+  0820             putsn_end:
0398+  0820 E6          	pop c
0399+  0821 E7          	pop d
0400+  0822 E8          	pop al
0401+  0823 09          	ret
0402+  0824             
0403+  0824             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0824             ; print 16bit decimal number
0405+  0824             ; input number in A
0406+  0824             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0824             print_u16d:
0408+  0824 D7          	push a
0409+  0825 D8          	push b
0410+  0826 26 10 27    	mov b, 10000
0411+  0829 AE          	div a, b			; get 10000 coeff.
0412+  082A 07 50 08    	call print_number
0413+  082D 11          	mov a, b
0414+  082E 26 E8 03    	mov b, 1000
0415+  0831 AE          	div a, b			; get 10000 coeff.
0416+  0832 07 50 08    	call print_number
0417+  0835 11          	mov a, b
0418+  0836 26 64 00    	mov b, 100
0419+  0839 AE          	div a, b
0420+  083A 07 50 08    	call print_number
0421+  083D 11          	mov a, b
0422+  083E 26 0A 00    	mov b, 10
0423+  0841 AE          	div a, b
0424+  0842 07 50 08    	call print_number
0425+  0845 11          	mov a, b
0426+  0846 6A 30       	add al, $30
0427+  0848 23          	mov ah, al
0428+  0849 19 00       	mov al, 0
0429+  084B 05 03       	syscall sys_io	; print coeff
0430+  084D E5          	pop b
0431+  084E E4          	pop a
0432+  084F 09          	ret
0433+  0850             
0434+  0850             
0435+  0850             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0850             ; if A == 0, print space
0437+  0850             ; else print A
0438+  0850             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  0850             print_number:
0440+  0850 6A 30       	add al, $30
0441+  0852 23          	mov ah, al
0442+  0853 07 C1 06    	call putchar
0443+  0856 09          	ret
0444+  0857             
0445+  0857             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0857             ; PRINT 16BIT HEX INTEGER
0447+  0857             ; integer value in reg B
0448+  0857             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0857             print_u16x:
0450+  0857 D7          	push a
0451+  0858 D8          	push b
0452+  0859 DD          	push bl
0453+  085A 30          	mov bl, bh
0454+  085B 07 88 06    	call itoa				; convert bh to char in A
0455+  085E 2F          	mov bl, al				; save al
0456+  085F 19 00       	mov al, 0
0457+  0861 05 03       	syscall sys_io				; display AH
0458+  0863 24          	mov ah, bl				; retrieve al
0459+  0864 19 00       	mov al, 0
0460+  0866 05 03       	syscall sys_io				; display AL
0461+  0868             
0462+  0868 EA          	pop bl
0463+  0869 07 88 06    	call itoa				; convert bh to char in A
0464+  086C 2F          	mov bl, al				; save al
0465+  086D 19 00       	mov al, 0
0466+  086F 05 03       	syscall sys_io				; display AH
0467+  0871 24          	mov ah, bl				; retrieve al
0468+  0872 19 00       	mov al, 0
0469+  0874 05 03       	syscall sys_io				; display AL
0470+  0876             
0471+  0876 E5          	pop b
0472+  0877 E4          	pop a
0473+  0878 09          	ret
0474+  0879             
0475+  0879             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0879             ; INPUT 16BIT HEX INTEGER
0477+  0879             ; read 16bit integer into A
0478+  0879             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0879             scan_u16x:
0480+  0879 F8 10 00    	enter 16
0481+  087C D8          	push b
0482+  087D DA          	push d
0483+  087E             
0484+  087E FA F1 FF    	lea d, [bp + -15]
0485+  0881 07 C8 06    	call gets				; get number
0486+  0884             
0487+  0884 32          	mov bl, [d]
0488+  0885 37          	mov bh, bl
0489+  0886 33 01 00    	mov bl, [d + 1]
0490+  0889 07 76 06    	call atoi				; convert to int in AL
0491+  088C 23          	mov ah, al				; move to AH
0492+  088D             
0493+  088D 33 02 00    	mov bl, [d + 2]
0494+  0890 37          	mov bh, bl
0495+  0891 33 03 00    	mov bl, [d + 3]
0496+  0894 07 76 06    	call atoi				; convert to int in AL
0497+  0897             
0498+  0897 E7          	pop d
0499+  0898 E5          	pop b
0500+  0899 F9          	leave
0501+  089A 09          	ret
0502+  089B             
0503+  089B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  089B             ; PRINT 8bit HEX INTEGER
0505+  089B             ; integer value in reg bl
0506+  089B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  089B             print_u8x:
0508+  089B D7          	push a
0509+  089C DD          	push bl
0510+  089D             
0511+  089D 07 88 06    	call itoa				; convert bl to char in A
0512+  08A0 2F          	mov bl, al				; save al
0513+  08A1 19 00       	mov al, 0
0514+  08A3 05 03       	syscall sys_io				; display AH
0515+  08A5 24          	mov ah, bl				; retrieve al
0516+  08A6 19 00       	mov al, 0
0517+  08A8 05 03       	syscall sys_io				; display AL
0518+  08AA             
0519+  08AA EA          	pop bl
0520+  08AB E4          	pop a
0521+  08AC 09          	ret
0522+  08AD             
0523+  08AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  08AD             ; print 8bit decimal unsigned number
0525+  08AD             ; input number in AL
0526+  08AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  08AD             print_u8d:
0528+  08AD D7          	push a
0529+  08AE D8          	push b
0530+  08AF             
0531+  08AF 22 00       	mov ah, 0
0532+  08B1 26 64 00    	mov b, 100
0533+  08B4 AE          	div a, b
0534+  08B5 D8          	push b			; save remainder
0535+  08B6 B9 00       	cmp al, 0
0536+  08B8 C6 C2 08    	je skip100
0537+  08BB 6A 30       	add al, $30
0538+  08BD 23          	mov ah, al
0539+  08BE 19 00       	mov al, 0
0540+  08C0 05 03       	syscall sys_io	; print coeff
0541+  08C2             skip100:
0542+  08C2 E4          	pop a
0543+  08C3 22 00       	mov ah, 0
0544+  08C5 26 0A 00    	mov b, 10
0545+  08C8 AE          	div a, b
0546+  08C9 D8          	push b			; save remainder
0547+  08CA B9 00       	cmp al, 0
0548+  08CC C6 D6 08    	je skip10
0549+  08CF 6A 30       	add al, $30
0550+  08D1 23          	mov ah, al
0551+  08D2 19 00       	mov al, 0
0552+  08D4 05 03       	syscall sys_io	; print coeff
0553+  08D6             skip10:
0554+  08D6 E4          	pop a
0555+  08D7 1B          	mov al, bl
0556+  08D8 6A 30       	add al, $30
0557+  08DA 23          	mov ah, al
0558+  08DB 19 00       	mov al, 0
0559+  08DD 05 03       	syscall sys_io	; print coeff
0560+  08DF E5          	pop b
0561+  08E0 E4          	pop a
0562+  08E1 09          	ret
0563+  08E2             
0564+  08E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  08E2             ; INPUT 8BIT HEX INTEGER
0566+  08E2             ; read 8bit integer into AL
0567+  08E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  08E2             scan_u8x:
0569+  08E2 F8 04 00    	enter 4
0570+  08E5 D8          	push b
0571+  08E6 DA          	push d
0572+  08E7             
0573+  08E7 FA FD FF    	lea d, [bp + -3]
0574+  08EA 07 C8 06    	call gets				; get number
0575+  08ED             
0576+  08ED 32          	mov bl, [d]
0577+  08EE 37          	mov bh, bl
0578+  08EF 33 01 00    	mov bl, [d + 1]
0579+  08F2 07 76 06    	call atoi				; convert to int in AL
0580+  08F5             
0581+  08F5 E7          	pop d
0582+  08F6 E5          	pop b
0583+  08F7 F9          	leave
0584+  08F8 09          	ret
0585+  08F9             
0586+  08F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  08F9             ; input decimal number
0588+  08F9             ; result in A
0589+  08F9             ; 655'\0'
0590+  08F9             ; low--------high
0591+  08F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  08F9             scan_u16d:
0593+  08F9 F8 08 00    	enter 8
0594+  08FC E2          	push si
0595+  08FD D8          	push b
0596+  08FE D9          	push c
0597+  08FF DA          	push d
0598+  0900 FA F9 FF    	lea d, [bp +- 7]
0599+  0903 07 C8 06    	call gets
0600+  0906 07 F6 05    	call strlen			; get string length in C
0601+  0909 7E          	dec c
0602+  090A FD 4E       	mov si, d
0603+  090C 12          	mov a, c
0604+  090D FD 99       	shl a
0605+  090F 3B 5E 06    	mov d, table_power
0606+  0912 59          	add d, a
0607+  0913 38 00 00    	mov c, 0
0608+  0916             mul_loop:
0609+  0916 F6          	lodsb			; load ASCII to al
0610+  0917 B9 00       	cmp al, 0
0611+  0919 C6 2C 09    	je mul_exit
0612+  091C 6F 30       	sub al, $30		; make into integer
0613+  091E 22 00       	mov ah, 0
0614+  0920 2A          	mov b, [d]
0615+  0921 AC          	mul a, b			; result in B since it fits in 16bits
0616+  0922 11          	mov a, b
0617+  0923 28          	mov b, c
0618+  0924 54          	add a, b
0619+  0925 39          	mov c, a
0620+  0926 63 02 00    	sub d, 2
0621+  0929 0A 16 09    	jmp mul_loop
0622+  092C             mul_exit:
0623+  092C 12          	mov a, c
0624+  092D E7          	pop d
0625+  092E E6          	pop c
0626+  092F E5          	pop b
0627+  0930 EF          	pop si
0628+  0931 F9          	leave
0629+  0932 09          	ret
0299   0933             ; --- END INCLUDE BLOCK
0300   0933             
0301   0933             
0302   0933             .end
tasm: Number of errors = 0
