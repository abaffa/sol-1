0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 52 02 00      sub sp, 2 ; j
0012   0408             _for1_init:
0013   0408 26 00 00      mov b, 0
0014   040B D7            push a
0015   040C 11            mov a, b
0016   040D 45 FF FF      mov [bp + -1], a ; i
0017   0410 E4            pop a
0018   0411             _for1_cond:
0019   0411 2C FF FF      mov b, [bp + -1] ; i
0020   0414 D7            push a
0021   0415 11            mov a, b
0022   0416 29 53 09      mov b, [__ROWS] ; ROWS
0023   0419 B0            cmp a, b
0024   041A 0E            lodflgs
0025   041B 87 02         and al, %00000010 ; <
0026   041D FD 9C         shr al
0027   041F 22 00         mov ah, 0
0028   0421 27            mov b, a
0029   0422 E4            pop a
0030   0423 C0 00 00      cmp b, 0
0031   0426 C6 9E 04      je _for1_exit
0032   0429             _for1_block:
0033   0429             _for2_init:
0034   0429 26 00 00      mov b, 0
0035   042C D7            push a
0036   042D 11            mov a, b
0037   042E 45 FD FF      mov [bp + -3], a ; j
0038   0431 E4            pop a
0039   0432             _for2_cond:
0040   0432 2C FD FF      mov b, [bp + -3] ; j
0041   0435 D7            push a
0042   0436 11            mov a, b
0043   0437 29 55 09      mov b, [__COLS] ; COLS
0044   043A B0            cmp a, b
0045   043B 0E            lodflgs
0046   043C 87 02         and al, %00000010 ; <
0047   043E FD 9C         shr al
0048   0440 22 00         mov ah, 0
0049   0442 27            mov b, a
0050   0443 E4            pop a
0051   0444 C0 00 00      cmp b, 0
0052   0447 C6 8C 04      je _for2_exit
0053   044A             _for2_block:
0054   044A 29 D9 15      mov b, [__board] ; board
0055   044D D7            push a
0056   044E 74            mov d, b
0057   044F DA            push d
0058   0450 2C FF FF      mov b, [bp + -1] ; i
0059   0453 E7            pop d
0060   0454 10 50 00      mov a, 80
0061   0457 AC            mul a, b
0062   0458 5A            add d, b
0063   0459 DA            push d
0064   045A 2C FD FF      mov b, [bp + -3] ; j
0065   045D E7            pop d
0066   045E 10 02 00      mov a, 2
0067   0461 AC            mul a, b
0068   0462 5A            add d, b
0069   0463 E4            pop a
0070   0464 DA            push d
0071   0465 2C FF FF      mov b, [bp + -1] ; i
0072   0468 D7            push a
0073   0469 11            mov a, b
0074   046A 2C FD FF      mov b, [bp + -3] ; j
0075   046D D7            push a
0076   046E 11            mov a, b
0077   046F 26 02 00      mov b, 2
0078   0472 AE            div a, b
0079   0473 E4            pop a
0080   0474 54            add a, b
0081   0475 27            mov b, a
0082   0476 E4            pop a
0083   0477 E7            pop d
0084   0478 FD 43         mov [d], b
0085   047A             _for2_update:
0086   047A 2C FD FF      mov b, [bp + -3] ; j
0087   047D D7            push a
0088   047E 11            mov a, b
0089   047F FD 77         inc b
0090   0481 D7            push a
0091   0482 11            mov a, b
0092   0483 45 FD FF      mov [bp + -3], a ; j
0093   0486 E4            pop a
0094   0487 27            mov b, a
0095   0488 E4            pop a
0096   0489 0A 32 04      jmp _for2_cond
0097   048C             _for2_exit:
0098   048C             _for1_update:
0099   048C 2C FF FF      mov b, [bp + -1] ; i
0100   048F D7            push a
0101   0490 11            mov a, b
0102   0491 FD 77         inc b
0103   0493 D7            push a
0104   0494 11            mov a, b
0105   0495 45 FF FF      mov [bp + -1], a ; i
0106   0498 E4            pop a
0107   0499 27            mov b, a
0108   049A E4            pop a
0109   049B 0A 11 04      jmp _for1_cond
0110   049E             _for1_exit:
0111   049E             _for3_init:
0112   049E 26 00 00      mov b, 0
0113   04A1 D7            push a
0114   04A2 11            mov a, b
0115   04A3 45 FF FF      mov [bp + -1], a ; i
0116   04A6 E4            pop a
0117   04A7             _for3_cond:
0118   04A7 2C FF FF      mov b, [bp + -1] ; i
0119   04AA D7            push a
0120   04AB 11            mov a, b
0121   04AC 26 0A 00      mov b, 10
0122   04AF B0            cmp a, b
0123   04B0 0E            lodflgs
0124   04B1 87 02         and al, %00000010 ; <
0125   04B3 FD 9C         shr al
0126   04B5 22 00         mov ah, 0
0127   04B7 27            mov b, a
0128   04B8 E4            pop a
0129   04B9 C0 00 00      cmp b, 0
0130   04BC C6 0F 05      je _for3_exit
0131   04BF             _for3_block:
0132   04BF 26 DB 15      mov b, __string_0 ; "Iteration :"
0133   04C2 FD AB         swp b
0134   04C4 D8            push b
0135   04C5 2C FF FF      mov b, [bp + -1] ; i
0136   04C8 D7            push a
0137   04C9 11            mov a, b
0138   04CA 26 01 00      mov b, 1
0139   04CD 54            add a, b
0140   04CE 27            mov b, a
0141   04CF E4            pop a
0142   04D0 FD AB         swp b
0143   04D2 D8            push b
0144   04D3 07 31 09      call printn
0145   04D6 51 04 00      add sp, 4
0146   04D9 26 E7 15      mov b, __string_1 ; "\n"
0147   04DC FD AB         swp b
0148   04DE D8            push b
0149   04DF 07 48 09      call print
0150   04E2 51 02 00      add sp, 2
0151   04E5 29 D9 15      mov b, [__board] ; board
0152   04E8 FD AB         swp b
0153   04EA D8            push b
0154   04EB 07 15 05      call display_board
0155   04EE 51 02 00      add sp, 2
0156   04F1 29 D9 15      mov b, [__board] ; board
0157   04F4 FD AB         swp b
0158   04F6 D8            push b
0159   04F7 07 C3 05      call update_board
0160   04FA 51 02 00      add sp, 2
0161   04FD             _for3_update:
0162   04FD 2C FF FF      mov b, [bp + -1] ; i
0163   0500 D7            push a
0164   0501 11            mov a, b
0165   0502 FD 77         inc b
0166   0504 D7            push a
0167   0505 11            mov a, b
0168   0506 45 FF FF      mov [bp + -1], a ; i
0169   0509 E4            pop a
0170   050A 27            mov b, a
0171   050B E4            pop a
0172   050C 0A A7 04      jmp _for3_cond
0173   050F             _for3_exit:
0174   050F 26 00 00      mov b, 0
0175   0512 F9            leave
0176   0513 05 0B         syscall sys_terminate_proc
0177   0515             
0178   0515             display_board:
0179   0515 D2            push bp
0180   0516 9B            mov bp, sp
0181   0517 52 02 00      sub sp, 2 ; i
0182   051A 52 02 00      sub sp, 2 ; j
0183   051D             _for4_init:
0184   051D 26 00 00      mov b, 0
0185   0520 D7            push a
0186   0521 11            mov a, b
0187   0522 45 FF FF      mov [bp + -1], a ; i
0188   0525 E4            pop a
0189   0526             _for4_cond:
0190   0526 2C FF FF      mov b, [bp + -1] ; i
0191   0529 D7            push a
0192   052A 11            mov a, b
0193   052B 29 53 09      mov b, [__ROWS] ; ROWS
0194   052E B0            cmp a, b
0195   052F 0E            lodflgs
0196   0530 87 02         and al, %00000010 ; <
0197   0532 FD 9C         shr al
0198   0534 22 00         mov ah, 0
0199   0536 27            mov b, a
0200   0537 E4            pop a
0201   0538 C0 00 00      cmp b, 0
0202   053B C6 C3 05      je _for4_exit
0203   053E             _for4_block:
0204   053E             _for5_init:
0205   053E 26 00 00      mov b, 0
0206   0541 D7            push a
0207   0542 11            mov a, b
0208   0543 45 FD FF      mov [bp + -3], a ; j
0209   0546 E4            pop a
0210   0547             _for5_cond:
0211   0547 2C FD FF      mov b, [bp + -3] ; j
0212   054A D7            push a
0213   054B 11            mov a, b
0214   054C 29 55 09      mov b, [__COLS] ; COLS
0215   054F B0            cmp a, b
0216   0550 0E            lodflgs
0217   0551 87 02         and al, %00000010 ; <
0218   0553 FD 9C         shr al
0219   0555 22 00         mov ah, 0
0220   0557 27            mov b, a
0221   0558 E4            pop a
0222   0559 C0 00 00      cmp b, 0
0223   055C C6 A5 05      je _for5_exit
0224   055F             _for5_block:
0225   055F             _ternary7_cond:
0226   055F FA 05 00      lea d, [bp + 5] ; board
0227   0562 2A            mov b, [d]
0228   0563 D7            push a
0229   0564 74            mov d, b
0230   0565 DA            push d
0231   0566 2C FF FF      mov b, [bp + -1] ; i
0232   0569 E7            pop d
0233   056A 10 50 00      mov a, 80
0234   056D AC            mul a, b
0235   056E 5A            add d, b
0236   056F DA            push d
0237   0570 2C FD FF      mov b, [bp + -3] ; j
0238   0573 E7            pop d
0239   0574 10 02 00      mov a, 2
0240   0577 AC            mul a, b
0241   0578 5A            add d, b
0242   0579 E4            pop a
0243   057A 2A            mov b, [d]
0244   057B C0 00 00      cmp b, 0
0245   057E C6 87 05      je _ternary7_false
0246   0581             _ternary7_true:
0247   0581 26 E9 15      mov b, __string_2 ; "X"
0248   0584 0A 8A 05      jmp _ternary7_exit
0249   0587             _ternary7_false:
0250   0587 26 EB 15      mov b, __string_3 ; " "
0251   058A             _ternary7_exit:
0252   058A FD AB         swp b
0253   058C D8            push b
0254   058D 07 48 09      call print
0255   0590 51 02 00      add sp, 2
0256   0593             _for5_update:
0257   0593 2C FD FF      mov b, [bp + -3] ; j
0258   0596 D7            push a
0259   0597 11            mov a, b
0260   0598 FD 77         inc b
0261   059A D7            push a
0262   059B 11            mov a, b
0263   059C 45 FD FF      mov [bp + -3], a ; j
0264   059F E4            pop a
0265   05A0 27            mov b, a
0266   05A1 E4            pop a
0267   05A2 0A 47 05      jmp _for5_cond
0268   05A5             _for5_exit:
0269   05A5 26 E7 15      mov b, __string_1 ; "\n"
0270   05A8 FD AB         swp b
0271   05AA D8            push b
0272   05AB 07 48 09      call print
0273   05AE 51 02 00      add sp, 2
0274   05B1             _for4_update:
0275   05B1 2C FF FF      mov b, [bp + -1] ; i
0276   05B4 D7            push a
0277   05B5 11            mov a, b
0278   05B6 FD 77         inc b
0279   05B8 D7            push a
0280   05B9 11            mov a, b
0281   05BA 45 FF FF      mov [bp + -1], a ; i
0282   05BD E4            pop a
0283   05BE 27            mov b, a
0284   05BF E4            pop a
0285   05C0 0A 26 05      jmp _for4_cond
0286   05C3             _for4_exit:
0287   05C3             
0288   05C3             update_board:
0289   05C3 D2            push bp
0290   05C4 9B            mov bp, sp
0291   05C5 52 02 00      sub sp, 2 ; dx
0292   05C8 52 02 00      sub sp, 2 ; dy
0293   05CB 52 02 00      sub sp, 2 ; i
0294   05CE 52 02 00      sub sp, 2 ; j
0295   05D1 52 02 00      sub sp, 2 ; count
0296   05D4 52 02 00      sub sp, 2 ; x
0297   05D7 52 02 00      sub sp, 2 ; y
0298   05DA             _for8_init:
0299   05DA 26 00 00      mov b, 0
0300   05DD D7            push a
0301   05DE 11            mov a, b
0302   05DF 45 FB FF      mov [bp + -5], a ; i
0303   05E2 E4            pop a
0304   05E3             _for8_cond:
0305   05E3 2C FB FF      mov b, [bp + -5] ; i
0306   05E6 D7            push a
0307   05E7 11            mov a, b
0308   05E8 29 53 09      mov b, [__ROWS] ; ROWS
0309   05EB B0            cmp a, b
0310   05EC 0E            lodflgs
0311   05ED 87 02         and al, %00000010 ; <
0312   05EF FD 9C         shr al
0313   05F1 22 00         mov ah, 0
0314   05F3 27            mov b, a
0315   05F4 E4            pop a
0316   05F5 C0 00 00      cmp b, 0
0317   05F8 C6 77 08      je _for8_exit
0318   05FB             _for8_block:
0319   05FB             _for9_init:
0320   05FB 26 00 00      mov b, 0
0321   05FE D7            push a
0322   05FF 11            mov a, b
0323   0600 45 F9 FF      mov [bp + -7], a ; j
0324   0603 E4            pop a
0325   0604             _for9_cond:
0326   0604 2C F9 FF      mov b, [bp + -7] ; j
0327   0607 D7            push a
0328   0608 11            mov a, b
0329   0609 29 55 09      mov b, [__COLS] ; COLS
0330   060C B0            cmp a, b
0331   060D 0E            lodflgs
0332   060E 87 02         and al, %00000010 ; <
0333   0610 FD 9C         shr al
0334   0612 22 00         mov ah, 0
0335   0614 27            mov b, a
0336   0615 E4            pop a
0337   0616 C0 00 00      cmp b, 0
0338   0619 C6 65 08      je _for9_exit
0339   061C             _for9_block:
0340   061C 26 00 00      mov b, 0
0341   061F D7            push a
0342   0620 11            mov a, b
0343   0621 45 F7 FF      mov [bp + -9], a ; count
0344   0624 E4            pop a
0345   0625             _for10_init:
0346   0625 26 01 00      mov b, 1
0347   0628 FD 97         neg b
0348   062A D7            push a
0349   062B 11            mov a, b
0350   062C 45 FF FF      mov [bp + -1], a ; dx
0351   062F E4            pop a
0352   0630             _for10_cond:
0353   0630 2C FF FF      mov b, [bp + -1] ; dx
0354   0633 D7            push a
0355   0634 11            mov a, b
0356   0635 26 01 00      mov b, 1
0357   0638 B0            cmp a, b
0358   0639 0E            lodflgs
0359   063A 87 03         and al, %00000011 ; <=
0360   063C B9 00         cmp al, 0
0361   063E 0E            lodflgs
0362   063F 8F 01         xor al, %00000001
0363   0641 22 00         mov ah, 0
0364   0643 27            mov b, a
0365   0644 E4            pop a
0366   0645 C0 00 00      cmp b, 0
0367   0648 C6 D3 07      je _for10_exit
0368   064B             _for10_block:
0369   064B             _for11_init:
0370   064B 26 01 00      mov b, 1
0371   064E FD 97         neg b
0372   0650 D7            push a
0373   0651 11            mov a, b
0374   0652 45 FD FF      mov [bp + -3], a ; dy
0375   0655 E4            pop a
0376   0656             _for11_cond:
0377   0656 2C FD FF      mov b, [bp + -3] ; dy
0378   0659 D7            push a
0379   065A 11            mov a, b
0380   065B 26 01 00      mov b, 1
0381   065E B0            cmp a, b
0382   065F 0E            lodflgs
0383   0660 87 03         and al, %00000011 ; <=
0384   0662 B9 00         cmp al, 0
0385   0664 0E            lodflgs
0386   0665 8F 01         xor al, %00000001
0387   0667 22 00         mov ah, 0
0388   0669 27            mov b, a
0389   066A E4            pop a
0390   066B C0 00 00      cmp b, 0
0391   066E C6 C1 07      je _for11_exit
0392   0671             _for11_block:
0393   0671             _if12_cond:
0394   0671 2C FF FF      mov b, [bp + -1] ; dx
0395   0674 D7            push a
0396   0675 11            mov a, b
0397   0676 26 00 00      mov b, 0
0398   0679 B0            cmp a, b
0399   067A 0E            lodflgs
0400   067B 87 01         and al, %00000001 ; ==
0401   067D 22 00         mov ah, 0
0402   067F 27            mov b, a
0403   0680 E4            pop a
0404   0681 DB            push al
0405   0682 C0 00 00      cmp b, 0
0406   0685 0E            lodflgs ; transform condition into a single bit
0407   0686 2C FD FF      mov b, [bp + -3] ; dy
0408   0689 D7            push a
0409   068A 11            mov a, b
0410   068B 26 00 00      mov b, 0
0411   068E B0            cmp a, b
0412   068F 0E            lodflgs
0413   0690 87 01         and al, %00000001 ; ==
0414   0692 22 00         mov ah, 0
0415   0694 27            mov b, a
0416   0695 E4            pop a
0417   0696 DB            push al
0418   0697 C0 00 00      cmp b, 0
0419   069A 0E            lodflgs
0420   069B EA            pop bl ; matches previous 'push al'
0421   069C 8C            or al, bl
0422   069D 8F 01         xor al, %00000001
0423   069F 2F            mov bl, al
0424   06A0 A7 00         mov bh, 0
0425   06A2 E8            pop al
0426   06A3 C0 00 00      cmp b, 0
0427   06A6 C6 AF 06      je _if12_exit
0428   06A9             _if12_true:
0429   06A9 0A 56 06      jmp _for11_cond ; for continue
0430   06AC 0A AF 06      jmp _if12_exit
0431   06AF             _if12_exit:
0432   06AF 2C FB FF      mov b, [bp + -5] ; i
0433   06B2 D7            push a
0434   06B3 11            mov a, b
0435   06B4 2C FF FF      mov b, [bp + -1] ; dx
0436   06B7 54            add a, b
0437   06B8 27            mov b, a
0438   06B9 E4            pop a
0439   06BA D7            push a
0440   06BB 11            mov a, b
0441   06BC 45 F5 FF      mov [bp + -11], a ; x
0442   06BF E4            pop a
0443   06C0 2C F9 FF      mov b, [bp + -7] ; j
0444   06C3 D7            push a
0445   06C4 11            mov a, b
0446   06C5 2C FD FF      mov b, [bp + -3] ; dy
0447   06C8 54            add a, b
0448   06C9 27            mov b, a
0449   06CA E4            pop a
0450   06CB D7            push a
0451   06CC 11            mov a, b
0452   06CD 45 F3 FF      mov [bp + -13], a ; y
0453   06D0 E4            pop a
0454   06D1             _if13_cond:
0455   06D1 2C F5 FF      mov b, [bp + -11] ; x
0456   06D4 D7            push a
0457   06D5 11            mov a, b
0458   06D6 26 00 00      mov b, 0
0459   06D9 B0            cmp a, b
0460   06DA 0E            lodflgs
0461   06DB 87 02         and al, %00000010 ; <
0462   06DD FD 9C         shr al
0463   06DF 22 00         mov ah, 0
0464   06E1 27            mov b, a
0465   06E2 E4            pop a
0466   06E3 C0 00 00      cmp b, 0
0467   06E6 C6 FD 06      je _if13_else
0468   06E9             _if13_true:
0469   06E9 29 53 09      mov b, [__ROWS] ; ROWS
0470   06EC D7            push a
0471   06ED 11            mov a, b
0472   06EE 26 01 00      mov b, 1
0473   06F1 60            sub a, b
0474   06F2 27            mov b, a
0475   06F3 E4            pop a
0476   06F4 D7            push a
0477   06F5 11            mov a, b
0478   06F6 45 F5 FF      mov [bp + -11], a ; x
0479   06F9 E4            pop a
0480   06FA 0A 26 07      jmp _if13_exit
0481   06FD             _if13_else:
0482   06FD             _if14_cond:
0483   06FD 2C F5 FF      mov b, [bp + -11] ; x
0484   0700 D7            push a
0485   0701 11            mov a, b
0486   0702 29 53 09      mov b, [__ROWS] ; ROWS
0487   0705 B0            cmp a, b
0488   0706 0E            lodflgs
0489   0707 87 03         and al, %00000011
0490   0709 8F 02         xor al, %00000010 ; >=
0491   070B B9 00         cmp al, 0
0492   070D 0E            lodflgs
0493   070E 8F 01         xor al, %00000001
0494   0710 22 00         mov ah, 0
0495   0712 27            mov b, a
0496   0713 E4            pop a
0497   0714 C0 00 00      cmp b, 0
0498   0717 C6 26 07      je _if14_exit
0499   071A             _if14_true:
0500   071A 26 00 00      mov b, 0
0501   071D D7            push a
0502   071E 11            mov a, b
0503   071F 45 F5 FF      mov [bp + -11], a ; x
0504   0722 E4            pop a
0505   0723 0A 26 07      jmp _if14_exit
0506   0726             _if14_exit:
0507   0726             _if13_exit:
0508   0726             _if15_cond:
0509   0726 2C F3 FF      mov b, [bp + -13] ; y
0510   0729 D7            push a
0511   072A 11            mov a, b
0512   072B 26 00 00      mov b, 0
0513   072E B0            cmp a, b
0514   072F 0E            lodflgs
0515   0730 87 02         and al, %00000010 ; <
0516   0732 FD 9C         shr al
0517   0734 22 00         mov ah, 0
0518   0736 27            mov b, a
0519   0737 E4            pop a
0520   0738 C0 00 00      cmp b, 0
0521   073B C6 52 07      je _if15_else
0522   073E             _if15_true:
0523   073E 29 55 09      mov b, [__COLS] ; COLS
0524   0741 D7            push a
0525   0742 11            mov a, b
0526   0743 26 01 00      mov b, 1
0527   0746 60            sub a, b
0528   0747 27            mov b, a
0529   0748 E4            pop a
0530   0749 D7            push a
0531   074A 11            mov a, b
0532   074B 45 F3 FF      mov [bp + -13], a ; y
0533   074E E4            pop a
0534   074F 0A 7B 07      jmp _if15_exit
0535   0752             _if15_else:
0536   0752             _if16_cond:
0537   0752 2C F3 FF      mov b, [bp + -13] ; y
0538   0755 D7            push a
0539   0756 11            mov a, b
0540   0757 29 55 09      mov b, [__COLS] ; COLS
0541   075A B0            cmp a, b
0542   075B 0E            lodflgs
0543   075C 87 03         and al, %00000011
0544   075E 8F 02         xor al, %00000010 ; >=
0545   0760 B9 00         cmp al, 0
0546   0762 0E            lodflgs
0547   0763 8F 01         xor al, %00000001
0548   0765 22 00         mov ah, 0
0549   0767 27            mov b, a
0550   0768 E4            pop a
0551   0769 C0 00 00      cmp b, 0
0552   076C C6 7B 07      je _if16_exit
0553   076F             _if16_true:
0554   076F 26 00 00      mov b, 0
0555   0772 D7            push a
0556   0773 11            mov a, b
0557   0774 45 F3 FF      mov [bp + -13], a ; y
0558   0777 E4            pop a
0559   0778 0A 7B 07      jmp _if16_exit
0560   077B             _if16_exit:
0561   077B             _if15_exit:
0562   077B             _if17_cond:
0563   077B FA 05 00      lea d, [bp + 5] ; board
0564   077E 2A            mov b, [d]
0565   077F D7            push a
0566   0780 74            mov d, b
0567   0781 DA            push d
0568   0782 2C F5 FF      mov b, [bp + -11] ; x
0569   0785 E7            pop d
0570   0786 10 50 00      mov a, 80
0571   0789 AC            mul a, b
0572   078A 5A            add d, b
0573   078B DA            push d
0574   078C 2C F3 FF      mov b, [bp + -13] ; y
0575   078F E7            pop d
0576   0790 10 02 00      mov a, 2
0577   0793 AC            mul a, b
0578   0794 5A            add d, b
0579   0795 E4            pop a
0580   0796 2A            mov b, [d]
0581   0797 C0 00 00      cmp b, 0
0582   079A C6 AF 07      je _if17_exit
0583   079D             _if17_true:
0584   079D 2C F7 FF      mov b, [bp + -9] ; count
0585   07A0 D7            push a
0586   07A1 11            mov a, b
0587   07A2 FD 77         inc b
0588   07A4 D7            push a
0589   07A5 11            mov a, b
0590   07A6 45 F7 FF      mov [bp + -9], a ; count
0591   07A9 E4            pop a
0592   07AA 27            mov b, a
0593   07AB E4            pop a
0594   07AC 0A AF 07      jmp _if17_exit
0595   07AF             _if17_exit:
0596   07AF             _for11_update:
0597   07AF 2C FD FF      mov b, [bp + -3] ; dy
0598   07B2 D7            push a
0599   07B3 11            mov a, b
0600   07B4 FD 77         inc b
0601   07B6 D7            push a
0602   07B7 11            mov a, b
0603   07B8 45 FD FF      mov [bp + -3], a ; dy
0604   07BB E4            pop a
0605   07BC 27            mov b, a
0606   07BD E4            pop a
0607   07BE 0A 56 06      jmp _for11_cond
0608   07C1             _for11_exit:
0609   07C1             _for10_update:
0610   07C1 2C FF FF      mov b, [bp + -1] ; dx
0611   07C4 D7            push a
0612   07C5 11            mov a, b
0613   07C6 FD 77         inc b
0614   07C8 D7            push a
0615   07C9 11            mov a, b
0616   07CA 45 FF FF      mov [bp + -1], a ; dx
0617   07CD E4            pop a
0618   07CE 27            mov b, a
0619   07CF E4            pop a
0620   07D0 0A 30 06      jmp _for10_cond
0621   07D3             _for10_exit:
0622   07D3             _if18_cond:
0623   07D3 FA 05 00      lea d, [bp + 5] ; board
0624   07D6 2A            mov b, [d]
0625   07D7 D7            push a
0626   07D8 74            mov d, b
0627   07D9 DA            push d
0628   07DA 2C FB FF      mov b, [bp + -5] ; i
0629   07DD E7            pop d
0630   07DE 10 50 00      mov a, 80
0631   07E1 AC            mul a, b
0632   07E2 5A            add d, b
0633   07E3 DA            push d
0634   07E4 2C F9 FF      mov b, [bp + -7] ; j
0635   07E7 E7            pop d
0636   07E8 10 02 00      mov a, 2
0637   07EB AC            mul a, b
0638   07EC 5A            add d, b
0639   07ED E4            pop a
0640   07EE 2A            mov b, [d]
0641   07EF C0 00 00      cmp b, 0
0642   07F2 C6 19 08      je _if18_else
0643   07F5             _if18_true:
0644   07F5 29 97 0F      mov b, [__new_board] ; new_board
0645   07F8 D7            push a
0646   07F9 74            mov d, b
0647   07FA DA            push d
0648   07FB 2C FB FF      mov b, [bp + -5] ; i
0649   07FE E7            pop d
0650   07FF 10 50 00      mov a, 80
0651   0802 AC            mul a, b
0652   0803 5A            add d, b
0653   0804 DA            push d
0654   0805 2C F9 FF      mov b, [bp + -7] ; j
0655   0808 E7            pop d
0656   0809 10 02 00      mov a, 2
0657   080C AC            mul a, b
0658   080D 5A            add d, b
0659   080E E4            pop a
0660   080F DA            push d
0661   0810 26 02 00      mov b, 2
0662   0813 E7            pop d
0663   0814 FD 43         mov [d], b
0664   0816 0A 53 08      jmp _if18_exit
0665   0819             _if18_else:
0666   0819             _if19_cond:
0667   0819 2C F7 FF      mov b, [bp + -9] ; count
0668   081C D7            push a
0669   081D 11            mov a, b
0670   081E 26 02 00      mov b, 2
0671   0821 B0            cmp a, b
0672   0822 0E            lodflgs
0673   0823 87 01         and al, %00000001 ; ==
0674   0825 22 00         mov ah, 0
0675   0827 27            mov b, a
0676   0828 E4            pop a
0677   0829 C0 00 00      cmp b, 0
0678   082C C6 53 08      je _if19_exit
0679   082F             _if19_true:
0680   082F 29 97 0F      mov b, [__new_board] ; new_board
0681   0832 D7            push a
0682   0833 74            mov d, b
0683   0834 DA            push d
0684   0835 2C FB FF      mov b, [bp + -5] ; i
0685   0838 E7            pop d
0686   0839 10 50 00      mov a, 80
0687   083C AC            mul a, b
0688   083D 5A            add d, b
0689   083E DA            push d
0690   083F 2C F9 FF      mov b, [bp + -7] ; j
0691   0842 E7            pop d
0692   0843 10 02 00      mov a, 2
0693   0846 AC            mul a, b
0694   0847 5A            add d, b
0695   0848 E4            pop a
0696   0849 DA            push d
0697   084A 26 01 00      mov b, 1
0698   084D E7            pop d
0699   084E FD 43         mov [d], b
0700   0850 0A 53 08      jmp _if19_exit
0701   0853             _if19_exit:
0702   0853             _if18_exit:
0703   0853             _for9_update:
0704   0853 2C F9 FF      mov b, [bp + -7] ; j
0705   0856 D7            push a
0706   0857 11            mov a, b
0707   0858 FD 77         inc b
0708   085A D7            push a
0709   085B 11            mov a, b
0710   085C 45 F9 FF      mov [bp + -7], a ; j
0711   085F E4            pop a
0712   0860 27            mov b, a
0713   0861 E4            pop a
0714   0862 0A 04 06      jmp _for9_cond
0715   0865             _for9_exit:
0716   0865             _for8_update:
0717   0865 2C FB FF      mov b, [bp + -5] ; i
0718   0868 D7            push a
0719   0869 11            mov a, b
0720   086A FD 77         inc b
0721   086C D7            push a
0722   086D 11            mov a, b
0723   086E 45 FB FF      mov [bp + -5], a ; i
0724   0871 E4            pop a
0725   0872 27            mov b, a
0726   0873 E4            pop a
0727   0874 0A E3 05      jmp _for8_cond
0728   0877             _for8_exit:
0729   0877             _for20_init:
0730   0877 26 00 00      mov b, 0
0731   087A D7            push a
0732   087B 11            mov a, b
0733   087C 45 FB FF      mov [bp + -5], a ; i
0734   087F E4            pop a
0735   0880             _for20_cond:
0736   0880 2C FB FF      mov b, [bp + -5] ; i
0737   0883 D7            push a
0738   0884 11            mov a, b
0739   0885 29 53 09      mov b, [__ROWS] ; ROWS
0740   0888 B0            cmp a, b
0741   0889 0E            lodflgs
0742   088A 87 02         and al, %00000010 ; <
0743   088C FD 9C         shr al
0744   088E 22 00         mov ah, 0
0745   0890 27            mov b, a
0746   0891 E4            pop a
0747   0892 C0 00 00      cmp b, 0
0748   0895 C6 17 09      je _for20_exit
0749   0898             _for20_block:
0750   0898             _for21_init:
0751   0898 26 00 00      mov b, 0
0752   089B D7            push a
0753   089C 11            mov a, b
0754   089D 45 F9 FF      mov [bp + -7], a ; j
0755   08A0 E4            pop a
0756   08A1             _for21_cond:
0757   08A1 2C F9 FF      mov b, [bp + -7] ; j
0758   08A4 D7            push a
0759   08A5 11            mov a, b
0760   08A6 29 55 09      mov b, [__COLS] ; COLS
0761   08A9 B0            cmp a, b
0762   08AA 0E            lodflgs
0763   08AB 87 02         and al, %00000010 ; <
0764   08AD FD 9C         shr al
0765   08AF 22 00         mov ah, 0
0766   08B1 27            mov b, a
0767   08B2 E4            pop a
0768   08B3 C0 00 00      cmp b, 0
0769   08B6 C6 05 09      je _for21_exit
0770   08B9             _for21_block:
0771   08B9 FA 05 00      lea d, [bp + 5] ; board
0772   08BC 2A            mov b, [d]
0773   08BD D7            push a
0774   08BE 74            mov d, b
0775   08BF DA            push d
0776   08C0 2C FB FF      mov b, [bp + -5] ; i
0777   08C3 E7            pop d
0778   08C4 10 50 00      mov a, 80
0779   08C7 AC            mul a, b
0780   08C8 5A            add d, b
0781   08C9 DA            push d
0782   08CA 2C F9 FF      mov b, [bp + -7] ; j
0783   08CD E7            pop d
0784   08CE 10 02 00      mov a, 2
0785   08D1 AC            mul a, b
0786   08D2 5A            add d, b
0787   08D3 E4            pop a
0788   08D4 DA            push d
0789   08D5 29 97 0F      mov b, [__new_board] ; new_board
0790   08D8 D7            push a
0791   08D9 74            mov d, b
0792   08DA DA            push d
0793   08DB 2C FB FF      mov b, [bp + -5] ; i
0794   08DE E7            pop d
0795   08DF 10 50 00      mov a, 80
0796   08E2 AC            mul a, b
0797   08E3 5A            add d, b
0798   08E4 DA            push d
0799   08E5 2C F9 FF      mov b, [bp + -7] ; j
0800   08E8 E7            pop d
0801   08E9 10 02 00      mov a, 2
0802   08EC AC            mul a, b
0803   08ED 5A            add d, b
0804   08EE E4            pop a
0805   08EF 2A            mov b, [d]
0806   08F0 E7            pop d
0807   08F1 FD 43         mov [d], b
0808   08F3             _for21_update:
0809   08F3 2C F9 FF      mov b, [bp + -7] ; j
0810   08F6 D7            push a
0811   08F7 11            mov a, b
0812   08F8 FD 77         inc b
0813   08FA D7            push a
0814   08FB 11            mov a, b
0815   08FC 45 F9 FF      mov [bp + -7], a ; j
0816   08FF E4            pop a
0817   0900 27            mov b, a
0818   0901 E4            pop a
0819   0902 0A A1 08      jmp _for21_cond
0820   0905             _for21_exit:
0821   0905             _for20_update:
0822   0905 2C FB FF      mov b, [bp + -5] ; i
0823   0908 D7            push a
0824   0909 11            mov a, b
0825   090A FD 77         inc b
0826   090C D7            push a
0827   090D 11            mov a, b
0828   090E 45 FB FF      mov [bp + -5], a ; i
0829   0911 E4            pop a
0830   0912 27            mov b, a
0831   0913 E4            pop a
0832   0914 0A 80 08      jmp _for20_cond
0833   0917             _for20_exit:
0834   0917             
0835   0917             scann:
0836   0917 D2            push bp
0837   0918 9B            mov bp, sp
0838   0919 52 02 00      sub sp, 2 ; m
0839   091C             
0840   091C             ; --- BEGIN INLINE ASM BLOCK
0841   091C 07 37 19      call scan_u16d
0842   091F 45 FF FF      mov [bp + -1], a
0843   0922             ; --- END INLINE ASM BLOCK
0844   0922             
0845   0922 FA 05 00      lea d, [bp + 5] ; n
0846   0925 2A            mov b, [d]
0847   0926 D8            push b
0848   0927 2C FF FF      mov b, [bp + -1] ; m
0849   092A E7            pop d
0850   092B D7            push a
0851   092C 11            mov a, b
0852   092D 43            mov [d], a
0853   092E E4            pop a
0854   092F F9            leave
0855   0930 09            ret
0856   0931             
0857   0931             printn:
0858   0931 D2            push bp
0859   0932 9B            mov bp, sp
0860   0933 FA 07 00      lea d, [bp + 7] ; s
0861   0936 2A            mov b, [d]
0862   0937 FD AB         swp b
0863   0939 D8            push b
0864   093A 07 48 09      call print
0865   093D 51 02 00      add sp, 2
0866   0940             
0867   0940             ; --- BEGIN INLINE ASM BLOCK
0868   0940 17 05 00      mov a, [bp + 5]
0869   0943 07 62 18      call print_u16d
0870   0946             ; --- END INLINE ASM BLOCK
0871   0946             
0872   0946 F9            leave
0873   0947 09            ret
0874   0948             
0875   0948             print:
0876   0948 D2            push bp
0877   0949 9B            mov bp, sp
0878   094A             
0879   094A             ; --- BEGIN INLINE ASM BLOCK
0880   094A 17 05 00      mov a, [bp + 5]
0881   094D 3C            mov d, a
0882   094E 07 39 18      call puts
0883   0951             ; --- END INLINE ASM BLOCK
0884   0951             
0885   0951 F9            leave
0886   0952 09            ret
0887   0953             ; --- END TEXT BLOCK
0888   0953             
0889   0953             ; --- BEGIN DATA BLOCK
0890   0953 14 00       __ROWS: .dw 20
0891   0955 28 00       __COLS: .dw 40
0892   0957 00 00 00 00 __new_board_data: .fill 1600, 0
0892   095B 00 00 00 00 
0892   095F 00 00 00 00 
0892   0963 00 00 00 00 
0892   0967 00 00 00 00 
0892   096B 00 00 00 00 
0892   096F 00 00 00 00 
0892   0973 00 00 00 00 
0892   0977 00 00 00 00 
0892   097B 00 00 00 00 
0892   097F 00 00 00 00 
0892   0983 00 00 00 00 
0892   0987 00 00 00 00 
0892   098B 00 00 00 00 
0892   098F 00 00 00 00 
0892   0993 00 00 00 00 
0892   0997 00 00 00 00 
0892   099B 00 00 00 00 
0892   099F 00 00 00 00 
0892   09A3 00 00 00 00 
0892   09A7 00 00 00 00 
0892   09AB 00 00 00 00 
0892   09AF 00 00 00 00 
0892   09B3 00 00 00 00 
0892   09B7 00 00 00 00 
0892   09BB 00 00 00 00 
0892   09BF 00 00 00 00 
0892   09C3 00 00 00 00 
0892   09C7 00 00 00 00 
0892   09CB 00 00 00 00 
0892   09CF 00 00 00 00 
0892   09D3 00 00 00 00 
0892   09D7 00 00 00 00 
0892   09DB 00 00 00 00 
0892   09DF 00 00 00 00 
0892   09E3 00 00 00 00 
0892   09E7 00 00 00 00 
0892   09EB 00 00 00 00 
0892   09EF 00 00 00 00 
0892   09F3 00 00 00 00 
0892   09F7 00 00 00 00 
0892   09FB 00 00 00 00 
0892   09FF 00 00 00 00 
0892   0A03 00 00 00 00 
0892   0A07 00 00 00 00 
0892   0A0B 00 00 00 00 
0892   0A0F 00 00 00 00 
0892   0A13 00 00 00 00 
0892   0A17 00 00 00 00 
0892   0A1B 00 00 00 00 
0892   0A1F 00 00 00 00 
0892   0A23 00 00 00 00 
0892   0A27 00 00 00 00 
0892   0A2B 00 00 00 00 
0892   0A2F 00 00 00 00 
0892   0A33 00 00 00 00 
0892   0A37 00 00 00 00 
0892   0A3B 00 00 00 00 
0892   0A3F 00 00 00 00 
0892   0A43 00 00 00 00 
0892   0A47 00 00 00 00 
0892   0A4B 00 00 00 00 
0892   0A4F 00 00 00 00 
0892   0A53 00 00 00 00 
0892   0A57 00 00 00 00 
0892   0A5B 00 00 00 00 
0892   0A5F 00 00 00 00 
0892   0A63 00 00 00 00 
0892   0A67 00 00 00 00 
0892   0A6B 00 00 00 00 
0892   0A6F 00 00 00 00 
0892   0A73 00 00 00 00 
0892   0A77 00 00 00 00 
0892   0A7B 00 00 00 00 
0892   0A7F 00 00 00 00 
0892   0A83 00 00 00 00 
0892   0A87 00 00 00 00 
0892   0A8B 00 00 00 00 
0892   0A8F 00 00 00 00 
0892   0A93 00 00 00 00 
0892   0A97 00 00 00 00 
0892   0A9B 00 00 00 00 
0892   0A9F 00 00 00 00 
0892   0AA3 00 00 00 00 
0892   0AA7 00 00 00 00 
0892   0AAB 00 00 00 00 
0892   0AAF 00 00 00 00 
0892   0AB3 00 00 00 00 
0892   0AB7 00 00 00 00 
0892   0ABB 00 00 00 00 
0892   0ABF 00 00 00 00 
0892   0AC3 00 00 00 00 
0892   0AC7 00 00 00 00 
0892   0ACB 00 00 00 00 
0892   0ACF 00 00 00 00 
0892   0AD3 00 00 00 00 
0892   0AD7 00 00 00 00 
0892   0ADB 00 00 00 00 
0892   0ADF 00 00 00 00 
0892   0AE3 00 00 00 00 
0892   0AE7 00 00 00 00 
0892   0AEB 00 00 00 00 
0892   0AEF 00 00 00 00 
0892   0AF3 00 00 00 00 
0892   0AF7 00 00 00 00 
0892   0AFB 00 00 00 00 
0892   0AFF 00 00 00 00 
0892   0B03 00 00 00 00 
0892   0B07 00 00 00 00 
0892   0B0B 00 00 00 00 
0892   0B0F 00 00 00 00 
0892   0B13 00 00 00 00 
0892   0B17 00 00 00 00 
0892   0B1B 00 00 00 00 
0892   0B1F 00 00 00 00 
0892   0B23 00 00 00 00 
0892   0B27 00 00 00 00 
0892   0B2B 00 00 00 00 
0892   0B2F 00 00 00 00 
0892   0B33 00 00 00 00 
0892   0B37 00 00 00 00 
0892   0B3B 00 00 00 00 
0892   0B3F 00 00 00 00 
0892   0B43 00 00 00 00 
0892   0B47 00 00 00 00 
0892   0B4B 00 00 00 00 
0892   0B4F 00 00 00 00 
0892   0B53 00 00 00 00 
0892   0B57 00 00 00 00 
0892   0B5B 00 00 00 00 
0892   0B5F 00 00 00 00 
0892   0B63 00 00 00 00 
0892   0B67 00 00 00 00 
0892   0B6B 00 00 00 00 
0892   0B6F 00 00 00 00 
0892   0B73 00 00 00 00 
0892   0B77 00 00 00 00 
0892   0B7B 00 00 00 00 
0892   0B7F 00 00 00 00 
0892   0B83 00 00 00 00 
0892   0B87 00 00 00 00 
0892   0B8B 00 00 00 00 
0892   0B8F 00 00 00 00 
0892   0B93 00 00 00 00 
0892   0B97 00 00 00 00 
0892   0B9B 00 00 00 00 
0892   0B9F 00 00 00 00 
0892   0BA3 00 00 00 00 
0892   0BA7 00 00 00 00 
0892   0BAB 00 00 00 00 
0892   0BAF 00 00 00 00 
0892   0BB3 00 00 00 00 
0892   0BB7 00 00 00 00 
0892   0BBB 00 00 00 00 
0892   0BBF 00 00 00 00 
0892   0BC3 00 00 00 00 
0892   0BC7 00 00 00 00 
0892   0BCB 00 00 00 00 
0892   0BCF 00 00 00 00 
0892   0BD3 00 00 00 00 
0892   0BD7 00 00 00 00 
0892   0BDB 00 00 00 00 
0892   0BDF 00 00 00 00 
0892   0BE3 00 00 00 00 
0892   0BE7 00 00 00 00 
0892   0BEB 00 00 00 00 
0892   0BEF 00 00 00 00 
0892   0BF3 00 00 00 00 
0892   0BF7 00 00 00 00 
0892   0BFB 00 00 00 00 
0892   0BFF 00 00 00 00 
0892   0C03 00 00 00 00 
0892   0C07 00 00 00 00 
0892   0C0B 00 00 00 00 
0892   0C0F 00 00 00 00 
0892   0C13 00 00 00 00 
0892   0C17 00 00 00 00 
0892   0C1B 00 00 00 00 
0892   0C1F 00 00 00 00 
0892   0C23 00 00 00 00 
0892   0C27 00 00 00 00 
0892   0C2B 00 00 00 00 
0892   0C2F 00 00 00 00 
0892   0C33 00 00 00 00 
0892   0C37 00 00 00 00 
0892   0C3B 00 00 00 00 
0892   0C3F 00 00 00 00 
0892   0C43 00 00 00 00 
0892   0C47 00 00 00 00 
0892   0C4B 00 00 00 00 
0892   0C4F 00 00 00 00 
0892   0C53 00 00 00 00 
0892   0C57 00 00 00 00 
0892   0C5B 00 00 00 00 
0892   0C5F 00 00 00 00 
0892   0C63 00 00 00 00 
0892   0C67 00 00 00 00 
0892   0C6B 00 00 00 00 
0892   0C6F 00 00 00 00 
0892   0C73 00 00 00 00 
0892   0C77 00 00 00 00 
0892   0C7B 00 00 00 00 
0892   0C7F 00 00 00 00 
0892   0C83 00 00 00 00 
0892   0C87 00 00 00 00 
0892   0C8B 00 00 00 00 
0892   0C8F 00 00 00 00 
0892   0C93 00 00 00 00 
0892   0C97 00 00 00 00 
0892   0C9B 00 00 00 00 
0892   0C9F 00 00 00 00 
0892   0CA3 00 00 00 00 
0892   0CA7 00 00 00 00 
0892   0CAB 00 00 00 00 
0892   0CAF 00 00 00 00 
0892   0CB3 00 00 00 00 
0892   0CB7 00 00 00 00 
0892   0CBB 00 00 00 00 
0892   0CBF 00 00 00 00 
0892   0CC3 00 00 00 00 
0892   0CC7 00 00 00 00 
0892   0CCB 00 00 00 00 
0892   0CCF 00 00 00 00 
0892   0CD3 00 00 00 00 
0892   0CD7 00 00 00 00 
0892   0CDB 00 00 00 00 
0892   0CDF 00 00 00 00 
0892   0CE3 00 00 00 00 
0892   0CE7 00 00 00 00 
0892   0CEB 00 00 00 00 
0892   0CEF 00 00 00 00 
0892   0CF3 00 00 00 00 
0892   0CF7 00 00 00 00 
0892   0CFB 00 00 00 00 
0892   0CFF 00 00 00 00 
0892   0D03 00 00 00 00 
0892   0D07 00 00 00 00 
0892   0D0B 00 00 00 00 
0892   0D0F 00 00 00 00 
0892   0D13 00 00 00 00 
0892   0D17 00 00 00 00 
0892   0D1B 00 00 00 00 
0892   0D1F 00 00 00 00 
0892   0D23 00 00 00 00 
0892   0D27 00 00 00 00 
0892   0D2B 00 00 00 00 
0892   0D2F 00 00 00 00 
0892   0D33 00 00 00 00 
0892   0D37 00 00 00 00 
0892   0D3B 00 00 00 00 
0892   0D3F 00 00 00 00 
0892   0D43 00 00 00 00 
0892   0D47 00 00 00 00 
0892   0D4B 00 00 00 00 
0892   0D4F 00 00 00 00 
0892   0D53 00 00 00 00 
0892   0D57 00 00 00 00 
0892   0D5B 00 00 00 00 
0892   0D5F 00 00 00 00 
0892   0D63 00 00 00 00 
0892   0D67 00 00 00 00 
0892   0D6B 00 00 00 00 
0892   0D6F 00 00 00 00 
0892   0D73 00 00 00 00 
0892   0D77 00 00 00 00 
0892   0D7B 00 00 00 00 
0892   0D7F 00 00 00 00 
0892   0D83 00 00 00 00 
0892   0D87 00 00 00 00 
0892   0D8B 00 00 00 00 
0892   0D8F 00 00 00 00 
0892   0D93 00 00 00 00 
0892   0D97 00 00 00 00 
0892   0D9B 00 00 00 00 
0892   0D9F 00 00 00 00 
0892   0DA3 00 00 00 00 
0892   0DA7 00 00 00 00 
0892   0DAB 00 00 00 00 
0892   0DAF 00 00 00 00 
0892   0DB3 00 00 00 00 
0892   0DB7 00 00 00 00 
0892   0DBB 00 00 00 00 
0892   0DBF 00 00 00 00 
0892   0DC3 00 00 00 00 
0892   0DC7 00 00 00 00 
0892   0DCB 00 00 00 00 
0892   0DCF 00 00 00 00 
0892   0DD3 00 00 00 00 
0892   0DD7 00 00 00 00 
0892   0DDB 00 00 00 00 
0892   0DDF 00 00 00 00 
0892   0DE3 00 00 00 00 
0892   0DE7 00 00 00 00 
0892   0DEB 00 00 00 00 
0892   0DEF 00 00 00 00 
0892   0DF3 00 00 00 00 
0892   0DF7 00 00 00 00 
0892   0DFB 00 00 00 00 
0892   0DFF 00 00 00 00 
0892   0E03 00 00 00 00 
0892   0E07 00 00 00 00 
0892   0E0B 00 00 00 00 
0892   0E0F 00 00 00 00 
0892   0E13 00 00 00 00 
0892   0E17 00 00 00 00 
0892   0E1B 00 00 00 00 
0892   0E1F 00 00 00 00 
0892   0E23 00 00 00 00 
0892   0E27 00 00 00 00 
0892   0E2B 00 00 00 00 
0892   0E2F 00 00 00 00 
0892   0E33 00 00 00 00 
0892   0E37 00 00 00 00 
0892   0E3B 00 00 00 00 
0892   0E3F 00 00 00 00 
0892   0E43 00 00 00 00 
0892   0E47 00 00 00 00 
0892   0E4B 00 00 00 00 
0892   0E4F 00 00 00 00 
0892   0E53 00 00 00 00 
0892   0E57 00 00 00 00 
0892   0E5B 00 00 00 00 
0892   0E5F 00 00 00 00 
0892   0E63 00 00 00 00 
0892   0E67 00 00 00 00 
0892   0E6B 00 00 00 00 
0892   0E6F 00 00 00 00 
0892   0E73 00 00 00 00 
0892   0E77 00 00 00 00 
0892   0E7B 00 00 00 00 
0892   0E7F 00 00 00 00 
0892   0E83 00 00 00 00 
0892   0E87 00 00 00 00 
0892   0E8B 00 00 00 00 
0892   0E8F 00 00 00 00 
0892   0E93 00 00 00 00 
0892   0E97 00 00 00 00 
0892   0E9B 00 00 00 00 
0892   0E9F 00 00 00 00 
0892   0EA3 00 00 00 00 
0892   0EA7 00 00 00 00 
0892   0EAB 00 00 00 00 
0892   0EAF 00 00 00 00 
0892   0EB3 00 00 00 00 
0892   0EB7 00 00 00 00 
0892   0EBB 00 00 00 00 
0892   0EBF 00 00 00 00 
0892   0EC3 00 00 00 00 
0892   0EC7 00 00 00 00 
0892   0ECB 00 00 00 00 
0892   0ECF 00 00 00 00 
0892   0ED3 00 00 00 00 
0892   0ED7 00 00 00 00 
0892   0EDB 00 00 00 00 
0892   0EDF 00 00 00 00 
0892   0EE3 00 00 00 00 
0892   0EE7 00 00 00 00 
0892   0EEB 00 00 00 00 
0892   0EEF 00 00 00 00 
0892   0EF3 00 00 00 00 
0892   0EF7 00 00 00 00 
0892   0EFB 00 00 00 00 
0892   0EFF 00 00 00 00 
0892   0F03 00 00 00 00 
0892   0F07 00 00 00 00 
0892   0F0B 00 00 00 00 
0892   0F0F 00 00 00 00 
0892   0F13 00 00 00 00 
0892   0F17 00 00 00 00 
0892   0F1B 00 00 00 00 
0892   0F1F 00 00 00 00 
0892   0F23 00 00 00 00 
0892   0F27 00 00 00 00 
0892   0F2B 00 00 00 00 
0892   0F2F 00 00 00 00 
0892   0F33 00 00 00 00 
0892   0F37 00 00 00 00 
0892   0F3B 00 00 00 00 
0892   0F3F 00 00 00 00 
0892   0F43 00 00 00 00 
0892   0F47 00 00 00 00 
0892   0F4B 00 00 00 00 
0892   0F4F 00 00 00 00 
0892   0F53 00 00 00 00 
0892   0F57 00 00 00 00 
0892   0F5B 00 00 00 00 
0892   0F5F 00 00 00 00 
0892   0F63 00 00 00 00 
0892   0F67 00 00 00 00 
0892   0F6B 00 00 00 00 
0892   0F6F 00 00 00 00 
0892   0F73 00 00 00 00 
0892   0F77 00 00 00 00 
0892   0F7B 00 00 00 00 
0892   0F7F 00 00 00 00 
0892   0F83 00 00 00 00 
0892   0F87 00 00 00 00 
0892   0F8B 00 00 00 00 
0892   0F8F 00 00 00 00 
0892   0F93 00 00 00 00 
0893   0F97 57 09       __new_board: .dw __new_board_data
0894   0F99 00 00 00 00 __board_data: .fill 1600, 0
0894   0F9D 00 00 00 00 
0894   0FA1 00 00 00 00 
0894   0FA5 00 00 00 00 
0894   0FA9 00 00 00 00 
0894   0FAD 00 00 00 00 
0894   0FB1 00 00 00 00 
0894   0FB5 00 00 00 00 
0894   0FB9 00 00 00 00 
0894   0FBD 00 00 00 00 
0894   0FC1 00 00 00 00 
0894   0FC5 00 00 00 00 
0894   0FC9 00 00 00 00 
0894   0FCD 00 00 00 00 
0894   0FD1 00 00 00 00 
0894   0FD5 00 00 00 00 
0894   0FD9 00 00 00 00 
0894   0FDD 00 00 00 00 
0894   0FE1 00 00 00 00 
0894   0FE5 00 00 00 00 
0894   0FE9 00 00 00 00 
0894   0FED 00 00 00 00 
0894   0FF1 00 00 00 00 
0894   0FF5 00 00 00 00 
0894   0FF9 00 00 00 00 
0894   0FFD 00 00 00 00 
0894   1001 00 00 00 00 
0894   1005 00 00 00 00 
0894   1009 00 00 00 00 
0894   100D 00 00 00 00 
0894   1011 00 00 00 00 
0894   1015 00 00 00 00 
0894   1019 00 00 00 00 
0894   101D 00 00 00 00 
0894   1021 00 00 00 00 
0894   1025 00 00 00 00 
0894   1029 00 00 00 00 
0894   102D 00 00 00 00 
0894   1031 00 00 00 00 
0894   1035 00 00 00 00 
0894   1039 00 00 00 00 
0894   103D 00 00 00 00 
0894   1041 00 00 00 00 
0894   1045 00 00 00 00 
0894   1049 00 00 00 00 
0894   104D 00 00 00 00 
0894   1051 00 00 00 00 
0894   1055 00 00 00 00 
0894   1059 00 00 00 00 
0894   105D 00 00 00 00 
0894   1061 00 00 00 00 
0894   1065 00 00 00 00 
0894   1069 00 00 00 00 
0894   106D 00 00 00 00 
0894   1071 00 00 00 00 
0894   1075 00 00 00 00 
0894   1079 00 00 00 00 
0894   107D 00 00 00 00 
0894   1081 00 00 00 00 
0894   1085 00 00 00 00 
0894   1089 00 00 00 00 
0894   108D 00 00 00 00 
0894   1091 00 00 00 00 
0894   1095 00 00 00 00 
0894   1099 00 00 00 00 
0894   109D 00 00 00 00 
0894   10A1 00 00 00 00 
0894   10A5 00 00 00 00 
0894   10A9 00 00 00 00 
0894   10AD 00 00 00 00 
0894   10B1 00 00 00 00 
0894   10B5 00 00 00 00 
0894   10B9 00 00 00 00 
0894   10BD 00 00 00 00 
0894   10C1 00 00 00 00 
0894   10C5 00 00 00 00 
0894   10C9 00 00 00 00 
0894   10CD 00 00 00 00 
0894   10D1 00 00 00 00 
0894   10D5 00 00 00 00 
0894   10D9 00 00 00 00 
0894   10DD 00 00 00 00 
0894   10E1 00 00 00 00 
0894   10E5 00 00 00 00 
0894   10E9 00 00 00 00 
0894   10ED 00 00 00 00 
0894   10F1 00 00 00 00 
0894   10F5 00 00 00 00 
0894   10F9 00 00 00 00 
0894   10FD 00 00 00 00 
0894   1101 00 00 00 00 
0894   1105 00 00 00 00 
0894   1109 00 00 00 00 
0894   110D 00 00 00 00 
0894   1111 00 00 00 00 
0894   1115 00 00 00 00 
0894   1119 00 00 00 00 
0894   111D 00 00 00 00 
0894   1121 00 00 00 00 
0894   1125 00 00 00 00 
0894   1129 00 00 00 00 
0894   112D 00 00 00 00 
0894   1131 00 00 00 00 
0894   1135 00 00 00 00 
0894   1139 00 00 00 00 
0894   113D 00 00 00 00 
0894   1141 00 00 00 00 
0894   1145 00 00 00 00 
0894   1149 00 00 00 00 
0894   114D 00 00 00 00 
0894   1151 00 00 00 00 
0894   1155 00 00 00 00 
0894   1159 00 00 00 00 
0894   115D 00 00 00 00 
0894   1161 00 00 00 00 
0894   1165 00 00 00 00 
0894   1169 00 00 00 00 
0894   116D 00 00 00 00 
0894   1171 00 00 00 00 
0894   1175 00 00 00 00 
0894   1179 00 00 00 00 
0894   117D 00 00 00 00 
0894   1181 00 00 00 00 
0894   1185 00 00 00 00 
0894   1189 00 00 00 00 
0894   118D 00 00 00 00 
0894   1191 00 00 00 00 
0894   1195 00 00 00 00 
0894   1199 00 00 00 00 
0894   119D 00 00 00 00 
0894   11A1 00 00 00 00 
0894   11A5 00 00 00 00 
0894   11A9 00 00 00 00 
0894   11AD 00 00 00 00 
0894   11B1 00 00 00 00 
0894   11B5 00 00 00 00 
0894   11B9 00 00 00 00 
0894   11BD 00 00 00 00 
0894   11C1 00 00 00 00 
0894   11C5 00 00 00 00 
0894   11C9 00 00 00 00 
0894   11CD 00 00 00 00 
0894   11D1 00 00 00 00 
0894   11D5 00 00 00 00 
0894   11D9 00 00 00 00 
0894   11DD 00 00 00 00 
0894   11E1 00 00 00 00 
0894   11E5 00 00 00 00 
0894   11E9 00 00 00 00 
0894   11ED 00 00 00 00 
0894   11F1 00 00 00 00 
0894   11F5 00 00 00 00 
0894   11F9 00 00 00 00 
0894   11FD 00 00 00 00 
0894   1201 00 00 00 00 
0894   1205 00 00 00 00 
0894   1209 00 00 00 00 
0894   120D 00 00 00 00 
0894   1211 00 00 00 00 
0894   1215 00 00 00 00 
0894   1219 00 00 00 00 
0894   121D 00 00 00 00 
0894   1221 00 00 00 00 
0894   1225 00 00 00 00 
0894   1229 00 00 00 00 
0894   122D 00 00 00 00 
0894   1231 00 00 00 00 
0894   1235 00 00 00 00 
0894   1239 00 00 00 00 
0894   123D 00 00 00 00 
0894   1241 00 00 00 00 
0894   1245 00 00 00 00 
0894   1249 00 00 00 00 
0894   124D 00 00 00 00 
0894   1251 00 00 00 00 
0894   1255 00 00 00 00 
0894   1259 00 00 00 00 
0894   125D 00 00 00 00 
0894   1261 00 00 00 00 
0894   1265 00 00 00 00 
0894   1269 00 00 00 00 
0894   126D 00 00 00 00 
0894   1271 00 00 00 00 
0894   1275 00 00 00 00 
0894   1279 00 00 00 00 
0894   127D 00 00 00 00 
0894   1281 00 00 00 00 
0894   1285 00 00 00 00 
0894   1289 00 00 00 00 
0894   128D 00 00 00 00 
0894   1291 00 00 00 00 
0894   1295 00 00 00 00 
0894   1299 00 00 00 00 
0894   129D 00 00 00 00 
0894   12A1 00 00 00 00 
0894   12A5 00 00 00 00 
0894   12A9 00 00 00 00 
0894   12AD 00 00 00 00 
0894   12B1 00 00 00 00 
0894   12B5 00 00 00 00 
0894   12B9 00 00 00 00 
0894   12BD 00 00 00 00 
0894   12C1 00 00 00 00 
0894   12C5 00 00 00 00 
0894   12C9 00 00 00 00 
0894   12CD 00 00 00 00 
0894   12D1 00 00 00 00 
0894   12D5 00 00 00 00 
0894   12D9 00 00 00 00 
0894   12DD 00 00 00 00 
0894   12E1 00 00 00 00 
0894   12E5 00 00 00 00 
0894   12E9 00 00 00 00 
0894   12ED 00 00 00 00 
0894   12F1 00 00 00 00 
0894   12F5 00 00 00 00 
0894   12F9 00 00 00 00 
0894   12FD 00 00 00 00 
0894   1301 00 00 00 00 
0894   1305 00 00 00 00 
0894   1309 00 00 00 00 
0894   130D 00 00 00 00 
0894   1311 00 00 00 00 
0894   1315 00 00 00 00 
0894   1319 00 00 00 00 
0894   131D 00 00 00 00 
0894   1321 00 00 00 00 
0894   1325 00 00 00 00 
0894   1329 00 00 00 00 
0894   132D 00 00 00 00 
0894   1331 00 00 00 00 
0894   1335 00 00 00 00 
0894   1339 00 00 00 00 
0894   133D 00 00 00 00 
0894   1341 00 00 00 00 
0894   1345 00 00 00 00 
0894   1349 00 00 00 00 
0894   134D 00 00 00 00 
0894   1351 00 00 00 00 
0894   1355 00 00 00 00 
0894   1359 00 00 00 00 
0894   135D 00 00 00 00 
0894   1361 00 00 00 00 
0894   1365 00 00 00 00 
0894   1369 00 00 00 00 
0894   136D 00 00 00 00 
0894   1371 00 00 00 00 
0894   1375 00 00 00 00 
0894   1379 00 00 00 00 
0894   137D 00 00 00 00 
0894   1381 00 00 00 00 
0894   1385 00 00 00 00 
0894   1389 00 00 00 00 
0894   138D 00 00 00 00 
0894   1391 00 00 00 00 
0894   1395 00 00 00 00 
0894   1399 00 00 00 00 
0894   139D 00 00 00 00 
0894   13A1 00 00 00 00 
0894   13A5 00 00 00 00 
0894   13A9 00 00 00 00 
0894   13AD 00 00 00 00 
0894   13B1 00 00 00 00 
0894   13B5 00 00 00 00 
0894   13B9 00 00 00 00 
0894   13BD 00 00 00 00 
0894   13C1 00 00 00 00 
0894   13C5 00 00 00 00 
0894   13C9 00 00 00 00 
0894   13CD 00 00 00 00 
0894   13D1 00 00 00 00 
0894   13D5 00 00 00 00 
0894   13D9 00 00 00 00 
0894   13DD 00 00 00 00 
0894   13E1 00 00 00 00 
0894   13E5 00 00 00 00 
0894   13E9 00 00 00 00 
0894   13ED 00 00 00 00 
0894   13F1 00 00 00 00 
0894   13F5 00 00 00 00 
0894   13F9 00 00 00 00 
0894   13FD 00 00 00 00 
0894   1401 00 00 00 00 
0894   1405 00 00 00 00 
0894   1409 00 00 00 00 
0894   140D 00 00 00 00 
0894   1411 00 00 00 00 
0894   1415 00 00 00 00 
0894   1419 00 00 00 00 
0894   141D 00 00 00 00 
0894   1421 00 00 00 00 
0894   1425 00 00 00 00 
0894   1429 00 00 00 00 
0894   142D 00 00 00 00 
0894   1431 00 00 00 00 
0894   1435 00 00 00 00 
0894   1439 00 00 00 00 
0894   143D 00 00 00 00 
0894   1441 00 00 00 00 
0894   1445 00 00 00 00 
0894   1449 00 00 00 00 
0894   144D 00 00 00 00 
0894   1451 00 00 00 00 
0894   1455 00 00 00 00 
0894   1459 00 00 00 00 
0894   145D 00 00 00 00 
0894   1461 00 00 00 00 
0894   1465 00 00 00 00 
0894   1469 00 00 00 00 
0894   146D 00 00 00 00 
0894   1471 00 00 00 00 
0894   1475 00 00 00 00 
0894   1479 00 00 00 00 
0894   147D 00 00 00 00 
0894   1481 00 00 00 00 
0894   1485 00 00 00 00 
0894   1489 00 00 00 00 
0894   148D 00 00 00 00 
0894   1491 00 00 00 00 
0894   1495 00 00 00 00 
0894   1499 00 00 00 00 
0894   149D 00 00 00 00 
0894   14A1 00 00 00 00 
0894   14A5 00 00 00 00 
0894   14A9 00 00 00 00 
0894   14AD 00 00 00 00 
0894   14B1 00 00 00 00 
0894   14B5 00 00 00 00 
0894   14B9 00 00 00 00 
0894   14BD 00 00 00 00 
0894   14C1 00 00 00 00 
0894   14C5 00 00 00 00 
0894   14C9 00 00 00 00 
0894   14CD 00 00 00 00 
0894   14D1 00 00 00 00 
0894   14D5 00 00 00 00 
0894   14D9 00 00 00 00 
0894   14DD 00 00 00 00 
0894   14E1 00 00 00 00 
0894   14E5 00 00 00 00 
0894   14E9 00 00 00 00 
0894   14ED 00 00 00 00 
0894   14F1 00 00 00 00 
0894   14F5 00 00 00 00 
0894   14F9 00 00 00 00 
0894   14FD 00 00 00 00 
0894   1501 00 00 00 00 
0894   1505 00 00 00 00 
0894   1509 00 00 00 00 
0894   150D 00 00 00 00 
0894   1511 00 00 00 00 
0894   1515 00 00 00 00 
0894   1519 00 00 00 00 
0894   151D 00 00 00 00 
0894   1521 00 00 00 00 
0894   1525 00 00 00 00 
0894   1529 00 00 00 00 
0894   152D 00 00 00 00 
0894   1531 00 00 00 00 
0894   1535 00 00 00 00 
0894   1539 00 00 00 00 
0894   153D 00 00 00 00 
0894   1541 00 00 00 00 
0894   1545 00 00 00 00 
0894   1549 00 00 00 00 
0894   154D 00 00 00 00 
0894   1551 00 00 00 00 
0894   1555 00 00 00 00 
0894   1559 00 00 00 00 
0894   155D 00 00 00 00 
0894   1561 00 00 00 00 
0894   1565 00 00 00 00 
0894   1569 00 00 00 00 
0894   156D 00 00 00 00 
0894   1571 00 00 00 00 
0894   1575 00 00 00 00 
0894   1579 00 00 00 00 
0894   157D 00 00 00 00 
0894   1581 00 00 00 00 
0894   1585 00 00 00 00 
0894   1589 00 00 00 00 
0894   158D 00 00 00 00 
0894   1591 00 00 00 00 
0894   1595 00 00 00 00 
0894   1599 00 00 00 00 
0894   159D 00 00 00 00 
0894   15A1 00 00 00 00 
0894   15A5 00 00 00 00 
0894   15A9 00 00 00 00 
0894   15AD 00 00 00 00 
0894   15B1 00 00 00 00 
0894   15B5 00 00 00 00 
0894   15B9 00 00 00 00 
0894   15BD 00 00 00 00 
0894   15C1 00 00 00 00 
0894   15C5 00 00 00 00 
0894   15C9 00 00 00 00 
0894   15CD 00 00 00 00 
0894   15D1 00 00 00 00 
0894   15D5 00 00 00 00 
0895   15D9 99 0F       __board: .dw __board_data
0896   15DB 49 74 65 72 __string_0: .db "Iteration :", 0
0896   15DF 61 74 69 6F 
0896   15E3 6E 20 3A 00 
0897   15E7 0A 00       __string_1: .db "\n", 0
0898   15E9 58 00       __string_2: .db "X", 0
0899   15EB 20 00       __string_3: .db " ", 0
0900   15ED             ; --- END DATA BLOCK
0901   15ED             
0902   15ED             ; --- BEGIN INCLUDE BLOCK
0903   15ED             .include "lib/stdio.asm"
0001+  15ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  15ED             ; stdio.s
0003+  15ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  15ED             .include "lib/string.asm"
0001++ 15ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 15ED             ; string.s
0003++ 15ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 15ED             
0005++ 15ED             
0006++ 15ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 15ED             ; strrev
0008++ 15ED             ; reverse a string
0009++ 15ED             ; D = string address
0010++ 15ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 15ED             ; 01234
0012++ 15ED             strrev:
0013++ 15ED 4B          	pusha
0014++ 15EE 07 34 16    	call strlen	; length in C
0015++ 15F1 12          	mov a, c
0016++ 15F2 AF 01 00    	cmp a, 1
0017++ 15F5 D0 0F 16    	jleu strrev_end	; check string length. string len must be > 1
0018++ 15F8 7D          	dec a
0019++ 15F9 FD 4E       	mov si, d	; beginning of string
0020++ 15FB FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 15FD 59          	add d, a	; end of string
0022++ 15FE 12          	mov a, c
0023++ 15FF FD 9B       	shr a		; divide by 2
0024++ 1601 39          	mov c, a	; C now counts the steps
0025++ 1602             strrev_L0:
0026++ 1602 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1603 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1604 3E          	mov [d], al	; store left char into right side
0029++ 1605 1B          	mov al, bl
0030++ 1606 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1607 7E          	dec c
0032++ 1608 7F          	dec d
0033++ 1609 C2 00 00    	cmp c, 0
0034++ 160C C7 02 16    	jne strrev_L0
0035++ 160F             strrev_end:
0036++ 160F 4C          	popa
0037++ 1610 09          	ret
0038++ 1611             	
0039++ 1611             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1611             ; strchr
0041++ 1611             ; search string in D for char in AL
0042++ 1611             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1611             strchr:
0044++ 1611             strchr_L0:
0045++ 1611 32          	mov bl, [d]
0046++ 1612 C1 00       	cmp bl, 0
0047++ 1614 C6 1F 16    	je strchr_end
0048++ 1617 BA          	cmp al, bl
0049++ 1618 C6 1F 16    	je strchr_end
0050++ 161B 79          	inc d
0051++ 161C 0A 11 16    	jmp strchr_L0
0052++ 161F             strchr_end:
0053++ 161F 1B          	mov al, bl
0054++ 1620 09          	ret
0055++ 1621             
0056++ 1621             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1621             ; strstr
0058++ 1621             ; find sub-string
0059++ 1621             ; str1 in SI
0060++ 1621             ; str2 in DI
0061++ 1621             ; SI points to end of source string
0062++ 1621             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1621             strstr:
0064++ 1621 DB          	push al
0065++ 1622 DA          	push d
0066++ 1623 E3          	push di
0067++ 1624             strstr_loop:
0068++ 1624 F3          	cmpsb					; compare a byte of the strings
0069++ 1625 C7 30 16    	jne strstr_ret
0070++ 1628 FC 00 00    	lea d, [di + 0]
0071++ 162B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 162D C7 24 16    	jne strstr_loop				; equal chars but not at end
0073++ 1630             strstr_ret:
0074++ 1630 F0          	pop di
0075++ 1631 E7          	pop d
0076++ 1632 E8          	pop al
0077++ 1633 09          	ret
0078++ 1634             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1634             ; length of null terminated string
0080++ 1634             ; result in C
0081++ 1634             ; pointer in D
0082++ 1634             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1634             strlen:
0084++ 1634 DA          	push d
0085++ 1635 38 00 00    	mov c, 0
0086++ 1638             strlen_L1:
0087++ 1638 BD 00       	cmp byte [d], 0
0088++ 163A C6 42 16    	je strlen_ret
0089++ 163D 79          	inc d
0090++ 163E 78          	inc c
0091++ 163F 0A 38 16    	jmp strlen_L1
0092++ 1642             strlen_ret:
0093++ 1642 E7          	pop d
0094++ 1643 09          	ret
0095++ 1644             
0096++ 1644             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1644             ; STRCMP
0098++ 1644             ; compare two strings
0099++ 1644             ; str1 in SI
0100++ 1644             ; str2 in DI
0101++ 1644             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1644             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1644             strcmp:
0104++ 1644 DB          	push al
0105++ 1645 DA          	push d
0106++ 1646 E3          	push di
0107++ 1647 E2          	push si
0108++ 1648             strcmp_loop:
0109++ 1648 F3          	cmpsb					; compare a byte of the strings
0110++ 1649 C7 54 16    	jne strcmp_ret
0111++ 164C FB FF FF    	lea d, [si +- 1]
0112++ 164F BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1651 C7 48 16    	jne strcmp_loop				; equal chars but not at end
0114++ 1654             strcmp_ret:
0115++ 1654 EF          	pop si
0116++ 1655 F0          	pop di
0117++ 1656 E7          	pop d
0118++ 1657 E8          	pop al
0119++ 1658 09          	ret
0120++ 1659             
0121++ 1659             
0122++ 1659             ; STRCPY
0123++ 1659             ; copy null terminated string from SI to DI
0124++ 1659             ; source in SI
0125++ 1659             ; destination in DI
0126++ 1659             strcpy:
0127++ 1659 E2          	push si
0128++ 165A E3          	push di
0129++ 165B DB          	push al
0130++ 165C             strcpy_L1:
0131++ 165C F6          	lodsb
0132++ 165D F7          	stosb
0133++ 165E B9 00       	cmp al, 0
0134++ 1660 C7 5C 16    	jne strcpy_L1
0135++ 1663             strcpy_end:
0136++ 1663 E8          	pop al
0137++ 1664 F0          	pop di
0138++ 1665 EF          	pop si
0139++ 1666 09          	ret
0140++ 1667             
0141++ 1667             ; STRCAT
0142++ 1667             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1667             ; source in SI
0144++ 1667             ; destination in DI
0145++ 1667             strcat:
0146++ 1667 E2          	push si
0147++ 1668 E3          	push di
0148++ 1669 D7          	push a
0149++ 166A DA          	push d
0150++ 166B 50          	mov a, di
0151++ 166C 3C          	mov d, a
0152++ 166D             strcat_goto_end_L1:
0153++ 166D BD 00       	cmp byte[d], 0
0154++ 166F C6 76 16    	je strcat_start
0155++ 1672 79          	inc d
0156++ 1673 0A 6D 16    	jmp strcat_goto_end_L1
0157++ 1676             strcat_start:
0158++ 1676 FD 50       	mov di, d
0159++ 1678             strcat_L1:
0160++ 1678 F6          	lodsb
0161++ 1679 F7          	stosb
0162++ 167A B9 00       	cmp al, 0
0163++ 167C C7 78 16    	jne strcat_L1
0164++ 167F             strcat_end:
0165++ 167F E7          	pop d
0166++ 1680 E4          	pop a
0167++ 1681 F0          	pop di
0168++ 1682 EF          	pop si
0169++ 1683 09          	ret
0005+  1684             
0006+  1684 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  1688 34 35 36 37 
0006+  168C 38 39 41 42 
0006+  1690 43 44 45 46 
0007+  1694 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  1698 1B 5B 48 00 
0008+  169C             
0009+  169C 01 00       table_power:.dw 1
0010+  169E 0A 00       			.dw 10
0011+  16A0 64 00       			.dw 100
0012+  16A2 E8 03       			.dw 1000
0013+  16A4 10 27       			.dw 10000
0014+  16A6             
0015+  16A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  16A6             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  16A6             ; ASCII in BL
0018+  16A6             ; result in AL
0019+  16A6             ; ascii for F = 0100 0110
0020+  16A6             ; ascii for 9 = 0011 1001
0021+  16A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  16A6             hex_ascii_encode:
0023+  16A6 1B          	mov al, bl
0024+  16A7 93 40       	test al, $40				; test if letter or number
0025+  16A9 C7 AF 16    	jnz hex_letter
0026+  16AC 87 0F       	and al, $0F				; get number
0027+  16AE 09          	ret
0028+  16AF             hex_letter:
0029+  16AF 87 0F       	and al, $0F				; get letter
0030+  16B1 6A 09       	add al, 9
0031+  16B3 09          	ret
0032+  16B4             
0033+  16B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  16B4             ; ATOI
0035+  16B4             ; 2 letter hex string in B
0036+  16B4             ; 8bit integer returned in AL
0037+  16B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  16B4             atoi:
0039+  16B4 D8          	push b
0040+  16B5 07 A6 16    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  16B8 30          	mov bl, bh
0042+  16B9 DB          	push al					; save a
0043+  16BA 07 A6 16    	call hex_ascii_encode
0044+  16BD EA          	pop bl	
0045+  16BE FD 9E 04    	shl al, 4
0046+  16C1 8C          	or al, bl
0047+  16C2 E5          	pop b
0048+  16C3 09          	ret	
0049+  16C4             
0050+  16C4             
0051+  16C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  16C4             ; printf
0053+  16C4             ; no need for explanations!
0054+  16C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  16C4             printf:
0056+  16C4 09          	ret
0057+  16C5             
0058+  16C5             
0059+  16C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  16C5             ; scanf
0061+  16C5             ; no need for explanations!
0062+  16C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  16C5             scanf:
0064+  16C5 09          	ret
0065+  16C6             
0066+  16C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  16C6             ; ITOA
0068+  16C6             ; 8bit value in BL
0069+  16C6             ; 2 byte ASCII result in A
0070+  16C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  16C6             itoa:
0072+  16C6 DA          	push d
0073+  16C7 D8          	push b
0074+  16C8 A7 00       	mov bh, 0
0075+  16CA FD A4 04    	shr bl, 4	
0076+  16CD 74          	mov d, b
0077+  16CE 1F 84 16    	mov al, [d + s_hex_digits]
0078+  16D1 23          	mov ah, al
0079+  16D2             	
0080+  16D2 E5          	pop b
0081+  16D3 D8          	push b
0082+  16D4 A7 00       	mov bh, 0
0083+  16D6 FD 87 0F    	and bl, $0F
0084+  16D9 74          	mov d, b
0085+  16DA 1F 84 16    	mov al, [d + s_hex_digits]
0086+  16DD E5          	pop b
0087+  16DE E7          	pop d
0088+  16DF 09          	ret
0089+  16E0             
0090+  16E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  16E0             ; HEX STRING TO BINARY
0092+  16E0             ; di = destination address
0093+  16E0             ; si = source
0094+  16E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  16E0             hex_to_int:
0096+  16E0             hex_to_int_L1:
0097+  16E0 F6          	lodsb					; load from [SI] to AL
0098+  16E1 B9 00       	cmp al, 0				; check if ASCII 0
0099+  16E3 C6 F0 16    	jz hex_to_int_ret
0100+  16E6 36          	mov bh, al
0101+  16E7 F6          	lodsb
0102+  16E8 2F          	mov bl, al
0103+  16E9 07 B4 16    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  16EC F7          	stosb					; store AL to [DI]
0105+  16ED 0A E0 16    	jmp hex_to_int_L1
0106+  16F0             hex_to_int_ret:
0107+  16F0 09          	ret		
0108+  16F1             
0109+  16F1             
0110+  16F1             
0111+  16F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  16F1             ; GETCHAR
0113+  16F1             ; char in ah
0114+  16F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  16F1             getchar:
0116+  16F1 DB          	push al
0117+  16F2             getchar_retry:
0118+  16F2 FD 0C       	sti
0119+  16F4 19 01       	mov al, 1
0120+  16F6 05 03       	syscall sys_io			; receive in AH
0121+  16F8 B9 00       	cmp al, 0			; check if any char was receive
0122+  16FA C6 F2 16    	je getchar_retry
0123+  16FD E8          	pop al
0124+  16FE 09          	ret
0125+  16FF             
0126+  16FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  16FF             ; PUTCHAR
0128+  16FF             ; char in ah
0129+  16FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  16FF             putchar:
0131+  16FF D7          	push a
0132+  1700 19 00       	mov al, 0
0133+  1702 05 03       	syscall sys_io			; char in AH
0134+  1704 E4          	pop a
0135+  1705 09          	ret
0136+  1706             
0137+  1706             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  1706             ;; INPUT A STRING
0139+  1706             ;; terminates with null
0140+  1706             ;; pointer in D
0141+  1706             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  1706             gets:
0143+  1706 D7          	push a
0144+  1707 DA          	push d
0145+  1708             gets_loop:
0146+  1708 FD 0C       	sti
0147+  170A 19 01       	mov al, 1
0148+  170C 05 03       	syscall sys_io			; receive in AH
0149+  170E B9 00       	cmp al, 0				; check error code (AL)
0150+  1710 C6 08 17    	je gets_loop			; if no char received, retry
0151+  1713             
0152+  1713 76 1B       	cmp ah, 27
0153+  1715 C6 36 17    	je gets_telnet_escape
0154+  1718 76 0A       	cmp ah, $0A				; LF
0155+  171A C6 8F 17    	je gets_end
0156+  171D 76 0D       	cmp ah, $0D				; CR
0157+  171F C6 8F 17    	je gets_end
0158+  1722 76 5C       	cmp ah, $5C				; '\\'
0159+  1724 C6 66 17    	je gets_escape
0160+  1727             	
0161+  1727 76 08       	cmp ah, $08			; check for backspace
0162+  1729 C6 32 17    	je gets_backspace
0163+  172C             
0164+  172C 1A          	mov al, ah
0165+  172D 3E          	mov [d], al
0166+  172E 79          	inc d
0167+  172F 0A 08 17    	jmp gets_loop
0168+  1732             gets_backspace:
0169+  1732 7F          	dec d
0170+  1733 0A 08 17    	jmp gets_loop
0171+  1736             gets_telnet_escape:
0172+  1736 FD 0C       	sti
0173+  1738 19 01       	mov al, 1
0174+  173A 05 03       	syscall sys_io				; receive in AH without echo
0175+  173C B9 00       	cmp al, 0					; check error code (AL)
0176+  173E C6 36 17    	je gets_telnet_escape		; if no char received, retry
0177+  1741 76 5B       	cmp ah, '['
0178+  1743 C7 08 17    	jne gets_loop
0179+  1746             gets_telnet_escape_phase2:
0180+  1746 FD 0C       	sti
0181+  1748 19 01       	mov al, 1
0182+  174A 05 03       	syscall sys_io					; receive in AH without echo
0183+  174C B9 00       	cmp al, 0						; check error code (AL)
0184+  174E C6 46 17    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  1751 76 44       	cmp ah, 'D'
0186+  1753 C6 5E 17    	je gets_left_arrow
0187+  1756 76 43       	cmp ah, 'C'
0188+  1758 C6 62 17    	je gets_right_arrow
0189+  175B 0A 08 17    	jmp gets_loop
0190+  175E             gets_left_arrow:
0191+  175E 7F          	dec d
0192+  175F 0A 08 17    	jmp gets_loop
0193+  1762             gets_right_arrow:
0194+  1762 79          	inc d
0195+  1763 0A 08 17    	jmp gets_loop
0196+  1766             gets_escape:
0197+  1766 FD 0C       	sti
0198+  1768 19 01       	mov al, 1
0199+  176A 05 03       	syscall sys_io			; receive in AH
0200+  176C B9 00       	cmp al, 0				; check error code (AL)
0201+  176E C6 66 17    	je gets_escape			; if no char received, retry
0202+  1771 76 6E       	cmp ah, 'n'
0203+  1773 C6 81 17    	je gets_LF
0204+  1776 76 72       	cmp ah, 'r'
0205+  1778 C6 88 17    	je gets_CR
0206+  177B 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  177C 3E          	mov [d], al
0208+  177D 79          	inc d
0209+  177E 0A 08 17    	jmp gets_loop
0210+  1781             gets_LF:
0211+  1781 19 0A       	mov al, $0A
0212+  1783 3E          	mov [d], al
0213+  1784 79          	inc d
0214+  1785 0A 08 17    	jmp gets_loop
0215+  1788             gets_CR:
0216+  1788 19 0D       	mov al, $0D
0217+  178A 3E          	mov [d], al
0218+  178B 79          	inc d
0219+  178C 0A 08 17    	jmp gets_loop
0220+  178F             gets_end:
0221+  178F 19 00       	mov al, 0
0222+  1791 3E          	mov [d], al				; terminate string
0223+  1792 E7          	pop d
0224+  1793 E4          	pop a
0225+  1794 09          	ret
0226+  1795             
0227+  1795             
0228+  1795             
0229+  1795             
0230+  1795             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  1795             ;; INPUT TEXT
0232+  1795             ;; terminated with CTRL+D
0233+  1795             ;; pointer in D
0234+  1795             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  1795             gettxt:
0236+  1795 D7          	push a
0237+  1796 DA          	push d
0238+  1797             gettxt_loop:
0239+  1797 19 01       	mov al, 1
0240+  1799 05 03       	syscall sys_io			; receive in AH
0241+  179B B9 00       	cmp al, 0				; check error code (AL)
0242+  179D C6 97 17    	je gettxt_loop		; if no char received, retry
0243+  17A0 76 04       	cmp ah, 4			; EOT
0244+  17A2 C6 E0 17    	je gettxt_end
0245+  17A5 76 08       	cmp ah, $08			; check for backspace
0246+  17A7 C6 DC 17    	je gettxt_backspace
0247+  17AA 76 5C       	cmp ah, $5C				; '\\'
0248+  17AC C6 B5 17    	je gettxt_escape
0249+  17AF 1A          	mov al, ah
0250+  17B0 3E          	mov [d], al
0251+  17B1 79          	inc d
0252+  17B2 0A 97 17    	jmp gettxt_loop
0253+  17B5             gettxt_escape:
0254+  17B5 19 01       	mov al, 1
0255+  17B7 05 03       	syscall sys_io			; receive in AH
0256+  17B9 B9 00       	cmp al, 0				; check error code (AL)
0257+  17BB C6 B5 17    	je gettxt_escape		; if no char received, retry
0258+  17BE 76 6E       	cmp ah, 'n'
0259+  17C0 C6 CE 17    	je gettxt_LF
0260+  17C3 76 72       	cmp ah, 'r'
0261+  17C5 C6 D5 17    	je gettxt_CR
0262+  17C8 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  17C9 3E          	mov [d], al
0264+  17CA 79          	inc d
0265+  17CB 0A 97 17    	jmp gettxt_loop
0266+  17CE             gettxt_LF:
0267+  17CE 19 0A       	mov al, $0A
0268+  17D0 3E          	mov [d], al
0269+  17D1 79          	inc d
0270+  17D2 0A 97 17    	jmp gettxt_loop
0271+  17D5             gettxt_CR:
0272+  17D5 19 0D       	mov al, $0D
0273+  17D7 3E          	mov [d], al
0274+  17D8 79          	inc d
0275+  17D9 0A 97 17    	jmp gettxt_loop
0276+  17DC             gettxt_backspace:
0277+  17DC 7F          	dec d
0278+  17DD 0A 97 17    	jmp gettxt_loop
0279+  17E0             gettxt_end:
0280+  17E0 19 00       	mov al, 0
0281+  17E2 3E          	mov [d], al				; terminate string
0282+  17E3 E7          	pop d
0283+  17E4 E4          	pop a
0284+  17E5 09          	ret
0285+  17E6             
0286+  17E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  17E6             ; PRINT NEW LINE
0288+  17E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  17E6             printnl:
0290+  17E6 D7          	push a
0291+  17E7 10 00 0A    	mov a, $0A00
0292+  17EA 05 03       	syscall sys_io
0293+  17EC 10 00 0D    	mov a, $0D00
0294+  17EF 05 03       	syscall sys_io
0295+  17F1 E4          	pop a
0296+  17F2 09          	ret
0297+  17F3             
0298+  17F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  17F3             ; strtoint
0300+  17F3             ; 4 digit hex string number in d
0301+  17F3             ; integer returned in A
0302+  17F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  17F3             strtointx:
0304+  17F3 D8          	push b
0305+  17F4 32          	mov bl, [d]
0306+  17F5 37          	mov bh, bl
0307+  17F6 33 01 00    	mov bl, [d + 1]
0308+  17F9 07 B4 16    	call atoi				; convert to int in AL
0309+  17FC 23          	mov ah, al				; move to AH
0310+  17FD 33 02 00    	mov bl, [d + 2]
0311+  1800 37          	mov bh, bl
0312+  1801 33 03 00    	mov bl, [d + 3]
0313+  1804 07 B4 16    	call atoi				; convert to int in AL
0314+  1807 E5          	pop b
0315+  1808 09          	ret
0316+  1809             
0317+  1809             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  1809             ; strtoint
0319+  1809             ; 5 digit base10 string number in d
0320+  1809             ; integer returned in A
0321+  1809             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  1809             strtoint:
0323+  1809 E2          	push si
0324+  180A D8          	push b
0325+  180B D9          	push c
0326+  180C DA          	push d
0327+  180D 07 34 16    	call strlen			; get string length in C
0328+  1810 7E          	dec c
0329+  1811 FD 4E       	mov si, d
0330+  1813 12          	mov a, c
0331+  1814 FD 99       	shl a
0332+  1816 3B 9C 16    	mov d, table_power
0333+  1819 59          	add d, a
0334+  181A 38 00 00    	mov c, 0
0335+  181D             strtoint_L0:
0336+  181D F6          	lodsb			; load ASCII to al
0337+  181E B9 00       	cmp al, 0
0338+  1820 C6 33 18    	je strtoint_end
0339+  1823 6F 30       	sub al, $30		; make into integer
0340+  1825 22 00       	mov ah, 0
0341+  1827 2A          	mov b, [d]
0342+  1828 AC          	mul a, b			; result in B since it fits in 16bits
0343+  1829 11          	mov a, b
0344+  182A 28          	mov b, c
0345+  182B 54          	add a, b
0346+  182C 39          	mov c, a
0347+  182D 63 02 00    	sub d, 2
0348+  1830 0A 1D 18    	jmp strtoint_L0
0349+  1833             strtoint_end:
0350+  1833 12          	mov a, c
0351+  1834 E7          	pop d
0352+  1835 E6          	pop c
0353+  1836 E5          	pop b
0354+  1837 EF          	pop si
0355+  1838 09          	ret
0356+  1839             
0357+  1839             
0358+  1839             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  1839             ; PRINT NULL TERMINATED STRING
0360+  1839             ; pointer in D
0361+  1839             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  1839             puts:
0363+  1839 D7          	push a
0364+  183A DA          	push d
0365+  183B             puts_L1:
0366+  183B 1E          	mov al, [d]
0367+  183C B9 00       	cmp al, 0
0368+  183E C6 4A 18    	jz puts_END
0369+  1841 23          	mov ah, al
0370+  1842 19 00       	mov al, 0
0371+  1844 05 03       	syscall sys_io
0372+  1846 79          	inc d
0373+  1847 0A 3B 18    	jmp puts_L1
0374+  184A             puts_END:
0375+  184A E7          	pop d
0376+  184B E4          	pop a
0377+  184C 09          	ret
0378+  184D             
0379+  184D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  184D             ; PRINT N SIZE STRING
0381+  184D             ; pointer in D
0382+  184D             ; size in C
0383+  184D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  184D             putsn:
0385+  184D DB          	push al
0386+  184E DA          	push d
0387+  184F D9          	push c
0388+  1850             putsn_L0:
0389+  1850 1E          	mov al, [d]
0390+  1851 23          	mov ah, al
0391+  1852 19 00       	mov al, 0
0392+  1854 05 03       	syscall sys_io
0393+  1856 79          	inc d
0394+  1857 7E          	dec c	
0395+  1858 C2 00 00    	cmp c, 0
0396+  185B C7 50 18    	jne putsn_L0
0397+  185E             putsn_end:
0398+  185E E6          	pop c
0399+  185F E7          	pop d
0400+  1860 E8          	pop al
0401+  1861 09          	ret
0402+  1862             
0403+  1862             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  1862             ; print 16bit decimal number
0405+  1862             ; input number in A
0406+  1862             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  1862             print_u16d:
0408+  1862 D7          	push a
0409+  1863 D8          	push b
0410+  1864 26 10 27    	mov b, 10000
0411+  1867 AE          	div a, b			; get 10000 coeff.
0412+  1868 07 8E 18    	call print_number
0413+  186B 11          	mov a, b
0414+  186C 26 E8 03    	mov b, 1000
0415+  186F AE          	div a, b			; get 10000 coeff.
0416+  1870 07 8E 18    	call print_number
0417+  1873 11          	mov a, b
0418+  1874 26 64 00    	mov b, 100
0419+  1877 AE          	div a, b
0420+  1878 07 8E 18    	call print_number
0421+  187B 11          	mov a, b
0422+  187C 26 0A 00    	mov b, 10
0423+  187F AE          	div a, b
0424+  1880 07 8E 18    	call print_number
0425+  1883 11          	mov a, b
0426+  1884 6A 30       	add al, $30
0427+  1886 23          	mov ah, al
0428+  1887 19 00       	mov al, 0
0429+  1889 05 03       	syscall sys_io	; print coeff
0430+  188B E5          	pop b
0431+  188C E4          	pop a
0432+  188D 09          	ret
0433+  188E             
0434+  188E             
0435+  188E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  188E             ; if A == 0, print space
0437+  188E             ; else print A
0438+  188E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  188E             print_number:
0440+  188E 6A 30       	add al, $30
0441+  1890 23          	mov ah, al
0442+  1891 07 FF 16    	call putchar
0443+  1894 09          	ret
0444+  1895             
0445+  1895             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  1895             ; PRINT 16BIT HEX INTEGER
0447+  1895             ; integer value in reg B
0448+  1895             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  1895             print_u16x:
0450+  1895 D7          	push a
0451+  1896 D8          	push b
0452+  1897 DD          	push bl
0453+  1898 30          	mov bl, bh
0454+  1899 07 C6 16    	call itoa				; convert bh to char in A
0455+  189C 2F          	mov bl, al				; save al
0456+  189D 19 00       	mov al, 0
0457+  189F 05 03       	syscall sys_io				; display AH
0458+  18A1 24          	mov ah, bl				; retrieve al
0459+  18A2 19 00       	mov al, 0
0460+  18A4 05 03       	syscall sys_io				; display AL
0461+  18A6             
0462+  18A6 EA          	pop bl
0463+  18A7 07 C6 16    	call itoa				; convert bh to char in A
0464+  18AA 2F          	mov bl, al				; save al
0465+  18AB 19 00       	mov al, 0
0466+  18AD 05 03       	syscall sys_io				; display AH
0467+  18AF 24          	mov ah, bl				; retrieve al
0468+  18B0 19 00       	mov al, 0
0469+  18B2 05 03       	syscall sys_io				; display AL
0470+  18B4             
0471+  18B4 E5          	pop b
0472+  18B5 E4          	pop a
0473+  18B6 09          	ret
0474+  18B7             
0475+  18B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  18B7             ; INPUT 16BIT HEX INTEGER
0477+  18B7             ; read 16bit integer into A
0478+  18B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  18B7             scan_u16x:
0480+  18B7 F8 10 00    	enter 16
0481+  18BA D8          	push b
0482+  18BB DA          	push d
0483+  18BC             
0484+  18BC FA F1 FF    	lea d, [bp + -15]
0485+  18BF 07 06 17    	call gets				; get number
0486+  18C2             
0487+  18C2 32          	mov bl, [d]
0488+  18C3 37          	mov bh, bl
0489+  18C4 33 01 00    	mov bl, [d + 1]
0490+  18C7 07 B4 16    	call atoi				; convert to int in AL
0491+  18CA 23          	mov ah, al				; move to AH
0492+  18CB             
0493+  18CB 33 02 00    	mov bl, [d + 2]
0494+  18CE 37          	mov bh, bl
0495+  18CF 33 03 00    	mov bl, [d + 3]
0496+  18D2 07 B4 16    	call atoi				; convert to int in AL
0497+  18D5             
0498+  18D5 E7          	pop d
0499+  18D6 E5          	pop b
0500+  18D7 F9          	leave
0501+  18D8 09          	ret
0502+  18D9             
0503+  18D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  18D9             ; PRINT 8bit HEX INTEGER
0505+  18D9             ; integer value in reg bl
0506+  18D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  18D9             print_u8x:
0508+  18D9 D7          	push a
0509+  18DA DD          	push bl
0510+  18DB             
0511+  18DB 07 C6 16    	call itoa				; convert bl to char in A
0512+  18DE 2F          	mov bl, al				; save al
0513+  18DF 19 00       	mov al, 0
0514+  18E1 05 03       	syscall sys_io				; display AH
0515+  18E3 24          	mov ah, bl				; retrieve al
0516+  18E4 19 00       	mov al, 0
0517+  18E6 05 03       	syscall sys_io				; display AL
0518+  18E8             
0519+  18E8 EA          	pop bl
0520+  18E9 E4          	pop a
0521+  18EA 09          	ret
0522+  18EB             
0523+  18EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  18EB             ; print 8bit decimal unsigned number
0525+  18EB             ; input number in AL
0526+  18EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  18EB             print_u8d:
0528+  18EB D7          	push a
0529+  18EC D8          	push b
0530+  18ED             
0531+  18ED 22 00       	mov ah, 0
0532+  18EF 26 64 00    	mov b, 100
0533+  18F2 AE          	div a, b
0534+  18F3 D8          	push b			; save remainder
0535+  18F4 B9 00       	cmp al, 0
0536+  18F6 C6 00 19    	je skip100
0537+  18F9 6A 30       	add al, $30
0538+  18FB 23          	mov ah, al
0539+  18FC 19 00       	mov al, 0
0540+  18FE 05 03       	syscall sys_io	; print coeff
0541+  1900             skip100:
0542+  1900 E4          	pop a
0543+  1901 22 00       	mov ah, 0
0544+  1903 26 0A 00    	mov b, 10
0545+  1906 AE          	div a, b
0546+  1907 D8          	push b			; save remainder
0547+  1908 B9 00       	cmp al, 0
0548+  190A C6 14 19    	je skip10
0549+  190D 6A 30       	add al, $30
0550+  190F 23          	mov ah, al
0551+  1910 19 00       	mov al, 0
0552+  1912 05 03       	syscall sys_io	; print coeff
0553+  1914             skip10:
0554+  1914 E4          	pop a
0555+  1915 1B          	mov al, bl
0556+  1916 6A 30       	add al, $30
0557+  1918 23          	mov ah, al
0558+  1919 19 00       	mov al, 0
0559+  191B 05 03       	syscall sys_io	; print coeff
0560+  191D E5          	pop b
0561+  191E E4          	pop a
0562+  191F 09          	ret
0563+  1920             
0564+  1920             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  1920             ; INPUT 8BIT HEX INTEGER
0566+  1920             ; read 8bit integer into AL
0567+  1920             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  1920             scan_u8x:
0569+  1920 F8 04 00    	enter 4
0570+  1923 D8          	push b
0571+  1924 DA          	push d
0572+  1925             
0573+  1925 FA FD FF    	lea d, [bp + -3]
0574+  1928 07 06 17    	call gets				; get number
0575+  192B             
0576+  192B 32          	mov bl, [d]
0577+  192C 37          	mov bh, bl
0578+  192D 33 01 00    	mov bl, [d + 1]
0579+  1930 07 B4 16    	call atoi				; convert to int in AL
0580+  1933             
0581+  1933 E7          	pop d
0582+  1934 E5          	pop b
0583+  1935 F9          	leave
0584+  1936 09          	ret
0585+  1937             
0586+  1937             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  1937             ; input decimal number
0588+  1937             ; result in A
0589+  1937             ; 655'\0'
0590+  1937             ; low--------high
0591+  1937             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  1937             scan_u16d:
0593+  1937 F8 08 00    	enter 8
0594+  193A E2          	push si
0595+  193B D8          	push b
0596+  193C D9          	push c
0597+  193D DA          	push d
0598+  193E FA F9 FF    	lea d, [bp +- 7]
0599+  1941 07 06 17    	call gets
0600+  1944 07 34 16    	call strlen			; get string length in C
0601+  1947 7E          	dec c
0602+  1948 FD 4E       	mov si, d
0603+  194A 12          	mov a, c
0604+  194B FD 99       	shl a
0605+  194D 3B 9C 16    	mov d, table_power
0606+  1950 59          	add d, a
0607+  1951 38 00 00    	mov c, 0
0608+  1954             mul_loop:
0609+  1954 F6          	lodsb			; load ASCII to al
0610+  1955 B9 00       	cmp al, 0
0611+  1957 C6 6A 19    	je mul_exit
0612+  195A 6F 30       	sub al, $30		; make into integer
0613+  195C 22 00       	mov ah, 0
0614+  195E 2A          	mov b, [d]
0615+  195F AC          	mul a, b			; result in B since it fits in 16bits
0616+  1960 11          	mov a, b
0617+  1961 28          	mov b, c
0618+  1962 54          	add a, b
0619+  1963 39          	mov c, a
0620+  1964 63 02 00    	sub d, 2
0621+  1967 0A 54 19    	jmp mul_loop
0622+  196A             mul_exit:
0623+  196A 12          	mov a, c
0624+  196B E7          	pop d
0625+  196C E6          	pop c
0626+  196D E5          	pop b
0627+  196E EF          	pop si
0628+  196F F9          	leave
0629+  1970 09          	ret
0904   1971             ; --- END INCLUDE BLOCK
0905   1971             
0906   1971             
0907   1971             .end
tasm: Number of errors = 0
