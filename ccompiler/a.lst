0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 14 00      sub sp, 20 ; m
0011   0405 FA ED FF      lea d, [bp + -19] ; m beginning on the stack
0012   0408 2D            mov b, d
0013   0409 26 00 00      mov b, 0
0014   040C F9            leave
0015   040D 05 0B         syscall sys_terminate_proc
0016   040F             
0017   040F             add:
0018   040F D2            push bp
0019   0410 9B            mov bp, sp
0020   0411 2C 07 00      mov b, [bp + 7] ; x
0021   0414 D7            push a
0022   0415 11            mov a, b
0023   0416 2C 05 00      mov b, [bp + 5] ; y
0024   0419 54            add a, b
0025   041A 27            mov b, a
0026   041B E4            pop a
0027   041C F9            leave
0028   041D 09            ret
0029   041E             
0030   041E             scann:
0031   041E D2            push bp
0032   041F 9B            mov bp, sp
0033   0420 52 02 00      sub sp, 2 ; m
0034   0423             
0035   0423             ; --- BEGIN INLINE ASM BLOCK
0036   0423 07 A4 07      call scan_u16d
0037   0426 45 FF FF      mov [bp + -1], a
0038   0429             ; --- END INLINE ASM BLOCK
0039   0429             
0040   0429 FA 05 00      lea d, [bp + 5] ; n
0041   042C 2A            mov b, [d]
0042   042D D8            push b
0043   042E 2C FF FF      mov b, [bp + -1] ; m
0044   0431 E7            pop d
0045   0432 D7            push a
0046   0433 11            mov a, b
0047   0434 43            mov [d], a
0048   0435 E4            pop a
0049   0436 F9            leave
0050   0437 09            ret
0051   0438             
0052   0438             printn:
0053   0438 D2            push bp
0054   0439 9B            mov bp, sp
0055   043A FA 07 00      lea d, [bp + 7] ; s
0056   043D 2A            mov b, [d]
0057   043E FD AB         swp b
0058   0440 D8            push b
0059   0441 07 4F 04      call print
0060   0444 51 02 00      add sp, 2
0061   0447             
0062   0447             ; --- BEGIN INLINE ASM BLOCK
0063   0447 17 05 00      mov a, [bp + 5]
0064   044A 07 CF 06      call print_u16d
0065   044D             ; --- END INLINE ASM BLOCK
0066   044D             
0067   044D F9            leave
0068   044E 09            ret
0069   044F             
0070   044F             print:
0071   044F D2            push bp
0072   0450 9B            mov bp, sp
0073   0451             
0074   0451             ; --- BEGIN INLINE ASM BLOCK
0075   0451 17 05 00      mov a, [bp + 5]
0076   0454 3C            mov d, a
0077   0455 07 A6 06      call puts
0078   0458             ; --- END INLINE ASM BLOCK
0079   0458             
0080   0458 F9            leave
0081   0459 09            ret
0082   045A             ; --- END TEXT BLOCK
0083   045A             
0084   045A             ; --- BEGIN DATA BLOCK
0085   045A             ; --- END DATA BLOCK
0086   045A             
0087   045A             ; --- BEGIN INCLUDE BLOCK
0088   045A             .include "lib/stdio.asm"
0001+  045A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  045A             ; stdio.s
0003+  045A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  045A             .include "lib/string.asm"
0001++ 045A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 045A             ; string.s
0003++ 045A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 045A             
0005++ 045A             
0006++ 045A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 045A             ; strrev
0008++ 045A             ; reverse a string
0009++ 045A             ; D = string address
0010++ 045A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 045A             ; 01234
0012++ 045A             strrev:
0013++ 045A 4B          	pusha
0014++ 045B 07 A1 04    	call strlen	; length in C
0015++ 045E 12          	mov a, c
0016++ 045F AF 01 00    	cmp a, 1
0017++ 0462 D0 7C 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0465 7D          	dec a
0019++ 0466 FD 4E       	mov si, d	; beginning of string
0020++ 0468 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 046A 59          	add d, a	; end of string
0022++ 046B 12          	mov a, c
0023++ 046C FD 9B       	shr a		; divide by 2
0024++ 046E 39          	mov c, a	; C now counts the steps
0025++ 046F             strrev_L0:
0026++ 046F 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0470 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0471 3E          	mov [d], al	; store left char into right side
0029++ 0472 1B          	mov al, bl
0030++ 0473 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0474 7E          	dec c
0032++ 0475 7F          	dec d
0033++ 0476 C2 00 00    	cmp c, 0
0034++ 0479 C7 6F 04    	jne strrev_L0
0035++ 047C             strrev_end:
0036++ 047C 4C          	popa
0037++ 047D 09          	ret
0038++ 047E             	
0039++ 047E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 047E             ; strchr
0041++ 047E             ; search string in D for char in AL
0042++ 047E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 047E             strchr:
0044++ 047E             strchr_L0:
0045++ 047E 32          	mov bl, [d]
0046++ 047F C1 00       	cmp bl, 0
0047++ 0481 C6 8C 04    	je strchr_end
0048++ 0484 BA          	cmp al, bl
0049++ 0485 C6 8C 04    	je strchr_end
0050++ 0488 79          	inc d
0051++ 0489 0A 7E 04    	jmp strchr_L0
0052++ 048C             strchr_end:
0053++ 048C 1B          	mov al, bl
0054++ 048D 09          	ret
0055++ 048E             
0056++ 048E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 048E             ; strstr
0058++ 048E             ; find sub-string
0059++ 048E             ; str1 in SI
0060++ 048E             ; str2 in DI
0061++ 048E             ; SI points to end of source string
0062++ 048E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 048E             strstr:
0064++ 048E DB          	push al
0065++ 048F DA          	push d
0066++ 0490 E3          	push di
0067++ 0491             strstr_loop:
0068++ 0491 F3          	cmpsb					; compare a byte of the strings
0069++ 0492 C7 9D 04    	jne strstr_ret
0070++ 0495 FC 00 00    	lea d, [di + 0]
0071++ 0498 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 049A C7 91 04    	jne strstr_loop				; equal chars but not at end
0073++ 049D             strstr_ret:
0074++ 049D F0          	pop di
0075++ 049E E7          	pop d
0076++ 049F E8          	pop al
0077++ 04A0 09          	ret
0078++ 04A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 04A1             ; length of null terminated string
0080++ 04A1             ; result in C
0081++ 04A1             ; pointer in D
0082++ 04A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 04A1             strlen:
0084++ 04A1 DA          	push d
0085++ 04A2 38 00 00    	mov c, 0
0086++ 04A5             strlen_L1:
0087++ 04A5 BD 00       	cmp byte [d], 0
0088++ 04A7 C6 AF 04    	je strlen_ret
0089++ 04AA 79          	inc d
0090++ 04AB 78          	inc c
0091++ 04AC 0A A5 04    	jmp strlen_L1
0092++ 04AF             strlen_ret:
0093++ 04AF E7          	pop d
0094++ 04B0 09          	ret
0095++ 04B1             
0096++ 04B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04B1             ; STRCMP
0098++ 04B1             ; compare two strings
0099++ 04B1             ; str1 in SI
0100++ 04B1             ; str2 in DI
0101++ 04B1             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04B1             strcmp:
0104++ 04B1 DB          	push al
0105++ 04B2 DA          	push d
0106++ 04B3 E3          	push di
0107++ 04B4 E2          	push si
0108++ 04B5             strcmp_loop:
0109++ 04B5 F3          	cmpsb					; compare a byte of the strings
0110++ 04B6 C7 C1 04    	jne strcmp_ret
0111++ 04B9 FB FF FF    	lea d, [si +- 1]
0112++ 04BC BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04BE C7 B5 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04C1             strcmp_ret:
0115++ 04C1 EF          	pop si
0116++ 04C2 F0          	pop di
0117++ 04C3 E7          	pop d
0118++ 04C4 E8          	pop al
0119++ 04C5 09          	ret
0120++ 04C6             
0121++ 04C6             
0122++ 04C6             ; STRCPY
0123++ 04C6             ; copy null terminated string from SI to DI
0124++ 04C6             ; source in SI
0125++ 04C6             ; destination in DI
0126++ 04C6             strcpy:
0127++ 04C6 E2          	push si
0128++ 04C7 E3          	push di
0129++ 04C8 DB          	push al
0130++ 04C9             strcpy_L1:
0131++ 04C9 F6          	lodsb
0132++ 04CA F7          	stosb
0133++ 04CB B9 00       	cmp al, 0
0134++ 04CD C7 C9 04    	jne strcpy_L1
0135++ 04D0             strcpy_end:
0136++ 04D0 E8          	pop al
0137++ 04D1 F0          	pop di
0138++ 04D2 EF          	pop si
0139++ 04D3 09          	ret
0140++ 04D4             
0141++ 04D4             ; STRCAT
0142++ 04D4             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04D4             ; source in SI
0144++ 04D4             ; destination in DI
0145++ 04D4             strcat:
0146++ 04D4 E2          	push si
0147++ 04D5 E3          	push di
0148++ 04D6 D7          	push a
0149++ 04D7 DA          	push d
0150++ 04D8 50          	mov a, di
0151++ 04D9 3C          	mov d, a
0152++ 04DA             strcat_goto_end_L1:
0153++ 04DA BD 00       	cmp byte[d], 0
0154++ 04DC C6 E3 04    	je strcat_start
0155++ 04DF 79          	inc d
0156++ 04E0 0A DA 04    	jmp strcat_goto_end_L1
0157++ 04E3             strcat_start:
0158++ 04E3 FD 50       	mov di, d
0159++ 04E5             strcat_L1:
0160++ 04E5 F6          	lodsb
0161++ 04E6 F7          	stosb
0162++ 04E7 B9 00       	cmp al, 0
0163++ 04E9 C7 E5 04    	jne strcat_L1
0164++ 04EC             strcat_end:
0165++ 04EC E7          	pop d
0166++ 04ED E4          	pop a
0167++ 04EE F0          	pop di
0168++ 04EF EF          	pop si
0169++ 04F0 09          	ret
0005+  04F1             
0006+  04F1 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  04F5 34 35 36 37 
0006+  04F9 38 39 41 42 
0006+  04FD 43 44 45 46 
0007+  0501 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0505 1B 5B 48 00 
0008+  0509             
0009+  0509 01 00       table_power:.dw 1
0010+  050B 0A 00       			.dw 10
0011+  050D 64 00       			.dw 100
0012+  050F E8 03       			.dw 1000
0013+  0511 10 27       			.dw 10000
0014+  0513             
0015+  0513             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0513             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0513             ; ASCII in BL
0018+  0513             ; result in AL
0019+  0513             ; ascii for F = 0100 0110
0020+  0513             ; ascii for 9 = 0011 1001
0021+  0513             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0513             hex_ascii_encode:
0023+  0513 1B          	mov al, bl
0024+  0514 93 40       	test al, $40				; test if letter or number
0025+  0516 C7 1C 05    	jnz hex_letter
0026+  0519 87 0F       	and al, $0F				; get number
0027+  051B 09          	ret
0028+  051C             hex_letter:
0029+  051C 87 0F       	and al, $0F				; get letter
0030+  051E 6A 09       	add al, 9
0031+  0520 09          	ret
0032+  0521             
0033+  0521             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0521             ; ATOI
0035+  0521             ; 2 letter hex string in B
0036+  0521             ; 8bit integer returned in AL
0037+  0521             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0521             atoi:
0039+  0521 D8          	push b
0040+  0522 07 13 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0525 30          	mov bl, bh
0042+  0526 DB          	push al					; save a
0043+  0527 07 13 05    	call hex_ascii_encode
0044+  052A EA          	pop bl	
0045+  052B FD 9E 04    	shl al, 4
0046+  052E 8C          	or al, bl
0047+  052F E5          	pop b
0048+  0530 09          	ret	
0049+  0531             
0050+  0531             
0051+  0531             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0531             ; printf
0053+  0531             ; no need for explanations!
0054+  0531             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0531             printf:
0056+  0531 09          	ret
0057+  0532             
0058+  0532             
0059+  0532             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0532             ; scanf
0061+  0532             ; no need for explanations!
0062+  0532             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0532             scanf:
0064+  0532 09          	ret
0065+  0533             
0066+  0533             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0533             ; ITOA
0068+  0533             ; 8bit value in BL
0069+  0533             ; 2 byte ASCII result in A
0070+  0533             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0533             itoa:
0072+  0533 DA          	push d
0073+  0534 D8          	push b
0074+  0535 A7 00       	mov bh, 0
0075+  0537 FD A4 04    	shr bl, 4	
0076+  053A 74          	mov d, b
0077+  053B 1F F1 04    	mov al, [d + s_hex_digits]
0078+  053E 23          	mov ah, al
0079+  053F             	
0080+  053F E5          	pop b
0081+  0540 D8          	push b
0082+  0541 A7 00       	mov bh, 0
0083+  0543 FD 87 0F    	and bl, $0F
0084+  0546 74          	mov d, b
0085+  0547 1F F1 04    	mov al, [d + s_hex_digits]
0086+  054A E5          	pop b
0087+  054B E7          	pop d
0088+  054C 09          	ret
0089+  054D             
0090+  054D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  054D             ; HEX STRING TO BINARY
0092+  054D             ; di = destination address
0093+  054D             ; si = source
0094+  054D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  054D             hex_to_int:
0096+  054D             hex_to_int_L1:
0097+  054D F6          	lodsb					; load from [SI] to AL
0098+  054E B9 00       	cmp al, 0				; check if ASCII 0
0099+  0550 C6 5D 05    	jz hex_to_int_ret
0100+  0553 36          	mov bh, al
0101+  0554 F6          	lodsb
0102+  0555 2F          	mov bl, al
0103+  0556 07 21 05    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0559 F7          	stosb					; store AL to [DI]
0105+  055A 0A 4D 05    	jmp hex_to_int_L1
0106+  055D             hex_to_int_ret:
0107+  055D 09          	ret		
0108+  055E             
0109+  055E             
0110+  055E             
0111+  055E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  055E             ; GETCHAR
0113+  055E             ; char in ah
0114+  055E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  055E             getchar:
0116+  055E DB          	push al
0117+  055F             getchar_retry:
0118+  055F FD 0C       	sti
0119+  0561 19 01       	mov al, 1
0120+  0563 05 03       	syscall sys_io			; receive in AH
0121+  0565 B9 00       	cmp al, 0			; check if any char was receive
0122+  0567 C6 5F 05    	je getchar_retry
0123+  056A E8          	pop al
0124+  056B 09          	ret
0125+  056C             
0126+  056C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  056C             ; PUTCHAR
0128+  056C             ; char in ah
0129+  056C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  056C             putchar:
0131+  056C D7          	push a
0132+  056D 19 00       	mov al, 0
0133+  056F 05 03       	syscall sys_io			; char in AH
0134+  0571 E4          	pop a
0135+  0572 09          	ret
0136+  0573             
0137+  0573             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0573             ;; INPUT A STRING
0139+  0573             ;; terminates with null
0140+  0573             ;; pointer in D
0141+  0573             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0573             gets:
0143+  0573 D7          	push a
0144+  0574 DA          	push d
0145+  0575             gets_loop:
0146+  0575 FD 0C       	sti
0147+  0577 19 01       	mov al, 1
0148+  0579 05 03       	syscall sys_io			; receive in AH
0149+  057B B9 00       	cmp al, 0				; check error code (AL)
0150+  057D C6 75 05    	je gets_loop			; if no char received, retry
0151+  0580             
0152+  0580 76 1B       	cmp ah, 27
0153+  0582 C6 A3 05    	je gets_telnet_escape
0154+  0585 76 0A       	cmp ah, $0A				; LF
0155+  0587 C6 FC 05    	je gets_end
0156+  058A 76 0D       	cmp ah, $0D				; CR
0157+  058C C6 FC 05    	je gets_end
0158+  058F 76 5C       	cmp ah, $5C				; '\\'
0159+  0591 C6 D3 05    	je gets_escape
0160+  0594             	
0161+  0594 76 08       	cmp ah, $08			; check for backspace
0162+  0596 C6 9F 05    	je gets_backspace
0163+  0599             
0164+  0599 1A          	mov al, ah
0165+  059A 3E          	mov [d], al
0166+  059B 79          	inc d
0167+  059C 0A 75 05    	jmp gets_loop
0168+  059F             gets_backspace:
0169+  059F 7F          	dec d
0170+  05A0 0A 75 05    	jmp gets_loop
0171+  05A3             gets_telnet_escape:
0172+  05A3 FD 0C       	sti
0173+  05A5 19 01       	mov al, 1
0174+  05A7 05 03       	syscall sys_io				; receive in AH without echo
0175+  05A9 B9 00       	cmp al, 0					; check error code (AL)
0176+  05AB C6 A3 05    	je gets_telnet_escape		; if no char received, retry
0177+  05AE 76 5B       	cmp ah, '['
0178+  05B0 C7 75 05    	jne gets_loop
0179+  05B3             gets_telnet_escape_phase2:
0180+  05B3 FD 0C       	sti
0181+  05B5 19 01       	mov al, 1
0182+  05B7 05 03       	syscall sys_io					; receive in AH without echo
0183+  05B9 B9 00       	cmp al, 0						; check error code (AL)
0184+  05BB C6 B3 05    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  05BE 76 44       	cmp ah, 'D'
0186+  05C0 C6 CB 05    	je gets_left_arrow
0187+  05C3 76 43       	cmp ah, 'C'
0188+  05C5 C6 CF 05    	je gets_right_arrow
0189+  05C8 0A 75 05    	jmp gets_loop
0190+  05CB             gets_left_arrow:
0191+  05CB 7F          	dec d
0192+  05CC 0A 75 05    	jmp gets_loop
0193+  05CF             gets_right_arrow:
0194+  05CF 79          	inc d
0195+  05D0 0A 75 05    	jmp gets_loop
0196+  05D3             gets_escape:
0197+  05D3 FD 0C       	sti
0198+  05D5 19 01       	mov al, 1
0199+  05D7 05 03       	syscall sys_io			; receive in AH
0200+  05D9 B9 00       	cmp al, 0				; check error code (AL)
0201+  05DB C6 D3 05    	je gets_escape			; if no char received, retry
0202+  05DE 76 6E       	cmp ah, 'n'
0203+  05E0 C6 EE 05    	je gets_LF
0204+  05E3 76 72       	cmp ah, 'r'
0205+  05E5 C6 F5 05    	je gets_CR
0206+  05E8 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  05E9 3E          	mov [d], al
0208+  05EA 79          	inc d
0209+  05EB 0A 75 05    	jmp gets_loop
0210+  05EE             gets_LF:
0211+  05EE 19 0A       	mov al, $0A
0212+  05F0 3E          	mov [d], al
0213+  05F1 79          	inc d
0214+  05F2 0A 75 05    	jmp gets_loop
0215+  05F5             gets_CR:
0216+  05F5 19 0D       	mov al, $0D
0217+  05F7 3E          	mov [d], al
0218+  05F8 79          	inc d
0219+  05F9 0A 75 05    	jmp gets_loop
0220+  05FC             gets_end:
0221+  05FC 19 00       	mov al, 0
0222+  05FE 3E          	mov [d], al				; terminate string
0223+  05FF E7          	pop d
0224+  0600 E4          	pop a
0225+  0601 09          	ret
0226+  0602             
0227+  0602             
0228+  0602             
0229+  0602             
0230+  0602             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0602             ;; INPUT TEXT
0232+  0602             ;; terminated with CTRL+D
0233+  0602             ;; pointer in D
0234+  0602             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0602             gettxt:
0236+  0602 D7          	push a
0237+  0603 DA          	push d
0238+  0604             gettxt_loop:
0239+  0604 19 01       	mov al, 1
0240+  0606 05 03       	syscall sys_io			; receive in AH
0241+  0608 B9 00       	cmp al, 0				; check error code (AL)
0242+  060A C6 04 06    	je gettxt_loop		; if no char received, retry
0243+  060D 76 04       	cmp ah, 4			; EOT
0244+  060F C6 4D 06    	je gettxt_end
0245+  0612 76 08       	cmp ah, $08			; check for backspace
0246+  0614 C6 49 06    	je gettxt_backspace
0247+  0617 76 5C       	cmp ah, $5C				; '\\'
0248+  0619 C6 22 06    	je gettxt_escape
0249+  061C 1A          	mov al, ah
0250+  061D 3E          	mov [d], al
0251+  061E 79          	inc d
0252+  061F 0A 04 06    	jmp gettxt_loop
0253+  0622             gettxt_escape:
0254+  0622 19 01       	mov al, 1
0255+  0624 05 03       	syscall sys_io			; receive in AH
0256+  0626 B9 00       	cmp al, 0				; check error code (AL)
0257+  0628 C6 22 06    	je gettxt_escape		; if no char received, retry
0258+  062B 76 6E       	cmp ah, 'n'
0259+  062D C6 3B 06    	je gettxt_LF
0260+  0630 76 72       	cmp ah, 'r'
0261+  0632 C6 42 06    	je gettxt_CR
0262+  0635 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0636 3E          	mov [d], al
0264+  0637 79          	inc d
0265+  0638 0A 04 06    	jmp gettxt_loop
0266+  063B             gettxt_LF:
0267+  063B 19 0A       	mov al, $0A
0268+  063D 3E          	mov [d], al
0269+  063E 79          	inc d
0270+  063F 0A 04 06    	jmp gettxt_loop
0271+  0642             gettxt_CR:
0272+  0642 19 0D       	mov al, $0D
0273+  0644 3E          	mov [d], al
0274+  0645 79          	inc d
0275+  0646 0A 04 06    	jmp gettxt_loop
0276+  0649             gettxt_backspace:
0277+  0649 7F          	dec d
0278+  064A 0A 04 06    	jmp gettxt_loop
0279+  064D             gettxt_end:
0280+  064D 19 00       	mov al, 0
0281+  064F 3E          	mov [d], al				; terminate string
0282+  0650 E7          	pop d
0283+  0651 E4          	pop a
0284+  0652 09          	ret
0285+  0653             
0286+  0653             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0653             ; PRINT NEW LINE
0288+  0653             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0653             printnl:
0290+  0653 D7          	push a
0291+  0654 10 00 0A    	mov a, $0A00
0292+  0657 05 03       	syscall sys_io
0293+  0659 10 00 0D    	mov a, $0D00
0294+  065C 05 03       	syscall sys_io
0295+  065E E4          	pop a
0296+  065F 09          	ret
0297+  0660             
0298+  0660             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0660             ; strtoint
0300+  0660             ; 4 digit hex string number in d
0301+  0660             ; integer returned in A
0302+  0660             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0660             strtointx:
0304+  0660 D8          	push b
0305+  0661 32          	mov bl, [d]
0306+  0662 37          	mov bh, bl
0307+  0663 33 01 00    	mov bl, [d + 1]
0308+  0666 07 21 05    	call atoi				; convert to int in AL
0309+  0669 23          	mov ah, al				; move to AH
0310+  066A 33 02 00    	mov bl, [d + 2]
0311+  066D 37          	mov bh, bl
0312+  066E 33 03 00    	mov bl, [d + 3]
0313+  0671 07 21 05    	call atoi				; convert to int in AL
0314+  0674 E5          	pop b
0315+  0675 09          	ret
0316+  0676             
0317+  0676             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0676             ; strtoint
0319+  0676             ; 5 digit base10 string number in d
0320+  0676             ; integer returned in A
0321+  0676             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0676             strtoint:
0323+  0676 E2          	push si
0324+  0677 D8          	push b
0325+  0678 D9          	push c
0326+  0679 DA          	push d
0327+  067A 07 A1 04    	call strlen			; get string length in C
0328+  067D 7E          	dec c
0329+  067E FD 4E       	mov si, d
0330+  0680 12          	mov a, c
0331+  0681 FD 99       	shl a
0332+  0683 3B 09 05    	mov d, table_power
0333+  0686 59          	add d, a
0334+  0687 38 00 00    	mov c, 0
0335+  068A             strtoint_L0:
0336+  068A F6          	lodsb			; load ASCII to al
0337+  068B B9 00       	cmp al, 0
0338+  068D C6 A0 06    	je strtoint_end
0339+  0690 6F 30       	sub al, $30		; make into integer
0340+  0692 22 00       	mov ah, 0
0341+  0694 2A          	mov b, [d]
0342+  0695 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0696 11          	mov a, b
0344+  0697 28          	mov b, c
0345+  0698 54          	add a, b
0346+  0699 39          	mov c, a
0347+  069A 63 02 00    	sub d, 2
0348+  069D 0A 8A 06    	jmp strtoint_L0
0349+  06A0             strtoint_end:
0350+  06A0 12          	mov a, c
0351+  06A1 E7          	pop d
0352+  06A2 E6          	pop c
0353+  06A3 E5          	pop b
0354+  06A4 EF          	pop si
0355+  06A5 09          	ret
0356+  06A6             
0357+  06A6             
0358+  06A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  06A6             ; PRINT NULL TERMINATED STRING
0360+  06A6             ; pointer in D
0361+  06A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  06A6             puts:
0363+  06A6 D7          	push a
0364+  06A7 DA          	push d
0365+  06A8             puts_L1:
0366+  06A8 1E          	mov al, [d]
0367+  06A9 B9 00       	cmp al, 0
0368+  06AB C6 B7 06    	jz puts_END
0369+  06AE 23          	mov ah, al
0370+  06AF 19 00       	mov al, 0
0371+  06B1 05 03       	syscall sys_io
0372+  06B3 79          	inc d
0373+  06B4 0A A8 06    	jmp puts_L1
0374+  06B7             puts_END:
0375+  06B7 E7          	pop d
0376+  06B8 E4          	pop a
0377+  06B9 09          	ret
0378+  06BA             
0379+  06BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  06BA             ; PRINT N SIZE STRING
0381+  06BA             ; pointer in D
0382+  06BA             ; size in C
0383+  06BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  06BA             putsn:
0385+  06BA DB          	push al
0386+  06BB DA          	push d
0387+  06BC D9          	push c
0388+  06BD             putsn_L0:
0389+  06BD 1E          	mov al, [d]
0390+  06BE 23          	mov ah, al
0391+  06BF 19 00       	mov al, 0
0392+  06C1 05 03       	syscall sys_io
0393+  06C3 79          	inc d
0394+  06C4 7E          	dec c	
0395+  06C5 C2 00 00    	cmp c, 0
0396+  06C8 C7 BD 06    	jne putsn_L0
0397+  06CB             putsn_end:
0398+  06CB E6          	pop c
0399+  06CC E7          	pop d
0400+  06CD E8          	pop al
0401+  06CE 09          	ret
0402+  06CF             
0403+  06CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  06CF             ; print 16bit decimal number
0405+  06CF             ; input number in A
0406+  06CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  06CF             print_u16d:
0408+  06CF D7          	push a
0409+  06D0 D8          	push b
0410+  06D1 26 10 27    	mov b, 10000
0411+  06D4 AE          	div a, b			; get 10000 coeff.
0412+  06D5 07 FB 06    	call print_number
0413+  06D8 11          	mov a, b
0414+  06D9 26 E8 03    	mov b, 1000
0415+  06DC AE          	div a, b			; get 10000 coeff.
0416+  06DD 07 FB 06    	call print_number
0417+  06E0 11          	mov a, b
0418+  06E1 26 64 00    	mov b, 100
0419+  06E4 AE          	div a, b
0420+  06E5 07 FB 06    	call print_number
0421+  06E8 11          	mov a, b
0422+  06E9 26 0A 00    	mov b, 10
0423+  06EC AE          	div a, b
0424+  06ED 07 FB 06    	call print_number
0425+  06F0 11          	mov a, b
0426+  06F1 6A 30       	add al, $30
0427+  06F3 23          	mov ah, al
0428+  06F4 19 00       	mov al, 0
0429+  06F6 05 03       	syscall sys_io	; print coeff
0430+  06F8 E5          	pop b
0431+  06F9 E4          	pop a
0432+  06FA 09          	ret
0433+  06FB             
0434+  06FB             
0435+  06FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  06FB             ; if A == 0, print space
0437+  06FB             ; else print A
0438+  06FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  06FB             print_number:
0440+  06FB 6A 30       	add al, $30
0441+  06FD 23          	mov ah, al
0442+  06FE 07 6C 05    	call putchar
0443+  0701 09          	ret
0444+  0702             
0445+  0702             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0702             ; PRINT 16BIT HEX INTEGER
0447+  0702             ; integer value in reg B
0448+  0702             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0702             print_u16x:
0450+  0702 D7          	push a
0451+  0703 D8          	push b
0452+  0704 DD          	push bl
0453+  0705 30          	mov bl, bh
0454+  0706 07 33 05    	call itoa				; convert bh to char in A
0455+  0709 2F          	mov bl, al				; save al
0456+  070A 19 00       	mov al, 0
0457+  070C 05 03       	syscall sys_io				; display AH
0458+  070E 24          	mov ah, bl				; retrieve al
0459+  070F 19 00       	mov al, 0
0460+  0711 05 03       	syscall sys_io				; display AL
0461+  0713             
0462+  0713 EA          	pop bl
0463+  0714 07 33 05    	call itoa				; convert bh to char in A
0464+  0717 2F          	mov bl, al				; save al
0465+  0718 19 00       	mov al, 0
0466+  071A 05 03       	syscall sys_io				; display AH
0467+  071C 24          	mov ah, bl				; retrieve al
0468+  071D 19 00       	mov al, 0
0469+  071F 05 03       	syscall sys_io				; display AL
0470+  0721             
0471+  0721 E5          	pop b
0472+  0722 E4          	pop a
0473+  0723 09          	ret
0474+  0724             
0475+  0724             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0724             ; INPUT 16BIT HEX INTEGER
0477+  0724             ; read 16bit integer into A
0478+  0724             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0724             scan_u16x:
0480+  0724 F8 10 00    	enter 16
0481+  0727 D8          	push b
0482+  0728 DA          	push d
0483+  0729             
0484+  0729 FA F1 FF    	lea d, [bp + -15]
0485+  072C 07 73 05    	call gets				; get number
0486+  072F             
0487+  072F 32          	mov bl, [d]
0488+  0730 37          	mov bh, bl
0489+  0731 33 01 00    	mov bl, [d + 1]
0490+  0734 07 21 05    	call atoi				; convert to int in AL
0491+  0737 23          	mov ah, al				; move to AH
0492+  0738             
0493+  0738 33 02 00    	mov bl, [d + 2]
0494+  073B 37          	mov bh, bl
0495+  073C 33 03 00    	mov bl, [d + 3]
0496+  073F 07 21 05    	call atoi				; convert to int in AL
0497+  0742             
0498+  0742 E7          	pop d
0499+  0743 E5          	pop b
0500+  0744 F9          	leave
0501+  0745 09          	ret
0502+  0746             
0503+  0746             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0746             ; PRINT 8bit HEX INTEGER
0505+  0746             ; integer value in reg bl
0506+  0746             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0746             print_u8x:
0508+  0746 D7          	push a
0509+  0747 DD          	push bl
0510+  0748             
0511+  0748 07 33 05    	call itoa				; convert bl to char in A
0512+  074B 2F          	mov bl, al				; save al
0513+  074C 19 00       	mov al, 0
0514+  074E 05 03       	syscall sys_io				; display AH
0515+  0750 24          	mov ah, bl				; retrieve al
0516+  0751 19 00       	mov al, 0
0517+  0753 05 03       	syscall sys_io				; display AL
0518+  0755             
0519+  0755 EA          	pop bl
0520+  0756 E4          	pop a
0521+  0757 09          	ret
0522+  0758             
0523+  0758             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0758             ; print 8bit decimal unsigned number
0525+  0758             ; input number in AL
0526+  0758             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0758             print_u8d:
0528+  0758 D7          	push a
0529+  0759 D8          	push b
0530+  075A             
0531+  075A 22 00       	mov ah, 0
0532+  075C 26 64 00    	mov b, 100
0533+  075F AE          	div a, b
0534+  0760 D8          	push b			; save remainder
0535+  0761 B9 00       	cmp al, 0
0536+  0763 C6 6D 07    	je skip100
0537+  0766 6A 30       	add al, $30
0538+  0768 23          	mov ah, al
0539+  0769 19 00       	mov al, 0
0540+  076B 05 03       	syscall sys_io	; print coeff
0541+  076D             skip100:
0542+  076D E4          	pop a
0543+  076E 22 00       	mov ah, 0
0544+  0770 26 0A 00    	mov b, 10
0545+  0773 AE          	div a, b
0546+  0774 D8          	push b			; save remainder
0547+  0775 B9 00       	cmp al, 0
0548+  0777 C6 81 07    	je skip10
0549+  077A 6A 30       	add al, $30
0550+  077C 23          	mov ah, al
0551+  077D 19 00       	mov al, 0
0552+  077F 05 03       	syscall sys_io	; print coeff
0553+  0781             skip10:
0554+  0781 E4          	pop a
0555+  0782 1B          	mov al, bl
0556+  0783 6A 30       	add al, $30
0557+  0785 23          	mov ah, al
0558+  0786 19 00       	mov al, 0
0559+  0788 05 03       	syscall sys_io	; print coeff
0560+  078A E5          	pop b
0561+  078B E4          	pop a
0562+  078C 09          	ret
0563+  078D             
0564+  078D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  078D             ; INPUT 8BIT HEX INTEGER
0566+  078D             ; read 8bit integer into AL
0567+  078D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  078D             scan_u8x:
0569+  078D F8 04 00    	enter 4
0570+  0790 D8          	push b
0571+  0791 DA          	push d
0572+  0792             
0573+  0792 FA FD FF    	lea d, [bp + -3]
0574+  0795 07 73 05    	call gets				; get number
0575+  0798             
0576+  0798 32          	mov bl, [d]
0577+  0799 37          	mov bh, bl
0578+  079A 33 01 00    	mov bl, [d + 1]
0579+  079D 07 21 05    	call atoi				; convert to int in AL
0580+  07A0             
0581+  07A0 E7          	pop d
0582+  07A1 E5          	pop b
0583+  07A2 F9          	leave
0584+  07A3 09          	ret
0585+  07A4             
0586+  07A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  07A4             ; input decimal number
0588+  07A4             ; result in A
0589+  07A4             ; 655'\0'
0590+  07A4             ; low--------high
0591+  07A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  07A4             scan_u16d:
0593+  07A4 F8 08 00    	enter 8
0594+  07A7 E2          	push si
0595+  07A8 D8          	push b
0596+  07A9 D9          	push c
0597+  07AA DA          	push d
0598+  07AB FA F9 FF    	lea d, [bp +- 7]
0599+  07AE 07 73 05    	call gets
0600+  07B1 07 A1 04    	call strlen			; get string length in C
0601+  07B4 7E          	dec c
0602+  07B5 FD 4E       	mov si, d
0603+  07B7 12          	mov a, c
0604+  07B8 FD 99       	shl a
0605+  07BA 3B 09 05    	mov d, table_power
0606+  07BD 59          	add d, a
0607+  07BE 38 00 00    	mov c, 0
0608+  07C1             mul_loop:
0609+  07C1 F6          	lodsb			; load ASCII to al
0610+  07C2 B9 00       	cmp al, 0
0611+  07C4 C6 D7 07    	je mul_exit
0612+  07C7 6F 30       	sub al, $30		; make into integer
0613+  07C9 22 00       	mov ah, 0
0614+  07CB 2A          	mov b, [d]
0615+  07CC AC          	mul a, b			; result in B since it fits in 16bits
0616+  07CD 11          	mov a, b
0617+  07CE 28          	mov b, c
0618+  07CF 54          	add a, b
0619+  07D0 39          	mov c, a
0620+  07D1 63 02 00    	sub d, 2
0621+  07D4 0A C1 07    	jmp mul_loop
0622+  07D7             mul_exit:
0623+  07D7 12          	mov a, c
0624+  07D8 E7          	pop d
0625+  07D9 E6          	pop c
0626+  07DA E5          	pop b
0627+  07DB EF          	pop si
0628+  07DC F9          	leave
0629+  07DD 09          	ret
0089   07DE             ; --- END INCLUDE BLOCK
0090   07DE             
0091   07DE             
0092   07DE             .end
tasm: Number of errors = 0
