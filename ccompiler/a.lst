0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 26 18 04      mov b, s
0010   0405 74            mov d, b
0011   0406 2A            mov b, [d]
0012   0407 F9            leave
0013   0408 05 0B         syscall sys_terminate_proc
0014   040A             prints:
0015   040A D2            push bp
0016   040B 9B            mov bp, sp
0017   040C             ; --- END TEXT BLOCK
0018   040C             
0019   040C             ; --- BEGIN DATA BLOCK
0020   040C E9 00       aa: .dw 233
0021   040E BC 01       p: .dw 444
0022   0410 00 16       ss_data: .db 0, 22, 
0023   0412 48 65 6C 6C s_data: .db "Hello", 0
0023   0416 6F 00 
0024   0418 12 04       s: .dw s_data
0025   041A 2D 00 16 00 ii: .dw 45, 22, 
0026   041E             ; --- END DATA BLOCK
0027   041E             
0028   041E             ; --- BEGIN INCLUDE BLOCK
0029   041E             .include "lib/stdio.asm"
0001+  041E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  041E             ; stdio.s
0003+  041E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  041E             .include "lib/string.asm"
0001++ 041E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 041E             ; string.s
0003++ 041E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 041E             
0005++ 041E             
0006++ 041E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 041E             ; strrev
0008++ 041E             ; reverse a string
0009++ 041E             ; D = string address
0010++ 041E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 041E             ; 01234
0012++ 041E             strrev:
0013++ 041E 4B          	pusha
0014++ 041F 07 65 04    	call strlen	; length in C
0015++ 0422 12          	mov a, c
0016++ 0423 AF 01 00    	cmp a, 1
0017++ 0426 D0 40 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0429 7D          	dec a
0019++ 042A FD 4E       	mov si, d	; beginning of string
0020++ 042C FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 042E 59          	add d, a	; end of string
0022++ 042F 12          	mov a, c
0023++ 0430 FD 9B       	shr a		; divide by 2
0024++ 0432 39          	mov c, a	; C now counts the steps
0025++ 0433             strrev_L0:
0026++ 0433 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0434 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0435 3E          	mov [d], al	; store left char into right side
0029++ 0436 1B          	mov al, bl
0030++ 0437 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0438 7E          	dec c
0032++ 0439 7F          	dec d
0033++ 043A C2 00 00    	cmp c, 0
0034++ 043D C7 33 04    	jne strrev_L0
0035++ 0440             strrev_end:
0036++ 0440 4C          	popa
0037++ 0441 09          	ret
0038++ 0442             	
0039++ 0442             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0442             ; strchr
0041++ 0442             ; search string in D for char in AL
0042++ 0442             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0442             strchr:
0044++ 0442             strchr_L0:
0045++ 0442 32          	mov bl, [d]
0046++ 0443 C1 00       	cmp bl, 0
0047++ 0445 C6 50 04    	je strchr_end
0048++ 0448 BA          	cmp al, bl
0049++ 0449 C6 50 04    	je strchr_end
0050++ 044C 79          	inc d
0051++ 044D 0A 42 04    	jmp strchr_L0
0052++ 0450             strchr_end:
0053++ 0450 1B          	mov al, bl
0054++ 0451 09          	ret
0055++ 0452             
0056++ 0452             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0452             ; strstr
0058++ 0452             ; find sub-string
0059++ 0452             ; str1 in SI
0060++ 0452             ; str2 in DI
0061++ 0452             ; SI points to end of source string
0062++ 0452             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0452             strstr:
0064++ 0452 DB          	push al
0065++ 0453 DA          	push d
0066++ 0454 E3          	push di
0067++ 0455             strstr_loop:
0068++ 0455 F3          	cmpsb					; compare a byte of the strings
0069++ 0456 C7 61 04    	jne strstr_ret
0070++ 0459 FC 00 00    	lea d, [di + 0]
0071++ 045C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 045E C7 55 04    	jne strstr_loop				; equal chars but not at end
0073++ 0461             strstr_ret:
0074++ 0461 F0          	pop di
0075++ 0462 E7          	pop d
0076++ 0463 E8          	pop al
0077++ 0464 09          	ret
0078++ 0465             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0465             ; length of null terminated string
0080++ 0465             ; result in C
0081++ 0465             ; pointer in D
0082++ 0465             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0465             strlen:
0084++ 0465 DA          	push d
0085++ 0466 38 00 00    	mov c, 0
0086++ 0469             strlen_L1:
0087++ 0469 BD 00       	cmp byte [d], 0
0088++ 046B C6 73 04    	je strlen_ret
0089++ 046E 79          	inc d
0090++ 046F 78          	inc c
0091++ 0470 0A 69 04    	jmp strlen_L1
0092++ 0473             strlen_ret:
0093++ 0473 E7          	pop d
0094++ 0474 09          	ret
0095++ 0475             
0096++ 0475             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0475             ; STRCMP
0098++ 0475             ; compare two strings
0099++ 0475             ; str1 in SI
0100++ 0475             ; str2 in DI
0101++ 0475             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0475             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0475             strcmp:
0104++ 0475 DB          	push al
0105++ 0476 DA          	push d
0106++ 0477 E3          	push di
0107++ 0478 E2          	push si
0108++ 0479             strcmp_loop:
0109++ 0479 F3          	cmpsb					; compare a byte of the strings
0110++ 047A C7 85 04    	jne strcmp_ret
0111++ 047D FB FF FF    	lea d, [si +- 1]
0112++ 0480 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0482 C7 79 04    	jne strcmp_loop				; equal chars but not at end
0114++ 0485             strcmp_ret:
0115++ 0485 EF          	pop si
0116++ 0486 F0          	pop di
0117++ 0487 E7          	pop d
0118++ 0488 E8          	pop al
0119++ 0489 09          	ret
0120++ 048A             
0121++ 048A             
0122++ 048A             ; STRCPY
0123++ 048A             ; copy null terminated string from SI to DI
0124++ 048A             ; source in SI
0125++ 048A             ; destination in DI
0126++ 048A             strcpy:
0127++ 048A E2          	push si
0128++ 048B E3          	push di
0129++ 048C DB          	push al
0130++ 048D             strcpy_L1:
0131++ 048D F6          	lodsb
0132++ 048E F7          	stosb
0133++ 048F B9 00       	cmp al, 0
0134++ 0491 C7 8D 04    	jne strcpy_L1
0135++ 0494             strcpy_end:
0136++ 0494 E8          	pop al
0137++ 0495 F0          	pop di
0138++ 0496 EF          	pop si
0139++ 0497 09          	ret
0140++ 0498             
0141++ 0498             ; STRCAT
0142++ 0498             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0498             ; source in SI
0144++ 0498             ; destination in DI
0145++ 0498             strcat:
0146++ 0498 E2          	push si
0147++ 0499 E3          	push di
0148++ 049A D7          	push a
0149++ 049B DA          	push d
0150++ 049C 50          	mov a, di
0151++ 049D 3C          	mov d, a
0152++ 049E             strcat_goto_end_L1:
0153++ 049E BD 00       	cmp byte[d], 0
0154++ 04A0 C6 A7 04    	je strcat_start
0155++ 04A3 79          	inc d
0156++ 04A4 0A 9E 04    	jmp strcat_goto_end_L1
0157++ 04A7             strcat_start:
0158++ 04A7 FD 50       	mov di, d
0159++ 04A9             strcat_L1:
0160++ 04A9 F6          	lodsb
0161++ 04AA F7          	stosb
0162++ 04AB B9 00       	cmp al, 0
0163++ 04AD C7 A9 04    	jne strcat_L1
0164++ 04B0             strcat_end:
0165++ 04B0 E7          	pop d
0166++ 04B1 E4          	pop a
0167++ 04B2 F0          	pop di
0168++ 04B3 EF          	pop si
0169++ 04B4 09          	ret
0005+  04B5             
0006+  04B5 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  04B9 34 35 36 37 
0006+  04BD 38 39 41 42 
0006+  04C1 43 44 45 46 
0007+  04C5             
0008+  04C5 01 00       table_power:.dw 1
0009+  04C7 0A 00       			.dw 10
0010+  04C9 64 00       			.dw 100
0011+  04CB E8 03       			.dw 1000
0012+  04CD 10 27       			.dw 10000
0013+  04CF             
0014+  04CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  04CF             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  04CF             ; ASCII in BL
0017+  04CF             ; result in AL
0018+  04CF             ; ascii for F = 0100 0110
0019+  04CF             ; ascii for 9 = 0011 1001
0020+  04CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  04CF             hex_ascii_encode:
0022+  04CF 1B          	mov al, bl
0023+  04D0 93 40       	test al, $40				; test if letter or number
0024+  04D2 C7 D8 04    	jnz hex_letter
0025+  04D5 87 0F       	and al, $0F				; get number
0026+  04D7 09          	ret
0027+  04D8             hex_letter:
0028+  04D8 87 0F       	and al, $0F				; get letter
0029+  04DA 6A 09       	add al, 9
0030+  04DC 09          	ret
0031+  04DD             
0032+  04DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  04DD             ; ATOI
0034+  04DD             ; 2 letter hex string in B
0035+  04DD             ; 8bit integer returned in AL
0036+  04DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  04DD             atoi:
0038+  04DD D8          	push b
0039+  04DE 07 CF 04    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  04E1 30          	mov bl, bh
0041+  04E2 DB          	push al					; save a
0042+  04E3 07 CF 04    	call hex_ascii_encode
0043+  04E6 EA          	pop bl	
0044+  04E7 FD 9E 04    	shl al, 4
0045+  04EA 8C          	or al, bl
0046+  04EB E5          	pop b
0047+  04EC 09          	ret	
0048+  04ED             
0049+  04ED             
0050+  04ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04ED             ; printf
0052+  04ED             ; no need for explanations!
0053+  04ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  04ED             printf:
0055+  04ED 09          	ret
0056+  04EE             
0057+  04EE             
0058+  04EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  04EE             ; scanf
0060+  04EE             ; no need for explanations!
0061+  04EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  04EE             scanf:
0063+  04EE 09          	ret
0064+  04EF             
0065+  04EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  04EF             ; ITOA
0067+  04EF             ; 8bit value in BL
0068+  04EF             ; 2 byte ASCII result in A
0069+  04EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  04EF             itoa:
0071+  04EF DA          	push d
0072+  04F0 D8          	push b
0073+  04F1 A7 00       	mov bh, 0
0074+  04F3 FD A4 04    	shr bl, 4	
0075+  04F6 74          	mov d, b
0076+  04F7 1F B5 04    	mov al, [d + s_hex_digits]
0077+  04FA 23          	mov ah, al
0078+  04FB             	
0079+  04FB E5          	pop b
0080+  04FC D8          	push b
0081+  04FD A7 00       	mov bh, 0
0082+  04FF FD 87 0F    	and bl, $0F
0083+  0502 74          	mov d, b
0084+  0503 1F B5 04    	mov al, [d + s_hex_digits]
0085+  0506 E5          	pop b
0086+  0507 E7          	pop d
0087+  0508 09          	ret
0088+  0509             
0089+  0509             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0509             ; HEX STRING TO BINARY
0091+  0509             ; di = destination address
0092+  0509             ; si = source
0093+  0509             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0509             hex_to_int:
0095+  0509             hex_to_int_L1:
0096+  0509 F6          	lodsb					; load from [SI] to AL
0097+  050A B9 00       	cmp al, 0				; check if ASCII 0
0098+  050C C6 19 05    	jz hex_to_int_ret
0099+  050F 36          	mov bh, al
0100+  0510 F6          	lodsb
0101+  0511 2F          	mov bl, al
0102+  0512 07 DD 04    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0515 F7          	stosb					; store AL to [DI]
0104+  0516 0A 09 05    	jmp hex_to_int_L1
0105+  0519             hex_to_int_ret:
0106+  0519 09          	ret		
0107+  051A             
0108+  051A             
0109+  051A             
0110+  051A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  051A             ; GETCHAR
0112+  051A             ; char in ah
0113+  051A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  051A             getchar:
0115+  051A DB          	push al
0116+  051B             getchar_retry:
0117+  051B FD 0C       	sti
0118+  051D 19 01       	mov al, 1
0119+  051F 05 03       	syscall sys_io			; receive in AH
0120+  0521 B9 00       	cmp al, 0			; check if any char was receive
0121+  0523 C6 1B 05    	je getchar_retry
0122+  0526 E8          	pop al
0123+  0527 09          	ret
0124+  0528             
0125+  0528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0528             ; PUTCHAR
0127+  0528             ; char in ah
0128+  0528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0528             putchar:
0130+  0528 D7          	push a
0131+  0529 19 00       	mov al, 0
0132+  052B 05 03       	syscall sys_io			; char in AH
0133+  052D E4          	pop a
0134+  052E 09          	ret
0135+  052F             
0136+  052F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  052F             ;; INPUT A STRING
0138+  052F             ;; terminates with null
0139+  052F             ;; pointer in D
0140+  052F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  052F             gets:
0142+  052F D7          	push a
0143+  0530 DA          	push d
0144+  0531             gets_loop:
0145+  0531 FD 0C       	sti
0146+  0533 19 01       	mov al, 1
0147+  0535 05 03       	syscall sys_io			; receive in AH
0148+  0537 B9 00       	cmp al, 0				; check error code (AL)
0149+  0539 C6 31 05    	je gets_loop			; if no char received, retry
0150+  053C             
0151+  053C 76 1B       	cmp ah, 27
0152+  053E C6 5F 05    	je gets_telnet_escape
0153+  0541 76 0A       	cmp ah, $0A				; LF
0154+  0543 C6 B8 05    	je gets_end
0155+  0546 76 0D       	cmp ah, $0D				; CR
0156+  0548 C6 B8 05    	je gets_end
0157+  054B 76 5C       	cmp ah, $5C				; '\\'
0158+  054D C6 8F 05    	je gets_escape
0159+  0550             	
0160+  0550 76 08       	cmp ah, $08			; check for backspace
0161+  0552 C6 5B 05    	je gets_backspace
0162+  0555             
0163+  0555 1A          	mov al, ah
0164+  0556 3E          	mov [d], al
0165+  0557 79          	inc d
0166+  0558 0A 31 05    	jmp gets_loop
0167+  055B             gets_backspace:
0168+  055B 7F          	dec d
0169+  055C 0A 31 05    	jmp gets_loop
0170+  055F             gets_telnet_escape:
0171+  055F FD 0C       	sti
0172+  0561 19 01       	mov al, 1
0173+  0563 05 03       	syscall sys_io				; receive in AH without echo
0174+  0565 B9 00       	cmp al, 0					; check error code (AL)
0175+  0567 C6 5F 05    	je gets_telnet_escape		; if no char received, retry
0176+  056A 76 5B       	cmp ah, '['
0177+  056C C7 31 05    	jne gets_loop
0178+  056F             gets_telnet_escape_phase2:
0179+  056F FD 0C       	sti
0180+  0571 19 01       	mov al, 1
0181+  0573 05 03       	syscall sys_io					; receive in AH without echo
0182+  0575 B9 00       	cmp al, 0						; check error code (AL)
0183+  0577 C6 6F 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  057A 76 44       	cmp ah, 'D'
0185+  057C C6 87 05    	je gets_left_arrow
0186+  057F 76 43       	cmp ah, 'C'
0187+  0581 C6 8B 05    	je gets_right_arrow
0188+  0584 0A 31 05    	jmp gets_loop
0189+  0587             gets_left_arrow:
0190+  0587 7F          	dec d
0191+  0588 0A 31 05    	jmp gets_loop
0192+  058B             gets_right_arrow:
0193+  058B 79          	inc d
0194+  058C 0A 31 05    	jmp gets_loop
0195+  058F             gets_escape:
0196+  058F FD 0C       	sti
0197+  0591 19 01       	mov al, 1
0198+  0593 05 03       	syscall sys_io			; receive in AH
0199+  0595 B9 00       	cmp al, 0				; check error code (AL)
0200+  0597 C6 8F 05    	je gets_escape			; if no char received, retry
0201+  059A 76 6E       	cmp ah, 'n'
0202+  059C C6 AA 05    	je gets_LF
0203+  059F 76 72       	cmp ah, 'r'
0204+  05A1 C6 B1 05    	je gets_CR
0205+  05A4 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  05A5 3E          	mov [d], al
0207+  05A6 79          	inc d
0208+  05A7 0A 31 05    	jmp gets_loop
0209+  05AA             gets_LF:
0210+  05AA 19 0A       	mov al, $0A
0211+  05AC 3E          	mov [d], al
0212+  05AD 79          	inc d
0213+  05AE 0A 31 05    	jmp gets_loop
0214+  05B1             gets_CR:
0215+  05B1 19 0D       	mov al, $0D
0216+  05B3 3E          	mov [d], al
0217+  05B4 79          	inc d
0218+  05B5 0A 31 05    	jmp gets_loop
0219+  05B8             gets_end:
0220+  05B8 19 00       	mov al, 0
0221+  05BA 3E          	mov [d], al				; terminate string
0222+  05BB E7          	pop d
0223+  05BC E4          	pop a
0224+  05BD 09          	ret
0225+  05BE             
0226+  05BE             
0227+  05BE             
0228+  05BE             
0229+  05BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  05BE             ;; INPUT TEXT
0231+  05BE             ;; terminated with CTRL+D
0232+  05BE             ;; pointer in D
0233+  05BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  05BE             gettxt:
0235+  05BE D7          	push a
0236+  05BF DA          	push d
0237+  05C0             gettxt_loop:
0238+  05C0 19 01       	mov al, 1
0239+  05C2 05 03       	syscall sys_io			; receive in AH
0240+  05C4 B9 00       	cmp al, 0				; check error code (AL)
0241+  05C6 C6 C0 05    	je gettxt_loop		; if no char received, retry
0242+  05C9 76 04       	cmp ah, 4			; EOT
0243+  05CB C6 09 06    	je gettxt_end
0244+  05CE 76 08       	cmp ah, $08			; check for backspace
0245+  05D0 C6 05 06    	je gettxt_backspace
0246+  05D3 76 5C       	cmp ah, $5C				; '\\'
0247+  05D5 C6 DE 05    	je gettxt_escape
0248+  05D8 1A          	mov al, ah
0249+  05D9 3E          	mov [d], al
0250+  05DA 79          	inc d
0251+  05DB 0A C0 05    	jmp gettxt_loop
0252+  05DE             gettxt_escape:
0253+  05DE 19 01       	mov al, 1
0254+  05E0 05 03       	syscall sys_io			; receive in AH
0255+  05E2 B9 00       	cmp al, 0				; check error code (AL)
0256+  05E4 C6 DE 05    	je gettxt_escape		; if no char received, retry
0257+  05E7 76 6E       	cmp ah, 'n'
0258+  05E9 C6 F7 05    	je gettxt_LF
0259+  05EC 76 72       	cmp ah, 'r'
0260+  05EE C6 FE 05    	je gettxt_CR
0261+  05F1 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  05F2 3E          	mov [d], al
0263+  05F3 79          	inc d
0264+  05F4 0A C0 05    	jmp gettxt_loop
0265+  05F7             gettxt_LF:
0266+  05F7 19 0A       	mov al, $0A
0267+  05F9 3E          	mov [d], al
0268+  05FA 79          	inc d
0269+  05FB 0A C0 05    	jmp gettxt_loop
0270+  05FE             gettxt_CR:
0271+  05FE 19 0D       	mov al, $0D
0272+  0600 3E          	mov [d], al
0273+  0601 79          	inc d
0274+  0602 0A C0 05    	jmp gettxt_loop
0275+  0605             gettxt_backspace:
0276+  0605 7F          	dec d
0277+  0606 0A C0 05    	jmp gettxt_loop
0278+  0609             gettxt_end:
0279+  0609 19 00       	mov al, 0
0280+  060B 3E          	mov [d], al				; terminate string
0281+  060C E7          	pop d
0282+  060D E4          	pop a
0283+  060E 09          	ret
0284+  060F             
0285+  060F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  060F             ; PRINT NEW LINE
0287+  060F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  060F             printnl:
0289+  060F D7          	push a
0290+  0610 10 00 0A    	mov a, $0A00
0291+  0613 05 03       	syscall sys_io
0292+  0615 10 00 0D    	mov a, $0D00
0293+  0618 05 03       	syscall sys_io
0294+  061A E4          	pop a
0295+  061B 09          	ret
0296+  061C             
0297+  061C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  061C             ; strtoint
0299+  061C             ; 4 digit hex string number in d
0300+  061C             ; integer returned in A
0301+  061C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  061C             strtointx:
0303+  061C D8          	push b
0304+  061D 32          	mov bl, [d]
0305+  061E 37          	mov bh, bl
0306+  061F 33 01 00    	mov bl, [d + 1]
0307+  0622 07 DD 04    	call atoi				; convert to int in AL
0308+  0625 23          	mov ah, al				; move to AH
0309+  0626 33 02 00    	mov bl, [d + 2]
0310+  0629 37          	mov bh, bl
0311+  062A 33 03 00    	mov bl, [d + 3]
0312+  062D 07 DD 04    	call atoi				; convert to int in AL
0313+  0630 E5          	pop b
0314+  0631 09          	ret
0315+  0632             
0316+  0632             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  0632             ; strtoint
0318+  0632             ; 5 digit base10 string number in d
0319+  0632             ; integer returned in A
0320+  0632             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  0632             strtoint:
0322+  0632 E2          	push si
0323+  0633 D8          	push b
0324+  0634 D9          	push c
0325+  0635 DA          	push d
0326+  0636 07 65 04    	call strlen			; get string length in C
0327+  0639 7E          	dec c
0328+  063A FD 4E       	mov si, d
0329+  063C 12          	mov a, c
0330+  063D FD 99       	shl a
0331+  063F 3B C5 04    	mov d, table_power
0332+  0642 59          	add d, a
0333+  0643 38 00 00    	mov c, 0
0334+  0646             strtoint_L0:
0335+  0646 F6          	lodsb			; load ASCII to al
0336+  0647 B9 00       	cmp al, 0
0337+  0649 C6 5C 06    	je strtoint_end
0338+  064C 6F 30       	sub al, $30		; make into integer
0339+  064E 22 00       	mov ah, 0
0340+  0650 2A          	mov b, [d]
0341+  0651 AC          	mul a, b			; result in B since it fits in 16bits
0342+  0652 11          	mov a, b
0343+  0653 28          	mov b, c
0344+  0654 54          	add a, b
0345+  0655 39          	mov c, a
0346+  0656 63 02 00    	sub d, 2
0347+  0659 0A 46 06    	jmp strtoint_L0
0348+  065C             strtoint_end:
0349+  065C 12          	mov a, c
0350+  065D E7          	pop d
0351+  065E E6          	pop c
0352+  065F E5          	pop b
0353+  0660 EF          	pop si
0354+  0661 09          	ret
0355+  0662             
0356+  0662             
0357+  0662             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  0662             ; PRINT NULL TERMINATED STRING
0359+  0662             ; pointer in D
0360+  0662             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  0662             puts:
0362+  0662 D7          	push a
0363+  0663 DA          	push d
0364+  0664             puts_L1:
0365+  0664 1E          	mov al, [d]
0366+  0665 B9 00       	cmp al, 0
0367+  0667 C6 73 06    	jz puts_END
0368+  066A 23          	mov ah, al
0369+  066B 19 00       	mov al, 0
0370+  066D 05 03       	syscall sys_io
0371+  066F 79          	inc d
0372+  0670 0A 64 06    	jmp puts_L1
0373+  0673             puts_END:
0374+  0673 E7          	pop d
0375+  0674 E4          	pop a
0376+  0675 09          	ret
0377+  0676             
0378+  0676             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0676             ; PRINT N SIZE STRING
0380+  0676             ; pointer in D
0381+  0676             ; size in C
0382+  0676             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  0676             putsn:
0384+  0676 DB          	push al
0385+  0677 DA          	push d
0386+  0678 D9          	push c
0387+  0679             putsn_L0:
0388+  0679 1E          	mov al, [d]
0389+  067A 23          	mov ah, al
0390+  067B 19 00       	mov al, 0
0391+  067D 05 03       	syscall sys_io
0392+  067F 79          	inc d
0393+  0680 7E          	dec c	
0394+  0681 C2 00 00    	cmp c, 0
0395+  0684 C7 79 06    	jne putsn_L0
0396+  0687             putsn_end:
0397+  0687 E6          	pop c
0398+  0688 E7          	pop d
0399+  0689 E8          	pop al
0400+  068A 09          	ret
0401+  068B             
0402+  068B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  068B             ; print 16bit decimal number
0404+  068B             ; input number in A
0405+  068B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  068B             print_u16d:
0407+  068B D7          	push a
0408+  068C D8          	push b
0409+  068D 26 10 27    	mov b, 10000
0410+  0690 AE          	div a, b			; get 10000 coeff.
0411+  0691 07 B7 06    	call print_number
0412+  0694 11          	mov a, b
0413+  0695 26 E8 03    	mov b, 1000
0414+  0698 AE          	div a, b			; get 10000 coeff.
0415+  0699 07 B7 06    	call print_number
0416+  069C 11          	mov a, b
0417+  069D 26 64 00    	mov b, 100
0418+  06A0 AE          	div a, b
0419+  06A1 07 B7 06    	call print_number
0420+  06A4 11          	mov a, b
0421+  06A5 26 0A 00    	mov b, 10
0422+  06A8 AE          	div a, b
0423+  06A9 07 B7 06    	call print_number
0424+  06AC 11          	mov a, b
0425+  06AD 6A 30       	add al, $30
0426+  06AF 23          	mov ah, al
0427+  06B0 19 00       	mov al, 0
0428+  06B2 05 03       	syscall sys_io	; print coeff
0429+  06B4 E5          	pop b
0430+  06B5 E4          	pop a
0431+  06B6 09          	ret
0432+  06B7             
0433+  06B7             
0434+  06B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  06B7             ; if A == 0, print space
0436+  06B7             ; else print A
0437+  06B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  06B7             print_number:
0439+  06B7 6A 30       	add al, $30
0440+  06B9 23          	mov ah, al
0441+  06BA 07 28 05    	call putchar
0442+  06BD 09          	ret
0443+  06BE             
0444+  06BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06BE             ; PRINT 16BIT HEX INTEGER
0446+  06BE             ; integer value in reg B
0447+  06BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06BE             print_u16x:
0449+  06BE D7          	push a
0450+  06BF D8          	push b
0451+  06C0 DD          	push bl
0452+  06C1 30          	mov bl, bh
0453+  06C2 07 EF 04    	call itoa				; convert bh to char in A
0454+  06C5 2F          	mov bl, al				; save al
0455+  06C6 19 00       	mov al, 0
0456+  06C8 05 03       	syscall sys_io				; display AH
0457+  06CA 24          	mov ah, bl				; retrieve al
0458+  06CB 19 00       	mov al, 0
0459+  06CD 05 03       	syscall sys_io				; display AL
0460+  06CF             
0461+  06CF EA          	pop bl
0462+  06D0 07 EF 04    	call itoa				; convert bh to char in A
0463+  06D3 2F          	mov bl, al				; save al
0464+  06D4 19 00       	mov al, 0
0465+  06D6 05 03       	syscall sys_io				; display AH
0466+  06D8 24          	mov ah, bl				; retrieve al
0467+  06D9 19 00       	mov al, 0
0468+  06DB 05 03       	syscall sys_io				; display AL
0469+  06DD             
0470+  06DD E5          	pop b
0471+  06DE E4          	pop a
0472+  06DF 09          	ret
0473+  06E0             
0474+  06E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  06E0             ; INPUT 16BIT HEX INTEGER
0476+  06E0             ; read 16bit integer into A
0477+  06E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  06E0             scan_u16x:
0479+  06E0 F8 10 00    	enter 16
0480+  06E3 D8          	push b
0481+  06E4 DA          	push d
0482+  06E5             
0483+  06E5 FA F1 FF    	lea d, [bp + -15]
0484+  06E8 07 2F 05    	call gets				; get number
0485+  06EB             
0486+  06EB 32          	mov bl, [d]
0487+  06EC 37          	mov bh, bl
0488+  06ED 33 01 00    	mov bl, [d + 1]
0489+  06F0 07 DD 04    	call atoi				; convert to int in AL
0490+  06F3 23          	mov ah, al				; move to AH
0491+  06F4             
0492+  06F4 33 02 00    	mov bl, [d + 2]
0493+  06F7 37          	mov bh, bl
0494+  06F8 33 03 00    	mov bl, [d + 3]
0495+  06FB 07 DD 04    	call atoi				; convert to int in AL
0496+  06FE             
0497+  06FE E7          	pop d
0498+  06FF E5          	pop b
0499+  0700 F9          	leave
0500+  0701 09          	ret
0501+  0702             
0502+  0702             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  0702             ; PRINT 8bit HEX INTEGER
0504+  0702             ; integer value in reg bl
0505+  0702             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  0702             print_u8x:
0507+  0702 D7          	push a
0508+  0703 DD          	push bl
0509+  0704             
0510+  0704 07 EF 04    	call itoa				; convert bl to char in A
0511+  0707 2F          	mov bl, al				; save al
0512+  0708 19 00       	mov al, 0
0513+  070A 05 03       	syscall sys_io				; display AH
0514+  070C 24          	mov ah, bl				; retrieve al
0515+  070D 19 00       	mov al, 0
0516+  070F 05 03       	syscall sys_io				; display AL
0517+  0711             
0518+  0711 EA          	pop bl
0519+  0712 E4          	pop a
0520+  0713 09          	ret
0521+  0714             
0522+  0714             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0714             ; print 8bit decimal unsigned number
0524+  0714             ; input number in AL
0525+  0714             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0714             print_u8d:
0527+  0714 D7          	push a
0528+  0715 D8          	push b
0529+  0716             
0530+  0716 22 00       	mov ah, 0
0531+  0718 26 64 00    	mov b, 100
0532+  071B AE          	div a, b
0533+  071C D8          	push b			; save remainder
0534+  071D B9 00       	cmp al, 0
0535+  071F C6 29 07    	je skip100
0536+  0722 6A 30       	add al, $30
0537+  0724 23          	mov ah, al
0538+  0725 19 00       	mov al, 0
0539+  0727 05 03       	syscall sys_io	; print coeff
0540+  0729             skip100:
0541+  0729 E4          	pop a
0542+  072A 22 00       	mov ah, 0
0543+  072C 26 0A 00    	mov b, 10
0544+  072F AE          	div a, b
0545+  0730 D8          	push b			; save remainder
0546+  0731 B9 00       	cmp al, 0
0547+  0733 C6 3D 07    	je skip10
0548+  0736 6A 30       	add al, $30
0549+  0738 23          	mov ah, al
0550+  0739 19 00       	mov al, 0
0551+  073B 05 03       	syscall sys_io	; print coeff
0552+  073D             skip10:
0553+  073D E4          	pop a
0554+  073E 1B          	mov al, bl
0555+  073F 6A 30       	add al, $30
0556+  0741 23          	mov ah, al
0557+  0742 19 00       	mov al, 0
0558+  0744 05 03       	syscall sys_io	; print coeff
0559+  0746 E5          	pop b
0560+  0747 E4          	pop a
0561+  0748 09          	ret
0562+  0749             
0563+  0749             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  0749             ; INPUT 8BIT HEX INTEGER
0565+  0749             ; read 8bit integer into AL
0566+  0749             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  0749             scan_u8x:
0568+  0749 F8 04 00    	enter 4
0569+  074C D8          	push b
0570+  074D DA          	push d
0571+  074E             
0572+  074E FA FD FF    	lea d, [bp + -3]
0573+  0751 07 2F 05    	call gets				; get number
0574+  0754             
0575+  0754 32          	mov bl, [d]
0576+  0755 37          	mov bh, bl
0577+  0756 33 01 00    	mov bl, [d + 1]
0578+  0759 07 DD 04    	call atoi				; convert to int in AL
0579+  075C             
0580+  075C E7          	pop d
0581+  075D E5          	pop b
0582+  075E F9          	leave
0583+  075F 09          	ret
0584+  0760             
0585+  0760             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  0760             ; input decimal number
0587+  0760             ; result in A
0588+  0760             ; 655'\0'
0589+  0760             ; low--------high
0590+  0760             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  0760             scan_u16d:
0592+  0760 F8 08 00    	enter 8
0593+  0763 E2          	push si
0594+  0764 D8          	push b
0595+  0765 D9          	push c
0596+  0766 DA          	push d
0597+  0767 FA F9 FF    	lea d, [bp +- 7]
0598+  076A 07 2F 05    	call gets
0599+  076D 07 65 04    	call strlen			; get string length in C
0600+  0770 7E          	dec c
0601+  0771 FD 4E       	mov si, d
0602+  0773 12          	mov a, c
0603+  0774 FD 99       	shl a
0604+  0776 3B C5 04    	mov d, table_power
0605+  0779 59          	add d, a
0606+  077A 38 00 00    	mov c, 0
0607+  077D             mul_loop:
0608+  077D F6          	lodsb			; load ASCII to al
0609+  077E B9 00       	cmp al, 0
0610+  0780 C6 93 07    	je mul_exit
0611+  0783 6F 30       	sub al, $30		; make into integer
0612+  0785 22 00       	mov ah, 0
0613+  0787 2A          	mov b, [d]
0614+  0788 AC          	mul a, b			; result in B since it fits in 16bits
0615+  0789 11          	mov a, b
0616+  078A 28          	mov b, c
0617+  078B 54          	add a, b
0618+  078C 39          	mov c, a
0619+  078D 63 02 00    	sub d, 2
0620+  0790 0A 7D 07    	jmp mul_loop
0621+  0793             mul_exit:
0622+  0793 12          	mov a, c
0623+  0794 E7          	pop d
0624+  0795 E6          	pop c
0625+  0796 E5          	pop b
0626+  0797 EF          	pop si
0627+  0798 F9          	leave
0628+  0799 09          	ret
0030   079A             ; --- END INCLUDE BLOCK
0031   079A             
0032   079A             
0033   079A             .end
tasm: Number of errors = 0
