0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 26 5C 06      mov b, __string_0 ; "\n"
0012   0408 FD AB         swp b
0013   040A D8            push b
0014   040B 07 51 06      call print
0015   040E 51 02 00      add sp, 2
0016   0411 26 FF FF      mov b, -1
0017   0414 D7            push a
0018   0415 11            mov a, b
0019   0416 26 00 00      mov b, 0
0020   0419 B0            cmp a, b
0021   041A 0E            lodflgs
0022   041B 87 08         and al, %00001000 ; <
0023   041D B9 00         cmp al, 0
0024   041F 0E            lodflgs
0025   0420 8F 01         xor al, %00000001
0026   0422 22 00         mov ah, 0
0027   0424 27            mov b, a
0028   0425 E4            pop a
0029   0426 FD AB         swp b
0030   0428 D8            push b
0031   0429 07 95 04      call print_num
0032   042C 51 02 00      add sp, 2
0033   042F 26 5C 06      mov b, __string_0 ; "\n"
0034   0432 FD AB         swp b
0035   0434 D8            push b
0036   0435 07 51 06      call print
0037   0438 51 02 00      add sp, 2
0038   043B 26 01 00      mov b, 1
0039   043E D7            push a
0040   043F 11            mov a, b
0041   0440 26 00 00      mov b, 0
0042   0443 B0            cmp a, b
0043   0444 0E            lodflgs
0044   0445 87 08         and al, %00001000 ; <
0045   0447 B9 00         cmp al, 0
0046   0449 0E            lodflgs
0047   044A 8F 01         xor al, %00000001
0048   044C 22 00         mov ah, 0
0049   044E 27            mov b, a
0050   044F E4            pop a
0051   0450 FD AB         swp b
0052   0452 D8            push b
0053   0453 07 95 04      call print_num
0054   0456 51 02 00      add sp, 2
0055   0459 26 5C 06      mov b, __string_0 ; "\n"
0056   045C FD AB         swp b
0057   045E D8            push b
0058   045F 07 51 06      call print
0059   0462 51 02 00      add sp, 2
0060   0465 26 00 00      mov b, 0
0061   0468 D7            push a
0062   0469 11            mov a, b
0063   046A 26 01 00      mov b, 1
0064   046D B0            cmp a, b
0065   046E 0E            lodflgs
0066   046F 87 08         and al, %00001000 ; <
0067   0471 B9 00         cmp al, 0
0068   0473 0E            lodflgs
0069   0474 8F 01         xor al, %00000001
0070   0476 22 00         mov ah, 0
0071   0478 27            mov b, a
0072   0479 E4            pop a
0073   047A FD AB         swp b
0074   047C D8            push b
0075   047D 07 95 04      call print_num
0076   0480 51 02 00      add sp, 2
0077   0483 26 5C 06      mov b, __string_0 ; "\n"
0078   0486 FD AB         swp b
0079   0488 D8            push b
0080   0489 07 51 06      call print
0081   048C 51 02 00      add sp, 2
0082   048F 26 00 00      mov b, 0
0083   0492 F9            leave
0084   0493 05 0B         syscall sys_terminate_proc
0085   0495             
0086   0495             print_num:
0087   0495 D2            push bp
0088   0496 9B            mov bp, sp
0089   0497 52 05 00      sub sp, 5 ; digits
0090   049A 52 02 00      sub sp, 2 ; i
0091   049D 26 00 00      mov b, 0
0092   04A0 D7            push a
0093   04A1 11            mov a, b
0094   04A2 45 FA FF      mov [bp + -6], a ; i
0095   04A5 E4            pop a
0096   04A6             _if1_cond:
0097   04A6 2C 05 00      mov b, [bp + 5] ; num
0098   04A9 D7            push a
0099   04AA 11            mov a, b
0100   04AB 26 00 00      mov b, 0
0101   04AE B0            cmp a, b
0102   04AF 0E            lodflgs
0103   04B0 87 01         and al, %00000001 ; ==
0104   04B2 22 00         mov ah, 0
0105   04B4 27            mov b, a
0106   04B5 E4            pop a
0107   04B6 C0 00 00      cmp b, 0
0108   04B9 C6 CB 04      je _if1_exit
0109   04BC             _if1_true:
0110   04BC 26 30 00      mov b, '0'
0111   04BF DD            push bl
0112   04C0 07 2C 06      call _putchar
0113   04C3 51 01 00      add sp, 1
0114   04C6 F9            leave
0115   04C7 09            ret
0116   04C8 0A CB 04      jmp _if1_exit
0117   04CB             _if1_exit:
0118   04CB             _while2_cond:
0119   04CB 2C 05 00      mov b, [bp + 5] ; num
0120   04CE D7            push a
0121   04CF 11            mov a, b
0122   04D0 26 00 00      mov b, 0
0123   04D3 B0            cmp a, b
0124   04D4 0E            lodflgs
0125   04D5 87 03         and al, %00000011
0126   04D7 B9 00         cmp al, 0
0127   04D9 0E            lodflgs
0128   04DA 22 00         mov ah, 0
0129   04DC 27            mov b, a
0130   04DD E4            pop a
0131   04DE C0 00 00      cmp b, 0
0132   04E1 C6 32 05      je _while2_exit
0133   04E4             _while2_block:
0134   04E4 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0135   04E7 2D            mov b, d
0136   04E8 D7            push a
0137   04E9 74            mov d, b
0138   04EA DA            push d
0139   04EB 2C FA FF      mov b, [bp + -6] ; i
0140   04EE E7            pop d
0141   04EF 10 01 00      mov a, 1
0142   04F2 AC            mul a, b
0143   04F3 5A            add d, b
0144   04F4 E4            pop a
0145   04F5 DA            push d
0146   04F6 26 30 00      mov b, '0'
0147   04F9 D7            push a
0148   04FA 11            mov a, b
0149   04FB 2C 05 00      mov b, [bp + 5] ; num
0150   04FE D7            push a
0151   04FF 11            mov a, b
0152   0500 26 0A 00      mov b, 10
0153   0503 AE            div a, b
0154   0504 E4            pop a
0155   0505 54            add a, b
0156   0506 27            mov b, a
0157   0507 E4            pop a
0158   0508 E7            pop d
0159   0509 FD 3E         mov [d], bl
0160   050B 2C 05 00      mov b, [bp + 5] ; num
0161   050E D7            push a
0162   050F 11            mov a, b
0163   0510 26 0A 00      mov b, 10
0164   0513 AE            div a, b
0165   0514 FD 78         mov g, a
0166   0516 11            mov a, b
0167   0517 FD 27         mov b, g
0168   0519 E4            pop a
0169   051A D7            push a
0170   051B 11            mov a, b
0171   051C 45 05 00      mov [bp + 5], a ; num
0172   051F E4            pop a
0173   0520 2C FA FF      mov b, [bp + -6] ; i
0174   0523 D7            push a
0175   0524 11            mov a, b
0176   0525 FD 77         inc b
0177   0527 D7            push a
0178   0528 11            mov a, b
0179   0529 45 FA FF      mov [bp + -6], a ; i
0180   052C E4            pop a
0181   052D 27            mov b, a
0182   052E E4            pop a
0183   052F 0A CB 04      jmp _while2_cond
0184   0532             _while2_exit:
0185   0532             _while3_cond:
0186   0532 2C FA FF      mov b, [bp + -6] ; i
0187   0535 D7            push a
0188   0536 11            mov a, b
0189   0537 26 00 00      mov b, 0
0190   053A B0            cmp a, b
0191   053B 0E            lodflgs
0192   053C 87 03         and al, %00000011
0193   053E B9 00         cmp al, 0
0194   0540 0E            lodflgs
0195   0541 22 00         mov ah, 0
0196   0543 27            mov b, a
0197   0544 E4            pop a
0198   0545 C0 00 00      cmp b, 0
0199   0548 C6 78 05      je _while3_exit
0200   054B             _while3_block:
0201   054B 2C FA FF      mov b, [bp + -6] ; i
0202   054E D7            push a
0203   054F 11            mov a, b
0204   0550 FD 7D         dec b
0205   0552 D7            push a
0206   0553 11            mov a, b
0207   0554 45 FA FF      mov [bp + -6], a ; i
0208   0557 E4            pop a
0209   0558 27            mov b, a
0210   0559 E4            pop a
0211   055A FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0212   055D 2D            mov b, d
0213   055E D7            push a
0214   055F 74            mov d, b
0215   0560 DA            push d
0216   0561 2C FA FF      mov b, [bp + -6] ; i
0217   0564 E7            pop d
0218   0565 10 01 00      mov a, 1
0219   0568 AC            mul a, b
0220   0569 5A            add d, b
0221   056A E4            pop a
0222   056B 32            mov bl, [d]
0223   056C A7 00         mov bh, 0
0224   056E DD            push bl
0225   056F 07 2C 06      call _putchar
0226   0572 51 01 00      add sp, 1
0227   0575 0A 32 05      jmp _while3_cond
0228   0578             _while3_exit:
0229   0578 F9            leave
0230   0579 09            ret
0231   057A             
0232   057A             integer_square_root:
0233   057A D2            push bp
0234   057B 9B            mov bp, sp
0235   057C             _if4_cond:
0236   057C 2C 05 00      mov b, [bp + 5] ; n
0237   057F D7            push a
0238   0580 11            mov a, b
0239   0581 26 01 00      mov b, 1
0240   0584 B0            cmp a, b
0241   0585 0E            lodflgs
0242   0586 87 03         and al, %00000011 ; <=
0243   0588 B9 00         cmp al, 0
0244   058A 0E            lodflgs
0245   058B 8F 01         xor al, %00000001
0246   058D 22 00         mov ah, 0
0247   058F 27            mov b, a
0248   0590 E4            pop a
0249   0591 C0 00 00      cmp b, 0
0250   0594 C6 9F 05      je _if4_exit
0251   0597             _if4_true:
0252   0597 2C 05 00      mov b, [bp + 5] ; n
0253   059A F9            leave
0254   059B 09            ret
0255   059C 0A 9F 05      jmp _if4_exit
0256   059F             _if4_exit:
0257   059F 52 02 00      sub sp, 2 ; x
0258   05A2 52 02 00      sub sp, 2 ; y
0259   05A5 2C 05 00      mov b, [bp + 5] ; n
0260   05A8 D7            push a
0261   05A9 11            mov a, b
0262   05AA 45 FF FF      mov [bp + -1], a ; x
0263   05AD E4            pop a
0264   05AE 2C FF FF      mov b, [bp + -1] ; x
0265   05B1 D7            push a
0266   05B2 11            mov a, b
0267   05B3 2C 05 00      mov b, [bp + 5] ; n
0268   05B6 D7            push a
0269   05B7 11            mov a, b
0270   05B8 2C FF FF      mov b, [bp + -1] ; x
0271   05BB AE            div a, b
0272   05BC FD 78         mov g, a
0273   05BE 11            mov a, b
0274   05BF FD 27         mov b, g
0275   05C1 E4            pop a
0276   05C2 54            add a, b
0277   05C3 27            mov b, a
0278   05C4 E4            pop a
0279   05C5 D7            push a
0280   05C6 11            mov a, b
0281   05C7 26 02 00      mov b, 2
0282   05CA AE            div a, b
0283   05CB FD 78         mov g, a
0284   05CD 11            mov a, b
0285   05CE FD 27         mov b, g
0286   05D0 E4            pop a
0287   05D1 D7            push a
0288   05D2 11            mov a, b
0289   05D3 45 FD FF      mov [bp + -3], a ; y
0290   05D6 E4            pop a
0291   05D7             _while5_cond:
0292   05D7 2C FD FF      mov b, [bp + -3] ; y
0293   05DA D7            push a
0294   05DB 11            mov a, b
0295   05DC 2C FF FF      mov b, [bp + -1] ; x
0296   05DF B0            cmp a, b
0297   05E0 0E            lodflgs
0298   05E1 87 08         and al, %00001000 ; <
0299   05E3 B9 00         cmp al, 0
0300   05E5 0E            lodflgs
0301   05E6 8F 01         xor al, %00000001
0302   05E8 22 00         mov ah, 0
0303   05EA 27            mov b, a
0304   05EB E4            pop a
0305   05EC C0 00 00      cmp b, 0
0306   05EF C6 27 06      je _while5_exit
0307   05F2             _while5_block:
0308   05F2 2C FD FF      mov b, [bp + -3] ; y
0309   05F5 D7            push a
0310   05F6 11            mov a, b
0311   05F7 45 FF FF      mov [bp + -1], a ; x
0312   05FA E4            pop a
0313   05FB 2C FF FF      mov b, [bp + -1] ; x
0314   05FE D7            push a
0315   05FF 11            mov a, b
0316   0600 2C 05 00      mov b, [bp + 5] ; n
0317   0603 D7            push a
0318   0604 11            mov a, b
0319   0605 2C FF FF      mov b, [bp + -1] ; x
0320   0608 AE            div a, b
0321   0609 FD 78         mov g, a
0322   060B 11            mov a, b
0323   060C FD 27         mov b, g
0324   060E E4            pop a
0325   060F 54            add a, b
0326   0610 27            mov b, a
0327   0611 E4            pop a
0328   0612 D7            push a
0329   0613 11            mov a, b
0330   0614 26 02 00      mov b, 2
0331   0617 AE            div a, b
0332   0618 FD 78         mov g, a
0333   061A 11            mov a, b
0334   061B FD 27         mov b, g
0335   061D E4            pop a
0336   061E D7            push a
0337   061F 11            mov a, b
0338   0620 45 FD FF      mov [bp + -3], a ; y
0339   0623 E4            pop a
0340   0624 0A D7 05      jmp _while5_cond
0341   0627             _while5_exit:
0342   0627 2C FF FF      mov b, [bp + -1] ; x
0343   062A F9            leave
0344   062B 09            ret
0345   062C             
0346   062C             _putchar:
0347   062C D2            push bp
0348   062D 9B            mov bp, sp
0349   062E             
0350   062E             ; --- BEGIN INLINE ASM BLOCK
0351   062E 20 05 00      mov al, [bp + 5]
0352   0631 23            mov ah, al
0353   0632 07 70 07      call putchar
0354   0635             ; --- END INLINE ASM BLOCK
0355   0635             
0356   0635 F9            leave
0357   0636 09            ret
0358   0637             
0359   0637             scann:
0360   0637 D2            push bp
0361   0638 9B            mov bp, sp
0362   0639 52 02 00      sub sp, 2 ; m
0363   063C             
0364   063C             ; --- BEGIN INLINE ASM BLOCK
0365   063C 07 A8 09      call scan_u16d
0366   063F 45 FF FF      mov [bp + -1], a
0367   0642             ; --- END INLINE ASM BLOCK
0368   0642             
0369   0642 FA 05 00      lea d, [bp + 5] ; n
0370   0645 2A            mov b, [d]
0371   0646 D8            push b
0372   0647 2C FF FF      mov b, [bp + -1] ; m
0373   064A E7            pop d
0374   064B D7            push a
0375   064C 11            mov a, b
0376   064D 43            mov [d], a
0377   064E E4            pop a
0378   064F F9            leave
0379   0650 09            ret
0380   0651             
0381   0651             print:
0382   0651 D2            push bp
0383   0652 9B            mov bp, sp
0384   0653             
0385   0653             ; --- BEGIN INLINE ASM BLOCK
0386   0653 17 05 00      mov a, [bp + 5]
0387   0656 3C            mov d, a
0388   0657 07 AA 08      call puts
0389   065A             ; --- END INLINE ASM BLOCK
0390   065A             
0391   065A F9            leave
0392   065B 09            ret
0393   065C             ; --- END TEXT BLOCK
0394   065C             
0395   065C             ; --- BEGIN DATA BLOCK
0396   065C 0A 00       __string_0: .db "\n", 0
0397   065E             ; --- END DATA BLOCK
0398   065E             
0399   065E             ; --- BEGIN INCLUDE BLOCK
0400   065E             .include "lib/stdio.asm"
0001+  065E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  065E             ; stdio.s
0003+  065E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  065E             .include "lib/string.asm"
0001++ 065E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 065E             ; string.s
0003++ 065E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 065E             
0005++ 065E             
0006++ 065E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 065E             ; strrev
0008++ 065E             ; reverse a string
0009++ 065E             ; D = string address
0010++ 065E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 065E             ; 01234
0012++ 065E             strrev:
0013++ 065E 4B          	pusha
0014++ 065F 07 A5 06    	call strlen	; length in C
0015++ 0662 12          	mov a, c
0016++ 0663 AF 01 00    	cmp a, 1
0017++ 0666 D0 80 06    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0669 7D          	dec a
0019++ 066A FD 4E       	mov si, d	; beginning of string
0020++ 066C FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 066E 59          	add d, a	; end of string
0022++ 066F 12          	mov a, c
0023++ 0670 FD 9B       	shr a		; divide by 2
0024++ 0672 39          	mov c, a	; C now counts the steps
0025++ 0673             strrev_L0:
0026++ 0673 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0674 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0675 3E          	mov [d], al	; store left char into right side
0029++ 0676 1B          	mov al, bl
0030++ 0677 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0678 7E          	dec c
0032++ 0679 7F          	dec d
0033++ 067A C2 00 00    	cmp c, 0
0034++ 067D C7 73 06    	jne strrev_L0
0035++ 0680             strrev_end:
0036++ 0680 4C          	popa
0037++ 0681 09          	ret
0038++ 0682             	
0039++ 0682             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0682             ; strchr
0041++ 0682             ; search string in D for char in AL
0042++ 0682             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0682             strchr:
0044++ 0682             strchr_L0:
0045++ 0682 32          	mov bl, [d]
0046++ 0683 C1 00       	cmp bl, 0
0047++ 0685 C6 90 06    	je strchr_end
0048++ 0688 BA          	cmp al, bl
0049++ 0689 C6 90 06    	je strchr_end
0050++ 068C 79          	inc d
0051++ 068D 0A 82 06    	jmp strchr_L0
0052++ 0690             strchr_end:
0053++ 0690 1B          	mov al, bl
0054++ 0691 09          	ret
0055++ 0692             
0056++ 0692             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0692             ; strstr
0058++ 0692             ; find sub-string
0059++ 0692             ; str1 in SI
0060++ 0692             ; str2 in DI
0061++ 0692             ; SI points to end of source string
0062++ 0692             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0692             strstr:
0064++ 0692 DB          	push al
0065++ 0693 DA          	push d
0066++ 0694 E3          	push di
0067++ 0695             strstr_loop:
0068++ 0695 F3          	cmpsb					; compare a byte of the strings
0069++ 0696 C7 A1 06    	jne strstr_ret
0070++ 0699 FC 00 00    	lea d, [di + 0]
0071++ 069C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 069E C7 95 06    	jne strstr_loop				; equal chars but not at end
0073++ 06A1             strstr_ret:
0074++ 06A1 F0          	pop di
0075++ 06A2 E7          	pop d
0076++ 06A3 E8          	pop al
0077++ 06A4 09          	ret
0078++ 06A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 06A5             ; length of null terminated string
0080++ 06A5             ; result in C
0081++ 06A5             ; pointer in D
0082++ 06A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 06A5             strlen:
0084++ 06A5 DA          	push d
0085++ 06A6 38 00 00    	mov c, 0
0086++ 06A9             strlen_L1:
0087++ 06A9 BD 00       	cmp byte [d], 0
0088++ 06AB C6 B3 06    	je strlen_ret
0089++ 06AE 79          	inc d
0090++ 06AF 78          	inc c
0091++ 06B0 0A A9 06    	jmp strlen_L1
0092++ 06B3             strlen_ret:
0093++ 06B3 E7          	pop d
0094++ 06B4 09          	ret
0095++ 06B5             
0096++ 06B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 06B5             ; STRCMP
0098++ 06B5             ; compare two strings
0099++ 06B5             ; str1 in SI
0100++ 06B5             ; str2 in DI
0101++ 06B5             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 06B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 06B5             strcmp:
0104++ 06B5 DB          	push al
0105++ 06B6 DA          	push d
0106++ 06B7 E3          	push di
0107++ 06B8 E2          	push si
0108++ 06B9             strcmp_loop:
0109++ 06B9 F3          	cmpsb					; compare a byte of the strings
0110++ 06BA C7 C5 06    	jne strcmp_ret
0111++ 06BD FB FF FF    	lea d, [si +- 1]
0112++ 06C0 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 06C2 C7 B9 06    	jne strcmp_loop				; equal chars but not at end
0114++ 06C5             strcmp_ret:
0115++ 06C5 EF          	pop si
0116++ 06C6 F0          	pop di
0117++ 06C7 E7          	pop d
0118++ 06C8 E8          	pop al
0119++ 06C9 09          	ret
0120++ 06CA             
0121++ 06CA             
0122++ 06CA             ; STRCPY
0123++ 06CA             ; copy null terminated string from SI to DI
0124++ 06CA             ; source in SI
0125++ 06CA             ; destination in DI
0126++ 06CA             strcpy:
0127++ 06CA E2          	push si
0128++ 06CB E3          	push di
0129++ 06CC DB          	push al
0130++ 06CD             strcpy_L1:
0131++ 06CD F6          	lodsb
0132++ 06CE F7          	stosb
0133++ 06CF B9 00       	cmp al, 0
0134++ 06D1 C7 CD 06    	jne strcpy_L1
0135++ 06D4             strcpy_end:
0136++ 06D4 E8          	pop al
0137++ 06D5 F0          	pop di
0138++ 06D6 EF          	pop si
0139++ 06D7 09          	ret
0140++ 06D8             
0141++ 06D8             ; STRCAT
0142++ 06D8             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 06D8             ; source in SI
0144++ 06D8             ; destination in DI
0145++ 06D8             strcat:
0146++ 06D8 E2          	push si
0147++ 06D9 E3          	push di
0148++ 06DA D7          	push a
0149++ 06DB DA          	push d
0150++ 06DC 50          	mov a, di
0151++ 06DD 3C          	mov d, a
0152++ 06DE             strcat_goto_end_L1:
0153++ 06DE BD 00       	cmp byte[d], 0
0154++ 06E0 C6 E7 06    	je strcat_start
0155++ 06E3 79          	inc d
0156++ 06E4 0A DE 06    	jmp strcat_goto_end_L1
0157++ 06E7             strcat_start:
0158++ 06E7 FD 50       	mov di, d
0159++ 06E9             strcat_L1:
0160++ 06E9 F6          	lodsb
0161++ 06EA F7          	stosb
0162++ 06EB B9 00       	cmp al, 0
0163++ 06ED C7 E9 06    	jne strcat_L1
0164++ 06F0             strcat_end:
0165++ 06F0 E7          	pop d
0166++ 06F1 E4          	pop a
0167++ 06F2 F0          	pop di
0168++ 06F3 EF          	pop si
0169++ 06F4 09          	ret
0005+  06F5             
0006+  06F5 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  06F9 34 35 36 37 
0006+  06FD 38 39 41 42 
0006+  0701 43 44 45 46 
0007+  0705 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0709 1B 5B 48 00 
0008+  070D             
0009+  070D 01 00       table_power:.dw 1
0010+  070F 0A 00       			.dw 10
0011+  0711 64 00       			.dw 100
0012+  0713 E8 03       			.dw 1000
0013+  0715 10 27       			.dw 10000
0014+  0717             
0015+  0717             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0717             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0717             ; ASCII in BL
0018+  0717             ; result in AL
0019+  0717             ; ascii for F = 0100 0110
0020+  0717             ; ascii for 9 = 0011 1001
0021+  0717             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0717             hex_ascii_encode:
0023+  0717 1B          	mov al, bl
0024+  0718 93 40       	test al, $40				; test if letter or number
0025+  071A C7 20 07    	jnz hex_letter
0026+  071D 87 0F       	and al, $0F				; get number
0027+  071F 09          	ret
0028+  0720             hex_letter:
0029+  0720 87 0F       	and al, $0F				; get letter
0030+  0722 6A 09       	add al, 9
0031+  0724 09          	ret
0032+  0725             
0033+  0725             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0725             ; ATOI
0035+  0725             ; 2 letter hex string in B
0036+  0725             ; 8bit integer returned in AL
0037+  0725             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0725             atoi:
0039+  0725 D8          	push b
0040+  0726 07 17 07    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0729 30          	mov bl, bh
0042+  072A DB          	push al					; save a
0043+  072B 07 17 07    	call hex_ascii_encode
0044+  072E EA          	pop bl	
0045+  072F FD 9E 04    	shl al, 4
0046+  0732 8C          	or al, bl
0047+  0733 E5          	pop b
0048+  0734 09          	ret	
0049+  0735             
0050+  0735             
0051+  0735             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0735             ; printf
0053+  0735             ; no need for explanations!
0054+  0735             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0735             printf:
0056+  0735 09          	ret
0057+  0736             
0058+  0736             
0059+  0736             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0736             ; scanf
0061+  0736             ; no need for explanations!
0062+  0736             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0736             scanf:
0064+  0736 09          	ret
0065+  0737             
0066+  0737             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0737             ; ITOA
0068+  0737             ; 8bit value in BL
0069+  0737             ; 2 byte ASCII result in A
0070+  0737             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0737             itoa:
0072+  0737 DA          	push d
0073+  0738 D8          	push b
0074+  0739 A7 00       	mov bh, 0
0075+  073B FD A4 04    	shr bl, 4	
0076+  073E 74          	mov d, b
0077+  073F 1F F5 06    	mov al, [d + s_hex_digits]
0078+  0742 23          	mov ah, al
0079+  0743             	
0080+  0743 E5          	pop b
0081+  0744 D8          	push b
0082+  0745 A7 00       	mov bh, 0
0083+  0747 FD 87 0F    	and bl, $0F
0084+  074A 74          	mov d, b
0085+  074B 1F F5 06    	mov al, [d + s_hex_digits]
0086+  074E E5          	pop b
0087+  074F E7          	pop d
0088+  0750 09          	ret
0089+  0751             
0090+  0751             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0751             ; HEX STRING TO BINARY
0092+  0751             ; di = destination address
0093+  0751             ; si = source
0094+  0751             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0751             hex_to_int:
0096+  0751             hex_to_int_L1:
0097+  0751 F6          	lodsb					; load from [SI] to AL
0098+  0752 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0754 C6 61 07    	jz hex_to_int_ret
0100+  0757 36          	mov bh, al
0101+  0758 F6          	lodsb
0102+  0759 2F          	mov bl, al
0103+  075A 07 25 07    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  075D F7          	stosb					; store AL to [DI]
0105+  075E 0A 51 07    	jmp hex_to_int_L1
0106+  0761             hex_to_int_ret:
0107+  0761 09          	ret		
0108+  0762             
0109+  0762             
0110+  0762             
0111+  0762             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0762             ; GETCHAR
0113+  0762             ; char in ah
0114+  0762             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0762             getchar:
0116+  0762 DB          	push al
0117+  0763             getchar_retry:
0118+  0763 FD 0C       	sti
0119+  0765 19 01       	mov al, 1
0120+  0767 05 03       	syscall sys_io			; receive in AH
0121+  0769 B9 00       	cmp al, 0			; check if any char was receive
0122+  076B C6 63 07    	je getchar_retry
0123+  076E E8          	pop al
0124+  076F 09          	ret
0125+  0770             
0126+  0770             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0770             ; PUTCHAR
0128+  0770             ; char in ah
0129+  0770             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0770             putchar:
0131+  0770 D7          	push a
0132+  0771 19 00       	mov al, 0
0133+  0773 05 03       	syscall sys_io			; char in AH
0134+  0775 E4          	pop a
0135+  0776 09          	ret
0136+  0777             
0137+  0777             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0777             ;; INPUT A STRING
0139+  0777             ;; terminates with null
0140+  0777             ;; pointer in D
0141+  0777             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0777             gets:
0143+  0777 D7          	push a
0144+  0778 DA          	push d
0145+  0779             gets_loop:
0146+  0779 FD 0C       	sti
0147+  077B 19 01       	mov al, 1
0148+  077D 05 03       	syscall sys_io			; receive in AH
0149+  077F B9 00       	cmp al, 0				; check error code (AL)
0150+  0781 C6 79 07    	je gets_loop			; if no char received, retry
0151+  0784             
0152+  0784 76 1B       	cmp ah, 27
0153+  0786 C6 A7 07    	je gets_telnet_escape
0154+  0789 76 0A       	cmp ah, $0A				; LF
0155+  078B C6 00 08    	je gets_end
0156+  078E 76 0D       	cmp ah, $0D				; CR
0157+  0790 C6 00 08    	je gets_end
0158+  0793 76 5C       	cmp ah, $5C				; '\\'
0159+  0795 C6 D7 07    	je gets_escape
0160+  0798             	
0161+  0798 76 08       	cmp ah, $08			; check for backspace
0162+  079A C6 A3 07    	je gets_backspace
0163+  079D             
0164+  079D 1A          	mov al, ah
0165+  079E 3E          	mov [d], al
0166+  079F 79          	inc d
0167+  07A0 0A 79 07    	jmp gets_loop
0168+  07A3             gets_backspace:
0169+  07A3 7F          	dec d
0170+  07A4 0A 79 07    	jmp gets_loop
0171+  07A7             gets_telnet_escape:
0172+  07A7 FD 0C       	sti
0173+  07A9 19 01       	mov al, 1
0174+  07AB 05 03       	syscall sys_io				; receive in AH without echo
0175+  07AD B9 00       	cmp al, 0					; check error code (AL)
0176+  07AF C6 A7 07    	je gets_telnet_escape		; if no char received, retry
0177+  07B2 76 5B       	cmp ah, '['
0178+  07B4 C7 79 07    	jne gets_loop
0179+  07B7             gets_telnet_escape_phase2:
0180+  07B7 FD 0C       	sti
0181+  07B9 19 01       	mov al, 1
0182+  07BB 05 03       	syscall sys_io					; receive in AH without echo
0183+  07BD B9 00       	cmp al, 0						; check error code (AL)
0184+  07BF C6 B7 07    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  07C2 76 44       	cmp ah, 'D'
0186+  07C4 C6 CF 07    	je gets_left_arrow
0187+  07C7 76 43       	cmp ah, 'C'
0188+  07C9 C6 D3 07    	je gets_right_arrow
0189+  07CC 0A 79 07    	jmp gets_loop
0190+  07CF             gets_left_arrow:
0191+  07CF 7F          	dec d
0192+  07D0 0A 79 07    	jmp gets_loop
0193+  07D3             gets_right_arrow:
0194+  07D3 79          	inc d
0195+  07D4 0A 79 07    	jmp gets_loop
0196+  07D7             gets_escape:
0197+  07D7 FD 0C       	sti
0198+  07D9 19 01       	mov al, 1
0199+  07DB 05 03       	syscall sys_io			; receive in AH
0200+  07DD B9 00       	cmp al, 0				; check error code (AL)
0201+  07DF C6 D7 07    	je gets_escape			; if no char received, retry
0202+  07E2 76 6E       	cmp ah, 'n'
0203+  07E4 C6 F2 07    	je gets_LF
0204+  07E7 76 72       	cmp ah, 'r'
0205+  07E9 C6 F9 07    	je gets_CR
0206+  07EC 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  07ED 3E          	mov [d], al
0208+  07EE 79          	inc d
0209+  07EF 0A 79 07    	jmp gets_loop
0210+  07F2             gets_LF:
0211+  07F2 19 0A       	mov al, $0A
0212+  07F4 3E          	mov [d], al
0213+  07F5 79          	inc d
0214+  07F6 0A 79 07    	jmp gets_loop
0215+  07F9             gets_CR:
0216+  07F9 19 0D       	mov al, $0D
0217+  07FB 3E          	mov [d], al
0218+  07FC 79          	inc d
0219+  07FD 0A 79 07    	jmp gets_loop
0220+  0800             gets_end:
0221+  0800 19 00       	mov al, 0
0222+  0802 3E          	mov [d], al				; terminate string
0223+  0803 E7          	pop d
0224+  0804 E4          	pop a
0225+  0805 09          	ret
0226+  0806             
0227+  0806             
0228+  0806             
0229+  0806             
0230+  0806             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0806             ;; INPUT TEXT
0232+  0806             ;; terminated with CTRL+D
0233+  0806             ;; pointer in D
0234+  0806             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0806             gettxt:
0236+  0806 D7          	push a
0237+  0807 DA          	push d
0238+  0808             gettxt_loop:
0239+  0808 19 01       	mov al, 1
0240+  080A 05 03       	syscall sys_io			; receive in AH
0241+  080C B9 00       	cmp al, 0				; check error code (AL)
0242+  080E C6 08 08    	je gettxt_loop		; if no char received, retry
0243+  0811 76 04       	cmp ah, 4			; EOT
0244+  0813 C6 51 08    	je gettxt_end
0245+  0816 76 08       	cmp ah, $08			; check for backspace
0246+  0818 C6 4D 08    	je gettxt_backspace
0247+  081B 76 5C       	cmp ah, $5C				; '\\'
0248+  081D C6 26 08    	je gettxt_escape
0249+  0820 1A          	mov al, ah
0250+  0821 3E          	mov [d], al
0251+  0822 79          	inc d
0252+  0823 0A 08 08    	jmp gettxt_loop
0253+  0826             gettxt_escape:
0254+  0826 19 01       	mov al, 1
0255+  0828 05 03       	syscall sys_io			; receive in AH
0256+  082A B9 00       	cmp al, 0				; check error code (AL)
0257+  082C C6 26 08    	je gettxt_escape		; if no char received, retry
0258+  082F 76 6E       	cmp ah, 'n'
0259+  0831 C6 3F 08    	je gettxt_LF
0260+  0834 76 72       	cmp ah, 'r'
0261+  0836 C6 46 08    	je gettxt_CR
0262+  0839 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  083A 3E          	mov [d], al
0264+  083B 79          	inc d
0265+  083C 0A 08 08    	jmp gettxt_loop
0266+  083F             gettxt_LF:
0267+  083F 19 0A       	mov al, $0A
0268+  0841 3E          	mov [d], al
0269+  0842 79          	inc d
0270+  0843 0A 08 08    	jmp gettxt_loop
0271+  0846             gettxt_CR:
0272+  0846 19 0D       	mov al, $0D
0273+  0848 3E          	mov [d], al
0274+  0849 79          	inc d
0275+  084A 0A 08 08    	jmp gettxt_loop
0276+  084D             gettxt_backspace:
0277+  084D 7F          	dec d
0278+  084E 0A 08 08    	jmp gettxt_loop
0279+  0851             gettxt_end:
0280+  0851 19 00       	mov al, 0
0281+  0853 3E          	mov [d], al				; terminate string
0282+  0854 E7          	pop d
0283+  0855 E4          	pop a
0284+  0856 09          	ret
0285+  0857             
0286+  0857             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0857             ; PRINT NEW LINE
0288+  0857             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0857             printnl:
0290+  0857 D7          	push a
0291+  0858 10 00 0A    	mov a, $0A00
0292+  085B 05 03       	syscall sys_io
0293+  085D 10 00 0D    	mov a, $0D00
0294+  0860 05 03       	syscall sys_io
0295+  0862 E4          	pop a
0296+  0863 09          	ret
0297+  0864             
0298+  0864             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0864             ; strtoint
0300+  0864             ; 4 digit hex string number in d
0301+  0864             ; integer returned in A
0302+  0864             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0864             strtointx:
0304+  0864 D8          	push b
0305+  0865 32          	mov bl, [d]
0306+  0866 37          	mov bh, bl
0307+  0867 33 01 00    	mov bl, [d + 1]
0308+  086A 07 25 07    	call atoi				; convert to int in AL
0309+  086D 23          	mov ah, al				; move to AH
0310+  086E 33 02 00    	mov bl, [d + 2]
0311+  0871 37          	mov bh, bl
0312+  0872 33 03 00    	mov bl, [d + 3]
0313+  0875 07 25 07    	call atoi				; convert to int in AL
0314+  0878 E5          	pop b
0315+  0879 09          	ret
0316+  087A             
0317+  087A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  087A             ; strtoint
0319+  087A             ; 5 digit base10 string number in d
0320+  087A             ; integer returned in A
0321+  087A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  087A             strtoint:
0323+  087A E2          	push si
0324+  087B D8          	push b
0325+  087C D9          	push c
0326+  087D DA          	push d
0327+  087E 07 A5 06    	call strlen			; get string length in C
0328+  0881 7E          	dec c
0329+  0882 FD 4E       	mov si, d
0330+  0884 12          	mov a, c
0331+  0885 FD 99       	shl a
0332+  0887 3B 0D 07    	mov d, table_power
0333+  088A 59          	add d, a
0334+  088B 38 00 00    	mov c, 0
0335+  088E             strtoint_L0:
0336+  088E F6          	lodsb			; load ASCII to al
0337+  088F B9 00       	cmp al, 0
0338+  0891 C6 A4 08    	je strtoint_end
0339+  0894 6F 30       	sub al, $30		; make into integer
0340+  0896 22 00       	mov ah, 0
0341+  0898 2A          	mov b, [d]
0342+  0899 AC          	mul a, b			; result in B since it fits in 16bits
0343+  089A 11          	mov a, b
0344+  089B 28          	mov b, c
0345+  089C 54          	add a, b
0346+  089D 39          	mov c, a
0347+  089E 63 02 00    	sub d, 2
0348+  08A1 0A 8E 08    	jmp strtoint_L0
0349+  08A4             strtoint_end:
0350+  08A4 12          	mov a, c
0351+  08A5 E7          	pop d
0352+  08A6 E6          	pop c
0353+  08A7 E5          	pop b
0354+  08A8 EF          	pop si
0355+  08A9 09          	ret
0356+  08AA             
0357+  08AA             
0358+  08AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  08AA             ; PRINT NULL TERMINATED STRING
0360+  08AA             ; pointer in D
0361+  08AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  08AA             puts:
0363+  08AA D7          	push a
0364+  08AB DA          	push d
0365+  08AC             puts_L1:
0366+  08AC 1E          	mov al, [d]
0367+  08AD B9 00       	cmp al, 0
0368+  08AF C6 BB 08    	jz puts_END
0369+  08B2 23          	mov ah, al
0370+  08B3 19 00       	mov al, 0
0371+  08B5 05 03       	syscall sys_io
0372+  08B7 79          	inc d
0373+  08B8 0A AC 08    	jmp puts_L1
0374+  08BB             puts_END:
0375+  08BB E7          	pop d
0376+  08BC E4          	pop a
0377+  08BD 09          	ret
0378+  08BE             
0379+  08BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  08BE             ; PRINT N SIZE STRING
0381+  08BE             ; pointer in D
0382+  08BE             ; size in C
0383+  08BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  08BE             putsn:
0385+  08BE DB          	push al
0386+  08BF DA          	push d
0387+  08C0 D9          	push c
0388+  08C1             putsn_L0:
0389+  08C1 1E          	mov al, [d]
0390+  08C2 23          	mov ah, al
0391+  08C3 19 00       	mov al, 0
0392+  08C5 05 03       	syscall sys_io
0393+  08C7 79          	inc d
0394+  08C8 7E          	dec c	
0395+  08C9 C2 00 00    	cmp c, 0
0396+  08CC C7 C1 08    	jne putsn_L0
0397+  08CF             putsn_end:
0398+  08CF E6          	pop c
0399+  08D0 E7          	pop d
0400+  08D1 E8          	pop al
0401+  08D2 09          	ret
0402+  08D3             
0403+  08D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  08D3             ; print 16bit decimal number
0405+  08D3             ; input number in A
0406+  08D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  08D3             print_u16d:
0408+  08D3 D7          	push a
0409+  08D4 D8          	push b
0410+  08D5 26 10 27    	mov b, 10000
0411+  08D8 AE          	div a, b			; get 10000 coeff.
0412+  08D9 07 FF 08    	call print_number
0413+  08DC 11          	mov a, b
0414+  08DD 26 E8 03    	mov b, 1000
0415+  08E0 AE          	div a, b			; get 10000 coeff.
0416+  08E1 07 FF 08    	call print_number
0417+  08E4 11          	mov a, b
0418+  08E5 26 64 00    	mov b, 100
0419+  08E8 AE          	div a, b
0420+  08E9 07 FF 08    	call print_number
0421+  08EC 11          	mov a, b
0422+  08ED 26 0A 00    	mov b, 10
0423+  08F0 AE          	div a, b
0424+  08F1 07 FF 08    	call print_number
0425+  08F4 11          	mov a, b
0426+  08F5 6A 30       	add al, $30
0427+  08F7 23          	mov ah, al
0428+  08F8 19 00       	mov al, 0
0429+  08FA 05 03       	syscall sys_io	; print coeff
0430+  08FC E5          	pop b
0431+  08FD E4          	pop a
0432+  08FE 09          	ret
0433+  08FF             
0434+  08FF             
0435+  08FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  08FF             ; if A == 0, print space
0437+  08FF             ; else print A
0438+  08FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  08FF             print_number:
0440+  08FF 6A 30       	add al, $30
0441+  0901 23          	mov ah, al
0442+  0902 07 70 07    	call putchar
0443+  0905 09          	ret
0444+  0906             
0445+  0906             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0906             ; PRINT 16BIT HEX INTEGER
0447+  0906             ; integer value in reg B
0448+  0906             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0906             print_u16x:
0450+  0906 D7          	push a
0451+  0907 D8          	push b
0452+  0908 DD          	push bl
0453+  0909 30          	mov bl, bh
0454+  090A 07 37 07    	call itoa				; convert bh to char in A
0455+  090D 2F          	mov bl, al				; save al
0456+  090E 19 00       	mov al, 0
0457+  0910 05 03       	syscall sys_io				; display AH
0458+  0912 24          	mov ah, bl				; retrieve al
0459+  0913 19 00       	mov al, 0
0460+  0915 05 03       	syscall sys_io				; display AL
0461+  0917             
0462+  0917 EA          	pop bl
0463+  0918 07 37 07    	call itoa				; convert bh to char in A
0464+  091B 2F          	mov bl, al				; save al
0465+  091C 19 00       	mov al, 0
0466+  091E 05 03       	syscall sys_io				; display AH
0467+  0920 24          	mov ah, bl				; retrieve al
0468+  0921 19 00       	mov al, 0
0469+  0923 05 03       	syscall sys_io				; display AL
0470+  0925             
0471+  0925 E5          	pop b
0472+  0926 E4          	pop a
0473+  0927 09          	ret
0474+  0928             
0475+  0928             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0928             ; INPUT 16BIT HEX INTEGER
0477+  0928             ; read 16bit integer into A
0478+  0928             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0928             scan_u16x:
0480+  0928 F8 10 00    	enter 16
0481+  092B D8          	push b
0482+  092C DA          	push d
0483+  092D             
0484+  092D FA F1 FF    	lea d, [bp + -15]
0485+  0930 07 77 07    	call gets				; get number
0486+  0933             
0487+  0933 32          	mov bl, [d]
0488+  0934 37          	mov bh, bl
0489+  0935 33 01 00    	mov bl, [d + 1]
0490+  0938 07 25 07    	call atoi				; convert to int in AL
0491+  093B 23          	mov ah, al				; move to AH
0492+  093C             
0493+  093C 33 02 00    	mov bl, [d + 2]
0494+  093F 37          	mov bh, bl
0495+  0940 33 03 00    	mov bl, [d + 3]
0496+  0943 07 25 07    	call atoi				; convert to int in AL
0497+  0946             
0498+  0946 E7          	pop d
0499+  0947 E5          	pop b
0500+  0948 F9          	leave
0501+  0949 09          	ret
0502+  094A             
0503+  094A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  094A             ; PRINT 8bit HEX INTEGER
0505+  094A             ; integer value in reg bl
0506+  094A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  094A             print_u8x:
0508+  094A D7          	push a
0509+  094B DD          	push bl
0510+  094C             
0511+  094C 07 37 07    	call itoa				; convert bl to char in A
0512+  094F 2F          	mov bl, al				; save al
0513+  0950 19 00       	mov al, 0
0514+  0952 05 03       	syscall sys_io				; display AH
0515+  0954 24          	mov ah, bl				; retrieve al
0516+  0955 19 00       	mov al, 0
0517+  0957 05 03       	syscall sys_io				; display AL
0518+  0959             
0519+  0959 EA          	pop bl
0520+  095A E4          	pop a
0521+  095B 09          	ret
0522+  095C             
0523+  095C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  095C             ; print 8bit decimal unsigned number
0525+  095C             ; input number in AL
0526+  095C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  095C             print_u8d:
0528+  095C D7          	push a
0529+  095D D8          	push b
0530+  095E             
0531+  095E 22 00       	mov ah, 0
0532+  0960 26 64 00    	mov b, 100
0533+  0963 AE          	div a, b
0534+  0964 D8          	push b			; save remainder
0535+  0965 B9 00       	cmp al, 0
0536+  0967 C6 71 09    	je skip100
0537+  096A 6A 30       	add al, $30
0538+  096C 23          	mov ah, al
0539+  096D 19 00       	mov al, 0
0540+  096F 05 03       	syscall sys_io	; print coeff
0541+  0971             skip100:
0542+  0971 E4          	pop a
0543+  0972 22 00       	mov ah, 0
0544+  0974 26 0A 00    	mov b, 10
0545+  0977 AE          	div a, b
0546+  0978 D8          	push b			; save remainder
0547+  0979 B9 00       	cmp al, 0
0548+  097B C6 85 09    	je skip10
0549+  097E 6A 30       	add al, $30
0550+  0980 23          	mov ah, al
0551+  0981 19 00       	mov al, 0
0552+  0983 05 03       	syscall sys_io	; print coeff
0553+  0985             skip10:
0554+  0985 E4          	pop a
0555+  0986 1B          	mov al, bl
0556+  0987 6A 30       	add al, $30
0557+  0989 23          	mov ah, al
0558+  098A 19 00       	mov al, 0
0559+  098C 05 03       	syscall sys_io	; print coeff
0560+  098E E5          	pop b
0561+  098F E4          	pop a
0562+  0990 09          	ret
0563+  0991             
0564+  0991             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0991             ; INPUT 8BIT HEX INTEGER
0566+  0991             ; read 8bit integer into AL
0567+  0991             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0991             scan_u8x:
0569+  0991 F8 04 00    	enter 4
0570+  0994 D8          	push b
0571+  0995 DA          	push d
0572+  0996             
0573+  0996 FA FD FF    	lea d, [bp + -3]
0574+  0999 07 77 07    	call gets				; get number
0575+  099C             
0576+  099C 32          	mov bl, [d]
0577+  099D 37          	mov bh, bl
0578+  099E 33 01 00    	mov bl, [d + 1]
0579+  09A1 07 25 07    	call atoi				; convert to int in AL
0580+  09A4             
0581+  09A4 E7          	pop d
0582+  09A5 E5          	pop b
0583+  09A6 F9          	leave
0584+  09A7 09          	ret
0585+  09A8             
0586+  09A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  09A8             ; input decimal number
0588+  09A8             ; result in A
0589+  09A8             ; 655'\0'
0590+  09A8             ; low--------high
0591+  09A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  09A8             scan_u16d:
0593+  09A8 F8 08 00    	enter 8
0594+  09AB E2          	push si
0595+  09AC D8          	push b
0596+  09AD D9          	push c
0597+  09AE DA          	push d
0598+  09AF FA F9 FF    	lea d, [bp +- 7]
0599+  09B2 07 77 07    	call gets
0600+  09B5 07 A5 06    	call strlen			; get string length in C
0601+  09B8 7E          	dec c
0602+  09B9 FD 4E       	mov si, d
0603+  09BB 12          	mov a, c
0604+  09BC FD 99       	shl a
0605+  09BE 3B 0D 07    	mov d, table_power
0606+  09C1 59          	add d, a
0607+  09C2 38 00 00    	mov c, 0
0608+  09C5             mul_loop:
0609+  09C5 F6          	lodsb			; load ASCII to al
0610+  09C6 B9 00       	cmp al, 0
0611+  09C8 C6 DB 09    	je mul_exit
0612+  09CB 6F 30       	sub al, $30		; make into integer
0613+  09CD 22 00       	mov ah, 0
0614+  09CF 2A          	mov b, [d]
0615+  09D0 AC          	mul a, b			; result in B since it fits in 16bits
0616+  09D1 11          	mov a, b
0617+  09D2 28          	mov b, c
0618+  09D3 54          	add a, b
0619+  09D4 39          	mov c, a
0620+  09D5 63 02 00    	sub d, 2
0621+  09D8 0A C5 09    	jmp mul_loop
0622+  09DB             mul_exit:
0623+  09DB 12          	mov a, c
0624+  09DC E7          	pop d
0625+  09DD E6          	pop c
0626+  09DE E5          	pop b
0627+  09DF EF          	pop si
0628+  09E0 F9          	leave
0629+  09E1 09          	ret
0401   09E2             ; --- END INCLUDE BLOCK
0402   09E2             
0403   09E2             
0404   09E2             .end
tasm: Number of errors = 0
