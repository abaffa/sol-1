0001   0000             ; --- FILENAME: primes.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402             
0010   0402             ; --- BEGIN INLINE ASM BLOCK
0011   0402 14 17 05      mov a, [prompt]
0012   0405 3C            mov d, a
0013   0406 07 5F 07      call puts
0014   0409 07 5D 08      call scan_u16d
0015   040C 42 19 05      mov [top], a
0016   040F             ; --- END INLINE ASM BLOCK
0017   040F             
0018   040F 07 15 04      call primes
0019   0412 F9            leave
0020   0413 05 0B         syscall sys_terminate_proc
0021   0415             primes:
0022   0415 D2            push bp
0023   0416 9B            mov bp, sp
0024   0417 26 02 00      mov b, 2
0025   041A FD 42 01 05   mov [n], b
0026   041E             _while1_cond:
0027   041E 29 01 05      mov b, [n]
0028   0421 D7            push a
0029   0422 11            mov a, b
0030   0423 29 19 05      mov b, [top]
0031   0426 B0            cmp a, b
0032   0427 0E            lodflgs
0033   0428 87 02         and al, %00000010
0034   042A 22 00         mov ah, 0
0035   042C 27            mov b, a
0036   042D E4            pop a
0037   042E C0 00 00      cmp b, 0
0038   0431 C6 FF 04      je _while1_exit
0039   0434             _while1_block:
0040   0434 29 01 05      mov b, [n]
0041   0437 FD 42 07 05   mov [s], b
0042   043B 26 00 00      mov b, 0
0043   043E FD 42 0B 05   mov [divides], b
0044   0442 26 02 00      mov b, 2
0045   0445 FD 42 03 05   mov [i], b
0046   0449             _while2_cond:
0047   0449 29 03 05      mov b, [i]
0048   044C D7            push a
0049   044D 11            mov a, b
0050   044E 29 07 05      mov b, [s]
0051   0451 B0            cmp a, b
0052   0452 0E            lodflgs
0053   0453 87 02         and al, %00000010
0054   0455 22 00         mov ah, 0
0055   0457 27            mov b, a
0056   0458 E4            pop a
0057   0459 C0 00 00      cmp b, 0
0058   045C C6 B7 04      je _while2_exit
0059   045F             _while2_block:
0060   045F             _if3_cond:
0061   045F 29 01 05      mov b, [n]
0062   0462 D7            push a
0063   0463 11            mov a, b
0064   0464 29 03 05      mov b, [i]
0065   0467 AE            div a, b
0066   0468 E4            pop a
0067   0469 D7            push a
0068   046A 11            mov a, b
0069   046B 26 00 00      mov b, 0
0070   046E B0            cmp a, b
0071   046F 0E            lodflgs
0072   0470 87 01         and al, %00000001
0073   0472 22 00         mov ah, 0
0074   0474 27            mov b, a
0075   0475 E4            pop a
0076   0476 C0 00 00      cmp b, 0
0077   0479 C6 89 04      je _if3_exit
0078   047C             _if3_true:
0079   047C 26 01 00      mov b, 1
0080   047F FD 42 0B 05   mov [divides], b
0081   0483 0A B7 04      jmp _while2_exit
0082   0486 0A 89 04      jmp _if3_exit
0083   0489             _if3_exit:
0084   0489 29 03 05      mov b, [i]
0085   048C D7            push a
0086   048D 11            mov a, b
0087   048E 26 01 00      mov b, 1
0088   0491 54            add a, b
0089   0492 27            mov b, a
0090   0493 E4            pop a
0091   0494 FD 42 03 05   mov [i], b
0092   0498             _if4_cond:
0093   0498 29 03 05      mov b, [i]
0094   049B D7            push a
0095   049C 11            mov a, b
0096   049D 29 01 05      mov b, [n]
0097   04A0 B0            cmp a, b
0098   04A1 0E            lodflgs
0099   04A2 87 01         and al, %00000001
0100   04A4 22 00         mov ah, 0
0101   04A6 27            mov b, a
0102   04A7 E4            pop a
0103   04A8 C0 00 00      cmp b, 0
0104   04AB C6 B4 04      je _if4_exit
0105   04AE             _if4_true:
0106   04AE 0A B7 04      jmp _while2_exit
0107   04B1 0A B4 04      jmp _if4_exit
0108   04B4             _if4_exit:
0109   04B4 0A 49 04      jmp _while2_cond
0110   04B7             _while2_exit:
0111   04B7             _if5_cond:
0112   04B7 29 0B 05      mov b, [divides]
0113   04BA D7            push a
0114   04BB 11            mov a, b
0115   04BC 26 00 00      mov b, 0
0116   04BF B0            cmp a, b
0117   04C0 0E            lodflgs
0118   04C1 87 01         and al, %00000001
0119   04C3 22 00         mov ah, 0
0120   04C5 27            mov b, a
0121   04C6 E4            pop a
0122   04C7 C0 00 00      cmp b, 0
0123   04CA C6 ED 04      je _if5_exit
0124   04CD             _if5_true:
0125   04CD 29 09 05      mov b, [count]
0126   04D0 D7            push a
0127   04D1 11            mov a, b
0128   04D2 26 01 00      mov b, 1
0129   04D5 54            add a, b
0130   04D6 27            mov b, a
0131   04D7 E4            pop a
0132   04D8 FD 42 09 05   mov [count], b
0133   04DC             
0134   04DC             ; --- BEGIN INLINE ASM BLOCK
0135   04DC 14 01 05      mov a, [n]
0136   04DF 07 88 07      call print_u16d
0137   04E2 3B 0F 05      mov d, newline
0138   04E5 15            mov a, [d]
0139   04E6 3C            mov d, a
0140   04E7 07 5F 07      call puts
0141   04EA             ; --- END INLINE ASM BLOCK
0142   04EA             
0143   04EA 0A ED 04      jmp _if5_exit
0144   04ED             _if5_exit:
0145   04ED 29 01 05      mov b, [n]
0146   04F0 D7            push a
0147   04F1 11            mov a, b
0148   04F2 26 01 00      mov b, 1
0149   04F5 54            add a, b
0150   04F6 27            mov b, a
0151   04F7 E4            pop a
0152   04F8 FD 42 01 05   mov [n], b
0153   04FC 0A 1E 04      jmp _while1_cond
0154   04FF             _while1_exit:
0155   04FF F9            leave
0156   0500 09            ret
0157   0501             ; --- END TEXT BLOCK
0158   0501             
0159   0501             ; --- BEGIN DATA BLOCK
0160   0501 00 00       n: .dw 0
0161   0503 00 00       i: .dw 0
0162   0505 00 00       j: .dw 0
0163   0507 00 00       s: .dw 0
0164   0509 00 00       count: .dw 0
0165   050B 00 00       divides: .dw 0
0166   050D 0A 00       newline_data: .db "\n", 0
0167   050F 0D 05       newline: .dw newline_data
0168   0511 4D 61 78 3A prompt_data: .db "Max: ", 0
0168   0515 20 00 
0169   0517 11 05       prompt: .dw prompt_data
0170   0519 00 00       top: .dw 0
0171   051B             ; --- END DATA BLOCK
0172   051B             
0173   051B             ; --- BEGIN INCLUDE BLOCK
0174   051B             .include "lib/stdio.asm"
0001+  051B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  051B             ; stdio.s
0003+  051B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  051B             .include "lib/string.asm"
0001++ 051B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 051B             ; string.s
0003++ 051B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 051B             
0005++ 051B             
0006++ 051B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 051B             ; strrev
0008++ 051B             ; reverse a string
0009++ 051B             ; D = string address
0010++ 051B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 051B             ; 01234
0012++ 051B             strrev:
0013++ 051B 4B          	pusha
0014++ 051C 07 62 05    	call strlen	; length in C
0015++ 051F 12          	mov a, c
0016++ 0520 AF 01 00    	cmp a, 1
0017++ 0523 D0 3D 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0526 7D          	dec a
0019++ 0527 FD 4E       	mov si, d	; beginning of string
0020++ 0529 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 052B 59          	add d, a	; end of string
0022++ 052C 12          	mov a, c
0023++ 052D FD 9B       	shr a		; divide by 2
0024++ 052F 39          	mov c, a	; C now counts the steps
0025++ 0530             strrev_L0:
0026++ 0530 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0531 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0532 3E          	mov [d], al	; store left char into right side
0029++ 0533 1B          	mov al, bl
0030++ 0534 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0535 7E          	dec c
0032++ 0536 7F          	dec d
0033++ 0537 C2 00 00    	cmp c, 0
0034++ 053A C7 30 05    	jne strrev_L0
0035++ 053D             strrev_end:
0036++ 053D 4C          	popa
0037++ 053E 09          	ret
0038++ 053F             	
0039++ 053F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 053F             ; strchr
0041++ 053F             ; search string in D for char in AL
0042++ 053F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 053F             strchr:
0044++ 053F             strchr_L0:
0045++ 053F 32          	mov bl, [d]
0046++ 0540 C1 00       	cmp bl, 0
0047++ 0542 C6 4D 05    	je strchr_end
0048++ 0545 BA          	cmp al, bl
0049++ 0546 C6 4D 05    	je strchr_end
0050++ 0549 79          	inc d
0051++ 054A 0A 3F 05    	jmp strchr_L0
0052++ 054D             strchr_end:
0053++ 054D 1B          	mov al, bl
0054++ 054E 09          	ret
0055++ 054F             
0056++ 054F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 054F             ; strstr
0058++ 054F             ; find sub-string
0059++ 054F             ; str1 in SI
0060++ 054F             ; str2 in DI
0061++ 054F             ; SI points to end of source string
0062++ 054F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 054F             strstr:
0064++ 054F DB          	push al
0065++ 0550 DA          	push d
0066++ 0551 E3          	push di
0067++ 0552             strstr_loop:
0068++ 0552 F3          	cmpsb					; compare a byte of the strings
0069++ 0553 C7 5E 05    	jne strstr_ret
0070++ 0556 FC 00 00    	lea d, [di + 0]
0071++ 0559 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 055B C7 52 05    	jne strstr_loop				; equal chars but not at end
0073++ 055E             strstr_ret:
0074++ 055E F0          	pop di
0075++ 055F E7          	pop d
0076++ 0560 E8          	pop al
0077++ 0561 09          	ret
0078++ 0562             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0562             ; length of null terminated string
0080++ 0562             ; result in C
0081++ 0562             ; pointer in D
0082++ 0562             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0562             strlen:
0084++ 0562 DA          	push d
0085++ 0563 38 00 00    	mov c, 0
0086++ 0566             strlen_L1:
0087++ 0566 BD 00       	cmp byte [d], 0
0088++ 0568 C6 70 05    	je strlen_ret
0089++ 056B 79          	inc d
0090++ 056C 78          	inc c
0091++ 056D 0A 66 05    	jmp strlen_L1
0092++ 0570             strlen_ret:
0093++ 0570 E7          	pop d
0094++ 0571 09          	ret
0095++ 0572             
0096++ 0572             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0572             ; STRCMP
0098++ 0572             ; compare two strings
0099++ 0572             ; str1 in SI
0100++ 0572             ; str2 in DI
0101++ 0572             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0572             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0572             strcmp:
0104++ 0572 DB          	push al
0105++ 0573 DA          	push d
0106++ 0574 E3          	push di
0107++ 0575 E2          	push si
0108++ 0576             strcmp_loop:
0109++ 0576 F3          	cmpsb					; compare a byte of the strings
0110++ 0577 C7 82 05    	jne strcmp_ret
0111++ 057A FB FF FF    	lea d, [si +- 1]
0112++ 057D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 057F C7 76 05    	jne strcmp_loop				; equal chars but not at end
0114++ 0582             strcmp_ret:
0115++ 0582 EF          	pop si
0116++ 0583 F0          	pop di
0117++ 0584 E7          	pop d
0118++ 0585 E8          	pop al
0119++ 0586 09          	ret
0120++ 0587             
0121++ 0587             
0122++ 0587             ; STRCPY
0123++ 0587             ; copy null terminated string from SI to DI
0124++ 0587             ; source in SI
0125++ 0587             ; destination in DI
0126++ 0587             strcpy:
0127++ 0587 E2          	push si
0128++ 0588 E3          	push di
0129++ 0589 DB          	push al
0130++ 058A             strcpy_L1:
0131++ 058A F6          	lodsb
0132++ 058B F7          	stosb
0133++ 058C B9 00       	cmp al, 0
0134++ 058E C7 8A 05    	jne strcpy_L1
0135++ 0591             strcpy_end:
0136++ 0591 E8          	pop al
0137++ 0592 F0          	pop di
0138++ 0593 EF          	pop si
0139++ 0594 09          	ret
0140++ 0595             
0141++ 0595             ; STRCAT
0142++ 0595             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0595             ; source in SI
0144++ 0595             ; destination in DI
0145++ 0595             strcat:
0146++ 0595 E2          	push si
0147++ 0596 E3          	push di
0148++ 0597 D7          	push a
0149++ 0598 DA          	push d
0150++ 0599 50          	mov a, di
0151++ 059A 3C          	mov d, a
0152++ 059B             strcat_goto_end_L1:
0153++ 059B BD 00       	cmp byte[d], 0
0154++ 059D C6 A4 05    	je strcat_start
0155++ 05A0 79          	inc d
0156++ 05A1 0A 9B 05    	jmp strcat_goto_end_L1
0157++ 05A4             strcat_start:
0158++ 05A4 FD 50       	mov di, d
0159++ 05A6             strcat_L1:
0160++ 05A6 F6          	lodsb
0161++ 05A7 F7          	stosb
0162++ 05A8 B9 00       	cmp al, 0
0163++ 05AA C7 A6 05    	jne strcat_L1
0164++ 05AD             strcat_end:
0165++ 05AD E7          	pop d
0166++ 05AE E4          	pop a
0167++ 05AF F0          	pop di
0168++ 05B0 EF          	pop si
0169++ 05B1 09          	ret
0005+  05B2             
0006+  05B2 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  05B6 34 35 36 37 
0006+  05BA 38 39 41 42 
0006+  05BE 43 44 45 46 
0007+  05C2             
0008+  05C2 01 00       table_power:.dw 1
0009+  05C4 0A 00       			.dw 10
0010+  05C6 64 00       			.dw 100
0011+  05C8 E8 03       			.dw 1000
0012+  05CA 10 27       			.dw 10000
0013+  05CC             
0014+  05CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  05CC             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  05CC             ; ASCII in BL
0017+  05CC             ; result in AL
0018+  05CC             ; ascii for F = 0100 0110
0019+  05CC             ; ascii for 9 = 0011 1001
0020+  05CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  05CC             hex_ascii_encode:
0022+  05CC 1B          	mov al, bl
0023+  05CD 93 40       	test al, $40				; test if letter or number
0024+  05CF C7 D5 05    	jnz hex_letter
0025+  05D2 87 0F       	and al, $0F				; get number
0026+  05D4 09          	ret
0027+  05D5             hex_letter:
0028+  05D5 87 0F       	and al, $0F				; get letter
0029+  05D7 6A 09       	add al, 9
0030+  05D9 09          	ret
0031+  05DA             
0032+  05DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  05DA             ; ATOI
0034+  05DA             ; 2 letter hex string in B
0035+  05DA             ; 8bit integer returned in AL
0036+  05DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  05DA             atoi:
0038+  05DA D8          	push b
0039+  05DB 07 CC 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  05DE 30          	mov bl, bh
0041+  05DF DB          	push al					; save a
0042+  05E0 07 CC 05    	call hex_ascii_encode
0043+  05E3 EA          	pop bl	
0044+  05E4 FD 9E 04    	shl al, 4
0045+  05E7 8C          	or al, bl
0046+  05E8 E5          	pop b
0047+  05E9 09          	ret	
0048+  05EA             
0049+  05EA             
0050+  05EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  05EA             ; printf
0052+  05EA             ; no need for explanations!
0053+  05EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  05EA             printf:
0055+  05EA 09          	ret
0056+  05EB             
0057+  05EB             
0058+  05EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  05EB             ; scanf
0060+  05EB             ; no need for explanations!
0061+  05EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  05EB             scanf:
0063+  05EB 09          	ret
0064+  05EC             
0065+  05EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  05EC             ; ITOA
0067+  05EC             ; 8bit value in BL
0068+  05EC             ; 2 byte ASCII result in A
0069+  05EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  05EC             itoa:
0071+  05EC DA          	push d
0072+  05ED D8          	push b
0073+  05EE A7 00       	mov bh, 0
0074+  05F0 FD A4 04    	shr bl, 4	
0075+  05F3 74          	mov d, b
0076+  05F4 1F B2 05    	mov al, [d + s_hex_digits]
0077+  05F7 23          	mov ah, al
0078+  05F8             	
0079+  05F8 E5          	pop b
0080+  05F9 D8          	push b
0081+  05FA A7 00       	mov bh, 0
0082+  05FC FD 87 0F    	and bl, $0F
0083+  05FF 74          	mov d, b
0084+  0600 1F B2 05    	mov al, [d + s_hex_digits]
0085+  0603 E5          	pop b
0086+  0604 E7          	pop d
0087+  0605 09          	ret
0088+  0606             
0089+  0606             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0606             ; HEX STRING TO BINARY
0091+  0606             ; di = destination address
0092+  0606             ; si = source
0093+  0606             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0606             hex_to_int:
0095+  0606             hex_to_int_L1:
0096+  0606 F6          	lodsb					; load from [SI] to AL
0097+  0607 B9 00       	cmp al, 0				; check if ASCII 0
0098+  0609 C6 16 06    	jz hex_to_int_ret
0099+  060C 36          	mov bh, al
0100+  060D F6          	lodsb
0101+  060E 2F          	mov bl, al
0102+  060F 07 DA 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0612 F7          	stosb					; store AL to [DI]
0104+  0613 0A 06 06    	jmp hex_to_int_L1
0105+  0616             hex_to_int_ret:
0106+  0616 09          	ret		
0107+  0617             
0108+  0617             
0109+  0617             
0110+  0617             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0617             ; GETCHAR
0112+  0617             ; char in ah
0113+  0617             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0617             getchar:
0115+  0617 DB          	push al
0116+  0618             getchar_retry:
0117+  0618 FD 0C       	sti
0118+  061A 19 01       	mov al, 1
0119+  061C 05 03       	syscall sys_io			; receive in AH
0120+  061E B9 00       	cmp al, 0			; check if any char was receive
0121+  0620 C6 18 06    	je getchar_retry
0122+  0623 E8          	pop al
0123+  0624 09          	ret
0124+  0625             
0125+  0625             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0625             ; PUTCHAR
0127+  0625             ; char in ah
0128+  0625             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0625             putchar:
0130+  0625 D7          	push a
0131+  0626 19 00       	mov al, 0
0132+  0628 05 03       	syscall sys_io			; char in AH
0133+  062A E4          	pop a
0134+  062B 09          	ret
0135+  062C             
0136+  062C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  062C             ;; INPUT A STRING
0138+  062C             ;; terminates with null
0139+  062C             ;; pointer in D
0140+  062C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  062C             gets:
0142+  062C D7          	push a
0143+  062D DA          	push d
0144+  062E             gets_loop:
0145+  062E FD 0C       	sti
0146+  0630 19 01       	mov al, 1
0147+  0632 05 03       	syscall sys_io			; receive in AH
0148+  0634 B9 00       	cmp al, 0				; check error code (AL)
0149+  0636 C6 2E 06    	je gets_loop			; if no char received, retry
0150+  0639             
0151+  0639 76 1B       	cmp ah, 27
0152+  063B C6 5C 06    	je gets_telnet_escape
0153+  063E 76 0A       	cmp ah, $0A				; LF
0154+  0640 C6 B5 06    	je gets_end
0155+  0643 76 0D       	cmp ah, $0D				; CR
0156+  0645 C6 B5 06    	je gets_end
0157+  0648 76 5C       	cmp ah, $5C				; '\\'
0158+  064A C6 8C 06    	je gets_escape
0159+  064D             	
0160+  064D 76 08       	cmp ah, $08			; check for backspace
0161+  064F C6 58 06    	je gets_backspace
0162+  0652             
0163+  0652 1A          	mov al, ah
0164+  0653 3E          	mov [d], al
0165+  0654 79          	inc d
0166+  0655 0A 2E 06    	jmp gets_loop
0167+  0658             gets_backspace:
0168+  0658 7F          	dec d
0169+  0659 0A 2E 06    	jmp gets_loop
0170+  065C             gets_telnet_escape:
0171+  065C FD 0C       	sti
0172+  065E 19 01       	mov al, 1
0173+  0660 05 03       	syscall sys_io				; receive in AH without echo
0174+  0662 B9 00       	cmp al, 0					; check error code (AL)
0175+  0664 C6 5C 06    	je gets_telnet_escape		; if no char received, retry
0176+  0667 76 5B       	cmp ah, '['
0177+  0669 C7 2E 06    	jne gets_loop
0178+  066C             gets_telnet_escape_phase2:
0179+  066C FD 0C       	sti
0180+  066E 19 01       	mov al, 1
0181+  0670 05 03       	syscall sys_io					; receive in AH without echo
0182+  0672 B9 00       	cmp al, 0						; check error code (AL)
0183+  0674 C6 6C 06    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  0677 76 44       	cmp ah, 'D'
0185+  0679 C6 84 06    	je gets_left_arrow
0186+  067C 76 43       	cmp ah, 'C'
0187+  067E C6 88 06    	je gets_right_arrow
0188+  0681 0A 2E 06    	jmp gets_loop
0189+  0684             gets_left_arrow:
0190+  0684 7F          	dec d
0191+  0685 0A 2E 06    	jmp gets_loop
0192+  0688             gets_right_arrow:
0193+  0688 79          	inc d
0194+  0689 0A 2E 06    	jmp gets_loop
0195+  068C             gets_escape:
0196+  068C FD 0C       	sti
0197+  068E 19 01       	mov al, 1
0198+  0690 05 03       	syscall sys_io			; receive in AH
0199+  0692 B9 00       	cmp al, 0				; check error code (AL)
0200+  0694 C6 8C 06    	je gets_escape			; if no char received, retry
0201+  0697 76 6E       	cmp ah, 'n'
0202+  0699 C6 A7 06    	je gets_LF
0203+  069C 76 72       	cmp ah, 'r'
0204+  069E C6 AE 06    	je gets_CR
0205+  06A1 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  06A2 3E          	mov [d], al
0207+  06A3 79          	inc d
0208+  06A4 0A 2E 06    	jmp gets_loop
0209+  06A7             gets_LF:
0210+  06A7 19 0A       	mov al, $0A
0211+  06A9 3E          	mov [d], al
0212+  06AA 79          	inc d
0213+  06AB 0A 2E 06    	jmp gets_loop
0214+  06AE             gets_CR:
0215+  06AE 19 0D       	mov al, $0D
0216+  06B0 3E          	mov [d], al
0217+  06B1 79          	inc d
0218+  06B2 0A 2E 06    	jmp gets_loop
0219+  06B5             gets_end:
0220+  06B5 19 00       	mov al, 0
0221+  06B7 3E          	mov [d], al				; terminate string
0222+  06B8 E7          	pop d
0223+  06B9 E4          	pop a
0224+  06BA 09          	ret
0225+  06BB             
0226+  06BB             
0227+  06BB             
0228+  06BB             
0229+  06BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  06BB             ;; INPUT TEXT
0231+  06BB             ;; terminated with CTRL+D
0232+  06BB             ;; pointer in D
0233+  06BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  06BB             gettxt:
0235+  06BB D7          	push a
0236+  06BC DA          	push d
0237+  06BD             gettxt_loop:
0238+  06BD 19 01       	mov al, 1
0239+  06BF 05 03       	syscall sys_io			; receive in AH
0240+  06C1 B9 00       	cmp al, 0				; check error code (AL)
0241+  06C3 C6 BD 06    	je gettxt_loop		; if no char received, retry
0242+  06C6 76 04       	cmp ah, 4			; EOT
0243+  06C8 C6 06 07    	je gettxt_end
0244+  06CB 76 08       	cmp ah, $08			; check for backspace
0245+  06CD C6 02 07    	je gettxt_backspace
0246+  06D0 76 5C       	cmp ah, $5C				; '\\'
0247+  06D2 C6 DB 06    	je gettxt_escape
0248+  06D5 1A          	mov al, ah
0249+  06D6 3E          	mov [d], al
0250+  06D7 79          	inc d
0251+  06D8 0A BD 06    	jmp gettxt_loop
0252+  06DB             gettxt_escape:
0253+  06DB 19 01       	mov al, 1
0254+  06DD 05 03       	syscall sys_io			; receive in AH
0255+  06DF B9 00       	cmp al, 0				; check error code (AL)
0256+  06E1 C6 DB 06    	je gettxt_escape		; if no char received, retry
0257+  06E4 76 6E       	cmp ah, 'n'
0258+  06E6 C6 F4 06    	je gettxt_LF
0259+  06E9 76 72       	cmp ah, 'r'
0260+  06EB C6 FB 06    	je gettxt_CR
0261+  06EE 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  06EF 3E          	mov [d], al
0263+  06F0 79          	inc d
0264+  06F1 0A BD 06    	jmp gettxt_loop
0265+  06F4             gettxt_LF:
0266+  06F4 19 0A       	mov al, $0A
0267+  06F6 3E          	mov [d], al
0268+  06F7 79          	inc d
0269+  06F8 0A BD 06    	jmp gettxt_loop
0270+  06FB             gettxt_CR:
0271+  06FB 19 0D       	mov al, $0D
0272+  06FD 3E          	mov [d], al
0273+  06FE 79          	inc d
0274+  06FF 0A BD 06    	jmp gettxt_loop
0275+  0702             gettxt_backspace:
0276+  0702 7F          	dec d
0277+  0703 0A BD 06    	jmp gettxt_loop
0278+  0706             gettxt_end:
0279+  0706 19 00       	mov al, 0
0280+  0708 3E          	mov [d], al				; terminate string
0281+  0709 E7          	pop d
0282+  070A E4          	pop a
0283+  070B 09          	ret
0284+  070C             
0285+  070C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  070C             ; PRINT NEW LINE
0287+  070C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  070C             printnl:
0289+  070C D7          	push a
0290+  070D 10 00 0A    	mov a, $0A00
0291+  0710 05 03       	syscall sys_io
0292+  0712 10 00 0D    	mov a, $0D00
0293+  0715 05 03       	syscall sys_io
0294+  0717 E4          	pop a
0295+  0718 09          	ret
0296+  0719             
0297+  0719             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  0719             ; strtoint
0299+  0719             ; 4 digit hex string number in d
0300+  0719             ; integer returned in A
0301+  0719             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  0719             strtointx:
0303+  0719 D8          	push b
0304+  071A 32          	mov bl, [d]
0305+  071B 37          	mov bh, bl
0306+  071C 33 01 00    	mov bl, [d + 1]
0307+  071F 07 DA 05    	call atoi				; convert to int in AL
0308+  0722 23          	mov ah, al				; move to AH
0309+  0723 33 02 00    	mov bl, [d + 2]
0310+  0726 37          	mov bh, bl
0311+  0727 33 03 00    	mov bl, [d + 3]
0312+  072A 07 DA 05    	call atoi				; convert to int in AL
0313+  072D E5          	pop b
0314+  072E 09          	ret
0315+  072F             
0316+  072F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  072F             ; strtoint
0318+  072F             ; 5 digit base10 string number in d
0319+  072F             ; integer returned in A
0320+  072F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  072F             strtoint:
0322+  072F E2          	push si
0323+  0730 D8          	push b
0324+  0731 D9          	push c
0325+  0732 DA          	push d
0326+  0733 07 62 05    	call strlen			; get string length in C
0327+  0736 7E          	dec c
0328+  0737 FD 4E       	mov si, d
0329+  0739 12          	mov a, c
0330+  073A FD 99       	shl a
0331+  073C 3B C2 05    	mov d, table_power
0332+  073F 59          	add d, a
0333+  0740 38 00 00    	mov c, 0
0334+  0743             strtoint_L0:
0335+  0743 F6          	lodsb			; load ASCII to al
0336+  0744 B9 00       	cmp al, 0
0337+  0746 C6 59 07    	je strtoint_end
0338+  0749 6F 30       	sub al, $30		; make into integer
0339+  074B 22 00       	mov ah, 0
0340+  074D 2A          	mov b, [d]
0341+  074E AC          	mul a, b			; result in B since it fits in 16bits
0342+  074F 11          	mov a, b
0343+  0750 28          	mov b, c
0344+  0751 54          	add a, b
0345+  0752 39          	mov c, a
0346+  0753 63 02 00    	sub d, 2
0347+  0756 0A 43 07    	jmp strtoint_L0
0348+  0759             strtoint_end:
0349+  0759 12          	mov a, c
0350+  075A E7          	pop d
0351+  075B E6          	pop c
0352+  075C E5          	pop b
0353+  075D EF          	pop si
0354+  075E 09          	ret
0355+  075F             
0356+  075F             
0357+  075F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  075F             ; PRINT NULL TERMINATED STRING
0359+  075F             ; pointer in D
0360+  075F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  075F             puts:
0362+  075F D7          	push a
0363+  0760 DA          	push d
0364+  0761             puts_L1:
0365+  0761 1E          	mov al, [d]
0366+  0762 B9 00       	cmp al, 0
0367+  0764 C6 70 07    	jz puts_END
0368+  0767 23          	mov ah, al
0369+  0768 19 00       	mov al, 0
0370+  076A 05 03       	syscall sys_io
0371+  076C 79          	inc d
0372+  076D 0A 61 07    	jmp puts_L1
0373+  0770             puts_END:
0374+  0770 E7          	pop d
0375+  0771 E4          	pop a
0376+  0772 09          	ret
0377+  0773             
0378+  0773             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0773             ; PRINT N SIZE STRING
0380+  0773             ; pointer in D
0381+  0773             ; size in C
0382+  0773             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  0773             putsn:
0384+  0773 DB          	push al
0385+  0774 DA          	push d
0386+  0775 D9          	push c
0387+  0776             putsn_L0:
0388+  0776 1E          	mov al, [d]
0389+  0777 23          	mov ah, al
0390+  0778 19 00       	mov al, 0
0391+  077A 05 03       	syscall sys_io
0392+  077C 79          	inc d
0393+  077D 7E          	dec c	
0394+  077E C2 00 00    	cmp c, 0
0395+  0781 C7 76 07    	jne putsn_L0
0396+  0784             putsn_end:
0397+  0784 E6          	pop c
0398+  0785 E7          	pop d
0399+  0786 E8          	pop al
0400+  0787 09          	ret
0401+  0788             
0402+  0788             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  0788             ; print 16bit decimal number
0404+  0788             ; input number in A
0405+  0788             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  0788             print_u16d:
0407+  0788 D7          	push a
0408+  0789 D8          	push b
0409+  078A 26 10 27    	mov b, 10000
0410+  078D AE          	div a, b			; get 10000 coeff.
0411+  078E 07 B4 07    	call print_number
0412+  0791 11          	mov a, b
0413+  0792 26 E8 03    	mov b, 1000
0414+  0795 AE          	div a, b			; get 10000 coeff.
0415+  0796 07 B4 07    	call print_number
0416+  0799 11          	mov a, b
0417+  079A 26 64 00    	mov b, 100
0418+  079D AE          	div a, b
0419+  079E 07 B4 07    	call print_number
0420+  07A1 11          	mov a, b
0421+  07A2 26 0A 00    	mov b, 10
0422+  07A5 AE          	div a, b
0423+  07A6 07 B4 07    	call print_number
0424+  07A9 11          	mov a, b
0425+  07AA 6A 30       	add al, $30
0426+  07AC 23          	mov ah, al
0427+  07AD 19 00       	mov al, 0
0428+  07AF 05 03       	syscall sys_io	; print coeff
0429+  07B1 E5          	pop b
0430+  07B2 E4          	pop a
0431+  07B3 09          	ret
0432+  07B4             
0433+  07B4             
0434+  07B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  07B4             ; if A == 0, print space
0436+  07B4             ; else print A
0437+  07B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  07B4             print_number:
0439+  07B4 6A 30       	add al, $30
0440+  07B6 23          	mov ah, al
0441+  07B7 07 25 06    	call putchar
0442+  07BA 09          	ret
0443+  07BB             
0444+  07BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  07BB             ; PRINT 16BIT HEX INTEGER
0446+  07BB             ; integer value in reg B
0447+  07BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  07BB             print_u16x:
0449+  07BB D7          	push a
0450+  07BC D8          	push b
0451+  07BD DD          	push bl
0452+  07BE 30          	mov bl, bh
0453+  07BF 07 EC 05    	call itoa				; convert bh to char in A
0454+  07C2 2F          	mov bl, al				; save al
0455+  07C3 19 00       	mov al, 0
0456+  07C5 05 03       	syscall sys_io				; display AH
0457+  07C7 24          	mov ah, bl				; retrieve al
0458+  07C8 19 00       	mov al, 0
0459+  07CA 05 03       	syscall sys_io				; display AL
0460+  07CC             
0461+  07CC EA          	pop bl
0462+  07CD 07 EC 05    	call itoa				; convert bh to char in A
0463+  07D0 2F          	mov bl, al				; save al
0464+  07D1 19 00       	mov al, 0
0465+  07D3 05 03       	syscall sys_io				; display AH
0466+  07D5 24          	mov ah, bl				; retrieve al
0467+  07D6 19 00       	mov al, 0
0468+  07D8 05 03       	syscall sys_io				; display AL
0469+  07DA             
0470+  07DA E5          	pop b
0471+  07DB E4          	pop a
0472+  07DC 09          	ret
0473+  07DD             
0474+  07DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  07DD             ; INPUT 16BIT HEX INTEGER
0476+  07DD             ; read 16bit integer into A
0477+  07DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  07DD             scan_u16x:
0479+  07DD F8 10 00    	enter 16
0480+  07E0 D8          	push b
0481+  07E1 DA          	push d
0482+  07E2             
0483+  07E2 FA F1 FF    	lea d, [bp + -15]
0484+  07E5 07 2C 06    	call gets				; get number
0485+  07E8             
0486+  07E8 32          	mov bl, [d]
0487+  07E9 37          	mov bh, bl
0488+  07EA 33 01 00    	mov bl, [d + 1]
0489+  07ED 07 DA 05    	call atoi				; convert to int in AL
0490+  07F0 23          	mov ah, al				; move to AH
0491+  07F1             
0492+  07F1 33 02 00    	mov bl, [d + 2]
0493+  07F4 37          	mov bh, bl
0494+  07F5 33 03 00    	mov bl, [d + 3]
0495+  07F8 07 DA 05    	call atoi				; convert to int in AL
0496+  07FB             
0497+  07FB E7          	pop d
0498+  07FC E5          	pop b
0499+  07FD F9          	leave
0500+  07FE 09          	ret
0501+  07FF             
0502+  07FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  07FF             ; PRINT 8bit HEX INTEGER
0504+  07FF             ; integer value in reg bl
0505+  07FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  07FF             print_u8x:
0507+  07FF D7          	push a
0508+  0800 DD          	push bl
0509+  0801             
0510+  0801 07 EC 05    	call itoa				; convert bl to char in A
0511+  0804 2F          	mov bl, al				; save al
0512+  0805 19 00       	mov al, 0
0513+  0807 05 03       	syscall sys_io				; display AH
0514+  0809 24          	mov ah, bl				; retrieve al
0515+  080A 19 00       	mov al, 0
0516+  080C 05 03       	syscall sys_io				; display AL
0517+  080E             
0518+  080E EA          	pop bl
0519+  080F E4          	pop a
0520+  0810 09          	ret
0521+  0811             
0522+  0811             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0811             ; print 8bit decimal unsigned number
0524+  0811             ; input number in AL
0525+  0811             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0811             print_u8d:
0527+  0811 D7          	push a
0528+  0812 D8          	push b
0529+  0813             
0530+  0813 22 00       	mov ah, 0
0531+  0815 26 64 00    	mov b, 100
0532+  0818 AE          	div a, b
0533+  0819 D8          	push b			; save remainder
0534+  081A B9 00       	cmp al, 0
0535+  081C C6 26 08    	je skip100
0536+  081F 6A 30       	add al, $30
0537+  0821 23          	mov ah, al
0538+  0822 19 00       	mov al, 0
0539+  0824 05 03       	syscall sys_io	; print coeff
0540+  0826             skip100:
0541+  0826 E4          	pop a
0542+  0827 22 00       	mov ah, 0
0543+  0829 26 0A 00    	mov b, 10
0544+  082C AE          	div a, b
0545+  082D D8          	push b			; save remainder
0546+  082E B9 00       	cmp al, 0
0547+  0830 C6 3A 08    	je skip10
0548+  0833 6A 30       	add al, $30
0549+  0835 23          	mov ah, al
0550+  0836 19 00       	mov al, 0
0551+  0838 05 03       	syscall sys_io	; print coeff
0552+  083A             skip10:
0553+  083A E4          	pop a
0554+  083B 1B          	mov al, bl
0555+  083C 6A 30       	add al, $30
0556+  083E 23          	mov ah, al
0557+  083F 19 00       	mov al, 0
0558+  0841 05 03       	syscall sys_io	; print coeff
0559+  0843 E5          	pop b
0560+  0844 E4          	pop a
0561+  0845 09          	ret
0562+  0846             
0563+  0846             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  0846             ; INPUT 8BIT HEX INTEGER
0565+  0846             ; read 8bit integer into AL
0566+  0846             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  0846             scan_u8x:
0568+  0846 F8 04 00    	enter 4
0569+  0849 D8          	push b
0570+  084A DA          	push d
0571+  084B             
0572+  084B FA FD FF    	lea d, [bp + -3]
0573+  084E 07 2C 06    	call gets				; get number
0574+  0851             
0575+  0851 32          	mov bl, [d]
0576+  0852 37          	mov bh, bl
0577+  0853 33 01 00    	mov bl, [d + 1]
0578+  0856 07 DA 05    	call atoi				; convert to int in AL
0579+  0859             
0580+  0859 E7          	pop d
0581+  085A E5          	pop b
0582+  085B F9          	leave
0583+  085C 09          	ret
0584+  085D             
0585+  085D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  085D             ; input decimal number
0587+  085D             ; result in A
0588+  085D             ; 655'\0'
0589+  085D             ; low--------high
0590+  085D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  085D             scan_u16d:
0592+  085D F8 08 00    	enter 8
0593+  0860 E2          	push si
0594+  0861 D8          	push b
0595+  0862 D9          	push c
0596+  0863 DA          	push d
0597+  0864 FA F9 FF    	lea d, [bp +- 7]
0598+  0867 07 2C 06    	call gets
0599+  086A 07 62 05    	call strlen			; get string length in C
0600+  086D 7E          	dec c
0601+  086E FD 4E       	mov si, d
0602+  0870 12          	mov a, c
0603+  0871 FD 99       	shl a
0604+  0873 3B C2 05    	mov d, table_power
0605+  0876 59          	add d, a
0606+  0877 38 00 00    	mov c, 0
0607+  087A             mul_loop:
0608+  087A F6          	lodsb			; load ASCII to al
0609+  087B B9 00       	cmp al, 0
0610+  087D C6 90 08    	je mul_exit
0611+  0880 6F 30       	sub al, $30		; make into integer
0612+  0882 22 00       	mov ah, 0
0613+  0884 2A          	mov b, [d]
0614+  0885 AC          	mul a, b			; result in B since it fits in 16bits
0615+  0886 11          	mov a, b
0616+  0887 28          	mov b, c
0617+  0888 54          	add a, b
0618+  0889 39          	mov c, a
0619+  088A 63 02 00    	sub d, 2
0620+  088D 0A 7A 08    	jmp mul_loop
0621+  0890             mul_exit:
0622+  0890 12          	mov a, c
0623+  0891 E7          	pop d
0624+  0892 E6          	pop c
0625+  0893 E5          	pop b
0626+  0894 EF          	pop si
0627+  0895 F9          	leave
0628+  0896 09          	ret
0175   0897             ; --- END INCLUDE BLOCK
0176   0897             
0177   0897             
0178   0897             .end
tasm: Number of errors = 0
