0001   0000             ; --- Filename: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- begin text block
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 0A 00      sub sp, 10 ; c1
0010   0405 52 02 00      sub sp, 2 ; p
0011   0408 FA F7 FF      lea d, [bp + -9] ; c1
0012   040B 2D            mov b, d
0013   040C 11            mov a, b
0014   040D FD AA         swp a
0015   040F 45 F5 FF      mov [bp + -11], a ; p
0016   0412 52 02 00      sub sp, 2 ; i
0017   0415             _for1_init:
0018   0415 26 00 00      mov b, 0
0019   0418 11            mov a, b
0020   0419 FD AA         swp a
0021   041B 45 F3 FF      mov [bp + -13], a ; i
0022   041E             _for1_cond:
0023   041E 2C F3 FF      mov b, [bp + -13] ; i
0024   0421 FD AB         swp b
0025   0423 D7            push a
0026   0424 11            mov a, b
0027   0425 26 0A 00      mov b, 10
0028   0428 B0            cmp a, b
0029   0429 0E            lodflgs
0030   042A 87 02         and al, %00000010
0031   042C 22 00         mov ah, 0
0032   042E 27            mov b, a
0033   042F E4            pop a
0034   0430 C0 00 00      cmp b, 0
0035   0433 C6 61 04      je _for1_exit
0036   0436             _for1_block:
0037   0436 FA F5 FF      lea d, [bp + -11] ; p
0038   0439 2A            mov b, [d]
0039   043A FD AB         swp b
0040   043C 74            mov d, b
0041   043D 2E 41         mov bl, 'A'
0042   043F D7            push a
0043   0440 11            mov a, b
0044   0441 2C F3 FF      mov b, [bp + -13] ; i
0045   0444 FD AB         swp b
0046   0446 54            add a, b
0047   0447 27            mov b, a
0048   0448 E4            pop a
0049   0449 1B            mov al, bl
0050   044A 3E            mov [d], al
0051   044B             _for1_update:
0052   044B 2C F3 FF      mov b, [bp + -13] ; i
0053   044E FD AB         swp b
0054   0450 D7            push a
0055   0451 11            mov a, b
0056   0452 26 01 00      mov b, 1
0057   0455 54            add a, b
0058   0456 27            mov b, a
0059   0457 E4            pop a
0060   0458 11            mov a, b
0061   0459 FD AA         swp a
0062   045B 45 F3 FF      mov [bp + -13], a ; i
0063   045E 0A 1E 04      jmp _for1_cond
0064   0461             _for1_exit:
0065   0461 FA F5 FF      lea d, [bp + -11] ; p
0066   0464 2A            mov b, [d]
0067   0465 FD AB         swp b
0068   0467 D8            push b
0069   0468 07 71 04      call f1
0070   046B 51 02 00      add sp, 2
0071   046E F9            leave
0072   046F 05 0B         syscall sys_terminate_proc
0073   0471             f1:
0074   0471 D2            push bp
0075   0472 9B            mov bp, sp
0076   0473 52 01 00      sub sp, 1 ; cc
0077   0476 FA 05 00      lea d, [bp + 5] ; c
0078   0479 2A            mov b, [d]
0079   047A FD AB         swp b
0080   047C 74            mov d, b
0081   047D 26 01 00      mov b, 1
0082   0480 5A            add d, b
0083   0481 32            mov bl, [d]
0084   0482 1B            mov al, bl
0085   0483 40 00 00      mov [bp + 0], al ; cc
0086   0486             ; --- begin inline asm block
0087   0486 17 00 00        mov a, [bp + 0];
0088   0489 FD AA           swp a
0089   048B 07 9A 05        call putchar
0090   048E               ; --- end inline asm block
0091   048E F9            leave
0092   048F 09            ret
0093   0490             ; --- end text block
0094   0490             
0095   0490             ; --- begin data block
0096   0490             ; --- end data block
0097   0490             ; --- begin include block
0098   0490             .include "lib/stdio.asm"
0001+  0490             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0490             ; stdio.s
0003+  0490             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0490             .include "lib/string.asm"
0001++ 0490             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0490             ; string.s
0003++ 0490             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0490             
0005++ 0490             
0006++ 0490             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0490             ; strrev
0008++ 0490             ; reverse a string
0009++ 0490             ; D = string address
0010++ 0490             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0490             ; 01234
0012++ 0490             strrev:
0013++ 0490 4B          	pusha
0014++ 0491 07 D7 04    	call strlen	; length in C
0015++ 0494 12          	mov a, c
0016++ 0495 AF 01 00    	cmp a, 1
0017++ 0498 D0 B2 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 049B 7D          	dec a
0019++ 049C FD 4E       	mov si, d	; beginning of string
0020++ 049E FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 04A0 59          	add d, a	; end of string
0022++ 04A1 12          	mov a, c
0023++ 04A2 FD 9B       	shr a		; divide by 2
0024++ 04A4 39          	mov c, a	; C now counts the steps
0025++ 04A5             strrev_L0:
0026++ 04A5 32          	mov bl, [d]	; save load right-side char into BL
0027++ 04A6 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 04A7 3E          	mov [d], al	; store left char into right side
0029++ 04A8 1B          	mov al, bl
0030++ 04A9 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 04AA 7E          	dec c
0032++ 04AB 7F          	dec d
0033++ 04AC C2 00 00    	cmp c, 0
0034++ 04AF C7 A5 04    	jne strrev_L0
0035++ 04B2             strrev_end:
0036++ 04B2 4C          	popa
0037++ 04B3 09          	ret
0038++ 04B4             	
0039++ 04B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 04B4             ; strchr
0041++ 04B4             ; search string in D for char in AL
0042++ 04B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 04B4             strchr:
0044++ 04B4             strchr_L0:
0045++ 04B4 32          	mov bl, [d]
0046++ 04B5 C1 00       	cmp bl, 0
0047++ 04B7 C6 C2 04    	je strchr_end
0048++ 04BA BA          	cmp al, bl
0049++ 04BB C6 C2 04    	je strchr_end
0050++ 04BE 79          	inc d
0051++ 04BF 0A B4 04    	jmp strchr_L0
0052++ 04C2             strchr_end:
0053++ 04C2 1B          	mov al, bl
0054++ 04C3 09          	ret
0055++ 04C4             
0056++ 04C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 04C4             ; strstr
0058++ 04C4             ; find sub-string
0059++ 04C4             ; str1 in SI
0060++ 04C4             ; str2 in DI
0061++ 04C4             ; SI points to end of source string
0062++ 04C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 04C4             strstr:
0064++ 04C4 DB          	push al
0065++ 04C5 DA          	push d
0066++ 04C6 E3          	push di
0067++ 04C7             strstr_loop:
0068++ 04C7 F3          	cmpsb					; compare a byte of the strings
0069++ 04C8 C7 D3 04    	jne strstr_ret
0070++ 04CB FC 00 00    	lea d, [di + 0]
0071++ 04CE BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 04D0 C7 C7 04    	jne strstr_loop				; equal chars but not at end
0073++ 04D3             strstr_ret:
0074++ 04D3 F0          	pop di
0075++ 04D4 E7          	pop d
0076++ 04D5 E8          	pop al
0077++ 04D6 09          	ret
0078++ 04D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 04D7             ; length of null terminated string
0080++ 04D7             ; result in C
0081++ 04D7             ; pointer in D
0082++ 04D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 04D7             strlen:
0084++ 04D7 DA          	push d
0085++ 04D8 38 00 00    	mov c, 0
0086++ 04DB             strlen_L1:
0087++ 04DB BD 00       	cmp byte [d], 0
0088++ 04DD C6 E5 04    	je strlen_ret
0089++ 04E0 79          	inc d
0090++ 04E1 78          	inc c
0091++ 04E2 0A DB 04    	jmp strlen_L1
0092++ 04E5             strlen_ret:
0093++ 04E5 E7          	pop d
0094++ 04E6 09          	ret
0095++ 04E7             
0096++ 04E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04E7             ; STRCMP
0098++ 04E7             ; compare two strings
0099++ 04E7             ; str1 in SI
0100++ 04E7             ; str2 in DI
0101++ 04E7             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04E7             strcmp:
0104++ 04E7 DB          	push al
0105++ 04E8 DA          	push d
0106++ 04E9 E3          	push di
0107++ 04EA E2          	push si
0108++ 04EB             strcmp_loop:
0109++ 04EB F3          	cmpsb					; compare a byte of the strings
0110++ 04EC C7 F7 04    	jne strcmp_ret
0111++ 04EF FB FF FF    	lea d, [si +- 1]
0112++ 04F2 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04F4 C7 EB 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04F7             strcmp_ret:
0115++ 04F7 EF          	pop si
0116++ 04F8 F0          	pop di
0117++ 04F9 E7          	pop d
0118++ 04FA E8          	pop al
0119++ 04FB 09          	ret
0120++ 04FC             
0121++ 04FC             
0122++ 04FC             ; STRCPY
0123++ 04FC             ; copy null terminated string from SI to DI
0124++ 04FC             ; source in SI
0125++ 04FC             ; destination in DI
0126++ 04FC             strcpy:
0127++ 04FC E2          	push si
0128++ 04FD E3          	push di
0129++ 04FE DB          	push al
0130++ 04FF             strcpy_L1:
0131++ 04FF F6          	lodsb
0132++ 0500 F7          	stosb
0133++ 0501 B9 00       	cmp al, 0
0134++ 0503 C7 FF 04    	jne strcpy_L1
0135++ 0506             strcpy_end:
0136++ 0506 E8          	pop al
0137++ 0507 F0          	pop di
0138++ 0508 EF          	pop si
0139++ 0509 09          	ret
0140++ 050A             
0141++ 050A             ; STRCAT
0142++ 050A             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 050A             ; source in SI
0144++ 050A             ; destination in DI
0145++ 050A             strcat:
0146++ 050A E2          	push si
0147++ 050B E3          	push di
0148++ 050C D7          	push a
0149++ 050D DA          	push d
0150++ 050E 50          	mov a, di
0151++ 050F 3C          	mov d, a
0152++ 0510             strcat_goto_end_L1:
0153++ 0510 BD 00       	cmp byte[d], 0
0154++ 0512 C6 19 05    	je strcat_start
0155++ 0515 79          	inc d
0156++ 0516 0A 10 05    	jmp strcat_goto_end_L1
0157++ 0519             strcat_start:
0158++ 0519 FD 50       	mov di, d
0159++ 051B             strcat_L1:
0160++ 051B F6          	lodsb
0161++ 051C F7          	stosb
0162++ 051D B9 00       	cmp al, 0
0163++ 051F C7 1B 05    	jne strcat_L1
0164++ 0522             strcat_end:
0165++ 0522 E7          	pop d
0166++ 0523 E4          	pop a
0167++ 0524 F0          	pop di
0168++ 0525 EF          	pop si
0169++ 0526 09          	ret
0005+  0527             
0006+  0527 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  052B 34 35 36 37 
0006+  052F 38 39 41 42 
0006+  0533 43 44 45 46 
0007+  0537             
0008+  0537 01 00       table_power:.dw 1
0009+  0539 0A 00       			.dw 10
0010+  053B 64 00       			.dw 100
0011+  053D E8 03       			.dw 1000
0012+  053F 10 27       			.dw 10000
0013+  0541             
0014+  0541             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  0541             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  0541             ; ASCII in BL
0017+  0541             ; result in AL
0018+  0541             ; ascii for F = 0100 0110
0019+  0541             ; ascii for 9 = 0011 1001
0020+  0541             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  0541             hex_ascii_encode:
0022+  0541 1B          	mov al, bl
0023+  0542 93 40       	test al, $40				; test if letter or number
0024+  0544 C7 4A 05    	jnz hex_letter
0025+  0547 87 0F       	and al, $0F				; get number
0026+  0549 09          	ret
0027+  054A             hex_letter:
0028+  054A 87 0F       	and al, $0F				; get letter
0029+  054C 6A 09       	add al, 9
0030+  054E 09          	ret
0031+  054F             
0032+  054F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  054F             ; ATOI
0034+  054F             ; 2 letter hex string in B
0035+  054F             ; 8bit integer returned in AL
0036+  054F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  054F             atoi:
0038+  054F D8          	push b
0039+  0550 07 41 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  0553 30          	mov bl, bh
0041+  0554 DB          	push al					; save a
0042+  0555 07 41 05    	call hex_ascii_encode
0043+  0558 EA          	pop bl	
0044+  0559 FD 9E 04    	shl al, 4
0045+  055C 8C          	or al, bl
0046+  055D E5          	pop b
0047+  055E 09          	ret	
0048+  055F             
0049+  055F             
0050+  055F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  055F             ; printf
0052+  055F             ; no need for explanations!
0053+  055F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  055F             printf:
0055+  055F 09          	ret
0056+  0560             
0057+  0560             
0058+  0560             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0560             ; scanf
0060+  0560             ; no need for explanations!
0061+  0560             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0560             scanf:
0063+  0560 09          	ret
0064+  0561             
0065+  0561             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0561             ; ITOA
0067+  0561             ; 8bit value in BL
0068+  0561             ; 2 byte ASCII result in A
0069+  0561             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  0561             itoa:
0071+  0561 DA          	push d
0072+  0562 D8          	push b
0073+  0563 A7 00       	mov bh, 0
0074+  0565 FD A4 04    	shr bl, 4	
0075+  0568 74          	mov d, b
0076+  0569 1F 27 05    	mov al, [d + s_hex_digits]
0077+  056C 23          	mov ah, al
0078+  056D             	
0079+  056D E5          	pop b
0080+  056E D8          	push b
0081+  056F A7 00       	mov bh, 0
0082+  0571 FD 87 0F    	and bl, $0F
0083+  0574 74          	mov d, b
0084+  0575 1F 27 05    	mov al, [d + s_hex_digits]
0085+  0578 E5          	pop b
0086+  0579 E7          	pop d
0087+  057A 09          	ret
0088+  057B             
0089+  057B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  057B             ; HEX STRING TO BINARY
0091+  057B             ; di = destination address
0092+  057B             ; si = source
0093+  057B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  057B             hex_to_int:
0095+  057B             hex_to_int_L1:
0096+  057B F6          	lodsb					; load from [SI] to AL
0097+  057C B9 00       	cmp al, 0				; check if ASCII 0
0098+  057E C6 8B 05    	jz hex_to_int_ret
0099+  0581 36          	mov bh, al
0100+  0582 F6          	lodsb
0101+  0583 2F          	mov bl, al
0102+  0584 07 4F 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0587 F7          	stosb					; store AL to [DI]
0104+  0588 0A 7B 05    	jmp hex_to_int_L1
0105+  058B             hex_to_int_ret:
0106+  058B 09          	ret		
0107+  058C             
0108+  058C             
0109+  058C             
0110+  058C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  058C             ; GETCHAR
0112+  058C             ; char in ah
0113+  058C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  058C             getchar:
0115+  058C DB          	push al
0116+  058D             getchar_retry:
0117+  058D FD 0C       	sti
0118+  058F 19 01       	mov al, 1
0119+  0591 05 03       	syscall sys_io			; receive in AH
0120+  0593 B9 00       	cmp al, 0			; check if any char was receive
0121+  0595 C6 8D 05    	je getchar_retry
0122+  0598 E8          	pop al
0123+  0599 09          	ret
0124+  059A             
0125+  059A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  059A             ; PUTCHAR
0127+  059A             ; char in ah
0128+  059A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  059A             putchar:
0130+  059A D7          	push a
0131+  059B 19 00       	mov al, 0
0132+  059D 05 03       	syscall sys_io			; char in AH
0133+  059F E4          	pop a
0134+  05A0 09          	ret
0135+  05A1             
0136+  05A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  05A1             ;; INPUT A STRING
0138+  05A1             ;; terminates with null
0139+  05A1             ;; pointer in D
0140+  05A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  05A1             gets:
0142+  05A1 D7          	push a
0143+  05A2 DA          	push d
0144+  05A3             gets_loop:
0145+  05A3 FD 0C       	sti
0146+  05A5 19 01       	mov al, 1
0147+  05A7 05 03       	syscall sys_io			; receive in AH
0148+  05A9 B9 00       	cmp al, 0				; check error code (AL)
0149+  05AB C6 A3 05    	je gets_loop			; if no char received, retry
0150+  05AE             
0151+  05AE 76 1B       	cmp ah, 27
0152+  05B0 C6 D1 05    	je gets_telnet_escape
0153+  05B3 76 0A       	cmp ah, $0A				; LF
0154+  05B5 C6 2A 06    	je gets_end
0155+  05B8 76 0D       	cmp ah, $0D				; CR
0156+  05BA C6 2A 06    	je gets_end
0157+  05BD 76 5C       	cmp ah, $5C				; '\\'
0158+  05BF C6 01 06    	je gets_escape
0159+  05C2             	
0160+  05C2 76 08       	cmp ah, $08			; check for backspace
0161+  05C4 C6 CD 05    	je gets_backspace
0162+  05C7             
0163+  05C7 1A          	mov al, ah
0164+  05C8 3E          	mov [d], al
0165+  05C9 79          	inc d
0166+  05CA 0A A3 05    	jmp gets_loop
0167+  05CD             gets_backspace:
0168+  05CD 7F          	dec d
0169+  05CE 0A A3 05    	jmp gets_loop
0170+  05D1             gets_telnet_escape:
0171+  05D1 FD 0C       	sti
0172+  05D3 19 01       	mov al, 1
0173+  05D5 05 03       	syscall sys_io				; receive in AH without echo
0174+  05D7 B9 00       	cmp al, 0					; check error code (AL)
0175+  05D9 C6 D1 05    	je gets_telnet_escape		; if no char received, retry
0176+  05DC 76 5B       	cmp ah, '['
0177+  05DE C7 A3 05    	jne gets_loop
0178+  05E1             gets_telnet_escape_phase2:
0179+  05E1 FD 0C       	sti
0180+  05E3 19 01       	mov al, 1
0181+  05E5 05 03       	syscall sys_io					; receive in AH without echo
0182+  05E7 B9 00       	cmp al, 0						; check error code (AL)
0183+  05E9 C6 E1 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  05EC 76 44       	cmp ah, 'D'
0185+  05EE C6 F9 05    	je gets_left_arrow
0186+  05F1 76 43       	cmp ah, 'C'
0187+  05F3 C6 FD 05    	je gets_right_arrow
0188+  05F6 0A A3 05    	jmp gets_loop
0189+  05F9             gets_left_arrow:
0190+  05F9 7F          	dec d
0191+  05FA 0A A3 05    	jmp gets_loop
0192+  05FD             gets_right_arrow:
0193+  05FD 79          	inc d
0194+  05FE 0A A3 05    	jmp gets_loop
0195+  0601             gets_escape:
0196+  0601 FD 0C       	sti
0197+  0603 19 01       	mov al, 1
0198+  0605 05 03       	syscall sys_io			; receive in AH
0199+  0607 B9 00       	cmp al, 0				; check error code (AL)
0200+  0609 C6 01 06    	je gets_escape			; if no char received, retry
0201+  060C 76 6E       	cmp ah, 'n'
0202+  060E C6 1C 06    	je gets_LF
0203+  0611 76 72       	cmp ah, 'r'
0204+  0613 C6 23 06    	je gets_CR
0205+  0616 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  0617 3E          	mov [d], al
0207+  0618 79          	inc d
0208+  0619 0A A3 05    	jmp gets_loop
0209+  061C             gets_LF:
0210+  061C 19 0A       	mov al, $0A
0211+  061E 3E          	mov [d], al
0212+  061F 79          	inc d
0213+  0620 0A A3 05    	jmp gets_loop
0214+  0623             gets_CR:
0215+  0623 19 0D       	mov al, $0D
0216+  0625 3E          	mov [d], al
0217+  0626 79          	inc d
0218+  0627 0A A3 05    	jmp gets_loop
0219+  062A             gets_end:
0220+  062A 19 00       	mov al, 0
0221+  062C 3E          	mov [d], al				; terminate string
0222+  062D E7          	pop d
0223+  062E E4          	pop a
0224+  062F 09          	ret
0225+  0630             
0226+  0630             
0227+  0630             
0228+  0630             
0229+  0630             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  0630             ;; INPUT TEXT
0231+  0630             ;; terminated with CTRL+D
0232+  0630             ;; pointer in D
0233+  0630             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  0630             gettxt:
0235+  0630 D7          	push a
0236+  0631 DA          	push d
0237+  0632             gettxt_loop:
0238+  0632 19 01       	mov al, 1
0239+  0634 05 03       	syscall sys_io			; receive in AH
0240+  0636 B9 00       	cmp al, 0				; check error code (AL)
0241+  0638 C6 32 06    	je gettxt_loop		; if no char received, retry
0242+  063B 76 04       	cmp ah, 4			; EOT
0243+  063D C6 7B 06    	je gettxt_end
0244+  0640 76 08       	cmp ah, $08			; check for backspace
0245+  0642 C6 77 06    	je gettxt_backspace
0246+  0645 76 5C       	cmp ah, $5C				; '\\'
0247+  0647 C6 50 06    	je gettxt_escape
0248+  064A 1A          	mov al, ah
0249+  064B 3E          	mov [d], al
0250+  064C 79          	inc d
0251+  064D 0A 32 06    	jmp gettxt_loop
0252+  0650             gettxt_escape:
0253+  0650 19 01       	mov al, 1
0254+  0652 05 03       	syscall sys_io			; receive in AH
0255+  0654 B9 00       	cmp al, 0				; check error code (AL)
0256+  0656 C6 50 06    	je gettxt_escape		; if no char received, retry
0257+  0659 76 6E       	cmp ah, 'n'
0258+  065B C6 69 06    	je gettxt_LF
0259+  065E 76 72       	cmp ah, 'r'
0260+  0660 C6 70 06    	je gettxt_CR
0261+  0663 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  0664 3E          	mov [d], al
0263+  0665 79          	inc d
0264+  0666 0A 32 06    	jmp gettxt_loop
0265+  0669             gettxt_LF:
0266+  0669 19 0A       	mov al, $0A
0267+  066B 3E          	mov [d], al
0268+  066C 79          	inc d
0269+  066D 0A 32 06    	jmp gettxt_loop
0270+  0670             gettxt_CR:
0271+  0670 19 0D       	mov al, $0D
0272+  0672 3E          	mov [d], al
0273+  0673 79          	inc d
0274+  0674 0A 32 06    	jmp gettxt_loop
0275+  0677             gettxt_backspace:
0276+  0677 7F          	dec d
0277+  0678 0A 32 06    	jmp gettxt_loop
0278+  067B             gettxt_end:
0279+  067B 19 00       	mov al, 0
0280+  067D 3E          	mov [d], al				; terminate string
0281+  067E E7          	pop d
0282+  067F E4          	pop a
0283+  0680 09          	ret
0284+  0681             
0285+  0681             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0681             ; PRINT NEW LINE
0287+  0681             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  0681             printnl:
0289+  0681 D7          	push a
0290+  0682 10 00 0A    	mov a, $0A00
0291+  0685 05 03       	syscall sys_io
0292+  0687 10 00 0D    	mov a, $0D00
0293+  068A 05 03       	syscall sys_io
0294+  068C E4          	pop a
0295+  068D 09          	ret
0296+  068E             
0297+  068E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  068E             ; strtoint
0299+  068E             ; 4 digit hex string number in d
0300+  068E             ; integer returned in A
0301+  068E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  068E             strtointx:
0303+  068E D8          	push b
0304+  068F 32          	mov bl, [d]
0305+  0690 37          	mov bh, bl
0306+  0691 33 01 00    	mov bl, [d + 1]
0307+  0694 07 4F 05    	call atoi				; convert to int in AL
0308+  0697 23          	mov ah, al				; move to AH
0309+  0698 33 02 00    	mov bl, [d + 2]
0310+  069B 37          	mov bh, bl
0311+  069C 33 03 00    	mov bl, [d + 3]
0312+  069F 07 4F 05    	call atoi				; convert to int in AL
0313+  06A2 E5          	pop b
0314+  06A3 09          	ret
0315+  06A4             
0316+  06A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  06A4             ; strtoint
0318+  06A4             ; 5 digit base10 string number in d
0319+  06A4             ; integer returned in A
0320+  06A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  06A4             strtoint:
0322+  06A4 E2          	push si
0323+  06A5 D8          	push b
0324+  06A6 D9          	push c
0325+  06A7 DA          	push d
0326+  06A8 07 D7 04    	call strlen			; get string length in C
0327+  06AB 7E          	dec c
0328+  06AC FD 4E       	mov si, d
0329+  06AE 12          	mov a, c
0330+  06AF FD 99       	shl a
0331+  06B1 3B 37 05    	mov d, table_power
0332+  06B4 59          	add d, a
0333+  06B5 38 00 00    	mov c, 0
0334+  06B8             strtoint_L0:
0335+  06B8 F6          	lodsb			; load ASCII to al
0336+  06B9 B9 00       	cmp al, 0
0337+  06BB C6 CE 06    	je strtoint_end
0338+  06BE 6F 30       	sub al, $30		; make into integer
0339+  06C0 22 00       	mov ah, 0
0340+  06C2 2A          	mov b, [d]
0341+  06C3 AC          	mul a, b			; result in B since it fits in 16bits
0342+  06C4 11          	mov a, b
0343+  06C5 28          	mov b, c
0344+  06C6 54          	add a, b
0345+  06C7 39          	mov c, a
0346+  06C8 63 02 00    	sub d, 2
0347+  06CB 0A B8 06    	jmp strtoint_L0
0348+  06CE             strtoint_end:
0349+  06CE 12          	mov a, c
0350+  06CF E7          	pop d
0351+  06D0 E6          	pop c
0352+  06D1 E5          	pop b
0353+  06D2 EF          	pop si
0354+  06D3 09          	ret
0355+  06D4             
0356+  06D4             
0357+  06D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  06D4             ; PRINT NULL TERMINATED STRING
0359+  06D4             ; pointer in D
0360+  06D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  06D4             puts:
0362+  06D4 D7          	push a
0363+  06D5 DA          	push d
0364+  06D6             puts_L1:
0365+  06D6 1E          	mov al, [d]
0366+  06D7 B9 00       	cmp al, 0
0367+  06D9 C6 E5 06    	jz puts_END
0368+  06DC 23          	mov ah, al
0369+  06DD 19 00       	mov al, 0
0370+  06DF 05 03       	syscall sys_io
0371+  06E1 79          	inc d
0372+  06E2 0A D6 06    	jmp puts_L1
0373+  06E5             puts_END:
0374+  06E5 E7          	pop d
0375+  06E6 E4          	pop a
0376+  06E7 09          	ret
0377+  06E8             
0378+  06E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  06E8             ; PRINT N SIZE STRING
0380+  06E8             ; pointer in D
0381+  06E8             ; size in C
0382+  06E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  06E8             putsn:
0384+  06E8 DB          	push al
0385+  06E9 DA          	push d
0386+  06EA D9          	push c
0387+  06EB             putsn_L0:
0388+  06EB 1E          	mov al, [d]
0389+  06EC 23          	mov ah, al
0390+  06ED 19 00       	mov al, 0
0391+  06EF 05 03       	syscall sys_io
0392+  06F1 79          	inc d
0393+  06F2 7E          	dec c	
0394+  06F3 C2 00 00    	cmp c, 0
0395+  06F6 C7 EB 06    	jne putsn_L0
0396+  06F9             putsn_end:
0397+  06F9 E6          	pop c
0398+  06FA E7          	pop d
0399+  06FB E8          	pop al
0400+  06FC 09          	ret
0401+  06FD             
0402+  06FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  06FD             ; print 16bit decimal number
0404+  06FD             ; input number in A
0405+  06FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  06FD             print_u16d:
0407+  06FD D7          	push a
0408+  06FE D8          	push b
0409+  06FF 26 10 27    	mov b, 10000
0410+  0702 AE          	div a, b			; get 10000 coeff.
0411+  0703 07 29 07    	call print_number
0412+  0706 11          	mov a, b
0413+  0707 26 E8 03    	mov b, 1000
0414+  070A AE          	div a, b			; get 10000 coeff.
0415+  070B 07 29 07    	call print_number
0416+  070E 11          	mov a, b
0417+  070F 26 64 00    	mov b, 100
0418+  0712 AE          	div a, b
0419+  0713 07 29 07    	call print_number
0420+  0716 11          	mov a, b
0421+  0717 26 0A 00    	mov b, 10
0422+  071A AE          	div a, b
0423+  071B 07 29 07    	call print_number
0424+  071E 11          	mov a, b
0425+  071F 6A 30       	add al, $30
0426+  0721 23          	mov ah, al
0427+  0722 19 00       	mov al, 0
0428+  0724 05 03       	syscall sys_io	; print coeff
0429+  0726 E5          	pop b
0430+  0727 E4          	pop a
0431+  0728 09          	ret
0432+  0729             
0433+  0729             
0434+  0729             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  0729             ; if A == 0, print space
0436+  0729             ; else print A
0437+  0729             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  0729             print_number:
0439+  0729 6A 30       	add al, $30
0440+  072B 23          	mov ah, al
0441+  072C 07 9A 05    	call putchar
0442+  072F 09          	ret
0443+  0730             
0444+  0730             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  0730             ; PRINT 16BIT HEX INTEGER
0446+  0730             ; integer value in reg B
0447+  0730             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  0730             print_u16x:
0449+  0730 D7          	push a
0450+  0731 D8          	push b
0451+  0732 DD          	push bl
0452+  0733 30          	mov bl, bh
0453+  0734 07 61 05    	call itoa				; convert bh to char in A
0454+  0737 2F          	mov bl, al				; save al
0455+  0738 19 00       	mov al, 0
0456+  073A 05 03       	syscall sys_io				; display AH
0457+  073C 24          	mov ah, bl				; retrieve al
0458+  073D 19 00       	mov al, 0
0459+  073F 05 03       	syscall sys_io				; display AL
0460+  0741             
0461+  0741 EA          	pop bl
0462+  0742 07 61 05    	call itoa				; convert bh to char in A
0463+  0745 2F          	mov bl, al				; save al
0464+  0746 19 00       	mov al, 0
0465+  0748 05 03       	syscall sys_io				; display AH
0466+  074A 24          	mov ah, bl				; retrieve al
0467+  074B 19 00       	mov al, 0
0468+  074D 05 03       	syscall sys_io				; display AL
0469+  074F             
0470+  074F E5          	pop b
0471+  0750 E4          	pop a
0472+  0751 09          	ret
0473+  0752             
0474+  0752             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  0752             ; INPUT 16BIT HEX INTEGER
0476+  0752             ; read 16bit integer into A
0477+  0752             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  0752             scan_u16x:
0479+  0752 F8 10 00    	enter 16
0480+  0755 D8          	push b
0481+  0756 DA          	push d
0482+  0757             
0483+  0757 FA F1 FF    	lea d, [bp + -15]
0484+  075A 07 A1 05    	call gets				; get number
0485+  075D             
0486+  075D 32          	mov bl, [d]
0487+  075E 37          	mov bh, bl
0488+  075F 33 01 00    	mov bl, [d + 1]
0489+  0762 07 4F 05    	call atoi				; convert to int in AL
0490+  0765 23          	mov ah, al				; move to AH
0491+  0766             
0492+  0766 33 02 00    	mov bl, [d + 2]
0493+  0769 37          	mov bh, bl
0494+  076A 33 03 00    	mov bl, [d + 3]
0495+  076D 07 4F 05    	call atoi				; convert to int in AL
0496+  0770             
0497+  0770 E7          	pop d
0498+  0771 E5          	pop b
0499+  0772 F9          	leave
0500+  0773 09          	ret
0501+  0774             
0502+  0774             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  0774             ; PRINT 8bit HEX INTEGER
0504+  0774             ; integer value in reg bl
0505+  0774             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  0774             print_u8x:
0507+  0774 D7          	push a
0508+  0775 DD          	push bl
0509+  0776             
0510+  0776 07 61 05    	call itoa				; convert bl to char in A
0511+  0779 2F          	mov bl, al				; save al
0512+  077A 19 00       	mov al, 0
0513+  077C 05 03       	syscall sys_io				; display AH
0514+  077E 24          	mov ah, bl				; retrieve al
0515+  077F 19 00       	mov al, 0
0516+  0781 05 03       	syscall sys_io				; display AL
0517+  0783             
0518+  0783 EA          	pop bl
0519+  0784 E4          	pop a
0520+  0785 09          	ret
0521+  0786             
0522+  0786             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0786             ; print 8bit decimal unsigned number
0524+  0786             ; input number in AL
0525+  0786             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0786             print_u8d:
0527+  0786 D7          	push a
0528+  0787 D8          	push b
0529+  0788             
0530+  0788 22 00       	mov ah, 0
0531+  078A 26 64 00    	mov b, 100
0532+  078D AE          	div a, b
0533+  078E D8          	push b			; save remainder
0534+  078F B9 00       	cmp al, 0
0535+  0791 C6 9B 07    	je skip100
0536+  0794 6A 30       	add al, $30
0537+  0796 23          	mov ah, al
0538+  0797 19 00       	mov al, 0
0539+  0799 05 03       	syscall sys_io	; print coeff
0540+  079B             skip100:
0541+  079B E4          	pop a
0542+  079C 22 00       	mov ah, 0
0543+  079E 26 0A 00    	mov b, 10
0544+  07A1 AE          	div a, b
0545+  07A2 D8          	push b			; save remainder
0546+  07A3 B9 00       	cmp al, 0
0547+  07A5 C6 AF 07    	je skip10
0548+  07A8 6A 30       	add al, $30
0549+  07AA 23          	mov ah, al
0550+  07AB 19 00       	mov al, 0
0551+  07AD 05 03       	syscall sys_io	; print coeff
0552+  07AF             skip10:
0553+  07AF E4          	pop a
0554+  07B0 1B          	mov al, bl
0555+  07B1 6A 30       	add al, $30
0556+  07B3 23          	mov ah, al
0557+  07B4 19 00       	mov al, 0
0558+  07B6 05 03       	syscall sys_io	; print coeff
0559+  07B8 E5          	pop b
0560+  07B9 E4          	pop a
0561+  07BA 09          	ret
0562+  07BB             
0563+  07BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  07BB             ; INPUT 8BIT HEX INTEGER
0565+  07BB             ; read 8bit integer into AL
0566+  07BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  07BB             scan_u8x:
0568+  07BB F8 04 00    	enter 4
0569+  07BE D8          	push b
0570+  07BF DA          	push d
0571+  07C0             
0572+  07C0 FA FD FF    	lea d, [bp + -3]
0573+  07C3 07 A1 05    	call gets				; get number
0574+  07C6             
0575+  07C6 32          	mov bl, [d]
0576+  07C7 37          	mov bh, bl
0577+  07C8 33 01 00    	mov bl, [d + 1]
0578+  07CB 07 4F 05    	call atoi				; convert to int in AL
0579+  07CE             
0580+  07CE E7          	pop d
0581+  07CF E5          	pop b
0582+  07D0 F9          	leave
0583+  07D1 09          	ret
0584+  07D2             
0585+  07D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  07D2             ; input decimal number
0587+  07D2             ; result in A
0588+  07D2             ; 655'\0'
0589+  07D2             ; low--------high
0590+  07D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  07D2             scan_u16d:
0592+  07D2 F8 08 00    	enter 8
0593+  07D5 E2          	push si
0594+  07D6 D8          	push b
0595+  07D7 D9          	push c
0596+  07D8 DA          	push d
0597+  07D9 FA F9 FF    	lea d, [bp +- 7]
0598+  07DC 07 A1 05    	call gets
0599+  07DF 07 D7 04    	call strlen			; get string length in C
0600+  07E2 7E          	dec c
0601+  07E3 FD 4E       	mov si, d
0602+  07E5 12          	mov a, c
0603+  07E6 FD 99       	shl a
0604+  07E8 3B 37 05    	mov d, table_power
0605+  07EB 59          	add d, a
0606+  07EC 38 00 00    	mov c, 0
0607+  07EF             mul_loop:
0608+  07EF F6          	lodsb			; load ASCII to al
0609+  07F0 B9 00       	cmp al, 0
0610+  07F2 C6 05 08    	je mul_exit
0611+  07F5 6F 30       	sub al, $30		; make into integer
0612+  07F7 22 00       	mov ah, 0
0613+  07F9 2A          	mov b, [d]
0614+  07FA AC          	mul a, b			; result in B since it fits in 16bits
0615+  07FB 11          	mov a, b
0616+  07FC 28          	mov b, c
0617+  07FD 54          	add a, b
0618+  07FE 39          	mov c, a
0619+  07FF 63 02 00    	sub d, 2
0620+  0802 0A EF 07    	jmp mul_loop
0621+  0805             mul_exit:
0622+  0805 12          	mov a, c
0623+  0806 E7          	pop d
0624+  0807 E6          	pop c
0625+  0808 E5          	pop b
0626+  0809 EF          	pop si
0627+  080A F9          	leave
0628+  080B 09          	ret
0099   080C             ; --- end include block
0100   080C             
0101   080C             .end
tasm: Number of errors = 0
