0001   0000             ; --- Filename: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- begin text block
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; j
0011   0408             _for1_init:
0012   0408 26 02 00      mov b, 2
0013   040B D7            push a
0014   040C 11            mov a, b
0015   040D 45 FF FF      mov [bp + -1], a ; i
0016   0410 E4            pop a
0017   0411             _for1_cond:
0018   0411 26 01 00      mov b, 1
0019   0414 C0 00 00      cmp b, 0
0020   0417 C6 47 04      je _for1_exit
0021   041A             _for1_block:
0022   041A 2C FF FF      mov b, [bp + -1] ; i
0023   041D FD AB         swp b
0024   041F D8            push b
0025   0420 07 4A 04      call fact
0026   0423 51 02 00      add sp, 2
0027   0426 D7            push a
0028   0427 11            mov a, b
0029   0428 45 FD FF      mov [bp + -3], a ; j
0030   042B E4            pop a
0031   042C             ; --- begin inline asm block
0032   042C 17 FD FF          mov a, [bp + -3]
0033   042F 07 04 07          call print_u16d
0034   0432             
0035   0432 14 95 04          mov a, [s]
0036   0435 3C                mov d, a
0037   0436 07 DB 06          call puts
0038   0439                 ; --- end inline asm block
0039   0439             _for1_update:
0040   0439 2C FF FF      mov b, [bp + -1] ; i
0041   043C FD 77         inc b
0042   043E D7            push a
0043   043F 11            mov a, b
0044   0440 45 FF FF      mov [bp + -1], a ; i
0045   0443 E4            pop a
0046   0444 0A 11 04      jmp _for1_cond
0047   0447             _for1_exit:
0048   0447 F9            leave
0049   0448 05 0B         syscall sys_terminate_proc
0050   044A             fact:
0051   044A D2            push bp
0052   044B 9B            mov bp, sp
0053   044C 52 02 00      sub sp, 2 ; nn
0054   044F             _if2_cond:
0055   044F 2C 05 00      mov b, [bp + 5] ; n
0056   0452 D7            push a
0057   0453 11            mov a, b
0058   0454 26 01 00      mov b, 1
0059   0457 B0            cmp a, b
0060   0458 0E            lodflgs
0061   0459 87 01         and al, %00000001
0062   045B 22 00         mov ah, 0
0063   045D 27            mov b, a
0064   045E E4            pop a
0065   045F C0 00 00      cmp b, 0
0066   0462 C6 6D 04      je _if2_else_block
0067   0465             _if2_block:
0068   0465 26 01 00      mov b, 1
0069   0468 F9            leave
0070   0469 09            ret
0071   046A 0A 93 04      jmp _if2_exit
0072   046D             _if2_else_block:
0073   046D 2C 05 00      mov b, [bp + 5] ; n
0074   0470 D7            push a
0075   0471 11            mov a, b
0076   0472 2C 05 00      mov b, [bp + 5] ; n
0077   0475 D7            push a
0078   0476 11            mov a, b
0079   0477 26 01 00      mov b, 1
0080   047A 60            sub a, b
0081   047B 27            mov b, a
0082   047C E4            pop a
0083   047D FD AB         swp b
0084   047F D8            push b
0085   0480 07 4A 04      call fact
0086   0483 51 02 00      add sp, 2
0087   0486 AC            mul a, b
0088   0487 E4            pop a
0089   0488 D7            push a
0090   0489 11            mov a, b
0091   048A 45 FF FF      mov [bp + -1], a ; nn
0092   048D E4            pop a
0093   048E 2C FF FF      mov b, [bp + -1] ; nn
0094   0491 F9            leave
0095   0492 09            ret
0096   0493             _if2_exit:
0097   0493             ; --- end text block
0098   0493             
0099   0493             ; --- begin data block
0100   0493 0A 00       s_data: .db "\n", 0
0101   0495 93 04       s: .dw s_data
0102   0497             ; --- end data block
0103   0497             ; --- begin include block
0104   0497             .include "lib/stdio.asm"
0001+  0497             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0497             ; stdio.s
0003+  0497             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0497             .include "lib/string.asm"
0001++ 0497             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0497             ; string.s
0003++ 0497             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0497             
0005++ 0497             
0006++ 0497             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0497             ; strrev
0008++ 0497             ; reverse a string
0009++ 0497             ; D = string address
0010++ 0497             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0497             ; 01234
0012++ 0497             strrev:
0013++ 0497 4B          	pusha
0014++ 0498 07 DE 04    	call strlen	; length in C
0015++ 049B 12          	mov a, c
0016++ 049C AF 01 00    	cmp a, 1
0017++ 049F D0 B9 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 04A2 7D          	dec a
0019++ 04A3 FD 4E       	mov si, d	; beginning of string
0020++ 04A5 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 04A7 59          	add d, a	; end of string
0022++ 04A8 12          	mov a, c
0023++ 04A9 FD 9B       	shr a		; divide by 2
0024++ 04AB 39          	mov c, a	; C now counts the steps
0025++ 04AC             strrev_L0:
0026++ 04AC 32          	mov bl, [d]	; save load right-side char into BL
0027++ 04AD F6          	lodsb		; load left-side char into AL; increase SI
0028++ 04AE 3E          	mov [d], al	; store left char into right side
0029++ 04AF 1B          	mov al, bl
0030++ 04B0 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 04B1 7E          	dec c
0032++ 04B2 7F          	dec d
0033++ 04B3 C2 00 00    	cmp c, 0
0034++ 04B6 C7 AC 04    	jne strrev_L0
0035++ 04B9             strrev_end:
0036++ 04B9 4C          	popa
0037++ 04BA 09          	ret
0038++ 04BB             	
0039++ 04BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 04BB             ; strchr
0041++ 04BB             ; search string in D for char in AL
0042++ 04BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 04BB             strchr:
0044++ 04BB             strchr_L0:
0045++ 04BB 32          	mov bl, [d]
0046++ 04BC C1 00       	cmp bl, 0
0047++ 04BE C6 C9 04    	je strchr_end
0048++ 04C1 BA          	cmp al, bl
0049++ 04C2 C6 C9 04    	je strchr_end
0050++ 04C5 79          	inc d
0051++ 04C6 0A BB 04    	jmp strchr_L0
0052++ 04C9             strchr_end:
0053++ 04C9 1B          	mov al, bl
0054++ 04CA 09          	ret
0055++ 04CB             
0056++ 04CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 04CB             ; strstr
0058++ 04CB             ; find sub-string
0059++ 04CB             ; str1 in SI
0060++ 04CB             ; str2 in DI
0061++ 04CB             ; SI points to end of source string
0062++ 04CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 04CB             strstr:
0064++ 04CB DB          	push al
0065++ 04CC DA          	push d
0066++ 04CD E3          	push di
0067++ 04CE             strstr_loop:
0068++ 04CE F3          	cmpsb					; compare a byte of the strings
0069++ 04CF C7 DA 04    	jne strstr_ret
0070++ 04D2 FC 00 00    	lea d, [di + 0]
0071++ 04D5 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 04D7 C7 CE 04    	jne strstr_loop				; equal chars but not at end
0073++ 04DA             strstr_ret:
0074++ 04DA F0          	pop di
0075++ 04DB E7          	pop d
0076++ 04DC E8          	pop al
0077++ 04DD 09          	ret
0078++ 04DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 04DE             ; length of null terminated string
0080++ 04DE             ; result in C
0081++ 04DE             ; pointer in D
0082++ 04DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 04DE             strlen:
0084++ 04DE DA          	push d
0085++ 04DF 38 00 00    	mov c, 0
0086++ 04E2             strlen_L1:
0087++ 04E2 BD 00       	cmp byte [d], 0
0088++ 04E4 C6 EC 04    	je strlen_ret
0089++ 04E7 79          	inc d
0090++ 04E8 78          	inc c
0091++ 04E9 0A E2 04    	jmp strlen_L1
0092++ 04EC             strlen_ret:
0093++ 04EC E7          	pop d
0094++ 04ED 09          	ret
0095++ 04EE             
0096++ 04EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04EE             ; STRCMP
0098++ 04EE             ; compare two strings
0099++ 04EE             ; str1 in SI
0100++ 04EE             ; str2 in DI
0101++ 04EE             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04EE             strcmp:
0104++ 04EE DB          	push al
0105++ 04EF DA          	push d
0106++ 04F0 E3          	push di
0107++ 04F1 E2          	push si
0108++ 04F2             strcmp_loop:
0109++ 04F2 F3          	cmpsb					; compare a byte of the strings
0110++ 04F3 C7 FE 04    	jne strcmp_ret
0111++ 04F6 FB FF FF    	lea d, [si +- 1]
0112++ 04F9 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04FB C7 F2 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04FE             strcmp_ret:
0115++ 04FE EF          	pop si
0116++ 04FF F0          	pop di
0117++ 0500 E7          	pop d
0118++ 0501 E8          	pop al
0119++ 0502 09          	ret
0120++ 0503             
0121++ 0503             
0122++ 0503             ; STRCPY
0123++ 0503             ; copy null terminated string from SI to DI
0124++ 0503             ; source in SI
0125++ 0503             ; destination in DI
0126++ 0503             strcpy:
0127++ 0503 E2          	push si
0128++ 0504 E3          	push di
0129++ 0505 DB          	push al
0130++ 0506             strcpy_L1:
0131++ 0506 F6          	lodsb
0132++ 0507 F7          	stosb
0133++ 0508 B9 00       	cmp al, 0
0134++ 050A C7 06 05    	jne strcpy_L1
0135++ 050D             strcpy_end:
0136++ 050D E8          	pop al
0137++ 050E F0          	pop di
0138++ 050F EF          	pop si
0139++ 0510 09          	ret
0140++ 0511             
0141++ 0511             ; STRCAT
0142++ 0511             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0511             ; source in SI
0144++ 0511             ; destination in DI
0145++ 0511             strcat:
0146++ 0511 E2          	push si
0147++ 0512 E3          	push di
0148++ 0513 D7          	push a
0149++ 0514 DA          	push d
0150++ 0515 50          	mov a, di
0151++ 0516 3C          	mov d, a
0152++ 0517             strcat_goto_end_L1:
0153++ 0517 BD 00       	cmp byte[d], 0
0154++ 0519 C6 20 05    	je strcat_start
0155++ 051C 79          	inc d
0156++ 051D 0A 17 05    	jmp strcat_goto_end_L1
0157++ 0520             strcat_start:
0158++ 0520 FD 50       	mov di, d
0159++ 0522             strcat_L1:
0160++ 0522 F6          	lodsb
0161++ 0523 F7          	stosb
0162++ 0524 B9 00       	cmp al, 0
0163++ 0526 C7 22 05    	jne strcat_L1
0164++ 0529             strcat_end:
0165++ 0529 E7          	pop d
0166++ 052A E4          	pop a
0167++ 052B F0          	pop di
0168++ 052C EF          	pop si
0169++ 052D 09          	ret
0005+  052E             
0006+  052E 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0532 34 35 36 37 
0006+  0536 38 39 41 42 
0006+  053A 43 44 45 46 
0007+  053E             
0008+  053E 01 00       table_power:.dw 1
0009+  0540 0A 00       			.dw 10
0010+  0542 64 00       			.dw 100
0011+  0544 E8 03       			.dw 1000
0012+  0546 10 27       			.dw 10000
0013+  0548             
0014+  0548             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  0548             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  0548             ; ASCII in BL
0017+  0548             ; result in AL
0018+  0548             ; ascii for F = 0100 0110
0019+  0548             ; ascii for 9 = 0011 1001
0020+  0548             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  0548             hex_ascii_encode:
0022+  0548 1B          	mov al, bl
0023+  0549 93 40       	test al, $40				; test if letter or number
0024+  054B C7 51 05    	jnz hex_letter
0025+  054E 87 0F       	and al, $0F				; get number
0026+  0550 09          	ret
0027+  0551             hex_letter:
0028+  0551 87 0F       	and al, $0F				; get letter
0029+  0553 6A 09       	add al, 9
0030+  0555 09          	ret
0031+  0556             
0032+  0556             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  0556             ; ATOI
0034+  0556             ; 2 letter hex string in B
0035+  0556             ; 8bit integer returned in AL
0036+  0556             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  0556             atoi:
0038+  0556 D8          	push b
0039+  0557 07 48 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  055A 30          	mov bl, bh
0041+  055B DB          	push al					; save a
0042+  055C 07 48 05    	call hex_ascii_encode
0043+  055F EA          	pop bl	
0044+  0560 FD 9E 04    	shl al, 4
0045+  0563 8C          	or al, bl
0046+  0564 E5          	pop b
0047+  0565 09          	ret	
0048+  0566             
0049+  0566             
0050+  0566             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0566             ; printf
0052+  0566             ; no need for explanations!
0053+  0566             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  0566             printf:
0055+  0566 09          	ret
0056+  0567             
0057+  0567             
0058+  0567             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0567             ; scanf
0060+  0567             ; no need for explanations!
0061+  0567             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0567             scanf:
0063+  0567 09          	ret
0064+  0568             
0065+  0568             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0568             ; ITOA
0067+  0568             ; 8bit value in BL
0068+  0568             ; 2 byte ASCII result in A
0069+  0568             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  0568             itoa:
0071+  0568 DA          	push d
0072+  0569 D8          	push b
0073+  056A A7 00       	mov bh, 0
0074+  056C FD A4 04    	shr bl, 4	
0075+  056F 74          	mov d, b
0076+  0570 1F 2E 05    	mov al, [d + s_hex_digits]
0077+  0573 23          	mov ah, al
0078+  0574             	
0079+  0574 E5          	pop b
0080+  0575 D8          	push b
0081+  0576 A7 00       	mov bh, 0
0082+  0578 FD 87 0F    	and bl, $0F
0083+  057B 74          	mov d, b
0084+  057C 1F 2E 05    	mov al, [d + s_hex_digits]
0085+  057F E5          	pop b
0086+  0580 E7          	pop d
0087+  0581 09          	ret
0088+  0582             
0089+  0582             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0582             ; HEX STRING TO BINARY
0091+  0582             ; di = destination address
0092+  0582             ; si = source
0093+  0582             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0582             hex_to_int:
0095+  0582             hex_to_int_L1:
0096+  0582 F6          	lodsb					; load from [SI] to AL
0097+  0583 B9 00       	cmp al, 0				; check if ASCII 0
0098+  0585 C6 92 05    	jz hex_to_int_ret
0099+  0588 36          	mov bh, al
0100+  0589 F6          	lodsb
0101+  058A 2F          	mov bl, al
0102+  058B 07 56 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  058E F7          	stosb					; store AL to [DI]
0104+  058F 0A 82 05    	jmp hex_to_int_L1
0105+  0592             hex_to_int_ret:
0106+  0592 09          	ret		
0107+  0593             
0108+  0593             
0109+  0593             
0110+  0593             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0593             ; GETCHAR
0112+  0593             ; char in ah
0113+  0593             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0593             getchar:
0115+  0593 DB          	push al
0116+  0594             getchar_retry:
0117+  0594 FD 0C       	sti
0118+  0596 19 01       	mov al, 1
0119+  0598 05 03       	syscall sys_io			; receive in AH
0120+  059A B9 00       	cmp al, 0			; check if any char was receive
0121+  059C C6 94 05    	je getchar_retry
0122+  059F E8          	pop al
0123+  05A0 09          	ret
0124+  05A1             
0125+  05A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  05A1             ; PUTCHAR
0127+  05A1             ; char in ah
0128+  05A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  05A1             putchar:
0130+  05A1 D7          	push a
0131+  05A2 19 00       	mov al, 0
0132+  05A4 05 03       	syscall sys_io			; char in AH
0133+  05A6 E4          	pop a
0134+  05A7 09          	ret
0135+  05A8             
0136+  05A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  05A8             ;; INPUT A STRING
0138+  05A8             ;; terminates with null
0139+  05A8             ;; pointer in D
0140+  05A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  05A8             gets:
0142+  05A8 D7          	push a
0143+  05A9 DA          	push d
0144+  05AA             gets_loop:
0145+  05AA FD 0C       	sti
0146+  05AC 19 01       	mov al, 1
0147+  05AE 05 03       	syscall sys_io			; receive in AH
0148+  05B0 B9 00       	cmp al, 0				; check error code (AL)
0149+  05B2 C6 AA 05    	je gets_loop			; if no char received, retry
0150+  05B5             
0151+  05B5 76 1B       	cmp ah, 27
0152+  05B7 C6 D8 05    	je gets_telnet_escape
0153+  05BA 76 0A       	cmp ah, $0A				; LF
0154+  05BC C6 31 06    	je gets_end
0155+  05BF 76 0D       	cmp ah, $0D				; CR
0156+  05C1 C6 31 06    	je gets_end
0157+  05C4 76 5C       	cmp ah, $5C				; '\\'
0158+  05C6 C6 08 06    	je gets_escape
0159+  05C9             	
0160+  05C9 76 08       	cmp ah, $08			; check for backspace
0161+  05CB C6 D4 05    	je gets_backspace
0162+  05CE             
0163+  05CE 1A          	mov al, ah
0164+  05CF 3E          	mov [d], al
0165+  05D0 79          	inc d
0166+  05D1 0A AA 05    	jmp gets_loop
0167+  05D4             gets_backspace:
0168+  05D4 7F          	dec d
0169+  05D5 0A AA 05    	jmp gets_loop
0170+  05D8             gets_telnet_escape:
0171+  05D8 FD 0C       	sti
0172+  05DA 19 01       	mov al, 1
0173+  05DC 05 03       	syscall sys_io				; receive in AH without echo
0174+  05DE B9 00       	cmp al, 0					; check error code (AL)
0175+  05E0 C6 D8 05    	je gets_telnet_escape		; if no char received, retry
0176+  05E3 76 5B       	cmp ah, '['
0177+  05E5 C7 AA 05    	jne gets_loop
0178+  05E8             gets_telnet_escape_phase2:
0179+  05E8 FD 0C       	sti
0180+  05EA 19 01       	mov al, 1
0181+  05EC 05 03       	syscall sys_io					; receive in AH without echo
0182+  05EE B9 00       	cmp al, 0						; check error code (AL)
0183+  05F0 C6 E8 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  05F3 76 44       	cmp ah, 'D'
0185+  05F5 C6 00 06    	je gets_left_arrow
0186+  05F8 76 43       	cmp ah, 'C'
0187+  05FA C6 04 06    	je gets_right_arrow
0188+  05FD 0A AA 05    	jmp gets_loop
0189+  0600             gets_left_arrow:
0190+  0600 7F          	dec d
0191+  0601 0A AA 05    	jmp gets_loop
0192+  0604             gets_right_arrow:
0193+  0604 79          	inc d
0194+  0605 0A AA 05    	jmp gets_loop
0195+  0608             gets_escape:
0196+  0608 FD 0C       	sti
0197+  060A 19 01       	mov al, 1
0198+  060C 05 03       	syscall sys_io			; receive in AH
0199+  060E B9 00       	cmp al, 0				; check error code (AL)
0200+  0610 C6 08 06    	je gets_escape			; if no char received, retry
0201+  0613 76 6E       	cmp ah, 'n'
0202+  0615 C6 23 06    	je gets_LF
0203+  0618 76 72       	cmp ah, 'r'
0204+  061A C6 2A 06    	je gets_CR
0205+  061D 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  061E 3E          	mov [d], al
0207+  061F 79          	inc d
0208+  0620 0A AA 05    	jmp gets_loop
0209+  0623             gets_LF:
0210+  0623 19 0A       	mov al, $0A
0211+  0625 3E          	mov [d], al
0212+  0626 79          	inc d
0213+  0627 0A AA 05    	jmp gets_loop
0214+  062A             gets_CR:
0215+  062A 19 0D       	mov al, $0D
0216+  062C 3E          	mov [d], al
0217+  062D 79          	inc d
0218+  062E 0A AA 05    	jmp gets_loop
0219+  0631             gets_end:
0220+  0631 19 00       	mov al, 0
0221+  0633 3E          	mov [d], al				; terminate string
0222+  0634 E7          	pop d
0223+  0635 E4          	pop a
0224+  0636 09          	ret
0225+  0637             
0226+  0637             
0227+  0637             
0228+  0637             
0229+  0637             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  0637             ;; INPUT TEXT
0231+  0637             ;; terminated with CTRL+D
0232+  0637             ;; pointer in D
0233+  0637             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  0637             gettxt:
0235+  0637 D7          	push a
0236+  0638 DA          	push d
0237+  0639             gettxt_loop:
0238+  0639 19 01       	mov al, 1
0239+  063B 05 03       	syscall sys_io			; receive in AH
0240+  063D B9 00       	cmp al, 0				; check error code (AL)
0241+  063F C6 39 06    	je gettxt_loop		; if no char received, retry
0242+  0642 76 04       	cmp ah, 4			; EOT
0243+  0644 C6 82 06    	je gettxt_end
0244+  0647 76 08       	cmp ah, $08			; check for backspace
0245+  0649 C6 7E 06    	je gettxt_backspace
0246+  064C 76 5C       	cmp ah, $5C				; '\\'
0247+  064E C6 57 06    	je gettxt_escape
0248+  0651 1A          	mov al, ah
0249+  0652 3E          	mov [d], al
0250+  0653 79          	inc d
0251+  0654 0A 39 06    	jmp gettxt_loop
0252+  0657             gettxt_escape:
0253+  0657 19 01       	mov al, 1
0254+  0659 05 03       	syscall sys_io			; receive in AH
0255+  065B B9 00       	cmp al, 0				; check error code (AL)
0256+  065D C6 57 06    	je gettxt_escape		; if no char received, retry
0257+  0660 76 6E       	cmp ah, 'n'
0258+  0662 C6 70 06    	je gettxt_LF
0259+  0665 76 72       	cmp ah, 'r'
0260+  0667 C6 77 06    	je gettxt_CR
0261+  066A 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  066B 3E          	mov [d], al
0263+  066C 79          	inc d
0264+  066D 0A 39 06    	jmp gettxt_loop
0265+  0670             gettxt_LF:
0266+  0670 19 0A       	mov al, $0A
0267+  0672 3E          	mov [d], al
0268+  0673 79          	inc d
0269+  0674 0A 39 06    	jmp gettxt_loop
0270+  0677             gettxt_CR:
0271+  0677 19 0D       	mov al, $0D
0272+  0679 3E          	mov [d], al
0273+  067A 79          	inc d
0274+  067B 0A 39 06    	jmp gettxt_loop
0275+  067E             gettxt_backspace:
0276+  067E 7F          	dec d
0277+  067F 0A 39 06    	jmp gettxt_loop
0278+  0682             gettxt_end:
0279+  0682 19 00       	mov al, 0
0280+  0684 3E          	mov [d], al				; terminate string
0281+  0685 E7          	pop d
0282+  0686 E4          	pop a
0283+  0687 09          	ret
0284+  0688             
0285+  0688             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0688             ; PRINT NEW LINE
0287+  0688             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  0688             printnl:
0289+  0688 D7          	push a
0290+  0689 10 00 0A    	mov a, $0A00
0291+  068C 05 03       	syscall sys_io
0292+  068E 10 00 0D    	mov a, $0D00
0293+  0691 05 03       	syscall sys_io
0294+  0693 E4          	pop a
0295+  0694 09          	ret
0296+  0695             
0297+  0695             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  0695             ; strtoint
0299+  0695             ; 4 digit hex string number in d
0300+  0695             ; integer returned in A
0301+  0695             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  0695             strtointx:
0303+  0695 D8          	push b
0304+  0696 32          	mov bl, [d]
0305+  0697 37          	mov bh, bl
0306+  0698 33 01 00    	mov bl, [d + 1]
0307+  069B 07 56 05    	call atoi				; convert to int in AL
0308+  069E 23          	mov ah, al				; move to AH
0309+  069F 33 02 00    	mov bl, [d + 2]
0310+  06A2 37          	mov bh, bl
0311+  06A3 33 03 00    	mov bl, [d + 3]
0312+  06A6 07 56 05    	call atoi				; convert to int in AL
0313+  06A9 E5          	pop b
0314+  06AA 09          	ret
0315+  06AB             
0316+  06AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  06AB             ; strtoint
0318+  06AB             ; 5 digit base10 string number in d
0319+  06AB             ; integer returned in A
0320+  06AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  06AB             strtoint:
0322+  06AB E2          	push si
0323+  06AC D8          	push b
0324+  06AD D9          	push c
0325+  06AE DA          	push d
0326+  06AF 07 DE 04    	call strlen			; get string length in C
0327+  06B2 7E          	dec c
0328+  06B3 FD 4E       	mov si, d
0329+  06B5 12          	mov a, c
0330+  06B6 FD 99       	shl a
0331+  06B8 3B 3E 05    	mov d, table_power
0332+  06BB 59          	add d, a
0333+  06BC 38 00 00    	mov c, 0
0334+  06BF             strtoint_L0:
0335+  06BF F6          	lodsb			; load ASCII to al
0336+  06C0 B9 00       	cmp al, 0
0337+  06C2 C6 D5 06    	je strtoint_end
0338+  06C5 6F 30       	sub al, $30		; make into integer
0339+  06C7 22 00       	mov ah, 0
0340+  06C9 2A          	mov b, [d]
0341+  06CA AC          	mul a, b			; result in B since it fits in 16bits
0342+  06CB 11          	mov a, b
0343+  06CC 28          	mov b, c
0344+  06CD 54          	add a, b
0345+  06CE 39          	mov c, a
0346+  06CF 63 02 00    	sub d, 2
0347+  06D2 0A BF 06    	jmp strtoint_L0
0348+  06D5             strtoint_end:
0349+  06D5 12          	mov a, c
0350+  06D6 E7          	pop d
0351+  06D7 E6          	pop c
0352+  06D8 E5          	pop b
0353+  06D9 EF          	pop si
0354+  06DA 09          	ret
0355+  06DB             
0356+  06DB             
0357+  06DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  06DB             ; PRINT NULL TERMINATED STRING
0359+  06DB             ; pointer in D
0360+  06DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  06DB             puts:
0362+  06DB D7          	push a
0363+  06DC DA          	push d
0364+  06DD             puts_L1:
0365+  06DD 1E          	mov al, [d]
0366+  06DE B9 00       	cmp al, 0
0367+  06E0 C6 EC 06    	jz puts_END
0368+  06E3 23          	mov ah, al
0369+  06E4 19 00       	mov al, 0
0370+  06E6 05 03       	syscall sys_io
0371+  06E8 79          	inc d
0372+  06E9 0A DD 06    	jmp puts_L1
0373+  06EC             puts_END:
0374+  06EC E7          	pop d
0375+  06ED E4          	pop a
0376+  06EE 09          	ret
0377+  06EF             
0378+  06EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  06EF             ; PRINT N SIZE STRING
0380+  06EF             ; pointer in D
0381+  06EF             ; size in C
0382+  06EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  06EF             putsn:
0384+  06EF DB          	push al
0385+  06F0 DA          	push d
0386+  06F1 D9          	push c
0387+  06F2             putsn_L0:
0388+  06F2 1E          	mov al, [d]
0389+  06F3 23          	mov ah, al
0390+  06F4 19 00       	mov al, 0
0391+  06F6 05 03       	syscall sys_io
0392+  06F8 79          	inc d
0393+  06F9 7E          	dec c	
0394+  06FA C2 00 00    	cmp c, 0
0395+  06FD C7 F2 06    	jne putsn_L0
0396+  0700             putsn_end:
0397+  0700 E6          	pop c
0398+  0701 E7          	pop d
0399+  0702 E8          	pop al
0400+  0703 09          	ret
0401+  0704             
0402+  0704             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  0704             ; print 16bit decimal number
0404+  0704             ; input number in A
0405+  0704             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  0704             print_u16d:
0407+  0704 D7          	push a
0408+  0705 D8          	push b
0409+  0706 26 10 27    	mov b, 10000
0410+  0709 AE          	div a, b			; get 10000 coeff.
0411+  070A 07 30 07    	call print_number
0412+  070D 11          	mov a, b
0413+  070E 26 E8 03    	mov b, 1000
0414+  0711 AE          	div a, b			; get 10000 coeff.
0415+  0712 07 30 07    	call print_number
0416+  0715 11          	mov a, b
0417+  0716 26 64 00    	mov b, 100
0418+  0719 AE          	div a, b
0419+  071A 07 30 07    	call print_number
0420+  071D 11          	mov a, b
0421+  071E 26 0A 00    	mov b, 10
0422+  0721 AE          	div a, b
0423+  0722 07 30 07    	call print_number
0424+  0725 11          	mov a, b
0425+  0726 6A 30       	add al, $30
0426+  0728 23          	mov ah, al
0427+  0729 19 00       	mov al, 0
0428+  072B 05 03       	syscall sys_io	; print coeff
0429+  072D E5          	pop b
0430+  072E E4          	pop a
0431+  072F 09          	ret
0432+  0730             
0433+  0730             
0434+  0730             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  0730             ; if A == 0, print space
0436+  0730             ; else print A
0437+  0730             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  0730             print_number:
0439+  0730 6A 30       	add al, $30
0440+  0732 23          	mov ah, al
0441+  0733 07 A1 05    	call putchar
0442+  0736 09          	ret
0443+  0737             
0444+  0737             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  0737             ; PRINT 16BIT HEX INTEGER
0446+  0737             ; integer value in reg B
0447+  0737             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  0737             print_u16x:
0449+  0737 D7          	push a
0450+  0738 D8          	push b
0451+  0739 DD          	push bl
0452+  073A 30          	mov bl, bh
0453+  073B 07 68 05    	call itoa				; convert bh to char in A
0454+  073E 2F          	mov bl, al				; save al
0455+  073F 19 00       	mov al, 0
0456+  0741 05 03       	syscall sys_io				; display AH
0457+  0743 24          	mov ah, bl				; retrieve al
0458+  0744 19 00       	mov al, 0
0459+  0746 05 03       	syscall sys_io				; display AL
0460+  0748             
0461+  0748 EA          	pop bl
0462+  0749 07 68 05    	call itoa				; convert bh to char in A
0463+  074C 2F          	mov bl, al				; save al
0464+  074D 19 00       	mov al, 0
0465+  074F 05 03       	syscall sys_io				; display AH
0466+  0751 24          	mov ah, bl				; retrieve al
0467+  0752 19 00       	mov al, 0
0468+  0754 05 03       	syscall sys_io				; display AL
0469+  0756             
0470+  0756 E5          	pop b
0471+  0757 E4          	pop a
0472+  0758 09          	ret
0473+  0759             
0474+  0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  0759             ; INPUT 16BIT HEX INTEGER
0476+  0759             ; read 16bit integer into A
0477+  0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  0759             scan_u16x:
0479+  0759 F8 10 00    	enter 16
0480+  075C D8          	push b
0481+  075D DA          	push d
0482+  075E             
0483+  075E FA F1 FF    	lea d, [bp + -15]
0484+  0761 07 A8 05    	call gets				; get number
0485+  0764             
0486+  0764 32          	mov bl, [d]
0487+  0765 37          	mov bh, bl
0488+  0766 33 01 00    	mov bl, [d + 1]
0489+  0769 07 56 05    	call atoi				; convert to int in AL
0490+  076C 23          	mov ah, al				; move to AH
0491+  076D             
0492+  076D 33 02 00    	mov bl, [d + 2]
0493+  0770 37          	mov bh, bl
0494+  0771 33 03 00    	mov bl, [d + 3]
0495+  0774 07 56 05    	call atoi				; convert to int in AL
0496+  0777             
0497+  0777 E7          	pop d
0498+  0778 E5          	pop b
0499+  0779 F9          	leave
0500+  077A 09          	ret
0501+  077B             
0502+  077B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  077B             ; PRINT 8bit HEX INTEGER
0504+  077B             ; integer value in reg bl
0505+  077B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  077B             print_u8x:
0507+  077B D7          	push a
0508+  077C DD          	push bl
0509+  077D             
0510+  077D 07 68 05    	call itoa				; convert bl to char in A
0511+  0780 2F          	mov bl, al				; save al
0512+  0781 19 00       	mov al, 0
0513+  0783 05 03       	syscall sys_io				; display AH
0514+  0785 24          	mov ah, bl				; retrieve al
0515+  0786 19 00       	mov al, 0
0516+  0788 05 03       	syscall sys_io				; display AL
0517+  078A             
0518+  078A EA          	pop bl
0519+  078B E4          	pop a
0520+  078C 09          	ret
0521+  078D             
0522+  078D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  078D             ; print 8bit decimal unsigned number
0524+  078D             ; input number in AL
0525+  078D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  078D             print_u8d:
0527+  078D D7          	push a
0528+  078E D8          	push b
0529+  078F             
0530+  078F 22 00       	mov ah, 0
0531+  0791 26 64 00    	mov b, 100
0532+  0794 AE          	div a, b
0533+  0795 D8          	push b			; save remainder
0534+  0796 B9 00       	cmp al, 0
0535+  0798 C6 A2 07    	je skip100
0536+  079B 6A 30       	add al, $30
0537+  079D 23          	mov ah, al
0538+  079E 19 00       	mov al, 0
0539+  07A0 05 03       	syscall sys_io	; print coeff
0540+  07A2             skip100:
0541+  07A2 E4          	pop a
0542+  07A3 22 00       	mov ah, 0
0543+  07A5 26 0A 00    	mov b, 10
0544+  07A8 AE          	div a, b
0545+  07A9 D8          	push b			; save remainder
0546+  07AA B9 00       	cmp al, 0
0547+  07AC C6 B6 07    	je skip10
0548+  07AF 6A 30       	add al, $30
0549+  07B1 23          	mov ah, al
0550+  07B2 19 00       	mov al, 0
0551+  07B4 05 03       	syscall sys_io	; print coeff
0552+  07B6             skip10:
0553+  07B6 E4          	pop a
0554+  07B7 1B          	mov al, bl
0555+  07B8 6A 30       	add al, $30
0556+  07BA 23          	mov ah, al
0557+  07BB 19 00       	mov al, 0
0558+  07BD 05 03       	syscall sys_io	; print coeff
0559+  07BF E5          	pop b
0560+  07C0 E4          	pop a
0561+  07C1 09          	ret
0562+  07C2             
0563+  07C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  07C2             ; INPUT 8BIT HEX INTEGER
0565+  07C2             ; read 8bit integer into AL
0566+  07C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  07C2             scan_u8x:
0568+  07C2 F8 04 00    	enter 4
0569+  07C5 D8          	push b
0570+  07C6 DA          	push d
0571+  07C7             
0572+  07C7 FA FD FF    	lea d, [bp + -3]
0573+  07CA 07 A8 05    	call gets				; get number
0574+  07CD             
0575+  07CD 32          	mov bl, [d]
0576+  07CE 37          	mov bh, bl
0577+  07CF 33 01 00    	mov bl, [d + 1]
0578+  07D2 07 56 05    	call atoi				; convert to int in AL
0579+  07D5             
0580+  07D5 E7          	pop d
0581+  07D6 E5          	pop b
0582+  07D7 F9          	leave
0583+  07D8 09          	ret
0584+  07D9             
0585+  07D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  07D9             ; input decimal number
0587+  07D9             ; result in A
0588+  07D9             ; 655'\0'
0589+  07D9             ; low--------high
0590+  07D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  07D9             scan_u16d:
0592+  07D9 F8 08 00    	enter 8
0593+  07DC E2          	push si
0594+  07DD D8          	push b
0595+  07DE D9          	push c
0596+  07DF DA          	push d
0597+  07E0 FA F9 FF    	lea d, [bp +- 7]
0598+  07E3 07 A8 05    	call gets
0599+  07E6 07 DE 04    	call strlen			; get string length in C
0600+  07E9 7E          	dec c
0601+  07EA FD 4E       	mov si, d
0602+  07EC 12          	mov a, c
0603+  07ED FD 99       	shl a
0604+  07EF 3B 3E 05    	mov d, table_power
0605+  07F2 59          	add d, a
0606+  07F3 38 00 00    	mov c, 0
0607+  07F6             mul_loop:
0608+  07F6 F6          	lodsb			; load ASCII to al
0609+  07F7 B9 00       	cmp al, 0
0610+  07F9 C6 0C 08    	je mul_exit
0611+  07FC 6F 30       	sub al, $30		; make into integer
0612+  07FE 22 00       	mov ah, 0
0613+  0800 2A          	mov b, [d]
0614+  0801 AC          	mul a, b			; result in B since it fits in 16bits
0615+  0802 11          	mov a, b
0616+  0803 28          	mov b, c
0617+  0804 54          	add a, b
0618+  0805 39          	mov c, a
0619+  0806 63 02 00    	sub d, 2
0620+  0809 0A F6 07    	jmp mul_loop
0621+  080C             mul_exit:
0622+  080C 12          	mov a, c
0623+  080D E7          	pop d
0624+  080E E6          	pop c
0625+  080F E5          	pop b
0626+  0810 EF          	pop si
0627+  0811 F9          	leave
0628+  0812 09          	ret
0105   0813             ; --- end include block
0106   0813             
0107   0813             .end
tasm: Number of errors = 0
