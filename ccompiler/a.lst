0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 FD FA 01 00   lea d, [sp + 1]
0012   0409 10 7B 00      mov a, $7b
0013   040C 43            mov [d], a
0014   040D 52 02 00      sub sp, 2 ; i2
0015   0410 FD FA 01 00   lea d, [sp + 1]
0016   0414 10 41 00      mov a, $41
0017   0417 43            mov [d], a
0018   0418 52 01 00      sub sp, 1 ; c
0019   041B FD FA 01 00   lea d, [sp + 1]
0020   041F 19 48         mov al, $48
0021   0421 3E            mov [d], al
0022   0422 52 01 00      sub sp, 1 ; c2
0023   0425 FD FA 01 00   lea d, [sp + 1]
0024   0429 19 42         mov al, $42
0025   042B 3E            mov [d], al
0026   042C 2C FF FF      mov b, [bp + -1] ; i
0027   042F FD AB         swp b
0028   0431 D8            push b
0029   0432 07 E8 04      call print_num
0030   0435 51 02 00      add sp, 2
0031   0438 26 12 06      mov b, __string_0 ; "\n"
0032   043B FD AB         swp b
0033   043D D8            push b
0034   043E 07 07 06      call print
0035   0441 51 02 00      add sp, 2
0036   0444 2C FD FF      mov b, [bp + -3] ; i2
0037   0447 FD AB         swp b
0038   0449 D8            push b
0039   044A 07 E8 04      call print_num
0040   044D 51 02 00      add sp, 2
0041   0450 26 12 06      mov b, __string_0 ; "\n"
0042   0453 FD AB         swp b
0043   0455 D8            push b
0044   0456 07 07 06      call print
0045   0459 51 02 00      add sp, 2
0046   045C 34 FC FF      mov bl, [bp + -4] ; c
0047   045F A7 00         mov bh, 0
0048   0461 DD            push bl
0049   0462 07 EC 05      call _putchar
0050   0465 51 01 00      add sp, 1
0051   0468 26 12 06      mov b, __string_0 ; "\n"
0052   046B FD AB         swp b
0053   046D D8            push b
0054   046E 07 07 06      call print
0055   0471 51 02 00      add sp, 2
0056   0474 34 FB FF      mov bl, [bp + -5] ; c2
0057   0477 A7 00         mov bh, 0
0058   0479 DD            push bl
0059   047A 07 EC 05      call _putchar
0060   047D 51 01 00      add sp, 1
0061   0480 26 12 06      mov b, __string_0 ; "\n"
0062   0483 FD AB         swp b
0063   0485 D8            push b
0064   0486 07 07 06      call print
0065   0489 51 02 00      add sp, 2
0066   048C F9            leave
0067   048D 05 0B         syscall sys_terminate_proc
0068   048F             
0069   048F             _gets:
0070   048F D2            push bp
0071   0490 9B            mov bp, sp
0072   0491             
0073   0491             ; --- BEGIN INLINE ASM BLOCK
0074   0491 17 05 00      mov a, [bp + 5]
0075   0494 3C            mov d, a
0076   0495 07 2D 07      call gets
0077   0498             ; --- END INLINE ASM BLOCK
0078   0498             
0079   0498 F9            leave
0080   0499 09            ret
0081   049A             
0082   049A             _strlen:
0083   049A D2            push bp
0084   049B 9B            mov bp, sp
0085   049C 52 02 00      sub sp, 2 ; length
0086   049F 26 00 00      mov b, 0
0087   04A2 D7            push a
0088   04A3 11            mov a, b
0089   04A4 45 FF FF      mov [bp + -1], a ; length
0090   04A7 E4            pop a
0091   04A8             _while1_cond:
0092   04A8 FA 05 00      lea d, [bp + 5] ; str
0093   04AB 2A            mov b, [d]
0094   04AC D7            push a
0095   04AD 74            mov d, b
0096   04AE DA            push d
0097   04AF 2C FF FF      mov b, [bp + -1] ; length
0098   04B2 E7            pop d
0099   04B3 10 01 00      mov a, 1
0100   04B6 AC            mul a, b
0101   04B7 5A            add d, b
0102   04B8 E4            pop a
0103   04B9 32            mov bl, [d]
0104   04BA A7 00         mov bh, 0
0105   04BC D7            push a
0106   04BD 11            mov a, b
0107   04BE 26 00 00      mov b, 0
0108   04C1 B0            cmp a, b
0109   04C2 0E            lodflgs
0110   04C3 87 01         and al, %00000001
0111   04C5 8F 01         xor al, %00000001 ; !=
0112   04C7 22 00         mov ah, 0
0113   04C9 27            mov b, a
0114   04CA E4            pop a
0115   04CB C0 00 00      cmp b, 0
0116   04CE C6 E3 04      je _while1_exit
0117   04D1             _while1_block:
0118   04D1 2C FF FF      mov b, [bp + -1] ; length
0119   04D4 D7            push a
0120   04D5 11            mov a, b
0121   04D6 FD 77         inc b
0122   04D8 D7            push a
0123   04D9 11            mov a, b
0124   04DA 45 FF FF      mov [bp + -1], a ; length
0125   04DD E4            pop a
0126   04DE 27            mov b, a
0127   04DF E4            pop a
0128   04E0 0A A8 04      jmp _while1_cond
0129   04E3             _while1_exit:
0130   04E3 2C FF FF      mov b, [bp + -1] ; length
0131   04E6 F9            leave
0132   04E7 09            ret
0133   04E8             
0134   04E8             print_num:
0135   04E8 D2            push bp
0136   04E9 9B            mov bp, sp
0137   04EA 52 05 00      sub sp, 5 ; digits
0138   04ED 52 02 00      sub sp, 2 ; i
0139   04F0 26 00 00      mov b, 0
0140   04F3 D7            push a
0141   04F4 11            mov a, b
0142   04F5 45 FA FF      mov [bp + -6], a ; i
0143   04F8 E4            pop a
0144   04F9             _if2_cond:
0145   04F9 2C 05 00      mov b, [bp + 5] ; num
0146   04FC D7            push a
0147   04FD 11            mov a, b
0148   04FE 26 00 00      mov b, 0
0149   0501 B0            cmp a, b
0150   0502 0E            lodflgs
0151   0503 87 01         and al, %00000001 ; ==
0152   0505 22 00         mov ah, 0
0153   0507 27            mov b, a
0154   0508 E4            pop a
0155   0509 C0 00 00      cmp b, 0
0156   050C C6 1E 05      je _if2_exit
0157   050F             _if2_true:
0158   050F 26 30 00      mov b, $30
0159   0512 DD            push bl
0160   0513 07 EC 05      call _putchar
0161   0516 51 01 00      add sp, 1
0162   0519 F9            leave
0163   051A 09            ret
0164   051B 0A 1E 05      jmp _if2_exit
0165   051E             _if2_exit:
0166   051E             _while3_cond:
0167   051E 2C 05 00      mov b, [bp + 5] ; num
0168   0521 D7            push a
0169   0522 11            mov a, b
0170   0523 26 00 00      mov b, 0
0171   0526 B0            cmp a, b
0172   0527 0E            lodflgs
0173   0528 2F            mov bl, al
0174   0529 FD 78         mov g, a
0175   052B FD A2 03      shr al, 3
0176   052E FD A4 02      shr bl, 2
0177   0531 FD 87 01      and bl, %00000001
0178   0534 90            xor al, bl
0179   0535 FD 27         mov b, g
0180   0537 FD 87 01      and bl, %00000001
0181   053A 8C            or al, bl
0182   053B 8F 01         xor al, %00000001 ; > (signed)
0183   053D 22 00         mov ah, 0
0184   053F 27            mov b, a
0185   0540 E4            pop a
0186   0541 C0 00 00      cmp b, 0
0187   0544 C6 94 05      je _while3_exit
0188   0547             _while3_block:
0189   0547 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0190   054A 2D            mov b, d
0191   054B D7            push a
0192   054C 74            mov d, b
0193   054D DA            push d
0194   054E 2C FA FF      mov b, [bp + -6] ; i
0195   0551 E7            pop d
0196   0552 10 01 00      mov a, 1
0197   0555 AC            mul a, b
0198   0556 5A            add d, b
0199   0557 E4            pop a
0200   0558 DA            push d
0201   0559 26 30 00      mov b, $30
0202   055C D7            push a
0203   055D 11            mov a, b
0204   055E 2C 05 00      mov b, [bp + 5] ; num
0205   0561 D7            push a
0206   0562 11            mov a, b
0207   0563 26 0A 00      mov b, 10
0208   0566 AE            div a, b
0209   0567 E4            pop a
0210   0568 56            add b, a
0211   0569 E4            pop a
0212   056A E7            pop d
0213   056B FD 3E         mov [d], bl
0214   056D 2C 05 00      mov b, [bp + 5] ; num
0215   0570 D7            push a
0216   0571 11            mov a, b
0217   0572 26 0A 00      mov b, 10
0218   0575 AE            div a, b
0219   0576 FD 78         mov g, a
0220   0578 11            mov a, b
0221   0579 FD 27         mov b, g
0222   057B E4            pop a
0223   057C D7            push a
0224   057D 11            mov a, b
0225   057E 45 05 00      mov [bp + 5], a ; num
0226   0581 E4            pop a
0227   0582 2C FA FF      mov b, [bp + -6] ; i
0228   0585 D7            push a
0229   0586 11            mov a, b
0230   0587 FD 77         inc b
0231   0589 D7            push a
0232   058A 11            mov a, b
0233   058B 45 FA FF      mov [bp + -6], a ; i
0234   058E E4            pop a
0235   058F 27            mov b, a
0236   0590 E4            pop a
0237   0591 0A 1E 05      jmp _while3_cond
0238   0594             _while3_exit:
0239   0594             _while4_cond:
0240   0594 2C FA FF      mov b, [bp + -6] ; i
0241   0597 D7            push a
0242   0598 11            mov a, b
0243   0599 26 00 00      mov b, 0
0244   059C B0            cmp a, b
0245   059D 0E            lodflgs
0246   059E 2F            mov bl, al
0247   059F FD 78         mov g, a
0248   05A1 FD A2 03      shr al, 3
0249   05A4 FD A4 02      shr bl, 2
0250   05A7 FD 87 01      and bl, %00000001
0251   05AA 90            xor al, bl
0252   05AB FD 27         mov b, g
0253   05AD FD 87 01      and bl, %00000001
0254   05B0 8C            or al, bl
0255   05B1 8F 01         xor al, %00000001 ; > (signed)
0256   05B3 22 00         mov ah, 0
0257   05B5 27            mov b, a
0258   05B6 E4            pop a
0259   05B7 C0 00 00      cmp b, 0
0260   05BA C6 EA 05      je _while4_exit
0261   05BD             _while4_block:
0262   05BD 2C FA FF      mov b, [bp + -6] ; i
0263   05C0 D7            push a
0264   05C1 11            mov a, b
0265   05C2 FD 7D         dec b
0266   05C4 D7            push a
0267   05C5 11            mov a, b
0268   05C6 45 FA FF      mov [bp + -6], a ; i
0269   05C9 E4            pop a
0270   05CA 27            mov b, a
0271   05CB E4            pop a
0272   05CC FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0273   05CF 2D            mov b, d
0274   05D0 D7            push a
0275   05D1 74            mov d, b
0276   05D2 DA            push d
0277   05D3 2C FA FF      mov b, [bp + -6] ; i
0278   05D6 E7            pop d
0279   05D7 10 01 00      mov a, 1
0280   05DA AC            mul a, b
0281   05DB 5A            add d, b
0282   05DC E4            pop a
0283   05DD 32            mov bl, [d]
0284   05DE A7 00         mov bh, 0
0285   05E0 DD            push bl
0286   05E1 07 EC 05      call _putchar
0287   05E4 51 01 00      add sp, 1
0288   05E7 0A 94 05      jmp _while4_cond
0289   05EA             _while4_exit:
0290   05EA F9            leave
0291   05EB 09            ret
0292   05EC             
0293   05EC             _putchar:
0294   05EC D2            push bp
0295   05ED 9B            mov bp, sp
0296   05EE             
0297   05EE             ; --- BEGIN INLINE ASM BLOCK
0298   05EE 20 05 00      mov al, [bp + 5]
0299   05F1 23            mov ah, al
0300   05F2 07 26 07      call putchar
0301   05F5             ; --- END INLINE ASM BLOCK
0302   05F5             
0303   05F5 F9            leave
0304   05F6 09            ret
0305   05F7             
0306   05F7             scann:
0307   05F7 D2            push bp
0308   05F8 9B            mov bp, sp
0309   05F9 52 02 00      sub sp, 2 ; m
0310   05FC             
0311   05FC             ; --- BEGIN INLINE ASM BLOCK
0312   05FC 07 5E 09      call scan_u16d
0313   05FF 45 FF FF      mov [bp + -1], a
0314   0602             ; --- END INLINE ASM BLOCK
0315   0602             
0316   0602 2C FF FF      mov b, [bp + -1] ; m
0317   0605 F9            leave
0318   0606 09            ret
0319   0607             
0320   0607             print:
0321   0607 D2            push bp
0322   0608 9B            mov bp, sp
0323   0609             
0324   0609             ; --- BEGIN INLINE ASM BLOCK
0325   0609 17 05 00      mov a, [bp + 5]
0326   060C 3C            mov d, a
0327   060D 07 60 08      call puts
0328   0610             ; --- END INLINE ASM BLOCK
0329   0610             
0330   0610 F9            leave
0331   0611 09            ret
0332   0612             ; --- END TEXT BLOCK
0333   0612             
0334   0612             ; --- BEGIN DATA BLOCK
0335   0612 0A 00       __string_0: .db "\n", 0
0336   0614             ; --- END DATA BLOCK
0337   0614             
0338   0614             ; --- BEGIN INCLUDE BLOCK
0339   0614             .include "lib/stdio.asm"
0001+  0614             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0614             ; stdio.s
0003+  0614             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0614             .include "lib/string.asm"
0001++ 0614             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0614             ; string.s
0003++ 0614             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0614             
0005++ 0614             
0006++ 0614             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0614             ; strrev
0008++ 0614             ; reverse a string
0009++ 0614             ; D = string address
0010++ 0614             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0614             ; 01234
0012++ 0614             strrev:
0013++ 0614 4B          	pusha
0014++ 0615 07 5B 06    	call strlen	; length in C
0015++ 0618 12          	mov a, c
0016++ 0619 AF 01 00    	cmp a, 1
0017++ 061C D0 36 06    	jleu strrev_end	; check string length. string len must be > 1
0018++ 061F 7D          	dec a
0019++ 0620 FD 4E       	mov si, d	; beginning of string
0020++ 0622 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0624 59          	add d, a	; end of string
0022++ 0625 12          	mov a, c
0023++ 0626 FD 9B       	shr a		; divide by 2
0024++ 0628 39          	mov c, a	; C now counts the steps
0025++ 0629             strrev_L0:
0026++ 0629 32          	mov bl, [d]	; save load right-side char into BL
0027++ 062A F6          	lodsb		; load left-side char into AL; increase SI
0028++ 062B 3E          	mov [d], al	; store left char into right side
0029++ 062C 1B          	mov al, bl
0030++ 062D F7          	stosb		; store right-side char into left-side; increase DI
0031++ 062E 7E          	dec c
0032++ 062F 7F          	dec d
0033++ 0630 C2 00 00    	cmp c, 0
0034++ 0633 C7 29 06    	jne strrev_L0
0035++ 0636             strrev_end:
0036++ 0636 4C          	popa
0037++ 0637 09          	ret
0038++ 0638             	
0039++ 0638             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0638             ; strchr
0041++ 0638             ; search string in D for char in AL
0042++ 0638             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0638             strchr:
0044++ 0638             strchr_L0:
0045++ 0638 32          	mov bl, [d]
0046++ 0639 C1 00       	cmp bl, 0
0047++ 063B C6 46 06    	je strchr_end
0048++ 063E BA          	cmp al, bl
0049++ 063F C6 46 06    	je strchr_end
0050++ 0642 79          	inc d
0051++ 0643 0A 38 06    	jmp strchr_L0
0052++ 0646             strchr_end:
0053++ 0646 1B          	mov al, bl
0054++ 0647 09          	ret
0055++ 0648             
0056++ 0648             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0648             ; strstr
0058++ 0648             ; find sub-string
0059++ 0648             ; str1 in SI
0060++ 0648             ; str2 in DI
0061++ 0648             ; SI points to end of source string
0062++ 0648             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0648             strstr:
0064++ 0648 DB          	push al
0065++ 0649 DA          	push d
0066++ 064A E3          	push di
0067++ 064B             strstr_loop:
0068++ 064B F3          	cmpsb					; compare a byte of the strings
0069++ 064C C7 57 06    	jne strstr_ret
0070++ 064F FC 00 00    	lea d, [di + 0]
0071++ 0652 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0654 C7 4B 06    	jne strstr_loop				; equal chars but not at end
0073++ 0657             strstr_ret:
0074++ 0657 F0          	pop di
0075++ 0658 E7          	pop d
0076++ 0659 E8          	pop al
0077++ 065A 09          	ret
0078++ 065B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 065B             ; length of null terminated string
0080++ 065B             ; result in C
0081++ 065B             ; pointer in D
0082++ 065B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 065B             strlen:
0084++ 065B DA          	push d
0085++ 065C 38 00 00    	mov c, 0
0086++ 065F             strlen_L1:
0087++ 065F BD 00       	cmp byte [d], 0
0088++ 0661 C6 69 06    	je strlen_ret
0089++ 0664 79          	inc d
0090++ 0665 78          	inc c
0091++ 0666 0A 5F 06    	jmp strlen_L1
0092++ 0669             strlen_ret:
0093++ 0669 E7          	pop d
0094++ 066A 09          	ret
0095++ 066B             
0096++ 066B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 066B             ; STRCMP
0098++ 066B             ; compare two strings
0099++ 066B             ; str1 in SI
0100++ 066B             ; str2 in DI
0101++ 066B             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 066B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 066B             strcmp:
0104++ 066B DB          	push al
0105++ 066C DA          	push d
0106++ 066D E3          	push di
0107++ 066E E2          	push si
0108++ 066F             strcmp_loop:
0109++ 066F F3          	cmpsb					; compare a byte of the strings
0110++ 0670 C7 7B 06    	jne strcmp_ret
0111++ 0673 FB FF FF    	lea d, [si +- 1]
0112++ 0676 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0678 C7 6F 06    	jne strcmp_loop				; equal chars but not at end
0114++ 067B             strcmp_ret:
0115++ 067B EF          	pop si
0116++ 067C F0          	pop di
0117++ 067D E7          	pop d
0118++ 067E E8          	pop al
0119++ 067F 09          	ret
0120++ 0680             
0121++ 0680             
0122++ 0680             ; STRCPY
0123++ 0680             ; copy null terminated string from SI to DI
0124++ 0680             ; source in SI
0125++ 0680             ; destination in DI
0126++ 0680             strcpy:
0127++ 0680 E2          	push si
0128++ 0681 E3          	push di
0129++ 0682 DB          	push al
0130++ 0683             strcpy_L1:
0131++ 0683 F6          	lodsb
0132++ 0684 F7          	stosb
0133++ 0685 B9 00       	cmp al, 0
0134++ 0687 C7 83 06    	jne strcpy_L1
0135++ 068A             strcpy_end:
0136++ 068A E8          	pop al
0137++ 068B F0          	pop di
0138++ 068C EF          	pop si
0139++ 068D 09          	ret
0140++ 068E             
0141++ 068E             ; STRCAT
0142++ 068E             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 068E             ; source in SI
0144++ 068E             ; destination in DI
0145++ 068E             strcat:
0146++ 068E E2          	push si
0147++ 068F E3          	push di
0148++ 0690 D7          	push a
0149++ 0691 DA          	push d
0150++ 0692 50          	mov a, di
0151++ 0693 3C          	mov d, a
0152++ 0694             strcat_goto_end_L1:
0153++ 0694 BD 00       	cmp byte[d], 0
0154++ 0696 C6 9D 06    	je strcat_start
0155++ 0699 79          	inc d
0156++ 069A 0A 94 06    	jmp strcat_goto_end_L1
0157++ 069D             strcat_start:
0158++ 069D FD 50       	mov di, d
0159++ 069F             strcat_L1:
0160++ 069F F6          	lodsb
0161++ 06A0 F7          	stosb
0162++ 06A1 B9 00       	cmp al, 0
0163++ 06A3 C7 9F 06    	jne strcat_L1
0164++ 06A6             strcat_end:
0165++ 06A6 E7          	pop d
0166++ 06A7 E4          	pop a
0167++ 06A8 F0          	pop di
0168++ 06A9 EF          	pop si
0169++ 06AA 09          	ret
0005+  06AB             
0006+  06AB 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  06AF 34 35 36 37 
0006+  06B3 38 39 41 42 
0006+  06B7 43 44 45 46 
0007+  06BB 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  06BF 1B 5B 48 00 
0008+  06C3             
0009+  06C3 01 00       table_power:.dw 1
0010+  06C5 0A 00       			.dw 10
0011+  06C7 64 00       			.dw 100
0012+  06C9 E8 03       			.dw 1000
0013+  06CB 10 27       			.dw 10000
0014+  06CD             
0015+  06CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  06CD             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  06CD             ; ASCII in BL
0018+  06CD             ; result in AL
0019+  06CD             ; ascii for F = 0100 0110
0020+  06CD             ; ascii for 9 = 0011 1001
0021+  06CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  06CD             hex_ascii_encode:
0023+  06CD 1B          	mov al, bl
0024+  06CE 93 40       	test al, $40				; test if letter or number
0025+  06D0 C7 D6 06    	jnz hex_letter
0026+  06D3 87 0F       	and al, $0F				; get number
0027+  06D5 09          	ret
0028+  06D6             hex_letter:
0029+  06D6 87 0F       	and al, $0F				; get letter
0030+  06D8 6A 09       	add al, 9
0031+  06DA 09          	ret
0032+  06DB             
0033+  06DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  06DB             ; ATOI
0035+  06DB             ; 2 letter hex string in B
0036+  06DB             ; 8bit integer returned in AL
0037+  06DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  06DB             atoi:
0039+  06DB D8          	push b
0040+  06DC 07 CD 06    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  06DF 30          	mov bl, bh
0042+  06E0 DB          	push al					; save a
0043+  06E1 07 CD 06    	call hex_ascii_encode
0044+  06E4 EA          	pop bl	
0045+  06E5 FD 9E 04    	shl al, 4
0046+  06E8 8C          	or al, bl
0047+  06E9 E5          	pop b
0048+  06EA 09          	ret	
0049+  06EB             
0050+  06EB             
0051+  06EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  06EB             ; printf
0053+  06EB             ; no need for explanations!
0054+  06EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  06EB             printf:
0056+  06EB 09          	ret
0057+  06EC             
0058+  06EC             
0059+  06EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  06EC             ; scanf
0061+  06EC             ; no need for explanations!
0062+  06EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  06EC             scanf:
0064+  06EC 09          	ret
0065+  06ED             
0066+  06ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  06ED             ; ITOA
0068+  06ED             ; 8bit value in BL
0069+  06ED             ; 2 byte ASCII result in A
0070+  06ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  06ED             itoa:
0072+  06ED DA          	push d
0073+  06EE D8          	push b
0074+  06EF A7 00       	mov bh, 0
0075+  06F1 FD A4 04    	shr bl, 4	
0076+  06F4 74          	mov d, b
0077+  06F5 1F AB 06    	mov al, [d + s_hex_digits]
0078+  06F8 23          	mov ah, al
0079+  06F9             	
0080+  06F9 E5          	pop b
0081+  06FA D8          	push b
0082+  06FB A7 00       	mov bh, 0
0083+  06FD FD 87 0F    	and bl, $0F
0084+  0700 74          	mov d, b
0085+  0701 1F AB 06    	mov al, [d + s_hex_digits]
0086+  0704 E5          	pop b
0087+  0705 E7          	pop d
0088+  0706 09          	ret
0089+  0707             
0090+  0707             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0707             ; HEX STRING TO BINARY
0092+  0707             ; di = destination address
0093+  0707             ; si = source
0094+  0707             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0707             hex_to_int:
0096+  0707             hex_to_int_L1:
0097+  0707 F6          	lodsb					; load from [SI] to AL
0098+  0708 B9 00       	cmp al, 0				; check if ASCII 0
0099+  070A C6 17 07    	jz hex_to_int_ret
0100+  070D 36          	mov bh, al
0101+  070E F6          	lodsb
0102+  070F 2F          	mov bl, al
0103+  0710 07 DB 06    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0713 F7          	stosb					; store AL to [DI]
0105+  0714 0A 07 07    	jmp hex_to_int_L1
0106+  0717             hex_to_int_ret:
0107+  0717 09          	ret		
0108+  0718             
0109+  0718             
0110+  0718             
0111+  0718             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0718             ; GETCHAR
0113+  0718             ; char in ah
0114+  0718             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0718             getchar:
0116+  0718 DB          	push al
0117+  0719             getchar_retry:
0118+  0719 FD 0C       	sti
0119+  071B 19 01       	mov al, 1
0120+  071D 05 03       	syscall sys_io			; receive in AH
0121+  071F B9 00       	cmp al, 0			; check if any char was receive
0122+  0721 C6 19 07    	je getchar_retry
0123+  0724 E8          	pop al
0124+  0725 09          	ret
0125+  0726             
0126+  0726             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0726             ; PUTCHAR
0128+  0726             ; char in ah
0129+  0726             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0726             putchar:
0131+  0726 D7          	push a
0132+  0727 19 00       	mov al, 0
0133+  0729 05 03       	syscall sys_io			; char in AH
0134+  072B E4          	pop a
0135+  072C 09          	ret
0136+  072D             
0137+  072D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  072D             ;; INPUT A STRING
0139+  072D             ;; terminates with null
0140+  072D             ;; pointer in D
0141+  072D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  072D             gets:
0143+  072D D7          	push a
0144+  072E DA          	push d
0145+  072F             gets_loop:
0146+  072F FD 0C       	sti
0147+  0731 19 01       	mov al, 1
0148+  0733 05 03       	syscall sys_io			; receive in AH
0149+  0735 B9 00       	cmp al, 0				; check error code (AL)
0150+  0737 C6 2F 07    	je gets_loop			; if no char received, retry
0151+  073A             
0152+  073A 76 1B       	cmp ah, 27
0153+  073C C6 5D 07    	je gets_telnet_escape
0154+  073F 76 0A       	cmp ah, $0A				; LF
0155+  0741 C6 B6 07    	je gets_end
0156+  0744 76 0D       	cmp ah, $0D				; CR
0157+  0746 C6 B6 07    	je gets_end
0158+  0749 76 5C       	cmp ah, $5C				; '\\'
0159+  074B C6 8D 07    	je gets_escape
0160+  074E             	
0161+  074E 76 08       	cmp ah, $08			; check for backspace
0162+  0750 C6 59 07    	je gets_backspace
0163+  0753             
0164+  0753 1A          	mov al, ah
0165+  0754 3E          	mov [d], al
0166+  0755 79          	inc d
0167+  0756 0A 2F 07    	jmp gets_loop
0168+  0759             gets_backspace:
0169+  0759 7F          	dec d
0170+  075A 0A 2F 07    	jmp gets_loop
0171+  075D             gets_telnet_escape:
0172+  075D FD 0C       	sti
0173+  075F 19 01       	mov al, 1
0174+  0761 05 03       	syscall sys_io				; receive in AH without echo
0175+  0763 B9 00       	cmp al, 0					; check error code (AL)
0176+  0765 C6 5D 07    	je gets_telnet_escape		; if no char received, retry
0177+  0768 76 5B       	cmp ah, '['
0178+  076A C7 2F 07    	jne gets_loop
0179+  076D             gets_telnet_escape_phase2:
0180+  076D FD 0C       	sti
0181+  076F 19 01       	mov al, 1
0182+  0771 05 03       	syscall sys_io					; receive in AH without echo
0183+  0773 B9 00       	cmp al, 0						; check error code (AL)
0184+  0775 C6 6D 07    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0778 76 44       	cmp ah, 'D'
0186+  077A C6 85 07    	je gets_left_arrow
0187+  077D 76 43       	cmp ah, 'C'
0188+  077F C6 89 07    	je gets_right_arrow
0189+  0782 0A 2F 07    	jmp gets_loop
0190+  0785             gets_left_arrow:
0191+  0785 7F          	dec d
0192+  0786 0A 2F 07    	jmp gets_loop
0193+  0789             gets_right_arrow:
0194+  0789 79          	inc d
0195+  078A 0A 2F 07    	jmp gets_loop
0196+  078D             gets_escape:
0197+  078D FD 0C       	sti
0198+  078F 19 01       	mov al, 1
0199+  0791 05 03       	syscall sys_io			; receive in AH
0200+  0793 B9 00       	cmp al, 0				; check error code (AL)
0201+  0795 C6 8D 07    	je gets_escape			; if no char received, retry
0202+  0798 76 6E       	cmp ah, 'n'
0203+  079A C6 A8 07    	je gets_LF
0204+  079D 76 72       	cmp ah, 'r'
0205+  079F C6 AF 07    	je gets_CR
0206+  07A2 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  07A3 3E          	mov [d], al
0208+  07A4 79          	inc d
0209+  07A5 0A 2F 07    	jmp gets_loop
0210+  07A8             gets_LF:
0211+  07A8 19 0A       	mov al, $0A
0212+  07AA 3E          	mov [d], al
0213+  07AB 79          	inc d
0214+  07AC 0A 2F 07    	jmp gets_loop
0215+  07AF             gets_CR:
0216+  07AF 19 0D       	mov al, $0D
0217+  07B1 3E          	mov [d], al
0218+  07B2 79          	inc d
0219+  07B3 0A 2F 07    	jmp gets_loop
0220+  07B6             gets_end:
0221+  07B6 19 00       	mov al, 0
0222+  07B8 3E          	mov [d], al				; terminate string
0223+  07B9 E7          	pop d
0224+  07BA E4          	pop a
0225+  07BB 09          	ret
0226+  07BC             
0227+  07BC             
0228+  07BC             
0229+  07BC             
0230+  07BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  07BC             ;; INPUT TEXT
0232+  07BC             ;; terminated with CTRL+D
0233+  07BC             ;; pointer in D
0234+  07BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  07BC             gettxt:
0236+  07BC D7          	push a
0237+  07BD DA          	push d
0238+  07BE             gettxt_loop:
0239+  07BE 19 01       	mov al, 1
0240+  07C0 05 03       	syscall sys_io			; receive in AH
0241+  07C2 B9 00       	cmp al, 0				; check error code (AL)
0242+  07C4 C6 BE 07    	je gettxt_loop		; if no char received, retry
0243+  07C7 76 04       	cmp ah, 4			; EOT
0244+  07C9 C6 07 08    	je gettxt_end
0245+  07CC 76 08       	cmp ah, $08			; check for backspace
0246+  07CE C6 03 08    	je gettxt_backspace
0247+  07D1 76 5C       	cmp ah, $5C				; '\\'
0248+  07D3 C6 DC 07    	je gettxt_escape
0249+  07D6 1A          	mov al, ah
0250+  07D7 3E          	mov [d], al
0251+  07D8 79          	inc d
0252+  07D9 0A BE 07    	jmp gettxt_loop
0253+  07DC             gettxt_escape:
0254+  07DC 19 01       	mov al, 1
0255+  07DE 05 03       	syscall sys_io			; receive in AH
0256+  07E0 B9 00       	cmp al, 0				; check error code (AL)
0257+  07E2 C6 DC 07    	je gettxt_escape		; if no char received, retry
0258+  07E5 76 6E       	cmp ah, 'n'
0259+  07E7 C6 F5 07    	je gettxt_LF
0260+  07EA 76 72       	cmp ah, 'r'
0261+  07EC C6 FC 07    	je gettxt_CR
0262+  07EF 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  07F0 3E          	mov [d], al
0264+  07F1 79          	inc d
0265+  07F2 0A BE 07    	jmp gettxt_loop
0266+  07F5             gettxt_LF:
0267+  07F5 19 0A       	mov al, $0A
0268+  07F7 3E          	mov [d], al
0269+  07F8 79          	inc d
0270+  07F9 0A BE 07    	jmp gettxt_loop
0271+  07FC             gettxt_CR:
0272+  07FC 19 0D       	mov al, $0D
0273+  07FE 3E          	mov [d], al
0274+  07FF 79          	inc d
0275+  0800 0A BE 07    	jmp gettxt_loop
0276+  0803             gettxt_backspace:
0277+  0803 7F          	dec d
0278+  0804 0A BE 07    	jmp gettxt_loop
0279+  0807             gettxt_end:
0280+  0807 19 00       	mov al, 0
0281+  0809 3E          	mov [d], al				; terminate string
0282+  080A E7          	pop d
0283+  080B E4          	pop a
0284+  080C 09          	ret
0285+  080D             
0286+  080D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  080D             ; PRINT NEW LINE
0288+  080D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  080D             printnl:
0290+  080D D7          	push a
0291+  080E 10 00 0A    	mov a, $0A00
0292+  0811 05 03       	syscall sys_io
0293+  0813 10 00 0D    	mov a, $0D00
0294+  0816 05 03       	syscall sys_io
0295+  0818 E4          	pop a
0296+  0819 09          	ret
0297+  081A             
0298+  081A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  081A             ; strtoint
0300+  081A             ; 4 digit hex string number in d
0301+  081A             ; integer returned in A
0302+  081A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  081A             strtointx:
0304+  081A D8          	push b
0305+  081B 32          	mov bl, [d]
0306+  081C 37          	mov bh, bl
0307+  081D 33 01 00    	mov bl, [d + 1]
0308+  0820 07 DB 06    	call atoi				; convert to int in AL
0309+  0823 23          	mov ah, al				; move to AH
0310+  0824 33 02 00    	mov bl, [d + 2]
0311+  0827 37          	mov bh, bl
0312+  0828 33 03 00    	mov bl, [d + 3]
0313+  082B 07 DB 06    	call atoi				; convert to int in AL
0314+  082E E5          	pop b
0315+  082F 09          	ret
0316+  0830             
0317+  0830             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0830             ; strtoint
0319+  0830             ; 5 digit base10 string number in d
0320+  0830             ; integer returned in A
0321+  0830             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0830             strtoint:
0323+  0830 E2          	push si
0324+  0831 D8          	push b
0325+  0832 D9          	push c
0326+  0833 DA          	push d
0327+  0834 07 5B 06    	call strlen			; get string length in C
0328+  0837 7E          	dec c
0329+  0838 FD 4E       	mov si, d
0330+  083A 12          	mov a, c
0331+  083B FD 99       	shl a
0332+  083D 3B C3 06    	mov d, table_power
0333+  0840 59          	add d, a
0334+  0841 38 00 00    	mov c, 0
0335+  0844             strtoint_L0:
0336+  0844 F6          	lodsb			; load ASCII to al
0337+  0845 B9 00       	cmp al, 0
0338+  0847 C6 5A 08    	je strtoint_end
0339+  084A 6F 30       	sub al, $30		; make into integer
0340+  084C 22 00       	mov ah, 0
0341+  084E 2A          	mov b, [d]
0342+  084F AC          	mul a, b			; result in B since it fits in 16bits
0343+  0850 11          	mov a, b
0344+  0851 28          	mov b, c
0345+  0852 54          	add a, b
0346+  0853 39          	mov c, a
0347+  0854 63 02 00    	sub d, 2
0348+  0857 0A 44 08    	jmp strtoint_L0
0349+  085A             strtoint_end:
0350+  085A 12          	mov a, c
0351+  085B E7          	pop d
0352+  085C E6          	pop c
0353+  085D E5          	pop b
0354+  085E EF          	pop si
0355+  085F 09          	ret
0356+  0860             
0357+  0860             
0358+  0860             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0860             ; PRINT NULL TERMINATED STRING
0360+  0860             ; pointer in D
0361+  0860             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0860             puts:
0363+  0860 D7          	push a
0364+  0861 DA          	push d
0365+  0862             puts_L1:
0366+  0862 1E          	mov al, [d]
0367+  0863 B9 00       	cmp al, 0
0368+  0865 C6 71 08    	jz puts_END
0369+  0868 23          	mov ah, al
0370+  0869 19 00       	mov al, 0
0371+  086B 05 03       	syscall sys_io
0372+  086D 79          	inc d
0373+  086E 0A 62 08    	jmp puts_L1
0374+  0871             puts_END:
0375+  0871 E7          	pop d
0376+  0872 E4          	pop a
0377+  0873 09          	ret
0378+  0874             
0379+  0874             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0874             ; PRINT N SIZE STRING
0381+  0874             ; pointer in D
0382+  0874             ; size in C
0383+  0874             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0874             putsn:
0385+  0874 DB          	push al
0386+  0875 DA          	push d
0387+  0876 D9          	push c
0388+  0877             putsn_L0:
0389+  0877 1E          	mov al, [d]
0390+  0878 23          	mov ah, al
0391+  0879 19 00       	mov al, 0
0392+  087B 05 03       	syscall sys_io
0393+  087D 79          	inc d
0394+  087E 7E          	dec c	
0395+  087F C2 00 00    	cmp c, 0
0396+  0882 C7 77 08    	jne putsn_L0
0397+  0885             putsn_end:
0398+  0885 E6          	pop c
0399+  0886 E7          	pop d
0400+  0887 E8          	pop al
0401+  0888 09          	ret
0402+  0889             
0403+  0889             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0889             ; print 16bit decimal number
0405+  0889             ; input number in A
0406+  0889             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0889             print_u16d:
0408+  0889 D7          	push a
0409+  088A D8          	push b
0410+  088B 26 10 27    	mov b, 10000
0411+  088E AE          	div a, b			; get 10000 coeff.
0412+  088F 07 B5 08    	call print_number
0413+  0892 11          	mov a, b
0414+  0893 26 E8 03    	mov b, 1000
0415+  0896 AE          	div a, b			; get 10000 coeff.
0416+  0897 07 B5 08    	call print_number
0417+  089A 11          	mov a, b
0418+  089B 26 64 00    	mov b, 100
0419+  089E AE          	div a, b
0420+  089F 07 B5 08    	call print_number
0421+  08A2 11          	mov a, b
0422+  08A3 26 0A 00    	mov b, 10
0423+  08A6 AE          	div a, b
0424+  08A7 07 B5 08    	call print_number
0425+  08AA 11          	mov a, b
0426+  08AB 6A 30       	add al, $30
0427+  08AD 23          	mov ah, al
0428+  08AE 19 00       	mov al, 0
0429+  08B0 05 03       	syscall sys_io	; print coeff
0430+  08B2 E5          	pop b
0431+  08B3 E4          	pop a
0432+  08B4 09          	ret
0433+  08B5             
0434+  08B5             
0435+  08B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  08B5             ; if A == 0, print space
0437+  08B5             ; else print A
0438+  08B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  08B5             print_number:
0440+  08B5 6A 30       	add al, $30
0441+  08B7 23          	mov ah, al
0442+  08B8 07 26 07    	call putchar
0443+  08BB 09          	ret
0444+  08BC             
0445+  08BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  08BC             ; PRINT 16BIT HEX INTEGER
0447+  08BC             ; integer value in reg B
0448+  08BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  08BC             print_u16x:
0450+  08BC D7          	push a
0451+  08BD D8          	push b
0452+  08BE DD          	push bl
0453+  08BF 30          	mov bl, bh
0454+  08C0 07 ED 06    	call itoa				; convert bh to char in A
0455+  08C3 2F          	mov bl, al				; save al
0456+  08C4 19 00       	mov al, 0
0457+  08C6 05 03       	syscall sys_io				; display AH
0458+  08C8 24          	mov ah, bl				; retrieve al
0459+  08C9 19 00       	mov al, 0
0460+  08CB 05 03       	syscall sys_io				; display AL
0461+  08CD             
0462+  08CD EA          	pop bl
0463+  08CE 07 ED 06    	call itoa				; convert bh to char in A
0464+  08D1 2F          	mov bl, al				; save al
0465+  08D2 19 00       	mov al, 0
0466+  08D4 05 03       	syscall sys_io				; display AH
0467+  08D6 24          	mov ah, bl				; retrieve al
0468+  08D7 19 00       	mov al, 0
0469+  08D9 05 03       	syscall sys_io				; display AL
0470+  08DB             
0471+  08DB E5          	pop b
0472+  08DC E4          	pop a
0473+  08DD 09          	ret
0474+  08DE             
0475+  08DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  08DE             ; INPUT 16BIT HEX INTEGER
0477+  08DE             ; read 16bit integer into A
0478+  08DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  08DE             scan_u16x:
0480+  08DE F8 10 00    	enter 16
0481+  08E1 D8          	push b
0482+  08E2 DA          	push d
0483+  08E3             
0484+  08E3 FA F1 FF    	lea d, [bp + -15]
0485+  08E6 07 2D 07    	call gets				; get number
0486+  08E9             
0487+  08E9 32          	mov bl, [d]
0488+  08EA 37          	mov bh, bl
0489+  08EB 33 01 00    	mov bl, [d + 1]
0490+  08EE 07 DB 06    	call atoi				; convert to int in AL
0491+  08F1 23          	mov ah, al				; move to AH
0492+  08F2             
0493+  08F2 33 02 00    	mov bl, [d + 2]
0494+  08F5 37          	mov bh, bl
0495+  08F6 33 03 00    	mov bl, [d + 3]
0496+  08F9 07 DB 06    	call atoi				; convert to int in AL
0497+  08FC             
0498+  08FC E7          	pop d
0499+  08FD E5          	pop b
0500+  08FE F9          	leave
0501+  08FF 09          	ret
0502+  0900             
0503+  0900             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0900             ; PRINT 8bit HEX INTEGER
0505+  0900             ; integer value in reg bl
0506+  0900             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0900             print_u8x:
0508+  0900 D7          	push a
0509+  0901 DD          	push bl
0510+  0902             
0511+  0902 07 ED 06    	call itoa				; convert bl to char in A
0512+  0905 2F          	mov bl, al				; save al
0513+  0906 19 00       	mov al, 0
0514+  0908 05 03       	syscall sys_io				; display AH
0515+  090A 24          	mov ah, bl				; retrieve al
0516+  090B 19 00       	mov al, 0
0517+  090D 05 03       	syscall sys_io				; display AL
0518+  090F             
0519+  090F EA          	pop bl
0520+  0910 E4          	pop a
0521+  0911 09          	ret
0522+  0912             
0523+  0912             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0912             ; print 8bit decimal unsigned number
0525+  0912             ; input number in AL
0526+  0912             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0912             print_u8d:
0528+  0912 D7          	push a
0529+  0913 D8          	push b
0530+  0914             
0531+  0914 22 00       	mov ah, 0
0532+  0916 26 64 00    	mov b, 100
0533+  0919 AE          	div a, b
0534+  091A D8          	push b			; save remainder
0535+  091B B9 00       	cmp al, 0
0536+  091D C6 27 09    	je skip100
0537+  0920 6A 30       	add al, $30
0538+  0922 23          	mov ah, al
0539+  0923 19 00       	mov al, 0
0540+  0925 05 03       	syscall sys_io	; print coeff
0541+  0927             skip100:
0542+  0927 E4          	pop a
0543+  0928 22 00       	mov ah, 0
0544+  092A 26 0A 00    	mov b, 10
0545+  092D AE          	div a, b
0546+  092E D8          	push b			; save remainder
0547+  092F B9 00       	cmp al, 0
0548+  0931 C6 3B 09    	je skip10
0549+  0934 6A 30       	add al, $30
0550+  0936 23          	mov ah, al
0551+  0937 19 00       	mov al, 0
0552+  0939 05 03       	syscall sys_io	; print coeff
0553+  093B             skip10:
0554+  093B E4          	pop a
0555+  093C 1B          	mov al, bl
0556+  093D 6A 30       	add al, $30
0557+  093F 23          	mov ah, al
0558+  0940 19 00       	mov al, 0
0559+  0942 05 03       	syscall sys_io	; print coeff
0560+  0944 E5          	pop b
0561+  0945 E4          	pop a
0562+  0946 09          	ret
0563+  0947             
0564+  0947             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0947             ; INPUT 8BIT HEX INTEGER
0566+  0947             ; read 8bit integer into AL
0567+  0947             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0947             scan_u8x:
0569+  0947 F8 04 00    	enter 4
0570+  094A D8          	push b
0571+  094B DA          	push d
0572+  094C             
0573+  094C FA FD FF    	lea d, [bp + -3]
0574+  094F 07 2D 07    	call gets				; get number
0575+  0952             
0576+  0952 32          	mov bl, [d]
0577+  0953 37          	mov bh, bl
0578+  0954 33 01 00    	mov bl, [d + 1]
0579+  0957 07 DB 06    	call atoi				; convert to int in AL
0580+  095A             
0581+  095A E7          	pop d
0582+  095B E5          	pop b
0583+  095C F9          	leave
0584+  095D 09          	ret
0585+  095E             
0586+  095E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  095E             ; input decimal number
0588+  095E             ; result in A
0589+  095E             ; 655'\0'
0590+  095E             ; low--------high
0591+  095E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  095E             scan_u16d:
0593+  095E F8 08 00    	enter 8
0594+  0961 E2          	push si
0595+  0962 D8          	push b
0596+  0963 D9          	push c
0597+  0964 DA          	push d
0598+  0965 FA F9 FF    	lea d, [bp +- 7]
0599+  0968 07 2D 07    	call gets
0600+  096B 07 5B 06    	call strlen			; get string length in C
0601+  096E 7E          	dec c
0602+  096F FD 4E       	mov si, d
0603+  0971 12          	mov a, c
0604+  0972 FD 99       	shl a
0605+  0974 3B C3 06    	mov d, table_power
0606+  0977 59          	add d, a
0607+  0978 38 00 00    	mov c, 0
0608+  097B             mul_loop:
0609+  097B F6          	lodsb			; load ASCII to al
0610+  097C B9 00       	cmp al, 0
0611+  097E C6 91 09    	je mul_exit
0612+  0981 6F 30       	sub al, $30		; make into integer
0613+  0983 22 00       	mov ah, 0
0614+  0985 2A          	mov b, [d]
0615+  0986 AC          	mul a, b			; result in B since it fits in 16bits
0616+  0987 11          	mov a, b
0617+  0988 28          	mov b, c
0618+  0989 54          	add a, b
0619+  098A 39          	mov c, a
0620+  098B 63 02 00    	sub d, 2
0621+  098E 0A 7B 09    	jmp mul_loop
0622+  0991             mul_exit:
0623+  0991 12          	mov a, c
0624+  0992 E7          	pop d
0625+  0993 E6          	pop c
0626+  0994 E5          	pop b
0627+  0995 EF          	pop si
0628+  0996 F9          	leave
0629+  0997 09          	ret
0340   0998             ; --- END INCLUDE BLOCK
0341   0998             
0342   0998             
0343   0998             .end
tasm: Number of errors = 0
