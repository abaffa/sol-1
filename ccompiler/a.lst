0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405             _for1_init:
0012   0405 26 64 00      mov b, 100
0013   0408 D7            push a
0014   0409 11            mov a, b
0015   040A 45 FF FF      mov [bp + -1], a ; i
0016   040D E4            pop a
0017   040E             _for1_cond:
0018   040E 2C FF FF      mov b, [bp + -1] ; i
0019   0411 D7            push a
0020   0412 11            mov a, b
0021   0413 26 00 00      mov b, 0
0022   0416 B0            cmp a, b
0023   0417 0E            lodflgs
0024   0418 87 03         and al, %00000011
0025   041A 8F 02         xor al, %00000010 ; >=
0026   041C B9 00         cmp al, 0
0027   041E 0E            lodflgs
0028   041F 8F 01         xor al, %00000001
0029   0421 22 00         mov ah, 0
0030   0423 27            mov b, a
0031   0424 E4            pop a
0032   0425 C0 00 00      cmp b, 0
0033   0428 C6 55 04      je _for1_exit
0034   042B             _for1_block:
0035   042B 2C FF FF      mov b, [bp + -1] ; i
0036   042E FD AB         swp b
0037   0430 D8            push b
0038   0431 07 A0 05      call print_num
0039   0434 51 02 00      add sp, 2
0040   0437 26 90 06      mov b, __string_0 ; "\n"
0041   043A FD AB         swp b
0042   043C D8            push b
0043   043D 07 85 06      call print
0044   0440 51 02 00      add sp, 2
0045   0443             _for1_update:
0046   0443 2C FF FF      mov b, [bp + -1] ; i
0047   0446 D7            push a
0048   0447 11            mov a, b
0049   0448 FD 7D         dec b
0050   044A D7            push a
0051   044B 11            mov a, b
0052   044C 45 FF FF      mov [bp + -1], a ; i
0053   044F E4            pop a
0054   0450 27            mov b, a
0055   0451 E4            pop a
0056   0452 0A 0E 04      jmp _for1_cond
0057   0455             _for1_exit:
0058   0455 F9            leave
0059   0456 05 0B         syscall sys_terminate_proc
0060   0458 26 0C 00      mov b, 12
0061   045B FD AB         swp b
0062   045D D8            push b
0063   045E 07 A6 04      call printn
0064   0461 51 02 00      add sp, 2
0065   0464 26 90 06      mov b, __string_0 ; "\n"
0066   0467 FD AB         swp b
0067   0469 D8            push b
0068   046A 07 85 06      call print
0069   046D 51 02 00      add sp, 2
0070   0470 26 66 04      mov b, 1126
0071   0473 FD AB         swp b
0072   0475 D8            push b
0073   0476 07 A6 04      call printn
0074   0479 51 02 00      add sp, 2
0075   047C 26 90 06      mov b, __string_0 ; "\n"
0076   047F FD AB         swp b
0077   0481 D8            push b
0078   0482 07 85 06      call print
0079   0485 51 02 00      add sp, 2
0080   0488 26 FF FF      mov b, 65535
0081   048B FD AB         swp b
0082   048D D8            push b
0083   048E 07 A6 04      call printn
0084   0491 51 02 00      add sp, 2
0085   0494 26 90 06      mov b, __string_0 ; "\n"
0086   0497 FD AB         swp b
0087   0499 D8            push b
0088   049A 07 85 06      call print
0089   049D 51 02 00      add sp, 2
0090   04A0 26 00 00      mov b, 0
0091   04A3 F9            leave
0092   04A4 05 0B         syscall sys_terminate_proc
0093   04A6             
0094   04A6             printn:
0095   04A6 D2            push bp
0096   04A7 9B            mov bp, sp
0097   04A8 52 05 00      sub sp, 5 ; buffer
0098   04AB 52 02 00      sub sp, 2 ; index
0099   04AE 52 02 00      sub sp, 2 ; i
0100   04B1             _if2_cond:
0101   04B1 2C 05 00      mov b, [bp + 5] ; number
0102   04B4 D7            push a
0103   04B5 11            mov a, b
0104   04B6 26 00 00      mov b, 0
0105   04B9 B0            cmp a, b
0106   04BA 0E            lodflgs
0107   04BB 87 01         and al, %00000001 ; ==
0108   04BD 22 00         mov ah, 0
0109   04BF 27            mov b, a
0110   04C0 E4            pop a
0111   04C1 C0 00 00      cmp b, 0
0112   04C4 C6 D6 04      je _if2_exit
0113   04C7             _if2_true:
0114   04C7 26 30 00      mov b, '0'
0115   04CA DD            push bl
0116   04CB 07 60 06      call _putchar
0117   04CE 51 01 00      add sp, 1
0118   04D1 F9            leave
0119   04D2 09            ret
0120   04D3 0A D6 04      jmp _if2_exit
0121   04D6             _if2_exit:
0122   04D6 26 00 00      mov b, 0
0123   04D9 D7            push a
0124   04DA 11            mov a, b
0125   04DB 45 FA FF      mov [bp + -6], a ; index
0126   04DE E4            pop a
0127   04DF             _while3_cond:
0128   04DF 2C 05 00      mov b, [bp + 5] ; number
0129   04E2 D7            push a
0130   04E3 11            mov a, b
0131   04E4 26 00 00      mov b, 0
0132   04E7 B0            cmp a, b
0133   04E8 0E            lodflgs
0134   04E9 87 03         and al, %00000011
0135   04EB B9 00         cmp al, 0
0136   04ED 0E            lodflgs
0137   04EE 22 00         mov ah, 0
0138   04F0 27            mov b, a
0139   04F1 E4            pop a
0140   04F2 C0 00 00      cmp b, 0
0141   04F5 C6 43 05      je _while3_exit
0142   04F8             _while3_block:
0143   04F8 FA FC FF      lea d, [bp + -4] ; buffer beginning on the stack
0144   04FB 2D            mov b, d
0145   04FC D7            push a
0146   04FD 74            mov d, b
0147   04FE DA            push d
0148   04FF 2C FA FF      mov b, [bp + -6] ; index
0149   0502 D7            push a
0150   0503 11            mov a, b
0151   0504 FD 77         inc b
0152   0506 D7            push a
0153   0507 11            mov a, b
0154   0508 45 FA FF      mov [bp + -6], a ; index
0155   050B E4            pop a
0156   050C 27            mov b, a
0157   050D E4            pop a
0158   050E E7            pop d
0159   050F 10 01 00      mov a, 1
0160   0512 AC            mul a, b
0161   0513 5A            add d, b
0162   0514 E4            pop a
0163   0515 DA            push d
0164   0516 2C 05 00      mov b, [bp + 5] ; number
0165   0519 D7            push a
0166   051A 11            mov a, b
0167   051B 26 0A 00      mov b, 10
0168   051E AE            div a, b
0169   051F E4            pop a
0170   0520 D7            push a
0171   0521 11            mov a, b
0172   0522 26 30 00      mov b, '0'
0173   0525 54            add a, b
0174   0526 27            mov b, a
0175   0527 E4            pop a
0176   0528 E7            pop d
0177   0529 FD 3E         mov [d], bl
0178   052B 2C 05 00      mov b, [bp + 5] ; number
0179   052E D7            push a
0180   052F 11            mov a, b
0181   0530 26 0A 00      mov b, 10
0182   0533 AE            div a, b
0183   0534 FD 78         mov g, a
0184   0536 11            mov a, b
0185   0537 FD 27         mov b, g
0186   0539 E4            pop a
0187   053A D7            push a
0188   053B 11            mov a, b
0189   053C 45 05 00      mov [bp + 5], a ; number
0190   053F E4            pop a
0191   0540 0A DF 04      jmp _while3_cond
0192   0543             _while3_exit:
0193   0543             _for4_init:
0194   0543 2C FA FF      mov b, [bp + -6] ; index
0195   0546 D7            push a
0196   0547 11            mov a, b
0197   0548 26 01 00      mov b, 1
0198   054B 60            sub a, b
0199   054C 27            mov b, a
0200   054D E4            pop a
0201   054E D7            push a
0202   054F 11            mov a, b
0203   0550 45 F8 FF      mov [bp + -8], a ; i
0204   0553 E4            pop a
0205   0554             _for4_cond:
0206   0554 2C F8 FF      mov b, [bp + -8] ; i
0207   0557 D7            push a
0208   0558 11            mov a, b
0209   0559 26 00 00      mov b, 0
0210   055C B0            cmp a, b
0211   055D 0E            lodflgs
0212   055E 87 03         and al, %00000011
0213   0560 8F 02         xor al, %00000010 ; >=
0214   0562 B9 00         cmp al, 0
0215   0564 0E            lodflgs
0216   0565 8F 01         xor al, %00000001
0217   0567 22 00         mov ah, 0
0218   0569 27            mov b, a
0219   056A E4            pop a
0220   056B C0 00 00      cmp b, 0
0221   056E C6 9E 05      je _for4_exit
0222   0571             _for4_block:
0223   0571 FA FC FF      lea d, [bp + -4] ; buffer beginning on the stack
0224   0574 2D            mov b, d
0225   0575 D7            push a
0226   0576 74            mov d, b
0227   0577 DA            push d
0228   0578 2C F8 FF      mov b, [bp + -8] ; i
0229   057B E7            pop d
0230   057C 10 01 00      mov a, 1
0231   057F AC            mul a, b
0232   0580 5A            add d, b
0233   0581 E4            pop a
0234   0582 32            mov bl, [d]
0235   0583 A7 00         mov bh, 0
0236   0585 DD            push bl
0237   0586 07 60 06      call _putchar
0238   0589 51 01 00      add sp, 1
0239   058C             _for4_update:
0240   058C 2C F8 FF      mov b, [bp + -8] ; i
0241   058F D7            push a
0242   0590 11            mov a, b
0243   0591 FD 7D         dec b
0244   0593 D7            push a
0245   0594 11            mov a, b
0246   0595 45 F8 FF      mov [bp + -8], a ; i
0247   0598 E4            pop a
0248   0599 27            mov b, a
0249   059A E4            pop a
0250   059B 0A 54 05      jmp _for4_cond
0251   059E             _for4_exit:
0252   059E F9            leave
0253   059F 09            ret
0254   05A0             
0255   05A0             print_num:
0256   05A0 D2            push bp
0257   05A1 9B            mov bp, sp
0258   05A2 52 05 00      sub sp, 5 ; digits
0259   05A5 52 02 00      sub sp, 2 ; i
0260   05A8 26 00 00      mov b, 0
0261   05AB D7            push a
0262   05AC 11            mov a, b
0263   05AD 45 FA FF      mov [bp + -6], a ; i
0264   05B0 E4            pop a
0265   05B1             _while5_cond:
0266   05B1 2C 05 00      mov b, [bp + 5] ; num
0267   05B4 D7            push a
0268   05B5 11            mov a, b
0269   05B6 26 00 00      mov b, 0
0270   05B9 B0            cmp a, b
0271   05BA 0E            lodflgs
0272   05BB 87 03         and al, %00000011
0273   05BD B9 00         cmp al, 0
0274   05BF 0E            lodflgs
0275   05C0 22 00         mov ah, 0
0276   05C2 27            mov b, a
0277   05C3 E4            pop a
0278   05C4 C0 00 00      cmp b, 0
0279   05C7 C6 18 06      je _while5_exit
0280   05CA             _while5_block:
0281   05CA FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0282   05CD 2D            mov b, d
0283   05CE D7            push a
0284   05CF 74            mov d, b
0285   05D0 DA            push d
0286   05D1 2C FA FF      mov b, [bp + -6] ; i
0287   05D4 E7            pop d
0288   05D5 10 01 00      mov a, 1
0289   05D8 AC            mul a, b
0290   05D9 5A            add d, b
0291   05DA E4            pop a
0292   05DB DA            push d
0293   05DC 26 30 00      mov b, '0'
0294   05DF D7            push a
0295   05E0 11            mov a, b
0296   05E1 2C 05 00      mov b, [bp + 5] ; num
0297   05E4 D7            push a
0298   05E5 11            mov a, b
0299   05E6 26 0A 00      mov b, 10
0300   05E9 AE            div a, b
0301   05EA E4            pop a
0302   05EB 54            add a, b
0303   05EC 27            mov b, a
0304   05ED E4            pop a
0305   05EE E7            pop d
0306   05EF FD 3E         mov [d], bl
0307   05F1 2C 05 00      mov b, [bp + 5] ; num
0308   05F4 D7            push a
0309   05F5 11            mov a, b
0310   05F6 26 0A 00      mov b, 10
0311   05F9 AE            div a, b
0312   05FA FD 78         mov g, a
0313   05FC 11            mov a, b
0314   05FD FD 27         mov b, g
0315   05FF E4            pop a
0316   0600 D7            push a
0317   0601 11            mov a, b
0318   0602 45 05 00      mov [bp + 5], a ; num
0319   0605 E4            pop a
0320   0606 2C FA FF      mov b, [bp + -6] ; i
0321   0609 D7            push a
0322   060A 11            mov a, b
0323   060B FD 77         inc b
0324   060D D7            push a
0325   060E 11            mov a, b
0326   060F 45 FA FF      mov [bp + -6], a ; i
0327   0612 E4            pop a
0328   0613 27            mov b, a
0329   0614 E4            pop a
0330   0615 0A B1 05      jmp _while5_cond
0331   0618             _while5_exit:
0332   0618             _while6_cond:
0333   0618 2C FA FF      mov b, [bp + -6] ; i
0334   061B D7            push a
0335   061C 11            mov a, b
0336   061D 26 00 00      mov b, 0
0337   0620 B0            cmp a, b
0338   0621 0E            lodflgs
0339   0622 87 03         and al, %00000011
0340   0624 B9 00         cmp al, 0
0341   0626 0E            lodflgs
0342   0627 22 00         mov ah, 0
0343   0629 27            mov b, a
0344   062A E4            pop a
0345   062B C0 00 00      cmp b, 0
0346   062E C6 5E 06      je _while6_exit
0347   0631             _while6_block:
0348   0631 2C FA FF      mov b, [bp + -6] ; i
0349   0634 D7            push a
0350   0635 11            mov a, b
0351   0636 FD 7D         dec b
0352   0638 D7            push a
0353   0639 11            mov a, b
0354   063A 45 FA FF      mov [bp + -6], a ; i
0355   063D E4            pop a
0356   063E 27            mov b, a
0357   063F E4            pop a
0358   0640 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0359   0643 2D            mov b, d
0360   0644 D7            push a
0361   0645 74            mov d, b
0362   0646 DA            push d
0363   0647 2C FA FF      mov b, [bp + -6] ; i
0364   064A E7            pop d
0365   064B 10 01 00      mov a, 1
0366   064E AC            mul a, b
0367   064F 5A            add d, b
0368   0650 E4            pop a
0369   0651 32            mov bl, [d]
0370   0652 A7 00         mov bh, 0
0371   0654 DD            push bl
0372   0655 07 60 06      call _putchar
0373   0658 51 01 00      add sp, 1
0374   065B 0A 18 06      jmp _while6_cond
0375   065E             _while6_exit:
0376   065E F9            leave
0377   065F 09            ret
0378   0660             
0379   0660             _putchar:
0380   0660 D2            push bp
0381   0661 9B            mov bp, sp
0382   0662             
0383   0662             ; --- BEGIN INLINE ASM BLOCK
0384   0662 20 05 00      mov al, [bp + 5]
0385   0665 23            mov ah, al
0386   0666 07 A4 07      call putchar
0387   0669             ; --- END INLINE ASM BLOCK
0388   0669             
0389   0669 F9            leave
0390   066A 09            ret
0391   066B             
0392   066B             scann:
0393   066B D2            push bp
0394   066C 9B            mov bp, sp
0395   066D 52 02 00      sub sp, 2 ; m
0396   0670             
0397   0670             ; --- BEGIN INLINE ASM BLOCK
0398   0670 07 DC 09      call scan_u16d
0399   0673 45 FF FF      mov [bp + -1], a
0400   0676             ; --- END INLINE ASM BLOCK
0401   0676             
0402   0676 FA 05 00      lea d, [bp + 5] ; n
0403   0679 2A            mov b, [d]
0404   067A D8            push b
0405   067B 2C FF FF      mov b, [bp + -1] ; m
0406   067E E7            pop d
0407   067F D7            push a
0408   0680 11            mov a, b
0409   0681 43            mov [d], a
0410   0682 E4            pop a
0411   0683 F9            leave
0412   0684 09            ret
0413   0685             
0414   0685             print:
0415   0685 D2            push bp
0416   0686 9B            mov bp, sp
0417   0687             
0418   0687             ; --- BEGIN INLINE ASM BLOCK
0419   0687 17 05 00      mov a, [bp + 5]
0420   068A 3C            mov d, a
0421   068B 07 DE 08      call puts
0422   068E             ; --- END INLINE ASM BLOCK
0423   068E             
0424   068E F9            leave
0425   068F 09            ret
0426   0690             ; --- END TEXT BLOCK
0427   0690             
0428   0690             ; --- BEGIN DATA BLOCK
0429   0690 0A 00       __string_0: .db "\n", 0
0430   0692             ; --- END DATA BLOCK
0431   0692             
0432   0692             ; --- BEGIN INCLUDE BLOCK
0433   0692             .include "lib/stdio.asm"
0001+  0692             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0692             ; stdio.s
0003+  0692             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0692             .include "lib/string.asm"
0001++ 0692             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0692             ; string.s
0003++ 0692             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0692             
0005++ 0692             
0006++ 0692             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0692             ; strrev
0008++ 0692             ; reverse a string
0009++ 0692             ; D = string address
0010++ 0692             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0692             ; 01234
0012++ 0692             strrev:
0013++ 0692 4B          	pusha
0014++ 0693 07 D9 06    	call strlen	; length in C
0015++ 0696 12          	mov a, c
0016++ 0697 AF 01 00    	cmp a, 1
0017++ 069A D0 B4 06    	jleu strrev_end	; check string length. string len must be > 1
0018++ 069D 7D          	dec a
0019++ 069E FD 4E       	mov si, d	; beginning of string
0020++ 06A0 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 06A2 59          	add d, a	; end of string
0022++ 06A3 12          	mov a, c
0023++ 06A4 FD 9B       	shr a		; divide by 2
0024++ 06A6 39          	mov c, a	; C now counts the steps
0025++ 06A7             strrev_L0:
0026++ 06A7 32          	mov bl, [d]	; save load right-side char into BL
0027++ 06A8 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 06A9 3E          	mov [d], al	; store left char into right side
0029++ 06AA 1B          	mov al, bl
0030++ 06AB F7          	stosb		; store right-side char into left-side; increase DI
0031++ 06AC 7E          	dec c
0032++ 06AD 7F          	dec d
0033++ 06AE C2 00 00    	cmp c, 0
0034++ 06B1 C7 A7 06    	jne strrev_L0
0035++ 06B4             strrev_end:
0036++ 06B4 4C          	popa
0037++ 06B5 09          	ret
0038++ 06B6             	
0039++ 06B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 06B6             ; strchr
0041++ 06B6             ; search string in D for char in AL
0042++ 06B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 06B6             strchr:
0044++ 06B6             strchr_L0:
0045++ 06B6 32          	mov bl, [d]
0046++ 06B7 C1 00       	cmp bl, 0
0047++ 06B9 C6 C4 06    	je strchr_end
0048++ 06BC BA          	cmp al, bl
0049++ 06BD C6 C4 06    	je strchr_end
0050++ 06C0 79          	inc d
0051++ 06C1 0A B6 06    	jmp strchr_L0
0052++ 06C4             strchr_end:
0053++ 06C4 1B          	mov al, bl
0054++ 06C5 09          	ret
0055++ 06C6             
0056++ 06C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 06C6             ; strstr
0058++ 06C6             ; find sub-string
0059++ 06C6             ; str1 in SI
0060++ 06C6             ; str2 in DI
0061++ 06C6             ; SI points to end of source string
0062++ 06C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 06C6             strstr:
0064++ 06C6 DB          	push al
0065++ 06C7 DA          	push d
0066++ 06C8 E3          	push di
0067++ 06C9             strstr_loop:
0068++ 06C9 F3          	cmpsb					; compare a byte of the strings
0069++ 06CA C7 D5 06    	jne strstr_ret
0070++ 06CD FC 00 00    	lea d, [di + 0]
0071++ 06D0 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 06D2 C7 C9 06    	jne strstr_loop				; equal chars but not at end
0073++ 06D5             strstr_ret:
0074++ 06D5 F0          	pop di
0075++ 06D6 E7          	pop d
0076++ 06D7 E8          	pop al
0077++ 06D8 09          	ret
0078++ 06D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 06D9             ; length of null terminated string
0080++ 06D9             ; result in C
0081++ 06D9             ; pointer in D
0082++ 06D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 06D9             strlen:
0084++ 06D9 DA          	push d
0085++ 06DA 38 00 00    	mov c, 0
0086++ 06DD             strlen_L1:
0087++ 06DD BD 00       	cmp byte [d], 0
0088++ 06DF C6 E7 06    	je strlen_ret
0089++ 06E2 79          	inc d
0090++ 06E3 78          	inc c
0091++ 06E4 0A DD 06    	jmp strlen_L1
0092++ 06E7             strlen_ret:
0093++ 06E7 E7          	pop d
0094++ 06E8 09          	ret
0095++ 06E9             
0096++ 06E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 06E9             ; STRCMP
0098++ 06E9             ; compare two strings
0099++ 06E9             ; str1 in SI
0100++ 06E9             ; str2 in DI
0101++ 06E9             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 06E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 06E9             strcmp:
0104++ 06E9 DB          	push al
0105++ 06EA DA          	push d
0106++ 06EB E3          	push di
0107++ 06EC E2          	push si
0108++ 06ED             strcmp_loop:
0109++ 06ED F3          	cmpsb					; compare a byte of the strings
0110++ 06EE C7 F9 06    	jne strcmp_ret
0111++ 06F1 FB FF FF    	lea d, [si +- 1]
0112++ 06F4 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 06F6 C7 ED 06    	jne strcmp_loop				; equal chars but not at end
0114++ 06F9             strcmp_ret:
0115++ 06F9 EF          	pop si
0116++ 06FA F0          	pop di
0117++ 06FB E7          	pop d
0118++ 06FC E8          	pop al
0119++ 06FD 09          	ret
0120++ 06FE             
0121++ 06FE             
0122++ 06FE             ; STRCPY
0123++ 06FE             ; copy null terminated string from SI to DI
0124++ 06FE             ; source in SI
0125++ 06FE             ; destination in DI
0126++ 06FE             strcpy:
0127++ 06FE E2          	push si
0128++ 06FF E3          	push di
0129++ 0700 DB          	push al
0130++ 0701             strcpy_L1:
0131++ 0701 F6          	lodsb
0132++ 0702 F7          	stosb
0133++ 0703 B9 00       	cmp al, 0
0134++ 0705 C7 01 07    	jne strcpy_L1
0135++ 0708             strcpy_end:
0136++ 0708 E8          	pop al
0137++ 0709 F0          	pop di
0138++ 070A EF          	pop si
0139++ 070B 09          	ret
0140++ 070C             
0141++ 070C             ; STRCAT
0142++ 070C             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 070C             ; source in SI
0144++ 070C             ; destination in DI
0145++ 070C             strcat:
0146++ 070C E2          	push si
0147++ 070D E3          	push di
0148++ 070E D7          	push a
0149++ 070F DA          	push d
0150++ 0710 50          	mov a, di
0151++ 0711 3C          	mov d, a
0152++ 0712             strcat_goto_end_L1:
0153++ 0712 BD 00       	cmp byte[d], 0
0154++ 0714 C6 1B 07    	je strcat_start
0155++ 0717 79          	inc d
0156++ 0718 0A 12 07    	jmp strcat_goto_end_L1
0157++ 071B             strcat_start:
0158++ 071B FD 50       	mov di, d
0159++ 071D             strcat_L1:
0160++ 071D F6          	lodsb
0161++ 071E F7          	stosb
0162++ 071F B9 00       	cmp al, 0
0163++ 0721 C7 1D 07    	jne strcat_L1
0164++ 0724             strcat_end:
0165++ 0724 E7          	pop d
0166++ 0725 E4          	pop a
0167++ 0726 F0          	pop di
0168++ 0727 EF          	pop si
0169++ 0728 09          	ret
0005+  0729             
0006+  0729 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  072D 34 35 36 37 
0006+  0731 38 39 41 42 
0006+  0735 43 44 45 46 
0007+  0739 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  073D 1B 5B 48 00 
0008+  0741             
0009+  0741 01 00       table_power:.dw 1
0010+  0743 0A 00       			.dw 10
0011+  0745 64 00       			.dw 100
0012+  0747 E8 03       			.dw 1000
0013+  0749 10 27       			.dw 10000
0014+  074B             
0015+  074B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  074B             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  074B             ; ASCII in BL
0018+  074B             ; result in AL
0019+  074B             ; ascii for F = 0100 0110
0020+  074B             ; ascii for 9 = 0011 1001
0021+  074B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  074B             hex_ascii_encode:
0023+  074B 1B          	mov al, bl
0024+  074C 93 40       	test al, $40				; test if letter or number
0025+  074E C7 54 07    	jnz hex_letter
0026+  0751 87 0F       	and al, $0F				; get number
0027+  0753 09          	ret
0028+  0754             hex_letter:
0029+  0754 87 0F       	and al, $0F				; get letter
0030+  0756 6A 09       	add al, 9
0031+  0758 09          	ret
0032+  0759             
0033+  0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0759             ; ATOI
0035+  0759             ; 2 letter hex string in B
0036+  0759             ; 8bit integer returned in AL
0037+  0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0759             atoi:
0039+  0759 D8          	push b
0040+  075A 07 4B 07    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  075D 30          	mov bl, bh
0042+  075E DB          	push al					; save a
0043+  075F 07 4B 07    	call hex_ascii_encode
0044+  0762 EA          	pop bl	
0045+  0763 FD 9E 04    	shl al, 4
0046+  0766 8C          	or al, bl
0047+  0767 E5          	pop b
0048+  0768 09          	ret	
0049+  0769             
0050+  0769             
0051+  0769             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0769             ; printf
0053+  0769             ; no need for explanations!
0054+  0769             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0769             printf:
0056+  0769 09          	ret
0057+  076A             
0058+  076A             
0059+  076A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  076A             ; scanf
0061+  076A             ; no need for explanations!
0062+  076A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  076A             scanf:
0064+  076A 09          	ret
0065+  076B             
0066+  076B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  076B             ; ITOA
0068+  076B             ; 8bit value in BL
0069+  076B             ; 2 byte ASCII result in A
0070+  076B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  076B             itoa:
0072+  076B DA          	push d
0073+  076C D8          	push b
0074+  076D A7 00       	mov bh, 0
0075+  076F FD A4 04    	shr bl, 4	
0076+  0772 74          	mov d, b
0077+  0773 1F 29 07    	mov al, [d + s_hex_digits]
0078+  0776 23          	mov ah, al
0079+  0777             	
0080+  0777 E5          	pop b
0081+  0778 D8          	push b
0082+  0779 A7 00       	mov bh, 0
0083+  077B FD 87 0F    	and bl, $0F
0084+  077E 74          	mov d, b
0085+  077F 1F 29 07    	mov al, [d + s_hex_digits]
0086+  0782 E5          	pop b
0087+  0783 E7          	pop d
0088+  0784 09          	ret
0089+  0785             
0090+  0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0785             ; HEX STRING TO BINARY
0092+  0785             ; di = destination address
0093+  0785             ; si = source
0094+  0785             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0785             hex_to_int:
0096+  0785             hex_to_int_L1:
0097+  0785 F6          	lodsb					; load from [SI] to AL
0098+  0786 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0788 C6 95 07    	jz hex_to_int_ret
0100+  078B 36          	mov bh, al
0101+  078C F6          	lodsb
0102+  078D 2F          	mov bl, al
0103+  078E 07 59 07    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0791 F7          	stosb					; store AL to [DI]
0105+  0792 0A 85 07    	jmp hex_to_int_L1
0106+  0795             hex_to_int_ret:
0107+  0795 09          	ret		
0108+  0796             
0109+  0796             
0110+  0796             
0111+  0796             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0796             ; GETCHAR
0113+  0796             ; char in ah
0114+  0796             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0796             getchar:
0116+  0796 DB          	push al
0117+  0797             getchar_retry:
0118+  0797 FD 0C       	sti
0119+  0799 19 01       	mov al, 1
0120+  079B 05 03       	syscall sys_io			; receive in AH
0121+  079D B9 00       	cmp al, 0			; check if any char was receive
0122+  079F C6 97 07    	je getchar_retry
0123+  07A2 E8          	pop al
0124+  07A3 09          	ret
0125+  07A4             
0126+  07A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  07A4             ; PUTCHAR
0128+  07A4             ; char in ah
0129+  07A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  07A4             putchar:
0131+  07A4 D7          	push a
0132+  07A5 19 00       	mov al, 0
0133+  07A7 05 03       	syscall sys_io			; char in AH
0134+  07A9 E4          	pop a
0135+  07AA 09          	ret
0136+  07AB             
0137+  07AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  07AB             ;; INPUT A STRING
0139+  07AB             ;; terminates with null
0140+  07AB             ;; pointer in D
0141+  07AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  07AB             gets:
0143+  07AB D7          	push a
0144+  07AC DA          	push d
0145+  07AD             gets_loop:
0146+  07AD FD 0C       	sti
0147+  07AF 19 01       	mov al, 1
0148+  07B1 05 03       	syscall sys_io			; receive in AH
0149+  07B3 B9 00       	cmp al, 0				; check error code (AL)
0150+  07B5 C6 AD 07    	je gets_loop			; if no char received, retry
0151+  07B8             
0152+  07B8 76 1B       	cmp ah, 27
0153+  07BA C6 DB 07    	je gets_telnet_escape
0154+  07BD 76 0A       	cmp ah, $0A				; LF
0155+  07BF C6 34 08    	je gets_end
0156+  07C2 76 0D       	cmp ah, $0D				; CR
0157+  07C4 C6 34 08    	je gets_end
0158+  07C7 76 5C       	cmp ah, $5C				; '\\'
0159+  07C9 C6 0B 08    	je gets_escape
0160+  07CC             	
0161+  07CC 76 08       	cmp ah, $08			; check for backspace
0162+  07CE C6 D7 07    	je gets_backspace
0163+  07D1             
0164+  07D1 1A          	mov al, ah
0165+  07D2 3E          	mov [d], al
0166+  07D3 79          	inc d
0167+  07D4 0A AD 07    	jmp gets_loop
0168+  07D7             gets_backspace:
0169+  07D7 7F          	dec d
0170+  07D8 0A AD 07    	jmp gets_loop
0171+  07DB             gets_telnet_escape:
0172+  07DB FD 0C       	sti
0173+  07DD 19 01       	mov al, 1
0174+  07DF 05 03       	syscall sys_io				; receive in AH without echo
0175+  07E1 B9 00       	cmp al, 0					; check error code (AL)
0176+  07E3 C6 DB 07    	je gets_telnet_escape		; if no char received, retry
0177+  07E6 76 5B       	cmp ah, '['
0178+  07E8 C7 AD 07    	jne gets_loop
0179+  07EB             gets_telnet_escape_phase2:
0180+  07EB FD 0C       	sti
0181+  07ED 19 01       	mov al, 1
0182+  07EF 05 03       	syscall sys_io					; receive in AH without echo
0183+  07F1 B9 00       	cmp al, 0						; check error code (AL)
0184+  07F3 C6 EB 07    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  07F6 76 44       	cmp ah, 'D'
0186+  07F8 C6 03 08    	je gets_left_arrow
0187+  07FB 76 43       	cmp ah, 'C'
0188+  07FD C6 07 08    	je gets_right_arrow
0189+  0800 0A AD 07    	jmp gets_loop
0190+  0803             gets_left_arrow:
0191+  0803 7F          	dec d
0192+  0804 0A AD 07    	jmp gets_loop
0193+  0807             gets_right_arrow:
0194+  0807 79          	inc d
0195+  0808 0A AD 07    	jmp gets_loop
0196+  080B             gets_escape:
0197+  080B FD 0C       	sti
0198+  080D 19 01       	mov al, 1
0199+  080F 05 03       	syscall sys_io			; receive in AH
0200+  0811 B9 00       	cmp al, 0				; check error code (AL)
0201+  0813 C6 0B 08    	je gets_escape			; if no char received, retry
0202+  0816 76 6E       	cmp ah, 'n'
0203+  0818 C6 26 08    	je gets_LF
0204+  081B 76 72       	cmp ah, 'r'
0205+  081D C6 2D 08    	je gets_CR
0206+  0820 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0821 3E          	mov [d], al
0208+  0822 79          	inc d
0209+  0823 0A AD 07    	jmp gets_loop
0210+  0826             gets_LF:
0211+  0826 19 0A       	mov al, $0A
0212+  0828 3E          	mov [d], al
0213+  0829 79          	inc d
0214+  082A 0A AD 07    	jmp gets_loop
0215+  082D             gets_CR:
0216+  082D 19 0D       	mov al, $0D
0217+  082F 3E          	mov [d], al
0218+  0830 79          	inc d
0219+  0831 0A AD 07    	jmp gets_loop
0220+  0834             gets_end:
0221+  0834 19 00       	mov al, 0
0222+  0836 3E          	mov [d], al				; terminate string
0223+  0837 E7          	pop d
0224+  0838 E4          	pop a
0225+  0839 09          	ret
0226+  083A             
0227+  083A             
0228+  083A             
0229+  083A             
0230+  083A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  083A             ;; INPUT TEXT
0232+  083A             ;; terminated with CTRL+D
0233+  083A             ;; pointer in D
0234+  083A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  083A             gettxt:
0236+  083A D7          	push a
0237+  083B DA          	push d
0238+  083C             gettxt_loop:
0239+  083C 19 01       	mov al, 1
0240+  083E 05 03       	syscall sys_io			; receive in AH
0241+  0840 B9 00       	cmp al, 0				; check error code (AL)
0242+  0842 C6 3C 08    	je gettxt_loop		; if no char received, retry
0243+  0845 76 04       	cmp ah, 4			; EOT
0244+  0847 C6 85 08    	je gettxt_end
0245+  084A 76 08       	cmp ah, $08			; check for backspace
0246+  084C C6 81 08    	je gettxt_backspace
0247+  084F 76 5C       	cmp ah, $5C				; '\\'
0248+  0851 C6 5A 08    	je gettxt_escape
0249+  0854 1A          	mov al, ah
0250+  0855 3E          	mov [d], al
0251+  0856 79          	inc d
0252+  0857 0A 3C 08    	jmp gettxt_loop
0253+  085A             gettxt_escape:
0254+  085A 19 01       	mov al, 1
0255+  085C 05 03       	syscall sys_io			; receive in AH
0256+  085E B9 00       	cmp al, 0				; check error code (AL)
0257+  0860 C6 5A 08    	je gettxt_escape		; if no char received, retry
0258+  0863 76 6E       	cmp ah, 'n'
0259+  0865 C6 73 08    	je gettxt_LF
0260+  0868 76 72       	cmp ah, 'r'
0261+  086A C6 7A 08    	je gettxt_CR
0262+  086D 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  086E 3E          	mov [d], al
0264+  086F 79          	inc d
0265+  0870 0A 3C 08    	jmp gettxt_loop
0266+  0873             gettxt_LF:
0267+  0873 19 0A       	mov al, $0A
0268+  0875 3E          	mov [d], al
0269+  0876 79          	inc d
0270+  0877 0A 3C 08    	jmp gettxt_loop
0271+  087A             gettxt_CR:
0272+  087A 19 0D       	mov al, $0D
0273+  087C 3E          	mov [d], al
0274+  087D 79          	inc d
0275+  087E 0A 3C 08    	jmp gettxt_loop
0276+  0881             gettxt_backspace:
0277+  0881 7F          	dec d
0278+  0882 0A 3C 08    	jmp gettxt_loop
0279+  0885             gettxt_end:
0280+  0885 19 00       	mov al, 0
0281+  0887 3E          	mov [d], al				; terminate string
0282+  0888 E7          	pop d
0283+  0889 E4          	pop a
0284+  088A 09          	ret
0285+  088B             
0286+  088B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  088B             ; PRINT NEW LINE
0288+  088B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  088B             printnl:
0290+  088B D7          	push a
0291+  088C 10 00 0A    	mov a, $0A00
0292+  088F 05 03       	syscall sys_io
0293+  0891 10 00 0D    	mov a, $0D00
0294+  0894 05 03       	syscall sys_io
0295+  0896 E4          	pop a
0296+  0897 09          	ret
0297+  0898             
0298+  0898             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0898             ; strtoint
0300+  0898             ; 4 digit hex string number in d
0301+  0898             ; integer returned in A
0302+  0898             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0898             strtointx:
0304+  0898 D8          	push b
0305+  0899 32          	mov bl, [d]
0306+  089A 37          	mov bh, bl
0307+  089B 33 01 00    	mov bl, [d + 1]
0308+  089E 07 59 07    	call atoi				; convert to int in AL
0309+  08A1 23          	mov ah, al				; move to AH
0310+  08A2 33 02 00    	mov bl, [d + 2]
0311+  08A5 37          	mov bh, bl
0312+  08A6 33 03 00    	mov bl, [d + 3]
0313+  08A9 07 59 07    	call atoi				; convert to int in AL
0314+  08AC E5          	pop b
0315+  08AD 09          	ret
0316+  08AE             
0317+  08AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  08AE             ; strtoint
0319+  08AE             ; 5 digit base10 string number in d
0320+  08AE             ; integer returned in A
0321+  08AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  08AE             strtoint:
0323+  08AE E2          	push si
0324+  08AF D8          	push b
0325+  08B0 D9          	push c
0326+  08B1 DA          	push d
0327+  08B2 07 D9 06    	call strlen			; get string length in C
0328+  08B5 7E          	dec c
0329+  08B6 FD 4E       	mov si, d
0330+  08B8 12          	mov a, c
0331+  08B9 FD 99       	shl a
0332+  08BB 3B 41 07    	mov d, table_power
0333+  08BE 59          	add d, a
0334+  08BF 38 00 00    	mov c, 0
0335+  08C2             strtoint_L0:
0336+  08C2 F6          	lodsb			; load ASCII to al
0337+  08C3 B9 00       	cmp al, 0
0338+  08C5 C6 D8 08    	je strtoint_end
0339+  08C8 6F 30       	sub al, $30		; make into integer
0340+  08CA 22 00       	mov ah, 0
0341+  08CC 2A          	mov b, [d]
0342+  08CD AC          	mul a, b			; result in B since it fits in 16bits
0343+  08CE 11          	mov a, b
0344+  08CF 28          	mov b, c
0345+  08D0 54          	add a, b
0346+  08D1 39          	mov c, a
0347+  08D2 63 02 00    	sub d, 2
0348+  08D5 0A C2 08    	jmp strtoint_L0
0349+  08D8             strtoint_end:
0350+  08D8 12          	mov a, c
0351+  08D9 E7          	pop d
0352+  08DA E6          	pop c
0353+  08DB E5          	pop b
0354+  08DC EF          	pop si
0355+  08DD 09          	ret
0356+  08DE             
0357+  08DE             
0358+  08DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  08DE             ; PRINT NULL TERMINATED STRING
0360+  08DE             ; pointer in D
0361+  08DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  08DE             puts:
0363+  08DE D7          	push a
0364+  08DF DA          	push d
0365+  08E0             puts_L1:
0366+  08E0 1E          	mov al, [d]
0367+  08E1 B9 00       	cmp al, 0
0368+  08E3 C6 EF 08    	jz puts_END
0369+  08E6 23          	mov ah, al
0370+  08E7 19 00       	mov al, 0
0371+  08E9 05 03       	syscall sys_io
0372+  08EB 79          	inc d
0373+  08EC 0A E0 08    	jmp puts_L1
0374+  08EF             puts_END:
0375+  08EF E7          	pop d
0376+  08F0 E4          	pop a
0377+  08F1 09          	ret
0378+  08F2             
0379+  08F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  08F2             ; PRINT N SIZE STRING
0381+  08F2             ; pointer in D
0382+  08F2             ; size in C
0383+  08F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  08F2             putsn:
0385+  08F2 DB          	push al
0386+  08F3 DA          	push d
0387+  08F4 D9          	push c
0388+  08F5             putsn_L0:
0389+  08F5 1E          	mov al, [d]
0390+  08F6 23          	mov ah, al
0391+  08F7 19 00       	mov al, 0
0392+  08F9 05 03       	syscall sys_io
0393+  08FB 79          	inc d
0394+  08FC 7E          	dec c	
0395+  08FD C2 00 00    	cmp c, 0
0396+  0900 C7 F5 08    	jne putsn_L0
0397+  0903             putsn_end:
0398+  0903 E6          	pop c
0399+  0904 E7          	pop d
0400+  0905 E8          	pop al
0401+  0906 09          	ret
0402+  0907             
0403+  0907             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0907             ; print 16bit decimal number
0405+  0907             ; input number in A
0406+  0907             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0907             print_u16d:
0408+  0907 D7          	push a
0409+  0908 D8          	push b
0410+  0909 26 10 27    	mov b, 10000
0411+  090C AE          	div a, b			; get 10000 coeff.
0412+  090D 07 33 09    	call print_number
0413+  0910 11          	mov a, b
0414+  0911 26 E8 03    	mov b, 1000
0415+  0914 AE          	div a, b			; get 10000 coeff.
0416+  0915 07 33 09    	call print_number
0417+  0918 11          	mov a, b
0418+  0919 26 64 00    	mov b, 100
0419+  091C AE          	div a, b
0420+  091D 07 33 09    	call print_number
0421+  0920 11          	mov a, b
0422+  0921 26 0A 00    	mov b, 10
0423+  0924 AE          	div a, b
0424+  0925 07 33 09    	call print_number
0425+  0928 11          	mov a, b
0426+  0929 6A 30       	add al, $30
0427+  092B 23          	mov ah, al
0428+  092C 19 00       	mov al, 0
0429+  092E 05 03       	syscall sys_io	; print coeff
0430+  0930 E5          	pop b
0431+  0931 E4          	pop a
0432+  0932 09          	ret
0433+  0933             
0434+  0933             
0435+  0933             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0933             ; if A == 0, print space
0437+  0933             ; else print A
0438+  0933             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  0933             print_number:
0440+  0933 6A 30       	add al, $30
0441+  0935 23          	mov ah, al
0442+  0936 07 A4 07    	call putchar
0443+  0939 09          	ret
0444+  093A             
0445+  093A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  093A             ; PRINT 16BIT HEX INTEGER
0447+  093A             ; integer value in reg B
0448+  093A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  093A             print_u16x:
0450+  093A D7          	push a
0451+  093B D8          	push b
0452+  093C DD          	push bl
0453+  093D 30          	mov bl, bh
0454+  093E 07 6B 07    	call itoa				; convert bh to char in A
0455+  0941 2F          	mov bl, al				; save al
0456+  0942 19 00       	mov al, 0
0457+  0944 05 03       	syscall sys_io				; display AH
0458+  0946 24          	mov ah, bl				; retrieve al
0459+  0947 19 00       	mov al, 0
0460+  0949 05 03       	syscall sys_io				; display AL
0461+  094B             
0462+  094B EA          	pop bl
0463+  094C 07 6B 07    	call itoa				; convert bh to char in A
0464+  094F 2F          	mov bl, al				; save al
0465+  0950 19 00       	mov al, 0
0466+  0952 05 03       	syscall sys_io				; display AH
0467+  0954 24          	mov ah, bl				; retrieve al
0468+  0955 19 00       	mov al, 0
0469+  0957 05 03       	syscall sys_io				; display AL
0470+  0959             
0471+  0959 E5          	pop b
0472+  095A E4          	pop a
0473+  095B 09          	ret
0474+  095C             
0475+  095C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  095C             ; INPUT 16BIT HEX INTEGER
0477+  095C             ; read 16bit integer into A
0478+  095C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  095C             scan_u16x:
0480+  095C F8 10 00    	enter 16
0481+  095F D8          	push b
0482+  0960 DA          	push d
0483+  0961             
0484+  0961 FA F1 FF    	lea d, [bp + -15]
0485+  0964 07 AB 07    	call gets				; get number
0486+  0967             
0487+  0967 32          	mov bl, [d]
0488+  0968 37          	mov bh, bl
0489+  0969 33 01 00    	mov bl, [d + 1]
0490+  096C 07 59 07    	call atoi				; convert to int in AL
0491+  096F 23          	mov ah, al				; move to AH
0492+  0970             
0493+  0970 33 02 00    	mov bl, [d + 2]
0494+  0973 37          	mov bh, bl
0495+  0974 33 03 00    	mov bl, [d + 3]
0496+  0977 07 59 07    	call atoi				; convert to int in AL
0497+  097A             
0498+  097A E7          	pop d
0499+  097B E5          	pop b
0500+  097C F9          	leave
0501+  097D 09          	ret
0502+  097E             
0503+  097E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  097E             ; PRINT 8bit HEX INTEGER
0505+  097E             ; integer value in reg bl
0506+  097E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  097E             print_u8x:
0508+  097E D7          	push a
0509+  097F DD          	push bl
0510+  0980             
0511+  0980 07 6B 07    	call itoa				; convert bl to char in A
0512+  0983 2F          	mov bl, al				; save al
0513+  0984 19 00       	mov al, 0
0514+  0986 05 03       	syscall sys_io				; display AH
0515+  0988 24          	mov ah, bl				; retrieve al
0516+  0989 19 00       	mov al, 0
0517+  098B 05 03       	syscall sys_io				; display AL
0518+  098D             
0519+  098D EA          	pop bl
0520+  098E E4          	pop a
0521+  098F 09          	ret
0522+  0990             
0523+  0990             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0990             ; print 8bit decimal unsigned number
0525+  0990             ; input number in AL
0526+  0990             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0990             print_u8d:
0528+  0990 D7          	push a
0529+  0991 D8          	push b
0530+  0992             
0531+  0992 22 00       	mov ah, 0
0532+  0994 26 64 00    	mov b, 100
0533+  0997 AE          	div a, b
0534+  0998 D8          	push b			; save remainder
0535+  0999 B9 00       	cmp al, 0
0536+  099B C6 A5 09    	je skip100
0537+  099E 6A 30       	add al, $30
0538+  09A0 23          	mov ah, al
0539+  09A1 19 00       	mov al, 0
0540+  09A3 05 03       	syscall sys_io	; print coeff
0541+  09A5             skip100:
0542+  09A5 E4          	pop a
0543+  09A6 22 00       	mov ah, 0
0544+  09A8 26 0A 00    	mov b, 10
0545+  09AB AE          	div a, b
0546+  09AC D8          	push b			; save remainder
0547+  09AD B9 00       	cmp al, 0
0548+  09AF C6 B9 09    	je skip10
0549+  09B2 6A 30       	add al, $30
0550+  09B4 23          	mov ah, al
0551+  09B5 19 00       	mov al, 0
0552+  09B7 05 03       	syscall sys_io	; print coeff
0553+  09B9             skip10:
0554+  09B9 E4          	pop a
0555+  09BA 1B          	mov al, bl
0556+  09BB 6A 30       	add al, $30
0557+  09BD 23          	mov ah, al
0558+  09BE 19 00       	mov al, 0
0559+  09C0 05 03       	syscall sys_io	; print coeff
0560+  09C2 E5          	pop b
0561+  09C3 E4          	pop a
0562+  09C4 09          	ret
0563+  09C5             
0564+  09C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  09C5             ; INPUT 8BIT HEX INTEGER
0566+  09C5             ; read 8bit integer into AL
0567+  09C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  09C5             scan_u8x:
0569+  09C5 F8 04 00    	enter 4
0570+  09C8 D8          	push b
0571+  09C9 DA          	push d
0572+  09CA             
0573+  09CA FA FD FF    	lea d, [bp + -3]
0574+  09CD 07 AB 07    	call gets				; get number
0575+  09D0             
0576+  09D0 32          	mov bl, [d]
0577+  09D1 37          	mov bh, bl
0578+  09D2 33 01 00    	mov bl, [d + 1]
0579+  09D5 07 59 07    	call atoi				; convert to int in AL
0580+  09D8             
0581+  09D8 E7          	pop d
0582+  09D9 E5          	pop b
0583+  09DA F9          	leave
0584+  09DB 09          	ret
0585+  09DC             
0586+  09DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  09DC             ; input decimal number
0588+  09DC             ; result in A
0589+  09DC             ; 655'\0'
0590+  09DC             ; low--------high
0591+  09DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  09DC             scan_u16d:
0593+  09DC F8 08 00    	enter 8
0594+  09DF E2          	push si
0595+  09E0 D8          	push b
0596+  09E1 D9          	push c
0597+  09E2 DA          	push d
0598+  09E3 FA F9 FF    	lea d, [bp +- 7]
0599+  09E6 07 AB 07    	call gets
0600+  09E9 07 D9 06    	call strlen			; get string length in C
0601+  09EC 7E          	dec c
0602+  09ED FD 4E       	mov si, d
0603+  09EF 12          	mov a, c
0604+  09F0 FD 99       	shl a
0605+  09F2 3B 41 07    	mov d, table_power
0606+  09F5 59          	add d, a
0607+  09F6 38 00 00    	mov c, 0
0608+  09F9             mul_loop:
0609+  09F9 F6          	lodsb			; load ASCII to al
0610+  09FA B9 00       	cmp al, 0
0611+  09FC C6 0F 0A    	je mul_exit
0612+  09FF 6F 30       	sub al, $30		; make into integer
0613+  0A01 22 00       	mov ah, 0
0614+  0A03 2A          	mov b, [d]
0615+  0A04 AC          	mul a, b			; result in B since it fits in 16bits
0616+  0A05 11          	mov a, b
0617+  0A06 28          	mov b, c
0618+  0A07 54          	add a, b
0619+  0A08 39          	mov c, a
0620+  0A09 63 02 00    	sub d, 2
0621+  0A0C 0A F9 09    	jmp mul_loop
0622+  0A0F             mul_exit:
0623+  0A0F 12          	mov a, c
0624+  0A10 E7          	pop d
0625+  0A11 E6          	pop c
0626+  0A12 E5          	pop b
0627+  0A13 EF          	pop si
0628+  0A14 F9          	leave
0629+  0A15 09          	ret
0434   0A16             ; --- END INCLUDE BLOCK
0435   0A16             
0436   0A16             
0437   0A16             .end
tasm: Number of errors = 0
