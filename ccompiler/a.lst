0001   0000             ; --- FILENAME: tree.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 52 02 00      sub sp, 2 ; j
0012   0408 52 02 00      sub sp, 2 ; initial_angle
0013   040B 26 5A 00      mov b, 90
0014   040E D7            push a
0015   040F 11            mov a, b
0016   0410 26 E8 03      mov b, 1000
0017   0413 AC            mul a, b
0018   0414 E4            pop a
0019   0415 D7            push a
0020   0416 11            mov a, b
0021   0417 26 B4 00      mov b, 180
0022   041A AE            div a, b
0023   041B FD 78         mov g, a
0024   041D 11            mov a, b
0025   041E FD 27         mov b, g
0026   0420 E4            pop a
0027   0421 D7            push a
0028   0422 11            mov a, b
0029   0423 45 FB FF      mov [bp + -5], a ; initial_angle
0030   0426 E4            pop a
0031   0427             _for1_init:
0032   0427 26 00 00      mov b, 0
0033   042A D7            push a
0034   042B 11            mov a, b
0035   042C 45 FF FF      mov [bp + -1], a ; i
0036   042F E4            pop a
0037   0430             _for1_cond:
0038   0430 2C FF FF      mov b, [bp + -1] ; i
0039   0433 D7            push a
0040   0434 11            mov a, b
0041   0435 26 16 00      mov b, 22
0042   0438 B0            cmp a, b
0043   0439 0E            lodflgs
0044   043A 2F            mov bl, al
0045   043B FD A2 03      shr al, 3
0046   043E FD A4 02      shr bl, 2
0047   0441 FD 87 01      and bl, %00000001
0048   0444 90            xor al, bl ; < (signed)
0049   0445 22 00         mov ah, 0
0050   0447 27            mov b, a
0051   0448 E4            pop a
0052   0449 C0 00 00      cmp b, 0
0053   044C C6 BC 04      je _for1_exit
0054   044F             _for1_block:
0055   044F             _for2_init:
0056   044F 26 00 00      mov b, 0
0057   0452 D7            push a
0058   0453 11            mov a, b
0059   0454 45 FD FF      mov [bp + -3], a ; j
0060   0457 E4            pop a
0061   0458             _for2_cond:
0062   0458 2C FD FF      mov b, [bp + -3] ; j
0063   045B D7            push a
0064   045C 11            mov a, b
0065   045D 26 50 00      mov b, 80
0066   0460 B0            cmp a, b
0067   0461 0E            lodflgs
0068   0462 2F            mov bl, al
0069   0463 FD A2 03      shr al, 3
0070   0466 FD A4 02      shr bl, 2
0071   0469 FD 87 01      and bl, %00000001
0072   046C 90            xor al, bl ; < (signed)
0073   046D 22 00         mov ah, 0
0074   046F 27            mov b, a
0075   0470 E4            pop a
0076   0471 C0 00 00      cmp b, 0
0077   0474 C6 AA 04      je _for2_exit
0078   0477             _for2_block:
0079   0477 29 55 11      mov b, [__canvas] ; canvas
0080   047A D7            push a
0081   047B 74            mov d, b
0082   047C DA            push d
0083   047D 2C FF FF      mov b, [bp + -1] ; i
0084   0480 E7            pop d
0085   0481 10 50 00      mov a, 80
0086   0484 AC            mul a, b
0087   0485 5A            add d, b
0088   0486 DA            push d
0089   0487 2C FD FF      mov b, [bp + -3] ; j
0090   048A E7            pop d
0091   048B 10 01 00      mov a, 1
0092   048E AC            mul a, b
0093   048F 5A            add d, b
0094   0490 E4            pop a
0095   0491 DA            push d
0096   0492 26 20 00      mov b, $20
0097   0495 E7            pop d
0098   0496 FD 3E         mov [d], bl
0099   0498             _for2_update:
0100   0498 2C FD FF      mov b, [bp + -3] ; j
0101   049B D7            push a
0102   049C 11            mov a, b
0103   049D FD 77         inc b
0104   049F D7            push a
0105   04A0 11            mov a, b
0106   04A1 45 FD FF      mov [bp + -3], a ; j
0107   04A4 E4            pop a
0108   04A5 27            mov b, a
0109   04A6 E4            pop a
0110   04A7 0A 58 04      jmp _for2_cond
0111   04AA             _for2_exit:
0112   04AA             _for1_update:
0113   04AA 2C FF FF      mov b, [bp + -1] ; i
0114   04AD D7            push a
0115   04AE 11            mov a, b
0116   04AF FD 77         inc b
0117   04B1 D7            push a
0118   04B2 11            mov a, b
0119   04B3 45 FF FF      mov [bp + -1], a ; i
0120   04B6 E4            pop a
0121   04B7 27            mov b, a
0122   04B8 E4            pop a
0123   04B9 0A 30 04      jmp _for1_cond
0124   04BC             _for1_exit:
0125   04BC 26 28 00      mov b, 40
0126   04BF FD AB         swp b
0127   04C1 D8            push b
0128   04C2 26 15 00      mov b, 21
0129   04C5 FD AB         swp b
0130   04C7 D8            push b
0131   04C8 2C FB FF      mov b, [bp + -5] ; initial_angle
0132   04CB FD AB         swp b
0133   04CD D8            push b
0134   04CE 26 05 00      mov b, 5
0135   04D1 FD AB         swp b
0136   04D3 D8            push b
0137   04D4 29 55 11      mov b, [__canvas] ; canvas
0138   04D7 FD AB         swp b
0139   04D9 D8            push b
0140   04DA 07 88 05      call draw_tree
0141   04DD 51 0A 00      add sp, 10
0142   04E0             _for3_init:
0143   04E0 26 00 00      mov b, 0
0144   04E3 D7            push a
0145   04E4 11            mov a, b
0146   04E5 45 FF FF      mov [bp + -1], a ; i
0147   04E8 E4            pop a
0148   04E9             _for3_cond:
0149   04E9 2C FF FF      mov b, [bp + -1] ; i
0150   04EC D7            push a
0151   04ED 11            mov a, b
0152   04EE 26 16 00      mov b, 22
0153   04F1 B0            cmp a, b
0154   04F2 0E            lodflgs
0155   04F3 2F            mov bl, al
0156   04F4 FD A2 03      shr al, 3
0157   04F7 FD A4 02      shr bl, 2
0158   04FA FD 87 01      and bl, %00000001
0159   04FD 90            xor al, bl ; < (signed)
0160   04FE 22 00         mov ah, 0
0161   0500 27            mov b, a
0162   0501 E4            pop a
0163   0502 C0 00 00      cmp b, 0
0164   0505 C6 82 05      je _for3_exit
0165   0508             _for3_block:
0166   0508             _for4_init:
0167   0508 26 00 00      mov b, 0
0168   050B D7            push a
0169   050C 11            mov a, b
0170   050D 45 FD FF      mov [bp + -3], a ; j
0171   0510 E4            pop a
0172   0511             _for4_cond:
0173   0511 2C FD FF      mov b, [bp + -3] ; j
0174   0514 D7            push a
0175   0515 11            mov a, b
0176   0516 26 50 00      mov b, 80
0177   0519 B0            cmp a, b
0178   051A 0E            lodflgs
0179   051B 2F            mov bl, al
0180   051C FD A2 03      shr al, 3
0181   051F FD A4 02      shr bl, 2
0182   0522 FD 87 01      and bl, %00000001
0183   0525 90            xor al, bl ; < (signed)
0184   0526 22 00         mov ah, 0
0185   0528 27            mov b, a
0186   0529 E4            pop a
0187   052A C0 00 00      cmp b, 0
0188   052D C6 66 05      je _for4_exit
0189   0530             _for4_block:
0190   0530 29 55 11      mov b, [__canvas] ; canvas
0191   0533 D7            push a
0192   0534 74            mov d, b
0193   0535 DA            push d
0194   0536 2C FF FF      mov b, [bp + -1] ; i
0195   0539 E7            pop d
0196   053A 10 50 00      mov a, 80
0197   053D AC            mul a, b
0198   053E 5A            add d, b
0199   053F DA            push d
0200   0540 2C FD FF      mov b, [bp + -3] ; j
0201   0543 E7            pop d
0202   0544 10 01 00      mov a, 1
0203   0547 AC            mul a, b
0204   0548 5A            add d, b
0205   0549 E4            pop a
0206   054A 32            mov bl, [d]
0207   054B A7 00         mov bh, 0
0208   054D DD            push bl
0209   054E 07 26 09      call _putchar
0210   0551 51 01 00      add sp, 1
0211   0554             _for4_update:
0212   0554 2C FD FF      mov b, [bp + -3] ; j
0213   0557 D7            push a
0214   0558 11            mov a, b
0215   0559 FD 77         inc b
0216   055B D7            push a
0217   055C 11            mov a, b
0218   055D 45 FD FF      mov [bp + -3], a ; j
0219   0560 E4            pop a
0220   0561 27            mov b, a
0221   0562 E4            pop a
0222   0563 0A 11 05      jmp _for4_cond
0223   0566             _for4_exit:
0224   0566 26 0A 00      mov b, $a
0225   0569 DD            push bl
0226   056A 07 26 09      call _putchar
0227   056D 51 01 00      add sp, 1
0228   0570             _for3_update:
0229   0570 2C FF FF      mov b, [bp + -1] ; i
0230   0573 D7            push a
0231   0574 11            mov a, b
0232   0575 FD 77         inc b
0233   0577 D7            push a
0234   0578 11            mov a, b
0235   0579 45 FF FF      mov [bp + -1], a ; i
0236   057C E4            pop a
0237   057D 27            mov b, a
0238   057E E4            pop a
0239   057F 0A E9 04      jmp _for3_cond
0240   0582             _for3_exit:
0241   0582 26 00 00      mov b, 0
0242   0585 F9            leave
0243   0586 05 0B         syscall sys_terminate_proc
0244   0588             
0245   0588             draw_tree:
0246   0588 D2            push bp
0247   0589 9B            mov bp, sp
0248   058A 52 02 00      sub sp, 2 ; i
0249   058D 52 02 00      sub sp, 2 ; length_factor
0250   0590 52 02 00      sub sp, 2 ; angle_factor
0251   0593 52 02 00      sub sp, 2 ; x_pos
0252   0596 52 02 00      sub sp, 2 ; y_pos
0253   0599 52 02 00      sub sp, 2 ; x2
0254   059C 52 02 00      sub sp, 2 ; y2
0255   059F 52 02 00      sub sp, 2 ; new_angle_left
0256   05A2 52 02 00      sub sp, 2 ; new_angle_right
0257   05A5             _if5_cond:
0258   05A5 2C 07 00      mov b, [bp + 7] ; depth
0259   05A8 D7            push a
0260   05A9 11            mov a, b
0261   05AA 26 00 00      mov b, 0
0262   05AD B0            cmp a, b
0263   05AE 0E            lodflgs
0264   05AF 87 01         and al, %00000001 ; ==
0265   05B1 22 00         mov ah, 0
0266   05B3 27            mov b, a
0267   05B4 E4            pop a
0268   05B5 C0 00 00      cmp b, 0
0269   05B8 C6 C0 05      je _if5_exit
0270   05BB             _if5_true:
0271   05BB F9            leave
0272   05BC 09            ret
0273   05BD 0A C0 05      jmp _if5_exit
0274   05C0             _if5_exit:
0275   05C0 26 06 00      mov b, 6
0276   05C3 D7            push a
0277   05C4 11            mov a, b
0278   05C5 45 FD FF      mov [bp + -3], a ; length_factor
0279   05C8 E4            pop a
0280   05C9 26 05 00      mov b, 5
0281   05CC D7            push a
0282   05CD 11            mov a, b
0283   05CE 45 FB FF      mov [bp + -5], a ; angle_factor
0284   05D1 E4            pop a
0285   05D2 2C 0D 00      mov b, [bp + 13] ; x
0286   05D5 D7            push a
0287   05D6 11            mov a, b
0288   05D7 2C 07 00      mov b, [bp + 7] ; depth
0289   05DA D7            push a
0290   05DB 11            mov a, b
0291   05DC 2C FD FF      mov b, [bp + -3] ; length_factor
0292   05DF AC            mul a, b
0293   05E0 E4            pop a
0294   05E1 D7            push a
0295   05E2 11            mov a, b
0296   05E3 2C 09 00      mov b, [bp + 9] ; angle
0297   05E6 AC            mul a, b
0298   05E7 E4            pop a
0299   05E8 D7            push a
0300   05E9 11            mov a, b
0301   05EA 26 E8 03      mov b, 1000
0302   05ED AE            div a, b
0303   05EE FD 78         mov g, a
0304   05F0 11            mov a, b
0305   05F1 FD 27         mov b, g
0306   05F3 E4            pop a
0307   05F4 54            add a, b
0308   05F5 27            mov b, a
0309   05F6 E4            pop a
0310   05F7 D7            push a
0311   05F8 11            mov a, b
0312   05F9 45 F5 FF      mov [bp + -11], a ; x2
0313   05FC E4            pop a
0314   05FD 2C 0B 00      mov b, [bp + 11] ; y
0315   0600 D7            push a
0316   0601 11            mov a, b
0317   0602 2C 07 00      mov b, [bp + 7] ; depth
0318   0605 D7            push a
0319   0606 11            mov a, b
0320   0607 2C FD FF      mov b, [bp + -3] ; length_factor
0321   060A AC            mul a, b
0322   060B E4            pop a
0323   060C D7            push a
0324   060D 11            mov a, b
0325   060E 26 E8 03      mov b, 1000
0326   0611 D7            push a
0327   0612 11            mov a, b
0328   0613 2C 09 00      mov b, [bp + 9] ; angle
0329   0616 60            sub a, b
0330   0617 27            mov b, a
0331   0618 E4            pop a
0332   0619 AC            mul a, b
0333   061A E4            pop a
0334   061B D7            push a
0335   061C 11            mov a, b
0336   061D 26 E8 03      mov b, 1000
0337   0620 AE            div a, b
0338   0621 FD 78         mov g, a
0339   0623 11            mov a, b
0340   0624 FD 27         mov b, g
0341   0626 E4            pop a
0342   0627 60            sub a, b
0343   0628 27            mov b, a
0344   0629 E4            pop a
0345   062A D7            push a
0346   062B 11            mov a, b
0347   062C 45 F3 FF      mov [bp + -13], a ; y2
0348   062F E4            pop a
0349   0630 2C 0B 00      mov b, [bp + 11] ; y
0350   0633 FD AB         swp b
0351   0635 D8            push b
0352   0636 07 31 09      call print_num
0353   0639 51 02 00      add sp, 2
0354   063C 26 57 11      mov b, __string_0 ; ", "
0355   063F FD AB         swp b
0356   0641 D8            push b
0357   0642 07 1B 09      call print
0358   0645 51 02 00      add sp, 2
0359   0648 2C 07 00      mov b, [bp + 7] ; depth
0360   064B FD AB         swp b
0361   064D D8            push b
0362   064E 07 31 09      call print_num
0363   0651 51 02 00      add sp, 2
0364   0654 26 57 11      mov b, __string_0 ; ", "
0365   0657 FD AB         swp b
0366   0659 D8            push b
0367   065A 07 1B 09      call print
0368   065D 51 02 00      add sp, 2
0369   0660 2C FD FF      mov b, [bp + -3] ; length_factor
0370   0663 FD AB         swp b
0371   0665 D8            push b
0372   0666 07 31 09      call print_num
0373   0669 51 02 00      add sp, 2
0374   066C 26 57 11      mov b, __string_0 ; ", "
0375   066F FD AB         swp b
0376   0671 D8            push b
0377   0672 07 1B 09      call print
0378   0675 51 02 00      add sp, 2
0379   0678 2C 09 00      mov b, [bp + 9] ; angle
0380   067B FD AB         swp b
0381   067D D8            push b
0382   067E 07 31 09      call print_num
0383   0681 51 02 00      add sp, 2
0384   0684 26 57 11      mov b, __string_0 ; ", "
0385   0687 FD AB         swp b
0386   0689 D8            push b
0387   068A 07 1B 09      call print
0388   068D 51 02 00      add sp, 2
0389   0690 2C F3 FF      mov b, [bp + -13] ; y2
0390   0693 FD AB         swp b
0391   0695 D8            push b
0392   0696 07 31 09      call print_num
0393   0699 51 02 00      add sp, 2
0394   069C 26 57 11      mov b, __string_0 ; ", "
0395   069F FD AB         swp b
0396   06A1 D8            push b
0397   06A2 07 1B 09      call print
0398   06A5 51 02 00      add sp, 2
0399   06A8 26 5A 11      mov b, __string_1 ; "\n"
0400   06AB FD AB         swp b
0401   06AD D8            push b
0402   06AE 07 1B 09      call print
0403   06B1 51 02 00      add sp, 2
0404   06B4             _if6_cond:
0405   06B4 2C F5 FF      mov b, [bp + -11] ; x2
0406   06B7 D7            push a
0407   06B8 11            mov a, b
0408   06B9 26 00 00      mov b, 0
0409   06BC B0            cmp a, b
0410   06BD 0E            lodflgs
0411   06BE 2F            mov bl, al
0412   06BF FD A2 03      shr al, 3
0413   06C2 FD A4 02      shr bl, 2
0414   06C5 FD 87 01      and bl, %00000001
0415   06C8 90            xor al, bl ; < (signed)
0416   06C9 22 00         mov ah, 0
0417   06CB 27            mov b, a
0418   06CC E4            pop a
0419   06CD D7            push a
0420   06CE 11            mov a, b
0421   06CF 2C F5 FF      mov b, [bp + -11] ; x2
0422   06D2 D7            push a
0423   06D3 11            mov a, b
0424   06D4 26 50 00      mov b, 80
0425   06D7 B0            cmp a, b
0426   06D8 0E            lodflgs
0427   06D9 2F            mov bl, al
0428   06DA FD A2 03      shr al, 3
0429   06DD FD A4 02      shr bl, 2
0430   06E0 FD 87 01      and bl, %00000001
0431   06E3 90            xor al, bl
0432   06E4 8F 01         xor al, %00000001 ; >= (signed)
0433   06E6 22 00         mov ah, 0
0434   06E8 27            mov b, a
0435   06E9 E4            pop a
0436   06EA 8A            or a, b
0437   06EB 27            mov b, a
0438   06EC E4            pop a
0439   06ED D7            push a
0440   06EE 11            mov a, b
0441   06EF 2C F3 FF      mov b, [bp + -13] ; y2
0442   06F2 D7            push a
0443   06F3 11            mov a, b
0444   06F4 26 00 00      mov b, 0
0445   06F7 B0            cmp a, b
0446   06F8 0E            lodflgs
0447   06F9 2F            mov bl, al
0448   06FA FD A2 03      shr al, 3
0449   06FD FD A4 02      shr bl, 2
0450   0700 FD 87 01      and bl, %00000001
0451   0703 90            xor al, bl ; < (signed)
0452   0704 22 00         mov ah, 0
0453   0706 27            mov b, a
0454   0707 E4            pop a
0455   0708 8A            or a, b
0456   0709 27            mov b, a
0457   070A E4            pop a
0458   070B D7            push a
0459   070C 11            mov a, b
0460   070D 2C F3 FF      mov b, [bp + -13] ; y2
0461   0710 D7            push a
0462   0711 11            mov a, b
0463   0712 26 16 00      mov b, 22
0464   0715 B0            cmp a, b
0465   0716 0E            lodflgs
0466   0717 2F            mov bl, al
0467   0718 FD A2 03      shr al, 3
0468   071B FD A4 02      shr bl, 2
0469   071E FD 87 01      and bl, %00000001
0470   0721 90            xor al, bl
0471   0722 8F 01         xor al, %00000001 ; >= (signed)
0472   0724 22 00         mov ah, 0
0473   0726 27            mov b, a
0474   0727 E4            pop a
0475   0728 8A            or a, b
0476   0729 27            mov b, a
0477   072A E4            pop a
0478   072B C0 00 00      cmp b, 0
0479   072E C6 36 07      je _if6_exit
0480   0731             _if6_true:
0481   0731 F9            leave
0482   0732 09            ret
0483   0733 0A 36 07      jmp _if6_exit
0484   0736             _if6_exit:
0485   0736             _for7_init:
0486   0736 26 00 00      mov b, 0
0487   0739 D7            push a
0488   073A 11            mov a, b
0489   073B 45 FF FF      mov [bp + -1], a ; i
0490   073E E4            pop a
0491   073F             _for7_cond:
0492   073F 2C FF FF      mov b, [bp + -1] ; i
0493   0742 D7            push a
0494   0743 11            mov a, b
0495   0744 2C 07 00      mov b, [bp + 7] ; depth
0496   0747 B0            cmp a, b
0497   0748 0E            lodflgs
0498   0749 2F            mov bl, al
0499   074A FD 78         mov g, a
0500   074C FD A2 03      shr al, 3
0501   074F FD A4 02      shr bl, 2
0502   0752 FD 87 01      and bl, %00000001
0503   0755 90            xor al, bl
0504   0756 FD 27         mov b, g
0505   0758 FD 87 01      and bl, %00000001
0506   075B 8C            or al, bl ; <= (signed)
0507   075C 22 00         mov ah, 0
0508   075E 27            mov b, a
0509   075F E4            pop a
0510   0760 C0 00 00      cmp b, 0
0511   0763 C6 9F 08      je _for7_exit
0512   0766             _for7_block:
0513   0766 2C 0D 00      mov b, [bp + 13] ; x
0514   0769 D7            push a
0515   076A 11            mov a, b
0516   076B 2C FF FF      mov b, [bp + -1] ; i
0517   076E D7            push a
0518   076F 11            mov a, b
0519   0770 2C FD FF      mov b, [bp + -3] ; length_factor
0520   0773 AC            mul a, b
0521   0774 E4            pop a
0522   0775 D7            push a
0523   0776 11            mov a, b
0524   0777 2C 09 00      mov b, [bp + 9] ; angle
0525   077A AC            mul a, b
0526   077B E4            pop a
0527   077C D7            push a
0528   077D 11            mov a, b
0529   077E 26 E8 03      mov b, 1000
0530   0781 AE            div a, b
0531   0782 FD 78         mov g, a
0532   0784 11            mov a, b
0533   0785 FD 27         mov b, g
0534   0787 E4            pop a
0535   0788 54            add a, b
0536   0789 27            mov b, a
0537   078A E4            pop a
0538   078B D7            push a
0539   078C 11            mov a, b
0540   078D 45 F9 FF      mov [bp + -7], a ; x_pos
0541   0790 E4            pop a
0542   0791 2C 0B 00      mov b, [bp + 11] ; y
0543   0794 D7            push a
0544   0795 11            mov a, b
0545   0796 2C FF FF      mov b, [bp + -1] ; i
0546   0799 D7            push a
0547   079A 11            mov a, b
0548   079B 2C FD FF      mov b, [bp + -3] ; length_factor
0549   079E AC            mul a, b
0550   079F E4            pop a
0551   07A0 D7            push a
0552   07A1 11            mov a, b
0553   07A2 26 E8 03      mov b, 1000
0554   07A5 D7            push a
0555   07A6 11            mov a, b
0556   07A7 2C 09 00      mov b, [bp + 9] ; angle
0557   07AA 60            sub a, b
0558   07AB 27            mov b, a
0559   07AC E4            pop a
0560   07AD AC            mul a, b
0561   07AE E4            pop a
0562   07AF D7            push a
0563   07B0 11            mov a, b
0564   07B1 26 E8 03      mov b, 1000
0565   07B4 AE            div a, b
0566   07B5 FD 78         mov g, a
0567   07B7 11            mov a, b
0568   07B8 FD 27         mov b, g
0569   07BA E4            pop a
0570   07BB 60            sub a, b
0571   07BC 27            mov b, a
0572   07BD E4            pop a
0573   07BE D7            push a
0574   07BF 11            mov a, b
0575   07C0 45 F7 FF      mov [bp + -9], a ; y_pos
0576   07C3 E4            pop a
0577   07C4             _if8_cond:
0578   07C4 2C F9 FF      mov b, [bp + -7] ; x_pos
0579   07C7 D7            push a
0580   07C8 11            mov a, b
0581   07C9 26 00 00      mov b, 0
0582   07CC B0            cmp a, b
0583   07CD 0E            lodflgs
0584   07CE 2F            mov bl, al
0585   07CF FD A2 03      shr al, 3
0586   07D2 FD A4 02      shr bl, 2
0587   07D5 FD 87 01      and bl, %00000001
0588   07D8 90            xor al, bl
0589   07D9 8F 01         xor al, %00000001 ; >= (signed)
0590   07DB 22 00         mov ah, 0
0591   07DD 27            mov b, a
0592   07DE E4            pop a
0593   07DF DB            push al
0594   07E0 C0 00 00      cmp b, 0
0595   07E3 0E            lodflgs ; transform condition into a single bit
0596   07E4 2C F9 FF      mov b, [bp + -7] ; x_pos
0597   07E7 D7            push a
0598   07E8 11            mov a, b
0599   07E9 26 50 00      mov b, 80
0600   07EC B0            cmp a, b
0601   07ED 0E            lodflgs
0602   07EE 2F            mov bl, al
0603   07EF FD A2 03      shr al, 3
0604   07F2 FD A4 02      shr bl, 2
0605   07F5 FD 87 01      and bl, %00000001
0606   07F8 90            xor al, bl ; < (signed)
0607   07F9 22 00         mov ah, 0
0608   07FB 27            mov b, a
0609   07FC E4            pop a
0610   07FD DB            push al
0611   07FE C0 00 00      cmp b, 0
0612   0801 0E            lodflgs
0613   0802 EA            pop bl ; matches previous 'push al'
0614   0803 8C            or al, bl
0615   0804 8F 01         xor al, %00000001
0616   0806 2F            mov bl, al
0617   0807 A7 00         mov bh, 0
0618   0809 E8            pop al
0619   080A DB            push al
0620   080B C0 00 00      cmp b, 0
0621   080E 0E            lodflgs ; transform condition into a single bit
0622   080F 2C F7 FF      mov b, [bp + -9] ; y_pos
0623   0812 D7            push a
0624   0813 11            mov a, b
0625   0814 26 00 00      mov b, 0
0626   0817 B0            cmp a, b
0627   0818 0E            lodflgs
0628   0819 2F            mov bl, al
0629   081A FD A2 03      shr al, 3
0630   081D FD A4 02      shr bl, 2
0631   0820 FD 87 01      and bl, %00000001
0632   0823 90            xor al, bl
0633   0824 8F 01         xor al, %00000001 ; >= (signed)
0634   0826 22 00         mov ah, 0
0635   0828 27            mov b, a
0636   0829 E4            pop a
0637   082A DB            push al
0638   082B C0 00 00      cmp b, 0
0639   082E 0E            lodflgs
0640   082F EA            pop bl ; matches previous 'push al'
0641   0830 8C            or al, bl
0642   0831 8F 01         xor al, %00000001
0643   0833 2F            mov bl, al
0644   0834 A7 00         mov bh, 0
0645   0836 E8            pop al
0646   0837 DB            push al
0647   0838 C0 00 00      cmp b, 0
0648   083B 0E            lodflgs ; transform condition into a single bit
0649   083C 2C F7 FF      mov b, [bp + -9] ; y_pos
0650   083F D7            push a
0651   0840 11            mov a, b
0652   0841 26 16 00      mov b, 22
0653   0844 B0            cmp a, b
0654   0845 0E            lodflgs
0655   0846 2F            mov bl, al
0656   0847 FD A2 03      shr al, 3
0657   084A FD A4 02      shr bl, 2
0658   084D FD 87 01      and bl, %00000001
0659   0850 90            xor al, bl ; < (signed)
0660   0851 22 00         mov ah, 0
0661   0853 27            mov b, a
0662   0854 E4            pop a
0663   0855 DB            push al
0664   0856 C0 00 00      cmp b, 0
0665   0859 0E            lodflgs
0666   085A EA            pop bl ; matches previous 'push al'
0667   085B 8C            or al, bl
0668   085C 8F 01         xor al, %00000001
0669   085E 2F            mov bl, al
0670   085F A7 00         mov bh, 0
0671   0861 E8            pop al
0672   0862 C0 00 00      cmp b, 0
0673   0865 C6 8D 08      je _if8_exit
0674   0868             _if8_true:
0675   0868 FA 05 00      lea d, [bp + 5] ; canvas
0676   086B 2A            mov b, [d]
0677   086C D7            push a
0678   086D 74            mov d, b
0679   086E DA            push d
0680   086F 2C F7 FF      mov b, [bp + -9] ; y_pos
0681   0872 E7            pop d
0682   0873 10 50 00      mov a, 80
0683   0876 AC            mul a, b
0684   0877 5A            add d, b
0685   0878 DA            push d
0686   0879 2C F9 FF      mov b, [bp + -7] ; x_pos
0687   087C E7            pop d
0688   087D 10 01 00      mov a, 1
0689   0880 AC            mul a, b
0690   0881 5A            add d, b
0691   0882 E4            pop a
0692   0883 DA            push d
0693   0884 26 2A 00      mov b, $2a
0694   0887 E7            pop d
0695   0888 FD 3E         mov [d], bl
0696   088A 0A 8D 08      jmp _if8_exit
0697   088D             _if8_exit:
0698   088D             _for7_update:
0699   088D 2C FF FF      mov b, [bp + -1] ; i
0700   0890 D7            push a
0701   0891 11            mov a, b
0702   0892 FD 77         inc b
0703   0894 D7            push a
0704   0895 11            mov a, b
0705   0896 45 FF FF      mov [bp + -1], a ; i
0706   0899 E4            pop a
0707   089A 27            mov b, a
0708   089B E4            pop a
0709   089C 0A 3F 07      jmp _for7_cond
0710   089F             _for7_exit:
0711   089F 2C 09 00      mov b, [bp + 9] ; angle
0712   08A2 D7            push a
0713   08A3 11            mov a, b
0714   08A4 2C FB FF      mov b, [bp + -5] ; angle_factor
0715   08A7 60            sub a, b
0716   08A8 27            mov b, a
0717   08A9 E4            pop a
0718   08AA D7            push a
0719   08AB 11            mov a, b
0720   08AC 45 F1 FF      mov [bp + -15], a ; new_angle_left
0721   08AF E4            pop a
0722   08B0 2C 09 00      mov b, [bp + 9] ; angle
0723   08B3 D7            push a
0724   08B4 11            mov a, b
0725   08B5 2C FB FF      mov b, [bp + -5] ; angle_factor
0726   08B8 54            add a, b
0727   08B9 27            mov b, a
0728   08BA E4            pop a
0729   08BB D7            push a
0730   08BC 11            mov a, b
0731   08BD 45 EF FF      mov [bp + -17], a ; new_angle_right
0732   08C0 E4            pop a
0733   08C1 2C F5 FF      mov b, [bp + -11] ; x2
0734   08C4 FD AB         swp b
0735   08C6 D8            push b
0736   08C7 2C F3 FF      mov b, [bp + -13] ; y2
0737   08CA FD AB         swp b
0738   08CC D8            push b
0739   08CD 2C F1 FF      mov b, [bp + -15] ; new_angle_left
0740   08D0 FD AB         swp b
0741   08D2 D8            push b
0742   08D3 2C 07 00      mov b, [bp + 7] ; depth
0743   08D6 D7            push a
0744   08D7 11            mov a, b
0745   08D8 26 01 00      mov b, 1
0746   08DB 60            sub a, b
0747   08DC 27            mov b, a
0748   08DD E4            pop a
0749   08DE FD AB         swp b
0750   08E0 D8            push b
0751   08E1 FA 05 00      lea d, [bp + 5] ; canvas
0752   08E4 2A            mov b, [d]
0753   08E5 FD AB         swp b
0754   08E7 D8            push b
0755   08E8 07 88 05      call draw_tree
0756   08EB 51 0A 00      add sp, 10
0757   08EE 2C F5 FF      mov b, [bp + -11] ; x2
0758   08F1 FD AB         swp b
0759   08F3 D8            push b
0760   08F4 2C F3 FF      mov b, [bp + -13] ; y2
0761   08F7 FD AB         swp b
0762   08F9 D8            push b
0763   08FA 2C EF FF      mov b, [bp + -17] ; new_angle_right
0764   08FD FD AB         swp b
0765   08FF D8            push b
0766   0900 2C 07 00      mov b, [bp + 7] ; depth
0767   0903 D7            push a
0768   0904 11            mov a, b
0769   0905 26 01 00      mov b, 1
0770   0908 60            sub a, b
0771   0909 27            mov b, a
0772   090A E4            pop a
0773   090B FD AB         swp b
0774   090D D8            push b
0775   090E FA 05 00      lea d, [bp + 5] ; canvas
0776   0911 2A            mov b, [d]
0777   0912 FD AB         swp b
0778   0914 D8            push b
0779   0915 07 88 05      call draw_tree
0780   0918 51 0A 00      add sp, 10
0781   091B             
0782   091B             print:
0783   091B D2            push bp
0784   091C 9B            mov bp, sp
0785   091D             
0786   091D             ; --- BEGIN INLINE ASM BLOCK
0787   091D 17 05 00      mov a, [bp + 5]
0788   0920 3C            mov d, a
0789   0921 07 A8 13      call puts
0790   0924             ; --- END INLINE ASM BLOCK
0791   0924             
0792   0924 F9            leave
0793   0925 09            ret
0794   0926             
0795   0926             _putchar:
0796   0926 D2            push bp
0797   0927 9B            mov bp, sp
0798   0928             
0799   0928             ; --- BEGIN INLINE ASM BLOCK
0800   0928 20 05 00      mov al, [bp + 5]
0801   092B 23            mov ah, al
0802   092C 07 6E 12      call putchar
0803   092F             ; --- END INLINE ASM BLOCK
0804   092F             
0805   092F F9            leave
0806   0930 09            ret
0807   0931             
0808   0931             print_num:
0809   0931 D2            push bp
0810   0932 9B            mov bp, sp
0811   0933 52 14 00      sub sp, 20 ; digits
0812   0936 52 02 00      sub sp, 2 ; i
0813   0939 52 02 00      sub sp, 2 ; j
0814   093C 26 00 00      mov b, 0
0815   093F D7            push a
0816   0940 11            mov a, b
0817   0941 45 EB FF      mov [bp + -21], a ; i
0818   0944 E4            pop a
0819   0945             _if9_cond:
0820   0945 2C 05 00      mov b, [bp + 5] ; num
0821   0948 D7            push a
0822   0949 11            mov a, b
0823   094A 26 00 00      mov b, 0
0824   094D B0            cmp a, b
0825   094E 0E            lodflgs
0826   094F 87 01         and al, %00000001 ; ==
0827   0951 22 00         mov ah, 0
0828   0953 27            mov b, a
0829   0954 E4            pop a
0830   0955 C0 00 00      cmp b, 0
0831   0958 C6 6A 09      je _if9_exit
0832   095B             _if9_true:
0833   095B 26 30 00      mov b, $30
0834   095E DD            push bl
0835   095F 07 26 09      call _putchar
0836   0962 51 01 00      add sp, 1
0837   0965 F9            leave
0838   0966 09            ret
0839   0967 0A 6A 09      jmp _if9_exit
0840   096A             _if9_exit:
0841   096A             _if10_cond:
0842   096A 2C 05 00      mov b, [bp + 5] ; num
0843   096D D7            push a
0844   096E 11            mov a, b
0845   096F 26 00 00      mov b, 0
0846   0972 B0            cmp a, b
0847   0973 0E            lodflgs
0848   0974 2F            mov bl, al
0849   0975 FD A2 03      shr al, 3
0850   0978 FD A4 02      shr bl, 2
0851   097B FD 87 01      and bl, %00000001
0852   097E 90            xor al, bl ; < (signed)
0853   097F 22 00         mov ah, 0
0854   0981 27            mov b, a
0855   0982 E4            pop a
0856   0983 C0 00 00      cmp b, 0
0857   0986 C6 A1 09      je _if10_exit
0858   0989             _if10_true:
0859   0989 26 2D 00      mov b, $2d
0860   098C DD            push bl
0861   098D 07 26 09      call _putchar
0862   0990 51 01 00      add sp, 1
0863   0993 2C 05 00      mov b, [bp + 5] ; num
0864   0996 FD 97         neg b
0865   0998 D7            push a
0866   0999 11            mov a, b
0867   099A 45 05 00      mov [bp + 5], a ; num
0868   099D E4            pop a
0869   099E 0A A1 09      jmp _if10_exit
0870   09A1             _if10_exit:
0871   09A1             _while11_cond:
0872   09A1 2C 05 00      mov b, [bp + 5] ; num
0873   09A4 D7            push a
0874   09A5 11            mov a, b
0875   09A6 26 00 00      mov b, 0
0876   09A9 B0            cmp a, b
0877   09AA 0E            lodflgs
0878   09AB 2F            mov bl, al
0879   09AC FD 78         mov g, a
0880   09AE FD A2 03      shr al, 3
0881   09B1 FD A4 02      shr bl, 2
0882   09B4 FD 87 01      and bl, %00000001
0883   09B7 90            xor al, bl
0884   09B8 FD 27         mov b, g
0885   09BA FD 87 01      and bl, %00000001
0886   09BD 8C            or al, bl
0887   09BE 8F 01         xor al, %00000001 ; > (signed)
0888   09C0 22 00         mov ah, 0
0889   09C2 27            mov b, a
0890   09C3 E4            pop a
0891   09C4 C0 00 00      cmp b, 0
0892   09C7 C6 10 0A      je _while11_exit
0893   09CA             _while11_block:
0894   09CA FA ED FF      lea d, [bp + -19] ; digits beginning on the stack
0895   09CD 2D            mov b, d
0896   09CE D7            push a
0897   09CF 74            mov d, b
0898   09D0 DA            push d
0899   09D1 2C EB FF      mov b, [bp + -21] ; i
0900   09D4 E7            pop d
0901   09D5 10 02 00      mov a, 2
0902   09D8 AC            mul a, b
0903   09D9 5A            add d, b
0904   09DA E4            pop a
0905   09DB DA            push d
0906   09DC 2C 05 00      mov b, [bp + 5] ; num
0907   09DF D7            push a
0908   09E0 11            mov a, b
0909   09E1 26 0A 00      mov b, 10
0910   09E4 AE            div a, b
0911   09E5 E4            pop a
0912   09E6 E7            pop d
0913   09E7 FD 43         mov [d], b
0914   09E9 2C 05 00      mov b, [bp + 5] ; num
0915   09EC D7            push a
0916   09ED 11            mov a, b
0917   09EE 26 0A 00      mov b, 10
0918   09F1 AE            div a, b
0919   09F2 FD 78         mov g, a
0920   09F4 11            mov a, b
0921   09F5 FD 27         mov b, g
0922   09F7 E4            pop a
0923   09F8 D7            push a
0924   09F9 11            mov a, b
0925   09FA 45 05 00      mov [bp + 5], a ; num
0926   09FD E4            pop a
0927   09FE 2C EB FF      mov b, [bp + -21] ; i
0928   0A01 D7            push a
0929   0A02 11            mov a, b
0930   0A03 FD 77         inc b
0931   0A05 D7            push a
0932   0A06 11            mov a, b
0933   0A07 45 EB FF      mov [bp + -21], a ; i
0934   0A0A E4            pop a
0935   0A0B 27            mov b, a
0936   0A0C E4            pop a
0937   0A0D 0A A1 09      jmp _while11_cond
0938   0A10             _while11_exit:
0939   0A10             _for12_init:
0940   0A10 2C EB FF      mov b, [bp + -21] ; i
0941   0A13 D7            push a
0942   0A14 11            mov a, b
0943   0A15 26 01 00      mov b, 1
0944   0A18 60            sub a, b
0945   0A19 27            mov b, a
0946   0A1A E4            pop a
0947   0A1B D7            push a
0948   0A1C 11            mov a, b
0949   0A1D 45 E9 FF      mov [bp + -23], a ; j
0950   0A20 E4            pop a
0951   0A21             _for12_cond:
0952   0A21 2C E9 FF      mov b, [bp + -23] ; j
0953   0A24 D7            push a
0954   0A25 11            mov a, b
0955   0A26 26 00 00      mov b, 0
0956   0A29 B0            cmp a, b
0957   0A2A 0E            lodflgs
0958   0A2B 2F            mov bl, al
0959   0A2C FD A2 03      shr al, 3
0960   0A2F FD A4 02      shr bl, 2
0961   0A32 FD 87 01      and bl, %00000001
0962   0A35 90            xor al, bl
0963   0A36 8F 01         xor al, %00000001 ; >= (signed)
0964   0A38 22 00         mov ah, 0
0965   0A3A 27            mov b, a
0966   0A3B E4            pop a
0967   0A3C C0 00 00      cmp b, 0
0968   0A3F C6 75 0A      je _for12_exit
0969   0A42             _for12_block:
0970   0A42 FA ED FF      lea d, [bp + -19] ; digits beginning on the stack
0971   0A45 2D            mov b, d
0972   0A46 D7            push a
0973   0A47 74            mov d, b
0974   0A48 DA            push d
0975   0A49 2C E9 FF      mov b, [bp + -23] ; j
0976   0A4C E7            pop d
0977   0A4D 10 02 00      mov a, 2
0978   0A50 AC            mul a, b
0979   0A51 5A            add d, b
0980   0A52 E4            pop a
0981   0A53 2A            mov b, [d]
0982   0A54 D7            push a
0983   0A55 11            mov a, b
0984   0A56 26 30 00      mov b, $30
0985   0A59 54            add a, b
0986   0A5A 27            mov b, a
0987   0A5B E4            pop a
0988   0A5C DD            push bl
0989   0A5D 07 26 09      call _putchar
0990   0A60 51 01 00      add sp, 1
0991   0A63             _for12_update:
0992   0A63 2C E9 FF      mov b, [bp + -23] ; j
0993   0A66 D7            push a
0994   0A67 11            mov a, b
0995   0A68 FD 7D         dec b
0996   0A6A D7            push a
0997   0A6B 11            mov a, b
0998   0A6C 45 E9 FF      mov [bp + -23], a ; j
0999   0A6F E4            pop a
1000   0A70 27            mov b, a
1001   0A71 E4            pop a
1002   0A72 0A 21 0A      jmp _for12_cond
1003   0A75             _for12_exit:
1004   0A75             ; --- END TEXT BLOCK
1005   0A75             
1006   0A75             ; --- BEGIN DATA BLOCK
1007   0A75 00 00 00 00 __canvas_data: .fill 1760, 0
1007   0A79 00 00 00 00 
1007   0A7D 00 00 00 00 
1007   0A81 00 00 00 00 
1007   0A85 00 00 00 00 
1007   0A89 00 00 00 00 
1007   0A8D 00 00 00 00 
1007   0A91 00 00 00 00 
1007   0A95 00 00 00 00 
1007   0A99 00 00 00 00 
1007   0A9D 00 00 00 00 
1007   0AA1 00 00 00 00 
1007   0AA5 00 00 00 00 
1007   0AA9 00 00 00 00 
1007   0AAD 00 00 00 00 
1007   0AB1 00 00 00 00 
1007   0AB5 00 00 00 00 
1007   0AB9 00 00 00 00 
1007   0ABD 00 00 00 00 
1007   0AC1 00 00 00 00 
1007   0AC5 00 00 00 00 
1007   0AC9 00 00 00 00 
1007   0ACD 00 00 00 00 
1007   0AD1 00 00 00 00 
1007   0AD5 00 00 00 00 
1007   0AD9 00 00 00 00 
1007   0ADD 00 00 00 00 
1007   0AE1 00 00 00 00 
1007   0AE5 00 00 00 00 
1007   0AE9 00 00 00 00 
1007   0AED 00 00 00 00 
1007   0AF1 00 00 00 00 
1007   0AF5 00 00 00 00 
1007   0AF9 00 00 00 00 
1007   0AFD 00 00 00 00 
1007   0B01 00 00 00 00 
1007   0B05 00 00 00 00 
1007   0B09 00 00 00 00 
1007   0B0D 00 00 00 00 
1007   0B11 00 00 00 00 
1007   0B15 00 00 00 00 
1007   0B19 00 00 00 00 
1007   0B1D 00 00 00 00 
1007   0B21 00 00 00 00 
1007   0B25 00 00 00 00 
1007   0B29 00 00 00 00 
1007   0B2D 00 00 00 00 
1007   0B31 00 00 00 00 
1007   0B35 00 00 00 00 
1007   0B39 00 00 00 00 
1007   0B3D 00 00 00 00 
1007   0B41 00 00 00 00 
1007   0B45 00 00 00 00 
1007   0B49 00 00 00 00 
1007   0B4D 00 00 00 00 
1007   0B51 00 00 00 00 
1007   0B55 00 00 00 00 
1007   0B59 00 00 00 00 
1007   0B5D 00 00 00 00 
1007   0B61 00 00 00 00 
1007   0B65 00 00 00 00 
1007   0B69 00 00 00 00 
1007   0B6D 00 00 00 00 
1007   0B71 00 00 00 00 
1007   0B75 00 00 00 00 
1007   0B79 00 00 00 00 
1007   0B7D 00 00 00 00 
1007   0B81 00 00 00 00 
1007   0B85 00 00 00 00 
1007   0B89 00 00 00 00 
1007   0B8D 00 00 00 00 
1007   0B91 00 00 00 00 
1007   0B95 00 00 00 00 
1007   0B99 00 00 00 00 
1007   0B9D 00 00 00 00 
1007   0BA1 00 00 00 00 
1007   0BA5 00 00 00 00 
1007   0BA9 00 00 00 00 
1007   0BAD 00 00 00 00 
1007   0BB1 00 00 00 00 
1007   0BB5 00 00 00 00 
1007   0BB9 00 00 00 00 
1007   0BBD 00 00 00 00 
1007   0BC1 00 00 00 00 
1007   0BC5 00 00 00 00 
1007   0BC9 00 00 00 00 
1007   0BCD 00 00 00 00 
1007   0BD1 00 00 00 00 
1007   0BD5 00 00 00 00 
1007   0BD9 00 00 00 00 
1007   0BDD 00 00 00 00 
1007   0BE1 00 00 00 00 
1007   0BE5 00 00 00 00 
1007   0BE9 00 00 00 00 
1007   0BED 00 00 00 00 
1007   0BF1 00 00 00 00 
1007   0BF5 00 00 00 00 
1007   0BF9 00 00 00 00 
1007   0BFD 00 00 00 00 
1007   0C01 00 00 00 00 
1007   0C05 00 00 00 00 
1007   0C09 00 00 00 00 
1007   0C0D 00 00 00 00 
1007   0C11 00 00 00 00 
1007   0C15 00 00 00 00 
1007   0C19 00 00 00 00 
1007   0C1D 00 00 00 00 
1007   0C21 00 00 00 00 
1007   0C25 00 00 00 00 
1007   0C29 00 00 00 00 
1007   0C2D 00 00 00 00 
1007   0C31 00 00 00 00 
1007   0C35 00 00 00 00 
1007   0C39 00 00 00 00 
1007   0C3D 00 00 00 00 
1007   0C41 00 00 00 00 
1007   0C45 00 00 00 00 
1007   0C49 00 00 00 00 
1007   0C4D 00 00 00 00 
1007   0C51 00 00 00 00 
1007   0C55 00 00 00 00 
1007   0C59 00 00 00 00 
1007   0C5D 00 00 00 00 
1007   0C61 00 00 00 00 
1007   0C65 00 00 00 00 
1007   0C69 00 00 00 00 
1007   0C6D 00 00 00 00 
1007   0C71 00 00 00 00 
1007   0C75 00 00 00 00 
1007   0C79 00 00 00 00 
1007   0C7D 00 00 00 00 
1007   0C81 00 00 00 00 
1007   0C85 00 00 00 00 
1007   0C89 00 00 00 00 
1007   0C8D 00 00 00 00 
1007   0C91 00 00 00 00 
1007   0C95 00 00 00 00 
1007   0C99 00 00 00 00 
1007   0C9D 00 00 00 00 
1007   0CA1 00 00 00 00 
1007   0CA5 00 00 00 00 
1007   0CA9 00 00 00 00 
1007   0CAD 00 00 00 00 
1007   0CB1 00 00 00 00 
1007   0CB5 00 00 00 00 
1007   0CB9 00 00 00 00 
1007   0CBD 00 00 00 00 
1007   0CC1 00 00 00 00 
1007   0CC5 00 00 00 00 
1007   0CC9 00 00 00 00 
1007   0CCD 00 00 00 00 
1007   0CD1 00 00 00 00 
1007   0CD5 00 00 00 00 
1007   0CD9 00 00 00 00 
1007   0CDD 00 00 00 00 
1007   0CE1 00 00 00 00 
1007   0CE5 00 00 00 00 
1007   0CE9 00 00 00 00 
1007   0CED 00 00 00 00 
1007   0CF1 00 00 00 00 
1007   0CF5 00 00 00 00 
1007   0CF9 00 00 00 00 
1007   0CFD 00 00 00 00 
1007   0D01 00 00 00 00 
1007   0D05 00 00 00 00 
1007   0D09 00 00 00 00 
1007   0D0D 00 00 00 00 
1007   0D11 00 00 00 00 
1007   0D15 00 00 00 00 
1007   0D19 00 00 00 00 
1007   0D1D 00 00 00 00 
1007   0D21 00 00 00 00 
1007   0D25 00 00 00 00 
1007   0D29 00 00 00 00 
1007   0D2D 00 00 00 00 
1007   0D31 00 00 00 00 
1007   0D35 00 00 00 00 
1007   0D39 00 00 00 00 
1007   0D3D 00 00 00 00 
1007   0D41 00 00 00 00 
1007   0D45 00 00 00 00 
1007   0D49 00 00 00 00 
1007   0D4D 00 00 00 00 
1007   0D51 00 00 00 00 
1007   0D55 00 00 00 00 
1007   0D59 00 00 00 00 
1007   0D5D 00 00 00 00 
1007   0D61 00 00 00 00 
1007   0D65 00 00 00 00 
1007   0D69 00 00 00 00 
1007   0D6D 00 00 00 00 
1007   0D71 00 00 00 00 
1007   0D75 00 00 00 00 
1007   0D79 00 00 00 00 
1007   0D7D 00 00 00 00 
1007   0D81 00 00 00 00 
1007   0D85 00 00 00 00 
1007   0D89 00 00 00 00 
1007   0D8D 00 00 00 00 
1007   0D91 00 00 00 00 
1007   0D95 00 00 00 00 
1007   0D99 00 00 00 00 
1007   0D9D 00 00 00 00 
1007   0DA1 00 00 00 00 
1007   0DA5 00 00 00 00 
1007   0DA9 00 00 00 00 
1007   0DAD 00 00 00 00 
1007   0DB1 00 00 00 00 
1007   0DB5 00 00 00 00 
1007   0DB9 00 00 00 00 
1007   0DBD 00 00 00 00 
1007   0DC1 00 00 00 00 
1007   0DC5 00 00 00 00 
1007   0DC9 00 00 00 00 
1007   0DCD 00 00 00 00 
1007   0DD1 00 00 00 00 
1007   0DD5 00 00 00 00 
1007   0DD9 00 00 00 00 
1007   0DDD 00 00 00 00 
1007   0DE1 00 00 00 00 
1007   0DE5 00 00 00 00 
1007   0DE9 00 00 00 00 
1007   0DED 00 00 00 00 
1007   0DF1 00 00 00 00 
1007   0DF5 00 00 00 00 
1007   0DF9 00 00 00 00 
1007   0DFD 00 00 00 00 
1007   0E01 00 00 00 00 
1007   0E05 00 00 00 00 
1007   0E09 00 00 00 00 
1007   0E0D 00 00 00 00 
1007   0E11 00 00 00 00 
1007   0E15 00 00 00 00 
1007   0E19 00 00 00 00 
1007   0E1D 00 00 00 00 
1007   0E21 00 00 00 00 
1007   0E25 00 00 00 00 
1007   0E29 00 00 00 00 
1007   0E2D 00 00 00 00 
1007   0E31 00 00 00 00 
1007   0E35 00 00 00 00 
1007   0E39 00 00 00 00 
1007   0E3D 00 00 00 00 
1007   0E41 00 00 00 00 
1007   0E45 00 00 00 00 
1007   0E49 00 00 00 00 
1007   0E4D 00 00 00 00 
1007   0E51 00 00 00 00 
1007   0E55 00 00 00 00 
1007   0E59 00 00 00 00 
1007   0E5D 00 00 00 00 
1007   0E61 00 00 00 00 
1007   0E65 00 00 00 00 
1007   0E69 00 00 00 00 
1007   0E6D 00 00 00 00 
1007   0E71 00 00 00 00 
1007   0E75 00 00 00 00 
1007   0E79 00 00 00 00 
1007   0E7D 00 00 00 00 
1007   0E81 00 00 00 00 
1007   0E85 00 00 00 00 
1007   0E89 00 00 00 00 
1007   0E8D 00 00 00 00 
1007   0E91 00 00 00 00 
1007   0E95 00 00 00 00 
1007   0E99 00 00 00 00 
1007   0E9D 00 00 00 00 
1007   0EA1 00 00 00 00 
1007   0EA5 00 00 00 00 
1007   0EA9 00 00 00 00 
1007   0EAD 00 00 00 00 
1007   0EB1 00 00 00 00 
1007   0EB5 00 00 00 00 
1007   0EB9 00 00 00 00 
1007   0EBD 00 00 00 00 
1007   0EC1 00 00 00 00 
1007   0EC5 00 00 00 00 
1007   0EC9 00 00 00 00 
1007   0ECD 00 00 00 00 
1007   0ED1 00 00 00 00 
1007   0ED5 00 00 00 00 
1007   0ED9 00 00 00 00 
1007   0EDD 00 00 00 00 
1007   0EE1 00 00 00 00 
1007   0EE5 00 00 00 00 
1007   0EE9 00 00 00 00 
1007   0EED 00 00 00 00 
1007   0EF1 00 00 00 00 
1007   0EF5 00 00 00 00 
1007   0EF9 00 00 00 00 
1007   0EFD 00 00 00 00 
1007   0F01 00 00 00 00 
1007   0F05 00 00 00 00 
1007   0F09 00 00 00 00 
1007   0F0D 00 00 00 00 
1007   0F11 00 00 00 00 
1007   0F15 00 00 00 00 
1007   0F19 00 00 00 00 
1007   0F1D 00 00 00 00 
1007   0F21 00 00 00 00 
1007   0F25 00 00 00 00 
1007   0F29 00 00 00 00 
1007   0F2D 00 00 00 00 
1007   0F31 00 00 00 00 
1007   0F35 00 00 00 00 
1007   0F39 00 00 00 00 
1007   0F3D 00 00 00 00 
1007   0F41 00 00 00 00 
1007   0F45 00 00 00 00 
1007   0F49 00 00 00 00 
1007   0F4D 00 00 00 00 
1007   0F51 00 00 00 00 
1007   0F55 00 00 00 00 
1007   0F59 00 00 00 00 
1007   0F5D 00 00 00 00 
1007   0F61 00 00 00 00 
1007   0F65 00 00 00 00 
1007   0F69 00 00 00 00 
1007   0F6D 00 00 00 00 
1007   0F71 00 00 00 00 
1007   0F75 00 00 00 00 
1007   0F79 00 00 00 00 
1007   0F7D 00 00 00 00 
1007   0F81 00 00 00 00 
1007   0F85 00 00 00 00 
1007   0F89 00 00 00 00 
1007   0F8D 00 00 00 00 
1007   0F91 00 00 00 00 
1007   0F95 00 00 00 00 
1007   0F99 00 00 00 00 
1007   0F9D 00 00 00 00 
1007   0FA1 00 00 00 00 
1007   0FA5 00 00 00 00 
1007   0FA9 00 00 00 00 
1007   0FAD 00 00 00 00 
1007   0FB1 00 00 00 00 
1007   0FB5 00 00 00 00 
1007   0FB9 00 00 00 00 
1007   0FBD 00 00 00 00 
1007   0FC1 00 00 00 00 
1007   0FC5 00 00 00 00 
1007   0FC9 00 00 00 00 
1007   0FCD 00 00 00 00 
1007   0FD1 00 00 00 00 
1007   0FD5 00 00 00 00 
1007   0FD9 00 00 00 00 
1007   0FDD 00 00 00 00 
1007   0FE1 00 00 00 00 
1007   0FE5 00 00 00 00 
1007   0FE9 00 00 00 00 
1007   0FED 00 00 00 00 
1007   0FF1 00 00 00 00 
1007   0FF5 00 00 00 00 
1007   0FF9 00 00 00 00 
1007   0FFD 00 00 00 00 
1007   1001 00 00 00 00 
1007   1005 00 00 00 00 
1007   1009 00 00 00 00 
1007   100D 00 00 00 00 
1007   1011 00 00 00 00 
1007   1015 00 00 00 00 
1007   1019 00 00 00 00 
1007   101D 00 00 00 00 
1007   1021 00 00 00 00 
1007   1025 00 00 00 00 
1007   1029 00 00 00 00 
1007   102D 00 00 00 00 
1007   1031 00 00 00 00 
1007   1035 00 00 00 00 
1007   1039 00 00 00 00 
1007   103D 00 00 00 00 
1007   1041 00 00 00 00 
1007   1045 00 00 00 00 
1007   1049 00 00 00 00 
1007   104D 00 00 00 00 
1007   1051 00 00 00 00 
1007   1055 00 00 00 00 
1007   1059 00 00 00 00 
1007   105D 00 00 00 00 
1007   1061 00 00 00 00 
1007   1065 00 00 00 00 
1007   1069 00 00 00 00 
1007   106D 00 00 00 00 
1007   1071 00 00 00 00 
1007   1075 00 00 00 00 
1007   1079 00 00 00 00 
1007   107D 00 00 00 00 
1007   1081 00 00 00 00 
1007   1085 00 00 00 00 
1007   1089 00 00 00 00 
1007   108D 00 00 00 00 
1007   1091 00 00 00 00 
1007   1095 00 00 00 00 
1007   1099 00 00 00 00 
1007   109D 00 00 00 00 
1007   10A1 00 00 00 00 
1007   10A5 00 00 00 00 
1007   10A9 00 00 00 00 
1007   10AD 00 00 00 00 
1007   10B1 00 00 00 00 
1007   10B5 00 00 00 00 
1007   10B9 00 00 00 00 
1007   10BD 00 00 00 00 
1007   10C1 00 00 00 00 
1007   10C5 00 00 00 00 
1007   10C9 00 00 00 00 
1007   10CD 00 00 00 00 
1007   10D1 00 00 00 00 
1007   10D5 00 00 00 00 
1007   10D9 00 00 00 00 
1007   10DD 00 00 00 00 
1007   10E1 00 00 00 00 
1007   10E5 00 00 00 00 
1007   10E9 00 00 00 00 
1007   10ED 00 00 00 00 
1007   10F1 00 00 00 00 
1007   10F5 00 00 00 00 
1007   10F9 00 00 00 00 
1007   10FD 00 00 00 00 
1007   1101 00 00 00 00 
1007   1105 00 00 00 00 
1007   1109 00 00 00 00 
1007   110D 00 00 00 00 
1007   1111 00 00 00 00 
1007   1115 00 00 00 00 
1007   1119 00 00 00 00 
1007   111D 00 00 00 00 
1007   1121 00 00 00 00 
1007   1125 00 00 00 00 
1007   1129 00 00 00 00 
1007   112D 00 00 00 00 
1007   1131 00 00 00 00 
1007   1135 00 00 00 00 
1007   1139 00 00 00 00 
1007   113D 00 00 00 00 
1007   1141 00 00 00 00 
1007   1145 00 00 00 00 
1007   1149 00 00 00 00 
1007   114D 00 00 00 00 
1007   1151 00 00 00 00 
1008   1155 75 0A       __canvas: .dw __canvas_data
1009   1157 2C 20 00    __string_0: .db ", ", 0
1010   115A 0A 00       __string_1: .db "\n", 0
1011   115C             ; --- END DATA BLOCK
1012   115C             
1013   115C             ; --- BEGIN INCLUDE BLOCK
1014   115C             .include "lib/stdio.asm"
0001+  115C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  115C             ; stdio.s
0003+  115C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  115C             .include "lib/string.asm"
0001++ 115C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 115C             ; string.s
0003++ 115C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 115C             
0005++ 115C             
0006++ 115C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 115C             ; strrev
0008++ 115C             ; reverse a string
0009++ 115C             ; D = string address
0010++ 115C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 115C             ; 01234
0012++ 115C             strrev:
0013++ 115C 4B          	pusha
0014++ 115D 07 A3 11    	call strlen	; length in C
0015++ 1160 12          	mov a, c
0016++ 1161 AF 01 00    	cmp a, 1
0017++ 1164 D0 7E 11    	jleu strrev_end	; check string length. string len must be > 1
0018++ 1167 7D          	dec a
0019++ 1168 FD 4E       	mov si, d	; beginning of string
0020++ 116A FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 116C 59          	add d, a	; end of string
0022++ 116D 12          	mov a, c
0023++ 116E FD 9B       	shr a		; divide by 2
0024++ 1170 39          	mov c, a	; C now counts the steps
0025++ 1171             strrev_L0:
0026++ 1171 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1172 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1173 3E          	mov [d], al	; store left char into right side
0029++ 1174 1B          	mov al, bl
0030++ 1175 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1176 7E          	dec c
0032++ 1177 7F          	dec d
0033++ 1178 C2 00 00    	cmp c, 0
0034++ 117B C7 71 11    	jne strrev_L0
0035++ 117E             strrev_end:
0036++ 117E 4C          	popa
0037++ 117F 09          	ret
0038++ 1180             	
0039++ 1180             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1180             ; strchr
0041++ 1180             ; search string in D for char in AL
0042++ 1180             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1180             strchr:
0044++ 1180             strchr_L0:
0045++ 1180 32          	mov bl, [d]
0046++ 1181 C1 00       	cmp bl, 0
0047++ 1183 C6 8E 11    	je strchr_end
0048++ 1186 BA          	cmp al, bl
0049++ 1187 C6 8E 11    	je strchr_end
0050++ 118A 79          	inc d
0051++ 118B 0A 80 11    	jmp strchr_L0
0052++ 118E             strchr_end:
0053++ 118E 1B          	mov al, bl
0054++ 118F 09          	ret
0055++ 1190             
0056++ 1190             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1190             ; strstr
0058++ 1190             ; find sub-string
0059++ 1190             ; str1 in SI
0060++ 1190             ; str2 in DI
0061++ 1190             ; SI points to end of source string
0062++ 1190             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1190             strstr:
0064++ 1190 DB          	push al
0065++ 1191 DA          	push d
0066++ 1192 E3          	push di
0067++ 1193             strstr_loop:
0068++ 1193 F3          	cmpsb					; compare a byte of the strings
0069++ 1194 C7 9F 11    	jne strstr_ret
0070++ 1197 FC 00 00    	lea d, [di + 0]
0071++ 119A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 119C C7 93 11    	jne strstr_loop				; equal chars but not at end
0073++ 119F             strstr_ret:
0074++ 119F F0          	pop di
0075++ 11A0 E7          	pop d
0076++ 11A1 E8          	pop al
0077++ 11A2 09          	ret
0078++ 11A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 11A3             ; length of null terminated string
0080++ 11A3             ; result in C
0081++ 11A3             ; pointer in D
0082++ 11A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 11A3             strlen:
0084++ 11A3 DA          	push d
0085++ 11A4 38 00 00    	mov c, 0
0086++ 11A7             strlen_L1:
0087++ 11A7 BD 00       	cmp byte [d], 0
0088++ 11A9 C6 B1 11    	je strlen_ret
0089++ 11AC 79          	inc d
0090++ 11AD 78          	inc c
0091++ 11AE 0A A7 11    	jmp strlen_L1
0092++ 11B1             strlen_ret:
0093++ 11B1 E7          	pop d
0094++ 11B2 09          	ret
0095++ 11B3             
0096++ 11B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 11B3             ; STRCMP
0098++ 11B3             ; compare two strings
0099++ 11B3             ; str1 in SI
0100++ 11B3             ; str2 in DI
0101++ 11B3             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 11B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 11B3             strcmp:
0104++ 11B3 DB          	push al
0105++ 11B4 DA          	push d
0106++ 11B5 E3          	push di
0107++ 11B6 E2          	push si
0108++ 11B7             strcmp_loop:
0109++ 11B7 F3          	cmpsb					; compare a byte of the strings
0110++ 11B8 C7 C3 11    	jne strcmp_ret
0111++ 11BB FB FF FF    	lea d, [si +- 1]
0112++ 11BE BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 11C0 C7 B7 11    	jne strcmp_loop				; equal chars but not at end
0114++ 11C3             strcmp_ret:
0115++ 11C3 EF          	pop si
0116++ 11C4 F0          	pop di
0117++ 11C5 E7          	pop d
0118++ 11C6 E8          	pop al
0119++ 11C7 09          	ret
0120++ 11C8             
0121++ 11C8             
0122++ 11C8             ; STRCPY
0123++ 11C8             ; copy null terminated string from SI to DI
0124++ 11C8             ; source in SI
0125++ 11C8             ; destination in DI
0126++ 11C8             strcpy:
0127++ 11C8 E2          	push si
0128++ 11C9 E3          	push di
0129++ 11CA DB          	push al
0130++ 11CB             strcpy_L1:
0131++ 11CB F6          	lodsb
0132++ 11CC F7          	stosb
0133++ 11CD B9 00       	cmp al, 0
0134++ 11CF C7 CB 11    	jne strcpy_L1
0135++ 11D2             strcpy_end:
0136++ 11D2 E8          	pop al
0137++ 11D3 F0          	pop di
0138++ 11D4 EF          	pop si
0139++ 11D5 09          	ret
0140++ 11D6             
0141++ 11D6             ; STRCAT
0142++ 11D6             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 11D6             ; source in SI
0144++ 11D6             ; destination in DI
0145++ 11D6             strcat:
0146++ 11D6 E2          	push si
0147++ 11D7 E3          	push di
0148++ 11D8 D7          	push a
0149++ 11D9 DA          	push d
0150++ 11DA 50          	mov a, di
0151++ 11DB 3C          	mov d, a
0152++ 11DC             strcat_goto_end_L1:
0153++ 11DC BD 00       	cmp byte[d], 0
0154++ 11DE C6 E5 11    	je strcat_start
0155++ 11E1 79          	inc d
0156++ 11E2 0A DC 11    	jmp strcat_goto_end_L1
0157++ 11E5             strcat_start:
0158++ 11E5 FD 50       	mov di, d
0159++ 11E7             strcat_L1:
0160++ 11E7 F6          	lodsb
0161++ 11E8 F7          	stosb
0162++ 11E9 B9 00       	cmp al, 0
0163++ 11EB C7 E7 11    	jne strcat_L1
0164++ 11EE             strcat_end:
0165++ 11EE E7          	pop d
0166++ 11EF E4          	pop a
0167++ 11F0 F0          	pop di
0168++ 11F1 EF          	pop si
0169++ 11F2 09          	ret
0005+  11F3             
0006+  11F3 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  11F7 34 35 36 37 
0006+  11FB 38 39 41 42 
0006+  11FF 43 44 45 46 
0007+  1203 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  1207 1B 5B 48 00 
0008+  120B             
0009+  120B 01 00       table_power:.dw 1
0010+  120D 0A 00       			.dw 10
0011+  120F 64 00       			.dw 100
0012+  1211 E8 03       			.dw 1000
0013+  1213 10 27       			.dw 10000
0014+  1215             
0015+  1215             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  1215             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  1215             ; ASCII in BL
0018+  1215             ; result in AL
0019+  1215             ; ascii for F = 0100 0110
0020+  1215             ; ascii for 9 = 0011 1001
0021+  1215             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  1215             hex_ascii_encode:
0023+  1215 1B          	mov al, bl
0024+  1216 93 40       	test al, $40				; test if letter or number
0025+  1218 C7 1E 12    	jnz hex_letter
0026+  121B 87 0F       	and al, $0F				; get number
0027+  121D 09          	ret
0028+  121E             hex_letter:
0029+  121E 87 0F       	and al, $0F				; get letter
0030+  1220 6A 09       	add al, 9
0031+  1222 09          	ret
0032+  1223             
0033+  1223             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  1223             ; ATOI
0035+  1223             ; 2 letter hex string in B
0036+  1223             ; 8bit integer returned in AL
0037+  1223             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  1223             atoi:
0039+  1223 D8          	push b
0040+  1224 07 15 12    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  1227 30          	mov bl, bh
0042+  1228 DB          	push al					; save a
0043+  1229 07 15 12    	call hex_ascii_encode
0044+  122C EA          	pop bl	
0045+  122D FD 9E 04    	shl al, 4
0046+  1230 8C          	or al, bl
0047+  1231 E5          	pop b
0048+  1232 09          	ret	
0049+  1233             
0050+  1233             
0051+  1233             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  1233             ; printf
0053+  1233             ; no need for explanations!
0054+  1233             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1233             printf:
0056+  1233 09          	ret
0057+  1234             
0058+  1234             
0059+  1234             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  1234             ; scanf
0061+  1234             ; no need for explanations!
0062+  1234             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  1234             scanf:
0064+  1234 09          	ret
0065+  1235             
0066+  1235             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  1235             ; ITOA
0068+  1235             ; 8bit value in BL
0069+  1235             ; 2 byte ASCII result in A
0070+  1235             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  1235             itoa:
0072+  1235 DA          	push d
0073+  1236 D8          	push b
0074+  1237 A7 00       	mov bh, 0
0075+  1239 FD A4 04    	shr bl, 4	
0076+  123C 74          	mov d, b
0077+  123D 1F F3 11    	mov al, [d + s_hex_digits]
0078+  1240 23          	mov ah, al
0079+  1241             	
0080+  1241 E5          	pop b
0081+  1242 D8          	push b
0082+  1243 A7 00       	mov bh, 0
0083+  1245 FD 87 0F    	and bl, $0F
0084+  1248 74          	mov d, b
0085+  1249 1F F3 11    	mov al, [d + s_hex_digits]
0086+  124C E5          	pop b
0087+  124D E7          	pop d
0088+  124E 09          	ret
0089+  124F             
0090+  124F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  124F             ; HEX STRING TO BINARY
0092+  124F             ; di = destination address
0093+  124F             ; si = source
0094+  124F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  124F             hex_to_int:
0096+  124F             hex_to_int_L1:
0097+  124F F6          	lodsb					; load from [SI] to AL
0098+  1250 B9 00       	cmp al, 0				; check if ASCII 0
0099+  1252 C6 5F 12    	jz hex_to_int_ret
0100+  1255 36          	mov bh, al
0101+  1256 F6          	lodsb
0102+  1257 2F          	mov bl, al
0103+  1258 07 23 12    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  125B F7          	stosb					; store AL to [DI]
0105+  125C 0A 4F 12    	jmp hex_to_int_L1
0106+  125F             hex_to_int_ret:
0107+  125F 09          	ret		
0108+  1260             
0109+  1260             
0110+  1260             
0111+  1260             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  1260             ; GETCHAR
0113+  1260             ; char in ah
0114+  1260             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  1260             getchar:
0116+  1260 DB          	push al
0117+  1261             getchar_retry:
0118+  1261 FD 0C       	sti
0119+  1263 19 01       	mov al, 1
0120+  1265 05 03       	syscall sys_io			; receive in AH
0121+  1267 B9 00       	cmp al, 0			; check if any char was receive
0122+  1269 C6 61 12    	je getchar_retry
0123+  126C E8          	pop al
0124+  126D 09          	ret
0125+  126E             
0126+  126E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  126E             ; PUTCHAR
0128+  126E             ; char in ah
0129+  126E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  126E             putchar:
0131+  126E D7          	push a
0132+  126F 19 00       	mov al, 0
0133+  1271 05 03       	syscall sys_io			; char in AH
0134+  1273 E4          	pop a
0135+  1274 09          	ret
0136+  1275             
0137+  1275             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  1275             ;; INPUT A STRING
0139+  1275             ;; terminates with null
0140+  1275             ;; pointer in D
0141+  1275             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  1275             gets:
0143+  1275 D7          	push a
0144+  1276 DA          	push d
0145+  1277             gets_loop:
0146+  1277 FD 0C       	sti
0147+  1279 19 01       	mov al, 1
0148+  127B 05 03       	syscall sys_io			; receive in AH
0149+  127D B9 00       	cmp al, 0				; check error code (AL)
0150+  127F C6 77 12    	je gets_loop			; if no char received, retry
0151+  1282             
0152+  1282 76 1B       	cmp ah, 27
0153+  1284 C6 A5 12    	je gets_telnet_escape
0154+  1287 76 0A       	cmp ah, $0A				; LF
0155+  1289 C6 FE 12    	je gets_end
0156+  128C 76 0D       	cmp ah, $0D				; CR
0157+  128E C6 FE 12    	je gets_end
0158+  1291 76 5C       	cmp ah, $5C				; '\\'
0159+  1293 C6 D5 12    	je gets_escape
0160+  1296             	
0161+  1296 76 08       	cmp ah, $08			; check for backspace
0162+  1298 C6 A1 12    	je gets_backspace
0163+  129B             
0164+  129B 1A          	mov al, ah
0165+  129C 3E          	mov [d], al
0166+  129D 79          	inc d
0167+  129E 0A 77 12    	jmp gets_loop
0168+  12A1             gets_backspace:
0169+  12A1 7F          	dec d
0170+  12A2 0A 77 12    	jmp gets_loop
0171+  12A5             gets_telnet_escape:
0172+  12A5 FD 0C       	sti
0173+  12A7 19 01       	mov al, 1
0174+  12A9 05 03       	syscall sys_io				; receive in AH without echo
0175+  12AB B9 00       	cmp al, 0					; check error code (AL)
0176+  12AD C6 A5 12    	je gets_telnet_escape		; if no char received, retry
0177+  12B0 76 5B       	cmp ah, '['
0178+  12B2 C7 77 12    	jne gets_loop
0179+  12B5             gets_telnet_escape_phase2:
0180+  12B5 FD 0C       	sti
0181+  12B7 19 01       	mov al, 1
0182+  12B9 05 03       	syscall sys_io					; receive in AH without echo
0183+  12BB B9 00       	cmp al, 0						; check error code (AL)
0184+  12BD C6 B5 12    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  12C0 76 44       	cmp ah, 'D'
0186+  12C2 C6 CD 12    	je gets_left_arrow
0187+  12C5 76 43       	cmp ah, 'C'
0188+  12C7 C6 D1 12    	je gets_right_arrow
0189+  12CA 0A 77 12    	jmp gets_loop
0190+  12CD             gets_left_arrow:
0191+  12CD 7F          	dec d
0192+  12CE 0A 77 12    	jmp gets_loop
0193+  12D1             gets_right_arrow:
0194+  12D1 79          	inc d
0195+  12D2 0A 77 12    	jmp gets_loop
0196+  12D5             gets_escape:
0197+  12D5 FD 0C       	sti
0198+  12D7 19 01       	mov al, 1
0199+  12D9 05 03       	syscall sys_io			; receive in AH
0200+  12DB B9 00       	cmp al, 0				; check error code (AL)
0201+  12DD C6 D5 12    	je gets_escape			; if no char received, retry
0202+  12E0 76 6E       	cmp ah, 'n'
0203+  12E2 C6 F0 12    	je gets_LF
0204+  12E5 76 72       	cmp ah, 'r'
0205+  12E7 C6 F7 12    	je gets_CR
0206+  12EA 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  12EB 3E          	mov [d], al
0208+  12EC 79          	inc d
0209+  12ED 0A 77 12    	jmp gets_loop
0210+  12F0             gets_LF:
0211+  12F0 19 0A       	mov al, $0A
0212+  12F2 3E          	mov [d], al
0213+  12F3 79          	inc d
0214+  12F4 0A 77 12    	jmp gets_loop
0215+  12F7             gets_CR:
0216+  12F7 19 0D       	mov al, $0D
0217+  12F9 3E          	mov [d], al
0218+  12FA 79          	inc d
0219+  12FB 0A 77 12    	jmp gets_loop
0220+  12FE             gets_end:
0221+  12FE 19 00       	mov al, 0
0222+  1300 3E          	mov [d], al				; terminate string
0223+  1301 E7          	pop d
0224+  1302 E4          	pop a
0225+  1303 09          	ret
0226+  1304             
0227+  1304             
0228+  1304             
0229+  1304             
0230+  1304             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  1304             ;; INPUT TEXT
0232+  1304             ;; terminated with CTRL+D
0233+  1304             ;; pointer in D
0234+  1304             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  1304             gettxt:
0236+  1304 D7          	push a
0237+  1305 DA          	push d
0238+  1306             gettxt_loop:
0239+  1306 19 01       	mov al, 1
0240+  1308 05 03       	syscall sys_io			; receive in AH
0241+  130A B9 00       	cmp al, 0				; check error code (AL)
0242+  130C C6 06 13    	je gettxt_loop		; if no char received, retry
0243+  130F 76 04       	cmp ah, 4			; EOT
0244+  1311 C6 4F 13    	je gettxt_end
0245+  1314 76 08       	cmp ah, $08			; check for backspace
0246+  1316 C6 4B 13    	je gettxt_backspace
0247+  1319 76 5C       	cmp ah, $5C				; '\\'
0248+  131B C6 24 13    	je gettxt_escape
0249+  131E 1A          	mov al, ah
0250+  131F 3E          	mov [d], al
0251+  1320 79          	inc d
0252+  1321 0A 06 13    	jmp gettxt_loop
0253+  1324             gettxt_escape:
0254+  1324 19 01       	mov al, 1
0255+  1326 05 03       	syscall sys_io			; receive in AH
0256+  1328 B9 00       	cmp al, 0				; check error code (AL)
0257+  132A C6 24 13    	je gettxt_escape		; if no char received, retry
0258+  132D 76 6E       	cmp ah, 'n'
0259+  132F C6 3D 13    	je gettxt_LF
0260+  1332 76 72       	cmp ah, 'r'
0261+  1334 C6 44 13    	je gettxt_CR
0262+  1337 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  1338 3E          	mov [d], al
0264+  1339 79          	inc d
0265+  133A 0A 06 13    	jmp gettxt_loop
0266+  133D             gettxt_LF:
0267+  133D 19 0A       	mov al, $0A
0268+  133F 3E          	mov [d], al
0269+  1340 79          	inc d
0270+  1341 0A 06 13    	jmp gettxt_loop
0271+  1344             gettxt_CR:
0272+  1344 19 0D       	mov al, $0D
0273+  1346 3E          	mov [d], al
0274+  1347 79          	inc d
0275+  1348 0A 06 13    	jmp gettxt_loop
0276+  134B             gettxt_backspace:
0277+  134B 7F          	dec d
0278+  134C 0A 06 13    	jmp gettxt_loop
0279+  134F             gettxt_end:
0280+  134F 19 00       	mov al, 0
0281+  1351 3E          	mov [d], al				; terminate string
0282+  1352 E7          	pop d
0283+  1353 E4          	pop a
0284+  1354 09          	ret
0285+  1355             
0286+  1355             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  1355             ; PRINT NEW LINE
0288+  1355             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  1355             printnl:
0290+  1355 D7          	push a
0291+  1356 10 00 0A    	mov a, $0A00
0292+  1359 05 03       	syscall sys_io
0293+  135B 10 00 0D    	mov a, $0D00
0294+  135E 05 03       	syscall sys_io
0295+  1360 E4          	pop a
0296+  1361 09          	ret
0297+  1362             
0298+  1362             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  1362             ; strtoint
0300+  1362             ; 4 digit hex string number in d
0301+  1362             ; integer returned in A
0302+  1362             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  1362             strtointx:
0304+  1362 D8          	push b
0305+  1363 32          	mov bl, [d]
0306+  1364 37          	mov bh, bl
0307+  1365 33 01 00    	mov bl, [d + 1]
0308+  1368 07 23 12    	call atoi				; convert to int in AL
0309+  136B 23          	mov ah, al				; move to AH
0310+  136C 33 02 00    	mov bl, [d + 2]
0311+  136F 37          	mov bh, bl
0312+  1370 33 03 00    	mov bl, [d + 3]
0313+  1373 07 23 12    	call atoi				; convert to int in AL
0314+  1376 E5          	pop b
0315+  1377 09          	ret
0316+  1378             
0317+  1378             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  1378             ; strtoint
0319+  1378             ; 5 digit base10 string number in d
0320+  1378             ; integer returned in A
0321+  1378             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  1378             strtoint:
0323+  1378 E2          	push si
0324+  1379 D8          	push b
0325+  137A D9          	push c
0326+  137B DA          	push d
0327+  137C 07 A3 11    	call strlen			; get string length in C
0328+  137F 7E          	dec c
0329+  1380 FD 4E       	mov si, d
0330+  1382 12          	mov a, c
0331+  1383 FD 99       	shl a
0332+  1385 3B 0B 12    	mov d, table_power
0333+  1388 59          	add d, a
0334+  1389 38 00 00    	mov c, 0
0335+  138C             strtoint_L0:
0336+  138C F6          	lodsb			; load ASCII to al
0337+  138D B9 00       	cmp al, 0
0338+  138F C6 A2 13    	je strtoint_end
0339+  1392 6F 30       	sub al, $30		; make into integer
0340+  1394 22 00       	mov ah, 0
0341+  1396 2A          	mov b, [d]
0342+  1397 AC          	mul a, b			; result in B since it fits in 16bits
0343+  1398 11          	mov a, b
0344+  1399 28          	mov b, c
0345+  139A 54          	add a, b
0346+  139B 39          	mov c, a
0347+  139C 63 02 00    	sub d, 2
0348+  139F 0A 8C 13    	jmp strtoint_L0
0349+  13A2             strtoint_end:
0350+  13A2 12          	mov a, c
0351+  13A3 E7          	pop d
0352+  13A4 E6          	pop c
0353+  13A5 E5          	pop b
0354+  13A6 EF          	pop si
0355+  13A7 09          	ret
0356+  13A8             
0357+  13A8             
0358+  13A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  13A8             ; PRINT NULL TERMINATED STRING
0360+  13A8             ; pointer in D
0361+  13A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  13A8             puts:
0363+  13A8 D7          	push a
0364+  13A9 DA          	push d
0365+  13AA             puts_L1:
0366+  13AA 1E          	mov al, [d]
0367+  13AB B9 00       	cmp al, 0
0368+  13AD C6 B9 13    	jz puts_END
0369+  13B0 23          	mov ah, al
0370+  13B1 19 00       	mov al, 0
0371+  13B3 05 03       	syscall sys_io
0372+  13B5 79          	inc d
0373+  13B6 0A AA 13    	jmp puts_L1
0374+  13B9             puts_END:
0375+  13B9 E7          	pop d
0376+  13BA E4          	pop a
0377+  13BB 09          	ret
0378+  13BC             
0379+  13BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  13BC             ; PRINT N SIZE STRING
0381+  13BC             ; pointer in D
0382+  13BC             ; size in C
0383+  13BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  13BC             putsn:
0385+  13BC DB          	push al
0386+  13BD DA          	push d
0387+  13BE D9          	push c
0388+  13BF             putsn_L0:
0389+  13BF 1E          	mov al, [d]
0390+  13C0 23          	mov ah, al
0391+  13C1 19 00       	mov al, 0
0392+  13C3 05 03       	syscall sys_io
0393+  13C5 79          	inc d
0394+  13C6 7E          	dec c	
0395+  13C7 C2 00 00    	cmp c, 0
0396+  13CA C7 BF 13    	jne putsn_L0
0397+  13CD             putsn_end:
0398+  13CD E6          	pop c
0399+  13CE E7          	pop d
0400+  13CF E8          	pop al
0401+  13D0 09          	ret
0402+  13D1             
0403+  13D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  13D1             ; print 16bit decimal number
0405+  13D1             ; input number in A
0406+  13D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  13D1             print_u16d:
0408+  13D1 D7          	push a
0409+  13D2 D8          	push b
0410+  13D3 26 10 27    	mov b, 10000
0411+  13D6 AE          	div a, b			; get 10000 coeff.
0412+  13D7 07 FD 13    	call print_number
0413+  13DA 11          	mov a, b
0414+  13DB 26 E8 03    	mov b, 1000
0415+  13DE AE          	div a, b			; get 10000 coeff.
0416+  13DF 07 FD 13    	call print_number
0417+  13E2 11          	mov a, b
0418+  13E3 26 64 00    	mov b, 100
0419+  13E6 AE          	div a, b
0420+  13E7 07 FD 13    	call print_number
0421+  13EA 11          	mov a, b
0422+  13EB 26 0A 00    	mov b, 10
0423+  13EE AE          	div a, b
0424+  13EF 07 FD 13    	call print_number
0425+  13F2 11          	mov a, b
0426+  13F3 6A 30       	add al, $30
0427+  13F5 23          	mov ah, al
0428+  13F6 19 00       	mov al, 0
0429+  13F8 05 03       	syscall sys_io	; print coeff
0430+  13FA E5          	pop b
0431+  13FB E4          	pop a
0432+  13FC 09          	ret
0433+  13FD             
0434+  13FD             
0435+  13FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  13FD             ; if A == 0, print space
0437+  13FD             ; else print A
0438+  13FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  13FD             print_number:
0440+  13FD 6A 30       	add al, $30
0441+  13FF 23          	mov ah, al
0442+  1400 07 6E 12    	call putchar
0443+  1403 09          	ret
0444+  1404             
0445+  1404             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  1404             ; PRINT 16BIT HEX INTEGER
0447+  1404             ; integer value in reg B
0448+  1404             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  1404             print_u16x:
0450+  1404 D7          	push a
0451+  1405 D8          	push b
0452+  1406 DD          	push bl
0453+  1407 30          	mov bl, bh
0454+  1408 07 35 12    	call itoa				; convert bh to char in A
0455+  140B 2F          	mov bl, al				; save al
0456+  140C 19 00       	mov al, 0
0457+  140E 05 03       	syscall sys_io				; display AH
0458+  1410 24          	mov ah, bl				; retrieve al
0459+  1411 19 00       	mov al, 0
0460+  1413 05 03       	syscall sys_io				; display AL
0461+  1415             
0462+  1415 EA          	pop bl
0463+  1416 07 35 12    	call itoa				; convert bh to char in A
0464+  1419 2F          	mov bl, al				; save al
0465+  141A 19 00       	mov al, 0
0466+  141C 05 03       	syscall sys_io				; display AH
0467+  141E 24          	mov ah, bl				; retrieve al
0468+  141F 19 00       	mov al, 0
0469+  1421 05 03       	syscall sys_io				; display AL
0470+  1423             
0471+  1423 E5          	pop b
0472+  1424 E4          	pop a
0473+  1425 09          	ret
0474+  1426             
0475+  1426             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  1426             ; INPUT 16BIT HEX INTEGER
0477+  1426             ; read 16bit integer into A
0478+  1426             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  1426             scan_u16x:
0480+  1426 F8 10 00    	enter 16
0481+  1429 D8          	push b
0482+  142A DA          	push d
0483+  142B             
0484+  142B FA F1 FF    	lea d, [bp + -15]
0485+  142E 07 75 12    	call gets				; get number
0486+  1431             
0487+  1431 32          	mov bl, [d]
0488+  1432 37          	mov bh, bl
0489+  1433 33 01 00    	mov bl, [d + 1]
0490+  1436 07 23 12    	call atoi				; convert to int in AL
0491+  1439 23          	mov ah, al				; move to AH
0492+  143A             
0493+  143A 33 02 00    	mov bl, [d + 2]
0494+  143D 37          	mov bh, bl
0495+  143E 33 03 00    	mov bl, [d + 3]
0496+  1441 07 23 12    	call atoi				; convert to int in AL
0497+  1444             
0498+  1444 E7          	pop d
0499+  1445 E5          	pop b
0500+  1446 F9          	leave
0501+  1447 09          	ret
0502+  1448             
0503+  1448             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  1448             ; PRINT 8bit HEX INTEGER
0505+  1448             ; integer value in reg bl
0506+  1448             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  1448             print_u8x:
0508+  1448 D7          	push a
0509+  1449 DD          	push bl
0510+  144A             
0511+  144A 07 35 12    	call itoa				; convert bl to char in A
0512+  144D 2F          	mov bl, al				; save al
0513+  144E 19 00       	mov al, 0
0514+  1450 05 03       	syscall sys_io				; display AH
0515+  1452 24          	mov ah, bl				; retrieve al
0516+  1453 19 00       	mov al, 0
0517+  1455 05 03       	syscall sys_io				; display AL
0518+  1457             
0519+  1457 EA          	pop bl
0520+  1458 E4          	pop a
0521+  1459 09          	ret
0522+  145A             
0523+  145A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  145A             ; print 8bit decimal unsigned number
0525+  145A             ; input number in AL
0526+  145A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  145A             print_u8d:
0528+  145A D7          	push a
0529+  145B D8          	push b
0530+  145C             
0531+  145C 22 00       	mov ah, 0
0532+  145E 26 64 00    	mov b, 100
0533+  1461 AE          	div a, b
0534+  1462 D8          	push b			; save remainder
0535+  1463 B9 00       	cmp al, 0
0536+  1465 C6 6F 14    	je skip100
0537+  1468 6A 30       	add al, $30
0538+  146A 23          	mov ah, al
0539+  146B 19 00       	mov al, 0
0540+  146D 05 03       	syscall sys_io	; print coeff
0541+  146F             skip100:
0542+  146F E4          	pop a
0543+  1470 22 00       	mov ah, 0
0544+  1472 26 0A 00    	mov b, 10
0545+  1475 AE          	div a, b
0546+  1476 D8          	push b			; save remainder
0547+  1477 B9 00       	cmp al, 0
0548+  1479 C6 83 14    	je skip10
0549+  147C 6A 30       	add al, $30
0550+  147E 23          	mov ah, al
0551+  147F 19 00       	mov al, 0
0552+  1481 05 03       	syscall sys_io	; print coeff
0553+  1483             skip10:
0554+  1483 E4          	pop a
0555+  1484 1B          	mov al, bl
0556+  1485 6A 30       	add al, $30
0557+  1487 23          	mov ah, al
0558+  1488 19 00       	mov al, 0
0559+  148A 05 03       	syscall sys_io	; print coeff
0560+  148C E5          	pop b
0561+  148D E4          	pop a
0562+  148E 09          	ret
0563+  148F             
0564+  148F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  148F             ; INPUT 8BIT HEX INTEGER
0566+  148F             ; read 8bit integer into AL
0567+  148F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  148F             scan_u8x:
0569+  148F F8 04 00    	enter 4
0570+  1492 D8          	push b
0571+  1493 DA          	push d
0572+  1494             
0573+  1494 FA FD FF    	lea d, [bp + -3]
0574+  1497 07 75 12    	call gets				; get number
0575+  149A             
0576+  149A 32          	mov bl, [d]
0577+  149B 37          	mov bh, bl
0578+  149C 33 01 00    	mov bl, [d + 1]
0579+  149F 07 23 12    	call atoi				; convert to int in AL
0580+  14A2             
0581+  14A2 E7          	pop d
0582+  14A3 E5          	pop b
0583+  14A4 F9          	leave
0584+  14A5 09          	ret
0585+  14A6             
0586+  14A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  14A6             ; input decimal number
0588+  14A6             ; result in A
0589+  14A6             ; 655'\0'
0590+  14A6             ; low--------high
0591+  14A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  14A6             scan_u16d:
0593+  14A6 F8 08 00    	enter 8
0594+  14A9 E2          	push si
0595+  14AA D8          	push b
0596+  14AB D9          	push c
0597+  14AC DA          	push d
0598+  14AD FA F9 FF    	lea d, [bp +- 7]
0599+  14B0 07 75 12    	call gets
0600+  14B3 07 A3 11    	call strlen			; get string length in C
0601+  14B6 7E          	dec c
0602+  14B7 FD 4E       	mov si, d
0603+  14B9 12          	mov a, c
0604+  14BA FD 99       	shl a
0605+  14BC 3B 0B 12    	mov d, table_power
0606+  14BF 59          	add d, a
0607+  14C0 38 00 00    	mov c, 0
0608+  14C3             mul_loop:
0609+  14C3 F6          	lodsb			; load ASCII to al
0610+  14C4 B9 00       	cmp al, 0
0611+  14C6 C6 D9 14    	je mul_exit
0612+  14C9 6F 30       	sub al, $30		; make into integer
0613+  14CB 22 00       	mov ah, 0
0614+  14CD 2A          	mov b, [d]
0615+  14CE AC          	mul a, b			; result in B since it fits in 16bits
0616+  14CF 11          	mov a, b
0617+  14D0 28          	mov b, c
0618+  14D1 54          	add a, b
0619+  14D2 39          	mov c, a
0620+  14D3 63 02 00    	sub d, 2
0621+  14D6 0A C3 14    	jmp mul_loop
0622+  14D9             mul_exit:
0623+  14D9 12          	mov a, c
0624+  14DA E7          	pop d
0625+  14DB E6          	pop c
0626+  14DC E5          	pop b
0627+  14DD EF          	pop si
0628+  14DE F9          	leave
0629+  14DF 09          	ret
1015   14E0             ; --- END INCLUDE BLOCK
1016   14E0             
1017   14E0             
1018   14E0             .end
tasm: Number of errors = 0
