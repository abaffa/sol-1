0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 FD D7 C9 FF   push word -55
0011   0406 FD DB 41      push byte $41
0012   0409 FD DB FF      push byte $ff
0013   040C FD D7 42 00   push word $42
0014   0410 F9            leave
0015   0411 05 0B         syscall sys_terminate_proc
0016   0413             
0017   0413             _gets:
0018   0413 D2            push bp
0019   0414 9B            mov bp, sp
0020   0415             
0021   0415             ; --- BEGIN INLINE ASM BLOCK
0022   0415 17 05 00      mov a, [bp + 5]
0023   0418 3C            mov d, a
0024   0419 07 AF 06      call gets
0025   041C             ; --- END INLINE ASM BLOCK
0026   041C             
0027   041C F9            leave
0028   041D 09            ret
0029   041E             
0030   041E             _strlen:
0031   041E D2            push bp
0032   041F 9B            mov bp, sp
0033   0420 52 02 00      sub sp, 2 ; length
0034   0423 26 00 00      mov b, 0
0035   0426 D7            push a
0036   0427 11            mov a, b
0037   0428 45 FF FF      mov [bp + -1], a ; length
0038   042B E4            pop a
0039   042C             _while1_cond:
0040   042C FA 05 00      lea d, [bp + 5] ; str
0041   042F 2A            mov b, [d]
0042   0430 D7            push a
0043   0431 74            mov d, b
0044   0432 DA            push d
0045   0433 2C FF FF      mov b, [bp + -1] ; length
0046   0436 E7            pop d
0047   0437 10 01 00      mov a, 1
0048   043A AC            mul a, b
0049   043B 5A            add d, b
0050   043C E4            pop a
0051   043D 32            mov bl, [d]
0052   043E A7 00         mov bh, 0
0053   0440 D7            push a
0054   0441 11            mov a, b
0055   0442 26 00 00      mov b, 0
0056   0445 B0            cmp a, b
0057   0446 0E            lodflgs
0058   0447 87 01         and al, %00000001
0059   0449 8F 01         xor al, %00000001 ; !=
0060   044B 22 00         mov ah, 0
0061   044D 27            mov b, a
0062   044E E4            pop a
0063   044F C0 00 00      cmp b, 0
0064   0452 C6 67 04      je _while1_exit
0065   0455             _while1_block:
0066   0455 2C FF FF      mov b, [bp + -1] ; length
0067   0458 D7            push a
0068   0459 11            mov a, b
0069   045A FD 77         inc b
0070   045C D7            push a
0071   045D 11            mov a, b
0072   045E 45 FF FF      mov [bp + -1], a ; length
0073   0461 E4            pop a
0074   0462 27            mov b, a
0075   0463 E4            pop a
0076   0464 0A 2C 04      jmp _while1_cond
0077   0467             _while1_exit:
0078   0467 2C FF FF      mov b, [bp + -1] ; length
0079   046A F9            leave
0080   046B 09            ret
0081   046C             
0082   046C             print_num:
0083   046C D2            push bp
0084   046D 9B            mov bp, sp
0085   046E 52 05 00      sub sp, 5 ; digits
0086   0471 52 02 00      sub sp, 2 ; i
0087   0474 26 00 00      mov b, 0
0088   0477 D7            push a
0089   0478 11            mov a, b
0090   0479 45 FA FF      mov [bp + -6], a ; i
0091   047C E4            pop a
0092   047D             _if2_cond:
0093   047D 2C 05 00      mov b, [bp + 5] ; num
0094   0480 D7            push a
0095   0481 11            mov a, b
0096   0482 26 00 00      mov b, 0
0097   0485 B0            cmp a, b
0098   0486 0E            lodflgs
0099   0487 87 01         and al, %00000001 ; ==
0100   0489 22 00         mov ah, 0
0101   048B 27            mov b, a
0102   048C E4            pop a
0103   048D C0 00 00      cmp b, 0
0104   0490 C6 A2 04      je _if2_exit
0105   0493             _if2_true:
0106   0493 26 30 00      mov b, $30
0107   0496 DD            push bl
0108   0497 07 70 05      call _putchar
0109   049A 51 01 00      add sp, 1
0110   049D F9            leave
0111   049E 09            ret
0112   049F 0A A2 04      jmp _if2_exit
0113   04A2             _if2_exit:
0114   04A2             _while3_cond:
0115   04A2 2C 05 00      mov b, [bp + 5] ; num
0116   04A5 D7            push a
0117   04A6 11            mov a, b
0118   04A7 26 00 00      mov b, 0
0119   04AA B0            cmp a, b
0120   04AB 0E            lodflgs
0121   04AC 2F            mov bl, al
0122   04AD FD 78         mov g, a
0123   04AF FD A2 03      shr al, 3
0124   04B2 FD A4 02      shr bl, 2
0125   04B5 FD 87 01      and bl, %00000001
0126   04B8 90            xor al, bl
0127   04B9 FD 27         mov b, g
0128   04BB FD 87 01      and bl, %00000001
0129   04BE 8C            or al, bl
0130   04BF 8F 01         xor al, %00000001 ; > (signed)
0131   04C1 22 00         mov ah, 0
0132   04C3 27            mov b, a
0133   04C4 E4            pop a
0134   04C5 C0 00 00      cmp b, 0
0135   04C8 C6 18 05      je _while3_exit
0136   04CB             _while3_block:
0137   04CB FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0138   04CE 2D            mov b, d
0139   04CF D7            push a
0140   04D0 74            mov d, b
0141   04D1 DA            push d
0142   04D2 2C FA FF      mov b, [bp + -6] ; i
0143   04D5 E7            pop d
0144   04D6 10 01 00      mov a, 1
0145   04D9 AC            mul a, b
0146   04DA 5A            add d, b
0147   04DB E4            pop a
0148   04DC DA            push d
0149   04DD 26 30 00      mov b, $30
0150   04E0 D7            push a
0151   04E1 11            mov a, b
0152   04E2 2C 05 00      mov b, [bp + 5] ; num
0153   04E5 D7            push a
0154   04E6 11            mov a, b
0155   04E7 26 0A 00      mov b, 10
0156   04EA AE            div a, b
0157   04EB E4            pop a
0158   04EC 56            add b, a
0159   04ED E4            pop a
0160   04EE E7            pop d
0161   04EF FD 3E         mov [d], bl
0162   04F1 2C 05 00      mov b, [bp + 5] ; num
0163   04F4 D7            push a
0164   04F5 11            mov a, b
0165   04F6 26 0A 00      mov b, 10
0166   04F9 AE            div a, b
0167   04FA FD 78         mov g, a
0168   04FC 11            mov a, b
0169   04FD FD 27         mov b, g
0170   04FF E4            pop a
0171   0500 D7            push a
0172   0501 11            mov a, b
0173   0502 45 05 00      mov [bp + 5], a ; num
0174   0505 E4            pop a
0175   0506 2C FA FF      mov b, [bp + -6] ; i
0176   0509 D7            push a
0177   050A 11            mov a, b
0178   050B FD 77         inc b
0179   050D D7            push a
0180   050E 11            mov a, b
0181   050F 45 FA FF      mov [bp + -6], a ; i
0182   0512 E4            pop a
0183   0513 27            mov b, a
0184   0514 E4            pop a
0185   0515 0A A2 04      jmp _while3_cond
0186   0518             _while3_exit:
0187   0518             _while4_cond:
0188   0518 2C FA FF      mov b, [bp + -6] ; i
0189   051B D7            push a
0190   051C 11            mov a, b
0191   051D 26 00 00      mov b, 0
0192   0520 B0            cmp a, b
0193   0521 0E            lodflgs
0194   0522 2F            mov bl, al
0195   0523 FD 78         mov g, a
0196   0525 FD A2 03      shr al, 3
0197   0528 FD A4 02      shr bl, 2
0198   052B FD 87 01      and bl, %00000001
0199   052E 90            xor al, bl
0200   052F FD 27         mov b, g
0201   0531 FD 87 01      and bl, %00000001
0202   0534 8C            or al, bl
0203   0535 8F 01         xor al, %00000001 ; > (signed)
0204   0537 22 00         mov ah, 0
0205   0539 27            mov b, a
0206   053A E4            pop a
0207   053B C0 00 00      cmp b, 0
0208   053E C6 6E 05      je _while4_exit
0209   0541             _while4_block:
0210   0541 2C FA FF      mov b, [bp + -6] ; i
0211   0544 D7            push a
0212   0545 11            mov a, b
0213   0546 FD 7D         dec b
0214   0548 D7            push a
0215   0549 11            mov a, b
0216   054A 45 FA FF      mov [bp + -6], a ; i
0217   054D E4            pop a
0218   054E 27            mov b, a
0219   054F E4            pop a
0220   0550 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0221   0553 2D            mov b, d
0222   0554 D7            push a
0223   0555 74            mov d, b
0224   0556 DA            push d
0225   0557 2C FA FF      mov b, [bp + -6] ; i
0226   055A E7            pop d
0227   055B 10 01 00      mov a, 1
0228   055E AC            mul a, b
0229   055F 5A            add d, b
0230   0560 E4            pop a
0231   0561 32            mov bl, [d]
0232   0562 A7 00         mov bh, 0
0233   0564 DD            push bl
0234   0565 07 70 05      call _putchar
0235   0568 51 01 00      add sp, 1
0236   056B 0A 18 05      jmp _while4_cond
0237   056E             _while4_exit:
0238   056E F9            leave
0239   056F 09            ret
0240   0570             
0241   0570             _putchar:
0242   0570 D2            push bp
0243   0571 9B            mov bp, sp
0244   0572             
0245   0572             ; --- BEGIN INLINE ASM BLOCK
0246   0572 20 05 00      mov al, [bp + 5]
0247   0575 23            mov ah, al
0248   0576 07 A8 06      call putchar
0249   0579             ; --- END INLINE ASM BLOCK
0250   0579             
0251   0579 F9            leave
0252   057A 09            ret
0253   057B             
0254   057B             scann:
0255   057B D2            push bp
0256   057C 9B            mov bp, sp
0257   057D 52 02 00      sub sp, 2 ; m
0258   0580             
0259   0580             ; --- BEGIN INLINE ASM BLOCK
0260   0580 07 E0 08      call scan_u16d
0261   0583 45 FF FF      mov [bp + -1], a
0262   0586             ; --- END INLINE ASM BLOCK
0263   0586             
0264   0586 2C FF FF      mov b, [bp + -1] ; m
0265   0589 F9            leave
0266   058A 09            ret
0267   058B             
0268   058B             print:
0269   058B D2            push bp
0270   058C 9B            mov bp, sp
0271   058D             
0272   058D             ; --- BEGIN INLINE ASM BLOCK
0273   058D 17 05 00      mov a, [bp + 5]
0274   0590 3C            mov d, a
0275   0591 07 E2 07      call puts
0276   0594             ; --- END INLINE ASM BLOCK
0277   0594             
0278   0594 F9            leave
0279   0595 09            ret
0280   0596             ; --- END TEXT BLOCK
0281   0596             
0282   0596             ; --- BEGIN DATA BLOCK
0283   0596             ; --- END DATA BLOCK
0284   0596             
0285   0596             ; --- BEGIN INCLUDE BLOCK
0286   0596             .include "lib/stdio.asm"
0001+  0596             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0596             ; stdio.s
0003+  0596             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0596             .include "lib/string.asm"
0001++ 0596             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0596             ; string.s
0003++ 0596             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0596             
0005++ 0596             
0006++ 0596             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0596             ; strrev
0008++ 0596             ; reverse a string
0009++ 0596             ; D = string address
0010++ 0596             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0596             ; 01234
0012++ 0596             strrev:
0013++ 0596 4B          	pusha
0014++ 0597 07 DD 05    	call strlen	; length in C
0015++ 059A 12          	mov a, c
0016++ 059B AF 01 00    	cmp a, 1
0017++ 059E D0 B8 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 05A1 7D          	dec a
0019++ 05A2 FD 4E       	mov si, d	; beginning of string
0020++ 05A4 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 05A6 59          	add d, a	; end of string
0022++ 05A7 12          	mov a, c
0023++ 05A8 FD 9B       	shr a		; divide by 2
0024++ 05AA 39          	mov c, a	; C now counts the steps
0025++ 05AB             strrev_L0:
0026++ 05AB 32          	mov bl, [d]	; save load right-side char into BL
0027++ 05AC F6          	lodsb		; load left-side char into AL; increase SI
0028++ 05AD 3E          	mov [d], al	; store left char into right side
0029++ 05AE 1B          	mov al, bl
0030++ 05AF F7          	stosb		; store right-side char into left-side; increase DI
0031++ 05B0 7E          	dec c
0032++ 05B1 7F          	dec d
0033++ 05B2 C2 00 00    	cmp c, 0
0034++ 05B5 C7 AB 05    	jne strrev_L0
0035++ 05B8             strrev_end:
0036++ 05B8 4C          	popa
0037++ 05B9 09          	ret
0038++ 05BA             	
0039++ 05BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 05BA             ; strchr
0041++ 05BA             ; search string in D for char in AL
0042++ 05BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 05BA             strchr:
0044++ 05BA             strchr_L0:
0045++ 05BA 32          	mov bl, [d]
0046++ 05BB C1 00       	cmp bl, 0
0047++ 05BD C6 C8 05    	je strchr_end
0048++ 05C0 BA          	cmp al, bl
0049++ 05C1 C6 C8 05    	je strchr_end
0050++ 05C4 79          	inc d
0051++ 05C5 0A BA 05    	jmp strchr_L0
0052++ 05C8             strchr_end:
0053++ 05C8 1B          	mov al, bl
0054++ 05C9 09          	ret
0055++ 05CA             
0056++ 05CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 05CA             ; strstr
0058++ 05CA             ; find sub-string
0059++ 05CA             ; str1 in SI
0060++ 05CA             ; str2 in DI
0061++ 05CA             ; SI points to end of source string
0062++ 05CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 05CA             strstr:
0064++ 05CA DB          	push al
0065++ 05CB DA          	push d
0066++ 05CC E3          	push di
0067++ 05CD             strstr_loop:
0068++ 05CD F3          	cmpsb					; compare a byte of the strings
0069++ 05CE C7 D9 05    	jne strstr_ret
0070++ 05D1 FC 00 00    	lea d, [di + 0]
0071++ 05D4 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 05D6 C7 CD 05    	jne strstr_loop				; equal chars but not at end
0073++ 05D9             strstr_ret:
0074++ 05D9 F0          	pop di
0075++ 05DA E7          	pop d
0076++ 05DB E8          	pop al
0077++ 05DC 09          	ret
0078++ 05DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 05DD             ; length of null terminated string
0080++ 05DD             ; result in C
0081++ 05DD             ; pointer in D
0082++ 05DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 05DD             strlen:
0084++ 05DD DA          	push d
0085++ 05DE 38 00 00    	mov c, 0
0086++ 05E1             strlen_L1:
0087++ 05E1 BD 00       	cmp byte [d], 0
0088++ 05E3 C6 EB 05    	je strlen_ret
0089++ 05E6 79          	inc d
0090++ 05E7 78          	inc c
0091++ 05E8 0A E1 05    	jmp strlen_L1
0092++ 05EB             strlen_ret:
0093++ 05EB E7          	pop d
0094++ 05EC 09          	ret
0095++ 05ED             
0096++ 05ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 05ED             ; STRCMP
0098++ 05ED             ; compare two strings
0099++ 05ED             ; str1 in SI
0100++ 05ED             ; str2 in DI
0101++ 05ED             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 05ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 05ED             strcmp:
0104++ 05ED DB          	push al
0105++ 05EE DA          	push d
0106++ 05EF E3          	push di
0107++ 05F0 E2          	push si
0108++ 05F1             strcmp_loop:
0109++ 05F1 F3          	cmpsb					; compare a byte of the strings
0110++ 05F2 C7 FD 05    	jne strcmp_ret
0111++ 05F5 FB FF FF    	lea d, [si +- 1]
0112++ 05F8 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 05FA C7 F1 05    	jne strcmp_loop				; equal chars but not at end
0114++ 05FD             strcmp_ret:
0115++ 05FD EF          	pop si
0116++ 05FE F0          	pop di
0117++ 05FF E7          	pop d
0118++ 0600 E8          	pop al
0119++ 0601 09          	ret
0120++ 0602             
0121++ 0602             
0122++ 0602             ; STRCPY
0123++ 0602             ; copy null terminated string from SI to DI
0124++ 0602             ; source in SI
0125++ 0602             ; destination in DI
0126++ 0602             strcpy:
0127++ 0602 E2          	push si
0128++ 0603 E3          	push di
0129++ 0604 DB          	push al
0130++ 0605             strcpy_L1:
0131++ 0605 F6          	lodsb
0132++ 0606 F7          	stosb
0133++ 0607 B9 00       	cmp al, 0
0134++ 0609 C7 05 06    	jne strcpy_L1
0135++ 060C             strcpy_end:
0136++ 060C E8          	pop al
0137++ 060D F0          	pop di
0138++ 060E EF          	pop si
0139++ 060F 09          	ret
0140++ 0610             
0141++ 0610             ; STRCAT
0142++ 0610             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0610             ; source in SI
0144++ 0610             ; destination in DI
0145++ 0610             strcat:
0146++ 0610 E2          	push si
0147++ 0611 E3          	push di
0148++ 0612 D7          	push a
0149++ 0613 DA          	push d
0150++ 0614 50          	mov a, di
0151++ 0615 3C          	mov d, a
0152++ 0616             strcat_goto_end_L1:
0153++ 0616 BD 00       	cmp byte[d], 0
0154++ 0618 C6 1F 06    	je strcat_start
0155++ 061B 79          	inc d
0156++ 061C 0A 16 06    	jmp strcat_goto_end_L1
0157++ 061F             strcat_start:
0158++ 061F FD 50       	mov di, d
0159++ 0621             strcat_L1:
0160++ 0621 F6          	lodsb
0161++ 0622 F7          	stosb
0162++ 0623 B9 00       	cmp al, 0
0163++ 0625 C7 21 06    	jne strcat_L1
0164++ 0628             strcat_end:
0165++ 0628 E7          	pop d
0166++ 0629 E4          	pop a
0167++ 062A F0          	pop di
0168++ 062B EF          	pop si
0169++ 062C 09          	ret
0005+  062D             
0006+  062D 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0631 34 35 36 37 
0006+  0635 38 39 41 42 
0006+  0639 43 44 45 46 
0007+  063D 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0641 1B 5B 48 00 
0008+  0645             
0009+  0645 01 00       table_power:.dw 1
0010+  0647 0A 00       			.dw 10
0011+  0649 64 00       			.dw 100
0012+  064B E8 03       			.dw 1000
0013+  064D 10 27       			.dw 10000
0014+  064F             
0015+  064F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  064F             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  064F             ; ASCII in BL
0018+  064F             ; result in AL
0019+  064F             ; ascii for F = 0100 0110
0020+  064F             ; ascii for 9 = 0011 1001
0021+  064F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  064F             hex_ascii_encode:
0023+  064F 1B          	mov al, bl
0024+  0650 93 40       	test al, $40				; test if letter or number
0025+  0652 C7 58 06    	jnz hex_letter
0026+  0655 87 0F       	and al, $0F				; get number
0027+  0657 09          	ret
0028+  0658             hex_letter:
0029+  0658 87 0F       	and al, $0F				; get letter
0030+  065A 6A 09       	add al, 9
0031+  065C 09          	ret
0032+  065D             
0033+  065D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  065D             ; ATOI
0035+  065D             ; 2 letter hex string in B
0036+  065D             ; 8bit integer returned in AL
0037+  065D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  065D             atoi:
0039+  065D D8          	push b
0040+  065E 07 4F 06    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0661 30          	mov bl, bh
0042+  0662 DB          	push al					; save a
0043+  0663 07 4F 06    	call hex_ascii_encode
0044+  0666 EA          	pop bl	
0045+  0667 FD 9E 04    	shl al, 4
0046+  066A 8C          	or al, bl
0047+  066B E5          	pop b
0048+  066C 09          	ret	
0049+  066D             
0050+  066D             
0051+  066D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  066D             ; printf
0053+  066D             ; no need for explanations!
0054+  066D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  066D             printf:
0056+  066D 09          	ret
0057+  066E             
0058+  066E             
0059+  066E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  066E             ; scanf
0061+  066E             ; no need for explanations!
0062+  066E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  066E             scanf:
0064+  066E 09          	ret
0065+  066F             
0066+  066F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  066F             ; ITOA
0068+  066F             ; 8bit value in BL
0069+  066F             ; 2 byte ASCII result in A
0070+  066F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  066F             itoa:
0072+  066F DA          	push d
0073+  0670 D8          	push b
0074+  0671 A7 00       	mov bh, 0
0075+  0673 FD A4 04    	shr bl, 4	
0076+  0676 74          	mov d, b
0077+  0677 1F 2D 06    	mov al, [d + s_hex_digits]
0078+  067A 23          	mov ah, al
0079+  067B             	
0080+  067B E5          	pop b
0081+  067C D8          	push b
0082+  067D A7 00       	mov bh, 0
0083+  067F FD 87 0F    	and bl, $0F
0084+  0682 74          	mov d, b
0085+  0683 1F 2D 06    	mov al, [d + s_hex_digits]
0086+  0686 E5          	pop b
0087+  0687 E7          	pop d
0088+  0688 09          	ret
0089+  0689             
0090+  0689             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0689             ; HEX STRING TO BINARY
0092+  0689             ; di = destination address
0093+  0689             ; si = source
0094+  0689             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0689             hex_to_int:
0096+  0689             hex_to_int_L1:
0097+  0689 F6          	lodsb					; load from [SI] to AL
0098+  068A B9 00       	cmp al, 0				; check if ASCII 0
0099+  068C C6 99 06    	jz hex_to_int_ret
0100+  068F 36          	mov bh, al
0101+  0690 F6          	lodsb
0102+  0691 2F          	mov bl, al
0103+  0692 07 5D 06    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0695 F7          	stosb					; store AL to [DI]
0105+  0696 0A 89 06    	jmp hex_to_int_L1
0106+  0699             hex_to_int_ret:
0107+  0699 09          	ret		
0108+  069A             
0109+  069A             
0110+  069A             
0111+  069A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  069A             ; GETCHAR
0113+  069A             ; char in ah
0114+  069A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  069A             getchar:
0116+  069A DB          	push al
0117+  069B             getchar_retry:
0118+  069B FD 0C       	sti
0119+  069D 19 01       	mov al, 1
0120+  069F 05 03       	syscall sys_io			; receive in AH
0121+  06A1 B9 00       	cmp al, 0			; check if any char was receive
0122+  06A3 C6 9B 06    	je getchar_retry
0123+  06A6 E8          	pop al
0124+  06A7 09          	ret
0125+  06A8             
0126+  06A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  06A8             ; PUTCHAR
0128+  06A8             ; char in ah
0129+  06A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  06A8             putchar:
0131+  06A8 D7          	push a
0132+  06A9 19 00       	mov al, 0
0133+  06AB 05 03       	syscall sys_io			; char in AH
0134+  06AD E4          	pop a
0135+  06AE 09          	ret
0136+  06AF             
0137+  06AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  06AF             ;; INPUT A STRING
0139+  06AF             ;; terminates with null
0140+  06AF             ;; pointer in D
0141+  06AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  06AF             gets:
0143+  06AF D7          	push a
0144+  06B0 DA          	push d
0145+  06B1             gets_loop:
0146+  06B1 FD 0C       	sti
0147+  06B3 19 01       	mov al, 1
0148+  06B5 05 03       	syscall sys_io			; receive in AH
0149+  06B7 B9 00       	cmp al, 0				; check error code (AL)
0150+  06B9 C6 B1 06    	je gets_loop			; if no char received, retry
0151+  06BC             
0152+  06BC 76 1B       	cmp ah, 27
0153+  06BE C6 DF 06    	je gets_telnet_escape
0154+  06C1 76 0A       	cmp ah, $0A				; LF
0155+  06C3 C6 38 07    	je gets_end
0156+  06C6 76 0D       	cmp ah, $0D				; CR
0157+  06C8 C6 38 07    	je gets_end
0158+  06CB 76 5C       	cmp ah, $5C				; '\\'
0159+  06CD C6 0F 07    	je gets_escape
0160+  06D0             	
0161+  06D0 76 08       	cmp ah, $08			; check for backspace
0162+  06D2 C6 DB 06    	je gets_backspace
0163+  06D5             
0164+  06D5 1A          	mov al, ah
0165+  06D6 3E          	mov [d], al
0166+  06D7 79          	inc d
0167+  06D8 0A B1 06    	jmp gets_loop
0168+  06DB             gets_backspace:
0169+  06DB 7F          	dec d
0170+  06DC 0A B1 06    	jmp gets_loop
0171+  06DF             gets_telnet_escape:
0172+  06DF FD 0C       	sti
0173+  06E1 19 01       	mov al, 1
0174+  06E3 05 03       	syscall sys_io				; receive in AH without echo
0175+  06E5 B9 00       	cmp al, 0					; check error code (AL)
0176+  06E7 C6 DF 06    	je gets_telnet_escape		; if no char received, retry
0177+  06EA 76 5B       	cmp ah, '['
0178+  06EC C7 B1 06    	jne gets_loop
0179+  06EF             gets_telnet_escape_phase2:
0180+  06EF FD 0C       	sti
0181+  06F1 19 01       	mov al, 1
0182+  06F3 05 03       	syscall sys_io					; receive in AH without echo
0183+  06F5 B9 00       	cmp al, 0						; check error code (AL)
0184+  06F7 C6 EF 06    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  06FA 76 44       	cmp ah, 'D'
0186+  06FC C6 07 07    	je gets_left_arrow
0187+  06FF 76 43       	cmp ah, 'C'
0188+  0701 C6 0B 07    	je gets_right_arrow
0189+  0704 0A B1 06    	jmp gets_loop
0190+  0707             gets_left_arrow:
0191+  0707 7F          	dec d
0192+  0708 0A B1 06    	jmp gets_loop
0193+  070B             gets_right_arrow:
0194+  070B 79          	inc d
0195+  070C 0A B1 06    	jmp gets_loop
0196+  070F             gets_escape:
0197+  070F FD 0C       	sti
0198+  0711 19 01       	mov al, 1
0199+  0713 05 03       	syscall sys_io			; receive in AH
0200+  0715 B9 00       	cmp al, 0				; check error code (AL)
0201+  0717 C6 0F 07    	je gets_escape			; if no char received, retry
0202+  071A 76 6E       	cmp ah, 'n'
0203+  071C C6 2A 07    	je gets_LF
0204+  071F 76 72       	cmp ah, 'r'
0205+  0721 C6 31 07    	je gets_CR
0206+  0724 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0725 3E          	mov [d], al
0208+  0726 79          	inc d
0209+  0727 0A B1 06    	jmp gets_loop
0210+  072A             gets_LF:
0211+  072A 19 0A       	mov al, $0A
0212+  072C 3E          	mov [d], al
0213+  072D 79          	inc d
0214+  072E 0A B1 06    	jmp gets_loop
0215+  0731             gets_CR:
0216+  0731 19 0D       	mov al, $0D
0217+  0733 3E          	mov [d], al
0218+  0734 79          	inc d
0219+  0735 0A B1 06    	jmp gets_loop
0220+  0738             gets_end:
0221+  0738 19 00       	mov al, 0
0222+  073A 3E          	mov [d], al				; terminate string
0223+  073B E7          	pop d
0224+  073C E4          	pop a
0225+  073D 09          	ret
0226+  073E             
0227+  073E             
0228+  073E             
0229+  073E             
0230+  073E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  073E             ;; INPUT TEXT
0232+  073E             ;; terminated with CTRL+D
0233+  073E             ;; pointer in D
0234+  073E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  073E             gettxt:
0236+  073E D7          	push a
0237+  073F DA          	push d
0238+  0740             gettxt_loop:
0239+  0740 19 01       	mov al, 1
0240+  0742 05 03       	syscall sys_io			; receive in AH
0241+  0744 B9 00       	cmp al, 0				; check error code (AL)
0242+  0746 C6 40 07    	je gettxt_loop		; if no char received, retry
0243+  0749 76 04       	cmp ah, 4			; EOT
0244+  074B C6 89 07    	je gettxt_end
0245+  074E 76 08       	cmp ah, $08			; check for backspace
0246+  0750 C6 85 07    	je gettxt_backspace
0247+  0753 76 5C       	cmp ah, $5C				; '\\'
0248+  0755 C6 5E 07    	je gettxt_escape
0249+  0758 1A          	mov al, ah
0250+  0759 3E          	mov [d], al
0251+  075A 79          	inc d
0252+  075B 0A 40 07    	jmp gettxt_loop
0253+  075E             gettxt_escape:
0254+  075E 19 01       	mov al, 1
0255+  0760 05 03       	syscall sys_io			; receive in AH
0256+  0762 B9 00       	cmp al, 0				; check error code (AL)
0257+  0764 C6 5E 07    	je gettxt_escape		; if no char received, retry
0258+  0767 76 6E       	cmp ah, 'n'
0259+  0769 C6 77 07    	je gettxt_LF
0260+  076C 76 72       	cmp ah, 'r'
0261+  076E C6 7E 07    	je gettxt_CR
0262+  0771 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0772 3E          	mov [d], al
0264+  0773 79          	inc d
0265+  0774 0A 40 07    	jmp gettxt_loop
0266+  0777             gettxt_LF:
0267+  0777 19 0A       	mov al, $0A
0268+  0779 3E          	mov [d], al
0269+  077A 79          	inc d
0270+  077B 0A 40 07    	jmp gettxt_loop
0271+  077E             gettxt_CR:
0272+  077E 19 0D       	mov al, $0D
0273+  0780 3E          	mov [d], al
0274+  0781 79          	inc d
0275+  0782 0A 40 07    	jmp gettxt_loop
0276+  0785             gettxt_backspace:
0277+  0785 7F          	dec d
0278+  0786 0A 40 07    	jmp gettxt_loop
0279+  0789             gettxt_end:
0280+  0789 19 00       	mov al, 0
0281+  078B 3E          	mov [d], al				; terminate string
0282+  078C E7          	pop d
0283+  078D E4          	pop a
0284+  078E 09          	ret
0285+  078F             
0286+  078F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  078F             ; PRINT NEW LINE
0288+  078F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  078F             printnl:
0290+  078F D7          	push a
0291+  0790 10 00 0A    	mov a, $0A00
0292+  0793 05 03       	syscall sys_io
0293+  0795 10 00 0D    	mov a, $0D00
0294+  0798 05 03       	syscall sys_io
0295+  079A E4          	pop a
0296+  079B 09          	ret
0297+  079C             
0298+  079C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  079C             ; strtoint
0300+  079C             ; 4 digit hex string number in d
0301+  079C             ; integer returned in A
0302+  079C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  079C             strtointx:
0304+  079C D8          	push b
0305+  079D 32          	mov bl, [d]
0306+  079E 37          	mov bh, bl
0307+  079F 33 01 00    	mov bl, [d + 1]
0308+  07A2 07 5D 06    	call atoi				; convert to int in AL
0309+  07A5 23          	mov ah, al				; move to AH
0310+  07A6 33 02 00    	mov bl, [d + 2]
0311+  07A9 37          	mov bh, bl
0312+  07AA 33 03 00    	mov bl, [d + 3]
0313+  07AD 07 5D 06    	call atoi				; convert to int in AL
0314+  07B0 E5          	pop b
0315+  07B1 09          	ret
0316+  07B2             
0317+  07B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  07B2             ; strtoint
0319+  07B2             ; 5 digit base10 string number in d
0320+  07B2             ; integer returned in A
0321+  07B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  07B2             strtoint:
0323+  07B2 E2          	push si
0324+  07B3 D8          	push b
0325+  07B4 D9          	push c
0326+  07B5 DA          	push d
0327+  07B6 07 DD 05    	call strlen			; get string length in C
0328+  07B9 7E          	dec c
0329+  07BA FD 4E       	mov si, d
0330+  07BC 12          	mov a, c
0331+  07BD FD 99       	shl a
0332+  07BF 3B 45 06    	mov d, table_power
0333+  07C2 59          	add d, a
0334+  07C3 38 00 00    	mov c, 0
0335+  07C6             strtoint_L0:
0336+  07C6 F6          	lodsb			; load ASCII to al
0337+  07C7 B9 00       	cmp al, 0
0338+  07C9 C6 DC 07    	je strtoint_end
0339+  07CC 6F 30       	sub al, $30		; make into integer
0340+  07CE 22 00       	mov ah, 0
0341+  07D0 2A          	mov b, [d]
0342+  07D1 AC          	mul a, b			; result in B since it fits in 16bits
0343+  07D2 11          	mov a, b
0344+  07D3 28          	mov b, c
0345+  07D4 54          	add a, b
0346+  07D5 39          	mov c, a
0347+  07D6 63 02 00    	sub d, 2
0348+  07D9 0A C6 07    	jmp strtoint_L0
0349+  07DC             strtoint_end:
0350+  07DC 12          	mov a, c
0351+  07DD E7          	pop d
0352+  07DE E6          	pop c
0353+  07DF E5          	pop b
0354+  07E0 EF          	pop si
0355+  07E1 09          	ret
0356+  07E2             
0357+  07E2             
0358+  07E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  07E2             ; PRINT NULL TERMINATED STRING
0360+  07E2             ; pointer in D
0361+  07E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  07E2             puts:
0363+  07E2 D7          	push a
0364+  07E3 DA          	push d
0365+  07E4             puts_L1:
0366+  07E4 1E          	mov al, [d]
0367+  07E5 B9 00       	cmp al, 0
0368+  07E7 C6 F3 07    	jz puts_END
0369+  07EA 23          	mov ah, al
0370+  07EB 19 00       	mov al, 0
0371+  07ED 05 03       	syscall sys_io
0372+  07EF 79          	inc d
0373+  07F0 0A E4 07    	jmp puts_L1
0374+  07F3             puts_END:
0375+  07F3 E7          	pop d
0376+  07F4 E4          	pop a
0377+  07F5 09          	ret
0378+  07F6             
0379+  07F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  07F6             ; PRINT N SIZE STRING
0381+  07F6             ; pointer in D
0382+  07F6             ; size in C
0383+  07F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  07F6             putsn:
0385+  07F6 DB          	push al
0386+  07F7 DA          	push d
0387+  07F8 D9          	push c
0388+  07F9             putsn_L0:
0389+  07F9 1E          	mov al, [d]
0390+  07FA 23          	mov ah, al
0391+  07FB 19 00       	mov al, 0
0392+  07FD 05 03       	syscall sys_io
0393+  07FF 79          	inc d
0394+  0800 7E          	dec c	
0395+  0801 C2 00 00    	cmp c, 0
0396+  0804 C7 F9 07    	jne putsn_L0
0397+  0807             putsn_end:
0398+  0807 E6          	pop c
0399+  0808 E7          	pop d
0400+  0809 E8          	pop al
0401+  080A 09          	ret
0402+  080B             
0403+  080B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  080B             ; print 16bit decimal number
0405+  080B             ; input number in A
0406+  080B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  080B             print_u16d:
0408+  080B D7          	push a
0409+  080C D8          	push b
0410+  080D 26 10 27    	mov b, 10000
0411+  0810 AE          	div a, b			; get 10000 coeff.
0412+  0811 07 37 08    	call print_number
0413+  0814 11          	mov a, b
0414+  0815 26 E8 03    	mov b, 1000
0415+  0818 AE          	div a, b			; get 10000 coeff.
0416+  0819 07 37 08    	call print_number
0417+  081C 11          	mov a, b
0418+  081D 26 64 00    	mov b, 100
0419+  0820 AE          	div a, b
0420+  0821 07 37 08    	call print_number
0421+  0824 11          	mov a, b
0422+  0825 26 0A 00    	mov b, 10
0423+  0828 AE          	div a, b
0424+  0829 07 37 08    	call print_number
0425+  082C 11          	mov a, b
0426+  082D 6A 30       	add al, $30
0427+  082F 23          	mov ah, al
0428+  0830 19 00       	mov al, 0
0429+  0832 05 03       	syscall sys_io	; print coeff
0430+  0834 E5          	pop b
0431+  0835 E4          	pop a
0432+  0836 09          	ret
0433+  0837             
0434+  0837             
0435+  0837             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0837             ; if A == 0, print space
0437+  0837             ; else print A
0438+  0837             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  0837             print_number:
0440+  0837 6A 30       	add al, $30
0441+  0839 23          	mov ah, al
0442+  083A 07 A8 06    	call putchar
0443+  083D 09          	ret
0444+  083E             
0445+  083E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  083E             ; PRINT 16BIT HEX INTEGER
0447+  083E             ; integer value in reg B
0448+  083E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  083E             print_u16x:
0450+  083E D7          	push a
0451+  083F D8          	push b
0452+  0840 DD          	push bl
0453+  0841 30          	mov bl, bh
0454+  0842 07 6F 06    	call itoa				; convert bh to char in A
0455+  0845 2F          	mov bl, al				; save al
0456+  0846 19 00       	mov al, 0
0457+  0848 05 03       	syscall sys_io				; display AH
0458+  084A 24          	mov ah, bl				; retrieve al
0459+  084B 19 00       	mov al, 0
0460+  084D 05 03       	syscall sys_io				; display AL
0461+  084F             
0462+  084F EA          	pop bl
0463+  0850 07 6F 06    	call itoa				; convert bh to char in A
0464+  0853 2F          	mov bl, al				; save al
0465+  0854 19 00       	mov al, 0
0466+  0856 05 03       	syscall sys_io				; display AH
0467+  0858 24          	mov ah, bl				; retrieve al
0468+  0859 19 00       	mov al, 0
0469+  085B 05 03       	syscall sys_io				; display AL
0470+  085D             
0471+  085D E5          	pop b
0472+  085E E4          	pop a
0473+  085F 09          	ret
0474+  0860             
0475+  0860             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0860             ; INPUT 16BIT HEX INTEGER
0477+  0860             ; read 16bit integer into A
0478+  0860             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0860             scan_u16x:
0480+  0860 F8 10 00    	enter 16
0481+  0863 D8          	push b
0482+  0864 DA          	push d
0483+  0865             
0484+  0865 FA F1 FF    	lea d, [bp + -15]
0485+  0868 07 AF 06    	call gets				; get number
0486+  086B             
0487+  086B 32          	mov bl, [d]
0488+  086C 37          	mov bh, bl
0489+  086D 33 01 00    	mov bl, [d + 1]
0490+  0870 07 5D 06    	call atoi				; convert to int in AL
0491+  0873 23          	mov ah, al				; move to AH
0492+  0874             
0493+  0874 33 02 00    	mov bl, [d + 2]
0494+  0877 37          	mov bh, bl
0495+  0878 33 03 00    	mov bl, [d + 3]
0496+  087B 07 5D 06    	call atoi				; convert to int in AL
0497+  087E             
0498+  087E E7          	pop d
0499+  087F E5          	pop b
0500+  0880 F9          	leave
0501+  0881 09          	ret
0502+  0882             
0503+  0882             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0882             ; PRINT 8bit HEX INTEGER
0505+  0882             ; integer value in reg bl
0506+  0882             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0882             print_u8x:
0508+  0882 D7          	push a
0509+  0883 DD          	push bl
0510+  0884             
0511+  0884 07 6F 06    	call itoa				; convert bl to char in A
0512+  0887 2F          	mov bl, al				; save al
0513+  0888 19 00       	mov al, 0
0514+  088A 05 03       	syscall sys_io				; display AH
0515+  088C 24          	mov ah, bl				; retrieve al
0516+  088D 19 00       	mov al, 0
0517+  088F 05 03       	syscall sys_io				; display AL
0518+  0891             
0519+  0891 EA          	pop bl
0520+  0892 E4          	pop a
0521+  0893 09          	ret
0522+  0894             
0523+  0894             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0894             ; print 8bit decimal unsigned number
0525+  0894             ; input number in AL
0526+  0894             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0894             print_u8d:
0528+  0894 D7          	push a
0529+  0895 D8          	push b
0530+  0896             
0531+  0896 22 00       	mov ah, 0
0532+  0898 26 64 00    	mov b, 100
0533+  089B AE          	div a, b
0534+  089C D8          	push b			; save remainder
0535+  089D B9 00       	cmp al, 0
0536+  089F C6 A9 08    	je skip100
0537+  08A2 6A 30       	add al, $30
0538+  08A4 23          	mov ah, al
0539+  08A5 19 00       	mov al, 0
0540+  08A7 05 03       	syscall sys_io	; print coeff
0541+  08A9             skip100:
0542+  08A9 E4          	pop a
0543+  08AA 22 00       	mov ah, 0
0544+  08AC 26 0A 00    	mov b, 10
0545+  08AF AE          	div a, b
0546+  08B0 D8          	push b			; save remainder
0547+  08B1 B9 00       	cmp al, 0
0548+  08B3 C6 BD 08    	je skip10
0549+  08B6 6A 30       	add al, $30
0550+  08B8 23          	mov ah, al
0551+  08B9 19 00       	mov al, 0
0552+  08BB 05 03       	syscall sys_io	; print coeff
0553+  08BD             skip10:
0554+  08BD E4          	pop a
0555+  08BE 1B          	mov al, bl
0556+  08BF 6A 30       	add al, $30
0557+  08C1 23          	mov ah, al
0558+  08C2 19 00       	mov al, 0
0559+  08C4 05 03       	syscall sys_io	; print coeff
0560+  08C6 E5          	pop b
0561+  08C7 E4          	pop a
0562+  08C8 09          	ret
0563+  08C9             
0564+  08C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  08C9             ; INPUT 8BIT HEX INTEGER
0566+  08C9             ; read 8bit integer into AL
0567+  08C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  08C9             scan_u8x:
0569+  08C9 F8 04 00    	enter 4
0570+  08CC D8          	push b
0571+  08CD DA          	push d
0572+  08CE             
0573+  08CE FA FD FF    	lea d, [bp + -3]
0574+  08D1 07 AF 06    	call gets				; get number
0575+  08D4             
0576+  08D4 32          	mov bl, [d]
0577+  08D5 37          	mov bh, bl
0578+  08D6 33 01 00    	mov bl, [d + 1]
0579+  08D9 07 5D 06    	call atoi				; convert to int in AL
0580+  08DC             
0581+  08DC E7          	pop d
0582+  08DD E5          	pop b
0583+  08DE F9          	leave
0584+  08DF 09          	ret
0585+  08E0             
0586+  08E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  08E0             ; input decimal number
0588+  08E0             ; result in A
0589+  08E0             ; 655'\0'
0590+  08E0             ; low--------high
0591+  08E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  08E0             scan_u16d:
0593+  08E0 F8 08 00    	enter 8
0594+  08E3 E2          	push si
0595+  08E4 D8          	push b
0596+  08E5 D9          	push c
0597+  08E6 DA          	push d
0598+  08E7 FA F9 FF    	lea d, [bp +- 7]
0599+  08EA 07 AF 06    	call gets
0600+  08ED 07 DD 05    	call strlen			; get string length in C
0601+  08F0 7E          	dec c
0602+  08F1 FD 4E       	mov si, d
0603+  08F3 12          	mov a, c
0604+  08F4 FD 99       	shl a
0605+  08F6 3B 45 06    	mov d, table_power
0606+  08F9 59          	add d, a
0607+  08FA 38 00 00    	mov c, 0
0608+  08FD             mul_loop:
0609+  08FD F6          	lodsb			; load ASCII to al
0610+  08FE B9 00       	cmp al, 0
0611+  0900 C6 13 09    	je mul_exit
0612+  0903 6F 30       	sub al, $30		; make into integer
0613+  0905 22 00       	mov ah, 0
0614+  0907 2A          	mov b, [d]
0615+  0908 AC          	mul a, b			; result in B since it fits in 16bits
0616+  0909 11          	mov a, b
0617+  090A 28          	mov b, c
0618+  090B 54          	add a, b
0619+  090C 39          	mov c, a
0620+  090D 63 02 00    	sub d, 2
0621+  0910 0A FD 08    	jmp mul_loop
0622+  0913             mul_exit:
0623+  0913 12          	mov a, c
0624+  0914 E7          	pop d
0625+  0915 E6          	pop c
0626+  0916 E5          	pop b
0627+  0917 EF          	pop si
0628+  0918 F9          	leave
0629+  0919 09          	ret
0287   091A             ; --- END INCLUDE BLOCK
0288   091A             
0289   091A             
0290   091A             .end
tasm: Number of errors = 0
