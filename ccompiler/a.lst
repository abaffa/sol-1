0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 52 01 00      sub sp, 1 ; c
0012   0408 2C FF FF      mov b, [bp + -1] ; i
0013   040B D7            push a
0014   040C 11            mov a, b
0015   040D 34 FE FF      mov bl, [bp + -2] ; c
0016   0410 A7 00         mov bh, 0
0017   0412 54            add a, b
0018   0413 27            mov b, a
0019   0414 E4            pop a
0020   0415 26 00 00      mov b, 0
0021   0418 F9            leave
0022   0419 05 0B         syscall sys_terminate_proc
0023   041B             
0024   041B             print_num:
0025   041B D2            push bp
0026   041C 9B            mov bp, sp
0027   041D 52 05 00      sub sp, 5 ; digits
0028   0420 52 02 00      sub sp, 2 ; i
0029   0423 26 00 00      mov b, 0
0030   0426 D7            push a
0031   0427 11            mov a, b
0032   0428 45 FA FF      mov [bp + -6], a ; i
0033   042B E4            pop a
0034   042C             _while1_cond:
0035   042C 2C 05 00      mov b, [bp + 5] ; num
0036   042F D7            push a
0037   0430 11            mov a, b
0038   0431 26 00 00      mov b, 0
0039   0434 B0            cmp a, b
0040   0435 0E            lodflgs
0041   0436 87 03         and al, %00000011
0042   0438 B9 00         cmp al, 0
0043   043A 0E            lodflgs
0044   043B 22 00         mov ah, 0
0045   043D 27            mov b, a
0046   043E E4            pop a
0047   043F C0 00 00      cmp b, 0
0048   0442 C6 93 04      je _while1_exit
0049   0445             _while1_block:
0050   0445 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0051   0448 2D            mov b, d
0052   0449 D7            push a
0053   044A 74            mov d, b
0054   044B DA            push d
0055   044C 2C FA FF      mov b, [bp + -6] ; i
0056   044F E7            pop d
0057   0450 10 01 00      mov a, 1
0058   0453 AC            mul a, b
0059   0454 5A            add d, b
0060   0455 E4            pop a
0061   0456 DA            push d
0062   0457 26 30 00      mov b, '0'
0063   045A D7            push a
0064   045B 11            mov a, b
0065   045C 2C 05 00      mov b, [bp + 5] ; num
0066   045F D7            push a
0067   0460 11            mov a, b
0068   0461 26 0A 00      mov b, 10
0069   0464 AE            div a, b
0070   0465 E4            pop a
0071   0466 54            add a, b
0072   0467 27            mov b, a
0073   0468 E4            pop a
0074   0469 E7            pop d
0075   046A FD 3E         mov [d], bl
0076   046C 2C 05 00      mov b, [bp + 5] ; num
0077   046F D7            push a
0078   0470 11            mov a, b
0079   0471 26 0A 00      mov b, 10
0080   0474 AE            div a, b
0081   0475 FD 78         mov g, a
0082   0477 11            mov a, b
0083   0478 FD 27         mov b, g
0084   047A E4            pop a
0085   047B D7            push a
0086   047C 11            mov a, b
0087   047D 45 05 00      mov [bp + 5], a ; num
0088   0480 E4            pop a
0089   0481 2C FA FF      mov b, [bp + -6] ; i
0090   0484 D7            push a
0091   0485 11            mov a, b
0092   0486 FD 77         inc b
0093   0488 D7            push a
0094   0489 11            mov a, b
0095   048A 45 FA FF      mov [bp + -6], a ; i
0096   048D E4            pop a
0097   048E 27            mov b, a
0098   048F E4            pop a
0099   0490 0A 2C 04      jmp _while1_cond
0100   0493             _while1_exit:
0101   0493             _while2_cond:
0102   0493 2C FA FF      mov b, [bp + -6] ; i
0103   0496 D7            push a
0104   0497 11            mov a, b
0105   0498 26 00 00      mov b, 0
0106   049B B0            cmp a, b
0107   049C 0E            lodflgs
0108   049D 87 03         and al, %00000011
0109   049F B9 00         cmp al, 0
0110   04A1 0E            lodflgs
0111   04A2 22 00         mov ah, 0
0112   04A4 27            mov b, a
0113   04A5 E4            pop a
0114   04A6 C0 00 00      cmp b, 0
0115   04A9 C6 D9 04      je _while2_exit
0116   04AC             _while2_block:
0117   04AC 2C FA FF      mov b, [bp + -6] ; i
0118   04AF D7            push a
0119   04B0 11            mov a, b
0120   04B1 FD 7D         dec b
0121   04B3 D7            push a
0122   04B4 11            mov a, b
0123   04B5 45 FA FF      mov [bp + -6], a ; i
0124   04B8 E4            pop a
0125   04B9 27            mov b, a
0126   04BA E4            pop a
0127   04BB FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0128   04BE 2D            mov b, d
0129   04BF D7            push a
0130   04C0 74            mov d, b
0131   04C1 DA            push d
0132   04C2 2C FA FF      mov b, [bp + -6] ; i
0133   04C5 E7            pop d
0134   04C6 10 01 00      mov a, 1
0135   04C9 AC            mul a, b
0136   04CA 5A            add d, b
0137   04CB E4            pop a
0138   04CC 32            mov bl, [d]
0139   04CD A7 00         mov bh, 0
0140   04CF DD            push bl
0141   04D0 07 DB 04      call _putchar
0142   04D3 51 01 00      add sp, 1
0143   04D6 0A 93 04      jmp _while2_cond
0144   04D9             _while2_exit:
0145   04D9 F9            leave
0146   04DA 09            ret
0147   04DB             
0148   04DB             _putchar:
0149   04DB D2            push bp
0150   04DC 9B            mov bp, sp
0151   04DD             
0152   04DD             ; --- BEGIN INLINE ASM BLOCK
0153   04DD 20 05 00      mov al, [bp + 5]
0154   04E0 23            mov ah, al
0155   04E1 07 1D 06      call putchar
0156   04E4             ; --- END INLINE ASM BLOCK
0157   04E4             
0158   04E4 F9            leave
0159   04E5 09            ret
0160   04E6             
0161   04E6             scann:
0162   04E6 D2            push bp
0163   04E7 9B            mov bp, sp
0164   04E8 52 02 00      sub sp, 2 ; m
0165   04EB             
0166   04EB             ; --- BEGIN INLINE ASM BLOCK
0167   04EB 07 55 08      call scan_u16d
0168   04EE 45 FF FF      mov [bp + -1], a
0169   04F1             ; --- END INLINE ASM BLOCK
0170   04F1             
0171   04F1 FA 05 00      lea d, [bp + 5] ; n
0172   04F4 2A            mov b, [d]
0173   04F5 D8            push b
0174   04F6 2C FF FF      mov b, [bp + -1] ; m
0175   04F9 E7            pop d
0176   04FA D7            push a
0177   04FB 11            mov a, b
0178   04FC 43            mov [d], a
0179   04FD E4            pop a
0180   04FE F9            leave
0181   04FF 09            ret
0182   0500             
0183   0500             print:
0184   0500 D2            push bp
0185   0501 9B            mov bp, sp
0186   0502             
0187   0502             ; --- BEGIN INLINE ASM BLOCK
0188   0502 17 05 00      mov a, [bp + 5]
0189   0505 3C            mov d, a
0190   0506 07 57 07      call puts
0191   0509             ; --- END INLINE ASM BLOCK
0192   0509             
0193   0509 F9            leave
0194   050A 09            ret
0195   050B             ; --- END TEXT BLOCK
0196   050B             
0197   050B             ; --- BEGIN DATA BLOCK
0198   050B             ; --- END DATA BLOCK
0199   050B             
0200   050B             ; --- BEGIN INCLUDE BLOCK
0201   050B             .include "lib/stdio.asm"
0001+  050B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  050B             ; stdio.s
0003+  050B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  050B             .include "lib/string.asm"
0001++ 050B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 050B             ; string.s
0003++ 050B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 050B             
0005++ 050B             
0006++ 050B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 050B             ; strrev
0008++ 050B             ; reverse a string
0009++ 050B             ; D = string address
0010++ 050B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 050B             ; 01234
0012++ 050B             strrev:
0013++ 050B 4B          	pusha
0014++ 050C 07 52 05    	call strlen	; length in C
0015++ 050F 12          	mov a, c
0016++ 0510 AF 01 00    	cmp a, 1
0017++ 0513 D0 2D 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0516 7D          	dec a
0019++ 0517 FD 4E       	mov si, d	; beginning of string
0020++ 0519 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 051B 59          	add d, a	; end of string
0022++ 051C 12          	mov a, c
0023++ 051D FD 9B       	shr a		; divide by 2
0024++ 051F 39          	mov c, a	; C now counts the steps
0025++ 0520             strrev_L0:
0026++ 0520 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0521 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0522 3E          	mov [d], al	; store left char into right side
0029++ 0523 1B          	mov al, bl
0030++ 0524 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0525 7E          	dec c
0032++ 0526 7F          	dec d
0033++ 0527 C2 00 00    	cmp c, 0
0034++ 052A C7 20 05    	jne strrev_L0
0035++ 052D             strrev_end:
0036++ 052D 4C          	popa
0037++ 052E 09          	ret
0038++ 052F             	
0039++ 052F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 052F             ; strchr
0041++ 052F             ; search string in D for char in AL
0042++ 052F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 052F             strchr:
0044++ 052F             strchr_L0:
0045++ 052F 32          	mov bl, [d]
0046++ 0530 C1 00       	cmp bl, 0
0047++ 0532 C6 3D 05    	je strchr_end
0048++ 0535 BA          	cmp al, bl
0049++ 0536 C6 3D 05    	je strchr_end
0050++ 0539 79          	inc d
0051++ 053A 0A 2F 05    	jmp strchr_L0
0052++ 053D             strchr_end:
0053++ 053D 1B          	mov al, bl
0054++ 053E 09          	ret
0055++ 053F             
0056++ 053F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 053F             ; strstr
0058++ 053F             ; find sub-string
0059++ 053F             ; str1 in SI
0060++ 053F             ; str2 in DI
0061++ 053F             ; SI points to end of source string
0062++ 053F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 053F             strstr:
0064++ 053F DB          	push al
0065++ 0540 DA          	push d
0066++ 0541 E3          	push di
0067++ 0542             strstr_loop:
0068++ 0542 F3          	cmpsb					; compare a byte of the strings
0069++ 0543 C7 4E 05    	jne strstr_ret
0070++ 0546 FC 00 00    	lea d, [di + 0]
0071++ 0549 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 054B C7 42 05    	jne strstr_loop				; equal chars but not at end
0073++ 054E             strstr_ret:
0074++ 054E F0          	pop di
0075++ 054F E7          	pop d
0076++ 0550 E8          	pop al
0077++ 0551 09          	ret
0078++ 0552             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0552             ; length of null terminated string
0080++ 0552             ; result in C
0081++ 0552             ; pointer in D
0082++ 0552             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0552             strlen:
0084++ 0552 DA          	push d
0085++ 0553 38 00 00    	mov c, 0
0086++ 0556             strlen_L1:
0087++ 0556 BD 00       	cmp byte [d], 0
0088++ 0558 C6 60 05    	je strlen_ret
0089++ 055B 79          	inc d
0090++ 055C 78          	inc c
0091++ 055D 0A 56 05    	jmp strlen_L1
0092++ 0560             strlen_ret:
0093++ 0560 E7          	pop d
0094++ 0561 09          	ret
0095++ 0562             
0096++ 0562             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0562             ; STRCMP
0098++ 0562             ; compare two strings
0099++ 0562             ; str1 in SI
0100++ 0562             ; str2 in DI
0101++ 0562             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0562             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0562             strcmp:
0104++ 0562 DB          	push al
0105++ 0563 DA          	push d
0106++ 0564 E3          	push di
0107++ 0565 E2          	push si
0108++ 0566             strcmp_loop:
0109++ 0566 F3          	cmpsb					; compare a byte of the strings
0110++ 0567 C7 72 05    	jne strcmp_ret
0111++ 056A FB FF FF    	lea d, [si +- 1]
0112++ 056D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 056F C7 66 05    	jne strcmp_loop				; equal chars but not at end
0114++ 0572             strcmp_ret:
0115++ 0572 EF          	pop si
0116++ 0573 F0          	pop di
0117++ 0574 E7          	pop d
0118++ 0575 E8          	pop al
0119++ 0576 09          	ret
0120++ 0577             
0121++ 0577             
0122++ 0577             ; STRCPY
0123++ 0577             ; copy null terminated string from SI to DI
0124++ 0577             ; source in SI
0125++ 0577             ; destination in DI
0126++ 0577             strcpy:
0127++ 0577 E2          	push si
0128++ 0578 E3          	push di
0129++ 0579 DB          	push al
0130++ 057A             strcpy_L1:
0131++ 057A F6          	lodsb
0132++ 057B F7          	stosb
0133++ 057C B9 00       	cmp al, 0
0134++ 057E C7 7A 05    	jne strcpy_L1
0135++ 0581             strcpy_end:
0136++ 0581 E8          	pop al
0137++ 0582 F0          	pop di
0138++ 0583 EF          	pop si
0139++ 0584 09          	ret
0140++ 0585             
0141++ 0585             ; STRCAT
0142++ 0585             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0585             ; source in SI
0144++ 0585             ; destination in DI
0145++ 0585             strcat:
0146++ 0585 E2          	push si
0147++ 0586 E3          	push di
0148++ 0587 D7          	push a
0149++ 0588 DA          	push d
0150++ 0589 50          	mov a, di
0151++ 058A 3C          	mov d, a
0152++ 058B             strcat_goto_end_L1:
0153++ 058B BD 00       	cmp byte[d], 0
0154++ 058D C6 94 05    	je strcat_start
0155++ 0590 79          	inc d
0156++ 0591 0A 8B 05    	jmp strcat_goto_end_L1
0157++ 0594             strcat_start:
0158++ 0594 FD 50       	mov di, d
0159++ 0596             strcat_L1:
0160++ 0596 F6          	lodsb
0161++ 0597 F7          	stosb
0162++ 0598 B9 00       	cmp al, 0
0163++ 059A C7 96 05    	jne strcat_L1
0164++ 059D             strcat_end:
0165++ 059D E7          	pop d
0166++ 059E E4          	pop a
0167++ 059F F0          	pop di
0168++ 05A0 EF          	pop si
0169++ 05A1 09          	ret
0005+  05A2             
0006+  05A2 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  05A6 34 35 36 37 
0006+  05AA 38 39 41 42 
0006+  05AE 43 44 45 46 
0007+  05B2 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  05B6 1B 5B 48 00 
0008+  05BA             
0009+  05BA 01 00       table_power:.dw 1
0010+  05BC 0A 00       			.dw 10
0011+  05BE 64 00       			.dw 100
0012+  05C0 E8 03       			.dw 1000
0013+  05C2 10 27       			.dw 10000
0014+  05C4             
0015+  05C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  05C4             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  05C4             ; ASCII in BL
0018+  05C4             ; result in AL
0019+  05C4             ; ascii for F = 0100 0110
0020+  05C4             ; ascii for 9 = 0011 1001
0021+  05C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  05C4             hex_ascii_encode:
0023+  05C4 1B          	mov al, bl
0024+  05C5 93 40       	test al, $40				; test if letter or number
0025+  05C7 C7 CD 05    	jnz hex_letter
0026+  05CA 87 0F       	and al, $0F				; get number
0027+  05CC 09          	ret
0028+  05CD             hex_letter:
0029+  05CD 87 0F       	and al, $0F				; get letter
0030+  05CF 6A 09       	add al, 9
0031+  05D1 09          	ret
0032+  05D2             
0033+  05D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  05D2             ; ATOI
0035+  05D2             ; 2 letter hex string in B
0036+  05D2             ; 8bit integer returned in AL
0037+  05D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  05D2             atoi:
0039+  05D2 D8          	push b
0040+  05D3 07 C4 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  05D6 30          	mov bl, bh
0042+  05D7 DB          	push al					; save a
0043+  05D8 07 C4 05    	call hex_ascii_encode
0044+  05DB EA          	pop bl	
0045+  05DC FD 9E 04    	shl al, 4
0046+  05DF 8C          	or al, bl
0047+  05E0 E5          	pop b
0048+  05E1 09          	ret	
0049+  05E2             
0050+  05E2             
0051+  05E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  05E2             ; printf
0053+  05E2             ; no need for explanations!
0054+  05E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  05E2             printf:
0056+  05E2 09          	ret
0057+  05E3             
0058+  05E3             
0059+  05E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  05E3             ; scanf
0061+  05E3             ; no need for explanations!
0062+  05E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  05E3             scanf:
0064+  05E3 09          	ret
0065+  05E4             
0066+  05E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  05E4             ; ITOA
0068+  05E4             ; 8bit value in BL
0069+  05E4             ; 2 byte ASCII result in A
0070+  05E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  05E4             itoa:
0072+  05E4 DA          	push d
0073+  05E5 D8          	push b
0074+  05E6 A7 00       	mov bh, 0
0075+  05E8 FD A4 04    	shr bl, 4	
0076+  05EB 74          	mov d, b
0077+  05EC 1F A2 05    	mov al, [d + s_hex_digits]
0078+  05EF 23          	mov ah, al
0079+  05F0             	
0080+  05F0 E5          	pop b
0081+  05F1 D8          	push b
0082+  05F2 A7 00       	mov bh, 0
0083+  05F4 FD 87 0F    	and bl, $0F
0084+  05F7 74          	mov d, b
0085+  05F8 1F A2 05    	mov al, [d + s_hex_digits]
0086+  05FB E5          	pop b
0087+  05FC E7          	pop d
0088+  05FD 09          	ret
0089+  05FE             
0090+  05FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  05FE             ; HEX STRING TO BINARY
0092+  05FE             ; di = destination address
0093+  05FE             ; si = source
0094+  05FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  05FE             hex_to_int:
0096+  05FE             hex_to_int_L1:
0097+  05FE F6          	lodsb					; load from [SI] to AL
0098+  05FF B9 00       	cmp al, 0				; check if ASCII 0
0099+  0601 C6 0E 06    	jz hex_to_int_ret
0100+  0604 36          	mov bh, al
0101+  0605 F6          	lodsb
0102+  0606 2F          	mov bl, al
0103+  0607 07 D2 05    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  060A F7          	stosb					; store AL to [DI]
0105+  060B 0A FE 05    	jmp hex_to_int_L1
0106+  060E             hex_to_int_ret:
0107+  060E 09          	ret		
0108+  060F             
0109+  060F             
0110+  060F             
0111+  060F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  060F             ; GETCHAR
0113+  060F             ; char in ah
0114+  060F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  060F             getchar:
0116+  060F DB          	push al
0117+  0610             getchar_retry:
0118+  0610 FD 0C       	sti
0119+  0612 19 01       	mov al, 1
0120+  0614 05 03       	syscall sys_io			; receive in AH
0121+  0616 B9 00       	cmp al, 0			; check if any char was receive
0122+  0618 C6 10 06    	je getchar_retry
0123+  061B E8          	pop al
0124+  061C 09          	ret
0125+  061D             
0126+  061D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  061D             ; PUTCHAR
0128+  061D             ; char in ah
0129+  061D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  061D             putchar:
0131+  061D D7          	push a
0132+  061E 19 00       	mov al, 0
0133+  0620 05 03       	syscall sys_io			; char in AH
0134+  0622 E4          	pop a
0135+  0623 09          	ret
0136+  0624             
0137+  0624             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  0624             ;; INPUT A STRING
0139+  0624             ;; terminates with null
0140+  0624             ;; pointer in D
0141+  0624             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  0624             gets:
0143+  0624 D7          	push a
0144+  0625 DA          	push d
0145+  0626             gets_loop:
0146+  0626 FD 0C       	sti
0147+  0628 19 01       	mov al, 1
0148+  062A 05 03       	syscall sys_io			; receive in AH
0149+  062C B9 00       	cmp al, 0				; check error code (AL)
0150+  062E C6 26 06    	je gets_loop			; if no char received, retry
0151+  0631             
0152+  0631 76 1B       	cmp ah, 27
0153+  0633 C6 54 06    	je gets_telnet_escape
0154+  0636 76 0A       	cmp ah, $0A				; LF
0155+  0638 C6 AD 06    	je gets_end
0156+  063B 76 0D       	cmp ah, $0D				; CR
0157+  063D C6 AD 06    	je gets_end
0158+  0640 76 5C       	cmp ah, $5C				; '\\'
0159+  0642 C6 84 06    	je gets_escape
0160+  0645             	
0161+  0645 76 08       	cmp ah, $08			; check for backspace
0162+  0647 C6 50 06    	je gets_backspace
0163+  064A             
0164+  064A 1A          	mov al, ah
0165+  064B 3E          	mov [d], al
0166+  064C 79          	inc d
0167+  064D 0A 26 06    	jmp gets_loop
0168+  0650             gets_backspace:
0169+  0650 7F          	dec d
0170+  0651 0A 26 06    	jmp gets_loop
0171+  0654             gets_telnet_escape:
0172+  0654 FD 0C       	sti
0173+  0656 19 01       	mov al, 1
0174+  0658 05 03       	syscall sys_io				; receive in AH without echo
0175+  065A B9 00       	cmp al, 0					; check error code (AL)
0176+  065C C6 54 06    	je gets_telnet_escape		; if no char received, retry
0177+  065F 76 5B       	cmp ah, '['
0178+  0661 C7 26 06    	jne gets_loop
0179+  0664             gets_telnet_escape_phase2:
0180+  0664 FD 0C       	sti
0181+  0666 19 01       	mov al, 1
0182+  0668 05 03       	syscall sys_io					; receive in AH without echo
0183+  066A B9 00       	cmp al, 0						; check error code (AL)
0184+  066C C6 64 06    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  066F 76 44       	cmp ah, 'D'
0186+  0671 C6 7C 06    	je gets_left_arrow
0187+  0674 76 43       	cmp ah, 'C'
0188+  0676 C6 80 06    	je gets_right_arrow
0189+  0679 0A 26 06    	jmp gets_loop
0190+  067C             gets_left_arrow:
0191+  067C 7F          	dec d
0192+  067D 0A 26 06    	jmp gets_loop
0193+  0680             gets_right_arrow:
0194+  0680 79          	inc d
0195+  0681 0A 26 06    	jmp gets_loop
0196+  0684             gets_escape:
0197+  0684 FD 0C       	sti
0198+  0686 19 01       	mov al, 1
0199+  0688 05 03       	syscall sys_io			; receive in AH
0200+  068A B9 00       	cmp al, 0				; check error code (AL)
0201+  068C C6 84 06    	je gets_escape			; if no char received, retry
0202+  068F 76 6E       	cmp ah, 'n'
0203+  0691 C6 9F 06    	je gets_LF
0204+  0694 76 72       	cmp ah, 'r'
0205+  0696 C6 A6 06    	je gets_CR
0206+  0699 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  069A 3E          	mov [d], al
0208+  069B 79          	inc d
0209+  069C 0A 26 06    	jmp gets_loop
0210+  069F             gets_LF:
0211+  069F 19 0A       	mov al, $0A
0212+  06A1 3E          	mov [d], al
0213+  06A2 79          	inc d
0214+  06A3 0A 26 06    	jmp gets_loop
0215+  06A6             gets_CR:
0216+  06A6 19 0D       	mov al, $0D
0217+  06A8 3E          	mov [d], al
0218+  06A9 79          	inc d
0219+  06AA 0A 26 06    	jmp gets_loop
0220+  06AD             gets_end:
0221+  06AD 19 00       	mov al, 0
0222+  06AF 3E          	mov [d], al				; terminate string
0223+  06B0 E7          	pop d
0224+  06B1 E4          	pop a
0225+  06B2 09          	ret
0226+  06B3             
0227+  06B3             
0228+  06B3             
0229+  06B3             
0230+  06B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  06B3             ;; INPUT TEXT
0232+  06B3             ;; terminated with CTRL+D
0233+  06B3             ;; pointer in D
0234+  06B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  06B3             gettxt:
0236+  06B3 D7          	push a
0237+  06B4 DA          	push d
0238+  06B5             gettxt_loop:
0239+  06B5 19 01       	mov al, 1
0240+  06B7 05 03       	syscall sys_io			; receive in AH
0241+  06B9 B9 00       	cmp al, 0				; check error code (AL)
0242+  06BB C6 B5 06    	je gettxt_loop		; if no char received, retry
0243+  06BE 76 04       	cmp ah, 4			; EOT
0244+  06C0 C6 FE 06    	je gettxt_end
0245+  06C3 76 08       	cmp ah, $08			; check for backspace
0246+  06C5 C6 FA 06    	je gettxt_backspace
0247+  06C8 76 5C       	cmp ah, $5C				; '\\'
0248+  06CA C6 D3 06    	je gettxt_escape
0249+  06CD 1A          	mov al, ah
0250+  06CE 3E          	mov [d], al
0251+  06CF 79          	inc d
0252+  06D0 0A B5 06    	jmp gettxt_loop
0253+  06D3             gettxt_escape:
0254+  06D3 19 01       	mov al, 1
0255+  06D5 05 03       	syscall sys_io			; receive in AH
0256+  06D7 B9 00       	cmp al, 0				; check error code (AL)
0257+  06D9 C6 D3 06    	je gettxt_escape		; if no char received, retry
0258+  06DC 76 6E       	cmp ah, 'n'
0259+  06DE C6 EC 06    	je gettxt_LF
0260+  06E1 76 72       	cmp ah, 'r'
0261+  06E3 C6 F3 06    	je gettxt_CR
0262+  06E6 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  06E7 3E          	mov [d], al
0264+  06E8 79          	inc d
0265+  06E9 0A B5 06    	jmp gettxt_loop
0266+  06EC             gettxt_LF:
0267+  06EC 19 0A       	mov al, $0A
0268+  06EE 3E          	mov [d], al
0269+  06EF 79          	inc d
0270+  06F0 0A B5 06    	jmp gettxt_loop
0271+  06F3             gettxt_CR:
0272+  06F3 19 0D       	mov al, $0D
0273+  06F5 3E          	mov [d], al
0274+  06F6 79          	inc d
0275+  06F7 0A B5 06    	jmp gettxt_loop
0276+  06FA             gettxt_backspace:
0277+  06FA 7F          	dec d
0278+  06FB 0A B5 06    	jmp gettxt_loop
0279+  06FE             gettxt_end:
0280+  06FE 19 00       	mov al, 0
0281+  0700 3E          	mov [d], al				; terminate string
0282+  0701 E7          	pop d
0283+  0702 E4          	pop a
0284+  0703 09          	ret
0285+  0704             
0286+  0704             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  0704             ; PRINT NEW LINE
0288+  0704             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  0704             printnl:
0290+  0704 D7          	push a
0291+  0705 10 00 0A    	mov a, $0A00
0292+  0708 05 03       	syscall sys_io
0293+  070A 10 00 0D    	mov a, $0D00
0294+  070D 05 03       	syscall sys_io
0295+  070F E4          	pop a
0296+  0710 09          	ret
0297+  0711             
0298+  0711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0711             ; strtoint
0300+  0711             ; 4 digit hex string number in d
0301+  0711             ; integer returned in A
0302+  0711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0711             strtointx:
0304+  0711 D8          	push b
0305+  0712 32          	mov bl, [d]
0306+  0713 37          	mov bh, bl
0307+  0714 33 01 00    	mov bl, [d + 1]
0308+  0717 07 D2 05    	call atoi				; convert to int in AL
0309+  071A 23          	mov ah, al				; move to AH
0310+  071B 33 02 00    	mov bl, [d + 2]
0311+  071E 37          	mov bh, bl
0312+  071F 33 03 00    	mov bl, [d + 3]
0313+  0722 07 D2 05    	call atoi				; convert to int in AL
0314+  0725 E5          	pop b
0315+  0726 09          	ret
0316+  0727             
0317+  0727             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0727             ; strtoint
0319+  0727             ; 5 digit base10 string number in d
0320+  0727             ; integer returned in A
0321+  0727             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0727             strtoint:
0323+  0727 E2          	push si
0324+  0728 D8          	push b
0325+  0729 D9          	push c
0326+  072A DA          	push d
0327+  072B 07 52 05    	call strlen			; get string length in C
0328+  072E 7E          	dec c
0329+  072F FD 4E       	mov si, d
0330+  0731 12          	mov a, c
0331+  0732 FD 99       	shl a
0332+  0734 3B BA 05    	mov d, table_power
0333+  0737 59          	add d, a
0334+  0738 38 00 00    	mov c, 0
0335+  073B             strtoint_L0:
0336+  073B F6          	lodsb			; load ASCII to al
0337+  073C B9 00       	cmp al, 0
0338+  073E C6 51 07    	je strtoint_end
0339+  0741 6F 30       	sub al, $30		; make into integer
0340+  0743 22 00       	mov ah, 0
0341+  0745 2A          	mov b, [d]
0342+  0746 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0747 11          	mov a, b
0344+  0748 28          	mov b, c
0345+  0749 54          	add a, b
0346+  074A 39          	mov c, a
0347+  074B 63 02 00    	sub d, 2
0348+  074E 0A 3B 07    	jmp strtoint_L0
0349+  0751             strtoint_end:
0350+  0751 12          	mov a, c
0351+  0752 E7          	pop d
0352+  0753 E6          	pop c
0353+  0754 E5          	pop b
0354+  0755 EF          	pop si
0355+  0756 09          	ret
0356+  0757             
0357+  0757             
0358+  0757             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0757             ; PRINT NULL TERMINATED STRING
0360+  0757             ; pointer in D
0361+  0757             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0757             puts:
0363+  0757 D7          	push a
0364+  0758 DA          	push d
0365+  0759             puts_L1:
0366+  0759 1E          	mov al, [d]
0367+  075A B9 00       	cmp al, 0
0368+  075C C6 68 07    	jz puts_END
0369+  075F 23          	mov ah, al
0370+  0760 19 00       	mov al, 0
0371+  0762 05 03       	syscall sys_io
0372+  0764 79          	inc d
0373+  0765 0A 59 07    	jmp puts_L1
0374+  0768             puts_END:
0375+  0768 E7          	pop d
0376+  0769 E4          	pop a
0377+  076A 09          	ret
0378+  076B             
0379+  076B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  076B             ; PRINT N SIZE STRING
0381+  076B             ; pointer in D
0382+  076B             ; size in C
0383+  076B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  076B             putsn:
0385+  076B DB          	push al
0386+  076C DA          	push d
0387+  076D D9          	push c
0388+  076E             putsn_L0:
0389+  076E 1E          	mov al, [d]
0390+  076F 23          	mov ah, al
0391+  0770 19 00       	mov al, 0
0392+  0772 05 03       	syscall sys_io
0393+  0774 79          	inc d
0394+  0775 7E          	dec c	
0395+  0776 C2 00 00    	cmp c, 0
0396+  0779 C7 6E 07    	jne putsn_L0
0397+  077C             putsn_end:
0398+  077C E6          	pop c
0399+  077D E7          	pop d
0400+  077E E8          	pop al
0401+  077F 09          	ret
0402+  0780             
0403+  0780             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0780             ; print 16bit decimal number
0405+  0780             ; input number in A
0406+  0780             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0780             print_u16d:
0408+  0780 D7          	push a
0409+  0781 D8          	push b
0410+  0782 26 10 27    	mov b, 10000
0411+  0785 AE          	div a, b			; get 10000 coeff.
0412+  0786 07 AC 07    	call print_number
0413+  0789 11          	mov a, b
0414+  078A 26 E8 03    	mov b, 1000
0415+  078D AE          	div a, b			; get 10000 coeff.
0416+  078E 07 AC 07    	call print_number
0417+  0791 11          	mov a, b
0418+  0792 26 64 00    	mov b, 100
0419+  0795 AE          	div a, b
0420+  0796 07 AC 07    	call print_number
0421+  0799 11          	mov a, b
0422+  079A 26 0A 00    	mov b, 10
0423+  079D AE          	div a, b
0424+  079E 07 AC 07    	call print_number
0425+  07A1 11          	mov a, b
0426+  07A2 6A 30       	add al, $30
0427+  07A4 23          	mov ah, al
0428+  07A5 19 00       	mov al, 0
0429+  07A7 05 03       	syscall sys_io	; print coeff
0430+  07A9 E5          	pop b
0431+  07AA E4          	pop a
0432+  07AB 09          	ret
0433+  07AC             
0434+  07AC             
0435+  07AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  07AC             ; if A == 0, print space
0437+  07AC             ; else print A
0438+  07AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  07AC             print_number:
0440+  07AC 6A 30       	add al, $30
0441+  07AE 23          	mov ah, al
0442+  07AF 07 1D 06    	call putchar
0443+  07B2 09          	ret
0444+  07B3             
0445+  07B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  07B3             ; PRINT 16BIT HEX INTEGER
0447+  07B3             ; integer value in reg B
0448+  07B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  07B3             print_u16x:
0450+  07B3 D7          	push a
0451+  07B4 D8          	push b
0452+  07B5 DD          	push bl
0453+  07B6 30          	mov bl, bh
0454+  07B7 07 E4 05    	call itoa				; convert bh to char in A
0455+  07BA 2F          	mov bl, al				; save al
0456+  07BB 19 00       	mov al, 0
0457+  07BD 05 03       	syscall sys_io				; display AH
0458+  07BF 24          	mov ah, bl				; retrieve al
0459+  07C0 19 00       	mov al, 0
0460+  07C2 05 03       	syscall sys_io				; display AL
0461+  07C4             
0462+  07C4 EA          	pop bl
0463+  07C5 07 E4 05    	call itoa				; convert bh to char in A
0464+  07C8 2F          	mov bl, al				; save al
0465+  07C9 19 00       	mov al, 0
0466+  07CB 05 03       	syscall sys_io				; display AH
0467+  07CD 24          	mov ah, bl				; retrieve al
0468+  07CE 19 00       	mov al, 0
0469+  07D0 05 03       	syscall sys_io				; display AL
0470+  07D2             
0471+  07D2 E5          	pop b
0472+  07D3 E4          	pop a
0473+  07D4 09          	ret
0474+  07D5             
0475+  07D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  07D5             ; INPUT 16BIT HEX INTEGER
0477+  07D5             ; read 16bit integer into A
0478+  07D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  07D5             scan_u16x:
0480+  07D5 F8 10 00    	enter 16
0481+  07D8 D8          	push b
0482+  07D9 DA          	push d
0483+  07DA             
0484+  07DA FA F1 FF    	lea d, [bp + -15]
0485+  07DD 07 24 06    	call gets				; get number
0486+  07E0             
0487+  07E0 32          	mov bl, [d]
0488+  07E1 37          	mov bh, bl
0489+  07E2 33 01 00    	mov bl, [d + 1]
0490+  07E5 07 D2 05    	call atoi				; convert to int in AL
0491+  07E8 23          	mov ah, al				; move to AH
0492+  07E9             
0493+  07E9 33 02 00    	mov bl, [d + 2]
0494+  07EC 37          	mov bh, bl
0495+  07ED 33 03 00    	mov bl, [d + 3]
0496+  07F0 07 D2 05    	call atoi				; convert to int in AL
0497+  07F3             
0498+  07F3 E7          	pop d
0499+  07F4 E5          	pop b
0500+  07F5 F9          	leave
0501+  07F6 09          	ret
0502+  07F7             
0503+  07F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  07F7             ; PRINT 8bit HEX INTEGER
0505+  07F7             ; integer value in reg bl
0506+  07F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  07F7             print_u8x:
0508+  07F7 D7          	push a
0509+  07F8 DD          	push bl
0510+  07F9             
0511+  07F9 07 E4 05    	call itoa				; convert bl to char in A
0512+  07FC 2F          	mov bl, al				; save al
0513+  07FD 19 00       	mov al, 0
0514+  07FF 05 03       	syscall sys_io				; display AH
0515+  0801 24          	mov ah, bl				; retrieve al
0516+  0802 19 00       	mov al, 0
0517+  0804 05 03       	syscall sys_io				; display AL
0518+  0806             
0519+  0806 EA          	pop bl
0520+  0807 E4          	pop a
0521+  0808 09          	ret
0522+  0809             
0523+  0809             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0809             ; print 8bit decimal unsigned number
0525+  0809             ; input number in AL
0526+  0809             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0809             print_u8d:
0528+  0809 D7          	push a
0529+  080A D8          	push b
0530+  080B             
0531+  080B 22 00       	mov ah, 0
0532+  080D 26 64 00    	mov b, 100
0533+  0810 AE          	div a, b
0534+  0811 D8          	push b			; save remainder
0535+  0812 B9 00       	cmp al, 0
0536+  0814 C6 1E 08    	je skip100
0537+  0817 6A 30       	add al, $30
0538+  0819 23          	mov ah, al
0539+  081A 19 00       	mov al, 0
0540+  081C 05 03       	syscall sys_io	; print coeff
0541+  081E             skip100:
0542+  081E E4          	pop a
0543+  081F 22 00       	mov ah, 0
0544+  0821 26 0A 00    	mov b, 10
0545+  0824 AE          	div a, b
0546+  0825 D8          	push b			; save remainder
0547+  0826 B9 00       	cmp al, 0
0548+  0828 C6 32 08    	je skip10
0549+  082B 6A 30       	add al, $30
0550+  082D 23          	mov ah, al
0551+  082E 19 00       	mov al, 0
0552+  0830 05 03       	syscall sys_io	; print coeff
0553+  0832             skip10:
0554+  0832 E4          	pop a
0555+  0833 1B          	mov al, bl
0556+  0834 6A 30       	add al, $30
0557+  0836 23          	mov ah, al
0558+  0837 19 00       	mov al, 0
0559+  0839 05 03       	syscall sys_io	; print coeff
0560+  083B E5          	pop b
0561+  083C E4          	pop a
0562+  083D 09          	ret
0563+  083E             
0564+  083E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  083E             ; INPUT 8BIT HEX INTEGER
0566+  083E             ; read 8bit integer into AL
0567+  083E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  083E             scan_u8x:
0569+  083E F8 04 00    	enter 4
0570+  0841 D8          	push b
0571+  0842 DA          	push d
0572+  0843             
0573+  0843 FA FD FF    	lea d, [bp + -3]
0574+  0846 07 24 06    	call gets				; get number
0575+  0849             
0576+  0849 32          	mov bl, [d]
0577+  084A 37          	mov bh, bl
0578+  084B 33 01 00    	mov bl, [d + 1]
0579+  084E 07 D2 05    	call atoi				; convert to int in AL
0580+  0851             
0581+  0851 E7          	pop d
0582+  0852 E5          	pop b
0583+  0853 F9          	leave
0584+  0854 09          	ret
0585+  0855             
0586+  0855             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0855             ; input decimal number
0588+  0855             ; result in A
0589+  0855             ; 655'\0'
0590+  0855             ; low--------high
0591+  0855             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  0855             scan_u16d:
0593+  0855 F8 08 00    	enter 8
0594+  0858 E2          	push si
0595+  0859 D8          	push b
0596+  085A D9          	push c
0597+  085B DA          	push d
0598+  085C FA F9 FF    	lea d, [bp +- 7]
0599+  085F 07 24 06    	call gets
0600+  0862 07 52 05    	call strlen			; get string length in C
0601+  0865 7E          	dec c
0602+  0866 FD 4E       	mov si, d
0603+  0868 12          	mov a, c
0604+  0869 FD 99       	shl a
0605+  086B 3B BA 05    	mov d, table_power
0606+  086E 59          	add d, a
0607+  086F 38 00 00    	mov c, 0
0608+  0872             mul_loop:
0609+  0872 F6          	lodsb			; load ASCII to al
0610+  0873 B9 00       	cmp al, 0
0611+  0875 C6 88 08    	je mul_exit
0612+  0878 6F 30       	sub al, $30		; make into integer
0613+  087A 22 00       	mov ah, 0
0614+  087C 2A          	mov b, [d]
0615+  087D AC          	mul a, b			; result in B since it fits in 16bits
0616+  087E 11          	mov a, b
0617+  087F 28          	mov b, c
0618+  0880 54          	add a, b
0619+  0881 39          	mov c, a
0620+  0882 63 02 00    	sub d, 2
0621+  0885 0A 72 08    	jmp mul_loop
0622+  0888             mul_exit:
0623+  0888 12          	mov a, c
0624+  0889 E7          	pop d
0625+  088A E6          	pop c
0626+  088B E5          	pop b
0627+  088C EF          	pop si
0628+  088D F9          	leave
0629+  088E 09          	ret
0202   088F             ; --- END INCLUDE BLOCK
0203   088F             
0204   088F             
0205   088F             .end
tasm: Number of errors = 0
