0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 26 01 00      mov b, 1
0012   0408 FD 97         neg b
0013   040A D7            push a
0014   040B 11            mov a, b
0015   040C 26 00 00      mov b, 0
0016   040F B0            cmp a, b
0017   0410 0E            lodflgs
0018   0411 87 08         and al, %00001000 ; <
0019   0413 B9 00         cmp al, 0
0020   0415 0E            lodflgs
0021   0416 8F 01         xor al, %00000001
0022   0418 22 00         mov ah, 0
0023   041A 27            mov b, a
0024   041B E4            pop a
0025   041C 26 00 00      mov b, 0
0026   041F F9            leave
0027   0420 05 0B         syscall sys_terminate_proc
0028   0422             
0029   0422             print_num:
0030   0422 D2            push bp
0031   0423 9B            mov bp, sp
0032   0424 52 05 00      sub sp, 5 ; digits
0033   0427 52 02 00      sub sp, 2 ; i
0034   042A 26 00 00      mov b, 0
0035   042D D7            push a
0036   042E 11            mov a, b
0037   042F 45 FA FF      mov [bp + -6], a ; i
0038   0432 E4            pop a
0039   0433             _while1_cond:
0040   0433 2C 05 00      mov b, [bp + 5] ; num
0041   0436 D7            push a
0042   0437 11            mov a, b
0043   0438 26 00 00      mov b, 0
0044   043B B0            cmp a, b
0045   043C 0E            lodflgs
0046   043D 87 03         and al, %00000011
0047   043F B9 00         cmp al, 0
0048   0441 0E            lodflgs
0049   0442 22 00         mov ah, 0
0050   0444 27            mov b, a
0051   0445 E4            pop a
0052   0446 C0 00 00      cmp b, 0
0053   0449 C6 9A 04      je _while1_exit
0054   044C             _while1_block:
0055   044C FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0056   044F 2D            mov b, d
0057   0450 D7            push a
0058   0451 74            mov d, b
0059   0452 DA            push d
0060   0453 2C FA FF      mov b, [bp + -6] ; i
0061   0456 E7            pop d
0062   0457 10 01 00      mov a, 1
0063   045A AC            mul a, b
0064   045B 5A            add d, b
0065   045C E4            pop a
0066   045D DA            push d
0067   045E 26 30 00      mov b, '0'
0068   0461 D7            push a
0069   0462 11            mov a, b
0070   0463 2C 05 00      mov b, [bp + 5] ; num
0071   0466 D7            push a
0072   0467 11            mov a, b
0073   0468 26 0A 00      mov b, 10
0074   046B AE            div a, b
0075   046C E4            pop a
0076   046D 54            add a, b
0077   046E 27            mov b, a
0078   046F E4            pop a
0079   0470 E7            pop d
0080   0471 FD 3E         mov [d], bl
0081   0473 2C 05 00      mov b, [bp + 5] ; num
0082   0476 D7            push a
0083   0477 11            mov a, b
0084   0478 26 0A 00      mov b, 10
0085   047B AE            div a, b
0086   047C FD 78         mov g, a
0087   047E 11            mov a, b
0088   047F FD 27         mov b, g
0089   0481 E4            pop a
0090   0482 D7            push a
0091   0483 11            mov a, b
0092   0484 45 05 00      mov [bp + 5], a ; num
0093   0487 E4            pop a
0094   0488 2C FA FF      mov b, [bp + -6] ; i
0095   048B D7            push a
0096   048C 11            mov a, b
0097   048D FD 77         inc b
0098   048F D7            push a
0099   0490 11            mov a, b
0100   0491 45 FA FF      mov [bp + -6], a ; i
0101   0494 E4            pop a
0102   0495 27            mov b, a
0103   0496 E4            pop a
0104   0497 0A 33 04      jmp _while1_cond
0105   049A             _while1_exit:
0106   049A             _while2_cond:
0107   049A 2C FA FF      mov b, [bp + -6] ; i
0108   049D D7            push a
0109   049E 11            mov a, b
0110   049F 26 00 00      mov b, 0
0111   04A2 B0            cmp a, b
0112   04A3 0E            lodflgs
0113   04A4 87 03         and al, %00000011
0114   04A6 B9 00         cmp al, 0
0115   04A8 0E            lodflgs
0116   04A9 22 00         mov ah, 0
0117   04AB 27            mov b, a
0118   04AC E4            pop a
0119   04AD C0 00 00      cmp b, 0
0120   04B0 C6 E0 04      je _while2_exit
0121   04B3             _while2_block:
0122   04B3 2C FA FF      mov b, [bp + -6] ; i
0123   04B6 D7            push a
0124   04B7 11            mov a, b
0125   04B8 FD 7D         dec b
0126   04BA D7            push a
0127   04BB 11            mov a, b
0128   04BC 45 FA FF      mov [bp + -6], a ; i
0129   04BF E4            pop a
0130   04C0 27            mov b, a
0131   04C1 E4            pop a
0132   04C2 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0133   04C5 2D            mov b, d
0134   04C6 D7            push a
0135   04C7 74            mov d, b
0136   04C8 DA            push d
0137   04C9 2C FA FF      mov b, [bp + -6] ; i
0138   04CC E7            pop d
0139   04CD 10 01 00      mov a, 1
0140   04D0 AC            mul a, b
0141   04D1 5A            add d, b
0142   04D2 E4            pop a
0143   04D3 32            mov bl, [d]
0144   04D4 A7 00         mov bh, 0
0145   04D6 DD            push bl
0146   04D7 07 E2 04      call _putchar
0147   04DA 51 01 00      add sp, 1
0148   04DD 0A 9A 04      jmp _while2_cond
0149   04E0             _while2_exit:
0150   04E0 F9            leave
0151   04E1 09            ret
0152   04E2             
0153   04E2             _putchar:
0154   04E2 D2            push bp
0155   04E3 9B            mov bp, sp
0156   04E4             
0157   04E4             ; --- BEGIN INLINE ASM BLOCK
0158   04E4 20 05 00      mov al, [bp + 5]
0159   04E7 23            mov ah, al
0160   04E8 07 24 06      call putchar
0161   04EB             ; --- END INLINE ASM BLOCK
0162   04EB             
0163   04EB F9            leave
0164   04EC 09            ret
0165   04ED             
0166   04ED             scann:
0167   04ED D2            push bp
0168   04EE 9B            mov bp, sp
0169   04EF 52 02 00      sub sp, 2 ; m
0170   04F2             
0171   04F2             ; --- BEGIN INLINE ASM BLOCK
0172   04F2 07 5C 08      call scan_u16d
0173   04F5 45 FF FF      mov [bp + -1], a
0174   04F8             ; --- END INLINE ASM BLOCK
0175   04F8             
0176   04F8 FA 05 00      lea d, [bp + 5] ; n
0177   04FB 2A            mov b, [d]
0178   04FC D8            push b
0179   04FD 2C FF FF      mov b, [bp + -1] ; m
0180   0500 E7            pop d
0181   0501 D7            push a
0182   0502 11            mov a, b
0183   0503 43            mov [d], a
0184   0504 E4            pop a
0185   0505 F9            leave
0186   0506 09            ret
0187   0507             
0188   0507             print:
0189   0507 D2            push bp
0190   0508 9B            mov bp, sp
0191   0509             
0192   0509             ; --- BEGIN INLINE ASM BLOCK
0193   0509 17 05 00      mov a, [bp + 5]
0194   050C 3C            mov d, a
0195   050D 07 5E 07      call puts
0196   0510             ; --- END INLINE ASM BLOCK
0197   0510             
0198   0510 F9            leave
0199   0511 09            ret
0200   0512             ; --- END TEXT BLOCK
0201   0512             
0202   0512             ; --- BEGIN DATA BLOCK
0203   0512             ; --- END DATA BLOCK
0204   0512             
0205   0512             ; --- BEGIN INCLUDE BLOCK
0206   0512             .include "lib/stdio.asm"
0001+  0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0512             ; stdio.s
0003+  0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0512             .include "lib/string.asm"
0001++ 0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0512             ; string.s
0003++ 0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0512             
0005++ 0512             
0006++ 0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0512             ; strrev
0008++ 0512             ; reverse a string
0009++ 0512             ; D = string address
0010++ 0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0512             ; 01234
0012++ 0512             strrev:
0013++ 0512 4B          	pusha
0014++ 0513 07 59 05    	call strlen	; length in C
0015++ 0516 12          	mov a, c
0016++ 0517 AF 01 00    	cmp a, 1
0017++ 051A D0 34 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 051D 7D          	dec a
0019++ 051E FD 4E       	mov si, d	; beginning of string
0020++ 0520 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0522 59          	add d, a	; end of string
0022++ 0523 12          	mov a, c
0023++ 0524 FD 9B       	shr a		; divide by 2
0024++ 0526 39          	mov c, a	; C now counts the steps
0025++ 0527             strrev_L0:
0026++ 0527 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0528 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0529 3E          	mov [d], al	; store left char into right side
0029++ 052A 1B          	mov al, bl
0030++ 052B F7          	stosb		; store right-side char into left-side; increase DI
0031++ 052C 7E          	dec c
0032++ 052D 7F          	dec d
0033++ 052E C2 00 00    	cmp c, 0
0034++ 0531 C7 27 05    	jne strrev_L0
0035++ 0534             strrev_end:
0036++ 0534 4C          	popa
0037++ 0535 09          	ret
0038++ 0536             	
0039++ 0536             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0536             ; strchr
0041++ 0536             ; search string in D for char in AL
0042++ 0536             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0536             strchr:
0044++ 0536             strchr_L0:
0045++ 0536 32          	mov bl, [d]
0046++ 0537 C1 00       	cmp bl, 0
0047++ 0539 C6 44 05    	je strchr_end
0048++ 053C BA          	cmp al, bl
0049++ 053D C6 44 05    	je strchr_end
0050++ 0540 79          	inc d
0051++ 0541 0A 36 05    	jmp strchr_L0
0052++ 0544             strchr_end:
0053++ 0544 1B          	mov al, bl
0054++ 0545 09          	ret
0055++ 0546             
0056++ 0546             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0546             ; strstr
0058++ 0546             ; find sub-string
0059++ 0546             ; str1 in SI
0060++ 0546             ; str2 in DI
0061++ 0546             ; SI points to end of source string
0062++ 0546             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0546             strstr:
0064++ 0546 DB          	push al
0065++ 0547 DA          	push d
0066++ 0548 E3          	push di
0067++ 0549             strstr_loop:
0068++ 0549 F3          	cmpsb					; compare a byte of the strings
0069++ 054A C7 55 05    	jne strstr_ret
0070++ 054D FC 00 00    	lea d, [di + 0]
0071++ 0550 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0552 C7 49 05    	jne strstr_loop				; equal chars but not at end
0073++ 0555             strstr_ret:
0074++ 0555 F0          	pop di
0075++ 0556 E7          	pop d
0076++ 0557 E8          	pop al
0077++ 0558 09          	ret
0078++ 0559             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0559             ; length of null terminated string
0080++ 0559             ; result in C
0081++ 0559             ; pointer in D
0082++ 0559             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0559             strlen:
0084++ 0559 DA          	push d
0085++ 055A 38 00 00    	mov c, 0
0086++ 055D             strlen_L1:
0087++ 055D BD 00       	cmp byte [d], 0
0088++ 055F C6 67 05    	je strlen_ret
0089++ 0562 79          	inc d
0090++ 0563 78          	inc c
0091++ 0564 0A 5D 05    	jmp strlen_L1
0092++ 0567             strlen_ret:
0093++ 0567 E7          	pop d
0094++ 0568 09          	ret
0095++ 0569             
0096++ 0569             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0569             ; STRCMP
0098++ 0569             ; compare two strings
0099++ 0569             ; str1 in SI
0100++ 0569             ; str2 in DI
0101++ 0569             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0569             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0569             strcmp:
0104++ 0569 DB          	push al
0105++ 056A DA          	push d
0106++ 056B E3          	push di
0107++ 056C E2          	push si
0108++ 056D             strcmp_loop:
0109++ 056D F3          	cmpsb					; compare a byte of the strings
0110++ 056E C7 79 05    	jne strcmp_ret
0111++ 0571 FB FF FF    	lea d, [si +- 1]
0112++ 0574 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0576 C7 6D 05    	jne strcmp_loop				; equal chars but not at end
0114++ 0579             strcmp_ret:
0115++ 0579 EF          	pop si
0116++ 057A F0          	pop di
0117++ 057B E7          	pop d
0118++ 057C E8          	pop al
0119++ 057D 09          	ret
0120++ 057E             
0121++ 057E             
0122++ 057E             ; STRCPY
0123++ 057E             ; copy null terminated string from SI to DI
0124++ 057E             ; source in SI
0125++ 057E             ; destination in DI
0126++ 057E             strcpy:
0127++ 057E E2          	push si
0128++ 057F E3          	push di
0129++ 0580 DB          	push al
0130++ 0581             strcpy_L1:
0131++ 0581 F6          	lodsb
0132++ 0582 F7          	stosb
0133++ 0583 B9 00       	cmp al, 0
0134++ 0585 C7 81 05    	jne strcpy_L1
0135++ 0588             strcpy_end:
0136++ 0588 E8          	pop al
0137++ 0589 F0          	pop di
0138++ 058A EF          	pop si
0139++ 058B 09          	ret
0140++ 058C             
0141++ 058C             ; STRCAT
0142++ 058C             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 058C             ; source in SI
0144++ 058C             ; destination in DI
0145++ 058C             strcat:
0146++ 058C E2          	push si
0147++ 058D E3          	push di
0148++ 058E D7          	push a
0149++ 058F DA          	push d
0150++ 0590 50          	mov a, di
0151++ 0591 3C          	mov d, a
0152++ 0592             strcat_goto_end_L1:
0153++ 0592 BD 00       	cmp byte[d], 0
0154++ 0594 C6 9B 05    	je strcat_start
0155++ 0597 79          	inc d
0156++ 0598 0A 92 05    	jmp strcat_goto_end_L1
0157++ 059B             strcat_start:
0158++ 059B FD 50       	mov di, d
0159++ 059D             strcat_L1:
0160++ 059D F6          	lodsb
0161++ 059E F7          	stosb
0162++ 059F B9 00       	cmp al, 0
0163++ 05A1 C7 9D 05    	jne strcat_L1
0164++ 05A4             strcat_end:
0165++ 05A4 E7          	pop d
0166++ 05A5 E4          	pop a
0167++ 05A6 F0          	pop di
0168++ 05A7 EF          	pop si
0169++ 05A8 09          	ret
0005+  05A9             
0006+  05A9 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  05AD 34 35 36 37 
0006+  05B1 38 39 41 42 
0006+  05B5 43 44 45 46 
0007+  05B9 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  05BD 1B 5B 48 00 
0008+  05C1             
0009+  05C1 01 00       table_power:.dw 1
0010+  05C3 0A 00       			.dw 10
0011+  05C5 64 00       			.dw 100
0012+  05C7 E8 03       			.dw 1000
0013+  05C9 10 27       			.dw 10000
0014+  05CB             
0015+  05CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  05CB             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  05CB             ; ASCII in BL
0018+  05CB             ; result in AL
0019+  05CB             ; ascii for F = 0100 0110
0020+  05CB             ; ascii for 9 = 0011 1001
0021+  05CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  05CB             hex_ascii_encode:
0023+  05CB 1B          	mov al, bl
0024+  05CC 93 40       	test al, $40				; test if letter or number
0025+  05CE C7 D4 05    	jnz hex_letter
0026+  05D1 87 0F       	and al, $0F				; get number
0027+  05D3 09          	ret
0028+  05D4             hex_letter:
0029+  05D4 87 0F       	and al, $0F				; get letter
0030+  05D6 6A 09       	add al, 9
0031+  05D8 09          	ret
0032+  05D9             
0033+  05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  05D9             ; ATOI
0035+  05D9             ; 2 letter hex string in B
0036+  05D9             ; 8bit integer returned in AL
0037+  05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  05D9             atoi:
0039+  05D9 D8          	push b
0040+  05DA 07 CB 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  05DD 30          	mov bl, bh
0042+  05DE DB          	push al					; save a
0043+  05DF 07 CB 05    	call hex_ascii_encode
0044+  05E2 EA          	pop bl	
0045+  05E3 FD 9E 04    	shl al, 4
0046+  05E6 8C          	or al, bl
0047+  05E7 E5          	pop b
0048+  05E8 09          	ret	
0049+  05E9             
0050+  05E9             
0051+  05E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  05E9             ; printf
0053+  05E9             ; no need for explanations!
0054+  05E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  05E9             printf:
0056+  05E9 09          	ret
0057+  05EA             
0058+  05EA             
0059+  05EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  05EA             ; scanf
0061+  05EA             ; no need for explanations!
0062+  05EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  05EA             scanf:
0064+  05EA 09          	ret
0065+  05EB             
0066+  05EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  05EB             ; ITOA
0068+  05EB             ; 8bit value in BL
0069+  05EB             ; 2 byte ASCII result in A
0070+  05EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  05EB             itoa:
0072+  05EB DA          	push d
0073+  05EC D8          	push b
0074+  05ED A7 00       	mov bh, 0
0075+  05EF FD A4 04    	shr bl, 4	
0076+  05F2 74          	mov d, b
0077+  05F3 1F A9 05    	mov al, [d + s_hex_digits]
0078+  05F6 23          	mov ah, al
0079+  05F7             	
0080+  05F7 E5          	pop b
0081+  05F8 D8          	push b
0082+  05F9 A7 00       	mov bh, 0
0083+  05FB FD 87 0F    	and bl, $0F
0084+  05FE 74          	mov d, b
0085+  05FF 1F A9 05    	mov al, [d + s_hex_digits]
0086+  0602 E5          	pop b
0087+  0603 E7          	pop d
0088+  0604 09          	ret
0089+  0605             
0090+  0605             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0605             ; HEX STRING TO BINARY
0092+  0605             ; di = destination address
0093+  0605             ; si = source
0094+  0605             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0605             hex_to_int:
0096+  0605             hex_to_int_L1:
0097+  0605 F6          	lodsb					; load from [SI] to AL
0098+  0606 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0608 C6 15 06    	jz hex_to_int_ret
0100+  060B 36          	mov bh, al
0101+  060C F6          	lodsb
0102+  060D 2F          	mov bl, al
0103+  060E 07 D9 05    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0611 F7          	stosb					; store AL to [DI]
0105+  0612 0A 05 06    	jmp hex_to_int_L1
0106+  0615             hex_to_int_ret:
0107+  0615 09          	ret		
0108+  0616             
0109+  0616             
0110+  0616             
0111+  0616             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0616             ; GETCHAR
0113+  0616             ; char in ah
0114+  0616             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0616             getchar:
0116+  0616 DB          	push al
0117+  0617             getchar_retry:
0118+  0617 FD 0C       	sti
0119+  0619 19 01       	mov al, 1
0120+  061B 05 03       	syscall sys_io			; receive in AH
0121+  061D B9 00       	cmp al, 0			; check if any char was receive
0122+  061F C6 17 06    	je getchar_retry
0123+  0622 E8          	pop al
0124+  0623 09          	ret
0125+  0624             
0126+  0624             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0624             ; PUTCHAR
0128+  0624             ; char in ah
0129+  0624             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0624             putchar:
0131+  0624 D7          	push a
0132+  0625 19 00       	mov al, 0
0133+  0627 05 03       	syscall sys_io			; char in AH
0134+  0629 E4          	pop a
0135+  062A 09          	ret
0136+  062B             
0137+  062B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  062B             ;; INPUT A STRING
0139+  062B             ;; terminates with null
0140+  062B             ;; pointer in D
0141+  062B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  062B             gets:
0143+  062B D7          	push a
0144+  062C DA          	push d
0145+  062D             gets_loop:
0146+  062D FD 0C       	sti
0147+  062F 19 01       	mov al, 1
0148+  0631 05 03       	syscall sys_io			; receive in AH
0149+  0633 B9 00       	cmp al, 0				; check error code (AL)
0150+  0635 C6 2D 06    	je gets_loop			; if no char received, retry
0151+  0638             
0152+  0638 76 1B       	cmp ah, 27
0153+  063A C6 5B 06    	je gets_telnet_escape
0154+  063D 76 0A       	cmp ah, $0A				; LF
0155+  063F C6 B4 06    	je gets_end
0156+  0642 76 0D       	cmp ah, $0D				; CR
0157+  0644 C6 B4 06    	je gets_end
0158+  0647 76 5C       	cmp ah, $5C				; '\\'
0159+  0649 C6 8B 06    	je gets_escape
0160+  064C             	
0161+  064C 76 08       	cmp ah, $08			; check for backspace
0162+  064E C6 57 06    	je gets_backspace
0163+  0651             
0164+  0651 1A          	mov al, ah
0165+  0652 3E          	mov [d], al
0166+  0653 79          	inc d
0167+  0654 0A 2D 06    	jmp gets_loop
0168+  0657             gets_backspace:
0169+  0657 7F          	dec d
0170+  0658 0A 2D 06    	jmp gets_loop
0171+  065B             gets_telnet_escape:
0172+  065B FD 0C       	sti
0173+  065D 19 01       	mov al, 1
0174+  065F 05 03       	syscall sys_io				; receive in AH without echo
0175+  0661 B9 00       	cmp al, 0					; check error code (AL)
0176+  0663 C6 5B 06    	je gets_telnet_escape		; if no char received, retry
0177+  0666 76 5B       	cmp ah, '['
0178+  0668 C7 2D 06    	jne gets_loop
0179+  066B             gets_telnet_escape_phase2:
0180+  066B FD 0C       	sti
0181+  066D 19 01       	mov al, 1
0182+  066F 05 03       	syscall sys_io					; receive in AH without echo
0183+  0671 B9 00       	cmp al, 0						; check error code (AL)
0184+  0673 C6 6B 06    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0676 76 44       	cmp ah, 'D'
0186+  0678 C6 83 06    	je gets_left_arrow
0187+  067B 76 43       	cmp ah, 'C'
0188+  067D C6 87 06    	je gets_right_arrow
0189+  0680 0A 2D 06    	jmp gets_loop
0190+  0683             gets_left_arrow:
0191+  0683 7F          	dec d
0192+  0684 0A 2D 06    	jmp gets_loop
0193+  0687             gets_right_arrow:
0194+  0687 79          	inc d
0195+  0688 0A 2D 06    	jmp gets_loop
0196+  068B             gets_escape:
0197+  068B FD 0C       	sti
0198+  068D 19 01       	mov al, 1
0199+  068F 05 03       	syscall sys_io			; receive in AH
0200+  0691 B9 00       	cmp al, 0				; check error code (AL)
0201+  0693 C6 8B 06    	je gets_escape			; if no char received, retry
0202+  0696 76 6E       	cmp ah, 'n'
0203+  0698 C6 A6 06    	je gets_LF
0204+  069B 76 72       	cmp ah, 'r'
0205+  069D C6 AD 06    	je gets_CR
0206+  06A0 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  06A1 3E          	mov [d], al
0208+  06A2 79          	inc d
0209+  06A3 0A 2D 06    	jmp gets_loop
0210+  06A6             gets_LF:
0211+  06A6 19 0A       	mov al, $0A
0212+  06A8 3E          	mov [d], al
0213+  06A9 79          	inc d
0214+  06AA 0A 2D 06    	jmp gets_loop
0215+  06AD             gets_CR:
0216+  06AD 19 0D       	mov al, $0D
0217+  06AF 3E          	mov [d], al
0218+  06B0 79          	inc d
0219+  06B1 0A 2D 06    	jmp gets_loop
0220+  06B4             gets_end:
0221+  06B4 19 00       	mov al, 0
0222+  06B6 3E          	mov [d], al				; terminate string
0223+  06B7 E7          	pop d
0224+  06B8 E4          	pop a
0225+  06B9 09          	ret
0226+  06BA             
0227+  06BA             
0228+  06BA             
0229+  06BA             
0230+  06BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  06BA             ;; INPUT TEXT
0232+  06BA             ;; terminated with CTRL+D
0233+  06BA             ;; pointer in D
0234+  06BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  06BA             gettxt:
0236+  06BA D7          	push a
0237+  06BB DA          	push d
0238+  06BC             gettxt_loop:
0239+  06BC 19 01       	mov al, 1
0240+  06BE 05 03       	syscall sys_io			; receive in AH
0241+  06C0 B9 00       	cmp al, 0				; check error code (AL)
0242+  06C2 C6 BC 06    	je gettxt_loop		; if no char received, retry
0243+  06C5 76 04       	cmp ah, 4			; EOT
0244+  06C7 C6 05 07    	je gettxt_end
0245+  06CA 76 08       	cmp ah, $08			; check for backspace
0246+  06CC C6 01 07    	je gettxt_backspace
0247+  06CF 76 5C       	cmp ah, $5C				; '\\'
0248+  06D1 C6 DA 06    	je gettxt_escape
0249+  06D4 1A          	mov al, ah
0250+  06D5 3E          	mov [d], al
0251+  06D6 79          	inc d
0252+  06D7 0A BC 06    	jmp gettxt_loop
0253+  06DA             gettxt_escape:
0254+  06DA 19 01       	mov al, 1
0255+  06DC 05 03       	syscall sys_io			; receive in AH
0256+  06DE B9 00       	cmp al, 0				; check error code (AL)
0257+  06E0 C6 DA 06    	je gettxt_escape		; if no char received, retry
0258+  06E3 76 6E       	cmp ah, 'n'
0259+  06E5 C6 F3 06    	je gettxt_LF
0260+  06E8 76 72       	cmp ah, 'r'
0261+  06EA C6 FA 06    	je gettxt_CR
0262+  06ED 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  06EE 3E          	mov [d], al
0264+  06EF 79          	inc d
0265+  06F0 0A BC 06    	jmp gettxt_loop
0266+  06F3             gettxt_LF:
0267+  06F3 19 0A       	mov al, $0A
0268+  06F5 3E          	mov [d], al
0269+  06F6 79          	inc d
0270+  06F7 0A BC 06    	jmp gettxt_loop
0271+  06FA             gettxt_CR:
0272+  06FA 19 0D       	mov al, $0D
0273+  06FC 3E          	mov [d], al
0274+  06FD 79          	inc d
0275+  06FE 0A BC 06    	jmp gettxt_loop
0276+  0701             gettxt_backspace:
0277+  0701 7F          	dec d
0278+  0702 0A BC 06    	jmp gettxt_loop
0279+  0705             gettxt_end:
0280+  0705 19 00       	mov al, 0
0281+  0707 3E          	mov [d], al				; terminate string
0282+  0708 E7          	pop d
0283+  0709 E4          	pop a
0284+  070A 09          	ret
0285+  070B             
0286+  070B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  070B             ; PRINT NEW LINE
0288+  070B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  070B             printnl:
0290+  070B D7          	push a
0291+  070C 10 00 0A    	mov a, $0A00
0292+  070F 05 03       	syscall sys_io
0293+  0711 10 00 0D    	mov a, $0D00
0294+  0714 05 03       	syscall sys_io
0295+  0716 E4          	pop a
0296+  0717 09          	ret
0297+  0718             
0298+  0718             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0718             ; strtoint
0300+  0718             ; 4 digit hex string number in d
0301+  0718             ; integer returned in A
0302+  0718             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0718             strtointx:
0304+  0718 D8          	push b
0305+  0719 32          	mov bl, [d]
0306+  071A 37          	mov bh, bl
0307+  071B 33 01 00    	mov bl, [d + 1]
0308+  071E 07 D9 05    	call atoi				; convert to int in AL
0309+  0721 23          	mov ah, al				; move to AH
0310+  0722 33 02 00    	mov bl, [d + 2]
0311+  0725 37          	mov bh, bl
0312+  0726 33 03 00    	mov bl, [d + 3]
0313+  0729 07 D9 05    	call atoi				; convert to int in AL
0314+  072C E5          	pop b
0315+  072D 09          	ret
0316+  072E             
0317+  072E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  072E             ; strtoint
0319+  072E             ; 5 digit base10 string number in d
0320+  072E             ; integer returned in A
0321+  072E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  072E             strtoint:
0323+  072E E2          	push si
0324+  072F D8          	push b
0325+  0730 D9          	push c
0326+  0731 DA          	push d
0327+  0732 07 59 05    	call strlen			; get string length in C
0328+  0735 7E          	dec c
0329+  0736 FD 4E       	mov si, d
0330+  0738 12          	mov a, c
0331+  0739 FD 99       	shl a
0332+  073B 3B C1 05    	mov d, table_power
0333+  073E 59          	add d, a
0334+  073F 38 00 00    	mov c, 0
0335+  0742             strtoint_L0:
0336+  0742 F6          	lodsb			; load ASCII to al
0337+  0743 B9 00       	cmp al, 0
0338+  0745 C6 58 07    	je strtoint_end
0339+  0748 6F 30       	sub al, $30		; make into integer
0340+  074A 22 00       	mov ah, 0
0341+  074C 2A          	mov b, [d]
0342+  074D AC          	mul a, b			; result in B since it fits in 16bits
0343+  074E 11          	mov a, b
0344+  074F 28          	mov b, c
0345+  0750 54          	add a, b
0346+  0751 39          	mov c, a
0347+  0752 63 02 00    	sub d, 2
0348+  0755 0A 42 07    	jmp strtoint_L0
0349+  0758             strtoint_end:
0350+  0758 12          	mov a, c
0351+  0759 E7          	pop d
0352+  075A E6          	pop c
0353+  075B E5          	pop b
0354+  075C EF          	pop si
0355+  075D 09          	ret
0356+  075E             
0357+  075E             
0358+  075E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  075E             ; PRINT NULL TERMINATED STRING
0360+  075E             ; pointer in D
0361+  075E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  075E             puts:
0363+  075E D7          	push a
0364+  075F DA          	push d
0365+  0760             puts_L1:
0366+  0760 1E          	mov al, [d]
0367+  0761 B9 00       	cmp al, 0
0368+  0763 C6 6F 07    	jz puts_END
0369+  0766 23          	mov ah, al
0370+  0767 19 00       	mov al, 0
0371+  0769 05 03       	syscall sys_io
0372+  076B 79          	inc d
0373+  076C 0A 60 07    	jmp puts_L1
0374+  076F             puts_END:
0375+  076F E7          	pop d
0376+  0770 E4          	pop a
0377+  0771 09          	ret
0378+  0772             
0379+  0772             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0772             ; PRINT N SIZE STRING
0381+  0772             ; pointer in D
0382+  0772             ; size in C
0383+  0772             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0772             putsn:
0385+  0772 DB          	push al
0386+  0773 DA          	push d
0387+  0774 D9          	push c
0388+  0775             putsn_L0:
0389+  0775 1E          	mov al, [d]
0390+  0776 23          	mov ah, al
0391+  0777 19 00       	mov al, 0
0392+  0779 05 03       	syscall sys_io
0393+  077B 79          	inc d
0394+  077C 7E          	dec c	
0395+  077D C2 00 00    	cmp c, 0
0396+  0780 C7 75 07    	jne putsn_L0
0397+  0783             putsn_end:
0398+  0783 E6          	pop c
0399+  0784 E7          	pop d
0400+  0785 E8          	pop al
0401+  0786 09          	ret
0402+  0787             
0403+  0787             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0787             ; print 16bit decimal number
0405+  0787             ; input number in A
0406+  0787             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0787             print_u16d:
0408+  0787 D7          	push a
0409+  0788 D8          	push b
0410+  0789 26 10 27    	mov b, 10000
0411+  078C AE          	div a, b			; get 10000 coeff.
0412+  078D 07 B3 07    	call print_number
0413+  0790 11          	mov a, b
0414+  0791 26 E8 03    	mov b, 1000
0415+  0794 AE          	div a, b			; get 10000 coeff.
0416+  0795 07 B3 07    	call print_number
0417+  0798 11          	mov a, b
0418+  0799 26 64 00    	mov b, 100
0419+  079C AE          	div a, b
0420+  079D 07 B3 07    	call print_number
0421+  07A0 11          	mov a, b
0422+  07A1 26 0A 00    	mov b, 10
0423+  07A4 AE          	div a, b
0424+  07A5 07 B3 07    	call print_number
0425+  07A8 11          	mov a, b
0426+  07A9 6A 30       	add al, $30
0427+  07AB 23          	mov ah, al
0428+  07AC 19 00       	mov al, 0
0429+  07AE 05 03       	syscall sys_io	; print coeff
0430+  07B0 E5          	pop b
0431+  07B1 E4          	pop a
0432+  07B2 09          	ret
0433+  07B3             
0434+  07B3             
0435+  07B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  07B3             ; if A == 0, print space
0437+  07B3             ; else print A
0438+  07B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  07B3             print_number:
0440+  07B3 6A 30       	add al, $30
0441+  07B5 23          	mov ah, al
0442+  07B6 07 24 06    	call putchar
0443+  07B9 09          	ret
0444+  07BA             
0445+  07BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  07BA             ; PRINT 16BIT HEX INTEGER
0447+  07BA             ; integer value in reg B
0448+  07BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  07BA             print_u16x:
0450+  07BA D7          	push a
0451+  07BB D8          	push b
0452+  07BC DD          	push bl
0453+  07BD 30          	mov bl, bh
0454+  07BE 07 EB 05    	call itoa				; convert bh to char in A
0455+  07C1 2F          	mov bl, al				; save al
0456+  07C2 19 00       	mov al, 0
0457+  07C4 05 03       	syscall sys_io				; display AH
0458+  07C6 24          	mov ah, bl				; retrieve al
0459+  07C7 19 00       	mov al, 0
0460+  07C9 05 03       	syscall sys_io				; display AL
0461+  07CB             
0462+  07CB EA          	pop bl
0463+  07CC 07 EB 05    	call itoa				; convert bh to char in A
0464+  07CF 2F          	mov bl, al				; save al
0465+  07D0 19 00       	mov al, 0
0466+  07D2 05 03       	syscall sys_io				; display AH
0467+  07D4 24          	mov ah, bl				; retrieve al
0468+  07D5 19 00       	mov al, 0
0469+  07D7 05 03       	syscall sys_io				; display AL
0470+  07D9             
0471+  07D9 E5          	pop b
0472+  07DA E4          	pop a
0473+  07DB 09          	ret
0474+  07DC             
0475+  07DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  07DC             ; INPUT 16BIT HEX INTEGER
0477+  07DC             ; read 16bit integer into A
0478+  07DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  07DC             scan_u16x:
0480+  07DC F8 10 00    	enter 16
0481+  07DF D8          	push b
0482+  07E0 DA          	push d
0483+  07E1             
0484+  07E1 FA F1 FF    	lea d, [bp + -15]
0485+  07E4 07 2B 06    	call gets				; get number
0486+  07E7             
0487+  07E7 32          	mov bl, [d]
0488+  07E8 37          	mov bh, bl
0489+  07E9 33 01 00    	mov bl, [d + 1]
0490+  07EC 07 D9 05    	call atoi				; convert to int in AL
0491+  07EF 23          	mov ah, al				; move to AH
0492+  07F0             
0493+  07F0 33 02 00    	mov bl, [d + 2]
0494+  07F3 37          	mov bh, bl
0495+  07F4 33 03 00    	mov bl, [d + 3]
0496+  07F7 07 D9 05    	call atoi				; convert to int in AL
0497+  07FA             
0498+  07FA E7          	pop d
0499+  07FB E5          	pop b
0500+  07FC F9          	leave
0501+  07FD 09          	ret
0502+  07FE             
0503+  07FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  07FE             ; PRINT 8bit HEX INTEGER
0505+  07FE             ; integer value in reg bl
0506+  07FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  07FE             print_u8x:
0508+  07FE D7          	push a
0509+  07FF DD          	push bl
0510+  0800             
0511+  0800 07 EB 05    	call itoa				; convert bl to char in A
0512+  0803 2F          	mov bl, al				; save al
0513+  0804 19 00       	mov al, 0
0514+  0806 05 03       	syscall sys_io				; display AH
0515+  0808 24          	mov ah, bl				; retrieve al
0516+  0809 19 00       	mov al, 0
0517+  080B 05 03       	syscall sys_io				; display AL
0518+  080D             
0519+  080D EA          	pop bl
0520+  080E E4          	pop a
0521+  080F 09          	ret
0522+  0810             
0523+  0810             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0810             ; print 8bit decimal unsigned number
0525+  0810             ; input number in AL
0526+  0810             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0810             print_u8d:
0528+  0810 D7          	push a
0529+  0811 D8          	push b
0530+  0812             
0531+  0812 22 00       	mov ah, 0
0532+  0814 26 64 00    	mov b, 100
0533+  0817 AE          	div a, b
0534+  0818 D8          	push b			; save remainder
0535+  0819 B9 00       	cmp al, 0
0536+  081B C6 25 08    	je skip100
0537+  081E 6A 30       	add al, $30
0538+  0820 23          	mov ah, al
0539+  0821 19 00       	mov al, 0
0540+  0823 05 03       	syscall sys_io	; print coeff
0541+  0825             skip100:
0542+  0825 E4          	pop a
0543+  0826 22 00       	mov ah, 0
0544+  0828 26 0A 00    	mov b, 10
0545+  082B AE          	div a, b
0546+  082C D8          	push b			; save remainder
0547+  082D B9 00       	cmp al, 0
0548+  082F C6 39 08    	je skip10
0549+  0832 6A 30       	add al, $30
0550+  0834 23          	mov ah, al
0551+  0835 19 00       	mov al, 0
0552+  0837 05 03       	syscall sys_io	; print coeff
0553+  0839             skip10:
0554+  0839 E4          	pop a
0555+  083A 1B          	mov al, bl
0556+  083B 6A 30       	add al, $30
0557+  083D 23          	mov ah, al
0558+  083E 19 00       	mov al, 0
0559+  0840 05 03       	syscall sys_io	; print coeff
0560+  0842 E5          	pop b
0561+  0843 E4          	pop a
0562+  0844 09          	ret
0563+  0845             
0564+  0845             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0845             ; INPUT 8BIT HEX INTEGER
0566+  0845             ; read 8bit integer into AL
0567+  0845             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0845             scan_u8x:
0569+  0845 F8 04 00    	enter 4
0570+  0848 D8          	push b
0571+  0849 DA          	push d
0572+  084A             
0573+  084A FA FD FF    	lea d, [bp + -3]
0574+  084D 07 2B 06    	call gets				; get number
0575+  0850             
0576+  0850 32          	mov bl, [d]
0577+  0851 37          	mov bh, bl
0578+  0852 33 01 00    	mov bl, [d + 1]
0579+  0855 07 D9 05    	call atoi				; convert to int in AL
0580+  0858             
0581+  0858 E7          	pop d
0582+  0859 E5          	pop b
0583+  085A F9          	leave
0584+  085B 09          	ret
0585+  085C             
0586+  085C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  085C             ; input decimal number
0588+  085C             ; result in A
0589+  085C             ; 655'\0'
0590+  085C             ; low--------high
0591+  085C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  085C             scan_u16d:
0593+  085C F8 08 00    	enter 8
0594+  085F E2          	push si
0595+  0860 D8          	push b
0596+  0861 D9          	push c
0597+  0862 DA          	push d
0598+  0863 FA F9 FF    	lea d, [bp +- 7]
0599+  0866 07 2B 06    	call gets
0600+  0869 07 59 05    	call strlen			; get string length in C
0601+  086C 7E          	dec c
0602+  086D FD 4E       	mov si, d
0603+  086F 12          	mov a, c
0604+  0870 FD 99       	shl a
0605+  0872 3B C1 05    	mov d, table_power
0606+  0875 59          	add d, a
0607+  0876 38 00 00    	mov c, 0
0608+  0879             mul_loop:
0609+  0879 F6          	lodsb			; load ASCII to al
0610+  087A B9 00       	cmp al, 0
0611+  087C C6 8F 08    	je mul_exit
0612+  087F 6F 30       	sub al, $30		; make into integer
0613+  0881 22 00       	mov ah, 0
0614+  0883 2A          	mov b, [d]
0615+  0884 AC          	mul a, b			; result in B since it fits in 16bits
0616+  0885 11          	mov a, b
0617+  0886 28          	mov b, c
0618+  0887 54          	add a, b
0619+  0888 39          	mov c, a
0620+  0889 63 02 00    	sub d, 2
0621+  088C 0A 79 08    	jmp mul_loop
0622+  088F             mul_exit:
0623+  088F 12          	mov a, c
0624+  0890 E7          	pop d
0625+  0891 E6          	pop c
0626+  0892 E5          	pop b
0627+  0893 EF          	pop si
0628+  0894 F9          	leave
0629+  0895 09          	ret
0207   0896             ; --- END INCLUDE BLOCK
0208   0896             
0209   0896             
0210   0896             .end
tasm: Number of errors = 0
