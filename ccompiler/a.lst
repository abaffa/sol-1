0001   0000             ; --- FILENAME: life.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; n
0011   0408 26 E1 1E      mov b, _string_0
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 07 F2 04      call print
0015   0411 51 02 00      add sp, 2
0016   0414 07 FD 04      call getn
0017   0417 D7            push a
0018   0418 11            mov a, b
0019   0419 45 FD FF      mov [bp + -3], a ; n
0020   041C E4            pop a
0021   041D 07 67 04      call init_game
0022   0420             _for1_init:
0023   0420 26 00 00      mov b, 0
0024   0423 D7            push a
0025   0424 11            mov a, b
0026   0425 45 FF FF      mov [bp + -1], a ; i
0027   0428 E4            pop a
0028   0429             _for1_cond:
0029   0429 2C FF FF      mov b, [bp + -1] ; i
0030   042C D7            push a
0031   042D 11            mov a, b
0032   042E 2C FD FF      mov b, [bp + -3] ; n
0033   0431 B0            cmp a, b
0034   0432 0E            lodflgs
0035   0433 87 02         and al, %00000010 ; <
0036   0435 22 00         mov ah, 0
0037   0437 B9 00         cmp al, 0
0038   0439 0E            lodflgs
0039   043A 96            not al
0040   043B 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0041   043D 22 00         mov ah, 0
0042   043F 27            mov b, a
0043   0440 E4            pop a
0044   0441 C0 00 00      cmp b, 0
0045   0444 C6 61 04      je _for1_exit
0046   0447             _for1_block:
0047   0447             
0048   0447             ; --- BEGIN INLINE ASM BLOCK
0049   0447 3B 9C 1F      mov d, s_telnet_clear
0050   044A 07 41 21      call puts
0051   044D             ; --- END INLINE ASM BLOCK
0052   044D             
0053   044D 07 0D 05      call print_game
0054   0450 07 C5 05      call update_game
0055   0453             _for1_update:
0056   0453 2C FF FF      mov b, [bp + -1] ; i
0057   0456 FD 77         inc b
0058   0458 D7            push a
0059   0459 11            mov a, b
0060   045A 45 FF FF      mov [bp + -1], a ; i
0061   045D E4            pop a
0062   045E 0A 29 04      jmp _for1_cond
0063   0461             _for1_exit:
0064   0461 26 00 00      mov b, 0
0065   0464 F9            leave
0066   0465 05 0B         syscall sys_terminate_proc
0067   0467             init_game:
0068   0467 D2            push bp
0069   0468 9B            mov bp, sp
0070   0469 29 2B 14      mov b, [curr_state]
0071   046C 74            mov d, b
0072   046D 26 04 00      mov b, 4
0073   0470 10 4A 00      mov a, 74
0074   0473 AC            mul a, b
0075   0474 5A            add d, b
0076   0475 26 04 00      mov b, 4
0077   0478 10 02 00      mov a, 2
0078   047B AC            mul a, b
0079   047C 5A            add d, b
0080   047D DA            push d
0081   047E 26 01 00      mov b, 1
0082   0481 E7            pop d
0083   0482 11            mov a, b
0084   0483 43            mov [d], a
0085   0484 29 2B 14      mov b, [curr_state]
0086   0487 74            mov d, b
0087   0488 26 04 00      mov b, 4
0088   048B 10 4A 00      mov a, 74
0089   048E AC            mul a, b
0090   048F 5A            add d, b
0091   0490 26 05 00      mov b, 5
0092   0493 10 02 00      mov a, 2
0093   0496 AC            mul a, b
0094   0497 5A            add d, b
0095   0498 DA            push d
0096   0499 26 01 00      mov b, 1
0097   049C E7            pop d
0098   049D 11            mov a, b
0099   049E 43            mov [d], a
0100   049F 29 2B 14      mov b, [curr_state]
0101   04A2 74            mov d, b
0102   04A3 26 04 00      mov b, 4
0103   04A6 10 4A 00      mov a, 74
0104   04A9 AC            mul a, b
0105   04AA 5A            add d, b
0106   04AB 26 06 00      mov b, 6
0107   04AE 10 02 00      mov a, 2
0108   04B1 AC            mul a, b
0109   04B2 5A            add d, b
0110   04B3 DA            push d
0111   04B4 26 01 00      mov b, 1
0112   04B7 E7            pop d
0113   04B8 11            mov a, b
0114   04B9 43            mov [d], a
0115   04BA 29 2B 14      mov b, [curr_state]
0116   04BD 74            mov d, b
0117   04BE 26 03 00      mov b, 3
0118   04C1 10 4A 00      mov a, 74
0119   04C4 AC            mul a, b
0120   04C5 5A            add d, b
0121   04C6 26 06 00      mov b, 6
0122   04C9 10 02 00      mov a, 2
0123   04CC AC            mul a, b
0124   04CD 5A            add d, b
0125   04CE DA            push d
0126   04CF 26 01 00      mov b, 1
0127   04D2 E7            pop d
0128   04D3 11            mov a, b
0129   04D4 43            mov [d], a
0130   04D5 29 2B 14      mov b, [curr_state]
0131   04D8 74            mov d, b
0132   04D9 26 02 00      mov b, 2
0133   04DC 10 4A 00      mov a, 74
0134   04DF AC            mul a, b
0135   04E0 5A            add d, b
0136   04E1 26 05 00      mov b, 5
0137   04E4 10 02 00      mov a, 2
0138   04E7 AC            mul a, b
0139   04E8 5A            add d, b
0140   04E9 DA            push d
0141   04EA 26 01 00      mov b, 1
0142   04ED E7            pop d
0143   04EE 11            mov a, b
0144   04EF 43            mov [d], a
0145   04F0 F9            leave
0146   04F1 09            ret
0147   04F2             print:
0148   04F2 D2            push bp
0149   04F3 9B            mov bp, sp
0150   04F4             
0151   04F4             ; --- BEGIN INLINE ASM BLOCK
0152   04F4 17 05 00      mov a, [bp + 5]
0153   04F7 3C            mov d, a
0154   04F8 07 41 21      call puts
0155   04FB             ; --- END INLINE ASM BLOCK
0156   04FB             
0157   04FB F9            leave
0158   04FC 09            ret
0159   04FD             getn:
0160   04FD D2            push bp
0161   04FE 9B            mov bp, sp
0162   04FF 52 02 00      sub sp, 2 ; n
0163   0502             
0164   0502             ; --- BEGIN INLINE ASM BLOCK
0165   0502 07 3F 22      call scan_u16d
0166   0505 45 FF FF      mov [bp + -1], a
0167   0508             ; --- END INLINE ASM BLOCK
0168   0508             
0169   0508 2C FF FF      mov b, [bp + -1] ; n
0170   050B F9            leave
0171   050C 09            ret
0172   050D             print_game:
0173   050D D2            push bp
0174   050E 9B            mov bp, sp
0175   050F 52 02 00      sub sp, 2 ; i
0176   0512 52 02 00      sub sp, 2 ; j
0177   0515             _for2_init:
0178   0515 26 00 00      mov b, 0
0179   0518 D7            push a
0180   0519 11            mov a, b
0181   051A 45 FF FF      mov [bp + -1], a ; i
0182   051D E4            pop a
0183   051E             _for2_cond:
0184   051E 2C FF FF      mov b, [bp + -1] ; i
0185   0521 D7            push a
0186   0522 11            mov a, b
0187   0523 26 25 00      mov b, 37
0188   0526 B0            cmp a, b
0189   0527 0E            lodflgs
0190   0528 87 02         and al, %00000010 ; <
0191   052A 22 00         mov ah, 0
0192   052C B9 00         cmp al, 0
0193   052E 0E            lodflgs
0194   052F 96            not al
0195   0530 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0196   0532 22 00         mov ah, 0
0197   0534 27            mov b, a
0198   0535 E4            pop a
0199   0536 C0 00 00      cmp b, 0
0200   0539 C6 C3 05      je _for2_exit
0201   053C             _for2_block:
0202   053C             _for3_init:
0203   053C 26 00 00      mov b, 0
0204   053F D7            push a
0205   0540 11            mov a, b
0206   0541 45 FD FF      mov [bp + -3], a ; j
0207   0544 E4            pop a
0208   0545             _for3_cond:
0209   0545 2C FD FF      mov b, [bp + -3] ; j
0210   0548 D7            push a
0211   0549 11            mov a, b
0212   054A 26 25 00      mov b, 37
0213   054D B0            cmp a, b
0214   054E 0E            lodflgs
0215   054F 87 02         and al, %00000010 ; <
0216   0551 22 00         mov ah, 0
0217   0553 B9 00         cmp al, 0
0218   0555 0E            lodflgs
0219   0556 96            not al
0220   0557 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0221   0559 22 00         mov ah, 0
0222   055B 27            mov b, a
0223   055C E4            pop a
0224   055D C0 00 00      cmp b, 0
0225   0560 C6 A9 05      je _for3_exit
0226   0563             _for3_block:
0227   0563             _if4_cond:
0228   0563 29 2B 14      mov b, [curr_state]
0229   0566 D7            push a
0230   0567 74            mov d, b
0231   0568 2C FF FF      mov b, [bp + -1] ; i
0232   056B 10 4A 00      mov a, 74
0233   056E AC            mul a, b
0234   056F 5A            add d, b
0235   0570 2C FD FF      mov b, [bp + -3] ; j
0236   0573 10 02 00      mov a, 2
0237   0576 AC            mul a, b
0238   0577 5A            add d, b
0239   0578 2A            mov b, [d]
0240   0579 E4            pop a
0241   057A C0 00 00      cmp b, 0
0242   057D C6 8F 05      je _if4_else
0243   0580             _if4_true:
0244   0580 26 EF 1E      mov b, _string_1
0245   0583 FD AB         swp b
0246   0585 D8            push b
0247   0586 07 F2 04      call print
0248   0589 51 02 00      add sp, 2
0249   058C 0A 9B 05      jmp _if4_exit
0250   058F             _if4_else:
0251   058F 26 F1 1E      mov b, _string_2
0252   0592 FD AB         swp b
0253   0594 D8            push b
0254   0595 07 F2 04      call print
0255   0598 51 02 00      add sp, 2
0256   059B             _if4_exit:
0257   059B             _for3_update:
0258   059B 2C FD FF      mov b, [bp + -3] ; j
0259   059E FD 77         inc b
0260   05A0 D7            push a
0261   05A1 11            mov a, b
0262   05A2 45 FD FF      mov [bp + -3], a ; j
0263   05A5 E4            pop a
0264   05A6 0A 45 05      jmp _for3_cond
0265   05A9             _for3_exit:
0266   05A9 26 F3 1E      mov b, _string_3
0267   05AC FD AB         swp b
0268   05AE D8            push b
0269   05AF 07 F2 04      call print
0270   05B2 51 02 00      add sp, 2
0271   05B5             _for2_update:
0272   05B5 2C FF FF      mov b, [bp + -1] ; i
0273   05B8 FD 77         inc b
0274   05BA D7            push a
0275   05BB 11            mov a, b
0276   05BC 45 FF FF      mov [bp + -1], a ; i
0277   05BF E4            pop a
0278   05C0 0A 1E 05      jmp _for2_cond
0279   05C3             _for2_exit:
0280   05C3 F9            leave
0281   05C4 09            ret
0282   05C5             update_game:
0283   05C5 D2            push bp
0284   05C6 9B            mov bp, sp
0285   05C7 52 02 00      sub sp, 2 ; i
0286   05CA 52 02 00      sub sp, 2 ; j
0287   05CD 52 02 00      sub sp, 2 ; ni
0288   05D0 52 02 00      sub sp, 2 ; nj
0289   05D3 52 02 00      sub sp, 2 ; count
0290   05D6             _for5_init:
0291   05D6 26 00 00      mov b, 0
0292   05D9 D7            push a
0293   05DA 11            mov a, b
0294   05DB 45 FF FF      mov [bp + -1], a ; i
0295   05DE E4            pop a
0296   05DF             _for5_cond:
0297   05DF 2C FF FF      mov b, [bp + -1] ; i
0298   05E2 D7            push a
0299   05E3 11            mov a, b
0300   05E4 26 25 00      mov b, 37
0301   05E7 B0            cmp a, b
0302   05E8 0E            lodflgs
0303   05E9 87 02         and al, %00000010 ; <
0304   05EB 22 00         mov ah, 0
0305   05ED B9 00         cmp al, 0
0306   05EF 0E            lodflgs
0307   05F0 96            not al
0308   05F1 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0309   05F3 22 00         mov ah, 0
0310   05F5 27            mov b, a
0311   05F6 E4            pop a
0312   05F7 C0 00 00      cmp b, 0
0313   05FA C6 6F 06      je _for5_exit
0314   05FD             _for5_block:
0315   05FD             _for6_init:
0316   05FD 26 00 00      mov b, 0
0317   0600 D7            push a
0318   0601 11            mov a, b
0319   0602 45 FD FF      mov [bp + -3], a ; j
0320   0605 E4            pop a
0321   0606             _for6_cond:
0322   0606 2C FD FF      mov b, [bp + -3] ; j
0323   0609 D7            push a
0324   060A 11            mov a, b
0325   060B 26 25 00      mov b, 37
0326   060E B0            cmp a, b
0327   060F 0E            lodflgs
0328   0610 87 02         and al, %00000010 ; <
0329   0612 22 00         mov ah, 0
0330   0614 B9 00         cmp al, 0
0331   0616 0E            lodflgs
0332   0617 96            not al
0333   0618 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0334   061A 22 00         mov ah, 0
0335   061C 27            mov b, a
0336   061D E4            pop a
0337   061E C0 00 00      cmp b, 0
0338   0621 C6 61 06      je _for6_exit
0339   0624             _for6_block:
0340   0624 29 DF 1E      mov b, [next_state]
0341   0627 74            mov d, b
0342   0628 2C FF FF      mov b, [bp + -1] ; i
0343   062B 10 4A 00      mov a, 74
0344   062E AC            mul a, b
0345   062F 5A            add d, b
0346   0630 2C FD FF      mov b, [bp + -3] ; j
0347   0633 10 02 00      mov a, 2
0348   0636 AC            mul a, b
0349   0637 5A            add d, b
0350   0638 DA            push d
0351   0639 29 2B 14      mov b, [curr_state]
0352   063C D7            push a
0353   063D 74            mov d, b
0354   063E 2C FF FF      mov b, [bp + -1] ; i
0355   0641 10 4A 00      mov a, 74
0356   0644 AC            mul a, b
0357   0645 5A            add d, b
0358   0646 2C FD FF      mov b, [bp + -3] ; j
0359   0649 10 02 00      mov a, 2
0360   064C AC            mul a, b
0361   064D 5A            add d, b
0362   064E 2A            mov b, [d]
0363   064F E4            pop a
0364   0650 E7            pop d
0365   0651 11            mov a, b
0366   0652 43            mov [d], a
0367   0653             _for6_update:
0368   0653 2C FD FF      mov b, [bp + -3] ; j
0369   0656 FD 77         inc b
0370   0658 D7            push a
0371   0659 11            mov a, b
0372   065A 45 FD FF      mov [bp + -3], a ; j
0373   065D E4            pop a
0374   065E 0A 06 06      jmp _for6_cond
0375   0661             _for6_exit:
0376   0661             _for5_update:
0377   0661 2C FF FF      mov b, [bp + -1] ; i
0378   0664 FD 77         inc b
0379   0666 D7            push a
0380   0667 11            mov a, b
0381   0668 45 FF FF      mov [bp + -1], a ; i
0382   066B E4            pop a
0383   066C 0A DF 05      jmp _for5_cond
0384   066F             _for5_exit:
0385   066F             _for7_init:
0386   066F 26 01 00      mov b, 1
0387   0672 D7            push a
0388   0673 11            mov a, b
0389   0674 45 FF FF      mov [bp + -1], a ; i
0390   0677 E4            pop a
0391   0678             _for7_cond:
0392   0678 2C FF FF      mov b, [bp + -1] ; i
0393   067B D7            push a
0394   067C 11            mov a, b
0395   067D 26 25 00      mov b, 37
0396   0680 B0            cmp a, b
0397   0681 0E            lodflgs
0398   0682 87 02         and al, %00000010 ; <
0399   0684 22 00         mov ah, 0
0400   0686 B9 00         cmp al, 0
0401   0688 0E            lodflgs
0402   0689 96            not al
0403   068A 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0404   068C 22 00         mov ah, 0
0405   068E 27            mov b, a
0406   068F E4            pop a
0407   0690 C0 00 00      cmp b, 0
0408   0693 C6 DE 08      je _for7_exit
0409   0696             _for7_block:
0410   0696             _for8_init:
0411   0696 26 01 00      mov b, 1
0412   0699 D7            push a
0413   069A 11            mov a, b
0414   069B 45 FD FF      mov [bp + -3], a ; j
0415   069E E4            pop a
0416   069F             _for8_cond:
0417   069F 2C FD FF      mov b, [bp + -3] ; j
0418   06A2 D7            push a
0419   06A3 11            mov a, b
0420   06A4 26 25 00      mov b, 37
0421   06A7 B0            cmp a, b
0422   06A8 0E            lodflgs
0423   06A9 87 02         and al, %00000010 ; <
0424   06AB 22 00         mov ah, 0
0425   06AD B9 00         cmp al, 0
0426   06AF 0E            lodflgs
0427   06B0 96            not al
0428   06B1 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0429   06B3 22 00         mov ah, 0
0430   06B5 27            mov b, a
0431   06B6 E4            pop a
0432   06B7 C0 00 00      cmp b, 0
0433   06BA C6 D0 08      je _for8_exit
0434   06BD             _for8_block:
0435   06BD 26 00 00      mov b, 0
0436   06C0 D7            push a
0437   06C1 11            mov a, b
0438   06C2 45 F7 FF      mov [bp + -9], a ; count
0439   06C5 E4            pop a
0440   06C6             _for9_init:
0441   06C6 2C FF FF      mov b, [bp + -1] ; i
0442   06C9 D7            push a
0443   06CA 11            mov a, b
0444   06CB 26 01 00      mov b, 1
0445   06CE 60            sub a, b
0446   06CF 27            mov b, a
0447   06D0 E4            pop a
0448   06D1 D7            push a
0449   06D2 11            mov a, b
0450   06D3 45 FB FF      mov [bp + -5], a ; ni
0451   06D6 E4            pop a
0452   06D7             _for9_cond:
0453   06D7 2C FB FF      mov b, [bp + -5] ; ni
0454   06DA D7            push a
0455   06DB 11            mov a, b
0456   06DC 2C FF FF      mov b, [bp + -1] ; i
0457   06DF D7            push a
0458   06E0 11            mov a, b
0459   06E1 26 01 00      mov b, 1
0460   06E4 54            add a, b
0461   06E5 27            mov b, a
0462   06E6 E4            pop a
0463   06E7 B0            cmp a, b
0464   06E8 0E            lodflgs
0465   06E9 87 03         and al, %00000011 ; <=
0466   06EB 22 00         mov ah, 0
0467   06ED B9 00         cmp al, 0
0468   06EF 0E            lodflgs
0469   06F0 96            not al
0470   06F1 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0471   06F3 22 00         mov ah, 0
0472   06F5 27            mov b, a
0473   06F6 E4            pop a
0474   06F7 C0 00 00      cmp b, 0
0475   06FA C6 08 08      je _for9_exit
0476   06FD             _for9_block:
0477   06FD             _for10_init:
0478   06FD 2C FD FF      mov b, [bp + -3] ; j
0479   0700 D7            push a
0480   0701 11            mov a, b
0481   0702 26 01 00      mov b, 1
0482   0705 60            sub a, b
0483   0706 27            mov b, a
0484   0707 E4            pop a
0485   0708 D7            push a
0486   0709 11            mov a, b
0487   070A 45 F9 FF      mov [bp + -7], a ; nj
0488   070D E4            pop a
0489   070E             _for10_cond:
0490   070E 2C F9 FF      mov b, [bp + -7] ; nj
0491   0711 D7            push a
0492   0712 11            mov a, b
0493   0713 2C FD FF      mov b, [bp + -3] ; j
0494   0716 D7            push a
0495   0717 11            mov a, b
0496   0718 26 01 00      mov b, 1
0497   071B 54            add a, b
0498   071C 27            mov b, a
0499   071D E4            pop a
0500   071E B0            cmp a, b
0501   071F 0E            lodflgs
0502   0720 87 03         and al, %00000011 ; <=
0503   0722 22 00         mov ah, 0
0504   0724 B9 00         cmp al, 0
0505   0726 0E            lodflgs
0506   0727 96            not al
0507   0728 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0508   072A 22 00         mov ah, 0
0509   072C 27            mov b, a
0510   072D E4            pop a
0511   072E C0 00 00      cmp b, 0
0512   0731 C6 FA 07      je _for10_exit
0513   0734             _for10_block:
0514   0734             _if11_cond:
0515   0734 2C FB FF      mov b, [bp + -5] ; ni
0516   0737 D7            push a
0517   0738 11            mov a, b
0518   0739 26 25 00      mov b, 37
0519   073C B0            cmp a, b
0520   073D 0E            lodflgs
0521   073E 87 02         and al, %00000010 ; <
0522   0740 22 00         mov ah, 0
0523   0742 B9 00         cmp al, 0
0524   0744 0E            lodflgs
0525   0745 96            not al
0526   0746 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0527   0748 22 00         mov ah, 0
0528   074A 27            mov b, a
0529   074B E4            pop a
0530   074C D7            push a
0531   074D 11            mov a, b
0532   074E B9 00         cmp al, 0
0533   0750 0E            lodflgs
0534   0751 96            not al
0535   0752 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0536   0754 22 00         mov ah, 0
0537   0756 2C F9 FF      mov b, [bp + -7] ; nj
0538   0759 D7            push a
0539   075A 11            mov a, b
0540   075B 26 25 00      mov b, 37
0541   075E B0            cmp a, b
0542   075F 0E            lodflgs
0543   0760 87 02         and al, %00000010 ; <
0544   0762 22 00         mov ah, 0
0545   0764 B9 00         cmp al, 0
0546   0766 0E            lodflgs
0547   0767 96            not al
0548   0768 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0549   076A 22 00         mov ah, 0
0550   076C 27            mov b, a
0551   076D E4            pop a
0552   076E D7            push a
0553   076F C1 00         cmp bl, 0
0554   0771 0E            lodflgs
0555   0772 96            not al
0556   0773 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0557   0775 22 00         mov ah, 0
0558   0777 27            mov b, a
0559   0778 E4            pop a
0560   0779 86            and a, b
0561   077A 27            mov b, a
0562   077B E4            pop a
0563   077C C0 00 00      cmp b, 0
0564   077F C6 EC 07      je _if11_exit
0565   0782             _if11_true:
0566   0782             _if12_cond:
0567   0782 2C FB FF      mov b, [bp + -5] ; ni
0568   0785 D7            push a
0569   0786 11            mov a, b
0570   0787 2C FF FF      mov b, [bp + -1] ; i
0571   078A B0            cmp a, b
0572   078B 0E            lodflgs
0573   078C 87 01         and al, %00000001
0574   078E 8F 01         xor al, %00000001 ; !=
0575   0790 22 00         mov ah, 0
0576   0792 B9 00         cmp al, 0
0577   0794 0E            lodflgs
0578   0795 96            not al
0579   0796 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0580   0798 22 00         mov ah, 0
0581   079A 27            mov b, a
0582   079B E4            pop a
0583   079C D7            push a
0584   079D 11            mov a, b
0585   079E 2C F9 FF      mov b, [bp + -7] ; nj
0586   07A1 D7            push a
0587   07A2 11            mov a, b
0588   07A3 2C FD FF      mov b, [bp + -3] ; j
0589   07A6 B0            cmp a, b
0590   07A7 0E            lodflgs
0591   07A8 87 01         and al, %00000001
0592   07AA 8F 01         xor al, %00000001 ; !=
0593   07AC 22 00         mov ah, 0
0594   07AE B9 00         cmp al, 0
0595   07B0 0E            lodflgs
0596   07B1 96            not al
0597   07B2 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0598   07B4 22 00         mov ah, 0
0599   07B6 27            mov b, a
0600   07B7 E4            pop a
0601   07B8 8A            or a, b
0602   07B9 27            mov b, a
0603   07BA E4            pop a
0604   07BB C0 00 00      cmp b, 0
0605   07BE C6 E9 07      je _if12_exit
0606   07C1             _if12_true:
0607   07C1 2C F7 FF      mov b, [bp + -9] ; count
0608   07C4 D7            push a
0609   07C5 11            mov a, b
0610   07C6 29 2B 14      mov b, [curr_state]
0611   07C9 D7            push a
0612   07CA 74            mov d, b
0613   07CB 2C FB FF      mov b, [bp + -5] ; ni
0614   07CE 10 4A 00      mov a, 74
0615   07D1 AC            mul a, b
0616   07D2 5A            add d, b
0617   07D3 2C F9 FF      mov b, [bp + -7] ; nj
0618   07D6 10 02 00      mov a, 2
0619   07D9 AC            mul a, b
0620   07DA 5A            add d, b
0621   07DB 2A            mov b, [d]
0622   07DC E4            pop a
0623   07DD 54            add a, b
0624   07DE 27            mov b, a
0625   07DF E4            pop a
0626   07E0 D7            push a
0627   07E1 11            mov a, b
0628   07E2 45 F7 FF      mov [bp + -9], a ; count
0629   07E5 E4            pop a
0630   07E6 0A E9 07      jmp _if12_exit
0631   07E9             _if12_exit:
0632   07E9 0A EC 07      jmp _if11_exit
0633   07EC             _if11_exit:
0634   07EC             _for10_update:
0635   07EC 2C F9 FF      mov b, [bp + -7] ; nj
0636   07EF FD 77         inc b
0637   07F1 D7            push a
0638   07F2 11            mov a, b
0639   07F3 45 F9 FF      mov [bp + -7], a ; nj
0640   07F6 E4            pop a
0641   07F7 0A 0E 07      jmp _for10_cond
0642   07FA             _for10_exit:
0643   07FA             _for9_update:
0644   07FA 2C FB FF      mov b, [bp + -5] ; ni
0645   07FD FD 77         inc b
0646   07FF D7            push a
0647   0800 11            mov a, b
0648   0801 45 FB FF      mov [bp + -5], a ; ni
0649   0804 E4            pop a
0650   0805 0A D7 06      jmp _for9_cond
0651   0808             _for9_exit:
0652   0808             _if13_cond:
0653   0808 29 2B 14      mov b, [curr_state]
0654   080B D7            push a
0655   080C 74            mov d, b
0656   080D 2C FF FF      mov b, [bp + -1] ; i
0657   0810 10 4A 00      mov a, 74
0658   0813 AC            mul a, b
0659   0814 5A            add d, b
0660   0815 2C FD FF      mov b, [bp + -3] ; j
0661   0818 10 02 00      mov a, 2
0662   081B AC            mul a, b
0663   081C 5A            add d, b
0664   081D 2A            mov b, [d]
0665   081E E4            pop a
0666   081F C0 00 00      cmp b, 0
0667   0822 C6 86 08      je _if13_else
0668   0825             _if13_true:
0669   0825             _if14_cond:
0670   0825 2C F7 FF      mov b, [bp + -9] ; count
0671   0828 D7            push a
0672   0829 11            mov a, b
0673   082A 26 02 00      mov b, 2
0674   082D B0            cmp a, b
0675   082E 0E            lodflgs
0676   082F 87 02         and al, %00000010 ; <
0677   0831 22 00         mov ah, 0
0678   0833 B9 00         cmp al, 0
0679   0835 0E            lodflgs
0680   0836 96            not al
0681   0837 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0682   0839 22 00         mov ah, 0
0683   083B 27            mov b, a
0684   083C E4            pop a
0685   083D D7            push a
0686   083E 11            mov a, b
0687   083F 2C F7 FF      mov b, [bp + -9] ; count
0688   0842 D7            push a
0689   0843 11            mov a, b
0690   0844 26 03 00      mov b, 3
0691   0847 B0            cmp a, b
0692   0848 0E            lodflgs
0693   0849 87 03         and al, %00000011
0694   084B B9 00         cmp al, %00000000
0695   084D 0E            lodflgs
0696   084E 87 01         and al, %00000001 ; >
0697   0850 22 00         mov ah, 0
0698   0852 B9 00         cmp al, 0
0699   0854 0E            lodflgs
0700   0855 96            not al
0701   0856 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0702   0858 22 00         mov ah, 0
0703   085A 27            mov b, a
0704   085B E4            pop a
0705   085C 8A            or a, b
0706   085D 27            mov b, a
0707   085E E4            pop a
0708   085F C0 00 00      cmp b, 0
0709   0862 C6 83 08      je _if14_exit
0710   0865             _if14_true:
0711   0865 29 DF 1E      mov b, [next_state]
0712   0868 74            mov d, b
0713   0869 2C FF FF      mov b, [bp + -1] ; i
0714   086C 10 4A 00      mov a, 74
0715   086F AC            mul a, b
0716   0870 5A            add d, b
0717   0871 2C FD FF      mov b, [bp + -3] ; j
0718   0874 10 02 00      mov a, 2
0719   0877 AC            mul a, b
0720   0878 5A            add d, b
0721   0879 DA            push d
0722   087A 26 00 00      mov b, 0
0723   087D E7            pop d
0724   087E 11            mov a, b
0725   087F 43            mov [d], a
0726   0880 0A 83 08      jmp _if14_exit
0727   0883             _if14_exit:
0728   0883 0A C2 08      jmp _if13_exit
0729   0886             _if13_else:
0730   0886             _if15_cond:
0731   0886 2C F7 FF      mov b, [bp + -9] ; count
0732   0889 D7            push a
0733   088A 11            mov a, b
0734   088B 26 03 00      mov b, 3
0735   088E B0            cmp a, b
0736   088F 0E            lodflgs
0737   0890 87 01         and al, %00000001 ; ==
0738   0892 22 00         mov ah, 0
0739   0894 B9 00         cmp al, 0
0740   0896 0E            lodflgs
0741   0897 96            not al
0742   0898 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0743   089A 22 00         mov ah, 0
0744   089C 27            mov b, a
0745   089D E4            pop a
0746   089E C0 00 00      cmp b, 0
0747   08A1 C6 C2 08      je _if15_exit
0748   08A4             _if15_true:
0749   08A4 29 DF 1E      mov b, [next_state]
0750   08A7 74            mov d, b
0751   08A8 2C FF FF      mov b, [bp + -1] ; i
0752   08AB 10 4A 00      mov a, 74
0753   08AE AC            mul a, b
0754   08AF 5A            add d, b
0755   08B0 2C FD FF      mov b, [bp + -3] ; j
0756   08B3 10 02 00      mov a, 2
0757   08B6 AC            mul a, b
0758   08B7 5A            add d, b
0759   08B8 DA            push d
0760   08B9 26 01 00      mov b, 1
0761   08BC E7            pop d
0762   08BD 11            mov a, b
0763   08BE 43            mov [d], a
0764   08BF 0A C2 08      jmp _if15_exit
0765   08C2             _if15_exit:
0766   08C2             _if13_exit:
0767   08C2             _for8_update:
0768   08C2 2C FD FF      mov b, [bp + -3] ; j
0769   08C5 FD 77         inc b
0770   08C7 D7            push a
0771   08C8 11            mov a, b
0772   08C9 45 FD FF      mov [bp + -3], a ; j
0773   08CC E4            pop a
0774   08CD 0A 9F 06      jmp _for8_cond
0775   08D0             _for8_exit:
0776   08D0             _for7_update:
0777   08D0 2C FF FF      mov b, [bp + -1] ; i
0778   08D3 FD 77         inc b
0779   08D5 D7            push a
0780   08D6 11            mov a, b
0781   08D7 45 FF FF      mov [bp + -1], a ; i
0782   08DA E4            pop a
0783   08DB 0A 78 06      jmp _for7_cond
0784   08DE             _for7_exit:
0785   08DE             _for16_init:
0786   08DE 26 00 00      mov b, 0
0787   08E1 D7            push a
0788   08E2 11            mov a, b
0789   08E3 45 FF FF      mov [bp + -1], a ; i
0790   08E6 E4            pop a
0791   08E7             _for16_cond:
0792   08E7 2C FF FF      mov b, [bp + -1] ; i
0793   08EA D7            push a
0794   08EB 11            mov a, b
0795   08EC 26 25 00      mov b, 37
0796   08EF B0            cmp a, b
0797   08F0 0E            lodflgs
0798   08F1 87 02         and al, %00000010 ; <
0799   08F3 22 00         mov ah, 0
0800   08F5 B9 00         cmp al, 0
0801   08F7 0E            lodflgs
0802   08F8 96            not al
0803   08F9 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0804   08FB 22 00         mov ah, 0
0805   08FD 27            mov b, a
0806   08FE E4            pop a
0807   08FF C0 00 00      cmp b, 0
0808   0902 C6 77 09      je _for16_exit
0809   0905             _for16_block:
0810   0905             _for17_init:
0811   0905 26 00 00      mov b, 0
0812   0908 D7            push a
0813   0909 11            mov a, b
0814   090A 45 FD FF      mov [bp + -3], a ; j
0815   090D E4            pop a
0816   090E             _for17_cond:
0817   090E 2C FD FF      mov b, [bp + -3] ; j
0818   0911 D7            push a
0819   0912 11            mov a, b
0820   0913 26 25 00      mov b, 37
0821   0916 B0            cmp a, b
0822   0917 0E            lodflgs
0823   0918 87 02         and al, %00000010 ; <
0824   091A 22 00         mov ah, 0
0825   091C B9 00         cmp al, 0
0826   091E 0E            lodflgs
0827   091F 96            not al
0828   0920 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0829   0922 22 00         mov ah, 0
0830   0924 27            mov b, a
0831   0925 E4            pop a
0832   0926 C0 00 00      cmp b, 0
0833   0929 C6 69 09      je _for17_exit
0834   092C             _for17_block:
0835   092C 29 2B 14      mov b, [curr_state]
0836   092F 74            mov d, b
0837   0930 2C FF FF      mov b, [bp + -1] ; i
0838   0933 10 4A 00      mov a, 74
0839   0936 AC            mul a, b
0840   0937 5A            add d, b
0841   0938 2C FD FF      mov b, [bp + -3] ; j
0842   093B 10 02 00      mov a, 2
0843   093E AC            mul a, b
0844   093F 5A            add d, b
0845   0940 DA            push d
0846   0941 29 DF 1E      mov b, [next_state]
0847   0944 D7            push a
0848   0945 74            mov d, b
0849   0946 2C FF FF      mov b, [bp + -1] ; i
0850   0949 10 4A 00      mov a, 74
0851   094C AC            mul a, b
0852   094D 5A            add d, b
0853   094E 2C FD FF      mov b, [bp + -3] ; j
0854   0951 10 02 00      mov a, 2
0855   0954 AC            mul a, b
0856   0955 5A            add d, b
0857   0956 2A            mov b, [d]
0858   0957 E4            pop a
0859   0958 E7            pop d
0860   0959 11            mov a, b
0861   095A 43            mov [d], a
0862   095B             _for17_update:
0863   095B 2C FD FF      mov b, [bp + -3] ; j
0864   095E FD 77         inc b
0865   0960 D7            push a
0866   0961 11            mov a, b
0867   0962 45 FD FF      mov [bp + -3], a ; j
0868   0965 E4            pop a
0869   0966 0A 0E 09      jmp _for17_cond
0870   0969             _for17_exit:
0871   0969             _for16_update:
0872   0969 2C FF FF      mov b, [bp + -1] ; i
0873   096C FD 77         inc b
0874   096E D7            push a
0875   096F 11            mov a, b
0876   0970 45 FF FF      mov [bp + -1], a ; i
0877   0973 E4            pop a
0878   0974 0A E7 08      jmp _for16_cond
0879   0977             _for16_exit:
0880   0977 F9            leave
0881   0978 09            ret
0882   0979             ; --- END TEXT BLOCK
0883   0979             
0884   0979             ; --- BEGIN DATA BLOCK
0885   0979             curr_state_data: 
0886   0979 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0886   097D 00 00 00 00 
0886   0981 00 00 00 00 
0886   0985 00 00 00 00 
0886   0989 00 00 00 00 
0886   098D 00 00 00 00 
0886   0991 00 00 00 00 
0886   0995 00 00 00 00 
0886   0999 00 00 00 00 
0886   099D 00 00 00 00 
0886   09A1 00 00 00 00 
0886   09A5 00 00 00 00 
0886   09A9 00 00 00 00 
0886   09AD 00 00 00 00 
0886   09B1 00 00 00 00 
0887   09B5 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0887   09B9 00 00 00 00 
0887   09BD 00 00 00 00 
0887   09C1 00 00 00 00 
0887   09C5 00 00 00 00 
0887   09C9 00 00 00 00 
0887   09CD 00 00 00 00 
0887   09D1 00 00 00 00 
0887   09D5 00 00 00 00 
0887   09D9 00 00 00 00 
0887   09DD 00 00 00 00 
0887   09E1 00 00 00 00 
0887   09E5 00 00 00 00 
0887   09E9 00 00 00 00 
0887   09ED 00 00 00 00 
0888   09F1 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0888   09F5 00 00 00 00 
0888   09F9 00 00 00 00 
0888   09FD 00 00 00 00 
0888   0A01 00 00 00 00 
0888   0A05 00 00 00 00 
0888   0A09 00 00 00 00 
0888   0A0D 00 00 00 00 
0888   0A11 00 00 00 00 
0888   0A15 00 00 00 00 
0888   0A19 00 00 00 00 
0888   0A1D 00 00 00 00 
0888   0A21 00 00 00 00 
0888   0A25 00 00 00 00 
0888   0A29 00 00 00 00 
0889   0A2D 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0889   0A31 00 00 00 00 
0889   0A35 00 00 00 00 
0889   0A39 00 00 00 00 
0889   0A3D 00 00 00 00 
0889   0A41 00 00 00 00 
0889   0A45 01 00 00 00 
0889   0A49 00 00 00 00 
0889   0A4D 00 00 00 00 
0889   0A51 00 00 00 00 
0889   0A55 00 00 00 00 
0889   0A59 00 00 00 00 
0889   0A5D 00 00 00 00 
0889   0A61 00 00 00 00 
0889   0A65 00 00 00 00 
0890   0A69 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
0890   0A6D 00 00 00 00 
0890   0A71 00 00 00 00 
0890   0A75 00 00 00 00 
0890   0A79 00 00 00 00 
0890   0A7D 00 00 00 00 
0890   0A81 00 00 00 00 
0890   0A85 00 00 00 00 
0890   0A89 00 00 00 00 
0890   0A8D 00 00 01 00 
0890   0A91 00 00 01 00 
0890   0A95 00 00 00 00 
0890   0A99 00 00 00 00 
0890   0A9D 00 00 00 00 
0890   0AA1 00 00 00 00 
0891   0AA5 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
0891   0AA9 00 00 00 00 
0891   0AAD 00 00 00 00 
0891   0AB1 00 00 00 00 
0891   0AB5 00 00 00 00 
0891   0AB9 00 00 00 00 
0891   0ABD 00 00 00 00 
0891   0AC1 00 00 00 00 
0891   0AC5 00 00 00 00 
0891   0AC9 00 00 00 00 
0891   0ACD 00 00 00 00 
0891   0AD1 00 00 00 00 
0891   0AD5 00 00 00 00 
0891   0AD9 00 00 00 00 
0891   0ADD 01 00 00 00 
0892   0AE1 01 00 00 00 .dw 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
0892   0AE5 00 00 00 00 
0892   0AE9 00 00 00 00 
0892   0AED 00 00 00 00 
0892   0AF1 00 00 00 00 
0892   0AF5 00 00 00 00 
0892   0AF9 00 00 00 00 
0892   0AFD 00 00 00 00 
0892   0B01 00 00 00 00 
0892   0B05 00 00 00 00 
0892   0B09 00 00 00 00 
0892   0B0D 00 00 00 00 
0892   0B11 00 00 00 00 
0892   0B15 01 00 00 00 
0892   0B19 00 00 00 00 
0893   0B1D 01 00 00 00 .dw 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0893   0B21 00 00 00 00 
0893   0B25 00 00 01 00 
0893   0B29 01 00 00 00 
0893   0B2D 00 00 00 00 
0893   0B31 00 00 00 00 
0893   0B35 00 00 00 00 
0893   0B39 00 00 00 00 
0893   0B3D 00 00 00 00 
0893   0B41 00 00 01 00 
0893   0B45 01 00 00 00 
0893   0B49 00 00 00 00 
0893   0B4D 00 00 00 00 
0893   0B51 00 00 00 00 
0893   0B55 00 00 00 00 
0894   0B59 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 
0894   0B5D 00 00 00 00 
0894   0B61 00 00 00 00 
0894   0B65 01 00 01 00 
0894   0B69 00 00 00 00 
0894   0B6D 00 00 00 00 
0894   0B71 00 00 00 00 
0894   0B75 01 00 01 00 
0894   0B79 00 00 00 00 
0894   0B7D 00 00 00 00 
0894   0B81 00 00 00 00 
0894   0B85 00 00 00 00 
0894   0B89 00 00 00 00 
0894   0B8D 00 00 00 00 
0894   0B91 01 00 01 00 
0895   0B95 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
0895   0B99 00 00 00 00 
0895   0B9D 00 00 00 00 
0895   0BA1 00 00 00 00 
0895   0BA5 00 00 00 00 
0895   0BA9 00 00 00 00 
0895   0BAD 00 00 00 00 
0895   0BB1 01 00 00 00 
0895   0BB5 00 00 00 00 
0895   0BB9 01 00 00 00 
0895   0BBD 00 00 00 00 
0895   0BC1 00 00 01 00 
0895   0BC5 01 00 00 00 
0895   0BC9 00 00 00 00 
0895   0BCD 00 00 00 00 
0896   0BD1 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 
0896   0BD5 00 00 00 00 
0896   0BD9 00 00 00 00 
0896   0BDD 00 00 01 00 
0896   0BE1 01 00 00 00 
0896   0BE5 00 00 00 00 
0896   0BE9 00 00 00 00 
0896   0BED 00 00 00 00 
0896   0BF1 00 00 00 00 
0896   0BF5 00 00 00 00 
0896   0BF9 00 00 00 00 
0896   0BFD 00 00 01 00 
0896   0C01 00 00 00 00 
0896   0C05 00 00 01 00 
0896   0C09 00 00 00 00 
0897   0C0D 00 00 00 00 .dw 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0897   0C11 01 00 01 00 
0897   0C15 00 00 00 00 
0897   0C19 00 00 00 00 
0897   0C1D 00 00 00 00 
0897   0C21 00 00 00 00 
0897   0C25 00 00 00 00 
0897   0C29 00 00 00 00 
0897   0C2D 01 00 01 00 
0897   0C31 00 00 00 00 
0897   0C35 00 00 00 00 
0897   0C39 00 00 00 00 
0897   0C3D 00 00 00 00 
0897   0C41 00 00 00 00 
0897   0C45 00 00 00 00 
0898   0C49 00 00 00 00 .dw 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 
0898   0C4D 01 00 00 00 
0898   0C51 00 00 00 00 
0898   0C55 01 00 00 00 
0898   0C59 00 00 00 00 
0898   0C5D 00 00 01 00 
0898   0C61 01 00 00 00 
0898   0C65 00 00 00 00 
0898   0C69 00 00 00 00 
0898   0C6D 00 00 00 00 
0898   0C71 00 00 00 00 
0898   0C75 00 00 00 00 
0898   0C79 00 00 01 00 
0898   0C7D 01 00 00 00 
0898   0C81 00 00 00 00 
0899   0C85 01 00 01 00 .dw 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
0899   0C89 00 00 00 00 
0899   0C8D 00 00 00 00 
0899   0C91 00 00 00 00 
0899   0C95 00 00 00 00 
0899   0C99 01 00 00 00 
0899   0C9D 00 00 00 00 
0899   0CA1 00 00 00 00 
0899   0CA5 01 00 00 00 
0899   0CA9 00 00 00 00 
0899   0CAD 01 00 01 00 
0899   0CB1 00 00 00 00 
0899   0CB5 00 00 00 00 
0899   0CB9 00 00 00 00 
0899   0CBD 00 00 00 00 
0900   0CC1 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 
0900   0CC5 00 00 00 00 
0900   0CC9 00 00 00 00 
0900   0CCD 00 00 00 00 
0900   0CD1 00 00 01 00 
0900   0CD5 01 00 00 00 
0900   0CD9 00 00 00 00 
0900   0CDD 00 00 00 00 
0900   0CE1 00 00 00 00 
0900   0CE5 00 00 01 00 
0900   0CE9 00 00 00 00 
0900   0CED 00 00 00 00 
0900   0CF1 00 00 01 00 
0900   0CF5 00 00 00 00 
0900   0CF9 00 00 01 00 
0901   0CFD 01 00 00 00 .dw 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
0901   0D01 00 00 00 00 
0901   0D05 00 00 00 00 
0901   0D09 00 00 00 00 
0901   0D0D 00 00 00 00 
0901   0D11 00 00 00 00 
0901   0D15 00 00 00 00 
0901   0D19 00 00 00 00 
0901   0D1D 00 00 00 00 
0901   0D21 00 00 00 00 
0901   0D25 00 00 00 00 
0901   0D29 00 00 00 00 
0901   0D2D 00 00 00 00 
0901   0D31 00 00 00 00 
0901   0D35 00 00 01 00 
0902   0D39 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 
0902   0D3D 00 00 01 00 
0902   0D41 00 00 00 00 
0902   0D45 00 00 00 00 
0902   0D49 01 00 01 00 
0902   0D4D 00 00 00 00 
0902   0D51 00 00 00 00 
0902   0D55 00 00 00 00 
0902   0D59 00 00 00 00 
0902   0D5D 00 00 00 00 
0902   0D61 00 00 00 00 
0902   0D65 01 00 01 00 
0902   0D69 00 00 00 00 
0902   0D6D 00 00 01 00 
0902   0D71 01 00 00 00 
0903   0D75 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
0903   0D79 00 00 00 00 
0903   0D7D 00 00 00 00 
0903   0D81 00 00 01 00 
0903   0D85 00 00 00 00 
0903   0D89 00 00 01 00 
0903   0D8D 00 00 01 00 
0903   0D91 01 00 00 00 
0903   0D95 00 00 00 00 
0903   0D99 00 00 01 00 
0903   0D9D 00 00 01 00 
0903   0DA1 00 00 00 00 
0903   0DA5 00 00 00 00 
0903   0DA9 00 00 00 00 
0903   0DAD 00 00 00 00 
0904   0DB1 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
0904   0DB5 00 00 00 00 
0904   0DB9 00 00 00 00 
0904   0DBD 00 00 00 00 
0904   0DC1 00 00 00 00 
0904   0DC5 00 00 00 00 
0904   0DC9 00 00 00 00 
0904   0DCD 00 00 00 00 
0904   0DD1 01 00 00 00 
0904   0DD5 00 00 00 00 
0904   0DD9 00 00 00 00 
0904   0DDD 01 00 00 00 
0904   0DE1 00 00 00 00 
0904   0DE5 00 00 00 00 
0904   0DE9 00 00 00 00 
0905   0DED 01 00 00 00 .dw 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
0905   0DF1 00 00 00 00 
0905   0DF5 00 00 00 00 
0905   0DF9 00 00 00 00 
0905   0DFD 00 00 00 00 
0905   0E01 00 00 00 00 
0905   0E05 00 00 00 00 
0905   0E09 00 00 00 00 
0905   0E0D 00 00 00 00 
0905   0E11 00 00 00 00 
0905   0E15 00 00 00 00 
0905   0E19 00 00 00 00 
0905   0E1D 00 00 00 00 
0905   0E21 01 00 00 00 
0905   0E25 00 00 00 00 
0906   0E29 01 00 00 00 .dw 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0906   0E2D 00 00 00 00 
0906   0E31 00 00 00 00 
0906   0E35 00 00 00 00 
0906   0E39 00 00 00 00 
0906   0E3D 00 00 00 00 
0906   0E41 00 00 00 00 
0906   0E45 00 00 00 00 
0906   0E49 00 00 00 00 
0906   0E4D 00 00 00 00 
0906   0E51 00 00 00 00 
0906   0E55 00 00 00 00 
0906   0E59 00 00 00 00 
0906   0E5D 00 00 00 00 
0906   0E61 00 00 00 00 
0907   0E65 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0907   0E69 00 00 00 00 
0907   0E6D 00 00 00 00 
0907   0E71 01 00 01 00 
0907   0E75 00 00 00 00 
0907   0E79 00 00 00 00 
0907   0E7D 00 00 00 00 
0907   0E81 00 00 00 00 
0907   0E85 00 00 00 00 
0907   0E89 00 00 00 00 
0907   0E8D 00 00 00 00 
0907   0E91 00 00 00 00 
0907   0E95 00 00 00 00 
0907   0E99 00 00 00 00 
0907   0E9D 00 00 00 00 
0908   0EA1 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
0908   0EA5 00 00 00 00 
0908   0EA9 00 00 00 00 
0908   0EAD 00 00 00 00 
0908   0EB1 00 00 00 00 
0908   0EB5 00 00 00 00 
0908   0EB9 00 00 00 00 
0908   0EBD 01 00 00 00 
0908   0EC1 00 00 00 00 
0908   0EC5 01 00 00 00 
0908   0EC9 00 00 00 00 
0908   0ECD 00 00 01 00 
0908   0ED1 01 00 00 00 
0908   0ED5 00 00 00 00 
0908   0ED9 00 00 00 00 
0909   0EDD 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 
0909   0EE1 00 00 00 00 
0909   0EE5 00 00 00 00 
0909   0EE9 00 00 01 00 
0909   0EED 01 00 00 00 
0909   0EF1 00 00 00 00 
0909   0EF5 00 00 00 00 
0909   0EF9 00 00 00 00 
0909   0EFD 00 00 00 00 
0909   0F01 00 00 00 00 
0909   0F05 00 00 00 00 
0909   0F09 00 00 01 00 
0909   0F0D 00 00 00 00 
0909   0F11 00 00 01 00 
0909   0F15 00 00 00 00 
0910   0F19 00 00 00 00 .dw 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0910   0F1D 01 00 01 00 
0910   0F21 00 00 00 00 
0910   0F25 00 00 00 00 
0910   0F29 00 00 00 00 
0910   0F2D 00 00 00 00 
0910   0F31 00 00 00 00 
0910   0F35 00 00 00 00 
0910   0F39 01 00 01 00 
0910   0F3D 00 00 00 00 
0910   0F41 00 00 00 00 
0910   0F45 00 00 00 00 
0910   0F49 00 00 00 00 
0910   0F4D 00 00 00 00 
0910   0F51 00 00 00 00 
0911   0F55 00 00 00 00 .dw 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 
0911   0F59 01 00 00 00 
0911   0F5D 00 00 00 00 
0911   0F61 01 00 00 00 
0911   0F65 00 00 00 00 
0911   0F69 00 00 01 00 
0911   0F6D 01 00 00 00 
0911   0F71 00 00 00 00 
0911   0F75 00 00 00 00 
0911   0F79 00 00 00 00 
0911   0F7D 00 00 00 00 
0911   0F81 00 00 00 00 
0911   0F85 00 00 01 00 
0911   0F89 01 00 00 00 
0911   0F8D 00 00 00 00 
0912   0F91 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
0912   0F95 00 00 00 00 
0912   0F99 00 00 00 00 
0912   0F9D 00 00 00 00 
0912   0FA1 00 00 00 00 
0912   0FA5 00 00 00 00 
0912   0FA9 00 00 00 00 
0912   0FAD 00 00 00 00 
0912   0FB1 00 00 00 00 
0912   0FB5 00 00 00 00 
0912   0FB9 00 00 00 00 
0912   0FBD 00 00 00 00 
0912   0FC1 01 00 00 00 
0912   0FC5 00 00 00 00 
0912   0FC9 00 00 00 00 
0913   0FCD 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0913   0FD1 00 00 00 00 
0913   0FD5 00 00 00 00 
0913   0FD9 00 00 00 00 
0913   0FDD 00 00 00 00 
0913   0FE1 00 00 00 00 
0913   0FE5 00 00 00 00 
0913   0FE9 00 00 00 00 
0913   0FED 00 00 00 00 
0913   0FF1 00 00 00 00 
0913   0FF5 00 00 00 00 
0913   0FF9 00 00 00 00 
0913   0FFD 00 00 00 00 
0913   1001 00 00 00 00 
0913   1005 00 00 00 00 
0914   1009 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0914   100D 00 00 01 00 
0914   1011 00 00 00 00 
0914   1015 00 00 00 00 
0914   1019 00 00 00 00 
0914   101D 00 00 00 00 
0914   1021 00 00 00 00 
0914   1025 00 00 00 00 
0914   1029 00 00 00 00 
0914   102D 00 00 00 00 
0914   1031 00 00 00 00 
0914   1035 00 00 00 00 
0914   1039 00 00 00 00 
0914   103D 00 00 00 00 
0914   1041 00 00 00 00 
0915   1045 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0915   1049 00 00 00 00 
0915   104D 00 00 00 00 
0915   1051 00 00 00 00 
0915   1055 00 00 00 00 
0915   1059 00 00 00 00 
0915   105D 01 00 00 00 
0915   1061 00 00 00 00 
0915   1065 00 00 00 00 
0915   1069 00 00 00 00 
0915   106D 00 00 00 00 
0915   1071 00 00 00 00 
0915   1075 00 00 00 00 
0915   1079 00 00 
0916   107B 00 00 00 00 .fill 944, 0
0916   107F 00 00 00 00 
0916   1083 00 00 00 00 
0916   1087 00 00 00 00 
0916   108B 00 00 00 00 
0916   108F 00 00 00 00 
0916   1093 00 00 00 00 
0916   1097 00 00 00 00 
0916   109B 00 00 00 00 
0916   109F 00 00 00 00 
0916   10A3 00 00 00 00 
0916   10A7 00 00 00 00 
0916   10AB 00 00 00 00 
0916   10AF 00 00 00 00 
0916   10B3 00 00 00 00 
0916   10B7 00 00 00 00 
0916   10BB 00 00 00 00 
0916   10BF 00 00 00 00 
0916   10C3 00 00 00 00 
0916   10C7 00 00 00 00 
0916   10CB 00 00 00 00 
0916   10CF 00 00 00 00 
0916   10D3 00 00 00 00 
0916   10D7 00 00 00 00 
0916   10DB 00 00 00 00 
0916   10DF 00 00 00 00 
0916   10E3 00 00 00 00 
0916   10E7 00 00 00 00 
0916   10EB 00 00 00 00 
0916   10EF 00 00 00 00 
0916   10F3 00 00 00 00 
0916   10F7 00 00 00 00 
0916   10FB 00 00 00 00 
0916   10FF 00 00 00 00 
0916   1103 00 00 00 00 
0916   1107 00 00 00 00 
0916   110B 00 00 00 00 
0916   110F 00 00 00 00 
0916   1113 00 00 00 00 
0916   1117 00 00 00 00 
0916   111B 00 00 00 00 
0916   111F 00 00 00 00 
0916   1123 00 00 00 00 
0916   1127 00 00 00 00 
0916   112B 00 00 00 00 
0916   112F 00 00 00 00 
0916   1133 00 00 00 00 
0916   1137 00 00 00 00 
0916   113B 00 00 00 00 
0916   113F 00 00 00 00 
0916   1143 00 00 00 00 
0916   1147 00 00 00 00 
0916   114B 00 00 00 00 
0916   114F 00 00 00 00 
0916   1153 00 00 00 00 
0916   1157 00 00 00 00 
0916   115B 00 00 00 00 
0916   115F 00 00 00 00 
0916   1163 00 00 00 00 
0916   1167 00 00 00 00 
0916   116B 00 00 00 00 
0916   116F 00 00 00 00 
0916   1173 00 00 00 00 
0916   1177 00 00 00 00 
0916   117B 00 00 00 00 
0916   117F 00 00 00 00 
0916   1183 00 00 00 00 
0916   1187 00 00 00 00 
0916   118B 00 00 00 00 
0916   118F 00 00 00 00 
0916   1193 00 00 00 00 
0916   1197 00 00 00 00 
0916   119B 00 00 00 00 
0916   119F 00 00 00 00 
0916   11A3 00 00 00 00 
0916   11A7 00 00 00 00 
0916   11AB 00 00 00 00 
0916   11AF 00 00 00 00 
0916   11B3 00 00 00 00 
0916   11B7 00 00 00 00 
0916   11BB 00 00 00 00 
0916   11BF 00 00 00 00 
0916   11C3 00 00 00 00 
0916   11C7 00 00 00 00 
0916   11CB 00 00 00 00 
0916   11CF 00 00 00 00 
0916   11D3 00 00 00 00 
0916   11D7 00 00 00 00 
0916   11DB 00 00 00 00 
0916   11DF 00 00 00 00 
0916   11E3 00 00 00 00 
0916   11E7 00 00 00 00 
0916   11EB 00 00 00 00 
0916   11EF 00 00 00 00 
0916   11F3 00 00 00 00 
0916   11F7 00 00 00 00 
0916   11FB 00 00 00 00 
0916   11FF 00 00 00 00 
0916   1203 00 00 00 00 
0916   1207 00 00 00 00 
0916   120B 00 00 00 00 
0916   120F 00 00 00 00 
0916   1213 00 00 00 00 
0916   1217 00 00 00 00 
0916   121B 00 00 00 00 
0916   121F 00 00 00 00 
0916   1223 00 00 00 00 
0916   1227 00 00 00 00 
0916   122B 00 00 00 00 
0916   122F 00 00 00 00 
0916   1233 00 00 00 00 
0916   1237 00 00 00 00 
0916   123B 00 00 00 00 
0916   123F 00 00 00 00 
0916   1243 00 00 00 00 
0916   1247 00 00 00 00 
0916   124B 00 00 00 00 
0916   124F 00 00 00 00 
0916   1253 00 00 00 00 
0916   1257 00 00 00 00 
0916   125B 00 00 00 00 
0916   125F 00 00 00 00 
0916   1263 00 00 00 00 
0916   1267 00 00 00 00 
0916   126B 00 00 00 00 
0916   126F 00 00 00 00 
0916   1273 00 00 00 00 
0916   1277 00 00 00 00 
0916   127B 00 00 00 00 
0916   127F 00 00 00 00 
0916   1283 00 00 00 00 
0916   1287 00 00 00 00 
0916   128B 00 00 00 00 
0916   128F 00 00 00 00 
0916   1293 00 00 00 00 
0916   1297 00 00 00 00 
0916   129B 00 00 00 00 
0916   129F 00 00 00 00 
0916   12A3 00 00 00 00 
0916   12A7 00 00 00 00 
0916   12AB 00 00 00 00 
0916   12AF 00 00 00 00 
0916   12B3 00 00 00 00 
0916   12B7 00 00 00 00 
0916   12BB 00 00 00 00 
0916   12BF 00 00 00 00 
0916   12C3 00 00 00 00 
0916   12C7 00 00 00 00 
0916   12CB 00 00 00 00 
0916   12CF 00 00 00 00 
0916   12D3 00 00 00 00 
0916   12D7 00 00 00 00 
0916   12DB 00 00 00 00 
0916   12DF 00 00 00 00 
0916   12E3 00 00 00 00 
0916   12E7 00 00 00 00 
0916   12EB 00 00 00 00 
0916   12EF 00 00 00 00 
0916   12F3 00 00 00 00 
0916   12F7 00 00 00 00 
0916   12FB 00 00 00 00 
0916   12FF 00 00 00 00 
0916   1303 00 00 00 00 
0916   1307 00 00 00 00 
0916   130B 00 00 00 00 
0916   130F 00 00 00 00 
0916   1313 00 00 00 00 
0916   1317 00 00 00 00 
0916   131B 00 00 00 00 
0916   131F 00 00 00 00 
0916   1323 00 00 00 00 
0916   1327 00 00 00 00 
0916   132B 00 00 00 00 
0916   132F 00 00 00 00 
0916   1333 00 00 00 00 
0916   1337 00 00 00 00 
0916   133B 00 00 00 00 
0916   133F 00 00 00 00 
0916   1343 00 00 00 00 
0916   1347 00 00 00 00 
0916   134B 00 00 00 00 
0916   134F 00 00 00 00 
0916   1353 00 00 00 00 
0916   1357 00 00 00 00 
0916   135B 00 00 00 00 
0916   135F 00 00 00 00 
0916   1363 00 00 00 00 
0916   1367 00 00 00 00 
0916   136B 00 00 00 00 
0916   136F 00 00 00 00 
0916   1373 00 00 00 00 
0916   1377 00 00 00 00 
0916   137B 00 00 00 00 
0916   137F 00 00 00 00 
0916   1383 00 00 00 00 
0916   1387 00 00 00 00 
0916   138B 00 00 00 00 
0916   138F 00 00 00 00 
0916   1393 00 00 00 00 
0916   1397 00 00 00 00 
0916   139B 00 00 00 00 
0916   139F 00 00 00 00 
0916   13A3 00 00 00 00 
0916   13A7 00 00 00 00 
0916   13AB 00 00 00 00 
0916   13AF 00 00 00 00 
0916   13B3 00 00 00 00 
0916   13B7 00 00 00 00 
0916   13BB 00 00 00 00 
0916   13BF 00 00 00 00 
0916   13C3 00 00 00 00 
0916   13C7 00 00 00 00 
0916   13CB 00 00 00 00 
0916   13CF 00 00 00 00 
0916   13D3 00 00 00 00 
0916   13D7 00 00 00 00 
0916   13DB 00 00 00 00 
0916   13DF 00 00 00 00 
0916   13E3 00 00 00 00 
0916   13E7 00 00 00 00 
0916   13EB 00 00 00 00 
0916   13EF 00 00 00 00 
0916   13F3 00 00 00 00 
0916   13F7 00 00 00 00 
0916   13FB 00 00 00 00 
0916   13FF 00 00 00 00 
0916   1403 00 00 00 00 
0916   1407 00 00 00 00 
0916   140B 00 00 00 00 
0916   140F 00 00 00 00 
0916   1413 00 00 00 00 
0916   1417 00 00 00 00 
0916   141B 00 00 00 00 
0916   141F 00 00 00 00 
0916   1423 00 00 00 00 
0916   1427 00 00 00 00 
0917   142B 79 09       curr_state: .dw curr_state_data
0918   142D 00 00 00 00 next_state_data: .fill 2738, 0
0918   1431 00 00 00 00 
0918   1435 00 00 00 00 
0918   1439 00 00 00 00 
0918   143D 00 00 00 00 
0918   1441 00 00 00 00 
0918   1445 00 00 00 00 
0918   1449 00 00 00 00 
0918   144D 00 00 00 00 
0918   1451 00 00 00 00 
0918   1455 00 00 00 00 
0918   1459 00 00 00 00 
0918   145D 00 00 00 00 
0918   1461 00 00 00 00 
0918   1465 00 00 00 00 
0918   1469 00 00 00 00 
0918   146D 00 00 00 00 
0918   1471 00 00 00 00 
0918   1475 00 00 00 00 
0918   1479 00 00 00 00 
0918   147D 00 00 00 00 
0918   1481 00 00 00 00 
0918   1485 00 00 00 00 
0918   1489 00 00 00 00 
0918   148D 00 00 00 00 
0918   1491 00 00 00 00 
0918   1495 00 00 00 00 
0918   1499 00 00 00 00 
0918   149D 00 00 00 00 
0918   14A1 00 00 00 00 
0918   14A5 00 00 00 00 
0918   14A9 00 00 00 00 
0918   14AD 00 00 00 00 
0918   14B1 00 00 00 00 
0918   14B5 00 00 00 00 
0918   14B9 00 00 00 00 
0918   14BD 00 00 00 00 
0918   14C1 00 00 00 00 
0918   14C5 00 00 00 00 
0918   14C9 00 00 00 00 
0918   14CD 00 00 00 00 
0918   14D1 00 00 00 00 
0918   14D5 00 00 00 00 
0918   14D9 00 00 00 00 
0918   14DD 00 00 00 00 
0918   14E1 00 00 00 00 
0918   14E5 00 00 00 00 
0918   14E9 00 00 00 00 
0918   14ED 00 00 00 00 
0918   14F1 00 00 00 00 
0918   14F5 00 00 00 00 
0918   14F9 00 00 00 00 
0918   14FD 00 00 00 00 
0918   1501 00 00 00 00 
0918   1505 00 00 00 00 
0918   1509 00 00 00 00 
0918   150D 00 00 00 00 
0918   1511 00 00 00 00 
0918   1515 00 00 00 00 
0918   1519 00 00 00 00 
0918   151D 00 00 00 00 
0918   1521 00 00 00 00 
0918   1525 00 00 00 00 
0918   1529 00 00 00 00 
0918   152D 00 00 00 00 
0918   1531 00 00 00 00 
0918   1535 00 00 00 00 
0918   1539 00 00 00 00 
0918   153D 00 00 00 00 
0918   1541 00 00 00 00 
0918   1545 00 00 00 00 
0918   1549 00 00 00 00 
0918   154D 00 00 00 00 
0918   1551 00 00 00 00 
0918   1555 00 00 00 00 
0918   1559 00 00 00 00 
0918   155D 00 00 00 00 
0918   1561 00 00 00 00 
0918   1565 00 00 00 00 
0918   1569 00 00 00 00 
0918   156D 00 00 00 00 
0918   1571 00 00 00 00 
0918   1575 00 00 00 00 
0918   1579 00 00 00 00 
0918   157D 00 00 00 00 
0918   1581 00 00 00 00 
0918   1585 00 00 00 00 
0918   1589 00 00 00 00 
0918   158D 00 00 00 00 
0918   1591 00 00 00 00 
0918   1595 00 00 00 00 
0918   1599 00 00 00 00 
0918   159D 00 00 00 00 
0918   15A1 00 00 00 00 
0918   15A5 00 00 00 00 
0918   15A9 00 00 00 00 
0918   15AD 00 00 00 00 
0918   15B1 00 00 00 00 
0918   15B5 00 00 00 00 
0918   15B9 00 00 00 00 
0918   15BD 00 00 00 00 
0918   15C1 00 00 00 00 
0918   15C5 00 00 00 00 
0918   15C9 00 00 00 00 
0918   15CD 00 00 00 00 
0918   15D1 00 00 00 00 
0918   15D5 00 00 00 00 
0918   15D9 00 00 00 00 
0918   15DD 00 00 00 00 
0918   15E1 00 00 00 00 
0918   15E5 00 00 00 00 
0918   15E9 00 00 00 00 
0918   15ED 00 00 00 00 
0918   15F1 00 00 00 00 
0918   15F5 00 00 00 00 
0918   15F9 00 00 00 00 
0918   15FD 00 00 00 00 
0918   1601 00 00 00 00 
0918   1605 00 00 00 00 
0918   1609 00 00 00 00 
0918   160D 00 00 00 00 
0918   1611 00 00 00 00 
0918   1615 00 00 00 00 
0918   1619 00 00 00 00 
0918   161D 00 00 00 00 
0918   1621 00 00 00 00 
0918   1625 00 00 00 00 
0918   1629 00 00 00 00 
0918   162D 00 00 00 00 
0918   1631 00 00 00 00 
0918   1635 00 00 00 00 
0918   1639 00 00 00 00 
0918   163D 00 00 00 00 
0918   1641 00 00 00 00 
0918   1645 00 00 00 00 
0918   1649 00 00 00 00 
0918   164D 00 00 00 00 
0918   1651 00 00 00 00 
0918   1655 00 00 00 00 
0918   1659 00 00 00 00 
0918   165D 00 00 00 00 
0918   1661 00 00 00 00 
0918   1665 00 00 00 00 
0918   1669 00 00 00 00 
0918   166D 00 00 00 00 
0918   1671 00 00 00 00 
0918   1675 00 00 00 00 
0918   1679 00 00 00 00 
0918   167D 00 00 00 00 
0918   1681 00 00 00 00 
0918   1685 00 00 00 00 
0918   1689 00 00 00 00 
0918   168D 00 00 00 00 
0918   1691 00 00 00 00 
0918   1695 00 00 00 00 
0918   1699 00 00 00 00 
0918   169D 00 00 00 00 
0918   16A1 00 00 00 00 
0918   16A5 00 00 00 00 
0918   16A9 00 00 00 00 
0918   16AD 00 00 00 00 
0918   16B1 00 00 00 00 
0918   16B5 00 00 00 00 
0918   16B9 00 00 00 00 
0918   16BD 00 00 00 00 
0918   16C1 00 00 00 00 
0918   16C5 00 00 00 00 
0918   16C9 00 00 00 00 
0918   16CD 00 00 00 00 
0918   16D1 00 00 00 00 
0918   16D5 00 00 00 00 
0918   16D9 00 00 00 00 
0918   16DD 00 00 00 00 
0918   16E1 00 00 00 00 
0918   16E5 00 00 00 00 
0918   16E9 00 00 00 00 
0918   16ED 00 00 00 00 
0918   16F1 00 00 00 00 
0918   16F5 00 00 00 00 
0918   16F9 00 00 00 00 
0918   16FD 00 00 00 00 
0918   1701 00 00 00 00 
0918   1705 00 00 00 00 
0918   1709 00 00 00 00 
0918   170D 00 00 00 00 
0918   1711 00 00 00 00 
0918   1715 00 00 00 00 
0918   1719 00 00 00 00 
0918   171D 00 00 00 00 
0918   1721 00 00 00 00 
0918   1725 00 00 00 00 
0918   1729 00 00 00 00 
0918   172D 00 00 00 00 
0918   1731 00 00 00 00 
0918   1735 00 00 00 00 
0918   1739 00 00 00 00 
0918   173D 00 00 00 00 
0918   1741 00 00 00 00 
0918   1745 00 00 00 00 
0918   1749 00 00 00 00 
0918   174D 00 00 00 00 
0918   1751 00 00 00 00 
0918   1755 00 00 00 00 
0918   1759 00 00 00 00 
0918   175D 00 00 00 00 
0918   1761 00 00 00 00 
0918   1765 00 00 00 00 
0918   1769 00 00 00 00 
0918   176D 00 00 00 00 
0918   1771 00 00 00 00 
0918   1775 00 00 00 00 
0918   1779 00 00 00 00 
0918   177D 00 00 00 00 
0918   1781 00 00 00 00 
0918   1785 00 00 00 00 
0918   1789 00 00 00 00 
0918   178D 00 00 00 00 
0918   1791 00 00 00 00 
0918   1795 00 00 00 00 
0918   1799 00 00 00 00 
0918   179D 00 00 00 00 
0918   17A1 00 00 00 00 
0918   17A5 00 00 00 00 
0918   17A9 00 00 00 00 
0918   17AD 00 00 00 00 
0918   17B1 00 00 00 00 
0918   17B5 00 00 00 00 
0918   17B9 00 00 00 00 
0918   17BD 00 00 00 00 
0918   17C1 00 00 00 00 
0918   17C5 00 00 00 00 
0918   17C9 00 00 00 00 
0918   17CD 00 00 00 00 
0918   17D1 00 00 00 00 
0918   17D5 00 00 00 00 
0918   17D9 00 00 00 00 
0918   17DD 00 00 00 00 
0918   17E1 00 00 00 00 
0918   17E5 00 00 00 00 
0918   17E9 00 00 00 00 
0918   17ED 00 00 00 00 
0918   17F1 00 00 00 00 
0918   17F5 00 00 00 00 
0918   17F9 00 00 00 00 
0918   17FD 00 00 00 00 
0918   1801 00 00 00 00 
0918   1805 00 00 00 00 
0918   1809 00 00 00 00 
0918   180D 00 00 00 00 
0918   1811 00 00 00 00 
0918   1815 00 00 00 00 
0918   1819 00 00 00 00 
0918   181D 00 00 00 00 
0918   1821 00 00 00 00 
0918   1825 00 00 00 00 
0918   1829 00 00 00 00 
0918   182D 00 00 00 00 
0918   1831 00 00 00 00 
0918   1835 00 00 00 00 
0918   1839 00 00 00 00 
0918   183D 00 00 00 00 
0918   1841 00 00 00 00 
0918   1845 00 00 00 00 
0918   1849 00 00 00 00 
0918   184D 00 00 00 00 
0918   1851 00 00 00 00 
0918   1855 00 00 00 00 
0918   1859 00 00 00 00 
0918   185D 00 00 00 00 
0918   1861 00 00 00 00 
0918   1865 00 00 00 00 
0918   1869 00 00 00 00 
0918   186D 00 00 00 00 
0918   1871 00 00 00 00 
0918   1875 00 00 00 00 
0918   1879 00 00 00 00 
0918   187D 00 00 00 00 
0918   1881 00 00 00 00 
0918   1885 00 00 00 00 
0918   1889 00 00 00 00 
0918   188D 00 00 00 00 
0918   1891 00 00 00 00 
0918   1895 00 00 00 00 
0918   1899 00 00 00 00 
0918   189D 00 00 00 00 
0918   18A1 00 00 00 00 
0918   18A5 00 00 00 00 
0918   18A9 00 00 00 00 
0918   18AD 00 00 00 00 
0918   18B1 00 00 00 00 
0918   18B5 00 00 00 00 
0918   18B9 00 00 00 00 
0918   18BD 00 00 00 00 
0918   18C1 00 00 00 00 
0918   18C5 00 00 00 00 
0918   18C9 00 00 00 00 
0918   18CD 00 00 00 00 
0918   18D1 00 00 00 00 
0918   18D5 00 00 00 00 
0918   18D9 00 00 00 00 
0918   18DD 00 00 00 00 
0918   18E1 00 00 00 00 
0918   18E5 00 00 00 00 
0918   18E9 00 00 00 00 
0918   18ED 00 00 00 00 
0918   18F1 00 00 00 00 
0918   18F5 00 00 00 00 
0918   18F9 00 00 00 00 
0918   18FD 00 00 00 00 
0918   1901 00 00 00 00 
0918   1905 00 00 00 00 
0918   1909 00 00 00 00 
0918   190D 00 00 00 00 
0918   1911 00 00 00 00 
0918   1915 00 00 00 00 
0918   1919 00 00 00 00 
0918   191D 00 00 00 00 
0918   1921 00 00 00 00 
0918   1925 00 00 00 00 
0918   1929 00 00 00 00 
0918   192D 00 00 00 00 
0918   1931 00 00 00 00 
0918   1935 00 00 00 00 
0918   1939 00 00 00 00 
0918   193D 00 00 00 00 
0918   1941 00 00 00 00 
0918   1945 00 00 00 00 
0918   1949 00 00 00 00 
0918   194D 00 00 00 00 
0918   1951 00 00 00 00 
0918   1955 00 00 00 00 
0918   1959 00 00 00 00 
0918   195D 00 00 00 00 
0918   1961 00 00 00 00 
0918   1965 00 00 00 00 
0918   1969 00 00 00 00 
0918   196D 00 00 00 00 
0918   1971 00 00 00 00 
0918   1975 00 00 00 00 
0918   1979 00 00 00 00 
0918   197D 00 00 00 00 
0918   1981 00 00 00 00 
0918   1985 00 00 00 00 
0918   1989 00 00 00 00 
0918   198D 00 00 00 00 
0918   1991 00 00 00 00 
0918   1995 00 00 00 00 
0918   1999 00 00 00 00 
0918   199D 00 00 00 00 
0918   19A1 00 00 00 00 
0918   19A5 00 00 00 00 
0918   19A9 00 00 00 00 
0918   19AD 00 00 00 00 
0918   19B1 00 00 00 00 
0918   19B5 00 00 00 00 
0918   19B9 00 00 00 00 
0918   19BD 00 00 00 00 
0918   19C1 00 00 00 00 
0918   19C5 00 00 00 00 
0918   19C9 00 00 00 00 
0918   19CD 00 00 00 00 
0918   19D1 00 00 00 00 
0918   19D5 00 00 00 00 
0918   19D9 00 00 00 00 
0918   19DD 00 00 00 00 
0918   19E1 00 00 00 00 
0918   19E5 00 00 00 00 
0918   19E9 00 00 00 00 
0918   19ED 00 00 00 00 
0918   19F1 00 00 00 00 
0918   19F5 00 00 00 00 
0918   19F9 00 00 00 00 
0918   19FD 00 00 00 00 
0918   1A01 00 00 00 00 
0918   1A05 00 00 00 00 
0918   1A09 00 00 00 00 
0918   1A0D 00 00 00 00 
0918   1A11 00 00 00 00 
0918   1A15 00 00 00 00 
0918   1A19 00 00 00 00 
0918   1A1D 00 00 00 00 
0918   1A21 00 00 00 00 
0918   1A25 00 00 00 00 
0918   1A29 00 00 00 00 
0918   1A2D 00 00 00 00 
0918   1A31 00 00 00 00 
0918   1A35 00 00 00 00 
0918   1A39 00 00 00 00 
0918   1A3D 00 00 00 00 
0918   1A41 00 00 00 00 
0918   1A45 00 00 00 00 
0918   1A49 00 00 00 00 
0918   1A4D 00 00 00 00 
0918   1A51 00 00 00 00 
0918   1A55 00 00 00 00 
0918   1A59 00 00 00 00 
0918   1A5D 00 00 00 00 
0918   1A61 00 00 00 00 
0918   1A65 00 00 00 00 
0918   1A69 00 00 00 00 
0918   1A6D 00 00 00 00 
0918   1A71 00 00 00 00 
0918   1A75 00 00 00 00 
0918   1A79 00 00 00 00 
0918   1A7D 00 00 00 00 
0918   1A81 00 00 00 00 
0918   1A85 00 00 00 00 
0918   1A89 00 00 00 00 
0918   1A8D 00 00 00 00 
0918   1A91 00 00 00 00 
0918   1A95 00 00 00 00 
0918   1A99 00 00 00 00 
0918   1A9D 00 00 00 00 
0918   1AA1 00 00 00 00 
0918   1AA5 00 00 00 00 
0918   1AA9 00 00 00 00 
0918   1AAD 00 00 00 00 
0918   1AB1 00 00 00 00 
0918   1AB5 00 00 00 00 
0918   1AB9 00 00 00 00 
0918   1ABD 00 00 00 00 
0918   1AC1 00 00 00 00 
0918   1AC5 00 00 00 00 
0918   1AC9 00 00 00 00 
0918   1ACD 00 00 00 00 
0918   1AD1 00 00 00 00 
0918   1AD5 00 00 00 00 
0918   1AD9 00 00 00 00 
0918   1ADD 00 00 00 00 
0918   1AE1 00 00 00 00 
0918   1AE5 00 00 00 00 
0918   1AE9 00 00 00 00 
0918   1AED 00 00 00 00 
0918   1AF1 00 00 00 00 
0918   1AF5 00 00 00 00 
0918   1AF9 00 00 00 00 
0918   1AFD 00 00 00 00 
0918   1B01 00 00 00 00 
0918   1B05 00 00 00 00 
0918   1B09 00 00 00 00 
0918   1B0D 00 00 00 00 
0918   1B11 00 00 00 00 
0918   1B15 00 00 00 00 
0918   1B19 00 00 00 00 
0918   1B1D 00 00 00 00 
0918   1B21 00 00 00 00 
0918   1B25 00 00 00 00 
0918   1B29 00 00 00 00 
0918   1B2D 00 00 00 00 
0918   1B31 00 00 00 00 
0918   1B35 00 00 00 00 
0918   1B39 00 00 00 00 
0918   1B3D 00 00 00 00 
0918   1B41 00 00 00 00 
0918   1B45 00 00 00 00 
0918   1B49 00 00 00 00 
0918   1B4D 00 00 00 00 
0918   1B51 00 00 00 00 
0918   1B55 00 00 00 00 
0918   1B59 00 00 00 00 
0918   1B5D 00 00 00 00 
0918   1B61 00 00 00 00 
0918   1B65 00 00 00 00 
0918   1B69 00 00 00 00 
0918   1B6D 00 00 00 00 
0918   1B71 00 00 00 00 
0918   1B75 00 00 00 00 
0918   1B79 00 00 00 00 
0918   1B7D 00 00 00 00 
0918   1B81 00 00 00 00 
0918   1B85 00 00 00 00 
0918   1B89 00 00 00 00 
0918   1B8D 00 00 00 00 
0918   1B91 00 00 00 00 
0918   1B95 00 00 00 00 
0918   1B99 00 00 00 00 
0918   1B9D 00 00 00 00 
0918   1BA1 00 00 00 00 
0918   1BA5 00 00 00 00 
0918   1BA9 00 00 00 00 
0918   1BAD 00 00 00 00 
0918   1BB1 00 00 00 00 
0918   1BB5 00 00 00 00 
0918   1BB9 00 00 00 00 
0918   1BBD 00 00 00 00 
0918   1BC1 00 00 00 00 
0918   1BC5 00 00 00 00 
0918   1BC9 00 00 00 00 
0918   1BCD 00 00 00 00 
0918   1BD1 00 00 00 00 
0918   1BD5 00 00 00 00 
0918   1BD9 00 00 00 00 
0918   1BDD 00 00 00 00 
0918   1BE1 00 00 00 00 
0918   1BE5 00 00 00 00 
0918   1BE9 00 00 00 00 
0918   1BED 00 00 00 00 
0918   1BF1 00 00 00 00 
0918   1BF5 00 00 00 00 
0918   1BF9 00 00 00 00 
0918   1BFD 00 00 00 00 
0918   1C01 00 00 00 00 
0918   1C05 00 00 00 00 
0918   1C09 00 00 00 00 
0918   1C0D 00 00 00 00 
0918   1C11 00 00 00 00 
0918   1C15 00 00 00 00 
0918   1C19 00 00 00 00 
0918   1C1D 00 00 00 00 
0918   1C21 00 00 00 00 
0918   1C25 00 00 00 00 
0918   1C29 00 00 00 00 
0918   1C2D 00 00 00 00 
0918   1C31 00 00 00 00 
0918   1C35 00 00 00 00 
0918   1C39 00 00 00 00 
0918   1C3D 00 00 00 00 
0918   1C41 00 00 00 00 
0918   1C45 00 00 00 00 
0918   1C49 00 00 00 00 
0918   1C4D 00 00 00 00 
0918   1C51 00 00 00 00 
0918   1C55 00 00 00 00 
0918   1C59 00 00 00 00 
0918   1C5D 00 00 00 00 
0918   1C61 00 00 00 00 
0918   1C65 00 00 00 00 
0918   1C69 00 00 00 00 
0918   1C6D 00 00 00 00 
0918   1C71 00 00 00 00 
0918   1C75 00 00 00 00 
0918   1C79 00 00 00 00 
0918   1C7D 00 00 00 00 
0918   1C81 00 00 00 00 
0918   1C85 00 00 00 00 
0918   1C89 00 00 00 00 
0918   1C8D 00 00 00 00 
0918   1C91 00 00 00 00 
0918   1C95 00 00 00 00 
0918   1C99 00 00 00 00 
0918   1C9D 00 00 00 00 
0918   1CA1 00 00 00 00 
0918   1CA5 00 00 00 00 
0918   1CA9 00 00 00 00 
0918   1CAD 00 00 00 00 
0918   1CB1 00 00 00 00 
0918   1CB5 00 00 00 00 
0918   1CB9 00 00 00 00 
0918   1CBD 00 00 00 00 
0918   1CC1 00 00 00 00 
0918   1CC5 00 00 00 00 
0918   1CC9 00 00 00 00 
0918   1CCD 00 00 00 00 
0918   1CD1 00 00 00 00 
0918   1CD5 00 00 00 00 
0918   1CD9 00 00 00 00 
0918   1CDD 00 00 00 00 
0918   1CE1 00 00 00 00 
0918   1CE5 00 00 00 00 
0918   1CE9 00 00 00 00 
0918   1CED 00 00 00 00 
0918   1CF1 00 00 00 00 
0918   1CF5 00 00 00 00 
0918   1CF9 00 00 00 00 
0918   1CFD 00 00 00 00 
0918   1D01 00 00 00 00 
0918   1D05 00 00 00 00 
0918   1D09 00 00 00 00 
0918   1D0D 00 00 00 00 
0918   1D11 00 00 00 00 
0918   1D15 00 00 00 00 
0918   1D19 00 00 00 00 
0918   1D1D 00 00 00 00 
0918   1D21 00 00 00 00 
0918   1D25 00 00 00 00 
0918   1D29 00 00 00 00 
0918   1D2D 00 00 00 00 
0918   1D31 00 00 00 00 
0918   1D35 00 00 00 00 
0918   1D39 00 00 00 00 
0918   1D3D 00 00 00 00 
0918   1D41 00 00 00 00 
0918   1D45 00 00 00 00 
0918   1D49 00 00 00 00 
0918   1D4D 00 00 00 00 
0918   1D51 00 00 00 00 
0918   1D55 00 00 00 00 
0918   1D59 00 00 00 00 
0918   1D5D 00 00 00 00 
0918   1D61 00 00 00 00 
0918   1D65 00 00 00 00 
0918   1D69 00 00 00 00 
0918   1D6D 00 00 00 00 
0918   1D71 00 00 00 00 
0918   1D75 00 00 00 00 
0918   1D79 00 00 00 00 
0918   1D7D 00 00 00 00 
0918   1D81 00 00 00 00 
0918   1D85 00 00 00 00 
0918   1D89 00 00 00 00 
0918   1D8D 00 00 00 00 
0918   1D91 00 00 00 00 
0918   1D95 00 00 00 00 
0918   1D99 00 00 00 00 
0918   1D9D 00 00 00 00 
0918   1DA1 00 00 00 00 
0918   1DA5 00 00 00 00 
0918   1DA9 00 00 00 00 
0918   1DAD 00 00 00 00 
0918   1DB1 00 00 00 00 
0918   1DB5 00 00 00 00 
0918   1DB9 00 00 00 00 
0918   1DBD 00 00 00 00 
0918   1DC1 00 00 00 00 
0918   1DC5 00 00 00 00 
0918   1DC9 00 00 00 00 
0918   1DCD 00 00 00 00 
0918   1DD1 00 00 00 00 
0918   1DD5 00 00 00 00 
0918   1DD9 00 00 00 00 
0918   1DDD 00 00 00 00 
0918   1DE1 00 00 00 00 
0918   1DE5 00 00 00 00 
0918   1DE9 00 00 00 00 
0918   1DED 00 00 00 00 
0918   1DF1 00 00 00 00 
0918   1DF5 00 00 00 00 
0918   1DF9 00 00 00 00 
0918   1DFD 00 00 00 00 
0918   1E01 00 00 00 00 
0918   1E05 00 00 00 00 
0918   1E09 00 00 00 00 
0918   1E0D 00 00 00 00 
0918   1E11 00 00 00 00 
0918   1E15 00 00 00 00 
0918   1E19 00 00 00 00 
0918   1E1D 00 00 00 00 
0918   1E21 00 00 00 00 
0918   1E25 00 00 00 00 
0918   1E29 00 00 00 00 
0918   1E2D 00 00 00 00 
0918   1E31 00 00 00 00 
0918   1E35 00 00 00 00 
0918   1E39 00 00 00 00 
0918   1E3D 00 00 00 00 
0918   1E41 00 00 00 00 
0918   1E45 00 00 00 00 
0918   1E49 00 00 00 00 
0918   1E4D 00 00 00 00 
0918   1E51 00 00 00 00 
0918   1E55 00 00 00 00 
0918   1E59 00 00 00 00 
0918   1E5D 00 00 00 00 
0918   1E61 00 00 00 00 
0918   1E65 00 00 00 00 
0918   1E69 00 00 00 00 
0918   1E6D 00 00 00 00 
0918   1E71 00 00 00 00 
0918   1E75 00 00 00 00 
0918   1E79 00 00 00 00 
0918   1E7D 00 00 00 00 
0918   1E81 00 00 00 00 
0918   1E85 00 00 00 00 
0918   1E89 00 00 00 00 
0918   1E8D 00 00 00 00 
0918   1E91 00 00 00 00 
0918   1E95 00 00 00 00 
0918   1E99 00 00 00 00 
0918   1E9D 00 00 00 00 
0918   1EA1 00 00 00 00 
0918   1EA5 00 00 00 00 
0918   1EA9 00 00 00 00 
0918   1EAD 00 00 00 00 
0918   1EB1 00 00 00 00 
0918   1EB5 00 00 00 00 
0918   1EB9 00 00 00 00 
0918   1EBD 00 00 00 00 
0918   1EC1 00 00 00 00 
0918   1EC5 00 00 00 00 
0918   1EC9 00 00 00 00 
0918   1ECD 00 00 00 00 
0918   1ED1 00 00 00 00 
0918   1ED5 00 00 00 00 
0918   1ED9 00 00 00 00 
0918   1EDD 00 00 
0919   1EDF 2D 14       next_state: .dw next_state_data
0920   1EE1 47 65 6E 65 _string_0: .db "Generations: ", 0
0920   1EE5 72 61 74 69 
0920   1EE9 6F 6E 73 3A 
0920   1EED 20 00 
0921   1EEF 2A 00       _string_1: .db "*", 0
0922   1EF1 20 00       _string_2: .db " ", 0
0923   1EF3 0A 00       _string_3: .db "\n", 0
0924   1EF5             ; --- END DATA BLOCK
0925   1EF5             
0926   1EF5             ; --- BEGIN INCLUDE BLOCK
0927   1EF5             .include "lib/stdio.asm"
0001+  1EF5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1EF5             ; stdio.s
0003+  1EF5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1EF5             .include "lib/string.asm"
0001++ 1EF5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1EF5             ; string.s
0003++ 1EF5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1EF5             
0005++ 1EF5             
0006++ 1EF5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1EF5             ; strrev
0008++ 1EF5             ; reverse a string
0009++ 1EF5             ; D = string address
0010++ 1EF5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1EF5             ; 01234
0012++ 1EF5             strrev:
0013++ 1EF5 4B          	pusha
0014++ 1EF6 07 3C 1F    	call strlen	; length in C
0015++ 1EF9 12          	mov a, c
0016++ 1EFA AF 01 00    	cmp a, 1
0017++ 1EFD D0 17 1F    	jleu strrev_end	; check string length. string len must be > 1
0018++ 1F00 7D          	dec a
0019++ 1F01 FD 4E       	mov si, d	; beginning of string
0020++ 1F03 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1F05 59          	add d, a	; end of string
0022++ 1F06 12          	mov a, c
0023++ 1F07 FD 9B       	shr a		; divide by 2
0024++ 1F09 39          	mov c, a	; C now counts the steps
0025++ 1F0A             strrev_L0:
0026++ 1F0A 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1F0B F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1F0C 3E          	mov [d], al	; store left char into right side
0029++ 1F0D 1B          	mov al, bl
0030++ 1F0E F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1F0F 7E          	dec c
0032++ 1F10 7F          	dec d
0033++ 1F11 C2 00 00    	cmp c, 0
0034++ 1F14 C7 0A 1F    	jne strrev_L0
0035++ 1F17             strrev_end:
0036++ 1F17 4C          	popa
0037++ 1F18 09          	ret
0038++ 1F19             	
0039++ 1F19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1F19             ; strchr
0041++ 1F19             ; search string in D for char in AL
0042++ 1F19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1F19             strchr:
0044++ 1F19             strchr_L0:
0045++ 1F19 32          	mov bl, [d]
0046++ 1F1A C1 00       	cmp bl, 0
0047++ 1F1C C6 27 1F    	je strchr_end
0048++ 1F1F BA          	cmp al, bl
0049++ 1F20 C6 27 1F    	je strchr_end
0050++ 1F23 79          	inc d
0051++ 1F24 0A 19 1F    	jmp strchr_L0
0052++ 1F27             strchr_end:
0053++ 1F27 1B          	mov al, bl
0054++ 1F28 09          	ret
0055++ 1F29             
0056++ 1F29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1F29             ; strstr
0058++ 1F29             ; find sub-string
0059++ 1F29             ; str1 in SI
0060++ 1F29             ; str2 in DI
0061++ 1F29             ; SI points to end of source string
0062++ 1F29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1F29             strstr:
0064++ 1F29 DB          	push al
0065++ 1F2A DA          	push d
0066++ 1F2B E3          	push di
0067++ 1F2C             strstr_loop:
0068++ 1F2C F3          	cmpsb					; compare a byte of the strings
0069++ 1F2D C7 38 1F    	jne strstr_ret
0070++ 1F30 FC 00 00    	lea d, [di + 0]
0071++ 1F33 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1F35 C7 2C 1F    	jne strstr_loop				; equal chars but not at end
0073++ 1F38             strstr_ret:
0074++ 1F38 F0          	pop di
0075++ 1F39 E7          	pop d
0076++ 1F3A E8          	pop al
0077++ 1F3B 09          	ret
0078++ 1F3C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1F3C             ; length of null terminated string
0080++ 1F3C             ; result in C
0081++ 1F3C             ; pointer in D
0082++ 1F3C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1F3C             strlen:
0084++ 1F3C DA          	push d
0085++ 1F3D 38 00 00    	mov c, 0
0086++ 1F40             strlen_L1:
0087++ 1F40 BD 00       	cmp byte [d], 0
0088++ 1F42 C6 4A 1F    	je strlen_ret
0089++ 1F45 79          	inc d
0090++ 1F46 78          	inc c
0091++ 1F47 0A 40 1F    	jmp strlen_L1
0092++ 1F4A             strlen_ret:
0093++ 1F4A E7          	pop d
0094++ 1F4B 09          	ret
0095++ 1F4C             
0096++ 1F4C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1F4C             ; STRCMP
0098++ 1F4C             ; compare two strings
0099++ 1F4C             ; str1 in SI
0100++ 1F4C             ; str2 in DI
0101++ 1F4C             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1F4C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1F4C             strcmp:
0104++ 1F4C DB          	push al
0105++ 1F4D DA          	push d
0106++ 1F4E E3          	push di
0107++ 1F4F E2          	push si
0108++ 1F50             strcmp_loop:
0109++ 1F50 F3          	cmpsb					; compare a byte of the strings
0110++ 1F51 C7 5C 1F    	jne strcmp_ret
0111++ 1F54 FB FF FF    	lea d, [si +- 1]
0112++ 1F57 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1F59 C7 50 1F    	jne strcmp_loop				; equal chars but not at end
0114++ 1F5C             strcmp_ret:
0115++ 1F5C EF          	pop si
0116++ 1F5D F0          	pop di
0117++ 1F5E E7          	pop d
0118++ 1F5F E8          	pop al
0119++ 1F60 09          	ret
0120++ 1F61             
0121++ 1F61             
0122++ 1F61             ; STRCPY
0123++ 1F61             ; copy null terminated string from SI to DI
0124++ 1F61             ; source in SI
0125++ 1F61             ; destination in DI
0126++ 1F61             strcpy:
0127++ 1F61 E2          	push si
0128++ 1F62 E3          	push di
0129++ 1F63 DB          	push al
0130++ 1F64             strcpy_L1:
0131++ 1F64 F6          	lodsb
0132++ 1F65 F7          	stosb
0133++ 1F66 B9 00       	cmp al, 0
0134++ 1F68 C7 64 1F    	jne strcpy_L1
0135++ 1F6B             strcpy_end:
0136++ 1F6B E8          	pop al
0137++ 1F6C F0          	pop di
0138++ 1F6D EF          	pop si
0139++ 1F6E 09          	ret
0140++ 1F6F             
0141++ 1F6F             ; STRCAT
0142++ 1F6F             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1F6F             ; source in SI
0144++ 1F6F             ; destination in DI
0145++ 1F6F             strcat:
0146++ 1F6F E2          	push si
0147++ 1F70 E3          	push di
0148++ 1F71 D7          	push a
0149++ 1F72 DA          	push d
0150++ 1F73 50          	mov a, di
0151++ 1F74 3C          	mov d, a
0152++ 1F75             strcat_goto_end_L1:
0153++ 1F75 BD 00       	cmp byte[d], 0
0154++ 1F77 C6 7E 1F    	je strcat_start
0155++ 1F7A 79          	inc d
0156++ 1F7B 0A 75 1F    	jmp strcat_goto_end_L1
0157++ 1F7E             strcat_start:
0158++ 1F7E FD 50       	mov di, d
0159++ 1F80             strcat_L1:
0160++ 1F80 F6          	lodsb
0161++ 1F81 F7          	stosb
0162++ 1F82 B9 00       	cmp al, 0
0163++ 1F84 C7 80 1F    	jne strcat_L1
0164++ 1F87             strcat_end:
0165++ 1F87 E7          	pop d
0166++ 1F88 E4          	pop a
0167++ 1F89 F0          	pop di
0168++ 1F8A EF          	pop si
0169++ 1F8B 09          	ret
0005+  1F8C             
0006+  1F8C 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  1F90 34 35 36 37 
0006+  1F94 38 39 41 42 
0006+  1F98 43 44 45 46 
0007+  1F9C 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  1FA0 1B 5B 48 00 
0008+  1FA4             
0009+  1FA4 01 00       table_power:.dw 1
0010+  1FA6 0A 00       			.dw 10
0011+  1FA8 64 00       			.dw 100
0012+  1FAA E8 03       			.dw 1000
0013+  1FAC 10 27       			.dw 10000
0014+  1FAE             
0015+  1FAE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  1FAE             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  1FAE             ; ASCII in BL
0018+  1FAE             ; result in AL
0019+  1FAE             ; ascii for F = 0100 0110
0020+  1FAE             ; ascii for 9 = 0011 1001
0021+  1FAE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  1FAE             hex_ascii_encode:
0023+  1FAE 1B          	mov al, bl
0024+  1FAF 93 40       	test al, $40				; test if letter or number
0025+  1FB1 C7 B7 1F    	jnz hex_letter
0026+  1FB4 87 0F       	and al, $0F				; get number
0027+  1FB6 09          	ret
0028+  1FB7             hex_letter:
0029+  1FB7 87 0F       	and al, $0F				; get letter
0030+  1FB9 6A 09       	add al, 9
0031+  1FBB 09          	ret
0032+  1FBC             
0033+  1FBC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  1FBC             ; ATOI
0035+  1FBC             ; 2 letter hex string in B
0036+  1FBC             ; 8bit integer returned in AL
0037+  1FBC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  1FBC             atoi:
0039+  1FBC D8          	push b
0040+  1FBD 07 AE 1F    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  1FC0 30          	mov bl, bh
0042+  1FC1 DB          	push al					; save a
0043+  1FC2 07 AE 1F    	call hex_ascii_encode
0044+  1FC5 EA          	pop bl	
0045+  1FC6 FD 9E 04    	shl al, 4
0046+  1FC9 8C          	or al, bl
0047+  1FCA E5          	pop b
0048+  1FCB 09          	ret	
0049+  1FCC             
0050+  1FCC             
0051+  1FCC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  1FCC             ; printf
0053+  1FCC             ; no need for explanations!
0054+  1FCC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1FCC             printf:
0056+  1FCC 09          	ret
0057+  1FCD             
0058+  1FCD             
0059+  1FCD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  1FCD             ; scanf
0061+  1FCD             ; no need for explanations!
0062+  1FCD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  1FCD             scanf:
0064+  1FCD 09          	ret
0065+  1FCE             
0066+  1FCE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  1FCE             ; ITOA
0068+  1FCE             ; 8bit value in BL
0069+  1FCE             ; 2 byte ASCII result in A
0070+  1FCE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  1FCE             itoa:
0072+  1FCE DA          	push d
0073+  1FCF D8          	push b
0074+  1FD0 A7 00       	mov bh, 0
0075+  1FD2 FD A4 04    	shr bl, 4	
0076+  1FD5 74          	mov d, b
0077+  1FD6 1F 8C 1F    	mov al, [d + s_hex_digits]
0078+  1FD9 23          	mov ah, al
0079+  1FDA             	
0080+  1FDA E5          	pop b
0081+  1FDB D8          	push b
0082+  1FDC A7 00       	mov bh, 0
0083+  1FDE FD 87 0F    	and bl, $0F
0084+  1FE1 74          	mov d, b
0085+  1FE2 1F 8C 1F    	mov al, [d + s_hex_digits]
0086+  1FE5 E5          	pop b
0087+  1FE6 E7          	pop d
0088+  1FE7 09          	ret
0089+  1FE8             
0090+  1FE8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  1FE8             ; HEX STRING TO BINARY
0092+  1FE8             ; di = destination address
0093+  1FE8             ; si = source
0094+  1FE8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  1FE8             hex_to_int:
0096+  1FE8             hex_to_int_L1:
0097+  1FE8 F6          	lodsb					; load from [SI] to AL
0098+  1FE9 B9 00       	cmp al, 0				; check if ASCII 0
0099+  1FEB C6 F8 1F    	jz hex_to_int_ret
0100+  1FEE 36          	mov bh, al
0101+  1FEF F6          	lodsb
0102+  1FF0 2F          	mov bl, al
0103+  1FF1 07 BC 1F    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  1FF4 F7          	stosb					; store AL to [DI]
0105+  1FF5 0A E8 1F    	jmp hex_to_int_L1
0106+  1FF8             hex_to_int_ret:
0107+  1FF8 09          	ret		
0108+  1FF9             
0109+  1FF9             
0110+  1FF9             
0111+  1FF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  1FF9             ; GETCHAR
0113+  1FF9             ; char in ah
0114+  1FF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  1FF9             getchar:
0116+  1FF9 DB          	push al
0117+  1FFA             getchar_retry:
0118+  1FFA FD 0C       	sti
0119+  1FFC 19 01       	mov al, 1
0120+  1FFE 05 03       	syscall sys_io			; receive in AH
0121+  2000 B9 00       	cmp al, 0			; check if any char was receive
0122+  2002 C6 FA 1F    	je getchar_retry
0123+  2005 E8          	pop al
0124+  2006 09          	ret
0125+  2007             
0126+  2007             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  2007             ; PUTCHAR
0128+  2007             ; char in ah
0129+  2007             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  2007             putchar:
0131+  2007 D7          	push a
0132+  2008 19 00       	mov al, 0
0133+  200A 05 03       	syscall sys_io			; char in AH
0134+  200C E4          	pop a
0135+  200D 09          	ret
0136+  200E             
0137+  200E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  200E             ;; INPUT A STRING
0139+  200E             ;; terminates with null
0140+  200E             ;; pointer in D
0141+  200E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  200E             gets:
0143+  200E D7          	push a
0144+  200F DA          	push d
0145+  2010             gets_loop:
0146+  2010 FD 0C       	sti
0147+  2012 19 01       	mov al, 1
0148+  2014 05 03       	syscall sys_io			; receive in AH
0149+  2016 B9 00       	cmp al, 0				; check error code (AL)
0150+  2018 C6 10 20    	je gets_loop			; if no char received, retry
0151+  201B             
0152+  201B 76 1B       	cmp ah, 27
0153+  201D C6 3E 20    	je gets_telnet_escape
0154+  2020 76 0A       	cmp ah, $0A				; LF
0155+  2022 C6 97 20    	je gets_end
0156+  2025 76 0D       	cmp ah, $0D				; CR
0157+  2027 C6 97 20    	je gets_end
0158+  202A 76 5C       	cmp ah, $5C				; '\\'
0159+  202C C6 6E 20    	je gets_escape
0160+  202F             	
0161+  202F 76 08       	cmp ah, $08			; check for backspace
0162+  2031 C6 3A 20    	je gets_backspace
0163+  2034             
0164+  2034 1A          	mov al, ah
0165+  2035 3E          	mov [d], al
0166+  2036 79          	inc d
0167+  2037 0A 10 20    	jmp gets_loop
0168+  203A             gets_backspace:
0169+  203A 7F          	dec d
0170+  203B 0A 10 20    	jmp gets_loop
0171+  203E             gets_telnet_escape:
0172+  203E FD 0C       	sti
0173+  2040 19 01       	mov al, 1
0174+  2042 05 03       	syscall sys_io				; receive in AH without echo
0175+  2044 B9 00       	cmp al, 0					; check error code (AL)
0176+  2046 C6 3E 20    	je gets_telnet_escape		; if no char received, retry
0177+  2049 76 5B       	cmp ah, '['
0178+  204B C7 10 20    	jne gets_loop
0179+  204E             gets_telnet_escape_phase2:
0180+  204E FD 0C       	sti
0181+  2050 19 01       	mov al, 1
0182+  2052 05 03       	syscall sys_io					; receive in AH without echo
0183+  2054 B9 00       	cmp al, 0						; check error code (AL)
0184+  2056 C6 4E 20    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  2059 76 44       	cmp ah, 'D'
0186+  205B C6 66 20    	je gets_left_arrow
0187+  205E 76 43       	cmp ah, 'C'
0188+  2060 C6 6A 20    	je gets_right_arrow
0189+  2063 0A 10 20    	jmp gets_loop
0190+  2066             gets_left_arrow:
0191+  2066 7F          	dec d
0192+  2067 0A 10 20    	jmp gets_loop
0193+  206A             gets_right_arrow:
0194+  206A 79          	inc d
0195+  206B 0A 10 20    	jmp gets_loop
0196+  206E             gets_escape:
0197+  206E FD 0C       	sti
0198+  2070 19 01       	mov al, 1
0199+  2072 05 03       	syscall sys_io			; receive in AH
0200+  2074 B9 00       	cmp al, 0				; check error code (AL)
0201+  2076 C6 6E 20    	je gets_escape			; if no char received, retry
0202+  2079 76 6E       	cmp ah, 'n'
0203+  207B C6 89 20    	je gets_LF
0204+  207E 76 72       	cmp ah, 'r'
0205+  2080 C6 90 20    	je gets_CR
0206+  2083 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  2084 3E          	mov [d], al
0208+  2085 79          	inc d
0209+  2086 0A 10 20    	jmp gets_loop
0210+  2089             gets_LF:
0211+  2089 19 0A       	mov al, $0A
0212+  208B 3E          	mov [d], al
0213+  208C 79          	inc d
0214+  208D 0A 10 20    	jmp gets_loop
0215+  2090             gets_CR:
0216+  2090 19 0D       	mov al, $0D
0217+  2092 3E          	mov [d], al
0218+  2093 79          	inc d
0219+  2094 0A 10 20    	jmp gets_loop
0220+  2097             gets_end:
0221+  2097 19 00       	mov al, 0
0222+  2099 3E          	mov [d], al				; terminate string
0223+  209A E7          	pop d
0224+  209B E4          	pop a
0225+  209C 09          	ret
0226+  209D             
0227+  209D             
0228+  209D             
0229+  209D             
0230+  209D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  209D             ;; INPUT TEXT
0232+  209D             ;; terminated with CTRL+D
0233+  209D             ;; pointer in D
0234+  209D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  209D             gettxt:
0236+  209D D7          	push a
0237+  209E DA          	push d
0238+  209F             gettxt_loop:
0239+  209F 19 01       	mov al, 1
0240+  20A1 05 03       	syscall sys_io			; receive in AH
0241+  20A3 B9 00       	cmp al, 0				; check error code (AL)
0242+  20A5 C6 9F 20    	je gettxt_loop		; if no char received, retry
0243+  20A8 76 04       	cmp ah, 4			; EOT
0244+  20AA C6 E8 20    	je gettxt_end
0245+  20AD 76 08       	cmp ah, $08			; check for backspace
0246+  20AF C6 E4 20    	je gettxt_backspace
0247+  20B2 76 5C       	cmp ah, $5C				; '\\'
0248+  20B4 C6 BD 20    	je gettxt_escape
0249+  20B7 1A          	mov al, ah
0250+  20B8 3E          	mov [d], al
0251+  20B9 79          	inc d
0252+  20BA 0A 9F 20    	jmp gettxt_loop
0253+  20BD             gettxt_escape:
0254+  20BD 19 01       	mov al, 1
0255+  20BF 05 03       	syscall sys_io			; receive in AH
0256+  20C1 B9 00       	cmp al, 0				; check error code (AL)
0257+  20C3 C6 BD 20    	je gettxt_escape		; if no char received, retry
0258+  20C6 76 6E       	cmp ah, 'n'
0259+  20C8 C6 D6 20    	je gettxt_LF
0260+  20CB 76 72       	cmp ah, 'r'
0261+  20CD C6 DD 20    	je gettxt_CR
0262+  20D0 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  20D1 3E          	mov [d], al
0264+  20D2 79          	inc d
0265+  20D3 0A 9F 20    	jmp gettxt_loop
0266+  20D6             gettxt_LF:
0267+  20D6 19 0A       	mov al, $0A
0268+  20D8 3E          	mov [d], al
0269+  20D9 79          	inc d
0270+  20DA 0A 9F 20    	jmp gettxt_loop
0271+  20DD             gettxt_CR:
0272+  20DD 19 0D       	mov al, $0D
0273+  20DF 3E          	mov [d], al
0274+  20E0 79          	inc d
0275+  20E1 0A 9F 20    	jmp gettxt_loop
0276+  20E4             gettxt_backspace:
0277+  20E4 7F          	dec d
0278+  20E5 0A 9F 20    	jmp gettxt_loop
0279+  20E8             gettxt_end:
0280+  20E8 19 00       	mov al, 0
0281+  20EA 3E          	mov [d], al				; terminate string
0282+  20EB E7          	pop d
0283+  20EC E4          	pop a
0284+  20ED 09          	ret
0285+  20EE             
0286+  20EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  20EE             ; PRINT NEW LINE
0288+  20EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  20EE             printnl:
0290+  20EE D7          	push a
0291+  20EF 10 00 0A    	mov a, $0A00
0292+  20F2 05 03       	syscall sys_io
0293+  20F4 10 00 0D    	mov a, $0D00
0294+  20F7 05 03       	syscall sys_io
0295+  20F9 E4          	pop a
0296+  20FA 09          	ret
0297+  20FB             
0298+  20FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  20FB             ; strtoint
0300+  20FB             ; 4 digit hex string number in d
0301+  20FB             ; integer returned in A
0302+  20FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  20FB             strtointx:
0304+  20FB D8          	push b
0305+  20FC 32          	mov bl, [d]
0306+  20FD 37          	mov bh, bl
0307+  20FE 33 01 00    	mov bl, [d + 1]
0308+  2101 07 BC 1F    	call atoi				; convert to int in AL
0309+  2104 23          	mov ah, al				; move to AH
0310+  2105 33 02 00    	mov bl, [d + 2]
0311+  2108 37          	mov bh, bl
0312+  2109 33 03 00    	mov bl, [d + 3]
0313+  210C 07 BC 1F    	call atoi				; convert to int in AL
0314+  210F E5          	pop b
0315+  2110 09          	ret
0316+  2111             
0317+  2111             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  2111             ; strtoint
0319+  2111             ; 5 digit base10 string number in d
0320+  2111             ; integer returned in A
0321+  2111             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  2111             strtoint:
0323+  2111 E2          	push si
0324+  2112 D8          	push b
0325+  2113 D9          	push c
0326+  2114 DA          	push d
0327+  2115 07 3C 1F    	call strlen			; get string length in C
0328+  2118 7E          	dec c
0329+  2119 FD 4E       	mov si, d
0330+  211B 12          	mov a, c
0331+  211C FD 99       	shl a
0332+  211E 3B A4 1F    	mov d, table_power
0333+  2121 59          	add d, a
0334+  2122 38 00 00    	mov c, 0
0335+  2125             strtoint_L0:
0336+  2125 F6          	lodsb			; load ASCII to al
0337+  2126 B9 00       	cmp al, 0
0338+  2128 C6 3B 21    	je strtoint_end
0339+  212B 6F 30       	sub al, $30		; make into integer
0340+  212D 22 00       	mov ah, 0
0341+  212F 2A          	mov b, [d]
0342+  2130 AC          	mul a, b			; result in B since it fits in 16bits
0343+  2131 11          	mov a, b
0344+  2132 28          	mov b, c
0345+  2133 54          	add a, b
0346+  2134 39          	mov c, a
0347+  2135 63 02 00    	sub d, 2
0348+  2138 0A 25 21    	jmp strtoint_L0
0349+  213B             strtoint_end:
0350+  213B 12          	mov a, c
0351+  213C E7          	pop d
0352+  213D E6          	pop c
0353+  213E E5          	pop b
0354+  213F EF          	pop si
0355+  2140 09          	ret
0356+  2141             
0357+  2141             
0358+  2141             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  2141             ; PRINT NULL TERMINATED STRING
0360+  2141             ; pointer in D
0361+  2141             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  2141             puts:
0363+  2141 D7          	push a
0364+  2142 DA          	push d
0365+  2143             puts_L1:
0366+  2143 1E          	mov al, [d]
0367+  2144 B9 00       	cmp al, 0
0368+  2146 C6 52 21    	jz puts_END
0369+  2149 23          	mov ah, al
0370+  214A 19 00       	mov al, 0
0371+  214C 05 03       	syscall sys_io
0372+  214E 79          	inc d
0373+  214F 0A 43 21    	jmp puts_L1
0374+  2152             puts_END:
0375+  2152 E7          	pop d
0376+  2153 E4          	pop a
0377+  2154 09          	ret
0378+  2155             
0379+  2155             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  2155             ; PRINT N SIZE STRING
0381+  2155             ; pointer in D
0382+  2155             ; size in C
0383+  2155             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  2155             putsn:
0385+  2155 DB          	push al
0386+  2156 DA          	push d
0387+  2157 D9          	push c
0388+  2158             putsn_L0:
0389+  2158 1E          	mov al, [d]
0390+  2159 23          	mov ah, al
0391+  215A 19 00       	mov al, 0
0392+  215C 05 03       	syscall sys_io
0393+  215E 79          	inc d
0394+  215F 7E          	dec c	
0395+  2160 C2 00 00    	cmp c, 0
0396+  2163 C7 58 21    	jne putsn_L0
0397+  2166             putsn_end:
0398+  2166 E6          	pop c
0399+  2167 E7          	pop d
0400+  2168 E8          	pop al
0401+  2169 09          	ret
0402+  216A             
0403+  216A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  216A             ; print 16bit decimal number
0405+  216A             ; input number in A
0406+  216A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  216A             print_u16d:
0408+  216A D7          	push a
0409+  216B D8          	push b
0410+  216C 26 10 27    	mov b, 10000
0411+  216F AE          	div a, b			; get 10000 coeff.
0412+  2170 07 96 21    	call print_number
0413+  2173 11          	mov a, b
0414+  2174 26 E8 03    	mov b, 1000
0415+  2177 AE          	div a, b			; get 10000 coeff.
0416+  2178 07 96 21    	call print_number
0417+  217B 11          	mov a, b
0418+  217C 26 64 00    	mov b, 100
0419+  217F AE          	div a, b
0420+  2180 07 96 21    	call print_number
0421+  2183 11          	mov a, b
0422+  2184 26 0A 00    	mov b, 10
0423+  2187 AE          	div a, b
0424+  2188 07 96 21    	call print_number
0425+  218B 11          	mov a, b
0426+  218C 6A 30       	add al, $30
0427+  218E 23          	mov ah, al
0428+  218F 19 00       	mov al, 0
0429+  2191 05 03       	syscall sys_io	; print coeff
0430+  2193 E5          	pop b
0431+  2194 E4          	pop a
0432+  2195 09          	ret
0433+  2196             
0434+  2196             
0435+  2196             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  2196             ; if A == 0, print space
0437+  2196             ; else print A
0438+  2196             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  2196             print_number:
0440+  2196 6A 30       	add al, $30
0441+  2198 23          	mov ah, al
0442+  2199 07 07 20    	call putchar
0443+  219C 09          	ret
0444+  219D             
0445+  219D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  219D             ; PRINT 16BIT HEX INTEGER
0447+  219D             ; integer value in reg B
0448+  219D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  219D             print_u16x:
0450+  219D D7          	push a
0451+  219E D8          	push b
0452+  219F DD          	push bl
0453+  21A0 30          	mov bl, bh
0454+  21A1 07 CE 1F    	call itoa				; convert bh to char in A
0455+  21A4 2F          	mov bl, al				; save al
0456+  21A5 19 00       	mov al, 0
0457+  21A7 05 03       	syscall sys_io				; display AH
0458+  21A9 24          	mov ah, bl				; retrieve al
0459+  21AA 19 00       	mov al, 0
0460+  21AC 05 03       	syscall sys_io				; display AL
0461+  21AE             
0462+  21AE EA          	pop bl
0463+  21AF 07 CE 1F    	call itoa				; convert bh to char in A
0464+  21B2 2F          	mov bl, al				; save al
0465+  21B3 19 00       	mov al, 0
0466+  21B5 05 03       	syscall sys_io				; display AH
0467+  21B7 24          	mov ah, bl				; retrieve al
0468+  21B8 19 00       	mov al, 0
0469+  21BA 05 03       	syscall sys_io				; display AL
0470+  21BC             
0471+  21BC E5          	pop b
0472+  21BD E4          	pop a
0473+  21BE 09          	ret
0474+  21BF             
0475+  21BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  21BF             ; INPUT 16BIT HEX INTEGER
0477+  21BF             ; read 16bit integer into A
0478+  21BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  21BF             scan_u16x:
0480+  21BF F8 10 00    	enter 16
0481+  21C2 D8          	push b
0482+  21C3 DA          	push d
0483+  21C4             
0484+  21C4 FA F1 FF    	lea d, [bp + -15]
0485+  21C7 07 0E 20    	call gets				; get number
0486+  21CA             
0487+  21CA 32          	mov bl, [d]
0488+  21CB 37          	mov bh, bl
0489+  21CC 33 01 00    	mov bl, [d + 1]
0490+  21CF 07 BC 1F    	call atoi				; convert to int in AL
0491+  21D2 23          	mov ah, al				; move to AH
0492+  21D3             
0493+  21D3 33 02 00    	mov bl, [d + 2]
0494+  21D6 37          	mov bh, bl
0495+  21D7 33 03 00    	mov bl, [d + 3]
0496+  21DA 07 BC 1F    	call atoi				; convert to int in AL
0497+  21DD             
0498+  21DD E7          	pop d
0499+  21DE E5          	pop b
0500+  21DF F9          	leave
0501+  21E0 09          	ret
0502+  21E1             
0503+  21E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  21E1             ; PRINT 8bit HEX INTEGER
0505+  21E1             ; integer value in reg bl
0506+  21E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  21E1             print_u8x:
0508+  21E1 D7          	push a
0509+  21E2 DD          	push bl
0510+  21E3             
0511+  21E3 07 CE 1F    	call itoa				; convert bl to char in A
0512+  21E6 2F          	mov bl, al				; save al
0513+  21E7 19 00       	mov al, 0
0514+  21E9 05 03       	syscall sys_io				; display AH
0515+  21EB 24          	mov ah, bl				; retrieve al
0516+  21EC 19 00       	mov al, 0
0517+  21EE 05 03       	syscall sys_io				; display AL
0518+  21F0             
0519+  21F0 EA          	pop bl
0520+  21F1 E4          	pop a
0521+  21F2 09          	ret
0522+  21F3             
0523+  21F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  21F3             ; print 8bit decimal unsigned number
0525+  21F3             ; input number in AL
0526+  21F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  21F3             print_u8d:
0528+  21F3 D7          	push a
0529+  21F4 D8          	push b
0530+  21F5             
0531+  21F5 22 00       	mov ah, 0
0532+  21F7 26 64 00    	mov b, 100
0533+  21FA AE          	div a, b
0534+  21FB D8          	push b			; save remainder
0535+  21FC B9 00       	cmp al, 0
0536+  21FE C6 08 22    	je skip100
0537+  2201 6A 30       	add al, $30
0538+  2203 23          	mov ah, al
0539+  2204 19 00       	mov al, 0
0540+  2206 05 03       	syscall sys_io	; print coeff
0541+  2208             skip100:
0542+  2208 E4          	pop a
0543+  2209 22 00       	mov ah, 0
0544+  220B 26 0A 00    	mov b, 10
0545+  220E AE          	div a, b
0546+  220F D8          	push b			; save remainder
0547+  2210 B9 00       	cmp al, 0
0548+  2212 C6 1C 22    	je skip10
0549+  2215 6A 30       	add al, $30
0550+  2217 23          	mov ah, al
0551+  2218 19 00       	mov al, 0
0552+  221A 05 03       	syscall sys_io	; print coeff
0553+  221C             skip10:
0554+  221C E4          	pop a
0555+  221D 1B          	mov al, bl
0556+  221E 6A 30       	add al, $30
0557+  2220 23          	mov ah, al
0558+  2221 19 00       	mov al, 0
0559+  2223 05 03       	syscall sys_io	; print coeff
0560+  2225 E5          	pop b
0561+  2226 E4          	pop a
0562+  2227 09          	ret
0563+  2228             
0564+  2228             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  2228             ; INPUT 8BIT HEX INTEGER
0566+  2228             ; read 8bit integer into AL
0567+  2228             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  2228             scan_u8x:
0569+  2228 F8 04 00    	enter 4
0570+  222B D8          	push b
0571+  222C DA          	push d
0572+  222D             
0573+  222D FA FD FF    	lea d, [bp + -3]
0574+  2230 07 0E 20    	call gets				; get number
0575+  2233             
0576+  2233 32          	mov bl, [d]
0577+  2234 37          	mov bh, bl
0578+  2235 33 01 00    	mov bl, [d + 1]
0579+  2238 07 BC 1F    	call atoi				; convert to int in AL
0580+  223B             
0581+  223B E7          	pop d
0582+  223C E5          	pop b
0583+  223D F9          	leave
0584+  223E 09          	ret
0585+  223F             
0586+  223F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  223F             ; input decimal number
0588+  223F             ; result in A
0589+  223F             ; 655'\0'
0590+  223F             ; low--------high
0591+  223F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  223F             scan_u16d:
0593+  223F F8 08 00    	enter 8
0594+  2242 E2          	push si
0595+  2243 D8          	push b
0596+  2244 D9          	push c
0597+  2245 DA          	push d
0598+  2246 FA F9 FF    	lea d, [bp +- 7]
0599+  2249 07 0E 20    	call gets
0600+  224C 07 3C 1F    	call strlen			; get string length in C
0601+  224F 7E          	dec c
0602+  2250 FD 4E       	mov si, d
0603+  2252 12          	mov a, c
0604+  2253 FD 99       	shl a
0605+  2255 3B A4 1F    	mov d, table_power
0606+  2258 59          	add d, a
0607+  2259 38 00 00    	mov c, 0
0608+  225C             mul_loop:
0609+  225C F6          	lodsb			; load ASCII to al
0610+  225D B9 00       	cmp al, 0
0611+  225F C6 72 22    	je mul_exit
0612+  2262 6F 30       	sub al, $30		; make into integer
0613+  2264 22 00       	mov ah, 0
0614+  2266 2A          	mov b, [d]
0615+  2267 AC          	mul a, b			; result in B since it fits in 16bits
0616+  2268 11          	mov a, b
0617+  2269 28          	mov b, c
0618+  226A 54          	add a, b
0619+  226B 39          	mov c, a
0620+  226C 63 02 00    	sub d, 2
0621+  226F 0A 5C 22    	jmp mul_loop
0622+  2272             mul_exit:
0623+  2272 12          	mov a, c
0624+  2273 E7          	pop d
0625+  2274 E6          	pop c
0626+  2275 E5          	pop b
0627+  2276 EF          	pop si
0628+  2277 F9          	leave
0629+  2278 09          	ret
0928   2279             ; --- END INCLUDE BLOCK
0929   2279             
0930   2279             
0931   2279             .end
tasm: Number of errors = 0
