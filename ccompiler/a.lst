0001   0000             ; --- FILENAME: life.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; n
0011   0408 26 6B 17      mov b, _string_0
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 07 F0 04      call print
0015   0411 51 02 00      add sp, 2
0016   0414 07 FB 04      call getn
0017   0417 D7            push a
0018   0418 11            mov a, b
0019   0419 45 FD FF      mov [bp + -3], a ; n
0020   041C E4            pop a
0021   041D 07 65 04      call init_game
0022   0420             _for1_init:
0023   0420 26 00 00      mov b, 0
0024   0423 D7            push a
0025   0424 11            mov a, b
0026   0425 45 FF FF      mov [bp + -1], a ; i
0027   0428 E4            pop a
0028   0429             _for1_cond:
0029   0429 2C FF FF      mov b, [bp + -1] ; i
0030   042C D7            push a
0031   042D 11            mov a, b
0032   042E 2C FD FF      mov b, [bp + -3] ; n
0033   0431 B0            cmp a, b
0034   0432 0E            lodflgs
0035   0433 87 02         and al, %00000010 ; <
0036   0435 B9 00         cmp al, 0
0037   0437 0E            lodflgs
0038   0438 96            not al
0039   0439 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0040   043B 22 00         mov ah, 0
0041   043D 27            mov b, a
0042   043E E4            pop a
0043   043F C0 00 00      cmp b, 0
0044   0442 C6 5F 04      je _for1_exit
0045   0445             _for1_block:
0046   0445             
0047   0445             ; --- BEGIN INLINE ASM BLOCK
0048   0445 3B 28 18      mov d, s_telnet_clear
0049   0448 07 CD 19      call puts
0050   044B             ; --- END INLINE ASM BLOCK
0051   044B             
0052   044B 07 0B 05      call print_game
0053   044E 07 BF 05      call update_game
0054   0451             _for1_update:
0055   0451 2C FF FF      mov b, [bp + -1] ; i
0056   0454 FD 77         inc b
0057   0456 D7            push a
0058   0457 11            mov a, b
0059   0458 45 FF FF      mov [bp + -1], a ; i
0060   045B E4            pop a
0061   045C 0A 29 04      jmp _for1_cond
0062   045F             _for1_exit:
0063   045F 26 00 00      mov b, 0
0064   0462 F9            leave
0065   0463 05 0B         syscall sys_terminate_proc
0066   0465             init_game:
0067   0465 D2            push bp
0068   0466 9B            mov bp, sp
0069   0467 29 5F 10      mov b, [curr_state]
0070   046A 74            mov d, b
0071   046B 26 04 00      mov b, 4
0072   046E 10 3C 00      mov a, 60
0073   0471 AC            mul a, b
0074   0472 5A            add d, b
0075   0473 26 04 00      mov b, 4
0076   0476 10 02 00      mov a, 2
0077   0479 AC            mul a, b
0078   047A 5A            add d, b
0079   047B DA            push d
0080   047C 26 01 00      mov b, 1
0081   047F E7            pop d
0082   0480 11            mov a, b
0083   0481 43            mov [d], a
0084   0482 29 5F 10      mov b, [curr_state]
0085   0485 74            mov d, b
0086   0486 26 04 00      mov b, 4
0087   0489 10 3C 00      mov a, 60
0088   048C AC            mul a, b
0089   048D 5A            add d, b
0090   048E 26 05 00      mov b, 5
0091   0491 10 02 00      mov a, 2
0092   0494 AC            mul a, b
0093   0495 5A            add d, b
0094   0496 DA            push d
0095   0497 26 01 00      mov b, 1
0096   049A E7            pop d
0097   049B 11            mov a, b
0098   049C 43            mov [d], a
0099   049D 29 5F 10      mov b, [curr_state]
0100   04A0 74            mov d, b
0101   04A1 26 04 00      mov b, 4
0102   04A4 10 3C 00      mov a, 60
0103   04A7 AC            mul a, b
0104   04A8 5A            add d, b
0105   04A9 26 06 00      mov b, 6
0106   04AC 10 02 00      mov a, 2
0107   04AF AC            mul a, b
0108   04B0 5A            add d, b
0109   04B1 DA            push d
0110   04B2 26 01 00      mov b, 1
0111   04B5 E7            pop d
0112   04B6 11            mov a, b
0113   04B7 43            mov [d], a
0114   04B8 29 5F 10      mov b, [curr_state]
0115   04BB 74            mov d, b
0116   04BC 26 03 00      mov b, 3
0117   04BF 10 3C 00      mov a, 60
0118   04C2 AC            mul a, b
0119   04C3 5A            add d, b
0120   04C4 26 06 00      mov b, 6
0121   04C7 10 02 00      mov a, 2
0122   04CA AC            mul a, b
0123   04CB 5A            add d, b
0124   04CC DA            push d
0125   04CD 26 01 00      mov b, 1
0126   04D0 E7            pop d
0127   04D1 11            mov a, b
0128   04D2 43            mov [d], a
0129   04D3 29 5F 10      mov b, [curr_state]
0130   04D6 74            mov d, b
0131   04D7 26 02 00      mov b, 2
0132   04DA 10 3C 00      mov a, 60
0133   04DD AC            mul a, b
0134   04DE 5A            add d, b
0135   04DF 26 05 00      mov b, 5
0136   04E2 10 02 00      mov a, 2
0137   04E5 AC            mul a, b
0138   04E6 5A            add d, b
0139   04E7 DA            push d
0140   04E8 26 01 00      mov b, 1
0141   04EB E7            pop d
0142   04EC 11            mov a, b
0143   04ED 43            mov [d], a
0144   04EE F9            leave
0145   04EF 09            ret
0146   04F0             print:
0147   04F0 D2            push bp
0148   04F1 9B            mov bp, sp
0149   04F2             
0150   04F2             ; --- BEGIN INLINE ASM BLOCK
0151   04F2 17 05 00      mov a, [bp + 5]
0152   04F5 3C            mov d, a
0153   04F6 07 CD 19      call puts
0154   04F9             ; --- END INLINE ASM BLOCK
0155   04F9             
0156   04F9 F9            leave
0157   04FA 09            ret
0158   04FB             getn:
0159   04FB D2            push bp
0160   04FC 9B            mov bp, sp
0161   04FD 52 02 00      sub sp, 2 ; n
0162   0500             
0163   0500             ; --- BEGIN INLINE ASM BLOCK
0164   0500 07 CB 1A      call scan_u16d
0165   0503 45 FF FF      mov [bp + -1], a
0166   0506             ; --- END INLINE ASM BLOCK
0167   0506             
0168   0506 2C FF FF      mov b, [bp + -1] ; n
0169   0509 F9            leave
0170   050A 09            ret
0171   050B             print_game:
0172   050B D2            push bp
0173   050C 9B            mov bp, sp
0174   050D 52 02 00      sub sp, 2 ; i
0175   0510 52 02 00      sub sp, 2 ; j
0176   0513             _for2_init:
0177   0513 26 00 00      mov b, 0
0178   0516 D7            push a
0179   0517 11            mov a, b
0180   0518 45 FF FF      mov [bp + -1], a ; i
0181   051B E4            pop a
0182   051C             _for2_cond:
0183   051C 2C FF FF      mov b, [bp + -1] ; i
0184   051F D7            push a
0185   0520 11            mov a, b
0186   0521 26 1E 00      mov b, 30
0187   0524 B0            cmp a, b
0188   0525 0E            lodflgs
0189   0526 87 02         and al, %00000010 ; <
0190   0528 B9 00         cmp al, 0
0191   052A 0E            lodflgs
0192   052B 96            not al
0193   052C 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0194   052E 22 00         mov ah, 0
0195   0530 27            mov b, a
0196   0531 E4            pop a
0197   0532 C0 00 00      cmp b, 0
0198   0535 C6 BD 05      je _for2_exit
0199   0538             _for2_block:
0200   0538             _for3_init:
0201   0538 26 00 00      mov b, 0
0202   053B D7            push a
0203   053C 11            mov a, b
0204   053D 45 FD FF      mov [bp + -3], a ; j
0205   0540 E4            pop a
0206   0541             _for3_cond:
0207   0541 2C FD FF      mov b, [bp + -3] ; j
0208   0544 D7            push a
0209   0545 11            mov a, b
0210   0546 26 1E 00      mov b, 30
0211   0549 B0            cmp a, b
0212   054A 0E            lodflgs
0213   054B 87 02         and al, %00000010 ; <
0214   054D B9 00         cmp al, 0
0215   054F 0E            lodflgs
0216   0550 96            not al
0217   0551 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0218   0553 22 00         mov ah, 0
0219   0555 27            mov b, a
0220   0556 E4            pop a
0221   0557 C0 00 00      cmp b, 0
0222   055A C6 A3 05      je _for3_exit
0223   055D             _for3_block:
0224   055D             _if4_cond:
0225   055D 29 5F 10      mov b, [curr_state]
0226   0560 D7            push a
0227   0561 74            mov d, b
0228   0562 2C FF FF      mov b, [bp + -1] ; i
0229   0565 10 3C 00      mov a, 60
0230   0568 AC            mul a, b
0231   0569 5A            add d, b
0232   056A 2C FD FF      mov b, [bp + -3] ; j
0233   056D 10 02 00      mov a, 2
0234   0570 AC            mul a, b
0235   0571 5A            add d, b
0236   0572 2A            mov b, [d]
0237   0573 E4            pop a
0238   0574 C0 00 00      cmp b, 0
0239   0577 C6 89 05      je _if4_else
0240   057A             _if4_true:
0241   057A 26 79 17      mov b, _string_1
0242   057D FD AB         swp b
0243   057F D8            push b
0244   0580 07 F0 04      call print
0245   0583 51 02 00      add sp, 2
0246   0586 0A 95 05      jmp _if4_exit
0247   0589             _if4_else:
0248   0589 26 7C 17      mov b, _string_2
0249   058C FD AB         swp b
0250   058E D8            push b
0251   058F 07 F0 04      call print
0252   0592 51 02 00      add sp, 2
0253   0595             _if4_exit:
0254   0595             _for3_update:
0255   0595 2C FD FF      mov b, [bp + -3] ; j
0256   0598 FD 77         inc b
0257   059A D7            push a
0258   059B 11            mov a, b
0259   059C 45 FD FF      mov [bp + -3], a ; j
0260   059F E4            pop a
0261   05A0 0A 41 05      jmp _for3_cond
0262   05A3             _for3_exit:
0263   05A3 26 7F 17      mov b, _string_3
0264   05A6 FD AB         swp b
0265   05A8 D8            push b
0266   05A9 07 F0 04      call print
0267   05AC 51 02 00      add sp, 2
0268   05AF             _for2_update:
0269   05AF 2C FF FF      mov b, [bp + -1] ; i
0270   05B2 FD 77         inc b
0271   05B4 D7            push a
0272   05B5 11            mov a, b
0273   05B6 45 FF FF      mov [bp + -1], a ; i
0274   05B9 E4            pop a
0275   05BA 0A 1C 05      jmp _for2_cond
0276   05BD             _for2_exit:
0277   05BD F9            leave
0278   05BE 09            ret
0279   05BF             update_game:
0280   05BF D2            push bp
0281   05C0 9B            mov bp, sp
0282   05C1 52 02 00      sub sp, 2 ; i
0283   05C4 52 02 00      sub sp, 2 ; j
0284   05C7 52 02 00      sub sp, 2 ; ni
0285   05CA 52 02 00      sub sp, 2 ; nj
0286   05CD 52 02 00      sub sp, 2 ; count
0287   05D0             _for5_init:
0288   05D0 26 00 00      mov b, 0
0289   05D3 D7            push a
0290   05D4 11            mov a, b
0291   05D5 45 FF FF      mov [bp + -1], a ; i
0292   05D8 E4            pop a
0293   05D9             _for5_cond:
0294   05D9 2C FF FF      mov b, [bp + -1] ; i
0295   05DC D7            push a
0296   05DD 11            mov a, b
0297   05DE 26 1E 00      mov b, 30
0298   05E1 B0            cmp a, b
0299   05E2 0E            lodflgs
0300   05E3 87 02         and al, %00000010 ; <
0301   05E5 B9 00         cmp al, 0
0302   05E7 0E            lodflgs
0303   05E8 96            not al
0304   05E9 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0305   05EB 22 00         mov ah, 0
0306   05ED 27            mov b, a
0307   05EE E4            pop a
0308   05EF C0 00 00      cmp b, 0
0309   05F2 C6 65 06      je _for5_exit
0310   05F5             _for5_block:
0311   05F5             _for6_init:
0312   05F5 26 00 00      mov b, 0
0313   05F8 D7            push a
0314   05F9 11            mov a, b
0315   05FA 45 FD FF      mov [bp + -3], a ; j
0316   05FD E4            pop a
0317   05FE             _for6_cond:
0318   05FE 2C FD FF      mov b, [bp + -3] ; j
0319   0601 D7            push a
0320   0602 11            mov a, b
0321   0603 26 1E 00      mov b, 30
0322   0606 B0            cmp a, b
0323   0607 0E            lodflgs
0324   0608 87 02         and al, %00000010 ; <
0325   060A B9 00         cmp al, 0
0326   060C 0E            lodflgs
0327   060D 96            not al
0328   060E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0329   0610 22 00         mov ah, 0
0330   0612 27            mov b, a
0331   0613 E4            pop a
0332   0614 C0 00 00      cmp b, 0
0333   0617 C6 57 06      je _for6_exit
0334   061A             _for6_block:
0335   061A 29 69 17      mov b, [next_state]
0336   061D 74            mov d, b
0337   061E 2C FF FF      mov b, [bp + -1] ; i
0338   0621 10 3C 00      mov a, 60
0339   0624 AC            mul a, b
0340   0625 5A            add d, b
0341   0626 2C FD FF      mov b, [bp + -3] ; j
0342   0629 10 02 00      mov a, 2
0343   062C AC            mul a, b
0344   062D 5A            add d, b
0345   062E DA            push d
0346   062F 29 5F 10      mov b, [curr_state]
0347   0632 D7            push a
0348   0633 74            mov d, b
0349   0634 2C FF FF      mov b, [bp + -1] ; i
0350   0637 10 3C 00      mov a, 60
0351   063A AC            mul a, b
0352   063B 5A            add d, b
0353   063C 2C FD FF      mov b, [bp + -3] ; j
0354   063F 10 02 00      mov a, 2
0355   0642 AC            mul a, b
0356   0643 5A            add d, b
0357   0644 2A            mov b, [d]
0358   0645 E4            pop a
0359   0646 E7            pop d
0360   0647 11            mov a, b
0361   0648 43            mov [d], a
0362   0649             _for6_update:
0363   0649 2C FD FF      mov b, [bp + -3] ; j
0364   064C FD 77         inc b
0365   064E D7            push a
0366   064F 11            mov a, b
0367   0650 45 FD FF      mov [bp + -3], a ; j
0368   0653 E4            pop a
0369   0654 0A FE 05      jmp _for6_cond
0370   0657             _for6_exit:
0371   0657             _for5_update:
0372   0657 2C FF FF      mov b, [bp + -1] ; i
0373   065A FD 77         inc b
0374   065C D7            push a
0375   065D 11            mov a, b
0376   065E 45 FF FF      mov [bp + -1], a ; i
0377   0661 E4            pop a
0378   0662 0A D9 05      jmp _for5_cond
0379   0665             _for5_exit:
0380   0665             _for7_init:
0381   0665 26 01 00      mov b, 1
0382   0668 D7            push a
0383   0669 11            mov a, b
0384   066A 45 FF FF      mov [bp + -1], a ; i
0385   066D E4            pop a
0386   066E             _for7_cond:
0387   066E 2C FF FF      mov b, [bp + -1] ; i
0388   0671 D7            push a
0389   0672 11            mov a, b
0390   0673 26 1E 00      mov b, 30
0391   0676 B0            cmp a, b
0392   0677 0E            lodflgs
0393   0678 87 02         and al, %00000010 ; <
0394   067A B9 00         cmp al, 0
0395   067C 0E            lodflgs
0396   067D 96            not al
0397   067E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0398   0680 22 00         mov ah, 0
0399   0682 27            mov b, a
0400   0683 E4            pop a
0401   0684 C0 00 00      cmp b, 0
0402   0687 C6 BE 08      je _for7_exit
0403   068A             _for7_block:
0404   068A             _for8_init:
0405   068A 26 01 00      mov b, 1
0406   068D D7            push a
0407   068E 11            mov a, b
0408   068F 45 FD FF      mov [bp + -3], a ; j
0409   0692 E4            pop a
0410   0693             _for8_cond:
0411   0693 2C FD FF      mov b, [bp + -3] ; j
0412   0696 D7            push a
0413   0697 11            mov a, b
0414   0698 26 1E 00      mov b, 30
0415   069B B0            cmp a, b
0416   069C 0E            lodflgs
0417   069D 87 02         and al, %00000010 ; <
0418   069F B9 00         cmp al, 0
0419   06A1 0E            lodflgs
0420   06A2 96            not al
0421   06A3 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0422   06A5 22 00         mov ah, 0
0423   06A7 27            mov b, a
0424   06A8 E4            pop a
0425   06A9 C0 00 00      cmp b, 0
0426   06AC C6 B0 08      je _for8_exit
0427   06AF             _for8_block:
0428   06AF 26 00 00      mov b, 0
0429   06B2 D7            push a
0430   06B3 11            mov a, b
0431   06B4 45 F7 FF      mov [bp + -9], a ; count
0432   06B7 E4            pop a
0433   06B8             _for9_init:
0434   06B8 2C FF FF      mov b, [bp + -1] ; i
0435   06BB D7            push a
0436   06BC 11            mov a, b
0437   06BD 26 01 00      mov b, 1
0438   06C0 60            sub a, b
0439   06C1 27            mov b, a
0440   06C2 E4            pop a
0441   06C3 D7            push a
0442   06C4 11            mov a, b
0443   06C5 45 FB FF      mov [bp + -5], a ; ni
0444   06C8 E4            pop a
0445   06C9             _for9_cond:
0446   06C9 2C FB FF      mov b, [bp + -5] ; ni
0447   06CC D7            push a
0448   06CD 11            mov a, b
0449   06CE 2C FF FF      mov b, [bp + -1] ; i
0450   06D1 D7            push a
0451   06D2 11            mov a, b
0452   06D3 26 01 00      mov b, 1
0453   06D6 54            add a, b
0454   06D7 27            mov b, a
0455   06D8 E4            pop a
0456   06D9 B0            cmp a, b
0457   06DA 0E            lodflgs
0458   06DB 87 03         and al, %00000011 ; <=
0459   06DD B9 00         cmp al, 0
0460   06DF 0E            lodflgs
0461   06E0 96            not al
0462   06E1 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0463   06E3 22 00         mov ah, 0
0464   06E5 27            mov b, a
0465   06E6 E4            pop a
0466   06E7 C0 00 00      cmp b, 0
0467   06EA C6 EE 07      je _for9_exit
0468   06ED             _for9_block:
0469   06ED             _for10_init:
0470   06ED 2C FD FF      mov b, [bp + -3] ; j
0471   06F0 D7            push a
0472   06F1 11            mov a, b
0473   06F2 26 01 00      mov b, 1
0474   06F5 60            sub a, b
0475   06F6 27            mov b, a
0476   06F7 E4            pop a
0477   06F8 D7            push a
0478   06F9 11            mov a, b
0479   06FA 45 F9 FF      mov [bp + -7], a ; nj
0480   06FD E4            pop a
0481   06FE             _for10_cond:
0482   06FE 2C F9 FF      mov b, [bp + -7] ; nj
0483   0701 D7            push a
0484   0702 11            mov a, b
0485   0703 2C FD FF      mov b, [bp + -3] ; j
0486   0706 D7            push a
0487   0707 11            mov a, b
0488   0708 26 01 00      mov b, 1
0489   070B 54            add a, b
0490   070C 27            mov b, a
0491   070D E4            pop a
0492   070E B0            cmp a, b
0493   070F 0E            lodflgs
0494   0710 87 03         and al, %00000011 ; <=
0495   0712 B9 00         cmp al, 0
0496   0714 0E            lodflgs
0497   0715 96            not al
0498   0716 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0499   0718 22 00         mov ah, 0
0500   071A 27            mov b, a
0501   071B E4            pop a
0502   071C C0 00 00      cmp b, 0
0503   071F C6 E0 07      je _for10_exit
0504   0722             _for10_block:
0505   0722             _if11_cond:
0506   0722 2C FB FF      mov b, [bp + -5] ; ni
0507   0725 D7            push a
0508   0726 11            mov a, b
0509   0727 26 1E 00      mov b, 30
0510   072A B0            cmp a, b
0511   072B 0E            lodflgs
0512   072C 87 02         and al, %00000010 ; <
0513   072E B9 00         cmp al, 0
0514   0730 0E            lodflgs
0515   0731 96            not al
0516   0732 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0517   0734 22 00         mov ah, 0
0518   0736 27            mov b, a
0519   0737 E4            pop a
0520   0738 D7            push a
0521   0739 11            mov a, b
0522   073A AF 00 00      cmp a, 0
0523   073D 0E            lodflgs
0524   073E 96            not al
0525   073F 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0526   0741 2C F9 FF      mov b, [bp + -7] ; nj
0527   0744 D7            push a
0528   0745 11            mov a, b
0529   0746 26 1E 00      mov b, 30
0530   0749 B0            cmp a, b
0531   074A 0E            lodflgs
0532   074B 87 02         and al, %00000010 ; <
0533   074D B9 00         cmp al, 0
0534   074F 0E            lodflgs
0535   0750 96            not al
0536   0751 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0537   0753 22 00         mov ah, 0
0538   0755 27            mov b, a
0539   0756 E4            pop a
0540   0757 D7            push a
0541   0758 C0 00 00      cmp b, 0
0542   075B 0E            lodflgs
0543   075C 96            not al
0544   075D 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0545   075F 22 00         mov ah, 0
0546   0761 27            mov b, a
0547   0762 E4            pop a
0548   0763 86            and a, b
0549   0764 27            mov b, a
0550   0765 E4            pop a
0551   0766 C0 00 00      cmp b, 0
0552   0769 C6 D2 07      je _if11_exit
0553   076C             _if11_true:
0554   076C             _if12_cond:
0555   076C 2C FB FF      mov b, [bp + -5] ; ni
0556   076F D7            push a
0557   0770 11            mov a, b
0558   0771 2C FF FF      mov b, [bp + -1] ; i
0559   0774 B0            cmp a, b
0560   0775 0E            lodflgs
0561   0776 87 01         and al, %00000001
0562   0778 8F 01         xor al, %00000001 ; !=
0563   077A B9 00         cmp al, 0
0564   077C 0E            lodflgs
0565   077D 96            not al
0566   077E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0567   0780 22 00         mov ah, 0
0568   0782 27            mov b, a
0569   0783 E4            pop a
0570   0784 D7            push a
0571   0785 11            mov a, b
0572   0786 2C F9 FF      mov b, [bp + -7] ; nj
0573   0789 D7            push a
0574   078A 11            mov a, b
0575   078B 2C FD FF      mov b, [bp + -3] ; j
0576   078E B0            cmp a, b
0577   078F 0E            lodflgs
0578   0790 87 01         and al, %00000001
0579   0792 8F 01         xor al, %00000001 ; !=
0580   0794 B9 00         cmp al, 0
0581   0796 0E            lodflgs
0582   0797 96            not al
0583   0798 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0584   079A 22 00         mov ah, 0
0585   079C 27            mov b, a
0586   079D E4            pop a
0587   079E 8A            or a, b
0588   079F 27            mov b, a
0589   07A0 E4            pop a
0590   07A1 C0 00 00      cmp b, 0
0591   07A4 C6 CF 07      je _if12_exit
0592   07A7             _if12_true:
0593   07A7 2C F7 FF      mov b, [bp + -9] ; count
0594   07AA D7            push a
0595   07AB 11            mov a, b
0596   07AC 29 5F 10      mov b, [curr_state]
0597   07AF D7            push a
0598   07B0 74            mov d, b
0599   07B1 2C FB FF      mov b, [bp + -5] ; ni
0600   07B4 10 3C 00      mov a, 60
0601   07B7 AC            mul a, b
0602   07B8 5A            add d, b
0603   07B9 2C F9 FF      mov b, [bp + -7] ; nj
0604   07BC 10 02 00      mov a, 2
0605   07BF AC            mul a, b
0606   07C0 5A            add d, b
0607   07C1 2A            mov b, [d]
0608   07C2 E4            pop a
0609   07C3 54            add a, b
0610   07C4 27            mov b, a
0611   07C5 E4            pop a
0612   07C6 D7            push a
0613   07C7 11            mov a, b
0614   07C8 45 F7 FF      mov [bp + -9], a ; count
0615   07CB E4            pop a
0616   07CC 0A CF 07      jmp _if12_exit
0617   07CF             _if12_exit:
0618   07CF 0A D2 07      jmp _if11_exit
0619   07D2             _if11_exit:
0620   07D2             _for10_update:
0621   07D2 2C F9 FF      mov b, [bp + -7] ; nj
0622   07D5 FD 77         inc b
0623   07D7 D7            push a
0624   07D8 11            mov a, b
0625   07D9 45 F9 FF      mov [bp + -7], a ; nj
0626   07DC E4            pop a
0627   07DD 0A FE 06      jmp _for10_cond
0628   07E0             _for10_exit:
0629   07E0             _for9_update:
0630   07E0 2C FB FF      mov b, [bp + -5] ; ni
0631   07E3 FD 77         inc b
0632   07E5 D7            push a
0633   07E6 11            mov a, b
0634   07E7 45 FB FF      mov [bp + -5], a ; ni
0635   07EA E4            pop a
0636   07EB 0A C9 06      jmp _for9_cond
0637   07EE             _for9_exit:
0638   07EE             _if13_cond:
0639   07EE 29 5F 10      mov b, [curr_state]
0640   07F1 D7            push a
0641   07F2 74            mov d, b
0642   07F3 2C FF FF      mov b, [bp + -1] ; i
0643   07F6 10 3C 00      mov a, 60
0644   07F9 AC            mul a, b
0645   07FA 5A            add d, b
0646   07FB 2C FD FF      mov b, [bp + -3] ; j
0647   07FE 10 02 00      mov a, 2
0648   0801 AC            mul a, b
0649   0802 5A            add d, b
0650   0803 2A            mov b, [d]
0651   0804 E4            pop a
0652   0805 C0 00 00      cmp b, 0
0653   0808 C6 68 08      je _if13_else
0654   080B             _if13_true:
0655   080B             _if14_cond:
0656   080B 2C F7 FF      mov b, [bp + -9] ; count
0657   080E D7            push a
0658   080F 11            mov a, b
0659   0810 26 02 00      mov b, 2
0660   0813 B0            cmp a, b
0661   0814 0E            lodflgs
0662   0815 87 02         and al, %00000010 ; <
0663   0817 B9 00         cmp al, 0
0664   0819 0E            lodflgs
0665   081A 96            not al
0666   081B 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0667   081D 22 00         mov ah, 0
0668   081F 27            mov b, a
0669   0820 E4            pop a
0670   0821 D7            push a
0671   0822 11            mov a, b
0672   0823 2C F7 FF      mov b, [bp + -9] ; count
0673   0826 D7            push a
0674   0827 11            mov a, b
0675   0828 26 03 00      mov b, 3
0676   082B B0            cmp a, b
0677   082C 0E            lodflgs
0678   082D 87 03         and al, %00000011
0679   082F B9 00         cmp al, %00000000
0680   0831 0E            lodflgs
0681   0832 87 01         and al, %00000001 ; >
0682   0834 B9 00         cmp al, 0
0683   0836 0E            lodflgs
0684   0837 96            not al
0685   0838 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0686   083A 22 00         mov ah, 0
0687   083C 27            mov b, a
0688   083D E4            pop a
0689   083E 8A            or a, b
0690   083F 27            mov b, a
0691   0840 E4            pop a
0692   0841 C0 00 00      cmp b, 0
0693   0844 C6 65 08      je _if14_exit
0694   0847             _if14_true:
0695   0847 29 69 17      mov b, [next_state]
0696   084A 74            mov d, b
0697   084B 2C FF FF      mov b, [bp + -1] ; i
0698   084E 10 3C 00      mov a, 60
0699   0851 AC            mul a, b
0700   0852 5A            add d, b
0701   0853 2C FD FF      mov b, [bp + -3] ; j
0702   0856 10 02 00      mov a, 2
0703   0859 AC            mul a, b
0704   085A 5A            add d, b
0705   085B DA            push d
0706   085C 26 00 00      mov b, 0
0707   085F E7            pop d
0708   0860 11            mov a, b
0709   0861 43            mov [d], a
0710   0862 0A 65 08      jmp _if14_exit
0711   0865             _if14_exit:
0712   0865 0A A2 08      jmp _if13_exit
0713   0868             _if13_else:
0714   0868             _if15_cond:
0715   0868 2C F7 FF      mov b, [bp + -9] ; count
0716   086B D7            push a
0717   086C 11            mov a, b
0718   086D 26 03 00      mov b, 3
0719   0870 B0            cmp a, b
0720   0871 0E            lodflgs
0721   0872 87 01         and al, %00000001 ; ==
0722   0874 B9 00         cmp al, 0
0723   0876 0E            lodflgs
0724   0877 96            not al
0725   0878 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0726   087A 22 00         mov ah, 0
0727   087C 27            mov b, a
0728   087D E4            pop a
0729   087E C0 00 00      cmp b, 0
0730   0881 C6 A2 08      je _if15_exit
0731   0884             _if15_true:
0732   0884 29 69 17      mov b, [next_state]
0733   0887 74            mov d, b
0734   0888 2C FF FF      mov b, [bp + -1] ; i
0735   088B 10 3C 00      mov a, 60
0736   088E AC            mul a, b
0737   088F 5A            add d, b
0738   0890 2C FD FF      mov b, [bp + -3] ; j
0739   0893 10 02 00      mov a, 2
0740   0896 AC            mul a, b
0741   0897 5A            add d, b
0742   0898 DA            push d
0743   0899 26 01 00      mov b, 1
0744   089C E7            pop d
0745   089D 11            mov a, b
0746   089E 43            mov [d], a
0747   089F 0A A2 08      jmp _if15_exit
0748   08A2             _if15_exit:
0749   08A2             _if13_exit:
0750   08A2             _for8_update:
0751   08A2 2C FD FF      mov b, [bp + -3] ; j
0752   08A5 FD 77         inc b
0753   08A7 D7            push a
0754   08A8 11            mov a, b
0755   08A9 45 FD FF      mov [bp + -3], a ; j
0756   08AC E4            pop a
0757   08AD 0A 93 06      jmp _for8_cond
0758   08B0             _for8_exit:
0759   08B0             _for7_update:
0760   08B0 2C FF FF      mov b, [bp + -1] ; i
0761   08B3 FD 77         inc b
0762   08B5 D7            push a
0763   08B6 11            mov a, b
0764   08B7 45 FF FF      mov [bp + -1], a ; i
0765   08BA E4            pop a
0766   08BB 0A 6E 06      jmp _for7_cond
0767   08BE             _for7_exit:
0768   08BE             _for16_init:
0769   08BE 26 00 00      mov b, 0
0770   08C1 D7            push a
0771   08C2 11            mov a, b
0772   08C3 45 FF FF      mov [bp + -1], a ; i
0773   08C6 E4            pop a
0774   08C7             _for16_cond:
0775   08C7 2C FF FF      mov b, [bp + -1] ; i
0776   08CA D7            push a
0777   08CB 11            mov a, b
0778   08CC 26 1E 00      mov b, 30
0779   08CF B0            cmp a, b
0780   08D0 0E            lodflgs
0781   08D1 87 02         and al, %00000010 ; <
0782   08D3 B9 00         cmp al, 0
0783   08D5 0E            lodflgs
0784   08D6 96            not al
0785   08D7 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0786   08D9 22 00         mov ah, 0
0787   08DB 27            mov b, a
0788   08DC E4            pop a
0789   08DD C0 00 00      cmp b, 0
0790   08E0 C6 53 09      je _for16_exit
0791   08E3             _for16_block:
0792   08E3             _for17_init:
0793   08E3 26 00 00      mov b, 0
0794   08E6 D7            push a
0795   08E7 11            mov a, b
0796   08E8 45 FD FF      mov [bp + -3], a ; j
0797   08EB E4            pop a
0798   08EC             _for17_cond:
0799   08EC 2C FD FF      mov b, [bp + -3] ; j
0800   08EF D7            push a
0801   08F0 11            mov a, b
0802   08F1 26 1E 00      mov b, 30
0803   08F4 B0            cmp a, b
0804   08F5 0E            lodflgs
0805   08F6 87 02         and al, %00000010 ; <
0806   08F8 B9 00         cmp al, 0
0807   08FA 0E            lodflgs
0808   08FB 96            not al
0809   08FC 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0810   08FE 22 00         mov ah, 0
0811   0900 27            mov b, a
0812   0901 E4            pop a
0813   0902 C0 00 00      cmp b, 0
0814   0905 C6 45 09      je _for17_exit
0815   0908             _for17_block:
0816   0908 29 5F 10      mov b, [curr_state]
0817   090B 74            mov d, b
0818   090C 2C FF FF      mov b, [bp + -1] ; i
0819   090F 10 3C 00      mov a, 60
0820   0912 AC            mul a, b
0821   0913 5A            add d, b
0822   0914 2C FD FF      mov b, [bp + -3] ; j
0823   0917 10 02 00      mov a, 2
0824   091A AC            mul a, b
0825   091B 5A            add d, b
0826   091C DA            push d
0827   091D 29 69 17      mov b, [next_state]
0828   0920 D7            push a
0829   0921 74            mov d, b
0830   0922 2C FF FF      mov b, [bp + -1] ; i
0831   0925 10 3C 00      mov a, 60
0832   0928 AC            mul a, b
0833   0929 5A            add d, b
0834   092A 2C FD FF      mov b, [bp + -3] ; j
0835   092D 10 02 00      mov a, 2
0836   0930 AC            mul a, b
0837   0931 5A            add d, b
0838   0932 2A            mov b, [d]
0839   0933 E4            pop a
0840   0934 E7            pop d
0841   0935 11            mov a, b
0842   0936 43            mov [d], a
0843   0937             _for17_update:
0844   0937 2C FD FF      mov b, [bp + -3] ; j
0845   093A FD 77         inc b
0846   093C D7            push a
0847   093D 11            mov a, b
0848   093E 45 FD FF      mov [bp + -3], a ; j
0849   0941 E4            pop a
0850   0942 0A EC 08      jmp _for17_cond
0851   0945             _for17_exit:
0852   0945             _for16_update:
0853   0945 2C FF FF      mov b, [bp + -1] ; i
0854   0948 FD 77         inc b
0855   094A D7            push a
0856   094B 11            mov a, b
0857   094C 45 FF FF      mov [bp + -1], a ; i
0858   094F E4            pop a
0859   0950 0A C7 08      jmp _for16_cond
0860   0953             _for16_exit:
0861   0953 F9            leave
0862   0954 09            ret
0863   0955             ; --- END TEXT BLOCK
0864   0955             
0865   0955             ; --- BEGIN DATA BLOCK
0866   0955             curr_state_data: 
0867   0955 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0867   0959 00 00 00 00 
0867   095D 00 00 00 00 
0867   0961 00 00 00 00 
0867   0965 00 00 00 00 
0867   0969 00 00 00 00 
0867   096D 00 00 00 00 
0867   0971 00 00 00 00 
0867   0975 00 00 00 00 
0867   0979 00 00 00 00 
0867   097D 00 00 00 00 
0867   0981 00 00 00 00 
0867   0985 00 00 00 00 
0867   0989 00 00 00 00 
0867   098D 00 00 00 00 
0868   0991 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0868   0995 00 00 00 00 
0868   0999 00 00 00 00 
0868   099D 00 00 00 00 
0868   09A1 00 00 00 00 
0868   09A5 00 00 00 00 
0868   09A9 00 00 00 00 
0868   09AD 00 00 00 00 
0868   09B1 00 00 00 00 
0868   09B5 00 00 00 00 
0868   09B9 00 00 00 00 
0868   09BD 00 00 00 00 
0868   09C1 00 00 00 00 
0868   09C5 00 00 00 00 
0868   09C9 00 00 00 00 
0869   09CD 00 00 00 00 .dw 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0869   09D1 00 00 00 00 
0869   09D5 01 00 00 00 
0869   09D9 00 00 00 00 
0869   09DD 00 00 00 00 
0869   09E1 00 00 00 00 
0869   09E5 00 00 00 00 
0869   09E9 00 00 00 00 
0869   09ED 00 00 00 00 
0869   09F1 00 00 00 00 
0869   09F5 00 00 00 00 
0869   09F9 00 00 00 00 
0869   09FD 00 00 00 00 
0869   0A01 00 00 00 00 
0869   0A05 00 00 00 00 
0870   0A09 00 00 00 00 .dw 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0870   0A0D 01 00 00 00 
0870   0A11 01 00 00 00 
0870   0A15 00 00 00 00 
0870   0A19 00 00 00 00 
0870   0A1D 00 00 00 00 
0870   0A21 00 00 00 00 
0870   0A25 00 00 00 00 
0870   0A29 00 00 00 00 
0870   0A2D 00 00 00 00 
0870   0A31 00 00 00 00 
0870   0A35 00 00 00 00 
0870   0A39 00 00 00 00 
0870   0A3D 00 00 00 00 
0870   0A41 00 00 00 00 
0871   0A45 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0871   0A49 00 00 01 00 
0871   0A4D 01 00 00 00 
0871   0A51 00 00 00 00 
0871   0A55 00 00 00 00 
0871   0A59 00 00 00 00 
0871   0A5D 00 00 00 00 
0871   0A61 00 00 00 00 
0871   0A65 00 00 00 00 
0871   0A69 00 00 00 00 
0871   0A6D 00 00 00 00 
0871   0A71 00 00 00 00 
0871   0A75 00 00 00 00 
0871   0A79 00 00 00 00 
0871   0A7D 00 00 00 00 
0872   0A81 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0872   0A85 00 00 00 00 
0872   0A89 00 00 00 00 
0872   0A8D 00 00 00 00 
0872   0A91 00 00 00 00 
0872   0A95 00 00 00 00 
0872   0A99 00 00 00 00 
0872   0A9D 00 00 00 00 
0872   0AA1 00 00 00 00 
0872   0AA5 00 00 00 00 
0872   0AA9 00 00 00 00 
0872   0AAD 00 00 00 00 
0872   0AB1 00 00 00 00 
0872   0AB5 00 00 00 00 
0872   0AB9 00 00 00 00 
0873   0ABD 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0873   0AC1 00 00 00 00 
0873   0AC5 00 00 00 00 
0873   0AC9 00 00 00 00 
0873   0ACD 00 00 00 00 
0873   0AD1 00 00 00 00 
0873   0AD5 00 00 00 00 
0873   0AD9 00 00 00 00 
0873   0ADD 00 00 00 00 
0873   0AE1 00 00 00 00 
0873   0AE5 00 00 00 00 
0873   0AE9 00 00 00 00 
0873   0AED 00 00 00 00 
0873   0AF1 00 00 00 00 
0873   0AF5 00 00 00 00 
0874   0AF9 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0874   0AFD 00 00 00 00 
0874   0B01 00 00 00 00 
0874   0B05 00 00 00 00 
0874   0B09 00 00 00 00 
0874   0B0D 00 00 00 00 
0874   0B11 00 00 00 00 
0874   0B15 00 00 00 00 
0874   0B19 00 00 00 00 
0874   0B1D 00 00 00 00 
0874   0B21 00 00 00 00 
0874   0B25 00 00 00 00 
0874   0B29 00 00 00 00 
0874   0B2D 00 00 00 00 
0874   0B31 00 00 00 00 
0875   0B35 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0875   0B39 00 00 00 00 
0875   0B3D 00 00 00 00 
0875   0B41 00 00 00 00 
0875   0B45 00 00 00 00 
0875   0B49 00 00 00 00 
0875   0B4D 00 00 00 00 
0875   0B51 00 00 00 00 
0875   0B55 00 00 00 00 
0875   0B59 00 00 00 00 
0875   0B5D 00 00 00 00 
0875   0B61 00 00 00 00 
0875   0B65 00 00 00 00 
0875   0B69 00 00 00 00 
0875   0B6D 00 00 00 00 
0876   0B71 00 00       .dw 
0877   0B73 00 00 00 00 .fill 1260, 0
0877   0B77 00 00 00 00 
0877   0B7B 00 00 00 00 
0877   0B7F 00 00 00 00 
0877   0B83 00 00 00 00 
0877   0B87 00 00 00 00 
0877   0B8B 00 00 00 00 
0877   0B8F 00 00 00 00 
0877   0B93 00 00 00 00 
0877   0B97 00 00 00 00 
0877   0B9B 00 00 00 00 
0877   0B9F 00 00 00 00 
0877   0BA3 00 00 00 00 
0877   0BA7 00 00 00 00 
0877   0BAB 00 00 00 00 
0877   0BAF 00 00 00 00 
0877   0BB3 00 00 00 00 
0877   0BB7 00 00 00 00 
0877   0BBB 00 00 00 00 
0877   0BBF 00 00 00 00 
0877   0BC3 00 00 00 00 
0877   0BC7 00 00 00 00 
0877   0BCB 00 00 00 00 
0877   0BCF 00 00 00 00 
0877   0BD3 00 00 00 00 
0877   0BD7 00 00 00 00 
0877   0BDB 00 00 00 00 
0877   0BDF 00 00 00 00 
0877   0BE3 00 00 00 00 
0877   0BE7 00 00 00 00 
0877   0BEB 00 00 00 00 
0877   0BEF 00 00 00 00 
0877   0BF3 00 00 00 00 
0877   0BF7 00 00 00 00 
0877   0BFB 00 00 00 00 
0877   0BFF 00 00 00 00 
0877   0C03 00 00 00 00 
0877   0C07 00 00 00 00 
0877   0C0B 00 00 00 00 
0877   0C0F 00 00 00 00 
0877   0C13 00 00 00 00 
0877   0C17 00 00 00 00 
0877   0C1B 00 00 00 00 
0877   0C1F 00 00 00 00 
0877   0C23 00 00 00 00 
0877   0C27 00 00 00 00 
0877   0C2B 00 00 00 00 
0877   0C2F 00 00 00 00 
0877   0C33 00 00 00 00 
0877   0C37 00 00 00 00 
0877   0C3B 00 00 00 00 
0877   0C3F 00 00 00 00 
0877   0C43 00 00 00 00 
0877   0C47 00 00 00 00 
0877   0C4B 00 00 00 00 
0877   0C4F 00 00 00 00 
0877   0C53 00 00 00 00 
0877   0C57 00 00 00 00 
0877   0C5B 00 00 00 00 
0877   0C5F 00 00 00 00 
0877   0C63 00 00 00 00 
0877   0C67 00 00 00 00 
0877   0C6B 00 00 00 00 
0877   0C6F 00 00 00 00 
0877   0C73 00 00 00 00 
0877   0C77 00 00 00 00 
0877   0C7B 00 00 00 00 
0877   0C7F 00 00 00 00 
0877   0C83 00 00 00 00 
0877   0C87 00 00 00 00 
0877   0C8B 00 00 00 00 
0877   0C8F 00 00 00 00 
0877   0C93 00 00 00 00 
0877   0C97 00 00 00 00 
0877   0C9B 00 00 00 00 
0877   0C9F 00 00 00 00 
0877   0CA3 00 00 00 00 
0877   0CA7 00 00 00 00 
0877   0CAB 00 00 00 00 
0877   0CAF 00 00 00 00 
0877   0CB3 00 00 00 00 
0877   0CB7 00 00 00 00 
0877   0CBB 00 00 00 00 
0877   0CBF 00 00 00 00 
0877   0CC3 00 00 00 00 
0877   0CC7 00 00 00 00 
0877   0CCB 00 00 00 00 
0877   0CCF 00 00 00 00 
0877   0CD3 00 00 00 00 
0877   0CD7 00 00 00 00 
0877   0CDB 00 00 00 00 
0877   0CDF 00 00 00 00 
0877   0CE3 00 00 00 00 
0877   0CE7 00 00 00 00 
0877   0CEB 00 00 00 00 
0877   0CEF 00 00 00 00 
0877   0CF3 00 00 00 00 
0877   0CF7 00 00 00 00 
0877   0CFB 00 00 00 00 
0877   0CFF 00 00 00 00 
0877   0D03 00 00 00 00 
0877   0D07 00 00 00 00 
0877   0D0B 00 00 00 00 
0877   0D0F 00 00 00 00 
0877   0D13 00 00 00 00 
0877   0D17 00 00 00 00 
0877   0D1B 00 00 00 00 
0877   0D1F 00 00 00 00 
0877   0D23 00 00 00 00 
0877   0D27 00 00 00 00 
0877   0D2B 00 00 00 00 
0877   0D2F 00 00 00 00 
0877   0D33 00 00 00 00 
0877   0D37 00 00 00 00 
0877   0D3B 00 00 00 00 
0877   0D3F 00 00 00 00 
0877   0D43 00 00 00 00 
0877   0D47 00 00 00 00 
0877   0D4B 00 00 00 00 
0877   0D4F 00 00 00 00 
0877   0D53 00 00 00 00 
0877   0D57 00 00 00 00 
0877   0D5B 00 00 00 00 
0877   0D5F 00 00 00 00 
0877   0D63 00 00 00 00 
0877   0D67 00 00 00 00 
0877   0D6B 00 00 00 00 
0877   0D6F 00 00 00 00 
0877   0D73 00 00 00 00 
0877   0D77 00 00 00 00 
0877   0D7B 00 00 00 00 
0877   0D7F 00 00 00 00 
0877   0D83 00 00 00 00 
0877   0D87 00 00 00 00 
0877   0D8B 00 00 00 00 
0877   0D8F 00 00 00 00 
0877   0D93 00 00 00 00 
0877   0D97 00 00 00 00 
0877   0D9B 00 00 00 00 
0877   0D9F 00 00 00 00 
0877   0DA3 00 00 00 00 
0877   0DA7 00 00 00 00 
0877   0DAB 00 00 00 00 
0877   0DAF 00 00 00 00 
0877   0DB3 00 00 00 00 
0877   0DB7 00 00 00 00 
0877   0DBB 00 00 00 00 
0877   0DBF 00 00 00 00 
0877   0DC3 00 00 00 00 
0877   0DC7 00 00 00 00 
0877   0DCB 00 00 00 00 
0877   0DCF 00 00 00 00 
0877   0DD3 00 00 00 00 
0877   0DD7 00 00 00 00 
0877   0DDB 00 00 00 00 
0877   0DDF 00 00 00 00 
0877   0DE3 00 00 00 00 
0877   0DE7 00 00 00 00 
0877   0DEB 00 00 00 00 
0877   0DEF 00 00 00 00 
0877   0DF3 00 00 00 00 
0877   0DF7 00 00 00 00 
0877   0DFB 00 00 00 00 
0877   0DFF 00 00 00 00 
0877   0E03 00 00 00 00 
0877   0E07 00 00 00 00 
0877   0E0B 00 00 00 00 
0877   0E0F 00 00 00 00 
0877   0E13 00 00 00 00 
0877   0E17 00 00 00 00 
0877   0E1B 00 00 00 00 
0877   0E1F 00 00 00 00 
0877   0E23 00 00 00 00 
0877   0E27 00 00 00 00 
0877   0E2B 00 00 00 00 
0877   0E2F 00 00 00 00 
0877   0E33 00 00 00 00 
0877   0E37 00 00 00 00 
0877   0E3B 00 00 00 00 
0877   0E3F 00 00 00 00 
0877   0E43 00 00 00 00 
0877   0E47 00 00 00 00 
0877   0E4B 00 00 00 00 
0877   0E4F 00 00 00 00 
0877   0E53 00 00 00 00 
0877   0E57 00 00 00 00 
0877   0E5B 00 00 00 00 
0877   0E5F 00 00 00 00 
0877   0E63 00 00 00 00 
0877   0E67 00 00 00 00 
0877   0E6B 00 00 00 00 
0877   0E6F 00 00 00 00 
0877   0E73 00 00 00 00 
0877   0E77 00 00 00 00 
0877   0E7B 00 00 00 00 
0877   0E7F 00 00 00 00 
0877   0E83 00 00 00 00 
0877   0E87 00 00 00 00 
0877   0E8B 00 00 00 00 
0877   0E8F 00 00 00 00 
0877   0E93 00 00 00 00 
0877   0E97 00 00 00 00 
0877   0E9B 00 00 00 00 
0877   0E9F 00 00 00 00 
0877   0EA3 00 00 00 00 
0877   0EA7 00 00 00 00 
0877   0EAB 00 00 00 00 
0877   0EAF 00 00 00 00 
0877   0EB3 00 00 00 00 
0877   0EB7 00 00 00 00 
0877   0EBB 00 00 00 00 
0877   0EBF 00 00 00 00 
0877   0EC3 00 00 00 00 
0877   0EC7 00 00 00 00 
0877   0ECB 00 00 00 00 
0877   0ECF 00 00 00 00 
0877   0ED3 00 00 00 00 
0877   0ED7 00 00 00 00 
0877   0EDB 00 00 00 00 
0877   0EDF 00 00 00 00 
0877   0EE3 00 00 00 00 
0877   0EE7 00 00 00 00 
0877   0EEB 00 00 00 00 
0877   0EEF 00 00 00 00 
0877   0EF3 00 00 00 00 
0877   0EF7 00 00 00 00 
0877   0EFB 00 00 00 00 
0877   0EFF 00 00 00 00 
0877   0F03 00 00 00 00 
0877   0F07 00 00 00 00 
0877   0F0B 00 00 00 00 
0877   0F0F 00 00 00 00 
0877   0F13 00 00 00 00 
0877   0F17 00 00 00 00 
0877   0F1B 00 00 00 00 
0877   0F1F 00 00 00 00 
0877   0F23 00 00 00 00 
0877   0F27 00 00 00 00 
0877   0F2B 00 00 00 00 
0877   0F2F 00 00 00 00 
0877   0F33 00 00 00 00 
0877   0F37 00 00 00 00 
0877   0F3B 00 00 00 00 
0877   0F3F 00 00 00 00 
0877   0F43 00 00 00 00 
0877   0F47 00 00 00 00 
0877   0F4B 00 00 00 00 
0877   0F4F 00 00 00 00 
0877   0F53 00 00 00 00 
0877   0F57 00 00 00 00 
0877   0F5B 00 00 00 00 
0877   0F5F 00 00 00 00 
0877   0F63 00 00 00 00 
0877   0F67 00 00 00 00 
0877   0F6B 00 00 00 00 
0877   0F6F 00 00 00 00 
0877   0F73 00 00 00 00 
0877   0F77 00 00 00 00 
0877   0F7B 00 00 00 00 
0877   0F7F 00 00 00 00 
0877   0F83 00 00 00 00 
0877   0F87 00 00 00 00 
0877   0F8B 00 00 00 00 
0877   0F8F 00 00 00 00 
0877   0F93 00 00 00 00 
0877   0F97 00 00 00 00 
0877   0F9B 00 00 00 00 
0877   0F9F 00 00 00 00 
0877   0FA3 00 00 00 00 
0877   0FA7 00 00 00 00 
0877   0FAB 00 00 00 00 
0877   0FAF 00 00 00 00 
0877   0FB3 00 00 00 00 
0877   0FB7 00 00 00 00 
0877   0FBB 00 00 00 00 
0877   0FBF 00 00 00 00 
0877   0FC3 00 00 00 00 
0877   0FC7 00 00 00 00 
0877   0FCB 00 00 00 00 
0877   0FCF 00 00 00 00 
0877   0FD3 00 00 00 00 
0877   0FD7 00 00 00 00 
0877   0FDB 00 00 00 00 
0877   0FDF 00 00 00 00 
0877   0FE3 00 00 00 00 
0877   0FE7 00 00 00 00 
0877   0FEB 00 00 00 00 
0877   0FEF 00 00 00 00 
0877   0FF3 00 00 00 00 
0877   0FF7 00 00 00 00 
0877   0FFB 00 00 00 00 
0877   0FFF 00 00 00 00 
0877   1003 00 00 00 00 
0877   1007 00 00 00 00 
0877   100B 00 00 00 00 
0877   100F 00 00 00 00 
0877   1013 00 00 00 00 
0877   1017 00 00 00 00 
0877   101B 00 00 00 00 
0877   101F 00 00 00 00 
0877   1023 00 00 00 00 
0877   1027 00 00 00 00 
0877   102B 00 00 00 00 
0877   102F 00 00 00 00 
0877   1033 00 00 00 00 
0877   1037 00 00 00 00 
0877   103B 00 00 00 00 
0877   103F 00 00 00 00 
0877   1043 00 00 00 00 
0877   1047 00 00 00 00 
0877   104B 00 00 00 00 
0877   104F 00 00 00 00 
0877   1053 00 00 00 00 
0877   1057 00 00 00 00 
0877   105B 00 00 00 00 
0878   105F 55 09       curr_state: .dw curr_state_data
0879   1061 00 00 00 00 next_state_data: .fill 1800, 0
0879   1065 00 00 00 00 
0879   1069 00 00 00 00 
0879   106D 00 00 00 00 
0879   1071 00 00 00 00 
0879   1075 00 00 00 00 
0879   1079 00 00 00 00 
0879   107D 00 00 00 00 
0879   1081 00 00 00 00 
0879   1085 00 00 00 00 
0879   1089 00 00 00 00 
0879   108D 00 00 00 00 
0879   1091 00 00 00 00 
0879   1095 00 00 00 00 
0879   1099 00 00 00 00 
0879   109D 00 00 00 00 
0879   10A1 00 00 00 00 
0879   10A5 00 00 00 00 
0879   10A9 00 00 00 00 
0879   10AD 00 00 00 00 
0879   10B1 00 00 00 00 
0879   10B5 00 00 00 00 
0879   10B9 00 00 00 00 
0879   10BD 00 00 00 00 
0879   10C1 00 00 00 00 
0879   10C5 00 00 00 00 
0879   10C9 00 00 00 00 
0879   10CD 00 00 00 00 
0879   10D1 00 00 00 00 
0879   10D5 00 00 00 00 
0879   10D9 00 00 00 00 
0879   10DD 00 00 00 00 
0879   10E1 00 00 00 00 
0879   10E5 00 00 00 00 
0879   10E9 00 00 00 00 
0879   10ED 00 00 00 00 
0879   10F1 00 00 00 00 
0879   10F5 00 00 00 00 
0879   10F9 00 00 00 00 
0879   10FD 00 00 00 00 
0879   1101 00 00 00 00 
0879   1105 00 00 00 00 
0879   1109 00 00 00 00 
0879   110D 00 00 00 00 
0879   1111 00 00 00 00 
0879   1115 00 00 00 00 
0879   1119 00 00 00 00 
0879   111D 00 00 00 00 
0879   1121 00 00 00 00 
0879   1125 00 00 00 00 
0879   1129 00 00 00 00 
0879   112D 00 00 00 00 
0879   1131 00 00 00 00 
0879   1135 00 00 00 00 
0879   1139 00 00 00 00 
0879   113D 00 00 00 00 
0879   1141 00 00 00 00 
0879   1145 00 00 00 00 
0879   1149 00 00 00 00 
0879   114D 00 00 00 00 
0879   1151 00 00 00 00 
0879   1155 00 00 00 00 
0879   1159 00 00 00 00 
0879   115D 00 00 00 00 
0879   1161 00 00 00 00 
0879   1165 00 00 00 00 
0879   1169 00 00 00 00 
0879   116D 00 00 00 00 
0879   1171 00 00 00 00 
0879   1175 00 00 00 00 
0879   1179 00 00 00 00 
0879   117D 00 00 00 00 
0879   1181 00 00 00 00 
0879   1185 00 00 00 00 
0879   1189 00 00 00 00 
0879   118D 00 00 00 00 
0879   1191 00 00 00 00 
0879   1195 00 00 00 00 
0879   1199 00 00 00 00 
0879   119D 00 00 00 00 
0879   11A1 00 00 00 00 
0879   11A5 00 00 00 00 
0879   11A9 00 00 00 00 
0879   11AD 00 00 00 00 
0879   11B1 00 00 00 00 
0879   11B5 00 00 00 00 
0879   11B9 00 00 00 00 
0879   11BD 00 00 00 00 
0879   11C1 00 00 00 00 
0879   11C5 00 00 00 00 
0879   11C9 00 00 00 00 
0879   11CD 00 00 00 00 
0879   11D1 00 00 00 00 
0879   11D5 00 00 00 00 
0879   11D9 00 00 00 00 
0879   11DD 00 00 00 00 
0879   11E1 00 00 00 00 
0879   11E5 00 00 00 00 
0879   11E9 00 00 00 00 
0879   11ED 00 00 00 00 
0879   11F1 00 00 00 00 
0879   11F5 00 00 00 00 
0879   11F9 00 00 00 00 
0879   11FD 00 00 00 00 
0879   1201 00 00 00 00 
0879   1205 00 00 00 00 
0879   1209 00 00 00 00 
0879   120D 00 00 00 00 
0879   1211 00 00 00 00 
0879   1215 00 00 00 00 
0879   1219 00 00 00 00 
0879   121D 00 00 00 00 
0879   1221 00 00 00 00 
0879   1225 00 00 00 00 
0879   1229 00 00 00 00 
0879   122D 00 00 00 00 
0879   1231 00 00 00 00 
0879   1235 00 00 00 00 
0879   1239 00 00 00 00 
0879   123D 00 00 00 00 
0879   1241 00 00 00 00 
0879   1245 00 00 00 00 
0879   1249 00 00 00 00 
0879   124D 00 00 00 00 
0879   1251 00 00 00 00 
0879   1255 00 00 00 00 
0879   1259 00 00 00 00 
0879   125D 00 00 00 00 
0879   1261 00 00 00 00 
0879   1265 00 00 00 00 
0879   1269 00 00 00 00 
0879   126D 00 00 00 00 
0879   1271 00 00 00 00 
0879   1275 00 00 00 00 
0879   1279 00 00 00 00 
0879   127D 00 00 00 00 
0879   1281 00 00 00 00 
0879   1285 00 00 00 00 
0879   1289 00 00 00 00 
0879   128D 00 00 00 00 
0879   1291 00 00 00 00 
0879   1295 00 00 00 00 
0879   1299 00 00 00 00 
0879   129D 00 00 00 00 
0879   12A1 00 00 00 00 
0879   12A5 00 00 00 00 
0879   12A9 00 00 00 00 
0879   12AD 00 00 00 00 
0879   12B1 00 00 00 00 
0879   12B5 00 00 00 00 
0879   12B9 00 00 00 00 
0879   12BD 00 00 00 00 
0879   12C1 00 00 00 00 
0879   12C5 00 00 00 00 
0879   12C9 00 00 00 00 
0879   12CD 00 00 00 00 
0879   12D1 00 00 00 00 
0879   12D5 00 00 00 00 
0879   12D9 00 00 00 00 
0879   12DD 00 00 00 00 
0879   12E1 00 00 00 00 
0879   12E5 00 00 00 00 
0879   12E9 00 00 00 00 
0879   12ED 00 00 00 00 
0879   12F1 00 00 00 00 
0879   12F5 00 00 00 00 
0879   12F9 00 00 00 00 
0879   12FD 00 00 00 00 
0879   1301 00 00 00 00 
0879   1305 00 00 00 00 
0879   1309 00 00 00 00 
0879   130D 00 00 00 00 
0879   1311 00 00 00 00 
0879   1315 00 00 00 00 
0879   1319 00 00 00 00 
0879   131D 00 00 00 00 
0879   1321 00 00 00 00 
0879   1325 00 00 00 00 
0879   1329 00 00 00 00 
0879   132D 00 00 00 00 
0879   1331 00 00 00 00 
0879   1335 00 00 00 00 
0879   1339 00 00 00 00 
0879   133D 00 00 00 00 
0879   1341 00 00 00 00 
0879   1345 00 00 00 00 
0879   1349 00 00 00 00 
0879   134D 00 00 00 00 
0879   1351 00 00 00 00 
0879   1355 00 00 00 00 
0879   1359 00 00 00 00 
0879   135D 00 00 00 00 
0879   1361 00 00 00 00 
0879   1365 00 00 00 00 
0879   1369 00 00 00 00 
0879   136D 00 00 00 00 
0879   1371 00 00 00 00 
0879   1375 00 00 00 00 
0879   1379 00 00 00 00 
0879   137D 00 00 00 00 
0879   1381 00 00 00 00 
0879   1385 00 00 00 00 
0879   1389 00 00 00 00 
0879   138D 00 00 00 00 
0879   1391 00 00 00 00 
0879   1395 00 00 00 00 
0879   1399 00 00 00 00 
0879   139D 00 00 00 00 
0879   13A1 00 00 00 00 
0879   13A5 00 00 00 00 
0879   13A9 00 00 00 00 
0879   13AD 00 00 00 00 
0879   13B1 00 00 00 00 
0879   13B5 00 00 00 00 
0879   13B9 00 00 00 00 
0879   13BD 00 00 00 00 
0879   13C1 00 00 00 00 
0879   13C5 00 00 00 00 
0879   13C9 00 00 00 00 
0879   13CD 00 00 00 00 
0879   13D1 00 00 00 00 
0879   13D5 00 00 00 00 
0879   13D9 00 00 00 00 
0879   13DD 00 00 00 00 
0879   13E1 00 00 00 00 
0879   13E5 00 00 00 00 
0879   13E9 00 00 00 00 
0879   13ED 00 00 00 00 
0879   13F1 00 00 00 00 
0879   13F5 00 00 00 00 
0879   13F9 00 00 00 00 
0879   13FD 00 00 00 00 
0879   1401 00 00 00 00 
0879   1405 00 00 00 00 
0879   1409 00 00 00 00 
0879   140D 00 00 00 00 
0879   1411 00 00 00 00 
0879   1415 00 00 00 00 
0879   1419 00 00 00 00 
0879   141D 00 00 00 00 
0879   1421 00 00 00 00 
0879   1425 00 00 00 00 
0879   1429 00 00 00 00 
0879   142D 00 00 00 00 
0879   1431 00 00 00 00 
0879   1435 00 00 00 00 
0879   1439 00 00 00 00 
0879   143D 00 00 00 00 
0879   1441 00 00 00 00 
0879   1445 00 00 00 00 
0879   1449 00 00 00 00 
0879   144D 00 00 00 00 
0879   1451 00 00 00 00 
0879   1455 00 00 00 00 
0879   1459 00 00 00 00 
0879   145D 00 00 00 00 
0879   1461 00 00 00 00 
0879   1465 00 00 00 00 
0879   1469 00 00 00 00 
0879   146D 00 00 00 00 
0879   1471 00 00 00 00 
0879   1475 00 00 00 00 
0879   1479 00 00 00 00 
0879   147D 00 00 00 00 
0879   1481 00 00 00 00 
0879   1485 00 00 00 00 
0879   1489 00 00 00 00 
0879   148D 00 00 00 00 
0879   1491 00 00 00 00 
0879   1495 00 00 00 00 
0879   1499 00 00 00 00 
0879   149D 00 00 00 00 
0879   14A1 00 00 00 00 
0879   14A5 00 00 00 00 
0879   14A9 00 00 00 00 
0879   14AD 00 00 00 00 
0879   14B1 00 00 00 00 
0879   14B5 00 00 00 00 
0879   14B9 00 00 00 00 
0879   14BD 00 00 00 00 
0879   14C1 00 00 00 00 
0879   14C5 00 00 00 00 
0879   14C9 00 00 00 00 
0879   14CD 00 00 00 00 
0879   14D1 00 00 00 00 
0879   14D5 00 00 00 00 
0879   14D9 00 00 00 00 
0879   14DD 00 00 00 00 
0879   14E1 00 00 00 00 
0879   14E5 00 00 00 00 
0879   14E9 00 00 00 00 
0879   14ED 00 00 00 00 
0879   14F1 00 00 00 00 
0879   14F5 00 00 00 00 
0879   14F9 00 00 00 00 
0879   14FD 00 00 00 00 
0879   1501 00 00 00 00 
0879   1505 00 00 00 00 
0879   1509 00 00 00 00 
0879   150D 00 00 00 00 
0879   1511 00 00 00 00 
0879   1515 00 00 00 00 
0879   1519 00 00 00 00 
0879   151D 00 00 00 00 
0879   1521 00 00 00 00 
0879   1525 00 00 00 00 
0879   1529 00 00 00 00 
0879   152D 00 00 00 00 
0879   1531 00 00 00 00 
0879   1535 00 00 00 00 
0879   1539 00 00 00 00 
0879   153D 00 00 00 00 
0879   1541 00 00 00 00 
0879   1545 00 00 00 00 
0879   1549 00 00 00 00 
0879   154D 00 00 00 00 
0879   1551 00 00 00 00 
0879   1555 00 00 00 00 
0879   1559 00 00 00 00 
0879   155D 00 00 00 00 
0879   1561 00 00 00 00 
0879   1565 00 00 00 00 
0879   1569 00 00 00 00 
0879   156D 00 00 00 00 
0879   1571 00 00 00 00 
0879   1575 00 00 00 00 
0879   1579 00 00 00 00 
0879   157D 00 00 00 00 
0879   1581 00 00 00 00 
0879   1585 00 00 00 00 
0879   1589 00 00 00 00 
0879   158D 00 00 00 00 
0879   1591 00 00 00 00 
0879   1595 00 00 00 00 
0879   1599 00 00 00 00 
0879   159D 00 00 00 00 
0879   15A1 00 00 00 00 
0879   15A5 00 00 00 00 
0879   15A9 00 00 00 00 
0879   15AD 00 00 00 00 
0879   15B1 00 00 00 00 
0879   15B5 00 00 00 00 
0879   15B9 00 00 00 00 
0879   15BD 00 00 00 00 
0879   15C1 00 00 00 00 
0879   15C5 00 00 00 00 
0879   15C9 00 00 00 00 
0879   15CD 00 00 00 00 
0879   15D1 00 00 00 00 
0879   15D5 00 00 00 00 
0879   15D9 00 00 00 00 
0879   15DD 00 00 00 00 
0879   15E1 00 00 00 00 
0879   15E5 00 00 00 00 
0879   15E9 00 00 00 00 
0879   15ED 00 00 00 00 
0879   15F1 00 00 00 00 
0879   15F5 00 00 00 00 
0879   15F9 00 00 00 00 
0879   15FD 00 00 00 00 
0879   1601 00 00 00 00 
0879   1605 00 00 00 00 
0879   1609 00 00 00 00 
0879   160D 00 00 00 00 
0879   1611 00 00 00 00 
0879   1615 00 00 00 00 
0879   1619 00 00 00 00 
0879   161D 00 00 00 00 
0879   1621 00 00 00 00 
0879   1625 00 00 00 00 
0879   1629 00 00 00 00 
0879   162D 00 00 00 00 
0879   1631 00 00 00 00 
0879   1635 00 00 00 00 
0879   1639 00 00 00 00 
0879   163D 00 00 00 00 
0879   1641 00 00 00 00 
0879   1645 00 00 00 00 
0879   1649 00 00 00 00 
0879   164D 00 00 00 00 
0879   1651 00 00 00 00 
0879   1655 00 00 00 00 
0879   1659 00 00 00 00 
0879   165D 00 00 00 00 
0879   1661 00 00 00 00 
0879   1665 00 00 00 00 
0879   1669 00 00 00 00 
0879   166D 00 00 00 00 
0879   1671 00 00 00 00 
0879   1675 00 00 00 00 
0879   1679 00 00 00 00 
0879   167D 00 00 00 00 
0879   1681 00 00 00 00 
0879   1685 00 00 00 00 
0879   1689 00 00 00 00 
0879   168D 00 00 00 00 
0879   1691 00 00 00 00 
0879   1695 00 00 00 00 
0879   1699 00 00 00 00 
0879   169D 00 00 00 00 
0879   16A1 00 00 00 00 
0879   16A5 00 00 00 00 
0879   16A9 00 00 00 00 
0879   16AD 00 00 00 00 
0879   16B1 00 00 00 00 
0879   16B5 00 00 00 00 
0879   16B9 00 00 00 00 
0879   16BD 00 00 00 00 
0879   16C1 00 00 00 00 
0879   16C5 00 00 00 00 
0879   16C9 00 00 00 00 
0879   16CD 00 00 00 00 
0879   16D1 00 00 00 00 
0879   16D5 00 00 00 00 
0879   16D9 00 00 00 00 
0879   16DD 00 00 00 00 
0879   16E1 00 00 00 00 
0879   16E5 00 00 00 00 
0879   16E9 00 00 00 00 
0879   16ED 00 00 00 00 
0879   16F1 00 00 00 00 
0879   16F5 00 00 00 00 
0879   16F9 00 00 00 00 
0879   16FD 00 00 00 00 
0879   1701 00 00 00 00 
0879   1705 00 00 00 00 
0879   1709 00 00 00 00 
0879   170D 00 00 00 00 
0879   1711 00 00 00 00 
0879   1715 00 00 00 00 
0879   1719 00 00 00 00 
0879   171D 00 00 00 00 
0879   1721 00 00 00 00 
0879   1725 00 00 00 00 
0879   1729 00 00 00 00 
0879   172D 00 00 00 00 
0879   1731 00 00 00 00 
0879   1735 00 00 00 00 
0879   1739 00 00 00 00 
0879   173D 00 00 00 00 
0879   1741 00 00 00 00 
0879   1745 00 00 00 00 
0879   1749 00 00 00 00 
0879   174D 00 00 00 00 
0879   1751 00 00 00 00 
0879   1755 00 00 00 00 
0879   1759 00 00 00 00 
0879   175D 00 00 00 00 
0879   1761 00 00 00 00 
0879   1765 00 00 00 00 
0880   1769 61 10       next_state: .dw next_state_data
0881   176B 47 65 6E 65 _string_0: .db "Generations: ", 0
0881   176F 72 61 74 69 
0881   1773 6F 6E 73 3A 
0881   1777 20 00 
0882   1779 40 20 00    _string_1: .db "@ ", 0
0883   177C 2E 20 00    _string_2: .db ". ", 0
0884   177F 0A 00       _string_3: .db "\n", 0
0885   1781             ; --- END DATA BLOCK
0886   1781             
0887   1781             ; --- BEGIN INCLUDE BLOCK
0888   1781             .include "lib/stdio.asm"
0001+  1781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1781             ; stdio.s
0003+  1781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1781             .include "lib/string.asm"
0001++ 1781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1781             ; string.s
0003++ 1781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1781             
0005++ 1781             
0006++ 1781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1781             ; strrev
0008++ 1781             ; reverse a string
0009++ 1781             ; D = string address
0010++ 1781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1781             ; 01234
0012++ 1781             strrev:
0013++ 1781 4B          	pusha
0014++ 1782 07 C8 17    	call strlen	; length in C
0015++ 1785 12          	mov a, c
0016++ 1786 AF 01 00    	cmp a, 1
0017++ 1789 D0 A3 17    	jleu strrev_end	; check string length. string len must be > 1
0018++ 178C 7D          	dec a
0019++ 178D FD 4E       	mov si, d	; beginning of string
0020++ 178F FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1791 59          	add d, a	; end of string
0022++ 1792 12          	mov a, c
0023++ 1793 FD 9B       	shr a		; divide by 2
0024++ 1795 39          	mov c, a	; C now counts the steps
0025++ 1796             strrev_L0:
0026++ 1796 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1797 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1798 3E          	mov [d], al	; store left char into right side
0029++ 1799 1B          	mov al, bl
0030++ 179A F7          	stosb		; store right-side char into left-side; increase DI
0031++ 179B 7E          	dec c
0032++ 179C 7F          	dec d
0033++ 179D C2 00 00    	cmp c, 0
0034++ 17A0 C7 96 17    	jne strrev_L0
0035++ 17A3             strrev_end:
0036++ 17A3 4C          	popa
0037++ 17A4 09          	ret
0038++ 17A5             	
0039++ 17A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 17A5             ; strchr
0041++ 17A5             ; search string in D for char in AL
0042++ 17A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 17A5             strchr:
0044++ 17A5             strchr_L0:
0045++ 17A5 32          	mov bl, [d]
0046++ 17A6 C1 00       	cmp bl, 0
0047++ 17A8 C6 B3 17    	je strchr_end
0048++ 17AB BA          	cmp al, bl
0049++ 17AC C6 B3 17    	je strchr_end
0050++ 17AF 79          	inc d
0051++ 17B0 0A A5 17    	jmp strchr_L0
0052++ 17B3             strchr_end:
0053++ 17B3 1B          	mov al, bl
0054++ 17B4 09          	ret
0055++ 17B5             
0056++ 17B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 17B5             ; strstr
0058++ 17B5             ; find sub-string
0059++ 17B5             ; str1 in SI
0060++ 17B5             ; str2 in DI
0061++ 17B5             ; SI points to end of source string
0062++ 17B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 17B5             strstr:
0064++ 17B5 DB          	push al
0065++ 17B6 DA          	push d
0066++ 17B7 E3          	push di
0067++ 17B8             strstr_loop:
0068++ 17B8 F3          	cmpsb					; compare a byte of the strings
0069++ 17B9 C7 C4 17    	jne strstr_ret
0070++ 17BC FC 00 00    	lea d, [di + 0]
0071++ 17BF BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 17C1 C7 B8 17    	jne strstr_loop				; equal chars but not at end
0073++ 17C4             strstr_ret:
0074++ 17C4 F0          	pop di
0075++ 17C5 E7          	pop d
0076++ 17C6 E8          	pop al
0077++ 17C7 09          	ret
0078++ 17C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 17C8             ; length of null terminated string
0080++ 17C8             ; result in C
0081++ 17C8             ; pointer in D
0082++ 17C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 17C8             strlen:
0084++ 17C8 DA          	push d
0085++ 17C9 38 00 00    	mov c, 0
0086++ 17CC             strlen_L1:
0087++ 17CC BD 00       	cmp byte [d], 0
0088++ 17CE C6 D6 17    	je strlen_ret
0089++ 17D1 79          	inc d
0090++ 17D2 78          	inc c
0091++ 17D3 0A CC 17    	jmp strlen_L1
0092++ 17D6             strlen_ret:
0093++ 17D6 E7          	pop d
0094++ 17D7 09          	ret
0095++ 17D8             
0096++ 17D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 17D8             ; STRCMP
0098++ 17D8             ; compare two strings
0099++ 17D8             ; str1 in SI
0100++ 17D8             ; str2 in DI
0101++ 17D8             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 17D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 17D8             strcmp:
0104++ 17D8 DB          	push al
0105++ 17D9 DA          	push d
0106++ 17DA E3          	push di
0107++ 17DB E2          	push si
0108++ 17DC             strcmp_loop:
0109++ 17DC F3          	cmpsb					; compare a byte of the strings
0110++ 17DD C7 E8 17    	jne strcmp_ret
0111++ 17E0 FB FF FF    	lea d, [si +- 1]
0112++ 17E3 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 17E5 C7 DC 17    	jne strcmp_loop				; equal chars but not at end
0114++ 17E8             strcmp_ret:
0115++ 17E8 EF          	pop si
0116++ 17E9 F0          	pop di
0117++ 17EA E7          	pop d
0118++ 17EB E8          	pop al
0119++ 17EC 09          	ret
0120++ 17ED             
0121++ 17ED             
0122++ 17ED             ; STRCPY
0123++ 17ED             ; copy null terminated string from SI to DI
0124++ 17ED             ; source in SI
0125++ 17ED             ; destination in DI
0126++ 17ED             strcpy:
0127++ 17ED E2          	push si
0128++ 17EE E3          	push di
0129++ 17EF DB          	push al
0130++ 17F0             strcpy_L1:
0131++ 17F0 F6          	lodsb
0132++ 17F1 F7          	stosb
0133++ 17F2 B9 00       	cmp al, 0
0134++ 17F4 C7 F0 17    	jne strcpy_L1
0135++ 17F7             strcpy_end:
0136++ 17F7 E8          	pop al
0137++ 17F8 F0          	pop di
0138++ 17F9 EF          	pop si
0139++ 17FA 09          	ret
0140++ 17FB             
0141++ 17FB             ; STRCAT
0142++ 17FB             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 17FB             ; source in SI
0144++ 17FB             ; destination in DI
0145++ 17FB             strcat:
0146++ 17FB E2          	push si
0147++ 17FC E3          	push di
0148++ 17FD D7          	push a
0149++ 17FE DA          	push d
0150++ 17FF 50          	mov a, di
0151++ 1800 3C          	mov d, a
0152++ 1801             strcat_goto_end_L1:
0153++ 1801 BD 00       	cmp byte[d], 0
0154++ 1803 C6 0A 18    	je strcat_start
0155++ 1806 79          	inc d
0156++ 1807 0A 01 18    	jmp strcat_goto_end_L1
0157++ 180A             strcat_start:
0158++ 180A FD 50       	mov di, d
0159++ 180C             strcat_L1:
0160++ 180C F6          	lodsb
0161++ 180D F7          	stosb
0162++ 180E B9 00       	cmp al, 0
0163++ 1810 C7 0C 18    	jne strcat_L1
0164++ 1813             strcat_end:
0165++ 1813 E7          	pop d
0166++ 1814 E4          	pop a
0167++ 1815 F0          	pop di
0168++ 1816 EF          	pop si
0169++ 1817 09          	ret
0005+  1818             
0006+  1818 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  181C 34 35 36 37 
0006+  1820 38 39 41 42 
0006+  1824 43 44 45 46 
0007+  1828 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  182C 1B 5B 48 00 
0008+  1830             
0009+  1830 01 00       table_power:.dw 1
0010+  1832 0A 00       			.dw 10
0011+  1834 64 00       			.dw 100
0012+  1836 E8 03       			.dw 1000
0013+  1838 10 27       			.dw 10000
0014+  183A             
0015+  183A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  183A             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  183A             ; ASCII in BL
0018+  183A             ; result in AL
0019+  183A             ; ascii for F = 0100 0110
0020+  183A             ; ascii for 9 = 0011 1001
0021+  183A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  183A             hex_ascii_encode:
0023+  183A 1B          	mov al, bl
0024+  183B 93 40       	test al, $40				; test if letter or number
0025+  183D C7 43 18    	jnz hex_letter
0026+  1840 87 0F       	and al, $0F				; get number
0027+  1842 09          	ret
0028+  1843             hex_letter:
0029+  1843 87 0F       	and al, $0F				; get letter
0030+  1845 6A 09       	add al, 9
0031+  1847 09          	ret
0032+  1848             
0033+  1848             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  1848             ; ATOI
0035+  1848             ; 2 letter hex string in B
0036+  1848             ; 8bit integer returned in AL
0037+  1848             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  1848             atoi:
0039+  1848 D8          	push b
0040+  1849 07 3A 18    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  184C 30          	mov bl, bh
0042+  184D DB          	push al					; save a
0043+  184E 07 3A 18    	call hex_ascii_encode
0044+  1851 EA          	pop bl	
0045+  1852 FD 9E 04    	shl al, 4
0046+  1855 8C          	or al, bl
0047+  1856 E5          	pop b
0048+  1857 09          	ret	
0049+  1858             
0050+  1858             
0051+  1858             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  1858             ; printf
0053+  1858             ; no need for explanations!
0054+  1858             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1858             printf:
0056+  1858 09          	ret
0057+  1859             
0058+  1859             
0059+  1859             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  1859             ; scanf
0061+  1859             ; no need for explanations!
0062+  1859             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  1859             scanf:
0064+  1859 09          	ret
0065+  185A             
0066+  185A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  185A             ; ITOA
0068+  185A             ; 8bit value in BL
0069+  185A             ; 2 byte ASCII result in A
0070+  185A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  185A             itoa:
0072+  185A DA          	push d
0073+  185B D8          	push b
0074+  185C A7 00       	mov bh, 0
0075+  185E FD A4 04    	shr bl, 4	
0076+  1861 74          	mov d, b
0077+  1862 1F 18 18    	mov al, [d + s_hex_digits]
0078+  1865 23          	mov ah, al
0079+  1866             	
0080+  1866 E5          	pop b
0081+  1867 D8          	push b
0082+  1868 A7 00       	mov bh, 0
0083+  186A FD 87 0F    	and bl, $0F
0084+  186D 74          	mov d, b
0085+  186E 1F 18 18    	mov al, [d + s_hex_digits]
0086+  1871 E5          	pop b
0087+  1872 E7          	pop d
0088+  1873 09          	ret
0089+  1874             
0090+  1874             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  1874             ; HEX STRING TO BINARY
0092+  1874             ; di = destination address
0093+  1874             ; si = source
0094+  1874             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  1874             hex_to_int:
0096+  1874             hex_to_int_L1:
0097+  1874 F6          	lodsb					; load from [SI] to AL
0098+  1875 B9 00       	cmp al, 0				; check if ASCII 0
0099+  1877 C6 84 18    	jz hex_to_int_ret
0100+  187A 36          	mov bh, al
0101+  187B F6          	lodsb
0102+  187C 2F          	mov bl, al
0103+  187D 07 48 18    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  1880 F7          	stosb					; store AL to [DI]
0105+  1881 0A 74 18    	jmp hex_to_int_L1
0106+  1884             hex_to_int_ret:
0107+  1884 09          	ret		
0108+  1885             
0109+  1885             
0110+  1885             
0111+  1885             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  1885             ; GETCHAR
0113+  1885             ; char in ah
0114+  1885             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  1885             getchar:
0116+  1885 DB          	push al
0117+  1886             getchar_retry:
0118+  1886 FD 0C       	sti
0119+  1888 19 01       	mov al, 1
0120+  188A 05 03       	syscall sys_io			; receive in AH
0121+  188C B9 00       	cmp al, 0			; check if any char was receive
0122+  188E C6 86 18    	je getchar_retry
0123+  1891 E8          	pop al
0124+  1892 09          	ret
0125+  1893             
0126+  1893             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  1893             ; PUTCHAR
0128+  1893             ; char in ah
0129+  1893             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1893             putchar:
0131+  1893 D7          	push a
0132+  1894 19 00       	mov al, 0
0133+  1896 05 03       	syscall sys_io			; char in AH
0134+  1898 E4          	pop a
0135+  1899 09          	ret
0136+  189A             
0137+  189A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  189A             ;; INPUT A STRING
0139+  189A             ;; terminates with null
0140+  189A             ;; pointer in D
0141+  189A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  189A             gets:
0143+  189A D7          	push a
0144+  189B DA          	push d
0145+  189C             gets_loop:
0146+  189C FD 0C       	sti
0147+  189E 19 01       	mov al, 1
0148+  18A0 05 03       	syscall sys_io			; receive in AH
0149+  18A2 B9 00       	cmp al, 0				; check error code (AL)
0150+  18A4 C6 9C 18    	je gets_loop			; if no char received, retry
0151+  18A7             
0152+  18A7 76 1B       	cmp ah, 27
0153+  18A9 C6 CA 18    	je gets_telnet_escape
0154+  18AC 76 0A       	cmp ah, $0A				; LF
0155+  18AE C6 23 19    	je gets_end
0156+  18B1 76 0D       	cmp ah, $0D				; CR
0157+  18B3 C6 23 19    	je gets_end
0158+  18B6 76 5C       	cmp ah, $5C				; '\\'
0159+  18B8 C6 FA 18    	je gets_escape
0160+  18BB             	
0161+  18BB 76 08       	cmp ah, $08			; check for backspace
0162+  18BD C6 C6 18    	je gets_backspace
0163+  18C0             
0164+  18C0 1A          	mov al, ah
0165+  18C1 3E          	mov [d], al
0166+  18C2 79          	inc d
0167+  18C3 0A 9C 18    	jmp gets_loop
0168+  18C6             gets_backspace:
0169+  18C6 7F          	dec d
0170+  18C7 0A 9C 18    	jmp gets_loop
0171+  18CA             gets_telnet_escape:
0172+  18CA FD 0C       	sti
0173+  18CC 19 01       	mov al, 1
0174+  18CE 05 03       	syscall sys_io				; receive in AH without echo
0175+  18D0 B9 00       	cmp al, 0					; check error code (AL)
0176+  18D2 C6 CA 18    	je gets_telnet_escape		; if no char received, retry
0177+  18D5 76 5B       	cmp ah, '['
0178+  18D7 C7 9C 18    	jne gets_loop
0179+  18DA             gets_telnet_escape_phase2:
0180+  18DA FD 0C       	sti
0181+  18DC 19 01       	mov al, 1
0182+  18DE 05 03       	syscall sys_io					; receive in AH without echo
0183+  18E0 B9 00       	cmp al, 0						; check error code (AL)
0184+  18E2 C6 DA 18    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  18E5 76 44       	cmp ah, 'D'
0186+  18E7 C6 F2 18    	je gets_left_arrow
0187+  18EA 76 43       	cmp ah, 'C'
0188+  18EC C6 F6 18    	je gets_right_arrow
0189+  18EF 0A 9C 18    	jmp gets_loop
0190+  18F2             gets_left_arrow:
0191+  18F2 7F          	dec d
0192+  18F3 0A 9C 18    	jmp gets_loop
0193+  18F6             gets_right_arrow:
0194+  18F6 79          	inc d
0195+  18F7 0A 9C 18    	jmp gets_loop
0196+  18FA             gets_escape:
0197+  18FA FD 0C       	sti
0198+  18FC 19 01       	mov al, 1
0199+  18FE 05 03       	syscall sys_io			; receive in AH
0200+  1900 B9 00       	cmp al, 0				; check error code (AL)
0201+  1902 C6 FA 18    	je gets_escape			; if no char received, retry
0202+  1905 76 6E       	cmp ah, 'n'
0203+  1907 C6 15 19    	je gets_LF
0204+  190A 76 72       	cmp ah, 'r'
0205+  190C C6 1C 19    	je gets_CR
0206+  190F 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  1910 3E          	mov [d], al
0208+  1911 79          	inc d
0209+  1912 0A 9C 18    	jmp gets_loop
0210+  1915             gets_LF:
0211+  1915 19 0A       	mov al, $0A
0212+  1917 3E          	mov [d], al
0213+  1918 79          	inc d
0214+  1919 0A 9C 18    	jmp gets_loop
0215+  191C             gets_CR:
0216+  191C 19 0D       	mov al, $0D
0217+  191E 3E          	mov [d], al
0218+  191F 79          	inc d
0219+  1920 0A 9C 18    	jmp gets_loop
0220+  1923             gets_end:
0221+  1923 19 00       	mov al, 0
0222+  1925 3E          	mov [d], al				; terminate string
0223+  1926 E7          	pop d
0224+  1927 E4          	pop a
0225+  1928 09          	ret
0226+  1929             
0227+  1929             
0228+  1929             
0229+  1929             
0230+  1929             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  1929             ;; INPUT TEXT
0232+  1929             ;; terminated with CTRL+D
0233+  1929             ;; pointer in D
0234+  1929             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  1929             gettxt:
0236+  1929 D7          	push a
0237+  192A DA          	push d
0238+  192B             gettxt_loop:
0239+  192B 19 01       	mov al, 1
0240+  192D 05 03       	syscall sys_io			; receive in AH
0241+  192F B9 00       	cmp al, 0				; check error code (AL)
0242+  1931 C6 2B 19    	je gettxt_loop		; if no char received, retry
0243+  1934 76 04       	cmp ah, 4			; EOT
0244+  1936 C6 74 19    	je gettxt_end
0245+  1939 76 08       	cmp ah, $08			; check for backspace
0246+  193B C6 70 19    	je gettxt_backspace
0247+  193E 76 5C       	cmp ah, $5C				; '\\'
0248+  1940 C6 49 19    	je gettxt_escape
0249+  1943 1A          	mov al, ah
0250+  1944 3E          	mov [d], al
0251+  1945 79          	inc d
0252+  1946 0A 2B 19    	jmp gettxt_loop
0253+  1949             gettxt_escape:
0254+  1949 19 01       	mov al, 1
0255+  194B 05 03       	syscall sys_io			; receive in AH
0256+  194D B9 00       	cmp al, 0				; check error code (AL)
0257+  194F C6 49 19    	je gettxt_escape		; if no char received, retry
0258+  1952 76 6E       	cmp ah, 'n'
0259+  1954 C6 62 19    	je gettxt_LF
0260+  1957 76 72       	cmp ah, 'r'
0261+  1959 C6 69 19    	je gettxt_CR
0262+  195C 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  195D 3E          	mov [d], al
0264+  195E 79          	inc d
0265+  195F 0A 2B 19    	jmp gettxt_loop
0266+  1962             gettxt_LF:
0267+  1962 19 0A       	mov al, $0A
0268+  1964 3E          	mov [d], al
0269+  1965 79          	inc d
0270+  1966 0A 2B 19    	jmp gettxt_loop
0271+  1969             gettxt_CR:
0272+  1969 19 0D       	mov al, $0D
0273+  196B 3E          	mov [d], al
0274+  196C 79          	inc d
0275+  196D 0A 2B 19    	jmp gettxt_loop
0276+  1970             gettxt_backspace:
0277+  1970 7F          	dec d
0278+  1971 0A 2B 19    	jmp gettxt_loop
0279+  1974             gettxt_end:
0280+  1974 19 00       	mov al, 0
0281+  1976 3E          	mov [d], al				; terminate string
0282+  1977 E7          	pop d
0283+  1978 E4          	pop a
0284+  1979 09          	ret
0285+  197A             
0286+  197A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  197A             ; PRINT NEW LINE
0288+  197A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  197A             printnl:
0290+  197A D7          	push a
0291+  197B 10 00 0A    	mov a, $0A00
0292+  197E 05 03       	syscall sys_io
0293+  1980 10 00 0D    	mov a, $0D00
0294+  1983 05 03       	syscall sys_io
0295+  1985 E4          	pop a
0296+  1986 09          	ret
0297+  1987             
0298+  1987             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  1987             ; strtoint
0300+  1987             ; 4 digit hex string number in d
0301+  1987             ; integer returned in A
0302+  1987             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  1987             strtointx:
0304+  1987 D8          	push b
0305+  1988 32          	mov bl, [d]
0306+  1989 37          	mov bh, bl
0307+  198A 33 01 00    	mov bl, [d + 1]
0308+  198D 07 48 18    	call atoi				; convert to int in AL
0309+  1990 23          	mov ah, al				; move to AH
0310+  1991 33 02 00    	mov bl, [d + 2]
0311+  1994 37          	mov bh, bl
0312+  1995 33 03 00    	mov bl, [d + 3]
0313+  1998 07 48 18    	call atoi				; convert to int in AL
0314+  199B E5          	pop b
0315+  199C 09          	ret
0316+  199D             
0317+  199D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  199D             ; strtoint
0319+  199D             ; 5 digit base10 string number in d
0320+  199D             ; integer returned in A
0321+  199D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  199D             strtoint:
0323+  199D E2          	push si
0324+  199E D8          	push b
0325+  199F D9          	push c
0326+  19A0 DA          	push d
0327+  19A1 07 C8 17    	call strlen			; get string length in C
0328+  19A4 7E          	dec c
0329+  19A5 FD 4E       	mov si, d
0330+  19A7 12          	mov a, c
0331+  19A8 FD 99       	shl a
0332+  19AA 3B 30 18    	mov d, table_power
0333+  19AD 59          	add d, a
0334+  19AE 38 00 00    	mov c, 0
0335+  19B1             strtoint_L0:
0336+  19B1 F6          	lodsb			; load ASCII to al
0337+  19B2 B9 00       	cmp al, 0
0338+  19B4 C6 C7 19    	je strtoint_end
0339+  19B7 6F 30       	sub al, $30		; make into integer
0340+  19B9 22 00       	mov ah, 0
0341+  19BB 2A          	mov b, [d]
0342+  19BC AC          	mul a, b			; result in B since it fits in 16bits
0343+  19BD 11          	mov a, b
0344+  19BE 28          	mov b, c
0345+  19BF 54          	add a, b
0346+  19C0 39          	mov c, a
0347+  19C1 63 02 00    	sub d, 2
0348+  19C4 0A B1 19    	jmp strtoint_L0
0349+  19C7             strtoint_end:
0350+  19C7 12          	mov a, c
0351+  19C8 E7          	pop d
0352+  19C9 E6          	pop c
0353+  19CA E5          	pop b
0354+  19CB EF          	pop si
0355+  19CC 09          	ret
0356+  19CD             
0357+  19CD             
0358+  19CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  19CD             ; PRINT NULL TERMINATED STRING
0360+  19CD             ; pointer in D
0361+  19CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  19CD             puts:
0363+  19CD D7          	push a
0364+  19CE DA          	push d
0365+  19CF             puts_L1:
0366+  19CF 1E          	mov al, [d]
0367+  19D0 B9 00       	cmp al, 0
0368+  19D2 C6 DE 19    	jz puts_END
0369+  19D5 23          	mov ah, al
0370+  19D6 19 00       	mov al, 0
0371+  19D8 05 03       	syscall sys_io
0372+  19DA 79          	inc d
0373+  19DB 0A CF 19    	jmp puts_L1
0374+  19DE             puts_END:
0375+  19DE E7          	pop d
0376+  19DF E4          	pop a
0377+  19E0 09          	ret
0378+  19E1             
0379+  19E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  19E1             ; PRINT N SIZE STRING
0381+  19E1             ; pointer in D
0382+  19E1             ; size in C
0383+  19E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  19E1             putsn:
0385+  19E1 DB          	push al
0386+  19E2 DA          	push d
0387+  19E3 D9          	push c
0388+  19E4             putsn_L0:
0389+  19E4 1E          	mov al, [d]
0390+  19E5 23          	mov ah, al
0391+  19E6 19 00       	mov al, 0
0392+  19E8 05 03       	syscall sys_io
0393+  19EA 79          	inc d
0394+  19EB 7E          	dec c	
0395+  19EC C2 00 00    	cmp c, 0
0396+  19EF C7 E4 19    	jne putsn_L0
0397+  19F2             putsn_end:
0398+  19F2 E6          	pop c
0399+  19F3 E7          	pop d
0400+  19F4 E8          	pop al
0401+  19F5 09          	ret
0402+  19F6             
0403+  19F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  19F6             ; print 16bit decimal number
0405+  19F6             ; input number in A
0406+  19F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  19F6             print_u16d:
0408+  19F6 D7          	push a
0409+  19F7 D8          	push b
0410+  19F8 26 10 27    	mov b, 10000
0411+  19FB AE          	div a, b			; get 10000 coeff.
0412+  19FC 07 22 1A    	call print_number
0413+  19FF 11          	mov a, b
0414+  1A00 26 E8 03    	mov b, 1000
0415+  1A03 AE          	div a, b			; get 10000 coeff.
0416+  1A04 07 22 1A    	call print_number
0417+  1A07 11          	mov a, b
0418+  1A08 26 64 00    	mov b, 100
0419+  1A0B AE          	div a, b
0420+  1A0C 07 22 1A    	call print_number
0421+  1A0F 11          	mov a, b
0422+  1A10 26 0A 00    	mov b, 10
0423+  1A13 AE          	div a, b
0424+  1A14 07 22 1A    	call print_number
0425+  1A17 11          	mov a, b
0426+  1A18 6A 30       	add al, $30
0427+  1A1A 23          	mov ah, al
0428+  1A1B 19 00       	mov al, 0
0429+  1A1D 05 03       	syscall sys_io	; print coeff
0430+  1A1F E5          	pop b
0431+  1A20 E4          	pop a
0432+  1A21 09          	ret
0433+  1A22             
0434+  1A22             
0435+  1A22             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  1A22             ; if A == 0, print space
0437+  1A22             ; else print A
0438+  1A22             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  1A22             print_number:
0440+  1A22 6A 30       	add al, $30
0441+  1A24 23          	mov ah, al
0442+  1A25 07 93 18    	call putchar
0443+  1A28 09          	ret
0444+  1A29             
0445+  1A29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  1A29             ; PRINT 16BIT HEX INTEGER
0447+  1A29             ; integer value in reg B
0448+  1A29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  1A29             print_u16x:
0450+  1A29 D7          	push a
0451+  1A2A D8          	push b
0452+  1A2B DD          	push bl
0453+  1A2C 30          	mov bl, bh
0454+  1A2D 07 5A 18    	call itoa				; convert bh to char in A
0455+  1A30 2F          	mov bl, al				; save al
0456+  1A31 19 00       	mov al, 0
0457+  1A33 05 03       	syscall sys_io				; display AH
0458+  1A35 24          	mov ah, bl				; retrieve al
0459+  1A36 19 00       	mov al, 0
0460+  1A38 05 03       	syscall sys_io				; display AL
0461+  1A3A             
0462+  1A3A EA          	pop bl
0463+  1A3B 07 5A 18    	call itoa				; convert bh to char in A
0464+  1A3E 2F          	mov bl, al				; save al
0465+  1A3F 19 00       	mov al, 0
0466+  1A41 05 03       	syscall sys_io				; display AH
0467+  1A43 24          	mov ah, bl				; retrieve al
0468+  1A44 19 00       	mov al, 0
0469+  1A46 05 03       	syscall sys_io				; display AL
0470+  1A48             
0471+  1A48 E5          	pop b
0472+  1A49 E4          	pop a
0473+  1A4A 09          	ret
0474+  1A4B             
0475+  1A4B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  1A4B             ; INPUT 16BIT HEX INTEGER
0477+  1A4B             ; read 16bit integer into A
0478+  1A4B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  1A4B             scan_u16x:
0480+  1A4B F8 10 00    	enter 16
0481+  1A4E D8          	push b
0482+  1A4F DA          	push d
0483+  1A50             
0484+  1A50 FA F1 FF    	lea d, [bp + -15]
0485+  1A53 07 9A 18    	call gets				; get number
0486+  1A56             
0487+  1A56 32          	mov bl, [d]
0488+  1A57 37          	mov bh, bl
0489+  1A58 33 01 00    	mov bl, [d + 1]
0490+  1A5B 07 48 18    	call atoi				; convert to int in AL
0491+  1A5E 23          	mov ah, al				; move to AH
0492+  1A5F             
0493+  1A5F 33 02 00    	mov bl, [d + 2]
0494+  1A62 37          	mov bh, bl
0495+  1A63 33 03 00    	mov bl, [d + 3]
0496+  1A66 07 48 18    	call atoi				; convert to int in AL
0497+  1A69             
0498+  1A69 E7          	pop d
0499+  1A6A E5          	pop b
0500+  1A6B F9          	leave
0501+  1A6C 09          	ret
0502+  1A6D             
0503+  1A6D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  1A6D             ; PRINT 8bit HEX INTEGER
0505+  1A6D             ; integer value in reg bl
0506+  1A6D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  1A6D             print_u8x:
0508+  1A6D D7          	push a
0509+  1A6E DD          	push bl
0510+  1A6F             
0511+  1A6F 07 5A 18    	call itoa				; convert bl to char in A
0512+  1A72 2F          	mov bl, al				; save al
0513+  1A73 19 00       	mov al, 0
0514+  1A75 05 03       	syscall sys_io				; display AH
0515+  1A77 24          	mov ah, bl				; retrieve al
0516+  1A78 19 00       	mov al, 0
0517+  1A7A 05 03       	syscall sys_io				; display AL
0518+  1A7C             
0519+  1A7C EA          	pop bl
0520+  1A7D E4          	pop a
0521+  1A7E 09          	ret
0522+  1A7F             
0523+  1A7F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  1A7F             ; print 8bit decimal unsigned number
0525+  1A7F             ; input number in AL
0526+  1A7F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  1A7F             print_u8d:
0528+  1A7F D7          	push a
0529+  1A80 D8          	push b
0530+  1A81             
0531+  1A81 22 00       	mov ah, 0
0532+  1A83 26 64 00    	mov b, 100
0533+  1A86 AE          	div a, b
0534+  1A87 D8          	push b			; save remainder
0535+  1A88 B9 00       	cmp al, 0
0536+  1A8A C6 94 1A    	je skip100
0537+  1A8D 6A 30       	add al, $30
0538+  1A8F 23          	mov ah, al
0539+  1A90 19 00       	mov al, 0
0540+  1A92 05 03       	syscall sys_io	; print coeff
0541+  1A94             skip100:
0542+  1A94 E4          	pop a
0543+  1A95 22 00       	mov ah, 0
0544+  1A97 26 0A 00    	mov b, 10
0545+  1A9A AE          	div a, b
0546+  1A9B D8          	push b			; save remainder
0547+  1A9C B9 00       	cmp al, 0
0548+  1A9E C6 A8 1A    	je skip10
0549+  1AA1 6A 30       	add al, $30
0550+  1AA3 23          	mov ah, al
0551+  1AA4 19 00       	mov al, 0
0552+  1AA6 05 03       	syscall sys_io	; print coeff
0553+  1AA8             skip10:
0554+  1AA8 E4          	pop a
0555+  1AA9 1B          	mov al, bl
0556+  1AAA 6A 30       	add al, $30
0557+  1AAC 23          	mov ah, al
0558+  1AAD 19 00       	mov al, 0
0559+  1AAF 05 03       	syscall sys_io	; print coeff
0560+  1AB1 E5          	pop b
0561+  1AB2 E4          	pop a
0562+  1AB3 09          	ret
0563+  1AB4             
0564+  1AB4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  1AB4             ; INPUT 8BIT HEX INTEGER
0566+  1AB4             ; read 8bit integer into AL
0567+  1AB4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  1AB4             scan_u8x:
0569+  1AB4 F8 04 00    	enter 4
0570+  1AB7 D8          	push b
0571+  1AB8 DA          	push d
0572+  1AB9             
0573+  1AB9 FA FD FF    	lea d, [bp + -3]
0574+  1ABC 07 9A 18    	call gets				; get number
0575+  1ABF             
0576+  1ABF 32          	mov bl, [d]
0577+  1AC0 37          	mov bh, bl
0578+  1AC1 33 01 00    	mov bl, [d + 1]
0579+  1AC4 07 48 18    	call atoi				; convert to int in AL
0580+  1AC7             
0581+  1AC7 E7          	pop d
0582+  1AC8 E5          	pop b
0583+  1AC9 F9          	leave
0584+  1ACA 09          	ret
0585+  1ACB             
0586+  1ACB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  1ACB             ; input decimal number
0588+  1ACB             ; result in A
0589+  1ACB             ; 655'\0'
0590+  1ACB             ; low--------high
0591+  1ACB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  1ACB             scan_u16d:
0593+  1ACB F8 08 00    	enter 8
0594+  1ACE E2          	push si
0595+  1ACF D8          	push b
0596+  1AD0 D9          	push c
0597+  1AD1 DA          	push d
0598+  1AD2 FA F9 FF    	lea d, [bp +- 7]
0599+  1AD5 07 9A 18    	call gets
0600+  1AD8 07 C8 17    	call strlen			; get string length in C
0601+  1ADB 7E          	dec c
0602+  1ADC FD 4E       	mov si, d
0603+  1ADE 12          	mov a, c
0604+  1ADF FD 99       	shl a
0605+  1AE1 3B 30 18    	mov d, table_power
0606+  1AE4 59          	add d, a
0607+  1AE5 38 00 00    	mov c, 0
0608+  1AE8             mul_loop:
0609+  1AE8 F6          	lodsb			; load ASCII to al
0610+  1AE9 B9 00       	cmp al, 0
0611+  1AEB C6 FE 1A    	je mul_exit
0612+  1AEE 6F 30       	sub al, $30		; make into integer
0613+  1AF0 22 00       	mov ah, 0
0614+  1AF2 2A          	mov b, [d]
0615+  1AF3 AC          	mul a, b			; result in B since it fits in 16bits
0616+  1AF4 11          	mov a, b
0617+  1AF5 28          	mov b, c
0618+  1AF6 54          	add a, b
0619+  1AF7 39          	mov c, a
0620+  1AF8 63 02 00    	sub d, 2
0621+  1AFB 0A E8 1A    	jmp mul_loop
0622+  1AFE             mul_exit:
0623+  1AFE 12          	mov a, c
0624+  1AFF E7          	pop d
0625+  1B00 E6          	pop c
0626+  1B01 E5          	pop b
0627+  1B02 EF          	pop si
0628+  1B03 F9          	leave
0629+  1B04 09          	ret
0889   1B05             ; --- END INCLUDE BLOCK
0890   1B05             
0891   1B05             
0892   1B05             .end
tasm: Number of errors = 0
