0001   0000             ; --- Filename: primes.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- begin text block
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 07 07 04      call primes
0010   0405             ; --- begin inline asm block
0011   0405 05 0B       		syscall sys_terminate_proc
0012   0407             	; --- end inline asm block
0013   0407             primes:
0014   0407 D2            push bp
0015   0408 9B            mov bp, sp
0016   0409 26 02 00      mov b, 2
0017   040C FD 42 FB 04   mov [n], b
0018   0410             _while1_cond:
0019   0410 29 FB 04      mov b, [n]
0020   0413 D7            push a
0021   0414 11            mov a, b
0022   0415 26 F4 01      mov b, 500
0023   0418 B0            cmp a, b
0024   0419 0E            lodflgs
0025   041A 87 02         and al, %00000010
0026   041C 22 00         mov ah, 0
0027   041E 27            mov b, a
0028   041F E4            pop a
0029   0420 C0 00 00      cmp b, 0
0030   0423 C6 F1 04      je _while1_exit
0031   0426             _while1_block:
0032   0426 29 FB 04      mov b, [n]
0033   0429 FD 42 01 05   mov [s], b
0034   042D 26 00 00      mov b, 0
0035   0430 FD 42 05 05   mov [divides], b
0036   0434 26 02 00      mov b, 2
0037   0437 FD 42 FD 04   mov [i], b
0038   043B             _while2_cond:
0039   043B 29 FD 04      mov b, [i]
0040   043E D7            push a
0041   043F 11            mov a, b
0042   0440 29 01 05      mov b, [s]
0043   0443 B0            cmp a, b
0044   0444 0E            lodflgs
0045   0445 87 02         and al, %00000010
0046   0447 22 00         mov ah, 0
0047   0449 27            mov b, a
0048   044A E4            pop a
0049   044B C0 00 00      cmp b, 0
0050   044E C6 A9 04      je _while2_exit
0051   0451             _while2_block:
0052   0451             _if3_cond:
0053   0451 29 FB 04      mov b, [n]
0054   0454 D7            push a
0055   0455 11            mov a, b
0056   0456 29 FD 04      mov b, [i]
0057   0459 AE            div a, b
0058   045A E4            pop a
0059   045B D7            push a
0060   045C 11            mov a, b
0061   045D 26 00 00      mov b, 0
0062   0460 B0            cmp a, b
0063   0461 0E            lodflgs
0064   0462 87 01         and al, %00000001
0065   0464 22 00         mov ah, 0
0066   0466 27            mov b, a
0067   0467 E4            pop a
0068   0468 C0 00 00      cmp b, 0
0069   046B C6 7B 04      je _if3_exit
0070   046E             _if3_true:
0071   046E 26 01 00      mov b, 1
0072   0471 FD 42 05 05   mov [divides], b
0073   0475 0A A9 04      jmp _while2_exit
0074   0478 0A 7B 04      jmp _if3_exit
0075   047B             _if3_exit:
0076   047B 29 FD 04      mov b, [i]
0077   047E D7            push a
0078   047F 11            mov a, b
0079   0480 26 01 00      mov b, 1
0080   0483 54            add a, b
0081   0484 27            mov b, a
0082   0485 E4            pop a
0083   0486 FD 42 FD 04   mov [i], b
0084   048A             _if4_cond:
0085   048A 29 FD 04      mov b, [i]
0086   048D D7            push a
0087   048E 11            mov a, b
0088   048F 29 FB 04      mov b, [n]
0089   0492 B0            cmp a, b
0090   0493 0E            lodflgs
0091   0494 87 01         and al, %00000001
0092   0496 22 00         mov ah, 0
0093   0498 27            mov b, a
0094   0499 E4            pop a
0095   049A C0 00 00      cmp b, 0
0096   049D C6 A6 04      je _if4_exit
0097   04A0             _if4_true:
0098   04A0 0A A9 04      jmp _while2_exit
0099   04A3 0A A6 04      jmp _if4_exit
0100   04A6             _if4_exit:
0101   04A6 0A 3B 04      jmp _while2_cond
0102   04A9             _while2_exit:
0103   04A9             _if5_cond:
0104   04A9 29 05 05      mov b, [divides]
0105   04AC D7            push a
0106   04AD 11            mov a, b
0107   04AE 26 00 00      mov b, 0
0108   04B1 B0            cmp a, b
0109   04B2 0E            lodflgs
0110   04B3 87 01         and al, %00000001
0111   04B5 22 00         mov ah, 0
0112   04B7 27            mov b, a
0113   04B8 E4            pop a
0114   04B9 C0 00 00      cmp b, 0
0115   04BC C6 DF 04      je _if5_exit
0116   04BF             _if5_true:
0117   04BF 29 03 05      mov b, [count]
0118   04C2 D7            push a
0119   04C3 11            mov a, b
0120   04C4 26 01 00      mov b, 1
0121   04C7 54            add a, b
0122   04C8 27            mov b, a
0123   04C9 E4            pop a
0124   04CA FD 42 03 05   mov [count], b
0125   04CE             ; --- begin inline asm block
0126   04CE 14 FB 04    				mov a, [n]
0127   04D1 07 7F 07    				call print_u16d
0128   04D4 3B 09 05    				mov d, newline
0129   04D7 15          				mov a, [d]
0130   04D8 3C          				mov d, a
0131   04D9 07 56 07    				call puts
0132   04DC             			; --- end inline asm block
0133   04DC 0A DF 04      jmp _if5_exit
0134   04DF             _if5_exit:
0135   04DF 29 FB 04      mov b, [n]
0136   04E2 D7            push a
0137   04E3 11            mov a, b
0138   04E4 26 01 00      mov b, 1
0139   04E7 54            add a, b
0140   04E8 27            mov b, a
0141   04E9 E4            pop a
0142   04EA FD 42 FB 04   mov [n], b
0143   04EE 0A 10 04      jmp _while1_cond
0144   04F1             _while1_exit:
0145   04F1 F9            leave
0146   04F2 09            ret
0147   04F3             ; --- end text block
0148   04F3             
0149   04F3             ; --- begin data block
0150   04F3 00 00       x: .fill 2, 00
0151   04F5 00 00       y: .fill 2, 00
0152   04F7 00 00       z: .fill 2, 00
0153   04F9 00 00       max: .fill 2, 00
0154   04FB 00 00       n: .fill 2, 00
0155   04FD 00 00       i: .fill 2, 00
0156   04FF 00 00       j: .fill 2, 00
0157   0501 00 00       s: .fill 2, 00
0158   0503 00 00       count: .fill 2, 00
0159   0505 00 00       divides: .fill 2, 00
0160   0507 0A 00       newline_data: .db "\n", 0
0161   0509 07 05       newline: .dw newline_data
0162   050B 54 52 55 45 s1_data: .db "TRUE", 0
0162   050F 00 
0163   0510 0B 05       s1: .dw s1_data
0164   0512             ; --- end data block
0165   0512             ; --- begin include block
0166   0512             .include "lib/stdio.asm"
0001+  0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0512             ; stdio.s
0003+  0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0512             .include "lib/string.asm"
0001++ 0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0512             ; string.s
0003++ 0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0512             
0005++ 0512             
0006++ 0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0512             ; strrev
0008++ 0512             ; reverse a string
0009++ 0512             ; D = string address
0010++ 0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0512             ; 01234
0012++ 0512             strrev:
0013++ 0512 4B          	pusha
0014++ 0513 07 59 05    	call strlen	; length in C
0015++ 0516 12          	mov a, c
0016++ 0517 AF 01 00    	cmp a, 1
0017++ 051A D0 34 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 051D 7D          	dec a
0019++ 051E FD 4E       	mov si, d	; beginning of string
0020++ 0520 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0522 59          	add d, a	; end of string
0022++ 0523 12          	mov a, c
0023++ 0524 FD 9B       	shr a		; divide by 2
0024++ 0526 39          	mov c, a	; C now counts the steps
0025++ 0527             strrev_L0:
0026++ 0527 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0528 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0529 3E          	mov [d], al	; store left char into right side
0029++ 052A 1B          	mov al, bl
0030++ 052B F7          	stosb		; store right-side char into left-side; increase DI
0031++ 052C 7E          	dec c
0032++ 052D 7F          	dec d
0033++ 052E C2 00 00    	cmp c, 0
0034++ 0531 C7 27 05    	jne strrev_L0
0035++ 0534             strrev_end:
0036++ 0534 4C          	popa
0037++ 0535 09          	ret
0038++ 0536             	
0039++ 0536             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0536             ; strchr
0041++ 0536             ; search string in D for char in AL
0042++ 0536             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0536             strchr:
0044++ 0536             strchr_L0:
0045++ 0536 32          	mov bl, [d]
0046++ 0537 C1 00       	cmp bl, 0
0047++ 0539 C6 44 05    	je strchr_end
0048++ 053C BA          	cmp al, bl
0049++ 053D C6 44 05    	je strchr_end
0050++ 0540 79          	inc d
0051++ 0541 0A 36 05    	jmp strchr_L0
0052++ 0544             strchr_end:
0053++ 0544 1B          	mov al, bl
0054++ 0545 09          	ret
0055++ 0546             
0056++ 0546             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0546             ; strstr
0058++ 0546             ; find sub-string
0059++ 0546             ; str1 in SI
0060++ 0546             ; str2 in DI
0061++ 0546             ; SI points to end of source string
0062++ 0546             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0546             strstr:
0064++ 0546 DB          	push al
0065++ 0547 DA          	push d
0066++ 0548 E3          	push di
0067++ 0549             strstr_loop:
0068++ 0549 F3          	cmpsb					; compare a byte of the strings
0069++ 054A C7 55 05    	jne strstr_ret
0070++ 054D FC 00 00    	lea d, [di + 0]
0071++ 0550 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0552 C7 49 05    	jne strstr_loop				; equal chars but not at end
0073++ 0555             strstr_ret:
0074++ 0555 F0          	pop di
0075++ 0556 E7          	pop d
0076++ 0557 E8          	pop al
0077++ 0558 09          	ret
0078++ 0559             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0559             ; length of null terminated string
0080++ 0559             ; result in C
0081++ 0559             ; pointer in D
0082++ 0559             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0559             strlen:
0084++ 0559 DA          	push d
0085++ 055A 38 00 00    	mov c, 0
0086++ 055D             strlen_L1:
0087++ 055D BD 00       	cmp byte [d], 0
0088++ 055F C6 67 05    	je strlen_ret
0089++ 0562 79          	inc d
0090++ 0563 78          	inc c
0091++ 0564 0A 5D 05    	jmp strlen_L1
0092++ 0567             strlen_ret:
0093++ 0567 E7          	pop d
0094++ 0568 09          	ret
0095++ 0569             
0096++ 0569             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0569             ; STRCMP
0098++ 0569             ; compare two strings
0099++ 0569             ; str1 in SI
0100++ 0569             ; str2 in DI
0101++ 0569             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0569             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0569             strcmp:
0104++ 0569 DB          	push al
0105++ 056A DA          	push d
0106++ 056B E3          	push di
0107++ 056C E2          	push si
0108++ 056D             strcmp_loop:
0109++ 056D F3          	cmpsb					; compare a byte of the strings
0110++ 056E C7 79 05    	jne strcmp_ret
0111++ 0571 FB FF FF    	lea d, [si +- 1]
0112++ 0574 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0576 C7 6D 05    	jne strcmp_loop				; equal chars but not at end
0114++ 0579             strcmp_ret:
0115++ 0579 EF          	pop si
0116++ 057A F0          	pop di
0117++ 057B E7          	pop d
0118++ 057C E8          	pop al
0119++ 057D 09          	ret
0120++ 057E             
0121++ 057E             
0122++ 057E             ; STRCPY
0123++ 057E             ; copy null terminated string from SI to DI
0124++ 057E             ; source in SI
0125++ 057E             ; destination in DI
0126++ 057E             strcpy:
0127++ 057E E2          	push si
0128++ 057F E3          	push di
0129++ 0580 DB          	push al
0130++ 0581             strcpy_L1:
0131++ 0581 F6          	lodsb
0132++ 0582 F7          	stosb
0133++ 0583 B9 00       	cmp al, 0
0134++ 0585 C7 81 05    	jne strcpy_L1
0135++ 0588             strcpy_end:
0136++ 0588 E8          	pop al
0137++ 0589 F0          	pop di
0138++ 058A EF          	pop si
0139++ 058B 09          	ret
0140++ 058C             
0141++ 058C             ; STRCAT
0142++ 058C             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 058C             ; source in SI
0144++ 058C             ; destination in DI
0145++ 058C             strcat:
0146++ 058C E2          	push si
0147++ 058D E3          	push di
0148++ 058E D7          	push a
0149++ 058F DA          	push d
0150++ 0590 50          	mov a, di
0151++ 0591 3C          	mov d, a
0152++ 0592             strcat_goto_end_L1:
0153++ 0592 BD 00       	cmp byte[d], 0
0154++ 0594 C6 9B 05    	je strcat_start
0155++ 0597 79          	inc d
0156++ 0598 0A 92 05    	jmp strcat_goto_end_L1
0157++ 059B             strcat_start:
0158++ 059B FD 50       	mov di, d
0159++ 059D             strcat_L1:
0160++ 059D F6          	lodsb
0161++ 059E F7          	stosb
0162++ 059F B9 00       	cmp al, 0
0163++ 05A1 C7 9D 05    	jne strcat_L1
0164++ 05A4             strcat_end:
0165++ 05A4 E7          	pop d
0166++ 05A5 E4          	pop a
0167++ 05A6 F0          	pop di
0168++ 05A7 EF          	pop si
0169++ 05A8 09          	ret
0005+  05A9             
0006+  05A9 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  05AD 34 35 36 37 
0006+  05B1 38 39 41 42 
0006+  05B5 43 44 45 46 
0007+  05B9             
0008+  05B9 01 00       table_power:.dw 1
0009+  05BB 0A 00       			.dw 10
0010+  05BD 64 00       			.dw 100
0011+  05BF E8 03       			.dw 1000
0012+  05C1 10 27       			.dw 10000
0013+  05C3             
0014+  05C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  05C3             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  05C3             ; ASCII in BL
0017+  05C3             ; result in AL
0018+  05C3             ; ascii for F = 0100 0110
0019+  05C3             ; ascii for 9 = 0011 1001
0020+  05C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  05C3             hex_ascii_encode:
0022+  05C3 1B          	mov al, bl
0023+  05C4 93 40       	test al, $40				; test if letter or number
0024+  05C6 C7 CC 05    	jnz hex_letter
0025+  05C9 87 0F       	and al, $0F				; get number
0026+  05CB 09          	ret
0027+  05CC             hex_letter:
0028+  05CC 87 0F       	and al, $0F				; get letter
0029+  05CE 6A 09       	add al, 9
0030+  05D0 09          	ret
0031+  05D1             
0032+  05D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  05D1             ; ATOI
0034+  05D1             ; 2 letter hex string in B
0035+  05D1             ; 8bit integer returned in AL
0036+  05D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  05D1             atoi:
0038+  05D1 D8          	push b
0039+  05D2 07 C3 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  05D5 30          	mov bl, bh
0041+  05D6 DB          	push al					; save a
0042+  05D7 07 C3 05    	call hex_ascii_encode
0043+  05DA EA          	pop bl	
0044+  05DB FD 9E 04    	shl al, 4
0045+  05DE 8C          	or al, bl
0046+  05DF E5          	pop b
0047+  05E0 09          	ret	
0048+  05E1             
0049+  05E1             
0050+  05E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  05E1             ; printf
0052+  05E1             ; no need for explanations!
0053+  05E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  05E1             printf:
0055+  05E1 09          	ret
0056+  05E2             
0057+  05E2             
0058+  05E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  05E2             ; scanf
0060+  05E2             ; no need for explanations!
0061+  05E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  05E2             scanf:
0063+  05E2 09          	ret
0064+  05E3             
0065+  05E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  05E3             ; ITOA
0067+  05E3             ; 8bit value in BL
0068+  05E3             ; 2 byte ASCII result in A
0069+  05E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  05E3             itoa:
0071+  05E3 DA          	push d
0072+  05E4 D8          	push b
0073+  05E5 A7 00       	mov bh, 0
0074+  05E7 FD A4 04    	shr bl, 4	
0075+  05EA 74          	mov d, b
0076+  05EB 1F A9 05    	mov al, [d + s_hex_digits]
0077+  05EE 23          	mov ah, al
0078+  05EF             	
0079+  05EF E5          	pop b
0080+  05F0 D8          	push b
0081+  05F1 A7 00       	mov bh, 0
0082+  05F3 FD 87 0F    	and bl, $0F
0083+  05F6 74          	mov d, b
0084+  05F7 1F A9 05    	mov al, [d + s_hex_digits]
0085+  05FA E5          	pop b
0086+  05FB E7          	pop d
0087+  05FC 09          	ret
0088+  05FD             
0089+  05FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  05FD             ; HEX STRING TO BINARY
0091+  05FD             ; di = destination address
0092+  05FD             ; si = source
0093+  05FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  05FD             hex_to_int:
0095+  05FD             hex_to_int_L1:
0096+  05FD F6          	lodsb					; load from [SI] to AL
0097+  05FE B9 00       	cmp al, 0				; check if ASCII 0
0098+  0600 C6 0D 06    	jz hex_to_int_ret
0099+  0603 36          	mov bh, al
0100+  0604 F6          	lodsb
0101+  0605 2F          	mov bl, al
0102+  0606 07 D1 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0609 F7          	stosb					; store AL to [DI]
0104+  060A 0A FD 05    	jmp hex_to_int_L1
0105+  060D             hex_to_int_ret:
0106+  060D 09          	ret		
0107+  060E             
0108+  060E             
0109+  060E             
0110+  060E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  060E             ; GETCHAR
0112+  060E             ; char in ah
0113+  060E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  060E             getchar:
0115+  060E DB          	push al
0116+  060F             getchar_retry:
0117+  060F FD 0C       	sti
0118+  0611 19 01       	mov al, 1
0119+  0613 05 03       	syscall sys_io			; receive in AH
0120+  0615 B9 00       	cmp al, 0			; check if any char was receive
0121+  0617 C6 0F 06    	je getchar_retry
0122+  061A E8          	pop al
0123+  061B 09          	ret
0124+  061C             
0125+  061C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  061C             ; PUTCHAR
0127+  061C             ; char in ah
0128+  061C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  061C             putchar:
0130+  061C D7          	push a
0131+  061D 19 00       	mov al, 0
0132+  061F 05 03       	syscall sys_io			; char in AH
0133+  0621 E4          	pop a
0134+  0622 09          	ret
0135+  0623             
0136+  0623             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  0623             ;; INPUT A STRING
0138+  0623             ;; terminates with null
0139+  0623             ;; pointer in D
0140+  0623             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0623             gets:
0142+  0623 D7          	push a
0143+  0624 DA          	push d
0144+  0625             gets_loop:
0145+  0625 FD 0C       	sti
0146+  0627 19 01       	mov al, 1
0147+  0629 05 03       	syscall sys_io			; receive in AH
0148+  062B B9 00       	cmp al, 0				; check error code (AL)
0149+  062D C6 25 06    	je gets_loop			; if no char received, retry
0150+  0630             
0151+  0630 76 1B       	cmp ah, 27
0152+  0632 C6 53 06    	je gets_telnet_escape
0153+  0635 76 0A       	cmp ah, $0A				; LF
0154+  0637 C6 AC 06    	je gets_end
0155+  063A 76 0D       	cmp ah, $0D				; CR
0156+  063C C6 AC 06    	je gets_end
0157+  063F 76 5C       	cmp ah, $5C				; '\\'
0158+  0641 C6 83 06    	je gets_escape
0159+  0644             	
0160+  0644 76 08       	cmp ah, $08			; check for backspace
0161+  0646 C6 4F 06    	je gets_backspace
0162+  0649             
0163+  0649 1A          	mov al, ah
0164+  064A 3E          	mov [d], al
0165+  064B 79          	inc d
0166+  064C 0A 25 06    	jmp gets_loop
0167+  064F             gets_backspace:
0168+  064F 7F          	dec d
0169+  0650 0A 25 06    	jmp gets_loop
0170+  0653             gets_telnet_escape:
0171+  0653 FD 0C       	sti
0172+  0655 19 01       	mov al, 1
0173+  0657 05 03       	syscall sys_io				; receive in AH without echo
0174+  0659 B9 00       	cmp al, 0					; check error code (AL)
0175+  065B C6 53 06    	je gets_telnet_escape		; if no char received, retry
0176+  065E 76 5B       	cmp ah, '['
0177+  0660 C7 25 06    	jne gets_loop
0178+  0663             gets_telnet_escape_phase2:
0179+  0663 FD 0C       	sti
0180+  0665 19 01       	mov al, 1
0181+  0667 05 03       	syscall sys_io					; receive in AH without echo
0182+  0669 B9 00       	cmp al, 0						; check error code (AL)
0183+  066B C6 63 06    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  066E 76 44       	cmp ah, 'D'
0185+  0670 C6 7B 06    	je gets_left_arrow
0186+  0673 76 43       	cmp ah, 'C'
0187+  0675 C6 7F 06    	je gets_right_arrow
0188+  0678 0A 25 06    	jmp gets_loop
0189+  067B             gets_left_arrow:
0190+  067B 7F          	dec d
0191+  067C 0A 25 06    	jmp gets_loop
0192+  067F             gets_right_arrow:
0193+  067F 79          	inc d
0194+  0680 0A 25 06    	jmp gets_loop
0195+  0683             gets_escape:
0196+  0683 FD 0C       	sti
0197+  0685 19 01       	mov al, 1
0198+  0687 05 03       	syscall sys_io			; receive in AH
0199+  0689 B9 00       	cmp al, 0				; check error code (AL)
0200+  068B C6 83 06    	je gets_escape			; if no char received, retry
0201+  068E 76 6E       	cmp ah, 'n'
0202+  0690 C6 9E 06    	je gets_LF
0203+  0693 76 72       	cmp ah, 'r'
0204+  0695 C6 A5 06    	je gets_CR
0205+  0698 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  0699 3E          	mov [d], al
0207+  069A 79          	inc d
0208+  069B 0A 25 06    	jmp gets_loop
0209+  069E             gets_LF:
0210+  069E 19 0A       	mov al, $0A
0211+  06A0 3E          	mov [d], al
0212+  06A1 79          	inc d
0213+  06A2 0A 25 06    	jmp gets_loop
0214+  06A5             gets_CR:
0215+  06A5 19 0D       	mov al, $0D
0216+  06A7 3E          	mov [d], al
0217+  06A8 79          	inc d
0218+  06A9 0A 25 06    	jmp gets_loop
0219+  06AC             gets_end:
0220+  06AC 19 00       	mov al, 0
0221+  06AE 3E          	mov [d], al				; terminate string
0222+  06AF E7          	pop d
0223+  06B0 E4          	pop a
0224+  06B1 09          	ret
0225+  06B2             
0226+  06B2             
0227+  06B2             
0228+  06B2             
0229+  06B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  06B2             ;; INPUT TEXT
0231+  06B2             ;; terminated with CTRL+D
0232+  06B2             ;; pointer in D
0233+  06B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  06B2             gettxt:
0235+  06B2 D7          	push a
0236+  06B3 DA          	push d
0237+  06B4             gettxt_loop:
0238+  06B4 19 01       	mov al, 1
0239+  06B6 05 03       	syscall sys_io			; receive in AH
0240+  06B8 B9 00       	cmp al, 0				; check error code (AL)
0241+  06BA C6 B4 06    	je gettxt_loop		; if no char received, retry
0242+  06BD 76 04       	cmp ah, 4			; EOT
0243+  06BF C6 FD 06    	je gettxt_end
0244+  06C2 76 08       	cmp ah, $08			; check for backspace
0245+  06C4 C6 F9 06    	je gettxt_backspace
0246+  06C7 76 5C       	cmp ah, $5C				; '\\'
0247+  06C9 C6 D2 06    	je gettxt_escape
0248+  06CC 1A          	mov al, ah
0249+  06CD 3E          	mov [d], al
0250+  06CE 79          	inc d
0251+  06CF 0A B4 06    	jmp gettxt_loop
0252+  06D2             gettxt_escape:
0253+  06D2 19 01       	mov al, 1
0254+  06D4 05 03       	syscall sys_io			; receive in AH
0255+  06D6 B9 00       	cmp al, 0				; check error code (AL)
0256+  06D8 C6 D2 06    	je gettxt_escape		; if no char received, retry
0257+  06DB 76 6E       	cmp ah, 'n'
0258+  06DD C6 EB 06    	je gettxt_LF
0259+  06E0 76 72       	cmp ah, 'r'
0260+  06E2 C6 F2 06    	je gettxt_CR
0261+  06E5 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  06E6 3E          	mov [d], al
0263+  06E7 79          	inc d
0264+  06E8 0A B4 06    	jmp gettxt_loop
0265+  06EB             gettxt_LF:
0266+  06EB 19 0A       	mov al, $0A
0267+  06ED 3E          	mov [d], al
0268+  06EE 79          	inc d
0269+  06EF 0A B4 06    	jmp gettxt_loop
0270+  06F2             gettxt_CR:
0271+  06F2 19 0D       	mov al, $0D
0272+  06F4 3E          	mov [d], al
0273+  06F5 79          	inc d
0274+  06F6 0A B4 06    	jmp gettxt_loop
0275+  06F9             gettxt_backspace:
0276+  06F9 7F          	dec d
0277+  06FA 0A B4 06    	jmp gettxt_loop
0278+  06FD             gettxt_end:
0279+  06FD 19 00       	mov al, 0
0280+  06FF 3E          	mov [d], al				; terminate string
0281+  0700 E7          	pop d
0282+  0701 E4          	pop a
0283+  0702 09          	ret
0284+  0703             
0285+  0703             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0703             ; PRINT NEW LINE
0287+  0703             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  0703             printnl:
0289+  0703 D7          	push a
0290+  0704 10 00 0A    	mov a, $0A00
0291+  0707 05 03       	syscall sys_io
0292+  0709 10 00 0D    	mov a, $0D00
0293+  070C 05 03       	syscall sys_io
0294+  070E E4          	pop a
0295+  070F 09          	ret
0296+  0710             
0297+  0710             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  0710             ; strtoint
0299+  0710             ; 4 digit hex string number in d
0300+  0710             ; integer returned in A
0301+  0710             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  0710             strtointx:
0303+  0710 D8          	push b
0304+  0711 32          	mov bl, [d]
0305+  0712 37          	mov bh, bl
0306+  0713 33 01 00    	mov bl, [d + 1]
0307+  0716 07 D1 05    	call atoi				; convert to int in AL
0308+  0719 23          	mov ah, al				; move to AH
0309+  071A 33 02 00    	mov bl, [d + 2]
0310+  071D 37          	mov bh, bl
0311+  071E 33 03 00    	mov bl, [d + 3]
0312+  0721 07 D1 05    	call atoi				; convert to int in AL
0313+  0724 E5          	pop b
0314+  0725 09          	ret
0315+  0726             
0316+  0726             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  0726             ; strtoint
0318+  0726             ; 5 digit base10 string number in d
0319+  0726             ; integer returned in A
0320+  0726             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  0726             strtoint:
0322+  0726 E2          	push si
0323+  0727 D8          	push b
0324+  0728 D9          	push c
0325+  0729 DA          	push d
0326+  072A 07 59 05    	call strlen			; get string length in C
0327+  072D 7E          	dec c
0328+  072E FD 4E       	mov si, d
0329+  0730 12          	mov a, c
0330+  0731 FD 99       	shl a
0331+  0733 3B B9 05    	mov d, table_power
0332+  0736 59          	add d, a
0333+  0737 38 00 00    	mov c, 0
0334+  073A             strtoint_L0:
0335+  073A F6          	lodsb			; load ASCII to al
0336+  073B B9 00       	cmp al, 0
0337+  073D C6 50 07    	je strtoint_end
0338+  0740 6F 30       	sub al, $30		; make into integer
0339+  0742 22 00       	mov ah, 0
0340+  0744 2A          	mov b, [d]
0341+  0745 AC          	mul a, b			; result in B since it fits in 16bits
0342+  0746 11          	mov a, b
0343+  0747 28          	mov b, c
0344+  0748 54          	add a, b
0345+  0749 39          	mov c, a
0346+  074A 63 02 00    	sub d, 2
0347+  074D 0A 3A 07    	jmp strtoint_L0
0348+  0750             strtoint_end:
0349+  0750 12          	mov a, c
0350+  0751 E7          	pop d
0351+  0752 E6          	pop c
0352+  0753 E5          	pop b
0353+  0754 EF          	pop si
0354+  0755 09          	ret
0355+  0756             
0356+  0756             
0357+  0756             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  0756             ; PRINT NULL TERMINATED STRING
0359+  0756             ; pointer in D
0360+  0756             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  0756             puts:
0362+  0756 D7          	push a
0363+  0757 DA          	push d
0364+  0758             puts_L1:
0365+  0758 1E          	mov al, [d]
0366+  0759 B9 00       	cmp al, 0
0367+  075B C6 67 07    	jz puts_END
0368+  075E 23          	mov ah, al
0369+  075F 19 00       	mov al, 0
0370+  0761 05 03       	syscall sys_io
0371+  0763 79          	inc d
0372+  0764 0A 58 07    	jmp puts_L1
0373+  0767             puts_END:
0374+  0767 E7          	pop d
0375+  0768 E4          	pop a
0376+  0769 09          	ret
0377+  076A             
0378+  076A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  076A             ; PRINT N SIZE STRING
0380+  076A             ; pointer in D
0381+  076A             ; size in C
0382+  076A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  076A             putsn:
0384+  076A DB          	push al
0385+  076B DA          	push d
0386+  076C D9          	push c
0387+  076D             putsn_L0:
0388+  076D 1E          	mov al, [d]
0389+  076E 23          	mov ah, al
0390+  076F 19 00       	mov al, 0
0391+  0771 05 03       	syscall sys_io
0392+  0773 79          	inc d
0393+  0774 7E          	dec c	
0394+  0775 C2 00 00    	cmp c, 0
0395+  0778 C7 6D 07    	jne putsn_L0
0396+  077B             putsn_end:
0397+  077B E6          	pop c
0398+  077C E7          	pop d
0399+  077D E8          	pop al
0400+  077E 09          	ret
0401+  077F             
0402+  077F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  077F             ; print 16bit decimal number
0404+  077F             ; input number in A
0405+  077F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  077F             print_u16d:
0407+  077F D7          	push a
0408+  0780 D8          	push b
0409+  0781 26 10 27    	mov b, 10000
0410+  0784 AE          	div a, b			; get 10000 coeff.
0411+  0785 07 AB 07    	call print_number
0412+  0788 11          	mov a, b
0413+  0789 26 E8 03    	mov b, 1000
0414+  078C AE          	div a, b			; get 10000 coeff.
0415+  078D 07 AB 07    	call print_number
0416+  0790 11          	mov a, b
0417+  0791 26 64 00    	mov b, 100
0418+  0794 AE          	div a, b
0419+  0795 07 AB 07    	call print_number
0420+  0798 11          	mov a, b
0421+  0799 26 0A 00    	mov b, 10
0422+  079C AE          	div a, b
0423+  079D 07 AB 07    	call print_number
0424+  07A0 11          	mov a, b
0425+  07A1 6A 30       	add al, $30
0426+  07A3 23          	mov ah, al
0427+  07A4 19 00       	mov al, 0
0428+  07A6 05 03       	syscall sys_io	; print coeff
0429+  07A8 E5          	pop b
0430+  07A9 E4          	pop a
0431+  07AA 09          	ret
0432+  07AB             
0433+  07AB             
0434+  07AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  07AB             ; if A == 0, print space
0436+  07AB             ; else print A
0437+  07AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  07AB             print_number:
0439+  07AB 6A 30       	add al, $30
0440+  07AD 23          	mov ah, al
0441+  07AE 07 1C 06    	call putchar
0442+  07B1 09          	ret
0443+  07B2             
0444+  07B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  07B2             ; PRINT 16BIT HEX INTEGER
0446+  07B2             ; integer value in reg B
0447+  07B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  07B2             print_u16x:
0449+  07B2 D7          	push a
0450+  07B3 D8          	push b
0451+  07B4 DD          	push bl
0452+  07B5 30          	mov bl, bh
0453+  07B6 07 E3 05    	call itoa				; convert bh to char in A
0454+  07B9 2F          	mov bl, al				; save al
0455+  07BA 19 00       	mov al, 0
0456+  07BC 05 03       	syscall sys_io				; display AH
0457+  07BE 24          	mov ah, bl				; retrieve al
0458+  07BF 19 00       	mov al, 0
0459+  07C1 05 03       	syscall sys_io				; display AL
0460+  07C3             
0461+  07C3 EA          	pop bl
0462+  07C4 07 E3 05    	call itoa				; convert bh to char in A
0463+  07C7 2F          	mov bl, al				; save al
0464+  07C8 19 00       	mov al, 0
0465+  07CA 05 03       	syscall sys_io				; display AH
0466+  07CC 24          	mov ah, bl				; retrieve al
0467+  07CD 19 00       	mov al, 0
0468+  07CF 05 03       	syscall sys_io				; display AL
0469+  07D1             
0470+  07D1 E5          	pop b
0471+  07D2 E4          	pop a
0472+  07D3 09          	ret
0473+  07D4             
0474+  07D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  07D4             ; INPUT 16BIT HEX INTEGER
0476+  07D4             ; read 16bit integer into A
0477+  07D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  07D4             scan_u16x:
0479+  07D4 F8 10 00    	enter 16
0480+  07D7 D8          	push b
0481+  07D8 DA          	push d
0482+  07D9             
0483+  07D9 FA F1 FF    	lea d, [bp + -15]
0484+  07DC 07 23 06    	call gets				; get number
0485+  07DF             
0486+  07DF 32          	mov bl, [d]
0487+  07E0 37          	mov bh, bl
0488+  07E1 33 01 00    	mov bl, [d + 1]
0489+  07E4 07 D1 05    	call atoi				; convert to int in AL
0490+  07E7 23          	mov ah, al				; move to AH
0491+  07E8             
0492+  07E8 33 02 00    	mov bl, [d + 2]
0493+  07EB 37          	mov bh, bl
0494+  07EC 33 03 00    	mov bl, [d + 3]
0495+  07EF 07 D1 05    	call atoi				; convert to int in AL
0496+  07F2             
0497+  07F2 E7          	pop d
0498+  07F3 E5          	pop b
0499+  07F4 F9          	leave
0500+  07F5 09          	ret
0501+  07F6             
0502+  07F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  07F6             ; PRINT 8bit HEX INTEGER
0504+  07F6             ; integer value in reg bl
0505+  07F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  07F6             print_u8x:
0507+  07F6 D7          	push a
0508+  07F7 DD          	push bl
0509+  07F8             
0510+  07F8 07 E3 05    	call itoa				; convert bl to char in A
0511+  07FB 2F          	mov bl, al				; save al
0512+  07FC 19 00       	mov al, 0
0513+  07FE 05 03       	syscall sys_io				; display AH
0514+  0800 24          	mov ah, bl				; retrieve al
0515+  0801 19 00       	mov al, 0
0516+  0803 05 03       	syscall sys_io				; display AL
0517+  0805             
0518+  0805 EA          	pop bl
0519+  0806 E4          	pop a
0520+  0807 09          	ret
0521+  0808             
0522+  0808             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0808             ; print 8bit decimal unsigned number
0524+  0808             ; input number in AL
0525+  0808             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0808             print_u8d:
0527+  0808 D7          	push a
0528+  0809 D8          	push b
0529+  080A             
0530+  080A 22 00       	mov ah, 0
0531+  080C 26 64 00    	mov b, 100
0532+  080F AE          	div a, b
0533+  0810 D8          	push b			; save remainder
0534+  0811 B9 00       	cmp al, 0
0535+  0813 C6 1D 08    	je skip100
0536+  0816 6A 30       	add al, $30
0537+  0818 23          	mov ah, al
0538+  0819 19 00       	mov al, 0
0539+  081B 05 03       	syscall sys_io	; print coeff
0540+  081D             skip100:
0541+  081D E4          	pop a
0542+  081E 22 00       	mov ah, 0
0543+  0820 26 0A 00    	mov b, 10
0544+  0823 AE          	div a, b
0545+  0824 D8          	push b			; save remainder
0546+  0825 B9 00       	cmp al, 0
0547+  0827 C6 31 08    	je skip10
0548+  082A 6A 30       	add al, $30
0549+  082C 23          	mov ah, al
0550+  082D 19 00       	mov al, 0
0551+  082F 05 03       	syscall sys_io	; print coeff
0552+  0831             skip10:
0553+  0831 E4          	pop a
0554+  0832 1B          	mov al, bl
0555+  0833 6A 30       	add al, $30
0556+  0835 23          	mov ah, al
0557+  0836 19 00       	mov al, 0
0558+  0838 05 03       	syscall sys_io	; print coeff
0559+  083A E5          	pop b
0560+  083B E4          	pop a
0561+  083C 09          	ret
0562+  083D             
0563+  083D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  083D             ; INPUT 8BIT HEX INTEGER
0565+  083D             ; read 8bit integer into AL
0566+  083D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  083D             scan_u8x:
0568+  083D F8 04 00    	enter 4
0569+  0840 D8          	push b
0570+  0841 DA          	push d
0571+  0842             
0572+  0842 FA FD FF    	lea d, [bp + -3]
0573+  0845 07 23 06    	call gets				; get number
0574+  0848             
0575+  0848 32          	mov bl, [d]
0576+  0849 37          	mov bh, bl
0577+  084A 33 01 00    	mov bl, [d + 1]
0578+  084D 07 D1 05    	call atoi				; convert to int in AL
0579+  0850             
0580+  0850 E7          	pop d
0581+  0851 E5          	pop b
0582+  0852 F9          	leave
0583+  0853 09          	ret
0584+  0854             
0585+  0854             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  0854             ; input decimal number
0587+  0854             ; result in A
0588+  0854             ; 655'\0'
0589+  0854             ; low--------high
0590+  0854             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  0854             scan_u16d:
0592+  0854 F8 08 00    	enter 8
0593+  0857 E2          	push si
0594+  0858 D8          	push b
0595+  0859 D9          	push c
0596+  085A DA          	push d
0597+  085B FA F9 FF    	lea d, [bp +- 7]
0598+  085E 07 23 06    	call gets
0599+  0861 07 59 05    	call strlen			; get string length in C
0600+  0864 7E          	dec c
0601+  0865 FD 4E       	mov si, d
0602+  0867 12          	mov a, c
0603+  0868 FD 99       	shl a
0604+  086A 3B B9 05    	mov d, table_power
0605+  086D 59          	add d, a
0606+  086E 38 00 00    	mov c, 0
0607+  0871             mul_loop:
0608+  0871 F6          	lodsb			; load ASCII to al
0609+  0872 B9 00       	cmp al, 0
0610+  0874 C6 87 08    	je mul_exit
0611+  0877 6F 30       	sub al, $30		; make into integer
0612+  0879 22 00       	mov ah, 0
0613+  087B 2A          	mov b, [d]
0614+  087C AC          	mul a, b			; result in B since it fits in 16bits
0615+  087D 11          	mov a, b
0616+  087E 28          	mov b, c
0617+  087F 54          	add a, b
0618+  0880 39          	mov c, a
0619+  0881 63 02 00    	sub d, 2
0620+  0884 0A 71 08    	jmp mul_loop
0621+  0887             mul_exit:
0622+  0887 12          	mov a, c
0623+  0888 E7          	pop d
0624+  0889 E6          	pop c
0625+  088A E5          	pop b
0626+  088B EF          	pop si
0627+  088C F9          	leave
0628+  088D 09          	ret
0167   088E             ; --- end include block
0168   088E             
0169   088E             .end
tasm: Number of errors = 0
