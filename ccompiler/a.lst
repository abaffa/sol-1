0001   0000             ; --- Filename: test.c
0002   0000             
0003   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0004   0000             
0005   0400             .org PROC_TEXT_ORG
0006   0400             
0007   0400             ; --- begin text block
0008   0400             main:
0009   0400             ; --- begin inline asm block
0010   0400 07 4C 07      call scan_u16d
0011   0403 05 00         syscall sys_bkpt
0012   0405 07 77 06      call print_u16d
0013   0408 05 0B         syscall sys_terminate_proc
0014   040A             ; --- end inline asm block
0015   040A             ; --- end text block
0016   040A             
0017   040A             ; --- begin data block
0018   040A             ; --- end data block
0019   040A             ; --- begin include block
0020   040A             .include "lib/stdio.asm"
0001+  040A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  040A             ; stdio.s
0003+  040A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  040A             .include "lib/string.asm"
0001++ 040A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 040A             ; string.s
0003++ 040A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 040A             
0005++ 040A             
0006++ 040A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 040A             ; strrev
0008++ 040A             ; reverse a string
0009++ 040A             ; D = string address
0010++ 040A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 040A             ; 01234
0012++ 040A             strrev:
0013++ 040A 4B          	pusha
0014++ 040B 07 51 04    	call strlen	; length in C
0015++ 040E 12          	mov a, c
0016++ 040F AF 01 00    	cmp a, 1
0017++ 0412 D0 2C 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0415 7D          	dec a
0019++ 0416 FD 4E       	mov si, d	; beginning of string
0020++ 0418 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 041A 59          	add d, a	; end of string
0022++ 041B 12          	mov a, c
0023++ 041C FD 9B       	shr a		; divide by 2
0024++ 041E 39          	mov c, a	; C now counts the steps
0025++ 041F             strrev_L0:
0026++ 041F 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0420 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0421 3E          	mov [d], al	; store left char into right side
0029++ 0422 1B          	mov al, bl
0030++ 0423 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0424 7E          	dec c
0032++ 0425 7F          	dec d
0033++ 0426 C2 00 00    	cmp c, 0
0034++ 0429 C7 1F 04    	jne strrev_L0
0035++ 042C             strrev_end:
0036++ 042C 4C          	popa
0037++ 042D 09          	ret
0038++ 042E             	
0039++ 042E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 042E             ; strchr
0041++ 042E             ; search string in D for char in AL
0042++ 042E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 042E             strchr:
0044++ 042E             strchr_L0:
0045++ 042E 32          	mov bl, [d]
0046++ 042F C1 00       	cmp bl, 0
0047++ 0431 C6 3C 04    	je strchr_end
0048++ 0434 BA          	cmp al, bl
0049++ 0435 C6 3C 04    	je strchr_end
0050++ 0438 79          	inc d
0051++ 0439 0A 2E 04    	jmp strchr_L0
0052++ 043C             strchr_end:
0053++ 043C 1B          	mov al, bl
0054++ 043D 09          	ret
0055++ 043E             
0056++ 043E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 043E             ; strstr
0058++ 043E             ; find sub-string
0059++ 043E             ; str1 in SI
0060++ 043E             ; str2 in DI
0061++ 043E             ; SI points to end of source string
0062++ 043E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 043E             strstr:
0064++ 043E DB          	push al
0065++ 043F DA          	push d
0066++ 0440 E3          	push di
0067++ 0441             strstr_loop:
0068++ 0441 F3          	cmpsb					; compare a byte of the strings
0069++ 0442 C7 4D 04    	jne strstr_ret
0070++ 0445 FC 00 00    	lea d, [di + 0]
0071++ 0448 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 044A C7 41 04    	jne strstr_loop				; equal chars but not at end
0073++ 044D             strstr_ret:
0074++ 044D F0          	pop di
0075++ 044E E7          	pop d
0076++ 044F E8          	pop al
0077++ 0450 09          	ret
0078++ 0451             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0451             ; length of null terminated string
0080++ 0451             ; result in C
0081++ 0451             ; pointer in D
0082++ 0451             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0451             strlen:
0084++ 0451 DA          	push d
0085++ 0452 38 00 00    	mov c, 0
0086++ 0455             strlen_L1:
0087++ 0455 BD 00       	cmp byte [d], 0
0088++ 0457 C6 5F 04    	je strlen_ret
0089++ 045A 79          	inc d
0090++ 045B 78          	inc c
0091++ 045C 0A 55 04    	jmp strlen_L1
0092++ 045F             strlen_ret:
0093++ 045F E7          	pop d
0094++ 0460 09          	ret
0095++ 0461             
0096++ 0461             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0461             ; STRCMP
0098++ 0461             ; compare two strings
0099++ 0461             ; str1 in SI
0100++ 0461             ; str2 in DI
0101++ 0461             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0461             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0461             strcmp:
0104++ 0461 DB          	push al
0105++ 0462 DA          	push d
0106++ 0463 E3          	push di
0107++ 0464 E2          	push si
0108++ 0465             strcmp_loop:
0109++ 0465 F3          	cmpsb					; compare a byte of the strings
0110++ 0466 C7 71 04    	jne strcmp_ret
0111++ 0469 FB FF FF    	lea d, [si +- 1]
0112++ 046C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 046E C7 65 04    	jne strcmp_loop				; equal chars but not at end
0114++ 0471             strcmp_ret:
0115++ 0471 EF          	pop si
0116++ 0472 F0          	pop di
0117++ 0473 E7          	pop d
0118++ 0474 E8          	pop al
0119++ 0475 09          	ret
0120++ 0476             
0121++ 0476             
0122++ 0476             ; STRCPY
0123++ 0476             ; copy null terminated string from SI to DI
0124++ 0476             ; source in SI
0125++ 0476             ; destination in DI
0126++ 0476             strcpy:
0127++ 0476 E2          	push si
0128++ 0477 E3          	push di
0129++ 0478 DB          	push al
0130++ 0479             strcpy_L1:
0131++ 0479 F6          	lodsb
0132++ 047A F7          	stosb
0133++ 047B B9 00       	cmp al, 0
0134++ 047D C7 79 04    	jne strcpy_L1
0135++ 0480             strcpy_end:
0136++ 0480 E8          	pop al
0137++ 0481 F0          	pop di
0138++ 0482 EF          	pop si
0139++ 0483 09          	ret
0140++ 0484             
0141++ 0484             ; STRCAT
0142++ 0484             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0484             ; source in SI
0144++ 0484             ; destination in DI
0145++ 0484             strcat:
0146++ 0484 E2          	push si
0147++ 0485 E3          	push di
0148++ 0486 D7          	push a
0149++ 0487 DA          	push d
0150++ 0488 50          	mov a, di
0151++ 0489 3C          	mov d, a
0152++ 048A             strcat_goto_end_L1:
0153++ 048A BD 00       	cmp byte[d], 0
0154++ 048C C6 93 04    	je strcat_start
0155++ 048F 79          	inc d
0156++ 0490 0A 8A 04    	jmp strcat_goto_end_L1
0157++ 0493             strcat_start:
0158++ 0493 FD 50       	mov di, d
0159++ 0495             strcat_L1:
0160++ 0495 F6          	lodsb
0161++ 0496 F7          	stosb
0162++ 0497 B9 00       	cmp al, 0
0163++ 0499 C7 95 04    	jne strcat_L1
0164++ 049C             strcat_end:
0165++ 049C E7          	pop d
0166++ 049D E4          	pop a
0167++ 049E F0          	pop di
0168++ 049F EF          	pop si
0169++ 04A0 09          	ret
0005+  04A1             
0006+  04A1 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  04A5 34 35 36 37 
0006+  04A9 38 39 41 42 
0006+  04AD 43 44 45 46 
0007+  04B1             
0008+  04B1 01 00       table_power:.dw 1
0009+  04B3 0A 00       			.dw 10
0010+  04B5 64 00       			.dw 100
0011+  04B7 E8 03       			.dw 1000
0012+  04B9 10 27       			.dw 10000
0013+  04BB             
0014+  04BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  04BB             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  04BB             ; ASCII in BL
0017+  04BB             ; result in AL
0018+  04BB             ; ascii for F = 0100 0110
0019+  04BB             ; ascii for 9 = 0011 1001
0020+  04BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  04BB             hex_ascii_encode:
0022+  04BB 1B          	mov al, bl
0023+  04BC 93 40       	test al, $40				; test if letter or number
0024+  04BE C7 C4 04    	jnz hex_letter
0025+  04C1 87 0F       	and al, $0F				; get number
0026+  04C3 09          	ret
0027+  04C4             hex_letter:
0028+  04C4 87 0F       	and al, $0F				; get letter
0029+  04C6 6A 09       	add al, 9
0030+  04C8 09          	ret
0031+  04C9             
0032+  04C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  04C9             ; ATOI
0034+  04C9             ; 2 letter hex string in B
0035+  04C9             ; 8bit integer returned in AL
0036+  04C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  04C9             atoi:
0038+  04C9 D8          	push b
0039+  04CA 07 BB 04    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  04CD 30          	mov bl, bh
0041+  04CE DB          	push al					; save a
0042+  04CF 07 BB 04    	call hex_ascii_encode
0043+  04D2 EA          	pop bl	
0044+  04D3 FD 9E 04    	shl al, 4
0045+  04D6 8C          	or al, bl
0046+  04D7 E5          	pop b
0047+  04D8 09          	ret	
0048+  04D9             
0049+  04D9             
0050+  04D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04D9             ; printf
0052+  04D9             ; no need for explanations!
0053+  04D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  04D9             printf:
0055+  04D9 09          	ret
0056+  04DA             
0057+  04DA             
0058+  04DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  04DA             ; scanf
0060+  04DA             ; no need for explanations!
0061+  04DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  04DA             scanf:
0063+  04DA 09          	ret
0064+  04DB             
0065+  04DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  04DB             ; ITOA
0067+  04DB             ; 8bit value in BL
0068+  04DB             ; 2 byte ASCII result in A
0069+  04DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  04DB             itoa:
0071+  04DB DA          	push d
0072+  04DC D8          	push b
0073+  04DD A7 00       	mov bh, 0
0074+  04DF FD A4 04    	shr bl, 4	
0075+  04E2 74          	mov d, b
0076+  04E3 1F A1 04    	mov al, [d + s_hex_digits]
0077+  04E6 23          	mov ah, al
0078+  04E7             	
0079+  04E7 E5          	pop b
0080+  04E8 D8          	push b
0081+  04E9 A7 00       	mov bh, 0
0082+  04EB FD 87 0F    	and bl, $0F
0083+  04EE 74          	mov d, b
0084+  04EF 1F A1 04    	mov al, [d + s_hex_digits]
0085+  04F2 E5          	pop b
0086+  04F3 E7          	pop d
0087+  04F4 09          	ret
0088+  04F5             
0089+  04F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  04F5             ; HEX STRING TO BINARY
0091+  04F5             ; di = destination address
0092+  04F5             ; si = source
0093+  04F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  04F5             hex_to_int:
0095+  04F5             hex_to_int_L1:
0096+  04F5 F6          	lodsb					; load from [SI] to AL
0097+  04F6 B9 00       	cmp al, 0				; check if ASCII 0
0098+  04F8 C6 05 05    	jz hex_to_int_ret
0099+  04FB 36          	mov bh, al
0100+  04FC F6          	lodsb
0101+  04FD 2F          	mov bl, al
0102+  04FE 07 C9 04    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0501 F7          	stosb					; store AL to [DI]
0104+  0502 0A F5 04    	jmp hex_to_int_L1
0105+  0505             hex_to_int_ret:
0106+  0505 09          	ret		
0107+  0506             
0108+  0506             
0109+  0506             
0110+  0506             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0506             ; GETCHAR
0112+  0506             ; char in ah
0113+  0506             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0506             getchar:
0115+  0506 DB          	push al
0116+  0507             getchar_retry:
0117+  0507 FD 0C       	sti
0118+  0509 19 01       	mov al, 1
0119+  050B 05 03       	syscall sys_io			; receive in AH
0120+  050D B9 00       	cmp al, 0			; check if any char was receive
0121+  050F C6 07 05    	je getchar_retry
0122+  0512 E8          	pop al
0123+  0513 09          	ret
0124+  0514             
0125+  0514             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0514             ; PUTCHAR
0127+  0514             ; char in ah
0128+  0514             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0514             putchar:
0130+  0514 D7          	push a
0131+  0515 19 00       	mov al, 0
0132+  0517 05 03       	syscall sys_io			; char in AH
0133+  0519 E4          	pop a
0134+  051A 09          	ret
0135+  051B             
0136+  051B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  051B             ;; INPUT A STRING
0138+  051B             ;; terminates with null
0139+  051B             ;; pointer in D
0140+  051B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  051B             gets:
0142+  051B D7          	push a
0143+  051C DA          	push d
0144+  051D             gets_loop:
0145+  051D FD 0C       	sti
0146+  051F 19 01       	mov al, 1
0147+  0521 05 03       	syscall sys_io			; receive in AH
0148+  0523 B9 00       	cmp al, 0				; check error code (AL)
0149+  0525 C6 1D 05    	je gets_loop			; if no char received, retry
0150+  0528             
0151+  0528 76 1B       	cmp ah, 27
0152+  052A C6 4B 05    	je gets_telnet_escape
0153+  052D 76 0A       	cmp ah, $0A				; LF
0154+  052F C6 A4 05    	je gets_end
0155+  0532 76 0D       	cmp ah, $0D				; CR
0156+  0534 C6 A4 05    	je gets_end
0157+  0537 76 5C       	cmp ah, $5C				; '\\'
0158+  0539 C6 7B 05    	je gets_escape
0159+  053C             	
0160+  053C 76 08       	cmp ah, $08			; check for backspace
0161+  053E C6 47 05    	je gets_backspace
0162+  0541             
0163+  0541 1A          	mov al, ah
0164+  0542 3E          	mov [d], al
0165+  0543 79          	inc d
0166+  0544 0A 1D 05    	jmp gets_loop
0167+  0547             gets_backspace:
0168+  0547 7F          	dec d
0169+  0548 0A 1D 05    	jmp gets_loop
0170+  054B             gets_telnet_escape:
0171+  054B FD 0C       	sti
0172+  054D 19 01       	mov al, 1
0173+  054F 05 03       	syscall sys_io				; receive in AH without echo
0174+  0551 B9 00       	cmp al, 0					; check error code (AL)
0175+  0553 C6 4B 05    	je gets_telnet_escape		; if no char received, retry
0176+  0556 76 5B       	cmp ah, '['
0177+  0558 C7 1D 05    	jne gets_loop
0178+  055B             gets_telnet_escape_phase2:
0179+  055B FD 0C       	sti
0180+  055D 19 01       	mov al, 1
0181+  055F 05 03       	syscall sys_io					; receive in AH without echo
0182+  0561 B9 00       	cmp al, 0						; check error code (AL)
0183+  0563 C6 5B 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  0566 76 44       	cmp ah, 'D'
0185+  0568 C6 73 05    	je gets_left_arrow
0186+  056B 76 43       	cmp ah, 'C'
0187+  056D C6 77 05    	je gets_right_arrow
0188+  0570 0A 1D 05    	jmp gets_loop
0189+  0573             gets_left_arrow:
0190+  0573 7F          	dec d
0191+  0574 0A 1D 05    	jmp gets_loop
0192+  0577             gets_right_arrow:
0193+  0577 79          	inc d
0194+  0578 0A 1D 05    	jmp gets_loop
0195+  057B             gets_escape:
0196+  057B FD 0C       	sti
0197+  057D 19 01       	mov al, 1
0198+  057F 05 03       	syscall sys_io			; receive in AH
0199+  0581 B9 00       	cmp al, 0				; check error code (AL)
0200+  0583 C6 7B 05    	je gets_escape			; if no char received, retry
0201+  0586 76 6E       	cmp ah, 'n'
0202+  0588 C6 96 05    	je gets_LF
0203+  058B 76 72       	cmp ah, 'r'
0204+  058D C6 9D 05    	je gets_CR
0205+  0590 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  0591 3E          	mov [d], al
0207+  0592 79          	inc d
0208+  0593 0A 1D 05    	jmp gets_loop
0209+  0596             gets_LF:
0210+  0596 19 0A       	mov al, $0A
0211+  0598 3E          	mov [d], al
0212+  0599 79          	inc d
0213+  059A 0A 1D 05    	jmp gets_loop
0214+  059D             gets_CR:
0215+  059D 19 0D       	mov al, $0D
0216+  059F 3E          	mov [d], al
0217+  05A0 79          	inc d
0218+  05A1 0A 1D 05    	jmp gets_loop
0219+  05A4             gets_end:
0220+  05A4 19 00       	mov al, 0
0221+  05A6 3E          	mov [d], al				; terminate string
0222+  05A7 E7          	pop d
0223+  05A8 E4          	pop a
0224+  05A9 09          	ret
0225+  05AA             
0226+  05AA             
0227+  05AA             
0228+  05AA             
0229+  05AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  05AA             ;; INPUT TEXT
0231+  05AA             ;; terminated with CTRL+D
0232+  05AA             ;; pointer in D
0233+  05AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  05AA             gettxt:
0235+  05AA D7          	push a
0236+  05AB DA          	push d
0237+  05AC             gettxt_loop:
0238+  05AC 19 01       	mov al, 1
0239+  05AE 05 03       	syscall sys_io			; receive in AH
0240+  05B0 B9 00       	cmp al, 0				; check error code (AL)
0241+  05B2 C6 AC 05    	je gettxt_loop		; if no char received, retry
0242+  05B5 76 04       	cmp ah, 4			; EOT
0243+  05B7 C6 F5 05    	je gettxt_end
0244+  05BA 76 08       	cmp ah, $08			; check for backspace
0245+  05BC C6 F1 05    	je gettxt_backspace
0246+  05BF 76 5C       	cmp ah, $5C				; '\\'
0247+  05C1 C6 CA 05    	je gettxt_escape
0248+  05C4 1A          	mov al, ah
0249+  05C5 3E          	mov [d], al
0250+  05C6 79          	inc d
0251+  05C7 0A AC 05    	jmp gettxt_loop
0252+  05CA             gettxt_escape:
0253+  05CA 19 01       	mov al, 1
0254+  05CC 05 03       	syscall sys_io			; receive in AH
0255+  05CE B9 00       	cmp al, 0				; check error code (AL)
0256+  05D0 C6 CA 05    	je gettxt_escape		; if no char received, retry
0257+  05D3 76 6E       	cmp ah, 'n'
0258+  05D5 C6 E3 05    	je gettxt_LF
0259+  05D8 76 72       	cmp ah, 'r'
0260+  05DA C6 EA 05    	je gettxt_CR
0261+  05DD 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  05DE 3E          	mov [d], al
0263+  05DF 79          	inc d
0264+  05E0 0A AC 05    	jmp gettxt_loop
0265+  05E3             gettxt_LF:
0266+  05E3 19 0A       	mov al, $0A
0267+  05E5 3E          	mov [d], al
0268+  05E6 79          	inc d
0269+  05E7 0A AC 05    	jmp gettxt_loop
0270+  05EA             gettxt_CR:
0271+  05EA 19 0D       	mov al, $0D
0272+  05EC 3E          	mov [d], al
0273+  05ED 79          	inc d
0274+  05EE 0A AC 05    	jmp gettxt_loop
0275+  05F1             gettxt_backspace:
0276+  05F1 7F          	dec d
0277+  05F2 0A AC 05    	jmp gettxt_loop
0278+  05F5             gettxt_end:
0279+  05F5 19 00       	mov al, 0
0280+  05F7 3E          	mov [d], al				; terminate string
0281+  05F8 E7          	pop d
0282+  05F9 E4          	pop a
0283+  05FA 09          	ret
0284+  05FB             
0285+  05FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  05FB             ; PRINT NEW LINE
0287+  05FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  05FB             printnl:
0289+  05FB D7          	push a
0290+  05FC 10 00 0A    	mov a, $0A00
0291+  05FF 05 03       	syscall sys_io
0292+  0601 10 00 0D    	mov a, $0D00
0293+  0604 05 03       	syscall sys_io
0294+  0606 E4          	pop a
0295+  0607 09          	ret
0296+  0608             
0297+  0608             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  0608             ; strtoint
0299+  0608             ; 4 digit hex string number in d
0300+  0608             ; integer returned in A
0301+  0608             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  0608             strtointx:
0303+  0608 D8          	push b
0304+  0609 32          	mov bl, [d]
0305+  060A 37          	mov bh, bl
0306+  060B 33 01 00    	mov bl, [d + 1]
0307+  060E 07 C9 04    	call atoi				; convert to int in AL
0308+  0611 23          	mov ah, al				; move to AH
0309+  0612 33 02 00    	mov bl, [d + 2]
0310+  0615 37          	mov bh, bl
0311+  0616 33 03 00    	mov bl, [d + 3]
0312+  0619 07 C9 04    	call atoi				; convert to int in AL
0313+  061C E5          	pop b
0314+  061D 09          	ret
0315+  061E             
0316+  061E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  061E             ; strtoint
0318+  061E             ; 5 digit base10 string number in d
0319+  061E             ; integer returned in A
0320+  061E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  061E             strtoint:
0322+  061E E2          	push si
0323+  061F D8          	push b
0324+  0620 D9          	push c
0325+  0621 DA          	push d
0326+  0622 07 51 04    	call strlen			; get string length in C
0327+  0625 7E          	dec c
0328+  0626 FD 4E       	mov si, d
0329+  0628 12          	mov a, c
0330+  0629 FD 99       	shl a
0331+  062B 3B B1 04    	mov d, table_power
0332+  062E 59          	add d, a
0333+  062F 38 00 00    	mov c, 0
0334+  0632             strtoint_L0:
0335+  0632 F6          	lodsb			; load ASCII to al
0336+  0633 B9 00       	cmp al, 0
0337+  0635 C6 48 06    	je strtoint_end
0338+  0638 6F 30       	sub al, $30		; make into integer
0339+  063A 22 00       	mov ah, 0
0340+  063C 2A          	mov b, [d]
0341+  063D AC          	mul a, b			; result in B since it fits in 16bits
0342+  063E 11          	mov a, b
0343+  063F 28          	mov b, c
0344+  0640 54          	add a, b
0345+  0641 39          	mov c, a
0346+  0642 63 02 00    	sub d, 2
0347+  0645 0A 32 06    	jmp strtoint_L0
0348+  0648             strtoint_end:
0349+  0648 12          	mov a, c
0350+  0649 E7          	pop d
0351+  064A E6          	pop c
0352+  064B E5          	pop b
0353+  064C EF          	pop si
0354+  064D 09          	ret
0355+  064E             
0356+  064E             
0357+  064E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  064E             ; PRINT NULL TERMINATED STRING
0359+  064E             ; pointer in D
0360+  064E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  064E             puts:
0362+  064E D7          	push a
0363+  064F DA          	push d
0364+  0650             puts_L1:
0365+  0650 1E          	mov al, [d]
0366+  0651 B9 00       	cmp al, 0
0367+  0653 C6 5F 06    	jz puts_END
0368+  0656 23          	mov ah, al
0369+  0657 19 00       	mov al, 0
0370+  0659 05 03       	syscall sys_io
0371+  065B 79          	inc d
0372+  065C 0A 50 06    	jmp puts_L1
0373+  065F             puts_END:
0374+  065F E7          	pop d
0375+  0660 E4          	pop a
0376+  0661 09          	ret
0377+  0662             
0378+  0662             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0662             ; PRINT N SIZE STRING
0380+  0662             ; pointer in D
0381+  0662             ; size in C
0382+  0662             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  0662             putsn:
0384+  0662 DB          	push al
0385+  0663 DA          	push d
0386+  0664 D9          	push c
0387+  0665             putsn_L0:
0388+  0665 1E          	mov al, [d]
0389+  0666 23          	mov ah, al
0390+  0667 19 00       	mov al, 0
0391+  0669 05 03       	syscall sys_io
0392+  066B 79          	inc d
0393+  066C 7E          	dec c	
0394+  066D C2 00 00    	cmp c, 0
0395+  0670 C7 65 06    	jne putsn_L0
0396+  0673             putsn_end:
0397+  0673 E6          	pop c
0398+  0674 E7          	pop d
0399+  0675 E8          	pop al
0400+  0676 09          	ret
0401+  0677             
0402+  0677             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  0677             ; print 16bit decimal number
0404+  0677             ; input number in A
0405+  0677             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  0677             print_u16d:
0407+  0677 D7          	push a
0408+  0678 D8          	push b
0409+  0679 26 10 27    	mov b, 10000
0410+  067C AE          	div a, b			; get 10000 coeff.
0411+  067D 07 A3 06    	call print_number
0412+  0680 11          	mov a, b
0413+  0681 26 E8 03    	mov b, 1000
0414+  0684 AE          	div a, b			; get 10000 coeff.
0415+  0685 07 A3 06    	call print_number
0416+  0688 11          	mov a, b
0417+  0689 26 64 00    	mov b, 100
0418+  068C AE          	div a, b
0419+  068D 07 A3 06    	call print_number
0420+  0690 11          	mov a, b
0421+  0691 26 0A 00    	mov b, 10
0422+  0694 AE          	div a, b
0423+  0695 07 A3 06    	call print_number
0424+  0698 11          	mov a, b
0425+  0699 6A 30       	add al, $30
0426+  069B 23          	mov ah, al
0427+  069C 19 00       	mov al, 0
0428+  069E 05 03       	syscall sys_io	; print coeff
0429+  06A0 E5          	pop b
0430+  06A1 E4          	pop a
0431+  06A2 09          	ret
0432+  06A3             
0433+  06A3             
0434+  06A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  06A3             ; if A == 0, print space
0436+  06A3             ; else print A
0437+  06A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  06A3             print_number:
0439+  06A3 6A 30       	add al, $30
0440+  06A5 23          	mov ah, al
0441+  06A6 07 14 05    	call putchar
0442+  06A9 09          	ret
0443+  06AA             
0444+  06AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06AA             ; PRINT 16BIT HEX INTEGER
0446+  06AA             ; integer value in reg B
0447+  06AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06AA             print_u16x:
0449+  06AA D7          	push a
0450+  06AB D8          	push b
0451+  06AC DD          	push bl
0452+  06AD 30          	mov bl, bh
0453+  06AE 07 DB 04    	call itoa				; convert bh to char in A
0454+  06B1 2F          	mov bl, al				; save al
0455+  06B2 19 00       	mov al, 0
0456+  06B4 05 03       	syscall sys_io				; display AH
0457+  06B6 24          	mov ah, bl				; retrieve al
0458+  06B7 19 00       	mov al, 0
0459+  06B9 05 03       	syscall sys_io				; display AL
0460+  06BB             
0461+  06BB EA          	pop bl
0462+  06BC 07 DB 04    	call itoa				; convert bh to char in A
0463+  06BF 2F          	mov bl, al				; save al
0464+  06C0 19 00       	mov al, 0
0465+  06C2 05 03       	syscall sys_io				; display AH
0466+  06C4 24          	mov ah, bl				; retrieve al
0467+  06C5 19 00       	mov al, 0
0468+  06C7 05 03       	syscall sys_io				; display AL
0469+  06C9             
0470+  06C9 E5          	pop b
0471+  06CA E4          	pop a
0472+  06CB 09          	ret
0473+  06CC             
0474+  06CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  06CC             ; INPUT 16BIT HEX INTEGER
0476+  06CC             ; read 16bit integer into A
0477+  06CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  06CC             scan_u16x:
0479+  06CC F8 10 00    	enter 16
0480+  06CF D8          	push b
0481+  06D0 DA          	push d
0482+  06D1             
0483+  06D1 FA F1 FF    	lea d, [bp + -15]
0484+  06D4 07 1B 05    	call gets				; get number
0485+  06D7             
0486+  06D7 32          	mov bl, [d]
0487+  06D8 37          	mov bh, bl
0488+  06D9 33 01 00    	mov bl, [d + 1]
0489+  06DC 07 C9 04    	call atoi				; convert to int in AL
0490+  06DF 23          	mov ah, al				; move to AH
0491+  06E0             
0492+  06E0 33 02 00    	mov bl, [d + 2]
0493+  06E3 37          	mov bh, bl
0494+  06E4 33 03 00    	mov bl, [d + 3]
0495+  06E7 07 C9 04    	call atoi				; convert to int in AL
0496+  06EA             
0497+  06EA E7          	pop d
0498+  06EB E5          	pop b
0499+  06EC F9          	leave
0500+  06ED 09          	ret
0501+  06EE             
0502+  06EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  06EE             ; PRINT 8bit HEX INTEGER
0504+  06EE             ; integer value in reg bl
0505+  06EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  06EE             print_u8x:
0507+  06EE D7          	push a
0508+  06EF DD          	push bl
0509+  06F0             
0510+  06F0 07 DB 04    	call itoa				; convert bl to char in A
0511+  06F3 2F          	mov bl, al				; save al
0512+  06F4 19 00       	mov al, 0
0513+  06F6 05 03       	syscall sys_io				; display AH
0514+  06F8 24          	mov ah, bl				; retrieve al
0515+  06F9 19 00       	mov al, 0
0516+  06FB 05 03       	syscall sys_io				; display AL
0517+  06FD             
0518+  06FD EA          	pop bl
0519+  06FE E4          	pop a
0520+  06FF 09          	ret
0521+  0700             
0522+  0700             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0700             ; print 8bit decimal unsigned number
0524+  0700             ; input number in AL
0525+  0700             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0700             print_u8d:
0527+  0700 D7          	push a
0528+  0701 D8          	push b
0529+  0702             
0530+  0702 22 00       	mov ah, 0
0531+  0704 26 64 00    	mov b, 100
0532+  0707 AE          	div a, b
0533+  0708 D8          	push b			; save remainder
0534+  0709 B9 00       	cmp al, 0
0535+  070B C6 15 07    	je skip100
0536+  070E 6A 30       	add al, $30
0537+  0710 23          	mov ah, al
0538+  0711 19 00       	mov al, 0
0539+  0713 05 03       	syscall sys_io	; print coeff
0540+  0715             skip100:
0541+  0715 E4          	pop a
0542+  0716 22 00       	mov ah, 0
0543+  0718 26 0A 00    	mov b, 10
0544+  071B AE          	div a, b
0545+  071C D8          	push b			; save remainder
0546+  071D B9 00       	cmp al, 0
0547+  071F C6 29 07    	je skip10
0548+  0722 6A 30       	add al, $30
0549+  0724 23          	mov ah, al
0550+  0725 19 00       	mov al, 0
0551+  0727 05 03       	syscall sys_io	; print coeff
0552+  0729             skip10:
0553+  0729 E4          	pop a
0554+  072A 1B          	mov al, bl
0555+  072B 6A 30       	add al, $30
0556+  072D 23          	mov ah, al
0557+  072E 19 00       	mov al, 0
0558+  0730 05 03       	syscall sys_io	; print coeff
0559+  0732 E5          	pop b
0560+  0733 E4          	pop a
0561+  0734 09          	ret
0562+  0735             
0563+  0735             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  0735             ; INPUT 8BIT HEX INTEGER
0565+  0735             ; read 8bit integer into AL
0566+  0735             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  0735             scan_u8x:
0568+  0735 F8 04 00    	enter 4
0569+  0738 D8          	push b
0570+  0739 DA          	push d
0571+  073A             
0572+  073A FA FD FF    	lea d, [bp + -3]
0573+  073D 07 1B 05    	call gets				; get number
0574+  0740             
0575+  0740 32          	mov bl, [d]
0576+  0741 37          	mov bh, bl
0577+  0742 33 01 00    	mov bl, [d + 1]
0578+  0745 07 C9 04    	call atoi				; convert to int in AL
0579+  0748             
0580+  0748 E7          	pop d
0581+  0749 E5          	pop b
0582+  074A F9          	leave
0583+  074B 09          	ret
0584+  074C             
0585+  074C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  074C             ; input decimal number
0587+  074C             ; result in A
0588+  074C             ; 655'\0'
0589+  074C             ; low--------high
0590+  074C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  074C             scan_u16d:
0592+  074C F8 08 00    	enter 8
0593+  074F E2          	push si
0594+  0750 D8          	push b
0595+  0751 D9          	push c
0596+  0752 DA          	push d
0597+  0753 FA F9 FF    	lea d, [bp +- 7]
0598+  0756 07 1B 05    	call gets
0599+  0759 07 51 04    	call strlen			; get string length in C
0600+  075C 7E          	dec c
0601+  075D FD 4E       	mov si, d
0602+  075F 12          	mov a, c
0603+  0760 FD 99       	shl a
0604+  0762 3B B1 04    	mov d, table_power
0605+  0765 59          	add d, a
0606+  0766 38 00 00    	mov c, 0
0607+  0769             mul_loop:
0608+  0769 F6          	lodsb			; load ASCII to al
0609+  076A B9 00       	cmp al, 0
0610+  076C C6 7F 07    	je mul_exit
0611+  076F 6F 30       	sub al, $30		; make into integer
0612+  0771 22 00       	mov ah, 0
0613+  0773 2A          	mov b, [d]
0614+  0774 AC          	mul a, b			; result in B since it fits in 16bits
0615+  0775 11          	mov a, b
0616+  0776 28          	mov b, c
0617+  0777 54          	add a, b
0618+  0778 39          	mov c, a
0619+  0779 63 02 00    	sub d, 2
0620+  077C 0A 69 07    	jmp mul_loop
0621+  077F             mul_exit:
0622+  077F 12          	mov a, c
0623+  0780 E7          	pop d
0624+  0781 E6          	pop c
0625+  0782 E5          	pop b
0626+  0783 EF          	pop si
0627+  0784 F9          	leave
0628+  0785 09          	ret
0021   0786             ; --- end include block
0022   0786             
0023   0786             .end
tasm: Number of errors = 0
