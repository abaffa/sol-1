0001   0000             ; --- FILENAME: life.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 52 02 00      sub sp, 2 ; j
0012   0408 52 02 00      sub sp, 2 ; n
0013   040B             _for1_init:
0014   040B 26 00 00      mov b, 0
0015   040E D7            push a
0016   040F 11            mov a, b
0017   0410 45 FF FF      mov [bp + -1], a ; i
0018   0413 E4            pop a
0019   0414             _for1_cond:
0020   0414 2C FF FF      mov b, [bp + -1] ; i
0021   0417 D7            push a
0022   0418 11            mov a, b
0023   0419 29 85 0A      mov b, [__SIZE] ; SIZE
0024   041C B0            cmp a, b
0025   041D 0E            lodflgs
0026   041E 2F            mov bl, al
0027   041F FD A2 03      shr al, 3
0028   0422 FD A4 02      shr bl, 2
0029   0425 FD 87 01      and bl, %00000001
0030   0428 90            xor al, bl ; < (signed)
0031   0429 22 00         mov ah, 0
0032   042B 27            mov b, a
0033   042C E4            pop a
0034   042D C0 00 00      cmp b, 0
0035   0430 C6 BA 04      je _for1_exit
0036   0433             _for1_block:
0037   0433             _for2_init:
0038   0433 26 00 00      mov b, 0
0039   0436 D7            push a
0040   0437 11            mov a, b
0041   0438 45 FD FF      mov [bp + -3], a ; j
0042   043B E4            pop a
0043   043C             _for2_cond:
0044   043C 2C FD FF      mov b, [bp + -3] ; j
0045   043F D7            push a
0046   0440 11            mov a, b
0047   0441 29 85 0A      mov b, [__SIZE] ; SIZE
0048   0444 B0            cmp a, b
0049   0445 0E            lodflgs
0050   0446 2F            mov bl, al
0051   0447 FD A2 03      shr al, 3
0052   044A FD A4 02      shr bl, 2
0053   044D FD 87 01      and bl, %00000001
0054   0450 90            xor al, bl ; < (signed)
0055   0451 22 00         mov ah, 0
0056   0453 27            mov b, a
0057   0454 E4            pop a
0058   0455 C0 00 00      cmp b, 0
0059   0458 C6 A8 04      je _for2_exit
0060   045B             _for2_block:
0061   045B 29 C7 10      mov b, [__nextState] ; nextState
0062   045E D7            push a
0063   045F 74            mov d, b
0064   0460 DA            push d
0065   0461 2C FF FF      mov b, [bp + -1] ; i
0066   0464 E7            pop d
0067   0465 10 28 00      mov a, 40
0068   0468 AC            mul a, b
0069   0469 5A            add d, b
0070   046A DA            push d
0071   046B 2C FD FF      mov b, [bp + -3] ; j
0072   046E E7            pop d
0073   046F 10 01 00      mov a, 1
0074   0472 AC            mul a, b
0075   0473 5A            add d, b
0076   0474 E4            pop a
0077   0475 DA            push d
0078   0476 29 09 17      mov b, [__currState] ; currState
0079   0479 D7            push a
0080   047A 74            mov d, b
0081   047B DA            push d
0082   047C 2C FF FF      mov b, [bp + -1] ; i
0083   047F E7            pop d
0084   0480 10 28 00      mov a, 40
0085   0483 AC            mul a, b
0086   0484 5A            add d, b
0087   0485 DA            push d
0088   0486 2C FD FF      mov b, [bp + -3] ; j
0089   0489 E7            pop d
0090   048A 10 01 00      mov a, 1
0091   048D AC            mul a, b
0092   048E 5A            add d, b
0093   048F E4            pop a
0094   0490 32            mov bl, [d]
0095   0491 A7 00         mov bh, 0
0096   0493 E7            pop d
0097   0494 FD 3E         mov [d], bl
0098   0496             _for2_update:
0099   0496 2C FD FF      mov b, [bp + -3] ; j
0100   0499 D7            push a
0101   049A 11            mov a, b
0102   049B FD 77         inc b
0103   049D D7            push a
0104   049E 11            mov a, b
0105   049F 45 FD FF      mov [bp + -3], a ; j
0106   04A2 E4            pop a
0107   04A3 27            mov b, a
0108   04A4 E4            pop a
0109   04A5 0A 3C 04      jmp _for2_cond
0110   04A8             _for2_exit:
0111   04A8             _for1_update:
0112   04A8 2C FF FF      mov b, [bp + -1] ; i
0113   04AB D7            push a
0114   04AC 11            mov a, b
0115   04AD FD 77         inc b
0116   04AF D7            push a
0117   04B0 11            mov a, b
0118   04B1 45 FF FF      mov [bp + -1], a ; i
0119   04B4 E4            pop a
0120   04B5 27            mov b, a
0121   04B6 E4            pop a
0122   04B7 0A 14 04      jmp _for1_cond
0123   04BA             _for1_exit:
0124   04BA             _for3_init:
0125   04BA             _for3_cond:
0126   04BA             _for3_block:
0127   04BA             _for4_init:
0128   04BA 26 01 00      mov b, 1
0129   04BD D7            push a
0130   04BE 11            mov a, b
0131   04BF 45 FF FF      mov [bp + -1], a ; i
0132   04C2 E4            pop a
0133   04C3             _for4_cond:
0134   04C3 2C FF FF      mov b, [bp + -1] ; i
0135   04C6 D7            push a
0136   04C7 11            mov a, b
0137   04C8 29 85 0A      mov b, [__SIZE] ; SIZE
0138   04CB D7            push a
0139   04CC 11            mov a, b
0140   04CD 26 01 00      mov b, 1
0141   04D0 FD 97         neg b
0142   04D2 54            add a, b
0143   04D3 27            mov b, a
0144   04D4 E4            pop a
0145   04D5 B0            cmp a, b
0146   04D6 0E            lodflgs
0147   04D7 2F            mov bl, al
0148   04D8 FD A2 03      shr al, 3
0149   04DB FD A4 02      shr bl, 2
0150   04DE FD 87 01      and bl, %00000001
0151   04E1 90            xor al, bl ; < (signed)
0152   04E2 22 00         mov ah, 0
0153   04E4 27            mov b, a
0154   04E5 E4            pop a
0155   04E6 C0 00 00      cmp b, 0
0156   04E9 C6 FF 05      je _for4_exit
0157   04EC             _for4_block:
0158   04EC             _for5_init:
0159   04EC 26 01 00      mov b, 1
0160   04EF D7            push a
0161   04F0 11            mov a, b
0162   04F1 45 FD FF      mov [bp + -3], a ; j
0163   04F4 E4            pop a
0164   04F5             _for5_cond:
0165   04F5 2C FD FF      mov b, [bp + -3] ; j
0166   04F8 D7            push a
0167   04F9 11            mov a, b
0168   04FA 29 85 0A      mov b, [__SIZE] ; SIZE
0169   04FD D7            push a
0170   04FE 11            mov a, b
0171   04FF 26 01 00      mov b, 1
0172   0502 FD 97         neg b
0173   0504 54            add a, b
0174   0505 27            mov b, a
0175   0506 E4            pop a
0176   0507 B0            cmp a, b
0177   0508 0E            lodflgs
0178   0509 2F            mov bl, al
0179   050A FD A2 03      shr al, 3
0180   050D FD A4 02      shr bl, 2
0181   0510 FD 87 01      and bl, %00000001
0182   0513 90            xor al, bl ; < (signed)
0183   0514 22 00         mov ah, 0
0184   0516 27            mov b, a
0185   0517 E4            pop a
0186   0518 C0 00 00      cmp b, 0
0187   051B C6 ED 05      je _for5_exit
0188   051E             _for5_block:
0189   051E 2C FF FF      mov b, [bp + -1] ; i
0190   0521 FD AB         swp b
0191   0523 D8            push b
0192   0524 2C FD FF      mov b, [bp + -3] ; j
0193   0527 FD AB         swp b
0194   0529 D8            push b
0195   052A 07 E0 07      call neighbours
0196   052D 51 04 00      add sp, 4
0197   0530 D7            push a
0198   0531 11            mov a, b
0199   0532 45 FB FF      mov [bp + -5], a ; n
0200   0535 E4            pop a
0201   0536             _if6_cond:
0202   0536 2C FB FF      mov b, [bp + -5] ; n
0203   0539 D7            push a
0204   053A 11            mov a, b
0205   053B 26 02 00      mov b, 2
0206   053E B0            cmp a, b
0207   053F 0E            lodflgs
0208   0540 2F            mov bl, al
0209   0541 FD A2 03      shr al, 3
0210   0544 FD A4 02      shr bl, 2
0211   0547 FD 87 01      and bl, %00000001
0212   054A 90            xor al, bl ; < (signed)
0213   054B 22 00         mov ah, 0
0214   054D 27            mov b, a
0215   054E E4            pop a
0216   054F D7            push a
0217   0550 11            mov a, b
0218   0551 2C FB FF      mov b, [bp + -5] ; n
0219   0554 D7            push a
0220   0555 11            mov a, b
0221   0556 26 03 00      mov b, 3
0222   0559 B0            cmp a, b
0223   055A 0E            lodflgs
0224   055B 2F            mov bl, al
0225   055C FD 78         mov g, a
0226   055E FD A2 03      shr al, 3
0227   0561 FD A4 02      shr bl, 2
0228   0564 FD 87 01      and bl, %00000001
0229   0567 90            xor al, bl
0230   0568 FD 27         mov b, g
0231   056A FD 87 01      and bl, %00000001
0232   056D 8C            or al, bl
0233   056E 8F 01         xor al, %00000001 ; > (signed)
0234   0570 22 00         mov ah, 0
0235   0572 27            mov b, a
0236   0573 E4            pop a
0237   0574 8A            or a, b
0238   0575 27            mov b, a
0239   0576 E4            pop a
0240   0577 C0 00 00      cmp b, 0
0241   057A C6 A1 05      je _if6_else
0242   057D             _if6_true:
0243   057D 29 C7 10      mov b, [__nextState] ; nextState
0244   0580 D7            push a
0245   0581 74            mov d, b
0246   0582 DA            push d
0247   0583 2C FF FF      mov b, [bp + -1] ; i
0248   0586 E7            pop d
0249   0587 10 28 00      mov a, 40
0250   058A AC            mul a, b
0251   058B 5A            add d, b
0252   058C DA            push d
0253   058D 2C FD FF      mov b, [bp + -3] ; j
0254   0590 E7            pop d
0255   0591 10 01 00      mov a, 1
0256   0594 AC            mul a, b
0257   0595 5A            add d, b
0258   0596 E4            pop a
0259   0597 DA            push d
0260   0598 26 20 00      mov b, ' '
0261   059B E7            pop d
0262   059C FD 3E         mov [d], bl
0263   059E 0A DB 05      jmp _if6_exit
0264   05A1             _if6_else:
0265   05A1             _if7_cond:
0266   05A1 2C FB FF      mov b, [bp + -5] ; n
0267   05A4 D7            push a
0268   05A5 11            mov a, b
0269   05A6 26 03 00      mov b, 3
0270   05A9 B0            cmp a, b
0271   05AA 0E            lodflgs
0272   05AB 87 01         and al, %00000001 ; ==
0273   05AD 22 00         mov ah, 0
0274   05AF 27            mov b, a
0275   05B0 E4            pop a
0276   05B1 C0 00 00      cmp b, 0
0277   05B4 C6 DB 05      je _if7_exit
0278   05B7             _if7_true:
0279   05B7 29 C7 10      mov b, [__nextState] ; nextState
0280   05BA D7            push a
0281   05BB 74            mov d, b
0282   05BC DA            push d
0283   05BD 2C FF FF      mov b, [bp + -1] ; i
0284   05C0 E7            pop d
0285   05C1 10 28 00      mov a, 40
0286   05C4 AC            mul a, b
0287   05C5 5A            add d, b
0288   05C6 DA            push d
0289   05C7 2C FD FF      mov b, [bp + -3] ; j
0290   05CA E7            pop d
0291   05CB 10 01 00      mov a, 1
0292   05CE AC            mul a, b
0293   05CF 5A            add d, b
0294   05D0 E4            pop a
0295   05D1 DA            push d
0296   05D2 26 40 00      mov b, '@'
0297   05D5 E7            pop d
0298   05D6 FD 3E         mov [d], bl
0299   05D8 0A DB 05      jmp _if7_exit
0300   05DB             _if7_exit:
0301   05DB             _if6_exit:
0302   05DB             _for5_update:
0303   05DB 2C FD FF      mov b, [bp + -3] ; j
0304   05DE D7            push a
0305   05DF 11            mov a, b
0306   05E0 FD 77         inc b
0307   05E2 D7            push a
0308   05E3 11            mov a, b
0309   05E4 45 FD FF      mov [bp + -3], a ; j
0310   05E7 E4            pop a
0311   05E8 27            mov b, a
0312   05E9 E4            pop a
0313   05EA 0A F5 04      jmp _for5_cond
0314   05ED             _for5_exit:
0315   05ED             _for4_update:
0316   05ED 2C FF FF      mov b, [bp + -1] ; i
0317   05F0 D7            push a
0318   05F1 11            mov a, b
0319   05F2 FD 77         inc b
0320   05F4 D7            push a
0321   05F5 11            mov a, b
0322   05F6 45 FF FF      mov [bp + -1], a ; i
0323   05F9 E4            pop a
0324   05FA 27            mov b, a
0325   05FB E4            pop a
0326   05FC 0A C3 04      jmp _for4_cond
0327   05FF             _for4_exit:
0328   05FF             _for8_init:
0329   05FF 26 01 00      mov b, 1
0330   0602 D7            push a
0331   0603 11            mov a, b
0332   0604 45 FF FF      mov [bp + -1], a ; i
0333   0607 E4            pop a
0334   0608             _for8_cond:
0335   0608 2C FF FF      mov b, [bp + -1] ; i
0336   060B D7            push a
0337   060C 11            mov a, b
0338   060D 29 85 0A      mov b, [__SIZE] ; SIZE
0339   0610 D7            push a
0340   0611 11            mov a, b
0341   0612 26 01 00      mov b, 1
0342   0615 FD 97         neg b
0343   0617 54            add a, b
0344   0618 27            mov b, a
0345   0619 E4            pop a
0346   061A B0            cmp a, b
0347   061B 0E            lodflgs
0348   061C 2F            mov bl, al
0349   061D FD A2 03      shr al, 3
0350   0620 FD A4 02      shr bl, 2
0351   0623 FD 87 01      and bl, %00000001
0352   0626 90            xor al, bl ; < (signed)
0353   0627 22 00         mov ah, 0
0354   0629 27            mov b, a
0355   062A E4            pop a
0356   062B C0 00 00      cmp b, 0
0357   062E C6 C2 06      je _for8_exit
0358   0631             _for8_block:
0359   0631             _for9_init:
0360   0631 26 01 00      mov b, 1
0361   0634 D7            push a
0362   0635 11            mov a, b
0363   0636 45 FD FF      mov [bp + -3], a ; j
0364   0639 E4            pop a
0365   063A             _for9_cond:
0366   063A 2C FD FF      mov b, [bp + -3] ; j
0367   063D D7            push a
0368   063E 11            mov a, b
0369   063F 29 85 0A      mov b, [__SIZE] ; SIZE
0370   0642 D7            push a
0371   0643 11            mov a, b
0372   0644 26 01 00      mov b, 1
0373   0647 FD 97         neg b
0374   0649 54            add a, b
0375   064A 27            mov b, a
0376   064B E4            pop a
0377   064C B0            cmp a, b
0378   064D 0E            lodflgs
0379   064E 2F            mov bl, al
0380   064F FD A2 03      shr al, 3
0381   0652 FD A4 02      shr bl, 2
0382   0655 FD 87 01      and bl, %00000001
0383   0658 90            xor al, bl ; < (signed)
0384   0659 22 00         mov ah, 0
0385   065B 27            mov b, a
0386   065C E4            pop a
0387   065D C0 00 00      cmp b, 0
0388   0660 C6 B0 06      je _for9_exit
0389   0663             _for9_block:
0390   0663 29 09 17      mov b, [__currState] ; currState
0391   0666 D7            push a
0392   0667 74            mov d, b
0393   0668 DA            push d
0394   0669 2C FF FF      mov b, [bp + -1] ; i
0395   066C E7            pop d
0396   066D 10 28 00      mov a, 40
0397   0670 AC            mul a, b
0398   0671 5A            add d, b
0399   0672 DA            push d
0400   0673 2C FD FF      mov b, [bp + -3] ; j
0401   0676 E7            pop d
0402   0677 10 01 00      mov a, 1
0403   067A AC            mul a, b
0404   067B 5A            add d, b
0405   067C E4            pop a
0406   067D DA            push d
0407   067E 29 C7 10      mov b, [__nextState] ; nextState
0408   0681 D7            push a
0409   0682 74            mov d, b
0410   0683 DA            push d
0411   0684 2C FF FF      mov b, [bp + -1] ; i
0412   0687 E7            pop d
0413   0688 10 28 00      mov a, 40
0414   068B AC            mul a, b
0415   068C 5A            add d, b
0416   068D DA            push d
0417   068E 2C FD FF      mov b, [bp + -3] ; j
0418   0691 E7            pop d
0419   0692 10 01 00      mov a, 1
0420   0695 AC            mul a, b
0421   0696 5A            add d, b
0422   0697 E4            pop a
0423   0698 32            mov bl, [d]
0424   0699 A7 00         mov bh, 0
0425   069B E7            pop d
0426   069C FD 3E         mov [d], bl
0427   069E             _for9_update:
0428   069E 2C FD FF      mov b, [bp + -3] ; j
0429   06A1 D7            push a
0430   06A2 11            mov a, b
0431   06A3 FD 77         inc b
0432   06A5 D7            push a
0433   06A6 11            mov a, b
0434   06A7 45 FD FF      mov [bp + -3], a ; j
0435   06AA E4            pop a
0436   06AB 27            mov b, a
0437   06AC E4            pop a
0438   06AD 0A 3A 06      jmp _for9_cond
0439   06B0             _for9_exit:
0440   06B0             _for8_update:
0441   06B0 2C FF FF      mov b, [bp + -1] ; i
0442   06B3 D7            push a
0443   06B4 11            mov a, b
0444   06B5 FD 77         inc b
0445   06B7 D7            push a
0446   06B8 11            mov a, b
0447   06B9 45 FF FF      mov [bp + -1], a ; i
0448   06BC E4            pop a
0449   06BD 27            mov b, a
0450   06BE E4            pop a
0451   06BF 0A 08 06      jmp _for8_cond
0452   06C2             _for8_exit:
0453   06C2 07 CE 06      call show
0454   06C5             _for3_update:
0455   06C5 0A BA 04      jmp _for3_cond
0456   06C8             _for3_exit:
0457   06C8 26 00 00      mov b, 0
0458   06CB F9            leave
0459   06CC 05 0B         syscall sys_terminate_proc
0460   06CE             
0461   06CE             show:
0462   06CE D2            push bp
0463   06CF 9B            mov bp, sp
0464   06D0 52 02 00      sub sp, 2 ; i
0465   06D3 52 02 00      sub sp, 2 ; j
0466   06D6             _for10_init:
0467   06D6 26 00 00      mov b, 0
0468   06D9 D7            push a
0469   06DA 11            mov a, b
0470   06DB 45 FF FF      mov [bp + -1], a ; i
0471   06DE E4            pop a
0472   06DF             _for10_cond:
0473   06DF 2C FF FF      mov b, [bp + -1] ; i
0474   06E2 D7            push a
0475   06E3 11            mov a, b
0476   06E4 29 85 0A      mov b, [__SIZE] ; SIZE
0477   06E7 B0            cmp a, b
0478   06E8 0E            lodflgs
0479   06E9 2F            mov bl, al
0480   06EA FD A2 03      shr al, 3
0481   06ED FD A4 02      shr bl, 2
0482   06F0 FD 87 01      and bl, %00000001
0483   06F3 90            xor al, bl ; < (signed)
0484   06F4 22 00         mov ah, 0
0485   06F6 27            mov b, a
0486   06F7 E4            pop a
0487   06F8 C0 00 00      cmp b, 0
0488   06FB C6 9F 07      je _for10_exit
0489   06FE             _for10_block:
0490   06FE             _for11_init:
0491   06FE 26 00 00      mov b, 0
0492   0701 D7            push a
0493   0702 11            mov a, b
0494   0703 45 FD FF      mov [bp + -3], a ; j
0495   0706 E4            pop a
0496   0707             _for11_cond:
0497   0707 2C FD FF      mov b, [bp + -3] ; j
0498   070A D7            push a
0499   070B 11            mov a, b
0500   070C 29 85 0A      mov b, [__SIZE] ; SIZE
0501   070F B0            cmp a, b
0502   0710 0E            lodflgs
0503   0711 2F            mov bl, al
0504   0712 FD A2 03      shr al, 3
0505   0715 FD A4 02      shr bl, 2
0506   0718 FD 87 01      and bl, %00000001
0507   071B 90            xor al, bl ; < (signed)
0508   071C 22 00         mov ah, 0
0509   071E 27            mov b, a
0510   071F E4            pop a
0511   0720 C0 00 00      cmp b, 0
0512   0723 C6 83 07      je _for11_exit
0513   0726             _for11_block:
0514   0726             _ternary12_cond:
0515   0726 29 09 17      mov b, [__currState] ; currState
0516   0729 D7            push a
0517   072A 74            mov d, b
0518   072B DA            push d
0519   072C 2C FF FF      mov b, [bp + -1] ; i
0520   072F E7            pop d
0521   0730 10 28 00      mov a, 40
0522   0733 AC            mul a, b
0523   0734 5A            add d, b
0524   0735 DA            push d
0525   0736 2C FD FF      mov b, [bp + -3] ; j
0526   0739 E7            pop d
0527   073A 10 01 00      mov a, 1
0528   073D AC            mul a, b
0529   073E 5A            add d, b
0530   073F E4            pop a
0531   0740 32            mov bl, [d]
0532   0741 A7 00         mov bh, 0
0533   0743 D7            push a
0534   0744 11            mov a, b
0535   0745 26 40 00      mov b, '@'
0536   0748 B0            cmp a, b
0537   0749 0E            lodflgs
0538   074A 87 01         and al, %00000001 ; ==
0539   074C 22 00         mov ah, 0
0540   074E 27            mov b, a
0541   074F E4            pop a
0542   0750 C0 00 00      cmp b, 0
0543   0753 C6 65 07      je _ternary12_false
0544   0756             _ternary12_true:
0545   0756 26 0B 17      mov b, __string_0 ; "@ "
0546   0759 FD AB         swp b
0547   075B D8            push b
0548   075C 07 6F 0A      call print
0549   075F 51 02 00      add sp, 2
0550   0762 0A 71 07      jmp _ternary12_exit
0551   0765             _ternary12_false:
0552   0765 26 0E 17      mov b, __string_1 ; ". "
0553   0768 FD AB         swp b
0554   076A D8            push b
0555   076B 07 6F 0A      call print
0556   076E 51 02 00      add sp, 2
0557   0771             _ternary12_exit:
0558   0771             _for11_update:
0559   0771 2C FD FF      mov b, [bp + -3] ; j
0560   0774 D7            push a
0561   0775 11            mov a, b
0562   0776 FD 77         inc b
0563   0778 D7            push a
0564   0779 11            mov a, b
0565   077A 45 FD FF      mov [bp + -3], a ; j
0566   077D E4            pop a
0567   077E 27            mov b, a
0568   077F E4            pop a
0569   0780 0A 07 07      jmp _for11_cond
0570   0783             _for11_exit:
0571   0783 26 0A 00      mov b, 10
0572   0786 DD            push bl
0573   0787 07 7A 0A      call _putchar
0574   078A 51 01 00      add sp, 1
0575   078D             _for10_update:
0576   078D 2C FF FF      mov b, [bp + -1] ; i
0577   0790 D7            push a
0578   0791 11            mov a, b
0579   0792 FD 77         inc b
0580   0794 D7            push a
0581   0795 11            mov a, b
0582   0796 45 FF FF      mov [bp + -1], a ; i
0583   0799 E4            pop a
0584   079A 27            mov b, a
0585   079B E4            pop a
0586   079C 0A DF 06      jmp _for10_cond
0587   079F             _for10_exit:
0588   079F F9            leave
0589   07A0 09            ret
0590   07A1             
0591   07A1             alive:
0592   07A1 D2            push bp
0593   07A2 9B            mov bp, sp
0594   07A3             _if13_cond:
0595   07A3 29 09 17      mov b, [__currState] ; currState
0596   07A6 D7            push a
0597   07A7 74            mov d, b
0598   07A8 DA            push d
0599   07A9 2C 07 00      mov b, [bp + 7] ; i
0600   07AC E7            pop d
0601   07AD 10 28 00      mov a, 40
0602   07B0 AC            mul a, b
0603   07B1 5A            add d, b
0604   07B2 DA            push d
0605   07B3 2C 05 00      mov b, [bp + 5] ; j
0606   07B6 E7            pop d
0607   07B7 10 01 00      mov a, 1
0608   07BA AC            mul a, b
0609   07BB 5A            add d, b
0610   07BC E4            pop a
0611   07BD 32            mov bl, [d]
0612   07BE A7 00         mov bh, 0
0613   07C0 D7            push a
0614   07C1 11            mov a, b
0615   07C2 26 40 00      mov b, '@'
0616   07C5 B0            cmp a, b
0617   07C6 0E            lodflgs
0618   07C7 87 01         and al, %00000001 ; ==
0619   07C9 22 00         mov ah, 0
0620   07CB 27            mov b, a
0621   07CC E4            pop a
0622   07CD C0 00 00      cmp b, 0
0623   07D0 C6 DB 07      je _if13_else
0624   07D3             _if13_true:
0625   07D3 26 01 00      mov b, 1
0626   07D6 F9            leave
0627   07D7 09            ret
0628   07D8 0A E0 07      jmp _if13_exit
0629   07DB             _if13_else:
0630   07DB 26 00 00      mov b, 0
0631   07DE F9            leave
0632   07DF 09            ret
0633   07E0             _if13_exit:
0634   07E0             
0635   07E0             neighbours:
0636   07E0 D2            push bp
0637   07E1 9B            mov bp, sp
0638   07E2 52 02 00      sub sp, 2 ; count
0639   07E5 26 00 00      mov b, 0
0640   07E8 D7            push a
0641   07E9 11            mov a, b
0642   07EA 45 FF FF      mov [bp + -1], a ; count
0643   07ED E4            pop a
0644   07EE             _if14_cond:
0645   07EE 29 09 17      mov b, [__currState] ; currState
0646   07F1 D7            push a
0647   07F2 74            mov d, b
0648   07F3 DA            push d
0649   07F4 2C 07 00      mov b, [bp + 7] ; i
0650   07F7 D7            push a
0651   07F8 11            mov a, b
0652   07F9 26 01 00      mov b, 1
0653   07FC FD 97         neg b
0654   07FE 54            add a, b
0655   07FF 27            mov b, a
0656   0800 E4            pop a
0657   0801 E7            pop d
0658   0802 10 28 00      mov a, 40
0659   0805 AC            mul a, b
0660   0806 5A            add d, b
0661   0807 DA            push d
0662   0808 2C 05 00      mov b, [bp + 5] ; j
0663   080B E7            pop d
0664   080C 10 01 00      mov a, 1
0665   080F AC            mul a, b
0666   0810 5A            add d, b
0667   0811 E4            pop a
0668   0812 32            mov bl, [d]
0669   0813 A7 00         mov bh, 0
0670   0815 D7            push a
0671   0816 11            mov a, b
0672   0817 26 40 00      mov b, '@'
0673   081A B0            cmp a, b
0674   081B 0E            lodflgs
0675   081C 87 01         and al, %00000001 ; ==
0676   081E 22 00         mov ah, 0
0677   0820 27            mov b, a
0678   0821 E4            pop a
0679   0822 C0 00 00      cmp b, 0
0680   0825 C6 3A 08      je _if14_exit
0681   0828             _if14_true:
0682   0828 2C FF FF      mov b, [bp + -1] ; count
0683   082B D7            push a
0684   082C 11            mov a, b
0685   082D FD 77         inc b
0686   082F D7            push a
0687   0830 11            mov a, b
0688   0831 45 FF FF      mov [bp + -1], a ; count
0689   0834 E4            pop a
0690   0835 27            mov b, a
0691   0836 E4            pop a
0692   0837 0A 3A 08      jmp _if14_exit
0693   083A             _if14_exit:
0694   083A             _if15_cond:
0695   083A 29 09 17      mov b, [__currState] ; currState
0696   083D D7            push a
0697   083E 74            mov d, b
0698   083F DA            push d
0699   0840 2C 07 00      mov b, [bp + 7] ; i
0700   0843 D7            push a
0701   0844 11            mov a, b
0702   0845 26 01 00      mov b, 1
0703   0848 FD 97         neg b
0704   084A 54            add a, b
0705   084B 27            mov b, a
0706   084C E4            pop a
0707   084D E7            pop d
0708   084E 10 28 00      mov a, 40
0709   0851 AC            mul a, b
0710   0852 5A            add d, b
0711   0853 DA            push d
0712   0854 2C 05 00      mov b, [bp + 5] ; j
0713   0857 D7            push a
0714   0858 11            mov a, b
0715   0859 26 01 00      mov b, 1
0716   085C FD 97         neg b
0717   085E 54            add a, b
0718   085F 27            mov b, a
0719   0860 E4            pop a
0720   0861 E7            pop d
0721   0862 10 01 00      mov a, 1
0722   0865 AC            mul a, b
0723   0866 5A            add d, b
0724   0867 E4            pop a
0725   0868 32            mov bl, [d]
0726   0869 A7 00         mov bh, 0
0727   086B D7            push a
0728   086C 11            mov a, b
0729   086D 26 40 00      mov b, '@'
0730   0870 B0            cmp a, b
0731   0871 0E            lodflgs
0732   0872 87 01         and al, %00000001 ; ==
0733   0874 22 00         mov ah, 0
0734   0876 27            mov b, a
0735   0877 E4            pop a
0736   0878 C0 00 00      cmp b, 0
0737   087B C6 90 08      je _if15_exit
0738   087E             _if15_true:
0739   087E 2C FF FF      mov b, [bp + -1] ; count
0740   0881 D7            push a
0741   0882 11            mov a, b
0742   0883 FD 77         inc b
0743   0885 D7            push a
0744   0886 11            mov a, b
0745   0887 45 FF FF      mov [bp + -1], a ; count
0746   088A E4            pop a
0747   088B 27            mov b, a
0748   088C E4            pop a
0749   088D 0A 90 08      jmp _if15_exit
0750   0890             _if15_exit:
0751   0890             _if16_cond:
0752   0890 29 09 17      mov b, [__currState] ; currState
0753   0893 D7            push a
0754   0894 74            mov d, b
0755   0895 DA            push d
0756   0896 2C 07 00      mov b, [bp + 7] ; i
0757   0899 D7            push a
0758   089A 11            mov a, b
0759   089B 26 01 00      mov b, 1
0760   089E FD 97         neg b
0761   08A0 54            add a, b
0762   08A1 27            mov b, a
0763   08A2 E4            pop a
0764   08A3 E7            pop d
0765   08A4 10 28 00      mov a, 40
0766   08A7 AC            mul a, b
0767   08A8 5A            add d, b
0768   08A9 DA            push d
0769   08AA 2C 05 00      mov b, [bp + 5] ; j
0770   08AD D7            push a
0771   08AE 11            mov a, b
0772   08AF 26 01 00      mov b, 1
0773   08B2 54            add a, b
0774   08B3 27            mov b, a
0775   08B4 E4            pop a
0776   08B5 E7            pop d
0777   08B6 10 01 00      mov a, 1
0778   08B9 AC            mul a, b
0779   08BA 5A            add d, b
0780   08BB E4            pop a
0781   08BC 32            mov bl, [d]
0782   08BD A7 00         mov bh, 0
0783   08BF D7            push a
0784   08C0 11            mov a, b
0785   08C1 26 40 00      mov b, '@'
0786   08C4 B0            cmp a, b
0787   08C5 0E            lodflgs
0788   08C6 87 01         and al, %00000001 ; ==
0789   08C8 22 00         mov ah, 0
0790   08CA 27            mov b, a
0791   08CB E4            pop a
0792   08CC C0 00 00      cmp b, 0
0793   08CF C6 E4 08      je _if16_exit
0794   08D2             _if16_true:
0795   08D2 2C FF FF      mov b, [bp + -1] ; count
0796   08D5 D7            push a
0797   08D6 11            mov a, b
0798   08D7 FD 77         inc b
0799   08D9 D7            push a
0800   08DA 11            mov a, b
0801   08DB 45 FF FF      mov [bp + -1], a ; count
0802   08DE E4            pop a
0803   08DF 27            mov b, a
0804   08E0 E4            pop a
0805   08E1 0A E4 08      jmp _if16_exit
0806   08E4             _if16_exit:
0807   08E4             _if17_cond:
0808   08E4 29 09 17      mov b, [__currState] ; currState
0809   08E7 D7            push a
0810   08E8 74            mov d, b
0811   08E9 DA            push d
0812   08EA 2C 07 00      mov b, [bp + 7] ; i
0813   08ED E7            pop d
0814   08EE 10 28 00      mov a, 40
0815   08F1 AC            mul a, b
0816   08F2 5A            add d, b
0817   08F3 DA            push d
0818   08F4 2C 05 00      mov b, [bp + 5] ; j
0819   08F7 D7            push a
0820   08F8 11            mov a, b
0821   08F9 26 01 00      mov b, 1
0822   08FC FD 97         neg b
0823   08FE 54            add a, b
0824   08FF 27            mov b, a
0825   0900 E4            pop a
0826   0901 E7            pop d
0827   0902 10 01 00      mov a, 1
0828   0905 AC            mul a, b
0829   0906 5A            add d, b
0830   0907 E4            pop a
0831   0908 32            mov bl, [d]
0832   0909 A7 00         mov bh, 0
0833   090B D7            push a
0834   090C 11            mov a, b
0835   090D 26 40 00      mov b, '@'
0836   0910 B0            cmp a, b
0837   0911 0E            lodflgs
0838   0912 87 01         and al, %00000001 ; ==
0839   0914 22 00         mov ah, 0
0840   0916 27            mov b, a
0841   0917 E4            pop a
0842   0918 C0 00 00      cmp b, 0
0843   091B C6 30 09      je _if17_exit
0844   091E             _if17_true:
0845   091E 2C FF FF      mov b, [bp + -1] ; count
0846   0921 D7            push a
0847   0922 11            mov a, b
0848   0923 FD 77         inc b
0849   0925 D7            push a
0850   0926 11            mov a, b
0851   0927 45 FF FF      mov [bp + -1], a ; count
0852   092A E4            pop a
0853   092B 27            mov b, a
0854   092C E4            pop a
0855   092D 0A 30 09      jmp _if17_exit
0856   0930             _if17_exit:
0857   0930             _if18_cond:
0858   0930 29 09 17      mov b, [__currState] ; currState
0859   0933 D7            push a
0860   0934 74            mov d, b
0861   0935 DA            push d
0862   0936 2C 07 00      mov b, [bp + 7] ; i
0863   0939 E7            pop d
0864   093A 10 28 00      mov a, 40
0865   093D AC            mul a, b
0866   093E 5A            add d, b
0867   093F DA            push d
0868   0940 2C 05 00      mov b, [bp + 5] ; j
0869   0943 D7            push a
0870   0944 11            mov a, b
0871   0945 26 01 00      mov b, 1
0872   0948 54            add a, b
0873   0949 27            mov b, a
0874   094A E4            pop a
0875   094B E7            pop d
0876   094C 10 01 00      mov a, 1
0877   094F AC            mul a, b
0878   0950 5A            add d, b
0879   0951 E4            pop a
0880   0952 32            mov bl, [d]
0881   0953 A7 00         mov bh, 0
0882   0955 D7            push a
0883   0956 11            mov a, b
0884   0957 26 40 00      mov b, '@'
0885   095A B0            cmp a, b
0886   095B 0E            lodflgs
0887   095C 87 01         and al, %00000001 ; ==
0888   095E 22 00         mov ah, 0
0889   0960 27            mov b, a
0890   0961 E4            pop a
0891   0962 C0 00 00      cmp b, 0
0892   0965 C6 7A 09      je _if18_exit
0893   0968             _if18_true:
0894   0968 2C FF FF      mov b, [bp + -1] ; count
0895   096B D7            push a
0896   096C 11            mov a, b
0897   096D FD 77         inc b
0898   096F D7            push a
0899   0970 11            mov a, b
0900   0971 45 FF FF      mov [bp + -1], a ; count
0901   0974 E4            pop a
0902   0975 27            mov b, a
0903   0976 E4            pop a
0904   0977 0A 7A 09      jmp _if18_exit
0905   097A             _if18_exit:
0906   097A             _if19_cond:
0907   097A 29 09 17      mov b, [__currState] ; currState
0908   097D D7            push a
0909   097E 74            mov d, b
0910   097F DA            push d
0911   0980 2C 07 00      mov b, [bp + 7] ; i
0912   0983 D7            push a
0913   0984 11            mov a, b
0914   0985 26 01 00      mov b, 1
0915   0988 54            add a, b
0916   0989 27            mov b, a
0917   098A E4            pop a
0918   098B E7            pop d
0919   098C 10 28 00      mov a, 40
0920   098F AC            mul a, b
0921   0990 5A            add d, b
0922   0991 DA            push d
0923   0992 2C 05 00      mov b, [bp + 5] ; j
0924   0995 D7            push a
0925   0996 11            mov a, b
0926   0997 26 01 00      mov b, 1
0927   099A FD 97         neg b
0928   099C 54            add a, b
0929   099D 27            mov b, a
0930   099E E4            pop a
0931   099F E7            pop d
0932   09A0 10 01 00      mov a, 1
0933   09A3 AC            mul a, b
0934   09A4 5A            add d, b
0935   09A5 E4            pop a
0936   09A6 32            mov bl, [d]
0937   09A7 A7 00         mov bh, 0
0938   09A9 D7            push a
0939   09AA 11            mov a, b
0940   09AB 26 40 00      mov b, '@'
0941   09AE B0            cmp a, b
0942   09AF 0E            lodflgs
0943   09B0 87 01         and al, %00000001 ; ==
0944   09B2 22 00         mov ah, 0
0945   09B4 27            mov b, a
0946   09B5 E4            pop a
0947   09B6 C0 00 00      cmp b, 0
0948   09B9 C6 CE 09      je _if19_exit
0949   09BC             _if19_true:
0950   09BC 2C FF FF      mov b, [bp + -1] ; count
0951   09BF D7            push a
0952   09C0 11            mov a, b
0953   09C1 FD 77         inc b
0954   09C3 D7            push a
0955   09C4 11            mov a, b
0956   09C5 45 FF FF      mov [bp + -1], a ; count
0957   09C8 E4            pop a
0958   09C9 27            mov b, a
0959   09CA E4            pop a
0960   09CB 0A CE 09      jmp _if19_exit
0961   09CE             _if19_exit:
0962   09CE             _if20_cond:
0963   09CE 29 09 17      mov b, [__currState] ; currState
0964   09D1 D7            push a
0965   09D2 74            mov d, b
0966   09D3 DA            push d
0967   09D4 2C 07 00      mov b, [bp + 7] ; i
0968   09D7 D7            push a
0969   09D8 11            mov a, b
0970   09D9 26 01 00      mov b, 1
0971   09DC 54            add a, b
0972   09DD 27            mov b, a
0973   09DE E4            pop a
0974   09DF E7            pop d
0975   09E0 10 28 00      mov a, 40
0976   09E3 AC            mul a, b
0977   09E4 5A            add d, b
0978   09E5 DA            push d
0979   09E6 2C 05 00      mov b, [bp + 5] ; j
0980   09E9 E7            pop d
0981   09EA 10 01 00      mov a, 1
0982   09ED AC            mul a, b
0983   09EE 5A            add d, b
0984   09EF E4            pop a
0985   09F0 32            mov bl, [d]
0986   09F1 A7 00         mov bh, 0
0987   09F3 D7            push a
0988   09F4 11            mov a, b
0989   09F5 26 40 00      mov b, '@'
0990   09F8 B0            cmp a, b
0991   09F9 0E            lodflgs
0992   09FA 87 01         and al, %00000001 ; ==
0993   09FC 22 00         mov ah, 0
0994   09FE 27            mov b, a
0995   09FF E4            pop a
0996   0A00 C0 00 00      cmp b, 0
0997   0A03 C6 18 0A      je _if20_exit
0998   0A06             _if20_true:
0999   0A06 2C FF FF      mov b, [bp + -1] ; count
1000   0A09 D7            push a
1001   0A0A 11            mov a, b
1002   0A0B FD 77         inc b
1003   0A0D D7            push a
1004   0A0E 11            mov a, b
1005   0A0F 45 FF FF      mov [bp + -1], a ; count
1006   0A12 E4            pop a
1007   0A13 27            mov b, a
1008   0A14 E4            pop a
1009   0A15 0A 18 0A      jmp _if20_exit
1010   0A18             _if20_exit:
1011   0A18             _if21_cond:
1012   0A18 29 09 17      mov b, [__currState] ; currState
1013   0A1B D7            push a
1014   0A1C 74            mov d, b
1015   0A1D DA            push d
1016   0A1E 2C 07 00      mov b, [bp + 7] ; i
1017   0A21 D7            push a
1018   0A22 11            mov a, b
1019   0A23 26 01 00      mov b, 1
1020   0A26 54            add a, b
1021   0A27 27            mov b, a
1022   0A28 E4            pop a
1023   0A29 E7            pop d
1024   0A2A 10 28 00      mov a, 40
1025   0A2D AC            mul a, b
1026   0A2E 5A            add d, b
1027   0A2F DA            push d
1028   0A30 2C 05 00      mov b, [bp + 5] ; j
1029   0A33 D7            push a
1030   0A34 11            mov a, b
1031   0A35 26 01 00      mov b, 1
1032   0A38 54            add a, b
1033   0A39 27            mov b, a
1034   0A3A E4            pop a
1035   0A3B E7            pop d
1036   0A3C 10 01 00      mov a, 1
1037   0A3F AC            mul a, b
1038   0A40 5A            add d, b
1039   0A41 E4            pop a
1040   0A42 32            mov bl, [d]
1041   0A43 A7 00         mov bh, 0
1042   0A45 D7            push a
1043   0A46 11            mov a, b
1044   0A47 26 40 00      mov b, '@'
1045   0A4A B0            cmp a, b
1046   0A4B 0E            lodflgs
1047   0A4C 87 01         and al, %00000001 ; ==
1048   0A4E 22 00         mov ah, 0
1049   0A50 27            mov b, a
1050   0A51 E4            pop a
1051   0A52 C0 00 00      cmp b, 0
1052   0A55 C6 6A 0A      je _if21_exit
1053   0A58             _if21_true:
1054   0A58 2C FF FF      mov b, [bp + -1] ; count
1055   0A5B D7            push a
1056   0A5C 11            mov a, b
1057   0A5D FD 77         inc b
1058   0A5F D7            push a
1059   0A60 11            mov a, b
1060   0A61 45 FF FF      mov [bp + -1], a ; count
1061   0A64 E4            pop a
1062   0A65 27            mov b, a
1063   0A66 E4            pop a
1064   0A67 0A 6A 0A      jmp _if21_exit
1065   0A6A             _if21_exit:
1066   0A6A 2C FF FF      mov b, [bp + -1] ; count
1067   0A6D F9            leave
1068   0A6E 09            ret
1069   0A6F             
1070   0A6F             print:
1071   0A6F D2            push bp
1072   0A70 9B            mov bp, sp
1073   0A71             
1074   0A71             ; --- BEGIN INLINE ASM BLOCK
1075   0A71 17 05 00      mov a, [bp + 5]
1076   0A74 3C            mov d, a
1077   0A75 07 5D 19      call puts
1078   0A78             ; --- END INLINE ASM BLOCK
1079   0A78             
1080   0A78 F9            leave
1081   0A79 09            ret
1082   0A7A             
1083   0A7A             _putchar:
1084   0A7A D2            push bp
1085   0A7B 9B            mov bp, sp
1086   0A7C             
1087   0A7C             ; --- BEGIN INLINE ASM BLOCK
1088   0A7C 20 05 00      mov al, [bp + 5]
1089   0A7F 23            mov ah, al
1090   0A80 07 23 18      call putchar
1091   0A83             ; --- END INLINE ASM BLOCK
1092   0A83             
1093   0A83 F9            leave
1094   0A84 09            ret
1095   0A85             ; --- END TEXT BLOCK
1096   0A85             
1097   0A85             ; --- BEGIN DATA BLOCK
1098   0A85 28 00       __SIZE: .dw 40
1099   0A87 00 00 00 00 __nextState_data: .fill 1600, 0
1099   0A8B 00 00 00 00 
1099   0A8F 00 00 00 00 
1099   0A93 00 00 00 00 
1099   0A97 00 00 00 00 
1099   0A9B 00 00 00 00 
1099   0A9F 00 00 00 00 
1099   0AA3 00 00 00 00 
1099   0AA7 00 00 00 00 
1099   0AAB 00 00 00 00 
1099   0AAF 00 00 00 00 
1099   0AB3 00 00 00 00 
1099   0AB7 00 00 00 00 
1099   0ABB 00 00 00 00 
1099   0ABF 00 00 00 00 
1099   0AC3 00 00 00 00 
1099   0AC7 00 00 00 00 
1099   0ACB 00 00 00 00 
1099   0ACF 00 00 00 00 
1099   0AD3 00 00 00 00 
1099   0AD7 00 00 00 00 
1099   0ADB 00 00 00 00 
1099   0ADF 00 00 00 00 
1099   0AE3 00 00 00 00 
1099   0AE7 00 00 00 00 
1099   0AEB 00 00 00 00 
1099   0AEF 00 00 00 00 
1099   0AF3 00 00 00 00 
1099   0AF7 00 00 00 00 
1099   0AFB 00 00 00 00 
1099   0AFF 00 00 00 00 
1099   0B03 00 00 00 00 
1099   0B07 00 00 00 00 
1099   0B0B 00 00 00 00 
1099   0B0F 00 00 00 00 
1099   0B13 00 00 00 00 
1099   0B17 00 00 00 00 
1099   0B1B 00 00 00 00 
1099   0B1F 00 00 00 00 
1099   0B23 00 00 00 00 
1099   0B27 00 00 00 00 
1099   0B2B 00 00 00 00 
1099   0B2F 00 00 00 00 
1099   0B33 00 00 00 00 
1099   0B37 00 00 00 00 
1099   0B3B 00 00 00 00 
1099   0B3F 00 00 00 00 
1099   0B43 00 00 00 00 
1099   0B47 00 00 00 00 
1099   0B4B 00 00 00 00 
1099   0B4F 00 00 00 00 
1099   0B53 00 00 00 00 
1099   0B57 00 00 00 00 
1099   0B5B 00 00 00 00 
1099   0B5F 00 00 00 00 
1099   0B63 00 00 00 00 
1099   0B67 00 00 00 00 
1099   0B6B 00 00 00 00 
1099   0B6F 00 00 00 00 
1099   0B73 00 00 00 00 
1099   0B77 00 00 00 00 
1099   0B7B 00 00 00 00 
1099   0B7F 00 00 00 00 
1099   0B83 00 00 00 00 
1099   0B87 00 00 00 00 
1099   0B8B 00 00 00 00 
1099   0B8F 00 00 00 00 
1099   0B93 00 00 00 00 
1099   0B97 00 00 00 00 
1099   0B9B 00 00 00 00 
1099   0B9F 00 00 00 00 
1099   0BA3 00 00 00 00 
1099   0BA7 00 00 00 00 
1099   0BAB 00 00 00 00 
1099   0BAF 00 00 00 00 
1099   0BB3 00 00 00 00 
1099   0BB7 00 00 00 00 
1099   0BBB 00 00 00 00 
1099   0BBF 00 00 00 00 
1099   0BC3 00 00 00 00 
1099   0BC7 00 00 00 00 
1099   0BCB 00 00 00 00 
1099   0BCF 00 00 00 00 
1099   0BD3 00 00 00 00 
1099   0BD7 00 00 00 00 
1099   0BDB 00 00 00 00 
1099   0BDF 00 00 00 00 
1099   0BE3 00 00 00 00 
1099   0BE7 00 00 00 00 
1099   0BEB 00 00 00 00 
1099   0BEF 00 00 00 00 
1099   0BF3 00 00 00 00 
1099   0BF7 00 00 00 00 
1099   0BFB 00 00 00 00 
1099   0BFF 00 00 00 00 
1099   0C03 00 00 00 00 
1099   0C07 00 00 00 00 
1099   0C0B 00 00 00 00 
1099   0C0F 00 00 00 00 
1099   0C13 00 00 00 00 
1099   0C17 00 00 00 00 
1099   0C1B 00 00 00 00 
1099   0C1F 00 00 00 00 
1099   0C23 00 00 00 00 
1099   0C27 00 00 00 00 
1099   0C2B 00 00 00 00 
1099   0C2F 00 00 00 00 
1099   0C33 00 00 00 00 
1099   0C37 00 00 00 00 
1099   0C3B 00 00 00 00 
1099   0C3F 00 00 00 00 
1099   0C43 00 00 00 00 
1099   0C47 00 00 00 00 
1099   0C4B 00 00 00 00 
1099   0C4F 00 00 00 00 
1099   0C53 00 00 00 00 
1099   0C57 00 00 00 00 
1099   0C5B 00 00 00 00 
1099   0C5F 00 00 00 00 
1099   0C63 00 00 00 00 
1099   0C67 00 00 00 00 
1099   0C6B 00 00 00 00 
1099   0C6F 00 00 00 00 
1099   0C73 00 00 00 00 
1099   0C77 00 00 00 00 
1099   0C7B 00 00 00 00 
1099   0C7F 00 00 00 00 
1099   0C83 00 00 00 00 
1099   0C87 00 00 00 00 
1099   0C8B 00 00 00 00 
1099   0C8F 00 00 00 00 
1099   0C93 00 00 00 00 
1099   0C97 00 00 00 00 
1099   0C9B 00 00 00 00 
1099   0C9F 00 00 00 00 
1099   0CA3 00 00 00 00 
1099   0CA7 00 00 00 00 
1099   0CAB 00 00 00 00 
1099   0CAF 00 00 00 00 
1099   0CB3 00 00 00 00 
1099   0CB7 00 00 00 00 
1099   0CBB 00 00 00 00 
1099   0CBF 00 00 00 00 
1099   0CC3 00 00 00 00 
1099   0CC7 00 00 00 00 
1099   0CCB 00 00 00 00 
1099   0CCF 00 00 00 00 
1099   0CD3 00 00 00 00 
1099   0CD7 00 00 00 00 
1099   0CDB 00 00 00 00 
1099   0CDF 00 00 00 00 
1099   0CE3 00 00 00 00 
1099   0CE7 00 00 00 00 
1099   0CEB 00 00 00 00 
1099   0CEF 00 00 00 00 
1099   0CF3 00 00 00 00 
1099   0CF7 00 00 00 00 
1099   0CFB 00 00 00 00 
1099   0CFF 00 00 00 00 
1099   0D03 00 00 00 00 
1099   0D07 00 00 00 00 
1099   0D0B 00 00 00 00 
1099   0D0F 00 00 00 00 
1099   0D13 00 00 00 00 
1099   0D17 00 00 00 00 
1099   0D1B 00 00 00 00 
1099   0D1F 00 00 00 00 
1099   0D23 00 00 00 00 
1099   0D27 00 00 00 00 
1099   0D2B 00 00 00 00 
1099   0D2F 00 00 00 00 
1099   0D33 00 00 00 00 
1099   0D37 00 00 00 00 
1099   0D3B 00 00 00 00 
1099   0D3F 00 00 00 00 
1099   0D43 00 00 00 00 
1099   0D47 00 00 00 00 
1099   0D4B 00 00 00 00 
1099   0D4F 00 00 00 00 
1099   0D53 00 00 00 00 
1099   0D57 00 00 00 00 
1099   0D5B 00 00 00 00 
1099   0D5F 00 00 00 00 
1099   0D63 00 00 00 00 
1099   0D67 00 00 00 00 
1099   0D6B 00 00 00 00 
1099   0D6F 00 00 00 00 
1099   0D73 00 00 00 00 
1099   0D77 00 00 00 00 
1099   0D7B 00 00 00 00 
1099   0D7F 00 00 00 00 
1099   0D83 00 00 00 00 
1099   0D87 00 00 00 00 
1099   0D8B 00 00 00 00 
1099   0D8F 00 00 00 00 
1099   0D93 00 00 00 00 
1099   0D97 00 00 00 00 
1099   0D9B 00 00 00 00 
1099   0D9F 00 00 00 00 
1099   0DA3 00 00 00 00 
1099   0DA7 00 00 00 00 
1099   0DAB 00 00 00 00 
1099   0DAF 00 00 00 00 
1099   0DB3 00 00 00 00 
1099   0DB7 00 00 00 00 
1099   0DBB 00 00 00 00 
1099   0DBF 00 00 00 00 
1099   0DC3 00 00 00 00 
1099   0DC7 00 00 00 00 
1099   0DCB 00 00 00 00 
1099   0DCF 00 00 00 00 
1099   0DD3 00 00 00 00 
1099   0DD7 00 00 00 00 
1099   0DDB 00 00 00 00 
1099   0DDF 00 00 00 00 
1099   0DE3 00 00 00 00 
1099   0DE7 00 00 00 00 
1099   0DEB 00 00 00 00 
1099   0DEF 00 00 00 00 
1099   0DF3 00 00 00 00 
1099   0DF7 00 00 00 00 
1099   0DFB 00 00 00 00 
1099   0DFF 00 00 00 00 
1099   0E03 00 00 00 00 
1099   0E07 00 00 00 00 
1099   0E0B 00 00 00 00 
1099   0E0F 00 00 00 00 
1099   0E13 00 00 00 00 
1099   0E17 00 00 00 00 
1099   0E1B 00 00 00 00 
1099   0E1F 00 00 00 00 
1099   0E23 00 00 00 00 
1099   0E27 00 00 00 00 
1099   0E2B 00 00 00 00 
1099   0E2F 00 00 00 00 
1099   0E33 00 00 00 00 
1099   0E37 00 00 00 00 
1099   0E3B 00 00 00 00 
1099   0E3F 00 00 00 00 
1099   0E43 00 00 00 00 
1099   0E47 00 00 00 00 
1099   0E4B 00 00 00 00 
1099   0E4F 00 00 00 00 
1099   0E53 00 00 00 00 
1099   0E57 00 00 00 00 
1099   0E5B 00 00 00 00 
1099   0E5F 00 00 00 00 
1099   0E63 00 00 00 00 
1099   0E67 00 00 00 00 
1099   0E6B 00 00 00 00 
1099   0E6F 00 00 00 00 
1099   0E73 00 00 00 00 
1099   0E77 00 00 00 00 
1099   0E7B 00 00 00 00 
1099   0E7F 00 00 00 00 
1099   0E83 00 00 00 00 
1099   0E87 00 00 00 00 
1099   0E8B 00 00 00 00 
1099   0E8F 00 00 00 00 
1099   0E93 00 00 00 00 
1099   0E97 00 00 00 00 
1099   0E9B 00 00 00 00 
1099   0E9F 00 00 00 00 
1099   0EA3 00 00 00 00 
1099   0EA7 00 00 00 00 
1099   0EAB 00 00 00 00 
1099   0EAF 00 00 00 00 
1099   0EB3 00 00 00 00 
1099   0EB7 00 00 00 00 
1099   0EBB 00 00 00 00 
1099   0EBF 00 00 00 00 
1099   0EC3 00 00 00 00 
1099   0EC7 00 00 00 00 
1099   0ECB 00 00 00 00 
1099   0ECF 00 00 00 00 
1099   0ED3 00 00 00 00 
1099   0ED7 00 00 00 00 
1099   0EDB 00 00 00 00 
1099   0EDF 00 00 00 00 
1099   0EE3 00 00 00 00 
1099   0EE7 00 00 00 00 
1099   0EEB 00 00 00 00 
1099   0EEF 00 00 00 00 
1099   0EF3 00 00 00 00 
1099   0EF7 00 00 00 00 
1099   0EFB 00 00 00 00 
1099   0EFF 00 00 00 00 
1099   0F03 00 00 00 00 
1099   0F07 00 00 00 00 
1099   0F0B 00 00 00 00 
1099   0F0F 00 00 00 00 
1099   0F13 00 00 00 00 
1099   0F17 00 00 00 00 
1099   0F1B 00 00 00 00 
1099   0F1F 00 00 00 00 
1099   0F23 00 00 00 00 
1099   0F27 00 00 00 00 
1099   0F2B 00 00 00 00 
1099   0F2F 00 00 00 00 
1099   0F33 00 00 00 00 
1099   0F37 00 00 00 00 
1099   0F3B 00 00 00 00 
1099   0F3F 00 00 00 00 
1099   0F43 00 00 00 00 
1099   0F47 00 00 00 00 
1099   0F4B 00 00 00 00 
1099   0F4F 00 00 00 00 
1099   0F53 00 00 00 00 
1099   0F57 00 00 00 00 
1099   0F5B 00 00 00 00 
1099   0F5F 00 00 00 00 
1099   0F63 00 00 00 00 
1099   0F67 00 00 00 00 
1099   0F6B 00 00 00 00 
1099   0F6F 00 00 00 00 
1099   0F73 00 00 00 00 
1099   0F77 00 00 00 00 
1099   0F7B 00 00 00 00 
1099   0F7F 00 00 00 00 
1099   0F83 00 00 00 00 
1099   0F87 00 00 00 00 
1099   0F8B 00 00 00 00 
1099   0F8F 00 00 00 00 
1099   0F93 00 00 00 00 
1099   0F97 00 00 00 00 
1099   0F9B 00 00 00 00 
1099   0F9F 00 00 00 00 
1099   0FA3 00 00 00 00 
1099   0FA7 00 00 00 00 
1099   0FAB 00 00 00 00 
1099   0FAF 00 00 00 00 
1099   0FB3 00 00 00 00 
1099   0FB7 00 00 00 00 
1099   0FBB 00 00 00 00 
1099   0FBF 00 00 00 00 
1099   0FC3 00 00 00 00 
1099   0FC7 00 00 00 00 
1099   0FCB 00 00 00 00 
1099   0FCF 00 00 00 00 
1099   0FD3 00 00 00 00 
1099   0FD7 00 00 00 00 
1099   0FDB 00 00 00 00 
1099   0FDF 00 00 00 00 
1099   0FE3 00 00 00 00 
1099   0FE7 00 00 00 00 
1099   0FEB 00 00 00 00 
1099   0FEF 00 00 00 00 
1099   0FF3 00 00 00 00 
1099   0FF7 00 00 00 00 
1099   0FFB 00 00 00 00 
1099   0FFF 00 00 00 00 
1099   1003 00 00 00 00 
1099   1007 00 00 00 00 
1099   100B 00 00 00 00 
1099   100F 00 00 00 00 
1099   1013 00 00 00 00 
1099   1017 00 00 00 00 
1099   101B 00 00 00 00 
1099   101F 00 00 00 00 
1099   1023 00 00 00 00 
1099   1027 00 00 00 00 
1099   102B 00 00 00 00 
1099   102F 00 00 00 00 
1099   1033 00 00 00 00 
1099   1037 00 00 00 00 
1099   103B 00 00 00 00 
1099   103F 00 00 00 00 
1099   1043 00 00 00 00 
1099   1047 00 00 00 00 
1099   104B 00 00 00 00 
1099   104F 00 00 00 00 
1099   1053 00 00 00 00 
1099   1057 00 00 00 00 
1099   105B 00 00 00 00 
1099   105F 00 00 00 00 
1099   1063 00 00 00 00 
1099   1067 00 00 00 00 
1099   106B 00 00 00 00 
1099   106F 00 00 00 00 
1099   1073 00 00 00 00 
1099   1077 00 00 00 00 
1099   107B 00 00 00 00 
1099   107F 00 00 00 00 
1099   1083 00 00 00 00 
1099   1087 00 00 00 00 
1099   108B 00 00 00 00 
1099   108F 00 00 00 00 
1099   1093 00 00 00 00 
1099   1097 00 00 00 00 
1099   109B 00 00 00 00 
1099   109F 00 00 00 00 
1099   10A3 00 00 00 00 
1099   10A7 00 00 00 00 
1099   10AB 00 00 00 00 
1099   10AF 00 00 00 00 
1099   10B3 00 00 00 00 
1099   10B7 00 00 00 00 
1099   10BB 00 00 00 00 
1099   10BF 00 00 00 00 
1099   10C3 00 00 00 00 
1100   10C7 87 0A       __nextState: .dw __nextState_data
1101   10C9             __currState_data: 
1102   10C9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1102   10CD 20 20 20 20 
1102   10D1 20 20 20 20 
1102   10D5 20 20 20 20 
1102   10D9 20 20 20 20 
1102   10DD 20 20 20 20 
1102   10E1 20 20 20 20 
1102   10E5 20 20 
1103   10E7 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1103   10EB 20 20 20 20 
1103   10EF 20 20 20 20 
1103   10F3 20 20 20 20 
1103   10F7 20 20 20 20 
1103   10FB 20 20 20 20 
1103   10FF 20 20 20 20 
1103   1103 20 20 
1104   1105 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1104   1109 20 20 20 20 
1104   110D 20 20 20 20 
1104   1111 20 20 20 20 
1104   1115 20 20 20 20 
1104   1119 20 20 20 20 
1104   111D 20 20 20 20 
1104   1121 20 20 
1105   1123 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1105   1127 20 20 20 20 
1105   112B 20 20 20 20 
1105   112F 20 20 20 20 
1105   1133 20 20 20 20 
1105   1137 20 20 20 20 
1105   113B 20 20 20 20 
1105   113F 20 20 
1106   1141 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
1106   1145 20 20 20 20 
1106   1149 20 20 20 20 
1106   114D 20 20 20 20 
1106   1151 20 20 20 20 
1106   1155 20 20 20 20 
1106   1159 20 20 20 40 
1106   115D 20 20 
1107   115F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1107   1163 20 20 20 20 
1107   1167 20 20 20 20 
1107   116B 20 20 20 20 
1107   116F 20 20 20 20 
1107   1173 20 20 20 20 
1107   1177 20 20 20 20 
1107   117B 20 20 
1108   117D 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1108   1181 20 40 20 40 
1108   1185 20 20 20 20 
1108   1189 20 20 20 20 
1108   118D 20 20 20 20 
1108   1191 20 20 20 20 
1108   1195 20 20 20 20 
1108   1199 20 20 
1109   119B 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
1109   119F 20 40 40 20 
1109   11A3 20 20 20 20 
1109   11A7 20 40 40 20 
1109   11AB 20 20 20 20 
1109   11AF 20 20 20 20 
1109   11B3 20 20 20 40 
1109   11B7 40 20 
1110   11B9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
1110   11BD 20 20 20 20 
1110   11C1 20 20 20 20 
1110   11C5 20 20 40 20 
1110   11C9 20 20 40 20 
1110   11CD 20 20 20 40 
1110   11D1 40 20 20 20 
1110   11D5 20 20 
1111   11D7 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
1111   11DB 20 20 20 40 
1111   11DF 40 20 20 20 
1111   11E3 20 40 40 20 
1111   11E7 20 20 20 20 
1111   11EB 20 20 20 40 
1111   11EF 20 20 20 20 
1111   11F3 20 40 
1112   11F5 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
1112   11F9 40 20 20 20 
1112   11FD 20 20 20 20 
1112   1201 20 20 20 20 
1112   1205 20 20 20 20 
1112   1209 20 20 20 40 
1112   120D 40 20 20 20 
1112   1211 20 20 
1113   1213 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1113   1217 20 20 20 40 
1113   121B 20 40 40 20 
1113   121F 20 20 20 40 
1113   1223 20 40 20 20 
1113   1227 20 20 20 20 
1113   122B 20 20 20 20 
1113   122F 20 20 
1114   1231 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
1114   1235 20 20 20 20 
1114   1239 20 20 20 20 
1114   123D 20 40 20 20 
1114   1241 20 20 20 40 
1114   1245 20 20 20 20 
1114   1249 20 20 20 40 
1114   124D 20 20 
1115   124F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
1115   1253 20 20 20 20 
1115   1257 20 20 20 20 
1115   125B 20 20 20 20 
1115   125F 20 20 20 20 
1115   1263 20 20 20 20 
1115   1267 40 20 20 20 
1115   126B 40 20 
1116   126D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1116   1271 20 20 20 20 
1116   1275 20 20 20 20 
1116   1279 20 20 20 20 
1116   127D 20 20 20 20 
1116   1281 20 20 20 20 
1116   1285 20 20 20 20 
1116   1289 20 20 
1117   128B 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1117   128F 20 40 40 20 
1117   1293 20 20 20 20 
1117   1297 20 20 20 20 
1117   129B 20 20 20 20 
1117   129F 20 20 20 20 
1117   12A3 20 20 20 20 
1117   12A7 20 20 
1118   12A9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1118   12AD 20 20 20 20 
1118   12B1 20 20 20 20 
1118   12B5 20 20 20 20 
1118   12B9 20 20 20 20 
1118   12BD 20 20 20 20 
1118   12C1 20 20 20 20 
1118   12C5 20 20 
1119   12C7 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1119   12CB 20 20 20 20 
1119   12CF 20 20 20 20 
1119   12D3 20 20 20 20 
1119   12D7 20 20 20 20 
1119   12DB 20 20 20 20 
1119   12DF 20 20 20 20 
1119   12E3 20 20 
1120   12E5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1120   12E9 20 20 20 20 
1120   12ED 20 20 20 20 
1120   12F1 20 20 20 20 
1120   12F5 20 20 20 20 
1120   12F9 20 20 20 20 
1120   12FD 20 20 20 20 
1120   1301 20 20 
1121   1303 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1121   1307 20 20 20 20 
1121   130B 20 20 20 20 
1121   130F 20 20 20 20 
1121   1313 20 20 20 20 
1121   1317 20 20 20 20 
1121   131B 20 20 20 20 
1121   131F 20 20 
1122   1321 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1122   1325 20 20 20 20 
1122   1329 20 20 20 20 
1122   132D 20 20 20 20 
1122   1331 20 20 20 20 
1122   1335 20 20 20 20 
1122   1339 20 20 20 20 
1122   133D 20 20 
1123   133F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1123   1343 20 20 20 20 
1123   1347 20 20 20 20 
1123   134B 20 20 20 20 
1123   134F 20 20 20 20 
1123   1353 20 20 20 20 
1123   1357 20 20 20 20 
1123   135B 20 20 
1124   135D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1124   1361 20 20 20 20 
1124   1365 20 20 20 20 
1124   1369 20 20 20 20 
1124   136D 20 20 20 20 
1124   1371 20 20 20 20 
1124   1375 20 20 20 20 
1124   1379 20 20 
1125   137B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1125   137F 20 20 20 20 
1125   1383 20 20 20 20 
1125   1387 20 20 20 20 
1125   138B 20 20 20 20 
1125   138F 20 20 20 20 
1125   1393 20 20 20 20 
1125   1397 20 20 
1126   1399 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1126   139D 20 20 20 20 
1126   13A1 20 20 20 20 
1126   13A5 20 20 20 20 
1126   13A9 20 20 20 20 
1126   13AD 20 20 20 20 
1126   13B1 20 20 20 20 
1126   13B5 20 20 
1127   13B7 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1127   13BB 20 20 20 20 
1127   13BF 20 20 20 20 
1127   13C3 20 20 20 20 
1127   13C7 20 20 20 20 
1127   13CB 20 20 20 20 
1127   13CF 20 20 20 20 
1127   13D3 20 20 
1128   13D5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$20,
1128   13D9 20 20 20 20 
1128   13DD 20 20 20 20 
1128   13E1 20 20 20 20 
1128   13E5 20 20 20 20 
1128   13E9 20 20 20 20 
1128   13ED 20 20 40 40 
1128   13F1 40 20 
1129   13F3 20 20 40 40 .db $20,$20,$40,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$20,$20,$20,$40,$40,$40,$20,$20,$20,$20,
1129   13F7 40 20 20 20 
1129   13FB 20 20 20 20 
1129   13FF 20 20 20 20 
1129   1403 20 40 40 40 
1129   1407 20 20 20 40 
1129   140B 40 40 20 20 
1129   140F 20 20 
1130   1411 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1130   1415 20 20 20 20 
1130   1419 20 20 20 20 
1130   141D 20 20 20 20 
1130   1421 20 20 20 20 
1130   1425 20 20 20 20 
1130   1429 20 20 20 20 
1130   142D 20 20 
1131   142F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,
1131   1433 20 20 20 20 
1131   1437 20 20 20 20 
1131   143B 20 20 40 20 
1131   143F 20 20 20 40 
1131   1443 20 40 20 20 
1131   1447 20 20 40 20 
1131   144B 20 20 
1132   144D 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,
1132   1451 20 40 20 20 
1132   1455 20 20 40 20 
1132   1459 40 20 20 20 
1132   145D 20 40 20 20 
1132   1461 20 20 20 20 
1132   1465 40 20 20 20 
1132   1469 20 40 
1133   146B 20 40 20 20 .db $20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,
1133   146F 20 20 40 20 
1133   1473 20 20 20 20 
1133   1477 20 20 20 40 
1133   147B 20 20 20 20 
1133   147F 40 20 40 20 
1133   1483 20 20 20 40 
1133   1487 20 20 
1134   1489 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,
1134   148D 40 20 20 20 
1134   1491 20 40 20 40 
1134   1495 20 20 20 20 
1134   1499 40 20 20 20 
1134   149D 20 20 20 20 
1134   14A1 20 40 20 20 
1134   14A5 20 20 
1135   14A7 40 20 40 20 .db $40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$20,$20,$20,$40,$40,$40,$20,$20,$20,$20,$20,
1135   14AB 20 20 20 40 
1135   14AF 20 20 20 20 
1135   14B3 20 20 20 20 
1135   14B7 40 40 40 20 
1135   14BB 20 20 40 40 
1135   14BF 40 20 20 20 
1135   14C3 20 20 
1136   14C5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$20,$20,$20,$40,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1136   14C9 20 20 20 40 
1136   14CD 40 40 20 20 
1136   14D1 20 40 40 40 
1136   14D5 20 20 20 20 
1136   14D9 20 20 20 20 
1136   14DD 20 20 20 20 
1136   14E1 20 20 
1137   14E3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1137   14E7 20 20 20 20 
1137   14EB 20 20 20 20 
1137   14EF 20 20 20 20 
1137   14F3 20 20 20 20 
1137   14F7 20 20 20 20 
1137   14FB 20 20 20 20 
1137   14FF 20 20 
1138   1501 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$40,$40,$20,$20,$20,$40,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,
1138   1505 20 20 40 40 
1138   1509 40 20 20 20 
1138   150D 40 40 40 20 
1138   1511 20 20 20 20 
1138   1515 20 20 20 20 
1138   1519 20 20 20 40 
1138   151D 40 40 
1139   151F 20 20 20 40 .db $20,$20,$20,$40,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,
1139   1523 40 40 20 20 
1139   1527 20 20 20 20 
1139   152B 20 20 40 20 
1139   152F 20 20 20 40 
1139   1533 20 40 20 20 
1139   1537 20 20 40 20 
1139   153B 20 20 
1140   153D 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,
1140   1541 20 40 20 20 
1140   1545 20 20 40 20 
1140   1549 40 20 20 20 
1140   154D 20 40 20 20 
1140   1551 20 20 20 20 
1140   1555 40 20 20 20 
1140   1559 20 40 
1141   155B 20 40 20 20 .db $20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,
1141   155F 20 20 40 20 
1141   1563 20 20 20 20 
1141   1567 20 20 20 40 
1141   156B 20 20 20 20 
1141   156F 40 20 40 20 
1141   1573 20 20 20 40 
1141   1577 20 20 
1142   1579 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,
1142   157D 40 20 20 20 
1142   1581 20 40 20 40 
1142   1585 20 20 20 20 
1142   1589 40 20 20 20 
1142   158D 20 20 20 20 
1142   1591 20 40 20 20 
1142   1595 20 20 
1143   1597 40 20 40 20 .db $40,$20,$40,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1143   159B 20 20 20 40 
1143   159F 20 20 20 20 
1143   15A3 20 20 20 20 
1143   15A7 20 20 20 20 
1143   15AB 20 20 20 20 
1143   15AF 20 20 20 20 
1143   15B3 20 20 
1144   15B5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$20,
1144   15B9 20 20 20 20 
1144   15BD 20 20 20 20 
1144   15C1 20 20 20 20 
1144   15C5 20 20 20 20 
1144   15C9 20 20 20 20 
1144   15CD 20 20 40 40 
1144   15D1 40 20 
1145   15D3 20 20 40 40 .db $20,$20,$40,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$20,$20,$20,$40,$40,$40,$20,$20,$20,$20,
1145   15D7 40 20 20 20 
1145   15DB 20 20 20 20 
1145   15DF 20 20 20 20 
1145   15E3 20 40 40 40 
1145   15E7 20 20 20 40 
1145   15EB 40 40 20 20 
1145   15EF 20 20 
1146   15F1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1146   15F5 20 20 20 20 
1146   15F9 20 20 20 20 
1146   15FD 20 20 20 20 
1146   1601 20 20 20 20 
1146   1605 20 20 20 20 
1146   1609 20 20 20 20 
1146   160D 20 20 
1147   160F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1147   1613 20 20 20 20 
1147   1617 20 20 20 20 
1147   161B 20 20 20 20 
1147   161F 20 20 20 20 
1147   1623 20 20 20 20 
1147   1627 20 20 20 20 
1147   162B 20 20 
1148   162D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1148   1631 20 20 20 20 
1148   1635 20 20 20 20 
1148   1639 20 20 20 20 
1148   163D 20 20 20 20 
1148   1641 20 20 20 20 
1148   1645 20 20 20 20 
1148   1649 20 20 
1149   164B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1149   164F 20 20 20 20 
1149   1653 20 20 20 20 
1149   1657 20 20 20 20 
1149   165B 20 20 20 20 
1149   165F 20 20 20 20 
1149   1663 20 20 20 20 
1149   1667 20 20 
1150   1669 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1150   166D 20 20 20 20 
1150   1671 20 20 20 20 
1150   1675 20 20 20 20 
1150   1679 20 20 20 20 
1150   167D 20 20 20 20 
1150   1681 20 20 20 20 
1150   1685 20 20 
1151   1687 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1151   168B 20 20 20 20 
1151   168F 20 20 20 20 
1151   1693 20 20 20 20 
1151   1697 20 20 20 20 
1151   169B 20 20 20 20 
1151   169F 20 20 20 20 
1151   16A3 20 20 
1152   16A5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
1152   16A9 20 20 20 20 
1152   16AD 20 20 20 20 
1152   16B1 20 20 20 20 
1152   16B5 20 20 20 20 
1153   16B9 00 00 00 00 .fill 80, 0
1153   16BD 00 00 00 00 
1153   16C1 00 00 00 00 
1153   16C5 00 00 00 00 
1153   16C9 00 00 00 00 
1153   16CD 00 00 00 00 
1153   16D1 00 00 00 00 
1153   16D5 00 00 00 00 
1153   16D9 00 00 00 00 
1153   16DD 00 00 00 00 
1153   16E1 00 00 00 00 
1153   16E5 00 00 00 00 
1153   16E9 00 00 00 00 
1153   16ED 00 00 00 00 
1153   16F1 00 00 00 00 
1153   16F5 00 00 00 00 
1153   16F9 00 00 00 00 
1153   16FD 00 00 00 00 
1153   1701 00 00 00 00 
1153   1705 00 00 00 00 
1154   1709 C9 10       __currState: .dw __currState_data
1155   170B 40 20 00    __string_0: .db "@ ", 0
1156   170E 2E 20 00    __string_1: .db ". ", 0
1157   1711             ; --- END DATA BLOCK
1158   1711             
1159   1711             ; --- BEGIN INCLUDE BLOCK
1160   1711             .include "lib/stdio.asm"
0001+  1711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1711             ; stdio.s
0003+  1711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1711             .include "lib/string.asm"
0001++ 1711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1711             ; string.s
0003++ 1711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1711             
0005++ 1711             
0006++ 1711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1711             ; strrev
0008++ 1711             ; reverse a string
0009++ 1711             ; D = string address
0010++ 1711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1711             ; 01234
0012++ 1711             strrev:
0013++ 1711 4B          	pusha
0014++ 1712 07 58 17    	call strlen	; length in C
0015++ 1715 12          	mov a, c
0016++ 1716 AF 01 00    	cmp a, 1
0017++ 1719 D0 33 17    	jleu strrev_end	; check string length. string len must be > 1
0018++ 171C 7D          	dec a
0019++ 171D FD 4E       	mov si, d	; beginning of string
0020++ 171F FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1721 59          	add d, a	; end of string
0022++ 1722 12          	mov a, c
0023++ 1723 FD 9B       	shr a		; divide by 2
0024++ 1725 39          	mov c, a	; C now counts the steps
0025++ 1726             strrev_L0:
0026++ 1726 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1727 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1728 3E          	mov [d], al	; store left char into right side
0029++ 1729 1B          	mov al, bl
0030++ 172A F7          	stosb		; store right-side char into left-side; increase DI
0031++ 172B 7E          	dec c
0032++ 172C 7F          	dec d
0033++ 172D C2 00 00    	cmp c, 0
0034++ 1730 C7 26 17    	jne strrev_L0
0035++ 1733             strrev_end:
0036++ 1733 4C          	popa
0037++ 1734 09          	ret
0038++ 1735             	
0039++ 1735             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1735             ; strchr
0041++ 1735             ; search string in D for char in AL
0042++ 1735             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1735             strchr:
0044++ 1735             strchr_L0:
0045++ 1735 32          	mov bl, [d]
0046++ 1736 C1 00       	cmp bl, 0
0047++ 1738 C6 43 17    	je strchr_end
0048++ 173B BA          	cmp al, bl
0049++ 173C C6 43 17    	je strchr_end
0050++ 173F 79          	inc d
0051++ 1740 0A 35 17    	jmp strchr_L0
0052++ 1743             strchr_end:
0053++ 1743 1B          	mov al, bl
0054++ 1744 09          	ret
0055++ 1745             
0056++ 1745             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1745             ; strstr
0058++ 1745             ; find sub-string
0059++ 1745             ; str1 in SI
0060++ 1745             ; str2 in DI
0061++ 1745             ; SI points to end of source string
0062++ 1745             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1745             strstr:
0064++ 1745 DB          	push al
0065++ 1746 DA          	push d
0066++ 1747 E3          	push di
0067++ 1748             strstr_loop:
0068++ 1748 F3          	cmpsb					; compare a byte of the strings
0069++ 1749 C7 54 17    	jne strstr_ret
0070++ 174C FC 00 00    	lea d, [di + 0]
0071++ 174F BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1751 C7 48 17    	jne strstr_loop				; equal chars but not at end
0073++ 1754             strstr_ret:
0074++ 1754 F0          	pop di
0075++ 1755 E7          	pop d
0076++ 1756 E8          	pop al
0077++ 1757 09          	ret
0078++ 1758             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1758             ; length of null terminated string
0080++ 1758             ; result in C
0081++ 1758             ; pointer in D
0082++ 1758             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1758             strlen:
0084++ 1758 DA          	push d
0085++ 1759 38 00 00    	mov c, 0
0086++ 175C             strlen_L1:
0087++ 175C BD 00       	cmp byte [d], 0
0088++ 175E C6 66 17    	je strlen_ret
0089++ 1761 79          	inc d
0090++ 1762 78          	inc c
0091++ 1763 0A 5C 17    	jmp strlen_L1
0092++ 1766             strlen_ret:
0093++ 1766 E7          	pop d
0094++ 1767 09          	ret
0095++ 1768             
0096++ 1768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1768             ; STRCMP
0098++ 1768             ; compare two strings
0099++ 1768             ; str1 in SI
0100++ 1768             ; str2 in DI
0101++ 1768             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1768             strcmp:
0104++ 1768 DB          	push al
0105++ 1769 DA          	push d
0106++ 176A E3          	push di
0107++ 176B E2          	push si
0108++ 176C             strcmp_loop:
0109++ 176C F3          	cmpsb					; compare a byte of the strings
0110++ 176D C7 78 17    	jne strcmp_ret
0111++ 1770 FB FF FF    	lea d, [si +- 1]
0112++ 1773 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1775 C7 6C 17    	jne strcmp_loop				; equal chars but not at end
0114++ 1778             strcmp_ret:
0115++ 1778 EF          	pop si
0116++ 1779 F0          	pop di
0117++ 177A E7          	pop d
0118++ 177B E8          	pop al
0119++ 177C 09          	ret
0120++ 177D             
0121++ 177D             
0122++ 177D             ; STRCPY
0123++ 177D             ; copy null terminated string from SI to DI
0124++ 177D             ; source in SI
0125++ 177D             ; destination in DI
0126++ 177D             strcpy:
0127++ 177D E2          	push si
0128++ 177E E3          	push di
0129++ 177F DB          	push al
0130++ 1780             strcpy_L1:
0131++ 1780 F6          	lodsb
0132++ 1781 F7          	stosb
0133++ 1782 B9 00       	cmp al, 0
0134++ 1784 C7 80 17    	jne strcpy_L1
0135++ 1787             strcpy_end:
0136++ 1787 E8          	pop al
0137++ 1788 F0          	pop di
0138++ 1789 EF          	pop si
0139++ 178A 09          	ret
0140++ 178B             
0141++ 178B             ; STRCAT
0142++ 178B             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 178B             ; source in SI
0144++ 178B             ; destination in DI
0145++ 178B             strcat:
0146++ 178B E2          	push si
0147++ 178C E3          	push di
0148++ 178D D7          	push a
0149++ 178E DA          	push d
0150++ 178F 50          	mov a, di
0151++ 1790 3C          	mov d, a
0152++ 1791             strcat_goto_end_L1:
0153++ 1791 BD 00       	cmp byte[d], 0
0154++ 1793 C6 9A 17    	je strcat_start
0155++ 1796 79          	inc d
0156++ 1797 0A 91 17    	jmp strcat_goto_end_L1
0157++ 179A             strcat_start:
0158++ 179A FD 50       	mov di, d
0159++ 179C             strcat_L1:
0160++ 179C F6          	lodsb
0161++ 179D F7          	stosb
0162++ 179E B9 00       	cmp al, 0
0163++ 17A0 C7 9C 17    	jne strcat_L1
0164++ 17A3             strcat_end:
0165++ 17A3 E7          	pop d
0166++ 17A4 E4          	pop a
0167++ 17A5 F0          	pop di
0168++ 17A6 EF          	pop si
0169++ 17A7 09          	ret
0005+  17A8             
0006+  17A8 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  17AC 34 35 36 37 
0006+  17B0 38 39 41 42 
0006+  17B4 43 44 45 46 
0007+  17B8 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  17BC 1B 5B 48 00 
0008+  17C0             
0009+  17C0 01 00       table_power:.dw 1
0010+  17C2 0A 00       			.dw 10
0011+  17C4 64 00       			.dw 100
0012+  17C6 E8 03       			.dw 1000
0013+  17C8 10 27       			.dw 10000
0014+  17CA             
0015+  17CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  17CA             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  17CA             ; ASCII in BL
0018+  17CA             ; result in AL
0019+  17CA             ; ascii for F = 0100 0110
0020+  17CA             ; ascii for 9 = 0011 1001
0021+  17CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  17CA             hex_ascii_encode:
0023+  17CA 1B          	mov al, bl
0024+  17CB 93 40       	test al, $40				; test if letter or number
0025+  17CD C7 D3 17    	jnz hex_letter
0026+  17D0 87 0F       	and al, $0F				; get number
0027+  17D2 09          	ret
0028+  17D3             hex_letter:
0029+  17D3 87 0F       	and al, $0F				; get letter
0030+  17D5 6A 09       	add al, 9
0031+  17D7 09          	ret
0032+  17D8             
0033+  17D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  17D8             ; ATOI
0035+  17D8             ; 2 letter hex string in B
0036+  17D8             ; 8bit integer returned in AL
0037+  17D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  17D8             atoi:
0039+  17D8 D8          	push b
0040+  17D9 07 CA 17    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  17DC 30          	mov bl, bh
0042+  17DD DB          	push al					; save a
0043+  17DE 07 CA 17    	call hex_ascii_encode
0044+  17E1 EA          	pop bl	
0045+  17E2 FD 9E 04    	shl al, 4
0046+  17E5 8C          	or al, bl
0047+  17E6 E5          	pop b
0048+  17E7 09          	ret	
0049+  17E8             
0050+  17E8             
0051+  17E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  17E8             ; printf
0053+  17E8             ; no need for explanations!
0054+  17E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  17E8             printf:
0056+  17E8 09          	ret
0057+  17E9             
0058+  17E9             
0059+  17E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  17E9             ; scanf
0061+  17E9             ; no need for explanations!
0062+  17E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  17E9             scanf:
0064+  17E9 09          	ret
0065+  17EA             
0066+  17EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  17EA             ; ITOA
0068+  17EA             ; 8bit value in BL
0069+  17EA             ; 2 byte ASCII result in A
0070+  17EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  17EA             itoa:
0072+  17EA DA          	push d
0073+  17EB D8          	push b
0074+  17EC A7 00       	mov bh, 0
0075+  17EE FD A4 04    	shr bl, 4	
0076+  17F1 74          	mov d, b
0077+  17F2 1F A8 17    	mov al, [d + s_hex_digits]
0078+  17F5 23          	mov ah, al
0079+  17F6             	
0080+  17F6 E5          	pop b
0081+  17F7 D8          	push b
0082+  17F8 A7 00       	mov bh, 0
0083+  17FA FD 87 0F    	and bl, $0F
0084+  17FD 74          	mov d, b
0085+  17FE 1F A8 17    	mov al, [d + s_hex_digits]
0086+  1801 E5          	pop b
0087+  1802 E7          	pop d
0088+  1803 09          	ret
0089+  1804             
0090+  1804             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  1804             ; HEX STRING TO BINARY
0092+  1804             ; di = destination address
0093+  1804             ; si = source
0094+  1804             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  1804             hex_to_int:
0096+  1804             hex_to_int_L1:
0097+  1804 F6          	lodsb					; load from [SI] to AL
0098+  1805 B9 00       	cmp al, 0				; check if ASCII 0
0099+  1807 C6 14 18    	jz hex_to_int_ret
0100+  180A 36          	mov bh, al
0101+  180B F6          	lodsb
0102+  180C 2F          	mov bl, al
0103+  180D 07 D8 17    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  1810 F7          	stosb					; store AL to [DI]
0105+  1811 0A 04 18    	jmp hex_to_int_L1
0106+  1814             hex_to_int_ret:
0107+  1814 09          	ret		
0108+  1815             
0109+  1815             
0110+  1815             
0111+  1815             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  1815             ; GETCHAR
0113+  1815             ; char in ah
0114+  1815             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  1815             getchar:
0116+  1815 DB          	push al
0117+  1816             getchar_retry:
0118+  1816 FD 0C       	sti
0119+  1818 19 01       	mov al, 1
0120+  181A 05 03       	syscall sys_io			; receive in AH
0121+  181C B9 00       	cmp al, 0			; check if any char was receive
0122+  181E C6 16 18    	je getchar_retry
0123+  1821 E8          	pop al
0124+  1822 09          	ret
0125+  1823             
0126+  1823             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  1823             ; PUTCHAR
0128+  1823             ; char in ah
0129+  1823             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1823             putchar:
0131+  1823 D7          	push a
0132+  1824 19 00       	mov al, 0
0133+  1826 05 03       	syscall sys_io			; char in AH
0134+  1828 E4          	pop a
0135+  1829 09          	ret
0136+  182A             
0137+  182A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  182A             ;; INPUT A STRING
0139+  182A             ;; terminates with null
0140+  182A             ;; pointer in D
0141+  182A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  182A             gets:
0143+  182A D7          	push a
0144+  182B DA          	push d
0145+  182C             gets_loop:
0146+  182C FD 0C       	sti
0147+  182E 19 01       	mov al, 1
0148+  1830 05 03       	syscall sys_io			; receive in AH
0149+  1832 B9 00       	cmp al, 0				; check error code (AL)
0150+  1834 C6 2C 18    	je gets_loop			; if no char received, retry
0151+  1837             
0152+  1837 76 1B       	cmp ah, 27
0153+  1839 C6 5A 18    	je gets_telnet_escape
0154+  183C 76 0A       	cmp ah, $0A				; LF
0155+  183E C6 B3 18    	je gets_end
0156+  1841 76 0D       	cmp ah, $0D				; CR
0157+  1843 C6 B3 18    	je gets_end
0158+  1846 76 5C       	cmp ah, $5C				; '\\'
0159+  1848 C6 8A 18    	je gets_escape
0160+  184B             	
0161+  184B 76 08       	cmp ah, $08			; check for backspace
0162+  184D C6 56 18    	je gets_backspace
0163+  1850             
0164+  1850 1A          	mov al, ah
0165+  1851 3E          	mov [d], al
0166+  1852 79          	inc d
0167+  1853 0A 2C 18    	jmp gets_loop
0168+  1856             gets_backspace:
0169+  1856 7F          	dec d
0170+  1857 0A 2C 18    	jmp gets_loop
0171+  185A             gets_telnet_escape:
0172+  185A FD 0C       	sti
0173+  185C 19 01       	mov al, 1
0174+  185E 05 03       	syscall sys_io				; receive in AH without echo
0175+  1860 B9 00       	cmp al, 0					; check error code (AL)
0176+  1862 C6 5A 18    	je gets_telnet_escape		; if no char received, retry
0177+  1865 76 5B       	cmp ah, '['
0178+  1867 C7 2C 18    	jne gets_loop
0179+  186A             gets_telnet_escape_phase2:
0180+  186A FD 0C       	sti
0181+  186C 19 01       	mov al, 1
0182+  186E 05 03       	syscall sys_io					; receive in AH without echo
0183+  1870 B9 00       	cmp al, 0						; check error code (AL)
0184+  1872 C6 6A 18    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  1875 76 44       	cmp ah, 'D'
0186+  1877 C6 82 18    	je gets_left_arrow
0187+  187A 76 43       	cmp ah, 'C'
0188+  187C C6 86 18    	je gets_right_arrow
0189+  187F 0A 2C 18    	jmp gets_loop
0190+  1882             gets_left_arrow:
0191+  1882 7F          	dec d
0192+  1883 0A 2C 18    	jmp gets_loop
0193+  1886             gets_right_arrow:
0194+  1886 79          	inc d
0195+  1887 0A 2C 18    	jmp gets_loop
0196+  188A             gets_escape:
0197+  188A FD 0C       	sti
0198+  188C 19 01       	mov al, 1
0199+  188E 05 03       	syscall sys_io			; receive in AH
0200+  1890 B9 00       	cmp al, 0				; check error code (AL)
0201+  1892 C6 8A 18    	je gets_escape			; if no char received, retry
0202+  1895 76 6E       	cmp ah, 'n'
0203+  1897 C6 A5 18    	je gets_LF
0204+  189A 76 72       	cmp ah, 'r'
0205+  189C C6 AC 18    	je gets_CR
0206+  189F 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  18A0 3E          	mov [d], al
0208+  18A1 79          	inc d
0209+  18A2 0A 2C 18    	jmp gets_loop
0210+  18A5             gets_LF:
0211+  18A5 19 0A       	mov al, $0A
0212+  18A7 3E          	mov [d], al
0213+  18A8 79          	inc d
0214+  18A9 0A 2C 18    	jmp gets_loop
0215+  18AC             gets_CR:
0216+  18AC 19 0D       	mov al, $0D
0217+  18AE 3E          	mov [d], al
0218+  18AF 79          	inc d
0219+  18B0 0A 2C 18    	jmp gets_loop
0220+  18B3             gets_end:
0221+  18B3 19 00       	mov al, 0
0222+  18B5 3E          	mov [d], al				; terminate string
0223+  18B6 E7          	pop d
0224+  18B7 E4          	pop a
0225+  18B8 09          	ret
0226+  18B9             
0227+  18B9             
0228+  18B9             
0229+  18B9             
0230+  18B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  18B9             ;; INPUT TEXT
0232+  18B9             ;; terminated with CTRL+D
0233+  18B9             ;; pointer in D
0234+  18B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  18B9             gettxt:
0236+  18B9 D7          	push a
0237+  18BA DA          	push d
0238+  18BB             gettxt_loop:
0239+  18BB 19 01       	mov al, 1
0240+  18BD 05 03       	syscall sys_io			; receive in AH
0241+  18BF B9 00       	cmp al, 0				; check error code (AL)
0242+  18C1 C6 BB 18    	je gettxt_loop		; if no char received, retry
0243+  18C4 76 04       	cmp ah, 4			; EOT
0244+  18C6 C6 04 19    	je gettxt_end
0245+  18C9 76 08       	cmp ah, $08			; check for backspace
0246+  18CB C6 00 19    	je gettxt_backspace
0247+  18CE 76 5C       	cmp ah, $5C				; '\\'
0248+  18D0 C6 D9 18    	je gettxt_escape
0249+  18D3 1A          	mov al, ah
0250+  18D4 3E          	mov [d], al
0251+  18D5 79          	inc d
0252+  18D6 0A BB 18    	jmp gettxt_loop
0253+  18D9             gettxt_escape:
0254+  18D9 19 01       	mov al, 1
0255+  18DB 05 03       	syscall sys_io			; receive in AH
0256+  18DD B9 00       	cmp al, 0				; check error code (AL)
0257+  18DF C6 D9 18    	je gettxt_escape		; if no char received, retry
0258+  18E2 76 6E       	cmp ah, 'n'
0259+  18E4 C6 F2 18    	je gettxt_LF
0260+  18E7 76 72       	cmp ah, 'r'
0261+  18E9 C6 F9 18    	je gettxt_CR
0262+  18EC 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  18ED 3E          	mov [d], al
0264+  18EE 79          	inc d
0265+  18EF 0A BB 18    	jmp gettxt_loop
0266+  18F2             gettxt_LF:
0267+  18F2 19 0A       	mov al, $0A
0268+  18F4 3E          	mov [d], al
0269+  18F5 79          	inc d
0270+  18F6 0A BB 18    	jmp gettxt_loop
0271+  18F9             gettxt_CR:
0272+  18F9 19 0D       	mov al, $0D
0273+  18FB 3E          	mov [d], al
0274+  18FC 79          	inc d
0275+  18FD 0A BB 18    	jmp gettxt_loop
0276+  1900             gettxt_backspace:
0277+  1900 7F          	dec d
0278+  1901 0A BB 18    	jmp gettxt_loop
0279+  1904             gettxt_end:
0280+  1904 19 00       	mov al, 0
0281+  1906 3E          	mov [d], al				; terminate string
0282+  1907 E7          	pop d
0283+  1908 E4          	pop a
0284+  1909 09          	ret
0285+  190A             
0286+  190A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  190A             ; PRINT NEW LINE
0288+  190A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  190A             printnl:
0290+  190A D7          	push a
0291+  190B 10 00 0A    	mov a, $0A00
0292+  190E 05 03       	syscall sys_io
0293+  1910 10 00 0D    	mov a, $0D00
0294+  1913 05 03       	syscall sys_io
0295+  1915 E4          	pop a
0296+  1916 09          	ret
0297+  1917             
0298+  1917             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  1917             ; strtoint
0300+  1917             ; 4 digit hex string number in d
0301+  1917             ; integer returned in A
0302+  1917             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  1917             strtointx:
0304+  1917 D8          	push b
0305+  1918 32          	mov bl, [d]
0306+  1919 37          	mov bh, bl
0307+  191A 33 01 00    	mov bl, [d + 1]
0308+  191D 07 D8 17    	call atoi				; convert to int in AL
0309+  1920 23          	mov ah, al				; move to AH
0310+  1921 33 02 00    	mov bl, [d + 2]
0311+  1924 37          	mov bh, bl
0312+  1925 33 03 00    	mov bl, [d + 3]
0313+  1928 07 D8 17    	call atoi				; convert to int in AL
0314+  192B E5          	pop b
0315+  192C 09          	ret
0316+  192D             
0317+  192D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  192D             ; strtoint
0319+  192D             ; 5 digit base10 string number in d
0320+  192D             ; integer returned in A
0321+  192D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  192D             strtoint:
0323+  192D E2          	push si
0324+  192E D8          	push b
0325+  192F D9          	push c
0326+  1930 DA          	push d
0327+  1931 07 58 17    	call strlen			; get string length in C
0328+  1934 7E          	dec c
0329+  1935 FD 4E       	mov si, d
0330+  1937 12          	mov a, c
0331+  1938 FD 99       	shl a
0332+  193A 3B C0 17    	mov d, table_power
0333+  193D 59          	add d, a
0334+  193E 38 00 00    	mov c, 0
0335+  1941             strtoint_L0:
0336+  1941 F6          	lodsb			; load ASCII to al
0337+  1942 B9 00       	cmp al, 0
0338+  1944 C6 57 19    	je strtoint_end
0339+  1947 6F 30       	sub al, $30		; make into integer
0340+  1949 22 00       	mov ah, 0
0341+  194B 2A          	mov b, [d]
0342+  194C AC          	mul a, b			; result in B since it fits in 16bits
0343+  194D 11          	mov a, b
0344+  194E 28          	mov b, c
0345+  194F 54          	add a, b
0346+  1950 39          	mov c, a
0347+  1951 63 02 00    	sub d, 2
0348+  1954 0A 41 19    	jmp strtoint_L0
0349+  1957             strtoint_end:
0350+  1957 12          	mov a, c
0351+  1958 E7          	pop d
0352+  1959 E6          	pop c
0353+  195A E5          	pop b
0354+  195B EF          	pop si
0355+  195C 09          	ret
0356+  195D             
0357+  195D             
0358+  195D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  195D             ; PRINT NULL TERMINATED STRING
0360+  195D             ; pointer in D
0361+  195D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  195D             puts:
0363+  195D D7          	push a
0364+  195E DA          	push d
0365+  195F             puts_L1:
0366+  195F 1E          	mov al, [d]
0367+  1960 B9 00       	cmp al, 0
0368+  1962 C6 6E 19    	jz puts_END
0369+  1965 23          	mov ah, al
0370+  1966 19 00       	mov al, 0
0371+  1968 05 03       	syscall sys_io
0372+  196A 79          	inc d
0373+  196B 0A 5F 19    	jmp puts_L1
0374+  196E             puts_END:
0375+  196E E7          	pop d
0376+  196F E4          	pop a
0377+  1970 09          	ret
0378+  1971             
0379+  1971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  1971             ; PRINT N SIZE STRING
0381+  1971             ; pointer in D
0382+  1971             ; size in C
0383+  1971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  1971             putsn:
0385+  1971 DB          	push al
0386+  1972 DA          	push d
0387+  1973 D9          	push c
0388+  1974             putsn_L0:
0389+  1974 1E          	mov al, [d]
0390+  1975 23          	mov ah, al
0391+  1976 19 00       	mov al, 0
0392+  1978 05 03       	syscall sys_io
0393+  197A 79          	inc d
0394+  197B 7E          	dec c	
0395+  197C C2 00 00    	cmp c, 0
0396+  197F C7 74 19    	jne putsn_L0
0397+  1982             putsn_end:
0398+  1982 E6          	pop c
0399+  1983 E7          	pop d
0400+  1984 E8          	pop al
0401+  1985 09          	ret
0402+  1986             
0403+  1986             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  1986             ; print 16bit decimal number
0405+  1986             ; input number in A
0406+  1986             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  1986             print_u16d:
0408+  1986 D7          	push a
0409+  1987 D8          	push b
0410+  1988 26 10 27    	mov b, 10000
0411+  198B AE          	div a, b			; get 10000 coeff.
0412+  198C 07 B2 19    	call print_number
0413+  198F 11          	mov a, b
0414+  1990 26 E8 03    	mov b, 1000
0415+  1993 AE          	div a, b			; get 10000 coeff.
0416+  1994 07 B2 19    	call print_number
0417+  1997 11          	mov a, b
0418+  1998 26 64 00    	mov b, 100
0419+  199B AE          	div a, b
0420+  199C 07 B2 19    	call print_number
0421+  199F 11          	mov a, b
0422+  19A0 26 0A 00    	mov b, 10
0423+  19A3 AE          	div a, b
0424+  19A4 07 B2 19    	call print_number
0425+  19A7 11          	mov a, b
0426+  19A8 6A 30       	add al, $30
0427+  19AA 23          	mov ah, al
0428+  19AB 19 00       	mov al, 0
0429+  19AD 05 03       	syscall sys_io	; print coeff
0430+  19AF E5          	pop b
0431+  19B0 E4          	pop a
0432+  19B1 09          	ret
0433+  19B2             
0434+  19B2             
0435+  19B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  19B2             ; if A == 0, print space
0437+  19B2             ; else print A
0438+  19B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  19B2             print_number:
0440+  19B2 6A 30       	add al, $30
0441+  19B4 23          	mov ah, al
0442+  19B5 07 23 18    	call putchar
0443+  19B8 09          	ret
0444+  19B9             
0445+  19B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  19B9             ; PRINT 16BIT HEX INTEGER
0447+  19B9             ; integer value in reg B
0448+  19B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  19B9             print_u16x:
0450+  19B9 D7          	push a
0451+  19BA D8          	push b
0452+  19BB DD          	push bl
0453+  19BC 30          	mov bl, bh
0454+  19BD 07 EA 17    	call itoa				; convert bh to char in A
0455+  19C0 2F          	mov bl, al				; save al
0456+  19C1 19 00       	mov al, 0
0457+  19C3 05 03       	syscall sys_io				; display AH
0458+  19C5 24          	mov ah, bl				; retrieve al
0459+  19C6 19 00       	mov al, 0
0460+  19C8 05 03       	syscall sys_io				; display AL
0461+  19CA             
0462+  19CA EA          	pop bl
0463+  19CB 07 EA 17    	call itoa				; convert bh to char in A
0464+  19CE 2F          	mov bl, al				; save al
0465+  19CF 19 00       	mov al, 0
0466+  19D1 05 03       	syscall sys_io				; display AH
0467+  19D3 24          	mov ah, bl				; retrieve al
0468+  19D4 19 00       	mov al, 0
0469+  19D6 05 03       	syscall sys_io				; display AL
0470+  19D8             
0471+  19D8 E5          	pop b
0472+  19D9 E4          	pop a
0473+  19DA 09          	ret
0474+  19DB             
0475+  19DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  19DB             ; INPUT 16BIT HEX INTEGER
0477+  19DB             ; read 16bit integer into A
0478+  19DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  19DB             scan_u16x:
0480+  19DB F8 10 00    	enter 16
0481+  19DE D8          	push b
0482+  19DF DA          	push d
0483+  19E0             
0484+  19E0 FA F1 FF    	lea d, [bp + -15]
0485+  19E3 07 2A 18    	call gets				; get number
0486+  19E6             
0487+  19E6 32          	mov bl, [d]
0488+  19E7 37          	mov bh, bl
0489+  19E8 33 01 00    	mov bl, [d + 1]
0490+  19EB 07 D8 17    	call atoi				; convert to int in AL
0491+  19EE 23          	mov ah, al				; move to AH
0492+  19EF             
0493+  19EF 33 02 00    	mov bl, [d + 2]
0494+  19F2 37          	mov bh, bl
0495+  19F3 33 03 00    	mov bl, [d + 3]
0496+  19F6 07 D8 17    	call atoi				; convert to int in AL
0497+  19F9             
0498+  19F9 E7          	pop d
0499+  19FA E5          	pop b
0500+  19FB F9          	leave
0501+  19FC 09          	ret
0502+  19FD             
0503+  19FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  19FD             ; PRINT 8bit HEX INTEGER
0505+  19FD             ; integer value in reg bl
0506+  19FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  19FD             print_u8x:
0508+  19FD D7          	push a
0509+  19FE DD          	push bl
0510+  19FF             
0511+  19FF 07 EA 17    	call itoa				; convert bl to char in A
0512+  1A02 2F          	mov bl, al				; save al
0513+  1A03 19 00       	mov al, 0
0514+  1A05 05 03       	syscall sys_io				; display AH
0515+  1A07 24          	mov ah, bl				; retrieve al
0516+  1A08 19 00       	mov al, 0
0517+  1A0A 05 03       	syscall sys_io				; display AL
0518+  1A0C             
0519+  1A0C EA          	pop bl
0520+  1A0D E4          	pop a
0521+  1A0E 09          	ret
0522+  1A0F             
0523+  1A0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  1A0F             ; print 8bit decimal unsigned number
0525+  1A0F             ; input number in AL
0526+  1A0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  1A0F             print_u8d:
0528+  1A0F D7          	push a
0529+  1A10 D8          	push b
0530+  1A11             
0531+  1A11 22 00       	mov ah, 0
0532+  1A13 26 64 00    	mov b, 100
0533+  1A16 AE          	div a, b
0534+  1A17 D8          	push b			; save remainder
0535+  1A18 B9 00       	cmp al, 0
0536+  1A1A C6 24 1A    	je skip100
0537+  1A1D 6A 30       	add al, $30
0538+  1A1F 23          	mov ah, al
0539+  1A20 19 00       	mov al, 0
0540+  1A22 05 03       	syscall sys_io	; print coeff
0541+  1A24             skip100:
0542+  1A24 E4          	pop a
0543+  1A25 22 00       	mov ah, 0
0544+  1A27 26 0A 00    	mov b, 10
0545+  1A2A AE          	div a, b
0546+  1A2B D8          	push b			; save remainder
0547+  1A2C B9 00       	cmp al, 0
0548+  1A2E C6 38 1A    	je skip10
0549+  1A31 6A 30       	add al, $30
0550+  1A33 23          	mov ah, al
0551+  1A34 19 00       	mov al, 0
0552+  1A36 05 03       	syscall sys_io	; print coeff
0553+  1A38             skip10:
0554+  1A38 E4          	pop a
0555+  1A39 1B          	mov al, bl
0556+  1A3A 6A 30       	add al, $30
0557+  1A3C 23          	mov ah, al
0558+  1A3D 19 00       	mov al, 0
0559+  1A3F 05 03       	syscall sys_io	; print coeff
0560+  1A41 E5          	pop b
0561+  1A42 E4          	pop a
0562+  1A43 09          	ret
0563+  1A44             
0564+  1A44             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  1A44             ; INPUT 8BIT HEX INTEGER
0566+  1A44             ; read 8bit integer into AL
0567+  1A44             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  1A44             scan_u8x:
0569+  1A44 F8 04 00    	enter 4
0570+  1A47 D8          	push b
0571+  1A48 DA          	push d
0572+  1A49             
0573+  1A49 FA FD FF    	lea d, [bp + -3]
0574+  1A4C 07 2A 18    	call gets				; get number
0575+  1A4F             
0576+  1A4F 32          	mov bl, [d]
0577+  1A50 37          	mov bh, bl
0578+  1A51 33 01 00    	mov bl, [d + 1]
0579+  1A54 07 D8 17    	call atoi				; convert to int in AL
0580+  1A57             
0581+  1A57 E7          	pop d
0582+  1A58 E5          	pop b
0583+  1A59 F9          	leave
0584+  1A5A 09          	ret
0585+  1A5B             
0586+  1A5B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  1A5B             ; input decimal number
0588+  1A5B             ; result in A
0589+  1A5B             ; 655'\0'
0590+  1A5B             ; low--------high
0591+  1A5B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  1A5B             scan_u16d:
0593+  1A5B F8 08 00    	enter 8
0594+  1A5E E2          	push si
0595+  1A5F D8          	push b
0596+  1A60 D9          	push c
0597+  1A61 DA          	push d
0598+  1A62 FA F9 FF    	lea d, [bp +- 7]
0599+  1A65 07 2A 18    	call gets
0600+  1A68 07 58 17    	call strlen			; get string length in C
0601+  1A6B 7E          	dec c
0602+  1A6C FD 4E       	mov si, d
0603+  1A6E 12          	mov a, c
0604+  1A6F FD 99       	shl a
0605+  1A71 3B C0 17    	mov d, table_power
0606+  1A74 59          	add d, a
0607+  1A75 38 00 00    	mov c, 0
0608+  1A78             mul_loop:
0609+  1A78 F6          	lodsb			; load ASCII to al
0610+  1A79 B9 00       	cmp al, 0
0611+  1A7B C6 8E 1A    	je mul_exit
0612+  1A7E 6F 30       	sub al, $30		; make into integer
0613+  1A80 22 00       	mov ah, 0
0614+  1A82 2A          	mov b, [d]
0615+  1A83 AC          	mul a, b			; result in B since it fits in 16bits
0616+  1A84 11          	mov a, b
0617+  1A85 28          	mov b, c
0618+  1A86 54          	add a, b
0619+  1A87 39          	mov c, a
0620+  1A88 63 02 00    	sub d, 2
0621+  1A8B 0A 78 1A    	jmp mul_loop
0622+  1A8E             mul_exit:
0623+  1A8E 12          	mov a, c
0624+  1A8F E7          	pop d
0625+  1A90 E6          	pop c
0626+  1A91 E5          	pop b
0627+  1A92 EF          	pop si
0628+  1A93 F9          	leave
0629+  1A94 09          	ret
1161   1A95             ; --- END INCLUDE BLOCK
1162   1A95             
1163   1A95             
1164   1A95             .end
tasm: Number of errors = 0
