0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 FD FA 01 00   lea d, [sp + 1]
0012   0409 10 FF FF      mov a, $ffff
0013   040C 43            mov [d], a
0014   040D 52 02 00      sub sp, 2 ; i2
0015   0410 FD FA 01 00   lea d, [sp + 1]
0016   0414 10 41 00      mov a, $41
0017   0417 43            mov [d], a
0018   0418 52 01 00      sub sp, 1 ; c
0019   041B FD FA 01 00   lea d, [sp + 1]
0020   041F 19 48         mov al, $48
0021   0421 3E            mov [d], al
0022   0422 52 01 00      sub sp, 1 ; c2
0023   0425 FD FA 01 00   lea d, [sp + 1]
0024   0429 19 42         mov al, $42
0025   042B 3E            mov [d], al
0026   042C 2C FF FF      mov b, [bp + -1] ; i
0027   042F FD AB         swp b
0028   0431 D8            push b
0029   0432 07 A0 04      call print_num
0030   0435 51 02 00      add sp, 2
0031   0438 26 CA 05      mov b, __string_0 ; "\n"
0032   043B FD AB         swp b
0033   043D D8            push b
0034   043E 07 BF 05      call print
0035   0441 51 02 00      add sp, 2
0036   0444 F9            leave
0037   0445 05 0B         syscall sys_terminate_proc
0038   0447             
0039   0447             _gets:
0040   0447 D2            push bp
0041   0448 9B            mov bp, sp
0042   0449             
0043   0449             ; --- BEGIN INLINE ASM BLOCK
0044   0449 17 05 00      mov a, [bp + 5]
0045   044C 3C            mov d, a
0046   044D 07 E5 06      call gets
0047   0450             ; --- END INLINE ASM BLOCK
0048   0450             
0049   0450 F9            leave
0050   0451 09            ret
0051   0452             
0052   0452             _strlen:
0053   0452 D2            push bp
0054   0453 9B            mov bp, sp
0055   0454 52 02 00      sub sp, 2 ; length
0056   0457 26 00 00      mov b, 0
0057   045A D7            push a
0058   045B 11            mov a, b
0059   045C 45 FF FF      mov [bp + -1], a ; length
0060   045F E4            pop a
0061   0460             _while1_cond:
0062   0460 FA 05 00      lea d, [bp + 5] ; str
0063   0463 2A            mov b, [d]
0064   0464 D7            push a
0065   0465 74            mov d, b
0066   0466 DA            push d
0067   0467 2C FF FF      mov b, [bp + -1] ; length
0068   046A E7            pop d
0069   046B 10 01 00      mov a, 1
0070   046E AC            mul a, b
0071   046F 5A            add d, b
0072   0470 E4            pop a
0073   0471 32            mov bl, [d]
0074   0472 A7 00         mov bh, 0
0075   0474 D7            push a
0076   0475 11            mov a, b
0077   0476 26 00 00      mov b, 0
0078   0479 B0            cmp a, b
0079   047A 0E            lodflgs
0080   047B 87 01         and al, %00000001
0081   047D 8F 01         xor al, %00000001 ; !=
0082   047F 22 00         mov ah, 0
0083   0481 27            mov b, a
0084   0482 E4            pop a
0085   0483 C0 00 00      cmp b, 0
0086   0486 C6 9B 04      je _while1_exit
0087   0489             _while1_block:
0088   0489 2C FF FF      mov b, [bp + -1] ; length
0089   048C D7            push a
0090   048D 11            mov a, b
0091   048E FD 77         inc b
0092   0490 D7            push a
0093   0491 11            mov a, b
0094   0492 45 FF FF      mov [bp + -1], a ; length
0095   0495 E4            pop a
0096   0496 27            mov b, a
0097   0497 E4            pop a
0098   0498 0A 60 04      jmp _while1_cond
0099   049B             _while1_exit:
0100   049B 2C FF FF      mov b, [bp + -1] ; length
0101   049E F9            leave
0102   049F 09            ret
0103   04A0             
0104   04A0             print_num:
0105   04A0 D2            push bp
0106   04A1 9B            mov bp, sp
0107   04A2 52 05 00      sub sp, 5 ; digits
0108   04A5 52 02 00      sub sp, 2 ; i
0109   04A8 26 00 00      mov b, 0
0110   04AB D7            push a
0111   04AC 11            mov a, b
0112   04AD 45 FA FF      mov [bp + -6], a ; i
0113   04B0 E4            pop a
0114   04B1             _if2_cond:
0115   04B1 2C 05 00      mov b, [bp + 5] ; num
0116   04B4 D7            push a
0117   04B5 11            mov a, b
0118   04B6 26 00 00      mov b, 0
0119   04B9 B0            cmp a, b
0120   04BA 0E            lodflgs
0121   04BB 87 01         and al, %00000001 ; ==
0122   04BD 22 00         mov ah, 0
0123   04BF 27            mov b, a
0124   04C0 E4            pop a
0125   04C1 C0 00 00      cmp b, 0
0126   04C4 C6 D6 04      je _if2_exit
0127   04C7             _if2_true:
0128   04C7 26 30 00      mov b, $30
0129   04CA DD            push bl
0130   04CB 07 A4 05      call _putchar
0131   04CE 51 01 00      add sp, 1
0132   04D1 F9            leave
0133   04D2 09            ret
0134   04D3 0A D6 04      jmp _if2_exit
0135   04D6             _if2_exit:
0136   04D6             _while3_cond:
0137   04D6 2C 05 00      mov b, [bp + 5] ; num
0138   04D9 D7            push a
0139   04DA 11            mov a, b
0140   04DB 26 00 00      mov b, 0
0141   04DE B0            cmp a, b
0142   04DF 0E            lodflgs
0143   04E0 2F            mov bl, al
0144   04E1 FD 78         mov g, a
0145   04E3 FD A2 03      shr al, 3
0146   04E6 FD A4 02      shr bl, 2
0147   04E9 FD 87 01      and bl, %00000001
0148   04EC 90            xor al, bl
0149   04ED FD 27         mov b, g
0150   04EF FD 87 01      and bl, %00000001
0151   04F2 8C            or al, bl
0152   04F3 8F 01         xor al, %00000001 ; > (signed)
0153   04F5 22 00         mov ah, 0
0154   04F7 27            mov b, a
0155   04F8 E4            pop a
0156   04F9 C0 00 00      cmp b, 0
0157   04FC C6 4C 05      je _while3_exit
0158   04FF             _while3_block:
0159   04FF FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0160   0502 2D            mov b, d
0161   0503 D7            push a
0162   0504 74            mov d, b
0163   0505 DA            push d
0164   0506 2C FA FF      mov b, [bp + -6] ; i
0165   0509 E7            pop d
0166   050A 10 01 00      mov a, 1
0167   050D AC            mul a, b
0168   050E 5A            add d, b
0169   050F E4            pop a
0170   0510 DA            push d
0171   0511 26 30 00      mov b, $30
0172   0514 D7            push a
0173   0515 11            mov a, b
0174   0516 2C 05 00      mov b, [bp + 5] ; num
0175   0519 D7            push a
0176   051A 11            mov a, b
0177   051B 26 0A 00      mov b, 10
0178   051E AE            div a, b
0179   051F E4            pop a
0180   0520 56            add b, a
0181   0521 E4            pop a
0182   0522 E7            pop d
0183   0523 FD 3E         mov [d], bl
0184   0525 2C 05 00      mov b, [bp + 5] ; num
0185   0528 D7            push a
0186   0529 11            mov a, b
0187   052A 26 0A 00      mov b, 10
0188   052D AE            div a, b
0189   052E FD 78         mov g, a
0190   0530 11            mov a, b
0191   0531 FD 27         mov b, g
0192   0533 E4            pop a
0193   0534 D7            push a
0194   0535 11            mov a, b
0195   0536 45 05 00      mov [bp + 5], a ; num
0196   0539 E4            pop a
0197   053A 2C FA FF      mov b, [bp + -6] ; i
0198   053D D7            push a
0199   053E 11            mov a, b
0200   053F FD 77         inc b
0201   0541 D7            push a
0202   0542 11            mov a, b
0203   0543 45 FA FF      mov [bp + -6], a ; i
0204   0546 E4            pop a
0205   0547 27            mov b, a
0206   0548 E4            pop a
0207   0549 0A D6 04      jmp _while3_cond
0208   054C             _while3_exit:
0209   054C             _while4_cond:
0210   054C 2C FA FF      mov b, [bp + -6] ; i
0211   054F D7            push a
0212   0550 11            mov a, b
0213   0551 26 00 00      mov b, 0
0214   0554 B0            cmp a, b
0215   0555 0E            lodflgs
0216   0556 2F            mov bl, al
0217   0557 FD 78         mov g, a
0218   0559 FD A2 03      shr al, 3
0219   055C FD A4 02      shr bl, 2
0220   055F FD 87 01      and bl, %00000001
0221   0562 90            xor al, bl
0222   0563 FD 27         mov b, g
0223   0565 FD 87 01      and bl, %00000001
0224   0568 8C            or al, bl
0225   0569 8F 01         xor al, %00000001 ; > (signed)
0226   056B 22 00         mov ah, 0
0227   056D 27            mov b, a
0228   056E E4            pop a
0229   056F C0 00 00      cmp b, 0
0230   0572 C6 A2 05      je _while4_exit
0231   0575             _while4_block:
0232   0575 2C FA FF      mov b, [bp + -6] ; i
0233   0578 D7            push a
0234   0579 11            mov a, b
0235   057A FD 7D         dec b
0236   057C D7            push a
0237   057D 11            mov a, b
0238   057E 45 FA FF      mov [bp + -6], a ; i
0239   0581 E4            pop a
0240   0582 27            mov b, a
0241   0583 E4            pop a
0242   0584 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0243   0587 2D            mov b, d
0244   0588 D7            push a
0245   0589 74            mov d, b
0246   058A DA            push d
0247   058B 2C FA FF      mov b, [bp + -6] ; i
0248   058E E7            pop d
0249   058F 10 01 00      mov a, 1
0250   0592 AC            mul a, b
0251   0593 5A            add d, b
0252   0594 E4            pop a
0253   0595 32            mov bl, [d]
0254   0596 A7 00         mov bh, 0
0255   0598 DD            push bl
0256   0599 07 A4 05      call _putchar
0257   059C 51 01 00      add sp, 1
0258   059F 0A 4C 05      jmp _while4_cond
0259   05A2             _while4_exit:
0260   05A2 F9            leave
0261   05A3 09            ret
0262   05A4             
0263   05A4             _putchar:
0264   05A4 D2            push bp
0265   05A5 9B            mov bp, sp
0266   05A6             
0267   05A6             ; --- BEGIN INLINE ASM BLOCK
0268   05A6 20 05 00      mov al, [bp + 5]
0269   05A9 23            mov ah, al
0270   05AA 07 DE 06      call putchar
0271   05AD             ; --- END INLINE ASM BLOCK
0272   05AD             
0273   05AD F9            leave
0274   05AE 09            ret
0275   05AF             
0276   05AF             scann:
0277   05AF D2            push bp
0278   05B0 9B            mov bp, sp
0279   05B1 52 02 00      sub sp, 2 ; m
0280   05B4             
0281   05B4             ; --- BEGIN INLINE ASM BLOCK
0282   05B4 07 12 09      call scan_u16d
0283   05B7 45 FF FF      mov [bp + -1], a
0284   05BA             ; --- END INLINE ASM BLOCK
0285   05BA             
0286   05BA 2C FF FF      mov b, [bp + -1] ; m
0287   05BD F9            leave
0288   05BE 09            ret
0289   05BF             
0290   05BF             print:
0291   05BF D2            push bp
0292   05C0 9B            mov bp, sp
0293   05C1             
0294   05C1             ; --- BEGIN INLINE ASM BLOCK
0295   05C1 17 05 00      mov a, [bp + 5]
0296   05C4 3C            mov d, a
0297   05C5 07 18 08      call puts
0298   05C8             ; --- END INLINE ASM BLOCK
0299   05C8             
0300   05C8 F9            leave
0301   05C9 09            ret
0302   05CA             ; --- END TEXT BLOCK
0303   05CA             
0304   05CA             ; --- BEGIN DATA BLOCK
0305   05CA 0A 00       __string_0: .db "\n", 0
0306   05CC             ; --- END DATA BLOCK
0307   05CC             
0308   05CC             ; --- BEGIN INCLUDE BLOCK
0309   05CC             .include "lib/stdio.asm"
0001+  05CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  05CC             ; stdio.s
0003+  05CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  05CC             .include "lib/string.asm"
0001++ 05CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 05CC             ; string.s
0003++ 05CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 05CC             
0005++ 05CC             
0006++ 05CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 05CC             ; strrev
0008++ 05CC             ; reverse a string
0009++ 05CC             ; D = string address
0010++ 05CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 05CC             ; 01234
0012++ 05CC             strrev:
0013++ 05CC 4B          	pusha
0014++ 05CD 07 13 06    	call strlen	; length in C
0015++ 05D0 12          	mov a, c
0016++ 05D1 AF 01 00    	cmp a, 1
0017++ 05D4 D0 EE 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 05D7 7D          	dec a
0019++ 05D8 FD 4E       	mov si, d	; beginning of string
0020++ 05DA FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 05DC 59          	add d, a	; end of string
0022++ 05DD 12          	mov a, c
0023++ 05DE FD 9B       	shr a		; divide by 2
0024++ 05E0 39          	mov c, a	; C now counts the steps
0025++ 05E1             strrev_L0:
0026++ 05E1 32          	mov bl, [d]	; save load right-side char into BL
0027++ 05E2 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 05E3 3E          	mov [d], al	; store left char into right side
0029++ 05E4 1B          	mov al, bl
0030++ 05E5 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 05E6 7E          	dec c
0032++ 05E7 7F          	dec d
0033++ 05E8 C2 00 00    	cmp c, 0
0034++ 05EB C7 E1 05    	jne strrev_L0
0035++ 05EE             strrev_end:
0036++ 05EE 4C          	popa
0037++ 05EF 09          	ret
0038++ 05F0             	
0039++ 05F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 05F0             ; strchr
0041++ 05F0             ; search string in D for char in AL
0042++ 05F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 05F0             strchr:
0044++ 05F0             strchr_L0:
0045++ 05F0 32          	mov bl, [d]
0046++ 05F1 C1 00       	cmp bl, 0
0047++ 05F3 C6 FE 05    	je strchr_end
0048++ 05F6 BA          	cmp al, bl
0049++ 05F7 C6 FE 05    	je strchr_end
0050++ 05FA 79          	inc d
0051++ 05FB 0A F0 05    	jmp strchr_L0
0052++ 05FE             strchr_end:
0053++ 05FE 1B          	mov al, bl
0054++ 05FF 09          	ret
0055++ 0600             
0056++ 0600             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0600             ; strstr
0058++ 0600             ; find sub-string
0059++ 0600             ; str1 in SI
0060++ 0600             ; str2 in DI
0061++ 0600             ; SI points to end of source string
0062++ 0600             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0600             strstr:
0064++ 0600 DB          	push al
0065++ 0601 DA          	push d
0066++ 0602 E3          	push di
0067++ 0603             strstr_loop:
0068++ 0603 F3          	cmpsb					; compare a byte of the strings
0069++ 0604 C7 0F 06    	jne strstr_ret
0070++ 0607 FC 00 00    	lea d, [di + 0]
0071++ 060A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 060C C7 03 06    	jne strstr_loop				; equal chars but not at end
0073++ 060F             strstr_ret:
0074++ 060F F0          	pop di
0075++ 0610 E7          	pop d
0076++ 0611 E8          	pop al
0077++ 0612 09          	ret
0078++ 0613             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0613             ; length of null terminated string
0080++ 0613             ; result in C
0081++ 0613             ; pointer in D
0082++ 0613             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0613             strlen:
0084++ 0613 DA          	push d
0085++ 0614 38 00 00    	mov c, 0
0086++ 0617             strlen_L1:
0087++ 0617 BD 00       	cmp byte [d], 0
0088++ 0619 C6 21 06    	je strlen_ret
0089++ 061C 79          	inc d
0090++ 061D 78          	inc c
0091++ 061E 0A 17 06    	jmp strlen_L1
0092++ 0621             strlen_ret:
0093++ 0621 E7          	pop d
0094++ 0622 09          	ret
0095++ 0623             
0096++ 0623             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0623             ; STRCMP
0098++ 0623             ; compare two strings
0099++ 0623             ; str1 in SI
0100++ 0623             ; str2 in DI
0101++ 0623             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0623             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0623             strcmp:
0104++ 0623 DB          	push al
0105++ 0624 DA          	push d
0106++ 0625 E3          	push di
0107++ 0626 E2          	push si
0108++ 0627             strcmp_loop:
0109++ 0627 F3          	cmpsb					; compare a byte of the strings
0110++ 0628 C7 33 06    	jne strcmp_ret
0111++ 062B FB FF FF    	lea d, [si +- 1]
0112++ 062E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0630 C7 27 06    	jne strcmp_loop				; equal chars but not at end
0114++ 0633             strcmp_ret:
0115++ 0633 EF          	pop si
0116++ 0634 F0          	pop di
0117++ 0635 E7          	pop d
0118++ 0636 E8          	pop al
0119++ 0637 09          	ret
0120++ 0638             
0121++ 0638             
0122++ 0638             ; STRCPY
0123++ 0638             ; copy null terminated string from SI to DI
0124++ 0638             ; source in SI
0125++ 0638             ; destination in DI
0126++ 0638             strcpy:
0127++ 0638 E2          	push si
0128++ 0639 E3          	push di
0129++ 063A DB          	push al
0130++ 063B             strcpy_L1:
0131++ 063B F6          	lodsb
0132++ 063C F7          	stosb
0133++ 063D B9 00       	cmp al, 0
0134++ 063F C7 3B 06    	jne strcpy_L1
0135++ 0642             strcpy_end:
0136++ 0642 E8          	pop al
0137++ 0643 F0          	pop di
0138++ 0644 EF          	pop si
0139++ 0645 09          	ret
0140++ 0646             
0141++ 0646             ; STRCAT
0142++ 0646             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0646             ; source in SI
0144++ 0646             ; destination in DI
0145++ 0646             strcat:
0146++ 0646 E2          	push si
0147++ 0647 E3          	push di
0148++ 0648 D7          	push a
0149++ 0649 DA          	push d
0150++ 064A 50          	mov a, di
0151++ 064B 3C          	mov d, a
0152++ 064C             strcat_goto_end_L1:
0153++ 064C BD 00       	cmp byte[d], 0
0154++ 064E C6 55 06    	je strcat_start
0155++ 0651 79          	inc d
0156++ 0652 0A 4C 06    	jmp strcat_goto_end_L1
0157++ 0655             strcat_start:
0158++ 0655 FD 50       	mov di, d
0159++ 0657             strcat_L1:
0160++ 0657 F6          	lodsb
0161++ 0658 F7          	stosb
0162++ 0659 B9 00       	cmp al, 0
0163++ 065B C7 57 06    	jne strcat_L1
0164++ 065E             strcat_end:
0165++ 065E E7          	pop d
0166++ 065F E4          	pop a
0167++ 0660 F0          	pop di
0168++ 0661 EF          	pop si
0169++ 0662 09          	ret
0005+  0663             
0006+  0663 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0667 34 35 36 37 
0006+  066B 38 39 41 42 
0006+  066F 43 44 45 46 
0007+  0673 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0677 1B 5B 48 00 
0008+  067B             
0009+  067B 01 00       table_power:.dw 1
0010+  067D 0A 00       			.dw 10
0011+  067F 64 00       			.dw 100
0012+  0681 E8 03       			.dw 1000
0013+  0683 10 27       			.dw 10000
0014+  0685             
0015+  0685             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0685             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0685             ; ASCII in BL
0018+  0685             ; result in AL
0019+  0685             ; ascii for F = 0100 0110
0020+  0685             ; ascii for 9 = 0011 1001
0021+  0685             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0685             hex_ascii_encode:
0023+  0685 1B          	mov al, bl
0024+  0686 93 40       	test al, $40				; test if letter or number
0025+  0688 C7 8E 06    	jnz hex_letter
0026+  068B 87 0F       	and al, $0F				; get number
0027+  068D 09          	ret
0028+  068E             hex_letter:
0029+  068E 87 0F       	and al, $0F				; get letter
0030+  0690 6A 09       	add al, 9
0031+  0692 09          	ret
0032+  0693             
0033+  0693             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0693             ; ATOI
0035+  0693             ; 2 letter hex string in B
0036+  0693             ; 8bit integer returned in AL
0037+  0693             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0693             atoi:
0039+  0693 D8          	push b
0040+  0694 07 85 06    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0697 30          	mov bl, bh
0042+  0698 DB          	push al					; save a
0043+  0699 07 85 06    	call hex_ascii_encode
0044+  069C EA          	pop bl	
0045+  069D FD 9E 04    	shl al, 4
0046+  06A0 8C          	or al, bl
0047+  06A1 E5          	pop b
0048+  06A2 09          	ret	
0049+  06A3             
0050+  06A3             
0051+  06A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  06A3             ; printf
0053+  06A3             ; no need for explanations!
0054+  06A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  06A3             printf:
0056+  06A3 09          	ret
0057+  06A4             
0058+  06A4             
0059+  06A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  06A4             ; scanf
0061+  06A4             ; no need for explanations!
0062+  06A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  06A4             scanf:
0064+  06A4 09          	ret
0065+  06A5             
0066+  06A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  06A5             ; ITOA
0068+  06A5             ; 8bit value in BL
0069+  06A5             ; 2 byte ASCII result in A
0070+  06A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  06A5             itoa:
0072+  06A5 DA          	push d
0073+  06A6 D8          	push b
0074+  06A7 A7 00       	mov bh, 0
0075+  06A9 FD A4 04    	shr bl, 4	
0076+  06AC 74          	mov d, b
0077+  06AD 1F 63 06    	mov al, [d + s_hex_digits]
0078+  06B0 23          	mov ah, al
0079+  06B1             	
0080+  06B1 E5          	pop b
0081+  06B2 D8          	push b
0082+  06B3 A7 00       	mov bh, 0
0083+  06B5 FD 87 0F    	and bl, $0F
0084+  06B8 74          	mov d, b
0085+  06B9 1F 63 06    	mov al, [d + s_hex_digits]
0086+  06BC E5          	pop b
0087+  06BD E7          	pop d
0088+  06BE 09          	ret
0089+  06BF             
0090+  06BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  06BF             ; HEX STRING TO BINARY
0092+  06BF             ; di = destination address
0093+  06BF             ; si = source
0094+  06BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  06BF             hex_to_int:
0096+  06BF             hex_to_int_L1:
0097+  06BF F6          	lodsb					; load from [SI] to AL
0098+  06C0 B9 00       	cmp al, 0				; check if ASCII 0
0099+  06C2 C6 CF 06    	jz hex_to_int_ret
0100+  06C5 36          	mov bh, al
0101+  06C6 F6          	lodsb
0102+  06C7 2F          	mov bl, al
0103+  06C8 07 93 06    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  06CB F7          	stosb					; store AL to [DI]
0105+  06CC 0A BF 06    	jmp hex_to_int_L1
0106+  06CF             hex_to_int_ret:
0107+  06CF 09          	ret		
0108+  06D0             
0109+  06D0             
0110+  06D0             
0111+  06D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  06D0             ; GETCHAR
0113+  06D0             ; char in ah
0114+  06D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  06D0             getchar:
0116+  06D0 DB          	push al
0117+  06D1             getchar_retry:
0118+  06D1 FD 0C       	sti
0119+  06D3 19 01       	mov al, 1
0120+  06D5 05 03       	syscall sys_io			; receive in AH
0121+  06D7 B9 00       	cmp al, 0			; check if any char was receive
0122+  06D9 C6 D1 06    	je getchar_retry
0123+  06DC E8          	pop al
0124+  06DD 09          	ret
0125+  06DE             
0126+  06DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  06DE             ; PUTCHAR
0128+  06DE             ; char in ah
0129+  06DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  06DE             putchar:
0131+  06DE D7          	push a
0132+  06DF 19 00       	mov al, 0
0133+  06E1 05 03       	syscall sys_io			; char in AH
0134+  06E3 E4          	pop a
0135+  06E4 09          	ret
0136+  06E5             
0137+  06E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  06E5             ;; INPUT A STRING
0139+  06E5             ;; terminates with null
0140+  06E5             ;; pointer in D
0141+  06E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  06E5             gets:
0143+  06E5 D7          	push a
0144+  06E6 DA          	push d
0145+  06E7             gets_loop:
0146+  06E7 FD 0C       	sti
0147+  06E9 19 01       	mov al, 1
0148+  06EB 05 03       	syscall sys_io			; receive in AH
0149+  06ED B9 00       	cmp al, 0				; check error code (AL)
0150+  06EF C6 E7 06    	je gets_loop			; if no char received, retry
0151+  06F2             
0152+  06F2 76 1B       	cmp ah, 27
0153+  06F4 C6 15 07    	je gets_telnet_escape
0154+  06F7 76 0A       	cmp ah, $0A				; LF
0155+  06F9 C6 6E 07    	je gets_end
0156+  06FC 76 0D       	cmp ah, $0D				; CR
0157+  06FE C6 6E 07    	je gets_end
0158+  0701 76 5C       	cmp ah, $5C				; '\\'
0159+  0703 C6 45 07    	je gets_escape
0160+  0706             	
0161+  0706 76 08       	cmp ah, $08			; check for backspace
0162+  0708 C6 11 07    	je gets_backspace
0163+  070B             
0164+  070B 1A          	mov al, ah
0165+  070C 3E          	mov [d], al
0166+  070D 79          	inc d
0167+  070E 0A E7 06    	jmp gets_loop
0168+  0711             gets_backspace:
0169+  0711 7F          	dec d
0170+  0712 0A E7 06    	jmp gets_loop
0171+  0715             gets_telnet_escape:
0172+  0715 FD 0C       	sti
0173+  0717 19 01       	mov al, 1
0174+  0719 05 03       	syscall sys_io				; receive in AH without echo
0175+  071B B9 00       	cmp al, 0					; check error code (AL)
0176+  071D C6 15 07    	je gets_telnet_escape		; if no char received, retry
0177+  0720 76 5B       	cmp ah, '['
0178+  0722 C7 E7 06    	jne gets_loop
0179+  0725             gets_telnet_escape_phase2:
0180+  0725 FD 0C       	sti
0181+  0727 19 01       	mov al, 1
0182+  0729 05 03       	syscall sys_io					; receive in AH without echo
0183+  072B B9 00       	cmp al, 0						; check error code (AL)
0184+  072D C6 25 07    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0730 76 44       	cmp ah, 'D'
0186+  0732 C6 3D 07    	je gets_left_arrow
0187+  0735 76 43       	cmp ah, 'C'
0188+  0737 C6 41 07    	je gets_right_arrow
0189+  073A 0A E7 06    	jmp gets_loop
0190+  073D             gets_left_arrow:
0191+  073D 7F          	dec d
0192+  073E 0A E7 06    	jmp gets_loop
0193+  0741             gets_right_arrow:
0194+  0741 79          	inc d
0195+  0742 0A E7 06    	jmp gets_loop
0196+  0745             gets_escape:
0197+  0745 FD 0C       	sti
0198+  0747 19 01       	mov al, 1
0199+  0749 05 03       	syscall sys_io			; receive in AH
0200+  074B B9 00       	cmp al, 0				; check error code (AL)
0201+  074D C6 45 07    	je gets_escape			; if no char received, retry
0202+  0750 76 6E       	cmp ah, 'n'
0203+  0752 C6 60 07    	je gets_LF
0204+  0755 76 72       	cmp ah, 'r'
0205+  0757 C6 67 07    	je gets_CR
0206+  075A 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  075B 3E          	mov [d], al
0208+  075C 79          	inc d
0209+  075D 0A E7 06    	jmp gets_loop
0210+  0760             gets_LF:
0211+  0760 19 0A       	mov al, $0A
0212+  0762 3E          	mov [d], al
0213+  0763 79          	inc d
0214+  0764 0A E7 06    	jmp gets_loop
0215+  0767             gets_CR:
0216+  0767 19 0D       	mov al, $0D
0217+  0769 3E          	mov [d], al
0218+  076A 79          	inc d
0219+  076B 0A E7 06    	jmp gets_loop
0220+  076E             gets_end:
0221+  076E 19 00       	mov al, 0
0222+  0770 3E          	mov [d], al				; terminate string
0223+  0771 E7          	pop d
0224+  0772 E4          	pop a
0225+  0773 09          	ret
0226+  0774             
0227+  0774             
0228+  0774             
0229+  0774             
0230+  0774             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0774             ;; INPUT TEXT
0232+  0774             ;; terminated with CTRL+D
0233+  0774             ;; pointer in D
0234+  0774             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0774             gettxt:
0236+  0774 D7          	push a
0237+  0775 DA          	push d
0238+  0776             gettxt_loop:
0239+  0776 19 01       	mov al, 1
0240+  0778 05 03       	syscall sys_io			; receive in AH
0241+  077A B9 00       	cmp al, 0				; check error code (AL)
0242+  077C C6 76 07    	je gettxt_loop		; if no char received, retry
0243+  077F 76 04       	cmp ah, 4			; EOT
0244+  0781 C6 BF 07    	je gettxt_end
0245+  0784 76 08       	cmp ah, $08			; check for backspace
0246+  0786 C6 BB 07    	je gettxt_backspace
0247+  0789 76 5C       	cmp ah, $5C				; '\\'
0248+  078B C6 94 07    	je gettxt_escape
0249+  078E 1A          	mov al, ah
0250+  078F 3E          	mov [d], al
0251+  0790 79          	inc d
0252+  0791 0A 76 07    	jmp gettxt_loop
0253+  0794             gettxt_escape:
0254+  0794 19 01       	mov al, 1
0255+  0796 05 03       	syscall sys_io			; receive in AH
0256+  0798 B9 00       	cmp al, 0				; check error code (AL)
0257+  079A C6 94 07    	je gettxt_escape		; if no char received, retry
0258+  079D 76 6E       	cmp ah, 'n'
0259+  079F C6 AD 07    	je gettxt_LF
0260+  07A2 76 72       	cmp ah, 'r'
0261+  07A4 C6 B4 07    	je gettxt_CR
0262+  07A7 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  07A8 3E          	mov [d], al
0264+  07A9 79          	inc d
0265+  07AA 0A 76 07    	jmp gettxt_loop
0266+  07AD             gettxt_LF:
0267+  07AD 19 0A       	mov al, $0A
0268+  07AF 3E          	mov [d], al
0269+  07B0 79          	inc d
0270+  07B1 0A 76 07    	jmp gettxt_loop
0271+  07B4             gettxt_CR:
0272+  07B4 19 0D       	mov al, $0D
0273+  07B6 3E          	mov [d], al
0274+  07B7 79          	inc d
0275+  07B8 0A 76 07    	jmp gettxt_loop
0276+  07BB             gettxt_backspace:
0277+  07BB 7F          	dec d
0278+  07BC 0A 76 07    	jmp gettxt_loop
0279+  07BF             gettxt_end:
0280+  07BF 19 00       	mov al, 0
0281+  07C1 3E          	mov [d], al				; terminate string
0282+  07C2 E7          	pop d
0283+  07C3 E4          	pop a
0284+  07C4 09          	ret
0285+  07C5             
0286+  07C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  07C5             ; PRINT NEW LINE
0288+  07C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  07C5             printnl:
0290+  07C5 D7          	push a
0291+  07C6 10 00 0A    	mov a, $0A00
0292+  07C9 05 03       	syscall sys_io
0293+  07CB 10 00 0D    	mov a, $0D00
0294+  07CE 05 03       	syscall sys_io
0295+  07D0 E4          	pop a
0296+  07D1 09          	ret
0297+  07D2             
0298+  07D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  07D2             ; strtoint
0300+  07D2             ; 4 digit hex string number in d
0301+  07D2             ; integer returned in A
0302+  07D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  07D2             strtointx:
0304+  07D2 D8          	push b
0305+  07D3 32          	mov bl, [d]
0306+  07D4 37          	mov bh, bl
0307+  07D5 33 01 00    	mov bl, [d + 1]
0308+  07D8 07 93 06    	call atoi				; convert to int in AL
0309+  07DB 23          	mov ah, al				; move to AH
0310+  07DC 33 02 00    	mov bl, [d + 2]
0311+  07DF 37          	mov bh, bl
0312+  07E0 33 03 00    	mov bl, [d + 3]
0313+  07E3 07 93 06    	call atoi				; convert to int in AL
0314+  07E6 E5          	pop b
0315+  07E7 09          	ret
0316+  07E8             
0317+  07E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  07E8             ; strtoint
0319+  07E8             ; 5 digit base10 string number in d
0320+  07E8             ; integer returned in A
0321+  07E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  07E8             strtoint:
0323+  07E8 E2          	push si
0324+  07E9 D8          	push b
0325+  07EA D9          	push c
0326+  07EB DA          	push d
0327+  07EC 07 13 06    	call strlen			; get string length in C
0328+  07EF 7E          	dec c
0329+  07F0 FD 4E       	mov si, d
0330+  07F2 12          	mov a, c
0331+  07F3 FD 99       	shl a
0332+  07F5 3B 7B 06    	mov d, table_power
0333+  07F8 59          	add d, a
0334+  07F9 38 00 00    	mov c, 0
0335+  07FC             strtoint_L0:
0336+  07FC F6          	lodsb			; load ASCII to al
0337+  07FD B9 00       	cmp al, 0
0338+  07FF C6 12 08    	je strtoint_end
0339+  0802 6F 30       	sub al, $30		; make into integer
0340+  0804 22 00       	mov ah, 0
0341+  0806 2A          	mov b, [d]
0342+  0807 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0808 11          	mov a, b
0344+  0809 28          	mov b, c
0345+  080A 54          	add a, b
0346+  080B 39          	mov c, a
0347+  080C 63 02 00    	sub d, 2
0348+  080F 0A FC 07    	jmp strtoint_L0
0349+  0812             strtoint_end:
0350+  0812 12          	mov a, c
0351+  0813 E7          	pop d
0352+  0814 E6          	pop c
0353+  0815 E5          	pop b
0354+  0816 EF          	pop si
0355+  0817 09          	ret
0356+  0818             
0357+  0818             
0358+  0818             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0818             ; PRINT NULL TERMINATED STRING
0360+  0818             ; pointer in D
0361+  0818             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0818             puts:
0363+  0818 D7          	push a
0364+  0819 DA          	push d
0365+  081A             puts_L1:
0366+  081A 1E          	mov al, [d]
0367+  081B B9 00       	cmp al, 0
0368+  081D C6 29 08    	jz puts_END
0369+  0820 23          	mov ah, al
0370+  0821 19 00       	mov al, 0
0371+  0823 05 03       	syscall sys_io
0372+  0825 79          	inc d
0373+  0826 0A 1A 08    	jmp puts_L1
0374+  0829             puts_END:
0375+  0829 E7          	pop d
0376+  082A E4          	pop a
0377+  082B 09          	ret
0378+  082C             
0379+  082C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  082C             ; PRINT N SIZE STRING
0381+  082C             ; pointer in D
0382+  082C             ; size in C
0383+  082C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  082C             putsn:
0385+  082C DB          	push al
0386+  082D DA          	push d
0387+  082E D9          	push c
0388+  082F             putsn_L0:
0389+  082F 1E          	mov al, [d]
0390+  0830 23          	mov ah, al
0391+  0831 19 00       	mov al, 0
0392+  0833 05 03       	syscall sys_io
0393+  0835 79          	inc d
0394+  0836 7E          	dec c	
0395+  0837 C2 00 00    	cmp c, 0
0396+  083A C7 2F 08    	jne putsn_L0
0397+  083D             putsn_end:
0398+  083D E6          	pop c
0399+  083E E7          	pop d
0400+  083F E8          	pop al
0401+  0840 09          	ret
0402+  0841             
0403+  0841             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0841             ; print 16bit decimal number
0405+  0841             ; input number in A
0406+  0841             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0841             print_u16d:
0408+  0841 D7          	push a
0409+  0842 D8          	push b
0410+  0843 26 10 27    	mov b, 10000
0411+  0846 AE          	div a, b			; get 10000's coeff.
0412+  0847 07 69 08    	call print_number
0413+  084A 11          	mov a, b
0414+  084B 26 E8 03    	mov b, 1000
0415+  084E AE          	div a, b			; get 1000's coeff.
0416+  084F 07 69 08    	call print_number
0417+  0852 11          	mov a, b
0418+  0853 26 64 00    	mov b, 100
0419+  0856 AE          	div a, b
0420+  0857 07 69 08    	call print_number
0421+  085A 11          	mov a, b
0422+  085B 26 0A 00    	mov b, 10
0423+  085E AE          	div a, b
0424+  085F 07 69 08    	call print_number
0425+  0862 1B          	mov al, bl			; 1's coeff in bl
0426+  0863 07 69 08    	call print_number
0427+  0866 E5          	pop b
0428+  0867 E4          	pop a
0429+  0868 09          	ret
0430+  0869             
0431+  0869             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0432+  0869             ; print AL
0433+  0869             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0434+  0869             print_number:
0435+  0869 6A 30       	add al, $30
0436+  086B 23          	mov ah, al
0437+  086C 07 DE 06    	call putchar
0438+  086F 09          	ret
0439+  0870             
0440+  0870             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0441+  0870             ; PRINT 16BIT HEX INTEGER
0442+  0870             ; integer value in reg B
0443+  0870             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0444+  0870             print_u16x:
0445+  0870 D7          	push a
0446+  0871 D8          	push b
0447+  0872 DD          	push bl
0448+  0873 30          	mov bl, bh
0449+  0874 07 A5 06    	call itoa				; convert bh to char in A
0450+  0877 2F          	mov bl, al				; save al
0451+  0878 19 00       	mov al, 0
0452+  087A 05 03       	syscall sys_io				; display AH
0453+  087C 24          	mov ah, bl				; retrieve al
0454+  087D 19 00       	mov al, 0
0455+  087F 05 03       	syscall sys_io				; display AL
0456+  0881             
0457+  0881 EA          	pop bl
0458+  0882 07 A5 06    	call itoa				; convert bh to char in A
0459+  0885 2F          	mov bl, al				; save al
0460+  0886 19 00       	mov al, 0
0461+  0888 05 03       	syscall sys_io				; display AH
0462+  088A 24          	mov ah, bl				; retrieve al
0463+  088B 19 00       	mov al, 0
0464+  088D 05 03       	syscall sys_io				; display AL
0465+  088F             
0466+  088F E5          	pop b
0467+  0890 E4          	pop a
0468+  0891 09          	ret
0469+  0892             
0470+  0892             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0471+  0892             ; INPUT 16BIT HEX INTEGER
0472+  0892             ; read 16bit integer into A
0473+  0892             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0474+  0892             scan_u16x:
0475+  0892 F8 10 00    	enter 16
0476+  0895 D8          	push b
0477+  0896 DA          	push d
0478+  0897             
0479+  0897 FA F1 FF    	lea d, [bp + -15]
0480+  089A 07 E5 06    	call gets				; get number
0481+  089D             
0482+  089D 32          	mov bl, [d]
0483+  089E 37          	mov bh, bl
0484+  089F 33 01 00    	mov bl, [d + 1]
0485+  08A2 07 93 06    	call atoi				; convert to int in AL
0486+  08A5 23          	mov ah, al				; move to AH
0487+  08A6             
0488+  08A6 33 02 00    	mov bl, [d + 2]
0489+  08A9 37          	mov bh, bl
0490+  08AA 33 03 00    	mov bl, [d + 3]
0491+  08AD 07 93 06    	call atoi				; convert to int in AL
0492+  08B0             
0493+  08B0 E7          	pop d
0494+  08B1 E5          	pop b
0495+  08B2 F9          	leave
0496+  08B3 09          	ret
0497+  08B4             
0498+  08B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0499+  08B4             ; PRINT 8bit HEX INTEGER
0500+  08B4             ; integer value in reg bl
0501+  08B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0502+  08B4             print_u8x:
0503+  08B4 D7          	push a
0504+  08B5 DD          	push bl
0505+  08B6             
0506+  08B6 07 A5 06    	call itoa				; convert bl to char in A
0507+  08B9 2F          	mov bl, al				; save al
0508+  08BA 19 00       	mov al, 0
0509+  08BC 05 03       	syscall sys_io				; display AH
0510+  08BE 24          	mov ah, bl				; retrieve al
0511+  08BF 19 00       	mov al, 0
0512+  08C1 05 03       	syscall sys_io				; display AL
0513+  08C3             
0514+  08C3 EA          	pop bl
0515+  08C4 E4          	pop a
0516+  08C5 09          	ret
0517+  08C6             
0518+  08C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0519+  08C6             ; print 8bit decimal unsigned number
0520+  08C6             ; input number in AL
0521+  08C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0522+  08C6             print_u8d:
0523+  08C6 D7          	push a
0524+  08C7 D8          	push b
0525+  08C8             
0526+  08C8 22 00       	mov ah, 0
0527+  08CA 26 64 00    	mov b, 100
0528+  08CD AE          	div a, b
0529+  08CE D8          	push b			; save remainder
0530+  08CF B9 00       	cmp al, 0
0531+  08D1 C6 DB 08    	je skip100
0532+  08D4 6A 30       	add al, $30
0533+  08D6 23          	mov ah, al
0534+  08D7 19 00       	mov al, 0
0535+  08D9 05 03       	syscall sys_io	; print coeff
0536+  08DB             skip100:
0537+  08DB E4          	pop a
0538+  08DC 22 00       	mov ah, 0
0539+  08DE 26 0A 00    	mov b, 10
0540+  08E1 AE          	div a, b
0541+  08E2 D8          	push b			; save remainder
0542+  08E3 B9 00       	cmp al, 0
0543+  08E5 C6 EF 08    	je skip10
0544+  08E8 6A 30       	add al, $30
0545+  08EA 23          	mov ah, al
0546+  08EB 19 00       	mov al, 0
0547+  08ED 05 03       	syscall sys_io	; print coeff
0548+  08EF             skip10:
0549+  08EF E4          	pop a
0550+  08F0 1B          	mov al, bl
0551+  08F1 6A 30       	add al, $30
0552+  08F3 23          	mov ah, al
0553+  08F4 19 00       	mov al, 0
0554+  08F6 05 03       	syscall sys_io	; print coeff
0555+  08F8 E5          	pop b
0556+  08F9 E4          	pop a
0557+  08FA 09          	ret
0558+  08FB             
0559+  08FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0560+  08FB             ; INPUT 8BIT HEX INTEGER
0561+  08FB             ; read 8bit integer into AL
0562+  08FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0563+  08FB             scan_u8x:
0564+  08FB F8 04 00    	enter 4
0565+  08FE D8          	push b
0566+  08FF DA          	push d
0567+  0900             
0568+  0900 FA FD FF    	lea d, [bp + -3]
0569+  0903 07 E5 06    	call gets				; get number
0570+  0906             
0571+  0906 32          	mov bl, [d]
0572+  0907 37          	mov bh, bl
0573+  0908 33 01 00    	mov bl, [d + 1]
0574+  090B 07 93 06    	call atoi				; convert to int in AL
0575+  090E             
0576+  090E E7          	pop d
0577+  090F E5          	pop b
0578+  0910 F9          	leave
0579+  0911 09          	ret
0580+  0912             
0581+  0912             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0582+  0912             ; input decimal number
0583+  0912             ; result in A
0584+  0912             ; 655'\0'
0585+  0912             ; low--------high
0586+  0912             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0912             scan_u16d:
0588+  0912 F8 08 00    	enter 8
0589+  0915 E2          	push si
0590+  0916 D8          	push b
0591+  0917 D9          	push c
0592+  0918 DA          	push d
0593+  0919 FA F9 FF    	lea d, [bp +- 7]
0594+  091C 07 E5 06    	call gets
0595+  091F 07 13 06    	call strlen			; get string length in C
0596+  0922 7E          	dec c
0597+  0923 FD 4E       	mov si, d
0598+  0925 12          	mov a, c
0599+  0926 FD 99       	shl a
0600+  0928 3B 7B 06    	mov d, table_power
0601+  092B 59          	add d, a
0602+  092C 38 00 00    	mov c, 0
0603+  092F             mul_loop:
0604+  092F F6          	lodsb			; load ASCII to al
0605+  0930 B9 00       	cmp al, 0
0606+  0932 C6 45 09    	je mul_exit
0607+  0935 6F 30       	sub al, $30		; make into integer
0608+  0937 22 00       	mov ah, 0
0609+  0939 2A          	mov b, [d]
0610+  093A AC          	mul a, b			; result in B since it fits in 16bits
0611+  093B 11          	mov a, b
0612+  093C 28          	mov b, c
0613+  093D 54          	add a, b
0614+  093E 39          	mov c, a
0615+  093F 63 02 00    	sub d, 2
0616+  0942 0A 2F 09    	jmp mul_loop
0617+  0945             mul_exit:
0618+  0945 12          	mov a, c
0619+  0946 E7          	pop d
0620+  0947 E6          	pop c
0621+  0948 E5          	pop b
0622+  0949 EF          	pop si
0623+  094A F9          	leave
0624+  094B 09          	ret
0310   094C             ; --- END INCLUDE BLOCK
0311   094C             
0312   094C             
0313   094C             .end
tasm: Number of errors = 0
