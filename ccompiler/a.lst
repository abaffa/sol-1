0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 FD FA 01 00   lea d, [sp + 1]
0012   0409 10 FF FF      mov a, $ffff
0013   040C 43            mov [d], a
0014   040D 52 02 00      sub sp, 2 ; i2
0015   0410 FD FA 01 00   lea d, [sp + 1]
0016   0414 10 41 00      mov a, $41
0017   0417 43            mov [d], a
0018   0418 52 01 00      sub sp, 1 ; c
0019   041B FD FA 01 00   lea d, [sp + 1]
0020   041F 19 48         mov al, $48
0021   0421 3E            mov [d], al
0022   0422 52 01 00      sub sp, 1 ; c2
0023   0425 FD FA 01 00   lea d, [sp + 1]
0024   0429 19 42         mov al, $42
0025   042B 3E            mov [d], al
0026   042C 2C FF FF      mov b, [bp + -1] ; i
0027   042F A7 00         mov bh, 0
0028   0431 FD AB         swp b
0029   0433 D8            push b
0030   0434 07 A2 04      call print_num
0031   0437 51 02 00      add sp, 2
0032   043A 26 CC 05      mov b, __string_0 ; "\n"
0033   043D FD AB         swp b
0034   043F D8            push b
0035   0440 07 C1 05      call print
0036   0443 51 02 00      add sp, 2
0037   0446 F9            leave
0038   0447 05 0B         syscall sys_terminate_proc
0039   0449             
0040   0449             _gets:
0041   0449 D2            push bp
0042   044A 9B            mov bp, sp
0043   044B             
0044   044B             ; --- BEGIN INLINE ASM BLOCK
0045   044B 17 05 00      mov a, [bp + 5]
0046   044E 3C            mov d, a
0047   044F 07 E7 06      call gets
0048   0452             ; --- END INLINE ASM BLOCK
0049   0452             
0050   0452 F9            leave
0051   0453 09            ret
0052   0454             
0053   0454             _strlen:
0054   0454 D2            push bp
0055   0455 9B            mov bp, sp
0056   0456 52 02 00      sub sp, 2 ; length
0057   0459 26 00 00      mov b, 0
0058   045C D7            push a
0059   045D 11            mov a, b
0060   045E 45 FF FF      mov [bp + -1], a ; length
0061   0461 E4            pop a
0062   0462             _while1_cond:
0063   0462 FA 05 00      lea d, [bp + 5] ; str
0064   0465 2A            mov b, [d]
0065   0466 D7            push a
0066   0467 74            mov d, b
0067   0468 DA            push d
0068   0469 2C FF FF      mov b, [bp + -1] ; length
0069   046C E7            pop d
0070   046D 10 01 00      mov a, 1
0071   0470 AC            mul a, b
0072   0471 5A            add d, b
0073   0472 E4            pop a
0074   0473 32            mov bl, [d]
0075   0474 A7 00         mov bh, 0
0076   0476 D7            push a
0077   0477 11            mov a, b
0078   0478 26 00 00      mov b, 0
0079   047B B0            cmp a, b
0080   047C 0E            lodflgs
0081   047D 87 01         and al, %00000001
0082   047F 8F 01         xor al, %00000001 ; !=
0083   0481 22 00         mov ah, 0
0084   0483 27            mov b, a
0085   0484 E4            pop a
0086   0485 C0 00 00      cmp b, 0
0087   0488 C6 9D 04      je _while1_exit
0088   048B             _while1_block:
0089   048B 2C FF FF      mov b, [bp + -1] ; length
0090   048E D7            push a
0091   048F 11            mov a, b
0092   0490 FD 77         inc b
0093   0492 D7            push a
0094   0493 11            mov a, b
0095   0494 45 FF FF      mov [bp + -1], a ; length
0096   0497 E4            pop a
0097   0498 27            mov b, a
0098   0499 E4            pop a
0099   049A 0A 62 04      jmp _while1_cond
0100   049D             _while1_exit:
0101   049D 2C FF FF      mov b, [bp + -1] ; length
0102   04A0 F9            leave
0103   04A1 09            ret
0104   04A2             
0105   04A2             print_num:
0106   04A2 D2            push bp
0107   04A3 9B            mov bp, sp
0108   04A4 52 05 00      sub sp, 5 ; digits
0109   04A7 52 02 00      sub sp, 2 ; i
0110   04AA 26 00 00      mov b, 0
0111   04AD D7            push a
0112   04AE 11            mov a, b
0113   04AF 45 FA FF      mov [bp + -6], a ; i
0114   04B2 E4            pop a
0115   04B3             _if2_cond:
0116   04B3 2C 05 00      mov b, [bp + 5] ; num
0117   04B6 D7            push a
0118   04B7 11            mov a, b
0119   04B8 26 00 00      mov b, 0
0120   04BB B0            cmp a, b
0121   04BC 0E            lodflgs
0122   04BD 87 01         and al, %00000001 ; ==
0123   04BF 22 00         mov ah, 0
0124   04C1 27            mov b, a
0125   04C2 E4            pop a
0126   04C3 C0 00 00      cmp b, 0
0127   04C6 C6 D8 04      je _if2_exit
0128   04C9             _if2_true:
0129   04C9 26 30 00      mov b, $30
0130   04CC DD            push bl
0131   04CD 07 A6 05      call _putchar
0132   04D0 51 01 00      add sp, 1
0133   04D3 F9            leave
0134   04D4 09            ret
0135   04D5 0A D8 04      jmp _if2_exit
0136   04D8             _if2_exit:
0137   04D8             _while3_cond:
0138   04D8 2C 05 00      mov b, [bp + 5] ; num
0139   04DB D7            push a
0140   04DC 11            mov a, b
0141   04DD 26 00 00      mov b, 0
0142   04E0 B0            cmp a, b
0143   04E1 0E            lodflgs
0144   04E2 2F            mov bl, al
0145   04E3 FD 78         mov g, a
0146   04E5 FD A2 03      shr al, 3
0147   04E8 FD A4 02      shr bl, 2
0148   04EB FD 87 01      and bl, %00000001
0149   04EE 90            xor al, bl
0150   04EF FD 27         mov b, g
0151   04F1 FD 87 01      and bl, %00000001
0152   04F4 8C            or al, bl
0153   04F5 8F 01         xor al, %00000001 ; > (signed)
0154   04F7 22 00         mov ah, 0
0155   04F9 27            mov b, a
0156   04FA E4            pop a
0157   04FB C0 00 00      cmp b, 0
0158   04FE C6 4E 05      je _while3_exit
0159   0501             _while3_block:
0160   0501 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0161   0504 2D            mov b, d
0162   0505 D7            push a
0163   0506 74            mov d, b
0164   0507 DA            push d
0165   0508 2C FA FF      mov b, [bp + -6] ; i
0166   050B E7            pop d
0167   050C 10 01 00      mov a, 1
0168   050F AC            mul a, b
0169   0510 5A            add d, b
0170   0511 E4            pop a
0171   0512 DA            push d
0172   0513 26 30 00      mov b, $30
0173   0516 D7            push a
0174   0517 11            mov a, b
0175   0518 2C 05 00      mov b, [bp + 5] ; num
0176   051B D7            push a
0177   051C 11            mov a, b
0178   051D 26 0A 00      mov b, 10
0179   0520 AE            div a, b
0180   0521 E4            pop a
0181   0522 56            add b, a
0182   0523 E4            pop a
0183   0524 E7            pop d
0184   0525 FD 3E         mov [d], bl
0185   0527 2C 05 00      mov b, [bp + 5] ; num
0186   052A D7            push a
0187   052B 11            mov a, b
0188   052C 26 0A 00      mov b, 10
0189   052F AE            div a, b
0190   0530 FD 78         mov g, a
0191   0532 11            mov a, b
0192   0533 FD 27         mov b, g
0193   0535 E4            pop a
0194   0536 D7            push a
0195   0537 11            mov a, b
0196   0538 45 05 00      mov [bp + 5], a ; num
0197   053B E4            pop a
0198   053C 2C FA FF      mov b, [bp + -6] ; i
0199   053F D7            push a
0200   0540 11            mov a, b
0201   0541 FD 77         inc b
0202   0543 D7            push a
0203   0544 11            mov a, b
0204   0545 45 FA FF      mov [bp + -6], a ; i
0205   0548 E4            pop a
0206   0549 27            mov b, a
0207   054A E4            pop a
0208   054B 0A D8 04      jmp _while3_cond
0209   054E             _while3_exit:
0210   054E             _while4_cond:
0211   054E 2C FA FF      mov b, [bp + -6] ; i
0212   0551 D7            push a
0213   0552 11            mov a, b
0214   0553 26 00 00      mov b, 0
0215   0556 B0            cmp a, b
0216   0557 0E            lodflgs
0217   0558 2F            mov bl, al
0218   0559 FD 78         mov g, a
0219   055B FD A2 03      shr al, 3
0220   055E FD A4 02      shr bl, 2
0221   0561 FD 87 01      and bl, %00000001
0222   0564 90            xor al, bl
0223   0565 FD 27         mov b, g
0224   0567 FD 87 01      and bl, %00000001
0225   056A 8C            or al, bl
0226   056B 8F 01         xor al, %00000001 ; > (signed)
0227   056D 22 00         mov ah, 0
0228   056F 27            mov b, a
0229   0570 E4            pop a
0230   0571 C0 00 00      cmp b, 0
0231   0574 C6 A4 05      je _while4_exit
0232   0577             _while4_block:
0233   0577 2C FA FF      mov b, [bp + -6] ; i
0234   057A D7            push a
0235   057B 11            mov a, b
0236   057C FD 7D         dec b
0237   057E D7            push a
0238   057F 11            mov a, b
0239   0580 45 FA FF      mov [bp + -6], a ; i
0240   0583 E4            pop a
0241   0584 27            mov b, a
0242   0585 E4            pop a
0243   0586 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0244   0589 2D            mov b, d
0245   058A D7            push a
0246   058B 74            mov d, b
0247   058C DA            push d
0248   058D 2C FA FF      mov b, [bp + -6] ; i
0249   0590 E7            pop d
0250   0591 10 01 00      mov a, 1
0251   0594 AC            mul a, b
0252   0595 5A            add d, b
0253   0596 E4            pop a
0254   0597 32            mov bl, [d]
0255   0598 A7 00         mov bh, 0
0256   059A DD            push bl
0257   059B 07 A6 05      call _putchar
0258   059E 51 01 00      add sp, 1
0259   05A1 0A 4E 05      jmp _while4_cond
0260   05A4             _while4_exit:
0261   05A4 F9            leave
0262   05A5 09            ret
0263   05A6             
0264   05A6             _putchar:
0265   05A6 D2            push bp
0266   05A7 9B            mov bp, sp
0267   05A8             
0268   05A8             ; --- BEGIN INLINE ASM BLOCK
0269   05A8 20 05 00      mov al, [bp + 5]
0270   05AB 23            mov ah, al
0271   05AC 07 E0 06      call putchar
0272   05AF             ; --- END INLINE ASM BLOCK
0273   05AF             
0274   05AF F9            leave
0275   05B0 09            ret
0276   05B1             
0277   05B1             scann:
0278   05B1 D2            push bp
0279   05B2 9B            mov bp, sp
0280   05B3 52 02 00      sub sp, 2 ; m
0281   05B6             
0282   05B6             ; --- BEGIN INLINE ASM BLOCK
0283   05B6 07 18 09      call scan_u16d
0284   05B9 45 FF FF      mov [bp + -1], a
0285   05BC             ; --- END INLINE ASM BLOCK
0286   05BC             
0287   05BC 2C FF FF      mov b, [bp + -1] ; m
0288   05BF F9            leave
0289   05C0 09            ret
0290   05C1             
0291   05C1             print:
0292   05C1 D2            push bp
0293   05C2 9B            mov bp, sp
0294   05C3             
0295   05C3             ; --- BEGIN INLINE ASM BLOCK
0296   05C3 17 05 00      mov a, [bp + 5]
0297   05C6 3C            mov d, a
0298   05C7 07 1A 08      call puts
0299   05CA             ; --- END INLINE ASM BLOCK
0300   05CA             
0301   05CA F9            leave
0302   05CB 09            ret
0303   05CC             ; --- END TEXT BLOCK
0304   05CC             
0305   05CC             ; --- BEGIN DATA BLOCK
0306   05CC 0A 00       __string_0: .db "\n", 0
0307   05CE             ; --- END DATA BLOCK
0308   05CE             
0309   05CE             ; --- BEGIN INCLUDE BLOCK
0310   05CE             .include "lib/stdio.asm"
0001+  05CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  05CE             ; stdio.s
0003+  05CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  05CE             .include "lib/string.asm"
0001++ 05CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 05CE             ; string.s
0003++ 05CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 05CE             
0005++ 05CE             
0006++ 05CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 05CE             ; strrev
0008++ 05CE             ; reverse a string
0009++ 05CE             ; D = string address
0010++ 05CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 05CE             ; 01234
0012++ 05CE             strrev:
0013++ 05CE 4B          	pusha
0014++ 05CF 07 15 06    	call strlen	; length in C
0015++ 05D2 12          	mov a, c
0016++ 05D3 AF 01 00    	cmp a, 1
0017++ 05D6 D0 F0 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 05D9 7D          	dec a
0019++ 05DA FD 4E       	mov si, d	; beginning of string
0020++ 05DC FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 05DE 59          	add d, a	; end of string
0022++ 05DF 12          	mov a, c
0023++ 05E0 FD 9B       	shr a		; divide by 2
0024++ 05E2 39          	mov c, a	; C now counts the steps
0025++ 05E3             strrev_L0:
0026++ 05E3 32          	mov bl, [d]	; save load right-side char into BL
0027++ 05E4 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 05E5 3E          	mov [d], al	; store left char into right side
0029++ 05E6 1B          	mov al, bl
0030++ 05E7 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 05E8 7E          	dec c
0032++ 05E9 7F          	dec d
0033++ 05EA C2 00 00    	cmp c, 0
0034++ 05ED C7 E3 05    	jne strrev_L0
0035++ 05F0             strrev_end:
0036++ 05F0 4C          	popa
0037++ 05F1 09          	ret
0038++ 05F2             	
0039++ 05F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 05F2             ; strchr
0041++ 05F2             ; search string in D for char in AL
0042++ 05F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 05F2             strchr:
0044++ 05F2             strchr_L0:
0045++ 05F2 32          	mov bl, [d]
0046++ 05F3 C1 00       	cmp bl, 0
0047++ 05F5 C6 00 06    	je strchr_end
0048++ 05F8 BA          	cmp al, bl
0049++ 05F9 C6 00 06    	je strchr_end
0050++ 05FC 79          	inc d
0051++ 05FD 0A F2 05    	jmp strchr_L0
0052++ 0600             strchr_end:
0053++ 0600 1B          	mov al, bl
0054++ 0601 09          	ret
0055++ 0602             
0056++ 0602             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0602             ; strstr
0058++ 0602             ; find sub-string
0059++ 0602             ; str1 in SI
0060++ 0602             ; str2 in DI
0061++ 0602             ; SI points to end of source string
0062++ 0602             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0602             strstr:
0064++ 0602 DB          	push al
0065++ 0603 DA          	push d
0066++ 0604 E3          	push di
0067++ 0605             strstr_loop:
0068++ 0605 F3          	cmpsb					; compare a byte of the strings
0069++ 0606 C7 11 06    	jne strstr_ret
0070++ 0609 FC 00 00    	lea d, [di + 0]
0071++ 060C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 060E C7 05 06    	jne strstr_loop				; equal chars but not at end
0073++ 0611             strstr_ret:
0074++ 0611 F0          	pop di
0075++ 0612 E7          	pop d
0076++ 0613 E8          	pop al
0077++ 0614 09          	ret
0078++ 0615             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0615             ; length of null terminated string
0080++ 0615             ; result in C
0081++ 0615             ; pointer in D
0082++ 0615             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0615             strlen:
0084++ 0615 DA          	push d
0085++ 0616 38 00 00    	mov c, 0
0086++ 0619             strlen_L1:
0087++ 0619 BD 00       	cmp byte [d], 0
0088++ 061B C6 23 06    	je strlen_ret
0089++ 061E 79          	inc d
0090++ 061F 78          	inc c
0091++ 0620 0A 19 06    	jmp strlen_L1
0092++ 0623             strlen_ret:
0093++ 0623 E7          	pop d
0094++ 0624 09          	ret
0095++ 0625             
0096++ 0625             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0625             ; STRCMP
0098++ 0625             ; compare two strings
0099++ 0625             ; str1 in SI
0100++ 0625             ; str2 in DI
0101++ 0625             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0625             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0625             strcmp:
0104++ 0625 DB          	push al
0105++ 0626 DA          	push d
0106++ 0627 E3          	push di
0107++ 0628 E2          	push si
0108++ 0629             strcmp_loop:
0109++ 0629 F3          	cmpsb					; compare a byte of the strings
0110++ 062A C7 35 06    	jne strcmp_ret
0111++ 062D FB FF FF    	lea d, [si +- 1]
0112++ 0630 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0632 C7 29 06    	jne strcmp_loop				; equal chars but not at end
0114++ 0635             strcmp_ret:
0115++ 0635 EF          	pop si
0116++ 0636 F0          	pop di
0117++ 0637 E7          	pop d
0118++ 0638 E8          	pop al
0119++ 0639 09          	ret
0120++ 063A             
0121++ 063A             
0122++ 063A             ; STRCPY
0123++ 063A             ; copy null terminated string from SI to DI
0124++ 063A             ; source in SI
0125++ 063A             ; destination in DI
0126++ 063A             strcpy:
0127++ 063A E2          	push si
0128++ 063B E3          	push di
0129++ 063C DB          	push al
0130++ 063D             strcpy_L1:
0131++ 063D F6          	lodsb
0132++ 063E F7          	stosb
0133++ 063F B9 00       	cmp al, 0
0134++ 0641 C7 3D 06    	jne strcpy_L1
0135++ 0644             strcpy_end:
0136++ 0644 E8          	pop al
0137++ 0645 F0          	pop di
0138++ 0646 EF          	pop si
0139++ 0647 09          	ret
0140++ 0648             
0141++ 0648             ; STRCAT
0142++ 0648             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0648             ; source in SI
0144++ 0648             ; destination in DI
0145++ 0648             strcat:
0146++ 0648 E2          	push si
0147++ 0649 E3          	push di
0148++ 064A D7          	push a
0149++ 064B DA          	push d
0150++ 064C 50          	mov a, di
0151++ 064D 3C          	mov d, a
0152++ 064E             strcat_goto_end_L1:
0153++ 064E BD 00       	cmp byte[d], 0
0154++ 0650 C6 57 06    	je strcat_start
0155++ 0653 79          	inc d
0156++ 0654 0A 4E 06    	jmp strcat_goto_end_L1
0157++ 0657             strcat_start:
0158++ 0657 FD 50       	mov di, d
0159++ 0659             strcat_L1:
0160++ 0659 F6          	lodsb
0161++ 065A F7          	stosb
0162++ 065B B9 00       	cmp al, 0
0163++ 065D C7 59 06    	jne strcat_L1
0164++ 0660             strcat_end:
0165++ 0660 E7          	pop d
0166++ 0661 E4          	pop a
0167++ 0662 F0          	pop di
0168++ 0663 EF          	pop si
0169++ 0664 09          	ret
0005+  0665             
0006+  0665 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0669 34 35 36 37 
0006+  066D 38 39 41 42 
0006+  0671 43 44 45 46 
0007+  0675 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0679 1B 5B 48 00 
0008+  067D             
0009+  067D 01 00       table_power:.dw 1
0010+  067F 0A 00       			.dw 10
0011+  0681 64 00       			.dw 100
0012+  0683 E8 03       			.dw 1000
0013+  0685 10 27       			.dw 10000
0014+  0687             
0015+  0687             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0687             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0687             ; ASCII in BL
0018+  0687             ; result in AL
0019+  0687             ; ascii for F = 0100 0110
0020+  0687             ; ascii for 9 = 0011 1001
0021+  0687             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0687             hex_ascii_encode:
0023+  0687 1B          	mov al, bl
0024+  0688 93 40       	test al, $40				; test if letter or number
0025+  068A C7 90 06    	jnz hex_letter
0026+  068D 87 0F       	and al, $0F				; get number
0027+  068F 09          	ret
0028+  0690             hex_letter:
0029+  0690 87 0F       	and al, $0F				; get letter
0030+  0692 6A 09       	add al, 9
0031+  0694 09          	ret
0032+  0695             
0033+  0695             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0695             ; ATOI
0035+  0695             ; 2 letter hex string in B
0036+  0695             ; 8bit integer returned in AL
0037+  0695             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0695             atoi:
0039+  0695 D8          	push b
0040+  0696 07 87 06    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0699 30          	mov bl, bh
0042+  069A DB          	push al					; save a
0043+  069B 07 87 06    	call hex_ascii_encode
0044+  069E EA          	pop bl	
0045+  069F FD 9E 04    	shl al, 4
0046+  06A2 8C          	or al, bl
0047+  06A3 E5          	pop b
0048+  06A4 09          	ret	
0049+  06A5             
0050+  06A5             
0051+  06A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  06A5             ; printf
0053+  06A5             ; no need for explanations!
0054+  06A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  06A5             printf:
0056+  06A5 09          	ret
0057+  06A6             
0058+  06A6             
0059+  06A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  06A6             ; scanf
0061+  06A6             ; no need for explanations!
0062+  06A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  06A6             scanf:
0064+  06A6 09          	ret
0065+  06A7             
0066+  06A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  06A7             ; ITOA
0068+  06A7             ; 8bit value in BL
0069+  06A7             ; 2 byte ASCII result in A
0070+  06A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  06A7             itoa:
0072+  06A7 DA          	push d
0073+  06A8 D8          	push b
0074+  06A9 A7 00       	mov bh, 0
0075+  06AB FD A4 04    	shr bl, 4	
0076+  06AE 74          	mov d, b
0077+  06AF 1F 65 06    	mov al, [d + s_hex_digits]
0078+  06B2 23          	mov ah, al
0079+  06B3             	
0080+  06B3 E5          	pop b
0081+  06B4 D8          	push b
0082+  06B5 A7 00       	mov bh, 0
0083+  06B7 FD 87 0F    	and bl, $0F
0084+  06BA 74          	mov d, b
0085+  06BB 1F 65 06    	mov al, [d + s_hex_digits]
0086+  06BE E5          	pop b
0087+  06BF E7          	pop d
0088+  06C0 09          	ret
0089+  06C1             
0090+  06C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  06C1             ; HEX STRING TO BINARY
0092+  06C1             ; di = destination address
0093+  06C1             ; si = source
0094+  06C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  06C1             hex_to_int:
0096+  06C1             hex_to_int_L1:
0097+  06C1 F6          	lodsb					; load from [SI] to AL
0098+  06C2 B9 00       	cmp al, 0				; check if ASCII 0
0099+  06C4 C6 D1 06    	jz hex_to_int_ret
0100+  06C7 36          	mov bh, al
0101+  06C8 F6          	lodsb
0102+  06C9 2F          	mov bl, al
0103+  06CA 07 95 06    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  06CD F7          	stosb					; store AL to [DI]
0105+  06CE 0A C1 06    	jmp hex_to_int_L1
0106+  06D1             hex_to_int_ret:
0107+  06D1 09          	ret		
0108+  06D2             
0109+  06D2             
0110+  06D2             
0111+  06D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  06D2             ; GETCHAR
0113+  06D2             ; char in ah
0114+  06D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  06D2             getchar:
0116+  06D2 DB          	push al
0117+  06D3             getchar_retry:
0118+  06D3 FD 0C       	sti
0119+  06D5 19 01       	mov al, 1
0120+  06D7 05 03       	syscall sys_io			; receive in AH
0121+  06D9 B9 00       	cmp al, 0			; check if any char was receive
0122+  06DB C6 D3 06    	je getchar_retry
0123+  06DE E8          	pop al
0124+  06DF 09          	ret
0125+  06E0             
0126+  06E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  06E0             ; PUTCHAR
0128+  06E0             ; char in ah
0129+  06E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  06E0             putchar:
0131+  06E0 D7          	push a
0132+  06E1 19 00       	mov al, 0
0133+  06E3 05 03       	syscall sys_io			; char in AH
0134+  06E5 E4          	pop a
0135+  06E6 09          	ret
0136+  06E7             
0137+  06E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  06E7             ;; INPUT A STRING
0139+  06E7             ;; terminates with null
0140+  06E7             ;; pointer in D
0141+  06E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  06E7             gets:
0143+  06E7 D7          	push a
0144+  06E8 DA          	push d
0145+  06E9             gets_loop:
0146+  06E9 FD 0C       	sti
0147+  06EB 19 01       	mov al, 1
0148+  06ED 05 03       	syscall sys_io			; receive in AH
0149+  06EF B9 00       	cmp al, 0				; check error code (AL)
0150+  06F1 C6 E9 06    	je gets_loop			; if no char received, retry
0151+  06F4             
0152+  06F4 76 1B       	cmp ah, 27
0153+  06F6 C6 17 07    	je gets_telnet_escape
0154+  06F9 76 0A       	cmp ah, $0A				; LF
0155+  06FB C6 70 07    	je gets_end
0156+  06FE 76 0D       	cmp ah, $0D				; CR
0157+  0700 C6 70 07    	je gets_end
0158+  0703 76 5C       	cmp ah, $5C				; '\\'
0159+  0705 C6 47 07    	je gets_escape
0160+  0708             	
0161+  0708 76 08       	cmp ah, $08			; check for backspace
0162+  070A C6 13 07    	je gets_backspace
0163+  070D             
0164+  070D 1A          	mov al, ah
0165+  070E 3E          	mov [d], al
0166+  070F 79          	inc d
0167+  0710 0A E9 06    	jmp gets_loop
0168+  0713             gets_backspace:
0169+  0713 7F          	dec d
0170+  0714 0A E9 06    	jmp gets_loop
0171+  0717             gets_telnet_escape:
0172+  0717 FD 0C       	sti
0173+  0719 19 01       	mov al, 1
0174+  071B 05 03       	syscall sys_io				; receive in AH without echo
0175+  071D B9 00       	cmp al, 0					; check error code (AL)
0176+  071F C6 17 07    	je gets_telnet_escape		; if no char received, retry
0177+  0722 76 5B       	cmp ah, '['
0178+  0724 C7 E9 06    	jne gets_loop
0179+  0727             gets_telnet_escape_phase2:
0180+  0727 FD 0C       	sti
0181+  0729 19 01       	mov al, 1
0182+  072B 05 03       	syscall sys_io					; receive in AH without echo
0183+  072D B9 00       	cmp al, 0						; check error code (AL)
0184+  072F C6 27 07    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0732 76 44       	cmp ah, 'D'
0186+  0734 C6 3F 07    	je gets_left_arrow
0187+  0737 76 43       	cmp ah, 'C'
0188+  0739 C6 43 07    	je gets_right_arrow
0189+  073C 0A E9 06    	jmp gets_loop
0190+  073F             gets_left_arrow:
0191+  073F 7F          	dec d
0192+  0740 0A E9 06    	jmp gets_loop
0193+  0743             gets_right_arrow:
0194+  0743 79          	inc d
0195+  0744 0A E9 06    	jmp gets_loop
0196+  0747             gets_escape:
0197+  0747 FD 0C       	sti
0198+  0749 19 01       	mov al, 1
0199+  074B 05 03       	syscall sys_io			; receive in AH
0200+  074D B9 00       	cmp al, 0				; check error code (AL)
0201+  074F C6 47 07    	je gets_escape			; if no char received, retry
0202+  0752 76 6E       	cmp ah, 'n'
0203+  0754 C6 62 07    	je gets_LF
0204+  0757 76 72       	cmp ah, 'r'
0205+  0759 C6 69 07    	je gets_CR
0206+  075C 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  075D 3E          	mov [d], al
0208+  075E 79          	inc d
0209+  075F 0A E9 06    	jmp gets_loop
0210+  0762             gets_LF:
0211+  0762 19 0A       	mov al, $0A
0212+  0764 3E          	mov [d], al
0213+  0765 79          	inc d
0214+  0766 0A E9 06    	jmp gets_loop
0215+  0769             gets_CR:
0216+  0769 19 0D       	mov al, $0D
0217+  076B 3E          	mov [d], al
0218+  076C 79          	inc d
0219+  076D 0A E9 06    	jmp gets_loop
0220+  0770             gets_end:
0221+  0770 19 00       	mov al, 0
0222+  0772 3E          	mov [d], al				; terminate string
0223+  0773 E7          	pop d
0224+  0774 E4          	pop a
0225+  0775 09          	ret
0226+  0776             
0227+  0776             
0228+  0776             
0229+  0776             
0230+  0776             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0776             ;; INPUT TEXT
0232+  0776             ;; terminated with CTRL+D
0233+  0776             ;; pointer in D
0234+  0776             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0776             gettxt:
0236+  0776 D7          	push a
0237+  0777 DA          	push d
0238+  0778             gettxt_loop:
0239+  0778 19 01       	mov al, 1
0240+  077A 05 03       	syscall sys_io			; receive in AH
0241+  077C B9 00       	cmp al, 0				; check error code (AL)
0242+  077E C6 78 07    	je gettxt_loop		; if no char received, retry
0243+  0781 76 04       	cmp ah, 4			; EOT
0244+  0783 C6 C1 07    	je gettxt_end
0245+  0786 76 08       	cmp ah, $08			; check for backspace
0246+  0788 C6 BD 07    	je gettxt_backspace
0247+  078B 76 5C       	cmp ah, $5C				; '\\'
0248+  078D C6 96 07    	je gettxt_escape
0249+  0790 1A          	mov al, ah
0250+  0791 3E          	mov [d], al
0251+  0792 79          	inc d
0252+  0793 0A 78 07    	jmp gettxt_loop
0253+  0796             gettxt_escape:
0254+  0796 19 01       	mov al, 1
0255+  0798 05 03       	syscall sys_io			; receive in AH
0256+  079A B9 00       	cmp al, 0				; check error code (AL)
0257+  079C C6 96 07    	je gettxt_escape		; if no char received, retry
0258+  079F 76 6E       	cmp ah, 'n'
0259+  07A1 C6 AF 07    	je gettxt_LF
0260+  07A4 76 72       	cmp ah, 'r'
0261+  07A6 C6 B6 07    	je gettxt_CR
0262+  07A9 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  07AA 3E          	mov [d], al
0264+  07AB 79          	inc d
0265+  07AC 0A 78 07    	jmp gettxt_loop
0266+  07AF             gettxt_LF:
0267+  07AF 19 0A       	mov al, $0A
0268+  07B1 3E          	mov [d], al
0269+  07B2 79          	inc d
0270+  07B3 0A 78 07    	jmp gettxt_loop
0271+  07B6             gettxt_CR:
0272+  07B6 19 0D       	mov al, $0D
0273+  07B8 3E          	mov [d], al
0274+  07B9 79          	inc d
0275+  07BA 0A 78 07    	jmp gettxt_loop
0276+  07BD             gettxt_backspace:
0277+  07BD 7F          	dec d
0278+  07BE 0A 78 07    	jmp gettxt_loop
0279+  07C1             gettxt_end:
0280+  07C1 19 00       	mov al, 0
0281+  07C3 3E          	mov [d], al				; terminate string
0282+  07C4 E7          	pop d
0283+  07C5 E4          	pop a
0284+  07C6 09          	ret
0285+  07C7             
0286+  07C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  07C7             ; PRINT NEW LINE
0288+  07C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  07C7             printnl:
0290+  07C7 D7          	push a
0291+  07C8 10 00 0A    	mov a, $0A00
0292+  07CB 05 03       	syscall sys_io
0293+  07CD 10 00 0D    	mov a, $0D00
0294+  07D0 05 03       	syscall sys_io
0295+  07D2 E4          	pop a
0296+  07D3 09          	ret
0297+  07D4             
0298+  07D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  07D4             ; strtoint
0300+  07D4             ; 4 digit hex string number in d
0301+  07D4             ; integer returned in A
0302+  07D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  07D4             strtointx:
0304+  07D4 D8          	push b
0305+  07D5 32          	mov bl, [d]
0306+  07D6 37          	mov bh, bl
0307+  07D7 33 01 00    	mov bl, [d + 1]
0308+  07DA 07 95 06    	call atoi				; convert to int in AL
0309+  07DD 23          	mov ah, al				; move to AH
0310+  07DE 33 02 00    	mov bl, [d + 2]
0311+  07E1 37          	mov bh, bl
0312+  07E2 33 03 00    	mov bl, [d + 3]
0313+  07E5 07 95 06    	call atoi				; convert to int in AL
0314+  07E8 E5          	pop b
0315+  07E9 09          	ret
0316+  07EA             
0317+  07EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  07EA             ; strtoint
0319+  07EA             ; 5 digit base10 string number in d
0320+  07EA             ; integer returned in A
0321+  07EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  07EA             strtoint:
0323+  07EA E2          	push si
0324+  07EB D8          	push b
0325+  07EC D9          	push c
0326+  07ED DA          	push d
0327+  07EE 07 15 06    	call strlen			; get string length in C
0328+  07F1 7E          	dec c
0329+  07F2 FD 4E       	mov si, d
0330+  07F4 12          	mov a, c
0331+  07F5 FD 99       	shl a
0332+  07F7 3B 7D 06    	mov d, table_power
0333+  07FA 59          	add d, a
0334+  07FB 38 00 00    	mov c, 0
0335+  07FE             strtoint_L0:
0336+  07FE F6          	lodsb			; load ASCII to al
0337+  07FF B9 00       	cmp al, 0
0338+  0801 C6 14 08    	je strtoint_end
0339+  0804 6F 30       	sub al, $30		; make into integer
0340+  0806 22 00       	mov ah, 0
0341+  0808 2A          	mov b, [d]
0342+  0809 AC          	mul a, b			; result in B since it fits in 16bits
0343+  080A 11          	mov a, b
0344+  080B 28          	mov b, c
0345+  080C 54          	add a, b
0346+  080D 39          	mov c, a
0347+  080E 63 02 00    	sub d, 2
0348+  0811 0A FE 07    	jmp strtoint_L0
0349+  0814             strtoint_end:
0350+  0814 12          	mov a, c
0351+  0815 E7          	pop d
0352+  0816 E6          	pop c
0353+  0817 E5          	pop b
0354+  0818 EF          	pop si
0355+  0819 09          	ret
0356+  081A             
0357+  081A             
0358+  081A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  081A             ; PRINT NULL TERMINATED STRING
0360+  081A             ; pointer in D
0361+  081A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  081A             puts:
0363+  081A D7          	push a
0364+  081B DA          	push d
0365+  081C             puts_L1:
0366+  081C 1E          	mov al, [d]
0367+  081D B9 00       	cmp al, 0
0368+  081F C6 2B 08    	jz puts_END
0369+  0822 23          	mov ah, al
0370+  0823 19 00       	mov al, 0
0371+  0825 05 03       	syscall sys_io
0372+  0827 79          	inc d
0373+  0828 0A 1C 08    	jmp puts_L1
0374+  082B             puts_END:
0375+  082B E7          	pop d
0376+  082C E4          	pop a
0377+  082D 09          	ret
0378+  082E             
0379+  082E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  082E             ; PRINT N SIZE STRING
0381+  082E             ; pointer in D
0382+  082E             ; size in C
0383+  082E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  082E             putsn:
0385+  082E DB          	push al
0386+  082F DA          	push d
0387+  0830 D9          	push c
0388+  0831             putsn_L0:
0389+  0831 1E          	mov al, [d]
0390+  0832 23          	mov ah, al
0391+  0833 19 00       	mov al, 0
0392+  0835 05 03       	syscall sys_io
0393+  0837 79          	inc d
0394+  0838 7E          	dec c	
0395+  0839 C2 00 00    	cmp c, 0
0396+  083C C7 31 08    	jne putsn_L0
0397+  083F             putsn_end:
0398+  083F E6          	pop c
0399+  0840 E7          	pop d
0400+  0841 E8          	pop al
0401+  0842 09          	ret
0402+  0843             
0403+  0843             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0843             ; print 16bit decimal number
0405+  0843             ; input number in A
0406+  0843             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0843             print_u16d:
0408+  0843 D7          	push a
0409+  0844 D8          	push b
0410+  0845 26 10 27    	mov b, 10000
0411+  0848 AE          	div a, b			; get 10000 coeff.
0412+  0849 07 6F 08    	call print_number
0413+  084C 11          	mov a, b
0414+  084D 26 E8 03    	mov b, 1000
0415+  0850 AE          	div a, b			; get 10000 coeff.
0416+  0851 07 6F 08    	call print_number
0417+  0854 11          	mov a, b
0418+  0855 26 64 00    	mov b, 100
0419+  0858 AE          	div a, b
0420+  0859 07 6F 08    	call print_number
0421+  085C 11          	mov a, b
0422+  085D 26 0A 00    	mov b, 10
0423+  0860 AE          	div a, b
0424+  0861 07 6F 08    	call print_number
0425+  0864 11          	mov a, b
0426+  0865 6A 30       	add al, $30
0427+  0867 23          	mov ah, al
0428+  0868 19 00       	mov al, 0
0429+  086A 05 03       	syscall sys_io	; print coeff
0430+  086C E5          	pop b
0431+  086D E4          	pop a
0432+  086E 09          	ret
0433+  086F             
0434+  086F             
0435+  086F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  086F             ; if A == 0, print space
0437+  086F             ; else print A
0438+  086F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  086F             print_number:
0440+  086F 6A 30       	add al, $30
0441+  0871 23          	mov ah, al
0442+  0872 07 E0 06    	call putchar
0443+  0875 09          	ret
0444+  0876             
0445+  0876             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0876             ; PRINT 16BIT HEX INTEGER
0447+  0876             ; integer value in reg B
0448+  0876             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0876             print_u16x:
0450+  0876 D7          	push a
0451+  0877 D8          	push b
0452+  0878 DD          	push bl
0453+  0879 30          	mov bl, bh
0454+  087A 07 A7 06    	call itoa				; convert bh to char in A
0455+  087D 2F          	mov bl, al				; save al
0456+  087E 19 00       	mov al, 0
0457+  0880 05 03       	syscall sys_io				; display AH
0458+  0882 24          	mov ah, bl				; retrieve al
0459+  0883 19 00       	mov al, 0
0460+  0885 05 03       	syscall sys_io				; display AL
0461+  0887             
0462+  0887 EA          	pop bl
0463+  0888 07 A7 06    	call itoa				; convert bh to char in A
0464+  088B 2F          	mov bl, al				; save al
0465+  088C 19 00       	mov al, 0
0466+  088E 05 03       	syscall sys_io				; display AH
0467+  0890 24          	mov ah, bl				; retrieve al
0468+  0891 19 00       	mov al, 0
0469+  0893 05 03       	syscall sys_io				; display AL
0470+  0895             
0471+  0895 E5          	pop b
0472+  0896 E4          	pop a
0473+  0897 09          	ret
0474+  0898             
0475+  0898             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0898             ; INPUT 16BIT HEX INTEGER
0477+  0898             ; read 16bit integer into A
0478+  0898             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0898             scan_u16x:
0480+  0898 F8 10 00    	enter 16
0481+  089B D8          	push b
0482+  089C DA          	push d
0483+  089D             
0484+  089D FA F1 FF    	lea d, [bp + -15]
0485+  08A0 07 E7 06    	call gets				; get number
0486+  08A3             
0487+  08A3 32          	mov bl, [d]
0488+  08A4 37          	mov bh, bl
0489+  08A5 33 01 00    	mov bl, [d + 1]
0490+  08A8 07 95 06    	call atoi				; convert to int in AL
0491+  08AB 23          	mov ah, al				; move to AH
0492+  08AC             
0493+  08AC 33 02 00    	mov bl, [d + 2]
0494+  08AF 37          	mov bh, bl
0495+  08B0 33 03 00    	mov bl, [d + 3]
0496+  08B3 07 95 06    	call atoi				; convert to int in AL
0497+  08B6             
0498+  08B6 E7          	pop d
0499+  08B7 E5          	pop b
0500+  08B8 F9          	leave
0501+  08B9 09          	ret
0502+  08BA             
0503+  08BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  08BA             ; PRINT 8bit HEX INTEGER
0505+  08BA             ; integer value in reg bl
0506+  08BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  08BA             print_u8x:
0508+  08BA D7          	push a
0509+  08BB DD          	push bl
0510+  08BC             
0511+  08BC 07 A7 06    	call itoa				; convert bl to char in A
0512+  08BF 2F          	mov bl, al				; save al
0513+  08C0 19 00       	mov al, 0
0514+  08C2 05 03       	syscall sys_io				; display AH
0515+  08C4 24          	mov ah, bl				; retrieve al
0516+  08C5 19 00       	mov al, 0
0517+  08C7 05 03       	syscall sys_io				; display AL
0518+  08C9             
0519+  08C9 EA          	pop bl
0520+  08CA E4          	pop a
0521+  08CB 09          	ret
0522+  08CC             
0523+  08CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  08CC             ; print 8bit decimal unsigned number
0525+  08CC             ; input number in AL
0526+  08CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  08CC             print_u8d:
0528+  08CC D7          	push a
0529+  08CD D8          	push b
0530+  08CE             
0531+  08CE 22 00       	mov ah, 0
0532+  08D0 26 64 00    	mov b, 100
0533+  08D3 AE          	div a, b
0534+  08D4 D8          	push b			; save remainder
0535+  08D5 B9 00       	cmp al, 0
0536+  08D7 C6 E1 08    	je skip100
0537+  08DA 6A 30       	add al, $30
0538+  08DC 23          	mov ah, al
0539+  08DD 19 00       	mov al, 0
0540+  08DF 05 03       	syscall sys_io	; print coeff
0541+  08E1             skip100:
0542+  08E1 E4          	pop a
0543+  08E2 22 00       	mov ah, 0
0544+  08E4 26 0A 00    	mov b, 10
0545+  08E7 AE          	div a, b
0546+  08E8 D8          	push b			; save remainder
0547+  08E9 B9 00       	cmp al, 0
0548+  08EB C6 F5 08    	je skip10
0549+  08EE 6A 30       	add al, $30
0550+  08F0 23          	mov ah, al
0551+  08F1 19 00       	mov al, 0
0552+  08F3 05 03       	syscall sys_io	; print coeff
0553+  08F5             skip10:
0554+  08F5 E4          	pop a
0555+  08F6 1B          	mov al, bl
0556+  08F7 6A 30       	add al, $30
0557+  08F9 23          	mov ah, al
0558+  08FA 19 00       	mov al, 0
0559+  08FC 05 03       	syscall sys_io	; print coeff
0560+  08FE E5          	pop b
0561+  08FF E4          	pop a
0562+  0900 09          	ret
0563+  0901             
0564+  0901             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0901             ; INPUT 8BIT HEX INTEGER
0566+  0901             ; read 8bit integer into AL
0567+  0901             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0901             scan_u8x:
0569+  0901 F8 04 00    	enter 4
0570+  0904 D8          	push b
0571+  0905 DA          	push d
0572+  0906             
0573+  0906 FA FD FF    	lea d, [bp + -3]
0574+  0909 07 E7 06    	call gets				; get number
0575+  090C             
0576+  090C 32          	mov bl, [d]
0577+  090D 37          	mov bh, bl
0578+  090E 33 01 00    	mov bl, [d + 1]
0579+  0911 07 95 06    	call atoi				; convert to int in AL
0580+  0914             
0581+  0914 E7          	pop d
0582+  0915 E5          	pop b
0583+  0916 F9          	leave
0584+  0917 09          	ret
0585+  0918             
0586+  0918             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0918             ; input decimal number
0588+  0918             ; result in A
0589+  0918             ; 655'\0'
0590+  0918             ; low--------high
0591+  0918             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  0918             scan_u16d:
0593+  0918 F8 08 00    	enter 8
0594+  091B E2          	push si
0595+  091C D8          	push b
0596+  091D D9          	push c
0597+  091E DA          	push d
0598+  091F FA F9 FF    	lea d, [bp +- 7]
0599+  0922 07 E7 06    	call gets
0600+  0925 07 15 06    	call strlen			; get string length in C
0601+  0928 7E          	dec c
0602+  0929 FD 4E       	mov si, d
0603+  092B 12          	mov a, c
0604+  092C FD 99       	shl a
0605+  092E 3B 7D 06    	mov d, table_power
0606+  0931 59          	add d, a
0607+  0932 38 00 00    	mov c, 0
0608+  0935             mul_loop:
0609+  0935 F6          	lodsb			; load ASCII to al
0610+  0936 B9 00       	cmp al, 0
0611+  0938 C6 4B 09    	je mul_exit
0612+  093B 6F 30       	sub al, $30		; make into integer
0613+  093D 22 00       	mov ah, 0
0614+  093F 2A          	mov b, [d]
0615+  0940 AC          	mul a, b			; result in B since it fits in 16bits
0616+  0941 11          	mov a, b
0617+  0942 28          	mov b, c
0618+  0943 54          	add a, b
0619+  0944 39          	mov c, a
0620+  0945 63 02 00    	sub d, 2
0621+  0948 0A 35 09    	jmp mul_loop
0622+  094B             mul_exit:
0623+  094B 12          	mov a, c
0624+  094C E7          	pop d
0625+  094D E6          	pop c
0626+  094E E5          	pop b
0627+  094F EF          	pop si
0628+  0950 F9          	leave
0629+  0951 09          	ret
0311   0952             ; --- END INCLUDE BLOCK
0312   0952             
0313   0952             
0314   0952             .end
tasm: Number of errors = 0
