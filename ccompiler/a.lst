0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; j
0011   0408 52 02 00      sub sp, 2 ; k
0012   040B 26 64 00      mov b, 100
0013   040E D7            push a
0014   040F 11            mov a, b
0015   0410 45 FF FF      mov [bp + -1], a ; i
0016   0413 E4            pop a
0017   0414 26 32 00      mov b, 50
0018   0417 D7            push a
0019   0418 11            mov a, b
0020   0419 45 FD FF      mov [bp + -3], a ; j
0021   041C E4            pop a
0022   041D 26 05 00      mov b, 5
0023   0420 D7            push a
0024   0421 11            mov a, b
0025   0422 45 FB FF      mov [bp + -5], a ; k
0026   0425 E4            pop a
0027   0426 26 14 00      mov b, 20
0028   0429 2C FF FF      mov b, [bp + -1] ; i
0029   042C D7            push a
0030   042D 11            mov a, b
0031   042E 2C FD FF      mov b, [bp + -3] ; j
0032   0431 D7            push a
0033   0432 11            mov a, b
0034   0433 2C FB FF      mov b, [bp + -5] ; k
0035   0436 AE            div a, b
0036   0437 FD 78         mov g, a
0037   0439 11            mov a, b
0038   043A FD 27         mov b, g
0039   043C E4            pop a
0040   043D AE            div a, b
0041   043E FD 78         mov g, a
0042   0440 11            mov a, b
0043   0441 FD 27         mov b, g
0044   0443 E4            pop a
0045   0444 FD AB         swp b
0046   0446 D8            push b
0047   0447 07 6B 04      call printn
0048   044A 51 02 00      add sp, 2
0049   044D 26 00 00      mov b, 0
0050   0450 F9            leave
0051   0451 05 0B         syscall sys_terminate_proc
0052   0453             scann:
0053   0453 D2            push bp
0054   0454 9B            mov bp, sp
0055   0455 52 02 00      sub sp, 2 ; m
0056   0458             
0057   0458             ; --- BEGIN INLINE ASM BLOCK
0058   0458 07 F6 07      call scan_u16d
0059   045B 45 FF FF      mov [bp + -1], a
0060   045E             ; --- END INLINE ASM BLOCK
0061   045E             
0062   045E FA 05 00      lea d, [bp + 5] ; n
0063   0461 2A            mov b, [d]
0064   0462 D8            push b
0065   0463 2C FF FF      mov b, [bp + -1] ; m
0066   0466 E7            pop d
0067   0467 11            mov a, b
0068   0468 43            mov [d], a
0069   0469 F9            leave
0070   046A 09            ret
0071   046B             printn:
0072   046B D2            push bp
0073   046C 9B            mov bp, sp
0074   046D             
0075   046D             ; --- BEGIN INLINE ASM BLOCK
0076   046D 17 05 00      mov a, [bp + 5]
0077   0470 07 21 07      call print_u16d
0078   0473             ; --- END INLINE ASM BLOCK
0079   0473             
0080   0473 F9            leave
0081   0474 09            ret
0082   0475             print:
0083   0475 D2            push bp
0084   0476 9B            mov bp, sp
0085   0477             
0086   0477             ; --- BEGIN INLINE ASM BLOCK
0087   0477 17 05 00      mov a, [bp + 5]
0088   047A 3C            mov d, a
0089   047B 07 F8 06      call puts
0090   047E             ; --- END INLINE ASM BLOCK
0091   047E             
0092   047E F9            leave
0093   047F 09            ret
0094   0480             ; --- END TEXT BLOCK
0095   0480             
0096   0480             ; --- BEGIN DATA BLOCK
0097   0480             m1_data: 
0098   0480 7B 00 6F 00 .dw 123,111,123,
0098   0484 7B 00 
0099   0486 00 00 00 00 .fill 14, 0
0099   048A 00 00 00 00 
0099   048E 00 00 00 00 
0099   0492 00 00 
0100   0494 80 04       m1: .dw m1_data
0101   0496             m2_data: 
0102   0496 00 00 01 00 .dw 0,1,2,
0102   049A 02 00 
0103   049C 00 00 00 00 .fill 14, 0
0103   04A0 00 00 00 00 
0103   04A4 00 00 00 00 
0103   04A8 00 00 
0104   04AA 96 04       m2: .dw m2_data
0105   04AC             ; --- END DATA BLOCK
0106   04AC             
0107   04AC             ; --- BEGIN INCLUDE BLOCK
0108   04AC             .include "lib/stdio.asm"
0001+  04AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  04AC             ; stdio.s
0003+  04AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  04AC             .include "lib/string.asm"
0001++ 04AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 04AC             ; string.s
0003++ 04AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 04AC             
0005++ 04AC             
0006++ 04AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 04AC             ; strrev
0008++ 04AC             ; reverse a string
0009++ 04AC             ; D = string address
0010++ 04AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 04AC             ; 01234
0012++ 04AC             strrev:
0013++ 04AC 4B          	pusha
0014++ 04AD 07 F3 04    	call strlen	; length in C
0015++ 04B0 12          	mov a, c
0016++ 04B1 AF 01 00    	cmp a, 1
0017++ 04B4 D0 CE 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 04B7 7D          	dec a
0019++ 04B8 FD 4E       	mov si, d	; beginning of string
0020++ 04BA FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 04BC 59          	add d, a	; end of string
0022++ 04BD 12          	mov a, c
0023++ 04BE FD 9B       	shr a		; divide by 2
0024++ 04C0 39          	mov c, a	; C now counts the steps
0025++ 04C1             strrev_L0:
0026++ 04C1 32          	mov bl, [d]	; save load right-side char into BL
0027++ 04C2 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 04C3 3E          	mov [d], al	; store left char into right side
0029++ 04C4 1B          	mov al, bl
0030++ 04C5 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 04C6 7E          	dec c
0032++ 04C7 7F          	dec d
0033++ 04C8 C2 00 00    	cmp c, 0
0034++ 04CB C7 C1 04    	jne strrev_L0
0035++ 04CE             strrev_end:
0036++ 04CE 4C          	popa
0037++ 04CF 09          	ret
0038++ 04D0             	
0039++ 04D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 04D0             ; strchr
0041++ 04D0             ; search string in D for char in AL
0042++ 04D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 04D0             strchr:
0044++ 04D0             strchr_L0:
0045++ 04D0 32          	mov bl, [d]
0046++ 04D1 C1 00       	cmp bl, 0
0047++ 04D3 C6 DE 04    	je strchr_end
0048++ 04D6 BA          	cmp al, bl
0049++ 04D7 C6 DE 04    	je strchr_end
0050++ 04DA 79          	inc d
0051++ 04DB 0A D0 04    	jmp strchr_L0
0052++ 04DE             strchr_end:
0053++ 04DE 1B          	mov al, bl
0054++ 04DF 09          	ret
0055++ 04E0             
0056++ 04E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 04E0             ; strstr
0058++ 04E0             ; find sub-string
0059++ 04E0             ; str1 in SI
0060++ 04E0             ; str2 in DI
0061++ 04E0             ; SI points to end of source string
0062++ 04E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 04E0             strstr:
0064++ 04E0 DB          	push al
0065++ 04E1 DA          	push d
0066++ 04E2 E3          	push di
0067++ 04E3             strstr_loop:
0068++ 04E3 F3          	cmpsb					; compare a byte of the strings
0069++ 04E4 C7 EF 04    	jne strstr_ret
0070++ 04E7 FC 00 00    	lea d, [di + 0]
0071++ 04EA BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 04EC C7 E3 04    	jne strstr_loop				; equal chars but not at end
0073++ 04EF             strstr_ret:
0074++ 04EF F0          	pop di
0075++ 04F0 E7          	pop d
0076++ 04F1 E8          	pop al
0077++ 04F2 09          	ret
0078++ 04F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 04F3             ; length of null terminated string
0080++ 04F3             ; result in C
0081++ 04F3             ; pointer in D
0082++ 04F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 04F3             strlen:
0084++ 04F3 DA          	push d
0085++ 04F4 38 00 00    	mov c, 0
0086++ 04F7             strlen_L1:
0087++ 04F7 BD 00       	cmp byte [d], 0
0088++ 04F9 C6 01 05    	je strlen_ret
0089++ 04FC 79          	inc d
0090++ 04FD 78          	inc c
0091++ 04FE 0A F7 04    	jmp strlen_L1
0092++ 0501             strlen_ret:
0093++ 0501 E7          	pop d
0094++ 0502 09          	ret
0095++ 0503             
0096++ 0503             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0503             ; STRCMP
0098++ 0503             ; compare two strings
0099++ 0503             ; str1 in SI
0100++ 0503             ; str2 in DI
0101++ 0503             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0503             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0503             strcmp:
0104++ 0503 DB          	push al
0105++ 0504 DA          	push d
0106++ 0505 E3          	push di
0107++ 0506 E2          	push si
0108++ 0507             strcmp_loop:
0109++ 0507 F3          	cmpsb					; compare a byte of the strings
0110++ 0508 C7 13 05    	jne strcmp_ret
0111++ 050B FB FF FF    	lea d, [si +- 1]
0112++ 050E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0510 C7 07 05    	jne strcmp_loop				; equal chars but not at end
0114++ 0513             strcmp_ret:
0115++ 0513 EF          	pop si
0116++ 0514 F0          	pop di
0117++ 0515 E7          	pop d
0118++ 0516 E8          	pop al
0119++ 0517 09          	ret
0120++ 0518             
0121++ 0518             
0122++ 0518             ; STRCPY
0123++ 0518             ; copy null terminated string from SI to DI
0124++ 0518             ; source in SI
0125++ 0518             ; destination in DI
0126++ 0518             strcpy:
0127++ 0518 E2          	push si
0128++ 0519 E3          	push di
0129++ 051A DB          	push al
0130++ 051B             strcpy_L1:
0131++ 051B F6          	lodsb
0132++ 051C F7          	stosb
0133++ 051D B9 00       	cmp al, 0
0134++ 051F C7 1B 05    	jne strcpy_L1
0135++ 0522             strcpy_end:
0136++ 0522 E8          	pop al
0137++ 0523 F0          	pop di
0138++ 0524 EF          	pop si
0139++ 0525 09          	ret
0140++ 0526             
0141++ 0526             ; STRCAT
0142++ 0526             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0526             ; source in SI
0144++ 0526             ; destination in DI
0145++ 0526             strcat:
0146++ 0526 E2          	push si
0147++ 0527 E3          	push di
0148++ 0528 D7          	push a
0149++ 0529 DA          	push d
0150++ 052A 50          	mov a, di
0151++ 052B 3C          	mov d, a
0152++ 052C             strcat_goto_end_L1:
0153++ 052C BD 00       	cmp byte[d], 0
0154++ 052E C6 35 05    	je strcat_start
0155++ 0531 79          	inc d
0156++ 0532 0A 2C 05    	jmp strcat_goto_end_L1
0157++ 0535             strcat_start:
0158++ 0535 FD 50       	mov di, d
0159++ 0537             strcat_L1:
0160++ 0537 F6          	lodsb
0161++ 0538 F7          	stosb
0162++ 0539 B9 00       	cmp al, 0
0163++ 053B C7 37 05    	jne strcat_L1
0164++ 053E             strcat_end:
0165++ 053E E7          	pop d
0166++ 053F E4          	pop a
0167++ 0540 F0          	pop di
0168++ 0541 EF          	pop si
0169++ 0542 09          	ret
0005+  0543             
0006+  0543 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0547 34 35 36 37 
0006+  054B 38 39 41 42 
0006+  054F 43 44 45 46 
0007+  0553 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0557 1B 5B 48 00 
0008+  055B             
0009+  055B 01 00       table_power:.dw 1
0010+  055D 0A 00       			.dw 10
0011+  055F 64 00       			.dw 100
0012+  0561 E8 03       			.dw 1000
0013+  0563 10 27       			.dw 10000
0014+  0565             
0015+  0565             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0565             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0565             ; ASCII in BL
0018+  0565             ; result in AL
0019+  0565             ; ascii for F = 0100 0110
0020+  0565             ; ascii for 9 = 0011 1001
0021+  0565             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0565             hex_ascii_encode:
0023+  0565 1B          	mov al, bl
0024+  0566 93 40       	test al, $40				; test if letter or number
0025+  0568 C7 6E 05    	jnz hex_letter
0026+  056B 87 0F       	and al, $0F				; get number
0027+  056D 09          	ret
0028+  056E             hex_letter:
0029+  056E 87 0F       	and al, $0F				; get letter
0030+  0570 6A 09       	add al, 9
0031+  0572 09          	ret
0032+  0573             
0033+  0573             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0573             ; ATOI
0035+  0573             ; 2 letter hex string in B
0036+  0573             ; 8bit integer returned in AL
0037+  0573             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0573             atoi:
0039+  0573 D8          	push b
0040+  0574 07 65 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0577 30          	mov bl, bh
0042+  0578 DB          	push al					; save a
0043+  0579 07 65 05    	call hex_ascii_encode
0044+  057C EA          	pop bl	
0045+  057D FD 9E 04    	shl al, 4
0046+  0580 8C          	or al, bl
0047+  0581 E5          	pop b
0048+  0582 09          	ret	
0049+  0583             
0050+  0583             
0051+  0583             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0583             ; printf
0053+  0583             ; no need for explanations!
0054+  0583             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0583             printf:
0056+  0583 09          	ret
0057+  0584             
0058+  0584             
0059+  0584             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0584             ; scanf
0061+  0584             ; no need for explanations!
0062+  0584             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0584             scanf:
0064+  0584 09          	ret
0065+  0585             
0066+  0585             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0585             ; ITOA
0068+  0585             ; 8bit value in BL
0069+  0585             ; 2 byte ASCII result in A
0070+  0585             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0585             itoa:
0072+  0585 DA          	push d
0073+  0586 D8          	push b
0074+  0587 A7 00       	mov bh, 0
0075+  0589 FD A4 04    	shr bl, 4	
0076+  058C 74          	mov d, b
0077+  058D 1F 43 05    	mov al, [d + s_hex_digits]
0078+  0590 23          	mov ah, al
0079+  0591             	
0080+  0591 E5          	pop b
0081+  0592 D8          	push b
0082+  0593 A7 00       	mov bh, 0
0083+  0595 FD 87 0F    	and bl, $0F
0084+  0598 74          	mov d, b
0085+  0599 1F 43 05    	mov al, [d + s_hex_digits]
0086+  059C E5          	pop b
0087+  059D E7          	pop d
0088+  059E 09          	ret
0089+  059F             
0090+  059F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  059F             ; HEX STRING TO BINARY
0092+  059F             ; di = destination address
0093+  059F             ; si = source
0094+  059F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  059F             hex_to_int:
0096+  059F             hex_to_int_L1:
0097+  059F F6          	lodsb					; load from [SI] to AL
0098+  05A0 B9 00       	cmp al, 0				; check if ASCII 0
0099+  05A2 C6 AF 05    	jz hex_to_int_ret
0100+  05A5 36          	mov bh, al
0101+  05A6 F6          	lodsb
0102+  05A7 2F          	mov bl, al
0103+  05A8 07 73 05    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  05AB F7          	stosb					; store AL to [DI]
0105+  05AC 0A 9F 05    	jmp hex_to_int_L1
0106+  05AF             hex_to_int_ret:
0107+  05AF 09          	ret		
0108+  05B0             
0109+  05B0             
0110+  05B0             
0111+  05B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  05B0             ; GETCHAR
0113+  05B0             ; char in ah
0114+  05B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  05B0             getchar:
0116+  05B0 DB          	push al
0117+  05B1             getchar_retry:
0118+  05B1 FD 0C       	sti
0119+  05B3 19 01       	mov al, 1
0120+  05B5 05 03       	syscall sys_io			; receive in AH
0121+  05B7 B9 00       	cmp al, 0			; check if any char was receive
0122+  05B9 C6 B1 05    	je getchar_retry
0123+  05BC E8          	pop al
0124+  05BD 09          	ret
0125+  05BE             
0126+  05BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  05BE             ; PUTCHAR
0128+  05BE             ; char in ah
0129+  05BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  05BE             putchar:
0131+  05BE D7          	push a
0132+  05BF 19 00       	mov al, 0
0133+  05C1 05 03       	syscall sys_io			; char in AH
0134+  05C3 E4          	pop a
0135+  05C4 09          	ret
0136+  05C5             
0137+  05C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  05C5             ;; INPUT A STRING
0139+  05C5             ;; terminates with null
0140+  05C5             ;; pointer in D
0141+  05C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  05C5             gets:
0143+  05C5 D7          	push a
0144+  05C6 DA          	push d
0145+  05C7             gets_loop:
0146+  05C7 FD 0C       	sti
0147+  05C9 19 01       	mov al, 1
0148+  05CB 05 03       	syscall sys_io			; receive in AH
0149+  05CD B9 00       	cmp al, 0				; check error code (AL)
0150+  05CF C6 C7 05    	je gets_loop			; if no char received, retry
0151+  05D2             
0152+  05D2 76 1B       	cmp ah, 27
0153+  05D4 C6 F5 05    	je gets_telnet_escape
0154+  05D7 76 0A       	cmp ah, $0A				; LF
0155+  05D9 C6 4E 06    	je gets_end
0156+  05DC 76 0D       	cmp ah, $0D				; CR
0157+  05DE C6 4E 06    	je gets_end
0158+  05E1 76 5C       	cmp ah, $5C				; '\\'
0159+  05E3 C6 25 06    	je gets_escape
0160+  05E6             	
0161+  05E6 76 08       	cmp ah, $08			; check for backspace
0162+  05E8 C6 F1 05    	je gets_backspace
0163+  05EB             
0164+  05EB 1A          	mov al, ah
0165+  05EC 3E          	mov [d], al
0166+  05ED 79          	inc d
0167+  05EE 0A C7 05    	jmp gets_loop
0168+  05F1             gets_backspace:
0169+  05F1 7F          	dec d
0170+  05F2 0A C7 05    	jmp gets_loop
0171+  05F5             gets_telnet_escape:
0172+  05F5 FD 0C       	sti
0173+  05F7 19 01       	mov al, 1
0174+  05F9 05 03       	syscall sys_io				; receive in AH without echo
0175+  05FB B9 00       	cmp al, 0					; check error code (AL)
0176+  05FD C6 F5 05    	je gets_telnet_escape		; if no char received, retry
0177+  0600 76 5B       	cmp ah, '['
0178+  0602 C7 C7 05    	jne gets_loop
0179+  0605             gets_telnet_escape_phase2:
0180+  0605 FD 0C       	sti
0181+  0607 19 01       	mov al, 1
0182+  0609 05 03       	syscall sys_io					; receive in AH without echo
0183+  060B B9 00       	cmp al, 0						; check error code (AL)
0184+  060D C6 05 06    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0610 76 44       	cmp ah, 'D'
0186+  0612 C6 1D 06    	je gets_left_arrow
0187+  0615 76 43       	cmp ah, 'C'
0188+  0617 C6 21 06    	je gets_right_arrow
0189+  061A 0A C7 05    	jmp gets_loop
0190+  061D             gets_left_arrow:
0191+  061D 7F          	dec d
0192+  061E 0A C7 05    	jmp gets_loop
0193+  0621             gets_right_arrow:
0194+  0621 79          	inc d
0195+  0622 0A C7 05    	jmp gets_loop
0196+  0625             gets_escape:
0197+  0625 FD 0C       	sti
0198+  0627 19 01       	mov al, 1
0199+  0629 05 03       	syscall sys_io			; receive in AH
0200+  062B B9 00       	cmp al, 0				; check error code (AL)
0201+  062D C6 25 06    	je gets_escape			; if no char received, retry
0202+  0630 76 6E       	cmp ah, 'n'
0203+  0632 C6 40 06    	je gets_LF
0204+  0635 76 72       	cmp ah, 'r'
0205+  0637 C6 47 06    	je gets_CR
0206+  063A 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  063B 3E          	mov [d], al
0208+  063C 79          	inc d
0209+  063D 0A C7 05    	jmp gets_loop
0210+  0640             gets_LF:
0211+  0640 19 0A       	mov al, $0A
0212+  0642 3E          	mov [d], al
0213+  0643 79          	inc d
0214+  0644 0A C7 05    	jmp gets_loop
0215+  0647             gets_CR:
0216+  0647 19 0D       	mov al, $0D
0217+  0649 3E          	mov [d], al
0218+  064A 79          	inc d
0219+  064B 0A C7 05    	jmp gets_loop
0220+  064E             gets_end:
0221+  064E 19 00       	mov al, 0
0222+  0650 3E          	mov [d], al				; terminate string
0223+  0651 E7          	pop d
0224+  0652 E4          	pop a
0225+  0653 09          	ret
0226+  0654             
0227+  0654             
0228+  0654             
0229+  0654             
0230+  0654             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0654             ;; INPUT TEXT
0232+  0654             ;; terminated with CTRL+D
0233+  0654             ;; pointer in D
0234+  0654             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0654             gettxt:
0236+  0654 D7          	push a
0237+  0655 DA          	push d
0238+  0656             gettxt_loop:
0239+  0656 19 01       	mov al, 1
0240+  0658 05 03       	syscall sys_io			; receive in AH
0241+  065A B9 00       	cmp al, 0				; check error code (AL)
0242+  065C C6 56 06    	je gettxt_loop		; if no char received, retry
0243+  065F 76 04       	cmp ah, 4			; EOT
0244+  0661 C6 9F 06    	je gettxt_end
0245+  0664 76 08       	cmp ah, $08			; check for backspace
0246+  0666 C6 9B 06    	je gettxt_backspace
0247+  0669 76 5C       	cmp ah, $5C				; '\\'
0248+  066B C6 74 06    	je gettxt_escape
0249+  066E 1A          	mov al, ah
0250+  066F 3E          	mov [d], al
0251+  0670 79          	inc d
0252+  0671 0A 56 06    	jmp gettxt_loop
0253+  0674             gettxt_escape:
0254+  0674 19 01       	mov al, 1
0255+  0676 05 03       	syscall sys_io			; receive in AH
0256+  0678 B9 00       	cmp al, 0				; check error code (AL)
0257+  067A C6 74 06    	je gettxt_escape		; if no char received, retry
0258+  067D 76 6E       	cmp ah, 'n'
0259+  067F C6 8D 06    	je gettxt_LF
0260+  0682 76 72       	cmp ah, 'r'
0261+  0684 C6 94 06    	je gettxt_CR
0262+  0687 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0688 3E          	mov [d], al
0264+  0689 79          	inc d
0265+  068A 0A 56 06    	jmp gettxt_loop
0266+  068D             gettxt_LF:
0267+  068D 19 0A       	mov al, $0A
0268+  068F 3E          	mov [d], al
0269+  0690 79          	inc d
0270+  0691 0A 56 06    	jmp gettxt_loop
0271+  0694             gettxt_CR:
0272+  0694 19 0D       	mov al, $0D
0273+  0696 3E          	mov [d], al
0274+  0697 79          	inc d
0275+  0698 0A 56 06    	jmp gettxt_loop
0276+  069B             gettxt_backspace:
0277+  069B 7F          	dec d
0278+  069C 0A 56 06    	jmp gettxt_loop
0279+  069F             gettxt_end:
0280+  069F 19 00       	mov al, 0
0281+  06A1 3E          	mov [d], al				; terminate string
0282+  06A2 E7          	pop d
0283+  06A3 E4          	pop a
0284+  06A4 09          	ret
0285+  06A5             
0286+  06A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  06A5             ; PRINT NEW LINE
0288+  06A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  06A5             printnl:
0290+  06A5 D7          	push a
0291+  06A6 10 00 0A    	mov a, $0A00
0292+  06A9 05 03       	syscall sys_io
0293+  06AB 10 00 0D    	mov a, $0D00
0294+  06AE 05 03       	syscall sys_io
0295+  06B0 E4          	pop a
0296+  06B1 09          	ret
0297+  06B2             
0298+  06B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  06B2             ; strtoint
0300+  06B2             ; 4 digit hex string number in d
0301+  06B2             ; integer returned in A
0302+  06B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  06B2             strtointx:
0304+  06B2 D8          	push b
0305+  06B3 32          	mov bl, [d]
0306+  06B4 37          	mov bh, bl
0307+  06B5 33 01 00    	mov bl, [d + 1]
0308+  06B8 07 73 05    	call atoi				; convert to int in AL
0309+  06BB 23          	mov ah, al				; move to AH
0310+  06BC 33 02 00    	mov bl, [d + 2]
0311+  06BF 37          	mov bh, bl
0312+  06C0 33 03 00    	mov bl, [d + 3]
0313+  06C3 07 73 05    	call atoi				; convert to int in AL
0314+  06C6 E5          	pop b
0315+  06C7 09          	ret
0316+  06C8             
0317+  06C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  06C8             ; strtoint
0319+  06C8             ; 5 digit base10 string number in d
0320+  06C8             ; integer returned in A
0321+  06C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  06C8             strtoint:
0323+  06C8 E2          	push si
0324+  06C9 D8          	push b
0325+  06CA D9          	push c
0326+  06CB DA          	push d
0327+  06CC 07 F3 04    	call strlen			; get string length in C
0328+  06CF 7E          	dec c
0329+  06D0 FD 4E       	mov si, d
0330+  06D2 12          	mov a, c
0331+  06D3 FD 99       	shl a
0332+  06D5 3B 5B 05    	mov d, table_power
0333+  06D8 59          	add d, a
0334+  06D9 38 00 00    	mov c, 0
0335+  06DC             strtoint_L0:
0336+  06DC F6          	lodsb			; load ASCII to al
0337+  06DD B9 00       	cmp al, 0
0338+  06DF C6 F2 06    	je strtoint_end
0339+  06E2 6F 30       	sub al, $30		; make into integer
0340+  06E4 22 00       	mov ah, 0
0341+  06E6 2A          	mov b, [d]
0342+  06E7 AC          	mul a, b			; result in B since it fits in 16bits
0343+  06E8 11          	mov a, b
0344+  06E9 28          	mov b, c
0345+  06EA 54          	add a, b
0346+  06EB 39          	mov c, a
0347+  06EC 63 02 00    	sub d, 2
0348+  06EF 0A DC 06    	jmp strtoint_L0
0349+  06F2             strtoint_end:
0350+  06F2 12          	mov a, c
0351+  06F3 E7          	pop d
0352+  06F4 E6          	pop c
0353+  06F5 E5          	pop b
0354+  06F6 EF          	pop si
0355+  06F7 09          	ret
0356+  06F8             
0357+  06F8             
0358+  06F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  06F8             ; PRINT NULL TERMINATED STRING
0360+  06F8             ; pointer in D
0361+  06F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  06F8             puts:
0363+  06F8 D7          	push a
0364+  06F9 DA          	push d
0365+  06FA             puts_L1:
0366+  06FA 1E          	mov al, [d]
0367+  06FB B9 00       	cmp al, 0
0368+  06FD C6 09 07    	jz puts_END
0369+  0700 23          	mov ah, al
0370+  0701 19 00       	mov al, 0
0371+  0703 05 03       	syscall sys_io
0372+  0705 79          	inc d
0373+  0706 0A FA 06    	jmp puts_L1
0374+  0709             puts_END:
0375+  0709 E7          	pop d
0376+  070A E4          	pop a
0377+  070B 09          	ret
0378+  070C             
0379+  070C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  070C             ; PRINT N SIZE STRING
0381+  070C             ; pointer in D
0382+  070C             ; size in C
0383+  070C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  070C             putsn:
0385+  070C DB          	push al
0386+  070D DA          	push d
0387+  070E D9          	push c
0388+  070F             putsn_L0:
0389+  070F 1E          	mov al, [d]
0390+  0710 23          	mov ah, al
0391+  0711 19 00       	mov al, 0
0392+  0713 05 03       	syscall sys_io
0393+  0715 79          	inc d
0394+  0716 7E          	dec c	
0395+  0717 C2 00 00    	cmp c, 0
0396+  071A C7 0F 07    	jne putsn_L0
0397+  071D             putsn_end:
0398+  071D E6          	pop c
0399+  071E E7          	pop d
0400+  071F E8          	pop al
0401+  0720 09          	ret
0402+  0721             
0403+  0721             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  0721             ; print 16bit decimal number
0405+  0721             ; input number in A
0406+  0721             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  0721             print_u16d:
0408+  0721 D7          	push a
0409+  0722 D8          	push b
0410+  0723 26 10 27    	mov b, 10000
0411+  0726 AE          	div a, b			; get 10000 coeff.
0412+  0727 07 4D 07    	call print_number
0413+  072A 11          	mov a, b
0414+  072B 26 E8 03    	mov b, 1000
0415+  072E AE          	div a, b			; get 10000 coeff.
0416+  072F 07 4D 07    	call print_number
0417+  0732 11          	mov a, b
0418+  0733 26 64 00    	mov b, 100
0419+  0736 AE          	div a, b
0420+  0737 07 4D 07    	call print_number
0421+  073A 11          	mov a, b
0422+  073B 26 0A 00    	mov b, 10
0423+  073E AE          	div a, b
0424+  073F 07 4D 07    	call print_number
0425+  0742 11          	mov a, b
0426+  0743 6A 30       	add al, $30
0427+  0745 23          	mov ah, al
0428+  0746 19 00       	mov al, 0
0429+  0748 05 03       	syscall sys_io	; print coeff
0430+  074A E5          	pop b
0431+  074B E4          	pop a
0432+  074C 09          	ret
0433+  074D             
0434+  074D             
0435+  074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  074D             ; if A == 0, print space
0437+  074D             ; else print A
0438+  074D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  074D             print_number:
0440+  074D 6A 30       	add al, $30
0441+  074F 23          	mov ah, al
0442+  0750 07 BE 05    	call putchar
0443+  0753 09          	ret
0444+  0754             
0445+  0754             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0754             ; PRINT 16BIT HEX INTEGER
0447+  0754             ; integer value in reg B
0448+  0754             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0754             print_u16x:
0450+  0754 D7          	push a
0451+  0755 D8          	push b
0452+  0756 DD          	push bl
0453+  0757 30          	mov bl, bh
0454+  0758 07 85 05    	call itoa				; convert bh to char in A
0455+  075B 2F          	mov bl, al				; save al
0456+  075C 19 00       	mov al, 0
0457+  075E 05 03       	syscall sys_io				; display AH
0458+  0760 24          	mov ah, bl				; retrieve al
0459+  0761 19 00       	mov al, 0
0460+  0763 05 03       	syscall sys_io				; display AL
0461+  0765             
0462+  0765 EA          	pop bl
0463+  0766 07 85 05    	call itoa				; convert bh to char in A
0464+  0769 2F          	mov bl, al				; save al
0465+  076A 19 00       	mov al, 0
0466+  076C 05 03       	syscall sys_io				; display AH
0467+  076E 24          	mov ah, bl				; retrieve al
0468+  076F 19 00       	mov al, 0
0469+  0771 05 03       	syscall sys_io				; display AL
0470+  0773             
0471+  0773 E5          	pop b
0472+  0774 E4          	pop a
0473+  0775 09          	ret
0474+  0776             
0475+  0776             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0776             ; INPUT 16BIT HEX INTEGER
0477+  0776             ; read 16bit integer into A
0478+  0776             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0776             scan_u16x:
0480+  0776 F8 10 00    	enter 16
0481+  0779 D8          	push b
0482+  077A DA          	push d
0483+  077B             
0484+  077B FA F1 FF    	lea d, [bp + -15]
0485+  077E 07 C5 05    	call gets				; get number
0486+  0781             
0487+  0781 32          	mov bl, [d]
0488+  0782 37          	mov bh, bl
0489+  0783 33 01 00    	mov bl, [d + 1]
0490+  0786 07 73 05    	call atoi				; convert to int in AL
0491+  0789 23          	mov ah, al				; move to AH
0492+  078A             
0493+  078A 33 02 00    	mov bl, [d + 2]
0494+  078D 37          	mov bh, bl
0495+  078E 33 03 00    	mov bl, [d + 3]
0496+  0791 07 73 05    	call atoi				; convert to int in AL
0497+  0794             
0498+  0794 E7          	pop d
0499+  0795 E5          	pop b
0500+  0796 F9          	leave
0501+  0797 09          	ret
0502+  0798             
0503+  0798             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0798             ; PRINT 8bit HEX INTEGER
0505+  0798             ; integer value in reg bl
0506+  0798             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0798             print_u8x:
0508+  0798 D7          	push a
0509+  0799 DD          	push bl
0510+  079A             
0511+  079A 07 85 05    	call itoa				; convert bl to char in A
0512+  079D 2F          	mov bl, al				; save al
0513+  079E 19 00       	mov al, 0
0514+  07A0 05 03       	syscall sys_io				; display AH
0515+  07A2 24          	mov ah, bl				; retrieve al
0516+  07A3 19 00       	mov al, 0
0517+  07A5 05 03       	syscall sys_io				; display AL
0518+  07A7             
0519+  07A7 EA          	pop bl
0520+  07A8 E4          	pop a
0521+  07A9 09          	ret
0522+  07AA             
0523+  07AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  07AA             ; print 8bit decimal unsigned number
0525+  07AA             ; input number in AL
0526+  07AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  07AA             print_u8d:
0528+  07AA D7          	push a
0529+  07AB D8          	push b
0530+  07AC             
0531+  07AC 22 00       	mov ah, 0
0532+  07AE 26 64 00    	mov b, 100
0533+  07B1 AE          	div a, b
0534+  07B2 D8          	push b			; save remainder
0535+  07B3 B9 00       	cmp al, 0
0536+  07B5 C6 BF 07    	je skip100
0537+  07B8 6A 30       	add al, $30
0538+  07BA 23          	mov ah, al
0539+  07BB 19 00       	mov al, 0
0540+  07BD 05 03       	syscall sys_io	; print coeff
0541+  07BF             skip100:
0542+  07BF E4          	pop a
0543+  07C0 22 00       	mov ah, 0
0544+  07C2 26 0A 00    	mov b, 10
0545+  07C5 AE          	div a, b
0546+  07C6 D8          	push b			; save remainder
0547+  07C7 B9 00       	cmp al, 0
0548+  07C9 C6 D3 07    	je skip10
0549+  07CC 6A 30       	add al, $30
0550+  07CE 23          	mov ah, al
0551+  07CF 19 00       	mov al, 0
0552+  07D1 05 03       	syscall sys_io	; print coeff
0553+  07D3             skip10:
0554+  07D3 E4          	pop a
0555+  07D4 1B          	mov al, bl
0556+  07D5 6A 30       	add al, $30
0557+  07D7 23          	mov ah, al
0558+  07D8 19 00       	mov al, 0
0559+  07DA 05 03       	syscall sys_io	; print coeff
0560+  07DC E5          	pop b
0561+  07DD E4          	pop a
0562+  07DE 09          	ret
0563+  07DF             
0564+  07DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  07DF             ; INPUT 8BIT HEX INTEGER
0566+  07DF             ; read 8bit integer into AL
0567+  07DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  07DF             scan_u8x:
0569+  07DF F8 04 00    	enter 4
0570+  07E2 D8          	push b
0571+  07E3 DA          	push d
0572+  07E4             
0573+  07E4 FA FD FF    	lea d, [bp + -3]
0574+  07E7 07 C5 05    	call gets				; get number
0575+  07EA             
0576+  07EA 32          	mov bl, [d]
0577+  07EB 37          	mov bh, bl
0578+  07EC 33 01 00    	mov bl, [d + 1]
0579+  07EF 07 73 05    	call atoi				; convert to int in AL
0580+  07F2             
0581+  07F2 E7          	pop d
0582+  07F3 E5          	pop b
0583+  07F4 F9          	leave
0584+  07F5 09          	ret
0585+  07F6             
0586+  07F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  07F6             ; input decimal number
0588+  07F6             ; result in A
0589+  07F6             ; 655'\0'
0590+  07F6             ; low--------high
0591+  07F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  07F6             scan_u16d:
0593+  07F6 F8 08 00    	enter 8
0594+  07F9 E2          	push si
0595+  07FA D8          	push b
0596+  07FB D9          	push c
0597+  07FC DA          	push d
0598+  07FD FA F9 FF    	lea d, [bp +- 7]
0599+  0800 07 C5 05    	call gets
0600+  0803 07 F3 04    	call strlen			; get string length in C
0601+  0806 7E          	dec c
0602+  0807 FD 4E       	mov si, d
0603+  0809 12          	mov a, c
0604+  080A FD 99       	shl a
0605+  080C 3B 5B 05    	mov d, table_power
0606+  080F 59          	add d, a
0607+  0810 38 00 00    	mov c, 0
0608+  0813             mul_loop:
0609+  0813 F6          	lodsb			; load ASCII to al
0610+  0814 B9 00       	cmp al, 0
0611+  0816 C6 29 08    	je mul_exit
0612+  0819 6F 30       	sub al, $30		; make into integer
0613+  081B 22 00       	mov ah, 0
0614+  081D 2A          	mov b, [d]
0615+  081E AC          	mul a, b			; result in B since it fits in 16bits
0616+  081F 11          	mov a, b
0617+  0820 28          	mov b, c
0618+  0821 54          	add a, b
0619+  0822 39          	mov c, a
0620+  0823 63 02 00    	sub d, 2
0621+  0826 0A 13 08    	jmp mul_loop
0622+  0829             mul_exit:
0623+  0829 12          	mov a, c
0624+  082A E7          	pop d
0625+  082B E6          	pop c
0626+  082C E5          	pop b
0627+  082D EF          	pop si
0628+  082E F9          	leave
0629+  082F 09          	ret
0109   0830             ; --- END INCLUDE BLOCK
0110   0830             
0111   0830             
0112   0830             .end
tasm: Number of errors = 0
