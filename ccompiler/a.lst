0001   0000             ; --- Filename: test.c
0002   0000             
0003   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0004   0000             
0005   0400             .org PROC_TEXT_ORG
0006   0400             
0007   0400             ; --- begin text block
0008   0400             main:
0009   0400 D2            push bp
0010   0401 9B            mov bp, sp
0011   0402             ; --- begin asm block
0012   0402 07 C0 07        call scan_u16d
0013   0405 42 7A 04        mov [i], a
0014   0408               ; --- end asm block
0015   0408             _switch1_expr:
0016   0408 29 7A 04      mov b, [i]
0017   040B             _switch1_comparisons:
0018   040B C0 01 00      cmp b, 1
0019   040E C6 53 04      je _switch1_case0
0020   0411 C0 02 00      cmp b, 2
0021   0414 C6 60 04      je _switch1_case1
0022   0417             _switch1_default:
0023   0417             _switch2_expr:
0024   0417 29 7C 04      mov b, [j]
0025   041A             _switch2_comparisons:
0026   041A C0 21 00      cmp b, 33
0027   041D C6 36 04      je _switch2_case0
0028   0420 C0 16 00      cmp b, 22
0029   0423 C6 43 04      je _switch2_case1
0030   0426             _switch2_default:
0031   0426 26 58 00      mov b, 88
0032   0429 FD 42 7A 04   mov [i], b
0033   042D 07 70 04      call print
0034   0430 0A 50 04      jmp _switch2_exit
0035   0433 0A 50 04      jmp _switch2_exit
0036   0436             _switch2_case0:
0037   0436 26 21 00      mov b, 33
0038   0439 FD 42 7A 04   mov [i], b
0039   043D 07 70 04      call print
0040   0440 0A 50 04      jmp _switch2_exit
0041   0443             _switch2_case1:
0042   0443 26 16 00      mov b, 22
0043   0446 FD 42 7A 04   mov [i], b
0044   044A 07 70 04      call print
0045   044D 0A 50 04      jmp _switch2_exit
0046   0450             _switch2_exit:
0047   0450 0A 6D 04      jmp _switch1_exit
0048   0453             _switch1_case0:
0049   0453 26 01 00      mov b, 1
0050   0456 FD 42 7A 04   mov [i], b
0051   045A 07 70 04      call print
0052   045D 0A 6D 04      jmp _switch1_exit
0053   0460             _switch1_case1:
0054   0460 26 02 00      mov b, 2
0055   0463 FD 42 7A 04   mov [i], b
0056   0467 07 70 04      call print
0057   046A 0A 6D 04      jmp _switch1_exit
0058   046D             _switch1_exit:
0059   046D F9            leave
0060   046E 05 0B         syscall sys_terminate_proc
0061   0470             print:
0062   0470 D2            push bp
0063   0471 9B            mov bp, sp
0064   0472             ; --- begin asm block
0065   0472 14 7A 04        mov a, [i]
0066   0475 07 EB 06        call print_u16d
0067   0478               ; --- end asm block
0068   0478 F9            leave
0069   0479 09            ret
0070   047A             ; --- end text block
0071   047A             
0072   047A             ; --- begin data block
0073   047A 36 00       i: .dw 54
0074   047C 63 00       j: .dw 99
0075   047E             ; --- end data block
0076   047E             ; --- begin include block
0077   047E             .include "lib/stdio.asm"
0001+  047E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  047E             ; stdio.s
0003+  047E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  047E             .include "lib/string.asm"
0001++ 047E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 047E             ; string.s
0003++ 047E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 047E             
0005++ 047E             
0006++ 047E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 047E             ; strrev
0008++ 047E             ; reverse a string
0009++ 047E             ; D = string address
0010++ 047E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 047E             ; 01234
0012++ 047E             strrev:
0013++ 047E 4B          	pusha
0014++ 047F 07 C5 04    	call strlen	; length in C
0015++ 0482 12          	mov a, c
0016++ 0483 AF 01 00    	cmp a, 1
0017++ 0486 D0 A0 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0489 7D          	dec a
0019++ 048A FD 4E       	mov si, d	; beginning of string
0020++ 048C FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 048E 59          	add d, a	; end of string
0022++ 048F 12          	mov a, c
0023++ 0490 FD 9B       	shr a		; divide by 2
0024++ 0492 39          	mov c, a	; C now counts the steps
0025++ 0493             strrev_L0:
0026++ 0493 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0494 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0495 3E          	mov [d], al	; store left char into right side
0029++ 0496 1B          	mov al, bl
0030++ 0497 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0498 7E          	dec c
0032++ 0499 7F          	dec d
0033++ 049A C2 00 00    	cmp c, 0
0034++ 049D C7 93 04    	jne strrev_L0
0035++ 04A0             strrev_end:
0036++ 04A0 4C          	popa
0037++ 04A1 09          	ret
0038++ 04A2             	
0039++ 04A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 04A2             ; strchr
0041++ 04A2             ; search string in D for char in AL
0042++ 04A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 04A2             strchr:
0044++ 04A2             strchr_L0:
0045++ 04A2 32          	mov bl, [d]
0046++ 04A3 C1 00       	cmp bl, 0
0047++ 04A5 C6 B0 04    	je strchr_end
0048++ 04A8 BA          	cmp al, bl
0049++ 04A9 C6 B0 04    	je strchr_end
0050++ 04AC 79          	inc d
0051++ 04AD 0A A2 04    	jmp strchr_L0
0052++ 04B0             strchr_end:
0053++ 04B0 1B          	mov al, bl
0054++ 04B1 09          	ret
0055++ 04B2             
0056++ 04B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 04B2             ; strstr
0058++ 04B2             ; find sub-string
0059++ 04B2             ; str1 in SI
0060++ 04B2             ; str2 in DI
0061++ 04B2             ; SI points to end of source string
0062++ 04B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 04B2             strstr:
0064++ 04B2 DB          	push al
0065++ 04B3 DA          	push d
0066++ 04B4 E3          	push di
0067++ 04B5             strstr_loop:
0068++ 04B5 F3          	cmpsb					; compare a byte of the strings
0069++ 04B6 C7 C1 04    	jne strstr_ret
0070++ 04B9 FC 00 00    	lea d, [di + 0]
0071++ 04BC BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 04BE C7 B5 04    	jne strstr_loop				; equal chars but not at end
0073++ 04C1             strstr_ret:
0074++ 04C1 F0          	pop di
0075++ 04C2 E7          	pop d
0076++ 04C3 E8          	pop al
0077++ 04C4 09          	ret
0078++ 04C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 04C5             ; length of null terminated string
0080++ 04C5             ; result in C
0081++ 04C5             ; pointer in D
0082++ 04C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 04C5             strlen:
0084++ 04C5 DA          	push d
0085++ 04C6 38 00 00    	mov c, 0
0086++ 04C9             strlen_L1:
0087++ 04C9 BD 00       	cmp byte [d], 0
0088++ 04CB C6 D3 04    	je strlen_ret
0089++ 04CE 79          	inc d
0090++ 04CF 78          	inc c
0091++ 04D0 0A C9 04    	jmp strlen_L1
0092++ 04D3             strlen_ret:
0093++ 04D3 E7          	pop d
0094++ 04D4 09          	ret
0095++ 04D5             
0096++ 04D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04D5             ; STRCMP
0098++ 04D5             ; compare two strings
0099++ 04D5             ; str1 in SI
0100++ 04D5             ; str2 in DI
0101++ 04D5             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04D5             strcmp:
0104++ 04D5 DB          	push al
0105++ 04D6 DA          	push d
0106++ 04D7 E3          	push di
0107++ 04D8 E2          	push si
0108++ 04D9             strcmp_loop:
0109++ 04D9 F3          	cmpsb					; compare a byte of the strings
0110++ 04DA C7 E5 04    	jne strcmp_ret
0111++ 04DD FB FF FF    	lea d, [si +- 1]
0112++ 04E0 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04E2 C7 D9 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04E5             strcmp_ret:
0115++ 04E5 EF          	pop si
0116++ 04E6 F0          	pop di
0117++ 04E7 E7          	pop d
0118++ 04E8 E8          	pop al
0119++ 04E9 09          	ret
0120++ 04EA             
0121++ 04EA             
0122++ 04EA             ; STRCPY
0123++ 04EA             ; copy null terminated string from SI to DI
0124++ 04EA             ; source in SI
0125++ 04EA             ; destination in DI
0126++ 04EA             strcpy:
0127++ 04EA E2          	push si
0128++ 04EB E3          	push di
0129++ 04EC DB          	push al
0130++ 04ED             strcpy_L1:
0131++ 04ED F6          	lodsb
0132++ 04EE F7          	stosb
0133++ 04EF B9 00       	cmp al, 0
0134++ 04F1 C7 ED 04    	jne strcpy_L1
0135++ 04F4             strcpy_end:
0136++ 04F4 E8          	pop al
0137++ 04F5 F0          	pop di
0138++ 04F6 EF          	pop si
0139++ 04F7 09          	ret
0140++ 04F8             
0141++ 04F8             ; STRCAT
0142++ 04F8             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04F8             ; source in SI
0144++ 04F8             ; destination in DI
0145++ 04F8             strcat:
0146++ 04F8 E2          	push si
0147++ 04F9 E3          	push di
0148++ 04FA D7          	push a
0149++ 04FB DA          	push d
0150++ 04FC 50          	mov a, di
0151++ 04FD 3C          	mov d, a
0152++ 04FE             strcat_goto_end_L1:
0153++ 04FE BD 00       	cmp byte[d], 0
0154++ 0500 C6 07 05    	je strcat_start
0155++ 0503 79          	inc d
0156++ 0504 0A FE 04    	jmp strcat_goto_end_L1
0157++ 0507             strcat_start:
0158++ 0507 FD 50       	mov di, d
0159++ 0509             strcat_L1:
0160++ 0509 F6          	lodsb
0161++ 050A F7          	stosb
0162++ 050B B9 00       	cmp al, 0
0163++ 050D C7 09 05    	jne strcat_L1
0164++ 0510             strcat_end:
0165++ 0510 E7          	pop d
0166++ 0511 E4          	pop a
0167++ 0512 F0          	pop di
0168++ 0513 EF          	pop si
0169++ 0514 09          	ret
0005+  0515             
0006+  0515 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0519 34 35 36 37 
0006+  051D 38 39 41 42 
0006+  0521 43 44 45 46 
0007+  0525             
0008+  0525 01 00       table_power:.dw 1
0009+  0527 0A 00       			.dw 10
0010+  0529 64 00       			.dw 100
0011+  052B E8 03       			.dw 1000
0012+  052D 10 27       			.dw 10000
0013+  052F             
0014+  052F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  052F             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  052F             ; ASCII in BL
0017+  052F             ; result in AL
0018+  052F             ; ascii for F = 0100 0110
0019+  052F             ; ascii for 9 = 0011 1001
0020+  052F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  052F             hex_ascii_encode:
0022+  052F 1B          	mov al, bl
0023+  0530 93 40       	test al, $40				; test if letter or number
0024+  0532 C7 38 05    	jnz hex_letter
0025+  0535 87 0F       	and al, $0F				; get number
0026+  0537 09          	ret
0027+  0538             hex_letter:
0028+  0538 87 0F       	and al, $0F				; get letter
0029+  053A 6A 09       	add al, 9
0030+  053C 09          	ret
0031+  053D             
0032+  053D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  053D             ; ATOI
0034+  053D             ; 2 letter hex string in B
0035+  053D             ; 8bit integer returned in AL
0036+  053D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  053D             atoi:
0038+  053D D8          	push b
0039+  053E 07 2F 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  0541 30          	mov bl, bh
0041+  0542 DB          	push al					; save a
0042+  0543 07 2F 05    	call hex_ascii_encode
0043+  0546 EA          	pop bl	
0044+  0547 FD 9E 04    	shl al, 4
0045+  054A 8C          	or al, bl
0046+  054B E5          	pop b
0047+  054C 09          	ret	
0048+  054D             
0049+  054D             
0050+  054D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  054D             ; printf
0052+  054D             ; no need for explanations!
0053+  054D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  054D             printf:
0055+  054D 09          	ret
0056+  054E             
0057+  054E             
0058+  054E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  054E             ; scanf
0060+  054E             ; no need for explanations!
0061+  054E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  054E             scanf:
0063+  054E 09          	ret
0064+  054F             
0065+  054F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  054F             ; ITOA
0067+  054F             ; 8bit value in BL
0068+  054F             ; 2 byte ASCII result in A
0069+  054F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  054F             itoa:
0071+  054F DA          	push d
0072+  0550 D8          	push b
0073+  0551 A7 00       	mov bh, 0
0074+  0553 FD A4 04    	shr bl, 4	
0075+  0556 74          	mov d, b
0076+  0557 1F 15 05    	mov al, [d + s_hex_digits]
0077+  055A 23          	mov ah, al
0078+  055B             	
0079+  055B E5          	pop b
0080+  055C D8          	push b
0081+  055D A7 00       	mov bh, 0
0082+  055F FD 87 0F    	and bl, $0F
0083+  0562 74          	mov d, b
0084+  0563 1F 15 05    	mov al, [d + s_hex_digits]
0085+  0566 E5          	pop b
0086+  0567 E7          	pop d
0087+  0568 09          	ret
0088+  0569             
0089+  0569             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0569             ; HEX STRING TO BINARY
0091+  0569             ; di = destination address
0092+  0569             ; si = source
0093+  0569             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0569             hex_to_int:
0095+  0569             hex_to_int_L1:
0096+  0569 F6          	lodsb					; load from [SI] to AL
0097+  056A B9 00       	cmp al, 0				; check if ASCII 0
0098+  056C C6 79 05    	jz hex_to_int_ret
0099+  056F 36          	mov bh, al
0100+  0570 F6          	lodsb
0101+  0571 2F          	mov bl, al
0102+  0572 07 3D 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0575 F7          	stosb					; store AL to [DI]
0104+  0576 0A 69 05    	jmp hex_to_int_L1
0105+  0579             hex_to_int_ret:
0106+  0579 09          	ret		
0107+  057A             
0108+  057A             
0109+  057A             
0110+  057A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  057A             ; GETCHAR
0112+  057A             ; char in ah
0113+  057A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  057A             getchar:
0115+  057A DB          	push al
0116+  057B             getchar_retry:
0117+  057B FD 0C       	sti
0118+  057D 19 01       	mov al, 1
0119+  057F 05 03       	syscall sys_io			; receive in AH
0120+  0581 B9 00       	cmp al, 0			; check if any char was receive
0121+  0583 C6 7B 05    	je getchar_retry
0122+  0586 E8          	pop al
0123+  0587 09          	ret
0124+  0588             
0125+  0588             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0588             ; PUTCHAR
0127+  0588             ; char in ah
0128+  0588             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0588             putchar:
0130+  0588 D7          	push a
0131+  0589 19 00       	mov al, 0
0132+  058B 05 03       	syscall sys_io			; char in AH
0133+  058D E4          	pop a
0134+  058E 09          	ret
0135+  058F             
0136+  058F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  058F             ;; INPUT A STRING
0138+  058F             ;; terminates with null
0139+  058F             ;; pointer in D
0140+  058F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  058F             gets:
0142+  058F D7          	push a
0143+  0590 DA          	push d
0144+  0591             gets_loop:
0145+  0591 FD 0C       	sti
0146+  0593 19 01       	mov al, 1
0147+  0595 05 03       	syscall sys_io			; receive in AH
0148+  0597 B9 00       	cmp al, 0				; check error code (AL)
0149+  0599 C6 91 05    	je gets_loop			; if no char received, retry
0150+  059C             
0151+  059C 76 1B       	cmp ah, 27
0152+  059E C6 BF 05    	je gets_telnet_escape
0153+  05A1 76 0A       	cmp ah, $0A				; LF
0154+  05A3 C6 18 06    	je gets_end
0155+  05A6 76 0D       	cmp ah, $0D				; CR
0156+  05A8 C6 18 06    	je gets_end
0157+  05AB 76 5C       	cmp ah, $5C				; '\\'
0158+  05AD C6 EF 05    	je gets_escape
0159+  05B0             	
0160+  05B0 76 08       	cmp ah, $08			; check for backspace
0161+  05B2 C6 BB 05    	je gets_backspace
0162+  05B5             
0163+  05B5 1A          	mov al, ah
0164+  05B6 3E          	mov [d], al
0165+  05B7 79          	inc d
0166+  05B8 0A 91 05    	jmp gets_loop
0167+  05BB             gets_backspace:
0168+  05BB 7F          	dec d
0169+  05BC 0A 91 05    	jmp gets_loop
0170+  05BF             gets_telnet_escape:
0171+  05BF FD 0C       	sti
0172+  05C1 19 01       	mov al, 1
0173+  05C3 05 03       	syscall sys_io				; receive in AH without echo
0174+  05C5 B9 00       	cmp al, 0					; check error code (AL)
0175+  05C7 C6 BF 05    	je gets_telnet_escape		; if no char received, retry
0176+  05CA 76 5B       	cmp ah, '['
0177+  05CC C7 91 05    	jne gets_loop
0178+  05CF             gets_telnet_escape_phase2:
0179+  05CF FD 0C       	sti
0180+  05D1 19 01       	mov al, 1
0181+  05D3 05 03       	syscall sys_io					; receive in AH without echo
0182+  05D5 B9 00       	cmp al, 0						; check error code (AL)
0183+  05D7 C6 CF 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  05DA 76 44       	cmp ah, 'D'
0185+  05DC C6 E7 05    	je gets_left_arrow
0186+  05DF 76 43       	cmp ah, 'C'
0187+  05E1 C6 EB 05    	je gets_right_arrow
0188+  05E4 0A 91 05    	jmp gets_loop
0189+  05E7             gets_left_arrow:
0190+  05E7 7F          	dec d
0191+  05E8 0A 91 05    	jmp gets_loop
0192+  05EB             gets_right_arrow:
0193+  05EB 79          	inc d
0194+  05EC 0A 91 05    	jmp gets_loop
0195+  05EF             gets_escape:
0196+  05EF FD 0C       	sti
0197+  05F1 19 01       	mov al, 1
0198+  05F3 05 03       	syscall sys_io			; receive in AH
0199+  05F5 B9 00       	cmp al, 0				; check error code (AL)
0200+  05F7 C6 EF 05    	je gets_escape			; if no char received, retry
0201+  05FA 76 6E       	cmp ah, 'n'
0202+  05FC C6 0A 06    	je gets_LF
0203+  05FF 76 72       	cmp ah, 'r'
0204+  0601 C6 11 06    	je gets_CR
0205+  0604 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  0605 3E          	mov [d], al
0207+  0606 79          	inc d
0208+  0607 0A 91 05    	jmp gets_loop
0209+  060A             gets_LF:
0210+  060A 19 0A       	mov al, $0A
0211+  060C 3E          	mov [d], al
0212+  060D 79          	inc d
0213+  060E 0A 91 05    	jmp gets_loop
0214+  0611             gets_CR:
0215+  0611 19 0D       	mov al, $0D
0216+  0613 3E          	mov [d], al
0217+  0614 79          	inc d
0218+  0615 0A 91 05    	jmp gets_loop
0219+  0618             gets_end:
0220+  0618 19 00       	mov al, 0
0221+  061A 3E          	mov [d], al				; terminate string
0222+  061B E7          	pop d
0223+  061C E4          	pop a
0224+  061D 09          	ret
0225+  061E             
0226+  061E             
0227+  061E             
0228+  061E             
0229+  061E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  061E             ;; INPUT TEXT
0231+  061E             ;; terminated with CTRL+D
0232+  061E             ;; pointer in D
0233+  061E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  061E             gettxt:
0235+  061E D7          	push a
0236+  061F DA          	push d
0237+  0620             gettxt_loop:
0238+  0620 19 01       	mov al, 1
0239+  0622 05 03       	syscall sys_io			; receive in AH
0240+  0624 B9 00       	cmp al, 0				; check error code (AL)
0241+  0626 C6 20 06    	je gettxt_loop		; if no char received, retry
0242+  0629 76 04       	cmp ah, 4			; EOT
0243+  062B C6 69 06    	je gettxt_end
0244+  062E 76 08       	cmp ah, $08			; check for backspace
0245+  0630 C6 65 06    	je gettxt_backspace
0246+  0633 76 5C       	cmp ah, $5C				; '\\'
0247+  0635 C6 3E 06    	je gettxt_escape
0248+  0638 1A          	mov al, ah
0249+  0639 3E          	mov [d], al
0250+  063A 79          	inc d
0251+  063B 0A 20 06    	jmp gettxt_loop
0252+  063E             gettxt_escape:
0253+  063E 19 01       	mov al, 1
0254+  0640 05 03       	syscall sys_io			; receive in AH
0255+  0642 B9 00       	cmp al, 0				; check error code (AL)
0256+  0644 C6 3E 06    	je gettxt_escape		; if no char received, retry
0257+  0647 76 6E       	cmp ah, 'n'
0258+  0649 C6 57 06    	je gettxt_LF
0259+  064C 76 72       	cmp ah, 'r'
0260+  064E C6 5E 06    	je gettxt_CR
0261+  0651 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  0652 3E          	mov [d], al
0263+  0653 79          	inc d
0264+  0654 0A 20 06    	jmp gettxt_loop
0265+  0657             gettxt_LF:
0266+  0657 19 0A       	mov al, $0A
0267+  0659 3E          	mov [d], al
0268+  065A 79          	inc d
0269+  065B 0A 20 06    	jmp gettxt_loop
0270+  065E             gettxt_CR:
0271+  065E 19 0D       	mov al, $0D
0272+  0660 3E          	mov [d], al
0273+  0661 79          	inc d
0274+  0662 0A 20 06    	jmp gettxt_loop
0275+  0665             gettxt_backspace:
0276+  0665 7F          	dec d
0277+  0666 0A 20 06    	jmp gettxt_loop
0278+  0669             gettxt_end:
0279+  0669 19 00       	mov al, 0
0280+  066B 3E          	mov [d], al				; terminate string
0281+  066C E7          	pop d
0282+  066D E4          	pop a
0283+  066E 09          	ret
0284+  066F             
0285+  066F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  066F             ; PRINT NEW LINE
0287+  066F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  066F             printnl:
0289+  066F D7          	push a
0290+  0670 10 00 0A    	mov a, $0A00
0291+  0673 05 03       	syscall sys_io
0292+  0675 10 00 0D    	mov a, $0D00
0293+  0678 05 03       	syscall sys_io
0294+  067A E4          	pop a
0295+  067B 09          	ret
0296+  067C             
0297+  067C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  067C             ; strtoint
0299+  067C             ; 4 digit hex string number in d
0300+  067C             ; integer returned in A
0301+  067C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  067C             strtointx:
0303+  067C D8          	push b
0304+  067D 32          	mov bl, [d]
0305+  067E 37          	mov bh, bl
0306+  067F 33 01 00    	mov bl, [d + 1]
0307+  0682 07 3D 05    	call atoi				; convert to int in AL
0308+  0685 23          	mov ah, al				; move to AH
0309+  0686 33 02 00    	mov bl, [d + 2]
0310+  0689 37          	mov bh, bl
0311+  068A 33 03 00    	mov bl, [d + 3]
0312+  068D 07 3D 05    	call atoi				; convert to int in AL
0313+  0690 E5          	pop b
0314+  0691 09          	ret
0315+  0692             
0316+  0692             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  0692             ; strtoint
0318+  0692             ; 5 digit base10 string number in d
0319+  0692             ; integer returned in A
0320+  0692             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  0692             strtoint:
0322+  0692 E2          	push si
0323+  0693 D8          	push b
0324+  0694 D9          	push c
0325+  0695 DA          	push d
0326+  0696 07 C5 04    	call strlen			; get string length in C
0327+  0699 7E          	dec c
0328+  069A FD 4E       	mov si, d
0329+  069C 12          	mov a, c
0330+  069D FD 99       	shl a
0331+  069F 3B 25 05    	mov d, table_power
0332+  06A2 59          	add d, a
0333+  06A3 38 00 00    	mov c, 0
0334+  06A6             strtoint_L0:
0335+  06A6 F6          	lodsb			; load ASCII to al
0336+  06A7 B9 00       	cmp al, 0
0337+  06A9 C6 BC 06    	je strtoint_end
0338+  06AC 6F 30       	sub al, $30		; make into integer
0339+  06AE 22 00       	mov ah, 0
0340+  06B0 2A          	mov b, [d]
0341+  06B1 AC          	mul a, b			; result in B since it fits in 16bits
0342+  06B2 11          	mov a, b
0343+  06B3 28          	mov b, c
0344+  06B4 54          	add a, b
0345+  06B5 39          	mov c, a
0346+  06B6 63 02 00    	sub d, 2
0347+  06B9 0A A6 06    	jmp strtoint_L0
0348+  06BC             strtoint_end:
0349+  06BC 12          	mov a, c
0350+  06BD E7          	pop d
0351+  06BE E6          	pop c
0352+  06BF E5          	pop b
0353+  06C0 EF          	pop si
0354+  06C1 09          	ret
0355+  06C2             
0356+  06C2             
0357+  06C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  06C2             ; PRINT NULL TERMINATED STRING
0359+  06C2             ; pointer in D
0360+  06C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  06C2             puts:
0362+  06C2 D7          	push a
0363+  06C3 DA          	push d
0364+  06C4             puts_L1:
0365+  06C4 1E          	mov al, [d]
0366+  06C5 B9 00       	cmp al, 0
0367+  06C7 C6 D3 06    	jz puts_END
0368+  06CA 23          	mov ah, al
0369+  06CB 19 00       	mov al, 0
0370+  06CD 05 03       	syscall sys_io
0371+  06CF 79          	inc d
0372+  06D0 0A C4 06    	jmp puts_L1
0373+  06D3             puts_END:
0374+  06D3 E7          	pop d
0375+  06D4 E4          	pop a
0376+  06D5 09          	ret
0377+  06D6             
0378+  06D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  06D6             ; PRINT N SIZE STRING
0380+  06D6             ; pointer in D
0381+  06D6             ; size in C
0382+  06D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  06D6             putsn:
0384+  06D6 DB          	push al
0385+  06D7 DA          	push d
0386+  06D8 D9          	push c
0387+  06D9             putsn_L0:
0388+  06D9 1E          	mov al, [d]
0389+  06DA 23          	mov ah, al
0390+  06DB 19 00       	mov al, 0
0391+  06DD 05 03       	syscall sys_io
0392+  06DF 79          	inc d
0393+  06E0 7E          	dec c	
0394+  06E1 C2 00 00    	cmp c, 0
0395+  06E4 C7 D9 06    	jne putsn_L0
0396+  06E7             putsn_end:
0397+  06E7 E6          	pop c
0398+  06E8 E7          	pop d
0399+  06E9 E8          	pop al
0400+  06EA 09          	ret
0401+  06EB             
0402+  06EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  06EB             ; print 16bit decimal number
0404+  06EB             ; input number in A
0405+  06EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  06EB             print_u16d:
0407+  06EB D7          	push a
0408+  06EC D8          	push b
0409+  06ED 26 10 27    	mov b, 10000
0410+  06F0 AE          	div a, b			; get 10000 coeff.
0411+  06F1 07 17 07    	call print_number
0412+  06F4 11          	mov a, b
0413+  06F5 26 E8 03    	mov b, 1000
0414+  06F8 AE          	div a, b			; get 10000 coeff.
0415+  06F9 07 17 07    	call print_number
0416+  06FC 11          	mov a, b
0417+  06FD 26 64 00    	mov b, 100
0418+  0700 AE          	div a, b
0419+  0701 07 17 07    	call print_number
0420+  0704 11          	mov a, b
0421+  0705 26 0A 00    	mov b, 10
0422+  0708 AE          	div a, b
0423+  0709 07 17 07    	call print_number
0424+  070C 11          	mov a, b
0425+  070D 6A 30       	add al, $30
0426+  070F 23          	mov ah, al
0427+  0710 19 00       	mov al, 0
0428+  0712 05 03       	syscall sys_io	; print coeff
0429+  0714 E5          	pop b
0430+  0715 E4          	pop a
0431+  0716 09          	ret
0432+  0717             
0433+  0717             
0434+  0717             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  0717             ; if A == 0, print space
0436+  0717             ; else print A
0437+  0717             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  0717             print_number:
0439+  0717 6A 30       	add al, $30
0440+  0719 23          	mov ah, al
0441+  071A 07 88 05    	call putchar
0442+  071D 09          	ret
0443+  071E             
0444+  071E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  071E             ; PRINT 16BIT HEX INTEGER
0446+  071E             ; integer value in reg B
0447+  071E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  071E             print_u16x:
0449+  071E D7          	push a
0450+  071F D8          	push b
0451+  0720 DD          	push bl
0452+  0721 30          	mov bl, bh
0453+  0722 07 4F 05    	call itoa				; convert bh to char in A
0454+  0725 2F          	mov bl, al				; save al
0455+  0726 19 00       	mov al, 0
0456+  0728 05 03       	syscall sys_io				; display AH
0457+  072A 24          	mov ah, bl				; retrieve al
0458+  072B 19 00       	mov al, 0
0459+  072D 05 03       	syscall sys_io				; display AL
0460+  072F             
0461+  072F EA          	pop bl
0462+  0730 07 4F 05    	call itoa				; convert bh to char in A
0463+  0733 2F          	mov bl, al				; save al
0464+  0734 19 00       	mov al, 0
0465+  0736 05 03       	syscall sys_io				; display AH
0466+  0738 24          	mov ah, bl				; retrieve al
0467+  0739 19 00       	mov al, 0
0468+  073B 05 03       	syscall sys_io				; display AL
0469+  073D             
0470+  073D E5          	pop b
0471+  073E E4          	pop a
0472+  073F 09          	ret
0473+  0740             
0474+  0740             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  0740             ; INPUT 16BIT HEX INTEGER
0476+  0740             ; read 16bit integer into A
0477+  0740             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  0740             scan_u16x:
0479+  0740 F8 10 00    	enter 16
0480+  0743 D8          	push b
0481+  0744 DA          	push d
0482+  0745             
0483+  0745 FA F1 FF    	lea d, [bp + -15]
0484+  0748 07 8F 05    	call gets				; get number
0485+  074B             
0486+  074B 32          	mov bl, [d]
0487+  074C 37          	mov bh, bl
0488+  074D 33 01 00    	mov bl, [d + 1]
0489+  0750 07 3D 05    	call atoi				; convert to int in AL
0490+  0753 23          	mov ah, al				; move to AH
0491+  0754             
0492+  0754 33 02 00    	mov bl, [d + 2]
0493+  0757 37          	mov bh, bl
0494+  0758 33 03 00    	mov bl, [d + 3]
0495+  075B 07 3D 05    	call atoi				; convert to int in AL
0496+  075E             
0497+  075E E7          	pop d
0498+  075F E5          	pop b
0499+  0760 F9          	leave
0500+  0761 09          	ret
0501+  0762             
0502+  0762             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  0762             ; PRINT 8bit HEX INTEGER
0504+  0762             ; integer value in reg bl
0505+  0762             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  0762             print_u8x:
0507+  0762 D7          	push a
0508+  0763 DD          	push bl
0509+  0764             
0510+  0764 07 4F 05    	call itoa				; convert bl to char in A
0511+  0767 2F          	mov bl, al				; save al
0512+  0768 19 00       	mov al, 0
0513+  076A 05 03       	syscall sys_io				; display AH
0514+  076C 24          	mov ah, bl				; retrieve al
0515+  076D 19 00       	mov al, 0
0516+  076F 05 03       	syscall sys_io				; display AL
0517+  0771             
0518+  0771 EA          	pop bl
0519+  0772 E4          	pop a
0520+  0773 09          	ret
0521+  0774             
0522+  0774             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0774             ; print 8bit decimal unsigned number
0524+  0774             ; input number in AL
0525+  0774             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0774             print_u8d:
0527+  0774 D7          	push a
0528+  0775 D8          	push b
0529+  0776             
0530+  0776 22 00       	mov ah, 0
0531+  0778 26 64 00    	mov b, 100
0532+  077B AE          	div a, b
0533+  077C D8          	push b			; save remainder
0534+  077D B9 00       	cmp al, 0
0535+  077F C6 89 07    	je skip100
0536+  0782 6A 30       	add al, $30
0537+  0784 23          	mov ah, al
0538+  0785 19 00       	mov al, 0
0539+  0787 05 03       	syscall sys_io	; print coeff
0540+  0789             skip100:
0541+  0789 E4          	pop a
0542+  078A 22 00       	mov ah, 0
0543+  078C 26 0A 00    	mov b, 10
0544+  078F AE          	div a, b
0545+  0790 D8          	push b			; save remainder
0546+  0791 B9 00       	cmp al, 0
0547+  0793 C6 9D 07    	je skip10
0548+  0796 6A 30       	add al, $30
0549+  0798 23          	mov ah, al
0550+  0799 19 00       	mov al, 0
0551+  079B 05 03       	syscall sys_io	; print coeff
0552+  079D             skip10:
0553+  079D E4          	pop a
0554+  079E 1B          	mov al, bl
0555+  079F 6A 30       	add al, $30
0556+  07A1 23          	mov ah, al
0557+  07A2 19 00       	mov al, 0
0558+  07A4 05 03       	syscall sys_io	; print coeff
0559+  07A6 E5          	pop b
0560+  07A7 E4          	pop a
0561+  07A8 09          	ret
0562+  07A9             
0563+  07A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  07A9             ; INPUT 8BIT HEX INTEGER
0565+  07A9             ; read 8bit integer into AL
0566+  07A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  07A9             scan_u8x:
0568+  07A9 F8 04 00    	enter 4
0569+  07AC D8          	push b
0570+  07AD DA          	push d
0571+  07AE             
0572+  07AE FA FD FF    	lea d, [bp + -3]
0573+  07B1 07 8F 05    	call gets				; get number
0574+  07B4             
0575+  07B4 32          	mov bl, [d]
0576+  07B5 37          	mov bh, bl
0577+  07B6 33 01 00    	mov bl, [d + 1]
0578+  07B9 07 3D 05    	call atoi				; convert to int in AL
0579+  07BC             
0580+  07BC E7          	pop d
0581+  07BD E5          	pop b
0582+  07BE F9          	leave
0583+  07BF 09          	ret
0584+  07C0             
0585+  07C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  07C0             ; input decimal number
0587+  07C0             ; result in A
0588+  07C0             ; 655'\0'
0589+  07C0             ; low--------high
0590+  07C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  07C0             scan_u16d:
0592+  07C0 F8 08 00    	enter 8
0593+  07C3 E2          	push si
0594+  07C4 D8          	push b
0595+  07C5 D9          	push c
0596+  07C6 DA          	push d
0597+  07C7 FA F9 FF    	lea d, [bp +- 7]
0598+  07CA 07 8F 05    	call gets
0599+  07CD 07 C5 04    	call strlen			; get string length in C
0600+  07D0 7E          	dec c
0601+  07D1 FD 4E       	mov si, d
0602+  07D3 12          	mov a, c
0603+  07D4 FD 99       	shl a
0604+  07D6 3B 25 05    	mov d, table_power
0605+  07D9 59          	add d, a
0606+  07DA 38 00 00    	mov c, 0
0607+  07DD             mul_loop:
0608+  07DD F6          	lodsb			; load ASCII to al
0609+  07DE B9 00       	cmp al, 0
0610+  07E0 C6 F3 07    	je mul_exit
0611+  07E3 6F 30       	sub al, $30		; make into integer
0612+  07E5 22 00       	mov ah, 0
0613+  07E7 2A          	mov b, [d]
0614+  07E8 AC          	mul a, b			; result in B since it fits in 16bits
0615+  07E9 11          	mov a, b
0616+  07EA 28          	mov b, c
0617+  07EB 54          	add a, b
0618+  07EC 39          	mov c, a
0619+  07ED 63 02 00    	sub d, 2
0620+  07F0 0A DD 07    	jmp mul_loop
0621+  07F3             mul_exit:
0622+  07F3 12          	mov a, c
0623+  07F4 E7          	pop d
0624+  07F5 E6          	pop c
0625+  07F6 E5          	pop b
0626+  07F7 EF          	pop si
0627+  07F8 F9          	leave
0628+  07F9 09          	ret
0078   07FA             ; --- end include block
0079   07FA             
0080   07FA             .end
tasm: Number of errors = 0
