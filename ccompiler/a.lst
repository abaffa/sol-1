0001   0000             ; --- Filename: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- begin text block
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 64 00      sub sp, 100 ; m
0010   0405 52 02 00      sub sp, 2 ; i
0011   0408 52 02 00      sub sp, 2 ; j
0012   040B             _for1_init:
0013   040B 26 00 00      mov b, 0
0014   040E 11            mov a, b
0015   040F FD AA         swp a
0016   0411 45 9B FF      mov [bp + -101], a ; i
0017   0414             _for1_cond:
0018   0414 2C 9B FF      mov b, [bp + -101] ; i
0019   0417 FD AB         swp b
0020   0419 D7            push a
0021   041A 11            mov a, b
0022   041B 26 0A 00      mov b, 10
0023   041E B0            cmp a, b
0024   041F 0E            lodflgs
0025   0420 87 02         and al, %00000010
0026   0422 22 00         mov ah, 0
0027   0424 27            mov b, a
0028   0425 E4            pop a
0029   0426 C0 00 00      cmp b, 0
0030   0429 C6 AD 04      je _for1_exit
0031   042C             _for1_block:
0032   042C             _for2_init:
0033   042C 26 00 00      mov b, 0
0034   042F 11            mov a, b
0035   0430 FD AA         swp a
0036   0432 45 99 FF      mov [bp + -103], a ; j
0037   0435             _for2_cond:
0038   0435 2C 99 FF      mov b, [bp + -103] ; j
0039   0438 FD AB         swp b
0040   043A D7            push a
0041   043B 11            mov a, b
0042   043C 26 0A 00      mov b, 10
0043   043F B0            cmp a, b
0044   0440 0E            lodflgs
0045   0441 87 02         and al, %00000010
0046   0443 22 00         mov ah, 0
0047   0445 27            mov b, a
0048   0446 E4            pop a
0049   0447 C0 00 00      cmp b, 0
0050   044A C6 9D 04      je _for2_exit
0051   044D             _for2_block:
0052   044D FA 9D FF      lea d, [bp + -99] ; m
0053   0450 2D            mov b, d
0054   0451 74            mov d, b
0055   0452 2C 9B FF      mov b, [bp + -101] ; i
0056   0455 FD AB         swp b
0057   0457 10 0A 00      mov a, 10
0058   045A AC            mul a, b
0059   045B 5A            add d, b
0060   045C 2C 99 FF      mov b, [bp + -103] ; j
0061   045F FD AB         swp b
0062   0461 5A            add d, b
0063   0462 2E 41         mov bl, 'A'
0064   0464 D7            push a
0065   0465 11            mov a, b
0066   0466 2C 99 FF      mov b, [bp + -103] ; j
0067   0469 FD AB         swp b
0068   046B 54            add a, b
0069   046C 27            mov b, a
0070   046D E4            pop a
0071   046E 1B            mov al, bl
0072   046F 3E            mov [d], al
0073   0470             ; --- begin inline asm block; --- end inline asm block
0074   0470 FA 9D FF      lea d, [bp + -99] ; m
0075   0473 2D            mov b, d
0076   0474 74            mov d, b
0077   0475 2C 9B FF      mov b, [bp + -101] ; i
0078   0478 FD AB         swp b
0079   047A 10 0A 00      mov a, 10
0080   047D AC            mul a, b
0081   047E 5A            add d, b
0082   047F 2C 99 FF      mov b, [bp + -103] ; j
0083   0482 FD AB         swp b
0084   0484 5A            add d, b
0085   0485 32            mov bl, [d]
0086   0486 DD            push bl
0087   0487 07 BD 04      call f1
0088   048A 51 01 00      add sp, 1
0089   048D             _for2_update:
0090   048D 2C 99 FF      mov b, [bp + -103] ; j
0091   0490 FD AB         swp b
0092   0492 FD 77         inc b
0093   0494 11            mov a, b
0094   0495 FD AA         swp a
0095   0497 45 99 FF      mov [bp + -103], a ; j
0096   049A 0A 35 04      jmp _for2_cond
0097   049D             _for2_exit:
0098   049D             _for1_update:
0099   049D 2C 9B FF      mov b, [bp + -101] ; i
0100   04A0 FD AB         swp b
0101   04A2 FD 77         inc b
0102   04A4 11            mov a, b
0103   04A5 FD AA         swp a
0104   04A7 45 9B FF      mov [bp + -101], a ; i
0105   04AA 0A 14 04      jmp _for1_cond
0106   04AD             _for1_exit:
0107   04AD F9            leave
0108   04AE 05 0B         syscall sys_terminate_proc
0109   04B0             _puts:
0110   04B0 D2            push bp
0111   04B1 9B            mov bp, sp
0112   04B2             ; --- begin inline asm block
0113   04B2 17 05 00        mov a, [bp + 5]
0114   04B5 3C              mov d, a
0115   04B6 FD AA           swp a
0116   04B8 07 0C 07        call puts
0117   04BB               ; --- end inline asm block
0118   04BB F9            leave
0119   04BC 09            ret
0120   04BD             f1:
0121   04BD D2            push bp
0122   04BE 9B            mov bp, sp
0123   04BF             ; --- begin inline asm block
0124   04BF 20 05 00        mov al, [bp + 5];
0125   04C2 23              mov ah, al
0126   04C3 07 D2 05        call putchar
0127   04C6               ; --- end inline asm block
0128   04C6 F9            leave
0129   04C7 09            ret
0130   04C8             ; --- end text block
0131   04C8             
0132   04C8             ; --- begin data block
0133   04C8             ; --- end data block
0134   04C8             ; --- begin include block
0135   04C8             .include "lib/stdio.asm"
0001+  04C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  04C8             ; stdio.s
0003+  04C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  04C8             .include "lib/string.asm"
0001++ 04C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 04C8             ; string.s
0003++ 04C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 04C8             
0005++ 04C8             
0006++ 04C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 04C8             ; strrev
0008++ 04C8             ; reverse a string
0009++ 04C8             ; D = string address
0010++ 04C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 04C8             ; 01234
0012++ 04C8             strrev:
0013++ 04C8 4B          	pusha
0014++ 04C9 07 0F 05    	call strlen	; length in C
0015++ 04CC 12          	mov a, c
0016++ 04CD AF 01 00    	cmp a, 1
0017++ 04D0 D0 EA 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 04D3 7D          	dec a
0019++ 04D4 FD 4E       	mov si, d	; beginning of string
0020++ 04D6 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 04D8 59          	add d, a	; end of string
0022++ 04D9 12          	mov a, c
0023++ 04DA FD 9B       	shr a		; divide by 2
0024++ 04DC 39          	mov c, a	; C now counts the steps
0025++ 04DD             strrev_L0:
0026++ 04DD 32          	mov bl, [d]	; save load right-side char into BL
0027++ 04DE F6          	lodsb		; load left-side char into AL; increase SI
0028++ 04DF 3E          	mov [d], al	; store left char into right side
0029++ 04E0 1B          	mov al, bl
0030++ 04E1 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 04E2 7E          	dec c
0032++ 04E3 7F          	dec d
0033++ 04E4 C2 00 00    	cmp c, 0
0034++ 04E7 C7 DD 04    	jne strrev_L0
0035++ 04EA             strrev_end:
0036++ 04EA 4C          	popa
0037++ 04EB 09          	ret
0038++ 04EC             	
0039++ 04EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 04EC             ; strchr
0041++ 04EC             ; search string in D for char in AL
0042++ 04EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 04EC             strchr:
0044++ 04EC             strchr_L0:
0045++ 04EC 32          	mov bl, [d]
0046++ 04ED C1 00       	cmp bl, 0
0047++ 04EF C6 FA 04    	je strchr_end
0048++ 04F2 BA          	cmp al, bl
0049++ 04F3 C6 FA 04    	je strchr_end
0050++ 04F6 79          	inc d
0051++ 04F7 0A EC 04    	jmp strchr_L0
0052++ 04FA             strchr_end:
0053++ 04FA 1B          	mov al, bl
0054++ 04FB 09          	ret
0055++ 04FC             
0056++ 04FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 04FC             ; strstr
0058++ 04FC             ; find sub-string
0059++ 04FC             ; str1 in SI
0060++ 04FC             ; str2 in DI
0061++ 04FC             ; SI points to end of source string
0062++ 04FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 04FC             strstr:
0064++ 04FC DB          	push al
0065++ 04FD DA          	push d
0066++ 04FE E3          	push di
0067++ 04FF             strstr_loop:
0068++ 04FF F3          	cmpsb					; compare a byte of the strings
0069++ 0500 C7 0B 05    	jne strstr_ret
0070++ 0503 FC 00 00    	lea d, [di + 0]
0071++ 0506 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0508 C7 FF 04    	jne strstr_loop				; equal chars but not at end
0073++ 050B             strstr_ret:
0074++ 050B F0          	pop di
0075++ 050C E7          	pop d
0076++ 050D E8          	pop al
0077++ 050E 09          	ret
0078++ 050F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 050F             ; length of null terminated string
0080++ 050F             ; result in C
0081++ 050F             ; pointer in D
0082++ 050F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 050F             strlen:
0084++ 050F DA          	push d
0085++ 0510 38 00 00    	mov c, 0
0086++ 0513             strlen_L1:
0087++ 0513 BD 00       	cmp byte [d], 0
0088++ 0515 C6 1D 05    	je strlen_ret
0089++ 0518 79          	inc d
0090++ 0519 78          	inc c
0091++ 051A 0A 13 05    	jmp strlen_L1
0092++ 051D             strlen_ret:
0093++ 051D E7          	pop d
0094++ 051E 09          	ret
0095++ 051F             
0096++ 051F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 051F             ; STRCMP
0098++ 051F             ; compare two strings
0099++ 051F             ; str1 in SI
0100++ 051F             ; str2 in DI
0101++ 051F             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 051F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 051F             strcmp:
0104++ 051F DB          	push al
0105++ 0520 DA          	push d
0106++ 0521 E3          	push di
0107++ 0522 E2          	push si
0108++ 0523             strcmp_loop:
0109++ 0523 F3          	cmpsb					; compare a byte of the strings
0110++ 0524 C7 2F 05    	jne strcmp_ret
0111++ 0527 FB FF FF    	lea d, [si +- 1]
0112++ 052A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 052C C7 23 05    	jne strcmp_loop				; equal chars but not at end
0114++ 052F             strcmp_ret:
0115++ 052F EF          	pop si
0116++ 0530 F0          	pop di
0117++ 0531 E7          	pop d
0118++ 0532 E8          	pop al
0119++ 0533 09          	ret
0120++ 0534             
0121++ 0534             
0122++ 0534             ; STRCPY
0123++ 0534             ; copy null terminated string from SI to DI
0124++ 0534             ; source in SI
0125++ 0534             ; destination in DI
0126++ 0534             strcpy:
0127++ 0534 E2          	push si
0128++ 0535 E3          	push di
0129++ 0536 DB          	push al
0130++ 0537             strcpy_L1:
0131++ 0537 F6          	lodsb
0132++ 0538 F7          	stosb
0133++ 0539 B9 00       	cmp al, 0
0134++ 053B C7 37 05    	jne strcpy_L1
0135++ 053E             strcpy_end:
0136++ 053E E8          	pop al
0137++ 053F F0          	pop di
0138++ 0540 EF          	pop si
0139++ 0541 09          	ret
0140++ 0542             
0141++ 0542             ; STRCAT
0142++ 0542             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0542             ; source in SI
0144++ 0542             ; destination in DI
0145++ 0542             strcat:
0146++ 0542 E2          	push si
0147++ 0543 E3          	push di
0148++ 0544 D7          	push a
0149++ 0545 DA          	push d
0150++ 0546 50          	mov a, di
0151++ 0547 3C          	mov d, a
0152++ 0548             strcat_goto_end_L1:
0153++ 0548 BD 00       	cmp byte[d], 0
0154++ 054A C6 51 05    	je strcat_start
0155++ 054D 79          	inc d
0156++ 054E 0A 48 05    	jmp strcat_goto_end_L1
0157++ 0551             strcat_start:
0158++ 0551 FD 50       	mov di, d
0159++ 0553             strcat_L1:
0160++ 0553 F6          	lodsb
0161++ 0554 F7          	stosb
0162++ 0555 B9 00       	cmp al, 0
0163++ 0557 C7 53 05    	jne strcat_L1
0164++ 055A             strcat_end:
0165++ 055A E7          	pop d
0166++ 055B E4          	pop a
0167++ 055C F0          	pop di
0168++ 055D EF          	pop si
0169++ 055E 09          	ret
0005+  055F             
0006+  055F 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0563 34 35 36 37 
0006+  0567 38 39 41 42 
0006+  056B 43 44 45 46 
0007+  056F             
0008+  056F 01 00       table_power:.dw 1
0009+  0571 0A 00       			.dw 10
0010+  0573 64 00       			.dw 100
0011+  0575 E8 03       			.dw 1000
0012+  0577 10 27       			.dw 10000
0013+  0579             
0014+  0579             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  0579             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  0579             ; ASCII in BL
0017+  0579             ; result in AL
0018+  0579             ; ascii for F = 0100 0110
0019+  0579             ; ascii for 9 = 0011 1001
0020+  0579             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  0579             hex_ascii_encode:
0022+  0579 1B          	mov al, bl
0023+  057A 93 40       	test al, $40				; test if letter or number
0024+  057C C7 82 05    	jnz hex_letter
0025+  057F 87 0F       	and al, $0F				; get number
0026+  0581 09          	ret
0027+  0582             hex_letter:
0028+  0582 87 0F       	and al, $0F				; get letter
0029+  0584 6A 09       	add al, 9
0030+  0586 09          	ret
0031+  0587             
0032+  0587             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  0587             ; ATOI
0034+  0587             ; 2 letter hex string in B
0035+  0587             ; 8bit integer returned in AL
0036+  0587             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  0587             atoi:
0038+  0587 D8          	push b
0039+  0588 07 79 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  058B 30          	mov bl, bh
0041+  058C DB          	push al					; save a
0042+  058D 07 79 05    	call hex_ascii_encode
0043+  0590 EA          	pop bl	
0044+  0591 FD 9E 04    	shl al, 4
0045+  0594 8C          	or al, bl
0046+  0595 E5          	pop b
0047+  0596 09          	ret	
0048+  0597             
0049+  0597             
0050+  0597             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0597             ; printf
0052+  0597             ; no need for explanations!
0053+  0597             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  0597             printf:
0055+  0597 09          	ret
0056+  0598             
0057+  0598             
0058+  0598             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0598             ; scanf
0060+  0598             ; no need for explanations!
0061+  0598             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0598             scanf:
0063+  0598 09          	ret
0064+  0599             
0065+  0599             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0599             ; ITOA
0067+  0599             ; 8bit value in BL
0068+  0599             ; 2 byte ASCII result in A
0069+  0599             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  0599             itoa:
0071+  0599 DA          	push d
0072+  059A D8          	push b
0073+  059B A7 00       	mov bh, 0
0074+  059D FD A4 04    	shr bl, 4	
0075+  05A0 74          	mov d, b
0076+  05A1 1F 5F 05    	mov al, [d + s_hex_digits]
0077+  05A4 23          	mov ah, al
0078+  05A5             	
0079+  05A5 E5          	pop b
0080+  05A6 D8          	push b
0081+  05A7 A7 00       	mov bh, 0
0082+  05A9 FD 87 0F    	and bl, $0F
0083+  05AC 74          	mov d, b
0084+  05AD 1F 5F 05    	mov al, [d + s_hex_digits]
0085+  05B0 E5          	pop b
0086+  05B1 E7          	pop d
0087+  05B2 09          	ret
0088+  05B3             
0089+  05B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  05B3             ; HEX STRING TO BINARY
0091+  05B3             ; di = destination address
0092+  05B3             ; si = source
0093+  05B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  05B3             hex_to_int:
0095+  05B3             hex_to_int_L1:
0096+  05B3 F6          	lodsb					; load from [SI] to AL
0097+  05B4 B9 00       	cmp al, 0				; check if ASCII 0
0098+  05B6 C6 C3 05    	jz hex_to_int_ret
0099+  05B9 36          	mov bh, al
0100+  05BA F6          	lodsb
0101+  05BB 2F          	mov bl, al
0102+  05BC 07 87 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  05BF F7          	stosb					; store AL to [DI]
0104+  05C0 0A B3 05    	jmp hex_to_int_L1
0105+  05C3             hex_to_int_ret:
0106+  05C3 09          	ret		
0107+  05C4             
0108+  05C4             
0109+  05C4             
0110+  05C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  05C4             ; GETCHAR
0112+  05C4             ; char in ah
0113+  05C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  05C4             getchar:
0115+  05C4 DB          	push al
0116+  05C5             getchar_retry:
0117+  05C5 FD 0C       	sti
0118+  05C7 19 01       	mov al, 1
0119+  05C9 05 03       	syscall sys_io			; receive in AH
0120+  05CB B9 00       	cmp al, 0			; check if any char was receive
0121+  05CD C6 C5 05    	je getchar_retry
0122+  05D0 E8          	pop al
0123+  05D1 09          	ret
0124+  05D2             
0125+  05D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  05D2             ; PUTCHAR
0127+  05D2             ; char in ah
0128+  05D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  05D2             putchar:
0130+  05D2 D7          	push a
0131+  05D3 19 00       	mov al, 0
0132+  05D5 05 03       	syscall sys_io			; char in AH
0133+  05D7 E4          	pop a
0134+  05D8 09          	ret
0135+  05D9             
0136+  05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  05D9             ;; INPUT A STRING
0138+  05D9             ;; terminates with null
0139+  05D9             ;; pointer in D
0140+  05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  05D9             gets:
0142+  05D9 D7          	push a
0143+  05DA DA          	push d
0144+  05DB             gets_loop:
0145+  05DB FD 0C       	sti
0146+  05DD 19 01       	mov al, 1
0147+  05DF 05 03       	syscall sys_io			; receive in AH
0148+  05E1 B9 00       	cmp al, 0				; check error code (AL)
0149+  05E3 C6 DB 05    	je gets_loop			; if no char received, retry
0150+  05E6             
0151+  05E6 76 1B       	cmp ah, 27
0152+  05E8 C6 09 06    	je gets_telnet_escape
0153+  05EB 76 0A       	cmp ah, $0A				; LF
0154+  05ED C6 62 06    	je gets_end
0155+  05F0 76 0D       	cmp ah, $0D				; CR
0156+  05F2 C6 62 06    	je gets_end
0157+  05F5 76 5C       	cmp ah, $5C				; '\\'
0158+  05F7 C6 39 06    	je gets_escape
0159+  05FA             	
0160+  05FA 76 08       	cmp ah, $08			; check for backspace
0161+  05FC C6 05 06    	je gets_backspace
0162+  05FF             
0163+  05FF 1A          	mov al, ah
0164+  0600 3E          	mov [d], al
0165+  0601 79          	inc d
0166+  0602 0A DB 05    	jmp gets_loop
0167+  0605             gets_backspace:
0168+  0605 7F          	dec d
0169+  0606 0A DB 05    	jmp gets_loop
0170+  0609             gets_telnet_escape:
0171+  0609 FD 0C       	sti
0172+  060B 19 01       	mov al, 1
0173+  060D 05 03       	syscall sys_io				; receive in AH without echo
0174+  060F B9 00       	cmp al, 0					; check error code (AL)
0175+  0611 C6 09 06    	je gets_telnet_escape		; if no char received, retry
0176+  0614 76 5B       	cmp ah, '['
0177+  0616 C7 DB 05    	jne gets_loop
0178+  0619             gets_telnet_escape_phase2:
0179+  0619 FD 0C       	sti
0180+  061B 19 01       	mov al, 1
0181+  061D 05 03       	syscall sys_io					; receive in AH without echo
0182+  061F B9 00       	cmp al, 0						; check error code (AL)
0183+  0621 C6 19 06    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  0624 76 44       	cmp ah, 'D'
0185+  0626 C6 31 06    	je gets_left_arrow
0186+  0629 76 43       	cmp ah, 'C'
0187+  062B C6 35 06    	je gets_right_arrow
0188+  062E 0A DB 05    	jmp gets_loop
0189+  0631             gets_left_arrow:
0190+  0631 7F          	dec d
0191+  0632 0A DB 05    	jmp gets_loop
0192+  0635             gets_right_arrow:
0193+  0635 79          	inc d
0194+  0636 0A DB 05    	jmp gets_loop
0195+  0639             gets_escape:
0196+  0639 FD 0C       	sti
0197+  063B 19 01       	mov al, 1
0198+  063D 05 03       	syscall sys_io			; receive in AH
0199+  063F B9 00       	cmp al, 0				; check error code (AL)
0200+  0641 C6 39 06    	je gets_escape			; if no char received, retry
0201+  0644 76 6E       	cmp ah, 'n'
0202+  0646 C6 54 06    	je gets_LF
0203+  0649 76 72       	cmp ah, 'r'
0204+  064B C6 5B 06    	je gets_CR
0205+  064E 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  064F 3E          	mov [d], al
0207+  0650 79          	inc d
0208+  0651 0A DB 05    	jmp gets_loop
0209+  0654             gets_LF:
0210+  0654 19 0A       	mov al, $0A
0211+  0656 3E          	mov [d], al
0212+  0657 79          	inc d
0213+  0658 0A DB 05    	jmp gets_loop
0214+  065B             gets_CR:
0215+  065B 19 0D       	mov al, $0D
0216+  065D 3E          	mov [d], al
0217+  065E 79          	inc d
0218+  065F 0A DB 05    	jmp gets_loop
0219+  0662             gets_end:
0220+  0662 19 00       	mov al, 0
0221+  0664 3E          	mov [d], al				; terminate string
0222+  0665 E7          	pop d
0223+  0666 E4          	pop a
0224+  0667 09          	ret
0225+  0668             
0226+  0668             
0227+  0668             
0228+  0668             
0229+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  0668             ;; INPUT TEXT
0231+  0668             ;; terminated with CTRL+D
0232+  0668             ;; pointer in D
0233+  0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  0668             gettxt:
0235+  0668 D7          	push a
0236+  0669 DA          	push d
0237+  066A             gettxt_loop:
0238+  066A 19 01       	mov al, 1
0239+  066C 05 03       	syscall sys_io			; receive in AH
0240+  066E B9 00       	cmp al, 0				; check error code (AL)
0241+  0670 C6 6A 06    	je gettxt_loop		; if no char received, retry
0242+  0673 76 04       	cmp ah, 4			; EOT
0243+  0675 C6 B3 06    	je gettxt_end
0244+  0678 76 08       	cmp ah, $08			; check for backspace
0245+  067A C6 AF 06    	je gettxt_backspace
0246+  067D 76 5C       	cmp ah, $5C				; '\\'
0247+  067F C6 88 06    	je gettxt_escape
0248+  0682 1A          	mov al, ah
0249+  0683 3E          	mov [d], al
0250+  0684 79          	inc d
0251+  0685 0A 6A 06    	jmp gettxt_loop
0252+  0688             gettxt_escape:
0253+  0688 19 01       	mov al, 1
0254+  068A 05 03       	syscall sys_io			; receive in AH
0255+  068C B9 00       	cmp al, 0				; check error code (AL)
0256+  068E C6 88 06    	je gettxt_escape		; if no char received, retry
0257+  0691 76 6E       	cmp ah, 'n'
0258+  0693 C6 A1 06    	je gettxt_LF
0259+  0696 76 72       	cmp ah, 'r'
0260+  0698 C6 A8 06    	je gettxt_CR
0261+  069B 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  069C 3E          	mov [d], al
0263+  069D 79          	inc d
0264+  069E 0A 6A 06    	jmp gettxt_loop
0265+  06A1             gettxt_LF:
0266+  06A1 19 0A       	mov al, $0A
0267+  06A3 3E          	mov [d], al
0268+  06A4 79          	inc d
0269+  06A5 0A 6A 06    	jmp gettxt_loop
0270+  06A8             gettxt_CR:
0271+  06A8 19 0D       	mov al, $0D
0272+  06AA 3E          	mov [d], al
0273+  06AB 79          	inc d
0274+  06AC 0A 6A 06    	jmp gettxt_loop
0275+  06AF             gettxt_backspace:
0276+  06AF 7F          	dec d
0277+  06B0 0A 6A 06    	jmp gettxt_loop
0278+  06B3             gettxt_end:
0279+  06B3 19 00       	mov al, 0
0280+  06B5 3E          	mov [d], al				; terminate string
0281+  06B6 E7          	pop d
0282+  06B7 E4          	pop a
0283+  06B8 09          	ret
0284+  06B9             
0285+  06B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  06B9             ; PRINT NEW LINE
0287+  06B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  06B9             printnl:
0289+  06B9 D7          	push a
0290+  06BA 10 00 0A    	mov a, $0A00
0291+  06BD 05 03       	syscall sys_io
0292+  06BF 10 00 0D    	mov a, $0D00
0293+  06C2 05 03       	syscall sys_io
0294+  06C4 E4          	pop a
0295+  06C5 09          	ret
0296+  06C6             
0297+  06C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  06C6             ; strtoint
0299+  06C6             ; 4 digit hex string number in d
0300+  06C6             ; integer returned in A
0301+  06C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  06C6             strtointx:
0303+  06C6 D8          	push b
0304+  06C7 32          	mov bl, [d]
0305+  06C8 37          	mov bh, bl
0306+  06C9 33 01 00    	mov bl, [d + 1]
0307+  06CC 07 87 05    	call atoi				; convert to int in AL
0308+  06CF 23          	mov ah, al				; move to AH
0309+  06D0 33 02 00    	mov bl, [d + 2]
0310+  06D3 37          	mov bh, bl
0311+  06D4 33 03 00    	mov bl, [d + 3]
0312+  06D7 07 87 05    	call atoi				; convert to int in AL
0313+  06DA E5          	pop b
0314+  06DB 09          	ret
0315+  06DC             
0316+  06DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  06DC             ; strtoint
0318+  06DC             ; 5 digit base10 string number in d
0319+  06DC             ; integer returned in A
0320+  06DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  06DC             strtoint:
0322+  06DC E2          	push si
0323+  06DD D8          	push b
0324+  06DE D9          	push c
0325+  06DF DA          	push d
0326+  06E0 07 0F 05    	call strlen			; get string length in C
0327+  06E3 7E          	dec c
0328+  06E4 FD 4E       	mov si, d
0329+  06E6 12          	mov a, c
0330+  06E7 FD 99       	shl a
0331+  06E9 3B 6F 05    	mov d, table_power
0332+  06EC 59          	add d, a
0333+  06ED 38 00 00    	mov c, 0
0334+  06F0             strtoint_L0:
0335+  06F0 F6          	lodsb			; load ASCII to al
0336+  06F1 B9 00       	cmp al, 0
0337+  06F3 C6 06 07    	je strtoint_end
0338+  06F6 6F 30       	sub al, $30		; make into integer
0339+  06F8 22 00       	mov ah, 0
0340+  06FA 2A          	mov b, [d]
0341+  06FB AC          	mul a, b			; result in B since it fits in 16bits
0342+  06FC 11          	mov a, b
0343+  06FD 28          	mov b, c
0344+  06FE 54          	add a, b
0345+  06FF 39          	mov c, a
0346+  0700 63 02 00    	sub d, 2
0347+  0703 0A F0 06    	jmp strtoint_L0
0348+  0706             strtoint_end:
0349+  0706 12          	mov a, c
0350+  0707 E7          	pop d
0351+  0708 E6          	pop c
0352+  0709 E5          	pop b
0353+  070A EF          	pop si
0354+  070B 09          	ret
0355+  070C             
0356+  070C             
0357+  070C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  070C             ; PRINT NULL TERMINATED STRING
0359+  070C             ; pointer in D
0360+  070C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  070C             puts:
0362+  070C D7          	push a
0363+  070D DA          	push d
0364+  070E             puts_L1:
0365+  070E 1E          	mov al, [d]
0366+  070F B9 00       	cmp al, 0
0367+  0711 C6 1D 07    	jz puts_END
0368+  0714 23          	mov ah, al
0369+  0715 19 00       	mov al, 0
0370+  0717 05 03       	syscall sys_io
0371+  0719 79          	inc d
0372+  071A 0A 0E 07    	jmp puts_L1
0373+  071D             puts_END:
0374+  071D E7          	pop d
0375+  071E E4          	pop a
0376+  071F 09          	ret
0377+  0720             
0378+  0720             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0720             ; PRINT N SIZE STRING
0380+  0720             ; pointer in D
0381+  0720             ; size in C
0382+  0720             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  0720             putsn:
0384+  0720 DB          	push al
0385+  0721 DA          	push d
0386+  0722 D9          	push c
0387+  0723             putsn_L0:
0388+  0723 1E          	mov al, [d]
0389+  0724 23          	mov ah, al
0390+  0725 19 00       	mov al, 0
0391+  0727 05 03       	syscall sys_io
0392+  0729 79          	inc d
0393+  072A 7E          	dec c	
0394+  072B C2 00 00    	cmp c, 0
0395+  072E C7 23 07    	jne putsn_L0
0396+  0731             putsn_end:
0397+  0731 E6          	pop c
0398+  0732 E7          	pop d
0399+  0733 E8          	pop al
0400+  0734 09          	ret
0401+  0735             
0402+  0735             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  0735             ; print 16bit decimal number
0404+  0735             ; input number in A
0405+  0735             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  0735             print_u16d:
0407+  0735 D7          	push a
0408+  0736 D8          	push b
0409+  0737 26 10 27    	mov b, 10000
0410+  073A AE          	div a, b			; get 10000 coeff.
0411+  073B 07 61 07    	call print_number
0412+  073E 11          	mov a, b
0413+  073F 26 E8 03    	mov b, 1000
0414+  0742 AE          	div a, b			; get 10000 coeff.
0415+  0743 07 61 07    	call print_number
0416+  0746 11          	mov a, b
0417+  0747 26 64 00    	mov b, 100
0418+  074A AE          	div a, b
0419+  074B 07 61 07    	call print_number
0420+  074E 11          	mov a, b
0421+  074F 26 0A 00    	mov b, 10
0422+  0752 AE          	div a, b
0423+  0753 07 61 07    	call print_number
0424+  0756 11          	mov a, b
0425+  0757 6A 30       	add al, $30
0426+  0759 23          	mov ah, al
0427+  075A 19 00       	mov al, 0
0428+  075C 05 03       	syscall sys_io	; print coeff
0429+  075E E5          	pop b
0430+  075F E4          	pop a
0431+  0760 09          	ret
0432+  0761             
0433+  0761             
0434+  0761             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  0761             ; if A == 0, print space
0436+  0761             ; else print A
0437+  0761             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  0761             print_number:
0439+  0761 6A 30       	add al, $30
0440+  0763 23          	mov ah, al
0441+  0764 07 D2 05    	call putchar
0442+  0767 09          	ret
0443+  0768             
0444+  0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  0768             ; PRINT 16BIT HEX INTEGER
0446+  0768             ; integer value in reg B
0447+  0768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  0768             print_u16x:
0449+  0768 D7          	push a
0450+  0769 D8          	push b
0451+  076A DD          	push bl
0452+  076B 30          	mov bl, bh
0453+  076C 07 99 05    	call itoa				; convert bh to char in A
0454+  076F 2F          	mov bl, al				; save al
0455+  0770 19 00       	mov al, 0
0456+  0772 05 03       	syscall sys_io				; display AH
0457+  0774 24          	mov ah, bl				; retrieve al
0458+  0775 19 00       	mov al, 0
0459+  0777 05 03       	syscall sys_io				; display AL
0460+  0779             
0461+  0779 EA          	pop bl
0462+  077A 07 99 05    	call itoa				; convert bh to char in A
0463+  077D 2F          	mov bl, al				; save al
0464+  077E 19 00       	mov al, 0
0465+  0780 05 03       	syscall sys_io				; display AH
0466+  0782 24          	mov ah, bl				; retrieve al
0467+  0783 19 00       	mov al, 0
0468+  0785 05 03       	syscall sys_io				; display AL
0469+  0787             
0470+  0787 E5          	pop b
0471+  0788 E4          	pop a
0472+  0789 09          	ret
0473+  078A             
0474+  078A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  078A             ; INPUT 16BIT HEX INTEGER
0476+  078A             ; read 16bit integer into A
0477+  078A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  078A             scan_u16x:
0479+  078A F8 10 00    	enter 16
0480+  078D D8          	push b
0481+  078E DA          	push d
0482+  078F             
0483+  078F FA F1 FF    	lea d, [bp + -15]
0484+  0792 07 D9 05    	call gets				; get number
0485+  0795             
0486+  0795 32          	mov bl, [d]
0487+  0796 37          	mov bh, bl
0488+  0797 33 01 00    	mov bl, [d + 1]
0489+  079A 07 87 05    	call atoi				; convert to int in AL
0490+  079D 23          	mov ah, al				; move to AH
0491+  079E             
0492+  079E 33 02 00    	mov bl, [d + 2]
0493+  07A1 37          	mov bh, bl
0494+  07A2 33 03 00    	mov bl, [d + 3]
0495+  07A5 07 87 05    	call atoi				; convert to int in AL
0496+  07A8             
0497+  07A8 E7          	pop d
0498+  07A9 E5          	pop b
0499+  07AA F9          	leave
0500+  07AB 09          	ret
0501+  07AC             
0502+  07AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  07AC             ; PRINT 8bit HEX INTEGER
0504+  07AC             ; integer value in reg bl
0505+  07AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  07AC             print_u8x:
0507+  07AC D7          	push a
0508+  07AD DD          	push bl
0509+  07AE             
0510+  07AE 07 99 05    	call itoa				; convert bl to char in A
0511+  07B1 2F          	mov bl, al				; save al
0512+  07B2 19 00       	mov al, 0
0513+  07B4 05 03       	syscall sys_io				; display AH
0514+  07B6 24          	mov ah, bl				; retrieve al
0515+  07B7 19 00       	mov al, 0
0516+  07B9 05 03       	syscall sys_io				; display AL
0517+  07BB             
0518+  07BB EA          	pop bl
0519+  07BC E4          	pop a
0520+  07BD 09          	ret
0521+  07BE             
0522+  07BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  07BE             ; print 8bit decimal unsigned number
0524+  07BE             ; input number in AL
0525+  07BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  07BE             print_u8d:
0527+  07BE D7          	push a
0528+  07BF D8          	push b
0529+  07C0             
0530+  07C0 22 00       	mov ah, 0
0531+  07C2 26 64 00    	mov b, 100
0532+  07C5 AE          	div a, b
0533+  07C6 D8          	push b			; save remainder
0534+  07C7 B9 00       	cmp al, 0
0535+  07C9 C6 D3 07    	je skip100
0536+  07CC 6A 30       	add al, $30
0537+  07CE 23          	mov ah, al
0538+  07CF 19 00       	mov al, 0
0539+  07D1 05 03       	syscall sys_io	; print coeff
0540+  07D3             skip100:
0541+  07D3 E4          	pop a
0542+  07D4 22 00       	mov ah, 0
0543+  07D6 26 0A 00    	mov b, 10
0544+  07D9 AE          	div a, b
0545+  07DA D8          	push b			; save remainder
0546+  07DB B9 00       	cmp al, 0
0547+  07DD C6 E7 07    	je skip10
0548+  07E0 6A 30       	add al, $30
0549+  07E2 23          	mov ah, al
0550+  07E3 19 00       	mov al, 0
0551+  07E5 05 03       	syscall sys_io	; print coeff
0552+  07E7             skip10:
0553+  07E7 E4          	pop a
0554+  07E8 1B          	mov al, bl
0555+  07E9 6A 30       	add al, $30
0556+  07EB 23          	mov ah, al
0557+  07EC 19 00       	mov al, 0
0558+  07EE 05 03       	syscall sys_io	; print coeff
0559+  07F0 E5          	pop b
0560+  07F1 E4          	pop a
0561+  07F2 09          	ret
0562+  07F3             
0563+  07F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  07F3             ; INPUT 8BIT HEX INTEGER
0565+  07F3             ; read 8bit integer into AL
0566+  07F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  07F3             scan_u8x:
0568+  07F3 F8 04 00    	enter 4
0569+  07F6 D8          	push b
0570+  07F7 DA          	push d
0571+  07F8             
0572+  07F8 FA FD FF    	lea d, [bp + -3]
0573+  07FB 07 D9 05    	call gets				; get number
0574+  07FE             
0575+  07FE 32          	mov bl, [d]
0576+  07FF 37          	mov bh, bl
0577+  0800 33 01 00    	mov bl, [d + 1]
0578+  0803 07 87 05    	call atoi				; convert to int in AL
0579+  0806             
0580+  0806 E7          	pop d
0581+  0807 E5          	pop b
0582+  0808 F9          	leave
0583+  0809 09          	ret
0584+  080A             
0585+  080A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  080A             ; input decimal number
0587+  080A             ; result in A
0588+  080A             ; 655'\0'
0589+  080A             ; low--------high
0590+  080A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  080A             scan_u16d:
0592+  080A F8 08 00    	enter 8
0593+  080D E2          	push si
0594+  080E D8          	push b
0595+  080F D9          	push c
0596+  0810 DA          	push d
0597+  0811 FA F9 FF    	lea d, [bp +- 7]
0598+  0814 07 D9 05    	call gets
0599+  0817 07 0F 05    	call strlen			; get string length in C
0600+  081A 7E          	dec c
0601+  081B FD 4E       	mov si, d
0602+  081D 12          	mov a, c
0603+  081E FD 99       	shl a
0604+  0820 3B 6F 05    	mov d, table_power
0605+  0823 59          	add d, a
0606+  0824 38 00 00    	mov c, 0
0607+  0827             mul_loop:
0608+  0827 F6          	lodsb			; load ASCII to al
0609+  0828 B9 00       	cmp al, 0
0610+  082A C6 3D 08    	je mul_exit
0611+  082D 6F 30       	sub al, $30		; make into integer
0612+  082F 22 00       	mov ah, 0
0613+  0831 2A          	mov b, [d]
0614+  0832 AC          	mul a, b			; result in B since it fits in 16bits
0615+  0833 11          	mov a, b
0616+  0834 28          	mov b, c
0617+  0835 54          	add a, b
0618+  0836 39          	mov c, a
0619+  0837 63 02 00    	sub d, 2
0620+  083A 0A 27 08    	jmp mul_loop
0621+  083D             mul_exit:
0622+  083D 12          	mov a, c
0623+  083E E7          	pop d
0624+  083F E6          	pop c
0625+  0840 E5          	pop b
0626+  0841 EF          	pop si
0627+  0842 F9          	leave
0628+  0843 09          	ret
0136   0844             ; --- end include block
0137   0844             
0138   0844             .end
tasm: Number of errors = 0
