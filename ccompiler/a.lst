0001   0000             ; --- FILENAME: life2.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 07 16 04      call update_game
0010   0405 26 00 00      mov b, 0
0011   0408 F9            leave
0012   0409 05 0B         syscall sys_terminate_proc
0013   040B             print:
0014   040B D2            push bp
0015   040C 9B            mov bp, sp
0016   040D             
0017   040D             ; --- BEGIN INLINE ASM BLOCK
0018   040D 17 05 00      mov a, [bp + 5]
0019   0410 3C            mov d, a
0020   0411 07 3F 0E      call puts
0021   0414             ; --- END INLINE ASM BLOCK
0022   0414             
0023   0414 F9            leave
0024   0415 09            ret
0025   0416             update_game:
0026   0416 D2            push bp
0027   0417 9B            mov bp, sp
0028   0418 52 02 00      sub sp, 2 ; i
0029   041B 52 02 00      sub sp, 2 ; j
0030   041E 52 02 00      sub sp, 2 ; ni
0031   0421 52 02 00      sub sp, 2 ; nj
0032   0424 52 02 00      sub sp, 2 ; count
0033   0427             _for1_init:
0034   0427 26 01 00      mov b, 1
0035   042A D7            push a
0036   042B 11            mov a, b
0037   042C 45 FF FF      mov [bp + -1], a ; i
0038   042F E4            pop a
0039   0430             _for1_cond:
0040   0430 2C FF FF      mov b, [bp + -1] ; i
0041   0433 D7            push a
0042   0434 11            mov a, b
0043   0435 26 14 00      mov b, 20
0044   0438 B0            cmp a, b
0045   0439 0E            lodflgs
0046   043A 87 02         and al, %00000010
0047   043C 22 00         mov ah, 0
0048   043E 27            mov b, a
0049   043F E4            pop a
0050   0440 C0 00 00      cmp b, 0
0051   0443 C6 B5 05      je _for1_exit
0052   0446             _for1_block:
0053   0446             _for2_init:
0054   0446 26 01 00      mov b, 1
0055   0449 D7            push a
0056   044A 11            mov a, b
0057   044B 45 FD FF      mov [bp + -3], a ; j
0058   044E E4            pop a
0059   044F             _for2_cond:
0060   044F 2C FD FF      mov b, [bp + -3] ; j
0061   0452 D7            push a
0062   0453 11            mov a, b
0063   0454 26 14 00      mov b, 20
0064   0457 B0            cmp a, b
0065   0458 0E            lodflgs
0066   0459 87 02         and al, %00000010
0067   045B 22 00         mov ah, 0
0068   045D 27            mov b, a
0069   045E E4            pop a
0070   045F C0 00 00      cmp b, 0
0071   0462 C6 A7 05      je _for2_exit
0072   0465             _for2_block:
0073   0465 26 00 00      mov b, 0
0074   0468 D7            push a
0075   0469 11            mov a, b
0076   046A 45 F7 FF      mov [bp + -9], a ; count
0077   046D E4            pop a
0078   046E             _for3_init:
0079   046E 2C FF FF      mov b, [bp + -1] ; i
0080   0471 D7            push a
0081   0472 11            mov a, b
0082   0473 26 01 00      mov b, 1
0083   0476 60            sub a, b
0084   0477 27            mov b, a
0085   0478 E4            pop a
0086   0479 D7            push a
0087   047A 11            mov a, b
0088   047B 45 FB FF      mov [bp + -5], a ; ni
0089   047E E4            pop a
0090   047F             _for3_cond:
0091   047F 2C FB FF      mov b, [bp + -5] ; ni
0092   0482 D7            push a
0093   0483 11            mov a, b
0094   0484 2C FF FF      mov b, [bp + -1] ; i
0095   0487 D7            push a
0096   0488 11            mov a, b
0097   0489 26 01 00      mov b, 1
0098   048C 54            add a, b
0099   048D 27            mov b, a
0100   048E E4            pop a
0101   048F B0            cmp a, b
0102   0490 0E            lodflgs
0103   0491 87 03         and al, %00000011
0104   0493 22 00         mov ah, 0
0105   0495 27            mov b, a
0106   0496 E4            pop a
0107   0497 C0 00 00      cmp b, 0
0108   049A C6 99 05      je _for3_exit
0109   049D             _for3_block:
0110   049D             _for4_init:
0111   049D 2C FD FF      mov b, [bp + -3] ; j
0112   04A0 D7            push a
0113   04A1 11            mov a, b
0114   04A2 26 01 00      mov b, 1
0115   04A5 60            sub a, b
0116   04A6 27            mov b, a
0117   04A7 E4            pop a
0118   04A8 D7            push a
0119   04A9 11            mov a, b
0120   04AA 45 F9 FF      mov [bp + -7], a ; nj
0121   04AD E4            pop a
0122   04AE             _for4_cond:
0123   04AE 2C F9 FF      mov b, [bp + -7] ; nj
0124   04B1 D7            push a
0125   04B2 11            mov a, b
0126   04B3 2C FD FF      mov b, [bp + -3] ; j
0127   04B6 D7            push a
0128   04B7 11            mov a, b
0129   04B8 26 01 00      mov b, 1
0130   04BB 54            add a, b
0131   04BC 27            mov b, a
0132   04BD E4            pop a
0133   04BE B0            cmp a, b
0134   04BF 0E            lodflgs
0135   04C0 87 03         and al, %00000011
0136   04C2 22 00         mov ah, 0
0137   04C4 27            mov b, a
0138   04C5 E4            pop a
0139   04C6 C0 00 00      cmp b, 0
0140   04C9 C6 8B 05      je _for4_exit
0141   04CC             _for4_block:
0142   04CC             _if5_cond:
0143   04CC 2C FB FF      mov b, [bp + -5] ; ni
0144   04CF D7            push a
0145   04D0 11            mov a, b
0146   04D1 26 00 00      mov b, 0
0147   04D4 B0            cmp a, b
0148   04D5 0E            lodflgs
0149   04D6 87 03         and al, %00000011
0150   04D8 8F 02         xor al, %00000010
0151   04DA 22 00         mov ah, 0
0152   04DC 27            mov b, a
0153   04DD E4            pop a
0154   04DE D7            push a
0155   04DF 11            mov a, b
0156   04E0 2C FB FF      mov b, [bp + -5] ; ni
0157   04E3 D7            push a
0158   04E4 11            mov a, b
0159   04E5 26 14 00      mov b, 20
0160   04E8 B0            cmp a, b
0161   04E9 0E            lodflgs
0162   04EA 87 02         and al, %00000010
0163   04EC 22 00         mov ah, 0
0164   04EE 27            mov b, a
0165   04EF E4            pop a
0166   04F0 86            and a, b
0167   04F1 27            mov b, a
0168   04F2 E4            pop a
0169   04F3 D7            push a
0170   04F4 11            mov a, b
0171   04F5 2C F9 FF      mov b, [bp + -7] ; nj
0172   04F8 D7            push a
0173   04F9 11            mov a, b
0174   04FA 26 00 00      mov b, 0
0175   04FD B0            cmp a, b
0176   04FE 0E            lodflgs
0177   04FF 87 03         and al, %00000011
0178   0501 8F 02         xor al, %00000010
0179   0503 22 00         mov ah, 0
0180   0505 27            mov b, a
0181   0506 E4            pop a
0182   0507 86            and a, b
0183   0508 27            mov b, a
0184   0509 E4            pop a
0185   050A D7            push a
0186   050B 11            mov a, b
0187   050C 2C F9 FF      mov b, [bp + -7] ; nj
0188   050F D7            push a
0189   0510 11            mov a, b
0190   0511 26 14 00      mov b, 20
0191   0514 B0            cmp a, b
0192   0515 0E            lodflgs
0193   0516 87 02         and al, %00000010
0194   0518 22 00         mov ah, 0
0195   051A 27            mov b, a
0196   051B E4            pop a
0197   051C 86            and a, b
0198   051D 27            mov b, a
0199   051E E4            pop a
0200   051F C0 00 00      cmp b, 0
0201   0522 C6 7D 05      je _if5_exit
0202   0525             _if5_true:
0203   0525             _if6_cond:
0204   0525 2C FB FF      mov b, [bp + -5] ; ni
0205   0528 D7            push a
0206   0529 11            mov a, b
0207   052A 2C FF FF      mov b, [bp + -1] ; i
0208   052D B0            cmp a, b
0209   052E 0E            lodflgs
0210   052F 87 01         and al, %00000001
0211   0531 8F 01         xor al, %00000001
0212   0533 22 00         mov ah, 0
0213   0535 27            mov b, a
0214   0536 E4            pop a
0215   0537 D7            push a
0216   0538 11            mov a, b
0217   0539 2C F9 FF      mov b, [bp + -7] ; nj
0218   053C D7            push a
0219   053D 11            mov a, b
0220   053E 2C FD FF      mov b, [bp + -3] ; j
0221   0541 B0            cmp a, b
0222   0542 0E            lodflgs
0223   0543 87 01         and al, %00000001
0224   0545 8F 01         xor al, %00000001
0225   0547 22 00         mov ah, 0
0226   0549 27            mov b, a
0227   054A E4            pop a
0228   054B 8A            or a, b
0229   054C 27            mov b, a
0230   054D E4            pop a
0231   054E C0 00 00      cmp b, 0
0232   0551 C6 7A 05      je _if6_exit
0233   0554             _if6_true:
0234   0554 2C F7 FF      mov b, [bp + -9] ; count
0235   0557 D7            push a
0236   0558 11            mov a, b
0237   0559 29 D7 08      mov b, [curr_state]
0238   055C 74            mov d, b
0239   055D 2C FB FF      mov b, [bp + -5] ; ni
0240   0560 10 28 00      mov a, 40
0241   0563 AC            mul a, b
0242   0564 5A            add d, b
0243   0565 2C F9 FF      mov b, [bp + -7] ; nj
0244   0568 10 02 00      mov a, 2
0245   056B AC            mul a, b
0246   056C 5A            add d, b
0247   056D 2A            mov b, [d]
0248   056E 54            add a, b
0249   056F 27            mov b, a
0250   0570 E4            pop a
0251   0571 D7            push a
0252   0572 11            mov a, b
0253   0573 45 F7 FF      mov [bp + -9], a ; count
0254   0576 E4            pop a
0255   0577 0A 7A 05      jmp _if6_exit
0256   057A             _if6_exit:
0257   057A 0A 7D 05      jmp _if5_exit
0258   057D             _if5_exit:
0259   057D             _for4_update:
0260   057D 2C F9 FF      mov b, [bp + -7] ; nj
0261   0580 FD 77         inc b
0262   0582 D7            push a
0263   0583 11            mov a, b
0264   0584 45 F9 FF      mov [bp + -7], a ; nj
0265   0587 E4            pop a
0266   0588 0A AE 04      jmp _for4_cond
0267   058B             _for4_exit:
0268   058B             _for3_update:
0269   058B 2C FB FF      mov b, [bp + -5] ; ni
0270   058E FD 77         inc b
0271   0590 D7            push a
0272   0591 11            mov a, b
0273   0592 45 FB FF      mov [bp + -5], a ; ni
0274   0595 E4            pop a
0275   0596 0A 7F 04      jmp _for3_cond
0276   0599             _for3_exit:
0277   0599             _for2_update:
0278   0599 2C FD FF      mov b, [bp + -3] ; j
0279   059C FD 77         inc b
0280   059E D7            push a
0281   059F 11            mov a, b
0282   05A0 45 FD FF      mov [bp + -3], a ; j
0283   05A3 E4            pop a
0284   05A4 0A 4F 04      jmp _for2_cond
0285   05A7             _for2_exit:
0286   05A7             _for1_update:
0287   05A7 2C FF FF      mov b, [bp + -1] ; i
0288   05AA FD 77         inc b
0289   05AC D7            push a
0290   05AD 11            mov a, b
0291   05AE 45 FF FF      mov [bp + -1], a ; i
0292   05B1 E4            pop a
0293   05B2 0A 30 04      jmp _for1_cond
0294   05B5             _for1_exit:
0295   05B5 F9            leave
0296   05B6 09            ret
0297   05B7             ; --- END TEXT BLOCK
0298   05B7             
0299   05B7             ; --- BEGIN DATA BLOCK
0300   05B7 00 00 00 00 curr_state_data: .fill 800, 0
0300   05BB 00 00 00 00 
0300   05BF 00 00 00 00 
0300   05C3 00 00 00 00 
0300   05C7 00 00 00 00 
0300   05CB 00 00 00 00 
0300   05CF 00 00 00 00 
0300   05D3 00 00 00 00 
0300   05D7 00 00 00 00 
0300   05DB 00 00 00 00 
0300   05DF 00 00 00 00 
0300   05E3 00 00 00 00 
0300   05E7 00 00 00 00 
0300   05EB 00 00 00 00 
0300   05EF 00 00 00 00 
0300   05F3 00 00 00 00 
0300   05F7 00 00 00 00 
0300   05FB 00 00 00 00 
0300   05FF 00 00 00 00 
0300   0603 00 00 00 00 
0300   0607 00 00 00 00 
0300   060B 00 00 00 00 
0300   060F 00 00 00 00 
0300   0613 00 00 00 00 
0300   0617 00 00 00 00 
0300   061B 00 00 00 00 
0300   061F 00 00 00 00 
0300   0623 00 00 00 00 
0300   0627 00 00 00 00 
0300   062B 00 00 00 00 
0300   062F 00 00 00 00 
0300   0633 00 00 00 00 
0300   0637 00 00 00 00 
0300   063B 00 00 00 00 
0300   063F 00 00 00 00 
0300   0643 00 00 00 00 
0300   0647 00 00 00 00 
0300   064B 00 00 00 00 
0300   064F 00 00 00 00 
0300   0653 00 00 00 00 
0300   0657 00 00 00 00 
0300   065B 00 00 00 00 
0300   065F 00 00 00 00 
0300   0663 00 00 00 00 
0300   0667 00 00 00 00 
0300   066B 00 00 00 00 
0300   066F 00 00 00 00 
0300   0673 00 00 00 00 
0300   0677 00 00 00 00 
0300   067B 00 00 00 00 
0300   067F 00 00 00 00 
0300   0683 00 00 00 00 
0300   0687 00 00 00 00 
0300   068B 00 00 00 00 
0300   068F 00 00 00 00 
0300   0693 00 00 00 00 
0300   0697 00 00 00 00 
0300   069B 00 00 00 00 
0300   069F 00 00 00 00 
0300   06A3 00 00 00 00 
0300   06A7 00 00 00 00 
0300   06AB 00 00 00 00 
0300   06AF 00 00 00 00 
0300   06B3 00 00 00 00 
0300   06B7 00 00 00 00 
0300   06BB 00 00 00 00 
0300   06BF 00 00 00 00 
0300   06C3 00 00 00 00 
0300   06C7 00 00 00 00 
0300   06CB 00 00 00 00 
0300   06CF 00 00 00 00 
0300   06D3 00 00 00 00 
0300   06D7 00 00 00 00 
0300   06DB 00 00 00 00 
0300   06DF 00 00 00 00 
0300   06E3 00 00 00 00 
0300   06E7 00 00 00 00 
0300   06EB 00 00 00 00 
0300   06EF 00 00 00 00 
0300   06F3 00 00 00 00 
0300   06F7 00 00 00 00 
0300   06FB 00 00 00 00 
0300   06FF 00 00 00 00 
0300   0703 00 00 00 00 
0300   0707 00 00 00 00 
0300   070B 00 00 00 00 
0300   070F 00 00 00 00 
0300   0713 00 00 00 00 
0300   0717 00 00 00 00 
0300   071B 00 00 00 00 
0300   071F 00 00 00 00 
0300   0723 00 00 00 00 
0300   0727 00 00 00 00 
0300   072B 00 00 00 00 
0300   072F 00 00 00 00 
0300   0733 00 00 00 00 
0300   0737 00 00 00 00 
0300   073B 00 00 00 00 
0300   073F 00 00 00 00 
0300   0743 00 00 00 00 
0300   0747 00 00 00 00 
0300   074B 00 00 00 00 
0300   074F 00 00 00 00 
0300   0753 00 00 00 00 
0300   0757 00 00 00 00 
0300   075B 00 00 00 00 
0300   075F 00 00 00 00 
0300   0763 00 00 00 00 
0300   0767 00 00 00 00 
0300   076B 00 00 00 00 
0300   076F 00 00 00 00 
0300   0773 00 00 00 00 
0300   0777 00 00 00 00 
0300   077B 00 00 00 00 
0300   077F 00 00 00 00 
0300   0783 00 00 00 00 
0300   0787 00 00 00 00 
0300   078B 00 00 00 00 
0300   078F 00 00 00 00 
0300   0793 00 00 00 00 
0300   0797 00 00 00 00 
0300   079B 00 00 00 00 
0300   079F 00 00 00 00 
0300   07A3 00 00 00 00 
0300   07A7 00 00 00 00 
0300   07AB 00 00 00 00 
0300   07AF 00 00 00 00 
0300   07B3 00 00 00 00 
0300   07B7 00 00 00 00 
0300   07BB 00 00 00 00 
0300   07BF 00 00 00 00 
0300   07C3 00 00 00 00 
0300   07C7 00 00 00 00 
0300   07CB 00 00 00 00 
0300   07CF 00 00 00 00 
0300   07D3 00 00 00 00 
0300   07D7 00 00 00 00 
0300   07DB 00 00 00 00 
0300   07DF 00 00 00 00 
0300   07E3 00 00 00 00 
0300   07E7 00 00 00 00 
0300   07EB 00 00 00 00 
0300   07EF 00 00 00 00 
0300   07F3 00 00 00 00 
0300   07F7 00 00 00 00 
0300   07FB 00 00 00 00 
0300   07FF 00 00 00 00 
0300   0803 00 00 00 00 
0300   0807 00 00 00 00 
0300   080B 00 00 00 00 
0300   080F 00 00 00 00 
0300   0813 00 00 00 00 
0300   0817 00 00 00 00 
0300   081B 00 00 00 00 
0300   081F 00 00 00 00 
0300   0823 00 00 00 00 
0300   0827 00 00 00 00 
0300   082B 00 00 00 00 
0300   082F 00 00 00 00 
0300   0833 00 00 00 00 
0300   0837 00 00 00 00 
0300   083B 00 00 00 00 
0300   083F 00 00 00 00 
0300   0843 00 00 00 00 
0300   0847 00 00 00 00 
0300   084B 00 00 00 00 
0300   084F 00 00 00 00 
0300   0853 00 00 00 00 
0300   0857 00 00 00 00 
0300   085B 00 00 00 00 
0300   085F 00 00 00 00 
0300   0863 00 00 00 00 
0300   0867 00 00 00 00 
0300   086B 00 00 00 00 
0300   086F 00 00 00 00 
0300   0873 00 00 00 00 
0300   0877 00 00 00 00 
0300   087B 00 00 00 00 
0300   087F 00 00 00 00 
0300   0883 00 00 00 00 
0300   0887 00 00 00 00 
0300   088B 00 00 00 00 
0300   088F 00 00 00 00 
0300   0893 00 00 00 00 
0300   0897 00 00 00 00 
0300   089B 00 00 00 00 
0300   089F 00 00 00 00 
0300   08A3 00 00 00 00 
0300   08A7 00 00 00 00 
0300   08AB 00 00 00 00 
0300   08AF 00 00 00 00 
0300   08B3 00 00 00 00 
0300   08B7 00 00 00 00 
0300   08BB 00 00 00 00 
0300   08BF 00 00 00 00 
0300   08C3 00 00 00 00 
0300   08C7 00 00 00 00 
0300   08CB 00 00 00 00 
0300   08CF 00 00 00 00 
0300   08D3 00 00 00 00 
0301   08D7 B7 05       curr_state: .dw curr_state_data
0302   08D9 00 00 00 00 next_state_data: .fill 800, 0
0302   08DD 00 00 00 00 
0302   08E1 00 00 00 00 
0302   08E5 00 00 00 00 
0302   08E9 00 00 00 00 
0302   08ED 00 00 00 00 
0302   08F1 00 00 00 00 
0302   08F5 00 00 00 00 
0302   08F9 00 00 00 00 
0302   08FD 00 00 00 00 
0302   0901 00 00 00 00 
0302   0905 00 00 00 00 
0302   0909 00 00 00 00 
0302   090D 00 00 00 00 
0302   0911 00 00 00 00 
0302   0915 00 00 00 00 
0302   0919 00 00 00 00 
0302   091D 00 00 00 00 
0302   0921 00 00 00 00 
0302   0925 00 00 00 00 
0302   0929 00 00 00 00 
0302   092D 00 00 00 00 
0302   0931 00 00 00 00 
0302   0935 00 00 00 00 
0302   0939 00 00 00 00 
0302   093D 00 00 00 00 
0302   0941 00 00 00 00 
0302   0945 00 00 00 00 
0302   0949 00 00 00 00 
0302   094D 00 00 00 00 
0302   0951 00 00 00 00 
0302   0955 00 00 00 00 
0302   0959 00 00 00 00 
0302   095D 00 00 00 00 
0302   0961 00 00 00 00 
0302   0965 00 00 00 00 
0302   0969 00 00 00 00 
0302   096D 00 00 00 00 
0302   0971 00 00 00 00 
0302   0975 00 00 00 00 
0302   0979 00 00 00 00 
0302   097D 00 00 00 00 
0302   0981 00 00 00 00 
0302   0985 00 00 00 00 
0302   0989 00 00 00 00 
0302   098D 00 00 00 00 
0302   0991 00 00 00 00 
0302   0995 00 00 00 00 
0302   0999 00 00 00 00 
0302   099D 00 00 00 00 
0302   09A1 00 00 00 00 
0302   09A5 00 00 00 00 
0302   09A9 00 00 00 00 
0302   09AD 00 00 00 00 
0302   09B1 00 00 00 00 
0302   09B5 00 00 00 00 
0302   09B9 00 00 00 00 
0302   09BD 00 00 00 00 
0302   09C1 00 00 00 00 
0302   09C5 00 00 00 00 
0302   09C9 00 00 00 00 
0302   09CD 00 00 00 00 
0302   09D1 00 00 00 00 
0302   09D5 00 00 00 00 
0302   09D9 00 00 00 00 
0302   09DD 00 00 00 00 
0302   09E1 00 00 00 00 
0302   09E5 00 00 00 00 
0302   09E9 00 00 00 00 
0302   09ED 00 00 00 00 
0302   09F1 00 00 00 00 
0302   09F5 00 00 00 00 
0302   09F9 00 00 00 00 
0302   09FD 00 00 00 00 
0302   0A01 00 00 00 00 
0302   0A05 00 00 00 00 
0302   0A09 00 00 00 00 
0302   0A0D 00 00 00 00 
0302   0A11 00 00 00 00 
0302   0A15 00 00 00 00 
0302   0A19 00 00 00 00 
0302   0A1D 00 00 00 00 
0302   0A21 00 00 00 00 
0302   0A25 00 00 00 00 
0302   0A29 00 00 00 00 
0302   0A2D 00 00 00 00 
0302   0A31 00 00 00 00 
0302   0A35 00 00 00 00 
0302   0A39 00 00 00 00 
0302   0A3D 00 00 00 00 
0302   0A41 00 00 00 00 
0302   0A45 00 00 00 00 
0302   0A49 00 00 00 00 
0302   0A4D 00 00 00 00 
0302   0A51 00 00 00 00 
0302   0A55 00 00 00 00 
0302   0A59 00 00 00 00 
0302   0A5D 00 00 00 00 
0302   0A61 00 00 00 00 
0302   0A65 00 00 00 00 
0302   0A69 00 00 00 00 
0302   0A6D 00 00 00 00 
0302   0A71 00 00 00 00 
0302   0A75 00 00 00 00 
0302   0A79 00 00 00 00 
0302   0A7D 00 00 00 00 
0302   0A81 00 00 00 00 
0302   0A85 00 00 00 00 
0302   0A89 00 00 00 00 
0302   0A8D 00 00 00 00 
0302   0A91 00 00 00 00 
0302   0A95 00 00 00 00 
0302   0A99 00 00 00 00 
0302   0A9D 00 00 00 00 
0302   0AA1 00 00 00 00 
0302   0AA5 00 00 00 00 
0302   0AA9 00 00 00 00 
0302   0AAD 00 00 00 00 
0302   0AB1 00 00 00 00 
0302   0AB5 00 00 00 00 
0302   0AB9 00 00 00 00 
0302   0ABD 00 00 00 00 
0302   0AC1 00 00 00 00 
0302   0AC5 00 00 00 00 
0302   0AC9 00 00 00 00 
0302   0ACD 00 00 00 00 
0302   0AD1 00 00 00 00 
0302   0AD5 00 00 00 00 
0302   0AD9 00 00 00 00 
0302   0ADD 00 00 00 00 
0302   0AE1 00 00 00 00 
0302   0AE5 00 00 00 00 
0302   0AE9 00 00 00 00 
0302   0AED 00 00 00 00 
0302   0AF1 00 00 00 00 
0302   0AF5 00 00 00 00 
0302   0AF9 00 00 00 00 
0302   0AFD 00 00 00 00 
0302   0B01 00 00 00 00 
0302   0B05 00 00 00 00 
0302   0B09 00 00 00 00 
0302   0B0D 00 00 00 00 
0302   0B11 00 00 00 00 
0302   0B15 00 00 00 00 
0302   0B19 00 00 00 00 
0302   0B1D 00 00 00 00 
0302   0B21 00 00 00 00 
0302   0B25 00 00 00 00 
0302   0B29 00 00 00 00 
0302   0B2D 00 00 00 00 
0302   0B31 00 00 00 00 
0302   0B35 00 00 00 00 
0302   0B39 00 00 00 00 
0302   0B3D 00 00 00 00 
0302   0B41 00 00 00 00 
0302   0B45 00 00 00 00 
0302   0B49 00 00 00 00 
0302   0B4D 00 00 00 00 
0302   0B51 00 00 00 00 
0302   0B55 00 00 00 00 
0302   0B59 00 00 00 00 
0302   0B5D 00 00 00 00 
0302   0B61 00 00 00 00 
0302   0B65 00 00 00 00 
0302   0B69 00 00 00 00 
0302   0B6D 00 00 00 00 
0302   0B71 00 00 00 00 
0302   0B75 00 00 00 00 
0302   0B79 00 00 00 00 
0302   0B7D 00 00 00 00 
0302   0B81 00 00 00 00 
0302   0B85 00 00 00 00 
0302   0B89 00 00 00 00 
0302   0B8D 00 00 00 00 
0302   0B91 00 00 00 00 
0302   0B95 00 00 00 00 
0302   0B99 00 00 00 00 
0302   0B9D 00 00 00 00 
0302   0BA1 00 00 00 00 
0302   0BA5 00 00 00 00 
0302   0BA9 00 00 00 00 
0302   0BAD 00 00 00 00 
0302   0BB1 00 00 00 00 
0302   0BB5 00 00 00 00 
0302   0BB9 00 00 00 00 
0302   0BBD 00 00 00 00 
0302   0BC1 00 00 00 00 
0302   0BC5 00 00 00 00 
0302   0BC9 00 00 00 00 
0302   0BCD 00 00 00 00 
0302   0BD1 00 00 00 00 
0302   0BD5 00 00 00 00 
0302   0BD9 00 00 00 00 
0302   0BDD 00 00 00 00 
0302   0BE1 00 00 00 00 
0302   0BE5 00 00 00 00 
0302   0BE9 00 00 00 00 
0302   0BED 00 00 00 00 
0302   0BF1 00 00 00 00 
0302   0BF5 00 00 00 00 
0303   0BF9 D9 08       next_state: .dw next_state_data
0304   0BFB             ; --- END DATA BLOCK
0305   0BFB             
0306   0BFB             ; --- BEGIN INCLUDE BLOCK
0307   0BFB             .include "lib/stdio.asm"
0001+  0BFB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0BFB             ; stdio.s
0003+  0BFB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0BFB             .include "lib/string.asm"
0001++ 0BFB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0BFB             ; string.s
0003++ 0BFB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0BFB             
0005++ 0BFB             
0006++ 0BFB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0BFB             ; strrev
0008++ 0BFB             ; reverse a string
0009++ 0BFB             ; D = string address
0010++ 0BFB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0BFB             ; 01234
0012++ 0BFB             strrev:
0013++ 0BFB 4B          	pusha
0014++ 0BFC 07 42 0C    	call strlen	; length in C
0015++ 0BFF 12          	mov a, c
0016++ 0C00 AF 01 00    	cmp a, 1
0017++ 0C03 D0 1D 0C    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0C06 7D          	dec a
0019++ 0C07 FD 4E       	mov si, d	; beginning of string
0020++ 0C09 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0C0B 59          	add d, a	; end of string
0022++ 0C0C 12          	mov a, c
0023++ 0C0D FD 9B       	shr a		; divide by 2
0024++ 0C0F 39          	mov c, a	; C now counts the steps
0025++ 0C10             strrev_L0:
0026++ 0C10 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0C11 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0C12 3E          	mov [d], al	; store left char into right side
0029++ 0C13 1B          	mov al, bl
0030++ 0C14 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0C15 7E          	dec c
0032++ 0C16 7F          	dec d
0033++ 0C17 C2 00 00    	cmp c, 0
0034++ 0C1A C7 10 0C    	jne strrev_L0
0035++ 0C1D             strrev_end:
0036++ 0C1D 4C          	popa
0037++ 0C1E 09          	ret
0038++ 0C1F             	
0039++ 0C1F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0C1F             ; strchr
0041++ 0C1F             ; search string in D for char in AL
0042++ 0C1F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0C1F             strchr:
0044++ 0C1F             strchr_L0:
0045++ 0C1F 32          	mov bl, [d]
0046++ 0C20 C1 00       	cmp bl, 0
0047++ 0C22 C6 2D 0C    	je strchr_end
0048++ 0C25 BA          	cmp al, bl
0049++ 0C26 C6 2D 0C    	je strchr_end
0050++ 0C29 79          	inc d
0051++ 0C2A 0A 1F 0C    	jmp strchr_L0
0052++ 0C2D             strchr_end:
0053++ 0C2D 1B          	mov al, bl
0054++ 0C2E 09          	ret
0055++ 0C2F             
0056++ 0C2F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0C2F             ; strstr
0058++ 0C2F             ; find sub-string
0059++ 0C2F             ; str1 in SI
0060++ 0C2F             ; str2 in DI
0061++ 0C2F             ; SI points to end of source string
0062++ 0C2F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0C2F             strstr:
0064++ 0C2F DB          	push al
0065++ 0C30 DA          	push d
0066++ 0C31 E3          	push di
0067++ 0C32             strstr_loop:
0068++ 0C32 F3          	cmpsb					; compare a byte of the strings
0069++ 0C33 C7 3E 0C    	jne strstr_ret
0070++ 0C36 FC 00 00    	lea d, [di + 0]
0071++ 0C39 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0C3B C7 32 0C    	jne strstr_loop				; equal chars but not at end
0073++ 0C3E             strstr_ret:
0074++ 0C3E F0          	pop di
0075++ 0C3F E7          	pop d
0076++ 0C40 E8          	pop al
0077++ 0C41 09          	ret
0078++ 0C42             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0C42             ; length of null terminated string
0080++ 0C42             ; result in C
0081++ 0C42             ; pointer in D
0082++ 0C42             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0C42             strlen:
0084++ 0C42 DA          	push d
0085++ 0C43 38 00 00    	mov c, 0
0086++ 0C46             strlen_L1:
0087++ 0C46 BD 00       	cmp byte [d], 0
0088++ 0C48 C6 50 0C    	je strlen_ret
0089++ 0C4B 79          	inc d
0090++ 0C4C 78          	inc c
0091++ 0C4D 0A 46 0C    	jmp strlen_L1
0092++ 0C50             strlen_ret:
0093++ 0C50 E7          	pop d
0094++ 0C51 09          	ret
0095++ 0C52             
0096++ 0C52             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0C52             ; STRCMP
0098++ 0C52             ; compare two strings
0099++ 0C52             ; str1 in SI
0100++ 0C52             ; str2 in DI
0101++ 0C52             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0C52             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0C52             strcmp:
0104++ 0C52 DB          	push al
0105++ 0C53 DA          	push d
0106++ 0C54 E3          	push di
0107++ 0C55 E2          	push si
0108++ 0C56             strcmp_loop:
0109++ 0C56 F3          	cmpsb					; compare a byte of the strings
0110++ 0C57 C7 62 0C    	jne strcmp_ret
0111++ 0C5A FB FF FF    	lea d, [si +- 1]
0112++ 0C5D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0C5F C7 56 0C    	jne strcmp_loop				; equal chars but not at end
0114++ 0C62             strcmp_ret:
0115++ 0C62 EF          	pop si
0116++ 0C63 F0          	pop di
0117++ 0C64 E7          	pop d
0118++ 0C65 E8          	pop al
0119++ 0C66 09          	ret
0120++ 0C67             
0121++ 0C67             
0122++ 0C67             ; STRCPY
0123++ 0C67             ; copy null terminated string from SI to DI
0124++ 0C67             ; source in SI
0125++ 0C67             ; destination in DI
0126++ 0C67             strcpy:
0127++ 0C67 E2          	push si
0128++ 0C68 E3          	push di
0129++ 0C69 DB          	push al
0130++ 0C6A             strcpy_L1:
0131++ 0C6A F6          	lodsb
0132++ 0C6B F7          	stosb
0133++ 0C6C B9 00       	cmp al, 0
0134++ 0C6E C7 6A 0C    	jne strcpy_L1
0135++ 0C71             strcpy_end:
0136++ 0C71 E8          	pop al
0137++ 0C72 F0          	pop di
0138++ 0C73 EF          	pop si
0139++ 0C74 09          	ret
0140++ 0C75             
0141++ 0C75             ; STRCAT
0142++ 0C75             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0C75             ; source in SI
0144++ 0C75             ; destination in DI
0145++ 0C75             strcat:
0146++ 0C75 E2          	push si
0147++ 0C76 E3          	push di
0148++ 0C77 D7          	push a
0149++ 0C78 DA          	push d
0150++ 0C79 50          	mov a, di
0151++ 0C7A 3C          	mov d, a
0152++ 0C7B             strcat_goto_end_L1:
0153++ 0C7B BD 00       	cmp byte[d], 0
0154++ 0C7D C6 84 0C    	je strcat_start
0155++ 0C80 79          	inc d
0156++ 0C81 0A 7B 0C    	jmp strcat_goto_end_L1
0157++ 0C84             strcat_start:
0158++ 0C84 FD 50       	mov di, d
0159++ 0C86             strcat_L1:
0160++ 0C86 F6          	lodsb
0161++ 0C87 F7          	stosb
0162++ 0C88 B9 00       	cmp al, 0
0163++ 0C8A C7 86 0C    	jne strcat_L1
0164++ 0C8D             strcat_end:
0165++ 0C8D E7          	pop d
0166++ 0C8E E4          	pop a
0167++ 0C8F F0          	pop di
0168++ 0C90 EF          	pop si
0169++ 0C91 09          	ret
0005+  0C92             
0006+  0C92 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0C96 34 35 36 37 
0006+  0C9A 38 39 41 42 
0006+  0C9E 43 44 45 46 
0007+  0CA2             
0008+  0CA2 01 00       table_power:.dw 1
0009+  0CA4 0A 00       			.dw 10
0010+  0CA6 64 00       			.dw 100
0011+  0CA8 E8 03       			.dw 1000
0012+  0CAA 10 27       			.dw 10000
0013+  0CAC             
0014+  0CAC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  0CAC             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  0CAC             ; ASCII in BL
0017+  0CAC             ; result in AL
0018+  0CAC             ; ascii for F = 0100 0110
0019+  0CAC             ; ascii for 9 = 0011 1001
0020+  0CAC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  0CAC             hex_ascii_encode:
0022+  0CAC 1B          	mov al, bl
0023+  0CAD 93 40       	test al, $40				; test if letter or number
0024+  0CAF C7 B5 0C    	jnz hex_letter
0025+  0CB2 87 0F       	and al, $0F				; get number
0026+  0CB4 09          	ret
0027+  0CB5             hex_letter:
0028+  0CB5 87 0F       	and al, $0F				; get letter
0029+  0CB7 6A 09       	add al, 9
0030+  0CB9 09          	ret
0031+  0CBA             
0032+  0CBA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  0CBA             ; ATOI
0034+  0CBA             ; 2 letter hex string in B
0035+  0CBA             ; 8bit integer returned in AL
0036+  0CBA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  0CBA             atoi:
0038+  0CBA D8          	push b
0039+  0CBB 07 AC 0C    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  0CBE 30          	mov bl, bh
0041+  0CBF DB          	push al					; save a
0042+  0CC0 07 AC 0C    	call hex_ascii_encode
0043+  0CC3 EA          	pop bl	
0044+  0CC4 FD 9E 04    	shl al, 4
0045+  0CC7 8C          	or al, bl
0046+  0CC8 E5          	pop b
0047+  0CC9 09          	ret	
0048+  0CCA             
0049+  0CCA             
0050+  0CCA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0CCA             ; printf
0052+  0CCA             ; no need for explanations!
0053+  0CCA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  0CCA             printf:
0055+  0CCA 09          	ret
0056+  0CCB             
0057+  0CCB             
0058+  0CCB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0CCB             ; scanf
0060+  0CCB             ; no need for explanations!
0061+  0CCB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0CCB             scanf:
0063+  0CCB 09          	ret
0064+  0CCC             
0065+  0CCC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0CCC             ; ITOA
0067+  0CCC             ; 8bit value in BL
0068+  0CCC             ; 2 byte ASCII result in A
0069+  0CCC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  0CCC             itoa:
0071+  0CCC DA          	push d
0072+  0CCD D8          	push b
0073+  0CCE A7 00       	mov bh, 0
0074+  0CD0 FD A4 04    	shr bl, 4	
0075+  0CD3 74          	mov d, b
0076+  0CD4 1F 92 0C    	mov al, [d + s_hex_digits]
0077+  0CD7 23          	mov ah, al
0078+  0CD8             	
0079+  0CD8 E5          	pop b
0080+  0CD9 D8          	push b
0081+  0CDA A7 00       	mov bh, 0
0082+  0CDC FD 87 0F    	and bl, $0F
0083+  0CDF 74          	mov d, b
0084+  0CE0 1F 92 0C    	mov al, [d + s_hex_digits]
0085+  0CE3 E5          	pop b
0086+  0CE4 E7          	pop d
0087+  0CE5 09          	ret
0088+  0CE6             
0089+  0CE6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0CE6             ; HEX STRING TO BINARY
0091+  0CE6             ; di = destination address
0092+  0CE6             ; si = source
0093+  0CE6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0CE6             hex_to_int:
0095+  0CE6             hex_to_int_L1:
0096+  0CE6 F6          	lodsb					; load from [SI] to AL
0097+  0CE7 B9 00       	cmp al, 0				; check if ASCII 0
0098+  0CE9 C6 F6 0C    	jz hex_to_int_ret
0099+  0CEC 36          	mov bh, al
0100+  0CED F6          	lodsb
0101+  0CEE 2F          	mov bl, al
0102+  0CEF 07 BA 0C    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0CF2 F7          	stosb					; store AL to [DI]
0104+  0CF3 0A E6 0C    	jmp hex_to_int_L1
0105+  0CF6             hex_to_int_ret:
0106+  0CF6 09          	ret		
0107+  0CF7             
0108+  0CF7             
0109+  0CF7             
0110+  0CF7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0CF7             ; GETCHAR
0112+  0CF7             ; char in ah
0113+  0CF7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0CF7             getchar:
0115+  0CF7 DB          	push al
0116+  0CF8             getchar_retry:
0117+  0CF8 FD 0C       	sti
0118+  0CFA 19 01       	mov al, 1
0119+  0CFC 05 03       	syscall sys_io			; receive in AH
0120+  0CFE B9 00       	cmp al, 0			; check if any char was receive
0121+  0D00 C6 F8 0C    	je getchar_retry
0122+  0D03 E8          	pop al
0123+  0D04 09          	ret
0124+  0D05             
0125+  0D05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0D05             ; PUTCHAR
0127+  0D05             ; char in ah
0128+  0D05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0D05             putchar:
0130+  0D05 D7          	push a
0131+  0D06 19 00       	mov al, 0
0132+  0D08 05 03       	syscall sys_io			; char in AH
0133+  0D0A E4          	pop a
0134+  0D0B 09          	ret
0135+  0D0C             
0136+  0D0C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  0D0C             ;; INPUT A STRING
0138+  0D0C             ;; terminates with null
0139+  0D0C             ;; pointer in D
0140+  0D0C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0D0C             gets:
0142+  0D0C D7          	push a
0143+  0D0D DA          	push d
0144+  0D0E             gets_loop:
0145+  0D0E FD 0C       	sti
0146+  0D10 19 01       	mov al, 1
0147+  0D12 05 03       	syscall sys_io			; receive in AH
0148+  0D14 B9 00       	cmp al, 0				; check error code (AL)
0149+  0D16 C6 0E 0D    	je gets_loop			; if no char received, retry
0150+  0D19             
0151+  0D19 76 1B       	cmp ah, 27
0152+  0D1B C6 3C 0D    	je gets_telnet_escape
0153+  0D1E 76 0A       	cmp ah, $0A				; LF
0154+  0D20 C6 95 0D    	je gets_end
0155+  0D23 76 0D       	cmp ah, $0D				; CR
0156+  0D25 C6 95 0D    	je gets_end
0157+  0D28 76 5C       	cmp ah, $5C				; '\\'
0158+  0D2A C6 6C 0D    	je gets_escape
0159+  0D2D             	
0160+  0D2D 76 08       	cmp ah, $08			; check for backspace
0161+  0D2F C6 38 0D    	je gets_backspace
0162+  0D32             
0163+  0D32 1A          	mov al, ah
0164+  0D33 3E          	mov [d], al
0165+  0D34 79          	inc d
0166+  0D35 0A 0E 0D    	jmp gets_loop
0167+  0D38             gets_backspace:
0168+  0D38 7F          	dec d
0169+  0D39 0A 0E 0D    	jmp gets_loop
0170+  0D3C             gets_telnet_escape:
0171+  0D3C FD 0C       	sti
0172+  0D3E 19 01       	mov al, 1
0173+  0D40 05 03       	syscall sys_io				; receive in AH without echo
0174+  0D42 B9 00       	cmp al, 0					; check error code (AL)
0175+  0D44 C6 3C 0D    	je gets_telnet_escape		; if no char received, retry
0176+  0D47 76 5B       	cmp ah, '['
0177+  0D49 C7 0E 0D    	jne gets_loop
0178+  0D4C             gets_telnet_escape_phase2:
0179+  0D4C FD 0C       	sti
0180+  0D4E 19 01       	mov al, 1
0181+  0D50 05 03       	syscall sys_io					; receive in AH without echo
0182+  0D52 B9 00       	cmp al, 0						; check error code (AL)
0183+  0D54 C6 4C 0D    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  0D57 76 44       	cmp ah, 'D'
0185+  0D59 C6 64 0D    	je gets_left_arrow
0186+  0D5C 76 43       	cmp ah, 'C'
0187+  0D5E C6 68 0D    	je gets_right_arrow
0188+  0D61 0A 0E 0D    	jmp gets_loop
0189+  0D64             gets_left_arrow:
0190+  0D64 7F          	dec d
0191+  0D65 0A 0E 0D    	jmp gets_loop
0192+  0D68             gets_right_arrow:
0193+  0D68 79          	inc d
0194+  0D69 0A 0E 0D    	jmp gets_loop
0195+  0D6C             gets_escape:
0196+  0D6C FD 0C       	sti
0197+  0D6E 19 01       	mov al, 1
0198+  0D70 05 03       	syscall sys_io			; receive in AH
0199+  0D72 B9 00       	cmp al, 0				; check error code (AL)
0200+  0D74 C6 6C 0D    	je gets_escape			; if no char received, retry
0201+  0D77 76 6E       	cmp ah, 'n'
0202+  0D79 C6 87 0D    	je gets_LF
0203+  0D7C 76 72       	cmp ah, 'r'
0204+  0D7E C6 8E 0D    	je gets_CR
0205+  0D81 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  0D82 3E          	mov [d], al
0207+  0D83 79          	inc d
0208+  0D84 0A 0E 0D    	jmp gets_loop
0209+  0D87             gets_LF:
0210+  0D87 19 0A       	mov al, $0A
0211+  0D89 3E          	mov [d], al
0212+  0D8A 79          	inc d
0213+  0D8B 0A 0E 0D    	jmp gets_loop
0214+  0D8E             gets_CR:
0215+  0D8E 19 0D       	mov al, $0D
0216+  0D90 3E          	mov [d], al
0217+  0D91 79          	inc d
0218+  0D92 0A 0E 0D    	jmp gets_loop
0219+  0D95             gets_end:
0220+  0D95 19 00       	mov al, 0
0221+  0D97 3E          	mov [d], al				; terminate string
0222+  0D98 E7          	pop d
0223+  0D99 E4          	pop a
0224+  0D9A 09          	ret
0225+  0D9B             
0226+  0D9B             
0227+  0D9B             
0228+  0D9B             
0229+  0D9B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  0D9B             ;; INPUT TEXT
0231+  0D9B             ;; terminated with CTRL+D
0232+  0D9B             ;; pointer in D
0233+  0D9B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  0D9B             gettxt:
0235+  0D9B D7          	push a
0236+  0D9C DA          	push d
0237+  0D9D             gettxt_loop:
0238+  0D9D 19 01       	mov al, 1
0239+  0D9F 05 03       	syscall sys_io			; receive in AH
0240+  0DA1 B9 00       	cmp al, 0				; check error code (AL)
0241+  0DA3 C6 9D 0D    	je gettxt_loop		; if no char received, retry
0242+  0DA6 76 04       	cmp ah, 4			; EOT
0243+  0DA8 C6 E6 0D    	je gettxt_end
0244+  0DAB 76 08       	cmp ah, $08			; check for backspace
0245+  0DAD C6 E2 0D    	je gettxt_backspace
0246+  0DB0 76 5C       	cmp ah, $5C				; '\\'
0247+  0DB2 C6 BB 0D    	je gettxt_escape
0248+  0DB5 1A          	mov al, ah
0249+  0DB6 3E          	mov [d], al
0250+  0DB7 79          	inc d
0251+  0DB8 0A 9D 0D    	jmp gettxt_loop
0252+  0DBB             gettxt_escape:
0253+  0DBB 19 01       	mov al, 1
0254+  0DBD 05 03       	syscall sys_io			; receive in AH
0255+  0DBF B9 00       	cmp al, 0				; check error code (AL)
0256+  0DC1 C6 BB 0D    	je gettxt_escape		; if no char received, retry
0257+  0DC4 76 6E       	cmp ah, 'n'
0258+  0DC6 C6 D4 0D    	je gettxt_LF
0259+  0DC9 76 72       	cmp ah, 'r'
0260+  0DCB C6 DB 0D    	je gettxt_CR
0261+  0DCE 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  0DCF 3E          	mov [d], al
0263+  0DD0 79          	inc d
0264+  0DD1 0A 9D 0D    	jmp gettxt_loop
0265+  0DD4             gettxt_LF:
0266+  0DD4 19 0A       	mov al, $0A
0267+  0DD6 3E          	mov [d], al
0268+  0DD7 79          	inc d
0269+  0DD8 0A 9D 0D    	jmp gettxt_loop
0270+  0DDB             gettxt_CR:
0271+  0DDB 19 0D       	mov al, $0D
0272+  0DDD 3E          	mov [d], al
0273+  0DDE 79          	inc d
0274+  0DDF 0A 9D 0D    	jmp gettxt_loop
0275+  0DE2             gettxt_backspace:
0276+  0DE2 7F          	dec d
0277+  0DE3 0A 9D 0D    	jmp gettxt_loop
0278+  0DE6             gettxt_end:
0279+  0DE6 19 00       	mov al, 0
0280+  0DE8 3E          	mov [d], al				; terminate string
0281+  0DE9 E7          	pop d
0282+  0DEA E4          	pop a
0283+  0DEB 09          	ret
0284+  0DEC             
0285+  0DEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0DEC             ; PRINT NEW LINE
0287+  0DEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  0DEC             printnl:
0289+  0DEC D7          	push a
0290+  0DED 10 00 0A    	mov a, $0A00
0291+  0DF0 05 03       	syscall sys_io
0292+  0DF2 10 00 0D    	mov a, $0D00
0293+  0DF5 05 03       	syscall sys_io
0294+  0DF7 E4          	pop a
0295+  0DF8 09          	ret
0296+  0DF9             
0297+  0DF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  0DF9             ; strtoint
0299+  0DF9             ; 4 digit hex string number in d
0300+  0DF9             ; integer returned in A
0301+  0DF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  0DF9             strtointx:
0303+  0DF9 D8          	push b
0304+  0DFA 32          	mov bl, [d]
0305+  0DFB 37          	mov bh, bl
0306+  0DFC 33 01 00    	mov bl, [d + 1]
0307+  0DFF 07 BA 0C    	call atoi				; convert to int in AL
0308+  0E02 23          	mov ah, al				; move to AH
0309+  0E03 33 02 00    	mov bl, [d + 2]
0310+  0E06 37          	mov bh, bl
0311+  0E07 33 03 00    	mov bl, [d + 3]
0312+  0E0A 07 BA 0C    	call atoi				; convert to int in AL
0313+  0E0D E5          	pop b
0314+  0E0E 09          	ret
0315+  0E0F             
0316+  0E0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  0E0F             ; strtoint
0318+  0E0F             ; 5 digit base10 string number in d
0319+  0E0F             ; integer returned in A
0320+  0E0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  0E0F             strtoint:
0322+  0E0F E2          	push si
0323+  0E10 D8          	push b
0324+  0E11 D9          	push c
0325+  0E12 DA          	push d
0326+  0E13 07 42 0C    	call strlen			; get string length in C
0327+  0E16 7E          	dec c
0328+  0E17 FD 4E       	mov si, d
0329+  0E19 12          	mov a, c
0330+  0E1A FD 99       	shl a
0331+  0E1C 3B A2 0C    	mov d, table_power
0332+  0E1F 59          	add d, a
0333+  0E20 38 00 00    	mov c, 0
0334+  0E23             strtoint_L0:
0335+  0E23 F6          	lodsb			; load ASCII to al
0336+  0E24 B9 00       	cmp al, 0
0337+  0E26 C6 39 0E    	je strtoint_end
0338+  0E29 6F 30       	sub al, $30		; make into integer
0339+  0E2B 22 00       	mov ah, 0
0340+  0E2D 2A          	mov b, [d]
0341+  0E2E AC          	mul a, b			; result in B since it fits in 16bits
0342+  0E2F 11          	mov a, b
0343+  0E30 28          	mov b, c
0344+  0E31 54          	add a, b
0345+  0E32 39          	mov c, a
0346+  0E33 63 02 00    	sub d, 2
0347+  0E36 0A 23 0E    	jmp strtoint_L0
0348+  0E39             strtoint_end:
0349+  0E39 12          	mov a, c
0350+  0E3A E7          	pop d
0351+  0E3B E6          	pop c
0352+  0E3C E5          	pop b
0353+  0E3D EF          	pop si
0354+  0E3E 09          	ret
0355+  0E3F             
0356+  0E3F             
0357+  0E3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  0E3F             ; PRINT NULL TERMINATED STRING
0359+  0E3F             ; pointer in D
0360+  0E3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  0E3F             puts:
0362+  0E3F D7          	push a
0363+  0E40 DA          	push d
0364+  0E41             puts_L1:
0365+  0E41 1E          	mov al, [d]
0366+  0E42 B9 00       	cmp al, 0
0367+  0E44 C6 50 0E    	jz puts_END
0368+  0E47 23          	mov ah, al
0369+  0E48 19 00       	mov al, 0
0370+  0E4A 05 03       	syscall sys_io
0371+  0E4C 79          	inc d
0372+  0E4D 0A 41 0E    	jmp puts_L1
0373+  0E50             puts_END:
0374+  0E50 E7          	pop d
0375+  0E51 E4          	pop a
0376+  0E52 09          	ret
0377+  0E53             
0378+  0E53             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0E53             ; PRINT N SIZE STRING
0380+  0E53             ; pointer in D
0381+  0E53             ; size in C
0382+  0E53             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  0E53             putsn:
0384+  0E53 DB          	push al
0385+  0E54 DA          	push d
0386+  0E55 D9          	push c
0387+  0E56             putsn_L0:
0388+  0E56 1E          	mov al, [d]
0389+  0E57 23          	mov ah, al
0390+  0E58 19 00       	mov al, 0
0391+  0E5A 05 03       	syscall sys_io
0392+  0E5C 79          	inc d
0393+  0E5D 7E          	dec c	
0394+  0E5E C2 00 00    	cmp c, 0
0395+  0E61 C7 56 0E    	jne putsn_L0
0396+  0E64             putsn_end:
0397+  0E64 E6          	pop c
0398+  0E65 E7          	pop d
0399+  0E66 E8          	pop al
0400+  0E67 09          	ret
0401+  0E68             
0402+  0E68             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  0E68             ; print 16bit decimal number
0404+  0E68             ; input number in A
0405+  0E68             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  0E68             print_u16d:
0407+  0E68 D7          	push a
0408+  0E69 D8          	push b
0409+  0E6A 26 10 27    	mov b, 10000
0410+  0E6D AE          	div a, b			; get 10000 coeff.
0411+  0E6E 07 94 0E    	call print_number
0412+  0E71 11          	mov a, b
0413+  0E72 26 E8 03    	mov b, 1000
0414+  0E75 AE          	div a, b			; get 10000 coeff.
0415+  0E76 07 94 0E    	call print_number
0416+  0E79 11          	mov a, b
0417+  0E7A 26 64 00    	mov b, 100
0418+  0E7D AE          	div a, b
0419+  0E7E 07 94 0E    	call print_number
0420+  0E81 11          	mov a, b
0421+  0E82 26 0A 00    	mov b, 10
0422+  0E85 AE          	div a, b
0423+  0E86 07 94 0E    	call print_number
0424+  0E89 11          	mov a, b
0425+  0E8A 6A 30       	add al, $30
0426+  0E8C 23          	mov ah, al
0427+  0E8D 19 00       	mov al, 0
0428+  0E8F 05 03       	syscall sys_io	; print coeff
0429+  0E91 E5          	pop b
0430+  0E92 E4          	pop a
0431+  0E93 09          	ret
0432+  0E94             
0433+  0E94             
0434+  0E94             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  0E94             ; if A == 0, print space
0436+  0E94             ; else print A
0437+  0E94             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  0E94             print_number:
0439+  0E94 6A 30       	add al, $30
0440+  0E96 23          	mov ah, al
0441+  0E97 07 05 0D    	call putchar
0442+  0E9A 09          	ret
0443+  0E9B             
0444+  0E9B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  0E9B             ; PRINT 16BIT HEX INTEGER
0446+  0E9B             ; integer value in reg B
0447+  0E9B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  0E9B             print_u16x:
0449+  0E9B D7          	push a
0450+  0E9C D8          	push b
0451+  0E9D DD          	push bl
0452+  0E9E 30          	mov bl, bh
0453+  0E9F 07 CC 0C    	call itoa				; convert bh to char in A
0454+  0EA2 2F          	mov bl, al				; save al
0455+  0EA3 19 00       	mov al, 0
0456+  0EA5 05 03       	syscall sys_io				; display AH
0457+  0EA7 24          	mov ah, bl				; retrieve al
0458+  0EA8 19 00       	mov al, 0
0459+  0EAA 05 03       	syscall sys_io				; display AL
0460+  0EAC             
0461+  0EAC EA          	pop bl
0462+  0EAD 07 CC 0C    	call itoa				; convert bh to char in A
0463+  0EB0 2F          	mov bl, al				; save al
0464+  0EB1 19 00       	mov al, 0
0465+  0EB3 05 03       	syscall sys_io				; display AH
0466+  0EB5 24          	mov ah, bl				; retrieve al
0467+  0EB6 19 00       	mov al, 0
0468+  0EB8 05 03       	syscall sys_io				; display AL
0469+  0EBA             
0470+  0EBA E5          	pop b
0471+  0EBB E4          	pop a
0472+  0EBC 09          	ret
0473+  0EBD             
0474+  0EBD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  0EBD             ; INPUT 16BIT HEX INTEGER
0476+  0EBD             ; read 16bit integer into A
0477+  0EBD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  0EBD             scan_u16x:
0479+  0EBD F8 10 00    	enter 16
0480+  0EC0 D8          	push b
0481+  0EC1 DA          	push d
0482+  0EC2             
0483+  0EC2 FA F1 FF    	lea d, [bp + -15]
0484+  0EC5 07 0C 0D    	call gets				; get number
0485+  0EC8             
0486+  0EC8 32          	mov bl, [d]
0487+  0EC9 37          	mov bh, bl
0488+  0ECA 33 01 00    	mov bl, [d + 1]
0489+  0ECD 07 BA 0C    	call atoi				; convert to int in AL
0490+  0ED0 23          	mov ah, al				; move to AH
0491+  0ED1             
0492+  0ED1 33 02 00    	mov bl, [d + 2]
0493+  0ED4 37          	mov bh, bl
0494+  0ED5 33 03 00    	mov bl, [d + 3]
0495+  0ED8 07 BA 0C    	call atoi				; convert to int in AL
0496+  0EDB             
0497+  0EDB E7          	pop d
0498+  0EDC E5          	pop b
0499+  0EDD F9          	leave
0500+  0EDE 09          	ret
0501+  0EDF             
0502+  0EDF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  0EDF             ; PRINT 8bit HEX INTEGER
0504+  0EDF             ; integer value in reg bl
0505+  0EDF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  0EDF             print_u8x:
0507+  0EDF D7          	push a
0508+  0EE0 DD          	push bl
0509+  0EE1             
0510+  0EE1 07 CC 0C    	call itoa				; convert bl to char in A
0511+  0EE4 2F          	mov bl, al				; save al
0512+  0EE5 19 00       	mov al, 0
0513+  0EE7 05 03       	syscall sys_io				; display AH
0514+  0EE9 24          	mov ah, bl				; retrieve al
0515+  0EEA 19 00       	mov al, 0
0516+  0EEC 05 03       	syscall sys_io				; display AL
0517+  0EEE             
0518+  0EEE EA          	pop bl
0519+  0EEF E4          	pop a
0520+  0EF0 09          	ret
0521+  0EF1             
0522+  0EF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0EF1             ; print 8bit decimal unsigned number
0524+  0EF1             ; input number in AL
0525+  0EF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0EF1             print_u8d:
0527+  0EF1 D7          	push a
0528+  0EF2 D8          	push b
0529+  0EF3             
0530+  0EF3 22 00       	mov ah, 0
0531+  0EF5 26 64 00    	mov b, 100
0532+  0EF8 AE          	div a, b
0533+  0EF9 D8          	push b			; save remainder
0534+  0EFA B9 00       	cmp al, 0
0535+  0EFC C6 06 0F    	je skip100
0536+  0EFF 6A 30       	add al, $30
0537+  0F01 23          	mov ah, al
0538+  0F02 19 00       	mov al, 0
0539+  0F04 05 03       	syscall sys_io	; print coeff
0540+  0F06             skip100:
0541+  0F06 E4          	pop a
0542+  0F07 22 00       	mov ah, 0
0543+  0F09 26 0A 00    	mov b, 10
0544+  0F0C AE          	div a, b
0545+  0F0D D8          	push b			; save remainder
0546+  0F0E B9 00       	cmp al, 0
0547+  0F10 C6 1A 0F    	je skip10
0548+  0F13 6A 30       	add al, $30
0549+  0F15 23          	mov ah, al
0550+  0F16 19 00       	mov al, 0
0551+  0F18 05 03       	syscall sys_io	; print coeff
0552+  0F1A             skip10:
0553+  0F1A E4          	pop a
0554+  0F1B 1B          	mov al, bl
0555+  0F1C 6A 30       	add al, $30
0556+  0F1E 23          	mov ah, al
0557+  0F1F 19 00       	mov al, 0
0558+  0F21 05 03       	syscall sys_io	; print coeff
0559+  0F23 E5          	pop b
0560+  0F24 E4          	pop a
0561+  0F25 09          	ret
0562+  0F26             
0563+  0F26             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  0F26             ; INPUT 8BIT HEX INTEGER
0565+  0F26             ; read 8bit integer into AL
0566+  0F26             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  0F26             scan_u8x:
0568+  0F26 F8 04 00    	enter 4
0569+  0F29 D8          	push b
0570+  0F2A DA          	push d
0571+  0F2B             
0572+  0F2B FA FD FF    	lea d, [bp + -3]
0573+  0F2E 07 0C 0D    	call gets				; get number
0574+  0F31             
0575+  0F31 32          	mov bl, [d]
0576+  0F32 37          	mov bh, bl
0577+  0F33 33 01 00    	mov bl, [d + 1]
0578+  0F36 07 BA 0C    	call atoi				; convert to int in AL
0579+  0F39             
0580+  0F39 E7          	pop d
0581+  0F3A E5          	pop b
0582+  0F3B F9          	leave
0583+  0F3C 09          	ret
0584+  0F3D             
0585+  0F3D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  0F3D             ; input decimal number
0587+  0F3D             ; result in A
0588+  0F3D             ; 655'\0'
0589+  0F3D             ; low--------high
0590+  0F3D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  0F3D             scan_u16d:
0592+  0F3D F8 08 00    	enter 8
0593+  0F40 E2          	push si
0594+  0F41 D8          	push b
0595+  0F42 D9          	push c
0596+  0F43 DA          	push d
0597+  0F44 FA F9 FF    	lea d, [bp +- 7]
0598+  0F47 07 0C 0D    	call gets
0599+  0F4A 07 42 0C    	call strlen			; get string length in C
0600+  0F4D 7E          	dec c
0601+  0F4E FD 4E       	mov si, d
0602+  0F50 12          	mov a, c
0603+  0F51 FD 99       	shl a
0604+  0F53 3B A2 0C    	mov d, table_power
0605+  0F56 59          	add d, a
0606+  0F57 38 00 00    	mov c, 0
0607+  0F5A             mul_loop:
0608+  0F5A F6          	lodsb			; load ASCII to al
0609+  0F5B B9 00       	cmp al, 0
0610+  0F5D C6 70 0F    	je mul_exit
0611+  0F60 6F 30       	sub al, $30		; make into integer
0612+  0F62 22 00       	mov ah, 0
0613+  0F64 2A          	mov b, [d]
0614+  0F65 AC          	mul a, b			; result in B since it fits in 16bits
0615+  0F66 11          	mov a, b
0616+  0F67 28          	mov b, c
0617+  0F68 54          	add a, b
0618+  0F69 39          	mov c, a
0619+  0F6A 63 02 00    	sub d, 2
0620+  0F6D 0A 5A 0F    	jmp mul_loop
0621+  0F70             mul_exit:
0622+  0F70 12          	mov a, c
0623+  0F71 E7          	pop d
0624+  0F72 E6          	pop c
0625+  0F73 E5          	pop b
0626+  0F74 EF          	pop si
0627+  0F75 F9          	leave
0628+  0F76 09          	ret
0308   0F77             ; --- END INCLUDE BLOCK
0309   0F77             
0310   0F77             
0311   0F77             .end
tasm: Number of errors = 0
