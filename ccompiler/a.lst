0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; j
0011   0408 52 02 00      sub sp, 2 ; k
0012   040B 26 64 00      mov b, 100
0013   040E D7            push a
0014   040F 11            mov a, b
0015   0410 45 FF FF      mov [bp + -1], a ; i
0016   0413 E4            pop a
0017   0414 26 32 00      mov b, 50
0018   0417 D7            push a
0019   0418 11            mov a, b
0020   0419 45 FD FF      mov [bp + -3], a ; j
0021   041C E4            pop a
0022   041D 26 05 00      mov b, 5
0023   0420 D7            push a
0024   0421 11            mov a, b
0025   0422 45 FB FF      mov [bp + -5], a ; k
0026   0425 E4            pop a
0027   0426 2C FF FF      mov b, [bp + -1] ; i
0028   0429 D7            push a
0029   042A 11            mov a, b
0030   042B 2C FD FF      mov b, [bp + -3] ; j
0031   042E D7            push a
0032   042F 11            mov a, b
0033   0430 2C FB FF      mov b, [bp + -5] ; k
0034   0433 AE            div a, b
0035   0434 FD 78         mov g, a
0036   0436 11            mov a, b
0037   0437 FD 27         mov b, g
0038   0439 E4            pop a
0039   043A AE            div a, b
0040   043B FD 78         mov g, a
0041   043D 11            mov a, b
0042   043E FD 27         mov b, g
0043   0440 E4            pop a
0044   0441 FD AB         swp b
0045   0443 D8            push b
0046   0444 07 68 04      call printn
0047   0447 51 02 00      add sp, 2
0048   044A 26 00 00      mov b, 0
0049   044D F9            leave
0050   044E 05 0B         syscall sys_terminate_proc
0051   0450             scann:
0052   0450 D2            push bp
0053   0451 9B            mov bp, sp
0054   0452 52 02 00      sub sp, 2 ; m
0055   0455             
0056   0455             ; --- BEGIN INLINE ASM BLOCK
0057   0455 07 F3 07      call scan_u16d
0058   0458 45 FF FF      mov [bp + -1], a
0059   045B             ; --- END INLINE ASM BLOCK
0060   045B             
0061   045B FA 05 00      lea d, [bp + 5] ; n
0062   045E 2A            mov b, [d]
0063   045F D8            push b
0064   0460 2C FF FF      mov b, [bp + -1] ; m
0065   0463 E7            pop d
0066   0464 11            mov a, b
0067   0465 43            mov [d], a
0068   0466 F9            leave
0069   0467 09            ret
0070   0468             printn:
0071   0468 D2            push bp
0072   0469 9B            mov bp, sp
0073   046A             
0074   046A             ; --- BEGIN INLINE ASM BLOCK
0075   046A 17 05 00      mov a, [bp + 5]
0076   046D 07 1E 07      call print_u16d
0077   0470             ; --- END INLINE ASM BLOCK
0078   0470             
0079   0470 F9            leave
0080   0471 09            ret
0081   0472             print:
0082   0472 D2            push bp
0083   0473 9B            mov bp, sp
0084   0474             
0085   0474             ; --- BEGIN INLINE ASM BLOCK
0086   0474 17 05 00      mov a, [bp + 5]
0087   0477 3C            mov d, a
0088   0478 07 F5 06      call puts
0089   047B             ; --- END INLINE ASM BLOCK
0090   047B             
0091   047B F9            leave
0092   047C 09            ret
0093   047D             ; --- END TEXT BLOCK
0094   047D             
0095   047D             ; --- BEGIN DATA BLOCK
0096   047D             m1_data: 
0097   047D 7B 00 6F 00 .dw 123,111,123,
0097   0481 7B 00 
0098   0483 00 00 00 00 .fill 14, 0
0098   0487 00 00 00 00 
0098   048B 00 00 00 00 
0098   048F 00 00 
0099   0491 7D 04       m1: .dw m1_data
0100   0493             m2_data: 
0101   0493 00 00 01 00 .dw 0,1,2,
0101   0497 02 00 
0102   0499 00 00 00 00 .fill 14, 0
0102   049D 00 00 00 00 
0102   04A1 00 00 00 00 
0102   04A5 00 00 
0103   04A7 93 04       m2: .dw m2_data
0104   04A9             ; --- END DATA BLOCK
0105   04A9             
0106   04A9             ; --- BEGIN INCLUDE BLOCK
0107   04A9             .include "lib/stdio.asm"
0001+  04A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  04A9             ; stdio.s
0003+  04A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  04A9             .include "lib/string.asm"
0001++ 04A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 04A9             ; string.s
0003++ 04A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 04A9             
0005++ 04A9             
0006++ 04A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 04A9             ; strrev
0008++ 04A9             ; reverse a string
0009++ 04A9             ; D = string address
0010++ 04A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 04A9             ; 01234
0012++ 04A9             strrev:
0013++ 04A9 4B          	pusha
0014++ 04AA 07 F0 04    	call strlen	; length in C
0015++ 04AD 12          	mov a, c
0016++ 04AE AF 01 00    	cmp a, 1
0017++ 04B1 D0 CB 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 04B4 7D          	dec a
0019++ 04B5 FD 4E       	mov si, d	; beginning of string
0020++ 04B7 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 04B9 59          	add d, a	; end of string
0022++ 04BA 12          	mov a, c
0023++ 04BB FD 9B       	shr a		; divide by 2
0024++ 04BD 39          	mov c, a	; C now counts the steps
0025++ 04BE             strrev_L0:
0026++ 04BE 32          	mov bl, [d]	; save load right-side char into BL
0027++ 04BF F6          	lodsb		; load left-side char into AL; increase SI
0028++ 04C0 3E          	mov [d], al	; store left char into right side
0029++ 04C1 1B          	mov al, bl
0030++ 04C2 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 04C3 7E          	dec c
0032++ 04C4 7F          	dec d
0033++ 04C5 C2 00 00    	cmp c, 0
0034++ 04C8 C7 BE 04    	jne strrev_L0
0035++ 04CB             strrev_end:
0036++ 04CB 4C          	popa
0037++ 04CC 09          	ret
0038++ 04CD             	
0039++ 04CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 04CD             ; strchr
0041++ 04CD             ; search string in D for char in AL
0042++ 04CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 04CD             strchr:
0044++ 04CD             strchr_L0:
0045++ 04CD 32          	mov bl, [d]
0046++ 04CE C1 00       	cmp bl, 0
0047++ 04D0 C6 DB 04    	je strchr_end
0048++ 04D3 BA          	cmp al, bl
0049++ 04D4 C6 DB 04    	je strchr_end
0050++ 04D7 79          	inc d
0051++ 04D8 0A CD 04    	jmp strchr_L0
0052++ 04DB             strchr_end:
0053++ 04DB 1B          	mov al, bl
0054++ 04DC 09          	ret
0055++ 04DD             
0056++ 04DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 04DD             ; strstr
0058++ 04DD             ; find sub-string
0059++ 04DD             ; str1 in SI
0060++ 04DD             ; str2 in DI
0061++ 04DD             ; SI points to end of source string
0062++ 04DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 04DD             strstr:
0064++ 04DD DB          	push al
0065++ 04DE DA          	push d
0066++ 04DF E3          	push di
0067++ 04E0             strstr_loop:
0068++ 04E0 F3          	cmpsb					; compare a byte of the strings
0069++ 04E1 C7 EC 04    	jne strstr_ret
0070++ 04E4 FC 00 00    	lea d, [di + 0]
0071++ 04E7 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 04E9 C7 E0 04    	jne strstr_loop				; equal chars but not at end
0073++ 04EC             strstr_ret:
0074++ 04EC F0          	pop di
0075++ 04ED E7          	pop d
0076++ 04EE E8          	pop al
0077++ 04EF 09          	ret
0078++ 04F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 04F0             ; length of null terminated string
0080++ 04F0             ; result in C
0081++ 04F0             ; pointer in D
0082++ 04F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 04F0             strlen:
0084++ 04F0 DA          	push d
0085++ 04F1 38 00 00    	mov c, 0
0086++ 04F4             strlen_L1:
0087++ 04F4 BD 00       	cmp byte [d], 0
0088++ 04F6 C6 FE 04    	je strlen_ret
0089++ 04F9 79          	inc d
0090++ 04FA 78          	inc c
0091++ 04FB 0A F4 04    	jmp strlen_L1
0092++ 04FE             strlen_ret:
0093++ 04FE E7          	pop d
0094++ 04FF 09          	ret
0095++ 0500             
0096++ 0500             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0500             ; STRCMP
0098++ 0500             ; compare two strings
0099++ 0500             ; str1 in SI
0100++ 0500             ; str2 in DI
0101++ 0500             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0500             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0500             strcmp:
0104++ 0500 DB          	push al
0105++ 0501 DA          	push d
0106++ 0502 E3          	push di
0107++ 0503 E2          	push si
0108++ 0504             strcmp_loop:
0109++ 0504 F3          	cmpsb					; compare a byte of the strings
0110++ 0505 C7 10 05    	jne strcmp_ret
0111++ 0508 FB FF FF    	lea d, [si +- 1]
0112++ 050B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 050D C7 04 05    	jne strcmp_loop				; equal chars but not at end
0114++ 0510             strcmp_ret:
0115++ 0510 EF          	pop si
0116++ 0511 F0          	pop di
0117++ 0512 E7          	pop d
0118++ 0513 E8          	pop al
0119++ 0514 09          	ret
0120++ 0515             
0121++ 0515             
0122++ 0515             ; STRCPY
0123++ 0515             ; copy null terminated string from SI to DI
0124++ 0515             ; source in SI
0125++ 0515             ; destination in DI
0126++ 0515             strcpy:
0127++ 0515 E2          	push si
0128++ 0516 E3          	push di
0129++ 0517 DB          	push al
0130++ 0518             strcpy_L1:
0131++ 0518 F6          	lodsb
0132++ 0519 F7          	stosb
0133++ 051A B9 00       	cmp al, 0
0134++ 051C C7 18 05    	jne strcpy_L1
0135++ 051F             strcpy_end:
0136++ 051F E8          	pop al
0137++ 0520 F0          	pop di
0138++ 0521 EF          	pop si
0139++ 0522 09          	ret
0140++ 0523             
0141++ 0523             ; STRCAT
0142++ 0523             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0523             ; source in SI
0144++ 0523             ; destination in DI
0145++ 0523             strcat:
0146++ 0523 E2          	push si
0147++ 0524 E3          	push di
0148++ 0525 D7          	push a
0149++ 0526 DA          	push d
0150++ 0527 50          	mov a, di
0151++ 0528 3C          	mov d, a
0152++ 0529             strcat_goto_end_L1:
0153++ 0529 BD 00       	cmp byte[d], 0
0154++ 052B C6 32 05    	je strcat_start
0155++ 052E 79          	inc d
0156++ 052F 0A 29 05    	jmp strcat_goto_end_L1
0157++ 0532             strcat_start:
0158++ 0532 FD 50       	mov di, d
0159++ 0534             strcat_L1:
0160++ 0534 F6          	lodsb
0161++ 0535 F7          	stosb
0162++ 0536 B9 00       	cmp al, 0
0163++ 0538 C7 34 05    	jne strcat_L1
0164++ 053B             strcat_end:
0165++ 053B E7          	pop d
0166++ 053C E4          	pop a
0167++ 053D F0          	pop di
0168++ 053E EF          	pop si
0169++ 053F 09          	ret
0005+  0540             
0006+  0540 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0544 34 35 36 37 
0006+  0548 38 39 41 42 
0006+  054C 43 44 45 46 
0007+  0550 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0554 1B 5B 48 00 
0008+  0558             
0009+  0558 01 00       table_power:.dw 1
0010+  055A 0A 00       			.dw 10
0011+  055C 64 00       			.dw 100
0012+  055E E8 03       			.dw 1000
0013+  0560 10 27       			.dw 10000
0014+  0562             
0015+  0562             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  0562             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  0562             ; ASCII in BL
0018+  0562             ; result in AL
0019+  0562             ; ascii for F = 0100 0110
0020+  0562             ; ascii for 9 = 0011 1001
0021+  0562             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  0562             hex_ascii_encode:
0023+  0562 1B          	mov al, bl
0024+  0563 93 40       	test al, $40				; test if letter or number
0025+  0565 C7 6B 05    	jnz hex_letter
0026+  0568 87 0F       	and al, $0F				; get number
0027+  056A 09          	ret
0028+  056B             hex_letter:
0029+  056B 87 0F       	and al, $0F				; get letter
0030+  056D 6A 09       	add al, 9
0031+  056F 09          	ret
0032+  0570             
0033+  0570             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  0570             ; ATOI
0035+  0570             ; 2 letter hex string in B
0036+  0570             ; 8bit integer returned in AL
0037+  0570             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0570             atoi:
0039+  0570 D8          	push b
0040+  0571 07 62 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0574 30          	mov bl, bh
0042+  0575 DB          	push al					; save a
0043+  0576 07 62 05    	call hex_ascii_encode
0044+  0579 EA          	pop bl	
0045+  057A FD 9E 04    	shl al, 4
0046+  057D 8C          	or al, bl
0047+  057E E5          	pop b
0048+  057F 09          	ret	
0049+  0580             
0050+  0580             
0051+  0580             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  0580             ; printf
0053+  0580             ; no need for explanations!
0054+  0580             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0580             printf:
0056+  0580 09          	ret
0057+  0581             
0058+  0581             
0059+  0581             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  0581             ; scanf
0061+  0581             ; no need for explanations!
0062+  0581             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  0581             scanf:
0064+  0581 09          	ret
0065+  0582             
0066+  0582             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  0582             ; ITOA
0068+  0582             ; 8bit value in BL
0069+  0582             ; 2 byte ASCII result in A
0070+  0582             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  0582             itoa:
0072+  0582 DA          	push d
0073+  0583 D8          	push b
0074+  0584 A7 00       	mov bh, 0
0075+  0586 FD A4 04    	shr bl, 4	
0076+  0589 74          	mov d, b
0077+  058A 1F 40 05    	mov al, [d + s_hex_digits]
0078+  058D 23          	mov ah, al
0079+  058E             	
0080+  058E E5          	pop b
0081+  058F D8          	push b
0082+  0590 A7 00       	mov bh, 0
0083+  0592 FD 87 0F    	and bl, $0F
0084+  0595 74          	mov d, b
0085+  0596 1F 40 05    	mov al, [d + s_hex_digits]
0086+  0599 E5          	pop b
0087+  059A E7          	pop d
0088+  059B 09          	ret
0089+  059C             
0090+  059C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  059C             ; HEX STRING TO BINARY
0092+  059C             ; di = destination address
0093+  059C             ; si = source
0094+  059C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  059C             hex_to_int:
0096+  059C             hex_to_int_L1:
0097+  059C F6          	lodsb					; load from [SI] to AL
0098+  059D B9 00       	cmp al, 0				; check if ASCII 0
0099+  059F C6 AC 05    	jz hex_to_int_ret
0100+  05A2 36          	mov bh, al
0101+  05A3 F6          	lodsb
0102+  05A4 2F          	mov bl, al
0103+  05A5 07 70 05    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  05A8 F7          	stosb					; store AL to [DI]
0105+  05A9 0A 9C 05    	jmp hex_to_int_L1
0106+  05AC             hex_to_int_ret:
0107+  05AC 09          	ret		
0108+  05AD             
0109+  05AD             
0110+  05AD             
0111+  05AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  05AD             ; GETCHAR
0113+  05AD             ; char in ah
0114+  05AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  05AD             getchar:
0116+  05AD DB          	push al
0117+  05AE             getchar_retry:
0118+  05AE FD 0C       	sti
0119+  05B0 19 01       	mov al, 1
0120+  05B2 05 03       	syscall sys_io			; receive in AH
0121+  05B4 B9 00       	cmp al, 0			; check if any char was receive
0122+  05B6 C6 AE 05    	je getchar_retry
0123+  05B9 E8          	pop al
0124+  05BA 09          	ret
0125+  05BB             
0126+  05BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  05BB             ; PUTCHAR
0128+  05BB             ; char in ah
0129+  05BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  05BB             putchar:
0131+  05BB D7          	push a
0132+  05BC 19 00       	mov al, 0
0133+  05BE 05 03       	syscall sys_io			; char in AH
0134+  05C0 E4          	pop a
0135+  05C1 09          	ret
0136+  05C2             
0137+  05C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  05C2             ;; INPUT A STRING
0139+  05C2             ;; terminates with null
0140+  05C2             ;; pointer in D
0141+  05C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  05C2             gets:
0143+  05C2 D7          	push a
0144+  05C3 DA          	push d
0145+  05C4             gets_loop:
0146+  05C4 FD 0C       	sti
0147+  05C6 19 01       	mov al, 1
0148+  05C8 05 03       	syscall sys_io			; receive in AH
0149+  05CA B9 00       	cmp al, 0				; check error code (AL)
0150+  05CC C6 C4 05    	je gets_loop			; if no char received, retry
0151+  05CF             
0152+  05CF 76 1B       	cmp ah, 27
0153+  05D1 C6 F2 05    	je gets_telnet_escape
0154+  05D4 76 0A       	cmp ah, $0A				; LF
0155+  05D6 C6 4B 06    	je gets_end
0156+  05D9 76 0D       	cmp ah, $0D				; CR
0157+  05DB C6 4B 06    	je gets_end
0158+  05DE 76 5C       	cmp ah, $5C				; '\\'
0159+  05E0 C6 22 06    	je gets_escape
0160+  05E3             	
0161+  05E3 76 08       	cmp ah, $08			; check for backspace
0162+  05E5 C6 EE 05    	je gets_backspace
0163+  05E8             
0164+  05E8 1A          	mov al, ah
0165+  05E9 3E          	mov [d], al
0166+  05EA 79          	inc d
0167+  05EB 0A C4 05    	jmp gets_loop
0168+  05EE             gets_backspace:
0169+  05EE 7F          	dec d
0170+  05EF 0A C4 05    	jmp gets_loop
0171+  05F2             gets_telnet_escape:
0172+  05F2 FD 0C       	sti
0173+  05F4 19 01       	mov al, 1
0174+  05F6 05 03       	syscall sys_io				; receive in AH without echo
0175+  05F8 B9 00       	cmp al, 0					; check error code (AL)
0176+  05FA C6 F2 05    	je gets_telnet_escape		; if no char received, retry
0177+  05FD 76 5B       	cmp ah, '['
0178+  05FF C7 C4 05    	jne gets_loop
0179+  0602             gets_telnet_escape_phase2:
0180+  0602 FD 0C       	sti
0181+  0604 19 01       	mov al, 1
0182+  0606 05 03       	syscall sys_io					; receive in AH without echo
0183+  0608 B9 00       	cmp al, 0						; check error code (AL)
0184+  060A C6 02 06    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  060D 76 44       	cmp ah, 'D'
0186+  060F C6 1A 06    	je gets_left_arrow
0187+  0612 76 43       	cmp ah, 'C'
0188+  0614 C6 1E 06    	je gets_right_arrow
0189+  0617 0A C4 05    	jmp gets_loop
0190+  061A             gets_left_arrow:
0191+  061A 7F          	dec d
0192+  061B 0A C4 05    	jmp gets_loop
0193+  061E             gets_right_arrow:
0194+  061E 79          	inc d
0195+  061F 0A C4 05    	jmp gets_loop
0196+  0622             gets_escape:
0197+  0622 FD 0C       	sti
0198+  0624 19 01       	mov al, 1
0199+  0626 05 03       	syscall sys_io			; receive in AH
0200+  0628 B9 00       	cmp al, 0				; check error code (AL)
0201+  062A C6 22 06    	je gets_escape			; if no char received, retry
0202+  062D 76 6E       	cmp ah, 'n'
0203+  062F C6 3D 06    	je gets_LF
0204+  0632 76 72       	cmp ah, 'r'
0205+  0634 C6 44 06    	je gets_CR
0206+  0637 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0638 3E          	mov [d], al
0208+  0639 79          	inc d
0209+  063A 0A C4 05    	jmp gets_loop
0210+  063D             gets_LF:
0211+  063D 19 0A       	mov al, $0A
0212+  063F 3E          	mov [d], al
0213+  0640 79          	inc d
0214+  0641 0A C4 05    	jmp gets_loop
0215+  0644             gets_CR:
0216+  0644 19 0D       	mov al, $0D
0217+  0646 3E          	mov [d], al
0218+  0647 79          	inc d
0219+  0648 0A C4 05    	jmp gets_loop
0220+  064B             gets_end:
0221+  064B 19 00       	mov al, 0
0222+  064D 3E          	mov [d], al				; terminate string
0223+  064E E7          	pop d
0224+  064F E4          	pop a
0225+  0650 09          	ret
0226+  0651             
0227+  0651             
0228+  0651             
0229+  0651             
0230+  0651             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  0651             ;; INPUT TEXT
0232+  0651             ;; terminated with CTRL+D
0233+  0651             ;; pointer in D
0234+  0651             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  0651             gettxt:
0236+  0651 D7          	push a
0237+  0652 DA          	push d
0238+  0653             gettxt_loop:
0239+  0653 19 01       	mov al, 1
0240+  0655 05 03       	syscall sys_io			; receive in AH
0241+  0657 B9 00       	cmp al, 0				; check error code (AL)
0242+  0659 C6 53 06    	je gettxt_loop		; if no char received, retry
0243+  065C 76 04       	cmp ah, 4			; EOT
0244+  065E C6 9C 06    	je gettxt_end
0245+  0661 76 08       	cmp ah, $08			; check for backspace
0246+  0663 C6 98 06    	je gettxt_backspace
0247+  0666 76 5C       	cmp ah, $5C				; '\\'
0248+  0668 C6 71 06    	je gettxt_escape
0249+  066B 1A          	mov al, ah
0250+  066C 3E          	mov [d], al
0251+  066D 79          	inc d
0252+  066E 0A 53 06    	jmp gettxt_loop
0253+  0671             gettxt_escape:
0254+  0671 19 01       	mov al, 1
0255+  0673 05 03       	syscall sys_io			; receive in AH
0256+  0675 B9 00       	cmp al, 0				; check error code (AL)
0257+  0677 C6 71 06    	je gettxt_escape		; if no char received, retry
0258+  067A 76 6E       	cmp ah, 'n'
0259+  067C C6 8A 06    	je gettxt_LF
0260+  067F 76 72       	cmp ah, 'r'
0261+  0681 C6 91 06    	je gettxt_CR
0262+  0684 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0685 3E          	mov [d], al
0264+  0686 79          	inc d
0265+  0687 0A 53 06    	jmp gettxt_loop
0266+  068A             gettxt_LF:
0267+  068A 19 0A       	mov al, $0A
0268+  068C 3E          	mov [d], al
0269+  068D 79          	inc d
0270+  068E 0A 53 06    	jmp gettxt_loop
0271+  0691             gettxt_CR:
0272+  0691 19 0D       	mov al, $0D
0273+  0693 3E          	mov [d], al
0274+  0694 79          	inc d
0275+  0695 0A 53 06    	jmp gettxt_loop
0276+  0698             gettxt_backspace:
0277+  0698 7F          	dec d
0278+  0699 0A 53 06    	jmp gettxt_loop
0279+  069C             gettxt_end:
0280+  069C 19 00       	mov al, 0
0281+  069E 3E          	mov [d], al				; terminate string
0282+  069F E7          	pop d
0283+  06A0 E4          	pop a
0284+  06A1 09          	ret
0285+  06A2             
0286+  06A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  06A2             ; PRINT NEW LINE
0288+  06A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  06A2             printnl:
0290+  06A2 D7          	push a
0291+  06A3 10 00 0A    	mov a, $0A00
0292+  06A6 05 03       	syscall sys_io
0293+  06A8 10 00 0D    	mov a, $0D00
0294+  06AB 05 03       	syscall sys_io
0295+  06AD E4          	pop a
0296+  06AE 09          	ret
0297+  06AF             
0298+  06AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  06AF             ; strtoint
0300+  06AF             ; 4 digit hex string number in d
0301+  06AF             ; integer returned in A
0302+  06AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  06AF             strtointx:
0304+  06AF D8          	push b
0305+  06B0 32          	mov bl, [d]
0306+  06B1 37          	mov bh, bl
0307+  06B2 33 01 00    	mov bl, [d + 1]
0308+  06B5 07 70 05    	call atoi				; convert to int in AL
0309+  06B8 23          	mov ah, al				; move to AH
0310+  06B9 33 02 00    	mov bl, [d + 2]
0311+  06BC 37          	mov bh, bl
0312+  06BD 33 03 00    	mov bl, [d + 3]
0313+  06C0 07 70 05    	call atoi				; convert to int in AL
0314+  06C3 E5          	pop b
0315+  06C4 09          	ret
0316+  06C5             
0317+  06C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  06C5             ; strtoint
0319+  06C5             ; 5 digit base10 string number in d
0320+  06C5             ; integer returned in A
0321+  06C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  06C5             strtoint:
0323+  06C5 E2          	push si
0324+  06C6 D8          	push b
0325+  06C7 D9          	push c
0326+  06C8 DA          	push d
0327+  06C9 07 F0 04    	call strlen			; get string length in C
0328+  06CC 7E          	dec c
0329+  06CD FD 4E       	mov si, d
0330+  06CF 12          	mov a, c
0331+  06D0 FD 99       	shl a
0332+  06D2 3B 58 05    	mov d, table_power
0333+  06D5 59          	add d, a
0334+  06D6 38 00 00    	mov c, 0
0335+  06D9             strtoint_L0:
0336+  06D9 F6          	lodsb			; load ASCII to al
0337+  06DA B9 00       	cmp al, 0
0338+  06DC C6 EF 06    	je strtoint_end
0339+  06DF 6F 30       	sub al, $30		; make into integer
0340+  06E1 22 00       	mov ah, 0
0341+  06E3 2A          	mov b, [d]
0342+  06E4 AC          	mul a, b			; result in B since it fits in 16bits
0343+  06E5 11          	mov a, b
0344+  06E6 28          	mov b, c
0345+  06E7 54          	add a, b
0346+  06E8 39          	mov c, a
0347+  06E9 63 02 00    	sub d, 2
0348+  06EC 0A D9 06    	jmp strtoint_L0
0349+  06EF             strtoint_end:
0350+  06EF 12          	mov a, c
0351+  06F0 E7          	pop d
0352+  06F1 E6          	pop c
0353+  06F2 E5          	pop b
0354+  06F3 EF          	pop si
0355+  06F4 09          	ret
0356+  06F5             
0357+  06F5             
0358+  06F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  06F5             ; PRINT NULL TERMINATED STRING
0360+  06F5             ; pointer in D
0361+  06F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  06F5             puts:
0363+  06F5 D7          	push a
0364+  06F6 DA          	push d
0365+  06F7             puts_L1:
0366+  06F7 1E          	mov al, [d]
0367+  06F8 B9 00       	cmp al, 0
0368+  06FA C6 06 07    	jz puts_END
0369+  06FD 23          	mov ah, al
0370+  06FE 19 00       	mov al, 0
0371+  0700 05 03       	syscall sys_io
0372+  0702 79          	inc d
0373+  0703 0A F7 06    	jmp puts_L1
0374+  0706             puts_END:
0375+  0706 E7          	pop d
0376+  0707 E4          	pop a
0377+  0708 09          	ret
0378+  0709             
0379+  0709             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0709             ; PRINT N SIZE STRING
0381+  0709             ; pointer in D
0382+  0709             ; size in C
0383+  0709             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0709             putsn:
0385+  0709 DB          	push al
0386+  070A DA          	push d
0387+  070B D9          	push c
0388+  070C             putsn_L0:
0389+  070C 1E          	mov al, [d]
0390+  070D 23          	mov ah, al
0391+  070E 19 00       	mov al, 0
0392+  0710 05 03       	syscall sys_io
0393+  0712 79          	inc d
0394+  0713 7E          	dec c	
0395+  0714 C2 00 00    	cmp c, 0
0396+  0717 C7 0C 07    	jne putsn_L0
0397+  071A             putsn_end:
0398+  071A E6          	pop c
0399+  071B E7          	pop d
0400+  071C E8          	pop al
0401+  071D 09          	ret
0402+  071E             
0403+  071E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  071E             ; print 16bit decimal number
0405+  071E             ; input number in A
0406+  071E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  071E             print_u16d:
0408+  071E D7          	push a
0409+  071F D8          	push b
0410+  0720 26 10 27    	mov b, 10000
0411+  0723 AE          	div a, b			; get 10000 coeff.
0412+  0724 07 4A 07    	call print_number
0413+  0727 11          	mov a, b
0414+  0728 26 E8 03    	mov b, 1000
0415+  072B AE          	div a, b			; get 10000 coeff.
0416+  072C 07 4A 07    	call print_number
0417+  072F 11          	mov a, b
0418+  0730 26 64 00    	mov b, 100
0419+  0733 AE          	div a, b
0420+  0734 07 4A 07    	call print_number
0421+  0737 11          	mov a, b
0422+  0738 26 0A 00    	mov b, 10
0423+  073B AE          	div a, b
0424+  073C 07 4A 07    	call print_number
0425+  073F 11          	mov a, b
0426+  0740 6A 30       	add al, $30
0427+  0742 23          	mov ah, al
0428+  0743 19 00       	mov al, 0
0429+  0745 05 03       	syscall sys_io	; print coeff
0430+  0747 E5          	pop b
0431+  0748 E4          	pop a
0432+  0749 09          	ret
0433+  074A             
0434+  074A             
0435+  074A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  074A             ; if A == 0, print space
0437+  074A             ; else print A
0438+  074A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  074A             print_number:
0440+  074A 6A 30       	add al, $30
0441+  074C 23          	mov ah, al
0442+  074D 07 BB 05    	call putchar
0443+  0750 09          	ret
0444+  0751             
0445+  0751             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  0751             ; PRINT 16BIT HEX INTEGER
0447+  0751             ; integer value in reg B
0448+  0751             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0751             print_u16x:
0450+  0751 D7          	push a
0451+  0752 D8          	push b
0452+  0753 DD          	push bl
0453+  0754 30          	mov bl, bh
0454+  0755 07 82 05    	call itoa				; convert bh to char in A
0455+  0758 2F          	mov bl, al				; save al
0456+  0759 19 00       	mov al, 0
0457+  075B 05 03       	syscall sys_io				; display AH
0458+  075D 24          	mov ah, bl				; retrieve al
0459+  075E 19 00       	mov al, 0
0460+  0760 05 03       	syscall sys_io				; display AL
0461+  0762             
0462+  0762 EA          	pop bl
0463+  0763 07 82 05    	call itoa				; convert bh to char in A
0464+  0766 2F          	mov bl, al				; save al
0465+  0767 19 00       	mov al, 0
0466+  0769 05 03       	syscall sys_io				; display AH
0467+  076B 24          	mov ah, bl				; retrieve al
0468+  076C 19 00       	mov al, 0
0469+  076E 05 03       	syscall sys_io				; display AL
0470+  0770             
0471+  0770 E5          	pop b
0472+  0771 E4          	pop a
0473+  0772 09          	ret
0474+  0773             
0475+  0773             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0773             ; INPUT 16BIT HEX INTEGER
0477+  0773             ; read 16bit integer into A
0478+  0773             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0773             scan_u16x:
0480+  0773 F8 10 00    	enter 16
0481+  0776 D8          	push b
0482+  0777 DA          	push d
0483+  0778             
0484+  0778 FA F1 FF    	lea d, [bp + -15]
0485+  077B 07 C2 05    	call gets				; get number
0486+  077E             
0487+  077E 32          	mov bl, [d]
0488+  077F 37          	mov bh, bl
0489+  0780 33 01 00    	mov bl, [d + 1]
0490+  0783 07 70 05    	call atoi				; convert to int in AL
0491+  0786 23          	mov ah, al				; move to AH
0492+  0787             
0493+  0787 33 02 00    	mov bl, [d + 2]
0494+  078A 37          	mov bh, bl
0495+  078B 33 03 00    	mov bl, [d + 3]
0496+  078E 07 70 05    	call atoi				; convert to int in AL
0497+  0791             
0498+  0791 E7          	pop d
0499+  0792 E5          	pop b
0500+  0793 F9          	leave
0501+  0794 09          	ret
0502+  0795             
0503+  0795             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0795             ; PRINT 8bit HEX INTEGER
0505+  0795             ; integer value in reg bl
0506+  0795             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0795             print_u8x:
0508+  0795 D7          	push a
0509+  0796 DD          	push bl
0510+  0797             
0511+  0797 07 82 05    	call itoa				; convert bl to char in A
0512+  079A 2F          	mov bl, al				; save al
0513+  079B 19 00       	mov al, 0
0514+  079D 05 03       	syscall sys_io				; display AH
0515+  079F 24          	mov ah, bl				; retrieve al
0516+  07A0 19 00       	mov al, 0
0517+  07A2 05 03       	syscall sys_io				; display AL
0518+  07A4             
0519+  07A4 EA          	pop bl
0520+  07A5 E4          	pop a
0521+  07A6 09          	ret
0522+  07A7             
0523+  07A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  07A7             ; print 8bit decimal unsigned number
0525+  07A7             ; input number in AL
0526+  07A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  07A7             print_u8d:
0528+  07A7 D7          	push a
0529+  07A8 D8          	push b
0530+  07A9             
0531+  07A9 22 00       	mov ah, 0
0532+  07AB 26 64 00    	mov b, 100
0533+  07AE AE          	div a, b
0534+  07AF D8          	push b			; save remainder
0535+  07B0 B9 00       	cmp al, 0
0536+  07B2 C6 BC 07    	je skip100
0537+  07B5 6A 30       	add al, $30
0538+  07B7 23          	mov ah, al
0539+  07B8 19 00       	mov al, 0
0540+  07BA 05 03       	syscall sys_io	; print coeff
0541+  07BC             skip100:
0542+  07BC E4          	pop a
0543+  07BD 22 00       	mov ah, 0
0544+  07BF 26 0A 00    	mov b, 10
0545+  07C2 AE          	div a, b
0546+  07C3 D8          	push b			; save remainder
0547+  07C4 B9 00       	cmp al, 0
0548+  07C6 C6 D0 07    	je skip10
0549+  07C9 6A 30       	add al, $30
0550+  07CB 23          	mov ah, al
0551+  07CC 19 00       	mov al, 0
0552+  07CE 05 03       	syscall sys_io	; print coeff
0553+  07D0             skip10:
0554+  07D0 E4          	pop a
0555+  07D1 1B          	mov al, bl
0556+  07D2 6A 30       	add al, $30
0557+  07D4 23          	mov ah, al
0558+  07D5 19 00       	mov al, 0
0559+  07D7 05 03       	syscall sys_io	; print coeff
0560+  07D9 E5          	pop b
0561+  07DA E4          	pop a
0562+  07DB 09          	ret
0563+  07DC             
0564+  07DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  07DC             ; INPUT 8BIT HEX INTEGER
0566+  07DC             ; read 8bit integer into AL
0567+  07DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  07DC             scan_u8x:
0569+  07DC F8 04 00    	enter 4
0570+  07DF D8          	push b
0571+  07E0 DA          	push d
0572+  07E1             
0573+  07E1 FA FD FF    	lea d, [bp + -3]
0574+  07E4 07 C2 05    	call gets				; get number
0575+  07E7             
0576+  07E7 32          	mov bl, [d]
0577+  07E8 37          	mov bh, bl
0578+  07E9 33 01 00    	mov bl, [d + 1]
0579+  07EC 07 70 05    	call atoi				; convert to int in AL
0580+  07EF             
0581+  07EF E7          	pop d
0582+  07F0 E5          	pop b
0583+  07F1 F9          	leave
0584+  07F2 09          	ret
0585+  07F3             
0586+  07F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  07F3             ; input decimal number
0588+  07F3             ; result in A
0589+  07F3             ; 655'\0'
0590+  07F3             ; low--------high
0591+  07F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  07F3             scan_u16d:
0593+  07F3 F8 08 00    	enter 8
0594+  07F6 E2          	push si
0595+  07F7 D8          	push b
0596+  07F8 D9          	push c
0597+  07F9 DA          	push d
0598+  07FA FA F9 FF    	lea d, [bp +- 7]
0599+  07FD 07 C2 05    	call gets
0600+  0800 07 F0 04    	call strlen			; get string length in C
0601+  0803 7E          	dec c
0602+  0804 FD 4E       	mov si, d
0603+  0806 12          	mov a, c
0604+  0807 FD 99       	shl a
0605+  0809 3B 58 05    	mov d, table_power
0606+  080C 59          	add d, a
0607+  080D 38 00 00    	mov c, 0
0608+  0810             mul_loop:
0609+  0810 F6          	lodsb			; load ASCII to al
0610+  0811 B9 00       	cmp al, 0
0611+  0813 C6 26 08    	je mul_exit
0612+  0816 6F 30       	sub al, $30		; make into integer
0613+  0818 22 00       	mov ah, 0
0614+  081A 2A          	mov b, [d]
0615+  081B AC          	mul a, b			; result in B since it fits in 16bits
0616+  081C 11          	mov a, b
0617+  081D 28          	mov b, c
0618+  081E 54          	add a, b
0619+  081F 39          	mov c, a
0620+  0820 63 02 00    	sub d, 2
0621+  0823 0A 10 08    	jmp mul_loop
0622+  0826             mul_exit:
0623+  0826 12          	mov a, c
0624+  0827 E7          	pop d
0625+  0828 E6          	pop c
0626+  0829 E5          	pop b
0627+  082A EF          	pop si
0628+  082B F9          	leave
0629+  082C 09          	ret
0108   082D             ; --- END INCLUDE BLOCK
0109   082D             
0110   082D             
0111   082D             .end
tasm: Number of errors = 0
