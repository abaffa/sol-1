0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 26 51 07      mov b, __string_0 ; "\n"
0011   0405 FD AB         swp b
0012   0407 D8            push b
0013   0408 07 46 07      call print
0014   040B 51 02 00      add sp, 2
0015   040E 26 01 00      mov b, 1
0016   0411 D7            push a
0017   0412 11            mov a, b
0018   0413 26 00 00      mov b, 0
0019   0416 B0            cmp a, b
0020   0417 0E            lodflgs
0021   0418 2F            mov bl, al
0022   0419 FD 78         mov g, a
0023   041B FD A2 03      shr al, 3
0024   041E FD A4 02      shr bl, 2
0025   0421 FD 87 01      and bl, %00000001
0026   0424 90            xor al, bl
0027   0425 FD 27         mov b, g
0028   0427 FD 87 01      and bl, %00000001
0029   042A 8C            or al, bl
0030   042B 8F 01         xor al, %00000001 ; > (signed)
0031   042D 22 00         mov ah, 0
0032   042F 27            mov b, a
0033   0430 E4            pop a
0034   0431 FD AB         swp b
0035   0433 D8            push b
0036   0434 07 64 05      call print_num
0037   0437 51 02 00      add sp, 2
0038   043A 26 51 07      mov b, __string_0 ; "\n"
0039   043D FD AB         swp b
0040   043F D8            push b
0041   0440 07 46 07      call print
0042   0443 51 02 00      add sp, 2
0043   0446 26 FF 7F      mov b, 32767
0044   0449 D7            push a
0045   044A 11            mov a, b
0046   044B 26 00 00      mov b, 0
0047   044E B0            cmp a, b
0048   044F 0E            lodflgs
0049   0450 2F            mov bl, al
0050   0451 FD 78         mov g, a
0051   0453 FD A2 03      shr al, 3
0052   0456 FD A4 02      shr bl, 2
0053   0459 FD 87 01      and bl, %00000001
0054   045C 90            xor al, bl
0055   045D FD 27         mov b, g
0056   045F FD 87 01      and bl, %00000001
0057   0462 8C            or al, bl
0058   0463 8F 01         xor al, %00000001 ; > (signed)
0059   0465 22 00         mov ah, 0
0060   0467 27            mov b, a
0061   0468 E4            pop a
0062   0469 FD AB         swp b
0063   046B D8            push b
0064   046C 07 64 05      call print_num
0065   046F 51 02 00      add sp, 2
0066   0472 26 51 07      mov b, __string_0 ; "\n"
0067   0475 FD AB         swp b
0068   0477 D8            push b
0069   0478 07 46 07      call print
0070   047B 51 02 00      add sp, 2
0071   047E 26 01 00      mov b, 1
0072   0481 D7            push a
0073   0482 11            mov a, b
0074   0483 26 01 00      mov b, 1
0075   0486 B0            cmp a, b
0076   0487 0E            lodflgs
0077   0488 2F            mov bl, al
0078   0489 FD 78         mov g, a
0079   048B FD A2 03      shr al, 3
0080   048E FD A4 02      shr bl, 2
0081   0491 FD 87 01      and bl, %00000001
0082   0494 90            xor al, bl
0083   0495 FD 27         mov b, g
0084   0497 FD 87 01      and bl, %00000001
0085   049A 8C            or al, bl
0086   049B 8F 01         xor al, %00000001 ; > (signed)
0087   049D 22 00         mov ah, 0
0088   049F 27            mov b, a
0089   04A0 E4            pop a
0090   04A1 FD AB         swp b
0091   04A3 D8            push b
0092   04A4 07 64 05      call print_num
0093   04A7 51 02 00      add sp, 2
0094   04AA 26 51 07      mov b, __string_0 ; "\n"
0095   04AD FD AB         swp b
0096   04AF D8            push b
0097   04B0 07 46 07      call print
0098   04B3 51 02 00      add sp, 2
0099   04B6 26 01 00      mov b, 1
0100   04B9 D7            push a
0101   04BA 11            mov a, b
0102   04BB 26 0A 00      mov b, 10
0103   04BE B0            cmp a, b
0104   04BF 0E            lodflgs
0105   04C0 2F            mov bl, al
0106   04C1 FD 78         mov g, a
0107   04C3 FD A2 03      shr al, 3
0108   04C6 FD A4 02      shr bl, 2
0109   04C9 FD 87 01      and bl, %00000001
0110   04CC 90            xor al, bl
0111   04CD FD 27         mov b, g
0112   04CF FD 87 01      and bl, %00000001
0113   04D2 8C            or al, bl
0114   04D3 8F 01         xor al, %00000001 ; > (signed)
0115   04D5 22 00         mov ah, 0
0116   04D7 27            mov b, a
0117   04D8 E4            pop a
0118   04D9 FD AB         swp b
0119   04DB D8            push b
0120   04DC 07 64 05      call print_num
0121   04DF 51 02 00      add sp, 2
0122   04E2 26 51 07      mov b, __string_0 ; "\n"
0123   04E5 FD AB         swp b
0124   04E7 D8            push b
0125   04E8 07 46 07      call print
0126   04EB 51 02 00      add sp, 2
0127   04EE 26 01 00      mov b, 1
0128   04F1 D7            push a
0129   04F2 11            mov a, b
0130   04F3 26 02 00      mov b, 2
0131   04F6 B0            cmp a, b
0132   04F7 0E            lodflgs
0133   04F8 2F            mov bl, al
0134   04F9 FD 78         mov g, a
0135   04FB FD A2 03      shr al, 3
0136   04FE FD A4 02      shr bl, 2
0137   0501 FD 87 01      and bl, %00000001
0138   0504 90            xor al, bl
0139   0505 FD 27         mov b, g
0140   0507 FD 87 01      and bl, %00000001
0141   050A 8C            or al, bl
0142   050B 8F 01         xor al, %00000001 ; > (signed)
0143   050D 22 00         mov ah, 0
0144   050F 27            mov b, a
0145   0510 E4            pop a
0146   0511 FD AB         swp b
0147   0513 D8            push b
0148   0514 07 64 05      call print_num
0149   0517 51 02 00      add sp, 2
0150   051A 26 51 07      mov b, __string_0 ; "\n"
0151   051D FD AB         swp b
0152   051F D8            push b
0153   0520 07 46 07      call print
0154   0523 51 02 00      add sp, 2
0155   0526 26 01 00      mov b, 1
0156   0529 D7            push a
0157   052A 11            mov a, b
0158   052B 26 0A 00      mov b, 10
0159   052E B0            cmp a, b
0160   052F 0E            lodflgs
0161   0530 2F            mov bl, al
0162   0531 FD 78         mov g, a
0163   0533 FD A2 03      shr al, 3
0164   0536 FD A4 02      shr bl, 2
0165   0539 FD 87 01      and bl, %00000001
0166   053C 90            xor al, bl
0167   053D FD 27         mov b, g
0168   053F FD 87 01      and bl, %00000001
0169   0542 8C            or al, bl
0170   0543 8F 01         xor al, %00000001 ; > (signed)
0171   0545 22 00         mov ah, 0
0172   0547 27            mov b, a
0173   0548 E4            pop a
0174   0549 FD AB         swp b
0175   054B D8            push b
0176   054C 07 64 05      call print_num
0177   054F 51 02 00      add sp, 2
0178   0552 26 51 07      mov b, __string_0 ; "\n"
0179   0555 FD AB         swp b
0180   0557 D8            push b
0181   0558 07 46 07      call print
0182   055B 51 02 00      add sp, 2
0183   055E 26 00 00      mov b, 0
0184   0561 F9            leave
0185   0562 05 0B         syscall sys_terminate_proc
0186   0564             
0187   0564             print_num:
0188   0564 D2            push bp
0189   0565 9B            mov bp, sp
0190   0566 52 05 00      sub sp, 5 ; digits
0191   0569 52 02 00      sub sp, 2 ; i
0192   056C 26 00 00      mov b, 0
0193   056F D7            push a
0194   0570 11            mov a, b
0195   0571 45 FA FF      mov [bp + -6], a ; i
0196   0574 E4            pop a
0197   0575             _if1_cond:
0198   0575 2C 05 00      mov b, [bp + 5] ; num
0199   0578 D7            push a
0200   0579 11            mov a, b
0201   057A 26 00 00      mov b, 0
0202   057D B0            cmp a, b
0203   057E 0E            lodflgs
0204   057F 87 01         and al, %00000001 ; ==
0205   0581 22 00         mov ah, 0
0206   0583 27            mov b, a
0207   0584 E4            pop a
0208   0585 C0 00 00      cmp b, 0
0209   0588 C6 9A 05      je _if1_exit
0210   058B             _if1_true:
0211   058B 26 30 00      mov b, '0'
0212   058E DD            push bl
0213   058F 07 2B 07      call _putchar
0214   0592 51 01 00      add sp, 1
0215   0595 F9            leave
0216   0596 09            ret
0217   0597 0A 9A 05      jmp _if1_exit
0218   059A             _if1_exit:
0219   059A             _while2_cond:
0220   059A 2C 05 00      mov b, [bp + 5] ; num
0221   059D D7            push a
0222   059E 11            mov a, b
0223   059F 26 00 00      mov b, 0
0224   05A2 B0            cmp a, b
0225   05A3 0E            lodflgs
0226   05A4 2F            mov bl, al
0227   05A5 FD 78         mov g, a
0228   05A7 FD A2 03      shr al, 3
0229   05AA FD A4 02      shr bl, 2
0230   05AD FD 87 01      and bl, %00000001
0231   05B0 90            xor al, bl
0232   05B1 FD 27         mov b, g
0233   05B3 FD 87 01      and bl, %00000001
0234   05B6 8C            or al, bl
0235   05B7 8F 01         xor al, %00000001 ; > (signed)
0236   05B9 22 00         mov ah, 0
0237   05BB 27            mov b, a
0238   05BC E4            pop a
0239   05BD C0 00 00      cmp b, 0
0240   05C0 C6 11 06      je _while2_exit
0241   05C3             _while2_block:
0242   05C3 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0243   05C6 2D            mov b, d
0244   05C7 D7            push a
0245   05C8 74            mov d, b
0246   05C9 DA            push d
0247   05CA 2C FA FF      mov b, [bp + -6] ; i
0248   05CD E7            pop d
0249   05CE 10 01 00      mov a, 1
0250   05D1 AC            mul a, b
0251   05D2 5A            add d, b
0252   05D3 E4            pop a
0253   05D4 DA            push d
0254   05D5 26 30 00      mov b, '0'
0255   05D8 D7            push a
0256   05D9 11            mov a, b
0257   05DA 2C 05 00      mov b, [bp + 5] ; num
0258   05DD D7            push a
0259   05DE 11            mov a, b
0260   05DF 26 0A 00      mov b, 10
0261   05E2 AE            div a, b
0262   05E3 E4            pop a
0263   05E4 54            add a, b
0264   05E5 27            mov b, a
0265   05E6 E4            pop a
0266   05E7 E7            pop d
0267   05E8 FD 3E         mov [d], bl
0268   05EA 2C 05 00      mov b, [bp + 5] ; num
0269   05ED D7            push a
0270   05EE 11            mov a, b
0271   05EF 26 0A 00      mov b, 10
0272   05F2 AE            div a, b
0273   05F3 FD 78         mov g, a
0274   05F5 11            mov a, b
0275   05F6 FD 27         mov b, g
0276   05F8 E4            pop a
0277   05F9 D7            push a
0278   05FA 11            mov a, b
0279   05FB 45 05 00      mov [bp + 5], a ; num
0280   05FE E4            pop a
0281   05FF 2C FA FF      mov b, [bp + -6] ; i
0282   0602 D7            push a
0283   0603 11            mov a, b
0284   0604 FD 77         inc b
0285   0606 D7            push a
0286   0607 11            mov a, b
0287   0608 45 FA FF      mov [bp + -6], a ; i
0288   060B E4            pop a
0289   060C 27            mov b, a
0290   060D E4            pop a
0291   060E 0A 9A 05      jmp _while2_cond
0292   0611             _while2_exit:
0293   0611             _while3_cond:
0294   0611 2C FA FF      mov b, [bp + -6] ; i
0295   0614 D7            push a
0296   0615 11            mov a, b
0297   0616 26 00 00      mov b, 0
0298   0619 B0            cmp a, b
0299   061A 0E            lodflgs
0300   061B 2F            mov bl, al
0301   061C FD 78         mov g, a
0302   061E FD A2 03      shr al, 3
0303   0621 FD A4 02      shr bl, 2
0304   0624 FD 87 01      and bl, %00000001
0305   0627 90            xor al, bl
0306   0628 FD 27         mov b, g
0307   062A FD 87 01      and bl, %00000001
0308   062D 8C            or al, bl
0309   062E 8F 01         xor al, %00000001 ; > (signed)
0310   0630 22 00         mov ah, 0
0311   0632 27            mov b, a
0312   0633 E4            pop a
0313   0634 C0 00 00      cmp b, 0
0314   0637 C6 67 06      je _while3_exit
0315   063A             _while3_block:
0316   063A 2C FA FF      mov b, [bp + -6] ; i
0317   063D D7            push a
0318   063E 11            mov a, b
0319   063F FD 7D         dec b
0320   0641 D7            push a
0321   0642 11            mov a, b
0322   0643 45 FA FF      mov [bp + -6], a ; i
0323   0646 E4            pop a
0324   0647 27            mov b, a
0325   0648 E4            pop a
0326   0649 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0327   064C 2D            mov b, d
0328   064D D7            push a
0329   064E 74            mov d, b
0330   064F DA            push d
0331   0650 2C FA FF      mov b, [bp + -6] ; i
0332   0653 E7            pop d
0333   0654 10 01 00      mov a, 1
0334   0657 AC            mul a, b
0335   0658 5A            add d, b
0336   0659 E4            pop a
0337   065A 32            mov bl, [d]
0338   065B A7 00         mov bh, 0
0339   065D DD            push bl
0340   065E 07 2B 07      call _putchar
0341   0661 51 01 00      add sp, 1
0342   0664 0A 11 06      jmp _while3_cond
0343   0667             _while3_exit:
0344   0667 F9            leave
0345   0668 09            ret
0346   0669             
0347   0669             integer_square_root:
0348   0669 D2            push bp
0349   066A 9B            mov bp, sp
0350   066B             _if4_cond:
0351   066B 2C 05 00      mov b, [bp + 5] ; n
0352   066E D7            push a
0353   066F 11            mov a, b
0354   0670 26 01 00      mov b, 1
0355   0673 B0            cmp a, b
0356   0674 0E            lodflgs
0357   0675 2F            mov bl, al
0358   0676 FD 78         mov g, a
0359   0678 FD A2 03      shr al, 3
0360   067B FD A4 02      shr bl, 2
0361   067E FD 87 01      and bl, %00000001
0362   0681 90            xor al, bl
0363   0682 FD 27         mov b, g
0364   0684 FD 87 01      and bl, %00000001
0365   0687 8C            or al, bl ; <= (signed)
0366   0688 22 00         mov ah, 0
0367   068A 27            mov b, a
0368   068B E4            pop a
0369   068C C0 00 00      cmp b, 0
0370   068F C6 9A 06      je _if4_exit
0371   0692             _if4_true:
0372   0692 2C 05 00      mov b, [bp + 5] ; n
0373   0695 F9            leave
0374   0696 09            ret
0375   0697 0A 9A 06      jmp _if4_exit
0376   069A             _if4_exit:
0377   069A 52 02 00      sub sp, 2 ; x
0378   069D 52 02 00      sub sp, 2 ; y
0379   06A0 2C 05 00      mov b, [bp + 5] ; n
0380   06A3 D7            push a
0381   06A4 11            mov a, b
0382   06A5 45 FF FF      mov [bp + -1], a ; x
0383   06A8 E4            pop a
0384   06A9 2C FF FF      mov b, [bp + -1] ; x
0385   06AC D7            push a
0386   06AD 11            mov a, b
0387   06AE 2C 05 00      mov b, [bp + 5] ; n
0388   06B1 D7            push a
0389   06B2 11            mov a, b
0390   06B3 2C FF FF      mov b, [bp + -1] ; x
0391   06B6 AE            div a, b
0392   06B7 FD 78         mov g, a
0393   06B9 11            mov a, b
0394   06BA FD 27         mov b, g
0395   06BC E4            pop a
0396   06BD 54            add a, b
0397   06BE 27            mov b, a
0398   06BF E4            pop a
0399   06C0 D7            push a
0400   06C1 11            mov a, b
0401   06C2 26 02 00      mov b, 2
0402   06C5 AE            div a, b
0403   06C6 FD 78         mov g, a
0404   06C8 11            mov a, b
0405   06C9 FD 27         mov b, g
0406   06CB E4            pop a
0407   06CC D7            push a
0408   06CD 11            mov a, b
0409   06CE 45 FD FF      mov [bp + -3], a ; y
0410   06D1 E4            pop a
0411   06D2             _while5_cond:
0412   06D2 2C FD FF      mov b, [bp + -3] ; y
0413   06D5 D7            push a
0414   06D6 11            mov a, b
0415   06D7 2C FF FF      mov b, [bp + -1] ; x
0416   06DA B0            cmp a, b
0417   06DB 0E            lodflgs
0418   06DC 2F            mov bl, al
0419   06DD FD A2 03      shr al, 3
0420   06E0 FD A4 02      shr bl, 2
0421   06E3 FD 87 01      and bl, %00000001
0422   06E6 90            xor al, bl ; < (signed)
0423   06E7 22 00         mov ah, 0
0424   06E9 27            mov b, a
0425   06EA E4            pop a
0426   06EB C0 00 00      cmp b, 0
0427   06EE C6 26 07      je _while5_exit
0428   06F1             _while5_block:
0429   06F1 2C FD FF      mov b, [bp + -3] ; y
0430   06F4 D7            push a
0431   06F5 11            mov a, b
0432   06F6 45 FF FF      mov [bp + -1], a ; x
0433   06F9 E4            pop a
0434   06FA 2C FF FF      mov b, [bp + -1] ; x
0435   06FD D7            push a
0436   06FE 11            mov a, b
0437   06FF 2C 05 00      mov b, [bp + 5] ; n
0438   0702 D7            push a
0439   0703 11            mov a, b
0440   0704 2C FF FF      mov b, [bp + -1] ; x
0441   0707 AE            div a, b
0442   0708 FD 78         mov g, a
0443   070A 11            mov a, b
0444   070B FD 27         mov b, g
0445   070D E4            pop a
0446   070E 54            add a, b
0447   070F 27            mov b, a
0448   0710 E4            pop a
0449   0711 D7            push a
0450   0712 11            mov a, b
0451   0713 26 02 00      mov b, 2
0452   0716 AE            div a, b
0453   0717 FD 78         mov g, a
0454   0719 11            mov a, b
0455   071A FD 27         mov b, g
0456   071C E4            pop a
0457   071D D7            push a
0458   071E 11            mov a, b
0459   071F 45 FD FF      mov [bp + -3], a ; y
0460   0722 E4            pop a
0461   0723 0A D2 06      jmp _while5_cond
0462   0726             _while5_exit:
0463   0726 2C FF FF      mov b, [bp + -1] ; x
0464   0729 F9            leave
0465   072A 09            ret
0466   072B             
0467   072B             _putchar:
0468   072B D2            push bp
0469   072C 9B            mov bp, sp
0470   072D             
0471   072D             ; --- BEGIN INLINE ASM BLOCK
0472   072D 20 05 00      mov al, [bp + 5]
0473   0730 23            mov ah, al
0474   0731 07 65 08      call putchar
0475   0734             ; --- END INLINE ASM BLOCK
0476   0734             
0477   0734 F9            leave
0478   0735 09            ret
0479   0736             
0480   0736             scann:
0481   0736 D2            push bp
0482   0737 9B            mov bp, sp
0483   0738 52 02 00      sub sp, 2 ; m
0484   073B             
0485   073B             ; --- BEGIN INLINE ASM BLOCK
0486   073B 07 9D 0A      call scan_u16d
0487   073E 45 FF FF      mov [bp + -1], a
0488   0741             ; --- END INLINE ASM BLOCK
0489   0741             
0490   0741 2C FF FF      mov b, [bp + -1] ; m
0491   0744 F9            leave
0492   0745 09            ret
0493   0746             
0494   0746             print:
0495   0746 D2            push bp
0496   0747 9B            mov bp, sp
0497   0748             
0498   0748             ; --- BEGIN INLINE ASM BLOCK
0499   0748 17 05 00      mov a, [bp + 5]
0500   074B 3C            mov d, a
0501   074C 07 9F 09      call puts
0502   074F             ; --- END INLINE ASM BLOCK
0503   074F             
0504   074F F9            leave
0505   0750 09            ret
0506   0751             ; --- END TEXT BLOCK
0507   0751             
0508   0751             ; --- BEGIN DATA BLOCK
0509   0751 0A 00       __string_0: .db "\n", 0
0510   0753             ; --- END DATA BLOCK
0511   0753             
0512   0753             ; --- BEGIN INCLUDE BLOCK
0513   0753             .include "lib/stdio.asm"
0001+  0753             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0753             ; stdio.s
0003+  0753             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0753             .include "lib/string.asm"
0001++ 0753             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0753             ; string.s
0003++ 0753             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0753             
0005++ 0753             
0006++ 0753             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0753             ; strrev
0008++ 0753             ; reverse a string
0009++ 0753             ; D = string address
0010++ 0753             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0753             ; 01234
0012++ 0753             strrev:
0013++ 0753 4B          	pusha
0014++ 0754 07 9A 07    	call strlen	; length in C
0015++ 0757 12          	mov a, c
0016++ 0758 AF 01 00    	cmp a, 1
0017++ 075B D0 75 07    	jleu strrev_end	; check string length. string len must be > 1
0018++ 075E 7D          	dec a
0019++ 075F FD 4E       	mov si, d	; beginning of string
0020++ 0761 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0763 59          	add d, a	; end of string
0022++ 0764 12          	mov a, c
0023++ 0765 FD 9B       	shr a		; divide by 2
0024++ 0767 39          	mov c, a	; C now counts the steps
0025++ 0768             strrev_L0:
0026++ 0768 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0769 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 076A 3E          	mov [d], al	; store left char into right side
0029++ 076B 1B          	mov al, bl
0030++ 076C F7          	stosb		; store right-side char into left-side; increase DI
0031++ 076D 7E          	dec c
0032++ 076E 7F          	dec d
0033++ 076F C2 00 00    	cmp c, 0
0034++ 0772 C7 68 07    	jne strrev_L0
0035++ 0775             strrev_end:
0036++ 0775 4C          	popa
0037++ 0776 09          	ret
0038++ 0777             	
0039++ 0777             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0777             ; strchr
0041++ 0777             ; search string in D for char in AL
0042++ 0777             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0777             strchr:
0044++ 0777             strchr_L0:
0045++ 0777 32          	mov bl, [d]
0046++ 0778 C1 00       	cmp bl, 0
0047++ 077A C6 85 07    	je strchr_end
0048++ 077D BA          	cmp al, bl
0049++ 077E C6 85 07    	je strchr_end
0050++ 0781 79          	inc d
0051++ 0782 0A 77 07    	jmp strchr_L0
0052++ 0785             strchr_end:
0053++ 0785 1B          	mov al, bl
0054++ 0786 09          	ret
0055++ 0787             
0056++ 0787             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0787             ; strstr
0058++ 0787             ; find sub-string
0059++ 0787             ; str1 in SI
0060++ 0787             ; str2 in DI
0061++ 0787             ; SI points to end of source string
0062++ 0787             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0787             strstr:
0064++ 0787 DB          	push al
0065++ 0788 DA          	push d
0066++ 0789 E3          	push di
0067++ 078A             strstr_loop:
0068++ 078A F3          	cmpsb					; compare a byte of the strings
0069++ 078B C7 96 07    	jne strstr_ret
0070++ 078E FC 00 00    	lea d, [di + 0]
0071++ 0791 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0793 C7 8A 07    	jne strstr_loop				; equal chars but not at end
0073++ 0796             strstr_ret:
0074++ 0796 F0          	pop di
0075++ 0797 E7          	pop d
0076++ 0798 E8          	pop al
0077++ 0799 09          	ret
0078++ 079A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 079A             ; length of null terminated string
0080++ 079A             ; result in C
0081++ 079A             ; pointer in D
0082++ 079A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 079A             strlen:
0084++ 079A DA          	push d
0085++ 079B 38 00 00    	mov c, 0
0086++ 079E             strlen_L1:
0087++ 079E BD 00       	cmp byte [d], 0
0088++ 07A0 C6 A8 07    	je strlen_ret
0089++ 07A3 79          	inc d
0090++ 07A4 78          	inc c
0091++ 07A5 0A 9E 07    	jmp strlen_L1
0092++ 07A8             strlen_ret:
0093++ 07A8 E7          	pop d
0094++ 07A9 09          	ret
0095++ 07AA             
0096++ 07AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07AA             ; STRCMP
0098++ 07AA             ; compare two strings
0099++ 07AA             ; str1 in SI
0100++ 07AA             ; str2 in DI
0101++ 07AA             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 07AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07AA             strcmp:
0104++ 07AA DB          	push al
0105++ 07AB DA          	push d
0106++ 07AC E3          	push di
0107++ 07AD E2          	push si
0108++ 07AE             strcmp_loop:
0109++ 07AE F3          	cmpsb					; compare a byte of the strings
0110++ 07AF C7 BA 07    	jne strcmp_ret
0111++ 07B2 FB FF FF    	lea d, [si +- 1]
0112++ 07B5 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07B7 C7 AE 07    	jne strcmp_loop				; equal chars but not at end
0114++ 07BA             strcmp_ret:
0115++ 07BA EF          	pop si
0116++ 07BB F0          	pop di
0117++ 07BC E7          	pop d
0118++ 07BD E8          	pop al
0119++ 07BE 09          	ret
0120++ 07BF             
0121++ 07BF             
0122++ 07BF             ; STRCPY
0123++ 07BF             ; copy null terminated string from SI to DI
0124++ 07BF             ; source in SI
0125++ 07BF             ; destination in DI
0126++ 07BF             strcpy:
0127++ 07BF E2          	push si
0128++ 07C0 E3          	push di
0129++ 07C1 DB          	push al
0130++ 07C2             strcpy_L1:
0131++ 07C2 F6          	lodsb
0132++ 07C3 F7          	stosb
0133++ 07C4 B9 00       	cmp al, 0
0134++ 07C6 C7 C2 07    	jne strcpy_L1
0135++ 07C9             strcpy_end:
0136++ 07C9 E8          	pop al
0137++ 07CA F0          	pop di
0138++ 07CB EF          	pop si
0139++ 07CC 09          	ret
0140++ 07CD             
0141++ 07CD             ; STRCAT
0142++ 07CD             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07CD             ; source in SI
0144++ 07CD             ; destination in DI
0145++ 07CD             strcat:
0146++ 07CD E2          	push si
0147++ 07CE E3          	push di
0148++ 07CF D7          	push a
0149++ 07D0 DA          	push d
0150++ 07D1 50          	mov a, di
0151++ 07D2 3C          	mov d, a
0152++ 07D3             strcat_goto_end_L1:
0153++ 07D3 BD 00       	cmp byte[d], 0
0154++ 07D5 C6 DC 07    	je strcat_start
0155++ 07D8 79          	inc d
0156++ 07D9 0A D3 07    	jmp strcat_goto_end_L1
0157++ 07DC             strcat_start:
0158++ 07DC FD 50       	mov di, d
0159++ 07DE             strcat_L1:
0160++ 07DE F6          	lodsb
0161++ 07DF F7          	stosb
0162++ 07E0 B9 00       	cmp al, 0
0163++ 07E2 C7 DE 07    	jne strcat_L1
0164++ 07E5             strcat_end:
0165++ 07E5 E7          	pop d
0166++ 07E6 E4          	pop a
0167++ 07E7 F0          	pop di
0168++ 07E8 EF          	pop si
0169++ 07E9 09          	ret
0005+  07EA             
0006+  07EA 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  07EE 34 35 36 37 
0006+  07F2 38 39 41 42 
0006+  07F6 43 44 45 46 
0007+  07FA 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  07FE 1B 5B 48 00 
0008+  0802             
0009+  0802 01 00       table_power:.dw 1
0010+  0804 0A 00       			.dw 10
0011+  0806 64 00       			.dw 100
0012+  0808 E8 03       			.dw 1000
0013+  080A 10 27       			.dw 10000
0014+  080C             
0015+  080C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  080C             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  080C             ; ASCII in BL
0018+  080C             ; result in AL
0019+  080C             ; ascii for F = 0100 0110
0020+  080C             ; ascii for 9 = 0011 1001
0021+  080C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  080C             hex_ascii_encode:
0023+  080C 1B          	mov al, bl
0024+  080D 93 40       	test al, $40				; test if letter or number
0025+  080F C7 15 08    	jnz hex_letter
0026+  0812 87 0F       	and al, $0F				; get number
0027+  0814 09          	ret
0028+  0815             hex_letter:
0029+  0815 87 0F       	and al, $0F				; get letter
0030+  0817 6A 09       	add al, 9
0031+  0819 09          	ret
0032+  081A             
0033+  081A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  081A             ; ATOI
0035+  081A             ; 2 letter hex string in B
0036+  081A             ; 8bit integer returned in AL
0037+  081A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  081A             atoi:
0039+  081A D8          	push b
0040+  081B 07 0C 08    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  081E 30          	mov bl, bh
0042+  081F DB          	push al					; save a
0043+  0820 07 0C 08    	call hex_ascii_encode
0044+  0823 EA          	pop bl	
0045+  0824 FD 9E 04    	shl al, 4
0046+  0827 8C          	or al, bl
0047+  0828 E5          	pop b
0048+  0829 09          	ret	
0049+  082A             
0050+  082A             
0051+  082A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  082A             ; printf
0053+  082A             ; no need for explanations!
0054+  082A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  082A             printf:
0056+  082A 09          	ret
0057+  082B             
0058+  082B             
0059+  082B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  082B             ; scanf
0061+  082B             ; no need for explanations!
0062+  082B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  082B             scanf:
0064+  082B 09          	ret
0065+  082C             
0066+  082C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  082C             ; ITOA
0068+  082C             ; 8bit value in BL
0069+  082C             ; 2 byte ASCII result in A
0070+  082C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  082C             itoa:
0072+  082C DA          	push d
0073+  082D D8          	push b
0074+  082E A7 00       	mov bh, 0
0075+  0830 FD A4 04    	shr bl, 4	
0076+  0833 74          	mov d, b
0077+  0834 1F EA 07    	mov al, [d + s_hex_digits]
0078+  0837 23          	mov ah, al
0079+  0838             	
0080+  0838 E5          	pop b
0081+  0839 D8          	push b
0082+  083A A7 00       	mov bh, 0
0083+  083C FD 87 0F    	and bl, $0F
0084+  083F 74          	mov d, b
0085+  0840 1F EA 07    	mov al, [d + s_hex_digits]
0086+  0843 E5          	pop b
0087+  0844 E7          	pop d
0088+  0845 09          	ret
0089+  0846             
0090+  0846             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0846             ; HEX STRING TO BINARY
0092+  0846             ; di = destination address
0093+  0846             ; si = source
0094+  0846             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0846             hex_to_int:
0096+  0846             hex_to_int_L1:
0097+  0846 F6          	lodsb					; load from [SI] to AL
0098+  0847 B9 00       	cmp al, 0				; check if ASCII 0
0099+  0849 C6 56 08    	jz hex_to_int_ret
0100+  084C 36          	mov bh, al
0101+  084D F6          	lodsb
0102+  084E 2F          	mov bl, al
0103+  084F 07 1A 08    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0852 F7          	stosb					; store AL to [DI]
0105+  0853 0A 46 08    	jmp hex_to_int_L1
0106+  0856             hex_to_int_ret:
0107+  0856 09          	ret		
0108+  0857             
0109+  0857             
0110+  0857             
0111+  0857             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0857             ; GETCHAR
0113+  0857             ; char in ah
0114+  0857             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0857             getchar:
0116+  0857 DB          	push al
0117+  0858             getchar_retry:
0118+  0858 FD 0C       	sti
0119+  085A 19 01       	mov al, 1
0120+  085C 05 03       	syscall sys_io			; receive in AH
0121+  085E B9 00       	cmp al, 0			; check if any char was receive
0122+  0860 C6 58 08    	je getchar_retry
0123+  0863 E8          	pop al
0124+  0864 09          	ret
0125+  0865             
0126+  0865             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0865             ; PUTCHAR
0128+  0865             ; char in ah
0129+  0865             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0865             putchar:
0131+  0865 D7          	push a
0132+  0866 19 00       	mov al, 0
0133+  0868 05 03       	syscall sys_io			; char in AH
0134+  086A E4          	pop a
0135+  086B 09          	ret
0136+  086C             
0137+  086C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  086C             ;; INPUT A STRING
0139+  086C             ;; terminates with null
0140+  086C             ;; pointer in D
0141+  086C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  086C             gets:
0143+  086C D7          	push a
0144+  086D DA          	push d
0145+  086E             gets_loop:
0146+  086E FD 0C       	sti
0147+  0870 19 01       	mov al, 1
0148+  0872 05 03       	syscall sys_io			; receive in AH
0149+  0874 B9 00       	cmp al, 0				; check error code (AL)
0150+  0876 C6 6E 08    	je gets_loop			; if no char received, retry
0151+  0879             
0152+  0879 76 1B       	cmp ah, 27
0153+  087B C6 9C 08    	je gets_telnet_escape
0154+  087E 76 0A       	cmp ah, $0A				; LF
0155+  0880 C6 F5 08    	je gets_end
0156+  0883 76 0D       	cmp ah, $0D				; CR
0157+  0885 C6 F5 08    	je gets_end
0158+  0888 76 5C       	cmp ah, $5C				; '\\'
0159+  088A C6 CC 08    	je gets_escape
0160+  088D             	
0161+  088D 76 08       	cmp ah, $08			; check for backspace
0162+  088F C6 98 08    	je gets_backspace
0163+  0892             
0164+  0892 1A          	mov al, ah
0165+  0893 3E          	mov [d], al
0166+  0894 79          	inc d
0167+  0895 0A 6E 08    	jmp gets_loop
0168+  0898             gets_backspace:
0169+  0898 7F          	dec d
0170+  0899 0A 6E 08    	jmp gets_loop
0171+  089C             gets_telnet_escape:
0172+  089C FD 0C       	sti
0173+  089E 19 01       	mov al, 1
0174+  08A0 05 03       	syscall sys_io				; receive in AH without echo
0175+  08A2 B9 00       	cmp al, 0					; check error code (AL)
0176+  08A4 C6 9C 08    	je gets_telnet_escape		; if no char received, retry
0177+  08A7 76 5B       	cmp ah, '['
0178+  08A9 C7 6E 08    	jne gets_loop
0179+  08AC             gets_telnet_escape_phase2:
0180+  08AC FD 0C       	sti
0181+  08AE 19 01       	mov al, 1
0182+  08B0 05 03       	syscall sys_io					; receive in AH without echo
0183+  08B2 B9 00       	cmp al, 0						; check error code (AL)
0184+  08B4 C6 AC 08    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  08B7 76 44       	cmp ah, 'D'
0186+  08B9 C6 C4 08    	je gets_left_arrow
0187+  08BC 76 43       	cmp ah, 'C'
0188+  08BE C6 C8 08    	je gets_right_arrow
0189+  08C1 0A 6E 08    	jmp gets_loop
0190+  08C4             gets_left_arrow:
0191+  08C4 7F          	dec d
0192+  08C5 0A 6E 08    	jmp gets_loop
0193+  08C8             gets_right_arrow:
0194+  08C8 79          	inc d
0195+  08C9 0A 6E 08    	jmp gets_loop
0196+  08CC             gets_escape:
0197+  08CC FD 0C       	sti
0198+  08CE 19 01       	mov al, 1
0199+  08D0 05 03       	syscall sys_io			; receive in AH
0200+  08D2 B9 00       	cmp al, 0				; check error code (AL)
0201+  08D4 C6 CC 08    	je gets_escape			; if no char received, retry
0202+  08D7 76 6E       	cmp ah, 'n'
0203+  08D9 C6 E7 08    	je gets_LF
0204+  08DC 76 72       	cmp ah, 'r'
0205+  08DE C6 EE 08    	je gets_CR
0206+  08E1 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  08E2 3E          	mov [d], al
0208+  08E3 79          	inc d
0209+  08E4 0A 6E 08    	jmp gets_loop
0210+  08E7             gets_LF:
0211+  08E7 19 0A       	mov al, $0A
0212+  08E9 3E          	mov [d], al
0213+  08EA 79          	inc d
0214+  08EB 0A 6E 08    	jmp gets_loop
0215+  08EE             gets_CR:
0216+  08EE 19 0D       	mov al, $0D
0217+  08F0 3E          	mov [d], al
0218+  08F1 79          	inc d
0219+  08F2 0A 6E 08    	jmp gets_loop
0220+  08F5             gets_end:
0221+  08F5 19 00       	mov al, 0
0222+  08F7 3E          	mov [d], al				; terminate string
0223+  08F8 E7          	pop d
0224+  08F9 E4          	pop a
0225+  08FA 09          	ret
0226+  08FB             
0227+  08FB             
0228+  08FB             
0229+  08FB             
0230+  08FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  08FB             ;; INPUT TEXT
0232+  08FB             ;; terminated with CTRL+D
0233+  08FB             ;; pointer in D
0234+  08FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  08FB             gettxt:
0236+  08FB D7          	push a
0237+  08FC DA          	push d
0238+  08FD             gettxt_loop:
0239+  08FD 19 01       	mov al, 1
0240+  08FF 05 03       	syscall sys_io			; receive in AH
0241+  0901 B9 00       	cmp al, 0				; check error code (AL)
0242+  0903 C6 FD 08    	je gettxt_loop		; if no char received, retry
0243+  0906 76 04       	cmp ah, 4			; EOT
0244+  0908 C6 46 09    	je gettxt_end
0245+  090B 76 08       	cmp ah, $08			; check for backspace
0246+  090D C6 42 09    	je gettxt_backspace
0247+  0910 76 5C       	cmp ah, $5C				; '\\'
0248+  0912 C6 1B 09    	je gettxt_escape
0249+  0915 1A          	mov al, ah
0250+  0916 3E          	mov [d], al
0251+  0917 79          	inc d
0252+  0918 0A FD 08    	jmp gettxt_loop
0253+  091B             gettxt_escape:
0254+  091B 19 01       	mov al, 1
0255+  091D 05 03       	syscall sys_io			; receive in AH
0256+  091F B9 00       	cmp al, 0				; check error code (AL)
0257+  0921 C6 1B 09    	je gettxt_escape		; if no char received, retry
0258+  0924 76 6E       	cmp ah, 'n'
0259+  0926 C6 34 09    	je gettxt_LF
0260+  0929 76 72       	cmp ah, 'r'
0261+  092B C6 3B 09    	je gettxt_CR
0262+  092E 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  092F 3E          	mov [d], al
0264+  0930 79          	inc d
0265+  0931 0A FD 08    	jmp gettxt_loop
0266+  0934             gettxt_LF:
0267+  0934 19 0A       	mov al, $0A
0268+  0936 3E          	mov [d], al
0269+  0937 79          	inc d
0270+  0938 0A FD 08    	jmp gettxt_loop
0271+  093B             gettxt_CR:
0272+  093B 19 0D       	mov al, $0D
0273+  093D 3E          	mov [d], al
0274+  093E 79          	inc d
0275+  093F 0A FD 08    	jmp gettxt_loop
0276+  0942             gettxt_backspace:
0277+  0942 7F          	dec d
0278+  0943 0A FD 08    	jmp gettxt_loop
0279+  0946             gettxt_end:
0280+  0946 19 00       	mov al, 0
0281+  0948 3E          	mov [d], al				; terminate string
0282+  0949 E7          	pop d
0283+  094A E4          	pop a
0284+  094B 09          	ret
0285+  094C             
0286+  094C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  094C             ; PRINT NEW LINE
0288+  094C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  094C             printnl:
0290+  094C D7          	push a
0291+  094D 10 00 0A    	mov a, $0A00
0292+  0950 05 03       	syscall sys_io
0293+  0952 10 00 0D    	mov a, $0D00
0294+  0955 05 03       	syscall sys_io
0295+  0957 E4          	pop a
0296+  0958 09          	ret
0297+  0959             
0298+  0959             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  0959             ; strtoint
0300+  0959             ; 4 digit hex string number in d
0301+  0959             ; integer returned in A
0302+  0959             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  0959             strtointx:
0304+  0959 D8          	push b
0305+  095A 32          	mov bl, [d]
0306+  095B 37          	mov bh, bl
0307+  095C 33 01 00    	mov bl, [d + 1]
0308+  095F 07 1A 08    	call atoi				; convert to int in AL
0309+  0962 23          	mov ah, al				; move to AH
0310+  0963 33 02 00    	mov bl, [d + 2]
0311+  0966 37          	mov bh, bl
0312+  0967 33 03 00    	mov bl, [d + 3]
0313+  096A 07 1A 08    	call atoi				; convert to int in AL
0314+  096D E5          	pop b
0315+  096E 09          	ret
0316+  096F             
0317+  096F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  096F             ; strtoint
0319+  096F             ; 5 digit base10 string number in d
0320+  096F             ; integer returned in A
0321+  096F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  096F             strtoint:
0323+  096F E2          	push si
0324+  0970 D8          	push b
0325+  0971 D9          	push c
0326+  0972 DA          	push d
0327+  0973 07 9A 07    	call strlen			; get string length in C
0328+  0976 7E          	dec c
0329+  0977 FD 4E       	mov si, d
0330+  0979 12          	mov a, c
0331+  097A FD 99       	shl a
0332+  097C 3B 02 08    	mov d, table_power
0333+  097F 59          	add d, a
0334+  0980 38 00 00    	mov c, 0
0335+  0983             strtoint_L0:
0336+  0983 F6          	lodsb			; load ASCII to al
0337+  0984 B9 00       	cmp al, 0
0338+  0986 C6 99 09    	je strtoint_end
0339+  0989 6F 30       	sub al, $30		; make into integer
0340+  098B 22 00       	mov ah, 0
0341+  098D 2A          	mov b, [d]
0342+  098E AC          	mul a, b			; result in B since it fits in 16bits
0343+  098F 11          	mov a, b
0344+  0990 28          	mov b, c
0345+  0991 54          	add a, b
0346+  0992 39          	mov c, a
0347+  0993 63 02 00    	sub d, 2
0348+  0996 0A 83 09    	jmp strtoint_L0
0349+  0999             strtoint_end:
0350+  0999 12          	mov a, c
0351+  099A E7          	pop d
0352+  099B E6          	pop c
0353+  099C E5          	pop b
0354+  099D EF          	pop si
0355+  099E 09          	ret
0356+  099F             
0357+  099F             
0358+  099F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  099F             ; PRINT NULL TERMINATED STRING
0360+  099F             ; pointer in D
0361+  099F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  099F             puts:
0363+  099F D7          	push a
0364+  09A0 DA          	push d
0365+  09A1             puts_L1:
0366+  09A1 1E          	mov al, [d]
0367+  09A2 B9 00       	cmp al, 0
0368+  09A4 C6 B0 09    	jz puts_END
0369+  09A7 23          	mov ah, al
0370+  09A8 19 00       	mov al, 0
0371+  09AA 05 03       	syscall sys_io
0372+  09AC 79          	inc d
0373+  09AD 0A A1 09    	jmp puts_L1
0374+  09B0             puts_END:
0375+  09B0 E7          	pop d
0376+  09B1 E4          	pop a
0377+  09B2 09          	ret
0378+  09B3             
0379+  09B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  09B3             ; PRINT N SIZE STRING
0381+  09B3             ; pointer in D
0382+  09B3             ; size in C
0383+  09B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  09B3             putsn:
0385+  09B3 DB          	push al
0386+  09B4 DA          	push d
0387+  09B5 D9          	push c
0388+  09B6             putsn_L0:
0389+  09B6 1E          	mov al, [d]
0390+  09B7 23          	mov ah, al
0391+  09B8 19 00       	mov al, 0
0392+  09BA 05 03       	syscall sys_io
0393+  09BC 79          	inc d
0394+  09BD 7E          	dec c	
0395+  09BE C2 00 00    	cmp c, 0
0396+  09C1 C7 B6 09    	jne putsn_L0
0397+  09C4             putsn_end:
0398+  09C4 E6          	pop c
0399+  09C5 E7          	pop d
0400+  09C6 E8          	pop al
0401+  09C7 09          	ret
0402+  09C8             
0403+  09C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  09C8             ; print 16bit decimal number
0405+  09C8             ; input number in A
0406+  09C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  09C8             print_u16d:
0408+  09C8 D7          	push a
0409+  09C9 D8          	push b
0410+  09CA 26 10 27    	mov b, 10000
0411+  09CD AE          	div a, b			; get 10000 coeff.
0412+  09CE 07 F4 09    	call print_number
0413+  09D1 11          	mov a, b
0414+  09D2 26 E8 03    	mov b, 1000
0415+  09D5 AE          	div a, b			; get 10000 coeff.
0416+  09D6 07 F4 09    	call print_number
0417+  09D9 11          	mov a, b
0418+  09DA 26 64 00    	mov b, 100
0419+  09DD AE          	div a, b
0420+  09DE 07 F4 09    	call print_number
0421+  09E1 11          	mov a, b
0422+  09E2 26 0A 00    	mov b, 10
0423+  09E5 AE          	div a, b
0424+  09E6 07 F4 09    	call print_number
0425+  09E9 11          	mov a, b
0426+  09EA 6A 30       	add al, $30
0427+  09EC 23          	mov ah, al
0428+  09ED 19 00       	mov al, 0
0429+  09EF 05 03       	syscall sys_io	; print coeff
0430+  09F1 E5          	pop b
0431+  09F2 E4          	pop a
0432+  09F3 09          	ret
0433+  09F4             
0434+  09F4             
0435+  09F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  09F4             ; if A == 0, print space
0437+  09F4             ; else print A
0438+  09F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  09F4             print_number:
0440+  09F4 6A 30       	add al, $30
0441+  09F6 23          	mov ah, al
0442+  09F7 07 65 08    	call putchar
0443+  09FA 09          	ret
0444+  09FB             
0445+  09FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  09FB             ; PRINT 16BIT HEX INTEGER
0447+  09FB             ; integer value in reg B
0448+  09FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  09FB             print_u16x:
0450+  09FB D7          	push a
0451+  09FC D8          	push b
0452+  09FD DD          	push bl
0453+  09FE 30          	mov bl, bh
0454+  09FF 07 2C 08    	call itoa				; convert bh to char in A
0455+  0A02 2F          	mov bl, al				; save al
0456+  0A03 19 00       	mov al, 0
0457+  0A05 05 03       	syscall sys_io				; display AH
0458+  0A07 24          	mov ah, bl				; retrieve al
0459+  0A08 19 00       	mov al, 0
0460+  0A0A 05 03       	syscall sys_io				; display AL
0461+  0A0C             
0462+  0A0C EA          	pop bl
0463+  0A0D 07 2C 08    	call itoa				; convert bh to char in A
0464+  0A10 2F          	mov bl, al				; save al
0465+  0A11 19 00       	mov al, 0
0466+  0A13 05 03       	syscall sys_io				; display AH
0467+  0A15 24          	mov ah, bl				; retrieve al
0468+  0A16 19 00       	mov al, 0
0469+  0A18 05 03       	syscall sys_io				; display AL
0470+  0A1A             
0471+  0A1A E5          	pop b
0472+  0A1B E4          	pop a
0473+  0A1C 09          	ret
0474+  0A1D             
0475+  0A1D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0A1D             ; INPUT 16BIT HEX INTEGER
0477+  0A1D             ; read 16bit integer into A
0478+  0A1D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0A1D             scan_u16x:
0480+  0A1D F8 10 00    	enter 16
0481+  0A20 D8          	push b
0482+  0A21 DA          	push d
0483+  0A22             
0484+  0A22 FA F1 FF    	lea d, [bp + -15]
0485+  0A25 07 6C 08    	call gets				; get number
0486+  0A28             
0487+  0A28 32          	mov bl, [d]
0488+  0A29 37          	mov bh, bl
0489+  0A2A 33 01 00    	mov bl, [d + 1]
0490+  0A2D 07 1A 08    	call atoi				; convert to int in AL
0491+  0A30 23          	mov ah, al				; move to AH
0492+  0A31             
0493+  0A31 33 02 00    	mov bl, [d + 2]
0494+  0A34 37          	mov bh, bl
0495+  0A35 33 03 00    	mov bl, [d + 3]
0496+  0A38 07 1A 08    	call atoi				; convert to int in AL
0497+  0A3B             
0498+  0A3B E7          	pop d
0499+  0A3C E5          	pop b
0500+  0A3D F9          	leave
0501+  0A3E 09          	ret
0502+  0A3F             
0503+  0A3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0A3F             ; PRINT 8bit HEX INTEGER
0505+  0A3F             ; integer value in reg bl
0506+  0A3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0A3F             print_u8x:
0508+  0A3F D7          	push a
0509+  0A40 DD          	push bl
0510+  0A41             
0511+  0A41 07 2C 08    	call itoa				; convert bl to char in A
0512+  0A44 2F          	mov bl, al				; save al
0513+  0A45 19 00       	mov al, 0
0514+  0A47 05 03       	syscall sys_io				; display AH
0515+  0A49 24          	mov ah, bl				; retrieve al
0516+  0A4A 19 00       	mov al, 0
0517+  0A4C 05 03       	syscall sys_io				; display AL
0518+  0A4E             
0519+  0A4E EA          	pop bl
0520+  0A4F E4          	pop a
0521+  0A50 09          	ret
0522+  0A51             
0523+  0A51             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0A51             ; print 8bit decimal unsigned number
0525+  0A51             ; input number in AL
0526+  0A51             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0A51             print_u8d:
0528+  0A51 D7          	push a
0529+  0A52 D8          	push b
0530+  0A53             
0531+  0A53 22 00       	mov ah, 0
0532+  0A55 26 64 00    	mov b, 100
0533+  0A58 AE          	div a, b
0534+  0A59 D8          	push b			; save remainder
0535+  0A5A B9 00       	cmp al, 0
0536+  0A5C C6 66 0A    	je skip100
0537+  0A5F 6A 30       	add al, $30
0538+  0A61 23          	mov ah, al
0539+  0A62 19 00       	mov al, 0
0540+  0A64 05 03       	syscall sys_io	; print coeff
0541+  0A66             skip100:
0542+  0A66 E4          	pop a
0543+  0A67 22 00       	mov ah, 0
0544+  0A69 26 0A 00    	mov b, 10
0545+  0A6C AE          	div a, b
0546+  0A6D D8          	push b			; save remainder
0547+  0A6E B9 00       	cmp al, 0
0548+  0A70 C6 7A 0A    	je skip10
0549+  0A73 6A 30       	add al, $30
0550+  0A75 23          	mov ah, al
0551+  0A76 19 00       	mov al, 0
0552+  0A78 05 03       	syscall sys_io	; print coeff
0553+  0A7A             skip10:
0554+  0A7A E4          	pop a
0555+  0A7B 1B          	mov al, bl
0556+  0A7C 6A 30       	add al, $30
0557+  0A7E 23          	mov ah, al
0558+  0A7F 19 00       	mov al, 0
0559+  0A81 05 03       	syscall sys_io	; print coeff
0560+  0A83 E5          	pop b
0561+  0A84 E4          	pop a
0562+  0A85 09          	ret
0563+  0A86             
0564+  0A86             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0A86             ; INPUT 8BIT HEX INTEGER
0566+  0A86             ; read 8bit integer into AL
0567+  0A86             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0A86             scan_u8x:
0569+  0A86 F8 04 00    	enter 4
0570+  0A89 D8          	push b
0571+  0A8A DA          	push d
0572+  0A8B             
0573+  0A8B FA FD FF    	lea d, [bp + -3]
0574+  0A8E 07 6C 08    	call gets				; get number
0575+  0A91             
0576+  0A91 32          	mov bl, [d]
0577+  0A92 37          	mov bh, bl
0578+  0A93 33 01 00    	mov bl, [d + 1]
0579+  0A96 07 1A 08    	call atoi				; convert to int in AL
0580+  0A99             
0581+  0A99 E7          	pop d
0582+  0A9A E5          	pop b
0583+  0A9B F9          	leave
0584+  0A9C 09          	ret
0585+  0A9D             
0586+  0A9D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  0A9D             ; input decimal number
0588+  0A9D             ; result in A
0589+  0A9D             ; 655'\0'
0590+  0A9D             ; low--------high
0591+  0A9D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  0A9D             scan_u16d:
0593+  0A9D F8 08 00    	enter 8
0594+  0AA0 E2          	push si
0595+  0AA1 D8          	push b
0596+  0AA2 D9          	push c
0597+  0AA3 DA          	push d
0598+  0AA4 FA F9 FF    	lea d, [bp +- 7]
0599+  0AA7 07 6C 08    	call gets
0600+  0AAA 07 9A 07    	call strlen			; get string length in C
0601+  0AAD 7E          	dec c
0602+  0AAE FD 4E       	mov si, d
0603+  0AB0 12          	mov a, c
0604+  0AB1 FD 99       	shl a
0605+  0AB3 3B 02 08    	mov d, table_power
0606+  0AB6 59          	add d, a
0607+  0AB7 38 00 00    	mov c, 0
0608+  0ABA             mul_loop:
0609+  0ABA F6          	lodsb			; load ASCII to al
0610+  0ABB B9 00       	cmp al, 0
0611+  0ABD C6 D0 0A    	je mul_exit
0612+  0AC0 6F 30       	sub al, $30		; make into integer
0613+  0AC2 22 00       	mov ah, 0
0614+  0AC4 2A          	mov b, [d]
0615+  0AC5 AC          	mul a, b			; result in B since it fits in 16bits
0616+  0AC6 11          	mov a, b
0617+  0AC7 28          	mov b, c
0618+  0AC8 54          	add a, b
0619+  0AC9 39          	mov c, a
0620+  0ACA 63 02 00    	sub d, 2
0621+  0ACD 0A BA 0A    	jmp mul_loop
0622+  0AD0             mul_exit:
0623+  0AD0 12          	mov a, c
0624+  0AD1 E7          	pop d
0625+  0AD2 E6          	pop c
0626+  0AD3 E5          	pop b
0627+  0AD4 EF          	pop si
0628+  0AD5 F9          	leave
0629+  0AD6 09          	ret
0514   0AD7             ; --- END INCLUDE BLOCK
0515   0AD7             
0516   0AD7             
0517   0AD7             .end
tasm: Number of errors = 0
