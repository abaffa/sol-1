0001   0000             ; --- FILENAME: life.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; n
0011   0408 26 6D 17      mov b, _string_0
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 07 F0 04      call print
0015   0411 51 02 00      add sp, 2
0016   0414 07 FB 04      call getn
0017   0417 D7            push a
0018   0418 11            mov a, b
0019   0419 45 FD FF      mov [bp + -3], a ; n
0020   041C E4            pop a
0021   041D 07 65 04      call init_game
0022   0420             _for1_init:
0023   0420 26 00 00      mov b, 0
0024   0423 D7            push a
0025   0424 11            mov a, b
0026   0425 45 FF FF      mov [bp + -1], a ; i
0027   0428 E4            pop a
0028   0429             _for1_cond:
0029   0429 2C FF FF      mov b, [bp + -1] ; i
0030   042C D7            push a
0031   042D 11            mov a, b
0032   042E 2C FD FF      mov b, [bp + -3] ; n
0033   0431 B0            cmp a, b
0034   0432 0E            lodflgs
0035   0433 87 02         and al, %00000010 ; <
0036   0435 B9 00         cmp al, 0
0037   0437 0E            lodflgs
0038   0438 96            not al
0039   0439 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0040   043B 22 00         mov ah, 0
0041   043D 27            mov b, a
0042   043E E4            pop a
0043   043F C0 00 00      cmp b, 0
0044   0442 C6 5F 04      je _for1_exit
0045   0445             _for1_block:
0046   0445             
0047   0445             ; --- BEGIN INLINE ASM BLOCK
0048   0445 3B 2A 18      mov d, s_telnet_clear
0049   0448 07 CF 19      call puts
0050   044B             ; --- END INLINE ASM BLOCK
0051   044B             
0052   044B 07 0B 05      call print_game
0053   044E 07 BF 05      call update_game
0054   0451             _for1_update:
0055   0451 2C FF FF      mov b, [bp + -1] ; i
0056   0454 FD 77         inc b
0057   0456 D7            push a
0058   0457 11            mov a, b
0059   0458 45 FF FF      mov [bp + -1], a ; i
0060   045B E4            pop a
0061   045C 0A 29 04      jmp _for1_cond
0062   045F             _for1_exit:
0063   045F 26 00 00      mov b, 0
0064   0462 F9            leave
0065   0463 05 0B         syscall sys_terminate_proc
0066   0465             init_game:
0067   0465 D2            push bp
0068   0466 9B            mov bp, sp
0069   0467 29 61 10      mov b, [curr_state]
0070   046A 74            mov d, b
0071   046B 26 04 00      mov b, 4
0072   046E 10 3C 00      mov a, 60
0073   0471 AC            mul a, b
0074   0472 5A            add d, b
0075   0473 26 04 00      mov b, 4
0076   0476 10 02 00      mov a, 2
0077   0479 AC            mul a, b
0078   047A 5A            add d, b
0079   047B DA            push d
0080   047C 26 01 00      mov b, 1
0081   047F E7            pop d
0082   0480 11            mov a, b
0083   0481 43            mov [d], a
0084   0482 29 61 10      mov b, [curr_state]
0085   0485 74            mov d, b
0086   0486 26 04 00      mov b, 4
0087   0489 10 3C 00      mov a, 60
0088   048C AC            mul a, b
0089   048D 5A            add d, b
0090   048E 26 05 00      mov b, 5
0091   0491 10 02 00      mov a, 2
0092   0494 AC            mul a, b
0093   0495 5A            add d, b
0094   0496 DA            push d
0095   0497 26 01 00      mov b, 1
0096   049A E7            pop d
0097   049B 11            mov a, b
0098   049C 43            mov [d], a
0099   049D 29 61 10      mov b, [curr_state]
0100   04A0 74            mov d, b
0101   04A1 26 04 00      mov b, 4
0102   04A4 10 3C 00      mov a, 60
0103   04A7 AC            mul a, b
0104   04A8 5A            add d, b
0105   04A9 26 06 00      mov b, 6
0106   04AC 10 02 00      mov a, 2
0107   04AF AC            mul a, b
0108   04B0 5A            add d, b
0109   04B1 DA            push d
0110   04B2 26 01 00      mov b, 1
0111   04B5 E7            pop d
0112   04B6 11            mov a, b
0113   04B7 43            mov [d], a
0114   04B8 29 61 10      mov b, [curr_state]
0115   04BB 74            mov d, b
0116   04BC 26 03 00      mov b, 3
0117   04BF 10 3C 00      mov a, 60
0118   04C2 AC            mul a, b
0119   04C3 5A            add d, b
0120   04C4 26 06 00      mov b, 6
0121   04C7 10 02 00      mov a, 2
0122   04CA AC            mul a, b
0123   04CB 5A            add d, b
0124   04CC DA            push d
0125   04CD 26 01 00      mov b, 1
0126   04D0 E7            pop d
0127   04D1 11            mov a, b
0128   04D2 43            mov [d], a
0129   04D3 29 61 10      mov b, [curr_state]
0130   04D6 74            mov d, b
0131   04D7 26 02 00      mov b, 2
0132   04DA 10 3C 00      mov a, 60
0133   04DD AC            mul a, b
0134   04DE 5A            add d, b
0135   04DF 26 05 00      mov b, 5
0136   04E2 10 02 00      mov a, 2
0137   04E5 AC            mul a, b
0138   04E6 5A            add d, b
0139   04E7 DA            push d
0140   04E8 26 01 00      mov b, 1
0141   04EB E7            pop d
0142   04EC 11            mov a, b
0143   04ED 43            mov [d], a
0144   04EE F9            leave
0145   04EF 09            ret
0146   04F0             print:
0147   04F0 D2            push bp
0148   04F1 9B            mov bp, sp
0149   04F2             
0150   04F2             ; --- BEGIN INLINE ASM BLOCK
0151   04F2 17 05 00      mov a, [bp + 5]
0152   04F5 3C            mov d, a
0153   04F6 07 CF 19      call puts
0154   04F9             ; --- END INLINE ASM BLOCK
0155   04F9             
0156   04F9 F9            leave
0157   04FA 09            ret
0158   04FB             getn:
0159   04FB D2            push bp
0160   04FC 9B            mov bp, sp
0161   04FD 52 02 00      sub sp, 2 ; n
0162   0500             
0163   0500             ; --- BEGIN INLINE ASM BLOCK
0164   0500 07 CD 1A      call scan_u16d
0165   0503 45 FF FF      mov [bp + -1], a
0166   0506             ; --- END INLINE ASM BLOCK
0167   0506             
0168   0506 2C FF FF      mov b, [bp + -1] ; n
0169   0509 F9            leave
0170   050A 09            ret
0171   050B             print_game:
0172   050B D2            push bp
0173   050C 9B            mov bp, sp
0174   050D 52 02 00      sub sp, 2 ; i
0175   0510 52 02 00      sub sp, 2 ; j
0176   0513             _for2_init:
0177   0513 26 00 00      mov b, 0
0178   0516 D7            push a
0179   0517 11            mov a, b
0180   0518 45 FF FF      mov [bp + -1], a ; i
0181   051B E4            pop a
0182   051C             _for2_cond:
0183   051C 2C FF FF      mov b, [bp + -1] ; i
0184   051F D7            push a
0185   0520 11            mov a, b
0186   0521 26 1E 00      mov b, 30
0187   0524 B0            cmp a, b
0188   0525 0E            lodflgs
0189   0526 87 02         and al, %00000010 ; <
0190   0528 B9 00         cmp al, 0
0191   052A 0E            lodflgs
0192   052B 96            not al
0193   052C 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0194   052E 22 00         mov ah, 0
0195   0530 27            mov b, a
0196   0531 E4            pop a
0197   0532 C0 00 00      cmp b, 0
0198   0535 C6 BD 05      je _for2_exit
0199   0538             _for2_block:
0200   0538             _for3_init:
0201   0538 26 00 00      mov b, 0
0202   053B D7            push a
0203   053C 11            mov a, b
0204   053D 45 FD FF      mov [bp + -3], a ; j
0205   0540 E4            pop a
0206   0541             _for3_cond:
0207   0541 2C FD FF      mov b, [bp + -3] ; j
0208   0544 D7            push a
0209   0545 11            mov a, b
0210   0546 26 1E 00      mov b, 30
0211   0549 B0            cmp a, b
0212   054A 0E            lodflgs
0213   054B 87 02         and al, %00000010 ; <
0214   054D B9 00         cmp al, 0
0215   054F 0E            lodflgs
0216   0550 96            not al
0217   0551 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0218   0553 22 00         mov ah, 0
0219   0555 27            mov b, a
0220   0556 E4            pop a
0221   0557 C0 00 00      cmp b, 0
0222   055A C6 A3 05      je _for3_exit
0223   055D             _for3_block:
0224   055D             _if4_cond:
0225   055D 29 61 10      mov b, [curr_state]
0226   0560 D7            push a
0227   0561 74            mov d, b
0228   0562 2C FF FF      mov b, [bp + -1] ; i
0229   0565 10 3C 00      mov a, 60
0230   0568 AC            mul a, b
0231   0569 5A            add d, b
0232   056A 2C FD FF      mov b, [bp + -3] ; j
0233   056D 10 02 00      mov a, 2
0234   0570 AC            mul a, b
0235   0571 5A            add d, b
0236   0572 2A            mov b, [d]
0237   0573 E4            pop a
0238   0574 C0 00 00      cmp b, 0
0239   0577 C6 89 05      je _if4_else
0240   057A             _if4_true:
0241   057A 26 7B 17      mov b, _string_1
0242   057D FD AB         swp b
0243   057F D8            push b
0244   0580 07 F0 04      call print
0245   0583 51 02 00      add sp, 2
0246   0586 0A 95 05      jmp _if4_exit
0247   0589             _if4_else:
0248   0589 26 7E 17      mov b, _string_2
0249   058C FD AB         swp b
0250   058E D8            push b
0251   058F 07 F0 04      call print
0252   0592 51 02 00      add sp, 2
0253   0595             _if4_exit:
0254   0595             _for3_update:
0255   0595 2C FD FF      mov b, [bp + -3] ; j
0256   0598 FD 77         inc b
0257   059A D7            push a
0258   059B 11            mov a, b
0259   059C 45 FD FF      mov [bp + -3], a ; j
0260   059F E4            pop a
0261   05A0 0A 41 05      jmp _for3_cond
0262   05A3             _for3_exit:
0263   05A3 26 81 17      mov b, _string_3
0264   05A6 FD AB         swp b
0265   05A8 D8            push b
0266   05A9 07 F0 04      call print
0267   05AC 51 02 00      add sp, 2
0268   05AF             _for2_update:
0269   05AF 2C FF FF      mov b, [bp + -1] ; i
0270   05B2 FD 77         inc b
0271   05B4 D7            push a
0272   05B5 11            mov a, b
0273   05B6 45 FF FF      mov [bp + -1], a ; i
0274   05B9 E4            pop a
0275   05BA 0A 1C 05      jmp _for2_cond
0276   05BD             _for2_exit:
0277   05BD F9            leave
0278   05BE 09            ret
0279   05BF             update_game:
0280   05BF D2            push bp
0281   05C0 9B            mov bp, sp
0282   05C1 52 02 00      sub sp, 2 ; i
0283   05C4 52 02 00      sub sp, 2 ; j
0284   05C7 52 02 00      sub sp, 2 ; ni
0285   05CA 52 02 00      sub sp, 2 ; nj
0286   05CD 52 02 00      sub sp, 2 ; count
0287   05D0             _for5_init:
0288   05D0 26 00 00      mov b, 0
0289   05D3 D7            push a
0290   05D4 11            mov a, b
0291   05D5 45 FF FF      mov [bp + -1], a ; i
0292   05D8 E4            pop a
0293   05D9             _for5_cond:
0294   05D9 2C FF FF      mov b, [bp + -1] ; i
0295   05DC D7            push a
0296   05DD 11            mov a, b
0297   05DE 26 1E 00      mov b, 30
0298   05E1 B0            cmp a, b
0299   05E2 0E            lodflgs
0300   05E3 87 02         and al, %00000010 ; <
0301   05E5 B9 00         cmp al, 0
0302   05E7 0E            lodflgs
0303   05E8 96            not al
0304   05E9 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0305   05EB 22 00         mov ah, 0
0306   05ED 27            mov b, a
0307   05EE E4            pop a
0308   05EF C0 00 00      cmp b, 0
0309   05F2 C6 65 06      je _for5_exit
0310   05F5             _for5_block:
0311   05F5             _for6_init:
0312   05F5 26 00 00      mov b, 0
0313   05F8 D7            push a
0314   05F9 11            mov a, b
0315   05FA 45 FD FF      mov [bp + -3], a ; j
0316   05FD E4            pop a
0317   05FE             _for6_cond:
0318   05FE 2C FD FF      mov b, [bp + -3] ; j
0319   0601 D7            push a
0320   0602 11            mov a, b
0321   0603 26 1E 00      mov b, 30
0322   0606 B0            cmp a, b
0323   0607 0E            lodflgs
0324   0608 87 02         and al, %00000010 ; <
0325   060A B9 00         cmp al, 0
0326   060C 0E            lodflgs
0327   060D 96            not al
0328   060E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0329   0610 22 00         mov ah, 0
0330   0612 27            mov b, a
0331   0613 E4            pop a
0332   0614 C0 00 00      cmp b, 0
0333   0617 C6 57 06      je _for6_exit
0334   061A             _for6_block:
0335   061A 29 6B 17      mov b, [next_state]
0336   061D 74            mov d, b
0337   061E 2C FF FF      mov b, [bp + -1] ; i
0338   0621 10 3C 00      mov a, 60
0339   0624 AC            mul a, b
0340   0625 5A            add d, b
0341   0626 2C FD FF      mov b, [bp + -3] ; j
0342   0629 10 02 00      mov a, 2
0343   062C AC            mul a, b
0344   062D 5A            add d, b
0345   062E DA            push d
0346   062F 29 61 10      mov b, [curr_state]
0347   0632 D7            push a
0348   0633 74            mov d, b
0349   0634 2C FF FF      mov b, [bp + -1] ; i
0350   0637 10 3C 00      mov a, 60
0351   063A AC            mul a, b
0352   063B 5A            add d, b
0353   063C 2C FD FF      mov b, [bp + -3] ; j
0354   063F 10 02 00      mov a, 2
0355   0642 AC            mul a, b
0356   0643 5A            add d, b
0357   0644 2A            mov b, [d]
0358   0645 E4            pop a
0359   0646 E7            pop d
0360   0647 11            mov a, b
0361   0648 43            mov [d], a
0362   0649             _for6_update:
0363   0649 2C FD FF      mov b, [bp + -3] ; j
0364   064C FD 77         inc b
0365   064E D7            push a
0366   064F 11            mov a, b
0367   0650 45 FD FF      mov [bp + -3], a ; j
0368   0653 E4            pop a
0369   0654 0A FE 05      jmp _for6_cond
0370   0657             _for6_exit:
0371   0657             _for5_update:
0372   0657 2C FF FF      mov b, [bp + -1] ; i
0373   065A FD 77         inc b
0374   065C D7            push a
0375   065D 11            mov a, b
0376   065E 45 FF FF      mov [bp + -1], a ; i
0377   0661 E4            pop a
0378   0662 0A D9 05      jmp _for5_cond
0379   0665             _for5_exit:
0380   0665             _for7_init:
0381   0665 26 01 00      mov b, 1
0382   0668 D7            push a
0383   0669 11            mov a, b
0384   066A 45 FF FF      mov [bp + -1], a ; i
0385   066D E4            pop a
0386   066E             _for7_cond:
0387   066E 2C FF FF      mov b, [bp + -1] ; i
0388   0671 D7            push a
0389   0672 11            mov a, b
0390   0673 26 1E 00      mov b, 30
0391   0676 D7            push a
0392   0677 11            mov a, b
0393   0678 26 01 00      mov b, 1
0394   067B 60            sub a, b
0395   067C 27            mov b, a
0396   067D E4            pop a
0397   067E B0            cmp a, b
0398   067F 0E            lodflgs
0399   0680 87 02         and al, %00000010 ; <
0400   0682 B9 00         cmp al, 0
0401   0684 0E            lodflgs
0402   0685 96            not al
0403   0686 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0404   0688 22 00         mov ah, 0
0405   068A 27            mov b, a
0406   068B E4            pop a
0407   068C C0 00 00      cmp b, 0
0408   068F C6 C0 08      je _for7_exit
0409   0692             _for7_block:
0410   0692             _for8_init:
0411   0692 26 01 00      mov b, 1
0412   0695 D7            push a
0413   0696 11            mov a, b
0414   0697 45 FD FF      mov [bp + -3], a ; j
0415   069A E4            pop a
0416   069B             _for8_cond:
0417   069B 2C FD FF      mov b, [bp + -3] ; j
0418   069E D7            push a
0419   069F 11            mov a, b
0420   06A0 26 1E 00      mov b, 30
0421   06A3 D7            push a
0422   06A4 11            mov a, b
0423   06A5 26 01 00      mov b, 1
0424   06A8 60            sub a, b
0425   06A9 27            mov b, a
0426   06AA E4            pop a
0427   06AB B0            cmp a, b
0428   06AC 0E            lodflgs
0429   06AD 87 02         and al, %00000010 ; <
0430   06AF B9 00         cmp al, 0
0431   06B1 0E            lodflgs
0432   06B2 96            not al
0433   06B3 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0434   06B5 22 00         mov ah, 0
0435   06B7 27            mov b, a
0436   06B8 E4            pop a
0437   06B9 C0 00 00      cmp b, 0
0438   06BC C6 B2 08      je _for8_exit
0439   06BF             _for8_block:
0440   06BF 26 00 00      mov b, 0
0441   06C2 D7            push a
0442   06C3 11            mov a, b
0443   06C4 45 F7 FF      mov [bp + -9], a ; count
0444   06C7 E4            pop a
0445   06C8             _for9_init:
0446   06C8 2C FF FF      mov b, [bp + -1] ; i
0447   06CB D7            push a
0448   06CC 11            mov a, b
0449   06CD 26 01 00      mov b, 1
0450   06D0 60            sub a, b
0451   06D1 27            mov b, a
0452   06D2 11            mov a, b
0453   06D3 45 FB FF      mov [bp + -5], a ; ni
0454   06D6 E4            pop a
0455   06D7             _for9_cond:
0456   06D7 2C FB FF      mov b, [bp + -5] ; ni
0457   06DA D7            push a
0458   06DB 11            mov a, b
0459   06DC 2C FF FF      mov b, [bp + -1] ; i
0460   06DF D7            push a
0461   06E0 11            mov a, b
0462   06E1 26 01 00      mov b, 1
0463   06E4 54            add a, b
0464   06E5 27            mov b, a
0465   06E6 E4            pop a
0466   06E7 B0            cmp a, b
0467   06E8 0E            lodflgs
0468   06E9 87 03         and al, %00000011 ; <=
0469   06EB B9 00         cmp al, 0
0470   06ED 0E            lodflgs
0471   06EE 96            not al
0472   06EF 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0473   06F1 22 00         mov ah, 0
0474   06F3 27            mov b, a
0475   06F4 E4            pop a
0476   06F5 C0 00 00      cmp b, 0
0477   06F8 C6 F2 07      je _for9_exit
0478   06FB             _for9_block:
0479   06FB             _for10_init:
0480   06FB 2C FD FF      mov b, [bp + -3] ; j
0481   06FE D7            push a
0482   06FF 11            mov a, b
0483   0700 26 01 00      mov b, 1
0484   0703 60            sub a, b
0485   0704 27            mov b, a
0486   0705 11            mov a, b
0487   0706 45 F9 FF      mov [bp + -7], a ; nj
0488   0709 E4            pop a
0489   070A             _for10_cond:
0490   070A 2C F9 FF      mov b, [bp + -7] ; nj
0491   070D D7            push a
0492   070E 11            mov a, b
0493   070F 2C FD FF      mov b, [bp + -3] ; j
0494   0712 D7            push a
0495   0713 11            mov a, b
0496   0714 26 01 00      mov b, 1
0497   0717 54            add a, b
0498   0718 27            mov b, a
0499   0719 E4            pop a
0500   071A B0            cmp a, b
0501   071B 0E            lodflgs
0502   071C 87 03         and al, %00000011 ; <=
0503   071E B9 00         cmp al, 0
0504   0720 0E            lodflgs
0505   0721 96            not al
0506   0722 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0507   0724 22 00         mov ah, 0
0508   0726 27            mov b, a
0509   0727 E4            pop a
0510   0728 C0 00 00      cmp b, 0
0511   072B C6 E4 07      je _for10_exit
0512   072E             _for10_block:
0513   072E             _if11_cond:
0514   072E 2C FB FF      mov b, [bp + -5] ; ni
0515   0731 D7            push a
0516   0732 11            mov a, b
0517   0733 26 1E 00      mov b, 30
0518   0736 B0            cmp a, b
0519   0737 0E            lodflgs
0520   0738 87 02         and al, %00000010 ; <
0521   073A B9 00         cmp al, 0
0522   073C 0E            lodflgs
0523   073D 96            not al
0524   073E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0525   0740 22 00         mov ah, 0
0526   0742 27            mov b, a
0527   0743 11            mov a, b
0528   0744 AF 00 00      cmp a, 0
0529   0747 0E            lodflgs
0530   0748 96            not al
0531   0749 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0532   074B 2C F9 FF      mov b, [bp + -7] ; nj
0533   074E D7            push a
0534   074F 11            mov a, b
0535   0750 26 1E 00      mov b, 30
0536   0753 B0            cmp a, b
0537   0754 0E            lodflgs
0538   0755 87 02         and al, %00000010 ; <
0539   0757 B9 00         cmp al, 0
0540   0759 0E            lodflgs
0541   075A 96            not al
0542   075B 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0543   075D 22 00         mov ah, 0
0544   075F 27            mov b, a
0545   0760 C0 00 00      cmp b, 0
0546   0763 0E            lodflgs
0547   0764 96            not al
0548   0765 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0549   0767 22 00         mov ah, 0
0550   0769 27            mov b, a
0551   076A E4            pop a
0552   076B 86            and a, b
0553   076C 27            mov b, a
0554   076D E4            pop a
0555   076E C0 00 00      cmp b, 0
0556   0771 C6 D6 07      je _if11_exit
0557   0774             _if11_true:
0558   0774             _if12_cond:
0559   0774 2C FB FF      mov b, [bp + -5] ; ni
0560   0777 D7            push a
0561   0778 11            mov a, b
0562   0779 2C FF FF      mov b, [bp + -1] ; i
0563   077C B0            cmp a, b
0564   077D 0E            lodflgs
0565   077E 87 01         and al, %00000001
0566   0780 8F 01         xor al, %00000001 ; !=
0567   0782 B9 00         cmp al, 0
0568   0784 0E            lodflgs
0569   0785 96            not al
0570   0786 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0571   0788 22 00         mov ah, 0
0572   078A 27            mov b, a
0573   078B 11            mov a, b
0574   078C 2C F9 FF      mov b, [bp + -7] ; nj
0575   078F D7            push a
0576   0790 11            mov a, b
0577   0791 2C FD FF      mov b, [bp + -3] ; j
0578   0794 B0            cmp a, b
0579   0795 0E            lodflgs
0580   0796 87 01         and al, %00000001
0581   0798 8F 01         xor al, %00000001 ; !=
0582   079A B9 00         cmp al, 0
0583   079C 0E            lodflgs
0584   079D 96            not al
0585   079E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0586   07A0 22 00         mov ah, 0
0587   07A2 27            mov b, a
0588   07A3 E4            pop a
0589   07A4 8A            or a, b
0590   07A5 27            mov b, a
0591   07A6 E4            pop a
0592   07A7 C0 00 00      cmp b, 0
0593   07AA C6 D3 07      je _if12_exit
0594   07AD             _if12_true:
0595   07AD 2C F7 FF      mov b, [bp + -9] ; count
0596   07B0 D7            push a
0597   07B1 11            mov a, b
0598   07B2 29 61 10      mov b, [curr_state]
0599   07B5 D7            push a
0600   07B6 74            mov d, b
0601   07B7 2C FB FF      mov b, [bp + -5] ; ni
0602   07BA 10 3C 00      mov a, 60
0603   07BD AC            mul a, b
0604   07BE 5A            add d, b
0605   07BF 2C F9 FF      mov b, [bp + -7] ; nj
0606   07C2 10 02 00      mov a, 2
0607   07C5 AC            mul a, b
0608   07C6 5A            add d, b
0609   07C7 2A            mov b, [d]
0610   07C8 E4            pop a
0611   07C9 54            add a, b
0612   07CA 27            mov b, a
0613   07CB 11            mov a, b
0614   07CC 45 F7 FF      mov [bp + -9], a ; count
0615   07CF E4            pop a
0616   07D0 0A D3 07      jmp _if12_exit
0617   07D3             _if12_exit:
0618   07D3 0A D6 07      jmp _if11_exit
0619   07D6             _if11_exit:
0620   07D6             _for10_update:
0621   07D6 2C F9 FF      mov b, [bp + -7] ; nj
0622   07D9 FD 77         inc b
0623   07DB D7            push a
0624   07DC 11            mov a, b
0625   07DD 45 F9 FF      mov [bp + -7], a ; nj
0626   07E0 E4            pop a
0627   07E1 0A 0A 07      jmp _for10_cond
0628   07E4             _for10_exit:
0629   07E4             _for9_update:
0630   07E4 2C FB FF      mov b, [bp + -5] ; ni
0631   07E7 FD 77         inc b
0632   07E9 D7            push a
0633   07EA 11            mov a, b
0634   07EB 45 FB FF      mov [bp + -5], a ; ni
0635   07EE E4            pop a
0636   07EF 0A D7 06      jmp _for9_cond
0637   07F2             _for9_exit:
0638   07F2             _if13_cond:
0639   07F2 29 61 10      mov b, [curr_state]
0640   07F5 D7            push a
0641   07F6 74            mov d, b
0642   07F7 2C FF FF      mov b, [bp + -1] ; i
0643   07FA 10 3C 00      mov a, 60
0644   07FD AC            mul a, b
0645   07FE 5A            add d, b
0646   07FF 2C FD FF      mov b, [bp + -3] ; j
0647   0802 10 02 00      mov a, 2
0648   0805 AC            mul a, b
0649   0806 5A            add d, b
0650   0807 2A            mov b, [d]
0651   0808 E4            pop a
0652   0809 C0 00 00      cmp b, 0
0653   080C C6 6A 08      je _if13_else
0654   080F             _if13_true:
0655   080F             _if14_cond:
0656   080F 2C F7 FF      mov b, [bp + -9] ; count
0657   0812 D7            push a
0658   0813 11            mov a, b
0659   0814 26 02 00      mov b, 2
0660   0817 B0            cmp a, b
0661   0818 0E            lodflgs
0662   0819 87 02         and al, %00000010 ; <
0663   081B B9 00         cmp al, 0
0664   081D 0E            lodflgs
0665   081E 96            not al
0666   081F 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0667   0821 22 00         mov ah, 0
0668   0823 27            mov b, a
0669   0824 11            mov a, b
0670   0825 2C F7 FF      mov b, [bp + -9] ; count
0671   0828 D7            push a
0672   0829 11            mov a, b
0673   082A 26 03 00      mov b, 3
0674   082D B0            cmp a, b
0675   082E 0E            lodflgs
0676   082F 87 03         and al, %00000011
0677   0831 B9 00         cmp al, %00000000
0678   0833 0E            lodflgs
0679   0834 87 01         and al, %00000001 ; >
0680   0836 B9 00         cmp al, 0
0681   0838 0E            lodflgs
0682   0839 96            not al
0683   083A 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0684   083C 22 00         mov ah, 0
0685   083E 27            mov b, a
0686   083F E4            pop a
0687   0840 8A            or a, b
0688   0841 27            mov b, a
0689   0842 E4            pop a
0690   0843 C0 00 00      cmp b, 0
0691   0846 C6 67 08      je _if14_exit
0692   0849             _if14_true:
0693   0849 29 6B 17      mov b, [next_state]
0694   084C 74            mov d, b
0695   084D 2C FF FF      mov b, [bp + -1] ; i
0696   0850 10 3C 00      mov a, 60
0697   0853 AC            mul a, b
0698   0854 5A            add d, b
0699   0855 2C FD FF      mov b, [bp + -3] ; j
0700   0858 10 02 00      mov a, 2
0701   085B AC            mul a, b
0702   085C 5A            add d, b
0703   085D DA            push d
0704   085E 26 00 00      mov b, 0
0705   0861 E7            pop d
0706   0862 11            mov a, b
0707   0863 43            mov [d], a
0708   0864 0A 67 08      jmp _if14_exit
0709   0867             _if14_exit:
0710   0867 0A A4 08      jmp _if13_exit
0711   086A             _if13_else:
0712   086A             _if15_cond:
0713   086A 2C F7 FF      mov b, [bp + -9] ; count
0714   086D D7            push a
0715   086E 11            mov a, b
0716   086F 26 03 00      mov b, 3
0717   0872 B0            cmp a, b
0718   0873 0E            lodflgs
0719   0874 87 01         and al, %00000001 ; ==
0720   0876 B9 00         cmp al, 0
0721   0878 0E            lodflgs
0722   0879 96            not al
0723   087A 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0724   087C 22 00         mov ah, 0
0725   087E 27            mov b, a
0726   087F E4            pop a
0727   0880 C0 00 00      cmp b, 0
0728   0883 C6 A4 08      je _if15_exit
0729   0886             _if15_true:
0730   0886 29 6B 17      mov b, [next_state]
0731   0889 74            mov d, b
0732   088A 2C FF FF      mov b, [bp + -1] ; i
0733   088D 10 3C 00      mov a, 60
0734   0890 AC            mul a, b
0735   0891 5A            add d, b
0736   0892 2C FD FF      mov b, [bp + -3] ; j
0737   0895 10 02 00      mov a, 2
0738   0898 AC            mul a, b
0739   0899 5A            add d, b
0740   089A DA            push d
0741   089B 26 01 00      mov b, 1
0742   089E E7            pop d
0743   089F 11            mov a, b
0744   08A0 43            mov [d], a
0745   08A1 0A A4 08      jmp _if15_exit
0746   08A4             _if15_exit:
0747   08A4             _if13_exit:
0748   08A4             _for8_update:
0749   08A4 2C FD FF      mov b, [bp + -3] ; j
0750   08A7 FD 77         inc b
0751   08A9 D7            push a
0752   08AA 11            mov a, b
0753   08AB 45 FD FF      mov [bp + -3], a ; j
0754   08AE E4            pop a
0755   08AF 0A 9B 06      jmp _for8_cond
0756   08B2             _for8_exit:
0757   08B2             _for7_update:
0758   08B2 2C FF FF      mov b, [bp + -1] ; i
0759   08B5 FD 77         inc b
0760   08B7 D7            push a
0761   08B8 11            mov a, b
0762   08B9 45 FF FF      mov [bp + -1], a ; i
0763   08BC E4            pop a
0764   08BD 0A 6E 06      jmp _for7_cond
0765   08C0             _for7_exit:
0766   08C0             _for16_init:
0767   08C0 26 00 00      mov b, 0
0768   08C3 D7            push a
0769   08C4 11            mov a, b
0770   08C5 45 FF FF      mov [bp + -1], a ; i
0771   08C8 E4            pop a
0772   08C9             _for16_cond:
0773   08C9 2C FF FF      mov b, [bp + -1] ; i
0774   08CC D7            push a
0775   08CD 11            mov a, b
0776   08CE 26 1E 00      mov b, 30
0777   08D1 B0            cmp a, b
0778   08D2 0E            lodflgs
0779   08D3 87 02         and al, %00000010 ; <
0780   08D5 B9 00         cmp al, 0
0781   08D7 0E            lodflgs
0782   08D8 96            not al
0783   08D9 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0784   08DB 22 00         mov ah, 0
0785   08DD 27            mov b, a
0786   08DE E4            pop a
0787   08DF C0 00 00      cmp b, 0
0788   08E2 C6 55 09      je _for16_exit
0789   08E5             _for16_block:
0790   08E5             _for17_init:
0791   08E5 26 00 00      mov b, 0
0792   08E8 D7            push a
0793   08E9 11            mov a, b
0794   08EA 45 FD FF      mov [bp + -3], a ; j
0795   08ED E4            pop a
0796   08EE             _for17_cond:
0797   08EE 2C FD FF      mov b, [bp + -3] ; j
0798   08F1 D7            push a
0799   08F2 11            mov a, b
0800   08F3 26 1E 00      mov b, 30
0801   08F6 B0            cmp a, b
0802   08F7 0E            lodflgs
0803   08F8 87 02         and al, %00000010 ; <
0804   08FA B9 00         cmp al, 0
0805   08FC 0E            lodflgs
0806   08FD 96            not al
0807   08FE 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0808   0900 22 00         mov ah, 0
0809   0902 27            mov b, a
0810   0903 E4            pop a
0811   0904 C0 00 00      cmp b, 0
0812   0907 C6 47 09      je _for17_exit
0813   090A             _for17_block:
0814   090A 29 61 10      mov b, [curr_state]
0815   090D 74            mov d, b
0816   090E 2C FF FF      mov b, [bp + -1] ; i
0817   0911 10 3C 00      mov a, 60
0818   0914 AC            mul a, b
0819   0915 5A            add d, b
0820   0916 2C FD FF      mov b, [bp + -3] ; j
0821   0919 10 02 00      mov a, 2
0822   091C AC            mul a, b
0823   091D 5A            add d, b
0824   091E DA            push d
0825   091F 29 6B 17      mov b, [next_state]
0826   0922 D7            push a
0827   0923 74            mov d, b
0828   0924 2C FF FF      mov b, [bp + -1] ; i
0829   0927 10 3C 00      mov a, 60
0830   092A AC            mul a, b
0831   092B 5A            add d, b
0832   092C 2C FD FF      mov b, [bp + -3] ; j
0833   092F 10 02 00      mov a, 2
0834   0932 AC            mul a, b
0835   0933 5A            add d, b
0836   0934 2A            mov b, [d]
0837   0935 E4            pop a
0838   0936 E7            pop d
0839   0937 11            mov a, b
0840   0938 43            mov [d], a
0841   0939             _for17_update:
0842   0939 2C FD FF      mov b, [bp + -3] ; j
0843   093C FD 77         inc b
0844   093E D7            push a
0845   093F 11            mov a, b
0846   0940 45 FD FF      mov [bp + -3], a ; j
0847   0943 E4            pop a
0848   0944 0A EE 08      jmp _for17_cond
0849   0947             _for17_exit:
0850   0947             _for16_update:
0851   0947 2C FF FF      mov b, [bp + -1] ; i
0852   094A FD 77         inc b
0853   094C D7            push a
0854   094D 11            mov a, b
0855   094E 45 FF FF      mov [bp + -1], a ; i
0856   0951 E4            pop a
0857   0952 0A C9 08      jmp _for16_cond
0858   0955             _for16_exit:
0859   0955 F9            leave
0860   0956 09            ret
0861   0957             ; --- END TEXT BLOCK
0862   0957             
0863   0957             ; --- BEGIN DATA BLOCK
0864   0957             curr_state_data: 
0865   0957 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0865   095B 00 00 00 00 
0865   095F 00 00 00 00 
0865   0963 00 00 00 00 
0865   0967 00 00 00 00 
0865   096B 00 00 00 00 
0865   096F 00 00 00 00 
0865   0973 00 00 00 00 
0865   0977 00 00 00 00 
0865   097B 00 00 00 00 
0865   097F 00 00 00 00 
0865   0983 00 00 00 00 
0865   0987 00 00 00 00 
0865   098B 00 00 00 00 
0865   098F 00 00 00 00 
0866   0993 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 
0866   0997 00 00 01 00 
0866   099B 01 00 01 00 
0866   099F 01 00 01 00 
0866   09A3 00 00 00 00 
0866   09A7 00 00 00 00 
0866   09AB 01 00 01 00 
0866   09AF 00 00 00 00 
0866   09B3 00 00 00 00 
0866   09B7 00 00 01 00 
0866   09BB 01 00 01 00 
0866   09BF 01 00 00 00 
0866   09C3 00 00 00 00 
0866   09C7 01 00 00 00 
0866   09CB 00 00 00 00 
0867   09CF 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 
0867   09D3 00 00 01 00 
0867   09D7 01 00 00 00 
0867   09DB 00 00 00 00 
0867   09DF 00 00 01 00 
0867   09E3 00 00 01 00 
0867   09E7 01 00 01 00 
0867   09EB 00 00 00 00 
0867   09EF 00 00 00 00 
0867   09F3 00 00 01 00 
0867   09F7 01 00 01 00 
0867   09FB 01 00 00 00 
0867   09FF 00 00 00 00 
0867   0A03 01 00 00 00 
0867   0A07 00 00 00 00 
0868   0A0B 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0868   0A0F 01 00 01 00 
0868   0A13 01 00 00 00 
0868   0A17 01 00 01 00 
0868   0A1B 00 00 01 00 
0868   0A1F 00 00 00 00 
0868   0A23 00 00 01 00 
0868   0A27 00 00 00 00 
0868   0A2B 00 00 00 00 
0868   0A2F 00 00 00 00 
0868   0A33 00 00 00 00 
0868   0A37 00 00 01 00 
0868   0A3B 00 00 00 00 
0868   0A3F 01 00 00 00 
0868   0A43 00 00 00 00 
0869   0A47 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0869   0A4B 00 00 01 00 
0869   0A4F 01 00 00 00 
0869   0A53 01 00 00 00 
0869   0A57 00 00 01 00 
0869   0A5B 00 00 00 00 
0869   0A5F 00 00 01 00 
0869   0A63 01 00 01 00 
0869   0A67 01 00 01 00 
0869   0A6B 00 00 00 00 
0869   0A6F 00 00 00 00 
0869   0A73 00 00 01 00 
0869   0A77 00 00 00 00 
0869   0A7B 01 00 00 00 
0869   0A7F 00 00 00 00 
0870   0A83 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0870   0A87 00 00 01 00 
0870   0A8B 00 00 00 00 
0870   0A8F 01 00 00 00 
0870   0A93 00 00 01 00 
0870   0A97 01 00 00 00 
0870   0A9B 00 00 00 00 
0870   0A9F 01 00 00 00 
0870   0AA3 00 00 01 00 
0870   0AA7 01 00 01 00 
0870   0AAB 00 00 00 00 
0870   0AAF 00 00 01 00 
0870   0AB3 00 00 00 00 
0870   0AB7 01 00 00 00 
0870   0ABB 00 00 00 00 
0871   0ABF 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
0871   0AC3 00 00 01 00 
0871   0AC7 00 00 00 00 
0871   0ACB 01 00 00 00 
0871   0ACF 00 00 00 00 
0871   0AD3 01 00 00 00 
0871   0AD7 00 00 00 00 
0871   0ADB 01 00 00 00 
0871   0ADF 00 00 00 00 
0871   0AE3 00 00 00 00 
0871   0AE7 00 00 00 00 
0871   0AEB 00 00 01 00 
0871   0AEF 00 00 00 00 
0871   0AF3 00 00 00 00 
0871   0AF7 00 00 00 00 
0872   0AFB 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
0872   0AFF 00 00 01 00 
0872   0B03 00 00 00 00 
0872   0B07 00 00 00 00 
0872   0B0B 00 00 00 00 
0872   0B0F 01 00 01 00 
0872   0B13 00 00 01 00 
0872   0B17 01 00 00 00 
0872   0B1B 00 00 00 00 
0872   0B1F 00 00 01 00 
0872   0B23 01 00 01 00 
0872   0B27 01 00 01 00 
0872   0B2B 00 00 00 00 
0872   0B2F 00 00 00 00 
0872   0B33 00 00 00 00 
0873   0B37 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 
0873   0B3B 00 00 01 00 
0873   0B3F 01 00 01 00 
0873   0B43 01 00 01 00 
0873   0B47 00 00 00 00 
0873   0B4B 00 00 00 00 
0873   0B4F 01 00 01 00 
0873   0B53 00 00 00 00 
0873   0B57 00 00 00 00 
0873   0B5B 00 00 01 00 
0873   0B5F 01 00 01 00 
0873   0B63 01 00 00 00 
0873   0B67 00 00 00 00 
0873   0B6B 01 00 00 00 
0873   0B6F 00 00 00 00 
0874   0B73 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 
0874   0B77 00 00 01 00 
0874   0B7B 01 00 00 00 
0874   0B7F 00 00 00 00 
0874   0B83 00 00 01 00 
0874   0B87 00 00 01 00 
0874   0B8B 01 00 01 00 
0874   0B8F 00 00 00 00 
0874   0B93 00 00 00 00 
0874   0B97 00 00 01 00 
0874   0B9B 01 00 01 00 
0874   0B9F 01 00 00 00 
0874   0BA3 00 00 00 00 
0874   0BA7 01 00 00 00 
0874   0BAB 00 00 00 00 
0875   0BAF 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0875   0BB3 01 00 01 00 
0875   0BB7 01 00 00 00 
0875   0BBB 01 00 01 00 
0875   0BBF 00 00 01 00 
0875   0BC3 00 00 00 00 
0875   0BC7 00 00 01 00 
0875   0BCB 00 00 00 00 
0875   0BCF 00 00 00 00 
0875   0BD3 00 00 00 00 
0875   0BD7 00 00 00 00 
0875   0BDB 00 00 01 00 
0875   0BDF 00 00 00 00 
0875   0BE3 01 00 00 00 
0875   0BE7 00 00 00 00 
0876   0BEB 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0876   0BEF 00 00 01 00 
0876   0BF3 01 00 00 00 
0876   0BF7 01 00 00 00 
0876   0BFB 00 00 01 00 
0876   0BFF 00 00 00 00 
0876   0C03 00 00 01 00 
0876   0C07 01 00 01 00 
0876   0C0B 01 00 01 00 
0876   0C0F 00 00 00 00 
0876   0C13 00 00 00 00 
0876   0C17 00 00 01 00 
0876   0C1B 00 00 00 00 
0876   0C1F 01 00 00 00 
0876   0C23 00 00 00 00 
0877   0C27 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
0877   0C2B 00 00 01 00 
0877   0C2F 00 00 00 00 
0877   0C33 00 00 00 00 
0877   0C37 00 00 00 00 
0877   0C3B 00 00 00 00 
0877   0C3F 00 00 01 00 
0877   0C43 01 00 01 00 
0877   0C47 01 00 01 00 
0877   0C4B 01 00 01 00 
0877   0C4F 01 00 01 00 
0877   0C53 01 00 01 00 
0877   0C57 00 00 00 00 
0877   0C5B 00 00 00 00 
0877   0C5F 00 00 00 00 
0878   0C63 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 
0878   0C67 00 00 01 00 
0878   0C6B 01 00 01 00 
0878   0C6F 01 00 01 00 
0878   0C73 00 00 00 00 
0878   0C77 00 00 00 00 
0878   0C7B 01 00 01 00 
0878   0C7F 00 00 00 00 
0878   0C83 00 00 00 00 
0878   0C87 00 00 01 00 
0878   0C8B 01 00 01 00 
0878   0C8F 01 00 00 00 
0878   0C93 00 00 00 00 
0878   0C97 01 00 00 00 
0878   0C9B 00 00 00 00 
0879   0C9F 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 
0879   0CA3 00 00 01 00 
0879   0CA7 01 00 00 00 
0879   0CAB 00 00 00 00 
0879   0CAF 00 00 01 00 
0879   0CB3 00 00 01 00 
0879   0CB7 01 00 01 00 
0879   0CBB 00 00 00 00 
0879   0CBF 00 00 00 00 
0879   0CC3 00 00 01 00 
0879   0CC7 01 00 01 00 
0879   0CCB 01 00 00 00 
0879   0CCF 00 00 00 00 
0879   0CD3 01 00 00 00 
0879   0CD7 00 00 00 00 
0880   0CDB 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 
0880   0CDF 00 00 01 00 
0880   0CE3 01 00 01 00 
0880   0CE7 01 00 01 00 
0880   0CEB 00 00 00 00 
0880   0CEF 00 00 00 00 
0880   0CF3 01 00 01 00 
0880   0CF7 00 00 00 00 
0880   0CFB 00 00 00 00 
0880   0CFF 00 00 01 00 
0880   0D03 01 00 01 00 
0880   0D07 01 00 00 00 
0880   0D0B 00 00 00 00 
0880   0D0F 01 00 00 00 
0880   0D13 00 00 00 00 
0881   0D17 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 
0881   0D1B 00 00 01 00 
0881   0D1F 01 00 00 00 
0881   0D23 00 00 00 00 
0881   0D27 00 00 01 00 
0881   0D2B 00 00 01 00 
0881   0D2F 01 00 01 00 
0881   0D33 00 00 00 00 
0881   0D37 00 00 00 00 
0881   0D3B 00 00 01 00 
0881   0D3F 01 00 01 00 
0881   0D43 01 00 00 00 
0881   0D47 00 00 00 00 
0881   0D4B 01 00 00 00 
0881   0D4F 00 00 00 00 
0882   0D53 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0882   0D57 01 00 01 00 
0882   0D5B 01 00 00 00 
0882   0D5F 01 00 01 00 
0882   0D63 00 00 01 00 
0882   0D67 00 00 00 00 
0882   0D6B 00 00 01 00 
0882   0D6F 00 00 00 00 
0882   0D73 00 00 00 00 
0882   0D77 00 00 00 00 
0882   0D7B 00 00 00 00 
0882   0D7F 00 00 01 00 
0882   0D83 00 00 00 00 
0882   0D87 01 00 00 00 
0882   0D8B 00 00 00 00 
0883   0D8F 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0883   0D93 00 00 01 00 
0883   0D97 01 00 00 00 
0883   0D9B 01 00 00 00 
0883   0D9F 00 00 01 00 
0883   0DA3 00 00 00 00 
0883   0DA7 00 00 01 00 
0883   0DAB 01 00 01 00 
0883   0DAF 01 00 01 00 
0883   0DB3 00 00 00 00 
0883   0DB7 00 00 00 00 
0883   0DBB 00 00 01 00 
0883   0DBF 00 00 00 00 
0883   0DC3 01 00 00 00 
0883   0DC7 00 00 00 00 
0884   0DCB 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0884   0DCF 00 00 01 00 
0884   0DD3 01 00 00 00 
0884   0DD7 01 00 00 00 
0884   0DDB 00 00 01 00 
0884   0DDF 00 00 00 00 
0884   0DE3 00 00 01 00 
0884   0DE7 01 00 01 00 
0884   0DEB 01 00 01 00 
0884   0DEF 00 00 00 00 
0884   0DF3 00 00 00 00 
0884   0DF7 00 00 01 00 
0884   0DFB 00 00 00 00 
0884   0DFF 01 00 00 00 
0884   0E03 00 00 00 00 
0885   0E07 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0885   0E0B 00 00 01 00 
0885   0E0F 01 00 00 00 
0885   0E13 01 00 00 00 
0885   0E17 00 00 01 00 
0885   0E1B 00 00 00 00 
0885   0E1F 00 00 01 00 
0885   0E23 01 00 01 00 
0885   0E27 01 00 01 00 
0885   0E2B 00 00 00 00 
0885   0E2F 00 00 00 00 
0885   0E33 00 00 01 00 
0885   0E37 00 00 00 00 
0885   0E3B 01 00 00 00 
0885   0E3F 00 00 00 00 
0886   0E43 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0886   0E47 00 00 01 00 
0886   0E4B 01 00 00 00 
0886   0E4F 01 00 00 00 
0886   0E53 00 00 01 00 
0886   0E57 00 00 00 00 
0886   0E5B 00 00 01 00 
0886   0E5F 01 00 01 00 
0886   0E63 01 00 01 00 
0886   0E67 00 00 00 00 
0886   0E6B 00 00 00 00 
0886   0E6F 00 00 01 00 
0886   0E73 00 00 00 00 
0886   0E77 01 00 00 00 
0886   0E7B 00 00 00 00 
0887   0E7F 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0887   0E83 00 00 01 00 
0887   0E87 01 00 00 00 
0887   0E8B 01 00 00 00 
0887   0E8F 00 00 01 00 
0887   0E93 00 00 00 00 
0887   0E97 00 00 01 00 
0887   0E9B 01 00 01 00 
0887   0E9F 01 00 01 00 
0887   0EA3 00 00 00 00 
0887   0EA7 00 00 00 00 
0887   0EAB 00 00 01 00 
0887   0EAF 00 00 00 00 
0887   0EB3 01 00 00 00 
0887   0EB7 00 00 00 00 
0888   0EBB 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 
0888   0EBF 00 00 01 00 
0888   0EC3 01 00 01 00 
0888   0EC7 01 00 01 00 
0888   0ECB 00 00 00 00 
0888   0ECF 00 00 00 00 
0888   0ED3 01 00 01 00 
0888   0ED7 00 00 00 00 
0888   0EDB 00 00 00 00 
0888   0EDF 00 00 01 00 
0888   0EE3 01 00 01 00 
0888   0EE7 01 00 00 00 
0888   0EEB 00 00 00 00 
0888   0EEF 01 00 00 00 
0888   0EF3 00 00 00 00 
0889   0EF7 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 
0889   0EFB 00 00 01 00 
0889   0EFF 01 00 00 00 
0889   0F03 00 00 00 00 
0889   0F07 00 00 01 00 
0889   0F0B 00 00 01 00 
0889   0F0F 01 00 01 00 
0889   0F13 00 00 00 00 
0889   0F17 00 00 00 00 
0889   0F1B 00 00 01 00 
0889   0F1F 01 00 01 00 
0889   0F23 01 00 00 00 
0889   0F27 00 00 00 00 
0889   0F2B 01 00 00 00 
0889   0F2F 00 00 00 00 
0890   0F33 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0890   0F37 01 00 01 00 
0890   0F3B 01 00 00 00 
0890   0F3F 01 00 01 00 
0890   0F43 00 00 01 00 
0890   0F47 00 00 00 00 
0890   0F4B 00 00 01 00 
0890   0F4F 00 00 00 00 
0890   0F53 00 00 00 00 
0890   0F57 00 00 00 00 
0890   0F5B 00 00 00 00 
0890   0F5F 00 00 01 00 
0890   0F63 00 00 00 00 
0890   0F67 01 00 00 00 
0890   0F6B 00 00 00 00 
0891   0F6F 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0891   0F73 00 00 01 00 
0891   0F77 01 00 00 00 
0891   0F7B 01 00 00 00 
0891   0F7F 00 00 01 00 
0891   0F83 00 00 00 00 
0891   0F87 00 00 01 00 
0891   0F8B 01 00 01 00 
0891   0F8F 01 00 01 00 
0891   0F93 00 00 00 00 
0891   0F97 00 00 00 00 
0891   0F9B 00 00 01 00 
0891   0F9F 00 00 00 00 
0891   0FA3 01 00 00 00 
0891   0FA7 00 00 00 00 
0892   0FAB 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0892   0FAF 01 00 01 00 
0892   0FB3 01 00 00 00 
0892   0FB7 01 00 01 00 
0892   0FBB 00 00 01 00 
0892   0FBF 00 00 00 00 
0892   0FC3 00 00 01 00 
0892   0FC7 00 00 00 00 
0892   0FCB 00 00 00 00 
0892   0FCF 00 00 00 00 
0892   0FD3 00 00 00 00 
0892   0FD7 00 00 01 00 
0892   0FDB 00 00 00 00 
0892   0FDF 01 00 00 00 
0892   0FE3 00 00 00 00 
0893   0FE7 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 
0893   0FEB 00 00 01 00 
0893   0FEF 01 00 00 00 
0893   0FF3 01 00 00 00 
0893   0FF7 00 00 01 00 
0893   0FFB 00 00 00 00 
0893   0FFF 00 00 01 00 
0893   1003 01 00 01 00 
0893   1007 01 00 01 00 
0893   100B 00 00 00 00 
0893   100F 00 00 00 00 
0893   1013 00 00 01 00 
0893   1017 00 00 00 00 
0893   101B 01 00 00 00 
0893   101F 00 00 00 00 
0894   1023 00 00       .dw 
0895   1025 00 00 00 00 .fill 60, 0
0895   1029 00 00 00 00 
0895   102D 00 00 00 00 
0895   1031 00 00 00 00 
0895   1035 00 00 00 00 
0895   1039 00 00 00 00 
0895   103D 00 00 00 00 
0895   1041 00 00 00 00 
0895   1045 00 00 00 00 
0895   1049 00 00 00 00 
0895   104D 00 00 00 00 
0895   1051 00 00 00 00 
0895   1055 00 00 00 00 
0895   1059 00 00 00 00 
0895   105D 00 00 00 00 
0896   1061 57 09       curr_state: .dw curr_state_data
0897   1063 00 00 00 00 next_state_data: .fill 1800, 0
0897   1067 00 00 00 00 
0897   106B 00 00 00 00 
0897   106F 00 00 00 00 
0897   1073 00 00 00 00 
0897   1077 00 00 00 00 
0897   107B 00 00 00 00 
0897   107F 00 00 00 00 
0897   1083 00 00 00 00 
0897   1087 00 00 00 00 
0897   108B 00 00 00 00 
0897   108F 00 00 00 00 
0897   1093 00 00 00 00 
0897   1097 00 00 00 00 
0897   109B 00 00 00 00 
0897   109F 00 00 00 00 
0897   10A3 00 00 00 00 
0897   10A7 00 00 00 00 
0897   10AB 00 00 00 00 
0897   10AF 00 00 00 00 
0897   10B3 00 00 00 00 
0897   10B7 00 00 00 00 
0897   10BB 00 00 00 00 
0897   10BF 00 00 00 00 
0897   10C3 00 00 00 00 
0897   10C7 00 00 00 00 
0897   10CB 00 00 00 00 
0897   10CF 00 00 00 00 
0897   10D3 00 00 00 00 
0897   10D7 00 00 00 00 
0897   10DB 00 00 00 00 
0897   10DF 00 00 00 00 
0897   10E3 00 00 00 00 
0897   10E7 00 00 00 00 
0897   10EB 00 00 00 00 
0897   10EF 00 00 00 00 
0897   10F3 00 00 00 00 
0897   10F7 00 00 00 00 
0897   10FB 00 00 00 00 
0897   10FF 00 00 00 00 
0897   1103 00 00 00 00 
0897   1107 00 00 00 00 
0897   110B 00 00 00 00 
0897   110F 00 00 00 00 
0897   1113 00 00 00 00 
0897   1117 00 00 00 00 
0897   111B 00 00 00 00 
0897   111F 00 00 00 00 
0897   1123 00 00 00 00 
0897   1127 00 00 00 00 
0897   112B 00 00 00 00 
0897   112F 00 00 00 00 
0897   1133 00 00 00 00 
0897   1137 00 00 00 00 
0897   113B 00 00 00 00 
0897   113F 00 00 00 00 
0897   1143 00 00 00 00 
0897   1147 00 00 00 00 
0897   114B 00 00 00 00 
0897   114F 00 00 00 00 
0897   1153 00 00 00 00 
0897   1157 00 00 00 00 
0897   115B 00 00 00 00 
0897   115F 00 00 00 00 
0897   1163 00 00 00 00 
0897   1167 00 00 00 00 
0897   116B 00 00 00 00 
0897   116F 00 00 00 00 
0897   1173 00 00 00 00 
0897   1177 00 00 00 00 
0897   117B 00 00 00 00 
0897   117F 00 00 00 00 
0897   1183 00 00 00 00 
0897   1187 00 00 00 00 
0897   118B 00 00 00 00 
0897   118F 00 00 00 00 
0897   1193 00 00 00 00 
0897   1197 00 00 00 00 
0897   119B 00 00 00 00 
0897   119F 00 00 00 00 
0897   11A3 00 00 00 00 
0897   11A7 00 00 00 00 
0897   11AB 00 00 00 00 
0897   11AF 00 00 00 00 
0897   11B3 00 00 00 00 
0897   11B7 00 00 00 00 
0897   11BB 00 00 00 00 
0897   11BF 00 00 00 00 
0897   11C3 00 00 00 00 
0897   11C7 00 00 00 00 
0897   11CB 00 00 00 00 
0897   11CF 00 00 00 00 
0897   11D3 00 00 00 00 
0897   11D7 00 00 00 00 
0897   11DB 00 00 00 00 
0897   11DF 00 00 00 00 
0897   11E3 00 00 00 00 
0897   11E7 00 00 00 00 
0897   11EB 00 00 00 00 
0897   11EF 00 00 00 00 
0897   11F3 00 00 00 00 
0897   11F7 00 00 00 00 
0897   11FB 00 00 00 00 
0897   11FF 00 00 00 00 
0897   1203 00 00 00 00 
0897   1207 00 00 00 00 
0897   120B 00 00 00 00 
0897   120F 00 00 00 00 
0897   1213 00 00 00 00 
0897   1217 00 00 00 00 
0897   121B 00 00 00 00 
0897   121F 00 00 00 00 
0897   1223 00 00 00 00 
0897   1227 00 00 00 00 
0897   122B 00 00 00 00 
0897   122F 00 00 00 00 
0897   1233 00 00 00 00 
0897   1237 00 00 00 00 
0897   123B 00 00 00 00 
0897   123F 00 00 00 00 
0897   1243 00 00 00 00 
0897   1247 00 00 00 00 
0897   124B 00 00 00 00 
0897   124F 00 00 00 00 
0897   1253 00 00 00 00 
0897   1257 00 00 00 00 
0897   125B 00 00 00 00 
0897   125F 00 00 00 00 
0897   1263 00 00 00 00 
0897   1267 00 00 00 00 
0897   126B 00 00 00 00 
0897   126F 00 00 00 00 
0897   1273 00 00 00 00 
0897   1277 00 00 00 00 
0897   127B 00 00 00 00 
0897   127F 00 00 00 00 
0897   1283 00 00 00 00 
0897   1287 00 00 00 00 
0897   128B 00 00 00 00 
0897   128F 00 00 00 00 
0897   1293 00 00 00 00 
0897   1297 00 00 00 00 
0897   129B 00 00 00 00 
0897   129F 00 00 00 00 
0897   12A3 00 00 00 00 
0897   12A7 00 00 00 00 
0897   12AB 00 00 00 00 
0897   12AF 00 00 00 00 
0897   12B3 00 00 00 00 
0897   12B7 00 00 00 00 
0897   12BB 00 00 00 00 
0897   12BF 00 00 00 00 
0897   12C3 00 00 00 00 
0897   12C7 00 00 00 00 
0897   12CB 00 00 00 00 
0897   12CF 00 00 00 00 
0897   12D3 00 00 00 00 
0897   12D7 00 00 00 00 
0897   12DB 00 00 00 00 
0897   12DF 00 00 00 00 
0897   12E3 00 00 00 00 
0897   12E7 00 00 00 00 
0897   12EB 00 00 00 00 
0897   12EF 00 00 00 00 
0897   12F3 00 00 00 00 
0897   12F7 00 00 00 00 
0897   12FB 00 00 00 00 
0897   12FF 00 00 00 00 
0897   1303 00 00 00 00 
0897   1307 00 00 00 00 
0897   130B 00 00 00 00 
0897   130F 00 00 00 00 
0897   1313 00 00 00 00 
0897   1317 00 00 00 00 
0897   131B 00 00 00 00 
0897   131F 00 00 00 00 
0897   1323 00 00 00 00 
0897   1327 00 00 00 00 
0897   132B 00 00 00 00 
0897   132F 00 00 00 00 
0897   1333 00 00 00 00 
0897   1337 00 00 00 00 
0897   133B 00 00 00 00 
0897   133F 00 00 00 00 
0897   1343 00 00 00 00 
0897   1347 00 00 00 00 
0897   134B 00 00 00 00 
0897   134F 00 00 00 00 
0897   1353 00 00 00 00 
0897   1357 00 00 00 00 
0897   135B 00 00 00 00 
0897   135F 00 00 00 00 
0897   1363 00 00 00 00 
0897   1367 00 00 00 00 
0897   136B 00 00 00 00 
0897   136F 00 00 00 00 
0897   1373 00 00 00 00 
0897   1377 00 00 00 00 
0897   137B 00 00 00 00 
0897   137F 00 00 00 00 
0897   1383 00 00 00 00 
0897   1387 00 00 00 00 
0897   138B 00 00 00 00 
0897   138F 00 00 00 00 
0897   1393 00 00 00 00 
0897   1397 00 00 00 00 
0897   139B 00 00 00 00 
0897   139F 00 00 00 00 
0897   13A3 00 00 00 00 
0897   13A7 00 00 00 00 
0897   13AB 00 00 00 00 
0897   13AF 00 00 00 00 
0897   13B3 00 00 00 00 
0897   13B7 00 00 00 00 
0897   13BB 00 00 00 00 
0897   13BF 00 00 00 00 
0897   13C3 00 00 00 00 
0897   13C7 00 00 00 00 
0897   13CB 00 00 00 00 
0897   13CF 00 00 00 00 
0897   13D3 00 00 00 00 
0897   13D7 00 00 00 00 
0897   13DB 00 00 00 00 
0897   13DF 00 00 00 00 
0897   13E3 00 00 00 00 
0897   13E7 00 00 00 00 
0897   13EB 00 00 00 00 
0897   13EF 00 00 00 00 
0897   13F3 00 00 00 00 
0897   13F7 00 00 00 00 
0897   13FB 00 00 00 00 
0897   13FF 00 00 00 00 
0897   1403 00 00 00 00 
0897   1407 00 00 00 00 
0897   140B 00 00 00 00 
0897   140F 00 00 00 00 
0897   1413 00 00 00 00 
0897   1417 00 00 00 00 
0897   141B 00 00 00 00 
0897   141F 00 00 00 00 
0897   1423 00 00 00 00 
0897   1427 00 00 00 00 
0897   142B 00 00 00 00 
0897   142F 00 00 00 00 
0897   1433 00 00 00 00 
0897   1437 00 00 00 00 
0897   143B 00 00 00 00 
0897   143F 00 00 00 00 
0897   1443 00 00 00 00 
0897   1447 00 00 00 00 
0897   144B 00 00 00 00 
0897   144F 00 00 00 00 
0897   1453 00 00 00 00 
0897   1457 00 00 00 00 
0897   145B 00 00 00 00 
0897   145F 00 00 00 00 
0897   1463 00 00 00 00 
0897   1467 00 00 00 00 
0897   146B 00 00 00 00 
0897   146F 00 00 00 00 
0897   1473 00 00 00 00 
0897   1477 00 00 00 00 
0897   147B 00 00 00 00 
0897   147F 00 00 00 00 
0897   1483 00 00 00 00 
0897   1487 00 00 00 00 
0897   148B 00 00 00 00 
0897   148F 00 00 00 00 
0897   1493 00 00 00 00 
0897   1497 00 00 00 00 
0897   149B 00 00 00 00 
0897   149F 00 00 00 00 
0897   14A3 00 00 00 00 
0897   14A7 00 00 00 00 
0897   14AB 00 00 00 00 
0897   14AF 00 00 00 00 
0897   14B3 00 00 00 00 
0897   14B7 00 00 00 00 
0897   14BB 00 00 00 00 
0897   14BF 00 00 00 00 
0897   14C3 00 00 00 00 
0897   14C7 00 00 00 00 
0897   14CB 00 00 00 00 
0897   14CF 00 00 00 00 
0897   14D3 00 00 00 00 
0897   14D7 00 00 00 00 
0897   14DB 00 00 00 00 
0897   14DF 00 00 00 00 
0897   14E3 00 00 00 00 
0897   14E7 00 00 00 00 
0897   14EB 00 00 00 00 
0897   14EF 00 00 00 00 
0897   14F3 00 00 00 00 
0897   14F7 00 00 00 00 
0897   14FB 00 00 00 00 
0897   14FF 00 00 00 00 
0897   1503 00 00 00 00 
0897   1507 00 00 00 00 
0897   150B 00 00 00 00 
0897   150F 00 00 00 00 
0897   1513 00 00 00 00 
0897   1517 00 00 00 00 
0897   151B 00 00 00 00 
0897   151F 00 00 00 00 
0897   1523 00 00 00 00 
0897   1527 00 00 00 00 
0897   152B 00 00 00 00 
0897   152F 00 00 00 00 
0897   1533 00 00 00 00 
0897   1537 00 00 00 00 
0897   153B 00 00 00 00 
0897   153F 00 00 00 00 
0897   1543 00 00 00 00 
0897   1547 00 00 00 00 
0897   154B 00 00 00 00 
0897   154F 00 00 00 00 
0897   1553 00 00 00 00 
0897   1557 00 00 00 00 
0897   155B 00 00 00 00 
0897   155F 00 00 00 00 
0897   1563 00 00 00 00 
0897   1567 00 00 00 00 
0897   156B 00 00 00 00 
0897   156F 00 00 00 00 
0897   1573 00 00 00 00 
0897   1577 00 00 00 00 
0897   157B 00 00 00 00 
0897   157F 00 00 00 00 
0897   1583 00 00 00 00 
0897   1587 00 00 00 00 
0897   158B 00 00 00 00 
0897   158F 00 00 00 00 
0897   1593 00 00 00 00 
0897   1597 00 00 00 00 
0897   159B 00 00 00 00 
0897   159F 00 00 00 00 
0897   15A3 00 00 00 00 
0897   15A7 00 00 00 00 
0897   15AB 00 00 00 00 
0897   15AF 00 00 00 00 
0897   15B3 00 00 00 00 
0897   15B7 00 00 00 00 
0897   15BB 00 00 00 00 
0897   15BF 00 00 00 00 
0897   15C3 00 00 00 00 
0897   15C7 00 00 00 00 
0897   15CB 00 00 00 00 
0897   15CF 00 00 00 00 
0897   15D3 00 00 00 00 
0897   15D7 00 00 00 00 
0897   15DB 00 00 00 00 
0897   15DF 00 00 00 00 
0897   15E3 00 00 00 00 
0897   15E7 00 00 00 00 
0897   15EB 00 00 00 00 
0897   15EF 00 00 00 00 
0897   15F3 00 00 00 00 
0897   15F7 00 00 00 00 
0897   15FB 00 00 00 00 
0897   15FF 00 00 00 00 
0897   1603 00 00 00 00 
0897   1607 00 00 00 00 
0897   160B 00 00 00 00 
0897   160F 00 00 00 00 
0897   1613 00 00 00 00 
0897   1617 00 00 00 00 
0897   161B 00 00 00 00 
0897   161F 00 00 00 00 
0897   1623 00 00 00 00 
0897   1627 00 00 00 00 
0897   162B 00 00 00 00 
0897   162F 00 00 00 00 
0897   1633 00 00 00 00 
0897   1637 00 00 00 00 
0897   163B 00 00 00 00 
0897   163F 00 00 00 00 
0897   1643 00 00 00 00 
0897   1647 00 00 00 00 
0897   164B 00 00 00 00 
0897   164F 00 00 00 00 
0897   1653 00 00 00 00 
0897   1657 00 00 00 00 
0897   165B 00 00 00 00 
0897   165F 00 00 00 00 
0897   1663 00 00 00 00 
0897   1667 00 00 00 00 
0897   166B 00 00 00 00 
0897   166F 00 00 00 00 
0897   1673 00 00 00 00 
0897   1677 00 00 00 00 
0897   167B 00 00 00 00 
0897   167F 00 00 00 00 
0897   1683 00 00 00 00 
0897   1687 00 00 00 00 
0897   168B 00 00 00 00 
0897   168F 00 00 00 00 
0897   1693 00 00 00 00 
0897   1697 00 00 00 00 
0897   169B 00 00 00 00 
0897   169F 00 00 00 00 
0897   16A3 00 00 00 00 
0897   16A7 00 00 00 00 
0897   16AB 00 00 00 00 
0897   16AF 00 00 00 00 
0897   16B3 00 00 00 00 
0897   16B7 00 00 00 00 
0897   16BB 00 00 00 00 
0897   16BF 00 00 00 00 
0897   16C3 00 00 00 00 
0897   16C7 00 00 00 00 
0897   16CB 00 00 00 00 
0897   16CF 00 00 00 00 
0897   16D3 00 00 00 00 
0897   16D7 00 00 00 00 
0897   16DB 00 00 00 00 
0897   16DF 00 00 00 00 
0897   16E3 00 00 00 00 
0897   16E7 00 00 00 00 
0897   16EB 00 00 00 00 
0897   16EF 00 00 00 00 
0897   16F3 00 00 00 00 
0897   16F7 00 00 00 00 
0897   16FB 00 00 00 00 
0897   16FF 00 00 00 00 
0897   1703 00 00 00 00 
0897   1707 00 00 00 00 
0897   170B 00 00 00 00 
0897   170F 00 00 00 00 
0897   1713 00 00 00 00 
0897   1717 00 00 00 00 
0897   171B 00 00 00 00 
0897   171F 00 00 00 00 
0897   1723 00 00 00 00 
0897   1727 00 00 00 00 
0897   172B 00 00 00 00 
0897   172F 00 00 00 00 
0897   1733 00 00 00 00 
0897   1737 00 00 00 00 
0897   173B 00 00 00 00 
0897   173F 00 00 00 00 
0897   1743 00 00 00 00 
0897   1747 00 00 00 00 
0897   174B 00 00 00 00 
0897   174F 00 00 00 00 
0897   1753 00 00 00 00 
0897   1757 00 00 00 00 
0897   175B 00 00 00 00 
0897   175F 00 00 00 00 
0897   1763 00 00 00 00 
0897   1767 00 00 00 00 
0898   176B 63 10       next_state: .dw next_state_data
0899   176D 47 65 6E 65 _string_0: .db "Generations: ", 0
0899   1771 72 61 74 69 
0899   1775 6F 6E 73 3A 
0899   1779 20 00 
0900   177B 40 20 00    _string_1: .db "@ ", 0
0901   177E 2E 20 00    _string_2: .db ". ", 0
0902   1781 0A 00       _string_3: .db "\n", 0
0903   1783             ; --- END DATA BLOCK
0904   1783             
0905   1783             ; --- BEGIN INCLUDE BLOCK
0906   1783             .include "lib/stdio.asm"
0001+  1783             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1783             ; stdio.s
0003+  1783             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1783             .include "lib/string.asm"
0001++ 1783             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1783             ; string.s
0003++ 1783             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1783             
0005++ 1783             
0006++ 1783             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1783             ; strrev
0008++ 1783             ; reverse a string
0009++ 1783             ; D = string address
0010++ 1783             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1783             ; 01234
0012++ 1783             strrev:
0013++ 1783 4B          	pusha
0014++ 1784 07 CA 17    	call strlen	; length in C
0015++ 1787 12          	mov a, c
0016++ 1788 AF 01 00    	cmp a, 1
0017++ 178B D0 A5 17    	jleu strrev_end	; check string length. string len must be > 1
0018++ 178E 7D          	dec a
0019++ 178F FD 4E       	mov si, d	; beginning of string
0020++ 1791 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1793 59          	add d, a	; end of string
0022++ 1794 12          	mov a, c
0023++ 1795 FD 9B       	shr a		; divide by 2
0024++ 1797 39          	mov c, a	; C now counts the steps
0025++ 1798             strrev_L0:
0026++ 1798 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1799 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 179A 3E          	mov [d], al	; store left char into right side
0029++ 179B 1B          	mov al, bl
0030++ 179C F7          	stosb		; store right-side char into left-side; increase DI
0031++ 179D 7E          	dec c
0032++ 179E 7F          	dec d
0033++ 179F C2 00 00    	cmp c, 0
0034++ 17A2 C7 98 17    	jne strrev_L0
0035++ 17A5             strrev_end:
0036++ 17A5 4C          	popa
0037++ 17A6 09          	ret
0038++ 17A7             	
0039++ 17A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 17A7             ; strchr
0041++ 17A7             ; search string in D for char in AL
0042++ 17A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 17A7             strchr:
0044++ 17A7             strchr_L0:
0045++ 17A7 32          	mov bl, [d]
0046++ 17A8 C1 00       	cmp bl, 0
0047++ 17AA C6 B5 17    	je strchr_end
0048++ 17AD BA          	cmp al, bl
0049++ 17AE C6 B5 17    	je strchr_end
0050++ 17B1 79          	inc d
0051++ 17B2 0A A7 17    	jmp strchr_L0
0052++ 17B5             strchr_end:
0053++ 17B5 1B          	mov al, bl
0054++ 17B6 09          	ret
0055++ 17B7             
0056++ 17B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 17B7             ; strstr
0058++ 17B7             ; find sub-string
0059++ 17B7             ; str1 in SI
0060++ 17B7             ; str2 in DI
0061++ 17B7             ; SI points to end of source string
0062++ 17B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 17B7             strstr:
0064++ 17B7 DB          	push al
0065++ 17B8 DA          	push d
0066++ 17B9 E3          	push di
0067++ 17BA             strstr_loop:
0068++ 17BA F3          	cmpsb					; compare a byte of the strings
0069++ 17BB C7 C6 17    	jne strstr_ret
0070++ 17BE FC 00 00    	lea d, [di + 0]
0071++ 17C1 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 17C3 C7 BA 17    	jne strstr_loop				; equal chars but not at end
0073++ 17C6             strstr_ret:
0074++ 17C6 F0          	pop di
0075++ 17C7 E7          	pop d
0076++ 17C8 E8          	pop al
0077++ 17C9 09          	ret
0078++ 17CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 17CA             ; length of null terminated string
0080++ 17CA             ; result in C
0081++ 17CA             ; pointer in D
0082++ 17CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 17CA             strlen:
0084++ 17CA DA          	push d
0085++ 17CB 38 00 00    	mov c, 0
0086++ 17CE             strlen_L1:
0087++ 17CE BD 00       	cmp byte [d], 0
0088++ 17D0 C6 D8 17    	je strlen_ret
0089++ 17D3 79          	inc d
0090++ 17D4 78          	inc c
0091++ 17D5 0A CE 17    	jmp strlen_L1
0092++ 17D8             strlen_ret:
0093++ 17D8 E7          	pop d
0094++ 17D9 09          	ret
0095++ 17DA             
0096++ 17DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 17DA             ; STRCMP
0098++ 17DA             ; compare two strings
0099++ 17DA             ; str1 in SI
0100++ 17DA             ; str2 in DI
0101++ 17DA             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 17DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 17DA             strcmp:
0104++ 17DA DB          	push al
0105++ 17DB DA          	push d
0106++ 17DC E3          	push di
0107++ 17DD E2          	push si
0108++ 17DE             strcmp_loop:
0109++ 17DE F3          	cmpsb					; compare a byte of the strings
0110++ 17DF C7 EA 17    	jne strcmp_ret
0111++ 17E2 FB FF FF    	lea d, [si +- 1]
0112++ 17E5 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 17E7 C7 DE 17    	jne strcmp_loop				; equal chars but not at end
0114++ 17EA             strcmp_ret:
0115++ 17EA EF          	pop si
0116++ 17EB F0          	pop di
0117++ 17EC E7          	pop d
0118++ 17ED E8          	pop al
0119++ 17EE 09          	ret
0120++ 17EF             
0121++ 17EF             
0122++ 17EF             ; STRCPY
0123++ 17EF             ; copy null terminated string from SI to DI
0124++ 17EF             ; source in SI
0125++ 17EF             ; destination in DI
0126++ 17EF             strcpy:
0127++ 17EF E2          	push si
0128++ 17F0 E3          	push di
0129++ 17F1 DB          	push al
0130++ 17F2             strcpy_L1:
0131++ 17F2 F6          	lodsb
0132++ 17F3 F7          	stosb
0133++ 17F4 B9 00       	cmp al, 0
0134++ 17F6 C7 F2 17    	jne strcpy_L1
0135++ 17F9             strcpy_end:
0136++ 17F9 E8          	pop al
0137++ 17FA F0          	pop di
0138++ 17FB EF          	pop si
0139++ 17FC 09          	ret
0140++ 17FD             
0141++ 17FD             ; STRCAT
0142++ 17FD             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 17FD             ; source in SI
0144++ 17FD             ; destination in DI
0145++ 17FD             strcat:
0146++ 17FD E2          	push si
0147++ 17FE E3          	push di
0148++ 17FF D7          	push a
0149++ 1800 DA          	push d
0150++ 1801 50          	mov a, di
0151++ 1802 3C          	mov d, a
0152++ 1803             strcat_goto_end_L1:
0153++ 1803 BD 00       	cmp byte[d], 0
0154++ 1805 C6 0C 18    	je strcat_start
0155++ 1808 79          	inc d
0156++ 1809 0A 03 18    	jmp strcat_goto_end_L1
0157++ 180C             strcat_start:
0158++ 180C FD 50       	mov di, d
0159++ 180E             strcat_L1:
0160++ 180E F6          	lodsb
0161++ 180F F7          	stosb
0162++ 1810 B9 00       	cmp al, 0
0163++ 1812 C7 0E 18    	jne strcat_L1
0164++ 1815             strcat_end:
0165++ 1815 E7          	pop d
0166++ 1816 E4          	pop a
0167++ 1817 F0          	pop di
0168++ 1818 EF          	pop si
0169++ 1819 09          	ret
0005+  181A             
0006+  181A 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  181E 34 35 36 37 
0006+  1822 38 39 41 42 
0006+  1826 43 44 45 46 
0007+  182A 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  182E 1B 5B 48 00 
0008+  1832             
0009+  1832 01 00       table_power:.dw 1
0010+  1834 0A 00       			.dw 10
0011+  1836 64 00       			.dw 100
0012+  1838 E8 03       			.dw 1000
0013+  183A 10 27       			.dw 10000
0014+  183C             
0015+  183C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  183C             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  183C             ; ASCII in BL
0018+  183C             ; result in AL
0019+  183C             ; ascii for F = 0100 0110
0020+  183C             ; ascii for 9 = 0011 1001
0021+  183C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  183C             hex_ascii_encode:
0023+  183C 1B          	mov al, bl
0024+  183D 93 40       	test al, $40				; test if letter or number
0025+  183F C7 45 18    	jnz hex_letter
0026+  1842 87 0F       	and al, $0F				; get number
0027+  1844 09          	ret
0028+  1845             hex_letter:
0029+  1845 87 0F       	and al, $0F				; get letter
0030+  1847 6A 09       	add al, 9
0031+  1849 09          	ret
0032+  184A             
0033+  184A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  184A             ; ATOI
0035+  184A             ; 2 letter hex string in B
0036+  184A             ; 8bit integer returned in AL
0037+  184A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  184A             atoi:
0039+  184A D8          	push b
0040+  184B 07 3C 18    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  184E 30          	mov bl, bh
0042+  184F DB          	push al					; save a
0043+  1850 07 3C 18    	call hex_ascii_encode
0044+  1853 EA          	pop bl	
0045+  1854 FD 9E 04    	shl al, 4
0046+  1857 8C          	or al, bl
0047+  1858 E5          	pop b
0048+  1859 09          	ret	
0049+  185A             
0050+  185A             
0051+  185A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  185A             ; printf
0053+  185A             ; no need for explanations!
0054+  185A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  185A             printf:
0056+  185A 09          	ret
0057+  185B             
0058+  185B             
0059+  185B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  185B             ; scanf
0061+  185B             ; no need for explanations!
0062+  185B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  185B             scanf:
0064+  185B 09          	ret
0065+  185C             
0066+  185C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  185C             ; ITOA
0068+  185C             ; 8bit value in BL
0069+  185C             ; 2 byte ASCII result in A
0070+  185C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  185C             itoa:
0072+  185C DA          	push d
0073+  185D D8          	push b
0074+  185E A7 00       	mov bh, 0
0075+  1860 FD A4 04    	shr bl, 4	
0076+  1863 74          	mov d, b
0077+  1864 1F 1A 18    	mov al, [d + s_hex_digits]
0078+  1867 23          	mov ah, al
0079+  1868             	
0080+  1868 E5          	pop b
0081+  1869 D8          	push b
0082+  186A A7 00       	mov bh, 0
0083+  186C FD 87 0F    	and bl, $0F
0084+  186F 74          	mov d, b
0085+  1870 1F 1A 18    	mov al, [d + s_hex_digits]
0086+  1873 E5          	pop b
0087+  1874 E7          	pop d
0088+  1875 09          	ret
0089+  1876             
0090+  1876             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  1876             ; HEX STRING TO BINARY
0092+  1876             ; di = destination address
0093+  1876             ; si = source
0094+  1876             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  1876             hex_to_int:
0096+  1876             hex_to_int_L1:
0097+  1876 F6          	lodsb					; load from [SI] to AL
0098+  1877 B9 00       	cmp al, 0				; check if ASCII 0
0099+  1879 C6 86 18    	jz hex_to_int_ret
0100+  187C 36          	mov bh, al
0101+  187D F6          	lodsb
0102+  187E 2F          	mov bl, al
0103+  187F 07 4A 18    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  1882 F7          	stosb					; store AL to [DI]
0105+  1883 0A 76 18    	jmp hex_to_int_L1
0106+  1886             hex_to_int_ret:
0107+  1886 09          	ret		
0108+  1887             
0109+  1887             
0110+  1887             
0111+  1887             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  1887             ; GETCHAR
0113+  1887             ; char in ah
0114+  1887             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  1887             getchar:
0116+  1887 DB          	push al
0117+  1888             getchar_retry:
0118+  1888 FD 0C       	sti
0119+  188A 19 01       	mov al, 1
0120+  188C 05 03       	syscall sys_io			; receive in AH
0121+  188E B9 00       	cmp al, 0			; check if any char was receive
0122+  1890 C6 88 18    	je getchar_retry
0123+  1893 E8          	pop al
0124+  1894 09          	ret
0125+  1895             
0126+  1895             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  1895             ; PUTCHAR
0128+  1895             ; char in ah
0129+  1895             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1895             putchar:
0131+  1895 D7          	push a
0132+  1896 19 00       	mov al, 0
0133+  1898 05 03       	syscall sys_io			; char in AH
0134+  189A E4          	pop a
0135+  189B 09          	ret
0136+  189C             
0137+  189C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  189C             ;; INPUT A STRING
0139+  189C             ;; terminates with null
0140+  189C             ;; pointer in D
0141+  189C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  189C             gets:
0143+  189C D7          	push a
0144+  189D DA          	push d
0145+  189E             gets_loop:
0146+  189E FD 0C       	sti
0147+  18A0 19 01       	mov al, 1
0148+  18A2 05 03       	syscall sys_io			; receive in AH
0149+  18A4 B9 00       	cmp al, 0				; check error code (AL)
0150+  18A6 C6 9E 18    	je gets_loop			; if no char received, retry
0151+  18A9             
0152+  18A9 76 1B       	cmp ah, 27
0153+  18AB C6 CC 18    	je gets_telnet_escape
0154+  18AE 76 0A       	cmp ah, $0A				; LF
0155+  18B0 C6 25 19    	je gets_end
0156+  18B3 76 0D       	cmp ah, $0D				; CR
0157+  18B5 C6 25 19    	je gets_end
0158+  18B8 76 5C       	cmp ah, $5C				; '\\'
0159+  18BA C6 FC 18    	je gets_escape
0160+  18BD             	
0161+  18BD 76 08       	cmp ah, $08			; check for backspace
0162+  18BF C6 C8 18    	je gets_backspace
0163+  18C2             
0164+  18C2 1A          	mov al, ah
0165+  18C3 3E          	mov [d], al
0166+  18C4 79          	inc d
0167+  18C5 0A 9E 18    	jmp gets_loop
0168+  18C8             gets_backspace:
0169+  18C8 7F          	dec d
0170+  18C9 0A 9E 18    	jmp gets_loop
0171+  18CC             gets_telnet_escape:
0172+  18CC FD 0C       	sti
0173+  18CE 19 01       	mov al, 1
0174+  18D0 05 03       	syscall sys_io				; receive in AH without echo
0175+  18D2 B9 00       	cmp al, 0					; check error code (AL)
0176+  18D4 C6 CC 18    	je gets_telnet_escape		; if no char received, retry
0177+  18D7 76 5B       	cmp ah, '['
0178+  18D9 C7 9E 18    	jne gets_loop
0179+  18DC             gets_telnet_escape_phase2:
0180+  18DC FD 0C       	sti
0181+  18DE 19 01       	mov al, 1
0182+  18E0 05 03       	syscall sys_io					; receive in AH without echo
0183+  18E2 B9 00       	cmp al, 0						; check error code (AL)
0184+  18E4 C6 DC 18    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  18E7 76 44       	cmp ah, 'D'
0186+  18E9 C6 F4 18    	je gets_left_arrow
0187+  18EC 76 43       	cmp ah, 'C'
0188+  18EE C6 F8 18    	je gets_right_arrow
0189+  18F1 0A 9E 18    	jmp gets_loop
0190+  18F4             gets_left_arrow:
0191+  18F4 7F          	dec d
0192+  18F5 0A 9E 18    	jmp gets_loop
0193+  18F8             gets_right_arrow:
0194+  18F8 79          	inc d
0195+  18F9 0A 9E 18    	jmp gets_loop
0196+  18FC             gets_escape:
0197+  18FC FD 0C       	sti
0198+  18FE 19 01       	mov al, 1
0199+  1900 05 03       	syscall sys_io			; receive in AH
0200+  1902 B9 00       	cmp al, 0				; check error code (AL)
0201+  1904 C6 FC 18    	je gets_escape			; if no char received, retry
0202+  1907 76 6E       	cmp ah, 'n'
0203+  1909 C6 17 19    	je gets_LF
0204+  190C 76 72       	cmp ah, 'r'
0205+  190E C6 1E 19    	je gets_CR
0206+  1911 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  1912 3E          	mov [d], al
0208+  1913 79          	inc d
0209+  1914 0A 9E 18    	jmp gets_loop
0210+  1917             gets_LF:
0211+  1917 19 0A       	mov al, $0A
0212+  1919 3E          	mov [d], al
0213+  191A 79          	inc d
0214+  191B 0A 9E 18    	jmp gets_loop
0215+  191E             gets_CR:
0216+  191E 19 0D       	mov al, $0D
0217+  1920 3E          	mov [d], al
0218+  1921 79          	inc d
0219+  1922 0A 9E 18    	jmp gets_loop
0220+  1925             gets_end:
0221+  1925 19 00       	mov al, 0
0222+  1927 3E          	mov [d], al				; terminate string
0223+  1928 E7          	pop d
0224+  1929 E4          	pop a
0225+  192A 09          	ret
0226+  192B             
0227+  192B             
0228+  192B             
0229+  192B             
0230+  192B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  192B             ;; INPUT TEXT
0232+  192B             ;; terminated with CTRL+D
0233+  192B             ;; pointer in D
0234+  192B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  192B             gettxt:
0236+  192B D7          	push a
0237+  192C DA          	push d
0238+  192D             gettxt_loop:
0239+  192D 19 01       	mov al, 1
0240+  192F 05 03       	syscall sys_io			; receive in AH
0241+  1931 B9 00       	cmp al, 0				; check error code (AL)
0242+  1933 C6 2D 19    	je gettxt_loop		; if no char received, retry
0243+  1936 76 04       	cmp ah, 4			; EOT
0244+  1938 C6 76 19    	je gettxt_end
0245+  193B 76 08       	cmp ah, $08			; check for backspace
0246+  193D C6 72 19    	je gettxt_backspace
0247+  1940 76 5C       	cmp ah, $5C				; '\\'
0248+  1942 C6 4B 19    	je gettxt_escape
0249+  1945 1A          	mov al, ah
0250+  1946 3E          	mov [d], al
0251+  1947 79          	inc d
0252+  1948 0A 2D 19    	jmp gettxt_loop
0253+  194B             gettxt_escape:
0254+  194B 19 01       	mov al, 1
0255+  194D 05 03       	syscall sys_io			; receive in AH
0256+  194F B9 00       	cmp al, 0				; check error code (AL)
0257+  1951 C6 4B 19    	je gettxt_escape		; if no char received, retry
0258+  1954 76 6E       	cmp ah, 'n'
0259+  1956 C6 64 19    	je gettxt_LF
0260+  1959 76 72       	cmp ah, 'r'
0261+  195B C6 6B 19    	je gettxt_CR
0262+  195E 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  195F 3E          	mov [d], al
0264+  1960 79          	inc d
0265+  1961 0A 2D 19    	jmp gettxt_loop
0266+  1964             gettxt_LF:
0267+  1964 19 0A       	mov al, $0A
0268+  1966 3E          	mov [d], al
0269+  1967 79          	inc d
0270+  1968 0A 2D 19    	jmp gettxt_loop
0271+  196B             gettxt_CR:
0272+  196B 19 0D       	mov al, $0D
0273+  196D 3E          	mov [d], al
0274+  196E 79          	inc d
0275+  196F 0A 2D 19    	jmp gettxt_loop
0276+  1972             gettxt_backspace:
0277+  1972 7F          	dec d
0278+  1973 0A 2D 19    	jmp gettxt_loop
0279+  1976             gettxt_end:
0280+  1976 19 00       	mov al, 0
0281+  1978 3E          	mov [d], al				; terminate string
0282+  1979 E7          	pop d
0283+  197A E4          	pop a
0284+  197B 09          	ret
0285+  197C             
0286+  197C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  197C             ; PRINT NEW LINE
0288+  197C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  197C             printnl:
0290+  197C D7          	push a
0291+  197D 10 00 0A    	mov a, $0A00
0292+  1980 05 03       	syscall sys_io
0293+  1982 10 00 0D    	mov a, $0D00
0294+  1985 05 03       	syscall sys_io
0295+  1987 E4          	pop a
0296+  1988 09          	ret
0297+  1989             
0298+  1989             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  1989             ; strtoint
0300+  1989             ; 4 digit hex string number in d
0301+  1989             ; integer returned in A
0302+  1989             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  1989             strtointx:
0304+  1989 D8          	push b
0305+  198A 32          	mov bl, [d]
0306+  198B 37          	mov bh, bl
0307+  198C 33 01 00    	mov bl, [d + 1]
0308+  198F 07 4A 18    	call atoi				; convert to int in AL
0309+  1992 23          	mov ah, al				; move to AH
0310+  1993 33 02 00    	mov bl, [d + 2]
0311+  1996 37          	mov bh, bl
0312+  1997 33 03 00    	mov bl, [d + 3]
0313+  199A 07 4A 18    	call atoi				; convert to int in AL
0314+  199D E5          	pop b
0315+  199E 09          	ret
0316+  199F             
0317+  199F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  199F             ; strtoint
0319+  199F             ; 5 digit base10 string number in d
0320+  199F             ; integer returned in A
0321+  199F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  199F             strtoint:
0323+  199F E2          	push si
0324+  19A0 D8          	push b
0325+  19A1 D9          	push c
0326+  19A2 DA          	push d
0327+  19A3 07 CA 17    	call strlen			; get string length in C
0328+  19A6 7E          	dec c
0329+  19A7 FD 4E       	mov si, d
0330+  19A9 12          	mov a, c
0331+  19AA FD 99       	shl a
0332+  19AC 3B 32 18    	mov d, table_power
0333+  19AF 59          	add d, a
0334+  19B0 38 00 00    	mov c, 0
0335+  19B3             strtoint_L0:
0336+  19B3 F6          	lodsb			; load ASCII to al
0337+  19B4 B9 00       	cmp al, 0
0338+  19B6 C6 C9 19    	je strtoint_end
0339+  19B9 6F 30       	sub al, $30		; make into integer
0340+  19BB 22 00       	mov ah, 0
0341+  19BD 2A          	mov b, [d]
0342+  19BE AC          	mul a, b			; result in B since it fits in 16bits
0343+  19BF 11          	mov a, b
0344+  19C0 28          	mov b, c
0345+  19C1 54          	add a, b
0346+  19C2 39          	mov c, a
0347+  19C3 63 02 00    	sub d, 2
0348+  19C6 0A B3 19    	jmp strtoint_L0
0349+  19C9             strtoint_end:
0350+  19C9 12          	mov a, c
0351+  19CA E7          	pop d
0352+  19CB E6          	pop c
0353+  19CC E5          	pop b
0354+  19CD EF          	pop si
0355+  19CE 09          	ret
0356+  19CF             
0357+  19CF             
0358+  19CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  19CF             ; PRINT NULL TERMINATED STRING
0360+  19CF             ; pointer in D
0361+  19CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  19CF             puts:
0363+  19CF D7          	push a
0364+  19D0 DA          	push d
0365+  19D1             puts_L1:
0366+  19D1 1E          	mov al, [d]
0367+  19D2 B9 00       	cmp al, 0
0368+  19D4 C6 E0 19    	jz puts_END
0369+  19D7 23          	mov ah, al
0370+  19D8 19 00       	mov al, 0
0371+  19DA 05 03       	syscall sys_io
0372+  19DC 79          	inc d
0373+  19DD 0A D1 19    	jmp puts_L1
0374+  19E0             puts_END:
0375+  19E0 E7          	pop d
0376+  19E1 E4          	pop a
0377+  19E2 09          	ret
0378+  19E3             
0379+  19E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  19E3             ; PRINT N SIZE STRING
0381+  19E3             ; pointer in D
0382+  19E3             ; size in C
0383+  19E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  19E3             putsn:
0385+  19E3 DB          	push al
0386+  19E4 DA          	push d
0387+  19E5 D9          	push c
0388+  19E6             putsn_L0:
0389+  19E6 1E          	mov al, [d]
0390+  19E7 23          	mov ah, al
0391+  19E8 19 00       	mov al, 0
0392+  19EA 05 03       	syscall sys_io
0393+  19EC 79          	inc d
0394+  19ED 7E          	dec c	
0395+  19EE C2 00 00    	cmp c, 0
0396+  19F1 C7 E6 19    	jne putsn_L0
0397+  19F4             putsn_end:
0398+  19F4 E6          	pop c
0399+  19F5 E7          	pop d
0400+  19F6 E8          	pop al
0401+  19F7 09          	ret
0402+  19F8             
0403+  19F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  19F8             ; print 16bit decimal number
0405+  19F8             ; input number in A
0406+  19F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  19F8             print_u16d:
0408+  19F8 D7          	push a
0409+  19F9 D8          	push b
0410+  19FA 26 10 27    	mov b, 10000
0411+  19FD AE          	div a, b			; get 10000 coeff.
0412+  19FE 07 24 1A    	call print_number
0413+  1A01 11          	mov a, b
0414+  1A02 26 E8 03    	mov b, 1000
0415+  1A05 AE          	div a, b			; get 10000 coeff.
0416+  1A06 07 24 1A    	call print_number
0417+  1A09 11          	mov a, b
0418+  1A0A 26 64 00    	mov b, 100
0419+  1A0D AE          	div a, b
0420+  1A0E 07 24 1A    	call print_number
0421+  1A11 11          	mov a, b
0422+  1A12 26 0A 00    	mov b, 10
0423+  1A15 AE          	div a, b
0424+  1A16 07 24 1A    	call print_number
0425+  1A19 11          	mov a, b
0426+  1A1A 6A 30       	add al, $30
0427+  1A1C 23          	mov ah, al
0428+  1A1D 19 00       	mov al, 0
0429+  1A1F 05 03       	syscall sys_io	; print coeff
0430+  1A21 E5          	pop b
0431+  1A22 E4          	pop a
0432+  1A23 09          	ret
0433+  1A24             
0434+  1A24             
0435+  1A24             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  1A24             ; if A == 0, print space
0437+  1A24             ; else print A
0438+  1A24             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  1A24             print_number:
0440+  1A24 6A 30       	add al, $30
0441+  1A26 23          	mov ah, al
0442+  1A27 07 95 18    	call putchar
0443+  1A2A 09          	ret
0444+  1A2B             
0445+  1A2B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  1A2B             ; PRINT 16BIT HEX INTEGER
0447+  1A2B             ; integer value in reg B
0448+  1A2B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  1A2B             print_u16x:
0450+  1A2B D7          	push a
0451+  1A2C D8          	push b
0452+  1A2D DD          	push bl
0453+  1A2E 30          	mov bl, bh
0454+  1A2F 07 5C 18    	call itoa				; convert bh to char in A
0455+  1A32 2F          	mov bl, al				; save al
0456+  1A33 19 00       	mov al, 0
0457+  1A35 05 03       	syscall sys_io				; display AH
0458+  1A37 24          	mov ah, bl				; retrieve al
0459+  1A38 19 00       	mov al, 0
0460+  1A3A 05 03       	syscall sys_io				; display AL
0461+  1A3C             
0462+  1A3C EA          	pop bl
0463+  1A3D 07 5C 18    	call itoa				; convert bh to char in A
0464+  1A40 2F          	mov bl, al				; save al
0465+  1A41 19 00       	mov al, 0
0466+  1A43 05 03       	syscall sys_io				; display AH
0467+  1A45 24          	mov ah, bl				; retrieve al
0468+  1A46 19 00       	mov al, 0
0469+  1A48 05 03       	syscall sys_io				; display AL
0470+  1A4A             
0471+  1A4A E5          	pop b
0472+  1A4B E4          	pop a
0473+  1A4C 09          	ret
0474+  1A4D             
0475+  1A4D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  1A4D             ; INPUT 16BIT HEX INTEGER
0477+  1A4D             ; read 16bit integer into A
0478+  1A4D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  1A4D             scan_u16x:
0480+  1A4D F8 10 00    	enter 16
0481+  1A50 D8          	push b
0482+  1A51 DA          	push d
0483+  1A52             
0484+  1A52 FA F1 FF    	lea d, [bp + -15]
0485+  1A55 07 9C 18    	call gets				; get number
0486+  1A58             
0487+  1A58 32          	mov bl, [d]
0488+  1A59 37          	mov bh, bl
0489+  1A5A 33 01 00    	mov bl, [d + 1]
0490+  1A5D 07 4A 18    	call atoi				; convert to int in AL
0491+  1A60 23          	mov ah, al				; move to AH
0492+  1A61             
0493+  1A61 33 02 00    	mov bl, [d + 2]
0494+  1A64 37          	mov bh, bl
0495+  1A65 33 03 00    	mov bl, [d + 3]
0496+  1A68 07 4A 18    	call atoi				; convert to int in AL
0497+  1A6B             
0498+  1A6B E7          	pop d
0499+  1A6C E5          	pop b
0500+  1A6D F9          	leave
0501+  1A6E 09          	ret
0502+  1A6F             
0503+  1A6F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  1A6F             ; PRINT 8bit HEX INTEGER
0505+  1A6F             ; integer value in reg bl
0506+  1A6F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  1A6F             print_u8x:
0508+  1A6F D7          	push a
0509+  1A70 DD          	push bl
0510+  1A71             
0511+  1A71 07 5C 18    	call itoa				; convert bl to char in A
0512+  1A74 2F          	mov bl, al				; save al
0513+  1A75 19 00       	mov al, 0
0514+  1A77 05 03       	syscall sys_io				; display AH
0515+  1A79 24          	mov ah, bl				; retrieve al
0516+  1A7A 19 00       	mov al, 0
0517+  1A7C 05 03       	syscall sys_io				; display AL
0518+  1A7E             
0519+  1A7E EA          	pop bl
0520+  1A7F E4          	pop a
0521+  1A80 09          	ret
0522+  1A81             
0523+  1A81             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  1A81             ; print 8bit decimal unsigned number
0525+  1A81             ; input number in AL
0526+  1A81             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  1A81             print_u8d:
0528+  1A81 D7          	push a
0529+  1A82 D8          	push b
0530+  1A83             
0531+  1A83 22 00       	mov ah, 0
0532+  1A85 26 64 00    	mov b, 100
0533+  1A88 AE          	div a, b
0534+  1A89 D8          	push b			; save remainder
0535+  1A8A B9 00       	cmp al, 0
0536+  1A8C C6 96 1A    	je skip100
0537+  1A8F 6A 30       	add al, $30
0538+  1A91 23          	mov ah, al
0539+  1A92 19 00       	mov al, 0
0540+  1A94 05 03       	syscall sys_io	; print coeff
0541+  1A96             skip100:
0542+  1A96 E4          	pop a
0543+  1A97 22 00       	mov ah, 0
0544+  1A99 26 0A 00    	mov b, 10
0545+  1A9C AE          	div a, b
0546+  1A9D D8          	push b			; save remainder
0547+  1A9E B9 00       	cmp al, 0
0548+  1AA0 C6 AA 1A    	je skip10
0549+  1AA3 6A 30       	add al, $30
0550+  1AA5 23          	mov ah, al
0551+  1AA6 19 00       	mov al, 0
0552+  1AA8 05 03       	syscall sys_io	; print coeff
0553+  1AAA             skip10:
0554+  1AAA E4          	pop a
0555+  1AAB 1B          	mov al, bl
0556+  1AAC 6A 30       	add al, $30
0557+  1AAE 23          	mov ah, al
0558+  1AAF 19 00       	mov al, 0
0559+  1AB1 05 03       	syscall sys_io	; print coeff
0560+  1AB3 E5          	pop b
0561+  1AB4 E4          	pop a
0562+  1AB5 09          	ret
0563+  1AB6             
0564+  1AB6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  1AB6             ; INPUT 8BIT HEX INTEGER
0566+  1AB6             ; read 8bit integer into AL
0567+  1AB6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  1AB6             scan_u8x:
0569+  1AB6 F8 04 00    	enter 4
0570+  1AB9 D8          	push b
0571+  1ABA DA          	push d
0572+  1ABB             
0573+  1ABB FA FD FF    	lea d, [bp + -3]
0574+  1ABE 07 9C 18    	call gets				; get number
0575+  1AC1             
0576+  1AC1 32          	mov bl, [d]
0577+  1AC2 37          	mov bh, bl
0578+  1AC3 33 01 00    	mov bl, [d + 1]
0579+  1AC6 07 4A 18    	call atoi				; convert to int in AL
0580+  1AC9             
0581+  1AC9 E7          	pop d
0582+  1ACA E5          	pop b
0583+  1ACB F9          	leave
0584+  1ACC 09          	ret
0585+  1ACD             
0586+  1ACD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  1ACD             ; input decimal number
0588+  1ACD             ; result in A
0589+  1ACD             ; 655'\0'
0590+  1ACD             ; low--------high
0591+  1ACD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  1ACD             scan_u16d:
0593+  1ACD F8 08 00    	enter 8
0594+  1AD0 E2          	push si
0595+  1AD1 D8          	push b
0596+  1AD2 D9          	push c
0597+  1AD3 DA          	push d
0598+  1AD4 FA F9 FF    	lea d, [bp +- 7]
0599+  1AD7 07 9C 18    	call gets
0600+  1ADA 07 CA 17    	call strlen			; get string length in C
0601+  1ADD 7E          	dec c
0602+  1ADE FD 4E       	mov si, d
0603+  1AE0 12          	mov a, c
0604+  1AE1 FD 99       	shl a
0605+  1AE3 3B 32 18    	mov d, table_power
0606+  1AE6 59          	add d, a
0607+  1AE7 38 00 00    	mov c, 0
0608+  1AEA             mul_loop:
0609+  1AEA F6          	lodsb			; load ASCII to al
0610+  1AEB B9 00       	cmp al, 0
0611+  1AED C6 00 1B    	je mul_exit
0612+  1AF0 6F 30       	sub al, $30		; make into integer
0613+  1AF2 22 00       	mov ah, 0
0614+  1AF4 2A          	mov b, [d]
0615+  1AF5 AC          	mul a, b			; result in B since it fits in 16bits
0616+  1AF6 11          	mov a, b
0617+  1AF7 28          	mov b, c
0618+  1AF8 54          	add a, b
0619+  1AF9 39          	mov c, a
0620+  1AFA 63 02 00    	sub d, 2
0621+  1AFD 0A EA 1A    	jmp mul_loop
0622+  1B00             mul_exit:
0623+  1B00 12          	mov a, c
0624+  1B01 E7          	pop d
0625+  1B02 E6          	pop c
0626+  1B03 E5          	pop b
0627+  1B04 EF          	pop si
0628+  1B05 F9          	leave
0629+  1B06 09          	ret
0907   1B07             ; --- END INCLUDE BLOCK
0908   1B07             
0909   1B07             
0910   1B07             .end
tasm: Number of errors = 0
