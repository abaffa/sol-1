0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 FD AB         swp b
0010   0404 D8            push b
0011   0405 07 20 04      call prints
0012   0408 51 02 00      add sp, 2
0013   040B FD AB         swp b
0014   040D D8            push b
0015   040E 07 20 04      call prints
0016   0411 51 02 00      add sp, 2
0017   0414 FD AB         swp b
0018   0416 D8            push b
0019   0417 07 20 04      call prints
0020   041A 51 02 00      add sp, 2
0021   041D F9            leave
0022   041E 05 0B         syscall sys_terminate_proc
0023   0420             prints:
0024   0420 D2            push bp
0025   0421 9B            mov bp, sp
0026   0422 F9            leave
0027   0423 09            ret
0028   0424             ; --- END TEXT BLOCK
0029   0424             
0030   0424             ; --- BEGIN DATA BLOCK
0031   0424             
0032   0424             
0033   0424 48 65 6C 6C _string_0: .db "Hello World", 0
0033   0428 6F 20 57 6F 
0033   042C 72 6C 64 00 
0034   0430 48 65 6C 6C _string_1: .db "Hello World2", 0
0034   0434 6F 20 57 6F 
0034   0438 72 6C 64 32 
0034   043C 00 
0035   043D 48 65 6C 6C _string_2: .db "Hello World3", 0
0035   0441 6F 20 57 6F 
0035   0445 72 6C 64 33 
0035   0449 00 
0036   044A             
0037   044A             ; --- END DATA BLOCK
0038   044A             
0039   044A             ; --- BEGIN INCLUDE BLOCK
0040   044A             .include "lib/stdio.asm"
0001+  044A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  044A             ; stdio.s
0003+  044A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  044A             .include "lib/string.asm"
0001++ 044A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 044A             ; string.s
0003++ 044A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 044A             
0005++ 044A             
0006++ 044A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 044A             ; strrev
0008++ 044A             ; reverse a string
0009++ 044A             ; D = string address
0010++ 044A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 044A             ; 01234
0012++ 044A             strrev:
0013++ 044A 4B          	pusha
0014++ 044B 07 91 04    	call strlen	; length in C
0015++ 044E 12          	mov a, c
0016++ 044F AF 01 00    	cmp a, 1
0017++ 0452 D0 6C 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0455 7D          	dec a
0019++ 0456 FD 4E       	mov si, d	; beginning of string
0020++ 0458 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 045A 59          	add d, a	; end of string
0022++ 045B 12          	mov a, c
0023++ 045C FD 9B       	shr a		; divide by 2
0024++ 045E 39          	mov c, a	; C now counts the steps
0025++ 045F             strrev_L0:
0026++ 045F 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0460 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0461 3E          	mov [d], al	; store left char into right side
0029++ 0462 1B          	mov al, bl
0030++ 0463 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0464 7E          	dec c
0032++ 0465 7F          	dec d
0033++ 0466 C2 00 00    	cmp c, 0
0034++ 0469 C7 5F 04    	jne strrev_L0
0035++ 046C             strrev_end:
0036++ 046C 4C          	popa
0037++ 046D 09          	ret
0038++ 046E             	
0039++ 046E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 046E             ; strchr
0041++ 046E             ; search string in D for char in AL
0042++ 046E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 046E             strchr:
0044++ 046E             strchr_L0:
0045++ 046E 32          	mov bl, [d]
0046++ 046F C1 00       	cmp bl, 0
0047++ 0471 C6 7C 04    	je strchr_end
0048++ 0474 BA          	cmp al, bl
0049++ 0475 C6 7C 04    	je strchr_end
0050++ 0478 79          	inc d
0051++ 0479 0A 6E 04    	jmp strchr_L0
0052++ 047C             strchr_end:
0053++ 047C 1B          	mov al, bl
0054++ 047D 09          	ret
0055++ 047E             
0056++ 047E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 047E             ; strstr
0058++ 047E             ; find sub-string
0059++ 047E             ; str1 in SI
0060++ 047E             ; str2 in DI
0061++ 047E             ; SI points to end of source string
0062++ 047E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 047E             strstr:
0064++ 047E DB          	push al
0065++ 047F DA          	push d
0066++ 0480 E3          	push di
0067++ 0481             strstr_loop:
0068++ 0481 F3          	cmpsb					; compare a byte of the strings
0069++ 0482 C7 8D 04    	jne strstr_ret
0070++ 0485 FC 00 00    	lea d, [di + 0]
0071++ 0488 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 048A C7 81 04    	jne strstr_loop				; equal chars but not at end
0073++ 048D             strstr_ret:
0074++ 048D F0          	pop di
0075++ 048E E7          	pop d
0076++ 048F E8          	pop al
0077++ 0490 09          	ret
0078++ 0491             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0491             ; length of null terminated string
0080++ 0491             ; result in C
0081++ 0491             ; pointer in D
0082++ 0491             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0491             strlen:
0084++ 0491 DA          	push d
0085++ 0492 38 00 00    	mov c, 0
0086++ 0495             strlen_L1:
0087++ 0495 BD 00       	cmp byte [d], 0
0088++ 0497 C6 9F 04    	je strlen_ret
0089++ 049A 79          	inc d
0090++ 049B 78          	inc c
0091++ 049C 0A 95 04    	jmp strlen_L1
0092++ 049F             strlen_ret:
0093++ 049F E7          	pop d
0094++ 04A0 09          	ret
0095++ 04A1             
0096++ 04A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04A1             ; STRCMP
0098++ 04A1             ; compare two strings
0099++ 04A1             ; str1 in SI
0100++ 04A1             ; str2 in DI
0101++ 04A1             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04A1             strcmp:
0104++ 04A1 DB          	push al
0105++ 04A2 DA          	push d
0106++ 04A3 E3          	push di
0107++ 04A4 E2          	push si
0108++ 04A5             strcmp_loop:
0109++ 04A5 F3          	cmpsb					; compare a byte of the strings
0110++ 04A6 C7 B1 04    	jne strcmp_ret
0111++ 04A9 FB FF FF    	lea d, [si +- 1]
0112++ 04AC BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04AE C7 A5 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04B1             strcmp_ret:
0115++ 04B1 EF          	pop si
0116++ 04B2 F0          	pop di
0117++ 04B3 E7          	pop d
0118++ 04B4 E8          	pop al
0119++ 04B5 09          	ret
0120++ 04B6             
0121++ 04B6             
0122++ 04B6             ; STRCPY
0123++ 04B6             ; copy null terminated string from SI to DI
0124++ 04B6             ; source in SI
0125++ 04B6             ; destination in DI
0126++ 04B6             strcpy:
0127++ 04B6 E2          	push si
0128++ 04B7 E3          	push di
0129++ 04B8 DB          	push al
0130++ 04B9             strcpy_L1:
0131++ 04B9 F6          	lodsb
0132++ 04BA F7          	stosb
0133++ 04BB B9 00       	cmp al, 0
0134++ 04BD C7 B9 04    	jne strcpy_L1
0135++ 04C0             strcpy_end:
0136++ 04C0 E8          	pop al
0137++ 04C1 F0          	pop di
0138++ 04C2 EF          	pop si
0139++ 04C3 09          	ret
0140++ 04C4             
0141++ 04C4             ; STRCAT
0142++ 04C4             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04C4             ; source in SI
0144++ 04C4             ; destination in DI
0145++ 04C4             strcat:
0146++ 04C4 E2          	push si
0147++ 04C5 E3          	push di
0148++ 04C6 D7          	push a
0149++ 04C7 DA          	push d
0150++ 04C8 50          	mov a, di
0151++ 04C9 3C          	mov d, a
0152++ 04CA             strcat_goto_end_L1:
0153++ 04CA BD 00       	cmp byte[d], 0
0154++ 04CC C6 D3 04    	je strcat_start
0155++ 04CF 79          	inc d
0156++ 04D0 0A CA 04    	jmp strcat_goto_end_L1
0157++ 04D3             strcat_start:
0158++ 04D3 FD 50       	mov di, d
0159++ 04D5             strcat_L1:
0160++ 04D5 F6          	lodsb
0161++ 04D6 F7          	stosb
0162++ 04D7 B9 00       	cmp al, 0
0163++ 04D9 C7 D5 04    	jne strcat_L1
0164++ 04DC             strcat_end:
0165++ 04DC E7          	pop d
0166++ 04DD E4          	pop a
0167++ 04DE F0          	pop di
0168++ 04DF EF          	pop si
0169++ 04E0 09          	ret
0005+  04E1             
0006+  04E1 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  04E5 34 35 36 37 
0006+  04E9 38 39 41 42 
0006+  04ED 43 44 45 46 
0007+  04F1             
0008+  04F1 01 00       table_power:.dw 1
0009+  04F3 0A 00       			.dw 10
0010+  04F5 64 00       			.dw 100
0011+  04F7 E8 03       			.dw 1000
0012+  04F9 10 27       			.dw 10000
0013+  04FB             
0014+  04FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  04FB             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  04FB             ; ASCII in BL
0017+  04FB             ; result in AL
0018+  04FB             ; ascii for F = 0100 0110
0019+  04FB             ; ascii for 9 = 0011 1001
0020+  04FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  04FB             hex_ascii_encode:
0022+  04FB 1B          	mov al, bl
0023+  04FC 93 40       	test al, $40				; test if letter or number
0024+  04FE C7 04 05    	jnz hex_letter
0025+  0501 87 0F       	and al, $0F				; get number
0026+  0503 09          	ret
0027+  0504             hex_letter:
0028+  0504 87 0F       	and al, $0F				; get letter
0029+  0506 6A 09       	add al, 9
0030+  0508 09          	ret
0031+  0509             
0032+  0509             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  0509             ; ATOI
0034+  0509             ; 2 letter hex string in B
0035+  0509             ; 8bit integer returned in AL
0036+  0509             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  0509             atoi:
0038+  0509 D8          	push b
0039+  050A 07 FB 04    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  050D 30          	mov bl, bh
0041+  050E DB          	push al					; save a
0042+  050F 07 FB 04    	call hex_ascii_encode
0043+  0512 EA          	pop bl	
0044+  0513 FD 9E 04    	shl al, 4
0045+  0516 8C          	or al, bl
0046+  0517 E5          	pop b
0047+  0518 09          	ret	
0048+  0519             
0049+  0519             
0050+  0519             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0519             ; printf
0052+  0519             ; no need for explanations!
0053+  0519             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  0519             printf:
0055+  0519 09          	ret
0056+  051A             
0057+  051A             
0058+  051A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  051A             ; scanf
0060+  051A             ; no need for explanations!
0061+  051A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  051A             scanf:
0063+  051A 09          	ret
0064+  051B             
0065+  051B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  051B             ; ITOA
0067+  051B             ; 8bit value in BL
0068+  051B             ; 2 byte ASCII result in A
0069+  051B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  051B             itoa:
0071+  051B DA          	push d
0072+  051C D8          	push b
0073+  051D A7 00       	mov bh, 0
0074+  051F FD A4 04    	shr bl, 4	
0075+  0522 74          	mov d, b
0076+  0523 1F E1 04    	mov al, [d + s_hex_digits]
0077+  0526 23          	mov ah, al
0078+  0527             	
0079+  0527 E5          	pop b
0080+  0528 D8          	push b
0081+  0529 A7 00       	mov bh, 0
0082+  052B FD 87 0F    	and bl, $0F
0083+  052E 74          	mov d, b
0084+  052F 1F E1 04    	mov al, [d + s_hex_digits]
0085+  0532 E5          	pop b
0086+  0533 E7          	pop d
0087+  0534 09          	ret
0088+  0535             
0089+  0535             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0535             ; HEX STRING TO BINARY
0091+  0535             ; di = destination address
0092+  0535             ; si = source
0093+  0535             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0535             hex_to_int:
0095+  0535             hex_to_int_L1:
0096+  0535 F6          	lodsb					; load from [SI] to AL
0097+  0536 B9 00       	cmp al, 0				; check if ASCII 0
0098+  0538 C6 45 05    	jz hex_to_int_ret
0099+  053B 36          	mov bh, al
0100+  053C F6          	lodsb
0101+  053D 2F          	mov bl, al
0102+  053E 07 09 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  0541 F7          	stosb					; store AL to [DI]
0104+  0542 0A 35 05    	jmp hex_to_int_L1
0105+  0545             hex_to_int_ret:
0106+  0545 09          	ret		
0107+  0546             
0108+  0546             
0109+  0546             
0110+  0546             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0546             ; GETCHAR
0112+  0546             ; char in ah
0113+  0546             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0546             getchar:
0115+  0546 DB          	push al
0116+  0547             getchar_retry:
0117+  0547 FD 0C       	sti
0118+  0549 19 01       	mov al, 1
0119+  054B 05 03       	syscall sys_io			; receive in AH
0120+  054D B9 00       	cmp al, 0			; check if any char was receive
0121+  054F C6 47 05    	je getchar_retry
0122+  0552 E8          	pop al
0123+  0553 09          	ret
0124+  0554             
0125+  0554             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0554             ; PUTCHAR
0127+  0554             ; char in ah
0128+  0554             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0554             putchar:
0130+  0554 D7          	push a
0131+  0555 19 00       	mov al, 0
0132+  0557 05 03       	syscall sys_io			; char in AH
0133+  0559 E4          	pop a
0134+  055A 09          	ret
0135+  055B             
0136+  055B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  055B             ;; INPUT A STRING
0138+  055B             ;; terminates with null
0139+  055B             ;; pointer in D
0140+  055B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  055B             gets:
0142+  055B D7          	push a
0143+  055C DA          	push d
0144+  055D             gets_loop:
0145+  055D FD 0C       	sti
0146+  055F 19 01       	mov al, 1
0147+  0561 05 03       	syscall sys_io			; receive in AH
0148+  0563 B9 00       	cmp al, 0				; check error code (AL)
0149+  0565 C6 5D 05    	je gets_loop			; if no char received, retry
0150+  0568             
0151+  0568 76 1B       	cmp ah, 27
0152+  056A C6 8B 05    	je gets_telnet_escape
0153+  056D 76 0A       	cmp ah, $0A				; LF
0154+  056F C6 E4 05    	je gets_end
0155+  0572 76 0D       	cmp ah, $0D				; CR
0156+  0574 C6 E4 05    	je gets_end
0157+  0577 76 5C       	cmp ah, $5C				; '\\'
0158+  0579 C6 BB 05    	je gets_escape
0159+  057C             	
0160+  057C 76 08       	cmp ah, $08			; check for backspace
0161+  057E C6 87 05    	je gets_backspace
0162+  0581             
0163+  0581 1A          	mov al, ah
0164+  0582 3E          	mov [d], al
0165+  0583 79          	inc d
0166+  0584 0A 5D 05    	jmp gets_loop
0167+  0587             gets_backspace:
0168+  0587 7F          	dec d
0169+  0588 0A 5D 05    	jmp gets_loop
0170+  058B             gets_telnet_escape:
0171+  058B FD 0C       	sti
0172+  058D 19 01       	mov al, 1
0173+  058F 05 03       	syscall sys_io				; receive in AH without echo
0174+  0591 B9 00       	cmp al, 0					; check error code (AL)
0175+  0593 C6 8B 05    	je gets_telnet_escape		; if no char received, retry
0176+  0596 76 5B       	cmp ah, '['
0177+  0598 C7 5D 05    	jne gets_loop
0178+  059B             gets_telnet_escape_phase2:
0179+  059B FD 0C       	sti
0180+  059D 19 01       	mov al, 1
0181+  059F 05 03       	syscall sys_io					; receive in AH without echo
0182+  05A1 B9 00       	cmp al, 0						; check error code (AL)
0183+  05A3 C6 9B 05    	je gets_telnet_escape_phase2	; if no char received, retry
0184+  05A6 76 44       	cmp ah, 'D'
0185+  05A8 C6 B3 05    	je gets_left_arrow
0186+  05AB 76 43       	cmp ah, 'C'
0187+  05AD C6 B7 05    	je gets_right_arrow
0188+  05B0 0A 5D 05    	jmp gets_loop
0189+  05B3             gets_left_arrow:
0190+  05B3 7F          	dec d
0191+  05B4 0A 5D 05    	jmp gets_loop
0192+  05B7             gets_right_arrow:
0193+  05B7 79          	inc d
0194+  05B8 0A 5D 05    	jmp gets_loop
0195+  05BB             gets_escape:
0196+  05BB FD 0C       	sti
0197+  05BD 19 01       	mov al, 1
0198+  05BF 05 03       	syscall sys_io			; receive in AH
0199+  05C1 B9 00       	cmp al, 0				; check error code (AL)
0200+  05C3 C6 BB 05    	je gets_escape			; if no char received, retry
0201+  05C6 76 6E       	cmp ah, 'n'
0202+  05C8 C6 D6 05    	je gets_LF
0203+  05CB 76 72       	cmp ah, 'r'
0204+  05CD C6 DD 05    	je gets_CR
0205+  05D0 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0206+  05D1 3E          	mov [d], al
0207+  05D2 79          	inc d
0208+  05D3 0A 5D 05    	jmp gets_loop
0209+  05D6             gets_LF:
0210+  05D6 19 0A       	mov al, $0A
0211+  05D8 3E          	mov [d], al
0212+  05D9 79          	inc d
0213+  05DA 0A 5D 05    	jmp gets_loop
0214+  05DD             gets_CR:
0215+  05DD 19 0D       	mov al, $0D
0216+  05DF 3E          	mov [d], al
0217+  05E0 79          	inc d
0218+  05E1 0A 5D 05    	jmp gets_loop
0219+  05E4             gets_end:
0220+  05E4 19 00       	mov al, 0
0221+  05E6 3E          	mov [d], al				; terminate string
0222+  05E7 E7          	pop d
0223+  05E8 E4          	pop a
0224+  05E9 09          	ret
0225+  05EA             
0226+  05EA             
0227+  05EA             
0228+  05EA             
0229+  05EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0230+  05EA             ;; INPUT TEXT
0231+  05EA             ;; terminated with CTRL+D
0232+  05EA             ;; pointer in D
0233+  05EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0234+  05EA             gettxt:
0235+  05EA D7          	push a
0236+  05EB DA          	push d
0237+  05EC             gettxt_loop:
0238+  05EC 19 01       	mov al, 1
0239+  05EE 05 03       	syscall sys_io			; receive in AH
0240+  05F0 B9 00       	cmp al, 0				; check error code (AL)
0241+  05F2 C6 EC 05    	je gettxt_loop		; if no char received, retry
0242+  05F5 76 04       	cmp ah, 4			; EOT
0243+  05F7 C6 35 06    	je gettxt_end
0244+  05FA 76 08       	cmp ah, $08			; check for backspace
0245+  05FC C6 31 06    	je gettxt_backspace
0246+  05FF 76 5C       	cmp ah, $5C				; '\\'
0247+  0601 C6 0A 06    	je gettxt_escape
0248+  0604 1A          	mov al, ah
0249+  0605 3E          	mov [d], al
0250+  0606 79          	inc d
0251+  0607 0A EC 05    	jmp gettxt_loop
0252+  060A             gettxt_escape:
0253+  060A 19 01       	mov al, 1
0254+  060C 05 03       	syscall sys_io			; receive in AH
0255+  060E B9 00       	cmp al, 0				; check error code (AL)
0256+  0610 C6 0A 06    	je gettxt_escape		; if no char received, retry
0257+  0613 76 6E       	cmp ah, 'n'
0258+  0615 C6 23 06    	je gettxt_LF
0259+  0618 76 72       	cmp ah, 'r'
0260+  061A C6 2A 06    	je gettxt_CR
0261+  061D 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0262+  061E 3E          	mov [d], al
0263+  061F 79          	inc d
0264+  0620 0A EC 05    	jmp gettxt_loop
0265+  0623             gettxt_LF:
0266+  0623 19 0A       	mov al, $0A
0267+  0625 3E          	mov [d], al
0268+  0626 79          	inc d
0269+  0627 0A EC 05    	jmp gettxt_loop
0270+  062A             gettxt_CR:
0271+  062A 19 0D       	mov al, $0D
0272+  062C 3E          	mov [d], al
0273+  062D 79          	inc d
0274+  062E 0A EC 05    	jmp gettxt_loop
0275+  0631             gettxt_backspace:
0276+  0631 7F          	dec d
0277+  0632 0A EC 05    	jmp gettxt_loop
0278+  0635             gettxt_end:
0279+  0635 19 00       	mov al, 0
0280+  0637 3E          	mov [d], al				; terminate string
0281+  0638 E7          	pop d
0282+  0639 E4          	pop a
0283+  063A 09          	ret
0284+  063B             
0285+  063B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  063B             ; PRINT NEW LINE
0287+  063B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  063B             printnl:
0289+  063B D7          	push a
0290+  063C 10 00 0A    	mov a, $0A00
0291+  063F 05 03       	syscall sys_io
0292+  0641 10 00 0D    	mov a, $0D00
0293+  0644 05 03       	syscall sys_io
0294+  0646 E4          	pop a
0295+  0647 09          	ret
0296+  0648             
0297+  0648             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0298+  0648             ; strtoint
0299+  0648             ; 4 digit hex string number in d
0300+  0648             ; integer returned in A
0301+  0648             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0302+  0648             strtointx:
0303+  0648 D8          	push b
0304+  0649 32          	mov bl, [d]
0305+  064A 37          	mov bh, bl
0306+  064B 33 01 00    	mov bl, [d + 1]
0307+  064E 07 09 05    	call atoi				; convert to int in AL
0308+  0651 23          	mov ah, al				; move to AH
0309+  0652 33 02 00    	mov bl, [d + 2]
0310+  0655 37          	mov bh, bl
0311+  0656 33 03 00    	mov bl, [d + 3]
0312+  0659 07 09 05    	call atoi				; convert to int in AL
0313+  065C E5          	pop b
0314+  065D 09          	ret
0315+  065E             
0316+  065E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0317+  065E             ; strtoint
0318+  065E             ; 5 digit base10 string number in d
0319+  065E             ; integer returned in A
0320+  065E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0321+  065E             strtoint:
0322+  065E E2          	push si
0323+  065F D8          	push b
0324+  0660 D9          	push c
0325+  0661 DA          	push d
0326+  0662 07 91 04    	call strlen			; get string length in C
0327+  0665 7E          	dec c
0328+  0666 FD 4E       	mov si, d
0329+  0668 12          	mov a, c
0330+  0669 FD 99       	shl a
0331+  066B 3B F1 04    	mov d, table_power
0332+  066E 59          	add d, a
0333+  066F 38 00 00    	mov c, 0
0334+  0672             strtoint_L0:
0335+  0672 F6          	lodsb			; load ASCII to al
0336+  0673 B9 00       	cmp al, 0
0337+  0675 C6 88 06    	je strtoint_end
0338+  0678 6F 30       	sub al, $30		; make into integer
0339+  067A 22 00       	mov ah, 0
0340+  067C 2A          	mov b, [d]
0341+  067D AC          	mul a, b			; result in B since it fits in 16bits
0342+  067E 11          	mov a, b
0343+  067F 28          	mov b, c
0344+  0680 54          	add a, b
0345+  0681 39          	mov c, a
0346+  0682 63 02 00    	sub d, 2
0347+  0685 0A 72 06    	jmp strtoint_L0
0348+  0688             strtoint_end:
0349+  0688 12          	mov a, c
0350+  0689 E7          	pop d
0351+  068A E6          	pop c
0352+  068B E5          	pop b
0353+  068C EF          	pop si
0354+  068D 09          	ret
0355+  068E             
0356+  068E             
0357+  068E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0358+  068E             ; PRINT NULL TERMINATED STRING
0359+  068E             ; pointer in D
0360+  068E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0361+  068E             puts:
0362+  068E D7          	push a
0363+  068F DA          	push d
0364+  0690             puts_L1:
0365+  0690 1E          	mov al, [d]
0366+  0691 B9 00       	cmp al, 0
0367+  0693 C6 9F 06    	jz puts_END
0368+  0696 23          	mov ah, al
0369+  0697 19 00       	mov al, 0
0370+  0699 05 03       	syscall sys_io
0371+  069B 79          	inc d
0372+  069C 0A 90 06    	jmp puts_L1
0373+  069F             puts_END:
0374+  069F E7          	pop d
0375+  06A0 E4          	pop a
0376+  06A1 09          	ret
0377+  06A2             
0378+  06A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  06A2             ; PRINT N SIZE STRING
0380+  06A2             ; pointer in D
0381+  06A2             ; size in C
0382+  06A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0383+  06A2             putsn:
0384+  06A2 DB          	push al
0385+  06A3 DA          	push d
0386+  06A4 D9          	push c
0387+  06A5             putsn_L0:
0388+  06A5 1E          	mov al, [d]
0389+  06A6 23          	mov ah, al
0390+  06A7 19 00       	mov al, 0
0391+  06A9 05 03       	syscall sys_io
0392+  06AB 79          	inc d
0393+  06AC 7E          	dec c	
0394+  06AD C2 00 00    	cmp c, 0
0395+  06B0 C7 A5 06    	jne putsn_L0
0396+  06B3             putsn_end:
0397+  06B3 E6          	pop c
0398+  06B4 E7          	pop d
0399+  06B5 E8          	pop al
0400+  06B6 09          	ret
0401+  06B7             
0402+  06B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0403+  06B7             ; print 16bit decimal number
0404+  06B7             ; input number in A
0405+  06B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  06B7             print_u16d:
0407+  06B7 D7          	push a
0408+  06B8 D8          	push b
0409+  06B9 26 10 27    	mov b, 10000
0410+  06BC AE          	div a, b			; get 10000 coeff.
0411+  06BD 07 E3 06    	call print_number
0412+  06C0 11          	mov a, b
0413+  06C1 26 E8 03    	mov b, 1000
0414+  06C4 AE          	div a, b			; get 10000 coeff.
0415+  06C5 07 E3 06    	call print_number
0416+  06C8 11          	mov a, b
0417+  06C9 26 64 00    	mov b, 100
0418+  06CC AE          	div a, b
0419+  06CD 07 E3 06    	call print_number
0420+  06D0 11          	mov a, b
0421+  06D1 26 0A 00    	mov b, 10
0422+  06D4 AE          	div a, b
0423+  06D5 07 E3 06    	call print_number
0424+  06D8 11          	mov a, b
0425+  06D9 6A 30       	add al, $30
0426+  06DB 23          	mov ah, al
0427+  06DC 19 00       	mov al, 0
0428+  06DE 05 03       	syscall sys_io	; print coeff
0429+  06E0 E5          	pop b
0430+  06E1 E4          	pop a
0431+  06E2 09          	ret
0432+  06E3             
0433+  06E3             
0434+  06E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0435+  06E3             ; if A == 0, print space
0436+  06E3             ; else print A
0437+  06E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0438+  06E3             print_number:
0439+  06E3 6A 30       	add al, $30
0440+  06E5 23          	mov ah, al
0441+  06E6 07 54 05    	call putchar
0442+  06E9 09          	ret
0443+  06EA             
0444+  06EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06EA             ; PRINT 16BIT HEX INTEGER
0446+  06EA             ; integer value in reg B
0447+  06EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06EA             print_u16x:
0449+  06EA D7          	push a
0450+  06EB D8          	push b
0451+  06EC DD          	push bl
0452+  06ED 30          	mov bl, bh
0453+  06EE 07 1B 05    	call itoa				; convert bh to char in A
0454+  06F1 2F          	mov bl, al				; save al
0455+  06F2 19 00       	mov al, 0
0456+  06F4 05 03       	syscall sys_io				; display AH
0457+  06F6 24          	mov ah, bl				; retrieve al
0458+  06F7 19 00       	mov al, 0
0459+  06F9 05 03       	syscall sys_io				; display AL
0460+  06FB             
0461+  06FB EA          	pop bl
0462+  06FC 07 1B 05    	call itoa				; convert bh to char in A
0463+  06FF 2F          	mov bl, al				; save al
0464+  0700 19 00       	mov al, 0
0465+  0702 05 03       	syscall sys_io				; display AH
0466+  0704 24          	mov ah, bl				; retrieve al
0467+  0705 19 00       	mov al, 0
0468+  0707 05 03       	syscall sys_io				; display AL
0469+  0709             
0470+  0709 E5          	pop b
0471+  070A E4          	pop a
0472+  070B 09          	ret
0473+  070C             
0474+  070C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475+  070C             ; INPUT 16BIT HEX INTEGER
0476+  070C             ; read 16bit integer into A
0477+  070C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0478+  070C             scan_u16x:
0479+  070C F8 10 00    	enter 16
0480+  070F D8          	push b
0481+  0710 DA          	push d
0482+  0711             
0483+  0711 FA F1 FF    	lea d, [bp + -15]
0484+  0714 07 5B 05    	call gets				; get number
0485+  0717             
0486+  0717 32          	mov bl, [d]
0487+  0718 37          	mov bh, bl
0488+  0719 33 01 00    	mov bl, [d + 1]
0489+  071C 07 09 05    	call atoi				; convert to int in AL
0490+  071F 23          	mov ah, al				; move to AH
0491+  0720             
0492+  0720 33 02 00    	mov bl, [d + 2]
0493+  0723 37          	mov bh, bl
0494+  0724 33 03 00    	mov bl, [d + 3]
0495+  0727 07 09 05    	call atoi				; convert to int in AL
0496+  072A             
0497+  072A E7          	pop d
0498+  072B E5          	pop b
0499+  072C F9          	leave
0500+  072D 09          	ret
0501+  072E             
0502+  072E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0503+  072E             ; PRINT 8bit HEX INTEGER
0504+  072E             ; integer value in reg bl
0505+  072E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506+  072E             print_u8x:
0507+  072E D7          	push a
0508+  072F DD          	push bl
0509+  0730             
0510+  0730 07 1B 05    	call itoa				; convert bl to char in A
0511+  0733 2F          	mov bl, al				; save al
0512+  0734 19 00       	mov al, 0
0513+  0736 05 03       	syscall sys_io				; display AH
0514+  0738 24          	mov ah, bl				; retrieve al
0515+  0739 19 00       	mov al, 0
0516+  073B 05 03       	syscall sys_io				; display AL
0517+  073D             
0518+  073D EA          	pop bl
0519+  073E E4          	pop a
0520+  073F 09          	ret
0521+  0740             
0522+  0740             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0523+  0740             ; print 8bit decimal unsigned number
0524+  0740             ; input number in AL
0525+  0740             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0526+  0740             print_u8d:
0527+  0740 D7          	push a
0528+  0741 D8          	push b
0529+  0742             
0530+  0742 22 00       	mov ah, 0
0531+  0744 26 64 00    	mov b, 100
0532+  0747 AE          	div a, b
0533+  0748 D8          	push b			; save remainder
0534+  0749 B9 00       	cmp al, 0
0535+  074B C6 55 07    	je skip100
0536+  074E 6A 30       	add al, $30
0537+  0750 23          	mov ah, al
0538+  0751 19 00       	mov al, 0
0539+  0753 05 03       	syscall sys_io	; print coeff
0540+  0755             skip100:
0541+  0755 E4          	pop a
0542+  0756 22 00       	mov ah, 0
0543+  0758 26 0A 00    	mov b, 10
0544+  075B AE          	div a, b
0545+  075C D8          	push b			; save remainder
0546+  075D B9 00       	cmp al, 0
0547+  075F C6 69 07    	je skip10
0548+  0762 6A 30       	add al, $30
0549+  0764 23          	mov ah, al
0550+  0765 19 00       	mov al, 0
0551+  0767 05 03       	syscall sys_io	; print coeff
0552+  0769             skip10:
0553+  0769 E4          	pop a
0554+  076A 1B          	mov al, bl
0555+  076B 6A 30       	add al, $30
0556+  076D 23          	mov ah, al
0557+  076E 19 00       	mov al, 0
0558+  0770 05 03       	syscall sys_io	; print coeff
0559+  0772 E5          	pop b
0560+  0773 E4          	pop a
0561+  0774 09          	ret
0562+  0775             
0563+  0775             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0564+  0775             ; INPUT 8BIT HEX INTEGER
0565+  0775             ; read 8bit integer into AL
0566+  0775             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0567+  0775             scan_u8x:
0568+  0775 F8 04 00    	enter 4
0569+  0778 D8          	push b
0570+  0779 DA          	push d
0571+  077A             
0572+  077A FA FD FF    	lea d, [bp + -3]
0573+  077D 07 5B 05    	call gets				; get number
0574+  0780             
0575+  0780 32          	mov bl, [d]
0576+  0781 37          	mov bh, bl
0577+  0782 33 01 00    	mov bl, [d + 1]
0578+  0785 07 09 05    	call atoi				; convert to int in AL
0579+  0788             
0580+  0788 E7          	pop d
0581+  0789 E5          	pop b
0582+  078A F9          	leave
0583+  078B 09          	ret
0584+  078C             
0585+  078C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0586+  078C             ; input decimal number
0587+  078C             ; result in A
0588+  078C             ; 655'\0'
0589+  078C             ; low--------high
0590+  078C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591+  078C             scan_u16d:
0592+  078C F8 08 00    	enter 8
0593+  078F E2          	push si
0594+  0790 D8          	push b
0595+  0791 D9          	push c
0596+  0792 DA          	push d
0597+  0793 FA F9 FF    	lea d, [bp +- 7]
0598+  0796 07 5B 05    	call gets
0599+  0799 07 91 04    	call strlen			; get string length in C
0600+  079C 7E          	dec c
0601+  079D FD 4E       	mov si, d
0602+  079F 12          	mov a, c
0603+  07A0 FD 99       	shl a
0604+  07A2 3B F1 04    	mov d, table_power
0605+  07A5 59          	add d, a
0606+  07A6 38 00 00    	mov c, 0
0607+  07A9             mul_loop:
0608+  07A9 F6          	lodsb			; load ASCII to al
0609+  07AA B9 00       	cmp al, 0
0610+  07AC C6 BF 07    	je mul_exit
0611+  07AF 6F 30       	sub al, $30		; make into integer
0612+  07B1 22 00       	mov ah, 0
0613+  07B3 2A          	mov b, [d]
0614+  07B4 AC          	mul a, b			; result in B since it fits in 16bits
0615+  07B5 11          	mov a, b
0616+  07B6 28          	mov b, c
0617+  07B7 54          	add a, b
0618+  07B8 39          	mov c, a
0619+  07B9 63 02 00    	sub d, 2
0620+  07BC 0A A9 07    	jmp mul_loop
0621+  07BF             mul_exit:
0622+  07BF 12          	mov a, c
0623+  07C0 E7          	pop d
0624+  07C1 E6          	pop c
0625+  07C2 E5          	pop b
0626+  07C3 EF          	pop si
0627+  07C4 F9          	leave
0628+  07C5 09          	ret
0041   07C6             ; --- END INCLUDE BLOCK
0042   07C6             
0043   07C6             
0044   07C6             .end
tasm: Number of errors = 0
