0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 26 50 04      mov b, __i
0011   0405 FD 42 52 04   mov [__p], b
0012   0409 26 52 04      mov b, __p
0013   040C FD 42 54 04   mov [__pp], b
0014   0410 29 54 04      mov b, [__pp] ; pp
0015   0413 74            mov d, b
0016   0414 2A            mov b, [d]
0017   0415 74            mov d, b
0018   0416 2A            mov b, [d]
0019   0417 FD AB         swp b
0020   0419 D8            push b
0021   041A 07 3B 04      call printn
0022   041D 51 02 00      add sp, 2
0023   0420 F9            leave
0024   0421 05 0B         syscall sys_terminate_proc
0025   0423             
0026   0423             scann:
0027   0423 D2            push bp
0028   0424 9B            mov bp, sp
0029   0425 52 02 00      sub sp, 2 ; m
0030   0428             
0031   0428             ; --- BEGIN INLINE ASM BLOCK
0032   0428 07 A0 07      call scan_u16d
0033   042B 45 FF FF      mov [bp + -1], a
0034   042E             ; --- END INLINE ASM BLOCK
0035   042E             
0036   042E FA 05 00      lea d, [bp + 5] ; n
0037   0431 2A            mov b, [d]
0038   0432 D8            push b
0039   0433 2C FF FF      mov b, [bp + -1] ; m
0040   0436 E7            pop d
0041   0437 11            mov a, b
0042   0438 43            mov [d], a
0043   0439 F9            leave
0044   043A 09            ret
0045   043B             
0046   043B             printn:
0047   043B D2            push bp
0048   043C 9B            mov bp, sp
0049   043D             
0050   043D             ; --- BEGIN INLINE ASM BLOCK
0051   043D 17 05 00      mov a, [bp + 5]
0052   0440 07 CB 06      call print_u16d
0053   0443             ; --- END INLINE ASM BLOCK
0054   0443             
0055   0443 F9            leave
0056   0444 09            ret
0057   0445             
0058   0445             print:
0059   0445 D2            push bp
0060   0446 9B            mov bp, sp
0061   0447             
0062   0447             ; --- BEGIN INLINE ASM BLOCK
0063   0447 17 05 00      mov a, [bp + 5]
0064   044A 3C            mov d, a
0065   044B 07 A2 06      call puts
0066   044E             ; --- END INLINE ASM BLOCK
0067   044E             
0068   044E F9            leave
0069   044F 09            ret
0070   0450             ; --- END TEXT BLOCK
0071   0450             
0072   0450             ; --- BEGIN DATA BLOCK
0073   0450 05 00       __i: .dw 5
0074   0452 00 00       __p: .fill 2, 0
0075   0454 00 00       __pp: .fill 2, 0
0076   0456             ; --- END DATA BLOCK
0077   0456             
0078   0456             ; --- BEGIN INCLUDE BLOCK
0079   0456             .include "lib/stdio.asm"
0001+  0456             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0456             ; stdio.s
0003+  0456             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0456             .include "lib/string.asm"
0001++ 0456             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0456             ; string.s
0003++ 0456             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0456             
0005++ 0456             
0006++ 0456             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0456             ; strrev
0008++ 0456             ; reverse a string
0009++ 0456             ; D = string address
0010++ 0456             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0456             ; 01234
0012++ 0456             strrev:
0013++ 0456 4B          	pusha
0014++ 0457 07 9D 04    	call strlen	; length in C
0015++ 045A 12          	mov a, c
0016++ 045B AF 01 00    	cmp a, 1
0017++ 045E D0 78 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0461 7D          	dec a
0019++ 0462 FD 4E       	mov si, d	; beginning of string
0020++ 0464 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0466 59          	add d, a	; end of string
0022++ 0467 12          	mov a, c
0023++ 0468 FD 9B       	shr a		; divide by 2
0024++ 046A 39          	mov c, a	; C now counts the steps
0025++ 046B             strrev_L0:
0026++ 046B 32          	mov bl, [d]	; save load right-side char into BL
0027++ 046C F6          	lodsb		; load left-side char into AL; increase SI
0028++ 046D 3E          	mov [d], al	; store left char into right side
0029++ 046E 1B          	mov al, bl
0030++ 046F F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0470 7E          	dec c
0032++ 0471 7F          	dec d
0033++ 0472 C2 00 00    	cmp c, 0
0034++ 0475 C7 6B 04    	jne strrev_L0
0035++ 0478             strrev_end:
0036++ 0478 4C          	popa
0037++ 0479 09          	ret
0038++ 047A             	
0039++ 047A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 047A             ; strchr
0041++ 047A             ; search string in D for char in AL
0042++ 047A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 047A             strchr:
0044++ 047A             strchr_L0:
0045++ 047A 32          	mov bl, [d]
0046++ 047B C1 00       	cmp bl, 0
0047++ 047D C6 88 04    	je strchr_end
0048++ 0480 BA          	cmp al, bl
0049++ 0481 C6 88 04    	je strchr_end
0050++ 0484 79          	inc d
0051++ 0485 0A 7A 04    	jmp strchr_L0
0052++ 0488             strchr_end:
0053++ 0488 1B          	mov al, bl
0054++ 0489 09          	ret
0055++ 048A             
0056++ 048A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 048A             ; strstr
0058++ 048A             ; find sub-string
0059++ 048A             ; str1 in SI
0060++ 048A             ; str2 in DI
0061++ 048A             ; SI points to end of source string
0062++ 048A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 048A             strstr:
0064++ 048A DB          	push al
0065++ 048B DA          	push d
0066++ 048C E3          	push di
0067++ 048D             strstr_loop:
0068++ 048D F3          	cmpsb					; compare a byte of the strings
0069++ 048E C7 99 04    	jne strstr_ret
0070++ 0491 FC 00 00    	lea d, [di + 0]
0071++ 0494 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0496 C7 8D 04    	jne strstr_loop				; equal chars but not at end
0073++ 0499             strstr_ret:
0074++ 0499 F0          	pop di
0075++ 049A E7          	pop d
0076++ 049B E8          	pop al
0077++ 049C 09          	ret
0078++ 049D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 049D             ; length of null terminated string
0080++ 049D             ; result in C
0081++ 049D             ; pointer in D
0082++ 049D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 049D             strlen:
0084++ 049D DA          	push d
0085++ 049E 38 00 00    	mov c, 0
0086++ 04A1             strlen_L1:
0087++ 04A1 BD 00       	cmp byte [d], 0
0088++ 04A3 C6 AB 04    	je strlen_ret
0089++ 04A6 79          	inc d
0090++ 04A7 78          	inc c
0091++ 04A8 0A A1 04    	jmp strlen_L1
0092++ 04AB             strlen_ret:
0093++ 04AB E7          	pop d
0094++ 04AC 09          	ret
0095++ 04AD             
0096++ 04AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04AD             ; STRCMP
0098++ 04AD             ; compare two strings
0099++ 04AD             ; str1 in SI
0100++ 04AD             ; str2 in DI
0101++ 04AD             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04AD             strcmp:
0104++ 04AD DB          	push al
0105++ 04AE DA          	push d
0106++ 04AF E3          	push di
0107++ 04B0 E2          	push si
0108++ 04B1             strcmp_loop:
0109++ 04B1 F3          	cmpsb					; compare a byte of the strings
0110++ 04B2 C7 BD 04    	jne strcmp_ret
0111++ 04B5 FB FF FF    	lea d, [si +- 1]
0112++ 04B8 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04BA C7 B1 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04BD             strcmp_ret:
0115++ 04BD EF          	pop si
0116++ 04BE F0          	pop di
0117++ 04BF E7          	pop d
0118++ 04C0 E8          	pop al
0119++ 04C1 09          	ret
0120++ 04C2             
0121++ 04C2             
0122++ 04C2             ; STRCPY
0123++ 04C2             ; copy null terminated string from SI to DI
0124++ 04C2             ; source in SI
0125++ 04C2             ; destination in DI
0126++ 04C2             strcpy:
0127++ 04C2 E2          	push si
0128++ 04C3 E3          	push di
0129++ 04C4 DB          	push al
0130++ 04C5             strcpy_L1:
0131++ 04C5 F6          	lodsb
0132++ 04C6 F7          	stosb
0133++ 04C7 B9 00       	cmp al, 0
0134++ 04C9 C7 C5 04    	jne strcpy_L1
0135++ 04CC             strcpy_end:
0136++ 04CC E8          	pop al
0137++ 04CD F0          	pop di
0138++ 04CE EF          	pop si
0139++ 04CF 09          	ret
0140++ 04D0             
0141++ 04D0             ; STRCAT
0142++ 04D0             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04D0             ; source in SI
0144++ 04D0             ; destination in DI
0145++ 04D0             strcat:
0146++ 04D0 E2          	push si
0147++ 04D1 E3          	push di
0148++ 04D2 D7          	push a
0149++ 04D3 DA          	push d
0150++ 04D4 50          	mov a, di
0151++ 04D5 3C          	mov d, a
0152++ 04D6             strcat_goto_end_L1:
0153++ 04D6 BD 00       	cmp byte[d], 0
0154++ 04D8 C6 DF 04    	je strcat_start
0155++ 04DB 79          	inc d
0156++ 04DC 0A D6 04    	jmp strcat_goto_end_L1
0157++ 04DF             strcat_start:
0158++ 04DF FD 50       	mov di, d
0159++ 04E1             strcat_L1:
0160++ 04E1 F6          	lodsb
0161++ 04E2 F7          	stosb
0162++ 04E3 B9 00       	cmp al, 0
0163++ 04E5 C7 E1 04    	jne strcat_L1
0164++ 04E8             strcat_end:
0165++ 04E8 E7          	pop d
0166++ 04E9 E4          	pop a
0167++ 04EA F0          	pop di
0168++ 04EB EF          	pop si
0169++ 04EC 09          	ret
0005+  04ED             
0006+  04ED 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  04F1 34 35 36 37 
0006+  04F5 38 39 41 42 
0006+  04F9 43 44 45 46 
0007+  04FD 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  0501 1B 5B 48 00 
0008+  0505             
0009+  0505 01 00       table_power:.dw 1
0010+  0507 0A 00       			.dw 10
0011+  0509 64 00       			.dw 100
0012+  050B E8 03       			.dw 1000
0013+  050D 10 27       			.dw 10000
0014+  050F             
0015+  050F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  050F             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  050F             ; ASCII in BL
0018+  050F             ; result in AL
0019+  050F             ; ascii for F = 0100 0110
0020+  050F             ; ascii for 9 = 0011 1001
0021+  050F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  050F             hex_ascii_encode:
0023+  050F 1B          	mov al, bl
0024+  0510 93 40       	test al, $40				; test if letter or number
0025+  0512 C7 18 05    	jnz hex_letter
0026+  0515 87 0F       	and al, $0F				; get number
0027+  0517 09          	ret
0028+  0518             hex_letter:
0029+  0518 87 0F       	and al, $0F				; get letter
0030+  051A 6A 09       	add al, 9
0031+  051C 09          	ret
0032+  051D             
0033+  051D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  051D             ; ATOI
0035+  051D             ; 2 letter hex string in B
0036+  051D             ; 8bit integer returned in AL
0037+  051D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  051D             atoi:
0039+  051D D8          	push b
0040+  051E 07 0F 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  0521 30          	mov bl, bh
0042+  0522 DB          	push al					; save a
0043+  0523 07 0F 05    	call hex_ascii_encode
0044+  0526 EA          	pop bl	
0045+  0527 FD 9E 04    	shl al, 4
0046+  052A 8C          	or al, bl
0047+  052B E5          	pop b
0048+  052C 09          	ret	
0049+  052D             
0050+  052D             
0051+  052D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  052D             ; printf
0053+  052D             ; no need for explanations!
0054+  052D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  052D             printf:
0056+  052D 09          	ret
0057+  052E             
0058+  052E             
0059+  052E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  052E             ; scanf
0061+  052E             ; no need for explanations!
0062+  052E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  052E             scanf:
0064+  052E 09          	ret
0065+  052F             
0066+  052F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  052F             ; ITOA
0068+  052F             ; 8bit value in BL
0069+  052F             ; 2 byte ASCII result in A
0070+  052F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  052F             itoa:
0072+  052F DA          	push d
0073+  0530 D8          	push b
0074+  0531 A7 00       	mov bh, 0
0075+  0533 FD A4 04    	shr bl, 4	
0076+  0536 74          	mov d, b
0077+  0537 1F ED 04    	mov al, [d + s_hex_digits]
0078+  053A 23          	mov ah, al
0079+  053B             	
0080+  053B E5          	pop b
0081+  053C D8          	push b
0082+  053D A7 00       	mov bh, 0
0083+  053F FD 87 0F    	and bl, $0F
0084+  0542 74          	mov d, b
0085+  0543 1F ED 04    	mov al, [d + s_hex_digits]
0086+  0546 E5          	pop b
0087+  0547 E7          	pop d
0088+  0548 09          	ret
0089+  0549             
0090+  0549             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0549             ; HEX STRING TO BINARY
0092+  0549             ; di = destination address
0093+  0549             ; si = source
0094+  0549             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0549             hex_to_int:
0096+  0549             hex_to_int_L1:
0097+  0549 F6          	lodsb					; load from [SI] to AL
0098+  054A B9 00       	cmp al, 0				; check if ASCII 0
0099+  054C C6 59 05    	jz hex_to_int_ret
0100+  054F 36          	mov bh, al
0101+  0550 F6          	lodsb
0102+  0551 2F          	mov bl, al
0103+  0552 07 1D 05    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0555 F7          	stosb					; store AL to [DI]
0105+  0556 0A 49 05    	jmp hex_to_int_L1
0106+  0559             hex_to_int_ret:
0107+  0559 09          	ret		
0108+  055A             
0109+  055A             
0110+  055A             
0111+  055A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  055A             ; GETCHAR
0113+  055A             ; char in ah
0114+  055A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  055A             getchar:
0116+  055A DB          	push al
0117+  055B             getchar_retry:
0118+  055B FD 0C       	sti
0119+  055D 19 01       	mov al, 1
0120+  055F 05 03       	syscall sys_io			; receive in AH
0121+  0561 B9 00       	cmp al, 0			; check if any char was receive
0122+  0563 C6 5B 05    	je getchar_retry
0123+  0566 E8          	pop al
0124+  0567 09          	ret
0125+  0568             
0126+  0568             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0568             ; PUTCHAR
0128+  0568             ; char in ah
0129+  0568             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0568             putchar:
0131+  0568 D7          	push a
0132+  0569 19 00       	mov al, 0
0133+  056B 05 03       	syscall sys_io			; char in AH
0134+  056D E4          	pop a
0135+  056E 09          	ret
0136+  056F             
0137+  056F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  056F             ;; INPUT A STRING
0139+  056F             ;; terminates with null
0140+  056F             ;; pointer in D
0141+  056F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  056F             gets:
0143+  056F D7          	push a
0144+  0570 DA          	push d
0145+  0571             gets_loop:
0146+  0571 FD 0C       	sti
0147+  0573 19 01       	mov al, 1
0148+  0575 05 03       	syscall sys_io			; receive in AH
0149+  0577 B9 00       	cmp al, 0				; check error code (AL)
0150+  0579 C6 71 05    	je gets_loop			; if no char received, retry
0151+  057C             
0152+  057C 76 1B       	cmp ah, 27
0153+  057E C6 9F 05    	je gets_telnet_escape
0154+  0581 76 0A       	cmp ah, $0A				; LF
0155+  0583 C6 F8 05    	je gets_end
0156+  0586 76 0D       	cmp ah, $0D				; CR
0157+  0588 C6 F8 05    	je gets_end
0158+  058B 76 5C       	cmp ah, $5C				; '\\'
0159+  058D C6 CF 05    	je gets_escape
0160+  0590             	
0161+  0590 76 08       	cmp ah, $08			; check for backspace
0162+  0592 C6 9B 05    	je gets_backspace
0163+  0595             
0164+  0595 1A          	mov al, ah
0165+  0596 3E          	mov [d], al
0166+  0597 79          	inc d
0167+  0598 0A 71 05    	jmp gets_loop
0168+  059B             gets_backspace:
0169+  059B 7F          	dec d
0170+  059C 0A 71 05    	jmp gets_loop
0171+  059F             gets_telnet_escape:
0172+  059F FD 0C       	sti
0173+  05A1 19 01       	mov al, 1
0174+  05A3 05 03       	syscall sys_io				; receive in AH without echo
0175+  05A5 B9 00       	cmp al, 0					; check error code (AL)
0176+  05A7 C6 9F 05    	je gets_telnet_escape		; if no char received, retry
0177+  05AA 76 5B       	cmp ah, '['
0178+  05AC C7 71 05    	jne gets_loop
0179+  05AF             gets_telnet_escape_phase2:
0180+  05AF FD 0C       	sti
0181+  05B1 19 01       	mov al, 1
0182+  05B3 05 03       	syscall sys_io					; receive in AH without echo
0183+  05B5 B9 00       	cmp al, 0						; check error code (AL)
0184+  05B7 C6 AF 05    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  05BA 76 44       	cmp ah, 'D'
0186+  05BC C6 C7 05    	je gets_left_arrow
0187+  05BF 76 43       	cmp ah, 'C'
0188+  05C1 C6 CB 05    	je gets_right_arrow
0189+  05C4 0A 71 05    	jmp gets_loop
0190+  05C7             gets_left_arrow:
0191+  05C7 7F          	dec d
0192+  05C8 0A 71 05    	jmp gets_loop
0193+  05CB             gets_right_arrow:
0194+  05CB 79          	inc d
0195+  05CC 0A 71 05    	jmp gets_loop
0196+  05CF             gets_escape:
0197+  05CF FD 0C       	sti
0198+  05D1 19 01       	mov al, 1
0199+  05D3 05 03       	syscall sys_io			; receive in AH
0200+  05D5 B9 00       	cmp al, 0				; check error code (AL)
0201+  05D7 C6 CF 05    	je gets_escape			; if no char received, retry
0202+  05DA 76 6E       	cmp ah, 'n'
0203+  05DC C6 EA 05    	je gets_LF
0204+  05DF 76 72       	cmp ah, 'r'
0205+  05E1 C6 F1 05    	je gets_CR
0206+  05E4 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  05E5 3E          	mov [d], al
0208+  05E6 79          	inc d
0209+  05E7 0A 71 05    	jmp gets_loop
0210+  05EA             gets_LF:
0211+  05EA 19 0A       	mov al, $0A
0212+  05EC 3E          	mov [d], al
0213+  05ED 79          	inc d
0214+  05EE 0A 71 05    	jmp gets_loop
0215+  05F1             gets_CR:
0216+  05F1 19 0D       	mov al, $0D
0217+  05F3 3E          	mov [d], al
0218+  05F4 79          	inc d
0219+  05F5 0A 71 05    	jmp gets_loop
0220+  05F8             gets_end:
0221+  05F8 19 00       	mov al, 0
0222+  05FA 3E          	mov [d], al				; terminate string
0223+  05FB E7          	pop d
0224+  05FC E4          	pop a
0225+  05FD 09          	ret
0226+  05FE             
0227+  05FE             
0228+  05FE             
0229+  05FE             
0230+  05FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  05FE             ;; INPUT TEXT
0232+  05FE             ;; terminated with CTRL+D
0233+  05FE             ;; pointer in D
0234+  05FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  05FE             gettxt:
0236+  05FE D7          	push a
0237+  05FF DA          	push d
0238+  0600             gettxt_loop:
0239+  0600 19 01       	mov al, 1
0240+  0602 05 03       	syscall sys_io			; receive in AH
0241+  0604 B9 00       	cmp al, 0				; check error code (AL)
0242+  0606 C6 00 06    	je gettxt_loop		; if no char received, retry
0243+  0609 76 04       	cmp ah, 4			; EOT
0244+  060B C6 49 06    	je gettxt_end
0245+  060E 76 08       	cmp ah, $08			; check for backspace
0246+  0610 C6 45 06    	je gettxt_backspace
0247+  0613 76 5C       	cmp ah, $5C				; '\\'
0248+  0615 C6 1E 06    	je gettxt_escape
0249+  0618 1A          	mov al, ah
0250+  0619 3E          	mov [d], al
0251+  061A 79          	inc d
0252+  061B 0A 00 06    	jmp gettxt_loop
0253+  061E             gettxt_escape:
0254+  061E 19 01       	mov al, 1
0255+  0620 05 03       	syscall sys_io			; receive in AH
0256+  0622 B9 00       	cmp al, 0				; check error code (AL)
0257+  0624 C6 1E 06    	je gettxt_escape		; if no char received, retry
0258+  0627 76 6E       	cmp ah, 'n'
0259+  0629 C6 37 06    	je gettxt_LF
0260+  062C 76 72       	cmp ah, 'r'
0261+  062E C6 3E 06    	je gettxt_CR
0262+  0631 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0632 3E          	mov [d], al
0264+  0633 79          	inc d
0265+  0634 0A 00 06    	jmp gettxt_loop
0266+  0637             gettxt_LF:
0267+  0637 19 0A       	mov al, $0A
0268+  0639 3E          	mov [d], al
0269+  063A 79          	inc d
0270+  063B 0A 00 06    	jmp gettxt_loop
0271+  063E             gettxt_CR:
0272+  063E 19 0D       	mov al, $0D
0273+  0640 3E          	mov [d], al
0274+  0641 79          	inc d
0275+  0642 0A 00 06    	jmp gettxt_loop
0276+  0645             gettxt_backspace:
0277+  0645 7F          	dec d
0278+  0646 0A 00 06    	jmp gettxt_loop
0279+  0649             gettxt_end:
0280+  0649 19 00       	mov al, 0
0281+  064B 3E          	mov [d], al				; terminate string
0282+  064C E7          	pop d
0283+  064D E4          	pop a
0284+  064E 09          	ret
0285+  064F             
0286+  064F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  064F             ; PRINT NEW LINE
0288+  064F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  064F             printnl:
0290+  064F D7          	push a
0291+  0650 10 00 0A    	mov a, $0A00
0292+  0653 05 03       	syscall sys_io
0293+  0655 10 00 0D    	mov a, $0D00
0294+  0658 05 03       	syscall sys_io
0295+  065A E4          	pop a
0296+  065B 09          	ret
0297+  065C             
0298+  065C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  065C             ; strtoint
0300+  065C             ; 4 digit hex string number in d
0301+  065C             ; integer returned in A
0302+  065C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  065C             strtointx:
0304+  065C D8          	push b
0305+  065D 32          	mov bl, [d]
0306+  065E 37          	mov bh, bl
0307+  065F 33 01 00    	mov bl, [d + 1]
0308+  0662 07 1D 05    	call atoi				; convert to int in AL
0309+  0665 23          	mov ah, al				; move to AH
0310+  0666 33 02 00    	mov bl, [d + 2]
0311+  0669 37          	mov bh, bl
0312+  066A 33 03 00    	mov bl, [d + 3]
0313+  066D 07 1D 05    	call atoi				; convert to int in AL
0314+  0670 E5          	pop b
0315+  0671 09          	ret
0316+  0672             
0317+  0672             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0672             ; strtoint
0319+  0672             ; 5 digit base10 string number in d
0320+  0672             ; integer returned in A
0321+  0672             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0672             strtoint:
0323+  0672 E2          	push si
0324+  0673 D8          	push b
0325+  0674 D9          	push c
0326+  0675 DA          	push d
0327+  0676 07 9D 04    	call strlen			; get string length in C
0328+  0679 7E          	dec c
0329+  067A FD 4E       	mov si, d
0330+  067C 12          	mov a, c
0331+  067D FD 99       	shl a
0332+  067F 3B 05 05    	mov d, table_power
0333+  0682 59          	add d, a
0334+  0683 38 00 00    	mov c, 0
0335+  0686             strtoint_L0:
0336+  0686 F6          	lodsb			; load ASCII to al
0337+  0687 B9 00       	cmp al, 0
0338+  0689 C6 9C 06    	je strtoint_end
0339+  068C 6F 30       	sub al, $30		; make into integer
0340+  068E 22 00       	mov ah, 0
0341+  0690 2A          	mov b, [d]
0342+  0691 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0692 11          	mov a, b
0344+  0693 28          	mov b, c
0345+  0694 54          	add a, b
0346+  0695 39          	mov c, a
0347+  0696 63 02 00    	sub d, 2
0348+  0699 0A 86 06    	jmp strtoint_L0
0349+  069C             strtoint_end:
0350+  069C 12          	mov a, c
0351+  069D E7          	pop d
0352+  069E E6          	pop c
0353+  069F E5          	pop b
0354+  06A0 EF          	pop si
0355+  06A1 09          	ret
0356+  06A2             
0357+  06A2             
0358+  06A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  06A2             ; PRINT NULL TERMINATED STRING
0360+  06A2             ; pointer in D
0361+  06A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  06A2             puts:
0363+  06A2 D7          	push a
0364+  06A3 DA          	push d
0365+  06A4             puts_L1:
0366+  06A4 1E          	mov al, [d]
0367+  06A5 B9 00       	cmp al, 0
0368+  06A7 C6 B3 06    	jz puts_END
0369+  06AA 23          	mov ah, al
0370+  06AB 19 00       	mov al, 0
0371+  06AD 05 03       	syscall sys_io
0372+  06AF 79          	inc d
0373+  06B0 0A A4 06    	jmp puts_L1
0374+  06B3             puts_END:
0375+  06B3 E7          	pop d
0376+  06B4 E4          	pop a
0377+  06B5 09          	ret
0378+  06B6             
0379+  06B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  06B6             ; PRINT N SIZE STRING
0381+  06B6             ; pointer in D
0382+  06B6             ; size in C
0383+  06B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  06B6             putsn:
0385+  06B6 DB          	push al
0386+  06B7 DA          	push d
0387+  06B8 D9          	push c
0388+  06B9             putsn_L0:
0389+  06B9 1E          	mov al, [d]
0390+  06BA 23          	mov ah, al
0391+  06BB 19 00       	mov al, 0
0392+  06BD 05 03       	syscall sys_io
0393+  06BF 79          	inc d
0394+  06C0 7E          	dec c	
0395+  06C1 C2 00 00    	cmp c, 0
0396+  06C4 C7 B9 06    	jne putsn_L0
0397+  06C7             putsn_end:
0398+  06C7 E6          	pop c
0399+  06C8 E7          	pop d
0400+  06C9 E8          	pop al
0401+  06CA 09          	ret
0402+  06CB             
0403+  06CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  06CB             ; print 16bit decimal number
0405+  06CB             ; input number in A
0406+  06CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  06CB             print_u16d:
0408+  06CB D7          	push a
0409+  06CC D8          	push b
0410+  06CD 26 10 27    	mov b, 10000
0411+  06D0 AE          	div a, b			; get 10000 coeff.
0412+  06D1 07 F7 06    	call print_number
0413+  06D4 11          	mov a, b
0414+  06D5 26 E8 03    	mov b, 1000
0415+  06D8 AE          	div a, b			; get 10000 coeff.
0416+  06D9 07 F7 06    	call print_number
0417+  06DC 11          	mov a, b
0418+  06DD 26 64 00    	mov b, 100
0419+  06E0 AE          	div a, b
0420+  06E1 07 F7 06    	call print_number
0421+  06E4 11          	mov a, b
0422+  06E5 26 0A 00    	mov b, 10
0423+  06E8 AE          	div a, b
0424+  06E9 07 F7 06    	call print_number
0425+  06EC 11          	mov a, b
0426+  06ED 6A 30       	add al, $30
0427+  06EF 23          	mov ah, al
0428+  06F0 19 00       	mov al, 0
0429+  06F2 05 03       	syscall sys_io	; print coeff
0430+  06F4 E5          	pop b
0431+  06F5 E4          	pop a
0432+  06F6 09          	ret
0433+  06F7             
0434+  06F7             
0435+  06F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  06F7             ; if A == 0, print space
0437+  06F7             ; else print A
0438+  06F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  06F7             print_number:
0440+  06F7 6A 30       	add al, $30
0441+  06F9 23          	mov ah, al
0442+  06FA 07 68 05    	call putchar
0443+  06FD 09          	ret
0444+  06FE             
0445+  06FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  06FE             ; PRINT 16BIT HEX INTEGER
0447+  06FE             ; integer value in reg B
0448+  06FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  06FE             print_u16x:
0450+  06FE D7          	push a
0451+  06FF D8          	push b
0452+  0700 DD          	push bl
0453+  0701 30          	mov bl, bh
0454+  0702 07 2F 05    	call itoa				; convert bh to char in A
0455+  0705 2F          	mov bl, al				; save al
0456+  0706 19 00       	mov al, 0
0457+  0708 05 03       	syscall sys_io				; display AH
0458+  070A 24          	mov ah, bl				; retrieve al
0459+  070B 19 00       	mov al, 0
0460+  070D 05 03       	syscall sys_io				; display AL
0461+  070F             
0462+  070F EA          	pop bl
0463+  0710 07 2F 05    	call itoa				; convert bh to char in A
0464+  0713 2F          	mov bl, al				; save al
0465+  0714 19 00       	mov al, 0
0466+  0716 05 03       	syscall sys_io				; display AH
0467+  0718 24          	mov ah, bl				; retrieve al
0468+  0719 19 00       	mov al, 0
0469+  071B 05 03       	syscall sys_io				; display AL
0470+  071D             
0471+  071D E5          	pop b
0472+  071E E4          	pop a
0473+  071F 09          	ret
0474+  0720             
0475+  0720             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0720             ; INPUT 16BIT HEX INTEGER
0477+  0720             ; read 16bit integer into A
0478+  0720             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0720             scan_u16x:
0480+  0720 F8 10 00    	enter 16
0481+  0723 D8          	push b
0482+  0724 DA          	push d
0483+  0725             
0484+  0725 FA F1 FF    	lea d, [bp + -15]
0485+  0728 07 6F 05    	call gets				; get number
0486+  072B             
0487+  072B 32          	mov bl, [d]
0488+  072C 37          	mov bh, bl
0489+  072D 33 01 00    	mov bl, [d + 1]
0490+  0730 07 1D 05    	call atoi				; convert to int in AL
0491+  0733 23          	mov ah, al				; move to AH
0492+  0734             
0493+  0734 33 02 00    	mov bl, [d + 2]
0494+  0737 37          	mov bh, bl
0495+  0738 33 03 00    	mov bl, [d + 3]
0496+  073B 07 1D 05    	call atoi				; convert to int in AL
0497+  073E             
0498+  073E E7          	pop d
0499+  073F E5          	pop b
0500+  0740 F9          	leave
0501+  0741 09          	ret
0502+  0742             
0503+  0742             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0742             ; PRINT 8bit HEX INTEGER
0505+  0742             ; integer value in reg bl
0506+  0742             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0742             print_u8x:
0508+  0742 D7          	push a
0509+  0743 DD          	push bl
0510+  0744             
0511+  0744 07 2F 05    	call itoa				; convert bl to char in A
0512+  0747 2F          	mov bl, al				; save al
0513+  0748 19 00       	mov al, 0
0514+  074A 05 03       	syscall sys_io				; display AH
0515+  074C 24          	mov ah, bl				; retrieve al
0516+  074D 19 00       	mov al, 0
0517+  074F 05 03       	syscall sys_io				; display AL
0518+  0751             
0519+  0751 EA          	pop bl
0520+  0752 E4          	pop a
0521+  0753 09          	ret
0522+  0754             
0523+  0754             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0754             ; print 8bit decimal unsigned number
0525+  0754             ; input number in AL
0526+  0754             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0754             print_u8d:
0528+  0754 D7          	push a
0529+  0755 D8          	push b
0530+  0756             
0531+  0756 22 00       	mov ah, 0
0532+  0758 26 64 00    	mov b, 100
0533+  075B AE          	div a, b
0534+  075C D8          	push b			; save remainder
0535+  075D B9 00       	cmp al, 0
0536+  075F C6 69 07    	je skip100
0537+  0762 6A 30       	add al, $30
0538+  0764 23          	mov ah, al
0539+  0765 19 00       	mov al, 0
0540+  0767 05 03       	syscall sys_io	; print coeff
0541+  0769             skip100:
0542+  0769 E4          	pop a
0543+  076A 22 00       	mov ah, 0
0544+  076C 26 0A 00    	mov b, 10
0545+  076F AE          	div a, b
0546+  0770 D8          	push b			; save remainder
0547+  0771 B9 00       	cmp al, 0
0548+  0773 C6 7D 07    	je skip10
0549+  0776 6A 30       	add al, $30
0550+  0778 23          	mov ah, al
0551+  0779 19 00       	mov al, 0
0552+  077B 05 03       	syscall sys_io	; print coeff
0553+  077D             skip10:
0554+  077D E4          	pop a
0555+  077E 1B          	mov al, bl
0556+  077F 6A 30       	add al, $30
0557+  0781 23          	mov ah, al
0558+  0782 19 00       	mov al, 0
0559+  0784 05 03       	syscall sys_io	; print coeff
0560+  0786 E5          	pop b
0561+  0787 E4          	pop a
0562+  0788 09          	ret
0563+  0789             
0564+  0789             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0789             ; INPUT 8BIT HEX INTEGER
0566+  0789             ; read 8bit integer into AL
0567+  0789             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0789             scan_u8x:
0569+  0789 F8 04 00    	enter 4
0570+  078C D8          	push b
0571+  078D DA          	push d
0572+  078E             
0573+  078E FA FD FF    	lea d, [bp + -3]
0574+  0791 07 6F 05    	call gets				; get number
0575+  0794             
0576+  0794 32          	mov bl, [d]
0577+  0795 37          	mov bh, bl
0578+  0796 33 01 00    	mov bl, [d + 1]
0579+  0799 07 1D 05    	call atoi				; convert to int in AL
0580+  079C             
0581+  079C E7          	pop d
0582+  079D E5          	pop b
0583+  079E F9          	leave
0584+  079F 09          	ret
0585+  07A0             
0586+  07A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  07A0             ; input decimal number
0588+  07A0             ; result in A
0589+  07A0             ; 655'\0'
0590+  07A0             ; low--------high
0591+  07A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  07A0             scan_u16d:
0593+  07A0 F8 08 00    	enter 8
0594+  07A3 E2          	push si
0595+  07A4 D8          	push b
0596+  07A5 D9          	push c
0597+  07A6 DA          	push d
0598+  07A7 FA F9 FF    	lea d, [bp +- 7]
0599+  07AA 07 6F 05    	call gets
0600+  07AD 07 9D 04    	call strlen			; get string length in C
0601+  07B0 7E          	dec c
0602+  07B1 FD 4E       	mov si, d
0603+  07B3 12          	mov a, c
0604+  07B4 FD 99       	shl a
0605+  07B6 3B 05 05    	mov d, table_power
0606+  07B9 59          	add d, a
0607+  07BA 38 00 00    	mov c, 0
0608+  07BD             mul_loop:
0609+  07BD F6          	lodsb			; load ASCII to al
0610+  07BE B9 00       	cmp al, 0
0611+  07C0 C6 D3 07    	je mul_exit
0612+  07C3 6F 30       	sub al, $30		; make into integer
0613+  07C5 22 00       	mov ah, 0
0614+  07C7 2A          	mov b, [d]
0615+  07C8 AC          	mul a, b			; result in B since it fits in 16bits
0616+  07C9 11          	mov a, b
0617+  07CA 28          	mov b, c
0618+  07CB 54          	add a, b
0619+  07CC 39          	mov c, a
0620+  07CD 63 02 00    	sub d, 2
0621+  07D0 0A BD 07    	jmp mul_loop
0622+  07D3             mul_exit:
0623+  07D3 12          	mov a, c
0624+  07D4 E7          	pop d
0625+  07D5 E6          	pop c
0626+  07D6 E5          	pop b
0627+  07D7 EF          	pop si
0628+  07D8 F9          	leave
0629+  07D9 09          	ret
0080   07DA             ; --- END INCLUDE BLOCK
0081   07DA             
0082   07DA             
0083   07DA             .end
tasm: Number of errors = 0
