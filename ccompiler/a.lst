0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405             _while1_cond:
0012   0405 26 01 00      mov b, 1
0013   0408 C0 00 00      cmp b, 0
0014   040B C6 66 04      je _while1_exit
0015   040E             _while1_block:
0016   040E 26 39 06      mov b, __string_0 ; "Number: "
0017   0411 FD AB         swp b
0018   0413 D8            push b
0019   0414 07 2E 06      call print
0020   0417 51 02 00      add sp, 2
0021   041A 07 1E 06      call scann
0022   041D D7            push a
0023   041E 11            mov a, b
0024   041F 45 FF FF      mov [bp + -1], a ; i
0025   0422 E4            pop a
0026   0423             _if2_cond:
0027   0423 2C FF FF      mov b, [bp + -1] ; i
0028   0426 D7            push a
0029   0427 11            mov a, b
0030   0428 26 00 00      mov b, 0
0031   042B B0            cmp a, b
0032   042C 0E            lodflgs
0033   042D 87 01         and al, %00000001 ; ==
0034   042F 22 00         mov ah, 0
0035   0431 27            mov b, a
0036   0432 E4            pop a
0037   0433 C0 00 00      cmp b, 0
0038   0436 C6 42 04      je _if2_else
0039   0439             _if2_true:
0040   0439 26 00 00      mov b, 0
0041   043C F9            leave
0042   043D 05 0B         syscall sys_terminate_proc
0043   043F 0A 57 04      jmp _if2_exit
0044   0442             _if2_else:
0045   0442 2C FF FF      mov b, [bp + -1] ; i
0046   0445 FD AB         swp b
0047   0447 D8            push b
0048   0448 07 51 05      call integer_square_root
0049   044B 51 02 00      add sp, 2
0050   044E FD AB         swp b
0051   0450 D8            push b
0052   0451 07 6C 04      call print_num
0053   0454 51 02 00      add sp, 2
0054   0457             _if2_exit:
0055   0457 26 42 06      mov b, __string_1 ; "\n"
0056   045A FD AB         swp b
0057   045C D8            push b
0058   045D 07 2E 06      call print
0059   0460 51 02 00      add sp, 2
0060   0463 0A 05 04      jmp _while1_cond
0061   0466             _while1_exit:
0062   0466 26 00 00      mov b, 0
0063   0469 F9            leave
0064   046A 05 0B         syscall sys_terminate_proc
0065   046C             
0066   046C             print_num:
0067   046C D2            push bp
0068   046D 9B            mov bp, sp
0069   046E 52 05 00      sub sp, 5 ; digits
0070   0471 52 02 00      sub sp, 2 ; i
0071   0474 26 00 00      mov b, 0
0072   0477 D7            push a
0073   0478 11            mov a, b
0074   0479 45 FA FF      mov [bp + -6], a ; i
0075   047C E4            pop a
0076   047D             _if3_cond:
0077   047D 2C 05 00      mov b, [bp + 5] ; num
0078   0480 D7            push a
0079   0481 11            mov a, b
0080   0482 26 00 00      mov b, 0
0081   0485 B0            cmp a, b
0082   0486 0E            lodflgs
0083   0487 87 01         and al, %00000001 ; ==
0084   0489 22 00         mov ah, 0
0085   048B 27            mov b, a
0086   048C E4            pop a
0087   048D C0 00 00      cmp b, 0
0088   0490 C6 A2 04      je _if3_exit
0089   0493             _if3_true:
0090   0493 26 30 00      mov b, '0'
0091   0496 DD            push bl
0092   0497 07 13 06      call _putchar
0093   049A 51 01 00      add sp, 1
0094   049D F9            leave
0095   049E 09            ret
0096   049F 0A A2 04      jmp _if3_exit
0097   04A2             _if3_exit:
0098   04A2             _while4_cond:
0099   04A2 2C 05 00      mov b, [bp + 5] ; num
0100   04A5 D7            push a
0101   04A6 11            mov a, b
0102   04A7 26 00 00      mov b, 0
0103   04AA B0            cmp a, b
0104   04AB 0E            lodflgs
0105   04AC 87 03         and al, %00000011
0106   04AE B9 00         cmp al, 0
0107   04B0 0E            lodflgs
0108   04B1 22 00         mov ah, 0
0109   04B3 27            mov b, a
0110   04B4 E4            pop a
0111   04B5 C0 00 00      cmp b, 0
0112   04B8 C6 09 05      je _while4_exit
0113   04BB             _while4_block:
0114   04BB FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0115   04BE 2D            mov b, d
0116   04BF D7            push a
0117   04C0 74            mov d, b
0118   04C1 DA            push d
0119   04C2 2C FA FF      mov b, [bp + -6] ; i
0120   04C5 E7            pop d
0121   04C6 10 01 00      mov a, 1
0122   04C9 AC            mul a, b
0123   04CA 5A            add d, b
0124   04CB E4            pop a
0125   04CC DA            push d
0126   04CD 26 30 00      mov b, '0'
0127   04D0 D7            push a
0128   04D1 11            mov a, b
0129   04D2 2C 05 00      mov b, [bp + 5] ; num
0130   04D5 D7            push a
0131   04D6 11            mov a, b
0132   04D7 26 0A 00      mov b, 10
0133   04DA AE            div a, b
0134   04DB E4            pop a
0135   04DC 54            add a, b
0136   04DD 27            mov b, a
0137   04DE E4            pop a
0138   04DF E7            pop d
0139   04E0 FD 3E         mov [d], bl
0140   04E2 2C 05 00      mov b, [bp + 5] ; num
0141   04E5 D7            push a
0142   04E6 11            mov a, b
0143   04E7 26 0A 00      mov b, 10
0144   04EA AE            div a, b
0145   04EB FD 78         mov g, a
0146   04ED 11            mov a, b
0147   04EE FD 27         mov b, g
0148   04F0 E4            pop a
0149   04F1 D7            push a
0150   04F2 11            mov a, b
0151   04F3 45 05 00      mov [bp + 5], a ; num
0152   04F6 E4            pop a
0153   04F7 2C FA FF      mov b, [bp + -6] ; i
0154   04FA D7            push a
0155   04FB 11            mov a, b
0156   04FC FD 77         inc b
0157   04FE D7            push a
0158   04FF 11            mov a, b
0159   0500 45 FA FF      mov [bp + -6], a ; i
0160   0503 E4            pop a
0161   0504 27            mov b, a
0162   0505 E4            pop a
0163   0506 0A A2 04      jmp _while4_cond
0164   0509             _while4_exit:
0165   0509             _while5_cond:
0166   0509 2C FA FF      mov b, [bp + -6] ; i
0167   050C D7            push a
0168   050D 11            mov a, b
0169   050E 26 00 00      mov b, 0
0170   0511 B0            cmp a, b
0171   0512 0E            lodflgs
0172   0513 87 03         and al, %00000011
0173   0515 B9 00         cmp al, 0
0174   0517 0E            lodflgs
0175   0518 22 00         mov ah, 0
0176   051A 27            mov b, a
0177   051B E4            pop a
0178   051C C0 00 00      cmp b, 0
0179   051F C6 4F 05      je _while5_exit
0180   0522             _while5_block:
0181   0522 2C FA FF      mov b, [bp + -6] ; i
0182   0525 D7            push a
0183   0526 11            mov a, b
0184   0527 FD 7D         dec b
0185   0529 D7            push a
0186   052A 11            mov a, b
0187   052B 45 FA FF      mov [bp + -6], a ; i
0188   052E E4            pop a
0189   052F 27            mov b, a
0190   0530 E4            pop a
0191   0531 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0192   0534 2D            mov b, d
0193   0535 D7            push a
0194   0536 74            mov d, b
0195   0537 DA            push d
0196   0538 2C FA FF      mov b, [bp + -6] ; i
0197   053B E7            pop d
0198   053C 10 01 00      mov a, 1
0199   053F AC            mul a, b
0200   0540 5A            add d, b
0201   0541 E4            pop a
0202   0542 32            mov bl, [d]
0203   0543 A7 00         mov bh, 0
0204   0545 DD            push bl
0205   0546 07 13 06      call _putchar
0206   0549 51 01 00      add sp, 1
0207   054C 0A 09 05      jmp _while5_cond
0208   054F             _while5_exit:
0209   054F F9            leave
0210   0550 09            ret
0211   0551             
0212   0551             integer_square_root:
0213   0551 D2            push bp
0214   0552 9B            mov bp, sp
0215   0553             _if6_cond:
0216   0553 2C 05 00      mov b, [bp + 5] ; n
0217   0556 D7            push a
0218   0557 11            mov a, b
0219   0558 26 01 00      mov b, 1
0220   055B B0            cmp a, b
0221   055C 0E            lodflgs
0222   055D 2F            mov bl, al
0223   055E FD 78         mov g, a
0224   0560 FD A2 03      shr al, 3
0225   0563 FD A4 02      shr bl, 2
0226   0566 FD 87 01      and bl, %00000001
0227   0569 90            xor al, bl
0228   056A FD 27         mov b, g
0229   056C FD 87 01      and bl, %00000001
0230   056F 8C            or al, bl ; <= (signed)
0231   0570 22 00         mov ah, 0
0232   0572 27            mov b, a
0233   0573 E4            pop a
0234   0574 C0 00 00      cmp b, 0
0235   0577 C6 82 05      je _if6_exit
0236   057A             _if6_true:
0237   057A 2C 05 00      mov b, [bp + 5] ; n
0238   057D F9            leave
0239   057E 09            ret
0240   057F 0A 82 05      jmp _if6_exit
0241   0582             _if6_exit:
0242   0582 52 02 00      sub sp, 2 ; x
0243   0585 52 02 00      sub sp, 2 ; y
0244   0588 2C 05 00      mov b, [bp + 5] ; n
0245   058B D7            push a
0246   058C 11            mov a, b
0247   058D 45 FF FF      mov [bp + -1], a ; x
0248   0590 E4            pop a
0249   0591 2C FF FF      mov b, [bp + -1] ; x
0250   0594 D7            push a
0251   0595 11            mov a, b
0252   0596 2C 05 00      mov b, [bp + 5] ; n
0253   0599 D7            push a
0254   059A 11            mov a, b
0255   059B 2C FF FF      mov b, [bp + -1] ; x
0256   059E AE            div a, b
0257   059F FD 78         mov g, a
0258   05A1 11            mov a, b
0259   05A2 FD 27         mov b, g
0260   05A4 E4            pop a
0261   05A5 54            add a, b
0262   05A6 27            mov b, a
0263   05A7 E4            pop a
0264   05A8 D7            push a
0265   05A9 11            mov a, b
0266   05AA 26 02 00      mov b, 2
0267   05AD AE            div a, b
0268   05AE FD 78         mov g, a
0269   05B0 11            mov a, b
0270   05B1 FD 27         mov b, g
0271   05B3 E4            pop a
0272   05B4 D7            push a
0273   05B5 11            mov a, b
0274   05B6 45 FD FF      mov [bp + -3], a ; y
0275   05B9 E4            pop a
0276   05BA             _while7_cond:
0277   05BA 2C FD FF      mov b, [bp + -3] ; y
0278   05BD D7            push a
0279   05BE 11            mov a, b
0280   05BF 2C FF FF      mov b, [bp + -1] ; x
0281   05C2 B0            cmp a, b
0282   05C3 0E            lodflgs
0283   05C4 2F            mov bl, al
0284   05C5 FD A2 03      shr al, 3
0285   05C8 FD A4 02      shr bl, 2
0286   05CB FD 87 01      and bl, %00000001
0287   05CE 90            xor al, bl ; < (signed)
0288   05CF 22 00         mov ah, 0
0289   05D1 27            mov b, a
0290   05D2 E4            pop a
0291   05D3 C0 00 00      cmp b, 0
0292   05D6 C6 0E 06      je _while7_exit
0293   05D9             _while7_block:
0294   05D9 2C FD FF      mov b, [bp + -3] ; y
0295   05DC D7            push a
0296   05DD 11            mov a, b
0297   05DE 45 FF FF      mov [bp + -1], a ; x
0298   05E1 E4            pop a
0299   05E2 2C FF FF      mov b, [bp + -1] ; x
0300   05E5 D7            push a
0301   05E6 11            mov a, b
0302   05E7 2C 05 00      mov b, [bp + 5] ; n
0303   05EA D7            push a
0304   05EB 11            mov a, b
0305   05EC 2C FF FF      mov b, [bp + -1] ; x
0306   05EF AE            div a, b
0307   05F0 FD 78         mov g, a
0308   05F2 11            mov a, b
0309   05F3 FD 27         mov b, g
0310   05F5 E4            pop a
0311   05F6 54            add a, b
0312   05F7 27            mov b, a
0313   05F8 E4            pop a
0314   05F9 D7            push a
0315   05FA 11            mov a, b
0316   05FB 26 02 00      mov b, 2
0317   05FE AE            div a, b
0318   05FF FD 78         mov g, a
0319   0601 11            mov a, b
0320   0602 FD 27         mov b, g
0321   0604 E4            pop a
0322   0605 D7            push a
0323   0606 11            mov a, b
0324   0607 45 FD FF      mov [bp + -3], a ; y
0325   060A E4            pop a
0326   060B 0A BA 05      jmp _while7_cond
0327   060E             _while7_exit:
0328   060E 2C FF FF      mov b, [bp + -1] ; x
0329   0611 F9            leave
0330   0612 09            ret
0331   0613             
0332   0613             _putchar:
0333   0613 D2            push bp
0334   0614 9B            mov bp, sp
0335   0615             
0336   0615             ; --- BEGIN INLINE ASM BLOCK
0337   0615 20 05 00      mov al, [bp + 5]
0338   0618 23            mov ah, al
0339   0619 07 56 07      call putchar
0340   061C             ; --- END INLINE ASM BLOCK
0341   061C             
0342   061C F9            leave
0343   061D 09            ret
0344   061E             
0345   061E             scann:
0346   061E D2            push bp
0347   061F 9B            mov bp, sp
0348   0620 52 02 00      sub sp, 2 ; m
0349   0623             
0350   0623             ; --- BEGIN INLINE ASM BLOCK
0351   0623 07 8E 09      call scan_u16d
0352   0626 45 FF FF      mov [bp + -1], a
0353   0629             ; --- END INLINE ASM BLOCK
0354   0629             
0355   0629 2C FF FF      mov b, [bp + -1] ; m
0356   062C F9            leave
0357   062D 09            ret
0358   062E             
0359   062E             print:
0360   062E D2            push bp
0361   062F 9B            mov bp, sp
0362   0630             
0363   0630             ; --- BEGIN INLINE ASM BLOCK
0364   0630 17 05 00      mov a, [bp + 5]
0365   0633 3C            mov d, a
0366   0634 07 90 08      call puts
0367   0637             ; --- END INLINE ASM BLOCK
0368   0637             
0369   0637 F9            leave
0370   0638 09            ret
0371   0639             ; --- END TEXT BLOCK
0372   0639             
0373   0639             ; --- BEGIN DATA BLOCK
0374   0639 4E 75 6D 62 __string_0: .db "Number: ", 0
0374   063D 65 72 3A 20 
0374   0641 00 
0375   0642 0A 00       __string_1: .db "\n", 0
0376   0644             ; --- END DATA BLOCK
0377   0644             
0378   0644             ; --- BEGIN INCLUDE BLOCK
0379   0644             .include "lib/stdio.asm"
0001+  0644             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0644             ; stdio.s
0003+  0644             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0644             .include "lib/string.asm"
0001++ 0644             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0644             ; string.s
0003++ 0644             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0644             
0005++ 0644             
0006++ 0644             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0644             ; strrev
0008++ 0644             ; reverse a string
0009++ 0644             ; D = string address
0010++ 0644             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0644             ; 01234
0012++ 0644             strrev:
0013++ 0644 4B          	pusha
0014++ 0645 07 8B 06    	call strlen	; length in C
0015++ 0648 12          	mov a, c
0016++ 0649 AF 01 00    	cmp a, 1
0017++ 064C D0 66 06    	jleu strrev_end	; check string length. string len must be > 1
0018++ 064F 7D          	dec a
0019++ 0650 FD 4E       	mov si, d	; beginning of string
0020++ 0652 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0654 59          	add d, a	; end of string
0022++ 0655 12          	mov a, c
0023++ 0656 FD 9B       	shr a		; divide by 2
0024++ 0658 39          	mov c, a	; C now counts the steps
0025++ 0659             strrev_L0:
0026++ 0659 32          	mov bl, [d]	; save load right-side char into BL
0027++ 065A F6          	lodsb		; load left-side char into AL; increase SI
0028++ 065B 3E          	mov [d], al	; store left char into right side
0029++ 065C 1B          	mov al, bl
0030++ 065D F7          	stosb		; store right-side char into left-side; increase DI
0031++ 065E 7E          	dec c
0032++ 065F 7F          	dec d
0033++ 0660 C2 00 00    	cmp c, 0
0034++ 0663 C7 59 06    	jne strrev_L0
0035++ 0666             strrev_end:
0036++ 0666 4C          	popa
0037++ 0667 09          	ret
0038++ 0668             	
0039++ 0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0668             ; strchr
0041++ 0668             ; search string in D for char in AL
0042++ 0668             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0668             strchr:
0044++ 0668             strchr_L0:
0045++ 0668 32          	mov bl, [d]
0046++ 0669 C1 00       	cmp bl, 0
0047++ 066B C6 76 06    	je strchr_end
0048++ 066E BA          	cmp al, bl
0049++ 066F C6 76 06    	je strchr_end
0050++ 0672 79          	inc d
0051++ 0673 0A 68 06    	jmp strchr_L0
0052++ 0676             strchr_end:
0053++ 0676 1B          	mov al, bl
0054++ 0677 09          	ret
0055++ 0678             
0056++ 0678             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0678             ; strstr
0058++ 0678             ; find sub-string
0059++ 0678             ; str1 in SI
0060++ 0678             ; str2 in DI
0061++ 0678             ; SI points to end of source string
0062++ 0678             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0678             strstr:
0064++ 0678 DB          	push al
0065++ 0679 DA          	push d
0066++ 067A E3          	push di
0067++ 067B             strstr_loop:
0068++ 067B F3          	cmpsb					; compare a byte of the strings
0069++ 067C C7 87 06    	jne strstr_ret
0070++ 067F FC 00 00    	lea d, [di + 0]
0071++ 0682 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0684 C7 7B 06    	jne strstr_loop				; equal chars but not at end
0073++ 0687             strstr_ret:
0074++ 0687 F0          	pop di
0075++ 0688 E7          	pop d
0076++ 0689 E8          	pop al
0077++ 068A 09          	ret
0078++ 068B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 068B             ; length of null terminated string
0080++ 068B             ; result in C
0081++ 068B             ; pointer in D
0082++ 068B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 068B             strlen:
0084++ 068B DA          	push d
0085++ 068C 38 00 00    	mov c, 0
0086++ 068F             strlen_L1:
0087++ 068F BD 00       	cmp byte [d], 0
0088++ 0691 C6 99 06    	je strlen_ret
0089++ 0694 79          	inc d
0090++ 0695 78          	inc c
0091++ 0696 0A 8F 06    	jmp strlen_L1
0092++ 0699             strlen_ret:
0093++ 0699 E7          	pop d
0094++ 069A 09          	ret
0095++ 069B             
0096++ 069B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 069B             ; STRCMP
0098++ 069B             ; compare two strings
0099++ 069B             ; str1 in SI
0100++ 069B             ; str2 in DI
0101++ 069B             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 069B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 069B             strcmp:
0104++ 069B DB          	push al
0105++ 069C DA          	push d
0106++ 069D E3          	push di
0107++ 069E E2          	push si
0108++ 069F             strcmp_loop:
0109++ 069F F3          	cmpsb					; compare a byte of the strings
0110++ 06A0 C7 AB 06    	jne strcmp_ret
0111++ 06A3 FB FF FF    	lea d, [si +- 1]
0112++ 06A6 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 06A8 C7 9F 06    	jne strcmp_loop				; equal chars but not at end
0114++ 06AB             strcmp_ret:
0115++ 06AB EF          	pop si
0116++ 06AC F0          	pop di
0117++ 06AD E7          	pop d
0118++ 06AE E8          	pop al
0119++ 06AF 09          	ret
0120++ 06B0             
0121++ 06B0             
0122++ 06B0             ; STRCPY
0123++ 06B0             ; copy null terminated string from SI to DI
0124++ 06B0             ; source in SI
0125++ 06B0             ; destination in DI
0126++ 06B0             strcpy:
0127++ 06B0 E2          	push si
0128++ 06B1 E3          	push di
0129++ 06B2 DB          	push al
0130++ 06B3             strcpy_L1:
0131++ 06B3 F6          	lodsb
0132++ 06B4 F7          	stosb
0133++ 06B5 B9 00       	cmp al, 0
0134++ 06B7 C7 B3 06    	jne strcpy_L1
0135++ 06BA             strcpy_end:
0136++ 06BA E8          	pop al
0137++ 06BB F0          	pop di
0138++ 06BC EF          	pop si
0139++ 06BD 09          	ret
0140++ 06BE             
0141++ 06BE             ; STRCAT
0142++ 06BE             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 06BE             ; source in SI
0144++ 06BE             ; destination in DI
0145++ 06BE             strcat:
0146++ 06BE E2          	push si
0147++ 06BF E3          	push di
0148++ 06C0 D7          	push a
0149++ 06C1 DA          	push d
0150++ 06C2 50          	mov a, di
0151++ 06C3 3C          	mov d, a
0152++ 06C4             strcat_goto_end_L1:
0153++ 06C4 BD 00       	cmp byte[d], 0
0154++ 06C6 C6 CD 06    	je strcat_start
0155++ 06C9 79          	inc d
0156++ 06CA 0A C4 06    	jmp strcat_goto_end_L1
0157++ 06CD             strcat_start:
0158++ 06CD FD 50       	mov di, d
0159++ 06CF             strcat_L1:
0160++ 06CF F6          	lodsb
0161++ 06D0 F7          	stosb
0162++ 06D1 B9 00       	cmp al, 0
0163++ 06D3 C7 CF 06    	jne strcat_L1
0164++ 06D6             strcat_end:
0165++ 06D6 E7          	pop d
0166++ 06D7 E4          	pop a
0167++ 06D8 F0          	pop di
0168++ 06D9 EF          	pop si
0169++ 06DA 09          	ret
0005+  06DB             
0006+  06DB 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  06DF 34 35 36 37 
0006+  06E3 38 39 41 42 
0006+  06E7 43 44 45 46 
0007+  06EB 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  06EF 1B 5B 48 00 
0008+  06F3             
0009+  06F3 01 00       table_power:.dw 1
0010+  06F5 0A 00       			.dw 10
0011+  06F7 64 00       			.dw 100
0012+  06F9 E8 03       			.dw 1000
0013+  06FB 10 27       			.dw 10000
0014+  06FD             
0015+  06FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  06FD             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  06FD             ; ASCII in BL
0018+  06FD             ; result in AL
0019+  06FD             ; ascii for F = 0100 0110
0020+  06FD             ; ascii for 9 = 0011 1001
0021+  06FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  06FD             hex_ascii_encode:
0023+  06FD 1B          	mov al, bl
0024+  06FE 93 40       	test al, $40				; test if letter or number
0025+  0700 C7 06 07    	jnz hex_letter
0026+  0703 87 0F       	and al, $0F				; get number
0027+  0705 09          	ret
0028+  0706             hex_letter:
0029+  0706 87 0F       	and al, $0F				; get letter
0030+  0708 6A 09       	add al, 9
0031+  070A 09          	ret
0032+  070B             
0033+  070B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  070B             ; ATOI
0035+  070B             ; 2 letter hex string in B
0036+  070B             ; 8bit integer returned in AL
0037+  070B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  070B             atoi:
0039+  070B D8          	push b
0040+  070C 07 FD 06    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  070F 30          	mov bl, bh
0042+  0710 DB          	push al					; save a
0043+  0711 07 FD 06    	call hex_ascii_encode
0044+  0714 EA          	pop bl	
0045+  0715 FD 9E 04    	shl al, 4
0046+  0718 8C          	or al, bl
0047+  0719 E5          	pop b
0048+  071A 09          	ret	
0049+  071B             
0050+  071B             
0051+  071B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  071B             ; printf
0053+  071B             ; no need for explanations!
0054+  071B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  071B             printf:
0056+  071B 09          	ret
0057+  071C             
0058+  071C             
0059+  071C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  071C             ; scanf
0061+  071C             ; no need for explanations!
0062+  071C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  071C             scanf:
0064+  071C 09          	ret
0065+  071D             
0066+  071D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  071D             ; ITOA
0068+  071D             ; 8bit value in BL
0069+  071D             ; 2 byte ASCII result in A
0070+  071D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  071D             itoa:
0072+  071D DA          	push d
0073+  071E D8          	push b
0074+  071F A7 00       	mov bh, 0
0075+  0721 FD A4 04    	shr bl, 4	
0076+  0724 74          	mov d, b
0077+  0725 1F DB 06    	mov al, [d + s_hex_digits]
0078+  0728 23          	mov ah, al
0079+  0729             	
0080+  0729 E5          	pop b
0081+  072A D8          	push b
0082+  072B A7 00       	mov bh, 0
0083+  072D FD 87 0F    	and bl, $0F
0084+  0730 74          	mov d, b
0085+  0731 1F DB 06    	mov al, [d + s_hex_digits]
0086+  0734 E5          	pop b
0087+  0735 E7          	pop d
0088+  0736 09          	ret
0089+  0737             
0090+  0737             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0737             ; HEX STRING TO BINARY
0092+  0737             ; di = destination address
0093+  0737             ; si = source
0094+  0737             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0737             hex_to_int:
0096+  0737             hex_to_int_L1:
0097+  0737 F6          	lodsb					; load from [SI] to AL
0098+  0738 B9 00       	cmp al, 0				; check if ASCII 0
0099+  073A C6 47 07    	jz hex_to_int_ret
0100+  073D 36          	mov bh, al
0101+  073E F6          	lodsb
0102+  073F 2F          	mov bl, al
0103+  0740 07 0B 07    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0743 F7          	stosb					; store AL to [DI]
0105+  0744 0A 37 07    	jmp hex_to_int_L1
0106+  0747             hex_to_int_ret:
0107+  0747 09          	ret		
0108+  0748             
0109+  0748             
0110+  0748             
0111+  0748             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0748             ; GETCHAR
0113+  0748             ; char in ah
0114+  0748             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0748             getchar:
0116+  0748 DB          	push al
0117+  0749             getchar_retry:
0118+  0749 FD 0C       	sti
0119+  074B 19 01       	mov al, 1
0120+  074D 05 03       	syscall sys_io			; receive in AH
0121+  074F B9 00       	cmp al, 0			; check if any char was receive
0122+  0751 C6 49 07    	je getchar_retry
0123+  0754 E8          	pop al
0124+  0755 09          	ret
0125+  0756             
0126+  0756             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0756             ; PUTCHAR
0128+  0756             ; char in ah
0129+  0756             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0756             putchar:
0131+  0756 D7          	push a
0132+  0757 19 00       	mov al, 0
0133+  0759 05 03       	syscall sys_io			; char in AH
0134+  075B E4          	pop a
0135+  075C 09          	ret
0136+  075D             
0137+  075D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  075D             ;; INPUT A STRING
0139+  075D             ;; terminates with null
0140+  075D             ;; pointer in D
0141+  075D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  075D             gets:
0143+  075D D7          	push a
0144+  075E DA          	push d
0145+  075F             gets_loop:
0146+  075F FD 0C       	sti
0147+  0761 19 01       	mov al, 1
0148+  0763 05 03       	syscall sys_io			; receive in AH
0149+  0765 B9 00       	cmp al, 0				; check error code (AL)
0150+  0767 C6 5F 07    	je gets_loop			; if no char received, retry
0151+  076A             
0152+  076A 76 1B       	cmp ah, 27
0153+  076C C6 8D 07    	je gets_telnet_escape
0154+  076F 76 0A       	cmp ah, $0A				; LF
0155+  0771 C6 E6 07    	je gets_end
0156+  0774 76 0D       	cmp ah, $0D				; CR
0157+  0776 C6 E6 07    	je gets_end
0158+  0779 76 5C       	cmp ah, $5C				; '\\'
0159+  077B C6 BD 07    	je gets_escape
0160+  077E             	
0161+  077E 76 08       	cmp ah, $08			; check for backspace
0162+  0780 C6 89 07    	je gets_backspace
0163+  0783             
0164+  0783 1A          	mov al, ah
0165+  0784 3E          	mov [d], al
0166+  0785 79          	inc d
0167+  0786 0A 5F 07    	jmp gets_loop
0168+  0789             gets_backspace:
0169+  0789 7F          	dec d
0170+  078A 0A 5F 07    	jmp gets_loop
0171+  078D             gets_telnet_escape:
0172+  078D FD 0C       	sti
0173+  078F 19 01       	mov al, 1
0174+  0791 05 03       	syscall sys_io				; receive in AH without echo
0175+  0793 B9 00       	cmp al, 0					; check error code (AL)
0176+  0795 C6 8D 07    	je gets_telnet_escape		; if no char received, retry
0177+  0798 76 5B       	cmp ah, '['
0178+  079A C7 5F 07    	jne gets_loop
0179+  079D             gets_telnet_escape_phase2:
0180+  079D FD 0C       	sti
0181+  079F 19 01       	mov al, 1
0182+  07A1 05 03       	syscall sys_io					; receive in AH without echo
0183+  07A3 B9 00       	cmp al, 0						; check error code (AL)
0184+  07A5 C6 9D 07    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  07A8 76 44       	cmp ah, 'D'
0186+  07AA C6 B5 07    	je gets_left_arrow
0187+  07AD 76 43       	cmp ah, 'C'
0188+  07AF C6 B9 07    	je gets_right_arrow
0189+  07B2 0A 5F 07    	jmp gets_loop
0190+  07B5             gets_left_arrow:
0191+  07B5 7F          	dec d
0192+  07B6 0A 5F 07    	jmp gets_loop
0193+  07B9             gets_right_arrow:
0194+  07B9 79          	inc d
0195+  07BA 0A 5F 07    	jmp gets_loop
0196+  07BD             gets_escape:
0197+  07BD FD 0C       	sti
0198+  07BF 19 01       	mov al, 1
0199+  07C1 05 03       	syscall sys_io			; receive in AH
0200+  07C3 B9 00       	cmp al, 0				; check error code (AL)
0201+  07C5 C6 BD 07    	je gets_escape			; if no char received, retry
0202+  07C8 76 6E       	cmp ah, 'n'
0203+  07CA C6 D8 07    	je gets_LF
0204+  07CD 76 72       	cmp ah, 'r'
0205+  07CF C6 DF 07    	je gets_CR
0206+  07D2 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  07D3 3E          	mov [d], al
0208+  07D4 79          	inc d
0209+  07D5 0A 5F 07    	jmp gets_loop
0210+  07D8             gets_LF:
0211+  07D8 19 0A       	mov al, $0A
0212+  07DA 3E          	mov [d], al
0213+  07DB 79          	inc d
0214+  07DC 0A 5F 07    	jmp gets_loop
0215+  07DF             gets_CR:
0216+  07DF 19 0D       	mov al, $0D
0217+  07E1 3E          	mov [d], al
0218+  07E2 79          	inc d
0219+  07E3 0A 5F 07    	jmp gets_loop
0220+  07E6             gets_end:
0221+  07E6 19 00       	mov al, 0
0222+  07E8 3E          	mov [d], al				; terminate string
0223+  07E9 E7          	pop d
0224+  07EA E4          	pop a
0225+  07EB 09          	ret
0226+  07EC             
0227+  07EC             
0228+  07EC             
0229+  07EC             
0230+  07EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  07EC             ;; INPUT TEXT
0232+  07EC             ;; terminated with CTRL+D
0233+  07EC             ;; pointer in D
0234+  07EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  07EC             gettxt:
0236+  07EC D7          	push a
0237+  07ED DA          	push d
0238+  07EE             gettxt_loop:
0239+  07EE 19 01       	mov al, 1
0240+  07F0 05 03       	syscall sys_io			; receive in AH
0241+  07F2 B9 00       	cmp al, 0				; check error code (AL)
0242+  07F4 C6 EE 07    	je gettxt_loop		; if no char received, retry
0243+  07F7 76 04       	cmp ah, 4			; EOT
0244+  07F9 C6 37 08    	je gettxt_end
0245+  07FC 76 08       	cmp ah, $08			; check for backspace
0246+  07FE C6 33 08    	je gettxt_backspace
0247+  0801 76 5C       	cmp ah, $5C				; '\\'
0248+  0803 C6 0C 08    	je gettxt_escape
0249+  0806 1A          	mov al, ah
0250+  0807 3E          	mov [d], al
0251+  0808 79          	inc d
0252+  0809 0A EE 07    	jmp gettxt_loop
0253+  080C             gettxt_escape:
0254+  080C 19 01       	mov al, 1
0255+  080E 05 03       	syscall sys_io			; receive in AH
0256+  0810 B9 00       	cmp al, 0				; check error code (AL)
0257+  0812 C6 0C 08    	je gettxt_escape		; if no char received, retry
0258+  0815 76 6E       	cmp ah, 'n'
0259+  0817 C6 25 08    	je gettxt_LF
0260+  081A 76 72       	cmp ah, 'r'
0261+  081C C6 2C 08    	je gettxt_CR
0262+  081F 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0820 3E          	mov [d], al
0264+  0821 79          	inc d
0265+  0822 0A EE 07    	jmp gettxt_loop
0266+  0825             gettxt_LF:
0267+  0825 19 0A       	mov al, $0A
0268+  0827 3E          	mov [d], al
0269+  0828 79          	inc d
0270+  0829 0A EE 07    	jmp gettxt_loop
0271+  082C             gettxt_CR:
0272+  082C 19 0D       	mov al, $0D
0273+  082E 3E          	mov [d], al
0274+  082F 79          	inc d
0275+  0830 0A EE 07    	jmp gettxt_loop
0276+  0833             gettxt_backspace:
0277+  0833 7F          	dec d
0278+  0834 0A EE 07    	jmp gettxt_loop
0279+  0837             gettxt_end:
0280+  0837 19 00       	mov al, 0
0281+  0839 3E          	mov [d], al				; terminate string
0282+  083A E7          	pop d
0283+  083B E4          	pop a
0284+  083C 09          	ret
0285+  083D             
0286+  083D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  083D             ; PRINT NEW LINE
0288+  083D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  083D             printnl:
0290+  083D D7          	push a
0291+  083E 10 00 0A    	mov a, $0A00
0292+  0841 05 03       	syscall sys_io
0293+  0843 10 00 0D    	mov a, $0D00
0294+  0846 05 03       	syscall sys_io
0295+  0848 E4          	pop a
0296+  0849 09          	ret
0297+  084A             
0298+  084A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  084A             ; strtoint
0300+  084A             ; 4 digit hex string number in d
0301+  084A             ; integer returned in A
0302+  084A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  084A             strtointx:
0304+  084A D8          	push b
0305+  084B 32          	mov bl, [d]
0306+  084C 37          	mov bh, bl
0307+  084D 33 01 00    	mov bl, [d + 1]
0308+  0850 07 0B 07    	call atoi				; convert to int in AL
0309+  0853 23          	mov ah, al				; move to AH
0310+  0854 33 02 00    	mov bl, [d + 2]
0311+  0857 37          	mov bh, bl
0312+  0858 33 03 00    	mov bl, [d + 3]
0313+  085B 07 0B 07    	call atoi				; convert to int in AL
0314+  085E E5          	pop b
0315+  085F 09          	ret
0316+  0860             
0317+  0860             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0860             ; strtoint
0319+  0860             ; 5 digit base10 string number in d
0320+  0860             ; integer returned in A
0321+  0860             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0860             strtoint:
0323+  0860 E2          	push si
0324+  0861 D8          	push b
0325+  0862 D9          	push c
0326+  0863 DA          	push d
0327+  0864 07 8B 06    	call strlen			; get string length in C
0328+  0867 7E          	dec c
0329+  0868 FD 4E       	mov si, d
0330+  086A 12          	mov a, c
0331+  086B FD 99       	shl a
0332+  086D 3B F3 06    	mov d, table_power
0333+  0870 59          	add d, a
0334+  0871 38 00 00    	mov c, 0
0335+  0874             strtoint_L0:
0336+  0874 F6          	lodsb			; load ASCII to al
0337+  0875 B9 00       	cmp al, 0
0338+  0877 C6 8A 08    	je strtoint_end
0339+  087A 6F 30       	sub al, $30		; make into integer
0340+  087C 22 00       	mov ah, 0
0341+  087E 2A          	mov b, [d]
0342+  087F AC          	mul a, b			; result in B since it fits in 16bits
0343+  0880 11          	mov a, b
0344+  0881 28          	mov b, c
0345+  0882 54          	add a, b
0346+  0883 39          	mov c, a
0347+  0884 63 02 00    	sub d, 2
0348+  0887 0A 74 08    	jmp strtoint_L0
0349+  088A             strtoint_end:
0350+  088A 12          	mov a, c
0351+  088B E7          	pop d
0352+  088C E6          	pop c
0353+  088D E5          	pop b
0354+  088E EF          	pop si
0355+  088F 09          	ret
0356+  0890             
0357+  0890             
0358+  0890             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0890             ; PRINT NULL TERMINATED STRING
0360+  0890             ; pointer in D
0361+  0890             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0890             puts:
0363+  0890 D7          	push a
0364+  0891 DA          	push d
0365+  0892             puts_L1:
0366+  0892 1E          	mov al, [d]
0367+  0893 B9 00       	cmp al, 0
0368+  0895 C6 A1 08    	jz puts_END
0369+  0898 23          	mov ah, al
0370+  0899 19 00       	mov al, 0
0371+  089B 05 03       	syscall sys_io
0372+  089D 79          	inc d
0373+  089E 0A 92 08    	jmp puts_L1
0374+  08A1             puts_END:
0375+  08A1 E7          	pop d
0376+  08A2 E4          	pop a
0377+  08A3 09          	ret
0378+  08A4             
0379+  08A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  08A4             ; PRINT N SIZE STRING
0381+  08A4             ; pointer in D
0382+  08A4             ; size in C
0383+  08A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  08A4             putsn:
0385+  08A4 DB          	push al
0386+  08A5 DA          	push d
0387+  08A6 D9          	push c
0388+  08A7             putsn_L0:
0389+  08A7 1E          	mov al, [d]
0390+  08A8 23          	mov ah, al
0391+  08A9 19 00       	mov al, 0
0392+  08AB 05 03       	syscall sys_io
0393+  08AD 79          	inc d
0394+  08AE 7E          	dec c	
0395+  08AF C2 00 00    	cmp c, 0
0396+  08B2 C7 A7 08    	jne putsn_L0
0397+  08B5             putsn_end:
0398+  08B5 E6          	pop c
0399+  08B6 E7          	pop d
0400+  08B7 E8          	pop al
0401+  08B8 09          	ret
0402+  08B9             
0403+  08B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  08B9             ; print 16bit decimal number
0405+  08B9             ; input number in A
0406+  08B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  08B9             print_u16d:
0408+  08B9 D7          	push a
0409+  08BA D8          	push b
0410+  08BB 26 10 27    	mov b, 10000
0411+  08BE AE          	div a, b			; get 10000 coeff.
0412+  08BF 07 E5 08    	call print_number
0413+  08C2 11          	mov a, b
0414+  08C3 26 E8 03    	mov b, 1000
0415+  08C6 AE          	div a, b			; get 10000 coeff.
0416+  08C7 07 E5 08    	call print_number
0417+  08CA 11          	mov a, b
0418+  08CB 26 64 00    	mov b, 100
0419+  08CE AE          	div a, b
0420+  08CF 07 E5 08    	call print_number
0421+  08D2 11          	mov a, b
0422+  08D3 26 0A 00    	mov b, 10
0423+  08D6 AE          	div a, b
0424+  08D7 07 E5 08    	call print_number
0425+  08DA 11          	mov a, b
0426+  08DB 6A 30       	add al, $30
0427+  08DD 23          	mov ah, al
0428+  08DE 19 00       	mov al, 0
0429+  08E0 05 03       	syscall sys_io	; print coeff
0430+  08E2 E5          	pop b
0431+  08E3 E4          	pop a
0432+  08E4 09          	ret
0433+  08E5             
0434+  08E5             
0435+  08E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  08E5             ; if A == 0, print space
0437+  08E5             ; else print A
0438+  08E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  08E5             print_number:
0440+  08E5 6A 30       	add al, $30
0441+  08E7 23          	mov ah, al
0442+  08E8 07 56 07    	call putchar
0443+  08EB 09          	ret
0444+  08EC             
0445+  08EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  08EC             ; PRINT 16BIT HEX INTEGER
0447+  08EC             ; integer value in reg B
0448+  08EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  08EC             print_u16x:
0450+  08EC D7          	push a
0451+  08ED D8          	push b
0452+  08EE DD          	push bl
0453+  08EF 30          	mov bl, bh
0454+  08F0 07 1D 07    	call itoa				; convert bh to char in A
0455+  08F3 2F          	mov bl, al				; save al
0456+  08F4 19 00       	mov al, 0
0457+  08F6 05 03       	syscall sys_io				; display AH
0458+  08F8 24          	mov ah, bl				; retrieve al
0459+  08F9 19 00       	mov al, 0
0460+  08FB 05 03       	syscall sys_io				; display AL
0461+  08FD             
0462+  08FD EA          	pop bl
0463+  08FE 07 1D 07    	call itoa				; convert bh to char in A
0464+  0901 2F          	mov bl, al				; save al
0465+  0902 19 00       	mov al, 0
0466+  0904 05 03       	syscall sys_io				; display AH
0467+  0906 24          	mov ah, bl				; retrieve al
0468+  0907 19 00       	mov al, 0
0469+  0909 05 03       	syscall sys_io				; display AL
0470+  090B             
0471+  090B E5          	pop b
0472+  090C E4          	pop a
0473+  090D 09          	ret
0474+  090E             
0475+  090E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  090E             ; INPUT 16BIT HEX INTEGER
0477+  090E             ; read 16bit integer into A
0478+  090E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  090E             scan_u16x:
0480+  090E F8 10 00    	enter 16
0481+  0911 D8          	push b
0482+  0912 DA          	push d
0483+  0913             
0484+  0913 FA F1 FF    	lea d, [bp + -15]
0485+  0916 07 5D 07    	call gets				; get number
0486+  0919             
0487+  0919 32          	mov bl, [d]
0488+  091A 37          	mov bh, bl
0489+  091B 33 01 00    	mov bl, [d + 1]
0490+  091E 07 0B 07    	call atoi				; convert to int in AL
0491+  0921 23          	mov ah, al				; move to AH
0492+  0922             
0493+  0922 33 02 00    	mov bl, [d + 2]
0494+  0925 37          	mov bh, bl
0495+  0926 33 03 00    	mov bl, [d + 3]
0496+  0929 07 0B 07    	call atoi				; convert to int in AL
0497+  092C             
0498+  092C E7          	pop d
0499+  092D E5          	pop b
0500+  092E F9          	leave
0501+  092F 09          	ret
0502+  0930             
0503+  0930             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0930             ; PRINT 8bit HEX INTEGER
0505+  0930             ; integer value in reg bl
0506+  0930             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0930             print_u8x:
0508+  0930 D7          	push a
0509+  0931 DD          	push bl
0510+  0932             
0511+  0932 07 1D 07    	call itoa				; convert bl to char in A
0512+  0935 2F          	mov bl, al				; save al
0513+  0936 19 00       	mov al, 0
0514+  0938 05 03       	syscall sys_io				; display AH
0515+  093A 24          	mov ah, bl				; retrieve al
0516+  093B 19 00       	mov al, 0
0517+  093D 05 03       	syscall sys_io				; display AL
0518+  093F             
0519+  093F EA          	pop bl
0520+  0940 E4          	pop a
0521+  0941 09          	ret
0522+  0942             
0523+  0942             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0942             ; print 8bit decimal unsigned number
0525+  0942             ; input number in AL
0526+  0942             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0942             print_u8d:
0528+  0942 D7          	push a
0529+  0943 D8          	push b
0530+  0944             
0531+  0944 22 00       	mov ah, 0
0532+  0946 26 64 00    	mov b, 100
0533+  0949 AE          	div a, b
0534+  094A D8          	push b			; save remainder
0535+  094B B9 00       	cmp al, 0
0536+  094D C6 57 09    	je skip100
0537+  0950 6A 30       	add al, $30
0538+  0952 23          	mov ah, al
0539+  0953 19 00       	mov al, 0
0540+  0955 05 03       	syscall sys_io	; print coeff
0541+  0957             skip100:
0542+  0957 E4          	pop a
0543+  0958 22 00       	mov ah, 0
0544+  095A 26 0A 00    	mov b, 10
0545+  095D AE          	div a, b
0546+  095E D8          	push b			; save remainder
0547+  095F B9 00       	cmp al, 0
0548+  0961 C6 6B 09    	je skip10
0549+  0964 6A 30       	add al, $30
0550+  0966 23          	mov ah, al
0551+  0967 19 00       	mov al, 0
0552+  0969 05 03       	syscall sys_io	; print coeff
0553+  096B             skip10:
0554+  096B E4          	pop a
0555+  096C 1B          	mov al, bl
0556+  096D 6A 30       	add al, $30
0557+  096F 23          	mov ah, al
0558+  0970 19 00       	mov al, 0
0559+  0972 05 03       	syscall sys_io	; print coeff
0560+  0974 E5          	pop b
0561+  0975 E4          	pop a
0562+  0976 09          	ret
0563+  0977             
0564+  0977             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0977             ; INPUT 8BIT HEX INTEGER
0566+  0977             ; read 8bit integer into AL
0567+  0977             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0977             scan_u8x:
0569+  0977 F8 04 00    	enter 4
0570+  097A D8          	push b
0571+  097B DA          	push d
0572+  097C             
0573+  097C FA FD FF    	lea d, [bp + -3]
0574+  097F 07 5D 07    	call gets				; get number
0575+  0982             
0576+  0982 32          	mov bl, [d]
0577+  0983 37          	mov bh, bl
0578+  0984 33 01 00    	mov bl, [d + 1]
0579+  0987 07 0B 07    	call atoi				; convert to int in AL
0580+  098A             
0581+  098A E7          	pop d
0582+  098B E5          	pop b
0583+  098C F9          	leave
0584+  098D 09          	ret
0585+  098E             
0586+  098E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  098E             ; input decimal number
0588+  098E             ; result in A
0589+  098E             ; 655'\0'
0590+  098E             ; low--------high
0591+  098E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  098E             scan_u16d:
0593+  098E F8 08 00    	enter 8
0594+  0991 E2          	push si
0595+  0992 D8          	push b
0596+  0993 D9          	push c
0597+  0994 DA          	push d
0598+  0995 FA F9 FF    	lea d, [bp +- 7]
0599+  0998 07 5D 07    	call gets
0600+  099B 07 8B 06    	call strlen			; get string length in C
0601+  099E 7E          	dec c
0602+  099F FD 4E       	mov si, d
0603+  09A1 12          	mov a, c
0604+  09A2 FD 99       	shl a
0605+  09A4 3B F3 06    	mov d, table_power
0606+  09A7 59          	add d, a
0607+  09A8 38 00 00    	mov c, 0
0608+  09AB             mul_loop:
0609+  09AB F6          	lodsb			; load ASCII to al
0610+  09AC B9 00       	cmp al, 0
0611+  09AE C6 C1 09    	je mul_exit
0612+  09B1 6F 30       	sub al, $30		; make into integer
0613+  09B3 22 00       	mov ah, 0
0614+  09B5 2A          	mov b, [d]
0615+  09B6 AC          	mul a, b			; result in B since it fits in 16bits
0616+  09B7 11          	mov a, b
0617+  09B8 28          	mov b, c
0618+  09B9 54          	add a, b
0619+  09BA 39          	mov c, a
0620+  09BB 63 02 00    	sub d, 2
0621+  09BE 0A AB 09    	jmp mul_loop
0622+  09C1             mul_exit:
0623+  09C1 12          	mov a, c
0624+  09C2 E7          	pop d
0625+  09C3 E6          	pop c
0626+  09C4 E5          	pop b
0627+  09C5 EF          	pop si
0628+  09C6 F9          	leave
0629+  09C7 09          	ret
0380   09C8             ; --- END INCLUDE BLOCK
0381   09C8             
0382   09C8             
0383   09C8             .end
tasm: Number of errors = 0
