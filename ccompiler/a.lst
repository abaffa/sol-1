0001   0000             ; --- FILENAME: life.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; n
0011   0408 26 4A 17      mov b, _string_0
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 07 F0 04      call print
0015   0411 51 02 00      add sp, 2
0016   0414 07 FB 04      call getn
0017   0417 D7            push a
0018   0418 11            mov a, b
0019   0419 45 FD FF      mov [bp + -3], a ; n
0020   041C E4            pop a
0021   041D 07 65 04      call init_game
0022   0420             _for1_init:
0023   0420 26 00 00      mov b, 0
0024   0423 D7            push a
0025   0424 11            mov a, b
0026   0425 45 FF FF      mov [bp + -1], a ; i
0027   0428 E4            pop a
0028   0429             _for1_cond:
0029   0429 2C FF FF      mov b, [bp + -1] ; i
0030   042C D7            push a
0031   042D 11            mov a, b
0032   042E 2C FD FF      mov b, [bp + -3] ; n
0033   0431 B0            cmp a, b
0034   0432 0E            lodflgs
0035   0433 87 02         and al, %00000010 ; <
0036   0435 B9 00         cmp al, 0
0037   0437 0E            lodflgs
0038   0438 96            not al
0039   0439 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0040   043B 22 00         mov ah, 0
0041   043D 27            mov b, a
0042   043E E4            pop a
0043   043F C0 00 00      cmp b, 0
0044   0442 C6 5F 04      je _for1_exit
0045   0445             _for1_block:
0046   0445             
0047   0445             ; --- BEGIN INLINE ASM BLOCK
0048   0445 3B 07 18      mov d, s_telnet_clear
0049   0448 07 AC 19      call puts
0050   044B             ; --- END INLINE ASM BLOCK
0051   044B             
0052   044B 07 0B 05      call print_game
0053   044E 07 BC 05      call update_game
0054   0451             _for1_update:
0055   0451 2C FF FF      mov b, [bp + -1] ; i
0056   0454 FD 77         inc b
0057   0456 D7            push a
0058   0457 11            mov a, b
0059   0458 45 FF FF      mov [bp + -1], a ; i
0060   045B E4            pop a
0061   045C 0A 29 04      jmp _for1_cond
0062   045F             _for1_exit:
0063   045F 26 00 00      mov b, 0
0064   0462 F9            leave
0065   0463 05 0B         syscall sys_terminate_proc
0066   0465             init_game:
0067   0465 D2            push bp
0068   0466 9B            mov bp, sp
0069   0467 29 3E 10      mov b, [curr_state]
0070   046A 74            mov d, b
0071   046B 26 04 00      mov b, 4
0072   046E 10 3C 00      mov a, 60
0073   0471 AC            mul a, b
0074   0472 5A            add d, b
0075   0473 26 04 00      mov b, 4
0076   0476 10 02 00      mov a, 2
0077   0479 AC            mul a, b
0078   047A 5A            add d, b
0079   047B DA            push d
0080   047C 26 01 00      mov b, 1
0081   047F E7            pop d
0082   0480 11            mov a, b
0083   0481 43            mov [d], a
0084   0482 29 3E 10      mov b, [curr_state]
0085   0485 74            mov d, b
0086   0486 26 04 00      mov b, 4
0087   0489 10 3C 00      mov a, 60
0088   048C AC            mul a, b
0089   048D 5A            add d, b
0090   048E 26 05 00      mov b, 5
0091   0491 10 02 00      mov a, 2
0092   0494 AC            mul a, b
0093   0495 5A            add d, b
0094   0496 DA            push d
0095   0497 26 01 00      mov b, 1
0096   049A E7            pop d
0097   049B 11            mov a, b
0098   049C 43            mov [d], a
0099   049D 29 3E 10      mov b, [curr_state]
0100   04A0 74            mov d, b
0101   04A1 26 04 00      mov b, 4
0102   04A4 10 3C 00      mov a, 60
0103   04A7 AC            mul a, b
0104   04A8 5A            add d, b
0105   04A9 26 06 00      mov b, 6
0106   04AC 10 02 00      mov a, 2
0107   04AF AC            mul a, b
0108   04B0 5A            add d, b
0109   04B1 DA            push d
0110   04B2 26 01 00      mov b, 1
0111   04B5 E7            pop d
0112   04B6 11            mov a, b
0113   04B7 43            mov [d], a
0114   04B8 29 3E 10      mov b, [curr_state]
0115   04BB 74            mov d, b
0116   04BC 26 03 00      mov b, 3
0117   04BF 10 3C 00      mov a, 60
0118   04C2 AC            mul a, b
0119   04C3 5A            add d, b
0120   04C4 26 06 00      mov b, 6
0121   04C7 10 02 00      mov a, 2
0122   04CA AC            mul a, b
0123   04CB 5A            add d, b
0124   04CC DA            push d
0125   04CD 26 01 00      mov b, 1
0126   04D0 E7            pop d
0127   04D1 11            mov a, b
0128   04D2 43            mov [d], a
0129   04D3 29 3E 10      mov b, [curr_state]
0130   04D6 74            mov d, b
0131   04D7 26 02 00      mov b, 2
0132   04DA 10 3C 00      mov a, 60
0133   04DD AC            mul a, b
0134   04DE 5A            add d, b
0135   04DF 26 05 00      mov b, 5
0136   04E2 10 02 00      mov a, 2
0137   04E5 AC            mul a, b
0138   04E6 5A            add d, b
0139   04E7 DA            push d
0140   04E8 26 01 00      mov b, 1
0141   04EB E7            pop d
0142   04EC 11            mov a, b
0143   04ED 43            mov [d], a
0144   04EE F9            leave
0145   04EF 09            ret
0146   04F0             print:
0147   04F0 D2            push bp
0148   04F1 9B            mov bp, sp
0149   04F2             
0150   04F2             ; --- BEGIN INLINE ASM BLOCK
0151   04F2 17 05 00      mov a, [bp + 5]
0152   04F5 3C            mov d, a
0153   04F6 07 AC 19      call puts
0154   04F9             ; --- END INLINE ASM BLOCK
0155   04F9             
0156   04F9 F9            leave
0157   04FA 09            ret
0158   04FB             getn:
0159   04FB D2            push bp
0160   04FC 9B            mov bp, sp
0161   04FD 52 02 00      sub sp, 2 ; n
0162   0500             
0163   0500             ; --- BEGIN INLINE ASM BLOCK
0164   0500 07 AA 1A      call scan_u16d
0165   0503 45 FF FF      mov [bp + -1], a
0166   0506             ; --- END INLINE ASM BLOCK
0167   0506             
0168   0506 2C FF FF      mov b, [bp + -1] ; n
0169   0509 F9            leave
0170   050A 09            ret
0171   050B             print_game:
0172   050B D2            push bp
0173   050C 9B            mov bp, sp
0174   050D 52 04 00      sub sp, 4 ; i
0175   0510             _for2_init:
0176   0510 26 00 00      mov b, 0
0177   0513 D7            push a
0178   0514 11            mov a, b
0179   0515 45 FF FF      mov [bp + -1], a ; i
0180   0518 E4            pop a
0181   0519             _for2_cond:
0182   0519 2C FF FF      mov b, [bp + -1] ; i
0183   051C D7            push a
0184   051D 11            mov a, b
0185   051E 26 1E 00      mov b, 30
0186   0521 B0            cmp a, b
0187   0522 0E            lodflgs
0188   0523 87 02         and al, %00000010 ; <
0189   0525 B9 00         cmp al, 0
0190   0527 0E            lodflgs
0191   0528 96            not al
0192   0529 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0193   052B 22 00         mov ah, 0
0194   052D 27            mov b, a
0195   052E E4            pop a
0196   052F C0 00 00      cmp b, 0
0197   0532 C6 BA 05      je _for2_exit
0198   0535             _for2_block:
0199   0535             _for3_init:
0200   0535 26 00 00      mov b, 0
0201   0538 D7            push a
0202   0539 11            mov a, b
0203   053A 45 FD FF      mov [bp + -3], a ; j
0204   053D E4            pop a
0205   053E             _for3_cond:
0206   053E 2C FD FF      mov b, [bp + -3] ; j
0207   0541 D7            push a
0208   0542 11            mov a, b
0209   0543 26 1E 00      mov b, 30
0210   0546 B0            cmp a, b
0211   0547 0E            lodflgs
0212   0548 87 02         and al, %00000010 ; <
0213   054A B9 00         cmp al, 0
0214   054C 0E            lodflgs
0215   054D 96            not al
0216   054E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0217   0550 22 00         mov ah, 0
0218   0552 27            mov b, a
0219   0553 E4            pop a
0220   0554 C0 00 00      cmp b, 0
0221   0557 C6 A0 05      je _for3_exit
0222   055A             _for3_block:
0223   055A             _if4_cond:
0224   055A 29 3E 10      mov b, [curr_state]
0225   055D D7            push a
0226   055E 74            mov d, b
0227   055F 2C FF FF      mov b, [bp + -1] ; i
0228   0562 10 3C 00      mov a, 60
0229   0565 AC            mul a, b
0230   0566 5A            add d, b
0231   0567 2C FD FF      mov b, [bp + -3] ; j
0232   056A 10 02 00      mov a, 2
0233   056D AC            mul a, b
0234   056E 5A            add d, b
0235   056F 2A            mov b, [d]
0236   0570 E4            pop a
0237   0571 C0 00 00      cmp b, 0
0238   0574 C6 86 05      je _if4_else
0239   0577             _if4_true:
0240   0577 26 58 17      mov b, _string_1
0241   057A FD AB         swp b
0242   057C D8            push b
0243   057D 07 F0 04      call print
0244   0580 51 02 00      add sp, 2
0245   0583 0A 92 05      jmp _if4_exit
0246   0586             _if4_else:
0247   0586 26 5B 17      mov b, _string_2
0248   0589 FD AB         swp b
0249   058B D8            push b
0250   058C 07 F0 04      call print
0251   058F 51 02 00      add sp, 2
0252   0592             _if4_exit:
0253   0592             _for3_update:
0254   0592 2C FD FF      mov b, [bp + -3] ; j
0255   0595 FD 77         inc b
0256   0597 D7            push a
0257   0598 11            mov a, b
0258   0599 45 FD FF      mov [bp + -3], a ; j
0259   059C E4            pop a
0260   059D 0A 3E 05      jmp _for3_cond
0261   05A0             _for3_exit:
0262   05A0 26 5E 17      mov b, _string_3
0263   05A3 FD AB         swp b
0264   05A5 D8            push b
0265   05A6 07 F0 04      call print
0266   05A9 51 02 00      add sp, 2
0267   05AC             _for2_update:
0268   05AC 2C FF FF      mov b, [bp + -1] ; i
0269   05AF FD 77         inc b
0270   05B1 D7            push a
0271   05B2 11            mov a, b
0272   05B3 45 FF FF      mov [bp + -1], a ; i
0273   05B6 E4            pop a
0274   05B7 0A 19 05      jmp _for2_cond
0275   05BA             _for2_exit:
0276   05BA F9            leave
0277   05BB 09            ret
0278   05BC             update_game:
0279   05BC D2            push bp
0280   05BD 9B            mov bp, sp
0281   05BE 52 0A 00      sub sp, 10 ; i
0282   05C1             _for5_init:
0283   05C1 26 00 00      mov b, 0
0284   05C4 D7            push a
0285   05C5 11            mov a, b
0286   05C6 45 FF FF      mov [bp + -1], a ; i
0287   05C9 E4            pop a
0288   05CA             _for5_cond:
0289   05CA 2C FF FF      mov b, [bp + -1] ; i
0290   05CD D7            push a
0291   05CE 11            mov a, b
0292   05CF 26 1E 00      mov b, 30
0293   05D2 B0            cmp a, b
0294   05D3 0E            lodflgs
0295   05D4 87 02         and al, %00000010 ; <
0296   05D6 B9 00         cmp al, 0
0297   05D8 0E            lodflgs
0298   05D9 96            not al
0299   05DA 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0300   05DC 22 00         mov ah, 0
0301   05DE 27            mov b, a
0302   05DF E4            pop a
0303   05E0 C0 00 00      cmp b, 0
0304   05E3 C6 56 06      je _for5_exit
0305   05E6             _for5_block:
0306   05E6             _for6_init:
0307   05E6 26 00 00      mov b, 0
0308   05E9 D7            push a
0309   05EA 11            mov a, b
0310   05EB 45 FD FF      mov [bp + -3], a ; j
0311   05EE E4            pop a
0312   05EF             _for6_cond:
0313   05EF 2C FD FF      mov b, [bp + -3] ; j
0314   05F2 D7            push a
0315   05F3 11            mov a, b
0316   05F4 26 1E 00      mov b, 30
0317   05F7 B0            cmp a, b
0318   05F8 0E            lodflgs
0319   05F9 87 02         and al, %00000010 ; <
0320   05FB B9 00         cmp al, 0
0321   05FD 0E            lodflgs
0322   05FE 96            not al
0323   05FF 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0324   0601 22 00         mov ah, 0
0325   0603 27            mov b, a
0326   0604 E4            pop a
0327   0605 C0 00 00      cmp b, 0
0328   0608 C6 48 06      je _for6_exit
0329   060B             _for6_block:
0330   060B 29 48 17      mov b, [next_state]
0331   060E 74            mov d, b
0332   060F 2C FF FF      mov b, [bp + -1] ; i
0333   0612 10 3C 00      mov a, 60
0334   0615 AC            mul a, b
0335   0616 5A            add d, b
0336   0617 2C FD FF      mov b, [bp + -3] ; j
0337   061A 10 02 00      mov a, 2
0338   061D AC            mul a, b
0339   061E 5A            add d, b
0340   061F DA            push d
0341   0620 29 3E 10      mov b, [curr_state]
0342   0623 D7            push a
0343   0624 74            mov d, b
0344   0625 2C FF FF      mov b, [bp + -1] ; i
0345   0628 10 3C 00      mov a, 60
0346   062B AC            mul a, b
0347   062C 5A            add d, b
0348   062D 2C FD FF      mov b, [bp + -3] ; j
0349   0630 10 02 00      mov a, 2
0350   0633 AC            mul a, b
0351   0634 5A            add d, b
0352   0635 2A            mov b, [d]
0353   0636 E4            pop a
0354   0637 E7            pop d
0355   0638 11            mov a, b
0356   0639 43            mov [d], a
0357   063A             _for6_update:
0358   063A 2C FD FF      mov b, [bp + -3] ; j
0359   063D FD 77         inc b
0360   063F D7            push a
0361   0640 11            mov a, b
0362   0641 45 FD FF      mov [bp + -3], a ; j
0363   0644 E4            pop a
0364   0645 0A EF 05      jmp _for6_cond
0365   0648             _for6_exit:
0366   0648             _for5_update:
0367   0648 2C FF FF      mov b, [bp + -1] ; i
0368   064B FD 77         inc b
0369   064D D7            push a
0370   064E 11            mov a, b
0371   064F 45 FF FF      mov [bp + -1], a ; i
0372   0652 E4            pop a
0373   0653 0A CA 05      jmp _for5_cond
0374   0656             _for5_exit:
0375   0656             _for7_init:
0376   0656 26 01 00      mov b, 1
0377   0659 D7            push a
0378   065A 11            mov a, b
0379   065B 45 FF FF      mov [bp + -1], a ; i
0380   065E E4            pop a
0381   065F             _for7_cond:
0382   065F 2C FF FF      mov b, [bp + -1] ; i
0383   0662 D7            push a
0384   0663 11            mov a, b
0385   0664 26 1E 00      mov b, 30
0386   0667 B0            cmp a, b
0387   0668 0E            lodflgs
0388   0669 87 02         and al, %00000010 ; <
0389   066B B9 00         cmp al, 0
0390   066D 0E            lodflgs
0391   066E 96            not al
0392   066F 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0393   0671 22 00         mov ah, 0
0394   0673 27            mov b, a
0395   0674 E4            pop a
0396   0675 C0 00 00      cmp b, 0
0397   0678 C6 9F 08      je _for7_exit
0398   067B             _for7_block:
0399   067B             _for8_init:
0400   067B 26 01 00      mov b, 1
0401   067E D7            push a
0402   067F 11            mov a, b
0403   0680 45 FD FF      mov [bp + -3], a ; j
0404   0683 E4            pop a
0405   0684             _for8_cond:
0406   0684 2C FD FF      mov b, [bp + -3] ; j
0407   0687 D7            push a
0408   0688 11            mov a, b
0409   0689 26 1E 00      mov b, 30
0410   068C B0            cmp a, b
0411   068D 0E            lodflgs
0412   068E 87 02         and al, %00000010 ; <
0413   0690 B9 00         cmp al, 0
0414   0692 0E            lodflgs
0415   0693 96            not al
0416   0694 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0417   0696 22 00         mov ah, 0
0418   0698 27            mov b, a
0419   0699 E4            pop a
0420   069A C0 00 00      cmp b, 0
0421   069D C6 91 08      je _for8_exit
0422   06A0             _for8_block:
0423   06A0 26 00 00      mov b, 0
0424   06A3 D7            push a
0425   06A4 11            mov a, b
0426   06A5 45 F7 FF      mov [bp + -9], a ; count
0427   06A8 E4            pop a
0428   06A9             _for9_init:
0429   06A9 2C FF FF      mov b, [bp + -1] ; i
0430   06AC D7            push a
0431   06AD 11            mov a, b
0432   06AE 26 01 00      mov b, 1
0433   06B1 60            sub a, b
0434   06B2 27            mov b, a
0435   06B3 11            mov a, b
0436   06B4 45 FB FF      mov [bp + -5], a ; ni
0437   06B7 E4            pop a
0438   06B8             _for9_cond:
0439   06B8 2C FB FF      mov b, [bp + -5] ; ni
0440   06BB D7            push a
0441   06BC 11            mov a, b
0442   06BD 2C FF FF      mov b, [bp + -1] ; i
0443   06C0 D7            push a
0444   06C1 11            mov a, b
0445   06C2 26 01 00      mov b, 1
0446   06C5 54            add a, b
0447   06C6 27            mov b, a
0448   06C7 E4            pop a
0449   06C8 B0            cmp a, b
0450   06C9 0E            lodflgs
0451   06CA 87 03         and al, %00000011 ; <=
0452   06CC B9 00         cmp al, 0
0453   06CE 0E            lodflgs
0454   06CF 96            not al
0455   06D0 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0456   06D2 22 00         mov ah, 0
0457   06D4 27            mov b, a
0458   06D5 E4            pop a
0459   06D6 C0 00 00      cmp b, 0
0460   06D9 C6 D1 07      je _for9_exit
0461   06DC             _for9_block:
0462   06DC             _for10_init:
0463   06DC 2C FD FF      mov b, [bp + -3] ; j
0464   06DF D7            push a
0465   06E0 11            mov a, b
0466   06E1 26 01 00      mov b, 1
0467   06E4 60            sub a, b
0468   06E5 27            mov b, a
0469   06E6 11            mov a, b
0470   06E7 45 F9 FF      mov [bp + -7], a ; nj
0471   06EA E4            pop a
0472   06EB             _for10_cond:
0473   06EB 2C F9 FF      mov b, [bp + -7] ; nj
0474   06EE D7            push a
0475   06EF 11            mov a, b
0476   06F0 2C FD FF      mov b, [bp + -3] ; j
0477   06F3 D7            push a
0478   06F4 11            mov a, b
0479   06F5 26 01 00      mov b, 1
0480   06F8 54            add a, b
0481   06F9 27            mov b, a
0482   06FA E4            pop a
0483   06FB B0            cmp a, b
0484   06FC 0E            lodflgs
0485   06FD 87 03         and al, %00000011 ; <=
0486   06FF B9 00         cmp al, 0
0487   0701 0E            lodflgs
0488   0702 96            not al
0489   0703 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0490   0705 22 00         mov ah, 0
0491   0707 27            mov b, a
0492   0708 E4            pop a
0493   0709 C0 00 00      cmp b, 0
0494   070C C6 C3 07      je _for10_exit
0495   070F             _for10_block:
0496   070F             _if11_cond:
0497   070F 2C FB FF      mov b, [bp + -5] ; ni
0498   0712 D7            push a
0499   0713 11            mov a, b
0500   0714 26 1E 00      mov b, 30
0501   0717 B0            cmp a, b
0502   0718 0E            lodflgs
0503   0719 87 02         and al, %00000010 ; <
0504   071B B9 00         cmp al, 0
0505   071D 0E            lodflgs
0506   071E 96            not al
0507   071F 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0508   0721 22 00         mov ah, 0
0509   0723 27            mov b, a
0510   0724 11            mov a, b
0511   0725 B9 00         cmp al, 0
0512   0727 0E            lodflgs
0513   0728 96            not al
0514   0729 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0515   072B 22 00         mov ah, 0
0516   072D 2C F9 FF      mov b, [bp + -7] ; nj
0517   0730 D7            push a
0518   0731 11            mov a, b
0519   0732 26 1E 00      mov b, 30
0520   0735 B0            cmp a, b
0521   0736 0E            lodflgs
0522   0737 87 02         and al, %00000010 ; <
0523   0739 B9 00         cmp al, 0
0524   073B 0E            lodflgs
0525   073C 96            not al
0526   073D 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0527   073F 27            mov b, a
0528   0740 C1 00         cmp bl, 0
0529   0742 0E            lodflgs
0530   0743 96            not al
0531   0744 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0532   0746 22 00         mov ah, 0
0533   0748 27            mov b, a
0534   0749 E4            pop a
0535   074A 86            and a, b
0536   074B 27            mov b, a
0537   074C E4            pop a
0538   074D C0 00 00      cmp b, 0
0539   0750 C6 B5 07      je _if11_exit
0540   0753             _if11_true:
0541   0753             _if12_cond:
0542   0753 2C FB FF      mov b, [bp + -5] ; ni
0543   0756 D7            push a
0544   0757 11            mov a, b
0545   0758 2C FF FF      mov b, [bp + -1] ; i
0546   075B B0            cmp a, b
0547   075C 0E            lodflgs
0548   075D 87 01         and al, %00000001
0549   075F 8F 01         xor al, %00000001 ; !=
0550   0761 B9 00         cmp al, 0
0551   0763 0E            lodflgs
0552   0764 96            not al
0553   0765 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0554   0767 22 00         mov ah, 0
0555   0769 27            mov b, a
0556   076A 11            mov a, b
0557   076B 2C F9 FF      mov b, [bp + -7] ; nj
0558   076E D7            push a
0559   076F 11            mov a, b
0560   0770 2C FD FF      mov b, [bp + -3] ; j
0561   0773 B0            cmp a, b
0562   0774 0E            lodflgs
0563   0775 87 01         and al, %00000001
0564   0777 8F 01         xor al, %00000001 ; !=
0565   0779 B9 00         cmp al, 0
0566   077B 0E            lodflgs
0567   077C 96            not al
0568   077D 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0569   077F 22 00         mov ah, 0
0570   0781 27            mov b, a
0571   0782 E4            pop a
0572   0783 8A            or a, b
0573   0784 27            mov b, a
0574   0785 E4            pop a
0575   0786 C0 00 00      cmp b, 0
0576   0789 C6 B2 07      je _if12_exit
0577   078C             _if12_true:
0578   078C 2C F7 FF      mov b, [bp + -9] ; count
0579   078F D7            push a
0580   0790 11            mov a, b
0581   0791 29 3E 10      mov b, [curr_state]
0582   0794 D7            push a
0583   0795 74            mov d, b
0584   0796 2C FB FF      mov b, [bp + -5] ; ni
0585   0799 10 3C 00      mov a, 60
0586   079C AC            mul a, b
0587   079D 5A            add d, b
0588   079E 2C F9 FF      mov b, [bp + -7] ; nj
0589   07A1 10 02 00      mov a, 2
0590   07A4 AC            mul a, b
0591   07A5 5A            add d, b
0592   07A6 2A            mov b, [d]
0593   07A7 E4            pop a
0594   07A8 54            add a, b
0595   07A9 27            mov b, a
0596   07AA 11            mov a, b
0597   07AB 45 F7 FF      mov [bp + -9], a ; count
0598   07AE E4            pop a
0599   07AF 0A B2 07      jmp _if12_exit
0600   07B2             _if12_exit:
0601   07B2 0A B5 07      jmp _if11_exit
0602   07B5             _if11_exit:
0603   07B5             _for10_update:
0604   07B5 2C F9 FF      mov b, [bp + -7] ; nj
0605   07B8 FD 77         inc b
0606   07BA D7            push a
0607   07BB 11            mov a, b
0608   07BC 45 F9 FF      mov [bp + -7], a ; nj
0609   07BF E4            pop a
0610   07C0 0A EB 06      jmp _for10_cond
0611   07C3             _for10_exit:
0612   07C3             _for9_update:
0613   07C3 2C FB FF      mov b, [bp + -5] ; ni
0614   07C6 FD 77         inc b
0615   07C8 D7            push a
0616   07C9 11            mov a, b
0617   07CA 45 FB FF      mov [bp + -5], a ; ni
0618   07CD E4            pop a
0619   07CE 0A B8 06      jmp _for9_cond
0620   07D1             _for9_exit:
0621   07D1             _if13_cond:
0622   07D1 29 3E 10      mov b, [curr_state]
0623   07D4 D7            push a
0624   07D5 74            mov d, b
0625   07D6 2C FF FF      mov b, [bp + -1] ; i
0626   07D9 10 3C 00      mov a, 60
0627   07DC AC            mul a, b
0628   07DD 5A            add d, b
0629   07DE 2C FD FF      mov b, [bp + -3] ; j
0630   07E1 10 02 00      mov a, 2
0631   07E4 AC            mul a, b
0632   07E5 5A            add d, b
0633   07E6 2A            mov b, [d]
0634   07E7 E4            pop a
0635   07E8 C0 00 00      cmp b, 0
0636   07EB C6 49 08      je _if13_else
0637   07EE             _if13_true:
0638   07EE             _if14_cond:
0639   07EE 2C F7 FF      mov b, [bp + -9] ; count
0640   07F1 D7            push a
0641   07F2 11            mov a, b
0642   07F3 26 02 00      mov b, 2
0643   07F6 B0            cmp a, b
0644   07F7 0E            lodflgs
0645   07F8 87 02         and al, %00000010 ; <
0646   07FA B9 00         cmp al, 0
0647   07FC 0E            lodflgs
0648   07FD 96            not al
0649   07FE 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0650   0800 22 00         mov ah, 0
0651   0802 27            mov b, a
0652   0803 11            mov a, b
0653   0804 2C F7 FF      mov b, [bp + -9] ; count
0654   0807 D7            push a
0655   0808 11            mov a, b
0656   0809 26 03 00      mov b, 3
0657   080C B0            cmp a, b
0658   080D 0E            lodflgs
0659   080E 87 03         and al, %00000011
0660   0810 B9 00         cmp al, %00000000
0661   0812 0E            lodflgs
0662   0813 87 01         and al, %00000001 ; >
0663   0815 B9 00         cmp al, 0
0664   0817 0E            lodflgs
0665   0818 96            not al
0666   0819 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0667   081B 22 00         mov ah, 0
0668   081D 27            mov b, a
0669   081E E4            pop a
0670   081F 8A            or a, b
0671   0820 27            mov b, a
0672   0821 E4            pop a
0673   0822 C0 00 00      cmp b, 0
0674   0825 C6 46 08      je _if14_exit
0675   0828             _if14_true:
0676   0828 29 48 17      mov b, [next_state]
0677   082B 74            mov d, b
0678   082C 2C FF FF      mov b, [bp + -1] ; i
0679   082F 10 3C 00      mov a, 60
0680   0832 AC            mul a, b
0681   0833 5A            add d, b
0682   0834 2C FD FF      mov b, [bp + -3] ; j
0683   0837 10 02 00      mov a, 2
0684   083A AC            mul a, b
0685   083B 5A            add d, b
0686   083C DA            push d
0687   083D 26 00 00      mov b, 0
0688   0840 E7            pop d
0689   0841 11            mov a, b
0690   0842 43            mov [d], a
0691   0843 0A 46 08      jmp _if14_exit
0692   0846             _if14_exit:
0693   0846 0A 83 08      jmp _if13_exit
0694   0849             _if13_else:
0695   0849             _if15_cond:
0696   0849 2C F7 FF      mov b, [bp + -9] ; count
0697   084C D7            push a
0698   084D 11            mov a, b
0699   084E 26 03 00      mov b, 3
0700   0851 B0            cmp a, b
0701   0852 0E            lodflgs
0702   0853 87 01         and al, %00000001 ; ==
0703   0855 B9 00         cmp al, 0
0704   0857 0E            lodflgs
0705   0858 96            not al
0706   0859 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0707   085B 22 00         mov ah, 0
0708   085D 27            mov b, a
0709   085E E4            pop a
0710   085F C0 00 00      cmp b, 0
0711   0862 C6 83 08      je _if15_exit
0712   0865             _if15_true:
0713   0865 29 48 17      mov b, [next_state]
0714   0868 74            mov d, b
0715   0869 2C FF FF      mov b, [bp + -1] ; i
0716   086C 10 3C 00      mov a, 60
0717   086F AC            mul a, b
0718   0870 5A            add d, b
0719   0871 2C FD FF      mov b, [bp + -3] ; j
0720   0874 10 02 00      mov a, 2
0721   0877 AC            mul a, b
0722   0878 5A            add d, b
0723   0879 DA            push d
0724   087A 26 01 00      mov b, 1
0725   087D E7            pop d
0726   087E 11            mov a, b
0727   087F 43            mov [d], a
0728   0880 0A 83 08      jmp _if15_exit
0729   0883             _if15_exit:
0730   0883             _if13_exit:
0731   0883             _for8_update:
0732   0883 2C FD FF      mov b, [bp + -3] ; j
0733   0886 FD 77         inc b
0734   0888 D7            push a
0735   0889 11            mov a, b
0736   088A 45 FD FF      mov [bp + -3], a ; j
0737   088D E4            pop a
0738   088E 0A 84 06      jmp _for8_cond
0739   0891             _for8_exit:
0740   0891             _for7_update:
0741   0891 2C FF FF      mov b, [bp + -1] ; i
0742   0894 FD 77         inc b
0743   0896 D7            push a
0744   0897 11            mov a, b
0745   0898 45 FF FF      mov [bp + -1], a ; i
0746   089B E4            pop a
0747   089C 0A 5F 06      jmp _for7_cond
0748   089F             _for7_exit:
0749   089F             _for16_init:
0750   089F 26 00 00      mov b, 0
0751   08A2 D7            push a
0752   08A3 11            mov a, b
0753   08A4 45 FF FF      mov [bp + -1], a ; i
0754   08A7 E4            pop a
0755   08A8             _for16_cond:
0756   08A8 2C FF FF      mov b, [bp + -1] ; i
0757   08AB D7            push a
0758   08AC 11            mov a, b
0759   08AD 26 1E 00      mov b, 30
0760   08B0 B0            cmp a, b
0761   08B1 0E            lodflgs
0762   08B2 87 02         and al, %00000010 ; <
0763   08B4 B9 00         cmp al, 0
0764   08B6 0E            lodflgs
0765   08B7 96            not al
0766   08B8 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0767   08BA 22 00         mov ah, 0
0768   08BC 27            mov b, a
0769   08BD E4            pop a
0770   08BE C0 00 00      cmp b, 0
0771   08C1 C6 34 09      je _for16_exit
0772   08C4             _for16_block:
0773   08C4             _for17_init:
0774   08C4 26 00 00      mov b, 0
0775   08C7 D7            push a
0776   08C8 11            mov a, b
0777   08C9 45 FD FF      mov [bp + -3], a ; j
0778   08CC E4            pop a
0779   08CD             _for17_cond:
0780   08CD 2C FD FF      mov b, [bp + -3] ; j
0781   08D0 D7            push a
0782   08D1 11            mov a, b
0783   08D2 26 1E 00      mov b, 30
0784   08D5 B0            cmp a, b
0785   08D6 0E            lodflgs
0786   08D7 87 02         and al, %00000010 ; <
0787   08D9 B9 00         cmp al, 0
0788   08DB 0E            lodflgs
0789   08DC 96            not al
0790   08DD 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0791   08DF 22 00         mov ah, 0
0792   08E1 27            mov b, a
0793   08E2 E4            pop a
0794   08E3 C0 00 00      cmp b, 0
0795   08E6 C6 26 09      je _for17_exit
0796   08E9             _for17_block:
0797   08E9 29 3E 10      mov b, [curr_state]
0798   08EC 74            mov d, b
0799   08ED 2C FF FF      mov b, [bp + -1] ; i
0800   08F0 10 3C 00      mov a, 60
0801   08F3 AC            mul a, b
0802   08F4 5A            add d, b
0803   08F5 2C FD FF      mov b, [bp + -3] ; j
0804   08F8 10 02 00      mov a, 2
0805   08FB AC            mul a, b
0806   08FC 5A            add d, b
0807   08FD DA            push d
0808   08FE 29 48 17      mov b, [next_state]
0809   0901 D7            push a
0810   0902 74            mov d, b
0811   0903 2C FF FF      mov b, [bp + -1] ; i
0812   0906 10 3C 00      mov a, 60
0813   0909 AC            mul a, b
0814   090A 5A            add d, b
0815   090B 2C FD FF      mov b, [bp + -3] ; j
0816   090E 10 02 00      mov a, 2
0817   0911 AC            mul a, b
0818   0912 5A            add d, b
0819   0913 2A            mov b, [d]
0820   0914 E4            pop a
0821   0915 E7            pop d
0822   0916 11            mov a, b
0823   0917 43            mov [d], a
0824   0918             _for17_update:
0825   0918 2C FD FF      mov b, [bp + -3] ; j
0826   091B FD 77         inc b
0827   091D D7            push a
0828   091E 11            mov a, b
0829   091F 45 FD FF      mov [bp + -3], a ; j
0830   0922 E4            pop a
0831   0923 0A CD 08      jmp _for17_cond
0832   0926             _for17_exit:
0833   0926             _for16_update:
0834   0926 2C FF FF      mov b, [bp + -1] ; i
0835   0929 FD 77         inc b
0836   092B D7            push a
0837   092C 11            mov a, b
0838   092D 45 FF FF      mov [bp + -1], a ; i
0839   0930 E4            pop a
0840   0931 0A A8 08      jmp _for16_cond
0841   0934             _for16_exit:
0842   0934 F9            leave
0843   0935 09            ret
0844   0936             ; --- END TEXT BLOCK
0845   0936             
0846   0936             ; --- BEGIN DATA BLOCK
0847   0936             curr_state_data: 
0848   0936 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0848   093A 00 00 00 00 
0848   093E 00 00 00 00 
0848   0942 00 00 00 00 
0848   0946 00 00 00 00 
0848   094A 00 00 00 00 
0848   094E 00 00 00 00 
0848   0952 00 00 00 00 
0848   0956 00 00 00 00 
0848   095A 00 00 00 00 
0848   095E 00 00 00 00 
0848   0962 00 00 00 00 
0848   0966 00 00 00 00 
0848   096A 00 00 00 00 
0848   096E 00 00 00 00 
0849   0972 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0849   0976 00 00 00 00 
0849   097A 00 00 00 00 
0849   097E 00 00 00 00 
0849   0982 00 00 00 00 
0849   0986 00 00 00 00 
0849   098A 00 00 00 00 
0849   098E 00 00 00 00 
0849   0992 00 00 00 00 
0849   0996 00 00 00 00 
0849   099A 00 00 00 00 
0849   099E 00 00 00 00 
0849   09A2 00 00 00 00 
0849   09A6 00 00 00 00 
0849   09AA 00 00 00 00 
0850   09AE 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0850   09B2 00 00 00 00 
0850   09B6 00 00 00 00 
0850   09BA 00 00 00 00 
0850   09BE 00 00 00 00 
0850   09C2 00 00 00 00 
0850   09C6 00 00 00 00 
0850   09CA 00 00 00 00 
0850   09CE 00 00 00 00 
0850   09D2 00 00 00 00 
0850   09D6 00 00 00 00 
0850   09DA 00 00 00 00 
0850   09DE 00 00 00 00 
0850   09E2 00 00 00 00 
0850   09E6 00 00 00 00 
0851   09EA 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0851   09EE 00 00 00 00 
0851   09F2 00 00 00 00 
0851   09F6 00 00 00 00 
0851   09FA 00 00 00 00 
0851   09FE 00 00 00 00 
0851   0A02 01 00 00 00 
0851   0A06 00 00 00 00 
0851   0A0A 00 00 00 00 
0851   0A0E 00 00 00 00 
0851   0A12 00 00 00 00 
0851   0A16 00 00 00 00 
0851   0A1A 00 00 00 00 
0851   0A1E 00 00 00 00 
0851   0A22 00 00 00 00 
0852   0A26 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
0852   0A2A 00 00 00 00 
0852   0A2E 00 00 00 00 
0852   0A32 00 00 00 00 
0852   0A36 00 00 00 00 
0852   0A3A 00 00 00 00 
0852   0A3E 00 00 00 00 
0852   0A42 00 00 00 00 
0852   0A46 00 00 00 00 
0852   0A4A 00 00 01 00 
0852   0A4E 00 00 01 00 
0852   0A52 00 00 00 00 
0852   0A56 00 00 00 00 
0852   0A5A 00 00 00 00 
0852   0A5E 00 00 00 00 
0853   0A62 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
0853   0A66 00 00 00 00 
0853   0A6A 00 00 00 00 
0853   0A6E 00 00 00 00 
0853   0A72 00 00 00 00 
0853   0A76 00 00 00 00 
0853   0A7A 00 00 00 00 
0853   0A7E 00 00 00 00 
0853   0A82 00 00 00 00 
0853   0A86 00 00 00 00 
0853   0A8A 00 00 00 00 
0853   0A8E 00 00 00 00 
0853   0A92 00 00 00 00 
0853   0A96 00 00 00 00 
0853   0A9A 01 00 00 00 
0854   0A9E 01 00 00 00 .dw 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
0854   0AA2 00 00 00 00 
0854   0AA6 00 00 00 00 
0854   0AAA 00 00 00 00 
0854   0AAE 00 00 00 00 
0854   0AB2 00 00 00 00 
0854   0AB6 00 00 00 00 
0854   0ABA 00 00 00 00 
0854   0ABE 00 00 00 00 
0854   0AC2 00 00 00 00 
0854   0AC6 00 00 00 00 
0854   0ACA 00 00 00 00 
0854   0ACE 00 00 00 00 
0854   0AD2 01 00 00 00 
0854   0AD6 00 00 00 00 
0855   0ADA 01 00 00 00 .dw 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0855   0ADE 00 00 00 00 
0855   0AE2 00 00 01 00 
0855   0AE6 01 00 00 00 
0855   0AEA 00 00 00 00 
0855   0AEE 00 00 00 00 
0855   0AF2 00 00 00 00 
0855   0AF6 00 00 00 00 
0855   0AFA 00 00 00 00 
0855   0AFE 00 00 01 00 
0855   0B02 01 00 00 00 
0855   0B06 00 00 00 00 
0855   0B0A 00 00 00 00 
0855   0B0E 00 00 00 00 
0855   0B12 00 00 00 00 
0856   0B16 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 
0856   0B1A 00 00 00 00 
0856   0B1E 00 00 00 00 
0856   0B22 01 00 01 00 
0856   0B26 00 00 00 00 
0856   0B2A 00 00 00 00 
0856   0B2E 00 00 00 00 
0856   0B32 01 00 01 00 
0856   0B36 00 00 00 00 
0856   0B3A 00 00 00 00 
0856   0B3E 00 00 00 00 
0856   0B42 00 00 00 00 
0856   0B46 00 00 00 00 
0856   0B4A 00 00 00 00 
0856   0B4E 01 00 01 00 
0857   0B52 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
0857   0B56 00 00 00 00 
0857   0B5A 00 00 00 00 
0857   0B5E 00 00 00 00 
0857   0B62 00 00 00 00 
0857   0B66 00 00 00 00 
0857   0B6A 00 00 00 00 
0857   0B6E 01 00 00 00 
0857   0B72 00 00 00 00 
0857   0B76 01 00 00 00 
0857   0B7A 00 00 00 00 
0857   0B7E 00 00 01 00 
0857   0B82 01 00 00 00 
0857   0B86 00 00 00 00 
0857   0B8A 00 00 00 00 
0858   0B8E 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 
0858   0B92 00 00 00 00 
0858   0B96 00 00 00 00 
0858   0B9A 00 00 01 00 
0858   0B9E 01 00 00 00 
0858   0BA2 00 00 00 00 
0858   0BA6 00 00 00 00 
0858   0BAA 00 00 00 00 
0858   0BAE 00 00 00 00 
0858   0BB2 00 00 00 00 
0858   0BB6 00 00 00 00 
0858   0BBA 00 00 01 00 
0858   0BBE 00 00 00 00 
0858   0BC2 00 00 01 00 
0858   0BC6 00 00 00 00 
0859   0BCA 00 00 00 00 .dw 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0859   0BCE 01 00 01 00 
0859   0BD2 00 00 00 00 
0859   0BD6 00 00 00 00 
0859   0BDA 00 00 00 00 
0859   0BDE 00 00 00 00 
0859   0BE2 00 00 00 00 
0859   0BE6 00 00 00 00 
0859   0BEA 01 00 01 00 
0859   0BEE 00 00 00 00 
0859   0BF2 00 00 00 00 
0859   0BF6 00 00 00 00 
0859   0BFA 00 00 00 00 
0859   0BFE 00 00 00 00 
0859   0C02 00 00 00 00 
0860   0C06 00 00 00 00 .dw 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 
0860   0C0A 01 00 00 00 
0860   0C0E 00 00 00 00 
0860   0C12 01 00 00 00 
0860   0C16 00 00 00 00 
0860   0C1A 00 00 01 00 
0860   0C1E 01 00 00 00 
0860   0C22 00 00 00 00 
0860   0C26 00 00 00 00 
0860   0C2A 00 00 00 00 
0860   0C2E 00 00 00 00 
0860   0C32 00 00 00 00 
0860   0C36 00 00 01 00 
0860   0C3A 01 00 00 00 
0860   0C3E 00 00 00 00 
0861   0C42 01 00 01 00 .dw 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
0861   0C46 00 00 00 00 
0861   0C4A 00 00 00 00 
0861   0C4E 00 00 00 00 
0861   0C52 00 00 00 00 
0861   0C56 01 00 00 00 
0861   0C5A 00 00 00 00 
0861   0C5E 00 00 00 00 
0861   0C62 01 00 00 00 
0861   0C66 00 00 00 00 
0861   0C6A 01 00 01 00 
0861   0C6E 00 00 00 00 
0861   0C72 00 00 00 00 
0861   0C76 00 00 00 00 
0861   0C7A 00 00 00 00 
0862   0C7E 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 
0862   0C82 00 00 00 00 
0862   0C86 00 00 00 00 
0862   0C8A 00 00 00 00 
0862   0C8E 00 00 01 00 
0862   0C92 01 00 00 00 
0862   0C96 00 00 00 00 
0862   0C9A 00 00 00 00 
0862   0C9E 00 00 00 00 
0862   0CA2 00 00 01 00 
0862   0CA6 00 00 00 00 
0862   0CAA 00 00 00 00 
0862   0CAE 00 00 01 00 
0862   0CB2 00 00 00 00 
0862   0CB6 00 00 01 00 
0863   0CBA 01 00 00 00 .dw 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
0863   0CBE 00 00 00 00 
0863   0CC2 00 00 00 00 
0863   0CC6 00 00 00 00 
0863   0CCA 00 00 00 00 
0863   0CCE 00 00 00 00 
0863   0CD2 00 00 00 00 
0863   0CD6 00 00 00 00 
0863   0CDA 00 00 00 00 
0863   0CDE 00 00 00 00 
0863   0CE2 00 00 00 00 
0863   0CE6 00 00 00 00 
0863   0CEA 00 00 00 00 
0863   0CEE 00 00 00 00 
0863   0CF2 00 00 01 00 
0864   0CF6 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 
0864   0CFA 00 00 01 00 
0864   0CFE 00 00 00 00 
0864   0D02 00 00 00 00 
0864   0D06 01 00 01 00 
0864   0D0A 00 00 00 00 
0864   0D0E 00 00 00 00 
0864   0D12 00 00 00 00 
0864   0D16 00 00 00 00 
0864   0D1A 00 00 00 00 
0864   0D1E 00 00 00 00 
0864   0D22 01 00 01 00 
0864   0D26 00 00 00 00 
0864   0D2A 00 00 01 00 
0864   0D2E 01 00 00 00 
0865   0D32 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
0865   0D36 00 00 00 00 
0865   0D3A 00 00 00 00 
0865   0D3E 00 00 01 00 
0865   0D42 00 00 00 00 
0865   0D46 00 00 01 00 
0865   0D4A 00 00 01 00 
0865   0D4E 01 00 00 00 
0865   0D52 00 00 00 00 
0865   0D56 00 00 01 00 
0865   0D5A 00 00 01 00 
0865   0D5E 00 00 00 00 
0865   0D62 00 00 00 00 
0865   0D66 00 00 00 00 
0865   0D6A 00 00 00 00 
0866   0D6E 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
0866   0D72 00 00 00 00 
0866   0D76 00 00 00 00 
0866   0D7A 00 00 00 00 
0866   0D7E 00 00 00 00 
0866   0D82 00 00 00 00 
0866   0D86 00 00 00 00 
0866   0D8A 00 00 00 00 
0866   0D8E 01 00 00 00 
0866   0D92 00 00 00 00 
0866   0D96 00 00 00 00 
0866   0D9A 01 00 00 00 
0866   0D9E 00 00 00 00 
0866   0DA2 00 00 00 00 
0866   0DA6 00 00 00 00 
0867   0DAA 01 00 00 00 .dw 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
0867   0DAE 00 00 00 00 
0867   0DB2 00 00 00 00 
0867   0DB6 00 00 00 00 
0867   0DBA 00 00 00 00 
0867   0DBE 00 00 00 00 
0867   0DC2 00 00 00 00 
0867   0DC6 00 00 00 00 
0867   0DCA 00 00 00 00 
0867   0DCE 00 00 00 00 
0867   0DD2 00 00 00 00 
0867   0DD6 00 00 00 00 
0867   0DDA 00 00 00 00 
0867   0DDE 01 00 00 00 
0867   0DE2 00 00 00 00 
0868   0DE6 01 00 00 00 .dw 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0868   0DEA 00 00 00 00 
0868   0DEE 00 00 00 00 
0868   0DF2 00 00 00 00 
0868   0DF6 00 00 00 00 
0868   0DFA 00 00 00 00 
0868   0DFE 00 00 00 00 
0868   0E02 00 00 00 00 
0868   0E06 00 00 00 00 
0868   0E0A 00 00 00 00 
0868   0E0E 00 00 00 00 
0868   0E12 00 00 00 00 
0868   0E16 00 00 00 00 
0868   0E1A 00 00 00 00 
0868   0E1E 00 00 00 00 
0869   0E22 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0869   0E26 00 00 00 00 
0869   0E2A 00 00 00 00 
0869   0E2E 01 00 01 00 
0869   0E32 00 00 00 00 
0869   0E36 00 00 00 00 
0869   0E3A 00 00 00 00 
0869   0E3E 00 00 00 00 
0869   0E42 00 00 00 00 
0869   0E46 00 00 00 00 
0869   0E4A 00 00 00 00 
0869   0E4E 00 00 00 00 
0869   0E52 00 00 00 00 
0869   0E56 00 00 00 00 
0869   0E5A 00 00 00 00 
0870   0E5E 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
0870   0E62 00 00 00 00 
0870   0E66 00 00 00 00 
0870   0E6A 00 00 00 00 
0870   0E6E 00 00 00 00 
0870   0E72 00 00 00 00 
0870   0E76 00 00 00 00 
0870   0E7A 01 00 00 00 
0870   0E7E 00 00 00 00 
0870   0E82 01 00 00 00 
0870   0E86 00 00 00 00 
0870   0E8A 00 00 01 00 
0870   0E8E 01 00 00 00 
0870   0E92 00 00 00 00 
0870   0E96 00 00 00 00 
0871   0E9A 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 
0871   0E9E 00 00 00 00 
0871   0EA2 00 00 00 00 
0871   0EA6 00 00 01 00 
0871   0EAA 01 00 00 00 
0871   0EAE 00 00 00 00 
0871   0EB2 00 00 00 00 
0871   0EB6 00 00 00 00 
0871   0EBA 00 00 00 00 
0871   0EBE 00 00 00 00 
0871   0EC2 00 00 00 00 
0871   0EC6 00 00 01 00 
0871   0ECA 00 00 00 00 
0871   0ECE 00 00 01 00 
0871   0ED2 00 00 00 00 
0872   0ED6 00 00 00 00 .dw 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0872   0EDA 01 00 01 00 
0872   0EDE 00 00 00 00 
0872   0EE2 00 00 00 00 
0872   0EE6 00 00 00 00 
0872   0EEA 00 00 00 00 
0872   0EEE 00 00 00 00 
0872   0EF2 00 00 00 00 
0872   0EF6 01 00 01 00 
0872   0EFA 00 00 00 00 
0872   0EFE 00 00 00 00 
0872   0F02 00 00 00 00 
0872   0F06 00 00 00 00 
0872   0F0A 00 00 00 00 
0872   0F0E 00 00 00 00 
0873   0F12 00 00 00 00 .dw 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 
0873   0F16 01 00 00 00 
0873   0F1A 00 00 00 00 
0873   0F1E 01 00 00 00 
0873   0F22 00 00 00 00 
0873   0F26 00 00 01 00 
0873   0F2A 01 00 00 00 
0873   0F2E 00 00 00 00 
0873   0F32 00 00 00 00 
0873   0F36 00 00 00 00 
0873   0F3A 00 00 00 00 
0873   0F3E 00 00 00 00 
0873   0F42 00 00 01 00 
0873   0F46 01 00 00 00 
0873   0F4A 00 00 00 00 
0874   0F4E 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
0874   0F52 00 00 00 00 
0874   0F56 00 00 00 00 
0874   0F5A 00 00 00 00 
0874   0F5E 00 00 00 00 
0874   0F62 00 00 00 00 
0874   0F66 00 00 00 00 
0874   0F6A 00 00 00 00 
0874   0F6E 00 00 00 00 
0874   0F72 00 00 00 00 
0874   0F76 00 00 00 00 
0874   0F7A 00 00 00 00 
0874   0F7E 01 00 00 00 
0874   0F82 00 00 00 00 
0874   0F86 00 00 00 00 
0875   0F8A 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0875   0F8E 00 00 00 00 
0875   0F92 00 00 00 00 
0875   0F96 00 00 00 00 
0875   0F9A 00 00 00 00 
0875   0F9E 00 00 00 00 
0875   0FA2 00 00 00 00 
0875   0FA6 00 00 00 00 
0875   0FAA 00 00 00 00 
0875   0FAE 00 00 00 00 
0875   0FB2 00 00 00 00 
0875   0FB6 00 00 00 00 
0875   0FBA 00 00 00 00 
0875   0FBE 00 00 00 00 
0875   0FC2 00 00 00 00 
0876   0FC6 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0876   0FCA 00 00 01 00 
0876   0FCE 00 00 00 00 
0876   0FD2 00 00 00 00 
0876   0FD6 00 00 00 00 
0876   0FDA 00 00 00 00 
0876   0FDE 00 00 00 00 
0876   0FE2 00 00 00 00 
0876   0FE6 00 00 00 00 
0876   0FEA 00 00 00 00 
0876   0FEE 00 00 00 00 
0876   0FF2 00 00 00 00 
0876   0FF6 00 00 00 00 
0876   0FFA 00 00 00 00 
0876   0FFE 00 00 00 00 
0877   1002 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0877   1006 00 00 00 00 
0877   100A 00 00 00 00 
0877   100E 00 00 00 00 
0877   1012 00 00 00 00 
0877   1016 00 00 00 00 
0877   101A 01 00 00 00 
0877   101E 00 00 00 00 
0877   1022 00 00 00 00 
0877   1026 00 00 00 00 
0877   102A 00 00 00 00 
0877   102E 00 00 00 00 
0877   1032 00 00 00 00 
0877   1036 00 00 
0878   1038 00 00 00 00 .fill 6, 0
0878   103C 00 00 
0879   103E 36 09       curr_state: .dw curr_state_data
0880   1040 00 00 00 00 next_state_data: .fill 1800, 0
0880   1044 00 00 00 00 
0880   1048 00 00 00 00 
0880   104C 00 00 00 00 
0880   1050 00 00 00 00 
0880   1054 00 00 00 00 
0880   1058 00 00 00 00 
0880   105C 00 00 00 00 
0880   1060 00 00 00 00 
0880   1064 00 00 00 00 
0880   1068 00 00 00 00 
0880   106C 00 00 00 00 
0880   1070 00 00 00 00 
0880   1074 00 00 00 00 
0880   1078 00 00 00 00 
0880   107C 00 00 00 00 
0880   1080 00 00 00 00 
0880   1084 00 00 00 00 
0880   1088 00 00 00 00 
0880   108C 00 00 00 00 
0880   1090 00 00 00 00 
0880   1094 00 00 00 00 
0880   1098 00 00 00 00 
0880   109C 00 00 00 00 
0880   10A0 00 00 00 00 
0880   10A4 00 00 00 00 
0880   10A8 00 00 00 00 
0880   10AC 00 00 00 00 
0880   10B0 00 00 00 00 
0880   10B4 00 00 00 00 
0880   10B8 00 00 00 00 
0880   10BC 00 00 00 00 
0880   10C0 00 00 00 00 
0880   10C4 00 00 00 00 
0880   10C8 00 00 00 00 
0880   10CC 00 00 00 00 
0880   10D0 00 00 00 00 
0880   10D4 00 00 00 00 
0880   10D8 00 00 00 00 
0880   10DC 00 00 00 00 
0880   10E0 00 00 00 00 
0880   10E4 00 00 00 00 
0880   10E8 00 00 00 00 
0880   10EC 00 00 00 00 
0880   10F0 00 00 00 00 
0880   10F4 00 00 00 00 
0880   10F8 00 00 00 00 
0880   10FC 00 00 00 00 
0880   1100 00 00 00 00 
0880   1104 00 00 00 00 
0880   1108 00 00 00 00 
0880   110C 00 00 00 00 
0880   1110 00 00 00 00 
0880   1114 00 00 00 00 
0880   1118 00 00 00 00 
0880   111C 00 00 00 00 
0880   1120 00 00 00 00 
0880   1124 00 00 00 00 
0880   1128 00 00 00 00 
0880   112C 00 00 00 00 
0880   1130 00 00 00 00 
0880   1134 00 00 00 00 
0880   1138 00 00 00 00 
0880   113C 00 00 00 00 
0880   1140 00 00 00 00 
0880   1144 00 00 00 00 
0880   1148 00 00 00 00 
0880   114C 00 00 00 00 
0880   1150 00 00 00 00 
0880   1154 00 00 00 00 
0880   1158 00 00 00 00 
0880   115C 00 00 00 00 
0880   1160 00 00 00 00 
0880   1164 00 00 00 00 
0880   1168 00 00 00 00 
0880   116C 00 00 00 00 
0880   1170 00 00 00 00 
0880   1174 00 00 00 00 
0880   1178 00 00 00 00 
0880   117C 00 00 00 00 
0880   1180 00 00 00 00 
0880   1184 00 00 00 00 
0880   1188 00 00 00 00 
0880   118C 00 00 00 00 
0880   1190 00 00 00 00 
0880   1194 00 00 00 00 
0880   1198 00 00 00 00 
0880   119C 00 00 00 00 
0880   11A0 00 00 00 00 
0880   11A4 00 00 00 00 
0880   11A8 00 00 00 00 
0880   11AC 00 00 00 00 
0880   11B0 00 00 00 00 
0880   11B4 00 00 00 00 
0880   11B8 00 00 00 00 
0880   11BC 00 00 00 00 
0880   11C0 00 00 00 00 
0880   11C4 00 00 00 00 
0880   11C8 00 00 00 00 
0880   11CC 00 00 00 00 
0880   11D0 00 00 00 00 
0880   11D4 00 00 00 00 
0880   11D8 00 00 00 00 
0880   11DC 00 00 00 00 
0880   11E0 00 00 00 00 
0880   11E4 00 00 00 00 
0880   11E8 00 00 00 00 
0880   11EC 00 00 00 00 
0880   11F0 00 00 00 00 
0880   11F4 00 00 00 00 
0880   11F8 00 00 00 00 
0880   11FC 00 00 00 00 
0880   1200 00 00 00 00 
0880   1204 00 00 00 00 
0880   1208 00 00 00 00 
0880   120C 00 00 00 00 
0880   1210 00 00 00 00 
0880   1214 00 00 00 00 
0880   1218 00 00 00 00 
0880   121C 00 00 00 00 
0880   1220 00 00 00 00 
0880   1224 00 00 00 00 
0880   1228 00 00 00 00 
0880   122C 00 00 00 00 
0880   1230 00 00 00 00 
0880   1234 00 00 00 00 
0880   1238 00 00 00 00 
0880   123C 00 00 00 00 
0880   1240 00 00 00 00 
0880   1244 00 00 00 00 
0880   1248 00 00 00 00 
0880   124C 00 00 00 00 
0880   1250 00 00 00 00 
0880   1254 00 00 00 00 
0880   1258 00 00 00 00 
0880   125C 00 00 00 00 
0880   1260 00 00 00 00 
0880   1264 00 00 00 00 
0880   1268 00 00 00 00 
0880   126C 00 00 00 00 
0880   1270 00 00 00 00 
0880   1274 00 00 00 00 
0880   1278 00 00 00 00 
0880   127C 00 00 00 00 
0880   1280 00 00 00 00 
0880   1284 00 00 00 00 
0880   1288 00 00 00 00 
0880   128C 00 00 00 00 
0880   1290 00 00 00 00 
0880   1294 00 00 00 00 
0880   1298 00 00 00 00 
0880   129C 00 00 00 00 
0880   12A0 00 00 00 00 
0880   12A4 00 00 00 00 
0880   12A8 00 00 00 00 
0880   12AC 00 00 00 00 
0880   12B0 00 00 00 00 
0880   12B4 00 00 00 00 
0880   12B8 00 00 00 00 
0880   12BC 00 00 00 00 
0880   12C0 00 00 00 00 
0880   12C4 00 00 00 00 
0880   12C8 00 00 00 00 
0880   12CC 00 00 00 00 
0880   12D0 00 00 00 00 
0880   12D4 00 00 00 00 
0880   12D8 00 00 00 00 
0880   12DC 00 00 00 00 
0880   12E0 00 00 00 00 
0880   12E4 00 00 00 00 
0880   12E8 00 00 00 00 
0880   12EC 00 00 00 00 
0880   12F0 00 00 00 00 
0880   12F4 00 00 00 00 
0880   12F8 00 00 00 00 
0880   12FC 00 00 00 00 
0880   1300 00 00 00 00 
0880   1304 00 00 00 00 
0880   1308 00 00 00 00 
0880   130C 00 00 00 00 
0880   1310 00 00 00 00 
0880   1314 00 00 00 00 
0880   1318 00 00 00 00 
0880   131C 00 00 00 00 
0880   1320 00 00 00 00 
0880   1324 00 00 00 00 
0880   1328 00 00 00 00 
0880   132C 00 00 00 00 
0880   1330 00 00 00 00 
0880   1334 00 00 00 00 
0880   1338 00 00 00 00 
0880   133C 00 00 00 00 
0880   1340 00 00 00 00 
0880   1344 00 00 00 00 
0880   1348 00 00 00 00 
0880   134C 00 00 00 00 
0880   1350 00 00 00 00 
0880   1354 00 00 00 00 
0880   1358 00 00 00 00 
0880   135C 00 00 00 00 
0880   1360 00 00 00 00 
0880   1364 00 00 00 00 
0880   1368 00 00 00 00 
0880   136C 00 00 00 00 
0880   1370 00 00 00 00 
0880   1374 00 00 00 00 
0880   1378 00 00 00 00 
0880   137C 00 00 00 00 
0880   1380 00 00 00 00 
0880   1384 00 00 00 00 
0880   1388 00 00 00 00 
0880   138C 00 00 00 00 
0880   1390 00 00 00 00 
0880   1394 00 00 00 00 
0880   1398 00 00 00 00 
0880   139C 00 00 00 00 
0880   13A0 00 00 00 00 
0880   13A4 00 00 00 00 
0880   13A8 00 00 00 00 
0880   13AC 00 00 00 00 
0880   13B0 00 00 00 00 
0880   13B4 00 00 00 00 
0880   13B8 00 00 00 00 
0880   13BC 00 00 00 00 
0880   13C0 00 00 00 00 
0880   13C4 00 00 00 00 
0880   13C8 00 00 00 00 
0880   13CC 00 00 00 00 
0880   13D0 00 00 00 00 
0880   13D4 00 00 00 00 
0880   13D8 00 00 00 00 
0880   13DC 00 00 00 00 
0880   13E0 00 00 00 00 
0880   13E4 00 00 00 00 
0880   13E8 00 00 00 00 
0880   13EC 00 00 00 00 
0880   13F0 00 00 00 00 
0880   13F4 00 00 00 00 
0880   13F8 00 00 00 00 
0880   13FC 00 00 00 00 
0880   1400 00 00 00 00 
0880   1404 00 00 00 00 
0880   1408 00 00 00 00 
0880   140C 00 00 00 00 
0880   1410 00 00 00 00 
0880   1414 00 00 00 00 
0880   1418 00 00 00 00 
0880   141C 00 00 00 00 
0880   1420 00 00 00 00 
0880   1424 00 00 00 00 
0880   1428 00 00 00 00 
0880   142C 00 00 00 00 
0880   1430 00 00 00 00 
0880   1434 00 00 00 00 
0880   1438 00 00 00 00 
0880   143C 00 00 00 00 
0880   1440 00 00 00 00 
0880   1444 00 00 00 00 
0880   1448 00 00 00 00 
0880   144C 00 00 00 00 
0880   1450 00 00 00 00 
0880   1454 00 00 00 00 
0880   1458 00 00 00 00 
0880   145C 00 00 00 00 
0880   1460 00 00 00 00 
0880   1464 00 00 00 00 
0880   1468 00 00 00 00 
0880   146C 00 00 00 00 
0880   1470 00 00 00 00 
0880   1474 00 00 00 00 
0880   1478 00 00 00 00 
0880   147C 00 00 00 00 
0880   1480 00 00 00 00 
0880   1484 00 00 00 00 
0880   1488 00 00 00 00 
0880   148C 00 00 00 00 
0880   1490 00 00 00 00 
0880   1494 00 00 00 00 
0880   1498 00 00 00 00 
0880   149C 00 00 00 00 
0880   14A0 00 00 00 00 
0880   14A4 00 00 00 00 
0880   14A8 00 00 00 00 
0880   14AC 00 00 00 00 
0880   14B0 00 00 00 00 
0880   14B4 00 00 00 00 
0880   14B8 00 00 00 00 
0880   14BC 00 00 00 00 
0880   14C0 00 00 00 00 
0880   14C4 00 00 00 00 
0880   14C8 00 00 00 00 
0880   14CC 00 00 00 00 
0880   14D0 00 00 00 00 
0880   14D4 00 00 00 00 
0880   14D8 00 00 00 00 
0880   14DC 00 00 00 00 
0880   14E0 00 00 00 00 
0880   14E4 00 00 00 00 
0880   14E8 00 00 00 00 
0880   14EC 00 00 00 00 
0880   14F0 00 00 00 00 
0880   14F4 00 00 00 00 
0880   14F8 00 00 00 00 
0880   14FC 00 00 00 00 
0880   1500 00 00 00 00 
0880   1504 00 00 00 00 
0880   1508 00 00 00 00 
0880   150C 00 00 00 00 
0880   1510 00 00 00 00 
0880   1514 00 00 00 00 
0880   1518 00 00 00 00 
0880   151C 00 00 00 00 
0880   1520 00 00 00 00 
0880   1524 00 00 00 00 
0880   1528 00 00 00 00 
0880   152C 00 00 00 00 
0880   1530 00 00 00 00 
0880   1534 00 00 00 00 
0880   1538 00 00 00 00 
0880   153C 00 00 00 00 
0880   1540 00 00 00 00 
0880   1544 00 00 00 00 
0880   1548 00 00 00 00 
0880   154C 00 00 00 00 
0880   1550 00 00 00 00 
0880   1554 00 00 00 00 
0880   1558 00 00 00 00 
0880   155C 00 00 00 00 
0880   1560 00 00 00 00 
0880   1564 00 00 00 00 
0880   1568 00 00 00 00 
0880   156C 00 00 00 00 
0880   1570 00 00 00 00 
0880   1574 00 00 00 00 
0880   1578 00 00 00 00 
0880   157C 00 00 00 00 
0880   1580 00 00 00 00 
0880   1584 00 00 00 00 
0880   1588 00 00 00 00 
0880   158C 00 00 00 00 
0880   1590 00 00 00 00 
0880   1594 00 00 00 00 
0880   1598 00 00 00 00 
0880   159C 00 00 00 00 
0880   15A0 00 00 00 00 
0880   15A4 00 00 00 00 
0880   15A8 00 00 00 00 
0880   15AC 00 00 00 00 
0880   15B0 00 00 00 00 
0880   15B4 00 00 00 00 
0880   15B8 00 00 00 00 
0880   15BC 00 00 00 00 
0880   15C0 00 00 00 00 
0880   15C4 00 00 00 00 
0880   15C8 00 00 00 00 
0880   15CC 00 00 00 00 
0880   15D0 00 00 00 00 
0880   15D4 00 00 00 00 
0880   15D8 00 00 00 00 
0880   15DC 00 00 00 00 
0880   15E0 00 00 00 00 
0880   15E4 00 00 00 00 
0880   15E8 00 00 00 00 
0880   15EC 00 00 00 00 
0880   15F0 00 00 00 00 
0880   15F4 00 00 00 00 
0880   15F8 00 00 00 00 
0880   15FC 00 00 00 00 
0880   1600 00 00 00 00 
0880   1604 00 00 00 00 
0880   1608 00 00 00 00 
0880   160C 00 00 00 00 
0880   1610 00 00 00 00 
0880   1614 00 00 00 00 
0880   1618 00 00 00 00 
0880   161C 00 00 00 00 
0880   1620 00 00 00 00 
0880   1624 00 00 00 00 
0880   1628 00 00 00 00 
0880   162C 00 00 00 00 
0880   1630 00 00 00 00 
0880   1634 00 00 00 00 
0880   1638 00 00 00 00 
0880   163C 00 00 00 00 
0880   1640 00 00 00 00 
0880   1644 00 00 00 00 
0880   1648 00 00 00 00 
0880   164C 00 00 00 00 
0880   1650 00 00 00 00 
0880   1654 00 00 00 00 
0880   1658 00 00 00 00 
0880   165C 00 00 00 00 
0880   1660 00 00 00 00 
0880   1664 00 00 00 00 
0880   1668 00 00 00 00 
0880   166C 00 00 00 00 
0880   1670 00 00 00 00 
0880   1674 00 00 00 00 
0880   1678 00 00 00 00 
0880   167C 00 00 00 00 
0880   1680 00 00 00 00 
0880   1684 00 00 00 00 
0880   1688 00 00 00 00 
0880   168C 00 00 00 00 
0880   1690 00 00 00 00 
0880   1694 00 00 00 00 
0880   1698 00 00 00 00 
0880   169C 00 00 00 00 
0880   16A0 00 00 00 00 
0880   16A4 00 00 00 00 
0880   16A8 00 00 00 00 
0880   16AC 00 00 00 00 
0880   16B0 00 00 00 00 
0880   16B4 00 00 00 00 
0880   16B8 00 00 00 00 
0880   16BC 00 00 00 00 
0880   16C0 00 00 00 00 
0880   16C4 00 00 00 00 
0880   16C8 00 00 00 00 
0880   16CC 00 00 00 00 
0880   16D0 00 00 00 00 
0880   16D4 00 00 00 00 
0880   16D8 00 00 00 00 
0880   16DC 00 00 00 00 
0880   16E0 00 00 00 00 
0880   16E4 00 00 00 00 
0880   16E8 00 00 00 00 
0880   16EC 00 00 00 00 
0880   16F0 00 00 00 00 
0880   16F4 00 00 00 00 
0880   16F8 00 00 00 00 
0880   16FC 00 00 00 00 
0880   1700 00 00 00 00 
0880   1704 00 00 00 00 
0880   1708 00 00 00 00 
0880   170C 00 00 00 00 
0880   1710 00 00 00 00 
0880   1714 00 00 00 00 
0880   1718 00 00 00 00 
0880   171C 00 00 00 00 
0880   1720 00 00 00 00 
0880   1724 00 00 00 00 
0880   1728 00 00 00 00 
0880   172C 00 00 00 00 
0880   1730 00 00 00 00 
0880   1734 00 00 00 00 
0880   1738 00 00 00 00 
0880   173C 00 00 00 00 
0880   1740 00 00 00 00 
0880   1744 00 00 00 00 
0881   1748 40 10       next_state: .dw next_state_data
0882   174A 47 65 6E 65 _string_0: .db "Generations: ", 0
0882   174E 72 61 74 69 
0882   1752 6F 6E 73 3A 
0882   1756 20 00 
0883   1758 40 20 00    _string_1: .db "@ ", 0
0884   175B 2E 20 00    _string_2: .db ". ", 0
0885   175E 0A 00       _string_3: .db "\n", 0
0886   1760             ; --- END DATA BLOCK
0887   1760             
0888   1760             ; --- BEGIN INCLUDE BLOCK
0889   1760             .include "lib/stdio.asm"
0001+  1760             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1760             ; stdio.s
0003+  1760             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1760             .include "lib/string.asm"
0001++ 1760             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1760             ; string.s
0003++ 1760             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1760             
0005++ 1760             
0006++ 1760             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1760             ; strrev
0008++ 1760             ; reverse a string
0009++ 1760             ; D = string address
0010++ 1760             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1760             ; 01234
0012++ 1760             strrev:
0013++ 1760 4B          	pusha
0014++ 1761 07 A7 17    	call strlen	; length in C
0015++ 1764 12          	mov a, c
0016++ 1765 AF 01 00    	cmp a, 1
0017++ 1768 D0 82 17    	jleu strrev_end	; check string length. string len must be > 1
0018++ 176B 7D          	dec a
0019++ 176C FD 4E       	mov si, d	; beginning of string
0020++ 176E FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1770 59          	add d, a	; end of string
0022++ 1771 12          	mov a, c
0023++ 1772 FD 9B       	shr a		; divide by 2
0024++ 1774 39          	mov c, a	; C now counts the steps
0025++ 1775             strrev_L0:
0026++ 1775 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1776 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1777 3E          	mov [d], al	; store left char into right side
0029++ 1778 1B          	mov al, bl
0030++ 1779 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 177A 7E          	dec c
0032++ 177B 7F          	dec d
0033++ 177C C2 00 00    	cmp c, 0
0034++ 177F C7 75 17    	jne strrev_L0
0035++ 1782             strrev_end:
0036++ 1782 4C          	popa
0037++ 1783 09          	ret
0038++ 1784             	
0039++ 1784             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1784             ; strchr
0041++ 1784             ; search string in D for char in AL
0042++ 1784             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1784             strchr:
0044++ 1784             strchr_L0:
0045++ 1784 32          	mov bl, [d]
0046++ 1785 C1 00       	cmp bl, 0
0047++ 1787 C6 92 17    	je strchr_end
0048++ 178A BA          	cmp al, bl
0049++ 178B C6 92 17    	je strchr_end
0050++ 178E 79          	inc d
0051++ 178F 0A 84 17    	jmp strchr_L0
0052++ 1792             strchr_end:
0053++ 1792 1B          	mov al, bl
0054++ 1793 09          	ret
0055++ 1794             
0056++ 1794             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1794             ; strstr
0058++ 1794             ; find sub-string
0059++ 1794             ; str1 in SI
0060++ 1794             ; str2 in DI
0061++ 1794             ; SI points to end of source string
0062++ 1794             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1794             strstr:
0064++ 1794 DB          	push al
0065++ 1795 DA          	push d
0066++ 1796 E3          	push di
0067++ 1797             strstr_loop:
0068++ 1797 F3          	cmpsb					; compare a byte of the strings
0069++ 1798 C7 A3 17    	jne strstr_ret
0070++ 179B FC 00 00    	lea d, [di + 0]
0071++ 179E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 17A0 C7 97 17    	jne strstr_loop				; equal chars but not at end
0073++ 17A3             strstr_ret:
0074++ 17A3 F0          	pop di
0075++ 17A4 E7          	pop d
0076++ 17A5 E8          	pop al
0077++ 17A6 09          	ret
0078++ 17A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 17A7             ; length of null terminated string
0080++ 17A7             ; result in C
0081++ 17A7             ; pointer in D
0082++ 17A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 17A7             strlen:
0084++ 17A7 DA          	push d
0085++ 17A8 38 00 00    	mov c, 0
0086++ 17AB             strlen_L1:
0087++ 17AB BD 00       	cmp byte [d], 0
0088++ 17AD C6 B5 17    	je strlen_ret
0089++ 17B0 79          	inc d
0090++ 17B1 78          	inc c
0091++ 17B2 0A AB 17    	jmp strlen_L1
0092++ 17B5             strlen_ret:
0093++ 17B5 E7          	pop d
0094++ 17B6 09          	ret
0095++ 17B7             
0096++ 17B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 17B7             ; STRCMP
0098++ 17B7             ; compare two strings
0099++ 17B7             ; str1 in SI
0100++ 17B7             ; str2 in DI
0101++ 17B7             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 17B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 17B7             strcmp:
0104++ 17B7 DB          	push al
0105++ 17B8 DA          	push d
0106++ 17B9 E3          	push di
0107++ 17BA E2          	push si
0108++ 17BB             strcmp_loop:
0109++ 17BB F3          	cmpsb					; compare a byte of the strings
0110++ 17BC C7 C7 17    	jne strcmp_ret
0111++ 17BF FB FF FF    	lea d, [si +- 1]
0112++ 17C2 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 17C4 C7 BB 17    	jne strcmp_loop				; equal chars but not at end
0114++ 17C7             strcmp_ret:
0115++ 17C7 EF          	pop si
0116++ 17C8 F0          	pop di
0117++ 17C9 E7          	pop d
0118++ 17CA E8          	pop al
0119++ 17CB 09          	ret
0120++ 17CC             
0121++ 17CC             
0122++ 17CC             ; STRCPY
0123++ 17CC             ; copy null terminated string from SI to DI
0124++ 17CC             ; source in SI
0125++ 17CC             ; destination in DI
0126++ 17CC             strcpy:
0127++ 17CC E2          	push si
0128++ 17CD E3          	push di
0129++ 17CE DB          	push al
0130++ 17CF             strcpy_L1:
0131++ 17CF F6          	lodsb
0132++ 17D0 F7          	stosb
0133++ 17D1 B9 00       	cmp al, 0
0134++ 17D3 C7 CF 17    	jne strcpy_L1
0135++ 17D6             strcpy_end:
0136++ 17D6 E8          	pop al
0137++ 17D7 F0          	pop di
0138++ 17D8 EF          	pop si
0139++ 17D9 09          	ret
0140++ 17DA             
0141++ 17DA             ; STRCAT
0142++ 17DA             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 17DA             ; source in SI
0144++ 17DA             ; destination in DI
0145++ 17DA             strcat:
0146++ 17DA E2          	push si
0147++ 17DB E3          	push di
0148++ 17DC D7          	push a
0149++ 17DD DA          	push d
0150++ 17DE 50          	mov a, di
0151++ 17DF 3C          	mov d, a
0152++ 17E0             strcat_goto_end_L1:
0153++ 17E0 BD 00       	cmp byte[d], 0
0154++ 17E2 C6 E9 17    	je strcat_start
0155++ 17E5 79          	inc d
0156++ 17E6 0A E0 17    	jmp strcat_goto_end_L1
0157++ 17E9             strcat_start:
0158++ 17E9 FD 50       	mov di, d
0159++ 17EB             strcat_L1:
0160++ 17EB F6          	lodsb
0161++ 17EC F7          	stosb
0162++ 17ED B9 00       	cmp al, 0
0163++ 17EF C7 EB 17    	jne strcat_L1
0164++ 17F2             strcat_end:
0165++ 17F2 E7          	pop d
0166++ 17F3 E4          	pop a
0167++ 17F4 F0          	pop di
0168++ 17F5 EF          	pop si
0169++ 17F6 09          	ret
0005+  17F7             
0006+  17F7 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  17FB 34 35 36 37 
0006+  17FF 38 39 41 42 
0006+  1803 43 44 45 46 
0007+  1807 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  180B 1B 5B 48 00 
0008+  180F             
0009+  180F 01 00       table_power:.dw 1
0010+  1811 0A 00       			.dw 10
0011+  1813 64 00       			.dw 100
0012+  1815 E8 03       			.dw 1000
0013+  1817 10 27       			.dw 10000
0014+  1819             
0015+  1819             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  1819             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  1819             ; ASCII in BL
0018+  1819             ; result in AL
0019+  1819             ; ascii for F = 0100 0110
0020+  1819             ; ascii for 9 = 0011 1001
0021+  1819             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  1819             hex_ascii_encode:
0023+  1819 1B          	mov al, bl
0024+  181A 93 40       	test al, $40				; test if letter or number
0025+  181C C7 22 18    	jnz hex_letter
0026+  181F 87 0F       	and al, $0F				; get number
0027+  1821 09          	ret
0028+  1822             hex_letter:
0029+  1822 87 0F       	and al, $0F				; get letter
0030+  1824 6A 09       	add al, 9
0031+  1826 09          	ret
0032+  1827             
0033+  1827             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  1827             ; ATOI
0035+  1827             ; 2 letter hex string in B
0036+  1827             ; 8bit integer returned in AL
0037+  1827             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  1827             atoi:
0039+  1827 D8          	push b
0040+  1828 07 19 18    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  182B 30          	mov bl, bh
0042+  182C DB          	push al					; save a
0043+  182D 07 19 18    	call hex_ascii_encode
0044+  1830 EA          	pop bl	
0045+  1831 FD 9E 04    	shl al, 4
0046+  1834 8C          	or al, bl
0047+  1835 E5          	pop b
0048+  1836 09          	ret	
0049+  1837             
0050+  1837             
0051+  1837             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  1837             ; printf
0053+  1837             ; no need for explanations!
0054+  1837             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1837             printf:
0056+  1837 09          	ret
0057+  1838             
0058+  1838             
0059+  1838             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  1838             ; scanf
0061+  1838             ; no need for explanations!
0062+  1838             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  1838             scanf:
0064+  1838 09          	ret
0065+  1839             
0066+  1839             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  1839             ; ITOA
0068+  1839             ; 8bit value in BL
0069+  1839             ; 2 byte ASCII result in A
0070+  1839             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  1839             itoa:
0072+  1839 DA          	push d
0073+  183A D8          	push b
0074+  183B A7 00       	mov bh, 0
0075+  183D FD A4 04    	shr bl, 4	
0076+  1840 74          	mov d, b
0077+  1841 1F F7 17    	mov al, [d + s_hex_digits]
0078+  1844 23          	mov ah, al
0079+  1845             	
0080+  1845 E5          	pop b
0081+  1846 D8          	push b
0082+  1847 A7 00       	mov bh, 0
0083+  1849 FD 87 0F    	and bl, $0F
0084+  184C 74          	mov d, b
0085+  184D 1F F7 17    	mov al, [d + s_hex_digits]
0086+  1850 E5          	pop b
0087+  1851 E7          	pop d
0088+  1852 09          	ret
0089+  1853             
0090+  1853             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  1853             ; HEX STRING TO BINARY
0092+  1853             ; di = destination address
0093+  1853             ; si = source
0094+  1853             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  1853             hex_to_int:
0096+  1853             hex_to_int_L1:
0097+  1853 F6          	lodsb					; load from [SI] to AL
0098+  1854 B9 00       	cmp al, 0				; check if ASCII 0
0099+  1856 C6 63 18    	jz hex_to_int_ret
0100+  1859 36          	mov bh, al
0101+  185A F6          	lodsb
0102+  185B 2F          	mov bl, al
0103+  185C 07 27 18    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  185F F7          	stosb					; store AL to [DI]
0105+  1860 0A 53 18    	jmp hex_to_int_L1
0106+  1863             hex_to_int_ret:
0107+  1863 09          	ret		
0108+  1864             
0109+  1864             
0110+  1864             
0111+  1864             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  1864             ; GETCHAR
0113+  1864             ; char in ah
0114+  1864             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  1864             getchar:
0116+  1864 DB          	push al
0117+  1865             getchar_retry:
0118+  1865 FD 0C       	sti
0119+  1867 19 01       	mov al, 1
0120+  1869 05 03       	syscall sys_io			; receive in AH
0121+  186B B9 00       	cmp al, 0			; check if any char was receive
0122+  186D C6 65 18    	je getchar_retry
0123+  1870 E8          	pop al
0124+  1871 09          	ret
0125+  1872             
0126+  1872             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  1872             ; PUTCHAR
0128+  1872             ; char in ah
0129+  1872             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1872             putchar:
0131+  1872 D7          	push a
0132+  1873 19 00       	mov al, 0
0133+  1875 05 03       	syscall sys_io			; char in AH
0134+  1877 E4          	pop a
0135+  1878 09          	ret
0136+  1879             
0137+  1879             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  1879             ;; INPUT A STRING
0139+  1879             ;; terminates with null
0140+  1879             ;; pointer in D
0141+  1879             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  1879             gets:
0143+  1879 D7          	push a
0144+  187A DA          	push d
0145+  187B             gets_loop:
0146+  187B FD 0C       	sti
0147+  187D 19 01       	mov al, 1
0148+  187F 05 03       	syscall sys_io			; receive in AH
0149+  1881 B9 00       	cmp al, 0				; check error code (AL)
0150+  1883 C6 7B 18    	je gets_loop			; if no char received, retry
0151+  1886             
0152+  1886 76 1B       	cmp ah, 27
0153+  1888 C6 A9 18    	je gets_telnet_escape
0154+  188B 76 0A       	cmp ah, $0A				; LF
0155+  188D C6 02 19    	je gets_end
0156+  1890 76 0D       	cmp ah, $0D				; CR
0157+  1892 C6 02 19    	je gets_end
0158+  1895 76 5C       	cmp ah, $5C				; '\\'
0159+  1897 C6 D9 18    	je gets_escape
0160+  189A             	
0161+  189A 76 08       	cmp ah, $08			; check for backspace
0162+  189C C6 A5 18    	je gets_backspace
0163+  189F             
0164+  189F 1A          	mov al, ah
0165+  18A0 3E          	mov [d], al
0166+  18A1 79          	inc d
0167+  18A2 0A 7B 18    	jmp gets_loop
0168+  18A5             gets_backspace:
0169+  18A5 7F          	dec d
0170+  18A6 0A 7B 18    	jmp gets_loop
0171+  18A9             gets_telnet_escape:
0172+  18A9 FD 0C       	sti
0173+  18AB 19 01       	mov al, 1
0174+  18AD 05 03       	syscall sys_io				; receive in AH without echo
0175+  18AF B9 00       	cmp al, 0					; check error code (AL)
0176+  18B1 C6 A9 18    	je gets_telnet_escape		; if no char received, retry
0177+  18B4 76 5B       	cmp ah, '['
0178+  18B6 C7 7B 18    	jne gets_loop
0179+  18B9             gets_telnet_escape_phase2:
0180+  18B9 FD 0C       	sti
0181+  18BB 19 01       	mov al, 1
0182+  18BD 05 03       	syscall sys_io					; receive in AH without echo
0183+  18BF B9 00       	cmp al, 0						; check error code (AL)
0184+  18C1 C6 B9 18    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  18C4 76 44       	cmp ah, 'D'
0186+  18C6 C6 D1 18    	je gets_left_arrow
0187+  18C9 76 43       	cmp ah, 'C'
0188+  18CB C6 D5 18    	je gets_right_arrow
0189+  18CE 0A 7B 18    	jmp gets_loop
0190+  18D1             gets_left_arrow:
0191+  18D1 7F          	dec d
0192+  18D2 0A 7B 18    	jmp gets_loop
0193+  18D5             gets_right_arrow:
0194+  18D5 79          	inc d
0195+  18D6 0A 7B 18    	jmp gets_loop
0196+  18D9             gets_escape:
0197+  18D9 FD 0C       	sti
0198+  18DB 19 01       	mov al, 1
0199+  18DD 05 03       	syscall sys_io			; receive in AH
0200+  18DF B9 00       	cmp al, 0				; check error code (AL)
0201+  18E1 C6 D9 18    	je gets_escape			; if no char received, retry
0202+  18E4 76 6E       	cmp ah, 'n'
0203+  18E6 C6 F4 18    	je gets_LF
0204+  18E9 76 72       	cmp ah, 'r'
0205+  18EB C6 FB 18    	je gets_CR
0206+  18EE 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  18EF 3E          	mov [d], al
0208+  18F0 79          	inc d
0209+  18F1 0A 7B 18    	jmp gets_loop
0210+  18F4             gets_LF:
0211+  18F4 19 0A       	mov al, $0A
0212+  18F6 3E          	mov [d], al
0213+  18F7 79          	inc d
0214+  18F8 0A 7B 18    	jmp gets_loop
0215+  18FB             gets_CR:
0216+  18FB 19 0D       	mov al, $0D
0217+  18FD 3E          	mov [d], al
0218+  18FE 79          	inc d
0219+  18FF 0A 7B 18    	jmp gets_loop
0220+  1902             gets_end:
0221+  1902 19 00       	mov al, 0
0222+  1904 3E          	mov [d], al				; terminate string
0223+  1905 E7          	pop d
0224+  1906 E4          	pop a
0225+  1907 09          	ret
0226+  1908             
0227+  1908             
0228+  1908             
0229+  1908             
0230+  1908             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  1908             ;; INPUT TEXT
0232+  1908             ;; terminated with CTRL+D
0233+  1908             ;; pointer in D
0234+  1908             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  1908             gettxt:
0236+  1908 D7          	push a
0237+  1909 DA          	push d
0238+  190A             gettxt_loop:
0239+  190A 19 01       	mov al, 1
0240+  190C 05 03       	syscall sys_io			; receive in AH
0241+  190E B9 00       	cmp al, 0				; check error code (AL)
0242+  1910 C6 0A 19    	je gettxt_loop		; if no char received, retry
0243+  1913 76 04       	cmp ah, 4			; EOT
0244+  1915 C6 53 19    	je gettxt_end
0245+  1918 76 08       	cmp ah, $08			; check for backspace
0246+  191A C6 4F 19    	je gettxt_backspace
0247+  191D 76 5C       	cmp ah, $5C				; '\\'
0248+  191F C6 28 19    	je gettxt_escape
0249+  1922 1A          	mov al, ah
0250+  1923 3E          	mov [d], al
0251+  1924 79          	inc d
0252+  1925 0A 0A 19    	jmp gettxt_loop
0253+  1928             gettxt_escape:
0254+  1928 19 01       	mov al, 1
0255+  192A 05 03       	syscall sys_io			; receive in AH
0256+  192C B9 00       	cmp al, 0				; check error code (AL)
0257+  192E C6 28 19    	je gettxt_escape		; if no char received, retry
0258+  1931 76 6E       	cmp ah, 'n'
0259+  1933 C6 41 19    	je gettxt_LF
0260+  1936 76 72       	cmp ah, 'r'
0261+  1938 C6 48 19    	je gettxt_CR
0262+  193B 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  193C 3E          	mov [d], al
0264+  193D 79          	inc d
0265+  193E 0A 0A 19    	jmp gettxt_loop
0266+  1941             gettxt_LF:
0267+  1941 19 0A       	mov al, $0A
0268+  1943 3E          	mov [d], al
0269+  1944 79          	inc d
0270+  1945 0A 0A 19    	jmp gettxt_loop
0271+  1948             gettxt_CR:
0272+  1948 19 0D       	mov al, $0D
0273+  194A 3E          	mov [d], al
0274+  194B 79          	inc d
0275+  194C 0A 0A 19    	jmp gettxt_loop
0276+  194F             gettxt_backspace:
0277+  194F 7F          	dec d
0278+  1950 0A 0A 19    	jmp gettxt_loop
0279+  1953             gettxt_end:
0280+  1953 19 00       	mov al, 0
0281+  1955 3E          	mov [d], al				; terminate string
0282+  1956 E7          	pop d
0283+  1957 E4          	pop a
0284+  1958 09          	ret
0285+  1959             
0286+  1959             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  1959             ; PRINT NEW LINE
0288+  1959             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  1959             printnl:
0290+  1959 D7          	push a
0291+  195A 10 00 0A    	mov a, $0A00
0292+  195D 05 03       	syscall sys_io
0293+  195F 10 00 0D    	mov a, $0D00
0294+  1962 05 03       	syscall sys_io
0295+  1964 E4          	pop a
0296+  1965 09          	ret
0297+  1966             
0298+  1966             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  1966             ; strtoint
0300+  1966             ; 4 digit hex string number in d
0301+  1966             ; integer returned in A
0302+  1966             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  1966             strtointx:
0304+  1966 D8          	push b
0305+  1967 32          	mov bl, [d]
0306+  1968 37          	mov bh, bl
0307+  1969 33 01 00    	mov bl, [d + 1]
0308+  196C 07 27 18    	call atoi				; convert to int in AL
0309+  196F 23          	mov ah, al				; move to AH
0310+  1970 33 02 00    	mov bl, [d + 2]
0311+  1973 37          	mov bh, bl
0312+  1974 33 03 00    	mov bl, [d + 3]
0313+  1977 07 27 18    	call atoi				; convert to int in AL
0314+  197A E5          	pop b
0315+  197B 09          	ret
0316+  197C             
0317+  197C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  197C             ; strtoint
0319+  197C             ; 5 digit base10 string number in d
0320+  197C             ; integer returned in A
0321+  197C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  197C             strtoint:
0323+  197C E2          	push si
0324+  197D D8          	push b
0325+  197E D9          	push c
0326+  197F DA          	push d
0327+  1980 07 A7 17    	call strlen			; get string length in C
0328+  1983 7E          	dec c
0329+  1984 FD 4E       	mov si, d
0330+  1986 12          	mov a, c
0331+  1987 FD 99       	shl a
0332+  1989 3B 0F 18    	mov d, table_power
0333+  198C 59          	add d, a
0334+  198D 38 00 00    	mov c, 0
0335+  1990             strtoint_L0:
0336+  1990 F6          	lodsb			; load ASCII to al
0337+  1991 B9 00       	cmp al, 0
0338+  1993 C6 A6 19    	je strtoint_end
0339+  1996 6F 30       	sub al, $30		; make into integer
0340+  1998 22 00       	mov ah, 0
0341+  199A 2A          	mov b, [d]
0342+  199B AC          	mul a, b			; result in B since it fits in 16bits
0343+  199C 11          	mov a, b
0344+  199D 28          	mov b, c
0345+  199E 54          	add a, b
0346+  199F 39          	mov c, a
0347+  19A0 63 02 00    	sub d, 2
0348+  19A3 0A 90 19    	jmp strtoint_L0
0349+  19A6             strtoint_end:
0350+  19A6 12          	mov a, c
0351+  19A7 E7          	pop d
0352+  19A8 E6          	pop c
0353+  19A9 E5          	pop b
0354+  19AA EF          	pop si
0355+  19AB 09          	ret
0356+  19AC             
0357+  19AC             
0358+  19AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  19AC             ; PRINT NULL TERMINATED STRING
0360+  19AC             ; pointer in D
0361+  19AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  19AC             puts:
0363+  19AC D7          	push a
0364+  19AD DA          	push d
0365+  19AE             puts_L1:
0366+  19AE 1E          	mov al, [d]
0367+  19AF B9 00       	cmp al, 0
0368+  19B1 C6 BD 19    	jz puts_END
0369+  19B4 23          	mov ah, al
0370+  19B5 19 00       	mov al, 0
0371+  19B7 05 03       	syscall sys_io
0372+  19B9 79          	inc d
0373+  19BA 0A AE 19    	jmp puts_L1
0374+  19BD             puts_END:
0375+  19BD E7          	pop d
0376+  19BE E4          	pop a
0377+  19BF 09          	ret
0378+  19C0             
0379+  19C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  19C0             ; PRINT N SIZE STRING
0381+  19C0             ; pointer in D
0382+  19C0             ; size in C
0383+  19C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  19C0             putsn:
0385+  19C0 DB          	push al
0386+  19C1 DA          	push d
0387+  19C2 D9          	push c
0388+  19C3             putsn_L0:
0389+  19C3 1E          	mov al, [d]
0390+  19C4 23          	mov ah, al
0391+  19C5 19 00       	mov al, 0
0392+  19C7 05 03       	syscall sys_io
0393+  19C9 79          	inc d
0394+  19CA 7E          	dec c	
0395+  19CB C2 00 00    	cmp c, 0
0396+  19CE C7 C3 19    	jne putsn_L0
0397+  19D1             putsn_end:
0398+  19D1 E6          	pop c
0399+  19D2 E7          	pop d
0400+  19D3 E8          	pop al
0401+  19D4 09          	ret
0402+  19D5             
0403+  19D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  19D5             ; print 16bit decimal number
0405+  19D5             ; input number in A
0406+  19D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  19D5             print_u16d:
0408+  19D5 D7          	push a
0409+  19D6 D8          	push b
0410+  19D7 26 10 27    	mov b, 10000
0411+  19DA AE          	div a, b			; get 10000 coeff.
0412+  19DB 07 01 1A    	call print_number
0413+  19DE 11          	mov a, b
0414+  19DF 26 E8 03    	mov b, 1000
0415+  19E2 AE          	div a, b			; get 10000 coeff.
0416+  19E3 07 01 1A    	call print_number
0417+  19E6 11          	mov a, b
0418+  19E7 26 64 00    	mov b, 100
0419+  19EA AE          	div a, b
0420+  19EB 07 01 1A    	call print_number
0421+  19EE 11          	mov a, b
0422+  19EF 26 0A 00    	mov b, 10
0423+  19F2 AE          	div a, b
0424+  19F3 07 01 1A    	call print_number
0425+  19F6 11          	mov a, b
0426+  19F7 6A 30       	add al, $30
0427+  19F9 23          	mov ah, al
0428+  19FA 19 00       	mov al, 0
0429+  19FC 05 03       	syscall sys_io	; print coeff
0430+  19FE E5          	pop b
0431+  19FF E4          	pop a
0432+  1A00 09          	ret
0433+  1A01             
0434+  1A01             
0435+  1A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  1A01             ; if A == 0, print space
0437+  1A01             ; else print A
0438+  1A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  1A01             print_number:
0440+  1A01 6A 30       	add al, $30
0441+  1A03 23          	mov ah, al
0442+  1A04 07 72 18    	call putchar
0443+  1A07 09          	ret
0444+  1A08             
0445+  1A08             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  1A08             ; PRINT 16BIT HEX INTEGER
0447+  1A08             ; integer value in reg B
0448+  1A08             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  1A08             print_u16x:
0450+  1A08 D7          	push a
0451+  1A09 D8          	push b
0452+  1A0A DD          	push bl
0453+  1A0B 30          	mov bl, bh
0454+  1A0C 07 39 18    	call itoa				; convert bh to char in A
0455+  1A0F 2F          	mov bl, al				; save al
0456+  1A10 19 00       	mov al, 0
0457+  1A12 05 03       	syscall sys_io				; display AH
0458+  1A14 24          	mov ah, bl				; retrieve al
0459+  1A15 19 00       	mov al, 0
0460+  1A17 05 03       	syscall sys_io				; display AL
0461+  1A19             
0462+  1A19 EA          	pop bl
0463+  1A1A 07 39 18    	call itoa				; convert bh to char in A
0464+  1A1D 2F          	mov bl, al				; save al
0465+  1A1E 19 00       	mov al, 0
0466+  1A20 05 03       	syscall sys_io				; display AH
0467+  1A22 24          	mov ah, bl				; retrieve al
0468+  1A23 19 00       	mov al, 0
0469+  1A25 05 03       	syscall sys_io				; display AL
0470+  1A27             
0471+  1A27 E5          	pop b
0472+  1A28 E4          	pop a
0473+  1A29 09          	ret
0474+  1A2A             
0475+  1A2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  1A2A             ; INPUT 16BIT HEX INTEGER
0477+  1A2A             ; read 16bit integer into A
0478+  1A2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  1A2A             scan_u16x:
0480+  1A2A F8 10 00    	enter 16
0481+  1A2D D8          	push b
0482+  1A2E DA          	push d
0483+  1A2F             
0484+  1A2F FA F1 FF    	lea d, [bp + -15]
0485+  1A32 07 79 18    	call gets				; get number
0486+  1A35             
0487+  1A35 32          	mov bl, [d]
0488+  1A36 37          	mov bh, bl
0489+  1A37 33 01 00    	mov bl, [d + 1]
0490+  1A3A 07 27 18    	call atoi				; convert to int in AL
0491+  1A3D 23          	mov ah, al				; move to AH
0492+  1A3E             
0493+  1A3E 33 02 00    	mov bl, [d + 2]
0494+  1A41 37          	mov bh, bl
0495+  1A42 33 03 00    	mov bl, [d + 3]
0496+  1A45 07 27 18    	call atoi				; convert to int in AL
0497+  1A48             
0498+  1A48 E7          	pop d
0499+  1A49 E5          	pop b
0500+  1A4A F9          	leave
0501+  1A4B 09          	ret
0502+  1A4C             
0503+  1A4C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  1A4C             ; PRINT 8bit HEX INTEGER
0505+  1A4C             ; integer value in reg bl
0506+  1A4C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  1A4C             print_u8x:
0508+  1A4C D7          	push a
0509+  1A4D DD          	push bl
0510+  1A4E             
0511+  1A4E 07 39 18    	call itoa				; convert bl to char in A
0512+  1A51 2F          	mov bl, al				; save al
0513+  1A52 19 00       	mov al, 0
0514+  1A54 05 03       	syscall sys_io				; display AH
0515+  1A56 24          	mov ah, bl				; retrieve al
0516+  1A57 19 00       	mov al, 0
0517+  1A59 05 03       	syscall sys_io				; display AL
0518+  1A5B             
0519+  1A5B EA          	pop bl
0520+  1A5C E4          	pop a
0521+  1A5D 09          	ret
0522+  1A5E             
0523+  1A5E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  1A5E             ; print 8bit decimal unsigned number
0525+  1A5E             ; input number in AL
0526+  1A5E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  1A5E             print_u8d:
0528+  1A5E D7          	push a
0529+  1A5F D8          	push b
0530+  1A60             
0531+  1A60 22 00       	mov ah, 0
0532+  1A62 26 64 00    	mov b, 100
0533+  1A65 AE          	div a, b
0534+  1A66 D8          	push b			; save remainder
0535+  1A67 B9 00       	cmp al, 0
0536+  1A69 C6 73 1A    	je skip100
0537+  1A6C 6A 30       	add al, $30
0538+  1A6E 23          	mov ah, al
0539+  1A6F 19 00       	mov al, 0
0540+  1A71 05 03       	syscall sys_io	; print coeff
0541+  1A73             skip100:
0542+  1A73 E4          	pop a
0543+  1A74 22 00       	mov ah, 0
0544+  1A76 26 0A 00    	mov b, 10
0545+  1A79 AE          	div a, b
0546+  1A7A D8          	push b			; save remainder
0547+  1A7B B9 00       	cmp al, 0
0548+  1A7D C6 87 1A    	je skip10
0549+  1A80 6A 30       	add al, $30
0550+  1A82 23          	mov ah, al
0551+  1A83 19 00       	mov al, 0
0552+  1A85 05 03       	syscall sys_io	; print coeff
0553+  1A87             skip10:
0554+  1A87 E4          	pop a
0555+  1A88 1B          	mov al, bl
0556+  1A89 6A 30       	add al, $30
0557+  1A8B 23          	mov ah, al
0558+  1A8C 19 00       	mov al, 0
0559+  1A8E 05 03       	syscall sys_io	; print coeff
0560+  1A90 E5          	pop b
0561+  1A91 E4          	pop a
0562+  1A92 09          	ret
0563+  1A93             
0564+  1A93             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  1A93             ; INPUT 8BIT HEX INTEGER
0566+  1A93             ; read 8bit integer into AL
0567+  1A93             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  1A93             scan_u8x:
0569+  1A93 F8 04 00    	enter 4
0570+  1A96 D8          	push b
0571+  1A97 DA          	push d
0572+  1A98             
0573+  1A98 FA FD FF    	lea d, [bp + -3]
0574+  1A9B 07 79 18    	call gets				; get number
0575+  1A9E             
0576+  1A9E 32          	mov bl, [d]
0577+  1A9F 37          	mov bh, bl
0578+  1AA0 33 01 00    	mov bl, [d + 1]
0579+  1AA3 07 27 18    	call atoi				; convert to int in AL
0580+  1AA6             
0581+  1AA6 E7          	pop d
0582+  1AA7 E5          	pop b
0583+  1AA8 F9          	leave
0584+  1AA9 09          	ret
0585+  1AAA             
0586+  1AAA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  1AAA             ; input decimal number
0588+  1AAA             ; result in A
0589+  1AAA             ; 655'\0'
0590+  1AAA             ; low--------high
0591+  1AAA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  1AAA             scan_u16d:
0593+  1AAA F8 08 00    	enter 8
0594+  1AAD E2          	push si
0595+  1AAE D8          	push b
0596+  1AAF D9          	push c
0597+  1AB0 DA          	push d
0598+  1AB1 FA F9 FF    	lea d, [bp +- 7]
0599+  1AB4 07 79 18    	call gets
0600+  1AB7 07 A7 17    	call strlen			; get string length in C
0601+  1ABA 7E          	dec c
0602+  1ABB FD 4E       	mov si, d
0603+  1ABD 12          	mov a, c
0604+  1ABE FD 99       	shl a
0605+  1AC0 3B 0F 18    	mov d, table_power
0606+  1AC3 59          	add d, a
0607+  1AC4 38 00 00    	mov c, 0
0608+  1AC7             mul_loop:
0609+  1AC7 F6          	lodsb			; load ASCII to al
0610+  1AC8 B9 00       	cmp al, 0
0611+  1ACA C6 DD 1A    	je mul_exit
0612+  1ACD 6F 30       	sub al, $30		; make into integer
0613+  1ACF 22 00       	mov ah, 0
0614+  1AD1 2A          	mov b, [d]
0615+  1AD2 AC          	mul a, b			; result in B since it fits in 16bits
0616+  1AD3 11          	mov a, b
0617+  1AD4 28          	mov b, c
0618+  1AD5 54          	add a, b
0619+  1AD6 39          	mov c, a
0620+  1AD7 63 02 00    	sub d, 2
0621+  1ADA 0A C7 1A    	jmp mul_loop
0622+  1ADD             mul_exit:
0623+  1ADD 12          	mov a, c
0624+  1ADE E7          	pop d
0625+  1ADF E6          	pop c
0626+  1AE0 E5          	pop b
0627+  1AE1 EF          	pop si
0628+  1AE2 F9          	leave
0629+  1AE3 09          	ret
0890   1AE4             ; --- END INCLUDE BLOCK
0891   1AE4             
0892   1AE4             
0893   1AE4             .end
tasm: Number of errors = 0
