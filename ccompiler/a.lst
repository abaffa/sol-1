0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 26 FE FF      mov b, -2
0011   0405 D7            push a
0012   0406 11            mov a, b
0013   0407 26 FF FF      mov b, -1
0014   040A B0            cmp a, b
0015   040B 0E            lodflgs
0016   040C 2F            mov bl, al
0017   040D FD A2 03      shr al, 3
0018   0410 FD A4 02      shr bl, 2
0019   0413 FD 87 01      and bl, %00000001
0020   0416 90            xor al, bl
0021   0417 22 00         mov ah, 0
0022   0419 27            mov b, a
0023   041A E4            pop a
0024   041B FD AB         swp b
0025   041D D8            push b
0026   041E 07 2A 04      call print_num
0027   0421 51 02 00      add sp, 2
0028   0424 26 00 00      mov b, 0
0029   0427 F9            leave
0030   0428 05 0B         syscall sys_terminate_proc
0031   042A             
0032   042A             print_num:
0033   042A D2            push bp
0034   042B 9B            mov bp, sp
0035   042C 52 05 00      sub sp, 5 ; digits
0036   042F 52 02 00      sub sp, 2 ; i
0037   0432 26 00 00      mov b, 0
0038   0435 D7            push a
0039   0436 11            mov a, b
0040   0437 45 FA FF      mov [bp + -6], a ; i
0041   043A E4            pop a
0042   043B             _if1_cond:
0043   043B 2C 05 00      mov b, [bp + 5] ; num
0044   043E D7            push a
0045   043F 11            mov a, b
0046   0440 26 00 00      mov b, 0
0047   0443 B0            cmp a, b
0048   0444 0E            lodflgs
0049   0445 87 01         and al, %00000001 ; ==
0050   0447 22 00         mov ah, 0
0051   0449 27            mov b, a
0052   044A E4            pop a
0053   044B C0 00 00      cmp b, 0
0054   044E C6 60 04      je _if1_exit
0055   0451             _if1_true:
0056   0451 26 30 00      mov b, '0'
0057   0454 DD            push bl
0058   0455 07 C5 05      call _putchar
0059   0458 51 01 00      add sp, 1
0060   045B F9            leave
0061   045C 09            ret
0062   045D 0A 60 04      jmp _if1_exit
0063   0460             _if1_exit:
0064   0460             _while2_cond:
0065   0460 2C 05 00      mov b, [bp + 5] ; num
0066   0463 D7            push a
0067   0464 11            mov a, b
0068   0465 26 00 00      mov b, 0
0069   0468 B0            cmp a, b
0070   0469 0E            lodflgs
0071   046A 87 03         and al, %00000011
0072   046C B9 00         cmp al, 0
0073   046E 0E            lodflgs
0074   046F 22 00         mov ah, 0
0075   0471 27            mov b, a
0076   0472 E4            pop a
0077   0473 C0 00 00      cmp b, 0
0078   0476 C6 C7 04      je _while2_exit
0079   0479             _while2_block:
0080   0479 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0081   047C 2D            mov b, d
0082   047D D7            push a
0083   047E 74            mov d, b
0084   047F DA            push d
0085   0480 2C FA FF      mov b, [bp + -6] ; i
0086   0483 E7            pop d
0087   0484 10 01 00      mov a, 1
0088   0487 AC            mul a, b
0089   0488 5A            add d, b
0090   0489 E4            pop a
0091   048A DA            push d
0092   048B 26 30 00      mov b, '0'
0093   048E D7            push a
0094   048F 11            mov a, b
0095   0490 2C 05 00      mov b, [bp + 5] ; num
0096   0493 D7            push a
0097   0494 11            mov a, b
0098   0495 26 0A 00      mov b, 10
0099   0498 AE            div a, b
0100   0499 E4            pop a
0101   049A 54            add a, b
0102   049B 27            mov b, a
0103   049C E4            pop a
0104   049D E7            pop d
0105   049E FD 3E         mov [d], bl
0106   04A0 2C 05 00      mov b, [bp + 5] ; num
0107   04A3 D7            push a
0108   04A4 11            mov a, b
0109   04A5 26 0A 00      mov b, 10
0110   04A8 AE            div a, b
0111   04A9 FD 78         mov g, a
0112   04AB 11            mov a, b
0113   04AC FD 27         mov b, g
0114   04AE E4            pop a
0115   04AF D7            push a
0116   04B0 11            mov a, b
0117   04B1 45 05 00      mov [bp + 5], a ; num
0118   04B4 E4            pop a
0119   04B5 2C FA FF      mov b, [bp + -6] ; i
0120   04B8 D7            push a
0121   04B9 11            mov a, b
0122   04BA FD 77         inc b
0123   04BC D7            push a
0124   04BD 11            mov a, b
0125   04BE 45 FA FF      mov [bp + -6], a ; i
0126   04C1 E4            pop a
0127   04C2 27            mov b, a
0128   04C3 E4            pop a
0129   04C4 0A 60 04      jmp _while2_cond
0130   04C7             _while2_exit:
0131   04C7             _while3_cond:
0132   04C7 2C FA FF      mov b, [bp + -6] ; i
0133   04CA D7            push a
0134   04CB 11            mov a, b
0135   04CC 26 00 00      mov b, 0
0136   04CF B0            cmp a, b
0137   04D0 0E            lodflgs
0138   04D1 87 03         and al, %00000011
0139   04D3 B9 00         cmp al, 0
0140   04D5 0E            lodflgs
0141   04D6 22 00         mov ah, 0
0142   04D8 27            mov b, a
0143   04D9 E4            pop a
0144   04DA C0 00 00      cmp b, 0
0145   04DD C6 0D 05      je _while3_exit
0146   04E0             _while3_block:
0147   04E0 2C FA FF      mov b, [bp + -6] ; i
0148   04E3 D7            push a
0149   04E4 11            mov a, b
0150   04E5 FD 7D         dec b
0151   04E7 D7            push a
0152   04E8 11            mov a, b
0153   04E9 45 FA FF      mov [bp + -6], a ; i
0154   04EC E4            pop a
0155   04ED 27            mov b, a
0156   04EE E4            pop a
0157   04EF FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0158   04F2 2D            mov b, d
0159   04F3 D7            push a
0160   04F4 74            mov d, b
0161   04F5 DA            push d
0162   04F6 2C FA FF      mov b, [bp + -6] ; i
0163   04F9 E7            pop d
0164   04FA 10 01 00      mov a, 1
0165   04FD AC            mul a, b
0166   04FE 5A            add d, b
0167   04FF E4            pop a
0168   0500 32            mov bl, [d]
0169   0501 A7 00         mov bh, 0
0170   0503 DD            push bl
0171   0504 07 C5 05      call _putchar
0172   0507 51 01 00      add sp, 1
0173   050A 0A C7 04      jmp _while3_cond
0174   050D             _while3_exit:
0175   050D F9            leave
0176   050E 09            ret
0177   050F             
0178   050F             integer_square_root:
0179   050F D2            push bp
0180   0510 9B            mov bp, sp
0181   0511             _if4_cond:
0182   0511 2C 05 00      mov b, [bp + 5] ; n
0183   0514 D7            push a
0184   0515 11            mov a, b
0185   0516 26 01 00      mov b, 1
0186   0519 B0            cmp a, b
0187   051A 0E            lodflgs
0188   051B 87 03         and al, %00000011 ; <=
0189   051D B9 00         cmp al, 0
0190   051F 0E            lodflgs
0191   0520 8F 01         xor al, %00000001
0192   0522 22 00         mov ah, 0
0193   0524 27            mov b, a
0194   0525 E4            pop a
0195   0526 C0 00 00      cmp b, 0
0196   0529 C6 34 05      je _if4_exit
0197   052C             _if4_true:
0198   052C 2C 05 00      mov b, [bp + 5] ; n
0199   052F F9            leave
0200   0530 09            ret
0201   0531 0A 34 05      jmp _if4_exit
0202   0534             _if4_exit:
0203   0534 52 02 00      sub sp, 2 ; x
0204   0537 52 02 00      sub sp, 2 ; y
0205   053A 2C 05 00      mov b, [bp + 5] ; n
0206   053D D7            push a
0207   053E 11            mov a, b
0208   053F 45 FF FF      mov [bp + -1], a ; x
0209   0542 E4            pop a
0210   0543 2C FF FF      mov b, [bp + -1] ; x
0211   0546 D7            push a
0212   0547 11            mov a, b
0213   0548 2C 05 00      mov b, [bp + 5] ; n
0214   054B D7            push a
0215   054C 11            mov a, b
0216   054D 2C FF FF      mov b, [bp + -1] ; x
0217   0550 AE            div a, b
0218   0551 FD 78         mov g, a
0219   0553 11            mov a, b
0220   0554 FD 27         mov b, g
0221   0556 E4            pop a
0222   0557 54            add a, b
0223   0558 27            mov b, a
0224   0559 E4            pop a
0225   055A D7            push a
0226   055B 11            mov a, b
0227   055C 26 02 00      mov b, 2
0228   055F AE            div a, b
0229   0560 FD 78         mov g, a
0230   0562 11            mov a, b
0231   0563 FD 27         mov b, g
0232   0565 E4            pop a
0233   0566 D7            push a
0234   0567 11            mov a, b
0235   0568 45 FD FF      mov [bp + -3], a ; y
0236   056B E4            pop a
0237   056C             _while5_cond:
0238   056C 2C FD FF      mov b, [bp + -3] ; y
0239   056F D7            push a
0240   0570 11            mov a, b
0241   0571 2C FF FF      mov b, [bp + -1] ; x
0242   0574 B0            cmp a, b
0243   0575 0E            lodflgs
0244   0576 2F            mov bl, al
0245   0577 FD A2 03      shr al, 3
0246   057A FD A4 02      shr bl, 2
0247   057D FD 87 01      and bl, %00000001
0248   0580 90            xor al, bl
0249   0581 22 00         mov ah, 0
0250   0583 27            mov b, a
0251   0584 E4            pop a
0252   0585 C0 00 00      cmp b, 0
0253   0588 C6 C0 05      je _while5_exit
0254   058B             _while5_block:
0255   058B 2C FD FF      mov b, [bp + -3] ; y
0256   058E D7            push a
0257   058F 11            mov a, b
0258   0590 45 FF FF      mov [bp + -1], a ; x
0259   0593 E4            pop a
0260   0594 2C FF FF      mov b, [bp + -1] ; x
0261   0597 D7            push a
0262   0598 11            mov a, b
0263   0599 2C 05 00      mov b, [bp + 5] ; n
0264   059C D7            push a
0265   059D 11            mov a, b
0266   059E 2C FF FF      mov b, [bp + -1] ; x
0267   05A1 AE            div a, b
0268   05A2 FD 78         mov g, a
0269   05A4 11            mov a, b
0270   05A5 FD 27         mov b, g
0271   05A7 E4            pop a
0272   05A8 54            add a, b
0273   05A9 27            mov b, a
0274   05AA E4            pop a
0275   05AB D7            push a
0276   05AC 11            mov a, b
0277   05AD 26 02 00      mov b, 2
0278   05B0 AE            div a, b
0279   05B1 FD 78         mov g, a
0280   05B3 11            mov a, b
0281   05B4 FD 27         mov b, g
0282   05B6 E4            pop a
0283   05B7 D7            push a
0284   05B8 11            mov a, b
0285   05B9 45 FD FF      mov [bp + -3], a ; y
0286   05BC E4            pop a
0287   05BD 0A 6C 05      jmp _while5_cond
0288   05C0             _while5_exit:
0289   05C0 2C FF FF      mov b, [bp + -1] ; x
0290   05C3 F9            leave
0291   05C4 09            ret
0292   05C5             
0293   05C5             _putchar:
0294   05C5 D2            push bp
0295   05C6 9B            mov bp, sp
0296   05C7             
0297   05C7             ; --- BEGIN INLINE ASM BLOCK
0298   05C7 20 05 00      mov al, [bp + 5]
0299   05CA 23            mov ah, al
0300   05CB 07 07 07      call putchar
0301   05CE             ; --- END INLINE ASM BLOCK
0302   05CE             
0303   05CE F9            leave
0304   05CF 09            ret
0305   05D0             
0306   05D0             scann:
0307   05D0 D2            push bp
0308   05D1 9B            mov bp, sp
0309   05D2 52 02 00      sub sp, 2 ; m
0310   05D5             
0311   05D5             ; --- BEGIN INLINE ASM BLOCK
0312   05D5 07 3F 09      call scan_u16d
0313   05D8 45 FF FF      mov [bp + -1], a
0314   05DB             ; --- END INLINE ASM BLOCK
0315   05DB             
0316   05DB FA 05 00      lea d, [bp + 5] ; n
0317   05DE 2A            mov b, [d]
0318   05DF D8            push b
0319   05E0 2C FF FF      mov b, [bp + -1] ; m
0320   05E3 E7            pop d
0321   05E4 D7            push a
0322   05E5 11            mov a, b
0323   05E6 43            mov [d], a
0324   05E7 E4            pop a
0325   05E8 F9            leave
0326   05E9 09            ret
0327   05EA             
0328   05EA             print:
0329   05EA D2            push bp
0330   05EB 9B            mov bp, sp
0331   05EC             
0332   05EC             ; --- BEGIN INLINE ASM BLOCK
0333   05EC 17 05 00      mov a, [bp + 5]
0334   05EF 3C            mov d, a
0335   05F0 07 41 08      call puts
0336   05F3             ; --- END INLINE ASM BLOCK
0337   05F3             
0338   05F3 F9            leave
0339   05F4 09            ret
0340   05F5             ; --- END TEXT BLOCK
0341   05F5             
0342   05F5             ; --- BEGIN DATA BLOCK
0343   05F5             ; --- END DATA BLOCK
0344   05F5             
0345   05F5             ; --- BEGIN INCLUDE BLOCK
0346   05F5             .include "lib/stdio.asm"
0001+  05F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  05F5             ; stdio.s
0003+  05F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  05F5             .include "lib/string.asm"
0001++ 05F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 05F5             ; string.s
0003++ 05F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 05F5             
0005++ 05F5             
0006++ 05F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 05F5             ; strrev
0008++ 05F5             ; reverse a string
0009++ 05F5             ; D = string address
0010++ 05F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 05F5             ; 01234
0012++ 05F5             strrev:
0013++ 05F5 4B          	pusha
0014++ 05F6 07 3C 06    	call strlen	; length in C
0015++ 05F9 12          	mov a, c
0016++ 05FA AF 01 00    	cmp a, 1
0017++ 05FD D0 17 06    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0600 7D          	dec a
0019++ 0601 FD 4E       	mov si, d	; beginning of string
0020++ 0603 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0605 59          	add d, a	; end of string
0022++ 0606 12          	mov a, c
0023++ 0607 FD 9B       	shr a		; divide by 2
0024++ 0609 39          	mov c, a	; C now counts the steps
0025++ 060A             strrev_L0:
0026++ 060A 32          	mov bl, [d]	; save load right-side char into BL
0027++ 060B F6          	lodsb		; load left-side char into AL; increase SI
0028++ 060C 3E          	mov [d], al	; store left char into right side
0029++ 060D 1B          	mov al, bl
0030++ 060E F7          	stosb		; store right-side char into left-side; increase DI
0031++ 060F 7E          	dec c
0032++ 0610 7F          	dec d
0033++ 0611 C2 00 00    	cmp c, 0
0034++ 0614 C7 0A 06    	jne strrev_L0
0035++ 0617             strrev_end:
0036++ 0617 4C          	popa
0037++ 0618 09          	ret
0038++ 0619             	
0039++ 0619             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0619             ; strchr
0041++ 0619             ; search string in D for char in AL
0042++ 0619             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0619             strchr:
0044++ 0619             strchr_L0:
0045++ 0619 32          	mov bl, [d]
0046++ 061A C1 00       	cmp bl, 0
0047++ 061C C6 27 06    	je strchr_end
0048++ 061F BA          	cmp al, bl
0049++ 0620 C6 27 06    	je strchr_end
0050++ 0623 79          	inc d
0051++ 0624 0A 19 06    	jmp strchr_L0
0052++ 0627             strchr_end:
0053++ 0627 1B          	mov al, bl
0054++ 0628 09          	ret
0055++ 0629             
0056++ 0629             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0629             ; strstr
0058++ 0629             ; find sub-string
0059++ 0629             ; str1 in SI
0060++ 0629             ; str2 in DI
0061++ 0629             ; SI points to end of source string
0062++ 0629             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0629             strstr:
0064++ 0629 DB          	push al
0065++ 062A DA          	push d
0066++ 062B E3          	push di
0067++ 062C             strstr_loop:
0068++ 062C F3          	cmpsb					; compare a byte of the strings
0069++ 062D C7 38 06    	jne strstr_ret
0070++ 0630 FC 00 00    	lea d, [di + 0]
0071++ 0633 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0635 C7 2C 06    	jne strstr_loop				; equal chars but not at end
0073++ 0638             strstr_ret:
0074++ 0638 F0          	pop di
0075++ 0639 E7          	pop d
0076++ 063A E8          	pop al
0077++ 063B 09          	ret
0078++ 063C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 063C             ; length of null terminated string
0080++ 063C             ; result in C
0081++ 063C             ; pointer in D
0082++ 063C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 063C             strlen:
0084++ 063C DA          	push d
0085++ 063D 38 00 00    	mov c, 0
0086++ 0640             strlen_L1:
0087++ 0640 BD 00       	cmp byte [d], 0
0088++ 0642 C6 4A 06    	je strlen_ret
0089++ 0645 79          	inc d
0090++ 0646 78          	inc c
0091++ 0647 0A 40 06    	jmp strlen_L1
0092++ 064A             strlen_ret:
0093++ 064A E7          	pop d
0094++ 064B 09          	ret
0095++ 064C             
0096++ 064C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 064C             ; STRCMP
0098++ 064C             ; compare two strings
0099++ 064C             ; str1 in SI
0100++ 064C             ; str2 in DI
0101++ 064C             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 064C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 064C             strcmp:
0104++ 064C DB          	push al
0105++ 064D DA          	push d
0106++ 064E E3          	push di
0107++ 064F E2          	push si
0108++ 0650             strcmp_loop:
0109++ 0650 F3          	cmpsb					; compare a byte of the strings
0110++ 0651 C7 5C 06    	jne strcmp_ret
0111++ 0654 FB FF FF    	lea d, [si +- 1]
0112++ 0657 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0659 C7 50 06    	jne strcmp_loop				; equal chars but not at end
0114++ 065C             strcmp_ret:
0115++ 065C EF          	pop si
0116++ 065D F0          	pop di
0117++ 065E E7          	pop d
0118++ 065F E8          	pop al
0119++ 0660 09          	ret
0120++ 0661             
0121++ 0661             
0122++ 0661             ; STRCPY
0123++ 0661             ; copy null terminated string from SI to DI
0124++ 0661             ; source in SI
0125++ 0661             ; destination in DI
0126++ 0661             strcpy:
0127++ 0661 E2          	push si
0128++ 0662 E3          	push di
0129++ 0663 DB          	push al
0130++ 0664             strcpy_L1:
0131++ 0664 F6          	lodsb
0132++ 0665 F7          	stosb
0133++ 0666 B9 00       	cmp al, 0
0134++ 0668 C7 64 06    	jne strcpy_L1
0135++ 066B             strcpy_end:
0136++ 066B E8          	pop al
0137++ 066C F0          	pop di
0138++ 066D EF          	pop si
0139++ 066E 09          	ret
0140++ 066F             
0141++ 066F             ; STRCAT
0142++ 066F             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 066F             ; source in SI
0144++ 066F             ; destination in DI
0145++ 066F             strcat:
0146++ 066F E2          	push si
0147++ 0670 E3          	push di
0148++ 0671 D7          	push a
0149++ 0672 DA          	push d
0150++ 0673 50          	mov a, di
0151++ 0674 3C          	mov d, a
0152++ 0675             strcat_goto_end_L1:
0153++ 0675 BD 00       	cmp byte[d], 0
0154++ 0677 C6 7E 06    	je strcat_start
0155++ 067A 79          	inc d
0156++ 067B 0A 75 06    	jmp strcat_goto_end_L1
0157++ 067E             strcat_start:
0158++ 067E FD 50       	mov di, d
0159++ 0680             strcat_L1:
0160++ 0680 F6          	lodsb
0161++ 0681 F7          	stosb
0162++ 0682 B9 00       	cmp al, 0
0163++ 0684 C7 80 06    	jne strcat_L1
0164++ 0687             strcat_end:
0165++ 0687 E7          	pop d
0166++ 0688 E4          	pop a
0167++ 0689 F0          	pop di
0168++ 068A EF          	pop si
0169++ 068B 09          	ret
0005+  068C             
0006+  068C 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0690 34 35 36 37 
0006+  0694 38 39 41 42 
0006+  0698 43 44 45 46 
0007+  069C 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  06A0 1B 5B 48 00 
0008+  06A4             
0009+  06A4 01 00       table_power:.dw 1
0010+  06A6 0A 00       			.dw 10
0011+  06A8 64 00       			.dw 100
0012+  06AA E8 03       			.dw 1000
0013+  06AC 10 27       			.dw 10000
0014+  06AE             
0015+  06AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  06AE             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  06AE             ; ASCII in BL
0018+  06AE             ; result in AL
0019+  06AE             ; ascii for F = 0100 0110
0020+  06AE             ; ascii for 9 = 0011 1001
0021+  06AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  06AE             hex_ascii_encode:
0023+  06AE 1B          	mov al, bl
0024+  06AF 93 40       	test al, $40				; test if letter or number
0025+  06B1 C7 B7 06    	jnz hex_letter
0026+  06B4 87 0F       	and al, $0F				; get number
0027+  06B6 09          	ret
0028+  06B7             hex_letter:
0029+  06B7 87 0F       	and al, $0F				; get letter
0030+  06B9 6A 09       	add al, 9
0031+  06BB 09          	ret
0032+  06BC             
0033+  06BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  06BC             ; ATOI
0035+  06BC             ; 2 letter hex string in B
0036+  06BC             ; 8bit integer returned in AL
0037+  06BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  06BC             atoi:
0039+  06BC D8          	push b
0040+  06BD 07 AE 06    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  06C0 30          	mov bl, bh
0042+  06C1 DB          	push al					; save a
0043+  06C2 07 AE 06    	call hex_ascii_encode
0044+  06C5 EA          	pop bl	
0045+  06C6 FD 9E 04    	shl al, 4
0046+  06C9 8C          	or al, bl
0047+  06CA E5          	pop b
0048+  06CB 09          	ret	
0049+  06CC             
0050+  06CC             
0051+  06CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  06CC             ; printf
0053+  06CC             ; no need for explanations!
0054+  06CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  06CC             printf:
0056+  06CC 09          	ret
0057+  06CD             
0058+  06CD             
0059+  06CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  06CD             ; scanf
0061+  06CD             ; no need for explanations!
0062+  06CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  06CD             scanf:
0064+  06CD 09          	ret
0065+  06CE             
0066+  06CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  06CE             ; ITOA
0068+  06CE             ; 8bit value in BL
0069+  06CE             ; 2 byte ASCII result in A
0070+  06CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  06CE             itoa:
0072+  06CE DA          	push d
0073+  06CF D8          	push b
0074+  06D0 A7 00       	mov bh, 0
0075+  06D2 FD A4 04    	shr bl, 4	
0076+  06D5 74          	mov d, b
0077+  06D6 1F 8C 06    	mov al, [d + s_hex_digits]
0078+  06D9 23          	mov ah, al
0079+  06DA             	
0080+  06DA E5          	pop b
0081+  06DB D8          	push b
0082+  06DC A7 00       	mov bh, 0
0083+  06DE FD 87 0F    	and bl, $0F
0084+  06E1 74          	mov d, b
0085+  06E2 1F 8C 06    	mov al, [d + s_hex_digits]
0086+  06E5 E5          	pop b
0087+  06E6 E7          	pop d
0088+  06E7 09          	ret
0089+  06E8             
0090+  06E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  06E8             ; HEX STRING TO BINARY
0092+  06E8             ; di = destination address
0093+  06E8             ; si = source
0094+  06E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  06E8             hex_to_int:
0096+  06E8             hex_to_int_L1:
0097+  06E8 F6          	lodsb					; load from [SI] to AL
0098+  06E9 B9 00       	cmp al, 0				; check if ASCII 0
0099+  06EB C6 F8 06    	jz hex_to_int_ret
0100+  06EE 36          	mov bh, al
0101+  06EF F6          	lodsb
0102+  06F0 2F          	mov bl, al
0103+  06F1 07 BC 06    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  06F4 F7          	stosb					; store AL to [DI]
0105+  06F5 0A E8 06    	jmp hex_to_int_L1
0106+  06F8             hex_to_int_ret:
0107+  06F8 09          	ret		
0108+  06F9             
0109+  06F9             
0110+  06F9             
0111+  06F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  06F9             ; GETCHAR
0113+  06F9             ; char in ah
0114+  06F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  06F9             getchar:
0116+  06F9 DB          	push al
0117+  06FA             getchar_retry:
0118+  06FA FD 0C       	sti
0119+  06FC 19 01       	mov al, 1
0120+  06FE 05 03       	syscall sys_io			; receive in AH
0121+  0700 B9 00       	cmp al, 0			; check if any char was receive
0122+  0702 C6 FA 06    	je getchar_retry
0123+  0705 E8          	pop al
0124+  0706 09          	ret
0125+  0707             
0126+  0707             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0707             ; PUTCHAR
0128+  0707             ; char in ah
0129+  0707             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0707             putchar:
0131+  0707 D7          	push a
0132+  0708 19 00       	mov al, 0
0133+  070A 05 03       	syscall sys_io			; char in AH
0134+  070C E4          	pop a
0135+  070D 09          	ret
0136+  070E             
0137+  070E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  070E             ;; INPUT A STRING
0139+  070E             ;; terminates with null
0140+  070E             ;; pointer in D
0141+  070E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  070E             gets:
0143+  070E D7          	push a
0144+  070F DA          	push d
0145+  0710             gets_loop:
0146+  0710 FD 0C       	sti
0147+  0712 19 01       	mov al, 1
0148+  0714 05 03       	syscall sys_io			; receive in AH
0149+  0716 B9 00       	cmp al, 0				; check error code (AL)
0150+  0718 C6 10 07    	je gets_loop			; if no char received, retry
0151+  071B             
0152+  071B 76 1B       	cmp ah, 27
0153+  071D C6 3E 07    	je gets_telnet_escape
0154+  0720 76 0A       	cmp ah, $0A				; LF
0155+  0722 C6 97 07    	je gets_end
0156+  0725 76 0D       	cmp ah, $0D				; CR
0157+  0727 C6 97 07    	je gets_end
0158+  072A 76 5C       	cmp ah, $5C				; '\\'
0159+  072C C6 6E 07    	je gets_escape
0160+  072F             	
0161+  072F 76 08       	cmp ah, $08			; check for backspace
0162+  0731 C6 3A 07    	je gets_backspace
0163+  0734             
0164+  0734 1A          	mov al, ah
0165+  0735 3E          	mov [d], al
0166+  0736 79          	inc d
0167+  0737 0A 10 07    	jmp gets_loop
0168+  073A             gets_backspace:
0169+  073A 7F          	dec d
0170+  073B 0A 10 07    	jmp gets_loop
0171+  073E             gets_telnet_escape:
0172+  073E FD 0C       	sti
0173+  0740 19 01       	mov al, 1
0174+  0742 05 03       	syscall sys_io				; receive in AH without echo
0175+  0744 B9 00       	cmp al, 0					; check error code (AL)
0176+  0746 C6 3E 07    	je gets_telnet_escape		; if no char received, retry
0177+  0749 76 5B       	cmp ah, '['
0178+  074B C7 10 07    	jne gets_loop
0179+  074E             gets_telnet_escape_phase2:
0180+  074E FD 0C       	sti
0181+  0750 19 01       	mov al, 1
0182+  0752 05 03       	syscall sys_io					; receive in AH without echo
0183+  0754 B9 00       	cmp al, 0						; check error code (AL)
0184+  0756 C6 4E 07    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  0759 76 44       	cmp ah, 'D'
0186+  075B C6 66 07    	je gets_left_arrow
0187+  075E 76 43       	cmp ah, 'C'
0188+  0760 C6 6A 07    	je gets_right_arrow
0189+  0763 0A 10 07    	jmp gets_loop
0190+  0766             gets_left_arrow:
0191+  0766 7F          	dec d
0192+  0767 0A 10 07    	jmp gets_loop
0193+  076A             gets_right_arrow:
0194+  076A 79          	inc d
0195+  076B 0A 10 07    	jmp gets_loop
0196+  076E             gets_escape:
0197+  076E FD 0C       	sti
0198+  0770 19 01       	mov al, 1
0199+  0772 05 03       	syscall sys_io			; receive in AH
0200+  0774 B9 00       	cmp al, 0				; check error code (AL)
0201+  0776 C6 6E 07    	je gets_escape			; if no char received, retry
0202+  0779 76 6E       	cmp ah, 'n'
0203+  077B C6 89 07    	je gets_LF
0204+  077E 76 72       	cmp ah, 'r'
0205+  0780 C6 90 07    	je gets_CR
0206+  0783 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0784 3E          	mov [d], al
0208+  0785 79          	inc d
0209+  0786 0A 10 07    	jmp gets_loop
0210+  0789             gets_LF:
0211+  0789 19 0A       	mov al, $0A
0212+  078B 3E          	mov [d], al
0213+  078C 79          	inc d
0214+  078D 0A 10 07    	jmp gets_loop
0215+  0790             gets_CR:
0216+  0790 19 0D       	mov al, $0D
0217+  0792 3E          	mov [d], al
0218+  0793 79          	inc d
0219+  0794 0A 10 07    	jmp gets_loop
0220+  0797             gets_end:
0221+  0797 19 00       	mov al, 0
0222+  0799 3E          	mov [d], al				; terminate string
0223+  079A E7          	pop d
0224+  079B E4          	pop a
0225+  079C 09          	ret
0226+  079D             
0227+  079D             
0228+  079D             
0229+  079D             
0230+  079D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  079D             ;; INPUT TEXT
0232+  079D             ;; terminated with CTRL+D
0233+  079D             ;; pointer in D
0234+  079D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  079D             gettxt:
0236+  079D D7          	push a
0237+  079E DA          	push d
0238+  079F             gettxt_loop:
0239+  079F 19 01       	mov al, 1
0240+  07A1 05 03       	syscall sys_io			; receive in AH
0241+  07A3 B9 00       	cmp al, 0				; check error code (AL)
0242+  07A5 C6 9F 07    	je gettxt_loop		; if no char received, retry
0243+  07A8 76 04       	cmp ah, 4			; EOT
0244+  07AA C6 E8 07    	je gettxt_end
0245+  07AD 76 08       	cmp ah, $08			; check for backspace
0246+  07AF C6 E4 07    	je gettxt_backspace
0247+  07B2 76 5C       	cmp ah, $5C				; '\\'
0248+  07B4 C6 BD 07    	je gettxt_escape
0249+  07B7 1A          	mov al, ah
0250+  07B8 3E          	mov [d], al
0251+  07B9 79          	inc d
0252+  07BA 0A 9F 07    	jmp gettxt_loop
0253+  07BD             gettxt_escape:
0254+  07BD 19 01       	mov al, 1
0255+  07BF 05 03       	syscall sys_io			; receive in AH
0256+  07C1 B9 00       	cmp al, 0				; check error code (AL)
0257+  07C3 C6 BD 07    	je gettxt_escape		; if no char received, retry
0258+  07C6 76 6E       	cmp ah, 'n'
0259+  07C8 C6 D6 07    	je gettxt_LF
0260+  07CB 76 72       	cmp ah, 'r'
0261+  07CD C6 DD 07    	je gettxt_CR
0262+  07D0 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  07D1 3E          	mov [d], al
0264+  07D2 79          	inc d
0265+  07D3 0A 9F 07    	jmp gettxt_loop
0266+  07D6             gettxt_LF:
0267+  07D6 19 0A       	mov al, $0A
0268+  07D8 3E          	mov [d], al
0269+  07D9 79          	inc d
0270+  07DA 0A 9F 07    	jmp gettxt_loop
0271+  07DD             gettxt_CR:
0272+  07DD 19 0D       	mov al, $0D
0273+  07DF 3E          	mov [d], al
0274+  07E0 79          	inc d
0275+  07E1 0A 9F 07    	jmp gettxt_loop
0276+  07E4             gettxt_backspace:
0277+  07E4 7F          	dec d
0278+  07E5 0A 9F 07    	jmp gettxt_loop
0279+  07E8             gettxt_end:
0280+  07E8 19 00       	mov al, 0
0281+  07EA 3E          	mov [d], al				; terminate string
0282+  07EB E7          	pop d
0283+  07EC E4          	pop a
0284+  07ED 09          	ret
0285+  07EE             
0286+  07EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  07EE             ; PRINT NEW LINE
0288+  07EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  07EE             printnl:
0290+  07EE D7          	push a
0291+  07EF 10 00 0A    	mov a, $0A00
0292+  07F2 05 03       	syscall sys_io
0293+  07F4 10 00 0D    	mov a, $0D00
0294+  07F7 05 03       	syscall sys_io
0295+  07F9 E4          	pop a
0296+  07FA 09          	ret
0297+  07FB             
0298+  07FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  07FB             ; strtoint
0300+  07FB             ; 4 digit hex string number in d
0301+  07FB             ; integer returned in A
0302+  07FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  07FB             strtointx:
0304+  07FB D8          	push b
0305+  07FC 32          	mov bl, [d]
0306+  07FD 37          	mov bh, bl
0307+  07FE 33 01 00    	mov bl, [d + 1]
0308+  0801 07 BC 06    	call atoi				; convert to int in AL
0309+  0804 23          	mov ah, al				; move to AH
0310+  0805 33 02 00    	mov bl, [d + 2]
0311+  0808 37          	mov bh, bl
0312+  0809 33 03 00    	mov bl, [d + 3]
0313+  080C 07 BC 06    	call atoi				; convert to int in AL
0314+  080F E5          	pop b
0315+  0810 09          	ret
0316+  0811             
0317+  0811             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0811             ; strtoint
0319+  0811             ; 5 digit base10 string number in d
0320+  0811             ; integer returned in A
0321+  0811             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0811             strtoint:
0323+  0811 E2          	push si
0324+  0812 D8          	push b
0325+  0813 D9          	push c
0326+  0814 DA          	push d
0327+  0815 07 3C 06    	call strlen			; get string length in C
0328+  0818 7E          	dec c
0329+  0819 FD 4E       	mov si, d
0330+  081B 12          	mov a, c
0331+  081C FD 99       	shl a
0332+  081E 3B A4 06    	mov d, table_power
0333+  0821 59          	add d, a
0334+  0822 38 00 00    	mov c, 0
0335+  0825             strtoint_L0:
0336+  0825 F6          	lodsb			; load ASCII to al
0337+  0826 B9 00       	cmp al, 0
0338+  0828 C6 3B 08    	je strtoint_end
0339+  082B 6F 30       	sub al, $30		; make into integer
0340+  082D 22 00       	mov ah, 0
0341+  082F 2A          	mov b, [d]
0342+  0830 AC          	mul a, b			; result in B since it fits in 16bits
0343+  0831 11          	mov a, b
0344+  0832 28          	mov b, c
0345+  0833 54          	add a, b
0346+  0834 39          	mov c, a
0347+  0835 63 02 00    	sub d, 2
0348+  0838 0A 25 08    	jmp strtoint_L0
0349+  083B             strtoint_end:
0350+  083B 12          	mov a, c
0351+  083C E7          	pop d
0352+  083D E6          	pop c
0353+  083E E5          	pop b
0354+  083F EF          	pop si
0355+  0840 09          	ret
0356+  0841             
0357+  0841             
0358+  0841             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  0841             ; PRINT NULL TERMINATED STRING
0360+  0841             ; pointer in D
0361+  0841             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  0841             puts:
0363+  0841 D7          	push a
0364+  0842 DA          	push d
0365+  0843             puts_L1:
0366+  0843 1E          	mov al, [d]
0367+  0844 B9 00       	cmp al, 0
0368+  0846 C6 52 08    	jz puts_END
0369+  0849 23          	mov ah, al
0370+  084A 19 00       	mov al, 0
0371+  084C 05 03       	syscall sys_io
0372+  084E 79          	inc d
0373+  084F 0A 43 08    	jmp puts_L1
0374+  0852             puts_END:
0375+  0852 E7          	pop d
0376+  0853 E4          	pop a
0377+  0854 09          	ret
0378+  0855             
0379+  0855             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  0855             ; PRINT N SIZE STRING
0381+  0855             ; pointer in D
0382+  0855             ; size in C
0383+  0855             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  0855             putsn:
0385+  0855 DB          	push al
0386+  0856 DA          	push d
0387+  0857 D9          	push c
0388+  0858             putsn_L0:
0389+  0858 1E          	mov al, [d]
0390+  0859 23          	mov ah, al
0391+  085A 19 00       	mov al, 0
0392+  085C 05 03       	syscall sys_io
0393+  085E 79          	inc d
0394+  085F 7E          	dec c	
0395+  0860 C2 00 00    	cmp c, 0
0396+  0863 C7 58 08    	jne putsn_L0
0397+  0866             putsn_end:
0398+  0866 E6          	pop c
0399+  0867 E7          	pop d
0400+  0868 E8          	pop al
0401+  0869 09          	ret
0402+  086A             
0403+  086A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  086A             ; print 16bit decimal number
0405+  086A             ; input number in A
0406+  086A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  086A             print_u16d:
0408+  086A D7          	push a
0409+  086B D8          	push b
0410+  086C 26 10 27    	mov b, 10000
0411+  086F AE          	div a, b			; get 10000 coeff.
0412+  0870 07 96 08    	call print_number
0413+  0873 11          	mov a, b
0414+  0874 26 E8 03    	mov b, 1000
0415+  0877 AE          	div a, b			; get 10000 coeff.
0416+  0878 07 96 08    	call print_number
0417+  087B 11          	mov a, b
0418+  087C 26 64 00    	mov b, 100
0419+  087F AE          	div a, b
0420+  0880 07 96 08    	call print_number
0421+  0883 11          	mov a, b
0422+  0884 26 0A 00    	mov b, 10
0423+  0887 AE          	div a, b
0424+  0888 07 96 08    	call print_number
0425+  088B 11          	mov a, b
0426+  088C 6A 30       	add al, $30
0427+  088E 23          	mov ah, al
0428+  088F 19 00       	mov al, 0
0429+  0891 05 03       	syscall sys_io	; print coeff
0430+  0893 E5          	pop b
0431+  0894 E4          	pop a
0432+  0895 09          	ret
0433+  0896             
0434+  0896             
0435+  0896             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0896             ; if A == 0, print space
0437+  0896             ; else print A
0438+  0896             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  0896             print_number:
0440+  0896 6A 30       	add al, $30
0441+  0898 23          	mov ah, al
0442+  0899 07 07 07    	call putchar
0443+  089C 09          	ret
0444+  089D             
0445+  089D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  089D             ; PRINT 16BIT HEX INTEGER
0447+  089D             ; integer value in reg B
0448+  089D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  089D             print_u16x:
0450+  089D D7          	push a
0451+  089E D8          	push b
0452+  089F DD          	push bl
0453+  08A0 30          	mov bl, bh
0454+  08A1 07 CE 06    	call itoa				; convert bh to char in A
0455+  08A4 2F          	mov bl, al				; save al
0456+  08A5 19 00       	mov al, 0
0457+  08A7 05 03       	syscall sys_io				; display AH
0458+  08A9 24          	mov ah, bl				; retrieve al
0459+  08AA 19 00       	mov al, 0
0460+  08AC 05 03       	syscall sys_io				; display AL
0461+  08AE             
0462+  08AE EA          	pop bl
0463+  08AF 07 CE 06    	call itoa				; convert bh to char in A
0464+  08B2 2F          	mov bl, al				; save al
0465+  08B3 19 00       	mov al, 0
0466+  08B5 05 03       	syscall sys_io				; display AH
0467+  08B7 24          	mov ah, bl				; retrieve al
0468+  08B8 19 00       	mov al, 0
0469+  08BA 05 03       	syscall sys_io				; display AL
0470+  08BC             
0471+  08BC E5          	pop b
0472+  08BD E4          	pop a
0473+  08BE 09          	ret
0474+  08BF             
0475+  08BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  08BF             ; INPUT 16BIT HEX INTEGER
0477+  08BF             ; read 16bit integer into A
0478+  08BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  08BF             scan_u16x:
0480+  08BF F8 10 00    	enter 16
0481+  08C2 D8          	push b
0482+  08C3 DA          	push d
0483+  08C4             
0484+  08C4 FA F1 FF    	lea d, [bp + -15]
0485+  08C7 07 0E 07    	call gets				; get number
0486+  08CA             
0487+  08CA 32          	mov bl, [d]
0488+  08CB 37          	mov bh, bl
0489+  08CC 33 01 00    	mov bl, [d + 1]
0490+  08CF 07 BC 06    	call atoi				; convert to int in AL
0491+  08D2 23          	mov ah, al				; move to AH
0492+  08D3             
0493+  08D3 33 02 00    	mov bl, [d + 2]
0494+  08D6 37          	mov bh, bl
0495+  08D7 33 03 00    	mov bl, [d + 3]
0496+  08DA 07 BC 06    	call atoi				; convert to int in AL
0497+  08DD             
0498+  08DD E7          	pop d
0499+  08DE E5          	pop b
0500+  08DF F9          	leave
0501+  08E0 09          	ret
0502+  08E1             
0503+  08E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  08E1             ; PRINT 8bit HEX INTEGER
0505+  08E1             ; integer value in reg bl
0506+  08E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  08E1             print_u8x:
0508+  08E1 D7          	push a
0509+  08E2 DD          	push bl
0510+  08E3             
0511+  08E3 07 CE 06    	call itoa				; convert bl to char in A
0512+  08E6 2F          	mov bl, al				; save al
0513+  08E7 19 00       	mov al, 0
0514+  08E9 05 03       	syscall sys_io				; display AH
0515+  08EB 24          	mov ah, bl				; retrieve al
0516+  08EC 19 00       	mov al, 0
0517+  08EE 05 03       	syscall sys_io				; display AL
0518+  08F0             
0519+  08F0 EA          	pop bl
0520+  08F1 E4          	pop a
0521+  08F2 09          	ret
0522+  08F3             
0523+  08F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  08F3             ; print 8bit decimal unsigned number
0525+  08F3             ; input number in AL
0526+  08F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  08F3             print_u8d:
0528+  08F3 D7          	push a
0529+  08F4 D8          	push b
0530+  08F5             
0531+  08F5 22 00       	mov ah, 0
0532+  08F7 26 64 00    	mov b, 100
0533+  08FA AE          	div a, b
0534+  08FB D8          	push b			; save remainder
0535+  08FC B9 00       	cmp al, 0
0536+  08FE C6 08 09    	je skip100
0537+  0901 6A 30       	add al, $30
0538+  0903 23          	mov ah, al
0539+  0904 19 00       	mov al, 0
0540+  0906 05 03       	syscall sys_io	; print coeff
0541+  0908             skip100:
0542+  0908 E4          	pop a
0543+  0909 22 00       	mov ah, 0
0544+  090B 26 0A 00    	mov b, 10
0545+  090E AE          	div a, b
0546+  090F D8          	push b			; save remainder
0547+  0910 B9 00       	cmp al, 0
0548+  0912 C6 1C 09    	je skip10
0549+  0915 6A 30       	add al, $30
0550+  0917 23          	mov ah, al
0551+  0918 19 00       	mov al, 0
0552+  091A 05 03       	syscall sys_io	; print coeff
0553+  091C             skip10:
0554+  091C E4          	pop a
0555+  091D 1B          	mov al, bl
0556+  091E 6A 30       	add al, $30
0557+  0920 23          	mov ah, al
0558+  0921 19 00       	mov al, 0
0559+  0923 05 03       	syscall sys_io	; print coeff
0560+  0925 E5          	pop b
0561+  0926 E4          	pop a
0562+  0927 09          	ret
0563+  0928             
0564+  0928             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  0928             ; INPUT 8BIT HEX INTEGER
0566+  0928             ; read 8bit integer into AL
0567+  0928             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  0928             scan_u8x:
0569+  0928 F8 04 00    	enter 4
0570+  092B D8          	push b
0571+  092C DA          	push d
0572+  092D             
0573+  092D FA FD FF    	lea d, [bp + -3]
0574+  0930 07 0E 07    	call gets				; get number
0575+  0933             
0576+  0933 32          	mov bl, [d]
0577+  0934 37          	mov bh, bl
0578+  0935 33 01 00    	mov bl, [d + 1]
0579+  0938 07 BC 06    	call atoi				; convert to int in AL
0580+  093B             
0581+  093B E7          	pop d
0582+  093C E5          	pop b
0583+  093D F9          	leave
0584+  093E 09          	ret
0585+  093F             
0586+  093F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  093F             ; input decimal number
0588+  093F             ; result in A
0589+  093F             ; 655'\0'
0590+  093F             ; low--------high
0591+  093F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  093F             scan_u16d:
0593+  093F F8 08 00    	enter 8
0594+  0942 E2          	push si
0595+  0943 D8          	push b
0596+  0944 D9          	push c
0597+  0945 DA          	push d
0598+  0946 FA F9 FF    	lea d, [bp +- 7]
0599+  0949 07 0E 07    	call gets
0600+  094C 07 3C 06    	call strlen			; get string length in C
0601+  094F 7E          	dec c
0602+  0950 FD 4E       	mov si, d
0603+  0952 12          	mov a, c
0604+  0953 FD 99       	shl a
0605+  0955 3B A4 06    	mov d, table_power
0606+  0958 59          	add d, a
0607+  0959 38 00 00    	mov c, 0
0608+  095C             mul_loop:
0609+  095C F6          	lodsb			; load ASCII to al
0610+  095D B9 00       	cmp al, 0
0611+  095F C6 72 09    	je mul_exit
0612+  0962 6F 30       	sub al, $30		; make into integer
0613+  0964 22 00       	mov ah, 0
0614+  0966 2A          	mov b, [d]
0615+  0967 AC          	mul a, b			; result in B since it fits in 16bits
0616+  0968 11          	mov a, b
0617+  0969 28          	mov b, c
0618+  096A 54          	add a, b
0619+  096B 39          	mov c, a
0620+  096C 63 02 00    	sub d, 2
0621+  096F 0A 5C 09    	jmp mul_loop
0622+  0972             mul_exit:
0623+  0972 12          	mov a, c
0624+  0973 E7          	pop d
0625+  0974 E6          	pop c
0626+  0975 E5          	pop b
0627+  0976 EF          	pop si
0628+  0977 F9          	leave
0629+  0978 09          	ret
0347   0979             ; --- END INCLUDE BLOCK
0348   0979             
0349   0979             
0350   0979             .end
tasm: Number of errors = 0
