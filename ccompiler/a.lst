0001   0000             ; --- FILENAME: life.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             main:
0007   0400 D2            push bp
0008   0401 9B            mov bp, sp
0009   0402 52 02 00      sub sp, 2 ; i
0010   0405 52 02 00      sub sp, 2 ; n
0011   0408 26 5D 22      mov b, _string_0
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 07 F0 04      call print
0015   0411 51 02 00      add sp, 2
0016   0414 07 FB 04      call getn
0017   0417 D7            push a
0018   0418 11            mov a, b
0019   0419 45 FD FF      mov [bp + -3], a ; n
0020   041C E4            pop a
0021   041D 07 65 04      call init_game
0022   0420             _for1_init:
0023   0420 26 00 00      mov b, 0
0024   0423 D7            push a
0025   0424 11            mov a, b
0026   0425 45 FF FF      mov [bp + -1], a ; i
0027   0428 E4            pop a
0028   0429             _for1_cond:
0029   0429 2C FF FF      mov b, [bp + -1] ; i
0030   042C D7            push a
0031   042D 11            mov a, b
0032   042E 2C FD FF      mov b, [bp + -3] ; n
0033   0431 B0            cmp a, b
0034   0432 0E            lodflgs
0035   0433 87 02         and al, %00000010 ; <
0036   0435 B9 00         cmp al, 0
0037   0437 0E            lodflgs
0038   0438 96            not al
0039   0439 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0040   043B 22 00         mov ah, 0
0041   043D 27            mov b, a
0042   043E E4            pop a
0043   043F C0 00 00      cmp b, 0
0044   0442 C6 5F 04      je _for1_exit
0045   0445             _for1_block:
0046   0445             
0047   0445             ; --- BEGIN INLINE ASM BLOCK
0048   0445 3B 1A 23      mov d, s_telnet_clear
0049   0448 07 BF 24      call puts
0050   044B             ; --- END INLINE ASM BLOCK
0051   044B             
0052   044B 07 0B 05      call print_game
0053   044E 07 BF 05      call update_game
0054   0451             _for1_update:
0055   0451 2C FF FF      mov b, [bp + -1] ; i
0056   0454 FD 77         inc b
0057   0456 D7            push a
0058   0457 11            mov a, b
0059   0458 45 FF FF      mov [bp + -1], a ; i
0060   045B E4            pop a
0061   045C 0A 29 04      jmp _for1_cond
0062   045F             _for1_exit:
0063   045F 26 00 00      mov b, 0
0064   0462 F9            leave
0065   0463 05 0B         syscall sys_terminate_proc
0066   0465             init_game:
0067   0465 D2            push bp
0068   0466 9B            mov bp, sp
0069   0467 29 D9 15      mov b, [curr_state]
0070   046A 74            mov d, b
0071   046B 26 04 00      mov b, 4
0072   046E 10 50 00      mov a, 80
0073   0471 AC            mul a, b
0074   0472 5A            add d, b
0075   0473 26 04 00      mov b, 4
0076   0476 10 02 00      mov a, 2
0077   0479 AC            mul a, b
0078   047A 5A            add d, b
0079   047B DA            push d
0080   047C 26 01 00      mov b, 1
0081   047F E7            pop d
0082   0480 11            mov a, b
0083   0481 43            mov [d], a
0084   0482 29 D9 15      mov b, [curr_state]
0085   0485 74            mov d, b
0086   0486 26 04 00      mov b, 4
0087   0489 10 50 00      mov a, 80
0088   048C AC            mul a, b
0089   048D 5A            add d, b
0090   048E 26 05 00      mov b, 5
0091   0491 10 02 00      mov a, 2
0092   0494 AC            mul a, b
0093   0495 5A            add d, b
0094   0496 DA            push d
0095   0497 26 01 00      mov b, 1
0096   049A E7            pop d
0097   049B 11            mov a, b
0098   049C 43            mov [d], a
0099   049D 29 D9 15      mov b, [curr_state]
0100   04A0 74            mov d, b
0101   04A1 26 04 00      mov b, 4
0102   04A4 10 50 00      mov a, 80
0103   04A7 AC            mul a, b
0104   04A8 5A            add d, b
0105   04A9 26 06 00      mov b, 6
0106   04AC 10 02 00      mov a, 2
0107   04AF AC            mul a, b
0108   04B0 5A            add d, b
0109   04B1 DA            push d
0110   04B2 26 01 00      mov b, 1
0111   04B5 E7            pop d
0112   04B6 11            mov a, b
0113   04B7 43            mov [d], a
0114   04B8 29 D9 15      mov b, [curr_state]
0115   04BB 74            mov d, b
0116   04BC 26 03 00      mov b, 3
0117   04BF 10 50 00      mov a, 80
0118   04C2 AC            mul a, b
0119   04C3 5A            add d, b
0120   04C4 26 06 00      mov b, 6
0121   04C7 10 02 00      mov a, 2
0122   04CA AC            mul a, b
0123   04CB 5A            add d, b
0124   04CC DA            push d
0125   04CD 26 01 00      mov b, 1
0126   04D0 E7            pop d
0127   04D1 11            mov a, b
0128   04D2 43            mov [d], a
0129   04D3 29 D9 15      mov b, [curr_state]
0130   04D6 74            mov d, b
0131   04D7 26 02 00      mov b, 2
0132   04DA 10 50 00      mov a, 80
0133   04DD AC            mul a, b
0134   04DE 5A            add d, b
0135   04DF 26 05 00      mov b, 5
0136   04E2 10 02 00      mov a, 2
0137   04E5 AC            mul a, b
0138   04E6 5A            add d, b
0139   04E7 DA            push d
0140   04E8 26 01 00      mov b, 1
0141   04EB E7            pop d
0142   04EC 11            mov a, b
0143   04ED 43            mov [d], a
0144   04EE F9            leave
0145   04EF 09            ret
0146   04F0             print:
0147   04F0 D2            push bp
0148   04F1 9B            mov bp, sp
0149   04F2             
0150   04F2             ; --- BEGIN INLINE ASM BLOCK
0151   04F2 17 05 00      mov a, [bp + 5]
0152   04F5 3C            mov d, a
0153   04F6 07 BF 24      call puts
0154   04F9             ; --- END INLINE ASM BLOCK
0155   04F9             
0156   04F9 F9            leave
0157   04FA 09            ret
0158   04FB             getn:
0159   04FB D2            push bp
0160   04FC 9B            mov bp, sp
0161   04FD 52 02 00      sub sp, 2 ; n
0162   0500             
0163   0500             ; --- BEGIN INLINE ASM BLOCK
0164   0500 07 BD 25      call scan_u16d
0165   0503 45 FF FF      mov [bp + -1], a
0166   0506             ; --- END INLINE ASM BLOCK
0167   0506             
0168   0506 2C FF FF      mov b, [bp + -1] ; n
0169   0509 F9            leave
0170   050A 09            ret
0171   050B             print_game:
0172   050B D2            push bp
0173   050C 9B            mov bp, sp
0174   050D 52 02 00      sub sp, 2 ; i
0175   0510 52 02 00      sub sp, 2 ; j
0176   0513             _for2_init:
0177   0513 26 00 00      mov b, 0
0178   0516 D7            push a
0179   0517 11            mov a, b
0180   0518 45 FF FF      mov [bp + -1], a ; i
0181   051B E4            pop a
0182   051C             _for2_cond:
0183   051C 2C FF FF      mov b, [bp + -1] ; i
0184   051F D7            push a
0185   0520 11            mov a, b
0186   0521 26 28 00      mov b, 40
0187   0524 B0            cmp a, b
0188   0525 0E            lodflgs
0189   0526 87 02         and al, %00000010 ; <
0190   0528 B9 00         cmp al, 0
0191   052A 0E            lodflgs
0192   052B 96            not al
0193   052C 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0194   052E 22 00         mov ah, 0
0195   0530 27            mov b, a
0196   0531 E4            pop a
0197   0532 C0 00 00      cmp b, 0
0198   0535 C6 BD 05      je _for2_exit
0199   0538             _for2_block:
0200   0538             _for3_init:
0201   0538 26 00 00      mov b, 0
0202   053B D7            push a
0203   053C 11            mov a, b
0204   053D 45 FD FF      mov [bp + -3], a ; j
0205   0540 E4            pop a
0206   0541             _for3_cond:
0207   0541 2C FD FF      mov b, [bp + -3] ; j
0208   0544 D7            push a
0209   0545 11            mov a, b
0210   0546 26 28 00      mov b, 40
0211   0549 B0            cmp a, b
0212   054A 0E            lodflgs
0213   054B 87 02         and al, %00000010 ; <
0214   054D B9 00         cmp al, 0
0215   054F 0E            lodflgs
0216   0550 96            not al
0217   0551 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0218   0553 22 00         mov ah, 0
0219   0555 27            mov b, a
0220   0556 E4            pop a
0221   0557 C0 00 00      cmp b, 0
0222   055A C6 A3 05      je _for3_exit
0223   055D             _for3_block:
0224   055D             _if4_cond:
0225   055D 29 D9 15      mov b, [curr_state]
0226   0560 D7            push a
0227   0561 74            mov d, b
0228   0562 2C FF FF      mov b, [bp + -1] ; i
0229   0565 10 50 00      mov a, 80
0230   0568 AC            mul a, b
0231   0569 5A            add d, b
0232   056A 2C FD FF      mov b, [bp + -3] ; j
0233   056D 10 02 00      mov a, 2
0234   0570 AC            mul a, b
0235   0571 5A            add d, b
0236   0572 2A            mov b, [d]
0237   0573 E4            pop a
0238   0574 C0 00 00      cmp b, 0
0239   0577 C6 89 05      je _if4_else
0240   057A             _if4_true:
0241   057A 26 6B 22      mov b, _string_1
0242   057D FD AB         swp b
0243   057F D8            push b
0244   0580 07 F0 04      call print
0245   0583 51 02 00      add sp, 2
0246   0586 0A 95 05      jmp _if4_exit
0247   0589             _if4_else:
0248   0589 26 6E 22      mov b, _string_2
0249   058C FD AB         swp b
0250   058E D8            push b
0251   058F 07 F0 04      call print
0252   0592 51 02 00      add sp, 2
0253   0595             _if4_exit:
0254   0595             _for3_update:
0255   0595 2C FD FF      mov b, [bp + -3] ; j
0256   0598 FD 77         inc b
0257   059A D7            push a
0258   059B 11            mov a, b
0259   059C 45 FD FF      mov [bp + -3], a ; j
0260   059F E4            pop a
0261   05A0 0A 41 05      jmp _for3_cond
0262   05A3             _for3_exit:
0263   05A3 26 71 22      mov b, _string_3
0264   05A6 FD AB         swp b
0265   05A8 D8            push b
0266   05A9 07 F0 04      call print
0267   05AC 51 02 00      add sp, 2
0268   05AF             _for2_update:
0269   05AF 2C FF FF      mov b, [bp + -1] ; i
0270   05B2 FD 77         inc b
0271   05B4 D7            push a
0272   05B5 11            mov a, b
0273   05B6 45 FF FF      mov [bp + -1], a ; i
0274   05B9 E4            pop a
0275   05BA 0A 1C 05      jmp _for2_cond
0276   05BD             _for2_exit:
0277   05BD F9            leave
0278   05BE 09            ret
0279   05BF             update_game:
0280   05BF D2            push bp
0281   05C0 9B            mov bp, sp
0282   05C1 52 02 00      sub sp, 2 ; i
0283   05C4 52 02 00      sub sp, 2 ; j
0284   05C7 52 02 00      sub sp, 2 ; ni
0285   05CA 52 02 00      sub sp, 2 ; nj
0286   05CD 52 02 00      sub sp, 2 ; count
0287   05D0             _for5_init:
0288   05D0 26 00 00      mov b, 0
0289   05D3 D7            push a
0290   05D4 11            mov a, b
0291   05D5 45 FF FF      mov [bp + -1], a ; i
0292   05D8 E4            pop a
0293   05D9             _for5_cond:
0294   05D9 2C FF FF      mov b, [bp + -1] ; i
0295   05DC D7            push a
0296   05DD 11            mov a, b
0297   05DE 26 28 00      mov b, 40
0298   05E1 B0            cmp a, b
0299   05E2 0E            lodflgs
0300   05E3 87 02         and al, %00000010 ; <
0301   05E5 B9 00         cmp al, 0
0302   05E7 0E            lodflgs
0303   05E8 96            not al
0304   05E9 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0305   05EB 22 00         mov ah, 0
0306   05ED 27            mov b, a
0307   05EE E4            pop a
0308   05EF C0 00 00      cmp b, 0
0309   05F2 C6 65 06      je _for5_exit
0310   05F5             _for5_block:
0311   05F5             _for6_init:
0312   05F5 26 00 00      mov b, 0
0313   05F8 D7            push a
0314   05F9 11            mov a, b
0315   05FA 45 FD FF      mov [bp + -3], a ; j
0316   05FD E4            pop a
0317   05FE             _for6_cond:
0318   05FE 2C FD FF      mov b, [bp + -3] ; j
0319   0601 D7            push a
0320   0602 11            mov a, b
0321   0603 26 28 00      mov b, 40
0322   0606 B0            cmp a, b
0323   0607 0E            lodflgs
0324   0608 87 02         and al, %00000010 ; <
0325   060A B9 00         cmp al, 0
0326   060C 0E            lodflgs
0327   060D 96            not al
0328   060E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0329   0610 22 00         mov ah, 0
0330   0612 27            mov b, a
0331   0613 E4            pop a
0332   0614 C0 00 00      cmp b, 0
0333   0617 C6 57 06      je _for6_exit
0334   061A             _for6_block:
0335   061A 29 5B 22      mov b, [next_state]
0336   061D 74            mov d, b
0337   061E 2C FF FF      mov b, [bp + -1] ; i
0338   0621 10 50 00      mov a, 80
0339   0624 AC            mul a, b
0340   0625 5A            add d, b
0341   0626 2C FD FF      mov b, [bp + -3] ; j
0342   0629 10 02 00      mov a, 2
0343   062C AC            mul a, b
0344   062D 5A            add d, b
0345   062E DA            push d
0346   062F 29 D9 15      mov b, [curr_state]
0347   0632 D7            push a
0348   0633 74            mov d, b
0349   0634 2C FF FF      mov b, [bp + -1] ; i
0350   0637 10 50 00      mov a, 80
0351   063A AC            mul a, b
0352   063B 5A            add d, b
0353   063C 2C FD FF      mov b, [bp + -3] ; j
0354   063F 10 02 00      mov a, 2
0355   0642 AC            mul a, b
0356   0643 5A            add d, b
0357   0644 2A            mov b, [d]
0358   0645 E4            pop a
0359   0646 E7            pop d
0360   0647 11            mov a, b
0361   0648 43            mov [d], a
0362   0649             _for6_update:
0363   0649 2C FD FF      mov b, [bp + -3] ; j
0364   064C FD 77         inc b
0365   064E D7            push a
0366   064F 11            mov a, b
0367   0650 45 FD FF      mov [bp + -3], a ; j
0368   0653 E4            pop a
0369   0654 0A FE 05      jmp _for6_cond
0370   0657             _for6_exit:
0371   0657             _for5_update:
0372   0657 2C FF FF      mov b, [bp + -1] ; i
0373   065A FD 77         inc b
0374   065C D7            push a
0375   065D 11            mov a, b
0376   065E 45 FF FF      mov [bp + -1], a ; i
0377   0661 E4            pop a
0378   0662 0A D9 05      jmp _for5_cond
0379   0665             _for5_exit:
0380   0665             _for7_init:
0381   0665 26 01 00      mov b, 1
0382   0668 D7            push a
0383   0669 11            mov a, b
0384   066A 45 FF FF      mov [bp + -1], a ; i
0385   066D E4            pop a
0386   066E             _for7_cond:
0387   066E 2C FF FF      mov b, [bp + -1] ; i
0388   0671 D7            push a
0389   0672 11            mov a, b
0390   0673 26 28 00      mov b, 40
0391   0676 D7            push a
0392   0677 11            mov a, b
0393   0678 26 01 00      mov b, 1
0394   067B 60            sub a, b
0395   067C 27            mov b, a
0396   067D E4            pop a
0397   067E B0            cmp a, b
0398   067F 0E            lodflgs
0399   0680 87 02         and al, %00000010 ; <
0400   0682 B9 00         cmp al, 0
0401   0684 0E            lodflgs
0402   0685 96            not al
0403   0686 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0404   0688 22 00         mov ah, 0
0405   068A 27            mov b, a
0406   068B E4            pop a
0407   068C C0 00 00      cmp b, 0
0408   068F C6 C0 08      je _for7_exit
0409   0692             _for7_block:
0410   0692             _for8_init:
0411   0692 26 01 00      mov b, 1
0412   0695 D7            push a
0413   0696 11            mov a, b
0414   0697 45 FD FF      mov [bp + -3], a ; j
0415   069A E4            pop a
0416   069B             _for8_cond:
0417   069B 2C FD FF      mov b, [bp + -3] ; j
0418   069E D7            push a
0419   069F 11            mov a, b
0420   06A0 26 28 00      mov b, 40
0421   06A3 D7            push a
0422   06A4 11            mov a, b
0423   06A5 26 01 00      mov b, 1
0424   06A8 60            sub a, b
0425   06A9 27            mov b, a
0426   06AA E4            pop a
0427   06AB B0            cmp a, b
0428   06AC 0E            lodflgs
0429   06AD 87 02         and al, %00000010 ; <
0430   06AF B9 00         cmp al, 0
0431   06B1 0E            lodflgs
0432   06B2 96            not al
0433   06B3 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0434   06B5 22 00         mov ah, 0
0435   06B7 27            mov b, a
0436   06B8 E4            pop a
0437   06B9 C0 00 00      cmp b, 0
0438   06BC C6 B2 08      je _for8_exit
0439   06BF             _for8_block:
0440   06BF 26 00 00      mov b, 0
0441   06C2 D7            push a
0442   06C3 11            mov a, b
0443   06C4 45 F7 FF      mov [bp + -9], a ; count
0444   06C7 E4            pop a
0445   06C8             _for9_init:
0446   06C8 2C FF FF      mov b, [bp + -1] ; i
0447   06CB D7            push a
0448   06CC 11            mov a, b
0449   06CD 26 01 00      mov b, 1
0450   06D0 60            sub a, b
0451   06D1 27            mov b, a
0452   06D2 11            mov a, b
0453   06D3 45 FB FF      mov [bp + -5], a ; ni
0454   06D6 E4            pop a
0455   06D7             _for9_cond:
0456   06D7 2C FB FF      mov b, [bp + -5] ; ni
0457   06DA D7            push a
0458   06DB 11            mov a, b
0459   06DC 2C FF FF      mov b, [bp + -1] ; i
0460   06DF D7            push a
0461   06E0 11            mov a, b
0462   06E1 26 01 00      mov b, 1
0463   06E4 54            add a, b
0464   06E5 27            mov b, a
0465   06E6 E4            pop a
0466   06E7 B0            cmp a, b
0467   06E8 0E            lodflgs
0468   06E9 87 03         and al, %00000011 ; <=
0469   06EB B9 00         cmp al, 0
0470   06ED 0E            lodflgs
0471   06EE 96            not al
0472   06EF 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0473   06F1 22 00         mov ah, 0
0474   06F3 27            mov b, a
0475   06F4 E4            pop a
0476   06F5 C0 00 00      cmp b, 0
0477   06F8 C6 F2 07      je _for9_exit
0478   06FB             _for9_block:
0479   06FB             _for10_init:
0480   06FB 2C FD FF      mov b, [bp + -3] ; j
0481   06FE D7            push a
0482   06FF 11            mov a, b
0483   0700 26 01 00      mov b, 1
0484   0703 60            sub a, b
0485   0704 27            mov b, a
0486   0705 11            mov a, b
0487   0706 45 F9 FF      mov [bp + -7], a ; nj
0488   0709 E4            pop a
0489   070A             _for10_cond:
0490   070A 2C F9 FF      mov b, [bp + -7] ; nj
0491   070D D7            push a
0492   070E 11            mov a, b
0493   070F 2C FD FF      mov b, [bp + -3] ; j
0494   0712 D7            push a
0495   0713 11            mov a, b
0496   0714 26 01 00      mov b, 1
0497   0717 54            add a, b
0498   0718 27            mov b, a
0499   0719 E4            pop a
0500   071A B0            cmp a, b
0501   071B 0E            lodflgs
0502   071C 87 03         and al, %00000011 ; <=
0503   071E B9 00         cmp al, 0
0504   0720 0E            lodflgs
0505   0721 96            not al
0506   0722 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0507   0724 22 00         mov ah, 0
0508   0726 27            mov b, a
0509   0727 E4            pop a
0510   0728 C0 00 00      cmp b, 0
0511   072B C6 E4 07      je _for10_exit
0512   072E             _for10_block:
0513   072E             _if11_cond:
0514   072E 2C FB FF      mov b, [bp + -5] ; ni
0515   0731 D7            push a
0516   0732 11            mov a, b
0517   0733 26 28 00      mov b, 40
0518   0736 B0            cmp a, b
0519   0737 0E            lodflgs
0520   0738 87 02         and al, %00000010 ; <
0521   073A B9 00         cmp al, 0
0522   073C 0E            lodflgs
0523   073D 96            not al
0524   073E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0525   0740 22 00         mov ah, 0
0526   0742 27            mov b, a
0527   0743 11            mov a, b
0528   0744 AF 00 00      cmp a, 0
0529   0747 0E            lodflgs
0530   0748 96            not al
0531   0749 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0532   074B 2C F9 FF      mov b, [bp + -7] ; nj
0533   074E D7            push a
0534   074F 11            mov a, b
0535   0750 26 28 00      mov b, 40
0536   0753 B0            cmp a, b
0537   0754 0E            lodflgs
0538   0755 87 02         and al, %00000010 ; <
0539   0757 B9 00         cmp al, 0
0540   0759 0E            lodflgs
0541   075A 96            not al
0542   075B 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0543   075D 22 00         mov ah, 0
0544   075F 27            mov b, a
0545   0760 C0 00 00      cmp b, 0
0546   0763 0E            lodflgs
0547   0764 96            not al
0548   0765 87 01         and al, %00000001 ; transform logical AND condition result into a single bit
0549   0767 22 00         mov ah, 0
0550   0769 27            mov b, a
0551   076A E4            pop a
0552   076B 86            and a, b
0553   076C 27            mov b, a
0554   076D E4            pop a
0555   076E C0 00 00      cmp b, 0
0556   0771 C6 D6 07      je _if11_exit
0557   0774             _if11_true:
0558   0774             _if12_cond:
0559   0774 2C FB FF      mov b, [bp + -5] ; ni
0560   0777 D7            push a
0561   0778 11            mov a, b
0562   0779 2C FF FF      mov b, [bp + -1] ; i
0563   077C B0            cmp a, b
0564   077D 0E            lodflgs
0565   077E 87 01         and al, %00000001
0566   0780 8F 01         xor al, %00000001 ; !=
0567   0782 B9 00         cmp al, 0
0568   0784 0E            lodflgs
0569   0785 96            not al
0570   0786 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0571   0788 22 00         mov ah, 0
0572   078A 27            mov b, a
0573   078B 11            mov a, b
0574   078C 2C F9 FF      mov b, [bp + -7] ; nj
0575   078F D7            push a
0576   0790 11            mov a, b
0577   0791 2C FD FF      mov b, [bp + -3] ; j
0578   0794 B0            cmp a, b
0579   0795 0E            lodflgs
0580   0796 87 01         and al, %00000001
0581   0798 8F 01         xor al, %00000001 ; !=
0582   079A B9 00         cmp al, 0
0583   079C 0E            lodflgs
0584   079D 96            not al
0585   079E 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0586   07A0 22 00         mov ah, 0
0587   07A2 27            mov b, a
0588   07A3 E4            pop a
0589   07A4 8A            or a, b
0590   07A5 27            mov b, a
0591   07A6 E4            pop a
0592   07A7 C0 00 00      cmp b, 0
0593   07AA C6 D3 07      je _if12_exit
0594   07AD             _if12_true:
0595   07AD 2C F7 FF      mov b, [bp + -9] ; count
0596   07B0 D7            push a
0597   07B1 11            mov a, b
0598   07B2 29 D9 15      mov b, [curr_state]
0599   07B5 D7            push a
0600   07B6 74            mov d, b
0601   07B7 2C FB FF      mov b, [bp + -5] ; ni
0602   07BA 10 50 00      mov a, 80
0603   07BD AC            mul a, b
0604   07BE 5A            add d, b
0605   07BF 2C F9 FF      mov b, [bp + -7] ; nj
0606   07C2 10 02 00      mov a, 2
0607   07C5 AC            mul a, b
0608   07C6 5A            add d, b
0609   07C7 2A            mov b, [d]
0610   07C8 E4            pop a
0611   07C9 54            add a, b
0612   07CA 27            mov b, a
0613   07CB 11            mov a, b
0614   07CC 45 F7 FF      mov [bp + -9], a ; count
0615   07CF E4            pop a
0616   07D0 0A D3 07      jmp _if12_exit
0617   07D3             _if12_exit:
0618   07D3 0A D6 07      jmp _if11_exit
0619   07D6             _if11_exit:
0620   07D6             _for10_update:
0621   07D6 2C F9 FF      mov b, [bp + -7] ; nj
0622   07D9 FD 77         inc b
0623   07DB D7            push a
0624   07DC 11            mov a, b
0625   07DD 45 F9 FF      mov [bp + -7], a ; nj
0626   07E0 E4            pop a
0627   07E1 0A 0A 07      jmp _for10_cond
0628   07E4             _for10_exit:
0629   07E4             _for9_update:
0630   07E4 2C FB FF      mov b, [bp + -5] ; ni
0631   07E7 FD 77         inc b
0632   07E9 D7            push a
0633   07EA 11            mov a, b
0634   07EB 45 FB FF      mov [bp + -5], a ; ni
0635   07EE E4            pop a
0636   07EF 0A D7 06      jmp _for9_cond
0637   07F2             _for9_exit:
0638   07F2             _if13_cond:
0639   07F2 29 D9 15      mov b, [curr_state]
0640   07F5 D7            push a
0641   07F6 74            mov d, b
0642   07F7 2C FF FF      mov b, [bp + -1] ; i
0643   07FA 10 50 00      mov a, 80
0644   07FD AC            mul a, b
0645   07FE 5A            add d, b
0646   07FF 2C FD FF      mov b, [bp + -3] ; j
0647   0802 10 02 00      mov a, 2
0648   0805 AC            mul a, b
0649   0806 5A            add d, b
0650   0807 2A            mov b, [d]
0651   0808 E4            pop a
0652   0809 C0 00 00      cmp b, 0
0653   080C C6 6A 08      je _if13_else
0654   080F             _if13_true:
0655   080F             _if14_cond:
0656   080F 2C F7 FF      mov b, [bp + -9] ; count
0657   0812 D7            push a
0658   0813 11            mov a, b
0659   0814 26 02 00      mov b, 2
0660   0817 B0            cmp a, b
0661   0818 0E            lodflgs
0662   0819 87 02         and al, %00000010 ; <
0663   081B B9 00         cmp al, 0
0664   081D 0E            lodflgs
0665   081E 96            not al
0666   081F 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0667   0821 22 00         mov ah, 0
0668   0823 27            mov b, a
0669   0824 11            mov a, b
0670   0825 2C F7 FF      mov b, [bp + -9] ; count
0671   0828 D7            push a
0672   0829 11            mov a, b
0673   082A 26 03 00      mov b, 3
0674   082D B0            cmp a, b
0675   082E 0E            lodflgs
0676   082F 87 03         and al, %00000011
0677   0831 B9 00         cmp al, %00000000
0678   0833 0E            lodflgs
0679   0834 87 01         and al, %00000001 ; >
0680   0836 B9 00         cmp al, 0
0681   0838 0E            lodflgs
0682   0839 96            not al
0683   083A 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0684   083C 22 00         mov ah, 0
0685   083E 27            mov b, a
0686   083F E4            pop a
0687   0840 8A            or a, b
0688   0841 27            mov b, a
0689   0842 E4            pop a
0690   0843 C0 00 00      cmp b, 0
0691   0846 C6 67 08      je _if14_exit
0692   0849             _if14_true:
0693   0849 29 5B 22      mov b, [next_state]
0694   084C 74            mov d, b
0695   084D 2C FF FF      mov b, [bp + -1] ; i
0696   0850 10 50 00      mov a, 80
0697   0853 AC            mul a, b
0698   0854 5A            add d, b
0699   0855 2C FD FF      mov b, [bp + -3] ; j
0700   0858 10 02 00      mov a, 2
0701   085B AC            mul a, b
0702   085C 5A            add d, b
0703   085D DA            push d
0704   085E 26 00 00      mov b, 0
0705   0861 E7            pop d
0706   0862 11            mov a, b
0707   0863 43            mov [d], a
0708   0864 0A 67 08      jmp _if14_exit
0709   0867             _if14_exit:
0710   0867 0A A4 08      jmp _if13_exit
0711   086A             _if13_else:
0712   086A             _if15_cond:
0713   086A 2C F7 FF      mov b, [bp + -9] ; count
0714   086D D7            push a
0715   086E 11            mov a, b
0716   086F 26 03 00      mov b, 3
0717   0872 B0            cmp a, b
0718   0873 0E            lodflgs
0719   0874 87 01         and al, %00000001 ; ==
0720   0876 B9 00         cmp al, 0
0721   0878 0E            lodflgs
0722   0879 96            not al
0723   087A 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0724   087C 22 00         mov ah, 0
0725   087E 27            mov b, a
0726   087F E4            pop a
0727   0880 C0 00 00      cmp b, 0
0728   0883 C6 A4 08      je _if15_exit
0729   0886             _if15_true:
0730   0886 29 5B 22      mov b, [next_state]
0731   0889 74            mov d, b
0732   088A 2C FF FF      mov b, [bp + -1] ; i
0733   088D 10 50 00      mov a, 80
0734   0890 AC            mul a, b
0735   0891 5A            add d, b
0736   0892 2C FD FF      mov b, [bp + -3] ; j
0737   0895 10 02 00      mov a, 2
0738   0898 AC            mul a, b
0739   0899 5A            add d, b
0740   089A DA            push d
0741   089B 26 01 00      mov b, 1
0742   089E E7            pop d
0743   089F 11            mov a, b
0744   08A0 43            mov [d], a
0745   08A1 0A A4 08      jmp _if15_exit
0746   08A4             _if15_exit:
0747   08A4             _if13_exit:
0748   08A4             _for8_update:
0749   08A4 2C FD FF      mov b, [bp + -3] ; j
0750   08A7 FD 77         inc b
0751   08A9 D7            push a
0752   08AA 11            mov a, b
0753   08AB 45 FD FF      mov [bp + -3], a ; j
0754   08AE E4            pop a
0755   08AF 0A 9B 06      jmp _for8_cond
0756   08B2             _for8_exit:
0757   08B2             _for7_update:
0758   08B2 2C FF FF      mov b, [bp + -1] ; i
0759   08B5 FD 77         inc b
0760   08B7 D7            push a
0761   08B8 11            mov a, b
0762   08B9 45 FF FF      mov [bp + -1], a ; i
0763   08BC E4            pop a
0764   08BD 0A 6E 06      jmp _for7_cond
0765   08C0             _for7_exit:
0766   08C0             _for16_init:
0767   08C0 26 00 00      mov b, 0
0768   08C3 D7            push a
0769   08C4 11            mov a, b
0770   08C5 45 FF FF      mov [bp + -1], a ; i
0771   08C8 E4            pop a
0772   08C9             _for16_cond:
0773   08C9 2C FF FF      mov b, [bp + -1] ; i
0774   08CC D7            push a
0775   08CD 11            mov a, b
0776   08CE 26 28 00      mov b, 40
0777   08D1 B0            cmp a, b
0778   08D2 0E            lodflgs
0779   08D3 87 02         and al, %00000010 ; <
0780   08D5 B9 00         cmp al, 0
0781   08D7 0E            lodflgs
0782   08D8 96            not al
0783   08D9 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0784   08DB 22 00         mov ah, 0
0785   08DD 27            mov b, a
0786   08DE E4            pop a
0787   08DF C0 00 00      cmp b, 0
0788   08E2 C6 55 09      je _for16_exit
0789   08E5             _for16_block:
0790   08E5             _for17_init:
0791   08E5 26 00 00      mov b, 0
0792   08E8 D7            push a
0793   08E9 11            mov a, b
0794   08EA 45 FD FF      mov [bp + -3], a ; j
0795   08ED E4            pop a
0796   08EE             _for17_cond:
0797   08EE 2C FD FF      mov b, [bp + -3] ; j
0798   08F1 D7            push a
0799   08F2 11            mov a, b
0800   08F3 26 28 00      mov b, 40
0801   08F6 B0            cmp a, b
0802   08F7 0E            lodflgs
0803   08F8 87 02         and al, %00000010 ; <
0804   08FA B9 00         cmp al, 0
0805   08FC 0E            lodflgs
0806   08FD 96            not al
0807   08FE 87 01         and al, %00000001 ; transform relational logical condition result into a single bit
0808   0900 22 00         mov ah, 0
0809   0902 27            mov b, a
0810   0903 E4            pop a
0811   0904 C0 00 00      cmp b, 0
0812   0907 C6 47 09      je _for17_exit
0813   090A             _for17_block:
0814   090A 29 D9 15      mov b, [curr_state]
0815   090D 74            mov d, b
0816   090E 2C FF FF      mov b, [bp + -1] ; i
0817   0911 10 50 00      mov a, 80
0818   0914 AC            mul a, b
0819   0915 5A            add d, b
0820   0916 2C FD FF      mov b, [bp + -3] ; j
0821   0919 10 02 00      mov a, 2
0822   091C AC            mul a, b
0823   091D 5A            add d, b
0824   091E DA            push d
0825   091F 29 5B 22      mov b, [next_state]
0826   0922 D7            push a
0827   0923 74            mov d, b
0828   0924 2C FF FF      mov b, [bp + -1] ; i
0829   0927 10 50 00      mov a, 80
0830   092A AC            mul a, b
0831   092B 5A            add d, b
0832   092C 2C FD FF      mov b, [bp + -3] ; j
0833   092F 10 02 00      mov a, 2
0834   0932 AC            mul a, b
0835   0933 5A            add d, b
0836   0934 2A            mov b, [d]
0837   0935 E4            pop a
0838   0936 E7            pop d
0839   0937 11            mov a, b
0840   0938 43            mov [d], a
0841   0939             _for17_update:
0842   0939 2C FD FF      mov b, [bp + -3] ; j
0843   093C FD 77         inc b
0844   093E D7            push a
0845   093F 11            mov a, b
0846   0940 45 FD FF      mov [bp + -3], a ; j
0847   0943 E4            pop a
0848   0944 0A EE 08      jmp _for17_cond
0849   0947             _for17_exit:
0850   0947             _for16_update:
0851   0947 2C FF FF      mov b, [bp + -1] ; i
0852   094A FD 77         inc b
0853   094C D7            push a
0854   094D 11            mov a, b
0855   094E 45 FF FF      mov [bp + -1], a ; i
0856   0951 E4            pop a
0857   0952 0A C9 08      jmp _for16_cond
0858   0955             _for16_exit:
0859   0955 F9            leave
0860   0956 09            ret
0861   0957             ; --- END TEXT BLOCK
0862   0957             
0863   0957             ; --- BEGIN DATA BLOCK
0864   0957             curr_state_data: 
0865   0957 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0865   095B 00 00 00 00 
0865   095F 00 00 00 00 
0865   0963 00 00 00 00 
0865   0967 00 00 00 00 
0865   096B 00 00 00 00 
0865   096F 00 00 00 00 
0865   0973 00 00 00 00 
0865   0977 00 00 00 00 
0865   097B 00 00 00 00 
0865   097F 00 00 00 00 
0865   0983 00 00 00 00 
0865   0987 00 00 00 00 
0865   098B 00 00 00 00 
0865   098F 00 00 00 00 
0866   0993 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 
0866   0997 00 00 01 00 
0866   099B 01 00 01 00 
0866   099F 01 00 01 00 
0866   09A3 00 00 00 00 
0866   09A7 01 00 00 00 
0866   09AB 01 00 01 00 
0866   09AF 00 00 00 00 
0866   09B3 01 00 00 00 
0866   09B7 00 00 01 00 
0866   09BB 01 00 01 00 
0866   09BF 01 00 00 00 
0866   09C3 01 00 00 00 
0866   09C7 01 00 00 00 
0866   09CB 00 00 00 00 
0867   09CF 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 
0867   09D3 00 00 01 00 
0867   09D7 01 00 00 00 
0867   09DB 00 00 00 00 
0867   09DF 00 00 01 00 
0867   09E3 01 00 01 00 
0867   09E7 01 00 01 00 
0867   09EB 00 00 00 00 
0867   09EF 00 00 00 00 
0867   09F3 00 00 01 00 
0867   09F7 01 00 01 00 
0867   09FB 01 00 00 00 
0867   09FF 01 00 00 00 
0867   0A03 01 00 00 00 
0867   0A07 01 00 00 00 
0868   0A0B 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0868   0A0F 01 00 01 00 
0868   0A13 01 00 00 00 
0868   0A17 01 00 01 00 
0868   0A1B 00 00 01 00 
0868   0A1F 01 00 00 00 
0868   0A23 00 00 01 00 
0868   0A27 00 00 00 00 
0868   0A2B 00 00 00 00 
0868   0A2F 00 00 00 00 
0868   0A33 00 00 00 00 
0868   0A37 01 00 01 00 
0868   0A3B 01 00 00 00 
0868   0A3F 01 00 01 00 
0868   0A43 01 00 00 00 
0869   0A47 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0869   0A4B 00 00 01 00 
0869   0A4F 01 00 00 00 
0869   0A53 01 00 00 00 
0869   0A57 00 00 01 00 
0869   0A5B 01 00 00 00 
0869   0A5F 00 00 01 00 
0869   0A63 01 00 01 00 
0869   0A67 01 00 01 00 
0869   0A6B 00 00 00 00 
0869   0A6F 00 00 00 00 
0869   0A73 01 00 01 00 
0869   0A77 01 00 00 00 
0869   0A7B 01 00 01 00 
0869   0A7F 01 00 00 00 
0870   0A83 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0870   0A87 00 00 01 00 
0870   0A8B 00 00 00 00 
0870   0A8F 01 00 00 00 
0870   0A93 00 00 01 00 
0870   0A97 01 00 01 00 
0870   0A9B 01 00 01 00 
0870   0A9F 01 00 00 00 
0870   0AA3 00 00 01 00 
0870   0AA7 01 00 01 00 
0870   0AAB 00 00 00 00 
0870   0AAF 01 00 01 00 
0870   0AB3 01 00 00 00 
0870   0AB7 01 00 01 00 
0870   0ABB 01 00 00 00 
0871   0ABF 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 
0871   0AC3 00 00 01 00 
0871   0AC7 00 00 00 00 
0871   0ACB 01 00 00 00 
0871   0ACF 00 00 00 00 
0871   0AD3 01 00 00 00 
0871   0AD7 00 00 00 00 
0871   0ADB 01 00 00 00 
0871   0ADF 00 00 00 00 
0871   0AE3 00 00 00 00 
0871   0AE7 00 00 00 00 
0871   0AEB 01 00 01 00 
0871   0AEF 01 00 00 00 
0871   0AF3 00 00 01 00 
0871   0AF7 01 00 00 00 
0872   0AFB 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 
0872   0AFF 00 00 01 00 
0872   0B03 00 00 00 00 
0872   0B07 00 00 00 00 
0872   0B0B 00 00 00 00 
0872   0B0F 01 00 01 00 
0872   0B13 00 00 01 00 
0872   0B17 01 00 00 00 
0872   0B1B 01 00 00 00 
0872   0B1F 00 00 01 00 
0872   0B23 01 00 01 00 
0872   0B27 01 00 01 00 
0872   0B2B 01 00 00 00 
0872   0B2F 00 00 01 00 
0872   0B33 01 00 00 00 
0873   0B37 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 
0873   0B3B 00 00 01 00 
0873   0B3F 01 00 01 00 
0873   0B43 01 00 01 00 
0873   0B47 00 00 00 00 
0873   0B4B 01 00 01 00 
0873   0B4F 01 00 01 00 
0873   0B53 00 00 00 00 
0873   0B57 01 00 00 00 
0873   0B5B 00 00 01 00 
0873   0B5F 01 00 01 00 
0873   0B63 01 00 00 00 
0873   0B67 01 00 00 00 
0873   0B6B 01 00 01 00 
0873   0B6F 00 00 00 00 
0874   0B73 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 
0874   0B77 00 00 01 00 
0874   0B7B 01 00 00 00 
0874   0B7F 00 00 00 00 
0874   0B83 00 00 01 00 
0874   0B87 01 00 01 00 
0874   0B8B 01 00 01 00 
0874   0B8F 00 00 00 00 
0874   0B93 01 00 00 00 
0874   0B97 00 00 01 00 
0874   0B9B 01 00 01 00 
0874   0B9F 01 00 00 00 
0874   0BA3 01 00 00 00 
0874   0BA7 01 00 01 00 
0874   0BAB 00 00 00 00 
0875   0BAF 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 
0875   0BB3 01 00 01 00 
0875   0BB7 01 00 00 00 
0875   0BBB 01 00 01 00 
0875   0BBF 00 00 01 00 
0875   0BC3 01 00 01 00 
0875   0BC7 00 00 01 00 
0875   0BCB 00 00 00 00 
0875   0BCF 00 00 00 00 
0875   0BD3 00 00 00 00 
0875   0BD7 00 00 00 00 
0875   0BDB 01 00 01 00 
0875   0BDF 01 00 00 00 
0875   0BE3 01 00 01 00 
0875   0BE7 00 00 00 00 
0876   0BEB 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0876   0BEF 00 00 01 00 
0876   0BF3 01 00 00 00 
0876   0BF7 01 00 00 00 
0876   0BFB 00 00 01 00 
0876   0BFF 01 00 01 00 
0876   0C03 00 00 01 00 
0876   0C07 01 00 01 00 
0876   0C0B 01 00 01 00 
0876   0C0F 00 00 00 00 
0876   0C13 00 00 00 00 
0876   0C17 01 00 01 00 
0876   0C1B 01 00 00 00 
0876   0C1F 01 00 01 00 
0876   0C23 01 00 00 00 
0877   0C27 00 00 00 00 .dw 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 
0877   0C2B 00 00 01 00 
0877   0C2F 00 00 00 00 
0877   0C33 00 00 00 00 
0877   0C37 00 00 00 00 
0877   0C3B 01 00 01 00 
0877   0C3F 00 00 01 00 
0877   0C43 01 00 01 00 
0877   0C47 01 00 01 00 
0877   0C4B 01 00 01 00 
0877   0C4F 01 00 01 00 
0877   0C53 01 00 01 00 
0877   0C57 01 00 00 00 
0877   0C5B 00 00 01 00 
0877   0C5F 01 00 00 00 
0878   0C63 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 
0878   0C67 00 00 01 00 
0878   0C6B 01 00 01 00 
0878   0C6F 01 00 01 00 
0878   0C73 00 00 00 00 
0878   0C77 01 00 01 00 
0878   0C7B 01 00 01 00 
0878   0C7F 00 00 00 00 
0878   0C83 01 00 00 00 
0878   0C87 00 00 01 00 
0878   0C8B 01 00 01 00 
0878   0C8F 01 00 00 00 
0878   0C93 01 00 00 00 
0878   0C97 01 00 01 00 
0878   0C9B 01 00 00 00 
0879   0C9F 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 
0879   0CA3 00 00 01 00 
0879   0CA7 01 00 00 00 
0879   0CAB 00 00 00 00 
0879   0CAF 00 00 01 00 
0879   0CB3 01 00 01 00 
0879   0CB7 01 00 01 00 
0879   0CBB 00 00 00 00 
0879   0CBF 01 00 00 00 
0879   0CC3 00 00 01 00 
0879   0CC7 01 00 01 00 
0879   0CCB 01 00 00 00 
0879   0CCF 01 00 00 00 
0879   0CD3 01 00 01 00 
0879   0CD7 01 00 00 00 
0880   0CDB 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 
0880   0CDF 00 00 01 00 
0880   0CE3 01 00 01 00 
0880   0CE7 01 00 01 00 
0880   0CEB 00 00 00 00 
0880   0CEF 01 00 00 00 
0880   0CF3 01 00 01 00 
0880   0CF7 00 00 00 00 
0880   0CFB 01 00 00 00 
0880   0CFF 00 00 01 00 
0880   0D03 01 00 01 00 
0880   0D07 01 00 00 00 
0880   0D0B 01 00 00 00 
0880   0D0F 01 00 01 00 
0880   0D13 01 00 00 00 
0881   0D17 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 
0881   0D1B 00 00 01 00 
0881   0D1F 01 00 00 00 
0881   0D23 00 00 00 00 
0881   0D27 00 00 01 00 
0881   0D2B 01 00 01 00 
0881   0D2F 01 00 01 00 
0881   0D33 00 00 00 00 
0881   0D37 01 00 00 00 
0881   0D3B 00 00 01 00 
0881   0D3F 01 00 01 00 
0881   0D43 01 00 00 00 
0881   0D47 01 00 00 00 
0881   0D4B 01 00 01 00 
0881   0D4F 01 00 00 00 
0882   0D53 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 
0882   0D57 01 00 01 00 
0882   0D5B 01 00 00 00 
0882   0D5F 01 00 01 00 
0882   0D63 00 00 01 00 
0882   0D67 01 00 00 00 
0882   0D6B 00 00 01 00 
0882   0D6F 00 00 00 00 
0882   0D73 01 00 00 00 
0882   0D77 00 00 01 00 
0882   0D7B 01 00 00 00 
0882   0D7F 00 00 01 00 
0882   0D83 01 00 00 00 
0882   0D87 01 00 01 00 
0882   0D8B 01 00 00 00 
0883   0D8F 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0883   0D93 00 00 01 00 
0883   0D97 01 00 00 00 
0883   0D9B 01 00 00 00 
0883   0D9F 00 00 01 00 
0883   0DA3 01 00 00 00 
0883   0DA7 00 00 01 00 
0883   0DAB 01 00 01 00 
0883   0DAF 01 00 01 00 
0883   0DB3 00 00 01 00 
0883   0DB7 01 00 00 00 
0883   0DBB 01 00 01 00 
0883   0DBF 01 00 00 00 
0883   0DC3 01 00 01 00 
0883   0DC7 01 00 00 00 
0884   0DCB 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0884   0DCF 00 00 01 00 
0884   0DD3 01 00 00 00 
0884   0DD7 01 00 00 00 
0884   0DDB 00 00 01 00 
0884   0DDF 01 00 00 00 
0884   0DE3 00 00 01 00 
0884   0DE7 01 00 01 00 
0884   0DEB 01 00 01 00 
0884   0DEF 00 00 01 00 
0884   0DF3 01 00 00 00 
0884   0DF7 01 00 01 00 
0884   0DFB 01 00 00 00 
0884   0DFF 01 00 01 00 
0884   0E03 01 00 00 00 
0885   0E07 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0885   0E0B 00 00 01 00 
0885   0E0F 01 00 00 00 
0885   0E13 01 00 00 00 
0885   0E17 00 00 01 00 
0885   0E1B 01 00 00 00 
0885   0E1F 00 00 01 00 
0885   0E23 01 00 01 00 
0885   0E27 01 00 01 00 
0885   0E2B 00 00 01 00 
0885   0E2F 01 00 00 00 
0885   0E33 01 00 01 00 
0885   0E37 01 00 00 00 
0885   0E3B 01 00 01 00 
0885   0E3F 01 00 00 00 
0886   0E43 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
0886   0E47 00 00 01 00 
0886   0E4B 01 00 00 00 
0886   0E4F 01 00 00 00 
0886   0E53 00 00 01 00 
0886   0E57 01 00 00 00 
0886   0E5B 00 00 01 00 
0886   0E5F 01 00 01 00 
0886   0E63 01 00 01 00 
0886   0E67 00 00 01 00 
0886   0E6B 01 00 00 00 
0886   0E6F 01 00 01 00 
0886   0E73 01 00 00 00 
0886   0E77 01 00 01 00 
0886   0E7B 01 00 00 00 
0887   0E7F 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 
0887   0E83 00 00 01 00 
0887   0E87 01 00 00 00 
0887   0E8B 01 00 00 00 
0887   0E8F 00 00 01 00 
0887   0E93 01 00 00 00 
0887   0E97 00 00 01 00 
0887   0E9B 01 00 01 00 
0887   0E9F 01 00 01 00 
0887   0EA3 00 00 00 00 
0887   0EA7 00 00 00 00 
0887   0EAB 00 00 01 00 
0887   0EAF 01 00 00 00 
0887   0EB3 01 00 01 00 
0887   0EB7 01 00 00 00 
0888   0EBB 00 00 00 00 .dw 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 
0888   0EBF 00 00 01 00 
0888   0EC3 01 00 01 00 
0888   0EC7 01 00 01 00 
0888   0ECB 00 00 00 00 
0888   0ECF 01 00 00 00 
0888   0ED3 01 00 01 00 
0888   0ED7 00 00 00 00 
0888   0EDB 00 00 00 00 
0888   0EDF 00 00 01 00 
0888   0EE3 01 00 01 00 
0888   0EE7 01 00 00 00 
0888   0EEB 01 00 00 00 
0888   0EEF 01 00 01 00 
0888   0EF3 01 00 00 00 
0889   0EF7 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 
0889   0EFB 00 00 01 00 
0889   0EFF 01 00 00 00 
0889   0F03 00 00 00 00 
0889   0F07 00 00 01 00 
0889   0F0B 01 00 01 00 
0889   0F0F 01 00 01 00 
0889   0F13 00 00 00 00 
0889   0F17 00 00 00 00 
0889   0F1B 00 00 01 00 
0889   0F1F 01 00 01 00 
0889   0F23 01 00 00 00 
0889   0F27 01 00 00 00 
0889   0F2B 01 00 01 00 
0889   0F2F 01 00 00 00 
0890   0F33 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 
0890   0F37 01 00 01 00 
0890   0F3B 01 00 00 00 
0890   0F3F 01 00 01 00 
0890   0F43 00 00 01 00 
0890   0F47 01 00 00 00 
0890   0F4B 00 00 01 00 
0890   0F4F 00 00 00 00 
0890   0F53 00 00 00 00 
0890   0F57 00 00 01 00 
0890   0F5B 00 00 00 00 
0890   0F5F 00 00 01 00 
0890   0F63 01 00 00 00 
0890   0F67 01 00 00 00 
0890   0F6B 00 00 00 00 
0891   0F6F 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 
0891   0F73 00 00 01 00 
0891   0F77 01 00 00 00 
0891   0F7B 01 00 00 00 
0891   0F7F 00 00 01 00 
0891   0F83 01 00 00 00 
0891   0F87 00 00 01 00 
0891   0F8B 01 00 01 00 
0891   0F8F 01 00 01 00 
0891   0F93 00 00 01 00 
0891   0F97 00 00 00 00 
0891   0F9B 00 00 01 00 
0891   0F9F 01 00 00 00 
0891   0FA3 01 00 00 00 
0891   0FA7 00 00 00 00 
0892   0FAB 00 00 00 00 .dw 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 
0892   0FAF 01 00 01 00 
0892   0FB3 01 00 00 00 
0892   0FB7 01 00 01 00 
0892   0FBB 00 00 01 00 
0892   0FBF 01 00 00 00 
0892   0FC3 00 00 01 00 
0892   0FC7 00 00 00 00 
0892   0FCB 00 00 00 00 
0892   0FCF 00 00 01 00 
0892   0FD3 00 00 00 00 
0892   0FD7 00 00 01 00 
0892   0FDB 01 00 00 00 
0892   0FDF 01 00 00 00 
0892   0FE3 00 00 00 00 
0893   0FE7 00 00 00 00 .dw 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 
0893   0FEB 00 00 01 00 
0893   0FEF 01 00 00 00 
0893   0FF3 01 00 00 00 
0893   0FF7 00 00 01 00 
0893   0FFB 01 00 00 00 
0893   0FFF 00 00 01 00 
0893   1003 01 00 01 00 
0893   1007 01 00 01 00 
0893   100B 00 00 01 00 
0893   100F 00 00 00 00 
0893   1013 00 00 01 00 
0893   1017 01 00 00 00 
0893   101B 01 00 00 00 
0893   101F 00 00 00 00 
0894   1023 00 00 00 00 .dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0894   1027 00 00 00 00 
0894   102B 00 00 00 00 
0894   102F 00 00 00 00 
0894   1033 00 00 00 00 
0894   1037 00 00 00 00 
0894   103B 00 00 00 00 
0894   103F 00 00 00 00 
0894   1043 00 00 00 00 
0894   1047 00 00 00 00 
0894   104B 00 00 00 00 
0894   104F 00 00 00 00 
0894   1053 00 00 00 00 
0894   1057 00 00 00 00 
0894   105B 00 00 00 00 
0895   105F 00 00       .dw 
0896   1061 00 00 00 00 .fill 1400, 0
0896   1065 00 00 00 00 
0896   1069 00 00 00 00 
0896   106D 00 00 00 00 
0896   1071 00 00 00 00 
0896   1075 00 00 00 00 
0896   1079 00 00 00 00 
0896   107D 00 00 00 00 
0896   1081 00 00 00 00 
0896   1085 00 00 00 00 
0896   1089 00 00 00 00 
0896   108D 00 00 00 00 
0896   1091 00 00 00 00 
0896   1095 00 00 00 00 
0896   1099 00 00 00 00 
0896   109D 00 00 00 00 
0896   10A1 00 00 00 00 
0896   10A5 00 00 00 00 
0896   10A9 00 00 00 00 
0896   10AD 00 00 00 00 
0896   10B1 00 00 00 00 
0896   10B5 00 00 00 00 
0896   10B9 00 00 00 00 
0896   10BD 00 00 00 00 
0896   10C1 00 00 00 00 
0896   10C5 00 00 00 00 
0896   10C9 00 00 00 00 
0896   10CD 00 00 00 00 
0896   10D1 00 00 00 00 
0896   10D5 00 00 00 00 
0896   10D9 00 00 00 00 
0896   10DD 00 00 00 00 
0896   10E1 00 00 00 00 
0896   10E5 00 00 00 00 
0896   10E9 00 00 00 00 
0896   10ED 00 00 00 00 
0896   10F1 00 00 00 00 
0896   10F5 00 00 00 00 
0896   10F9 00 00 00 00 
0896   10FD 00 00 00 00 
0896   1101 00 00 00 00 
0896   1105 00 00 00 00 
0896   1109 00 00 00 00 
0896   110D 00 00 00 00 
0896   1111 00 00 00 00 
0896   1115 00 00 00 00 
0896   1119 00 00 00 00 
0896   111D 00 00 00 00 
0896   1121 00 00 00 00 
0896   1125 00 00 00 00 
0896   1129 00 00 00 00 
0896   112D 00 00 00 00 
0896   1131 00 00 00 00 
0896   1135 00 00 00 00 
0896   1139 00 00 00 00 
0896   113D 00 00 00 00 
0896   1141 00 00 00 00 
0896   1145 00 00 00 00 
0896   1149 00 00 00 00 
0896   114D 00 00 00 00 
0896   1151 00 00 00 00 
0896   1155 00 00 00 00 
0896   1159 00 00 00 00 
0896   115D 00 00 00 00 
0896   1161 00 00 00 00 
0896   1165 00 00 00 00 
0896   1169 00 00 00 00 
0896   116D 00 00 00 00 
0896   1171 00 00 00 00 
0896   1175 00 00 00 00 
0896   1179 00 00 00 00 
0896   117D 00 00 00 00 
0896   1181 00 00 00 00 
0896   1185 00 00 00 00 
0896   1189 00 00 00 00 
0896   118D 00 00 00 00 
0896   1191 00 00 00 00 
0896   1195 00 00 00 00 
0896   1199 00 00 00 00 
0896   119D 00 00 00 00 
0896   11A1 00 00 00 00 
0896   11A5 00 00 00 00 
0896   11A9 00 00 00 00 
0896   11AD 00 00 00 00 
0896   11B1 00 00 00 00 
0896   11B5 00 00 00 00 
0896   11B9 00 00 00 00 
0896   11BD 00 00 00 00 
0896   11C1 00 00 00 00 
0896   11C5 00 00 00 00 
0896   11C9 00 00 00 00 
0896   11CD 00 00 00 00 
0896   11D1 00 00 00 00 
0896   11D5 00 00 00 00 
0896   11D9 00 00 00 00 
0896   11DD 00 00 00 00 
0896   11E1 00 00 00 00 
0896   11E5 00 00 00 00 
0896   11E9 00 00 00 00 
0896   11ED 00 00 00 00 
0896   11F1 00 00 00 00 
0896   11F5 00 00 00 00 
0896   11F9 00 00 00 00 
0896   11FD 00 00 00 00 
0896   1201 00 00 00 00 
0896   1205 00 00 00 00 
0896   1209 00 00 00 00 
0896   120D 00 00 00 00 
0896   1211 00 00 00 00 
0896   1215 00 00 00 00 
0896   1219 00 00 00 00 
0896   121D 00 00 00 00 
0896   1221 00 00 00 00 
0896   1225 00 00 00 00 
0896   1229 00 00 00 00 
0896   122D 00 00 00 00 
0896   1231 00 00 00 00 
0896   1235 00 00 00 00 
0896   1239 00 00 00 00 
0896   123D 00 00 00 00 
0896   1241 00 00 00 00 
0896   1245 00 00 00 00 
0896   1249 00 00 00 00 
0896   124D 00 00 00 00 
0896   1251 00 00 00 00 
0896   1255 00 00 00 00 
0896   1259 00 00 00 00 
0896   125D 00 00 00 00 
0896   1261 00 00 00 00 
0896   1265 00 00 00 00 
0896   1269 00 00 00 00 
0896   126D 00 00 00 00 
0896   1271 00 00 00 00 
0896   1275 00 00 00 00 
0896   1279 00 00 00 00 
0896   127D 00 00 00 00 
0896   1281 00 00 00 00 
0896   1285 00 00 00 00 
0896   1289 00 00 00 00 
0896   128D 00 00 00 00 
0896   1291 00 00 00 00 
0896   1295 00 00 00 00 
0896   1299 00 00 00 00 
0896   129D 00 00 00 00 
0896   12A1 00 00 00 00 
0896   12A5 00 00 00 00 
0896   12A9 00 00 00 00 
0896   12AD 00 00 00 00 
0896   12B1 00 00 00 00 
0896   12B5 00 00 00 00 
0896   12B9 00 00 00 00 
0896   12BD 00 00 00 00 
0896   12C1 00 00 00 00 
0896   12C5 00 00 00 00 
0896   12C9 00 00 00 00 
0896   12CD 00 00 00 00 
0896   12D1 00 00 00 00 
0896   12D5 00 00 00 00 
0896   12D9 00 00 00 00 
0896   12DD 00 00 00 00 
0896   12E1 00 00 00 00 
0896   12E5 00 00 00 00 
0896   12E9 00 00 00 00 
0896   12ED 00 00 00 00 
0896   12F1 00 00 00 00 
0896   12F5 00 00 00 00 
0896   12F9 00 00 00 00 
0896   12FD 00 00 00 00 
0896   1301 00 00 00 00 
0896   1305 00 00 00 00 
0896   1309 00 00 00 00 
0896   130D 00 00 00 00 
0896   1311 00 00 00 00 
0896   1315 00 00 00 00 
0896   1319 00 00 00 00 
0896   131D 00 00 00 00 
0896   1321 00 00 00 00 
0896   1325 00 00 00 00 
0896   1329 00 00 00 00 
0896   132D 00 00 00 00 
0896   1331 00 00 00 00 
0896   1335 00 00 00 00 
0896   1339 00 00 00 00 
0896   133D 00 00 00 00 
0896   1341 00 00 00 00 
0896   1345 00 00 00 00 
0896   1349 00 00 00 00 
0896   134D 00 00 00 00 
0896   1351 00 00 00 00 
0896   1355 00 00 00 00 
0896   1359 00 00 00 00 
0896   135D 00 00 00 00 
0896   1361 00 00 00 00 
0896   1365 00 00 00 00 
0896   1369 00 00 00 00 
0896   136D 00 00 00 00 
0896   1371 00 00 00 00 
0896   1375 00 00 00 00 
0896   1379 00 00 00 00 
0896   137D 00 00 00 00 
0896   1381 00 00 00 00 
0896   1385 00 00 00 00 
0896   1389 00 00 00 00 
0896   138D 00 00 00 00 
0896   1391 00 00 00 00 
0896   1395 00 00 00 00 
0896   1399 00 00 00 00 
0896   139D 00 00 00 00 
0896   13A1 00 00 00 00 
0896   13A5 00 00 00 00 
0896   13A9 00 00 00 00 
0896   13AD 00 00 00 00 
0896   13B1 00 00 00 00 
0896   13B5 00 00 00 00 
0896   13B9 00 00 00 00 
0896   13BD 00 00 00 00 
0896   13C1 00 00 00 00 
0896   13C5 00 00 00 00 
0896   13C9 00 00 00 00 
0896   13CD 00 00 00 00 
0896   13D1 00 00 00 00 
0896   13D5 00 00 00 00 
0896   13D9 00 00 00 00 
0896   13DD 00 00 00 00 
0896   13E1 00 00 00 00 
0896   13E5 00 00 00 00 
0896   13E9 00 00 00 00 
0896   13ED 00 00 00 00 
0896   13F1 00 00 00 00 
0896   13F5 00 00 00 00 
0896   13F9 00 00 00 00 
0896   13FD 00 00 00 00 
0896   1401 00 00 00 00 
0896   1405 00 00 00 00 
0896   1409 00 00 00 00 
0896   140D 00 00 00 00 
0896   1411 00 00 00 00 
0896   1415 00 00 00 00 
0896   1419 00 00 00 00 
0896   141D 00 00 00 00 
0896   1421 00 00 00 00 
0896   1425 00 00 00 00 
0896   1429 00 00 00 00 
0896   142D 00 00 00 00 
0896   1431 00 00 00 00 
0896   1435 00 00 00 00 
0896   1439 00 00 00 00 
0896   143D 00 00 00 00 
0896   1441 00 00 00 00 
0896   1445 00 00 00 00 
0896   1449 00 00 00 00 
0896   144D 00 00 00 00 
0896   1451 00 00 00 00 
0896   1455 00 00 00 00 
0896   1459 00 00 00 00 
0896   145D 00 00 00 00 
0896   1461 00 00 00 00 
0896   1465 00 00 00 00 
0896   1469 00 00 00 00 
0896   146D 00 00 00 00 
0896   1471 00 00 00 00 
0896   1475 00 00 00 00 
0896   1479 00 00 00 00 
0896   147D 00 00 00 00 
0896   1481 00 00 00 00 
0896   1485 00 00 00 00 
0896   1489 00 00 00 00 
0896   148D 00 00 00 00 
0896   1491 00 00 00 00 
0896   1495 00 00 00 00 
0896   1499 00 00 00 00 
0896   149D 00 00 00 00 
0896   14A1 00 00 00 00 
0896   14A5 00 00 00 00 
0896   14A9 00 00 00 00 
0896   14AD 00 00 00 00 
0896   14B1 00 00 00 00 
0896   14B5 00 00 00 00 
0896   14B9 00 00 00 00 
0896   14BD 00 00 00 00 
0896   14C1 00 00 00 00 
0896   14C5 00 00 00 00 
0896   14C9 00 00 00 00 
0896   14CD 00 00 00 00 
0896   14D1 00 00 00 00 
0896   14D5 00 00 00 00 
0896   14D9 00 00 00 00 
0896   14DD 00 00 00 00 
0896   14E1 00 00 00 00 
0896   14E5 00 00 00 00 
0896   14E9 00 00 00 00 
0896   14ED 00 00 00 00 
0896   14F1 00 00 00 00 
0896   14F5 00 00 00 00 
0896   14F9 00 00 00 00 
0896   14FD 00 00 00 00 
0896   1501 00 00 00 00 
0896   1505 00 00 00 00 
0896   1509 00 00 00 00 
0896   150D 00 00 00 00 
0896   1511 00 00 00 00 
0896   1515 00 00 00 00 
0896   1519 00 00 00 00 
0896   151D 00 00 00 00 
0896   1521 00 00 00 00 
0896   1525 00 00 00 00 
0896   1529 00 00 00 00 
0896   152D 00 00 00 00 
0896   1531 00 00 00 00 
0896   1535 00 00 00 00 
0896   1539 00 00 00 00 
0896   153D 00 00 00 00 
0896   1541 00 00 00 00 
0896   1545 00 00 00 00 
0896   1549 00 00 00 00 
0896   154D 00 00 00 00 
0896   1551 00 00 00 00 
0896   1555 00 00 00 00 
0896   1559 00 00 00 00 
0896   155D 00 00 00 00 
0896   1561 00 00 00 00 
0896   1565 00 00 00 00 
0896   1569 00 00 00 00 
0896   156D 00 00 00 00 
0896   1571 00 00 00 00 
0896   1575 00 00 00 00 
0896   1579 00 00 00 00 
0896   157D 00 00 00 00 
0896   1581 00 00 00 00 
0896   1585 00 00 00 00 
0896   1589 00 00 00 00 
0896   158D 00 00 00 00 
0896   1591 00 00 00 00 
0896   1595 00 00 00 00 
0896   1599 00 00 00 00 
0896   159D 00 00 00 00 
0896   15A1 00 00 00 00 
0896   15A5 00 00 00 00 
0896   15A9 00 00 00 00 
0896   15AD 00 00 00 00 
0896   15B1 00 00 00 00 
0896   15B5 00 00 00 00 
0896   15B9 00 00 00 00 
0896   15BD 00 00 00 00 
0896   15C1 00 00 00 00 
0896   15C5 00 00 00 00 
0896   15C9 00 00 00 00 
0896   15CD 00 00 00 00 
0896   15D1 00 00 00 00 
0896   15D5 00 00 00 00 
0897   15D9 57 09       curr_state: .dw curr_state_data
0898   15DB 00 00 00 00 next_state_data: .fill 3200, 0
0898   15DF 00 00 00 00 
0898   15E3 00 00 00 00 
0898   15E7 00 00 00 00 
0898   15EB 00 00 00 00 
0898   15EF 00 00 00 00 
0898   15F3 00 00 00 00 
0898   15F7 00 00 00 00 
0898   15FB 00 00 00 00 
0898   15FF 00 00 00 00 
0898   1603 00 00 00 00 
0898   1607 00 00 00 00 
0898   160B 00 00 00 00 
0898   160F 00 00 00 00 
0898   1613 00 00 00 00 
0898   1617 00 00 00 00 
0898   161B 00 00 00 00 
0898   161F 00 00 00 00 
0898   1623 00 00 00 00 
0898   1627 00 00 00 00 
0898   162B 00 00 00 00 
0898   162F 00 00 00 00 
0898   1633 00 00 00 00 
0898   1637 00 00 00 00 
0898   163B 00 00 00 00 
0898   163F 00 00 00 00 
0898   1643 00 00 00 00 
0898   1647 00 00 00 00 
0898   164B 00 00 00 00 
0898   164F 00 00 00 00 
0898   1653 00 00 00 00 
0898   1657 00 00 00 00 
0898   165B 00 00 00 00 
0898   165F 00 00 00 00 
0898   1663 00 00 00 00 
0898   1667 00 00 00 00 
0898   166B 00 00 00 00 
0898   166F 00 00 00 00 
0898   1673 00 00 00 00 
0898   1677 00 00 00 00 
0898   167B 00 00 00 00 
0898   167F 00 00 00 00 
0898   1683 00 00 00 00 
0898   1687 00 00 00 00 
0898   168B 00 00 00 00 
0898   168F 00 00 00 00 
0898   1693 00 00 00 00 
0898   1697 00 00 00 00 
0898   169B 00 00 00 00 
0898   169F 00 00 00 00 
0898   16A3 00 00 00 00 
0898   16A7 00 00 00 00 
0898   16AB 00 00 00 00 
0898   16AF 00 00 00 00 
0898   16B3 00 00 00 00 
0898   16B7 00 00 00 00 
0898   16BB 00 00 00 00 
0898   16BF 00 00 00 00 
0898   16C3 00 00 00 00 
0898   16C7 00 00 00 00 
0898   16CB 00 00 00 00 
0898   16CF 00 00 00 00 
0898   16D3 00 00 00 00 
0898   16D7 00 00 00 00 
0898   16DB 00 00 00 00 
0898   16DF 00 00 00 00 
0898   16E3 00 00 00 00 
0898   16E7 00 00 00 00 
0898   16EB 00 00 00 00 
0898   16EF 00 00 00 00 
0898   16F3 00 00 00 00 
0898   16F7 00 00 00 00 
0898   16FB 00 00 00 00 
0898   16FF 00 00 00 00 
0898   1703 00 00 00 00 
0898   1707 00 00 00 00 
0898   170B 00 00 00 00 
0898   170F 00 00 00 00 
0898   1713 00 00 00 00 
0898   1717 00 00 00 00 
0898   171B 00 00 00 00 
0898   171F 00 00 00 00 
0898   1723 00 00 00 00 
0898   1727 00 00 00 00 
0898   172B 00 00 00 00 
0898   172F 00 00 00 00 
0898   1733 00 00 00 00 
0898   1737 00 00 00 00 
0898   173B 00 00 00 00 
0898   173F 00 00 00 00 
0898   1743 00 00 00 00 
0898   1747 00 00 00 00 
0898   174B 00 00 00 00 
0898   174F 00 00 00 00 
0898   1753 00 00 00 00 
0898   1757 00 00 00 00 
0898   175B 00 00 00 00 
0898   175F 00 00 00 00 
0898   1763 00 00 00 00 
0898   1767 00 00 00 00 
0898   176B 00 00 00 00 
0898   176F 00 00 00 00 
0898   1773 00 00 00 00 
0898   1777 00 00 00 00 
0898   177B 00 00 00 00 
0898   177F 00 00 00 00 
0898   1783 00 00 00 00 
0898   1787 00 00 00 00 
0898   178B 00 00 00 00 
0898   178F 00 00 00 00 
0898   1793 00 00 00 00 
0898   1797 00 00 00 00 
0898   179B 00 00 00 00 
0898   179F 00 00 00 00 
0898   17A3 00 00 00 00 
0898   17A7 00 00 00 00 
0898   17AB 00 00 00 00 
0898   17AF 00 00 00 00 
0898   17B3 00 00 00 00 
0898   17B7 00 00 00 00 
0898   17BB 00 00 00 00 
0898   17BF 00 00 00 00 
0898   17C3 00 00 00 00 
0898   17C7 00 00 00 00 
0898   17CB 00 00 00 00 
0898   17CF 00 00 00 00 
0898   17D3 00 00 00 00 
0898   17D7 00 00 00 00 
0898   17DB 00 00 00 00 
0898   17DF 00 00 00 00 
0898   17E3 00 00 00 00 
0898   17E7 00 00 00 00 
0898   17EB 00 00 00 00 
0898   17EF 00 00 00 00 
0898   17F3 00 00 00 00 
0898   17F7 00 00 00 00 
0898   17FB 00 00 00 00 
0898   17FF 00 00 00 00 
0898   1803 00 00 00 00 
0898   1807 00 00 00 00 
0898   180B 00 00 00 00 
0898   180F 00 00 00 00 
0898   1813 00 00 00 00 
0898   1817 00 00 00 00 
0898   181B 00 00 00 00 
0898   181F 00 00 00 00 
0898   1823 00 00 00 00 
0898   1827 00 00 00 00 
0898   182B 00 00 00 00 
0898   182F 00 00 00 00 
0898   1833 00 00 00 00 
0898   1837 00 00 00 00 
0898   183B 00 00 00 00 
0898   183F 00 00 00 00 
0898   1843 00 00 00 00 
0898   1847 00 00 00 00 
0898   184B 00 00 00 00 
0898   184F 00 00 00 00 
0898   1853 00 00 00 00 
0898   1857 00 00 00 00 
0898   185B 00 00 00 00 
0898   185F 00 00 00 00 
0898   1863 00 00 00 00 
0898   1867 00 00 00 00 
0898   186B 00 00 00 00 
0898   186F 00 00 00 00 
0898   1873 00 00 00 00 
0898   1877 00 00 00 00 
0898   187B 00 00 00 00 
0898   187F 00 00 00 00 
0898   1883 00 00 00 00 
0898   1887 00 00 00 00 
0898   188B 00 00 00 00 
0898   188F 00 00 00 00 
0898   1893 00 00 00 00 
0898   1897 00 00 00 00 
0898   189B 00 00 00 00 
0898   189F 00 00 00 00 
0898   18A3 00 00 00 00 
0898   18A7 00 00 00 00 
0898   18AB 00 00 00 00 
0898   18AF 00 00 00 00 
0898   18B3 00 00 00 00 
0898   18B7 00 00 00 00 
0898   18BB 00 00 00 00 
0898   18BF 00 00 00 00 
0898   18C3 00 00 00 00 
0898   18C7 00 00 00 00 
0898   18CB 00 00 00 00 
0898   18CF 00 00 00 00 
0898   18D3 00 00 00 00 
0898   18D7 00 00 00 00 
0898   18DB 00 00 00 00 
0898   18DF 00 00 00 00 
0898   18E3 00 00 00 00 
0898   18E7 00 00 00 00 
0898   18EB 00 00 00 00 
0898   18EF 00 00 00 00 
0898   18F3 00 00 00 00 
0898   18F7 00 00 00 00 
0898   18FB 00 00 00 00 
0898   18FF 00 00 00 00 
0898   1903 00 00 00 00 
0898   1907 00 00 00 00 
0898   190B 00 00 00 00 
0898   190F 00 00 00 00 
0898   1913 00 00 00 00 
0898   1917 00 00 00 00 
0898   191B 00 00 00 00 
0898   191F 00 00 00 00 
0898   1923 00 00 00 00 
0898   1927 00 00 00 00 
0898   192B 00 00 00 00 
0898   192F 00 00 00 00 
0898   1933 00 00 00 00 
0898   1937 00 00 00 00 
0898   193B 00 00 00 00 
0898   193F 00 00 00 00 
0898   1943 00 00 00 00 
0898   1947 00 00 00 00 
0898   194B 00 00 00 00 
0898   194F 00 00 00 00 
0898   1953 00 00 00 00 
0898   1957 00 00 00 00 
0898   195B 00 00 00 00 
0898   195F 00 00 00 00 
0898   1963 00 00 00 00 
0898   1967 00 00 00 00 
0898   196B 00 00 00 00 
0898   196F 00 00 00 00 
0898   1973 00 00 00 00 
0898   1977 00 00 00 00 
0898   197B 00 00 00 00 
0898   197F 00 00 00 00 
0898   1983 00 00 00 00 
0898   1987 00 00 00 00 
0898   198B 00 00 00 00 
0898   198F 00 00 00 00 
0898   1993 00 00 00 00 
0898   1997 00 00 00 00 
0898   199B 00 00 00 00 
0898   199F 00 00 00 00 
0898   19A3 00 00 00 00 
0898   19A7 00 00 00 00 
0898   19AB 00 00 00 00 
0898   19AF 00 00 00 00 
0898   19B3 00 00 00 00 
0898   19B7 00 00 00 00 
0898   19BB 00 00 00 00 
0898   19BF 00 00 00 00 
0898   19C3 00 00 00 00 
0898   19C7 00 00 00 00 
0898   19CB 00 00 00 00 
0898   19CF 00 00 00 00 
0898   19D3 00 00 00 00 
0898   19D7 00 00 00 00 
0898   19DB 00 00 00 00 
0898   19DF 00 00 00 00 
0898   19E3 00 00 00 00 
0898   19E7 00 00 00 00 
0898   19EB 00 00 00 00 
0898   19EF 00 00 00 00 
0898   19F3 00 00 00 00 
0898   19F7 00 00 00 00 
0898   19FB 00 00 00 00 
0898   19FF 00 00 00 00 
0898   1A03 00 00 00 00 
0898   1A07 00 00 00 00 
0898   1A0B 00 00 00 00 
0898   1A0F 00 00 00 00 
0898   1A13 00 00 00 00 
0898   1A17 00 00 00 00 
0898   1A1B 00 00 00 00 
0898   1A1F 00 00 00 00 
0898   1A23 00 00 00 00 
0898   1A27 00 00 00 00 
0898   1A2B 00 00 00 00 
0898   1A2F 00 00 00 00 
0898   1A33 00 00 00 00 
0898   1A37 00 00 00 00 
0898   1A3B 00 00 00 00 
0898   1A3F 00 00 00 00 
0898   1A43 00 00 00 00 
0898   1A47 00 00 00 00 
0898   1A4B 00 00 00 00 
0898   1A4F 00 00 00 00 
0898   1A53 00 00 00 00 
0898   1A57 00 00 00 00 
0898   1A5B 00 00 00 00 
0898   1A5F 00 00 00 00 
0898   1A63 00 00 00 00 
0898   1A67 00 00 00 00 
0898   1A6B 00 00 00 00 
0898   1A6F 00 00 00 00 
0898   1A73 00 00 00 00 
0898   1A77 00 00 00 00 
0898   1A7B 00 00 00 00 
0898   1A7F 00 00 00 00 
0898   1A83 00 00 00 00 
0898   1A87 00 00 00 00 
0898   1A8B 00 00 00 00 
0898   1A8F 00 00 00 00 
0898   1A93 00 00 00 00 
0898   1A97 00 00 00 00 
0898   1A9B 00 00 00 00 
0898   1A9F 00 00 00 00 
0898   1AA3 00 00 00 00 
0898   1AA7 00 00 00 00 
0898   1AAB 00 00 00 00 
0898   1AAF 00 00 00 00 
0898   1AB3 00 00 00 00 
0898   1AB7 00 00 00 00 
0898   1ABB 00 00 00 00 
0898   1ABF 00 00 00 00 
0898   1AC3 00 00 00 00 
0898   1AC7 00 00 00 00 
0898   1ACB 00 00 00 00 
0898   1ACF 00 00 00 00 
0898   1AD3 00 00 00 00 
0898   1AD7 00 00 00 00 
0898   1ADB 00 00 00 00 
0898   1ADF 00 00 00 00 
0898   1AE3 00 00 00 00 
0898   1AE7 00 00 00 00 
0898   1AEB 00 00 00 00 
0898   1AEF 00 00 00 00 
0898   1AF3 00 00 00 00 
0898   1AF7 00 00 00 00 
0898   1AFB 00 00 00 00 
0898   1AFF 00 00 00 00 
0898   1B03 00 00 00 00 
0898   1B07 00 00 00 00 
0898   1B0B 00 00 00 00 
0898   1B0F 00 00 00 00 
0898   1B13 00 00 00 00 
0898   1B17 00 00 00 00 
0898   1B1B 00 00 00 00 
0898   1B1F 00 00 00 00 
0898   1B23 00 00 00 00 
0898   1B27 00 00 00 00 
0898   1B2B 00 00 00 00 
0898   1B2F 00 00 00 00 
0898   1B33 00 00 00 00 
0898   1B37 00 00 00 00 
0898   1B3B 00 00 00 00 
0898   1B3F 00 00 00 00 
0898   1B43 00 00 00 00 
0898   1B47 00 00 00 00 
0898   1B4B 00 00 00 00 
0898   1B4F 00 00 00 00 
0898   1B53 00 00 00 00 
0898   1B57 00 00 00 00 
0898   1B5B 00 00 00 00 
0898   1B5F 00 00 00 00 
0898   1B63 00 00 00 00 
0898   1B67 00 00 00 00 
0898   1B6B 00 00 00 00 
0898   1B6F 00 00 00 00 
0898   1B73 00 00 00 00 
0898   1B77 00 00 00 00 
0898   1B7B 00 00 00 00 
0898   1B7F 00 00 00 00 
0898   1B83 00 00 00 00 
0898   1B87 00 00 00 00 
0898   1B8B 00 00 00 00 
0898   1B8F 00 00 00 00 
0898   1B93 00 00 00 00 
0898   1B97 00 00 00 00 
0898   1B9B 00 00 00 00 
0898   1B9F 00 00 00 00 
0898   1BA3 00 00 00 00 
0898   1BA7 00 00 00 00 
0898   1BAB 00 00 00 00 
0898   1BAF 00 00 00 00 
0898   1BB3 00 00 00 00 
0898   1BB7 00 00 00 00 
0898   1BBB 00 00 00 00 
0898   1BBF 00 00 00 00 
0898   1BC3 00 00 00 00 
0898   1BC7 00 00 00 00 
0898   1BCB 00 00 00 00 
0898   1BCF 00 00 00 00 
0898   1BD3 00 00 00 00 
0898   1BD7 00 00 00 00 
0898   1BDB 00 00 00 00 
0898   1BDF 00 00 00 00 
0898   1BE3 00 00 00 00 
0898   1BE7 00 00 00 00 
0898   1BEB 00 00 00 00 
0898   1BEF 00 00 00 00 
0898   1BF3 00 00 00 00 
0898   1BF7 00 00 00 00 
0898   1BFB 00 00 00 00 
0898   1BFF 00 00 00 00 
0898   1C03 00 00 00 00 
0898   1C07 00 00 00 00 
0898   1C0B 00 00 00 00 
0898   1C0F 00 00 00 00 
0898   1C13 00 00 00 00 
0898   1C17 00 00 00 00 
0898   1C1B 00 00 00 00 
0898   1C1F 00 00 00 00 
0898   1C23 00 00 00 00 
0898   1C27 00 00 00 00 
0898   1C2B 00 00 00 00 
0898   1C2F 00 00 00 00 
0898   1C33 00 00 00 00 
0898   1C37 00 00 00 00 
0898   1C3B 00 00 00 00 
0898   1C3F 00 00 00 00 
0898   1C43 00 00 00 00 
0898   1C47 00 00 00 00 
0898   1C4B 00 00 00 00 
0898   1C4F 00 00 00 00 
0898   1C53 00 00 00 00 
0898   1C57 00 00 00 00 
0898   1C5B 00 00 00 00 
0898   1C5F 00 00 00 00 
0898   1C63 00 00 00 00 
0898   1C67 00 00 00 00 
0898   1C6B 00 00 00 00 
0898   1C6F 00 00 00 00 
0898   1C73 00 00 00 00 
0898   1C77 00 00 00 00 
0898   1C7B 00 00 00 00 
0898   1C7F 00 00 00 00 
0898   1C83 00 00 00 00 
0898   1C87 00 00 00 00 
0898   1C8B 00 00 00 00 
0898   1C8F 00 00 00 00 
0898   1C93 00 00 00 00 
0898   1C97 00 00 00 00 
0898   1C9B 00 00 00 00 
0898   1C9F 00 00 00 00 
0898   1CA3 00 00 00 00 
0898   1CA7 00 00 00 00 
0898   1CAB 00 00 00 00 
0898   1CAF 00 00 00 00 
0898   1CB3 00 00 00 00 
0898   1CB7 00 00 00 00 
0898   1CBB 00 00 00 00 
0898   1CBF 00 00 00 00 
0898   1CC3 00 00 00 00 
0898   1CC7 00 00 00 00 
0898   1CCB 00 00 00 00 
0898   1CCF 00 00 00 00 
0898   1CD3 00 00 00 00 
0898   1CD7 00 00 00 00 
0898   1CDB 00 00 00 00 
0898   1CDF 00 00 00 00 
0898   1CE3 00 00 00 00 
0898   1CE7 00 00 00 00 
0898   1CEB 00 00 00 00 
0898   1CEF 00 00 00 00 
0898   1CF3 00 00 00 00 
0898   1CF7 00 00 00 00 
0898   1CFB 00 00 00 00 
0898   1CFF 00 00 00 00 
0898   1D03 00 00 00 00 
0898   1D07 00 00 00 00 
0898   1D0B 00 00 00 00 
0898   1D0F 00 00 00 00 
0898   1D13 00 00 00 00 
0898   1D17 00 00 00 00 
0898   1D1B 00 00 00 00 
0898   1D1F 00 00 00 00 
0898   1D23 00 00 00 00 
0898   1D27 00 00 00 00 
0898   1D2B 00 00 00 00 
0898   1D2F 00 00 00 00 
0898   1D33 00 00 00 00 
0898   1D37 00 00 00 00 
0898   1D3B 00 00 00 00 
0898   1D3F 00 00 00 00 
0898   1D43 00 00 00 00 
0898   1D47 00 00 00 00 
0898   1D4B 00 00 00 00 
0898   1D4F 00 00 00 00 
0898   1D53 00 00 00 00 
0898   1D57 00 00 00 00 
0898   1D5B 00 00 00 00 
0898   1D5F 00 00 00 00 
0898   1D63 00 00 00 00 
0898   1D67 00 00 00 00 
0898   1D6B 00 00 00 00 
0898   1D6F 00 00 00 00 
0898   1D73 00 00 00 00 
0898   1D77 00 00 00 00 
0898   1D7B 00 00 00 00 
0898   1D7F 00 00 00 00 
0898   1D83 00 00 00 00 
0898   1D87 00 00 00 00 
0898   1D8B 00 00 00 00 
0898   1D8F 00 00 00 00 
0898   1D93 00 00 00 00 
0898   1D97 00 00 00 00 
0898   1D9B 00 00 00 00 
0898   1D9F 00 00 00 00 
0898   1DA3 00 00 00 00 
0898   1DA7 00 00 00 00 
0898   1DAB 00 00 00 00 
0898   1DAF 00 00 00 00 
0898   1DB3 00 00 00 00 
0898   1DB7 00 00 00 00 
0898   1DBB 00 00 00 00 
0898   1DBF 00 00 00 00 
0898   1DC3 00 00 00 00 
0898   1DC7 00 00 00 00 
0898   1DCB 00 00 00 00 
0898   1DCF 00 00 00 00 
0898   1DD3 00 00 00 00 
0898   1DD7 00 00 00 00 
0898   1DDB 00 00 00 00 
0898   1DDF 00 00 00 00 
0898   1DE3 00 00 00 00 
0898   1DE7 00 00 00 00 
0898   1DEB 00 00 00 00 
0898   1DEF 00 00 00 00 
0898   1DF3 00 00 00 00 
0898   1DF7 00 00 00 00 
0898   1DFB 00 00 00 00 
0898   1DFF 00 00 00 00 
0898   1E03 00 00 00 00 
0898   1E07 00 00 00 00 
0898   1E0B 00 00 00 00 
0898   1E0F 00 00 00 00 
0898   1E13 00 00 00 00 
0898   1E17 00 00 00 00 
0898   1E1B 00 00 00 00 
0898   1E1F 00 00 00 00 
0898   1E23 00 00 00 00 
0898   1E27 00 00 00 00 
0898   1E2B 00 00 00 00 
0898   1E2F 00 00 00 00 
0898   1E33 00 00 00 00 
0898   1E37 00 00 00 00 
0898   1E3B 00 00 00 00 
0898   1E3F 00 00 00 00 
0898   1E43 00 00 00 00 
0898   1E47 00 00 00 00 
0898   1E4B 00 00 00 00 
0898   1E4F 00 00 00 00 
0898   1E53 00 00 00 00 
0898   1E57 00 00 00 00 
0898   1E5B 00 00 00 00 
0898   1E5F 00 00 00 00 
0898   1E63 00 00 00 00 
0898   1E67 00 00 00 00 
0898   1E6B 00 00 00 00 
0898   1E6F 00 00 00 00 
0898   1E73 00 00 00 00 
0898   1E77 00 00 00 00 
0898   1E7B 00 00 00 00 
0898   1E7F 00 00 00 00 
0898   1E83 00 00 00 00 
0898   1E87 00 00 00 00 
0898   1E8B 00 00 00 00 
0898   1E8F 00 00 00 00 
0898   1E93 00 00 00 00 
0898   1E97 00 00 00 00 
0898   1E9B 00 00 00 00 
0898   1E9F 00 00 00 00 
0898   1EA3 00 00 00 00 
0898   1EA7 00 00 00 00 
0898   1EAB 00 00 00 00 
0898   1EAF 00 00 00 00 
0898   1EB3 00 00 00 00 
0898   1EB7 00 00 00 00 
0898   1EBB 00 00 00 00 
0898   1EBF 00 00 00 00 
0898   1EC3 00 00 00 00 
0898   1EC7 00 00 00 00 
0898   1ECB 00 00 00 00 
0898   1ECF 00 00 00 00 
0898   1ED3 00 00 00 00 
0898   1ED7 00 00 00 00 
0898   1EDB 00 00 00 00 
0898   1EDF 00 00 00 00 
0898   1EE3 00 00 00 00 
0898   1EE7 00 00 00 00 
0898   1EEB 00 00 00 00 
0898   1EEF 00 00 00 00 
0898   1EF3 00 00 00 00 
0898   1EF7 00 00 00 00 
0898   1EFB 00 00 00 00 
0898   1EFF 00 00 00 00 
0898   1F03 00 00 00 00 
0898   1F07 00 00 00 00 
0898   1F0B 00 00 00 00 
0898   1F0F 00 00 00 00 
0898   1F13 00 00 00 00 
0898   1F17 00 00 00 00 
0898   1F1B 00 00 00 00 
0898   1F1F 00 00 00 00 
0898   1F23 00 00 00 00 
0898   1F27 00 00 00 00 
0898   1F2B 00 00 00 00 
0898   1F2F 00 00 00 00 
0898   1F33 00 00 00 00 
0898   1F37 00 00 00 00 
0898   1F3B 00 00 00 00 
0898   1F3F 00 00 00 00 
0898   1F43 00 00 00 00 
0898   1F47 00 00 00 00 
0898   1F4B 00 00 00 00 
0898   1F4F 00 00 00 00 
0898   1F53 00 00 00 00 
0898   1F57 00 00 00 00 
0898   1F5B 00 00 00 00 
0898   1F5F 00 00 00 00 
0898   1F63 00 00 00 00 
0898   1F67 00 00 00 00 
0898   1F6B 00 00 00 00 
0898   1F6F 00 00 00 00 
0898   1F73 00 00 00 00 
0898   1F77 00 00 00 00 
0898   1F7B 00 00 00 00 
0898   1F7F 00 00 00 00 
0898   1F83 00 00 00 00 
0898   1F87 00 00 00 00 
0898   1F8B 00 00 00 00 
0898   1F8F 00 00 00 00 
0898   1F93 00 00 00 00 
0898   1F97 00 00 00 00 
0898   1F9B 00 00 00 00 
0898   1F9F 00 00 00 00 
0898   1FA3 00 00 00 00 
0898   1FA7 00 00 00 00 
0898   1FAB 00 00 00 00 
0898   1FAF 00 00 00 00 
0898   1FB3 00 00 00 00 
0898   1FB7 00 00 00 00 
0898   1FBB 00 00 00 00 
0898   1FBF 00 00 00 00 
0898   1FC3 00 00 00 00 
0898   1FC7 00 00 00 00 
0898   1FCB 00 00 00 00 
0898   1FCF 00 00 00 00 
0898   1FD3 00 00 00 00 
0898   1FD7 00 00 00 00 
0898   1FDB 00 00 00 00 
0898   1FDF 00 00 00 00 
0898   1FE3 00 00 00 00 
0898   1FE7 00 00 00 00 
0898   1FEB 00 00 00 00 
0898   1FEF 00 00 00 00 
0898   1FF3 00 00 00 00 
0898   1FF7 00 00 00 00 
0898   1FFB 00 00 00 00 
0898   1FFF 00 00 00 00 
0898   2003 00 00 00 00 
0898   2007 00 00 00 00 
0898   200B 00 00 00 00 
0898   200F 00 00 00 00 
0898   2013 00 00 00 00 
0898   2017 00 00 00 00 
0898   201B 00 00 00 00 
0898   201F 00 00 00 00 
0898   2023 00 00 00 00 
0898   2027 00 00 00 00 
0898   202B 00 00 00 00 
0898   202F 00 00 00 00 
0898   2033 00 00 00 00 
0898   2037 00 00 00 00 
0898   203B 00 00 00 00 
0898   203F 00 00 00 00 
0898   2043 00 00 00 00 
0898   2047 00 00 00 00 
0898   204B 00 00 00 00 
0898   204F 00 00 00 00 
0898   2053 00 00 00 00 
0898   2057 00 00 00 00 
0898   205B 00 00 00 00 
0898   205F 00 00 00 00 
0898   2063 00 00 00 00 
0898   2067 00 00 00 00 
0898   206B 00 00 00 00 
0898   206F 00 00 00 00 
0898   2073 00 00 00 00 
0898   2077 00 00 00 00 
0898   207B 00 00 00 00 
0898   207F 00 00 00 00 
0898   2083 00 00 00 00 
0898   2087 00 00 00 00 
0898   208B 00 00 00 00 
0898   208F 00 00 00 00 
0898   2093 00 00 00 00 
0898   2097 00 00 00 00 
0898   209B 00 00 00 00 
0898   209F 00 00 00 00 
0898   20A3 00 00 00 00 
0898   20A7 00 00 00 00 
0898   20AB 00 00 00 00 
0898   20AF 00 00 00 00 
0898   20B3 00 00 00 00 
0898   20B7 00 00 00 00 
0898   20BB 00 00 00 00 
0898   20BF 00 00 00 00 
0898   20C3 00 00 00 00 
0898   20C7 00 00 00 00 
0898   20CB 00 00 00 00 
0898   20CF 00 00 00 00 
0898   20D3 00 00 00 00 
0898   20D7 00 00 00 00 
0898   20DB 00 00 00 00 
0898   20DF 00 00 00 00 
0898   20E3 00 00 00 00 
0898   20E7 00 00 00 00 
0898   20EB 00 00 00 00 
0898   20EF 00 00 00 00 
0898   20F3 00 00 00 00 
0898   20F7 00 00 00 00 
0898   20FB 00 00 00 00 
0898   20FF 00 00 00 00 
0898   2103 00 00 00 00 
0898   2107 00 00 00 00 
0898   210B 00 00 00 00 
0898   210F 00 00 00 00 
0898   2113 00 00 00 00 
0898   2117 00 00 00 00 
0898   211B 00 00 00 00 
0898   211F 00 00 00 00 
0898   2123 00 00 00 00 
0898   2127 00 00 00 00 
0898   212B 00 00 00 00 
0898   212F 00 00 00 00 
0898   2133 00 00 00 00 
0898   2137 00 00 00 00 
0898   213B 00 00 00 00 
0898   213F 00 00 00 00 
0898   2143 00 00 00 00 
0898   2147 00 00 00 00 
0898   214B 00 00 00 00 
0898   214F 00 00 00 00 
0898   2153 00 00 00 00 
0898   2157 00 00 00 00 
0898   215B 00 00 00 00 
0898   215F 00 00 00 00 
0898   2163 00 00 00 00 
0898   2167 00 00 00 00 
0898   216B 00 00 00 00 
0898   216F 00 00 00 00 
0898   2173 00 00 00 00 
0898   2177 00 00 00 00 
0898   217B 00 00 00 00 
0898   217F 00 00 00 00 
0898   2183 00 00 00 00 
0898   2187 00 00 00 00 
0898   218B 00 00 00 00 
0898   218F 00 00 00 00 
0898   2193 00 00 00 00 
0898   2197 00 00 00 00 
0898   219B 00 00 00 00 
0898   219F 00 00 00 00 
0898   21A3 00 00 00 00 
0898   21A7 00 00 00 00 
0898   21AB 00 00 00 00 
0898   21AF 00 00 00 00 
0898   21B3 00 00 00 00 
0898   21B7 00 00 00 00 
0898   21BB 00 00 00 00 
0898   21BF 00 00 00 00 
0898   21C3 00 00 00 00 
0898   21C7 00 00 00 00 
0898   21CB 00 00 00 00 
0898   21CF 00 00 00 00 
0898   21D3 00 00 00 00 
0898   21D7 00 00 00 00 
0898   21DB 00 00 00 00 
0898   21DF 00 00 00 00 
0898   21E3 00 00 00 00 
0898   21E7 00 00 00 00 
0898   21EB 00 00 00 00 
0898   21EF 00 00 00 00 
0898   21F3 00 00 00 00 
0898   21F7 00 00 00 00 
0898   21FB 00 00 00 00 
0898   21FF 00 00 00 00 
0898   2203 00 00 00 00 
0898   2207 00 00 00 00 
0898   220B 00 00 00 00 
0898   220F 00 00 00 00 
0898   2213 00 00 00 00 
0898   2217 00 00 00 00 
0898   221B 00 00 00 00 
0898   221F 00 00 00 00 
0898   2223 00 00 00 00 
0898   2227 00 00 00 00 
0898   222B 00 00 00 00 
0898   222F 00 00 00 00 
0898   2233 00 00 00 00 
0898   2237 00 00 00 00 
0898   223B 00 00 00 00 
0898   223F 00 00 00 00 
0898   2243 00 00 00 00 
0898   2247 00 00 00 00 
0898   224B 00 00 00 00 
0898   224F 00 00 00 00 
0898   2253 00 00 00 00 
0898   2257 00 00 00 00 
0899   225B DB 15       next_state: .dw next_state_data
0900   225D 47 65 6E 65 _string_0: .db "Generations: ", 0
0900   2261 72 61 74 69 
0900   2265 6F 6E 73 3A 
0900   2269 20 00 
0901   226B 40 20 00    _string_1: .db "@ ", 0
0902   226E 2E 20 00    _string_2: .db ". ", 0
0903   2271 0A 00       _string_3: .db "\n", 0
0904   2273             ; --- END DATA BLOCK
0905   2273             
0906   2273             ; --- BEGIN INCLUDE BLOCK
0907   2273             .include "lib/stdio.asm"
0001+  2273             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  2273             ; stdio.s
0003+  2273             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  2273             .include "lib/string.asm"
0001++ 2273             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 2273             ; string.s
0003++ 2273             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 2273             
0005++ 2273             
0006++ 2273             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 2273             ; strrev
0008++ 2273             ; reverse a string
0009++ 2273             ; D = string address
0010++ 2273             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 2273             ; 01234
0012++ 2273             strrev:
0013++ 2273 4B          	pusha
0014++ 2274 07 BA 22    	call strlen	; length in C
0015++ 2277 12          	mov a, c
0016++ 2278 AF 01 00    	cmp a, 1
0017++ 227B D0 95 22    	jleu strrev_end	; check string length. string len must be > 1
0018++ 227E 7D          	dec a
0019++ 227F FD 4E       	mov si, d	; beginning of string
0020++ 2281 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 2283 59          	add d, a	; end of string
0022++ 2284 12          	mov a, c
0023++ 2285 FD 9B       	shr a		; divide by 2
0024++ 2287 39          	mov c, a	; C now counts the steps
0025++ 2288             strrev_L0:
0026++ 2288 32          	mov bl, [d]	; save load right-side char into BL
0027++ 2289 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 228A 3E          	mov [d], al	; store left char into right side
0029++ 228B 1B          	mov al, bl
0030++ 228C F7          	stosb		; store right-side char into left-side; increase DI
0031++ 228D 7E          	dec c
0032++ 228E 7F          	dec d
0033++ 228F C2 00 00    	cmp c, 0
0034++ 2292 C7 88 22    	jne strrev_L0
0035++ 2295             strrev_end:
0036++ 2295 4C          	popa
0037++ 2296 09          	ret
0038++ 2297             	
0039++ 2297             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 2297             ; strchr
0041++ 2297             ; search string in D for char in AL
0042++ 2297             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 2297             strchr:
0044++ 2297             strchr_L0:
0045++ 2297 32          	mov bl, [d]
0046++ 2298 C1 00       	cmp bl, 0
0047++ 229A C6 A5 22    	je strchr_end
0048++ 229D BA          	cmp al, bl
0049++ 229E C6 A5 22    	je strchr_end
0050++ 22A1 79          	inc d
0051++ 22A2 0A 97 22    	jmp strchr_L0
0052++ 22A5             strchr_end:
0053++ 22A5 1B          	mov al, bl
0054++ 22A6 09          	ret
0055++ 22A7             
0056++ 22A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 22A7             ; strstr
0058++ 22A7             ; find sub-string
0059++ 22A7             ; str1 in SI
0060++ 22A7             ; str2 in DI
0061++ 22A7             ; SI points to end of source string
0062++ 22A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 22A7             strstr:
0064++ 22A7 DB          	push al
0065++ 22A8 DA          	push d
0066++ 22A9 E3          	push di
0067++ 22AA             strstr_loop:
0068++ 22AA F3          	cmpsb					; compare a byte of the strings
0069++ 22AB C7 B6 22    	jne strstr_ret
0070++ 22AE FC 00 00    	lea d, [di + 0]
0071++ 22B1 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 22B3 C7 AA 22    	jne strstr_loop				; equal chars but not at end
0073++ 22B6             strstr_ret:
0074++ 22B6 F0          	pop di
0075++ 22B7 E7          	pop d
0076++ 22B8 E8          	pop al
0077++ 22B9 09          	ret
0078++ 22BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 22BA             ; length of null terminated string
0080++ 22BA             ; result in C
0081++ 22BA             ; pointer in D
0082++ 22BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 22BA             strlen:
0084++ 22BA DA          	push d
0085++ 22BB 38 00 00    	mov c, 0
0086++ 22BE             strlen_L1:
0087++ 22BE BD 00       	cmp byte [d], 0
0088++ 22C0 C6 C8 22    	je strlen_ret
0089++ 22C3 79          	inc d
0090++ 22C4 78          	inc c
0091++ 22C5 0A BE 22    	jmp strlen_L1
0092++ 22C8             strlen_ret:
0093++ 22C8 E7          	pop d
0094++ 22C9 09          	ret
0095++ 22CA             
0096++ 22CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 22CA             ; STRCMP
0098++ 22CA             ; compare two strings
0099++ 22CA             ; str1 in SI
0100++ 22CA             ; str2 in DI
0101++ 22CA             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 22CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 22CA             strcmp:
0104++ 22CA DB          	push al
0105++ 22CB DA          	push d
0106++ 22CC E3          	push di
0107++ 22CD E2          	push si
0108++ 22CE             strcmp_loop:
0109++ 22CE F3          	cmpsb					; compare a byte of the strings
0110++ 22CF C7 DA 22    	jne strcmp_ret
0111++ 22D2 FB FF FF    	lea d, [si +- 1]
0112++ 22D5 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 22D7 C7 CE 22    	jne strcmp_loop				; equal chars but not at end
0114++ 22DA             strcmp_ret:
0115++ 22DA EF          	pop si
0116++ 22DB F0          	pop di
0117++ 22DC E7          	pop d
0118++ 22DD E8          	pop al
0119++ 22DE 09          	ret
0120++ 22DF             
0121++ 22DF             
0122++ 22DF             ; STRCPY
0123++ 22DF             ; copy null terminated string from SI to DI
0124++ 22DF             ; source in SI
0125++ 22DF             ; destination in DI
0126++ 22DF             strcpy:
0127++ 22DF E2          	push si
0128++ 22E0 E3          	push di
0129++ 22E1 DB          	push al
0130++ 22E2             strcpy_L1:
0131++ 22E2 F6          	lodsb
0132++ 22E3 F7          	stosb
0133++ 22E4 B9 00       	cmp al, 0
0134++ 22E6 C7 E2 22    	jne strcpy_L1
0135++ 22E9             strcpy_end:
0136++ 22E9 E8          	pop al
0137++ 22EA F0          	pop di
0138++ 22EB EF          	pop si
0139++ 22EC 09          	ret
0140++ 22ED             
0141++ 22ED             ; STRCAT
0142++ 22ED             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 22ED             ; source in SI
0144++ 22ED             ; destination in DI
0145++ 22ED             strcat:
0146++ 22ED E2          	push si
0147++ 22EE E3          	push di
0148++ 22EF D7          	push a
0149++ 22F0 DA          	push d
0150++ 22F1 50          	mov a, di
0151++ 22F2 3C          	mov d, a
0152++ 22F3             strcat_goto_end_L1:
0153++ 22F3 BD 00       	cmp byte[d], 0
0154++ 22F5 C6 FC 22    	je strcat_start
0155++ 22F8 79          	inc d
0156++ 22F9 0A F3 22    	jmp strcat_goto_end_L1
0157++ 22FC             strcat_start:
0158++ 22FC FD 50       	mov di, d
0159++ 22FE             strcat_L1:
0160++ 22FE F6          	lodsb
0161++ 22FF F7          	stosb
0162++ 2300 B9 00       	cmp al, 0
0163++ 2302 C7 FE 22    	jne strcat_L1
0164++ 2305             strcat_end:
0165++ 2305 E7          	pop d
0166++ 2306 E4          	pop a
0167++ 2307 F0          	pop di
0168++ 2308 EF          	pop si
0169++ 2309 09          	ret
0005+  230A             
0006+  230A 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  230E 34 35 36 37 
0006+  2312 38 39 41 42 
0006+  2316 43 44 45 46 
0007+  231A 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  231E 1B 5B 48 00 
0008+  2322             
0009+  2322 01 00       table_power:.dw 1
0010+  2324 0A 00       			.dw 10
0011+  2326 64 00       			.dw 100
0012+  2328 E8 03       			.dw 1000
0013+  232A 10 27       			.dw 10000
0014+  232C             
0015+  232C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  232C             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  232C             ; ASCII in BL
0018+  232C             ; result in AL
0019+  232C             ; ascii for F = 0100 0110
0020+  232C             ; ascii for 9 = 0011 1001
0021+  232C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  232C             hex_ascii_encode:
0023+  232C 1B          	mov al, bl
0024+  232D 93 40       	test al, $40				; test if letter or number
0025+  232F C7 35 23    	jnz hex_letter
0026+  2332 87 0F       	and al, $0F				; get number
0027+  2334 09          	ret
0028+  2335             hex_letter:
0029+  2335 87 0F       	and al, $0F				; get letter
0030+  2337 6A 09       	add al, 9
0031+  2339 09          	ret
0032+  233A             
0033+  233A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  233A             ; ATOI
0035+  233A             ; 2 letter hex string in B
0036+  233A             ; 8bit integer returned in AL
0037+  233A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  233A             atoi:
0039+  233A D8          	push b
0040+  233B 07 2C 23    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  233E 30          	mov bl, bh
0042+  233F DB          	push al					; save a
0043+  2340 07 2C 23    	call hex_ascii_encode
0044+  2343 EA          	pop bl	
0045+  2344 FD 9E 04    	shl al, 4
0046+  2347 8C          	or al, bl
0047+  2348 E5          	pop b
0048+  2349 09          	ret	
0049+  234A             
0050+  234A             
0051+  234A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  234A             ; printf
0053+  234A             ; no need for explanations!
0054+  234A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  234A             printf:
0056+  234A 09          	ret
0057+  234B             
0058+  234B             
0059+  234B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  234B             ; scanf
0061+  234B             ; no need for explanations!
0062+  234B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  234B             scanf:
0064+  234B 09          	ret
0065+  234C             
0066+  234C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  234C             ; ITOA
0068+  234C             ; 8bit value in BL
0069+  234C             ; 2 byte ASCII result in A
0070+  234C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  234C             itoa:
0072+  234C DA          	push d
0073+  234D D8          	push b
0074+  234E A7 00       	mov bh, 0
0075+  2350 FD A4 04    	shr bl, 4	
0076+  2353 74          	mov d, b
0077+  2354 1F 0A 23    	mov al, [d + s_hex_digits]
0078+  2357 23          	mov ah, al
0079+  2358             	
0080+  2358 E5          	pop b
0081+  2359 D8          	push b
0082+  235A A7 00       	mov bh, 0
0083+  235C FD 87 0F    	and bl, $0F
0084+  235F 74          	mov d, b
0085+  2360 1F 0A 23    	mov al, [d + s_hex_digits]
0086+  2363 E5          	pop b
0087+  2364 E7          	pop d
0088+  2365 09          	ret
0089+  2366             
0090+  2366             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  2366             ; HEX STRING TO BINARY
0092+  2366             ; di = destination address
0093+  2366             ; si = source
0094+  2366             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  2366             hex_to_int:
0096+  2366             hex_to_int_L1:
0097+  2366 F6          	lodsb					; load from [SI] to AL
0098+  2367 B9 00       	cmp al, 0				; check if ASCII 0
0099+  2369 C6 76 23    	jz hex_to_int_ret
0100+  236C 36          	mov bh, al
0101+  236D F6          	lodsb
0102+  236E 2F          	mov bl, al
0103+  236F 07 3A 23    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  2372 F7          	stosb					; store AL to [DI]
0105+  2373 0A 66 23    	jmp hex_to_int_L1
0106+  2376             hex_to_int_ret:
0107+  2376 09          	ret		
0108+  2377             
0109+  2377             
0110+  2377             
0111+  2377             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  2377             ; GETCHAR
0113+  2377             ; char in ah
0114+  2377             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  2377             getchar:
0116+  2377 DB          	push al
0117+  2378             getchar_retry:
0118+  2378 FD 0C       	sti
0119+  237A 19 01       	mov al, 1
0120+  237C 05 03       	syscall sys_io			; receive in AH
0121+  237E B9 00       	cmp al, 0			; check if any char was receive
0122+  2380 C6 78 23    	je getchar_retry
0123+  2383 E8          	pop al
0124+  2384 09          	ret
0125+  2385             
0126+  2385             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  2385             ; PUTCHAR
0128+  2385             ; char in ah
0129+  2385             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  2385             putchar:
0131+  2385 D7          	push a
0132+  2386 19 00       	mov al, 0
0133+  2388 05 03       	syscall sys_io			; char in AH
0134+  238A E4          	pop a
0135+  238B 09          	ret
0136+  238C             
0137+  238C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  238C             ;; INPUT A STRING
0139+  238C             ;; terminates with null
0140+  238C             ;; pointer in D
0141+  238C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  238C             gets:
0143+  238C D7          	push a
0144+  238D DA          	push d
0145+  238E             gets_loop:
0146+  238E FD 0C       	sti
0147+  2390 19 01       	mov al, 1
0148+  2392 05 03       	syscall sys_io			; receive in AH
0149+  2394 B9 00       	cmp al, 0				; check error code (AL)
0150+  2396 C6 8E 23    	je gets_loop			; if no char received, retry
0151+  2399             
0152+  2399 76 1B       	cmp ah, 27
0153+  239B C6 BC 23    	je gets_telnet_escape
0154+  239E 76 0A       	cmp ah, $0A				; LF
0155+  23A0 C6 15 24    	je gets_end
0156+  23A3 76 0D       	cmp ah, $0D				; CR
0157+  23A5 C6 15 24    	je gets_end
0158+  23A8 76 5C       	cmp ah, $5C				; '\\'
0159+  23AA C6 EC 23    	je gets_escape
0160+  23AD             	
0161+  23AD 76 08       	cmp ah, $08			; check for backspace
0162+  23AF C6 B8 23    	je gets_backspace
0163+  23B2             
0164+  23B2 1A          	mov al, ah
0165+  23B3 3E          	mov [d], al
0166+  23B4 79          	inc d
0167+  23B5 0A 8E 23    	jmp gets_loop
0168+  23B8             gets_backspace:
0169+  23B8 7F          	dec d
0170+  23B9 0A 8E 23    	jmp gets_loop
0171+  23BC             gets_telnet_escape:
0172+  23BC FD 0C       	sti
0173+  23BE 19 01       	mov al, 1
0174+  23C0 05 03       	syscall sys_io				; receive in AH without echo
0175+  23C2 B9 00       	cmp al, 0					; check error code (AL)
0176+  23C4 C6 BC 23    	je gets_telnet_escape		; if no char received, retry
0177+  23C7 76 5B       	cmp ah, '['
0178+  23C9 C7 8E 23    	jne gets_loop
0179+  23CC             gets_telnet_escape_phase2:
0180+  23CC FD 0C       	sti
0181+  23CE 19 01       	mov al, 1
0182+  23D0 05 03       	syscall sys_io					; receive in AH without echo
0183+  23D2 B9 00       	cmp al, 0						; check error code (AL)
0184+  23D4 C6 CC 23    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  23D7 76 44       	cmp ah, 'D'
0186+  23D9 C6 E4 23    	je gets_left_arrow
0187+  23DC 76 43       	cmp ah, 'C'
0188+  23DE C6 E8 23    	je gets_right_arrow
0189+  23E1 0A 8E 23    	jmp gets_loop
0190+  23E4             gets_left_arrow:
0191+  23E4 7F          	dec d
0192+  23E5 0A 8E 23    	jmp gets_loop
0193+  23E8             gets_right_arrow:
0194+  23E8 79          	inc d
0195+  23E9 0A 8E 23    	jmp gets_loop
0196+  23EC             gets_escape:
0197+  23EC FD 0C       	sti
0198+  23EE 19 01       	mov al, 1
0199+  23F0 05 03       	syscall sys_io			; receive in AH
0200+  23F2 B9 00       	cmp al, 0				; check error code (AL)
0201+  23F4 C6 EC 23    	je gets_escape			; if no char received, retry
0202+  23F7 76 6E       	cmp ah, 'n'
0203+  23F9 C6 07 24    	je gets_LF
0204+  23FC 76 72       	cmp ah, 'r'
0205+  23FE C6 0E 24    	je gets_CR
0206+  2401 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  2402 3E          	mov [d], al
0208+  2403 79          	inc d
0209+  2404 0A 8E 23    	jmp gets_loop
0210+  2407             gets_LF:
0211+  2407 19 0A       	mov al, $0A
0212+  2409 3E          	mov [d], al
0213+  240A 79          	inc d
0214+  240B 0A 8E 23    	jmp gets_loop
0215+  240E             gets_CR:
0216+  240E 19 0D       	mov al, $0D
0217+  2410 3E          	mov [d], al
0218+  2411 79          	inc d
0219+  2412 0A 8E 23    	jmp gets_loop
0220+  2415             gets_end:
0221+  2415 19 00       	mov al, 0
0222+  2417 3E          	mov [d], al				; terminate string
0223+  2418 E7          	pop d
0224+  2419 E4          	pop a
0225+  241A 09          	ret
0226+  241B             
0227+  241B             
0228+  241B             
0229+  241B             
0230+  241B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  241B             ;; INPUT TEXT
0232+  241B             ;; terminated with CTRL+D
0233+  241B             ;; pointer in D
0234+  241B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  241B             gettxt:
0236+  241B D7          	push a
0237+  241C DA          	push d
0238+  241D             gettxt_loop:
0239+  241D 19 01       	mov al, 1
0240+  241F 05 03       	syscall sys_io			; receive in AH
0241+  2421 B9 00       	cmp al, 0				; check error code (AL)
0242+  2423 C6 1D 24    	je gettxt_loop		; if no char received, retry
0243+  2426 76 04       	cmp ah, 4			; EOT
0244+  2428 C6 66 24    	je gettxt_end
0245+  242B 76 08       	cmp ah, $08			; check for backspace
0246+  242D C6 62 24    	je gettxt_backspace
0247+  2430 76 5C       	cmp ah, $5C				; '\\'
0248+  2432 C6 3B 24    	je gettxt_escape
0249+  2435 1A          	mov al, ah
0250+  2436 3E          	mov [d], al
0251+  2437 79          	inc d
0252+  2438 0A 1D 24    	jmp gettxt_loop
0253+  243B             gettxt_escape:
0254+  243B 19 01       	mov al, 1
0255+  243D 05 03       	syscall sys_io			; receive in AH
0256+  243F B9 00       	cmp al, 0				; check error code (AL)
0257+  2441 C6 3B 24    	je gettxt_escape		; if no char received, retry
0258+  2444 76 6E       	cmp ah, 'n'
0259+  2446 C6 54 24    	je gettxt_LF
0260+  2449 76 72       	cmp ah, 'r'
0261+  244B C6 5B 24    	je gettxt_CR
0262+  244E 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  244F 3E          	mov [d], al
0264+  2450 79          	inc d
0265+  2451 0A 1D 24    	jmp gettxt_loop
0266+  2454             gettxt_LF:
0267+  2454 19 0A       	mov al, $0A
0268+  2456 3E          	mov [d], al
0269+  2457 79          	inc d
0270+  2458 0A 1D 24    	jmp gettxt_loop
0271+  245B             gettxt_CR:
0272+  245B 19 0D       	mov al, $0D
0273+  245D 3E          	mov [d], al
0274+  245E 79          	inc d
0275+  245F 0A 1D 24    	jmp gettxt_loop
0276+  2462             gettxt_backspace:
0277+  2462 7F          	dec d
0278+  2463 0A 1D 24    	jmp gettxt_loop
0279+  2466             gettxt_end:
0280+  2466 19 00       	mov al, 0
0281+  2468 3E          	mov [d], al				; terminate string
0282+  2469 E7          	pop d
0283+  246A E4          	pop a
0284+  246B 09          	ret
0285+  246C             
0286+  246C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  246C             ; PRINT NEW LINE
0288+  246C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  246C             printnl:
0290+  246C D7          	push a
0291+  246D 10 00 0A    	mov a, $0A00
0292+  2470 05 03       	syscall sys_io
0293+  2472 10 00 0D    	mov a, $0D00
0294+  2475 05 03       	syscall sys_io
0295+  2477 E4          	pop a
0296+  2478 09          	ret
0297+  2479             
0298+  2479             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  2479             ; strtoint
0300+  2479             ; 4 digit hex string number in d
0301+  2479             ; integer returned in A
0302+  2479             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  2479             strtointx:
0304+  2479 D8          	push b
0305+  247A 32          	mov bl, [d]
0306+  247B 37          	mov bh, bl
0307+  247C 33 01 00    	mov bl, [d + 1]
0308+  247F 07 3A 23    	call atoi				; convert to int in AL
0309+  2482 23          	mov ah, al				; move to AH
0310+  2483 33 02 00    	mov bl, [d + 2]
0311+  2486 37          	mov bh, bl
0312+  2487 33 03 00    	mov bl, [d + 3]
0313+  248A 07 3A 23    	call atoi				; convert to int in AL
0314+  248D E5          	pop b
0315+  248E 09          	ret
0316+  248F             
0317+  248F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  248F             ; strtoint
0319+  248F             ; 5 digit base10 string number in d
0320+  248F             ; integer returned in A
0321+  248F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  248F             strtoint:
0323+  248F E2          	push si
0324+  2490 D8          	push b
0325+  2491 D9          	push c
0326+  2492 DA          	push d
0327+  2493 07 BA 22    	call strlen			; get string length in C
0328+  2496 7E          	dec c
0329+  2497 FD 4E       	mov si, d
0330+  2499 12          	mov a, c
0331+  249A FD 99       	shl a
0332+  249C 3B 22 23    	mov d, table_power
0333+  249F 59          	add d, a
0334+  24A0 38 00 00    	mov c, 0
0335+  24A3             strtoint_L0:
0336+  24A3 F6          	lodsb			; load ASCII to al
0337+  24A4 B9 00       	cmp al, 0
0338+  24A6 C6 B9 24    	je strtoint_end
0339+  24A9 6F 30       	sub al, $30		; make into integer
0340+  24AB 22 00       	mov ah, 0
0341+  24AD 2A          	mov b, [d]
0342+  24AE AC          	mul a, b			; result in B since it fits in 16bits
0343+  24AF 11          	mov a, b
0344+  24B0 28          	mov b, c
0345+  24B1 54          	add a, b
0346+  24B2 39          	mov c, a
0347+  24B3 63 02 00    	sub d, 2
0348+  24B6 0A A3 24    	jmp strtoint_L0
0349+  24B9             strtoint_end:
0350+  24B9 12          	mov a, c
0351+  24BA E7          	pop d
0352+  24BB E6          	pop c
0353+  24BC E5          	pop b
0354+  24BD EF          	pop si
0355+  24BE 09          	ret
0356+  24BF             
0357+  24BF             
0358+  24BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  24BF             ; PRINT NULL TERMINATED STRING
0360+  24BF             ; pointer in D
0361+  24BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  24BF             puts:
0363+  24BF D7          	push a
0364+  24C0 DA          	push d
0365+  24C1             puts_L1:
0366+  24C1 1E          	mov al, [d]
0367+  24C2 B9 00       	cmp al, 0
0368+  24C4 C6 D0 24    	jz puts_END
0369+  24C7 23          	mov ah, al
0370+  24C8 19 00       	mov al, 0
0371+  24CA 05 03       	syscall sys_io
0372+  24CC 79          	inc d
0373+  24CD 0A C1 24    	jmp puts_L1
0374+  24D0             puts_END:
0375+  24D0 E7          	pop d
0376+  24D1 E4          	pop a
0377+  24D2 09          	ret
0378+  24D3             
0379+  24D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  24D3             ; PRINT N SIZE STRING
0381+  24D3             ; pointer in D
0382+  24D3             ; size in C
0383+  24D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  24D3             putsn:
0385+  24D3 DB          	push al
0386+  24D4 DA          	push d
0387+  24D5 D9          	push c
0388+  24D6             putsn_L0:
0389+  24D6 1E          	mov al, [d]
0390+  24D7 23          	mov ah, al
0391+  24D8 19 00       	mov al, 0
0392+  24DA 05 03       	syscall sys_io
0393+  24DC 79          	inc d
0394+  24DD 7E          	dec c	
0395+  24DE C2 00 00    	cmp c, 0
0396+  24E1 C7 D6 24    	jne putsn_L0
0397+  24E4             putsn_end:
0398+  24E4 E6          	pop c
0399+  24E5 E7          	pop d
0400+  24E6 E8          	pop al
0401+  24E7 09          	ret
0402+  24E8             
0403+  24E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  24E8             ; print 16bit decimal number
0405+  24E8             ; input number in A
0406+  24E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  24E8             print_u16d:
0408+  24E8 D7          	push a
0409+  24E9 D8          	push b
0410+  24EA 26 10 27    	mov b, 10000
0411+  24ED AE          	div a, b			; get 10000 coeff.
0412+  24EE 07 14 25    	call print_number
0413+  24F1 11          	mov a, b
0414+  24F2 26 E8 03    	mov b, 1000
0415+  24F5 AE          	div a, b			; get 10000 coeff.
0416+  24F6 07 14 25    	call print_number
0417+  24F9 11          	mov a, b
0418+  24FA 26 64 00    	mov b, 100
0419+  24FD AE          	div a, b
0420+  24FE 07 14 25    	call print_number
0421+  2501 11          	mov a, b
0422+  2502 26 0A 00    	mov b, 10
0423+  2505 AE          	div a, b
0424+  2506 07 14 25    	call print_number
0425+  2509 11          	mov a, b
0426+  250A 6A 30       	add al, $30
0427+  250C 23          	mov ah, al
0428+  250D 19 00       	mov al, 0
0429+  250F 05 03       	syscall sys_io	; print coeff
0430+  2511 E5          	pop b
0431+  2512 E4          	pop a
0432+  2513 09          	ret
0433+  2514             
0434+  2514             
0435+  2514             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  2514             ; if A == 0, print space
0437+  2514             ; else print A
0438+  2514             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  2514             print_number:
0440+  2514 6A 30       	add al, $30
0441+  2516 23          	mov ah, al
0442+  2517 07 85 23    	call putchar
0443+  251A 09          	ret
0444+  251B             
0445+  251B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  251B             ; PRINT 16BIT HEX INTEGER
0447+  251B             ; integer value in reg B
0448+  251B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  251B             print_u16x:
0450+  251B D7          	push a
0451+  251C D8          	push b
0452+  251D DD          	push bl
0453+  251E 30          	mov bl, bh
0454+  251F 07 4C 23    	call itoa				; convert bh to char in A
0455+  2522 2F          	mov bl, al				; save al
0456+  2523 19 00       	mov al, 0
0457+  2525 05 03       	syscall sys_io				; display AH
0458+  2527 24          	mov ah, bl				; retrieve al
0459+  2528 19 00       	mov al, 0
0460+  252A 05 03       	syscall sys_io				; display AL
0461+  252C             
0462+  252C EA          	pop bl
0463+  252D 07 4C 23    	call itoa				; convert bh to char in A
0464+  2530 2F          	mov bl, al				; save al
0465+  2531 19 00       	mov al, 0
0466+  2533 05 03       	syscall sys_io				; display AH
0467+  2535 24          	mov ah, bl				; retrieve al
0468+  2536 19 00       	mov al, 0
0469+  2538 05 03       	syscall sys_io				; display AL
0470+  253A             
0471+  253A E5          	pop b
0472+  253B E4          	pop a
0473+  253C 09          	ret
0474+  253D             
0475+  253D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  253D             ; INPUT 16BIT HEX INTEGER
0477+  253D             ; read 16bit integer into A
0478+  253D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  253D             scan_u16x:
0480+  253D F8 10 00    	enter 16
0481+  2540 D8          	push b
0482+  2541 DA          	push d
0483+  2542             
0484+  2542 FA F1 FF    	lea d, [bp + -15]
0485+  2545 07 8C 23    	call gets				; get number
0486+  2548             
0487+  2548 32          	mov bl, [d]
0488+  2549 37          	mov bh, bl
0489+  254A 33 01 00    	mov bl, [d + 1]
0490+  254D 07 3A 23    	call atoi				; convert to int in AL
0491+  2550 23          	mov ah, al				; move to AH
0492+  2551             
0493+  2551 33 02 00    	mov bl, [d + 2]
0494+  2554 37          	mov bh, bl
0495+  2555 33 03 00    	mov bl, [d + 3]
0496+  2558 07 3A 23    	call atoi				; convert to int in AL
0497+  255B             
0498+  255B E7          	pop d
0499+  255C E5          	pop b
0500+  255D F9          	leave
0501+  255E 09          	ret
0502+  255F             
0503+  255F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  255F             ; PRINT 8bit HEX INTEGER
0505+  255F             ; integer value in reg bl
0506+  255F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  255F             print_u8x:
0508+  255F D7          	push a
0509+  2560 DD          	push bl
0510+  2561             
0511+  2561 07 4C 23    	call itoa				; convert bl to char in A
0512+  2564 2F          	mov bl, al				; save al
0513+  2565 19 00       	mov al, 0
0514+  2567 05 03       	syscall sys_io				; display AH
0515+  2569 24          	mov ah, bl				; retrieve al
0516+  256A 19 00       	mov al, 0
0517+  256C 05 03       	syscall sys_io				; display AL
0518+  256E             
0519+  256E EA          	pop bl
0520+  256F E4          	pop a
0521+  2570 09          	ret
0522+  2571             
0523+  2571             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  2571             ; print 8bit decimal unsigned number
0525+  2571             ; input number in AL
0526+  2571             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  2571             print_u8d:
0528+  2571 D7          	push a
0529+  2572 D8          	push b
0530+  2573             
0531+  2573 22 00       	mov ah, 0
0532+  2575 26 64 00    	mov b, 100
0533+  2578 AE          	div a, b
0534+  2579 D8          	push b			; save remainder
0535+  257A B9 00       	cmp al, 0
0536+  257C C6 86 25    	je skip100
0537+  257F 6A 30       	add al, $30
0538+  2581 23          	mov ah, al
0539+  2582 19 00       	mov al, 0
0540+  2584 05 03       	syscall sys_io	; print coeff
0541+  2586             skip100:
0542+  2586 E4          	pop a
0543+  2587 22 00       	mov ah, 0
0544+  2589 26 0A 00    	mov b, 10
0545+  258C AE          	div a, b
0546+  258D D8          	push b			; save remainder
0547+  258E B9 00       	cmp al, 0
0548+  2590 C6 9A 25    	je skip10
0549+  2593 6A 30       	add al, $30
0550+  2595 23          	mov ah, al
0551+  2596 19 00       	mov al, 0
0552+  2598 05 03       	syscall sys_io	; print coeff
0553+  259A             skip10:
0554+  259A E4          	pop a
0555+  259B 1B          	mov al, bl
0556+  259C 6A 30       	add al, $30
0557+  259E 23          	mov ah, al
0558+  259F 19 00       	mov al, 0
0559+  25A1 05 03       	syscall sys_io	; print coeff
0560+  25A3 E5          	pop b
0561+  25A4 E4          	pop a
0562+  25A5 09          	ret
0563+  25A6             
0564+  25A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  25A6             ; INPUT 8BIT HEX INTEGER
0566+  25A6             ; read 8bit integer into AL
0567+  25A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  25A6             scan_u8x:
0569+  25A6 F8 04 00    	enter 4
0570+  25A9 D8          	push b
0571+  25AA DA          	push d
0572+  25AB             
0573+  25AB FA FD FF    	lea d, [bp + -3]
0574+  25AE 07 8C 23    	call gets				; get number
0575+  25B1             
0576+  25B1 32          	mov bl, [d]
0577+  25B2 37          	mov bh, bl
0578+  25B3 33 01 00    	mov bl, [d + 1]
0579+  25B6 07 3A 23    	call atoi				; convert to int in AL
0580+  25B9             
0581+  25B9 E7          	pop d
0582+  25BA E5          	pop b
0583+  25BB F9          	leave
0584+  25BC 09          	ret
0585+  25BD             
0586+  25BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  25BD             ; input decimal number
0588+  25BD             ; result in A
0589+  25BD             ; 655'\0'
0590+  25BD             ; low--------high
0591+  25BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  25BD             scan_u16d:
0593+  25BD F8 08 00    	enter 8
0594+  25C0 E2          	push si
0595+  25C1 D8          	push b
0596+  25C2 D9          	push c
0597+  25C3 DA          	push d
0598+  25C4 FA F9 FF    	lea d, [bp +- 7]
0599+  25C7 07 8C 23    	call gets
0600+  25CA 07 BA 22    	call strlen			; get string length in C
0601+  25CD 7E          	dec c
0602+  25CE FD 4E       	mov si, d
0603+  25D0 12          	mov a, c
0604+  25D1 FD 99       	shl a
0605+  25D3 3B 22 23    	mov d, table_power
0606+  25D6 59          	add d, a
0607+  25D7 38 00 00    	mov c, 0
0608+  25DA             mul_loop:
0609+  25DA F6          	lodsb			; load ASCII to al
0610+  25DB B9 00       	cmp al, 0
0611+  25DD C6 F0 25    	je mul_exit
0612+  25E0 6F 30       	sub al, $30		; make into integer
0613+  25E2 22 00       	mov ah, 0
0614+  25E4 2A          	mov b, [d]
0615+  25E5 AC          	mul a, b			; result in B since it fits in 16bits
0616+  25E6 11          	mov a, b
0617+  25E7 28          	mov b, c
0618+  25E8 54          	add a, b
0619+  25E9 39          	mov c, a
0620+  25EA 63 02 00    	sub d, 2
0621+  25ED 0A DA 25    	jmp mul_loop
0622+  25F0             mul_exit:
0623+  25F0 12          	mov a, c
0624+  25F1 E7          	pop d
0625+  25F2 E6          	pop c
0626+  25F3 E5          	pop b
0627+  25F4 EF          	pop si
0628+  25F5 F9          	leave
0629+  25F6 09          	ret
0908   25F7             ; --- END INCLUDE BLOCK
0909   25F7             
0910   25F7             
0911   25F7             .end
tasm: Number of errors = 0
