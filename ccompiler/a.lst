0001   0000             ; --- FILENAME: wireworld.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 29 D0 10      mov b, [__grid] ; grid
0011   0405 D7            push a
0012   0406 74            mov d, b
0013   0407 DA            push d
0014   0408 26 05 00      mov b, 5
0015   040B E7            pop d
0016   040C 10 50 00      mov a, 80
0017   040F AC            mul a, b
0018   0410 5A            add d, b
0019   0411 DA            push d
0020   0412 26 05 00      mov b, 5
0021   0415 E7            pop d
0022   0416 10 02 00      mov a, 2
0023   0419 AC            mul a, b
0024   041A 5A            add d, b
0025   041B E4            pop a
0026   041C DA            push d
0027   041D 26 01 00      mov b, 1; CONDUCTOR
0028   0420 E7            pop d
0029   0421 FD 43         mov [d], b
0030   0423 29 D0 10      mov b, [__grid] ; grid
0031   0426 D7            push a
0032   0427 74            mov d, b
0033   0428 DA            push d
0034   0429 26 06 00      mov b, 6
0035   042C E7            pop d
0036   042D 10 50 00      mov a, 80
0037   0430 AC            mul a, b
0038   0431 5A            add d, b
0039   0432 DA            push d
0040   0433 26 05 00      mov b, 5
0041   0436 E7            pop d
0042   0437 10 02 00      mov a, 2
0043   043A AC            mul a, b
0044   043B 5A            add d, b
0045   043C E4            pop a
0046   043D DA            push d
0047   043E 26 02 00      mov b, 2; ELECTRON_HEAD
0048   0441 E7            pop d
0049   0442 FD 43         mov [d], b
0050   0444 29 D0 10      mov b, [__grid] ; grid
0051   0447 D7            push a
0052   0448 74            mov d, b
0053   0449 DA            push d
0054   044A 26 07 00      mov b, 7
0055   044D E7            pop d
0056   044E 10 50 00      mov a, 80
0057   0451 AC            mul a, b
0058   0452 5A            add d, b
0059   0453 DA            push d
0060   0454 26 05 00      mov b, 5
0061   0457 E7            pop d
0062   0458 10 02 00      mov a, 2
0063   045B AC            mul a, b
0064   045C 5A            add d, b
0065   045D E4            pop a
0066   045E DA            push d
0067   045F 26 01 00      mov b, 1; CONDUCTOR
0068   0462 E7            pop d
0069   0463 FD 43         mov [d], b
0070   0465 29 D0 10      mov b, [__grid] ; grid
0071   0468 D7            push a
0072   0469 74            mov d, b
0073   046A DA            push d
0074   046B 26 06 00      mov b, 6
0075   046E E7            pop d
0076   046F 10 50 00      mov a, 80
0077   0472 AC            mul a, b
0078   0473 5A            add d, b
0079   0474 DA            push d
0080   0475 26 06 00      mov b, 6
0081   0478 E7            pop d
0082   0479 10 02 00      mov a, 2
0083   047C AC            mul a, b
0084   047D 5A            add d, b
0085   047E E4            pop a
0086   047F DA            push d
0087   0480 26 03 00      mov b, 3; ELECTRON_TAIL
0088   0483 E7            pop d
0089   0484 FD 43         mov [d], b
0090   0486 29 D0 10      mov b, [__grid] ; grid
0091   0489 D7            push a
0092   048A 74            mov d, b
0093   048B DA            push d
0094   048C 26 06 00      mov b, 6
0095   048F E7            pop d
0096   0490 10 50 00      mov a, 80
0097   0493 AC            mul a, b
0098   0494 5A            add d, b
0099   0495 DA            push d
0100   0496 26 07 00      mov b, 7
0101   0499 E7            pop d
0102   049A 10 02 00      mov a, 2
0103   049D AC            mul a, b
0104   049E 5A            add d, b
0105   049F E4            pop a
0106   04A0 DA            push d
0107   04A1 26 01 00      mov b, 1; CONDUCTOR
0108   04A4 E7            pop d
0109   04A5 FD 43         mov [d], b
0110   04A7             _while1_cond:
0111   04A7 26 01 00      mov b, 1
0112   04AA C0 00 00      cmp b, 0
0113   04AD C6 B9 04      je _while1_exit
0114   04B0             _while1_block:
0115   04B0 07 BF 04      call print_grid
0116   04B3 07 98 05      call iterate
0117   04B6 0A A7 04      jmp _while1_cond
0118   04B9             _while1_exit:
0119   04B9 26 00 00      mov b, 0
0120   04BC F9            leave
0121   04BD 05 0B         syscall sys_terminate_proc
0122   04BF             
0123   04BF             print_grid:
0124   04BF D2            push bp
0125   04C0 9B            mov bp, sp
0126   04C1             _for2_init:
0127   04C1 26 00 00      mov b, 0
0128   04C4 FD 42 16 17   mov [__y], b
0129   04C8             _for2_cond:
0130   04C8 29 16 17      mov b, [__y] ; y
0131   04CB D7            push a
0132   04CC 11            mov a, b
0133   04CD 26 14 00      mov b, 20
0134   04D0 B0            cmp a, b
0135   04D1 0E            lodflgs
0136   04D2 2F            mov bl, al
0137   04D3 FD A2 03      shr al, 3
0138   04D6 FD A4 02      shr bl, 2
0139   04D9 FD 87 01      and bl, %00000001
0140   04DC 90            xor al, bl ; < (signed)
0141   04DD 22 00         mov ah, 0
0142   04DF 27            mov b, a
0143   04E0 E4            pop a
0144   04E1 C0 00 00      cmp b, 0
0145   04E4 C6 96 05      je _for2_exit
0146   04E7             _for2_block:
0147   04E7             _for3_init:
0148   04E7 26 00 00      mov b, 0
0149   04EA FD 42 14 17   mov [__x], b
0150   04EE             _for3_cond:
0151   04EE 29 14 17      mov b, [__x] ; x
0152   04F1 D7            push a
0153   04F2 11            mov a, b
0154   04F3 26 28 00      mov b, 40
0155   04F6 B0            cmp a, b
0156   04F7 0E            lodflgs
0157   04F8 2F            mov bl, al
0158   04F9 FD A2 03      shr al, 3
0159   04FC FD A4 02      shr bl, 2
0160   04FF FD 87 01      and bl, %00000001
0161   0502 90            xor al, bl ; < (signed)
0162   0503 22 00         mov ah, 0
0163   0505 27            mov b, a
0164   0506 E4            pop a
0165   0507 C0 00 00      cmp b, 0
0166   050A C6 80 05      je _for3_exit
0167   050D             _for3_block:
0168   050D             _switch4_expr:
0169   050D 29 D0 10      mov b, [__grid] ; grid
0170   0510 D7            push a
0171   0511 74            mov d, b
0172   0512 DA            push d
0173   0513 29 16 17      mov b, [__y] ; y
0174   0516 E7            pop d
0175   0517 10 50 00      mov a, 80
0176   051A AC            mul a, b
0177   051B 5A            add d, b
0178   051C DA            push d
0179   051D 29 14 17      mov b, [__x] ; x
0180   0520 E7            pop d
0181   0521 10 02 00      mov a, 2
0182   0524 AC            mul a, b
0183   0525 5A            add d, b
0184   0526 E4            pop a
0185   0527 2A            mov b, [d]
0186   0528             _switch4_comparisons:
0187   0528 C0 00 00      cmp b, 0
0188   052B C6 40 05      je _switch4_case0
0189   052E C0 01 00      cmp b, 1
0190   0531 C6 4A 05      je _switch4_case1
0191   0534 C0 02 00      cmp b, 2
0192   0537 C6 54 05      je _switch4_case2
0193   053A C0 03 00      cmp b, 3
0194   053D C6 5E 05      je _switch4_case3
0195   0540             _switch4_case0:
0196   0540 26 20 00      mov b, $20
0197   0543 FD 3D 22 17   mov [__c], bl
0198   0547 0A 68 05      jmp _switch4_exit ; case break
0199   054A             _switch4_case1:
0200   054A 26 2E 00      mov b, $2e
0201   054D FD 3D 22 17   mov [__c], bl
0202   0551 0A 68 05      jmp _switch4_exit ; case break
0203   0554             _switch4_case2:
0204   0554 26 40 00      mov b, $40
0205   0557 FD 3D 22 17   mov [__c], bl
0206   055B 0A 68 05      jmp _switch4_exit ; case break
0207   055E             _switch4_case3:
0208   055E 26 23 00      mov b, $23
0209   0561 FD 3D 22 17   mov [__c], bl
0210   0565 0A 68 05      jmp _switch4_exit ; case break
0211   0568             _switch4_exit:
0212   0568 31 22 17      mov bl, [__c] ; c
0213   056B A7 00         mov bh, 0
0214   056D DD            push bl
0215   056E 07 80 09      call _putchar
0216   0571 51 01 00      add sp, 1
0217   0574             _for3_update:
0218   0574 29 14 17      mov b, [__x] ; x
0219   0577 FD 77         inc b
0220   0579 FD 42 14 17   mov [__x], b
0221   057D 0A EE 04      jmp _for3_cond
0222   0580             _for3_exit:
0223   0580 26 0A 00      mov b, $a
0224   0583 DD            push bl
0225   0584 07 80 09      call _putchar
0226   0587 51 01 00      add sp, 1
0227   058A             _for2_update:
0228   058A 29 16 17      mov b, [__y] ; y
0229   058D FD 77         inc b
0230   058F FD 42 16 17   mov [__y], b
0231   0593 0A C8 04      jmp _for2_cond
0232   0596             _for2_exit:
0233   0596 F9            leave
0234   0597 09            ret
0235   0598             
0236   0598             iterate:
0237   0598 D2            push bp
0238   0599 9B            mov bp, sp
0239   059A             _for5_init:
0240   059A 26 00 00      mov b, 0
0241   059D FD 42 16 17   mov [__y], b
0242   05A1             _for5_cond:
0243   05A1 29 16 17      mov b, [__y] ; y
0244   05A4 D7            push a
0245   05A5 11            mov a, b
0246   05A6 26 14 00      mov b, 20
0247   05A9 B0            cmp a, b
0248   05AA 0E            lodflgs
0249   05AB 2F            mov bl, al
0250   05AC FD A2 03      shr al, 3
0251   05AF FD A4 02      shr bl, 2
0252   05B2 FD 87 01      and bl, %00000001
0253   05B5 90            xor al, bl ; < (signed)
0254   05B6 22 00         mov ah, 0
0255   05B8 27            mov b, a
0256   05B9 E4            pop a
0257   05BA C0 00 00      cmp b, 0
0258   05BD C6 E1 08      je _for5_exit
0259   05C0             _for5_block:
0260   05C0             _for6_init:
0261   05C0 26 00 00      mov b, 0
0262   05C3 FD 42 14 17   mov [__x], b
0263   05C7             _for6_cond:
0264   05C7 29 14 17      mov b, [__x] ; x
0265   05CA D7            push a
0266   05CB 11            mov a, b
0267   05CC 26 28 00      mov b, 40
0268   05CF B0            cmp a, b
0269   05D0 0E            lodflgs
0270   05D1 2F            mov bl, al
0271   05D2 FD A2 03      shr al, 3
0272   05D5 FD A4 02      shr bl, 2
0273   05D8 FD 87 01      and bl, %00000001
0274   05DB 90            xor al, bl ; < (signed)
0275   05DC 22 00         mov ah, 0
0276   05DE 27            mov b, a
0277   05DF E4            pop a
0278   05E0 C0 00 00      cmp b, 0
0279   05E3 C6 D5 08      je _for6_exit
0280   05E6             _for6_block:
0281   05E6 26 00 00      mov b, 0
0282   05E9 FD 42 20 17   mov [__head_count], b
0283   05ED             _for7_init:
0284   05ED 26 01 00      mov b, 1
0285   05F0 FD 97         neg b
0286   05F2 FD 42 1A 17   mov [__dy], b
0287   05F6             _for7_cond:
0288   05F6 29 1A 17      mov b, [__dy] ; dy
0289   05F9 D7            push a
0290   05FA 11            mov a, b
0291   05FB 26 01 00      mov b, 1
0292   05FE B0            cmp a, b
0293   05FF 0E            lodflgs
0294   0600 2F            mov bl, al
0295   0601 FD 78         mov g, a
0296   0603 FD A2 03      shr al, 3
0297   0606 FD A4 02      shr bl, 2
0298   0609 FD 87 01      and bl, %00000001
0299   060C 90            xor al, bl
0300   060D FD 27         mov b, g
0301   060F FD 87 01      and bl, %00000001
0302   0612 8C            or al, bl ; <= (signed)
0303   0613 22 00         mov ah, 0
0304   0615 27            mov b, a
0305   0616 E4            pop a
0306   0617 C0 00 00      cmp b, 0
0307   061A C6 B7 07      je _for7_exit
0308   061D             _for7_block:
0309   061D             _for8_init:
0310   061D 26 01 00      mov b, 1
0311   0620 FD 97         neg b
0312   0622 FD 42 18 17   mov [__dx], b
0313   0626             _for8_cond:
0314   0626 29 18 17      mov b, [__dx] ; dx
0315   0629 D7            push a
0316   062A 11            mov a, b
0317   062B 26 01 00      mov b, 1
0318   062E B0            cmp a, b
0319   062F 0E            lodflgs
0320   0630 2F            mov bl, al
0321   0631 FD 78         mov g, a
0322   0633 FD A2 03      shr al, 3
0323   0636 FD A4 02      shr bl, 2
0324   0639 FD 87 01      and bl, %00000001
0325   063C 90            xor al, bl
0326   063D FD 27         mov b, g
0327   063F FD 87 01      and bl, %00000001
0328   0642 8C            or al, bl ; <= (signed)
0329   0643 22 00         mov ah, 0
0330   0645 27            mov b, a
0331   0646 E4            pop a
0332   0647 C0 00 00      cmp b, 0
0333   064A C6 A7 07      je _for8_exit
0334   064D             _for8_block:
0335   064D             _if9_cond:
0336   064D 29 18 17      mov b, [__dx] ; dx
0337   0650 D7            push a
0338   0651 11            mov a, b
0339   0652 26 00 00      mov b, 0
0340   0655 B0            cmp a, b
0341   0656 0E            lodflgs
0342   0657 87 01         and al, %00000001 ; ==
0343   0659 22 00         mov ah, 0
0344   065B 27            mov b, a
0345   065C E4            pop a
0346   065D DB            push al
0347   065E C0 00 00      cmp b, 0
0348   0661 0E            lodflgs ; transform condition into a single bit
0349   0662 29 1A 17      mov b, [__dy] ; dy
0350   0665 D7            push a
0351   0666 11            mov a, b
0352   0667 26 00 00      mov b, 0
0353   066A B0            cmp a, b
0354   066B 0E            lodflgs
0355   066C 87 01         and al, %00000001 ; ==
0356   066E 22 00         mov ah, 0
0357   0670 27            mov b, a
0358   0671 E4            pop a
0359   0672 DB            push al
0360   0673 C0 00 00      cmp b, 0
0361   0676 0E            lodflgs
0362   0677 EA            pop bl ; matches previous 'push al'
0363   0678 8C            or al, bl
0364   0679 8F 01         xor al, %00000001
0365   067B 2F            mov bl, al
0366   067C A7 00         mov bh, 0
0367   067E E8            pop al
0368   067F C0 00 00      cmp b, 0
0369   0682 C6 8B 06      je _if9_exit
0370   0685             _if9_true:
0371   0685 0A 97 07      jmp _for8_update ; for continue
0372   0688 0A 8B 06      jmp _if9_exit
0373   068B             _if9_exit:
0374   068B 29 14 17      mov b, [__x] ; x
0375   068E D7            push a
0376   068F 11            mov a, b
0377   0690 29 18 17      mov b, [__dx] ; dx
0378   0693 54            add a, b
0379   0694 27            mov b, a
0380   0695 E4            pop a
0381   0696 FD 42 1C 17   mov [__nx], b
0382   069A 29 16 17      mov b, [__y] ; y
0383   069D D7            push a
0384   069E 11            mov a, b
0385   069F 29 1A 17      mov b, [__dy] ; dy
0386   06A2 54            add a, b
0387   06A3 27            mov b, a
0388   06A4 E4            pop a
0389   06A5 FD 42 1E 17   mov [__ny], b
0390   06A9             _if10_cond:
0391   06A9 29 1C 17      mov b, [__nx] ; nx
0392   06AC D7            push a
0393   06AD 11            mov a, b
0394   06AE 26 00 00      mov b, 0
0395   06B1 B0            cmp a, b
0396   06B2 0E            lodflgs
0397   06B3 2F            mov bl, al
0398   06B4 FD A2 03      shr al, 3
0399   06B7 FD A4 02      shr bl, 2
0400   06BA FD 87 01      and bl, %00000001
0401   06BD 90            xor al, bl
0402   06BE 8F 01         xor al, %00000001 ; >= (signed)
0403   06C0 22 00         mov ah, 0
0404   06C2 27            mov b, a
0405   06C3 E4            pop a
0406   06C4 DB            push al
0407   06C5 C0 00 00      cmp b, 0
0408   06C8 0E            lodflgs ; transform condition into a single bit
0409   06C9 29 1C 17      mov b, [__nx] ; nx
0410   06CC D7            push a
0411   06CD 11            mov a, b
0412   06CE 26 28 00      mov b, 40
0413   06D1 B0            cmp a, b
0414   06D2 0E            lodflgs
0415   06D3 2F            mov bl, al
0416   06D4 FD A2 03      shr al, 3
0417   06D7 FD A4 02      shr bl, 2
0418   06DA FD 87 01      and bl, %00000001
0419   06DD 90            xor al, bl ; < (signed)
0420   06DE 22 00         mov ah, 0
0421   06E0 27            mov b, a
0422   06E1 E4            pop a
0423   06E2 DB            push al
0424   06E3 C0 00 00      cmp b, 0
0425   06E6 0E            lodflgs
0426   06E7 EA            pop bl ; matches previous 'push al'
0427   06E8 8C            or al, bl
0428   06E9 8F 01         xor al, %00000001
0429   06EB 2F            mov bl, al
0430   06EC A7 00         mov bh, 0
0431   06EE E8            pop al
0432   06EF DB            push al
0433   06F0 C0 00 00      cmp b, 0
0434   06F3 0E            lodflgs ; transform condition into a single bit
0435   06F4 29 1E 17      mov b, [__ny] ; ny
0436   06F7 D7            push a
0437   06F8 11            mov a, b
0438   06F9 26 00 00      mov b, 0
0439   06FC B0            cmp a, b
0440   06FD 0E            lodflgs
0441   06FE 2F            mov bl, al
0442   06FF FD A2 03      shr al, 3
0443   0702 FD A4 02      shr bl, 2
0444   0705 FD 87 01      and bl, %00000001
0445   0708 90            xor al, bl
0446   0709 8F 01         xor al, %00000001 ; >= (signed)
0447   070B 22 00         mov ah, 0
0448   070D 27            mov b, a
0449   070E E4            pop a
0450   070F DB            push al
0451   0710 C0 00 00      cmp b, 0
0452   0713 0E            lodflgs
0453   0714 EA            pop bl ; matches previous 'push al'
0454   0715 8C            or al, bl
0455   0716 8F 01         xor al, %00000001
0456   0718 2F            mov bl, al
0457   0719 A7 00         mov bh, 0
0458   071B E8            pop al
0459   071C DB            push al
0460   071D C0 00 00      cmp b, 0
0461   0720 0E            lodflgs ; transform condition into a single bit
0462   0721 29 1E 17      mov b, [__ny] ; ny
0463   0724 D7            push a
0464   0725 11            mov a, b
0465   0726 26 14 00      mov b, 20
0466   0729 B0            cmp a, b
0467   072A 0E            lodflgs
0468   072B 2F            mov bl, al
0469   072C FD A2 03      shr al, 3
0470   072F FD A4 02      shr bl, 2
0471   0732 FD 87 01      and bl, %00000001
0472   0735 90            xor al, bl ; < (signed)
0473   0736 22 00         mov ah, 0
0474   0738 27            mov b, a
0475   0739 E4            pop a
0476   073A DB            push al
0477   073B C0 00 00      cmp b, 0
0478   073E 0E            lodflgs
0479   073F EA            pop bl ; matches previous 'push al'
0480   0740 8C            or al, bl
0481   0741 8F 01         xor al, %00000001
0482   0743 2F            mov bl, al
0483   0744 A7 00         mov bh, 0
0484   0746 E8            pop al
0485   0747 DB            push al
0486   0748 C0 00 00      cmp b, 0
0487   074B 0E            lodflgs ; transform condition into a single bit
0488   074C 29 D0 10      mov b, [__grid] ; grid
0489   074F D7            push a
0490   0750 74            mov d, b
0491   0751 DA            push d
0492   0752 29 1E 17      mov b, [__ny] ; ny
0493   0755 E7            pop d
0494   0756 10 50 00      mov a, 80
0495   0759 AC            mul a, b
0496   075A 5A            add d, b
0497   075B DA            push d
0498   075C 29 1C 17      mov b, [__nx] ; nx
0499   075F E7            pop d
0500   0760 10 02 00      mov a, 2
0501   0763 AC            mul a, b
0502   0764 5A            add d, b
0503   0765 E4            pop a
0504   0766 2A            mov b, [d]
0505   0767 D7            push a
0506   0768 11            mov a, b
0507   0769 26 02 00      mov b, 2; ELECTRON_HEAD
0508   076C B0            cmp a, b
0509   076D 0E            lodflgs
0510   076E 87 01         and al, %00000001 ; ==
0511   0770 22 00         mov ah, 0
0512   0772 27            mov b, a
0513   0773 E4            pop a
0514   0774 DB            push al
0515   0775 C0 00 00      cmp b, 0
0516   0778 0E            lodflgs
0517   0779 EA            pop bl ; matches previous 'push al'
0518   077A 8C            or al, bl
0519   077B 8F 01         xor al, %00000001
0520   077D 2F            mov bl, al
0521   077E A7 00         mov bh, 0
0522   0780 E8            pop al
0523   0781 C0 00 00      cmp b, 0
0524   0784 C6 97 07      je _if10_exit
0525   0787             _if10_true:
0526   0787 29 20 17      mov b, [__head_count] ; head_count
0527   078A D7            push a
0528   078B 11            mov a, b
0529   078C FD 77         inc b
0530   078E FD 42 20 17   mov [__head_count], b
0531   0792 27            mov b, a
0532   0793 E4            pop a
0533   0794 0A 97 07      jmp _if10_exit
0534   0797             _if10_exit:
0535   0797             _for8_update:
0536   0797 29 18 17      mov b, [__dx] ; dx
0537   079A D7            push a
0538   079B 11            mov a, b
0539   079C FD 77         inc b
0540   079E FD 42 18 17   mov [__dx], b
0541   07A2 27            mov b, a
0542   07A3 E4            pop a
0543   07A4 0A 26 06      jmp _for8_cond
0544   07A7             _for8_exit:
0545   07A7             _for7_update:
0546   07A7 29 1A 17      mov b, [__dy] ; dy
0547   07AA D7            push a
0548   07AB 11            mov a, b
0549   07AC FD 77         inc b
0550   07AE FD 42 1A 17   mov [__dy], b
0551   07B2 27            mov b, a
0552   07B3 E4            pop a
0553   07B4 0A F6 05      jmp _for7_cond
0554   07B7             _for7_exit:
0555   07B7             _switch11_expr:
0556   07B7 29 D0 10      mov b, [__grid] ; grid
0557   07BA D7            push a
0558   07BB 74            mov d, b
0559   07BC DA            push d
0560   07BD 29 16 17      mov b, [__y] ; y
0561   07C0 E7            pop d
0562   07C1 10 50 00      mov a, 80
0563   07C4 AC            mul a, b
0564   07C5 5A            add d, b
0565   07C6 DA            push d
0566   07C7 29 14 17      mov b, [__x] ; x
0567   07CA E7            pop d
0568   07CB 10 02 00      mov a, 2
0569   07CE AC            mul a, b
0570   07CF 5A            add d, b
0571   07D0 E4            pop a
0572   07D1 2A            mov b, [d]
0573   07D2             _switch11_comparisons:
0574   07D2 C0 00 00      cmp b, 0
0575   07D5 C6 EA 07      je _switch11_case0
0576   07D8 C0 01 00      cmp b, 1
0577   07DB C6 0E 08      je _switch11_case1
0578   07DE C0 02 00      cmp b, 2
0579   07E1 C6 81 08      je _switch11_case2
0580   07E4 C0 03 00      cmp b, 3
0581   07E7 C6 A5 08      je _switch11_case3
0582   07EA             _switch11_case0:
0583   07EA 29 12 17      mov b, [__new_grid] ; new_grid
0584   07ED D7            push a
0585   07EE 74            mov d, b
0586   07EF DA            push d
0587   07F0 29 16 17      mov b, [__y] ; y
0588   07F3 E7            pop d
0589   07F4 10 50 00      mov a, 80
0590   07F7 AC            mul a, b
0591   07F8 5A            add d, b
0592   07F9 DA            push d
0593   07FA 29 14 17      mov b, [__x] ; x
0594   07FD E7            pop d
0595   07FE 10 02 00      mov a, 2
0596   0801 AC            mul a, b
0597   0802 5A            add d, b
0598   0803 E4            pop a
0599   0804 DA            push d
0600   0805 26 00 00      mov b, 0; EMPTY
0601   0808 E7            pop d
0602   0809 FD 43         mov [d], b
0603   080B 0A C9 08      jmp _switch11_exit ; case break
0604   080E             _switch11_case1:
0605   080E             _if12_cond:
0606   080E 29 20 17      mov b, [__head_count] ; head_count
0607   0811 D7            push a
0608   0812 11            mov a, b
0609   0813 26 01 00      mov b, 1
0610   0816 B0            cmp a, b
0611   0817 0E            lodflgs
0612   0818 87 01         and al, %00000001 ; ==
0613   081A 22 00         mov ah, 0
0614   081C 27            mov b, a
0615   081D E4            pop a
0616   081E D7            push a
0617   081F 11            mov a, b
0618   0820 29 20 17      mov b, [__head_count] ; head_count
0619   0823 D7            push a
0620   0824 11            mov a, b
0621   0825 26 02 00      mov b, 2
0622   0828 B0            cmp a, b
0623   0829 0E            lodflgs
0624   082A 87 01         and al, %00000001 ; ==
0625   082C 22 00         mov ah, 0
0626   082E 27            mov b, a
0627   082F E4            pop a
0628   0830 8A            or a, b
0629   0831 27            mov b, a
0630   0832 E4            pop a
0631   0833 C0 00 00      cmp b, 0
0632   0836 C6 5D 08      je _if12_else
0633   0839             _if12_true:
0634   0839 29 12 17      mov b, [__new_grid] ; new_grid
0635   083C D7            push a
0636   083D 74            mov d, b
0637   083E DA            push d
0638   083F 29 16 17      mov b, [__y] ; y
0639   0842 E7            pop d
0640   0843 10 50 00      mov a, 80
0641   0846 AC            mul a, b
0642   0847 5A            add d, b
0643   0848 DA            push d
0644   0849 29 14 17      mov b, [__x] ; x
0645   084C E7            pop d
0646   084D 10 02 00      mov a, 2
0647   0850 AC            mul a, b
0648   0851 5A            add d, b
0649   0852 E4            pop a
0650   0853 DA            push d
0651   0854 26 02 00      mov b, 2; ELECTRON_HEAD
0652   0857 E7            pop d
0653   0858 FD 43         mov [d], b
0654   085A 0A 7E 08      jmp _if12_exit
0655   085D             _if12_else:
0656   085D 29 12 17      mov b, [__new_grid] ; new_grid
0657   0860 D7            push a
0658   0861 74            mov d, b
0659   0862 DA            push d
0660   0863 29 16 17      mov b, [__y] ; y
0661   0866 E7            pop d
0662   0867 10 50 00      mov a, 80
0663   086A AC            mul a, b
0664   086B 5A            add d, b
0665   086C DA            push d
0666   086D 29 14 17      mov b, [__x] ; x
0667   0870 E7            pop d
0668   0871 10 02 00      mov a, 2
0669   0874 AC            mul a, b
0670   0875 5A            add d, b
0671   0876 E4            pop a
0672   0877 DA            push d
0673   0878 26 01 00      mov b, 1; CONDUCTOR
0674   087B E7            pop d
0675   087C FD 43         mov [d], b
0676   087E             _if12_exit:
0677   087E 0A C9 08      jmp _switch11_exit ; case break
0678   0881             _switch11_case2:
0679   0881 29 12 17      mov b, [__new_grid] ; new_grid
0680   0884 D7            push a
0681   0885 74            mov d, b
0682   0886 DA            push d
0683   0887 29 16 17      mov b, [__y] ; y
0684   088A E7            pop d
0685   088B 10 50 00      mov a, 80
0686   088E AC            mul a, b
0687   088F 5A            add d, b
0688   0890 DA            push d
0689   0891 29 14 17      mov b, [__x] ; x
0690   0894 E7            pop d
0691   0895 10 02 00      mov a, 2
0692   0898 AC            mul a, b
0693   0899 5A            add d, b
0694   089A E4            pop a
0695   089B DA            push d
0696   089C 26 03 00      mov b, 3; ELECTRON_TAIL
0697   089F E7            pop d
0698   08A0 FD 43         mov [d], b
0699   08A2 0A C9 08      jmp _switch11_exit ; case break
0700   08A5             _switch11_case3:
0701   08A5 29 12 17      mov b, [__new_grid] ; new_grid
0702   08A8 D7            push a
0703   08A9 74            mov d, b
0704   08AA DA            push d
0705   08AB 29 16 17      mov b, [__y] ; y
0706   08AE E7            pop d
0707   08AF 10 50 00      mov a, 80
0708   08B2 AC            mul a, b
0709   08B3 5A            add d, b
0710   08B4 DA            push d
0711   08B5 29 14 17      mov b, [__x] ; x
0712   08B8 E7            pop d
0713   08B9 10 02 00      mov a, 2
0714   08BC AC            mul a, b
0715   08BD 5A            add d, b
0716   08BE E4            pop a
0717   08BF DA            push d
0718   08C0 26 01 00      mov b, 1; CONDUCTOR
0719   08C3 E7            pop d
0720   08C4 FD 43         mov [d], b
0721   08C6 0A C9 08      jmp _switch11_exit ; case break
0722   08C9             _switch11_exit:
0723   08C9             _for6_update:
0724   08C9 29 14 17      mov b, [__x] ; x
0725   08CC FD 77         inc b
0726   08CE FD 42 14 17   mov [__x], b
0727   08D2 0A C7 05      jmp _for6_cond
0728   08D5             _for6_exit:
0729   08D5             _for5_update:
0730   08D5 29 16 17      mov b, [__y] ; y
0731   08D8 FD 77         inc b
0732   08DA FD 42 16 17   mov [__y], b
0733   08DE 0A A1 05      jmp _for5_cond
0734   08E1             _for5_exit:
0735   08E1             _for13_init:
0736   08E1 26 00 00      mov b, 0
0737   08E4 FD 42 16 17   mov [__y], b
0738   08E8             _for13_cond:
0739   08E8 29 16 17      mov b, [__y] ; y
0740   08EB D7            push a
0741   08EC 11            mov a, b
0742   08ED 26 14 00      mov b, 20
0743   08F0 B0            cmp a, b
0744   08F1 0E            lodflgs
0745   08F2 2F            mov bl, al
0746   08F3 FD A2 03      shr al, 3
0747   08F6 FD A4 02      shr bl, 2
0748   08F9 FD 87 01      and bl, %00000001
0749   08FC 90            xor al, bl ; < (signed)
0750   08FD 22 00         mov ah, 0
0751   08FF 27            mov b, a
0752   0900 E4            pop a
0753   0901 C0 00 00      cmp b, 0
0754   0904 C6 7E 09      je _for13_exit
0755   0907             _for13_block:
0756   0907             _for14_init:
0757   0907 26 00 00      mov b, 0
0758   090A FD 42 14 17   mov [__x], b
0759   090E             _for14_cond:
0760   090E 29 14 17      mov b, [__x] ; x
0761   0911 D7            push a
0762   0912 11            mov a, b
0763   0913 26 28 00      mov b, 40
0764   0916 B0            cmp a, b
0765   0917 0E            lodflgs
0766   0918 2F            mov bl, al
0767   0919 FD A2 03      shr al, 3
0768   091C FD A4 02      shr bl, 2
0769   091F FD 87 01      and bl, %00000001
0770   0922 90            xor al, bl ; < (signed)
0771   0923 22 00         mov ah, 0
0772   0925 27            mov b, a
0773   0926 E4            pop a
0774   0927 C0 00 00      cmp b, 0
0775   092A C6 72 09      je _for14_exit
0776   092D             _for14_block:
0777   092D 29 D0 10      mov b, [__grid] ; grid
0778   0930 D7            push a
0779   0931 74            mov d, b
0780   0932 DA            push d
0781   0933 29 16 17      mov b, [__y] ; y
0782   0936 E7            pop d
0783   0937 10 50 00      mov a, 80
0784   093A AC            mul a, b
0785   093B 5A            add d, b
0786   093C DA            push d
0787   093D 29 14 17      mov b, [__x] ; x
0788   0940 E7            pop d
0789   0941 10 02 00      mov a, 2
0790   0944 AC            mul a, b
0791   0945 5A            add d, b
0792   0946 E4            pop a
0793   0947 DA            push d
0794   0948 29 12 17      mov b, [__new_grid] ; new_grid
0795   094B D7            push a
0796   094C 74            mov d, b
0797   094D DA            push d
0798   094E 29 16 17      mov b, [__y] ; y
0799   0951 E7            pop d
0800   0952 10 50 00      mov a, 80
0801   0955 AC            mul a, b
0802   0956 5A            add d, b
0803   0957 DA            push d
0804   0958 29 14 17      mov b, [__x] ; x
0805   095B E7            pop d
0806   095C 10 02 00      mov a, 2
0807   095F AC            mul a, b
0808   0960 5A            add d, b
0809   0961 E4            pop a
0810   0962 2A            mov b, [d]
0811   0963 E7            pop d
0812   0964 FD 43         mov [d], b
0813   0966             _for14_update:
0814   0966 29 14 17      mov b, [__x] ; x
0815   0969 FD 77         inc b
0816   096B FD 42 14 17   mov [__x], b
0817   096F 0A 0E 09      jmp _for14_cond
0818   0972             _for14_exit:
0819   0972             _for13_update:
0820   0972 29 16 17      mov b, [__y] ; y
0821   0975 FD 77         inc b
0822   0977 FD 42 16 17   mov [__y], b
0823   097B 0A E8 08      jmp _for13_cond
0824   097E             _for13_exit:
0825   097E F9            leave
0826   097F 09            ret
0827   0980             
0828   0980             _putchar:
0829   0980 D2            push bp
0830   0981 9B            mov bp, sp
0831   0982             
0832   0982             ; --- BEGIN INLINE ASM BLOCK
0833   0982 20 05 00      mov al, [bp + 5]
0834   0985 23            mov ah, al
0835   0986 07 35 18      call putchar
0836   0989             ; --- END INLINE ASM BLOCK
0837   0989             
0838   0989 F9            leave
0839   098A 09            ret
0840   098B             
0841   098B             print_num:
0842   098B D2            push bp
0843   098C 9B            mov bp, sp
0844   098D 52 05 00      sub sp, 5 ; digits
0845   0990 52 02 00      sub sp, 2 ; i
0846   0993 26 00 00      mov b, 0
0847   0996 D7            push a
0848   0997 11            mov a, b
0849   0998 45 FA FF      mov [bp + -6], a ; i
0850   099B E4            pop a
0851   099C             _if15_cond:
0852   099C 2C 05 00      mov b, [bp + 5] ; num
0853   099F D7            push a
0854   09A0 11            mov a, b
0855   09A1 26 00 00      mov b, 0
0856   09A4 B0            cmp a, b
0857   09A5 0E            lodflgs
0858   09A6 87 01         and al, %00000001 ; ==
0859   09A8 22 00         mov ah, 0
0860   09AA 27            mov b, a
0861   09AB E4            pop a
0862   09AC C0 00 00      cmp b, 0
0863   09AF C6 C1 09      je _if15_exit
0864   09B2             _if15_true:
0865   09B2 26 30 00      mov b, $30
0866   09B5 DD            push bl
0867   09B6 07 80 09      call _putchar
0868   09B9 51 01 00      add sp, 1
0869   09BC F9            leave
0870   09BD 09            ret
0871   09BE 0A C1 09      jmp _if15_exit
0872   09C1             _if15_exit:
0873   09C1             _while16_cond:
0874   09C1 2C 05 00      mov b, [bp + 5] ; num
0875   09C4 D7            push a
0876   09C5 11            mov a, b
0877   09C6 26 00 00      mov b, 0
0878   09C9 B0            cmp a, b
0879   09CA 0E            lodflgs
0880   09CB 2F            mov bl, al
0881   09CC FD 78         mov g, a
0882   09CE FD A2 03      shr al, 3
0883   09D1 FD A4 02      shr bl, 2
0884   09D4 FD 87 01      and bl, %00000001
0885   09D7 90            xor al, bl
0886   09D8 FD 27         mov b, g
0887   09DA FD 87 01      and bl, %00000001
0888   09DD 8C            or al, bl
0889   09DE 8F 01         xor al, %00000001 ; > (signed)
0890   09E0 22 00         mov ah, 0
0891   09E2 27            mov b, a
0892   09E3 E4            pop a
0893   09E4 C0 00 00      cmp b, 0
0894   09E7 C6 38 0A      je _while16_exit
0895   09EA             _while16_block:
0896   09EA FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0897   09ED 2D            mov b, d
0898   09EE D7            push a
0899   09EF 74            mov d, b
0900   09F0 DA            push d
0901   09F1 2C FA FF      mov b, [bp + -6] ; i
0902   09F4 E7            pop d
0903   09F5 10 01 00      mov a, 1
0904   09F8 AC            mul a, b
0905   09F9 5A            add d, b
0906   09FA E4            pop a
0907   09FB DA            push d
0908   09FC 26 30 00      mov b, $30
0909   09FF D7            push a
0910   0A00 11            mov a, b
0911   0A01 2C 05 00      mov b, [bp + 5] ; num
0912   0A04 D7            push a
0913   0A05 11            mov a, b
0914   0A06 26 0A 00      mov b, 10
0915   0A09 AE            div a, b
0916   0A0A E4            pop a
0917   0A0B 54            add a, b
0918   0A0C 27            mov b, a
0919   0A0D E4            pop a
0920   0A0E E7            pop d
0921   0A0F FD 3E         mov [d], bl
0922   0A11 2C 05 00      mov b, [bp + 5] ; num
0923   0A14 D7            push a
0924   0A15 11            mov a, b
0925   0A16 26 0A 00      mov b, 10
0926   0A19 AE            div a, b
0927   0A1A FD 78         mov g, a
0928   0A1C 11            mov a, b
0929   0A1D FD 27         mov b, g
0930   0A1F E4            pop a
0931   0A20 D7            push a
0932   0A21 11            mov a, b
0933   0A22 45 05 00      mov [bp + 5], a ; num
0934   0A25 E4            pop a
0935   0A26 2C FA FF      mov b, [bp + -6] ; i
0936   0A29 D7            push a
0937   0A2A 11            mov a, b
0938   0A2B FD 77         inc b
0939   0A2D D7            push a
0940   0A2E 11            mov a, b
0941   0A2F 45 FA FF      mov [bp + -6], a ; i
0942   0A32 E4            pop a
0943   0A33 27            mov b, a
0944   0A34 E4            pop a
0945   0A35 0A C1 09      jmp _while16_cond
0946   0A38             _while16_exit:
0947   0A38             _while17_cond:
0948   0A38 2C FA FF      mov b, [bp + -6] ; i
0949   0A3B D7            push a
0950   0A3C 11            mov a, b
0951   0A3D 26 00 00      mov b, 0
0952   0A40 B0            cmp a, b
0953   0A41 0E            lodflgs
0954   0A42 2F            mov bl, al
0955   0A43 FD 78         mov g, a
0956   0A45 FD A2 03      shr al, 3
0957   0A48 FD A4 02      shr bl, 2
0958   0A4B FD 87 01      and bl, %00000001
0959   0A4E 90            xor al, bl
0960   0A4F FD 27         mov b, g
0961   0A51 FD 87 01      and bl, %00000001
0962   0A54 8C            or al, bl
0963   0A55 8F 01         xor al, %00000001 ; > (signed)
0964   0A57 22 00         mov ah, 0
0965   0A59 27            mov b, a
0966   0A5A E4            pop a
0967   0A5B C0 00 00      cmp b, 0
0968   0A5E C6 8E 0A      je _while17_exit
0969   0A61             _while17_block:
0970   0A61 2C FA FF      mov b, [bp + -6] ; i
0971   0A64 D7            push a
0972   0A65 11            mov a, b
0973   0A66 FD 7D         dec b
0974   0A68 D7            push a
0975   0A69 11            mov a, b
0976   0A6A 45 FA FF      mov [bp + -6], a ; i
0977   0A6D E4            pop a
0978   0A6E 27            mov b, a
0979   0A6F E4            pop a
0980   0A70 FA FC FF      lea d, [bp + -4] ; digits beginning on the stack
0981   0A73 2D            mov b, d
0982   0A74 D7            push a
0983   0A75 74            mov d, b
0984   0A76 DA            push d
0985   0A77 2C FA FF      mov b, [bp + -6] ; i
0986   0A7A E7            pop d
0987   0A7B 10 01 00      mov a, 1
0988   0A7E AC            mul a, b
0989   0A7F 5A            add d, b
0990   0A80 E4            pop a
0991   0A81 32            mov bl, [d]
0992   0A82 A7 00         mov bh, 0
0993   0A84 DD            push bl
0994   0A85 07 80 09      call _putchar
0995   0A88 51 01 00      add sp, 1
0996   0A8B 0A 38 0A      jmp _while17_cond
0997   0A8E             _while17_exit:
0998   0A8E F9            leave
0999   0A8F 09            ret
1000   0A90             ; --- END TEXT BLOCK
1001   0A90             
1002   0A90             ; --- BEGIN DATA BLOCK
1003   0A90 00 00 00 00 __grid_data: .fill 1600, 0
1003   0A94 00 00 00 00 
1003   0A98 00 00 00 00 
1003   0A9C 00 00 00 00 
1003   0AA0 00 00 00 00 
1003   0AA4 00 00 00 00 
1003   0AA8 00 00 00 00 
1003   0AAC 00 00 00 00 
1003   0AB0 00 00 00 00 
1003   0AB4 00 00 00 00 
1003   0AB8 00 00 00 00 
1003   0ABC 00 00 00 00 
1003   0AC0 00 00 00 00 
1003   0AC4 00 00 00 00 
1003   0AC8 00 00 00 00 
1003   0ACC 00 00 00 00 
1003   0AD0 00 00 00 00 
1003   0AD4 00 00 00 00 
1003   0AD8 00 00 00 00 
1003   0ADC 00 00 00 00 
1003   0AE0 00 00 00 00 
1003   0AE4 00 00 00 00 
1003   0AE8 00 00 00 00 
1003   0AEC 00 00 00 00 
1003   0AF0 00 00 00 00 
1003   0AF4 00 00 00 00 
1003   0AF8 00 00 00 00 
1003   0AFC 00 00 00 00 
1003   0B00 00 00 00 00 
1003   0B04 00 00 00 00 
1003   0B08 00 00 00 00 
1003   0B0C 00 00 00 00 
1003   0B10 00 00 00 00 
1003   0B14 00 00 00 00 
1003   0B18 00 00 00 00 
1003   0B1C 00 00 00 00 
1003   0B20 00 00 00 00 
1003   0B24 00 00 00 00 
1003   0B28 00 00 00 00 
1003   0B2C 00 00 00 00 
1003   0B30 00 00 00 00 
1003   0B34 00 00 00 00 
1003   0B38 00 00 00 00 
1003   0B3C 00 00 00 00 
1003   0B40 00 00 00 00 
1003   0B44 00 00 00 00 
1003   0B48 00 00 00 00 
1003   0B4C 00 00 00 00 
1003   0B50 00 00 00 00 
1003   0B54 00 00 00 00 
1003   0B58 00 00 00 00 
1003   0B5C 00 00 00 00 
1003   0B60 00 00 00 00 
1003   0B64 00 00 00 00 
1003   0B68 00 00 00 00 
1003   0B6C 00 00 00 00 
1003   0B70 00 00 00 00 
1003   0B74 00 00 00 00 
1003   0B78 00 00 00 00 
1003   0B7C 00 00 00 00 
1003   0B80 00 00 00 00 
1003   0B84 00 00 00 00 
1003   0B88 00 00 00 00 
1003   0B8C 00 00 00 00 
1003   0B90 00 00 00 00 
1003   0B94 00 00 00 00 
1003   0B98 00 00 00 00 
1003   0B9C 00 00 00 00 
1003   0BA0 00 00 00 00 
1003   0BA4 00 00 00 00 
1003   0BA8 00 00 00 00 
1003   0BAC 00 00 00 00 
1003   0BB0 00 00 00 00 
1003   0BB4 00 00 00 00 
1003   0BB8 00 00 00 00 
1003   0BBC 00 00 00 00 
1003   0BC0 00 00 00 00 
1003   0BC4 00 00 00 00 
1003   0BC8 00 00 00 00 
1003   0BCC 00 00 00 00 
1003   0BD0 00 00 00 00 
1003   0BD4 00 00 00 00 
1003   0BD8 00 00 00 00 
1003   0BDC 00 00 00 00 
1003   0BE0 00 00 00 00 
1003   0BE4 00 00 00 00 
1003   0BE8 00 00 00 00 
1003   0BEC 00 00 00 00 
1003   0BF0 00 00 00 00 
1003   0BF4 00 00 00 00 
1003   0BF8 00 00 00 00 
1003   0BFC 00 00 00 00 
1003   0C00 00 00 00 00 
1003   0C04 00 00 00 00 
1003   0C08 00 00 00 00 
1003   0C0C 00 00 00 00 
1003   0C10 00 00 00 00 
1003   0C14 00 00 00 00 
1003   0C18 00 00 00 00 
1003   0C1C 00 00 00 00 
1003   0C20 00 00 00 00 
1003   0C24 00 00 00 00 
1003   0C28 00 00 00 00 
1003   0C2C 00 00 00 00 
1003   0C30 00 00 00 00 
1003   0C34 00 00 00 00 
1003   0C38 00 00 00 00 
1003   0C3C 00 00 00 00 
1003   0C40 00 00 00 00 
1003   0C44 00 00 00 00 
1003   0C48 00 00 00 00 
1003   0C4C 00 00 00 00 
1003   0C50 00 00 00 00 
1003   0C54 00 00 00 00 
1003   0C58 00 00 00 00 
1003   0C5C 00 00 00 00 
1003   0C60 00 00 00 00 
1003   0C64 00 00 00 00 
1003   0C68 00 00 00 00 
1003   0C6C 00 00 00 00 
1003   0C70 00 00 00 00 
1003   0C74 00 00 00 00 
1003   0C78 00 00 00 00 
1003   0C7C 00 00 00 00 
1003   0C80 00 00 00 00 
1003   0C84 00 00 00 00 
1003   0C88 00 00 00 00 
1003   0C8C 00 00 00 00 
1003   0C90 00 00 00 00 
1003   0C94 00 00 00 00 
1003   0C98 00 00 00 00 
1003   0C9C 00 00 00 00 
1003   0CA0 00 00 00 00 
1003   0CA4 00 00 00 00 
1003   0CA8 00 00 00 00 
1003   0CAC 00 00 00 00 
1003   0CB0 00 00 00 00 
1003   0CB4 00 00 00 00 
1003   0CB8 00 00 00 00 
1003   0CBC 00 00 00 00 
1003   0CC0 00 00 00 00 
1003   0CC4 00 00 00 00 
1003   0CC8 00 00 00 00 
1003   0CCC 00 00 00 00 
1003   0CD0 00 00 00 00 
1003   0CD4 00 00 00 00 
1003   0CD8 00 00 00 00 
1003   0CDC 00 00 00 00 
1003   0CE0 00 00 00 00 
1003   0CE4 00 00 00 00 
1003   0CE8 00 00 00 00 
1003   0CEC 00 00 00 00 
1003   0CF0 00 00 00 00 
1003   0CF4 00 00 00 00 
1003   0CF8 00 00 00 00 
1003   0CFC 00 00 00 00 
1003   0D00 00 00 00 00 
1003   0D04 00 00 00 00 
1003   0D08 00 00 00 00 
1003   0D0C 00 00 00 00 
1003   0D10 00 00 00 00 
1003   0D14 00 00 00 00 
1003   0D18 00 00 00 00 
1003   0D1C 00 00 00 00 
1003   0D20 00 00 00 00 
1003   0D24 00 00 00 00 
1003   0D28 00 00 00 00 
1003   0D2C 00 00 00 00 
1003   0D30 00 00 00 00 
1003   0D34 00 00 00 00 
1003   0D38 00 00 00 00 
1003   0D3C 00 00 00 00 
1003   0D40 00 00 00 00 
1003   0D44 00 00 00 00 
1003   0D48 00 00 00 00 
1003   0D4C 00 00 00 00 
1003   0D50 00 00 00 00 
1003   0D54 00 00 00 00 
1003   0D58 00 00 00 00 
1003   0D5C 00 00 00 00 
1003   0D60 00 00 00 00 
1003   0D64 00 00 00 00 
1003   0D68 00 00 00 00 
1003   0D6C 00 00 00 00 
1003   0D70 00 00 00 00 
1003   0D74 00 00 00 00 
1003   0D78 00 00 00 00 
1003   0D7C 00 00 00 00 
1003   0D80 00 00 00 00 
1003   0D84 00 00 00 00 
1003   0D88 00 00 00 00 
1003   0D8C 00 00 00 00 
1003   0D90 00 00 00 00 
1003   0D94 00 00 00 00 
1003   0D98 00 00 00 00 
1003   0D9C 00 00 00 00 
1003   0DA0 00 00 00 00 
1003   0DA4 00 00 00 00 
1003   0DA8 00 00 00 00 
1003   0DAC 00 00 00 00 
1003   0DB0 00 00 00 00 
1003   0DB4 00 00 00 00 
1003   0DB8 00 00 00 00 
1003   0DBC 00 00 00 00 
1003   0DC0 00 00 00 00 
1003   0DC4 00 00 00 00 
1003   0DC8 00 00 00 00 
1003   0DCC 00 00 00 00 
1003   0DD0 00 00 00 00 
1003   0DD4 00 00 00 00 
1003   0DD8 00 00 00 00 
1003   0DDC 00 00 00 00 
1003   0DE0 00 00 00 00 
1003   0DE4 00 00 00 00 
1003   0DE8 00 00 00 00 
1003   0DEC 00 00 00 00 
1003   0DF0 00 00 00 00 
1003   0DF4 00 00 00 00 
1003   0DF8 00 00 00 00 
1003   0DFC 00 00 00 00 
1003   0E00 00 00 00 00 
1003   0E04 00 00 00 00 
1003   0E08 00 00 00 00 
1003   0E0C 00 00 00 00 
1003   0E10 00 00 00 00 
1003   0E14 00 00 00 00 
1003   0E18 00 00 00 00 
1003   0E1C 00 00 00 00 
1003   0E20 00 00 00 00 
1003   0E24 00 00 00 00 
1003   0E28 00 00 00 00 
1003   0E2C 00 00 00 00 
1003   0E30 00 00 00 00 
1003   0E34 00 00 00 00 
1003   0E38 00 00 00 00 
1003   0E3C 00 00 00 00 
1003   0E40 00 00 00 00 
1003   0E44 00 00 00 00 
1003   0E48 00 00 00 00 
1003   0E4C 00 00 00 00 
1003   0E50 00 00 00 00 
1003   0E54 00 00 00 00 
1003   0E58 00 00 00 00 
1003   0E5C 00 00 00 00 
1003   0E60 00 00 00 00 
1003   0E64 00 00 00 00 
1003   0E68 00 00 00 00 
1003   0E6C 00 00 00 00 
1003   0E70 00 00 00 00 
1003   0E74 00 00 00 00 
1003   0E78 00 00 00 00 
1003   0E7C 00 00 00 00 
1003   0E80 00 00 00 00 
1003   0E84 00 00 00 00 
1003   0E88 00 00 00 00 
1003   0E8C 00 00 00 00 
1003   0E90 00 00 00 00 
1003   0E94 00 00 00 00 
1003   0E98 00 00 00 00 
1003   0E9C 00 00 00 00 
1003   0EA0 00 00 00 00 
1003   0EA4 00 00 00 00 
1003   0EA8 00 00 00 00 
1003   0EAC 00 00 00 00 
1003   0EB0 00 00 00 00 
1003   0EB4 00 00 00 00 
1003   0EB8 00 00 00 00 
1003   0EBC 00 00 00 00 
1003   0EC0 00 00 00 00 
1003   0EC4 00 00 00 00 
1003   0EC8 00 00 00 00 
1003   0ECC 00 00 00 00 
1003   0ED0 00 00 00 00 
1003   0ED4 00 00 00 00 
1003   0ED8 00 00 00 00 
1003   0EDC 00 00 00 00 
1003   0EE0 00 00 00 00 
1003   0EE4 00 00 00 00 
1003   0EE8 00 00 00 00 
1003   0EEC 00 00 00 00 
1003   0EF0 00 00 00 00 
1003   0EF4 00 00 00 00 
1003   0EF8 00 00 00 00 
1003   0EFC 00 00 00 00 
1003   0F00 00 00 00 00 
1003   0F04 00 00 00 00 
1003   0F08 00 00 00 00 
1003   0F0C 00 00 00 00 
1003   0F10 00 00 00 00 
1003   0F14 00 00 00 00 
1003   0F18 00 00 00 00 
1003   0F1C 00 00 00 00 
1003   0F20 00 00 00 00 
1003   0F24 00 00 00 00 
1003   0F28 00 00 00 00 
1003   0F2C 00 00 00 00 
1003   0F30 00 00 00 00 
1003   0F34 00 00 00 00 
1003   0F38 00 00 00 00 
1003   0F3C 00 00 00 00 
1003   0F40 00 00 00 00 
1003   0F44 00 00 00 00 
1003   0F48 00 00 00 00 
1003   0F4C 00 00 00 00 
1003   0F50 00 00 00 00 
1003   0F54 00 00 00 00 
1003   0F58 00 00 00 00 
1003   0F5C 00 00 00 00 
1003   0F60 00 00 00 00 
1003   0F64 00 00 00 00 
1003   0F68 00 00 00 00 
1003   0F6C 00 00 00 00 
1003   0F70 00 00 00 00 
1003   0F74 00 00 00 00 
1003   0F78 00 00 00 00 
1003   0F7C 00 00 00 00 
1003   0F80 00 00 00 00 
1003   0F84 00 00 00 00 
1003   0F88 00 00 00 00 
1003   0F8C 00 00 00 00 
1003   0F90 00 00 00 00 
1003   0F94 00 00 00 00 
1003   0F98 00 00 00 00 
1003   0F9C 00 00 00 00 
1003   0FA0 00 00 00 00 
1003   0FA4 00 00 00 00 
1003   0FA8 00 00 00 00 
1003   0FAC 00 00 00 00 
1003   0FB0 00 00 00 00 
1003   0FB4 00 00 00 00 
1003   0FB8 00 00 00 00 
1003   0FBC 00 00 00 00 
1003   0FC0 00 00 00 00 
1003   0FC4 00 00 00 00 
1003   0FC8 00 00 00 00 
1003   0FCC 00 00 00 00 
1003   0FD0 00 00 00 00 
1003   0FD4 00 00 00 00 
1003   0FD8 00 00 00 00 
1003   0FDC 00 00 00 00 
1003   0FE0 00 00 00 00 
1003   0FE4 00 00 00 00 
1003   0FE8 00 00 00 00 
1003   0FEC 00 00 00 00 
1003   0FF0 00 00 00 00 
1003   0FF4 00 00 00 00 
1003   0FF8 00 00 00 00 
1003   0FFC 00 00 00 00 
1003   1000 00 00 00 00 
1003   1004 00 00 00 00 
1003   1008 00 00 00 00 
1003   100C 00 00 00 00 
1003   1010 00 00 00 00 
1003   1014 00 00 00 00 
1003   1018 00 00 00 00 
1003   101C 00 00 00 00 
1003   1020 00 00 00 00 
1003   1024 00 00 00 00 
1003   1028 00 00 00 00 
1003   102C 00 00 00 00 
1003   1030 00 00 00 00 
1003   1034 00 00 00 00 
1003   1038 00 00 00 00 
1003   103C 00 00 00 00 
1003   1040 00 00 00 00 
1003   1044 00 00 00 00 
1003   1048 00 00 00 00 
1003   104C 00 00 00 00 
1003   1050 00 00 00 00 
1003   1054 00 00 00 00 
1003   1058 00 00 00 00 
1003   105C 00 00 00 00 
1003   1060 00 00 00 00 
1003   1064 00 00 00 00 
1003   1068 00 00 00 00 
1003   106C 00 00 00 00 
1003   1070 00 00 00 00 
1003   1074 00 00 00 00 
1003   1078 00 00 00 00 
1003   107C 00 00 00 00 
1003   1080 00 00 00 00 
1003   1084 00 00 00 00 
1003   1088 00 00 00 00 
1003   108C 00 00 00 00 
1003   1090 00 00 00 00 
1003   1094 00 00 00 00 
1003   1098 00 00 00 00 
1003   109C 00 00 00 00 
1003   10A0 00 00 00 00 
1003   10A4 00 00 00 00 
1003   10A8 00 00 00 00 
1003   10AC 00 00 00 00 
1003   10B0 00 00 00 00 
1003   10B4 00 00 00 00 
1003   10B8 00 00 00 00 
1003   10BC 00 00 00 00 
1003   10C0 00 00 00 00 
1003   10C4 00 00 00 00 
1003   10C8 00 00 00 00 
1003   10CC 00 00 00 00 
1004   10D0 90 0A       __grid: .dw __grid_data
1005   10D2 00 00 00 00 __new_grid_data: .fill 1600, 0
1005   10D6 00 00 00 00 
1005   10DA 00 00 00 00 
1005   10DE 00 00 00 00 
1005   10E2 00 00 00 00 
1005   10E6 00 00 00 00 
1005   10EA 00 00 00 00 
1005   10EE 00 00 00 00 
1005   10F2 00 00 00 00 
1005   10F6 00 00 00 00 
1005   10FA 00 00 00 00 
1005   10FE 00 00 00 00 
1005   1102 00 00 00 00 
1005   1106 00 00 00 00 
1005   110A 00 00 00 00 
1005   110E 00 00 00 00 
1005   1112 00 00 00 00 
1005   1116 00 00 00 00 
1005   111A 00 00 00 00 
1005   111E 00 00 00 00 
1005   1122 00 00 00 00 
1005   1126 00 00 00 00 
1005   112A 00 00 00 00 
1005   112E 00 00 00 00 
1005   1132 00 00 00 00 
1005   1136 00 00 00 00 
1005   113A 00 00 00 00 
1005   113E 00 00 00 00 
1005   1142 00 00 00 00 
1005   1146 00 00 00 00 
1005   114A 00 00 00 00 
1005   114E 00 00 00 00 
1005   1152 00 00 00 00 
1005   1156 00 00 00 00 
1005   115A 00 00 00 00 
1005   115E 00 00 00 00 
1005   1162 00 00 00 00 
1005   1166 00 00 00 00 
1005   116A 00 00 00 00 
1005   116E 00 00 00 00 
1005   1172 00 00 00 00 
1005   1176 00 00 00 00 
1005   117A 00 00 00 00 
1005   117E 00 00 00 00 
1005   1182 00 00 00 00 
1005   1186 00 00 00 00 
1005   118A 00 00 00 00 
1005   118E 00 00 00 00 
1005   1192 00 00 00 00 
1005   1196 00 00 00 00 
1005   119A 00 00 00 00 
1005   119E 00 00 00 00 
1005   11A2 00 00 00 00 
1005   11A6 00 00 00 00 
1005   11AA 00 00 00 00 
1005   11AE 00 00 00 00 
1005   11B2 00 00 00 00 
1005   11B6 00 00 00 00 
1005   11BA 00 00 00 00 
1005   11BE 00 00 00 00 
1005   11C2 00 00 00 00 
1005   11C6 00 00 00 00 
1005   11CA 00 00 00 00 
1005   11CE 00 00 00 00 
1005   11D2 00 00 00 00 
1005   11D6 00 00 00 00 
1005   11DA 00 00 00 00 
1005   11DE 00 00 00 00 
1005   11E2 00 00 00 00 
1005   11E6 00 00 00 00 
1005   11EA 00 00 00 00 
1005   11EE 00 00 00 00 
1005   11F2 00 00 00 00 
1005   11F6 00 00 00 00 
1005   11FA 00 00 00 00 
1005   11FE 00 00 00 00 
1005   1202 00 00 00 00 
1005   1206 00 00 00 00 
1005   120A 00 00 00 00 
1005   120E 00 00 00 00 
1005   1212 00 00 00 00 
1005   1216 00 00 00 00 
1005   121A 00 00 00 00 
1005   121E 00 00 00 00 
1005   1222 00 00 00 00 
1005   1226 00 00 00 00 
1005   122A 00 00 00 00 
1005   122E 00 00 00 00 
1005   1232 00 00 00 00 
1005   1236 00 00 00 00 
1005   123A 00 00 00 00 
1005   123E 00 00 00 00 
1005   1242 00 00 00 00 
1005   1246 00 00 00 00 
1005   124A 00 00 00 00 
1005   124E 00 00 00 00 
1005   1252 00 00 00 00 
1005   1256 00 00 00 00 
1005   125A 00 00 00 00 
1005   125E 00 00 00 00 
1005   1262 00 00 00 00 
1005   1266 00 00 00 00 
1005   126A 00 00 00 00 
1005   126E 00 00 00 00 
1005   1272 00 00 00 00 
1005   1276 00 00 00 00 
1005   127A 00 00 00 00 
1005   127E 00 00 00 00 
1005   1282 00 00 00 00 
1005   1286 00 00 00 00 
1005   128A 00 00 00 00 
1005   128E 00 00 00 00 
1005   1292 00 00 00 00 
1005   1296 00 00 00 00 
1005   129A 00 00 00 00 
1005   129E 00 00 00 00 
1005   12A2 00 00 00 00 
1005   12A6 00 00 00 00 
1005   12AA 00 00 00 00 
1005   12AE 00 00 00 00 
1005   12B2 00 00 00 00 
1005   12B6 00 00 00 00 
1005   12BA 00 00 00 00 
1005   12BE 00 00 00 00 
1005   12C2 00 00 00 00 
1005   12C6 00 00 00 00 
1005   12CA 00 00 00 00 
1005   12CE 00 00 00 00 
1005   12D2 00 00 00 00 
1005   12D6 00 00 00 00 
1005   12DA 00 00 00 00 
1005   12DE 00 00 00 00 
1005   12E2 00 00 00 00 
1005   12E6 00 00 00 00 
1005   12EA 00 00 00 00 
1005   12EE 00 00 00 00 
1005   12F2 00 00 00 00 
1005   12F6 00 00 00 00 
1005   12FA 00 00 00 00 
1005   12FE 00 00 00 00 
1005   1302 00 00 00 00 
1005   1306 00 00 00 00 
1005   130A 00 00 00 00 
1005   130E 00 00 00 00 
1005   1312 00 00 00 00 
1005   1316 00 00 00 00 
1005   131A 00 00 00 00 
1005   131E 00 00 00 00 
1005   1322 00 00 00 00 
1005   1326 00 00 00 00 
1005   132A 00 00 00 00 
1005   132E 00 00 00 00 
1005   1332 00 00 00 00 
1005   1336 00 00 00 00 
1005   133A 00 00 00 00 
1005   133E 00 00 00 00 
1005   1342 00 00 00 00 
1005   1346 00 00 00 00 
1005   134A 00 00 00 00 
1005   134E 00 00 00 00 
1005   1352 00 00 00 00 
1005   1356 00 00 00 00 
1005   135A 00 00 00 00 
1005   135E 00 00 00 00 
1005   1362 00 00 00 00 
1005   1366 00 00 00 00 
1005   136A 00 00 00 00 
1005   136E 00 00 00 00 
1005   1372 00 00 00 00 
1005   1376 00 00 00 00 
1005   137A 00 00 00 00 
1005   137E 00 00 00 00 
1005   1382 00 00 00 00 
1005   1386 00 00 00 00 
1005   138A 00 00 00 00 
1005   138E 00 00 00 00 
1005   1392 00 00 00 00 
1005   1396 00 00 00 00 
1005   139A 00 00 00 00 
1005   139E 00 00 00 00 
1005   13A2 00 00 00 00 
1005   13A6 00 00 00 00 
1005   13AA 00 00 00 00 
1005   13AE 00 00 00 00 
1005   13B2 00 00 00 00 
1005   13B6 00 00 00 00 
1005   13BA 00 00 00 00 
1005   13BE 00 00 00 00 
1005   13C2 00 00 00 00 
1005   13C6 00 00 00 00 
1005   13CA 00 00 00 00 
1005   13CE 00 00 00 00 
1005   13D2 00 00 00 00 
1005   13D6 00 00 00 00 
1005   13DA 00 00 00 00 
1005   13DE 00 00 00 00 
1005   13E2 00 00 00 00 
1005   13E6 00 00 00 00 
1005   13EA 00 00 00 00 
1005   13EE 00 00 00 00 
1005   13F2 00 00 00 00 
1005   13F6 00 00 00 00 
1005   13FA 00 00 00 00 
1005   13FE 00 00 00 00 
1005   1402 00 00 00 00 
1005   1406 00 00 00 00 
1005   140A 00 00 00 00 
1005   140E 00 00 00 00 
1005   1412 00 00 00 00 
1005   1416 00 00 00 00 
1005   141A 00 00 00 00 
1005   141E 00 00 00 00 
1005   1422 00 00 00 00 
1005   1426 00 00 00 00 
1005   142A 00 00 00 00 
1005   142E 00 00 00 00 
1005   1432 00 00 00 00 
1005   1436 00 00 00 00 
1005   143A 00 00 00 00 
1005   143E 00 00 00 00 
1005   1442 00 00 00 00 
1005   1446 00 00 00 00 
1005   144A 00 00 00 00 
1005   144E 00 00 00 00 
1005   1452 00 00 00 00 
1005   1456 00 00 00 00 
1005   145A 00 00 00 00 
1005   145E 00 00 00 00 
1005   1462 00 00 00 00 
1005   1466 00 00 00 00 
1005   146A 00 00 00 00 
1005   146E 00 00 00 00 
1005   1472 00 00 00 00 
1005   1476 00 00 00 00 
1005   147A 00 00 00 00 
1005   147E 00 00 00 00 
1005   1482 00 00 00 00 
1005   1486 00 00 00 00 
1005   148A 00 00 00 00 
1005   148E 00 00 00 00 
1005   1492 00 00 00 00 
1005   1496 00 00 00 00 
1005   149A 00 00 00 00 
1005   149E 00 00 00 00 
1005   14A2 00 00 00 00 
1005   14A6 00 00 00 00 
1005   14AA 00 00 00 00 
1005   14AE 00 00 00 00 
1005   14B2 00 00 00 00 
1005   14B6 00 00 00 00 
1005   14BA 00 00 00 00 
1005   14BE 00 00 00 00 
1005   14C2 00 00 00 00 
1005   14C6 00 00 00 00 
1005   14CA 00 00 00 00 
1005   14CE 00 00 00 00 
1005   14D2 00 00 00 00 
1005   14D6 00 00 00 00 
1005   14DA 00 00 00 00 
1005   14DE 00 00 00 00 
1005   14E2 00 00 00 00 
1005   14E6 00 00 00 00 
1005   14EA 00 00 00 00 
1005   14EE 00 00 00 00 
1005   14F2 00 00 00 00 
1005   14F6 00 00 00 00 
1005   14FA 00 00 00 00 
1005   14FE 00 00 00 00 
1005   1502 00 00 00 00 
1005   1506 00 00 00 00 
1005   150A 00 00 00 00 
1005   150E 00 00 00 00 
1005   1512 00 00 00 00 
1005   1516 00 00 00 00 
1005   151A 00 00 00 00 
1005   151E 00 00 00 00 
1005   1522 00 00 00 00 
1005   1526 00 00 00 00 
1005   152A 00 00 00 00 
1005   152E 00 00 00 00 
1005   1532 00 00 00 00 
1005   1536 00 00 00 00 
1005   153A 00 00 00 00 
1005   153E 00 00 00 00 
1005   1542 00 00 00 00 
1005   1546 00 00 00 00 
1005   154A 00 00 00 00 
1005   154E 00 00 00 00 
1005   1552 00 00 00 00 
1005   1556 00 00 00 00 
1005   155A 00 00 00 00 
1005   155E 00 00 00 00 
1005   1562 00 00 00 00 
1005   1566 00 00 00 00 
1005   156A 00 00 00 00 
1005   156E 00 00 00 00 
1005   1572 00 00 00 00 
1005   1576 00 00 00 00 
1005   157A 00 00 00 00 
1005   157E 00 00 00 00 
1005   1582 00 00 00 00 
1005   1586 00 00 00 00 
1005   158A 00 00 00 00 
1005   158E 00 00 00 00 
1005   1592 00 00 00 00 
1005   1596 00 00 00 00 
1005   159A 00 00 00 00 
1005   159E 00 00 00 00 
1005   15A2 00 00 00 00 
1005   15A6 00 00 00 00 
1005   15AA 00 00 00 00 
1005   15AE 00 00 00 00 
1005   15B2 00 00 00 00 
1005   15B6 00 00 00 00 
1005   15BA 00 00 00 00 
1005   15BE 00 00 00 00 
1005   15C2 00 00 00 00 
1005   15C6 00 00 00 00 
1005   15CA 00 00 00 00 
1005   15CE 00 00 00 00 
1005   15D2 00 00 00 00 
1005   15D6 00 00 00 00 
1005   15DA 00 00 00 00 
1005   15DE 00 00 00 00 
1005   15E2 00 00 00 00 
1005   15E6 00 00 00 00 
1005   15EA 00 00 00 00 
1005   15EE 00 00 00 00 
1005   15F2 00 00 00 00 
1005   15F6 00 00 00 00 
1005   15FA 00 00 00 00 
1005   15FE 00 00 00 00 
1005   1602 00 00 00 00 
1005   1606 00 00 00 00 
1005   160A 00 00 00 00 
1005   160E 00 00 00 00 
1005   1612 00 00 00 00 
1005   1616 00 00 00 00 
1005   161A 00 00 00 00 
1005   161E 00 00 00 00 
1005   1622 00 00 00 00 
1005   1626 00 00 00 00 
1005   162A 00 00 00 00 
1005   162E 00 00 00 00 
1005   1632 00 00 00 00 
1005   1636 00 00 00 00 
1005   163A 00 00 00 00 
1005   163E 00 00 00 00 
1005   1642 00 00 00 00 
1005   1646 00 00 00 00 
1005   164A 00 00 00 00 
1005   164E 00 00 00 00 
1005   1652 00 00 00 00 
1005   1656 00 00 00 00 
1005   165A 00 00 00 00 
1005   165E 00 00 00 00 
1005   1662 00 00 00 00 
1005   1666 00 00 00 00 
1005   166A 00 00 00 00 
1005   166E 00 00 00 00 
1005   1672 00 00 00 00 
1005   1676 00 00 00 00 
1005   167A 00 00 00 00 
1005   167E 00 00 00 00 
1005   1682 00 00 00 00 
1005   1686 00 00 00 00 
1005   168A 00 00 00 00 
1005   168E 00 00 00 00 
1005   1692 00 00 00 00 
1005   1696 00 00 00 00 
1005   169A 00 00 00 00 
1005   169E 00 00 00 00 
1005   16A2 00 00 00 00 
1005   16A6 00 00 00 00 
1005   16AA 00 00 00 00 
1005   16AE 00 00 00 00 
1005   16B2 00 00 00 00 
1005   16B6 00 00 00 00 
1005   16BA 00 00 00 00 
1005   16BE 00 00 00 00 
1005   16C2 00 00 00 00 
1005   16C6 00 00 00 00 
1005   16CA 00 00 00 00 
1005   16CE 00 00 00 00 
1005   16D2 00 00 00 00 
1005   16D6 00 00 00 00 
1005   16DA 00 00 00 00 
1005   16DE 00 00 00 00 
1005   16E2 00 00 00 00 
1005   16E6 00 00 00 00 
1005   16EA 00 00 00 00 
1005   16EE 00 00 00 00 
1005   16F2 00 00 00 00 
1005   16F6 00 00 00 00 
1005   16FA 00 00 00 00 
1005   16FE 00 00 00 00 
1005   1702 00 00 00 00 
1005   1706 00 00 00 00 
1005   170A 00 00 00 00 
1005   170E 00 00 00 00 
1006   1712 D2 10       __new_grid: .dw __new_grid_data
1007   1714 00 00       __x: .fill 2, 0
1008   1716 00 00       __y: .fill 2, 0
1009   1718 00 00       __dx: .fill 2, 0
1010   171A 00 00       __dy: .fill 2, 0
1011   171C 00 00       __nx: .fill 2, 0
1012   171E 00 00       __ny: .fill 2, 0
1013   1720 00 00       __head_count: .fill 2, 0
1014   1722 00          __c: .fill 1, 0
1015   1723             ; --- END DATA BLOCK
1016   1723             
1017   1723             ; --- BEGIN INCLUDE BLOCK
1018   1723             .include "lib/stdio.asm"
0001+  1723             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1723             ; stdio.s
0003+  1723             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1723             .include "lib/string.asm"
0001++ 1723             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1723             ; string.s
0003++ 1723             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1723             
0005++ 1723             
0006++ 1723             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1723             ; strrev
0008++ 1723             ; reverse a string
0009++ 1723             ; D = string address
0010++ 1723             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1723             ; 01234
0012++ 1723             strrev:
0013++ 1723 4B          	pusha
0014++ 1724 07 6A 17    	call strlen	; length in C
0015++ 1727 12          	mov a, c
0016++ 1728 AF 01 00    	cmp a, 1
0017++ 172B D0 45 17    	jleu strrev_end	; check string length. string len must be > 1
0018++ 172E 7D          	dec a
0019++ 172F FD 4E       	mov si, d	; beginning of string
0020++ 1731 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1733 59          	add d, a	; end of string
0022++ 1734 12          	mov a, c
0023++ 1735 FD 9B       	shr a		; divide by 2
0024++ 1737 39          	mov c, a	; C now counts the steps
0025++ 1738             strrev_L0:
0026++ 1738 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1739 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 173A 3E          	mov [d], al	; store left char into right side
0029++ 173B 1B          	mov al, bl
0030++ 173C F7          	stosb		; store right-side char into left-side; increase DI
0031++ 173D 7E          	dec c
0032++ 173E 7F          	dec d
0033++ 173F C2 00 00    	cmp c, 0
0034++ 1742 C7 38 17    	jne strrev_L0
0035++ 1745             strrev_end:
0036++ 1745 4C          	popa
0037++ 1746 09          	ret
0038++ 1747             	
0039++ 1747             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1747             ; strchr
0041++ 1747             ; search string in D for char in AL
0042++ 1747             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1747             strchr:
0044++ 1747             strchr_L0:
0045++ 1747 32          	mov bl, [d]
0046++ 1748 C1 00       	cmp bl, 0
0047++ 174A C6 55 17    	je strchr_end
0048++ 174D BA          	cmp al, bl
0049++ 174E C6 55 17    	je strchr_end
0050++ 1751 79          	inc d
0051++ 1752 0A 47 17    	jmp strchr_L0
0052++ 1755             strchr_end:
0053++ 1755 1B          	mov al, bl
0054++ 1756 09          	ret
0055++ 1757             
0056++ 1757             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1757             ; strstr
0058++ 1757             ; find sub-string
0059++ 1757             ; str1 in SI
0060++ 1757             ; str2 in DI
0061++ 1757             ; SI points to end of source string
0062++ 1757             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1757             strstr:
0064++ 1757 DB          	push al
0065++ 1758 DA          	push d
0066++ 1759 E3          	push di
0067++ 175A             strstr_loop:
0068++ 175A F3          	cmpsb					; compare a byte of the strings
0069++ 175B C7 66 17    	jne strstr_ret
0070++ 175E FC 00 00    	lea d, [di + 0]
0071++ 1761 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1763 C7 5A 17    	jne strstr_loop				; equal chars but not at end
0073++ 1766             strstr_ret:
0074++ 1766 F0          	pop di
0075++ 1767 E7          	pop d
0076++ 1768 E8          	pop al
0077++ 1769 09          	ret
0078++ 176A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 176A             ; length of null terminated string
0080++ 176A             ; result in C
0081++ 176A             ; pointer in D
0082++ 176A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 176A             strlen:
0084++ 176A DA          	push d
0085++ 176B 38 00 00    	mov c, 0
0086++ 176E             strlen_L1:
0087++ 176E BD 00       	cmp byte [d], 0
0088++ 1770 C6 78 17    	je strlen_ret
0089++ 1773 79          	inc d
0090++ 1774 78          	inc c
0091++ 1775 0A 6E 17    	jmp strlen_L1
0092++ 1778             strlen_ret:
0093++ 1778 E7          	pop d
0094++ 1779 09          	ret
0095++ 177A             
0096++ 177A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 177A             ; STRCMP
0098++ 177A             ; compare two strings
0099++ 177A             ; str1 in SI
0100++ 177A             ; str2 in DI
0101++ 177A             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 177A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 177A             strcmp:
0104++ 177A DB          	push al
0105++ 177B DA          	push d
0106++ 177C E3          	push di
0107++ 177D E2          	push si
0108++ 177E             strcmp_loop:
0109++ 177E F3          	cmpsb					; compare a byte of the strings
0110++ 177F C7 8A 17    	jne strcmp_ret
0111++ 1782 FB FF FF    	lea d, [si +- 1]
0112++ 1785 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1787 C7 7E 17    	jne strcmp_loop				; equal chars but not at end
0114++ 178A             strcmp_ret:
0115++ 178A EF          	pop si
0116++ 178B F0          	pop di
0117++ 178C E7          	pop d
0118++ 178D E8          	pop al
0119++ 178E 09          	ret
0120++ 178F             
0121++ 178F             
0122++ 178F             ; STRCPY
0123++ 178F             ; copy null terminated string from SI to DI
0124++ 178F             ; source in SI
0125++ 178F             ; destination in DI
0126++ 178F             strcpy:
0127++ 178F E2          	push si
0128++ 1790 E3          	push di
0129++ 1791 DB          	push al
0130++ 1792             strcpy_L1:
0131++ 1792 F6          	lodsb
0132++ 1793 F7          	stosb
0133++ 1794 B9 00       	cmp al, 0
0134++ 1796 C7 92 17    	jne strcpy_L1
0135++ 1799             strcpy_end:
0136++ 1799 E8          	pop al
0137++ 179A F0          	pop di
0138++ 179B EF          	pop si
0139++ 179C 09          	ret
0140++ 179D             
0141++ 179D             ; STRCAT
0142++ 179D             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 179D             ; source in SI
0144++ 179D             ; destination in DI
0145++ 179D             strcat:
0146++ 179D E2          	push si
0147++ 179E E3          	push di
0148++ 179F D7          	push a
0149++ 17A0 DA          	push d
0150++ 17A1 50          	mov a, di
0151++ 17A2 3C          	mov d, a
0152++ 17A3             strcat_goto_end_L1:
0153++ 17A3 BD 00       	cmp byte[d], 0
0154++ 17A5 C6 AC 17    	je strcat_start
0155++ 17A8 79          	inc d
0156++ 17A9 0A A3 17    	jmp strcat_goto_end_L1
0157++ 17AC             strcat_start:
0158++ 17AC FD 50       	mov di, d
0159++ 17AE             strcat_L1:
0160++ 17AE F6          	lodsb
0161++ 17AF F7          	stosb
0162++ 17B0 B9 00       	cmp al, 0
0163++ 17B2 C7 AE 17    	jne strcat_L1
0164++ 17B5             strcat_end:
0165++ 17B5 E7          	pop d
0166++ 17B6 E4          	pop a
0167++ 17B7 F0          	pop di
0168++ 17B8 EF          	pop si
0169++ 17B9 09          	ret
0005+  17BA             
0006+  17BA 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  17BE 34 35 36 37 
0006+  17C2 38 39 41 42 
0006+  17C6 43 44 45 46 
0007+  17CA 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  17CE 1B 5B 48 00 
0008+  17D2             
0009+  17D2 01 00       table_power:.dw 1
0010+  17D4 0A 00       			.dw 10
0011+  17D6 64 00       			.dw 100
0012+  17D8 E8 03       			.dw 1000
0013+  17DA 10 27       			.dw 10000
0014+  17DC             
0015+  17DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  17DC             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  17DC             ; ASCII in BL
0018+  17DC             ; result in AL
0019+  17DC             ; ascii for F = 0100 0110
0020+  17DC             ; ascii for 9 = 0011 1001
0021+  17DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  17DC             hex_ascii_encode:
0023+  17DC 1B          	mov al, bl
0024+  17DD 93 40       	test al, $40				; test if letter or number
0025+  17DF C7 E5 17    	jnz hex_letter
0026+  17E2 87 0F       	and al, $0F				; get number
0027+  17E4 09          	ret
0028+  17E5             hex_letter:
0029+  17E5 87 0F       	and al, $0F				; get letter
0030+  17E7 6A 09       	add al, 9
0031+  17E9 09          	ret
0032+  17EA             
0033+  17EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  17EA             ; ATOI
0035+  17EA             ; 2 letter hex string in B
0036+  17EA             ; 8bit integer returned in AL
0037+  17EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  17EA             atoi:
0039+  17EA D8          	push b
0040+  17EB 07 DC 17    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  17EE 30          	mov bl, bh
0042+  17EF DB          	push al					; save a
0043+  17F0 07 DC 17    	call hex_ascii_encode
0044+  17F3 EA          	pop bl	
0045+  17F4 FD 9E 04    	shl al, 4
0046+  17F7 8C          	or al, bl
0047+  17F8 E5          	pop b
0048+  17F9 09          	ret	
0049+  17FA             
0050+  17FA             
0051+  17FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  17FA             ; printf
0053+  17FA             ; no need for explanations!
0054+  17FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  17FA             printf:
0056+  17FA 09          	ret
0057+  17FB             
0058+  17FB             
0059+  17FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  17FB             ; scanf
0061+  17FB             ; no need for explanations!
0062+  17FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  17FB             scanf:
0064+  17FB 09          	ret
0065+  17FC             
0066+  17FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  17FC             ; ITOA
0068+  17FC             ; 8bit value in BL
0069+  17FC             ; 2 byte ASCII result in A
0070+  17FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  17FC             itoa:
0072+  17FC DA          	push d
0073+  17FD D8          	push b
0074+  17FE A7 00       	mov bh, 0
0075+  1800 FD A4 04    	shr bl, 4	
0076+  1803 74          	mov d, b
0077+  1804 1F BA 17    	mov al, [d + s_hex_digits]
0078+  1807 23          	mov ah, al
0079+  1808             	
0080+  1808 E5          	pop b
0081+  1809 D8          	push b
0082+  180A A7 00       	mov bh, 0
0083+  180C FD 87 0F    	and bl, $0F
0084+  180F 74          	mov d, b
0085+  1810 1F BA 17    	mov al, [d + s_hex_digits]
0086+  1813 E5          	pop b
0087+  1814 E7          	pop d
0088+  1815 09          	ret
0089+  1816             
0090+  1816             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  1816             ; HEX STRING TO BINARY
0092+  1816             ; di = destination address
0093+  1816             ; si = source
0094+  1816             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  1816             hex_to_int:
0096+  1816             hex_to_int_L1:
0097+  1816 F6          	lodsb					; load from [SI] to AL
0098+  1817 B9 00       	cmp al, 0				; check if ASCII 0
0099+  1819 C6 26 18    	jz hex_to_int_ret
0100+  181C 36          	mov bh, al
0101+  181D F6          	lodsb
0102+  181E 2F          	mov bl, al
0103+  181F 07 EA 17    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  1822 F7          	stosb					; store AL to [DI]
0105+  1823 0A 16 18    	jmp hex_to_int_L1
0106+  1826             hex_to_int_ret:
0107+  1826 09          	ret		
0108+  1827             
0109+  1827             
0110+  1827             
0111+  1827             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  1827             ; GETCHAR
0113+  1827             ; char in ah
0114+  1827             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  1827             getchar:
0116+  1827 DB          	push al
0117+  1828             getchar_retry:
0118+  1828 FD 0C       	sti
0119+  182A 19 01       	mov al, 1
0120+  182C 05 03       	syscall sys_io			; receive in AH
0121+  182E B9 00       	cmp al, 0			; check if any char was receive
0122+  1830 C6 28 18    	je getchar_retry
0123+  1833 E8          	pop al
0124+  1834 09          	ret
0125+  1835             
0126+  1835             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  1835             ; PUTCHAR
0128+  1835             ; char in ah
0129+  1835             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1835             putchar:
0131+  1835 D7          	push a
0132+  1836 19 00       	mov al, 0
0133+  1838 05 03       	syscall sys_io			; char in AH
0134+  183A E4          	pop a
0135+  183B 09          	ret
0136+  183C             
0137+  183C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  183C             ;; INPUT A STRING
0139+  183C             ;; terminates with null
0140+  183C             ;; pointer in D
0141+  183C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  183C             gets:
0143+  183C D7          	push a
0144+  183D DA          	push d
0145+  183E             gets_loop:
0146+  183E FD 0C       	sti
0147+  1840 19 01       	mov al, 1
0148+  1842 05 03       	syscall sys_io			; receive in AH
0149+  1844 B9 00       	cmp al, 0				; check error code (AL)
0150+  1846 C6 3E 18    	je gets_loop			; if no char received, retry
0151+  1849             
0152+  1849 76 1B       	cmp ah, 27
0153+  184B C6 6C 18    	je gets_telnet_escape
0154+  184E 76 0A       	cmp ah, $0A				; LF
0155+  1850 C6 C5 18    	je gets_end
0156+  1853 76 0D       	cmp ah, $0D				; CR
0157+  1855 C6 C5 18    	je gets_end
0158+  1858 76 5C       	cmp ah, $5C				; '\\'
0159+  185A C6 9C 18    	je gets_escape
0160+  185D             	
0161+  185D 76 08       	cmp ah, $08			; check for backspace
0162+  185F C6 68 18    	je gets_backspace
0163+  1862             
0164+  1862 1A          	mov al, ah
0165+  1863 3E          	mov [d], al
0166+  1864 79          	inc d
0167+  1865 0A 3E 18    	jmp gets_loop
0168+  1868             gets_backspace:
0169+  1868 7F          	dec d
0170+  1869 0A 3E 18    	jmp gets_loop
0171+  186C             gets_telnet_escape:
0172+  186C FD 0C       	sti
0173+  186E 19 01       	mov al, 1
0174+  1870 05 03       	syscall sys_io				; receive in AH without echo
0175+  1872 B9 00       	cmp al, 0					; check error code (AL)
0176+  1874 C6 6C 18    	je gets_telnet_escape		; if no char received, retry
0177+  1877 76 5B       	cmp ah, '['
0178+  1879 C7 3E 18    	jne gets_loop
0179+  187C             gets_telnet_escape_phase2:
0180+  187C FD 0C       	sti
0181+  187E 19 01       	mov al, 1
0182+  1880 05 03       	syscall sys_io					; receive in AH without echo
0183+  1882 B9 00       	cmp al, 0						; check error code (AL)
0184+  1884 C6 7C 18    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  1887 76 44       	cmp ah, 'D'
0186+  1889 C6 94 18    	je gets_left_arrow
0187+  188C 76 43       	cmp ah, 'C'
0188+  188E C6 98 18    	je gets_right_arrow
0189+  1891 0A 3E 18    	jmp gets_loop
0190+  1894             gets_left_arrow:
0191+  1894 7F          	dec d
0192+  1895 0A 3E 18    	jmp gets_loop
0193+  1898             gets_right_arrow:
0194+  1898 79          	inc d
0195+  1899 0A 3E 18    	jmp gets_loop
0196+  189C             gets_escape:
0197+  189C FD 0C       	sti
0198+  189E 19 01       	mov al, 1
0199+  18A0 05 03       	syscall sys_io			; receive in AH
0200+  18A2 B9 00       	cmp al, 0				; check error code (AL)
0201+  18A4 C6 9C 18    	je gets_escape			; if no char received, retry
0202+  18A7 76 6E       	cmp ah, 'n'
0203+  18A9 C6 B7 18    	je gets_LF
0204+  18AC 76 72       	cmp ah, 'r'
0205+  18AE C6 BE 18    	je gets_CR
0206+  18B1 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  18B2 3E          	mov [d], al
0208+  18B3 79          	inc d
0209+  18B4 0A 3E 18    	jmp gets_loop
0210+  18B7             gets_LF:
0211+  18B7 19 0A       	mov al, $0A
0212+  18B9 3E          	mov [d], al
0213+  18BA 79          	inc d
0214+  18BB 0A 3E 18    	jmp gets_loop
0215+  18BE             gets_CR:
0216+  18BE 19 0D       	mov al, $0D
0217+  18C0 3E          	mov [d], al
0218+  18C1 79          	inc d
0219+  18C2 0A 3E 18    	jmp gets_loop
0220+  18C5             gets_end:
0221+  18C5 19 00       	mov al, 0
0222+  18C7 3E          	mov [d], al				; terminate string
0223+  18C8 E7          	pop d
0224+  18C9 E4          	pop a
0225+  18CA 09          	ret
0226+  18CB             
0227+  18CB             
0228+  18CB             
0229+  18CB             
0230+  18CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  18CB             ;; INPUT TEXT
0232+  18CB             ;; terminated with CTRL+D
0233+  18CB             ;; pointer in D
0234+  18CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  18CB             gettxt:
0236+  18CB D7          	push a
0237+  18CC DA          	push d
0238+  18CD             gettxt_loop:
0239+  18CD 19 01       	mov al, 1
0240+  18CF 05 03       	syscall sys_io			; receive in AH
0241+  18D1 B9 00       	cmp al, 0				; check error code (AL)
0242+  18D3 C6 CD 18    	je gettxt_loop		; if no char received, retry
0243+  18D6 76 04       	cmp ah, 4			; EOT
0244+  18D8 C6 16 19    	je gettxt_end
0245+  18DB 76 08       	cmp ah, $08			; check for backspace
0246+  18DD C6 12 19    	je gettxt_backspace
0247+  18E0 76 5C       	cmp ah, $5C				; '\\'
0248+  18E2 C6 EB 18    	je gettxt_escape
0249+  18E5 1A          	mov al, ah
0250+  18E6 3E          	mov [d], al
0251+  18E7 79          	inc d
0252+  18E8 0A CD 18    	jmp gettxt_loop
0253+  18EB             gettxt_escape:
0254+  18EB 19 01       	mov al, 1
0255+  18ED 05 03       	syscall sys_io			; receive in AH
0256+  18EF B9 00       	cmp al, 0				; check error code (AL)
0257+  18F1 C6 EB 18    	je gettxt_escape		; if no char received, retry
0258+  18F4 76 6E       	cmp ah, 'n'
0259+  18F6 C6 04 19    	je gettxt_LF
0260+  18F9 76 72       	cmp ah, 'r'
0261+  18FB C6 0B 19    	je gettxt_CR
0262+  18FE 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  18FF 3E          	mov [d], al
0264+  1900 79          	inc d
0265+  1901 0A CD 18    	jmp gettxt_loop
0266+  1904             gettxt_LF:
0267+  1904 19 0A       	mov al, $0A
0268+  1906 3E          	mov [d], al
0269+  1907 79          	inc d
0270+  1908 0A CD 18    	jmp gettxt_loop
0271+  190B             gettxt_CR:
0272+  190B 19 0D       	mov al, $0D
0273+  190D 3E          	mov [d], al
0274+  190E 79          	inc d
0275+  190F 0A CD 18    	jmp gettxt_loop
0276+  1912             gettxt_backspace:
0277+  1912 7F          	dec d
0278+  1913 0A CD 18    	jmp gettxt_loop
0279+  1916             gettxt_end:
0280+  1916 19 00       	mov al, 0
0281+  1918 3E          	mov [d], al				; terminate string
0282+  1919 E7          	pop d
0283+  191A E4          	pop a
0284+  191B 09          	ret
0285+  191C             
0286+  191C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  191C             ; PRINT NEW LINE
0288+  191C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  191C             printnl:
0290+  191C D7          	push a
0291+  191D 10 00 0A    	mov a, $0A00
0292+  1920 05 03       	syscall sys_io
0293+  1922 10 00 0D    	mov a, $0D00
0294+  1925 05 03       	syscall sys_io
0295+  1927 E4          	pop a
0296+  1928 09          	ret
0297+  1929             
0298+  1929             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  1929             ; strtoint
0300+  1929             ; 4 digit hex string number in d
0301+  1929             ; integer returned in A
0302+  1929             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  1929             strtointx:
0304+  1929 D8          	push b
0305+  192A 32          	mov bl, [d]
0306+  192B 37          	mov bh, bl
0307+  192C 33 01 00    	mov bl, [d + 1]
0308+  192F 07 EA 17    	call atoi				; convert to int in AL
0309+  1932 23          	mov ah, al				; move to AH
0310+  1933 33 02 00    	mov bl, [d + 2]
0311+  1936 37          	mov bh, bl
0312+  1937 33 03 00    	mov bl, [d + 3]
0313+  193A 07 EA 17    	call atoi				; convert to int in AL
0314+  193D E5          	pop b
0315+  193E 09          	ret
0316+  193F             
0317+  193F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  193F             ; strtoint
0319+  193F             ; 5 digit base10 string number in d
0320+  193F             ; integer returned in A
0321+  193F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  193F             strtoint:
0323+  193F E2          	push si
0324+  1940 D8          	push b
0325+  1941 D9          	push c
0326+  1942 DA          	push d
0327+  1943 07 6A 17    	call strlen			; get string length in C
0328+  1946 7E          	dec c
0329+  1947 FD 4E       	mov si, d
0330+  1949 12          	mov a, c
0331+  194A FD 99       	shl a
0332+  194C 3B D2 17    	mov d, table_power
0333+  194F 59          	add d, a
0334+  1950 38 00 00    	mov c, 0
0335+  1953             strtoint_L0:
0336+  1953 F6          	lodsb			; load ASCII to al
0337+  1954 B9 00       	cmp al, 0
0338+  1956 C6 69 19    	je strtoint_end
0339+  1959 6F 30       	sub al, $30		; make into integer
0340+  195B 22 00       	mov ah, 0
0341+  195D 2A          	mov b, [d]
0342+  195E AC          	mul a, b			; result in B since it fits in 16bits
0343+  195F 11          	mov a, b
0344+  1960 28          	mov b, c
0345+  1961 54          	add a, b
0346+  1962 39          	mov c, a
0347+  1963 63 02 00    	sub d, 2
0348+  1966 0A 53 19    	jmp strtoint_L0
0349+  1969             strtoint_end:
0350+  1969 12          	mov a, c
0351+  196A E7          	pop d
0352+  196B E6          	pop c
0353+  196C E5          	pop b
0354+  196D EF          	pop si
0355+  196E 09          	ret
0356+  196F             
0357+  196F             
0358+  196F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  196F             ; PRINT NULL TERMINATED STRING
0360+  196F             ; pointer in D
0361+  196F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  196F             puts:
0363+  196F D7          	push a
0364+  1970 DA          	push d
0365+  1971             puts_L1:
0366+  1971 1E          	mov al, [d]
0367+  1972 B9 00       	cmp al, 0
0368+  1974 C6 80 19    	jz puts_END
0369+  1977 23          	mov ah, al
0370+  1978 19 00       	mov al, 0
0371+  197A 05 03       	syscall sys_io
0372+  197C 79          	inc d
0373+  197D 0A 71 19    	jmp puts_L1
0374+  1980             puts_END:
0375+  1980 E7          	pop d
0376+  1981 E4          	pop a
0377+  1982 09          	ret
0378+  1983             
0379+  1983             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  1983             ; PRINT N SIZE STRING
0381+  1983             ; pointer in D
0382+  1983             ; size in C
0383+  1983             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  1983             putsn:
0385+  1983 DB          	push al
0386+  1984 DA          	push d
0387+  1985 D9          	push c
0388+  1986             putsn_L0:
0389+  1986 1E          	mov al, [d]
0390+  1987 23          	mov ah, al
0391+  1988 19 00       	mov al, 0
0392+  198A 05 03       	syscall sys_io
0393+  198C 79          	inc d
0394+  198D 7E          	dec c	
0395+  198E C2 00 00    	cmp c, 0
0396+  1991 C7 86 19    	jne putsn_L0
0397+  1994             putsn_end:
0398+  1994 E6          	pop c
0399+  1995 E7          	pop d
0400+  1996 E8          	pop al
0401+  1997 09          	ret
0402+  1998             
0403+  1998             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  1998             ; print 16bit decimal number
0405+  1998             ; input number in A
0406+  1998             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  1998             print_u16d:
0408+  1998 D7          	push a
0409+  1999 D8          	push b
0410+  199A 26 10 27    	mov b, 10000
0411+  199D AE          	div a, b			; get 10000 coeff.
0412+  199E 07 C4 19    	call print_number
0413+  19A1 11          	mov a, b
0414+  19A2 26 E8 03    	mov b, 1000
0415+  19A5 AE          	div a, b			; get 10000 coeff.
0416+  19A6 07 C4 19    	call print_number
0417+  19A9 11          	mov a, b
0418+  19AA 26 64 00    	mov b, 100
0419+  19AD AE          	div a, b
0420+  19AE 07 C4 19    	call print_number
0421+  19B1 11          	mov a, b
0422+  19B2 26 0A 00    	mov b, 10
0423+  19B5 AE          	div a, b
0424+  19B6 07 C4 19    	call print_number
0425+  19B9 11          	mov a, b
0426+  19BA 6A 30       	add al, $30
0427+  19BC 23          	mov ah, al
0428+  19BD 19 00       	mov al, 0
0429+  19BF 05 03       	syscall sys_io	; print coeff
0430+  19C1 E5          	pop b
0431+  19C2 E4          	pop a
0432+  19C3 09          	ret
0433+  19C4             
0434+  19C4             
0435+  19C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  19C4             ; if A == 0, print space
0437+  19C4             ; else print A
0438+  19C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  19C4             print_number:
0440+  19C4 6A 30       	add al, $30
0441+  19C6 23          	mov ah, al
0442+  19C7 07 35 18    	call putchar
0443+  19CA 09          	ret
0444+  19CB             
0445+  19CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  19CB             ; PRINT 16BIT HEX INTEGER
0447+  19CB             ; integer value in reg B
0448+  19CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  19CB             print_u16x:
0450+  19CB D7          	push a
0451+  19CC D8          	push b
0452+  19CD DD          	push bl
0453+  19CE 30          	mov bl, bh
0454+  19CF 07 FC 17    	call itoa				; convert bh to char in A
0455+  19D2 2F          	mov bl, al				; save al
0456+  19D3 19 00       	mov al, 0
0457+  19D5 05 03       	syscall sys_io				; display AH
0458+  19D7 24          	mov ah, bl				; retrieve al
0459+  19D8 19 00       	mov al, 0
0460+  19DA 05 03       	syscall sys_io				; display AL
0461+  19DC             
0462+  19DC EA          	pop bl
0463+  19DD 07 FC 17    	call itoa				; convert bh to char in A
0464+  19E0 2F          	mov bl, al				; save al
0465+  19E1 19 00       	mov al, 0
0466+  19E3 05 03       	syscall sys_io				; display AH
0467+  19E5 24          	mov ah, bl				; retrieve al
0468+  19E6 19 00       	mov al, 0
0469+  19E8 05 03       	syscall sys_io				; display AL
0470+  19EA             
0471+  19EA E5          	pop b
0472+  19EB E4          	pop a
0473+  19EC 09          	ret
0474+  19ED             
0475+  19ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  19ED             ; INPUT 16BIT HEX INTEGER
0477+  19ED             ; read 16bit integer into A
0478+  19ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  19ED             scan_u16x:
0480+  19ED F8 10 00    	enter 16
0481+  19F0 D8          	push b
0482+  19F1 DA          	push d
0483+  19F2             
0484+  19F2 FA F1 FF    	lea d, [bp + -15]
0485+  19F5 07 3C 18    	call gets				; get number
0486+  19F8             
0487+  19F8 32          	mov bl, [d]
0488+  19F9 37          	mov bh, bl
0489+  19FA 33 01 00    	mov bl, [d + 1]
0490+  19FD 07 EA 17    	call atoi				; convert to int in AL
0491+  1A00 23          	mov ah, al				; move to AH
0492+  1A01             
0493+  1A01 33 02 00    	mov bl, [d + 2]
0494+  1A04 37          	mov bh, bl
0495+  1A05 33 03 00    	mov bl, [d + 3]
0496+  1A08 07 EA 17    	call atoi				; convert to int in AL
0497+  1A0B             
0498+  1A0B E7          	pop d
0499+  1A0C E5          	pop b
0500+  1A0D F9          	leave
0501+  1A0E 09          	ret
0502+  1A0F             
0503+  1A0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  1A0F             ; PRINT 8bit HEX INTEGER
0505+  1A0F             ; integer value in reg bl
0506+  1A0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  1A0F             print_u8x:
0508+  1A0F D7          	push a
0509+  1A10 DD          	push bl
0510+  1A11             
0511+  1A11 07 FC 17    	call itoa				; convert bl to char in A
0512+  1A14 2F          	mov bl, al				; save al
0513+  1A15 19 00       	mov al, 0
0514+  1A17 05 03       	syscall sys_io				; display AH
0515+  1A19 24          	mov ah, bl				; retrieve al
0516+  1A1A 19 00       	mov al, 0
0517+  1A1C 05 03       	syscall sys_io				; display AL
0518+  1A1E             
0519+  1A1E EA          	pop bl
0520+  1A1F E4          	pop a
0521+  1A20 09          	ret
0522+  1A21             
0523+  1A21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  1A21             ; print 8bit decimal unsigned number
0525+  1A21             ; input number in AL
0526+  1A21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  1A21             print_u8d:
0528+  1A21 D7          	push a
0529+  1A22 D8          	push b
0530+  1A23             
0531+  1A23 22 00       	mov ah, 0
0532+  1A25 26 64 00    	mov b, 100
0533+  1A28 AE          	div a, b
0534+  1A29 D8          	push b			; save remainder
0535+  1A2A B9 00       	cmp al, 0
0536+  1A2C C6 36 1A    	je skip100
0537+  1A2F 6A 30       	add al, $30
0538+  1A31 23          	mov ah, al
0539+  1A32 19 00       	mov al, 0
0540+  1A34 05 03       	syscall sys_io	; print coeff
0541+  1A36             skip100:
0542+  1A36 E4          	pop a
0543+  1A37 22 00       	mov ah, 0
0544+  1A39 26 0A 00    	mov b, 10
0545+  1A3C AE          	div a, b
0546+  1A3D D8          	push b			; save remainder
0547+  1A3E B9 00       	cmp al, 0
0548+  1A40 C6 4A 1A    	je skip10
0549+  1A43 6A 30       	add al, $30
0550+  1A45 23          	mov ah, al
0551+  1A46 19 00       	mov al, 0
0552+  1A48 05 03       	syscall sys_io	; print coeff
0553+  1A4A             skip10:
0554+  1A4A E4          	pop a
0555+  1A4B 1B          	mov al, bl
0556+  1A4C 6A 30       	add al, $30
0557+  1A4E 23          	mov ah, al
0558+  1A4F 19 00       	mov al, 0
0559+  1A51 05 03       	syscall sys_io	; print coeff
0560+  1A53 E5          	pop b
0561+  1A54 E4          	pop a
0562+  1A55 09          	ret
0563+  1A56             
0564+  1A56             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  1A56             ; INPUT 8BIT HEX INTEGER
0566+  1A56             ; read 8bit integer into AL
0567+  1A56             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  1A56             scan_u8x:
0569+  1A56 F8 04 00    	enter 4
0570+  1A59 D8          	push b
0571+  1A5A DA          	push d
0572+  1A5B             
0573+  1A5B FA FD FF    	lea d, [bp + -3]
0574+  1A5E 07 3C 18    	call gets				; get number
0575+  1A61             
0576+  1A61 32          	mov bl, [d]
0577+  1A62 37          	mov bh, bl
0578+  1A63 33 01 00    	mov bl, [d + 1]
0579+  1A66 07 EA 17    	call atoi				; convert to int in AL
0580+  1A69             
0581+  1A69 E7          	pop d
0582+  1A6A E5          	pop b
0583+  1A6B F9          	leave
0584+  1A6C 09          	ret
0585+  1A6D             
0586+  1A6D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  1A6D             ; input decimal number
0588+  1A6D             ; result in A
0589+  1A6D             ; 655'\0'
0590+  1A6D             ; low--------high
0591+  1A6D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  1A6D             scan_u16d:
0593+  1A6D F8 08 00    	enter 8
0594+  1A70 E2          	push si
0595+  1A71 D8          	push b
0596+  1A72 D9          	push c
0597+  1A73 DA          	push d
0598+  1A74 FA F9 FF    	lea d, [bp +- 7]
0599+  1A77 07 3C 18    	call gets
0600+  1A7A 07 6A 17    	call strlen			; get string length in C
0601+  1A7D 7E          	dec c
0602+  1A7E FD 4E       	mov si, d
0603+  1A80 12          	mov a, c
0604+  1A81 FD 99       	shl a
0605+  1A83 3B D2 17    	mov d, table_power
0606+  1A86 59          	add d, a
0607+  1A87 38 00 00    	mov c, 0
0608+  1A8A             mul_loop:
0609+  1A8A F6          	lodsb			; load ASCII to al
0610+  1A8B B9 00       	cmp al, 0
0611+  1A8D C6 A0 1A    	je mul_exit
0612+  1A90 6F 30       	sub al, $30		; make into integer
0613+  1A92 22 00       	mov ah, 0
0614+  1A94 2A          	mov b, [d]
0615+  1A95 AC          	mul a, b			; result in B since it fits in 16bits
0616+  1A96 11          	mov a, b
0617+  1A97 28          	mov b, c
0618+  1A98 54          	add a, b
0619+  1A99 39          	mov c, a
0620+  1A9A 63 02 00    	sub d, 2
0621+  1A9D 0A 8A 1A    	jmp mul_loop
0622+  1AA0             mul_exit:
0623+  1AA0 12          	mov a, c
0624+  1AA1 E7          	pop d
0625+  1AA2 E6          	pop c
0626+  1AA3 E5          	pop b
0627+  1AA4 EF          	pop si
0628+  1AA5 F9          	leave
0629+  1AA6 09          	ret
1019   1AA7             ; --- END INCLUDE BLOCK
1020   1AA7             
1021   1AA7             
1022   1AA7             .end
tasm: Number of errors = 0
