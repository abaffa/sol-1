0001   0000             ; --- FILENAME: life2.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i
0011   0405 52 02 00      sub sp, 2 ; j
0012   0408 52 02 00      sub sp, 2 ; n
0013   040B             _for1_init:
0014   040B 26 00 00      mov b, 0
0015   040E D7            push a
0016   040F 11            mov a, b
0017   0410 45 FF FF      mov [bp + -1], a ; i
0018   0413 E4            pop a
0019   0414             _for1_cond:
0020   0414 2C FF FF      mov b, [bp + -1] ; i
0021   0417 D7            push a
0022   0418 11            mov a, b
0023   0419 26 28 00      mov b, 40
0024   041C B0            cmp a, b
0025   041D 0E            lodflgs
0026   041E 87 02         and al, %00000010 ; <
0027   0420 FD 9C         shr al
0028   0422 22 00         mov ah, 0
0029   0424 27            mov b, a
0030   0425 E4            pop a
0031   0426 C0 00 00      cmp b, 0
0032   0429 C6 A6 04      je _for1_exit
0033   042C             _for1_block:
0034   042C             _for2_init:
0035   042C 26 00 00      mov b, 0
0036   042F D7            push a
0037   0430 11            mov a, b
0038   0431 45 FD FF      mov [bp + -3], a ; j
0039   0434 E4            pop a
0040   0435             _for2_cond:
0041   0435 2C FD FF      mov b, [bp + -3] ; j
0042   0438 D7            push a
0043   0439 11            mov a, b
0044   043A 26 28 00      mov b, 40
0045   043D B0            cmp a, b
0046   043E 0E            lodflgs
0047   043F 87 02         and al, %00000010 ; <
0048   0441 FD 9C         shr al
0049   0443 22 00         mov ah, 0
0050   0445 27            mov b, a
0051   0446 E4            pop a
0052   0447 C0 00 00      cmp b, 0
0053   044A C6 96 04      je _for2_exit
0054   044D             _for2_block:
0055   044D 29 3A 10      mov b, [nextState]
0056   0450 74            mov d, b
0057   0451 DA            push d
0058   0452 2C FF FF      mov b, [bp + -1] ; i
0059   0455 E7            pop d
0060   0456 10 28 00      mov a, 40
0061   0459 AC            mul a, b
0062   045A 5A            add d, b
0063   045B DA            push d
0064   045C 2C FD FF      mov b, [bp + -3] ; j
0065   045F E7            pop d
0066   0460 10 01 00      mov a, 1
0067   0463 AC            mul a, b
0068   0464 5A            add d, b
0069   0465 DA            push d
0070   0466 29 7C 16      mov b, [currState]
0071   0469 D7            push a
0072   046A 74            mov d, b
0073   046B DA            push d
0074   046C 2C FF FF      mov b, [bp + -1] ; i
0075   046F E7            pop d
0076   0470 10 28 00      mov a, 40
0077   0473 AC            mul a, b
0078   0474 5A            add d, b
0079   0475 DA            push d
0080   0476 2C FD FF      mov b, [bp + -3] ; j
0081   0479 E7            pop d
0082   047A 10 01 00      mov a, 1
0083   047D AC            mul a, b
0084   047E 5A            add d, b
0085   047F 32            mov bl, [d]
0086   0480 A7 00         mov bh, 0
0087   0482 E4            pop a
0088   0483 E7            pop d
0089   0484 1B            mov al, bl
0090   0485 3E            mov [d], al
0091   0486             _for2_update:
0092   0486 2C FD FF      mov b, [bp + -3] ; j
0093   0489 11            mov a, b
0094   048A FD 77         inc b
0095   048C D7            push a
0096   048D 11            mov a, b
0097   048E 45 FD FF      mov [bp + -3], a ; j
0098   0491 E4            pop a
0099   0492 27            mov b, a
0100   0493 0A 35 04      jmp _for2_cond
0101   0496             _for2_exit:
0102   0496             _for1_update:
0103   0496 2C FF FF      mov b, [bp + -1] ; i
0104   0499 11            mov a, b
0105   049A FD 77         inc b
0106   049C D7            push a
0107   049D 11            mov a, b
0108   049E 45 FF FF      mov [bp + -1], a ; i
0109   04A1 E4            pop a
0110   04A2 27            mov b, a
0111   04A3 0A 14 04      jmp _for1_cond
0112   04A6             _for1_exit:
0113   04A6             _for3_init:
0114   04A6             _for3_cond:
0115   04A6             _for3_block:
0116   04A6             _for4_init:
0117   04A6 26 01 00      mov b, 1
0118   04A9 D7            push a
0119   04AA 11            mov a, b
0120   04AB 45 FF FF      mov [bp + -1], a ; i
0121   04AE E4            pop a
0122   04AF             _for4_cond:
0123   04AF 2C FF FF      mov b, [bp + -1] ; i
0124   04B2 D7            push a
0125   04B3 11            mov a, b
0126   04B4 26 28 00      mov b, 40
0127   04B7 D7            push a
0128   04B8 11            mov a, b
0129   04B9 26 01 00      mov b, 1
0130   04BC 60            sub a, b
0131   04BD 27            mov b, a
0132   04BE E4            pop a
0133   04BF B0            cmp a, b
0134   04C0 0E            lodflgs
0135   04C1 87 02         and al, %00000010 ; <
0136   04C3 FD 9C         shr al
0137   04C5 22 00         mov ah, 0
0138   04C7 27            mov b, a
0139   04C8 E4            pop a
0140   04C9 C0 00 00      cmp b, 0
0141   04CC C6 BA 05      je _for4_exit
0142   04CF             _for4_block:
0143   04CF             _for5_init:
0144   04CF 26 01 00      mov b, 1
0145   04D2 D7            push a
0146   04D3 11            mov a, b
0147   04D4 45 FD FF      mov [bp + -3], a ; j
0148   04D7 E4            pop a
0149   04D8             _for5_cond:
0150   04D8 2C FD FF      mov b, [bp + -3] ; j
0151   04DB D7            push a
0152   04DC 11            mov a, b
0153   04DD 26 28 00      mov b, 40
0154   04E0 D7            push a
0155   04E1 11            mov a, b
0156   04E2 26 01 00      mov b, 1
0157   04E5 60            sub a, b
0158   04E6 27            mov b, a
0159   04E7 E4            pop a
0160   04E8 B0            cmp a, b
0161   04E9 0E            lodflgs
0162   04EA 87 02         and al, %00000010 ; <
0163   04EC FD 9C         shr al
0164   04EE 22 00         mov ah, 0
0165   04F0 27            mov b, a
0166   04F1 E4            pop a
0167   04F2 C0 00 00      cmp b, 0
0168   04F5 C6 AA 05      je _for5_exit
0169   04F8             _for5_block:
0170   04F8 2C FF FF      mov b, [bp + -1] ; i
0171   04FB FD AB         swp b
0172   04FD D8            push b
0173   04FE 2C FD FF      mov b, [bp + -3] ; j
0174   0501 FD AB         swp b
0175   0503 D8            push b
0176   0504 07 71 07      call neighbours
0177   0507 51 04 00      add sp, 4
0178   050A D7            push a
0179   050B 11            mov a, b
0180   050C 45 FB FF      mov [bp + -5], a ; n
0181   050F E4            pop a
0182   0510             _if6_cond:
0183   0510 2C FB FF      mov b, [bp + -5] ; n
0184   0513 D7            push a
0185   0514 11            mov a, b
0186   0515 26 02 00      mov b, 2
0187   0518 B0            cmp a, b
0188   0519 0E            lodflgs
0189   051A 87 02         and al, %00000010 ; <
0190   051C FD 9C         shr al
0191   051E 22 00         mov ah, 0
0192   0520 27            mov b, a
0193   0521 E4            pop a
0194   0522 D7            push a
0195   0523 11            mov a, b
0196   0524 2C FB FF      mov b, [bp + -5] ; n
0197   0527 D7            push a
0198   0528 11            mov a, b
0199   0529 26 03 00      mov b, 3
0200   052C B0            cmp a, b
0201   052D 0E            lodflgs
0202   052E 87 03         and al, %00000011
0203   0530 B9 00         cmp al, 0
0204   0532 0E            lodflgs
0205   0533 22 00         mov ah, 0
0206   0535 27            mov b, a
0207   0536 E4            pop a
0208   0537 8A            or a, b
0209   0538 27            mov b, a
0210   0539 E4            pop a
0211   053A C0 00 00      cmp b, 0
0212   053D C6 62 05      je _if6_else
0213   0540             _if6_true:
0214   0540 29 3A 10      mov b, [nextState]
0215   0543 74            mov d, b
0216   0544 DA            push d
0217   0545 2C FF FF      mov b, [bp + -1] ; i
0218   0548 E7            pop d
0219   0549 10 28 00      mov a, 40
0220   054C AC            mul a, b
0221   054D 5A            add d, b
0222   054E DA            push d
0223   054F 2C FD FF      mov b, [bp + -3] ; j
0224   0552 E7            pop d
0225   0553 10 01 00      mov a, 1
0226   0556 AC            mul a, b
0227   0557 5A            add d, b
0228   0558 DA            push d
0229   0559 26 20 00      mov b, ' '
0230   055C E7            pop d
0231   055D 1B            mov al, bl
0232   055E 3E            mov [d], al
0233   055F 0A 9A 05      jmp _if6_exit
0234   0562             _if6_else:
0235   0562             _if7_cond:
0236   0562 2C FB FF      mov b, [bp + -5] ; n
0237   0565 D7            push a
0238   0566 11            mov a, b
0239   0567 26 03 00      mov b, 3
0240   056A B0            cmp a, b
0241   056B 0E            lodflgs
0242   056C 87 01         and al, %00000001 ; ==
0243   056E 22 00         mov ah, 0
0244   0570 27            mov b, a
0245   0571 E4            pop a
0246   0572 C0 00 00      cmp b, 0
0247   0575 C6 9A 05      je _if7_exit
0248   0578             _if7_true:
0249   0578 29 3A 10      mov b, [nextState]
0250   057B 74            mov d, b
0251   057C DA            push d
0252   057D 2C FF FF      mov b, [bp + -1] ; i
0253   0580 E7            pop d
0254   0581 10 28 00      mov a, 40
0255   0584 AC            mul a, b
0256   0585 5A            add d, b
0257   0586 DA            push d
0258   0587 2C FD FF      mov b, [bp + -3] ; j
0259   058A E7            pop d
0260   058B 10 01 00      mov a, 1
0261   058E AC            mul a, b
0262   058F 5A            add d, b
0263   0590 DA            push d
0264   0591 26 40 00      mov b, '@'
0265   0594 E7            pop d
0266   0595 1B            mov al, bl
0267   0596 3E            mov [d], al
0268   0597 0A 9A 05      jmp _if7_exit
0269   059A             _if7_exit:
0270   059A             _if6_exit:
0271   059A             _for5_update:
0272   059A 2C FD FF      mov b, [bp + -3] ; j
0273   059D 11            mov a, b
0274   059E FD 77         inc b
0275   05A0 D7            push a
0276   05A1 11            mov a, b
0277   05A2 45 FD FF      mov [bp + -3], a ; j
0278   05A5 E4            pop a
0279   05A6 27            mov b, a
0280   05A7 0A D8 04      jmp _for5_cond
0281   05AA             _for5_exit:
0282   05AA             _for4_update:
0283   05AA 2C FF FF      mov b, [bp + -1] ; i
0284   05AD 11            mov a, b
0285   05AE FD 77         inc b
0286   05B0 D7            push a
0287   05B1 11            mov a, b
0288   05B2 45 FF FF      mov [bp + -1], a ; i
0289   05B5 E4            pop a
0290   05B6 27            mov b, a
0291   05B7 0A AF 04      jmp _for4_cond
0292   05BA             _for4_exit:
0293   05BA             _for8_init:
0294   05BA 26 01 00      mov b, 1
0295   05BD D7            push a
0296   05BE 11            mov a, b
0297   05BF 45 FF FF      mov [bp + -1], a ; i
0298   05C2 E4            pop a
0299   05C3             _for8_cond:
0300   05C3 2C FF FF      mov b, [bp + -1] ; i
0301   05C6 D7            push a
0302   05C7 11            mov a, b
0303   05C8 26 28 00      mov b, 40
0304   05CB D7            push a
0305   05CC 11            mov a, b
0306   05CD 26 01 00      mov b, 1
0307   05D0 60            sub a, b
0308   05D1 27            mov b, a
0309   05D2 E4            pop a
0310   05D3 B0            cmp a, b
0311   05D4 0E            lodflgs
0312   05D5 87 02         and al, %00000010 ; <
0313   05D7 FD 9C         shr al
0314   05D9 22 00         mov ah, 0
0315   05DB 27            mov b, a
0316   05DC E4            pop a
0317   05DD C0 00 00      cmp b, 0
0318   05E0 C6 65 06      je _for8_exit
0319   05E3             _for8_block:
0320   05E3             _for9_init:
0321   05E3 26 01 00      mov b, 1
0322   05E6 D7            push a
0323   05E7 11            mov a, b
0324   05E8 45 FD FF      mov [bp + -3], a ; j
0325   05EB E4            pop a
0326   05EC             _for9_cond:
0327   05EC 2C FD FF      mov b, [bp + -3] ; j
0328   05EF D7            push a
0329   05F0 11            mov a, b
0330   05F1 26 28 00      mov b, 40
0331   05F4 D7            push a
0332   05F5 11            mov a, b
0333   05F6 26 01 00      mov b, 1
0334   05F9 60            sub a, b
0335   05FA 27            mov b, a
0336   05FB E4            pop a
0337   05FC B0            cmp a, b
0338   05FD 0E            lodflgs
0339   05FE 87 02         and al, %00000010 ; <
0340   0600 FD 9C         shr al
0341   0602 22 00         mov ah, 0
0342   0604 27            mov b, a
0343   0605 E4            pop a
0344   0606 C0 00 00      cmp b, 0
0345   0609 C6 55 06      je _for9_exit
0346   060C             _for9_block:
0347   060C 29 7C 16      mov b, [currState]
0348   060F 74            mov d, b
0349   0610 DA            push d
0350   0611 2C FF FF      mov b, [bp + -1] ; i
0351   0614 E7            pop d
0352   0615 10 28 00      mov a, 40
0353   0618 AC            mul a, b
0354   0619 5A            add d, b
0355   061A DA            push d
0356   061B 2C FD FF      mov b, [bp + -3] ; j
0357   061E E7            pop d
0358   061F 10 01 00      mov a, 1
0359   0622 AC            mul a, b
0360   0623 5A            add d, b
0361   0624 DA            push d
0362   0625 29 3A 10      mov b, [nextState]
0363   0628 D7            push a
0364   0629 74            mov d, b
0365   062A DA            push d
0366   062B 2C FF FF      mov b, [bp + -1] ; i
0367   062E E7            pop d
0368   062F 10 28 00      mov a, 40
0369   0632 AC            mul a, b
0370   0633 5A            add d, b
0371   0634 DA            push d
0372   0635 2C FD FF      mov b, [bp + -3] ; j
0373   0638 E7            pop d
0374   0639 10 01 00      mov a, 1
0375   063C AC            mul a, b
0376   063D 5A            add d, b
0377   063E 32            mov bl, [d]
0378   063F A7 00         mov bh, 0
0379   0641 E4            pop a
0380   0642 E7            pop d
0381   0643 1B            mov al, bl
0382   0644 3E            mov [d], al
0383   0645             _for9_update:
0384   0645 2C FD FF      mov b, [bp + -3] ; j
0385   0648 11            mov a, b
0386   0649 FD 77         inc b
0387   064B D7            push a
0388   064C 11            mov a, b
0389   064D 45 FD FF      mov [bp + -3], a ; j
0390   0650 E4            pop a
0391   0651 27            mov b, a
0392   0652 0A EC 05      jmp _for9_cond
0393   0655             _for9_exit:
0394   0655             _for8_update:
0395   0655 2C FF FF      mov b, [bp + -1] ; i
0396   0658 11            mov a, b
0397   0659 FD 77         inc b
0398   065B D7            push a
0399   065C 11            mov a, b
0400   065D 45 FF FF      mov [bp + -1], a ; i
0401   0660 E4            pop a
0402   0661 27            mov b, a
0403   0662 0A C3 05      jmp _for8_cond
0404   0665             _for8_exit:
0405   0665 07 71 06      call show
0406   0668             _for3_update:
0407   0668 0A A6 04      jmp _for3_cond
0408   066B             _for3_exit:
0409   066B 26 00 00      mov b, 0
0410   066E F9            leave
0411   066F 05 0B         syscall sys_terminate_proc
0412   0671             
0413   0671             show:
0414   0671 D2            push bp
0415   0672 9B            mov bp, sp
0416   0673 52 02 00      sub sp, 2 ; i
0417   0676 52 02 00      sub sp, 2 ; j
0418   0679             _for10_init:
0419   0679 26 00 00      mov b, 0
0420   067C D7            push a
0421   067D 11            mov a, b
0422   067E 45 FF FF      mov [bp + -1], a ; i
0423   0681 E4            pop a
0424   0682             _for10_cond:
0425   0682 2C FF FF      mov b, [bp + -1] ; i
0426   0685 D7            push a
0427   0686 11            mov a, b
0428   0687 26 28 00      mov b, 40
0429   068A B0            cmp a, b
0430   068B 0E            lodflgs
0431   068C 87 02         and al, %00000010 ; <
0432   068E FD 9C         shr al
0433   0690 22 00         mov ah, 0
0434   0692 27            mov b, a
0435   0693 E4            pop a
0436   0694 C0 00 00      cmp b, 0
0437   0697 C6 30 07      je _for10_exit
0438   069A             _for10_block:
0439   069A             _for11_init:
0440   069A 26 00 00      mov b, 0
0441   069D D7            push a
0442   069E 11            mov a, b
0443   069F 45 FD FF      mov [bp + -3], a ; j
0444   06A2 E4            pop a
0445   06A3             _for11_cond:
0446   06A3 2C FD FF      mov b, [bp + -3] ; j
0447   06A6 D7            push a
0448   06A7 11            mov a, b
0449   06A8 26 28 00      mov b, 40
0450   06AB B0            cmp a, b
0451   06AC 0E            lodflgs
0452   06AD 87 02         and al, %00000010 ; <
0453   06AF FD 9C         shr al
0454   06B1 22 00         mov ah, 0
0455   06B3 27            mov b, a
0456   06B4 E4            pop a
0457   06B5 C0 00 00      cmp b, 0
0458   06B8 C6 16 07      je _for11_exit
0459   06BB             _for11_block:
0460   06BB             _ternary12_cond:
0461   06BB 29 7C 16      mov b, [currState]
0462   06BE D7            push a
0463   06BF 74            mov d, b
0464   06C0 DA            push d
0465   06C1 2C FF FF      mov b, [bp + -1] ; i
0466   06C4 E7            pop d
0467   06C5 10 28 00      mov a, 40
0468   06C8 AC            mul a, b
0469   06C9 5A            add d, b
0470   06CA DA            push d
0471   06CB 2C FD FF      mov b, [bp + -3] ; j
0472   06CE E7            pop d
0473   06CF 10 01 00      mov a, 1
0474   06D2 AC            mul a, b
0475   06D3 5A            add d, b
0476   06D4 32            mov bl, [d]
0477   06D5 A7 00         mov bh, 0
0478   06D7 E4            pop a
0479   06D8 D7            push a
0480   06D9 11            mov a, b
0481   06DA 26 40 00      mov b, '@'
0482   06DD B0            cmp a, b
0483   06DE 0E            lodflgs
0484   06DF 87 01         and al, %00000001 ; ==
0485   06E1 22 00         mov ah, 0
0486   06E3 27            mov b, a
0487   06E4 E4            pop a
0488   06E5 C0 00 00      cmp b, 0
0489   06E8 C6 FA 06      je _ternary12_false
0490   06EB             _ternary12_true:
0491   06EB 26 7E 16      mov b, _string_0 ; "@ "
0492   06EE FD AB         swp b
0493   06F0 D8            push b
0494   06F1 07 E4 09      call print
0495   06F4 51 02 00      add sp, 2
0496   06F7 0A 06 07      jmp _ternary12_exit
0497   06FA             _ternary12_false:
0498   06FA 26 81 16      mov b, _string_1 ; ". "
0499   06FD FD AB         swp b
0500   06FF D8            push b
0501   0700 07 E4 09      call print
0502   0703 51 02 00      add sp, 2
0503   0706             _ternary12_exit:
0504   0706             _for11_update:
0505   0706 2C FD FF      mov b, [bp + -3] ; j
0506   0709 11            mov a, b
0507   070A FD 77         inc b
0508   070C D7            push a
0509   070D 11            mov a, b
0510   070E 45 FD FF      mov [bp + -3], a ; j
0511   0711 E4            pop a
0512   0712 27            mov b, a
0513   0713 0A A3 06      jmp _for11_cond
0514   0716             _for11_exit:
0515   0716 26 0A 00      mov b, 10
0516   0719 DD            push bl
0517   071A 07 EF 09      call _putchar
0518   071D 51 01 00      add sp, 1
0519   0720             _for10_update:
0520   0720 2C FF FF      mov b, [bp + -1] ; i
0521   0723 11            mov a, b
0522   0724 FD 77         inc b
0523   0726 D7            push a
0524   0727 11            mov a, b
0525   0728 45 FF FF      mov [bp + -1], a ; i
0526   072B E4            pop a
0527   072C 27            mov b, a
0528   072D 0A 82 06      jmp _for10_cond
0529   0730             _for10_exit:
0530   0730 F9            leave
0531   0731 09            ret
0532   0732             
0533   0732             alive:
0534   0732 D2            push bp
0535   0733 9B            mov bp, sp
0536   0734             _if13_cond:
0537   0734 29 7C 16      mov b, [currState]
0538   0737 D7            push a
0539   0738 74            mov d, b
0540   0739 DA            push d
0541   073A 2C 07 00      mov b, [bp + 7] ; i
0542   073D E7            pop d
0543   073E 10 28 00      mov a, 40
0544   0741 AC            mul a, b
0545   0742 5A            add d, b
0546   0743 DA            push d
0547   0744 2C 05 00      mov b, [bp + 5] ; j
0548   0747 E7            pop d
0549   0748 10 01 00      mov a, 1
0550   074B AC            mul a, b
0551   074C 5A            add d, b
0552   074D 32            mov bl, [d]
0553   074E A7 00         mov bh, 0
0554   0750 E4            pop a
0555   0751 D7            push a
0556   0752 11            mov a, b
0557   0753 26 40 00      mov b, '@'
0558   0756 B0            cmp a, b
0559   0757 0E            lodflgs
0560   0758 87 01         and al, %00000001 ; ==
0561   075A 22 00         mov ah, 0
0562   075C 27            mov b, a
0563   075D E4            pop a
0564   075E C0 00 00      cmp b, 0
0565   0761 C6 6C 07      je _if13_else
0566   0764             _if13_true:
0567   0764 26 01 00      mov b, 1
0568   0767 F9            leave
0569   0768 09            ret
0570   0769 0A 71 07      jmp _if13_exit
0571   076C             _if13_else:
0572   076C 26 00 00      mov b, 0
0573   076F F9            leave
0574   0770 09            ret
0575   0771             _if13_exit:
0576   0771             
0577   0771             neighbours:
0578   0771 D2            push bp
0579   0772 9B            mov bp, sp
0580   0773 52 02 00      sub sp, 2 ; count
0581   0776 26 00 00      mov b, 0
0582   0779 D7            push a
0583   077A 11            mov a, b
0584   077B 45 FF FF      mov [bp + -1], a ; count
0585   077E E4            pop a
0586   077F             _if14_cond:
0587   077F 29 7C 16      mov b, [currState]
0588   0782 D7            push a
0589   0783 74            mov d, b
0590   0784 DA            push d
0591   0785 2C 07 00      mov b, [bp + 7] ; i
0592   0788 D7            push a
0593   0789 11            mov a, b
0594   078A 26 01 00      mov b, 1
0595   078D 60            sub a, b
0596   078E 27            mov b, a
0597   078F E4            pop a
0598   0790 E7            pop d
0599   0791 10 28 00      mov a, 40
0600   0794 AC            mul a, b
0601   0795 5A            add d, b
0602   0796 DA            push d
0603   0797 2C 05 00      mov b, [bp + 5] ; j
0604   079A E7            pop d
0605   079B 10 01 00      mov a, 1
0606   079E AC            mul a, b
0607   079F 5A            add d, b
0608   07A0 32            mov bl, [d]
0609   07A1 A7 00         mov bh, 0
0610   07A3 E4            pop a
0611   07A4 D7            push a
0612   07A5 11            mov a, b
0613   07A6 26 40 00      mov b, '@'
0614   07A9 B0            cmp a, b
0615   07AA 0E            lodflgs
0616   07AB 87 01         and al, %00000001 ; ==
0617   07AD 22 00         mov ah, 0
0618   07AF 27            mov b, a
0619   07B0 E4            pop a
0620   07B1 C0 00 00      cmp b, 0
0621   07B4 C6 C7 07      je _if14_exit
0622   07B7             _if14_true:
0623   07B7 2C FF FF      mov b, [bp + -1] ; count
0624   07BA 11            mov a, b
0625   07BB FD 77         inc b
0626   07BD D7            push a
0627   07BE 11            mov a, b
0628   07BF 45 FF FF      mov [bp + -1], a ; count
0629   07C2 E4            pop a
0630   07C3 27            mov b, a
0631   07C4 0A C7 07      jmp _if14_exit
0632   07C7             _if14_exit:
0633   07C7             _if15_cond:
0634   07C7 29 7C 16      mov b, [currState]
0635   07CA D7            push a
0636   07CB 74            mov d, b
0637   07CC DA            push d
0638   07CD 2C 07 00      mov b, [bp + 7] ; i
0639   07D0 D7            push a
0640   07D1 11            mov a, b
0641   07D2 26 01 00      mov b, 1
0642   07D5 60            sub a, b
0643   07D6 27            mov b, a
0644   07D7 E4            pop a
0645   07D8 E7            pop d
0646   07D9 10 28 00      mov a, 40
0647   07DC AC            mul a, b
0648   07DD 5A            add d, b
0649   07DE DA            push d
0650   07DF 2C 05 00      mov b, [bp + 5] ; j
0651   07E2 D7            push a
0652   07E3 11            mov a, b
0653   07E4 26 01 00      mov b, 1
0654   07E7 60            sub a, b
0655   07E8 27            mov b, a
0656   07E9 E4            pop a
0657   07EA E7            pop d
0658   07EB 10 01 00      mov a, 1
0659   07EE AC            mul a, b
0660   07EF 5A            add d, b
0661   07F0 32            mov bl, [d]
0662   07F1 A7 00         mov bh, 0
0663   07F3 E4            pop a
0664   07F4 D7            push a
0665   07F5 11            mov a, b
0666   07F6 26 40 00      mov b, '@'
0667   07F9 B0            cmp a, b
0668   07FA 0E            lodflgs
0669   07FB 87 01         and al, %00000001 ; ==
0670   07FD 22 00         mov ah, 0
0671   07FF 27            mov b, a
0672   0800 E4            pop a
0673   0801 C0 00 00      cmp b, 0
0674   0804 C6 17 08      je _if15_exit
0675   0807             _if15_true:
0676   0807 2C FF FF      mov b, [bp + -1] ; count
0677   080A 11            mov a, b
0678   080B FD 77         inc b
0679   080D D7            push a
0680   080E 11            mov a, b
0681   080F 45 FF FF      mov [bp + -1], a ; count
0682   0812 E4            pop a
0683   0813 27            mov b, a
0684   0814 0A 17 08      jmp _if15_exit
0685   0817             _if15_exit:
0686   0817             _if16_cond:
0687   0817 29 7C 16      mov b, [currState]
0688   081A D7            push a
0689   081B 74            mov d, b
0690   081C DA            push d
0691   081D 2C 07 00      mov b, [bp + 7] ; i
0692   0820 D7            push a
0693   0821 11            mov a, b
0694   0822 26 01 00      mov b, 1
0695   0825 60            sub a, b
0696   0826 27            mov b, a
0697   0827 E4            pop a
0698   0828 E7            pop d
0699   0829 10 28 00      mov a, 40
0700   082C AC            mul a, b
0701   082D 5A            add d, b
0702   082E DA            push d
0703   082F 2C 05 00      mov b, [bp + 5] ; j
0704   0832 D7            push a
0705   0833 11            mov a, b
0706   0834 26 01 00      mov b, 1
0707   0837 54            add a, b
0708   0838 27            mov b, a
0709   0839 E4            pop a
0710   083A E7            pop d
0711   083B 10 01 00      mov a, 1
0712   083E AC            mul a, b
0713   083F 5A            add d, b
0714   0840 32            mov bl, [d]
0715   0841 A7 00         mov bh, 0
0716   0843 E4            pop a
0717   0844 D7            push a
0718   0845 11            mov a, b
0719   0846 26 40 00      mov b, '@'
0720   0849 B0            cmp a, b
0721   084A 0E            lodflgs
0722   084B 87 01         and al, %00000001 ; ==
0723   084D 22 00         mov ah, 0
0724   084F 27            mov b, a
0725   0850 E4            pop a
0726   0851 C0 00 00      cmp b, 0
0727   0854 C6 67 08      je _if16_exit
0728   0857             _if16_true:
0729   0857 2C FF FF      mov b, [bp + -1] ; count
0730   085A 11            mov a, b
0731   085B FD 77         inc b
0732   085D D7            push a
0733   085E 11            mov a, b
0734   085F 45 FF FF      mov [bp + -1], a ; count
0735   0862 E4            pop a
0736   0863 27            mov b, a
0737   0864 0A 67 08      jmp _if16_exit
0738   0867             _if16_exit:
0739   0867             _if17_cond:
0740   0867 29 7C 16      mov b, [currState]
0741   086A D7            push a
0742   086B 74            mov d, b
0743   086C DA            push d
0744   086D 2C 07 00      mov b, [bp + 7] ; i
0745   0870 E7            pop d
0746   0871 10 28 00      mov a, 40
0747   0874 AC            mul a, b
0748   0875 5A            add d, b
0749   0876 DA            push d
0750   0877 2C 05 00      mov b, [bp + 5] ; j
0751   087A D7            push a
0752   087B 11            mov a, b
0753   087C 26 01 00      mov b, 1
0754   087F 60            sub a, b
0755   0880 27            mov b, a
0756   0881 E4            pop a
0757   0882 E7            pop d
0758   0883 10 01 00      mov a, 1
0759   0886 AC            mul a, b
0760   0887 5A            add d, b
0761   0888 32            mov bl, [d]
0762   0889 A7 00         mov bh, 0
0763   088B E4            pop a
0764   088C D7            push a
0765   088D 11            mov a, b
0766   088E 26 40 00      mov b, '@'
0767   0891 B0            cmp a, b
0768   0892 0E            lodflgs
0769   0893 87 01         and al, %00000001 ; ==
0770   0895 22 00         mov ah, 0
0771   0897 27            mov b, a
0772   0898 E4            pop a
0773   0899 C0 00 00      cmp b, 0
0774   089C C6 AF 08      je _if17_exit
0775   089F             _if17_true:
0776   089F 2C FF FF      mov b, [bp + -1] ; count
0777   08A2 11            mov a, b
0778   08A3 FD 77         inc b
0779   08A5 D7            push a
0780   08A6 11            mov a, b
0781   08A7 45 FF FF      mov [bp + -1], a ; count
0782   08AA E4            pop a
0783   08AB 27            mov b, a
0784   08AC 0A AF 08      jmp _if17_exit
0785   08AF             _if17_exit:
0786   08AF             _if18_cond:
0787   08AF 29 7C 16      mov b, [currState]
0788   08B2 D7            push a
0789   08B3 74            mov d, b
0790   08B4 DA            push d
0791   08B5 2C 07 00      mov b, [bp + 7] ; i
0792   08B8 E7            pop d
0793   08B9 10 28 00      mov a, 40
0794   08BC AC            mul a, b
0795   08BD 5A            add d, b
0796   08BE DA            push d
0797   08BF 2C 05 00      mov b, [bp + 5] ; j
0798   08C2 D7            push a
0799   08C3 11            mov a, b
0800   08C4 26 01 00      mov b, 1
0801   08C7 54            add a, b
0802   08C8 27            mov b, a
0803   08C9 E4            pop a
0804   08CA E7            pop d
0805   08CB 10 01 00      mov a, 1
0806   08CE AC            mul a, b
0807   08CF 5A            add d, b
0808   08D0 32            mov bl, [d]
0809   08D1 A7 00         mov bh, 0
0810   08D3 E4            pop a
0811   08D4 D7            push a
0812   08D5 11            mov a, b
0813   08D6 26 40 00      mov b, '@'
0814   08D9 B0            cmp a, b
0815   08DA 0E            lodflgs
0816   08DB 87 01         and al, %00000001 ; ==
0817   08DD 22 00         mov ah, 0
0818   08DF 27            mov b, a
0819   08E0 E4            pop a
0820   08E1 C0 00 00      cmp b, 0
0821   08E4 C6 F7 08      je _if18_exit
0822   08E7             _if18_true:
0823   08E7 2C FF FF      mov b, [bp + -1] ; count
0824   08EA 11            mov a, b
0825   08EB FD 77         inc b
0826   08ED D7            push a
0827   08EE 11            mov a, b
0828   08EF 45 FF FF      mov [bp + -1], a ; count
0829   08F2 E4            pop a
0830   08F3 27            mov b, a
0831   08F4 0A F7 08      jmp _if18_exit
0832   08F7             _if18_exit:
0833   08F7             _if19_cond:
0834   08F7 29 7C 16      mov b, [currState]
0835   08FA D7            push a
0836   08FB 74            mov d, b
0837   08FC DA            push d
0838   08FD 2C 07 00      mov b, [bp + 7] ; i
0839   0900 D7            push a
0840   0901 11            mov a, b
0841   0902 26 01 00      mov b, 1
0842   0905 54            add a, b
0843   0906 27            mov b, a
0844   0907 E4            pop a
0845   0908 E7            pop d
0846   0909 10 28 00      mov a, 40
0847   090C AC            mul a, b
0848   090D 5A            add d, b
0849   090E DA            push d
0850   090F 2C 05 00      mov b, [bp + 5] ; j
0851   0912 D7            push a
0852   0913 11            mov a, b
0853   0914 26 01 00      mov b, 1
0854   0917 60            sub a, b
0855   0918 27            mov b, a
0856   0919 E4            pop a
0857   091A E7            pop d
0858   091B 10 01 00      mov a, 1
0859   091E AC            mul a, b
0860   091F 5A            add d, b
0861   0920 32            mov bl, [d]
0862   0921 A7 00         mov bh, 0
0863   0923 E4            pop a
0864   0924 D7            push a
0865   0925 11            mov a, b
0866   0926 26 40 00      mov b, '@'
0867   0929 B0            cmp a, b
0868   092A 0E            lodflgs
0869   092B 87 01         and al, %00000001 ; ==
0870   092D 22 00         mov ah, 0
0871   092F 27            mov b, a
0872   0930 E4            pop a
0873   0931 C0 00 00      cmp b, 0
0874   0934 C6 47 09      je _if19_exit
0875   0937             _if19_true:
0876   0937 2C FF FF      mov b, [bp + -1] ; count
0877   093A 11            mov a, b
0878   093B FD 77         inc b
0879   093D D7            push a
0880   093E 11            mov a, b
0881   093F 45 FF FF      mov [bp + -1], a ; count
0882   0942 E4            pop a
0883   0943 27            mov b, a
0884   0944 0A 47 09      jmp _if19_exit
0885   0947             _if19_exit:
0886   0947             _if20_cond:
0887   0947 29 7C 16      mov b, [currState]
0888   094A D7            push a
0889   094B 74            mov d, b
0890   094C DA            push d
0891   094D 2C 07 00      mov b, [bp + 7] ; i
0892   0950 D7            push a
0893   0951 11            mov a, b
0894   0952 26 01 00      mov b, 1
0895   0955 54            add a, b
0896   0956 27            mov b, a
0897   0957 E4            pop a
0898   0958 E7            pop d
0899   0959 10 28 00      mov a, 40
0900   095C AC            mul a, b
0901   095D 5A            add d, b
0902   095E DA            push d
0903   095F 2C 05 00      mov b, [bp + 5] ; j
0904   0962 E7            pop d
0905   0963 10 01 00      mov a, 1
0906   0966 AC            mul a, b
0907   0967 5A            add d, b
0908   0968 32            mov bl, [d]
0909   0969 A7 00         mov bh, 0
0910   096B E4            pop a
0911   096C D7            push a
0912   096D 11            mov a, b
0913   096E 26 40 00      mov b, '@'
0914   0971 B0            cmp a, b
0915   0972 0E            lodflgs
0916   0973 87 01         and al, %00000001 ; ==
0917   0975 22 00         mov ah, 0
0918   0977 27            mov b, a
0919   0978 E4            pop a
0920   0979 C0 00 00      cmp b, 0
0921   097C C6 8F 09      je _if20_exit
0922   097F             _if20_true:
0923   097F 2C FF FF      mov b, [bp + -1] ; count
0924   0982 11            mov a, b
0925   0983 FD 77         inc b
0926   0985 D7            push a
0927   0986 11            mov a, b
0928   0987 45 FF FF      mov [bp + -1], a ; count
0929   098A E4            pop a
0930   098B 27            mov b, a
0931   098C 0A 8F 09      jmp _if20_exit
0932   098F             _if20_exit:
0933   098F             _if21_cond:
0934   098F 29 7C 16      mov b, [currState]
0935   0992 D7            push a
0936   0993 74            mov d, b
0937   0994 DA            push d
0938   0995 2C 07 00      mov b, [bp + 7] ; i
0939   0998 D7            push a
0940   0999 11            mov a, b
0941   099A 26 01 00      mov b, 1
0942   099D 54            add a, b
0943   099E 27            mov b, a
0944   099F E4            pop a
0945   09A0 E7            pop d
0946   09A1 10 28 00      mov a, 40
0947   09A4 AC            mul a, b
0948   09A5 5A            add d, b
0949   09A6 DA            push d
0950   09A7 2C 05 00      mov b, [bp + 5] ; j
0951   09AA D7            push a
0952   09AB 11            mov a, b
0953   09AC 26 01 00      mov b, 1
0954   09AF 54            add a, b
0955   09B0 27            mov b, a
0956   09B1 E4            pop a
0957   09B2 E7            pop d
0958   09B3 10 01 00      mov a, 1
0959   09B6 AC            mul a, b
0960   09B7 5A            add d, b
0961   09B8 32            mov bl, [d]
0962   09B9 A7 00         mov bh, 0
0963   09BB E4            pop a
0964   09BC D7            push a
0965   09BD 11            mov a, b
0966   09BE 26 40 00      mov b, '@'
0967   09C1 B0            cmp a, b
0968   09C2 0E            lodflgs
0969   09C3 87 01         and al, %00000001 ; ==
0970   09C5 22 00         mov ah, 0
0971   09C7 27            mov b, a
0972   09C8 E4            pop a
0973   09C9 C0 00 00      cmp b, 0
0974   09CC C6 DF 09      je _if21_exit
0975   09CF             _if21_true:
0976   09CF 2C FF FF      mov b, [bp + -1] ; count
0977   09D2 11            mov a, b
0978   09D3 FD 77         inc b
0979   09D5 D7            push a
0980   09D6 11            mov a, b
0981   09D7 45 FF FF      mov [bp + -1], a ; count
0982   09DA E4            pop a
0983   09DB 27            mov b, a
0984   09DC 0A DF 09      jmp _if21_exit
0985   09DF             _if21_exit:
0986   09DF 2C FF FF      mov b, [bp + -1] ; count
0987   09E2 F9            leave
0988   09E3 09            ret
0989   09E4             
0990   09E4             print:
0991   09E4 D2            push bp
0992   09E5 9B            mov bp, sp
0993   09E6             
0994   09E6             ; --- BEGIN INLINE ASM BLOCK
0995   09E6 17 05 00      mov a, [bp + 5]
0996   09E9 3C            mov d, a
0997   09EA 07 D0 18      call puts
0998   09ED             ; --- END INLINE ASM BLOCK
0999   09ED             
1000   09ED F9            leave
1001   09EE 09            ret
1002   09EF             
1003   09EF             _putchar:
1004   09EF D2            push bp
1005   09F0 9B            mov bp, sp
1006   09F1             
1007   09F1             ; --- BEGIN INLINE ASM BLOCK
1008   09F1 20 05 00      mov al, [bp + 5]
1009   09F4 23            mov ah, al
1010   09F5 07 96 17      call putchar
1011   09F8             ; --- END INLINE ASM BLOCK
1012   09F8             
1013   09F8 F9            leave
1014   09F9 09            ret
1015   09FA             ; --- END TEXT BLOCK
1016   09FA             
1017   09FA             ; --- BEGIN DATA BLOCK
1018   09FA 00 00 00 00 nextState_data: .fill 1600, 0
1018   09FE 00 00 00 00 
1018   0A02 00 00 00 00 
1018   0A06 00 00 00 00 
1018   0A0A 00 00 00 00 
1018   0A0E 00 00 00 00 
1018   0A12 00 00 00 00 
1018   0A16 00 00 00 00 
1018   0A1A 00 00 00 00 
1018   0A1E 00 00 00 00 
1018   0A22 00 00 00 00 
1018   0A26 00 00 00 00 
1018   0A2A 00 00 00 00 
1018   0A2E 00 00 00 00 
1018   0A32 00 00 00 00 
1018   0A36 00 00 00 00 
1018   0A3A 00 00 00 00 
1018   0A3E 00 00 00 00 
1018   0A42 00 00 00 00 
1018   0A46 00 00 00 00 
1018   0A4A 00 00 00 00 
1018   0A4E 00 00 00 00 
1018   0A52 00 00 00 00 
1018   0A56 00 00 00 00 
1018   0A5A 00 00 00 00 
1018   0A5E 00 00 00 00 
1018   0A62 00 00 00 00 
1018   0A66 00 00 00 00 
1018   0A6A 00 00 00 00 
1018   0A6E 00 00 00 00 
1018   0A72 00 00 00 00 
1018   0A76 00 00 00 00 
1018   0A7A 00 00 00 00 
1018   0A7E 00 00 00 00 
1018   0A82 00 00 00 00 
1018   0A86 00 00 00 00 
1018   0A8A 00 00 00 00 
1018   0A8E 00 00 00 00 
1018   0A92 00 00 00 00 
1018   0A96 00 00 00 00 
1018   0A9A 00 00 00 00 
1018   0A9E 00 00 00 00 
1018   0AA2 00 00 00 00 
1018   0AA6 00 00 00 00 
1018   0AAA 00 00 00 00 
1018   0AAE 00 00 00 00 
1018   0AB2 00 00 00 00 
1018   0AB6 00 00 00 00 
1018   0ABA 00 00 00 00 
1018   0ABE 00 00 00 00 
1018   0AC2 00 00 00 00 
1018   0AC6 00 00 00 00 
1018   0ACA 00 00 00 00 
1018   0ACE 00 00 00 00 
1018   0AD2 00 00 00 00 
1018   0AD6 00 00 00 00 
1018   0ADA 00 00 00 00 
1018   0ADE 00 00 00 00 
1018   0AE2 00 00 00 00 
1018   0AE6 00 00 00 00 
1018   0AEA 00 00 00 00 
1018   0AEE 00 00 00 00 
1018   0AF2 00 00 00 00 
1018   0AF6 00 00 00 00 
1018   0AFA 00 00 00 00 
1018   0AFE 00 00 00 00 
1018   0B02 00 00 00 00 
1018   0B06 00 00 00 00 
1018   0B0A 00 00 00 00 
1018   0B0E 00 00 00 00 
1018   0B12 00 00 00 00 
1018   0B16 00 00 00 00 
1018   0B1A 00 00 00 00 
1018   0B1E 00 00 00 00 
1018   0B22 00 00 00 00 
1018   0B26 00 00 00 00 
1018   0B2A 00 00 00 00 
1018   0B2E 00 00 00 00 
1018   0B32 00 00 00 00 
1018   0B36 00 00 00 00 
1018   0B3A 00 00 00 00 
1018   0B3E 00 00 00 00 
1018   0B42 00 00 00 00 
1018   0B46 00 00 00 00 
1018   0B4A 00 00 00 00 
1018   0B4E 00 00 00 00 
1018   0B52 00 00 00 00 
1018   0B56 00 00 00 00 
1018   0B5A 00 00 00 00 
1018   0B5E 00 00 00 00 
1018   0B62 00 00 00 00 
1018   0B66 00 00 00 00 
1018   0B6A 00 00 00 00 
1018   0B6E 00 00 00 00 
1018   0B72 00 00 00 00 
1018   0B76 00 00 00 00 
1018   0B7A 00 00 00 00 
1018   0B7E 00 00 00 00 
1018   0B82 00 00 00 00 
1018   0B86 00 00 00 00 
1018   0B8A 00 00 00 00 
1018   0B8E 00 00 00 00 
1018   0B92 00 00 00 00 
1018   0B96 00 00 00 00 
1018   0B9A 00 00 00 00 
1018   0B9E 00 00 00 00 
1018   0BA2 00 00 00 00 
1018   0BA6 00 00 00 00 
1018   0BAA 00 00 00 00 
1018   0BAE 00 00 00 00 
1018   0BB2 00 00 00 00 
1018   0BB6 00 00 00 00 
1018   0BBA 00 00 00 00 
1018   0BBE 00 00 00 00 
1018   0BC2 00 00 00 00 
1018   0BC6 00 00 00 00 
1018   0BCA 00 00 00 00 
1018   0BCE 00 00 00 00 
1018   0BD2 00 00 00 00 
1018   0BD6 00 00 00 00 
1018   0BDA 00 00 00 00 
1018   0BDE 00 00 00 00 
1018   0BE2 00 00 00 00 
1018   0BE6 00 00 00 00 
1018   0BEA 00 00 00 00 
1018   0BEE 00 00 00 00 
1018   0BF2 00 00 00 00 
1018   0BF6 00 00 00 00 
1018   0BFA 00 00 00 00 
1018   0BFE 00 00 00 00 
1018   0C02 00 00 00 00 
1018   0C06 00 00 00 00 
1018   0C0A 00 00 00 00 
1018   0C0E 00 00 00 00 
1018   0C12 00 00 00 00 
1018   0C16 00 00 00 00 
1018   0C1A 00 00 00 00 
1018   0C1E 00 00 00 00 
1018   0C22 00 00 00 00 
1018   0C26 00 00 00 00 
1018   0C2A 00 00 00 00 
1018   0C2E 00 00 00 00 
1018   0C32 00 00 00 00 
1018   0C36 00 00 00 00 
1018   0C3A 00 00 00 00 
1018   0C3E 00 00 00 00 
1018   0C42 00 00 00 00 
1018   0C46 00 00 00 00 
1018   0C4A 00 00 00 00 
1018   0C4E 00 00 00 00 
1018   0C52 00 00 00 00 
1018   0C56 00 00 00 00 
1018   0C5A 00 00 00 00 
1018   0C5E 00 00 00 00 
1018   0C62 00 00 00 00 
1018   0C66 00 00 00 00 
1018   0C6A 00 00 00 00 
1018   0C6E 00 00 00 00 
1018   0C72 00 00 00 00 
1018   0C76 00 00 00 00 
1018   0C7A 00 00 00 00 
1018   0C7E 00 00 00 00 
1018   0C82 00 00 00 00 
1018   0C86 00 00 00 00 
1018   0C8A 00 00 00 00 
1018   0C8E 00 00 00 00 
1018   0C92 00 00 00 00 
1018   0C96 00 00 00 00 
1018   0C9A 00 00 00 00 
1018   0C9E 00 00 00 00 
1018   0CA2 00 00 00 00 
1018   0CA6 00 00 00 00 
1018   0CAA 00 00 00 00 
1018   0CAE 00 00 00 00 
1018   0CB2 00 00 00 00 
1018   0CB6 00 00 00 00 
1018   0CBA 00 00 00 00 
1018   0CBE 00 00 00 00 
1018   0CC2 00 00 00 00 
1018   0CC6 00 00 00 00 
1018   0CCA 00 00 00 00 
1018   0CCE 00 00 00 00 
1018   0CD2 00 00 00 00 
1018   0CD6 00 00 00 00 
1018   0CDA 00 00 00 00 
1018   0CDE 00 00 00 00 
1018   0CE2 00 00 00 00 
1018   0CE6 00 00 00 00 
1018   0CEA 00 00 00 00 
1018   0CEE 00 00 00 00 
1018   0CF2 00 00 00 00 
1018   0CF6 00 00 00 00 
1018   0CFA 00 00 00 00 
1018   0CFE 00 00 00 00 
1018   0D02 00 00 00 00 
1018   0D06 00 00 00 00 
1018   0D0A 00 00 00 00 
1018   0D0E 00 00 00 00 
1018   0D12 00 00 00 00 
1018   0D16 00 00 00 00 
1018   0D1A 00 00 00 00 
1018   0D1E 00 00 00 00 
1018   0D22 00 00 00 00 
1018   0D26 00 00 00 00 
1018   0D2A 00 00 00 00 
1018   0D2E 00 00 00 00 
1018   0D32 00 00 00 00 
1018   0D36 00 00 00 00 
1018   0D3A 00 00 00 00 
1018   0D3E 00 00 00 00 
1018   0D42 00 00 00 00 
1018   0D46 00 00 00 00 
1018   0D4A 00 00 00 00 
1018   0D4E 00 00 00 00 
1018   0D52 00 00 00 00 
1018   0D56 00 00 00 00 
1018   0D5A 00 00 00 00 
1018   0D5E 00 00 00 00 
1018   0D62 00 00 00 00 
1018   0D66 00 00 00 00 
1018   0D6A 00 00 00 00 
1018   0D6E 00 00 00 00 
1018   0D72 00 00 00 00 
1018   0D76 00 00 00 00 
1018   0D7A 00 00 00 00 
1018   0D7E 00 00 00 00 
1018   0D82 00 00 00 00 
1018   0D86 00 00 00 00 
1018   0D8A 00 00 00 00 
1018   0D8E 00 00 00 00 
1018   0D92 00 00 00 00 
1018   0D96 00 00 00 00 
1018   0D9A 00 00 00 00 
1018   0D9E 00 00 00 00 
1018   0DA2 00 00 00 00 
1018   0DA6 00 00 00 00 
1018   0DAA 00 00 00 00 
1018   0DAE 00 00 00 00 
1018   0DB2 00 00 00 00 
1018   0DB6 00 00 00 00 
1018   0DBA 00 00 00 00 
1018   0DBE 00 00 00 00 
1018   0DC2 00 00 00 00 
1018   0DC6 00 00 00 00 
1018   0DCA 00 00 00 00 
1018   0DCE 00 00 00 00 
1018   0DD2 00 00 00 00 
1018   0DD6 00 00 00 00 
1018   0DDA 00 00 00 00 
1018   0DDE 00 00 00 00 
1018   0DE2 00 00 00 00 
1018   0DE6 00 00 00 00 
1018   0DEA 00 00 00 00 
1018   0DEE 00 00 00 00 
1018   0DF2 00 00 00 00 
1018   0DF6 00 00 00 00 
1018   0DFA 00 00 00 00 
1018   0DFE 00 00 00 00 
1018   0E02 00 00 00 00 
1018   0E06 00 00 00 00 
1018   0E0A 00 00 00 00 
1018   0E0E 00 00 00 00 
1018   0E12 00 00 00 00 
1018   0E16 00 00 00 00 
1018   0E1A 00 00 00 00 
1018   0E1E 00 00 00 00 
1018   0E22 00 00 00 00 
1018   0E26 00 00 00 00 
1018   0E2A 00 00 00 00 
1018   0E2E 00 00 00 00 
1018   0E32 00 00 00 00 
1018   0E36 00 00 00 00 
1018   0E3A 00 00 00 00 
1018   0E3E 00 00 00 00 
1018   0E42 00 00 00 00 
1018   0E46 00 00 00 00 
1018   0E4A 00 00 00 00 
1018   0E4E 00 00 00 00 
1018   0E52 00 00 00 00 
1018   0E56 00 00 00 00 
1018   0E5A 00 00 00 00 
1018   0E5E 00 00 00 00 
1018   0E62 00 00 00 00 
1018   0E66 00 00 00 00 
1018   0E6A 00 00 00 00 
1018   0E6E 00 00 00 00 
1018   0E72 00 00 00 00 
1018   0E76 00 00 00 00 
1018   0E7A 00 00 00 00 
1018   0E7E 00 00 00 00 
1018   0E82 00 00 00 00 
1018   0E86 00 00 00 00 
1018   0E8A 00 00 00 00 
1018   0E8E 00 00 00 00 
1018   0E92 00 00 00 00 
1018   0E96 00 00 00 00 
1018   0E9A 00 00 00 00 
1018   0E9E 00 00 00 00 
1018   0EA2 00 00 00 00 
1018   0EA6 00 00 00 00 
1018   0EAA 00 00 00 00 
1018   0EAE 00 00 00 00 
1018   0EB2 00 00 00 00 
1018   0EB6 00 00 00 00 
1018   0EBA 00 00 00 00 
1018   0EBE 00 00 00 00 
1018   0EC2 00 00 00 00 
1018   0EC6 00 00 00 00 
1018   0ECA 00 00 00 00 
1018   0ECE 00 00 00 00 
1018   0ED2 00 00 00 00 
1018   0ED6 00 00 00 00 
1018   0EDA 00 00 00 00 
1018   0EDE 00 00 00 00 
1018   0EE2 00 00 00 00 
1018   0EE6 00 00 00 00 
1018   0EEA 00 00 00 00 
1018   0EEE 00 00 00 00 
1018   0EF2 00 00 00 00 
1018   0EF6 00 00 00 00 
1018   0EFA 00 00 00 00 
1018   0EFE 00 00 00 00 
1018   0F02 00 00 00 00 
1018   0F06 00 00 00 00 
1018   0F0A 00 00 00 00 
1018   0F0E 00 00 00 00 
1018   0F12 00 00 00 00 
1018   0F16 00 00 00 00 
1018   0F1A 00 00 00 00 
1018   0F1E 00 00 00 00 
1018   0F22 00 00 00 00 
1018   0F26 00 00 00 00 
1018   0F2A 00 00 00 00 
1018   0F2E 00 00 00 00 
1018   0F32 00 00 00 00 
1018   0F36 00 00 00 00 
1018   0F3A 00 00 00 00 
1018   0F3E 00 00 00 00 
1018   0F42 00 00 00 00 
1018   0F46 00 00 00 00 
1018   0F4A 00 00 00 00 
1018   0F4E 00 00 00 00 
1018   0F52 00 00 00 00 
1018   0F56 00 00 00 00 
1018   0F5A 00 00 00 00 
1018   0F5E 00 00 00 00 
1018   0F62 00 00 00 00 
1018   0F66 00 00 00 00 
1018   0F6A 00 00 00 00 
1018   0F6E 00 00 00 00 
1018   0F72 00 00 00 00 
1018   0F76 00 00 00 00 
1018   0F7A 00 00 00 00 
1018   0F7E 00 00 00 00 
1018   0F82 00 00 00 00 
1018   0F86 00 00 00 00 
1018   0F8A 00 00 00 00 
1018   0F8E 00 00 00 00 
1018   0F92 00 00 00 00 
1018   0F96 00 00 00 00 
1018   0F9A 00 00 00 00 
1018   0F9E 00 00 00 00 
1018   0FA2 00 00 00 00 
1018   0FA6 00 00 00 00 
1018   0FAA 00 00 00 00 
1018   0FAE 00 00 00 00 
1018   0FB2 00 00 00 00 
1018   0FB6 00 00 00 00 
1018   0FBA 00 00 00 00 
1018   0FBE 00 00 00 00 
1018   0FC2 00 00 00 00 
1018   0FC6 00 00 00 00 
1018   0FCA 00 00 00 00 
1018   0FCE 00 00 00 00 
1018   0FD2 00 00 00 00 
1018   0FD6 00 00 00 00 
1018   0FDA 00 00 00 00 
1018   0FDE 00 00 00 00 
1018   0FE2 00 00 00 00 
1018   0FE6 00 00 00 00 
1018   0FEA 00 00 00 00 
1018   0FEE 00 00 00 00 
1018   0FF2 00 00 00 00 
1018   0FF6 00 00 00 00 
1018   0FFA 00 00 00 00 
1018   0FFE 00 00 00 00 
1018   1002 00 00 00 00 
1018   1006 00 00 00 00 
1018   100A 00 00 00 00 
1018   100E 00 00 00 00 
1018   1012 00 00 00 00 
1018   1016 00 00 00 00 
1018   101A 00 00 00 00 
1018   101E 00 00 00 00 
1018   1022 00 00 00 00 
1018   1026 00 00 00 00 
1018   102A 00 00 00 00 
1018   102E 00 00 00 00 
1018   1032 00 00 00 00 
1018   1036 00 00 00 00 
1019   103A FA 09       nextState: .dw nextState_data
1020   103C             currState_data: 
1021   103C 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1021   1040 20 20 20 20 
1021   1044 20 20 20 20 
1021   1048 20 20 20 20 
1021   104C 20 20 20 20 
1021   1050 20 20 20 20 
1021   1054 20 20 20 20 
1021   1058 20 20 
1022   105A 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1022   105E 20 20 20 20 
1022   1062 20 20 20 20 
1022   1066 20 20 20 20 
1022   106A 20 20 20 20 
1022   106E 20 20 20 20 
1022   1072 20 20 20 20 
1022   1076 20 20 
1023   1078 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1023   107C 20 20 20 20 
1023   1080 20 20 20 20 
1023   1084 20 20 20 20 
1023   1088 20 20 20 20 
1023   108C 20 20 20 20 
1023   1090 20 20 20 20 
1023   1094 20 20 
1024   1096 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1024   109A 20 20 20 20 
1024   109E 20 20 20 20 
1024   10A2 20 20 20 20 
1024   10A6 20 20 20 20 
1024   10AA 20 20 20 20 
1024   10AE 20 20 20 20 
1024   10B2 20 20 
1025   10B4 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', 
1025   10B8 20 20 20 20 
1025   10BC 20 20 20 20 
1025   10C0 20 20 20 20 
1025   10C4 20 20 20 20 
1025   10C8 20 20 20 20 
1025   10CC 20 20 20 40 
1025   10D0 20 20 
1026   10D2 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1026   10D6 20 20 20 20 
1026   10DA 20 20 20 20 
1026   10DE 20 20 20 20 
1026   10E2 20 20 20 20 
1026   10E6 20 20 20 20 
1026   10EA 20 20 20 20 
1026   10EE 20 20 
1027   10F0 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', '@', ' ', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1027   10F4 20 40 20 40 
1027   10F8 20 20 20 20 
1027   10FC 20 20 20 20 
1027   1100 20 20 20 20 
1027   1104 20 20 20 20 
1027   1108 20 20 20 20 
1027   110C 20 20 
1028   110E 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', 
1028   1112 20 40 40 20 
1028   1116 20 20 20 20 
1028   111A 20 40 40 20 
1028   111E 20 20 20 20 
1028   1122 20 20 20 20 
1028   1126 20 20 20 40 
1028   112A 40 20 
1029   112C 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', '@', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', 
1029   1130 20 20 20 20 
1029   1134 20 20 20 20 
1029   1138 20 20 40 20 
1029   113C 20 20 40 20 
1029   1140 20 20 20 40 
1029   1144 40 20 20 20 
1029   1148 20 20 
1030   114A 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', ' ', ' ', '@', 
1030   114E 20 20 20 40 
1030   1152 40 20 20 20 
1030   1156 20 40 40 20 
1030   115A 20 20 20 20 
1030   115E 20 20 20 40 
1030   1162 20 20 20 20 
1030   1166 20 40 
1031   1168 20 20 20 40 .db ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', 
1031   116C 40 20 20 20 
1031   1170 20 20 20 20 
1031   1174 20 20 20 20 
1031   1178 20 20 20 20 
1031   117C 20 20 20 40 
1031   1180 40 20 20 20 
1031   1184 20 20 
1032   1186 20 20 20 40 .db ' ', ' ', ' ', '@', ' ', ' ', ' ', '@', ' ', '@', '@', ' ', ' ', ' ', ' ', '@', ' ', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1032   118A 20 20 20 40 
1032   118E 20 40 40 20 
1032   1192 20 20 20 40 
1032   1196 20 40 20 20 
1032   119A 20 20 20 20 
1032   119E 20 20 20 20 
1032   11A2 20 20 
1033   11A4 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', 
1033   11A8 20 20 20 20 
1033   11AC 20 20 20 20 
1033   11B0 20 40 20 20 
1033   11B4 20 20 20 40 
1033   11B8 20 20 20 20 
1033   11BC 20 20 20 40 
1033   11C0 20 20 
1034   11C2 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', ' ', '@', ' ', 
1034   11C6 20 20 20 20 
1034   11CA 20 20 20 20 
1034   11CE 20 20 20 20 
1034   11D2 20 20 20 20 
1034   11D6 20 20 20 20 
1034   11DA 40 20 20 20 
1034   11DE 40 20 
1035   11E0 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1035   11E4 20 20 20 20 
1035   11E8 20 20 20 20 
1035   11EC 20 20 20 20 
1035   11F0 20 20 20 20 
1035   11F4 20 20 20 20 
1035   11F8 20 20 20 20 
1035   11FC 20 20 
1036   11FE 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1036   1202 20 40 40 20 
1036   1206 20 20 20 20 
1036   120A 20 20 20 20 
1036   120E 20 20 20 20 
1036   1212 20 20 20 20 
1036   1216 20 20 20 20 
1036   121A 20 20 
1037   121C 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1037   1220 20 20 20 20 
1037   1224 20 20 20 20 
1037   1228 20 20 20 20 
1037   122C 20 20 20 20 
1037   1230 20 20 20 20 
1037   1234 20 20 20 20 
1037   1238 20 20 
1038   123A 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1038   123E 20 20 20 20 
1038   1242 20 20 20 20 
1038   1246 20 20 20 20 
1038   124A 20 20 20 20 
1038   124E 20 20 20 20 
1038   1252 20 20 20 20 
1038   1256 20 20 
1039   1258 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1039   125C 20 20 20 20 
1039   1260 20 20 20 20 
1039   1264 20 20 20 20 
1039   1268 20 20 20 20 
1039   126C 20 20 20 20 
1039   1270 20 20 20 20 
1039   1274 20 20 
1040   1276 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1040   127A 20 20 20 20 
1040   127E 20 20 20 20 
1040   1282 20 20 20 20 
1040   1286 20 20 20 20 
1040   128A 20 20 20 20 
1040   128E 20 20 20 20 
1040   1292 20 20 
1041   1294 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1041   1298 20 20 20 20 
1041   129C 20 20 20 20 
1041   12A0 20 20 20 20 
1041   12A4 20 20 20 20 
1041   12A8 20 20 20 20 
1041   12AC 20 20 20 20 
1041   12B0 20 20 
1042   12B2 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1042   12B6 20 20 20 20 
1042   12BA 20 20 20 20 
1042   12BE 20 20 20 20 
1042   12C2 20 20 20 20 
1042   12C6 20 20 20 20 
1042   12CA 20 20 20 20 
1042   12CE 20 20 
1043   12D0 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1043   12D4 20 20 20 20 
1043   12D8 20 20 20 20 
1043   12DC 20 20 20 20 
1043   12E0 20 20 20 20 
1043   12E4 20 20 20 20 
1043   12E8 20 20 20 20 
1043   12EC 20 20 
1044   12EE 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1044   12F2 20 20 20 20 
1044   12F6 20 20 20 20 
1044   12FA 20 20 20 20 
1044   12FE 20 20 20 20 
1044   1302 20 20 20 20 
1044   1306 20 20 20 20 
1044   130A 20 20 
1045   130C 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1045   1310 20 20 20 20 
1045   1314 20 20 20 20 
1045   1318 20 20 20 20 
1045   131C 20 20 20 20 
1045   1320 20 20 20 20 
1045   1324 20 20 20 20 
1045   1328 20 20 
1046   132A 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1046   132E 20 20 20 20 
1046   1332 20 20 20 20 
1046   1336 20 20 20 20 
1046   133A 20 20 20 20 
1046   133E 20 20 20 20 
1046   1342 20 20 20 20 
1046   1346 20 20 
1047   1348 20 20 20 20 .db ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 
1047   134C 20 20 20 20 
1047   1350 20 20 20 20 
1047   1354 20 20 20 20 
1047   1358 20 20 20 20 
1048   135C 00 00 00 00 .fill 800, 0
1048   1360 00 00 00 00 
1048   1364 00 00 00 00 
1048   1368 00 00 00 00 
1048   136C 00 00 00 00 
1048   1370 00 00 00 00 
1048   1374 00 00 00 00 
1048   1378 00 00 00 00 
1048   137C 00 00 00 00 
1048   1380 00 00 00 00 
1048   1384 00 00 00 00 
1048   1388 00 00 00 00 
1048   138C 00 00 00 00 
1048   1390 00 00 00 00 
1048   1394 00 00 00 00 
1048   1398 00 00 00 00 
1048   139C 00 00 00 00 
1048   13A0 00 00 00 00 
1048   13A4 00 00 00 00 
1048   13A8 00 00 00 00 
1048   13AC 00 00 00 00 
1048   13B0 00 00 00 00 
1048   13B4 00 00 00 00 
1048   13B8 00 00 00 00 
1048   13BC 00 00 00 00 
1048   13C0 00 00 00 00 
1048   13C4 00 00 00 00 
1048   13C8 00 00 00 00 
1048   13CC 00 00 00 00 
1048   13D0 00 00 00 00 
1048   13D4 00 00 00 00 
1048   13D8 00 00 00 00 
1048   13DC 00 00 00 00 
1048   13E0 00 00 00 00 
1048   13E4 00 00 00 00 
1048   13E8 00 00 00 00 
1048   13EC 00 00 00 00 
1048   13F0 00 00 00 00 
1048   13F4 00 00 00 00 
1048   13F8 00 00 00 00 
1048   13FC 00 00 00 00 
1048   1400 00 00 00 00 
1048   1404 00 00 00 00 
1048   1408 00 00 00 00 
1048   140C 00 00 00 00 
1048   1410 00 00 00 00 
1048   1414 00 00 00 00 
1048   1418 00 00 00 00 
1048   141C 00 00 00 00 
1048   1420 00 00 00 00 
1048   1424 00 00 00 00 
1048   1428 00 00 00 00 
1048   142C 00 00 00 00 
1048   1430 00 00 00 00 
1048   1434 00 00 00 00 
1048   1438 00 00 00 00 
1048   143C 00 00 00 00 
1048   1440 00 00 00 00 
1048   1444 00 00 00 00 
1048   1448 00 00 00 00 
1048   144C 00 00 00 00 
1048   1450 00 00 00 00 
1048   1454 00 00 00 00 
1048   1458 00 00 00 00 
1048   145C 00 00 00 00 
1048   1460 00 00 00 00 
1048   1464 00 00 00 00 
1048   1468 00 00 00 00 
1048   146C 00 00 00 00 
1048   1470 00 00 00 00 
1048   1474 00 00 00 00 
1048   1478 00 00 00 00 
1048   147C 00 00 00 00 
1048   1480 00 00 00 00 
1048   1484 00 00 00 00 
1048   1488 00 00 00 00 
1048   148C 00 00 00 00 
1048   1490 00 00 00 00 
1048   1494 00 00 00 00 
1048   1498 00 00 00 00 
1048   149C 00 00 00 00 
1048   14A0 00 00 00 00 
1048   14A4 00 00 00 00 
1048   14A8 00 00 00 00 
1048   14AC 00 00 00 00 
1048   14B0 00 00 00 00 
1048   14B4 00 00 00 00 
1048   14B8 00 00 00 00 
1048   14BC 00 00 00 00 
1048   14C0 00 00 00 00 
1048   14C4 00 00 00 00 
1048   14C8 00 00 00 00 
1048   14CC 00 00 00 00 
1048   14D0 00 00 00 00 
1048   14D4 00 00 00 00 
1048   14D8 00 00 00 00 
1048   14DC 00 00 00 00 
1048   14E0 00 00 00 00 
1048   14E4 00 00 00 00 
1048   14E8 00 00 00 00 
1048   14EC 00 00 00 00 
1048   14F0 00 00 00 00 
1048   14F4 00 00 00 00 
1048   14F8 00 00 00 00 
1048   14FC 00 00 00 00 
1048   1500 00 00 00 00 
1048   1504 00 00 00 00 
1048   1508 00 00 00 00 
1048   150C 00 00 00 00 
1048   1510 00 00 00 00 
1048   1514 00 00 00 00 
1048   1518 00 00 00 00 
1048   151C 00 00 00 00 
1048   1520 00 00 00 00 
1048   1524 00 00 00 00 
1048   1528 00 00 00 00 
1048   152C 00 00 00 00 
1048   1530 00 00 00 00 
1048   1534 00 00 00 00 
1048   1538 00 00 00 00 
1048   153C 00 00 00 00 
1048   1540 00 00 00 00 
1048   1544 00 00 00 00 
1048   1548 00 00 00 00 
1048   154C 00 00 00 00 
1048   1550 00 00 00 00 
1048   1554 00 00 00 00 
1048   1558 00 00 00 00 
1048   155C 00 00 00 00 
1048   1560 00 00 00 00 
1048   1564 00 00 00 00 
1048   1568 00 00 00 00 
1048   156C 00 00 00 00 
1048   1570 00 00 00 00 
1048   1574 00 00 00 00 
1048   1578 00 00 00 00 
1048   157C 00 00 00 00 
1048   1580 00 00 00 00 
1048   1584 00 00 00 00 
1048   1588 00 00 00 00 
1048   158C 00 00 00 00 
1048   1590 00 00 00 00 
1048   1594 00 00 00 00 
1048   1598 00 00 00 00 
1048   159C 00 00 00 00 
1048   15A0 00 00 00 00 
1048   15A4 00 00 00 00 
1048   15A8 00 00 00 00 
1048   15AC 00 00 00 00 
1048   15B0 00 00 00 00 
1048   15B4 00 00 00 00 
1048   15B8 00 00 00 00 
1048   15BC 00 00 00 00 
1048   15C0 00 00 00 00 
1048   15C4 00 00 00 00 
1048   15C8 00 00 00 00 
1048   15CC 00 00 00 00 
1048   15D0 00 00 00 00 
1048   15D4 00 00 00 00 
1048   15D8 00 00 00 00 
1048   15DC 00 00 00 00 
1048   15E0 00 00 00 00 
1048   15E4 00 00 00 00 
1048   15E8 00 00 00 00 
1048   15EC 00 00 00 00 
1048   15F0 00 00 00 00 
1048   15F4 00 00 00 00 
1048   15F8 00 00 00 00 
1048   15FC 00 00 00 00 
1048   1600 00 00 00 00 
1048   1604 00 00 00 00 
1048   1608 00 00 00 00 
1048   160C 00 00 00 00 
1048   1610 00 00 00 00 
1048   1614 00 00 00 00 
1048   1618 00 00 00 00 
1048   161C 00 00 00 00 
1048   1620 00 00 00 00 
1048   1624 00 00 00 00 
1048   1628 00 00 00 00 
1048   162C 00 00 00 00 
1048   1630 00 00 00 00 
1048   1634 00 00 00 00 
1048   1638 00 00 00 00 
1048   163C 00 00 00 00 
1048   1640 00 00 00 00 
1048   1644 00 00 00 00 
1048   1648 00 00 00 00 
1048   164C 00 00 00 00 
1048   1650 00 00 00 00 
1048   1654 00 00 00 00 
1048   1658 00 00 00 00 
1048   165C 00 00 00 00 
1048   1660 00 00 00 00 
1048   1664 00 00 00 00 
1048   1668 00 00 00 00 
1048   166C 00 00 00 00 
1048   1670 00 00 00 00 
1048   1674 00 00 00 00 
1048   1678 00 00 00 00 
1049   167C 3C 10       currState: .dw currState_data
1050   167E 40 20 00    _string_0: .db "@ ", 0
1051   1681 2E 20 00    _string_1: .db ". ", 0
1052   1684             ; --- END DATA BLOCK
1053   1684             
1054   1684             ; --- BEGIN INCLUDE BLOCK
1055   1684             .include "lib/stdio.asm"
0001+  1684             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1684             ; stdio.s
0003+  1684             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1684             .include "lib/string.asm"
0001++ 1684             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1684             ; string.s
0003++ 1684             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1684             
0005++ 1684             
0006++ 1684             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1684             ; strrev
0008++ 1684             ; reverse a string
0009++ 1684             ; D = string address
0010++ 1684             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1684             ; 01234
0012++ 1684             strrev:
0013++ 1684 4B          	pusha
0014++ 1685 07 CB 16    	call strlen	; length in C
0015++ 1688 12          	mov a, c
0016++ 1689 AF 01 00    	cmp a, 1
0017++ 168C D0 A6 16    	jleu strrev_end	; check string length. string len must be > 1
0018++ 168F 7D          	dec a
0019++ 1690 FD 4E       	mov si, d	; beginning of string
0020++ 1692 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1694 59          	add d, a	; end of string
0022++ 1695 12          	mov a, c
0023++ 1696 FD 9B       	shr a		; divide by 2
0024++ 1698 39          	mov c, a	; C now counts the steps
0025++ 1699             strrev_L0:
0026++ 1699 32          	mov bl, [d]	; save load right-side char into BL
0027++ 169A F6          	lodsb		; load left-side char into AL; increase SI
0028++ 169B 3E          	mov [d], al	; store left char into right side
0029++ 169C 1B          	mov al, bl
0030++ 169D F7          	stosb		; store right-side char into left-side; increase DI
0031++ 169E 7E          	dec c
0032++ 169F 7F          	dec d
0033++ 16A0 C2 00 00    	cmp c, 0
0034++ 16A3 C7 99 16    	jne strrev_L0
0035++ 16A6             strrev_end:
0036++ 16A6 4C          	popa
0037++ 16A7 09          	ret
0038++ 16A8             	
0039++ 16A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 16A8             ; strchr
0041++ 16A8             ; search string in D for char in AL
0042++ 16A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 16A8             strchr:
0044++ 16A8             strchr_L0:
0045++ 16A8 32          	mov bl, [d]
0046++ 16A9 C1 00       	cmp bl, 0
0047++ 16AB C6 B6 16    	je strchr_end
0048++ 16AE BA          	cmp al, bl
0049++ 16AF C6 B6 16    	je strchr_end
0050++ 16B2 79          	inc d
0051++ 16B3 0A A8 16    	jmp strchr_L0
0052++ 16B6             strchr_end:
0053++ 16B6 1B          	mov al, bl
0054++ 16B7 09          	ret
0055++ 16B8             
0056++ 16B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 16B8             ; strstr
0058++ 16B8             ; find sub-string
0059++ 16B8             ; str1 in SI
0060++ 16B8             ; str2 in DI
0061++ 16B8             ; SI points to end of source string
0062++ 16B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 16B8             strstr:
0064++ 16B8 DB          	push al
0065++ 16B9 DA          	push d
0066++ 16BA E3          	push di
0067++ 16BB             strstr_loop:
0068++ 16BB F3          	cmpsb					; compare a byte of the strings
0069++ 16BC C7 C7 16    	jne strstr_ret
0070++ 16BF FC 00 00    	lea d, [di + 0]
0071++ 16C2 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 16C4 C7 BB 16    	jne strstr_loop				; equal chars but not at end
0073++ 16C7             strstr_ret:
0074++ 16C7 F0          	pop di
0075++ 16C8 E7          	pop d
0076++ 16C9 E8          	pop al
0077++ 16CA 09          	ret
0078++ 16CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 16CB             ; length of null terminated string
0080++ 16CB             ; result in C
0081++ 16CB             ; pointer in D
0082++ 16CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 16CB             strlen:
0084++ 16CB DA          	push d
0085++ 16CC 38 00 00    	mov c, 0
0086++ 16CF             strlen_L1:
0087++ 16CF BD 00       	cmp byte [d], 0
0088++ 16D1 C6 D9 16    	je strlen_ret
0089++ 16D4 79          	inc d
0090++ 16D5 78          	inc c
0091++ 16D6 0A CF 16    	jmp strlen_L1
0092++ 16D9             strlen_ret:
0093++ 16D9 E7          	pop d
0094++ 16DA 09          	ret
0095++ 16DB             
0096++ 16DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 16DB             ; STRCMP
0098++ 16DB             ; compare two strings
0099++ 16DB             ; str1 in SI
0100++ 16DB             ; str2 in DI
0101++ 16DB             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 16DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 16DB             strcmp:
0104++ 16DB DB          	push al
0105++ 16DC DA          	push d
0106++ 16DD E3          	push di
0107++ 16DE E2          	push si
0108++ 16DF             strcmp_loop:
0109++ 16DF F3          	cmpsb					; compare a byte of the strings
0110++ 16E0 C7 EB 16    	jne strcmp_ret
0111++ 16E3 FB FF FF    	lea d, [si +- 1]
0112++ 16E6 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 16E8 C7 DF 16    	jne strcmp_loop				; equal chars but not at end
0114++ 16EB             strcmp_ret:
0115++ 16EB EF          	pop si
0116++ 16EC F0          	pop di
0117++ 16ED E7          	pop d
0118++ 16EE E8          	pop al
0119++ 16EF 09          	ret
0120++ 16F0             
0121++ 16F0             
0122++ 16F0             ; STRCPY
0123++ 16F0             ; copy null terminated string from SI to DI
0124++ 16F0             ; source in SI
0125++ 16F0             ; destination in DI
0126++ 16F0             strcpy:
0127++ 16F0 E2          	push si
0128++ 16F1 E3          	push di
0129++ 16F2 DB          	push al
0130++ 16F3             strcpy_L1:
0131++ 16F3 F6          	lodsb
0132++ 16F4 F7          	stosb
0133++ 16F5 B9 00       	cmp al, 0
0134++ 16F7 C7 F3 16    	jne strcpy_L1
0135++ 16FA             strcpy_end:
0136++ 16FA E8          	pop al
0137++ 16FB F0          	pop di
0138++ 16FC EF          	pop si
0139++ 16FD 09          	ret
0140++ 16FE             
0141++ 16FE             ; STRCAT
0142++ 16FE             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 16FE             ; source in SI
0144++ 16FE             ; destination in DI
0145++ 16FE             strcat:
0146++ 16FE E2          	push si
0147++ 16FF E3          	push di
0148++ 1700 D7          	push a
0149++ 1701 DA          	push d
0150++ 1702 50          	mov a, di
0151++ 1703 3C          	mov d, a
0152++ 1704             strcat_goto_end_L1:
0153++ 1704 BD 00       	cmp byte[d], 0
0154++ 1706 C6 0D 17    	je strcat_start
0155++ 1709 79          	inc d
0156++ 170A 0A 04 17    	jmp strcat_goto_end_L1
0157++ 170D             strcat_start:
0158++ 170D FD 50       	mov di, d
0159++ 170F             strcat_L1:
0160++ 170F F6          	lodsb
0161++ 1710 F7          	stosb
0162++ 1711 B9 00       	cmp al, 0
0163++ 1713 C7 0F 17    	jne strcat_L1
0164++ 1716             strcat_end:
0165++ 1716 E7          	pop d
0166++ 1717 E4          	pop a
0167++ 1718 F0          	pop di
0168++ 1719 EF          	pop si
0169++ 171A 09          	ret
0005+  171B             
0006+  171B 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  171F 34 35 36 37 
0006+  1723 38 39 41 42 
0006+  1727 43 44 45 46 
0007+  172B 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  172F 1B 5B 48 00 
0008+  1733             
0009+  1733 01 00       table_power:.dw 1
0010+  1735 0A 00       			.dw 10
0011+  1737 64 00       			.dw 100
0012+  1739 E8 03       			.dw 1000
0013+  173B 10 27       			.dw 10000
0014+  173D             
0015+  173D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  173D             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  173D             ; ASCII in BL
0018+  173D             ; result in AL
0019+  173D             ; ascii for F = 0100 0110
0020+  173D             ; ascii for 9 = 0011 1001
0021+  173D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  173D             hex_ascii_encode:
0023+  173D 1B          	mov al, bl
0024+  173E 93 40       	test al, $40				; test if letter or number
0025+  1740 C7 46 17    	jnz hex_letter
0026+  1743 87 0F       	and al, $0F				; get number
0027+  1745 09          	ret
0028+  1746             hex_letter:
0029+  1746 87 0F       	and al, $0F				; get letter
0030+  1748 6A 09       	add al, 9
0031+  174A 09          	ret
0032+  174B             
0033+  174B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  174B             ; ATOI
0035+  174B             ; 2 letter hex string in B
0036+  174B             ; 8bit integer returned in AL
0037+  174B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  174B             atoi:
0039+  174B D8          	push b
0040+  174C 07 3D 17    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  174F 30          	mov bl, bh
0042+  1750 DB          	push al					; save a
0043+  1751 07 3D 17    	call hex_ascii_encode
0044+  1754 EA          	pop bl	
0045+  1755 FD 9E 04    	shl al, 4
0046+  1758 8C          	or al, bl
0047+  1759 E5          	pop b
0048+  175A 09          	ret	
0049+  175B             
0050+  175B             
0051+  175B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  175B             ; printf
0053+  175B             ; no need for explanations!
0054+  175B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  175B             printf:
0056+  175B 09          	ret
0057+  175C             
0058+  175C             
0059+  175C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  175C             ; scanf
0061+  175C             ; no need for explanations!
0062+  175C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  175C             scanf:
0064+  175C 09          	ret
0065+  175D             
0066+  175D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  175D             ; ITOA
0068+  175D             ; 8bit value in BL
0069+  175D             ; 2 byte ASCII result in A
0070+  175D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  175D             itoa:
0072+  175D DA          	push d
0073+  175E D8          	push b
0074+  175F A7 00       	mov bh, 0
0075+  1761 FD A4 04    	shr bl, 4	
0076+  1764 74          	mov d, b
0077+  1765 1F 1B 17    	mov al, [d + s_hex_digits]
0078+  1768 23          	mov ah, al
0079+  1769             	
0080+  1769 E5          	pop b
0081+  176A D8          	push b
0082+  176B A7 00       	mov bh, 0
0083+  176D FD 87 0F    	and bl, $0F
0084+  1770 74          	mov d, b
0085+  1771 1F 1B 17    	mov al, [d + s_hex_digits]
0086+  1774 E5          	pop b
0087+  1775 E7          	pop d
0088+  1776 09          	ret
0089+  1777             
0090+  1777             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  1777             ; HEX STRING TO BINARY
0092+  1777             ; di = destination address
0093+  1777             ; si = source
0094+  1777             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  1777             hex_to_int:
0096+  1777             hex_to_int_L1:
0097+  1777 F6          	lodsb					; load from [SI] to AL
0098+  1778 B9 00       	cmp al, 0				; check if ASCII 0
0099+  177A C6 87 17    	jz hex_to_int_ret
0100+  177D 36          	mov bh, al
0101+  177E F6          	lodsb
0102+  177F 2F          	mov bl, al
0103+  1780 07 4B 17    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  1783 F7          	stosb					; store AL to [DI]
0105+  1784 0A 77 17    	jmp hex_to_int_L1
0106+  1787             hex_to_int_ret:
0107+  1787 09          	ret		
0108+  1788             
0109+  1788             
0110+  1788             
0111+  1788             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  1788             ; GETCHAR
0113+  1788             ; char in ah
0114+  1788             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  1788             getchar:
0116+  1788 DB          	push al
0117+  1789             getchar_retry:
0118+  1789 FD 0C       	sti
0119+  178B 19 01       	mov al, 1
0120+  178D 05 03       	syscall sys_io			; receive in AH
0121+  178F B9 00       	cmp al, 0			; check if any char was receive
0122+  1791 C6 89 17    	je getchar_retry
0123+  1794 E8          	pop al
0124+  1795 09          	ret
0125+  1796             
0126+  1796             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  1796             ; PUTCHAR
0128+  1796             ; char in ah
0129+  1796             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1796             putchar:
0131+  1796 D7          	push a
0132+  1797 19 00       	mov al, 0
0133+  1799 05 03       	syscall sys_io			; char in AH
0134+  179B E4          	pop a
0135+  179C 09          	ret
0136+  179D             
0137+  179D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  179D             ;; INPUT A STRING
0139+  179D             ;; terminates with null
0140+  179D             ;; pointer in D
0141+  179D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  179D             gets:
0143+  179D D7          	push a
0144+  179E DA          	push d
0145+  179F             gets_loop:
0146+  179F FD 0C       	sti
0147+  17A1 19 01       	mov al, 1
0148+  17A3 05 03       	syscall sys_io			; receive in AH
0149+  17A5 B9 00       	cmp al, 0				; check error code (AL)
0150+  17A7 C6 9F 17    	je gets_loop			; if no char received, retry
0151+  17AA             
0152+  17AA 76 1B       	cmp ah, 27
0153+  17AC C6 CD 17    	je gets_telnet_escape
0154+  17AF 76 0A       	cmp ah, $0A				; LF
0155+  17B1 C6 26 18    	je gets_end
0156+  17B4 76 0D       	cmp ah, $0D				; CR
0157+  17B6 C6 26 18    	je gets_end
0158+  17B9 76 5C       	cmp ah, $5C				; '\\'
0159+  17BB C6 FD 17    	je gets_escape
0160+  17BE             	
0161+  17BE 76 08       	cmp ah, $08			; check for backspace
0162+  17C0 C6 C9 17    	je gets_backspace
0163+  17C3             
0164+  17C3 1A          	mov al, ah
0165+  17C4 3E          	mov [d], al
0166+  17C5 79          	inc d
0167+  17C6 0A 9F 17    	jmp gets_loop
0168+  17C9             gets_backspace:
0169+  17C9 7F          	dec d
0170+  17CA 0A 9F 17    	jmp gets_loop
0171+  17CD             gets_telnet_escape:
0172+  17CD FD 0C       	sti
0173+  17CF 19 01       	mov al, 1
0174+  17D1 05 03       	syscall sys_io				; receive in AH without echo
0175+  17D3 B9 00       	cmp al, 0					; check error code (AL)
0176+  17D5 C6 CD 17    	je gets_telnet_escape		; if no char received, retry
0177+  17D8 76 5B       	cmp ah, '['
0178+  17DA C7 9F 17    	jne gets_loop
0179+  17DD             gets_telnet_escape_phase2:
0180+  17DD FD 0C       	sti
0181+  17DF 19 01       	mov al, 1
0182+  17E1 05 03       	syscall sys_io					; receive in AH without echo
0183+  17E3 B9 00       	cmp al, 0						; check error code (AL)
0184+  17E5 C6 DD 17    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  17E8 76 44       	cmp ah, 'D'
0186+  17EA C6 F5 17    	je gets_left_arrow
0187+  17ED 76 43       	cmp ah, 'C'
0188+  17EF C6 F9 17    	je gets_right_arrow
0189+  17F2 0A 9F 17    	jmp gets_loop
0190+  17F5             gets_left_arrow:
0191+  17F5 7F          	dec d
0192+  17F6 0A 9F 17    	jmp gets_loop
0193+  17F9             gets_right_arrow:
0194+  17F9 79          	inc d
0195+  17FA 0A 9F 17    	jmp gets_loop
0196+  17FD             gets_escape:
0197+  17FD FD 0C       	sti
0198+  17FF 19 01       	mov al, 1
0199+  1801 05 03       	syscall sys_io			; receive in AH
0200+  1803 B9 00       	cmp al, 0				; check error code (AL)
0201+  1805 C6 FD 17    	je gets_escape			; if no char received, retry
0202+  1808 76 6E       	cmp ah, 'n'
0203+  180A C6 18 18    	je gets_LF
0204+  180D 76 72       	cmp ah, 'r'
0205+  180F C6 1F 18    	je gets_CR
0206+  1812 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  1813 3E          	mov [d], al
0208+  1814 79          	inc d
0209+  1815 0A 9F 17    	jmp gets_loop
0210+  1818             gets_LF:
0211+  1818 19 0A       	mov al, $0A
0212+  181A 3E          	mov [d], al
0213+  181B 79          	inc d
0214+  181C 0A 9F 17    	jmp gets_loop
0215+  181F             gets_CR:
0216+  181F 19 0D       	mov al, $0D
0217+  1821 3E          	mov [d], al
0218+  1822 79          	inc d
0219+  1823 0A 9F 17    	jmp gets_loop
0220+  1826             gets_end:
0221+  1826 19 00       	mov al, 0
0222+  1828 3E          	mov [d], al				; terminate string
0223+  1829 E7          	pop d
0224+  182A E4          	pop a
0225+  182B 09          	ret
0226+  182C             
0227+  182C             
0228+  182C             
0229+  182C             
0230+  182C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  182C             ;; INPUT TEXT
0232+  182C             ;; terminated with CTRL+D
0233+  182C             ;; pointer in D
0234+  182C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  182C             gettxt:
0236+  182C D7          	push a
0237+  182D DA          	push d
0238+  182E             gettxt_loop:
0239+  182E 19 01       	mov al, 1
0240+  1830 05 03       	syscall sys_io			; receive in AH
0241+  1832 B9 00       	cmp al, 0				; check error code (AL)
0242+  1834 C6 2E 18    	je gettxt_loop		; if no char received, retry
0243+  1837 76 04       	cmp ah, 4			; EOT
0244+  1839 C6 77 18    	je gettxt_end
0245+  183C 76 08       	cmp ah, $08			; check for backspace
0246+  183E C6 73 18    	je gettxt_backspace
0247+  1841 76 5C       	cmp ah, $5C				; '\\'
0248+  1843 C6 4C 18    	je gettxt_escape
0249+  1846 1A          	mov al, ah
0250+  1847 3E          	mov [d], al
0251+  1848 79          	inc d
0252+  1849 0A 2E 18    	jmp gettxt_loop
0253+  184C             gettxt_escape:
0254+  184C 19 01       	mov al, 1
0255+  184E 05 03       	syscall sys_io			; receive in AH
0256+  1850 B9 00       	cmp al, 0				; check error code (AL)
0257+  1852 C6 4C 18    	je gettxt_escape		; if no char received, retry
0258+  1855 76 6E       	cmp ah, 'n'
0259+  1857 C6 65 18    	je gettxt_LF
0260+  185A 76 72       	cmp ah, 'r'
0261+  185C C6 6C 18    	je gettxt_CR
0262+  185F 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  1860 3E          	mov [d], al
0264+  1861 79          	inc d
0265+  1862 0A 2E 18    	jmp gettxt_loop
0266+  1865             gettxt_LF:
0267+  1865 19 0A       	mov al, $0A
0268+  1867 3E          	mov [d], al
0269+  1868 79          	inc d
0270+  1869 0A 2E 18    	jmp gettxt_loop
0271+  186C             gettxt_CR:
0272+  186C 19 0D       	mov al, $0D
0273+  186E 3E          	mov [d], al
0274+  186F 79          	inc d
0275+  1870 0A 2E 18    	jmp gettxt_loop
0276+  1873             gettxt_backspace:
0277+  1873 7F          	dec d
0278+  1874 0A 2E 18    	jmp gettxt_loop
0279+  1877             gettxt_end:
0280+  1877 19 00       	mov al, 0
0281+  1879 3E          	mov [d], al				; terminate string
0282+  187A E7          	pop d
0283+  187B E4          	pop a
0284+  187C 09          	ret
0285+  187D             
0286+  187D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  187D             ; PRINT NEW LINE
0288+  187D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  187D             printnl:
0290+  187D D7          	push a
0291+  187E 10 00 0A    	mov a, $0A00
0292+  1881 05 03       	syscall sys_io
0293+  1883 10 00 0D    	mov a, $0D00
0294+  1886 05 03       	syscall sys_io
0295+  1888 E4          	pop a
0296+  1889 09          	ret
0297+  188A             
0298+  188A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  188A             ; strtoint
0300+  188A             ; 4 digit hex string number in d
0301+  188A             ; integer returned in A
0302+  188A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  188A             strtointx:
0304+  188A D8          	push b
0305+  188B 32          	mov bl, [d]
0306+  188C 37          	mov bh, bl
0307+  188D 33 01 00    	mov bl, [d + 1]
0308+  1890 07 4B 17    	call atoi				; convert to int in AL
0309+  1893 23          	mov ah, al				; move to AH
0310+  1894 33 02 00    	mov bl, [d + 2]
0311+  1897 37          	mov bh, bl
0312+  1898 33 03 00    	mov bl, [d + 3]
0313+  189B 07 4B 17    	call atoi				; convert to int in AL
0314+  189E E5          	pop b
0315+  189F 09          	ret
0316+  18A0             
0317+  18A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  18A0             ; strtoint
0319+  18A0             ; 5 digit base10 string number in d
0320+  18A0             ; integer returned in A
0321+  18A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  18A0             strtoint:
0323+  18A0 E2          	push si
0324+  18A1 D8          	push b
0325+  18A2 D9          	push c
0326+  18A3 DA          	push d
0327+  18A4 07 CB 16    	call strlen			; get string length in C
0328+  18A7 7E          	dec c
0329+  18A8 FD 4E       	mov si, d
0330+  18AA 12          	mov a, c
0331+  18AB FD 99       	shl a
0332+  18AD 3B 33 17    	mov d, table_power
0333+  18B0 59          	add d, a
0334+  18B1 38 00 00    	mov c, 0
0335+  18B4             strtoint_L0:
0336+  18B4 F6          	lodsb			; load ASCII to al
0337+  18B5 B9 00       	cmp al, 0
0338+  18B7 C6 CA 18    	je strtoint_end
0339+  18BA 6F 30       	sub al, $30		; make into integer
0340+  18BC 22 00       	mov ah, 0
0341+  18BE 2A          	mov b, [d]
0342+  18BF AC          	mul a, b			; result in B since it fits in 16bits
0343+  18C0 11          	mov a, b
0344+  18C1 28          	mov b, c
0345+  18C2 54          	add a, b
0346+  18C3 39          	mov c, a
0347+  18C4 63 02 00    	sub d, 2
0348+  18C7 0A B4 18    	jmp strtoint_L0
0349+  18CA             strtoint_end:
0350+  18CA 12          	mov a, c
0351+  18CB E7          	pop d
0352+  18CC E6          	pop c
0353+  18CD E5          	pop b
0354+  18CE EF          	pop si
0355+  18CF 09          	ret
0356+  18D0             
0357+  18D0             
0358+  18D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  18D0             ; PRINT NULL TERMINATED STRING
0360+  18D0             ; pointer in D
0361+  18D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  18D0             puts:
0363+  18D0 D7          	push a
0364+  18D1 DA          	push d
0365+  18D2             puts_L1:
0366+  18D2 1E          	mov al, [d]
0367+  18D3 B9 00       	cmp al, 0
0368+  18D5 C6 E1 18    	jz puts_END
0369+  18D8 23          	mov ah, al
0370+  18D9 19 00       	mov al, 0
0371+  18DB 05 03       	syscall sys_io
0372+  18DD 79          	inc d
0373+  18DE 0A D2 18    	jmp puts_L1
0374+  18E1             puts_END:
0375+  18E1 E7          	pop d
0376+  18E2 E4          	pop a
0377+  18E3 09          	ret
0378+  18E4             
0379+  18E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  18E4             ; PRINT N SIZE STRING
0381+  18E4             ; pointer in D
0382+  18E4             ; size in C
0383+  18E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  18E4             putsn:
0385+  18E4 DB          	push al
0386+  18E5 DA          	push d
0387+  18E6 D9          	push c
0388+  18E7             putsn_L0:
0389+  18E7 1E          	mov al, [d]
0390+  18E8 23          	mov ah, al
0391+  18E9 19 00       	mov al, 0
0392+  18EB 05 03       	syscall sys_io
0393+  18ED 79          	inc d
0394+  18EE 7E          	dec c	
0395+  18EF C2 00 00    	cmp c, 0
0396+  18F2 C7 E7 18    	jne putsn_L0
0397+  18F5             putsn_end:
0398+  18F5 E6          	pop c
0399+  18F6 E7          	pop d
0400+  18F7 E8          	pop al
0401+  18F8 09          	ret
0402+  18F9             
0403+  18F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  18F9             ; print 16bit decimal number
0405+  18F9             ; input number in A
0406+  18F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  18F9             print_u16d:
0408+  18F9 D7          	push a
0409+  18FA D8          	push b
0410+  18FB 26 10 27    	mov b, 10000
0411+  18FE AE          	div a, b			; get 10000 coeff.
0412+  18FF 07 25 19    	call print_number
0413+  1902 11          	mov a, b
0414+  1903 26 E8 03    	mov b, 1000
0415+  1906 AE          	div a, b			; get 10000 coeff.
0416+  1907 07 25 19    	call print_number
0417+  190A 11          	mov a, b
0418+  190B 26 64 00    	mov b, 100
0419+  190E AE          	div a, b
0420+  190F 07 25 19    	call print_number
0421+  1912 11          	mov a, b
0422+  1913 26 0A 00    	mov b, 10
0423+  1916 AE          	div a, b
0424+  1917 07 25 19    	call print_number
0425+  191A 11          	mov a, b
0426+  191B 6A 30       	add al, $30
0427+  191D 23          	mov ah, al
0428+  191E 19 00       	mov al, 0
0429+  1920 05 03       	syscall sys_io	; print coeff
0430+  1922 E5          	pop b
0431+  1923 E4          	pop a
0432+  1924 09          	ret
0433+  1925             
0434+  1925             
0435+  1925             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  1925             ; if A == 0, print space
0437+  1925             ; else print A
0438+  1925             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  1925             print_number:
0440+  1925 6A 30       	add al, $30
0441+  1927 23          	mov ah, al
0442+  1928 07 96 17    	call putchar
0443+  192B 09          	ret
0444+  192C             
0445+  192C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  192C             ; PRINT 16BIT HEX INTEGER
0447+  192C             ; integer value in reg B
0448+  192C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  192C             print_u16x:
0450+  192C D7          	push a
0451+  192D D8          	push b
0452+  192E DD          	push bl
0453+  192F 30          	mov bl, bh
0454+  1930 07 5D 17    	call itoa				; convert bh to char in A
0455+  1933 2F          	mov bl, al				; save al
0456+  1934 19 00       	mov al, 0
0457+  1936 05 03       	syscall sys_io				; display AH
0458+  1938 24          	mov ah, bl				; retrieve al
0459+  1939 19 00       	mov al, 0
0460+  193B 05 03       	syscall sys_io				; display AL
0461+  193D             
0462+  193D EA          	pop bl
0463+  193E 07 5D 17    	call itoa				; convert bh to char in A
0464+  1941 2F          	mov bl, al				; save al
0465+  1942 19 00       	mov al, 0
0466+  1944 05 03       	syscall sys_io				; display AH
0467+  1946 24          	mov ah, bl				; retrieve al
0468+  1947 19 00       	mov al, 0
0469+  1949 05 03       	syscall sys_io				; display AL
0470+  194B             
0471+  194B E5          	pop b
0472+  194C E4          	pop a
0473+  194D 09          	ret
0474+  194E             
0475+  194E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  194E             ; INPUT 16BIT HEX INTEGER
0477+  194E             ; read 16bit integer into A
0478+  194E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  194E             scan_u16x:
0480+  194E F8 10 00    	enter 16
0481+  1951 D8          	push b
0482+  1952 DA          	push d
0483+  1953             
0484+  1953 FA F1 FF    	lea d, [bp + -15]
0485+  1956 07 9D 17    	call gets				; get number
0486+  1959             
0487+  1959 32          	mov bl, [d]
0488+  195A 37          	mov bh, bl
0489+  195B 33 01 00    	mov bl, [d + 1]
0490+  195E 07 4B 17    	call atoi				; convert to int in AL
0491+  1961 23          	mov ah, al				; move to AH
0492+  1962             
0493+  1962 33 02 00    	mov bl, [d + 2]
0494+  1965 37          	mov bh, bl
0495+  1966 33 03 00    	mov bl, [d + 3]
0496+  1969 07 4B 17    	call atoi				; convert to int in AL
0497+  196C             
0498+  196C E7          	pop d
0499+  196D E5          	pop b
0500+  196E F9          	leave
0501+  196F 09          	ret
0502+  1970             
0503+  1970             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  1970             ; PRINT 8bit HEX INTEGER
0505+  1970             ; integer value in reg bl
0506+  1970             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  1970             print_u8x:
0508+  1970 D7          	push a
0509+  1971 DD          	push bl
0510+  1972             
0511+  1972 07 5D 17    	call itoa				; convert bl to char in A
0512+  1975 2F          	mov bl, al				; save al
0513+  1976 19 00       	mov al, 0
0514+  1978 05 03       	syscall sys_io				; display AH
0515+  197A 24          	mov ah, bl				; retrieve al
0516+  197B 19 00       	mov al, 0
0517+  197D 05 03       	syscall sys_io				; display AL
0518+  197F             
0519+  197F EA          	pop bl
0520+  1980 E4          	pop a
0521+  1981 09          	ret
0522+  1982             
0523+  1982             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  1982             ; print 8bit decimal unsigned number
0525+  1982             ; input number in AL
0526+  1982             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  1982             print_u8d:
0528+  1982 D7          	push a
0529+  1983 D8          	push b
0530+  1984             
0531+  1984 22 00       	mov ah, 0
0532+  1986 26 64 00    	mov b, 100
0533+  1989 AE          	div a, b
0534+  198A D8          	push b			; save remainder
0535+  198B B9 00       	cmp al, 0
0536+  198D C6 97 19    	je skip100
0537+  1990 6A 30       	add al, $30
0538+  1992 23          	mov ah, al
0539+  1993 19 00       	mov al, 0
0540+  1995 05 03       	syscall sys_io	; print coeff
0541+  1997             skip100:
0542+  1997 E4          	pop a
0543+  1998 22 00       	mov ah, 0
0544+  199A 26 0A 00    	mov b, 10
0545+  199D AE          	div a, b
0546+  199E D8          	push b			; save remainder
0547+  199F B9 00       	cmp al, 0
0548+  19A1 C6 AB 19    	je skip10
0549+  19A4 6A 30       	add al, $30
0550+  19A6 23          	mov ah, al
0551+  19A7 19 00       	mov al, 0
0552+  19A9 05 03       	syscall sys_io	; print coeff
0553+  19AB             skip10:
0554+  19AB E4          	pop a
0555+  19AC 1B          	mov al, bl
0556+  19AD 6A 30       	add al, $30
0557+  19AF 23          	mov ah, al
0558+  19B0 19 00       	mov al, 0
0559+  19B2 05 03       	syscall sys_io	; print coeff
0560+  19B4 E5          	pop b
0561+  19B5 E4          	pop a
0562+  19B6 09          	ret
0563+  19B7             
0564+  19B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  19B7             ; INPUT 8BIT HEX INTEGER
0566+  19B7             ; read 8bit integer into AL
0567+  19B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  19B7             scan_u8x:
0569+  19B7 F8 04 00    	enter 4
0570+  19BA D8          	push b
0571+  19BB DA          	push d
0572+  19BC             
0573+  19BC FA FD FF    	lea d, [bp + -3]
0574+  19BF 07 9D 17    	call gets				; get number
0575+  19C2             
0576+  19C2 32          	mov bl, [d]
0577+  19C3 37          	mov bh, bl
0578+  19C4 33 01 00    	mov bl, [d + 1]
0579+  19C7 07 4B 17    	call atoi				; convert to int in AL
0580+  19CA             
0581+  19CA E7          	pop d
0582+  19CB E5          	pop b
0583+  19CC F9          	leave
0584+  19CD 09          	ret
0585+  19CE             
0586+  19CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  19CE             ; input decimal number
0588+  19CE             ; result in A
0589+  19CE             ; 655'\0'
0590+  19CE             ; low--------high
0591+  19CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  19CE             scan_u16d:
0593+  19CE F8 08 00    	enter 8
0594+  19D1 E2          	push si
0595+  19D2 D8          	push b
0596+  19D3 D9          	push c
0597+  19D4 DA          	push d
0598+  19D5 FA F9 FF    	lea d, [bp +- 7]
0599+  19D8 07 9D 17    	call gets
0600+  19DB 07 CB 16    	call strlen			; get string length in C
0601+  19DE 7E          	dec c
0602+  19DF FD 4E       	mov si, d
0603+  19E1 12          	mov a, c
0604+  19E2 FD 99       	shl a
0605+  19E4 3B 33 17    	mov d, table_power
0606+  19E7 59          	add d, a
0607+  19E8 38 00 00    	mov c, 0
0608+  19EB             mul_loop:
0609+  19EB F6          	lodsb			; load ASCII to al
0610+  19EC B9 00       	cmp al, 0
0611+  19EE C6 01 1A    	je mul_exit
0612+  19F1 6F 30       	sub al, $30		; make into integer
0613+  19F3 22 00       	mov ah, 0
0614+  19F5 2A          	mov b, [d]
0615+  19F6 AC          	mul a, b			; result in B since it fits in 16bits
0616+  19F7 11          	mov a, b
0617+  19F8 28          	mov b, c
0618+  19F9 54          	add a, b
0619+  19FA 39          	mov c, a
0620+  19FB 63 02 00    	sub d, 2
0621+  19FE 0A EB 19    	jmp mul_loop
0622+  1A01             mul_exit:
0623+  1A01 12          	mov a, c
0624+  1A02 E7          	pop d
0625+  1A03 E6          	pop c
0626+  1A04 E5          	pop b
0627+  1A05 EF          	pop si
0628+  1A06 F9          	leave
0629+  1A07 09          	ret
1056   1A08             ; --- END INCLUDE BLOCK
1057   1A08             
1058   1A08             
1059   1A08             .end
tasm: Number of errors = 0
