0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0400             .org PROC_TEXT_ORG
0004   0400             
0005   0400             ; --- BEGIN TEXT BLOCK
0006   0400             
0007   0400             main:
0008   0400 D2            push bp
0009   0401 9B            mov bp, sp
0010   0402 52 02 00      sub sp, 2 ; i1
0011   0405 52 02 00      sub sp, 2 ; i2
0012   0408 52 02 00      sub sp, 2 ; i3
0013   040B 52 02 00      sub sp, 2 ; i4
0014   040E 26 01 00      mov b, 1
0015   0411 D7            push a
0016   0412 11            mov a, b
0017   0413 45 FF FF      mov [bp + -1], a ; i1
0018   0416 E4            pop a
0019   0417 26 01 00      mov b, 1
0020   041A D7            push a
0021   041B 11            mov a, b
0022   041C 45 FD FF      mov [bp + -3], a ; i2
0023   041F E4            pop a
0024   0420 26 01 00      mov b, 1
0025   0423 D7            push a
0026   0424 11            mov a, b
0027   0425 45 FB FF      mov [bp + -5], a ; i3
0028   0428 E4            pop a
0029   0429 26 01 00      mov b, 1
0030   042C D7            push a
0031   042D 11            mov a, b
0032   042E 45 F9 FF      mov [bp + -7], a ; i4
0033   0431 E4            pop a
0034   0432 2C FF FF      mov b, [bp + -1] ; i1
0035   0435 FD 7D         dec b
0036   0437 D7            push a
0037   0438 11            mov a, b
0038   0439 45 FF FF      mov [bp + -1], a ; i1
0039   043C E4            pop a
0040   043D FD AB         swp b
0041   043F D8            push b
0042   0440 07 31 05      call printn
0043   0443 51 02 00      add sp, 2
0044   0446 26 72 05      mov b, _string_0 ; "\n"
0045   0449 FD AB         swp b
0046   044B D8            push b
0047   044C 07 3B 05      call print
0048   044F 51 02 00      add sp, 2
0049   0452 2C FF FF      mov b, [bp + -1] ; i1
0050   0455 FD AB         swp b
0051   0457 D8            push b
0052   0458 07 31 05      call printn
0053   045B 51 02 00      add sp, 2
0054   045E 26 72 05      mov b, _string_0 ; "\n"
0055   0461 FD AB         swp b
0056   0463 D8            push b
0057   0464 07 3B 05      call print
0058   0467 51 02 00      add sp, 2
0059   046A 2C FD FF      mov b, [bp + -3] ; i2
0060   046D FD 77         inc b
0061   046F D7            push a
0062   0470 11            mov a, b
0063   0471 45 FD FF      mov [bp + -3], a ; i2
0064   0474 E4            pop a
0065   0475 FD AB         swp b
0066   0477 D8            push b
0067   0478 07 31 05      call printn
0068   047B 51 02 00      add sp, 2
0069   047E 26 72 05      mov b, _string_0 ; "\n"
0070   0481 FD AB         swp b
0071   0483 D8            push b
0072   0484 07 3B 05      call print
0073   0487 51 02 00      add sp, 2
0074   048A 2C FD FF      mov b, [bp + -3] ; i2
0075   048D FD AB         swp b
0076   048F D8            push b
0077   0490 07 31 05      call printn
0078   0493 51 02 00      add sp, 2
0079   0496 26 72 05      mov b, _string_0 ; "\n"
0080   0499 FD AB         swp b
0081   049B D8            push b
0082   049C 07 3B 05      call print
0083   049F 51 02 00      add sp, 2
0084   04A2 2C FB FF      mov b, [bp + -5] ; i3
0085   04A5 11            mov a, b
0086   04A6 FD 7D         dec b
0087   04A8 D7            push a
0088   04A9 11            mov a, b
0089   04AA 45 FB FF      mov [bp + -5], a ; i3
0090   04AD E4            pop a
0091   04AE 27            mov b, a
0092   04AF FD AB         swp b
0093   04B1 D8            push b
0094   04B2 07 31 05      call printn
0095   04B5 51 02 00      add sp, 2
0096   04B8 26 72 05      mov b, _string_0 ; "\n"
0097   04BB FD AB         swp b
0098   04BD D8            push b
0099   04BE 07 3B 05      call print
0100   04C1 51 02 00      add sp, 2
0101   04C4 2C FB FF      mov b, [bp + -5] ; i3
0102   04C7 FD AB         swp b
0103   04C9 D8            push b
0104   04CA 07 31 05      call printn
0105   04CD 51 02 00      add sp, 2
0106   04D0 26 72 05      mov b, _string_0 ; "\n"
0107   04D3 FD AB         swp b
0108   04D5 D8            push b
0109   04D6 07 3B 05      call print
0110   04D9 51 02 00      add sp, 2
0111   04DC 2C F9 FF      mov b, [bp + -7] ; i4
0112   04DF 11            mov a, b
0113   04E0 FD 77         inc b
0114   04E2 D7            push a
0115   04E3 11            mov a, b
0116   04E4 45 F9 FF      mov [bp + -7], a ; i4
0117   04E7 E4            pop a
0118   04E8 27            mov b, a
0119   04E9 FD AB         swp b
0120   04EB D8            push b
0121   04EC 07 31 05      call printn
0122   04EF 51 02 00      add sp, 2
0123   04F2 26 72 05      mov b, _string_0 ; "\n"
0124   04F5 FD AB         swp b
0125   04F7 D8            push b
0126   04F8 07 3B 05      call print
0127   04FB 51 02 00      add sp, 2
0128   04FE 2C F9 FF      mov b, [bp + -7] ; i4
0129   0501 FD AB         swp b
0130   0503 D8            push b
0131   0504 07 31 05      call printn
0132   0507 51 02 00      add sp, 2
0133   050A 26 72 05      mov b, _string_0 ; "\n"
0134   050D FD AB         swp b
0135   050F D8            push b
0136   0510 07 3B 05      call print
0137   0513 51 02 00      add sp, 2
0138   0516 F9            leave
0139   0517 05 0B         syscall sys_terminate_proc
0140   0519             
0141   0519             scann:
0142   0519 D2            push bp
0143   051A 9B            mov bp, sp
0144   051B 52 02 00      sub sp, 2 ; m
0145   051E             
0146   051E             ; --- BEGIN INLINE ASM BLOCK
0147   051E 07 BE 08      call scan_u16d
0148   0521 45 FF FF      mov [bp + -1], a
0149   0524             ; --- END INLINE ASM BLOCK
0150   0524             
0151   0524 FA 05 00      lea d, [bp + 5] ; n
0152   0527 2A            mov b, [d]
0153   0528 D8            push b
0154   0529 2C FF FF      mov b, [bp + -1] ; m
0155   052C E7            pop d
0156   052D 11            mov a, b
0157   052E 43            mov [d], a
0158   052F F9            leave
0159   0530 09            ret
0160   0531             
0161   0531             printn:
0162   0531 D2            push bp
0163   0532 9B            mov bp, sp
0164   0533             
0165   0533             ; --- BEGIN INLINE ASM BLOCK
0166   0533 17 05 00      mov a, [bp + 5]
0167   0536 07 E9 07      call print_u16d
0168   0539             ; --- END INLINE ASM BLOCK
0169   0539             
0170   0539 F9            leave
0171   053A 09            ret
0172   053B             
0173   053B             print:
0174   053B D2            push bp
0175   053C 9B            mov bp, sp
0176   053D             
0177   053D             ; --- BEGIN INLINE ASM BLOCK
0178   053D 17 05 00      mov a, [bp + 5]
0179   0540 3C            mov d, a
0180   0541 07 C0 07      call puts
0181   0544             ; --- END INLINE ASM BLOCK
0182   0544             
0183   0544 F9            leave
0184   0545 09            ret
0185   0546             ; --- END TEXT BLOCK
0186   0546             
0187   0546             ; --- BEGIN DATA BLOCK
0188   0546             m1_data: 
0189   0546 7B 00 6F 00 .dw 123,111,123,
0189   054A 7B 00 
0190   054C 00 00 00 00 .fill 14, 0
0190   0550 00 00 00 00 
0190   0554 00 00 00 00 
0190   0558 00 00 
0191   055A 46 05       m1: .dw m1_data
0192   055C             m2_data: 
0193   055C 00 00 01 00 .dw 0,1,2,
0193   0560 02 00 
0194   0562 00 00 00 00 .fill 14, 0
0194   0566 00 00 00 00 
0194   056A 00 00 00 00 
0194   056E 00 00 
0195   0570 5C 05       m2: .dw m2_data
0196   0572 0A 00       _string_0: .db "\n", 0
0197   0574             ; --- END DATA BLOCK
0198   0574             
0199   0574             ; --- BEGIN INCLUDE BLOCK
0200   0574             .include "lib/stdio.asm"
0001+  0574             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0574             ; stdio.s
0003+  0574             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0574             .include "lib/string.asm"
0001++ 0574             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0574             ; string.s
0003++ 0574             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0574             
0005++ 0574             
0006++ 0574             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0574             ; strrev
0008++ 0574             ; reverse a string
0009++ 0574             ; D = string address
0010++ 0574             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0574             ; 01234
0012++ 0574             strrev:
0013++ 0574 4B          	pusha
0014++ 0575 07 BB 05    	call strlen	; length in C
0015++ 0578 12          	mov a, c
0016++ 0579 AF 01 00    	cmp a, 1
0017++ 057C D0 96 05    	jleu strrev_end	; check string length. string len must be > 1
0018++ 057F 7D          	dec a
0019++ 0580 FD 4E       	mov si, d	; beginning of string
0020++ 0582 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0584 59          	add d, a	; end of string
0022++ 0585 12          	mov a, c
0023++ 0586 FD 9B       	shr a		; divide by 2
0024++ 0588 39          	mov c, a	; C now counts the steps
0025++ 0589             strrev_L0:
0026++ 0589 32          	mov bl, [d]	; save load right-side char into BL
0027++ 058A F6          	lodsb		; load left-side char into AL; increase SI
0028++ 058B 3E          	mov [d], al	; store left char into right side
0029++ 058C 1B          	mov al, bl
0030++ 058D F7          	stosb		; store right-side char into left-side; increase DI
0031++ 058E 7E          	dec c
0032++ 058F 7F          	dec d
0033++ 0590 C2 00 00    	cmp c, 0
0034++ 0593 C7 89 05    	jne strrev_L0
0035++ 0596             strrev_end:
0036++ 0596 4C          	popa
0037++ 0597 09          	ret
0038++ 0598             	
0039++ 0598             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0598             ; strchr
0041++ 0598             ; search string in D for char in AL
0042++ 0598             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0598             strchr:
0044++ 0598             strchr_L0:
0045++ 0598 32          	mov bl, [d]
0046++ 0599 C1 00       	cmp bl, 0
0047++ 059B C6 A6 05    	je strchr_end
0048++ 059E BA          	cmp al, bl
0049++ 059F C6 A6 05    	je strchr_end
0050++ 05A2 79          	inc d
0051++ 05A3 0A 98 05    	jmp strchr_L0
0052++ 05A6             strchr_end:
0053++ 05A6 1B          	mov al, bl
0054++ 05A7 09          	ret
0055++ 05A8             
0056++ 05A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 05A8             ; strstr
0058++ 05A8             ; find sub-string
0059++ 05A8             ; str1 in SI
0060++ 05A8             ; str2 in DI
0061++ 05A8             ; SI points to end of source string
0062++ 05A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 05A8             strstr:
0064++ 05A8 DB          	push al
0065++ 05A9 DA          	push d
0066++ 05AA E3          	push di
0067++ 05AB             strstr_loop:
0068++ 05AB F3          	cmpsb					; compare a byte of the strings
0069++ 05AC C7 B7 05    	jne strstr_ret
0070++ 05AF FC 00 00    	lea d, [di + 0]
0071++ 05B2 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 05B4 C7 AB 05    	jne strstr_loop				; equal chars but not at end
0073++ 05B7             strstr_ret:
0074++ 05B7 F0          	pop di
0075++ 05B8 E7          	pop d
0076++ 05B9 E8          	pop al
0077++ 05BA 09          	ret
0078++ 05BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 05BB             ; length of null terminated string
0080++ 05BB             ; result in C
0081++ 05BB             ; pointer in D
0082++ 05BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 05BB             strlen:
0084++ 05BB DA          	push d
0085++ 05BC 38 00 00    	mov c, 0
0086++ 05BF             strlen_L1:
0087++ 05BF BD 00       	cmp byte [d], 0
0088++ 05C1 C6 C9 05    	je strlen_ret
0089++ 05C4 79          	inc d
0090++ 05C5 78          	inc c
0091++ 05C6 0A BF 05    	jmp strlen_L1
0092++ 05C9             strlen_ret:
0093++ 05C9 E7          	pop d
0094++ 05CA 09          	ret
0095++ 05CB             
0096++ 05CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 05CB             ; STRCMP
0098++ 05CB             ; compare two strings
0099++ 05CB             ; str1 in SI
0100++ 05CB             ; str2 in DI
0101++ 05CB             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 05CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 05CB             strcmp:
0104++ 05CB DB          	push al
0105++ 05CC DA          	push d
0106++ 05CD E3          	push di
0107++ 05CE E2          	push si
0108++ 05CF             strcmp_loop:
0109++ 05CF F3          	cmpsb					; compare a byte of the strings
0110++ 05D0 C7 DB 05    	jne strcmp_ret
0111++ 05D3 FB FF FF    	lea d, [si +- 1]
0112++ 05D6 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 05D8 C7 CF 05    	jne strcmp_loop				; equal chars but not at end
0114++ 05DB             strcmp_ret:
0115++ 05DB EF          	pop si
0116++ 05DC F0          	pop di
0117++ 05DD E7          	pop d
0118++ 05DE E8          	pop al
0119++ 05DF 09          	ret
0120++ 05E0             
0121++ 05E0             
0122++ 05E0             ; STRCPY
0123++ 05E0             ; copy null terminated string from SI to DI
0124++ 05E0             ; source in SI
0125++ 05E0             ; destination in DI
0126++ 05E0             strcpy:
0127++ 05E0 E2          	push si
0128++ 05E1 E3          	push di
0129++ 05E2 DB          	push al
0130++ 05E3             strcpy_L1:
0131++ 05E3 F6          	lodsb
0132++ 05E4 F7          	stosb
0133++ 05E5 B9 00       	cmp al, 0
0134++ 05E7 C7 E3 05    	jne strcpy_L1
0135++ 05EA             strcpy_end:
0136++ 05EA E8          	pop al
0137++ 05EB F0          	pop di
0138++ 05EC EF          	pop si
0139++ 05ED 09          	ret
0140++ 05EE             
0141++ 05EE             ; STRCAT
0142++ 05EE             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 05EE             ; source in SI
0144++ 05EE             ; destination in DI
0145++ 05EE             strcat:
0146++ 05EE E2          	push si
0147++ 05EF E3          	push di
0148++ 05F0 D7          	push a
0149++ 05F1 DA          	push d
0150++ 05F2 50          	mov a, di
0151++ 05F3 3C          	mov d, a
0152++ 05F4             strcat_goto_end_L1:
0153++ 05F4 BD 00       	cmp byte[d], 0
0154++ 05F6 C6 FD 05    	je strcat_start
0155++ 05F9 79          	inc d
0156++ 05FA 0A F4 05    	jmp strcat_goto_end_L1
0157++ 05FD             strcat_start:
0158++ 05FD FD 50       	mov di, d
0159++ 05FF             strcat_L1:
0160++ 05FF F6          	lodsb
0161++ 0600 F7          	stosb
0162++ 0601 B9 00       	cmp al, 0
0163++ 0603 C7 FF 05    	jne strcat_L1
0164++ 0606             strcat_end:
0165++ 0606 E7          	pop d
0166++ 0607 E4          	pop a
0167++ 0608 F0          	pop di
0168++ 0609 EF          	pop si
0169++ 060A 09          	ret
0005+  060B             
0006+  060B 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  060F 34 35 36 37 
0006+  0613 38 39 41 42 
0006+  0617 43 44 45 46 
0007+  061B 1B 5B 32 4A s_telnet_clear:	.db 27, "[2J", 27, "[H", 0
0007+  061F 1B 5B 48 00 
0008+  0623             
0009+  0623 01 00       table_power:.dw 1
0010+  0625 0A 00       			.dw 10
0011+  0627 64 00       			.dw 100
0012+  0629 E8 03       			.dw 1000
0013+  062B 10 27       			.dw 10000
0014+  062D             
0015+  062D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016+  062D             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0017+  062D             ; ASCII in BL
0018+  062D             ; result in AL
0019+  062D             ; ascii for F = 0100 0110
0020+  062D             ; ascii for 9 = 0011 1001
0021+  062D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0022+  062D             hex_ascii_encode:
0023+  062D 1B          	mov al, bl
0024+  062E 93 40       	test al, $40				; test if letter or number
0025+  0630 C7 36 06    	jnz hex_letter
0026+  0633 87 0F       	and al, $0F				; get number
0027+  0635 09          	ret
0028+  0636             hex_letter:
0029+  0636 87 0F       	and al, $0F				; get letter
0030+  0638 6A 09       	add al, 9
0031+  063A 09          	ret
0032+  063B             
0033+  063B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0034+  063B             ; ATOI
0035+  063B             ; 2 letter hex string in B
0036+  063B             ; 8bit integer returned in AL
0037+  063B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  063B             atoi:
0039+  063B D8          	push b
0040+  063C 07 2D 06    	call hex_ascii_encode			; convert BL to 4bit code in AL
0041+  063F 30          	mov bl, bh
0042+  0640 DB          	push al					; save a
0043+  0641 07 2D 06    	call hex_ascii_encode
0044+  0644 EA          	pop bl	
0045+  0645 FD 9E 04    	shl al, 4
0046+  0648 8C          	or al, bl
0047+  0649 E5          	pop b
0048+  064A 09          	ret	
0049+  064B             
0050+  064B             
0051+  064B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0052+  064B             ; printf
0053+  064B             ; no need for explanations!
0054+  064B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  064B             printf:
0056+  064B 09          	ret
0057+  064C             
0058+  064C             
0059+  064C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0060+  064C             ; scanf
0061+  064C             ; no need for explanations!
0062+  064C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  064C             scanf:
0064+  064C 09          	ret
0065+  064D             
0066+  064D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067+  064D             ; ITOA
0068+  064D             ; 8bit value in BL
0069+  064D             ; 2 byte ASCII result in A
0070+  064D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0071+  064D             itoa:
0072+  064D DA          	push d
0073+  064E D8          	push b
0074+  064F A7 00       	mov bh, 0
0075+  0651 FD A4 04    	shr bl, 4	
0076+  0654 74          	mov d, b
0077+  0655 1F 0B 06    	mov al, [d + s_hex_digits]
0078+  0658 23          	mov ah, al
0079+  0659             	
0080+  0659 E5          	pop b
0081+  065A D8          	push b
0082+  065B A7 00       	mov bh, 0
0083+  065D FD 87 0F    	and bl, $0F
0084+  0660 74          	mov d, b
0085+  0661 1F 0B 06    	mov al, [d + s_hex_digits]
0086+  0664 E5          	pop b
0087+  0665 E7          	pop d
0088+  0666 09          	ret
0089+  0667             
0090+  0667             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0091+  0667             ; HEX STRING TO BINARY
0092+  0667             ; di = destination address
0093+  0667             ; si = source
0094+  0667             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0095+  0667             hex_to_int:
0096+  0667             hex_to_int_L1:
0097+  0667 F6          	lodsb					; load from [SI] to AL
0098+  0668 B9 00       	cmp al, 0				; check if ASCII 0
0099+  066A C6 77 06    	jz hex_to_int_ret
0100+  066D 36          	mov bh, al
0101+  066E F6          	lodsb
0102+  066F 2F          	mov bl, al
0103+  0670 07 3B 06    	call atoi				; convert ASCII byte in B to int (to AL)
0104+  0673 F7          	stosb					; store AL to [DI]
0105+  0674 0A 67 06    	jmp hex_to_int_L1
0106+  0677             hex_to_int_ret:
0107+  0677 09          	ret		
0108+  0678             
0109+  0678             
0110+  0678             
0111+  0678             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112+  0678             ; GETCHAR
0113+  0678             ; char in ah
0114+  0678             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0115+  0678             getchar:
0116+  0678 DB          	push al
0117+  0679             getchar_retry:
0118+  0679 FD 0C       	sti
0119+  067B 19 01       	mov al, 1
0120+  067D 05 03       	syscall sys_io			; receive in AH
0121+  067F B9 00       	cmp al, 0			; check if any char was receive
0122+  0681 C6 79 06    	je getchar_retry
0123+  0684 E8          	pop al
0124+  0685 09          	ret
0125+  0686             
0126+  0686             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0686             ; PUTCHAR
0128+  0686             ; char in ah
0129+  0686             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0686             putchar:
0131+  0686 D7          	push a
0132+  0687 19 00       	mov al, 0
0133+  0689 05 03       	syscall sys_io			; char in AH
0134+  068B E4          	pop a
0135+  068C 09          	ret
0136+  068D             
0137+  068D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0138+  068D             ;; INPUT A STRING
0139+  068D             ;; terminates with null
0140+  068D             ;; pointer in D
0141+  068D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0142+  068D             gets:
0143+  068D D7          	push a
0144+  068E DA          	push d
0145+  068F             gets_loop:
0146+  068F FD 0C       	sti
0147+  0691 19 01       	mov al, 1
0148+  0693 05 03       	syscall sys_io			; receive in AH
0149+  0695 B9 00       	cmp al, 0				; check error code (AL)
0150+  0697 C6 8F 06    	je gets_loop			; if no char received, retry
0151+  069A             
0152+  069A 76 1B       	cmp ah, 27
0153+  069C C6 BD 06    	je gets_telnet_escape
0154+  069F 76 0A       	cmp ah, $0A				; LF
0155+  06A1 C6 16 07    	je gets_end
0156+  06A4 76 0D       	cmp ah, $0D				; CR
0157+  06A6 C6 16 07    	je gets_end
0158+  06A9 76 5C       	cmp ah, $5C				; '\\'
0159+  06AB C6 ED 06    	je gets_escape
0160+  06AE             	
0161+  06AE 76 08       	cmp ah, $08			; check for backspace
0162+  06B0 C6 B9 06    	je gets_backspace
0163+  06B3             
0164+  06B3 1A          	mov al, ah
0165+  06B4 3E          	mov [d], al
0166+  06B5 79          	inc d
0167+  06B6 0A 8F 06    	jmp gets_loop
0168+  06B9             gets_backspace:
0169+  06B9 7F          	dec d
0170+  06BA 0A 8F 06    	jmp gets_loop
0171+  06BD             gets_telnet_escape:
0172+  06BD FD 0C       	sti
0173+  06BF 19 01       	mov al, 1
0174+  06C1 05 03       	syscall sys_io				; receive in AH without echo
0175+  06C3 B9 00       	cmp al, 0					; check error code (AL)
0176+  06C5 C6 BD 06    	je gets_telnet_escape		; if no char received, retry
0177+  06C8 76 5B       	cmp ah, '['
0178+  06CA C7 8F 06    	jne gets_loop
0179+  06CD             gets_telnet_escape_phase2:
0180+  06CD FD 0C       	sti
0181+  06CF 19 01       	mov al, 1
0182+  06D1 05 03       	syscall sys_io					; receive in AH without echo
0183+  06D3 B9 00       	cmp al, 0						; check error code (AL)
0184+  06D5 C6 CD 06    	je gets_telnet_escape_phase2	; if no char received, retry
0185+  06D8 76 44       	cmp ah, 'D'
0186+  06DA C6 E5 06    	je gets_left_arrow
0187+  06DD 76 43       	cmp ah, 'C'
0188+  06DF C6 E9 06    	je gets_right_arrow
0189+  06E2 0A 8F 06    	jmp gets_loop
0190+  06E5             gets_left_arrow:
0191+  06E5 7F          	dec d
0192+  06E6 0A 8F 06    	jmp gets_loop
0193+  06E9             gets_right_arrow:
0194+  06E9 79          	inc d
0195+  06EA 0A 8F 06    	jmp gets_loop
0196+  06ED             gets_escape:
0197+  06ED FD 0C       	sti
0198+  06EF 19 01       	mov al, 1
0199+  06F1 05 03       	syscall sys_io			; receive in AH
0200+  06F3 B9 00       	cmp al, 0				; check error code (AL)
0201+  06F5 C6 ED 06    	je gets_escape			; if no char received, retry
0202+  06F8 76 6E       	cmp ah, 'n'
0203+  06FA C6 08 07    	je gets_LF
0204+  06FD 76 72       	cmp ah, 'r'
0205+  06FF C6 0F 07    	je gets_CR
0206+  0702 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0207+  0703 3E          	mov [d], al
0208+  0704 79          	inc d
0209+  0705 0A 8F 06    	jmp gets_loop
0210+  0708             gets_LF:
0211+  0708 19 0A       	mov al, $0A
0212+  070A 3E          	mov [d], al
0213+  070B 79          	inc d
0214+  070C 0A 8F 06    	jmp gets_loop
0215+  070F             gets_CR:
0216+  070F 19 0D       	mov al, $0D
0217+  0711 3E          	mov [d], al
0218+  0712 79          	inc d
0219+  0713 0A 8F 06    	jmp gets_loop
0220+  0716             gets_end:
0221+  0716 19 00       	mov al, 0
0222+  0718 3E          	mov [d], al				; terminate string
0223+  0719 E7          	pop d
0224+  071A E4          	pop a
0225+  071B 09          	ret
0226+  071C             
0227+  071C             
0228+  071C             
0229+  071C             
0230+  071C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0231+  071C             ;; INPUT TEXT
0232+  071C             ;; terminated with CTRL+D
0233+  071C             ;; pointer in D
0234+  071C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0235+  071C             gettxt:
0236+  071C D7          	push a
0237+  071D DA          	push d
0238+  071E             gettxt_loop:
0239+  071E 19 01       	mov al, 1
0240+  0720 05 03       	syscall sys_io			; receive in AH
0241+  0722 B9 00       	cmp al, 0				; check error code (AL)
0242+  0724 C6 1E 07    	je gettxt_loop		; if no char received, retry
0243+  0727 76 04       	cmp ah, 4			; EOT
0244+  0729 C6 67 07    	je gettxt_end
0245+  072C 76 08       	cmp ah, $08			; check for backspace
0246+  072E C6 63 07    	je gettxt_backspace
0247+  0731 76 5C       	cmp ah, $5C				; '\\'
0248+  0733 C6 3C 07    	je gettxt_escape
0249+  0736 1A          	mov al, ah
0250+  0737 3E          	mov [d], al
0251+  0738 79          	inc d
0252+  0739 0A 1E 07    	jmp gettxt_loop
0253+  073C             gettxt_escape:
0254+  073C 19 01       	mov al, 1
0255+  073E 05 03       	syscall sys_io			; receive in AH
0256+  0740 B9 00       	cmp al, 0				; check error code (AL)
0257+  0742 C6 3C 07    	je gettxt_escape		; if no char received, retry
0258+  0745 76 6E       	cmp ah, 'n'
0259+  0747 C6 55 07    	je gettxt_LF
0260+  074A 76 72       	cmp ah, 'r'
0261+  074C C6 5C 07    	je gettxt_CR
0262+  074F 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0263+  0750 3E          	mov [d], al
0264+  0751 79          	inc d
0265+  0752 0A 1E 07    	jmp gettxt_loop
0266+  0755             gettxt_LF:
0267+  0755 19 0A       	mov al, $0A
0268+  0757 3E          	mov [d], al
0269+  0758 79          	inc d
0270+  0759 0A 1E 07    	jmp gettxt_loop
0271+  075C             gettxt_CR:
0272+  075C 19 0D       	mov al, $0D
0273+  075E 3E          	mov [d], al
0274+  075F 79          	inc d
0275+  0760 0A 1E 07    	jmp gettxt_loop
0276+  0763             gettxt_backspace:
0277+  0763 7F          	dec d
0278+  0764 0A 1E 07    	jmp gettxt_loop
0279+  0767             gettxt_end:
0280+  0767 19 00       	mov al, 0
0281+  0769 3E          	mov [d], al				; terminate string
0282+  076A E7          	pop d
0283+  076B E4          	pop a
0284+  076C 09          	ret
0285+  076D             
0286+  076D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0287+  076D             ; PRINT NEW LINE
0288+  076D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0289+  076D             printnl:
0290+  076D D7          	push a
0291+  076E 10 00 0A    	mov a, $0A00
0292+  0771 05 03       	syscall sys_io
0293+  0773 10 00 0D    	mov a, $0D00
0294+  0776 05 03       	syscall sys_io
0295+  0778 E4          	pop a
0296+  0779 09          	ret
0297+  077A             
0298+  077A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299+  077A             ; strtoint
0300+  077A             ; 4 digit hex string number in d
0301+  077A             ; integer returned in A
0302+  077A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0303+  077A             strtointx:
0304+  077A D8          	push b
0305+  077B 32          	mov bl, [d]
0306+  077C 37          	mov bh, bl
0307+  077D 33 01 00    	mov bl, [d + 1]
0308+  0780 07 3B 06    	call atoi				; convert to int in AL
0309+  0783 23          	mov ah, al				; move to AH
0310+  0784 33 02 00    	mov bl, [d + 2]
0311+  0787 37          	mov bh, bl
0312+  0788 33 03 00    	mov bl, [d + 3]
0313+  078B 07 3B 06    	call atoi				; convert to int in AL
0314+  078E E5          	pop b
0315+  078F 09          	ret
0316+  0790             
0317+  0790             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0318+  0790             ; strtoint
0319+  0790             ; 5 digit base10 string number in d
0320+  0790             ; integer returned in A
0321+  0790             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0322+  0790             strtoint:
0323+  0790 E2          	push si
0324+  0791 D8          	push b
0325+  0792 D9          	push c
0326+  0793 DA          	push d
0327+  0794 07 BB 05    	call strlen			; get string length in C
0328+  0797 7E          	dec c
0329+  0798 FD 4E       	mov si, d
0330+  079A 12          	mov a, c
0331+  079B FD 99       	shl a
0332+  079D 3B 23 06    	mov d, table_power
0333+  07A0 59          	add d, a
0334+  07A1 38 00 00    	mov c, 0
0335+  07A4             strtoint_L0:
0336+  07A4 F6          	lodsb			; load ASCII to al
0337+  07A5 B9 00       	cmp al, 0
0338+  07A7 C6 BA 07    	je strtoint_end
0339+  07AA 6F 30       	sub al, $30		; make into integer
0340+  07AC 22 00       	mov ah, 0
0341+  07AE 2A          	mov b, [d]
0342+  07AF AC          	mul a, b			; result in B since it fits in 16bits
0343+  07B0 11          	mov a, b
0344+  07B1 28          	mov b, c
0345+  07B2 54          	add a, b
0346+  07B3 39          	mov c, a
0347+  07B4 63 02 00    	sub d, 2
0348+  07B7 0A A4 07    	jmp strtoint_L0
0349+  07BA             strtoint_end:
0350+  07BA 12          	mov a, c
0351+  07BB E7          	pop d
0352+  07BC E6          	pop c
0353+  07BD E5          	pop b
0354+  07BE EF          	pop si
0355+  07BF 09          	ret
0356+  07C0             
0357+  07C0             
0358+  07C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  07C0             ; PRINT NULL TERMINATED STRING
0360+  07C0             ; pointer in D
0361+  07C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0362+  07C0             puts:
0363+  07C0 D7          	push a
0364+  07C1 DA          	push d
0365+  07C2             puts_L1:
0366+  07C2 1E          	mov al, [d]
0367+  07C3 B9 00       	cmp al, 0
0368+  07C5 C6 D1 07    	jz puts_END
0369+  07C8 23          	mov ah, al
0370+  07C9 19 00       	mov al, 0
0371+  07CB 05 03       	syscall sys_io
0372+  07CD 79          	inc d
0373+  07CE 0A C2 07    	jmp puts_L1
0374+  07D1             puts_END:
0375+  07D1 E7          	pop d
0376+  07D2 E4          	pop a
0377+  07D3 09          	ret
0378+  07D4             
0379+  07D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0380+  07D4             ; PRINT N SIZE STRING
0381+  07D4             ; pointer in D
0382+  07D4             ; size in C
0383+  07D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0384+  07D4             putsn:
0385+  07D4 DB          	push al
0386+  07D5 DA          	push d
0387+  07D6 D9          	push c
0388+  07D7             putsn_L0:
0389+  07D7 1E          	mov al, [d]
0390+  07D8 23          	mov ah, al
0391+  07D9 19 00       	mov al, 0
0392+  07DB 05 03       	syscall sys_io
0393+  07DD 79          	inc d
0394+  07DE 7E          	dec c	
0395+  07DF C2 00 00    	cmp c, 0
0396+  07E2 C7 D7 07    	jne putsn_L0
0397+  07E5             putsn_end:
0398+  07E5 E6          	pop c
0399+  07E6 E7          	pop d
0400+  07E7 E8          	pop al
0401+  07E8 09          	ret
0402+  07E9             
0403+  07E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  07E9             ; print 16bit decimal number
0405+  07E9             ; input number in A
0406+  07E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0407+  07E9             print_u16d:
0408+  07E9 D7          	push a
0409+  07EA D8          	push b
0410+  07EB 26 10 27    	mov b, 10000
0411+  07EE AE          	div a, b			; get 10000 coeff.
0412+  07EF 07 15 08    	call print_number
0413+  07F2 11          	mov a, b
0414+  07F3 26 E8 03    	mov b, 1000
0415+  07F6 AE          	div a, b			; get 10000 coeff.
0416+  07F7 07 15 08    	call print_number
0417+  07FA 11          	mov a, b
0418+  07FB 26 64 00    	mov b, 100
0419+  07FE AE          	div a, b
0420+  07FF 07 15 08    	call print_number
0421+  0802 11          	mov a, b
0422+  0803 26 0A 00    	mov b, 10
0423+  0806 AE          	div a, b
0424+  0807 07 15 08    	call print_number
0425+  080A 11          	mov a, b
0426+  080B 6A 30       	add al, $30
0427+  080D 23          	mov ah, al
0428+  080E 19 00       	mov al, 0
0429+  0810 05 03       	syscall sys_io	; print coeff
0430+  0812 E5          	pop b
0431+  0813 E4          	pop a
0432+  0814 09          	ret
0433+  0815             
0434+  0815             
0435+  0815             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  0815             ; if A == 0, print space
0437+  0815             ; else print A
0438+  0815             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0439+  0815             print_number:
0440+  0815 6A 30       	add al, $30
0441+  0817 23          	mov ah, al
0442+  0818 07 86 06    	call putchar
0443+  081B 09          	ret
0444+  081C             
0445+  081C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0446+  081C             ; PRINT 16BIT HEX INTEGER
0447+  081C             ; integer value in reg B
0448+  081C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  081C             print_u16x:
0450+  081C D7          	push a
0451+  081D D8          	push b
0452+  081E DD          	push bl
0453+  081F 30          	mov bl, bh
0454+  0820 07 4D 06    	call itoa				; convert bh to char in A
0455+  0823 2F          	mov bl, al				; save al
0456+  0824 19 00       	mov al, 0
0457+  0826 05 03       	syscall sys_io				; display AH
0458+  0828 24          	mov ah, bl				; retrieve al
0459+  0829 19 00       	mov al, 0
0460+  082B 05 03       	syscall sys_io				; display AL
0461+  082D             
0462+  082D EA          	pop bl
0463+  082E 07 4D 06    	call itoa				; convert bh to char in A
0464+  0831 2F          	mov bl, al				; save al
0465+  0832 19 00       	mov al, 0
0466+  0834 05 03       	syscall sys_io				; display AH
0467+  0836 24          	mov ah, bl				; retrieve al
0468+  0837 19 00       	mov al, 0
0469+  0839 05 03       	syscall sys_io				; display AL
0470+  083B             
0471+  083B E5          	pop b
0472+  083C E4          	pop a
0473+  083D 09          	ret
0474+  083E             
0475+  083E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  083E             ; INPUT 16BIT HEX INTEGER
0477+  083E             ; read 16bit integer into A
0478+  083E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  083E             scan_u16x:
0480+  083E F8 10 00    	enter 16
0481+  0841 D8          	push b
0482+  0842 DA          	push d
0483+  0843             
0484+  0843 FA F1 FF    	lea d, [bp + -15]
0485+  0846 07 8D 06    	call gets				; get number
0486+  0849             
0487+  0849 32          	mov bl, [d]
0488+  084A 37          	mov bh, bl
0489+  084B 33 01 00    	mov bl, [d + 1]
0490+  084E 07 3B 06    	call atoi				; convert to int in AL
0491+  0851 23          	mov ah, al				; move to AH
0492+  0852             
0493+  0852 33 02 00    	mov bl, [d + 2]
0494+  0855 37          	mov bh, bl
0495+  0856 33 03 00    	mov bl, [d + 3]
0496+  0859 07 3B 06    	call atoi				; convert to int in AL
0497+  085C             
0498+  085C E7          	pop d
0499+  085D E5          	pop b
0500+  085E F9          	leave
0501+  085F 09          	ret
0502+  0860             
0503+  0860             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0504+  0860             ; PRINT 8bit HEX INTEGER
0505+  0860             ; integer value in reg bl
0506+  0860             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0860             print_u8x:
0508+  0860 D7          	push a
0509+  0861 DD          	push bl
0510+  0862             
0511+  0862 07 4D 06    	call itoa				; convert bl to char in A
0512+  0865 2F          	mov bl, al				; save al
0513+  0866 19 00       	mov al, 0
0514+  0868 05 03       	syscall sys_io				; display AH
0515+  086A 24          	mov ah, bl				; retrieve al
0516+  086B 19 00       	mov al, 0
0517+  086D 05 03       	syscall sys_io				; display AL
0518+  086F             
0519+  086F EA          	pop bl
0520+  0870 E4          	pop a
0521+  0871 09          	ret
0522+  0872             
0523+  0872             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0524+  0872             ; print 8bit decimal unsigned number
0525+  0872             ; input number in AL
0526+  0872             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0872             print_u8d:
0528+  0872 D7          	push a
0529+  0873 D8          	push b
0530+  0874             
0531+  0874 22 00       	mov ah, 0
0532+  0876 26 64 00    	mov b, 100
0533+  0879 AE          	div a, b
0534+  087A D8          	push b			; save remainder
0535+  087B B9 00       	cmp al, 0
0536+  087D C6 87 08    	je skip100
0537+  0880 6A 30       	add al, $30
0538+  0882 23          	mov ah, al
0539+  0883 19 00       	mov al, 0
0540+  0885 05 03       	syscall sys_io	; print coeff
0541+  0887             skip100:
0542+  0887 E4          	pop a
0543+  0888 22 00       	mov ah, 0
0544+  088A 26 0A 00    	mov b, 10
0545+  088D AE          	div a, b
0546+  088E D8          	push b			; save remainder
0547+  088F B9 00       	cmp al, 0
0548+  0891 C6 9B 08    	je skip10
0549+  0894 6A 30       	add al, $30
0550+  0896 23          	mov ah, al
0551+  0897 19 00       	mov al, 0
0552+  0899 05 03       	syscall sys_io	; print coeff
0553+  089B             skip10:
0554+  089B E4          	pop a
0555+  089C 1B          	mov al, bl
0556+  089D 6A 30       	add al, $30
0557+  089F 23          	mov ah, al
0558+  08A0 19 00       	mov al, 0
0559+  08A2 05 03       	syscall sys_io	; print coeff
0560+  08A4 E5          	pop b
0561+  08A5 E4          	pop a
0562+  08A6 09          	ret
0563+  08A7             
0564+  08A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0565+  08A7             ; INPUT 8BIT HEX INTEGER
0566+  08A7             ; read 8bit integer into AL
0567+  08A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  08A7             scan_u8x:
0569+  08A7 F8 04 00    	enter 4
0570+  08AA D8          	push b
0571+  08AB DA          	push d
0572+  08AC             
0573+  08AC FA FD FF    	lea d, [bp + -3]
0574+  08AF 07 8D 06    	call gets				; get number
0575+  08B2             
0576+  08B2 32          	mov bl, [d]
0577+  08B3 37          	mov bh, bl
0578+  08B4 33 01 00    	mov bl, [d + 1]
0579+  08B7 07 3B 06    	call atoi				; convert to int in AL
0580+  08BA             
0581+  08BA E7          	pop d
0582+  08BB E5          	pop b
0583+  08BC F9          	leave
0584+  08BD 09          	ret
0585+  08BE             
0586+  08BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0587+  08BE             ; input decimal number
0588+  08BE             ; result in A
0589+  08BE             ; 655'\0'
0590+  08BE             ; low--------high
0591+  08BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0592+  08BE             scan_u16d:
0593+  08BE F8 08 00    	enter 8
0594+  08C1 E2          	push si
0595+  08C2 D8          	push b
0596+  08C3 D9          	push c
0597+  08C4 DA          	push d
0598+  08C5 FA F9 FF    	lea d, [bp +- 7]
0599+  08C8 07 8D 06    	call gets
0600+  08CB 07 BB 05    	call strlen			; get string length in C
0601+  08CE 7E          	dec c
0602+  08CF FD 4E       	mov si, d
0603+  08D1 12          	mov a, c
0604+  08D2 FD 99       	shl a
0605+  08D4 3B 23 06    	mov d, table_power
0606+  08D7 59          	add d, a
0607+  08D8 38 00 00    	mov c, 0
0608+  08DB             mul_loop:
0609+  08DB F6          	lodsb			; load ASCII to al
0610+  08DC B9 00       	cmp al, 0
0611+  08DE C6 F1 08    	je mul_exit
0612+  08E1 6F 30       	sub al, $30		; make into integer
0613+  08E3 22 00       	mov ah, 0
0614+  08E5 2A          	mov b, [d]
0615+  08E6 AC          	mul a, b			; result in B since it fits in 16bits
0616+  08E7 11          	mov a, b
0617+  08E8 28          	mov b, c
0618+  08E9 54          	add a, b
0619+  08EA 39          	mov c, a
0620+  08EB 63 02 00    	sub d, 2
0621+  08EE 0A DB 08    	jmp mul_loop
0622+  08F1             mul_exit:
0623+  08F1 12          	mov a, c
0624+  08F2 E7          	pop d
0625+  08F3 E6          	pop c
0626+  08F4 E5          	pop b
0627+  08F5 EF          	pop si
0628+  08F6 F9          	leave
0629+  08F7 09          	ret
0201   08F8             ; --- END INCLUDE BLOCK
0202   08F8             
0203   08F8             
0204   08F8             .end
tasm: Number of errors = 0
