0001   0000             .include "lib/kernel.exp"
0001+  0000             PROC_TEXT_ORG    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_IDE          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_fileio       .EQU  $0004
0007+  0000             sys_fork         .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pauseproc    .EQU  $0009
0012+  0000             sys_resumeproc   .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0002   0400             .org PROC_TEXT_ORG
0003   0400             
0004   0400             ; -----begin text block-----
0005   0400             main:
0006   0400 26 05 00      mov b, 5
0007   0403 DD            push bl
0008   0404 26 0A 00      mov b, 10
0009   0407 D8            push b
0010   0408 26 0F 00      mov b, 15
0011   040B D8            push b
0012   040C 07 14 04      call test
0013   040F 51 05 00      add sp, 5
0014   0412             ; -----begin inline asm block-----
0015   0412 05 0B         syscall sys_terminate_proc
0016   0414             ; -----end inline asm block-----
0017   0414             test:
0018   0414 D2            push bp
0019   0415 9B            mov bp, sp
0020   0416 FD D7 00 00   push word 0
0021   041A FD DB 00      push byte 0
0022   041D FD D7 00 00   push word 0
0023   0421 10 00 00      mov a, 0
0024   0424 26 38 00      mov b, 56
0025   0427 11            mov a, b
0026   0428 FD AA         swp a
0027   042A 45 FF FF      mov [bp + -1], a
0028   042D 10 00 00      mov a, 0
0029   0430 2E 61         mov bl, 'a'
0030   0432 A7 00         mov bh, 0
0031   0434 1B            mov al, bl
0032   0435 40 FE FF      mov [bp + -2], al
0033   0438 10 00 00      mov a, 0
0034   043B 26 0B 00      mov b, 11
0035   043E 11            mov a, b
0036   043F FD AA         swp a
0037   0441 45 FC FF      mov [bp + -4], a
0038   0444 10 00 00      mov a, 0
0039   0447 26 01 00      mov b, 1
0040   044A 1B            mov al, bl
0041   044B 40 09 00      mov [bp + 9], al
0042   044E 10 00 00      mov a, 0
0043   0451 26 02 00      mov b, 2
0044   0454 11            mov a, b
0045   0455 FD AA         swp a
0046   0457 45 07 00      mov [bp + 7], a
0047   045A 10 00 00      mov a, 0
0048   045D 26 03 00      mov b, 3
0049   0460 11            mov a, b
0050   0461 FD AA         swp a
0051   0463 45 05 00      mov [bp + 5], a
0052   0466 F9            leave
0053   0467 09            ret
0054   0468             
0055   0468             ; -----end text block-----
0056   0468             
0057   0468             
0058   0468             ; -----begin data block-----
0059   0468             
0060   0468             
0061   0468             ; -----end data block-----
0062   0468             
0063   0468             
0064   0468             ; -----begin include block-----
0065   0468             
0066   0468             .include "lib/stdio.asm"
0001+  0468             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0468             ; stdio.s
0003+  0468             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0468             .include "lib/string.asm"
0001++ 0468             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0468             ; string.s
0003++ 0468             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0468             
0005++ 0468             
0006++ 0468             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0468             ; strrev
0008++ 0468             ; reverse a string
0009++ 0468             ; D = string address
0010++ 0468             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0468             ; 01234
0012++ 0468             strrev:
0013++ 0468 4B          	pusha
0014++ 0469 07 AF 04    	call strlen	; length in C
0015++ 046C 12          	mov a, c
0016++ 046D AF 01 00    	cmp a, 1
0017++ 0470 D0 8A 04    	jleu strrev_end	; check string length. string len must be > 1
0018++ 0473 7D          	dec a
0019++ 0474 FD 4E       	mov si, d	; beginning of string
0020++ 0476 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0478 59          	add d, a	; end of string
0022++ 0479 12          	mov a, c
0023++ 047A FD 9B       	shr a		; divide by 2
0024++ 047C 39          	mov c, a	; C now counts the steps
0025++ 047D             strrev_L0:
0026++ 047D 32          	mov bl, [d]	; save load right-side char into BL
0027++ 047E F6          	lodsb		; load left-side char into AL; increase SI
0028++ 047F 3E          	mov [d], al	; store left char into right side
0029++ 0480 1B          	mov al, bl
0030++ 0481 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0482 7E          	dec c
0032++ 0483 7F          	dec d
0033++ 0484 C2 00 00    	cmp c, 0
0034++ 0487 C7 7D 04    	jne strrev_L0
0035++ 048A             strrev_end:
0036++ 048A 4C          	popa
0037++ 048B 09          	ret
0038++ 048C             	
0039++ 048C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 048C             ; strchr
0041++ 048C             ; search string in D for char in AL
0042++ 048C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 048C             strchr:
0044++ 048C             strchr_L0:
0045++ 048C 32          	mov bl, [d]
0046++ 048D C1 00       	cmp bl, 0
0047++ 048F C6 9A 04    	je strchr_end
0048++ 0492 BA          	cmp al, bl
0049++ 0493 C6 9A 04    	je strchr_end
0050++ 0496 79          	inc d
0051++ 0497 0A 8C 04    	jmp strchr_L0
0052++ 049A             strchr_end:
0053++ 049A 1B          	mov al, bl
0054++ 049B 09          	ret
0055++ 049C             
0056++ 049C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 049C             ; strstr
0058++ 049C             ; find sub-string
0059++ 049C             ; str1 in SI
0060++ 049C             ; str2 in DI
0061++ 049C             ; SI points to end of source string
0062++ 049C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 049C             strstr:
0064++ 049C DB          	push al
0065++ 049D DA          	push d
0066++ 049E E3          	push di
0067++ 049F             strstr_loop:
0068++ 049F F3          	cmpsb					; compare a byte of the strings
0069++ 04A0 C7 AB 04    	jne strstr_ret
0070++ 04A3 FC 00 00    	lea d, [di + 0]
0071++ 04A6 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 04A8 C7 9F 04    	jne strstr_loop				; equal chars but not at end
0073++ 04AB             strstr_ret:
0074++ 04AB F0          	pop di
0075++ 04AC E7          	pop d
0076++ 04AD E8          	pop al
0077++ 04AE 09          	ret
0078++ 04AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 04AF             ; length of null terminated string
0080++ 04AF             ; result in C
0081++ 04AF             ; pointer in D
0082++ 04AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 04AF             strlen:
0084++ 04AF DA          	push d
0085++ 04B0 38 00 00    	mov c, 0
0086++ 04B3             strlen_L1:
0087++ 04B3 BD 00       	cmp byte [d], 0
0088++ 04B5 C6 BD 04    	je strlen_ret
0089++ 04B8 79          	inc d
0090++ 04B9 78          	inc c
0091++ 04BA 0A B3 04    	jmp strlen_L1
0092++ 04BD             strlen_ret:
0093++ 04BD E7          	pop d
0094++ 04BE 09          	ret
0095++ 04BF             
0096++ 04BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04BF             ; STRCMP
0098++ 04BF             ; compare two strings
0099++ 04BF             ; str1 in SI
0100++ 04BF             ; str2 in DI
0101++ 04BF             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04BF             strcmp:
0104++ 04BF DB          	push al
0105++ 04C0 DA          	push d
0106++ 04C1 E3          	push di
0107++ 04C2 E2          	push si
0108++ 04C3             strcmp_loop:
0109++ 04C3 F3          	cmpsb					; compare a byte of the strings
0110++ 04C4 C7 CF 04    	jne strcmp_ret
0111++ 04C7 FB FF FF    	lea d, [si +- 1]
0112++ 04CA BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04CC C7 C3 04    	jne strcmp_loop				; equal chars but not at end
0114++ 04CF             strcmp_ret:
0115++ 04CF EF          	pop si
0116++ 04D0 F0          	pop di
0117++ 04D1 E7          	pop d
0118++ 04D2 E8          	pop al
0119++ 04D3 09          	ret
0120++ 04D4             
0121++ 04D4             
0122++ 04D4             ; STRCPY
0123++ 04D4             ; copy null terminated string from SI to DI
0124++ 04D4             ; source in SI
0125++ 04D4             ; destination in DI
0126++ 04D4             strcpy:
0127++ 04D4 E2          	push si
0128++ 04D5 E3          	push di
0129++ 04D6 DB          	push al
0130++ 04D7             strcpy_L1:
0131++ 04D7 F6          	lodsb
0132++ 04D8 F7          	stosb
0133++ 04D9 B9 00       	cmp al, 0
0134++ 04DB C7 D7 04    	jne strcpy_L1
0135++ 04DE             strcpy_end:
0136++ 04DE E8          	pop al
0137++ 04DF F0          	pop di
0138++ 04E0 EF          	pop si
0139++ 04E1 09          	ret
0140++ 04E2             
0141++ 04E2             ; STRCAT
0142++ 04E2             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04E2             ; source in SI
0144++ 04E2             ; destination in DI
0145++ 04E2             strcat:
0146++ 04E2 E2          	push si
0147++ 04E3 E3          	push di
0148++ 04E4 D7          	push a
0149++ 04E5 DA          	push d
0150++ 04E6 50          	mov a, di
0151++ 04E7 3C          	mov d, a
0152++ 04E8             strcat_goto_end_L1:
0153++ 04E8 BD 00       	cmp byte[d], 0
0154++ 04EA C6 F1 04    	je strcat_start
0155++ 04ED 79          	inc d
0156++ 04EE 0A E8 04    	jmp strcat_goto_end_L1
0157++ 04F1             strcat_start:
0158++ 04F1 FD 50       	mov di, d
0159++ 04F3             strcat_L1:
0160++ 04F3 F6          	lodsb
0161++ 04F4 F7          	stosb
0162++ 04F5 B9 00       	cmp al, 0
0163++ 04F7 C7 F3 04    	jne strcat_L1
0164++ 04FA             strcat_end:
0165++ 04FA E7          	pop d
0166++ 04FB E4          	pop a
0167++ 04FC F0          	pop di
0168++ 04FD EF          	pop si
0169++ 04FE 09          	ret
0005+  04FF             
0006+  04FF 30 31 32 33 s_hex_digits:	.db "0123456789ABCDEF"	
0006+  0503 34 35 36 37 
0006+  0507 38 39 41 42 
0006+  050B 43 44 45 46 
0007+  050F             
0008+  050F 01 00       table_power:.dw 1
0009+  0511 0A 00       			.dw 10
0010+  0513 64 00       			.dw 100
0011+  0515 E8 03       			.dw 1000
0012+  0517 10 27       			.dw 10000
0013+  0519             
0014+  0519             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0015+  0519             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0016+  0519             ; ASCII in BL
0017+  0519             ; result in AL
0018+  0519             ; ascii for F = 0100 0110
0019+  0519             ; ascii for 9 = 0011 1001
0020+  0519             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0021+  0519             hex_ascii_encode:
0022+  0519 1B          	mov al, bl
0023+  051A 93 40       	test al, $40				; test if letter or number
0024+  051C C7 22 05    	jnz hex_letter
0025+  051F 87 0F       	and al, $0F				; get number
0026+  0521 09          	ret
0027+  0522             hex_letter:
0028+  0522 87 0F       	and al, $0F				; get letter
0029+  0524 6A 09       	add al, 9
0030+  0526 09          	ret
0031+  0527             
0032+  0527             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0033+  0527             ; ATOI
0034+  0527             ; 2 letter hex string in B
0035+  0527             ; 8bit integer returned in AL
0036+  0527             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0037+  0527             atoi:
0038+  0527 D8          	push b
0039+  0528 07 19 05    	call hex_ascii_encode			; convert BL to 4bit code in AL
0040+  052B 30          	mov bl, bh
0041+  052C DB          	push al					; save a
0042+  052D 07 19 05    	call hex_ascii_encode
0043+  0530 EA          	pop bl	
0044+  0531 FD 9E 04    	shl al, 4
0045+  0534 8C          	or al, bl
0046+  0535 E5          	pop b
0047+  0536 09          	ret	
0048+  0537             
0049+  0537             
0050+  0537             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0537             ; printf
0052+  0537             ; no need for explanations!
0053+  0537             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0054+  0537             printf:
0055+  0537 09          	ret
0056+  0538             
0057+  0538             
0058+  0538             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0538             ; scanf
0060+  0538             ; no need for explanations!
0061+  0538             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0538             scanf:
0063+  0538 09          	ret
0064+  0539             
0065+  0539             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0539             ; ITOA
0067+  0539             ; 8bit value in BL
0068+  0539             ; 2 byte ASCII result in A
0069+  0539             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070+  0539             itoa:
0071+  0539 DA          	push d
0072+  053A D8          	push b
0073+  053B A7 00       	mov bh, 0
0074+  053D FD A4 04    	shr bl, 4	
0075+  0540 74          	mov d, b
0076+  0541 1F FF 04    	mov al, [d + s_hex_digits]
0077+  0544 23          	mov ah, al
0078+  0545             	
0079+  0545 E5          	pop b
0080+  0546 D8          	push b
0081+  0547 A7 00       	mov bh, 0
0082+  0549 FD 87 0F    	and bl, $0F
0083+  054C 74          	mov d, b
0084+  054D 1F FF 04    	mov al, [d + s_hex_digits]
0085+  0550 E5          	pop b
0086+  0551 E7          	pop d
0087+  0552 09          	ret
0088+  0553             
0089+  0553             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0090+  0553             ; HEX STRING TO BINARY
0091+  0553             ; di = destination address
0092+  0553             ; si = source
0093+  0553             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0094+  0553             hex_to_int:
0095+  0553             hex_to_int_L1:
0096+  0553 F6          	lodsb					; load from [SI] to AL
0097+  0554 B9 00       	cmp al, 0				; check if ASCII 0
0098+  0556 C6 63 05    	jz hex_to_int_ret
0099+  0559 36          	mov bh, al
0100+  055A F6          	lodsb
0101+  055B 2F          	mov bl, al
0102+  055C 07 27 05    	call atoi				; convert ASCII byte in B to int (to AL)
0103+  055F F7          	stosb					; store AL to [DI]
0104+  0560 0A 53 05    	jmp hex_to_int_L1
0105+  0563             hex_to_int_ret:
0106+  0563 09          	ret		
0107+  0564             
0108+  0564             
0109+  0564             
0110+  0564             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0564             ; GETCHAR
0112+  0564             ; char in ah
0113+  0564             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0114+  0564             getchar:
0115+  0564 DB          	push al
0116+  0565             getchar_retry:
0117+  0565 FD 0C       	sti
0118+  0567 19 01       	mov al, 1
0119+  0569 05 03       	syscall sys_io			; receive in AH
0120+  056B B9 00       	cmp al, 0			; check if any char was receive
0121+  056D C6 65 05    	je getchar_retry
0122+  0570 E8          	pop al
0123+  0571 09          	ret
0124+  0572             
0125+  0572             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126+  0572             ; PUTCHAR
0127+  0572             ; char in ah
0128+  0572             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0572             putchar:
0130+  0572 D7          	push a
0131+  0573 19 00       	mov al, 0
0132+  0575 05 03       	syscall sys_io			; char in AH
0133+  0577 E4          	pop a
0134+  0578 09          	ret
0135+  0579             
0136+  0579             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0137+  0579             ;; INPUT A STRING
0138+  0579             ;; terminates with null
0139+  0579             ;; pointer in D
0140+  0579             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0579             gets:
0142+  0579 D7          	push a
0143+  057A DA          	push d
0144+  057B             gets_loop:
0145+  057B FD 0C       	sti
0146+  057D 19 01       	mov al, 1
0147+  057F 05 03       	syscall sys_io			; receive in AH
0148+  0581 B9 00       	cmp al, 0				; check error code (AL)
0149+  0583 C6 7B 05    	je gets_loop			; if no char received, retry
0150+  0586             
0151+  0586 76 1B       	cmp ah, 27
0152+  0588 C6 A4 05    	je gets_telnet_escape
0153+  058B 76 0A       	cmp ah, $0A				; LF
0154+  058D C6 FD 05    	je gets_end
0155+  0590 76 5C       	cmp ah, $5C				; '\\'
0156+  0592 C6 D4 05    	je gets_escape
0157+  0595             	
0158+  0595 76 08       	cmp ah, $08			; check for backspace
0159+  0597 C6 A0 05    	je gets_backspace
0160+  059A             
0161+  059A 1A          	mov al, ah
0162+  059B 3E          	mov [d], al
0163+  059C 79          	inc d
0164+  059D 0A 7B 05    	jmp gets_loop
0165+  05A0             gets_backspace:
0166+  05A0 7F          	dec d
0167+  05A1 0A 7B 05    	jmp gets_loop
0168+  05A4             gets_telnet_escape:
0169+  05A4 FD 0C       	sti
0170+  05A6 19 01       	mov al, 1
0171+  05A8 05 03       	syscall sys_io				; receive in AH without echo
0172+  05AA B9 00       	cmp al, 0					; check error code (AL)
0173+  05AC C6 A4 05    	je gets_telnet_escape		; if no char received, retry
0174+  05AF 76 5B       	cmp ah, '['
0175+  05B1 C7 7B 05    	jne gets_loop
0176+  05B4             gets_telnet_escape_phase2:
0177+  05B4 FD 0C       	sti
0178+  05B6 19 01       	mov al, 1
0179+  05B8 05 03       	syscall sys_io					; receive in AH without echo
0180+  05BA B9 00       	cmp al, 0						; check error code (AL)
0181+  05BC C6 B4 05    	je gets_telnet_escape_phase2	; if no char received, retry
0182+  05BF 76 44       	cmp ah, 'D'
0183+  05C1 C6 CC 05    	je gets_left_arrow
0184+  05C4 76 43       	cmp ah, 'C'
0185+  05C6 C6 D0 05    	je gets_right_arrow
0186+  05C9 0A 7B 05    	jmp gets_loop
0187+  05CC             gets_left_arrow:
0188+  05CC 7F          	dec d
0189+  05CD 0A 7B 05    	jmp gets_loop
0190+  05D0             gets_right_arrow:
0191+  05D0 79          	inc d
0192+  05D1 0A 7B 05    	jmp gets_loop
0193+  05D4             gets_escape:
0194+  05D4 FD 0C       	sti
0195+  05D6 19 01       	mov al, 1
0196+  05D8 05 03       	syscall sys_io			; receive in AH
0197+  05DA B9 00       	cmp al, 0				; check error code (AL)
0198+  05DC C6 D4 05    	je gets_escape			; if no char received, retry
0199+  05DF 76 6E       	cmp ah, 'n'
0200+  05E1 C6 EF 05    	je gets_LF
0201+  05E4 76 72       	cmp ah, 'r'
0202+  05E6 C6 F6 05    	je gets_CR
0203+  05E9 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0204+  05EA 3E          	mov [d], al
0205+  05EB 79          	inc d
0206+  05EC 0A 7B 05    	jmp gets_loop
0207+  05EF             gets_LF:
0208+  05EF 19 0A       	mov al, $0A
0209+  05F1 3E          	mov [d], al
0210+  05F2 79          	inc d
0211+  05F3 0A 7B 05    	jmp gets_loop
0212+  05F6             gets_CR:
0213+  05F6 19 0D       	mov al, $0D
0214+  05F8 3E          	mov [d], al
0215+  05F9 79          	inc d
0216+  05FA 0A 7B 05    	jmp gets_loop
0217+  05FD             gets_end:
0218+  05FD 19 00       	mov al, 0
0219+  05FF 3E          	mov [d], al				; terminate string
0220+  0600 E7          	pop d
0221+  0601 E4          	pop a
0222+  0602 09          	ret
0223+  0603             
0224+  0603             
0225+  0603             
0226+  0603             
0227+  0603             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0228+  0603             ;; INPUT TEXT
0229+  0603             ;; terminated with CTRL+D
0230+  0603             ;; pointer in D
0231+  0603             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0232+  0603             gettxt:
0233+  0603 D7          	push a
0234+  0604 DA          	push d
0235+  0605             gettxt_loop:
0236+  0605 19 01       	mov al, 1
0237+  0607 05 03       	syscall sys_io			; receive in AH
0238+  0609 B9 00       	cmp al, 0				; check error code (AL)
0239+  060B C6 05 06    	je gettxt_loop		; if no char received, retry
0240+  060E 76 04       	cmp ah, 4			; EOT
0241+  0610 C6 4E 06    	je gettxt_end
0242+  0613 76 08       	cmp ah, $08			; check for backspace
0243+  0615 C6 4A 06    	je gettxt_backspace
0244+  0618 76 5C       	cmp ah, $5C				; '\\'
0245+  061A C6 23 06    	je gettxt_escape
0246+  061D 1A          	mov al, ah
0247+  061E 3E          	mov [d], al
0248+  061F 79          	inc d
0249+  0620 0A 05 06    	jmp gettxt_loop
0250+  0623             gettxt_escape:
0251+  0623 19 01       	mov al, 1
0252+  0625 05 03       	syscall sys_io			; receive in AH
0253+  0627 B9 00       	cmp al, 0				; check error code (AL)
0254+  0629 C6 23 06    	je gettxt_escape		; if no char received, retry
0255+  062C 76 6E       	cmp ah, 'n'
0256+  062E C6 3C 06    	je gettxt_LF
0257+  0631 76 72       	cmp ah, 'r'
0258+  0633 C6 43 06    	je gettxt_CR
0259+  0636 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0260+  0637 3E          	mov [d], al
0261+  0638 79          	inc d
0262+  0639 0A 05 06    	jmp gettxt_loop
0263+  063C             gettxt_LF:
0264+  063C 19 0A       	mov al, $0A
0265+  063E 3E          	mov [d], al
0266+  063F 79          	inc d
0267+  0640 0A 05 06    	jmp gettxt_loop
0268+  0643             gettxt_CR:
0269+  0643 19 0D       	mov al, $0D
0270+  0645 3E          	mov [d], al
0271+  0646 79          	inc d
0272+  0647 0A 05 06    	jmp gettxt_loop
0273+  064A             gettxt_backspace:
0274+  064A 7F          	dec d
0275+  064B 0A 05 06    	jmp gettxt_loop
0276+  064E             gettxt_end:
0277+  064E 19 00       	mov al, 0
0278+  0650 3E          	mov [d], al				; terminate string
0279+  0651 E7          	pop d
0280+  0652 E4          	pop a
0281+  0653 09          	ret
0282+  0654             
0283+  0654             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0284+  0654             ; PRINT NEW LINE
0285+  0654             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0286+  0654             printnl:
0287+  0654 D7          	push a
0288+  0655 10 00 0A    	mov a, $0A00
0289+  0658 05 03       	syscall sys_io
0290+  065A 10 00 0D    	mov a, $0D00
0291+  065D 05 03       	syscall sys_io
0292+  065F E4          	pop a
0293+  0660 09          	ret
0294+  0661             
0295+  0661             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0296+  0661             ; strtoint
0297+  0661             ; 4 digit hex string number in d
0298+  0661             ; integer returned in A
0299+  0661             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0300+  0661             strtointx:
0301+  0661 D8          	push b
0302+  0662 32          	mov bl, [d]
0303+  0663 37          	mov bh, bl
0304+  0664 33 01 00    	mov bl, [d + 1]
0305+  0667 07 27 05    	call atoi				; convert to int in AL
0306+  066A 23          	mov ah, al				; move to AH
0307+  066B 33 02 00    	mov bl, [d + 2]
0308+  066E 37          	mov bh, bl
0309+  066F 33 03 00    	mov bl, [d + 3]
0310+  0672 07 27 05    	call atoi				; convert to int in AL
0311+  0675 E5          	pop b
0312+  0676 09          	ret
0313+  0677             
0314+  0677             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0315+  0677             ; strtoint
0316+  0677             ; 5 digit base10 string number in d
0317+  0677             ; integer returned in A
0318+  0677             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0319+  0677             strtoint:
0320+  0677 E2          	push si
0321+  0678 D8          	push b
0322+  0679 D9          	push c
0323+  067A DA          	push d
0324+  067B 07 AF 04    	call strlen			; get string length in C
0325+  067E 7E          	dec c
0326+  067F FD 4E       	mov si, d
0327+  0681 12          	mov a, c
0328+  0682 FD 99       	shl a
0329+  0684 3B 0F 05    	mov d, table_power
0330+  0687 59          	add d, a
0331+  0688 38 00 00    	mov c, 0
0332+  068B             strtoint_L0:
0333+  068B F6          	lodsb			; load ASCII to al
0334+  068C B9 00       	cmp al, 0
0335+  068E C6 A1 06    	je strtoint_end
0336+  0691 6F 30       	sub al, $30		; make into integer
0337+  0693 22 00       	mov ah, 0
0338+  0695 2A          	mov b, [d]
0339+  0696 AC          	mul a, b			; result in B since it fits in 16bits
0340+  0697 11          	mov a, b
0341+  0698 28          	mov b, c
0342+  0699 54          	add a, b
0343+  069A 39          	mov c, a
0344+  069B 63 02 00    	sub d, 2
0345+  069E 0A 8B 06    	jmp strtoint_L0
0346+  06A1             strtoint_end:
0347+  06A1 12          	mov a, c
0348+  06A2 E7          	pop d
0349+  06A3 E6          	pop c
0350+  06A4 E5          	pop b
0351+  06A5 EF          	pop si
0352+  06A6 09          	ret
0353+  06A7             
0354+  06A7             
0355+  06A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  06A7             ; PRINT NULL TERMINATED STRING
0357+  06A7             ; pointer in D
0358+  06A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0359+  06A7             puts:
0360+  06A7 D7          	push a
0361+  06A8 DA          	push d
0362+  06A9             puts_L1:
0363+  06A9 1E          	mov al, [d]
0364+  06AA B9 00       	cmp al, 0
0365+  06AC C6 B8 06    	jz puts_END
0366+  06AF 23          	mov ah, al
0367+  06B0 19 00       	mov al, 0
0368+  06B2 05 03       	syscall sys_io
0369+  06B4 79          	inc d
0370+  06B5 0A A9 06    	jmp puts_L1
0371+  06B8             puts_END:
0372+  06B8 E7          	pop d
0373+  06B9 E4          	pop a
0374+  06BA 09          	ret
0375+  06BB             
0376+  06BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0377+  06BB             ; PRINT N SIZE STRING
0378+  06BB             ; pointer in D
0379+  06BB             ; size in C
0380+  06BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0381+  06BB             putsn:
0382+  06BB DB          	push al
0383+  06BC DA          	push d
0384+  06BD D9          	push c
0385+  06BE             putsn_L0:
0386+  06BE 1E          	mov al, [d]
0387+  06BF 23          	mov ah, al
0388+  06C0 19 00       	mov al, 0
0389+  06C2 05 03       	syscall sys_io
0390+  06C4 79          	inc d
0391+  06C5 7E          	dec c	
0392+  06C6 C2 00 00    	cmp c, 0
0393+  06C9 C7 BE 06    	jne putsn_L0
0394+  06CC             putsn_end:
0395+  06CC E6          	pop c
0396+  06CD E7          	pop d
0397+  06CE E8          	pop al
0398+  06CF 09          	ret
0399+  06D0             
0400+  06D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0401+  06D0             ; print 16bit decimal number
0402+  06D0             ; input number in A
0403+  06D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0404+  06D0             print_u16d:
0405+  06D0 D7          	push a
0406+  06D1 D8          	push b
0407+  06D2 26 10 27    	mov b, 10000
0408+  06D5 AE          	div a, b			; get 10000 coeff.
0409+  06D6 07 FC 06    	call print_zero_or_space
0410+  06D9 11          	mov a, b
0411+  06DA 26 E8 03    	mov b, 1000
0412+  06DD AE          	div a, b			; get 10000 coeff.
0413+  06DE 07 FC 06    	call print_zero_or_space
0414+  06E1 11          	mov a, b
0415+  06E2 26 64 00    	mov b, 100
0416+  06E5 AE          	div a, b
0417+  06E6 07 FC 06    	call print_zero_or_space
0418+  06E9 11          	mov a, b
0419+  06EA 26 0A 00    	mov b, 10
0420+  06ED AE          	div a, b
0421+  06EE 07 FC 06    	call print_zero_or_space
0422+  06F1 11          	mov a, b
0423+  06F2 6A 30       	add al, $30
0424+  06F4 23          	mov ah, al
0425+  06F5 19 00       	mov al, 0
0426+  06F7 05 03       	syscall sys_io	; print coeff
0427+  06F9 E5          	pop b
0428+  06FA E4          	pop a
0429+  06FB 09          	ret
0430+  06FC             
0431+  06FC             
0432+  06FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  06FC             ; if A == 0, print space
0434+  06FC             ; else print A
0435+  06FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0436+  06FC             print_zero_or_space:
0437+  06FC             	; cmp a, 0
0438+  06FC             	; jne print_number
0439+  06FC             	; mov ah, $20
0440+  06FC             	; call putchar
0441+  06FC             	; ret
0442+  06FC             print_number:
0443+  06FC 6A 30       	add al, $30
0444+  06FE 23          	mov ah, al
0445+  06FF 07 72 05    	call putchar
0446+  0702 09          	ret
0447+  0703             
0448+  0703             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0449+  0703             ; PRINT 16BIT HEX INTEGER
0450+  0703             ; integer value in reg B
0451+  0703             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0452+  0703             print_u16x:
0453+  0703 D7          	push a
0454+  0704 D8          	push b
0455+  0705 DD          	push bl
0456+  0706 30          	mov bl, bh
0457+  0707 07 39 05    	call itoa				; convert bh to char in A
0458+  070A 2F          	mov bl, al				; save al
0459+  070B 19 00       	mov al, 0
0460+  070D 05 03       	syscall sys_io				; display AH
0461+  070F 24          	mov ah, bl				; retrieve al
0462+  0710 19 00       	mov al, 0
0463+  0712 05 03       	syscall sys_io				; display AL
0464+  0714             
0465+  0714 EA          	pop bl
0466+  0715 07 39 05    	call itoa				; convert bh to char in A
0467+  0718 2F          	mov bl, al				; save al
0468+  0719 19 00       	mov al, 0
0469+  071B 05 03       	syscall sys_io				; display AH
0470+  071D 24          	mov ah, bl				; retrieve al
0471+  071E 19 00       	mov al, 0
0472+  0720 05 03       	syscall sys_io				; display AL
0473+  0722             
0474+  0722 E5          	pop b
0475+  0723 E4          	pop a
0476+  0724 09          	ret
0477+  0725             
0478+  0725             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0479+  0725             ; INPUT 16BIT HEX INTEGER
0480+  0725             ; read 16bit integer into A
0481+  0725             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0482+  0725             scan_u16x:
0483+  0725 F8 10 00    	enter 16
0484+  0728 D8          	push b
0485+  0729 DA          	push d
0486+  072A             
0487+  072A FA F1 FF    	lea d, [bp + -15]
0488+  072D 07 79 05    	call gets				; get number
0489+  0730             
0490+  0730 32          	mov bl, [d]
0491+  0731 37          	mov bh, bl
0492+  0732 33 01 00    	mov bl, [d + 1]
0493+  0735 07 27 05    	call atoi				; convert to int in AL
0494+  0738 23          	mov ah, al				; move to AH
0495+  0739             
0496+  0739 33 02 00    	mov bl, [d + 2]
0497+  073C 37          	mov bh, bl
0498+  073D 33 03 00    	mov bl, [d + 3]
0499+  0740 07 27 05    	call atoi				; convert to int in AL
0500+  0743             
0501+  0743 E7          	pop d
0502+  0744 E5          	pop b
0503+  0745 F9          	leave
0504+  0746 09          	ret
0505+  0747             
0506+  0747             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0507+  0747             ; PRINT 8bit HEX INTEGER
0508+  0747             ; integer value in reg bl
0509+  0747             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0510+  0747             print_u8x:
0511+  0747 D7          	push a
0512+  0748 DD          	push bl
0513+  0749             
0514+  0749 07 39 05    	call itoa				; convert bl to char in A
0515+  074C 2F          	mov bl, al				; save al
0516+  074D 19 00       	mov al, 0
0517+  074F 05 03       	syscall sys_io				; display AH
0518+  0751 24          	mov ah, bl				; retrieve al
0519+  0752 19 00       	mov al, 0
0520+  0754 05 03       	syscall sys_io				; display AL
0521+  0756             
0522+  0756 EA          	pop bl
0523+  0757 E4          	pop a
0524+  0758 09          	ret
0525+  0759             
0526+  0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0527+  0759             ; print 8bit decimal unsigned number
0528+  0759             ; input number in AL
0529+  0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0530+  0759             print_u8d:
0531+  0759 D7          	push a
0532+  075A D8          	push b
0533+  075B             
0534+  075B 22 00       	mov ah, 0
0535+  075D 26 64 00    	mov b, 100
0536+  0760 AE          	div a, b
0537+  0761 D8          	push b			; save remainder
0538+  0762 B9 00       	cmp al, 0
0539+  0764 C6 6E 07    	je skip100
0540+  0767 6A 30       	add al, $30
0541+  0769 23          	mov ah, al
0542+  076A 19 00       	mov al, 0
0543+  076C 05 03       	syscall sys_io	; print coeff
0544+  076E             skip100:
0545+  076E E4          	pop a
0546+  076F 22 00       	mov ah, 0
0547+  0771 26 0A 00    	mov b, 10
0548+  0774 AE          	div a, b
0549+  0775 D8          	push b			; save remainder
0550+  0776 B9 00       	cmp al, 0
0551+  0778 C6 82 07    	je skip10
0552+  077B 6A 30       	add al, $30
0553+  077D 23          	mov ah, al
0554+  077E 19 00       	mov al, 0
0555+  0780 05 03       	syscall sys_io	; print coeff
0556+  0782             skip10:
0557+  0782 E4          	pop a
0558+  0783 1B          	mov al, bl
0559+  0784 6A 30       	add al, $30
0560+  0786 23          	mov ah, al
0561+  0787 19 00       	mov al, 0
0562+  0789 05 03       	syscall sys_io	; print coeff
0563+  078B E5          	pop b
0564+  078C E4          	pop a
0565+  078D 09          	ret
0566+  078E             
0567+  078E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0568+  078E             ; INPUT 8BIT HEX INTEGER
0569+  078E             ; read 8bit integer into AL
0570+  078E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  078E             scan_u8x:
0572+  078E F8 04 00    	enter 4
0573+  0791 D8          	push b
0574+  0792 DA          	push d
0575+  0793             
0576+  0793 FA FD FF    	lea d, [bp + -3]
0577+  0796 07 79 05    	call gets				; get number
0578+  0799             
0579+  0799 32          	mov bl, [d]
0580+  079A 37          	mov bh, bl
0581+  079B 33 01 00    	mov bl, [d + 1]
0582+  079E 07 27 05    	call atoi				; convert to int in AL
0583+  07A1             
0584+  07A1 E7          	pop d
0585+  07A2 E5          	pop b
0586+  07A3 F9          	leave
0587+  07A4 09          	ret
0588+  07A5             
0589+  07A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0590+  07A5             ; input decimal number
0591+  07A5             ; result in A
0592+  07A5             ; 655'\0'
0593+  07A5             ; low--------high
0594+  07A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0595+  07A5             scan_u16d:
0596+  07A5 F8 08 00    	enter 8
0597+  07A8 E2          	push si
0598+  07A9 D8          	push b
0599+  07AA D9          	push c
0600+  07AB DA          	push d
0601+  07AC FA F9 FF    	lea d, [bp +- 7]
0602+  07AF 07 79 05    	call gets
0603+  07B2 07 AF 04    	call strlen			; get string length in C
0604+  07B5 7E          	dec c
0605+  07B6 FD 4E       	mov si, d
0606+  07B8 12          	mov a, c
0607+  07B9 FD 99       	shl a
0608+  07BB 3B 0F 05    	mov d, table_power
0609+  07BE 59          	add d, a
0610+  07BF 38 00 00    	mov c, 0
0611+  07C2             mul_loop:
0612+  07C2 F6          	lodsb			; load ASCII to al
0613+  07C3 B9 00       	cmp al, 0
0614+  07C5 C6 D8 07    	je mul_exit
0615+  07C8 6F 30       	sub al, $30		; make into integer
0616+  07CA 22 00       	mov ah, 0
0617+  07CC 2A          	mov b, [d]
0618+  07CD AC          	mul a, b			; result in B since it fits in 16bits
0619+  07CE 11          	mov a, b
0620+  07CF 28          	mov b, c
0621+  07D0 54          	add a, b
0622+  07D1 39          	mov c, a
0623+  07D2 63 02 00    	sub d, 2
0624+  07D5 0A C2 07    	jmp mul_loop
0625+  07D8             mul_exit:
0626+  07D8 12          	mov a, c
0627+  07D9 E7          	pop d
0628+  07DA E6          	pop c
0629+  07DB E5          	pop b
0630+  07DC EF          	pop si
0631+  07DD F9          	leave
0632+  07DE 09          	ret
0067   07DF             
0068   07DF             
0069   07DF             ; -----end include block-----
0070   07DF             
0071   07DF             
0072   07DF             .end
tasm: Number of errors = 0
